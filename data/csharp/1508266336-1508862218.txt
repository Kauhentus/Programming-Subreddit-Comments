&gt; ConfigureAwait(false) The default should be a pit-of-success and not an accident waiting to happen. In addition to anything more serious, a bool defaulting to true feels odd. 
Recently started a new job and the project I'm on uses Oracle. Was definitely a pain at first but I have gotten used to it with time. Still prefer MS SQL due to familiarity and some silly Oracle quirks, such as short names for identifiers.
It's not incorrect, but there's slow development and it's fragmented into incompatible Contrib and Extensions addons. Though I see Contrib went to .net standard 2 recently, nice. Urge to Dapper all the things makes all the things harder to change. I'd much rather let EF generate SQL for me until I NEED to optimize. If I'm populating a datagrid for example, I can select an anon type with deeply nested references into an entity and EF will do the joins automatically and return the whole object graph. Change the query by changing the Expression&lt;&gt;. Populate the same grid from Dapper and I have to do all the joins by hand and handle object generation very manually. Not wrong, just not my style. I like MicroORMs in general and it would be fun to try a few more. PS: I like EF, but I also hate lazy loading, and even the whole "save changes to everything" paradigm.
My previous job was .Net + Oracle DB (10 and, later, 11, if memory serves). IIRC, the decision to use Oracle for the DB was political/financial, but I wasn't privy to the exact rationale. That company was purchased by a different, very large company where .Net and Oracle seemed to be the standard choices in their respective niches based on some variety of best in breed analysis. I know that this involved RAC, but integration was still underway when I left. Oracle has a very good product, but I never could decide how much of the oddball works and strange behavior were a result of legacy support and how much was caused by a desire to make it harder to transfer systems and knowledge from Oracle to a competing product. Was generally unimpressed with their support personnel, which probably has a lot to do with being a very small client, at the time. I currently deal with MS SQL Server, which seems fine. It also seems less performant, but I'm not well-enough versed on the topic to know how much of that is actually SQL Server and not the system I'm supporting.
That is good feedback! Any suggestions?
Thanks! There is a nuget package. :) Also, I threw this together in about 30 minutes. I didn't take a single second to improve any code after I got it to work for my purposes, haha. In addition, a lot of the code you commented on comes directly from official ASP.NET code that I piggy backed. PRs welcome. :)
Why is this? I feel the opposite it true. 
Cost. If you're going to have some crazy massive DB infrastructure, like clustered or something, it's where I'd look at other alternatives simply so you don't have to buy licensing. It's better now, since you can run sql server on linux boxes though. After working with multiple different database frameworks, MSSQL generally tends to be my goto. 
[This sort of response from the NHibernate team](https://nhibernate.jira.com/browse/NH-3971) has caused me to lose all faith in the library. They don't understand how async works, and thus are very resistant to implementing it. Also it sucks to work with.
VS CA now uses Roslyn for a lot of it's checks. That said, I'm far more interested in what the compiled code looks like than whether you put the using statement inside or outside of the namespace.
When you write a bunch of code and you're slapping .ConfigureAwait(false) at the end of every asyncy line it feels wrong. I don't have a better solution, but it still feels wrong :) I don't want to change **this** default to true, same problem, other end of the codebase :) They could add a better additional helper method called something like IgnoreSyncContext() which just calls the slightly cryptic ConfigureAwait(false). 
Mixed projects would remain the same, no better, no worse. Or how about just a shorter name than ConfigureAwait(false)? 
cool, thx for the input
When in doubt, [pinky out](https://msdn.microsoft.com/en-us/library/zf50za27\(v=vs.110\).aspx)!
Pick a top level name for all of your projects, like a brand name. 
C#/F# mainly for our non-hardware systems and we use Postgresql, MySql + Sqlite. Most software is written on Linux as well, .NET Core and Mono. 
Really seems like an abuse of generics. The parsable types are known, so an extension class seems more appropriate. public static class Ext { public static int? TryParse(this string number) { int value; if (int.TryParse(number, out value)) return value; return null; } }
I work with .Net and MongoDB and Cassandra. Because document dbs and geo-distribution is awesome.
We're still using Visual FoxPro, Microsoft dropped support for it like 15 years ago.
What do you use for data access (dapper?). And what use for managing schema? (in place of dacpac) Thanks! 
Mostly Oracle and SQL Server - but as we're using ArcGIS, it's (mostly) abstracted away behind some interfaces. We'll start introducing PostgreSQL in the near future because of rising licensing costs.
We use a mix of SQL Server, PostegreSQL and Oracle. Basically customers that are Microsoft shops go with SQL Server, the others usually go with Oracle. Then we have a few that went with PostgreSQL mainly due to license costs. 
Oracle has been used for the last 20 years in our company and is now replaced by nosql. We‘re currently going through a half year long transition period where we change applications and setup the new db. Looking very promising so far and we‘re happy about how everything is currently working out.
I used to do that as well. What is it with government agencies and Oracle?
http://www.litedb.org/ is useful, if your app is doing all the reading &amp; writing to the database. Good for use with lambdas &amp; serialization too.
I am mostly Oracle db developer, but I also make some internal programs in .NET.
It is infuriating that Oracle doesn't have their .net core drivers out yet- and that they're the only major vendor to not have them. Paying up for the (theoretically) high end database platform should mean that that crap was available the day Core 2.0 was released. 
That's the main reason we're moving new dev work to alternative database platforms. We want to use .NET core going forward in an effort to containerize our apps, and we're not willing to wait for Oracle to get their shit together.
You would think that the company would make it a priority that you could actually connect with their database. 
I get the impression Oracle make most of their money from service plans and lawsuits rather than attracting new customers these days.
SQL Server, PostGres, and Cassandra. Trying to deprecate SQL Server and migrate everything to the other two.
I've been doing Oracle backend/Microsoft front end stuff for about 20 years now. It's amazing how the two companies have flipflopped in terms of servicing their developer communities. Microsoft's turnaround has been pheonomonal since Ballmer left and its almost impossible to keep up with the great stuff that keeps coming in the Dev Studio ecosystem. Oracle seems to believe they are entitled to your license fees and seems to be delivering next to nothing in return. 
oh my ... FoxPro was **the best** back in the dBase days ... I plunked down a chunk of change on MS stock within one hour following the MS announcement of its acquisition of Fox (sold the shares after a 600% increase and that was still too soon)
We use CosmosDB and LiteDB besides SQL Server. Or did you ask specifically for relational DBs? :p
Well, to be fair Oracle was there first. SQL Server was kind of a toy when it first started, while Oracle was (and is) a very capable enterprise-level database. It has a much longer history than SQL Server does. And it runs on a lot more platforms than SQL Server does. There's also a lot of golf involved: top-level managers at government ministries play golf with top-level sales guys at Oracle. Backs are scratched, and contracts are awarded.
And with nullable integers it's possible to validate the result with the "?" and "??" operators in one line , seems good to me
Work with both Oracle and Informix. Can't install Informix specific drivers tho (I don't have permission) so I couldn't use transaction scopes with all my functions so this has definitely led to errors. Still really bothers me that we don't really implement transactions in majority of our code throughout the company (which is actually mostly vb6)
We use primarily PostgreSQL in .net core apps, using Entity Framework Core to interface with it. Primarily I think we like the ease of spinning up a variety of docker containers as needed running variations of PostgreSQL -- we've invested pretty heavily in automated testing and continuous integration.
We use SQLite for client side DBs. The app was first developed before SQLExpress was a real viable option. 
Another vote for .NET and Mongo here. 
IBM DB2 on z/OS and the even older and more arcane IBM IMS. Would not recommend.
Yeah, I suggested IgnoreSyncContext() in another reply on this thread somewhere :) Not shorter per se but clearer? It would just call ConfigureAwait(false) 
It also took them an ungodly amount of time to release stable EF drivers for .Net 4
I was going off memory but I believe I was. In another project I did this: public delegate bool ParseDelegate&lt;T&gt;(string anInput, out T anOutput); // format of most standard .NET types TryParse methods public static T TryGet&lt;T&gt;(this object anObject, ParseDelegate&lt;T&gt; aParseFunction) { string stringValue = anObject.AsString(); if (string.IsNullOrEmpty(stringValue)) return default(T); T anOutput = default(T); try { aParseFunction(anObject.AsString(), out anOutput); return anOutput; } catch (Exception) { // swallow return default(T); } } public static string AsString(this object anObject) { if (anObject == null) return string.Empty; return anObject as string ?? anObject.ToString(); }
Ya thats what I did: public delegate bool ParseDelegate&lt;T&gt;(string anInput, out T anOutput); // format of most standard .NET types TryParse methods public static T TryGet&lt;T&gt;(this object anObject, ParseDelegate&lt;T&gt; aParseFunction) { string stringValue = anObject.AsString(); if (string.IsNullOrEmpty(stringValue)) return default(T); T anOutput = default(T); try { aParseFunction(anObject.AsString(), out anOutput); return anOutput; } catch (Exception) { // swallow return default(T); } } public static string AsString(this object anObject) { if (anObject == null) return string.Empty; return anObject as string ?? anObject.ToString(); }
Fuck Oracle and their shitty drivers.
We use an old *custom* version of MySQL at work due to tons of legacy code requiring it. It provides an interface to an old file database system for the legacy stuff. Hopefully will be able to upgrade within a few years..
PostgreSQL+LLBLGenPro ORM if possible. First is cross platform and free (docker, Linux whatever) and other is (commercial) best ORM out there. Other than that it depends on client. Often it is SQL Server. 
At school we once had a discussion about whether to use MySQL or MSSQL as backing database, only to use Entity Framework as ORM tool for an assignment. Never saw the mood get so grim that fast.
At school we once had a discussion about whether to use MySQL or MSSQL as backing database, only to use Entity Framework as ORM tool for an assignment. Never saw the mood get so grim that fast.
Ok: I made some changes! :)
I am of the minority that think Web Forms is pretty decent. I would not use it because it makes it hard to hire people and it is in maintenance mode but I liked it back then and I still like it more than ASP.NET MVC. So: - Check what the MVP pattern is and use it. There is an MVP framework that I find a bit heavier than I would like and in the past I rolled my own version but the framework is also fine. This gives you separation of concerns on par with MVC - remember the markup and code behind together form the view, the presenter is the controller and you still need service layer just like in MVC. It is better than MVC because your actions are linked via actual statically typed events and not by url conventions. - Don't try to avoid ViewState at all costs. Of course you have to keep it turned off by default but it is still useful. Just don't use it with GridViews and ListViews and keep track of its size. - If there are two solutions to a problem and one requires postback and the other does not err on the side of the non-postback solution. Say you can do something with a link button or with a link - use the link. This is of course extreme example and sometimes you do need postbacks. - The greatest advantage of Web Forms is that it is component oriented (just like React and Angular). Use this to your advantage! I have identified two kinds of Controls the first kind I call simply Controls - these do not talk to the model. They have all their data pushed to them from the parent via properties and if they need to communicate something back they raise events. Most of your controls should be of this type. The other I call Widgets. They can talk to the database and their logic is usually self contained. Make sure to have a convention and always know which kind of control you are working with (Widgets can use Controls but Controls, can't use Widgets). Don't turn controls into a widgets just to patch something quickly if requirements change! Rearchitect! - To bind things do not use SQL Data Source and things like that that force you to push your database logic in the view. Either bind to lists, to objectdatasource (implemented on to of the Presenter) or the new stuff that works with IQueryable (also pushed by the Presenter). - UpdatePanels are super cool but you should keep them small. Do not put the whole page in one update panel. Use small ones on each area that requires AJAX functionality. There is a property to tell them if they should update all other update panels (if you do it correctly they shouldn't). When an update panel is triggered the full page runs in the background minus the rendering. You can check if the postback was triggered by an update panel and which one and skip some heavy stuff if it is not needed. - If you use a lot of AJAX you can sidestep web forms. Just use WebAPI and JQuery together with Web Forms it is not different than using it with MVC. - One extreme technique we used back in the day was to build a kind of SPA by rendering the controls in a string and returning that string via AJAX and putting it on the page. We didn't have any non-ajax postbacks. It worked great and we benefited by Web Forms by composing controls including recursively (tree comments). The encapsulation and organization of a component framework is still worth it even if you turn off half of it.
Glad to see a column store db on here. Ramping up on HBase right now.
What? Projects most certainly are meant to live in multiple solutions. Or maybe I misunderstood.
One that hasn't been mentioned yet is Neo4j. I'm doing some discovery eith it right now for a research project. I'm pretty excited about it. As I've told other developers, if you've got a lot of many to many tables or find yourself writing recursive CTEs, then a graph database might be a better solution.
Former .NET dev here. I jumped from a part of my company that was 100% .NET and SQLServer with Dapper, to a part of the company which is about as anti-M$ as it can get (Ruby and endless gem dependencies everywhere). Just to spite them, I did a personal project with some of the new .NET Core and MySql with Dapper that worked pretty good as a demo and was like a 10th of the code of their Ruby api. It felt soooo good.
I'm a .net developer. We primarily use MS SQL Server but I've personally worked on apps that use Oracle as well as IBM Informix. One of the major subs of the corp I work for uses Oracle for timekeeping as well recruitment. (iRecruitment is fucking terrible) I will *never* understand the benefits of using Oracle. It is an expensive mess, and one of our subs spent in excess of 10 million in an upgrade a few years back. Anytime I have to work with it, I don't have that "a-ha!" moment that I have when working with other tech. That moment where you figure out the exact strength of the tech you're working with over previous alternatives you've worked with. I also built a sexy dashboard app (asp.net/C# + d3.js) that polls for data from a bunch of sources, some of those being IBM Informix. I ended up setting this up as a linked server so I could query it through SSMS. The experience wasn't as painful as Oracle, but it took a lot of trial and error and digging through documentation before I had a grasp on it from a syntax perspective. Queries through a linked server don't benefit from any intellisense type of syntax catching. Your query works or it doesn't. I might have been able to do this in a better way, but this was the first time I had worked with a project like this and was kind of on my own. Both the databases (Oracle &amp; Informix) came with products that our company or a subsidiary purchases, so I don't think it was an active decision by the company to choose an alternative over SQL.
SQL express is also free with almost no restrictions. You are just limited in database size and no replication.
&gt; 1. How to convert the int[] convertAlphabet into int so I can calculate the position of that char[] alphabet and change his sign? &gt; 2. How to break an openMessage into char so It can read separately due of equation? &gt; 3. If I want to decrypt the message the principles would be the same with the different equation? 1\. Try casting each `char` letter to its integer representation. For example: char a = 'A'; Console.WriteLine((int)a); //outputs "65" If you want 0-based, so `A` is zero, just subtract 65 from the result. You may need to handle lower case as well. (They start at 97) _______ 2\. You can do a `for` or `foreach` loop on a string to get each character: So either: for(int i = 0; i &lt; openMessage.Length; i++) { char letter = openMessage[i]; } or foreach(char letter in openMessage) { } _______ 3\. Yes, decryption in this case would be pretty much the same thing but just the inverse/opposite of the math arithmetic you used to encrypt it.
In a previous life, I worked with .net and SQLite. Mostly because I wanted a click-once install without the trouble of spinning up a massive MsSQL server on every client machine.
Do you really even need the browser or can you just craft the final post yourself and call the API with a web request instead of the whole browser. If all buttons trigger some post then just do them all sequentially yourself the same way. 
ad 1: Substract? How? At equation i typed in script?
Sure, wherever you like. It's just subtracting a number, and only necessary if you really want everything relative to zero.
I will try with suggestion that u gave me. If u dont mind to ask you again for help next time.
i'm using mySQL but i'm planing on porting to postgre
Cassandra. Reasons: geo distribution, horizontal scalability, fast writes and reads
I do primarily work with SQL server, however on my current project we are using MySQL. The biggest pain points are managing SQL scripts in a project-like structure (similar to a Database project), and packaging and deploying in a fashion similar to SQL Server. Ultimately we ended up using a Database project that is set to NOT build for the former, and I wrote custom Powershell scripts for the latter.
What's the advantage over SQLite or (compressed) JSON/XML for simple embedded storage? I thought the main advantage of NoSQL databases was in write-mostly scenarios with lots of data?
Sort by new, once you have a high enough rep to enter the review queues things get easier.
How is that possible? The whole selling point of the Ruby language and Rails are that they could do the same functionality at a fraction of the code written with C#/.NET or Java/Spring! If that Ruby on Rails project isn't terse or isn't able to be rapidly extended then I suspect that entire application wasn't in proper RoR convention.
You don't necessarily need to be an expert. One tip is looking for tags or searching for slightly obscure libraries that you have used pretty regularly. That can give you an edge.
Honestly I prefer SQLite for small-scale/hobby projects. MySQL doesn't have many advantages over competing DBs anymore and I find its quirks quite painful to work with.
I've used SQL Server, dBase files, MS Access, SQLite and FirebirdSQL with .NET. My focus these days is split 50/50 between MSSQL and Firebird. On our server side we're backed with SQL Server for all the already mentioned reasons (ease of use/admin, great tools, great performance, ...) But really my favorite is FirebirdSQL. Kind of the unsung hero. It fills a rather wide gap between apps where MSSQL is overkill and SQLite is nowhere near enough. Our field applications aggregate sensor data, store it, and provide the user the ability to manipulate, plot, report on, and export that data. Databases regularly get to 2-5MM records on cheap desktop/laptop hardware. We've been using FB for about ten years and I will recommend it anywhere I think it fits. Pros: * It's fast, uses very little memory for pretty big databases * Single file database means user can treat it like a "document" * Fully ACID, real transactions * Very good support for ANSI SQL * Very good programmability. Triggers, stored procs, selectable procedures, views, new UDFs via external plugin DLLs. The SQL dialect is straightforward and as easy to use as T-SQL, just more limited in scope and number of built-in UDFs * Unlike (IMO) MySQL it's a real database out of the box wrt to data safety and correctness We have several 90+MM row databases (25-35GB) running on cheap off-the-shelf laptops with few performance issues. When I write data to it, I know it's what I expect and that it will be there later. The installer can run silently, and administration is about as easy as it gets. It can be hidden from the user and uses less than 20MB of RAM unless it's actively running a query. 
At work our primary dB is MS SQL Server, but we recently integrated Mongo as well. We were reaching the size limit that is free and had to adapt. Now we are storing files in Mongo. Db came down from almost 10gb in size to around 500mb. Made my day :) 
We use SQL, MySQL, DB2, and RavenDB. Each one has their own purpose and we use .NET. Our main databases are DB2 and SQL though. 
I used to in my previous job. We had an app with a very large geospatial component, and at the time Oracle was the best/fastest for the geospatial queries. When we moved from classic ASP to .Net we used NHibernate as an ORM, since EF wasn’t out at the time. 
That's right. I work in a government agency and Oracle is our enterprise database even we have MS SQL as well. We use Entity Framework and good ol' Oracle packages.
Same except no EF. Old style ADO.NET against Oracle packages. I used MS SQL for many years and I find Oracle's PL/SQL has encouraged alot of business logic to be buried in multiple layers of packages. It has clearly become a problem as packages evolved with little oversight or overarching design. Many in the organization would like to see the business logic moved to .NET, but it is such a mess it's difficult to do without the risk that some ancient-unknown-but-necesary-due-to-long-forgotten-legislation might get lost in the rewrite to .NET.
Most my .NET work has been paired with AWS and so its been mostly MySQL, Postgres and AWS DynamoDB. SQL Server for older projects.
And, unless you're lucky enough to be on the most recent version, auto-incrementing freaking columns? Or maybe an xor function? Been working with Oracle 11g for 5 years now. Fuck Oracle. And all their shit products. With a cactus. 
I have been working with .net almost 10 years now and all of my projects run on MySQL. Originally I chose it because of my previous usage of PHP/MySQL. Most of my work is in mixed environments so a MySQL db is readily available and more convenient ( also cheaper on linux vm) Over time I've not seen the need to make the jump back to mssql although with entity framework the tooling has much better support for mssql within visual studio. My latest ecommerce codebase fully utilizes EF6 DB first design with MySQL. In theory I could just switch to another db provider although there really is no reason for me to do that. 
For my use, it's processing thousands of events a day. It also lets me dump in serialized data without having to do much for initialization / setup.
Press the little 'show all files' button on the solution explorer. All those 'extra' files should show up and you can delete them. This way it's easy to see what's already included and what is just hanging out in folders.
The IDE being free won't limit you, any of them generate the same CLR code. VS Pro and friends just have better tooling for wrangling big enterprise projects. You don't need to pay a penny to program!
Feature-wise, partial list just off the top of my head: NH: - get/load with lock strategy - Criteria query API - cascade delete orphan - custom user types - read only entities EF6: - async (that’s a big one) - Better LINQ support - Simpler convention based mapping and config - Simpler session API - Fancier identity map with auto-property fixup without requiring proxy classes
Stable?... cant import certain tables into EF DB modeler at all
MariDb/MySQL here, I'm not gonna pay for a DB that barely works on non-windows environments when there are free alternatives.
Main application I support is backed by Oracle, main reason is we replaced legacy code with .NET and left the database alone. Still use EF with it though, which is nice. My company is in bed with Oracle deep.
I use Postgres with Marten. 
.NET and Oracle, Cassandra. We use ODT and Datastax drivers respectively. 
Amazing!
How does cosmo db stack up with Mongo and Cassandra?
&gt; MySQL doesn't have many advantages over competing DBs anymore Best part of MySQL is that you get it for free with many types of web hosting plans. That is the only thing that comes to mind for me.
RavenDB looks fun, but $1,300 per core per year sounds really expensive for an object database.
You could say the same about PHP.
Not really. You can do it with shared projects but in reality you'll always see obstacles like missing unit test assemblies or the GUID diff in the sln files.
I know. Just always seems a little off to me that a pic of some guy and some chick is the thumbnail. 
I have no idea, but it sounds frustrating!
Thank you so much. I have 8GB Ram. I think i’d do the same. 4gb for my VM. Thank you so much!
Forgot to ask. What VM are you using?
My last project used Elasticsearch (for optimized search reasons). It has a pretty good .NET implementation (called NEST)
Out of curiosity, how was the performance in comparison?
We don't use Cosmo because it has an extremely basic production infrastructure management, you can't really go beyond a 3 node replicaset with mongo, and I'm not even sure if it supports Cassandra. We need a much more complex geodistributed shard based solution for our case and azure can't really manage that.
I also have a crush on Dapper. It is always interesting to make EF developers look bad when we show them how to actually use SQL.
Problem is that, I need to do an authentication before accessing the page. I tried webrequest before and it's really difficult to pass authentication and continue. In browser I have already set always authenticate, so I only need to work with needed page.
I have both worked with MS SQL and other databases. Depending on the project I have been using * PostgreSQL * MySQL * MariaDB (well - maybe quite the same, but still) * (SQLite) They all have their pros and cons and you should decide which one to use not only by tech stack, but also by requirements on you RDBS. 
I use VirtualBox, but I'm pretty sure everything I've said applies to Parallels or any other VM too.
Yes, this should work, I was haping there would be an automatic way though.
Good luck! If possible, get a RAM upgrade too.
I’m not sure if RAM can be upgraded since it’s standardized unless it’s a pre order customized mac. 
The basics? A good book, e.g. Head First C# or The Yellow Book.
I'm a big fan of walkthroughs for learning. I find the screen shots and explanations allow me to work at my own pace, skip ahead or go back to a particular area. Why not try out this one: https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/introduction/getting-started
Removed: Rule 7.
I’m not entirely sure how much we use it to be honest. I’ve never worked with it. I’ve just seen it on a few servers. 
Install Genymotion (Free for personal use) and never look back.
Pluralsights path on c# is amazing, you can get a three month free trial if you sign up for a free visual studio dev account. There’s over a hundred hours of videos but they start with the basics and go from there. 
&gt; It is probably possible that some existing code depends on the allocations of a lambda. Surely that is a sign of bigger issues though. I don't think that makes any sense. If you use a local function in a place where a delegate is needed, it will behave exactly like if you wrote a lambda. A lambda is a language construct, not a CLR or runtime concept.
Right? I might be attacking this from the wrong angle as well though... I troubleshot this a bit further and discovered that I can't remote in to a Windows 7 Machine from outside their network, but Windows 8.1 and 10 I can. Maybe it's a security setting? My program already let's itself through the firewall so... hmm...
A lot of it just had to do with the set up of the project. The previous architect (who was fired) was really into microservices, but had never worked in Ruby before and really had no clue how to implement what he was talking about (not that I did either, but I wouldn't have lied to management about that). He talked (endlessly) about convention over configuration but never actually learned the conventions, so he ended up making up really crappy versions of many conventions. As a play project, and just to see if I could do it, I installed dotnet core on my Mac that I'm required to use now, created a few tables, wrote some stored procedure, made some classes for my data and then just used those classes in the api. It was all just experimenting, but it was nice and easy for people to look at and understand.
You know, I didn't really benchmark it, but it felt snappier than our Ruby api. I'm a fan of stored procedures, so I moved done business logic to the DB and my api barely did any processing at all, which is probably about as anti-rails as you can get lol.
You know, I didn't really benchmark it, but it felt snappier than our Ruby api. I'm a fan of stored procedures, so I moved done business logic to the DB and my api barely did any processing at all, which is probably about as anti-rails as you can get lol.
Can't you use Windows File Audit to do this. I have done something like this. https://blogs.technet.microsoft.com/mspfe/2013/08/26/auditing-file-access-on-file-servers/ 1. Enable Audit with GPO (At my workplace, we put it in a specified OU) 2. It triggers an event 4663 3. Taskscheduler is enabled when a Custom event is triggered (It uses the sort of Query Langage used in task scheduled) The event triggers when Event = 4663 and ObjectNAme ) FolderName I need 4. A script is run, checking if File is accessible (because while the printer creates the pdf, it is locked) 5. When the pdf is freed, I copy it to some other Networkshare and the tasks end.
What languages do you already know? 
IgnoreSyncContext(true) would at least make it feel like the default bool value was false. &gt; Library authors should specify CA(false) at every await statement. Your library should not be depending on which synchronization context the method continues. I've seen this guidance before. To me it implies that the default should be the behavior we get with ConfigureAwait(false). I once worked on a project where someone wrote an analyzer to scan the source for awaits without COnfigureAwait(false)
I've used it. It works, but it slows down your compilation process and it introduces *magic* to your code base. Whether that is acceptable to you... Is up to you. Personally I will not use this for any future project and simply demand clean and expressive code, not magic.
That's like saying you like schooling C#/Java folks by showing them how to actually use assembly. I havn't tried it, but pretty sure EF Core works on Core just fine.
EF Core will never be 100% compatible with EF 6. My SQL statements run on both.
I know the feeling. I worked on a project where the architect (who eventually got fired) used code injection (I don't remember which tool) for INotifyPropertyChanged; slow compilation was a huge pain. I don't find the repetition of ConfigureAwait(false) to be clean or expressive, so I would be willing to lose a bit of time at compilation to have it added. It kind of feels like pixie-dust that needs to be sprinkled around ;) 
I develop server plugins for unturned (using rocketmod api) and usually any plugin that requires a database uses MySQL. With a few using some server less databases like litedb
&gt; I moved most business logic to the DB This seems about as bad as your boss trying to implement conventions he doesn't understand, tbh. 
When Ruby came out .NET didn't have an MVC option for web development, it was all WebForms. And Java was obsessed with ridiculously complicated frameworks that required a PhD to understand. Ruby was a wakeup call to the industry that you didn't need all of that crap. For that I'll always be grateful.
Business logic often belongs in the database. Not all of it mind you, I don't want to back to those days, but a lot more than what's popular today. It's a tool explicitly designed for manipulating massive amounts of data and in the general case can do so much better than any 3GL language such as C#.
Wrong direction. C# and Java are 3rd generation languages, SQL is a 4GL. 
I completely disagree. Business logic in the DB isn't scalable, is harder to test, and is harder to maintain. There are some cases where business logic should be in the database, such as simple logic operating on large sets instead of individual rows, but that is likely to be a minority of the time - certainly not most. I'm thinking about large, blanket CRUD operations here (like disabling ALL records based on a simple criteria). But most business logic isn't going to be doing that - it's going to be doing operations on a record by record basis. In which case, the database isn't the place to do so. If C# doesn't meet your needs, perhaps look into a language more suitable to large scale data manipulation, such as R. 
[Bob Tabor's fundamentals course](https://mva.microsoft.com/en-us/training-courses/c-fundamentals-for-absolute-beginners-16169) is a great introduction to C#, but it might be too slow for you if you already have some experience with programming, and it doesn't focus on web. There are some great trainings for the C# web stack on Pluralsight, but that costs $.
I believe not being an expert is an advantage sometimes. I'm not an expert and when I see a simple solution to a problem on stackoverflow that's what I usually go for, experts usually provide a solution that requires knowledge in other areas and it's not always practical when you have little time left or just need a fix without diving in completely new territory.
I've been using Entity Framework Core with PostgreSQL for both of those (.NET Core Server running on Linux)
Seconded. If only they'd release DB2 drivers for VS 2017 (not .NET core) so I can work on phasing it out for the Oracle DB setup we have.
The Pluralsight path on C# is great. I'm doing it myself. You can get it for free with Visual Studio Dev Essentials. 
Not sure if this will help, but I found out Derek Banas over at YT has 25 quick episodes(ranging from 15 to 25 minutes length) for C#. Here is the link to the tutorial: https://www.youtube.com/playlist?list=PLGLfVvz_LVvRX6xK1oi0reKci6ignjdSa He does not go into detail a lot, but I used him to remember what C# was and by the examples he does, its the basics of the syntax/way of doing things. I think it took me 5 days(5 episodes per day) to do this playlist and what I saw afterwards his "How to make Games" playlists continue more in depth with C#. Hope this helps as well as what other people suggest. Its your choice to choose what suits you. 
I know it doesn't seem like it when reading about all the coolest web development platforms, but a huge amount of web development work is done on the Microsoft stack. If you learn it well, and get comfortable with it, you won't have trouble finding work. Bonus points if you learn *old* Microsoft technologies. Migrating legacy applications is at least 50% of the programming jobs out there.
I used Pluralsight when I was learning C#
Unless something changed recently they are not the same thing. Razor is server side. Angular is client side. Razor will allow you to create pages extremely fast as you can use scaffolding. Angular will allow responsive design type of experience, but will be more involved. 
Razor renders the HTML on the server. Angular renders it on the client. For applications with a lot of dynamic stuff happening, you don't want to have to call back to the server every time you want to render some new HTML.
Try building a list, where you add items without a page reload. Try creating a form where fields defined on each other. Anything that requires an interactive ui without page refreshes requires something other than Razor. 
&gt; I don't find the repetition of ConfigureAwait(false) to be clean or expressive It's expressive because it says what it does. Right away, right there. If the length annoys you, you could also write an extension method and just name it `CA()` or something. Still better than stuff like Fody because the code is still there.
What's the code of the data context? Are you reporting that `CanLogin` changed when you change the value of one of the properties?
You can use Windows Authentication as others suggested, but for server applications, there's nothing wrong with storing a connection string in your web.config. If someone gains access to the server, the risks are about the same. The main thing is to protect the server with a good password.
Well, here's and example of one of the properties: public IList&lt;LocationModel&gt; LocationList { get { return _locationList; } set { _locationList = value; OnPropertyChanged(nameof(LocationList)); } } public int SelectedLocationId { get { return _selectedLocationId; } set { _selectedLocationId = value; OnPropertyChanged(nameof(SelectedLocationId)); } } They both share the same design. What would you need to see of the data context other than those properties? It is rather large, I tried my best to include the most relevant parts so as not to go overboard with what you have to read.
And there is your issue. You never tell the UI part that the value of your `CanLogin` property changed - how would it know? Add a `OnPropertyChanged(nameof(CanLogin))` to your setters.
I once ran into an issue with the emulator refusing to start; I eventually figured out that I don't have enough RAM on my PC (I have 8GB) to run both Windows and a virtual Android device at the same time. Can't say for sure what your situation is but I thought maybe this might help you get started!
What version of the RDP protocol is installed on the Windows 7 machines? You might need to [update](https://support.microsoft.com/en-us/help/2592687/remote-desktop-protocol-rdp-8-0-update-for-windows-7-and-windows-serve) them.
Ooh! I didn't know about this, thank you! I'll test this out when I get back to my workshop tonight. If this is exactly what I needed, then I'll be forever greaful. I'll keep you posted, thanks again!
Oh boy. Here we go.
If you do it naively sure. But if you put the database under source control (e.g. SSDT) and use table-driven logic instead of nested if statements then maintenance is often as easy as modifying a record. As for testing, you should be doing the exact same black box testing either way.
P.S. The hot ticket this year is running R in the database.
EF migrations are too fragile. They work fine during early development, but once you're going into staging/production (and have DBAs managing the database), you should be using some other approach for database migrations. FluentMigrator or SSDT or anything else besides EF migrations.
Yeah, it feels like that doesn't it? I was reading about this today because I had my arms up to the elbows in an old UI at work which did suspicious things with async. It feels safer to have the default as false, it doesn't feel like the underlying design is wrong exactly, but it does feel wrong spattering them in everywhere. We need a Cleary to come in and clear it all up. He's always good with the async history :) 
Is it Intel's fault? I was very unhappy they didn't announce a 32GB MacBook Pro earlier this year. 16GB is just not enough for professional development when you have to run a Win VM to use Microsoft's tooling.
Bridge.NET is an open source C#-to-JavaScript Compiler. 
There's a few good resources already posted, I'd like to recommend [LinqPad](https://www.linqpad.net/) as a free tool that allows you to experiment with C# code without all the messing around that Visual Studio requires. Once you've got it installed, you can download a number of chapters of *C# in a Nutshell*, including a chapter on C# language basics.
Yes and running R or Python in the DB is quite a bit different than running traditional SQL queries. I'd also wager that if your task requires running R in the DB, you are more likely than not stepping into the territories where logic in the DB makes sense. That still doesn't mean all/most of your business logic belongs in there. 
The argument of why you shouldn't put most/all business logic in your database has been done to death. There are probably hundreds of blogs that can explain why it's a bad decision much more eloquently than I care to attempt to. I'm sure you've read many, and obviously disagree. You're, of course, welcome to your opinion. I'm just glad I don't have to work with you or your code.
Northcentral Technical College's Object Oriented Programming 1 course runs about 400 dollars and includes unlimited tutoring and instructor access. 10/10 would reccommend. That's how I got started. 
[When there's a form, you can often tell by inspecting the form](https://i.imgur.com/yDJ4zJP.png) When there's an API intended for public use, the site will often have API documentation.
 So why use this instead of just regular asp.net? I thought one of the reasons to use node was so your front-end developers could change the back-end, if it's still C#, why use node?
I second that. Use LinqPad for your tiny day to day tasks, things you'd usually write 5 lines of shell/perl/batch/whatever for. If you are already use any common database (dmbs: MSSQL,MySql,SqlLight,Postgres), try them via Linqpad for smaller tasks at first. One of the main benefits of LinqPad is to `.Dump()`almost anything.
you should use a [tryParse](https://msdn.microsoft.com/en-us/library/f02979c7(v=vs.110).aspx) on those int and decimal parses as someone may enter one instead of 1 etc and crash your app.
Seconded. PluralSight is great and the basic material (which is all one needs) is free with an MSDN subscription. Learning C# is not like learning any other language in that you need to learn how things are done in the Visual Studio environment as well. This is where Pluralsight videos really help, because they provide a visual guide to getting around in Visual Studio. Coming from a Unix background where I needed was a text editor, this was the hump I needed to get over, and Pluralsight was amazing for that.
I'm a fan of buying a C# book and reading it while taking notes and doing some practice programs at the end of each chapter. I think books are able to give more information on each topic and give you a more solid foundation than just videos alone. What's most important is doing the practice programs after each chapter, especially the difficult ones. 
How is "configure await to false" expressive? An enum/constant could make it express something ConfigureAwait(AwaitOptions.IngnoreSyncContext) I'll probably use an analyzer to check for them. 
Yep, and not a single one of those blogs ever shows code.
How... how does it seem like Angular and Razor do the same things?
The lack of a Sync Context in .Core muddies a bit more. If I understood correctly, .Core effectively has a default of ConfigureAwait(false) 
I have 16 GB so It should be enough. I feel like I just didn't install everything that I suppose to. I tried to compile the app and use it on my phone but I can't open the .apk because it comes with "There was a problem while parsing the package". Don't know this is stupid....
Interesting point. My answer would be - running an application in Node enables usage of thousands JavaScript libraries. I'd say JavaScript ecosystem is the most evolving one for at least several years and it'll will definitely continue to grow. With Retyped and Bridge.NET you can get advantage from the both worlds: .NET and JavaScript. And what's the most desirable thing is that while you're using JavaScript libraries, you keep being protected by static typing that operates at compile time. Another comment is regarding C# syntax. Because Retyped keeps original casing of JavaScript API, actual C# code would be extremely similar to JavaScript. I think it'd be not a big deal for a front-end developer to work with that code.
It replaces more than just razor, it replaces the entire project / mvc layer.
Could make the extension method be AbandonCurrentContext() DiscardCurrentContext() ContinueOnCurrentContext() ContinueOnCapturedContext() AbandonCapturedContext() The last two best match the current param name. I agree 'ConfigureAwait' isn't the best but you get used to what it is doing fairly quickly anyways. There are also instances where you do want to continue on the captured context, so doing it by default across all awaited lines would make those instances break.
Where are they getting the price from?
Bob Tabor is great. I got a previous emoployer to buy me a lifetime sub to his devu.com website which expands on his MVA course and extends into several related topics (SQL Server, Entity, Core). It's not a big operation like some of the MOOCs out there but the quality is great and new content comes online every few months.
https://devu.com/courses
People pretty much mentioned the stuff you need to know, but I also would like to add that I like using a front-end framework because in my opinion it provides a better separation of concerns. In a MVC project you always have some random flying stuff that aren't suppose to be there and stuff gets ugly really quick. 
But then why not just use typescript? Then javascript and c# developers can both work in a language they're familiar with with everything you just stated. And what backend library is there for JS that there isn't for C#?
It may have been a glitch, since mine is also still 10.
We just wrote a Node.js + Electron app that works on Mac, Linux, and Windows. All in C# using the tools and language that our development team knows well. That was a lot of fun and extremely efficient development experience. See https://github.com/bridgedotnet/Widgetoko
Just out of curiosity, did you discuss wether to call it a compiler or a transpiler? 
https://www.google.com/search?q=bitcoin+price+api
&gt; But then why not just use typescript? Because TypeScript doesn't support running C# code?
Hah! I'm just starting a .netcore project at work, so this is good to know. 
Do you have the latest version of Visual Studio 2017 (15.4)?
On a similar note, did you consider going C# to Typescript? Or extracting maps from the C# that could allow the generated code to be more easily consumed by Typescript? Not a feature request really, just curious :)
From https://msdn.microsoft.com/en-us/library/system.io.stream(v=vs.110).aspx : "Do not override the Close method, instead, put all the Stream cleanup logic in the Dispose method." Streams implement IDisposable, so you should use the using() statement to ensure they're closed and removed from memory when they fall out of scope // Get the request stream. using(Stream dataStream = request.GetRequestStream()) { // Write the data to the request stream. dataStream.Write(byteArray, 0, byteArray.Length); } // Stream object's .dispose() method is called after the block in the using statement. The Stream is closed as part of it's .dispose() method. 
I'm using this [WPF C#](https://www.youtube.com/watch?v=Vjldip84CXQ&amp;list=PLrW43fNmjaQVYF4zgsD0oL9Iv6u23PI6M&amp;index=1) to learn. So far so good.
Yes, I also target Fall Creators Update. I found a solution though... kind of. When I tried with a background application the problem above occurred. When I tried with a simple black uwp app, it works; no errors. In the end I was right that .net standard solves these problems, although I did not investigate why the background app did not work. It's an older template I got installed externally, could be a reason.
A TypeScript .d.ts file is generated for your project. See the **TypeScript** on all Deck samples (https://deck.net). As a compiler target instead of JavaScript, in a future release, we might be able to add TypeScript as a target. Just not entirely sure if there's enough value there.
No dice, I downloaded the file appropriate for my two Windows 7 test machines, as well as the prerequisite they recommended applying first and then ran my application after they finished and it didn't do it. Is there an even later version of that perhaps?
It's a bit of a pedantic argument to me. If you want to do some hair-splitting, then Bridge is currently a Transpiler. If (when) Bridge can target WASM, then all of a sudden it's technically a Compiler. Flip a switch to generate JavaScript again, and poof it's a Transpiler again. TypeScript says they're a Compiler. That's good enough for me. There are more important issues.
Basically, modern web development is split into two camps. 1. Uses server-side technologies for its controllers and views and has JavaScript in its views to do dynamic stuff. * MvM and Razor are the ASP.NET server-side technologies used for this. * Client-side technologies may include things like jQuery or Dojo. * May also include [SignalR](https://www.asp.net/signalr), which is technically both a server-side and client-side technology. 2. Uses server-side technologies to expose REST endpoints. Client-side technologies are used to do controllers and views. * WebAPI is the ASP.NET server-side technology used for this. * Client-side technologies may include things like AngularJS and React. There's a whole huge argument about which of these are better.
Surprisingly, [yes](https://support.microsoft.com/en-us/help/2830477/update-for-remoteapp-and-desktop-connections-feature-is-available-for). v8.1 Try rebooting them after applying this. If that doesn't work, I don't know what to tell you.
In my experience JS libraries are of lower quality. I'd take the .NET ones whenever possible. I'd rather invest in porting that super important JS library the project cannot work without to .NET than run C# on top of Node.js. That being said the reverse proposition of Bridge.NET is great. I hope writing C# on the front end becomes mainstream.
If reputation is your goal you can build it up with good questions. Back in the day I got reputation from answers but these days questions are hard for C# because the easy ones are answered as you have figured yourself. I can still hunt for questions and refresh every minute to grind reputation but it achieves nothing. Instead when I have a question I document it on SO and share it on social media (sometimes here too). People not only answer it but upvote it too.
Without a phone UWP is dead on arrival and it will drag their consumer products with it including Windows
I am pretty sure they added a way to call the UWP APIs from Win32 apps
I tried it out, got the prerequisite as well, when I ran them they all said my computer already had that update. Restarted anyway just cause, then I tried it again, no dice. Thanks for trying though, I had hope lol
&gt; We just wrote a Node.js + Electron app that works on Mac, Linux, and Windows. All in C# using the tools and language that our development team knows well. Haha, what? This cannot be a good idea at all except for the novelty. You're taking an enormous hit to your maintainability and performance just to take part in the desktop Javascript fad. We have two great projects, Mono and .NET Core, that work great for creating cross-platform apps.
Intel has been slacking a bit when it comes to releasing CPUs — intel just released a laptop cpu that can support more than 16GB (core i7 8th gen) in August, which was obviously too late for the Apple laptop refresh earlier this year - so we might see MBPs with up to 32gb of DDR4 early next year. In my experience, you can just barely squeak by — even with VS 2017 and SharePoint VMs (with crawls turned off) with 4GB to host and 12 to the VM — but be prepared to kill some processes when your SP site becomes unresponsive because SQL has run out of ram and is churning through the page file. But man, a 32GB MBP would be some sweetness ... 
It probably depends on what you're building, but we haven't seen any performance issues. Performance has been excellent. Major league apps such as Visual Studio Code, Slack, and GitHub Desktop are all built on Electron. Certainly nowhere near fad territory. An amazing new world of opportunities is opening up to .NET developers.
Absolutely not. In no universe are any of the examples you just gave resource or performance efficient. VS Code is constantly, all the time, berated for its performance and resource hogging. Same with Slack! Not only are you losing the native JIT efficiency and native UI APIs of C#, but you're also adding ***multiple entire browser renderer processes into your application.*** It's absolutely ridiculous to think that's an okay tradeoff! 
If you're only looking through a lens narrowly focused on resource or performance efficiency, then maybe Electron is not the answer. Can't say I've ever experienced any of those performance issues that are trotted out every time Electron is mentioned. Obviously, all stack decisions are going to have some possible trade-offs. The fact that we built a "real" app in what was the equivalent of a weekend, built installers, distributed that app across multiple platforms on multiple OS's, using open-source tools, and we could easily port the whole thing directly into a web app and progressive mobile app... and we wrote the whole thing in C#... to me that was an incredibly efficient use of resources. An epiphany really.
I'd like to also add that C# is a very fun language to work with. I've worked in C#, Ruby, PHP, and JavaScript professionally at some time or another and if I have my pick, I'll choose C#. The tools are **amazing** and the language is very well thought out. I think it's even starting to gain some of the coolness factor with .NET Core.
 How does that have to do with anything? Neither does what the OP posted, it just turns your C# into JS, you still can't run C#, it's just running Javascript with a pretty C# layer over it
If you don't see why fixing a non-issue by adding an insane amount of resource overhead and hoop jumping is a problem, then I feel very sorry for your users and your project's maintainers.
Or just install mono
Looking through the documentation, it appears you may have to use a new stream for each message. Using the asynchronous version of the method may help alleviate some of the lag you notice though.
Well freebie parsing json look up newtonsoft.json which is free for commercial use and you'll be parsing in minutes 
I think your concern with the stream being open is that you are confusing it with a connection .. while it is true you can't have an open stream in this scenario without a connection the reverse is not true. Look into connection pooling 
Could check out some Pluralsite courses. Also check out [this thread from earlier today](https://www.reddit.com/r/csharp/comments/775em8/how_to_efficiently_learn_c/).
I'm so sick of JavaScript apps for the desktop. And the newest version of visual studio even launches a Node process in the background for some reason. Makes no sense at all.
In my mind few people get that right anyways. To compile, in normal English, it to combine many things into one thing. A transpiler is the combination of the words "to translate" and "to compile". But many transpiler don't actually compile, and instead return one output file per input file. 
Super cool. I guess it depends on what happens with Typescript in the future. I know so many organisations that are keenly adopting it right now.
I recommend Northcentral Technical College's Object Oriented Programming series. It's accredited (transfer anywhere) and includes unlimited tutoring and instructor support for about 400 dollars per class. I went from street to pro in two years with their curriculum, highly recommend it.
 var x = new Random(DateTime.Now.Millisecond).Next(1,1000000); Console.WriteLine($"Current bitcoin price is {x}");
Or you could like... write csharp apps in csharp. 
I just finished reading about Azure Functions Core and cursing profusely because I probably will end up rewriting some C# functions in JavaScript 
Yeah. The JS ecosystem is a fucking shit pile. It's the worst tool chain in all of programming. You need hundreds of thousands of lines of code just to write hello world these days, after mutilating your source 5 separate times before it's ready to run in the browser. It's just shit, from top to bottom.
A `ConfigureAwait(false)` or `ConfigureAwait(continueOnCapturedContext: false)` is more expressive than "*somewhere we have a post-compile step configured that adds this automagically*".
&gt; running an application in Node enables usage of thousands JavaScript libraries. And lose the ability to run multi-threaded.
I've just started a .netcore project and was surprised about the lack of authentication options for its react/angular templates. On a more positive note, I found the templates very easy to understand, much easier than some of the Node based Yo starters. The debugging experience in VS 2017 is great too. I've also decided that server side React is a horrible idea, but that might just be my lack of experience talking. I can't tell if you can wire in server side rendering later or not, so I guess I need to answer the question sooner rather than later. SignalR is great. It's matured a lot.
A transpiler is a compiler. Transpiler means "source-to-source compiler". Just because it doesn't generate byte-code or assembly code, doesn't mean it's not a compiler.
Yes, agreed. It would be nice if there was an option to abstract some of that complexity away into a higher level type-safe language and have a compiler ensure integrity. Quality would improve. 
Seconded on pluralsite. Google really. Even day to day I look stuff up while I’m a c# dev. Things change everyday. No way can you work full time and keep up with EVERYTHING. Just google examples and use your previous knowledge to piece things together to get your solution. 
Except neither of them support wpf
All the new APIs from Windows 8 onwards are UWP. Win16 eventually stopped being supported.
That doesn't change the fact the future is made of UWP APIs. Desktop Bridge is a migration tool to the shinny new UWP world. https://blogs.windows.com/buildingapps/2017/10/18/visual-studio-2017-update-4-makes-easy-modernize-desktop-application-make-store-ready/#lXFQhEfPorHzZW2v.97 
Why on EARTH would you want to take c# and convert to the absolute nightmare of insecure, platform inconsistent, insecure, house-of-bug-ridden-cards of JavaScript?
Because how are you going to get malware infected core packages into your app if you don't convert to Node first? And all of that strongly-typed OOP syntactic sugar and helper methods, who wants THAT?
&gt; Why? So my C# app can run on billions of devices that support JavaScript. All the reasons you mention are EXACTLY why Bridge would be valuable. &gt; Ever tried dealing with dates in javascript? Yes. ;) &gt; Why would you EVER want to convert your c# to that mess? What does it matter to you as the Developer? You are writing C# against the C# API. With Bridge, you are writing C#, not JavaScript. For the most part, the runtime is irrelevant and transparent to you. The compiler has the responsibility of making your C# work on the platform your target. In this case, JavaScript. 
Because you get to *write* in C#, and *run* anywhere javascript can.
&gt; It would be nice if there was an option to abstract some of that complexity away into a higher level type-safe language and have a compiler ensure integrity. -&gt; TypeScript.
Can confirm. And it's fast too. Parsed a 1GB wireshark json dump in relatively low time.
So I took your suggestion to the hearth and did some editing on my code: class Program { static void Main(string[] args) { string input = ""; string openMessage = ""; openMessage = openMessage.ToUpper(); string cryptedMessage = ""; int a; int b; Console.WriteLine("Enter first value for encrypting the message:"); input = Console.ReadLine(); a = int.Parse(input); Console.WriteLine("Enter second value for encrypting the message:"); input = Console.ReadLine(); b = int.Parse(input); Console.WriteLine("Enter the message you want to encrypt:"); openMessage = Console.ReadLine(); foreach (char letter in openMessage) { int letterNumber = (int)letter; letterNumber = (a*(letterNumber-65)+b)%26; //Afinne Cipher math char encryptedLetter = (char)letterNumber; cryptedMessage = cryptedMessage + encryptedLetter; } Console.WriteLine(cryptedMessage); } } During the testing, I came across to the problem: Unhandled Exception: System.FormatException: Input string was not in a correct format. at System.Number.StringToNumber(String str, NumberStyles options, NumberBuffer&amp; number, NumberFormatInfo info, Boolean parseDecimal) at System.Number.ParseInt32(String s, NumberStyles style, NumberFormatInfo info) at affineCipher.Program.Main(String[] args) in /home/fingerzz/RiderProjects/afinne_cipher/afinne_cipher/afinneCipher/Program.cs:line 22 
It's certainly not clean, though :(. At any rate, it's most often not needed, so putting it everywhere is overkill.
When you are writing a library, then you should write it at **every** first `await` statement in every public method **minimum**. Best practice is just to have it at every `await` statement, so you prevent accidentally recovering the synchronization context after code refactoring. Whether that is clean or not is certainly arguable.
Actually it's relatively slow but it's got a lot of features and it's fast enough for almost any use case.
Not unless you want to manually integrate the two projects, which you can't. You could be best off having them just link to your website. What would be wrong with that? 
Just a minor note here: There is a huge difference between AngularJS and Angular 4. So if you're finding comparisons between AngularJS and Razor they won't give you an up-to-date comparison since AngularJS is a thing of the past. I found [this page](https://medium.com/@angularminds/comparison-between-angular-1-vs-angular-2-vs-angular-4-62fe79c379e3) that gives an in-depth comparison between AngularJS (1.0) and Angular 2 and 4: 
Thanks, if you don't mind I have a follow up question: How can one avoid unnecessary nesting of usings? If you have like an exception handler + 2 usings then it already looks ugly because its unnecessary indented. Thank you very much.
You can override the style for the button and use data triggers to set it to disabled if the selected value of any of the combo boxes are null or blank. That can all be done in xaml without using your viewmodel. 
Oh. That makes a lot more sense. I thought the viewmodel would change when OnPropertyChanged is called, but I should have realised that I need to call it for the specific properties where it's called. I feel a little silly now, but this gives me better insight into how WPF actually works. Thank you for your help. 
Oh? I haven't used data triggers before. Do you have an example that I could use? That might be better than what I was doing.
Unless you want to integrate tightly with their app (which you can't) then you only have two choices - Iframe or a Link. PS: Iframes are ok in limited situations. I wouldn't want to use it to integrate an entire app, but displaying/using parts of your app should work fine. 
For multi-threading there is a great tutorial/book by Joe Albahari which helped me a lot. Kudos to him. http://www.albahari.com/threading/
&gt; I worked on a project where the architect (who eventually got fired) used code injection (I don't remember which tool) for INotifyPropertyChanged; slow compilation was a huge pain. Not sure what he was using, but I've used PropertyChanged.Fody extensively for this purpose on view models in a decently sized desktop application project, and even completely removing Fody only makes about a 2 second difference, from a build time of 1 minute with Fody+PropertyChanged, to 58 seconds without. That's hardly a significant difference, and frankly, even if the difference had been bigger than that it'd probably still be worth it to avoid the headache of having to write and maintain vast amounts of horrible INotifyPropertyChanged boilerplate code.
Thanks a lot for the reply, i've been trying this but can't make it work, from what i see ( since i can list the sessions open on my pc ) i can't connect to the remote desktop since it also has a gateway...Don't really know if i can make it work like this
&gt; // Stream object's .dispose() method is called automatically after the block in the using statement. // The Stream is closed as part of it's .dispose() method. Thank you
&gt;missing my wife's birthday in order to make a deadline for NGEN support for generics (she is very forgiving, please thank her if you ever meet her); We should have a Happy Generics Day on her birthday. The effort and dedication of everyone involved is seriously appreciated, I don't know how I'd use C# without generics, LINQ, and the other features it enables. It actually freaks me out that it was such a close call.
To think we'd have non-generics if not for dedication of the people involved...
You might want to read about object serialization: https://msdn.microsoft.com/en-us/library/ms973893.aspx Hope it helps.
You should learn to ask "why", it helps a lot. Like why does it say it can't convert 'System.Tuple&lt;string,string&gt;' to 'string'? That one sentence the complier printed is the answer to your question. And it should even print the number of the line where the problem is located. If you would have looked at that line, you could have realized that you have a List which contains tuples, but then later you ask that list to give you strings. Compiler can't make a string out of a tuple. Either change the list to work with strings or create the string from the tuple entries yourself.
If you connect to the database directly, there is the possibility that a user (or attacker) discovers the database credentials in your application and accesses data or makes modifications outside of their intended role. You can give users individual database accounts with different permissions, but IMO that quickly gets messy for any moderately complex project that requires granular access controls.
&gt; The world is as it is today because we act when we have the chance to act, and because we invest in foundations that last the test of time. If you see a chance, take it. Great advice for anyone.
For your f# stuff, is that running on .Net Core? If yes, how is it working out in terms of development experience and 3rd party library support? If not, do you use DB type providers and how are those working out? I've read a lot of people don't like type providers got anything more than just a demo. 
We use TypeScript at work. It is enjoyable coding in TypeScript whereas I would find plain ol' JS infuriating. But it doesn't save you from the mess that is the convuluted build processes involving more packages than there are stars in the universe along with Webpack breaking often.
So an API is more recommended even in a desktop application?
Thanks, but it will not work with tuples. Just tried
Looks really neat! &gt; This project and the distribution of this project is not illegal, nor does it violate any DMCA laws. Is that true? Even for the API?
Thats the line: foreach (string list in myData) but even if I do something like this: foreach (string list in myData.ToString()) I get another error Cannot convert type 'char' to 'string'
You can't just randomly slap a `ToString()` on something and expect it to work. For fun: try `Console.WriteLine(myData.ToString())` and see what it prints. It's not nearly what you expect it to do. And because you're then iteratating over a string (which results in a char per iteration) you get the message `Cannot convert type 'char' to 'string'`.
Yes, this would be a perfect scenario for an API. 
I don't remember the actual tool name, its was about 10 years ago. The last time I was doing property change stuff, I wrote some code that made the setter bearable to write by hand: Passing the backing byref to a helper method, leveraging the caller name attributes. 
You still expect magic from the compiler. It is smart, it does some magic, but only invisible magic. On the outside, it is stupid. That§s why you often have to be very explicit in what you want from it. In the first half, you created a List of Tuples, which consist of two strings. Later you left out the Tuple part. You either have to work with strings only, or, in the latter part, pick the strings from the tuples and put them together somehow. Another advice - your current approach to problem solving is very slow and ineffective, as it is for most of the beginners. You should learn to find and read the documentation, and learn how to use the debugger. If you will keep on programming, you will encounter many kinds of errors on a daily base. Most of them are easy to solve if you know where to look. For example, googling the code of the error or the prompt it printed would point you to the official documentation, most likely [this page](https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0030).
as always stackoverflow has got your back! using (StreamReader outFile = new StreamReader(outputFile.OpenRead())) using (StreamReader expFile = new StreamReader(expectedFile.OpenRead())) { ///... } -https://stackoverflow.com/questions/1329739/nested-using-statements-in-c-sharp 
So it looks like this System.Collections.Generic.List`1[System.Tuple`2[System.String,System.String]] List&lt;Tuple&lt;string,string&gt;&gt; But I have no idea where to start
&gt; But I have no idea where to start How about the code I gave you?
So I must build an API using Ruby, PHP or JS or whatever, put it in the server side and I use my desktop application to communicate with it?
Probably whatever you're entering for `b` isn't a valid number. Are you sure you're entering a number only? Try outputting the value of `input` before the `int.Parse` call.
Thank you very much. Learned something today =)
Happy Generics Day sounds like a passive aggressive attack on Go programmers ;)
Ah that's where he got it from, thank you so much!
Found out the problem it must be Int32.Parse
I will post later whole scrip how I did it 
^^^good
That's correct. I'd write the API in C# though. 
First of all, anything that needs to be disposed (i.e anything that implements IDisposable) should be wrapped in a using statement: using (var read = new StreamReader(File.OpenRead(open.FileName)) { myData = read.ReadToEnd(); //Dispose is automatically called in a using statement so dont call it again } Secondly, you really should look at object serialization, specifically XML or JSON serialization. It is easy and greatly simplifies things. If you *must* use the tuples, then you need to author your own code to output the values of the tuple to some file in a specific format and author the ability to read those values in that format. If you want the format `key=value`, you'll have to use string.Split on the `=` to be able to parse the key and value string while using `StreamReader.ReadLine()` instead of `StreamReader.ReadToEnd()`. As an alternative, you could do this: var tuples = new List&lt;Tuple&lt;string, string&gt;&gt;(); var lines = File.ReadAllLines(@"C:\path\to\file.txt"); foreach (var line in lines) { var tokens = line.Split(new char[] { '=' }, StringSplitOptions.RemoveEmptyEntries); tuples.Add(Tuple.Create(tokens[0], tokens[1])); } Honestly, you should use a dictionary for the key value pairs though. I did this on my phone so it may not compile exactly how I have it typed but it shouls get you in the ballpark.
&gt; How do you save a file using lists and then convert it back in C# That has got to be one of the most meaningless headlines I have read on this sub :p
Typescript doesn't even come close to solving the shitty js problems.
You can do either, since it's an internal application and therefore direct database access is possible. An API would be a great idea if multiple applications will need access to the same data, but that doesn't appear to be the case here and therefore it's preference. An API will require a little duplication of some effort (you need to host the API, and there's an extra step for the clients to interact with the API, then the API to interact with the database) which slows things down a little. But the advantages can be nice: as long as you keep the API specification clean, you can update the database-API interaction without the clients ever needing to know, never mind be updated. This means the clients will need updating less often, and that you only usually have to update the API. The key here is clear, consistent planning and formatting for your API, and to build it in such a way that you normally only add to it, rather than change what is provided. For example if you change date formats, you provide both the old and new format, rather than change or remove the old format. This avoids every client having to be updated every time you update the API (of course, sometimes there are unavoidable major upgrades, but you can make them rarer) tl;dr: No you don't *need* to, but there are some advantages which may make it nice to
I hold btc, but also lol'd
This is the correct answer. Coindesk's API is particularly helpful, since it provides a variety of different currencies
It's actually the case, multiple people will be accessing the database at the same time.
Currently no, but in the past I've worked with Oracle, MySQL, and PostgreSQL. Oracle because we had an existing database to interact with, which was far too large to even consider porting to MS SQL even if the client had wanted to. PostgreSQL and MySQL have both been mostly because of cost, or where the client has been concerned about Express and potential future costs if they exceed Express's capabilities. I also use MySQL for my personal projects - in part because MS SQL hosting isn't particularly cheap or easy to come by for hobby stuff: it doesn't feel like Microsoft have any interest in MS SQL being used at a hobby/personal level.
There are enough very good answers in this thread, you should definitely read the explanations and visit the linked articles but here is how its easily made(not exactly easy to understand, but you don't seem to read the explanation anyway) File.WriteAllLines(path, myData.Select(x=&gt;$"{x.Item1}={x.Item2}")); You need System.Linq, System.IO and the file path to save it from the dialog for this solution 
I didn't mean multiple people accessing the database - I mean different applications (applications with different code bases/projects) The reason I included that was because an API can mean all your applications can use the same client library to access the API, and therefore you don't have to update every project when you make a change to the database: you just add a new field to the API data models
&gt; It actually freaks me out that it was such a close call. Yeah I think JavaScript is the perfect example of what happens when bad decisions are made. It's taken the industry 20+ years to just begin to start self correcting that nightmare.
It was enough just to change foreach (string list in myData) to foreach (var list in myData)
Visual Studio does not have syntax. Visual Studio is an Integrated Development Environment which helps us to create programs. 
My bad. What I tried to say is that I got no clue on how to use buttons , labels, etc.
Neither does Bridge.NET. And when having the choice between TypeScript and Bridge.NET, then the decision is clearly with TypeScript.
thank you. I actually thought of making dictionaries but multiple keys can be duplicate
Ok. Sounds like you are making a GUI application on either Windows Forms, WPF or UWP. If you want to support anything before Windows 10, then use WPF. Windows Forms is quite old now. You will need to be familiar with the language before moving onto GUI applications, but you should also learn XAML. You could watch this: https://channel9.msdn.com/Series/Windows-10-development-for-absolute-beginners Most things will apply to WPF also. 
I'm not a laywer, but as they are providing access to copyrighted material I'm willing to bet it's not 100% legal. This is no different from TPB, KAT, &lt;insert your favorite torrent search site here&gt;.
Deleting old post to re-post again? https://www.reddit.com/r/csharp/comments/6qgcku/popcorn_time_port_in_net_windows_native_app/
The project itself is not illegal. Using the project for its intended purpose is very much so illegal in a lot of countries.
Uh, no, it isn't. It may return *a* result `(one, dataX)` but that's only half way. If you ever want to be a decent developer you should dive deeper and at the very least read about serialization, file formats etc. What is you didn't want `(one, dataX)` but, for example, `{ "one": "dataX" }` or `one=dataX` ?)
Yes! I know, my english is rubbish. Thanks for the answer. 
I'm pretty sure Fody didn't exist 10 years ago, so I guess it wasn't that then. I've seen and used helper methods like that before, but they really only prevented having to hardcode the property names as strings - which in modern C# you could solve by using nameof() instead. They don't actually fix the need for all the manual property with backing field boilerplate. Today, you're better off using PropertyChanged.Fody. No boilerplate code, no hardcoded strings, and negligible impact on build times.
Yeah, I've just realized. I've used this code: foreach (var list in recordData) { list.Item1.Replace("(", ""); list.Item2.Replace(")", ""); write.WriteLine(list); } but it seems like the brackets aren't part of string, hence it won't replace them
You can simply use the built in TryParse function for this: string date = "12 Oct 2016"; DateTime.TryParse(date, out dt); Debug.WriteLine(dt);
&gt;being told by product team members that "generics is for academics only" Good God
If it falls to parse, it's not in the correct format ``` var date = default(DateTime); var isCorrectFormat= DateTime.TryParseExact("12 Oct 2016",CultureInfo.InvariantCulture,"dd MMM yyyy", out date); ```
Fixed foreach (var list in recordData) { write.WriteLine(list.Item1 + "=" + list.Item2); }
This gives me the time, not the format.
I have to say I was hoping to see at least one black and white photo of a horse-drawn carriage or early motor-car. Things were different back then (unties onion from belt).
This would require that I try every conceivable format until I find one that matches. 
You can't possibly tell the difference between dd/MM/yyyy and MM/dd/yyyy anyway. Works fine for the format above, but you can never determine if 5/10/2017 is 5th of October 2017 or 10th of May 2017.
I figured the only reason you would need to determine the format is to actually get the value from the string. Nevermind then.
Are we talking MVC with razor, WPF, Xamarin, ... ?
&gt; Yeah, I've just realized. I've used this code: &gt; foreach (var list in recordData) &gt; { &gt; list.Item1.Replace("(", ""); &gt; list.Item2.Replace(")", ""); &gt; write.WriteLine(list); &gt; } &gt; but it seems like the brackets aren't part of string, hence it won't replace them Ofcourse the brackets aren't part of the Item1/Item2 properties; you didn't put brackets in, why would they be there? What's happening is that a `Tuple`, when converted to a string, is turned into `(Item1, Item2)` because a `Tuple`'s `ToString()` method is overloaded and coded that way. So, **if** you'd were to replace the brackets, you'd have to do it like `write.WriteLine(list.ToString().Replace("(", "").Replace(")", "");`. But that is a horrendous solution. &gt; Fixed &gt; foreach (var list in recordData) &gt; { &gt; write.WriteLine(list.Item1 + "=" + list.Item2); &gt; } Unless you're using C# 6 or older that's [exactly what I replied](https://www.reddit.com/r/csharp/comments/77dwx8/how_do_you_save_a_file_using_lists_and_then/dol4u0s/) but expressed a little different. `write.WriteLine(list.Item1 + "=" + list.Item2);` is equivalent with: `write.WriteLine($"{list.Item1}={list.Item2}");` 
&gt; seperate page for the different user roles. It's WPF. Sorry for not giving enough details.
There is no practical way around knowing the format beforehand.
In the serialization settings try settings.TypeNameAssemblyFormat = System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple
or TypeNameHandling.Auto
Well, the answer is never that simple. As always, it depends. If you're coming at this from a JavaScript developer perspective, then TypeScript is a powerful leap forward. From a C# developer perspective, TypeScript is a huge step back. Avoiding some of the _shitty js problems_ can start by not writing js|ts in the first place. Write in a higher order language and let the compiler figure out the runtime implementation.
Yes, as /u/BelgianWaffleGuy and /u/AngularBeginner noted, there is a lot of ambiguity between numbers. How would you tell the difference between "yyyy" and "ffff" when classifying 2017? You could argue that it should be context aware, but that requires a sophisticated parser. You can do this with a parsing library that supports ambiguity, but you will have to use some heuristics to determine which parse tree is the correct one because it will generate many ambiguous parses. 
Can't help you there, sorry.
&gt; From a C# developer perspective, TypeScript is a huge step back. I'm a huge fan of C#, but frankly: The TypeScript language is further ahead than C#. It already got discriminated unions and it got proper null-checking. The latter C# maybe gets with C# 8.0 (whenever that comes out).
If you're still trying to fix this, or anyone else is searching for this, you have to copy the dlls its looking for from &gt; &lt;unity install path&gt;\Editor\Data\MonoBleedingEdge\lib\mono\unity_aot\Facades somewhere into your assets. I was also getting additional missing dll errors when it was making a build. I also just copied those as well, and it's working now. I got this information from [here](https://bertt.wordpress.com/2017/02/08/using-net-standard-libraries-in-unity3d/)
What type of application template did you start with to create the project? Is this a WebAPI? MVC? Or just a web application? 
You should create custom wpf controls and hide and show those controls. DON't hide and show individual items. Avoid as much as possible one off parts. If most tasks parts are the same then make that a parent controls. If only parts are different then make them custom control children. You should have this custom control decide what to show and hide based on the user's rights. 
Does it have to be client - server. Why can't it be a web application? You can then avoid the API all together.
Product teams are great! Always with insight and firm understanding on subject matter. /s
I started using this method as soon as I swapped from .net core 1.1 to 2.0
I would two-pronged approach this first by clearly designing your viewmodels and then making separate windows for every user case. Elements that get reused broadly can get their own user controls. But in general just translate their credential into `MySpecificWindow.Show()`
I like to use UserControls and dynamically load whatever is needed at the time. You can create a DataTemplate to tie a viewmodel t a user control, then in the page's code behind loading the viewmodel loads the page. For a very quick illustration to get you started it can work something like this. In your XAML Window: &lt;Window.Resources&gt; &lt;ResourceDictionary&gt; &lt;DataTemplate DataType="{x:Type vm:EmptyViewModel}"&gt; &lt;uc:EmptyQueue /&gt; &lt;/DataTemplate&gt; &lt;DataTemplate DataType="{x:Type vm:SelectionViewModel}"&gt; &lt;uc:SelectionPage /&gt; &lt;/DataTemplate&gt; &lt;/ResourceDictionary&gt; &lt;/Window.Resources&gt; &lt;Grid&gt; &lt;ContentControl Grid.Row="1" Content="{Binding CurrentPageViewModel}" /&gt; &lt;/Grid&gt; In your Window's ViewModel: private IPageViewModel currentPageViewModel; public IPageViewModel CurrentPageViewModel { get { return currentPageViewModel; } set { SetValue(ref currentPageViewModel, value); } } private void ChangeViewModel(IPageViewModel vm) { CurrentPageViewModel = vm; }
that why you can pass a culture parameters to the tryparse method. invariant culture should wait for the "international" format ? 
No: https://arstechnica.com/tech-policy/2017/10/mpaa-netflix-amazon-join-up-to-sue-tickbox-tv-for-piracy/ "Copyright holders have successfully argued that even content-neutral services, like Grokster and search engines like TorrentSpy, were "inducing" copyright infringement based on things like their marketing materials. Link sites and cyberlockers have also tried versions of the same defense, basically arguing that they're just searching out whatever's out there online hosted by someone else. It hasn't worked."
You should be able to port the code to C#. Try using [`String.Substring(int startIndex, int length)`](https://msdn.microsoft.com/en-us/library/aka44szs%28v=vs.110%29.aspx) to pull out the numbers/characters (that's this portion: `SUBSTRING(@iMag, 4, 3)`). Then you can use [`Int32.Parse`](https://msdn.microsoft.com/en-us/library/b3h1hf19%28v=vs.110%29.aspx) to convert that substring to an `int`. This covers the portion: `CONVERT(int, SUBSTRING(@iMag, 4, 3))` Then to convert it to hex, call `.ToString("X2")` on the integer. "X2" specifies to output as a two digit hex, which is important if you want values like `09` and not just `9`. Remove the "2" here if you didn't want leading zeroes (but I assume you do). Do that for each portion and stick the hex codes together and hopefully that's the same result.
[Such projects are illegal, at least in the US.](https://arstechnica.com/tech-policy/2017/10/mpaa-netflix-amazon-join-up-to-sue-tickbox-tv-for-piracy/)
Removed: Rule 7.
What do you mean by "when I pull the JSON back in"? I'm not sure the JsonSerializerSettings instance is necessary; I never use it, but you are serializing and deserializing a class which seems to contain a list. You should be able to see the deserialized object as it was before serializing. If this isn't working, then perhaps it's an issue with code that you haven't shown, or with the settings you're passing. Personally I would get rid of those settings. 
My apologies, but other than creating ultra-basic forms in the past, it has taken about a week to even get partially functioning code for this project (very new to this.) I hate nothing more than asking for someone to complete my homework for me, however I'm unsure where exactly to implement the code you've provided. I'm sure I could eventually figure it out, though. And when you say "each portion," what do you mean?
&gt; What do you mean by "when I pull the JSON back in"? When the program starts, one of its tasks is to read the JSON file and import the data structure in there. When changes are made, it commits those updates to the JSON; periodically (because a separate program is using my JSON as well, and writing to it), I have to read that file into memory again. &gt; I never use it, but you are serializing and deserializing a class which seems to contain a list. And if it was just a list of strings, It would work fine; in fact the real world class which contains my problem list also contains a separate List&lt;string&gt;, and that parses in just fine. The issue comes when I try to parse a list that's typed as an interface. &gt; You should be able to see the deserialized object as it was before serializing. If this isn't working, then perhaps it's an issue with code that you haven't shown, or with the settings you're passing. The object, when serialized, comes out as wonderful, pretty JSON. I can human-read it, see my values, all that fun stuff. If you asked me to, I could definitely tell you any particular value in that JSON object without problem. When I read it back in, the List&lt;IAppServer&gt; list is null. This is my fundamental issue. The last two code snippets are in very different parts of the code, unfortunately, and a full code dump would be against my terms of employment. As part of the program requirements, I have to be able to save the object state contents out to a file as a JSON; I have to also be able to do work on that JSON, which means deserializing it back into memory, usually at startup. So I need to be able to recover that structure 1:1 when reading from the file.
Dude probably wants specific help with specific problems. If he wasn't paying we'd send him generic help but sounds like he's stuck on a project for work or college and is reaching out. #speculation.
But That is best quality i can get. 
I've I'm reading the example code correctly, this bit: sys.fn_varbintohexSUBSTRING(0, CONVERT(int, SUBSTRING(@iMag, 4, 3)) Is converting 3 of the numbers to hex. So the same in C# might be: string input = this.textBox1.Text; string part1Text = input.Substring(4, 3); int part1Number = Int32.Parse(part1Text); string part1Hex = part1Number.ToString("X2"); Then you repeat this for each section, choosing a different starting index and length for the `Substring` call. Then you sandwich them all back together: string fullHexConversion = part1Hex + part2Hex + part3Hex + part4Hex + part5Hex;
From the [detailed rules](https://www.reddit.com/r/csharp/about/rules): &gt; content should be relatively current (that is, not terribly obsolete or outdated), and there should be sufficient content to be worthwhile to readers. From what I can gather, it's a very basic tutorial/walkthrough of making a very basic UI in a very outdated WinForms. Furthermore, it's almost devoid of any C# code whatsoever, just you bouncing around the form designer for 6 minutes. Also, you linked to the 4 minute mark of the video, not the start of the video. Finally, this is the first and only submission made from a new account. Reddit is not a platform for you to exclusively promote your own content. Please familiarize yourself with the [Guidelines for self-promotion on reddit](https://www.reddit.com/wiki/selfpromotion). So I'm sorry if you feel this is the best quality you can get, but as is, _especially_ with your lack of positive involvement on Reddit, is not sufficient for submission on /r/csharp.
SPA's can also get just as messy except now you don't have strong typing to help unravel the mess. You can follow or ignore separation of concerns in any framework.
Is serializing and deserializing done in the same assembly? I copied your code snippets exactly and it works for me. The only thing I can think of is where you deserialize, it can't map back to the "$type" property created from the JsonSettings
We just launched Widgetoko. A Node.js and Electron app written entirely in C#. https://blog.bridge.net/widgetoko-a-node-js-and-electron-application-written-in-c-1a2be480e4f9
I kinda like resharper but I've noticed a significant performance impact in 2017... I've only been using resharper for a few months now. Mainly in VS 2015, where even then I dont like the perceived performance impact of a lot of little things.
This. For a while I found myself frequently causing some refactoring thing to crash because of the speed I was typing.
And you can define defaults when writing generics, something I've been asking for since generics were announced in C# :(
It should even work fine for a list of complex objects if you don't use the settings. The guy below says the code you've shown works. So maybe try his suggestion, otherwise it's probably somewhere else in your code.
There was once a time where VS and Resharper went hand in hand, but those days have past. The performance impact is too big, especially with large projects. I've stopped using Resharper about 4 months ago now, and while I occasionally miss a thing or two, at least I'm no longer yelling at VS on an hourly basis for freezing. Also.. anyone else looking to switch, I highly suggest Roslynator (https://github.com/JosefPihrt/Roslynator). It has a lot of the missing Resharper features and its fast. Extension link: https://marketplace.visualstudio.com/items?itemName=josefpihrt.Roslynator2017
Try CodeRush. It uses Roslyn so you aren't running two compilers in the background.
I've noticed the same. I think there may be issues with their code base trying to accomodate for rider and VS at the same time. VS updating so often probably doesn't help. I'm sure MS is also aware of the competition from rider now as well..
It was Web Application (Model-View-Controller) with individual user account, by the way, you can find the source code at this address: https://github.com/HamidMosalla/OAuth2-OpenIDConnect-JWT-Samples/tree/master/AspNetCoreJWT
If you use a content control you can associate views to view models in its resources. Then you can bind it to an observable collection of an interface and implement that interface with the corresp being view models. Then when the user logs in you only instantiate the relevant view models and add them to the collection. 
Generic idea about this, not C# specific: You may want to filter out the content well before the client UI code. This is for security and if you aren't sending the data from the server/backend, there's no much a person can do to see things he's not allowed to see.
I've had to uninstall it for that reason. My work pc is already mediocre, resharper makes it unusable. I still keep the subscription for datagrip and resharper for smaller projects at home. 
The layers could be: Application | Service | Database Advantage of this is that you can add features in client without directly affecting your storage, and you make some planned changes ot the data model and not have major headaches in the entire stack. Along with that, if you want to change logic (which may reside in the service layer or it's own layer -- think of a VS solution with 4 projects, 1 for each layer), you can deploy just one of these if it is independent. Deployments and change management will be pain once the project becomes large.
On mobile so I can't double check, but deserializing an interface is almost impossible in c# due to how interfaces are built. Interfaces can't be instantiated (i.e. They have no constructor). Your Json serialize most likely works because under the hood they aren't serializing the interface, they are serializing the concrete type that happens to implement that interface. Coming the other way, the deserializer is likely quitting because it can't handle an interface. One thing you could try (on mobile, so it's a wild guess) is to deserialize your file as a list&lt;object&gt;. If that's not null and you are certain all of them are your interface, cast it to a list of your interface. It's a bit of a hack, but should get around the interface constructor problem.
What is your hardware? Resharper is pretty heavy-weight thing, but with 16GB of RAM and all source code on SSD I had no any noticeable issues with it neither with VS2015 nor with VS2017. And my project's size is pretty big too. Tried to use VS without Resharper, but it did not worth it for me. I've got used to it too much, I feel clumsy without it. Have not tried Roslynator yet, sounds like it worth a shot.
Yeah other than the freezing on opening the solution it seems fine 
You can have as much RAM as you want, Visual Studio's 32-bit process will run out of memory after about half a day for me, all due to resharper.
Not including the interface definition and alternative implementations, 1. There's multiple layers, but they're not identical.
This is a string declaration string[] submissions; However, you're not actually initializing the array. This is what an array declaration and initialization looks like: string[] submissions = new string[5]; would create an array of 5 strings. If you don't know how many strings you'll have, you should look into using a `List&lt;string&gt;` instead.
So you literally do everything in just the controller? No models, no repositories, no database schema?
I don't understand what you're saying. How can you have multiple layers, but only need to touch one file?
Hey, I found your question very interesting, as I'm in a very similar position right now. I just started school, in which we focus mainly on C# and using VS ... aaaaaand I'm also on a MBAir (current i5 8GB version). I'm running Win10 via Bootcamp at the moment ... mainly because my teacher recommended that I do so. By now I found out, that you can quite nicely program console applications in VS4M ... but please don't ask me in detail, as I said, I'm still a beginner. 
That’s really cool! I will first try to use VS4M and if I encounter any issue then I’ll VM Windows. 
Only one layer is the storage layer. Granted, a higher layer will eventually call into the storage layer, but I wouldn't consider that part of the CRUD operation. Personally, the services I work on tend to be microservices and generally use some sort of NoSQL store, so I don't have any ORM stuff.
It's a string array declaration. ;)
Jetbrains refuses to perform two steps that would heavily improve performance: - Move ReSharper out of the Visual Studio main process. This would stop ReSharper from freezing Visual Studio on heavy computations. - Utilize Roslyn, instead of their own engine. Currently on every key stroke your source is analyzed twice: Once by Roslyn (the compiler platform) and once by ReSharper. If they'd utilize Roslyn instead it would only be once. They certainly have their more or less valid arguments against it. And I'm sure none of those reasons is the promotion of Rider. ^/s
It's weird, I just tabbed back into this tab and saw that, despite posting it like an hour ago. Oh well, fixed now.
Yep. Last I checked, the issue was that JetBrains is refusing to use Roslyn, and are instead using their own C# analyzer. This means you have the two analyzers running side-by-side and are effectively doubling VS' memory usage when ReSharper is on.
That's probably true, but the projects I've worked on, I always had cleaner and more concise views when using a front-end framework. There wasn't flying logic code in the view and it was a lot better to read. Note that i'm not saying that when you use MVC you will necessarily have some flying logic in the views, but in my experience that's exactly what happens in most cases.
Not so much "refuse" as "we'd need to rewrite our entire codebase and maybe drop some features" if I recall correctly. But yeah, it'd be nice if they could use Roslyn. 
Which is all a damn shame given that Roslyn is [open source](https://github.com/dotnet/roslyn/blob/master/License.txt)v
&gt; we'd need to rewrite our entire codebase I have no sympathy. ヽ(´ー｀)┌
what i read line 31 : private void GenerateSubmission(string submission) so i guess the error does not occurs there cauz a null or empty string can be pass as parameters. we need your error stack trace, and the methods mention in this trace
At work, I have a 3.7GHz quadcore with 32GB RAM and (for some reason) a Geforce GTX 1060 with 6GB. Admittedly we have a shitload of code and the codebase closely resembles one of those horrible amalgamations of a million suffering souls, but VS itself is crashing multiple times a day and with Resharper, you can count on that "day" becoming "hour".
I'm talking about the whole workflow of the CRUD operation from the REST API down to the database. So if your one layer handles exposing the API endpoint, authenticating the user, validating the data, and performing the save, cool. It'd really like to see it. But no fair skipping steps. 
Although you can make learning a bit more fun by actually working on a project instead of doing tutorial after tutorial. Once you have the basics down, just stop using tutorials and start creating your own ideas.
? this feature is native in visual studio..
All sql queries are wrapped in an individual class. Each class takes a command context as an executeion parameter. The comand context provides raw access to the database. So creating a query that gets all x is basically creating one class GetAllX and executing it
never write code concerning logic in a ui class, instead business logic should initialize on first call from the ui. usualy ui and logic are in two separate projects. 
1: Controller 2,3: Business Layer + Interface 4,5: Data Layer + Interface 6: DTO to move between layers (if something doesn't already exist) That's about it. If the CRUD operation requires a new DB table then I'll have to regenerate the context, but that's pretty well automated. So 5 at a minimum, possibly 6, more if you include EF regeneration and unit tests
*never write code concerning logic in a ui class* Thats clear. But after the Windows gets created, I have to load the logic and data, so I have to call my code from somewhere. I suppose this "somewhere" is in the WPF window class and takes the form of a simple procedure call, like my InitializeBusinessLogic(); above. The question is, where is the right place to do that? F. 
bind your window properties to your business logic class with a static singleton, add your initializeBusiness method to the constructor of your business class. 
bind your window properties to your business logic class with a static singleton, add your initializeBusiness method to the constructor of your business class. 
Yeah, no. I can't tell if you're being a dick on purpose or not but /u/Fullduplex1000 please don't follow this god awful advice. What you need to do is use something called dependency injection. It's a pretty simple concept despite the lengthy articles on it. You then "inject" your business logic into your Window class in this case. https://msdn.microsoft.com/en-gb/magazine/jj991965.aspx This should be a good starting point. DI lets you achieve maintainable, clean, and testable code. A singleton does none of that.
He is building his first wpf apps, ioc might be a step further his current skills. 
MonoDevelop / Xamarin Studio has been killed off before the developers could add C#7 support. You have to use another IDE for C#7 (Rider for example).
Is your app signed? If not, it may throw the error "There was a problem while parsing the package".
So MVVM (Model-View-ViewModel) is normally the architecture used with WPF but it can be a bit of a learning curve. What I did for my first WPF-MVVM project was not worry about the MVVM portion. I just got my project going with my logic in the back-end. Once I had a program that worked I created my first view model. So I'm mostly self-taught but I normally have a view model for each Window in my program. So if I have a Window called MainWindow I have a view model called MainWindowViewModel. There are a number of ways to bind your window to your view model but normally it's something like DataContext = MainWindowViewModel in your contructor. Once you setup you can start transferring your logic to your view model. Instead of setting properties using code (Textbox1.Text = value) you can data bind stuff. Instead of click events you use Commands. Basically your code behind for a window will be close to empty once you're done. The most important lesson I learned about MVVM is that not everything needs to be in the view model. If you have a button that closes your form it's much easier to do in the code-behind than creating a command that sends a message to your window to close itself. Hope this helps.
Try the sendkeys method https://stackoverflow.com/questions/15013582/send-multimedia-commands
Probably 3-5 at minimum, not counting DB definitions (table/sproc creation), but I mainly work on the back end of things. If it were something being plumbed through one of our web sites, it's probably more like six. Typically: * data layer + probable interface type * business layer + possible interface type * app layer OR controller + view If we include DML, probably need to include 4 more for the table and obligatory sprocs for insertion, deletion and updating. It sounds like your client is going to be doing a lot of horizontal scaling. Whether or not they want to.
At one of my jobs now it's kind of insane. I've got.. 1. Controller 1. IBusinessObjectFactory for that specific table 1. IBusinessObject for that specific table 1. BusinessObject(implementation) for that specific table 1. IDataAccessLayer for that specific table 1. DataAccessLayer(implementation) for that specific table 1. DTO to go between biz object and DAL. I have trouble keeping track of everything with this architecture.. I don't know how you do 15 classes.
4: - Controller - Repository - EF Model - DB Upgrade script
Is the experience for the consumer of the api the same with each of the different approaches? I've only used swagger/rest on one large project, it took bits of code in all sorts of different files and was somewhat tricky for consumers to use. Pretty much bog standard files for me, no interfaces for ViewModels, DTOs, or Entity models * ViewModel (sometimes) * Mapper (if view model) * Controller * Entity model * Generated Migration file * EF DataContext * IRepo * Repo 
Yeah, and now it's also supported in R#'s refactoring engine, which is separate from Visual Studio's.
No.
http://www.c-sharpcorner.com/uploadfile/37db1d/understanding-wpf-application-lifecycle/
The `InitializeComponent()`method is in the Window constructor. The broader scope is the `App` class, you can have a constructor there too, prior to showing any Window. I like this using the `App` constructor to initialize the business model and hold a reference there. This would be in `App.xaml.cs`. 
[removed]
Does visual studio code or visual studio 2017 not have support? Visual studio for the Mac for like Xamarin studio with updates. 
I agree with the MVVM part. However, the binding should be done in XAML. You should have at minimum one viewmodel for each window. You can have more than one viewmodel pr window
But a singleton was ok?
IOC is best pratice, logic in ui is awfull, Singleton is quite ok but produce issue on the test side.
And if you setup your singleton as an access point to classes that implement your business logic, and then expose them through an interface, then you get the ability to swap out implementations and get some testability back. This means that some code has to initialize the classes in your singleton, which you can do in your main window startup code. While that technically mixes business logic and UI I feel like it's a good compromise that gets you many of the benefits of IOC/DI without the overhead of learning a framework. I mean, what is an IOC/DI framework if not the mother of all singletons anyways. 
I lo lilith my lol*but **you
I think advice like this is a bit over-board. There's nothing wrong with having everything in the Window class. Regardless of your preferred programming practice, if you put everything in the Window class, there is nothing that will cause the program to malfunction. The only time I agree with this is if you are developing cross-platform and want to share code.
I'm thinking that I need a checklist. There's no way I can remember all 15 steps on my own.
So many possible answers, https://www.infoq.com/articles/View-Model-Definition
If you aren't working on a team with a production application, most of your testing is going to be from manually running the application. Full automated testing is expensive.
I got it down to zero for most cases in this [thing I built](https://www.reddit.com/r/dotnet/comments/62f76r/ive_created_a_new_platform_for_building/). However, if you want custom business logic that is one file change. If you want custom presentation logic that's a second file.
Why tho? 
Yes, you certainly can use Visual Studio. VS for Mac should support C# 7 with .NET Core and Mono.
What is the use case of readonly ref? 
I've done it that way as well. Haven't done MVVM in awhile but I think you also have to add the namespace in the window tag to do that if I'm not mistaken. I have a vague memory of taking a lot of time to setup the binding because I didn't have that namespace.
Hey I also was in this boat. I am writing a WPF app that does the same. I would suggest learning MVVM as it will let you seperate your business logic from your front end. I created 3 projects, Business Layer, Data Access Layer, and UI layer. Data Access has all my calls to my database. the business layer calls the DAL but only references interfaces from the DAL so you can swap things out if you need to. the UI Layer also calls things from the BL but again code to an interface. I learned a lot about MVVM from this pluralsight tutorial: https://app.pluralsight.com/library/courses/wpf-mvvm-in-depth/table-of-contents I'd register and setup a free trial and watch it.
This has been fixed and a new release has been made. https://github.com/tonerdo/pose/pull/8
This answer is the best considering OPs situation and probable skill level. Understanding the App class is a good first step. I often run a custom bootstrapper class from there, or Just initialize stuff there directly if it's a simple shortlived test app.
Yeah but once you get over that initial hump, its so quick to add new views and vms haha
You don't want the reference to change but properties on the reference are allowed to be modified? Speed?
I'm not watching a 6 minute video to learn 'If you're dynamically generating a string of unknown length, use string builder. If you can do it with a single format string use string.format.'
Removed: Rule 7.
Their [main website](https://www.peachpie.io/) has a list of benefits and use cases. In short, it allows you to have only one platform on which you can deploy all your software. This is especially good if you consider that the PHP platform might not be the best, but on the other hand it has a lot of good libraries for the web. Also if you have legacy PHP software it make easier to deal with it.
I should have said webhost instead of provider. I have my side projects using MySQL DBs on my domain because I don't want to pay my webhost to host a MS SQL server. MySQL is free there
MainWindow will have a View Model (if you follow MVVM). Initialize in that.
Passing a large struct without allowing it to be reassigned.
If your service is simply a REST endpoint for a database, sure, but a lot of services provide a distinctly different API than their storage layer. Let's take a simple logging service with a rolling log, for example. The public API might simply be POST /api/logging/log/append and GET /api/logging/log?start={start}&amp;end={end} But the CRUD layer might be significantly more complex and include CRUD operations for uploads, individual log messages, aggregations, managing TTL, etc. Using Azure Table Storage, for example, there might only be a single implementation file for the storage layer.
Yes to your final question, that’s an easy place to put it and if you keep it to one line of code then it’s easy to move if you change how the application starts up later. 
Have a look at this: https://msdn.microsoft.com/en-gb/library/windows/desktop/dd564585(v=vs.85).aspx It uses Windows Media Player behind the scenes, so if that’s a problem then it’ll be no good. But it works really well and can do play, pause etc. I used it as the music playing component in a karaoke system that I wrote and it was really reliable and easy to code against. 
For the purpose of this conversation were considering the CRUD operation across all levels. What you're calling the "CRUD layer" is usually referred to as the "data access layer" (which may or may not be a repository).
CRUD, Create Read Update Delete. If your not adding those operations then how are you adding CRUD operations? If your definition is that data transfer is CRUD then almost all code is CRUD.
:D Here's the real answer.
If you use ref then only a pointer goes on the stack. Without ref, an entire value type would need to be copied, which could be huge. There’s also stuff like, if you use ref to pass cells from an array one after the other then the addresses will be contiguous and COU cache will come into play. 
How I handed it in a recent WPF project, where different roles had different menu items leading to specific workspaces (Views &amp; ViewModels). 1) Defined the roles as a flags enum. 2) Each workspace ViewModel had a Role property to define which roles it was available for. 3) The main ViewModel for the app filtered the available workspaces based on whether the Role property was relevant for the user (simple linq where against the role). 4) The menu was bound to the filtered workspace list. Mine was fairly easy to separate like that as each role was doing something completely different so warranted their own set of views. If yours is more of a mix (e.g. all have an edit view but with different optional controls) then you'd maybe want to look at nested views but the basic idea would be similar. 
Isn't that already true when you don't specify ref or readonly?
MonoDevelop was not killed off, what? Xamarin Studio was incorporated into Visual Studio but Mono has nothing to do with Microsoft, it's not their choice.
Yes, but in a different way. Think about if you had a large value type that you didn't want to copy each call...so you pass it by ref. Now the called method can do whatever it wants with the value type. Readonly let's you specify to another developer that your value type should never be exchanged for a different one.
Since you're already doing bindings, you should probably look at the button's *Command* property, and implementing something similar to *DelegateCommand* from the [Prism Library](https://github.com/PrismLibrary/Prism) in your *viewModel*. In this way, you can simply implement a LoginCommand as such: public WindowViewModel() { LoginCommand = new DelegateCommand(Login, CanLogin); } public DelegateCommand LoginCommand { get; } void Login() { /*do login logic here*/ } bool CanLogin() { return (_selectedFunctionId &gt; 0 &amp;&amp; _selectedWindowId &gt; 0); } Then in your properties, you can simply call: LoginCommand.RaiseCanExecuteChanged(); This allows you to get rid of the IsEnabled binding, since the CanExecute method will take care of enabling/disabling the button. 
The latest Visual Studio 2017 does support C#7. Apparently you have to install some NuGet packages for it to work though.
It says on the official MonoDevelop website that building MonoDevelop requires Visual Studio 2017. And as far as pre-built versions go it directly links to an outdated version of Xamarin Studio which doesn't have C#7 support.
The article was pretty rubbish in not explaining this particular point.
You might have more luck in /r/vscode/
“private protected” is a really bad name, IMO. Consider that “protected internal” means “accessible when it would be if protected or internal”. The new “private protected” means “accessible when it would be as protected and internal”. Nothing to do with private. The CLR names are actually “family or assembly” (for protected internal) and “family and assembly” (for the new private protected). Also, note that this protection level has been in the CLR all along, which is why it can be introduced with C# 7.2 without a runtime change. 
Ty adding &lt;LangVersion&gt;7.1&lt;/LangVersion&gt; worked, just sux stupit nuget is so outdated in Monodevelop build i cant fatch TupleValue but will do that whit CLI nuget from netcore... I am kinda limited on IDE cuz i am on Linux, can use Monodevelop , VScode(fucked up whit mono for me) , Raider costs big $.... 
The example in this article doesn't help. I still don't know how it is different from protected internal.
Holy crap. I've been using C# for nearly 15 years, and I always thought that "protected internal" meant exactly what "private protected" will mean. Which means that both "private protected" and "protected internal" are terrible names. TIL
I would say separate from the model, view, and view model. Model should be where you create your objects and properties. View is obviously your UI. View Model is where you would populate your items that you want to show. Any calculations required should be kept in separate files and called before you populate the view model. That's just my opinion. If it's possible you might want to perform your business logic through some kind of service. 
Don't put business logic in a UI class, ui/view logic is fine.
Get the list object from the property: https://docs.microsoft.com/en-us/dotnet/api/system.reflection.propertyinfo.getvalue Get the item type from the list: https://docs.microsoft.com/en-us/dotnet/api/system.type.getgenericarguments If you're sure that the collections are always a `List&lt;T&gt;`, you could take advantage of the fact that it also implements the non-generic `IList` interface. Otherwise you can't assign the different list types to a strongly typed variable and need to use reflection or `dynamic` to access properties like `Count`.
I wonder if the author has ever done any programming in, say, C++. If they've never really had to think about the tradeoffs of pass by reference or pass by value because the choice is almost always made for them, it maybe isn't a very intuitive thing. Maybe the author didn't mention this because it simply didn't occur to them.
Definitely would have been better to introduce distinct keywords for these.
you should debug it and find out. 
&gt; “protected internal” means “accessible when it would be if protected or internal” I think this in itself is a problem, since "protected" has the semantics of *restricting* access rather than granting it. Now that C# has caught up with the CLR and has six access types, I wish it had stuck with Java's approach and assigned unique meaning to the *absence* of access modifiers. Something like: - The default (for both members and classes) is `Assembly` access - **protected** removes `!Family` access - **private** removes `Assembly` access - **family** adds `Family` access - **public** adds `!Assembly` access Which would remap the current access levels like: - **private** to **private** - **private protected** to **protected** - **internal** to nothing - **protected** to **protected family** - **protected internal** to **family** - **public** to **public**
It says "this is too large to pass to me by value, but I promise not to fark with it" 
It's not saying there are 16 even numbers, it's saying that the number 16 is even, then waiting for your key press. Your have written nothing to actually count the even numbers.
 static void Main() { int count = 0; for (int i = 15; i &lt;= 75; i++) { if (IsEven(i)) count++; } Console.WriteLine("Even numbers between 15 and 75 = " + count); } public static bool IsEven(int value) { return value % 2 == 0; }
An interesting idea. Can we do something crazy like running Wordpress from .NET?
Have updated the question with my progress
Dude, don't do someone's homework for them.
This problem is so simple that adding the additional two lines of code is better than explaining it to them.
I think this tutorial is very good: https://www.tutorialspoint.com/csharp/
So you'd rather do their homework for them rather than helping them learn how to figure out what they're doing wrong? That makes sense. Wish I had you as a professor.
The form's "action" property should be set to "/Person/AddPerson". This will cause the form to POST to PersonController/AddPerson method. In terms of the URL, PersonController and Person are identical - you do not have to write "Controller" at the end, but the .cs file is an invalid URL. In your project you will probably have a folder called App_Start, and in there you should have RouteConfig.cs. If you look in that file, you will see the default routing for the application. You will see that a URL will optionally contain a controller, action, and id parameter with forward slashes between. So you POST to controller/action, which is Person/AddPerson. If you set a breakpoint in the action method, you should see that it posts correctly after making this change.
The process he would go through to understand why those lines of code need to be there is more important than showing him the answer, imo.
You, Sir or Ma'am, are a saint. That worked perfectly, I am pretty certain that I tried about every possible permutation of URLs in that action. Thank you so much!
Come on man; if he was able to write his initial code, surely he can see the added two lines and go "Ahhhh, I see."
Or he can be taught how to properly debug his code, which is an invaluable skill in this line of work.
This, 100%.
Recursion is expensive, all you need is some math :P static int OddCount(int start,int end) { return (end - start) / 2; } static int EvenCount(int start,int end) { return (end - start + 1) / 2; }
Very interesting. I hope I have time to look into that further.
He’s not using recursion tho xD
I'd also recommend using helper methods to generate the URL to your controller. Much safer and better practice, from what I understand.
 var evenCounter = 0; for (int i = 15; i &lt;= 75; i++) { if (IsEven(i)) evenCounter ++; } Console.WriteLine("Even numbers between 15 and 75 = " + evenCounter); Console.Read(); I stumble upon this every now and then. People can trap themselves in overthinking. If you want to count something, consider using a counter variable. It's not always the best solution, but surely a "pattern" worth knowing.
Thanks. Missed that. I fixed it. I hope.
If you have a question, why not as it here instead of offhandedly posting the link to you rSO question?
I've been doing WPF since the beginning and I still don't know. I use CSLA.NET on a few huge applications, and that forces your business logic into a very certain way. Keeps it organized well. For more regular projects, I've got a folder called "models" and a folder called "views" and, you guessed it, a folder called "view models". Don't do that, that's an unmitigated disaster. I just like shooting myself in the foot, I guess.
Its important to note that this is not the case anymore. You are no longer able to get a free trial when you sign up for a the free visual studio dev account. I just created an account yesterday and the option was not there under the benefits. I just ended up paying for the $30 so I can try it for a month.
One of the things that has resulted from the relatively recent entrance of game development into the realm of things a sane person would do with C# is a new pattern for passing data around. Specifically passing around large structs. C# structs are passed by value, which is really problematic as the size of structs grow both in terms of memory usage, but also in terms of performance. GC of particularly large objects is horrendously inefficient. Readonly ref allows a developer to offer users of their code a compile time enforced promise that their struct won't be screwed with inside the method. 
What type is returned from `GetDataFromRepo()`? Is there a reason why you can't cast it to ClassA?
Do you want to do this at runtime in a program, or as a development aid? If it's at runtime, I don't think it's possible. If it's just as a useful tool while developing, then you might check out this tool I wrote: https://fuqua.io/format-finder/
Your even number count doesn't work with arguments 2,4 which should be 2,but is 1. I think you must take the starting number into account, if it's even or odd 
Yeah. It's not the most solid method. If either the ending number or positive number is even, a one should be added to the difference instead of a 1 always being added. Plus with negative integers or values in the wrong order, it will fall apart. However, that's not to say it isn't most efficient to compute this arithmetically, just that this isn't the best implementation for any other scenario other than 15 and 75.
You could got farther and remove the IsEven check and iterate by 2 each time instead of 1 and always add the value if the starting value is even, otherwise start with the starting value plus 1.
[Yes](https://www.peachpie.io/2017/02/wordpress-announcement.html). They still have some trouble running larger things like MediaWiki, but the platform is already usable.
&gt; I wonder if the author has ever done any programming in, say, C++. Yeah, this is basically C++ const reference. Kinda surprised it took this long to get it, honestly.
As I see it, the main benefit is to be able to pass any struct without causing an allocation. Previously, you had to choose your type as follows: - Class: reference type; allocated once, but you have to manually copy to get immutability. This is non-trivial for complex structures. - Struct: value type; re-allocated/copied when assigned (e.g at method boundaries). That's the upside _and_ the downside. You don't have to manually copy, but you also couldn't avoid copying where it wasn't needed (unless the compiler did it for you; see below). With `readonly ref`, you can now cull allocations where you know they're not needed (e.g. in method calls that didn't modify the incoming struct parameter). This will be a great tool for optimizing hot paths while keeping code "clean". If you have a performance bottleneck, you no longer have to decide whether it's "worth" it to split your logic into smaller methods because you no longer have to incur the performance hit of re-allocating the struct. Tools like Roslyn and ReSharper will -- probably sooner rather than later -- start suggesting to use this feature in methods where an incoming struct parameter is not modified. I imagine that the compiler has been doing this automatically as much as it can. The explicit language feature now lets you help the compiler (e.g. for situations where the compiler might not be able to _prove_ to itself that there were no assignments). As with non-nullable references (I use the [NotNull] annotations from R#), using this feature will probably help programmers find inadvertent struct allocations (i.e. help them create "islands" of immutable structs where no allocations are incurred) much as non-nullability helps create "islands" where null-checks are not needed.
&gt; As I see it, the main benefit is to be able to pass any struct without causing an allocation. C# already has ref parameters. The ability to specify that it is a *readonly* ref prevents the called method from changing the value, limiting the possibility of side effects.
Yeah. Clunkiness aside, the CLR names are at least more clear. Maybe “protected-or-internal” and “protected-and-internal” would be better. Maybe. 
Can you briefly tell us what kind of topics the pluralsight courses touch and how useful it is to the juniot / middle developer ? Imagine that the person taking these courses already knows the concepts from other languages.
There's a pretty neat way to do things like this using LINQ. It's not going to be an efficient way to count the even numbers, but neither is looping over them anyway. It's a good way to demonstrate the principles that make chained operations on collections a pleasant experience. Firstly, create the numbers 15 to 75 inclusive with Enumerable.Range(15, 75 - 15 + 1) It takes arguments start, count so remember to add one to the count for an inclusive upper range. Then select the even ones: Enumerable.Range(15, 75 - 15 + 1).Where(x =&gt; x % 2 == 0) Now you have a collection of only the even integers between 15 and 75. You can count them with .Count() or sum them with .Sum() for example. You can even skip the filtering stage of .Where(x =&gt; x % 2 == 0) for counting the number of elements that satisfy the predicate, since: var count = Enumerable.Range(15, 75 - 15 + 1).Count(x =&gt; x % 2 == 0); is the same as var count = Enumerable.Range(15, 75 - 15 + 1).Where(x =&gt; x % 2 == 0).Count(); Note that for the summing example you could also skip the filtering by applying a transform that returns the input if satisfied and zero if not: var sum = Enumerable.Range(15, 75 - 15 + 1).Sum(x =&gt; x % 2 == 0 ? x : 0); There's so much more that can be done neatly with very few lines of LINQ code, another good example is calculating variance of a collection of data with no loops involved: var variance = data.Average(x =&gt; x * x) - Math.Pow(data.Average(), 2);
Learn both... Realistically C# is just cleaner more powerful java anyway with much nicer features. If you learn java you will already know 40% of c#, if you learn c# you will know 90% of java.
I understand that they both share similar/ same constructs and syntax but I wish to be at least semi-proficient and focus on the tooling and the ecosystem. I am glad that what I learn in 1 can be used in the other :) but I just wish to go one route in the beginning.
If you ask about only the syntax, C# better in most of aspects. Try to do a model in Java, then do it with C# (properties). Even in the most simple scenario the C# wins. But, there are more jobs in Java. Anyway, if looking for junior jobs, C# and Java share most of the concepts and the teory you learn in one can be applyed to the other. So, i think its your preference.
I mainly use c# but I've written a couple Android apps in Java. Java felt like trying to run through water whereas c# just feels smooth and logical. It is easy for me to 'guess' where some functionality is when using .net. Java was rarely that easy. I also really enjoy using linq. It feels like wizardry. The syntax of both are relatively similar so I'd recommend spending and hour or two making a medium difficulty app in each and see how it goes. The bottom line for me is that I don't enjoy Java after being spoiled by c#. Also, visual studio.
Then go C#, its the bigger language of the two and with .net core it is trivial to write highly performant code that runs everywhere. The language is flexible and concise while still having low level features and performance. It's only downside is that it is a fairly large language.
If you know that this is always the object type, why use reflection? Just cast it and read the properties like normal
and double quotes ... 
I agree java is probably globally more in demand but Korea is also very MS heavy so :-)
I agree with u/Danthekilla on this. It really is best to learn both languages but starting with .NET is going to be the more gentle on-ramp IMO. Both tool sets can do whatever you want however the Microsoft tool set stands above most others in ease of use and power. That said it is still a complex language platform so expect to be saying WTF 20 times a week for the first year or so. 
That's fair. I've seen it done in the past on this sub-reddit so I assumed it was the standard procedure for "crossposting" SO questions. I'll add a top level comment including the question.
C# is a really awesome language, I use it every day, and really there is no development experience equivalent to writing C# on Visual Studio. If you're non-windows, then DotNet Core is ramping up right now, so you can check out VS Code and try out some C#. But being on Visual Studio is amazing, the auto complete features are great and it makes the whole language so discoverable that the code almost writes itself. Then you have some great refactoring tools like Resharper, which allow you to extract entire methods or infer interfaces from their usages before you even write them. So I'll write whole classes that either implement or utilize an interface that doesn't exist, then Ctrl + . to have Resharper generate that whole interface for me in a new file. You pretty much have to use Nuget to manage package dependencies and install new dependencies, and it is a very good tool as well. It was less required in .net framework, but it's hard wired to the dot net Core cli, so they've basically accepted it as the only package manager anyone uses. One thing I love in comparison to other languages is that readability is built in to the programming practices enforced by the language; writing object-oriented code and utilizing it from dependencies means you don't get into cases of seeing a bunch of symbols smashed together where one of your coworkers thinks they're a genius for figuring out how to parse json output of an http call into a 4d tuple array and link each of those cells to other dependent on the dimension of the data (I see one-liners to do this sort of crap in Python a lot; I swear they don't pay me enough to put up with coworkers on the *spectrum*). There is an object for everything, and intellisense let's you discover the actions that those objects can do. So you can really just sit down, hit f12, and figure out how to piece any part of the framework together without already needing to know something like how to drag PDF bytes that are too large for your system memory through to a printer call using memory streams. It's really calming to know that the framework lays out how to do that through objects and their types, and makes it easy to figure out. Also Jon Skeet is always there to help you out on Stack Overflow for your C# needs.
I think that in the future C# will win, java is dying slowly, but give a try to the both.
You're probably not going to become an "expert" at both, nor are you realistically going to use both on a day to day basis. Specializing takes time and dedication, so pick the language you prefer and go from there. Nothing says you can't go deep with one and have basic competency in the other, though. As far as "which" language you pick, well, there is a lot more than just language features here you need to consider. Don't get me wrong, I love c# as a language, its feature rich and quite elegant, however, it will have some implications on what kind of projects and shops you work at, and the systems you work with. This has been my experience so far... I have been writing .Net for over 10 years, and personally, am very much tired of the typical "Microsoft way" philosophy. It's a prescriptive, all or nothing Microsoft mantra present at nearly ever .Net shop I have been at. My patience for the typical drag and drop, GUI driven development as well as magical abstractions that hide away critical complexities from the developer is pretty low these days. However, times are changing, and with the advent of .Net core, that philosophy is starting to fade. The prescriptive stack is still pretty prevalent (common in many platforms), so you can likely count on working in Windows shop, with Windows Server 20xx and SQL Server 20xx, and AD, and a Windows 10 dev machine, and all the other Microsoft lingerings if you pick c#. Also, your selection for tooling will be a bit more limited in comparison to Java/JRE shops. Currently, if you are writing .Net core or Mono, as far as IDE/editors are concerned, you can pick from Visual Studio, Xamarin (aka Visual Studio Mac - aka Please kill me if i have to use this IDE any longer), Rider, or any text editor and use the .Net/Mono CLI tools. If you are more than likely supporting a project/product on legacy CLR (say .Net 4.6.2 for example), well then you get Visual Studio. If you are working on any kind of infrastructure or dev ops role, you can pretty much not count on using POSIX based command line tools, like grep, and awk, and ssh. Count on working through a graphical RDP session, or possibly powershell remoting. Again, not a rule, but a likely scenario. Finally consider what other languages and toolsets your runtime provides you with. The JRE and .Net have many similarities. One of those to note is that they both utilize a just in time complier (JIT) that transpiles an intermediary language (Java's Byte code or .Nets CIL/MSIL) to machine code. This allows the runtime to support a variety of languages that all compile down to the same executable code. In the Java space, you have many choices, IE: Java, Scala, Groovy, Kotlin, etc. In the .NET space, you have (on legacy CLR) C#, F#, VB.Net, Managed C++ etc. My advice would be, do some research and see which ones you find most intriguing, and maybe that will help guide your choice. 
Just to give a little bit more context i lean towards the C# and .Net ecosystem more than Java. Even if i am comig from the nix world i feel like MS is going the right way. However i also consider how java is widespread and how in demand it is. I do not wish to be an expert in either i would love to just land a boring corporate job that will provide for me and my family. 
I personally stuck with C#/ASP.NET because it's a nice middle ground between extreme convention over customization like Ruby on Rails (zero freedom) to extreme customization over convention like JavaScript (choice fatigue). By the way, Go is a beautiful language and I enjoy coding in it but it's so niche-y. It's as if writing microservices with Go is all companies in my area ever want. 
I think it is useful if said developer has no exposure to C#. Apart from the OOP concepts (which is similar to Java's but different from Python's), Pluralsight covers things like types, generics, methods, fields, events, delegates, extension methods, LINQ, lambdas, etc. on the programming language end, and concepts like assemblies, namespaces, protection levels, etc. on the code org end. Some of these will be familiar with Java programmers, but not to say, Ruby programmers.
I can't really tell you which language will yield a better sea to coast in. If that truly is your goal, find a profitable business who's legacy cash cow is a classic ASP.NET webforms product.
Because var list = new LinkedList&lt;string&gt;(); // C# has not the redundancy and length issues of List&lt;String&gt; list = new LinkedList&lt;String&gt;(); // Java Writing Java feels so 20th century. [*var*](https://stackoverflow.com/questions/479883/how-good-is-the-c-sharp-type-inference) makes use of type inference.
That's not entirely true or fair. Java does have type inferencing, granted, not as good as c#'s (yet). Generic type right hand inferencing. `List&lt;Integer&gt; list2 = new ArrayList&lt;&gt;();` Also supports lamda type inferencing ``` List&lt;String&gt; names = Arrays.asList("Tom", "Dick", "Harry"); Collections.sort(names, (first, second) -&gt; first.compareTo(second)); ``` 
As a C# developer who also has to develop and maintain a large Java suite of apps, I would recommend keeping Java as far away as you can. Thats just my personal preference, I just dislike most everything about it. It gets the job done, is a familiar C style language, and is very mature, but I dislike the tooling, the verbosity, and the over engineered [Fizz Buzz Enterpriseness](https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition) it often espouses. C# is by no means the least verbose of languages, and I am sure I am quite biased, but Visual Studio is hands down the best IDE I have ever used.. by miles. The language and tools are constantly getting better, more open sourced, etc.
When coding C#, I do miss Java’s “throws” keyword for mandatory exception handling, and Java’s class-like enums, but despite that I find C# to be a cleaner language. And Visual Studio helps out a ton, essentially writing all boilerplate code in some scenarios.
 letterNumber = ((letter-65)-b)*ea.ModPow(a,-1,m) % m; ModPow is a static method in the `BigInteger`class. See [this](https://msdn.microsoft.com/en-us/library/system.numerics.biginteger.modpow(v=vs.110\).aspx). You probably want something like this: letterNumber = ((letter-65)-b)*BigInteger.ModPow(a,-1,m) % m; 
Ok, right. Thanks for correcting me. Still the basic point holds; C# has less redundancy in variable instantiation due to keyword *var*.
The use of var makes for some seriously unreadable code. The only times it doesn't are when the type is very obvious, such as in your example. I don't want to hover my cursor over every variable to figure out it's type.
C# is so much like Java it's not even funny. My recommendation is learn C#, then Java- because you'll just end up learning what's different rather than learning from the ground up. (As a sidenote, do people really stylize C# as Csharp? Never seen it written that way.)
I feel like visual studio has gotten worse over the years. It is so monstrous now and consumes way more resources than it used to. A 4GB install, really?? I hear the new Rider IDE by JetBrains is pretty good. Haven't tried it yet though.
Yeah, especially with extensions like Resharper and others that command resources. However, I run with high end stuff at home and usually is never a problem. At work a bit more so but still manageable. Either way, every other IDE I have used has paled in comparison. I tend to have to work mostly with C# and Java, and for web stuff, javascript and what not ill still use Visual Studio. Netbeans/Eclipse is a joke, I use IntelliJ instead which I find much better, but its still clunkier and slower than VS.
This can happen, yes. But you don't *have* to use var. You can declare and init your variables "redundantly" like in Java whenever you like. On the other side, Java forces you to state the type explicitly although your assigned value might be crystal clear on it's own. So Java imposes a style on you which might often be useful (making code more readable as you say), but sometimes a slightly different notation might be the smarter way. Because, on the other side, having more code letters on the screen than necessary makes it harder to read the code, too. But yeah, that's probably an ongoing debate which style is better, cleaner, faster. But if you like that about Java, that's no reason against C# as you can do exactly the same in C#. Plus more.
&gt; I feel like visual studio has gotten worse over the years. It is so monstrous now and consumes way more resources than it used to. A 4GB install, really?? VS2017 really cut down on the size. Their primary focus for the next few years is going to be continuing to make progress on that. 
Your variable names should be descriptive enough of what you're storing that the datatype shouldn't be necessary. I've never had an actual problem with "var" before. 
If you don't like the bloat you can use a mixture of VS Code for one-off editing and reading, and VS proper for editing sessions and the tooling support.
&gt; As a sidenote, do people really stylize C# as Csharp? C# developers generally don't, but you often see it in lists, filenames, and titles that way to avoid any potential issue with the octothorpe.
It's a stretch for me to pat them on the back for generic type inference. Because of type erasure, they get that with a minor tweak to the grammar and a quick check for any typed constructor parameters. Lambda inference neat, though. For anyone else reading this, the magic here is noting the method signature of Collections.sort: void sort(List&lt;T&gt;, Comparator&lt;? super T&gt;). Because Comparator&lt;U&gt; is a single-method interface, it allows you to use a lambda in place of that type.
It’s probably because they figured out people could keep signing up for free dev accounts and have unlimited access, not that I would *ever* do such a thing *cough cough*. Even msdn professional only gives you access to a very small subset of pluralsight which I couldn’t really believe ha. 
Google used to ignore # as a special char. So when you were searching from something you would either type it out like that or CS so you were searching more than just the C.
I don’t think you can go wrong learning either C# or Java. I use both in my day job, they each have some things I like over the other but overall think both are here to stay for a long time and you’ll have a great amount of job prospects with either one. C# is better syntactically, no question about that. There’s a lot of nice things to make your code less verbose (var, linq, properties, just to name a few). Visual Studio and Resharper together make for a great IDE. This might get me some flack here, but I think Java has a better open source ecosystem. I think this is due to it being open source and cross platform from day one (over 20 years ago)! However, I do think that .net’s ecosystem will continue to get better now with the push to .net core and better cross platform support. But it’s not there yet. Java has things like Maven and Gradle which are far better build tools (IMO) than anything .net has to offer currently. IntelliJ is also an amazing IDE. 
There are enough of us already, please go the java route. 
Personally, making separate methods for setting and getting variables is kinda dumb.
C# is the better language. Java has the more robust ecosystem and is in wider use. Both are very widely used in industry and are easy to pick up.
C# the language is way ahead of Java in moderness scale, and it's improving faster than Java. If you care about programming language that pays your bills, C# is probably a safer bet. It's not super-duper modern, but not horrible in a way Java is. I'd still look at other stuff apart from the language when picking a job. Java job could have more interesting stack in other areas despite the unpleasant language
C# has, generally, much less ceremony. The languages are pretty similar, though. Java probably has a more diverse selection of third party libraries, C# may have a superior selection of first party libraries. Java probably has better support for Linux/Mac, at least in the near term. IIRC, C# has 'happier' developers, for whatever measure those StackOverflow surveys use, but it's probably all pretty similar. If all else is equal, do some practical programming on your own to figure out which language/platform your prefer, and spend some time looking at wages and job postings in the area you're going to. Figuring out which platform you like and which will pay more seems like a better strategy than asking us for advice.
I both do and don't miss checked exceptions. I think it's a fairly important part of a method's contract, but the little production Java code I've seen was positively lousy with Pokemon exception handling. There's still quite a lot of that in C#, of course, but checked exceptions seemed to aggravate the issue.
The easiest way would be to use a C# SDL2 wrapper like [this one](https://github.com/flibitijibibo/SDL2-CS).
int count(int a, int b) =&gt; (b-a+1)/2 + (1-(a|b)&amp;1); 
I would recommend staying away from VS code with c#. It's a PAIN working with it. Instead get a Rider license. I used a few months ago when they were releasing the builds and it was pretty decent. Plus since it's Jetbrains, you get all the goodies of resharper :) I work in a .net core project and man that feels nice. Two important fact also is that the whole .net core is open source and you can see that new features are coming way more faster now. Second, compare the c# jobs and java jobs out there. Pretty sure StackOverflow has this in their annual developer survey.
You need to learn how to write tests and how to debug. Refactor your random generation logic into a separate test case which shuffles an array of numbers. Run that test and debug it. Once it works on the simpler case you can apply the fix your own program.
Nice one. You win :P
Would you be kind enough and specify the exact steps of how would I wrap this? Thanks in advance. 
First thing I've noticed- your create cards method has a loop that runs from 2 to 10 and creates a card of that value for each suit. In the same loop you create all the high cards... You create all of them 10 times so that's why you are getting duplicates 
Also your suit enum where they all have the same value. Don't do that that's just bad practice, I'm surprise it compiles. That is not the way to do equality comparison. Look into IComparable 
[This](https://stackoverflow.com/questions/1228335/how-do-i-use-a-c-sharp-class-library-in-a-project) is basically how to do it. If you want to make a game in C#, the better way would probably be to use [MonoGame](http://www.monogame.net/) or a game engine like [Unity](https://unity3d.com/). If the goal is to actually learn WPF, then you don't need SDL or anything other than WPF itself. Be creative in the way you use the components and [animations](https://docs.microsoft.com/en-us/dotnet/framework/wpf/graphics-multimedia/animation-overview). You can create a turn based battle game like Pokémon with only WPF (just the battle system, I think that creating an actual Pokémon clone where you can walk around would be pretty hard using nothing but WPF).
[This](https://stackoverflow.com/questions/1228335/how-do-i-use-a-c-sharp-class-library-in-a-project) is basically how to do it. If you want to make a game in C#, the better way would probably be to use [MonoGame](http://www.monogame.net/) or a game engine like [Unity](https://unity3d.com/). If the goal is to actually learn WPF, then you don't need SDL or anything other than WPF itself. Be creative in the way you use the components and [animations](https://docs.microsoft.com/en-us/dotnet/framework/wpf/graphics-multimedia/animation-overview). You can create a turn based battle game like Pokémon with only WPF (just the battle system, I think that creating an actual Pokémon clone where you can walk around would be pretty hard using nothing but WPF).
`PascalCase` for all class members except private fields. `camelCase` only for local variables and method parameters, as well as private fields (commonly prefixed with a `_`).
I've only ever seen camel for private methods in java, never C#...
Kotlin, Groovy, and Scala are already eating at Java from within. They all compile down to the same JVM code and can use any (mostly) java library.
Can you give an example of the code where you're trying to retrieve data from the "other websites"? If the api call's to get json data work fine, then seeing that code doesn't really help diagnose anything. 
Ah, so camel it is. Not sure why they have it default to Pascal. Good way to get people into a bad habit.
What is CreateGraphics() doing? I'm assuming this is a winform app? You'd need to pass the instance of the graphics object (PaintEventArgs e) into your class from the OnPaint event.
Here is the other test calls I have been using. The "http://www.icanhazip.com/" website returns right away and returns the response as plain text. The "http://www.example.com/" takes approximately 22-23 seconds to get from the SendAsync call to the if (response.IsSuccessStatusCode == true) line. HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "http://www.example.com/"); //"http://www.icanhazip.com/"); using (HttpClient httpClient = new HttpClient()) { using (HttpResponseMessage response = await httpClient.SendAsync(request)) { if (response.IsSuccessStatusCode == true) // Takes approximately 22-23 seconds to reach this line { lblOutput.Text = await response.Content.ReadAsStringAsync(); // Returns result quickly at this point } else { lblOutput.Text = "Failure"; } } }
I’ve yet to see Java code specifically used in production, but I felt checked exceptions were nice to have in a few hobby projects, to ensure that all exceptions are caught. However, I can easily imagine that some devs would just catch Exception, rather than specific exceptions, and handle different exceptions differently where applicable, when constantly being forced to try/catch everything that has potential to throw an exception. Also, I’m definitely stealing “pokemon exception handling”, that’s a brilliant term!
Methods are not fields, not. Fields are class-level variables.
The conventions I use are: public void PublicMethod(int methodVariable) private void PrivateMethod(int methodVariable) private int _MyInteger; public int MyInteger { get; } Local variables inside of methods should also be in the form * int myVariable *
_Is_ it the bigger language of the two? Don't get me wrong, I much prefer C# to java, but I'm not sure C# is bigger / more widely used than java is.
Cheers, that's what I've been using so far, I was a little stumped when I saw several tutorials mention that private methods should be lowercase. I think i'll stick to what I've been doing and what's default in VS.
Thanks -- I tried to reproduce given your example in hopes to help prove it's something on your PC or network. Indeed it seems to be. My response was nearly instant. Here's the code I used -- nearly directly ripped from yours: https://pastebin.com/uYem6dnT If you write it as a console app instead of some type of UI app, do you experience the same problem? That'd be the next thing I would try to rule out. 
[It seems to be necessary](https://docs.microsoft.com/en-us/dotnet/framework/winforms/advanced/how-to-create-graphics-objects-for-drawing) Yes, this is a winform. How to pass the instance of the graphics object into the class?
I have used the same calls in a UI project and also in a console application and both get the same result. I have also tried this on my Windows Surface with Visual Studio Enterprise and get the same delayed result. I have used Visual Studio on my Mac and the calls return almost instantly, so I believe it is a windows error that is causing it. Just don't know what the error is. I have also tried turning off the firewall and that hasn't effected the timing at all.
+1 for Linq. It's so good it kind of feels like you're cheating compared to other languages.
If you're in an area where C# is actually more popular then Java, I wouldn't even think twice about it. C# really is great
Yes. Read about DirectoryEntry (your hook to AD with the right user that has permission to update AD). Read about DirectorySearcher - find a user in AD - probably by email or Samaccount. You'll set the property - and then commit the change.
I did not take the time to make some statistics so it is probably 50/50
It can be slow DNS resolution, slow certificate validation, etc.. Your best guess is with Fiddler 
Microsoft recommends *_localPrivate*
I don't disagree, it's strange that when contacting site directly and not through code it acts normally. I suppose the browser could be caching DNS and hiding the problem. Maybe he could try ipconfig /flushdns and clearing all browser cache -- anything to try to get the same experience in the browser as well. 
MS publishes style guides, you can google that for most languages. It’s going to come back like this: &gt; public void MyMethod(int numberOfStars); &gt; private void EnsureMethodNameIsPascal(string name); &gt;private const string ConstantValue = “helloooo”; &gt;private int _fieldThatWillBeUsedClasswide; &gt; private Action&lt;int&gt; _myAction = (number) =&gt; { var camelCasedLocalVar = number * 1;}; 
I never used kotlin or scala, so a have no opinion of its syntax and core features except they run under JVM.
I just tried ipconfig /flushdns and clearing browser cache and it still works fine from there. Another thing I tried is the same API call from Postman and it returns instantly with no problems.
&gt; I can easily imagine that some devs would just catch Exception In my experience, that is pretty much what happens. Like I said, I see a lot of it in C#, too, but it seems to happen less often since it's never a build error to leave an exception uncaught. (The other problem, I find, is that many business systems don't care so much about the type of error, so `catch (Exception e) { Log(e); }` or something very like it becomes the correct behavior 9 times out of 10, anyway. But, it's a bit more complicated when you're writing a library or just want to do it the Right Way as part of a personal project.) &gt; I’m definitely stealing “pokemon exception handling”, Definitely not my term, but it seems to be in pretty wide use: go right ahead.
[Java's style guide](http://www.oracle.com/technetwork/java/codeconvtoc-136057.html) uses camel case for all private methods.
Error says index out of range, meaning your array is being asked for something that is out of it's boundaries... like -2, when it's 0 to array.Length. I'd suggest checking that your index number isn't too low or high, since you jave this Array [x-2] code.
“Index out of range” means look in the square brackets for a number that’s not in your array. So... you have several square brackets on the line with the error, but all of them contain the variable `x`. Use the debugging tools to check what the value of `x` is, then check how that fits in with each time you use the `numbers` array.
Technically the MS guidelines only cover public names and make no recommendations for private/internal fields.
I'm not going to diagnose your issue, but I will review your code. 1. Use properties instead of fields with private `set`-ters on your `Card` class. 2. Fix the values on your `SuitType` enum. 3. Use a card-shuffling algorithm (e.g. [Fisher-Yates][1]). 4. Rename your variables. WTF does `response_3` do? 5. You're adding your royal cards to the collection in every loop iteration. [Code][2] 6. Bust each of the "dealing" operations out to separate methods. One for dealing the flop cards, one for burn, one for turn, one for river, etc. [1]:https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle [2]:https://github.com/Elliot-NL/Poker-Hands/blob/master/SimpleDealer.cs#L46
how are you measuring those 22 seconds? it could be helpful to put in Stopwatches, or create a running log at each step (maybe at each curly-brace). i was thinking ConfigAwait(false) and then trying the ui context, but if you're also getting this on console it makes less sense. so, whenever i'm confused, i need to add more logs. if you run that func multiple times (without quitting between), does it still take 22s each time? if you build in release, is it same behavior?
 _privateField localVarOrArgument AnyMethod() AnyProperty PublicOrInternalAnything IInterface AllOtherTypeNames
Oh yeah, that's no joke. With all of the android SDK and emulators and shit, there is like 40GB of space required.
Have you tried disabling your antivirus, to see if that makes a difference?
I got the 22 seconds from monitoring the call in fiddler. I also tried using ConfigureAwait(false) with no luck. I tried running it multiple times and they all return at the same time after that same period of time. No improvements. Also building in release gets the same result.
Just tried again, and after the first call, the all go fast and finish right away. It’s only the first call that takes forever.
In the US I've noticed there are more jobs for Java, but because Java is usually taught in universities that C# developers have an easier time finding work. Something else to think about at least, I chose C# initially because there were quite a few jobs and hardly any schools teach it.
That is a contrived example. If you're going to type var you might as well have typed int. Sure, naming is important. However, there are plenty of scenarios where naming falls short, and you just want to see the types of your variables at a glance instead of having to read all of the context around the code to guess what types you're dealing with.
Yeah tried that with no luck. I’m just using the windows defender and no other special antivirus. 
Look into the Accumulator Pattern to have a running count. Then run a single final Write Line that says the total. The OP code is spitting out every even number, and then waiting for a Console input. If that is intended, it's good to output a message to inform the user that they need to push a button to continue... otherwise you might suspect it has frozen or stopped working for some reason.
Yes i know that is static method just i dont know how to implement with static metod and BigInteger class
fiddler has a bunch of timers/timestamps available. which one seems to be the hog? i would add log notes as close around that as you can. thers an overload of sendasync where it'll return control after headers are ready. might be helpful to log there too. does this happen to all https, or only some? does it happen for a site which you manage (anything useful in its server logs?). get your clock in sync w server, and see when exactly the server sees the client, and the time it considers request done, and response done (and any other timers); and how that compares to what your app says are the times. next step is laborious, but i would try to get a statistics model. how often does the error behavior happen vs not happen. how often on first run. how often on n-th run without quitting. if you batch several back to back without quitting, and also script to run them with quitting between; does that change results. if you can spin up 4 simultaneous competing instances; are they reasonably consistent with ea other? if the app does a run and sleeps for a bit before the next run, does that change the output? also, sleeping after a quit before re-starting. and how does it behave if you start a bunch of async tasks before awaiting; does that have meaningful change?
Well, C# does that very thing for you with property setters and getters, you just don't have to see it.
How is this code being called? It would normally be called from the form's OnPaint event, in which case you’ll receive a PaintEventArgs object which contains the Graphics object. Then you can obviously pass that onto the method that contains your code. From your own link, this is the first method they suggest (whereas you’re using the second method they suggest). If your code isn’t being called from the OnPaint event, you will need to find some other way to get the Graphics object from the form to the class that needs it. Without knowing the architecture of your code I wouldn’t know where this might be.
https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines
Where could a person find these recommendations?
Is this code being called from code that is not async? If so you could try wrapping it in a Task.Run().
https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines I couldn't find this specific one however.
You've created an empty `int` that you're then trying to use to call ModPow, I'm not sure what this is meant to accomplish. Just call `BigInteger.ModPow`instead.
Thanks. Nothing inherently wrong with the second. The conundrum I face is that I've been approached by a company to use my web application, which was initially designed to be consumer facing, where I'd handle sales and marketing activities for my own product. The company I'm working with will licence the software which is great, but they want to maintain some semblance of their own branding, and in return they handle their own sales and marketing, freeing me up from having to care about it. Thanks again for your advice, linking may well be the only option at this point
I think linking is going to be safest in the long run. Cheers
It's because most applications in C# primarily use standard passing semantics (value by value or reference by value). Using ref is an off case from my point of view and normal passing by reference with classes behaves similar to passing by const ref (for reassignment) In C++ passing by reference is almost standard practice for classes, which means that const references are actually important to the majority of developers.
I don't know why you were down voted. Whether people agree or not, it'd be much more useful for me as someone asking the questions to actually see and understand why people don't agree with your reply. I up voted you, and hope that someone can give more insight why your answer wasn't good. It seemed reasonable to me
No they don't, spent a long time arguing with my team about that, unfortunately I lost.
Bookmarked! Thanks for the link. Second paragraph of [Capitalization Conventions](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions): &gt;Do not use underscores to differentiate words, or for that matter, anywhere in identifiers.
In my team (internal to MS), we don't use underscores for privates. Both class private and local variables use lower camel case. We DO differenciate them with scoping... this.classPrivateField localVariable.
Sure, the struct vs class mechanics in C# make it less common to be desired. But I think the opportunities are more common than you think. Take game/graphics programming, for example. Passing things like Vector3 by copy may not be a huge deal. But passing a Matrix4x4 by copy often seems awkward. And yet, you probably don't want to make it a class, because you don't want the heap to be awash in matrices. I really would like to see them expand this to return values and properties as well. It'd be really nice to be able to just return a readonly version of a member variable. Again, much like const reference in C++.
Take a look at this website and see if it makes a difference. I've been trying their suggestion, making the client static and its been working great. https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/ 
I never said it was more widely used. I said the language was larger as in it has more keywords and programming methodologies.
Can't find it now, but back in 2002 when I started using C#, there was some guideline for camel cased private methods. I adopted this. I've tried to switch to the now standard convention of Pascal Case for all methods, but when reading code seeing the camel case on private methods helps me form a quicker understanding of the class's public interface, and what is implementation detail; so I keep camel case for private methods.
That's not true and I've seen many variations in their examples. My favorite variation uses `m_` and `s_` underscore for member and static respectively. This is supported by the VS code analysis feature. But again, isn't a formal standard.
You're right on the money with the 40/90 statement, but if you're actually going to learn both I believe that java is the logical starting place for that very reason. Java is easier to pick up and understand, where C# has so much sugar that it can be difficult to get your head around at the start. I studied C# first and it's still my language of choice. I do wish I learned java first though, for the reasons above (this is comparing courseware I was exposed to during my diploma, Microsoft 70-483/4 books vs the OCA/OCP java books). C# -&gt; Java was trivial, as you mentioned you're already 90% of the way there. But C# first is tougher at the start. Visual Studio is a wicked IDE though, and that really does make a big difference. I like NetBeans for java (my java dev is android studio now, which is essentially NetBeans). If you're going to choose only one, C# all day.
I wholeheartedly agree. I don't work in Unity or game programming. So, for us, we have a few common/core projects that are shared around the organization. When something gets put in there it's usually mature enough to go ahead and optimize if needed (such as a quadtree implementation). That's about the time I/we think about using ref and changing classes to structs if it makes sense.
The installer is even Node... 
That is weird. It looks like you were in Debug mode, since System.Diagnostics.Debug is included. If this is a Visual Studio Installer Project, you could try switching to Release mode, right-click on the Detected Dependencies folder in the setup project and select Refresh Dependencies.
Removed: Rule 4.
Oh, and TTypeArgument
Yup, I think the underscore came from a different team, maybe the framework team? It's been a quasi-standard for at least 10 years. 
Microsoft has naming conventions published: [Capitalization Conventions](https://msdn.microsoft.com/en-us/library/ms229043(v=vs.100).aspx) [General Naming Conventions](https://msdn.microsoft.com/en-us/library/ms229045(v=vs.100).aspx) I've had jobs in both C# and Java (among others) and my advice is that it is best to follow the standard conventions of the language you use. 
Underscores for private fields goes against MS naming conventions. 
Not sure if it is the same problem here, but I've had some similar wonky response time issues happen. Requests from my machine would take _maybe_ 0.5s, but requests from a production machine would take 3+. Issue was that the domains we were accessing were setup for IPv6 (misconfigured), but were only listening/working with IPv4. Could see the issue by running `dig` (or `dig6`?) on the domains.
I think he knows that...you know exactly what he means, stop being pedantic.
Maybe team just wanted to add one feature no sane programmer would use? 
Sort of. MS doesn't actually specify a naming convention for private fields. _camelCase is an extremely common convention in C#, IME. (See, for instance, the Roslyn source code.)
Ah, yes. I forgot about generic parameters.
It is a VS Installer Project. Tried switching between Debug and Release a few times. Refreshing Dependencies is not changing anything :/ Tried removing the application setup from my solution and starting from scratch but it does the same thing.
All good except for the private fields. Microsoft is no longer recommending prefixes for private fields. This works well when using StyleCop, which I believe originated from somewhere in Microsoft, which recommends adding this. to any instance-member accesses. So, for example, what used to be _connectionString = ...; becomes this.connectionString = ...;
Microsoft's examples are all over the place. They do not adhere to any one standard and were made by many different programmers over a long period of time. The notation you are using is called Hungarian notation--or at least it is a remnant of it. For private fields I have seen many different "standards" and we can sit here arguing all day.
Not 100% but I believe you're right. Honestly conventions for naming private fields is probably the one thing I see fluctuate the most.
Private fields are the only thing that fluctuates because they say specifically teams can choose whatever. Any style enforcement tool (resharper, stylecop, etc) will dictate the way I described earlier. https://msdn.microsoft.com/en-us/library/ms229043(v=vs.100).aspx
Private fields are the only things that fluctuates. Any style tool will yell at you for using that pseudo Hungarian notation, which MS specifically states not to use. For your private fields you are free to use whatever your team finds valuable https://msdn.microsoft.com/en-us/library/ms229043(v=vs.100).aspx
Well I worked for MS so I beg to differ
[removed]
You are correct, I’ve added an edit
That is your csproj file, as noted in the comment at the top. It's an XML file, not XAML.
correct answer can be seen here : http://dotnetmob.com/csharp-interview-questions/interesting-c-interview-questions/#q1
 https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/general-naming-conventions https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions &gt; DO NOT use underscores, hyphens, or any other nonalphanumeric characters. 
&gt; Any public member is Pascal case, what does the underscore do for you? The principal one is that it provides some immediate prevention of collisions with locals without dragging in `this`. YMMV. But, as I said, it is an *extremely* common convention, in and out of Microsoft, regardless of what their docs say about underscores.
Interesting questions on the page, but I think #5 is partially incorrect: &gt; Q5 . if C# string is a immutable class , consider following code snippet &gt; string str = "ABCD"; str += ""; str = str.Replace('x', 'Q'); str = str.Trim(); &gt; How many instance will be created for the above code snippet ? &gt; Ans : Only one instance will be created.C# string is a immutable,But it won’t create new instance if the operation does not change it’s value. First I thought it was incorrect since the method calls Replace and Trim could easily allocate a new string to store the value of the evaluated operation. However, digging deeper, [Replace() in fact does skip an allocation](https://github.com/dotnet/coreclr/blob/238907f69662dda53dee0afd9848756a5bb790e9/src/classlibnative/bcltype/stringnative.cpp): while (((index=StringBufferObject::LocalIndexOfString(thisBuffer,oldBuffer,thisLength,oldLength,index))&gt;-1) &amp;&amp; (index&lt;=endIndex-oldLength)) { replaceIndex[replaceCount++] = index; index+=oldLength; } if (replaceCount != 0) { // allocate string Trim() however does not: public string Trim() { return this.TrimHelper(2); } private string TrimHelper(int trimType) { // ... return this.CreateTrimmedString(start, end); } private string CreateTrimmedString(int start, int end) { // .. return this.InternalSubString(start, length); } private unsafe string InternalSubString(int startIndex, int length) { string str = string.FastAllocateString(length); // ... return str; }
The ASP. NET Core code seems to use _privateVariable everywhere. 
I really hope no one is giving interview questions like this. Knowing this doesn't even help in the work you do because nobody writes or approves such code. There are sane ways to test knowledge of pre- and post-increment operators without producing a line that will take people a good minute to read and study when they come across it in code. This is the kind of thing that gets people asking bad, over-asked questions on SO because they tried it in C++ and rightfully got a non-sensical answer.
19
You mean 18 right?
I'd just fail the code review and ask for it to be made less ambiguous. Next question. 
How do I access it ? 
That sounds obnoxious. I thought the C# team was all about finding creative ways to remove ugly boilerplate, not throw it back in for fun.
Sometimes I make type generics all caps so they stand out better on the screen.
Usually you don't - unless you know what you're doing and have a specific need. It's managed by Visual Studio. Since you're new to C# let's just say that Vizzie don't like it when you fuck with his shit. If you want to look at it, right-click on the project name and select unload project. Then, right-click on it again and select the edit option. After you're done looking, right-click again and select reload project.
Thanks for the all the replies, all of you were super helpful
Where does this camelCase for private methods comes from anyway? I didn't think such thing existed, but I've seen couple of private methods with camelCase on the currect project i'm working on I was wondering if that's an old convention or someting.
My only reason to prefer underscores for private fields is that it prevents me accidentally referring to the private backing field directly when instead I am trying to set the public property. This is important in my view models to ensure the property changed is fired on the property when the value is changed. Intellisense will automatically pick up the property when starting to type it, but without the underscore on the backing field Intellisense picks up the backing field first. It is a minor thing, besides we enforce stylecop at my work, so I don't have the option to use underscores. 
This might be a bit advanced but it will give you an overall path to follow to dig deeper in subjects that are unclear: https://www.youtube.com/watch?v=SExdr_oQbag
So would I. Having said that, I suspect that the answer is 18.
University culture sometimes encourages this kind of 'clever' code. Get a bunch of kids to write algorithms without giving guidelines about readable code and you get this stuff. There's more prestige in writing insane oneliners than there is in writing 6 lines of readable code.
To right! thank-you for the response, maybachsonbachs I only ever turn to reddit when I've exhausted all my options... I will read more into unit testing! 
Will do insulind! Thank-you for the response, I didn't even spot the looping issue - thanks for bringing that to my attention! 
I recommend Begin to code with c# (plus additional 4 chapter online for free) and c# 6.0 and the net 4.5
I wouldn’t consider this. boilerplate. It’s just for clarity. As an example, if using the underscore prefix method, you could declare a local variable and name it with an underscore prefix. This would be extremely confusing to anyone reading the code. There’s no way to do this when doing this. for all your instance field accesses.
thanks for the response sacroiliac, there are alot of rookie mistakes in my code - thank-you for bringing them to my attention. The response variables are just simply meant to stop the user from progressing with the application, very counter intuitive as there are 4 of them! 
Your team is doing it right 
StyleCop does not force the _ prefix
I've worked around the issue by replacing all private fields with properties especially since most private fields are readonly and a get-only property is shorter to type
You can create self-contained applications, which do not require anything to be installed, with .NET Core. A simple console application is, including the framework itself, around 62 MB. Zipped with 7-Zip it's only around 17 MB, not bad. Simple extract and start the executable. I'm sure with something like ILMerge you could even merge it to a single file.
Looking forward to this! A lot! Lack of C# has been the major thing holding me back from embracing Godot.
It was used a lot in the VB 6 era if I recall correctly. Certainly other aspects of the naming conventions were.
Not really Hungarian notation. That would indicate purpose, this just covers lifetime.
I just said that the Code Analysis tools in Visual Studio explicitly support it. So your claims are false on their face.
You'll want to either get the SDL2-CS nuget package added to your solution, or just add the source files from git to your solution. Then download the runtime DLLs from the SDL2 website, add them to your project, and set the properties so they are copied to the output dir. You'll need to explicitly set your project to build either x64 or 32 bit rather than "Any CPU". Depending on which version of the DLLs you download.
Sqlite Oracle
https://msdn.microsoft.com/en-us/library/system.directoryservices.accountmanagement.userprincipal(v=vs.110).aspx UserPrincipal is what you need to set the description field of an AD user
Is this more shitpost hating on WPF? Considering WPF is already installed where .NET is installed, this feels like another cheap shot at WPF by uwp zealots?
Can somebody (hi OP) sum up what this is all about?
Resharper will come out of the box enforcing the underscore for private field names
That must be our setup, R# certainly does
Removed: Rule 4. There are learning resources in the sidebar and available at /r/learnprogramming.
Removed: Spam.
Removed: Spam.
I suspect your computer has a problem. I run Visual Studio and Resharper for days without a single crash.
..pardon?
`Console.ReadLine()` (which you probably want to use) returns a String which can be parsed e.g. using `Int32.Parse()|
I'd rather to use Pascal for all the methods; otherwise you are... kind of... influencing your code too much by visibility. Besides, bear in mind that if you'd need to change the visibility of a method (public -&gt; private, private -&gt; public) you'd need to rename all usages, that is a bigger refactor than it should be. Visual Studio helps you to do that, okay, but you are introducing more changes than strictly necessary (thus generating more diffs, thus increasing the risk of merge conflicts in your version control system). That's my point of view: more changes than expected that could lead to merge conflicts and more annotate stuff that obscures code investigation.
`Convert.ToInt16` is a function that needs an argument to run. Just like `Console.WriteLine` needs to be told _what_ to print, `Convert.ToInt16` needs to be told what string to convert to a short. And /u/Gambleon is correct: you don't want to use `Console.Read` here, you need `.ReadLine()`. That function gives you back a string, which you can then turn into a short with either `Convert.ToInt16` or `Int16.Parse`.
when i changed my code to Console.WriteLine("Please enter your first number:"); intFirstNumber = Int32.Parse(); Console.WriteLine("Please enter your second number:"); intSecondNumber = Int32.Parse(); I get a new error code CS1501 and description - No overload for method 'Parse" takes 0 arguments. Hmm...
That's a reasonable rational, though I find the different icons next to each method name in the Visual Studio drop down to be sufficient when dealing with a class directly and ideally I'm using an interface otherwise.
Int32.Parse isn't a mind reader, you have to tell it what to parse. Int32.Parse("16"); // Passes 16 to the parse code monkey and he gives back the parsed result. Warning, Monkey get mad sometimes with bad input and crashes program!
 Convert.ToInt16(intFirstNumber); Convert.ToInt16(intSecondNumber); Would this work? Also, when I changed intFirstNumber = Console.Read(); and intSecondNumber = Console.Read(); to intFirstNumber = Int32.Parse(); and intSecondNumber = Int32.Parse(); I just get another error.
In the line: Console.WriteLine("{intFirstNumber.ToString()} + { intSecondNumber.ToString()} = {(intFirstNumber + intSecondNumber).ToString()}"); You need a $ before your string starts: Console.WriteLine($”{intFirstNumber} ... “ ) Also, you probably want to use the short.TryParse function. I’m on mobile, but it’s used about like the following: short parsedValue; if(!short.TryParse(inputString, out parsedValue) { Console.WriteLine($”{inputString} is not a valid number”); return; // or throw or some useful behavior } short doubledValue=parsedValue+parsedValue; Console.WriteLine($”{parsedValue} + {parsedValue} = {doubledValue}”); 
`Console.ReadLine()` returns a string, `int.Parse(string input)` takes a string and returns an integer. Combine them ( `int.Parse(Console.ReadLine())`) and get input directly as integer values. 
You still need to read from the console, but `Console.Read` is the wrong way to do it. string firstInput = Console.ReadLine(); intFirstNumber = Convert.ToInt16(firstInput); See how we're providing `Convert.ToInt16` with the value we want converted to an Int16 type. It can't just guess at what we want converted -- we have to be explicit and pass it as an argument to the function.
He MIGHT want Console.Read if he knows he'll only ever support single digit values, but regardless, he'd still need to .Parse or... Convert.ToChar(someChar);
I hope it's better then Unity.
Hopefully a better alternative to shitty Unity. Does it use actual concurrent/async etc things or force you to use Unity "co rountines" and other such crap? What about properties? Does it actually support that or does it promote public mutable fields like Unity does, thus violating encapsulation?
From what I can gather it's exactly that, an old convention that is no longer put into practice.
Spaaaaam
Holy fucking shit /u/BankyTech fuck you
Seriously think /u/FizixMan should ban anything from "C-Sharp corner". It's all low quality indian-english crap and the OP is the actual author of the site/articles so the site itself is spamming, its not just some random person spamming.
I ran the test again and grabbed all the timing results from fiddler. It looks like the TCP/IP connection took 21052ms to connect. == TIMING INFO ============ ClientConnected: 11:14:39.145 ClientBeginRequest: 11:14:39.150 GotRequestHeaders: 11:14:39.150 ClientDoneRequest: 11:14:39.150 Determine Gateway: 0ms DNS Lookup: 0ms TCP/IP Connect: 21052ms HTTPS Handshake: 0ms ServerConnected: 11:15:00.203 FiddlerBeginRequest: 11:15:00.203 ServerGotRequest: 11:15:00.204 ServerBeginResponse: 11:15:00.258 GotResponseHeaders: 11:15:00.258 ServerDoneResponse: 11:15:00.258 ClientBeginResponse: 11:15:00.258 ClientDoneResponse: 11:15:00.258
HES EVEN DELETED HIS ACCOUNT fuck sake, the people who spam on here are fucking nightmares. Please make it so an account has to have existed a couple weeks or has say 100 karma or SOMETHING. This is stupid.
I agree, they've been in my radar and I think this could be the last straw. I'm not at my computer for a bit, but I'll investigate further and update the blacklist automod rule if appropriate.
This made me laugh out loud, thanks
In my opinion there is basically never a reason to use `List&lt;T&gt;.ForEach` over a normal `foreach` loop. That code would be shorter and cleaner without it. You may be looking for the `Enumerable.All()` extension method.
You could just do sameDivision = divisionOppenents.All(d =&gt; team.Division == d.Division) so I would say no.
MVVM principles, namely decoupling.
OpenTK is primarily just a wrapper for OpenGL. As such, it's a bit lower-level than fonts or text rendering. There's a couple ways to accomplish it: * Render the text on the CPU into a bitmap and then upload it to an OpenGL texture. Then, render a quad with that texture using OpenGL. You can use [ImageSharp](https://github.com/SixLabors/ImageSharp) for this. * Render the text on the GPU. There are a variety of extremely complicated ways to do this. I am only familiar with using something like [SharpFont](https://github.com/Robmaister/SharpFont), which generates a bunch of triangles to be rendered by OpenGL.
Eh, probably not. First things first, I don't think you need to use the archaic `delegate` syntax; I think lambda works fine: divisionOpponents.ForEach(divisionTeam =&gt; sameDivision &amp;= team.Division == divisionTeam.Division); Secondly, it doesn't really offer much that a standard `foreach` loop doesn't already. Rewritten as a standard loop: foreach(var divisionTeam in divisionOpponents) sameDivision &amp;= team.Division == divisionTeam.Division); And in such scenarios, you get your bit of savings with a standard `foreach`; no invoking other methods, no closure. Finally, reading what you're doing here, I think you can just leverage a simpler LINQ construct: var sameDivision = divisionOpponents.All(divisionTeam =&gt; team.Division == divisionTeam.Division); This has the benefit of reading _what_ you're trying to check (all the teams are in the same division) rather than _how_ you're tryingi to check. (By writing it _how_ you're checking, the developer has to infer _what_ you're checking, plausibly misunderstanding it.) In terms of what a "legitimate" use of `List&lt;T&gt;.ForEach` actually is, I'm not too sure. Off the top of my head, perhaps as part of a larger LINQ query that nicely keeps everything in-line as one block. For example: //deletes players inactive for more than a year myDatabase.SelectMany(team =&gt; team.Players) .Where(player =&gt; player.Inactive) .Where(player =&gt; player.LastActiveDate &lt; DateTime.Now.AddYears(-1)) .ToList().ForEach(inactivePlayer =&gt; DatabaseService.DeletePlayer(inactivePlayer)); Otherwise, ¯\\\_(ツ)_/¯. `ForEach()` tends to be used to drive _changes_ because it has a `void` return. _Generally speaking_, it's best to try to separate querying for data (LINQ) and changes to state. But if it makes more sense, is easy to understand and maintain, you could get away with mixing them (perhaps like above). Even the above could be rewritten as: var inactivePlayers = myDatabase.SelectMany(team =&gt; team.Players) .Where(player =&gt; player.Inactive) .Where(player =&gt; player.LastActiveDate &lt; DateTime.Now.AddYears(-1)) .ToList(); inactivePlayers.ForEach(inactivePlayer =&gt; DatabaseService.DeletePlayer(inactivePlayer)); Which isn't that much different. And again, just as: foreach(var inactivePlayer in inactivePlayers) DatabaseService.DeletePlayer(inactivePlayer);
Removed: Rule 3.
Removed: Spam.
I've considered that. I'll have to see if I can setup automod rules to allow for self/text posts because some people make accounts to ask legitimate help questions. I'll investigate it to see if I can allow those with zero karma/new accounts, but disallow off-site links. BTW, yeah, c-sharpcorner is blacklisted now.
Thank you! Appreciate it on behalf of everyone on this sub.
Thank you! I will give SharpFont a try.
Thank you all. I suspected there was something I knew I didn't know (Enumerable.All).
`ScheduleGenerator.GetDivisionOpponents` should not return a `List&lt;T&gt;` because you shouldn't use that class in a public signature. What happens if you add a team to the output of that method? 
Are you suggesting it should be IEnumberable instead, so that a team cannot be inadvertently added to divisionOpponents, such as in the case of a bug?
i found this, which suggests the connection is not succeeding: https://stackoverflow.com/questions/19020691/fiddler-web-debugging-tool-tcpip-connection-time-value-meaning maybe a typo in the hostname? another route to investigate is using sockets directly. maybe just to setup a tcp connection, see if that is still 20s. 
Just to note you can just do inactivePlayers.ForEach(DatabaseService.DeletePlayer); instead of inactivePlayers.ForEach(inactivePlayer =&gt; DatabaseService.DeletePlayer(inactivePlayer));
I guess I'll just have another look at QuickFont. I can probably make this work :&gt;
Would love to have this option with .net core as well. The standalone compilation option is very nice but the number of DLLs is just off the charts. Maybe hundreds of files are acceptable to web developers who are used to a mess of css, html and javascript files but for non-ui developer each separate file has to have its reason to exist. BTW there are ILMerge and Repack tools but it would be nice to have this feature supported by compiler natively.
&gt; Does it actually support that or does it promote public mutable fields like Unity does, thus violating encapsulation? You should use the [SerializeField] attribute for private fields you want to show up in the inspector. `[SerializeField] private int someNumber'`
Your operator might work fine... it's just not being called. Your `Console.WriteLine` is calling `ToString()` on the two vectors and then using `operator+` on the results, which is the string concatenation operator. To invoke your operator, make sure the two things are you are adding are `Vector` objects, and not the string representation of vector objects :).
Did you not read what I said? I clearly DON'T want to use private fields being exposed, hence why I said I hope godot does none of that crap/
There is no legitimate use of the ForEach method. Maybe if another method takes a delegate that matches the signature of the ForEach method you can pass yourList.ForEach as argument but I have never seen such a signature in practice.
Java "throws" keyword is probably the worst thing that I ever encountered in Java. It looks good in theory but in the end everybody just puts "throws Exception" to get stupid checking off their backs. 
No methods over 10-15 lines. Always think, "is this code easily debuggable?" If you think you need to comment, create a method, or refactor. 
`IEnumerable&lt;T&gt;`, `IList&lt;T&gt;`, `IReadOnlyList&lt;T&gt;`, `ICollection&lt;T&gt;` or `IReadOnlyCollection&lt;T&gt;` would be better.
I can imagine, even though it promises near crash-free code if implemented correctly, since it ensures all exceptions are caught. But that’s the promise of many things, and most end up being poorly implemented in real scenarios.
&gt;If you think you need to comment, create a method, or refactor. Terrible advice. No amount of readable code can ever explain why things were done the way they were. The best it can do is tell you what was done.
I am talking about inline comments. You could write that else where or create a readable test that explains the why. 
Is there still any way to get the trial?
Anyone? :/
Using factories and strategies for similar workflows with some nuanced differences. Much easier to read and refactor than having conditional statements all over the place. 
Hard right margin at 80 chars. I hate coming across code with horizontal scrolls. 
&gt; I am talking about inline comments. You could write that else where or create a readable test that explains the why. So every time you need to explain something the person needing the explanation has to go hunting for it until they either find it or exhaust all the possible places you could have put it? More terrible advice. 
What kind of code are you writing that requires comments to explain? If you name things properly, refactor out as much as you can to make them read like English, and implement proper patterns people shouldn't have to go hunting for answers and should get the gist of a class in a quick gloss over.
Invert `if` structures to eliminate nesting and explicitly define handling of the non-happy execution path. For example, instead of executing the entire body of a method inside a `if(input != null)` block evaluate the not null precondition as `if(input == null)` and either throw or return if true, executing the rest of the method after that block. 
It's not really a "tip or trick", but trying to adhere to [SOLID](https://en.m.wikipedia.org/wiki/SOLID_(object-oriented_design)\) , especially the S (single responsibility) and I (interface segregation) parts. It tends to lead to more compact and easier to read code.
Generally speaking ForEach is when you have a list of something and want to feed each one to a method. In general there should be no side effects on said list. So think logging, etc. Your use case is not really fitting as you want to return/modify a value outside the method. All exists and would be a better fit in this instance.
The only other thing I can think of is a mismatch between your project's target framework and the dependencies for one of the packages you have installed caused VS installer to pull those in. I use VS installer for two products with the same dependencies. For one the setup creation went smoothly. For the other the deployment listing had a few dll's duplicated in the deployment list. I just deleted the duplicates. I just checked, and it looks like Microsoft engineers actually reply to questions on the marketplace page. I'd ask there. VS 2017: https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.MicrosoftVisualStudio2017InstallerProjects#review-details VS 2015: https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.MicrosoftVisualStudio2015InstallerProjects#review-details
I agree with you with a couple of caveats. 1. I shy away from any hard and fast rules about a line count. If we have one rule it's that there's almost always an exception to every rule. 2. Sometimes a comment about what you're doing is needed, but it's a good indication you have a problem in your design (e.g. your method is doing more than one thing). Still it's possible. I think that people take these rules as meaning you shouldn't have documentation based commands. C# has good commenting support through the /// syntax and that should be utilized. 
It’s 2017, we have wide screens now
Pretty much anything that isn't just mindlessly pulling data and serving it. Also in any case where you are doing something odd to get around a bug in a dependency or where you are explicitly supporting a bug or sub-optimal way of doing things to preserve backward compatibility. Naming and patterns can't and shouldn't explain to you the why, because the *why* involves depth of detail, not things you can gloss over and put in a variable name. 
The human eye doesn't actually track any better, though.
Ask this on SO, you might get better responses.
120 chars for me
I'm sorry but I disagree 100% with what you're saying. &gt; because the why involves depth of detail This is just wrong in every way. The best way to write strong software is by breaking up these "depths of details" into manageable components with a single responsibility. Then there isn't any depth behind it, just things that logically make sense and do what they say (are named). &gt; not things you can gloss over and put in a variable name The variable names and method names should explain exactly what the single responsibility of that method or variable is, and if they are all named properly and the methods describe the action that is being performed an entire block of code should make sense and shouldn't require too much digging around in the details of implementation. Something like: public double TabulateBusinessAccounts(IEnumerable&lt;Accounts&gt; accounts) { var summationOfAccounts = 0; foreach (var account in accounts) { summationOfAccounts += retrieveAccountTabulation(account); } return summationOfAccounts; } Cleanly explains what all of the code is doing, and the `retrieveAccountTabulationData(account)` call can be a private method that makes an ORM call, or retrieves some account information from an API, or may even have a couple more methods it calls to get information. Someone who opens up a `AccountTabulation.cs` can read this method and see "We're getting the list of accounts, tabulating all of their information, and that's all this class does". They can go look at the retrieve account tabulation method (if they even need to at this point) because they understand the context of the call, and when they go read that method and it has 5-7 lines in it, they can see exactly what that one is doing, and then go to another method inside of it, etc. On top of that if it's properly backed with testing any future changes shouldn't be too difficult. 
They aren't exposed to anything but the inspector. You don't want to see them in your inspector? Then don't put [SerializeField] near them. Other scripts can't access them anyway. 
Resharper is a great tool to reduce nesting (in case you accidentally write monstrous nested code) 
Didn't Unity update its C# (or at least in a beta build)? Not sure tho, not using it. 
&gt; No methods over 10-15 lines. Always think, "is this code easily debuggable?" Likewise, I have a "if this code is indented 3 tabs or more, it needs to go into its own function". &gt; If you think you need to comment, create a method, or refactor. Well that's where you've lost me. No, this is bad advice. Comments should explain the "why". Too many people just dismiss comments because poor commenters explain the "how". If you need to comment, then please, for the love of god, comment. Otherwise you end up with 80,000 lines of useless Node code like our architects put together, where the only comments that exist are "//do nothing". Gee thanks. I could tell that from the code, dipshits. 
My only issue is they generally accomplish the by having early returns and I have a personal preference for only returning from the very start of a method based on parameter validation, or as the last line.
And funny thing, most diffing tools show code side-by-side, so now you're back to scrolling, even on your wide monitor. And I can't tell you how many times I've needed to split-screen two-or-more files at once. Maybe 80 is too low, but 100 or 120 is the max I'm willing to go. If your code exceeds that, it tells me one of two things: 1. Your code is ridiculously verbose (Java...) 2. You are packing far too many things onto a single line that will be super easy for someone to miss in the future. Don't do it. It's bad. Stick to sensible widths.
Try to eliminate if/switch statements and replace them with polymorphism. 
This is actually good advice. If a line is more than 80 characters it usually means there is to much branching. https://en.m.wikipedia.org/wiki/Cyclomatic_complexity 
In addition to /u/nealpro 's answer, it looks like you're doing your assignment the wrong way round in the Vector constructor. You're setting the local argument variable to the corresponding property, so your vectors will always be zero.
I get that you just wrote this snippet as an example and it isn't intended to be production perfect. But it provides a good example to demonstrate exactly what I'm talking about with the "why" of code rather than the "what". &gt; public double TabulateBusinessAccounts(IEnumerable&lt;Accounts&gt; accounts) &gt; { &gt; var summationOfAccounts = 0; &gt; foreach (var account in accounts) &gt; { &gt; summationOfAccounts += retrieveAccountTabulation(account); &gt; } &gt; return summationOfAccounts; &gt; } I look at this and it's pretty clear what is happening. But I can't help but notice you used a double for monetary calculations. In practice, this is a really bad idea because floating point error can accumulate to be significant over multiple calculations, and with money you want perfect precision to the hundredths place. So if I was looking at this code at work, I'd immediately wonder if the developer who wrote this either didn't know this, or if they had some good reason why exact precision wasn't important in this situation, thus justifying their use of the double type. If that's the case, there should be a short comment explaining why double is an acceptable representation for money math here, and why avoiding using a fixed point type was worth the tradeoff of accuracy in this situation. If the developer was not aware of that, in code review I would tell them to use a fixed point type and add a comment explaining why that is necessary. You'll probably say I'm being pedantic and that you didn't give much thought to this example code. But I say the fact that such a question can arise even in a code block as short and trivial as this is a great illustration of my point that you need to document the "why" of your code.
And that's why I'd have it under Unit Test before I even started writing the code. I threw this together really quick, and in reality I wouldn't have even written any of this until I had a unit test to back it up. If the unit test bombed I'd immediately assume it's either a data error or an error in my code. A good developer would have all of that under unit test, and it wouldn't need any comments because the unit tests would give all the reasoning necessary for every decision that was made. I would have unit tests like "Given an account exists, it returns the tabulated data" and other cases like if the account is null, and maybe one for a double value for a reason. Let the unit tests be your comments, the code doesn't need it (most of the time). Comments are basically an excuse saying "I did it this way and didn't find out the right way to do it, sorry"
And why store _availableCards as `ICollection` when you know it's a `List`, you just restrict your own possibilities 
I don't see how unit tests explain that you should use fixed point instead of floating point when dealing with money. Also, I don't want to go read through all the unit tests for a method when I have a question about that method. I want the answer to be right there so I don't have to go looking for it. Just because it's possible to figure something out from the tests doesn't mean you should have to resort to that. Say what you mean in plain English if its more clear that way. That's not a failure, that's doing everyone else on your team a favor.
Don't Repeat Yourself, is probably the best one. I also really like enum helper classes, but I'm aware this one is less popular.
i.e. fall through if everything's groovy?
we are using 4.6.1- working fine for us want to say it was 2017.1 
The concept illustrated in that book still applies even on CoreCLR or Mono Runtime. It's pretty valuable to know about IL and Reflection and how to use them well in your project since you can take advantage of those knowledge to optimize your program.
Dependency inversion is super important too. Especially when it comes to writing testable code. 
Sure there is -- if you already have an existing function you want to use. No sense using `foreach` and then calling the function you actually want to call inside that loop if the signatures match. just `ForEach(YourFunction)`.
So you don't want to waste time debugging, but you don't want unit tests either? Maybe one of your unit tests is "Returns the Accrued Value as Double" and inside the unit test you have some calls that make it apparent why it has to be double. Look I don't want to get caught up on the semantics of double vs. float for money - I really don't deal with this so I don't know the in/outs of how it works in the financial world - but what I do know is that if you want to debug quickly and understand someones code, having the Test Explorer panel open and filtered to a class will do a lot more than reading some programmers comments from 2 years ago when he was hacking things together. This is the definition of legacy code, and unit tests are designed to prevent these unknowns from occurring. 
I've written lots of code over the past few months where I've used comments more extensively than I usually do. - Performance optimizations. I've been doing a lot of work with Redis recently, and we don't have any good experience with Redis performance at my company yet. So every time I make a change for a performance-related reason (such as tweaking page sizes) I leave a note saying what the default was, why it was bad, and link to any evidence I have from performance testing to prove out that this new value is the best choice. - Things best left alone. This goes hand-in-hand with performance. I deal with multithreaded code a lot. That's an area of expertise that few people I work with have. I've written a good bit of lockless, thread-safe code in really critical pieces of the system. Every time I do, I make sure to add a comment explaining why it's being done this way and how I can guarantee safety. No amount of proper naming or SOLID design will help you there, and you certainly don't want someone else coming along and changing it because they think they spotted a mistake that wasn't. - Metaprogramming. Writing code that writes code isn't the easiest thing in the world to do. I had lots of helper methods that split everything up into more easily used chunks than the standard Expression helpers, but even then, I got lost (and mind you, this is one method call with a bunch of arguments that happen to be method calls themselves, and no amount of variables are going to help it make any sense, and these calls are all made dynamically, so you're limited as to what you can do). So I put comments next to each of the Expression builders illustrating what the code would have looked like if it were written by a human. So much easier to figure out what was happening.
I'm not saying don't ever comment - I'm simply saying that if you are relying on comments to help people in the future you're writing, to be frank, shitty code that no one will want to work with in the future because they have no idea why the code was actually written that way, just that it was written that way. Make it work -&gt; Make it right -&gt; Make it fast To me it sounds like people are stopping at the first part because "well it works!" and they don't care to actually make it write. I don't know a lot about those areas of programming, but it sounds like having comments that explain interactions and operations might be beneficial - but it also sounds like you're somewhat of a wizard programmer where you work, and that's a bit dangerous. 
I didn't say I don't want unit tests. Unit tests are important. What I said is that if you think it's important, especially things about why the system is designed or implemented the way it is, write it out explicitly in English. That's what comments are for.
You aren't getting the distinction between **what** and **why**. Your naming explains what is going on, it doesn't explain why. In many cases the why is self evident. When it's not, you need to document that and there's no place like the site, not off in some other class or unit test. Unless of course you are advocating something like the following, but I hope it's not the case. `X509Certificate2 certificateDontRefactorThisInANicerWayBecauseIKnowHowYoureGoingToDoItAndThatOnlyWorksInYourLocalEnvironmentAndNotInProductionAndWeveAlreadyHadThisRegressionEveryTimeSomeoneNewComesOnBoard = null;` `FormattedFinancialStatement yesWeKnowThatThereIsAnExtraCommaAfterNetInterestButDontTouchItBecauseThisIsExposedViaThePublicApiAndWeHaveCustomerScriptsThatWillBreakIfYouTouchItSoStowYourOCD = null;` `WebSocketConnection connectionDontUseTheReconnectParameterInThisConstructorBecauseThereIsABugWhenUsingThatFunctionalityCheckOpenGithubIssue35667OnceAMonthAndPingTheMaintainerToAcceptOurPRFixingItUntilThenUseTheHackBelow = new WebSocketConnection("someUri");` I sincerely hope that you aren't putting the **why** in your variable names in production. 
It really is, but it really slows work to a crawl in large projects especially when paired with other tools like NCrunch. 
Cleaner code: SOLID principle. Also read [Clean Code](https://www.amazon.ca/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882) You have to elaborate on efficient code? Are you talking about performance?
Single Responsibility and Dependency Inversion are the two big ones from SOLID for me. Once I started to really take Single Responsibility to heart, I realized how many of my classes were doing distinctly different things. Split out all those responsibilities and it was surprising how much more readable and maintainable my code was. Dependency inversion just makes working with the code base much more flexible. All a given class has to worry about is what dependencies it needs. It declares them in a constructor or a method signature, and then it's just there. It also now gives a lot of flexibility to the rest of the code in that there are now extensibility points throughout the code base.
Use a the analyzers &amp; refactorings, and require code to build without warnings. The built-in stuff is okay, but I highly recommended Roslynator Refactorings for this sort of thing.
This sub has started downvoting well-known good advice lately. We seem to have had an influx of typical redditors in the past few months. Considering those same newbies usually love to tout Robert Martin's *Clean Code*, here's that same man's thoughts on the matter: http://blog.cleancoder.com/uncle-bob/2017/02/23/NecessaryComments.html And as much as I don't like Jeff Atwood's blog, here's his opinion: https://blog.codinghorror.com/coding-without-comments/ Here's Quora: https://www.quora.com/Are-comments-in-code-a-good-or-bad-thing Personally, most comments I see are stuff like `double timeLimit; // time limit for download in ms` but that ought to be `TimeSpan downloadTimeLimit;` or if necessary`double downloadTimeLimitMillis;`. In short, programmers tend to use comments to explain what/why something is when they feel it's not obvious. If your code isn't obvious, there can be only three possible reasons: * You're writing something not used in everyday software development (i.e. esoteric algorithms/data structures) * You're going against convention but have a good reason * Your code isn't as self-documenting as it should be The first two are good reasons for leaving comments, but most comments I ever see are born of the third. 
Comment your code. Seriously. The longer you program the more you realize how important this is. If I’ve written 100k lines of code in an app, I may or may not remember what I was thinking for any given routine. 
It's very experimental at this point, but there are a bunch of ["up for grabs"](https://github.com/dotnet/corert/issues?q=is%3Aissue+is%3Aopen+label%3Aarch-wasm) issues for people looking to help out.
I find as a rule of thumb that no function should ever go more than 3 blocks deep, with those being one at most one of each a conditional, loop and using. You can write clean code without this, you can write messy code with it, but I find it really helps keep me honest.
I'm really confused what you mean with that. Could you show me an example how a if statement block czn be replaced with polymorphism?
1. That's not the type of code that needs comments. If that's the most complex code you write, I can see why you don't need comments but no-one here should pay any attention to what you have to say (you're an amateur) 2. That can be refactored to a 1 line piece of code with linq (you're an amateur)
Sure, if you're writing C. If you loop in a using in a method in a class in a namespace you've already lost 20% of your space before you even get started. If it's a private class even more. I mean, don't get me wrong, multi-layer branching is rarely helpful and shorter lines are almost always clearer, but don't use weird old rules in the hopes of encouraging some second order effect. If you don't want lots of branching then either add a code analysis rule for that in particular, or just rough count the number of code paths when you do a code reviews. 
Sure. Here's a simple example: **If Statements*** public class Operator { private readonly string operation; public Operator(string operation) { this.operation = operation; } public double Evaluate(double left, double right) { double result = 0; switch (operation) { case "+": result = left + right; break; case "-": result = left - right; break; case "/": result = left / right; break; case "*": result = left * right; break; default: throw new ArgumentException(nameof(operation)); } return result; } } **Polymorphism*** public interface IOperator { public double Evaluate(double left, double right); } public class AddOperator : IOperator { public double Evaluate(double left, double right) =&gt; left + right; } public class SubOperator : IOperator { public double Evaluate(double left, double right) =&gt; left - right; } public class MulOperator : IOperator { public double Evaluate(double left, double right) =&gt; left * right; } public class DivOperator : IOperator { public double Evaluate(double left, double right) =&gt; right == 0d ? throw new InvalidOperationException("Divide by zero.") : left / right; } 
That idea was conceived a long time ago when waterfall type development was the kind. Maybe some people though that it was possible to design something right on the first try and know which types of exceptions functions would throw. In age of agile it looks quite stupid. 
Design your class structure and its naming to mirror the real world function you are trying to automate, not some arbitrary naming scheme, even if it's the *accepted* arbitrary naming scheme for that business function. (For example: it is the *accepted* practice that when you call a help desk they assign you a "ticket number". But this has no bearing on reality, because you aren't getting a "ticket" to anything. It's a *phone call*. Most people when they try to design a helpdesk program first create a class "ticket", but that's nonsense, and they find themselves trying to contort their whole class structure around it. Make a class "phoneCall" and move on.) Making classes that mirror reality is often helpful in modeling real life processes more efficiently in data and making an expandable class structure that allows for future expansion. 
The inverse of that is also true. Replacing complex polymorphism with if/switch statements. 
10-15 lines per method? This is highway to Italy! Spaghetti code where a bunch of functions are called only once. I hate this type of code when instead of one simple 100 line function code consists of 10 poorly named small functions. On the other hand I have seen functions that had 1000s of lines. Hate that too.
Indeed. Not only is the performance a little better, it makes following paths a lot easier. In fact, you are literally linking them.
Unity added an option to enable C#6 with .NET 4.6 but it's currently "experimental". Still no C#7.
This!! I have 5 devs working for me and I regularly review their code. Rule 1 - If I can't understand it in 30 seconds they have to re-write it. It should be readable. No turning 5 lines into 1 just because it looks cool. Rule 2 - At least one comment line for every 5 lines of code. Think that you may have to go back to code after a year and you need to figure out what it's doing. And think of who comes after you! Rule 3 - For more complex pieces add a paragraph or 2 that explains what you're doing and why. It's amazing how this helps you and others think about what you're really trying to do in the code.
Most of the concepts still apply. Sure, language has grown, and we have .NET Core, and such... But it is still useful. However, I would like very much another more updated version.
So you've been... Waiting for Godot?
I worked on a project, and I was on the "code must be self-documentary/explanatory" train. Write clean and expressive code, then you don't need to document - because the code documents itself. **Right?** A year after that project was finished I had to work on it again, expand it considerably... And oh boy, the amount of **Wtfs?** was high. Only a year later I don't remember why I did things the way I did. I wish I would have documented and commented for the person that came after me... especially since that person was me. There was no one else to blame but myself. I learned my lesson the hard way, and now I document my code.
The CLR hasn’t changed since .NET Framework 4, so yes. Of course there are additional run times now, but the dotnet core one is a fork. 
The recommend *localPrivate*
And also .ForEach is slower than a regular foreach
That'd be a pain. Check under "About this Mac." It'll tell you what you have, and if more might be possible to add in there. You could probably use less for the VM, but things might get tight. 
:D
Immutable everything as the default, only introduce mutability when it obviously makes the code _much_ simpler. Immutability is so much easier to reason about, test, maintain and debug. In general, prefer functional solutions to OOP solutions. Prefer libraries and frameworks with less "magic". Keep it as simple as possible and prefer 3rd party code that is simple enough that you can read it and understand it. Prefer unopinionated libraries to opinionated frameworks. For example, the boilerplate code for writing a repository using Dapper is _much easier to maintain and extend in the long run_ than the amount of lines that you save by using EF. Don't fall for the "fancy conference demo", think about how easy it is to figure out what the heck is happening when something is on fire (because something will _always_ catch fire at some point). 
&gt; Considering WPF is already installed where .NET is installed so there's no need to randomly bundle it with your .exe My first choice is always .NET and WPF. It's by far the best framework out there. You can get .NET installed on any machine by any of the installer frameworks out there, but sometimes you need to distribute standalone applications, which users want to run on any Windows devices and they might not be able install the particular version of .NET. https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies If you need to support Windows 7, you can go with .NET 3.5, so you're covered on Windows 7, Windows 8, Windows 8.1 and Windows 10. Still, users can get rid of the .NET framework on given machines and newer versions of the .NET Framework contain great enhancements for WPF apps.
Basically with JAVA 9, you can link your application against the stripped down version of the JRE and you can have a standalone EXE, which you can run on any machine whether JAVA is installed or not. Haven't tried it, though.
Try to keep code self-contained within a screen's worth of real estate at a time. The hardest part of comprehending a new piece of code is jumping back and forth and mentally tracking all the independent factors which control the flow of the code. If your code block takes up more than a screen of space, consider breaking it into smaller self-contained methods, but only if those methods can be independently understood and don't require jumping back and forth to understand. If they do, you're better off leaving it in a single block, but even then, try to organize things so there's as little scrolling back and forth as possible. Remember, there's no single best way to do things, so don't be afraid to deviate from the rules if you find something else works better, but do have a good reason.
But by implementing the whole class static and providing the operator string as parameter, its easier and more readable imo (may be example specific, but still.. one function call against additional 2 interfaces and 4 classes) 
Valid point, but hints never hurt and you still can refactor the affected/highlighted lines manually if possible . If statements nested in loops have the same issue, a `break` in the middle of nowhere isn't exactly readable 
Thank you. I’d try it oit. 
Hi there - very excited for C# and web assembly... Can I ask when relationship you have with the Blazor project? I was very excited for that project, but it all seems to have gone quiet... 
I disagree. If you want to know the "why" read the commits. They should explain it. If you want to tell others "how", then write some sort of documentation, so others than developers can read it aswell. If you write inline comments, it is a code smell, that expresses that something is wrong with your code. If you start writing inline comments, you end up leaving a codebase where refactoring or code changes happens two places: in the code and in the inline comment. If one of these two gets out of sync, you dont know what is right. Has the developer forgotten to update the comment? Or has the developer forgotten to update some part of the code? Does the unit test show the right output. Do do inline comments. It is confusing.
Diff is what makes the narrower widths important and was the catalyst that drove my rule for 80 chars after one more bug that took too long to find because it was hiding to the right. I also believe that when you are reading code your eyes have a natural tendency to "give up" after about that many chars, automatically skipping to the next line as you read. If variables/functions average 8 chars and two more for white space and operandi, that's eight per line. Maybe six with tabbing. If you need more either you are doing too much on one line or you are excessively tabbed, in which case you need to break up or functionize.
use named parameters for literal parameters so that you can read what the code is doing without diving into intellisense: in the following line you can easily understand what the first parameter is by a well named variable; you have no clue what null and true represent. LogException(exception, null, true); becomes LogException(exception, additionalInfo: null, displayErrorInlogging: true); this.GetReceiptQuery(dataContext, false, true); becomes this.GetReceiptQuery(dataContext, includeReceiptItems: false, includeCustomer: true); 
Thank you for submitting to /r/csharp. Please be aware of and familiarize yourself with the [guidelines for self-promotion](https://www.reddit.com/wiki/selfpromotion). Feel free to continue submitting relevant posts, but please make an effort to participate in submissions outside of your own content.
Thanks for the advice. I will take care from next time.
!!! C#7 only alert !!!
Glad you didn't read that was a quick code piece I wrote up as an example and completely wrote me off as an amateur because of a single code block I wrote in the reddit text editor. You seem like a really nice individual who is confident in their own coding ability since you came here to berate someone!
Upvoted you, there are some kids here
The point I'm really trying to make is if you have something like any one of those examples, and it's backed by unit tests, anyone who tries to make the change will immediately know something has broken. If they don't, your unit tests aren't covering enough and that's on you, and if developers you work with are just changing code that isn't under test without stabilizing it first, you have a quality control issue. There definitely are times and places for comments, don't get me wrong, but just because you wrote some code and don't want to fix it doesn't mean you should immediately write a comment. Try and find a workaround cleanly, or write the comment if you don't think the value justifies figuring it out. The Certificate one? Maybe you have some configuration options are that changed via transforms and load the certificate and you don't need that name. The FormattedFinancialStatement could be easily covered by unit tests, and anyone who changes it in the future would immediately see that the unit tests are bombing as soon as they make that change. For the last one - well that would be another one that either has unit tests wrapping it or a simple comment explaining why it's broken. Please go read what other professionals are saying - don't just take my word for it (he basically says the same thing I'm saying): https://steven-j-hicks-speaking.netlify.com/code-is-communication
Building it into a dll to use in other applications.
Thanks for the tips. Will check this out!
Okay maybe you're not 100% amateur, I guess it's possible that someone pays you to do simple CRUD all day.
Blazor uses DotNetAnywhere runtime which is 6 yers old and not maintain anymore. If CoreRT will be mature enought to produce web assembly Blazor can easly switch to it. So Blazor is some tool/library build on top of some .net runtime.
Consider your branching. Try to hit return paths early on in a method and, as far as you have any control over it, try to get it to hit paths that often will yield the same result early on. Try to make sure that code won't run if the result of it will never be used.
That doesn't really answer the question. The other applications can use or inherit from the class you're reading. If you're so inclined you could even define it as an interface and read from that
Each time we upgrade to the newest C# I run through a bunch of code and refactor it. Like the 4.7 out param is amazing and cleaned up so much code
I actually had the code such as: public static void MyReflectionMethod&lt;TClass&gt;(TClass data) { var nestedLists = typeof(TClass).GetProperties(); foreach(var list in nestedLists) { var x = list.GetValue(list); var report= x as List&lt;object&gt;; // If no records, stop execution if (report== null || !report.Any()) { throw new NullReferenceException($"{nameof(report)} came back null"); } //continue with taking data out of list and setting to excel columns } } My goal is to allow any class, with any sort of different lists&lt;class&gt; like the above in ClassA. Any excel that requires multiple sheets(each list of data is a sheet). Could you provide code or links to help me better understand what you're saying? Thanks! 
&gt; DO NOT use underscores, hyphens, or any other nonalphanumeric characters. I think they're referring to naming like `Make_Coffee()` instead of `MakeCoffee()` since it's under **Word Choice**. &gt; [Do not use underscores to differentiate words, or for that matter, anywhere in identifiers.](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions)
The CLR is actually a runtime interface. The last changes to the CLR were a while ago, as /u/cryo says, for .net 4. So all of the new features in C# are just compiler magic that actually run on the same CLR. So if you're curious about what the CLR itself does, it would be valid. If you're curious about how c# interacts with the CLR, then not *too* much has changed since c# 6, so the vast majority would still be "modern". It would definitely still have value.
Of course it would be extremely confusing. Why would you allow anyone to do that though ? Naming rules can easily be enforced by tooling.
Style enforcement tools are configurable. Just because some way of doing it is the default doesn't make it the right way.
Part of the issue with our team is that there’s no real code review until someone else has to work on code that you wrote. If the other dev decided he didn’t want to use StyleCop, I wouldn’t know until his code needed fixed and he wasn’t available.
I think early returns are ok as long as everything flows. I often find myself doing early returns for parameter validation (obviously), but often there are short-circuit code paths (like caching) that make for clear early returns. MyResult Whatever(MyType t) { if (t == null) throw new ArgumentNullException(nameof(t)); MyResult result; if (TryGetFromCache(t, out result)) return result; // do real logic return result; } 
Same goes for magic numbers that should be enums (unless they literally *are* magic numbers, like 0xA3FF13AC defined in a spec...) Android is awful about this, but Java doesn't have number enums. this: return MyMagicFunction(myObj, 2); is much less readable than return MyMagicFunction(myObj, MyMagicFunctionOptions.UseCache); 
I appreciate you thinking so highly of me. I'm still not sure why you are so mad at someone who wrote a whole code block in a reddit text editor though, but carry on my dude, you're going places!
Hundred-line functions are almost always too long, in my experience, and either do a lot of mutation or have a lot of returns/nesting. The 10-15 line limit is a bit much for a hard-and-fast rule, but I find that it works well as a loose guideline, where methods are, ideally, 15 lines and under, but often grow to 30-40-ish. Refactoring out repeated patterns *can* help shrink things a bit, but, often, you just need to break out related operations to separate methods and stick meaningful names on them. A related guideline would be to keep classes under 1000 lines and, preferably, under 500.
I'm not sure why we're both getting downvoted so hard in this thread. I feel people just haven't had exposure to TDD or proper software practices (I.e. Uncle Bob). Thanks for being another voice of sanity. 
IoC/DI ALL THE THINGS!
Likewise. I have a feeling that there exists a lot of bade code out there because of this thread. I have even caught myself thinking "was clean code just a dream?", "Am i doing it wrong?". But I dont think er can change their minds or maybe learn them something new. I do hope OP learns something :) and I dont hope it is doing inline comments. @op read "clean code" by uncle Bob. Please. 
Ah, ok. So you want to take a class containing one or more collectors and turn each collection into spreadsheet data? That makes more sense. Something along the lines of Type rootType = root.GetType(); foreach(var property in rootType.GetProperties().Where(p =&gt; p.PropertyType is IEnumerable &amp;&amp; p.PropertyType != typeof(string))) { IEnumerable collection = property.GetValue(root, null); }
You're getting down voted because you're giving bad advice.
What if you can also submit a "ticket" online? Do you still call it a phoneCall?
No, I'm really not. https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&amp;qid=1508779069&amp;sr=8-1&amp;keywords=clean+code
Off the top of my head, I don't think there's an elegant built-in way to do this. However, it's pretty easy to write your own extension method to do it for you. From here: https://stackoverflow.com/questions/11463734/split-a-list-into-smaller-lists-of-n-size public static class ListExtensions { public static List&lt;List&lt;T&gt;&gt; ChunkBy&lt;T&gt;(this List&lt;T&gt; source, int chunkSize) { return source .Select((x, i) =&gt; new { Index = i, Value = x }) .GroupBy(x =&gt; x.Index / chunkSize) .Select(x =&gt; x.Select(v =&gt; v.Value).ToList()) .ToList(); } }
Removed: Spam.
Thank you, that's what I was looking for!
Absolutely. And the phone number property will then contain the person's email address.
Yup, own it. Nowhere does it say "don't write comments".
I have written functions approaching 100 lines with no mutation and no nesting. I probably could have/should have split it in two, but I write mostly functional style with minimal branching so usually isn't much of a need to. It really depends on the complexity and type of the problem you are trying to solve.
Then you will recall the text, which I am arguing for here: &gt; "One of the more common motivations for writing comments is bad code. We write a module and we know it is confusing and disorganized. We know it’s a mess. So we say to ourselves, “Ooh, I’d better comment that!” No! You’d better clean it! &gt; Clear and expressive code with few comments is far superior to cluttered and complex code with lots of comments. Rather than spend your time writing the comments that explain the mess you’ve made, spend it cleaning that mess." I will agree my original comment was a bit extreme by making it sound like I am advocating for no comments (I re-read it just now, but read the rest of my argument below it). I do believe in comments occasionally, just not the type that other people in this thread seem to be calling for. People in this thread seem to think you should comment anything that is bad, but people really should write their code cleanly and properly so that there isn't a need for comments (often), much like the OP of this question wanted to know about.
Find the similarities and dofferences between the three classes. Figure out what goes in which class will certainly help.
Can you provide us examples of the kind of tutorials/help-pages that you find are too advanced so we have an idea where to start? If it helps try looking into "events" and "delegates". Once you have a grasp on how those works, lambdas are more-or-less just nicer syntax of those. Here are a few things I quickly grabbed: https://www.tutorialspoint.com/csharp/csharp_delegates.htm https://www.dotnetperls.com/event https://www.dotnetperls.com/delegate https://www.dotnetperls.com/lambda I think the key bit to wrap your head around delegates is to think of it like providing a reference to a method. For example: public void Foo() { Console.WriteLine("Write foo!"); } Foo(); //outouts "Write foo!" Action someFunction = Foo; //get a reference to the "Foo" method someFunction(); //invoke that "Foo" method; outouts "Write foo!" A big benefit of using delegates is it lets you grab a reference to a method, pass it around, and let other code invoke it without really knowing the original source of the method. This enables things like events to exist. Lambdas basically let you write methods on-the-fly without declaring them using standard syntax. The same example program above: Action foo = () =&gt; Console.WriteLine("Write foo!"); This is essentially creating a `foo` method that takes zero parameters and writes "Write foo!" to the console. And you can use it the same way as above: Action foo = () =&gt; Console.WriteLine("Write foo!"); foo(); //outouts "Write foo!" Action someFunction = foo; //get a reference to the "foo" method someFunction(); //invoke that "foo" method; outouts "Write foo!" There's a more long-form syntax for "delegates" that allow you to specify the method signatures. Lambdas essentially provide a short-form version of declaring and working with delegates. (They have a few other purposes/benefits too, but this is probably one of the more fundamental concepts.)
Your abstract class should contain the common methods (with or without logic up to you). Think of withdraw, deposit public methods and a read only balance property. The other concrete classes should contain whats different in behaviour. E.g. savings account could have a fixed interest duration property.
what i dont undestands is.. why use an abstarct for this if i think i could do this with an interface.. what would u do in this project that need abstarct class more than a interface?
I found this... better than I could type up. n interface is like a contract. It says that a class which implements the interface agrees to implement all of the functions declared (as signatures only; no function definition) by that interface. The class may do so in any way it chooses, and provide any other functionality, as long as it implements each one of the declared functions. An interface is useful when you want to be able to use some common functionality of otherwise unrelated classes- they share no implementation details, only the function signatures. In C#, function declarations within an interface are implicitly pure virtual. An abstract class is a partially defined class that cannot be instantiated. It (usually) includes some implementation, but leaves some functions as pure virtual- declared only by their signature. Pure virtual functions are not defined in the class that declares them, so they must be implemented by a subclass (unless it too is an abstract class). Only a subclass which defines all of the pure virtual functions can be instantiated. The purpose of an abstract class is to define some common behavior that can be inherited by multiple subclasses, without implementing the entire class. In C#, the abstract keyword designates both an abstract class and a pure virtual method. In practical terms, the difference between the two is that an interface defines only pure virtual functions, while an abstract class may also include concrete functions, members, or any other aspect of a class.
If you found yor account classes had different implementations but the same sort of methods then use an interface, if you find a lot of common duplicare code then use an abstract class. My guess is you will need an abstract class as you will have common functionality. An abstract class can also behave like an interface so you can declare a method but force the derived class to implement its own version.
Because you can have implementation code in the abstract class. For example a `Withdraw()` method should work the same way for any account, namely `return balance - withdrawalAmount`. If you only declared `Withdraw` in an interface, you'd have to essentially rewrite `Withdraw()` for each type of account. 
It's very "hack and slashy" - and needs *alot* of work. Thank-you for the reply Cyberworm
Whoops - thanks for bringing that to my attention purpleprophy
Brilliant, thank-you for the reply nealpro :)
I cannot still cannot seem to get the value out and the answer *always* returns 0 - any ideas? Vector v1 = new Vector(1, 2, 3); Vector v2 = new Vector(3, 3, 3); //Console.WriteLine("The opjects added togther : {0}", v1 + v2); //make sure ojects are real double result = +( v1.X + v2.X); Console.WriteLine(result); Console.ReadLine();
This doesn't exactly match what (I think) you are looking for but it might have some helpful information. https://www.viva64.com/en/inspections/
I've had honest to God fights with bosses in the past who ask me to hide bugs in the code and also get upset when those hidden bugs cause serious issues later when nobody remembers what and why.
Can it mark all new posts as duplicate and vote them down? Does it have condescending attitude? If not then it is not ready for stack overflow.
Love the idea of Blazor and the name is awesome!
+1 for "Chunk". Ive written similar ones for "Chunk"ing up strings lol.
List.Buffer(batchSize) is not what ur looking for?
Linq it up : Enumerable.Range(15, (75 - 15)).Where(a =&gt; a % 2 == 0).Count();
This problem can be solved either by inheritance or dependency injection. Inheritance is probably what your professor wants you to demonstrate, given the wording. But, in a production app, I would favor interfaces and dependency injection every time.
Probably a long way off. They are doing minor releases now so probably next will be 7.2
..and I don't know when but you should be able to Google C# 7.2 and get more answers. I'm going to bed 
AFAIK, no such method exists.
Looks like you're asking for help with your homework. I doubt you'll get it here. You're a ways away from making this happen though, but 20 minutes looking through some examples would definitely help.
Its part of dotnet core
I still can't find it. Is it part of a nuget package?
Indeed, it's a handy thing to have. I wrote a version of ... public static IEnumerable&lt;List&lt;T&gt;&gt; GetPages&lt;T&gt;(this IEnumerable&lt;T&gt; source, int pageSize) for work that leverages yield return for deferred enumeration on both ends.
You did not expand upon how to actually -call- the Evaluate method. How do you know which Operator class to instantiate?
One approach would be an Operator factory which converts the string to the correct operator. To be fair, the switch needs to exist somewhere for this particular example.
Assuming Persons is a list just call RemoveAt with count-1 
Although I like "Chunk", I think to keep with the theme of LINQ that "Split" would be appropriate. As in "splitting an enumerable into enumerables." Join already does something different than what String.Join does, I think it fits.
Yeah I prefer to pass in IEnumerable if you dont need to index and what not.
Or god forbid you team disallows VAR even when it's in conjunction with NEW. Dictionary&lt;string, IDataRepository&lt;string, DocumentStorable&lt;string&gt;&gt;&gt; searchRepositories = new Dictionary&lt;string, IDataRepository&lt;string, DocumentStorable&lt;string&gt;&gt;&gt;(); That's 167 chars, or 91 just to the '=' if you wanted to wrap there. Ugh...
Thought about that too. Passing in IEnumerable is definitely better either way (unless you really need the IList). yield return has the additional overhead of the generated iterator but definitely useful.
Probably too much potential for false positives. What's the use case scenario here? Purge the database entries that accidentally contain passwords as clear/plain text for security purposes? I would suggest that perhaps you consider regularly purging that data anyway. Also, perhaps instead of storing the username in the database as clear text, either encrypt it, or better yet, store the matching user GUID/ID instead. (You do uniquely identify users using an ID other than "username", right?) If they input a username that doesn't exist, then what's the point of storing that? Maybe one-way hash it so you can see if the same incorrect name is inputted multiple times, or just store it as "UNASSIGNED" or something?
i don't know whether this is usefull or not but here is a small overview of things that can be done with both normal methods a lambda expressions and shows the difference/similarities void Main() { //Func&lt;int, int, int&gt; takes two ints and returns an int. those 4 do exactly the same thing // creates a reference to the normal method AddMethod Func&lt;int, int, int&gt; addNormal = AddMethod; // creates a reference to the expression bodied method AddExpressionBodied Func&lt;int, int, int&gt; addHybrid = AddExpressionBodied; // implicitally knows the types of a and b Func&lt;int, int, int&gt; addLambdaExprImplicit = (a,b) =&gt; a + b; // explicit typing works, too Func&lt;int, int, int&gt; addLambdaExprExplicit = (int a, int b) =&gt; a + b; // those references can be used like normal objects. We want to create an array of all add methods, // invoke them with the same numbers and write the result into the Console: //(explicit: Func&lt;int, int, int&gt;[] ) var allMethods = new[]{ addNormal, addHybrid, addLambdaExprImplicit, addLambdaExprExplicit }; int num1 = 10; int num2 = 5; // we could define a method for that, but this is pretty messy and doesn't accomplish very much, but it works! // it takes a Func&lt;int, int, int&gt; and two ints and writes the result of the invoked method in the Console Action&lt;Func&lt;int, int, int&gt;, int, int&gt; writeResult = (method, a, b) =&gt; Console.WriteLine(method(a, b)); //as you can see, it doesn't really make things easier.. Array.ForEach(allMethods, m =&gt; writeResult(m, num1, num2)); //.. as just defining the lambda in place Array.ForEach(allMethods, m =&gt; Console.WriteLine(m(num1, num2))); } int AddMethod(int a, int b) { return a + b; } int AddExpressionBodied(int a, int b) =&gt; a + b;
Just authenticate the username as the password, and if it matches replace it with as placeholder.
Just spitballing here, but how about you match/test the string against your password strength rules, and if its a valid password, instead change the username to REDACTED in the logs. 
To me, this makes much less sense than calling it a Ticket. In fact, calling it a "ticket" is just about perfect. Before digitization of the process, you could go to Captain D's and make an order at the register and the worker would print out your "ticket" and clip it to a wheel and spin the wheel around to where kitchen staff could grab it and fix your order. Calling it a phoneCall is just confusing, especially when it's not always a phone call.
I don't know of a library but have a few ideas 1) Compare it to a variety of password regex expressions. Should work well if you use a regex to test password strength when they set it. Here's the first page I found with a password regex https://dzone.com/articles/use-regex-test-password. You can find a few 2) Warn the user if the 2nd username isn't the same as the first one (unless you can find it in a user lookup). Have them change or confirm before submitting. If you do not have control of the form this won't be possible. 3) Log a hash instead of the value. It depends on what you want to do with the log. If you use it to look up specific users, you can lookup the hash of their username instead of the username. You can even create a map of all usernames to hashes to do other things. You won't be able to tell if a user created an account with username 1AmC00l (with one and zeros) then tries to login with IAmCool (with letters I and o). I have encountered that case with "an important person" to my manager and had to change the code to log the actual submitted username to prove that the user was really typing the wrong username even as the manager and I were on the phone with the user telling them that 1 and I and 0 and O were different. 3a) You may want to log a hash even if you think it's a password. That will allow you to see if the same username is attempted multiple times (in a day or over a period of hours/days). There are a number of benign and malicious possible causes of this and it would be good to have the log. 4) Lookup the submitted username and don't log if it isn't a known user. This also depends on the purpose of the logging authentications. Your intent may be to log unknown users. 5) Remember the previously entered username and test if the new "username" works as a password for the previous username. 
If anyone is following MS's guidelines, I would hope that it would be MS.
If 4chan can turn a bot racists, then surely Stack Overflow can turn a bot snooty.
If you have Visual Studio 2017 installed the reference will be at C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC#\Specifications\1033\CSharp Language Specification.docx. Other versions of Visual Studio will have the manual in the same relative location but with `Microsoft Visual Studio 14.0` replaced by the appropriate version.
&gt; The other problem, I find, is that many business systems don't care so much about the type of error, so catch (Exception e) { Log(e); } or something very like it becomes the correct behavior 9 times out of 10 The pain I am currently dealing with. And they're not learning from the mistakes that crop up either. They don't even try to treat it like a tool where they can handle expected deviations, just swallow that shit and pretend everything is fine while the frustrated user has to run back and forth between the dev and production department to ask what they're doing wrong.
Not sure how you are calling it, but it could be deadlocking due to the synchronization contexts. Some ConfigureAwait(false) on those tasks might help out here.
My understanding is that the teams within Microsoft are somewhat isolated from each other, which is how you end up seeing different coding conventions in the examples on Microsoft’s sites.
Here is how I start my task class: https://i.imgur.com/5JRkaeS.png
Yeah. They had decent advice and then chose a ridiculously inappropriate example to try and illustrate their point. Like you said, for that use case, "ticket" is the most accurate depiction of reality.
Most likely with the next major Visual Studio, which is most likely Visual Studio 2019. So probably in 18 months or so. In the mean time, they're working on minor release for the C# 7 series. C# 7.1 and C# 7.2 have already been released and C# 7.3 will be coming out with Visual Studio 2017.5.
I would recommend you read up on ICommand and RelayCommand with Execute and CanExecute that can be directly bound to a button's Command property. Triggers are fun but I prefer them for styling. With this approach you are coupling your view with logic that should reside in the view model, which isn't ideal. &lt;Button x:Name="button" Content="Button" HorizontalAlignment="Left" VerticalAlignment="Top" Width="75" Margin="144,106,0,0"&gt; &lt;Button.Style&gt; &lt;Style TargetType="Button"&gt; &lt;Style.Triggers&gt; &lt;DataTrigger Binding="{Binding ElementName=comboBox, Path=SelectedItem}" Value="{x:Null}"&gt; &lt;Setter Property="IsEnabled" Value="False"/&gt; &lt;/DataTrigger&gt; &lt;DataTrigger Binding="{Binding ElementName=comboBox1, Path=SelectedItem}" Value="{x:Null}"&gt; &lt;Setter Property="IsEnabled" Value="False"/&gt; &lt;/DataTrigger&gt; &lt;/Style.Triggers&gt; &lt;/Style&gt; &lt;/Button.Style&gt; &lt;/Button&gt;
You can sometimes use using T3 = T1&lt;T2&gt; in extreme cases, but yeah, there are definitely cases where generics can also increase verbosity. 
I cannot see at a glance what is wrong with the code and there is too much missing to reliably test it locally. I had to generate 5 custom classes and one extension method just to get the code to build. How long is it hanging? Does it eventually throw an exception? What is the exception? What does fiddler show when it hangs? Are you certain you are not just losing the task instead? 
Definitely, that approach is handy, but in this case the policy exists because some of my coworkers insist that the type be immediate and obvious while reading the code. Moving it to a using is worse than VAR in that regard since VAR at least tells you the real type on one side of the assignment
It hangs forever and does not throw an exception always. It will say error 504 sometimes, but not always. Fiddler shows a "black" uncompleted web request. Since it's async, the webrequest timeouts do nothing.
Hahaha I wonder if we aren't actually co-workers.
[removed]
I'm still thirsty for that record syntax. It may yet make convincing my coworkers to adopt immutable models possible.
Single thread environment or is it legitimately multithreaded? How long is the task running for?
Currently it's only one thread, but it's intended to be multithreaded. As lots of tasks will be running concurrently, only using proxies. Currently the delay between each request is 4000ms so..roughly 80s + the actual time for the requests. So no longer than 2 mins.
I don't have the "Specifications" folder. I'm running 15.4. Could this be feature-dependent?
What is your useragent string? Did you attempt 20 concurrent requests to the same address with that useragent in 1.5 minutes?
The same UA from chrome. And Yes, but I'm even more positive it's not a block because I have a similar program that I don't have the source to, that requests more times per second and does not get blocked.
Look up the username they type in your user store. If it isn't in the store, add a different type of log event redacting the username. Optionally, you could do a hash of the username and compare that to the password hash and only redact it then.
In your delete method you could use something like the following: Persons.Remove(Persons.Last());
It's often really important to explain the why. The how should be mostly self-explanatory from method/variable names and logic. I do a lot of business code which is driven by government regulations. References to the chapter and verse of the regulation, along with snippets of the regulation help. URLs can go stale, so don't just rely on putting URLs in comments. I put a good suite of unit test data up there as well. You should have good unit tests that explain what the inputs and expected results are -- and why those are the expected results. Most of the reference comments are in the unit tests as a result. The XML comments on the classes and methods that implement the regulation are just enough to remind you of things.
Shouldn't it be `entry = entry / baseValue;`? Not `/2`? Also, you're missing values 15, 16 ("E", "F").
Have you tried wrapping all IDisposable objects in using blocks? Perhaps they are not getting disposed of properly.
Wow, crazy. I've been debugging this same issue for the last week. We think we found our solution here: https://stackoverflow.com/questions/27361962/httpwebrequest-just-hanging-on-one-computer We confirmed our issue is in HttpWebRequest so we tried substituting it and had success. I My boss found this after work and it's what I'm going to try tomorrow morning.
&gt;and it's backed by unit tests, anyone who tries to make the change will immediately know something has broken. If they don't, your unit tests aren't covering enough and that's on you I just gave you 3 real life examples from my professional experience where either a unit test is not possible to write or it was too tempting for another developer on the team to think that both the code and the test were wrong because the issue appeared so trivial. Tests are not magic nor written in stone, and while they are a wonderful tool for testing domain logic independent of dependencies they are absolutely horrible for conveying the context and rationale behind a decision, i.e. the *why*. &gt;Please go read what other professionals are saying You might want to pay attention to slides 78 and 82 where he makes my point that it's a good use of comments to provide warnings and valuable context to the reader in ways that the code simply cannot. Listen, I'm not trying to be a dick, but you are being way too certain and condescending in your advice for a college student who can't be bothered to read through their sources, understand the point before trying to argue against it instead of jumping to ideological straw men, or even grock a simple distinction like the difference between *what this code does* and *why this business or engineering decision was made*. 
&gt; Also, you're missing values 15, 16 ("E", "F"). You mean 14 and 15.
Hey, off-by-one errors are par for the course.
Haha true that
Any reason you are using HttpWebRequest instead of HttpClient?
You might want to take a look at [this.](http://www.nimaara.com/2016/11/01/beware-of-the-net-httpclient/) It shows a "bug" (really a common misuse) of the .NET `HttpClient` that causes your computer to actually run out of available sockets. It might be useful.
Next month, likely, as it already is on VS 15.5 preview :)
Nope. That's an "email" or a "webSubmission", all of which are subclasses of "contact". (I actually thought of this.) 
Everything in my http class I posted is wrapped in using statements. 
Way more control with httpwebrequests and httpclient is meant for one time usage. I had issues with it before when using proxies and being able to keep a session alive.
I've encountered websites that will allow different QPS on different user-agents. Try checking their `robots.txt` for any QPS limitations/quotas. If there are none, try setting your request's user-agent to a browser one. You might want to explain this line more too `_UserAgent = RandUserAgent.Get();`
My client code looks exactly the same with the exception of my code using the async methods. Not sure what to do here.
That line simply grabs a random user agent for each task (individual sessions, not per request). Although for my testing, it's statically set to my UA straight from chrome, so I really don't think that's the issue.
If you would be so kind as to share the signature of your CRUD operations (these have been written somewhere in your code, probably in the same place where the 'Add' is. To find it with Visual Studio, click/highlight that 'Add' method in your controller and press the shortcut 'Ctrl+F12'. This will take you 'To the definition' of that method which should be at the same location you'll find the other operations that have been written.)
Does not seem too difficult. Use emails or alphanumeric identifiers for user names. For passwords require uppercase chars, lowercase chars, number and at least one special character. This way you may be able to determine if this is user name or password by looking at types of characters in the string. 
UA from Chrome isn't necessarily safe. e.g. I know sites like Amazon will block on relatively complex logic. Search engines usually get an UA + IP whitelist, but browser UA that are requesting above normal quota can be blocked or just ignored. You may not get a 400 or 500 back. I've also seen sites that will redirect to a captcha based on high throughput of requests. Might be worth trying some other UAs to see if you see similar behavior.
You're totally right about the entry division area. Thanks a ton!! Also, I didn't finish the hex yet, i wanted to get the first couple digits working first. I'll have to look more into debugging. I'm relatively new to visual studio/c#. Thanks again for the help
I'll try but I'd wager I'll get the same results. I took the same UA from another bot I have that is having no issues.
How much of that additional code is necessary for this endpoint? I'd strip it down to just the needed lines and see if the problem persists. If it does not, start adding them back in. I sanitized the code but this piece of production code was making something stupid like 200,000 calls to the same endpoint every day (yes, a 2+ calls every second) before I cleaned shit up elsewhere. *Giant emphasis on this is not something I wrote*, this is just some legacy crap I inherited that was part of a bigger piece of crap. Only reason I bring it up is because it is stupidly simple by comparison to yours and it was just churning out requests like no one's business. var request = (HttpWebRequest)WebRequest.Create(endpoint); request.Method = "POST"; var dataBytes = Encoding.UTF8.GetBytes(data); request.ContentType = "application/x-www-form-urlencoded"; request.ContentLength = dataBytes.Length; var stream = request.GetRequestStream(); stream.Write(dataBytes, 0, dataBytes.Length); stream.Close(); try { var response = request.GetResponse(); var postreqreader = new StreamReader(response.GetResponseStream()); var json = postreqreader.ReadToEnd(); var token = JsonConvert.DeserializeObject&lt;ResponseObject&gt;(json); var tokenExpires = DateTime.UtcNow.AddSeconds(token.expires_in); } catch (WebException wex) { throw; }
I'll give it a shot by stripping down, but this server is very picky. If it's missing certain headers it won't even connect. 
Ditto.
And I gave you a reason why one shouldn't exist in the first place, a reason why the other one can be wrapped in unit tests, and how one is an actual reason for a comment. Again, I've been saying this whole time there is a time and place for comments, but most of the time they shouldn't be necessary. The approach everyone here seems to be taking is "comment all the things" when really it should be "I spent several hours trying to figure out a better solution to this problem, talked with other developers, and exhausted all my debugging options, and there is no work around so maybe I will leave a single comment explaining something because I'm hitting diminishing returns on the value gained". My original comment was definitely a bit extreme, but in a thread talking about "favorite trick or tip for cleaner code" seeing a comment that says: &gt; Terrible advice. No amount of readable code can ever explain why things were done the way they were. The best it can do is tell you what was done. It's a bit disheartening to have that rhetoric be spoken, especially when I've created code bases that follow that idea and I'm disappointed in myself for having done so because looking back I realize the nightmare another developer might have reading my code, as well as I now know I should be have been more robust in my approach to solving it or creating better overall tests. I've also been on the receiving end of codebases with 5+ line block level comments that are sloppy and leave a lot of information out of the picture that unit tests or more concise comments could explain. Furthermore asking the developer what on Earth they were trying to convey is met with a "I don't know, I wrote that X amount of years ago" and a half-hearted laugh, that's the kind of stuff proper practice can avoid, or at least help reduce. I used to follow the idea of commenting all over the place to explain intent at previous professional environments, but I now work at a place with individuals who have done software with extreme dedication and passion, and they have shown me the beauty of writing strong tests, with simple implementations, and therefore clean code overall. That's not to say we never comment - we just rarely need to because of how well architected the software ends up being (and if we do we do it the way that Hicks suggests as well as other professionals like Bob Martin and Martin Fowler). I've also don't believe I've made a straw man argument yet (calling my sketched out code above a straw man is a misinterpretation if that's what you're going for), almost quite the contrary, whereas your argument above with those 3 examples is the definition of a straw-man argument. I also do read my sources, that's why I put them in my responses.
Does the other bot use a proxy as well? Could it be splitting requests across multiple IPs? Does the domain have a `robots.txt`?
No proxies set. And yes robots but doesn't matter since other bit making same requests.
Just thought it might be worth double checking :) There are some sites that have Crawl-delays or max crawls per minute and such. It may appear your making the same requests as the other bot, but you might be going slightly faster or not waiting the allowed amount of time. e.g. this robots.txt has a crawl-delay request (except for Googlebot): `https://www.congress.gov/robots.txt`
The other bot is maxing requests 2x as fast so I'm thoroughly confused.
Here is helper method of what I would do for her. It doesn't handle negative but that should be easy to do. You could abstract it into a helper and use it in all cases. With a lot of values I usually like to use dictionaries instead of switch statements. https://dotnetfiddle.net/2PJjyf
Probably worth reading this and considering whether your program is affected. It's good to know knowledge anyway :) https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html
Why do you believe that HttpClient is for one time usage?
it's a great exercise, and you can easily check your program by getting it to compare with the same value run through Convert.ToString(Form.Text,"16") or what the base-conversion syntax is ;)
well it is one of the 2 great problems in computer sciences, the others being cache invalidation and naming ;)
 [HttpDelete] public void DeleteThing(int Id){ db.Things.Remove(Id); db.SaveChanges(); }
Just hash it out and check for a match just like you would with the password. This is a dead simple problem. Y'all overthinking it.
he is telling you to make an abstract class "Account" with the base values every account you make will need. the point then being you can make an override for the other types and add to them each the things that make them different (savings could have a check on withdraw method to see when your last withdrawal was and make adjustment to your interest-variable for that account if not enough time has passed)
It's gonna sound like a completely wrong way to do it, and very slow... I'd take a number and make a variable = to that number + 1. Have a for loop that counts the number starting from 0, basically adding one to the number in the other base. I'd store each digit of a number in an array (or a list - whatever can have its size increased after declaring it). 0 would be the index for the smallest digit. so F to base 10 would look like this: var n = number; for(var i = 0; i &lt; number + 1; i++) { if number_based10[0] &lt; 10 { // for loop, 10 times add 1 to the base 16 number you got if number_base16[0] == "A" // use a switch like you were doing for manually adding one to it, and if it's F, set it to 0 and add 1 to the array at index 1 That's probably the worst way to do it, but it's how I'd do it.
Also, change your username rules to not accept any string that matches the password rules. That way you can be sure. Hold my beer... I'm going to post this to /r/showerthoughts
See https://www.reddit.com/r/Showerthoughts/comments/78dwev/authentication_systems_should_forbid_usernames (credit also to /u/evolved)
It’s because you’re using light theme
That's not just a reference, that's the specification. It's a lot more elaborate than most people will need. OP's link is an adequate reference in my experience.
improve your UI instead... this is by far the best solution... why does the user think he has to enter his password? because he just failed to log in and you only provide him with one box... give the user two boxes with the username pre-filled into the first box and the cursor active in the password box... no more problems and happier users.
C# versions are not comic books... if you want to start coding C# again then just start! There is no need to wait for the next "installment".
[this](https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/)?
Yes, can you (OP) rewrite the bit of code as a stand alone test that reproduces the behaviour? Just paste the problem bit into a test and then hard code any data the block of code needs to run. As long as it reproduces the error we can fix it. 
If they've failed authentication once and it takes them back to the login screen PREPOPULATE THE username box. pass the username back and reuse it. It removes the problem and makes your website better. If you don't want a better user experience, you can apply the same checks you have for when they change their password to this case. I assume you won't let them have "password" as their password. Are usernames email addresses or are they what ever they want too? If the username is email address, check it passes the email address check before it is sent. (Be careful, it's not as simple as checking for an @ and a .com). If you have password restrictions, for example, it must be 12 characters long, must contain upper and lower case letters, a number and an ancient Egyptian hieroglyph, then you're a bad person, but you can just apply the same checks to the username. tl;dr fix your workflow. Separately reuse your username and password validation logic. 
Damn. Sounds like a bug. 
Wow, how has no one linked this yet? DropBox have a library called zxcvbn that has multiple bindings eg C# https://github.com/mickford/zxcvbn-cs
Bit of a ranting reply really considering I left it at a single sentence. Yes, it was poor administration. Not once during the personal attack on me did you or anyone else try stop the person doing so. You and every other member had the chance to PM me the whole time and no one did, and it was totally unannounced. So yes, poor administration.
No it's not.
Seriously. Lighten up
It's a web app, though. Do they set up a synchronization context?
I don't know if anyone has said it, But you do realise you're missing 2 semicolons?
Yes of course, or await calls wouldn't be able to a schedule the continuation 
&gt; Did you PM me after reading the above? Nope. I did think about it, if that counts. But I thought I got my point across enough. Not to mention that i asked you if everything was alright before and I also told you that you can always hit me up if you have a problem iirc, you can read it in our DMs. Thats something I definetly told just you, which is kind of proving the point that &gt; it was obvious I wasn't welcome isnt true. There was regrets going on from the administrational part as well as the regulars. I was sleeping while that thing happened(timezones ..) and your history was deleted because you left. So i can only rely on what people tell me, which has been kind of consistent from both regulars and the administrational team. So i think a warning was more than justified. The removal of regulars? Hm. No idea, i didnt see the language used, but the warning definetly was - for both partys of the conflict. Also, i didnt know about the thing from obsi. Ill search through the logs, maybe I can read about it. Anyways; yes, my response was a little long, because i am, as stated well above, disappointed. From my point of view this wasnt only administration that fucked up here(because it did if what you said about obsi is true) but also about you getting too heated in a discussion that you could´ve avoided by stepping away from that topic at all and just asking a moderator to step in instead of trying to solve it on your own. I dont feel this should be on the c# reddit.
Personally, here's how I make a distinction between when to use an interface and when to use an abstract class. An abstract class is for when the inherited items are a type of the Base class item. So a checking account is a type of account. A file stream is a type of stream. Interfaces are for when you want to have 'can do' type behaviors on objects that are cometely unrelated. A duck might implement an ICanFly interface, and so might a helicopter. These types would not be part of the same inheritance tree, the both just happen to have the ability to fly. An abstract class is a much stronger relationship than an interface.
How can that compile while there are 2 semicolons missing?
&gt; I did think about it, if that counts. But I thought I got my point across enough. Not to mention that i asked you if everything was alright before and I also told you that you can always hit me up if you have a problem iirc, you can read it in our DMs. Thats something I definitely told just you, which is kind of proving the point that That was weeks previous, and as you are part of the admin team and the admin team collectively was basically ignoring the entire thing as it was going on I had no reason to think this would make any difference if I PM'd you or not. &gt; and your history was deleted because you left. formless claimed to have saved it, but I imagine he didn't. &gt; So i think a warning was more than justified. There was none, I was removed and no one even messaged me to let me know. &gt; Ill search through the logs, maybe I can read about it. Yes, good idea. &gt; and just asking a moderator to step in instead of trying to solve it on your own. That is literally what I did and obsidian said he did not care, and none of the staff were doing anything. &gt; i didnt see the language used I didn't use any offensive language, but the person accusing me of the horrible thing they did sure was using strong language. Due to the previous point about total indifference from the staff, of course I had to respond and ultimately became angry at the person who insisted on continuing to attack me. No one else was stopping him. And I was removed for getting annoying? Hmm.
When you're doing data modeling, try to make classes that model reality. So, sit down and make a list of the properties and methods you would expect in reality of a checking account, and that's what will go into class CheckingAccount . (Would it have an account number? A balance? A list of transactions? The ability to deposit and the ability to withdraw? How do those translate into data structures?) Repeat this exercise for the other account types. The methods and data elements they have in common go into the abstract parent class. The rest go into the sub-classes.
&gt; and as you are part of the admin team and the admin team collectively was basically ignoring the entire thing Yeah, i spent about 2 hours on the whole thing after getting out of my bed because i was busy sleeping, sorry if that doesnt seem fair to you, but you know, i kinda like my sleep. &gt; There was none, I was removed and no one even messaged me to let me know. On a sidenote; you werent removed, you left the server. The regulars-role got removed after a discussion in admin in which I wasnt involved, i read it afterwards though - and it sounded reasonable enough to me. And heres another one; People cant PM you without sharing a server with you. &gt;And I was removed for getting annoying? Hmm. You lost your regulars role because it was like the 5139074871 time you got heated in an argument. And for convenience: heres your warning, created by BlackCentipede, from 29. Sept. &gt; User: (183959669696495616) Lloyd#2033 Moderator: BlackCentipede#9938 Do not cause political mess on this server, you've been demoted and have been warned to cease this pattern of behavior. You can be re-promoted to regular if you have your temper and judgement in in check. - Sep 29 
I'd have thought the compiler would have noticed... 
Apparently not? It's running and he clearly has errors there so unless he changed the code while it was running, I have no idea what it's running
Username checks out
&gt; I honestly feel like you are trying to mess with me at this point. If you want any further comment regarding this, add me on discord and DM me. I'm actually trying to have a conversation about it but you seem to keep getting defensive over it, I'm not messing with you.
Whats the difference?
&gt; I'm actually trying to have a conversation This isnt a conversation for me. It´s too public, its too unpersonal. So far, i just feel like you are throwing random stuff at me. Thats why i suggested taking the step into DM.
If you are reading "extremely large CSV files" why would you load it all into memory then do the splits? Why not read each line with StreamReader.ReadLine (https://msdn.microsoft.com/en-us/library/system.io.streamreader.readline%28v=vs.110%29.aspx) and let it sort out the line endings?
they no longer do those trials 
Also to add, CSV handling isn't as straightforward as most people think. You'd be better off finding a library to handle all of these things for you, especially if you are handling very large files. Something like: https://www.codeproject.com/Articles/9258/A-Fast-CSV-Reader
do you still have a working trial account?
how good? what are in your opinion the pros and cons?
Thank you i'll look into it. it did seem straight forward to me as i have a script written already to perform the split and grabbing the header out of line 1 and everything that i need to do but the only issue was reading the lines. i'll have to look into that library you sent me and see if it helps.
Also just to note, i was putting it in memory because it was simple at the time and the way i knew how to do it. i don't really have memory constraints so it wasn't a problem.
What do you mean "suitability of oop"? C# is an object oriented language, you can't write C# without using object orientation. And it's not related to gui or other parts of your program, it's a much bigger concept. I think the term you are looking for is "framework". There are various C# frameworks dealing with GUI programming. WebForms, WPF and UWP. And if you are planning to target only Windows then C# and its GUI frameworks are the best choices, no competiton.
I'm familiar with this, but it has does not prevent HttpClient from being used for multiple requests. In my code, I basically focus on HttpMessage and reuse the same HttpClient object. This gives lots of control over the actual http request that is sent over the wire. In my application I make thousands of requests per second using the HttpClient.
as someone who never touched mvc before is this a good start?
best answer, op should use the build in passwordvalidator
Dot net core is very similar to how framework progressed it its early days. Framework till versions 2/3 was not fully “ready”. I feel as if the same thing is happening with dot net core 2.0. 2.0 has most of the things you really need for the most part. I was not ready to use 2.0 for project until this version. 
I mean, how suitable is it to use OOP when creating a program that has a GUI. I previously explained how suitable Event driven and procedural programming is when writing a GUI program but just got stuck on this one.
pros - real world do's and dont's, the examples that is being explained is programs that will be in production only on tutorial 2 so no cons yet
Yes, I was pointing to the thing most people point to when we talk about the lifetime of the HttpClient instance. I could have been clearer :)
I haven't seen this posted here before, and in my opinion it is the best .net dissasembler and debugger there is. There's so much you can do with it, and it's extremely useful for reverse engineering obfuscated assemblies because of how well it can handle them without crashing. The developer, 0x4d4, uses his own library dnlib for the reading/writing process which can be found here: https://github.com/0xd4d/dnlib
write large, complex projects. You will realize pretty soon where you lack knowledge, experience
So i made an attempt to implement this but the package you shared with me does not support multiple delimiters so i can't tell it to only delimit by \r\n. if the delimiter is set to only \r then some of my lines won't break up right. I am getting this information from a vendor so i can't control how it is delimited to edit the file itself.
i love the google hashcode contest, try the 2018 edition and see how you rank :) 
I think the camelCase private method naming would be more likely to cause the problem. lel
I don't agree. Binding the versions of VS to specific versions of the framework was unfortunate, but at least the framework and the tools were in sync. I think that .Core before 2.0 is like the betas of the .Net Framework, .Core 2.0 is more like the 1.0 of .Net. 
Odd question. For starters, you have to quantify "suitable." What does that entail? What are the criteria? Once you have those, you can make a determination whether OOP meets those requirements. IMO it's no different than any other application. Having a graphical UI... it's just that. It's an interface. The guts of how the program runs behind the UI still has to be there, and can run on OOP. User controls can follow class inheritance just the same as anything else. For example all user controls might have a background color, a width and a height. A subset of those dealing with text may have font properties. A further subset may have other features (e.g. a check box feature). Reading up on WPF and MVVM might be worthwhile.
Are the fields surrounded by "" (especially the text ones that may contain \r or \n by itself?) or are they further escaped somehow. Maybe show an example of the data you're working with? If a library won't read it, you may have to do it manually. In this case, I would possibly read the header line, keep track of how many fields, then use ReadLine() split that result on , and compare the number of fields, but that seems messy and error prone. If it's the case that line breaks and carriage returns inside your data fields is causing the issues, perhaps this might help: http://codeskaters.blogspot.ae/2015/11/c-easiest-csv-parser-built-in-net.html
With C# 7 you can just use local functions, which are easier to read and give you more power over Func delegate.
Look up other people's interview questions. It's going to be brutal but it's the best way to get exposed to what other people consider important skills for the job.
The synchronization context has nothing to do with being able to schedule continuation.