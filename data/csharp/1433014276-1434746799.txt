&gt; Console.WriteLine("{0} - {1) - {2}", myNewCar.Make, myNewCar.Model, myNewCar.Color); Read to documentation for WriteLine(). Something isn't right with the input.
You have a typo in your console.writeline template, one of your }'s is a ). Those templates are very picky, double check it and you'll be in business!
I just coppied `img` value and posted as link in the first post, so yeah, it does work, and it returns valid URI. I checked it once again. Here's the output: - img {http://anilinkz.tv/img/ser/fi/75.jpg} System.Uri 
What are you talking about? there's nothing wrong with this link to begin with.
Or maybe not... damn, now I'm confused
Thanks - I guess I made a typo and couldn't see it nestled in there
The link didn't load correctly because of the of the redirection queries defined by .htaccess file on anilinkz.tv. It automatically redirected the user to search page with no results, but that's fixed now.
There is nothing "micro" about RabbitMQ. 
What is missing?
- Index initializers are falsely called "dictionary initializer". Article fails to mention that this basically has nothing to do with dictionaries, but instead is using the indexer. - Extension `Add` methods are now recognized for collection initializers. - Improved overload resolution. - Await inside a catch and finally block. - Auto-property initializers. - Getter-only auto properties. - Parameterless constructors in structs. - using static to import static members of types into the scope. In other words: The author doesn't bother much about quality. 
Not at all!
Is that right? What ERP system is that?
Even with your edit to specify **Client side**, you're *still* talking out your ass. There are any number of ERP systems that perform some or even all of their processing via the client. One huge one in the manufacturing world is Sage (formerly the MAS family, now its branded something else). The middleware is a data access and reporting layer and various housekeeping services. Many of its modules are written in an occasionally-connected pattern. Hell, there are hundreds of examples of inventory and pricing systems in use literally everywhere that use those patterns, too. There is a whole world of business and industry that does not rely on people sitting around in sterile cubicles doing Salesforce data entry through a web browser on their Macbooks.
RabbitMQ makes it impossible to test the contracts between your services without having a fully integrated system running. 
Can someone ELI5 what the hell all this is?
&gt;So basically what you're talking about is caching and redundancy No, thats not what I said at all. What part of Data access layer confused you? Most main line business logic, some of it quite substantial and intensive and IO oriented, is done on the clients. You're grasping at straws to downplay that. Just do some more research before getting on the internet to promote your personal software design dogma. Just because its useful for many things (and it is) does not make it the "One True Way". 
How dare you bring facts into this!?! If you keep that up its going to sound like he does not know what the hell he is talking about. And dont you DARE bring up the fact that WPF is a wrapper for exactly the same API's (GDI+ and Direct2D) that Winforms uses. Don't even mention that shit buddy.
Did you even read the **documentation**? Looking at the documentation for `Square150x150Logo` it's clear that the image uri must be one of these: - ms-appx:/// - A path within the deployed app package. - ms-appdata:///local/ - A file found in the per-user app storage. But you are providing a link on the internet. Seriously. **Read the documentation.**
I've read a whole bunch of articles and listened to talks about micro services and I think message buses/queues is the most commonly mentioned way of communication. But often both HTTP and queues are used in the same ecosystem to handle different problems. See this article for example: https://blog.yourkarma.com/building-microservices-at-karma Either way, I definitely don't think the micro services concept is characterized by a certain type of communication tech. It has much more to do with the small size and being autonomous.
Didn't I? How could I know that they described this in Square150x150image, when it ***wasn't even mentioned*** in: * QUickstart: Secondary tiles * SecondaryTile Constructors * Questions Just posting the link would be enough...
I'm open. I am not sure.
That's patently false. You test that service A publishes a given contract when it is supposed to with the required data, and you test that service B consumes said contract and does what it is supposed to. Done.
"using static to import static members of types into the scope." my bad. "using static" construction is in C# 6.0
In a word: Yes. In more words: This not only provides decoupling, it also provides queues for the messages to take place. Service A publishes a message (be it a command or an event) and now as far as Service A is concerned, the task is done. Service B (or C, D, etc.) subscribes to that particular message (by whatever arbitrary routing is defined) and can process the message in its own time. It separates the routing of messages from the services, giving them less reason for change. A publisher doesn't need to know what, if any, subscribers exist. For queries (as in read only queries) a message bus isn't your typical transport. Yes, they support request/response models but they are really inefficient for it. In my own experience, the architecture of the system is typically event driven with components that need a read-model keeping their own datastore, *or* read-only endpoints with simplistic HTTP resource-y APIs and deployed. However both have a common pattern that very, very little is "pulled" and as much as possible is "pushed". The "Tell, don't ask" principle thing. In summary it means you have bounded contexts, and each (micro)service is an implementation of a context. Whenever something happens in your system, a message is published to represent that event, and if you need something to happen on the back of that event, you can develop and deploy a different service to do that. No impact on the first service.
Thanks for comments. I have updated "dictionary initializer" article. Not it's called Index initializer and have more examples and correct explanation. I will also add missing articles. Thanks again for your help.
you need to re-read my post. There may have been some edits after you wrote that. Particularly as you are using a read-only operation as an example that I explicitly point out is not used in messaging. Also you don't ever, ever separate by layer. Nobody creates a "database service" unless they want some serious pain. You separate by domain.
i tried Pro c# and .net and it really excellent book . it assume you know the basics.
Step 1: Figure out what you want to do
Yes I do, thanks.
How do you test that the contract that the consumer consumes doesn't change when there is no direct interaction with the provider?
By versioning your contracts.
I do plenty, thanks. Microservices were designed for "enterprise".
Plural. There are always more than one of them. One for sending emails, one for connecting to payment gateways, one for calculating something, another for calculating something else. Etc.
Wasn't parameterless constructors in structs dropped?
So you change the version number every time you slightly change your API. Sorry buddy , but it's clear you've never worked on an enterprise software before and have zero ideas on how to test a microservice architecture. 
Be sure to use Blend! Edit: while the VS IDE has come a long way since Expressions Blend first came out, Blend still have relevance today. For one, it's much nicer to work with animations and editing control templates 😃
i havn't seen many benchmarks comparing c# to javascript, but on my hardware, javascript (in chrome) is very comparable to c# in performance. I don't have the numbers in front of me but i recently did a comparison of json parsing of 1kb payloads using java, c#, and javascript. the fastest java library (boon) was about 2x as fast as the fastest c# library (jil), which was only slightly faster then parsing objects in chrome, which was about 100k a second. for comparision, json.net was about 40k/second. i can also make a comparison between the performance of a short program i had recently written in both javascript and c# to process all of the dialog from the book american psycho and find the most spoken phrases, which had runtimes of about 980ms and 750ms respectively. javascript http://pastebin.com/SWmzRRCX and c# http://pastebin.com/3VF2R3tr if anyone was wondering, mentions of 'the fisher account' was tied for 35th place with 7 
No, it doesn't.. I still have no idea what you mean by "open the controller"
You might want to pimp up the quality of your project. - *.suo* file added to repository. This is a **user specific** file. It does not belong to the repository. - *.user* file added to repository. Same deal with the *.suo* file. - *HtmlAgilityPack.dll** added to repository. This shouldn't be added to repository, as it is retrieved by NuGet. - No *packages.config*. Why don't you add the HtmlAgilityPack using NuGet? - *bin/* and *obj/* directories added to repository. Those are build artifacts. They do not belong to the repository. - *outdated/\** files added to repository. Just delete old code. That's what we have source control for. - Directory name with parenthesis. Just name it *logos*, really no need for the parenthesis. Some other points: - **Shitty** form names. Form1? Form2? Form3? What? Give them proper names, depending on what they do! - AESEncryption.cs, 22: **Very common** naming guidelines for C# parameter is **camelCase** (starts with lower case letter). It is unlikely you'll ever see high quality code that doesn't do this. - AESEncryption.cs, 34: You can keep multiple following using-blocks on the same level. Reduces indentation. - AESEncryption.cs, 52: **Don't re-throw like this!**. Remove the whole try-catch block, as you're not doing anything here anyway. If you want to keep it, just write `throw;` instead of `throw a;`. Also see here: http://stackoverflow.com/questions/178456/what-is-the-proper-way-to-re-throw-an-exception-in-c - AESEncryption.cs, 95: Don't have general clause catches like this here. Catch the exceptions that you expect could occur in the code, not just "all". This bad style. Ideally you should just have one general clause catch at the highest level of the program flow. - Form1.cs, 21: External DLL functions should be defined in their own file, not scattered across the program (especially the UI). - Form1.cs, 32: Why do you use the full qualified name? You have the namespace `System.Threading` already imported. - Form1.cs, 37: Why do you suddenly use `this.` here? Stick to one style, either use it always or use it never. - Form1.cs, 76: Paths to such resources should be wrapped in a special class with constants, instead of having them here. You could also write an extra class to return you a random logo. Also see here: http://en.wikipedia.org/wiki/Magic_string - Form1.cs, 107: This method is huge. Break it into smaller sub functions. - Form1.cs, 187: You're using resources that implement `IDisposable`, but they're not wrapped in a `using (..)` block. - Form2.cs, 248: Common naming pattern for local variables is **camelCase**. You do this in other locations already. Stick to one style. - You have no unit tests. Start now! Really, don't wait. Do it now! It will greatly benefit your career. It will help you write better code. - You're mixing UI and business logic. Better split them apart. - Now I got tired.
feel free to suggest a more representative benchmark. to clarify, yes i brought java into the mix. the json file used is https://github.com/RichardHightower/json-parsers-benchmark/blob/master/data/medium.json, 5 million objects were parsed, and then the average rate per second was calculated
wtf does this app even do???
Both comments here are what I came to do, critique and ask what this is supposed to do. Make it as clear as possible to others what you're doing, instead of making them ask you.
So, it screen scrapes from Supreme using HTMLAgilityPack. maybe it's meant to let you submit an order?
Well I've explained that its free and provided a link where you can download it, so why would you try to purchase it from amazon?
Just begin. Dont try to solve everything at once! Just break it down: Ask and save 5 names and ages Sort those values print out the middle ones
Nobody's expected to make a full 10/10 answer, the question is there just to see if people can put together anything at all, as they said. There are tons of people who arent even going to try because they have no clue what to do. I just wish to have /something/ to put there as an answer to even get a few extra points for my app. 
The best way to go about this is by coding some simple programs first, so you get an idea what is possible and how to approach the problem. Find a beginner tutorial and follow it trough until you know enough to find a solution by yourself. Don't take any shortcuts. 
Sorry for the lack of response - it wasn't that big of a problem honestly, because, as some suggested, I could just surround the problematic lines with try/catch blocks. Was just wondering whether there was a more visually appealing way to do it :)
Is there a specific reason why you don't use a hWnd? If you provide the `Form.Handle` of a dialog, you can override its `Form.WndProc()` and check for `WM_HOTKEY`messages similar to your pseudo code. You can also use a hidden form if you don't want to open any visible windows.
Stick with Mono when you're doing "monobehavior" scripts, write anything else in Visual Studio and copy it to your assets folder.
I am looking for the perfect editor too. One that will write whole programs for me. :0)
Visual Studio 2013 Community Edition is free and even supports plugins now. You get many of the same features Visual Studio 2013 Professional has, but for free. It even has tools for use with Unity. [Check it out.](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx)
A "hWnd" is a window handle, i.e. an internal identifier used by the OS. Each form (among other things) has one, which can be accessed via its [`Handle` property](https://msdn.microsoft.com/en-us/library/system.windows.forms.control.handle%28v=vs.110%29.aspx). Over*riding* methods is a pretty basic concept that you can probably look up yourself. The [MSDN article for WndProc](https://msdn.microsoft.com/en-us/library/system.windows.forms.message.msg%28v=vs.110%29.aspx) has example code. Its not targeted at hotkeys, though, so you don't need most of the code there. `WndProc` receives *all* window messages, so you need to check if the message you received is actually one you care about by looking at its `Message.Msg` property. You can find the value of [WM_HOTKEY in the MSDN](https://msdn.microsoft.com/en-us/library/windows/desktop/ms646279%28v=vs.85%29.aspx) as well. This is a pretty common thing, so if you just want to get it done I'm sure you can find finished code by googling "registerhotkey c#" or something.
Forgot the object creation, then linq order by.
If you are stuck in a non-windows enviornment, check out ["Visual Studio Code."](https://www.visualstudio.com/en-us/products/code-vs.aspx) It is a small footprint C# editor made by Microsoft for Linux, Mac and Windows.
I do have to question why you'd apply to a school with literally zero coding knowledge, but as for my good deed for the day, hopefully this will get you on the right track. My first professor (literally) was definitely a "figure it out for yourself" type of guy, but the problem was if you didn't know where to begin it was quite hard. (12 years later, I'm doing just fine). Im some pseudo steps: Determine if you want console/website/winform project. Define your object. You know you need a Name and Age property. Determine what you think the value types for those should be. Create your UI that accepts these parameters. Do some research on collections and how to add to them as well as order them. This might be a little advanced for someone with literally no coding experience, so also do some search into loops Hint: look at the age during each loop iteration. Display the median age in the UI. Thats all you'll get from me. Sorry bud, not doing the work for you, but unfortunately it sounds like you signed up for something you're not really ready for. EDIT: Being down voted because...? Don't mind it but shit, a least comment if you're gonna downvote. 
If you want to get VS to have similar feel to IntelliJ, install Jetbrain's ReSharper plugin.
Head First everything is amazing. While you're at it, pick up the Head First Design Patterns book. Please. For the love of God, learn Design Patterns while you learn how to write code. 
C# question is there just for extra points. I'm not applying to some sort of school where I'm expected to code stuff.
https://github.com/ButchersBoy/MaterialDesignInXamlToolkit 
http://stackoverflow.com/a/27309185/4153185 This is the StackOverflow answer I based my last usage of global hotkeys on, it works great. Just make sure to wrap the hotkey registration in a try/catch block and decide what to do if a hotkey is already registered (it'll throw if it is).
Okay, I'm now using the form's handle, but about overriding, I don't suppose it is enough to create a new subclass of Control and overriding the WndProc method? Wouldn't I have to register it somewhere too or something? First MSDN article link is broken so if it is in there I'm sorry :/
The words you are looking for are **thank you**.
No need to convince me :-) Seems more difficult to get into as well, since you can't just (resharper) "CTRL+Click" to get to the implementation. But I definitely see the advantages. As to the debugging, I am trying to find out (right now) why a message that is sent only once, arrives 5-6 times (random) at the consumer's end (I know that if an exception occurs, our consumer wrapper (MassTransit) will try again 5 times, but this is not the case). Not fun, not fun at all...
Typically all of the services are built separately, anyway. So they are in different solutions with their own build pipelines, release cycles, etc. Multiple messages: If you are using RabbitMQ with a node cluster, that could be because it promises "to deliver a message at least once". Rabbit will sometimes deliver the message more than once, for assuredness. They note that messages and their handlers should be idempotent because of this. 
Do you suggest using Visual Studio as Unity's editor extension? I've found it more difficult to try to debug with.
KSP is a great game, I'm impressed they managed to construct that in Unity.
Mono's editor works quite well as far as I can tell, I can't get real time, line by line, debugging of Unity to work in either, but then again I haven't dedicated that much time to trying it. Do you have any suggestions?
It's also not at all what he asked for.
cities: skylines was also made in unity - a level of magnitude more impressive, i would say :) (ksp is great too of course)
This is actually very helpful - thank you for this, it helps me to understand it better.
yes because at the time, I was coding this to be open source....which I wasn't. It is sad to say some of your comments are not needed as its just ignorance of a programmer rather than helpful information...but I do appreciate this. Honestly shitty forms names is a poor excuse, I rather stick to the default Form1, etc. It is funny how it probably doesn't make a difference if I do from this. to not using this.
have you tried this example? https://msdn.microsoft.com/en-us/magazine/dn532207.aspx
There are so many of them! I like www.dotnetperls.com.
That why I put old-school word in quotation marks 
ah, cool! Thanks! I'll definitely check that out.
awesome tip. thanks, mate.
Oh, I forgot that I'm stuck on a mac for now. bugger. I take it visual studio has no mac version, then?
Visual Studio has no mac version. Visual Studio Code (see above) is the closest you will be able to get.
What's the point of implementing JSON when you don't know the structure? If you know the structure of a JSON file, you can input the JSON file into this tool: https://jsonclassgenerator.codeplex.com/ It will automatically build the models (classes) for you that are ready to be used in JSON.Net deserialization. Example from their website: string json = @"{ 'Name': 'Bad Boys', 'ReleaseDate': '1995-4-7T00:00:00', 'Genres': [ 'Action', 'Comedy' ] }"; Movie m = JsonConvert.DeserializeObject&lt;Movie&gt;(json); string name = m.Name; Some example JSON is stored into json variable. You would input this JSON into JSON C# Class Generator, it would generate the Movie class for you that you would just have to add to your project and you are ready to go.
I've been going over to [r/dailyprogrammer](http://www.reddit.com/r/dailyprogrammer/)
Either use classes or use dynamic and use a JSON serializer. There are times when I feel that using dynamic is ok, but most of the time I rather see full classes be used.
Not really answering the question, just wanted to encourage your method of learning a new language. &gt;I realize this is probably not the best project to use to start programming This is not in the least true (unless your initial goal is web heavy javascript IO, or a 3D physics engine). The best way to start a new language is to start a project that you are interested and passionate in. Expect to make mistakes, expect to be embarrassed by your code in a years time (actually this happens to everyone, novice or professional), but also expect to learn way more from a targeted, self designed, project than 100 online 'practical' hello worlds and MVC data tutorials. Best luck. 
Thanks, yeah. All good points. I really appreciate your feedback. So, bear with me, because I'm very new to OOP... but you are speaking of something like this? -Rooms --Objects (for instance, computer) ---ObjectDescription ---Objectismovable (true or false, false in this case) ---Objectinteractions (can be used with keycard, for instance) ---Objectevents (what happens when you use the keycard with computer) and so on. for an object like a computer, I'd imagine I would like to have several things that it "does", like turn on, turn off, maybe log in to a security system, etc... I suppose this kind of object would need its own seperate code apart from something like "apple" which you could be limited to eating, dropping, throwing at something. Now this is where my brain starts to hurt. Yes the computer would be an "object" same as any other, but how to make this object have its own special little.... "room?" inside of a room... where you could interact with it in a way seperate from the room it is contained in. I know it's going to take a long time to become proficient with code, I can think of what I want to happen, in my head but translating it to code is another thing entirely. Especially when I spend all night experimenting with a new concept, feel like i'm on a roll, then find out hours later that I am implementing it entirely wrong. Oh well I guess it's the only way to learn. 
I'd suggest you start simpler. At the moment, your Room has about 7 different concepts associated with it that don't "do" anything. Start with one of those concepts, like ClosedDoors, and flesh out how the user interacts with it. For example, you're using a String for ClosedDoors at the moment. That's fine at the moment because you're not doing anything with them. As you allow interaction with the ClosedDoors, you'll find that you need more than a String. You'll need a class that can hold a description of the door, what room it connects to, whether or not it's locked, etc. If you continue with the current approach, you'll end up with a huge number of half-complete features. 
I know this is not what you want to hear, but I think you should go back and start with a few simple projects to get the hang of it.For example a calculator, a unit converting app, a recipe organizer, etc. It shouldn't take much, maybe two or three weeks depending on how many hours you spend. &gt; Maybe I am hitting above my weight here, but it seems to be there should be an easier way of seperating "Data" from "Program Code". Of course. Separating code and data is essential for any program you write. If you want to keep your sanity of course :) You need some sort of config file and a system to read those configs and "paint" the scenes of your game dynamically at runtime. This way once you have your system in place you just need to edit those config files to create new scenes. For config files you can use a lot of different formats such as XML, JSON, CSV, even simple text files with your own format. XML is good starting place and it's very simple to hand write. Also C# has very powerful libraries for reading and parsing XML. For navigating XML files you use something called Xpath. [Here is a little example](http://www.w3schools.com/xpath/xpath_syntax.asp). Edit: [Here is the documentation for using Xpath in C#](https://msdn.microsoft.com/en-us/library/d271ytdx.aspx)
There's already great advice on this thread - I just want to give you some encouragement and let you know that you're on the right track! keep it up!
&gt; It is sad to say some of your comments are not needed as its just ignorance of a programmer rather than helpful information... Like what? I think all are pretty good advices. &gt; Honestly shitty forms names is a poor excuse, I rather stick to the default Form1, etc. The point is to see right away what form is for what. Every form has a purpose, and this should be clear from the name. Else you (or a new developer joining the project) always have to look "What was Form1 doing again?" &gt; It is funny how it probably doesn't make a difference if I do from this. to not using this. Technically it doesn't make a difference. The point is to have a **consistent** formatting style.
I find the website design weird. Otherwise a very good resource.
Fantastic. I thought so, but just wanted confirmation. Thanks. 
No change in the runtime, but there can be changes in the .NET libraries. So .NET 4.6 may be needed, although not for this particular feature.
I'm not sure what you've written here makes any sense. I could be wrong and I may just not have enough caffeine in me. Are you looking for some way to arbitrary sort inputs to a class object and assemble them in a specified order for an output? Look into "IComparer" if that's what you're after...
Are you Jonathan Allen?
"Yes please." As useful as the idea is, there's no guarantee that they'll actually build it. (But damn, if they do I'd be using it all over the place.)
No.
Oh I probably pissed someone off. I've got a few fans that occasionally go through and down-vote everything I've posted. Or they're simply not interested in what C# 7 might be in a few years.
Classic 
Yeah, unfortunately I'm not sure I'd fit with you- I'm a games developer. I know a lot about performance, C#, and the CLR's workings, as well as P/Invoke and the general-purpose parts of .NET... Etc. etc. But not much to do with web or enterprise. Still, if you or InfoQ ever wanted details on anything like that, I might be interested in writing an occasional (not regular) article. There's a testament to my knowledge (kind of) [here](https://escapelizard.wordpress.com/2013/10/16/10-things-you-maybe-didnt-know-about-c/#more-25), but I wrote that a couple of years ago almost now, since then I've got a lot better, haha.
&gt; performance, C#, and the CLR's workings, P/Invoke and the general-purpose parts of .NET Those are all good topics for us. Just stay away from articles like "Best Practices for Joystick Integration" and you would be fine. We don't need everyone to talk about the lastest ORM or MVC framework. 
How about F#?
Lots of these features already exist in F# and are slowly but surely making their way into the C# world as well. Nice.
Thanks for your response. I currently use a iMac with bootcamp. I said pc world as that is one of the main places i usually look when I used to buy PC's before buying my mac. 
C# itself will compile. However, you might be using libraries (like **.NET**) which are not available on other platforms. Many parts of .NET got ported to Linux/Max with Mono, but it's not all.
I think your question is a little too vague. What is the algorithm actually supposed to do? That will help determine the data structures. I do a lot of AI work, and when I see words like "inputs" and "outputs", I jump to neural nets, because that's what I am often building. This may not apply at all to what you are doing, though. 
I just want non-nullable strings.
If you're going to work with SQL databases, I like TOAD from Quest. LINQPad is a cool tool; let's you quickly try out small code snippets. It's not just for LINQ. A good source control and some "diff" software (like WinMerge) but hopefully they already have that in place. For the computer, you can use Ars Technica's System Guide as a base. The "hot rod" configuration is usually the "most bang for the buck" you can get, or close to it. Since it's not for gaming you can use a cheaper video card (or even *gasp* on-board video if the motherboard has it). 
For on-job PC's I normally got a Dell with a 128/256GB SSD, i5 or greater with 8GB or more. If you are going to be doing database work locally, then you would want more Ram + HDD space. If you are mainly using a test environment server, the original specs should be good enough. For the love of god, if they give you XP, run, that probably means the company is way behind and you will have to do a bunch of tech work yourself or suffer.
Okay, thanks alot! :)
What is the definition of "best outcome"?
Unless you target 4.5 in the project.
And is not even released yet. It does not even has a release date.
Even if InfoQ wasn't interested in those details, I think they would be good topics for people to know in general. You should post more on your blog and/or here. 
You need [Resharper](https://www.jetbrains.com/resharper/).
&gt;expect to be embarrassed by your code in a years time (actually this happens to everyone, novice or professional) This only happens to people who are learning &amp; improving. I work with a number of individuals who aren't embarrassed by their old code at all. I try to avoid having those guys on my team. I had an experience in 2014 where i dug through layers of my old code like an archaeologist- from 2008 to 2013. The code from 2013 made me cringe a lot less than the code from 2008. I didn't need to review the logs to know how old any given block was. tl;dr: Your old code embarrassing you means you're doing better.
How is the output determined? That is necessary information for us to help you here.
Ugh, thanks. (I wish I could hire a copy editor, but that would require doubling the number of advertisements.)
I think .NET Core will be released after Half-Life 3, but before Fallout 4.
No, they don't work together. If for some reason you're developing WiMo 6.5, you're stuck with VS 2008, along with the supported C#, tooling and all, no ifs no buts. It's my previous job, and it's PAINFUL to do something you know to be ridiculously simple in newer C# yet requiring a lot of code in VS 2008. If you're developing apps, having access to several devices from different vendor is a must. Each vendor have different library for barcode (thank goodness at least GPS &amp; camera are standardized), and there are stupid quirks all the way (Casio are picky, Motorola are usually the most stable). Feel free to PM me if you have specific question 
If I weren't such a wet behind the ears developer, I'd offer to type some articles up here and there. Sadly, though, I am but a young lad with a full time job that keeps me busy. One day...
I don't know when this feeling of confusion goes away myself, maybe a year or two into your first job? I started playing around with coding years ago, but never really understood it (I was young and naive). Fast forward still get confused after 1 year of formal education and months of self taught development. I always refer to IT/Software Dev with the analogy opening 1 door leads to 10 more doors and each of those least to another 10 doors, there's so much to learn! Look at a few outlines of college classes and their Syllabus to get an idea of what is covered. Find examples of those kinda of problems and solve them. Learn from books as well, then code a project based on those examples or better yet a book that gives your code challenges throughout the content. I still know I have a lot of work as well but I have begun trying to find jobs that might be willing to accept my current skill set and help develop along the way. Good luck and keep coding!
I thought `params IEnumerable` was removed for C# 6? It doesn't seem to work in the VS2015 RC.
Indeed.
For me, it was one year. I didn't go to college or anything, and had close to zero coding knowledge when I decided to learn. Thirteen months later, I was employed as an entry level Jr. Developer making 50k. I stayed on that job for about a year, and then got a regular developer job making about 50% more than that. I went though Head First C# (I cannot recommend that book enough), and then a couple other "Lean C#" books during my first six months or so. After I was done with that, I found myself unsure of what to do next as well. That's when I went to the local Hackerspace. Most decent cities have them now (also sometimes called Makerspaces). They're just basically clubs for programming or hardware geeks. There I met another programmer who was only a couple years ahead of me working an entry level job. We worked together on an open source project of his, and I learned a lot of "best practices" from him. It also gave me actual code I could show to potential employers. And the rest was history.
I'd love to be able to hire a QA guy with some C# chops. We actually have a job opening for a Junior C# Dev / QA guy if OP is in the Atlanta area
Particularly for web site development, actually build a web site. Azure offers free hosting for web sites and even ones with your own domain only run ~$10 a month. Put together a personal website. Use different technologies for different sections. Host multiple sites and build one in MVC and one in Web Forms. Build a site thats just HTML 5 and a javascript framework. And iterate on things. As you learn more about how to code and best practices, redo parts of the site to reflect that. Unit test it. You can use something like this to build a portfolio and you can just send a potential employer the link to it. If a candidate came in with something similar to this that they can show off that immediately puts them at the top of the list.
HL3
I'm not sure about in C#, but you could do the same thing that Java's MD5 class or whatever does. Have an instance of the class containing the algorithm with an Update(Object data) method or similar, that increases an int to keep track of the number of inputs plus does maths.
You're proficient enough when you can do it successfully. Until then, you work on it. What I mean is, confidence comes from successful practice. It's unlikely to come from reading all the books or article. Even if you *do* manage to convince yourself that you understand the subject from reading about it, *actually trying to do it* will probably humble you, at least for a while. So, the best thing you can do to feel good about your code is write code. Work on stuff that uses the skills you want to feel good at, but work on code. Find excuses to use code to solve problems in your day-to-day life. Write an app to manage your MP3 collection or something: use MVC and JavaScript to implement it. By all means, read about C# and MVC and JavaScript and programming in general: you'll pick up a lot of stuff that will be useful, even important, background material about why things are the way they are. But, if you're not writing code--if you're not creating programs, you're reading a map without actually taking the trip.
It's a solid path. Not to mention you get to learn the different development methodologies that are tight with QA. You get to learn development environments and source control. Learn all about various systems used within development teams to communicate, report bugs, design features, documentation, etc.. All the things newbies don't have which make them lose confidence in the skills they do have.
I am almost two years into my studies now and I am looking to graduate in two years with a B.Eng. degree in IT. I had no experience in programming before starting my studies, but I've really loved programming and C# ever since I started. Obviously, I want to get as good at it as I possibly can. I have actually done really well in my studies. But of course, I am always worried that I might not be good enough when I graduate to land a job. And even if I can get a job, will I be any good at it? Really great to hear your story about learning C# by yourself and getting a job like that. Builds confidence in myself as well. Thank you for mentioning the name of that book (Head First C#), I think I'll now have to find a copy for myself! Thanks for your input!
&gt; And if those objects we’re created at the same time, they may be scattered far enough that even more cache lines are needed What's worse is that the GC might move memory around in an attempt to defragment the heap. This makes caching much less reliable because what could fit into a cache line might now be moved too far apart. The runtime does it's best to optimize for cache hits, but ultimately it's not guaranteed to work in your favor. I've seen a lot of programmers scratch their heads over how to better control cache hits, especially in scenarios where everything is a reference to some uncontrollable location in the heap. I am glad that they are giving more finite control over memory to those who need it. A lot of game developers have jumped over to C# and things like this will make C# an even more appealing language for performance critical software.
Start interviewing for entry level jobs but don't get upset if you get turned down. Just keep the self study and persisting in interviews. I learned more in my first year on the job than my 4 years in university (and i learned a lot in university. It was great). 7 years in as a professional software developer and I'm still learning and trying to get better. The more I learn the more I realize I don't know. Its tough but fun.
Op is referring to having the .cs file open in VS.
That is an encouraging way of looking at it, but I strongly believe, however, no matter how long you've been coding (in my case, over 30 years - 15 of those professionally) you should be constantly improving. Secondly, however, and this points to a possible failing of mine, when I am deep in a project, trying (and usually succeeding) in maintaining good practices (insert array of buzz words here), I am usually in a continual flow state, and everything I write is "literally the best thing I have ever done", as "readable as a simple book" and totally maintainable and I have to evangelise it to all my poor workmates. A year later, I crack it open to add something or fix a weird edge case, and, to my horror, understanding isn't leaping into my consciousness instantly like I've performed a Vulcan mind meld on the IDE, and I have to spend (insert a time span longer than relatively instantly) trying to work out what the hell I was doing. It usually (not always) is written well, though with a few more rough edges than I remembered, and I don't (usually) have an irresistible urge to refactor, which is good. I guess the embarrassment these days is more the recollection of the passion and love that I had for my creation, that had transcended simple code and morphed into an artistic statement of pure logical beauty, and the realisation that, in the cold harsh light of a new day, that it was just a grubby old code base, and would not be my key to entering coders Valhalla. TL;DR; I take myself too seriously when coding, and revisiting an old code base is a healthy cold shower
Love Dapper. The only extension I use is Dapper Contrib.
Ideally I'd like to stick to extensions that are pretty mainstream and will be around a year or two or now. I don't need to do anything terribly fancy, but I'd like the basics including insert/update/delete, and would also like to be able if its possible to do things like: - select a filtered list of orders, and navigate the interrelated objects (for each order, access order.Customer.Address) - select a list of customers and navigate their orders (select list of customers, for each customer, for each order, access order items) And then perform deletions, updates, etc etc on those. Do you know if Dapper + Dapper Contrib supports that sort of scenario?
What are you trying to accomplish? Prevent USB devices from being used? Remotely turn a USB device on/off by disabling/enabling the port? You can disable USB devices via Group Policy (local GPO or at the domain level), if that's your goal. 
Honest question: Right now, without using google, can you do the following? Write a program that will print all the integers from 1 to 100, one per line. If a number is divisible by 3, do not print the number, instead print the word "Fizz" If a number is divisible by 5, do not print the number, instead print "Buzz"
I was thinking Neural Nets too, but you'd have to find some way of representing "time delayed" inputs, since OP says the output depends on the order.
Dapper.Contrib only rounds out the CRUD operations to base Dapper. Base Dapper does SELECTs and Contrib adds INSERT, UPDATE, and DELETE functionality. Which, TBH, you could have done in base Dapper anyway, but it's much easier with the additions. So ... navigating related objects ... Dapper isn't good at that and was never intended to be used for that. You'd want something like a full ORM for something like that. I will point out however, that a lot of what you're asking for can be done in SQL with joins. Change your data entity object to include that related info as properties, then use Dapper with it's Query functionality, or call a stored procedure to give you the data in the columns that match your data entity. So instead of separate Customer and Address objects, have a CustomerAddress object. I would think this is the preferred way to do this, as you're utilizing the strengths of each platform - SQL and the database engine to do filtering and joining on some criteria, and Dapper to eliminate the tedious column-to-object mapping.
Thanks a lot for the help and encouragement guys. I haven't made any major changes tonight but I did have one breakthrough. I managed to figure out a way to verify if what is being entered at the user's prompt is a valid action or not, by doing this: https://gist.github.com/anonymous/01ce1ff8150f3037be1c Google was my friend here but I'm not ashamed of copying code off random tutorials and sites one bit, as long as I can understand what is going on. I had to refer to examples a few times constructing the if statements bit overall I think I learned something tonight so I'm happy.
I've read this a few times and I'm honestly not exactly sure what you want the output to be. There are multiple different ways to get the info from the string (I'd probably use Regex, but if you're keeping it basic, String.Split is probably the way to go), but I don't know exactly what formatting you're looking for on the output. I can say this, though. The following code will produce a string array where index 0 is the name, index 1 is the phone number, and index 2 is the RTC. string test = "Name: John, Phone Number: 1234567890 RTC = 2014-04-01 16:27:32"; string[] delimiters = new string[] { "Name: ", ", Phone Number: ", " RTC = " }; string[] split = test.Split(delimiters, StringSplitOptions.RemoveEmptyEntries); That being said, if you have a choice in how the data is laid out in the file, I'd definitely take kesawulf's advice and store it in such a way that it's easier for the computer to digest, either separated by commas or newlines or something.
Damn. Not OP, but if only I lived near Atlanta and not AZ. :(
Thanks for finding the time to help me with this. I haven't updated this post but we have found a way to do it. What we did was we just found a way to get the itemIndex of each repeaterItem corresponding to the itemIndex of the new nested repeater we made. //Get ItemIndex of Plant and SalesOffice both parent repeater var hfPlantIndex = Convert.ToInt32((e.Item.FindControl("hfPlantIndex") as HiddenField).Value); var hfSOIndex = Convert.ToInt32((e.Item.FindControl("hfSOIndex") as HiddenField).Value); lblSKU.Text = sku.Item_Name; //Use the acquired ItemIndex to find the corresponding Plant and SalesOffice //from the other repeater var rptSo = ((RptSKUFin.Items[hfPlantIndex].FindControl("RptPlantFin") as Repeater) .Items[hfPlantIndex].FindControl("RptSOFin") as Repeater); TextBox txtMCFrom_SO = rptSo.Items[hfSOIndex].FindControl("txtMCFrom_SO") as TextBox; TextBox txtMCvsCurrent_SO = rptSo.Items[hfSOIndex].FindControl("txtMCvsCurrent_SO") as TextBox; TextBox txtMCvsAop_SO = rptSo.Items[hfSOIndex].FindControl("txtMCvsAop_SO") as TextBox; //Update corresponding textbox here txtMCFrom_SO.Text = "Shit"; txtMCvsCurrent_SO.Text = "Shit"; txtMCvsAop_SO.Text = "Shit";`
Even after using MVVM for awhile, I still get occasionally annoyed at the hoops it creates by itself (lots of passing arguments around, view models not having direct access to controls), but when you have a complicated control that does fit into the pattern well - it's quite beautiful 
Does this apply if the textbox is inside a third level repeater? If so, could I use a simple updatepanel to make this work?
Resharper. End.
Resharper, NCrunch, MvvmLight.
Yes, its called Immediate window where you can evaluate expressions and dump an object to console. I used to write macros to automate lot of repetitive tasks, but unfortunately its no more supported in VS2013 and onwards. I heard there's some extension which works similar to macros but haven't tried it. Other good extensions are: AnkhSVN, CLIArgsMadeEasy, NUnit Test Adapter
With LINQ: void Main() { long[] no = new long[] { -3, -2, -8, 7, 4, 9, }; long sumNeg = no.Where(x =&gt; x &lt; 0).Sum(); long sumPos = no.Where(x =&gt; x &gt; 0).Sum(); Console.WriteLine("Negative: {0} Positive: {1}", sumNeg, sumPos); Console.ReadLine(); } 
like this?
Resharper. And a source code control plugin. Commt, diff, .. right from VS is a big plus.
Nope. Are you sure you have an empty line (not indented) before the code? Is every code line indented by 4 spaces?
There are still a few things to iron out - but you can create issues and pull requests on the project site! https://github.com/jakkaj/HeatMargin 
Shameless self promotion, but I made a little free Visual Studio extension called Heat Margin. https://visualstudiogallery.msdn.microsoft.com/66a4194a-4271-493f-8d87-91052d7db09d VS has the green and yellow markers to show you where you've been editing but they don't tell you *when* you edited that part. As you edit lines indicators are added in the scroll bar and next to the line numbers. As you edit more lines, the older markers begin to fade allowing you to quickly see your activity over time. Comments, issues and pull requests welcome on the GitHub project too https://github.com/jakkaj/HeatMargin. P.S. Agree - Resharper is invaluable!
You're very right. I've been using c#6 to target WebAPI code on prod Azure, which doesn't yet support 4.6 stuff. 
Here are a few keyboard shortcuts that I learned about only within the last year that I now use very often. I especially find myself turning to them when I've got a good tempo going, especially doing TDD. * The **CTRL+R** commands for refactoring. * **ALT+SHIFT+F10** for simple code generation prompts, e.g. "using" statements for unresolved types, new properties and methods, etc. Often followed by an F12. * **&lt;snippet&gt;+TAB+TAB** when I'm not ALT+SHIFT+F10ing *Via negativa* aside: I've been working without Resharper for six months, and the only thing I miss is being able to view/navigate to interface implementations. VS handles the rest of what I need quite well.
I've been waiting for about a week for my resharper license to come in. I started the job just about a month and a week ago. 1 month on the trial, and now wait. 
Yeah. Debugging session is great for writing code unless we are introducing new methods, define delegates or write lambda expressions!
ConzoleZ with powershell with Posh-git + PSReadLine for git workflow. The best source control tool you could have.
"Break" should leave the (for int i = 1; i &lt; 10...) loop early when 'i' reaches seven. That's what it does for me. You have "Console.WriteLine(i.ToString())" commented out with slashes so that line isn't doing anything in which case you're not going to notice the difference between breaking and not breaking.
Here's the result of your program when I run it *without break*: 1 2 3 4 5 6 7 Found seven! 8 9 0 1 2 3 4 5 6 7 8 9 10 11 Here's the result with break: 1 2 3 4 5 6 7 Found seven! 0 1 2 3 4 5 6 7 8 9 10 11 Notice the 8 and 9 following "Found Seven" are missing in the second one because "break" tells the loop to terminate early.
Oh, I see what your confusion is with "ToString()" is now... When you call "Console.Write(object obj)" If you don't use .ToString(), the "Write" method automatically does that for you. So, any object you pass in will have "ToString()" called on it. For example, try creating a "Random" object. Random rnd = new Random(); Then pass that into the console without ToString(): Console.Write(rnd); Because Console has no special method for a "Random" type object, it just calls the base "ToString()" function which exists on absolutely every object in C#. There isn't a single object in C# that does not have "ToString()" - therefore, when "Console.WriteLine(object obj)" doesn't know what kind of object it's getting, it will automatically just call ".ToString()" on it itself which is why it makes no difference if you call "ToString()" when passing to the console. However, it does make a difference at other points. Say you want to assign the object to a string: int MyInt = 5; string a = MyInt.ToString(); // valid, will assign the string "5" to "a" string a = MyInt; //invalid - will throw a compiler error as "MyInt" is type "Int32" and "a" is type "String"
I've had some issues with this as well. My problem was that I was running VS as admin but my mouse utility was running as a normal user. If you have a logitech it may be the same issue.
A more technical explanation involves understanding the inheritance of classes. Every class you declare in C# will *automatically* inherit from a base class called "object." This class has four methods: public virtual string ToString(); public virtual int GetHashCode(); public virtual bool Equals(object obj); public virtual Type GetType(); When you declare a new class, like: public class MyClass { } It is like writing this: public class MyClass : Object { } Everything that is already in the "Object" class is automatically added to your class. This includes the "ToString()" method. If you don't override "ToString()", the normal behavior is a method like this: public virtual string ToString() { return this.GetType().Name; } Which will return the name of the *Type* of the *object.* With classes like Int32, however, there is an *override* method in the class for "ToString()" which would look something like this: public class Int32 //pseudocode, Int32 is a struct, not a class { public override string ToString() { return MyInt.Value.Name; //this is pseudocode, but you should be able to understand that it is translating the value of int to a string and passing it back. } } The presence of the *override* allows you to create a new behavior for the method found in the base class "Object"
VsVim (or ViEmu if you're wealthy) and ReSharper.
Ctrl+E, C/U - comment/uncomment Reflection, Debugging
Once VS2015 comes along you'll be able to do all of this stuff in edit and continue. http://blogs.msdn.com/b/visualstudioalm/archive/2015/02/23/enc-improvements-for-net-debugging-in-visual-studio-2015.aspx http://blogs.msdn.com/b/visualstudioalm/archive/2015/04/29/net-enc-support-for-lambdas-and-other-improvements-in-visual-studio-2015.aspx 
Ok, great, I understand now. Thank you so much for you time. I appreciate it so much 
Thank you very much. I know that what you are saying is true. But as of right now, what you are suggesting is currently impossible to do, at least I think that way. The page we modified was not ours but someone already made. I really really really wanted to try what you are suggesting, but I don't have the authority to do so. I will try to apply the other things you have said. I really appreciate your concern.
&gt; I need a break Heh.
I think base Dapper can do interrelations: http://www.tritac.com/bp-24-dapper-net-by-example 
Copious amounts of coffee and a hefty mallet. 
1) Resharper. Seriously the best (also, checkout the templates!) 2) Indent Guidelines 3) Highlight occurrences of the same word 4) Visual Studio color theme editor 5) Web essentials 6) Devart's Code Compare 7) Go To Definition (with F12 or ctrl+M1) 8) Colored tabs (to identify files by each different project) 9) Ctrl+Alt+q: Opens the QuickWatch. 10) Ctrl+shift+b: builds solution. 11) I don't know if you guys knew this but while holding ctrl+shift and move the cursor with the arrow keys, you make some sort of multi-line cursor, which would be useful to write the same in each line where the cursor is... There are a couple more that I've to remember...
Regarding your 11), you can also hold down Alt and select multiple lines with your mouse. I find it very efficient.
This is pretty cool, and I now feel silly for having never noticed the green/yellow bars.
Well, ArchangelleTheRapist has successfully blown the mind of everyone in my office including myself. That explanation makes perfect sense and is extremely intuitive. Thank you for that!
I can see that they were posing the question to see the candidate's problem solving skills at work (i.e. solve a problem you likely haven't had to solve). However being forced to solve such a problem without referencing any technical documentation is rather silly.
I didn't know that was coming. Sweet!
I don't think any reasonable employer expects new hires, *especially* new graduates, to be immediately useful. There's almost always going to be some onboarding and training time. So, don't worry about it. Of course, it is infinitely better for you if you work on personal and/or open source projects while in school, to get real-world development experience.
yep 2015 is awesome in this area... cant wait
mentioned this in my post, but if you haven't used it yet the Open Command Line extension is a god send if you have a workflow like that from VS - https://visualstudiogallery.msdn.microsoft.com/4e84e2cf-2d6b-472a-b1e2-b84932511379
&gt; but I haven't even installed VSC yet. It's an extension for **Visual Studio**, not Visual Studio Code.
Not a VS trick or plugin, but a useful standalone tool ― [LinqPad](https://www.linqpad.net) is awesome for testing out quick little functions that you've written to make sure they behave properly. Also good if you've inherited someone else's code and they decided to get clever with some of their stuff. Copy/paste, give it some inputs, and see what it's doing. No need to write up and compile a separate test app for small functions any more.
Gotta be NCrunch that's the main one for me. The productivity gains are massive.
What does your system look like? I haven't had any experience with R# grinding my stuff to a halt... and my jank ass business box isn't that great. (VS 2013 and R# 8 something?)
The way child collections are done is quite ugly though: public class Shop { public int? Id {get;set;} public string Name {get;set;} public string Url {get;set;} public IList&lt;Account&gt; Accounts {get;set;} } public class Account { public int? Id {get;set;} public string Name {get;set;} public string Address {get;set;} public string Country {get;set;} public int ShopId {get;set;} } var lookup = new Dictionary&lt;int, Shop&gt;() conn.Query&lt;Shop, Account, Shop&gt;(@" SELECT s.*, a.* FROM Shop s INNER JOIN Account a ON s.ShopId = a.ShopId ", (s, a) =&gt; { Shop shop; if (!lookup.TryGetValue(s.Id, out shop)) { lookup.Add(s.Id, shop = s); } if (shop.Accounts == null) shop.Accounts = new List&lt;Account&gt;(); shop.Accounts.Add(a); return shop; }, ).AsQueryable(); 
Pretty cool extension! Not sure if this is just my computer or not, but when I tried to install via the Extension Manager, it told me that Heat Margin required a version of .NET that I don't have (I do have 3.5 installed). When I downloaded and installed the .vsix manually, it did work. Just a heads up!
This was a recap of a talk during PyCon but I think it's a good read for people who are already in the industry as well as those looking to get in: https://lwn.net/Articles/641779/ That said, don't feel discouraged as a beginner. There is a lot of truth in the link above. After you've been a programmer for a few years you'll realize that the vast majority of programmers don't know what the hell they're doing.
http://lmgtfy.com/?q=Steamsdk
~~Mod operator: ~~ ~~int c = a % b;~~ Had this wrong - mod returns the remainder, not the whole number of times it goes into that. 
["You can sign in to the right with your Steam account to get preliminary access to the Steamworks SDK and documentation (after accepting the Steamworks SDK Access Agreement)."](https://partner.steamgames.com/) Presumably the SDK license prevents them from distributing it with their source.
Ah! Thank you.
Resharper, ncrunch and productivity power tools (https://visualstudiogallery.msdn.microsoft.com/dbcb8670-889e-4a54-a226-a48a15e4cace?SRC=Home)
Think about what its doing. Dice_Value = 60; P1X = pictureBox1.Location.X; P1X = Dice_Value+60; P1X is getting set to 120 each time. You need to do Dice_Value = 60; pictureBox1.Location = new Point(pictureBox1.Location.X + Dice_Value, pictureBox1.Location.Y); 
The generalized version of what /u/ArchangelleTheRapist wrote is called Booth Encoding: http://en.wikipedia.org/wiki/Booth%27s_multiplication_algorithm 
'Where' is just a pretty way to write a foreach loop. What actually happens you use : long sumNeg = no.Where(x =&gt; x &lt; 0).Sum(); Is somthing like this: long sum = 0; foreach(long x in no) { if(x &lt; 0) { sum += x; } } return sum; // returned into sumNeg above The meaning of this is that Where can work on anything iterate-able - include Multidemensional arrays. Although I'd recommend mastering foreach before using the more complicated LINQ methods (like Where,Select,Sum). It is an important part of the language and LINQ isn't always an equivalent alternative.
Ok I understand what you're saying. I've entered it and the picture box is moving but it only moves 60 pixels along the X axis now. I am thinking this is something to do with Dice_Value being set at 60? 
LINQPad is a life saver 
This was a pretty good post, I guess.
upvote for Productivity Power Tools, I use it almost exclusively for the scroll bar code visualizer its the best thing I could find like the old RockScroll extension http://www.hanselman.com/blog/IntroducingRockScroll.aspx
Please feel free to critique: static void Main(string[] args) { for (int i = 1; i &lt; 101; i++) { if ((i % 3) == 0) { if ((i % 5) == 0) { Console.WriteLine("Fizz, Buzz"); continue; } Console.WriteLine("Fizz"); continue; } if ((i % 5) == 0) { Console.WriteLine("Buzz"); continue; } else Console.WriteLine(i); } Console.ReadLine(); } Is there a better way to do it? Are there readability issues with my formatting?
What do you mean immediate window not supported? I use VS2013 and its very much there. I cant imagine they would ever get rid of that.
Ah sweet - thanks for the heads up. I'm keeping track of (a few now!) issues on the GitHub project to fix when time allows... https://github.com/jakkaj/HeatMargin/issues 
It's also become my goto tool for tweaking database row entries: var user = Users.Where(u =&gt; u.Id == whatever).Single(); user.Permissions = row.Permissions &amp; ~0x080; SubmitChanges(); Users.Dump();
-2 would work generically, the issue is that while i figured in the fact that we'd only break out once the product was greater then the target, (hence the -1) the for loop would increment iterCount one additional time before the check was done.
Wow, something ain't right with your box. Or you have an unreasonable monster of a project... but even our largest (10 or 12 projects in a single solution) doesn't even slow down. (12 GB i5, rust powered disk...)
On top of that, my control and caps lock keys are swapped. Always entertaining.
&gt;Is there a better way to do it? Hundreds. No one cares. This is a basic test that roughly half the people I interview fail at. Half the failures are certainly due to the stress of the moment, but a lot of them can't complete it. At. All. A lot of the times its because they don't know the syntax of a "for loop". I don't much care if someone doesn't know Console.WriteLine- we never use that kind of thing in production code, but if someone has to google the for loop, they'd better not pretend to be anything but very junior. How long did it take you? Could you explain what every line does and why it does it? (don't bother to actually explain it to me) Those continues bother me (No, i'm not going to give a reason. Pretend we're in the interview and I asked that. Senior devs often have rules that juniors don't understand.). Can you write it without them?
Took me roughly 2 minutes. Yes, I can explain it. If the continues bother you, then I'm guessing a switch wouldn't be your answer either. I thought about doing an if / else if / else structure, and maybe that's the right answer. I liked the nesting because I'm all for skipping irrelevant conditional code, but I don't know how to do that without the continue statements. Could you share your insight?
Your comment should not have been downvoted. I love LINQ, but the foreach/if-else is about **20 times faster**, as it goes through the array only once.
Resharper then ctrl+shift T, and crt+T. Use it like 100 times a day. 
Here's a different approach... static void Main(string[] args) { var fizzbuzzLookup = new Dictionary&lt;int, string&gt;(); for (var i = 0; i &lt; 15; i++) { if (i % 15 == 0) // same thing as i%3==0 &amp;&amp; i%5==0 { fizzbuzzLookup.Add(i, "Fizz Buzz"); } else if (i % 3 == 0) { fizzbuzzLookup.Add(i, "Fizz"); } else if (i % 5 == 0) { fizzbuzzLookup.Add(i, "Buzz"); } } //could we have used that construct for the whole thing? absolutely. But a lookup is more faster than a 3 ifs. //in an interview, I'd just do the top contruct, until I was asked to fasterize it. var results = new StringBuilder(); // stringbuilders! always bring them out in an interview if you can. for (var i = 1; i &lt;= 100; i++) // should probably break this out into a function accepting the limits and returning the stringbuilder. { var mod = i % 15; if (fizzbuzzLookup.ContainsKey(mod)) { results.AppendLine(fizzbuzzLookup[mod]); } else { results.AppendLine(i.ToString()); } } Console.Write(results); // a single IO operation. IO is just about the slowest thing ever, so doing as much in memory and then writing it is good. Console.ReadLine(); }
 private void pictureBox1_Click(object sender, EventArgs e) { if (Rolls == 10) { // Dice_Value = 60; This is not necessary, leave Dice_Value alone... P1X = pictureBox1.Location.X; P1Y = pictureBox1.Location.Y; P1X += (Dice_Value * 60); // We need to add to it's current location. // Also we need to multiply Dice_Value * 60 pictureBox1.Location = new Point(P1X, P1Y); } }
I have a similar size codebase and can run RS 9.1 on VS 2013 under Win 8.1 on my MacBook Pro using VMWare Fusion with no problem (SSD is key, but that's more of a Fusion thing).
**Tools** * [WinDbg](https://msdn.microsoft.com/en-us/windows/hardware/hh852365) - I can't get VS to look at a dump half the time, and it doesn't handle native/managed interop very well. And of course, there is [SOSEX](http://www.stevestechspot.com/), a lovely extension that is .NET aware. * [DotPeek](https://www.jetbrains.com/decompiler/) - It lets me pull apart DLLs and is very useful for looking at things like resources, confirming conditional compilation flags, and so forth * [ORCA](https://msdn.microsoft.com/en-us/library/aa370557%28v=vs.85%29.aspx) - It lets me pull apart MSIs and MSPs to exactly verify the contents. * [Productivity Power Tools 2013](https://visualstudiogallery.msdn.microsoft.com/dbcb8670-889e-4a54-a226-a48a15e4cace) - It does a lot of awesome subtle things like open the MSDN page using the peek window, highlight compilation errors in the solution view, auto-format and remove/sort usings on save, double-click to maximize, highlighting blocks in the scroll bar, highlight occurrences of the cursor's symbol in the scroll bar, and more * [Spell Checker](https://visualstudiogallery.msdn.microsoft.com/a23de100-31a1-405c-b4b7-d6be40c3dfff) - Cause I can't spell **Tricks** * Intellitrace - This tells you *everything* that happened in the run. Your ASP.NET page silently throwing an exception on every load because there is no favicon? This will show that. How many times is this method called? It tells you than AND the method stacks leading up to it. What reg keys are accessed? Here, have ALL of them. It gives you an obscene amount of data. You just need to disable edit-and-continue (which is fine by me). * Implement [DebuggerDisplay](https://msdn.microsoft.com/en-us/library/system.diagnostics.debuggerdisplayattribute%28v=vs.110%29.aspx) everywhere. It makes viewing your data in a debugger so much nicer. * Keep static methods around that are only meant for use in an Immediate Window - Lambdas and loops are not allowed (directly) in an Immediate Window, but you can call any method you want. So having a static helper class that consists solely of methods that are useful for debugging is amazingly useful. You'll eventually build up a solid library of them and it will help you immensely.
Thank you so much!
I am currently using VS 2015 RC and I for the life of me could not find power tools.
Yes!!! So helpful, forgot to mention this one
First, understand that n &gt;&gt; 3 is the same as dividing n by 8 then rounding down to the nearest integer. Similarly, n &lt;&lt; 3 is the same as multiplying n by 8. Let's say that n = 15. Dividing that by 8 results in 1.875, then removing the decimal places results in 1. You get the same result with bit shifting: 15 in binary is 1111. Shifting it down three bits (15 &gt;&gt; 3) results in 1. Using bit shifting to multiply &amp; divide only works with certain numbers: powers of 2, such as 2, 4, 8, 16, etc. With that in mind, look at this part of the code: prod = (iterCount &lt;&lt; 3) - iterCount; That’s the same as saying: prod = (iterCount * 8) - iterCount; And that's the same as saying: prod = iterCount * 7; It takes advantage of this mathematical trick: (n * 7) is equal to (n * 8) - n. So here, very simply, is what that equation is doing: 1. Divide 15 by 8 (then round down) = 1 1. Multiply 1 by 7 = (1 * 8) - 1 = 7 1. Is 7 less than 15? Yes. 1. Multiply 2 by 7 = (2 * 8) - 2 = 14. 1. Is 14 less than 15? Yes. 1. Multiply 3 by 7 = (3 * 8) - 3 = 21. 1. Is 21 less than 15? No. (done looping) 1. Subtract 1 from 3: 2 And there’s the answer: 7 goes into 15 two times.
Yup. 141ms vs 7ms repeatedly.
There is no "true" or "real" C#. Unity is nothing more then a framework built-in on top of CLR. Unity targets .NET and Mono, depending on the development environment and/or target platform.
I'm a programming novice decided to take a crack at it. Is this what he is asking for? namespace ConsoleApplication9 { class Program { static void Main(string[] args) { int[] no = new int[] {-3, -2, -8, 7, 4, 9}; int positiveCount = 0; int negativeCount = 0; for (int i = 0; i &lt; no.Length; i++) { if (no[i] &lt; 0) { int f = no[i]; positiveCount = positiveCount + f; } else if (no[i] &gt; 0) { int u = no[i]; negativeCount = negativeCount + u; } } Console.WriteLine(negativeCount); Console.WriteLine(positiveCount); Console.ReadLine(); } } }
SSD or HDD? I find that my HDD work machine waits around a whole ton compared to my SSD machine at home. It could be that it's waiting around for stuff on the harddrive (I have no idea how they manage their data) and the hard drive is taking a while.
&gt;So start with 40 and loop until you are greater...Capture the remainder and add the next number to it This sounds like a dynamic programming problem.
I'm new-ish to C#, the first thing that came to mind was using switch/if-else in the loop.
&gt; Yup. 141ms vs 7ms repeatedly. Not only that but the LINQ solution to do this is 2(O(n) + O(n)), considering the ~~sort~~ where and sum are both O(n). There is also overhead in copying the array twice in heap memory. I hate to nit pick, but the considering longs are value types, you end up with using 2x times to memory space because of the duplication. Yes, you are right, the foreach solution will be much faster. The fact that the CPU will probably caches the array as one chunk is what brings the performance to 7ms. edit: ~~actually in the worse case scenario the sort is probably O(n^2)~~ Oops, where is definitely not sort. Still O(n) though
&gt;.ToString in the example does nothing, or rather had no different effect than just using the variable by itself like: Console.WriteLine(i); ~~Implicitly,~~ C# will call .ToString() automatically in Console.Writeline(...). Since all objects in C# have a default .ToString(), it is safe for Console.WriteLine() to call .ToString() in it's internal implementation. So what you are seeing C# doing stuff under the hood, which results in exactly the same code. So: Console.WriteLine(i.ToString()); is the same as: Console.WriteLine(i); in the first example it is using the Console.WriteLine(string) version (overload) and in the second it is using Console.WriteLine(int). Under the hood, it converts everything into a string by calling .ToString() on all provided parameters.
just fyi you can pass the predicate to Single(), same with Any() and All(), etc... lot of people don't realize it (including myself at one point) Users.Single(x =&gt; x.Id == whatever);
&gt; Colored tabs (to identify files by each different project) These exist?! This thread is fantastic. Thank you!
The mallet is part of a dynamic suite of percussion based maintenance devices, design for both biological and mechanical applications. 
&gt; the sort and sum Sort? There is no sorting involved in a .Where().
Almost ok. Couple things: * OP needs SUM of positive/negative numbers so variable name "positiveCount" is misleading, "positiveSum" is better * you know that positiveCount = positiveCount + f is the same thing as positiveCount += f? * if/else condition in loop is incorrect: no[i] &lt; 0 means no[i] is NEGATIVE number, so it should be added to negativeCount, not positiveCount * you don't have to assign list elements to new variables to add them, negativeCount = negativeCount + no[i] (or better negativeCount += no[i]) is enough
Looks like the `cleanComboX` variables are fields instead of locals in the `GetTextBetween()` method. If they don't get overwritten (the `if (StX.Substring(...` isn't true), they keep their value from the previous invocation. Either move them inside the `GetTextBetween()` method, or make sure to assign them an empty value in matching `else` clauses.
&gt; if/else condition in loop is incorrect: no[i] &lt; 0 means no[i] is NEGATIVE number, so it should be added to negativeCount, not positiveCount The other things I'd say are minor, and possibly even stylistic but that's the big one. Those are the kind of irritating, single character bugs that go unnoticed and take hours to find that I think every seasoned programmer as at least one horror story of. I'd also consider using a foreach rather than a for loop. Again, it's a minor thing.
This may help point you in the right direction. http://pastebin.com/psfpVvr7 
Definitely move them inside the method. Declaring all your intermediate variables in the outer scope so your can reuse them across multiple methods gains little to nothing, but invites this sort of crosstalk problem between methods and invocations.
What, exactly, isn't working? What do image formats have to do with the folder?
Ooops! Good catch. Where is definitely not sort.
In solution explorer I have 15 controllers. I open one of them. When I do a build then any errors are listed in the Error List. At the same time there are errors in a second controller (.cs file). However, no errors are displayed in the Error List until I open that second file.
1) you're binding the items source to a property of the class, not to a list of class objects. 2) your data context should be set to a view model class that implements InotifyPropertyChanged and that has a property of type ObservableCollection&lt;CQSystem&gt;, you'd then set your data context to the view model type and bind the ItemsSource to the property. 3) in the constructor for your viewmodel, you'll need to populate the list that backs the observable collection property or, if you need to add items on the fly, raise the property changed event on the Observable Collection's property name every time you change the list.
I'd say that feature-wise it's pretty much complete, as it was when I forked it, it's more about the api settling down and me stopping making breaking changes! I'm still not completely happy with the XAML syntax/dsl that I've created as it's not very friendly from an intellisense point of view and it can be quite awkward to specify certain constraints (for example, `3 * Button1.Width = 2 * Button2.Width + 5 * Button3.Width` imagine that but with more terms... the coefficients can get quite unpleasant). So... to actually answer the question, I'd probably say about 85% of the way there. However, if somebody actually starts using it I don't think that there's anything so terrible in the public area of the library that it couldn't be more slowly/sensibly marked obsolete and then removed after you've had time to migrate off.
If you get a OutOfMemoryException it's not because the limitations of VS is to low, it's because something is not working as intended in your program. 
Also, when you say that the array is copied twice to heap memory, where do you get that from? Looking at the MSIL and the reference source for enumerating an array, I don't see a copy being made anywhere. As far as I can tell, the enumerator takes a reference to the array (which is on the heap as all .Net arrays are) and goes through it. 
Isn't that normal behaviour until you build?
I totally agree that an old-fashioned for (or foreach) loop is more appropriate here. So many people are arguing about what method is best in a very abstract way that is completely irrelevant to a tiny example program like this. OP is a beginner and so should learn the most straightforward way. It's impossible to understand Linq without first understanding explicit loops.
The answer /u/ArchangelleTheRapist gave is spot on. I have some input unrelated to the question though. You might want to take a look at [naming conventions](https://msdn.microsoft.com/en-us/library/ms229043.aspx). Your capitalization is off for public properties and the might lead to some confusion if others are reading your code. For example, one might automatically think (not given the definition in the same code snippet) that sysName is private based on your capitalization.
Thanks!
I would like to turn your attention to: IL_0033: call class [mscorlib]System.Collections.Generic.IEnumerable`1&lt;!!0&gt; [System.Core]System.Linq.Enumerable::Where&lt;int64&gt;(class [mscorlib]System.Collections.Generic.IEnumerable`1&lt;!!0&gt;, class [mscorlib]System.Func`2&lt;!!0,bool&gt;) IL_0038: call int64 [System.Core]System.Linq.Enumerable::Sum(class [mscorlib]System.Collections.Generic.IEnumerable`1&lt;int64&gt;) which indicates two separate calls to LINQ functions. In other words, the compiler did not unroll the the LINQ where(...).sum(...) statements into a single loop (nothing in the IL indicates that). I don't see how it can make two separate calls like this without having to return a filtered array and passing it onto the Sum() Contrast that to the foreach loop: IL_0032: brtrue.s IL_003c IL_0034: nop IL_0035: ldloc.1 IL_0036: ldloc.3 IL_0037: add IL_003d: ldloc.0 IL_003e: ldloc.3 IL_003f: add Which is what I would expect to see from the LINQ version if the compiler unrolled the LINQ
I would use annotations for that. You can write your own. http://stackoverflow.com/questions/16100300/asp-net-mvc-custom-validation-by-dataannotation Anything that falls outside of UI logic (i.e. business rules, etc.) should go in a service layer somewhere... not in your controllers. 
Try hard coding the path at first, I'm guessing the path is somewhere on your debug/output directory not where you think it's hitting (out a debug point and see what it's hitting)
So... Um... What is it? ELI5.
Ah your right i did this quick didn't take the time to review it. Thanks Rejna.
No, not at all. The position was for a senior .NET front end developer mostly. Almost all of the work would have been interface design and such. Nothing that would require this type of code to be written. 
You define a selection of constraints, like "button this should be centred horizontally in its parent, 8 units to the left of the label and the label should align its right hand edge with the table below" and it will solve the system of equations for positions/sizes that meet those constraints.
Interesting. I'm one of the interviewers at my shop, and I admit that coming up with interview questions and coding problems can be difficult to do without making them too contrived. However, we at least try to center our questions and problems around the type of code that we write (enterprise stuff mostly). When I myself am interviewing (ie I'm looking for a job, not interviewing a candidate), I find it a bit off-putting when the interviewers throw a coding problem at me that is far different than any code I'd actually be writing if I took the job, and that's whether I solve the problem to their liking or not.
/u/CheshireSwift hit the nail on the head with what this is, and as to *why* I built it... because I really don't enjoy the very Grid-based 'standard' way of doing WPF layout and I thought that there must be a better way. A bit of research turned up Apple's 'Auto Layout' (introduced in OS X Lion apparently) and a bit *more* research turned up a an old port of the underlying engine (Cassowary) to .NET. This project is a clean-up and modernising of that port, with added WPF friendliness.
If you're inside the property itself, use `[CallerMemberName]` on your `OnPropertyChanged` parameter, it's even easier!
Could anyone give a quick inside into what's going on here? is `nameof ` returning the field name of `modified` ? To me it seems like a debugging helper.
It's unclear which context you're referring to, but for clarity sake, yes, implicit operators would apply to assignments, or to method signatures that couldn't be matched by the current type, but do match the result of an implicit operator. In the Console.WriteLine example, there's a signature that accepts Object, so implicit operators would never come in to play vs this direct explicit match. That does make me wonder... if you have multiple implicit operators that match multiple method signatures, which one gets used?
Yes, pretty much exactly that. It returns the name of the field as a string. Benefit of this is obviously that it is strongly typed.
I have recently been doing work with WPF and really like how the document outline window has evolved in VS 2013. So much useful functionality in there
Wow I wish I knew about that when I was using WPF...
I am not sure that kestrel is ready for production use....
And look at the graph for Java on the TIOBE index. Yes java is obviously ahead of c#, but draw trend lines for those two and tell me which one looks better. 
Or you could use this code: public event PropertyChangedEventHandler PropertyChanged; [NotifyPropertyChangedInvocator] protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null) { var handler = PropertyChanged; if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName)); } And simply put this into property's setter: OnPropertyChanged(); 
I modified the code for you. Just add this code into a new class (or replace your existing CQSystems class): public class CQSystems : INotifyPropertyChanged { private int _dbid; private string _sysName; private string _systemState; private string _serviceArea; public int Dbid { get { return _dbid; } set { _dbid = value; OnPropertyChanged(); } } public string SysName { get { return _sysName; } set { _sysName = value; OnPropertyChanged(); } } public string SystemState { get { return _systemState; } set { _systemState = value; OnPropertyChanged(); } } public string ServiceArea { get { return _serviceArea; } set { _serviceArea = value; OnPropertyChanged(); } } public event PropertyChangedEventHandler PropertyChanged; [NotifyPropertyChangedInvocator] protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null) { var handler = PropertyChanged; if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName)); } } public class ViewModel { public ObservableCollection&lt;CQSystems&gt; CqSystemsList { get; set; } public ViewModel() { //Populate List, I just provided an example here var system1 = new CQSystems() { Dbid = 0, ServiceArea = "some area", SysName = "some name", SystemState = "some system state" }; CqSystemsList.Add(system1); } } Now, DataContext = ViewModel ...ItemsSource = CqSystemsList
Right, DNX is not quite an editor. I don't know about Omnisharp but I was under the impression it's in that area? I might be wrong so someone else can perhaps clarify. All I'm aware of is that diagnostics are supported in Visual Studio but I believe it might work for command line builds as well -- which could mean it's also supported in DNX.
Thats right, but if you don't (maybe you are lazy or a newbie), well, then its like the Copyright is theirs. The problem is that this is NEW, this did not happen before, and I see it as an evil change, isn't it?
Well, it's MS, so yeah?
I just verified with one of my old projects: this where the default lines included back then: * [assembly: AssemblyCompany("-")] * [assembly: AssemblyCopyright("Copyright © - 2007")] Now: * [assembly: AssemblyCompany("Microsoft")] * [assembly: AssemblyCopyright("Copyright © Microsoft 2015")] 
So... he throws out the Builder pattern, then tries to fix the problems caused by throwing out the Builder pattern. :| Why not just use the Builder pattern? That's what it's there for.
It's a variable set in the registry during installation / registration of VS, and has been a problem since at least VS 2008 (the web is full of articles on this, and how to fix it). I have a 2013 box that doesn't include "Microsoft" in a new project. I have a 2010 box that does include "Microsoft" in a new project, and has since 2008 at least. It doesn't give MS any copyright on your project. http://stackoverflow.com/questions/200635/how-to-change-registration-company-name-for-visual-studio-2008
What exactly isn't working? One thing I see straight away is that the return value of your method is typed as double, yet you're trying to return a char.
Hanlon's Razor dude
Um, what? First, this looks like a homework problem, not an interview problem, And Second, the requirements don't make sense. What is the purpose of the int? 
Wait, what? That is not what MVVM is about. You are creating a tight coupling here and you have a codebehind that you can easily avoid. You should use dependency injection, but it's not really necessary if you are making a simple application. Here is the best possible way of doing it that achieves a loose coupling: [EXAMPLE USES MVVMLIGHT TOOLKIT] Go to one of your ViewModelLocator, or wherever you want and put this code into a constructor: var navigationService = new NavigationService(); navigationService.Configure("YourPage", typeof(YourPage)); navigationService.Configure("TourSecondPage", typeof(YourSecondPage)); SimpleIoc.Default.Register&lt;INavigationService&gt;(() =&gt; navigationService); Declare navigationService in your ViewModel: private readonly INavigationService _navigationService; In your ViewModel's constructor, inject the navigation service: public ExampleViewModel(INavigationService navigationService) { _navigationService = navigationService; } You also need a new RelayCommand so declare it in your ViewModel: public RelayCommand NavigateToMyPage { get; private set; } Now give it a meaning in your ViewModel's constructor: public ExampleViewModel(INavigationService navigationService) { _navigationService = navigationService; NavigateToMyPage = new RelayCommand(() =&gt; _navigationService.NavigateTo("YourPage")); } Go to your XAML, and add the command to your button: &lt;Button Command="{Binding NavigateToMyPage}"...
You went to a programming job interview but you can't solve a simple task. Seems legit.
i figured it out Function DoSomething($string,$Cool) { $stringArray = $string[0..($string.length)] $stringtoprint = '' FOREACH ($C in $stringArray) { #get the last 3 characters $last3characters = $stringtoprint.substring($stringtoprint.length - $Cool, $Cool) #test if last 3 characters have the same character #if they do, add X to the string. # if not add the character. if($last3characters.Contains($C)) { $stringtoprint += 'X' } Else { $stringtoprint += $C } } $stringtoprint }
I'm sorry guys, thanks for the consideration. Here's where I was going wrong: I didn't realize that the datatype you set in a method header is where you're telling the method what type of data it's getting back. I kept trying to to make the variable I was assigning the returning data to, in this case 'AverageGrade', correspond with the data type that I was sending into the Method when I was instantiating it. It was basically a mix up on how all the data relates that I didn't understand. It was through the responses that I realized the mix up, so thanks a lot for that.
powershell?
Wait. What?
I'm no lawyer, but I'd be thoroughly surprised (and disgusted) if that was enough for Microsoft to suddenly gain the copyright for your program. It's just a default value, nothing malicious. 
&gt; The problem is that this is NEW "NEW"? Dude, you're talking about VS2012. That shit is OLD. 2013 is already long time out (where this is not the case anymore) and VS2015 is around the corner.
Make a base 2D class with shared properties and make 2DStatic class that derives from base 2D class. Same with 2DDynamic class.
C# is the language and it has no means to interact with CSV files. The .NET Framework has no classes built-in to comfortably deal with CSV files. But luckily we have plenty of libraries available, like the CsvHelper: http://joshclose.github.io/CsvHelper/
Alternatively you could parse it yourself using `File.ReadAllText/Lines` and `string.Split`. But using a dedicated library that hides these details and maps directly to your objects is nice.
Well, I stand corrected. And fascinated that it would do that rather than call an exactly matching signature. Good catch!
Yeah you didn't change the Method data type heres mine. using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace ConsoleApplication9 { class Program { static char GradeEstimator(double gradeLetter) { char charGrade; if (gradeLetter &gt;= 90 &amp;&amp; gradeLetter &lt;= 100) charGrade = 'A'; else if (gradeLetter &gt;= 80 &amp;&amp; gradeLetter &lt;= 89) charGrade = 'B'; else if (gradeLetter &gt;= 70 &amp;&amp; gradeLetter &lt;= 79) charGrade = 'C'; else if (gradeLetter &gt;= 60 &amp;&amp; gradeLetter &lt;= 69) charGrade = 'D'; else if (gradeLetter &gt;= 0 &amp;&amp; gradeLetter &lt;= 59) charGrade = 'F'; else charGrade = 'N'; return charGrade; } public static void Main(string[] args) { string stringGrade; double grade; char charGrade, decision; do { Console.WriteLine("Enter the number your recieved for a grade: "); stringGrade = Console.ReadLine(); grade = double.Parse(stringGrade); charGrade = GradeEstimator(grade); Console.WriteLine("Your grade letter is: " + charGrade); Console.Write("Would you like to do this again?"); decision = Convert.ToChar(Console.ReadLine()); } while (decision == 'y'); } } } 
From my point of view all the interviewer was asking for is the modulo operator. http://www.dotnetperls.com/modulo Edit: Nevermind the approach is Math.Floor (x / y); Since he ruled out using division that doesn't count. 
Looks good, just a small note: It is called "Visual Studio" not studios. This can also be seen in all the pictures you show, but you keep writing studios in the text.
You have forked this from another project and changed a lot, what is from the original project (which also seems to contain what you have in your repo) and what is added? Or is this a specialization/cut up version of the original which contains other code as well?
Sorry, no advice there - it's something I'm aware I need also for Perspex but I've not got round to investigating yet. So much to do! ;)
I'd not heard of the RelativePanel before, but checking out a Channel9 video it appears to be a very similar concept. As you said, the Cassowary panel gives you more power and more fine-grained control over your exact layout whereas the RelativePanel is more declarative and makes a lot of (pretty sensible) choices about the *exact* layout from the attached properties. I'll certainly look to see if I can implement some attached properties in a similar fashion to RelativePanel, both because sometimes you just don't need (or want) such a fine level of control, and also because it would be nice to be able to provide a familiar interface to developers.
Apparently, it's how far back one's supposed to check to see if the character has appeared before.
&gt; i figured it out No you haven't - this is not C#.
&gt; Any string is strongly typed as.. a string. `nameof(foo)` is not a string though. The result of the expression is a string because `nameof` is an explicit conversion from symbol to string. So calling it strongly typed is completely acceptable in my opinion.
Resharper does that import for you automatically if you add an INotifyPropertyChanged interface to a class. 
Initially I suspected an object staying in memory within your loop, but as far as I can tell it's clean and everything is disposed of, so you shouldn't have any bloat there. I do notice in your signature that the executable is devenv.exe. Are you running this in debug mode on your development machine? You might be running out of memory because Visual Studio is trying to cache the debugging information over the entire history of the application, and eventually runs out. Actually compiling the program and running the executable should eliminate that issue. Can you give that a try, and see if you still have an Out of Memory issue?
Other libraries are available, like http://filehelpers.sourceforge.net/
Yeah... Please don't use that piece of crap.
Absolutely seconded on Microsoft Virtual Academy. MVA is gold-standard and teaches absolutely everything from the ground up, assuming non-knowledge. 
Either switch to x64 or you could call garbage collector's GC.Collect in between iterations.
This may go against the flow of your process, but there is the possibility of using xp_cmdshell to move the files from within your stored procedure. If you can't do that, there's lots of reasons why not - where is it bombing? First or second loop? I'm my phone but here's something that may or may not help too. SqlCommand cmd = new SqlCommand("sprocname",sqlconnection); cmd.commandtype = commandtype.storedprocedure; Try{ Sqlconnection.open(); Sqldatareader sdr = cmd.executereader(); If (sdr.hasrows){ While (sdr.read()) Directory.createdirectory(path.combine(sdr["full_path"].tostring())); If (sdr.nextresult()) While (sdr.read()) If (sdr["destination_path"] != null &amp;&amp; sdr["full_path"] != null) System.io.file.copy(sdr.["source_path"].tostring(), sdr["destination_path"].tostring()); Sdr.close(); }} Catch ... Finally { If (sqlconnection.state != connectionstate.closed) Sqlconnection.close(); }
The images and the associated file details don't show up.
Coming from WinForms, I was in the same situation. MVVM is harder to set up and you spend a lot of time building the architecture while in Big ball of mud you just code. However, MVVM is seriously worth it. It's advantages are that nothing depends on other components, every component is a part for itself and this allows for a very easy unit testing, modularity, maintance... 
Heh, I think I looked through that too when it was linked here and was horrified by all the `ArrayList`s :D
I'm so happy to see someone that understands EF. For some reason, people that are used to either writing tons of XML configuration for NHibernate or tons of code configuration for Fluent NHibernate, start complaining the moment they need to do more than context.Set&lt;Entity&gt;().Where(...). Yes, it's easy to forget that it's a toolkit not a magic wand when your setup is as easy as going to nuget, finding the package and installing it, and finding that you are done with barebones boilerplate. If you want to add more, like automatic entity discovery, DI, conventions - yeah, there's more code to write. And if you want to really get performing code, you REALLY need to do your research - it doesn't matter whether it's nhibernate, entity framework, dapper, or plain old sql and datareaders - if you don't know what you're doing, performance can suffer very easily.
You might be right. I don't really think that's a compelling reason though. To follow that train of thought through you could make this program in assembly and it would be blazing quick, but no one is seriously suggesting that. I prefer foreach because it is a better indication of intent - I want to see each of these numbers but I don't really care where in the collection that appears. That's useful. If this program were to be changed to get data, from say a database, a developer would know that the foreach would be just as happily to lazily load from an SQL reader without modification safe in the knowledge that the only relevant fact to the logic was each individual number. How the number got there and in which order is a mere implementation detail. A for loop suggests deeper questions though. Is the index important? Is it ever modified in the loop? Does the end condition change? Does any of that have any implications over the new design? Of course in this case it's trivial and those questions are easily answered. But learning to think about those questions and choosing what control flow best suits our intentions seems like something worth knowing. And besides, if the performance of your program is on such a knife edge that the execution time between a for and a foreach is actually important maybe .NET isn't the right tool for the job. 
You've posted a good list of resources. I loved reading articles on [CodingProject](http://www.codeproject.com/) when I got started - albeit not the best code, but some articles are quite entertaining. Try [StackOverflow](http://stackoverflow.com/) or this sub-reddit if you get stuck, but try to overcome the hurdles yourself as that's how you learn. It does indeed take a few hundred hours to get productive (i.e. full time months) and a couple of thousand hours of practice to specialize in solving particular problems.
Yeah, I think the really big thing is to make that paradigm shift and start thinking like a programmer. There's no magic bullet; you just have to code and make mistakes and debug and fix them. Eventually you will make a paradigm shift that's a little hard to explain but involves knowing you can build anything with enough bricks and that everything in programming happens for a logical reason. Some people are born with the necessary thought processes, it seems. I personally came to coding much later in life. I guess the good news there is that it's still a skill you can acquire in adulthood.
Do you feel this course is better than the "C# For Absolute Beginners" that's also on MVA? I guess I will do this one next regardless. Thanks though, I somehow hadn't found this one. 
Which one, Sourceforge or the library itself?
I wouldn't call it a pile of crap since it is still very useful for working with fixed width files. I would just say it is dated and CsvHelper is better for working with any delimited file formats.
Would you recommend contrib over dapper extensions? I'm new to the tech and so far I'm thinking I will only use it for select queries but that may change down the road...
When using strings inline. The program is said to be "stringly typed"
The `nameof` operator returns the stringified name of the thing you pass into it. It makes it easier to pass correct member/type name strings around because your code is strongly-typed when using `nameof`.
Nothing is jumping out as memory intensive, but there are a few things:: Your try/catch needs to be moved to the using(connection) block, because if Connection.State isn't open, and possibly is ConnectionState.Broken, the .Dispose will throw during the .Close()/.Dispose() method of the SqlConnection IDisposable interface. Also, add a catch-all exception block:: catch(Exception ex) { //Perform logging here. } Catching only SqlExceptions doesn't touch any IO exceptions generated if a directory doesn't exist. second, why are you creating String DestinationString and String SourceString when you just make a call to the reader ordinals during your File.Copy method? Strings are memory intensive in C# as they are reference types. Remove them if you're doing nothing with them. Otherwise the only possible answer I have is the "shared memory" method of accessing records via SqlConnection connection pooling. If you are selecting large objects (say 10MB or larger), the large object heap gets used and memory management becomes troublesome for the GC. [See the MSDN CAUTION blurb halfway down for using TCP instead](https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlconnection.aspx) or sub-class DataReader and manage the pool yourself. 
&gt; second, why are you creating String DestinationString and String SourceString when you just make a call to the reader ordinals during your File.Copy method? Strings are memory intensive in C# as they are reference types. Remove them if you're doing nothing with them. This is either a bug or just wasteful, I agree.
Ha, that's funny. Not sure where I picked up that habit. Perhaps just because there's so many version of it I tend to call it more than one studio. Thanks for the note.
I could be wrong about this, but you could be over allocating temporary variables. In your while loop you are creating ints and strings and at the end of the loop they get deallocated. Every one of these strings is an allocation on the heap which can lead to a big pile of strings on the GC. Define them once, just outside the loop and assign them on every iteration. Then only the references are updated and allocated. string DestintationString = string.empty; while (reader1.Read()) { DestinationString = ...; } 
Apparently you have VS available. Use the memory allocation profiling functionality and let it run for some minutes; look through objects you've collected (more than you'd expect) and think why that might be. Alternatively use the vmmap from sysinternals, but that might take longer to learn than actual profiler.
That doesn't make any sense. Allocation happens when the `new` keyword is used, not where the variable that holds the result of the allocation is declared. 
you missed this line: if (reader1.NextResult()) The database is returning two result sets. 
Enums are value types, so what you're getting in `theEnum` is a copy of the value, not a reference to one. When you modify it, it's only being done locally. Your extension method would need to return something for it to be useful. However, the semantics would end up being kind of lame. I don't think an extension method is your best bet here. Maybe a generic method would be better, but even that's not ideal since you can't constrain to an enum. Unfortunately, there's not a really clean generic way to do this that I know of, personally.
Oh I see. I've never used extension methods.
I would suggest a bit of an alternative approach. Instead, make a static class that provides this capability like (approximately, since I'm typing this into LinqPad with standard C#): public static class EnumRng { private static Random Rng = new Random(); public static TEnum Randomize&lt;TEnum&gt;() where TEnum : struct { var type = typeof(TEnum); if (!type.IsEnum) throw new InvalidOperationException(); System.Array A = System.Enum.GetValues(type); return (TEnum) A.GetValue(Rng.Next(A.Length)); } } Then use it like: `var myRandomEnum = EnumRng.Randomize&lt;MyEnum&gt;();` One kind of problem is that C# doesn't really support constraining the generic type to Enum at the language level (apparently it supports it at the IL level because you can do it using Fody's ExtraConstrants, but I don't know if that's available to you in Unity). So you kind of have to just do a runtime test to check if it's an Enum (as I've shown), sadly.
Assuming the client computer is connected, you want callbacks. http://stackoverflow.com/questions/1044174/what-steps-do-i-need-to-take-to-use-wcf-callbacks
Compiler enforced type safety. I like it. I'm totally hijacking this.
I think that this only helps if the client initiates the action. It sounds like that might not be the case in OP's example. If I'm reading the post correctly, it sounds like the server will send a non-client initiated request to the client at a specific IP to retrieve information. In this case, I'd create an installer that registers a system service on the client machine that listens for WCF requests on a specific port. You'd then create a WCF call on the server that calls the service on the client which then passes the necessary data back to the server.
Yes, I do want the WCF service to call the client's service. So would I have the client's service listen for the WCF service to initiate? What would I use for that?
Yes, that's correct. The problem with getting a client to accept requests initiated by the server is that you have to have something running on the client that is constantly listening for requests. That means a Windows Service. [Here's](https://msdn.microsoft.com/en-us/library/ff649818.aspx) a tutorial on hosting WCF in a windows service and [here's](https://msdn.microsoft.com/en-us/library/zt39148a\(v=vs.110\).aspx) one on creating a windows service project. Installing a windows service can be a bit tricky. [Here's](http://www.c-sharpcorner.com/UploadFile/sachin.nigam/InstallingWinServiceProgrammatically11262005061332AM/InstallingWinServiceProgrammatically.aspx) an article on how to do that programatically. Depending on how much access you have to client machines, it might just be easier to use [installutil.exe](https://msdn.microsoft.com/en-us/library/sd8zc8ha\(v=vs.110\).aspx) from the command line. EDIT: If there is a client application that will always be running during anticipated server requests to the client, then you could host the client WCF service in that application instead of a windows service.
Just note that this won't work with bitwise combined ("Flags") type enums, unless (maybe) you define the combinations beforehand.
Great, thank you for the information. 
Then your "client" is really a wcf self hosted server, surely, and your server is a wcf client. I assume you have control of the network because otherwise you have a huge learning curve of NAT port forwarding and so on to deal with. You may also want to look at SignalR (asp.net/SignalR)
Here is one that works with Flags enums. Granted its probably not going to win any performance races but it works. public abstract class EnumClassUtils&lt;TClass&gt; where TClass : class { private static readonly Random _random = new Random((int) DateTime.Now.Ticks); public static TEnum Randomize&lt;TEnum&gt;() where TEnum : struct, TClass { Type enumType = typeof(TEnum); var enumArray = Enum.GetValues(enumType); if (enumType.IsDefined(typeof (FlagsAttribute), false)) { Type underlyingType = Enum.GetUnderlyingType(enumType); dynamic flags = Convert.ChangeType(default(TEnum), underlyingType); foreach (var flag in enumArray.Cast&lt;TEnum&gt;().OrderBy(e =&gt; _random.Next()).Take(_random.Next(enumArray.Length))) { dynamic flagDynamic = Convert.ChangeType(flag, underlyingType); flags |= flagDynamic; } return (TEnum) flags; } else { int index = _random.Next(enumArray.Length); return enumArray.Cast&lt;TEnum&gt;().ElementAt(index); } } } public class EnumUtils : EnumClassUtils&lt;Enum&gt; { } 
Another redditor suggested I look at DualHttpBinding. Would that help me have a WCF hosted windows service send a request to get data from a client's windows service?
Have you checked [this](http://dev.mysql.com/doc/connector-net/en/connector-net-programming-datetime.html)? My hunch is you get NULL value somewhere
Dur! I'm working from a database that I build and "thought" had valid dates, but turns out the dates are '0000-00-00 00:00:00'. But this also has info on handling invalid dates as well thanks! EDIT: Fixed my dates, works like a charm! Now onto reading about NULL/Invalid dates.
&gt;Every single last comment implies that the client is not running a receptive service. No. This is what he originally wrote: &gt; Is there a way for me to have the windows service send a GET request type thing to a **windows service on the client's computer?** Also &gt;Fucking fuck people. Learn to read what's actually written and not what you think they're trying to say. Indeed.
Hi /u/JamesAQuintero ! Do you simply want to talk to a random Windows Service running on a client who is connected to your WCF service? Or are you trying to talk to another WCF service (running as a Windows Service) that you know to be running on the client?
&gt;Hi, do we know each other? doubtful &gt;another windows service that I have running on a client What kind of Windows Service? Is it another WCF service or just a random Windows Service running? Why can't you just make a normal WCF call to it?
&gt;Which is why he's VERY SPECIFICALLY asking about querying a Windows Service?! He might know enough that a windows service is the correct solution because he needs something that will be listening constantly on the client machine but not know how to implement a WCF host as part of a windows service or whether or not WCF is the right choice in this situation (it probably is). There are tutorials out there that talk about this specifically so It must not be *that* unreasonable to ask about and fairly common. Not sure why you're having such a hard time with this.
As some pointed out, use a class instead. You won't realize the pitfalls of extension methods until years down the road and it then it will hit you like a ton of bricks. 2 DLLs, same extension signature. The framework will guess at which one to use. the results will be, well, random.
sorry I'm late, does it just go by line number or does it do anything intelligent to keep the correct area "hot"?
Make a class with those as properties.
No smarts yet - just line numbers (but it does track them if you delete and add lines). I'm considering ways to heat up areas based on areas of editing. Need a good algorithm!
there are tons of projects/libraries out there that provide this functionality, just google "c# exif". a few projects: http://www.codeproject.com/Articles/43665/ExifLibrary-for-NET http://www.codeproject.com/Articles/27242/ExifTagCollection-An-EXIF-metadata-extraction-libr there is even some basic functionality built into the .net framework: http://stackoverflow.com/questions/7128034/exif-library-for-net-4-0-framework
Thank you for your response! I tried the Exif Tag Collector you provided, but I still seem to have a problem. I looked up an [EXIF table](http://www.exiv2.org/tags.html) to see wich field corresponds to the 'Keywords' field, but this program doesn't print the field ID 0x9c9e (40094) for some reason. I want to modify [this](http://i.imgur.com/S4Q7uMm.png) exact field (sorry for google image, my Windows isn't set to English) with my program, but I'm not even sure this is contained within the EXIF data (my knowledge of image format is pretty poor). I am so confused right now.
Use SSIS no need to overcomplicate things (although Linq to CSV is pretty good http://www.codeproject.com/Articles/25133/LINQ-to-CSV-library)
Just try to step back from the problem and start slowly. Begin with reading some specs for the jpeg format and the exif spec. Then try to identify the fields and try to find something corresponding in some library. It is also possible that this tag is saved in the xmp format. Or it might even be that it is stored in some filesystem property.
Also take a look at the MVC integration for FluentValidation. Although, you should be to accomplish the same using data annotations.
Try using DateTime.TryParse. If the date isn't valid it will fail. This assumes the data reader is sending the date as string, which is why you're using Convert.ToDateTime. DateTime dt; if (DateTime.TryParse(myReader.GetValue(i), out dt)) result.Add(dt.ToString()); continue; 
I've used versions of this library for close to a decade: http://epplus.codeplex.com/ It allows you to programmatically CRUD Excel files on the server using an ADO.NET-esque convention. It also supports CSV files.
My first career project; which was WebForms + .NET 2.0. Building out a complete Content Management System. Getting to know the WebForms lifecycle was probably the biggest hurdle.
On every project when you work in a team with experienced people.
nuget has a few packages too that work well for one of my projects
My beginning language was Visual Basic 5. I tried to make a *Zelda: A Link to the Past* style game. It was a disaster, but it taught me the basic syntax and fundamentals of programming inherent to all languages. The one project I hands down learned the most from (and never published), was a Diablo III bot project I worked on a year and a half ago. I had no desire to actually use the bot and never did, I just have a growing passion for reverse engineering. So, I set up Diablo III to run on a server emulator called Mooege (so I wouldn't get caught by Blizzard or disrupt anyone else's gameplay), and just started playing around. Here are some images of the unfinished / unpublished thing running: https://imgur.com/a/GRnWf#0 It was very difficult, but very rewarding on an educational level. There are loads of things I had no clue about which I learned while working on this project; things which extend beyond just C# and into other languages and computer science in general. Towards the time I abandoned the project, I had the thing reading maps out of game files, reading game memory structures, performing A* path finding, displaying 3D maps (see screenshots), trying to disguise itself to avoid detection, and much more. **tl;dr** Choose a challenging project in a subject you find interesting and you're bound to learn a lot from it.
I am still a beginner and do not know as much as anyone on /r/chasp, however what taught me the basics and how object oriented languages and C# work in general was making a old Windows DOS game remake in Visual Studio and C# of course. It was a race style game, you would bet on a box color, the more you bet the higher the chances of winning. Actually i may go back to the project and have you bet against the computer to out bet it maybe that would be a nice summer project to work on... Hmmm thanks for the ideas lol
In this particular use case, I wouldn't make a new class -- or any new objects, I would just use floats or decimals and cast as necessary. You *could* use inheritance for this like doxxie suggested, but it would be really quite bad to use, as then you'd be carrying around a ton of different class types: Tile2DInt, Tile2DFloat, etc.
The first project like this for me was coding minesweeper from scratch. I was probably about 14 and was using visual basic 3.0. It was the first time that I really understood using and indexing arrays (for the grid... Instead of just having 100 buttons). Coming up with the flood fill was also a turning point for me. These days when I am learning a new language, writing minesweeper for it is one of my first tasks.
Implementing IValidatableObject in your model would give you a method that allows for custom validation such as this. It's also automatically validated in MVC.
When I was a PHP developer, I saw the rise of Rails. So I challenged my company somehow to have a real web framework in PHP like Rails. My project was to code up a router. It quickly made me dig into HTTP and also bootstrapping the application. Building up frameworks always makes you learn a lot very quickly.
My first professional .NET app which I opted to write in C# was an app to read MSMQ queus, write new messages, "edit" (receive and send a new message with same body and header), etc. Also my first multi threaded app, which was later implemented after initial review. It was a lot of fun and something I still add onto occasionally, like a custom formatter for UTF8
Sorry. I came from vb6 to c#.net I'm learning... 😊 
Using C++ I built a command line program that simulated a Bank. You could load it, deposit/withdraw, view balances, print a log of transactions. Saved stuff in a file as well. C# was building a simple asp.net website.
Check this out to get a general idea on functionality overlap. A lot of the VB6 methods are replicated in VB.net as well as syntax. http://www.harding.edu/fmccown/vbnet_csharp_comparison.html
Thats pretty cool!
Hey thanks! I think so too, hah.
Get a book, read it, experiment.
Tried that with 50 Shades of Gray. Now I'm sore and afraid.
https://www.youtube.com/watch?v=iopcfR1vI5I
I learned the most when given some other developer's code and told to add stuff to it or change it. It was challenging. But along the way you'd say to yourself... "Wow that's pretty clever, I'll remember that way of doing things next time I do 'X'" "Holy hell this is ugly and convoluted, I'm never going to write methods this long." "Really wish there were some comments here explaining why we're doing X, Y, or Z.. I need to do better on my projects."
Probably not so relevant but if you are pulling data from mysql it can return sets of DISTINCT values more easily than coding the same logic yourself.
/u/shadetheartist made a good suggestion, which is probably your best bet, but I'll take a different view. Since you already have a programming background and php has a similar C-style syntax, you'll probably able to pick up the basics of C# fairly quickly. However, there's a lot more that C# can do than php, so why not find an area that interests you in C# that isn't really available in php. It may be something UI related like WPF, or maybe its something using Tasks/Async-Await to do some multithreading, or try a little bit of LINQ. Now that I think about it types, type safety, and generics would be a really good place to start (although you may have been using types within php). By trying something outside of you're experience with php you'll learn a little more about C# and the .Net framework. You also will be a little more likely to be receptive to a C# style of writing code rather than translating your php style into C#.
I take it that you're mostly interested in web development, or at least, that your primary goal is to learn C# and ASP.NET, not just C#. So my answer focuses on that. I would recommend that you start with an ASP.NET MVC project. Grab Visual Studio Community and create an ASP.NET Web application, using the MVC template. You can start out by simply putting the majority of your backend code in your views (`.cshtml` files), which should look pretty familiar to you as a PHP programmer, as they're simply HTML files with C# code mixed in. [This page](http://www.asp.net/web-pages/overview/getting-started/introducing-razor-syntax-%28c%29) will teach you all you need to know about the Razor syntax, which is what you'll be using when you're editing cshtml files. If you want, you can also check out the other tutorials in that series, although I recommend that you don't use WebMatrix - develop with an MVC project in Visual Studio instead. Sure, you won't be doing *actual* MVC programming, but you can still build good websites this way, and it'll set you up in such a way that transitioning to MVC will be easy. You also get to use Visual Studio, so you'll hopefully discover why so many developers love VS so much. Once you've got a solid understanding of how C# and ASP.NET work, there are plenty of other things you can explore. Take a look at [Umbraco](http://umbraco.com/) if you want a good CMS that doesn't interfere with your code, or take a look at [MVC](http://www.asp.net/mvc/overview) if you're looking for a way to keep your backend code clean while writing large web applications.
Could you please elaborate why you're interested in making the switch?
[THIS](http://www.amazon.com/5-0-Nutshell-The-Definitive-Reference/dp/1449320104) book worked perfectly for me.
THIS. I write Conway's Life and Lunar Landed in every new language. I already know the goal behavior, now I jus need to learn the new toolset.
Thanks for mentioning OzCode, that looks sweet.
Thanks for the reply. Correct, not sure what I am doing wrong in C# as compared to, say, PowerShell. Good note on the class properties (this.Value), thanks! VS is on Visual Studio 2013 Community Edition. (I am aware of auto properties (yay TAB+TAB), but want to manually type it in to force myself to "understand".) :) DeckMethod = Yes it is superfluous, I was wondering about renaming this to Initialize(), but then would I store it ultimately?
&gt; ~Card(){} Please don't define own finalizers.
 public enum Race { Human, Elf, Orc } public enum AttackValue { Zero = 0, One, Two, Three, Four, Five } public class Card { public Race Race { get; set; } public AttackValue AttackValue { get; set; } public Card(Race race, AttackValue attackValue) { Race = race; AttackValue = attackValue; } } Declare a list of cards somewhere (could be in a Deck class) and add the card to it after it's creation. var Cards = new List&lt;Card&gt;(); var myCard = new Card(Race.Elf, AttackValue.One); Cards.Add(myCard); EDIT: Removed code where card added itself to the list of cards (Deck) automatically.
No, C# doesn't implicitly call ToString, but the Console.WriteLine method does.
Actually, GetType is not virtual. There are a few other methods: MemberwiseClone (protected) and Finalize (protected virtual; not directly useable from C#). There are also two static methods: Equals and ReferenceEquals.
Or more correctly: the implicit string operator will be applied and the the overload of WriteLine talking a string will be called. C# never calls ToString itself.
You're right. I forgot to edit that out. You will see later I say that the Console.WriteLine will call .ToString.
I would say it's fine for learning. You can do the same type or projects in both. I still use VS under parallels because I use VS at work and it's simpler to use the same tool at home. Happy learning!
Why is the card responsible for adding itself to a deck? What if you want to put the card in a different deck? You've basically made the `Cards` list here in the `Deck` class into a global variable. Not good.
I find Mono a bit lacking in some areas, but it certainly does supply the bare essentials. It's not as easy to learn about forms, although a lot of work has been done to integrate System.Windows and System.Drawing - that said, it's just as easy to get the same general idea using webforms instead. It's largely down to choice. I do suggest that you try VS, since it does have a few extra features that you may find handy, but with Mono you're not at the disadvantage you were five years ago.
Learning the C# ecosystem will not train you to use the Java ecosystem (libraries, tools, etc.), but learning the process of software development is definitely more valuable than language-specific experience. Also, Java and C# have some similar features and occupy similar parts of the language landscape, so a lot will apply. I believe C# is ahead of Java in terms of language features in a few ways, so just keep an eye out for those. Honestly, just learn Java on your own on the side. If you find the time, do all of your assignments twice: first in C#, then in Java. For most beginner purposes, the solutions will be very similar, so it will take very little time to do the Java solutions. Be sure to consider and understand the differences.
Java and C# do differ in some important ways, particularly with regard to how generics are implemented. Importantly, the application of [contravariance and covariance](http://stackoverflow.com/questions/22785320/c-sharp-vs-java-generics-covariance-and-contravariance) is different. These are two concepts you might come across in your bootcamp. Otherwise, transferring knowledge and skills learned in one does transfer fairly well to the other. My recommendation: Every exercise you do in C#, repeat in Java. 
Visual Studio is superior and Mono itself has still some bugs. While learning you won't be at a huge disadvantage tho.
what is the use of finalizers in csharp? in all my years of programming I've never seen it used
If you understand fully well how the garbage collector works and your class involves extremely memory-hungry resources that are not managed, you CAN implement a finalizer (which is really just another name for a destructor, really), but they can cause a lot of problems since they run on their own thread and the garbage collector is a bitch. Not worth the trouble (and even bad practice) in like 99% of the cases. 
Did you try restarting it? Sometimes it glitches out and stops auto-completing. Also it sometimes has trouble giving you auto-completion for anything you're writing after any sort of syntax (punctuation/bracket/etc) error so make sure you don't have any error preceding what you're writing. Also, make sure you're editing a ".cs" file and not a text file or something - it won't try to parse text files.
`timer1_Enabled` needs to be changed to `timer1.Enabled`. 
I assume you checked to see that it's enabled for C# under Options -&gt; Text Editor -&gt; C# -&gt; IntelliSense Other than that, I have no idea - I only gave you my experiences with it stopping working on me.
Not really. Since you just started probably most of what you are going to do will be fine in mono. I do a lot of mono Dev in Linux. Xamarin is good. Not as good as VS, but it's still very decent IDE. There are other projects I'm on that are windows only because of 3rd party libraries that use windows specific controls. That's when you'll run into difficultly. 
Thanks, you figured this out far sooner than I did. I wish I had come back earlier.
&gt; Not worth the trouble (and even bad practice) in like 99% of the cases. Important to note that there is that 1% of cases where it is worth the trouble, and is good practice. As a general rule: 1. If instances of your class hold unmanaged resources open then you should 2. Implement `IDisposable` 3. Use `using` blocks or make sure you dispose of instances of class when you are done with them 4. Implement a finalizer in case you forget #3. See https://msdn.microsoft.com/en-us/library/b1yfkh5e%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396 Also, if you're going to do any amount of serious work in .Net I implore you learn how the garbage collector works; rather than just glossing over it with "its a bitch not worth the trouble". (this is more to any reader happening across this, not you /u/bloodyvalentine)
This. It needs to be in a project otherwise its just in a "reading" and "change something and I wont tell u if its going to work" mode. I did exactly the same mistake. 
http://pastebin.com/7bUEKEWH here is an example of how to process a potentially infinite stream of data from an http request. in this example a max of 4k is taken from every call to readasync, written into an intermediate buffer, and then written to a memory stream. you could have some function to do processing on the partially downloaded file here, or you could just look at the newest segment of data in the buffer. while ((current = await stream.ReadAsync(buffer, 0, 4096)) &gt; 0) { ms.Write(buffer, 0, current); SomeFunction(ms); } 
There are also instances where you don't have control over the resources. Maybe the object is shared across several instances in a manner where you cannot determine its lifetime, which is what a garbage collector is useful for. Having the destructor available, even if using it correctly is difficult, can be very useful.
Why would anyone want to work as a java developer? ;)
Not necessarily. There is no need to restrict Microservices that do not communicate across HTTP boundaries to HTTP. TCP, or otherwise, is perfectly sufficient. Generally, users access the application through a HTTP interface. The idea is that this interface then persists requests to an appropriate service-bus, which in turn is consumed by Microservices that communicate with the service bus using an appropriate protocol. Adjacent Microservices ideally communicate using TCP. There is no requirement for HTTP, JSON encoding, etc.
RabbitMQ is well suited to providing Microservice tutorials, given its ease of setup and configuration. There are plenty of alternatives such as Kafka, ActiveMQ, ZeroMQ, etc., although I’m not sure about the criteria that you’re using to define “micro”.
You could use it in a desktop app easily enough.
Maybe file upload via a web form? Just like what deviant art does to receive uploaded images (for example).
Hey, at least it's not PHP :)
Thanks, that actually makes a lot of sense. Thanks for the help!
I'd love to see an example of this because i have yet to find a working example. I've even spoken with the creators of pact and pact-net and neither of them had a way to test pass through or queue based microservices without a fully integrated system. 
I'm glad you brought up the Service bus, this is something I've been wondering about for a while. Can you describe how this works in context of Microservices? Are service buses used when you want synchronous microservice calls? Or are they only for pub/sub or message queue style asynchronous communications between services? 
It should be split up. Your domain object should just contain data. That's it. Your repository object should contain the business logic. Service layer -&gt; repository layer -&gt; domain layer.
All other information aside, Order.Get() is a static method, which can hint at bad design. In particular, there must be some static state within Order that knows about the set of Orders, including database connection info, etc. All of that probably should belong to an object.
Do you have the benchmarks to backup your performance claims? I mean I know mod is expensive, but surely it can't be more expensive than an entire hashing operation, right?
That's very interesting. As I said, I'll follow up on this.
Are the machines both on the corporate network (directly, or via a VPN?) If so, shell out and run Robocopy. It comes with Windows (no extra install), and has all the retry logic built in. 
I see you're point and I may invest in a book in the future but its nice to know of free online resources as well.
What are your personal recommendations? I do need to find some good books. Yellow Book seems decent to me so far, but maybe it's just a little basic or something. 
[This is a good playlist](https://www.youtube.com/watch?v=SXmVym6L8dw&amp;list=PLAC325451207E3105)
we found our issue. mistakingly, we had a section of code where we were adding the same datasource to the report twice, but Microsoft famously led us in a different direction with its error messages.
MVA (Microsoft virtual academy) is fantastic, and also plural-sight once you are willing to pay for training
&gt; This is essentially a pub-sub design. Communication is synchronous from each Microservice’ perspective, whereas the application as a whole can be described as running in parallel where more than 1 Microservice is involved. &gt; This explanation seems convoluted and dances around the specific thing I was asking about. Can you clarify: For example, a public asp.net mvc web app is the front end for a microservice architecture, and lets assume the web app uses a service bus like you are talking about. Does the mvc app make synchronous calls using the service bus, or is the service bus only used for asynchronous calls? follow up Q: Assuming the answer to the above is that yes, synchronous calls are made via the service bus, what format do the microservices use to accept calls? Can a microsvc be an HTTP app that uses http requests, and the service bus can do request/response, and send the response back to the external facing ASP.NET MVC app?
Sorry, although the subreddit doesn't have any officially written rules, development of malicious software isn't permitted and as such the thread has been removed.
The way I self-taught was by coming up with some sort of program I wanted to make and then learning how to make it. Once you learn class object, method, and variable - you can pretty much get started on trying to make whatever you want and supplement yourself with research which will expand your knowledge base. Make some basic stuff to start out with: a Bitmap resizer, a pseudorandom number generator, an encryption algorithm, an alphabetical string sorter, and things like that. I do some graphics design so I made a normal map generator that converts heightmaps into normal maps, a perlin noise generator, a seamless Perlin noise mapper for 3d meshes... Find out what interests you and then find out how to do it. When you get the hang of encapsulation, you'll find it's much easier to just create tons of little parts and store them in class libraries which you can then reuse in other programs. The first thing I really wrote in C# was a class that acted as a "Console" for Windows Forms so I could be working in the "Forms" environment and have a console for debugging at the same time. I rewrote that class a few weeks ago - but otherwise used it in every project with no problems for well over a year. Best thing you can do is figure out something moderately simple that you would ENJOY figuring out how to make and then figure out how to make it. But first you must become absolutely familiar with variables, class objects, constructors, arrays and methods. Those are the key items you must understand.
This is the guy I've used to learn a lot from. He takes you through a lot of practical things and gives solid examples of just about everything. I don't know anyone that is going to build an entire application as a tutorial as you need to know what your tools are and what they do to know their purpose.
I've had a few years of C# experience now and this playlist helped to demonstrate the proper terminology for some of the features in some of the later videos of the series. Thanks!
I believe you need to provide an `IHttpFilter` and access the cookies through that. See [HttpBaseProtocolFilter.CookieManager](https://msdn.microsoft.com/en-US/library/windows/apps/windows.web.http.filters.httpbaseprotocolfilter.cookiemanager.aspx).
Do you have a firm grasp on Object Oriented Programming? If not, I'd advise you to [have a look at these](http://www.lynda.com/search?q=foundations+of+programming). Especially [this one](http://www.lynda.com/Programming-tutorials/Foundations-of-Programming-Object-Oriented-Design/96949-2.html). 
The OP is talking about the active record pattern. The code isn't really duplicated, the data access code goes in static methods in some abstract base class that you just extend with your domain objects. It's not a terrible pattern for very simple domains, but as soon as the logic starts getting more complex than just simple data validation I think it's worth refactoring to the repository pattern.
This is the anemic domain model and is an anti-pattern. As soon as your domain gets complex you'll be hating life.
You could try right-clicking on the class (in your code window, not the solution explorer), and clicking on 'Find Usages'. Alternatively, you could try and profile your application with something like [dotMemory](https://www.jetbrains.com/dotmemory/?fromMenu).
I think these are two separate issues. The repository pattern in part lets you abstract away your data source, so that callers don't need to be aware of the underlying provider. Whether orders are fetched from a SQL database, or a REST API, or whatever, it doesn't matter. Those callers of the repository can be a service layer using an anemic domain, or it can be entities with a rich model. So in the first issue, I'd caution away against using the repository pattern. It's usually needless abstraction (often duplicating Entity Framework's methods identically), and changing out data providers is almost certainly going to take a lot more work than changing SqlRepository to MongoRepository in a Ninject binding. Here's a great article on why the repository pattern is bad: http://rob.conery.io/2014/03/04/repositories-and-unitofwork-are-not-a-good-idea/ As for having entities responsible for interacting with the data store (`Order.Get(...)`), I think it's great in theory, but in practice I've found passing around or injecting say, a DbContext into each entity is messy and ultimately not worth it. Instead, the pattern I like the best (especially if you like Martin Fowler's ideas) is CQRS. While it's not a perfect implementation of the pattern, [ShortBus](https://github.com/mhinze/ShortBus) is a great library. Your example would then look something like: public class OrderHandler : IRequestHandler&lt;ShipOrder, bool&gt; { public OrderHandler(DbContext db) { _db = db; } } public bool Handle(ShipOrder request) { Order order = _db.Orders.Find(request.OrderId); order.ShipOrder(); // maybe set IsShipped = true and ShippedOn = DateTime.UtcNow _db.SaveChanges(); } And then to call: var result = mediator.Request(new ShipOrder(orderId)); In this way, you're moving what it means to ship an order (from the data's perspective) into the Order class, and the logic of dealing with externals like databases are still in nice little reusable requests/commands. It's an easy pattern to unit test, and has worked well for me in a couple large apps. 
Until I get a chance to update it the ProductsController in the App.Web project is a good place to start to see how an application built with the framework is used.
Where does your business logic go? E: Just saw you put it in your repository. Isn't your repository responsible for storing your domain object state?
Thanks, I hadn't heard of dotMemory before. It did the trick! :)
I was using the VS2013 memory profiler (based on the F1Profiler) earlier but that only gave me the call stacks of where the objects were created, and didn't answer the question of who was holding on to the objects. I was able to use the 5 day trial for dotMemory to find the problem. 
What is your motivation for creating this tutorial? What advantage does it have over microsoftvirtualacademy or the [msdn tutorial with the exact same name?](http://channel9.msdn.com/Series/C-Fundamentals-for-Absolute-Beginners) 
Annotations for validation, what? I've never seen those before and the documentation is a little confusing. How do they work?
May I propose a moar gooder ordering of your cake? Service -&gt; Domain -&gt; Repo -&gt; The repository is data access, no business logic belongs in there. The domain object isn't necessarily data only; you maybe confusing it with DTO classes. Your domain class is a fully cohesive business entity and can contain any logic relevant to the actual class itself. Your repository layer shouldn't be talking to your domain layer, it should be the other way around; your dependency is backwards. It should be more like view -&gt; service -&gt; domain -&gt; data. In fact you can remove any of these layers and the dependency would still be the same (e.g. service -&gt; data, skipping the domain layer and acting as a direct pipe through)
This is smelly and confused. Or maybe I'm just confused... Can you describe the "why" for this? What is the context? Web? Windows service? Desktop app? What are we dealing with here? What version of .Net? Why are we trying to micromanage the thread pool?
Oh I didn't realize there was a tutorial with the exact same name, I might change the name of the series then. And I just felt like helping people out, who when starting off, if they were like me, had no idea where to start learning. My motivation for making the video series is to keep myself engaged in the language as well as teach it to others
You can do both. Just give the business object a reference to the repository via a common interface. Having a separate service object will get in the way in Complex systems where you'll want to save business objects and leverage polymorphism.
Here's my .02 -- Of course it's feasible, but it's up to you and what you do with your time between now and the job search. &amp;nbsp; Going to this boot camp is definitely going to help set you in the right direction, but ultimately, at your level, since you have no experience working in any of these environments or with any of the systems (which is completely different from job to job) it comes down your command of the basics, resourcefulness, and ability to problem solve. What I mean is, not all development work is cracking open a code base and making things happen. Depending on your focus (web, desktop, cross-platform, mobile, intranet, extranet, integration, etc...), you may spend a lot of your time trying to smash a large round peg into a small square hole. That is, cleaning up crap and making it work with other crap. I bring this up because all of that learning about design patterns and best practices, and extensible, beautiful code will likely be crapped all over. You'll likely walk into a mess and be expected to maintain or extend it, and that will be the bulk of what you do for a living. &amp;nbsp; I don't mean this to be discouraging. There are plenty of newer companies out there with great opportunities to start good clean projects using all of the latest practices and technologies. I'm just saying the majority of the jobs out there are just the opposite -- old and dusty and hanging on for dear life. &amp;nbsp; As a junior developer, everyone is going to assume that you know just about jack shit. And even if you actually know a thing or two, there's a real good chance that no one is going to care; they'll treat you like some hot shot FNG that *thinks* they know what they're talking about. Unless they already had the same ideas and agree with you, of course. The good guys will listen to you and mentor you at the same time, but that's really a cultural thing that you'll learn to seek out in companies during interviews. You'll be expected to spend most of your time learning about your new life. How to deal with source control, development process (e.g. waterfall or the 80 thousand bastardizations of "scrum"), learning the things that just about 0% of the nation learns in school like security implementations, deployment strategies, localization, logging, design patterns if you're lucky, and so on. It is very likely that you won't be asked to design anything for a long time, although your ideas are always valuable even though there's good chance they'll be rejected unless you're just a total boss -- which no one is going to wanna admit for a long time lol. This an extremely ego-driven field here, brother. Everyone hates everyone else's code and everyone hates everyone else's architecture, but like any other job, you'll find some people that you really like, and others that you truly detest. &amp;nbsp; I think the most valuable thing to you right now is exposure. You need to soak in everything you can so that you're not 100% clueless at every turn. You'll be much better off when 8/10 things look at least familiar to you enough to where you know exactly what questions to ask to get the job done or get a deeper understanding. The only way you can really do that prior to graduation is to get involved with real things. Reading books and attending bootcamps, and chatting with jaded devs on the web is definitely the right thing to do, but you also need to make sure that you're currently trying to solve problems *right now*. Be building apps that touch all layers: presentation -&gt; service -&gt; domain -&gt; persistence. Try to mimick things you see on the web, build tools, download open source projects and figure out how they work and how they were architected. By doing this, you'll see how other teams think which will put you closer to what you're going to encounter in the field. Also by actually building things, you'll run into all kinds of walls and introduced to problems you've never considered and that will drive you to find solutions to those problems (most of which have already been solved, but you'll never get it until you encounter it). Learn something new, then utilize it immediately. Apply it to real problems or you'll never really understand it and it'll show. &amp;nbsp; -- Ok, hopefully this part is actually helpful &amp;nbsp; So what's going to make you employable? Well it depends on where you go. First of all, the company needs to have room for a Junior dev and sometimes, that's a lot to ask for. A lot of times, the bigger, more desirable companies do have internship programs; some are paid, some are not. Many of those programs set you up to be hired on after the internship period, some don't. &amp;nbsp; Walking straight into a full time jorb is totally doable, but a lot of times, you either need to really know your shit, or put up with some less than desirable work conditions (e.g. poor management, no process, high turnover, unnecessarily tight deadlines, etc). Actually, if you get desparate, the easiest "in" is to find a high turnover shop to get your feet wet. They'll hire almost anyone. If the place isn't a total sweat shop, getting in isn't too hard if you've done your homework, which I've described above. Know what you're doing and *know how to talk about it in real world terms*. That trumps your textbook reading and boot camp attending all day long. I mean to say that those things are great, but they're just channels to tickle your curiosity, but the true understanding is up to you. &amp;nbsp; For instance, know what MVC is and why it is. Be able to describe how it might be implemented, don't just regurgitate the definition. Be able to sketch out how data flows through from end to end. Be able to build a database schema and write queries against it. Companies love to have juniors do things like sketch out a database schema for a student management system and have them do queries (simple, joins, grouping and aggregation). Be able to do stupid crap like write a method that outputs prime numbers between i and n or calculate places in the Fibonacci pattern. They don't ask you to see if you already know how, they ask you to be able to watch you take requirements and watch you problem solve. As a junior candidate, they will be impressed to hear you talk about intermediate topics like authentication/authorization and actual working examples like OAuth2, and OpenID, etc. Or topics like localization. What makes a thread unsafe? Why? How do you ensure it's safe? Show me an example. Stuff like that. Doing your homework isn't just reading and attending workshops; put that stuff to work so that you can talk about it intelligently! And if they ask you about something that is completely foreign to you, don't say you don't know and leave it at that, and definitely don't BS your way through it. Ask them straight out "I've not heard of that actually; what is it?". Devs love to knowledge dump. You might learn something right there -- let them see you write it down so that you can look it up later -- or maybe you'll find out you already knew what it was but didn't recognize it by how they referred to it. It also shows that you're not going to be that dev that sidesteps the real problems. Of course, this is speaking from my experience and how I interview Junior devs -- I just want to know that they have the basics down, have some critical thinking skills, and have done some work, even if not in a professional capacity. With intermediate devs, I pry more at what they've really learned in the last couple years like code quality, command of design patterns, habits (like unit testing), etc. And with senior devs, I pry at their architectural skills (componentization, scaling, etc...l), their ability to manage the SDLC, and strategize various types of other conundrums. Basically, always have some working knowledge about the job above the one you're trying to get because I'm going to expect you to already have command over the one you're trying to get. &amp;nbsp; Sorry for the novel... I'm really rambling on here... &amp;nbsp; I know a lot of that sounded really jaded, but believe it or not, I am not jaded at all. That's just the reality as I've seen it and I've been extremely successful in manipulating that reality (3 promotions, 40k in raises in the last 18 months, and becoming an architectural authority in a global payment processing company -- no small feat). I am a full stack C# web developer and I truly love what I do. C# is an immensely productive language and with an incredible framework, but .Net is also full of some really lazy and bad developers; just don't be one of those guys. I have no real problem with Java (other than how unnecessarily verbose it is for what it is), but it's old and behind the times. I don't know that I'd say it's dying but with .Net going open source and cross-platform and having developed in both C# and Java, I don't think I'd ever go back to it -- save for Android development maybe. C# is like Java's successful bastard child. A truly zen language imo. And the C# team at Microsoft just keeps making it better and better and better. &amp;nbsp; So I'd really just ask yourself why you'd choose one over the other. The way I see it, Java is a larger pot and there are lots of great Java devs out there to learn from. But really, that will just make you a better java developer which is cool I guess. C# is far more productive in my opinion; you can get a lot more done in less time so that you can move on to bigger better things. Plus windows app development is on the rise, and that environment is awesome to work in. Oh and Visual Studio! Oh man... you just can't beat it. The stack is really nice in general. &amp;nbsp; Again... just one Dev's opinion :)
I do not speak German, but I understand what this post was about. That is a very cool addition to the language and I cannot wait to implement it.
I favor the use of repository pattern, personally. I find it more natural to mock the datasource in unit tests, then feed it into my business logic. I don't think that domain objects should have any references to the data layer at all, repository or otherwise. Domain objects to me represent real world physical entities in most cases. And in terms of SOLID design, persistence isn't the responsibility of the business object so it doesn't belong in there (e.g. an essay wouldn't know how to place itself into a file cabinet). &amp;nbsp; Personally, I prefer to create command classes that act as my business logic. Those command classes may or may not depend on a repository and only deal with domain objects. This is virtual identitcal to what 79854378945987 is suggesting, but instead of the DbContext, I have the repo directly. Something like this public class MyBusinessOperation : IBusinessOperation&lt;UserRequest, MyResponse&gt; { private readonly IRepository _repo; public MyBusinessOperation(IUserRepository repository) { _repo = repository; } public MyResponse Execute(UserRequest request) { var user = _repo.GetById(request.UserId); return new MyResponse(user); } } &amp;nbsp; This way I can send in any ole implementation of the IUserRepository (like a mocked on for instance). And unit test it. The request and response objects are domain wrappers, essentially. In web services, I use them to wrap the result along with other relevant info like error messages, contexts, etc. My repos are actually what contain the DbContext, which are also injectable. Those contexts are how we tell the repo whether it should be talking to the Main database or the Data warehouse, for example. &amp;nbsp; Then I may create a mediator that deals with `IBusinessOperation&lt;TRequest, TResponse&gt;` so that it can handle any flavor of this command class. Then usage might look like this: IUserRepository userRepo = new MainUserStore(dbContext); MyResponse result = ServiceMediator.RunOperation(request, new MyBusinessOperation(userRepo)); This way, I control the database context and the repo at the top most layer (the controller, for example), maybe hook it up with an IoC container, and I can unit test each piece individually.
A public payment API. &amp;nbsp; It touched every layer (view, service, domain, data), had variable business logic (i.e. conditional workflow), localization, 3rd party authentication, claims authorization, responsive design for the view layer, custom caching, endpoint versioning (support all the things!), autogenerated api docs (hand rolled becuase yolo), talked to a gazillion different other components both internal and external ... oh and it was white-labeled. &amp;nbsp; That was my first *real* project and I was responsible for about 70% of it and it was rolled out in 1 year and pen-tested as iron clad. I feel like I got a taste of everything lol. It was the development pupu platter! &amp;nbsp; &gt; Oh yeah? What was the code coverage like? I don't wanna talk about it...
Don't use a threadpool thread. Create a new thread and start it. Use a wait handle to signal that items are in your queue. If you are trying to do high performance code drain the queue, process all the actions, recheck the queue, spin wait for a little then if nothing is in the queue wait on the wait handle. 
There are two parts to set up validation with DataAnnotation. Firstly, you set up the rules using Attributes. List of attributes is here https://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations%28v=vs.110%29.aspx You could call some static functions with CustomValidation if needed or even create your own attributes(not that hard just google it) Secondly, you need to run your validation. This task is environment dependant. Your options: * If you are in MVC environment than the framework supports Annotations natively and your models will be validate automatically * You could launch validation manually. Here is the link how to do it http://odetocode.com/blogs/scott/archive/2011/06/29/manual-validation-with-data-annotations.aspx but it's up to you to show errors to user * You could create your own validation framework for WPF with https://github.com/Fody/Validar (I believe over tools exist) but this is a bit complicated. **TLDR** set up the attributes and run Validator.ValidateObject either by hand or automatically 
Good luck with the series. Keep up the good work.
So, what's the point of this tutorial?
If you need real life examples of the utility of Lambda look at LINQ (method syntax, not query syntax) or MVC Razor views and their EditorFor method.
ahh..yes it works. smart thinking, there probably is a more eloquent way but i understand why your way works. cheers m8
I tried a more recent version of the walkthrough and it works now. It's at: https://msdn.microsoft.com/en-us/library/vstudio/ms171645%28v=vs.110%29.aspx
Since you are working in a console application, you can just do this kind of stuff with Thread.Sleep(&lt;milliseconds&gt;); Everything you will show will be in feedback to what the end user has done, so unless you want to have him perform several tasks at once, that should really be enough. Otherwise, you will need threads. class Program { static void Main(string[] args) { var loadingThread = new Thread(Loadstuff); loadingThread.Start(3000); loadingThread.Join(); } private static void Loadstuff(object obj) { var timeToLoad = (int) obj; var timeToWait = timeToLoad/10; for (int i = 0; i &lt; 10; i++) { Thread.Sleep(timeToWait); Console.Write('.'); } } } 
&gt;Since lambdas are actually anonymous methods, you cannot just drop a lambda any-ole-where. You need to use them as delegates. If you don’t know what delegates are or what there used for, a) shame on you So, in an article that teaches anonymous function use, it's ok to shame people who don't know delegates? &amp;#3232;_&amp;#3232; The textbooks I've read put those two in the same chapter.
Ahh okay I see what was wrong. Visual Studio included System.Threading.Tasks and I thought that covered it. Once I included System.Threading it worked. Thanks for the help
I strongly suggest resharper to avoid that kind of problem, it'll just tell you "Hey, you tried to use a class that does not exist within the current context (of specified namespaces), do you want me to add the namespace for you? Just press ALT+Enter!". And so, all I do all day every day, is pressing ALT+Enter...
Thanks, this is helpful. Would love to read that more in depth post if you get around to writing it
Daily basis is highly subjective.
I don't want to sound like an arse but you will only get so far with someone guiding you through it. No amount of guidance, petting nor molly-coddling will teach you how to efficiently problem solve an application or create and contribute to one. My advice would be to look for a project you're interested in, whether it be a website application or a desktop one and browse through the code. Grab yourself a copy of the source and try and fix any bugs you come across. You don't even have to contribute yet. Baby steps. When you think you've successfully solved a bug, look at this guide: https://guides.github.com/activities/contributing-to-open-source/. If you still have questions, raise an issue asking for advice from other contributors to that project. People will help you, and they'll be glad that you've tried to do it yourself first. God speed and good luck, you'll be fine.
Do you have any binding errors? Check the debug output for details. The binding to _sysName seems suspicious to me, do you have a public property named that?
I'm pretty ignorant with this type of stuff so I have a few questions: What's the point of the aggregate? Is its sole purpose to take in a state and manipulate the state? What's the benefit of this over having an object that stores both the state and the manipulation methods?
Yes, _sysName is a public property. I am however getting an error: System.Windows.Data Error: 26 : ItemTemplate and ItemTemplateSelector are ignored for items already of the ItemsControl's container type; Type='TreeViewItem'
Do you mean implicitly captured closures?
/u/plusninety Yes, this here is the plugin im using
Vs does this too... just use ctrl . All day
Yep resharper is great i agree, but I think its better to learn c# without resharper
You could also use Math.Min width = Math.Min(width, 5);
Your continuationManager should contain something along the lines of this in your Continue function. var rootFrame = Window.Current.Content as Frame; if(rootFrame == null) return; var wabPage = rootFrame.Content as IWebAuthenticationContinuable; if (wabPage != null) { wabPage.ContinueWebAuthentication(args as WebAuthenticationBrokerContinuationEventArgs); }
Piggybacking on your comment.. Since he is doing that in the view's code-behind ctor, that `Load()` method would lock the UI until it's done, but after that it wouldn't affect the performance. So it's pretty easy to tell if it's the complexity of the collection or because he loaded it all in the UI thread on startup. If it's a huge collection of complex items, the visual tree could be insanely huge and it might just be taking a while to render them all. He should try [virtualizing the tree view.](https://msdn.microsoft.com/en-us/library/cc716882%28v=vs.110%29.aspx)
Metrics are *very* hard to come by and are usually heavily-biased, but for the most part C# is still pretty popular and there doesn't seem to be any indications that it will stagnate any time soon. Note that even if C# stops growing market share, there will still be *tons* of legacy C# code out there, so either way having C# in your resume will always be a plus. Also, C# is a *very* good language. It might not be as *hip* as Python or JavaScript these days, but it is still one of the best mainstream languages out in the market. Learning it properly will help make you a better programmer, which is what you should really be aiming at: not being a good C# (or whatever) programmer, but a good programmer, period.
Agreed. That's one of the most important aspects of lambdas/closures. They are basically objects that have state. Lambdas reduce the overhead in designing stateful functions and improve productivity. I think that point was largely neglected in the article. Another thing that helped me understand lambdas was a pseudo-class representation of them. That really turned on the lightbulb for me.
That's it. If the state fields weren't encapsulated then good design would dictate that they be private with some way to get them, which is essentially what I ended up with anyway, so I guess it doesn't make testing any easier in the end. I guess the more I think about it the advantages are pretty slight. I would say for my case the advantage is that I have data in the stat object, like price in pennies for the product, that I don't want exposed through the "normal" interface of the object. Entity framework doesn't support mapping private fields as far as I'm aware, so I would have to expose some public property or getter for the price in pennies. In practice that value is still available by calling GetState and inspecting it, but at least I can make the GetState method internal and hide it from the rest of the world.
Thank you. This is exactly what I'm looking for. I'd rather jump in with both feet than deliberate for weeks while I'm not getting anything accomplished. I plan to dive back in.
Seconding the virtualizing of list item controls. I have found this to be an absolute must with any more than 100 or so items in a list with even a moderately complex template. For this case, since the template is so simple, you could probably bump that number up to 200 or 300 but thousands is still way too many. It grinds the UI thread to a crawl and you end up getting weird behavior, such as OP's statement about not being able to select items.
Your right, this was before that section. I see now that he sets them to constants.
It's a beginner thread for beginner questions from code in a beginner book. If there's any time to be obvious it's now.
Anytime I hear categorical statements line "the ______ pattern is bad" I'm always suspicious. Use the right tool for the right job. Sometimes that might be an ORM, sometimes it might be a repository or something else. The idea that any tool in your programming toolkit is completely worthless is generally a closed minded point of view based on a small set of examples (which are often skewed to be intentionally bad examples). It's like saying "using hammers is bad because screws should be installed with a screwdriver".
I get what you're saying and it makes sense. It seems you really do end up with this design when you combine database data with an object that encapsulates this databasedata, but shouldn't expose this data outside of action methods
I wasn't aware of the cross platform UI issues. Are there any front running libraries that I can look into?
You can install SQL Server Express for free. In fact, if you have Visual Studio installed, you may already have it.
Oh man, I loved reading your novel :D. I am CS student who never worked in the field, but done some project on my own. Would you say that doing a project on my own and open sourcing it might improve my chances for future employment ?(I don't have many opportunities for jobs where I live, but I study abroad, and plan to move there after I graduate. So doing open source stuff is currently the next best thing). Also, Java will probably get smaller and smaller with android too, Visual studio C++ for android integration seems getting better and better. Xamarin is doing great as well ( Wish it wasn't so expensive :( )
I don't really know about this but I heard that for dev and test purposes you can get access to some Azure services for free. I found a link here: http://azure.microsoft.com/en-us/pricing/details/websites/ I haven't really tried this myself, so I don't know what you would have available wrt databases etc, but it's worth investigating IMO.
Yeah I've played around with that and that certainly works for testing and learning but I was hoping to play around with an online database that is hosted elsewhere and not just locally on the machine/device.
Thanks! At first glance it looks like the free tier should certainly won't. I'll dig into that a little more. Has anyone else on here used that?
Any particular reason you want one that is not local? You can reference your connection using your PC name or IP instead of local and achieve basically the same result (just make sure to enable Named Pipes and TCP connections for your SQL). 
So then, if I want to get cookie xyz, I do something like this? response.Headers.Values["xyz"]; 
Well, WinForms works, but is ugly and totally not recommended. GTK# works, but the API bindings are a bit janky, the documentation isn't good, and the status of the GTK3# bindings are up in the air. Mono/Xamarin has Xwt and uses it in MonoDevelop, but I'm not sure how good it actually is. QtSharp is probably the most promising: the bindings are generated using CppSharp, which is a tool based on libclang for generating bindings according to some specified rules. However, the QtSharp bindings aren't stable yet. You can always use some embedded web browser and make an HTML UI, but that's cheating and doesn't really count.
It may seem a little counter-intuitive, but Math.Min returns the smaller of the provided values, whereas Math.Max returns the larger of the provided values. In this case, you would want width &lt;= 5, so Math.Min(width, 5); would return width if it's less than 5, and 5 otherwise; whereas Math.Max(width, 5) would return at least 5, or width if it's higher.
Ha ha ha ha.... This comment was fun to read. :) Actually, I do need to have multiple decks (and discard piles). That's what I thought I was trying to instantiate with a &lt;List&gt; (my problem being creating multiple lists (decks) via a new Deck class (why it is empty above, but how the hell would you know what I was thinking just posting the above spaghetti code?). Anyways, thanks for a reply. 
Yes, Thank you. I have a pretty deep CS background and have code in a variety of languages in production systems. PHP (or Ruby) and SQL are what I use to write middleware applications. My big concern is that I'm largely disconnected from the current popularity and future growth of most languages. 
yeah this is what i've found, my CS program focused heavily on java and i just started at a new job where they code in C# and the transition was seamless 
They've started to diverge in recent years as each language starts moving toward the "bloat" stage of maturity- but the fundamentals of the both languages are very similar.
Forgive me, Im very early into my career, whats the "bloat" stage?
This is so vague and open-ended that you'll be downvoted and no one will help. Do you have any experience with C#? Have you ever written a .NET GUI program before? What exactly are you having trouble with?
Ah perfect, thanks!
MVC isn't hip anymore. 
Haha, I was thinking the same thing. 
I know C# and C++ - can get loads of interesting jobs through those two. C# on OS/X? Isn't that a bit premature?
NDK** I'm just used to things being called &lt;productname&gt; development kit. EDIT: (I thought native Android Development Kit = ADK, but its called NDK :P )
Look into Lucene.
I think this may be the first time this domain has been posted from someone other than the creator, /u/drussilla7, so...progress. **Edit:** Aaaaaannnnddd, that account is deleted or banned, and this account has only posted on "druss.co" stories, so /u/ivan_vivaldi is a great big phony!
No, it's native, C/C++ that you can compile with GNU GCC. You can also build parts of ROMS/apps in straight assembly. If you wanted to use any of the other features other than running code you will have to use Java eventually. But for just writing something that just runs (memory stuff for me) its fine.
Wow. Thanks for this. Now do I need to put this in OnActivated() of App.xaml.cs?
Same. Asp.Net 5 is amazing :)
Back to webforms? What's hip these days? 
Visual Studio is a lot better than Xamarin Studio. Xamarin Studio also crashes frequently. And its built in refactoring is not even close to what resharper does.
no, i'm a novice programmer working on personal projects. i wanted to find something that was based in vs because it's what i have been using for the last 6 months since starting to program and i thought it was industry standard (microsoft + i saw it suggested everywhere as when i begun learning) if it's similar i'll give it a shot and see how it feels. i honestly feel lost with most of the tools on vs but i guess i'll get used to it - i just started to use git lol so i doubt that'll be a problem.
Can you store your data in another format, like a file or a spreadsheet? You can programmatically access google docs, Dropbox folders, and even git repositories for free.
The free tier of Azure websites also includes a 20MB database. I am not sure if you can access that db from another app outside of that web site but it might be worth a shot. Otherwise, you can go with the basic tier of Azure SQL, $5 a month for 2GB.
True they are business rules but so are the validation rules for being a number from 1 to 12. It doesn't make much sense to have the two rules being in different places and then displayed separately.
Yeah, I think C# is just hip enough. At it's core, the language is still an OOP language that builds bytecode for a base runtime, and it is "mainstream" and "enterprisey". But the language has also been progressive with features like anonymous functions, lambdas, closures, LINQ, etc. Not to mention quite a bit of syntactic sugar. Hell, Python is actually taking cues from C# now by including async/await syntax in upcoming releases.
Some of these topics are really advance to me, thanks for sharing, I guess I just need to keep learning :)
You don't need Xamarin (that's for iOS and Android). Since it's been open sourced .NET is now available for OSX. Microsoft even have a free multi-platform .NET IDE called Visual Studio Code
You'd throw an exception rather than returning a value.
I personally usually have my shell view broken up into several regions, like maybe a toolbar and content region. Now maybe my toolbar doesn't change much so it's simply a view but my content region can change drastically depending on the data it's handling so each 'view' in the content region becomes a module. I don't really think there is a 'correct' way to do things, PRISM just gives you tools to build loosely coupled UI components easily. After about a year now of using it now I still find prism apps a pain to setup but for maintainability it's fantastic and definately worth it in the long run. There is a great video series made by Brian Lagunas on Pluralsight that taught it very well that I highly recommend watching if you can.
In .Net, there isn't a 100% convention for "not found". Some libraries, classes, etc. go the route of throwing an exception (for example FileNotFoundException). However some functions/types do use the integer approach. Most often a value of -1 is returned in these instances (string.IndexOf, etc).
It seems weird to me to have `NSNotFound` at all. Cocoa is weird to me. Get why your comment makes no sense yet?
It depends exactly on the scenario. So the standard `List&lt;T&gt;` class for example in C# has an `IndexOf()` method. If you try to get the index of an object it doesn't contain, it returns -1. Array indexes are always Int32s and they're never negative. However if you tried to access an item in the list by an index, and that index was out of bounds, it throws a `ArgumentOutOfRangeException`. If you don't want to throw an exception because for some reason it's valid for the object not to exist, then you'd return `null` assuming that its an instance type rather than a value type. For instance types you could use a `Nullable&lt;T&gt;` which can be done implicitly with a `?` after the name of a type.
There are conventions, it's just dependent on the situation. Basically if it's an index, return -1. If you're returning the actual object, return null instead (or some default object). If it's exceptional, throw an exception. So there isn't a 100%, "every time use this" sort of answer.
If this seems weird to you, then not sure how you managed Cocoa?
I tend to set impossible goals, so my current hobby program is definitely one that'll benefit from Prism haha. Unrelated question if you happen to be familiar: where in the Solution Explorer would you place local databases? To provide some context, here are some examples of databases I'm looking to add: **Employee information**: stores username, encrypted password, first name, last name, and access levels. This could be added under the Login module, but that won't be the only module using the information it contains. **Product information**: stores name of product, product code, price, category, and descriptors. Could be added under a module with a view that displays this information, but the "name of product" will need to be used by a separate search module to locate it. Is it appropriate to add local databases to the main project of the application?
OP, I don't think I understand you properly. But I will take a stab at it. Are you trying to close the "main" form? If that's the only form you have open and want to close it, you can do the following. Application.Exit(); However, `this.Close();` should have worked in the first place, that's were I kind of got confused about your question. For other forms open from your "main" form, you can call their own `Close()` method.
Ahh, I think I know what you mean. Are you doing something like this? Form f = new Form(); f.Show(); You can just do `f.Close()` to close that particular form.
I encourage every novice .NET programmer to read Eric Lippert's article on [vexing exceptions](http://blogs.msdn.com/b/ericlippert/archive/2008/09/10/vexing-exceptions.aspx), which really goes a long way towards clarifying when you should rely on them and when you shouldn't.
So, is C# like Java in that you should pretty much throw exceptions for anything? In Objective-C, it's convention to only throw exceptions for undefined or disallowed behavior, not for expected cases. If C# and Java share the "exceptions galore" convention, I'll just do that instead.
But some data should be presented differently than another. How should they have done it dynamically if they let the website choose how to render it? Thanks about the web.config thing. I'm currently researching on it, though I'm having a bit of info overload. Hopefully this would set mo on the right track. 
Thanks!
Thanks!
&gt; Lucene Looked into it. Looks like not what I'm looking for. But will keep reading it for future use. Bookmarked! Thanks.
You probably did fine. The white board is usually a tool to see how you think, and if you've got a grasp of the logic required to solve a problem. It's also used as a tool to go over your answers, talk about how you came up with the answers, and why you solved the problem a certain way. I don't think I've ever heard of an interviewer expecting well written, working code from a whiteboard. It's used to see your thought process.
 Also remember, they usually are doing a lot more than just seeing how you figure out your problem. Its all about figuring out the way you think. Did you ask questions? They're usually pretty unspecific. Did you take a minute to plan it out or did you just start writing, etc. What you put on the board is important don't get me wrong, but what you do during that is just as important. Tl;Dr: If you messed a few parts up on the whiteboard, don't worry about it. That's not the entire purpose of the test.
That's not how Java works nor is it how C# works. Throw exceptions when needed, that's it. Exceptions are expensive, doing things like File.Exists(path) is not.
Honestly, by doing nothing. I know what I know, and I'm honest about what I don't know.
Yeah, I agree, though sadly its not just HR, but ingrained as how you do it. Ive stopped doing it. We send out an at home test. Then ask questions about the test and resume. 
Couldn't have said it any better. Good interviews test what you know, not that which you need to prepare for. It's not a trivia contest!
If, by chance, you don't want to do it by constructor injection, you can also get the first control in the form's control collection that's a textbox and set it's value like this: static class Program { /// &lt;summary&gt; /// The main entry point for the application. /// &lt;/summary&gt; [STAThread] static void Main() { Application.EnableVisualStyles(); Application.SetCompatibleTextRenderingDefault(false); var form = new Form1(); foreach (var control in form.Controls) { if (control.GetType() == typeof(TextBox)) { ((TextBox)control).Text = "999"; break; } } Application.Run(form); } } If the text box is a member of a panel or some other kind of container control, you'll need to find that control first, list it's children through its Control property, and then find the TextBox.
Some people panic under pressure like that. I had a whiteboard in a conference room with 9 people on the other side of the table and was messing up left and right. First day on the job I saw code segments from a few of the people who were critiquing me were garbage coders who approved me to make their workload easier, quit on day 1.
You'll find C#/.NET is similar to Java in this regard. However, that does not mean you should be throwing exceptions or using exceptions to handle program-flow (in Java or C#). Exceptions are for exceptional cases - where something went incredibly wrong and the program cannot continue. Take your URL example - the input going into the new URL object should be validated before it gets there. If that validation fails, gracefully fail (not by throwing a different exception). Then, if URL is throwing an exception, it means there is a bug somewhere and something completely unexpected is happening. 
You need to initialize the Stocks object: Stocks stk = new Stocks();
Create an instance first Stocks stk = new Stocks()
Java throws an exception when you try to create a URL object with an invalid URL. I'm not the one throwing it.
I'm not following 100% what you're saying. Could you be a little more specific if possible?
 public class Stocks { public string Name { get; set; } public string Site { get; set; } public double Price { get; set; } public float Increase { get; set; } } private void btnShowName_Click(object sender, EventArgs e) { Stocks stk = new Stocks(); stk.Name = "tel"; MessageBox.Show(stk.Name); } What I did: * I've added getter and setter to the Class see [Accessors in c#](https://msdn.microsoft.com/en-us/library/aa287786%28v=vs.71%29.aspx) * Renamed your Button to "btnShowName" because that's what the button do and therefore should be called * Made a new object of the Class **Stocks** see [here what a new keyword is](https://msdn.microsoft.com/en-us/library/51y09td4.aspx) This is just some basic OOP and you need to learn more because that's mandatory knowledge.
You also gave the properties better names!
Oh yea. 
I agree except with properties. Instance fields work fine, especially for data classes. 
Even data classes should use properties
When you are doing message = "Stuff happens, given 2 choices (4 or 5)"; you only assign the text to a variable, you never write it to the console. I'm guessing that at some point after the if-branch you have a Console.WriteLine(message); which then outputs the previously assigned value.
You are not using any braces `{` and `}` with your `if` and `else` staments. This means only the statement immediately after the `if` is associated with the conditional: the rest will run regardless. Until you properly understand this point I recommend *always* using braces around your `if` and `else` bodies. 
Wait... so you have to build a hotel booking system and your looking for a tutorial on how to do it? The WHOLE system?
&gt; That's not how Java works nor is it how C# works. Throw exceptions when needed, that's it. Exceptions are expensive, doing things like File.Exists(path) is not. File.Exists(path) is not a good example. If you do something like this: if (!File.Exists(path)) return false; var text = File.ReadAllText(path); it does not save you from having to handle exceptions. There is a race where the file can get deleted between the calls to File.Exists and File.ReadAllText, so you still have to handle FileNotFoundException (not to mention IOException more generally, SecurityException, UnauthorisedAccessException...)
Why? I dont see anything wrong with using data fields if their just to store and send data.
Answer you don't want to hear, sorry: Artificial Intelligence for tic-tac-toe isn't hard. There's multiple ways to do it, either by making a priority list (If there's a move that'll make the AI win, make that move. Else: If there is a move that the player can make to win, block that move. Else... etc.) - Or by simply hardcoding every possible solution. Tic-tac-toe is a solved game, and it's completely trivial to have an AI always play a perfect game. But that's not what you should focus on right now. The first thing you need to do is learn to apply some absolute basics like a simple iterative loop. Look up some beginner tutorials on what, for example, a for-loop is. As comparatively basic as a tic-tac-toe AI is, you need to take a step back and learn the absolute basics of programming first.
Use "switch" instead of "if", it increases the readability of your code, if it contains many choices. 
We use collabedit.com on a phone screen to check this before inviting anyone in for interview.
It's an obstacle I feel that I am going to approach in the future and would like to be able to create these kind of systems with ease. I feel like I should branch out of the MVCMovie tutorial on the asp site. Im mainly looking for websites that offer tutorials as well. If you know any , I appreciate it. [I have used the c# fundamentals tutorial on the side] 
If somebody buckles under pressure, I'll know. Buckling under pressure vs. not being able to answer the most basic questions are two entirely different matters.
Reported for spam
ifstream.Open in c++ will throw an exception and it has an entire namespace dedicated to io exceptions. 
You might want to remember previous choices - for instance, you could assign a player a morality score based on choices made. But in general you would want to just keep replacing the original value, like you say.
But it is. Most positions require you to talk to clients and manage with other companies. I couldn't imagine someone just saying "I don't know" to a client. This is the worst advice I've ever heard, most employers know all of their interview questions are posted online, if you don't prepare yourself for the interview not only does it show you're not that interested in the position, you're also unreliable and not a hard worker. You couldn't even spend 40 minutes going over their questions? This is a "how to not get the job 101".
I would rather have someone say "I don't know (but I can find out for you)" than try to BS their way through an answer.
 That was a highjacking in the same way extreme home makeover is a robbery.
You would rather have someone turn away from the board and give up than say something along the lines of "and I would want to test and read the documentation on x feature that I could use to build this part, afterwords doing y to finish the solution". Wow. At the very least you should describe HOW you would figure out the problem or the steps to complete it, even if you couldn't write it off the top of your head. Ah, you edited the answer, but read it now. You also say you shouldn't just say "I don't know", which is what the first post says. That's what I said.
No, I don't think there is a way to use `HttpClientHandler` with this api. It just doesn't exist in the Windows.Web namespace, and also, HttpClient doesn't have a constructor that takes Handler as parameter. Right now I'm checking /u/tweq 's answer
&gt; HttpClientHandler Look at HttpBaseProtocolFilter, and it's CookieManager property. Should work in the same manner.
Plus there are binary compatibility issues if you need to change a public field to a property compared with adding extra stuff to an auto property. The auto property compiles to two methods, one called get_PropertyName and the other set_PropertyName. The field is just the field name. If you change the public field to a property then you will need to recompile all consumers. Imagine you have your DTOs in a particular dll that you want to be able to deploy on its own. If you change a field to a property then there are implicit dependencies on that dll that mean it can't be deployed without recompiling and deploying any other dlls containing code that references the field. It may not be a major issue in most cases, but it's a good thing to be aware of at least and is why I always default to auto properties rather than public fields.
Yeah, it looks like they would be using it for records, which along with sum types, are algebraic data types. It's nice for null checking at least. How close is the example [here](https://github.com/dotnet/roslyn/issues/206) in 8.4 to being a sum type?
yeah I checked it, but HttpCookieManager's instance shows up in the Locals window without any subitems, and it kinda pisses me off ;D
No, I'm still learning and bubblesort was the only sorting method I actually knew how to code until now. Thanks.
 int i = 2, j ; This is equal to this code: int i = 2; int j; You simply declare two variables, while you only initialize i with a value.
For this exact reason you separate initializations (and declarations). int i = 2, j ; =&gt; int i = 2; int j;
j is not incremented, j is assigned the value of incrementing i.
C# is going to take an even stronger hold due to .NET being open sourced. There is not an IDE that touches Visual Studio for development. Even the linux elitists know that. You won't regret learning c# since it can compile on windows, linux and mac os/x.
 if(nmbr[k] &gt; nmbr[k++]) { int temp = nmbr[k]; nmbr[k] = nmbr[k++]; nmbr[k++] = temp; } - int i = 5; int j = i++; Console.WriteLine("i = {0} and j = {1}",i,j); //Prints i = 6 and j = 5 j = ++i; Console.WriteLine("i = {0} and j = {1}",i,j); //Prints i = 7 and j = 7 - int[] array = {3,4,5}; int i = 0; Console.WriteLine(array[i] == array[i++]); //Prints True
My head hurts reading that! Fixed: j = i; i = i + 2; j = i; (edit: had the wrong number)
so I know logging i++ will return i and then increment it and ++i will return i+1. So in this scenario is the second evaluation of i in ++i is i 2 because it's still in the same statement or has the increment happened by the time it evaluates ++i. God I can even think of a way to ask this question clearly. Lets try this, if i starts as 2, does j end up as 5 or 6? Edit: Just ran it, ok I get what's happening now.
&gt;in c#, k++ does two things: increments k to equal k+1 returns this new value of k Actually `k++` will return the original value of `k`, not the incremented value. `++k` does what you describe.
Glad you enjoyed it:)
Not entirely sure I get what you mean; But from what it sounds like you have a reference to an Object; And need the tag of whatever TreeViewItem corresponds to that reference. That'd mean you could probably solve this by making a search function that finds a TreeViewItem given a TreeView and an Object. MSDN has a good example: https://msdn.microsoft.com/en-us/library/ff407130%28v=vs.110%29.aspx
Probably be happy I didn't get a job offer from a company that makes a dev do code on a whiteboard. Unless, of course, that is how they code at the company, they put all their code on a whiteboard, then someone transfers it to a computer.
Many of those have nothing to do with the language itself. These are just a few more conveniences per the OPs point.
Well it depends, it's not clear how /u/barnold wants to use it. There are ways to invoke C# code from XAML, it just depends how you want to use it. If I'm misunderstood or wrong then please correct me as to why..
Fair point. Thanks for clarifying :)
TryGetExpirationDate(new DateTime(2004,2,29), out endDate); If you input a leap day, when it goes to increment the year, that day no longer exists
NP. Sorry for being blunt :(
I have experienced something similar when I was using a datagrid with about a thousand elements. The more elements that were used the greater the slowdown. The problem ended up being that I had a scrollViewer that was higher in the hierarchy than the datagrid control and they didn't like playing together because of their autosizing. If this is the case, remove any scrollviewers that this may be inside of and test it again.
&gt; still the best tool for Win32 desktop I think you mispelled WPF.
The comment was about delegates in general, not lambdas specifically. 
Thanks. Yeah I got them to knock 20% off the Business Edition price - I have the trial of both Xamarin and RemObjects so I'll need to see what each offers. If Xamarin Forms is really improved a lot then I may have to go that way because it looks like it definitely has a larger community. Thanks
I don't know that I'd argue that type safety is the *reason* why we put up with visitors per-say, but type safety in general is why we put up with strong typing, sure. I wrestled with the internal argument of type safety here for a while and decided that it wasn't that major of an issue. Are you just commenting on the extension? That was more of a syntactical convenience thing than part of the solution -- it can't be used polymorphically, so there isn't a ton of ways to hang yourself on it (at least that I can think of). I mean, anyone could argue that extensions are bad practice in and of themselves let alone extending *object*, but this was about the mapper itself, not the extension. &amp;nbsp; As far as type safety is concerned with the lack of interface, I wrote it to be clear in its usage. I don't see it any different than a factory. It will only run for registered types and give you a clear exception when you try to use it with an unregistered type.
^ key point right there
Shouldn't you be listening on your public facing address? 
The first line is just shorthand for declaring and initializing variables of the same type. You've declared two ints, i and j, and initialized i with the value of 2. &amp;nbsp; The second line is assigning j the value of i + 1 while also incrementing i. It's not a wrong way of doing things, but you should never code like this as it makes it hard to read. Not only will it confuse others, but it may confuse you in the future. I can't count how many times I went back to read my own lazy code (usually poc code) and had to give it a double take because i wasn't sure I understood my own logic.
Does that return an IP? EDIT: I substituted that as the IP address. The only problem is that makes it connect to 127.0.0.1 (yes, I know that the localhost), but the router is pushing data to the IP of 10.0.1.164
All that thought into checking max values and they didn't just use AddYears...
This has already been explained, but in the interest of learning more, you'll note that declaring multiple variables on the same like is somewhat common and looks less confusing: int i, j; The main reason that your code looks odd is because it initializes only one of them. This is kind of unusual. Of course, you can initialize both: int i = 2, j = 3; Of minor interest is that some languages (but not C#) have a comma operator that evaluates left to right but discards the left value. So `j++, 0` would evaluate to `0`, but will have executed `j++`. As you can imagine, this is only useful for side effects and that makes it pretty useless for the most part (really only useful for having multiple updates in a for loop). The comma operator usually has the lowest precedence, even lower than assignment (which is useful because we can do `item = item.next(), ++i` in a for loop's update section and `item` is correctly assigned the value returned by `item.next()`). But again, C# doesn't have the comma operator. Just thought it'd be interesting to mention. In case it's not clear, you shouldn't do this. It's considered bad practice to declare multiple variables on the same line, especially when initializing them. Also of note, since you asked if `i` has two values, is the `Tuple` class. It's a mathematical tuple, which is an ordered collection of a fixed size where each item has its own domain. Put more simply, it's a group of variables where each variable can have its own type (unlike a list where all elements are the same type). For example, consider the case of pairing a name and ID: Tuple&lt;string, int&gt; employee = Tuple.Create("Steve Bob", 123); C# lacks special syntax for tuples, but it's noteworthy that many other languages use parenthesis and commas to create tuples quickly. The following is Scala code that is equal to the above: val employee: (String, Int) = ("Steve Bob", 123) Tuples are useful for internal use since they avoid the need to create a new class for every grouping of data that you have. However, they lose some readability since you access the elements of a tuple through vague fields like `Item1`, `Item2`, etc (which is obviously inferior to having fields that describe the data). The above examples are arity 2 tuples (aka 2-tuples). C# supports tuples of up to arity 8.
??
Interesting article, but an exception filter or handler are **way** overkill just to get a pretty response. In Web API 1 there's HttpResponseException, and in Web API 2 it's even cleaner thanks to the IHttpActionResult interface. 
**Edit**: The terms are called [checked and unchecked exceptions](http://www.javapractices.com/topic/TopicAction.do?Id=129). Java and C# have checked exceptions. Other languages (C++, Objective-C) do not. That's what I'm talking about. ---- I agree. I'm saying the same thing everyone else is. I never said they're annoying or that they don't make sense. I said the languages use exceptions differently. ***And they do***, do they not? In Objective-C, exceptions aren't meant to be handled, because you have a bug in your code if one is thrown. In Java / C#, exceptions are meant to be handled because they can be thrown in expected cases. They throw an exception where most languages would return some form of `null` or a warning value. I say "for anything" and "all the time" because, relatively speaking, that's how it seems. I'm exaggerating of course, but I didn't expect everyone to take it so seriously. I suspect Java developers might wonder if exceptions are even catchable in Objective-C because it's done so rarely.
Hah :-) All of the most awesome-looking Windows apps I've ever seen have been done in WPF, true. But if I have to write big LOB apps, especially with databases and reporting, I'll take Delphi every time. Especially if development time is a factor. I should have been more specific about what kind of Win32 desktop apps, my apologies.
http://pastebin.com/7bUEKEWH
Check /r/wpdev next time ;)
you should bind your IP (on the server) to "0.0.0.0" or IPAddress.Any Then, open up your router. usually something like http://192.168.0.1/ (if you don't know it) you can find out what address it is by using the command **ipconfig** from the CMD. Make sure that the port forwarding on your router is properly pointing out your LAN Address (Should be your IPv4 from the results of using ipconfig). Sorry though, as I'm assuming you were using Windows, if not then it might be completely different. Eitherway I would recommend changing the binding IP as the suggested above. **EDIT**: and lastly, you might want to check your outgoing IP address using something as http://www.whatsmyip.org/ for your Client to connect.
That is because (99% sure that is, i don't know your networking setup) myipaddress gives you your public facing ip, the ip address your router have. Your does not use that address. Also, unless you have multiple network cards and you only want to be using one of those, you might want to listen on System.Net.IPAddress.Any instead of a hardcoded address. 
It's deprecated. If you really want to, you can use this [add-ins](https://visualstudiogallery.msdn.microsoft.com/0e313dfd-be80-4afb-b5e9-6e74d369f7a1) to regain *some* functionality with SQLCE. Depending on your requirement, moving to [SQLite](https://www.nuget.org/packages/System.Data.SQLite) might be a better choice.
Don't use SqlCE use SQLite!
Yeah basically I really just want XAML files to be included in my re-factoring when I e.g. rename a variable, which if I understand correctly is the main advantage of `nameof` in the C# code. The XAML functionality could probably be done in the VS tooling without needing `nameof` since we already have partial support for F12, 'Go To Definition'
i just used to sqlce since 2008, i will give sqlite a try thanks 
Are you stupid?
When you play with local path your are near a border of plateform specific. Try to implement local storage in Xamarin, WPF and Universal Apps (If I am wrong, I am glad to learn something new!). For his question, I didnt say to move it, I said that he mays want to check a windows phone oriented subreddit next time.
Hey, thanks for the feedback. I'll look into the IHTTPActionResult. 
Have you tried to add de database with server explorer? (In VS)
Thanks a lot, you and /u/zerratar helped me go in the right direction. Both of the telnet commands were working properly. My problem was that the client was going to the router's ip (I thought the router would send it to my computer because of the port), I changed it to my computer's ip and it worked fine.
Thanks for the heads up about the one database, I'm not 100% on how exactly databases work yet. Will have to explore it a bit more. Thanks again for your help!
As /u/oltronix said: j = ++i; Is an assignment operation, which means to stuff whatever is on the right of the equals into whatever is on the left. Right: ++i Left: j So the action is this: j &amp;lt;- ++i The other important piece is what ++i means. ++ is a *unary* operator, meaning it works on one argument - in this case, i. The ++ operator can either appear before the argument (prefix) or after the argument (postfix). If you were doing something else, this order might matter, but in this case it does not. Either way, j = 3. 
My SO uses a 21" iMac so I decided to see if I could get my .NET environment up and running on it. I tried a few things including [Xamarin](http://xamarin.com/platform) and even Sublime Text with a few additions to compile my C#/MVC but nothing came close to the native feel of Visual Studio 2013 on Windows 8.1. I moved on to [Parallels Desktop](http://www.parallels.com/uk/products/desktop/) which has that nice mode which makes it look as though specific screens in windows are native to OS X. If I'm truly honest though, I just ended up using Boot Camp. I like Windows...
Ultraedit (think notepad++), Eclipse, Visual Studio on Windows in Parallels. Depends what I'm writing in.
The question marks after the "int" means they are nullable ints, which basically means they can be an int or null. Are you saving the changes to the database after you call the insert?
*Edit: dear lord, I'm never coming to this subreddit again. Fuck me for having an opinion.* I used to be okay with Windows, but over the years OS X has spoiled me and I can no longer tolerate what used to be minor annoyances on Windows. I'm just so incredibly productive on OS X that I feel like I can't get any work done on Windows. Now I only use my boot camp partition for Steam and win32 assembly. I especially hate Visual Studio… too many options to configure, it's overwhelming (and representative of the entire OS imo). It takes around an hour to properly theme my editor, and another hour if I want to theme the entire IDE. Changing keyboard shortcuts also seems to have no effect, probably because I'm not changing it in the right scope though. Anyway, I agree on the last point. Boot camp &gt; VMs
I'll give mono a shot then. It's fine for .NET right? I just need something in command line.
I use a windows vm through VMWare fusion, and just run visual studio. It's a pretty terrible solution, and I don't recommend it to anyone. 
It's funny - my opinion is the exact opposite to you... I can't seem to ever get to grips with OS X. I really did try but I just don't like it at all, I always got the feeling OS X struggled to cater for developers. Same as Visual Studio, I don't think there can be a better IDE and certainly no better debugger. Everyone's different eh? Let us know what you go with in the end - I'm interested to hear! 
I've done that before. I feel your pain.
&gt; Unhandled Expecption? From the IEnumerable.Cast&lt;T&gt; example 
Xamarin Studio for mobile development, Visual Studio inside Parallels for non mobile C#. I tried VMWare Fusion, but it had awful performance for me.
Using Thread.Sleep() as others have mentioned, you can put together a neat lite function that will spit out a line of text with a short pause between each character. I'm on mobile now but I'll post an example later if you are interested!
If you really want an answer for this you need to do some profiling. I recently found out about dotMemory, which a 5 day free trial, so that might help for your immediate needs. Alternatively you can do a heap analysis with windbg, which is a lot more involved. 
That's what I do! Its not that bad (if you have SSD)... But multiscreen 'spaces' on OSX is just painful compared to a proper windows multiscreen setup.
yes i did but there is no sqlce there
I've tested and benchmarked both significantly, and I can tell you that Parallels is faster. I own the latest version of both, and I re-test with every upgrade to each.
Eh, OSx hasn't hit home with me. The ease of use with Unix based systems and administrative rights in the console, makes me love OSx. However, I find the UX disconnected and not linear. The file system in the GUI is more confusing than the file system in the console, which cannot be a good thing. Not to mention the difficulty of splitting windows based on screen location, the lack of true full screen with most video players, etc. On top of that, my logic board craps out in 2 years...customer service was great, but I am still having crashing issues. I guess I came at the wrong time. I do love web development on Mac for most my side projects in PHP, Python, and Ruby. But with .NET I will never not use Windows.
Oh, I know. Was just supporting your comment. Old people...pfffft.
I use both OS X and Windows and on the former I don't use any IDE. Really nice for small projects. On an unrelated note, VS needs to slim down. A lot. 
I agree that this could be done easily with SQL, but it would also be a great fit for azure table storage/azure blobs/amazon dynamo DB or something like redis if you are only ever going to look these snapshots up by a single key. I personally like the flexibility of NoSQL and I agree this is an ideal scenario so I would go with a key-value store, but SQL would also work fine.
Hey guys. Thanks for all the upvotes :-) for anyone that want to, please leave a comment. This is basically my second tutorial and I'm still very new to it. So it would be awesome to get some pointers. Was it easy to follow and understand? Did I miss something you wanted/expected to see? What would you love to see in the next part? Best regards, zerratar
Thanks for the heads up, I'm going to try it out now. Does that mean you have two Windows licenses?
I get free licenses to parallels and still went and bought a license to VMWare. Had nothing big issues with Parallels no matter what version I use 
If you don't want .Net then why not just use Swift for iOS and Java for android? Xamarin is a great option if you want to share code. If you don't care to much about that (you won't be sharing code with Rem) then it's the wrong technology for you. 
I don't think he was asking for help on MVC - simply SQL/NoSQL advice.
I would agree that something like Redis would be a perfect fit for this project. MongoDB, RethinkDB would all handle what you are asking brilliantly. 
In SQL Server, I would just create a stored procedure that generated the data snapshot and stored it as an XML blob. I like stored procedures because they tend to be much cheaper than shipping all of the data from the database to some application, just to turn around and write it back. Obviously if your source data isn't in the database to begin with this advice doesn't apply to you.
So would a blob column in any database created since the late 80's. This is the definition of a trivial problem.
The system at the stores doesn't have a DB, and is mostly based on proprietary binary files (lots of legacy on one end of this system, including DR-DOS machines, but that's a different story). In this instance my code is a plugin to this system, so I'm actually using their passed objects to gain access to the data, and manipulating it into my dashboard. But yea, if there was already a DB involved .... 
STOP USING WINFORMS /RAGE Use WPF.
I wish (since I own my part of this product ...)! While I'm confident that growth will stay the same (based on 15 years with this product), I'm also building for scalability from the start. 
Unless you know exactly why you want a NoSQL, which I don't think you do, just go with relational. If you're gonna hydrate(?), I think you mean serialization and deserialization, you might as well convert stuff into JSON and dump it into whatever, textfile, database, excel, whatever. This is trivial.
Sounds like you don't need a database at all then. Just dump it in a cache (e.g. NCache, Memcache, AppFabric, etc.) and call it a day. Heck, if the data fits in memory I would just use ASP.NET's built in cache.
Please keep in mind the ability for this company to find good, inexpensive resources to maintain the product. If the problem can be solved with a generic .NET stack, then don't get fancy. KISS. 
Rethink would be pretty awesome here. Total overkill, but awesome. 
I use SQLite (SQLite.Net PCL ORM) with SQLite.Net Extensions.
&gt; Edit: it is unlikely you will need to build 'from the ground up' every 2 minutes. Since most of this comes from binary files that are changed constantly by another system (and rely the contents of dozens of other files), about half of it really has to be rebuilt. Current data is recalculated / rebuilt, but some of the historical data is reused (last week/ month / year / quarter comparisons). But this portion of the software is several years old, is well optimized for what it does, and is stable and fast. The new requirement is getting this data to the web / mobile. 
It's coming in SQL 2016 which is still in CTP. I wouldn't even put it under consideration as an option right now. I say prototype out a NoSQL solution and see how it goes. From your description it sounds like it should provide what you're looking for.
Stupid... how could I miss it? Thanks for pointing it out!
No, I just convert my VM temporarily for benchmarking. btw, don't use a boot camp partition with Parallels or VMware Fusion, it incurs an approximately 10% performance penalty for the direct disk I/O to your boot camp partition versus basic file I/O. Applies to both VMware Fusion and Parallels.
Boot Camp is slower on Parallels and VMware Fusion, so if you do switch to virtualization, import your VM don't leave it on the Boot Camp partition. It's about a 10% disk access penalty. I don't use Boot Camp primarily because I can't use my two Thunderbolt monitors in Boot Camp. It'll only use one. The hardware support on Boot Camp is pretty much shit. I mean it functions to the bare minimum, but that's it. With hardware assisted virtualization, you get near native performance under virtualization. So Boot Camp just isn't worth it IMO. If they had awesome driver support, I'd use Boot Camp *maybe*.
What are the options for building an on-premise microservice cloud at the moment? I've tinkered with Microsoft's own Service Fabric, but it's still very new and doesn't seem to be production ready. From what I gather it'll be built into Windows Server 2016 which is still a bit far off.
"switch" is the wrong thing to use here. switch is used when you want to control the flow based on a variable that could be a number of *constant* values, or a default action. There is no way to "trick" the switch statement, it expects constants (or anything that can be calculated at compile time). Even if there were, it would be very bad practise. An if statement will suffice, and it doesn't need to be nested... 
If your data isn't big just keep it in the cache. It will be quicker access than a database that way anyway. 
this is awesome, but sadly I can't { } after the : and call the solution method again. anyway I learned something and that's great, thanks
It really isn't. Post what you've got and I'll see if I can show you how to better structure it.
It is not a stupid error, it is a simple error you made and you learned from. We all make these mistakes all the time, we just get faster at fixing them.
I think one of the beauties of microservices is that they leave your options open. We are leveraging OWIN and mono to run our microservice executables and looking to containerizing them so we can standardize our different environments. More importantly, we are running all of this on linux machines (virtualized) which poses some barriers that we have had to get around. Unless you are running or need to run .NET, you shouldn't have quite as many hurdles as we have had. 
I already have it set up, so it's not really an issue, haha. I use it mostly for gaming, so it definitely wouldn't get the performance I need out of it under a VM.
Yeah that's right, although I'd call it something a bit more descriptive than 'a' ;) Also looking at your code, you might benefit from the IpAddress class in System.Net. I've not used it a great deal myself so I don't know exactly, but it might simplify a lot of your code. https://msdn.microsoft.com/en-us/library/system.net.ipaddress%28v=vs.110%29.aspx
This appears to be a 4 year old Chinese blogspam rehash of [dotnetperls.com/optimization](http://www.dotnetperls.com/optimization).
That tip also is not accurate anymore since the addition of `MethodImplOptions.AggressiveInlining`.
Did you down-vote because you didn't get to answer the question?
I use them when I need interchangeable modules that are manipulated by the same script or similar scripts with different functions. There are people, I imagine, that use them frivolously.
Whoever wrote this snippet needs to be lectured.
&gt; It's a ridiculous question to those that know how and when to use them. There's a still large chunk of the community that resist them and claim them to be unnecessary complexity. Then it's not a ridiculous question. A question is not ridiculous if the person asking the question doesn't understand the concept. Interfaces are abstract, very difficult to conceptualize and are not often needed for single developer projects. This blog post did a poor job of justifying the need for them. The explanation was wordy, and the example was contrived. I've *never* read a good description of interfaces. Blog authors all claim they are very important but do an absolutely shit job at defending that position. The truth of the matter is the utility of an interface is not apparent until you actually face a problem that requires an interface. But - if you don't know the solution to your problem is an interface, because you don't understand interfaces, then you're still stuck. Regardless, I don't believe condescension is the appropriate pedagogical approach here. 
&gt; I was using .Result on the return value from ExecuteSQL and apparently that caused it to hang. Not sure why that would have an issue, but apparently it does. Here's a great article on the topic: http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html
[This](https://www.simple-talk.com/dotnet/.net-framework/designing-c-software-with-interfaces/) was the article that helped make it click for me. 
C# is a language, you are asking if a language can send a sms message. Edit: I just googled "C# send text message" and the first answer I got was from stack overflow where the question has been asked and answered. 
Mocking doesn't require interfaces. It's usually better to use abstract classes in order to reduce the amount of fake code to a bare minimum. IoC, same answer. Multiple inheritance... that just restates what an interface is, not why you would want one.
I don't think you read that comment correctly because you just repeated what I said as an argument against it, or at least that's what it looks like... but moving on... This is part 3 of an ongoing series... I take it from the beginning in a vlog that is also available on the blog. This post is exploring 1 example in a progressive manner which is to use an interface to share an interface across several unrelated objects without doing something silly like placing them in the same family via inheritance. &gt;The truth of the matter is the utility of an interface is not apparent until you actually face a problem that requires an interface This is something I say often, and I agree hence this post. It starts with some info and creates a problem that then gets solved. I'm sorry you don't like it, but no one can be expected to fry up a single dish to satisfy all palates which is why there are parts to this topic on the blog and why it's not titled "The only explanation of interfaces you'll ever need". People think differently. &gt;The explanation was wordy, and the example was contrived. I wish I were some zen master than could sum up a nebulous topic like practical interfaces in a haiku. That isn't what development is about. Sometimes we can come close (e.g. fowler design patterns), but when you're trying to come up with a series of examples to justify "unnecessary complexity", it just isn't going to happen. As for the example being contrived -- I simply cannot agree with you. That is as generic of a real world scenario as it gets while still defending the need for an interface. I gradually push myself into a corner and then solve it with an interface. In my part 1 and part 2 posts, i keep them even simpler. Case in point: the article that Nii posted that helped make it click for him doesn't work for me at all. &gt;I've never read a good description of interfaces. Blog authors all claim they are very important but do an absolutely shit job at defending that position. I actually agree with you on this one for the most part, but we're engineers. Engineers are FAMOUS for being terrible at explaining anything in terms everyone can understand. This is how great evangelists stand out from the crowd; they have the gift of understanding AND ability to teach it. With that being said, people think differently, and coming at a topic from one angle will make it click for some and muddle it even more for others. 
The difference between mocks, fakes, and stubs was invented by a technologist, i.e. an advertising rep pretending to be programmer. It is a meaningless distinction that serves no purpose other than to give the author something to talk about.
RealEnterprisClass is "my" class in this case. And I want to test new method **in** it. 
Then either pull it into a high level class or test it properly using it's real dependencies. Your current design sounds like a ball of mud that's so mixed up that you can't test it properly. Hence all of the low level mocks. As a rule, the more mocks you have the worse your code's organization.
I worked with a developer who said every class should have an interface. After he left we spent countless hours trying to maintain his code.
I would say that's either a testament to his capacity to write generic and reusable perfectly encapsulated code or a bit neurotic.
First of all with Nsubstitute I don't have any mock/fake/DontCareAboutTheName classes. And for unit test I don't need to set up all the real dependencies - If my class do some logic &amp; talk to database for tests that test logic I don't care about database at all. We are back to the topic of the post - with interfaces you could uncouple anything even if it's ball of shit. I don't like the approach - if it's a bad untestable code just rewrite it. I am much happier with auto mocking approach - even if you are working with bad code you could test it.
It was a testament to his over-engineering.
Code in another class that you wrote is *absolutely* a dependency. If you take a concrete class in the constructor of the class you are attempting to test, then the class under test depends on the implementation of the other. You can't test the classes independently of each other.
Ok, I skimmed that article, and certainly don't disagree with it (it is factually correct), but I'm still not seeing the huge value proposition. Regardless of the implementer, you have a hardcoded interface (with or without using formal Interfaces). Yes, it's true that if(!) you have to switch your logging library, in retrospect then it's certainly architecturally cleaner to have implemented via interfaces. But if you hadn't used interfaces, can you not simply refactor your non-Interface based class to redirect to a proper interface based implementation, *if and when that happens* (if it ever happens - because as much as new developers like to imagine it does, in the real world it's actually quite rare). So yes, this is obviously going to be a hack when you look at it, but I'm just not seeing the big issue, or any material consequences. You've got a singular interface (as opposed to an **I**nterface) where you refactor all the calls to the new framework (or make it support proper instantiation via config file setting, whatever), done. This one class will be ugly, and OO purists will certainly laugh at you, *but who cares*? I genuinely want to understand the issue here, but articles like this which are academically correct really don't communicate to me any sort of massive value realization. Am I missing something?
I don't think any of the "*Async" methods in ADO were intended to be awaited in this way. I've had this problem in the past as well. I haven't actually dug inside of it to look for myself, but I think those Async methods were around before async/await and handle themselves differently (pre 4.5) -- I recall reading something about synchronous DNS name resolution happening on a different thread than the actually execution or some other bafoonery. My guess is that the fact they are awaitable is actually just an artifact of the retooling of the Task class. Please let me know if you discover something different. &amp;nbsp; Straight from MSDN: `This method implements the asynchronous version of ExecuteNonQuery, but returns a Task synchronously, blocking the calling thread.`
Yes that's the correct way to do it -- or at least that's how we were taught back in college (although looking back, almost everything taught in college turned out to be wrong...): you have a loop wrapping the bulk of your program that runs your logic over and over until it encounters a sentinel (e.g. a break statement or menu value, etc) at which point the loop ends and the last line of main is hit, thus exiting
I've actually run into this recently, and the value can come later in those situations. Here was the situation: &gt; But if you hadn't used interfaces, can you not simply refactor your non-Interface based class to redirect to a proper interface based implementation, if and when that happens (if it ever happens - because as much as new developers like to imagine it does, in the real world it's actually quite rare) As an Agile Scrum team, we find ourselves doing this a bit more than rarely. And more time than not, introducing the interface isn't that difficult after the fact. If your code is well factored to begin with, then it's kind of like laying a template on top of it and making the entry points to your class touch the interface. If your code is not refactored, then it could be an exercise in normalization, but I haven't encountered too many cases where I wasn't able to make that happen in relatively short time -- but everyone's code base is different. But here's a case where it saved us: We were using EnterpriseLibrary 5 Caching block and had been for quite some time. We had a number of facades wrapping some of the cache logic to make it fit our application (it was pretty lame to be quite honest, but that's beside the point). We wanted to upgrade to EnterpriseLibrary 6 for the updated Logging block and actually did so, not realizing a cold fact -- They removed the Caching block completely! So our logging was working, but caching was straight up b0rked. There was way to much code to refactor and we were too stubborn to revert. As I sifted through all of this legacy code facade garbage, I found that in the end, it was calling this object called CacheManager, when I F12'd into it (resharper decompile, I'm in your codes spying your sources) I saw that the property in the Caching block was actually not a concrete class, rather it was ICacheManager. Splendid! Knowing that we didn't have a enough time to swap out all of the caching layer with the .Net caching stuff that replaced it, I decided to preserve the code but fix the root problem which was that CacheManager no longer existed in this package. So in about an hour or so, I whipped up our own caching mechanism and implementing ICacheManager, then plugging that guy in where it was now missing. Done. Ran the the test suite and had QA do a regression test -- no problems; problem solved. The benefit of interfaces really shines when you need to be able to replace a dependency with a different implementation. Sometimes it's to solve problems like this one I just described, sometimes it's because you want that dependency to be variable at runtime (e.g. factories), sometimes it's just to create windows for unit testing. By creating dependencies on interfaces instead of concrete classes, you're decoupling yourself from that concrete class. Your dependent class no longer cares what it depends on as long as the interface is met. So while you're architecting your next masterpiece, if you create something that you can foresee changing in the future, considering extracting the interface and using that instead because it could save you later. Or don't and deal with it when the time comes; either way, it's there for you. &gt;You've got a singular interface (as opposed to an Interface) where you refactor all the calls to the new framework (or make it support proper instantiation via config file setting, whatever), done. This one class will be ugly, and OO purists will certainly laugh at you, but who cares? Why does this class have to be ugly?
now you're being deliberately dense.
Well I don't want to ignore that community. If I can help someone understand anything better, then I will always try.
What's the difference? If you are going to call one fully tested class a "dependency" and say it needs to be mocked out, why not another? This isn't an academic question. I've worked on teams that had so little faith in their own code that they mocked out every class they wrote, regardless of whether or not it actually accessed resources aside from application memory.
Ok so ... if you were to test 2 scenarios: a) How your class behaves when the datasource (the DEPENDENCY) returns a list of users when GetUsers() is called and b) How your class behaves when the dependency returns null instead of an empty list when the same method is called, you would do what? Create 2 completely different mocks where in mock A, GetUsers() returns some users and mock B doesn't?? And that's somehow "better"? This is the whole point of mocking frameworks. You set up your dependency to behave a certain way before injecting into the class under test. This way you're not wasting your time building a bunch of fully rolled mocks for every situation when 98% of the dependency isn't even going to be touched in your UNIT tests. Yes, it is a bullshit generator because what you need in these cases is predetermined bullshit. var userSourceMock = new Mock&lt;IUserSource&gt;(); userSourceMock.Setup( mock =&gt; mock.GetUsers()).Returns(null); var myClassUnderTest = new TestClass(userSourceMock.Object); // now that the dependency is behaving as you want it to, run your tests var result = myClassUnderTest.DoShit(); // the null was dealt with and didn't cause an exception as planned so winner Assert.IsTrue(true); 
&gt;Multiple inheritance... that just restates what an interface is, not why you would want one. You implement interfaces, not inherit them. By implementing them, you're not inheriting anything, only exposing the fact that you contain those methods. Inheritance implies that you're taking on the traits of another class. I realize that interfaces are typically sold as the way C# achieves multiple inheritance -- but the proper salesman usually says "We achieve multiple inheritance through interfaces... kinda." Interfaces are how we share common interfaces between unrelated objects (one use, anyway), but inheritance suggests that the objects are related.
For me, if I find that F12 is taking me to the interface, i'll back up and right click &gt; go to implementation. It'll take you straight to it if there's only one, or give you a list of implementations if there's more than one. That's usually good enough for me. &amp;nbsp; Your point is a good one, if you're dealing with code that you cannot modify, hopefully they used interfaces where they allow the implementations to vary. Likewise, while you're writing your own code, I think it's good form to consider interfaces for your input and/or output if you feel it's reasonable to think that the implementations of those things could change in the future. This is especially important if you're working on a common library that may be shared across more than one component or when dealing with naturally variant dependencies, e.g. datasources or unit testing. &amp;nbsp; This is classic "choose the right tool for the job" kinda stuff and I'd add in "don't be selfish, think about the potential comsumers of the class". One rule of thumb I tend to follow is that you should always be using proper accessors for everything regardless of the size or scope of your project. For example, if you're writing stuff that that no external assembly would have any business accessing, then it should be internal. And then of course, proper public, private, protected accessors. The reason that I point this out is that it can act as a guide for identifying good candidates for interfaces. For example, if you're coding up something that is public instead of internal, then you're telling me that you expect something external could access it, and now your eyes should be wide open for opportunities to extract interfaces in those exposed members. On a side note, I would never suggest that you extract an interface from every class, but I would suggest considering an interface for every class, input, or output. It doesn't hurt anyone to consider it as part of your workflow and it might just save you in the future.
I challenge you to support any of those claims.
A good way around what? You still haven't support either claim, only restated it. F12 may take you to the interface, but that's like complaining that your power button your laptop doesn't turn off your lights too. Right click on the reference and 'Go to implementation'. More lines of code does not make things unarguably harder to follow, and frankly I find the comment juvenile. In fact, it doesn't add any extra code to the implementing class since the methods are already there if you chose to have them. The interface just declares them. You do not need TDD for mocking; I have no idea what you're talking about. Mocking and TDD are two different topics. The mocking frameworks require interfaces because they are implementing the interface for you but only for the members that you're trying to mock. This is in no way a limitation of any technology. There isn't "a way around this" because there's no reason to go around it.
This is just another way to show it and I had it planned for maybe parts 4 and 5 or later. I've been concentrating on using interfaces for inputs and have not yet given examples for outputs. I do however mentioned factories in several different places; I just haven't shown the example yet.
You only need interfaces for TDD if you're using a mocking framework that requires it. And that isn't even entirely true... You can still do TDD without a single interface...
My Gods. You are right and I am wrong. Its at least extremely common to do tdd with a mocking framework that relies on interfaces.
They're called controls in the .NET framework. Is there a specific control you're looking for? If not, .NET should have everything you need, since you're just starting. 
&gt; They're called controls in the .NET framework. Thanks for the term :) &gt; Is there a specific control you're looking for? If not, .NET should have everything you need, since you're just starting. It has a good set of controls for a start, that's true. I'm not looking for anything specific. Just trying to get a feel of developer's ecosystem for C#. I know a couple of sites and component producers for Delphi and now I'm looking for the same for C#.
If you are a hobbiest, the default controls that come with the framework should be fine. For professional use I'm a fan of the DevExpress control suite which is pricey for personal use but (IMHO) a phenomenal bargain for what you get with the subscription: https://www.devexpress.com/Subscriptions/DXperience.xml
I've taken a quick look. Yes, something like that. Although it's a bit pricey.
Exactly the stuff I'm looking for. And yeah... the only downside is the price. It goes into my bookmarks for when I decide it's worth the investment :)
Although I agree that those are good and I use them a lot. Those are really for if you want the 'metro' look in desktop. To me they don't provide much past styling if you don't need that look
I've used almost all of Telerik's (another custom control company) offerings as well. Worth checking out.
Syncfusion has a lot of controls and a community edition for free. Although I think they are only for windows 8/10 apps.
Yeah. Wasn't really sure what OP was looking for so I figured I would just share the link. I actually kind of thought that the answer OP was looking for is WPF or WinForms.
There's not really any way to support inheritance or abstraction of static interfaces in C#, IIRC. Is there any particular reason you *need* weight or brand to be static properties?
I think Math.NET should work. You can find it on nuget.
Since when were integration tests a bad thing? Difficult to write sometimes, but bad? I thought about going into the lecture about false decoupling and the concepts of coherence and encapsulation, but that would be pointless when you are adhering to superstitions about integration tests.
You can do this, if you're dead set on it, but there can be some unintended consequences. +/u/CompileBot C# using System; public class Program { public static void Main() { Console.WriteLine(Car.Brand); Console.WriteLine(Prius.Brand); } } public class Car { public static string Brand { get { return "BaseBrand";} } } public class Prius : Car { public new static string Brand { get { return "Prius";} } } 
Output: BaseBrand Prius [^source](http://ideone.com/BGTY8n) ^| [^info](http://www.reddit.com/r/CompileBot/wiki) ^| [^git](https://github.com/renfredxh/compilebot) ^| [^report](http://www.reddit.com/message/compose?to=compilebot&amp;subject=Report%20Abuse&amp;message=--report%20http%3A//www.reddit.com/r/csharp/comments/39vngr/i_dont_have_a_clue_how_to_summarize_my_question/cs6zip2%20Include%20your%20reason%20for%20reporting%20here.) 
It's not on the same level as the DevExpress suite posted above, but there is the Xceed WPF Toolkit which has a free edition and contains some useful extra controls. 
 Understandable. If I answered with UI libraries I have used it would have been MahApps or Telerik. And I only used Telerik for phone.
While you are correct there is one important catch that is commonly missed in interface discussion. While your class doesn't get any new behaviour when implementing interface it's users usually do. The most canonical example is IEnumerable - after you implement it users of your class will have new things available to them. Same thing happens with stuff like IDrawable etc. So interface allows us to share behaviour just the different way than inheritance.
The .NET library is pretty big, so there's not a tutorial on "the .NET library". It's just a huge library of class definitions. You use it like you use any other OOP library, by instantiating objects from it and performing operations on them/with them. Here's a list of its namespaces: https://msdn.microsoft.com/en-us/library/gg145045%28v=vs.110%29.aspx Your question is very vague, so I'm not sure how to answer it. This tutorial series covers a lot of stuff in C# and in the .NET library: https://www.youtube.com/watch?v=SXmVym6L8dw&amp;list=PLAC325451207E3105
Instead of using static fields for the brand and weight, you could have a static field holding a default instance of each car. public abstract class Car { public abstract string Brand { get; } } public class Prius : Car { public static readonly Prius Default = new Prius(); public override string Brand { get { return "Toyota"; } } } public class Bronco : Car { public static readonly Bronco Default = new Bronco(); public override string Brand { get { return "Ford"; } } } Then you can use string brand = Bronco.Default.Brand; as well as Car car = GetCar(); string brand = car.Brand;
hmm ok thanks but what kind of jobs are popular if you are a c# programmer? What jobs are often recruited? Is it easy to get these jobs? Do you need to know something more than c#? and do you have anything like that video series but in text? what is the best c# tutorial/book there is? It would be nice too if it wasnt console they were teaching but instead teaching in visual studio windows forms with .net 
I have [this book](http://www.amazon.com/Pro-NET-Framework-Experts-Voice/dp/1430242337/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1434361032&amp;sr=1-2) but I barely use it due to the fact that it's just easier to look stuff up online. I'm not a professional programmer so I couldn't tell you what the job market is like. &gt; It would be nice too if it wasnt console they were teaching but instead teaching in visual studio windows forms with .net The core of your programming work is usually data processing. The [GUI is just a wrapper for your data work](https://www.youtube.com/watch?v=hkDD03yeLnU) and usually shouldn't constitute the bulk of your programming work depending on what you're working on. However, "Forms" is just another class library in the .NET framework. Visual Studio is basically drag and drop for basic Forms. WPF can be a little more complicated to learn due to XAML syntax. You said you worked in Javascript so I guess I kind of assumed you were familiar with working with data and how the GUI really doesn't usually constitute the bulk of a program (except maybe in game programming).
its just that text like this hurt my head: public static extern void mouse_event(int dwFlags, int dx, int dy, int dwData, int dwExtraInfo); 
I'd suggest you to get the Head First C# book and just read it. You say you want something that "briefly gets my memory back on what polymorphism is"... But frankly: That's stuff you don't forget when you know it. And apparently you don't.
&gt; Interfaces make code harder to follow. I have not found this to be the case. If anything I find the opposite to be true.
A class's constructor automatically calls the parent class's default constructor before doing any work. You can use the base and this keywords to call a different constructor from either the parent or current class, respectively, instead. public abstract class Base { public string Foo { get; set; } protected Base(string foo) { Foo = foo; } } public class Derived : Base { public Derived() : this("foo") {} public Derived(string foo) : base(foo) {} public Derived(int bar) : this() { /* stuff with bar */ } } Or you can call the parent's default constructor, if you want, but that would be redundant.
As someone who implemented Bi Temporal tables in SQL since SQL 2005, all I have to say is "Finally!" Roll your own temporal tables is not fun. Between indexing and teaching things like EF how to map to them, ugh. Going to put a project on the books to update to this a soon as it RTM. 
WPF is built around building custom controls, and you can definitely build an up/down in wpf pretty easily. Extended wpf even comes with one, so WPF still does that.
IMO, "comes with" and "can be extended to do" are two different things. In the case of the numeric text box, I wrote one and used several existing ones...from external libs like ExtendedWPF. So even if you can extend it, there's a lot of things WPF doesn't do out of the box.
It is not returning any error, it just doesn't load the main page http://www.anilinkz.tv/ with the cookies obtained with this pass request.
Look at the output. There surely is an error.
I thought about that but newtons method involves taking a derivative. I would need something else to differentiate
I have not. This sounds promising. I will take a look when I get home. Thank you!
This article has been removed as it is unrelated to C#. Perhaps consider posting it to /r/sql, /r/SQLServer, /r/webdev, or another related subreddit. If you feel this action is in error, feel free to contact the moderators of /r/csharp.
I don't know why you need so many words to state there's multiple _implementation_ inheritance like in C++ and there's multiple _type_ inheritance like in Java and C#. The latter is done through interfaces in Java and C#. That's it. That's the reason the interface feature is in Java and that's also the reason why it's in C#: to be able to implement multiple type inheritance. How the type is implemented is irrelevant, as it's irrelevant to the user of the type. That interfaces can be used for e.g. mocking is nice, but technically that's just a side effect of multiple type inheritance: you just create another implementation of the type. I don't know why you need so many parts of that article, there's really nothing more to it. 
This is, frankly, fucking fantastic. I have worked with many projects that require "historic" data, and it is a pain in the ass. Having something that automatically does it is a godsend.
from the scipy.optimize.fsolve documentation: &gt;fsolve is a wrapper around MINPACK’s hybrd and hybrj algorithms. One solution could be to compile that Fortran library, then create a C# wrapper to call it. I think that sucks, but according to one of the top comments on [this thread](http://www.reddit.com/r/csharp/comments/2xmhni/why_does_c_have_such_elementary_mathstats_support/), it's super easy. It also wouldn't shock me if there are dozens of github projects that have done the same thing. If you're looking for a good iterative solver that doesn't require gradient support, google "Nelder Mead C#." It's not fast, but in my experience, it's robust.
Not to be offensive, but how did you get in this situation? I feel like it's if someone asked me to "create a marketing campaign" or something I have no idea about, lol. Anyway, let's solve the problem... read in just means to take files as input. Find out if he wants a console application or a graphical interface. So, you will load the file into memory, parse it, and do whatever he wants you to do with it. You'll probably need something like File.ReadAllLines() to do read the file. The string.split() method will help you parse the lines by the commas. Does that get you started?
&gt; `static extern void mouse_event(uint dwFlags, uint dx, uint dy, uint dwData, int dwExtraInfo)` This is an odd method used to simulate mouse things on the screen. 99.9% of stuff you do won't look like this. In fact, this is not preferred and you should be using [SendInput](https://msdn.microsoft.com/en-us/library/windows/desktop/ms646310\(v=vs.85\).aspx) instead, and even that is not something which is used very often.
I believe they have a WPF library too. Although i've only used the one for 8.1 apps (Needed a datagrid)
So this is about how to instantiate objects. How about you write a TileFactory whose responsibility it is to instantiate a tile, based on a list of tile types and associated weights. class TileFactory { private List&lt;Tuple&lt;int, Type&gt;&gt; _types = new List&lt;Tuple&lt;int, Type&gt;&gt;() { Tuple.Create(10, typeof(Tile1)), Tuple.Create(20, typeof(Tile2)) }; private int _weightSum; public TileFactory() { this._weightSum = this._types .Sum(t =&gt; t.Item1); } public Tile CreateTile() { // ... } } This way, a Tile's job is just to be a Tile, not to also know how likely it is that it will be instantiated.
Well basically I'm going to major in astronomy eventually and I asked the head professor at my campus if he knew of any opportunities I could take advantage of until I transfer to a university. Apparently he also works for a company that deals with a lot of space data stuff, so he set me up to work here for a couple weeks in summer for experience. I have experience in coding in smaller languages (way smaller) so he's been helping me learn C#. Problem is, I'm not sure how to do what he wants me too, and he's off at a conference so I can't get any help right now. I was thinking he meant something like that, but I just wasn't sure how to do it. He wants me to also use Console.Writeline() to track it, so I'd assume he wants me to do a console application. I was also thinking he wanted me to parse it somehow, but problem is I'm not sure exactly what to parse. I've opened it in excel, and the data includes a LOT of stuff. And yes I'll look in to those, thank you! 
Probably you have a directory of .csv files and wants you to pull them all in. That's the easy part. The question is what does he want you to do with it after you read it in. You can use Directory.GetFiles to get the file list then use filestream to read them in one by one. However, If you need to do complex things with the data after you read it in I'd agree with going with a csv parser that can quickly turn the csv lines into objects that makes life easier on you.
Awesome, I'll check it out. Thank you so much! 
Every business problem is a learning exercise! :)
CSV = comma-separated values. If you make a google spreadsheet with some rows and columns, you can download it as .csv and then use notepad++ or similar to inspect the contents. It's (you guessed it) rows of text that correspond to rows of spreadsheet, each column separated by a comma. Like said by others, reading this data is quite easy, just read the file one row at a time and for each row, split by comma to get the column values. After that, you need to know what to do with the data. You could parse it into ints and floats and enums and so on, you could write a custom object to hold each row or column. You cannot proceed until you know what to do with the data. :) Edit: I should learn to read. For converting to another format, if a converter is not readily available, you should find one of these format files and inspect the contents (if it's plaintext) to see what kind of data it contains.
Yeah I know where they are all located, but as I said before, he eventually wants me to use the data to generate CDF files. I'm thinking he'll probably want the data separated, but I'm not sure.
This kind of CDF, right? http://cdf.gsfc.nasa.gov/ I'd first try to figure out how [makecdf](http://spdf.gsfc.nasa.gov/makecdf.html) works. Like the other person said... try to understand what format this program needs, then you can make your program generate that from a CSV. Then your program can simply call the makecdf command and let it do the rest. 
[CsvHelper](http://joshclose.github.io/CsvHelper/) is a good library.
For those painful times when you don't have R#, you can still get there, it just takes an additional step. F12 takes you to the interface definition, then Ctrl-K, Ctrl-T will bring up the View Call Hierarchy window that will show you all of places that method is implemented. Not as seamless as R# Go To Implementation, but it gets the job done well enough. 
Based on the rest of the comments in this thread, [this](http://www.commitstrip.com/en/page/21/) seems relevant.
Well designed code is easy to follow. Take well designed code and swap classes for interfaces arbitrarily and now you have code that's harder to follow. Every pattern or practice has plusses and minuses.
&gt; Well designed code is easy to follow. Take well designed code and swap classes for interfaces arbitrarily Swapping things arbitrarily isn't well-designed now is it ;) For me, good use of interfaces can make the high-level conceptual design much easier to follow. 
I needed to do this a couple of years ago. I found a company Esendex (like them, I'm in the UK) - it must have taken me 45 minutes to go from Google to creating a developer account to sending a message. They have an API and a bunch of examples etc - really, it's trivial. It's practically a lunchtime project.
Why recommend a third party library when .NET already has a CSV parser?
Yep, I would have never thought to look in the VisualBasic namespace. Good to know, thanks!
&gt;* I'm mostly a beginner programmer &gt; * I'm familiar with the basic syntax of C# and other beginner stuff, but not much else. My issue is that I don't know how to do any of that, so what you said makes no sense to me. Thanks though :(
The simple explanations of *what* an interface *is*, is not problem. It's the *why bother with them*. There are hundreds of uses for them and the entire point of the discussion is the justification for interfaces in your design, not defining what they are. We have some people that think they are unnecessary complications, other people that just want to understand how they can be helpful and in what contexts. It is a wide topic and can thus warrant multiple parts as you can come at it from a number of different angles. Saying there's nothing more to it is a bit narrow-minded -- that or you're justifying thinking it's perfectly reasonable to explain all the wonders of the world by saying "people do stuff". What you just described here is 1 idea about interfaces in C# that happens to be inaccurate. Interfaces are NOT how you achieve multiple inheritance, but it IS how you share a common set of functionality. "Inheritance" implies that an object "IS" another object (i.e. is related to the base) where an interface is how a class *declares* a potentially common set of members *without being related to another object* in more of a "HAS A" type fashion. Again, "IS A" vs. "HAS A". It's the closest thing we have to multiple inheritance without actually being multiple inheritance. &gt;That interfaces can be used for e.g. mocking is nice, but technically that's just a side effect of multiple type inheritance: you just create another implementation of the type. I'm not sure this is a coherent thought. You basically just said multiple type inheritance and encapsulation are the same thing.
If you create a class without a constructor, the compiler will add a default, parameterless constructor in automatically. If, however, you add a constructor that takes parameters, as in /u/Canthros' example Base class, you will no longer have a default, parameterless constructor. As a consequence of this, you also have to make certain that any class that does derive from Base calls that constructor, as you've demonstrated with your chaining examples. In this case, this is exactly what you want, as you'll never want to instantiate a derivation of the base class without having supplied it a string. I felt it was a nuance to the language worth pointing out explicitly for anyone who is still getting familiar with this aspect of inheritance.
This looks promising, thank you! I'm surprised that I never found such a program in the time I've spent reading about wrappers so far.
Because sometimes the built-in options suck, whether it be performance reasons, lack of features or maybe even just lack of syntactic sugar/ease of use. 
If you go back to the first-principles definition of a derivative, it's trivial to approximate the derivative of a function. f'(x) = (f(x + h) - f(x))/h, just set h to be something tiny like 10^-6
Depending on what library you're using to interface with the database, you may need to call a method to save the changes. Look for something like userData.SaveChanges() or similar. Entity Framework doesn't require that for stored procedures, but it does for modification of tables directly
I don't think I have one... unless the built in templates that you can add in Visual Studio input them automatically. I am looking that up now. Is there a way to see how many instances of a page are being loaded within an app?
If an automated binding tool like SWIG or CppSharp isn't to your liking, you could manually do the interop. You could write a wrapper in C++/CLI, but you said you don't know normal C++. I could post a C++/CLI template I wrote to automatically wrap a native class. Another choice is to look up P/Invoke, which allows you to import C functions as extern methods, but I'm not sure that works with C++.
See http://blogs.msdn.com/b/visualstudioalm/archive/2014/04/02/diagnosing-memory-issues-with-the-new-memory-usage-tool-in-visual-studio.aspx
Hey thanks a lot! I really appreciate it, there is so much to learn and absorb in the .NET world. Do you think that the app going to a black screen is memory issue, or possibly something else all together? Again, thanks for your help!
Thank you for that addition. It's been so long since I didn't have resharper that I've forgotten what was an add-in and what wasn't.
I totally agree with the overall statement, but I'm not sure I agree with the first statement in your example. The example seems to describe users getting additional functionality by add additional functionality; that's not exactly a benefit of interfaces. However, by implementing the IEnumerable interface, you can now use that class anywhere else that IEnumerable is accepted. In fact, by doing so, you're encapsulating your object as that interface. I think that is pretty cool
It does, but Microsoft recommends C++ Interop instead. (SWIG uses Pinvoke, BTW.)
If the sdk has a dll for it, you can sometimes just directly port the dll into c# ( http://stackoverflow.com/questions/1909127/how-to-bind-c-dll-to-my-c-sharp-program-wince ) It definitely works if the dll has "extern C" calls in the headers. I'm not sure if it works with a full c++ dll. 
I wasn't aware of the built-in textfieldparser either. However, CsvHelper is more comprehensive. You can read a csv file directly into a collection of objects, map column names to property names, etc. For those more advanced scenarios I can recommend it. Using it a lot with no issues.
CSV is already an unsafe file format. It's called comma separated values, but no one uses comma. There are no escaping rules except Excel's text fields, and it is culture sensitive. What separates values varies, some use semicolon, some use spaces and some use tabs. I've even seen $##$. Guess why they used that! It's really an unfit file format for data exchange, but its so commonly used because it's "so simple". 
There is a C# library for CDF as well.
&gt;C++ Interop is recommended over explicit PInvoke because it provides better type safety, is typically less tedious to implement, is more forgiving if the unmanaged API is modified, and makes performance enhancements possible that are not possible with explicit PInvoke. However, C++ Interop is not possible if the unmanaged source code is not available or when compiling with /clr:safe. https://msdn.microsoft.com/en-us/library/2x8kf7zx.aspx
I'm not 100% clear on what I just read, but to be honest, I've always been a bit hazy on the description of the anemic model as well. Having some other class control the interaction between domain classes seems to be a natural and common thing. In our projects, the classes that contain the business logic are actually implemented as command object. Basically, you have a single command (that implements a common interface, actually) that has inputs and outputs. Those inputs and outputs are typically domain-type request and response classes that contain instances of the necessary domain classes in order to perform it's job. &amp;nbsp; What I like about this is that while may not be the purest OO approach, it does facilitate SOLID design and with some wise use of Fowler patterns (which is bordering on the ironic), delivers you some damn clean architecture. Domain classes only contain data and behaviors that pertain directly to that class (cohesive) and little to nothing else (save for things like visitor 'accept' methods). Any ad-hoc type logic between domain models is extracted to command classes that essentially mediate between them. These are the places where you can insert control logic, rules engines, etc. I typically also have an additional mediator to mediate between the controller and those command classes; they basically translate between the domain and the services layer (e.g. http status codes, serialization, etc). What I like about this is that it maintains clears lines of responsibility between domain/business objects and the use cases delivered by the product owner while still remaining object oriented and design pattern friendly. It also encourages loose coupling as domain objects have no knowledge of things that are specific to the business cases, only the business entity itself; the only bridges that have knowledge between layers are the classes that mediate them. It also provides straight lines between the request, the operation, and the persistence layer and/or external services. This is actually a popular and modern approach to service oriented architecture and design and is really easy to maintain if done right. In fact, the wiki describes the business logic being completely in a separate layer as a design smell but I think it's actually a benefit. In the Microsoft Certified Professional material (test study guides), it actually suggests that highly scalable systems may actually have that logic layer completely extracted from the primary projects and run on completely different machines! I've never attempted it because it sounds a bit overkill for small enterprise projects (150k active users or less), but intriguing nonetheless. &amp;nbsp; I think this model may actually shine in different types of applications and no so much in others. I've had great luck with this with web services as it sort of mirrors the way clients view the service to begin with. "I call this endpoint and get this result." As the wiki describes it, it is very transactional in nature which is actually listed as a benefit to the model. I could easily see this not being quite as beneficial in a desktop or mobile application; but as everything in our line of work is, it's debatable. The main reason I feel like I'm not understanding the anemic model definition is that I don't really agree with anything listed in the "Liabilities" section O_o &amp;nbsp; So unless I read your situation wrong or maybe I just don't understand the anemic model, I don't really see a huge problem with what you described.
what's wrong with Task.Run? If all you have is a sync method, just await it with Task.Run. await Task.Run(() =&gt; sync.Method()); or what I use for an internal app at work: await Task.Run(delegate { //bunch of sync code here } Edited for pedancy.
Most modern .Net APIs are implemented as async on potentially long running operations. Are we talking about the same thing? If you make it async, they can still choose to call it synchronously if they want to. Write the method in the way that you want it to behave. Context is important thought. For instance, a web service endpoint can be async, just make sure you don't return (await) prematurely if that's not what you wanna do. For instance, the boilerplate in MVC 5+ has the Logout method as async, it awaits the backend process, but cant return at that point because all it need to do is drop your session cookie and everything else can finish in the background (db cleanup, etc); either way, you're no longer logged in. Or if you're running several threads that need to complete before the service returns, then make the top level synchronous.
http://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html
From what I've read, the general rule of thumb is to use Task.Run to call a compute bound sync method, like processing some image or doing some complicated computation. In this case, you shouldn't provide an async version of this method by just wrapping it in a Task.Run. Because it isn't a truly async method. It will always run synchronous but all you've done is offload it to a different thread. So MySyncMethod should not have a MyAsyncMethod equivalent if all that you're doing is wrapping it in a Task.Run. If you say your method is async, then it should be. If I expose MyAsyncMethod() in a library and you use it in an ASP.Net app to call it a 1000 times in a loop, you'll run into some serious issues if MyAsyncMethod internally uses Task.Run. However, you wont run into any issues if you call WebClient.DownloadStringAsync a 1000 times because that method is actually async and it doesn't use Task.Run. I want to know how to achieve this.
In your model, is it possible to write a command that puts the domain object into invalid state? Or are all invariants checked within the object itself?
using the core filesystem and tcp async api, you should be able to build whatever you need, right? 
Rule of thumb is that anything I/O bound can/should be exposed as an *Async method. Try not to make the same mistake as Newtonsoft JSON.net and arbitrarily add async methods. (They where all obsoleted in later versions of the library). Anyway.. if you yourself are consuming asynchronous methods it would be a good fit to expose your self as asynchronous as well. For example, if you're downloading from the internet, reading/writing files, database operations etc.. 
As someone who have been trying to get Swig to work with so many libraries and frameworks for YEARS, I have to say, it's ABSOLUTE SHIT. It kept complaining how it is unable to read any C++ headers and even better when it's come out missing the inline functions in the headers. OP, you're better off waiting for [CppSharp](https://github.com/mono/CppSharp) to be usable one day. If CPP Parser haven't been shit, we'd already have more interops with many libraries and frameworks on Linux.
[Comparison Table from Xceed](http://xceed.com/pages/images/general/wpf-grid-compare.png) to be taken with an extra large grain of salt, since it's from the provider of the grid itself. (And not updated since 2013!) 
With my method, the view (much like the model) need not have knowledge of the controller. And why should it? It exists to display and receive data from the user. The controller can subscribe to events that you implement on the views, that way when the view needs data to be processed, it can just fire an event and that's the end of the views concern. I'm still on my phone but if I can remember when I get home I'll create a small example. 
Sorry if I wasn't completely clear, but there was a lot that I wanted to get across. I think you understood my situation fairly well though, so your response is very helpful. It sounds like there's as long as the logic for the objects are not haphazardly placed in various places within the data model, then there's some legitimacy to having an anemic data model. I do have the interactions and the logic associated with these anemic objects encapsulated by other objects in an appropriate manner, so I don't think that's a cause for concern. &gt;The main reason I feel like I'm not understanding the anemic model definition is that I don't really agree with anything listed in the "Liabilities" section O_o As I understand it, the main issue is the split between the logic and the data. Once the logic is not tied to the data that its working with, then there's a distinct possibility that interacting with that object becomes significantly more complex than if the data and the logic were part of the same object. I agree with you that it depends largely on the application. For an API, having the logic separated from the data might make it much harder for developers to work with that API. But for a service oriented application like I'm developing, I doesn't seem like it will be too much of an issue.
Since nobody seems to have mentioned it yet, you need to be able to loop back to the start each time to get a new user input. At the moment, the code above executes once and that's it. You can use do..while loop e.g. do { // some stuff } while(true); then put your code where // some stuff is
These might be a bit too involved to be useful to you, but I'll give it a shot... I've written a few articles which wrap unmanaged C++ with C++/CLI wrappers so they can be used in .NET languages, including firing .NET events from C++. [This article](http://mnb.ociweb.com/mnb/MiddlewareNewsBrief-200902.html) is old, but fairly step-by-step - when a DDS (OpenDDS is written in C++) data sample is received by a data reader listener, it is posted as a .NET event and received by a C# subscriber. [This article](http://mnb.ociweb.com/mnb/MiddlewareNewsBrief-201401.html) does something similar, but the subscriber in C# doesn't have a pure .NET event handler, but an adapter to an Rx.NET observable (just look at sevp.SensorEvent directly and ignore the FromEventPattern&lt;&gt; bit if you just want the event itself). BTW, there is code with each article, but the web site is currently undergoing revision and the links are broken at the moment - just replace "www.ociweb.com" with "mnb.ociweb.com" in them and the ZIP files containing the code will be downloadable. Hope they help!
&gt; In this case, you shouldn't provide an async version of this method by just wrapping it in a Task.Run. Because it isn't a truly async method. It will always run synchronous but all you've done is offload it to a different thread. I sort of disagree with that. We have multiple CPU cores, threads can run at the same time. It depends on the situation, of course, and on whether or not you feel you might be able to provide a more async version in the future.
If you can't provide a truly "async" method, you should let the caller decide how they want to use their thread pool. Your library doesn't have any idea how the calling application manages its allocation of threads.
Thanks for the warning. I think I will still give it a try just to see for myself, but I won't bother trying to waste time figuring it out if it doesn't work well immediately.
I wonder if doing all the data retrieval via Web API might be your best bet. Having done a lot of both MVC and WPF, they don't totally make sense together in my head. I would say that the code behind for the xaml could be the equivalent of a view controller and then beyond that, it could all be the same code (web API or repository type code)
I would personally just write it using the MVVM pattern and design the web client the same way, if you do it right you can use a data binding framework like Knockout to implement MVVM on a ASP.Net application.
Sorry, but can you explain what having the header files has to do with the above comment? Are you referring to the bit about unmanaged source code not available?
So, how are you retrieving data?
You mean [this](http://knockoutmvc.com/Home/Introduction)? Is it very difficult to adjust to? I am getting behind schedule so a steep learning curve might slow me down more. At this point though I would rather go with a good solution than continue to fumble and try to hack my way through. 
C++/CLI is a Microsoft extension of Visual C++ that allows you to write code in C++ that compiles to .NET, but can also use native, normal C++ code. To use the native C++ code, you need to include the header files for the native classes. I presumed that the sensor SDK, if it's a C++ SDK, provides the header files to you. That's the bit of source code you need. You probably don't need the entire C++ source behind it.
The view model, which is connected to the xaml only by data binding, handles deals with all of that. For small things I'll just code that stuff straight into the view model but for most of the stuff I build, the VM depends on a repository that handles the data access. You can have any number of layers behind that as needed. MVVM is what makes WPF not suck. Non view concerns in the view causes things like code re-use and testability to be more difficult, if not impossible.
For a open source MVVM framework you could check out Caliburn.Micro.
While you're at it, check out [FluentAssertions](http://www.fluentassertions.com/) to boot. I very much enjoy using Moq and FluentAssertions simultaneously in my tests.
I've finished my unit test task. I'll keep this in mind for the next sprint though. Thanks my friend!
Typically, I saw guidelines go with "Collection" for non-ordered lists. So, either a StringDictionaryCollection would work. That said, there is an overhead to dictionaries. It may make sense to create a Tuple key instead (using either the System.Tuple&lt;string, string, string, ...&gt; or write your own with specific values, latter is preferred) and use a single dictionary instead. But, it depends on what you are doing with it and how you plan on using it.
The line you supplied is basically correct but if you are required to nest dictionaries within dictionaries implementing a collection of a custom class may be a better option. You will thank yourself if you end up looping through all of those nested collections looking to get/set a specific value. Readability may also be improved greatly as well.
Er... They're patterns. You can most certainly apply MVC in desktop/WPF apps
Uh...why go through the overhead of converting the XML into JSON? Why not just use it directly?
I couldn't find anything on converting XML to a dictionary that didn't seem overkill. I'll keep looking!
That's the idea, but I need something I can work with first to get the data to those properties. Ideally I'd like to pass a dictionary to the constructor of any of my objects and have it parse through the data itself.
So, why WPF? Why not just an MVC web app to begin with?
Also, I know it works as expected, but I don't know how to declare one for a value that has an unknown number of nested dictionaries. And some might be strings at the same depth. Consider JSON format where array elements can be mapped to other arrays or just values. If you have a better way to approach this than a dictionary I'm all ears :/
If you've already got the XML then you just need to create a schema (XSD). You can then used xsd.exe to create a C# class that matches the XML. This will be able to also serialize/deserialize to JSON. Take a look at this: https://msdn.microsoft.com/en-us/library/5s2x1sy7(v=vs.110).aspx
You can just use the Xml.Linq namespace, that's going to be a lot easier to work with than nested dictionaries and cuts out the pointless JSON step.
I'm curious why you were downvoted for being absolutely correct. It's a bit of mental hurdle coming from winforms but it's the promised land once you get there. I had to go back and add some functionality to an old winforms app a bit ago and it was a nightmare dealing with changing the states of all the controls in response. With MVVM, I just change the state of the view model and UI automatically responds accordingly. I don't even have to look at (beyond verifying that it's working correctly).
I've done an above average amount. I have found it to be shockingly straightforward. Stephen Cleary, the .NET Reference Source and Google are the best sources I know without searching for some. Try it!
Yes, they are essentially DTOs. The only thing is tho that they are not really mapping back to any business objects, as there are none within the data model yet. Connecting these services are the focus at the moment, but eventually the data model will be expanded, and these DTOs will like map to them. &gt;The benefit here is one of the systems you're integrating might change their contracts or APIs, and the DTO/mapping layer potentially buffers your business logic code from this. I guess this might be the heart of my concern at the moment. The contract objects are essentially controlled by the API for the pipeline system which is not under my control. I'm currently using those same objects are used to retrieve data from the service that's on top of the account system, which I do control. If the pipeline API changes, then that automatically means that the account system API has to change as well, even if the translation between the old contract and the new contract could be handled by the broker object that's in between both services. I don't necessarily think that's an anemic data model issue, but rather a separation of concerns issue. &gt;Automapper and Dapper are my tools of choice for stuff like this. I had somewhat forgot about Automapper, which I think would fit well if I decide to split the current contract objects into separate ones for the accounting system and the pipeline system.
This is not at all what I have read during the research that came out of reading this post. I am out to dinner now, but I will post some of the articles I was reading today when I get home.
Just look up what JSON is. It isn't very complicated. 
I use JSON at work all the time and I never spent time to "learn" it. It's really easy to pick up when you use it. Just a key/value match in curly brackets. You can do it! (Sorry I don't have any resources)
What do you mean? Do you want to test it? Use something like Fiddler
Nuget package for their API: Install-Package GlobeLabsApi Demo of api consumption: https://github.com/globelabs/api/blob/master/NET/GlobeLabsApi.LibraryDemo.Console/Program.cs
Agreed. When you decouple your backend from the frontend, you can implement the backend with any frontend without having to worry about reimplementing the core business rules. You can also distribute the backend via nuget so its easy to deploy to all environments. As for MVC WPF, you're probably looking for MVP (P for presenter). However, after having implemented a prototype using MVP, we came to the conclusion that MVVM was a better pattern for WPF and rwrote it.
I used google. but still I cannot understand it. This is my first web programming. I am just start with my programming skills and I am more on desktop programming. Any who has a source code?
Not 100% on what you're asking but a list of tuples may work
Do they need to be indexed? How big is the dataset to be stored? 
Like you need fast lookups? I'd use `Dictionary&lt;int, HashSet&lt;int&gt;&gt;` and then you get constant-time look-ups. I find it hard to understand your question though so I'm not sure this is what you need. Honestly if you want to write efficient code review your algorithms textbook's discussions of complexity in time and space and see what C# built-in collections the data structures they talk about map to. You're going to get better answers faster knowing what you're doing than asking people on Reddit who have no idea what you're trying to achieve every time.
Sure. Reflection.
JSON is pretty important (lots of reasons, including but not limited to the fact it tends to be a lot easier to consume JSON in web apps versus XML.) Fortunately, .NET has an OKish Json serializer/deserializer, and newtonsoft's JSON.NET is pretty good. Really, unless it's for a specific academic exercise (i.e. Write a json reader or writer) you really SHOULD use a library. Most shops won't write their own JSON library because: - It's already been done well enough - The library has probably had more people using and fixing it than anything we'd do in house. Also, when it comes to WebAPI and other applications, you don't even have to do much of ANYTHING to use JSON. MVC will be able to look at the headers of the message, determine it is JSON, and respond accordingly. Most 'typical' use cases are handled by parts of the .NET framework. As I said, WebAPI doesn't even require any work to consume JSON. You can easily SEND Json to a webservice from .NET via the HttpClientExtensions.PostAsJsonAsync() method. This will take a POCO, turn it into JSON, and perform an HTTP Post with that data as the payload to the URI Provided. You an also use it to specify the object type to map the response to, provided you know what the data in question IS. (Worst comes to worst, start off as expecting a string back, take the response, Copy to Clipboard, and paste in visual studio as a class as shown here: http://blogs.msdn.com/b/webdev/archive/2012/12/18/paste-json-as-classes-in-asp-net-and-web-tools-2012-2-rc.aspx ). Visual Studio 2012 and up have this built in, makes it easy to get a response and make a POCO out of it if none was initially provided. http://json.org/ has information on JSON itself. If you have to write your own parse, that would probably tell you most/all that you'd have to know.
I haven't really looked at this too deeply but weekdayCount - holidayCount could only work if holidays never coincide. I also wouldn't worry too much about optimization here. You could simply generate a list of the thousands of DateTimes between the start and end dates, filter the weekends and holidays out of the list, and count what's left. If you are not running this on a potato it will spend more time informing the user of the result than it will actually calculating the result.
Assuming he checks that the input is between 1 and 8 inclusively.
I do have schemeas! This sounds like just what I need. Thanks!
In the comment of /u/dontjudgemebae you can see that he uses `input - 1` and `input + 1`. Thus the check should be `&gt;= 1` and `&lt; n.Length - 1`. Know your boundaries.
Yeah, and their controls can be infuriatingly complex and inconsistent at times. But their support is simply phenomenal and there is an astronomical amount of functionality there. (And a staggering amount of new stuff gets added with each semi-annual release) I've been using the stuff for upwards of a decade and I'm so used to their quirks that I sometimes forget what it took to learn it.
I disagree :) The check should be `&gt;= 1` and `&lt;= 8` because that is what the user specified. If it crashed from an out of bounds exception then either the code is wrong or the specification is wrong.
I had no idea this existed, how would I get the frameworkElement of the listView item if my code looks like this? private void AddItemsToList() { for (int i = 0; i &lt; HList.Count(); i++) { lstvwHours.Items.Add(this.HList[i].display()); } } 
No problem :). If you get a stuck let me know! 
I'll give you he is arrogant but that's an ad hominem argument. His points about testing using integration tests is definitely right though. There is an awesome presentation that will explain the idea he is getting at: https://vimeo.com/68375232 If you don't want to commit to watching the whole thing immediately, here is a great blog that covers the main points: https://robdmoore.id.au/blog/2015/01/26/review-of-ian-cooper-tdd-where-did-it-all-go-wrong
a must be constrained to be two less than what you have. In fact, a &lt;= length will mostly be wrong. We need a &lt; length - 1 here. 
It's a feature in the language meant to prevent common mistakes.
Saving comments is built into reddit.
I think that wont be necessary also forgot to add 1 more condition abt taking input int a, sum; int[] ar = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }; Console.WriteLine("Enter Value between 1-8 :"); if(int.TryParse(Console.ReadLine(),out a)) { if (a &gt; 8) { if (a &gt; 0 &amp;&amp; a &lt;= ar.Length) { sum = ar[a] + ar[a - 1] + ar[a + 1]; } } else Console.WriteLine("Enter Value between 1-8 Only"); }
Apologies for plugging my own OSS, but: Tearable Tab Control: https://github.com/ButchersBoy/Dragablz Material Design theme: https://github.com/ButchersBoy/MaterialDesignInXamlToolkit The true beauty of WPF is the power to really roll your own complex components. Yes you can buy stuff, but the limit really is your imagination and knowledge. There's a bit of a painful learning curve with WPF, but it's worthwhile when the power starts opening up to you. 
This using C# exceptions poorly, mostly for code flow. But exceptions are for exceptional behavior.
Create a class like this: public class Node : Dictionary&lt;string, Node&gt; {} And you're done. Besides adding any constructors you need, this will do what you describe.
I've been there. Don't do that. Please don't. Seriously. Every time I had to use nested collections more than 2 deep, I ended up with custom classes or finding a different approach to preserve my sanity.
As a side note, if you have an array that increments each element by a fixed amount, you can initialize it using `Enumerable.Range()`. This example results in the same array values as in your example: int[] n = Enumerable.Range(0, 10).Select(x =&gt; x * 2).ToArray(); It has less typing (using Intellisense) and less room for error and is especially nice for larger arrays.
I know what you mean. I've been porting a nested dictionary that can contain base types, dictionarys or lists from python to c#. If you are in a real bind and need to, you can always make your dictionaries &lt;dynamic, dynamic&gt;, or &lt;string, dynamic&gt; if you know your keys are always strings. But if you can find a better way like a custom class I would do that. Just know that this is an easy way to cause trouble and lots of exceptions if you do this wrong, just like if you were to use the wrong type in python.
Ok, thanks for the info. Found a guide on Pluralsight to implement Knockout so I think I will give it a go!
If you want to learn MVC, I strongly recommend [Alan Freeman's book on the subject.](http://www.apress.com/9781430265290) You can read up on the agile methodology but there's not really a way to learn it without working within it. JSON is basically a buzz word at this point, there isn't really much to learn. It's just a string format for objects. Implement a WebApi project that accepts and returns JSON and use Newtonsoft to parse it to and from objects a few times and you'll have the hang of it. I assume you're using some kind of version control for your home projects. If not, start using git, it's baked into visual studio. [Here is Atlassian's workflow guide.](https://www.atlassian.com/git/tutorials/comparing-workflows) Git is decentralized, so you don't have to worry about a repo, and if you want a repo anyways you can set up a free github account. Which you should do anyways, it's always the time to start building a portfolio. Practicing build deployment isn't suuuuper easy to do without some infrastructure. You can get some Azure credits and practice using Octopus Deploy and the free version of JetBrains Teamcity for some deployment/continuous integration practice.
as someone who reads a lot of csv files using c#, Im annoyed I didn't know about this. Ive just been looping through the lines using a streamreader and manually splitting them and extracting the data like that. I will have to explore this
That's fantastic. Why would that throw a error though? If it's dynamic shouldn't it allow the value to be assigned a new type?
Actually, I was wrong. It does work. Sorry my bad. 
JSON is Javascript. Javascript is JSON. When writing Javascript, if you want to create an object and populated it with values, you use {} to indicate an object. Use use Key: Value to indicate the member name and initial member value. If C# worked this way, then you'd store your data like this: new Person(){FirstName: "Bill", "LastName: "The Cat", Age: 18, Species: "Cat}; The big difference with Javascript vs C# is that you don't declare classes in order to instantiate memory object, you just instantiate memory object. So, JSON is simply storing objects with the exact same syntax that you would use to declare the object in the first place. JSON, in this respect is like XML where the structure and the data are declared together, but with the added benefit that Javascript code (and JSON is Javascipt) can be handed to a Javascript interpreter and it creates objects in memory. There is no 'XML' interpreter because XML isn't a programming language. This is why JSON is so important to web programming, the syntax to encode data is the same as the syntax to write programmable elements. They are not split as they are in C#. So, the task of converting JSON to C# objects and vice versa is the same task as converting XML to C# objects. If someone has already written said conversion (serializer/deserializer), why would you want to write your own? Hope that helps. 
&gt; So i am really attempted to just wrap the damn thing on Task.Run and call it a day, but i also fully aware of the potential penalty that comes with it. That article is talking about the performance penalty in using Task.Run() for things that *aren't actually long-running*, which is not your case. The bigger risk you face in your scenario is what happens when you have a high volume and then the code in Task.Run() starts consistently taking a long time? Answer: You run out of threads in the Threadpool that Task.Run() is pulling from. It will only grow the thread pool by like 2/sec, but blocking the start of Task.Run() (which is what happens when there are no threads available in the pool) can lead to partial deadlocks that cause everything to back up even further. Do you actually need to wait for the result of the usually-but-not-always quick synchronous library call? Would you be able to use the Unit of Work pattern with a producer/consumer collection? i.e. shove the necessary arguments in to a BackgroundCollection&lt;T&gt; and have a dedicated background Task processing them? https://msdn.microsoft.com/en-us/library/dd267312(v=vs.110).aspx Edit: I should also point out that using Task.Run() to wrap long-running code (any code that dwarfs the 170ms penalty that author was talking about) is perfectly fine if you know you're never going to exhaust you threadpool. e.g. a user clicking on a button every once in a while (OK), but not in a web service that may have 2 qps, 10 qps, or 100+ qps depending on what phase of the moon it is (not OK).
&gt; Do you actually need to wait for the result of the usually-but-not-always quick synchronous library call? Yes, the result in the usually-but-not-always synchronous call is necessarily for the continuous block of code. &gt; You run out of threads in the Threadpool that Task.Run() is pulling from. It will only grow the thread pool by like 2/sec, but blocking the start of Task.Run() (which is what happens when there are no threads available in the pool) can lead to partial deadlocks that cause everything to back up even further. Will this happen if i use await in front of the Task.Run as i wait for the result to come back? I am not spawning a Task and just fire-and-forget it, the result in the piece of work is actually matter.
`Task.Run` isn't automatically bad as long as your cognizant of why you're doing it. If you put something in there that takes a while and you need the result of that operation before continuing, it's the easiest way make a synchronous call into an awaitable section of code. The key is to be thinking about what's going to happen in the meantime. By itself, it's probably not going to resolve your deadlock situation and could quite easily make it much worse. What you need to do is make sure anything that blocks does so at a point where it's not waiting around with some contentious resource locked up. Generally this means applying the appropriate locking mechanism on a broader scope so that resources are taken until it's safe to enter that scope. You'll also want to exit the lock scope as soon as you can release that resource. If it's the case that you spend a lot of time waiting around for a resource, it probably means you need more of that resource. If there is no more to be had, the best you can do is try use and release that resource as quickly as possible. If 100% of that resource is used 100% of the time, that's as fast you'll be able to go.
From your description, I assume you're using a GUI with a message pump that will block the UI until the call returns and trying to do your synchronous call on the UI thread? Generally in that case I wouldn't have a problem with wrapping something like that with Task.Run or similar. If it's something compute bound it's going to have to run on some thread and you're better off if it's not the one running your message pump. Similarly if it's IO bound, but doesn't expose an async API then you'll be better off using a background thread to wait on rather than your UI thread. I'm struggling to understand why a synchronous method would cause a deadlock in the first place though. Do you actually mean deadlocks, or do you just mean that the UI locks up for a while?
Maybe i used the wrong term (and oopsie daisy, i did), but yes, it was the problem of the program halting entirely to wait for a block of synchronous code to finish. That block of synchronous code is dealing with an external resource (which only that part of code would ever touch) and does some logic upon that. Which could take a while, depends on the input size. 
In that article you linked to it's talking about adding a couple hundred milliseconds so it only starts to matter if you're trying to do that thing many times a second (not typically the case with slow, UI driven activities). The fact that you're getting deadlocks though says you need some kind of locking semantics. You're only going to get a deadlock with more than one critical resource in use at once. You'll want to either decouple the dependency of one to the other or lock the whole thing up together so you can't find yourself in a deadlock situation. Sometimes you can store the result of one operation in a variable or something so you never end up needing both resources at once. If those deadlocks are coming from inside code you don't have control of, unless you can more specifically identify the situation that causes it, your only choice might be to allow only one thread entrance into that external call at a time.
OK, that makes more sense! Just had a quick look through your history and seems you've asked about WinPhone and WPF before so I'll assume you're using one of these. Both of them use message pumps to handle UI stuff, which means you have a single thread responding to messages on a queue to do UI related things. If you call a some library that takes a while to return it stops that UI thread from being able to process the messages that are being put onto its queue (via mouse clicks, keyboard presses, touch events etc.) so your UI becomes unresponsive for a while. In this case it is absolutely the right thing to do to do the long running thing on a different thread (so the UI thread can continue to process the messages in a timely fashion) and Task.Run is a perfectly valid way of doing this. As /u/RiPont says you can exhaust the threadpool if you queue up many tasks. From your description this is probably something that is initiated by a user action though, which is unlikely to end up in that scenario, in which case you will pretty much be safe to use Task.Run to keep your UI responsive.
I like F Sharp's discriminated unions more. The syntax is a little cleaner and the pipeline operator is simply brilliant.
Thanks for much detailed response. I would definitely take that into consideration. The only thing that i have up now to notify the users that some stuffs is being done in the background, is a `progressBar` and a `richTextBox` that update upon the event being fired inside the logic layer. Disable the button to prevent the users from clicking it again is something that i didn't think of. I am pretty new to implement stuffs on the UI layers, as i have always been strictly backend stuffs for quite a while now. I am also studying WPF Data Binding with Dependencies Properties, they are pretty hard subjects to get a hold of, but i am getting there.
I've not found the structure the get in the way. js and css shouldn't not be nested per view, what if I want to use this image in a few places? keep a copy of it in multiple places? fonts should definitely be global. I have no idea why you'd want to duplicate those everywhere. In any case, ASP.NET 5 is going to have a slightly different structure anyway, further separating the static files and actual web things: http://gunnarpeipman.com/2014/10/asp-net-5-new-structure-of-solutions-and-projects/
I ran into an issue with forms authentication when using the Scripts and Content folders. In order to allow anonymous access to those folders you needed to over ride the security with additional location overrides in the web.config. Since that event I started changing the structure. I started to use a Public folder that contained my js/css/imgs/fonts/etc Having to override one location instead of 2 or more seems to be more acceptable at least to me. 
I'm glad I'm not the only one who was a little hazy after reading that. The stuff I've generally read from Fowler is way more "concrete" then that particular post winds up being. Thanks again for the insight. I think this is much clearer for me now.
Based on the title of the question, op wasn't necessarily asking simply what json is, but he wants to know how it's used and when it should be used, etc. Short answer OP, is that json is the standard way to serialize objects for transmitting across a network. But it seems other commenters have given better explanations already.
Im conflicted on this one. ToList creates a new list with the contents of the enumerable. This operation can get expensive, and if your list is large it can hit the LOH.
I'm using Fusion with a Boot Camp partition and an SSD for .NET development without any problems. The key, of course, is the SSD...it does suck with a hard drive, especially if it's not devoted.
I have a Mid-2014 MBP with 1TB SSD also. It's not a matter of whether it's fast or slow subjectively, but if you just compare a Boot Camp VM under Parallels or Fusion versus a standard VM under Parallels or Fusion, the additional calls to the direct disk I/O driver to access the native partition slow disk performance by about 10% according to the benchmarks I've done. With an SSD, it may not be enough for it to bother you, but it's definitely a thing. I'm glad I'm not the only guy doing .NET development on a Mac. :)
Have anyone tried mocking Entity Framework with Moq?
You make me want to punch someone.
I would encapsulate those public fields as properties with protected setters, personally. Unless you're after high performance.
What's the compiler defect you're referring to here? Surely this is just a case of enumerating over the same enumerable multiple times?
https://msdn.microsoft.com/en-us/library/system.appdomain.unhandledexception(v=vs.110).aspx
Thank you, you're exactly right - I mixed up my warnings. See my edit.
Moq requires a configuration object to create a mock object. NSubstitute just lets you pass the same object as you configured around. var sub = Susbtitute.For&lt;ICloneable&gt;(); sub.Clone().Returns("Foo"); Bar.DoFoo(sub); Moq: var sub = new Mock&lt;ICloneable&gt;(); sub.Configure(m =&gt; m.Clone()).Returns("Foo"); Bar.DoFoo(sub.Object); The obvious issue is methods that return void in which NSubstitute reverts to a Moq like syntax with the When method. sub.When(x =&gt; x.DoNothing()).Do(x =&gt; something); NSubstitute is simpler to use.
Mocking is not rocket science, it's just... mocking... Easiest part, so simpler point is moot.
That wasn't a bug, it was implemented as per the C# specification. 
Thanks, I appreciate your answer. Sure it's planning, but in my case I also have to integrate legacy database tables, so it's not all plain sailing. I was wondering whether I would write a tool to generate the SQL statements, keep them in a file or as a bunch of string constants. It's nice to have some insight to see what other people are doing. 
This reply. Ive never used NSubstitute, but Moq is extremely simple to learn, can read the docs and understand it in a couple minutes as the syntax is in such a way that it is almost natural The idea of testing and how to structure your code, and how your tests should be structured, ect. That is all a lot more difficult and if you haven't done any testing before. That should be something to look into rather than which mocking framework to start out with. That's my 2c anyways
One lazy way to do it would be to let all exceptions go unhandled and just wrap Application.Run in a try catch, then in there you can catch any exception and update the control accordingly. Of course you would need access to the control, but I recommend a method on the containing form to set the text, rather than exposing the entire control itself. Note that this is a bad way to go about this, a better way would be to create some sort of error log object and in every catch statement you could log the error that way, and in the logger implementation you would need to implement a way for it to display the error on your control. tl;dr: you'll want to do something in every catch statement rather than globally. Create an object that will help you like an error logger. Also note that the first solution I'm not even sure would work, I've never tried it, and I don't know the threading model of Winforms that well so an unhandled exception may not even propagate back to Main() in that way.
They key to mocking is designing your classes correctly so that you need to mock as little as possible, and can inject the mocks into the class you are testing easily. This means a lot of "over-design" by splitting things into many layers and separating responsibilities aggressively. This design work is a skill that will translate across all languages, mocking frameworks, etc and is much more important than knowing the nuances of any given library (because those will not be the same throughout your career) I have a system I am working on now that does some simple workflow of records, based on data entry, and then various calls to web services. I have the WebApi controllers that are almost empty, except calls to workflow and repository classes and error/result wrapping in Ok() BadResult() etc. . scheduled asynchronous job classes are also almost empty except for calls to those worker classes and just have job status/scheduling logic in them. The workflow class just has the high level business logic in it, and data access is abstracted to the repository or to web service calls etc. Each layer is only responsible for its own calling semantics, and calling the next layer. Its a lot of redundancy. But the upside is that I can easily test every layer independently. Set the repository and REST wrapper classes to mocks in the workflow class, and I can easily test if the workflow is working correctly with various responses, without having a database, and without having a web service. etc. You can solve a lot of this with dependancy injection, but for a lot of it I just set up properties in each class. The getter of the property does lazy initialization to instantiate the next layer (tightly coupled) but only if the value is null. In my tests, I just set that property to the mock class and then run it. Because each class is only responsible for a very narrow range of functionality, its very easy to get complete code coverage of all paths and use cases. You can ignore all externalities and just focus on the immediate logic. Its easy to do things quick and dirty and put everything into monolithic methods and classes. But then you need to mock out 5 layers for every test, and have a bazzilion conditions that could happen for any given method. Its faster to develop, but much harder to maintain. 
&gt; var sub = new Mock&lt;ICloneable&gt;(); &gt; sub.Configure(m =&gt; m.Clone()).Returns("Foo"); &gt; Bar.DoFoo(sub.Object); you can do: var thing = Mock.Of&lt;IType&gt; Mock.Get(thing).Setup(thing =&gt; thing.method()).returns("Foo") thing.method() //returns "Foo" which narrows the differences imho 
Cool, thanks again!
That appears to only work for unhanded exceptions. I was hoping for more like, there's just a general exception event that's raised that I could monitor.
I've used mono game for a couple of game jams and enjoyed it quite a bit. I haven't built anything significant in it yet though. It's got a lot of XNA in it. The content pipeline aspect was lacking for a while but they've got that pretty much sorted it seems. And their solution works well enough for me. I don't see any harm in trying it. If you know C# already then it provides an easy way to generate the skeleton and start adding your own stuff. For more recent game jams I've been tinkering with Win2D instead. It might not provide enough framework for what you are looking for but I have been enjoying it so far. Basically, hardware accelerated 2D graphics in a canvas element you can drop into your window. It has an Update and a Draw event that you can hook up to to give you the basic game loop. Then you add all the rest of the stuff around it. So far, so fun! [Win2D video](https://channel9.msdn.com/Events/Build/2015/2-631)
Cross-cutting concern on multiple layers (unless all exceptions are caught in the same layer, in which case: WTF)? Neither UI nor AO stuff is my bailiwick, so I'm happy to be wrong. I'm curious to know why it wouldn't be an appropriate approach to solving the problem, though. I'm not sure it's a good problem, but that's sort of a different matter.
c# and java will last until the next major paradigm shift (like punch cards to cobol/c, c to c++ (and then to c#/java)) There WILL be something in the future that replaces everything, but thats likely beyond our career horizons, and even if its sooner, there will be maintenance forever. But I second the opinions of the others, that language/syntax are much less important than the general programming concepts which will be portable to the flavor of the week. 
On the other hand, for a true enumerable with no backing, the present code iterates three times through it. There are other solutions such as dynamic downcast to a stronger collection or strengthening the parameter type. 
I think by practicing you are doing it just fine. In addition, read about what is possible - not how you use features of c#, but just that these features exist. Read about using the feature when you try to solve a problem requiring it. msdn and stackoverflow might even sufficient. A good developers knows many patterns to solve problems, and these are mostly independent from the programming language. How to manage large code bases, how to structure a large application, so that it will remain expendable, how to write unit tests and so on... Gaining experience while practicing seems to me a very good idea, as long as you always try to find better ways to solve problems than the patterns that you already know. 
Awesome I just joined!
I read the article, I was just sharing an opinion related to the headline.
If it's the same as the one on Stack Overflow it's asking you to find three numbers that represent 1. the start of a *continuously* downard slope of the array values, 2. the lowest point, and then 3. the last number in a *continuously* upward slope in the array. E.G. 2, 3, 4, [5], 4, 3, 2, 1, [0], 1, 3, 4, [5], 3, 2 A "pit" - as defined by a question on Stack Overflow. I'm not sure the criteria for your pit are the same, but the first number of the pit is 5, the second 0, and the third 5 at indices 3, 8 and 12 respectively. 
I've used both Monogame and Unity pretty extensively. I used to prefer Monogame, but now I prefer Unity. It is important to make a clear distinction between the two: Monogame is a game development framework. Unity is a game development Engine. Once you are used to either platform, you can prototype games pretty quickly. My main reason for preferring Unity now, is that I can do things much faster. It also provides some very nice tools to help you develop rapidly. The main benefit of Monogame over Unity (IMO), is that it is open source. 
I felt the same way about unity when I tried to use it before. It seemed too complicated and I had already used XNA. Thanks for your opinion!
I have participated in one ludum dare game jam, and we used unity. I did like how it made some things really easy (like particle effects) but at the time I had absolutely no idea how scripting worked in it. You write some code in a file, with seemingly no context, then you attach that file to your player character and suddenly he can move? I'm certain that if I were to dick around with unity today I would understand how it worked but that memory of it being magic is haunting lol. But I have never heard of Win2D, so I'll check that out too. Thanks! To clarify, I'm not looking to make a small game (I will make a couple small games first in order to get the feel of the development process, however). I'm planning a full-fledged game that I can actually release on multiple platforms, and (with luck) make some cash from it.
Checking on that, thank you very much for the hint
It looks like the issue is the connection string - its unable to attach the database to the specified SQL server instance because it doesn't exist.
You can do this with NSubstitute as well. To verify a method was called X times with a particular value: TheMock.Received(numberOfExpectedCalls).TheMethod(parameterValue); To check a property: TheMock.Received(numberOfExpectedCalls).TheProperty = newValue;
Awesome. I take it you work for an actual game company? It sounds like it from your wording. I appreciate the advice, especially coming from what I take to be a professional. 
I like that XNA/MonoGame lets you make it as complex as you want. I've seen teams at my university build out entire tool chains in XNA to help build their XNA games. But it's also great if you need a sprite batch and move some stuff around the screen for a basic showcase or a quick idea mock up. Unity is great but you have to learn the actual software. If you write software, having your workflow dominated by menus is just not very fun.
My favorite is [FakeItEasy](https://github.com/FakeItEasy/FakeitEasy/wiki/Quickstart). I've been using it for a couple years now and it's really easy to do simple stuff (of course, you can get real fancy with it too if you want). Feature-wise it's the same as Moq. I like the syntax more though.
I would fully recommend hiring a consultant/specialist for a short while to make sure it is set up correctly. Hacking something together is a good way to kill a project before it has even started. 
What's fun about this?
Nothing, nothing is fun about this code.
This is my Connection string: string p = System.IO.Path.GetFullPath("PracticeDB.mdf"); ConnectionString = @"Data Source=.\SQLEXPRESS;AttachDbFilename=" + p + ";Integrated Security=True;User Instance=True"; It reaches the DB from my computer but not my friends.
...they're not using dependency injection? Wtf?
Claiming to support free speech does, in fact, mean you have to let abusive shitheads use your platform. Also, that very free speech right gives you the right to not support free speech for others. But, if you claim you support free speech, man up.
Directly offending someone is **not** free speech.
Web and Mobile I hate it. He hates it. I bet you hate it too. But there is nothing that can be done. The war was lost. The Web and Mobile won. The Desktop is defeated and will be forgotten in due time.
This sounds like a very bad idea. Exceptions that really represent errors like that, should be allowed to bubble up to the thread and be caught in a catch at top level, where you can then display a message. 
Huh? Show us your code.
 public int input() { if (Console.ReadKey(true).Key == ConsoleKey.UpArrow) { //Stuff } //3 more else ifs for the other arrow keys }
You should assign "Console.ReadKey" to a ConsoleKeyInfo variable and then check which key was pressed. As it is now, it's going to block on each "if" statement. For example, if your fourth "Console.ReadKey" is "ConsoleKey.RightArrow" - you're going to have to press a key three times to get to it because each time you call "Console.ReadKey" it will stop and wait. if (Console.ReadKey(true).Key == ConsoleKey.UpArrow) // stop and wait for a key, then check if it's "up" { //Stuff } else if (Console.ReadKey(true).Key == ConsoleKey.DownArrow) //stop and wait for another key, then check if it's "Down" { //Stuff } else if (Console.ReadKey(true).Key == ConsoleKey.LeftArrow) // stop and wait for a 3rd key and check if it's left { //Stuff } else if (Console.ReadKey(true).Key == ConsoleKey.RighArrow) // stop and wait for a 4th key and check if it's right { //Stuff } It should be this: ConsoleKeyInfo KeyPressed = Console.ReadKey(true); // stop and wait for one key then compare it to four arrows if (KeyPressed == ConsoleKey.UpArrow) { //Stuff } else if (KeyPressed == ConsoleKey.DownArrow) { //Stuff } else if (KeyPressed == ConsoleKey.LeftArrow) { //Stuff } else if (KeyPressed == ConsoleKey.RighArrow) { //Stuff } 
Additionally, a better way to compare one key press to a bunch of different options is to use the ["Switch"](https://msdn.microsoft.com/en-us/library/06tc147t.aspx) method rather than a large string of "if, else if, else if, else if...." 
Americans are kind of weird in that they're so in love with the *idea of having free speech*, that they're willing to defend all kinds of awful shit just to be able to brag about having free speech. Obviously even the US constitution doesn't actually guarantee completely free speech, there are lots of simple and uncontroversial limits on speech such as perjury or false advertising. Yet anytime someone suggests maybe it's not a good idea to let people whip up a hate mob, they're suddenly Hitler reincarnated.
It is an educational project and did not meant to be brilliant piece of code: “This was just a hobby project to help me get a better understanding of C# and ASP.NET MVC and Entity Framework”, [source](http://www.aaronstannard.com/voat-scalability/)
Interesting. That's admirably consistent. Is it otherwise legal to block individual people from entering the subway? Suppose a person blocked someone from entering the subway "because they were ugly", but did not attempt to block anyone else from entering. Would that count as discrimination? In the US, such targeted discrimination (again, only of [protected classes](https://en.wikipedia.org/wiki/Protected_class)) might be charged as a hate crime, but I think hate crimes are simply designations of normal crimes driven by hatred; IE, there is no hate crime that doesn't have a non-hateful, crimimal parallel.
I was wondering that too! I've been curious how reddit was built, and so far the only two nibbles I've found is that they are using Python, and that their database consists of two tables: a thing table, and a data table.
Reddit's open source: https://github.com/reddit/
This video: [Ruby Midwest 2011 - Keynote: Architecture the Lost Years by Robert Martin](https://www.youtube.com/watch?t=37&amp;v=WpkDN78P884) is actually a really good primer. Eventough its rails conference, the lecture is not rails specific. I think it highlights the main issues and focus points in clean/decoupled software architecture. Heres one blog post from the Uncle Bob that covers some of the things he discusses in the video: http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html 
Well now I feel like the dumbest dumb butt. I don't know why that didn't pop up while trying to search. I guess I really need to improve my Google fu. I'll have to dig through this to see what gems are inside. That's always the best way to learn. I wouldn't know about some of the size optimization tricks that exist in javascript if I didn't dig through underscore line by line.
The codebase is atrocious
Awesome. In that case, how successful has your company been? I assume pretty successful if you can maintain five employees. How hard is it to get your games out there?
What about for applications that need to be run on desktop like applications that control equipment. What is recommended instead of wpf?
Freedom of speech is that you can say anything you want about your government. It does not gives you the right to offend other people. Freedom of Speech - political Offending other people - personal "Our government sucks ass and is so dumb!" - Freedom of speech "You're a fucking asshole." - Being offensive, personal, not freedom of speech Please also read: https://en.wikipedia.org/wiki/Freedom_of_speech
[Found it on /r/dotnet](http://www.reddit.com/r/dotnet/comments/366nwp/voat_a_redditlike_website_in_aspnet_5/). Currently at 34 points (81% upvoted), your submission seems ok ;)
Wasn't there another guy maybe who was writing a reddit clone in ASP.NET MVC a few months ago? Or is this by the same guy? Although I thought the guy I'm talking about was American, but I heard Voat.co owner(s) are Scandinavian.
Nope. Freedom of speech means you can say anything *without the government prosecuting you*. Not just about the government. There are limits of what you can say about other people. You can't, for example, lie about them - that would be defamation, which would be a basis for a lawsuit, where the statement has to be demonstrated to be false. Offending someone, however, is not basis for anything. Especially because being offended is an emotion. So I can say that you're a fucking asshole. It's short for "In my opinion you're a fucking asshole", and that's not false, because in my opinion you *are* a fucking asshole (and even if it wasn't actually my opinion, there is no way to prove it to a court). I can't say that you have stolen $100 from me, because that is demonstrably false and it would be defamation. But I can freely offend anyone. Just think about it: everything is offensive to someone. *Everything!* If offending someone would be the limit of free speech, people wouldn't be able to say or write anything. (Of course it doesn't mean that it couldn't get moderated out if I posted it on a forum I don't own... such as Reddit. But if I had a document on my webhost called "thefuckingassholelist.html" and it contained a link to your Reddit account, there is absolutely nothing you - or the government - could do about it.)
Whoaverse? That's changed to Voat. I discovered this myself not so long ago. 
Thanks! Yeah, I was super excited to find I could use C# to start interacting with the Arduino - so many possibilities :) I also love fishing, so I'd love to hear how your home made sonar progresses, fun stuff!!
I find that offensive.
There's a difference between having free speech, and being a douchebag.
Ohhh thank you! This is hopefully what I am looking for.
I thought I hadn't watched the world and theyre doing indo-european languages.
Just curious - what would you change about it? What makes it so bad? (I haven't even looked at the code... Just curious.)
[Martin Fowler](http://www.martinfowler.com/articles/injection.html) [Wikipedia](https://en.m.wikipedia.org/wiki/Dependency_injection) Basically, if your object depends on another object, pass it in the constructor, don't just declare a new one inside the first object. Or do what Identity 2.0 does and only make a new depend object if it wasn't given one in the constructor. Makes it much easier to unit test. I'm on a phone, so I can't write a better example. Edit: whoops again, that was inversion of control. Dependency injection is letting a framework put the objects together for you instead of making a billion object factories.
*You already have multiple laws and rulings restricting speech*, and yet the US has not descended into a fascist hellhole, and neither have any of the European countries with even stricter laws. No one complains that prohibiting child pornography or forcing people to print accurate nutritional labels on their food is a gross violation of the second amendment and inevitably a slippery slope towards the end of freedom and democracy. Every time something awful happens, US citizens just collectively shrug and defend it because doing anything about it would violate some idealized freedom that often doesn't even exist in theory or practice. It's the same thing with campaign finance and anything that even smells like gun control. It's inhibiting progress and perpetuating suffering solely for the sake of circlejerking about the sacrosanct (despite having been amended dozens of times) constitution regardless of what effects that might have in reality.
Using DI with MVC is pretty important as it empowers your ability to unit test and being able to unit test is one of the big advantages of MVC.
Sure, and I dislike hate speech as much as the next joe. But it's perfectly legal to voice opinions about people, in both generalities and specifics, and with whatever tone and vocabulary you deem necessary to express yourself. That's literally what freedom of speech is. There can and should be informal social consequences for speech that offends those around you, be that in the form of downvotes on the internet, or boo's in real life. But at the end of the day, Reddit is private property, so meh. 
The someone else's platform is definitely key and I agree, their platform their rules.
Awesome, awesome, awesome, well done! In a strange coincidence, i have the EXACT same Bluetooth receiver arriving in the mail today! I spent a couple of days reading about it and it seemed that using 3.3v was the most tricky part. I also ordered one of these guys[http://www.amazon.com/gp/product/B00FGD7ZZ4] to supposedly help with that. We shall see :) I don't really know what I'm doing - so i just keep buying new sensors and shields and keep tacking them onto my "robot" to keep learning new stuff. Having a blast!
That is one way to see it and others have other opinions. I'm leaning more towards what DHH say and see it is as test induced damage. Controllers should generally be simple enough that the added complexity of DI and writing code so you can unit test it just makes things worse. The code becomes more complex and more difficult to understand. Almost all software we use has been written without DI/IoC and while it is popular in the C# and Java world in other languages it is not necessary so. Especially not the elaborate frameworks. Just to show there are different ideas: &gt; There is no killer argument for DI because DI is basically a bad idea. The idea of DI is that you take what ought to be implementation details of a class and then allow the user of the class to determine those implementation details. This means that the author of the class no longer has control over the correctness or performance or reliability of the class; that control is put into the hands of the caller, who does not know enough about the internal implementation details of the class to make a good choice. http://stackoverflow.com/questions/18547909/what-would-be-the-most-powerful-argument-for-writing-solid-applications Written by Eric Lippert who has been on quite a few different compiler teams (for example C#)
Due to overhead and because of compile-time checking, whenever possible, I recommend avoiding boxing. Instead of: public object InstantiateObject(Type objType, bool AddToCollection = false) Use: public T InstantiateObject&lt;T&gt;(bool AddToCollection = false) { var objType = typeof(T); You'd have to change other things too but this will get you started.
lol, what? &gt; Obama's a shitty president &gt; That girl's a jerk &gt; The Primer Plus is a terribly written piece of garbage Ideas, or harassment? As soon as you start drawing that line, what you starting saying is, "If an idea contains something negative about someone, then I might advocate suppressing it." Thoughts?
Efficiency was/is definitely not my focus with this because it only runs once after my codebase finishes compiling. I will definitely fix it up in the future though, thanks!
Neither. They're opinions, and it's fine to hold opinions. It's when you act on them that there might be a potential problem.
Yeah, I like IOC, but I have found that if the people you are working with don't know what they are doing with DI, then the only thing you did was turn compiler errors into runtime errors.
I got about 10-minutes into the code and decided to read the comments in this post, hoping to see something like what you've written. There's lot of slop going on here - it wouldn't pass a code review, period. That said, this looks like the kind of side-project I've been seeking. The codebase is immature, it needs help from nearly every direction, and people actually know about this thing. I'm gonna see what I can do this weekend and try for a pull request next week. If everyone does the same, this site could be legit!
As I mentioned countless times already, I don't give a fuck if it's called "WPF" or "Windows Universal Platform" or whatever as long as it's still `XAML + DataBinding = MVVM`. Your claim that WPF is dead *might* be true, but your claim that *Every second spent on WPF is a second of your life lost* is completely false and totally retarded. Learn me some WPF and I'll be 98.73% ready to port my skills, ViewModels and *some* XAML to "Windows Universal Platform" or whatever the hell it's called now. I didn't do that yet because I'm waiting for Windows 10 so that we can have a usable, non retarded "Windows Universal Platform" story, and because people are still running Windows 7.
https://msdn.microsoft.com/en-us/magazine/dd942846.aspx Probably going to have to use some unmanaged APIs unless there's a wrapper somewhere.
&gt; Would you take a job No I wouldn't "take a job" because I'm a freelancer, regardless of the technology. &gt; doing all WPF It seems to work pretty fine for the many projects I've put out.