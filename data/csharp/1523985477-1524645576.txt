&gt;Do I even need a SQL db? This depends on the type of data that you will be storing. Most data storage needs can be meet easily with a database, but your data store can be flat files, No-Sql or Sql... it doesn't matter as long as the api can access it. &gt;Can I create a rest api and save the data I post to the API without having a SQL db behind it? The communication between the client app and the restful service will not reference the data store in any way. It will only specify the information that it wants and the criteria that needs to be fulfilled or the operation it is requesting and the arguments for that operation. This 'operation' doesn't refer to a datastore operation (as in create, update, delete) but as a 'domain' action (a thing you application is able to do like 'CreateUser' or 'UpdateEmail' etc. The Restful service communicates directly with the data store... if it is an sql database then it generates sql queries otherwise it reads files or whatever else it may do. You can mix-and-match data stores as required... for example, you might store username, password, email in a database but maybe you allow users to create a template file for their log-in page which could potentially be stored as a file. Take a look at this site describing World of Warcrafts API. Notice that the API exposes Zero information regarding how the data requested is stored or retrieved. Make sure that all the API Methods except logging in require an authentication token. More info about your goal might help for suggestions on API, but once you decide to use a client app that communicates to a public API which then communicates with a secure data store it's all implementation details... there are hundreds of ways to skin this cat. So, maybe you start with a GetAuthentication method which accepts username password and returns an authentication code. Then you add a GetEmails method... it might be something like (Very psuedo code) JsonResponse GetEmails() { If (!usr.IsAuthenticated) throw new exception ("Authenticate before performing operations") SqlCmd sql="Select Subject, Sender, Body from Emails where user=@usrName" sql.AddParameter("usrName",usr.Name); return sql.Execute.ToJsonResponse(); } Similiarly, you could expose the exact same api but implement it like JsonResponse GetEmails() { if (!usr.IsAuthenticated) throw new exception("Authenticate before performing operations"); List&lt;emailData&gt; emails=new List&lt;emailData&gt;(); foreach(String s in System.IO.Directory.EnumerateFiles("*.email")) { emails.Add(new emailData(s)); } return emails.ToJsonResponse(); } The API service, like an application or website, isn't a datastore... so you definetly need to have some data manipulation mechanism it can access.
You probably meant ***DEFINITELY*** -not *'definetly'* --------------------------------------- ^^^Beep *^^boop. ^^^I ^^^am ^^a* ^^bot ^^whose ^^^mission ^^is ^^to ^^^correct ^^your ^^^spelling. ^^This ^^^action ^^was ^^^performed ^^automatically. ^^Contact ^^^me ^^^if ^^I ^^^made ^^^A ^^mistake ^^or ^^^just ^^downvote ^^^^^^please ^^^^^don't
&gt; You just care what something does, you don't care how it does it. More specifically, you don’t care what the _actual_ type is of the object you get, just that it adheres to a certain contract. This is polymorphism, and that’s what defines OOP. 
IYes.
Holy shit
“My users expect this summary report emailed to them at 8am local time every weekday. They are spread out over 8 time zones.” Solve that problem without it...
I mean what has Jon Skeet ever done? Just look up his stackoverflow repu... rep...r... holy shit. (yeah, that's a joke, I am very familiar with who he is, and have had the pleasure to attend his talks several times.)
What does `java.util.Calendar` do that `System.Globalization.Calendar` doesn't?
Or in this case, they are used for mocking the OP.
That doesn’t help with DST. 
If you want it to adapt you could store the timezone and local time per user, but there's no reason to store the timezone with every single date in the system. Individual dates should be UTC.
I don’t think anyone every said to store every single date in the system in any other way than UTC, I certainly didn’t. I was simply demonstrating where there is absolutely no way to accomplish the goal natively, hence Noda. You should always store dates as UTC for comparison purposes, but you can’t calculate time zones properly without Noda.
Not using good development practices makes you a bad developer. I'll agree that unit testing is not the only thing that makes a good developer good. 
Fair enough. It’s also worth noting that if I’m currently in DST and I’m scheduling an appointment for, say, December 25th, which isn’t in DST, it’s worth putting through Noda to convert to UTC, or you’ll likely end up being off by 1 hour. Just another instance where most people think everything will work fine and/or only ever work for a single company in a single TZ. 
John skeet. The super hero.
We’ve been using this for years and it’s a must use tool.
When I started using interfaces at my first job that required some sort of polymorphism, I thought I understood the usefulness of interfaces. It wasn't until I tried writing code from scratch and tried to make it all testable that I truly realized the value of interfaces. Interfaces are your friends!
Unit testing, dependency injection, interface segregation, polymorphism, etc. There are plenty of reasons to use them. When you try testing your code (which you *REALLY* should be doing, with at least unit tests), not using interfaces turns into a nightmare. Using dependency injection and interfaces really simplifies unit testing. You can stub out dependencies to make your tests isolated to just the class you are currently testing. Look up SOLID principles. I also don't understand why you are annoyed by them. Does it really bother you to add one line to a single interface? It's literally just declaring the method name, return type, and parameter types. And then you can just pretty much copy and paste that to your concrete classes. Right click &gt; Go to definition &gt; right click&gt; go to implementation. 
Professional Object Oriented Programming^poop
Just saying something doesn't make it true. If you have a developer who writes code that is logically sound, in a procedural manner, with a small amount of errors, an argument can be made that they are a good developer. If you have a developer who employs "Good development practices" (SOLID design principals, Unit Testing, Documentation, Design Patterns, etc) but has basic logic issues, or uses those things improperly, they are bad developers. Could the developer in the first scenario be better? Absolutely. But it doesn't make them a bad developer
&gt; Just saying something doesn't make it true. Duh &gt; If you have a developer who writes code that is logically sound, in a procedural manner, with a small amount of errors, an argument can be made that they are a good developer. You show me a developer who can write code that's safe for production without unit tests, and I'll stop saying unit tests are an absolutely non-negotiable component of software development. 
Safe for Production means different things for different use cases. A public facing application, dealing with financial or other sensitive information, I totally agree with you. Some internal application, doing data mining from a copy of source data... probably not that big of a deal. I'm not advocating that people don't adhere to good development practices. I think anything you can do to make your software better is worth doing. Just saying good development practices is not synonymous with being a good developer, and vice versa.
Thread pool starvation? Sleeping for 700ms in a theeadpool op is a big smell...
I’ve seen one of your streams live but you start streaming at 6 am my time, I was going to watch one of your vods when I stumbled across this video.
Can't really unit test unity projects
https://blogs.unity3d.com/2014/07/28/unit-testing-at-the-speed-of-light-with-unity-test-tools/
That is the question I asked. I have no performance data obviously.
Why don't you try testing it yourself? I ask because you said you're using DateTime.Now and TimeSpan.Subtract for a reason, which means you have a very specific requirement (since most of the time the performance difference between e.g. DateTime.Now and DateTime.UtcNow is negligible).
I find especially interesting his post on [readonly fields](https://codeblog.jonskeet.uk/2014/07/16/micro-optimization-the-surprising-inefficiency-of-readonly-fields/) where he talks about how by not marking a field as readonly he managed to get a 20x performance increase. Here's how he concludes his post (emphasis mine): &gt; This isn’t an optimization I’d recommend in general. Most code really doesn’t need to be micro-optimized this hard, and most code doesn’t deal with large value types like the ones in Noda Time. However, I regard Noda Time as a sort of "system level" library, and **I don’t ever want someone to decide not to use it on performance grounds**. My benchmarks show that for potentially-frequently-called operations (such as the properties on ZonedDateTime) it really does make a difference, so I’m going to go for it.
Aviation, flight times are always local, even in back end systems. You're expected to know what timezone every airport is in.
It released it's first version in 2003 (for J2SE 1.4), so one year before Java 5.
Yes apologies that's what I was thinking, why use a library for one method. 
better than **S**uper **H**andy **I**nternal **T**echnology
Ouch. Dude seriously... I was using them regularly (still am) by my first year of programming professionally. Use them!
I believe this low effort posting needs to be in /r/learncsharp, thanks.
Needs server side rendering too.
Dependency injection doenst need interfaces.
I would argue interfaces are used to obfuscate code a hell of a lot more than simply not using interfaces.
So you're saying it's acceptable that people are using development practices 10 years out of date? 
Ummm. Not using interfaces doesnt make you a procedural programmer. 
delete
No, im saying I know developers who can write code safe for production without unit tests.. 15 years ago I used to be one.
And we stopped doing that 10 years ago for a reason. It _wasn't good enough_. In any other industry, not adopting the new, better pattern within 10 years would get you laughed at/disqualified. 
That's all well and good, but it doesn't make your previous statement suddenly valid.
Nice. This can't get here fast enough.
How so?
Never thought I’d see an MSDN blog post mention vocaloid music
Their impression (in the article) of the support they are getting is making me optimistic that this will become a committed project by May.
700ms only kicks in if the operation fails. But.. why would it be an issue in a pool?
Interesting info! I had thought it ran n threads until all items were processed. Like a queue. Though in my use case, all items do take about the same amount of time. I just had a thought.. may be on the last iteration not all slots are used.. so the last iteration never starts? 
We have a pool going in the office whether we will be writing asp.net apps in 2020 or angular apps
Interfaces are not a replacement for multiple inheritance. That is what composition is for.
&gt; This may come as a shock, but people programmed before unit tests. Testing a unit in isolation has been part of *engineering* since before electronic computers existed.
I forget now... :)
Please replace angular!
You'd have to persist messages yourself but other than that ZMQ and more specifically for c# NetMQ does everything you need. https://netmq.readthedocs.io/en/latest/ 
Backup one step. First, think of the principle "build to the interface, not the implementation" as a general engineering principle. A car engine is connected to a transmission by a very simple interface. Because of this, you can hook up the same car engine to an automatic, manual, CVT, etc. You can replace the gasoline engine with an electric motor as long as you can jury-rig an adapter. How do you test an engine's horsepower? You can put the entire car on a dynomometer, but you could be losing horsepower between the engine and the wheels. No, to properly test the engine *as a unit*, you put it on a table with a testing device pretending to be the transmission. The *interface* of the testing device is the same as the interface on a real transmission. To make a complete car, you *compose* all of the pieces together and do *integration testing*. You want to engineer small units of functionality that do few things, but do them well. A simple unit of functionality that relies on simple interfaces for its dependencies and provides a simple interface for its consumer is much easier to test and perfect. The same applies to Software Engineering. Let's say you want to profile the critical path performance of a piece of your code by passing 10 billion inputs at it. var myFooProcessor = new FooProcessor(); for (var i = 0; i &lt; OMG_HUGE; i++) { myFooProcessor.DoBigCalculation(SampleData[i]); } DumpOutput(myFooProcessor.PerfCounters); Well, that codes records performance counters and logs output. If it uses a Logger that uses a StreamWriter to write to the filesystem, then your test is going to generate a shit ton of logs. If it uses performance counters that aren't registered/implemented on your Workstation, then it's going to be a pain in the ass to check out, build, and run the tests, isn't it? But what if you had used interfaces for those? ILogger logger = new MockLoggerThatDoesNothing(); IPerfCounters counters = new MockPerfCounters(); var myFooProcessor = new FooProcessor(logger, counters); // do the big loop Well, now you've isolated the test to only what you want to test. And the tests are easy to run with no complicated environment setup. ...but you get a bug report that your code crashes when the logger starts getting very slow. (Multi-threading is hard) Well, now you can just write a test with a `MockLoggerThatSleeps`. To summarize: Use interfaces. Use *simple* interfaces. Design simple units of functionality that do what they do very well and are easy to test. Compose those units into the final machine.
Can't decide if I like this more or Ooui. Both are exciting. I can't wait to stop writing JavaScript!!
Would you rather make a change to a code base with 0% unit test coverage or 80% unit test coverage?
Create a WCF or Web API service that sits between the client and the database. The only thing that ends up in the app/web config is the endpoint to that service. The service has the responsibility of 1) authenticating the caller and 2) getting data from the database and returns the results to the caller. At this point, you can use something like certificate authentication to verify that the user can access your service. To clarify, at no point will any information that directly exposes the database connection string be present in the config file. The only thing that needs the connection string is the service. By having the service run under a certain account, your connection string can use integrated security, so even your service's config file will not have a plaintext password.
How do you feel interfaces obfuscate code? You’re just using the contract instead of the implementation. If anything, it tends to clean code up.
D in SOLID is for Dependency INVERSION. Dependency Injection is something completely different, but related.
Your preaching to the choir. Although these days I tend to just unit test the core business logic so I would have much lower coverage. Not that I would really know, all the open source code coverage tools seemed to have been killed by Microsoft.
Holy, thanks for that detailed and easy-to-understand explanation, I think I got it now! And thanks to everyone else =) 
neither ?!!!!!!!!!
Consider reposting in r/rabbitmq. Something I found unexpected was that it stops accepting messages when memory usage hits 40% (reasoning explained [here](https://www.rabbitmq.com/memory-use.html)). Also read [its Jepsen report](https://aphyr.com/posts/315-jepsen-rabbitmq).
Sure you do... you just have the receiving code declare var dt = new DateTime(DateTimeKind.Utc) - or some confusing bs like that
I don’t know what kind of interviewer you’ll encounter, but odds are they won’t get hung up on you not knowing the right terms. Explain what things are and what they are good for. Give examples of when you’d use them and when you wouldn’t. If the interviewer insists on jargon, maybe they aren’t a great workplace to begin with. 
Yes you can. We have at least 10 independently copy/pasted versions of it at work. Some use int, some use long. Int versions will blow up in 2038 
But can you change it later? Can someone else?
&gt;&gt;unless both ends agree on some definition ahead of time &gt;If you don't [...] agree on a timezone
I'm in the same boat. Maybe my apps that i wrote in the past wasn't complex enough to require them. If i need a callback i can create an Eventhandler. The only time i use an interface when i'm doing Android stuff, for Async callbacks. 
That must have taken a lot of time and work, just flicking through it's pretty good. The Blocking example on page 605 looks iffy. The comment after the call to ToListAsync() suggests code will continue on a random thread, but I assume here because there's no ConfigureAwait, it will continue on the original thread (Which actually may be a random threadpool thread, but importantly not a different one to the entry one? There's also no guarantee that .ToListAsync will even execute asynchronously, it could complete without a context change at all. Please double check my work. Other than that, I'll be recommending it to people for sure, it's a great reference, excellent work.
Having never written a unit test I probably deserve it. ;-)
wow this is a really interesting implementation I've never heard of before. It might just be my 'killer reason'. Thanks!
Wouldn't that be ASP.NET MVC?
Yes, I'm in the US. You are correct in your statement as I have never worked or interviewed with an entity that required certification. I actually loathe certifications because anyone can study for the test and pass it, but it doesn't necessarily mean you are a great engineer/architect with in-depth experience. However, it does help you get to the top of the stack with hiring managers as they are less technical. Also, if you have your own, or work for a MS partner consultation/professional services firm, the accreditation gets associated with the firms partner ID. There is a minimum requirement needed in order to get direct referrals from MS. The more certs, the more likely you are to get referrals, in particular, large ones.
`PositiveAnswer : IAnswer {}`
Something that "works" but does have a bad reputation (ex.: for being misused). 
I'll have a pretty cool C# app, for absolutely free, available here at this website: https://www.dartomic.com It redirects to atomictech.org. It won't do that when I'm done writing this this thing, hopefully by next month. It will be for Windows all current Windows devices, and Linux, which I just have to change some parts in monodevelop to work.
No, i guess its ok, im about the same
All that an open/save dialog does is give you a path that was selected in the dialog once you click Ok. The path is just a regular string, nothing special about it. This means that if you already know where to save the file to, you can plug in a string path of your choosing rather than having to open a dialog. So in other words: * Open dialog to select file * Get string path from dialog upon Ok * Copy file to predetermined path stored in string
I'd like to get this but nothing happens when I click the download link.
Use the system.io namespace. And windows.forms https://www.dotnetperls.com/openfiledialog
https://msdn.microsoft.com/en-us/library/system.datetimeoffset.tounixtimeseconds(v=vs.110).aspx
Thanks for the explanation in steps. I guess after I've studies more about SQL and I know how to make an API, the best step would be creating a database (after I know, what kind of data I want to save in the DB). And after the db is created, then make an API that works with the db right?
Hi! Yes, I use RabbitMQ daily. İf you're looking for a simple library, my company uses EasyNetQ, which simplifies things fairly substantially to simple "bus.Publish(myclass)", or "bus.Subscribe&lt;MyClass&gt;("id", handlerFunc)" ... Hope that prints out ok, I'm on mobile
Frontend frameworks (React, Angular, etc.) often support server-side rendering. Rather than rendering the page using the web browser and js, it can be rendered first time using the server. So the browser gets all the HTML to display when they first request the app. It speeds up page loading, especially on lower powered clients like smartphones.
I am more amazed at the fact that his VS reacted nearly instantly to the change. Lucky A•Hole!
Most modern editors/IDEs will make it simple to fix. You just go to the first error in the list and check the brackets above/infront of it. 
thanks. Great book. I downloaded it when it was posted couple of months ago. The book isn't for complete beginners. But is a nice book for reference. Especially LINQ and List&lt;T&gt; stuff. Among many other things. 
Looks good, I like the syntax highlighting. Any chance that it can be made into an epub file or something for phones?
IMHO all GoalKicker books are absolutely fantastic, those guys are doing God's work.
Delete
Every day cake.. 
C and C++ compilers will warn about this, making it trivial. They also warn about the other `if (a = true)`. I'm not sure if other languages have compilers that warn about these as well. 
You get a "possible mistaken empty statement" and a tiny green wiggle under the semicolon, but that is all. If you already have a bunch of warnings then it can be easy to overlook.
You can't use the same code to render on the server and on the client.
And helps with SEO, processing links in Facebook or Skype and so on.
And I would ask why all the other warnings. Treating warnings like errors is often a good idea in general.
What CPU do you use?
Well the job on our web app gets done without them so there's no real motivation for me. So far from these replies, the main reasons to use them are: - for unit testing -working on big projects collaboratively - iterating through lists of different objects Perhaps the 3rd thing might strike me as being useful at some point but I can't think of a scenario in our project offhand. Unit testing is likely something that should be integrated, but I've never done it and our rather huge project doesn't have any so doesn't seem like a good time to start. Although I should probably read up about it and the benefits. 
If you are interested check out 3:45 of [Abusing C#](https://youtu.be/JIlO_EebEQI) with Jon Skeet. That character would be impossible to track down.
Ok I agree with you on the front where people just define interfaces for literally everything. One company I worked for did that, and it was stupid because interfaces are meant to be firm contracts, but classes are expected to be changed up pretty often. So the interfaces would be not only singly-implemented but also changed all the time. For 3, there’s a shortcut to go to implementation: Ctrl+F12. Interfaces are a good when used properly, sounds like you work/ed in a shop with a cargo cult mentality regarding their usage.
For the former, that's good reason to complain to the author of the code and hope they update it. For the latter, there's conditional breakpoints.
It's on the roadmap, and as a bonus. If the server is running .Net itself it should be easier/painless to enable Server side rendering as it will just use the existing Runtime running on the server as opposed to running a Node.js process to render the page.
I have no clue what you're even trying to argue in this context. The parent comment said that `DateTime.UtcNow` isn't enough because if you transmit that formatted without included or agreed upon timezone information then you don't know which timezone to use, and I disagreed because that has nothing to do with `DateTime` and transmitting a `DateTimeOffset` without timezone information would have the same problem. If you format/serialize a `DateTime` together with timezone information then it works perfectly fine. If you standardize a timezone in your protocol then `DateTime` also works fine. If you don't do either, then you're equally screwed regardless of whether you're using `DateTime`, `DateTimeOffset`, Noda Time or anything else.
I don't really understand what Node.js has to do with anything here?
I don't follow. Either "server-side rendering" is a newfangled web developer's way of describing a static web page, or you're describing what ASP.NET MVC does.
Can someone please, ELI5? 
For starters, pun intended, change the foreach loop to a for loop, it will be faster.
Well sort of, i mean it is rendering a web page. However, take for example an angular or react app that generally uses html partials (with angular syntax in them) or some client side component rendering system (like JSX with react). Generally you just run the client side angular components to generate HTML and tie script to the components. Sometime though, you want to completely render a usable HTML component for this app to use completely on the server side (at least for the initial state), then the client framework "hydrates" the generated html with the client side components to make fully working client components. Now... whether ASP.NET is the appropriate framework for creating HTML server side to use with a Blazor app is a point of discussion. Maybe an ASP.NET extension will do it (ASP.NET Blazor could be the name of it) or some other server side framework altogether.
Probably comparison with something like ReactJS and node.js. React client components are completely rendered with script on the client side, but you can run similar React code on the server side to generate HTML on the server-side for react to connect components to (instead of rendering client side). However that server side code usually runs under node.js as those libraries are javascript. So making a react app with a .NET API makes it kinda hard to render server side easily and have React hydrate that HTML. Using Blazor could mean you could run the same code (or at least part of the same code) client side AND server side.
Upload it to Google Play Books, install the app, and you're golden... It even syncs last page videoed across devices https://i.imgur.com/YwpINic.jpg
Just use a save file dialog to get the source filename then use File.Copy to move it to where you want. The dialogs simply give you a string path they don't do any work for you. You can use Path.GetFileName to get just the name of the file and Path.Combine to build your destination path.
Oh, I think I see. So, skipping ASP.NET MVC's Views altogether (maybe using Web API's ApiControllers instead), and returning rendered JSX as a result. Razor _might_ still help with that, though.
Generally speaking, when a browser requests a website written using a frontend framework it will download a very basic HTML file, and a whole bunch of javascript. It's then up to the browser to run the JS and create a proper responsive web page. This works fine most of the time, but if you had a client which couldn't run JS (for example a search engine crawler, or a web chat preview client like WhatsApp or Facebook), they would just get the basic HTML page, which would likely just say "Loading...". Also, if you had a client which wasn't as powerful as a laptop or desktop (e.g. a smartphone), there would be a delay before the page actually displayed anything, because the browser might still be parsing and executing (and sometimes still downloading) the JS. These problems can be mitigated by server-side rendering. The webserver executes the JS for the client, and sends the completed page to the client. The non-JS client gets some useable information, and the low-powered client doesn't have to wait to see a web page. The framework must then parse and bind the HTML/JS and begin functioning as if it had all been rendered on the client.
These came up a while back - there's a bunch more of these on that site. They were generated from the Stack Overflow "Documentation" site before it shut down.
Ah that explains it. I thought it was a labour of love by someone. Did Stack Overflow documentation shut down? SO became kinda toxic so I only ever go there when Google sends me there :( 
Yeah, they shut it down about a year ago? Each of the PDFs have the credits for everyone that contributed; I'm in a couple of the others. I guess I didn't put anything specifically into C#.
It remember seeing it and thinking it would either be amazing or infected with that same moderator toxicity SO has/had. It's great all the work lives on in a new form.
I think the idea here is a framework where the *some* of the same code (specifically rendering code) can be run on client side OR server side and still have the same effect - so just one code base.
This is so weird, nothing popped up when I clicked it yet I realized I have downloaded it over 15 times. It just downloaded automatically without a dialog box
yeah...I'm a dummy because I downloaded it five times and refreshed the page before I realised I already had it. In my defence I had noscript turned on and thought it was interfering and kept disabling/enabling various things before I finally noticed...
Using declarations may actually be used within the scope of the name space. This has a subtle usage difference from the standard global scope. https://stackoverflow.com/questions/125319/should-using-directives-be-inside-or-outside-the-namespace
Can you use this to rip images from pdf files?
I know, but that doesn't make it adjusted for a smaller screen.
Can you explain me why that works...?
What exactly caused it to fail and get shut down?
It works well in landscape mode!
I've been exploring binding to C++ APIs, and it's a bit of a tricky issue. Mainly, the problem lies in the name mangling of the various symbols, and the lack of a general way of performing new/delete operations.
I think they're a decently hard concept \(and I admit I only got confidence on it recently after quite a few years programming\), since using them properly requires you to have a pretty good intuition of OOP \(thinking in terms of objects, capabilities of every object, single responsibility principle, reusability, etc.\). And since it's certainly possible to do anything you would do with interfaces without them \(e.g. using big/god classes, using enums, using `object` and` i`s, etc.\), it's very natural to stick to what you know instead of learning that weird thing called interfaces. It's something that you are only *forced* to learn when you start working with large codebases \(\&gt;10000 LoC\), so that you're unable to keep everything on your head and you really need to start making reliable, small and testable classes so that you can then think of the program in terms of classes instead of in terms of lines of code. It's kind of similar to when you need to start thinking of functions instead of just putting everything on `main` when you first learn programming.
Greatest book! Thanks
Not currently but that's certainly among the next things we want to include.
 Why would you ever want to check if a Queue already exists? All operations are idempotent, I don't see a valid use case for that.
Sorry, mis-spoke. I meant to say checking if an Exchange exists already, not a queue.
It looks like you CandidateVM type has a CanRowId property, right? AutoMapper IS ignoring it, which is why its value is default( int ) (i.e. 0) instead of the value from the DB. If you don’t want your VM object to have any CanRowId, you need to delete it from the type. But you could also make it nullable and test for a null ID to know whether it was populated. Or you could build a type hierarchy where the base type doesn’t have CanRowId and a child type does. Or you could do some other stuff that’s probably well beyond the scope of this question.
Dear god. So I forgot I had been screwing around with things, and had another spot where I was manually mapping things. My first idea was just to delete CanRowId from my VM, but I was getting a build error, and was looking closely enough thinking it was an auto mapper thing. No, it was that code calling a property that doesn't exist. So all I ended up needing to do was delete that property from my VM :/
Thanks for explaining. :)
&gt; Not writing unit tests doesn't make you a bad person either, it just makes you a bad developer. Not writing unit tests reflects more on management and/or leads than the individual developers. It's generally, in my experience, not something left to be decided by each developer on a person by person basis but instead of a company/department wide decision to either do testing or to not do testing.
Yes it does, if you use the one that takes a RectangleF as parameter. Then it wraps the text into the Rectangle's bounds. I use it on the bottom-left corner textbox too.
Huh, I must have been thinking of something else. 
Probably the one that takes only a PointF as parameter.
Cheers, i was hoping someone had an answer for #3 Funny enough yesterday I just moved about 50 interfaces from one project to another a project so I can delete them. They were used to provide isolation of the implementation from the code downstream, which is clever but not needed. 
Have you heard of iTextSharp? It's got some pretty solid functionality already.
I've only been dealing with this sort of thing relatively recently, but here's the stuff I was looking into that might be useful higher-level features: 1. Detecting a "box" which is made entirely from intersecting lines and extracting the content that's positioned inside it. 2. Content retrieval based on the position of other content (e.g. on the other side of a line, between two lines, etc) 3. Content retrieval within a specific region 4. Optional retrieval and combination of text objects with the same y coordinate and size/font when the length of the previous lines up with the x of the following text object. Some PDFs are just that weird. 5. Not sure if the PDF format allows for object metadata, but being able to retrieve object info based on potential metadata could be helpful for known PDF templates. Was thinking about using this on PDF creation to hint for potential parsers, and then utilizing it myself. Haven't delved too much into the base format, but ran into some hairy PDFs that made me start thinking about these. I have no idea if this is already planned, though.
The main reason for not using/extending the iTextSharp codebase and the motivation behind this port is to avoid the license for iTextSharp. The license for the free tier of iTextSharp is copyleft which means it can't be used in commercial applications. https://tldrlegal.com/license/gnu-affero-general-public-license-v3-(agpl-3.0)
Thank you!! Really appreciate it.
I'm looking into that, but every try causes runtime exception without any explanation and minimal stack trace. Also ADL seems so much more elegant and works with .NET Core (no mono required).
Makes sense, good luck man! I'll be following this one with interest.
True, you could trim it to four lines but then it’s no longer explicit what your dependencies are. 
It is pretty clear to me. I don’t know if I’m missing something though.
Is it actually written for people who are already professionals? Or should a beginner use this book as well?
Then you exclude them from the scan and add them explicitly. It’s not a one size fits all mate. That’s why it’s an extension. It’s not for everyone and very clearly isn’t for you and that’s fine. 
These are interesting use cases for sure. As far as possible the core library will provide you access to the content and positions of letters, images and other drawing objects (lines, etc). Most of the specific access tasks here could then be achieved fairly simply. Something like rectangle detection would be up to the consumer to implement but then it would be fairly trivial to find all text content withing the rectangle, for example: var lettersInRectangle = page.Letters.Where(x =&gt; x.Bounds.Left &gt;= myRectangle.Left &amp;&amp; x.Bounds.Top &gt;= myRectangle.Top) // ... etc On 5. I think it's possible to include other data when creating a PDF object as long as it's not keyed by an in-use name. Once I'm happy with the public API for the main content retrieval tasks (texts, images, paths/drawing/colors) I'd start to expose the PDF object structure, but I want to ensure the API is as nice as possible before making it public.
Wonderful of you to share. Would you mind, if possible,producing an kindle mobi or ePub format?
Well I commonly will create an interface for a class where it’s reasonable that we could create and use another implementation down the road. So it’ll have a single implementation, but intentionally. Maybe they just created interfaces off of their classes (as opposed to the other way around) but that seems pretty heavy-handed. Hopefully they were all just junk.
I follow YAGNI but it’s about being smart with time investments. If I think it’s reasonable we will want to switch out a given class for another, it’s trivial to create a proper interface up front. Let’s think of something realistic, like a wrapper for a 3rd party lib. Let’s go 4 months down the road where we want to switch out that lib because of a performance consideration. With an interface, it’s literally just building the implementing class. Without the interface, you’re dealing with the implementation all the way through your program. You now have to switch all of that out. Huge time investment. If you follow YAGNI too strictly, you’re missing out on productivity. It’s all about being smart with your time, and *good* interfaces are a good tool.
IMHO I think this is a perfect case of YANGI but I suspect your view is different to mine, and that's fine. &gt; You now have to switch all of that out as everything is going to be different. Huge time investment. 1. Change name of class from user to 'IUser' using refactor tools 2. Change IUser back to user manually 3. Add IUser interface Done. Under a dozen mouse clicks and keyboard keys pressed. &gt; ...and you’ll put more thought into what you want the interface to expose. Out of interest I use test driven for complex stuff so I put zero thought into what I want the interface to expose, until it feels dirty and I refactor.
If you are not writing unit tests or libraries it is normal. You of course use interfaces written by other people but you do not declare tour own.
Last year, I wrote an application to automate payment of invoices received as PDFs for my employer. As part of this project, I threw many thousands of PDFs from numerous sources at all of the libraries, paid or otherwise, that I could find. None of the libraries were perfect, but in the end Bytescout's PDF Extractor was closest. One thing that it does that I couldn't achieve directly using any other library was the ability to first attempt direct text extraction and then if that was unsuccessful, switch to an OCR based method. I read your GitHub page, but I couldn't tell if you planned to support both text extraction methods? 
Use wmi so you can use native .NET calls instead of having to make calls to a separate executable.
That’s already 3 steps right there, and that’s the happy path for realizing you actually should have used an interface. The, in my opinion much more realistic scenario, is that User has a bunch of methods that were created normally under the assumption that this would be the only User ever. Problem is, the new class can’t match the signatures of the new IUser, whether it be because of the return types being too specific to User or some of the original User methods being too specific to the User class. So now you are basically creating a new IUser interface which makes sense for the new impl, and rewriting portions of the User class to meet the new contract. Updating everything downstream in the process. And rewriting the tests. Now, can this be done using refactor tools? Absolutely, but not nearly 100%. There’s manual work involved, which means room for error. And though you can avoid that gnarly situation by writing your initial classes as if they adhered to some contract, that would be pretty cumbersome doing it for every single class. So I guess the bottom line is that for me, I’m lazy as fuck. If I have to write 3 unused interfaces for a given project, just to ensure I don’t even have to rewrite (refactor tools or not) that code down the line, then that’s worth it for me. I respect the YAGNI viewpoint and 9 times out of 10, you’re right. But I don’t wanna fuck with that 1 time.
Hate when people have shitty class names 
They don't include it because they made their own. https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.json.datacontractjsonserializer?view=netframework-4.7.2
Loving these performance posts. Is 2.1 out of preview yet? Can't wait to use it for production.
Sounds like you’re referring to a code repository. GitHub would be your friend. That or upload your projects to DropBox.
Generally you would want to setup a master server. Information would get sent to this server and would store your database password. No user will ever have access to the server and all data handling would be strictly authoritative.
File Class in System.IO. You can iterate through files and filter them using a simple For Each loop.
I agree with the comment about version control. I like git personally.
🖕
The very first thing i did is to try GitHub. I discovered that i can edit file on one computer without getting latest version from GitHub first. I remember, from back in a days, Visual Source Safe could "lock" files so if i started to edit the file it would automatically check our latest checked in version. Is there a way to get that functionality with GitHub?
As others have said, use source control in the cloud or a cloud drive. I prefer sync.com to Dropbox as it's end-to-end encrypted.
Would like to see comparison with ordinary .NET
I love Resilio Sync for all my syncing needs, which includes syncing repos. 
Use git. 
In the long term I recommend git, but it can be a little bit annoying to work with. SourceTree helps a lot. Without SourceTree I wouldn't be a git user. Git is really useful. It's great being able to revert your code to a previous state so easily. Also really helps with the backup strategy and the compression is really good. As annoying as it can be, you're really missing out if you aren't using it, or some other version control system like Mercurial or Subversion (never tried those). 
It may be a feature needed due to lack of understanding alternatives, but one of my clients has been stuck using iTextSharp for invoicing purposes due to the table feature and automatic handling of repeating the table header on page breaks. (Useful for invoicing/reporting with many line items.) Even a lot of the big name commercial PDF libraries don't seem to support this (at least last I checked) so it may be difficult or not popular to implement but this would be HUGE for me once you get in to writing PDFs. (Or I suppose at least some event that is triggered when there's a page overflow so a new header can be inserted.) Stuck using the full framework on an in-house server to pre-generate the PDFs, which is a huge waste of resources. Would LOVE to see this in .NET Core library even if added as a paid/premium feature (assuming pricing vs iTextSharp was comparable/better.)
I've created an application where I work that scans and saves to pdf utilising Fujitsu's SDK which is pretty awsome. The barcode recognition while it's scanning is essential and works brilliantly as most forms we scan contain 4+ different barcodes which we need to capture. However, we're now receiving third party produced pdf's which can't be processed via the scanner, so multiple barcode recognition is needed. Also, just plain viewing pdf's is annoying! Currently using a frame and relying on the pc's installed version if acrobat reader, but you have to muck around with the settings to stop the sidebar from displaying all the time. Has anyone discovered a (free) lightweight viewer?
I have worked on a lot of projects without unit tests that do not fit this description. They work, they are useful to the clients, they make money. Maybe it would be better with unit tests but the claim that you always need unit tests or else you can't build software is absurd.
I use git, but if I didn't care about versioning and histroy I'd seriously consider just using OneDrive.
Use git or similar. You should really be using source control anyway. You won't get any pity here if you accidentally delete 6 months work and weren't using source control.
Git? SVN Server? Syncthing on the project folders?
These are improvements to things I use all the time too. Every single day. I wasn't expecting that many changes to those core libs, I'm really curious to see the totality of the changes in my applications.
Just learn Git. Version control is an absolutely essential skill to have imo. It won't just serve to keep your various machines in sync, it will also serve as a complete history of your project. If you're working on two different machines at different times it couldn't be easier to keep in sync just using the built in VS team services Git plugin.
Personally i'm using MegaSync, and on top of this, few of my most important projects are on Github. 
No, you need absolutely the latest iMac pro with every option. 
I've already started, it's a fun experience learning it as it grows.
Sarcasm? You absolutely don’t.
I save my small personal projects to OneDrive. Any code I write for them is automatically sent to my other computers.
Here's the tracking issue with * stats * links to resolved issues * next steps. https://github.com/dotnet/coreclr/issues/9908
The master server should be an API then right? Or are you talking about something else?
Me too, and EF Core...
I would suggest you use the "Report a problem" function built into VS. A while back i had some problems with upgrading from one version to another. Had a fix from them within a couple of days. 
If you have access to a drop down button, change the delete button to one. Default is delete song, second option (via the drop-down) is delete all. 
SetForgroundWindow can't be used to steal focus from another active process, it is prohibited. You can use it to give focus away from your own process, or switch between multiple windows belonging to your process.
Have you confirmed that the value returned by MainWindowHandle is the window you're trying to make active? You can use something like Microsoft's spy++ to figure out the target window handle. https://msdn.microsoft.com/en-us/library/dd460756.aspx
Yes I am quite sure that's not the problem.
Ok do you have an other way of doing it then?
isnt it obvious?
Dunno, could be a troll haha.
Dug up some old (still working) code from when I was doing something very similar: Win32.Functions.SwitchToThisWindow((IntPtr)hwnd, true); Win32.Functions.SetWindowPos((IntPtr)hwnd, Win32.Constants.HWND_TOPMOST, 0, 0, 0, 0, Win32.Constants.SWP_NOMOVE | Win32.Constants.SWP_NOSIZE); Both functions are from user32.dll
Sorry, I don't know. This is something MS is actively going against, so if there is a canonical way, it will probably be buried somewhere deep.
&gt; SetWindowPos I tried with SwitchToThisWindow function, same thing happens. I did also try the SetWindowPos method, even though that seems to be more for moving a window. But I am getting the same result, even though the Dialog moved to the front, its like it does not really have focus. So when i send the key (ALT+Y) nothing happens, not even when I do that manually.
Nice!
No idea, but I’m curious about how much such a thing would be used 
&gt; Is 2.1 out of preview yet? It's not. [The official roadmap](https://github.com/dotnet/core/blob/master/roadmap.md#upcoming-ship-dates) says it will be released in Q2 2018.
Covariance and contravariance: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/covariance-contravariance/
Dunno what library specifically you're thinking of, but [Dataflow](https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/dataflow-task-parallel-library#programming-model) includes this concept.
Maybe in the example of the first link, the property FirstName has some Attribute where you set the DisplayName.
IObservable is the (categorical) dual of IEnumerable.
[IObserver&lt;in T&gt;](https://msdn.microsoft.com/en-us/library/dd783449.aspx); commonly used with [Reactive Extensions Rx](https://github.com/Reactive-Extensions/Rx.NET)
I don't think that's what op is asking (I know, &lt;in T&gt; make it confusing).
I think I seeing this same issue as well. Also when I hit a breakpoints about 1/2 /the time when i go to inspect the variables I get an error and have to restart.
Another option would be to add a key modifier: pressing shift eill change the delete button text and function to be a delete all whilst having the key down and pressed the button. Release of the shift key would reset it to it's default 'delete single song'
I am using exactly that Mac Mini for Xamarin development and it is USUALLY fine, but I'd really like some feedback if you try it. Since about Februrary, VS for Mac is a performance pig. As in, I just focused the window and it's immediately at 90%+ CPU usage. After I use it for about 20-30 minutes, it gets to a state where it takes 5-10 seconds between when I press a key and it shows up. I often have to resort to using VS Code to edit files and VS4M only for compilation. This also happens on a laptop I have, so I'm suspicious it's not just a "me" thing. However, these machines have been doing Xamarin dev since 2014 or so and haven't ever been reformatted, so there could be some corruption. So whatever you go with, PLEASE let me know if VS4M is behaving very poorly for you. I'd like to reformat but it's a relatively big task and I keep putting it off.
the editor is impossible to use. the code goes into readonly modus randomly for whatever reason, arrow keys dont work, having a single " or ' is impossible since it auto creates the 2nd and also deletes both automatically, no autcomplete (so i cant even make it autocomplete what i wanted to type because the code is in readonly mode again) else it looks nice but i cant test it more with this bugs
You should write your own program that you send the info to. This program will handle everything for you. No one will ever have access to this program. Now you may want to learn about multi threading, that way each time information is requested or received it will be ran on a separate thread. This is an easy yet secure way of doing things.
Removed: Rule 3.
15.6.6 is terrible for performance. Report the issue and submit traces and dump files. 15.7p4 is better but still has a number of Xamarin issues.
Fixed. Was a bug for non signed in users.
Im a newer to this world but the things i noticed while trying to solve Return the sum of 2 numbers is Tab just takes me out of the box, arrow keys dont work at all. and it doesnt keep the starting points when going to next line. Apart from those issues though the website is super clean and nice. I am using chrome on Windows 10, most recent version of chrome. Examples below What happens: public class Program { public static int Sum(int a, int b) { Int a = 5 int b = 3 } What i expected: public class Program { public static int Sum(int a, int b) { int a = 5 int b = 3 } }
Awesome :D Thanks! Let me test it real quick for ya!
Oh sorry didnt see the formatting weirdness in reddit with my last post. Its just not keeping things inline if that makes sense? I can provide screenshots if that helps
I love local functions. You can do stuff like this: void Test() { var rnd = new Random(); var keepGoing = true; // Do not execute this directly as it will run forever if "keepGoing" is true! IEnumerable&lt;int&gt; GetExpensive() { // Imagine this was an expensive operation... while (keepGoing) yield return rnd.Next(1, 100); } foreach (var value in GetExpensive()) { Console.WriteLine( $"Value: {value.ToString().PadLeft(2, '0')} | " + $"Keep going?: {((keepGoing = rnd.Next(0, 10) != 1) ? "Yes" : "No")}" ); } } Imagine that "GetExpensive" was something expensive. I suppose you could do this with a regular private method that takes in a CancellationToken or something, but capturing the "keepGoing" seemed to work well. You get results like this: &gt; Test() Value: 37 | Keep going?: No &gt; Test() Value: 52 | Keep going?: Yes Value: 04 | Keep going?: Yes Value: 22 | Keep going?: Yes Value: 02 | Keep going?: Yes Value: 35 | Keep going?: Yes Value: 63 | Keep going?: Yes Value: 55 | Keep going?: Yes Value: 11 | Keep going?: No &gt; Test() Value: 77 | Keep going?: Yes Value: 19 | Keep going?: Yes Value: 45 | Keep going?: No &gt; The next time I ran it it returned 22 items. 
Idk, List&lt;&gt; is pretty popular...
That's the one, thanks a whole bunch!
You could try: var obj = Json(myObject).Data; the Data method grabs only the contents of the Json object
He's talking about covariant vs. contravariant generic parameters. 😁
Newtonsoft's object appears to be bloated because what you're looking at is a JObject. I'm not entirely sure how to handle this with a nested object like you have, but basically you need to tell Newtonsoft to either deserialize that object as an [anonymous type](https://www.newtonsoft.com/json/help/html/DeserializeAnonymousType.htm) or as an [ExpandoObject](http://www.tomdupont.net/2014/02/deserialize-to-expandoobject-with.html). You can interact with both as a dynamic object, just bear in mind that the structure of an anonymous type is immutable in C#, so if you want to add fields from your C# code, you need to use ExpandoObject.
Not really. I wouldn't be surprised one bit if Apple placed a restriction like that.
Also, if you want to see some REALLY insane code, I wrote code with help from one Jon Skeet to find and invoke local GENERIC functions dynamically via reflection. This doesn't sound like this would be too hard but consider the fact that the names of the local functions are generated during compile time. Basically you create a method that takes in an Action&lt;T&gt;, and then call that method with the Action&lt;T&gt; being replaced by your local method called with a type you don't actually care about (say int). This makes the COMPILER do the work finding the action. Then, inside said method, you grab that action that was generated by the compiler and replace it's generic type with type you DO care about and invoke it. My original use for it was to be able to convert an object to it's ACTUAL type, and use it with type safety without using a switch statement or any casting. This actually turned out to be possible. One example usage for this was creating an auto-mapper for SignalR hubs into urls when "MapHub" is generic only and doesn't allow you to use the System.Type: public static void MapHubs(this HubRouteBuilder routes) { // In the real code, this is in a Lazy&lt;T&gt; so that it's not calculated unless we need it. var _hubTypes = AppDomain.CurrentDomain.GetAssemblies() .SelectMany(curAssembly =&gt; curAssembly.GetTypes()) .Where(curType =&gt; curType.Namespace != null &amp;&amp; curType.Namespace != SIGNALR_BASE_NAMESPACE &amp;&amp; !curType.IsAbstract) .Where(curType =&gt; _hubType.IsAssignableFrom(curType)) .ToList() // Local method accessed via "Invoke.Generic" so that we can use any "Hub" class inside of it in strongly typed manner. void HubRouter&lt;T&gt;() where T : Hub =&gt; routes.MapHub&lt;T&gt;(GetHubName&lt;T&gt;()); foreach (var type in _hubTypes.Value) Invoke.Generic(HubRouter&lt;Hub&gt;, type); } public static string GetHubName&lt;T&gt;(bool asLowerCase = true) where T: Hub { const int NOT_FOUND = -1; var name = typeof(T).Name; var lastIndex = name.LastIndexOf(nameof(Hub), StringComparison.OrdinalIgnoreCase); if (lastIndex != NOT_FOUND) name = name.Substring(0, lastIndex); if (asLowerCase) name = name.ToLower(); return name; }
I haven't tried it yet but it looks really good. What separates your website from similar ones that already exist and have a larger userbase?
I think I know what you mean but a screenshot would indeed be helpful.
Thank you for all your help on this, ill give it a try. The main issue here is the json string im getting may or may not have a meta attribute, and when it does the data inside can be even more json objects or a simple array... so i have no way to account for what the server is going to give me for the meta attribute.
Those other sites are primarily talent scouts for companies looking to hire good programmers. Nothing wrong with that but I think the user experience has suffered as a result. None of them are meant to be approachable for a beginner. I want Edabit to be like Duolingo for learning to code. To answer your second question, Edabit is pretty much 100&amp;#37; JavaScript. * React * Meteor * Semantic\-UI * MongoDB * Docker \(for executing code\)
Thanks for answering so quickly. I will definitely try out your website at some point. I was referring to websites like https://www.codewars.com btw.
Very good - like it :-) Much better than (the now defunct) Code Hunt: https://www.microsoft.com/en-us/research/blog/what-if-coding-were-a-game/
I am doing it for WPF
[removed]
You can directly use the `JObject` etc. types from Newtonsoft as `dynamic` because they implement `IDynamicMetaObjectProvider`, no additional tricks needed.
I would love to, do you have some suggestions? Unfortunately the meta property is not predictable, sometimes the server gives nested objects 20 obj's deep, sometimes an array, sometimes some of those nested objects have arrays instead of more obj's. I dont know how else to handle it.
Even with the dynamic you need to "try" to find properties, right? If the server replies with the same few "object configurations" try to deserialize to the one you know you are receiving. Unless of course you are forced to always iterate through the properties of the received object, in which case it might even be better to use the newtonsoft JObject so you don't waste time deserializing into dynamic. It's hard to speculate without knowing more details 
I tried the Return the Sum of Two Numbers challenge and had to add a blank `static void Main(string[] args)` function for it to accept my solution. Nowhere did it say I had to write the Main function until I tried to compile. Seems pretty user-unfriendly to say that the exercise is to write a Sum function and force them to add the Main function.
The challenges were translated a few days ago, so there may still be a few bugs. I'm trying my best to stay on top of them. If you spot any, please leave a comment on the challenge.
Also, you don't have to write a Main function. That particular challenge works as intended. ``` public class Program { public static int Sum(int a, int b) { return a + b; } } ```
It does not for me: error CS5001: Program `solution.exe' does not contain a static `Main' method suitable for an entry point Error: Command failed: mcs -out:/home/codewarrior/solution.exe /home/codewarrior/code.cs error CS5001: Program `solution.exe' does not contain a static `Main' method suitable for an entry point
Use the Check button. The Run button is only for logging output to the console.
Yeah, that does work, but it seems unnecessarily confusing. If it works that way for the Check button the behavior should not differ for the Run button.
Hey, that's pretty cool! One suggestion though - I'd like to be able to see the instructions and my code on the same screen.
It might be worth keeping it, since if you submit a working solution, you can't test any other solutions without restarting the challenge. Sure, you can do `a + b` for a sum, but you could probably do it in other roundabout ways that are... unconventional, but I like to have fun with these kinds of exercises to see what works and what doesn't.
This is so cool. Especially the comparisson to the other participants. Love it.
My favorite challenge is this one: [Pi to N Decimal Places](https://edabit.com/challenge/uz6HACQLjH9DE6HcP) the unit tests fail for valid solutions XD
Split in two, for the extra portion clicks and ad revenue!
I didn't want to create an account just yet, I wanted to play around first. But it looks like if you do any challenge, press "Check" and then don't press "Submit final", on going to different challenges there is no "Check" button any more, only the "Submit final" button. Other than that, it's pretty cool, pretty clean and straightforward. I like it. My only other gripe is clicking the "Run" button gives me compiler errors for not having a Main function, which another user has already commented on.
This is so so great! Thank you so much! :)
Off the shelf the mini can be slow, at lest when they shipped with 5400rpm laptop drives, now days they ship with SSDs so that should be an issue. If not they are easier to maintain and upgrade vs your iMac 
Go for the Mac mini. You can easily upgrade the system, ram, cpu, and drives. You may need a couple of putty knives from your local hardware store, but it’s doable.
I think you mean: public static int Sum(int a, int b) =&gt; a + b; 
Agreed. Same problem here.
Agreed - this is a bug, OP. If you change your solution, the Check button should reappear.
The default indenting is very bizarre for me (Chrome).
Either works, but I would go with Azure at this point. If you use the Visual Studio IDE then you have deployment to Azure built in. Any cloud experience is in demand now.
I was just going to but it looks like its fixed. Maybe the bug with arrow keys and stuff not working for signups fixed it. Spacing looks great! :)
Say it to compile time in Xcode slow cpu still will be slow. 
 &gt; 0! 0! = 1 
Wat ?! How you can upgrade hardwired ram?
You absolutely can, though then your dynamic object will have all the JObject fields and properties on it, which is what the OP was trying to avoid.
No it won't, that's the point.
Short answer: Yes. Long answer: most of the C# features are built into the compiler, which compiled down to all available .Net Framework SDKs
They did what??? 
Why? It's difficult to read and unnecessarily complex. This works just as well. IEnumerable&lt;int&gt; Get() { var rand = new Random(); while(true) yield return rand.Next(0,10); } foreach(var val in Get()) { Console.WriteLine(val); if (val == 1) break; }
On Firefox v59.0.2 (64-bit) When trying to sign in I'm noticing that my LastPass extension (v4.9.1.1) stuff is also being blurred: https://m.imgur.com/gallery/U2YKl5Z Steps taken: https://edabit.com https://edabit.com/explore https://edabit.com/challenge/ARr5tA458o2tC9FTN (How Edabit Works). Edit the code tap to return true. Hit the "Check" button, test passes. Hit the "SUBMIT FINAL" button, login screen appears I'm also noticing that if leave this page, like returning to the home page without logging in, and come back to this challenge, that the "Check" button remains in the "SUBMIT FINAL" state but the code section has been reverted back to normal. Hope your sites does well, and good job! :)
Agreed. I don't personally like Trump, but for a coding practice site I don't think it should have a political stance or commentary.
search raymond chen’s blog, he’s written about this 
I will take a look into the LastPass issue tonight. The Check/SUBMIT FINAL bug has been fixed on the dev version. I'll deploy the update later tonight. Thanks for pointing out the bugs!
You do not need to learn elastic beanstalk. You can deploy to a Windows Server that you manage, which is what I do. At this point, the primary reason I use AWS over Azure is for Lightsail, due to the included bandwidth, which is worth a lot of money. In terms of skills, I don't think it matters which one you use. 
/u/memystic I got an error, also don't tell me what to do! https://imgur.com/2UigDLe
I figured something like that would be the case. But I think people who have no idea how to code will get really confused by this. Also I think figuring out a tutorial on how to read stack traces would be AMAZING. Also if that tutorial could be written in such a way I could send it to my business analysts to learn so if they do get a 500 error stack trace they have a bit more know how for reading it (since some of them tell you enough about what is wrong in the trace to take action) that'd be amazing.
Agreed, you don't have to learn Elastic Beanstalk, though the AWS SDK for Visual Studio will encourage you down that route. You also don't need to deploy to a Windows box if you're targeting .Net Core. I deploy to an Amazon Linux instance. LightSail is good, by the way, but limited when you want to scale up/out. I'd avoid it for all but the very simplest of implementations.
I'm just thinking that it might open up a can of worms. There's bound to be challenges about other politicians, religions or whatever. I don't really care, but as I said earlier it doesn't exactly feel very professional to have such opinionated content.
I think it's fine. It's pretty tongue and cheek and he's pretty well known for his Twitter nonsense. You'll definitely offend some people with it there because this is the Internet, but it's your site so it's your call. Personally, I wouldn't pander to the people who want it gone, but again, it's your call. 
I can post the code, just compile it.
I'm incapable of "just using code" I start with it and the next thing I know, I'm writing a publishing framework using it. But I appreciate the offer.
https://portal.starbucks.com It’s not public, you need to sign up. I believe it’s a simple REST api.
As someone new to C# this is amazing but also I have no idea what I'm doing. So far I was only able to solve "Return the sum of 2 numbers"
Just added one to the "odd or even" challenge. The most difficult thing right now for me is not knowing what to google. I find myself looking for solutions and I can't understand what they do. 
+1 for TFS
Personally i hate GIT. I find it clunky and obtuse, especially for a beginner like yourself. I would suggest TFS. Easy to work with inside of Visual Studio!
Yeah I know the feeling. And when you do Google, you’ll just get complete spoilers from Stack Overflow, which doesn’t really help the learning process very much. Check out the JavaScript challenges. That’s what C# should look like in a month or two.
I would consider using Unity. It might seem like overkill at first but really it's not: * It uses C# * It allows for Text input * It's a gaming platform * It supports prefabs which are re\-useable components \(in your case UI elements\) You'll eventually start to think of new things that you'll want in your CYOA such as "I might want to have backgrounds" or "I need a menu". Unity will make those a breeze.
Is this kind of what you're after? https://scottlilly.com/learn-c-by-building-a-simple-rpg-index/
Also I know the book Head First C# has exactly what you're describing.
The easiest way to evangelize this tool is to all the other person (or yourself) "Is Daylight Savings time a scientific or political construct?" When you realize it's political, and changes on a whim, you'll begin to fully appreciate Noda Time. - or something like that, I don't know, it's late. ( but it's 5:00 pm somewhere)
Im trying to run Ignite.NET sample on my machine. but it didn't work. It thrown EndOfStreamException "Not enough data in stream [expected=4, remaining=2]" Could you pls help me? What am I missing? Im using Window 10, JDK 1.8.0_171, Dotnet Core SDK 2.1.104 
took out my ssis/rs installs as well
The indenting is incorrect public class Program { public static bool TimeForMilkAndCookies(int year, int month, int day) { if(month == 11 &amp;&amp; day == 24) { return true; } return false; } } VS public class Program { public static bool TimeForMilkAndCookies(int year, int month, int day) { if (month == 11 &amp;&amp; day == 24) { return true; } return false; } } The second one was formatted using Visual Studio
In a frame work like WPF that is highly built around the concept of data binding, the more "aligned" the bounded class is to the view, the simpler the binding logic can be. In some cases, there are no problems with binding directly to a model, but in others, the presentation differs enough that binding directly to the model can cause issues. Enter the viewmodel, which can wrap the underlying model and structure it in such a way that the view has exactly what it needs so the binding and presentation logic is simpler. The added benefit is additional separation of concerns better the presentation and the data model.
IMO MVVM is a pattern that tries to extract some state and behaviour out of a user interface into a separate class. We typically want to do this for a couple of reasons. 1. We can run automated tests on this class without involving a user interface. Automated UI tests are usually slower and flakier compared to straight unit tests. 2. We can share this class across multiple platforms using tools such as .NET Standard and old school Portable Class libraries. This allows the same functionality in say the Login screen in your iOS app as in your UWP app. The C# Xaml frameworks support the MVVM pattern well with technologies such as data binding and commands so there's not a huge cost in having this split between the view and the view model. So what goes into the view model? Different people have different opinions here. Some people so hard to one end of the spectrum and believe the view should be plain xaml and no code in the code behind. This can be problematic as not all scenarios fit well into this model and the developer can bend themselves into knots trying to meet this goal. IMO its flexible and it should be really go back to the stated goals above. When there's things you want to test and what you want to share, that's what goes into the view model. A good easy example is a login page. Typically this has two inputs Username and Password, most likely modeled as string properties bound to the text boxes. We'd most likely have a login method / command bound to a button. We only want people to login if they've entered a username and password so we'll create a CanLogin property that returns true only if the username and password is populated. We can easily unit tests that CanLogin returns the correct value in all states. We can also unit test that when the login method is called the authentication service is called using things like mocks and dependency injection. In our UI we may have the button be green when they can login and red when they can't. Typically this is very view specific code, difficult to unit test without spinning up an emulator etc and probably should't be on the view model.
Using *only* Table5? No. Table 5 does not contain that information. Or do you mean this: SELECT DISTINCT Table4.* FROM Table4 JOIN Table2 ON Table4.PK = Table2.FK JOIN Table5 ON Table2.PK = Table5.FK This would fetch all the data from table 4 which has corresponding data (via table 2) in table 5.
Your mother
I don’t know it was just really hot when I started using it
Sorry only work with xamarin 
I would still **start small.** Making an engine from scratch is often bigger task than tought of. u/Kaverse recommended use Unity. I will also do that. Its farily easy to start with, there are lot of tutorials how to do things, and its very expandable \(3d/effects/images/lights/VR/AR/what ever you can imagine\). There is lot of free and very cheap resources just to get, just with few clicks. In your case I would start with new project in Unity as 2d, add text element to it and change that element text with code. Its super easy if you know how, but will teach you the basics of the Unity \(IDE/UI, gameobjects, refrences, etc\).
Alright, will check videos of deploying apps to Azure. Only Web apps can be deployed to Azure, right? I recently came across c9.io where we could code in a browser and the environment was set up on their server. Could the same be applicable to desktop apps? Running them on other servers and accessing them through web browser?
Mr. Krabs https://imgur.com/gallery/H4ahp7p
It meant I wouldn't have to do vb/asp any more.
Yep, it's almost completely identical, see: https://stackoverflow.com/questions/1180860/public-fields-versus-automatic-properties TL;DR: If you're not writing a library then you'll generally be able to convert between a public field and a fully public auto-implemented property with no functional difference. If you're writing a library you should probably consider changing a public field to an auto-implemented property to be a breaking change. I think a lot of people rationalise auto-implemented fields as being better than exposing a public field (the same people will also rationalise exposing every variable in a class with a getter and setter in other programming languages). In terms of complexity there's really no practical difference and whether you're doing: A.X = 1; or A.SetX(1); You're still exposing the same amount of surface area in the public interface to the class, one is just plays nice with refactoring because you can change the implementation without changing the class interface.
Brackeys, his vids. I thought Unity would be perfect to enter the gamedev world, thus I required C# knowledge. 
1) A field cannot be declared in an interface. 2) A property can be get only, or have various modifiers on the setter. For example: public string Name { get; private set; } // settable by other methods in the class public string Id { get; } // settable by constructor public string Foo { get; } = "Bar" // Readonly property with predefined value 3) Data binding - does not work with fields 4) ORM mapping - Entity Framework works with properties, not fields. I guess Dapper too? 5) Debugging - you can set a breakpoint on a property setter or getter to see who reads and writes to it. 6) An inherited class cannot override a field. Consider the following: public class Foo { public int A; public virtual int B { get; set; } } public class Bar : Foo { public new int A { get; set; } public override int B { get; set; } } void Main() { Foo foobar = new Bar() {A = 6,B = 7,}; Console.WriteLine(foobar.A); Console.WriteLine(foobar.B); } What is the output of Console.Write(foobar.A), vs the output of foobar.b? Because you are referencing the base class Foo, instead of Bar, you are actually referencing Foo.A instead of Bar. So the output is 0 for foobar.A. And since Bar.B overrides Foo.B, Foo.B correctly outputs 7. 7) Keep it consistent. If you have five variables you need to declare, why should you declare two as properties and two as fields? Personally, I always use public properties and private fields.
I was employee of a Microsoft Certified Partner company selected to beta test .NET before it got announced to the world. At the beginning I disliked the bland Java copy, but came to love the Delphi touch Anders added to it, their focus on JIT/AOT scenarios and having the CLR designed from the ground up for multiple languages.
I was tired of writing COM+ components in VB6
Me with C++ in school: 1. Now which motherf***ing operator do I have to use again to access a field of this shit? 2. Scrolls a mile up. 3. Ohh yes, its a f***ing pointer. 4. Scrolls a mile down 5. Types "-&gt;" 6. Proceed to use "-&gt;" for the next object 7. Program crashes 8. Scrolls a mile up 9. Ohh, its a f***ing stack object 10. Scrolls a mile down 11. Replace "-&gt;" with '.' Me with C#: 1. Types a '.' for object A 1. Types a '.' for object B 2. Program works 3. Me be happy.
When I was about 15 I had been hobby programming in Java for a year or so and my father suggested I should try C#. The Visual Studio 2005 Beta had recently been released so I installed it and the rest is history.
I just want to ask, how did you send the key press? AFAIK sendind WM\_KEYDOWN message should work without having to give focus to the target process..
got job as .net developer
I am not sure what you have problem with, you said: &gt; I want to display all the values I need in a datagrid, what would be the most effective way to get those values? What values? If you have like customer id \(I assume PKCustomer is some kind of id\) and want to get all orders he has, you could simply just \(assume again its SQL\), also assume id is 12: `SELECT * FROM torder WHERE FKCustomer = 12` Seems that customer and order have relation with each other and TPos and Article has relation with each other \(assumed by names\). Idk what Pos is but you could find all articles called 'Box' positions, like this: `SELECT * FROM tpos` `INNER JOIN tarticle ON tarticle.pkacticle = tpos.fkarticle` `WHERE tarticle.articlename = 'Box'` Then depending on methods you are displaying, you would read the values of the result set and fill them to display. If you are totally lost how to do this in C#, perhaps this could help: [https://www.codeproject.com/Articles/4416/Beginners\-guide\-to\-accessing\-SQL\-Server\-through\-C](https://www.codeproject.com/Articles/4416/Beginners-guide-to-accessing-SQL-Server-through-C)
An Azure Web App is maybe roughly equivalent to Bean Stalk. The idea is that you don't have to manage the operating system as a VM (worrying about patches, backups, disk space, whether the web service is running, etc). Instead, you get an environment where everything is already running and you just upload (deploy) your artifacts to the environment. Your database / caching layers / etc. all exist as separate services (Azure SQL vs Amazon RDS, etc.). It's a more expensive route because you'll need one environment per website instead of multi-hosting inside a VM. But you won't be spending time on managing the VM. We do GitHub -&gt; AppVeyor -&gt; Azure &amp; MyGet, with a few dozen websites / APIs. We're still debating whether to use Linux Docker images when we move to .NET Core.
Azure has other instance types. You can even do full VMs in Azure and run whatever you want.
&gt; What values? The values of the columns I want to fetch, which I've stated below each table. I need all of those to be displayed in a datagrid row, displaying all Orders period. The article you linked isn't really helpful in my case, most of the application is done already and is using a mix of LINQ and EntityFramework, it would become an even greater mess if I add another way of accessing the db now.
Just wanted to add that if you use auto properties and then decide to want to change something in the getter or setter, you can implement it fully yourself and the above code won't care. With a field, you would be screwed. 
Those are some great answers, but also, your question isn't stupid. It's a great question!
These days I recommend GitKraken over SourceTree. GK has improved a lot over the past year. The UI is more consistent across Mac / Linux / Windows (and I use it on all three). But the main reason to use any git GUI is easier visualization of the git branch graph, plus it gives context-sensitive list of "what can I do right now" when working with branches / merges / etc. Getting suggestions on "what can I do next" is helpful to people who don't know the arcane ins/outs of git. Subversion is a centralized VCS. It's strengths are binary files and being able to bring down only part of the repo. So instead of one git repo per project, you might have all projects live in the same SVN repo. Because it's centralized, branches have to be done as separate folder trees within the repo structure. Not as good as git/hg for merging or working with larger code bases. Art assets? Other binary assets? You should strongly consider a centralized Subversion repo over a Git solution. I have SVN repos with 10-100 gigabytes of files and would not hesitate to push them up to a terabyte. (TortoiseSVN also makes version control more approachable for less technical users who aren't doing a lot of branching/merging.)
Removed: Rule 4. You would have to provide more details and code about what you have, how you're accessing your data. You may also want to clarify about how you define the "most effective way", or if you're just looking for _any_ way to display them.
Serious question - How do you know what code is executing and when (in what order)?
Given that you're the second person to advise that I use Unity, I think I'll go with that. I initially didn't pick it because it sounded massively overkill but going by what both you and /[u/karaverse](https://www.reddit.com/user/karaverse) said it's probably going to make thing much easier. Thanks a lot :\) 
Money.
Probably the best answer to this very common question I've ever seen. Cheers!
\- Knock, knock \- Who's there? \- ... \- ... \- Java! Blame OP for starting this :P
Debugger + breakpoints initially, then experience.
Belongs to /r/ProgrammerHumor/
Note that the case `public string Foo { get; } = "Bar";` can still be set to a different value in the constructor. It's just like the previous case, except that it has a default value if not set in the constructor; the previous one will be null if not set in the constructor.
I’ll add to the other good comments. First a property is really just syntactic sugar for accessing a field or a computed value. It is a method that returns some data and, optionally, allows you to set it. Some languages like C++ and Java don’t have native properties. So if you wanted a ‘Name’ property you’d write it as getName() and setName(value). C# added the concept of property to the C++language, in as much as it is based on C++. An even more modern language like Swift does away with the concept of fields and just has properties. If you wanted a private ‘field’ in Swift you’d just have a private property. So really fields and properties can be the same thing. But the property pattern allows you to have more control over the backing data by restricting access. Also, as mentioned, a property can be part of an interface.
If you adhere strictly to it usually after the application main entry point, a Locator instantiates the ViewModels to which the UI elements are bound to, and everything derives from that. There's gotta be a viewmodelbase or mainviewmodel class somewhere, usually.
I really enjoy ReSharper
Didn't get this one... pls explain to noob
You can add them later.
There's no need for Entity Framework in your code, it's just LINQ
Can do anything with it from mobile dev to web
For 1-7 files, msgResult is equals to the length of filePath + 1, for 8+ msgResult is equals to 1 and the length of filePath is zero.
I know it will sound very cheesy but coming from a java background C# essentially fixed all the complaints and issues I had with java at the time. It felt like the people who made it didn’t hate me. They wanted to make it easy for me. To give me the tools to write nice, clean and straightforward code. This is heavily based on the fact that it was a product that people used to pay money to use (obligatory mono mention here) so ofc it had to be premium.
&gt; Nevertheless, auto-implemented properties don't implement any kind of verification and we can directly modify a field value using the setter. What's the use of having a private backing field then? You can change the way you handle access to the data (e.g. adding verification, lazily-initializing the value, using caches, etc.) without breaking client code if you use properties. If you expose fields directly, you're shit out of luck.
Yes. I always look for posts like these to hone my skills. Whenever someone says they are asking a stupid question, I listen very carefully to the answer, because there often be gold in them there hills.
Another point is simplistic sharing of data across views. Imagine a web browser for example. You can have a favorites bar, a favorites menu, and a favorites pane. These can all use the same data model and viewmodel with just a new view. A tab is just anotger instance of the same view with a different model backing it. It allows us to have code reuse in a simple and manageable form where all of the logic is separate from the view.
Just to note, EFCore has support for mapping to private fields.
My damn Visual Studio really slows down when installing ReSharper to the point where Intellisense spends 1-2 seconds thinking what to show me, I am probably just an impatient doofus but I can't stand!
Java is show
Disclaimer: development dinosaur, last time I had any exposure to Java it was ~10 years ago; back then Java was noticeably slower than .NET in general (and as any such general statement you could find multiple counterexamples). No idea if this still applies.
Garbage collection!
A new job. I was working in VB, a job came up for VB/C#, I applied and made it clear that I didn't work in C#, but had plenty of experience in VB and with the .NET libraries, and Java/PHP and other C-Like languages. Got the job, starting using C#, and here we are
If you're scrolling a mile in any language, you need to change your structure
I learned vb.net first and thought c# looked cooler. Seriously - I was in middle school and that's why I switched
A lot of my college courses used it and I'd previously been using VB.NET in previous courses; C# is much less verbose!
Someone started paying me money to program in it. 
It reminded me of a good blend of C++ and Swift. And that async/await feature; I love that!
Unity
I have written a GUI application for RabbitMQ that maybe will help you http://queueviewer.com . It allows you to view queues more easily and to move/delete messages. You have to enable the RabbitMQ management plugin (https://www.rabbitmq.com/management.html)
There is almost no reason to ever be using a public field. The only valid clear cut use I've had for a public field was to use it for an edge case matching an out/ref parameter. Auto-implementing properties take away all the boilerplate you had to do for simple cases. There is no excuse to not do it proper anymore. You're only shooting yourself in the foot not doing it. In fact, you should be running code analysis, and it should flag public fields with [CA1051](https://msdn.microsoft.com/library/ms182141.aspx) or similar.
What sparked my interest in C#? Queen Latifa has a song that explains it better than I ever could: U.N.I.T.Y https://m.youtube.com/watch?v=mm2T60RNjMg
One good teacher. I could not get programming, then I realized that none was actually teaching it. I just got handed a book and was told to figure it out. Then I had one teacher who actually gave a shit and it was a C#.net class. he’s why I ended up sticking with the language longer than others. 
completely empty (not null, only empty). I'm using this SendMessage: [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = false)] internal static extern IntPtr SendMessage(HandleRef hWnd, uint Msg, IntPtr wParam, StringBuilder lParam); There are another version: [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = false)] internal static extern IntPtr SendMessage(HandleRef hWnd, uint Msg, IntPtr wParam, IntPtr lParam);
SSMS Intellisense does that consistently in decently sized databases for me.
&gt;We’re currently planning our next major .NET releases and would love to hear your feedback on how you interact with .NET Framework and .NET Core today. Please fill out the survey below and help shape our next release by telling us about your biggest challenges and needs. It should only take 5 minutes to complete! &gt;[Take the survey now!](https://microsoft.qualtrics.com/jfe/form/SV_8dJQUWHTAsoRWst)
The first example looks correct. Your second example is wrong, or at least that's not the default way the braces are formatted for classes in Visual Studio. You should check your settings.
money
Also, property getters can be used as delegates, and in functional programming in general. That can be quite useful.
That is one of the biggest issues with r#, really. Just ask yourself if the additional features are worth the UI slowness :)
And the most obvious... ...you can always add verification / transformation logic with a full setter later. It's not safe/trivial to change a field to a property. Anybody that can't recompile against your new version will simply break. Fields can be `ref` or `out`, which will break your callers if you change it to a property. Not all .NET languages support properties, and will fail to compile because "SomeClass.Foo changing to SomeClass.get_Foo()/set_Foo(value)" will obviously be a breaking change. Meanwhile, if you change public string Foo { get; set; } To public string Foo { get { return _foo; } set { if (value == "NO") { throw new ApplicationException("NOYUO!!!!!"); _foo = value; } Then the only people you broke are the people who violated your validation logic.
RunUO, the server plattform for Ultima Online.
Somewhat unrelated rant incoming: atleast in wpf a lot of controls become incredibly complicated to use all of a sudden. Things that would be 5\-10 lines of codebehind become 80\-200\(!\) line xaml style data triggers. each. Especially with datagrids this can become infuriatingly messy. Multiple selection enabled my ass. You'll need dirty dirty hacks and workarounds for the most random things. Wpf databinding shines with mvvm \- sadly it seems like they got the idea after they had 80&amp;#37; of the controls implementation done. Actually DataBinding itself feels like an afterthought. Take FlowDocument for example. Make one in a ResourceDictionary and have it bound to a view model. Display it to the user \- all is fine. Now have N instances of those. Make a print button. Obviously you don't want to display them all before printing. Well get ready to google for an hour untill you find out you'll have to tell the dispatcher to wait untill bindings are resolved before proceeding with your for loop or you'll just get fallback values. No seriously. Wtf kinda operation returns before it's done \&gt;\_\&gt; Flowdocument is just an example. This binding behaviour can fuck you over any time you print any view \(or do anything with a view thats not on the wpf visual rendering \- printing being the most common scenario\) i'd never use MVVM for small apps unless for practice due to the overhead in boilerplate alone. For medium sized/inhouse enterprise programs i'd go for mvvm for the unit testing but i'd heavily recommend agreeing on some common scenarios where the view is allowed to know about the viewmodel just because a one\-off view does not warrant the amount of controlers, value converters and sub view models a behaviourally complex but data simple app view might warrant. For anything larger then on the small side of medium yeah tho MVVM is the way to go.
I have never tried AWS, but if you're considering Azure Functions, I would seriously suggest you take a long hard look at Lambda instead. I don't know if it's any better, but Azure Functions has serious reliability issues for a production system.
The API for our call center software (help desk) did not work for Powershell (some language problem). So I spent 1,5 years learning C# to build a tool that looks up users from AD based on the caller ID. It has definitely earned itself back in time saved.
&gt;What are the most important aspects of an application framework for you? Please order the items below by drag-and-drop Multiple things in the list are not important to me at all &gt;What do you dislike the most about .NET Framework? I'm kind of a grumpy guy, but I can't think of anything to write here.
Liked C++. Did not like Header files.
Liked Java but hated the available IDE's at the time amd many things in Java felt awkward. Hated VB.NET because of its verbosity but liked the environment of .NET and Visual Studio. Solution? C#. As an added benefit, I am starting to learn F# which I can use in my C# applications. Love the CLI/CLR.
Yeah, the survey seems to be designed in way that makes you not want to finish it.
Game programming with XNA.
This is very legit question one that I always care to explain when teaching C# to beginners and one that is often misunderstood. A property is a contract. Internally it is compiled as a pair of get and set methods. When you create one assembly (dll) with property and use it in another the compiler generates code to call a method. If you now release a new version of the first assembly and you switched from public fields to properties even if the properties have the same name people would still need to recompile their code. In case you had used properties from the start you can just add whatever logic you want and the assembly can be deployed just by copying it over the old one. This is the real reason we use properties before we need them. All else like the databinding stuff is a consequence rather than a reason.
Well, I don't have other ideas, guess that you can try it for good measure... Btw. in this case, HandleRef is kinda pointless since you're passing it a handle to an unmanaged object.
They are about neck to neck (JVM vs CLR that is). Although, C# and the CLR (.NET Core in particular) in general is getting some nice improvements to performance that often beats Java benchmarks consistently. If all the R&amp;D that went into the JVM went into CLR, C# would probably right now be faster than Java by a nontrivial amount.
How it is now, but with hookers and blackjack
I was originally writing C and VBA/VB6 code. A coworker asked me to help out on a project back at the beginning of the .NET 2.0 days. I liked the structure and the ability to deploy code without a complete hassle.
Oh yeah I agree that you might as well use a public auto-implemented property since they fix a couple of potential issues. I just think that people often think 'ok 20 public auto-implemented properties in this class, my code doesn't stink because it's not 20 public fields' when for all practical purposes they're *very* similar.
Also noticing performance is reducing after I collapse a lot of code blocks in the same file. Perhaps it is related.
I just posted my new working code, does that answer your question?
Thanks SeeSharpest, it took me a little time but you helped me to get it to work.
It's likely the responses to a .NET developer survey are few enough in number they can afford to sit there and read them. Canned multiple choice questions give you statistics, but if you ask the wrong questions, you miss the important things entirely.
Not so hot UWP adoption is easy to understand. If .net core adoption is low then there should be more ads and promotional materials, maybe. .net core is killer platform for microservices.
.net core is killer in general, but some people are stuck on the full framework for one reason or another - in my own experience, usually some hard dependency (such as something in the full framework). For us it's Umbraco.
Without knowing anything about python and not having looked much into ZMQ, is your issue simply that on the pub side you're calling "SendMoreFrame" with a value of "1001," and on the sub side you're subscribing to "1001"? Is that , in the pub side the issue?
I'm glad you got there :) Sneaky little "&amp;" in the button text eh.
Got tired of working with C++ Spent more time debugging than coding / designing. Also, some of the code other people were writing seemed nearly unfathomable with multiple layers of indirection.
Deprecate DateTime and DateTimeOffset and make Nodatime part of the BCL.
When I was learning to program in C or C++ in uni years ago they gave us shit tools. Like pretty much use Notepad++ and compile via `gcc` on a machien you are remoted into or [Dr. Java](https://en.wikipedia.org/wiki/DrJava) New uni kids have it so easy with Visual Studio. I remember being impressed when I was starting to use Visual Studio 2010 and that was the new hot thing (IDE wise for me, years ago)
&gt; The consultants they hired to teach everyone C# didn't know it I had this same experience really (esp with consultants who were actually contractors) trying to use Dojo. Although this was 2012ish. What a nightmare that was.
Removed: Spam.
Azure is more convenient with the tooling in VS, but it's a metric fuck ton more expensive.
I don't think so. The SendMoreFrame simply adds the parameter to the beginning of the message and the subscribe part just looks at the beginning of the message, so as long as the message goes like "1001xxxxxxx", the Sub side should receive it. Anyway, I've fixed this and forgot to update this thread. Thanks anyway!
Here's what comes to mind for me... I'd create a solution with a Game Lib (I don't call it an engine simply because you'll likely end up tailoring it so specifically to this particular project that you'll want to rewrite from scratch for your next one.... (ignore your next one for right now)) project and a winforms/Wpf/some other gui project. In the Game Library you need a world state, and the world state is just the complete listing of where to find every known detail about every single thing that does or could exist in the game world. The world state is composed of many different classes, it's definitely not the place to make a monolithic pile of code in a single data structure. In addition to the world state you need the UserEnvironment... this is a reference to every known user configuration... maybe that's cmd aliases or save file locations... etc. Then you need the simulator. This is where game logic goes. Every step of the simulator modifies the world state by just a little bit. Lastly you'll need methods of manipulating the state. You'll need to serialize/deserialize it. You may not need to serialize every detail and you may need to limit which states are valid for triggering serialization but the only alternative is to let the game think it's the first time every time. You'll need methods of Loading/unloading it (which should be viewed as different then serialization/deserialization IMO) You'll also need 'Engine' level manipulators and 'Player' level manipulators. These are both basically the same thing... a cheat code for example merely makes an Engine level manipulator a Player level one. Engine level stuff is like moving the camera, Initiating state changes beyond what the player should be allowed to do, etc. For example in a text adventure, maybe certain choices change day into night or vice versa. Or when a player needs to enter a whole new 'area'. There would be one very important central PlayerLevel manipulator which would just be "execute command". with the command coming from user input. This way, at the Gui level you could just have a text input which calls this function and the game library takes it from there. Also at the gui level, other input actions such as button presses or check toggles could also initiate text commands. This would make it easy to port the game between Gui libraries. Each command would trigger a different number of simulation steps with zero being a command that triggers no simulation steps (Checking inventory, status, etc). The out put of each command would be markup text that a specialized Gui output renders. Additional GUI controls could bind directly to various portions of the game state such as HP and , MP, Time, etc. 
&gt; What do you dislike the most about .NET Framework? Every single excuse from Eric Lippert about why they left something obviously better out.
 On line 84: catch { MessageBox.Show("Somethin dun goofed I reckon"); } If you catch an actual exception and print the stacktrace, what do you see? For the second problem: foreach (DataGridViewRow row in employeeDataGridView.Rows) { if (row.Cells[1].Value.ToString().Contains(searchSTR)) { row.Visible = true; break; } else { row.Visible = false; } } } Instead of `break`, did you mean to use `continue`? 
Business logic != App lpgoc. Generally the bussiness logic is in a layer, app logic is in the viewmodel.
- Testability - Reusability - Maintainability
i dont really know how to catch an exception and print the stack trace. I tried removing the break as well as adding continue and neither worked
 catch (Exception ex){ MessageBox.Show(ex.ToString()); } This will at least show you what the error is. Typically you want to catch specific exceptions, but you can worry about that later. 
I like the XAML parte of ooui.
It's been a while since I worked with DataGridView, but iirc you need to check the cell for null before trying to access the content, e.g.: foreach (DataGridViewRow row in employeeDataGridView.Rows) { double val; if(row.Cells[3] != null &amp;&amp; double.TryParse(row.Cells[3].Value, out val)) { payList.Add(val); } } Also, is the DataGridView bound to a collection? If so, you can run the the LINQ Min() statement directly against the backing collection instead of iterating over the DataGridView rows.
Yes that one i would probably never have found without Spy++
I'm actually happy to see this; When I talked about it with some colleagues the biggest pain point was the old license.
It's this simple - when the consuming code looks at a property it hands off the control of actually getting that property to the object, and it doesn't know "how" the value was returned. With a field the consuming code knows too much - it is directly accessing and aware of the internal state of the object instance. This is coupling and it's bad architecture - consuming code written in this way will change or become buggy when the things they reference change. Google-up on."coupling" and SOLID.
Remove the legacy APIs. The ones you had removed with .NET Core, but re-added them because of silly developers.
Keep us reported and show the progress. I am intrested how you succeed.
The ValuesController? That would really only make sense for someone who's created a new ASP.NET Core Web API project using the Web Application template in Visual Studio 2017, wouldn't it? It's not like ASP.NET has something called *the Values Controller..* That being said, I enjoyed your tutorial quite a bit because it sparked an interest in SignalR - illustrating how it could be used.
Well the `ValuesController` it's included in all scaffolded WebApis both in VS2017 and using `dotnet new webapi` so it's more implying that we're expanding the default functionality of the original template
It's just a controller though. 
Just a bit confusing, that's all. If I was new to ASP.NET.NET I would probably be like; *what the heck is a Values Controller?*
Yeah I guess my thinking was this wasn't pivoted towards people who are new to it considering I casually use dependency injection, service configuration and mapping without explaining it
What site? All I see is a white blank page. Your site should work without scrips enabled. I don't mean like do everything, I mean I should still see *something*. Something that might entice me to actually enable my scripts for you. At the very least a darn notice to tell me the site needs scripts. Speaking of... it's time to talk about your usage of hotjar. Which can track everything from mouse movement to basically keylogging everything. Your privacy policy just mentions hey, you can use third parties to track you and they do what they want. Nice. Well, not nice. That's bad. Especially here. You can basically watch somebody code. Oh, yeah, I'm sure that's a data gold mine. It's also creepy as hell and incredibly invasive.
That's true, Eclipse didn't even have built-in Maven support until a few years ago.
Woohoo! Managed C++ made the list. So it's not totally dead. Maybe.
Out of curiosity, what was the issue in the end?
`List&lt;T&gt;` does. `IList&lt;T&gt;` does not. 
.NET doesn't do perf counters when using Application Insights so I have to target 4.6.1.
I am betting on mobile OSes and WASM instead. HTML is never going to be as good as native, they have been trying for 25 years now.
Then everyone will just stay on full framework or older versions.
Reasons to target .net framework: You depend on something that's only available in .net framework Reasons to target .net standard: Everyone will be able to depend on you
Seems like a great way to steal sensitive data from morons. 
See if this helps: https://stackoverflow.com/questions/43948537/cannot-use-dynamicobject-in-net-standard-1-6-class-library-project
Exactly. You need to import `System`.
Removed: spam.
&gt; you yep it allows dynamic if you include microsoft.csharp is what I finally did. 
I ran into the same problem but I happened to Google the right way and found it. 😀
&gt; Reasons to target .net standard: Everyone will be able to depend on you &gt; &gt; I finally used net standard, in the wrose scenario is use a library which is inside of .net framework so, yep, netStandard 
Not if your DB is Oracle (beta drivers) and your messaging bus is IBM MQ (no drivers at all). MS needs to lean harder on other enterprise giants if they want .Net Core to become more popular.
CLI will **through** an error. Fix it op
"iterating through lists of different objects" this is only one usage. Have you used nullables? 
Try .net standard, but be aware that there are some things it doesn't support yet (it's getting better). Also hint, since you're writing a CSV library. Use Environment.NewLine to check for end-of-line. It will do the correct thing for your runtime environment. 
From what I've read, the ForceDotNet.Force() method basically changes how the script is read, so I'm guessing that method being called affected how the rest of the code were read, including the parts not meant to be read that way. I can't give a better explanation or confirm if this was the case because I don't really understand how it actually works.
Bit patronising and not very helpful, the real answer would be to make sure you have all of the needed references sorted out, Console belongs to system so make sure to include it :)
I'd say the real answer is "make sure your code compiles", and true lesson is " learn to read errors" - this is an invaluable skill, when "just add that reference" is only troubleshooting.
Yes I’d agree if he googled the error it would give him the answer straight away but the answer was a bit too stackoverflow hahaha
I'm not trying to talk you or your decisions down but are you sure you want to do this?
Hey all! I'm the CTO and Software Architect for Educations Media Group, a company based in Stockholm, Sweden that aims to help everybody finding the right education. We do so by offering several web sites targeting different markets and audiences. Our platform is based on .NET, both framework and core and we are heavily invested into AWS. We are currently looking for developers of experience between 2-6 years to expand our team. You can find more information about the positions open at http://career.educationsmediagroup.com 
I only use ASP.NET Core for web development these days because it is so fast &amp; cross-platform 
"make sure your code compiles" seems like a ridiculous answer for a question asking how to solve a compiler error. The poster is obviously new to c# so a detailed answer is warranted and helpful. The best answer would suggest adding the reference, explain why the reference is needed, point out the compiler error that provided the clue to the missing reference, and then provide resources for interpreting compiler errors. "Fix your code and learn to read errors" is pretty condescending and unhelpful.
Maybe I was misunderstood? Maybe I'm an ass? I don't know. What I meant to say was that standard troubleshooting technique is to separate the different parts of the system and test them independently. Don't mix in the complication of invoking the compiler programmatically until you have known good code. Then mix in the compiler api. That was, you can isolate your problems, one step at a time.
why can't you go back on this form. the bit that asked me about .net core surprised me as i'd already put all the stuff i liked and disliked about .net framework in the core bit
I don’t think it’s fair to question someone’s motivation when we don’t even know what that motivation is.
In case of too much information they can always use AI to sift through responses. 
Which ones are legacy APIs? Just curious.
yes I am^^
Could you give us a sense of what your high level goal is? There may be a less painful solution :)
Ahh, yes, you're right. I understand why they couldn't just tack it on, but it's still a major disappointment that `IReadOnlyList&lt;T&gt;` isn't a first-class citizen.
What are you trying to do? There is usually a strongly-typed way of doing things even if its not easy or obvious. dynamic operations are often slow and inefficient anyway...
Easy, many of the libraries these application depends on didn't have a clear roadmap for what they will do regarding .NET Core, while the same companies do have Java libraries with 100% feature parity with their current .NET Framework offerings. Then there was the issue that EF Core isn't compatible with EF 6, nor does it support the graphical tooling, while such tools are part of Eclipse and Netbeans.
How'd you like working with C# over Java?
This answer is the best answer.
How well does React get along with C#?
I thought that project was dead?
OP responded “yes” to “are you sure you want to do this”, not “are you sure you need to do this.” Maybe it’s none of our business.
Java isn't my favorite language, isn't my least either. But when coupled with Eclipse, I want to kill myself.
Had to write up some tools to help our artists script cinematics. Didn't know anything UI outside of MFC, and turnaround was quick. I settled on WinForms &amp; ended up falling in love with C# (but not really WinForms).
I don't want to say you're the devil, but I also don't want to say you're ~not~ the devil.
The main point where it has annoyed me, is if I make extension methods to both IList and IReadOnlyList. Then for List it is ambiguous. 
I’m really excited for this feature in C# 8! NullReferenceException seems to be the most common bug in code bases I’ve worked with. 
http://IronPython.net latest release came out February 2018. It's still very much alive and kicking. 
Like I said, it's been a while, but I believe if you would need to change the null check and parse in my code above to this: if(row.Cells[3].Value != null &amp;&amp; double.TryParse(row.Cells[3].Value.ToString(), out val)) { payList.Add(val); } 
object implements ToString() so that is very odd. In the provided code above change "row.Cells[3] != null" to "row.Cells[3].Value != null". Does the exception still happen (exactly the same way)? if so: can you repost that section of the code exactly how you implemented it? Set a breakpoint at the line the exception gets thrown and tell us if it happens at every itteration of the loop or at a specific one. 
Indeed. This will be a huge boon. (I still wish `NullReferenceException` would at least give you the _type_ of the object that was unexpectedly `null`, to vastly increase your chances of figuring out _which_ object was null…)
Agreed! Knowing the type of the object would be a huge help in resolving `NullReferenceException`s!
&gt;I am a bit puzzled as to why .net shop would not go to .net core. Because running a WinForms/WPF desktop app is a completely non-starter? Because even for our web sites that _could_ move to .NET Core, the toolchain feels a lot more fickle so far? (We did it with a project a year ago, and it continues to cause compatibility pains.)
To allow scripting.
I thought that some kind of SendMessage/PostMessage call could solve your problem, that is what I meant by saying that sending WM\_KEYDOWN could work.
Fixed, thanks for the heads up
The new exception tooling in VSCode and VS 2017 so tell you that, but you have to be debugging
I’ve loved the explicit nullability handling since I learned Kotlin, and it was the only feature I *really* missed in C#. So great we’re getting them now.
Put a breakpoint in the exception and take a look at what the row is. Maybe you have some kind of weird data in that column in your excel.
yeh sure. But what do nullables have to do with interfaces?
Yep... it's honestly a beautiful way to interoperate between the languages. I've been struggling recently to answer "is it okay to use this technology, or is coding in C++/CLI going to screw me if it's eventually abandoned". For example, .NET Core doesn't support C++/CLI and you can't do it cross-platform (say, on MacOS / Linux), right?
Yeah! What he said!
You need to print strings. Either use String.Join and pass in the list and delimiter or iterate over the list and print each value casted as a string
but why can't i print the ints
I appear to be incorrect. There is an overload that takes integers so they don't need to be casted first. 
You are outputting a **List object** as string. If you want to output every **int**eger object in the string, you can do it like this foreach(int i in list) Console.WriteLine(i);
Can you post the code of what you have?
I can't get my photo to upload! 
Since it wouldn't upload to Imgur I made a new post with it 
Just copy/paste the code here. Indent each line with 4 spaces to make it formatted nicely for reddit.
Here's the code in question: https://i.redd.it/0tsfj3ompct01.jpg
I made this much more complicated by using my phone for Reddit and computer for code, this was dumb I'm sorry 
When you call Console.WriteLine\(x\), you usually pass in a string type. There are lots of overloads for other types, but these are usually primitive types like int, decimal etc. which can be easily converted to a string and printed to the console. If you pass a complex type, how does the Console know how to write it out? If it's a DataTable, should it list all the rows on one line? What should it use as a delimiter? What if you pass something like a SqlConnection type; what should it print? Therefore, the default behaviour is to print the Type name. It's the same behaviour you'd get if you called .ToString\(\) on that type. The solution is to pass something simple to Console.WriteLine, like a single int or string. You can loop through multiple and print one at a time, or look into String.Join, which lets you pass in a collection type and concatenates into a single string.
Your methods are outside the class. You need to place them inside the class curly braces: class Contact { private string name; ... public string getName() { return name; } } and so on. Once you get this working, you can start checking out [C# Properties](https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/x9fsa0sw(v=vs.120)). They pretty much replace java-style `getField()/setField(value)` methods.
You have placed the methods outside the class, move them inside the class. 
Ahh, no problem then. (Though, you could just log into reddit from the computer?) Regardless, I answered the question [here.](https://www.reddit.com/r/csharp/comments/8dzmcf/how_to_access_private_variables/dxr7vnz/)
But thank you so much another simple mistake!
FYI, AutoModerator removed this automatically. I'll keep it removed. Thanks for the trouble getting the code posted. It made the issue you're having solvable for us. :)
Thank you guys for all the help!
thanks i understand it now
Your functions are not in the class. Move the classes’ } down
I don't know what `list` is but it's not the variable you're declaring inside the scope of your method, which is `a`. Essentially you're adding two items to a list called `a` and then returning the list called `list`. Proper variable naming will help avoid these mistakes in future.
i copied it wrong, i edited it, this is the actual code that wasn't working 
List&lt;int&gt; a = new List&lt;int&gt;();
return a;
Well, in that case : what isn't working? Can you show the calling code too? 
&gt; List&lt;int&gt; a; This line declares the variable `a`, but it doesn't initialize it to any value. C# and its compiler is smart enough to determine when you try to use a variable before it's been assigned a value. So when you have this: List&lt;int&gt; a; a.Add(n1); C# complains that you're trying to call the `Add` method on `a`, but `a` hasn't been assigned anything yet. By changing the line to: List&lt;int&gt; a = new List&lt;int&gt;(); You're declaring the variable `a`, _and_ initializing it to a new instance of `List&lt;int&gt;`. Now when C# hits the line `a.Add(n1);`, it knows that `a` has been assigned a value and can run.
From https://www.dotnetperls.com/new: New. This keyword instantiates a type. It invokes the type's constructor (with a matching argument signature). The constructor returns a new instance of the specified type.
this was very helpfull, thanks a lot, So now I made this "ToList" function in my class called "LLL". How do I call it from my program class
Make an instance of the `LLL` class then call `ToList` on it. LLL myLLL = new LLL(); List&lt;int&gt; myList = myLLL.ToList(2, 99);
What's the use case behind this? I'm genuinely interested.
! fokking money
You could make all the other properties hidden fields, but you probably only need to post the new tuition value and the student ID. Either way, I think the additional properties have to be in the form.
Ahh, very good. Would love to see more languages hop on with .NET.
Not sure why no one else has given you a straight answer. In order to use the csharp code compiler, the source you provide needs to be fully compilable code. So instead of just the write line string, you need to supply a class, inside of that a main entrypoint method, and inside of that your writeline statement. Hope that helps
A helpful mnemonic - every time you see List&lt;*something*&gt; say to yourself: "It's a list *of* something" And when you want to print the contents, say "I'm printing the things *in* the list"
The config transformation is a different. For example when you are working on a web app the transformation does not unless you publish the app. Hence, You cannot use it while debugging. On a different note, personally, I'm not a very big fan of transformation. I would prefer to keep the environment specific settings outside my source control and use tools like octopus for transformation and deployment. 
You could store the queried item in the Session, then use that to update with from the details page.
is that a better practice ? I guess I am looking for the best way to do this as I'd like to present this as a portfolio piece. Thanks for the reply.
It depends, but I would probably just store the ID as a hidden field, and use that to update the tuition.
What I was suggesting was having settings for local development actually checked in (and all developers have them the same way). Regarding transformation settings being checked in I didn’t say what took you would use to perform them. Octopus would be a great example of one that houses settings outside of source control. Clarifications aside I learned something new from your blog post so thanks for contributing to the subreddit. 
Oh man, couldn’t agree more. Having said that, if you simplify each line of code to only do one thing, and to also use the ?. operator, you’re 95% of the way there. 
My bad 😓
Why pull back the right object and not just do a straight "UPDATE table set tuition=value where id=x" sort of deal? Not sure what data layer you are using though. Malicious users could change the ID, so you would need to validate that that user has permission to change that ID. You could solve that by storing the ID in Session like mentioned before, or instead just making sure the user has access to that ID, or you could do something like storing *another* hidden field that is a secure hash of the ID (salted with a private salt on server), then re-hash the ID on the server and verify it matches.
You can actually add some magic to the csproj file that will cause transforms to be performed upon build. I forget how exactly but its not too difficult. I found that pretty handy to get around the problem of having to publish.
Another thing you could do is use if you are only changing a field is to use an AJAX POST to only get a partial and update only what you need. Then you are not rendering new HTML, but are instead just getting a tiny bit of data you need for that page. Traditionally you would post back and he server would rehydrate everything you need. Re-render the page you need and send the HTML along. With the ajax nothing on the page will change except for what the JavaScript is doing to the AJAX response
I think you are talkinh about this magic https://sebnilsson.com/blog/asp-net-transform-web-config-with-debug-release-on-build/ Agree, it's a nice trick. 
Exactly. Might not be best for your situation, but definitely useful to have extra build configurations with specific transforms (and not have to publish).
using sql server EF core, and using linq queries I guess I am a bit confuse wouldn't the DB have to be queried regardless. _students.AllStudents.SingleOrDefault(s =&gt; s.StudentID == Id).Tuition = updatedTuition? what's the difference between that and calling it the samething and storing it in a variable? (besides the fact that you are allocating more memory on the server)
Yes, that is probably querying first, then updating. Honestly it should not be a big deal unless its causing performance issues. Instead you could use SQL directly to update the entity without querying it first (or you could still have the entity in the cache from the previous page depending on how everything is set up). I wouldnt worry about that stuff for now.
Are any positions remote?
I'll give an example of where I had to do this for my job last week. We do event sourcing with projectors as part of our services, and we have a CLI program with a bunch of utilities. We recently added the ability to test out event projectors with the CLI by doing this compilation on the fly (you just provide your source code), where the result is parsed by JObject.From(projection) and written to a json file.
Both are great, use whatever your team and developers in your region are most familiar (if 90% of sysadmin/devops available for hire are familiar with one over the other, it makes sense to use that if possible).
Alright yea fair enough I'll probably just end up doing the way I have it now and maybe refactor it later. Just trying to make sure my projects look good as I am graduating soon and needing some projects to show off.
Lots of little things that add up. LINQ, async/await, rediculous number of powerful libraries. C# just makes it so easy to just program. With C++ I felt like half the battle was setting up the build environment and fighting to get libraries working right.
! I might understand interest in F#, but C#? Decent industrial language, OOP, few niceties, good tooling, but why people want to be excited about well-build hammer?
Something like "asp net mvc async post javascript" AJAX just stands for Asynchronous JavaScript and XML. 
Slight correction: the default behavior is actually to call the .ToString() method of that type. So, if you had a custom type with your own .ToString(), it would call that in Console.WriteLine()
Yes, the definition is just a shorthand for `int Test() { return 10; }`. And yes, if you'd write it to console, it would be 10 (or 20) written there.
If you haven't already read Clean Code and Clean Architecture both by Robert C Martin, i highly recommended them, especially the latter. If you really want to improve your style, asking for help is great but write code. Lots of it. All the time. When you are between projects or contracts, write code. I'll try to take a look at your code tomorrow, time permitting. Happy coding! 
I won't pretend I have an image of the perfect solution in mind after reading through that, but I would recommend studying object-oriented design principals. I think if I were to do this myself, I would ditch all the statics and internal classes and build all unit classes off of an abstract base class that defines the methods and properties that can be used or overridden by the children. I would instantiate the child classes with numerical data instead of passing it directly to the conversion method. As far as the conversion goes, I'm not sure if I would implement conversion methods for each child class or create a separate converter class that encapsulates the correct formulas and conversation method implementations, but you get the idea. I'm certain that there is a better solution out there than what I've described anyway. Doing it this way should then free up a lot of the switch case logic in the Parameter class. All you would have to do is determine the type of unit, instantiate it, and then let its methods handle everything.
Yes I does ,thanks a lot. I have another question just out of curiosity. ^^ Is there a limit to how long the string you execute can be? Would it be possible to execute a hole programm wit one string^^? 
Thanks for the reply! I've studied a lot on object oriented design principals, but i haven't studied enough yet. My thought was, that if i created classes for each measurement type, say millimeter, that i would have troubles down the road when converting to other units on the fly. I love the idea of creating an abstract class, that would make life a lot simpler. I have also been trying to get rid of those pesky switch statements for a while, they are gross. I've also been thinking about trying to create singletons for all of my static classes, just having trouble structuring it. (i literally have pieces of paper scattered around me with diagrams on them). would you suggest i create classes for each UnitType (Length, Force, etc. ) or a class for each DisplayUnit (mm, in etc.)? Thanks for the input!
Until you've got a few languages under your belt, it can be a bit overwhelming to learn multiple languages at once. However, once you get over that hill, it becomes much easier to learn new languages. Bash and Python are (I think) easier to tackle than C#. If you know you want to learn those, get those under your way before C#. I'd also recommend to pay special attention to the object oriented parts of Python - C# is entirely object oriented, and if you can learn some of those principles before you tackle it then it'll make C# easier for you. Best of luck!
Just to add - I'm sure you've got the OO from cpp, just saying it helps to reiterate, C# is pretty heavy and not the most beginner friendly.
You can change this to be; return new list&lt;int&gt; () { n1, n2}; just for simplicity once you understand how lists work 
Thanks. I'll probably just do this then. Maybe C# later in this year after I get good with what I'm learning now. 
Thanks. I'll learn C# later in the year maybe. 
My 2 cents: - avoid/reduce amount of global variables - refactor out magic numbers 
If u want a list filled with numbers have a look at `Enumumerable.Range()`
What if you made a class for every main measurement unit and have other versions of it be classes that inherit from their corresponding main measurement unit. And composite measurement units to be defined in terms of the basic ones. These are just some ideas from the top of my head if you find them useful
If your database and entities are set up properly the difference is minimal, but the EF method will run two statements and two round trips to the database whereas the direct SQL method will run 1. It's also worthwhile using Find rather than singleordefault in this kind of instance. You won't get any associated entities, but there's some significant optimization along that path for pure fetch. One place to be careful with EF is when you're doing something like. UPDATE TABLE SET COLUMN = VALUE WHERE Unless they've fixed it in core, if your where clause is going to return a lot of records you're going to run an update statement per record. Setting a property on an entire table in EF is horrific.
 public enum UnitSystem { NONE, METRIC = 0, IMPERIAL = 1 } When you initialize enums like this, None will have the same value as METRIC, which does not seem like a good idea.
Xamarin is an exercise in zen. I honestly don’t recommend it to anyone who isn’t a c# veteran. It will sour the c# and visual studio experience. Leave it for a while. You’ll thank me later. 
No that's not me, it's just bothered me that this common thing that I see a lot of, has never seemed useful to me. A case of trying to see if I will have a lightbulb moment from the discussion. So far it hasn't happened.
Ok yeah I can see that. You could allow people to provide a DLL with a class in it that implements a certain interface, but this way, you take the compilation stage out of the developer’s workflow. Thanks for a practical and understandable example. Funnily enough I have actually considered doing this in the past. The thing that always stops me is, it’s a bit of a pain if the code doesn’t compile. 
I second clean code it's excellent, even though it's written with Java in mind you can apply it's philosophy to any language. 
In this case I'd say save the state as soon as you change it. Try to avoid any workflow where something happens as a side effect of something else happening. Here, saving would be a side effect of logging in and that's not explicit. As an aside, if you have a separate settings page, I usually prefer to have dedicated Save and Cancel buttons rather than saving settings as the user changes things. This helps prevent cases where the user makes a change, changes their mind but can't remember the previous value. On/Off is easy but default paths and such are a bitch. It's also good to highlight settings that are changed but not saved and show the user a confirmation if they try to cancel or save. For bonus points make the confirmation configurable so it can be disabled and use a tooltip or similar on updated values so the user can see the previous value.
honestly. I fucking hate xamarin with a passion, but I absolutely love c#.
I appreciate it. You basically covered everything I wanted to know in details. thank you :) 
It's a great question tbh. Not enough people think about settings and it gets messy later on :)
Only if they ship the attributes to detect String.IsNullOrEmpty and methods like ThrowIfNull
Same. It’s a brilliant idea with utterly shit implementation. 
 I do have very little experience with C# ( I use Unity 3d ). But I just wanted to know a language for making cross platform apps. Any other suggestions on what I could do ? 
Ditch the type system. C# doesn't have algebraic types so just do tagged values. Then all you need are operators that concatenate the tags.
C# was the smoothest learning experience for me out of Java, C, Python, Bash and a few others. I think it was mainly due to the IDE Visual Studio, which helped me a lot in figuring out what I could do and what went wrong. Not sure if it's more than a feeling, but I still think their code completion is faster than others, which helps in just doing what you want to do without actually knowing the details.
A lot of this is going to be subjective. I agree, VS is one of the best editors out there but it's also comparatively huge to download and takes time to install. It's a *lot* better these days, but it's still not *quite* a "Get up and running in 5mins" tool. VS Code, on the other hand, is very much capable of this but it's also capable of the same for quite a few languages. Basically what I'm trying to say is that depending on how technical you are, you might find getting the environment set up harder or easier before you've even touched a language.
EF Core is not only not compatible with EF6. It is also *extremely* inferior.
But isn’t that double work to plan, implement, maintain those two apps if you want one for both platforms? In Xamarin you write common program logic and only exchange the UI for each platform.
I was fine with writing UWP apps (for hobby and at work when we were between projects) but I stopped when they killed the phone. No phone = dead UWP.
Dotnet core is cross platform. It's not quite as complete as xamarin, but it's substantially less shit. 
Learn how to make apps in one platform before jumping into cross-platform apps. To make a cross-platform app means having some knowledge of multiple platforms, in addition to whatever quirks the cross-platform framework brings - and Xamarin brings many. It isn't a great place to start as a beginner, as flashy as it might look on the surface.
In Xamarin you can use the same UI too (if it’s simple). And yes, you are right. It would be more work. But Xamarin can be such a ball ache it might be easier. 
I know, Xamarin.Forms provides Universal UI for all platforms, but imo that creates a bad user experience on every platform since there are some specific widely common gestures for every Platform (swipe to delete a item in iOS for example)
I agree. The swipe to delete thing can be implemented in xam forms though. 
But probably only with a workaround which implements it also for Android and UWP and not with the native iOS function. 
Writing lots of code all the time will not improve your code. That’s like saying “to learn another language just keep on using the words you currently know, but do it lots”. You will just keep making the same mistakes because you don’t know any better. Instead, read books, learn design patterns, have code reviewed and read other peoples code. That will make a difference. Not constantly writing more code. 
Could stand some comments :) Also why do you have Program.cs and Program1.cs with two separate program classes in different namespaces - in the same folder?
When the Microsoft provided Hello World project wouldn't even compile out of the box on a fresh install... that's how you know you're fucked.
I installed it a few days ago and had a hello world working with no problem. Ported a custom map control I wrote in about an hour. It went better than I expected to be honest. The lack of mouse support is a bit annoying but the custom renderer stuff to add it is fairly easy to figure out. Not having to write much swift or objective C for iOS is worth it...
Use wpf to create GUI's and read the book 'clean code' :) 
Yeah I assume it has gotten a lot better since I last seriously dug into it. A year or two ago it was like pulling teeth. Glad to hear it's a lot better now.
I've been using WPF (XAML) for about 8 years and I've dabbled with XAMARIN. I can tell you that XAML/XAMARIN is a very powerful technology - not the hacktogether that is js/html/css. Suggest you introduce yourself to the .net framework with something simpler like MVC websites. Then take on XAMARIN.
Not really a style note, but you shouldn't check in bin and obj directories to source control. You should have a .gitignore that excludes them. When you first set up a repository, it offers you a choice of some default .gitignore files, and there's a "Visual Studio" one that will handle this (among other things). I believe this is the source: https://github.com/github/gitignore/blob/master/VisualStudio.gitignore
Yes
I was forced to learned native Android development with Java and iOS development with Swift because cross-platform solutions like React Native or Xamarin wasn't big at that time. If you already know true native development, I don't see much incentive to go cross-platform unless reducing time is an absolute priority. Btw, I've switched from Java to Kotlin now for native Android. Apparently there's talk of utilizing Kotlin for cross-platform Android &amp; iOS. Awesome!
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/sysadmin] [NETworkManager - A powerful tool for managing networks and troubleshoot network problems! (Version 1.6.0.0)](https://www.reddit.com/r/sysadmin/comments/8e3p82/networkmanager_a_powerful_tool_for_managing/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Real nice! Is there a git repo?
Thank you for making this dark!
Yes.
I want to think a bit more about the units code before I respond to that part, but I have some other random notes as well: I imagine this is because of how you're used to writing the calculations, but I would recommend against so heavily abbreviating everything, at least in the code. (Do whatever you want in the user interface.) It's probably intuitive enough for you, but at least as a non-subject-matter-acquainted engineer, variables like "Avf", "PhiC", etc., are meaningless, and I imagine they have more descriptive names. By convention in C#, I would not put the enum value names in all caps. Convention is pascal case (i.e., camel case where the first letter is capitalized, like SquareMillimeter). On a similar note, underscores in names are not very idiomatic either (e.g. Square_Millimeter). You seem to have a preference for ENTER instead of TAB when finishing typing in your controls, but I would stick with TAB because it'll make your life easier. If that doesn't work for you, see [this thread](https://stackoverflow.com/questions/371329/how-to-make-enter-on-a-textbox-act-as-tab-button) because your current solution means it gives me an error sound every time I hit enter. Also it doesn't trigger the logic if I tab off of a control or click off of one. You should take the logic to set values out of KeyPress and put it in the handler for when the value changes (I haven't done a lot of Forms development in a while so I'm unsure where is best here - maybe TextChanged, although that looks like it will also be triggered by you reformatting the field, or maybe Leave, when you've gone to the next control).
You can switch designs (black, dark grey, white), but yeah the default is dark grey.
https://github.com/wieslawsoltes/Draw2D 
There should be no limit. You should also be able to supply multiple strings if you have multiple class files and such.
https://github.com/wieslawsoltes/Core2D/tree/corert
Thanks a lot for your really helpful answers. ^ ^
Looks slick! You should x-post to /r/networking 
Done! ty
Sure, the jobs haven't had either of those as a requirement until now in my area, hence the question, so that I could ride the bandwagon and get ahead a little bit. Azure looks commonly accepted though.
My employer makes Windows Forms apps that need to run on Windows XP so .NET Core isn't an option for desktop apps. In fact, .NET Core isn't an option for desktop apps period. The devs on the company I work for don't know ASP.NET MVC Core, don't know how to deploy ASP.NET MVC Core apps and don't know anything about modern front-end development tools and they don't want to learn unless they have a project that requires ASP.NET MVC Core for some reason (like being able to run on Linux).
Firstly I think some of your calculations are wrong (dividing instead of multiplying or vice versa). Trying to utilize inheritance as others have pointed out I think would be a good idea, or composition. Id maybe look at how other libraries, or even the .NET framework handles these sorts of things, but I gave a crack at refactoring the length stuff as an example: public enum UnitSystem { None = -1, Metric = 0, Imperial = 1 } public enum UnitLengthType { Millimeter, Centimeter, Meter, Kilometer, Inch, Feet } public abstract class UnitLength { private const string SuperscriptDigits = "\u2070\u00b9\u00b2\u00b3\u2074\u2075\u2076\u2077\u2078\u2079"; private readonly double _valueInMillimeters; protected UnitLength(UnitLengthType unitType, double value, int power, double millimetersConversion, string baseSuffix, UnitSystem unitSystem) { UnitType = unitType; Power = power; MultipleOfMillimeters = millimetersConversion; Suffix = baseSuffix; if (Power &gt; 1) Suffix += new string(Power.ToString().Select(x =&gt; SuperscriptDigits[x - '0']).ToArray()); UnitSystem = unitSystem; _valueInMillimeters = value * Math.Pow(MultipleOfMillimeters, Power); } /// &lt;summary&gt; /// Power of the unit, 2 = square, 3 = cubic, etc. /// &lt;/summary&gt; public int Power { get; } /// &lt;summary&gt; /// Conversion factor from millimeters /// &lt;/summary&gt; public double MultipleOfMillimeters { get; } /// &lt;summary&gt; /// Length in units this type represents /// &lt;/summary&gt; public double Value =&gt; _valueInMillimeters / Math.Pow(MultipleOfMillimeters, Power); public string Suffix { get; } public virtual bool IsBaseUnit { get; protected set; } = true; public UnitLengthType UnitType { get; } public UnitSystem UnitSystem { get; } public override string ToString() { return Value + Suffix; } public Millimeter ToMillimeters() =&gt; new Millimeter(_valueInMillimeters, Power); public Centimeter ToCentimeters() =&gt; new Centimeter(_valueInMillimeters / Math.Pow(10, Power), Power); public Meter ToMeters() =&gt; new Meter(_valueInMillimeters / Math.Pow(1000, Power), Power); public Kilometer ToKilometers() =&gt; new Kilometer(_valueInMillimeters / Math.Pow(1000000, Power), Power); public Inch ToInches() =&gt; new Inch(_valueInMillimeters / Math.Pow(25.4, Power), Power); public Feet ToFeet() =&gt; new Feet(_valueInMillimeters / Math.Pow(304.8, Power), Power); } public class Millimeter : UnitLength { public Millimeter(double value, int power = 1) : base(UnitLengthType.Millimeter, value, power, 1, "mm", UnitSystem.Metric) { } } public class Centimeter : UnitLength { public Centimeter(double value, int power = 1) : base(UnitLengthType.Centimeter, value, power, 10, "cm", UnitSystem.Metric) { } } public class Meter : UnitLength { public Meter(double value, int power = 1) : base(UnitLengthType.Meter, value, power, 1000, "m", UnitSystem.Metric) { } } public class Kilometer : UnitLength { public Kilometer(double value, int power = 1) : base(UnitLengthType.Kilometer, value, power, 1000000, "km", UnitSystem.Metric) { } } public class Inch : UnitLength { public Inch(double value, int power = 1) : base(UnitLengthType.Inch, value, power, 25.4, "in", UnitSystem.Imperial) { } } public class Feet : UnitLength { public Feet(double value, int power = 1) : base(UnitLengthType.Feet, value, power, 304.8, "ft", UnitSystem.Imperial) { } } So for example: var mm = new Millimeter(1000); mm.ToFeet(); = 3.28083989501312ft var feet = new Feet(mm.ToFeet().Value); = 3.28083989501312ft mm.ToFeet().ToMeters(); = 1m And to do SquareMillimeters you just pass power = 2 into the constructors.
I would like to post reply about Window XP but my micropachycephalosaurus is asking for food.
And it got removed by a mod. xD
Oh shit, this might be exactly what I've been looking for. I was thinking about making half of these things myself. This is a great project, thanks!
Properties can be overridden and given specific implementation. 
Great! If there is a feature missing, just ask. I want to add some more stuff when i have time. I am also open for contributions on Github... :) 
Thanks. I started numbering my enums, then neglected to re-number them when i added new ones. i'll remove the numbering for now.
I appreciate the input. That's part of the reason i'm here. I'm the type of person that learns through doing. This is a rough first version and i will re-write as i read and learn more. 
Deleted. It was definitely throwaway code. I had originally created a console app for testing.
Thank you for the thorough answer! I don't doubt that some of my calculations are wrong, I only get to code during the night as my day job takes up most of my time. I'll be going through and re-checking all of them to confirm. How you've structured the code makes way more sense that how i had it previously. I'll start implementing it in a new version of my program, and look to further expand it. The abstract class eliminates a ton of unnecessary typing, and cleans things up a considerable amount. Overriding the .ToString() method is also a sleek way to return my formatted string. Thanks!
Yep. And you can put breakpoints on the get and it set for debugging. 
Generally, the best practice is to always use properties for any field that is public. Properties are meant for that purpose. Variables are meant to be internal (even if they can be public). If you start using variables like properties, you're going to run into trouble. All other reasons aside, simply because other code will not expect it, and you will find that libraries/reflection will ignore them. Class scoped variables are meant for "internal" state of the class, not for interaction with the class. That's the principle around which the language has been designed. So, slap on the good ol' {get; set;} at the least. In other cases, getters and setters are very useful, especially in cases where, for instance, a property is read-only {get; private set;}, or where the property is synthesized from other data like AveregeCost { get { return _costs.Average(); } }, or if you need to need to respond to changes to properties like IsEnabled { get { return _isEnabled; } set { _isEnabled = value; UpdateOtherProperties(); StartOrStop(); } }
Overriding is understood but under utilised. It is something I try to explain to my new devs how one call can be 'many' calls. Linear thinking is though to break.
I don't know -.- Seems like sharing an open source tools with the reddit communtiy is not desired. X-Post in /r/network was deleted because of advertising X-Post in /r/software --&gt; i got banned :) X-Post in /r/sysadmin was deleted because if spam
and a variable initialisation is called a property as soon as get; and set; is involved?
Thank you! I originally wanted to create my own unit conversion methods to create something simple that worked. But i also wanted to learn how to code. I've looked at this this unitconversion project in the past, and it scared me away due to how complex it was. I'll have a more in-depth look into it and look at ways of implementing it. I'll also look at how their code is structured to see if i can learn more.
When get and optional set is involved we indeed call that a property. You will learn that get and set can contain code statements other than just variable assignment. 
Also that lobster girl in the comments is doing god's work. 
How did you manage to make the UI?
Uhmm... DevC++. No syntax highlight, no suggestions...
University and Visual Studio? We used DevC++ in school. That shit couldn't handle semicolon on hungarian keyboard without pre-configuring it. And thanks to our retarded IT solutions, the Uni PCs deletes ALL your files on ALL of the computers at every logoff. Including program configs too.
I mean, you still need to change your structure... even if you can't :p
Crashy for me (Win 10 Pro 1709)
Can you post me the stacktrace from the eventlog? PM or via Github.
I sent you via PM the WER and XML output from eventvwr.
Holy shit the design is stunning, great job!
Sign up for an account on my.visualstudio.com and get the free [**Visual Studio Dev Essentials**](https://www.visualstudio.com/dev-essentials/) subscription (among other things, each activated indivisually) a free account on Pluralsight. 
Look up modular arithmetic. 5/2=2 this is what a computer would see. The remainder gets cut off. This is 2 whole 2s fit into 5. 5%2=1 this is where we only care about the remainder. 2 whole 2s for into 5 with 1 remaining
Yep. As I said, lazy library writers. Which is unfair on my part. I mean, there can be *Advantages* to the behavior. Maybe I really *don't* want a library touching the variables. But at that point maybe configuration is better. 
Great, I do have a Pluralsight account, will look into Scott Allen's stuff. Thanks! 
&gt; Generally, the best practice is to always use properties for any field that is public. Properties are meant for that purpose. Variables are meant to be internal (even if they can be public). Your terminology is a bit confusing as what you call “variables” are actually called fields, and what you call “fields” are members, I guess. In C# lingo, “variable” means local variable. 
I knew about `configSource` but not this, and not the overriding behavior. Actually pretty cool. My 'favorite' setup was where we had a shared configuration file across all applications. While it *sounds* terrible, it did not work bad in practice. (Besides, we had no CI/CD, so it was far better than alternatives when it came to editing.)
Any chance this does client status monitoring such as whether a client on the network is unhealthy (unresponsive, low disk space etc)? Been struggling to find a decent easy-to-use tool
HOLY SHIT, sorry about the half code being messed up. 
Well wow, maybe you just gave me my lightbulb moment! I will have to ruminate on your example and think of places I might have used that in my own code. Thanks!
Removed: Rule 4.
Nice work! I'll definitely try it out tomorrow. 
That clearly won't even compile.
Indent code 4 spaces to get the proper formatting in Reddit. As for the code, put a break point at the start of the loop and step through it with a debugger.
Just used it. You've done some *really* nice work and it's well polished. Would you consider adding the following to your Traceroute, similar to MTR? &amp;nbsp; Packets | | | Ping | | | | ---|---|----|----|----|----|----|---- % Loss | Sent | Received | Last | Best | Avg | Worst 0% | 100 | 100 | 63 ms | 37 ms | 52 ms | 891 ms 
It's not "lazy" necessarily. A property is a contract that a class exposes that explicitly says "this is a value I am specifically telling you can be read". It's an interface-by-convention.
[Hmmm...](https://memegenerator.net/img/instances/42265637/ill-allow-it.jpg)
Few quick bugs: - Trace shows "value cannot be null. parameter name: source" - but still traces. - When using a light theme, buttons of SNMP, WoL, Website, Subnet and Lookup all show up as dark, where all the buttons above SNMP show up as light. 
You got banned for posting software in r/software???
Maybe I'm wrong but I think that it is not possible to use UWP controls inside a Winforms fotm. Probably you can show a UWP window from a wpf app (I don't know if it is possible with winforms).
You need to be posting about this over in /r/sysadmin !!!
&gt; especially in cases where, for instance, a property is read-only {get; private set;} I'd hesitate on calling that readonly. To me, readonly would be `{ get; }`, i.e. no setter. What you have there is a *privately mutable* property.
&gt; Reflection can deal with variables versus properties just fine; it's not even that much more code to deal with it. I blame lazy library writers. Unless the library does something like byteweaving (i.e. rewriting IL to insert special code in method calls) or similar. Then it can only work with properties. Depends on the library of course. &gt; Also, potentially minor nitpick but I prefer {get;protected set;} to {get;private set;} in most cases. I wouldn't like to see that in my codebase. 90%+ of my classes should are sealed anyway. Whenever I see `protected`s about I assume and require that the class has been *designed* for inheritance; not that we're just exposing things 'just in case'.
The important part is the logical separations. Many people are in the same positron because the company doesn't allow other technologies. Event sourcing shouldn't be too heavy. If you are reading too many events, your design is probably not best. Or, you can introduce snapshots. I would not do stored procedures. CQRS/ES is simple. Don't get distracted by the frameworks out there. I have an example of a fully working application in CQRS/ES that's stored as a one-liner in my shell history! Further, if you need ideas for dealing with your tech limitations, take a look at the presentation that Jimmy Nielsson gave at NDC Oslo in 2012 for using the existing infrastructure to apply DDD concepts.
Yep from posting new articels. Just x-posted this one...
Ty. Traceroute: When does this happen? After you entered a host and klick on scan? Button: There ist something with de DynamicResource wrong. I will take a look.
Thanks :)
Because I have used the repository pattern in past projects, and generally the repository tends to grow. 
Instead of pulling back every single row and iterating through them, just use LINQ: context.Things.Where(x =&gt; x.Id == 4); This is a very rudimentary example, but you can essentially pull back and format just about any data you need
I've tried to reproduce it, but hasn't occurred this time. From memory I just typed in a server name: **SERVER01** and then clicked the Trace button. The animation did not work previously, but the list added items for the trace. 
If they are ever persistent to a database, you should keep the numbering and keep numbering when you add
Sounds like a good plan then. 
Use something like this: context.Table.SingleOrDefault(x =&gt; x.Id == something) - that will turn your row you want, or a default (usually null) if it's not there.
I'm afraid not. But Stockholm is a very beautiful city! 😉
Event sourcing is not at all a requirement for CQRS. They are separate mechanisms, they just happen to go really well together. 
There are ways to access native libraries from c#. It may be as simple as using dllimport attributes, or you may need to wrap the native c++ library with a managed c++ one which you could then reference directly from c#. It probably gets a whole lot more difficult if you're wanting to embed a UI element in your windows forms.
I was about to say "well, you're wrong!" But you beat me to it. :) It's also possible to get at the UWP APIs not available in WPF by adding the references manually in VS. it won't let you do it normally, but it works just fine once you link it.
This is a public variable (not recommended) public string MyString; This is a public manually implemented property with private backing field: private string _manualProperty = ""; public string ManualProperty { get { return manualProperty; } set { // value is a "magic" variable that only exists in set functions _manualProperty = value; } This is a public [auto-implemented property](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties) public string AutoProperty { get; set; } 
The only tutorial you need is the docs.microsoft introduction to .net core. Otherwise, tutorials are by definition for beginners IMO. If I were you, I would pick a project and implement it in .net core. If you are used to windows, do it in Linux. Deploy the thing and improve it as you get ideas. Try to employ techniques like dependency injection for unit testing. The thing is when doing a project, you have problems to solve or you wonder how it is done with best practices. Tutorials are really boring. Jumping from one tutorial to another will teach you nothing. 
I've got another suggestion. Create an extension method for strings that puts the class around the string and then executes it. public static class Extensions { public static T Execute&lt;T&gt;(this Code) { string _CompleteCode = Complete(Code); return CSharpScript.EvaluateAsync(_CompleteCode).Result; } } 
I'm really wondering how you're allowed to use `Heijden.DNS`, which is licensed MIT, within your project, which is licensed GPL. These licenses are not compatible.
good bot
not exactly. I think making such a statements, could awake c# police and it happens to be a good read (maybe funny). Author of the post imho is trolling, because I can't imagine that he has not experienced any positive use case for using interfaces for four years...
Correct, C++/CLI isn't part of core.
+1 Scott Allen
If the linear algebra (cross / dot products) seems confusing, then you can get by computing two Atan2s of the B &amp; C offsets from point A and finagling with them to get your answer.
yep, is what i being seen this days, the reason why it worked in .net framework is because it is already inside .net framework. finally I migrated to .Net standard
Alright thanks guys! Truth is, I made it with the length of the two lines. I realized, so here is the code: (Math.Acos(lengthc/lengthb))* 180/Math.PI;
You're not wrong, Walter, you're just an asshole.
And readonly fields can also be set by reflection.
Didn't know that. C# is a bit behind the curve when it comes to immutability. 
Did you do any android development? One thing i HATE about android is deprecated API-s, deprecated API-s everywhere. It's so much fun when you want to do something, but you have no idea where to start. So you google, end up on Stackoverflow. The first answer looks good, so you try it. And then the IDE goes bananas because the code that you tried to use was deprecated at api 2X something. On one hand, this is good, because you are forced to use a newer API. But it's kinda annoying, because you have to ignore ""most"" (roughly speaking) every answer that is 2-3 years older. 
Plural sight video training. Been using it for years since I started my career and it's only gotten better. It covers a multitude of frameworks, paradigms, patterns, just for c#. It also covers lots of JavaScript and UI frameworks, databases, and had started adding videos for dev ops, cloud, and other topics. Costs $300 / year or $30 / month. You can cancel anytime, which is cool if you want to learn something you can pay for the month and disable auto renew so you only pay for month. 
Nope not trolling. I am self-taught from a book, never been exposed to formal training or experienced programmers. I've basically been working on 1 web app and had to figure out how to get things done on my own, which may have lead to bad coding practises or glaring omissions in knowledge. I've always got the job done though and client is always happy so it can't be all bad.
Awesome. Any plan to support VPN?
Not yet, but why not :)
Been using plural sight for years, it's awesome. Just stared a new course this morning, there's so much useful information in there.
sounds suspiciously like you're asking us to do your homework, dude.
sounds suspiciously like you're asking us to do your homework, dude.
sounds suspiciously like you're asking us to do your homework, dude.
it happened to me https://imgur.com/a/KwmJ6kC type the host as the name and click in trace. the second time i cliked into trace it worked but the message still there. 
Note that only works for a right-angled triangle, where c is its hypotenuse. 
You can structure your LINQ lambda to generate a WHERE IN query: https://weblogs.asp.net/dwahlin/using-linq-to-perform-quot-where-in-value1-value2-quot-queries 
As tends to be the case with anything headed by Miguel De Icaza
Not WPF - UWP. It seems the APIs are cordoned off to normal .NET/Win32 applications. It's not really a control either.
Just asking for help to self improve...dude
The bob tabor videos might be a good start 
Hey, don't tell me how to do my job!
If you have a .edu email, you can get 3 months for free with Dreamspark from m$.
I could do it better. I will show you on the next 1st April.
I'm in the same place. I don't want to start out writing Hello World, but I'm not a developer by trade. I'd like to start learning basic front end forms connected to a back end db for some projects I have at work.
There really is! Sometimes too much, I don’t know where to start, hence this sad post asking for guidance. 😉
Put it on 1.7x speed, you will thank me later. 
I think you missed a closing curly bracket... or 2 actually. You have one open for if(N== num2-3) but dont close it, nor do you close the do curly bracket
As long as you can manage the code you produce I don't see a problem.
Thanks for the clear explanation and sorry for the late reaction. I'm pretty sure I understand it right now. Just have some stuff to learn. Thanks again.
When reading the following text, please note that I use the term "non-private field" in many cases. This means I am referring to all fields that do not have the `private` access modifier (i.e public, internal, protected, etc.). **Properties vs. Fields:** * You can add a breakpoint on the getter or setter of a property. You can't do this with fields. * Fields have a *very, very, very* slight performance advantage over properties simply because the getting and setting of a field's value isn't marshalled through a get and set method. This, to me, is the **only** reason you'd ever have a non-private field and you'd *only* ever do this when 1) it was a property before and 2) you discovered you could see some significant perfomance gains if you made it a field. Basically, you should only do this when you are "pinching pennies" for performance reasons during optimization. Really, though, the improvement is *not* that significant. You can use google to see some benchmark data about this and you'll see what I mean. * If you started with a non-private field but decide later you want a property, *any codebase consuming that field will have to be recompiled, even if no compiler error would occur when referencing the version with the property*. Changing a field to a property is a **breaking change**. If yoh use semantic versioning, this would make you increment your **major** (i.e 1.7.4567.345 to 2.0.0.0). * All databinding technologies **that I am familiar with** require properties and do not work with fields. * You can control the visibility of a value that a property manages by tailoring the access modifier on the property's get or set methods. For example, a read-only property would have a public `get` and a private `set` and a write-only (uncommon, btw) property would have a private `get` and a public `set`. * The get and set methods of a property enables us to add things like validation, value changed event propagation, tracing and other logging operations, and more. * Most developers will expect the usage of properties by default. The usage of a non-private field tells **me** one of two things: either there *is* a valid and significant reason for it being a field or that the dev team that allowed this non-private field to see the light of day screwed up. **Ultimately, these are the general rules:** * Always use properties. * Never use non-private fields for anything. * Only use private fields to back your non-auto properties (you could use a **private property** to back a public poperty and avoid a field altogether). Now, as a matter of taste and, **in my opinion**, your private fields should be prefixed with an underscore ("_") character and its name should match the name of the property it backs. For example: class MyClass : INotifyPropertyChanged { private string _FooBar; public event PropertyChangedEventHandler PropertyChanged; public string FooBar { get { return _FooBar; } set { if (_FooBar != value) { _FooBar = value; PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(FooBar)); } } } } Hope this helps.
How through the c# learning path on plural sight
Do you want to learn MVC? Or WebAPI with Angular? I just finished the Pro ASP.NET Core MVC book by Adam Freeman and was very thankful for the fact that he touches on the basics very very mildly and expects you to know a lot already. And by touch on the basics, it’s more c# syntax than details about like what a loop is, what Objects are... etc. He also has one for building APIs in .net core and using Angular for front end, but I havent read that one yet
Are books out of the question? Most programming books say something to the effect of "if you're familiar with programming, skim the first few chapters and really pay attention again in chapter 12".
Thanks for your answer. I would have prefered to avoid such an "archaic" method, but it looks like I don't have much choice. Have a nice day !
Just some general advice - C# is a general-purpose programming language, unlike Matlab. That means that there won't be built in functions for domain-specific behavior like this in the language, and you probably won't find something like this in .Net's class library. That means that either the API you're already using (Accord) provides it, some other library you find elsewhere provides it, or you have to write it yourself.
This is not the right example. Thread is a lower level primitive. It is true that threads could be used by task-challenged developers but tasks cannot always replace threads. 
This is great advice. Tutorials are great for beginner level and to get a general idea, but you learn the most by creating a project. Don't get sucked in by the endless tutorial-loop. I speak from experience.
What you need in addition to this subreddit and the answers so far is a place to ask questions and get answerd quickly. Check this C# group https://discordapp.com/invite/0np62rq4o8GnQO9l
Thanks for your answer. I am a chemistry major master student, so programming is quite new to me (began with C# a month ago, had only done some MATLAB before). I am doing an internship in a lab where I have to write a program to control an experiment and do some data analysis, and C# has been chosen due to the ease of creating an UI with Windows Forms. I found out that it wasn't the most adequat language when I rewrote my 700 lines, 3 weeks worth of code in 3 hours and 150 lines in MATLAB ;) But I am glad I am doing it, coding is such a valuable skill !
http://books.goalkicker.com/
You can use (some) UWP APIs from .NET - check out https://github.com/ljw1004/uwp-desktop. Not sure if SystemMediaTransportControls works, however.
God I haven't clicked on the link yet but it would be heaven to be table to use MATLAB in a Windows Form UI ! Thanks a lot !
I'd probably leverage that 3d artistic skill perhaps try learning C# via Unity. I can get a sphere to do stuff, I imagine you could make it a pretty sphere which, for equivalent code would score more brownie points. It might give you a bit of direction and focus too which will help with motivation. There are some books which are specifically targeted at learning C# while using Unity. The good thing is you can expand your skills outward from there. You need a web site to host user details and such? Asp.Net (or not, but we're focusing on C# here). Want a game server? C# running in the cloud. 
I read an older version of a book called Professional C#. It was very concise about each subject and packed with useful info for professionals. I can't comment on **this specific edition**, but it targets the latest versions out in the wild: http://www.wrox.com/WileyCDA/WroxTitle/Professional-C-7-and-NET-Core-2-0.productCd-111909660X.html
 Depends what you actually want to do, there is a ton in C#. Game dev? Unity. Websites? Asp.Net. Mobile Apps? Xamarin. Don't care and just want a job? Probably Asp.net. Learn C# first, then whatever specific technology you want to learn from there. 
It seems it's *possible* - again, there is a C++ example there; with some reading, I can probably use P/Invokes into it through the unmangled `extern "C"` component. It'd be much nicer if I can do this from managed code, however.
Thanks again, I still have a hard time with this kind of constructions, so the exemple you give me will be useful without a doubt !
What do you want to focus on with C#? And what industry do you want to get into? As /u/serentilla said, you should probably try to leverage your 3D skills in C# using Unity. Also, for the basics: If you are not too opposed to CLI, then I would highly suggest you get the [cross-platform .NET SDK](https://www.microsoft.com/net/download/), and [VS Code](https://code.visualstudio.com/) (not to be confused with Visual Studio). Then follow [this tutorial to get started](https://docs.microsoft.com/en-us/dotnet/core/tutorials/using-with-xplat-cli). This will at least get you going, and give you a good feel for both C# and Command Line Interfaces. Then try to make some simple console applications (either via tutorials, or just use your imagination).
&gt; I found out that it wasn't the most adequat language Dang man, right in the feels :) I think your perspective is askew - C# is a phenomenal language, but it doesn't spoon feed you like the purpose-built language-system Matlab does. Keep in mind that C# can be used to write nearly any application in the world - web servers/browers, email servers/browsers, sql servers/clients, video games, office applications, packet testers, web applications, etc. Heck, if we wanted to, we could re-implement Matlab-the-program in C#. Since it's a general purpose language, it can't make assumptions about how it's going to be used, unlike systems like Matlab. .. That said, there are a ton of great numerical processing libraries out there for you to use, and many of them are free and open. If you were to find a suitable library, you could probably write your program in less code than your 150-line Matlab project. https://www.quantconnect.com/blog/top-numerical-libraries-for-c/ I say this as someone who's been working with C# non-stop since 2005.
@serentilla @Dispersia @die\-maus I'd like to go for a job within mixed reality/Hololens. Unity coding is something i'd also like to learn yes, but where do i find decent courses for this? [https://app.pluralsight.com/paths/skill/csharp](https://app.pluralsight.com/paths/skill/csharp) \- This would give me a good foundation?
You need to learn the basics and fundamentals of C# and programming in general before you jump into unity, asp.net, wpf, etc. Just a heads up though - to actually learn and become competent, this isn't going to be a 1 month ordeal. It'll be at least 6 months to a year if you spend 2-3 hours EACH DAY learning to become userful.
First, FirstOrDefault, Single, and SingleOrDefault are among the list of statements that will execute the query as well.
I love that everyone thinks they can get a coding job. 
Thanks for your help, much appreciated.
You're probably right, I don't know enough about C# to make such assumptions, sorry ;) I am very happy to learn, though, and I will look with interest into this link :) Thanks again !
This feels more like pressure to use .NET Core than a survey. 
https://en.m.wikipedia.org/wiki/MIT_License "The MIT license is also compatible with many copyleft licenses, such as the GNU General Public License (GPL); MIT licensed software can be integrated into GPL software, but not the other way around."
Non-Mobile link: https://en.wikipedia.org/wiki/MIT_License *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^174131
No problem. Good luck to you. 
Something that you can do with a property that I don't think is as easy with fields is to set up easy public get, private/protected sets. This is pretty close to one of the reasons properties were created in the first place. public int MyProperty{get;private set;} public int AnotherProperty{get;protected set;} Another thing that using a property helps with is in the case where you need additional functionality then simply setting a value... private int width; Delegate void OnChanged(string prop, int newValue); public Width{get{return width;} set{width=value; OnChanged("Width",width);} Built in value valdiation is another common reason for properties. private string name; public string Name{ get{return name;} set{ If (String.IsNullOrEmpty(value)) throw new exception ("name can not be empty."); name=value; } 
Have you ever found a Use Case for public string MyString { set; } ?
honestly I don’t see the usage (at least in the way I’m doing it) of anonymous types here. I guess if I change the way the library works work with anonymous can be an option, but not in the way that is cruelty working. I still thinking on that and I guess anonymous will help me in one of the parts, but it will do it harder in others. I will be thinking on this during the next few days. Thanks btw. 
pluralsight and books are the only resources you will ever need imo
How about you fill in your list with your current understanding of those terms, and people will correct you if you got anything wrong? If you didn't understand all those other explanations you looked at, there's little point in us writing a dozen new explanations from scratch when we might unknowingly use the same terms you didn't understand again.
No worries. If you have any questions, feel free to send them my way.
This all seems like object oriented programming 101. They're mostly very generic terms, some of which have specific syntactical support in C#. You're probably best off chasing most of this down in Wikipedia and MSDN. Also, r/learncsharp or r/learnprogramming might be better venues for this sort of question.
Removed: Rule 4. These should be available in your learning materials, more or less. As the other poster suggested, you probably ought to take the time to write out your current understanding to give everyone else on /r/csharp a good baseline to confirm or correct what you have. With any luck, you'll improve your own understanding simply by [rubber ducking](https://en.wikipedia.org/wiki/Rubber_duck_debugging) what you already know.
I know I'm asking a lot, but it really is my last hope since my exam is tomorrow. It would mean a lot already if I get to know a few of these above. It would help a lot if there is like a small sentence behind every term which defines is very simple. Just so I could start googling effectively. It's alright if you have time for this though, I would understand
Is this really the answer or just a Guess? Because you should likely put in a few additional safeguards and do some sandboxing if it's going to be for scripting...
I haven't watch all of the videos but just looking at the topics, it seems like a pretty solid foundation for sure. I use pluralsight for continuing education in my current C# role 
I haven't watch all of the videos but just looking at the topics, it seems like a pretty solid foundation for sure. I use pluralsight for continuing education in my current C# role. 
Sounds like you should use a StringBuilder - https://msdn.microsoft.com/en-us/library/system.text.stringbuilder(v=vs.110).aspx
https://learnxinyminutes.com/docs/csharp/
NuGet handles this using pre-release suffixes- https://docs.microsoft.com/en-us/nuget/reference/package-versioning
Not sure about best practice but could you have the path to a shared config in an environment variable? Or even the connection string itself?
You're asking if you have the following classes: namespace BLL { public class BLLEntity { public string Name { get; set; } } } namespace DAL { public class DALEntity { public string Name { get; set; } } } And you created the following delegate: Func&lt;BLLEntity, bool&gt; myCheck = (BLLEntity entity) =&gt; entity.Name == "John Doe"; That you could have an API to convert that to an equivalent `Func&lt;DALEntity, bool&gt;` that would be the same as: Func&lt;DALEntity, bool&gt; myCheck = (DALEntity entity) =&gt; entity.Name == "John Doe"; Is this understanding correct? If so, how do you plan on using it? Feeding it into something like Entity Framework? Just something you can invoke that delegate using in-memory objects (no SQL mapping/querying)? Something else?
It's an educated guess. And the guy seems like he's just starting so I'd give him a break - let him figure out how it works first. :D
yeah your gonna need somewhat of a degree, especially if you want to be promoted to management. If I were you, some colleges i've seen allow you to get a Associates Degree in NET, complete that, get alot of projects under your belt and you'll be gucci.
Really appreciate it, thanks and have a nice evening !
A lot of people think programming is a mathematical skill, but it really isn't. It's a LOGICAL skill. You don't have to be good at math; computers are good at math. You just need to be able to tell the computer what math to do. The vast majority of "math" done in programming just involves adding 1 to a variable or maybe multiplying a couple of variables together. Most of the time you're not even coming up with the formula (if you're programming something that involves formulas). You are given the formula from the business expert and your job is just to translate it into a programming language. You don't even really have to understand how it works. If you are methodical and detail-oriented, then you can be a programmer. 
This is a good answer imo.
Removed: Rule 4.
The only area of programming that is really math heavy would be games.
Also, this is more post learning advice, but try to make as many friends in the field you want to get a job in. Not only can they help you learn concepts faster - but they could also potentially help you get a job. As the not necessarily good saying goes, "it's not what you know, it's who you know". 
Out of curiosity... why migrate away from TFS in an environment where it is already in use, fully windows and controls a proprietary internal code base? Git is more popular than TFS... but I was always under the impression that the primary reason for that was simply because TFS was limited to .net and also was released well afterward (after many devs had existing experience with Git) and developers had trouble accepting that a decent Source versioning application could come from the same company as SourceSafe... 
Textboxes generally work pretty well up until you get to some seriously large quantities of text... an amount of text where you couldn't possibly show even a decent percentage of it in a full screen textbox... if you don't need to edit data after it is displayed in the text box you might want to look into removing data from the front of the string as you add it to the back... if you DO need to be able to edit the text in files this large you might have to find a more specialized control that doesn't require holding all the text in memory at once. If you need to retain all the output, but only need to display the tail of it you could consider writing to a file rather then to a string and populating the textbox with sub segments of the file... 
Pass the conn string into the conext's constructor?
Good on you for moving towards git! I switched us from TFVC and I couldn't be happier with it. These are some tips and tools I ended up using: - [git-tfs](https://github.com/git-tfs/git-tfs) for migrating your existing repository to a git repo as long as your TFVC branching strategy was not very complex (and I really hope for you it wasn't, because TFVC is *really* bad at it). Otherwise start clean. - Git For Windows will get you git and a bash. You love your GUI's, but try to get a taste of the command-line. It's so much more powerful (and to me, intuitive as well). - Git Extensions, however, is a nice light-weight GUI for git that works well enough. - GitLab to serve git repo's and handle authorization, issue tracking, code review, CD/CI and much more. It does not run on Windows, though, but I recommend it fully. Get a Linux VM if you need to run in on prem and install it with the Ominus package. Again, getting some Linux and command-line experience will just really help you here. - Visual Studio Code. It's not the most optimized, running on Electron, but I've found the git integration very good for a GUI-type editor. - Stay away from complex branching strategies for the most part (looking at you Git Flow). If you don't have any specialized needs, having a `master` branch with production-ready code and just branching off that for features/bug fixes/etc. and tagging your releases should be enough. - Read the Pro Git book. Again, it focuses on the command-line, but it's a good read. - I've seen a lot of people struggle with git. I haven't, really, but I ate that shit up. I loved it, and I love the command-line, open source, Linux, etc. even though we work with all Microsoft. Get ready to learn a lot, because I wouldn't recommend to learn it only a little. - Visual Studio 2017's git support is good enough for simple tasks. I use it mostly to stage files, though, when I'm not already on the command-line. - Learn the command-line. :P 
thanks you.
that's a nice explanation, thank you.
The company I work for has a was of doing thia, as our industry can be very print heavy, but we are mainly a sass provider. I dont work on this product, so cant give too much detail as I only know the basics myself. We have a (windows) client that runs on a local PC that has access to a printer. You "install" the printer on the client. We then have a server that connects to all available clients for a given account. Clients report what "installed" printers are online. From our web platform you click print to a given client / printer. That sends a request to the "print" server, which renders what needs to be printed and sends this to the appropriate client, which then sends it to the physical printer. It's not something we offer as an external product, but hopefully this should give you an idea of architecture that could be used. 
So you want to intercept the print job on the host computer and send it to a printer on the client side? About the only reasonable way I know to do this is to create a printer on the host computer that either points to the remote printer or spool file then transfer it and print it. 
Find a need, fill a need! As the saying goes. Find something in the area that you are passionate about that could be "solved" (even if it might already be solved) and solve it, put your twist on it. This was mine: https://github.com/ocbaker/SignalRNetClientProxyMap/wiki It basically converts an unimplemented interface into a usable object that you can then call (for a SignalR Client Hub) instead of having to call the hub directly (and loose all your typing information)
Two separate apps would have two separate config files. So you'd have to do something like store it in an XML or JSON file that is visible to both, then write your own code to read it. (since it's .net core, Windows registry is not an option) 
No degrees need. Experience is everything. Some companies have a "you need a bachelor's in something" policy, but that is often overridden by experience. If I was hiring a dev who has 5 years or more experience vs a CS grad with a Masters, I'd go for the 5 years experience guy.
Yeah I understand that, and I mentioned it in my post. I don't have anywhere near that much experience though... 
Getting the variable isn't the issue. My question is how to consistently initialize the DbContext. .Net Framework is supposed to initialize in the OnConfiguring method of the DbContext, while ASP.NET Core wants to initialize it when I call services.AddDbContext in ConfigureServices.
Getting the variable isn't the issue. My question is how to consistently initialize the DbContext. .Net Framework is supposed to initialize in the OnConfiguring method of the DbContext, while ASP.NET Core wants to initialize it when I call services.AddDbContext in ConfigureServices. 
Sounds like the print server machine holds all the control and accepts and handles printjobs sent to it rather than a virtual printer setup. It's an interesting work around, maybe I can use this sort of an idea, thanks.
Yep we switched from tfvc to git hosted in tfs. Other than not having commit hooks, I don't see a real need for you to use yet another application. Especially as it's also your ci server, and you require that kind of permission control in a Windows environment. 
I got hired without a degree, and if someone doesn't have a degree they were hired at some point without one. All I'm trying to say is, create some projects or work on some big open source ones, show what you can do, that's all most places care about. Ignore the "degree" requirements. Most places even if saying them don't actually them. Another route would always be freelancing, do that for a year and it will show you have experience and are incredibly flexible getting into and learning different projects.
That's not true at all, especially in software development. Most companies realize that degrees are useless (obviously not all). 
Yep, and failing this, use 2 nuget feeds, and only have your ci server referencing the release feed. 
Most of of the stuff from menus works. Just wanted to showcase the basics. The real deal here is that the executable is fully native! Fully native compiled from pure C# and UI written using XAML markup. Also the app can be compiled for Linux and OSX without changing single line of code.
That's the most... Oh fuck it. Whatever. Gawd that's dumb advice and a really stupid analogy. Not only am I a master coder but also master musician. All self taught. If anything, i know how to learn things. Keep practicing, do not stop. 
It looks like you need dotnet 2.1.1 on your server. Try that? 
There is a big misconception about this. TFS is not TFVC, yes TFVC is bad, but TFS has a ton of functionality. You can host either a TFVC server or use git inside of TFS. TFS includes things from version control management, to things like agile dashboards for scrum or kanban, has built in CI, etc. You use git WITH TFS.
As we control the whole ecosystem, as it only receives print requests from our software, it makes sense to have the client do as little as possible as then it doesnt have to talk to any external systems to gather data, with the exception of the server, which is really only error/success. Keeping as much of the workload on our side means lower recommended client machine specs and easier debugging if things do go pear shaped. We've designed this to work across all our customers, so may be overkill if you only need it small scale. It's not perfect, but it suits our purposes for the moment :) Glad I could be of some use! 
I would look at Atlassian products. The company I work for transitioned last year to Git and it has been great. There are a bunch of modules you can get to tailor make your solution. It has CI and a product called Jira for Agile/Kanban stuff. /u/Thaurin has some great points. I use Git Extensions daily. I am not much for the command line, but people I work with love it. There are a bunch of tutorials online for Git, so learning the ins and outs is easy. Make sure you have a great merge tool. The extensions lets you install kdiff among others. I like kdiff (its free). GitTFS is a great product. It will pull all the history for your repo and can get branches as well. 
Certainly that would end up being way too large scale for what they'd be using it for, but it's a starting point to move forward at least.
Do you have Whois functionality on NETM? 
So, this isn't necessarily *complicated*, but does require some understanding due to how abstracted it is: [Solid Services Example](https://github.com/dotnetjunkie/solidservices). (I didn't write this, the Author of Simple Injector did.) It's a very cool example of how to do CQRS with very little boilerplate.
No. And i don't know if i implement it. It would be nice, but there are some problems with privacy if you try to query the denic (germany).
Midwest here too. I have yet to see an applicant with a degree impressive enough that I'd hire them without experience. Five years experience (practical, working experience) beats a Masters in Computer Science. I've never had a PhD. apply for a job, if they did, I'd be impressed but would still want some experience. Two candidates, otherwise equal, the one with the degree gets the job. Two equal candidates, one with CS degree, one with a Mathematics degree? Math degree, every day. If you want to work for a big corporation, get a degree for sure. They might hire you without one, but they won't promote you.
Rewriting an `Expression&lt;Func&lt;Foo, bool&gt;&gt;` is possible. It should be reasonably easy to get a basic version working, but I can't say how hard it would be to cover all corner cases. Rewriting an actual compiled delegate would be much harder.
You have one function: `BLLEntity -&gt; bool` and you want a function `DALEntity -&gt; bool`? As long as you have a function `DALEntity -&gt; BLLEntity`, you can compose the two like this with a function `(DALEntity -&gt; BLLEntity) -&gt; DALEntity -&gt; bool`. In C#, it would be something like this: Func&lt;DALEntity, bool&gt; MapPredicate(Func&lt;BLLEntity, DALEntity&gt; mapEntity, Func&lt;BLLEntity, bool&gt; predicate) { return (dalEntity =&gt; predicate(mapEntity(dalEntity))); } Alternatively you could have a generic map function: Func&lt;T, bool&gt; MapPredicate&lt;T, U&gt;(Func&lt;T, U&gt; map, Func&lt;U, bool&gt; predicate) { return (x =&gt; predicate(map(x))); } 
Really tempting to jump on that grenade, though.
As others have said, you should one of the many career paths (games, websites, mobile, desktop etc.). My suggestion is to look at the job listings in your area and count the number of listings for each of these categories. For example, game development might sound like a dream job, but it's the lowest paying and most stressful of all the options. In my area, web development (ASP.NET) is *by far* the most sought after skill set, which is also reflected on the salaries. 
i did download and test it out. you do have a nice amount of dns features. If i were to give a request. I would like to see a lot of MIB features for snmp.
Not sure what it's not adhering to, but has worked really well for me. 
Indeed. Join open source projects, build your own projects and put them on GitHub. It doesn't need to be impressive projects, but it needs to show you know how to use the language and how to use the tools.
Removed: Rule 3, spam.
You could either use reflection to modify/clone the private state, or copy and modify the source code of `SHA1Managed` (or another .NET implementation). Have you benchmarked `SHA1Managed` against `SHA1CryptoServiceProvider`? 
Agreed, especially if you are dealing with situations where the developers are your customers. In that situation two feeds is ideal. That way you can release internal pre-release packages on a separate feed for internal developers and your customers will only see the release version of the packages.
Hi! So I'm a self taught developer\(degree in Math, no CS background at all\) and I started about a year and a half ago, started my first job about 1 year ago, and have recently landed a good software engineering job at a pretty nice tech company. I've done a fair amount of interviews recently, and honestly I think the most important thing is to just be good at general coding in C#. At this level, people are not terribly concerned about what frameworks you know and so on. SQL skills are fairly important, general C# skills are pretty important, and a basic knowledge of Javascript, CSS, HTML. I used Pluralsight when I started, but I didn't get much out of it. What helped me the most was just installing Visual Studio Community and knocking out problems on a code challenge website like [https://codefights.com/](https://codefights.com/), [https://www.hackerrank.com/](https://www.hackerrank.com/), etc. You can get a lot of practice solving basic problems without spending too much time thinking about what you want to code. For me, I spent way too much time thinking about what projects to make instead of just doing something. Also, I didn't really have any success with Github projects, because no one really was taking the time to look at my code, they just want to see a resume and maybe have me take a coding test. Also, the projects I personally could think up were little toys compared to a real, production quality code base. It can be tough to land the first job, and once you do you really need to work hard to make sure you are performing. It was definitely hard\(my first day was absolutely brutal, I felt like I knew nothing and I could tell my coworkers were not impressed\), but I spent a lot of time studying my co\-workers work and relevant skills to get up to speed, and I could at least do some of my work on my own within a couple weeks, and within 4 months I was a competent junior dev.
&gt; You could either use reflection to modify/clone the private state, or copy and modify the source [...] If I go that route, I'll probably crack it open with reflection since that's less hassle, and this isn't going into "production" code. It's just some reverse engineering groundwork for something else. &gt; Have you benchmarked SHA1Managed against SHA1CryptoServiceProvider? I haven't, but implementation speed isn't really the issue. The hashed data falls somewhere within a region on the order of ~50k in size. An O(n^2 ) search is no worse than hashing a few GBs of data. But O(n^3 ) is like trying to hash a few hundred TBs of data. That's not entirely impossible, but it's going to take a hell of a long time no matter what implementation you use. Since this is just one non-essential detail of a larger project, I'm not willing to throw that much computation time at it.
That's just not true. There are many industrial and research programming fields that are heavily dependent on mathematics.
You’re right, I should have said *for the most part,* although research last I checked doesn’t use C# (could be wrong on that though) and those aren’t very common areas
I think you'd do whatever is best for the type of application. 
I will be doing minimum string manipulation, if at all any. For the most part, I will be reading bytes from the serial port, and then append it to the textbox as a string. I want to be able to have a full history of the string \(since first running the program\) so I can go back a read information. The serial device won't be sending data every second. It'll mostly be sending menu options to allow the end\-user to interface with. 
Blazor is experimental and depends on all of the cutting edge runtime. You'll have to check the Blazor project for the current runtime requirements as they change week to week (they are releasing new versions every two weeks at this point).
&gt;full history of the string (since first running the program) So, here you are definitely writing to a file because you don't want/need to keep the full history in memory. Some people don't close applications for weeks so you don't know how large that log of historic commands could actually become. But for the display of the logs you likely only have a limited number that should reasonably be expected to have accessible without using some other method of accessing it (notepad, another gui interface, etc). For that I'd recommend a RingBuffer of strings. A ring buffer is simply a list where instead of overflowing it shifts the head pointer and overwrites the oldest element. Then by reading new entries into the ring buffer from the logging you have both the last N messages and the entire history of the messages. You could also write the logger as a Windows Service which will automatically start and stop when the machine starts and shuts down if the serial port needs to be monitored regardless of the gui being started.
Have you looked at hosting git with VSTS? Fully integrates with visual studio 2017. Works with active directory, and if you have fewer than 5 devs is free. 
You can also use the Roslyn API to runtime-compile custom assemblies.
This can all be solved with Visual Studio Team Services (VSTS)
#programmingdadjokes
Is this how it's done in Command Prompt or Hyperterminal?
No breaking issues in my personal noodling around. I'm going to try re-create a knockout app using it this weekend, Will be a good test of it's functionality.
The only real downside is that it is not a supported tech. It is just in an exploration phase and could be dropped at any moment. I really like it so far though and I hope they keep it up. I would even love to see MVC be able to compile WebASM 
Those don't have a complete history... they have a maximum history (and a separate command history) as far as I am aware. 
Great advice! Wasn't aware of the 'Get' rule. I will keep that in mind for this code and future code. I see how cleaning up the formulas will make things a lot easier to read. Thanks! 
Seriously though. VSTS can host your source control, can host your work items, bugs, and project tracking, it can build, test, and deploy, you can schedule full releases, if you use Azure then it is super simple to deply. Projects can host multiple repositories as well. I use it for all of my personal projects that are not open source. I even had a game that had servers and a website hosted on Azure, a patcher client built in WPF C#, and a game built in Unity. I can build all of it, test all of it, deploy the servers, deploy the website, upload the new patcher to the website, and have Unity build agent on a VM that can build the Unity game and upload it to the website. As far as Git as a source control tech, use it. It is great for teams, the branching structure is much nicer than most source control systems. It might not handle binaries as well as some systems or huge projects but the management makes it far superior to other source control systems.
&gt; It is just in an exploration phase and could be dropped at any moment. I wonder, if MS drops it, how well could the community take care of it?
yeah its not a bare necessity, It's more for flexibility and the opening of options.
Honestly you shouldn't dismiss using Git in TFS. If you already have it, use it, especially if you're not looking to pay more. Was in the same boat as you a couple years ago. Moved from TFVC to Git on the same TFS server, use octopus to deploy. Looked into TeamCity but in the end didn't really need it. Git flow was very easy to implement, theres even a visual studio extension for it to help you get started. You sound like you already have all the tools you need, so the install and learning curve will be much lower in that regard.
If you are using Pluralsight, I would highly recommend doing the C# Fundamentals with Scott Allen, then rolling over and doing his [ASP.NET Fundamentals](https://app.pluralsight.com/library/courses/aspdotnet-core-fundamentals/table-of-contents) course so you can see C# applied in a more meaningful way. He will have you build a project and work through that project throughout the course, adding new concepts and pieces as you go along. I just worked through both of those over the last few weeks and, investing \`\`\`\~2 hours a day, feel way more confident in my understanding and application of C# than I did going in. If you end up liking [ASP.NET](https://asp.net/), there are lots of courses out there on Pluralsight for it, as well as a complete [ASP.NET](https://ASP.NET) MVC 5 path. If not, Unity partnered with Pluralsight to create a [really robust fundamentals course](https://app.pluralsight.com/paths/skills/unity-game-development-core-skills) on their engine, which has been suggested several times here, and may make more sense to pursue due to your 3D design background.
I took your post more-as you NEED a degree, apologies :)
I would say 1000-2000 hours of experience is what a student should have before being job ready.
Didn't it start as a open project by someone at Microsoft though. 
Oh, probably. It was a poor attempt at humor.
how are you going to capture the traffic from other apps? 
That’s exactly my question. I have no idea if that’s the correct way to do it. If it is then how do I do it?
Enterprise here; using Git, build and deployment, and work tracking in VSTS. Love it.
Pluralsite has a great course. It will take you from nothing to advanced material. Also helps you get set up. Hopefully you have a Windows machine though, as most of it can't be done on vs for Mac. 
We use gitversion (wired into our CI/CD server), where it automatically increments the patch number (3rd position) on every merge to the master branch. Builds on the develop branch get pre-release tags. Merges to develop and master both get pushed to a private Nuget server (e.g. MyGet). So when we merge a feature branch PR into develop, we get 1.3.17-alpha0032 (where 32 is the number of commits to develop since the last release PR). The next PR to develop would get 1.3.17-alpha0044 (12 more commits), etc. When you merge from develop to master, you increment the patch number (i.e. 2.7.15 -&gt; 2.7.16). We also auto-tag the git repo (again, using GitVersion environment variables in conjunction with the CI/CD server) on merges to master. It helps with keeping track of what version went out when, plus makes it easier for GitVersion to figure out what the next release number is. If we need to bump the first or second values, we can add a commit message in one or more of the PRs going into develop with `+semver:major` or `+semver:minor`. Which means if we are on release 2.7.15, the next release would be 2.8.0 (semver:minor) or 3.0.0 (semver:major). If you have multiple `+semver:XYZ` commit messages, only one applies to bumping the next release.
Actually, it can all be solved by sticking to TFS (i.e., locally hosted VSTS). TFS will integrate with AD, and will integrate well with VS. I don't understand the move away from TFS at all when it already offers everything OP is asking for, including support for git.
You don't really "capture" traffic. What you want to do is create a network interface and update the routes so that the computer send's the traffic through your interface. Then you can process those packets, package them and send them out the actual internet connection to the server. 
Or you should persist the name instead of the value to the database.
What about on the server? Do I need to make a network interface there too?
Text boxes store their own structure of your data. There's no sense in keeping a copy of your data after you've given it to the text box if you can avoid doing so. You'll want to feed your data to the text box using AppendText, as it's the most efficient way to update it. Do not use the .Text property to update the box, since it'll have to reprocess your entire new string into its internal implementation. If you need to queue data (for instance, to convert bytes into strings, or to queue whole lines before writing to the text box), then use a string builder as a buffer - but don't throw it away, set its length to 0 to empty it - it'll keep its internal buffers that way, reducing memory churn. You're going to want to keep track of how much data you append to the box. If your stream is unbounded, well, your memory is not. Eventually, you'll have to throw away some of the data in the box. In my own code, I pay attention to the number of characters in the box. After it gets large enough, I read the Lines property, cut off the top 2/3rds of lines (allocating into a new array and copying the string refs from the old array to the new) and then assign the new array back to the Lines property. This is the fastest way I've found to do this. FYI, one UTF8 character may be more than one byte - they can be up to 3 bytes. Utf16 can be more than two bytes - if it's encoding a high value character, it'll use a surrogate pair, meaning 2 * 2 bytes. Only ascii has the property that one byte is always one character. This means that, if you're using UTF8 or UTF16, you need to use the stateful decoder that stores bytes that are part of incomplete code points. UTF8.GetChars will not work.
I know how vpns work. I just don’t know how to actually make one. Here’s what I have so far for the client: Make a virtual network card/ adapter. Make it connect to the internet. Change which adapter the pc uses. Encrypt data. Send to server.
If I were starting from 0 today knowing what I do now, I would use the Pluralsight course to learn enough to write a simple, *complete*, CRUD web app. By complete I mean auth, validation (data sanitation and business rules), everything, production-ready. Use some type of version control while you develop, probably either Git or Team Foundation Server. Doesn't matter what it does, but a couple examples could be: Class registration for a college: Enforce pre-requisites, whatever else you can think of. Different roles for students and staff. A work queue for staff to approve enrollments. Pet adoption: Catalog of pets, application submission, roles for applicants and staff, work flow for processing applications, etc. Put that project on your GitHub account. Now apply to one of the big consulting firms like Robert Half or US Tech Solutions, they probably have a position near you. After building that app you have enough knowledge to land a job if you interview ok. Spend a year or two learning the job, then jump to whatever you really want to do.
I've not seen much about it - what does it do that I should care about?
This third-party function, does it randomly choose a region to hash? At first, you could try doing it the long way, and discover whether or not the selected region is chosen randomly or not. If it's not, then it ought to be possible to see how they are selecting the region to hash; and then replicate that method in your own code. I don't suppose the third-party would provide this info themselves? 
You don't have to write JavaScript.
VSTS is literally “TFS but on Azure.”
I don't think the download size is an issue. The runtime and the framework libraries could be cached on a CDN. The default project template produces a DLL that's only 7K.
How do you rewrite it? I'd like to do something similar.
Ah I see. The only other thing I can think of is an overloaded cast operator on `DALEntity` and putting `Cast&lt;BLLEntity&gt;()` into you LINQ query.
It's not at all clear that webasm will translate well to CDNs, as far as I can tell the concept of framework and libraries no longer exists at the compiled level and almost every app is likely to be unique. 1.6 MB before you even begin loading your app is completely unacceptable in terms of startup performance, especially on mobile, and by the time you've added enough code to make something interesting it's going to be substantially more. The killer feature of Blazor is not being Javascript and front end devs aren't interested in that feature. They already know how to work with JS properly and modern JS is an excellent front end language. I love .NET, but this has to offer something modern Javascript frameworks can't do or do what they can much, much better to have a hope. Async evented programming in C# quite frankly sucks and it's going to be much much bigger in terms of download so it's not looking good so far.
The runtime and DLLs are loaded separately. They could easily be thrown on a CDN. And if they're one a standard CDN, only the first Blazor app that ever loads on machine will download these files.
Why would you prefer a math degree?
How the compiler packages dll's is entirely up to the compiler. dotnet (at least on Windows) produces 1 dll per project, giving you fine-grained control over how to bundle your code. Now all we need is for the runtime to support only downloading them when needed and we're golden. As for async to suck in C# I'm quite sure you have no idea what you're talking about. 
I don't believe you have to do it the same way that the client is done. If you really just want to relay traffic from client to server to the world then you can just do normal server development and use the existing network interface to send and receive data. If you want a more conventional VPN where it's really as if you are plugged into the local network. That would require some extra work. You could bind to the interface so that you can process all the packets that come through. You would need to retain a mapping of local IP address to client so you can forward traffic correctly. You don't really need to process the traffic but just figure out if you need to forward it or not. It may be easier to start with just being able to relay client traffic to the internet and back. 
We moved our 2 man shop from local TFS to git on VSTS with great success. If you're doing .net and VS, I would just switch to git on TFS. Just always branch for each feature and use pull requests for the code reviews. It's pretty painless.
It's razor in the browser\*
I have some interest in this. I was hoping to leverage my knowledge of c# to write non windowsy things for a raspberry pi. I may end up giving up and learning c. 
Then you would be stuck in converting it every time
Answering the elephant in the room might help us give better suggestions. Right now, sticking with TFS but switching from TFVC to git seems like the best fit.
Can you call any other js libraries from Blazor? If not, it may have a limited use to what ASP.NET libraries can provide for frontend.
Take a look at how their do it using registered functions here: https://github.com/AspNetMonsters/Blazor.Geolocation/blob/master/AspNetMonsters.Blazor.Geolocation/LocationService.cs
Should work like that already using Mono.
I wouldn't call it a rule, I would describe more like a concensus. You'll notice it more when you look into the OO.
I don't see how 1.6 MB is completely unacceptable. It's a one-time download that only takes a few seconds even on a 3G mobile network.
dotnet -v tells ".NET Command Line Tools (2.1.105)" Isn't it 2.1.1 equivalent?
How it compiles on windows is irrelevant because that's not how it's delivered for webasm. Webasm **is not** dotnet. Async does suck in dotnet, it's way too easy to fuck up and quite difficult to get your head around what's actually happening. 
When was the last time you did async in dotnet? Async in modern C# doesn’t suck as far as I can tell. Although maybe I am just used to the suck?
Actually I am a full stack developer, which includes front end.
Presumably not a good one. CDNs are not particularly effective for even JS libraries, forget binaries. Adding dynamic linking to runtime will just make it larger, webasm doesn't have this, and if you think downloading a couple MB before the runtime is even available to start loading your dynamic linking isn't a problem you're an idiot. Pages like this will take at least 5-10 seconds to interactive, which I'd say too fucking long. Once people start pulling in a lot of libraries it could be 30 seconds or more.
You are making up numbers that are not realistic. I just loaded the Blazor demo app with nothing cached; it took under two seconds to interactive. But even 5-10 seconds or more could be acceptable if we are talking about the first page load with nothing cached. 
If you visit [https://blazor\-demo.github.io/](https://blazor-demo.github.io/), you'll see Blazor is quite capable of delivering dll's independently. Besides, you haven't understood Blazor at all. The *runtime* compiles to wasm, the .net dll's are \(at least in interpreted mode\) **actual .net dll's**. I'm sorry you are struggling with async\-await in .net, but that doesn't mean it sucks.
What mode were you thinking about supporting, tun or tap?
Also... To say that C# \(whatever part you may focus on\) is too easy to fuck up, in a discussion contrasting it to javascript is hilarious. :D
&gt; If you understand how stream ciphers and the like work, you can see why this is dumb: if we've computed an unfinalized hash for bytes 0...50, we can simply update the SHA-1 state with 1 more byte to get the unfinalized hash for bytes 0...51. I'm probably missing something, but... Cryptographic hashes aren't stream ciphers, though. The internal state after transforming bytes 0...50 without TransformFinalBlock is exactly the same as the internal state after transforming bytes 0...51. And I can even tell you what that state will be, regardless of your input: [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0] SHA-1 (like any other hash) doesn't work a byte stream. It works on blocks of 64 bytes. When you call `TransformBlock()`, if you've sent in a total of `n * 64 + m` bytes, it will transform the state using n blocks, and leave the last m bytes for `TransformFinalBlock()`. Which means that until you've provided it with at least 64 bytes (or called `TransformFinalBlock` to pad what you've given it to a multiple of 64 bytes), the state will be the initial state of SHA-1, which is the above. Even from a conceptual point of view, the internal state of your 51 bytes would bear no relation to the internal state of your 52 bytes at any point, due to the different padding they'll get, combined with the avalanche effect - which starts taking effect from the very start of the SHA1 algorithm.
One killer feature of web assembly is having the same language Android code base for front and backend of the site. Yes this can be done with nodejs but that's why nodejs was built. To make it. easier to develop. Now the same is happening again but with many languages. This will open up those back end Devs with their favourite languages to front end development. Yes a dev who is already front end won't care as much but in 5-10 years you may find that developing a site in two languages (js + a backend) is no longer the norm.
JS is actually really good at async. It was built for async eventing from the ground up and it's almost impossible to actually fuck it up completely.
I'm not struggling with async await in dotnet, but it's incredibly easy to do async/await in dotnet incorrectly because the language simply wasn't built for it. That method of delivery will just make loading of the page even slower.
&gt; Edit: even the first time download isn't that bad. It's like 1.6MB. I mean that's pretty *huge* - that's before you add any content/images to your site. Even a fully-featured SPA framework like angular is like 1/10th of that.
`Linq.Expressions` comes with the handy `ExpressionVisitor` which allows you to walk expression trees and make modifications to them. Going with /u/FizixMan's example, this would be a very basic implementation: static void Main() { Expression&lt;Func&lt;BLLEntity, bool&gt;&gt; bllExpression = (BLLEntity entity) =&gt; entity.Name == "John Doe"; Expression&lt;Func&lt;DALEntity, bool&gt;&gt; dalExpression = TranslatePredicate&lt;BLLEntity, DALEntity&gt;(bllExpression); var dalLambda = dalExpression.Compile(); Debug.Assert(dalLambda(new DALEntity { Name = "John Doe" })); Debug.Assert(!dalLambda(new DALEntity { Name = "foo" })); } static Expression&lt;Func&lt;TTarget, bool&gt;&gt; TranslatePredicate&lt;TSource, TTarget&gt;(Expression&lt;Func&lt;TSource, bool&gt;&gt; predicate) { var oldParameter = predicate.Parameters.First(); var newParameter = Expression.Parameter(typeof(TTarget), oldParameter.Name); var visitor = new ReplaceParameterVisitor&lt;Func&lt;TTarget, bool&gt;&gt;(oldParameter, newParameter); var result = visitor.Visit(predicate); return (Expression&lt;Func&lt;TTarget, bool&gt;&gt;)result; } class ReplaceParameterVisitor&lt;TSignature&gt; : ExpressionVisitor { private ParameterExpression SourceParameter { get; } private ParameterExpression TargetParameter { get; } public ReplaceParameterVisitor(ParameterExpression source, ParameterExpression target) { SourceParameter = source; TargetParameter = target; } protected override Expression VisitLambda&lt;T&gt;(Expression&lt;T&gt; node) { var newParameters = node.Parameters.Select(p =&gt; p == SourceParameter ? TargetParameter : p); return Expression.Lambda&lt;TSignature&gt;(Visit(node.Body), newParameters); } protected override Expression VisitParameter(ParameterExpression node) { // Every reference to the old parameter should be replaced with the new one instead return node == SourceParameter ? TargetParameter : node; } protected override Expression VisitMember(MemberExpression node) { // Rebind expression/field access to new type. This assumes they have the same name return Expression.PropertyOrField(Visit(node.Expression), node.Member.Name); } }
I think the framework and app are decoupled , however even if they were you can still benefit greatly from a cdn . Not a cdn in the same sense as loading jquery from a cdn but in the way you can load your app from a cdn . We have several high scale sites and we push every static asset to a cdn account we control to speed things up for our customers . 
Your average JS library bundle and application when minified is well under a meg, and even then it can take too long for an app to load. JS is also loading all of the different resources roughly in parallel. For Blazor the runtime needs to get downloaded and the application needs to get downloaded. If you bundle all the resources together you get a bulky download and no CDN. If you don't bundle them together you can't even know you need to load them until the runtime is loaded and running. So yes, both solutions are awful because they're both **too large**. The syntax of the async/await model is fine, the problem is the underlying implementation. If your async method returns when the thread that called it no longer exists it will lock. Because JS is always single threaded you can't have that problem in JS. The calling thread is always available.
Just looked at it, and if the devs use a VS subscription and not VS community then they are not included in the "5 free" count.
Your problem is and remains time to interactive. No matter what you do, you can't load several meg of data (and a full Blazor app will easily be several MB of data) before anything on the page can be loaded and have a responsive site. It'll be fine for an internal intranet, but it's going to take a completely different development process to build anything that's remotely fast to load (Silverlight didn't even need to load the runtime and it still took way too long to load). If you're really lucky and you get a lot of cache hits you might get an acceptable load time, maybe, but counting on cache hits is a big risk to take.
But that's a one time thing. One time across all Blazor applications if it's from a common CDN.
Yes, you'll (probably) need the runtime and entry point to get the list of dependencies. How is that different from, say, Webpack with dynamic imports today? Even without dynamic imports, you still have to manually include your chunks in the markup - why should that be impossible for Blazor? There's plenty of ways to prefetch resources, particularly with HTTP/2, so it's a non-issue. Also, if you're not competent enough to manage your threads properly, you should be using the thread pool, which will do it for you. The issue you describe, is not one you should be having.
At the moment I'm avoiding to have a look in different csv libraries. Its a way to challenge myself with the use cases I need it for, I had in the past and everything I can think about it. I'm pretty sure this library is very complete so when I finish the first version of mine, I may have a look, but atm I don't want (the main reason is to dont copy anything) 
I'm not debating that some pages are far larger than 1.6MB, I'm saying that 1.6MB **before you add content** is too large. Look at those heavy pages - it's not the html/css/js causing that size, it's the content itself. &gt; All of it is really a moot point anyway since method level stripping is on the way. See my point about "not ready for production use".
There is/are C# wrappers around PCAP which might help. Just google that, I can't say which, if any are working well.
Async await us not threading and it doesn't use the thread pool. If you make an async call from, for example a webapi call though, you don't always have control of the thread pool. It can be worked around, but it shouldn't have to be, and in JS it doesn't have to be. That's why it's shit because what should be simple to work with absolutely isn't. Doesn't mean it can't be or that I can't do it, but it's easier to fuck up than it should be. Web pack dynamic imports are designed to improve time to interactivity. This is not the same thing. Again though, this all has to be better than JS and it's not. Just because you're not competent enough to write JS doesn't make Blazor good.
.net core is all you need. No idea if all you dependencies would work but it is worth the try.
We were only using TFVC and not any other features of TFS, so I figured we'd get rid of that dependency. I think there are probably just as good or better tools out there. At any rate, I love the issue tracking, wiki and merge request stuff in GitLab. Haven't started with CI/CD yet. Probably should when we get some damn extra time. 
An empty Angular 5 project uses 1.4 MiB.
There are contexts where this happens when you're not managing the thread context. As an example making an async request inside an MVC or webapi request can cause your backend to stall out if your request thread terminates due to an error. And again, I'm not saying I can't deal with it, I'm saying it's easier to fuck up than it should be. What Blazor might do in 5-10 years with a huge amount of help from Microsoft is irrelevant. Today it's slow as fuck. If you're building react web apps for a living now and you can't understand why Blazor is not viable today you're doing a shot job. You're also an arrogant ass.
Said the pot to the kettle. Either you've 1) uncovered a bug in the runtime, 2) misdiagnosed the issue, or 3) botched the code. Doing async work that throws in a mvc or webapi method is as commonplace as it gets. What you're describing is not, so we can rule out 1. No one is advocating using Blazor in production today, so you can abandon that strawman.
The issue occurs when you have to force a specific piece of http code to return synchronously before making further async calls. Getting a token If you await the code in the wrong way and the MVC call errors out it so the calling thread returns, this will lock your backend. That's not to say you can't make it work, or that I can't make it work, the point is that locking your backend with an incorrect call **shouldn't be possible**. You can use async/await in C#. I do use async/await in C#, but async/await in C# is far more complicated and far easier to fuck up than it really should be. Once you start trying to get into something like an evented UI, it's going to be really easy to fuck up. My whole point in this conversation was that if Microsoft drops Blazor, Blazor is dead and it might be dead anyway. You're talking about **major** changes to the way the dotnet runtime works, just to be on par with what JS can do now. 
It's difficult to tell what's happening from your description. It's also unclear what a "locked backend" means. If you're not doing anything weird, you should submit an issue to the repo and have them investigate. &gt;That's not to say you can't make it work, or that I can't make it work, the point is that locking your backend with an incorrect call **shouldn't be possible**. Seriously? It should not be possible to cause deadlocks or race conditions? That's the price you pay for threads. If that's what the issue boils down to, then there's really no point discussing it. More control = more ways to mess up. That's life. The brunt of the major changes were made by **one man** as an experiment. If Microsoft gets behind this for real, it'll be production ready in no time.
Sure, ought to be possible. There might be some platform gotchas here and there
It should not be possible to halt the whole back end, which is what you can do. Deadlocks and race conditions, yes, breaking the entire app, no. That's not power or control, because I wasn't using any, but you can still do it. Async/Await in C# is far more complex and far more brittle than it needs to be or should be. Doesn't mean you can't use it, but it's a really shitty implementation and when you're going to have to extend it out into the amount of async action that happens in a JS runtime, it's going to suck even more. Your constant condescending bullshit blaming me without reading anything is completely unnecessary. Async/Await is hard and complex and nasty. Eventing in C# is hard and complex and nasty. Neither of those things is hard or complex or nasty in JS. They're how the language works, all the time. That **one man** used a barely functional micro dotNET runtime as a POC. He didn't write that and the people who did write it didn't finish it and abandoned the project because writing a dotNet framework is hard. Making this thing viable for real involves a huge amount of work. A complete modularisation of the framework, delayed loading of linked libraries over an unstable connection, as well as IL pruning. That's just to be as good as JS is now, today, and it's without having any kind of serious front end frameworks in place. By the time all that is done, HTTP2 may be commonplace and the much smaller JS libraries will be at an even bigger advantage as well as all the additional features JS will have by then. The only good reason anyone has ever given for using Blazor is that it's not JS, and you and everyone else in this damned thread have constantly ignored the fact that time to interactive is important in web apps and 2-3 MB of dotnet before you can even start is not going to make a good time to interactive. I love C#, I think some of it (async/await for example) could be written better, but that's what you get when you hack features into an existing runtime rather than designing it that way from the ground up. That doesn't make C# a great base for an SPA.
What kind of "fuck ups" are you talking about?
Thats not how it works. Skill is what you already have, and what you use to do some job. So, you can learn any programming language without a skill.
A bit limited for time, so if necessary I'll come back and add more later. The key to this is to understand how the author is storing the "signature" of his expression. He regards the signature as a combination of the value of the expression, and an indication of which individual numbers went into the expression. The first part of this, the value, is simply represented as a binary number. The second part is a bit-mask, with a 1 indicating that one of the possible numbers is being used, and a 0 indicating that it isn't being used. Here's the key though: **He's combining those two pieces of information together into one single variable** In order to do this, he does the following: - First of all, the actual number represented by the expression. He takes that number, and shifts it left by the required number of bits to allow space on the right of the number for the bit-mask. - Now, the bit-mask itself. He wants to indicate, on the line you've highlighted, that all of the input numbers *may* be used, and he does that by setting the bit-mask all to 1s. Imagine that he has 3 input numbers - the binary representation that shows that all of these can be used is 111. To get to this, he takes the digit 1, shifts it left by 3 bits (because 3 input numbers) giving the value 1000, then he subtracts 1 from this to give him 111. - Finally, he "logical ors" those two numbers together to combine their respective bits. So long as there is no overlap between the bits of the two numbers (which there isn't in this case, he's carefully arranged that by ensuring that each of the two numbers uses a different set of bits), adding two numbers together is the equivalent of a logical or. The second part of your question is just the reverse of my first bullet point. The first bullet point shifts a number to the left to make room on the right for something else; the second part of your question refers to where he shifts that number to the right, throwing away the bit mask in the process, which gives him back the value that he processed originally by shifting it left. Hope that makes sense, if not feel free to ask more questions and I'll come back later. (PS - I love it when I click on a link that says "help understanding some code" expecting something basic and beginner-level, but what I find is actually pretty advanced and took me a few minutes to understand myself first!)
Sometimes you need to wait for the result to come back though, and in other async frameworks you can. I've sorted out my problem long ago, doesn't change that the phrase "you shouldn't do" really means "our framework can't handle".
Thank you all for your great advice! A lot of good information here that has given me a lot of guidance 😊 
...I’ll go take a look. Immediately 
You attack Blazor and .Net on points that apply equally well to js. You argue infeasibility of tools that exists for js. You claim poor language design without knowing the basics - all the while claiming superiority of your language of choice. Of course you're going to find disagreement. You praise js being made for eventing (ignoring that single-threaded async .Net apps are quite feasible). What happens when webassembly gets threads? 
Thank you for the info. I'm glad that this isn't considered basic because I'm still having trouble understanding it. So this line &gt;&gt; int targetKey = (targetValue &lt;&lt; numbers.Length) + (1 &lt;&lt; numbers.Length) - 1; Let's assume target value is 5, 0101 and we have 4 numbers. the result is 01010000 + 00010000 - int 1; which would go to 01010000 + 00001111; right? 01011111; is then the value of target key or is it 0101000000001111? I kinda get that he uses &lt;&lt; to make 01010000 and then &gt;&gt; to make 00000101 which restores it to 5 now. right? I have tried looking at the values via the visual studio debugger as the program is running but it's just showing me the int value and it made it more confusing.
Unfortunately I won't be able to move. It of curiosity, what is the pay?
&gt; Sometimes you need to wait for the result to come back though That's when you should use `await`, not `.Wait()`, and you'll be fine. &gt; in other async frameworks you can Really? In which async frameworks can you block the thread waiting for something without the risk of deadlocks? The only one that comes to mind is go, because it doesn't really have blocking (but it looks like it does). AFAIK, JS does not have an equivalent to `.Wait()`. &gt; "our framework can't handle" Also, it's a problem in frameworks like ASP.NET, WPF and Winforms, but *not* in ASP.NET Core. No idea about Blazor.
&gt; Let's assume target value is 5, 0101 and we have 4 numbers. the result is 01010000 + 00010000 - int 1; which would go to 01010000 + 00001111; right? 01011111; You're all good up to this point. Now, study that number in binary. - The first 4 bits are 0101 - that is the target value, 5. - And the second 4 bits are all 1s, indicating that they can all be used. That is the author's chosen way of representing an expression. &gt; is then the value of target key or is it 0101000000001111? I'm not sure what you mean by this, or where that particular number came from (it looks like you've inserted some extra 0s in the middle that don't belong there), so remove that from your logic and you're there. It all boils down to the fact that this is how the author chose to store his expressions by combining these two things together. He might have created a `struct` and kept them as two separate elements of the struct, in which case he wouldn't need to do any bit-shifting (but comparing would be ever so slightly more complex) but he didn't do it that way. The only purpose of the bit-shifting is to allow two things to be stored together in the same variable.
That's what .ConfigureAwait (false) is for. Async/Await is amazing and got even better in Core. The only bad thing is you need async/await all the way down for it to be truly useful or it will end up taking up a thread, anyway. But if a sync call must be made, ConfigureAwait (false) will tell it to resume on any thread, not only the starting thread. That is how you get deadlocks.
I actually write a lot of C#, and I'm attacking Blazor based on its weaknesses. Blazor is a large download and async await in C# is unnecessarily complicated. Do you want to write C# like you write JS? I sure as fuck don't. The language isn't designed that way. Microsoft could make the dotnet framework create precompiled webasm blobs, which is what IL pruning would require, but then you've got application specific code bases and you lose any hope of cache hits. Single threaded evented systems are really good for UI. Windows was built on one for years, and it worked really well. C# doesn't do that very well, because doing it well is hard and that's not what the language was built for. It could, but right now it doesn't. They might add threads to webasm, though I wouldn't really count on it happening natively. That just leads to multithread UIs and message passing, which isn't really all that fun either. WPF uses message passing. UI is hard, but JS is actually pretty good at it. For Blazor to take off it has to appeal to more than just C# devs who don't like JS. It has to offer something that makes existing JS front end developers want to use it rather than their existing tool kits. That's a big ask.
\&gt; 5\-10 seconds before the user gets anything at all is absolutely not acceptable, no one will do that E\-commerce bubble much? Show some static content and have a loading bar while you download binaries. Unless you're an e\-commerce website that time isn't relevant to your users. If you need C# you're probably doing some pretty sophisticated stuff, so there's going to be an expectation of loading. People don't complain that web \*\*apps\*\* take time to load.
This makes me curious if there is an easy way to create a child cancellation token from a parent one. So that if the child cancellation token and/or the parent is cancelled then the child task is cancelled but if the child cancellation token is cancelled the parent task is not.
In didn't say that I hadn't fixed it or couldn't fix it. I said it was easy to mess up. ConfigureAwait isn't something you can use everywhere, but if you don't use it where you need to you can deadlock. Using async await safely required getting a really deep understanding of exactly how it's implemented under the hood. Good code makes doing the right thing easy and the wrong thing hard, and it shouldn't require you to know the implementation details to use. That's my criticism of async/await in C# it's way too easy to use it wrong and far too complicated to use it correctly. You can use it correctly, I have done and continue to use it correctly all the time, but I've also used it incorrectly and so have a lot of other people. When writing evented code in JS it's very difficult to mess up in any kind of critical way. It's actually fairly hard to screw up JS in a particularly fatal way at all. For the most part C# is pretty good about that too, but not with async/await.
&gt; I'm not sure what you mean by this I was literally putting the two binaries together as you would attach two strings. At least my first thought was correct. &gt; int curMask = curKey &amp; ((1 &lt;&lt; numbers.Length) - 1); so for this, he is getting the mask how? and how is the program using the mask to know which numbers have and haven't been used? so, the overall algorithm works kinda like this, 4 5 3 it takes 4 and does all methods with 5 then the same with 3. then moves onto 5 repeating but disregarding any duplicates using the same numbers and resulting in the same key avoiding wasted time. 
People complain when **anything** takes time to load. It's ok if you're dealing with internal employees and they don't have a choice but to live with your clunky crap, but anything remotely customer facing can't be totally crap. Even with internal employees you're better off not being total shit.
I wouldn't use it on anything you have to professionally support long term. The project has had pretty good community feedback, so it will probably prosper, but that means it is very likely to go through a painful rewrite when they start to harden it for production (imagine a smaller scale version of what happened with AngularJS =&gt; Angular). I love the direction of the project so far, but I wish they had gone with their own template language instead of Razor. Its going to be hard to get any crossover with the wider web community when the tooling only works in Visual Studio and not in Visual Studio Code.
Ok
Does the order they are run in change the times?
&gt; because .Net Core is going to take over everything going forward. Yeah but not in the immediate future. 
In our case our internal packages are simply helper libraries, such as file parsing utilities that we upgrade to latest layouts etc every release. We then have other projects that utilize that as a NuGet reference. In other words we're both the producers and consumers of the packages. Why would we need two feeds if we can simply have something like this: * Release starts and we create package 1.0.1-dev * Reference 1.0.1 in consuming application, allowing pre-release builds, this should pull the dev version * Finalize 1.0.1 as the release winds down, deploy the final 1.0.1 to NuGet * Update the package reference, it should now pull the final version as it supersedes the pre-release version. Obviously ultimately this would probably get automated somehow with our build server, but that seems to be a reasonable flow. Thoughts?
https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.createlinkedtokensource?view=netframework-4.7.2 Given `CancellationToken parent` you can create a child with `var childSource = CancellationTokenSource.CreateLinkedTokenSource(parent); var child = childSource.Token;` Then manually calling childSource.Cancel() or whenever the parent is cancelled, child we be cancelled too
I'm assuming GitVersion would be something I use when I automate the publishing of the package as part of the commit to Git? I'm currently not on Git, but we're working towards that.
Ups, found the problem, i have code in SelectedIndexChanged trigger on the Combobox that is causing this problem.
Lol no it actually makes my app crash, caused by code in SelectedIndexChanged trigger on the Combobox. But testing this actually made me find the error.
It should work. I just converted a ten year old personal project website to dotnet core. I used Visual Studio Code, which is awesome, for the editor. The website uses MySQL and HTML Agility Pack, so I know those are available. The only issues with MySQL is the provider doesn’t use real Aysnc. It lets you make Async calls, and it works. But it isn’t true Async. You don’t need true Async, even if it is better design. The website runs great on a cheap Debian VPS with nginx as the proxy.
I haven’t tried it, but you should be able to run an app on the pi: https://github.com/dotnet/core/blob/master/samples/RaspberryPiInstructions.md
I don't think that's correct. https://www.visualstudio.com/team-services/pricing/ 
Glad I could indirectly help lol
From that link (grey box, bottom left): &gt; VSTS included with subscriptions &gt; Visual Studio subscribers get free access to VSTS. &gt; Subscribers get access to any number of accounts and don’t count against your 5 free users.
JS isn’t built for anything from the ground up. 
&gt; io subscribers get free access to VSTS. &gt; &gt; Subscribers get access to any number of accounts an Right if you're a subscriber, it doesn't count towards the 5 free users. So if you have a team of 8 and 3 have a subscription and 5 don't, you'd still be free. If you have less 5 or less people accessing VSTS it's free subscription or not.
On the average US mobile data connection, 1.6MB is 1 second, which would be cached across all Blazor applications. The application itself is only 7K. And this isn't even including response compression, which would bring the response time down to a fraction of a second. And if you compare 1.6MB to other JavaScript frameworks, it's definitely comparable.
Take a look at what is being served at [https://blazor\-demo.github.io/](https://blazor-demo.github.io/). In particular, take a look at how modular the libraries are being served and how small they are. Three packages are bad: mscorlib.dll \(598kb\), System.dll \(121kb\), and mono.wasm \(378kb gzipped\). These make up the bulk of what's being served. While some of it is fundamental to getting the framework running, a lot can be trimmed. Add to that, the dll's aren't gzipped, which would have reduced sizes to 224kb and 78kb respectively \(saving us 523kb already\) and more yet for all the others. That's one way to go, which is similar to using the minified version of react/angular/vue from a CDN. Alternatively, you can compile just the parts of the framework that you need AOT into the executable, similar to what you'd do if you bundled react/angular/vue into your app \(presumably in a vendor chunk\). It's the exact same decision you have to make here. Use a larger but CDN\-served bundle or include with your own and trim the excess. \-\-\-\-\-\- You don't like async\-await in C#. Alright. I think you're wrong and that it's dead simple to use, and I think C# handles events just fine. We're already in message passing territory with wasm \- that's how it works at the moment \- and there's plenty of use for threads even in web applications. There's a reason for threads and the web will benefit from them as well. Looking at the comments in this thread, I'd say Blazor has a pretty decent chance if only they get the basics down. To me it seems they're close.
&gt;Is this a bad career move? At worse, it would force me to learn Python at a deeper level. I wouldn't say it is. Anytime you can grow professionally is a plus. Also, you already have the knowledge in C# so it's not like you won't qualify for any other C# jobs in a scenario where you realize you hate python in the future. 
Would it make you happier working with Python / working at said company?
Gzipped the latest react is 32 kb. Angular 2 with RX is 143 Kb, it's the largest framework. The current Blazor is more than 4 times that gzipped with no libraries and an incomplete runtime. That leaves room for your entire real world application below what Blazor is now and it's going to go up, not down. You can read posts all over the web from people who fucked up C# async await and I'll guarantee you did too. You can be an asshole and just say all those people are incompetent, or you can understand that once you step outside of really basic things async in C# is really messy. There's no benefit for threads on the web because anything that would be done on a thread should be done on the server. JS doesn't have threads because the browser vendors don't want it to have threads. We've got service workers, but they can't access shared state. You're just going to introduce a whole shitload of concurrency overhead for little to no benefit. The DOM isn't remotely threadsafe, and it's not likely to become so. This thread is full of people who'd rather shove a cactus where the sun don't shine than code JS, and most of them haven't written more than a basic front end in their lives. Ask about Blazor in /r/frontend see if they'r as excited. 
Here's a sneak peek of /r/Frontend using the [top posts](https://np.reddit.com/r/Frontend/top/?sort=top&amp;t=year) of the year! \#1: [EFF resigns from W3C](https://www.eff.org/deeplinks/2017/09/open-letter-w3c-director-ceo-team-and-membership) | [13 comments](https://np.reddit.com/r/Frontend/comments/70x0lx/eff_resigns_from_w3c/) \#2: [anime.js - JavaScript Animation Engine](http://animejs.com) | [14 comments](https://np.reddit.com/r/Frontend/comments/7eqr5b/animejs_javascript_animation_engine/) \#3: [&lt;/2017&gt;&lt;2018&gt;](https://np.reddit.com/r/Frontend/comments/7ndjox/20172018/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Your website failing is not a critical failure. Not even remotely close. Apps crash like that specifically to avoid a critical failure.
Removed: Rule 4.
The JS on Gmail is 1.4MB. Looking at other Google web apps and Microsoft web apps this isn't unusually high. Some are well over 2MB. Since Blazor will probably be used for larger web apps, it would seem that it's already competitive size wise.
Seriously, what are you doing with your async code? I can't even imagine what you're doing inside a controller method to bring down the app, let alone server. 
Removed: Rule 5.
This worked for the simple case you presented. Thanks! That's probably enough to get my feet turning. 
https://didireallyjustreadthat.files.wordpress.com/2016/03/be-nice-meme.jpg
Thanks! Great tips :\)
I was responding to the idea that multi-megabyte downloads are unacceptable. But I will add that .NET DLL files seem to be quite a bit smaller than minified JS for a similar amount of logic. I would imagine that a Blazor application would grow at a much slower pace. In addition, the vendor.js file for several of those apps were over 1MB.
Yeah, I'm thinking it would be good for one-offs. Tools and utilities that you write, deploy, and forget about. Especially since it can pull in existing server side code.
What is `inmatatTal`? Is that supposed to be `number`? I thought 1 was considered prime, but I'll believe you if it isn't. Beyond that, good job! Does your friend have a next-level challenge for you after this one? 
My bad, and yes, it is supposed to be number, I have changed it now. I write all my names in swedish because I'm swedish so I forgot to change that one. Unfortunately he's not a very creative man and he doesn't have another one. However, I would gladly accept a challenge if you have one :\), and thank you! Ps. I don't really know if it's a prime or not. I've seen people debate over if it should and if it shouldn't. My friend didn't think so and so I stuck to his idea.
Ah I gotcha - I'm not particularly fussy about the language, I was just confused since it was never declared anyway! If you're hungry for more, I'd suggest modifying your program in the following ways: 1) Move your `CheckPrime` function into its own class `PrimeChecker` 2) Write some unit tests for `CheckPrime` ([here's one reference on the topic](https://msdn.microsoft.com/en-us/library/ms182532.aspx))
It thinks 9 is prime.
Oh, major flaw. Thanks for pointing it out! Did solve it by changing the for loop condition from divider &lt; Math.Sqrt(number) to divider &lt;= Math.Sqrt(number) Thanks! :\)
I did try to experiment with other classes earlier but it didn't go very well. But I will do my best thank you :\)
Lines 13-15: short s; do { Console.WriteLine("Enter a number:" + "\n"); } while(!short.TryParse(Console.ReadLine(), out s)); 
Great, thanks! :\)
You are probably looking for this: https://stackoverflow.com/questions/3922291/use-visual-studio-web-config-transform-for-debugging I don't waste my time for it. I transform when I deploy to different environments. When testing in the VS IDE using IIS Express, I just modify the web.config manually. I just never check-in the changes and I make sure my local account doesn't have access to update/delete entities.
Removed: Rule 4. You'll have to get started with something and post that. At the very least, determine how your text files or CSV files are to be formatted (written by hand example) to represent a 3 dimensional array. If that works out and validates the premise, then you can go about writing the readers/writers. If you have issues creating them at that point, then you can post that, but include what you tried and in what way it didn't work.
What collection type are you using? I get arrays returned when I return Ok(IEnumerable&lt;T&gt;). Is the response payload represented as an array when you call the API from a standalone HTTP client like Postman?
Like others have said - the textbox control will be your limiting factor. Something to try would be to store your data in a StringBuilder (because of it's superior memory management) and then only display the last 30 or 40 lines in it in your textbox. Your textbox then becomes a viewport into the StringBuilder. To support keyboard scrolling, you'd look for the arrow keys in the KeyDown event and when you get a Keys.Up you'd change the start position of your viewport (into the StringBuilder) up by one line (scan backwards for the next newline/CR-LF). You'd disable the scrollbar on the textbox and use a separate one. Keep track of how many newlines are in the StringBuilder and increment the Max of the scrollbar as you Append them. Scroll events would then be the same as if you'd grabbed Keys.Up or Keys.Down in the textbox.
They are built in to the controls namespace. You should be able to use them. They take your two state bool and apply to the visible enum which has 3 (collapsed, visible , hidden) . Unless you don’t like the default conversion it shouldn’t be an issue 
As far as I know you implement converters on your own. However, some often needed ones made their way into the UWP community toolkit, e.g. Boolean to Visibility. See the documentation [here](https://docs.microsoft.com/de-de/windows/uwpcommunitytoolkit/helpers/converters). Likely, there are more helper frameworks.
I'll keep note of this.
Build your configuration in the Startup method of your startup class, save it to a property on your startup class, then register it in ConfigureServices and inject it into the constructor of whatever class is running the stored procedure.
My guess is that it was just easier. Mono already has a long history of being ultra-portable - it's the runtime they use for Xamarin, Unity, etc. Plus, the Mono team are crazy geniuses (not that the .NET Core team isn't - the Mono team just seems to always be on the bleeding edge).
There are some built-in converters that you can use, but you will likely be creating your own at some point. `BooleanToVisibilityConverter` is built-in, so you don't have to spend the few minutes writing that particular converter, but what if you wanted an integer to dictate your control's visibility? What if you want to check against 2 booleans instead of 1? You'll have to come up with your own implementation, although they are fairly easy to write once you understand how the boilerplate is structured.
[This should provide a very good answer!](https://github.com/aspnet/Blazor/issues/286#issuecomment-373961638) Mostly the [last comment](https://github.com/aspnet/Blazor/issues/286#issuecomment-373961638).
I created a library with lots of converters called Tortuga Sails. https://github.com/Grauenwolf/Sails/blob/master/Tortuga.Sails/Tortuga.Sails.source/ConvertersList.xaml To use it install the NuGet package and then add this to your app.xaml file. &lt;Application.Resources&gt; &lt;ResourceDictionary&gt; &lt;ResourceDictionary.MergedDictionaries&gt; &lt;ResourceDictionary Source="/Tortuga.Sails;component/ConvertersList.xaml" /&gt; &lt;/ResourceDictionary.MergedDictionaries&gt; &lt;/ResourceDictionary&gt; &lt;/Application.Resources&gt; You can then reference it like so: Visibility="{Binding IsHeap, Converter={StaticResource FalseToVisibleConverter}}" /&gt; 
&gt; what if you wanted an integer to dictate your control's visibility? Got you covered, https://github.com/Grauenwolf/Sails/blob/master/Tortuga.Sails/Tortuga.Sails.source/shared/Converters/NotZeroToVisibleConverter.cs
OnPropertyChanged() is part of the boilerplate for implementing the INotifyPropertyChanged pattern. If you're using an application framework, many ViewModel base types automatically implement it for you. If you aren't using one of those frameworks, or you can't derive from their ViewModel base type for some reason, you have to implement it yourself. The same goes for BooleanToVisibilityConverter. It's an `IValueConverter` with an implementation anyone who used WPF when it was new can write with their eyes closed. You end up using it a lot. So most MVVM frameworks include one as a convenience. But if you aren't using one, or the one you use doesn't have it, you have to write it yourself. When I last checked, UWP project templates come with dozens of helper files, that may be part of why you can use BooleanToVisibility without any other work. 
Thanks for your responses- I actually just realized that this: string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["nameofstring"].ConnectionString; Does in fact work the way I want it to. I thought it didnt because when I ran the project on my local PC it always used the default web.config no matter what configuration I had chosen, but I just found out that after you publish it it'll use whatever configuration you published as
I love this project! Please become a real product!
It doesn’t always no matter what. You can change your environment variable as you would on the server. Visual studio also gives you quick access to change it in your project properties 
It isn't even an optimization in this case. `short`s will usually be converted to `int`s when doing calculations on them, and they'll usually be aligned to word boundaries in memory so they'll often take up 4 bytes anyway. It only really makes a difference when you have an array of them, or a type containing multiple smaller fields.
I'm under the impression that Mono has fewer compatibility issues than .Core
Removed: Rule 4.
The #if functions like an if statement but at the compilation level. Since UNITY_STANDALONE is returning false, the else is compiling but because its not UNITY_STANDALONE. 
For more challenges, try /r/dailyprogrammer. Each week they post 3 challenges of varying levels of difficulty.
Here's a sneak peek of /r/dailyprogrammer using the [top posts](https://np.reddit.com/r/dailyprogrammer/top/?sort=top&amp;t=year) of the year! \#1: [DailyProgrammer is one of the Trending Subreddits for 2017-06-07!](https://np.reddit.com/r/trendingsubreddits/comments/6frugf/trending_subreddits_for_20170607_rdailyprogrammer/) | [7 comments](https://np.reddit.com/r/dailyprogrammer/comments/6ft754/dailyprogrammer_is_one_of_the_trending_subreddits/) \#2: [\[2017-06-27\] Challenge #321 \[Easy\] Talking Clock](https://np.reddit.com/r/dailyprogrammer/comments/6jr76h/20170627_challenge_321_easy_talking_clock/) \#3: [\[2017-07-07\] Challenge #322 \[Hard\] Static HTTP Server](https://np.reddit.com/r/dailyprogrammer/comments/6lti17/20170707_challenge_322_hard_static_http_server/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Ahh okay. For some reason I thought that if I am pressing play on the unity editor that it assumes I am playing on PC. So I have to switch back and forth in build settings from Android to Standalone...Kind of annoying.
I'm just trying to guess. Are you trying to make some sort of plugin feature where other user's code could be executed? I've had this use case in the past. There is no run time compiling involved. Using MEF. https://docs.microsoft.com/en-us/dotnet/framework/mef/ Plugin dlls get loaded up at runtime that implement an interface that you specify. 
&gt; Never thought I would say this, but tooling is one of the best things about the .NET ecosystem at the moment. Why not? Tooling for developers has always been one of Microsoft's biggest strengths. Visual Studio, intellisense, debuggers, documentation and other resources surpass any other ecosystem imo.
You can really cut down on the installation size in the visual studio installer. In the installer make sure you haven't selected any of the workloads so only the core components are installed. This installation looks to be only 2 GB. I know when I installed Enterprise, even then it was 20GB with a ton of extra packages, so no clue how you get 50+.
I clicked every box to see what what the size was and noticed it was going to eat up an massive amount of storage...that's when i realized I better ask the people who know C#. Cool I'll start there and see where it gets me Thank you!
Ill update the post to make it more clear later, but I said at the moment because when dotnet core first came out the tooling had all sorts of bugs (I personally had a number of issues with dotnet cli).
Js is playing second fiddle to C# when it comes to async support -- promises are a reaction to async/await. It's a hacked together, overextended, bloated mess, and the sooner it goes the way of the dinosaur, the better.
Yeah. The tooling was buggy as he'll until v.2.0
Add to what crogeniks said. It's also because mono is the only runtime with a commited support for wasm at the moment. CoreRT has plans to support wasm, but is still on the experimental stage unlike mono that is fully commited.
Not to mention the fact that it's just way easier to read async code in c# (imo). Not sure that there's a js equivalent to something like tasks; at least as far as readability goes. 
There is web workers for parallel compute and promises/native api callback for async. Nobody has shipped a unifying abstraction yet to my knowledge.
I love c#, visual studio (full and code), the .net framework, and SQL Server. I’m kinda sad that my current job is almost entirely in Linux and I don’t get to use the MS dev stack. I’m happy to not use Windows (licensing in a private cloud that is running on Linux is a nightmare). 
&gt; It's a hacked together, overextended, bloated mess, Agreed. &gt;the sooner it goes the way of the dinosaur, the better. Heh. Well... Yeah... Not arguing. It would be nice to have a better replacement... But it would also be nice to shitcan the Imperial system and do everything in metric in the United States... but some habits are difficult to kill for a wild-assed variety of reasons.
okay, im still having trouble understanding how the mask tells the program exactly which numbers are used though. I get it tells them how many numbers are used but not which numbers. &gt; int mask = keys[i] &amp; ((1 &lt;&lt; numbers.Length) - 1); How does this allow the computer to know that 3 and 4 are used when keys are 3 5 4?
That line of code doesn’t do that, because that line of code is encoding the desired final value, it’s not encoding a solution or partial solution. The line of code which says which numbers are used is: int newMask = (curMask | mask); This says take the current mask (which consists of some bits that are on, indicating numbers used in the left hand half, and some bits that are off indicating numbers *not* used in the left hand half), and combine it with another mask that indicates which bits are used in the right hand half. It does the combining with a logical | So if the equation is 5 + 3 - 2, then perhaps the computer has already worked out 5 + 3. It already has a variable that represents this number, consisting of the answer (8) and a bit mask showing that 5 and 3 are used. It also has an expression representing 2 that it created before it started from the input set of numbers - this expression contains the answer (2) and a single bit set in its bit mask showing which of the input numbers it is. Then, the line of code I’ve shown above combines those two bit masks. It takes a bit mask with 2 bits set, and a bit mask with 1 bit set, and (having confirmed already, using a different line of code that I pointed out to you yesterday, that there is no overlap between the bits set in each of the bit masks), it |'s them together to create a new bit mask with 3 bits set.
Yes, you can use tools like R-HUB remote support servers, teamviewer etc. for all your remote access and remote printing needs. They work well.
Well I know you can get 50+, I meant for a bare bones console app install that OP seemed to need. 
VS2010(windows form application .net framework 4.0) i am not using WPF so there isnt any XAML
It also had a REPL. Which I miss.
HoloLens?
You said in love again. Implying you loved C# before dotnet core. Surely you would have known it was an unstable, partially ported code base. Highly experimental even. So how would that made you not like C# knowing that? Very strange. Now. Yes. Now it’s powerful but the roadmap is bringing even more and how just loved C# and Roslyn before. Now am fanatic about it. Especially all the native Linux compiling and Linux available stuff. 
Instead of using the Checked property in these lines: sqlcom.Parameters.AddWithValue("Qns1", buttons.Checked); sqlcom.Parameters.AddWithValue("Qns2", button.Checked); sqlcom.Parameters.AddWithValue("Qns3", buttons2.Checked); Use the Text property (buttons2.Text, etc.)
It’s already real ? We are even talking about it 😋
At least the British moved away from measuring with feet. That was gross. It’s weird though when they measure small distances it’s centimetres and metres but look then they jump back to miles. Confusing as hell but everybody is doing it so it’s not that difficult. 
The Checked property tells you if it the radio button is checked or not. The text property gives you the text of the radio button.
Oh that actually solved the issue that i had! \&gt;:O
Problem Solved!
Great, glad to help
Who’ll?
it's real, but it is not a product
Damn you to he'll, grammar Nazi!