It's definitely more efficient but I'm talking about using pure LINQ for collection iteration.
I will quote your comment and post in InfoQ.
I have the same desire - more readable code - but I find the patterns more readable. As I have adopted a more functional style in my coding, I see how succinct yet easy to understand these patterns are (I can see the 'what') compared to mentally tracking through lines and lines of loops (which describe the 'how' and hide the 'what'). I welcome them.
Yes - that would make more sense!
Do you really prefer this: if (x is SomeClass) { var y = x as SomeClass; // some code } else if (x is ASecondClass) { var y = x as ASecondClass; // more code } else { // } To this: switch(x) { SomeClass y: // some code break; ASecondClass y: // more code break; default: // } really? The language is not becoming more bloated, it is becoming more powerful. And generally, 10 lines not only are beautifully, 10 lines are easier to mantain than 100 lines.
I agree, I don't know why people prefer more lines of code, it is ugly and hard to maintain.
If you want decent compression on small packets of data, you've basically got two good options: Huffman coding or pre-shared dictionaries. Brotli is a good example of applying both, focused on HTTP traffic. You're still going to have a hard time squeezing much compression out of 200 byte packets, though, particularly since TCP is going to add another 40+ bytes on top of that.
That example is fine. It is the examples full of _ and nested parentheticals that looks cludgy.
And use `Span&lt;T&gt;` instead of arrays.
I guess you mean someting like this: string SomeMethod(Shape shape) { return shape switch { Shape s when s.Size.height &gt; 100 =&gt; $"large shape with size {s.Size} at position {s.Position}", Ellipse e =&gt; $"Ellipse with size {e.Size} at position {e.Position}", Rectangle r =&gt; $"Rectangle with size {r.Size} at position {r.Position}", _ =&gt; "another shape" }; } IMHO, it is not hard to read at all, it is basically a "switch" but this time it return a value. It is really powerful.
It depends, if the syntactic sugar introduce something really powerful like pattern matching, it is really welcome. Also, IMHO less code is better.
I've never liked examples like this that simply switch on the type of the object. This is, quite literally, what object oriented languages were designed for. You can replace all of that with `x.DoWork(context)` and implement the logic in a virtual, overidden method for each class (with the base class implementation replacing `default`). You may have a challenge if you cannot edit `SomeClass` or `ASecondClass`, but I believe the [visitor design pattern](https://sourcemaking.com/design_patterns/visitor) was written for that case. Either way, it isolates type-specific implementation from the other type implementations.
Well, the exception is sort of self explanatory. You're using a variable (or parameter in this case) in an expression, without defining that variable in the same expression. Since it's a parameter it needs to be passed into the `Expression.Lambda()` call for it to be usable in the expression bdoy. You can't just forget to define a parameter there because then the signature wouldn't match, so I'm *guessing* you are creating two different `ParameterExpression` instances in different places. You must create a single instance of the parameter expression first and use the same in both `Expression.Lambda` and the expression body.
Hell yes, you can.
Well, the exception is sort of self explanatory. You're using a variable (or parameter in this case) in an expression, without defining that variable in the same expression. Since it's a parameter it needs to be passed into the `Expression.Lambda()` call for it to be usable in the expression bdoy. It's not possible to just forget to define a parameter there because then the signature wouldn't match and you'd get a different exception, so I'm guessing you are creating two different `ParameterExpression` instances in different places. You must create a single instance of the parameter expression first and use the same in both `Expression.Lambda` and the expression body, different instances of the parameter will not work even if they have the same type and name. 
So I believe I am passing the parameter in the Lambdas in both places: (The nested inner lambda) var selector = Expression.Lambda(selectorType, init, extractedDALTypeInfo.XParameter); (The main outer lambda) var lambda = Expression.Lambda&lt;Func&lt;TDALEntity, TBLLEntity&gt;&gt;(init, dalTypeInfo.XParameter); The even show up in visual studio debugging: {**dalGamer** =&gt; new Gamer() {Games = dalGamer.Games.Select(**dalGame** =&gt; new Game() {}).ToList()}} Unless you mean something else...should the above expression look any different?
I think it looks like it won't be in C# 8.0, but might be in the version after that (8.1?). Quoting from [language design meeting from June](https://github.com/dotnet/csharplang/blob/91ffdd2/meetings/2018/LDM-2018-06-06.md#plan): &gt; For now, let's mull it over for a couple of months, pursue information, crisp up the plan. Only after a while will we be able to free up compiler resources.
This is an example of what I mean: // this works var parameter1 = Expression.Parameter(typeof(string), "line"); var lambda1 = Expression.Lambda&lt;Action&lt;string&gt;&gt;( body: Expression.Call(writeLineMethod, parameter1), parameters: parameter1 ); lambda1.Compile(); // this will cause the error you're seeing var lambda2 = Expression.Lambda&lt;Action&lt;string&gt;&gt;( body: Expression.Call(writeLineMethod, Expression.Parameter(typeof(string), "line")), parameters: Expression.Parameter(typeof(string), "line") ); lambda2.Compile(); But as I said, I'm just guessing here. 
The easiest way to check for yourself is to use [SharpLab](https://sharplab.io/). It lets you easily compile code with a compiler from branch for any of the in-progress features. Specifically for this case, see [this code](https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLRIMaOQSwG4SoAOsMECAdsgD4ACATAAQDCAsAFADeHjvjtARgAMjAOoB7BAGtkACgDK8ACYQKMRsmWqYASkYBeAHwatajQHccMDAAtG3dnyfPOjeXCLk8OZJJCM8KAQND0YAXwNjABIAInlxAFsIcQoIEM8Eb2QIJUZgAE97ZA8wmIAaHmcqgH1IxjjE5NTGCAAbbIA6GMreAEgwgG4exmHBEQARcRQ1CWlZAAVyXwpGDOW9I1WllIsrW3thqt5XdwysvwCg9PC62PiklLTis58cvMLOZ9KKxyOnWs2DQezTanW6vz6gw4YQ4HAYjEWCGW9nCsPY8MUcBUZn8iOWHAcvVoAGYEdsVqcvD5JCiAOYQGADDQMpkw9hhIA==). Note that (after fixing the syntax) your code won't compile, because it does not introduce duck typing: if you use property pattern without specifying the type, it's assumed it's the same as the type of the switched expression.
&gt; shapes or whatever they are calling them in the upcoming versions They're calling them [roles](https://github.com/dotnet/csharplang/issues/1711) this month.
Yes. I forget that switching over object types is even a thing. I have not once found a valid use-case for it in C#. That's not to say that there is none, but personally I have a bit of a problem with people trying to constantly push functional patterns in to C#. If I wanted a more functional lang I'd use F#, but I don't because although FP has some great uses/ideas, pure FP is actually worse than pure OOP.
Good syntax sugar decreases cognitive load, because it lets you focus on *what* the code is actually trying to accomplish, instead of *how* it's doing it.
The reverse index operator seems wrong to me. Surely `myArray[^0]` should return the last element, not `myArray[^1]`...
This is still just the same example as the previous one. What they're complaining about is the weird pattern with (_, _, ("Something, _, _)) that was present in the article.
We use Hangfire for scheduling jobs at intervals or on demand. See hangfire.io . It's free too. 
How would you resolve such an error?
*Lots* of syntactic sugar *increases* cognitive load, by making the language itself *larger* and harder to learn. I think the issue is largely being overblown, here, but it's something to keep in mind.
Agree, the examples here should be fixed a different way. Switching on types has a bad smell to it.. What if you add a new type? Now you have to fix all your switch statements. Good luck finding them all at run time. Sure hope no one made a default: case anything but an error.. Better to have an interface and rely on the object to do the work. 
Do you use Resharper? I think it would pick up on this for you.
you can't honestly think thst fewer lines of code means it is easier to maintain. maintainability and lines of code are loosely correlated at best. 
you're missing that is statements can introduce a variable if (x is Someclass var1) { } else if (x is ASecondClass var2) { }
do people really have situations where pattern matching and ranges solve real problems? in my experience most systems are just moving data in its entirety from place x to place y. i never want to get elements 3 to 10 of a list, or switch on a customer's name if they work for a specific company. maybe im missing something but i dont see how this is going to be very useful. it is advertised as "powerful" but powerful to solve what problem?
powerful to do what? often times introspection like that is nested. you're going to wind up with nested introspections or duplicated pattern matches save one clause. its literally no different than if statements, with the exception of variable introductions. i can't come up with a situation where this is useful in real life. 
I was trying to do live streaming in a C# web app. After trying all sorts of libraries I settled on using Wowza Cloud Streaming. It’s not the cheapest solution, but it made the process super super easy!
then you wind up with perl. there is a limit to what is good. 
You need to create your own template and style. The best way to do this is to copy the templates and styles from Microsoft's documentation and go from there. https://docs.microsoft.com/en-us/dotnet/framework/wpf/controls/progressbar-styles-and-templates Take a look at the PART_GlowRect. That's what gets animated when it moves across to show progress. I'd start there and then look at StackOverflow for more concrete examples.
gimme them async generators. i have tasks that iterate over async work pools and it would simplify my life a lot to be able to yield return in an async context.
i am a little concerned that we don't have net standard 2.1 drafts or anything yet. c++ maybe isn't the poster child for ease of use, but the standard comes out *first*, and compilers/runtimes implement it over time. i don't have any insight into the core workings here but i hope they are taking standard seriously and will not just leave it at 2.0.
agreed. it's actually not entirely unlike c++ templates, where it will compile if the shape winds up fitting the contract. and it's all at compile time, so type safety is not an issue. it's almost a "compiler interface". it would be interesting if this sort of compiler interface thing could be a first class feature, though i have no idea what that would look like. 
Yeah I would love to not be working with RTMP/FLV directly. The FLV format is fairly well documented though so I'm making progress parsing it. LibRtmp was very useful and I borrowed an MIT licensed project which wraps it nicely. It doesn't do any parsing of the RTMP headers/packets though so that's where I'm at - trying to break up the stream into separate packets or "tags", parse them, and pull out the payload.
your first example shouldn't compile. it is an unassigned variable, checking for null would be forbidden. generally though, i like this idea. i think it would get some moderate usage, similar to ?.
Wrapping your model in view model class and exposing it publicly doesn't magicially make it a view model. Your view model should contain the properties you want to expose from your model as well as any view specific logic properties (i.e. IsSelected, ect.). You then apply changes made to your view model back to your model. It sounds like duplication but it will save you a lot of future headaches compared to using models and view models interchangeably. Your model shouldn't implement property changed your view model should so binding directly to your model is a bad idea. Not only that but binding to object that don't implement property changed can create memory leaks. Once you have a true view model you can base your data templates directly off from that type instead of trying to base it off from a property on the view model which is wrong.
wrt virtual, the clr does now take into account when a class is sealed (guaranteed no more inheritence in the chain) and will devirtualize method calls. this is fairly new. now sealed actually has perf benefits! i dont think there are many *bad* domains for c#. you can do very stack oriented programming with the new readonly struct feature in 7.(3?). hardware specifics, as others have mentioned, are in the works. the perf enemy you'll never be able to truly defeat is the gc. if your domain requires heap memory, you'll always have garbage collections. reducing allocations is paramount for latency critical scenarios. the clrs gc is very very good. but it still is both nondeterministic and pauses the whole world from time to time (not sure about server gc), so it can bite you.
trick for avoiding boxing on structs: generic method with constraints. public void MyMethod&lt;T&gt;(T thing) where T: IThing {} will not box. It only boxes when the struct is turned into an IThing. in the above, you just guaranteeing that the struct has those methods. reified generics ftw. 
Old-fashioned? This is old-fashioned :) [https://allgamesatoz.com/wp-content/uploads/Installation-2.jpg](https://allgamesatoz.com/wp-content/uploads/Installation-2.jpg)
got bit by a net core 2.1 bug today. worked in 2.0. new and shiny is a pain in the ass sometimes. imo benefits outweigh the problems, but damn it can be shitty when it is a framework bug. 
what is plc
what are your qualms with core? probably depends on your domain i suppose. for me it's worth fighting with the occasional instability because i want the clr, but i want to run it on linux (web servers). if java had async await i might use that.
they recently had a pretty nasty one for framework where they had to put out a comms saying "wait". something about COM activation but it affected sharepoint integrations so you know it was bad. 
If you want to hack this really fast without screwing around with control templates, create one image with all of the blue boxes filled out. Then create a second image with just gray area. Place the second image on top of 1st image, and align it to the right. Then you can adjust the progress by modifying the second image width. If you need the little squares to appear in discrete increments, then create a series of images with increasing number of blue squares, and set the image source to the required one, based on the desired percentage.
That's not as bad. I mean (from the article) case Employee(_, _, ("Stratec", _, _)) employeeTmp: { Console.WriteLine($ "The employee: {employeeTmp.Name}! "); } break; And I know that's not the only way to achieve a similar way, but the _ appearing in the code just isn't something I like seeing. Not necessarily the ability it provides, that's interesting and all, but just the way it makes the code look.
That sounds grossly inefficient.
I have no idea what kinds of everyday programming problems they think we have. If I see code specifically getting the 3-10 items in an array, I know I'm in for a bad time.
This is modern in the server world ;)
How so?
Where did I say I prefer a slew of if-else statements over a switch? It's stuff like this that I'm talking about, from the article: case (_, 43) employeeTmp when(employeeTmp.Name == "Thomas Albrecht "): Just looking at this line, specifically the first part, gives me absolutely no clue what I'm doing or what I'm looking at, until I look back at where the employee variable is declared and in which order the properties are set.
I use the more functional pattern matching techniques in Akka.Net based actor systems via the OnReceive method. The syntax is a natural fit for message-based actor systems. I think the benefits of more functional thinking / syntax gain greater value when systems are decomposed to support greater scale-out.
Programmable logic controller. Arduino could be understood as one. Thinks of Arduinos controlling power plants, Scadas, supply chains....
&gt;easier to maintain it is not only less line of code. It is more human readable and more familiar, for example you have learn in the school in math the range opreator 1..n means the natural numbers and in the Cartesian coordinate system you have learned (1..5) or \[1..n) etc. That way. 
I find that the tooling is a lot less mature. I feel like I run into as many VS bugs with a .NET Core project in a month as I've run into with .NET Framework in a year. (Part of it may be that I've just gotten used to the bugs .NET Framework has, and intuitively work around them.)
Why would user controls break mvvm? Combined with data templates they are a core feature of it.
I can't help you with the LZ4 compression part, but you mention that quite a big chunk of your packets is transform related data. If you don't need the full precision of a float, you could maybe store multiple floats into a single float. Here's an example for Unity3D (which I think you're using): https://stackoverflow.com/questions/17638800/storing-two-float-values-in-a-single-float-variable
Thank you for the suggestion! You've actually read my mind, I plan to cover Autofac in a near future article. 
You can't access the model because you're overwriting DataContext in your UserControl. Either get rid of your ViewModel, or add a dependency property in your usercontrol. If you add a dependency property called 'Model', you can use this syntax: &lt;ListBox.ItemTemplate&gt; &lt;DataTemplate DataType="ListItemModel"&gt; &lt;local:ListItemView Model="{Binding}"/&gt; &lt;/DataTemplate&gt; &lt;/ListBox.ItemTemplate&gt; When the value of your dependecy property updates, you set the value of 'Model' in your ViewModel.
Loading image from disk if it can be easily drawn in vector graphic doesn't sound efficient. Also you have to make sure that the image is properly distributed with the code. Scaling image instead of moving vertices of square doesn't sound efficient either. It is not like you would notice on today's computers as there is only one progress bar at the time, but in principle it is inefficient. 
I'm new to all of this. I thought in mvvm it's not a good practise to have logic inside the view. In my CustomControl I would need some logic to check if a Key is pressed and convert MouseWheel movement to values. Wouldn't that be considered breaking the pattern? 
the \^ opreator means from behind! give me one item from behind
* Are you simulating the game on the client PC well enough? Is the AI deterministic? Can the client simulate the AI if it has the initial state (position, health, enemy type/id, etc)? If you can make your client software smarter you 'only' have to verify the client's game after to check possibility and authorization. Things like `entered a player buff aura` or `follow this vector3 array path` shouldn't be a packet. The client and server both should do the collision check locally based on the already known state as much as possible. * As there are many objects I imagine you need to send a lot of object IDs because they changed state. You might be able to shorten the IDs if your game world consists of recursive cells (like a quadtree) so that you can switch a player's current cell or zone when it moves out/into another. Every networked object id in that zone is numbered from 0 and cannot move outside that zone without being assigned a new id. I think you can make an ID 2 bytes or less with this approach. There are probably better structures for good object locality besides dividing your world into square cells (think about world events with a lot of players in one spot) so you might want to look into that (world instancing? circle cells?).
Not very sure about WPF, but in Forms I'd create a custom control and implement custom painting methods. The jist of it is just getting the colors down as well as some images that can be statically loaded on initialization, perhaps on a separate thread. 
i could hear the hard drive crunching and the floppy drive pzrrrrrning
Currently fiddling around with Avalonia UI, any ideas on how I could add some sort of Icon to a TabItem? Thinking into new code bases especially when theres still not too much of documentation just hurts my head sometimes :D I basically plan to implement a docked sidebar like the ControlCatalog does, and add some material Icons to the side of that... First thought of creating a new control, but that didnt seem to work at all because the framework complains about missing Xaml, which I don't know how to layout due to lack of docs. Adding a kind of Xaml style thing didnt work out eighter: ```xaml &lt;Styles xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" &gt; &lt;Style Selector="TabItem.file"&gt; &lt;Setter Property="Template"&gt; &lt;ControlTemplate&gt; &lt;image source="resm:Editopia.Editor.Assets.outline_folder_black_36dp.png" /&gt; &lt;/ControlTemplate&gt; &lt;/Setter&gt; &lt;/Style&gt; &lt;/Styles&gt; ```
&gt;if you want to hack this really fast
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [How would I enable system.diagnostics of a dll used by an executable?](https://www.reddit.com/r/dotnet/comments/921iqu/how_would_i_enable_systemdiagnostics_of_a_dll/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I'm still not convinced I'm afraid. I don't mean that I'm not convinced at all. I can see merit in what you're saying, and I agree with some of your examples, but I think once you get too evangelical about it, it adds more complexity than is justified. But I look forward to your follow-up article, and I hope it can fill in the gaps well enough to bring me around!
It is not DRY, but how much syntactic sugar you can add before breaking KISS? Not saying it shouldn't be added, but there is always a trade off.
Unfortunately not!
Great, now if I could actually get an answer in either of them... :p
\^ should mean last. `myArray[0^]` or equivalently` myArray[^`\] should be the last element.` myArray[-1^`\] should be the element before the last element.
that's strangely genius!
It might just be your monitor?
The question was why it is not efficient not whether it matters. 
I thought that at first, but it's a bit odd that programs like Visual Studio and Photoshop don't have this issue (believe me, I've measured down to the pixel). Also, there is no reason the program should be clipped on the bottom when the taskbar is being displayed below that. I have googled the issue and tried a few proposed solutions. Some people said it's because when a Window is maximized its border is included in the calculation of the size and displayed in such a way that the border will be displayed off-screen, but I tried settings the BorderThickness to 0 with a WindowState Maximized trigger and it doesn't seem to make a difference.
If it helps: [https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/how-to-call-custom-database-functions](https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/how-to-call-custom-database-functions) I've done something similar but not with postgresql. You simply make visible the sql function to entity framework and then you are able to call it like with any other function.
This has always happened, at least back until Windows 95 or so. The maximized window fits the screen by being *larger* than the screen so that the window borders are outside the screen (and for multiple screens those borders are clipped as well that you don't see them on adjacent screens). Visual Studio doesn't use the window style with borders, it's completely drawn with WPF, including the title bar, so from Windows' point of view there is no title bar, there are no window borders, so the whole window is the client area (which isn't quite correct, but it's as much as the OS can know about the window). Further reading: [Why are the dimensions of a maximized window larger than the monitor?](https://blogs.msdn.microsoft.com/oldnewthing/20150304-00/?p=44543) You'll also note a lot of bugs with maximized frameless windows (which seem to be popular these days since it's cool to draw in the title bar or replace it completely, I don't know) on multi-monitor setups. Chrome for example is correctly clipped to the monitor it's on when maximized, but since the window frame extends to adjacent monitors and they do stupid things, apparently, the mouse pointer changes to a resize cursor close to the monitor border.
I think that's just poorly written. Something like `{PropertyName {SubProperty: "Something"}} ` should be preferred for that case.
I'm not sure this will help, but I know the window borders and title bar in WPF are in the non-client area. Styling these areas usually relies on setting `WindowStyle` to `none` and then implementing your own title bar and functionality. Perhaps this is what Visual Studio and Photoshop have done. If this is just a problem on your machine, perhaps using the techniques described [here](https://stackoverflow.com/questions/6032032/how-do-i-compute-the-non-client-window-size-in-wpf) (first and second responses) might help find answers?
I remember when they used "| / - \ | / - \" spinning to make a progress indicator. Good times.
Yeah, that seems better.
I don't think there's any issue here. The maximised titlebar in Windows is supposed have less padding in order to be smaller. Programs that draw their own customized title bar, like Visual Studio, don't have that behaviour unless they're specifically coded to do that (like Chrome and Thunderbird for example).
Ouch, I was afraid something like this might be the case. Setting WindowStyle to none and reconstructing the entire border in WPF isn't a great solution for me because it also strips out the min/max/restore animations and I haven't been able to find a good way to restore them. I think it might be possible but probably requires a strong knowledge of the Win32 api and overrides. Right now I am using the WindowChrome class and it's almost a perfect solution. I guess I will just have to avoid placing any controls within a ~16 pixel margin of the edges of the form unless I can find a decent solution that isn't too hacky.
My preference for that example; case {Name: var name, Company: {Name: "Stratec"}}: { Console.WriteLine($"The employee: {name}!"); } break; Currently I'm looking at discards in unpacking/object deconstruction as a code smell, suggesting you need a different return or a method overload or something. It's an extra load to look up what is being returned already, let alone having to count arguments to see which are being kept. I want to see where tooling goes in the future though.
Yeah, I've been trying to find a way to make what I consider to be a perfect customized window in C# WPF for over a year now. Setting the WindowStyle to none and rebuilding the whole thing is the first thing I tried and it works great, but unfortunately you lose the standard windows min/max/close/restore down animations and transitions. It probably seems nitpicky to care and it's not a huge deal, but I would like to have a fully customized non client area that actually fits the screen properly while keeping the animations. It may also be possible to reconstruct the animations in WPF but I am not that skilled in WPF yet to do it.
I agree. There's many more ways it will be wrong/confusing/prone to maintenance issues than ways in which it provides the most benefit. Especially with some of the other equivalent features such as your example or the 'when' guards. 
I don't think so. At best it is a Microsoft bug. Even the bottom of the form above the taskbar is clipped by a few pixels and the right side of the close button has ~2 pixels of whitespace when maximized.
Do you know what is the name of such style? block-by-block?
My property doesn't seem to set. &lt;ListBox.ItemTemplate&gt; &lt;DataTemplate DataType="ValueConditionModel"&gt; &lt;local:ValueConditionView ValueCondition="{Binding}"/&gt; &lt;/DataTemplate&gt; &lt;/ListBox.ItemTemplate&gt; public static readonly DependencyProperty ValueConditionProperty = DependencyProperty.Register("ValueCondition", typeof(ValueConditionModel), typeof(ValueConditionView)); public ValueConditionModel ValueCondition { get { return (ValueConditionModel)GetValue(ValueConditionProperty); } set { SetValue(ValueConditionProperty, value); Console.WriteLine(value); } } The view is being created, but nothing is printing.
https://stackoverflow.com/a/28302378
'Segmented' would be my guess.
Interesting. Do you have a link to the implementation you are using?
The RTMP server I'm using is Linux based and compiled from here: https://github.com/ossrs/srs The wrapper for LibRtmp I'm using for now is borrowed from this DR NU Downloader git: https://github.com/stefanlyager/DrNuDownloader If I can eventually figure out how to host my own RTMP server using LibRtmp or any other RTMP library, I'll post it here.
Thanks. I think [this](https://github.com/ossrs/srs/wiki/v1_EN_SampleRTMP) could describe it. A file probably needs to published (live?) so that it can be played.
Look into \`WindowChrome\`. It solves all your problems and it's the official/standard way of fixing the extra pixels issue. Read carefully this page. It has all the info you need including examples and explanations: [WindowChrome](https://docs.microsoft.com/en-us/dotnet/api/system.windows.shell.windowchrome) 
I have SRS up and running on a VPS and receiving live streams from my Mavic Pro and from the desktop recording/streaming program OBS when I don't feel like starting up the drone. I'm using LibRtmp to connect to SRS to pull the live stream. The RTMP payload is essentially just an unending FLV file, but I haven't come across a library to simplify parsing of a variable length FLV stream so I'm working out how to parse the FLV packets so I can extract the h264 data. My parsing is a bit messy right now since I'm just prototyping and trying to get it to work. But it's mostly working.
Pattern matching I absolutely *love* in languages that do it well. I love it in F#, although I don't use F# very much. But I use Erlang and Elixir a lot and pattern matching is an essential feature of those languages. After using those and then going back to some complex code in another language, I miss it a lot. How many times have you seen or written code that has a lot of very complex conditional logic in a method? Lots of checks and early exits, or worse maybe some deeply nested `if` statements or something? Pattern matching can potentially help make that sort of code much more readable and understandable. Regarding ranges, that's something I'm happy to see in C# even though it's not something I've had to do very often. I think every time I've ever wanted to do stuff like that was when I was writing some kind of script that processing a lot of text/strings, not really "application" type code that I usually use C# for. One place where I could see this possibly coming in handy is if you're doing some NLP/deeplearning work. Right now that sort of stuff is almost universally done in Python, but it could be that Microsoft wants to work on some NLP libraries for .NET and they want to make C# suck less for processing text. I have no inside knowledge of such things, that's just a shot in the dark guess.
I am already using WindowChrome to extend the client area into the non-client area, but I still have an off by 8 pixel issue all around the form when the window is maximized. I assume these are the pixels that would've been occupied by the border if it hadn't been removed by the WindowChrome class. If I create a border around the form with 8 pixels of padding, the form maximizes perfectly. My WindowChrome code currently looks like this: `&lt;WindowChrome.WindowChrome&gt; &lt;WindowChrome GlassFrameThickness="0" CornerRadius="0" CaptionHeight="34" UseAeroCaptionButtons="False" ResizeBorderThickness="6"/&gt; &lt;/WindowChrome.WindowChrome&gt;` I've read that a few times and don't see anything that would immediately help me. Am I overlooking something or does the fact that I'm extending the client area change things? Thanks
Thank you for being willing to help, but the problem has ended up being moot. The browser on the device we're using doesn't support jQuery, let alone SignalR. So, my team is going to have to find another solution anyways. --- But to answer your question, the start and stop were in the `Global.asax` under `Application_Start()` and `Application_End()` respectively. I'm kind of bummed I don't get to continue figuring this out.
Maybe I can help you a little with that. If it's FLV, then the first byte in each packet should be 0x9 for video and 0x8 for audio. Followed by 24-bit data size. The H.264 data is stored in Annex-B meaning that it will start with 00 00 01. 
The overall structure of the class is organized, but I would check to see if every property needs to be public. Also, `mouseButtonStatemouseButtonState` doensn't appear to be used anywhere.
Especially on bulletin board door games. 
This is not possible for security reasons as far as I know. The only way to change it could possibly be via CPL DLL and some magic ordinal values.
I agree, this does not seem possible.
Thanks! I couldn't make sense of this comment until I read the FLV specification from Adobe instead of Wikipedia. The Wiki version is missing a reserved byte in the start of FLV tags, and doesn't mention that the first byte of the payload is 0x8 or 0x9. Seems odd for the payload to have a header like that when the tag header already has the same TagType indicator. 
[Here](https://www.codeproject.com/Questions/502953/C-plusTraceSourceplusfromplusdifferentplusassemb) someone had a different problem. But I noticed they had used a &lt;sharedListeners&gt; tag aswell. Maybe that is worth looking into.
The file itself has a channel description if that is what you mean. Then the audio and video is kind of interleaved so that the timings are adjacent to each other. This is probably helpful when reading from a file, so that seeking can be minimized. If you want to put it up on github, I'll work with you on it.
None of the things you mentioned do boxing :)
You should name your members and variables so we know the intention. Anyway, you can create your own value type and use that for the key. public struct MyValue { public static readonly MyValue Empty = new MyValue(); public string Value1 { get; } public string Value2 { get; } public MyValue() { Val1 = ""; Val2 = ""; } public MyValue(string val1, string val2) { Value1 = val1; Value2 = val2; } public override string ToString() { return Value1 + Value2 } public override int GetHashCode() { return ToString().GetHashCode(); } public override bool Equals(object obj) { if (obj == null) { return false; } if (obj is MyValue myObj) { return (Value1 == myObj.Value1 &amp;&amp; Value2 == myObj.Value2); } return false; } } Usage: var dict = new Dictionary&lt;MyValue, string&gt;(); dict.Add(new MyValue("val1", "val2"), "ret"); var myKey = new MyValue("val1", "val2"); Console.WriteLine(dict[myKey]); And voila. Note that I had to use variable names that you used so you know how the above maps to what you are doing but I still have no idea what the context of this code is.
 Not only do I disagree with that, that changes absolutely nothing of what I said.
Cool, it will take me some time to get something together that I can publish. I finally have it parsing the FLV tags properly. It took some trial and error for me to figure out the right way to parse the big endian uint24's (wth) so I could accurately read the payload sizes.
Have a look at this query in Linqpad, it will show you the SQL generated. The first thing you will notice is that those subqueries are being executed once for every record returned, so in essence you are executing 130 * 2 queries for those subqueries. It would be more efficient to select your data as an IQueryable, then run those subqueries as a single statement which returns all the required data by joining on your initial IQueryable result set. From there you can ToList() everything and created your Status and Urgency collections in a simple foreach loop. Sure it won't be as pretty but it will be much faster.
Do you have a shadow or blur or glow or some other effect on your window? That might be what's in the gap, it's just not noticable. I remember having a similar issue, and I also remember resolving it... but I feel like I just had to adjust the window size when maximized.
The DRYer the better!
And it is thanks to pattern matching.
Quite right - fixed.
Does .Get() return an IEnumerable or an IQueryable? Because it should definitely be the latter. Is there one Status and Urgency record per Request, or are they used like enumerations where every request with the same status is pointing at the same Status record? If the latter, it's probably best to cache those in an in-memory dictionary, since those types tend to not have new records added to them at runtime. If the former, you'll want to use joins in your query before you try to Select.
The best solution I found to this was to add 8px of padding around the edges when it's in fullscreen or doing the whole ui custom and then have custom buttons to trigger the default min-max-close buttons.
I think I found a solution but I'm having trouble implementing it. The extra 8 pixels of padding seems to be coming from a combination of SystemParameters.WindowResizeBorderThickness and SystemParameters.WindowNonClientFrameThickness. Joe Castro's solution at the following url works: https://stackoverflow.com/questions/2967218/window-out-of-the-screen-when-maximized-using-wpf-shell-integration-library/2975574#2975574 Hard coding a value of 8 works for me since I know the window is off by a value of 8 pixels, but for it to be dynamic with other resolutions I will need to bind a new Thickness property as indicated in Shaun Lammers' post. I am not good with data binding yet. I am sure I can get it eventually but it will take some time unless someone knows of a way to either assign a value that is a sum of SystemParameters directly in the value property in the XAML or has an easy way of binding the data from the code behind? I don't think I can set the Binding in this case because the Setter property I need to modify belongs to the DataTrigger which is already bound to the window so it can adjust the border size when the window is maximized. Thanks for the help
An IQueryable will execute the subquery for every single record returned when enumerating as you call ToList(). That is where the performance issue lies.
&gt; i never want to get elements 3 to 10 of a list, or switch on a customer's name if they work for a specific company. What? do you know what a business logig mean? there are a lot of requeriments in several companies with examples like that.
&gt; An IQueryable will execute the subquery for every single record returned when enumerating as you call ToList(). So will an IEnumerable. At least with an IQueryable, you can do the join in the database and get back only the relevant records from the join table.
no its not. it is regular type casting, not pattern matching. 
Use a \`\[Flags\]\` enum if you think the string values would fit as enum members. Consider a scenario in which you own a restaurant. You only sell fries, burgers, and wings as well as combinations of those. For example, someone can buy just fries, they can buy the burger meal which includes a burger and fries, or they can buy the Heffer meal which includes fries, a burger and some wings. Part of the software you would author to manage such a restaurant includes mapping products to prices. One example of how to do that is as follows: \[Flags\] public enum Products { Fries = 1, Burger = 2, Wings = 4, } The above is a \`\[Flags\]\` enum which is a special kind of enum. Each member has to be a power of 2 (and you normally don't define an enum member with a value of 0). Basically, you can combine members of this enum to form yet another enum of the same type. Example: Products friesAndBurger = Products.Fries | Products.Burger; The \`friesAndBurger\` is of the enum type \`Products\` but it consists of \*both\* fries and burgers. The bitwise OR operator \`|\` is basically adding/concatenating the two enum instances together to create a new one. The integer value of friesAndBurger is 3, even though you didn't define an enum member with that value. Since a \`\[Flags\]\` enum's members are powers of two, there is only one way that a \`Products\` enum could have a value of 3 -- it includes both the fries and burger. We can leverage this for mapping products to prices, show here: class Program { static void Main(string\[\] args) { var prices = new Dictionary&lt;Products, decimal&gt;(); var fries = Products.Fries; var burger = Products.Burger; var wings = Products.Wings; var burgerMeal = Products.Burger | Products.Fries; var wingsMeal = Products.Wings | Products.Fries; var hefferMeal = Products.Wings | Products.Burger | Products.Fries; prices.Add(fries, .99m); prices.Add(burger, 1.39m); prices.Add(wings, 5.25m); prices.Add(burgerMeal, 1.99m); prices.Add(wingsMeal, 5.99m); prices.Add(hefferMeal, 6.99m); Console.WriteLine($"Fries: ${prices\[Products.Fries\]}"); Console.WriteLine($"Burger: ${prices\[Products.Burger\]}"); Console.WriteLine($"Wings: ${prices\[Products.Wings\]}"); Console.WriteLine($"Burger meal: ${prices\[Products.Fries | Products.Burger\]}"); Console.WriteLine($"Wings meal: ${prices\[Products.Fries | Products.Wings\]}"); Console.WriteLine($"Heffer meal: ${prices\[Products.Fries | Products.Burger | Products.Wings\]}"); Console.ReadKey(true); } } The more enum members the \`Products\` enum has, the more varied combinations you can make. So, if you actually need strings like \`val1\` or \`val2\`, then this won't work. However, if the purpose of those strings could be better served as enum members, then the above example would work best. Another option is to define your own key type that overrides the ToString, GetHashCode and Equals methods (if and only if you don't want to use tuples). A struct would work best for that, I think, as opposed to a class. Hope this helps.
youre talking about "business logic" like it is some mythical thing. just saying "business logic" isn't an example of anything. saying "requirements in several companies" isn't an example of anything. your example that is "not strange in code" is completely contrived. feel free to try again.
It returns IEnumerable. The latter assumption is correct for Status and Urgency. Each request references 1 status and 1 urgency. So the list of statuses is about 4, and each request has one of those status at any given time. You are right though, the list will probably not change very often at all. I'll look into caching those in the best way.
This was where my thought process was going when I was typing this up. Thank you for the clear answer and providing an example for me to build upon!
gotcha. 
I don't know if you are using Entity Framework, but the official MSDN link on the topic is here: [https://msdn.microsoft.com/en-us/library/jj574232(v=vs.113).aspx](https://msdn.microsoft.com/en-us/library/jj574232(v=vs.113).aspx) It shows how you can call .Include&lt;&gt;() on your IQueryables so that they run the join instead of running a query to dereference every related entity (otherwise known as the N+1 query problem), and it also shows how you can forbid EF from lazy loading at all. This would turn this bad performance into an error, making it impossible to do by accident.
I'm not a fan of this because you will have to manually return buffers to the pool. 
Just to clarify for myself. The allRequests query above; is that missing a type in your example? If it is, then what becomes the purpose of the result query? Could I just use the allRequests List&lt;RequestBrowseModel&gt; to iterate upon?
&gt;should that be done in my main controller The only thing a controller should be responsible for is passing arguments to services and turning things returned from services into http responses. If you don't know the right place to do something, create a new service for it; you can always merge things later if you find that one service is literally always used immediately after another.
Ahh, I am using EF! This might be another way, thanks.
This post makes me so sad. First of all it has the worst kind of repositories - those which return IQueryable or accept Expression and second it fights so hard to make a query to a non-entity. If you spend more than 30 minutes trying to get LINQ to do what you want then you should simply fall back to SQL.
Without seeing more of the data, it would seem like you want to: data .GroupBy(d =&gt; d.UserName) .Aggregate((current, total) =&gt; { total.Role = total.Role + ", " + current.Role; total.RoleD = total.RoleD + ", " + current.RoleD; } Or something similar, not a whole lot to go on.
Firstly, get over yourself, i'm trying to understand why its slow. Secondly, instead of complaining how about you help me so I understand. My repository doesn't return an IQueryable it returns an IEnumerable. And i'm not sure what you're talking about with the query to a non-entity? Everything I've mentioned above IS an entity. Care to actually contribute?
I think I got what you wanted in this screenshot: [LinqPad](https://i.imgur.com/Z9FITrp.png) void Main() { var myList = new List&lt;MyObject&gt;() { new MyObject() { UserName = "ben", Fun = 0, Role = "First Mate", RoleD = "FirstMate" }, new MyObject(){ UserName = "ben", Fun = 0, Role = "Captain Ben", RoleD = "Captain Ben" } }; myList.Select(o =&gt; new { Username = o.UserName, Role = myList.Where(o2 =&gt; o2.UserName == o.UserName).Select(o2 =&gt; o2.Role).Distinct(), Fun = o.Fun }).Dump(); } public class MyObject { public string UserName { get; set; } public int Fun { get; set; } public string Role { get; set; } public string RoleD { get; set; } } 
To modify this a bit, I would do this: myList.GroupBy(d =&gt; d.UserName) .Select(g =&gt; g.Aggregate((current, total) =&gt; { total.Role = string.Join(",", total.Role, current.Role); total.RoleD = string.Join(",", total.RoleD, current.RoleD); }) 
Yes. But the question is how much honesty is reasonable? I think it is more than many people think.
I'm not talking about BL like something "mythical", I'm talking about something real. I give you an example of business logic (the payment/checkout class) where pattern matching is used, it is simple example, but useful in business domain. There are a lot of examples of business logic using F# and pattern matching. PM is something new in C#. https://fsharpworks.com/articles/six-years-of-teaching-fsharp.html http://blog.tamizhvendan.in/blog/2016/04/28/expressing-business-logic-with-f-number-s-partial-active-patterns/ 
 My repository doesn't return an IQueryable it returns an IEnumerable Hmmm... then not only the original query but also all subqueries will pull the full tables from the database to your .NET app and then process them. LINQ only generates SQL (or whatever target language) if it is applied on IQueryable with IEnumerable it is just loops.
No, you are wrong, this is type casting: if (c is SomeClass) { var var1 = c as SomeClass; // ... This is patther matching: if (x is Someclass var1) { https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching
That's is a really ugly example, but Pattern Matching.
&gt;.Select(o =&gt; new { Username = o.UserName, Role = myList.Where(o2 =&gt; o2.UserName == o.UserName).Select(o2 =&gt; o2.Role).Distinct(), Fun = o.Fun, RoleD=myList.Where(o2 =&gt; o2.UserName == o.UserName).Select(o2 =&gt; o2.Role).Distinct() }).Dump(); Thank you, this answer got me there. : )
You're very welcome. I'm glad I could help!
&gt; it would be replaced by a more diverse and language agnostic system, and not a specific language. Like WebAssembly
&gt; B) Xamarin uses Blazor as an inspiration to create a "web" or "browser" deployment target. (this one feels like a probable scenario) Oh yeah, few things are guaranteed in this world, but this is one of them
One thing I'm trying to figure out though. How can I make it so that it returns one object per username? Distinct doesn't seem to be affecting it at all.
I think MoreLinq can help you. You want to be able to call Distinct based on the UserName property (after the query I wrote). https://stackoverflow.com/a/489421/2375591 
Hey this is really cool. I’ve come across this type of flag with the UserAccountControl attribute in AD. I didn’t realise there was such an easy way to implement it. I’ll definitely remember this for future use. I don’t think it’s that suited to what I have to do this time because the values I’ve got don’t have a name. There is no burger, there’s only 214768489 etc
I kind of feel like it should become a WPF, .NET challenge: write programs that look &amp; act as old as possible, while still accomplishing modern tasks.
(This is off-topic, but worth mentioning. I've done a ton of WinForms and made the mistake of investing in WPF, so I can explain.) WPF is a very different beast. The concept of doing raster graphics onto a Bitmap is *almost* not supported. WPF is more about composition. You don't draw a rectangle, you tell WPF there's a Rectangle element somewhere and it draws it as needed. But I bet the answer is similar. I mean, sure, in WinForms you could calculate a lot of small rectangles for the visible part of the progress bar. But it'd be smarter to just fill that rectangle with a TextureBrush, tweaking the image a bit so it fit and tiled correctly. In WPF, the ScrollBar has a template that defines all the bits that make up the ProgressBar. One of those parts is a Rectangle that is resized to proportionally fill the width. So if it's reconfigured to use whatever WPF Brush type is analogous to TextureBrush, it'd behave the same way.
The N+1 problem is a very common problem for beginners to stub their toe on, in pretty much every ORM, I originally got burned using ActiveRecord in Rails. I would really recommend turning lazy loading off for a while so that you're forced to get a feel for how performant Linq tends to be structured. According to the article I linked: public class BloggingContext : DbContext { public BloggingContext() { this.Configuration.LazyLoadingEnabled = false; } }
What you're going through sounds familiar. I know I solved this problem, so you're on the right track.
I have never seen an instance where there was debug statements and they didn't show up when debugging. Are you sure they are included in the DLL? In my case i use Log4net and write to it, so you wouldn't see my logs unless you configured it to then send that to the debug window. Maybe the DLL does something like that?
You could add a reference to PresentationFramework.Luna, then extract the style of the progress bar in Blend and go from there.
&gt;//This class is the same as Request but with only the properties I need for the VM, should I just use the Request class? Depends on what you're trying to accomplish. Using the original class makes coding easier. Using a more specialized class can have various merits, but you're probably thinking in terms of performance here. Creating a class just to represent fewer properties than a different class will mainly benefit you in terms of memory, and I doubt that's the problem you're running into here. So, yes, you should probably just remove your redundant class. Or, if you do have it, why not give it a real constructor while you're at it? &gt;curUser.GetName(x.Author) I don't know what `GetName()` does but it sounds like you're hitting the database for every single row here. You should join this instead, or prefetch all possible names. &gt;like a shit ton of requests for each resolution of the ID's for Status and Urgency properties. I'm not sure how else to do that part. Pull the list in a different query then just use that list to resolve? So its only hitting the db once? Exactly. That's one approach. Another is to try to join. &gt;There must be something else going on, as I have stripped the query to literally just the below and my timer still returns 6.high seconds. I don't know enough about your project. Does `Get()` actually fetch the data? Or is the data not fetched until `ToList()`? Is `GetName()` turned into SQL? Either way, you're doing way too much in one statement here.
Regular for loops are faster, as a foreach loop has to create an enumerator of the enumerable (which has to be GC'd).
`System.Diagnostics.Trace.Listeners` provides a public, static `TraceListenerCollection`that you can modify. This can be done with XML as you're doing there, but you can also modify and view it directly from code. I do this sometimes if some library I'm using meddles with the default `TraceListener`s in a way that I don't like (such as the .NET Framework OWIN self-hosting libraries). `TraceListener` instances can be added via the `Add` instance method on `TraceListenerCollection`, and you can also `Remove` instances with a reference to the instance, or by using a string that corresponds to the `Name` of the `TraceListener` instance. This only affects what instances receive the calls to `Trace`, so if your library doesn't actually use `Trace` to output messages, you'll need something else. 
Define a custom logger that never is destroyed? https://stackoverflow.com/questions/17023966/how-to-create-custom-level-in-log4net
Massive help man, thank you so much! I'm definitely going to look into the .Include() strategy which might involve restructuring of my entities, which is probably for the better! In the meantime i've implemented your join approach and am seeing ms responses!
Thanks i'll take the class comments into consideration. Yea it seems GetName() is another thing I'll need to refactor. Basically it queries AD to return the Identity of the user based upon the domainID. Here is my repository Get() method. From my understanding the deferred execution is still occurring in the controller, the Get() method just applies any additional parameters to the query before calling the .ToList() (in the controller). As Wisp558 mentioned I could use the include parameter here to take care of my joins for me. But first I'll need to arrange my entities around a bit. public virtual IEnumerable&lt;TEntity&gt; Get(Expression&lt;Func&lt;TEntity, bool&gt;&gt; filter = null, Func&lt;IQueryable&lt;TEntity&gt;, IOrderedQueryable&lt;TEntity&gt;&gt; orderBy = null, string includeProperties = "") { IQueryable&lt;TEntity&gt; query = dbSet; if (filter != null) { query = query.Where(filter); } foreach (var includeProperty in includeProperties.Split(new char[','], StringSplitOptions.RemoveEmptyEntries)) { query = query.Include(includeProperty); } if (orderBy != null) { return orderBy(query).ToList(); } else { return query; } }
Glad I could help! I've been mucking through the .NET ecosystem for the first time recently so this is all fresh on my mind.
**pattern matching** sometimes methods don't belong on the objects themselves, eg it's not uncommon to look at the datatype / data to then decide which class to use as a renderer for it. You could put this as a method on the object itself but then you're tying rendering code to the data objects which can make them overly complex (especially if you're dealing with multiple frontends eg iOS, Android and Web sharing the same objects). Simple pattern matching (C# 7) can be a nice alternative for this, I don't know a reason for the crazy c# 8 pattern matching yet but I'm sure it'd make some situation nicer (although probably shouldn't be used that much). **Ranges** I can see ranges being nice by themselves - it's a bit odd when used in an array but I guess it could be useful for string manipulation. 
/r/codereview
It seems accessing the dbcontext directly is faster than using my repository by a substantial margin. My repsistory was built with generics in mind so maybe all the overhead of obtaining the dbset and assigning a context, etc could add up? Any thoughts on that if you don't mind? I can share the full unitOfWork and Repository classes if that helps. Also that's superb man. What environment are you coming from? I've just started really getting into .net as it's my first but have been diddling for the past year.
https://docs.microsoft.com/en-us/dotnet/core/tutorials/
The framework for writing web applications in .NET is ASP .NET. It has two flavors right now, ASP .NET Core is the cross-platform one. So in the New Project dialog, look under ".NET Core", then "App", and choose one of the "ASP .NET Core" project types. I have no clue which one you need.
Hmm
If you already have 'regular .NET' experience, just make a small .NET Core side project. In my opinion they are more motivating and present more real world struggles than tutorials/books do. For example, create a RESTful API for a ticket system, you could include other goals/techniques like JWTs, EF Core, and so on. Then build a simple .net core command line tool to consume/test the API, or just include Swagger in your ASP.NET project:)
Learning .NET core from .NET framework is pretty trivial, you can have the key details down in a weekend. Instead you need to be looking into moving into ASP.NET MVC from ASP.NET WebForms. Honestly you can even forget about core for now, the move into MVC is large enough that you'll have your hands full for a while. Note: There's also an ASP.NET Core, they both have MVC.
not on plain arrays, try it. 
Hasn't been up on stack for too long, but maybe someone here can spot the issue.
My professional background is largely in Ruby and to some extent Java, but I've been a dabbler in a whole bunch of things for a long time, so I'm not what you'd call a novice. What I suspect would work is that if you're compositing methods from your repo pattern together is that you could potentially overload those methods to (optionally) pass in a context. That way your frontend could hold onto a single DB context for as long as makes sense, and your data access methods could leverage wherever it comes from.
I'd just start doing mvc in core. I haven't myself yet but it's what I'd do if I had a learning objective in front of me
I read this book: https://blogs.msdn.microsoft.com/microsoft_press/2016/12/08/new-book-asp-net-core-application-development/. I also attended DevIntersection in Las Vegas and had a workshop on the topic which was super helpful.
Awesome! Thanks again.
Just did. On .NET Core 2.1 with a release published assembly, with two arrays of 100,000 int elements, when looping through one array for every element in the other array (100,000 outer iterations, 10,000,000 inner iterations) the for loop took 5.79 seconds on average on my machine (over multiple runs) and the foreach loop averaged over 7 seconds.
To me it sounds like you need to have audit log and application logs. Which means two separate loggers
One reason I say this, is because I doubt this will be the last case where this happens
Ya, these are actually pretty good. All of their .NET Core resources are pretty good; probably about the best of any language resource created by the (original) language developers (it's open source now, so this distinction is becoming fuzzy).
great resource: [**https://www.recaffeinate.co/book/**](https://www.recaffeinate.co/book/)
Best way to learn is to create a project such as a personal website or some project related to a hobby or interest of yours. Build it then build it again. 
&gt; If I use Log.Debug() then it will not get logged because we're no longer logging DEBUGs. I think it is Info. If it is not logged that is ok if they asked for it not to be logged. 
I've tried to do this before and I ended up rewriting all my classes with diction aries instead of multiple string properties
 If you really wanted to, I guess you could do something like: public static void Main(string[] args) { var test = new Test{ Foo = "This is Foo.", Bar = "This is Bar."}; var arr = test.ToArray(); foreach(var testValue in arr){ Console.WriteLine(testValue); } } public class Test{ public string Foo {get; set;} public string Bar {get; set;} public string[] ToArray(){ return this.GetType().GetProperties().Select(s =&gt; s.GetValue(this)?.ToString()).ToArray(); } }
I came here to post this as well. As a CS student, this book helped me understand Core and the story the book goes along with, while cringe worthy at some points, helped me as a student to get some insight into the app development process. 
You think what is info? I think you missed my point. I know that Log.Debug() wont be logged if Debug is turned off. Im asking for an alternative that cant be turned off for edge cases like this.
In the future my man I would think editing the post and appending something to say "solved" rather than deleting it outright. Might serve future googlers well. Just a thought.
Taught me what I needed to know at my current job!
I like it!
I like this too thanks
Man I’m really struggling with SQL within VS. it took me two days to figure that stuff out, but I’m a novice.
Do you know why it isn't showing up? The only option available is to add an XML file
No offence, but if you search Google for your title, there's dozens of examples on how to do this. For example [https://stackoverflow.com/questions/737151/how-to-get-the-list-of-properties-of-a-class](https://stackoverflow.com/questions/737151/how-to-get-the-list-of-properties-of-a-class)
I think you have to go to the top section, and select project and add it from there. Not the solution explorer
&gt; Im asking for an alternative that cant be turned off for edge cases like this. Just change the root level. https://logging.apache.org/log4net/release/manual/configuration.html &lt;root&gt; &lt;level value="DEBUG" /&gt; &lt;appender-ref ref="A1" /&gt; &lt;/root&gt; &lt;logger name="LogControl"&gt; &lt;level value="INFO" /&gt; &lt;/logger&gt; 
Unfortunately that didn't work for me I'm so stuck 
*Why* do you want to use reflection? It's slow. Just do it by hand. You only have to do it once.
can you share your code in a gist? I've benchmarked this dozens of times and inspected the assembly and it has never been different. I'd be surprised if it was a regression in .net core 2.1
Why are you using regex for this? Regex is great for some things, this isn't one of them. If you want to learn, use this with your input strings and it'll help: https://regexr.com/
Hmm.. what version of Visual Studio? Will you link the tutorial?
Because I used it to find the tags through the "&lt;.\*?&gt;" 
The thing is I could use regex.Replace(input, "&lt;.\*?&gt; ", string.Empty) and that returns the string with out tags. But I was just trying to get the value of the string between the tags . edit it, and reprint it to the console.
I’ll get back to you when I get home!
 class Program { static void Main(string[] args) { Stopwatch sw = new Stopwatch(); var intArrayOuter = new int[100000]; var intArrayInner = new int[100000]; sw.Start(); // foreach(var outer in intArrayOuter) // { // foreach(var inner in intArrayInner) // { // intArrayOuter[0] = inner; // } // } for(int i = 0; i &lt; intArrayOuter.Length; i++){ for(int j = 0; j &lt; intArrayInner.Length; j++) { intArrayOuter[0] = j; } } sw.Stop(); Console.WriteLine(intArrayOuter[0]); Console.WriteLine($"Elapsed: {sw.Elapsed}"); Console.ReadKey(); } }
in that comparison in the for loop, the inner array never has to get accessed at all, whereas it does in the foreach. change \`intArrayOuter\[0\] = j\`; to \`intArrayOuter\[0\] = intArrayInner\[j\]\` for an apples to apples comparison.
Thanks that'll be really helpful! 
 return GetType().GetProperties(BindingFlags.Default).Where(p =&gt; p.CanRead).Select(p =&gt; p.GetValue(this).ToString()).ToArray(); Keep in mind that Bar and Baz, up there, are *fields*, not *properties*, and would have to be fetched differently. A bigger question is this: what problem are you trying to solve?
Good point. I’ve been saved so many times by old posts like these but I didn’t even think about that. Will absolutely do. 
 { String input = "We are living in a &lt;upcase&gt;yellow submarine&lt;/upcase&gt;. We don't have &lt;upcase&gt;anything&lt;/upcase&gt; else."; MatchCollection matches = Regex.Matches(input, "&lt;.*?&gt;(.*?)&lt;.*?&gt;");//adds to matches enum anytime input contains "pattern" List&lt;String&gt; replace = new List&lt;string&gt;(); for ( int i = 0; i &lt;= matches.Count-1; i++) { replace.Add(Regex.Replace(matches[i].ToString(), "&lt;.*?&gt;", string.Empty).ToUpper());//takes each var in matches and removes tags =&gt; toUpper() } string output = ""; string finalout = ""; //there are two matches, don't know how to automate this part output = Regex.Replace(input, matches[0].ToString(), replace[0]);// replaces the first instance finalout = Regex.Replace(output, matches[1].ToString(), replace[1]);// replaces the second instance Console.WriteLine(finalout);
Let me ask this a different way. What is it that you understand you are gaining by using regex over an alternative method?
I can use regex and just feed it a patern to get all tags. What alternatives are you refering to other than html parser 
Yes thanks for the correction, I would like to get the values of the fields, not properties. I'm working in some legacy code where I came across an issue due to someone adding a new field to the class, but not also adding that field to the return value of the ToArray() method. I want to clean up what I thought was a bit of a code smell but not introduce a breaking change as this class is consumed in quite a few places.
Thanks, this looks like what I was trying but must have not understood it completely. I'll give this a try again quick when I'm back at my desk. 
I recreated your code to use BenchmarkDotNet since I was curious about that too. Interestingly, I got slower times for ForEach until I moved the array allocations to outside the methods and onto the class. As noted above, there's no GC since there are no heap allocations since the enumerators in the ForEach can be stored on the stack. [Gist](https://gist.github.com/subshock/62aa7dfe0d63784d7c14ed8d40a41a5b) BenchmarkDotNet=v0.11.0, OS=Windows 10.0.17134.165 (1803/April2018Update/Redstone4) Intel Core i7-7700 CPU 3.60GHz (Kaby Lake), 1 CPU, 8 logical and 4 physical cores Frequency=3515626 Hz, Resolution=284.4444 ns, Timer=TSC .NET Core SDK=2.1.301 [Host] : .NET Core 2.1.1 (CoreCLR 4.6.26606.02, CoreFX 4.6.26606.05), 64bit RyuJIT DefaultJob : .NET Core 2.1.1 (CoreCLR 4.6.26606.02, CoreFX 4.6.26606.05), 64bit RyuJIT Method | Mean | Error | StdDev | Allocated | ------------ |--------:|---------:|---------:|----------:| ForTest | 6.366 s | 0.0550 s | 0.0514 s | 0 B | ForEachTest | 5.069 s | 0.0495 s | 0.0463 s | 0 B | // * Legends * Mean : Arithmetic mean of all measurements Error : Half of 99.9% confidence interval StdDev : Standard deviation of all measurements Allocated : Allocated memory per single operation (managed only, inclusive, 1KB = 1024B) 1 s : 1 Second (1 sec)
None of this has anything to do with nested classes?
Huh. I'd forgotten that you could use *? to make regex lazy. How you automate that part depends on what you want to do. If you need each replacement separate, you'll make a new list and stuff the intermediate into it just like you did in the for loop above it. If you don't need the intermediaries at all, then you can get rid of the list variable entirely and just use the output variable. This is a valid statement that will execute the right hand side first, then do the reassign the result to the variable. That will allow you to automate it even more cleanly. output = Regex.Replace(output, matches[0].ToString(), replace[0]); For a better solution, don't make a second loop. Do this step inside the first loop and store the intermediate strings in the list instead of the replace strings. For an *even better* solution, use a singular Regex.Replace to do *all* the work via a delegate. The overload you'd use is in [this MSDN entry](https://msdn.microsoft.com/en-us/library/ht1sxswy(v=vs.110).aspx), which is even equipped with a sample of how it works. 
If I remember correctly, it can't avoid the bounds checks if the arrays are private and not local variables with known lengths.
I am sorry it came out like that. I used the "Inline Code" tag when posted the code but it didn't work. Preview doesn't exist as well. Just saw Edit code exist and the "Code Block". Sorry, :)
It might be better to add a unit test for the ToArray method than to go down this more complicated implementation route. 
My objective was to answer whether a nested static class behaves any different than any other static class.
By far my favorite resource is [https://www.pluralsight.com/](https://www.pluralsight.com/). I believe if you sign up for [Visual Studio Dev Essentials](https://visualstudio.microsoft.com/dev-essentials/) you get it for [free for 90 days](https://docs.microsoft.com/en-us/visualstudio/subscriptions/vs-pluralsight) (plus a lot of other belefits). There are also the free options on [Microsoft Virtual Academy](https://mva.microsoft.com/search/SearchResults.aspx#!q=.net%20core&amp;index=2&amp;lang=1033)
In VS 2017, go to the Server Explorer, right click on Data Connection, and select Create New SQL Server Database.
This sounds like a really, really bad idea. 
Have you considered running through a Code First Entity Framework tutorial? I'd suggest doing it that way for a start because, though complex, it's much more powerful in the long run
Yeah so if you have a look at my sample, you will notice that it will only fire 3 queries and then get the relevant data in memory
So if you have a look at the allRequests query you will notice that it returns an anonymous type. Once it enumerates in the result query the anonymous type is used to build the defined type. I prefer using anonymous types when building intermediary queries, this allows you to build the SQL equivalent of "select Name as FirstName ..." . In my example though I am missing a "new" statement, I was doing this quickly in notepad without any class references. i will edit the sample to be correct. 
For that particular purpose worked really well? Cool down vote with no value add comment, I bet people love you over at stack overflow 
This. Use reflection in tests, not in implementation. 
I know that :-) very complex and nested use case, but before that I have write a very simple examples only to show the concepts. You know now that you can also write an ugly code with PM not only clean code :-)
Oh - boy .... 1. You return IEnumerable&lt;TEntity&gt; instead of IQueryable&lt;TEntity&gt; which means, all further queries against this, will evaluate in memory, because LINQ will work on the IEnumerable instead of the IQueryable, which is slow and bad. 2. For whatever reason you `return orderBy(query).ToList();` which fetches all records. You should rather do `query = orderBy(query)` so the query will be lazy evaluated
:-) Vote Up +
Unless it's showing a performance issue id stay clear of "it's slow". Other code will be causing more problems most likely. The better question to raise is how often will you need to make the change. OP states they're doing this because someone added another field and it broke, so their solution is probably safer. They might also.use it in other places so it's not a do once by hand kind of thing. Plus they could always cache the value if running it multiple times caused.issue.
Constant learning Asking for feedback Looking at every source code you could find Testing everything Improving your problem solving skills Always looking at the problem from business point of view Improving your communication (written and spoken)skills Educating others (and thus learning yourself)
I'm happy to elaborate. What you're describing is abandoning all logic and diction, as well as language features, to achieve something that could easily be achieved by not fighting the language. Sure, it might be easier for you right now, but all of the language features you miss out on, just to make it a little easier, is going to make your code base ridiculously hard to manage. If you have mixed types, then what is your dictionary &lt;string, object&gt;? Bang there goes type safety. Also, what if the key isn't defined? The answer here is manually write, this is no place for the magic bullet of reflection, and unit tests.
Brilliant piece of advice. TDD, Constantly learning and a feedback loop along with understanding the other side of the business are fantastic pieces of advice. 
Communication failures are the main culprits to any software project failure. 👍 great points
&gt; Looking at every source code you could find I think it's not just looking at every source code, but also analyzing what you're looking at to determine whether you think it's good or bad code, and researching why things have been done a certain way (which leads back into your first point about _constant learning_)
Don't be overly critical of the code base that has landed you a job. It may be flaky, it may even be bad in some places but somehow this code has held up the business you now work for. Suggest improvements and more importantly suggest the business benefit of doing so. It's ok to whine on about how bad something is, but more often than not, those that pay your salary don't have a clue what you're talking about. Explain why it would be beneficial to update some code and why it would be good from a business point of view. So often I hear developers harping on about something bad that they have to work on. As a developer I can sympathise, but as a senior developer I have to take into account the business perspective. Developing skills to translate 'nerd speak' to 'business speak' and to sell the idea to the business is very important if you are going to have a satisfying career as a developer. Otherwise you are just trying to advocate change to people who haven't a clue as to why that change should happen.
The exception window is over the code. How do you expect to be helped if the code is hidden?
A quick search on StackOverflow suggests that you need to implement a custom JsonConverter and apply it as an attribute to the fields that need special handling. The following link shows how to do it for an enum, but I believe a similar approach can be applied to other types as well. https://stackoverflow.com/questions/22752075/how-can-i-ignore-unknown-enum-values-during-json-deserialization
We're talking about 600+ lines of code here. In any case, the code executes fine far as I can see. I stepped through it until the loop where the server reads from the client which I iterated through several times without incident... Nonetheless, I hope you're not going to mind hastebin links like the guys on SO did... [MainViewModel.cs](https://hastebin.com/alijoyujup.cs) [Server.cs](https://hastebin.com/vuhijediwe.cs) The [Configuration class](https://hastebin.com/avoluviheq.cs) just contains some fields used in the other two nevertheless I've included it here and will update the post.
I just wanted to see line 81, because that's where execution seems to have stopped. Looks like something's happening in the Init method which is causing the exception to bubble up. Have you tried stepping through InitJitterBufferClientRecording and InitJitterBufferClientPlaying? You already have a try...catch block in the main body of the Init method, so it's probably not that. Other possibilities - * Your application is running against a different version of the .NET runtime from the one it is compiled for. e.g. running an app for 4.5 on version 4.0. * Since there are exceptions related to XAML in the Output, I'd guess there's something wrong with the XAML. Invalid XML is usually caught at compile time. But incorrect data often slips through and throws a runtime error. Maybe you have an empty node where content is needed? * Libraries are out of date. Check against NuGet for the latest versions, then clean the build and try again. If it still persists, shut down VS and delete all your libraries from the package directory. They'll be restored automatically when you open the project again. Also clear the GAC of old libraries.
Thank you good soul!! This is awesome advice
Just checked the XAML and I looking at it, I don't think its the problem lol &lt;Window x:Class="TCPVoiceServer.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:TCPVoiceServer" mc:Ignorable="d" Title="MainWindow" Height="350" Width="525"&gt; &lt;Grid&gt; &lt;/Grid&gt; &lt;/Window&gt; I checked updates on Nuget and there were no results either. 
That's why I teach two rules of thumb: 1. static methods and variables are basically global functions and variables that are connected to the enclosing class only by name (and visibility). A static member behaving differently because it is declared in a nested class would be as surprising as a global variable behaving differently because it is declared in a different namespace. 2. Don't tie imperative code to declarative code. By declaring a static variable you are saying "I want there to be this variable.". But the second half of the line starting with the equals sign is imperative code that says "Set this variable to ... now.". Given that the first line doesn't refer to any specific point in time it should be obvious that the second line is ambiguous. I would recommend adding a static "Setup" method that allows you to actively specify when you want to initialize the data inside the static variables. Or rethink why you need a static class in the first place when its lifetime obviously isn't as global as it is expected to be. Last but not least keep in mind that you didn't explain anything about the behavior of C# nested static classes. You tested and explained something about the behavior of these classes in the .NET framework. If you switch to .NET Core or Mono the results might be different. In fact they might rely on factors that just didn't occur in your test. It's better to rely on C#'s specifications than to expect that the implementations will all behave the same way now and in the future.
It’s been an hour and nobody has said anything about commenting.
I think commenting is a form of communication. Very valuable, async communication that will outlive us all. I always imagine being out sick or on leave and all the other devs have to figure it out from my comments alone.
and nothing about documentation :P
&gt; not understood it completely. `this.GetType()` returns a `Type`. Basically every C# object has a Type (by type, we refer excatly what you were taught, that int, byte, char, string, each class, each struct etc...) but in C# (opposed to most compiled languages), you can query these at runtime, this is called "reflection". Now these "`Type`" objects contains every single information about other Types. (Yes, even `Type` type has it's own Type) this includes all variable, method, property, constructor, destructor, etc... whatever that type contains. `.GetProperties()` returns an array of `PropertyInfo` for all property in the given type. With `PropertyInfo` objects you can get or set the vale on a property or get it's details (Referenced Type (or return/field type if it sounds better), has getter, has setter, etc...) TL;DR: Reflection is the "sudo" of C# The rest is just a LINQ filtering. Also note ( /u/AbandonedArchive): When using `.GetProperties()` you should utilize the BindingFlags parameter or you might not get the result you wanted. Note2: Be careful with reflection, as you get access to the raw structure of a Type (let's say a class) and you can end up editing private/internal fields that can lead to unexpected behaviour. 
If you're already using abstract classes and inheritance, why not go all in and make this CheckOut thingy a virtual method of the abstract class?
You say that you stepped through your code without issues. When is the exception thrown then? Can't you pinpoint it.
Meh, reflection is slow*er*, but not unbelievably slow per se. Depending on the use case it's perfectly appropriate in order to avoid large amounts of boilerplate code. And of course it can usually be sped up with code generation.
The missing method exception could be misleading. I've had that thrown when a static initializer threw an exception. If it doesn't happen when you debug that screams race condition to me. Check your threading code if you have any.
Loool great point I think because it’s expected that everyone knows that comments are failures expressing behaviour. Martin fowler suggests that even a one line method with the comment being the actual method name is more helpful than a comment. Comments should only ever be there to apologies to future developers 😂
I *think* getting the fields is as simple as calling GetFields() instead of GetProperties(), and skipping the Where() call, as fields are always readable (and won't have a CanRead property to check). (Additional correction: BindingFlags.Default will not return much. You probably want `BindingFlags.Public|BindingFlags.Instance`, or something similar.) If you're going to need this to be implemented across many classes, it's probably simplest to do a couple things: * Create a version that takes an object in a static class someplace accessible. This can be used in the implementation of ToArray() by any class, if needed. Throw an exception if the object is null, though. * If your class hierarchy has a common base class, you could add a call to the static method in a default implementation of ToArray(), there. If you don't want it to be overridden, be sure it's *not* marked virtual. You'd still need to go remove the other implementations from the existing classes, though. This would look like: internal static class SomeStaticClass { public static string[] ToArray(object obj) =&gt; (obj ?? throw new ArgumentNullException(nameof(obj))) .GetFields(BindingFlags.Public|BindingFlags.Instance) .Select(f =&gt; f.GetValue(obj).ToString()) .ToArray(); } //in your base class public string[] ToArray() =&gt; SomeStaticClass.ToArray(this); As the others have noted, though, reflection can be slow, so you would need to profile this--it may not break the interface of your object, but it could break your system in other ways (especially if it's called a lot!) A better option might be build an analyzer or, as they suggested, a unit test to verify this fact about the type(s) in question.
&gt; Always looking at the problem from business point of view This is one I feel is probably one of the more important ones. (They are all very important) but I see this one forgotten the most by 'skilled' developers.
Well it can also be argued that self documenting code requires less commenting. But then again, commenting shouldn't be used to explain what is happening, it should discuss the motivations, design approaches etc. I mean there will always be code that needs a comment to help with the understanding of the implementation, but generally readable, easy to understand self documenting code is going to generally be more maintainable.
&gt; * Testing everything Yeah, no. That's great way to kill productivity on all stages possible (development, refactoring...) and bloat code base. Amount of tests should be balanced between coverage and quantity.
The only time I use comments to describe what's happening in code is when I had to do something out of the ordinary for whatever reason. Everything else, as you said, should be self documenting
Not sure why I never thought of it before, but a Clean on the project seems to have fixed the problem... whatever it was 
Comment on code
Hmm this is for calling stored procedures form what i see, anyway i abandoned pgcrypto :)
self documenting code is best code /s
Might be /s but I'd take code that I can easily read over over-engineered code with 5 unnecessary abstraction levels and good documentation.
DDD!
Ah yes I see now. Thank you for clarifying!
Code is self documenting... When you put comments into it. 
Dalways De Dlosing!
I think testing everything still applies. They never said write unit tests for every piece of code, but every single line of code you write should be tested by yourself in some form. This might be unit tests, it might be integration tests, it might be regression tests, and it can just be plain old manual tests. Pushing untested code to a repo Is inexcusable, and hampers productivity much more than testing it does. 
Idk. I had to write several merge statements that are used nightly to import data. The obvious thing to do at first was have the merge do what it does best, update and insert in one statement. The issue is that on some of our data doing both in one merge statement took around 2 minutes. Doing a separate insert and update merge statement took around 15 seconds. I split them out and commented why. Without a comment a future dev is going to look at it and go 'why on earth is this in 2 statements', with a comment they'll say 'why in earth is thi- Oooooooh ok'. Comments are good when used conservatively and aren't just noise! 
LINQ will not make that code faster. In fact, doing an `Enumerable.Select`/`Enumerable.ForEach` will be marginally slower (but will in fact produce an equivalent IL code). LINQ would only make your code more readable, which might be a good idea - as the performance impact shouldn't be that noticeable. As a side note - while negligible in terms of performance, I would replace your `if`/`else` with `activeItem.activeTransofrm.gameObject.SetActive(distance &lt; activeItem.minDistance);`.
Thank you VERY much for the info and clarification. Drats. But thanks. The problem with replacing the if/else (while I generally agree) what you don't see is in that IF statement is some additional code where I add items to another list (I removed that code to make my point easier to read) Again, thank you very, very much. At least I can move on. I'll post this code soon to Github and maybe someone in the Unity community can find a better/quicker way. Have a great weekend
there are no enumerators, guys. look at the assembly or the IL.
Sure thing
Then its properly a outdated reference or a mismatch between the project settings and a reference (like .NET version). Its a good habit to rebuild all, or clean/build quite often :)
&gt; Always looking at the problem from business point of view Can u explain more about it? An example is more than welcome. Thanks
I've seen the most unskilled developers produce software that was a business home-run, making them a lot of money. I've seen the most sophisticated developers produce boner inducing software (to other developers) that failed to provide any real value to the business. Truly understanding the business and problem you're solving is the most important thing.
Like fashion a lot of software dev trends come in and out of style. I very much appreciate reading good comments. Motivation for logic especially being extremely valuable. However you read a lot of modern stuff that basically says your code should be self describing, etc. The truth is as always probably somewhere in the middle.
I think the assumption is always towards automated testing for everything. Hence his comment.
In addition, understand the timeframe the code was written in. If it is 1990s code then you probably have an event driven architecture. Its its 2018 you have micro services. Its its early 2000 you have que sourcing. Programming goes through waves and by respecting the period of time a program was written you will better your understanding of the code base you now work in
Exactly. Nothing is more of a turn off to management, than a dev talking negatively about the work of someone they don’t know (or even if you did know them). You weren't hired to be a critic, you don’t know why things were written that way and you’ll never build yourself up by tearing down another. As long as it is working, that’s all the business cares about. If you can improve it, do so by building a respectful, constructive consensus first, then you can demonstrate your “superior” coding skills. 
I hate when companies make comments on interfaces a requirement. If the function name, interface name and parameters don't describe the function well enough then it probably does to much and needs to be refactored anthow.
I don't know why you're being downvoted. I am a programmer writer, and I constantly have to go into large code bases, add comments for IntelliSense, and generate ref. documentation. *Everyone* thinks their code is so clean &amp; self-explanatory. Hint: it's not. I'm more likely to find code files with ZERO comments than ones with anything useful.
these are good priorities, but you didnt mention documenting anything, so i assume your project is unmaintainable if you leave
I feel like “looking at it from business point of view” is better summed up by learning the line-of-business you are servicing. But maybe that’s not always possible... Most places I’ve been I’ve been able to have close working relationships with my customers, so I’ve really tried to learn what they do and think, how can i help this with ______ technology at hand?
Thanks for starting this discussion. As a novice programmer I have been struggling with this recently. I have gone from having zero comment to filling the code with comments. Now I am starting to distance myself from two extremes and find a middle ground. Things are looking much better now.
When I read about test driven development, I always wonder how people can just *write* code and assume it's correct or something. Even if I write something super duper simple, I always test it to make sure that it does what I intend in it's place, like you said, by doing manual testing or integration testing. I've worked at a few places now where majorty code coverage with automates tests were not a thing. Code gets tested by developers and then again by QA. Do people in some places really just write something and commit it without testing it, or at the very least, checking if someone else has even looked at it? I guess I should suspect *someone* has but I wouldn't have thought it was a common occurrence.
Hmm. I work for a larger business that started in 2007, took off in 2010 or so. They use all of that, events, message queues, and micro services. Basically, where a tool seems right, they use it. How common is it for a business to just go "all in" with something because "it's already implemented" or someone just doesn't feel like learning something new?
I guess this is where differences lie for some folks. I would prefer to meet in the middle. Somewhat clever, abstract code with decent documentation, but not overzealous in any one principle is, in my opinion, the sweet spot. Code that shows foresight and planning to a degree, even if it requires some comments to explain it, is better than 1500 lines of a main line function with copy+pasted if/elses. But if the shit works and the folks maintaining it know what's up, the code is correct in all cases, so it doesn't matter in the end. Kinda comes up to taste when everything else is equal.
- Underpromise - Overdeliver - On time.
How could you use a tool before it's invented? If your code base was all written in the 1992 would you expect dependency injection, unit tests and micro services? Obviously these days we stand on the shoulders of giants. Our war chest is diverse and we can pick and chose tools, architecture and stacks. The right tool for the job is the correct paradigm and always has been. My point about understanding the time period of the code base means you also have to understand what was available at the time for those developers to read, understand and write with. One day 20 years from now people will look back on our code and go "Micro Services and Queues... how old school! It's basically trash we need to re-write it.". 
Have you considered using [SQL Server Management Studio \(SSMS\)](https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017) to configure your SQL database. It's a dedicated program from Microsoft to administer SQL databases I've not used the inbuilt tools for SQL server for a long time but always found them a little lackluster.
&gt; feel is probably one of the more important ones. (They are all very important) but I see this one forgotten the most by 'skilled' developers. Look at /u/WackyBeachJustice amazing comment a little bit above - I think it will explain this line well.
I really didn't mentioned it :) not because I think it doesn't matter or because we don't do it - I just think it's not on the list of great habits of developer, but still important.
this bullet is written by blood. In some cases human blood.
I know that was his assumption, I was just clarifying that testing everything doesn't always mean automated testing of everything :) 
&gt; I am a programmer writer, and I constantly have to go into large code bases, add comments for IntelliSense, and generate ref. documentation Wow, in what Utopian company do you work for that actually employs someone to do this?!?!!? Seriously. I've been slinging code for many years, and worked at a couple Fortune-500s, yet have never been on a team that had a "programmer writer" where their focus was just to add comments. I've seen plenty fellow developers do the 'ol " ///TODO Comment this junk " so I can only imagine some of the lazy behavior on your team if a person knew someone else would come along later and mop things up. 
Yeah, because every application is business / life / mission critical. I hate to burst your buble... but most of them are not. And every single place where code is created must find balance between how fast code is being created, and how robust it is (acceptable defect ration). But I understand your inability to grasp that, this is done by someone else than programmers themselves.
You would probably be better off giving those objects colliders and using Physics.OverlapSphere(activeItem.position, activeItem.minDistance), though I'm not sure how that interacts with inactive items (have never really used Unity).
Link to the question?
Yeah, speaking as an SDET that's ridiculous. If a developer cannot test their own shit before passing it over they're being lazy. If a dev writes unit tests that are shit but pass, they're being lazy. If a developer cannot be arsed to even try it from the customer perspective before handing it over and just think "my portion of the code is functional, DEV DONE!!!" they're shooting themselves and everybody on down the line in the feet. Quality should belong to everybody throughout the SDLC and passing over something that fails right out doesn't just frustrate the tester(s); it's going to make the dev look heinously bad and lazy and frustrate management when they find out the delays are due to immediately obvious defects that a dev couldn't be half-arsed to test at even the most base level.
VERY interesting idea. Thanks, I will look into that. Have a great weekend
https://stackoverflow.com/questions/51560759/null-on-list-where 
As I mentioned above, an issue was found where a new field was added to the class, but was not added to the array that is returned in ToArray(). I'm in the code fixing this issue and adding a new field, so I want to clean it up a bit to avoid the same issue in the future. Avoiding using reflection to iterate less about 20 properties seems like a micro optimization. I will benchmark it and determine the cost.
Anybody that assumes this doesn't understand how automation is supposed to provide value.
Can confirm; I have at least 3 tickets that are blocked in the current "sprint" (considering we keep trying to mash Kanban, Agile, or Scrum etc together because silver bullets apparently exist) due to my developers being lazy assholes who can't even manually test their own shit at a basic level. 
Technical wizardry is nice, but the purpose of code for a business is the same as the purpose of anything else for a business - to make money. If your code can't either increase revenue or reduce expenses somehow, no business will pay you to write it. Make sure that you're adding value somewhere along the line - whether it's a game you want to sell, reduced maintenance headaches for a legacy app, replacing a the summer student doing data entry with OCR, or anything else, always keep the end user in mind. A good boss will do 90% of that for you, but there's usually something you can add or tweak to make it better, and that's both a good way to stand above the crowd(which can help when it's time to ask for a raise), and a good way to help your department(which reduces the odds that they'll need to lay people off in the future). 
Clearly I did not do a good job explaining the point of the code or the post. This was purely an exercise to determine whether, in the latest .NET Framework (and .NET Core, which RoslynPad happens to use) run times, the nested static class would be initialized when the containing class is instantiated, and if it occurs more than once. After going through this exercise, it is quite clear that the Static Class and Static Class Members documentation explains this, but I still enjoy taking the time to prove things to myself, then sharing that effort. Let me know if this clarifies things so I can update the actual post and make it more useful. I did think about specifying the .NET Framework version, but figured the specification explaining the limited guarantee of when a static class is initialized was sufficient to address differences in run times. At the very end I did say I am curious how other run times behave. As for the code quality, this isn't the code I was reviewing; it is just the example I wrote to test my assumptions. The points you mention are good if I did indeed desire different behavior. I also addressed "set this variable to 'now\`" with the comment that the field is a value type; this was a "hint" for the following exercises.
It's not slow for my purpose. I updated my question above, and both methods took less than 1ms to execute.
It could be part of the abstract class, yes, but the idea is to show how pattern matching is could help with business logic.
Why would I not want to use reflection in implementation?
I am a great programmer because I deliver 100% of the time. I am not a geat programmer because if I show some of my code to another developer they might get a heart attack.
EMC does this. Source: Friend is a "programmer write", no idea what they call it.
SO is crap. It has devolved into a useless pile of tryhards constantly correcting each other and bickering over dupes and other bureaucratic shit. There are a good number of old posts with useful information in them that you can get through a Google search. But the intolerance of reposts combined with god-awful search capabilities makes posting there a crap-shoot. You will *never* find all of the duplicates of your question because they don't use the same words, and the ones you do find will usually be a "close dupe" that asks a similar question, but is different in some small-but-important way. Just post it here on Reddit. You'll get more specialized knowledge from subreddit users than SO's categories will ever afford you. You'll also get answers from people who don't mind answering a dupe, since Reddit is probably 90% dupe-posts anyway and everyone is used to it. They'll usually link you to the original, and they might add something to it if you have a special case that isn't covered by the original post.
Glad to know I am not the only one who thinks so. 
 sp.DisplayName = new[] { "", sp.DisplayName}.Contains(newProviderData.DisplayName) ? so.DisplayName : newProviderData.DisplayName; Seriously though, what is not optimal about your solution?
The easiest way to search so to see if your question is a duplicate is to post it and see if anyone tags it.
&gt;How common is it for a business to just go "all in" with something because "it's already implemented" or someone just doesn't feel like learning something new? In most businesses, code that is written, running, and being used will be kept around till there is a business reason to do something with it. Yea you might want to rewrite that jquery app that has barely been updated since 2012 with React or whatever, but rewriting something just because it uses an old stack doesn't provide any business value. The ideal organization is constantly updating and maintaining all there systems so that they're code base is constantly evolving, and hopefully improving, as they use better techniques, methodologies, and frameworks. Those orgs are rare birds though, so at best you get orgs that have their primary development on that path with tertiary or secondary systems on a more cyclical schedule.
Gave you an upvote on it just for grins.
There shouldn’t be anything slow about this. What makes you think you need to optimise it? As a first step you could square your ‘minDistance’ and use (position - position).sqrMagnitude instead of Vector3.Distance. Saves you a square root operation per iteration.
Hah! That, right there, is the efficiency of being both a troll and completely out of fucks to give. o7, good sir.
Your question is really a duplicate of the other question. There's nothing different about yours other than it's difficult to tell what's going wrong because we can't run your code. I don't think the question required any downvotes though, but it is a duplicate. I wouldn't have upvoted it either though if I'd have seen it. I would have just commented suggesting Location was probably null, which turned out to be the solution. You should rewrite the foreach using an if statement instead of the where, doing an `if (*logic*) continue;` Then you would have been able to easily see the null reference for yourself when debugging. If you don't know how to debug code then you should make that a priority to learn (I could help if you like) because it's easy but means you can solve 99% of your (code) problems. 
I didn’t find an answer to my question, until I asked the question. So no is not a duplicate, just because it has to do with null does not mean is a duplicate. Other wise every question should be a duplicate if it is referencing a single word another question has with the same matching word(s). I came across that article someone edited my question with and it didn’t help me at all. But a willing fellow human took his time to help me and I got my code working. 
&gt;&gt;sqrMagnitude Yea, a found that a few hours ago and the result was neglagible, though I may still handle it. What was odd was the different values returned (my ignorance on the actual maths involved I am sure) float distanceSQR = (activeItem.position - transform.position).sqrMagnitude; float distance = Vector3.Distance(activeItem.position, transform.position); Debug.Log("distanceSQR: " + distanceSQR + " distance: " + distance); distanceSQR: 987378.4 distance: 993.6692 Quite a bit of a difference, and not exactly an order of magnitude higher either.... But I could handing it As for why the desire to optimize, well, you're right, it's doing fine. I am placing 5000+ items in this list and it's not bad, but since this is VR I am attempting to squeeze every last drop of resources that I can. I will think about the other items you mentioned as well. Thank you and have a wonderful weekend
😂
It was a duplicate, but that's fine. No one minds duplicate questions (or they shouldn't do). It just means there's one source of the answer with the other questions linking to it. The downvotes were unwarranted but people like to downvote duplicates. That happens everywhere. Your question was specifically about fixing a null reference exception and the linked duplicate has a perfect answer describing why they're caused and how to fix them. 
create a user control, do not move/detach-retach items from the visual tree, it is bad. 
So you think it's best to use a user control and derive from listbox? How would you handle commands? Would you attack those to the view, and add them by casting ItemSource? Would you use a view model just to observe a list?
The sqrMagnitude will not give the same result but if you square the distance you’re checking they are comparatively the same. Meaning if the distance if less than the minDistance then the distance squared is also less then the minDistance squared. What are the objects you are turning on and off and why are you turning them on and off? You may be causing more slowdown by trying to manually turn off objects, Unity already does camera frustum and occlusion culling by default so if it’s simply rendering you’re trying to save it’s likely not worth it. Use Unity’s Profiler to see where your bottlenecks are, if this script isn’t a bottle neck is probably not worth optimising .
The sqrMagnitude will not give the same result but if you square the distance you’re checking they are comparatively the same. Meaning if the distance if less than the minDistance then the distance squared is also less then the minDistance squared. What are the objects you are turning on and off and why are you turning them on and off? You may be causing more slowdown by trying to manually turn off objects, Unity already does camera frustum and occlusion culling by default so if it’s simply rendering you’re trying to save it’s likely not worth it. Use Unity’s Profiler to see where your bottlenecks are, if this script isn’t a bottle neck is probably not worth optimising .
I believe user controls automatically derive their parent's datacontext, try centralizing the datasource as well as the commands your main viewmodel, and access them on your control.
Thanks for the math clarification, appreciated. re: what objects. Everything. I have a VR game and I noticed QUITE the drop in frames per second while I had a number of items turned on. Yes Unity has several options, but they are just not working, or not working well enough, **OR** I haven't set them right. I ALSO want to affect just some objects near the user, as you can see in this video: https://youtu.be/Kwz7S0Ed5Ps Affecting all objects in the scene is just too expensive, and it SEEMS (both in the game and via Profiler) that I get a much better result with these objects off. But feel free to inform me otherwise, I have no problem being wrong. (happens all the time)
Because it is slow. If your use case is to assure that people don't add fields without updating ToArray(), it's better to have the reflection in tests and verify that ToArray() includes all fields. The implementation can then use "regular" type safe and efficient code to return values in ToArray(). 
It’s best to see exactly what is causing the slow down. If you enable Deep Profile on the Profiler and pause the Editor you’ll see a much more comprehensive breakdown of what is costing you time during a frame. e.g. if it’s ActivateObjects then it is in fact this script that needs optimisation. If it’s Camera.Render then you need to reduce what it being drawn, which is what you are already trying to accomplish. It could be something else entirely however, like Physics, post processes, particles, etc. If your scene is static, try ticking the Static flag on each GameObject (its in the top right of the inspector). This tells Unity these objects won’t ever move and so it can perform certain optimisations. Additionally you can bake Occlusion Culling data into the scene so that the camera can more quickly and efficiently decide what cannot be seen from a certain point and disable them much like you are doing manually. Optimising a scene for efficient rendering is one of the more difficult tasks in development. Especially for VR. Any number of things could be slowing you down.
`/// Gets the name` `public string Name` `{` `get;` `}`
&gt; think getting the fields is as simple as calling GetFields() instead of GetProperties(), Yep, that was what I needed!
&gt; "programmer writer" where their focus was just to add comments. That's one facet. My general duties include: * Creating API reference, * Writing dev tutorials, * Creating sample code, * Unintentionally testing APIs, * Providing API feedback, * Sometimes mucking around in source (*You know that enum with 4000 values? Yeaaaah... we're going to need you to change it to an abstract class. You'll also need to convert that switch block to if-statements. Thanks, guy.*). &amp;nbsp; &gt; Wow, in what Utopian company do you work for that actually employs someone to do this?!?!!? Even at where I've worked, we're a bit rare. I've been FTE at AWS, contracted at MS, Disney Interactive, 343 Industries, &amp; am now at FB. &amp;nbsp; &gt; I've seen plenty fellow developers do the 'ol " ///TODO Comment this junk " so I can only imagine some of the lazy behavior on your team if a person knew someone else would come along later and mop things up. Usually a rare convergence of events has to happen before a programmer writer is brought in: * The dev onboarding process has crept from 1 month to 6. * There's an aircraft carrier-sized source file containing critical code, and the only dev that understood that nightmare of nested ternary if-statements, pseduo-Hungarian notation, &amp; kung-fu reflection left 4 years ago. * Everyone with extensive tribal knowledge is either dead or in Mountain View. * The OneNote they thought was a good idea to use for team documentation has now grown to 1,000 pages, organized slightly worse than a landfill. * They are fielding 300 questions a day from clients. * They know that programmer writers are a thing. * They convince management programmer writers are a thing. * They convince management they need to budget for a programmer writer. That's the hell I'm brought into.
I profiled both the original method and the rewritten method, and each executed under 1ms. Worrying about using reflection in my scenario is a a micro optimization. Writing unit tests around this just adds even more fragile code that requires editing multiple locations to add a field to the class.
I err on the side of over-commenting, applying the rule "If there's something that *might* be useful to the next programmer, put it in a comment." I'm probably disposed that way in part because I have a poor memory, and don't want to have to puzzle out why I coded something the way I did, when I return to it someday. Circa 1990, I wrote a thousand lines of FORTRAN to explode a bill of materials. I returned to that workplace a couple years later, and was flattered to learn that the code had never failed, and it was what they gave to new employees on day 1 with the instruction "Write code like this." I read my own code and a couple hours later remembered how to do that stuff -- benefiting majorly from my comments. I think the "self-documenting code" standard is nonsense -- because *everyone* thinks their code is self-evident when they write it, because they just wrote it! Three months or two years later, the names of those perfectly-named methods members aren't always comprehensible. Sure, comments get out of date. Solution: update the friggin' comments. :)
Yeah SO power users are annoying. I tossed you a vote!
The most eye opening experience in my career was joining a small company that had a profitable product with some of the worst code I've ever seen. It became apparent very quickly that marketing and sales are more important than the cleanliness of the codebase.
There will be code for each event for sure unless you may of exited during the created of the event when VS was trying to auto add it. To easily see the events and explicit add them, type in "button1." You will then see a list of all of the options and a lighting bolt next to the events. You can then hit += followed by tab on the event you want and it will auto create the function. I think another tab actually finalizes the generation of the function to handle the event. I hope that helps.
You're 100% right. People want SO to do their legwork for them.
Use a FlowDocument https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/flow-document-overview https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/table-overview 
I haven't touched WinForms in a decade, but if you wish to look at the source code for the OnClick event, the Reference Source will be your guide. In the web interface, you can click on methods, types, etc. to navigate around (like F12 in Visual Studio). Here is the link to the Button's OnClick method to get started: [https://referencesource.microsoft.com/#System.Windows.Forms/winforms/Managed/System/WinForms/Button.cs,268](https://referencesource.microsoft.com/#System.Windows.Forms/winforms/Managed/System/WinForms/Button.cs,268)
Great reply; thanks for enlightening me. &gt; only dev that understood that nightmare of nested ternary if-statements, pseduo-Hungarian notation, &amp; kung-fu reflection left 4 years ago God do I wish this wasn't really a thing. :( 
Thank you, I regret asking this question since I now realize I just didn't do enough research. I was confused about why I couldn't read the code for the event publisher method, but now I realize it is because I was actually viewing "Metadata" for the CIL Button Class :S
&gt;rms in a decade, but if you wish to look at the source code for the OnClick event, the Reference Source will be your guide. In the web i Thank you very much :D
+1 for this. Mvc with netcore is really nice. 
And then when you get the dupe link, just go to it and delete your post. Rid all evidence of your laziness.
Sure, if this code is not on a hot path and you can afford the very little, but extra, execution time then you should go with the implementation you feel gives the most maintainable code. I just have personal experience with slow reflection in production code and want to advise against it whenever I can 🙂
* Use the simplest, most comprehensible technology available that will solve the problem. This not only means I will understand it more thoroughly, this means that whoever gets assigned to maintain my code later will be more able to understand it as well. * Thoroughly understand the problem I'm trying to solve before I start work on the code. This means talking to the users. This may mean getting on an airplane to go to the users to talk to them and see where the program will be used. This may mean plotting out a new way the users will do their work once they get your software, but if so, that means working with them to do it. * Make the data model reflect reality as closely as possible. (My standard example: if you're building a help desk system, if someone calls in, you don't make a "ticket" record, they're not going to a movie, you make a "call" record, because they *called*, and this reflects reality.) This is the bit that is surprisingly difficult for people to wrap their brains around because we're so used to stupid abstractions that are based on old business practices that the idea of actually simplifying becomes hard, but this usually makes things surprisingly easier in the end. * If your software seems to eliminate jobs, you're probably doing something wrong. * Data model first! Then build the user interface and storage to reflect it. This tends to eliminate a lot of stupid errors. * Overdesign. It's much easier to design a potential feature into the data model now and not implement it in the interface than it is to rejigger the whole program to allow it later, and it makes you look like a miracle worker when management invariably asks for the new feature and you churn it out in record time. * Always work with junior people for at least some of the people you work with. It gives you people who will learn to do it your way and consequently can take tasks from you and be trusted to do it right, and also gives your employer higher quality people cheap, and also gives someone new to the industry a chance to improve and get a promotion. * Don't be afraid to rewrite a library if the one included with the language doesn't do what you think it should. Just because Microsoft (for example) thinks they know the right way to put structured data in a SQL database (for example) doesn't mean that their methodology is optimal for your project. * Write reusable code. If you have to spend 50% longer to make the code in your project reusable as opposed to making it all custom, do it, because you'll save that time back later. When you've been working at a job for a couple years, most tasks should become a matter of installing and configuring some reusable code. This frees up your time to do something awesome on the remaining tasks. 
Aside from the over-design (yagni) these are all brilliant points!
Ok just for shits and gigs, I added 5,000 fields to the class. It is 10 ms slower to use Reflection. I'll happily pay that cost to fix fragile code.
Why is building software that eliminates jobs a bad habit? Seems unrelated to the core topic. The economics of the situation are not really a habit 
I have to say I agree with you on this one. 
Never promise a date it will be finished. The instant you do something ALWAYS goes horribly wrong. 
Hello, world!
no
nope
The best thing about C# is that there's SO MUCH you can program. For starters, make the traditional "Hello, World!" program. My first programs were moving files from one location to another, creating .txt files (with and without something written in them) and even just a program to call up other programs that I would use when my computer first boots up. I feel as though these are a good basis for starting out! PM if you want other small things to do. My mentor gave me a lot to create and these are what I normally give to people who are wanting to start out with C#!
Won't join a Discord, but if you PM I'll see what advice I can give. 
Wonderful response. I'm sure OP can figure something out
Abstraction. Keep as much of the system dependent code isolated to the far ends and use dependency injection to determine which endpoints to use.
Hi ! Can you tell us other things we can do .Thank you 
I completely agree with you and the responses to your comment, but I think there's something else to consider. Once that code starts costing your company money because of technical debt, poor coding practices, lengthy onboarding, unsustainable defect rates, loss of cohesion between components and teams, code that is impossible to test through automation, data that needs to be manually fixed frequently, crashing against the limits of hardware not due to data, but to algorithms, etc. then strongly criticizing the code and decisions is more than warranted. At this point I would consider it irresponsible not to accept the fact that what you're dealing with is a heaping pile that needs to be reworked. Just as an example, the company I work for has 2 decades of code that is hindering our profitability, and our estimated time to change to a more manageable architecture (we're only just discovering microservices) is between 5 - 10 years. So sure, an entire business was built around this, and it is impressive. It has also been extraordinarily, likely even unusually expensive to do so. Many companies throw in the towel by then.
I was thinking that dependency injection would be helpful for this. If you have time, could you elaborate a bit more regarding the Employee example from above?
While I think there are definitely situations where the original process is so dumb that automating it can't help but remove jobs, there are also plenty of situations where automating the basic parts of a job lets the humans deal with the more complicated parts of it more effectively. In the past, programmers had to write everything in assembly (if they were lucky). The invention of the compiler didn't cause there to be fewer programmers, it allowed programmers to write better and more complex software, faster.
MemoryCache will handle expirations for you so I would go with that.
Create a whole bunch of people, serialize them to json and write to disk. Read the file, parse the people, find the oldest one, the youngest one, find what age is most common, median, average. Sort them by age, by name. Just learn to manipulate data in different ways.
Removed: Rule 4. Maybe you'll get some luck in /r/programmingbuddies.
&gt; lowest version available and be OK. That's not how this works.
Agreed. And that would be part of selling the change to the business. However there is quite a lot of code that can be considered sub standard but still works as far as the business is concerned. It's knowing where to draw the line is the mark of a good developer
Agreed. And that would be part of selling the change to the business. However there is quite a lot of code that can be considered sub standard but still works as far as the business is concerned. It's knowing where to draw the line is the mark of a good developer
Some simple ideas are a tipping calculator, a mortgage amortization calculator, Celsius to Fahrenheit temperature scale, an age calculator where you enter in your birthday and calculates years and days of your age. 
My favorite pastime is getting friends to play my little game "Safe Mode Adventure". The program contains 20 folders with 20 subfolders each, all of which contain between 50-100 fake files to throw off the player. When the program is run, a random vital system file is moved to one of these folders and the program restarts Windows. The player must then go into Safe Mode and identify what's missing, find the moved file in the sea of the game's files, then move it back to where it belongs. Schools across America are looking into implementing my game into their curriculum, as a computer literacy course.
That is a very large topic to be honest. I would google some stuff on abstraction and dependency injection. Those should probably provide exaples for what you want to do.
Hard coding values can be acceptable if they are constants. I recently wrote an assembly that has two properties with private get; and set; for username and password. Then I provided default values. But they can be overridden.
That sounds right! I will probably have to spend a day reading and then just start working on the code and hope for the best :) Refactoring is always a possibility later.
There's pretty much an endless amount of things to do. While I'm still pretty new, I've done a lot of these. C# program that writes batch files and other scripts (why not?) Program to move one file to another location Can even make your own cmd console (it just calls windows cmd but allows for your own input). Program to iterate through the lines of a .txt file and spit out the lines to a console. A lot/most of my own little one-off programs applied mostly to windows' cmd console. Either way, this helped me to learn how to use just basic usage of the C# language. I'm sure other programmers here may have more suitable and widespread things to start with (if they're will to put them out there). A lot of my programs were things I already made in a .bat file, but wanted to convert it to C#.
I'm not a good programmer. Yet I keep getting hired
Building a Calculator application. Start simple with simple functionality like +, -, x, and ÷. Then advance it forward.
This only applies if your talking about programming for some business, otherwise why should I look at anything from a "business point of view." Do you find developing business software more interesting? 
What is the problem you're trying to solve?
What part of "in SOME cases" don't you understand?
I have never once in 43 years of programming not had a manager come to me and say "okay, this is great, but now add this feature," after the program is complete. If the program is not over designed, this means redoing it from scratch often. If it is, usually only fairly minor changes are required. 
That is circumvented by having an adaptive and malleable design. 
...which in my experience means overdesigning it a lot.
&gt; (My standard example: if you're building a help desk system, if someone calls in, you don't make a "ticket" record, they're not going to a movie, you make a "call" record, because they called, and this reflects reality.) Can you explain more? Sure you can make a call record, an email record, a person stopped by my desk record, a customer on twitter calling our company out record, a boss pulled me into a meeting and gave me a directive record, etc. Eventually though you're going to want to abstract all that and put it into some object. Call it a problem or a ticket or a change request or whatever, it still should be there.
Just basic string comparison and string operations. The tags are well defined, the content within the tags is static and doesn't need to meet an additional filter, the transformations on the that content is also static. I'm curious as to how you came to the only alternative being HtmlParser, unless I am not understanding how the strings are being gathered, but even then it's not necessary. I would consider looking at the documentation for [String Methods](https://msdn.microsoft.com/en-us/library/system.string_methods\(v=vs.110\).aspx) in C#. Substring, IndexOf, and Split are where I'd start. Then for the manipulation, `"Anything".ToUpper()`will turn that into on the `ANYTHING`. For the record, it's not that regex is a bad tool for this, or is incorrect in some way, it's just easy to mess up, and extremely easy to use inefficiently. This is better now than it used to be.
My experience on StackOverflow: * Spend more than an hour creating a post, attempting to pay attention to every detail to avoid SO wrath. * Immediately: `-1` * First response: *"What are you trying to accomplish?"* `-2` * *"Well, I want to know how to do what I have in the post. The reason is because I need to do XYZ."* `-5` * 2nd response: *"You shouldn't do it that way."* `-7` * *"I wish I could go back in time &amp; tell the several devs that implemented the system the same thing."* `-10` * 3rd response: *"How do you expect us to help you when you when we aren't able to discern what `DoSomething()` does?"* `-14` * 4th response: *"It's a duplicate of abcxyz."* `-19` * *"No, it is not a duplicate. Let me spend the next 10 minutes telling you why both the problem &amp; the solution in the linked post is not relevant here."* `-29` * &lt;crickets&gt; * After 5 hours of dealing with this bullshit: *"Fuck it. I'll ask Reddit."*
I'm pretty sure you were downvoted by a StackOverlord.
I am an admitted SO-tryhard, but the way I see people describing Stack Overflow makes me think I am using an entirely different site. Like in this case, I would have marked it duplicate also, so I guess I'm part of the problem? But I don't see why it's not a duplicate. And I rarely see anything that looks like ass-holery on Stack Overflow. And when I do, it's usually moderated to oblivion within minutes.
Ok this is exactly what I thought you were going to say 
Dependencies are just that. Dependencies. A lot of times when changes happen there are "breaking changes". Method renames, etc. Each version can have different usages, different outcomes, different methodologies even. You need to be sure that what you need is still present and working the same way in the version that dependency you want to use.
That's literally the same thing as saying "I learned how to write english. What story should I write?"
&gt; Eventually though you're going to want to abstract all that and put it into some object Are you though? Sometimes you will, sometimes you won't. *Eventually* you might, but right now, when starting to build out the system, abstractions can make the system harder to reason about, so initally lets use some obvious names because naming things is fucking hard. Are you definitely going to need an abstraction for the `Call`record because you already know the types (e.g.`EmailRecord`, `StoppedByMyDeskRecord` &amp; so on)? If so, you go for it. 
You're better off posting requests for debugging help like this on reddit. Stackoverflow is a Q&amp;A site for specific technical questions that multiple people might be interested in, and 'I made a mistake somewhere, please point it out for me' isn't really suitable for that format.
Most likely a 25 year old that been coding for 100 years. 
I understand that; and I have a good set tests to determine if my package is working as expected. So its fairly trivial for me to change versions. Perhaps a more concrete example would be helpful since I realize my original question is fairly general. I have a reference to [https://www.nuget.org/packages/System.ComponentModel.Annotations/](https://www.nuget.org/packages/System.ComponentModel.Annotations/) because I'm using the \`\[Table("table")\` attribute. That attribute is in many versions of this package. I'm currently on 4.5, but my attribute exists all the way down to 4.1. My question is: is there any advantage to consumers of my package if I'm on a higher or lower version of this package that they might also be using?
Hahahaha, yeah my whole thing is if a person thinks the question is stupid or wrong or what ever the case is to upset them, Don’t bother with it just keep it moving. Let someone else help. 
I was a little cavalier in my wording -- what I mean and should have said was -- there are many versions of several of my dependencies on which I could reference. I have a good set of tests cases to confirm my package behaves correctly targeting each of them. My question really is there any advantage or disadvantage to consumers of MY package if I'm referencing a specific package version? See my example here: [https://www.reddit.com/r/csharp/comments/92dana/as\_a\_package\_maintainer\_is\_there\_a\_reason\_not\_to/e35lq9b/](https://www.reddit.com/r/csharp/comments/92dana/as_a_package_maintainer_is_there_a_reason_not_to/e35lq9b/)
And I wasnt claiming that the html parser is the only other way. I just didn't want you to say oh heres a link to this html parser. Lol if I were to do anything. Id separate the string between the tags, exactly like I did above. And then write a new string with regex with put the tags, (like I did above) and then use a linq expression to replace all incidences 
Please show me where the linked article shows a solution to my problem and I will post an apology to SO and all the users. 
&gt; Eventually though you're going to want to abstract all that and put it into some object. Call it a problem or a ticket or a change request or whatever, it still should be there. The abstract superclass is *contact*. Unless you're running a helpdesk for a movie theater, there's never a *ticket*. A user phones you, so that's a phone call object of superclass contact. They describe symptoms to you, so you note them on the *call* object and it gets attached to a *problem* object (of superclass *issue*, another example would be *change request*) with a general description. *hardware* objects and *software* objects can be attached to the problem object. (This allows you to assemble a report later showing if any particular hardware or software uses a lot of support time, so you can tell management "Joe's computer uses 5x as much support time as anything else, so either Joe needs more training or he needs his computer replaced. The notes are all helping him with basic stuff, so he must need training. Either he gets training or his department can pay for our time out of their budget." Or "we spend as much time supporting Microsoft Access as everything else put together. It should be replaced with something more comprehensible.") When the second and third users call in to report the same problem ("The network is down!"), those call objects get attached to the same problem object, so you don't get 3 techs working on one problem by accident. There's never a *ticket* object unless you're handing people a numbered piece of paper that admits them entry into something, at which time you can note that in the computer, but that's not part of the help desk. 
&gt; Never promise a date it will be finished Perhaps better rephrased as *"Don't promise a date when you are in a hurry"*, for example, you're boss catches you making a coffee in the kitchen and asks you for an estimate or deadline. The correct and only answer is *"I'll get back to you on that."* However, you do actually have to get back to your boss, but at your own pace. You should be able to ask for time to complete an estimate. You should be able to give a real estimate when you've taken stock of all requirements and functionality, preferably not from a half-arsed brief with a fuckton of information missing in passing conversation.
I’ve seen many a project be announced two weeks before it’s supposed to be launched only to be pushed back another month because of various things no one foresaw originally. If this is a game for example people who are looking for it will get mad. That’s why I at least think that you shouldn’t be specific. Your correction is also valid.
When starting a new job, you have no knowledge of the poor management, unrealistic deadlines, shifting requirements, etc, etc, that impacted the code base. Complaining about existing code just demonstrates ignorance of the way things work in the real world - and of course makes your team mates hate you. I can't count the number of times I've seen someone ace a technical interview but have no idea how to get anything done outside of a clean whiteboard. I can count the how many times I've been on a project where code quality didn't suffer due to bad requirements gathering, flaky managers, unreasonable timelines, coworker illness, etc.: zero. 
If you are responsible for writing briefs, specifications or requirements, always try to explicitly outline assumptions and caveats. For example, *"In Phase 1, there will be no support for multiple languages or currencies. However will be possible in future phases but subject to extra time and costs."* This will help you define the current *boundaries* of the project and when you demo to stakeholders will avoid them saying phrases that will put you on edge like *"I thought it would support this feature".* Ensure you have been crystal clear about what was *discussed* versus what actually to be *delivered*. 
If it can run on a Windows phone you might be able to do it in browserstack. If your hardware is beefy enough, you might be able to spin up several low-powered VMs but I don't know if the boorish networking will behave "normally" or if it will be unrealistically fast because the peers are all on the same hardware
The underlying point about making the data model align with reality is spot on, though the example may not be the greatest. In this case, if the only way to get input into the system is a call then the model is a call record. Make the model align with reality. If later the system is enhanced to allow email input cross that bridge then and update the model to reflect the new reality. Does the system need to distinguish between the two then have two record types. If not, rename the model to reflect it isn’t just calls. If two models, do they share common information that the rest of the system expects? Then add a third ‘base’ model. 
It needs to be made on a situation by situation case... How would you know what those changes are in the versions without looking? I think you're missing something fairly substantial here, but can't place my finger on it to explain to you.
I understand your reasoning RE Ticket. In the modern world, a ticket has become a receipt proving payment that one only uses to gain admission to a theater or stadium. I understand that when building a object model you want it to be a clear and intuitive representation of the real world equivalent. But I still think your complaint is a personal preference issue that is very specific to a certain problem and it doesn't inform other attempts at naming things clearly and intuitively. For example, in the object model you laid out in the comment I'm replying to. You have an issue superclass with a subclass problem. Is this intuitive and clear? Both issue and problem are synonyms. I'm certain most programmers working with this model would get them confused often and would have to think to remember which is which. In general I agree with you. You want objects to be a good, intuitive, and clear representation of the idea it tries to capture. In reality, however, these things get messy very quickly. As an aside: If you look at the etymology of the word ticket, the original denotation is exactly how it's used in a call center context.
&gt; And THAT'S why I started doing cocaine. What are you trying to accomplish?
I'll add my thanks as well for this reply - I'm a bit new to professional dev work, and your reply has got me brainstorming on some ways to improve my own work
Maybe putting it into a docker container and spinning up a bunch of them?
FWIW, I agree with you. They could have just told you to check Location for null before trying to access its properties, e.g.: foreach(var log in Model._UserActivityLog.Where(l =&gt; l.Location != null &amp;&amp; (l.Location.Contains("C") || l.Location.Contains("B")))) { }
I'm using a small sliver of functionality. So it has not changed much from version to version, I'm aware other things may have hanged in said dependency and thus my question. How does my selection of System.Componentmodel v4.5 impact consumers of my package vs. If I picked 4.1 or 4.3? Does it matter to them? I know they'll get the implicit reference, but are there any other side effects? 
Yes literally exactly the changes that are discussed in that version.
The thing is, the very first response is actually a good question. There are far too many people who ask [XY problem](http://xyproblem.info/) questions without stating why they're doing it this way.
Agreed. An impressively written piece of useless software that does nothing is... still useless software that does nothing. You get no points for technical poetry if the output is something. I one wants. 
I would aim to keep it simple. Internally just get the data and create a few method that are as basic as possible, crud if you will. For the Externally facing APIs use graphql or something to map it to what the consumer wants. Later on if you need to extend it, it'll take a few minutes to do the mappings. far simpler to add a api when required rather design for infinite future conditions. Simple code is extremely manageable 
This and spinning up vms was my initial thought - Maybe something I can script with powershell. Thanks. 
I’m going to look into this - it was one of my initial thoughts. I should be able to configure hardware settings and network speed; but didn’t want to use up resources. This may be the best solution - or maybe using containers. 
Make an ATM machine. 
Got it . Thanks for sharing. 
No problem!
Probably a good 50% of my job is actually figuring out what needs to be built. I've come to enjoy working with different departments at my company because I actually care about what I can build them to make their lives easier.
As if you'll even have the chance. I can't remember the last time a date wasn't already promised by a salesperson before a project began.
This looks like JSON string. So you'll probably need to do the following: 1)Create a simple class with email, password and redirect properties, then create an instance of it. 2)Serialize this instance to JSON. [you can use this](https://www.newtonsoft.com/json) 3)Insert it into the body of your request. While you can do it manually, i'd recommend using [this](http://restsharp.org) as it will be much easier.
So I just dealt with problems related to testing and the lack thereof today. I wrote unit tests against an interface that I mocked, and based on the interface, my code works, but the interface implementation that we're using in reality (outside my unit test project) is broken. I feel like an ass for depending on an interface to be properly implemented, thinking "it's in an API and I just want to verify I'm calling it properly." The implementation calls a web api via http but fails to properly format the request uri. What are your thoughts on this? Im irritated because the implementation should implement the damn interface, and it's failing to do so, but all I wrote were unit tests against a mock. To be clear, the environment I published to was a QA environment. There were some heartaches with cleaning it up, but nothing major. It didn't affect any end users or testers, and I used feature flags so that I could disable failing features. 
you most likely need to encode it as part of the form body (something like `application/x-www-form-urlencoded` most likely). can you post the headers?
 if (money = 0) { Console.WriteLine("YOu're broke, yo"); } Did I do good?
No worries, and that makes sense.
Thank you for your response. Do you know if I'd still be able to manipulate the request in abot if it's a RestRequest as opposed to a HttpWebRequest? I have to overwrite a method in abot, eventually.
Here is what Fiddler gave me when I manually logged in: `GET https://theurlused HTTP/1.1` `Host: theurlused` `Connection: keep-alive` `Upgrade-Insecure-Requests: 1` `User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36` `Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8` `Referer: theurlusedbutwithmorecrapattatchedtoit` `Accept-Encoding: gzip, deflate, br` `Accept-Language: en-US,en;q=0.9` `Cookie: some cookies in one long continuous string (I think I can show you them if you need to see them but I'm paranoid that people would be able to figure out what the login credentials are if they're posted here. Clearly I know how cookies work and am not just tired.` `DNT: 1 //no idea what this is` Here is what I've put in my code to try and replicate the manual request: `HttpWebRequest login_request = (HttpWebRequest)WebRequest.Create("https://theurlused");` `.` `.` `.` `//headers` `login_request.AllowAutoRedirect = true;` `login_request.Accept = "application/json, text/javascript, */*; q=0.01";` `login_request.Headers.Add("Origin", "https://theurlused");` `login_request.Headers.Add("X-Requested-With", "XMLHttpRequest");` `login_request.Headers.Add("X-SC-Touchpoint", "checkout");` `login_request.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36";` `login_request.ContentType = "application/json; charset=UTF-8";` `login_request.Referer = "https://theurlusedbutwithmorecrapattatchedtoit";` `login_request.Headers.Set(HttpRequestHeader.AcceptEncoding, "gzip, deflate, br");` `login_request.Headers.Set(HttpRequestHeader.AcceptLanguage, "en-US,en;q=0.9");` there's more, but those are the headers
You think finding a project to code is hard? Just wait until you have to name your classes. 
ok, I don't see anything that I was exactly looking for, so it's most likely you'll need to attach that data you showed above inside of your POST request's body. follow the answer here: https://stackoverflow.com/questions/9145667/how-to-post-json-to-the-server and it should work. BTW I don't think RESTsharp works here since it's not a RESTful API you are trying to interact with (afaict). if you really want to be doing this type of stuff you should be working with HttpClient or something, and only dipping into httpwebrequest when you really need low level access to the streams and whatnot from the server.
In a case like that you can usually wrap the odd code in a method with a descriptive name. If someone really needs to understand how those couple lines of code work they'll know what the goal was and can probably figure it out from there. [Unless of course your code is optimized to use the physical quirks of the drum from which your compiled code runs.](http://www.catb.org/jargon/html/story-of-mel.html)
It feels like I should be using container.RemoveAll() but that just crashes out on me.
Can I haz async constructors?
compilation error
¯\_(ツ)_/¯
You dropped this \ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
You should be able to build the JSON body manually with Postman. It's a free download and works wonders with interacting with APIs. I use it religiously for testing my own APIs when I need to hit breakpoints in my code. 
I dunno if I can agree with a lot of these. I had to go make sure it was /r/programmingcirclejerk. I totally agree with: Use the simplest, most comprehensible technology available that will solve the problem (Yes!) Thoroughly understand the problem before you start to work on code (Yes!) I partially agree with: Too many cooks in a kitchen - but you wrote it as if you're an all-knowing my way or nothing asshole developer. Working with a junior engineer (great!) they learn to do it your way (how do you know their way isn't better?) doing it because it's "cheap" (WTF), gives them an opportunity for promotion (Yes!). Outside of that... &gt; My standard example: if you're building a help desk system, if someone calls in, you don't make a "ticket" record, they're not going to a movie, you make a "call" record, because they called, and this reflects reality. I say use whatever term the business itself uses. If you call it a widget because that's what it really is, but the business calls it a whatsit, then you're going to have some major communication barriers for future requirements when someone 5 years after you're gone has to modify that area with a business person who wasn't ever there. Not a widget in sight, but lots of whatsits. BTW, every helpdesk system on the planet calls it a "ticket" - it's never just a phone-call and not potentially an email, live chat, from someone's Amazon Alexa, a web form that was filled out. All of those become a "ticket". It's right there in the standard definition: "(in information technology) a request logged on a work tracking system detailing an issue that needs to be addressed or task that must be performed." This totally sounds like someone who thinks they know better than the rest of the company and wants to do things their own way. &gt; If your software seems to eliminate jobs, you're probably doing something wrong. If your software seems to eliminate jobs, you're probably doing something ~~wrong~~ right. The point of software is to reduce complexity freeing up the (expensive) human time that could focus on more important tasks. In my distant past I worked at a large corporation that had over 300 batch jobs that executed every night within one division. The jobs were written over a decade+ period that all outputted different log files in various ways / formats. There were 4 support-engineers that had to spend their entire day combing through each one of the log files to see if any error messages were present, documenting the error, handing it off to another team to fix within their backlog. Instead I created a simple tool that ran every night trolling through the various log files to find error messages and created a dashboard that listed out every job with a green light / red light. Suddenly, those 4 poor souls could instantly see what (if anything) went wrong. Two of them were now able to actually fix bugs rather than create backlog items which improved operations drastically. Two of them were free to be promoted to work on products since there was no longer the necessity to have so many people doing something so trivial. I am totally proud of eliminating their "jobs". &gt; Data model first! Then build the user interface and storage to reflect it. This tends to eliminate a lot of stupid errors. You are creating an artificial barrier during that very important early communication. I can take a bunch of wireframes (bonus points if they're interactive) and bring it to the an executive or the lowest level contract call-center employee and have a discussion. I show anyone other than an engineer a data model and they won't understand or blanketly say "yeah that makes sense" in fear or saying anything else will make them sound dumb when that's not what the business wants or needs. It's on par with spending days (weeks? months?) generating giant UML and sequence diagrams that no one outside of engineering can understand only to realize once you start coding it that it's a nightmare to work with if not just completely wrong. &gt; Overdesign. It's much easier to design a potential feature into the data model now and not implement it in the interface than it is to rejigger the whole program to allow it later... Again no. Build the reasonably simplest thing possible unless there is an almost-certain known expansion in the near future (18 months or less and already discussed as part of the roadmap). You have simply just created something way more abstract and confusing to understand and blown lots of time and money for nothing. If I count the number of times in my life where something that was over-engineered for use cases that never materialized exhausting an enormous amount of time and impossible to understand vs. a code base that was so simple we had to rip it all out when new requirements came to light it would easily be a 10:1 ratio. You just sacrificed weeks of time for everyone on the off chance that one day *you* could look good. &gt; Don't be afraid to rewrite a library if the one included with the language doesn't do what you think it should. Just because Microsoft (for example) thinks they know the right way to put structured data in a SQL database (for example) doesn't mean that their methodology is optimal for your project. Are you kidding? Never ever rewrite your own library unless you absolutely must. It's similar rule #1 of cryptography: never write your own cryptographic library; you will fuck up 100% of the time. Use the defaults provided by the framework (ADO, Entity Framework using your Microsoft + SQL example) or choose a well-regarded, actively-maintained, battle-tested, open source library (Dapper). The business didn't ask for you to spend time recreating an ORM for your call center ticketing system. With this very example, I have seen a custom in-house ORM based on XML files which defined the stored procedures, the parameters, and the output data structure which then used reflection to map onto objects. It was a nightmare to maintain. No one outside of the company (any new hire) was able to use it. You know what my new hire will be able to use instantly? Dapper, ADO, or Entity Framework that are all highly known with tons of information a Google search away. Only build your own as a last resort when no other option is available. &gt; Write reusable code. If you have to spend 50% longer to make the code in your project reusable as opposed to making it all custom, do it, because you'll save that time back later. Only worry about making code "reusable" when you have more than one instance of the same problem. What might be "reusable" to you in your understanding of a design might in fact be completely wrong and suddenly you end up with 7 "reusable" data access patterns. Alright, I'm done ranting. Downvote away.
This sorcery is amazing. Where can I learn these techniques?
Sleep.
I really don't want to argue with you, StackOverflow has some not nice people which gives it a bad name and the community is very strict about what can be posted which is difficult for beginners to understand how to ask good questions. Don't take it personally, use Reddit to get help for now until you're a little more confident with programming and then try using StackOverflow again when you can understand and diagnose bugs with more confidence.
Why is it bad if the software seems to eliminate jobs?
Wow that's really interesting. I expected it to be way above my head, considering it's using reflection, however your explanation was really clear and concise. Great post dude.
Calculate the date of Easter for the next 50 years. Balance chemical equations. Sort words in a paragraph by frequency of repeating letters. Decode an image of a UPC code.
&gt; Where can I learn these techniques? Techniques like what? Haha
Really, really nice article. Keep up the good work! This sort of article would be great on CodeProject, or on StackOverflow under a question "How to calculate the heap size of managed objects.". On StackOverflow, its it entirely legitimate to do a Q&amp;A style entry where you answer your own question. You can then crosslink to other similar questions so if anybody wants to solve this problem, they might just have a fighting chance of finding your exact article with a few minutes of searching.
&gt; On StackOverflow, its it entirely legitimate to do a Q&amp;A style entry where you answer your own question. You can then crosslink to other similar questions so if anybody wants to solve this problem, they might just have a fighting chance of finding your exact article with a few minutes of searching. [Like this?](https://stackoverflow.com/questions/51569890/how-to-calculate-the-heap-size-of-managed-objects) 
I can't provide you a full answer to your question, but maybe a couple of pointers/experiences. I did one medium sized WPF app where I introduced the DI Containers as a ServiceLocator, however as far as I recall I mostly used this in conjunction with "MediatR" to wire the handler upd, and inject the mediator to my view models. The EF Context is scoped to the mediator handler (which dependencies are also injectable) through a decorator/pipeline. I read some time ago that Mark Seeman is somewhat okay with the ServiceLocator in those specific scenarios. I didn't find it. Here is a comment from 2011 in his blog posts: http://blog.ploeh.dk/2011/08/25/ServiceLocatorrolesvs.mechanics/ (CTRL+F MVVM) where suggests an abstract factory as an alternative. In Angular 2+ it isn't uncommon to inject a container ref (Injector) to the view model/controller/component, which I think of as a service locator. What I mean by that is who cares if this is an anti-pattern if it makes the project better at the given time, and maybe has some calculated debt which your team agreed upon, and can be easily refactored later. 
Not from a Java programmer 
I use RESTsharp to automatically login into few different places for testing purposes. While I agree that it may not be what this library is primarily for, it works fine.
It's a .NET legend
If you use WPF, use MVVM. If you put all you code in the forms ('under the buttons') its nearly impossible to use DI. Im not a fan of servicelocator pattern, its not DI in my book. Its just a fancy way of making everything global... 
I'm not familiar with abot to say. If it absolutely requires HttpWebRequest to work, then RestSharp is not a great option, since you'll have to do a conversion; if this is the case, [advice by itsgreater9000](https://www.reddit.com/r/csharp/comments/92hysp/httpwebrequest_post_login_help/e362e3a) may be a better idea. 
https://codeaddiction.net/ is a place for just this - writing articles in markup and sharing them easily. Also with discussion capabilities. Oh, and Adblockers are not needed.
Thanks for sharing
I use the service locator to get the main windows view model and everything else is injected from there. So I take a func for each view model I will need to create and use messages to switch them.
on first glance this looks good
Thanks
Memory cache has a caveat with the expiration logic https://stackoverflow.com/questions/12630168/memorycache-absoluteexpiration-acting-strange Keep it in mind if you use it
I wonder what `BaseSize` actually contains/how it is calculated. On x86 (desktop CLR) it appears to be 14, which would make sense if it includes `4 byte header + 4 byte MT pointer + 4 byte length + 2 byte null terminator`. But on x64 it reports as 26, which doesn't match `8 byte header + 8 byte MT pointer + 4 byte length + 2 byte null terminator`. The difference between the address of the first char and the address of the method table pointer is as expected, 8 bytes on x86 and 12 on x64 (pointer + int32 length), so the additional bytes aren't part of the header. I doesn't seem to be padding either, since it doesn't vary with string length and the calculated heap size is not necessarily a multiple of 4 or 8 neither on x86 nor on x64.
It was a genuine statement, show me where that article explains how to troubleshoot or provides an answer to my question... no one is arguing, I would like to know where I was wrong. 
&gt; Just wait until you have to name your classes. https://www.classnamer.org
Thanks for taking the time to break it all down!
Fine. First, you didn't actually ***ask a question,*** which is one of the requirements of posting on Stack Overflow. You just said: *I get a NullReferenceException here* which is not actually a question, it's a statement, but ok, we can infer the question as being: "How can I prevent the NullReferenceException being thrown in the following code". Second, you said: *I have searched as much as i could looking for an answer so this is my last resort.* which is exactly the sort of irrelevant fluff people add to questions that causes them to get downvoted. Third, you said in the comment: *and this is not a duplicate other question are for Where(x =&gt; x.something == something) not Where(x =&gt; x.something.contains("something")* which sounds like you're telling more experienced programmers they're wrong when it's obvious to everyone reading that you have no idea what a NullReferenceException is, how to debug it and why it's being thrown, and yet you still have the cheek to be rude to the people trying to help you fix your problem - in their own time for free! So, it's obvious you don't know (or didn't at the time the question was posted) what a NullReferenceException is and you don't know how to fix it, so your question should have been phrased: I have the following code: // code here... But when I run the code a NullReferenceException occurs. What is this and how do I fix it? That is the exact question linked to as a duplicate and here is how that answered the question. It told you how that exception is caused: &gt; You are trying to use something that is null. This means you either set it to null, or you never set it to anything at all. It gave you a simple example to cause one: string foo = null; foo.ToUpper(); It told you how to solve it: &gt;How do you find the source of a NullReferenceException? Apart from looking at the exception itself, which will be thrown exactly at the location where it occurs, the general rules of debugging in Visual Studio apply: place strategic breakpoints and inspect your variables, either by hovering the mouse over their names, opening a (Quick)Watch window or using the various debugging panels like Locals and Autos. There's even a section about foreach loops and nodes from an XML document being null after reading them in, which is extremely close to the code snippet you provided. For all we know you might even have been reading in your data from an XML document! Then there is a section on ways to avoid, which includes the null condition operator, which, if you had used, would have solved your problem. That is why it is an exact duplicate, because the advice in the accepted answer from the other question could have been used to identify the bug and provides the tools to fix it. A duplicate. Rant over. It was a duplicate, but that's fine. It's ok to post duplicate questions. What's not ok is arguing with people with much more experience than you when you don't know what you're talking about. It's fine to question, and it's fine to ask for help, but don't tell people they're wrong when you're still a beginner yourself (unless you're really confident you're correct!)
It's really late now and I forgot about this thread, but I decided to go with this book. Thank you!
You may want to change your source of randomness (entropy) as in the current state it always uses same seed and the pseudo random Random will feed you the same taco every time you starts the app over. Also perhaps worth looking into cryptography namespace for better random generation. 
Following your link, I was able to get the automatic POST request identical to the manual one. At least, I really think so. The way I'm comparing the two is going to Fiddler and looking at the first POST request I see in the manual traffic data and going to the Raw tab. The order is different, as in the manual raw lists host, connection, content-length, etc, while the automatic one lists content-length, host, connection, etc. I don't know if that matters. The string at the end of the raw POST request data in both the manual and automatic version looks identical, but maybe looks can be deceiving? Now what doesn't make sense is that the manual login sends out two post requests, one right after the other, before a response comes in. The second request has a content-length of 8811, while the one I was copying and the one I was able to replicate has a content-length of 78. So, wtf. The only way I can actually get a response in my automatic request is to change the post url from r/https://theurlimusing/a/bunch/of/crap/here (which is what I see in the manual POST request) to r/https://theurlimusing. I thought doing this: `login_request.AllowAutoRedirect = true;` would let this not be a problem. One other important detail is that the response I'm getting in my automatic POST request is more similar to the first response I got in my Fiddler feed with the manual login that I initially ignored because it didn't even come after any POSTs. It came after a CONNECT, GET, CONNECT, GET, and then finally the GET (the response). I didn't realize I could get a response without a POST. Do I have to write another POST request? That doesn't make sense. I thought it was one request, one reply. Not two requests and one reply. Can I make my first request generate a second request? Maybe I'm just reading Fiddler wrong.
Here's a sneak peek of /r/https using the [top posts](https://np.reddit.com/r/https/top/?sort=top&amp;t=year) of the year! \#1: [Happy Https day!](https://np.reddit.com/r/https/comments/91l15x/happy_https_day/) \#2: [Cheapest way to setup https on website?](https://np.reddit.com/r/https/comments/7zatj0/cheapest_way_to_setup_https_on_website/) \#3: [Sketches](https://www.youtube.com/attribution_link?a=lNVCv-uPC5Y&amp;u=%2Fwatch%3Fv%3DUZXQ13eQmX8%26feature%3Dshare) | [1 comment](https://np.reddit.com/r/https/comments/8xu0uh/sketches/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/8wfgsm/blacklist/)
I get so tired of reading about the pattern/anti-pattern nonsense. Everything can be an anti-pattern when used improperly. The ServiceLocator doesn't make everything global. All of my exposure with the ServiceLocator is through the Prism framework where it provides a facade and alternative to injecting the DI container to the class. Injecting the DI container isn't often needed, but you may have run-time logic that determines a type to be instantiated. In my opinion, one of the main reasons to avoid ServiceLocator is that it inherently complicates unit testing. It does so, because you have to setup the ServiceLocator. You can mock it through the IServiceLocator instance, but you're now requiring your unit test to have internal knowledge of your implementation. TL;DR Avoid the ServiceLocator when there is better alternative, but don't throw the baby out with the bath water. 
Think about what would make your life better and start to program it. Dont care about myriad of other maybe better solutions out there, dont even look them up to see how they work and function. Start small, build up piece by piece, post your progress and get feedback. An idea: "Stuff i downloaded from the internet organizer" People usually download all sorts of files from the internet every day and it happens that your "Downloads" folder is piling up with shit you downloaded. Make an app that does this: * watches the download folders for new files * organizes files by their file extension and date * make a notification with an actionable button/tray icon that will allow you to delete or archive files older than X days * make it a dashboard for this that allows you to search,preview,share this files with your other devices. etc
Can you tell us what do you mean by new, cutting edge or whatever you think you are missing out ?
`System.Random` seeds from the system clock. It will be different each time it starts. One of my plans is to abstract the source of randomness so other crypto libs/algos can be implemented.
Hm, did I mixed it up with Java implementation? I was sure the seed should be given explicitly. Nvm then. 
Desktop apps benefit from DI just like everything else. Admittedly structuring the app and keeping track of registrations in a large app can become a nightmare. I suggest you use MVVM. Most important however, is that you use good n-tier architecture and be careful to keep your business logic in your service layer - not your ViewModels or Views. I wrote a wrote a small library that abstracts away some of the complexity. [AdaptiveClient](https://github.com/leaderanalytics/AdaptiveClient) is basically a wrapper around Autofac simplifies and/or automates many kinds of registrations. There is als a [working demo](https://github.com/leaderanalytics/AdaptiveClient.EntityFramework.Zamagon) that illustrates using AdaptiveClient with a WPF application. 
Ayy no worries at all glad to be of help! Have you gotten through much of it yet?
It **can** be given explicitly. But if not, then it defaults to the system time.
Yepp, I was not aware of how default works
Yeah, without looking, you may be right about Java needing a seed. It's been too long and I also I have no desire to look through Java docs.
I had to use the DocuSign api briefly, and I really wish they had included XML comments. Their code relied on so many special values that should have been enums that it was impossible, and we dropped it for another API. Point is, don't knock XML comments. They're probably more useful than you realize.
Very interesting article. The code complements the explanation very well. Can't wait to try this out myself.
Can someone send me a line of code or something on how to create a calculator application? New to C# and im still learning the basics...
Nice theme, can you use it for Typescript also? 
Would it be overkill to add labels or assign sides? Something like: ```C# var labeledDie = new Die(6, "my", "die", "has" "some", "string", "labels"); ``` I'd need to generalize `Roll()` to return label type. I'd also need to consider int labels not being recognized as weight params.
You can use the theme with any language on vscode
As often as possible avoid writing strings or other special values into your code. Make them constants, enums, or static readonly objects, depending on the use case.
That red looks like blood. Honestly this theme looks like construction site to me, in positive meaning 
I would create a proxy layer that all of your peers connect to (instead of connecting directly to other peers). The proxy would simply forward requests and responses along to their real targets. But you could introduce any delay you want to simulate latency and you could programmatically stream the data slower to simulate slow network. You could also log the crap out of every piece of data flowing through it. You could give it a UI and allow you to change the settings on the fly. Like a slider for network speed. VMs are a big pain and you won't be able to spin up more than a handful of them anyway. See my awesome drawing for what I mean. Left side is P2P, right side is fake P2P with everything flowing through the proxy. [https://imgur.com/a/ghDyynP](https://imgur.com/a/ghDyynP)
Nice, gonna try it out!!
ServiceLocator isn't di, it's IoC. Di is a form of IoC just like ServiceLocator.
When you say "fixed dependency hierarchy" and "12 levels deep", I feel like you aren't necessarily grasping how DI works. The depth of your object graph shouldn't matter. You just need to register your types with your container, and when you resolve something, the entire graph underneath it should be resolved recursively. If you want to avoid having all of your registration in a single file, most DI libraries have some kind of "module" system, and they also generally have "discovery" capabilities. Desktop applications are definitely a use case for DI, *especially* large ones.
You can use `System.IO.Directory.EnumerateFiles(directory,pattern,SearchOption)`, loop on every string returned from it and match it with a regex pattern `System.Text.RegularExpressions.Regex.Match(filename,regexpattern).Value;`
This seems like a pretty neat small project.
Have you tried google? This isnt a particularly obscure question, so you are bound to find answers. Try `Directory.GetFile` and `RegEx.Match` like [this](https://stackoverflow.com/questions/738543/how-to-extract-a-substring-from-a-net-regex) I got to these by searching "c# get files in folder" and "c# get substring that matches regex"
This sounds like homework. What have you tried? Do you know how to get the files in a folder? Do you know how to write a pattern?
Your class `Person` has a constructor that accepts three arguments. Now you create a subclass `Employee` which defines it's own constructor, also accepting three arguments. But you don't pass on those arguments to the base-class constructor. You'd need to write `: base(FirstName, Surname, Age)`. Besides that, there are a few other issues in your code: - Checking for `value is string` is useless, because the type of your property is `string`. Only `string`s can be assigned to your property. - When you remove the useless check you can use auto-properties instead of properties with custom get/set and a field. That will remove half of the lines. - Common naming convention for parameters is camelCase, not PascalCase.
You have a Constructor in Person with 3 Arguments. When you inheridate from a class the Constructor of the new class must set the Constructor of the base class. public Employee(string FirstName, string Surname, int Age) : base(FirstName, Surname, Age) 
Constructors aren't inherited like that and you have no base constructor so you will need to specifically call your constructor you did create. public Employee(string FirstName, string Surname, int Age) : base (FirstName, Surname, Age)
You need to specify how the params in your Employee constructor map to your Person constructor. Do this by adding ": base(Firstname, Surname, Age)" at the end of your Employee constructor signature. 
Thank you so much, you've saved me much frustration :D
This is a set based operation which means any abstraction operating on one entity at a time is going to be horribly inefficient unless your data set is too small to care. SQL is the right tool here. You need `UPDATE TableName SET IsDeleted = 1 WHERE {Condition}` with all updates to related tables inside the same transaction. Repositories are horrible abstractions outside of Create, Read, Update, and Delete of individual entities. 
Thanks a lot :)
Thank you very much :)
Thanks for your help :) 
It's entity framework 6.1. Every repository has basic methods for updating, deleting, but they only touch a single entity. Right now I need to delete multiple related entities and I'm not sure how should I approach this. So you are saying that performing such a delete operation in a service layer is a bad thing?
I have edited my code. It currently prints all file names on the console. Let's say for example I have the following files in the directory ABCDRequest_INC1234567.csv ABCDRequest_INC8901234.csv Learntocode.csv My goal is to grab 1 file at a time and extract INC1234567 from a file name if the file name starts with ABCDRequest_ and store it in a variable rather than printing on the screen 
Some examples of using ML.NET in action: https://zubialevich.blogspot.com/2018/05/classify-bbc-news-headlines-ml-net.html?m=1
I personally would write a stored procedure to do something like that. You can call those from the entity framework.
I like finding small projects and contacting the repo owner directly to see what they need/want help with.
Your suggestion would be to write a raw sql and put that into Repository, and in the Service, just call that method?
Jesus Christ I can't get it readable.
&gt; System.Random seeds from the system clock. It will be different each time it starts. Are you aware that irregardless of initial seed, the 3rd value produced by System.Random is quite often 84?
Yeah, that's the unfortunately common repository anti-pattern. It isn't that performing a delete operation in your service layer is a bad thing, it's that the mechanism provided to do so is very clumsy, inefficient, and bug prone when you need to do something that isn't CRUD. It's simply just not the right tool for the job. On solving it without SQL....I've went all architectural astronaut in the past where I created a `DeleteBy` where I could pass in an `Expression&lt;Func&lt;T,bool&gt;&gt;`, validate it for the `T` with reflection, and then dig into the mapping guts of the EF Context to generate the SQL... but it was a huge waste of time as maintaining it and dealing with the subtle bugs was *orders of magnitude more real work* than the *completely imaginary* work of maintaining a single line of SQL. EF6 exposes `Context.Database.ExecuteSqlCommand`. To avoid having to re-architect your data layer I'd just implement some `BulkActionsRepository` which would encapsulate a call to `ExecuteSqlCommand` doing what you need to do without breaking the testability of your service layer. 
https://docs.microsoft.com/en-us/dotnet/api/system.net.httpwebresponse.cookies
Installed thé theme and I must say: looking good!!!
Are you aware that System.Random has a significant issue with the 3rd value generated? https://stackoverflow.com/questions/25390301/net-framework-random-number-generator-produces-repeating-pattern
That loop is exactly what I tried and it didn't run once.
Maybe read the rest of the docs, too, and not just look at the example.
Enlighten me. I have read it and fail to see your point.
To elaborate, each class gets it own default constructor automatically. public Person() : base() { } However, it only gets this automatic default constructor *if no other constructor is specified*. When you define the Employee class, it too gets the automatic default constructor public Employee() : base() { } // &lt;-- this is calling Persion() As soon as you declare any constructor for a class, however, the default constructor disappears. public Person(int foo) { ... } Every sub class must be able to call a constructor of the base class. Since there is no longer a default constructor on Person, it must call the non-default constructor explicitly. The parameters on Employee don't have to match those on Person, but it must call a constructor on Person using the `base` keyword. For example, you could have public Employee() : base("EmployeesAre", "NamelessAutomatons", 42) { ... } Or even more parameters than the base public Employee(string given, string family, int age, string roleName, int employeeLevel) : base(given, family, age) { this.RoleName = roleName; this.EmployeeLevel = employeeLevel; }
Yeah I want to find something to contribute too!
Very helpful, I appreciate the effort thanks.
Try a simple substring: string StopAt = "_"; string FileNameSub = fi.Name.Substring(0, StopAt); This will get the first part of the filename (every character from position 0 to the position where the underscore is, and assign it to a variable FileNameSub (or whatever you want to call it). Then you can do whatever you want with that string. This will only work with files with an underscore in the name. If you wanted to find files with other punctuation, you could change StopAt to an array and do some linq filtering, or you could just use a regular expression. 
Create a cookiecontainer, and give it to the \*request\*. var cookies = new CookieContainer(); var url = "https://some.url.com/login"; var data = Encoding.ASCII.GetBytes($"username={username}&amp;password={password}"); var request = (HttpWebRequest)WebRequest.Create(url); request.CookieContainer = cookies; request.Method = "POST"; request.ContentType = "application/x-www-form-urlencoded"; request.ContentLength = data.Length; using (var stream = request.GetRequestStream()) stream.Write(data, 0, data.Length); var response = (HttpWebResponse)request.GetResponse(); var responseText = new StreamReader(response.GetResponseStream()).ReadToEnd();
File name should match if and only if the file name starts with ABCDRequest_ and I dont think what you suggested matches 
Well then Google it dude. Don't ask for advice then say no when someone suggests something. 
Overall it looks pretty good. The method names are a bit difficult to read, that dark blue on such a dark background...
This is not a significant issue unless you use it in a very narrow way, with one Random instance "chained" off another. Further, this sort of behavior can be seen in many PRNGs, since they are not designed to eliminate predictability.
Great answer. I'd like to add that you really should have integration tests (can be setup as unit tests working with an in-memory database) that verifies that the SQL is actually working with the current version of your model. 
Try like the other person said, try an overload for directory.getfiles(). Try: string[] filenames = Directory.GetFiles("C:\\", "ABCDRequest_*", SearchOption.AllDirectories); foreach (string fi in filenames) { ... Do stuff } ;
No, OP suggested creating a stored procedure in the database itself, then calling that from EF. This is the better solution as the database engine will optimise the execution plan of the stored proc, but won't if you just pass raw SQL from your repository. 
Ultimately, companies are employing too few people to get the job done already, so if your software seems to eliminate jobs, you're *probably* not understanding what the people do and how the software will fit into the process. In almost all cases software provides some functionality not present previously or enables the current staff to work more efficiently and actually get the job done in the allotted time instead of not getting it done, but if you seem to be creating so much efficiency that one or more jobs can be eliminated, it's more likely that you're failing to understand something than that you're actually speeding things up that much.
I think it’s solid. I’ve been using treehouse for about 3 months and it has been a great experience so far.
Thanks, have you been using just treehouse or have you been using other resources alongside like books and what not?
Just treehouse for the most part. I’ll watch YouTube videos on concepts that I don’t totally understand. I may order sime books but I personally prefer watching content over reading. It’s definitely worth the $ though, and has been beyond useful for me.
I've contributed to libraries that I use in personal/professional projects. My most contributions have been to [Fluent Assertions](https://fluentassertions.com/). I wanted to convert our unit tests at work, but it was missing some functions. I opened up some feature requests, and the owner welcomed pull requests, so I started coding.
Alright thanks man. 
Thank you, very insightful!
I just did this: using (var streamWriter = new StreamWriter(requestWithLoginCookies.GetRequestStream())) { string json = "{\"email\":\"myemail\"," + "\"password\":\"mypassword\"," + "\"redirect\":\"true\"}"; streamWriter.Write(json); streamWriter.Flush(); streamWriter.Close(); } Considering the whole thing still doesn't work, it's possible I did something wrong. The string at the end of the Fiddler data looks identical to the manual implementation now that I've done that. 
&gt; I partially agree with: Too many cooks in a kitchen - but you wrote it as if you're an all-knowing my way or nothing asshole developer. Different people see different sides of me. Some people think I'm the nicest, kindest person ever to walk the earth. Some people think I'm a flaming asshole. People who work for me tend to think the former. People who try to push me into abusing my staff think I'm the latter. People who have worked for me tend to stay in touch and turn to me for professional advice (both about programming and about careers) for decades afterward. Just last night a guy who used to work for me took me out to dinner, we get together every other friday and trade off who is buying. :) Today we started contacting all of our former coworkers, we want to get the gang together for dinner at a German restaurant in Springfield. People who have worked for me will tell you that I listen to opinions and generally let my people decide things (what's the point of having staff if you can't trust them?) but when there's any disagreement I will make a decision, and on some occasions I will just say "this is how we are going to do it" when I think it matters to do it my way. I will listen to dissent at that point, but no promises to agree with it. But I specialize in very large scale systems, in general I design the data model (usually with some help - if nothing else so they'll learn how this is done) and then we spend several years implementing it, so usually there is a right way and a wrong way and they're kinda obvious and my team can figure them out in most cases. &gt; Working with a junior engineer (great!) they learn to do it your way (how do you know their way isn't better?) In part, because they'll tell me. In part, because I *went* to computer science school and I *know* what they teach and I've *worked* in the real world for decades and I *know* what the differences are. I had one guy a few years ago, I hired him as a temp while he was a work/study student at college, he was going to my alma mater and studying with my professors, I knew exactly what he needed to learn in the "real world". Another guy had a CS degree from MIT and working with me was his first programming job, he kept trying to write very tight software and fighting with me when I wanted to make a more loose framework, until the boss got a hold of it and asked for a bunch of changes and my framework could accommodate them all, at which time my friend from MIT realized that perhaps doing it my way saved time in the end. &gt; doing it because it's "cheap" (WTF), Let's say my employer tells me I can hire someone. I hire a junior person, they get a junior person's salary. In six months I have turned them into a senior person in terms of skill, but they're still making a junior salary. If the company is smart, at their annual review they will let me promote them to a mid-level person and pay them accordingly, and then the person has got a raise and a promotion so they're happy, but they're still doing senior-level quality work at a mid level cost, while gaining experience. So the company is getting superior quality work cheap, and the person is getting a leg up in the world. Win/win. The guy who took me to dinner last night, I hired him fresh out of college and after one year working with me, we both left the company, I referred him to my agent, we both ended up at the same new employer, and he got a senior programmer job there. The other junior programmer there, also fresh out of college, went on to a senior programmer job too. Know a lot of people who go from junior to senior directly, with only one job under their belt? I consistently do this to people who work for me. In fact one of my recent employers specifically tasked me with seeing to the career development of the whole programming staff because of it. &gt; BTW, every helpdesk system on the planet calls it a "ticket" - it's never just a phone-call and not potentially an email, live chat, from someone's Amazon Alexa, a web form that was filled out. All of those become a "ticket". ... &gt; This totally sounds like someone who thinks they know better than the rest of the company and wants to do things their own way. Yes. Yes it is. I've been an IT director too so that particular department I know the ins and outs of quite well. I have converted a couple of helpdesks to a "ticketless" system, and while it's an adjustment for everyone, in the end everyone shakes their heads and wonders why they stayed with a "ticket" based system for so long. "Ticketed" help desks have a number of problems, including data correlation (multiple users report an issue, so multiple "tickets" are created, so multiple techs get assigned and spend duplicated effort to re-solve the same problem over and over), and (this has been very notable at every IT dept I've worked) users bitching "my ticket number is lower than *her* ticket number, so why did *she* get her problem fixed first? I'm going to your boss to have you fired." &gt; If your software seems to eliminate jobs, you're probably doing something wrong right. The point of software is to reduce complexity freeing up the (expensive) human time that could focus on more important tasks. In recent decades, businesses are pretty much always over-worked and under-staffed, so yes, while the software frees up expensive human time to focus on more important tasks, there's *always* something else they can do with that time, so if it seems like you've made things *so much more efficient* that you've freed up *40 hours per week* of work or more, without other tasks rushing in to fill the time, such that an entire person can be fired, you're almost certainly missing something important. &gt; In my distant past ... Suddenly, those 4 poor souls could instantly see what (if anything) went wrong. Two of them were now able to actually fix bugs rather than create backlog items which improved operations drastically. Two of them were free to be promoted to work on products since there was no longer the necessity to have so many people doing something so trivial. I am totally proud of eliminating their "jobs". But you *didn't* eliminate their jobs, you made their work more efficient so that they could actually get stuff done. Also the distant past is the distant past. I'm talking about how things operate today. 
&gt; You are creating an artificial barrier during that very important early communication. I can take a bunch of wireframes (bonus points if they're interactive) and bring it to the an executive or the lowest level contract call-center employee and have a discussion. I learned, the hard way, over decades of experience, that wireframes are almost always a bad idea. Business people love them and demand them, and they both waste absurd amounts of time and make the users fall in love with the wireframe. (I can't count the number of times I spent months working on software and had very good graphic designers make it beautiful, only to have the client reject it because it didn't look *precisely like the wireframe*.) I learned a technique that you draw the wireframes with pencil so the client only sees a pencil sketch, and make sure not to make the lines too straight or the boxes too perfect, and write all the text by hand, with the intent that the client won't fall in love with a pencil sketch and will understand that it's just a pencil sketch and won't be the final look. It didn't work. I had people calling my boss and demanding I be fired for fraud because the final software wasn't literally my pencil sketch made clickable. &gt; I show anyone other than an engineer a data model and they won't understand or blanketly say "yeah that makes sense" in fear or saying anything else will make them sound dumb when that's not what the business wants or needs. It's on par with spending days (weeks? months?) generating giant UML and sequence diagrams that no one outside of engineering can understand only to realize once you start coding it that it's a nightmare to work with if not just completely wrong. Hitchcock was very into storyboarding his movies, in great detail. He once said that once he did the storyboards he wasn't really interested any more, because "the movie is finished. All that is left is the tedious process of actually filming it." I'm that way with data models. I can look at a data model and know what the finished software will be like. No, I don't expect business people to be that way. I work with the business people and learn what they do and how they do it. I learn this *in detail*. I make sure I know it thoroughly and that they agree I know it thoroughly before I move on. This involves me writing a report for them about "what I have learned from you," and sending it to them for approval. (When my team did this for UPS, they replied that they had never seen anything like it, that we had shown an unprecedented level of understanding of their business, and that this made them feel very confident that we would create something useful to them.) Then I write a proposal. This describes, *in words*, what the software will do, what their new business process will look like, and how the software will fit into it. They approve this too. Somewhere during all this, I communicate, in technical terms, what I learned from the business people in business terms. (I'm not just the manager and the programmer, I'm the business analyst too.) When the business people have signed off on the two reports I have written for them, *then* work begins on the project. The approvals are generally not really important to anything but getting user buy-in on the project. A few years ago I made a system where you could describe a business process in plain English, then it would do some AI magic on what you wrote and ask you a lot of stupid questions, on the basis of which it would design the data model. It would then build the entire UI from the data model, and write a few of the functions for you. It would get notes from you on all the remaining functions. It would also translate all the code it built back into (bad) English so the user (a non technical business person) could read it and verify that it's what they want. This could all be saved as code and given to a programmer to fill in all the functions that weren't already written, based on the notes entered by the user. So, *most* things can be inferred from a good understanding of the business process. &gt; Again no. Build the reasonably simplest thing possible unless there is an almost-certain known expansion in the near future (18 months or less and already discussed as part of the roadmap). In over 40 years of programming, I've literally *never* had a case where I built the simplest thing and it got accepted without a business person coming along and saying "It's great but" and refusing to accept it without a major change, which would require a complete rewrite in a program that wasn't massively overdesigned in the first place. I built one program for the Joint Chiefs of Staff, they had a powerpoint slideshow that they got every single day, and the guy who built it for them was retiring. I was given a sample on which I was to build a web app, and built them a program that would output a web page that was pixel-for-pixel absolutely identical to the powerpoint slideshow they were used to. They looked at my web app, and the feedback came back "It's lovely, it's absolutely perfect, don't change a thing, only it has to be in powerpoint not a web application." (Since I had seriously overdesigned everything involved, at the library level, it took about a week to build something that would translate HTML into PPT for them, and they went nuts for it.) &gt; Never ever rewrite your own library unless you absolutely must. Clearly not only do we have different definitions of "absolutely must," but you're the person to whom I would be saying this in the first place. It's entirely the attitude you're showing about it here that I learned, over decades in the industry, is wrong. &gt; It's similar rule #1 of cryptography: never write your own cryptographic library; you will fuck up 100% of the time. That is a bad example, because it's a complex task that 99.99999% of programmers are just not going to understand, and a good programmer will *know* that they don't understand it and not attempt the task. On the other hand I *do* understand how an ORM works, and I *do* understand how code that operates drop down menus on a web page works. &gt; Use the defaults provided by the framework (ADO, Entity Framework using your Microsoft + SQL example) Yeah, I chose that example because it came to memory. I've used both Entity Framework and nHibernate. nH isn't bad, but it's rather slow. EF is An Abomination Unto God. I had an employer where the software had to be able to generate a quarter billion SQL records per day. (Yeah, not the way I would have chosen to store such massive amounts of data either, but I wasn't given any choice about that part.) nH couldn't keep up, and EF is much slower. I could have hard coded some SQL and been done with it. Along the lines of "write library code when you can because it will come in useful later" I wrote a new ORM, it took me about a day and a half. (I've written a bunch of ORMs, I used to work at a company that made programming languages, so this is kinda easy to me.) It's much less feature rich than EF or nH, but it's also something like 10X faster and actually got the job done. That ORM ended up getting used a lot at that job. &gt; or choose a well-regarded, actively-maintained, battle-tested, open source library (Dapper). Where do you think these well-regarded, actively-maintained, battle-tested, open source libraries come from? Somebody got annoyed and said "EF doesn't work right, I am f%&amp;#ing going to create a new ORM" and did it. I happen to be That Guy. So I write it and give it to my QA staff to test for me. &gt; The business didn't ask for you to spend time recreating an ORM for your call center ticketing system. They didn't ask me to create a call center ticketing system, but when they tell me "okay, start calling software complanies, we need a call center system and your budget is a quarter million dollars," and I tell them "don't bother, just finished writing you a new one," they're kinda happy about it. &gt; You know what my new hire will be able to use instantly? Dapper, ADO, or Entity Framework that are all highly known with tons of information a Google search away. I really don't care if a new hire can use Entity Framework when Entity Framework falls down and dies every time we try to get it to work with the existing data structure (which was decided a decade or so before I was hired, before there *was* an EF), or when it runs so slowly the user's morning login gets processed sometime after they go home for the day. (And yes, I ran into both of these situations at a recent employer, where the boss had dictated that we were required to use EF for all database transactions. When I realized that some tasks were just not getting done because they couldn't be done with his requirements, I called my agent.) &gt; Only worry about making code "reusable" when you have more than one instance of the same problem. If you don't end up with more than one instance of the same problem, then you are not examining your problems closely enough or you only have one problem. Seriously, they would have flunked you out of every class at my computer science college for saying that. 
Yes, this.
Create a cookiecontainer and store it in a variable. Pass that cookiecontainer to the login request before sending it. Then continue to give that cookiecontainer to subsequent requests. Also in your second request you are using a POST method but never writing anything to the requeststream. If there is no post data then you might want to change that method to a GET request.
Sounds like you’re good enough for somebody... that’s the only measure that really matters, isn’t it?
I have like, 30 personal repositories in GitHub and in nuger of various things. Project don't need advice here, I don't think. They need a desire and motivation.
This might not answer your specific question but there's a book called C# Cookbook by Stephen Tielhet which has a whole chapter on Filesystems, I hope it helps you.
ORM, UI, multi platform open source libraries [https://github.com/okhosting/](https://github.com/okhosting/)
order doesn't matter for how the requests are being sent over. you should check the requests/responses on a web browser. the CONNECTs are presumably from the ssl the site has. you should try opening up dev tools in chrome or firefox and seeing what happens there. regarding the second POST request, you may or may not need to use that. do you need to send captcha data over or something? i have no idea how this web page works, it might make two separate post requests and return a cookie or something for one of them. check the responses from both and see what they are. fiddler is good but I think the dev tools in FF/Chrome are better. try those and see if there is a difference between what the dev tools show and what fiddler is displaying.
I just was able to finally create a program that can get past the login page. I misunderstood how requests and responses worked - I was waiting to get a GET request basically, which wasn't about to happen. Here is my code. using System; using System.Collections.Generic; using System.IO; using System.Linq; using System.Net; using System.Text; using System.Threading.Tasks; namespace super_login_attempt { class Program { static void Main(string[] args) { HttpWebRequest requestWithLoginCookies = (HttpWebRequest)WebRequest.Create("https://longerurl"); CookieCollection loginCookies = new CookieCollection(); var cookieContainer = new CookieContainer(); requestWithLoginCookies.CookieContainer = cookieContainer; requestWithLoginCookies.Method = "POST"; //set request headers (I believe this is different for every site) requestWithLoginCookies.Accept = "application/json, text/javascript, */*; q=0.01"; requestWithLoginCookies.Headers.Add("Origin", "https://baseurl"); requestWithLoginCookies.Headers.Add("X-Requested-With", "XMLHttpRequest"); requestWithLoginCookies.Headers.Add("X-SC-Touchpoint", "checkout"); requestWithLoginCookies.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36"; requestWithLoginCookies.ContentType = "application/json; charset=UTF-8"; requestWithLoginCookies.Referer = "https://loginurl"; requestWithLoginCookies.Headers.Set(HttpRequestHeader.AcceptEncoding, "gzip, deflate, br"); requestWithLoginCookies.Headers.Set(HttpRequestHeader.AcceptLanguage, "en-US,en;q=0.9"); requestWithLoginCookies.Headers.Add("DNT", "1"); requestWithLoginCookies.ServicePoint.Expect100Continue = false; requestWithLoginCookies.AllowAutoRedirect = false; using (var streamWriter = new StreamWriter(requestWithLoginCookies.GetRequestStream())) { string json = "{\"email\":\"myemail\"," + "\"password\":\"mypassword\"," + "\"redirect\":\"true\"}"; streamWriter.Write(json); streamWriter.Flush(); streamWriter.Close(); } HttpWebResponse responseWithLoginCookies = (HttpWebResponse)requestWithLoginCookies.GetResponse(); loginCookies = responseWithLoginCookies.Cookies; using (var streamReader = new StreamReader(responseWithLoginCookies.GetResponseStream())) { foreach (Cookie cookie in responseWithLoginCookies.Cookies) { cookieContainer.Add(cookie); } } HttpWebRequest regularRequest = (HttpWebRequest) WebRequest.Create("https://baseurl"); regularRequest.CookieContainer = new CookieContainer(); regularRequest.CookieContainer = cookieContainer; regularRequest.Method = "GET"; regularRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36"; regularRequest.ContentType = "text/plain;charset=UTF-8"; regularRequest.Accept = "*/*"; regularRequest.Referer = "https://loginurl"; regularRequest.Headers.Set(HttpRequestHeader.AcceptEncoding, "gzip, deflate, br"); regularRequest.Headers.Set(HttpRequestHeader.AcceptLanguage, "en-US,en;q=0.9"); regularRequest.Headers.Add("DNT", "1"); regularRequest.AllowAutoRedirect = true; foreach (Cookie cookie in loginCookies) { regularRequest.CookieContainer.Add(cookie); } HttpWebResponse regularResponse = (HttpWebResponse)regularRequest.GetResponse(); } } }
Thanks for that link, I honestly don't do much random but was a pretty interesting read.
That helped a tremendous amount. Thank you. [Here ](https://www.reddit.com/r/csharp/comments/92hysp/httpwebrequest_post_login_help/e37m9qy)is my edited code.
yeah what you did here is correct. and yes the server only sends responses for each request the client makes; the client makes all requests through the client side code on the website. code looks verbose, and just a small FYI, if you plan on scraping sites with a certain frequency try to learn how to set up proxies to work with your requests. it will make your life a lot easier. also switch up the user agents lol
I contributed some code to NAudio to fix an annoying bug I encountered. Now it's pulled into the master branch, yay. 
https://up-for-grabs.net/
Are you using the right tool for the job? Powershell ls ABCDRequest_* | % { if ($_.Name -match "ABCDRequest_(.*).csv"){$Matches[1] }}
I’m finishing up my first smart mirror project right now - Full size bathroom mirror and plan on working on some custom modules for magic mirror 
I created my own open source projects that no one else wants to contribute to! :P
I contribute to OpenRCT2 - an open source re-creation of RollerCoaster Tycoon 2. https://github.com/OpenRCT2/OpenRCT2/
I have updated my post the code should work but its not. I might have made some stupid mistake For example lets say I have the following file in a folder: ERISRequest_INC1234567.csv //Should Print -&gt; INC1234567 ERISRequest_INC8901234.csv //Should print -&gt; INC8901234 fileName.csv //should skip this one
&gt;Wings is written in Erlang I'm not sure how much sense that makes. I thought Ericsson developed Erlang to handle the challenges related to distributed networking and stuff like that.
I'm curious how much of a response you get.
I agree with a lot of what's been mentioned here, and since you haven't clarified, its still tough to know what your root issue is, but here's my 2 cents. You've got too much coupling throughout your application. Things know too much about other things, hence the reason why you've got all this complicated registration. I'd also be willing to guess that you're not using appropriate patterns to be able to dynamically and indifferently choose between various implementations without needing a prior knowledge of what class you need. It also seems like you have a lot of logic that's widely spread out in your application that isn't adequately grouped and organized for easy reuse. There are some development practices, such as DI and unit testing, that are really good at highlighting what you're not doing well in your code base. If a class is too involved to properly set up for DI, then maybe you should rethink the design of that class. If your app as a whole isn't responding well to using DI, then you really have some thinking to do. You've got to do some thinking to try and understand why though. That's the most important bit. I would also recommend you stop using Poor Man's DI and start using a featured IoC Container. They exist for a reason, and its because they have useful features and help speed up development. You'll typically wind up reimplementing have of one anyway, and the time you'll take to do that is much better spent working out the issues in your code base rather than a custom tool. Leverage features like automatic registration as much as you can. Lastly, you're not going to be able to magically make all of your app ready for DI in one shot, it will take time to slowly refactor the application. But you've got to start somewhere, and those are the true dependencies. The places where you have important logic that is shared and that you might potentially want to swap or test easily. 
EF 6.x supports the ability to intercept calls such as delete and change the query to be a soft delete instead of executing the delete statement. http://marisks.net/2016/02/27/entity-framework-soft-delete-and-automatic-created-modified-dates/ This allows you to call remove etc as you normally should. And also prevents someone coming behind you and calling remove with out knowing to do otherwise.
Interesting answer. But would I still be calling many repositories like the second example in OP?
Which is kind of ridiculous. It doesn't "optimize" a stored procedure execution. Running:. "EXEC StoredProcedureName @var1 @var2" is it. That's all the "raw" SQL. The rest is run on the server itself and EF doesn't affect that.
It's a union buffer for short strings/pointer to char array for longer strings
Short answer, possibly, you’ll have to dig into the interceptor examples to find out for sure. It’s been 6 years since I used this, and then I’m sure we did t have nested soft deletes that needed to happen.
Please provide some sample or more info for the exact problem. See the basic usage of [File.ReadAllText](https://msdn.microsoft.com/en-us/library/ms143368(v=vs.110).aspx)
Honestly it sounds like you need to start by going through a tutorial on language basics. There are just about infinite ways to do this kind of thing, however for your reference here are a few quick examples: [https://pastebin.com/3KWCAvYN](https://pastebin.com/3KWCAvYN)
Well I did study the basics, I had studied arrays and all those first things. My problem is more likely to be the issue of me being unable to implement everything I had learnt into coding, that's hard. Anyways thanks for this link, I'll check it out.
Well you could leave a Die to return ints like it is now and then have another class to map the result to labels. For example it would be very cool to have like a LabelsDice that accepts and wraps a Die of any kind, then I would tell the wrapper what label to return depending on which number the Die has rolled. I hope to have been clear enough, if not let me know. Do you accept PRs ? I would like to do it sometimes if you want !
I didn't mean to criticize. I'm a fairly experienced programmer, but I often have tutorials open for reference when working with a language I'm not yet comfortable in. Those examples are by no means robust or the best possible solution, just what I could write up in a few minutes. Hope they help.
what if you override the SaveChanges() method, where you detect the Entity was changed or EntityState of the change and trigger changes for related entities before finally save? 
All good except for the overuse of var 
Strings don't use arrays in the CLR, they are special variable-size types similar to arrays.
That’s highly subjective.
I suppose it does reduce the clarity a bit. It does make editing/refactoring a lot easier though.
Since you cannot use anonymous methods to capture your parameters dynamically perhaps you need to recreate what dynamic methods do internally (as per this post): https://stackoverflow.com/questions/27701812/anonymous-function-and-local-variables In other words use a class/instance to capture your "parameters" and add a method of that instance to OnProc.
Read the file, split at space, count array. 
Nothing regularly, but if I find a simple yet annoying bug in a piece of software I use I might create a PR to fix it.
You're talking about [composition](https://en.m.wikipedia.org/wiki/Composition_over_inheritance). I've never tried mixing the two. I don't think it would be too terribly hard to fully switch to composition at some point if it becomes necessary. I'm definitely welcome to more ideas, PR's, etc.
I think it’s less subjective than you think. Your code readability is demonstrably worse by using `var` in the wrong contexts. You should only use `var` when declaring the type is redundant like: DateTime foo = new DateTime(); Changing the type declaration to use `var` would still make that line of code clear: var foo = new DateTime(); If you have some method that returns something, using `var` would not make it immediately clear what the type is. For example: var someObject = service.GetSomething(); What is the type of `var` here? It’s not immediately known, you would have to jump to the definition or hover over in Visual Studio. This takes time and/or is reliant on the features of your IDE. 
&gt; Your code readability is demonstrably worse by using `var` in the wrong contexts. And what constitutes “wrong” is subjective. &gt; You should only use _var_ when declaring the type is redundant like: That’s one case, but there are also cases when explicitly stating the type is cumbersome and not helpful. The result of LINQ statements, for example, is often a complex type with various parameters, and it doesn’t generally matter.
Removed: Rule 3, spam.
Removed: Rule 4. Please include code of your attempts, and what errors or incorrect output you're getting. As suggested, consider using the `String.Split` method to break up the lines by spaces. Or count the number of spaces in the string. These aren't foolproof tests, just a simple one based on the assumption that every word is separated by a space which is probably good enough for your scenario. There are some discussions and example codes here too: https://stackoverflow.com/questions/17812566/count-words-and-spaces-in-string-c-sharp
Were you hired on as a developer? Also do you have a degree. 
No degree, self taught in programming. I’m almost finished with my degree. I wasn’t hired as a developer however I have fallen into that type of role in the last year and a half. The role they are moving me into will be a development role on top of other responsibilities. 
I would check Glassdoor to see similiar salaries for your company in a development role. Will give you a good idea about what to ask for. Seems like you are taking on a lot of responsibility in the new role. Wouldn't ask for anything less than 65k if I were you if not more. Really depends on the other salaries. 
Quick Napkin math and research shows anywhere between 70-80k would be reasonable. Entry level in your area is around 60k, but it doesn’t sound like you’re being hired for entry level. Degree shouldn’t matter, if you have command of you knowledge of computer science and can/have proven it, that should suffice. Pro tip: you really need to do your research. If you state your worth in terms they understand. “I can do X, I have done X, that skill set is worth X” are things companies understand. You’re much more likely to get what you want if you know your worth, rather than say “oh I don’t know, I just wanted 80k for my lifestyle”
Everyone else on the team is a design network engineer and making close to 100k and over. However they will all come to me for automation in their networks. So while they are responsible for their finite amount of clients I will touch every single client and maintain a surplus of information and code for all of them. 
That makes sense and I have started doing that. I know I will be writing in C# a lot. But I also know there are few other languages that I will have to use to get the results they want. Also maintaining all of their databases and the information that comes with that. That’s the hard part is piecing all of the various “roles” that I will need to do for this together. It’s a situation I’ve never been in. 
Pay is based mostly on net reasonability within your role. Look at the roles your interact with, and try to mentally gauge their responsibilities. Then look at what your responsibilities will be. If they make 100k/yr, you can then use their responsibility metric to get a more comfortable idea of what you should make. You should also factor in how important your position is. If you're the only one doing something, it's worth much more. In the end you want to high ball. If the company isn't comfortable paying something, they'll tell you, they won't fire you.
That’s kinda where I’m at. I know they will be dependent on me for the automation portion. I was planning on asking for 80k, just didn’t want to come off as being overzealous and push them away. But the more I think about it the more I feel that I’m worth at least that to them. 
Probably the best thing you can do is interview around and see what other local companies are offering for your experience. 
If they are like any other large company I have worked for in the past expect a $5k-10k a year bump on top of what you make now and a pile of $h1t about how the new job will be such a great development opportunity for your career.
With your efficiency in mind, I would say at least 100k. It seems like you're going to be in a rather important cost-saving position. If that engineer had worked those 200 hours, they'd be out a hell of lot more than what they would have saved not paying you what you're worth.
And that’s what I’m afraid of. I know I’m worth a hell of a lot more than just 10k bump, I’m just struggle with how to put it into words so they see the same thing I do. I think pointing out the amount of money I save them is exponentially greater than what they will spend if they pay me what I want. 
I'm in Columbus and am also self-taught. I moved out here to take a position as a dev with 3 years prior experience. I started at 76k to give you an idea of where someone with your skills should be. I would also make it a point to stress how valuable you have been to company so far. Maybe extrapolate some numbers real quick and present them as you've saved X man hours, X dollars, etc.
What system do you use? As a linux (debian and arch user) I can make my own contributions to almost any part of the system just for my own purpose, of course, if i had a mind to, i could consider pushing my contributions to the public repos, but i don‘t lol. I guess I‘m saying, if you use any free software, one option is to implement the changes you want to see for your own benefit.
I feel like you’re setting yourself up for a huge disappointment and you need to re-evaluate your worth to this company. It’s not about how much money you are saving them, it’s about how much your replacement would cost. Would people be willing to do the same job you are doing right now for 50k? Are you worth 2x what they are? 
That is definitely going to be a major selling point for me. I have easily saved them thousands of hours in the past year, and they know it. 
The problem for them is that they can’t easily replace me. The code and scripts that I’m writing are very specialized to our business. I’m also the only person who’s ever touched the main application that an entire department is built around. The amount of money and time they would spend reverse engineering everything I’ve done would not be good for them. They would also lose out on productivity with any new clients as each one of them has to be built into the application which isn’t easy as each client is a custom setup. I know they can’t easily replace me which is where I know I have the most leverage. 
Is this your first IT job? Have you researched the DevOps movement? I can't help with regional pay ranges but Glassdoor shows a range of $90-110K for a DevOps engineer which can mean many different things including a developer assigned to an operations team like the new role you described.
I’ve thought the same thing many times, businesses don’t have the same mindset. I’m just saying that I think your expectation might be too high if you listen to people in this thread. The first thing they are going to do is throw the lack of a degree in your face and they won’t budge. I’ve been there and it sucks to have high expectations in salary and not get it. You have been doing this excellent work for 45k, I think it’s a fallacy to think they can’t find someone else like you to continue it. Also the point about others not being able to continue where you are is actually a negative for you. 
Not my first IT job, but this is the first time as a developer. Which is why I’m lost as to what I should expect or what I should be comfortable asking for. The biggest struggle is putting on paper what I’m worth versus what I will save them with automation. As one guy says in the post I don’t want to get my hopes up for a massive amount of money but I want to simply ensure that I’m not low balling myself either. I want it to be fair for both parties. 
Anecdotally, I have a similar role, also in Ohio, with engineering on top. I believe you would be worth at least 70K if being hired externally with demonstrated experience. Really depends on skill level and experience though. External job descriptions with pay ranges are decent ammo for talking to your boss and HR. It’s not bad to remind them that your skills are valued.
It's hard to give you a number without having a lot more info, but for them to hire a qualified software developer, they would be paying quite a lot more. I would suggest looking for salary guides to give you a hint what you should be asking for. Several of the head hunter agencies (e.g. Robert Half) make salary guides available and I think these are generally better than the Glassdoor type salary info as the Glassdoor type tends to make you guess at titles. Discussing salary when armed with data puts you on a much firmer footing. It also lets you know if their offer is geared to take advantage of you starting at a very low number or if they are trying to true your salary up so that you're not a flight risk. Asking to be paid what you would be paid elsewhere is not greedy, especially if "This application has saved them a massive amount of money and time." and you are truly the one responsible for that success. Unless they think your work is actually garbage but you are so cheap that they'll deal with it, you are essentially donating money to them. Be honest with yourself about your skills though. In truth, it sounds like you're self taught and so trying to get hired elsewhere without making sure you've got a really good understanding of not just how to sling code to make things work, but system design principles, testing, security, etc will be difficult. Another thing to think of: You are almost certainly not building your skills as thoroughly and quickly trying to learn on your own. Unless this new role comes with a team with similar skills that can mentor you along, you need to ask yourself who does mentor you? Taking classes and watching videos isn't going to do it. I'm a director at my firm. I set salaries, so I'm dealing with the question of "what are they worth" regularly.
That is also something I’ve thought about. I will be the only one on the team developing. So there isn’t much of an opportunity to learn from others. However all of my code is unit tested and I do my best to ensure solid readable code. There is however a lot that I have left to learn and I’m vividly aware of that fact. That’s one of the reasons why I don’t want to go overboard with what I ask. What I try to do as far as learning as much as possibly as I can is think of varying situations that I may be asked to write code for and create something from scratch. It helps but as you say learning from someone much more experienced is hard as I never cross paths with any of our other devs. I would love to have someone to mentor me as I get more experience but at the moment that just isn’t an option unless I were to find someone outside of the company which is unlikely. 
 Totally agree, but i stated "overuse", there are definitely conditions where var should be used. That's not to say it should be used blanket style across the board, as per the op. Two valid use cases have been outlined here, there's also anonymous objects.
id ask for at least double what you make now and settle for 80k
&gt;I would love to have someone to mentor me as I get more experience but at the moment that just isn’t an option unless I were to find someone outside of the company which is unlikely. Finding a mentor isn't quick, but look for user groups in your area and attend regularly. While you may not find someone who takes you on as their personal mentoree, you'll at least get some better exposure to other thoughts.
I have never thought of that. I will definitely look into this. Thank you!!
Most people respond, although a lot of people don't want help with anything or their project isn't structures in a way that they can have multiple people working on separate features.
Nice article. Marc is a bit of a superstar in the C# world.
It's just math. You could in theory demand anything up until the point where they no longer make money off of you (both short and long term).
I'm near your area and entered the field (Frontend) at $60k. 4 years later I got a job at a fortune 50 company as a full stack engineer making $90-98k (depending on the amount of overtime), with no prior C# experience outside a lot of Razor and some simple controller stuff, however I have a degree in CS and had been moonlighting as a full stack dev using PHP/Node since college. So I could see your salary around the $75-80k range. 
Maybe I'm reading too much into it but you're not a typical software developer. You are an operations developer. Having worn both hats (also self taught), the later is much more demanding because of the multiple roles. I'm not suggesting that you demand a certain salary only that you contextualize your work in a light that is most likely to eliminate any imposter syndrome. Good luck with your new job!
Don't forget that there a re non-code way to contribute to open source projects as well. Detailed error and bug reports are super helpful for project owners. When I encounter a weird issue with software I really enjoy using, I will generally document a bug report with detailed steps to reproduce, screenshots, etc and send that off. As a develoer, I know I really appreciate detailed feedback from tester and users that have an issue with my software, so I tr y to do the same 
I'm also in the Ohio market in a software engineering role, and u/lurksAtDogs is completely right. I wouldn't take less than 60k for what you will be doing.
Apologies for the length in advance.... As an employee, whenever people talk about salary, I think the most important question is, 'What can I make at another company if I applied today'. A lot of people get focused on their current project/current company and they talk about what they do and the team dynamics and how they are the only one who can do this or that, or even how someone else does less and makes more.... I totally get why it's natural to do that, but none of it matters. What matters is what you can get at the next job if you leave this one. The only things I know about you come from your post and some of the comments, so I apologize if any of this is wrong. Here is what I've got: * Located in Cincinnati Ohio. * Make 45k * Not technically in a development role (but doing development) * No prior professional experience as a developer (but worked in IT) * Self-taught * No degree related to software development (but one in progress or at least partially finished) Is that right? The truth is, it is very hard to find an entry level software development position that pays well when you don't have a degree or prior experience in an official development role. People do it, but lots of people also struggle with it. A lot of places won't interview candidates that don't have a degree or prior professional experience. Even new graduates with CS degrees sometimes report an inability to get offers. It sounds like you would like to be a professional software developer. And you've unofficially taken on that role at a company and they've been so impressed with your work that they want to officially make you a developer? According to [PayScale.com](https://PayScale.com) entry level salaries for software developers range from 46k-76k. Also, it sounds like you work at a large company - sometimes (not always, but sometimes) large companies will have some perks/benefits along with a lower salary. Just remember to consider your total package and not just the salary. The vast majority of entry level software developers are going to have a degree related to software. I don't have a link, but I thought CS majors typically got slightly higher salaries and then then the more general IT/Information Systems would be a bit lower (also, this info might be out of date, so please don't quote me on it. Still, my point is degrees help). Entry level can also include people with masters degrees. A lot of companies who hire entry level people will require (or heavily expect) candidates to have development related internships too, using myself as an example, when I landed my first entry level job, I actually had completed three internships already and had two Microsoft Certifications. (That's not meant to be a brag, the MCPs were meaningless wastes of times and my internships weren't prestigious, I just mean that lots of entry level devs have a lot of experience) And, let's be honest, me and my college roommate both majored in CS at the same university and we even did one internship at the same place. We were still worlds apart in skill/aptitude and years later we still are (and it's reflected in our salary). You might be a rock star developer and maybe should be in the top 90th percentile or you might be like the majority of us, and fall somewhere in the middle. Or even, the...ya know...not naturally gifted but still able to do a great job...sort of developer who should be on the lower end of the payscale. That's something you'll have to honestly try to assess for yourself. I'm assuming you are a 'pretty good' developer (self taught is hard, and you are doing a good enough job that they want to make you a full-time dev instead of hiring someone), so you've got that going for you. But the lack of official experience and a completed degree is going to make it difficult to land a high paying entry level developer job elsewhere. Based on the numbers [PayScale.com](https://PayScale.com) is giving me for Cincinnati - I don't think 45k is insultingly low at all (it's &gt; the 10th percentile). Personally, even if they offered you no raise, so long as you desire to be a professional developer, I would gladly accept the new position and work for another 12-18 months before applying for full-time software positions (while keeping your job. Once you have a new offer, either take it or us it to negotiate a big raise). Having said that, I do think 45k is a bit low, and if I were you (based on my assumptions) I'd be hoping 50-55k. I'm seeing a lot of comments that suggest 70k or 80k, even one that said 100k as reasonable salaries to ask for or expect. Frankly, I don't see that happening....but let's be real, I'm just a nobody on the internet. What I would do, is invite you to go on SO careers or Dice or whatever else you want, and find some local job postings that are in that salary range. Try to be objective, and compare your skillset and experience to what they are asking for in the job. Can you find a 100k position that you think you'd be able to land? And honestly, if you do find one, you should absolutely apply. We're talking FAR too much money on the table here to not explore this fully. You might be an amazing developer and self-taught yourself to the caliber of dev that could walk into Google or Facebook and land a job. Finally, the last thing I wanted to say (and I say this with all the respect in the world) I would be very careful with how you calculate your value to the company (in terms of hours saved via automation) and how irreplaceable you are. Again, I'm just an outsider, haven't met you, haven't viewed any code, but... 1.) I was a consultant and we routinely came in and took over projects after an irreplaceable person disappeared. I would argue that virtually nobody is actually irreplaceable, and any situation where someone is legitimately irreplaceable is a *serious* sign of trouble either with the person or the organization. If I've been working on a project for two years that is vital the company (or even if it isn't), that nobody else knows, that isn't documented, and is written in such a way that only I can handle it....I would say I'm a terrible developer; not a vital rockstar that cannot be replaced. The best developers I've worked with are the ones who can seamlessly leave because everything they did makes sense and is documented. 2.) I don't think the hours (or dollars) saved is the right way to look at it. Automation is great, I love automation, and I've done the same (or similar) mental calculations you have. \&gt; 'X used to take an entire hour, and Y employees had to do it every week. I spent an hour modifying my existing automation tool and now it is automatically do X\*Y\*number of weeks. Assuming the average employee-hour costs $Z - I've saved X\*Y\*Z per week, and I did it two years ago, so that means X\*Y\*Z\*\~104. ' Especially with a large company, it's easy to come up with HUGE numbers. Let me give you a specific example (fictional numbers, but you get it) - Say I have a website that gets a 1.5 million hits per day. I've decided to put ads on my website to generate revenue. So I hire a kid with no real experience, but he loves computers and websites. He fumbles around on Google and eventually sets me up with an AdSense account. It took him all weekend (15 hours) to do it. Next thing I know, the money is just rolling in, I'm making $500-$1000 per day! I agreed to pay the kid $10 an hour. $150 feels high to me, but that's what we said. However, the kid objects. He says, 'Whoa - that's not fair. I made you $300,000 in revenue that you never would of had without me! Look at my calculations, look at this print out, before me you made $0 and thanks to my knowledge with computers, you now make $300,000 or more, each year. I feel it is only fair that you pay me $150k per year to support your website as I saved you $300k last year alone' It's a silly/extreme example...but I really do believe it is applicable. It isn't about how much money you saved or how many hours you saved. Of course software developers are able to introduce efficiencies, that's what we do, and a big part of why we get paid well. The question is, 'How much more money/hours/revenue/etc you managed to save compared to what an equally paid professional would reasonably be expected to do'. In my example, I could of hired ANYONE to setup AdSense and I'd make tons of money. And someone taking 15 hours to setup AdSense really might be excessive. If I had another site with 10 hits per month, and I hired another person and they got AdSense up and running in one hour, but only generated me $5 per year; which developer is more valuable? I'd argue the second. Again, no disrespect intended. Maybe the type of automation you did just absolutely amazing and unexpected and other people never would have thought to do what you did. Maybe you should make 100k or 150k. Just my $0.02 - regardless of anything I've said, it sounds like you are a skilled dev and have a great career ahead of you. 
Thank you very much for your insight. And I agree with many points. 
Link to the question, please
https://docs.microsoft.com/en-us/dotnet/csharp/
Any offline version to that book? Thanks for the info, BTW.
There is no `Min` element in your sample XML, so I'm not sure what `string mrmk = order.Element("Min").Value;` is supposed to accomplish Then: &gt;I can't use .Save as my filepath is a string array, because the .xml's filename varies I… I don't understand. If you have multiple XML files, you need to both load and save each of them. Have you tried a loop? And lastly: &gt;I need to start a process, and thus provide it with arguments, which I can't do, because the arguments are a bunch of filenames I have to get with Directory.GetFiles, which stores them into a var, which I can't use as argument. I understand this one even less.
Aim high hit low. Go for 100k and give reason, doesn’t matter if you’re not a super ninja. Salaries aren’t always math equations, they are given a range for hire as budget on the employer end of things. It also matters where you live and cost of living
IOC containers are unnecessary, add complexity, and reduce compile time safety. They also often introduce horrendous lifecycle based bugs . Mark Seeman himself has rechristened "poor man's di" as "Pure DI" and recommends using it http://blog.ploeh.dk/2014/06/10/pure-di/
I have just provided a snip of the xml, the code part which reads the value works fine, So my application accesses a folder which contains a xml, the content is always the same except a few values, but the filename is always a different one, therefore I can't specify a static path to save the file, also I need to set the required system version to 0, which I also failed on doing.
&gt; but the filename is always a different one, therefore I can't specify a static path to save the file OK, but you can simply use the filename of the original?
okay I managed to get that working, I was too dump to use String.Join. Thanks, but now I have 2 problems left that I havent managed to solve in the past 7 hrs. I need to edit the said value in the xml, and I need to get spaces in between the joined strings (looking into that atm)
Pdf but a little outdated now, I say outdated but all the common stiff will still apply. http://www.csharpcourse.com Otherwise a few maybe more relevant ones here https://www.syncfusion.com/ebooks
also I updated the stackoverflow post
.Contains("_inc") might help here, then you can get your substring starting at last instance of _ and ending at the .csv... or end of string minus extension in this case... length - position of last instance of '_' Unless I'm missing part of the issue here?
You can find job posting with salaries in your area with a list of expected skills usually. Use the terms listed in those postings to list your matching skills and they will pop up when *they* do a comparison search 'independently' justifying your expected wage.
ooh this looks fun!
There is a 'Download PDF' link at the bottom left - all 2246 pages.
Used DotPeek to open a VB.NET project into C# code. It got me maybe 80% of the way there. Produced some of the ugliest C# code you ever saw, but I eventually got it to compile. We added a "you touch it, you refactor it" rule to the team to start improving it.
Vb.net isn't so bad compared to vb6. Converting vb6 to vb.Net is not so bad if not yo code... If you've got any recommendations on converting about 300 Vb6 UI projects (forms &amp; controls, mostly) to a . Net language, I would be interested Common sense says that it would be better to throw it out and start from scratch as a web front end. However with that number of projects this is a multi-year investment that doesn't get past the product managers. 
Great work. Do you plan on supporting json column type?
MSDN would be the best resource for this kind of information. Here is a page listing all properties and methods of the Console class. https://msdn.microsoft.com/en-us/library/system.console(v=vs.110).aspx
https://docs.microsoft.com/en-us/dotnet/api/?view=netframework-4.7
There are no "C# commands". The language consists of keywords, operators etc. The reference can be found here. [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/) WriteLine and Readkey are the methods of the class called "Console" - this class is responsible for interaction with standard console window. With C# you normally use dozens and hundreds of existing classes from .NET framework. Reference here: [https://msdn.microsoft.com/en-us/library/gg145045(v=vs.110).aspx](https://msdn.microsoft.com/en-us/library/gg145045(v=vs.110).aspx)
Well if you're just a beginner I think VS Code should suffice if you add some plugins for autocompletion and debugging. However you may have to familiarize yourself a bit more with using the terminal to build your programs, since it's easier in full VS.
Wow! I totally missed that one. Thanks, so much. 
.net core and .net have some pretty different approaches so if you're starting off, you should either follow along with visual studio or find a .net core specific tutorial. The stuff on the Microsoft website is really good quality. 
Funny, syncfusion.com is blocking internet connection from my country. Thanks anyway for sharing the info! 
F12 is your best friend. You will learn to love F12.
You are seriously me. I was at a job, learned to program, automated a bunch of processes. What ended up happening was I got put into a full time role as a developer at my job. It was a temporary position to free up my time so I could build an application for the place to use. I loved it. It didn't increase my pay, but I was making enough and I used it as an opportunity to gain tons of experience and learn new languages/technologies. Anyway, when that ended they moved me to a new position. I was still required to maintain the stuff I had built, but I hated the new position even though it offered more pay, because it took away my ability to be creative and develop all day. I decided to leave at that point. I then found myself in the same predicament as you. I was talented and aggressive, but i didn't have that CS degree or "professional" experience like you stated and it made me nervous about my marketability. I decided to make an open-sourced project on GitHub so that I could learn some new things like publishing Nuget packages, working with Git, working with other devs, etc. The nice thing about this was that the code isn't proprietary so I could showcase it and market myself. I then took a "fake it till you make it" mentality. I realized, just because I didn't work for a software company, doesn't mean I didn't develop professionally. If I got paid to develop I am professional developer. I was honest with my limitations, but showcased what I was made of. I started getting job offers. In the end though, I decided I didn't want to be a professional developer either. I love programming, but I love the creativity of it not the trade. At that point I tried seeking out a role that more aligned with what another use said. Basically being an "Operations Developer". It's challenging, because it's a "dual hat" role as I have to learn/work a job WHILE developing, but something about automating long processes for people at the company I work with just gives me an unmatched satisfaction. I also learn other skills in a completely different trade so I have many fallback plans. Being a developer in a non developer field is an unmatched and highly marketable skill I have learned. I know my story ends slightly different then yours, and it doesn't really help with your issue of how much you think you're worth, but I just want you to know you are highly marketable, and you should seek what you think will make you happy. It's all about quality of life and what make you happy IMO. Best of luck I hope it works out for you! 
So this only applies to .NET core but VS code is fine and almost identical?
I had a graphic designer ask to make a logo for my project. It was awesome and he did it for free. Very random unexpected and cool.
Visual studio code has a lot of tooling for .net core but it's basically just a text editor when it comes to .net. If the tutorial is a .net and not .net core tutorial, keep in mind they are not interchangable. That being said, if it's .net core, both vs and vs code have tooling for it. If it's just .net you'll want to use visual studio unless you know c# very well and know how to use a compiler from the command line. I hope that was clear. Let me know if you have anymore questions. 
I created a project called \[CoordinateSharp\]([https://github.com/Tronald/CoordinateSharp](https://github.com/Tronald/CoordinateSharp)) when I realized there were no .NET libraries out there to calculate location based solar/lunar data and coordinate formatting. I put it out there just in case anyone else would need it, and to my surprise people started contributing and found uses for it (for things light flight planning, power savings tools, automated telescopes). Most contributions aren't in the form of PR's but people just finding bugs a letting me know or asking for features. I've actually grown the library a lot because of the help. I love working on it and am always looking for help as it still needs a lot of work! It's heavy on trig math due to it's nature, so most people don't like to dig too deep into it, but I get a lot of use out of help in other ways. Someone recently helped me port it from .NET Framework to .NET Standard, which was awesome. 
This is a fantastic resource! Thank you! 
Nice, how did you feel? 
Thank you for telling me your story. I honestly really do like the idea of operations developer. I love finding the ways to make tasks that take hours manually take mere seconds seconds with creative programming. It is truly the challenge of seeing it from every angle and finding the absolute most efficient and accurate way to do something that makes me excited. I only hope I can continue to do this type of work and at the same time be paid fairly for my time. It could very well be a crap shoot but only time will tell. 
If I understand you correctly, do you mean using dynamics when doing an operation (like Insert, Update, Merge)? If then, that is supported by this release.
VS Code and Visual Studio are pretty different beasts, but as a beginner I'm not sure you should be rejecting any sort of learning. I would say regular Visual Studio is much more common for .Net/C# development, but if you have the opportunity to learn and that learning is using VS Code, still do it. It's more important to not make excuses or put up mental road blocks to learning.
I suggest this book as a good primer on the language: https://www.amazon.com/Programming-Language-Covering-Microsoft-Development/dp/0321741765 It's a bit out of date now (we're up to C# 8.0 and this only covers up to 4.0), but it is enough of the basics like syntax, basic and common types, exceptions, etc. You can learn about more advanced features after you have the basics down. As others suggested MSDN is available, but that's not really formatted in a way to read forward to back. MSDN is better as a reference for specifics once you know what to search for, like HttpClient or something. You can certainly poke around, but it may be a harder place to start. 
Go to definition in Visual Studio. Ctrl + left click if you're using ReSharper. 
I'm specifically talking about mapping entities with data stored in MSSQL using the new (not so new anymore) JSON data type. MySQL and some other major databases support the JSON data type too. 
Yes, we will support this in the future. Thank you for elaborating.
Thanks for the reply. Do you have a roadmap published somewhere? Sorry if I missed it on the GitHub page of the project. 
VB.NET, a waste of time but it can be done. VB 6, not a chance if there any UI elements. I've never seen a project that wasn't so full of 3rd party custom controls.
Coskuns, not yet. But surely we will do. We have talked about it already on how to let the community know about our future plans.
Great. Will keep an eye on the progress. 
Great. Will keep an eye on the progress. 
Oh and regarding the license type. I wish it was MIT. 
Thank you, we will update the readme.md soon at the github.
What about binding to an Observable collection on a view model?
Very cool, not sure if I'll have a use for it very soon, but if you need any help raise an issue and I'll see what I can do.
Nice! Just a thought: how about letting the user to provide instance(s) of IEqualityComparer&lt;T&gt; for the function parameter types? During the Memoize call, for example.
If you're just starting out, focus on the language first, I'm pretty sure most of your doubts will be about C# and not the framework. Debugging and compiling is pretty good in VS, I'd personally recommend it as your first IDE, but again, focus more on abstract stuff about programming in general such as OOP, structures and algorithms.
Hi! I have been programming in C# for 10+ years. If you wan't to learn to code you can start with this course. Your learning will probably consist of 30% learning the C# language, and 69% learning to think as a programmer. The 1% is .NET Framework specific. (I just made these numbers up, but you get my point). .NET Core is only a re-implementation of the .NET Standard and is not as versatile as the .NET Framework. You can use .Net Core for Console applications and Web applications but not for desktop (WinForm, UWP, WPF). But what ever you learn in this course you can direcly use it later in .NET Core and VS Code. The syntax is the same but some library elements are missing from Core and some are moved around or implemented in a different way. 
What course? 
What ever the title refers to: "[**Can I Take A C# Course Which Uses**](https://www.reddit.com/r/csharp/comments/92zb8j/can_i_take_a_c_course_which_uses_net_and_visual/)**...**"
We can see the future with more collaborators on this project. With this license, it can help us manage it with bigger scale. We hope we are right with this assumptions, that is why we need a wordy license like Apache.
Huh?
You can use yield in an anonymous method if you mark it with async
My advice is to start looking for your next job. VB6 is dead for good reason.
I was learning Mvc 5 in Visual studio (using Windows) before Microsoft changed the exam. When the new certification exam came out I made the switch to Core using VS Code in Ubuntu. From what I remember there is quite a big difference between them (I prefer Core way more). I'd really recommend I book called Pro Asp.Net Core Mvc 2 (by Adam Freeman) https://www.amazon.co.uk/Pro-ASP-NET-Core-MVC-2/dp/148423149X He writes the book in a way that's easy to follow no matter if your using VS Code or the full VS. So it very friendly to Linux and Mac users. The biggest thing holding you back though is that you won't be able to use msSql. The book does show you how to use sqLite which can carry you through 90% of the book. If you are determined to go down this route though, I'd follow what everyone else is saying and just learn the language first, html and javascript second (with jquery, just the basics). I would advise you learn css the same time as the html and js, but it won't be necessary to follow the book I suggested as he uses bootstrap for styling everything.
The Yellow Book is freely available.
.net core is not a million miles away from standard .net. It’s mainly issues with capabilities as compared to net standard and the way which projects are laid out. Most of that stuff is easy to pick up once you have a grounding in net
Thank you for your feedback ! Currently if you override Equals you can somehow change the outcome of the comparison when the parameters are checked, but of course I can see that it is not optimal for types that you do not own or can be compared in many different ways (dates and strings come to mind). Passing IEqualityComparers is a good idea but it needs some thought before implementation: for Func&lt;T1, ..., T16, TOut&gt; invoking Call() would require 32 parameters to be supplied, which is hard ti read. Even supplying IEqualityComparers in the constructor of Memoizer would require 16 parameters. I’ll think about that, probably I will make parameters comparison overridable or I will let the User supply the logic themselves.
Right. What if pass comparers to the Memoizer ctor as `params IEqualityComparer&lt;T&gt;[] comparers`?
I just switched from Visual Studio 2017 Enterprise to Visual Code on Ubuntu. For development purposes together with Linux a superior work environment. It's stable as fuck and updates don't break the OS. However, it's good to learn Visual Studio if you have a chance. I would recommend you to just follow course with what your teacher uses. Later you can switch to Visual Code. The online thing I 'miss' is Azure telemetry stuff, it's something only Visual Studio supports. However stack trace does the trick just as good, if needed. 
Very very cool! Been waiting for a tutorial on how to actually apply Pipelines to real world scenarios 
First thing is that you have to split the layers to make the future development easier [https://en.wikipedia.org/wiki/Multitier\_architecture](https://en.wikipedia.org/wiki/Multitier_architecture) for you now everything works fine and you know where is it, but imagine that you do this synchronized with [nba.com](https://nba.com) and the project becomes bigger and bigger. also would be nice if you handle the exceptions. for example, if the file does not exist (teams or players) the application chases. In addition to that, if you have a list of things to add/fix would be nice if you create them as issues on GitHub (with this you wont forget to do them)
**[Multitier architecture](https://en.wikipedia.org/wiki/Multitier_architecture)** &gt;In software engineering, multitier architecture or multilayered architecture is a client–server architecture in which presentation, application processing, and data management functions are physically separated. The most widespread use of multitier architecture is the three-tier architecture. ***** ^[About](https://www.reddit.com/user/ultimatewikibot/comments/90r969/about) ^| ^[Leave](https://reddit.com/message/compose?to=ultimatewikibot&amp;subject=Blacklist&amp;message=Me) ^[me](https://reddit.com/message/compose?to=ultimatewikibot&amp;subject=Blacklist&amp;message=Me) ^[alone](https://reddit.com/message/compose?to=ultimatewikibot&amp;subject=Blacklist&amp;message=Me) 
It could be viable, but what would happen if you have 2 arguments and you pass me 5 comparares ? What if I have multiple comparares that are able to compare the same types ? How would I choose the right comparer ? Don’t think I’m angry or something, I’m only wondering how to implement it as nicely as possible. Also I’m more than open to PRs if you want to give uit a shot
I know that, but anyway, if is split is better to manage in the future, if you see the code he does everything from the xaml class, which obviously works but is not the best practice. The project looks like a learning project so, split between presentation, logic and data would be a good approach. 
Good points. I need to think about it...
Your Command is just an empty value. You need to initialize it either in the constructor or directly at the property.
Thanks.
Since your taking Tn for each parameter couldn't you just provide an overload that took an IEqualityComparer&lt;Tn&gt; for each parameter?
DUH I forgot to do the thing in the constructor, hang on I'll post a previous project where I did it... public MainViewModel() { if (IsInDesignMode) { // Code runs in Blend --&gt; create design time data. Title = "Record and Listen (Design mode)"; } else { // Code runs "for real" Title = "Record and Listen"; } StartRecordingCommand = new RelayCommand(StartRecording); StopRecordingCommand = new RelayCommand(StopRecording); ProgressBarVisibility = Visibility.Collapsed; } So as this would apply to my current project, in the viewmodel constructor I need to do this: ConnectServerCommand = new RelayCommand(ConnectServer); Luckily MVVM gives me all the stuff about the CanExecute things and what have you so I don't need to worry about that (that's why I'm using it). Thanks so much for the input! You've just saved me about 6 hours work implementing my own MVVM framework instead :)
You haven't initialised your command. In your constructor do ConnectServerCommand = new RelayCommand(ConnectServer). 
You need to instantiate ConnectServerCommand before you can use it: ConnectServerCommand = new RelayCommand(ConnectServer); Or maybe something like: ConnectServerCommand = new RelayCommand(ConnectServer, CanConnectServer); private bool CanConnectServer() { return !IsConnected &amp;&amp; IsServerAvailable; }
Yes of course, but you would end up with 16 T arguments and 16 IEqualityComparers. They are a lot of parameters
The dilemma is that you don't want to micromanage the developer or the project, but you *need* to micromanage the code. If you have a clear objective in mind and you communicate your requirements successfully then you'll get the desired result (i.e. tests pass) but probably with a whole stack of unfamiliar libraries and undocumented code and unmaintainable tech debt. The unspoken message was that you also need to be able to extend and maintain this code after they leave. But how can they know what is going to work for you? If you do try to control what they add, you spend more time code-reviewing and hand-holding than if you just did the work yourself. You can try and spend a whole lot of time educating them on *your* tools and patterns, and try to impart your domain-knowledge so that they see "the bigger picture", but that would take weeks of both of your time. It's basically lose-lose if you want something that's both done fast and will last a long time. [Adding human resources to a late software project makes it later](https://en.m.wikipedia.org/wiki/Brooks%27s_law)
Debugging in VS Code is actually pretty good (now). Unless you need some of the more enterprise tools, which are included in the full VS version (which I doubt), then the VSC experience will be just fine. In core (if that's what OP is doing), you do much more using the CLI, and the VS integration becomes much more secondary, and almost annoying, once you've learned to do it "manually", because it gives you more control.
Maybe the c# .net companies do not publicise their stacks (non-open source mentality)
You are binding to ConnectCommand, but your commands name is ConnectServerCommand
Isn't this just showing the tech behind the web frontend and maybe the first layer of backend? 
Sorry if I'm misunderstanding but C# 7.0 + does have a 'switch case when' with assignments. e.g. switch(someObject) { case Ball b when (b.Distance &lt; 1): Kick(b); break; case Pie p when (p.Temperature &lt; 60): Eat(p); break; }
Ctrl + left click even works without ReSharper in the latest vs
VB6 is going to keep me occupied in my retirement. I hope to take the occasional maintenance or conversion job.
I think that's the answer, but I think another question would be why don't start ups and open source use Microsoft's stuff? There are lots of reason why of course and pretty obvious why pre dotnetcore. However recently Microsoft has been making moves to make their stuff more attractive to open source. I wonder if there is a chance things will change a little?
Arpikus has interpreted the question differently to you. Question = Can I take a C# course which uses .NET and Visual Studio to learn .NET core and Visual Studio code? His interpretation = OP has already found this course. Will it be effective and should I do it? Your interpretation = OP is asking does such a course exist and if so, to be pointed to it. Both interpretations are reasonable but to my mind yours is more intuitive. To answer OPs question the best course is C# Basics for Beginners: Learn C# Fundamentals by Coding which costs $10 on udemy.
[https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books.md](https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books.md) I think here are also some C# books
Can vscode compile c#?
Haha yes, thankfully the vb6 is only a really small part of my job. One day it's going to be like Cobol and all the old VB6 hacks will come out of the woodwork for the next y2k type thing. Anyway, these are old, stable projects that rarely need any modifications. The whole build and deploy of them is scripted, so we don't even install vb6 on new developers machines unless they do something to deserve it. The job is stable and pays well, and my dream job would require relocation, which is off the cards at the moment. 
Yeah haha you could take a tuple with the value and the comparer. Same amount of parameters then.
Refactor, refactor, refactor.
Not exactly "officially" free, but check out www.genlib.io and search for .net 
Never expect a developer to explain right what he couldn't code right.
Hi there dude, the best bet you have (for finding out Methods that you can use is the microsoft docs [https://docs.microsoft.com/en-us/dotnet/csharp/](https://docs.microsoft.com/en-us/dotnet/csharp/) tbh, what your looking for comes with experience rather than a guide i.e. however you can also use intellisense and go through all the related methods, i.e. type console.and then use the up and down arrow keys to search through all the available static methods.
Debugging in vs code is really quite good, debugging in vs is marvelous. 
Nope. That is for calling custom database functions, not the same as stored procedures. With SP you do not have to do nothing, you can just import them to your .edmx.
you won't find many companies using Ruby and Go, even python outside silicon valley and startups. .net is very popular where I live, it's just not considered to be cool. php is also more popular than what many people think. Python is popular in universities, but it's more used as an addition to other stacks in real companies. Ruby is a dying technology and was just one of those Silicon Valley trends that many adopted for no reason. 
That's a possibility. I wrote in the article that I took data from 100 startups. Most of them I found in [angel.co](https://angel.co) database, looking at "successful" startups that raised a lot of money and had a high "singal" (a measurement of the company's quality). Out of all those companies, About 70% did share their tech stack. So in the missing 30% there might have been relatively more .NET startups. Another possibility is that less .NET startups appear in [angel.co](https://angel.co).
I've converted about 80k LOC vb.net with http://vbconversions.com/ . Just don't expect full automated conversion without problems. As in the other post I'd say it does 80% of the job. Lots depend on used coding conventions that you might need to fix manually before / after conversion and there is lots of testing needed after conversion so that everything works as expected. That particular tool also makes borked code in some situations that you need to fix and has tendency to crash on some projects. I wouldn't do it unless the code is expected to be in active development long afterwards. We also did it for the developers who vastly prefer c#. I've also used http://converter.telerik.com/ for snippets.
I would say that startups are much less likely to use it than a new "hip" language. But a huge amount of enterprise level applications still use it. When your developing applications that could be used for decades having someone like MS supporting them is a huge selling point.
I recommend kotaku
Yeah, no kidding. I really doubt Node is popular enough to get JS as high as it is on these charts... it'd have to include standard JS along with things like Angular or React. Which are, of course, largely useless without a backend language to do fancy things like database access.
Ah, but you're not assigning. C# 7.x can't do something like this: string description = switch (someObject) { case Ball b when (b.Distance &lt; 1): return "Nearby ball"; case Pie p when (p.Temperature &lt; 60): return "Tasty pie"; } C# 8 will probably ship a syntax like this: string description = someObject switch { Ball b when (b.Distance &lt; 1) =&gt; "Nearby ball", Pie p when (p.Temperature &lt; 60) =&gt; "Tasty pie" }; 
Try udemy.com should be some good training videos on there 
A few young, hip, Silicon Valley based startups != the rest of the corporate world and your average software development agency. In most real-life scenario's and projects, people (your customers) don't give a damn which technology you use, as long as you get the job done. Rarely you get one of those tech-savvy clients that are aware of the popularity of a certain language and/or platform and will want you to develop their application or website in Wordpress/Joomla/Drupal because they heard it's popular and that should your company disappear from the face of the Earth, there are a bazillion other Wordpress/Joomla/Drupal developers out there that can continue your work. On all company websites where I worked, there is a small, hidden mention of specific used technology at best. That, and there's still that anti-M$ narrative some people swear by. 
If you haven't gone through it already one favorite resources is the [asp.net](https://asp.net) site. From there it links out to [https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.1](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.1) The site also has a fairly friendly and helpful community, especially for beginner/simple questions.
Hey, it's me again! I added * and / operators, but I'm struggling to find a way to compare 2 BigNumbers. Do you have any ideas how that could work? I need that for my game, to check if I have more gold than the upgrade costs.
Aha, my mistake; I conflated the idea of a statement and an expression. Yes, that looks nice!
[System.Console reference](https://docs.microsoft.com/en-us/dotnet/api/system.console?view=netframework-4.7.2)
Yes, but you're going to have to stop often to figure out how to do the command line version of what they're doing, instead of the graphical version that's handled by VS. I'm not saying don't do it, but it's going to be more effort than you think. I would recommend doing a tutorial that is focused for a workflow with VS Code and the Command line dotnet tool.
docs.microsoft.com is the current docs, it's all in a github repo and can be updated by the community
We have a fairly massive codebase that used to be all VB.NET a decade ago and has been a mixture since. * Portions were just left alone. Mixing VB.NET and C# assemblies in the same solution is no problem at all. In ASP.NET, you can even mix both languages in the same project (if you use shadow copying). * Portions were manually moved to C#, bit by bit, as new features were added. * In the same vein, portions were auto-converted to C#. My experience with automated migration is mixed. You either find a very good converter, or you have to be very careful not to introduce bugs. (You might have good unit tests to spot them?) For example, these two won't do the same at all: Dim percentComplete = 30 Return remainingWidth / 100 vs. var percentComplete = 30; return remainingWidth / 100; Can you spot the error? The above will return `0`, not `0.3`. Unfortunately, C# inherited the asinine behavior from C that the `/` operator, on `int`s, implicitly rounds (if you _really_ want that behavior in VB.NET, you can use the `\` operator). Thus, the C# port of this VB.NET snippet will always return `0` or `1`, but never a fractional percentage, as one might expect. A good converter will catch this special case and make sure the denominator is not an `int`: var percentComplete = 30; return remainingWidth / 100m; // returns 0.3, as one might expect So, automatic migration is fine if you **know** the syntax of both languages, and you really just want to convert a snippet to a different syntax; you **could** do it manually, but it'd be finicky. Automatic migration is **not** a good idea if you're not particularly familiar with VB.NET, because you **will** introduce bugs where you least expect them. Other than that, it should also be noted that VB.NET has improved a ton over the years. A few tips: * turn on the compiler options `Strict` and `Infer`. Notice how, due to `Strict`, much of your code will no longer compile, as a lot of weird casting behavior in VB.NET (including late binding) will no longer be allowed. However, `Infer` will make it so that `Dim x = 5` is actually an inferred type, much like C#'s `var`! You will probably want to turn `Strict` on for the entire assembly, then _selectively_ turn it off for files that contain code that no longer compiles, by adding `Option Strict Off` to the top. Then, bit by bit, fix those compiler errors, and eventually remove the `Option Strict Off` from the file. Presto — you've made your code a lot safer during runtime! * doing so will also make it easier to subsequently convert pieces of code to C#, as C# is _always_ a lot stricter about types. Otherwise, you end up with a lot of variables that are `dynamic` or `object`, and nobody really wants that. * modern VS will automatically clean up your VB code a little. For example, a lot of (but not all) weird `_` line endings are no longer necessary, and VS will automatically remove them. (OTOH, this was actually buggy for a while, where it _thought_ it could remove them but actually created compiler errors. They've apparently fixed that, though.) * VB also has some interesting features such as XML literals (with syntax highlighting, formatting and all!) and XML node traversal that C# sadly lacks. I'm hoping for a more general solution in the future, with XML, SQL, JSON, etc. literals. We're still in the dark age where we effectively treat those as strings (which is part of the reason SQL injections are a thing) — yuck. Hope that helps.
Top recommended books on Amazon?
Thanks.
Very good stuff. Thank you so much.
&gt;C# Basics for Beginners: Learn C# Fundamentals by Coding That's the one. I have already listened to a part of that teacher's explanation on youtube and he is just great because of how simple he explains things. Though, obviously he uses .NET and VS which made me reluctant to go for it as I only use Linux.
It looks like an elaborate way of memoizing a function You can just a simple extension method: public static Func&lt;T1, T2, TResult&gt; Memoize&lt;T1, T2, TResult&gt;(this Func&lt;T1, T2, TResult&gt; function) { var cache = new Dictionary&lt;(T1, T2), TResult&gt;(); return (a1, a2) =&gt; { if (!cache.TryGetValue((a1, a2), out TResult result)) { result = function(a1, a2); cache[(a1, a2)] = result; } return result; }; } Then, if you have a `Func` f, you can just memoize it with: `f = f.Memoize();`
Ooooh, .NET Core is very cool man. The best way is to read the microsoft documentation about that... Then practice.. Nothing so much different. Good luck!
The list of startups in the article is not just from silicon valley though. I thought it's just a silicon valley trend too and made sure to look for in Europe and rest of US as well.
Yes it is an elaborate way indeed but for good reasons ! First of all I want to be able clear the memoized results programmatically (and with the extension method is impossible), additionally I don’t want to cache each and every input combinations because it would be very memory intensive without proper cache invalidation and/or cleanup. This is way the implementation is so complex. 
I guess that makes sense!
See of your job will pay for a few months (or more) of Pluralsight. Hands down the best resource for learning .Net Core. Don't forget about EF Core as well!
Adam Freeman's books are usually pretty good. 
Indeed, i am also learning from udemy. Sometimes courses are discounted Aldo for like 12$ of so. 
Good suggestion, it's worth an ask. I had it at previous job and it is a great resource.
That course is really good the teacher is the best. If you're a beginner just do it bro
Are you able to abstract your message bus behind a repository pattern? This is what we do for all our persistence related stuff. Whoever uses our framework has no knowledge of our databases or service discovery, they just use our repository interfaces.
I love what happens to 'with' blocks. :)
&gt;Wow! Thanks for the help. That's a cool library!
C#/.NET is super popular with highly proprietary and traditional businesses. Think insurance companies, finance, and small to medium size businesses that aren't going to become nationally known. It's no surprise that .NET is not showing up much for data which is mostly startups and super-massive tech companies.
Something the early Angular evangelists learned the hard way. Nah who am I kidding?! It's their clients who're stuck with a high-churn framework, and they've just moved on to shilling some other flavour of the week framework. 
I had thought they were pushing towards Rider and eliminating ReSharper. Im probably wrong on that.
This is the syntax I use for Tortuga Sails (an MVVM library I created because I was unhappy with MVVMLight). Normal: public ICommand NoParameterCommand =&gt; GetCommand(NoParameter); public ICommand WithParameterCommand =&gt; GetCommand&lt;TableVM&gt;(WithParameter); Async: public ICommand NoParameterCommand =&gt; GetCommand&lt;TableVM&gt;(async () =&gt; await NoParameterAsync()); public ICommand WithParameterCommand =&gt; GetCommand&lt;TableVM&gt;(async t =&gt; await WithParameterAsync(t)); `TableVM` is the parameter type. 
Thank you. I will go for it then!
Thank you for your input! I'm sadly more of a hands on type of person. Books and reading in general deter me from learning. So I always prefer to watch and see how someone does things in action. You have been greatly helpful though.
Lol sometimes. Udemy courses are always on that great 90% sale
Glad it's been working! Yeah the easiest way to would be comparing the exponents, and if they're equal then check the mantissas. Here's a way to do &gt;. The other comparison operators are the same. public static bool operator &gt;(BigNumber n1, BigNumber n2) { if (n1.Exponent == n2.Exponent) return n1.Mantissa &gt; n2.Mantissa; else return n1.Exponent &gt; n2.Exponent; }
How do you test if a program is correct? Example (Math): - Test if `add(1, 2) == 3` - Test if `add(x, y) == x + y`
We had a fairly large codebase for a crud webforms app that I migrated with some command line tool back before resharper had vb support. Our VB code all had strict on and we avoided indexers and tried to use `() ` on every function call without parameters. Until the migration got down below about a thousand errors we continued to use and modify the vb code to try and improve the migration. I think I migrated about a dozen times over a few months before we got the result we were looking for.
Check out [Visual Studio Dev Essentials](https://visualstudio.microsoft.com/dev-essentials/)! It's free to sign-up and comes with a lot of free resources. One of them being a free 3-month subscription to Pluralsight
Use Code Coverage tools for unit tests. Resharper for example.
Udemy. Courses are usually on sale for $15. I have a massive library of courses piling up that I don't even have time to start. Its an addiction, and I need help.
I would write a hand full of test cases with staged data. Then I would see if the targeted results are equal to expected results. My personal preference would be to add the result of each test to a Dictionary&lt;string,string&gt; with the key being the name of the test and the value being the results of the test. An example would be Int target = methodImTesting(10,5); Int expected = 5; MyAssertclass.Assert(target,expected); Foreach(var r in MyAssertclass.results) WriteLine(MyAssertclass.results.key +" " + MyAssertclass.results.value); This is a really quick and dirty example. Hope it helps.
You replied to a bot (who automatically replies with a summary when you have wikipedia links in your post) :-p
C#/.NET is huge with non-software businesses. For example, I used to work with an electricity provider who used .NET for everything. The reason the tech directors picked and stuck with it is because how standard the framework is. Powerful but without all the choice fatigue that comes with Java. Rural America has plenty of technology, believe it or not, and many love .NET.
As u/Gambleon pointed out, tests prove (or disprove) expected outputs. When you create a method with some parameters that does a thing, you have some expectations as to what that thing will result in. So you create tests to prove that the thing is in fact what you expect.
You're arguing with a bot that posted a summary of your wiki link dude haha
It didnt go anywhere, Indeed and Dice are dripping with C# and Java being minimum reqs for devs
lel hahaha is the first time I put a link I guess. and I don't use to comment to much. hahaha anyway, funny moments:')
The official MS documentation and Stack Overflow should be all you need. Plus, it's free.
Happens to the best of us :)
Reading the Linux Kernel docs on what filters are available (and how to use them) was the best way for me to learn. [https://www.tcpdump.org/manpages/pcap-filter.7.html](https://www.tcpdump.org/manpages/pcap-filter.7.html) I found that trying out the filters in wireshark wasn't as useful as experimenting at the Linux command line. ymmv
Same. We should start a support group!
"Proper"?
Thanks, this is what we agreed on. Also, !redditsilver
[**Here's your Reddit Silver, Slypenslyde!**](http://i.imgur.com/x0jw93q.png "Reddit Silver") /u/Slypenslyde has received silver 1 time. (given by /u/tuxmanexe) __[info](http://reddit.com/r/RedditSilverRobot)__
Can you specify which area you're looking at? E.g., desktop development (WinForms/WPF), console apps, Web development (ASP.NET MVC, Web API, etc.), mobile apps (Xamarin)? Coming from PowerShell, maybe something lightweight like [cs-script](https://github.com/oleg-shilo/cs-script) is a good starting point?
&gt;Where did the Microsoft Tech Stack disappear? It didn't. Microsoft is hugely popular; it just isn't "hip". Those charts are also seriously out of whack — there is absolutely no way that Java is seven times as popular as .NET. More widespread, perhaps. Seven times as widespread? No. &gt;Will .NET ever become popular with startups? I'm not sure why this matters. It might matter for Microsoft to grab some more mindshare with the cool kids, and .NET Core will probably help with that. But for you, as a developer, using the .NET stack offers huge opportunities both as a hobby and as a career. (Also, why on earth does that website do infinite scrolling _manually_?)
Thanks for the advice. I'll most definitely look into that stuff!
[EF](https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ef/writing-an-ef-data-provider) [EF Core](https://docs.microsoft.com/en-us/ef/core/providers/writing-a-provider) I know they're light on detail but it gives you a starting point. 
Wow It's so miniscule. Have anybody made anything that's able to do more than basics? Anyway, for Your speed and engagement, !redditsilver
Is this a permanent recurring price? or only for the first year? 
I think there are fundamental differences in PowerShell and C# that do not lend well to learning in that regard. PowerShell is not a programming language, but a scripting language. They are fundamentally different in their use-cases (not that there isn't overlap). I suggest learning from YouTube people, or getting a subscription to PluralSight.
Hehe, yeah, the EF Core one has a link at the top that gives a sort of [tutorial](https://blog.oneunicorn.com/2016/11/11/so-you-want-to-write-an-ef-core-provider/) and as EF Core is OS now, so you should be able to get some inspiration from GitHub. It's kinda fiddly. If you remember Jon Skeet, he did a really long series about creating a LINQ provider, called LINQBook I think. Some of that stuff is still super pertinent.
 &gt;Will the discount automatically extend to next year's subscription? &gt; &gt;No, next year's price will be calculated based on the standard continuity discount rules. I had the same question lol
I'm gonna play with the trials for a minute I've heard good stuff about resharper, should I grab the other dotXXX stuff? I've been playing with core for a couple months now, but I'm sure I've hardly used many of the available (VS2017) tools. Coming from a lot of python/pycharm and some java/intellij work fwiw, hoping to stick with C# for the foreseeable future. 
So its only 1 year at the discounted rate? Damn I would subscribe for life at this rate. The standard price was the only thing holding me back from buying the all products pack.
The version of .Net Standard supported by the framework version you're currently bound to, as well as both the platforms you want to develop on and deploy to. 
There are not that many reasons left to use resharper with vs2017. Even at 50% of the price.
I like dotpeek, but it's one of those things that you don't want to have to use, but sometimes you find yourself in a pickle. 
At the time I tried Rider (quite a long while ago now), it didn't expose all the configuration options for R# that VS did, so I had to open up VS to edit certain R# configurations (like file headers).
50% is the speed VS will be performing at after installing the addon.
Thank you for sharing this!
You can go ahead and take your savings to buy more RAM...
I still use the heck out of live templates.
This. The last few versions of VS have slowly integrated the most useful stuff from Resharper (ex: "go to implementation"). I haven't tried Resharper in a few years, but I still have nightmares about "full solution analysis" rendering my system totally useless.
I like your optimism!
Mosh Hamedani has some great online courses for .NET programming. Each topic is broken out into its own video lecture, so you can skip over concepts you are already familiar with. He posts most of his courses to Udemy (which on sale run about $12 each), or he also has a more complete catalog on his teachable site: [https://codewithmosh.teachable.com/courses](https://codewithmosh.teachable.com/courses). Hope this helps.
Not with current RAM prices....
I'd only be interested in dotTrace, but I have to buy the whole resharper ultimate bundle with it so..... no thanks.
Is there a good replacement for stylecop you’d recommend?
If you want to use some of their other tools and dive into some other languages and whatnot, the All Products Pack is a super good deal.
Grab an .edu email for student discounts.
How about [.editorconfig](https://docs.microsoft.com/en-us/visualstudio/ide/create-portable-custom-editor-options)?
You can still use stylecop. There's a rosly anlyzer for it. Google stylecop analyser. You just install it via nuget package, rosly is great! 
We've found that repository patterns seems to be a goto for us when we are exposing persistence related stuff to third party. 
Is there a good reason why you are not using the SelectedItem(s) property of the ListView to perform the delete on? In that case you just remove the ListView.SelectedItems from the ListView.Items collection.
yes
Is there a list/table somewhere that shows what is integrated and what is not? I have R#, but on bigger solutions it gets way too heavy. If VS is really close on the features I use, I can probably consider disabling it sometimes.
or a .ac.uk if you're a british student, you can renew it every year for free!
WCF is still widely used, but when people start writing something new, these days they prefer WebApi/RESTful services over HTTP. How are you planning to use that service? WCF services are mostly targeted for clients also written in C#/.NET Is "TCP" a requirement? Can you use other protocols or not?
 The service should be used to connect to 2 databases present in the company, Oracle and Sql Server, all the clients present in the company network through a Winform interface in c # would make access to the DB through the service and in case there is a need to perform processing the computing power would provide the service wcf, installed on a server "dedicated" the protocol can be any initiation at the time, I thought the tcp was faster being all in local. 
WCF is as alive as Silverlight. Do not use it if you can. Look into REST APIs and swagger/OpenAPI. This would last much longer.
I miss with blocks. They were such a great time saver.
Wait, other than actually joining a course, how does one "grab" an .edu or .ac.uk email. Asking for a friend obvs
Being a part of a UK registered university is the only way. *ac* stands for *academic*.
I've been using Resharper so long I don't know if Visual Studio without it will download reference source and pull it up for BCL classes and what have you when you Go To Implementation or if that's just a Resharper/dotPeek feature, but it sure is handy at times.
&gt;REST APIs I took a look at what you have recommended, seems suitable for web-oriented applications, for a scenario that I mentioned in the previous comment, could you recommend something?
Oh I get that, I just didn't know how to "grab" them. Other than actually joining a course (or being a part of a registered uni) The way op puts it, it seems easy, but it's actually not.
"Faster" is only important if you are really going to transfer big amounts of data. Are you? If not, some http/json overhead (over WCF binary serializer) probably will not be THAT important. Plus, it looks like you're not familiar with WCF. If I were you I would not spend time learning technology that's definitely on decline. Learn and use something more modern. You may want to read this: [https://www.infoworld.com/article/2905918/microsoft-net/choosing-the-right-technology-for-building-your-service-layer-in-net.html](https://www.infoworld.com/article/2905918/microsoft-net/choosing-the-right-technology-for-building-your-service-layer-in-net.html)
The blue book!! Such a verbose book yet it changed the way I think about development. A true game changer!
 I have no knowledge of wcf, it's just one of the possible solutions that came up looking on google, speed is important, the set of data to be obtained in response could be even 100 Mb, in the case of complex extractions 
I had the same first experience. I was trying to develop a simple game on the console to help me apply the concepts I was learning in school. The first response was "if you're trying to learn C#, building a game is a bad way to do it. If you're trying to learn how to build a game, the console is a bad way to do it." My response was "I'm sorry, I don't remember asking for your opinion on my project. Do you know the answer to my question or not?" Dude answered it.
Really? I enjoy resharper 
This is why visual studio uses 24gb of ram on my PC.
soy and starbucks valley.
For me yes. No hate to Bob Tabor but I personally preferred Mosh's style.
Doesn’t matter, it is dead to me.
 Why do you say this ? When was the latest update from microsoft? Are there any plans for evolutions? What would you recommend? 
dotpeek is free though.
It's a powerful tool, but the things that made it useful for everyone are pretty much standard in VS2017 now so it's less worth it. And now that they switched to the subscription model, it's even less worth it.
Yep. I enjoy vs2017 without resharper as much as I did enjoy vs 2008-2012 witb it. Starting from vs2013 Microsoft is catching up in features and in vs2017 I feel that r# is absolutely unnecessary for me.
Both features are available at least since VS 2015 IIRC.
I've found that you don't need to renew. I'm running an old version on an expired subscription. What was odd is that I had to run a version dated at the start of the subscription, not the end.
WCF over TCP is theoretically lower-latency, but as far as bandwidth goes, it doesn’t matter. 100 MB (I assume you mean bytes, not bits) shouldn’t be a problem at all for ASP.NET Web API. You can get some extra performance by: • using .NET Core • using MessagePack instead of JSON as a formatter Almost invariably, using WCF is a world of pain and a dead end. It’s theoretically more flexible, but at a cost.
Scripting languages are programming languages. It's just not a language for building software.
I suggest Udeny myself, a lot on there for a very reasonable price and on YouTube check out Time Corey :) 
It means I have used it before, didn’t like it, hated it actually, ripped it out and found better ways. It is dead to me because I will never use it again. I don’t care what Microsoft’s plans are for WCF. What do I use? I will use Asp.net MVC or WebApi. 
Thanks Badcommandorfilename. That appears to be very sage advice. Brooks and his law suggests I should just adjust my scheduling mistake :) I.e. I can't go faster... I shall digest this, thank you for the good information.
I could.... well I would have to work through it to know if it'll function I guess. I am still learning many things and doing this is one of those things :) I do have all my database stuff in a repo pattern and behind interfaces etc.... Just to learn those requires alot of communication to the contractor however. What prompted this post was that I need to do some website scraping. The scraping is a continuous process of getting changing prices from a website. Basically, I don't care how the contractor does it (well as long as they don't implement unnecessary complexity). But I need to somehow get the data back into my app. Who should interface who? Should the contractor use my interfaces? or should I get my app to interface into the contractors code? At some point, a message needs to be raised that the price data has changed, and my main app then has to take the according action. The dilemma that badcommandorgfilename made in the other post is fairly accurate I think. I.e. It could turn into a lot of labour. Perhaps as much work as just doing the other code myself. But...it's all a learning curve so proabably better to do it the hard way anyway :) Thank you, really appreciate your time and brain power
For anyone wondering about Rider. If your familiar with visual studio and/or like it don't bother because there isn't any 'killer' features added and still a number of things not available for a lot of more established/older MS tools. (e.g. it just got publish to IIS, no GUI for resx files, roslyn support is shaky and few inbuilt code scaffolding tools) If you love resharper then Rider is a great option as it's significantly faster than the vs/resharper combo. If you're already familiar with a jetbrains product it's also great as you can jump straight into .Net with great efficiency(my personal reason for picking it up) As a netcore developer i'm finding i'm very rarely having to open visual studio any more. Usually it's due to MS documentation and tutorials being VS focused but while a major issue 6 months ago it's now just a minor annoyance as everything catches up with the idea that C# no longer assumes visual studio. Nuget package management is great, git integration is handling my multi submodule project quite well,i haven't fet the debugger to be lacking in any areas and the test runner is great. More subjectively, the 2018.2 EAP looks miles better than visual studio.
Interesting! Maybe next reinstall I'll leave it out of my routine. Thanks! 
Just uninstalled Resharper. VS starts up and loads project in seconds instead of minutes. Time to learn the built in refactorings.
The biggest transition will probably be around EF6 to EF Core. Look at the EFCore project on Github and read their documentation. Make sure that the features you’re used to / need are present in Core. They are working to add EF 6 features to Core, but it’s not complete yet. 
&gt;jetbrains.com/promo/... Are you running ReSharper C++ with an enormous solution or something?
Subscriptions still suck. 
Dang, just literally bought yesterday at full price. Has anyone had any luck getting them to refund, so I can take advantage of the deal?
I am of the opinion that anything worth learning well is best learned using a well-written book. I used [Pro C# 7](https://www.amazon.com/Pro-NET-Core-Andrew-Troelsen/dp/1484230175/ref=sr_1_1?ie=UTF8&amp;qid=1533002238&amp;sr=8-1&amp;keywords=pro+c%23), coming from a beginner's knowledge of C++ and I can't recommend the book more. It's very thorough, up-to-date, and details not just the HOW but also the WHY behind the .NET way of programming. I don't know your individual skill level, but it is an intense read and not for the absolute beginner in programming. As for online-based resources, I've seen the C# Yellow Book recommended. The link for it is in the sidebar. I've never read it so I can't comment on how useful it is.
Bah, who needs more RAM? Just buy a high-end nVidia instead..
..I haven't looked yet. But could you open an email/chat dialog with them and ask for the deal instead?
I recommend you start with the official doc: [https://docs.microsoft.com/en-us/dotnet/csharp/quick-starts/](https://docs.microsoft.com/en-us/dotnet/csharp/quick-starts/) . it's really not hard for anyone has C++ experience. 
I find that if you server and client are both .NET, then WCF is much easier and faster to use. Heck, you don't even have to write the client, just use the proxy generator or share classes (https://www.infoq.com/articles/WCF-Code-Sharing) between the server and client. REST adds a lot of noise that is unnecessary unless you are making a public API. 
Incorrect. Scripting languages are not compiled. PowerShell does not output compiled artifacts.
Last I heard, WCF clients are fully supported in .NET Core. So yea, they're going to be around for quite awhile. WCF servers is another story. There are some die hard fans that really want it in .NET Core. Others say we should just give up on it. 
Silverlight isn't part of .NET Core, WCF is. And while I'm hoping that Swagger lasts, the jury is still out. "Modern" web standards don't have much of a shelf life.
I’d second that. Microsoft has tutorials that are pretty nice. Or Pluralsight if you don’t mind paying. Once you are comfortable then follow the Unity tutorials, don’t do those first because Unity’s C# style isn’t...well it’s not good. 
can f12 work with package/framework source in net core? i find myself debugging into source, so that part works, but i never get it from f12. i would *love* to view source in vs rather than poking around through github. 
are these static scripts that don't change? or do you expect them to be editable after deployment? if they are static, my first thought is just do it in c#. but since that's not the question, you may be able to embed the scripts as resources in the assembly. it's a little wonky to load assembly resources, but once you get it right, it just always works. in the case that they are dynamic and cant be embedded, the problem you're running into here is just the working directory. if you open up the debug settings and go to the working directory option and do $(Project_Dir). (i think that is the variable name, you can look it up in the context of msbuild), it should have your working directory as wherever the csproj is. Then if you have your scripts relative to your csproj, it will just work. You'll need to make sure that however you package+deploy places them in the same structure.
People on Twitter had the same question. They said to cancel sales and they can help you out
yea if you need real random, you're barking up the wrong tree with prngs anyway.
is it just me or are there way more in depth/nitty gritty articles like this in the past year or so? i think it is pretty cool that, if you're interested, you can poke around like this and find out what is really going on. open source ftw. great work, very interesting read. 
Are you using reshaper? It might be overriding the default F12 action
WCF is not a part of .net core. Swagger is quite old and also rather easy to use. It will last. Microsoft uses it as well.
WCF clients (not servers) have been available in .NET Core since version 1.0.
Unreal Engine project. Includes the whole engine. So yeah. Massive.
If .net standard/core libraries are available for services you need then ASP.NET core Web app is the way to go. Add Swashbuckle.AspNetCore nuget to generate swagger spec and to have a test page for your service. 
 no, just vanilla vs. 
VS is a 32 bit process, so more like 3gigs then crash.
If it helps any I believe you can set resharper hotkeys to match intellij's standard refactoring features to ease the transition. I don't use IntelliJ so I'm not familiar with its toolset but I believe a lot of its functionality is implemented into Resharper for exactly your scenario.
#1 is money. Windows VMs are more expensive on all cloud services and .net only recently became truly cross-platform. #2 open-source development became quite useful thus giving access to sufficiently good tools for free #3 perception of un-coolness of MS stack. #4 unavailability of MS stack on non-MS OSes (see #1) 10 years from now graphs may look different. 
I've been doing a lot of testing, trying different clients out, looking for usable server libraries. At the moment I'm actually trying to write my in RTMP server library. I am handling the handshake, and parsing the chunks now. I need to implement handlers for the different AMF commands still, but it's getting there. When I have something able to receive a cider stream from OBS or my drone, I'll publish the library and keep working on it from there to implement additional protocol features.
First you need to put down a few grand for a course.
Yeah, that’s the single most complained about thing from when they went subscription only. It’s bullshit that that which made me switch to CodeRush.
Install Roslynator and Intellisense Extender to replace resharper. It's so much faster and lightweight 
While that’s true, The subscription for all the products is about the same price as a Netflix subscription right now. That’s not all that bad, considering that most enterprise level software costs far more than that.
In case some people don't know, [you're allowed to use your company's license at home.](https://sales.jetbrains.com/hc/en-gb/articles/206544349-Can-I-use-a-commercial-license-purchased-by-my-company-at-home-)
Then Javascript, Python and PHP aren't programming languages to you either? Just because they're being interpreted does mean they do not count as programming languages. Also literally the first line you see when looking up the term "[scripting language](https://en.wikipedia.org/wiki/Scripting_language)": &gt; A scripting or script language is a programming language \[...\]
**[Scripting language](https://en.wikipedia.org/wiki/Scripting_language)** &gt;A scripting or script language is a programming language that supports scripts: programs written for a special run-time environment that automate the execution of tasks that could alternatively be executed one-by-one by a human operator. Scripting languages are often interpreted. Primitives are usually the elementary tasks or API calls, and the language allows them to be combined into more complex programs. Environments that can be automated through scripting include software applications, web pages within a web browser, usage of the shells of operating systems (OS), embedded systems, as well as numerous games. A scripting language can be viewed as a domain-specific language for a particular environment; in the case of scripting an application, it is also known as an extension language. Scripting languages are also sometimes referred to as very high-level programming languages, as they operate at a high level of abstraction, or as control languages, particularly for job control languages on mainframes. ***** ^[About](https://www.reddit.com/user/ultimatewikibot/comments/90r969/about) ^| ^[Leave](https://reddit.com/message/compose?to=ultimatewikibot&amp;subject=Blacklist&amp;message=Me) ^[me](https://reddit.com/message/compose?to=ultimatewikibot&amp;subject=Blacklist&amp;message=Me) ^[alone](https://reddit.com/message/compose?to=ultimatewikibot&amp;subject=Blacklist&amp;message=Me) 
You can also bring your personal license to work, although having your employer pay for it is certainly the way to go.
It's a good write up. I've seen it used in production code, but for very specific things. Have you had a look at the new Span&lt;T&gt; and Memory &lt;T&gt; constructs in Core and the separate nuget package for CLR?
Honest question: I [develop games](http://tilcode.blog/) at the side in C# and Unity using Visual Studio and works just fine. Why should I pay for Rider?
https://github.com/DotNetAnalyzers/StyleCopAnalyzers
for the safety of your mental health never use VS Code. VS is the best IDE existing, VS Code is notepad with cool shading effects
I suggest you watch https://www.youtube.com/user/Brackeys He teaches basic c# and also goes deep into unity programming. Has a lot of tutorials on it.
This is really good, worth the ten bucks: https://www.udemy.com/unitycourse/
Pass your 70-483 exam easily in first attempt with the help of verified Microsoft 70-483 exam questions with valid answers. Braindumps4IT provide MCP [70-483 braindumps](https://www.braindumps4it.com/braindumps-70-483.html) guaranteed success. We have updated 70-483 practice test questions and providing with Microsoft MCP exam passing assurance. 
Pass your 70-483 exam easily in first attempt with the help of verified Microsoft 70-483 exam questions with valid answers. Braindumps4IT provide MCP [70-483 dumps](https://www.braindumps4it.com/braindumps-70-483.html) guaranteed success. We have updated 70-483 practice test questions and providing with Microsoft MCP exam passing assurance. 
Removed: Rule 4. Links in the sidebar. You can check out /r/learnprogramming, /r/Unity3D, /r/gamedev. Also check out Unity's official learning materials, they're pretty good: https://unity3d.com/learn They have their own discussion forums too if you want some help from other Unity users: https://forum.unity.com/
Honestly, in your position, I would be greedy. According to your post, you've saved this company a "massive" amount of money. If that's true, they know it. Make sure that they know you know it. You won't be in this position again. You can definitely ask for a huge raise without being full of yourself. Will the person you're discussing salary with have room to negotiate? Would you be willing to find another position elsewhere if this company doesn't meet your salary expectations? What's the market like there for both your current position and the position you'd be moving into?
REST won't replace WCF until you can autogenerate clients from a REST endpoint. REST is great for writing a web app. It really has no advantage over WCF outside that.
They are similar enough that it won't matter. For instance using EF6 v EFC basically the only differences you'll likely run into early on is: 1. No automatic database initialisation in EFC 2. Config is passed in via an option object rather than pulling a connection string from app/web.config
Thanks for that. I emailed them and they sent me a coupon for 6 months free extension which is something. 
WCF is not to be confused with WebApi. WCF supports distributed transactions, fine turning such as single threading, single instances, Queue interfaces, it can run in a service and not use IIS, you can implement your own bindings and protocols, the same end points could support XML, Json, or ice cream sandwiches (i just made that one up, but you get the point). The flexibility is really insane.
Well people have created Postgres provider which is considered production quality so apparently someone has made something that is considered more than basics :)
Web, mobile or desktop? Static for desktop. Fuck tdd and fuck interfaces. The second implementation could not avoid the base class and implment directly the interface?
 public static RoundModel PairRandomly(this RoundModel Round) I'm really against extension methods that mutate the object and then return the instance, except if it's the builder pattern. Code smell right here.
It's web. Why fuck TDD and interfaces?
Good thinking, the pairing can be done after the class has been created so would builder be a good idea still?
Hiya Ok. I see you are trying to work in a more WinForms-like way. Controls and code behind. Maybe you think it is the more straightforward way. However, I believe MVVM makes things WAY easier. Let me show. First, since ActualHeight and ActualWidth are readonly you cannot bind directly to them. You create an observer, and do binding through it. Using Attached properties. public static class SizeObserver { public static readonly DependencyProperty ObserveProperty = DependencyProperty.RegisterAttached( "Observe", typeof(bool), typeof(SizeObserver), new FrameworkPropertyMetadata(OnObserveChanged)); public static readonly DependencyProperty ObservedWidthProperty = DependencyProperty.RegisterAttached( "ObservedWidth", typeof(double), typeof(SizeObserver)); public static readonly DependencyProperty ObservedHeightProperty = DependencyProperty.RegisterAttached( "ObservedHeight", typeof(double), typeof(SizeObserver)); public static bool GetObserve(FrameworkElement frameworkElement) { frameworkElement.AssertNotNull("frameworkElement"); return (bool)frameworkElement.GetValue(ObserveProperty); } public static void SetObserve(FrameworkElement frameworkElement, bool observe) { frameworkElement.AssertNotNull("frameworkElement"); frameworkElement.SetValue(ObserveProperty, observe); } public static double GetObservedWidth(FrameworkElement frameworkElement) { frameworkElement.AssertNotNull("frameworkElement"); return (double)frameworkElement.GetValue(ObservedWidthProperty); } public static void SetObservedWidth(FrameworkElement frameworkElement, double observedWidth) { frameworkElement.AssertNotNull("frameworkElement"); frameworkElement.SetValue(ObservedWidthProperty, observedWidth); } public static double GetObservedHeight(FrameworkElement frameworkElement) { frameworkElement.AssertNotNull("frameworkElement"); return (double)frameworkElement.GetValue(ObservedHeightProperty); } public static void SetObservedHeight(FrameworkElement frameworkElement, double observedHeight) { frameworkElement.AssertNotNull("frameworkElement"); frameworkElement.SetValue(ObservedHeightProperty, observedHeight); } private static void OnObserveChanged(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs e) { var frameworkElement = (FrameworkElement)dependencyObject; if ((bool)e.NewValue) { frameworkElement.SizeChanged += OnFrameworkElementSizeChanged; UpdateObservedSizesForFrameworkElement(frameworkElement); } else { frameworkElement.SizeChanged -= OnFrameworkElementSizeChanged; } } private static void OnFrameworkElementSizeChanged(object sender, SizeChangedEventArgs e) { UpdateObservedSizesForFrameworkElement((FrameworkElement)sender); } private static void UpdateObservedSizesForFrameworkElement(FrameworkElement frameworkElement) { // WPF 4.0 onwards frameworkElement.SetCurrentValue(ObservedWidthProperty, frameworkElement.ActualWidth); frameworkElement.SetCurrentValue(ObservedHeightProperty, frameworkElement.ActualHeight); } } Then I would create a ViewModel (in my case MainWindowViewModel. It would have to implement INotifyPropertyChanged to handle notification to view (only if you need to notify to the view). public class MainWindowViewModel : INotifyPropertyChanged { private double _width; private double _height; public event PropertyChangedEventHandler PropertyChanged; public double Width { get { return _width; } set { _width = value; OnPropertyChanged(nameof(Width)); } } public double Height { get { return _height; } set { _height = value; OnPropertyChanged(nameof(Height)); } } protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null) { PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName)); } } And finally the view. View would only bind the ActualWidth and ActualHeight to the viewmodel porperties, that would be automatically updated &lt;Window x:Class="WpfApp1.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:WpfApp1" xmlns:viewModels="clr-namespace:WpfApp1.ViewModels" xmlns:observers="clr-namespace:WpfApp1.Observers" mc:Ignorable="d" observers:SizeObserver.Observe="True" observers:SizeObserver.ObservedWidth="{Binding Width, Mode=OneWayToSource}" observers:SizeObserver.ObservedHeight="{Binding Height, Mode=OneWayToSource}" Title="MainWindow" Height="450" Width="800"&gt; &lt;Window.DataContext&gt; &lt;viewModels:MainWindowViewModel /&gt; &lt;/Window.DataContext&gt; &lt;StackPanel Orientation="Vertical"&gt; &lt;StackPanel Orientation="Horizontal"&gt; &lt;/StackPanel&gt; &lt;Label Content="{Binding Height}" ContentStringFormat="Height : {0}"&gt;&lt;/Label&gt; &lt;Label Content="{Binding Width}" ContentStringFormat="Width : {0}"&gt;&lt;/Label&gt; &lt;/StackPanel&gt; &lt;/Window&gt; Way easier, isn't it??? 
Let's start with: &gt; Precision is only used when the value is a date. The REST API from which I'm making requests expects the value to be a string Here are the steps I'd follow: 1) Build a model that reflects what you actually want, rather than what the JSON forces you to have. In this case, it sounds like you want a class with a `Value` property, but without a `Precision` property. Perhaps we could call it `StringTerm` (I don't know the business, so there might well be a better name). You might even make it so that this class has a constructor which takes, as a parameter, a `Term`, and builds itself from that `Term` object using only the data that's needed 2) Design an interface which describes the services you need. The interface perhaps could include a method `IEnumerable&lt;StringTerm&gt; GetStringTerms()` 3) Implement that interface in a class. The class will implement `GetStringTerms()` by calling the REST API, then perhaps doing something like `return terms.Select(t =&gt; new StringTerm(t)` 4) Inject an instance of that class into the object that requires it. 5) Be aware that this will perform less well than just using the `Term` class as it is. You will need to decide whether the performance hit (which is quite small) is worth it to get cleaner code. Usually the answer will be Yes, but if you're doing this in a loop that executes millions of times, in code where performance is critical, then probably No.
Prototype, you have .net examples a lot. Is just your extension method leaving the initial instance inmutable and returning a new one.
Hey! Thanks so much for the reply! This is basically what I was trending toward, but I still had this small roadblock in my brain for why I didn't take this approach. Let me see if I can type my way through the thing that's really irking me about this issue. So, in your scenario, let's say we have StringTerm and DateTerm that both inherit from ITerm public interface ITerm { string canonicalName {get;set;} string _operator {get;set;} string value {get;set;} string matchType {get;set;} } StringTerm implements ITerm with no added information. DateTerm adds the Precision property. The problem is this: * The API will accept the precision property if it's provided * We don't really care about the precision property when the value isn't a date * We really, really care about the precision property when the value is a date * To be as hands-off as possible, I want the root object that gets sent to the API to be able to accept both types of terms (probably obvious, but worth mentioning) As I said, I'm not explicitly making reference to any of these properties in my code, but in the interest of scalability and maintainability, I want to make sure that the option is there in the future. By having the root object accept an ITerm instead of the existing Term class, I'm cutting off the ability to reference Precision in a meaningful way if I don't have the underlying object being passed as the ITerm-type property. I'm only using ITerm to superficially tie together two related but ultimately different classes. Does this, then, become a situation where I have to go up a level and make the root object inherit from an interface that allows me to send the data to the API, and providing separate implementations of that interface for each of the different term types? Sorry again for drilling in super hard. This is something I've struggled with for a while, and I'm really trying to use this as an opportunity to finally wrap my head around it. I really appreciate any and all help you're willing to give.
Not a good practice to use statics on web. With that static you do not have a constructor, therefore you wouldn't be able to inject dependencies and testing would be more difficult.
If endpoint provides swagger/openAPI spec then clients can be generated for multiple languages. There are client generators for c# .net core and full network, java, javascript, ruby, python and so on. For WCF non-expert simplicity of REST is the greatest advantage over WCF. 
Books on SOLID are just going to lead you astray. What you really need to read is **Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries**. This is literally the set of rules used by Microsoft themselves when creating the .NET Framework. https://www.amazon.com/Framework-Design-Guidelines-Conventions-Libraries/dp/0321545613 
Ok, I think I've got it. My first post answered a slightly different question to the one you asked. In this case, I wouldn't define `ITerm` the way you have. I wouldn't include `Value` in it (properties should start with capital letters). I might make `StringTerm` have a `string Value {get; set;}`, and `DateTerm` have a `DateTime Value{get; set;}`. Or better, you might even make it so that the interface is `ITerm&lt;T&gt;`, and it has a `T Value{get; set;}`. Then, `StringTerm` would implement `ITerm&lt;string&gt;` (and thus `Value` would be a `string`), whereas DateTerm would implement `ITerm&lt;DateTime&gt;` (and thus `Value` would be a `DateTime`, and you could also add a `Precision` property to it). You can then write a method which returns an `IEnumerable&lt;ITerm&lt;object&gt;&gt;`, which gets all the terms. And you can write a factory method, `ITerm&lt;object&gt; MakeTermFromJson(Term term)`, which checks the type of the term's value and returns an `ITerm&lt;string&gt;` or an `ITerm&lt;DateTime&gt;` as required. Your interface will then include all the functionality that applies to all kinds of terms. It might contain a `Process()` method. Each implementation of `Process()` can do different things, so that `StringTerm.Process()` processes a string value, and `DateTerm.Process()` processes a date value, including using the precision in some way. Hope that makes more sense now!
hehe from behind...
this is a cool read about that: https://dfederm.com/learn-span-by-implementing-a-high-performance-csv-parser/ a csv parse using the new C# 8(?) things
Or you could use regular pointers. C# has those IIRC (you just have to mark it as unsafe).
View this sub as 'old reddit' and check out the links in the sidebar under 'Useful MSDN Resources'
Are you using a old version of ReSharper? I just opened my company's 20 year old C++ monstrosity with 114 projects, turned on solution wire analysis, built, waited 40 minutes for it to finish building, and I'm only sitting at 1.4 GB. Early versions of ReSharper C++ are not known to handle solutions of 40MB in size and we used to turn it off for our solution because of this limitation. Now I just have to incur the time it takes open the solution for the first time. After the first time everything is fine. Haven't opened a Unreal solution in a while, but I used to run ReSharper and I never noticed anything crazy. I can try again though.
Thank you yes a lot easier, however, what I'm trying to change is the position or margin or anything that let me position the label on a certain place (i have to after figuring that out convert it to 0-1 place based on a picture placed behind so that it cover the same part even after resizing the window) i will try continue from where you reached but my thought process goes back to the same thing i did in the start what i have in mind now is placing the border in a grind col 1 row 1 and place another dummy one (i may do it transparent or send it to the back) and then play with that dummy dimension to get my border to where i want it to be but doing that i can't think how it should cover the same part of the photo after resizing the window Thank you a lot, i love doing this but i feel that i lack a lot of experience and knowledge in this field (i'm switching from winForm - not that i was that experience there anyway)
Lol, I read that on the train this evening :D
(Ok, I deleted my earlier reply to this because it contained ideas that won’t work. Here goes take 2) I think I've got it. My first post answered a slightly different question to the one you asked. In this case, I wouldn't define `ITerm` the way you have. I wouldn't include `Value` in it (properties should start with capital letters), because it seems like `Value` should be different for each implementation. The interface should only define the thing they have in common. Instead, I might make `StringTerm` have a `string Value {get; set;}`, and `DateTerm` have a `DateTime Value{get; set;}`, as well as a `string Precision { get; set; }`. The interface contains common features. For example, it might have `void Process()` - the `DateTerm` implementation of this will have access to the precision if it needs it, but the `StringTerm` implementation won’t. It might also contain `string ValueAsString()`, which converts the value to a common format, so that although the interface won’t give direct access to the value (and can’t, since the data type of the value isn’t known), it can still give access to the value once it’s converted to a common type. Hope that helps!
wow, after looking again i see that you get to store the windows sizes ,, that caused me a lot of troubles before and finally i chose another approach to pass that. Thanks again
I still feel like this doesn't fix the problem with the precision property, though. Your perspective is the perspective I had when I started on this problem, but what I've moved onto, and the part that's really hanging me up, is looking at it from the other side. Say I have class Root { public string Name { get; set; } public ITerm Term { get; set; } } If I create var root = new Root { Term = new DateTerm(...) } The nature of interfaces prevents me from accessing root.Term.Precision. Of course, this is to be expected when you understand how interfaces work, but it does mean that this doesn't allow me to capture the functionality I want. If I want to run some sort of data validation or introspection, within or on 'root', that's related to the Precision property of the root object's Term property, I am unable to do so. In essence, while it *does* allow me to give the Root object a StringTerm or a DateTerm as its Term property, it *does not* allow me to treat those terms as their appropriate types. So, it only solves half of my problem. Does that make more sense, or am I still just saying the same thing I said before? The more I type it out the more I feel like I'm just describing what it is to work with a static type system and not bringing anything new to the table...
Good writeup but I'm not sure how useful this is: * If you're taking a reference/pointer to a struct type, the inbuilt language constructs are sufficient (especially with the newer `Unsafe` class). Before the `Unsafe` class we were forced to use `__makeref` for generic types; but that is no longer the case. * Otherwise if you're taking a ref/ptr to a class type you'll have to pin it before you can do anything at all (as you mention). But when pinning an object, [C# gives you the address anyway](https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.gchandle.addrofpinnedobject.aspx)- and this address is offset past the method table &amp; header iirc. The only thing that springs to mind is that you could [globally instruct the GC to stop](https://msdn.microsoft.com/en-us/library/system.gc.trystartnogcregion.aspx) for a period, negating the need to pin (and therefore circumventing restrictions on what types of object can be pinned). But what you'd do with those pointers I'm not sure: Ultimately the interesting data of any object heirarchy is contained in the raw data types (invariably structs)- the rest is just references to other objects all the way down which you don't to go to all this trouble to alter. Maybe some sort of instrumentation? Still, great write-up. If it turns out to be purely educational that's still a welcome change to the usual noobie-question posts 👍.
&gt; The nature of interfaces prevents me from accessing root.Term.Precision Yes, it does. And that's almost certainly correct. The interface should describe all the things that you can do on **all** types of Term. So - let's get into more detail. What exactly do you need to access Precision for? Let's say that it's some kind of processing. In that case, you need to be able to process **all** Terms. You might process them in different ways, so that DateTerms get processed one way (using Precision), and other Terms get processed another way. But this should all be encapsulated within the individual Term classes. Classes that *use* the Terms should **not** need to know anything about what's in them or how they work - all of that should be in methods that actually belong to those classes, which implement methods on the interface. If it's **absolutely necessary** for you to do what you're trying to do, you could do this: if (root.Term is DateTerm) { DateTerm dateTerm = (DateTerm) root.Term; ProcessPrecision(dateTerm.Precision); } But I'd argue that that's probably a code smell. Another option would be to have a repository which has the following methods: IEnumerable&lt;ITerm&gt; GetAllTerms(); IEnumerable&lt;DateTerm&gt; GetAllDateTerms(); Then, if you need to do processing which doesn't use Precision, you can call `GetAllTerms()`. And if you need to do processing which *does* use Precision, you can call `GetAllDateTerms()`. But if you're doing that, I'd consider whether different types of Term are similar enough to even share an interface (not saying they're not, I'm just saying it would warrant some consideration).
I see what you're saying, now. I think the fact that I've been working with this same API and these same classes in the same way for so long prevented me from being able to see this solution. I'll work on implementing these suggestions and see where that gets me. Thank you so much for taking the time to walk through this with me.
Not to mention WCF is strongly typed and REST is not. For inter-process communication, I'll take WCF all day long.
If I could impose upon you just a little bit further, I started messing around in LinqPad to try to get something I was happy with. Here's what I came up with public class DateTerm : ITerm { public string _operator { get; set; } public string canonicalName { get;set; } public DateTerm value { get; set; } public string Precision {get;set;} public ITerm GetBaseTerm() { return new DateTerm { _operator = _operator, canonicalName = canonicalName, value = value, Precision = Precision }; } } public interface ITerm { string _operator { get; set; } string canonicalName { get; set; } ITerm GetBaseTerm(); } public class Root { public ITerm Term {get;set;} } From there static void Main(params object[] args) { var root = new Root { Term = new DateTerm{ Precision = "Steve"} }; root.Dump(); var dateTerm = root.Term.GetBaseTerm(); dateTerm.Dump(); } This yielded a Root Object, and a DateTerm object with the appropriate properties, as I expected. The only thing I'm worried about with this implementation is that having the ITerm interface implement an ITerm-typed property may be a code smell of its own. I know this is subjective, but I wanted to see what your thoughts were.
OData v4 + ASP.NET Core + Entity Framework Core should do the job. ODdata v4 is a RESTful API that uses HTTP for transport and JSON for formatting - but adds a lot of functionality. WCF Data Services also uses OData v3, but I believe that my above mentioned route should be the ideal way of exposing a relational database using a REST API.
&gt; having the ITerm interface implement an ITerm-typed property may be a code smell of its own No, that's fine - so long as it's returning a different ITerm (e.g. the parent of the current ITerm). In the example you've given, you are creating a new object, but it looks like a duplicate of the current object, so maybe `return this;` would be just as good? If you really do intend/need to create a new object that's a duplicate of the current object, e.g. because they are different objects and their properties will change and become out of sync with each other, then all is good. But if `return this;` would do the job, *and this is true for all other ITerms* then the whole method is probably unnecessary (on the interface, as well as on the class). And if you need the method on the interface because some ITerms have a base that's not the same as the current item, but that just doesn't apply to DateTerms, then `return this;` would be preferred - no point making a new interface when it's not required. Also, I presume this is just a typo: public DateTerm value { get; set; } Should be `DateTime`, not `DateTerm`? PS - properties should (still) have capital letters!
Hi 00rb33k! Most package managers essentially do the same thing: 1. Download packages from the web 2. Puts them someplace of your choosing, which allows you to access them, in, for instance, your project. Different package managers do this differently (i.e. they are configured differently), and different package managers have different scopes (e.g. they handle different types of packages). Library manager only seems to abstract an underlying package manager (e.g. NPM), in a simplified syntax. However, for the purpose and scope of what you want to do (e.g. serve bootstrap and jQuery), I'd say you should either: 1. Serve them from CDN (e.g. cloudflare) using: `&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/core.js"&gt;&lt;/script&gt;` 2. Download these scripts manually and reference them locally `&lt;script src="js/jQuery.js"&gt;&lt;/script&gt;` All these package managers do is save you the "download step" anyways. Also. This doesn't have much to do with C# in particular. It is very much a web-thing. Hope that is of some help. :)
&gt; In the example you've given, you are creating a new object, but it looks like a duplicate of the current object, so maybe return this; would be just as good? Functionally, yes. I was going to move on to `return this;` next. I was just going for the most obvious solution to make the example make sense to me. As for the next point, `GetBaseTerm()` was my way of making the interface return the true underlying object, with that object's type included. Again, so I could take a `root` object, grab a `Term` property that I knew to be a `DateTerm` and force output of a `DateTerm` object so I could get to the specific properties that don't exist in `ITerm`. Sort of splitting the difference so I can use an interface, but still have access to the derived class. &gt; Also, I presume this is just a typo: Yeah, it is. Good catch. LinqPad makes you pay for auto-completion. &gt; PS - properties should (still) have capital letters! I know, I'm just lazy. That's how the Special Paste formatted it. I just haven't gotten around to fixing it.
Have a look at OData v4 then.
OData v4 (WCF Data Services used OData v3) uses Entity Data Model and supports ASP.NET Core. It exposes a REST API over HTTP so it is platform agonstic unlike WCF. 
&gt; `GetBaseTerm()` was my way of making the interface return the true underlying object, with that object's type included That won't work, though, because the return type is still ITerm. `root.Term.GetBaseTerm()` gives you an ITerm, and `root.Term` also gives you an ITerm. In neither case do you have direct access to properties that are not part of ITerm; in both cases, if you really need access to those properties you can cast it as I showed above, but in both cases you'd be better off encapsulating whatever you need to do inside the DateTerm class: interface ITerm { string Operator { get; set; } string CanonicalName { get; set; } void Dump(); } class DateTerm : ITerm { // ITerm properties string Operator { get; set; } string CanonicalName { get; set; } // DateTerm properties public DateTime Value { get; set; } public string Precision {get;set;} // ITerm methods public void Dump() { DumpData(Operator); DumpData(CanonicalName); DumpData(Value); DumpData(Precision); } } class StringTerm : ITerm { // ITerm properties string Operator { get; set; } string CanonicalName { get; set; } // DateTerm properties public string Value { get; set; } // ITerm methods public void Dump() { DumpData(Operator); DumpData(CanonicalName); DumpData(Value); } } Then: static void Main(params object[] args) { var root = new Root { Term = new DateTerm { Precision = "Steve" }}; root.Term.Dump(); } 
Ok. That makes sense. Thank you.
Good one. +1
I like this as a Meme. Updoot. 
Writing testable and maintainable code isn't overengineering...
Not really related to the actual issue, but I don't know why you have inconsistent naming for public properties. Since you're using JsonPropertyAttribute in your POCO (I prefer writing my own converters) anyway, why not use PascalCase and set the PropertyName to the naming that the API uses? 
So… anyone willing to invest in a .NET startup? :)
A good package manager handles also pulling down any additional dependencies the thing you're downloading has. So if you were getting a Calendar widget that needed bootstrap, a good package manager would only require you to say "I want the calendar" and then it also would grab bootstrap for you. It also makes working with a team a little easier as you don't need to commit large chunks of dependencies to your shared code repository. That's getting into things you probably don't need to know about quite yet though.
That book is 10 years old, and .NET has come a long way since then. I think that the official [Microsoft Design Guidelines Document](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/) covers most conventions just fine. 
I agree. Mosh has this way of talking that reaches almost everyone from all levels of experience. Thank you once again though :)
Thank you very much for your help. I will be sure to keep that in mind.
You probably renamed `trip_calculator.cs` to `Form1` or vice-versa. Visual Studio should have given you a dialog to change all references of `trip_calculator` to `Form1` but you might have ignored it. You can either do Ctrl+H (opens replace dialog), and then replace every reference to `trip_calculator` with `Form1` or you could rename the file back to `trip_calculator.cs` and then to something more sensible like `TripCalculatorForm.cs` and in `Program.cs`, you could add `Application.Run(new TripCalculatorForm());`
My understanding is: * Bower is winding down, and apparently the Bower folks specifically recommended to the VS folks to remove support. The Bower website seems to suggest not to create new projects with Bower. * LibMan doesn't intend to compete with npm, but rather provide a simple/lightweight alternative. &gt;Is my understanding correct that I could achieve the same by downloading the bootstrap css, and jquery js and bootstrap js files manually, You could, but you really shouldn't if you can avoid it. Among the reasons: LibMan helps you take note of newer versions.
It can compile .net core via omnisharp but not .net. Well, not easily. You can use the command line to run msbuild on Windows or mono on *nix systems for .net. Naming is tough but there is definitely a distinction between the two frameworks. 
There is a lot of information on here that's hard to parse as a beginner but using the right tooling is key. As I've said, if you're writing .net core, vscode will be great, but visual studio is basically required for regular .net. Once you learn more you can use command line tooling to use whatever editor you want for whatever framework or language. There is also a took called linqpad that allows you to scratchpad c#. It's important to know that c# is the language and .net and .net core are frameworks to build c#, f#, and visual basic applications. Let me know if you run into anything difficult to understand in that course. 
Try selecting the code block, hit Alt+Enter, and chose to configure formatting.
Bless your soul. It's finals week and my brain is fried. I actually initially renamed form1 in Program.cs when I first tried to compile but I must have made some sort of mistake as it was still giving me the error. Thanks a bunch!
https://www.jetbrains.com/dotnet/promo/unity/
I don't have much of a choice. Either I use it and get used to it or abandon learning the language altogether. Linux is not optional for my use case.
I highly recommend looking into Webpack when you get into JS work. It's great, because you can use the more modern JS syntax, stylesheet compilation, and Hot Module Reloading which lets you update your JS while the app is running and will update the code without resetting the state of your webpage (even with things like React or Elm). You can even set it up to proxy certain requests, which means you can have asp.net running on :5000, and the dev server at :3000 but still call controller endpoints without your c# project knowing anything about webpack or the frontend code other than where the compiled "index.js" comes out. Having your backend code responsible for compilation can be annoying because of recompiles, and will likely piss off any front-end devs if you use it at work; relying on the IDE's compilation functionality also makes it really annoying to use different editors, which you'll probably want to do with JS.
The amount of contradiction I see in this thread. I'm not discrediting what you claim. Actually, thank you for your input. I decided to take on the course and try it on the cross platform side of things and see the differences myself.
Seems pointless to recommend an IDE that can’t easily compile the code you’re working on.
The fundamentals haven't changed. As for the link you provided, it's a good summary. But the book explains why the rules exist.
Oh maw gawd, thank you for this. I have been wondering what to mess around with using Span and CSV is perfect.
Both compile code, but vs code only has an extension that compiles .net core. That's why I suggested OP use the right tool. Technically you can compile .net with the command line and a basic text editor. In fact, you can compile a lot more with vs code than with visual studio because of its huge amount of extensions. 
That link doesn't actually reply the question, all of that can be done with VS too (unsure about shader support, but still not enough value to pay for).
please note im not the author. but yeah, its really cool. I'm way better at C++ pointer/reference (and smart pointer land) than anything new with C#
Yeah, no worries. I was half thinking out loud there. :)
Oh wow, that is a very useful tip, thanks!
Java style overloaded methods instead of properly using optional parameters. 
Every time you write a line of code you'll be a little bit smarter. Let yourself make mistakes. Encourage yourself to make mistakes. If you don't make them, you can't learn from them. There is a reason no one wants to hire junior developers. Juniors make mistakes someone has to pay for those mistakes, no one wants to have to pay for them because they are part of the learning process. For example, no matter how many times you spell the word start, some times you're just in a rush and type statlrt instead. It's okay, because you're going to remember how to spell start, and more importantly check your work (code review) before submitting to reddit (git commit). 
To avoid bad habits, approach code with a test first mindset. If you always have tests before you write any code, it's harder to make mistakes and introduce bugs now and in the future.
I just made my computer say hello to me and it felt so fucking cool.
Follow the [C# conventions and naming guidelines](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines). The verbosity and clarity will only help you later. 
 { Use Allman brace style ONLY! } K&amp;R bracing is not welcome in C# universe { }
I would pay 100% price for 200% speed.
no
[Yes.](https://softwareengineering.stackexchange.com/questions/236995/why-do-c-developers-newline-opening-brackets)
&gt; Java style overloaded methods instead of properly using optional parameters. every c# developer I know uses K&amp;R bracing :P
They're not following Microsoft guidelines and default Visual Studio styles then. Every single piece of C# code on MSDN uses Allman bracing. This is C# - not Java!
WTF kind of style is your second example - it sure as hell is not Allman. 
and as long as its consistent throughout the entire project/solution, its really a personal preference, no matter how your braces are.
The battle has begun. Shall we also discuss tabs vs spaces here?
Well don't format it so dumb and it would be readable
Use the var keyword sparingly. Don't forget to unwire your events. 
Who cares? Other than you I mean. We're aware, we just think that writing code comfortably/smoothly and keeping style consistent within a codebase is a far better use of resources then enforcing an arbitrary and - at this point - esoteric bracing style. Two other points: - Most other braced languages (C, C++, Swift, [insert any shading language], Java, R, Perl etc etc) tend to use K&amp;R, so if correctness _actually_ matters, MS/Allman is the outlier/wrong - A HUGE percentage of C# devs at this point are Unity developers, and everywhere in the Unity docs is K&amp;R, making it an unofficial yet widely subscribed to authority on style I don't give a shit what you use personally, I just hate when grouchy .NET people make a stink about bracing for no practical reason
That's exactly it. Personal preference. Its like EMACS vs Vim vs Nano vs Notepad++
the point is it shouldn't matter as long as the codebase is consistent
I didn't invent my own. I use K&amp;R as does my team.
K&amp;R is an accepted convention. Allman is default for now, but the fact that [K&amp;R is an option](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference#formatting-conventions) means that it is acceptable.
I see tons of clever code samples that would be a pain to maintain, so here are some personal feelings on writing maintainable/readable code. The less thought I have to put into understanding code, the better. These C# features can be double edged swords that can help or hinder readability depending on how they are used so put a little extra thought into them. LINQ is neat but don't chain a bunch of LINQ and lambdas together in almost any situation. If you think you need them to do a complex selection of data, use the SQL type syntax. If you are patting yourself on the back for how clever and you are for fitting some complex data manipulation into one really long line of LINQ code, smack yourself in the face, create a function that returns the data you want, make the process clear, and give it a descriptive name. Don't overuse lambdas. In some cases they make your code nice and readable. In other places they plop a big chunk of code tangential to the purpose of your method interrupting readability. Maybe a personal preference, but I rarely use var. I like to know what kinds of variables I am dealing with instead of having to track down where they are used and figuring out what is assigned to them. I never want to be reading code and think to myself, OK is this going to be a List&lt;string&gt;, string[], or TimeSpan, or a bool?
IMHO: Try to be open to the idea that the right way to do something in, say, C++ may not be the right way to do it in C#. Some of the most truly awful C# code I've ever had the pleasure of maintaining is, basically, Java (or, ugh, Spring) code written in C#. There's a lot to the .NET Framework and honestly I think being a good C# developer is at least as much about knowing what it does or doesn't make easy and taking advantage and/or architecting accordingly.
&gt; K&amp;R is an accepted convention Not for C# it isn't. Get back to us when it's the default in Visual Studio.
This [article](https://blogs.msdn.microsoft.com/danielfe/2003/11/24/its-all-a-matter-of-style/ ) from 2003 and this [issue](https://github.com/dotnet/corefx/issues/381) from 2015 - there is no mention of Allman being the only acceptable convention. In fact, [1/3rd of all C# code on GitHub uses K&amp;R](http://mattwarren.org/2017/10/12/Analysing-C-code-on-GitHub-with-BigQuery/) - despite Allman being the VS default. Like the other guy said, it's a choice. If OP is the only person working on the project, then K&amp;R is perfectly acceptable. Besides, [corefx uses Roslyn to automatically rewrite code to follow conventions](https://github.com/dotnet/codeformatter). Even if he uses K&amp;R on a repo with Allman being preferred, it should get rewritten (for most decently sized projects, I hope). 
How about: whatever style you use remember to be consistent. Honestly this is something I couldn't care about really. I've worked in many places that have their own silly quirks with formatting that it's just easier not to lose sleep over it. Personally I just use whatever formatting my IDE picks unless I'm working on a project which requires a specific style.