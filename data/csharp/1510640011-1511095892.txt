Very interesting and elegant. As a game developer, I normally stay away from LINQ at runtime, but for tools this can be a fantastic addition. 
True!
You'd have to design it yourself. Have a look online for shops offering like services. I ordered two whilst at it :^-)
As far As I know the hamburger menu doesn't support binding out of the box.
I was laughing at the first picture then I was black-affronted at the second.
I call it a fat arrow.
It's not at all about the OS. If it's not .NET Standard, then interop with a .NET Standard library becomes challenging at the least. .NET Standard is new.. wait for it.. 'standard' - so libraries including Desktop CLR is moving towards it.
Especially not types. My* variables are bad enough.
My goal with the library is to provide helpers that have full control over lower level winapi that's either convoluted, or has a lot of boilerplate. If you find a helper like taskbar progress for example, to fit that criteria and be useful, I'd be happy to see a PR :)
I think it works great, why am I wrong?
I pronounce it "lambda operator", because that is its name. :-) https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions &gt; Do not confuse the lambda operator (=&gt;) with the greater than or equal operator (&gt;=).
&gt; If you have classes with 50-100 properties ReSharper should be the least of your concerns. This is major code smell in my opinion. Most classes start out with few properties, and then they grow and grow. By that time everything depends on it staying that way. Spaghetti is cooked gradually and hindsight is always 20/20.
£ that’s a pound sign ;)
Monomorphised humour fam
Personal preferencesl I guess, but I prefer telling the IDE what I want it to do rather than having it guess. Ctrl R T will run a test anywhere in the test and not do anything else. Creating a var with a name based on the class is also just an obscenity in and of itself, can't see why you'd ever want to do that, but I assume you just used it as an example. If you do actually do that, please stop. Variable names are important. 
But they have decent feature parity if you work on basic Web and mobile projects.
Pro tip: A ssd helps the visual studio experience immensely, and 16gb+ of ram will make sure it never hangs on most solutions.
Arrow function or arrow expression
*asterisk. Not to be confused with [Asterix](http://www.asterix.com/asterix-de-a-a-z/les-personnages/perso/g09b.gif)
Chances are, you are doing something wrong, but you do not see what. Maybe the following: * update app.config * run &lt;apname&gt;.exe without building it. ? Why do I say that? Because when building, MSBuild (VS, same thing), copies app.config to &lt;appname&gt;.exe.config. Check that this indeed does happen (e.g. by comparing the two files or whatever). 
Only coffee is described in the requirements.
Slightly unrelated, but there's a neater way of implementing `Equals` if you're using C# 7: public override bool Equals(object that) =&gt; that is Card c &amp;&amp; this.Name == c.Name; Or if you're implementing `IEquatable&lt;Card&gt;`: public bool Equals(Card that) =&gt; this.Name == that.Name; public override bool Equals(object that) =&gt; that is Card c &amp;&amp; this.Equals(c);
Don't bloat your repository with build artifacts.
That's fine, so long as non-coffee implementations provide error code 418, in accordance with [RFC 2324](https://www.ietf.org/rfc/rfc2324.txt)
I've called it bang for years now as well. =&gt; I call that ditdit. I have no idea why. I make a lot of weird noises (Im Serious ADHD)... but when I type clickity clickity ditdit =&gt; 
public void poundBangBinBash(){// Do nothing!} 
Some people have already mentioned that "it already does that with intellisense". I don't think that's correct. However, intellisense *will* get you most of what you want: - With emmet, type `p Tab`, and get `&lt;p&gt;&lt;/p&gt;` - With Visual Studio intellisense, type `&lt;p&gt;`, and get `&lt;p&gt;&lt;/p&gt;` All of this applies with both HTML and CSHTML files - they are both the same in this respect. I don't know of any way of getting the same functionality as emmet, but [this extension pack](https://marketplace.visualstudio.com/items?itemName=MadsKristensen.WebExtensionPack2017) looks like it might be useful even if it still doesn't replicate emmet's functionality. I haven't tried it though, I just found it through a Google search.
Removed: Rule 3.
Removed: Rule 6, spam.
&gt; No, you're using the API wrong. &gt; &gt; &gt; &gt; This is a clearly a Coffee cup, this is contracted by the where clause. If anyone is putting anything other than coffee in this cup, they're wrong. Just like using an XMLHttpRequest to retrieve JSON. 
Zazzle is a good place to start. I've had [this one](https://www.zazzle.com/z/oatx9?rf=238640349499498994) saved for when I need a new coffee mug. 
&gt;Octothorpe - exclaimation point - forward slash - bin - forward slash - bash Just rolls off the tongue.
IIRC, "!" was called bang operator in some old version of VB, but I don't remember what it did. "!" is a not operator in c# 
Just a guess, but with [UseShellExecute = false](https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.useshellexecute\(v=vs.110\).aspx), how does the OS know what to do with a python script? I suggest either setting it to true, or launching the python executable directly with the script as a parameter.
Maybe this will work? https://stackoverflow.com/a/11779234/1277156
Create a temp table. Run a LINQ query that grabs the rows you're filtering by. Add those rows to the temp table. Set the data source of the data grid you're using to display the data. That's pretty much a high level overview of what you could do.
If you're using Xamarin for cross platform development you can create apps for Android, IOS, and UWP with around 90% of the code being shareable. Xamarin can also be a struggle to get used to though if you're not used to it.
Create a service to handle it for you. The code you're presenting looks like it would be in a windows service, which is already running constantly. You can have it "do stuff" when the elapsed time event gets called. 
Huh, I never thought of that, I ended up just making it into a csx and have been running it in scriptcs and it's been working fine for testing, but I'll definitely look into making it into a service.
Because we're all still stuck in 32 but. It's the current year!
Perhaps, I'm destroying a good joke. If not, I hope you didn't the `32` in Win32 doesn't stands for 32-bit - It doesn't. It's legacy naming that carried along. It's the Windows API - It's referred to as Win32. On 64bit system, the API is `Win32`, while 32-bit is `WoW64` (Window[32]-On-Windows64). And the Windows Runtime API - the new 8.1+ API (that's more restricted). 
Still retarded.
&gt; 1): My packaged app does not throw exceptions - even when it's a debug build. I have "Include full PDB symbols" selected in my config, but when it runs into an exception is just freezes and then crashes. Are you catching the exception? If not, this sounds like the expected behavior. &gt; 2): Is it possible to edit assets from a packaged build? I'm trying to send a debug build to my writer so they can add data via json. Because of this, I need the json files to be exposed and not in so pak file. I don't know if something like this is possible, but something you can do is ask for a file in the debug build, and then take the data from there instead of the bundled file while the app is active.
&gt;Are you catching the exception? If not, this sounds like the expected behavior. But it's exceptions I've made. They're mostly for parsing the json data so, if they put something wrong, the program will crash and tell them what's wrong with it. You can't do that? &gt;I don't know if something like this is possible, but something you can do is ask for a file in the debug build, and then take the data from there instead of the bundled file while the app is active. That's true, but I'd really want that to be my last resort.
Well, so you know why I call my library just "WinApi" :)
That's how I proceed. But as said, there are articles which states opposite: http://blog.ploeh.dk/2014/01/29/nuget-package-restore-considered-harmful/ Maybe anyone had first-hand bad experiences with nuget restore? (I know it is not dotnet core article and that's basically why I started this topic (wondering whether some old .net issues are still existing)
Psst, they're actually [the same thing](http://www.shadycharacters.co.uk/2011/05/the-octothorpe-part-1-of-2/). # is the evolved form of lb (libra aka pound) with a line through it (℔, to indicate an abbreviation) and £ is a stylized L, for libra (the system of money based on pounds sterling), with a line through it (also to indicate abbreviation).
&gt; But it's exceptions I've made. Doesn't matter who made them. If you don't catch them and explicitly show a dialog with the exception message, the app will crash. It's how it works.
&gt; "!" is a not operator in c# [It is, in fact, a unary operator](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/logical-negation-operator). It can even be overridden with custom logic for your own classes.
The #! at the beginning of a Linux shellscript was related to me as either 'sharp-bang' or 'hash-bang', going on twenty years ago. Contextual, of course, but it does see some use.
Unless you're quite old, all of those terms have been in circulation for years, and their use is at least somewhat culturally determined. Depending on the context, it may also mean 'number' or a musical sharp.
...But that's now how it works in any other environment I've worked in. If you ran the debug version, and it hit an exception, the program would crash and a window dialog would pop up with the exception message. You're telling me that UWP specifically doesn't do this? That doesn't make sense to me.
That's a terrible article. If you are worried about NuGet being down (I'm not, but I understand that some might be), copy the packages you need to an *internal NuGet gallery* as a backup - not to the project folder or source control. NuGet galleries can be created from local folders and fileshares if you want to make it quick and easy.
&gt; You're telling me that UWP specifically doesn't do this? Other platforms like Android and iOS do this as well. They do show a message, but only informing that the app is dead. &gt; That doesn't make sense to me. Even if it doesn't, you shouldn't let your app crash in the first place. You should catch the exception and act accordingly.
Use a local cache to get past the issues of working remote. I don't agree with that article. Space is cheap and checking your binaries into source control causes the binary to be copied every time it changes.
&gt;Other platforms like Android and iOS do this as well. They do show a message, but only informing that the app is dead. But why? Is it not possible? I don't see any benefit to that. If you're testing your app, why on earth would you want the application to crash without telling you *why* it crashed? &gt;Even if it doesn't, you shouldn't let your app crash in the first place. You should catch the exception and act accordingly. This is just for the writers so they don't mess up the json, though. How should I act? Have the program keep running? The literal point is for them to go and change the json to the right format. Keeping the program running makes no sense in this situation.
&gt; How should I act? Have the program keep running? No. You should tell them the JSON is wrong (even showing the line that has the error, if possible) and then stop the app.
I did not actually know that. Learn something new everyday!
Thank you for the response, I ended up fixing everything. I put the canvas inside a grid and now everything lines up correctly with all the margins intact. Thanks again! 
Pound is fine, although creeping towards archaic, but in the US, point is more likely to be confused with dot (".").
 &lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;ohNo:Data&gt; &lt;![CDATA[ { "message": "I don't see the problem." } ]]&gt; &lt;/ohNo:Data&gt;
True, but it has some class.
Why not use lodash?
! being "bang" is an old school unix jargon. # is also known as "crunch", rather than pound. I suspect younger people would just call it hashtag though
&gt; ( = bracket are you a native English speaker? not flaming, just curious
Yup, lodash and underscore are both ideal replacements. I probably should have mentioned them. But also it's important to learn how to walk before you try to run. :)
I disagree very much with the article. Package restore on a dev machine happens **once, at first build** after getting clean sources. That's pretty much the same point in time. Core or standard .net - no difference for this discussion.
Its not the only one https://msdn.microsoft.com/en-us/library/hetcw0tx.aspx
OK this is awesome! Thank you!
Only for predicates. Otherwise 'such as' sounds weird.
The Hash bang slash bin slash basher!
[ = square bracket { = accolade ( = bracket
Are you using an NVIDIA graphics card by chance? I've had some success assigning resolutions and primary monitors using this C# wrapper for the NVIDIA API: https://github.com/falahati/NvAPIWrapper
Don't make changes to System.Collections directly, copy the code into a different project and namespace, make the changes, and import that.
'Such that' for predicates. 'Returns' for expression-bodied methods. 'Maps to' for Select() and similar.
I'm on a Intel(R) HD Graphics 520, the desktop is a Lenovo Thinkcentre M900 Tiny
How did you install HtmlAgilityPack on Windows? I use Nuget which has instructions that might work on your raspberry pi. https://www.nuget.org/packages/HtmlAgilityPack/
Oh no :/ Any idea of a remedy for this?
Not exactly, it could be blocked.
Look into Plug and Play: https://www.codeproject.com/Articles/13285/Using-UPnP-for-Programmatic-Port-Forwardings-and-N Also websockets: https://stackoverflow.com/questions/10200910/creating-a-hello-world-websocket-example I have no used any of them, but they don't require any firewall changes.
I do, but I don't work with Epic in any way (not to say that I won't in the future). I'll take a casual look later this evening. 
I do but never heard of it, I thought that the sole purpose of dicom was to not have those proprietary format ¯\\\_(ツ)\_/¯
HtmlAgilityPack is an assembly,i.e. an .dll file. If you have used NuGet to install on Windows you will find a directory *Packages* in the solution directory. in this directory you will find a subdirectory called HtmlAgilityPack.1.4.9.5 (or some other version...). and in this directory there is a lib subdirectory which contains subdirectories for each version of .NET (e.g. MySolution\Packages\HtmlAgilityPack.1.4.9.5\lib\Net45\HtmlAgilityPack.dll) Copy this file to your project on the raspberrypi and add a reference to it in your project. Maybe it's easier to search for HtmlAgilityPack.dll ... 
If you're ok with the overhead of TCP connections, sequencing, etc, and want a reliable transport with integrated framing (so you don't have to manage your own message demarc), check out WatsonTcp. https://github.com/jchristn/WatsonTcp
You should be banded for life for bringing up Visual Sourcesafe. All jokes aside you should just bite the bullet and migrate it. Even if there is an extension, there might not be one next year. Pay down some technical debt now.
You should be banned for life for not knowing how to spell 'banned'. 
I call it "goes into", or "gazinta" for short. Not that that really describes what it does...
You go to Venkat: https://www.youtube.com/watch?v=SXmVym6L8dw&amp;list=PLAC325451207E3105 On these older videos his mic isn't very good. He upgrades it later in the series. The content is very good however.
The real question is why this library when AngleSharp exist
This article should really be called C# to Javascript, not TS. `reduce` for example is a part of the ES5+ spec, it has nothing to do with TypeScript.
No, the real question is why be a condescending douche? 
Well feel free to continue using legacy semi-deprecated libraries and get butthurt in the process, it's not a problem for me.
are you sure it will still be relevant?
If you're going to migrate to anything, why not something a bit more sane like git or svn?
5 years isn't that old when it comes to the fundamentals - they don't change that much. Besides, there's a lot more legacy code around than cutting-edge stuff.
I haven't watched the series, but it should have everything you need to know. Most major programming concepts look and act the same across the major languages. Most series will start you off with data types, loops ect. Much farther down the road when things get very language specific is when you can worry about having the most recent information. For now the fundamentals matter and they haven't changed because... well... they're so fundamental. The linked series should be fine for now. Good luck! 
Yes thank you for this cheat sheet... Very usefull...
glad to hear it!
Step 1: Pls never say coding language Step 2: Books, YouTube, pluralsight, safaribooks, or maybe a library
What are the intended use cases of this serializer?
the [/r/learnprogramming FAQ](https://www.reddit.com/r/learnprogramming/wiki/faq) might help
Depends on the language you are learning as your first one. Java and C# are both a lot easier to learn than C++. For Java as a total beginner, look up a pdf for the book Big Java Late Objects, which assumes zero previous knowledge and is easy to read for absolute beginners.
I've always found CodeAcademy a great place for beginners with accessible content. https://www.codecademy.com/
To produce strings and files that can be imported into Epic through it's Chronicles tool (which provides management functionality for Epic's reference tables). Any activity that results in data being loaded into Epic's master files could use this to produce the required chronicles files.
Yes, found that package and it is works alright so far. Thanks!
Not to pile on, but there is a VSS to TFS tool out there. You all running into an issue where theoretically they might not update that tool to the latest version moving forward. Then you face the issue of doing a double upgrade. It really is a smooth process. Only thing different is that you won't have to worry about the DB being corrupt
Codeschool.com are offering all their courses free for the coming weekend No ember 17-19 All videos and coding is done in browser. You don’t have to set up an IDE or anything. I’d recommend starting with JavaScript. It starts really basic, and the basics you learn can be applied to many different languages. 
Ok, so it would be mainly used to create applications to help assist with build - not necessarily meant to interact with production system? Also, I'm curious what your motivation was for this, if you don't mind me asking?
Usually when you create a new project you have a reference to System assemblies added automatically that point to the latest versions installed on your machine. Remove those and add reference to the assembly you modified by using the browse option and selecting your assembly dll file.
Yes, and one with a degree in English. '(' and ')' are just plain brackets unless ambiguity requires otherwise.
huh TIL 
Yes. As someone else mentioned, the fundamentals don't change; but we do get new language features, and not all of those are covered. This is a very good introduction to programming. It assumes no prior knowledge and covers all the important fundamentals. Trust me, you won't regret watching this series; and once you have completed it, he has several other series that you may find interesting (SQL Server, ASP.NET MVC &amp; Web API, JavaScript...)
It interacts with the Chronicles tool, in all environments. Adding provider identities and users to our production Epic system occurs throughout the day as a result of our IAM team's workflow, as these additions, changes, and deactivations accumulate batches are kicked off and those records are sent to Epic and our other systems in their format of choice. There are many spots in our code base where data is sent to a file to be imported by Chronicles. That was previously all done by various people over the years who have since left, and each of those portions of code were different, specific to file being created, and difficult to maintain. And that's just in my team, there are other teams here that also produce files destined for Chronicles who have the same problem.
VB6 is cutting-edge, right?
I used Bob tabor videos on YouTube. His a Microsoft guy I think. That helped me learn the basic better than all the books I bought. After I had that understanding the yellow book and head first in c # helped cement some concepts etc. Now I code stuff based on what I've learned and keep adding to it so I don't forget
It's cutting-something.
Tfs hosts git.
Color me intrigued. I'll take a look tomorrow, since we're looking at ways to automate some of our processes.
Dicom is for medical imaging. HL7 is kind of the standard for healthcare, messaging, but aside from being a complex mess that no one implements properly it doesn't cover everything you need for an EMR. CDA can do some of that, but I've worked with undocumented proprietary binary formats that were less painful. 
Systray icon out of the question? You could close the app to a tray icon and when clicked just have a messagebox. Kinda headless kinda not.
Feel free to PM me if you have any questions.
The whole HL7 fiasco is why FHIR will die screaming.
Never did it in powershell, but did it in c#. Funny thing is, it was for a m900 also. Hit me up if you want code.
If your code starts the other process it's not that hard. Google "C# read output from process" and read through the stackoverflow questions. It can be done with .RedirectStandardOutput = true; If the process is already running it's actually pretty hard and (imo) not worth the effort (if it even can be done). You would have to inject code into the other process and spawn a remote thread. This is what some malware is doing and that's why you probably will trigger some antivirus alert with this approach.
/r/csharp
Correct me if I’m wrong but Epic already provides us with many utilities for many different things. Also, there is compliance issue due to Epic being uber strict, anything that’s non-Epic and touches anything in Epic requires it being certified. I only deal with the printing and faxing side of things within Epic.
That would be awesome, I'm just glad someone else has seen it before, I'd like to know how you found it out more though.
A simple "no" would've sufficed , lol. ;) We do plan on using tfs I was just wondering if it was possible.
I understand, so I guess I am stuck with System.Diagnostics to start the thread. =(
Epic is definitely strict regarding non-Epic things. However, they do provide an import tool with a known format that will reject files that don't match the specification. That tool is where they have drawn the line on support and this library just makes getting there a little less painful.
[removed]
I would recommend git over tfs when you’re ready to switch. I have used git, vss, and tfs and git has been the best one to work with. You can use Microsoft’s team services with git for the repository. It also integrates well with Visual Studio and Visual Studio Code.
When you get something to easily create 834s...let me know
what's an 834?
it might be possible in some strange parallel universe. Im not surprised at the responses. Your post pretty much reads as "Hi I want to make a modern race car with my 112 year old steam engine, anyone know how?" For reference, VSS is over 25 years old and was already long past replaced at a huge number of IT shops by its last release in 2006. Thats an eternity in modern software. 
Oh I agree. Some of their stuff is not exactly stellar quality. But I'd still be weary of using anything like that in even bld/stg. At our company, all this stuff is monitored like crazy.
its an EDI file format https://en.wikipedia.org/wiki/ANSI_834_Enrollment_Implementation_Format
If it makes you feel better I still use Visual Source Safe. I just haven't got around to upgrading yet. :)
What do you mean by that? You could describe a bigger picture. Maybe there is another solution.
Kill it with fire. Everything, GIT or HG. 
There are free decompiling tools for .NET that would allow me to drag your program into it and browse the source code in plain text. As for a solution to your problem, I honestly couldn't give advice. But in terms of people being able to see your source code, they definitely can (and will if it's worth it).
Implement or find a library for a hash function and store a hash of the password. Then accept a string, hash it, and compare to the hash of the password.
Two thoughts, though I don't have experience with either... External encrypted XML file. Maybe stored in a network location so you could read it in as a Dictionary&lt;int, string&gt; for user ID and password. That way you're not storing credentials in code. Would a code obfuscator help in this situation? I've never used one before but maybe that could at least help...? Disclaimer: I'm still pretty new to C#. These are just ideas that may be of some assistance in your thought process. Good luck!
Security through obscurity is the only way to do it when all the code is running on the user's machine. Best security is having critical features in the cloud where your app becomes largely useless if it doesn't have a connection. If it must be all local than you need a DRM, preferable one that runs your program entirely in a virtual machine. It makes it very tedious to find sensitive code.
You make it sound as if you never terminated your application and there is no way to restart it. Is it deployed on a satellite revolving around the Moon ? Otherwise, like others suggested, just spawn it from your new parent process, redirecting standard streams is very easy then 
Its a good start but there won’t be a need for adversary to brute force a hash, just to patch code to avoid all checks completely
I'm sorry, but even though I prefer AngleSharp myself, I agree with OP. There's kinder ways to suggest stuff.
Please **do not** do that. It's a **stupid** way of doing things. Very stupid. Instead, modify your application to have a part (an assembly) that can return the needed info in a *programmatic* manner. Then reference that assembly from another application and call that assembly. If your "callee" (the one that produces information) has to stay running and/or the information is somehow "inside" it, use normal interprocess communication (IPC) techniques like .NET remoting, DCOM, WCF etc. Your idea is about the most primitive IPC there is and should be used only as the last recourse (e.g. when you have no access to the sources of the "callee"). It's amateurish otherwise.
We're actually using this at work and we have bindings working. Tomorrow, I'll let you know what we are doing. I don't remember off the top of my head.
XSLT
Yeah that's what I had mentioned I was planning on using, thanks! So once I create the proper XSLT file, is it just a matter of passing the XML schema file into it and it would save the generated file? Does this look correct? XPathDocument myXPathDoc = new XPathDocument(myXmlFile) ; XslCompiledTransform myXslTrans = new XslCompiledTransform(); myXslTrans.Load(myStyleSheet); XmlTextWriter myWriter = new XmlTextWriter("result.xml",null); myXslTrans.Transform(myXPathDoc,null,myWriter);
IMHO there's no reason to use anything other than Git in this day and age. I used Mercurial/Hg for many years, from 2008-ish to 2014 before switching to Git, and Git is just infinitely better in almost every way. Pretty much the only advantage I'd say Hg has over it is the fact that it tracks renames, making its convert extension better able to split repositories. This is nowhere near enough to make up for its not-so-great tooling (TortoiseHg - now using GitExtensions with Git) and general clunkiness of use.
And I say the opposite that there's no reason to use git and HG is superior as **version control** in every way. But git won, and the inferior product reigns on just like the inferior VHS beat the betamax 
Aside from the rename-tracking I already mentioned, what advantage would you say Hg has over Git?
Actually protecting the source code history and not having irrevocable data loss. 
The Git reflog makes it easy to revert any accidental mess-ups, so unless you manually delete repositories after messing up, there is no danger of data loss.
Awesome, thanks! I'll be waiting :D
Obfuscation would merely slow people down and not much to be honest 
You could create still write a windows app and use Desktop bridge to run the UWP Notifications https://developer.microsoft.com/en-us/windows/bridges/desktop 
Good luck finding someone that can operate Teflon
Step 1, stop calling it “coding” or “coding language” nothing makes you look more amateur, managers will discard CVs that have childish phrases like that on it. I’m being serious.
I do prefer AngleSharp, but HtmlAgilityPack has a new maintainer and [website](http://html-agility-pack.net/).
The problem with HL7 is that it's deceptively simple. People look at an HL7 message and figure they can write a parser or a generator really easily, but you probably need between 5 and 10 years experience with health care and HL7 to do it properly, and even then it's a massive undertaking. A lot of vendors tend to box tick it so it ends up with all these weird edge cases. 
It literally takes at most a few minutes of googling to figure out. A quick google of "how to use git reflog", for example comes up with this simple guide: http://effectif.com/git/recovering-lost-git-commits
[Original post](https://www.reddit.com/r/csharp/comments/7cppt9/just_my_cup_of_t/) inspired me to try to make my own using my favourite colour scheme.
I totally agree to \u\goteberg but if you ever want to experiment with this then google about autoit - they have pretty cool DLLs..
 your_console_app | your_stdout_reading_app The idea is that you 'pipe' the stdout of the first app through to the stdin of the second app. The second app simply has to read from stdin and the output of the first is coming as input into the second app. If the console app already runs, then you need hooking and dll injection, which is quite complicated.
Personally, as a C# dev that picked up a great amount of JS I just love this approach. It feels like making C# one step less 'clunky'
[removed]
 public void playBackgroundMusic(){ Console.Beep(659, 125); Console.Beep(659, 125); Thread.Sleep(125); Console.Beep(659, 125); Thread.Sleep(167); Console.Beep(523, 125); Console.Beep(659, 125); Thread.Sleep(125); Console.Beep(784, 125); Thread.Sleep(375); Console.Beep(392, 125); Thread.Sleep(375); Console.Beep(523, 125); Thread.Sleep(250); Console.Beep(392, 125); Thread.Sleep(250); Console.Beep(330, 125); Thread.Sleep(250); Console.Beep(440, 125); Thread.Sleep(125); Console.Beep(494, 125); Thread.Sleep(125); Console.Beep(466, 125); Thread.Sleep(42); Console.Beep(440, 125); Thread.Sleep(125); Console.Beep(392, 125); Thread.Sleep(125); Console.Beep(659, 125); Thread.Sleep(125); Console.Beep(784, 125); Thread.Sleep(125); Console.Beep(880, 125); Thread.Sleep(125); Console.Beep(698, 125); Console.Beep(784, 125); Thread.Sleep(125); Console.Beep(659, 125); Thread.Sleep(125); Console.Beep(523, 125); Thread.Sleep(125); Console.Beep(587, 125); Console.Beep(494, 125); Thread.Sleep(125); Console.Beep(523, 125); Thread.Sleep(250); Console.Beep(392, 125); Thread.Sleep(250); Console.Beep(330, 125); Thread.Sleep(250); Console.Beep(440, 125); Thread.Sleep(125); Console.Beep(494, 125); Thread.Sleep(125); Console.Beep(466, 125); Thread.Sleep(42); Console.Beep(440, 125); Thread.Sleep(125); Console.Beep(392, 125); Thread.Sleep(125); Console.Beep(659, 125); Thread.Sleep(125); Console.Beep(784, 125); Thread.Sleep(125); Console.Beep(880, 125); Thread.Sleep(125); Console.Beep(698, 125); Console.Beep(784, 125); Thread.Sleep(125); Console.Beep(659, 125); Thread.Sleep(125); Console.Beep(523, 125); Thread.Sleep(125); Console.Beep(587, 125); Console.Beep(494, 125); Thread.Sleep(375); Console.Beep(784, 125); Console.Beep(740, 125); Console.Beep(698, 125); Thread.Sleep(42); Console.Beep(622, 125); Thread.Sleep(125); Console.Beep(659, 125); Thread.Sleep(167); Console.Beep(415, 125); Console.Beep(440, 125); Console.Beep(523, 125); Thread.Sleep(125); Console.Beep(440, 125); Console.Beep(523, 125); Console.Beep(587, 125); Thread.Sleep(250); Console.Beep(784, 125); Console.Beep(740, 125); Console.Beep(698, 125); Thread.Sleep(42); Console.Beep(622, 125); Thread.Sleep(125); Console.Beep(659, 125); Thread.Sleep(167); Console.Beep(698, 125); Thread.Sleep(125); Console.Beep(698, 125); Console.Beep(698, 125); Thread.Sleep(625); Console.Beep(784, 125); Console.Beep(740, 125); Console.Beep(698, 125); Thread.Sleep(42); Console.Beep(622, 125); Thread.Sleep(125); Console.Beep(659, 125); Thread.Sleep(167); Console.Beep(415, 125); Console.Beep(440, 125); Console.Beep(523, 125); Thread.Sleep(125); Console.Beep(440, 125); Console.Beep(523, 125); Console.Beep(587, 125); Thread.Sleep(250); Console.Beep(622, 125); Thread.Sleep(250); Console.Beep(587, 125); Thread.Sleep(250); Console.Beep(523, 125); Thread.Sleep(1125); Console.Beep(784, 125); Console.Beep(740, 125); Console.Beep(698, 125); Thread.Sleep(42); Console.Beep(622, 125); Thread.Sleep(125); Console.Beep(659, 125); Thread.Sleep(167); Console.Beep(415, 125); Console.Beep(440, 125); Console.Beep(523, 125); Thread.Sleep(125); Console.Beep(440, 125); Console.Beep(523, 125); Console.Beep(587, 125); Thread.Sleep(250); Console.Beep(784, 125); Console.Beep(740, 125); Console.Beep(698, 125); Thread.Sleep(42); Console.Beep(622, 125); Thread.Sleep(125); Console.Beep(659, 125); Thread.Sleep(167); Console.Beep(698, 125); Thread.Sleep(125); Console.Beep(698, 125); Console.Beep(698, 125); Thread.Sleep(625); Console.Beep(784, 125); Console.Beep(740, 125); Console.Beep(698, 125); Thread.Sleep(42); Console.Beep(622, 125); Thread.Sleep(125); Console.Beep(659, 125); Thread.Sleep(167); Console.Beep(415, 125); Console.Beep(440, 125); Console.Beep(523, 125); Thread.Sleep(125); Console.Beep(440, 125); Console.Beep(523, 125); Console.Beep(587, 125); Thread.Sleep(250); Console.Beep(622, 125); Thread.Sleep(250); Console.Beep(587, 125); Thread.Sleep(250); Console.Beep(523, 125); }
There is a proposal for making reference types non-nullable, which is something I've seen in other languages like Kotlin and F# and really hoping we get that in C# aswell. [Here](https://gist.github.com/olmobrutall/31d2abafe0b21b017d56) is the link for the proposal.
Maybes are only useful if they are in the language from the start and the ecosystem uses them. Making your own maybe is useless. Even Java Optionals are a failure despite the push to adopt them in libraries.
well i'm not really looking for a job right now, and I have basically no experience in the subject.
Did my own experiment with this a few years back ... it was a definite step forwards and avoided certain bugs as it highlighted possible NullReferenceExceptions at compile-time, but other devs complained at it not being 'ideomatic C#' (whatever that actually means). Didn't take this forward as I just switched to using F# for everything instead.
Instead of checking for null, you check for none and now you're paying the cost of wrapping every single object in another object - seems like the same thing to me, only worse.
the maybe monad is an abstraction that removes the need for null checks 
We use fredi to read 835/7s. Don't know about that format. But I'm sure if it's an x12 spec there's a definition for it. It'll generate the code to create your tables and source code template. Edidev.net
Except now the compiler helps you, so you will fail at compile-time not run-time
You might want to look at how the maybe monad is implemented as it seems like you are missing a couple very important pieces. Your maybe should have the concept of nothing or none public static Maybe&lt;T&gt; Nothing() =&gt; new Maybe&lt;T&gt;(); most importantly you are missing something like bind which is roughly the following Public Maybe&lt;T2&gt; Bind&lt;T2&gt;(Func&lt;T, Maybe&lt;T2&gt; f) { return value != null ? f(value) : Maybe&lt;T2&gt;.Nothing } 
&gt; Making your own maybe is useless I dont exactly understand why. If you are writing a library from scratch, why should your own implementation be "useless" when it reduces development time.
We regularly use a couple of versions of `Maybe`, and have found it useful. Unless you've adopted conventions or documented its meaning, `null` typically just means "this was not set to a value." Sometimes that's fine, especially with `null` coalescing (love me some `?`). But there are cases where it is useful to identify why a value is missing. When a `Maybe` So what do you do? Overload the function? Pass an ugly `bool` or `enum`? `Maybe` is far more elegant, especially with pattern matching. Yes, there is overhead. Your team needs to understand its use and how it is different from `null`. Yes, there is a small computational cost. But your code will be easier to understand and more correct. Also, you get this: [Railway Oriented Programming] (https://fsharpforfunandprofit.com/posts/recipe-part2/).
Oh that would be wonderful. But honestly how much chance do proposals like these have to actually be adopted?
&gt; not being 'ideomatic C#' I guess thats the main problem here. People like to stick to vanilla whenever they can. I think its mostly just a mental block one has that makes you despise anything not "standard"
And it actually **enforces** the none check. As the article sais: &gt; It's very easy to forget that null check, or to convince yourself that, in this particular scenario, it could never happen. 
And while doing so, please also add Visual FoxPro language support, kthx /s
Totally agree. Its great to see that people actually use them in real world applications. 
Very likely. In fact the plan is for that feature to be implemented by C# 8. I remember watching an interview with Mads Torgersen on this topic and some other features theyre interested in.
When I'm prototyping I often will play with https://ngrok.com/ to provide a tunnel.
No, they're not, and it's not - although I'd claim that they shouldn't be exposed publically if you introduced them yourself for a particular library or API, they can still find a lot of strictly internal uses. In my opinion it'd make sense as an external package until it's readily available in the framework (or a decent substitute is).
Unless you admit null as a valid value (i.e. allow Maybe&lt;null&gt;), you can use Maybe&lt;T&gt; to eliminate (or make explicit) nulls at the exterior boundaries of your system, and assume T is non-null wherever it appears unwrapped. You suffer a small hit at the boundaries, but should be able to unwrap the value almost immediately. public struct ValueOption&lt;T&gt; : IEquatable&lt;ValueOption&lt;T&gt;&gt; { public static readonly ValueOption&lt;T&gt; None = new ValueOption&lt;T&gt;(); private readonly T _value; public bool IsSome { get; } public bool IsNone =&gt; !IsSome; public T Value =&gt; IsSome ? _value : throw new InvalidOperationException("None has no value"); public ValueOption(T value) { IsSome = ReferenceEquals(null, value); _value = value; } public bool Equals(ValueOption&lt;T&gt; other) { if (IsNone &amp;&amp; other.IsNone) { return true; } if (IsNone || other.IsNone) { return false; } return EqualityComparer&lt;T&gt;.Default.Equals(_value, other._value); } public ValueOption&lt;U&gt; Map&lt;U&gt;(Func&lt;T, U&gt; f) =&gt; IsSome ? new ValueOption&lt;U&gt;(f(_value)) : ValueOption&lt;U&gt;.None; public ValueOption&lt;U&gt; Bind&lt;U&gt;(Func&lt;T, ValueOption&lt;U&gt;&gt; f) =&gt; IsSome ? f(_value) : ValueOption&lt;U&gt;.None; // various method overrides, etc omitted } You do still have some problems with, e. g., things like LINQ's FirstOrDefault() method, though, because you haven't *actually* made nulls a different type. (You could toss in a conversion from T -&gt; Maybe&lt;T&gt; trivially, but cast operators from T? -&gt; Maybe&lt;T&gt; will be awkward, since T? is only valid for T : struct, and you can't restrict operators that way.) For some of that, I think you wind up needing to writ your own code to wrap or supplant those methods, and then be very strict about their use. If/when the non-null references feature makes it in, though, the big thing you'd need would be a couple extension methods on T? and you can dump the Maybe&lt;T&gt; type for T?.
I've yet to actually understand "monads". So... what exactly would you use the "Bind" method for? Would that actually lead to more readable C# code in usual cases? I've implemented Maybe&lt;T&gt; a couple times in a couple different cases, never made a Bind and never wanted one, whatever it does. I guess you occasionally "need" things without knowing that you need them, though, so... what's the deal?
Instead of maybe (no pun intended) checking for nulls where you don't need to and failing to check where you actually do need to, this leverages the type system to force you to do your due diligence. You still won't be using it on anywhere near "every single" object.
So this is just an implementation of the null object pattern right? 
Bind lets you convert the inner value to an outer value. You can implement Map in terms of Bind, but not vice versa. If, for instance, you went from object -&gt; Maybe&lt;string&gt; and wanted to parse the string to an int with TryParse (or even a MaybeParse), you could use Bind to convert parseable strings to Some&lt;int&gt;, and unparseable strings to None.
Although for C# you might be better calling it SelectMany and getting some LINQ integration for free.
Because your code is now uses both styles and because there cannot be common monadic transformations. For example if you develop a LINQ method on IEnumerable it will work for every .NET dev in the world but if you built your own IEnumerable you are severely limiting the usefulness.
Since you have the luxury of having written the application you're trying to get information from, you could also modify it to accept requests for information over network connections or support some other form of [IPC](https://en.wikipedia.org/wiki/Inter-process_communication) interface.
This series by the great Bob Tabor got me into programming https://channel9.msdn.com/Series/C-Fundamentals-for-Absolute-Beginners 
I've been writing an API in .NET Core and it runs in a linux container.
Yes but if you leave your maybe to the implementation details and not serve them in the public API then who cares if your library consumers can use your maybes or not. They can surely save time writing your code base without beeing in the way of consumers 
I feel kind of dense, but I still don't get it. At least it doesn't seem like an uncommon reaction to monads being mentioned. :p
Ah. What's the point of those tools then?
The plan is to default to nullable with a compiler switch for nonnull, give people time to make changes, then make the default nonnull with a switch for those who can't change all of the code. 
[This is for haskell, but I still think it is understandable, and it really made it click for me.](http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html)
I think it's more of a protecting the intellectual property of your source code. But I'm not sure. I just know it shouldn't be used to hide passwords
Good info. Thanks!
The value of maybe is significantly reduced if you cannot use it as a form of documentation.
The `Maybe` or `Option` monad is but one of the few *very* helpful FP constructs. If you're at all interested in this stuff, I would highly recommend [LanguageExt.Core](https://github.com/louthy/language-ext) &gt; This library uses and abuses the features of C# 6+ to provide a functional 'Base class library', that, if you squint, can look like extensions to the language itself.
It's not a mental block, it's that it's not clear how this is actually going to function when you see it. In languages with first class support it's just syntax, but in C# it's implementation. Who wrote it? Did they do it correctly? Has anyone changed it since the last time you looked? You're going to have to map back and forth with third party libraries as well. In the end this is a wrapper on a null check, not a native function.
Ah yes that is very true. I guess it comes down to making it clear to your team what is being used and good documenation. 
I just checked again, at the time I was about to use the hamburger menu it wasnt possible to bind the itemcommand, but this seems to be fixed in Version 1.5. There shouldn't be a problem with the general binding. Maybe the binding from the main control doesnt get pushed through the items though, you could try to get the viewmodel from the parent through {Binding Path=MyTitle, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:HamburgerMenu}}}
To me, a simple motivation for bind is that it allows you to compose methods/functions with "wrapped" return types with methods/functions with unwrapped input types. Imagine I have two methods: Maybe&lt;int&gt; Parse (string theString); Maybe&lt;int&gt; Divide (int x, int y); The naive way of combining these two would be to call `Parse`, check it's output for `None`, if it was there, call `Divide`. If you look at the implementation of `Bind` by /u/0987654231 that is roughly what it does, using generics and higher-order functions. This means that we could write a `ParseAndDivide` method: Maybe&lt;int&gt; ParseAndDivide(string theString, int y) { return Parse(theString).Bind(x =&gt; Divide(x, y)); } Whether this is more readable is obviously subjective, but it does remove boilerplate code.
Here's a just code example. I hope it helps because I don't have much time this morning. ;) [Fact] void maybe_selectmany_also_known_as_linq() { //======= //Using LINQ query syntax //======= var allHaveValues = from a in Some(1) from b in Some(2) from c in Some(3) select a + b + c; allHaveValues.ShouldBe(Some(6)); //or impl an implicit conversion via operator allHaveValues.ShouldBe(6); var someNones = from a in Some(1) from b in Option&lt;int&gt;.None from c in Some(3) select a + b + c; someNones.ShouldBe(Option&lt;int&gt;.None); //======= //Directly using SelectMany //======= var allHaveValues2 = Some(1) .SelectMany(a =&gt; Some(2), (a, b) =&gt; new {a, b}) .SelectMany(t =&gt; Some(3), (t, c) =&gt; t.a + t.b + c); allHaveValues2.ShouldBe(Some(6)); allHaveValues2.ShouldBe(6); var someNones2 = Some(1) .SelectMany(a =&gt; Option&lt;int&gt;.None, (a, b) =&gt; new {a, b}) .SelectMany(t =&gt; Some(3), (t, c) =&gt; t.a + t.b + c); someNones2.ShouldBe(Option&lt;int&gt;.None); } 
It should be noted that Option is a monoid which, in simple terms, implements the `+` operator.
So, first, [Here's the first of a series of blog posts that I found helpful a couple years ago.](http://mikehadlow.blogspot.com/2011/01/monads-in-c1-introduction.html) YMMV, of course. Second, I'm not going to promise to really grok this, myself. A monad is the combination of an 'amplified type' and a mapping to and from that type. C# nearly has the maybe monad, already, as System.Nullable&lt;T&gt;, except that it's restricted to structs. As for SelectMany being Bind, you can actually thing of Enumerable&lt;T&gt; as a monad! at which point Enumerable&lt;U&gt; SelectMany&lt;T, U&gt;(Enumerable&lt;T&gt;, Func&lt;T, Enumerable&lt;U&gt;&gt;) is really the same signature you'd have for Bind.
You're still going to have new people coming into the team. I'm not a fan of implementing things this way. It's messy and adds cognitive load and if they ever implement it properly. 
&gt; It's messy and adds cognitive load Thats only true if you're not used to it. Once you get used to it its definetly removes cognitive load since you simply must not bother thinking about null checks anymore. And if someone joins the team, be sure to keep a list of custom stuff you use and train him on them 
This is a complete guess, but I would think that you would just see the 100MB out. I'm not 100% on zip files, but I know for a normal file, a temp file is created and modified, then when you save the original is deleted and the temp file is renamed to the original name. You could check your situation using something like wireshark or Windows Resource Monitor.
yes this has nothing to do with c#
Yeah. Every so often, I feel I gain some new minor piece of understanding about it, but everything has stayed pretty vague since while the concept itself is probably something I use heavily (especially since my style of C# tends to be fairly "functional") the term itself never really "clicks".
I mean, a monad is just a monoid in the category of endofunctors, but I've never quite sat down to figure out WTF that means. In practice, they seem to be a way to wrap up specific transformations around the type and then unwrap the result at the end.
Except it doesn't. It's still a null check and it's not supported by anything outside your code. We stick to idiomatic for a reason. 
I would propose a `none`. `null` should be used when a value is not set, and `none` when there is no value available. `null` throws an exception, `none` does not. 
How does it not? You simply must not think about if a null check is appropiate or not. You will have to implement it anyway
No this is not the Null Object Pattern. The code for the null object pattern would look like this: var account = accountRepository.Find("user-name"); Console.WriteLine(account.FirstName); I personally use the null object pattern. I'm not sure which one I prefer. With the null object pattern, if the account object is the "NullAccount" object you still need an "if" to determine if the "Find" was successful. So I think the "Maybe" suggestion makes it more obvious that something could be missing.
I hate to rain on anyone's parade, but my thoughts are "noh, sorry." I would find this change to render it to be more like javascript and less like C++. At that point I would be wondering "why am I using this?" 
Maybe works in functional languages because reference types can never be null. The code won't let you go there. Here you're not getting that. You're forced to sort of do it for any function that returns this, but you can still slack off and fail to handle it properly, and you can still implement code that requires a null check. In fact you will still write code that way because this isn't supported everywhere. And if some other library you use decides this is cool and implements it you've got two subtly or not so subtly different Maybes. And again, eventually Microsoft puts it into the language and all your code is broken. Good code is clear code and this isn't clear code. There's nothing wrong with maybe. There's nothing wrong with getting more functional programming into c#, but that's not what this is. It's a wrapper on a null check.
I don't think so. The null object pattern creates an instance of the type that is non-null and more-or-less performs a nop when called. The Maybe monad is about making null values a different type, rather than substituting a safer value for null.
Depends on the type of archive and on the library. If you have a solid archive all data will be recompensed and then you have 1GB received and 1.1GB sent. If your archive is not solid that means you can append data without recompession. In this case it all depends on the library you use and if the library is smart enough to append to the file without recompressing all data.
&gt; "why am I using this?" Because you like type-safety?
Yes makes sense. I think I made the mistake because I use both the null object pattern and a variation of it with a richer result encapsulation (which itself uses the null object pattern). I'm not totally sold on the Maybe solution. It feels too much like we're ignoring the source of the problem. Stop nulls propagating from the outset (or inlet if coding against external libraries) and the problem goes away. To be fair, I don't hate it, I'd rather see Maybe everywhere than 30 chained methods where 29 of them have if(p==null){} at the beginning.
I don't think `Maybe` is particularly useful, it's just a bit of ceremony added to nullable types. Instead of throwing `NullReferenceException` you're throwing an `InvalidOperationException`. What the language really needs is a Definitely. Others have already covered the C# 8 non-nullable types, and I'm really looking forward to these.
1. Don't refer to yourselves as young guns. 2. Program outside your comfort zone and learn. 3. Review and test your code. It can be better. 4. Document everything, you won't remember what the hell you were trying to do last year.
&gt; Instead of throwing NullReferenceException you're throwing an InvalidOperationException But it is to mention that its at compile time though. An yes non-nullables will be awesome. 
Exceptions are thrown at runtime.
Oh snap, I misunderstood your comment. I dont exactly get your conclusion on throwing the InvalidOperationException
If you do `.Value` on a `Maybe` that contains null, you'll throw an IOE. The real protection only really comes when you use the `Case` method, but you could write such a method that operated on plain old reference types.
http://www.kalzumeus.com/2011/10/28/dont-call-yourself-a-programmer/ https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670
All those best practices you read about that you tell yourself you will get to one day, STOP IT and just start following those practices. Don't be afraid to dive in. No one (in a sane job) ever got fired for asking for further clarification on topic or detail. If you are going to work on a team be a team player, don't expect your teammates to deal with "your style" or the way YOU like doing things. Instead try to conform to the team norms and lobby your co-workers for changes that you feel are valuable. When you get to the point where your search results turn up nothing on your problem you might be doing something rare or advanced or you might be failing to understand and/or state your problem correctly. Be sure to think and determine which is which. All of this is all so seemingly easy and dizzingly complex all at the same time. You will never be an uber pro "scotty" engineer, I am not sure they really exist, but with time and practice you can be near expert in a few areas and really damn good in a lot of others. After about 5-10 years in to your career you are going to start to think you have a handle on this whole thing and maybe even your lead should just shut up and listen to you. You might be right, you might also be standing on the precipice of struggling with an impostor complex when you are smacked with a scenario that reminds you how little you really know even after nearly a decade. Easiest way to avoid it, stay humble and never stop learning. 
It really depends on how you do your operations. When interacting with a SMB file, it doesn't actually send the file contents unless you explicity read them. So just opening a file doesn't copy it locally. As you read from the files, the SMB client will request blocks of data from server. same with writing. If you open a file for writing, seek to the end, then start writing your 100 MB of data, then you should only send the 100 MB. However, If you read then re-write the whole file, then you will read 1GB of data and write 1.1GB of data. https://msdn.microsoft.com/en-us/library/cc246482.aspx has the details on the protocol and its messages. Under section 4, there are examples for reading and writing a file.
I think Git has rename tracking at this point. At least tortoise seems to to see the file name change but only after the commit and not in all scenarios it seems. 
Maintainability is preferable to complexity. It's sometimes tempting to come up with smart, elegant solutions to problems, but often these solutions are more complex than they need to be. In most cases, it's better to just to implement it in a more readable/maintainable way. 
A mere if statement can be patched by editing one byte through hex editing. brtrue-&gt;brfalse Depending on how secure this application needs to be, you may want to look to other alternatives, or use an obfuscator.
What is source history but a document for communication? Just like a word doc with a spec I see no reason why I should not alter code history in places where it makes sense. Sometimes its good to know every change that happened commit by commit. Sometimes its just a mess to wade through 53 extra commits in that week just because the new guy does not know what he is doing yet and edited the same 8 lines 15 times alone.
No tricks. Don’t use fancy language features or complex abstractions if a simpler approach will work better. You should never have to explain your code to anyone.
https://www.amazon.com/Building-Maintainable-Software-Guidelines-Future-Proof/dp/1491954523/
&gt; Maintainability is preferable to complexity. This tend to be true for performance too. Extra man hours are still far more expensive memory and processor with only a few exceptions. "Throwing hardware at a problem" is sometimes the best way to go. 
There are no tricks or shortcuts to producing quality work output. No Nuget package or VS extension is going to magically make you a better programmer. You have to be diligent, disciplined, and put in the time and effort to produce results. With that said: 1. Time spent designing your solution (before writing code) is worth the time you will save from re-writing huge portions of your code in order to account for a use case or scenario you hadn't thought through. 2. Unit tests are worth it. Really, they are. No developer I've ever met has said that they regret writing unit tests. 3. Unit tests are not sufficient. You at least need integration tests, and you probably need other types of testing and/or benchmarking as well BEFORE you go to production. 4. You should always be thinking about non-functional requirements (responsiveness, performance, exception handling, security, logging/tracing/auditing, resource management, documentation, etc) when you write code. It should never be an afterthought or a box you tick. 5. Structure your solutions and write your code the way you would want to see it if it were written by someone else. This applies to project organization, file/folder structure, naming objects, etc. 6. Do things consistently throughout your projects.
Good observation. As you point out TypeScript is a superset of JavaScript. However, a small number of the examples have explicit type annotations which are invalid in JavaScript.
This x1000 Some of the "smartest" coders write the worst code.
Just looked at the top post you like. I am not sure how much of that you will get in the C# world. * the platform is so much bigger than python. * As a result of above both religion of ways of doing things as well as highly different perspectives exist with regards to use of the language. It may be better, if you want technical tips to ask something like: * What are the tips for developing a WPF application? * What hints help in managing my WCF service infrastructure? etc. While python has a wide base with a large community of modules and can do user interaction if desired it is mainly used as an automation platform. This becomes further confused with the fact that you can code C# with an OO pattern, a procedural pattern, a functional or a modern reactive pattern (as well as any mix of them and any new ones you can come up with) each of which have their own rules on what folks would say are dos and donts. Some things you might hear are: * Avoid dynamic (except when it is useful and mostly safe) * Closures and anonymous delegates are both powerful and very hard to debug; use sparingly. * The type system is powerful and reflection is much quicker than people think for 99% of the scenarios where people want to use it. Don't let one of the richest data sets in your application go unleveraged. * SOLID 
&gt; Review and test your code. This. All day this. As a person that does some code reviews pre-release at work, several times I've asked why they checked in "SomeFile.cs" and "SomeFile.cs.original"? Oh, the .original file is created by their merge tool. Okay, that's fine, but why did you include it in your commit? And why did you commit a change to the .config file for your local testing? And here I am re-reviewing every line of code I commit like the guy doing this after I leave will have my home address and prelit bags of dog poo.
The testing part is pretty big for me. What I like about testing is that it both provides a quick way to make sure code I've already written works, but in writing the test it also causes me to double check everything to make sure I understood what I wrote and can prove it works. Also agree with reviewing code, especially later on. Some of the best advice I've been given when starting out has been, "If you look at code you wrote a year or two ago and don't find anything wrong or that can be improved, you probably haven't learned much."
If it's elegant then it isn't complex, if it's complex then it isn't elegant.
As a corollary to that, maintainability doesn't mean "throw every abstraction and framework you can think of at it". The simplest working solution is often far easier to understand and change than a design that makes vague promises about "loose coupling". 
Leave your ego at home. There is always someone better than you so learn to accept constructive criticism about your code. Always be willing to accept suggestions form others and never stop l earning new tools and platforms. 
Read the **.NET Framework Design Guidelines**. Even if you don't agree with them, it will at least teach you how to think like the people who originally created .NET. 
Learn what's happening at the metal.
Okay, well ppl here are like, "Be a good programmer." How about some tools, you guys? I use [Outline](https://marketplace.visualstudio.com/items?itemName=Skybladev2.Coutline) when possible [Power Tools by MS](https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProductivityPowerPack2017) to use Guidelines for 80 character limit. [Resharper](https://www.jetbrains.com/resharper/) is a great tool, if you are a professional. Learn [VS Shortcuts](https://msdn.microsoft.com/en-us/library/da5kh0wa.aspx), and become a "touch-typer". 
Yes, good explanation. 
Not a technical tip, but don't be afraid to say "I'm not sure...but I'll find out/debug it/research it". Nobody likes a bullshitter, because you WILL be found out. 
This is not strictly coding, but get yourself a webhost and learn to push code through different stages. This is especially helpful if you plan to work for smaller companies..
This is very cool 
Some programmers will talk about comments in code being a "code smell." Don't get hung up on that concept. It's possibly true if you squint at the notion. Here's where you draw the line. If it's code that's being commented out, you should "never" check that into a repository. That's what the repository is *for:* so you don't need to and should not do that. You should always try to decorate classes, methods, etc. with a brief description. It should be concise as possible while highlighting any special requirements. This will help you later. If there's something that is tricky, comment it. This is what people are generally referring to when it comes to "code smell." If it's tricky, it should probably be looked at more closely. But comments actually *help* you spot those things that need rewriting. Comments are a good thing. Use them. It's really never a bad idea to comment. Don't get hung up on the whole "code smell" idea. Try to be concise, but if you need to be verbose, do it. It is better to have a comment and not need it than need it and not have it.
So I've decided to run it as a service, but I've got some questions I though I might ask. I want to set a Timer to run a method every 90 seconds, but the time for the method to complete can take more than 90 seconds. How can I make sure that the Timer resets the interval when the method ends, or is it built in to do that automatically?
Get in on contributing to the open source community. It's not only a great way to contribute to the world, but you can make great friends and business connections as well.
This stack overflow thread should help. It explains the different types of timers you can use and recommends which 2 you should consider using. I personally think System.Timers.Timer is easier to use. https://stackoverflow.com/questions/246697/best-timer-for-using-in-a-windows-service
Set aside a block of time every single day that is for learning something new. As much as you can reasonably afford, not less than 30 minutes. Have a list of new libraries you want to play with, concepts you're fuzzy on, etc. and pick off that list. Be consistent about it. Put it on your outlook calendar or whatever you use and *stick to it.* It is absolutely reasonable for it to be on-the-clock unless you are doing piecemeal contract work. They'd pay you to sharpen your pencils or degrease your tools without complaint, and this is not conceptually different. This is essential. Don't *ask permission* to do it. Just do it. It's part of your job description. If someone asks you to qualify that, point to where it says whatever hard-charger buzzword HR put in the job listing and confidently say, "Right there."
You can pull my ternary and null coalescing operators from my cold dead hands ;)
Dependency Injection &amp; Inversion of Control SOLID in general.
Fucking magic! Just plain Awesome!
Do like in word and PowerPoint? Really cool
I've found that people love the old "I don't know right now let me do some research" saying
First time I've ever clapped for a new feature at a Connect event 
You could use something like Azure Service Bus to communicate. It won't be the most efficient in throughput, but it's pretty efficient in developer time. Each side would only need to have outbound HTTP/HTTPS ports available.
Also learn how to *give* constructive criticism.
LinqPad. The free version is a decent tool, but the paid version pays for itself quickly.
Also, don't try to double down on your bullshit once you ARE found out. Just because I can't say it to your face doesn't mean I don't know what's going on.
I upvoted your reply because I have found far fewer people who can give construction criticism than those who accept it. I have met some real bullies in my day.
There are a lot of great philosophies and ideas that can help you learn to write good code. Do not adhere to any of them with religious zeal except for one, keep it simple. All other ideas and philosophies can be used where practical but will make a large mess if you get carried away and apply them to every situation liberally. SOLID is a good example of this, btw. 
I actually found a simpler solution using desktop app only. This allows my desktop app to have the full notification functionality of a UWP app. Very cool! https://docs.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-enhance
This would be great for both pair programming and code reviews.
The problem with this is that I really have no UI to display if a user opened the app from the systray. Luckily I found this article which allows me to use UWP style notifications from a desktop app: https://docs.microsoft.com/en-us/windows/uwp/porting/desktop-to-uwp-enhance
You got it, that what I meant. Sorry, the bridge is for porting Desktop app to the store not adding the UWP functionality. Glad you found what you needed
So much faster than opening up a Console solution to test things in.
I'd make a class structure of your data and the names it is under in JSON. So you can model the data. If you are uncertain of this, try this tool: http://json2csharp.com/ Then use Newtonsoft Json.net to serialise the data and it will fill up your model with all the JSON content: https://www.newtonsoft.com/json/help/html/SerializeObject.htm Then a foreach loop should do it for the rest of your processing eh?
Thanks for all the advice, I'm just going to end up setting up a Task Scheduler to run a batch file to run scriptcs on the .csx from cmd.
Not all functions need to be compressed to one line.
Bang, star, paren, curly brace, bracket I dislike lambda, but I say it. The only one I've heard that I really dislike is "tack" for " - " by extreme unix fans.
Ooh, that JSON2CSharp tool is pretty swanky. There is a slight problem, though, and that is that the author of this .JSON format will be adding optional properties; if the item is of a specific type, the properties will be present. Otherwise, they will be absent from the item record entirely. Here's a pastebin with the optional properties outlined: https://pastebin.com/tvCc0WHa How would I deal with that? Just trim the class' properties, so that it only has the values properties that I explicitly need to read and write to?
Holy shit.
I'd just like to say though, don't let this good advice become an excuse to avoid learning the more esoteric language features. If someone is mixing all sorts of weird features together to come up with some 'smart' implementation for something; it's probably unnecessary and convoluted. But I have also seen "senior" engineers reject code in reviews simply because they used perfectly [cromulent](http://www.dictionary.com/browse/cromulent), but less-well-known features (one example that sticks in my head is generic type parameter constraints). The trick is to make sure your code is as readable and maintainable as possible. If your use of an edge-case feature genuinely helps towards that, then it's still fine. If you need to, write a comment in-line explaining the code, or even better hold a team code review where you can explain the code and what it does!
You could use a JObject, it was suggested as a method in a previous thread... [here](https://www.reddit.com/r/csharp/comments/7axj6h/parsing_json_array_in_c/dpf85e8/?utm_content=permalink&amp;utm_medium=front&amp;utm_source=reddit&amp;utm_name=csharp)
* Ask to have your code reviewed by the senior engineer. Your ego might take a bruising but you will learn so fast. * Write something difficult in your spare time. If your work just involves web backend that's fine; but at home you can write an audio analysis library, or a rendering engine, or a neural network, etc! * Keep reading. The right blogs are great but also some good books can really help you move fast towards seniority. CLR via C# was great for my personal learning, I would recommend it (although it's a bit outdated now in the age of .NET Core, it's still mostly relevant).
Really good Json serialization lib https://www.newtonsoft.com/json
Newtonsoft Json.NET https://www.newtonsoft.com/json
So sorry for the delay. Got busy with meetings. I will have to look at it tonight and get you something usable. Sorry again. I didn't forget.
There is free alternative called RoslynPad.
Right, I managed to wrap my head around it after half an hour of bemusement, but I've hit a snag. RootObject JSONBlueprint = JsonConvert.DeserializeObject&lt;RootObject&gt;(File.ReadAllText(strBlueprintPath)); JSONBlueprint.items = JsonConvert.DeserializeObject&lt;List&lt;Item&gt;&gt;(File.ReadAllText(strBlueprintPath)); The **RootObject** class has a property that's a list&lt;&gt; of **item** records. But it throws an exception on the second line: &gt;Additional information: Cannot deserialize the current JSON object (e.g. {"name":"value"}) into type 'System.Collections.Generic.List`1[Fallout_4___TSB_Item_Havok_Disabler_MainCode.Item]' because the type requires a JSON array (e.g. [1,2,3]) to deserialize correctly. &gt;To fix this error either change the JSON to a JSON array (e.g. [1,2,3]) or change the deserialized type so that it is a normal .NET type (e.g. not a primitive type like integer, not a collection type like an array or List&lt;T&gt;) that can be deserialized from a JSON object. JsonObjectAttribute can also be added to the type to force it to deserialize from a JSON object. It should just work, no? The property is a List&lt;Item&gt;, and it's deserializing the Items{} array into a List&lt;Item&gt;. Code: https://pastebin.com/JDVRveh6
SELECT farknr 'Factuur' FROM frhkrg LEFT JOIN ( SELECT btx.InvoiceNumber, ROUND(SUM(ROUND(btx.AmountDC,2)), 2) AS AmountDC FROM BankTransactions btx WHERE btx.Type = 'W' AND btx.Status &lt;&gt; 'V' AND (btx.EntryNumber IS NOT NULL OR (btx.EntryNumber IS NULL AND btx.StatementType='F')) GROUP BY btx.MatchID,btx.InvoiceNumber HAVING btx.MatchID IS NOT NULL ) AS bts ON bts.InvoiceNumber = frhkrg.faknr var bts = BankTransactions .Where(btx =&gt; btx.type == 'W' &amp;&amp; btx.Status != 'V' &amp;&amp; (!(btx.EntryNumber is null) || btx.StatementType == 'F')) .Where(btx =&gt; !(btx.MatchID is null)) //Equivalent of the 'HAVING' statement, since you're grouping on MatchID .GroupBy( btx =&gt; (matchId: btx.MatchID, invoiceNumber: btx.InvoiceNumber), (key, btxGroup) =&gt; (invoiceNumber: key.invoiceNumber, amountDC: Math.Round( btxGroup.Select(btx =&gt; Math.Round(btx.AmountDC, 2)).Sum() ,2) ); var result = frhkrg.GroupJoin(BankTransactions, f =&gt; f.faknr, bts =&gt; bts.InvoiceNumber, (f, btransactions) =&gt; (f: f, transactions: btransactions)) .SelectMany(fAssoc =&gt; fAssoc.transactions.Any() ? fassoc.transactions.Select(t =&gt; (f: f, transaction: t)) : new List&lt;(long, BankTransaction)&gt;() { (f:f, transaction: null) }) Something like this, I think. 
I'm currently using HockeyApp for WPF and Xamarin.Android, and I'm quite happy with it. You get 10 apps for free with no limits on the number of exceptions or data retention (that I know of), but if you want to log custom events then there's a limit of 350 **unique** custom events per app per week. I haven't used these other ones but I recommend HockeyApp.
You don't need to set JSONBlueprint.items; it should be created as part of deserialization of the RootObject.
Well I'll be, it is. I didn't think it would be that robust. Thanks man.
While I appreciate what is trying to be achieved here, something about this feels very 'murky' and unclear. Thats not what I'm used to from C# I personally find that C# is very clear and this feels like its going to introduce some un-clarity and won't be fully reliable. For example if I have a non-nullable string public string myString {get; set;} public MyClass() { myString = "this is a non-nullable string"; } Lets say thats a property of a MyClass. Somewhere else I do this var myClass = new MyClass(); myClass.myString = null!; everywhere else the compiler is telling me that the mystring value is non nullable and that I don't to check for nulls, however other parts of my code can still assign null to it, making the whole thing pointlessa
Looks like this is the problem: `JSONBlueprint.items = JsonConvert.DeserializeObject&lt;List&lt;Item&gt;&gt;(File.ReadAllText(strBlueprintPath));` You're deserializing the object twice but the second time doesn't work because the .json file isn't a List&lt;Item&gt; but a RootObject :).
Sounds like a case of bad encapsulation. Internal state shouldn't be set externally.
Just check for nulls every time and if it's not expected, then throw a clear exception explaining what was expected and what was actually received. Much clearer.
The solution for that is non-nullable reference types. We don't need to add some garbage wrapper classes around everything for that.
If a programmer is too lazy or too dumb to write a simple null check, he will be too lazy or too dumb to think of using Maybe&lt;T&gt; here. In my opinion, it's far better to fire that programmer and get a programmer who can write a proper null check in the first place.
As the author of Optional (https://github.com/nlkl/Optional), one of the more popular Option types for C#, it is probably rather obvious that I quite like the idea of using Option/Maybe types in C#. In my experience the decrease in null ref. exceptions is quite noticeable, even if interfacing with third party code does limit the advantages slightly. Optional takes a slightly different approach from the article, and makes it a bit more difficult to actually retrieve the value without also handling the fact that it might not be there. A consequence of this is that the different combinators/transformation functions such as Map, FlatMap, etc., are used much more widely, giving the code a more “functional” feel (this, of course, is not unique to Optional). Some people like this, whereas others find it a bit too different from conventional imperative C# - in my opinion, it is conceptually not too different from using LINQ vs. manual loops, and I know which of these I prefer for most cases. Even so, I really hope that we will see (non-)nullable reference types in a not too distant version of C# - it will likely be a death sentence to Optional, but definitely one that is worth it.
Not sure how Discord bots work but maybe I can help you a bit on the code. What is the scenario you want? User types `/random` and gets `a` to `d` back?
I'm not quite sure what you're saying if I'm honest, but let me try rephrase with a scenario. I am going to create a new library with one method that prints the length of a string to the Console. public void PrintLength(string stringToPrint) { //here my string is non nullable to i just use it Console.WriteLine(stringToPrint.Legth); } Someone downloads my new mini library and uses this method. They for some reason at some point in their code do this. var myString = null!; and then does this PrintLength(myString); a null ref then gets thrown in my library - which in my opinion reflects badly on my library, so I need to do null checks anyway. 
Clear*er*, definitely not. *As* clear, possibly, as long as there's no source of confusion as to whether null is a legit value or denotes the absence of one, *and* as long as you're 100% certain you have considered everything that can be null (ideally while also not checking stuff that can't). This is starting to become a lot to keep in mind, though, and it's fairly obvious that, given the number of null reference exceptions popping up in all kinds of places, it's easy to fuck up. That's not even going into how it might not be very pretty to have half your code be null checks. It's not obvious when it happens at compile time, it's not necessarily obvious *why* it happens at runtime, and this is all fairly easily countered by Maybe or Option or whatever you want to call it.
I’ll let you keep them if you promise not to turn every simple loop into a single mind bending multi nested LINQ statement.
"Don't be clever" I've seen this attributed to Alan Cooper but its hard to know who said it first.
Check the contents of your object after the first line. I don't think the second line is needed, if your RootObject is correctly modelled then it should have it's items variable already populated during the initial deserialization.
Sorry for being unclear. I meant that it's the API user's wrongdoing if he/she sets a `null!` (with exclamation mark). If he used it without forcing it down than a warning would popup. So I think you situation isn't an issue.
This is awesome
If you're using VS: 1. Copy JSON 2. Edit -&gt; Paste Special -&gt; Paste JSON as classes 3. Install Json.NET from NuGet 4. `var obj = JsonConvert.DeserializeObject&lt;RootObject&gt;(File.ReadAllText("data.json"))` If not: http://json2csharp.com/ and start at step 3.
Indeed. Document, comment the 'why' the code is the way it is. The 'how' is the code itself, but it doesn't tell why it is the way it is. Comments are useful for describing in short the 'why' in the code itself for the person who *reads* the code so they can understand what is going on and why it is doing it that way. Document the why, the design decisions, elsewhere: what choices were considered and why was the one that was chosen the right choice and not the others. This is the most important part of code documentation: often people document just what's already there: the code and how it looks. that's useless, it's as useful as // increase i i++; It's incredibly valuable to know why choice X was the right one and not choice Y: if later on you'd look at the code and think "why on earth did this moron not do it like Y", you can look it up in the docs, and know: "Y is the dumb choice because.... ". 
Have you looked at a SPA framework like ReactJS, Angular or VueJS?
This nullable feature will not automatically make your library code check for null arguments at runtime. It will just warn the user that they are doing something wrong if they try to pass in a value that might be null. You may still want to check for nulls in your API and throw ArgumentNullException, even though your parameters are defined as not allowing nulls. Or you may find it no longer useful to make explicit checks, as the likelihood of user error goes down. That's going to be a bit of a personal choice.
Don’t forget string interpolation. I’m a c# dinosaur and usually hate all things new and shiny, but man are null coalescing operators and string interpolation nice. 
Not having a null annotation '?' on a reference type will not be a guarantee that the variable/field will never be null. It is just a tool to help find use errors.
Your goal as a software dev / architect should be to minimize complexity. Not computational complexity, just complexity, period. Keep true to that goal and you’ll be great at what you do.
I excited to see the upcoming Live Share gig economy take root.
This should be up near the top. Don't depend on fancy syntactic sugar to do your job if you don't know what it's doing under the covers. "Why is my EF query so slow? I'm just doing a .ToList() on a query that returns 100k rows!" is an extreme example. 
An unreliable tool. IMO at least. 
Never! 
Not too up on C# these days, but in functional languages the idiomatic way to write divide would be curried, which would make the code much more readable, i.e. with the type signature: Divide :: Int -&gt; Int &gt; Maybe&lt;Int&gt; Where the first integer passed is the denominator, and the second is the numerator (data last). So that ParseAndDivide could be written point-free as: Maybe&lt;int&gt; ParseAndDivide(string theString, int y) { return Parse(theString).Bind(Divide(y)); } 
&gt; What's the point of those tools then? There isn't one. At best it will turn away idle curiosity, at worst it will slow down someone looking to crack your application by a few days.
Honestly they should implement this as a discriminated union of None and T. And they should ad actually make real discriminated unions/sum types of classes. Maybe is just a trivial case of a discriminated union. Check out my library, https://www.nuget.org/packages/DiscU/. We provide very fast, compile time enforced, discriminated unions. You can make your own Maybe&lt;T&gt; out of it by subclassing and making your own sealed singleton sentinel class None to represent absence of a value. This forces people to handle the situation of having no value, instead of just throwing a null ref down the line.
Write throw-away programs to test your assumption/knowledge/understanding of new features or experimental ideas. Don't understand the async/await constructs inside out? No sweat, write a ton of test programs to test corner cases where your understanding is fuzzy (like exception handling in async methods, async void, child task exceptions, exceptions and continuations, await anything, etc). There's probably no better way to understand and remember (aside from years of actual experience). And then document your learning in OneNote or similar to further cement your understanding and have instant recall at your fingertips. Paste your code and example runs there, too.
So do i need to paste my json code in data.json?
 string json = { "Version": "2012-10-17", "Statement": { "Effect": "Allow", "Action": "sts:AssumeRole", "Resource": "arn:aws:iam::ACCOUNT-ID-WITHOUT-HYPHENS:role/Test*" } }; what the hell is this? its liek you are trying to do an array initialization on a `string` datatype if you want to string to span multiple lines, put an `@` in front of the start of the string, then you will have to escape every `"` untill the ending curly bracket of that json object
You have many options, it was just as an example. You can either put all the json in a variable: `string json = "{the json}";` Create a file in the debug/release folder of your product and read it like I showed with: `File.ReadAllText("relative or full path to file.json");` Last option is downloading it directly from a server if your json is hosted somewhere with [WebClient](https://msdn.microsoft.com/en-us/library/fhd1f0sw(v=vs.110\).aspx).
Huh....TIL. 
Use ReSharper 
Can you tell me some things about resharper that are crucial to your work now? I've heard a lot of niceities were added, through the years, to visual studio. 
waning, it can be a cluster; public static void SetMonitorPosition(Screen screen, uint id, int left) { var device = new DISPLAY_DEVICE(); var deviceMode = new DEVMODE(); device.cb = Marshal.SizeOf(device); _log.Info("Setting ID : " + id + " "); NativeMethods.EnumDisplayDevices(screen.DeviceName, id, ref device, 0); NativeMethods.EnumDisplaySettings(screen.DeviceName, -1, ref deviceMode); var offsetx = deviceMode.dmPosition.x; var offsety = deviceMode.dmPosition.y; deviceMode.dmPelsWidth = 1920; deviceMode.dmPelsHeight = 1080; deviceMode.dmPosition.x = left; deviceMode.dmPosition.y = 0; var test = NativeMethods.ChangeDisplaySettingsEx( screen.DeviceName, ref deviceMode, (IntPtr)null, (ChangeDisplaySettingsFlags.CDS_UPDATEREGISTRY | ChangeDisplaySettingsFlags.CDS_NORESET), IntPtr.Zero); _log.Info(test.ToString()); device = new DISPLAY_DEVICE(); device.cb = Marshal.SizeOf(device); // Update remaining devices for (uint otherid = 0; NativeMethods.EnumDisplayDevices(null, otherid, ref device, 0); otherid++) { if (device.StateFlags.HasFlag(DisplayDeviceStateFlags.AttachedToDesktop) &amp;&amp; otherid != id) { device.cb = Marshal.SizeOf(device); var otherDeviceMode = new DEVMODE(); NativeMethods.EnumDisplaySettings(device.DeviceName, -1, ref otherDeviceMode); otherDeviceMode.dmPosition.x += offsetx; otherDeviceMode.dmPosition.y += offsety; NativeMethods.ChangeDisplaySettingsEx( device.DeviceName, ref otherDeviceMode, (IntPtr)null, (ChangeDisplaySettingsFlags.CDS_UPDATEREGISTRY | ChangeDisplaySettingsFlags.CDS_NORESET), IntPtr.Zero); } device.cb = Marshal.SizeOf(device); } // Apply settings }
I think with the feature turned on, the compiler won't let you make the string null unless you add ? to it
Link btw https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/
You can if you append ! To the end
I use https://dotnetfiddle.net/ for testing quick snippets or sharing an example to co workers
ReSharper was needed years ago, but with VS 2017 ReSharper is a slow extension and hardly gives any good benefits
sounds like a challenge to me
Yeah, I will never stop writing FizzBuzz in one line. Employers should be grateful I even graced their whiteboard with my elegant code. /s
Better than a non-existent tool, though.
No problem. That sounds like a good idea too.
- Try to understand the purpose of a best practice. If you can find an article that explains the counter example(usually a historical problem) then you'll understand why the practice is a best practice. For example, using exceptions instead of returning boolean failure codes came as a result of the problems faced when people forgot to check return values of boolean failure codes. At first throwing exceptions instead of returning error codes seems terrible, because unhandled exceptions cause your desktop software to crash and abort web requests. You appreciate the best practice once you see how much easier it is to find the source of an error with exception stack traces, as opposed to the alternative where someone forgot to handle an error code and thus continued running despite the fact there is bad state or some DB update failed, then the bug you observe is somewhere totally different further down the process. Too often I see people misapply a best practice because they don't understand the purpose of it. - Comment your code. You should strive for self documenting code, but until you've spent a few years inheriting other people's code, you'll never appreciate the fact that code does not always convey purpose. I can read code and tell what it does, but not always its intent. Someone else when having to update that code will need to discern what the code accomplishes so that they can preserve its current functionality. For example, you will on occasion write bad code, and uncommented bad code is difficult to fix. Why does this block of code validate the mailing address, but these couple lines of code use the zip code from the residential address instead? I have to wonder if there is a business rule that required this, or was this a copy/paste/bug that no one has ever noticed? Succinct code doesn't also imply intent. The act of doing something doesn't convey its intent. If I brush my cat, you might see this but the intent may not be clear: `cat.Brush(); cat.PutInCarrier();` If I get a new business requirement that says we no longer need to put the cat in a carrier because the vet is making house calls then I'll find this code, remove the PutInCarrier, but without a comment I would leave .Brush() because I am not sure why we are doing that. Is it critical to preserve other business rules long forgotten? Was it needed as part of setup for PutInCarrier? Those questions are answered with a comment. `cat.Brush(); // we need to brush the cat to relax it before calling .PutInCatCarrier() or a CatNotRelaxed exception will be thrown cat.PutInCarrier();` 
Syncfusion has a scheduler which might be useful. It is not free but they have a community edition. https://www.syncfusion.com/products/windows-forms/schedule 
When these types combo of a usage pattern with a "helper" worked well, it was because the person who designed them was also a lead programmer who 1) Really put alot of thought into the corner cases and made sure they were thinking from a usability standpoint, which is the standpoint from which all good APIs are designed (I would cite .NET Framework Design Guidelines), and 2) Actively coach via checkin reviews to ensure people are sticking with the pattern and understand its appropriate use. Not just "do/use this" but "hey this avoids this problem if you will please do/use this". Where I'm at now they have enterprise libraries, and there's no communication between teams that have to use them and the teams that create them. Of all the different projects I've seen, they leverage the library in different ways, some clearly wrong and not as intended, others as intended, but even then there's a host of problems that you just have to live with. &gt; it's not clear how this is actually going to function when you see it Yep. When done well, I quickly acclimated to the patterns and was confident in the implementation/behavior. When not done well, I constantly have to revisit and review the implementation so my code can predict behavior of the implementation.
Would not recommend Syncfusion due to their licensing. You cannot keep using an existing version if you don't need upgrades. You basically need to keep buying the yearly support even if it's an existing legacy app
Man, I disagree with the, "It's really never a bad idea to comment." Having never read Uncle Bob's books I still agree with his points on that. Yesterday I was debugging code and there was a function which had a large and convoluted area to it. The variables names were short and not super contextual so it was hard to grokk at a glance. However, there were copious amounts of comments in the function which described exactly what it did. So, I read them, and they seemed to make sense with what I saw. Now this was about 1 of 3-4 functions which could have been causing my problem at this point, so what do I do? I look in the other 3 functions first before coming back to the "fully" commented one. Ya, after carefully reading through the code and then checking source control, I found out that the comments had been left there by a previous developer who changed only the code itself. The function did "slightly" different things that I was lead to believe. That took me an extra 1-2 hours to debug. I was able to refactor the function into 3 aptly named functions with contextual (hopefully) variable names. There are no more comments in that function except for the xml-docs. Comments make you maintain 2 things instead of 1. They are normally evil in my mind. There are always cases where they are needed, however. 
Although you are right in many respects, I would still use it for the heuristic build agent alone. 80% reduced build times when only changing a couple lines? Thank you.
That's a useful summary, but the book includes a lot more information. I especially enjoy the interviews where people debate the merits of particular recommendations. https://www.amazon.com/Framework-Design-Guidelines-Conventions-Libraries/dp/0321545613 
Don't worry, he is not right.
Would you happen to know if they are adding anymore of these [features](https://support.hockeyapp.net/kb/client-integration-windows-and-windows-phone/hockeyapp-for-applications-on-windows#introduction) to WPF
We are currently making it so it has sub menu items so our code is in between changes. I tried to back and pull out the original stuff before we changed a bunch of things. This is the best I can do at this time until our current version is done. https://ufile.io/n9o0z Here is a simple project I made.You'll have to install the missing nuget packages. The only issue is the actual burger icon is missing. I don't know where it went since this was pulled from source control. However, I think you'll see how it's working and figure it out. Hopefully it helps a bit. I think we'll probably finish the sub menu part tomorrow and I can share that with ya if you want. Our Main .xaml file that has the hamburger menu &lt;mah:HamburgerMenu Grid.Column="0" x:Name="hmMain" PaneBackground="#FF5D5D5D" Foreground="White" DisplayMode="CompactOverlay" IsPaneOpen="True" ItemTemplate="{StaticResource HamburgerMenuItemTemplate}" ContentTemplate="{StaticResource HamburgerMenuItemContentTemplate}"&gt; &lt;mah:HamburgerMenu.ItemsSource&gt; &lt;mah:HamburgerMenuItemCollection&gt; &lt;mah:HamburgerMenuIconItem Icon="{icons:PackIconMaterial Kind=Home}" Label="Home" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type mah:HamburgerMenu}}, Path=DataContext.HomeCmd}" /&gt; &lt;mah:HamburgerMenuIconItem Icon="{icons:PackIconMaterial Kind=FileFind}" Label="Bingo" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type mah:HamburgerMenu}}, Path=DataContext.BingoCmd}" /&gt; &lt;mah:HamburgerMenuIconItem Icon="{icons:PackIconMaterial Kind=Facebook}" Label="Test" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type mah:HamburgerMenu}}, Path=DataContext.TestCmd}" /&gt; &lt;/mah:HamburgerMenuItemCollection&gt; &lt;/mah:HamburgerMenu.ItemsSource&gt; &lt;/mah:HamburgerMenu&gt; Our App.xaml file with the templates &lt;DataTemplate x:Key="HamburgerMenuItemTemplate" DataType="{x:Type mah:HamburgerMenuIconItem}"&gt; &lt;Grid x:Name="RootGrid" Height="48" Background="Transparent"&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition Width="48" /&gt; &lt;ColumnDefinition /&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;ContentControl Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center" Content="{Binding Icon}" Focusable="False" Foreground="White" /&gt; &lt;TextBlock Grid.Column="1" VerticalAlignment="Center" FontSize="16" Foreground="White" Text="{Binding Label}" /&gt; &lt;/Grid&gt; &lt;/DataTemplate&gt; &lt;DataTemplate x:Key="HamburgerMenuItemContentTemplate" DataType="{x:Type mah:HamburgerMenuItem}"&gt; &lt;Grid x:Name="TheContentGrid"&gt; &lt;ContentControl Grid.Row="1" x:Name="TheContent" Content="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type mah:HamburgerMenu}}, Path=DataContext.SubView}" Focusable="False" Foreground="{DynamicResource BlackBrush}" /&gt; &lt;/Grid&gt; &lt;/DataTemplate&gt; 
Implementing patterns this way just doesn't scale. It kind of works if only your team does it, but the second you start dealing with two implementations of it things start getting really really ugly. You will also not get any kind of CLR optimisation beyond what comes out of the box. I'm totally supportive of maybe as a C# getting maybe as a language feature. I'm not supportive of rolling your own. 
Learn LINQ. Learn it well. Whenever you're trying to sort, reduce, select, or separate data, it's *almost always* doable with a few dozen tedious to write, tedious to read, tedious to understand lines of regular code, or *one* ugly line of LINQ. 
ReSharper is crucial for beginners. I don’t know a better way to learn how to avoid mistakes due to lack of experience.
Is Team a requirement for this?
And learn when to use linq and what the consequences are. Linq is extremely powerful, but each added action such as where(). select (), groupby() results in a memory allocation and should be used with caution (or at least awareness) in you applications hot path.
Using `!` is like using the `(type)value` style cast. It is saying to the compiler, "Shut up, I know what I'm doing.". If you abuse it... well yea that's going to cause problems.
When you say "unreliable", what are you comparing it to? 
I think there should be an option to have `public string myString {get; set;}` emit a null parameter check in the setter. 
I wish we didn't. On Java (until Java9) I was faced with 'jar hell' where dependencies needed clashing versions of libraries. On C# I'm faced with sub-projects relying on unsafe ancient versions of libraries, or even being self referential.... We are changing to a git submodule based system, much like androids. Having several repo's for what used to be each nuget package, and a container project for each large project with sub-modules. My previous experience with sub-modules hasn't been great... But we are developing tooling to automate the pain points. But anything seems better then debugging with nuget packages and seeing 'external code' in call stacks while trying to debug, constantly relinking projects etc...
In comparison to the type safety you get everywhere else including with nullable value types and normal value types. They are reliable. If I have an int I know no one can ever put null in it ever 
My number one tip is this: Dont aim to become a senior _csharp_ programmer, aim to become a senior _programmer_. Learn other languages and environments, the more different the better. You can only become _so_ good by staying safe in the C# duckpond, it is only by comparing what you are doing in C# with patterns, practices etc in other areas that you can truly determine if what you are doing is the best way of doing it. So go out there and _learn things that are totally not C#_. Learn C, Haskell, LISP, Rust, Prolog, Elm and so on. The more strange and unfamiliar you think it is, the more you should learn it. Because as long as you stay in the safe "SOLID OOP C#" bubble you are missing out on learning a lot of interesting ideas that could help you become a truly great programmer. This is of course also true when it comes to things like databases, libraries, frameworks etc. Don't get stuck just working with SQL Server, try Postgres, MongoDB, Redis, Raven, Datomic, Neo4J etc. Learn what makes them good or bad. Don't just use asp.net mvc, try nancy, servicestack, suave, websharper, etc. Of course, there are only so many hours in a day so you must prioritize what to learn. But trust me on this, the C# community is a really small part of the overall programming community and it has a tendency to "put the wagon before the horse" in certain areas. It's hard to see this as long as you don't actually start engaging with other programming communities.
Everywhere else? Are you a time traveler? I ask because in the time when I live, the number of languages that offer a strict delineation between nullable and non-nullable, stack allocated variables are a tiny minority.
Sorry that wasn't clear. I meant in comparison to the rest of the c# language features that are very clear and strict. This one feels wooly and unrelaible
Oh, you mean like Booleans? https://blogs.msmvps.com/bill/2004/06/22/a-hacked-boolean/ Yea, it's not as "clear and strict" as you think.
And a hell of a lot better than the "option" type in Java and F#.
Overlapping struct layouts aren't really a safe language feature (despite not needing `unsafe` -- there are a lot of nasty things you can do with them.
That's hardly being promoted as a 'language feature's though is it. The point I'm trying to make is that if a non nullable reference type can still be null what's the point?
As long as `StructLayout` exists, I can always shove a null into a non-nullable reference variable. And we can't get rid of `StructLayout` because we'd lose the ability to call C libraries. So no, it will never be perfect. But it is at least better than what we have now. (Unlike F#'s and Java's stupid `Option&lt;T&gt;` type.)
Yep. And you can add `!` to the same list as unsafe, unchecked, and overlapping struct.
They're *thinking* of doing that. I don't really see the value over just making them use `??` or `?.` to handle the may-be-null warning. Although a part of me is amused at the idea that `No!.Really?.Yes!.Really!` could be a valid statement.
Thanks, I've made it work :) Sorry to bother you again, but now I have to do an inner join, 3 left joins and a full outer join all in 1 query ... I'll need to do this: FROM orsrg ors WITH (NOLOCK) INNER JOIN orkrg ork WITH (NOLOCK) ON ork.ordernr = ors.ordernr LEFT JOIN cicmpy c1 WITH (NOLOCK) ON ork.debnr = c1.debnr LEFT JOIN cicmpy c2 WITH (NOLOCK) ON ork.fakdebnr = c2.debnr LEFT JOIN cicmpy c3 WITH (NOLOCK) ON ork.verzdebnr = c3.debnr FULL JOIN humres h with (nolock) on h.res_id = ork.represent_id and in my code so far I have this : // Union = removes duplicates, Concat = keep duplicates var fullOuterJoin = _context.Humres.Select(h =&gt; h.ResId).Union(_context.Orkrg.Select(o =&gt; o.RepresentId)); var q = from id in fullOuterJoin join h in _context.Humres on id equals h.ResId into idh from h in idh.DefaultIfEmpty() join o in _context.Orkrg on id equals o.RepresentId into ho from o in ho.DefaultIfEmpty() where h == null ^ o == null select new { h, o }; // This "using" is used to make the tables in the SQL query run as "WITH (NOLOCK)" ! (IsolationLevel.ReadUncommitted) using (var txn = new TransactionScope( TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = IsolationLevel.ReadUncommitted } )) { // Your LINQ to SQL query goes here var query = (from ors in _context.Orsrg join ork in _context.Orkrg on ors.Ordernr equals ork.Ordernr join c1 in _context.Cicmpy on ork.Debnr equals c1.Debnr into orkc1 from c1 in orkc1.DefaultIfEmpty() join c2 in _context.Cicmpy on ork.Fakdebnr equals c2.Debnr into orkc2 from c2 in orkc2.DefaultIfEmpty() join c3 in _context.Cicmpy on ork.Verzdebnr equals c3.Debnr into orkc3 from c3 in orkc3.DefaultIfEmpty() select new { }); } but I have NO idea what to do next... So far I've done relatively complicated (for me anyway) SQL queries and made them work by googling it, trying out different things etc... but with this one my mind is simply blank, I can't seem to figure out how to get that full join properly into my query with other joins :s .
Thanks, I think ListItem works well too.
This is a big one IMO Although it's hard to know the difference between being efficient/clever and being clever for the sake of it. For example don't don't make some complicated one-liner just for the sake of compacting your code to one line. A readable piece of code is more important. If you already have a class or method that *almost* matches what you need think about does it really make sense to shoehorn extra logic into it to make it work for your solution too. Yeah duplicate code is bad, but what's worse is a method that handles too many cases that it shouldn't. Every time you change that method you then have more parts of the system that need to be tested. The worst cases of being "clever" I see are things like holding your data in a string and parsing when a class would've been sufficient, even if it's just an int, parse that shit as soon as possible. If you don't understand how to do something, look up how. Don't force a solution using the limited toolset you know.
Its like Google docs visual display when multiple people are editing. I like it, it feels like it should have existed already. Another plus in the VS IDE column
We've used MyGet for private packages in the past, although we've now open sourced a lot of our shared code and so we just push them to nuget.org. I think one of the main challenges is working out how to split up your shared code base. My first thoughts were to split everything up into very granular packages, much like they do with the .net core framework, but it is a big pain to manage all those packages and inter-dependencies. When we open sourced our libraries I decided to group everything up into larger packages e.g. *Core*, *Domain* and *Web* that targeted several distinct scenarios. This has worked out much better and we have much less friction in developing and deploying shared code. The other challenge is the dev-package-consume loop and the time it takes to fix bugs and make updates. Inevitably a bugs get through and it can take time to get a packaged fixed and published. MyGet is pretty good at updating it's indexes quickly, but nuget.org can take a while to index your new packages which is especially a pain if you have lots of inter-dependent packages. One way we solve this is to use DI everywhere and always develop shared code against interfaces. That way we can always swap out an shared implementation, either to fix a bug temporarily or modify the behaviour and get instant feedback before committing the change to the shared library.
You also get this error if the database file is in use, i.e. if you have it open in visual studio's server explorer tab. If that's the case, close the connection and try again. 
I implemented my own in WPF, using a SelectiveScrollingGrid. Unfortunately, it's likely that you will run into performance issues with measurement/layout unless you have a small amount of appointments, so you should probably implement appointment rendering the manual way (i.e. avoid having visual trees for appointments).
Or if its attached to .\SQLEXPRESS right?
Very useful Cheat-sheet, any chance you can make this available as a gist? in case your server goes down or the link changes etc...
Those aren't really "fancy" as such, though. People who have no idea what a ternary or null coalescing operator (or lambdas, null propagating operator etc) is have absolutely no business commenting on code. They have some reading to do.
We used MyGet for a long time, and are currently using a self-hosted ProGet server due to the space limitation on MyGet. It's working pretty well. Another thing that's really helped is to learn not to over-packagize. Not every tiny little utility class needs to be a common NuGet package, or part of one. Especially during development, as it makes updating and debugging it in combination with whatever it's used in harder and more time consuming. If it turns out to be something that ends up being used in many other solutions, then it can be moved to a NuGet package later when it's stabilized for whatever its original purpose was.
&gt; Another thing that's really helped is to learn not to over-packagize. I would definitely second this. Especially in early development it's a pain in the ass constantly updating a slew of packages. More worthwhile IMO when things have reached some level of stability and there's a clear need and gain to be had.
I don't think so The demo used slack to share the link.
If I change it to true, then I get a "System.InvalidOperationException" when I'm starting the process.
I still get the same issue.
Cool, thanks
Thanks that worked, I never used using in this way before.
Although a lot of Resharper's functionality is probably available through free extensions, Resharper does bundle all of that functionality together. This saves one the effort of tracking down, installing, and updating all eleventy-billion extensions. It offers a bunch of auto-refactoring actions in the context menus, some extensions to code templates, a slightly friendlier test runner and test coverage UI, and some very powerful static analysis features for detecting potential problems with code (including stylistic ones). And those would be just the features I both use and know about--u/calphoenix's note about the heuristic build agent is something I either didn't know about or had forgotten was there. Unfortunately, it's also heavy on memory and CPU, so it can be slow Visual Studio down a bit, especially if you're not working on a machine with plenty of RAM and maybe an SSD. I don't find this a huge deal, most of the time, but YMMV.
This is [pair programming](https://en.wikipedia.org/wiki/Pair_programming) taken to the web, integrated in the IDE? Not sure if I summed it up correctly so please correct me if I'm wrong.
 I agree that variable names are important, very important in fact. However in some cases i think it's fine to use name based on class. For instance if it's obvious what you are doing, like using a StringBuilder when building a big string. 
I am maintaining a ReactJS frontend with a ASP.NET core backend. This feature is the most missed when alt-tabbing between typescript &amp; C#. Really excited.
I will make sure to add that, came from a python background
Thank you so much
I like the term "hash rocket" but that's a Ruby thing.
I'm struggling to think of what /u/upalazyriver would mean in c#. Maybe annotating a method as implementing an interface explicitly so that you can have another public method with the same name? Generic code that relies on the reader knowing the difference between covariance and contravariance? Recursive code generation? (i.e. writing code that writes code that writes code...down to -hopefully- arbitrary levels).
If you are looking to have a clean cut with all this, make sure your old _MigrationsHistory table isn't still sitting in your database. That is likely causing some conflicts. 
NEVER enable automatic migrations, this is a symptom of the issue. I followed these bad suggestions once and it turned out to be something else. You can wipe the database clean by issuing the command "Update-Database -TargetMigration $InitialDatabase". One thing that always gives me your error is forgetting to compile the project before creating a new migration. As a way to troubleshoot your issue of it saying you have pending migrations, just do "Add-Migration tempMigration". This will show you what it thinks is pending. From here it may help you trouble shoot your issue. Something else to look out for is if your migration file is empty, this is also a symptom of an issue. Again compiling your project and then doing the migration will produce a real migration file.
How do you use any factory type? Your method would need the factory as a parameter, or your class would need to take it as a parameter (or resolve it from the container in the constructor, if you're doing it wrong) and assign it as a field for later use.
I'm working on a code base with a titload of code generation now. That shit is Satan incarnate, but that's not really what I think of as "clever". And for the record, upalazyriver has a point in that it's possible to try too hard - I just think the examples given by "wllms" are rather poor. For the record, I wouldn't consider variance among the good examples either. I usually just think of this unwritten rule as applying more to intricate constructs that obfuscate your intentions rather than spelling them out. In my opinion, language features rarely feature into it.
I am moving into this direction. The main problem I have, is how to I test the individual components with out having to reget the updates of the packages as i make changes. A solution I came up with is to add a unit test project to the mini solutions as well as "ScrachPad" project to it. This allows me to have code coverage and an executable to test changes in a the real world. The nuget packages will not include the unit testing or the scrachpad project, but they are part of the solution in source control. Make sure to enable XML documentation output for your packages: https://stackoverflow.com/questions/5205738/how-do-you-include-xml-docs-for-a-class-library-in-a-nuget-package
I wasn't actually aware of those other features, so I'm not sure. However, * For feedback, I ask users to email me, and provide links within the apps. I think this is nice for them because they get a copy of all the conversations in their Sent Emails. * I handle all authentication with the Identity Framework and Web API. * User Tracking... well HockeyApp doesn't know about my users.
I see, thanks.
This would be a good place to look. 
Even if you deleted the file, the background service is still running and it didn't recognize that the file is missing. You must do: "sqllocaldb stop" and then "sqllocaldb delete", if i remember correctly you can do this from the package manger window. From my personal experience don't use the local sql file. Install sql express or the full blown version. I had too many issues with the mdf file. 
I've never had issue with local sql files.... because I've never used them ;) :P
Well I deleted the database completely even went so far as to remove the files from Recycle Bin.
&gt; Something else to look out for is if your migration file is empty Well this is actually what started all of this in the first place. I'd finished writing the code for a new feature that required a new table so I built the project and attempted to add the new table via a migration but it kept building with empty `Up() Down()` methods. Looks like I've finally got everything working okay but its only taken me all damn day :/ Still, thanks fro the advice :) I'll definitely put it into practice.
I'll happily admit this is the first time I've ever used LocalDb. I'd go for sql express but the client then would have to install it. He wants this particular database to live directly on his pc so LocalDb seemed the more logical choice since he wasn't interested in doing much to get it set up.
While I agree... I can't for the life of me think of a use case where this should be needed. I'd love it if they'd actually show us why they did this. I don't want to have to worry about some library author using this hack and not documenting it and having my code blow up in production... and not being able to figure out why. 
Ha, are you me? I have the same exact problem. 
"It's very expensive, so it's not very popular." No, Xamarin.Forms is free and opensource.
I will admit it is difficult at first, but well worth the challenge. It makes testing and spinning up new instances so easy. As well as having to roll back features when something goes wrong.
I've done this with Microsoft.Extensions.Logging, which is what the ASP.NET Core team developed. You can't necessarily set different logging options per assembly (without creating multiple logging factories), but you can set verbosity per namespace.
Have you deleted the folder &amp; files on the system, or only removed them in your visual studio project?
Yes logging everywhere. Do this in your projects config file that consumes LibComms: &lt;filter type="log4net.Filter.LoggerMatchFilter"&gt; &lt;loggerToMatch value="LibComms.*" /&gt; &lt;acceptOnMatch value="false" /&gt; &lt;/filter&gt; Assumption is that you are setting up your class logging correctly where it includes the namespace and class. Example From: https://stackoverflow.com/questions/5504148/log4net-configure-to-ignore-messages-from-a-specific-class
I am currently trying this out and it works with System.dll. However there doesn't seem to be a way to dereference the mscorlib.dll. Since the class that I am trying to modify (BitArray.cs) is in the mscorlib, I will not be able to use your method. Even tried to check the .csproj to see if the mscorlib was automatically referenced there, but this was not the case. Any way I can work around this?
Why is this routed through an Instagram redirect?
In your edit 1 you initialize the `CurrentUICulture`, but in your message box you use the value of `CurrentCulture`. Those are different properties.
Sigh, just use SSDT or equivalent. EF migrations are a stupid way to manage a database.
Nonsense. Looks like the article was written by C++ fanboy who have no real experience with C# and it's written more like a comparison. The only reasonable to use C++, if you making a program for a "potato". All other points for C++ aren't true. 1. .NET got a huge functions support without extra libraries, a large community and open source libraries for almost anything. 2. You can run C# with Mono on any platform since long time. Also .Net Core 2.0 supports other platforms. 3. C# is fast enough for any modern real world application. 4. Same as 3. 5. true 6. Have you ever used it? If you know both language at the same level, you will always prefer C# for normal application.
Dependency Injection is really the only good answer here. Whether you're using a DI framework to resolve dependencies from a container automatically or not is your choice. I'd suggest doing so.
`Visual C# also underlines syntax and semantic errors the moment you make them.` ... Visual C#? `C# IDEs support automatic refactoring,` C++ IDE's prevent them from having refactoring tools? `C++ is C, C++ and C++0x at the same time` what the?!?!?!?!?!?! `bugs in C# code are more difficult to get rid of, so they cost you more.` LOL `with C# you cannot create cross-platform code despite existing unofficial .NET implementations for non-Windows environments and potential binary compatibility.` I keep just reading more, there is not a single point that I can't point something completely and blatantly wrong about. Please do not read this article.
 Not quite accurate, both can edit the code at the same time, so it's like if the pair programmers had two keyboards plugged in at the same time (which makes it no longer paired programming)
I concur with the above, you want to use Dependency Injection (aka the 'D' from S.O.L.I.D. principles ) The Autofac docs do a good job of explaining the different ways of doing Delegate Factory resolution using DI. http://autofaccn.readthedocs.io/en/latest/advanced/delegate-factories.html I'm assuming though that you've already read those since your example is using the sample Shareholding type from the docs. Based on this assumption, you are likely looking for Autofac's feature that allows you to take a parameter of Func&lt;T&gt; to give you a delegate factory that you can store in a private readonly field and invoke once you need it. public class MyClass{ private readonly Func&lt;Shareholding&gt; _shareholdingFactory = null; private Shareholding shareholding = null; public MyClass(Func&lt;Shareholding&gt; delegateFactory){ _shareholdingFactory = delegateFactory; } public void InvokingFactoryAtLaterTime(){ shareholding = _shareholdingFactory.Invoke("ABC", 1234); } } 
absolutely. but do you want to force your library users to couple their code with your logger? what if you're using log4net v1 and they want to use v2. v2 has breaking changes. now they can't. that's where a logging abstraction comes in. specifically, LibLog. A library logger. https://github.com/damianh/LibLog LibLog supports many 3rd party loggers. It just uses the logger it see's at application start at runtime. I actually use it in all my projects. Every library and console app. Why? because abstractions are great. If you want to switch from NLog to Serilog, guess what you can, in a few lines of code. compare that to having to edit every single file in every single project and solution. and with liblog you don't have to edit shit. it picks up the logger you set up and runtime. *its fucking great.*
There is an implicit cast from `T[]`, so it should work. What runtime are you targeting? That cast is only available in .NET Core 2.0, and not in .NET. https://docs.microsoft.com/en-us/dotnet/api/system.span-1.op_implicit?view=netcore-2.0#System_Span_1_op_Implicit_T____System_Span_T_
Given your code examples, I'm guessing you're reading from the Autofac docs. If you carry on reading, you'll note it explains how to use the `Shareholding.Factory` in the `Portfolio` class. Typically you'd rely on some framework mechanism to resolve services from a container. The most obvious example is in ASP.NET, where Controllers can be resolved from a predefined container. i.e. class MyController : Controller { private readonly Shareholding.Factory factory; public MyController(Shareholding.Factory factory) { this.factory = factory; } } Check the [application integration](http://docs.autofac.org/en/latest/integration/index.html) section on how you'd use DI in various applications.
Instead of putting Microsoft.Extensions.Logging in your library, it'd be better to just include the interfaces. They've made this package for this: https://www.nuget.org/packages/Microsoft.Extensions.Logging.Abstractions/
you guys should look into starting to use LibLog as a logging asbstraction. Then the actual logger you choose is up to the executing process defined logger. LibLog will see which logger you set up at runtime and use it. Then that logger you choose you can set the sinks, filters, settings, etc. Also i cannot recommend Serilog enough. Especially Serilog+Elasticsearch (or similar database sink with analytics, dashboard, monitoring).
Yes my bad! Did it with CurrentUiCulture as well, same issue.
Ah, that is likely the problem, I was trying to target both Core and Framework 
I'm not quite sure how to do full join in the query syntax; I do know for sure that the Linq syntax is: x.Join(y, xRecord =&gt; true, yRecord =&gt; true, (xRecord, yRecord) =&gt; new {xRecord, yRecord}) 
If I may play devils advocate 1. Many popular libraries are only available to C# through C++ bindings, which can be awkward to use. (opengl, SDL2, for example) 2. While Mono targets many platforms, C++ can target many more. 3. This is complete nonsense. It is relatively trivial to name cases where this is not true. Consider: core code that powers massive scale search engines like google, the core neural net code running in Alpha Go or self driving cars. In my own work I've needed to generate fractal noise at a rate which was impossible with C# but possible with C++. (though this may change in the future with some of the new SIMD features being planned in C#) 
I want young programmers to understand memory and performance. To that end introduce them to Mike Acton: https://www.youtube.com/watch?v=rX0ItVEVjHc https://www.youtube.com/watch?v=GPpD4BBtA1Y&amp;t=1752s While his videos are largely about C and C++, the lessons apply to C# just as well. Also I would impart that every single bit of programming advice has many exceptions, don't follow anything blindly. 
+1 for SSDT.
&gt; dev-package-consume loop Have you considered keeping a private repository around just for this tight loop? We use a fileshare so there is very little maintenance (vs. running MyGet or something) and you can update instantly, then when you have the bugs worked out you can upload the latest package to NuGet directly.
Consider simply raising events and letting the consumer class hook up logging if appropriate.
Yes. This technique is called creating an application programming interface, or API. Common API techniques include shared memory, named pipes, representational state transfer with json, and others.
I'm not sure how useful it is as a language feature unless it replaces null. It is easy enough to roll your own. 
This should work. Mobile right now so I can't verify. Microsoft.Office.Interop.Excel.OptionButton optButton = (Microsoft.Office.Interop.Excel.OptionButton)activesheet.OptionButtons (40); optButton.value = true; 
i wonder if it's somehow related to this: &gt; If the thread is a thread pool thread that is executing a task-based asynchronous operation and the app targets the .NET Framework 4.6 or a later version of the .NET Framework, its culture is determined by the culture of the calling thread. also &gt; Note that if you set a specific culture that is different from the system-installed culture or the user's preferred culture, and your application starts multiple threads, the current culture of those threads will be the culture that is returned by the GetUserDefaultLocaleName function, unless you assign a culture to the DefaultThreadCurrentCulture property in the application domain in which the thread is executing. https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.currentculture(v=vs.110).aspx#ThreadCulture have you tried changing the DefaultThreadCurrentCulture value?
yes log but leave it disabled by default. do something like require a specifically named trace listener to be configured or add an app key/value pair to drive the on/off. Allow the consumer to set any logging level they like and you should implement as many logging messages at each level as appropriate. Ideally in debug mode I should be able to follow both the stack and the procedural flow of your logic. 
1. Learn to recognize code smells i.e. bad logic. I am amazed at some of the logic constructs I've come across thru the years. For instance, I once saw some code that was using complex nested multi-dimensional arrays to store values when a simple class would have worked fine. Another time I knew a guy who instead of breaking his code up into multiple functions he would PURPOSELY code everything in one gigantic function and then use regions within the gigantic function to organize his logic. He did this on purpose and was clueless and resistant to the fact that it was a bad idea. Things like this just leave me dumbfounded. So learn to develop that inner voice that says "something about this approach is not right; let me find a better way". And of course the usual if-else statement that assigns true and false instead of just assigning the condition expression itself to the variable. Gotta learn how to recognize those kinds of things and refactor them accordingly. 2. Know how to properly structure and organize your code. Everything should have a purposely defined home. Put thought and effort into having a well organized code base. 3. Read Clean Code by Robert Martin i.e. Uncle Bob; don't have to implement every single suggestion but at least use it to help guide you towards writing better code. 
This is the best way of adding logging into a library to be consumed. Projects like identity server and hangfire already use it. Makes logging so much better.
So it's all happening on the main thread, non of my tasks or background workers require resource files, or atleast language specific resources. So it being the main thread, im not sure where i would have to look for it, if i need the thread that calls the main thread. Also The 6.4.1 project is an test server project, and in general doesnt get used, nor is it contained in my setup, since its pure for testing purpose, it was just something i felt was note worthy, like changing to the windows fall update and using a vdproj addon to get my setup working and having reshaper installed. The rest of the project is still running .net 3.5, since all my multi threading and automated processes break the moment i go to a newer version, and haven't found the time to fix all that. This also means that in general except for my test server i don't have access to DefaultThreadCurrentCulture, since that is something from later versions. I am currently also unable to test these projects on older computers and try to release them there to see if windows or my Vs might be causing these issues. The thing that is most note worthy to me is that, its the first time that i release a new version since i reinstalled my computer, and projects that i have releases off and worked, suddently don't work either when i open them again in visual studio (as in, the culture resets with these as well now while they didn't before hand). But it being something thats all background stuff, and only thing that i really do is setting the culture, i have not really any clue on how to even debugg this, let alone find a solution.
Something else I have noticed is that if I don't redirect standard input, that even if I type into the server's spawned console window, the input does not seem to be processed.
&gt; That cast is only available in .NET Core 2.0, and not in .NET. :S Does it work on the .Net Framework if you target .Net Standard?
.NET Standard is a subset of APIs supported by all targeted platforms. So no, it does not. You can imagine .NET Standard as an interface. It does not add new implementations.
&gt; and getting some LINQ integration for free What kind of integration?
Pass a log func that hooks into your logger
My guess is that you need to install the msvc redistributable on the other machine. If it's not that, use dumpbin.exe or the venerable Dependency Walker to find out what dependencies your native module has. Do not try to distribute a debug build of your native code.
I think of .Net Standard as being the lowest common denominator. I would have been surprised if it was just some sort of targeting issue. 
Set both - &gt; Thread.CurrentThread.CurrentUICulture &gt; Thread.CurrentThread.CurrentCulture
I don't spend a ton of time in C# so grain of salt. When a project at work is in C# I'll take Rider over Visual Studio... Until I need to work with a damn form. If Rider had a visual form designer I'd probably never open VS(Maybe for the deploy functionality, that's been useful)
You need to install vc++ runtimes (x86 / x64) or put those related DLLs in the exe folder
The DLL it claims is missing is in the same folder as the exe.
This is the real answer here. The problem with using literally *any* logging library is that whomever consumes your library has to take a dependency on whatever logging library you decided to use, which might not be what they want to use (I'm looking at every .net CMS ever). LibLog is a fantastic middle ground and I wished more libs used it.
Interesting example, but for the special case of integers (and all numeric types), C#'s Nullable already does this behind the scenes with just `a + b + c`, returning null is one of the values is null.
Use ETW, anyone wanting to see traces your library is emitting can get them. https://msdn.microsoft.com/en-us/library/dn774985(v=pandp.20).aspx
Thanks for the suggestion. However, that throws an exception: "The index into the specified collection is out of bounds." This thing is driving me up the walls trying to figure it out. 
Oke so at the start of my application i now set both CurrentUiCulture and CurrentCulture. I then placed this in the constructor of my usercontrol MessageBox.Show(Convert.ToString(Thread.CurrentThread.CurrentUICulture)); &lt;= nl-NL MessageBox.Show(Convert.ToString(Thread.CurrentThread.CurrentCulture)); &lt;= nl-NL InitializeComponent(); MessageBox.Show(Convert.ToString(Thread.CurrentThread.CurrentUICulture)); &lt;= nl-NL MessageBox.Show(Convert.ToString(Thread.CurrentThread.CurrentCulture)); &lt;= nl-NL And it actualy kept the correct culture even after the initialization, so thats great! The issue thats still left tho, is that even though it has the correct culture (based on those prints) it still loads my english resource, and not the dutch one (again, these have worked before, so i know the resource files are correct).
"or one of its dependencies"?
A use-case I can think of: private string foo; public void DoSomething(string? bar) { if(bar != null) { foo = bar!; // Or call a method that accepts 'string' but not 'string?'. } else { // Do something else } } Note that the something else shouldn't be throwing an exception, because then you should not make `bar` nullable in the first place.
No, I meant the C++ runtime dlls
This is the solution right here. Some kind of Action&lt;string&gt; log parameter to one of the main constructors. Simple easy logging without forcing a specific package on the user.
Ah I see.
Blasphemy!
I do love SSDT, just wish they would hurry up and port it to .NET core and subsequently other database systems. Doubt that day will come though. 
Is there any possiblity of just scrapping the Excel Interop and just using SSRS to make some of these spreadsheets? Thats what we do at my work.
Oh man, how I wish I could do that. Unfortunately, my bosses insist on using the spreadsheet (even though I warned them it's gonna be a maintenance nightmare once if that spreadsheet gets changed often). Otherwise, I would just build them myself using DevExpress instead of fighting with this issue. 
If you add an implicit conversion to and from T, your Readonly&lt;T&gt; can be assigned like Readonly&lt;int&gt; foo = 0; return 1 + foo; Which will, at least, minimize the amount of noisy syntax that involves.
Damn, sorry. I remember going into Interop land with a small Excel sheet, then a larger complicated merge doc. That shit is a nightmare. Eventually we said fuck it and a weeks worth of interop work was solved in 2 hours of SSRS IIRC (2 years ago, mind you so my memory is hazy) maybe you can use like Open XML or something as a library and modernize this spreadsheet?
This doc is managed from a different group than what I work in. There's about 20 worksheets in it, about 60 macros, and 1,000's of formulas in it. Having said that, I'd still rather dump this doc and just create one myself. Another case of non techs making tech decisions.........
I can't think of a single reason why Microsoft would want to support other database systems.
OK. I tried my hand at dependency walker (first time user)... I ran it on my dev machine on the dll I created. It seems to indicate a few things are missing. I also ran it on the dll I created and installed on the test machine. The output is slightly different with the biggest difference I noticed being vcruntime140.dll. So I have 2 projects. the C++ DLL project. Copy the output of the DLL project to the C# Windows Exe project. How do I get the installer project for the C# windows app to include/install vcruntime140.dll as well?
OK. I tried my hand at dependency walker (first time user)... I ran it on my dev machine on the dll I created. It seems to indicate a few things are missing. I also ran it on the dll I created and installed on the test machine. The output is slightly different with the biggest difference I noticed being (as you suggested) vcruntime140.dll. So I have 2 projects. the C++ DLL project. Copy the output of the DLL project to the C# Windows Exe project. How do I get the installer project for the C# windows app to include/install vcruntime140.dll as well?
Did you wait for exit? https://stackoverflow.com/a/12570809
This is interesting. I wonder why I've never heard of this... is there a down side? Maybe performance related? Also how would it work specifically? Should the LibComms expose a different event for every log level? for eg OnLogInfo, OnLogWarn, OnLogError etc? That way the calling class can ignore low level logs by simply not listening to that event. Have you ever actually done this? I'd like more details.
This is interesting too. Similiar to /u/jpfed 's answer about events.
This sounds like a great final solution, however for a first step I just want to use Log4Net directly and have it work the way i want. I'll definitely come back to this later though, thanks.
Me neither, *sigh*.
Maybe I'm out of date and out of touch but: The last time I used it "for free", I'd barely added 2 new features to the example "To Do List" app before the compiler started failing and warning me I'd hit the size limit for free Xamarin. It also wouldn't let me change the splash screen and "ship the app to an app store" was forbidden. If that's changed, then my mental assessment of whether Xamarin.Forms can take off will shift. (This was when it was very, very early so I'm hopeful it's changed.)
[you can continue to use log4net](https://github.com/damianh/LibLog). &gt;"..it also contains transparent built-in support for NLog, Log4Net, EntLib Logging, Serilog and Loupe, and allows your users to define a custom provider if necessary" you just : 1. [install liblog nuget package.](https://www.nuget.org/packages/LibLog/) 2. [setup log4net as per normal.](https://github.com/damianh/LibLog/blob/master/src/LibLog.Example.Log4Net/Program.cs) 3. [and log using liblog through your project instead of log4net. ](https://github.com/damianh/LibLog/blob/master/src/LibLog.Example.Library/Foo.cs) meanwhile, your project code that logs with liblog pipes through log4net using your settings, working the way you want. only the method calls different a little bit. your codes logs as normal, but now you can swap out log4net whenever you want.
Thanks for the info. My C# skills are still a work-in-progress since I haven't been using the language for very long. Plus, I've mostly only been using C# in the context of the Unity game engine. I've still got lots to learn probably.
Full outer doesn't have a good implementation in linq. You can do a left and a right join and a union to close it out. This would be a full outer join, but I don't know if EF would actually write the query as a full outer join. You can check the output SQL though. 
You have to flush the stream for the underlying process to see your input
Okay, so I probably wouldn't use this, and I'm pretty sure (on a second look) that it doesn't solve your actual problem. I probably wouldn't use it just because it's been a pain to sell certain of my coworkers on doing things better, and it would probably be easier to just wait for the language feature to become available. Mutating locals isn't a huge problem, really: if it *is* a big problem, you need to make your methods smaller. But, I don't think it actually *works*, because a readonly variable is one that can't be reassigned, and, well ... Readonly&lt;int&gt; foo = 0; f = 1; // reassignment, i. e. mutation const Readonly&lt;int&gt; bar = new Readonly&lt;int&gt;(10); // doesn't work. Can't const something that isn't a literal const Readonly&lt;int&gt; baz = 10; // Still doesn't work, for the same reason. In practice, only numeric types (i.e. int, byte, decimal, double, etc), bools, chars, and strings can be declared const. ETA: Yup, verified in VS2017. `foo` can be reassign, `Readonly&lt;int&gt;` "cannot be declared const", and `new Readonly&lt;int&gt;(10)` is not "a compile-time constant", which is required for const variables. 
Oh ok, thanks for the additional info and perspective on it.
In my opinion you shouldn't lock your consumers to a logging library. Instead you should expose an ILog interface so that the consumer can provide their own implementation and register it with the library. Then your library can call the relevant log functions on the implementation registered by the consumer. You can even provide a default implementation of ILog that does nothing that usually would be named NoOpLogger (No Operation Logger). What you can do on top of this is provide additional libraries that implement your ILog interface with popular logging frameworks so you may have a Log4NetLogger but make sure it's an optional package the consumers can install and not provided by your default library.
So after writing the line, flush the stream? edit: I tried flushing before and after I write to the stream, as well as both, with no luck. Still no response. 
I can't recommend these abstractions enough. You'll thank yourself down the road when you need to switch loggers without hacking around the project concerns.
I just discovered Serilog the other day on a whim while working on a personal project. It's easily the best one I've used so far. The configuration syntax just feels more natural to .NET with the way you can chain it together.
I don't believe this is the issue. I've added it anyways to no avail. Having no issues getting the standard OUTPUT or ERROR. Simply having issues getting the other process to receive the standard input I write to it.
Can you try closing/disposing?
Span&lt;T&gt; is two different things that try to act the same between framework and core. It's slower in .net framework by ~15%, and doesn't come with a few features, most of that performance and feature came from CLR changes that aren't made for the .net framework, while they can be made in the living .net core.
 Personally, I learned all I know from open-source projects. I've never read a programming book in my life. If you're in any way the same, find a large open source project you like, and just start editing it. You will quickly learn the structures on how they built the application, and at first glance, might not understand why, but when you start editing it, it will almost always make sense. Open-Source projects seems to be really overlooked by this subreddit, it's one of if not the best source of learning for correct programming procedures and methodologies. 
Yeah another proget user here. We have separate feeds for dev and stable. But we also have a script to relink dependencies from packages to source directory. 
You can also just not modify the variable.
I'm making some progress on this. I added the code: foreach (var groupItem in s.GroupItems) { var g = (Excel.Shape)groupItem; if (g is Excel.OLEObject) continue; try { if (g.FormControlType == Excel.XlFormControl.xlOptionButton) { Console.WriteLine(g.Name + " " + g.ID); } } catch (Exception ex) { } } This gives me the following output: Option Button 317 2365 Option Button 318 2366 Option Button 319 2367 Option Button 320 2368 ...... (skipping typing the rest, you get the point) Option Button 406 2454 So, I'm getting closer. Based on the above information, any thoughts on how I can set values for those xlOptionButtons?
If you want efficiency then your fastest track will be design principles. Proper usage of SOLID alongside some design pattern like MVVM or The Actor Model is a sure-fire way to get your code looking snappy. From there you just need to pick the right tools for the right job. Just keep an eye out for lazy and repetitive computation in LINQ and use the right data structures for the right job. Really the worst offense I see on a regular basis is not adhering to singular responsibilities in methods or classes. 
And if that is too difficult, maybe the method is a bit too large.
The code above is passing an ID. I don't know how ID numbers are generated but they are unrelated to the shape's index number in a collection. You should be able to access it via the Name, though: s.GroupItems.Item ("Option Button 317") 
I do like c++'s const parameters. It's nice for saying what a function might do to objects passed to it.
You rock!!! I didn't realize I could just pass in the name... That worked perfectly. I'm gonna go drink and try to pretend that I didn't just spend right at 2 days on this.......lol Thanks so much!!!
Have any recommendations for open source projects in C# that are 'noob' friendly?
And you can also comment your code with intent. Looks much more sane than writing clunky syntax.
Doing either of these seems to have some odd behavior. 1. The server responds with "invalid command". This is actually somewhat good, as it's actually reading and responding. But "help" is definitely a known command. 2. Immediately after responding with "invalid command" the server crashes with a NullReferenceException.
There's also an experimental UI .NET Core framework now. Aurelia if I remember correctly?
I think it's "Avalonia". I'm being bitter and realistic: if MS doesn't buy it, it will never gain any traction.
The main purpose of qualifying a runtime variable as constant is to make the code *easier to reason about*. Simply not modifying the variable is insufficient and is utterly irrelevant to the entire point of having this feature on the language. Saying you can just not modify it has no relevance to the purpose of the feature whatsoever, and instantly proves that you don't really understand it. Every time you see a constant variable you can immediately hold it fixed in your mind. You no longer have to constantly keep track of whether (and where) it is changing for the rest of the entire local scope. If you have 10 mutable variables in a scope then you have to constantly think about the possibility that *any* of them could be changing at any moment in the scope, thereby *massively* increasing how hard it is to reason about the code. Local runtime constants greatly reduce this problem. The reasoning difficulty for local scopes grows *more than linearly* in proportion to the number of mutable variables in the scope. Splitting code off into functions helps some, but the fundamental problem is *still there*. Runtime constants also make refactoring large functions much easier. It is foolish to make language design choices based only on assuming that the users will always code in "the right way". Long functions will always exist, and they can be refactored much easier with local runtime constants available than not. Even for small functions, runtime constants make the code behavior far easier to reason about at a glance. The attitude you express here is exactly what I was referring to when I mentioned the C# community being *totally oblivious* to the value of local runtime constants. If you'd have worked more in functional languages and other highly immutability-supporting languages, and learned to think more in terms of invariants, then you would understand the huge value of it. You have no idea how much more difficult you are unwittingly making your code to understand. Essentially, this attitude the C# community loves to express is simply a failure of imagination. It is false/deceptive reasoning. This is exactly what I was talking about when I mentioned the C# designers and community being irrationally stuck in a paradigm. 
Patterns like this can be handy for domain modeling, of course, but those won’t be generic, usually, and you probably don’t want the conversions to be implicit.
It doesnt necessarily need to be done with events. You can do similar things by logging against an interface, and have some way for consumers (and yourself) to supply the concrete implementation. If no implementation is given, or probably better, a dummy "EmptyLogger" interface, then it doesnt log anything. There are a ton of ways to accomplish the same sort of thing.
Nice rant. &gt;The main purpose of qualifying a runtime variable as constant is to make the code easier to reason about. Simply not modifying the variable is insufficient and is utterly irrelevant to the entire point of having this feature on the language. The main purpose is to allow the compiler to better understand and enforce the programmer's intent. There are better ways to make it easier to reason about. &gt;Saying you can just not modify it has no relevance to the purpose of the feature whatsoever, and instantly proves that you don't really understand it. All it proves is that I don't need syntax sugar. &gt;Every time you see a constant variable you can immediately hold it fixed in your mind. You no longer have to constantly keep track of whether (and where) it is changing for the rest of the entire local scope. If I can't tell at a glance whether or not a variable is assigned to again then the code needs to be refactored. &gt;If you have 10 mutable variables in a scope then you have to constantly think about the possibility that any of them could be changing at any moment in the scope, thereby massively increasing how hard it is to reason about the code. I'm sorry, what? No, they can only change as the result of an assignment, and those are pretty easy to spot. &gt;Local runtime constants greatly reduce this problem. The reasoning difficulty for local scopes grows more than linearly in proportion to the number of mutable variables in the scope. So... have less variables in scope? &gt;Splitting code off into functions helps some, but the fundamental problem is still there. Runtime constants also make refactoring large functions much easier. It is foolish to make language design choices based only on assuming that the users will always code in "the right way". The people who don't already code 'the right way' won't use this feature in the first place. &gt;Long functions will always exist, and they can be refactored much easier with local runtime constants available than not. Even for small functions, runtime constants make the code behavior far easier to reason about at a glance. Yeah I bet the refactoring methods with and without this feature are exactly the same. &gt;The attitude you express here is exactly what I was referring to when I mentioned the C# community being totally oblivious to the value of local runtime constants. Perhaps this 'C# community' is 'totally oblivious' for a reason? Maybe the reason is because the concept isn't, actually, valuable in any way? &gt;If you'd have worked more in functional languages and other highly immutability-supporting languages, and learned to think more in terms of invariants, then you would understand the huge value of it. No I don't think this holds true because I have and I don't. &gt;You have no idea how much more difficult you are unwittingly making your code to understand. Yes I do: It's exactly 100% as difficult to understand as it already was. &gt;Essentially, this attitude the C# loves to express is a simply a failure of imagination. It is false/deceptive reasoning. This is exactly what I was talking about when I mentioned the C# designers and community being irrationally stuck in a paradigm. Which paradigm was that? Now before you write another rant in reply, understand that I don't really *care* if this feature exists or not. If it is added I will probably even use it. The difference here is that I understand it's just some compiler sugar. It won't magically make bad code good or turn shit programmers into great ones. It's a boring solution to a non-problem. Keep down this path and they'll turn C# into C++, where people invent elaborate mechanisms to avoid doing a thing instead of just not doing it.
&gt; I have always wondered to myself "If they can't even see the value of proper immutability, how can I trust them to make any other reasonable decisions about the design of the language?". Not appreciating the value of immutability is about as indicative of poor judgment to me as not appreciating the value of version control, potentially. I'm sure there are others who feel similarly, who have ended up using other languages because of this major design flaw. You have to remember that C# is a general purpose language, originally designed to bring converts from C++, Java, Delphi, and Visual Basic. "Proper immutability" didn't make it into C# 1.0, and the C# team has been pretty consistent about *not* doing things which are only skin deep since then. Compare to Java's terrible type-erasure generics. They're not going to add the equivalent of "type erasure" immutability-which-is-not-really. There's no value to skin-deep immutability at the language level.
I recommend you to learn functional programming. Learning something like F# will help a lot to understand why and how things should be done. Something that you could learn doing C#, but probably won’t. Functional principles like immutability, recursive functions or pure functions will help you a lot more in becoming a better developer than any OOP crap. SOLID, TDD, etc are just needed because of the weaknesses of OOP. If you can write object oriented code but with more though you will be miles ahead. (For example, avoid inheritance like the plague and use composition and extension instead) If you want to build robust applications in C# you can learn Linq in depth, There are a few good books about Linq, extension methods, etc... https://www.manning.com/books/linq-in-action I can guarantee you that my apps are 90% LinQ, almost never use loops or global variables and are consisted of a lot of small functions and almost never fail. While all my peers who say that lazy loading is dangerous, love reflection or dynamic objects, usually write trash apps that are difficult to maintain and usually have a ton of bugs. And performance is usually not the issue. Basically, learn to write more strict and correct code but don’t fall in the trap of the patterns and over engineering. KISS and YAGNI will make you a senior faster. Start with Linq and then try F#, you will learn probably a lot of stuff that your coworkers will not even understand when you explain to them. Put a lot of emphasis on understanding interfaces, they are something usually overlooked by juniors and are really important to understand how to write better code. And if you want to be ahead of the game, read about the C# parallel extensions and experiment with it. (Usually is not the best option to use parallelism, but in a lot of cases it is, and it’s something else that 90% of developers don’t know anything about). It’s just Parallel.For, Parallel.Foreach, and Concurrent collections. But knowing when to use it it’s trickier than it sounds. Microsoft has a pdf about parallelism on the msdn that is golden, but I can’t find the link now... in heavy data processing apps can turn a 5 hours execution time into 15 minutes (real case)
Don't put nuget packages in your vcs. Nuget is a repository in and of itself...
Northcentral Technical College's Intro to Programming course is ~400 dollars and includes unlimited one on one tutoring.
read the Clean Code book
Learn design patterns, not really algorithms. Also learn Visual Studio keybindings. Also get good with LINQ to do stuff like this (might not be 100% right) var allLines = File.ReadAllLines("some file.txt").ToList(); foreach (var line in allLines) { Console.WriteLine(line); } do this instead of a foreach loop allLines.ForEach(f =&gt; Console.WriteLine(f)); 
No, that's not the scenario we're talking about here. Also the exclamation point on `bar!` wouldn't be necessary in your example, because the compiler is smart enough to understand that `bar` is no longer potentially null at that point. The issue we're talking about here is the ability to do this: private string foo; // NON-nullable. public void DoSomething() { this.foo = null!; // lol, foo is now null, even though it's non-nullable. } public void CantFail() { DoSomething(); DoSomethingImportant(this.foo.ToUpper()); // Boom, null reference exception. } Why would they do this? I just can't see a reason. 
Actually .ForEach is the worst extension method on Linq because it returns void iso a value, so it’s an impure function, and is slower than a normal foreach. But I agree, learning Linq should be the first priority. 
How are they stupid?
I agree, but if you are doing something tedious/verbose like the above, it works fine
* rock-bottom terrible * stunningly misguided * by far one of the greatest flaws of C# * irrational paradigm * irrational justifications * blatantly obvious and gapingly huge flaw * oblivious the C# community has historically been * Of course, if C# had actually been designed in a sane way * has made me seriously question the judgment of C#'s language designers * I have always wondered to myself "If they can't even see the value of proper immutability, how can I trust them to make any other reasonable decisions about the design of the language?" I think you need to take a step back and ask yourself if you're not over-reacting just a tad bit. 
Hey, not sure if this is viable in your situation, but at any rate I hope the following may at least be food for thought... Interop libraries are just plain awful. Like, really bad. Worse than orange juice and toothpaste bad. 1) Any machine running the code MUST have Excel installed. While it's true that, if this a desktop application, the person running the application will likely have Excel installed, but what if they don't? They won't be able to run the program (edge case, but still...). In addition - if, say, you wanted to run your code on a web server, the box you are running IIS on must have Excel installed. Web servers have no business doing anything but being a web server. Unnecessary things on that box just add more and more potential points of failure. 2) The way the interop libraries work is they literally start an instance of Excel. For starters, that is a performance killer. Furthermore, if exceptions aren't handled for ANYTHING, your program crashes, but that instance of Excel will still be running. Or if you stop debugging without letting the code dispose of the Excel object, the Excel instance is still running on your machine. Or if you don't explicitly ensure in your code that the instance is killed, it will continue running. From personal experience, once while working on a similar project, I ended up having 14 instances of Excel running. No bueno. Now... I'm not sure what the scale of your situation is. Have you spent weeks or just couple of hours? Is it feesible to scrap the usage of the interop libraries and rewrite it? Or are you too far deep? If you are indeed too far deep, please, understand the pitfalls and plan accordingly. So... If even not for this project, for future projects, I would HIGHLY recommend looking into the Open XML SDK. There is a ton of documentation on MSDN, and, of course, there's stack overflow. The conventions are pretty similar, and it's exceptionally light weight and performant. I know this is obviously not an answer to your question, but, again - food for right. Please reach out if you have any questions or anything. Cheers! 
This is why I really love interfaces.
It's open by default on most user's systems.
Have you ever tried to create a view or stored procedure using EF migrations? Nothing but massive strings. Absolutely no checking for syntax errors, let alone more interesting things like whether or not columns actually exist. You might as well be using raw SQL files. And how do you see versions over time when everything is dumped into one massive migration class? Then there are the non-junior level tasks like setting up a clustered columns store table. Or file groups. Security settings on tables and views. etc. etc. If you're using EF migrations for file-based databases like SQLite, that's cool. In fact, I recommend it as a way to automatically update your file format over time. But for a server that you're spending a significant percentage of your IT budget on, you should be leveraging it's full capabilities. 
Azure. MariaDB is now on Azure. Wouldn't be nice if you have a tool, say MariaDB Data Tools, that could automatically deploy databases to Azure?
Yea, that would be nice.
It doesn't have to be clunky. If you use `let` instead of `var` for local, read-only variables it makes the intent clearer without forcing you to type any more than you were already going to. And lets be honest, if the keyword for a readonly variable is more than three letters long, nobody is going to bother using it. 
Yes, and that's why it is a low priority feature. But I have seen bugs before caused by accidental reassignment. A little extra safety would be nice.
Is this homework? It sounds like homework.
Ok first off learn xaml if you've done any web development XAML is a cake walk for the most part. The designer IMO is good to get an idea of what your app will look like. What your looking for is called a fluid layout. You can also use an adaptive layout (think @media selectors in css). You cannot build a fluid layout using the designer or at least it would be much harder IMO. [Go Here](https://docs.microsoft.com/en-us/windows/uwp/design/layout/layouts-with-xaml) and actually read it. after you have read that and understand it, depending on the scale of the application you may also want to adopt a UI library like Telerik UWP however I would not go this route unless this is a sizable app. 
&gt;There's no value to skin-deep immutability at the language level. Why not, and what's the alternative? Immutability enforced at the CLR level? What's the point? You can't pass it by ref and you can't modify it without unsafe code. At the language level, having the compiler disallow modification of a `readonly` local variable would function in the exact same fashion that having a `readonly` class variable defined, with some obviously different semantics for how it is first assigned. If it's good enough for `readonly` in the class, it's good enough for `readonly` in the method.
I mean skin deep like Java's generics were, where the safety only works until you pass it around to the wrong place. There's no use to that. I would agree that readonly local variables would be good, including disallowing them to be passed by ref or out if they'd already been assigned.
Use polymorphism, not inheritance. IContractDocument{ IContractContent Content {get;set;} }
I've used this in library code. First, define a logging method in your calling code that takes a string. public void LogImplementation(string msg) { // Log the msg here however you want } Add a parameter to your comm methods that takes an Action&lt;T&gt;(string) (or inject it via constructor) named "logIt". public void DoCommStuff(Action&lt;string&gt; logIt) { // Do your comm stuff } Call your comm method: libCommInstance.DoCommStuff(LogImplementation); When you want to log something inside this method, call this parameter this like logIt?.Invoke("Some log info goes here"); If your calling code doesn't have logging (or you don't care), pass a null. The question mark before the .Invoke will handle this case for you. 
Just saw your answer and we're in agreement. :) It's logger neutral and makes the library far easier to drop into a new project. 
It's just a text template, just copy the artifacts and use them like any other c# file... I use EDMX then copy the .cs files into .NET Core projects sometimes.
I have done this. Every time in my libraries that I would have written a log message, I raised an event instead. These events didn't know anything about log levels. They were purely in terms of business logic. I received this input. I made this decision. I am executing this side effect. Then, I defined a few classes full of handlers for these events. Each such class represented a logging policy: what actually gets written to the log, and at what level? At the composition root, depending on the config, I chose a logging policy class to wire up to the events. If I really needed to, I could have also had a mechanism for changing logging policies on the fly, but it didn't come up. My domain was small enough that each different would-be logging site got its own event type. But I could imagine just having a small set of different event types: input received, decision reached, effect executed, exception. 
Implement an abstract viewmodel that takes a IEnumerable&lt;TModel&gt; data table, reflects upon TModel, and projects the data into HTML form. Next, write, buy, or find a nice library of statistical extensions for IEnumerable&lt;TModel&gt; Just expose more properties on the abstract viewmodel at this point -- on for each measure you want to display.
I did some research just and I actually think you're 100% correct. Tt turns out `readonly` is already baked into the CLR, and is used for `readonly` fields. This means that you can't modify a readonly field at runtime without the CLR throwing a runtime exception. Pretty neat, it's nice to see the CLR does this "properly" already. Of course, [Jon Skeet has a some comments.](https://codeblog.jonskeet.uk/2008/03/15/c-4-immutable-type-initialization/). Unfortunately, the CLR doesn't currently allow .initonly to be specified anywhere but the constructor of an object. This means that the CLR would indeed require modification to allow `readonly` variables in function scope. This could be worked around with compiler hacks, but it would involve generating multiple container structs for each function call to house the `readonly` variables. Pretty ugly. Luckily (and unlike generics) there is a middle ground. When code with `readonly` variables is compiled for older/existing runtimes that don't support local readonly variables, either the struct workaround can be used, or simply ignore the issue and enforce `readonly` at compile time. For code compiled for later runtimes, include the .initonly decorator.
The other thing I've noticed in our NuGet packages is poor testing. When a package is released by itself, I can guarantee there's a bug in it. Our developers were killing themselves trying to fix bugs, release a fix, and then check to see if their code worked. I've been trying to introduce more rigor in our packages this year--everything shares a common build process (Cake) and requires unit tests (XUnit). Documentation sits alongside code, including examples. Anything that might be a bottleneck or is written a certain way for performance must have benchmarks (BenchmarkDotNet). Libraries that work on external resources should either have integration tests or functional examples included in the release to validate them. It's made a huge difference in our pace of releasing (while really helping quality and comfort levels).
Probably the first time anyone has tried to link my account on Reddit and they get it wrong. Noooooooo. But ya, it is heavy on memory and CPU. Especially since it's essentially another (more powerful) Roslyn running in the same process. If you go to JetBrains site you can find a lot of helpful tips to reduce overhead, though. https://www.jetbrains.com/help/resharper/Speeding_Up_ReSharper.html I almost always turn off CodeLens when using Resharper. Here's a feature comparison of VS2017 and Resharper: https://www.jetbrains.com/resharper/documentation/comparisonMatrix_R2017_1_vs2017.html
You could also .Aggregate the strings in a StringBuilder, then send that out to WriteLine once. Then your "What gets printed to the console" is a bit more testable, if needed.
You certainly made a lot of bold claims about a language you haven't been using for long and admittedly have a lot to learn about.
The D in SOLID is Dependency Inversion Principle, which is distinct from Dependency Injection. DI is an architectural pattern, DIP is a design principle.
Rando on Reddit knows more than Anders Hejlsberg apparently. Show up on your first day as a junior programmer and send an email like this to your seniors and kiss your career advancement goodbye. 
https://blog.xamarin.com/xamarin-announcements-microsoft-connect-2017/
There is a 0% chance you'll ever convince me to adopt Xamarin. 
Coming from Java / Scala, it blows me away every time I type a local variable as a shortcut that doesn't change state. I literally wince due to the extra overhead I'm adding to the maintainers to keep that var vs a val in their head while they read a method body.
I agree with you 300%. People don't know what they are missing until they have gotten used to thinking things this way.
You can start here: https://code.msdn.microsoft.com/windowsapps/LZW-Compressor-and-2cb0600b
C# is more an OO language than a functional language. 
&gt; This means that you can't modify a readonly field at runtime without the CLR throwing a runtime exception. It's not actually enforced at runtime, you can freely write to initonly fields by modifying/emitting IL (as well as with reflection and of course unsafe code).
It's not even a LINQ extension method. It's a relic from the early days of C#.
Dependency inversion is not a principle; it is a technique that's taken on airs. 
Show XAML code and I might help for you
&gt; Every example I see has them resolving directly through the container. That's known as the "Service Locator Antipattern". More info and what you should do instead: https://www.infoq.com/articles/Succeeding-Dependency-Injection
Why would you do that when you could just use straight dependency injection? 
How's that any different than simply calling `new Shareholding("ABC", 1234)`? 
Oh wow, so .initonly is only to signal to other DLLs that the field is readonly and not actually enforced. I guess that makes sense, enforcing readonly would probably have quite an overhead. In that case, the CLR needs no modifications at all, and .initonly need not be used, because local variables are never exposed outside their scope. The whole thing can be done as a compiler trick.
That's how my ORM works. It has events for execution started, completed, canceled, and error. The event has all of the info you need to wire it up to the logger of your choice.
True, but events are the idiomatic way of doing it. If you log against an interface, then you only get one. With events you can have as many listeners as you want.
I'm going to say no. What if I don't want to log? What if I want to attach two loggers? An event solves the same problem but is much more flexible.
I keep swearing that I'm going to wire up my libraries for ETW, but I never get around to it.
Congratulations, you've just reinvented 90% of the event model. 
I would just get this lib :) [https://sourceforge.net/projects/sharplzw/](https://sourceforge.net/projects/sharplzw/)
It really depends on the element's parent control (Grid, StackPanel, etc). For the most part, you could set the Horizontal and/or Vertical Alignment property to Stretch in the designer (right click on the element then select properties) or: &lt;TextBox HorizontalAlignment="Stretch" /&gt; If you're used to Win Forms, this is kinda like dock/anchor. Not to be confused with HorizontalContentAlignment, which would be used to align the text, in this example. IMHO, you should consider editing the XAML directly and ditch the designer approach or use the designer and XAML in conjunction.
Try Write instead of WriteLine
Actually there is method in string that does that for you. String.join I think it’s called. I don’t remember well. You pass an array of strings and it concats them all. 
If the lack of readonly local variables is really such an issue for him, it's an indicator that his methods do too much.
True, I heard Erik Meijer critizing .ForEach saying it’s the method that shouldn’t be in Linq, but actually is a method of the collection itself. 
It is dependency injection? I'm just saying in cases where you're using a framework, many of them have a facility to plug in some form of DI to ease wiring up services.
It is dependency injection? I'm just saying in cases where you're using a framework, many of them have a facility to plug in some form of DI to ease wiring up services.
What do you actually mean with efficient code? Many times people use the word but it's quite ambiguous. In general you want to avoid doing work that is not necessary (fastest code is the code that is not done). LINQ can help you narrow down the collections, but the work that is done on the remaining is a different story (and depending on what work you are doing, is not at all needed to optimise)
why is this even an issue? just don't reassign the value if you don't want it to change, or make it a property without giving it a set accessor, or make it a return value of a method in a static class. i'm pretty new to all of this, but doesn't any one of the above solve the issue, or am i missing something else entirely (in which case, please enlighten me)?
Granted, readonly variables are generally a good idea, but jesus, rent some industrial equipment and get the stick out of your ass.
[Codewars.com](http://www.codewars.com) is quite good. You get little programming exercises in the browser (Supports C# and other languages). It's usually something algorithmic. There are some Unit test cases to make pass, then when everything is green you submit it. This is the interesting bit, at this point you can look at all the other solutions and the best voted ones. I'm experienced and I've learned a few things. These exercises are called Kata. The word I think comes from martial arts where you repeat the same set of movements over and over until they are muscle memory. When they were introduced as a programming concept (because we never did anything like this before someone coined the term :/ ), programmers were being told to treat them like martial arts. Do the same set of Kata over and over. This is a stupid idea for a lot of reasons. I've already written a lot but I can explain further if necessary. The Codewars exercises/Kata are numerous and I quite enjoy dipping into it for 20 minutes. That's the benefit for me, I can dabble for 5 minutes or an hour and still achieve a little something and get a comparative from which I can learn. It's sometimes easier than dipping into one of my own projects which are boundless time sinks :) 
You make a good point
The downbotes might be because it's slightly off topic. If you are being downvoted by a C# developer who thinks they can't learn anything from functional style programming they're not worth worrying about. There are many good lessons that can be learned from a functional style of coding. C# supports everything you need and has had fundamental support since year dot. Every style is a compromise at some level, the skill is always understanding when to use what, where. As usual, functional is just the latest "next big thing" that originated 30+ years ago. If you ignore the hype, a lot of the lessons are directly applicable to every project and probably already canon for better quality experienced developers.
Care to add how you did it for future readers of this thread?
Ignoring the ForEach issues which are adequately covered below, design patterns are not an alternative to algorithmic stuff, they're two separate conjoined concepts. Patterns usually reflect the different ways you join algorithms together. It's useful to know the difference between an Array and a List&lt;&gt;, to know what common functionality already exists in the framework, following the theme, Array.Reverse, and why not to use Array.Reverse. 
Ok, why are you all so keen on joining the string together into one giant string? You're making the assumption that calling Console.Writeline once with a large payload is better than calling it many times with lots of small payloads. That may or may not be true for different situations but it is not a given.
I understand he said it for testing. You could have a unit test that checks the expected string and is easier than checking an array of strings, but it could also be done almost as easily. I just say that there is an easier way of doing concatenation than using aggregate. Basically i agree with you, usually printing line by line is better than creating a huge string. It depends, but usually is the case.
Yeah, my point is exactly that, to write better C#, learn F# and Linq.
Yes, it wasn't directed just at you, but the whole thread. What you said is perfectly reasonable. It's interesting because it's a logical mistake that actually repeats itself a lot in production code. Someone says "Here's my loop!" someone else changes it to .ForEach, someone else decides against ForEach and goes with a .Aggregate, then someone else goes old school and returns to a StringBuilder. So over time the intent of the code has mutated from something that emits frequently to something that vomits one fat chunk :) I've seen it fairly recently with an old WCF project that was being renovated. Sometimes it's good to combine lots of small messages into one big one, but you have to do it intentionally, not as happened because someone iteratively changed the code and its intent accidentally :) 
Thanks for linking to that site, I'd not seen it before. Just done two exercises, and had one "wtf was I thinking" moment after seeing the other solutions...
ForEach is not slower than the normal foreach, it's actually faster because of that that it makes less allocations.
Lol, totally forgot about it for some reason. I'm silly
I just simply added the vcruntime140.dll to the installer project and installed into the application directory. 
Yeah, for me the funny part is that at the end it does exactly the same. lol
Actually for what I am reading now, neither is faster. On a list .foreach is faster and on arrays is not. Interesting. But it’s the typical thing that changes based on the .NET framework version for what I see. Probably nowadays is just a syntax or taste matter.
OK take a deep breath through your nose. Hold for two seconds, exhale for two seconds. Repeat. You're gonna be fine. Just start with logging in. It's the basis of your app and a good warm up. What you need to figure out is some of the following. Just ask your coworkers. * Is there a login API you can access, or do you need to connect directly to a database? * Figure out what the login protocol is. What data do you supply, in what order. Exercise one: just try to login with the applicable technique. Google is your friend. Print OK if it worked, failure if it didn't. Second exercise: get some (any) data and show it. Third exercise: Persist the login. In exercises one and two, you may need to login for every page ;) exercise 3 is about staying logged in (session) and logging out. Three steps. Start with step one and keep yourself from multitasking or trying to do more than just that one step. That will help you focus and break it down into manageable pieces. After that, you've seen three aspects of the system and you've warmed up so you'll know what next to do :) Breathe and break it down into smaller steps. You've got this :) 
&gt; Probably the first time anyone has tried to link my account on Reddit and they get it wrong. Noooooooo. ... Dammit.
Have you thought about posting to dba.stackexchange.com ?
I don't know much about LocalDb or SqlExpress, but my guess is that SQL is either doing some background cleanup (indexing or whatnot) or has a runaway process. A more interesting question to me is why are you creating the file if it already exists? - just connect to it. The storage is meant to be persisted, so let it persist. Also, Have you considered SqLite? I used it years ago with good success and AFAIK it's still the preferred solution for localized SQL
You can hook up as many things as you want with a Log "func". InitLibrary( logstring =&gt; { logger1.Log(logstring); logger2.OtherLogMechanic(LogLevel.Info, "TextFrom Lib: " + logstring)); if(condition) { Console.WriteLine(logstring); } } 
Great book. Changed my mind about a number of things. I feel it helped me.
Yes, it's mostly taste matter, but Eric Lippert suggest using the normal foreach in [this](https://blogs.msdn.microsoft.com/ericlippert/2009/05/18/foreach-vs-foreach/) article. [Here](http://blog.gspd.mobi/fun-with-micro-optimization-in-c/) is an article about the performance comparison between the normal foreach and ForEach.
Why LibLog and not the official Microsoft ILogger abstraction?
Lol, yes I've had some of those. I'm starting to harden against the immediate blast of embarrassment now :)
Learn C# first, that is going to drive everything else in the application. It looks a fair bit like C, but not. Keep in mind that 1. .Net is all managed memory. `new MyClass()` creates an object of that class type, and it will be removed from memory after it goes out of scope and the garbage collector does it's thing 3. Everything has a base type of `System.Object` aka `object` 2. Value types (int, string, double, etc) are implicitly passed by value, this can be overridden with the `ref` keyword 3. Reference types (classes/objects) are implicitly passed by reference, this cannot be overridden 4. Don't dick with the garbage collector, let it do it's thing. C# is really a beautiful language and it's only getting better over time. Now find a good online resource and get learning
For libraries I made in the past (.net 2.0 / .net 3.5), I have used System.Diagnostics and set up TraceListener hooks for logging systems. That seems to work OK. 
1) are you sure it’s *not* attached in second (or third, etc) instance of sqlserver? It’s completely possible for one machine to have multiple instances running. https://stackoverflow.com/a/141180 2) there are lots of things you can use to track what’s happening. For 100% brute force, try sysinternals process monitor: https://docs.microsoft.com/en-us/sysinternals/downloads/procmon That’ll show you which *process* is doing what. (Process Explorer will also let you browse open handles etc)
You should be able to do this with the built in templates in visual studio. You might need to follow a couple of blog’s instructions. To find those google things like, “asp.net login” pro tip include the version on .net
Here you go : https://m.youtube.com/playlist?list=PLYMOUCVo86jFPCV6_u2m8P2NE2LSijvLN . Enjoy and good luck! If you have more questions bmyou van ask but I'm also only recently startes working :).
It's an internship so your experience may or may not be positive. Sometimes the company/team doesn't want the intern at all, especially when they have "real" work to be doing, deadlines to hit and it's all the idea of HR, yaddayadda. Others love interns. Some interns go on to great things within the company and they see the intern as an investment and valued team member. Most are on that continuum somewhere around the middle. One thing to understand about working in a company (intern or not) is that no one will ask if you need help. If you learn one thing today, if you need help you need to ask for it. There's a balance between asking for too much and not enough, generally try first and if you can't progress after a fairly short period of time then ask. Always try first unless you are certain you just don't have enough information. With your experience in C you'll be fine. It means you understand the basics; flow control, variables, functions. Personally I'd find a step by step tutorial that gets an ASP.NET app running on your computer. This is really easy. You don't say what version of C# (framework really) you are using or what software, I'm going to assume Visual Studio 2017. It's mostly the same for 2015, and not really the same for 2013 and before. Things you need to find out: They want ASP.NET. Do they target .NET framework version 4.7 (or older) or Core? You can google the difference, it's only important to get you running quicker. ASP.NET is a server side thing. It is often used with ASP.NET MVC, but in VS2017 for example it will happily template an application using React or Angular. You will probably already be lost at this point, don't worry, but do ask if they have a preference. As u/NOX_QS says, find out what you will be authenticating against. All companies need to be able to authenticate users in apps, so all companies will have done it already. Ask what other apps use and whether there is any documentation on it. If they just want you to do it against a database then that's fine too and simple. You should be able to start Visual Studio, create a new project based on the ASP.NET template, pick ... go with React, Angular or MVC (try all three later and see if you can figure out what's different) and press F5. It should build and then show you a web page. You're off :) Doing ASP.NET means you will have to learn a bit about CSS, Javascript and HTML too. If you go with React or Angular it will add NPM and some other stuff to that list too. But don't be overwhelmed. You don't need to learn everything, just get it running and learn as you go. Finally, don't be afraid to start again and throw out everything you've done. You will have learned things, it will be easier the second or third time. 
Some things have changed between 1.0 and 2.0 but the tutorial is probably still worth it outside of the project setup (which is different and simpler). The code didn't change much though. https://docs.microsoft.com/en-us/aspnet/core/migration/1x-to-2x/
Key part here is use composition over inheritance. Hierarchies makes your code complex, more files, more boilerplate and more "Where is the feature implemented?" situations. Especially so if you don't have documentation. Composition makes things easier to find, iterate, add, swap-out and reason about because it's literally a list of objects that give functionality to a class. Doesn't mean you should avoid OOP, use both but prefer composition.
I managed to get some modicum of progress here by building all my data into the Seed method. Deleted the database and started again and it works. Now there's another problem. The project also requires a connection to an online database which hasn't changed for most of the project's lifespan. Since my attempts to fix this massive cock up with the app's internal database has led me to remove the Migrations folder, however, I'm now having the same problems connecting to that online database aswell. Specifically the error is informing me that it can't create a database on my local system in the `Program Files\Microsoft SQL Server` folder "because it is in use." This is even more a paradox to me because the path or filename it's looking for this database at isn't referenced anywhere in the 130+ files throughout the entire solution.
I'm not very familiar with using a local db file as you are doing. But is it possible that since you aren't using SQL Server the framework is spinning up a service so it can interact with the SQL file? Possibly when​ you shut down your application it is not shutting down the service process either leaving the file open in the process?
&gt; A more interesting question to me is why are you creating the file if it already exists? - just connect to it. I'm not creating the file; that's half of the problem. It seems like Entity Framework is obstinately attempting to create this file... for some reason... when all my code is trying to do is query the data. &gt; Also, Have you considered SqLite? I used it years ago with good success and AFAIK it's still the preferred solution for localized SQL I haven't ever used it actually but at this point I'm giving it serious consideration. In fact I've also considered just telling the client to stfu and install SQL Express and then use that. Fuck knows it'll save me a lot of headaches.
Thanks a lot for the reply. Right now I'm following C# Fundamentals for Absolute Beginners from Microsoft Virtual Academy. The guy is pretty good. At the moment, I'm still waiting for approval on Visual Studio, I think version 12, with a bunch of addons in order to make it run with everything we need. I already know a little bit of HTML and CSS. I'm not sure what framework version we target, but I'm gonna ask. What do you mean exactly by **what you will be authenticating against**? I know that the users have to connect to the app using the credentials that we use to login to our computers. 
I'm following C# Fundamentals for Absolute Beginners from Microsoft Virtual Academy as we speak. The guy is pretty good. 
There is some good advice here. The only thing i can add is to jump on pluralsite and pay for a month or so. It can be a bit hit or miss but worse case you will always pick up something. N.b i hope you love programming. When you up with a learning curve like this spending 80 hours in a week isnt out of the question.
Then learn C# first. The login part in ASP.NET with active directory is something you can do just by reading a tutorial. Is really easy. Maybe a week to understand it, do it and test it. Is usually just creating the site with the VS template and changing a setting in the web.config xml file. They probably want you to learn C# and see if you can google your way into ASP.NET.
I'm about to take an employment break so that I can spend more time learning this stuff, and these videos look great. Thanks!
&gt; It seems like Entity Framework is obstinately attempting to create this file... for some reason... when all my code is trying to do is query the data. It sounds like you might also need to connect an interceptor and look at the SQL being ran by EF to see if there's migrations or DDL running when it shouldn't be: https://msdn.microsoft.com/en-us/library/dn469464(v=vs.113).aspx Beyond startup and seed methods, if you are getting any drop / create database or table SQL beyond the seed method, you know that EF isn't configured correctly somewhere or it's being misused. Seed classes/methods should check to see if the DB exists first, which is usually DbContext.CreateIfNotExists(), so finding that call is usually a good place to start.
Yes I'm familiar with HTML and CSS so I was trying to make a link between the two and UWP. Thank you for resources, I will check it out.
http://skywardappcompany.com/2017/11/17/popcorn-vs-the-competition/ Here’s the comparison blog!
I don't understand this. I've tried to change horizontal alignment to stretch before and it didn't work. Now when I did it it worked right away. Thank you.
It's better than events as you're using a delegate that comes with the framework, so your library doesn't have a dependency on an external definition. 
http://deviq.com/dependency-inversion-principle/
You're an intern, you're there to learn and it's their responsibly to teach you. Ask them for help!
You might also be interested in Handmade Hero, give it a google. 
You can inject an interface. You can't create an instance of an interface. .NET Core will inject an implementation of that interface at runtime for you though.
I think Pluralsight is a really good resource. If you sign up for a visual studio account, https://www.visualstudio.com/, you get 3 months free access. There are a lot of resources out there for creating login pages. Just remember it's ok if at first you don't completely get it, keep trying and it will click. StackOverflow is an awesome resource. If you have a question someone has probably already asked it. Also, do they have any sample code at work that you can look at to get a sense of their style?
Version 12 is Visual Studio 2013, so quite old but not awful. It does mean you not be using .NET Core which is fine. When you enter a username and password in any system, whether it's email, Reddit, or your PC, the username and password have to be checked against a list of legitimate users. Sometimes the list of users and their passwords* are stored by the system you're logging into. Reddit checks your login details against its own database of users. Windows will check your details against either the local machine or against an Active Directory (companies) or against Microsoft's online authentication service. In a company you usually want to have something called "Single Sign On" which means you have one username and password, often your network one, and that is used in by all the internal web sites and applications. It's called Single Sign On because each web site or application will authenticate against a central service. The central service might expose a web service or REST endpoint and your application has to pass the username and password the user enters to this service. It's actually quite complicated. I added a * above. Passwords are never stored in a database. Their hashed value is stored and the hash of the password enter is compared. This stops hackers breaking in and stealing all the usernames and passwords. If you ever see a press release where the company HAS lost the passwords, then that company is fundamentally incompetent and shouldn't be allowed on the internet. But start with the basics. Get a web page to appear, find out from your people in the team whether there is a central service that you will "authenticate against". Ideally get a contact for the team who manage it and hopefully they will have some documentation too. Get your webpage to show some text boxes, figure out how to get the values in the textboxes back to the server and so on. As the nice person above said, break the problem down. If it still feels too difficult, see if you can break it down again and keep going until you have something you can do or that you need help in solving :) One final bit of information. We have Authentication and Authorisation. Authentication means proving you are who you say you are. This is the username and password bit. Only you know both, so if you get them right, it's you! Authorisation is what you're allowed to do once you're logged on. Can you see the Payroll system? Can you change the salary of someone on the payroll system? These are examples of things you might be authorised or not authorised to do. 
With LibLog you don’t have any actual external library reference. It installs actual code. and it works with most used loggers without any set up. Like magic.
Let's say you have a class that you use to connect to the database. You have a set of functions that your UI will access. So you write an interface, your database class implements it and you inject it. Say a sometime later you decided to use a widely different data store. You can just create a new class that implements the interface and all you'd have to do in your project is inject that one instead. This makes your code more flexible, and also allows you to easily unit test it. You can make a class with the same interface that connects to an in-memory test database and inject it for unit testing.
1. Work in a place where there are coders better than yourself that mentor you 2. Work in a place where you are the best coder and mentor others 3. Don't stay in a place where you're the best coder for too long 4. While jumping on every new shiney can be bad, don't ignore new shiney, especially when it becomes standard (I avoided jQuery, ORMs, MVC, and APIs for too long but went kneck deep into them a few years ago)
This is all because there's no reason for your view to know how or where the implementation of its dependencies are done. This is known as decoupling. We prefer to decouple our layers, so that when we need to make changes to a given item, we reduce the area of impact of that change. 
It's just the fundamental separation of M-V-VM concerns, which I'm assuming you're talking about when you speak of WPF examples. In WinForms, much of this was smooshed together, and to a large extent you can still operate this way in WPF, but the guidance is that your Model layer nor your View Model layer cares about things such as hover text. WPF/MVVM encourages you to be consistent with how the UI is to respond to backend changes. In most cases this means that the UI and backend don't directly reference each other at all, unlike WinForms. So if you want 10 UI elements to respond to a change in some property, you have 10 simple bindings in WPF, but in WinForms you'd be wiring 10 events and setting things manually. Not to dismiss your frustration, this stuff is certainly a challenge. I read it stated once: "WPF makes the hard things easy, and the easy things hard". Hover triggers might seem a bit clunky and verbose right now, but once your whole UI is interaction with your ViewModel via bindings, especially with collections, things will "click" and you'll likely appreciate the ability to do so. 
I don't know why you've mentioned "an interface" without elaborating on why. Could you please elaborate? OPs post makes no mention of interfaces. 
As far as I know there isn't much difference between "injecting" a class and creating an instance of it yourself. They are both injection really. **However, you shouldn't be injecting a class** as it makes it much harder to maintain your views. E.g. If you want to replace the class you have to edit every single view that uses it. Instead, you use an **interface**. Your class then implements that interface. .NET Core then injects that class into any view where you reference that interface. You can now change what class you use without editing the views.
The main difference in what you posted is who created the instance. If it is injected, your DI is managing the creation of the object and could reuse the same instance for every load of the view , otherwise, you are creating the object each time the view loads.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [MSBuild: Targeting Your Needs - Simple Talk • r\/csharp](https://www.reddit.com/r/dotnet/comments/7dm4mm/msbuild_targeting_your_needs_simple_talk_rcsharp/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Bob Tabor? Love that guy!
I disagree. OP should be panicking, hard! The more flailing around and just random random mashing of the keyboard he does the better. Just sweep everything under the rug and blame the issues on someone else, that's my motto.
I would start googling asp.net MVC and find some tutorials on that. The biggest hurdle that you are probably going to have to overcome is knowing which version is correct for you. More than likely the company you work for supports the standard version of .net, not the core version, but I would double check your requirements or ask someone who know what technology you should be using.
Yes, you can always try to reinvent multicast delegates. Though you are limited in that you have to attach both listeners at the same time.
1. You can define as event as an Action&lt;T&gt; if you want. 2. It's better to use the EventArgs pattern (sender, args) because you always have the ability to add more data later. With just Action&lt;string&gt; you can't later say "well the during is useful, but some people also want a request id" without introducing a breaking change.
&gt; Reference types (classes/objects) are implicitly passed by reference, this cannot be overridden Technically, reference types are still passed by value, although what you're passing is a reference. You can still pass objects by reference with `ref`
I meant in terms of priority.... algorithms are a core part of any CS curriculum, usually in junior year
1) "new MyClass" creates an instance of MyClass on the heap, and it will be marked for garbage collection when there are no more references to it. Value types are deleted immediately when going out of scope. 
Yo can work similar to winforms, you can drag and drop "controls" into your xaml window from the toolbar, and double click each "control" for adding code behind logic, or use the properties window similar to the winforms designer. But the XAML strengths are clear when you start using advanced XAML options, for example animations.
If c# is as bad as you are implying, why are you using it? I like the idea of inmmutable variables inside a method, but reading your post looks like c# is "garbage" only because it haven't readonly variables inside a method. 
It is useful if it help in your code. Also, if you are coding more functional than OO, it is really useful.
Can you not use the MouseEnter and MouseLeave events to do this??
WPF doesn't have to follow MVVM though, AFAIK what he is describing is totally possible in WPF. Should he follow MVVM? Probably, but he does have to. 
Technically correct, but more detail than I wanted to cover
You can use the same functional pattern on a plain old type, though, without wrapping it in a `Maybe`. Essentially all reference types are already Maybes.
By algorithm I'm lumping together all the code that happens inside a function. What you're talking about is a specific set of algorithms and theory which is more maths than programming (They're siblings I know). It will cover basic sorts, data structures, traversals, etc. It's fundamental stuff. Also fairly low value for the last 20 years. There are plenty of more advanced algorithms which all fall under that area, I'm not sure if they are covered during the first year. Caching is always a good one to get your head around for example. I haven't been to college in a long time :) Most people probably want to know how to characterise the performance of those algorithms (or rather their implementations), compare the BigO, but (almost) no one actually writes a BST any more, except by accident or for fun. It's complicated by the definition of pattern. A for loop is a pattern just as much as pub sub is an EIP, the skill really lies in understanding where they are appropriate, how to glue them together and what to do in the edge cases. The complexity almost always comes from the internals even though you're constructing that from a bunch of internal patterns/constructs/algorithms (used interchangeably). You could learn the repository pattern in about 3 minutes but actually implementing that against a real database is more challenging. Rx implements the Observer/Observable pattern but again, the devil is in the detail. 
Good tut for Asp.net mvc is on udemy by Mosh Hamedani. It can get you up to speed fast
Commenting the code to indicate that a variable is constant would be worse than just leaving it alone I think. Constants only make the code easier to reason about if the programmer can actually rely upon them. Otherwise, they are often misleading. Comments don't actually address the real problem that runtime constants solve.
Correct me if I'm wrong, but isn't "let" only usable within certain specific contexts (e.g. LINQ)? Putting that aside though, I don't think the point about "nobody using it if it is more than three letters long" is fair. Look at C++ for example. Lots of people use "const" all the time in C++, and it is 5 letters long, so that disproves your point right there.
I mean you should be taking that up with Resharper...
One reason I can't easily explain how to fix this is because Microsoft violently murdered something like 6 versions of WPF over the course of 2-3 years, so I'm not even sure what is "right" when it comes to complex animations anymore. Let me explain why WPF is "better" than WinForms, then come back to what I mean. WinForms has no inherent support for an arbitrary separated Presentation Model. That is a nerdy way of saying it's hard to implement a pattern like MVC or MVVM in Windows Forms. There is some limited support for binding some control properties to a handful of types like DataSet, but you are mostly on your own if you don't want to use those. WPF is more difficult to use if you *don't* use a presentation model pattern, and it assumes you use MVVM. It allows you to more easily bind to an arbitrary object graph, rather than "things that implement a very complicated interface for binding". We could spend hours demonstrating the nuances but it just means when you have some UI action you need to take, you think about it differently in the two frameworks. * **WinForms**: "When the ListBox.SelectedIndexChanged event is raised, determine the selected item. If it is non-null, update each of these text boxes with some information from that item." * **WPF**: "When the user selects an item, display it over here." They're both doing the same thing, but WPF is a lot more hand-wavy about the details and for complex applications, this is ideal. For simple UI interactions like, "Hide this element if SelectedItem is null", it's very easy and clear how to use binding with converters to accomplish the goal. For more complex interactions, WPF is a victim of "progress". In WinForms, as you said, you're not tied to any kind of pattern so you just handle a MouseHover event and kick off some animations. You could do that in WPF, too. This is a UI-only interaction, so there's not a lot of reason to get the ViewModel involved. To be clear: if you're JUST changing UI state, events in the code-behind might be the easiest way to accomplish what you want. Some people don't feel like that's "right". They saw some slide decks about how WPF would make them have to write "zero code-behind" and they internalized this as "writing code-behind is wrong". Here's my opinion: people who don't finish their projects on time are wrong. Code-behind is a tool that can be used when the XAML solution feels convoluted or isn't obvious. If it proves hard to maintain, then you should consider other approaches. But if it works and isn't a maintenance burden, don't waste your time "fixing" it. Now let's say you want to do it in XAML. You have a few choices, and I got off the WPF train before the dust settled. Triggers were the first "zero code" way to accomplish UI reactions. I don't remember exactly the XAML, but suppose you had your set of animations. [This page looks like an OK example.](https://docs.microsoft.com/en-us/dotnet/framework/wpf/graphics-multimedia/how-to-trigger-an-animation-when-a-property-value-changes) It seems straightforward to me: "When the IsMouseOver property changes to True, start this animation. When it changes back, start this animation." The animation can affect as many elements as you'd like. Before WPF was widely adopted, MS decided to get people hyped for Silverlight instead. Feature development on WPF ground to a halt as they adopted a very aggressive cadance for Silverlight, because they desperately needed to kick iOS's ass. Silveright brought us the "Visual State Manager", which was a different way to perform triggers. There were some problems with triggers I don't remember because it's been almost 10 years since I gave a flip. [This is an OK introduction](https://blogs.msdn.microsoft.com/wpfsdk/2009/02/27/the-visualstatemanager-and-triggers/). Curiously, properly using VisualStateManager involves implementing code-behind event handlers so you can call VisualStateManager.GoToState(). Silverlight died fast when MS said, "Well, we think HTML5 apps are the future", then denied they meant it, then 2 weeks later said, "Silverlight is discontinued, you should write HTML5 apps." Some people ported VSM back to WPF. Through both of those periods, an alternate approach used "attached behaviors", which sort of sideways came into WPF through the Expression Blend libraries. It's hard as Hell to find tutorials that make heads or tails of these, but they abuse WPF attached properties to make sort of generic UI actions that you can "attach" to a control. To use one of these, you'd write an attached behavior that kicks off an indicated storyboard when its target control's IsMouseOver property changes. Then you'd write some XAML like: &lt;Button AnimateStuffBehavior.RunThisStoryboard="{StaticResource myAnimation}" ... /&gt; By the time Silverlight fully died, I got tired of MS flushing my training down the toilet and got a job using Xamarin to create iOS/Android applications. It was "a lot like" WPF. It has triggers and behaviors and all that noise, but due to a lot of limitations at the time our project could not use XAML so I didn't get a lot of experience solving those problems. Then Microsoft bought Xamarin. Sigh. I don't think anything new arrived through Windows Phone 7, 7.1, 8, 8.1, "Metro", "We can't legally call it Metro", "Modern Windows Applications", or UWP. There's no conclusive evidence anyone outside Microsoft ever wrote more than "Hello World" on those platforms, even though MS offered to pay people for it. Something something rats and sinking ships, right? # TL;DR: Try not to be in the mindset "XAML is for artists and designers". When you write a WinForms app, don't you open the designer window and move things around? XAML is your WPF designer window. It CAN BE edited by an artist using fancy tools, but you can also hack out a UI in it yourself. Xamarin.Forms is unifying with UWP in a process that'll probably complete next year. So that means the "right" answer will be "Whatever UWP/Xamarin does for this", because they are the things that murdered the thing that murdered the thing that murdered the thing that murdered WPF. That answer right now seems to be "Triggers when you're in a hurry, Behaviors when you want to look elegant." This will be true until 2019, when MS decides to replace UWP and Xamarin Forms with a new framework that has minor API changes. So the right solution is to learn Swift. ;) (I'd love for someone to correct my cynicism and bitterness with an actual right answer!) 
&gt; The main purpose is to allow the compiler to better understand and enforce the programmer's intent. There are better ways to make it easier to reason about. Better ways than having built in support for constant qualifiers checked by the compiler? How could you have a better way of enforcing a constant than by making the compiler check it for you? That doesn't make sense. My point was that simply not changing a variable doesn't give the programmer any immediate indication that it won't change. The programmer will have to read the code, which is wasted time. &gt; All it proves is that I don't need syntax sugar. Constant qualification is not mere syntactic sugar. Constants make it easier to reason about the code. Compilers can of course figure out which variables change and which don't. The purpose of constants is to make the code easier to reason about for *the human*, more so than for the compiler. &gt; If I can't tell at a glance whether or not a variable is assigned to again then the code needs to be refactored. Regardless of how well refactored code is, adding constant qualifiers where they are conceptually appropriate will always make it easier to reason about. Refactoring things into smaller functions is of course good, but constants still make it even easier to reason about regardless. Also, long functions will always exist and constant qualification makes them easier to gradually refactor when you encounter them in legacy code. &gt; I'm sorry, what? No, they can only change as the result of an assignment, and those are pretty easy to spot. Yes, they can only change from assignment... *and you have to constantly watch for where those assignments occur*. You can't know for sure whether or not a mutable variable referenced in one spot in the code changed without reading the rest of the entire scope. &gt; So... have less variables in scope? Regardless of how many variables you have in a scope, constants will always make the code easier to reason about. There is no point to not including the feature in the language. Having it helps. &gt; The people who don't already code 'the right way' won't use this feature in the first place. Totally irrelevant to my point. I said that large functions will always exist in legacy code and that constants enable you to pin variables down in that legacy code as you refactor it, and you totally ignored that point and argued against a straw man instead. Also, not including features that make it easier to reason about code, just because not everyone always programs in "the right way" is irrational and counterproductive. &gt; Yeah I bet the refactoring methods with and without this feature are exactly the same. Nope. Constants make it easier to pin down what is changing or not, making it easier to reason about the function and hence easier to refactor. &gt; Perhaps this 'C# community' is 'totally oblivious' for a reason? Maybe the reason is because the concept isn't, actually, valuable in any way? No. The concept is very valuable. Ask programmers from the function programming language communities. In the functional programming communities the immense value of constants is universally recognized. The C# community has a failure of imagination in this respect. &gt; No I don't think this holds true because I have and I don't. I find it hard to believe that someone who has truly grasped functional programming would not understand why immutability makes it easier to reason about things. I suspect that you are *lying* here in order to try to undermine my point, possibly. &gt; Yes I do: It's exactly 100% as difficult to understand as it already was. Utter nonsense. Constants always make code easier to reason about. The more constrained a system is the easier it always is to reason about. This is a law of nature and of logic. This strongly reaffirms my suspicion that you've never grasped the value of immutability, and probably haven't worked much with function programming, or at least never truly understood the point of it. &gt; Now before you write another rant in reply, understand that I don't really care if this feature exists or not. If it is added I will probably even use it. The difference here is that I understand it's just some compiler sugar. It won't magically make bad code good or turn shit programmers into great ones. It's a boring solution to a non-problem. It isn't compiler sugar. I have no idea why you're saying that. Constants make code easier to reason about. They are not merely syntax. &gt; Keep down this path and they'll turn C# into C++, where people invent elaborate mechanisms to avoid doing a thing instead of just not doing it. Merely not changing a variable is completely besides the point. The point of constants is to make code easier to reason about at a glance. The "to avoid doing a thing instead of just not doing it" characterization is a non-sequitur. 
WPF stresses separation of concerns (as already noted), but it goes further than that as in you can have a separate designer or team working on the UX in Blend. In order to do that, the UI markup needs to support more than what previously required code-behind events. That said, for every markup option in XAML (at least that I know about), there's a corresponding code option for the same. Suddenly though things will start to be more like Windows Forms with the convoluted object creation and wire-up. 
How about you "get the stick" out of *your* ass instead? I am stunned by the overreaction to my post from some of the people here. Such hostility. I am merely expressing my frustrations with the language, for the lack of a feature that is exceptionally obvious. I never said C# wasn't valuable or anything like that. If I want to be passionate in explaining my feelings on a language feature then I will be. Downvote me all you want. I will always stand on *principles* over popularity. My frame of mind when criticizing a language is completely separate from my frame of mind when doing real project work. When doing real work, I simply focus on creating as much value as I can as effectively as I can and I completely ignore ideological constraints. This attitude you guys are giving me is unfair. I was expecting a more constructive response from this community, but I guess I was wrong. I thought you guys were better than this.
I'm using MVVM with winforms and it is working fine. Im using ReactiveUI and most controls works with binding, I can bind properties like visible or enabled, or even Image in a PictureBox control, for example, and if a control can't bind a property, I can simulate the binding using observables. Yes, there is not support for binding from another control, but I don't need something like this on my projects.
Thanks Ryan. Good to see someone else on here that has grasped the value of immutability. Unfortunately, many of the other users on this subreddit are now going on an irrational witch hunt because their egos have been besmirched because someone said something critical of C#'s design. They're down voting you now. **Apparently, only opinions that align with existing C# ideology are permitted here**, according to many of these users' behaviors. It truly blows my mind, in all honesty. I was expecting a more constructive response. If anything, everyone is strongly reinforcing my suspicion that many in the C# community have not done much work with immutability and are too stuck in a paradigm to explore the idea more in an intellectually honest way. I have little patience for people who lack intellectual curiosity, or who can't think based on first principles properly. I'm glad at least some people are standing on principle, instead of distorting reality in whatever way is necessary for them to find no fault in the current status quo (as many here are unfortunately doing). This is a common human behavior though. People will bend themselves in the wildest and most irrational contortions if it will keep the status quo and the currently standing authority in place.
Well, IMHO your post looks like more like an over-reaction. If you want to be "passionate" in your explanation, don't expect non-passionate responses.
What, I'm not Scottish enough for you?
There isn't anything inherently wrong with writing ViewLogic in the codebehind file of the Xaml file, but if you start to do that you need to make sure that you aren't putting other logic there too. (Its easy to be sure if you never put any) If it's something common, you might want to create a behavior that you can attach via Xaml. 
To quote my own original post: &gt; It's only C#'s ecosystem (e.g. Unity game engine), fast compilation, and expressiveness (e.g. LINQ) that has kept me from switching to a different language. Also, know this: The way that I talk and think when analyzing the design of a language is completely separate and different than the way I talk and think when I am working on a real project. Language design is open game for biting criticism of the language. Playing devil's advocate and criticizing things strongly helps to spur progress. In contrast though, when I work on real projects I always completely 100% put all ideology aside and simply do whatever it takes to create maximum value with the language as it currently stands. The instant I start working on real project code my ideological concerns instantly disappear and play zero part in my attitude or my work. Real work and theory are two separate frames of mind for me. **C# is a very valuable language for creating value and has a great ecosystem and many great features. Me criticizing it does absolutely nothing to diminish that.** Nothing I said implied that C# is garbage. That is overreach. I only strongly criticized *one* specific aspect of the language as being terrible. I am tired of people in this thread not realizing that, and acting like I'm some kind of stuck up prude. **Pragmatism is my bread and butter. I always think first in terms of creating value for my fellow human beings, and only second about ideological concerns.** Better designed languages allow people to create more value with the precious time they have on this earth. Regardless though, I always put ideology 100% aside whenever I do real work.
Alternatively, split the core logic to a library(dll file), encrypt that dll and ship it with a decryption program that decrypts the dll, loads it to the current app domain and runs its main method. Of course, people could share that encryption key and defeat your security mechanism. Ultimately you're trying to create a DRM, and there's no such thing as an uncrackable DRM. 
Indeed there is no harm from adding extra safety. It would only be a net gain to add it. Even if references can't be made totally immutable, knowing that what they point to never changes is still valuable. Deep immutability would be even better though.
Ah yes the weekly crime procedural method of programming.
Yes, but if you are trying to go the functionalway, the maybe/option help for coding funcitional, for example: if (someValue != null) { // do something with someValue someValue.Init(); } Functional way with Maybe/Option: someValue.Do(x =&gt; x.Init()); 
The largeness or smallness of a function is not the only relevant point, nor the only reason why constants are valuable. Constants are still very valuable even regardless of how good a job a programmer does of refactoring their code. Regardless of how small a function is, constants will always make it easier to reason about the function. Furthermore, large functions in legacy code are easier to refactor when you can pin down the variables using constants. Knowing what parts change (and when) makes it easier to spot function splitting opportunities, etc.
 public static void Do&lt;T&gt;(this T x, Action&lt;T&gt; action) { if (x != null) action(x); }
I understand the frustration, but IMHO some statements looks like overreaction. Also, thanks for the hack.
Yes, but it is not the only one useful extended method in the Maybes, at the end you will "re-invent the wheel".
&gt; You can also just not modify the variable. This point rests entirely upon a logical fallacy. Merely choosing not to modify a variable is totally irrelevant to the purpose of having constants. The compiler could always determine whether or not a variable changes more than once in a scope *on its own* (in many cases, at least). The purpose of constant qualification is primarily to make the code easier to reason about *for the human*. Constants make code easier to reason about, in that any programmer who sees a constant can instantly know that the value will never change again, and hence that they no longer have to trace its behavior in the code anymore. All arguments based on saying "oh but you could refactor the function" or "oh but you could just not modify the variable" and so on are *irrelevant*. Constant qualifiers make it easier to reason about code **regardless of how well factored that code is**. Adding proper support for constants can only make it easier to reason about code. Wishful thinking and just telling people to write better code will always be irrelevant to that point. Fundamentally, all constraints make it easier to reason about things. The more constraints you know about something, the more you can logically conclude about it. **This is a property of nature and a law of logic. No amount of attempted diversions of attention or talking past the point can ever diminish that fundamental and elemental fact.** 
I'm saying `Maybe` itself is a reinvention of the wheel.
&gt; You certainly made a lot of bold claims about a language you haven't been using for long and admittedly have a lot to learn about. My C# skills are in fact intermediate. I am *proficient* in the language. I have worked on several commercially released C# projects and have written quite a lot of code in the language (thousands of lines at least). I was simply having the humility to admit that, even despite all the code I've written, I shouldn't assume that I know everything about the language. Why am I being punished for that humility and honesty? Why am I being punished for displaying integrity? I just haven't seen a need for implicit conversions yet in the specific projects I was working on, since most of the core libraries were already in existence and I wasn't defining any low level types. That's why I said what I did. There are lots of ways to do things in languages and in libraries you know. Not everyone sees every feature of a language, *even when they work in it for years*. Specific projects are often completely missing entire language features, by pure chance. **Most importantly though, the fact that my knowledge of C# is not perfect does nothing to diminish the fact that I already have more than sufficient information to conclude that the lack of proper constant qualifications was a mistake. One does not need to master an entire language in order to make strongly justified statements about specific aspects of it.** I thought about it based on logical and fundamental principles, and based on that I concluded that the lack of constant qualifiers is suboptimal. **I do not need to master a language to be able to say that.** I have seen different languages and have plenty of ground upon which to state my distaste for certain language flaws. Your point is thus irrelevant. **The fundamental principle, that constants make it easier to reason about code, will always stand firm regardless of how much or how little experience in the specific language I have.** And besides, as I said, I have quite a fair bit of C# experience. You are assuming that I have less experience than I do, based on very insufficient evidence. Even when someone knows a enough to be proficient, it is still rational to assume that they have "plenty more to learn".
Well, it is only a way to avoid nulls. If you have 100% control over nulls, yes, you don't need maybes, but unfortunally you cant be sure when an uncontrolled null will appear, or when you forget to check for a null value. If you are not using Maybes, you can forget to check for a null value, but if you are ysing maybes, you are "forced" to work with "optional" values.
My methods are **not** too long. **I always proactively and aggressively refactor my methods for maximum clarity and expressiveness.** Your conclusion is unjustified and premature. Regardless of my own code though, **I often find myself having to deal with legacy code written by other people, which often includes insanely long functions**. As a pragmatic person, who cares about maximizing the amount of value I create for my fellow human beings per unit time, I would really appreciate having better immutability in C# in order to make variables easier to pin down and reason about. I see this theme repeated over and over and over in this thread: "But you can just refactor big functions!! Why are you such a big meanie butt-face TheFountainOfDoof?!" I then subsequently make the counterargument that long functions will **always exist in at least some people's legacy code bases written by other people**, and also that **constants make code easier to reason about regardless of the size of a function**, and then you guys consistently just ignore that point entirely. It is frustrating. I am tired of people talking past me instead of actually acknowledging my real points in an intellectually honest way.
Yep, the #1 myth in C# that I have to constantly remind others about that the reference value is passed, not the reference
&gt; just don't reassign the value if you don't want it to change, or make it a property without giving it a set accessor, or make it a return value of a method in a static class. It is of course possible already to keep things immutable inside classes. The problem is that local scopes don't allow readonly variables (only classes do), even though this restriction doesn't make much sense when you consider the actual fundamental logical principles in play. The readonly keyword in C# suffers from arbitrary restrictions that prevent it from being used in all the contexts that it logically should be available in. &gt; why is this even an issue? just don't reassign the value if you don't want it to change Just not reassigning the variable does nothing to diminish the fact that you have to still continue tracing all the behavior of each and every variable inside a scope. The purpose of constant qualification is to make it so that the programmer can instantly know that a variable will *never* change, and thus that it will not be necessary to carefully watch out for any other place that the variable might be changing inside a scope. Constant qualification massively reduces cognitive load, once its impact is truly grasped. You have to think in terms of invariants in order to get value out of it. Merely having it in the code is not the valuable part. The valuable part is how it enables a programmer to think about the behavior of code with much greater clarity and deductive power. It's kind of like mathematics and proofs. It let's you *know* that the constraint won't ever be violated. Merely following conventions or choosing not to change something (in contrast) accomplishes absolutely nothing in this respect. You can only instantly and reliably perceive invariants if the language *actively* supports them as a language feature.
I'm not 100% sure which side your are trying to argue in favor of here. Do you like constant qualifiers or dislike them? If you like them, like I do, then I agree of course. Constants are indeed way easier to reason about. If, instead, you are saying here that the act of merely keeping track of which variables are mutable and which are constant adds more cognitive load than what you gain by having constants available, then I must strongly disagree. With mutable variables, you must constantly stay aware of each and every variable, and also when and where those variables might change and interact with each other. In contrast though, every time you see a constant you can immediately hold its value fixed in your mind, thereby making it much easier to reason about and reducing your cognitive load. The mental overhead in keeping track of which variables are constant and which are is, in contrast, negligible compared to the huge value you get form having proper constant qualification available in a language. 
&gt; I am tired of people talking past me instead of actually acknowledging my real points in an intellectually honest way. That is likely because your post was not intellectual in the first place. It was an over-dramatized rant with a few valid points. But having the local readonly variables feature will not solve the issues you have. You will still find insanely long functions in legacy code, functions with very bad code, local variables re-assigned constantly. The suggested feature would not change this at all. It would be a nice feature, but it's definitely not as important as you make it out to be.
Using let for local variables is a C# proposal. It is not on the roadmap yet.
&gt; many of the other users on this subreddit are now going on an irrational witch hunt because their egos have been besmirched because someone said something critical of C#'s design. &gt; Apparently, only opinions that align with existing C# ideology are permitted here &gt; If anything, everyone is strongly reinforcing my suspicion [..] and are too stuck in a paradigm to explore the idea more in an intellectually honest way. &gt; I have little patience for people who lack intellectual curiosity &gt; instead of distorting reality in whatever way is necessary for them to find no fault in the current status quo (as many here are unfortunately doing). Wow, you're a drama queen. And ironically you're behaving the way you blame others do.
&gt; I'm using MVVM with winforms and it is working fine. Im using ReactiveUI... What I meant by "no inherent support" is "you need to glue a secondary framework on if you want to use Presentation Model", which is what you're confirming. My experience on newbie forums is this means I often meet people who are 10-year-veterans and have no clue what Presentation Model is. When they see an example, they scoff and call it "architecture astronomy". This is part of why some 10 years later I still see almost zero WPF questions: it was deemed "too hard" by people who had spent decades mixing presentation and logic. 
&gt; As far as I know there isn't much difference between "injecting" a class and creating an instance of it yourself. They are both injection really. There are a few differences, but let's start at the beginning. In neither case are you "injecting" anything. One is instantiation of a concrete type using new and the other is receiving an injected instance. DI is about being fed dependencies rather than requesting (Service Locator) or creating (new) them. The injected instance is defined by your DI (Dependency Injection) configuration and there are a variety of options. First it could be defined as a Singleton, so the same instance will be injected each time. In OP's case, if the registration for the type was defined as Singleton he would have a new instance in a and the Singleton instance in the @inject variable. Second, the DI container will construct the object for you. This means if it has a constructor that takes half a dozen dependencies, the DI container will take care of populating those. It's possible that using new will create an object using its parameterless constructor and the DI would inject one created with a constructor that took parameters. So in that case they would differ. Finally, you're right about the interfaces. It's better to register an interface and have the DI framework decide what concrete type to inject. This mostly helps with testing, although that's actually a long conversation in itself. The default behaviour though, if there's no configuration, I believe is to just construct a new instance. It will probably error if there are multiple constructors.
I believe part of that is on YouTube as well. I remember seeing an MVC video by him last week while I looked for similar tutorials.
The thing is, OP is not asking about MVVM or what the best architectural model is for application. He is asking "Why can't I do this thing that I did in Windows Forms in WPF?" And the answer is not "Because WPF follows MVVM." The answer is "You totally can do that thing in WPF in almost exactly the same way as you can in winforms, the only difference is that the event name has changed to MouseEnter/MouseLeave and the property name for background color has changed to Background."
IMHO, both need a framework, you need to implement the INotifyPropertyChanged for both, and the big difference is that you need to set the bindings in the code behind for winforms.
Yea, but it isn't full tut, just parts of it. You can download it from rutracker
What you are describing are declarative and imperative style of programming. You can use triggers (declarative) or you could write event handler code (imperative) to achieve the exact result. Declarative style specifies what you want to achieve and imperative style specifies how you want to achieve it. You can think of XAML as a declarative programming language that interacts with .NET in a different way from say, C#
&gt; I think you need to take a step back and ask yourself if you're not over-reacting just a tad bit. I think the same could definitely be said of you and of certain other people in this thread as well. I have simply expressed my frustrations with a missing feature in the language, a feature that is *extremely basic* and fundamental to the expressiveness of any programming language that supports immutability, and hence a feature that is extremely bizarrely absent in C#. Lack of expressiveness wastes my time. **Life is precious and short, and I am freaking sick and tired of wasting so much of that valuable time just because the language bureaucrats of Java and C# have gotten stuck in narrow-minded irrational paradigms.** I'm tired of other people placing inane and misguided constraints on what I can and cannot do in my own code, especially when the feature is very basic and obvious. The widespread nature of the Java and C# ecosystems makes them hard to avoid however. **C# is of course a very valuable language and I like many of it features.** I am entirely a pragmatic person. **I care about creating value for my fellow human beings above all else.** I never allow ideology to interfere with my work and with creating value, when I work on real projects. Let me tell you something: The way I talk and think when criticizing a language or library's design is totally separate and different from how I talk and think when I work on real projects. **When I work on real projects I always think in terms of maximizing the value I create per unit time for my fellow human beings. In real projects I always ignore ideology and simply do what is best for the project. Nonetheless, flaws in languages and libraries waste a lot of my time.** You can downvote me all you want and yet I will stand firm and unmoving. I stand for my principles and for what is fundamentally true based on evidence and logic. **I will never apologize for my passion for making the world a better place and for solving existing problems.** Passion is empowering and liberating. It adds color and interest and motivation to life. Decisiveness is necessary to truly fix the long standing problems of society, regardless of whether that is in programming or any other context. One must make bold claims and stand firmly for what the actual evidence and logic indicate is true. **Truth is not determined by whether or not people find it offensive.** It is determined only on the substantive merits and evidence. **If I see something is wrong in the world, and I have the principles to back it up, then I will make a stand for it.** I don't care how many feathers it rustles in the status quo. I don't care how popular conformity to one specific idea is. I stand for my principles. Truth is not decided by popularity. It is decided by principles. Fundamentally, constraints always make it easier to reason about things. The more constraints you know about something, the more you can conclude about it. Constant qualification is just one instance of that more general phenomenon. It is a fundamental law of nature and of logic. I do not understand why it is so difficult to get people to acknowledge something like that. Irrational beliefs frustrate me. The more obvious the problem is, the more frustrating it becomes when people twist themselves up in knots to rationalize design flaws, flaws that are obviously wrong if you actually think about them from first principles. **Most of all though**, I cannot help but notice that everything in your reply here is oriented towards making an **ad hominem attack** on my character **instead of being oriented towards a substantive and constructive discussion of the actual logical points I made** in my post. Everything in your post is about your own personal dislike of how I worded things and who I am as a person, and not about the actual substance of anything being discussed whatsoever. Isn't a person of science (or engineering) supposed to be a person who addresses the actual *substance* of arguments instead of being distracted by irrelevant superficial details such as how passionate the person making the argument is or what their personality may or may not be like? Yet, despite your post being the one **most irrelevant to the actual substance of what is being discussed here**, it is the one that has currently been upvoted the most by far. That really just sums it up, doesn't it? **It really shows where the real spirit of the community here is apparently**. A person posts about a constructive feature that would add lots of value to the language, and gets dismissed not on the substance, but based on character attacks and irrelevant logical fallacies and lack of imagination. Suite yourselves though. I for one have experienced first hand the immense value that truly good support for immutability adds to a language (e.g. in functional languages) and it has opened my eyes to a new level of clarity and ease in programming. If you wish to embrace ignorance and slap down any criticism based on **logically irrelevant personal factors**, then you just go right ahead. As for my own part in life, I will continue advancing my own conceptual clarity and knowledge. I will always perpetually adapt, relentlessly evolving my mind, and endlessly enhancing my understanding of the real principles of nature and of computer science. I will not be stamped down by the oppressive force of conformity and premature assumptions. I will not be distracted by irrelevant factors and psychologically manipulative ad hominem attacks. As always, I will continue living a life of pragmatism. When the library ecosystem for a project favors C#, I will still use it despite all its flaws. I will put ideology and fanaticism 100% entirely aside, **as I always have**, and focus on creating value for my fellow human beings. However, **I will never allow the status quo and complacency to blind me to flaws in the system. I will always stand with my principles.** Even if the whole world stands against me, if the *substantive principles* are with me, then I will remain firm and unyielding in my pursuit of bettering my life and all the systems that interact with that life. I am profoundly tired of the unfairness and groupthink that characterizes so much of society. It makes my frustration burn hot like coals and fuels the so called "rants" that you have seen here. I stand for my principles, always, though. I will not bow in the slightest to the forces of ignorance, not even if it means sometimes being perceived as "impolite" in order to make an important point. I have a burning passion for life. **Why can't you respect that? Why can't you address the substance of my argument instead of attacking my personality?** I am stunned. I have far more constructive things to do than to listen to this endless stream of lack of imagination and irrelevancies in this thread. If this is how the community reacts to this, then perhaps I should **not** share this kind of interesting news with you (the community) in the future, since it apparently just wastes my time and distracts from creating value for my fellow human beings. That way, you can have a nice boring list filled with things that don't question any of your existing assumptions, just like you apparently would prefer. Goodbye, for now. Continuing to talk here seems like probably a waste of my time at this point. So unproductive. I was not expecting this.
Yes, you can even see the code on g.cs
I wasn't trying to attack you, but I do think you are over reacting. There is almost always something programmers like about one language that is missing in another. It's just the nature of the business. &gt; There are only two kinds of languages: the ones people complain about and the ones nobody uses. \- *Bjarne Stroustrup* 
Another exercise site that focuses on mathematics is projecteuler.net
It's possible to have issues with something and still phrase them in a less dickbaggish way. If you want constructive responses, be constructive in your "criticism" and make it actual criticism rather than vastly hyperbolic bitching.
lol your "that guy" every dev has worked with. 
I like constants. I sure do. And they absolutely increase the readability of code both for humans and especially machines (think resharper, code linting etc). But if the keyword "let" is going to be used as a new type of constant, please don't. We already had "var" turning in to "let" (meaning not constant) and const (meaning constant) in javascript, and as many C# devs are web developers, the keyword "let" as a constant in C# (as specified in OPs link) would break my developer heart. Or at the very least dramatically increase the number of WTF's per minute (c).
The only solution would be to keep the const keyword and make it possible to define local readonly variables with that. Make it work for non-compile time-resolved stuff.
I️ believe that would be in the foreaches (x,y) just below // draw all lines If you wanted it to draw every other pixel for instance instead of ++ do +2 Sorry on phone or I’d be more specific 
It's probably a threading issue. Make sure you instantiate your GameWindow derived class on it's own thread, and only do your OpenGL stuff from within that class, or on that same thread. 
You could but its wonky and doesn't always work for some reason. I assume alot of the triggers mark the event as handled before passing it to the next handler.
Weird, I've never had any problem with it behaving like I wouldn't expect it.
Thank you for your comprehensive reply, it helped alot. But what about things where you simply have the UI and Backend reference each other. Extending in the above example, it is now a pain to add it so that I want the program to start preloading user data when a button is being hovered over. I'm also confused as to why WPF have some controls have a certain trigger while others don't. Wouldn't it make more sense to have a literal blank control where you can add anything to it, and attach any kind of triggers to it as you want, similar to how I can add click events and drag events to picture boxes in windows. ( Or can you actually do this is WPF too?) 
Searching up code, there's a bunch of response on, "no you should set this up as a trigger in XAML than an event in c#" And why would I need to create the behavior in XAML be any better? Couldn't I just easily make it in code behind and attach it in XAML. (Click = "Btn_Click")?
Hey thanks for the response. I dont see // draw all lines ? What line are you on? I see foreach....hmm
okay so what I would do in this situation is create a struct public struct QuestionAnswerPair { public string question; public string answer; public QuestionAnswerPair( string question, string answer) { this.question = question; this.answer = answer; } you can make a pair by calling QuestionAnswerPair mynewpair = new QuestionAnswerPair("this is a question string", "this is an answer string"); and you can put them in a list if you want: List&lt;QuestionAnswerPair&gt; mylist = new List&lt;blablabla&gt;(); you can load them with: QuestionAnswerPair myqapair = new QuestionAnswerPair("blabla", "lolol"); string question = myqapair.question; // the string question is now set to "blabla" string answer = myqapair.answer; // the string answer is now set to "lolol"
It's by design, but yeah it's not always obvious. I made this years ago: [Class hierarchy for WPF](https://kittencode.files.wordpress.com/2013/06/wpf1-2.pdf). It won't help you understand who exposes what properties because I would never have fit them on, but you can follow the hierarchy from Object all the way down. Almost everything has the same ancestors and if you look up those elements you'll see what they expose. Everything below will inherit the same. It becomes more logical with experience. You can actually do everything in code. You don't need to do any XAML at all. In fact while all the answers here talk extensively about how it was designed with separation of concerns in mind and MVVM, it really wasn't. If you take a look at [The Microsoft WPF samples](https://github.com/Microsoft/WPF-Samples) almost all of them are fairly light on XAML and have tons of code behind. Don't ignore MVVM though, it gives you a lot of benefits. As does avoiding code behind and using styles and templates. Don't get too caught up with being an MVVM purist though because there are bits of the framework that just don't quite fit MVVM. 
MVP worked well with Winforms, but I get what you mean. Everyone built their own data binding middleware. I enjoyed your post, it sums up a lot of my experience with it. My advice to anyone doing UI would probably be to assume the framework will be dead in a week so don't embed anything that isn't purely UI in it. Keep that business logic elsewhere. And never ever buy a control suite. Oh and keep it simple. The same has been happening in the web world too. There was jquery UI, then bootstrap, then Angular 1, the completely different Angular 2, React shat on all of them and Vue is gaining market share. That's just the client end and I've missed 30 others! One company I won't name has changed their web strategy so many times in recent years the developers just ignore it and do wtf they like now :) 
should use a dictionary tbh of `Dictionary&lt;string, string&gt;` key would be the question or a key value pair KeyValuePair&lt;TKey, TValue&gt; 
not going to solve your homework for you, but instead of `StreamReader quoteReader = new StreamReader("Quotes.txt");` id suggest File.ReadAllLines() detailed here - https://msdn.microsoft.com/en-us/library/s2tte0y1(v=vs.110).aspx you can also do File.ReadAllText()
No, the events are not fired concurrently. No events fire their handlers concurrently whether they're WPF RoutedEvents or just normal .Net events. As an aside you can make an event fire each handler concurrently by getting the invocation list and iterating over it, but it goes horribly wrong if any of the handlers do anything that has thread affinity with the UI thread. The problem usually pops up where you have a hierarchy of controls and something nabs the event and marks it as done. One work around is to use preview tunnelling events, but that can be icky too. The event model is sort of clever but honestly it still catches me out more than I'd like to admit.
No worries... Btw,. Thanks for helping me out on the jsonb issue. (meta-howes). Have a great weekend. Best, Jon
Not the original replier, but, I'm thinking 318-322? The loop for x &amp; y: for (int y = 0; y &lt; image.Height; y++) { for (int x = 0; x &lt; image.Width; x++) { Application.DoEvents();
&gt; Then I got a wild hair up my ass, dumped a packet to a file before sending it, and then inspected it in a hex editor. Sure enough, I'm sending big-endian integers. In visual studio when debugging you can use memory window to inspect data in memory so no need to dump to a file. Also how are putting the integer in the package?
Yes, .NET generally uses the endianess of the system it's running on, including `BitConverter`. `BinaryReader` is always little-endian, however. - what version of .NET are you running on? - what OS/system are you running on? - what is the code that is doing the conversion (example)? - what is the input and output you're seeing (example)?
Hey! Oh I see it now. Tried it with =2, not much of a difference though....can I put even higher numbers for less fill? Trying it out now.....one sec
So there are two functions to change. (I have run it, I am on mobile). First is the scan() function, and there are two places to play around here. This is the function that converts an image into black and white, and so this controls where mouse clicks will be when drawing the pixels. For each pixel it checks threshold values, if it hits then black, otherwise white. You can play around with the threshold values in the if statement, it will make the picture lighter, less black. Next option is in scan() function is the for loops. This checks each pixel, if you change the y++ and the x++ to y=y+2 and x=x+2 it will skip checking those pixels. The problem with this is that it will leave the array with null values instead of 0 or 1. So what you will have to do is add your own for loop just after the array is made where you set each value to white first. Then none will be empty. The other place is in the draw() function. Here it does again a for loop but this time to place the mouse and then click. Do something similar to adding two instead of incrementing by 1 (that is what ++ does for a number). Then you can skip some pixels. Oh, you will want to be careful that you don't access an array outside of it's range. Check to see if x or y are too big and if so break out of the loop. Play around by just changing y for example. You should get skipped lines.
C# isn't especially good at anything. It has exactly the same capabilities as Java, and Python. The differences lie mostly in syntax; implementation; and the base libraries, and 3rd party libraries that are available. C# has some very useful features relating to these three, but that doesn't mean you're hindered from achieving the same in other languages. I'm in a rush, but some things that pop into mind: * LINQ * Entity Framework * The whole .NET library (aka C#'s "standard library) * The huge community effort behind .NET Standard and .NET Core * Generics * Pretty good garbage collection * The ability to drop into unmanaged memory * IL and the ability to inject IL * ASP.NET
You need to ask what .NET have to offer, and not just C# IMO. 
&gt; C# isn't especially good at anything Well, I'm not sure about it, multithreading, IMHO, is better in c# than in phyton, also, c# is "good" as strongly typed vs phyton, if you like strongly typed languages. Also, the desktop apps has better support with c#, at least in windows. 
I haven't spun off any threads at all. I've even had the GenBuffer try to call in the FrameUpdate. Even on form instantiation, I can't do so much as a GL.ClearDepth() without a memory error. However, I've found that the problem lies in trying to do this on a virtual machine (which, obviously, has no hardware acceleration). Going to have to find a workaround.
If you want to write mainly programs for windows, C# (via the .NET framework) is the way to go. If you are competent at Java, learning C# is pretty easy.
&gt; Generics real generics too implemented right, instead of java's 
Heya, so I've started digging into the code a bit, and it's not quite as simple as skipping around. The program actually draws areas around every black pixel. So what ends up happening for clustered areas of black pixels, is they tend to draw the same pixel multiple times. This is obviously a little frustrating from a sparsity point of view since we can't reliably cut out pixels to draw. However, we can give something a try and see what happens! Function draw() is the main entry point into the drawing algorithm, but it's important to know the call to drawArea which actually bounces around the x,y pixel being drawn and draws all 9 of the pixels in that box by dragging the mouse around. From what I can tell, the program puts the mouse down in the center, then drags to the upper right corner, then left, then left again, then to the middle row all the way to the right, then to the left, etc. This draws the "box". The path chosen when loading the image chooses this drawing path. Now, if we put some skip logic in this area drawing part, we can get some sparsity in the drawing itself though not as much as would be expected. You can view the results I got when playing around with it in the following imgur album [here](https://imgur.com/a/GxZUk). The changes I made are: // Line 32 private Random _gen = new Random(Environment.TickCount); // Lines 373-376 After the above line is in place if (_gen.NextDouble() &gt; .75) { continue; } By using random, we can sporadically skip drawing sections of the little grid. Now since it's drawn in a grid shape, the path you take, and the amount of skipping you do greatly changes how this is drawn since we're not actually putting pixels on the screen but drawing a grid around a point. Anywho, let me know if you have any questions!
Ok both python and C# are strongly typed however, python is dynamically typed while C# is static typed https://stackoverflow.com/questions/2351190/static-dynamic-vs-strong-weak
Oh, you are right.
C# does have the dynamic keyword though to make it dynamic, and add on the fly binding as well. 
You can use regions, regions are collapsable, can live inside methods, and there are some add ons for vs for regions formatting.
Some of the newer things that set it apart are simple lambda syntax, the yield keyword, and the async/await keywords. Very powerful stuff. 
The biggest reasons I'd reach for .NET (C# or F# primarily) over Python are for: * Performance * Strong typing * Client-server applications * LINQ * If I needed to deploy to Azure * Writing games (Unity is quite nice for this; Python has PyGame but they're in different realms) * Mobile development with Xamarin -- C# can be used to write mobile applications on any major platform * Excellent IDE options and debugger toolchains The reasons I'd choose Python over C#: * Data science / ML / AI development. C# has some very nice libraries for this as well, however most of the tutorials you'll find use Python and Python-first libraries like NumPy, SciPy, Theano, Torch, Tensorflow, etc * Rapid web development using Django or Flask. Django's admin stuff is especially nice. If you don't care about that, then it's a toss-up between Django and ASP.NET MVC for web development. * An extraordinarily good ecosystem of third-party libraries with a culture of documentation Learning C# before Java or Python will set you up quite well for learning both down the road if you choose. I don't know many people who have transitioned from C# to Java unless they wanted to use a JVM-first language like Clojure or Scala, but quite a few who have gone the other direction. In a way, C# is Java++. .NET Core 2.0 makes .NET a very attractive cross-platform framework for server development; the performance numbers the team are releasing are impressive. I've written all three professionally but spent the most time with C# (since the beta in the early 2000s). It's grown in a better way than almost any other language out there; and you will be a better developer for knowing it.
Not mentioned yet: More specific to .NET that to C#, but the size of the .exe files generated are tiny compared to Java or Python (PyInstaller) because the framework is already installed any contains the majority of the code in the form of DLLs, etc. 
-- Portability -- Java is available on more platforms as it runs on JVM after being compiled to byte code by you. It's runable on everything [here](https://java.com/en/download/help/sysreq.xml). C# normally runs on the .NET [CLI](https://en.wikipedia.org/wiki/Common_Language_Infrastructure). Now recently mono CLI is being developed by Xarmin which is a subsidiary to microsoft, and it's open source and availablity is [here](http://www.mono-project.com/docs/about-mono/supported-platforms/). The problem is mono doesn't support all of the .net framework it just [supports](http://www.mono-project.com/docs/about-mono/compatibility/) the language really. I don't know as much about python but it's availability is [here](https://www.python.org/downloads/operating-systems/). -- Use in apps -- You can develop apps for android in java in [android studio](https://developer.android.com/studio/index.html). You can also develop apps for android in C# with [xamarin](https://www.xamarin.com/). However xamarin also lets you build apps for ios in C#. I personally find the android studio librarys alot easier to understand. Android studio is free. Xamarin is not. -- Performance -- C# and Java are similar in performance with both using [bytecode](https://en.wikipedia.org/wiki/Bytecode) and [JIT](https://en.wikipedia.org/wiki/Just-in-time_compilation). However the JVM will statically compile very active bytecode into machine code which is faster because it cuts out interpretation. This gives Java a slight lead over C# as shown [here](https://imgur.com/a/w4egu). Then Python is slow as hell at doing the same task as Java and C# because it's an [interpreted language](https://en.wikipedia.org/wiki/Interpreted_language). ---- C# also gives you ASP.NET, Visual studio and other great things. My languages lecture says C# was created because microsoft didn't want to pay the licencing fee to oracle to use java. So they are very similar in a lot of ways and both have their uses. Lots of companies like C# and lots like Java so if you learn both it's pretty ace.
I would add - The quality and depth of documentation. - The ease of finding working examples of almost anything - Visual Studio is a very easy to work with IDE
Holy smokes this is alot to take in....checking this out now, will get back in a sec.. thanks so much for helping out
&gt; # isn't especially good at anything. It has exactly the same capabilities as Java, and Python. Completely wrong.
So im to put these in at line 32 and lines 373-376 right? Its not working on my end...getting a bunch of errors when I try and build it.....thanks for helping out! 
If you post the code into a gist or upload it to GitHub, I can check it out. Or if you tell me the errors, I might be able to work backwards to the cause.
Hey, so where can I change the threshold values? What line is that? ...can you give me an example? Hurts my head a little
It's not especially good at anything, but it's pretty good at most things. Really, that's what it's good at. 
We'd need to know what class you're using for IO - TCPConnection?
Its like 59 errors haha....I'm just suppoed to put those right in the code right? I dont know what I did wrong..
You generally shouldn't use `dynamic`, but if you need it, it's there.
They're generally linked so it's a good question. Though I've read where people have made the argument that C# is separate from the library, I've never seen it in practice. 
For me C# and .NET together offer a beautifully consistent language and library for doing what I need to get done. When you look at how various things work in the library they have a standard way to work. If you know one library well then working with the next will bring with it a lot of familiarity which will make it easier to pick up. This consistency makes it a lot easier to work with than Java or Python, IMO. 
https://pastebin.com/dj6mZScj
Interesting, so what happens? Do the handlers that didn't get a chance to run before it was marked done just not get run? Know of any good articles about this?
My understanding - Microsoft actually lobbied for certain Java features, were denied and decided. To essentially do it themselves
Hahaha. Yes. You were. I've loaded your code into my visual studio and am taking a look. Okay, I'm not quite sure why your line count was different from mine, but move the if statement in your file to line 371 right above the switch statement and right below the opening bracket for the for loop. You have it inside the switch statement where only case or default can appear. Your code: foreach (int i in Enumerable.Range(0, 7)) { switch (path[i]) { if (_gen.NextDouble() &gt; .75) { continue; } { push(stack, x, y); x -= 1; y -= 1; cont = true; } } break; What it should be: foreach (int i in Enumerable.Range(0, 7)) { if (_gen.NextDouble() &lt; .5) { continue; } switch (path[i]) { case 1: if ((x &gt; 0) &amp;&amp; (y &gt; 0)) { if (pixelArray[x - 1, y - 1] == 1) { push(stack, x, y); x -= 1; y -= 1; cont = true; } } break;
VB and F# are general purpose as well.
You can distribute Java and Python apps without a runtime, same as .NET. It's just that most users on Windows are not accustomed to installing platform runtimes, so developers end up shipping one built-in.
C# can be weakly typed if you need it to be. Though thankfully I haven't had to use unsafe blocks or overlapping structs in years.
&gt; It has exactly the same capabilities as Java, and Python I don't believe that you have actually used all three of those languages.
Microsoft's involvement with Java was mostly around trying to get bindings to Windows APIs. They implemented their own JVM, which was allowed under their licensing agreement with Sun, and then put in proprietary extensions that only ran on Windows with Microsoft's JVM, which Sun argued was not allowed. Sun sued Microsoft. After several years of court, they settled, and Microsoft killed its JVM.
Ah got it! Yeah I had replaced it haha. It works nicely...whats the lowest amount I can give it... .01 ? Ok...I had another question, is it possible for no single dots to be made....like here for instance: https://imgur.com/a/d9W9E
The lowest amount is actually the highest. The function generates a number on the range [0, 1). So if you go with &gt; .9 it will print barely anything.
&gt; Android studio is free. Xamarin is not. Xamarin is free
Ah I see. The lower it goes though the more dots it makes instead of lines...
How about if the mouse were held down the whole time instead...is there a way I can do that?
&gt; Android studio is free. Xamarin is not. Wrong. Xamarin is free for open source and small businesses (&lt;=5 developers).
&gt; I'm also confused as to why WPF have some controls have a certain trigger while others don't. One thing I want to stress is that WPF is actually very consistent. You have to polarize your thinking into two components: your UI (let's call it V for **V**iew), and the View Model (VM). When binding is setup correctly in the XAML, your V continually listens for changes in the VM and responds accordingly. You don't have to explicitly tell anything in V to change anything, you just have to make sure that the bindings are correct and changes from VM will propagate forward. It sounds like you might be coming from a background of WinForms where UI changes are very explicit. I was too, and it took me months for WPF to "click". But I will say that nowadays for even the most trivial of applications I will still set up a View Model and use databinding to drive my UI. It really is much easier and less code. If you'd like to get into concrete examples maybe you could post a sample project on GitHub and we could play around with options.
Python is also strongly-typed. I would argue that it's actually the *static* typing in C# that provides the most value in the type space compared to Python or other dynamically-typed languages.
Flexibility, scalability, performance, solid cross platform support.
While you're correct, you are * overstating the relevance of 'const' for locals * you are presenting your case like a petulant child.
I see you're looking for drawing edges. I'm wondering if this is the best tool for your needs? You might want to do a search on edge detection? That might be more directly applicable to your needs, but I'm not sure what you're trying to do, exactly... Here's one link that might be a good overview. Not sure it's what you need (and maybe is a lot more theory than you're looking for). If so, feel free to disregard :) [https://softwarebydefault.com/2013/05/11/image-edge-detection/](Edge Detection) Cheers! 
Are you sure that you have created your OpenGL context and made it current, etc. ? If no function calls are working (you mentioned both GenBuffer and ClearDepth weren't), then it's most likely a setup issue. Can you post a snippet?
Well, you can believe what you want, but you're mistaken.
You're stating that a memory managed, turing complete language can't do the same thing as another memory managed, turing complete language?
Yes.
These are syntactical or library features, mostly. The async and await keywords in C# are great to kick off asynchronous work, and you can achieve parallelism with them pretty easily. In python, you have to write more boiler plate code. However, I don't think that makes either language "especially good" at it, because they are both capable of doing the same thing. One could argue that csc generating an async state machine for you is great, while another person could argue that it obfuscates what's actually happening behind the scenes. Or, more pragmatically, that because async and await are built on top of the TPL, stupid capabilities exist, like calling .Result on an uncompleted task. I think, if you need functional programming, you might as well use a language that is actually functional, like F#. The hybrid oop/fp model in C# is very useful, but it doesn't really achieve fp. With desktop apps, I would argue that this is a feature of .NET, and not C#.
This is indeed the better question to ask.
I think OP asked what makes C# a good choice in general, not compare it specifically to one language. For instance, when you say 'performance', you're neglecting a comparison to Java.
I wouldn’t call python strongly typed at all. Python doesn’t give errors on compile time, it blows in runtime, not like C# so it’s a hell to refactor while with C# is a breeze. That’s not strongly typed, just dynamic and kind of typed. Also, the object orientation in Python is a joke, objects are just dictionaries basically. No real private methods or properties, static fields, etc.
You spend 3 sentences an example with anything useful, and the rest complaining. Get over yourself.
Imagine if Java weren't designed by sadists, worked on just as many platforms (if not more), and was treated as a first-class citizen on the OS that the vast majority of computer users are running. That's basically C#
F# is functional first, but also can do OOP so it’s a mix too, and clearly using it for doing something else apart from dlls and console apps is a nightmare. It seems that with core at least that will change a bit, but for now, C# is still a lot easier and useful than F# because the different frameworks. templates and VS support are built for it. I am not saying F# is not a better language or more functional, but today is less productive because all the crap you have to do to use it. 
Agreed.
- Continuos improvements - organized documentation - Clear standards on how to write code - visual studio - You can build apps for windows, Mac, iOS, Android, web and more - Statically and strongly typed - Great debugging experience - Linq - Extensive framework library - Nuget packets for almost anything - it’s free and open source now - EF - ASP.NET - Good performance - Is backed by Microsoft so it’s not going away. Problems: I would say the main problem is the same as the first virtue, is constantly changing and evolving and for someone starting right now to me seems like a lot of work. Frameworks change constantly, for example web api has changed like 3 times in 5 years, and I mean, really changed... while other platforms are probably more stable. People always talk about js fatigue, but when you spend more than 5 years with .NET you start to feel some .NET fatigue too. Is not that is difficult to learn the new stuff, the tedious part is to maintain old applications and having to rewrite for new platforms every 3 to 5 years. For example, rewrite all soap web services to WCF, then WCF with rest then Web API, then web api changes, now to web api in core... Too much rewrites to at the end do the same thing, a damn web service.
What about something like this: Func&lt;int&gt; x = _ =&gt; 5; Isn't that an immutable value?
Then a few decades later we got Android Java.
Unity
It might be converting to big endian when sending the message, since network order is supposed to be big endian. How are you sending the message? 
The problem with codewars is that usually you learn to do offuscated code more than anything else. But it’s a great learning resource.
i've only been in the game for 4-5 months and i'm still writing _very_ simple stuff, so bear with me here... you have at least two good options that i can think of: Storing your values as Enums, and storing them as Properties without Set accessors. i believe you could even make a static class to store your consts in and call them like you would an enum? i get that this has the clutter of moving your values outside your method, but really, if you only use it inside a single method, coulden't you just type the value into the code to keep it immutable? and if you use it within multiple methods, doesn't it make more sense to make it a property within the class? if you need it across several classes, again it makes more sense to store it as an enum or part of a static class you use for storing values. It can obviously be a problem, since both OP and you think of it as a problem (and there's little chance you're greener than me), but i can't wrap my head around a use-case where it exists as a problem, can you help me present an example where you would not simply use the tools for immutability that already exist in C#?
[Don't talk to strangers!](https://webpro.github.io/programming-principles/) Low coupling / high coesion. And a good grasp on what dependency injection and inversion of control mean.
Why do you use a VM? C# is crossplatform (Mono or .Net Core)
That’s just one of the things. There are pure functions, reducing mutable state as much as possible, using structs iso classes, extension methods, lambdas vs writing the code yourself, passing functions as arguments, etc... A ton of things that can be done with C# that most people don’t do because they can do it “the old way”. That’s why I recommend F# to every C# developer, because it forces you to learn about those concepts. I would recommend swift or go too, without being functional at all. But they aren’t .NET compatible. One example of something funny, for doing validations of values, just create an array of Funcs and apply those functions to the value, as soon as one is false, is not valid. I had people complain because it’s not OOP var isValueValid = [f1, f2, f3].Any(f =&gt; !f(valueToCheck)); Funnily, the same people didn’t complained when i did exactly the same with JavaScript iso C#. 
You too! FB
Also in LinqPad you can mock UI easily winth Winforms and WPF too. LinqPad is a great tool and on the net you can find [a lot of resources](https://www.danclarke.com/linqpad-tips-and-tricks) about it.
I wouldn’t call Python strongly typed. You can call any method on any object. If it’s not there, it will fail at runtime. Of course you may call it strong for that reason, but by that definition I don’t think there are any weakly typed languages. 
The best thing is visual studio honesty.
Well you have two systems in play. C# events and then WPF routed events. WPF routed events use C# (CLR really, they're not just in C#) events and implement the add/remove. [From the docs](https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/routed-events-overview) And then you have [Attached events](https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/attached-events-overview) which use the routed event infrastructure. So the CLR event is really just notifying the WPF routed event system (EventManager) that it needs to start its bubbling/tunnelling. Once something says "Hey I've handled it!" no one else needs to be told about it, so no, they don't get notified at all. That's by design though, the idea is you can have a StackPanel with a dozen buttons in it and just one handler on the StackPanel. So the use case was more about not having a handler and testing if the parent can deal with it, rather than preventing something further up the chain from firing. Sounds great, but it's actually a bit of a nightmare. The Button control for example eats MouseDown and MouseUp events marking them as handled inside its code which generates the Click event. So while you can listen to the MouseDown event of a button, it will never fire. However, the PreviewMouseDown will fire because that tunnels from the top of the hierarchy to the bottom. I've tacked some code onto the bottom of this post which will probably make it even more baffling :) Separately, CLR events have their own foibles. This is a bit of a digression, but With CLR events an unhandled exception will prevent any further handlers being called. See this little example: static void Main(string[] args) { TestEvent += (s, e) =&gt; Console.WriteLine("First fired"); TestEvent += (s, e) =&gt; Console.WriteLine("Second fired"); TestEvent += (s, e) =&gt; throw new Exception("Boom"); TestEvent += (s, e) =&gt; Console.WriteLine("Fourth fired?"); Console.WriteLine("Before invoke event"); try { TestEvent(null, EventArgs.Empty); } catch (Exception e) { Console.WriteLine(e.Message); } Console.WriteLine("After invoke event"); Console.Read(); } private static event EventHandler TestEvent; } Which will result in: Before invoke event First fired Second fired Boom After invoke event As you can see, the handler we added that should have printed "Fourth fired?" never fired. If instead of just invoking the event you iterated through like this: Console.WriteLine("Before individually invoke event"); foreach (var handler in TestEvent?.GetInvocationList() ?? new Delegate[] { }) { try { ((EventHandler)handler)(null, EventArgs.Empty); } catch (Exception e) { Console.WriteLine(e.Message); } } Console.WriteLine("After individually invoke event"); You will instead see: Before individually invoke event First fired Second fired Boom Forth fired? After individually invoke event In the olden days (pre framework 4.5??) just registering with an event wasn't thread safe either. If TestEvent += (s, e) =&gt; Console.WriteLine("First fired"); TestEvent += (s, e) =&gt; Console.WriteLine("Second fired"); were executed on different threads at the same time there was a possibility that TestEvent would be registered with First, Second or both! You got around that with code like this: private static readonly object LockTestEventThreadSafePre45 = new object(); private static EventHandler InternalestEventThreadSafePre45; private static event EventHandler TestEventThreadSafePre45 { add { lock (LockTestEventThreadSafePre45) { InternalestEventThreadSafePre45 += value; } } remove { lock (LockTestEventThreadSafePre45) { InternalestEventThreadSafePre45 -= value; } } } Invocation is the same TestEventThreadSafePre45(null, EventArgs.Empty); Basically delegates are immutable, so when you do += or -= on a delegate you get back a whole new delegate which is assigned to the variable. That's where the thread safety issue comes in. So back to WPF. Here's some code for a single MainWindow of a default WPF project. XAML FIRST: &lt;Window x:Class="WpfApp1.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" Title="MainWindow" Height="350" Width="800"&gt; &lt;StackPanel Name="MyStackPanel" MouseDown="UIElement_OnMouseDown" PreviewMouseDown="UIElement_OnPreviewMouseDown" Button.Click="MyStackPanel_OnClick"&gt; &lt;Button Name="B1" Content="1"/&gt; &lt;Button Name="B2" Content="2"/&gt; &lt;Button Name="B3" Content="3"/&gt; &lt;Button Name="B4" MouseDown="B4_OnMouseDown" Click="B4_OnClick"&gt; &lt;StackPanel Orientation="Horizontal"&gt; &lt;TextBlock Text="4 "/&gt; &lt;Button Name="B5" Content="5" Width="40" /&gt; &lt;Button Name="B6" Content="6" Width="40"/&gt; &lt;TextBox Name="T1" Width="40"/&gt; &lt;/StackPanel&gt; &lt;/Button&gt; &lt;Button Name="B7" MouseDown="B4_OnMouseDown" Click="B7_OnClick"&gt; &lt;StackPanel Orientation="Horizontal"&gt; &lt;TextBlock Text="7 "/&gt; &lt;Button Name="B8" Content="8" Width="40" /&gt; &lt;Button Name="B9" Content="9" Width="40"/&gt; &lt;/StackPanel&gt; &lt;/Button&gt; &lt;ListBox Name="Results" Height="200" /&gt; &lt;/StackPanel&gt; &lt;/Window&gt; CODE BEHIND: public partial class MainWindow { public MainWindow() { InitializeComponent(); Results.ItemsSource = Stuffs; } public ObservableCollection&lt;ListBoxItem&gt; Stuffs = new ObservableCollection&lt;ListBoxItem&gt;(); private void UIElement_OnMouseDown(object sender, MouseButtonEventArgs e) { var item = new ListBoxItem { Content = $"Panel OnMouseDown sender: {((FrameworkElement) sender).Name} source: {((FrameworkElement) e.Source).Name} OrigSource: {((FrameworkElement) e.OriginalSource).Name}" }; Stuffs.Add(item); } private void UIElement_OnPreviewMouseDown(object sender, MouseButtonEventArgs e) { var item = new ListBoxItem { Content = $" Panel OnPreviewMouseDown sender: {((FrameworkElement) sender).Name} source: {((FrameworkElement) e.Source).Name} OrigSource: {((FrameworkElement) e.OriginalSource).Name}" }; Stuffs.Add(item); } private void MyStackPanel_OnClick(object sender, RoutedEventArgs e) { var item = new ListBoxItem { Content = $" Panel OnClick sender: {((FrameworkElement) sender).Name} source: {((FrameworkElement) e.Source).Name} OrigSource: {((FrameworkElement) e.OriginalSource).Name}" }; Stuffs.Add(item); } private void B4_OnMouseDown(object sender, MouseButtonEventArgs e) { var item = new ListBoxItem { Content = $" B4 OnMouseDown sender: {((FrameworkElement)sender).Name} source: {((FrameworkElement)e.Source).Name} OrigSource: {((FrameworkElement)e.OriginalSource).Name}" }; Stuffs.Add(item); e.Handled = true; } private void B4_OnClick(object sender, RoutedEventArgs e) { var item = new ListBoxItem { Content = $" B4 OnClick sender: {((FrameworkElement)sender).Name} source: {((FrameworkElement)e.Source).Name} OrigSource: {((FrameworkElement)e.OriginalSource).Name}" }; Stuffs.Add(item); e.Handled = true; //HANDLED!!; } private void B7_OnClick(object sender, RoutedEventArgs e) { var item = new ListBoxItem { Content = $" B4 OnClick sender: {((FrameworkElement)sender).Name} source: {((FrameworkElement)e.Source).Name} OrigSource: {((FrameworkElement)e.OriginalSource).Name}" }; Stuffs.Add(item); } } This shows a bunch of things, and yes I know the code is horrible :) Of interest try clicking button 4 (which contains a bunch of sub buttons) and its sub buttons, then repeat with 7 and its sub buttons. The output will show different things because one has Handled=true. Second, even though the Panel and some buttons are set to listen to MouseDown, that code never gets fired if you click in a button! This is because button eats those events. 
It's hard to convey how much you learn from using other languages and a lot of it comes down to how *you* like to write code. For instance using structs over classes is *very* situational. Is the data you want to store a value like int? Maybe a money type? Then go with struct. Things that are many are better as classes. If you want an immutable class it's better to make your own and not implement (internal/public) setters. Another example, using functions and immutable state is great for parallelism and threading but it does incur a small performance cost that you might not want in a large/tight loop. A lot of things have a place and purpose somewhere but almost never everywhere.
Hey I just tested your code, and it works! Now my question is, how do I edit this so I can put in more questions when I press the button? Now I have one question and one answer, so I have multiple questions it randomizes from?
Python is strongly typed the way steak tartar is beef jerky.
`IPAddress.NetworkToHostOrder` `IPAddress.HostToNetworkOrder`
Should work; are you using the [`System.Memory` NuGet package](https://www.nuget.org/packages/System.Memory/)?
This is partly true. A lot of compsci courses don't teach any C# and teach java instead. Many people find out that C# seems to be "like java but better" and want to know more about why and how.
And give your controls a descriptive name. Now u still know what every button does but 6 months from now u have no idea what button3 is supposed to do
Unity uses .Net though. 
It’s not separate from the library since it uses Mono, which is open source .NET. 
&gt;Apparently an array of interfaces is being instantiated, but that can't be right, right? Yes, that's exactly what happens. *Interfaces* cannot be instantiated, but *arrays that can contain interfaces* can be. Instantiating an array does not also instantiate objects of that type, the newly created array is empty (ignoring value types here).
I think it's the 'new' keyword making it a bit confusing. It looks like it's just creating an array of IAccounts, not actually creating instances of the interface. So that line is just creating and allocating space for the array. This then lets you create specific instances to store in each of the array positions. That's what the next group of lines is doing.
&gt; Instantiating an array does not also instantiate objects of that type, **the newly created array is empty** (ignoring value types here). THANK YOU! Now it makes sense :-)
&gt; So that line is just creating and allocating space for the array. Thank you kind internet-stranger, your help is really appreciated :-)
Yes I do find the quality of the sub to be lacking at times. The same can be said for /r/dotnet so I go on both to try get more news or whatever. Sometimes there are really great posts either questions that get a lot of upvotes and replies and others that are links to a a blog post by a Dev in the Microsoft/.NET ecosystem. There’s lots of interesting articles by, for example, Scott Hanselman and Jon Skeet (of course many others too these are just off the top of my head). However these are almost never posted at all on here for some reason. I’ve actually made a twitter account and followed a bunch of developers who work in/on .NET and C# and its actually really interesting. But yeah the biweekly “convince me to use C#” posts are irritating. They seem to be consistently the only posts that actually generate any kind of activity. The homework ones get a lot too for some reason, but the more complex and interesting posts rarely get as much attention or as many votes. Definitely agree about the universities only teaching Java. I guess people want to see what else is out there. Which is good but let’s be totally honest here university lecturers in software development are usually going to be biased against anything “hurr durr micro$haft is evel C# sucks” and will teach Java as though it’s literally the only language that exists so this mentality probably runs off on students unfortunately which probably explains the sub not being as popular as the Java one. I’m rambling a bit but these are just my thoughts on the subject haha.
Yes I do find the quality of the sub to be lacking at times. The same can be said for /r/dotnet so I go on both to try get more news or whatever. Sometimes there are really great posts either questions that get a lot of upvotes and replies and others that are links to a a blog post by a Dev in the Microsoft/.NET ecosystem. There’s lots of interesting articles by, for example, Scott Hanselman and Jon Skeet (of course many others too these are just off the top of my head). However these are almost never posted at all on here for some reason. I’ve actually made a twitter account and followed a bunch of developers who work in/on .NET and C# and its actually really interesting. But yeah the biweekly “convince me to use C#” posts are irritating. They seem to be consistently the only posts that actually generate any kind of activity. The homework ones get a lot too for some reason, but the more complex and interesting posts rarely get as much attention or as many votes. Definitely agree about the universities only teaching Java. I guess people want to see what else is out there. Which is good but let’s be totally honest here university lecturers in software development are usually going to be biased against anything “hurr durr micro$haft is evel C# sucks” and will teach Java as though it’s literally the only language that exists so this mentality probably rubs off on students unfortunately which probably explains the sub not being as popular as the Java one. I’m rambling a bit but these are just my thoughts on the subject haha.
Here's a sneak peek of /r/dotnet using the [top posts](https://np.reddit.com/r/dotnet/top/?sort=top&amp;t=year) of the year! \#1: [How .Net was Started](https://i.redd.it/7agry8pn1avz.jpg) | [43 comments](https://np.reddit.com/r/dotnet/comments/7a0we2/how_net_was_started/) \#2: [Does your Visual Studio run Slow? Mine did and I fixed it with this](https://np.reddit.com/r/dotnet/comments/5epwoy/does_your_visual_studio_run_slow_mine_did_and_i/) \#3: [Visual Studio 2017 will be released on March 7](https://blogs.msdn.microsoft.com/visualstudio/2017/02/09/visual-studio-2017-launch-event-and-20th-anniversary/) | [19 comments](https://np.reddit.com/r/dotnet/comments/5t1ftp/visual_studio_2017_will_be_released_on_march_7/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/6l7i0m/blacklist/)
C# is open source. C# you write less than Java. C# is very easy work with asynchronous. I thing C# is more easy to learn than Java
Honestly I just follow blogs through RSS. I keep this for the occasional post that hits my feed. Why? Because I completely agree with you, but it's not an issue of this subreddit it's inevitable in social groups everywhere. Might be lesser in groups with more going on constantly or popularity but I can assure you they get as many if not more of these kinds of questions.
Strange. It sounds like my university, which fully embraces and actively teaches .NET, is an exception. The only obvious exceptions are graphics (C++) and Android.
Your comment is full of contradictions, I can’t follow it sorry 
Part of the problem is most .Net devs use stackoverflow for all their needs. Responses are much quicker and more thorough. Though I do appreciate the random topics here in my feed I never would have thought about.
It's not full of contradictions, it just uses broken phrasing. sloppyfeashes stated: 1. His/her university uses .NET (fully embraces and actively teaches) 2. He/she observes this must be an "exception" to the "rule" that universities teach Java. 3. He/she noted that their university *does* use Java with Android, and C++ when teaching graphics.
My recommendation would be to go ahead and give it a shot. :) Comment out the line that fires the MOUSEEVENTF_LEFTUP which should just keep it down the entire time. It's in the draw() function. My suspicion is the image will look a little strange. :) For accomplishing the above, this program isn't going to be super helpful from what I can see. It kind of dances around the image drawing grids, so it'd be a little involved to convert it over to drawing in a single line. /u/phoningitindustries has what could be an interesting approach with the edge detection.
You are definitely a programmer after my own heart, deconstructing something complicated into manageable chunks. 
Perhaps a FAQ on the community info page would be a good idea? The page looks up today other than that.
In your example, you’re using the `Shareholding` class. In the code example you replied to, it never mentions that class, nor any other class. Instead, it mentions an interface. The code which generates the factory injects a function which returns the correct class. That might be `Shareholding`, or it might be any other class that also implements the correct interface - or, crucially, it could be one class at run time, and another during testing.
The discourse level is definitely lower than on /r/cpp. It's a shame really.
 Good points. I didn't realise there was a dotnet subreddit, I will check it out. 
For me its the opposite, VS is a buggy slow pile of shit compared to Jetbrains IDEs but I love C#.
You are part of the problem.
I'm 13, please convince me why I should use c# to do my homework.
I found resharper was he culprit for slowdowns and crashes in visual studio. It's intolerable to use on large solutions with many projects.
Because the answers are on Stack Overflow. :)
Generalizing every poster as a 13 year old is your own misinformed bias. Do you ask every poster their age? Does it even matter?? The people that are most desperate for answers and don't know where to get them will post the most. Thus, harder questions aren't even asked... other resources tend to be better on multiple levels. Also of note for why homework questions get more attention... is there's more people comfortable with that level of programming. Means more people look at it, more will respond confidently, and higher chances of a discussion over something said. If on the other hand, there's only one answer from an expert about something either too complex, or perhaps only 1 reasonable answer. Then there's no real conversation. Sometimes, it's also a matter of effort... which leads to low interest and responses. The few people that have tried giving tutorials and meaningful information aren't getting much positive feedback. Sometimes, given quite a bit of constructive or even negative critisms. So they won't keep putting effort into these posts, when the community isn't appreciating them. If we want better content, we just need to be better with our upvotes and discussion points. 
I would say that's because homework questions tend to be stuff that a lot of developers have dealt with regularly (ie the "easy stuff"), so more people have information to contribute. On the other hand, the more in depth and complicated issues that are more interesting to seasoned developers are more likely to be edge cases where not as many people have helpful info. As for "convince me to use C#" posts....Yeah I'm kinda with you on that one.
ಠ_ಠ
[The Perils of JavaSchools](https://www.joelonsoftware.com/2005/12/29/the-perils-of-javaschools-2/). Which accounts are you following on Twitter?
Jon Skeet, Scott Hanselman, Miguel the guy who wrote mono, the language team like Dustin Campbell and Mads, Immo Landwerth one of the lead .NET team members, the official vs account, things like that.
MVC apps use razor pages for their views, they aren't competing standards. I'd suggest finding some kind of video tutorial that is around your level and starting from the start, it will all become pretty clear.
This post does a decent job defining the differences. https://stackify.com/asp-net-razor-pages-vs-mvc Basically there is less magic with Razor Pages, but it is MVVM, so if you want MVC, it won't be what you are looking for.
In Romania, they *only* teach C++ in school(i think some places also allow Pascal). It's one of the worst languages to start with when you're 14 year old, in my opinion
Stop upvoting them? Isn't that how it works?
Hmm yeah removing the mouse line doesnt really do it....it does look strange, but strange is what I want! At least more minimal. I like the program because it can draw....I feel like edge detection isnt quite what Im going for...unless theres edge detection that can be drawn with the mouse like this program. Is there a way of removing the singular dots ? The stippling or whatever you call it 
It does vary. There's a commercial aspect, Microsoft invests quite heavily in encouraging schools to take MS software and teach its languages/technologies. The alternative is everyone will use the free tools which saves the university $$$
Hey, yeah I've tried edge detection....not quite what I want. I really dig this program because it uses the mouse to draw, but I was wondering if it could be done in a more minimalistic fashion, just less lines to represent the input image that you give it. Say if I loaded a picture of a hand, it would draw it out but using fewer lines...like http://www.drawingandpaintinglessons.com/images/PegTayler_BlindContour2006.jpg :) 
StackOverflow will come down like a ton of bricks on 90pc of the questions asked here. Its format also doesn't encourage back and forth discussion or any sort of investigatory question asking. I'm like you. It's one of my interests so I sub here and sometimes something catches my eye. 
What's your twitter handle? I wouldn't mind subscribing to the same people.
In my compsi source we had everything in java and then c, and only one lesson on c#. I think it was because everyone in the department used Linux and the computer labs were all Linux. Plus you could run it all from the command line. No need to install a bulky IDE. 
Do you have a list of good blogs?
I do agree to an extent but using VS without ReSharper is intolerable. 
1. Almost everybody reading the sub has an opinion on why C# is/isn't worth using. Even people who don't use or know the language. Posts like that are something anybody can contribute to, even though it really adds little value. 2. Homework posts are also low-hanging fruit, and will attract attention from almost everybody with a pulse. I'd prefer those were shunted off to r/learncsharp or r/learnprogramming, but they're not usually coming from the most informed folks in the first place. Similarly active-but-low-value posts tend to be things about coding style, jokey coffee mugs, etc. In essence, it's bikeshedding.
Razor pages are actually a new thing. Razor pages aren't quite the same as Razor views. They actually are competing standards because Razor Pages can contain your controller code, and the routing works differently. https://stackify.com/asp-net-razor-pages-vs-mvc/ 
I read it and reread it and I can't find where the phrasing is broken. I understood it the first time I read it.
Here's how it works: * Really badass problems haven't been solved yet, the people who have them know this and get paid a lot to be the first to solve them. * Minor badass problems are usually confidential and can't be described in enough detail to solicit outside help. * Tough professional problems end up getting expressed as "I've tried these obvious approaches, any ideas for an esoteric one?" and there usually aren't any. * Students who know how to use web searches and can finish an assignment from partial answers find answers and don't ask. * StackOverflow is a more obvious place to ask. So we're left with the people who either have questions so subjective it warrants some personalized answers or people who aren't yet skilled enough to get their answers from documentation/blog posts. That set has a lot of people who just aren't wired for programming but are being forced into a class for various reasons.
Found this blog article somewhere yesterday. https://blog.elmah.io/net-blogs-to-follow-the-ultimate-list/ Has pretty much all of the ones I follow, and a few more.
You can make a blank control and apply a template to it. All your code is only dealing with data and business logic. And you can communicate with UI(or view layer) with property bindings, events, triggers etc.
It’s funny, I was thinking the same. Not 13, but more like 21 year olds... like most Reddit anyways. “Smoking pot while pair programming some C# anyone? Come on dudes! I know all the answers!” 😄
I follow /r/csharp because I really like it as a language, but my day job has me programming /r/python. Fortunately, we're using Python 3.6, so we get formal Type Hinting which helps with the auto-code completion in Pycharm... And since I almost never code on the side these days (due to other personal projects sucking up all my free time), I don't ever code in C# any more. I'm hoping once some of these other projects wrap up that I can get back to writing C# again. It really is a joy to program in.
If you are able to learn C++ as your first language you will be hardcore as hell, but it’s true, most people will be discouraged by it. At that age, I would say, js or PHP, something dynamic, is the best.
I've had some good "general discussion" conversations on this subreddit - this is something that you wouldn't find on SO. Be that as it may, I don't find 80% of what I see here useful, interesting, or an opportunity to help a more junior dev that hasn't already been helped. So I suppose in that regard, you're probably correct. 
That's what my sticky post is for. You know, the one titled "Welcome to /r/csharp! Read this post before submitting."
I've worked on C# projects for over a decade and I now consider Kotlin to be "Like C# but better"... what goes around comes around.
Usually, I've found that the easier (or "more accessible") a topic is, the lower the level of the discourse. I was a PHP programmer in my previous, unhappy life, and I had all but given up on forums and such. Also, Reddit is a very popular site, and very popular sites do tend to host lower-level discussions than the harder-to-find ones. 
Look at this well thought out response that got downvoted because people don't like the truth. Like, there's not even anything particularly inflammatory in it. Sorry your "ugh this subreddit" circlejerk got interrupted.
Great project Prasanna! Will see if I can contribute to port over some stuff which I had used for one of my applications.
Python. Of all the languages I've ever used or help teach (I was a TA in college) none of them come close to Python in terms of teaching programming. It's dynamic enough that students don't get frustrated and burned out on seg faults and linker errors, but structured enough that they don't lose points when their code does something stupid like silently fail on "1" == 1. I would never advocate for teaching PHP. The last thing this world needs is more of that monstrosity of a language existing, not that I'm biased or anything :)
That's because kotlin gives you all the safety of the JVM like c# does but doesn't require nearly as much boilerplate. The more I read about it the more I wish I could come up with my next app idea so I could actually use it :p
Haha I agree I just like PHP for newbies because it’s easy to see results in a web context. But that’s all, for anything else run away! :)
C# doesn't need an IDE either, Visual Studio just calls the compiler with parameters and run the result.
When I was going through it was a lot easier to do javac than figure out what needed to be called. This was 2002-2008 timeframe. Probably my side bias too. I started with java and spent 8 years using it professionally before switching to a c# shop and I still prefer the tooling support around java. Specifically maven is generations better than Nuget. 
They're not a new thing. They've been existing before already.
JS gives you the same feedback while also giving a solid base for the myriad of frameworks out there for web dev (or even serverside with node). I can't think of a compelling reason to ever use PHP outside of legacy. 
&gt;As part of the release of .NET Core 2.0, there are also some updates to ASP.NET. One of those is the addition of a new web framework for creating a “page” without the full complexity of ASP.NET MVC. New Razor Pages are a slimmer version of the MVC framework and in some ways an evolution of the old “.aspx” WebForms I'd say part of dot net core 2.0 is new
it just conveniently happens to be the best IDE on the market.
Microsoft says it's new with ASP.NET Core 2. Are you sure you're not confusing Razor Pages with Razor Views?
If it helps, I'm a 41 year old woman who is stuck at home raising her severely handicapped teenage son. I would rather work but can't hire someone to watch a teen that medically fragile. I joined in the hopes of learning c sharp to give myself something to do other then watch TV. I have just been very quiet because I really don't have much value to add to the subreddit yet (still learning the basics). 
This is really interesting, thanks for taking so much time to write this out. I'm really surprised that I've never run into issues with this before.
wat
The framework "ASP.NET Web Pages" existed with ASP.NET already. They postponed porting it to Core, but with ASP.NET Core 2 they finally ported it. That's why they call it *new* within ASP.NET Core. The framework itself is not new.
The framework "ASP.NET Web Pages" existed with ASP.NET already. They postponed porting it to Core, but with ASP.NET Core 2 they finally ported it. That's why they call it *new* within ASP.NET Core. The framework itself is not new.
You're welcome, I hope it's a starting point at least. I just sort of wrote what came into my head, with a couple of minor fact checks for sanity's sake :) Fingers crossed you never run into these problems, but forewarned is forearmed :)
Nice rely. You're right, dilution of content on this sub does suck. What's stopping you from posting those articles from Twitter? The problem I see isn't that this sub attracts noobs causing the sub to be diluted, it's that the most actively replying users aren't highly experienced and are answering the questions they can as best they can. This helps them to understand what they themselves have been learning. Experienced developers can be a salty bunch, god forbid someone asks a question they feel is below them. We need to watch the negativity towards the noobs because choosing a language to learn is hard, and isn't a trivial decision, let alone understanding what something as gargantuan as the .NET framework offers before you commit a million hours learning it. As owner of a company focusing on .NET, I would hate to see noobs pushed away from the framework/C# just because they felt that they couldn't get advice. I've posted a few questions here which, though not hugely technical, are very relevant to very clear and pressing business concerns (for example, securing a web API) and have had great response and insight from the sub. Other questions get met with many up votes and little to no reply, meaning I guess that people think the question is decent and interesting, but just not in the wheelhouse of the sub to help with. Perhaps I've come across issues that no one else has, perhaps I'm a special snowflake finding the most obscure problems in the framework (**I'm being facetious**) of course, that's not it, it's merely the dilution meaning the experienced devs here aren't seeing them. What I'm getting at is please, if you find amazing articles on the web, or a solution to an issue that no one has asked about, consider simply posting it as an article or cross post. As senior and experienced devs you owe it to the sub to make it a sub that people don't need to ask about the language because they'll see at a glance a myriad of interesting relevant articles. Only then can we combat the dilution at the same time welcoming the next generation of C# devs.
Often said articles are inexplicably ignored and downvoted
Using Console.Beep()? That one's weird since the beeps are now emulated through the speaker on most syatems. Do you have sample code?
welcome to the sub! 
I had never heard of Web Pages before. It seems info on Web Pages is quite scarce, but I did find some Microsoft tutorials on it from 2015. It does look like they've got the same idea, though it seemed separate from Visual Studio.
Doing graphics stuff in a VM is often more trouble than it's worth, IMO.
I think there's potentially another category: People who prefer the discussion style of reddit over the strict Q&amp;A format of SO. I've posted a few questions that were of the form: "Hey, have this design question..." and ideas got kicked around in the comment thread. I wouldn't have been able to have that style of discussion if strictly limited to Q&amp;A.
C# is ma favoooritee Btw, any C# developers here be sure to check out the free [LINQpad](https://www.linqpad.net/). Neato! 
And the lurkers who want to feel like we understand what’s going on but have no idea. 
I am scared by the number of people that write production code but do not understand the fundamentals of programming well enough to write C++. C/C++ is the most sane first language choice if your goal is to become a very good programmer. 
A high level compinent and a low level component should rely on a common interface.
Why not start an open source project and make something like NewtonSoft's JSON.NET?
It's not "the same idea". It's the same framework, now finally adapted for ASP.NET Core too.
No, it's just fine...
Removed: Rule 4.
I'd prefer those homework posts shunted off to /r/CSharpHomework. :P
???
I can't stand SO personally. It's got great info but the community is pretty toxic.
&gt; I know that .NET is basically Microsoft's Java clone What does this have to do with anything?
Really depends on who is teaching and how honestly. I have been enjoying C# a lot more than Python, but I also have a better instructor teaching it, as opposed to the 3 beginner books I tried for Python. 
In general I do find most programming subreddits to be awful communities. Usually just a small handful of opinionated twats rattling off about something that most people really couldn’t care about.
Im 36, and i find this sub very helpful with my "homeworks".
There's also the category of &gt; This post has been marked as a duplicate. Try _Post from 15 years ago that is only vaguely related to the question._ Stack overflow has become the epitome of gatekeeping, and bad gatekeeping at that.
It’s bloated though. 
Totally agree. See the other comment where someone replies in bad English, I politely apologise and say I can't understand it, and then I'm fucking downvoted? The fact it took another person to explain it clearly is obviously enough proof it wasn't written well. Sometimes /r/csharp is shit too.
_Razor Pages_ are not the same thing as the _Razor View Engine_. In fact, razor Pages uses the razor view engine to render html, like in MVC. The difference is that instead of using a view model and a controller, the razor page is both the model and the controller. Which makes a razor page a bit like an old Asp.Net Classic Aspx.
I love LinqPad! The visualizer is the killer feature for me, being able to see the results of a complicated query is a extremely helpful.
My university does java/C# in general, with C++ for games guys and HPC stuff. A bit of PHP gets thrown in there for some web stuff.
you are confusing strongly with static. please read up on it. its a foundation of programming that you ought to know
So did I, but it could be worded more clearly. Specifically, using an intermediate clause in the first sentences makes the reader wait until the end to understand what is actually being said. Secondly, the word exception is used twice in quick succession but referring to essentially opposite ideas, creating the potential for confusion.
Exact instructions from book: "...To do this, create a method that follows the ParameterizedThreadStart delegate. As input, the object that is passed in will be the frogs number. Inside of that method, use a loop to print out "Frog #X jumped" and then use Thread.Sleep and a random object to have the frog/thread sleep for a random amount of time between 0 &amp; 1 seconds. Finally when the total of jumps = 10 print that frog and its numbers" - I know alot of you would much rather I persist and look for a solution elsewhere, but I have attacked the daylights out of this and I just cannot seem to find a solution...
I think you are confusing a new concept, "Razor Pages" and "ASP.NET Web Pages" (which I don't know anything about). I searched and did not find any documentation about those. Do you have any link confirming what you are saying? https://docs.microsoft.com/en-us/aspnet/core/mvc/razor-pages/?tabs=visual-studio This official documentation suggest that "Razor Pages" like OP is asking about *(not "asp.net web pages")* are indeed a relatively new feature in dot net core 2.0. 
When you are saying 'in general', you are saying 'compared to all languages'. Very few people are capable of comparing all languages simultaneously. I'd assume icey knows C# and python based on their response and because it was one of the languages OP mentioned specifically.
Well, ignoring that is a terrifying abuse of threads, what problems are you actually having? The instructions you posted are fairly straightforward and should work, but they do rely on an understanding of the required components.
Hi Cats_and_Shit (nice name haha!) my problem is, how can I loop through threads, run them at random, and increment the no.of jumps? I had tried one route by creating a Frog class which contained the number of jumps and then a method which would act as the ParameterizedThreadStart delegate, but I can't find a way of storing data correctly - I just haven't got a clue how to approach the exercise! arghhh! Many thanks, Elliot
&gt; which saves the university $$$ And also, in many countries, universities are banned from using teaching materials that requires students to agree to ToS. So for example, Microsoft’s tooling is unusable – because students would have to agree to a ToS that limits their rights, and a public university can’t require a student to agree to such a limiting contract.
You don't loop through the threads - the operating system schedules them as they become runnable (not waiting on an I/O operation to complete, blocked, etc.) So just create them, then start them. Have each one check for when the frog crosses the finish line so they all terminate. 
My coffee mug is high quality content ;)
To be fair, a former lecturer is an Microsoft MVP.
That's nice :) I quite like the MVP programme. All the MVPs I've met have been good communicators :)
i agree, lets just redirect them to r/learningprogramming
Please tell me of this magical place. Which University?
That's interesting. There must be a set of acceptable ToS or licenses. Even the open source stuff is licensed, even if those licenses are really permissive and just a little slutty. It sounds like a good initiative though. Anything that reduces financial burden on students is usually positive.
I mostly agree with what you are saying. IMHO C as a first language is great. It is small and difficult to do anything "fun" like make a graphical applications. But the core ideas you learn with C and having to do much of the work yourself is so good to learn first and then move up the chain. I don't mean you have to be an expert C programmer but you should know how to use the language well enough to solve some basic problems while making use of pointers and structs, etc. Then move onto Java or C# and have "fun" with programming games or pretty desktop apps, etc. This is why I recommend CS50x to anyone wanting to learn to program. Start with C for just a few weeks (maybe a couple of months) to build a solid foundation from which to build your knowledge from.
Hull, UK
using System; using System.Text; using System.IO; namespace ConvertToLower { class MainClass { public static void Main(string[] args) { string text = File.ReadAllText(@"/Users/nebulus/Documents/ctlinput.txt", Encoding.UTF8); string lowertext = text.ToLower(); Console.WriteLine(lowertext); } } }'
There's already [nhapi](https://github.com/duaneedwards/nHapi). I don't necessarily agree with all the design decisions they made, particularly in terms of validation, and of course it's hard to use unless you know how HL7 works, but it's pretty decent and I'm not sure anyone could write a parser that wasn't hard to use if you didn't understand the specification.
Same here, love C#, forced to python at work. When I explain how much better C# for developer efficiency I feel like I'm explaining the sun to people stuck in a cave.
I am not a coding genius. It was just a subjective observation, and wasn't meant to be a damning indictment. 
so you need a class for frogs with a ID number and on instance print ID and increment variable, along with sleeping, and I guess waking up again? Check this for ParameterizedThreadStart https://www.dotnetperls.com/parameterizedthreadstart Check this for Locks so you can synchronize access to your variable.. https://stackoverflow.com/questions/6029804/how-does-lock-work-exactly#6029829 Good luck. :) 
So I tried y=y+2 and x=x+2, and its giving me more dots, like pixels: https://imgur.com/a/CO7ou Im not sure I understand correctly...
Free library? I think Wolfram has something but I doubt it’s free. 
Hey, I'm as guilty as anybody of contributing to this issue.
&gt; "The first argument will be a path to a filename" Without seeing the entire problem description, it sounds like they mean args[0] will contain the path. 
An array element is initialized to the default value for its type. In the case of interfaces and all other reference types, this is always null, so no instances are created.
Removed: Rule 4.
I don’t know, for me is better if people can do something more tangible than console apps at the beginning. On the other hand I learned with C and it wasn’t that bad. Even with that blue turbo C UI burning my eyes it was fun. 😄
Yes, it's just for a small personal project. It doesn't look like one exists so I'll have a go myself.
Hey that's me, spent a lot of time taking Java in CS classes, but one class, Advanced Programming Principles, was actually intro to C#. I loved it and have pretty much spent the majority of my time using technologies that use C#.
It's been years since I looked at it, but the F# community tends to be more mathematically-minded than the C# community. Try [Math.NET](https://symbolics.mathdotnet.com/).
It's why I insisted that we use PyCharm and Type Hinting as a matter of course. By typing everything and creating strong models, we haven't fallen into the sloppy habits of some Python coders. We always know what we're passing in and what we're getting back. And PyCharm picks up on this type hinting and allows auto code completion, like VS. So it's not that bad. LINQ &gt;&gt;&gt; List Comprehensions any day. (Who thought the keyword "lambda" was a good idea?)
Is that not what you want? There are technically less dots, they just have white space between them now. 
There is foundational value in learning classes in C++.
How many Microsoft MVPs are there?
Don't mind asking questions, even beginner's ones. Just clearly indicate that you're a beginner. At worst, you'll probably get a redirection to the MSDN or something.
I think idea here is to demonstrate how threads work. Your idea of repeatedly picking a frog to jump is probably a more reasonable way to actually handle this problem, but it's not what the exercise wants. The idea here is to write a one method that itself just handles a single frog hopping with delays between hops, then to run that single method 10 times. If you did this normally, you would have each frog complete the race one after another. However, if you run the method 10 times on *10 different threads*, then they all run the race "at the same time" (this isn't totally true, but it's close enough to true in this case). If you haven't, I'd read more about threads, but the basics (in C#) are: 1. You create a thread object, and pass it the method you want to execute on the thread. 2. You call thread.Start(). The method will then execute *in the background*, and the method that called Start() will continue. 3. You later call thread.Join(). This will wait for the method to finish before continuing. If you make a thread using a method that accepts a parameter, you can also include that parameter in thread.Start() to send it.
Super overkill imo. She could exactly what she's looking for from one of the thousands of content management systems that already exist, probably for free or almost in most cases. 
This was me to the letter. I learned java and then tried c# and I was like “This is awesome, why didn’t they teach this first.”.
Yup. Don’t reinvent the wheel, and definitely not as a brand new Dev. 
&gt; If you are able to learn C++ as your first language you will be hardcore as hell, but it’s true, most people will be discouraged by it. &gt; The problem with C++ is that most people can learn how to make something give the appearance of working, without understanding the subtleties of what's going on, ending up with what's really a security/performance disaster of a program, and a student who is confident that they have learned C++. 
#1 rule of real world development is to check to see if what you want already exists and if you can license it. If what your sister needs is "basically a blog" there are lots of free or cheap services that can meet her needs, probably for less than it would cost to host anything you can make (certainly, anything I could make).
Well, thats because we actually work on stuff
People here are saying not to reinvent the wheel but I see this project as a good opportunity for you to exercise and improve your skills. Sure there are plenty of other services she could use, but where's the fun in that? There's lots of important things to learn in this project: Front end design, proper authentication methods, uploading/serving files (where uploading requires authentication and serving doesn't). Reinventing the wheel *can* be a great learning experience, so I say go for it. This is a project for a family member. If it's not as good as something else that already exists it isn't the end of the world. If the project never gets completed because you found a roadblock you couldn't pass that's also ok. The world thrives on competition and innovation. It's good that people try to reinvent and improve on existing wheels. I'm not saying to write everything from the ground up, but there are absolutely advantages to taking that approach and in a no-repercussions environment it's almost always worth it to learn something new.
I think unfortunately C# has become "uncool" and there seem to be a lot of misconceptions about the language somehow locking you into MS proprietary paid frameworks. Recently my company was evaluating options for our new backend, and I suggested C#/MVC/WebApi. The (younger) engineer in charge of the project - who has probably never heard this - was immediately dismissive of it because apparently 60% of web backends are built with python (lol). She actually thought RoR was a much better choice. My background is embedded systems though, so they don't think much of my suggestions on web technologies.
A domain and server cost $150/yr on the cheap end, it's really not that expensive. OP is clearly in this for the long term; to improve and learn. The best thing an eager web dev can have in his toolkit is a server to host on.
Missing your curly braces? Did you mean something like...? string strInputPath = "ModelsInput2.txt"; string strOutputPath = "Models.txt"; string input; using (StreamReader sr = new StreamReader(strInputPath)) { input = sr.ReadToEnd(); } using (StreamWriter sw = new StreamWriter(strOutputPath)) { sw.Write(input); }
The StreamReader constructor requires an instance of a Stream class as its parameter. You are passing in a string instead. Looks like you need to step back a bit an re-read the chapters on types and function parameters before you start delving into I/O.
well the thing is the instructor gave me a sheet with these exact commands to type so she isnt expecting us to understand what you are referring to yet its just more to complete the other parts of the project I am just wondering if i chose the wrong option for the coding or if maybe i have the wrong version software on my computer i guess i have to ask the teacher on monday. thanks
thanks for repsonding either of the options you offered still get the same error I am thinking I have the wrong software on my computer or chose the wrong option to code in I was reading elsewhere that this may have to do with .net core or something else .net related not sure really 
Nope, need no dots at all...just less lines to represent the input image. So either skipping more pixels or some other way im unaware of
Did you play around with the threshold values?
i was able to find a fix i think i was picking .net core versus .net framework and one doesn't like that command thanks again
i was able to find a fix i think i was picking .net core versus .net framework and one doesn't like that command thanks again
StreamWriter should take a stream as it's constructor argument, not the string. You need to pass the stream to it
I think so? Was that line 286 + 288 ? 
Streamreader has a constructor with a string parameter, fyi: https://msdn.microsoft.com/en-us/library/system.io.streamreader(v=vs.110).aspx
Regarding the second example, the outer braces are commonly left out of nested `using`s. 
Sure, but perhaps harder for someone new to understand.
Why??
I get lots of quality C# articles i could post here, if you want. That might help change the dynamic some.
&gt; but doesn't require nearly as much boilerplate. Looking at [basic syntax](https://kotlinlang.org/docs/reference/basic-syntax.html), I don't see much difference.
C# is easier to learn than .NET libraries.
Absolutely right. In this instance, invent the wheel again. You'll learn a hell of a lot and gain a lot of experience trouble shooting this way. Blog about the process of building it so you've got it documented. That'll help with the 'portfolio' thing that's all the rage these days
Skip the StreamReader and go with File.ReadAllLines
My degree includes two C# classes, I’ve taken them before Java and have become a C# faithful. Partly because I can use it in Unity3D. 
Brilliant Cats_and_Shit, thank-you for your help! Many thanks, Elliot
Hi xampl9, I understand how threads work - this exercise was giving me trouble just simply because I didn't know how to approach it. Thank-you for your comment none the less! 
Cheers Banality_Of_Seeking! I will continue from your example above. Enjoy the rest of your weekend! Elliot 
Exactly
for C# that is, don't start an editor war here :p 
[Mimimimimimi.](https://www.youtube.com/watch?v=aPYU3HCgaOk)
I'm not sure why it's so difficult to comprehend for people that the "new" is in context of Core. Many people, including me, have long time been waiting for a core adaption of Web Pages, which is now present with the new name "Razor pages".
As a python developer stuck in a C# project, I feel the exact opposite. Python is just so much faster to develop in my case. Sure, you need to unit test everything if you want production quality, but I don't see that as a bad thing. As why we use vim, it is just less distracting and faster therefore. For debugging, I open up PyCharm.
I write in multiple languages, still haven't found anything that touches VS. #VisualStudioMasterRace
He'd be better off finding her an off the shelf solution, and then seeing if he can recreate the functions she uses. 'Learning in production' isn't a good approach with family members and friends.
I hope you succeed in your journey :) Don't give up, it's often a tough road to get to the point where you're fairly confident your code is OK, but persist and you'll get there eventually. Besides learning a language, it's often good to learn the ideas behind programming as well. In case you don't know / have the book, I'd recommend Code Complete (latest edition) by Steve McConnell. It's a great book full of wisdom regarding creating software. Good luck!