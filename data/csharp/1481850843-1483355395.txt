I've got it at work. Sometimes I'll tool around with fun projects at home in community. There have been a couple times I've pasted the home code into VS at work just to see what R# is going to do with it. You can absolutely get away with not having it, but it improves my code constantly. And when I'm being good, I get in the habit of making those changes preemptively. "Reshaper is going to want me to make this an expression body." Or "I should probably invert this if". But the biggest thing is when I get a blue squiggle. Sure my code will work, but it could be better. I'll really dive into those and use them as learning opportunities. So I think it's valuable, but then again I don't have to pay for it. 
What resharper feature(s) do you think are essential?
Benchmark.NET can let you test a particular function, say you wrote something to test if a number is prime, and you want to compare it vs an older version of your function, or another library. But maybe performance depends on length of the number etc. You can set up however many scenarios, and it will run through all of them, and spit out nice reports. Bonus - reports can be spit out in markdown, for easy copy and paste into github ( example: https://github.com/Microsoft/visualfsharp/pull/1414#issuecomment-238601748 ) additionally it will figure out how many times it needs to run the experiment to get good data, ensure the code has been JITTED, etc. 
Wow [supercharger](http://supercharger.tools/) looks great!
I can relate. It's definitely made me a better coder and improved my c# understanding in this way.
Or a mutable keyword, and immutable bindings by default. *Runs back to /r/rust*
I think /r/fsharp might implode if C# got that.
Find files by name
I've figured it out. ItemDimensions.Weight was returning null and I was checking for ItemDimensions.Weight.Value so it was still throwing the exception. I will also try using this syntax. Thanks.
A good portion of R#'s functionality can be replaced with free extensions: - [Go To Implementation](https://marketplace.visualstudio.com/items?itemName=TomaszGolebiowski.GoToImplementation) - [Ref12](https://marketplace.visualstudio.com/items?itemName=SchabseSLaks.Ref12) - [Inheritance Margin](https://marketplace.visualstudio.com/items?itemName=SamHarwell.InheritanceMargin) - [Move Type To File](https://marketplace.visualstudio.com/items?itemName=OlegShilo.MoveTypeToFile) - [CodeCracker](https://marketplace.visualstudio.com/items?itemName=GiovanniBassi-MVP.CodeCrackerforC) - [SonarLint](https://marketplace.visualstudio.com/items?itemName=SonarSource.SonarLintforVisualStudio) - [CodeMaid](https://marketplace.visualstudio.com/items?itemName=SteveCadwallader.CodeMaid) - [VS Spell Checker](https://marketplace.visualstudio.com/items?itemName=EWoodruff.VisualStudioSpellChecker) I miss R# from time to time, but these extensions get you most of the way there for free. 
[This](https://blogs.msdn.microsoft.com/brada/2008/09/29/simple-introduction-to-extensible-applications-with-the-managed-extensions-framework/) tutorial shows you how to bootstrap MEF and also various ways to load plugins.
Drop VS and install Rider https://www.jetbrains.com/rider/
Anyone use CodeRush? 
with a little column typing, you can generate even large numbers like that pretty quickly. granted, Resharper's generation of them is faster, but I think i could make a 108 case statement switch faster than i could download and install resharper.
I'm looking forward to a time when Visual Studio won't be required and Resharper (Rider) will suffice.
Yes you are correct. If you look below you can see I figured it out.
LINQ does not really have versions. It's mostly the same today as when it was introduced.
And that is why I wrote my own add-in to do that.
My advice to you is to treat PowerShell code with the same reverence and care that you treat C# code. People with the attitude of "it's just scripting, meh" continue to perpetuate the vast amount of shit PowerShell that you see out in the wild. Not to mention how many times the "it's just a script" turns into a wild growth of overgrown thorny spaghetti cowboy code that your company absolutely relies on for critical functions. At the moment I am drunk, but I am not wrong. Clean Code matters, regardless of the language you are working in.
Resharper's refactoring feature is still far more comprehensive than Visual Studio. If I can buy just the refactoring part of resharper with lower price, I'd do that in a second.
I use R# at work and vanilla vs at home. To me it makes a big difference, vanilla VS is a very good IDE but VS with R# is absolutely amazing compared to my experiences with other IDEs and language combos.
Do you have a download link?
&gt;Go To Implementation Doesn't Visual Studio already do this out of the box? Just press F12
Not necessarily. If you are using interfaces it will go to the definition instead.
 Boy do I want to get off resharper needle. It causes so many slowdowns, but realistically - not any time soon. 
You didn't check one of the available options on **what** you want to profile.
This method seems to change some bytes? If I read the whole dump file, the end is this: 0x00 0x19 0x00 0x8c 0x1b 0x03 0x00 0x00 then when its separated its: 0x00 0x019 0x00 0x3f minus the last line In the original software (from the transport thingy) they use bitwise operators. Im reading on to these but i am no expert, maybe this has something to do with it? Cause for the time I need to get the 4 bytes, use the BitConverter class to convert them to a 32 byte int. And then I could use a Unix converter to get the time. Ty for you time btw!
[Done](http://imgur.com/a/2RMpc)
Actually it does use IL emit under-the-hood, see https://github.com/mgravell/fast-member/blob/master/FastMember/TypeAccessor.cs#L113-L198
Nice, that looks like a cool library, thanks for the link
Yeah, see the BOTR - https://github.com/dotnet/coreclr/tree/master/Documentation/botr I've learnt loads from reading through those docs!
There are free extensions which do all of that so long as you've got 2015. Code cracker and the other one has refactor in the name, not at my PC. The Roslyn compiler basically made what reshaper does much, much, much simpler to do, so as of 2015 you can find stuff for free. I haven't used it in a couple years and I don't miss it at all. Before 2015 it was pretty painful, but since Roslyn I just see no need to pay that kind of money.
It's a style of parser that's built using monads. Monads are a variety of 'elevated' or 'amplified' type (i.e. a generic) combined with a mapping to that type usually called 'bind'--but C# tends to use 'SelectMany'. A monadic parser may be generic enough to do a bunch of your heavy lifting for you, past supplying a stream of bytes (hence, an IEnumerable) to operate on and a format to parse into.
Well all that makes sense. Thanks! 
"[Adjust Namespaces](https://www.jetbrains.com/help/resharper/2016.3/Refactorings__Adjust_Namespaces.html)"
This guy gets it... if the pricing is right for Project Rider and you don't need any C/C++/C++/CLI stuff, rider is shaping up to be a much better alternative. Visual Studio for Mac was a huge disappointment. "All the things you hate about Visual Studio (big, bloated) with 1/2 the functionality! But it runs on macOS!" :facepalm:
On a side note, I thought it might be a good ideal to create a wiki for the reddit. I know we have the side bar, but I figured it would be nice to have something a little more comprehensive. Over the years (yes, long time lurker here), I've seen many posts like, Resharper or Just Code, etc, etc. And We could create a wiki, and then add the gist of those type of posts, and even a link to the post. Is this a good idea, does something like this exist (other than the side bar)?
A big advantage is that it hints when you could use a new language feature, so you can stealth learn the next version of c#
Looks like i got downvoted by MS employees :p
Different versions of LINQ could refer to LINQ to objects vs SQL.
Use Weight?.Value ?? 0; This will give you 0 if the weight is null, and the Weight if it's not.
Imo it would super weird to declare a constant at runtime. Doesn't seem very constant to me
I have Rider installed, but it's not there yet. The simple act of referencing another assembly, while it probably works somehow, is not as comfortable as with VS+R#.
LINQPad is good with its instant feedback on how the linq will translate into sqlquery. https://msdn.microsoft.com/en-us/library/mt693042.aspx That should get you started with linq. If you don't mind me asking how can you have been working with C# for years(assuming it since you found linqpad years ago) without using linq? 
Yep, I've mistaken when read first time. But your result still seems contr-intuitive for me, because I had other one year ago. From the other hand, it makes you article even more interesting. 
It only works on `Grid` columns/rows.
LOL... Don't know about that, but I noticed that mentioning Rider &gt; VS around these waters is met with discord. :) Also I don't know why Rider is not under the IDEs section on the right panel.
Again, this guy got downvoted just for showing love for Rider.
Ten at least. Coming from a database background doing primarily crud work in the application (and a data access layer to run sprocs into simple objects for validation or into data grids on screen), I've not often seen cases where that approach didn't suffice in practice, even today. I tend to also work on the business analysis side, and making a business case for LINQ in the kinds of work I've done has been difficult. With the initial implementations (or how people coded with them) coming across as slow, it seemed less pressing. I encountered a lot of people who said they learned it because it was new and in use. Some cited that it was better, but their arguments were primarily abstractions. I've heard arguments for linq that modeled those of arguments we had for OOP decades ago: you can be provider agnostic and switch data sources at will should your requirements change! But in practice, we rarely ever had to move from SQL Server to Oracle, and even if something like that happened, it seemed that there was so much tweaking on the database side that it didn't matter a whole lot about your abstraction layer. I'm certain I'm oversimplifying and my own experience just never seemed to merit learning LINQ, but the hardest thing to find the answer to in this field is: "What's the compelling business case or technical scenario where it's advantageous to use Technology A when Technology B seems to work just fine?" Sorry for the long answer. I'd love resources on answering that question, though. 
Making your titles all caps and spamming reddit with this is the best way to make people *not* want to even check out what you've built. You must learn how to appropriately advertise or else you'll never get anywhere with this. Look at how you're going about this from a different perspective and I think you'll start to understand why every last post about your servo has 0 upvotes. 
Setting up a DB connection string is the least of your problems by looking at your code...
Saving it for future projects. Thanks!
Reminder to other readers that JetBrains products are free for students
The Microsoft Defense Force is strong on reddit. 
I'm on VS2015 update 1 ... Ctrl+F12 didn't work, but right-clicked and there it was in the context menu!! I will now be happily adding the shortcut key ... :)
I use R# at work ... large code base with lots of devs, I consider it essential. At home, I've stopped using it. I won't say that I don't miss it 100%, but not really essential for code I know backwards and forwards ...
You should probably get them to do it
Hmm, my method involved creating and compiling lambda expressions for each getter and setter: foreach (var prop in props2) { var objParm = Expression.Parameter(prop.DeclaringType); var valParm = Expression.Parameter(prop.PropertyType, "val"); var getMethod = prop.GetGetMethod(true); var setMethod = prop.GetSetMethod(true); if (getMethod != null) { var getter = Expression.Call(objParm, getMethod); PropertyGetters[prop] = Expression.Lambda(getter, objParm).Compile(); } if (setMethod != null) { var setter = Expression.Call(objParm, setMethod, valParm); PropertySetters[prop] = Expression.Lambda(setter, objParm, valParm).Compile(); } } I wonder which is more efficient?
This subreddit has a wiki, but when I go to it, I get an access forbidden message.
I wrote my own library that loads any icon font and converts it to cached XAML geometries on the fly as needed. I also have a wrapper 'GlyphIcon' control that handles layering, animation, and making it look pixel perfect (even with a border). This allows me to use all of the awesome 'web' icon fonts as desired. My current goto is the IcoMoon set thanks to the 16x16 grid. I also have an exporter that creates an enum using the glyph names and the correct characters as the enum values like `Copyright = '©'`. This allows me to have 'named' icons in my XAML that can easily be identified by opening the .cs file in a text editor and applying the right font. 
I'm questioning Microsoft's coding practices even more when I see references to meth tabs in the code...
Free version. Been using it for a few years. Only had a single issue which was corrected within a day of me emailing the developer. He actually is very responsive to the community.
Paging /u/odinserj He is the owner/developer of hangfire 
if(list[1] == 2)?
Similar idea! I built up the caching and performance side quite a bit so that it isn't drawing a new image for each use (I use these glyphs in treeviews etc that have many copies of the same icon). The naive implementation can be fairly heavy. Also I had trouble with the built-in font hinting, so extracting and rendering the geometries looks better.
I tried it before and it didn't work for me but it wasn't because of some bug it was my error...I wasn't doing something right(I think)
If you wanted a method you can call in that fashion, you could write your own extension method, here's an example: public static class ListExtensions { public static bool HasValueAtIndex&lt;T&gt;(this List&lt;T&gt; list, int index, T value) where T : struct { return list[index].Equals(value); } } And use it like this: var myList = new List&lt;int&gt;() { 2, 3, 4, 5, 6 }; bool retVal = myList.HasValueAtIndex&lt;int&gt;(1, 1);
Yes. But in a sense it does behave like a virtual, there's nothing wrong with saying that. 
thank you for your time it helped a lot 
That's sort of the problem for resharper. Before Roslyn, doing what resharper does was an incredibly complicated process. You were really only going to see it as a paid adddon or an in built feature from Microsoft. Now addding refactorings and validation rules is pretty trivial. We'll see in 2017 whether these extensions get updated or not, which could give resharper a new lease on life, but it's high overhead.
Hey, what's a "virtual" in this context?
Get rid of the extra "{0}" string. [`File.ReadAllText` method](https://msdn.microsoft.com/en-us/library/ms143368%28v=vs.110%29.aspx) doesn't take a string and a formatting string like `Console.WriteLine` does. It should just read as: string text = System.IO.File.ReadAllText(path); Similarly, your other outputs where you have: System.Console.WriteLine("{0}", text); are superfluous. Just use: System.Console.WriteLine(text);
You're welcome, happy to help! :)
When you mark a method `virtual`, subclasses are free to `override` it.
You can override any method. `virtual` is if you want dynamic dispatch.
This was a couple of months back, and in no particular order:- * Stock find usages sucks ass in VS2015. The Resharper one is much better * Resharper test runner has more functionality than the stock VS one (though the stock VS one is MILES faster) * Resharper allows you to glance at a chunk of code and clearly see redundant code * Resharper has those green squiggly lines that say "hey you can do this, it might be better". I actually learnt to use all the new C# 6.0 features exclusively thanks to Resharper * A lot of our devs have a habit of writing the class in another class file and then `Ctrl + R, O` it out into it's own file. VS does not support that. * `Alt+Enter` has much more context sensitive actions than `Ctrl + .` ever did. It knows if I do Alt+Enter on the public keyword on a class that I probably want to make it internal/sealed/private. * `Ctrl+Shift+R` is great for seeing all possible refactorings in context. * Change signature, as well as change parameters is a god send. * Suggested types is really helpful as well (that's how I personally found out that `Func&lt;T1, T2&gt;` can be implicitly typed into a `Delegate`) * If you code from the outside in, then Resharper allows you do that with ease. * Mouseless navigation with Resharper is actually possible. We don't tend to use the mouse while in VS, everyone zips around just using the keyboard. I could go on, that's only off the top of my head. Resharper is a great refactoring and productivity tool. I would not work in a C# job without it.
You gotta make sure your list is at least that long. Also, remember that lists are 0 based
Resharper is tried and tested. We are not going to spend time (and therefore money) trying out different alternatives. It just isn't worth it. We pay something like $250 per dev for ReSharper Ultimate. We probably make that back very quickly. I know people have tried out things like [**CodeMaid**](http://www.codemaid.net/), but utlimately they are not as full featured as Resharper is. It is all there in one package. There was some murmurings about trying out [**CodeRush for Roslyn**](https://www.devexpress.com/Products/CodeRush/), but that hasn't been decided yet.
Sometimes it's worth taking the time to explore. VS 2015 is an unholy pig of an application and making it slower is not always great. There were a bunch of articles that were written back when 15 came out. It's worth taking a look at the lists they had. This one helped me https://blog.tommyparnell.com/vs-2015-getting-resharper-experiance-without-resharper/. Obviously YMMV, but I was kind of glad to be rid of it.
Creating a new method with the same name as a base method without explicitly overriding the base method is called shadowing, not overriding.
The testcase for `GetViaCompiledExpressionTrees` is doing a bunch of extra work compared to `GetViaDelegate`; for benchmarking you should instead try to test with: ParameterExpression instance = Expression.Parameter(typeof(TestClass), "instance"); Func&lt;TestClass, string&gt; GetDelegate = Expression.Lambda&lt;Func&lt;TestClass, string&gt;&gt;( Expression.Property(instance, "Data"), instance) .Compile(); [Benchmark] public string GetViaCompiledExpressionTrees() { return GetDelegate(testClass); }
I bet at least one doesn't know how the VMT works (or even that there is such a thing). The C++ VMT is basically the same thing as the C# MethodTable.
I'd add a check to make sure the path entered is valid: if(File.Exists(path)) { string text = System.IO.File.ReadAllText(path); }
For good measure u can throw in some other characters (point, comma, capital letters) because now it is 1 long sentence. &gt; Hello, i am trying to get the user to input a file path with a text file and get this file path so my program opens it and counts letters numbers and things like that i got everything else to work but i need to do it on a existing file path i put in the code Try to read it like it is written and not like u think it is written. If u want to hear how it sounds let your pc read it aloud. While you're at it, please format the code 🙂 &lt;/rant&gt;
Very interesting. Love R# and love IntelliJ... except for terrible way of creating new project or adding some libs. That was seriously the most f-ed up experience. Designer of that part must have hated it with passion :) Now VS people should be afraid of Rider. VS is still 32-bit with all the crappy consequences. 
Hmm, it is part of an add-in I wrote for work. I guess I could extract the pertinent routine. Have you written an add-in before? It is for VS2012 btw.
Hmm, it is part of an add-in I wrote for work. I guess I could extract the pertinent routine. Have you written an add-in before? It is for VS2012 btw.
I am happy of any advice ;) I am an engineer, not a marketing guy . I just want to spread our Idea and rise the awareness. I am not here to convince anyone. We have only 3000 views at the campaign and around 7000$ I think this is a very good ratio. 
We obviously have completely different experiences. VS15 was much snappier for us.
It's not bad once it's loaded, but the first startup was painful. Ahh well finally got the time to get a fresh install, maybe it'll be better. 2017 certainly is, but it's not yet ready for prime time.
Try disabling all those extensions you have. Each one adds overhead.
Compared to resharper which does all the same things but the old way, no. I don't actually have many either. It's just first load, old PC, old OS, long time since it was flushed.
IntelliJ released a public early access build to their C# IDE called Rider. I'm pretty sure it has (all?) the same functionality of Resharper, and it's built in. 
Real world experience will always trump a certificate, however if work are willing to pay for it then you might as well.
Perfect example of how to not answer the question
Yeah he didn't answer the exact question that OP asked but he is right. I think its a valid answer. 
IDK, I'm a big fan of IntelliJ's IDEA, and they are making a C# IDE called Rider, which I like as well. 
Because people like my last boss think certificates are the acme. It allows people who memorize a brain dump to feel like they have something more than the people who work in the product day in and day out for months. This same dude went through the trouble of getting his CCNE and MSCE, sql administrator, and VMware. He can't do firewalls, gpo, migrating computers from Novell to AD via script, database redundancy and HA, and didn't have a clue of how to use terminal on ESX to view logs. He has engineer level as certificates without the functional and applicable know how. All in all when I see someone with a certificate, I'll consider them for the job - but the first time they are unable to complete a task they are certified in, in sending them to the house as a liar. Edit: Corrected certification initialisms - also this guy said the certs bestowed titles. 
Oh alright. Well thanks for the advice.
This is not stackoverflow; it's a discussion website.
I had to implement something similar to https://arxiv.org/pdf/1211.5842.pdf and ended up using Prim's to find the interior walls of a house when creating the corridors.
something something T4 Template. Or at the very least Linqpad+dirtycodegen. public IEnumerable&lt;string&gt; GetEnumValues&lt;TEnum&gt;() { return (typeof(TEnum) as TypeInfo).GetMembers().Where (x =&gt; x.MemberType == MemberTypes.Field).Select(q=&gt; ((FieldInfo)q)).Where (q =&gt; q.IsStatic &amp;&amp; q.IsPublic).Select(q=&gt;q.DeclaringType.FullName +"."+ q.Name); }
It was never "required"
&gt; Because people like my last boss think certificates are the acme That's a good filter for the candidate to apply, then.
I think you missed the point of the post. I know they're useful to know but I'm looking for examples of use. Also I'm not sure why you quoted "actively"
Right. He was demoted. I fired the lot for incompetence. Oh how the tables turn. Have fun checking the box you were fired and not eligible for rehire. 
Removed: Rule 2.
Admittedly yes
I work on Kiln, which includes hosted DVCS tools. The main data structure of a DVCS is a directed acyclic graph, so I deal with a lot of graph traversal and sub graph code.
The problem with certificates isn't the content or the study. Certificates generally do describe great skills to have for a certain technology or job description. Some of them are a little scattered, and others are too specific, but the knowledge base is not the problem. The problem is brain dumps. If you're given a multiple choice test in a testing center today, then I can guarantee you that at least 90% of the questions on that test (whatever test it is) have been leaked to the internet and can be downloaded for free. So the certification itself becomes worth a lot less, as any idiot that can memorize multiple choice answers can now pass the test. What you did: read the study guide, work with the technology -- that's what you're supposed to do for a certification, and that's the right way. But it's not the most common way that people achieve tech certs today.
!RemindMe 1 Day Check replies.
I will be messaging you on [**2016-12-18 23:49:03 UTC**](http://www.wolframalpha.com/input/?i=2016-12-18 23:49:03 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/csharp/comments/5ix1bf/good_advanced_c_resources/dbbnnpl) [**6 OTHERS CLICKED THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/csharp/comments/5ix1bf/good_advanced_c_resources/dbbnnpl]%0A%0ARemindMe! 1 Day Check replies.) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! dbbno34) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Just curious, why aren't you a fan of Jon Skeet?
Solution explorer is slow as shit when you have a big solution. The one I work on has maybe 5K files and maybe 2 million LOC. It doesn't take days, but it doesn't compare to reshaprer which works lightning fast and I don't have to click out of the editor window. 
Never. Not once. I make database applications though. 
As other posters have mentioned, certificates hold little to no value in the industry. However if you want to learn by working towards a goal, then I can recommend an app called "SoloLearn". You can learn many languages on this app and at the end of all of the courses you receive a certificate. 
I just finished reading *Writing High-Performance .NET Code* by Ben Watson and I'd highly recommend it. The two main topics are garbage collection and JIT compilation. But he also touches on asynchronous programming, how the generic collections are implemented under the hood so you understand their runtimes, and other topics. Highly recommend. Personally, I'm focusing more attention on dotnet core since that seems to be a big part of the future going forward. As the CLR via C# recommendation was made, there's not a book on the CoreCLR yet but there is good documentation for it at https://github.com/dotnet/coreclr/tree/master/Documentation I'm curious what some of the other recommendations are as well since I'm looking for some new material. 
If you have a Pluralsight account, view Zoran Horvat's courses. This guy's content dives deep..... really deep. You'll be tested for sure. https://app.pluralsight.com/profile/author/zoran-horvat
All the time. Dictionaries and trees. True cyclic graphs? Sometimes. Anything that operates over an arbitrary object model ends up requiring you approach it as a graph.
Just guessing here, but do you have a `using System.Collections.Generic;` statement at the top of the file? It's one of the default `using` statements, and contains a Stack&lt;T&gt; class. On that subject, is there a reason you're defining your own Stack implementation instead of using the built-in class?
I quoted actively to sorta emphasize it. The last time that I used these for instance was when working on an Interactive Voice Response application. You know the kind that call centers use: "for sales department press 1, for support pres 2" etc. They wanted to be able to design the decision trees themselves but, since it allowed cycles, it was not a tree but a graph and these algorithms came in very handy.
[C# in Depth](https://www.manning.com/books/c-sharp-in-depth-third-edition) by Jon Skeet is also an excellent book.
Clarification: I want to be able to click on instances of Objects within a list
Do I need to learn console to work on form applications? 
You do not. 
I think that's a change or selection change event. Look it up.
Ugh. As a black programmer I'd feel a lot less comfortable if I felt like other people would look at me and think I was only there because of some "diversity" push by the organisers. I'd feel a lot more comfortable if nobody ever mentioned "diversity" or how much they care about it and I appeared on a panel and everyone would know I was there because of my merit and nothing else. &gt;I won’t personally speak in any white-male-only panels of three people or more. Ideally, I’d like to see efforts for there not to be any such panels. Jesus Christ
Thanks for the reply, I'm farely new when it comes to working with Applications that involve getting something from a website/server, So I don't really understand what you are getting at, Please could you explain a tad less advanced, Sorry for any inconvenience.
Projecting IL could be of interest you. This is key for high performant NET code. Try this https://www.amazon.com/dp/1590596463
He gave u the code, now it's up to you to make an effort
I haven't tested it, but this code should work. If it doesn't feel free to reply with any problems. http://pastebin.com/imHF43ST If you own the website (I'm assuming you do, as you're implementing an authentication system for your program...) then you will want to change the page to output a delimited list (If you don't know a term, google it! There's no shame in it, it's how everyone learns :)) or alternatively, JSON/XML. In the example I've given, it uses a delimited list or JSON.
No I don't. But I came here to see what kind of stuff is available, since I was genuinely interested. I just got frustrated because the top comment wasn't even one that answers the damn question! That is, frankly, annoying. What if I posted a math question to r/MathQuestions and the top answer to my question was "how about you just learn math?". It has no place and is annoying. It's ok to share you opinion, but the question wasn't "should I get a certificate?" It was "where can i get a certificate"
http://www.albahari.com/threading/ This is a very good resource on threading in C#.
Yeah, nevermind. I'll try to figure out what is wrong. Thank-you for responding.
I don't think that's possible unless you use a view binding technique like in WPF. When inserting data, just set the tag of that list view item to the correlating id. Then, when then item is clicked, you should receive an extra parameter with the data. Should be able to do listview.GetItem(e.Position). Something along those lines.
i'm gonna check those out, thanks mate
agility pack hasnt been updated for ages, use AngleSharp
Looks great. I'll have to look at it the next time I need a library for this purpose. 
Mark Seeman's blog has amazing stuff. He's mostly moved on to F# now but his archives still have all his C# stuff. http://blog.ploeh.dk/archive/ Reading his blog and doing additional reading based on his content will push your understanding of OO design into that top 5% of developers whether you agree with all his points or not. Really high quality advanced content.
Seconded! Fantastic library
Removed: Rule 4.
Supercharger does indeed look good. How is performance?
You don't really need to "learn" console applications. There's next to no additional stuff to learn on top of the language itself.
He's a hiring manager who's trying to have the OP avoid wasting time and money on something he feels is worthless (in his opinion). 35 votes as of now, tells me his response was pretty valuable even if he didn't answer the question directly. 
Honestly haven't noticed any impact I can obviously attribute to supercharger and not something else I've got. Worth the free trial obviously. 
It's very pointless to say it as so.
this isn't bad: https://www.codeproject.com/articles/1041115/webscraping-with-csharp
There are a few options. You can host it remotely off a dedicated system. You can set it to run at the startup of your main system. You can run your system 24/7 Those are your three options my friend. The are probably a couple more interesting possibilities, but those are the the primary ones to consider.
&gt;This will also spike your CPU to 100% as well, correct? No, especially not when there are network interrupts or Thread.Sleep in the loop. while(true) in a task/thread with sleeps would be perfectly fine.
Not a good approach if you think this through. Continuous web requests in a loop is inefficient, unnecessary, and the equivalent of a one man DDOS attack which will get you cut off from their server. A task that runs a single request every few minutes is more than enough for the task at hand. 
I didn't mention it because i assumed everyone would know not to just run without sleeping, but yes you will need to sleep.
No problem with a continuous loop, I just thought about it without sleeps or (better) semaphores or some sort of control mechanism and my reaction was negative ... 
&gt; nicer and safer object and collection initializer syntax. That's relative. Having rigid constructors can be a chore, but it makes intent much more clear (I -MUST- give classA both Herp and Derp, classB can take just Foo and doesn't need Bar necessarily.) I'll agree that implementing Immutable objects via constructor is a LOT of work, but it doesn't have to look too ugly, named Parameters on the constructor make things much prettier. The bigger point is that not everything has to be and in most cases you don't WANT everything to be immutable. But the concept is still a very useful tool in taming an unruly/large system.
What fires the request every few minutes? (Or did you mean a windows scheduled task as opposed to System.Threading.Tasks)
The correct way to implement this is through a Windows Service hosted on an always-on computer. That allows the application to run immediately when the computer starts, without needing you to log in to trigger startup processes. Another way is to run it through a scheduled task. Obviously the program won't run if your computer is turned off so you may need a cloud service like AWS, [which gives some free stuff to students](https://aws.amazon.com/about-aws/whats-new/2015/05/aws-educate-students-and-educators-can-access-aws-technology-cloud-courses-training-and-collaboration-tools/).
That is getting into implementation details, which all depend on what is available. If the school's website supports websockets then you'd want to use that instead of continuous polling.
Yeah that's a legit point. But I'd be very surprised if it were anything other than html. I doubt it would even use long polling. I'm only saying this because I know most college sites I've seen are awful and use really old technology.
Azure has some credits and college students might get more. There are some free-tier services. Does your school registrar not have a built-in waiting list though?
Warning to you, OP: a lot of colleges *really* don't like it if you write programs that skim their registration sites. I've heard bad stories of students getting suspended or even expelled for similar projects. Hopefully your school isn't this dumb, but you never know. 
The System.Timers.Timer class could do this. You'd just start the timer again in the Timer.Elapsed event.
You can snag a $35 Raspberry Pi and `sudo apt-get install mono-complete` to compile and execute C# on Linux. You can run one of these things for a whole year for like $5 in power.
&gt; udo apt-get install mono-complete alternatively you can install windows 10 IoT and build your package in Visual studiousing UWP
Any reason why you would choose Mono over DotNet Core? 
Azure Functions or AWS Lambdas 
TBH I haven't used it yet.
Not sure if this is your problem, but from a quick glance I noticed this: &gt;foreach (REPurchases x in RE) &gt; { &gt; int a = 0; &gt; data.mult[a] = x.multiplier; &gt; data.count[a] = x.count; &gt; data.cost[a] = x.cost; &gt; a++; &gt; } You are setting a to 0 every time you iterate through the foreach You also do the same thing in the foreach in Load()
I found ways of doing it the easy way, but ended up limiting what I could do. Then I found Selenium and Chromedriver. These are almost braindead easy to learn and they go a long way. Don't have any links for you atm, but anything Selenium C# will likely give you lots of reading.
Or just use .NET Core instead
Which, btw, was the best developer experience I ever have. Sadly Win10 IoT don't have any driver support so it only work if you plan to use the bare hardware, but man, debugging and remote deploying from the VS was fantastic!
If you need the full .NET framework, then Mono is the only option really. .Net Core is a subset, for now atleast. 
I have used HTML agility in the past.
That's actually deliberate, the issue with 'GetViaDelegate' is that you need to have access to the actual type at compile-time, so you can do the cast. See this section of the blog post for more info http://mattwarren.org/2016/12/14/Why-is-Reflection-slow/#option-3---create-a-delegate
I'd built it into a free tier Azure web app and have it run once an hour as per what the scheduler allows. You might even have it enroll you if you want to get really keen and automate it or just have it email you when an opening happens. 
I've been coding for around 25 years, 20 of them in web dev, and have never once seen a legitimate use for a web scraper. If the person who owns the content of a website is happy with you accessing it programatically, he will have an api You can learn how to work with html without using up anybody elses bandwidth or messing with their analytics. You see the page you're on now? Right click, view source, copy. There's some html. Paste it into your code.
2 reasons I've had to do it this year: 1) Checking competitor prices daily and compiling the results into a marketing analytics dashboard which charts trends over time. 2) Compiling a list of reviews from various review websites then analyzing them for sentiment and compiling them into a simple platform for hotels and restaurants to track their reputation. Both cases there was no API.
If anything, C# is not a great option. When I was in uni with the same problem, I used javascript on the web page itself to continually try to enrol me. No need for a text or email as it does itself.
I agree, this is overkill for a single use and does not have proper out of bounds checking. The intent was to just demonstrate how an extension method could be used to enable the desired syntax.
&gt; VPS FTFY
oh lol I'm a retard, thanks.
Use an Azure web job. Sign up for a student Msdn account and you get some free money too. 
Don't use the binary formatter, it's practically (if not actually) deprecated. Use `DataContractSerializer`, for instance, or serialise to JSON or something. Also, use `using` statements instead of manually closing files.
You have to learn to Google, at least. That would answer your first question far quicker and more comprehensively.
I've been programming for 5 years now. I've not been to university, but everyone I know has told me it was a complete waste of time and money. If you're going to be using C#, learn it from the start. Otherwise you will likely struggle greatly moving from one language to it. If you learn it from the start, it will force you to learn good habits for the most part. As long as you force yourself to continuously learn, you should get to wherever it is you want. I've never read a programming book, I've only ever learnt from other people and their posts online. Stackoverflow is a great help. If you ever need help, I'd be happy to! Just drop me a PM.
Do you call a soloist the equivalent of a one man orchestra too?
What do you mean learning from the start? I mean I've been learning all the basic terms and things, such as what variables are, and types and classes and what they do and how to use it.. is that what you're referring to?
You can learn c# and mvc at the same time. C# is the language, MVC is the pattern you use to build things in that language. But design patterns aren't important if you don't know what a collection is or how to itterate through it. So if you don't know how to write code yet, don't worry about MVC for now. Just start learning c#. The links on the right side of this page will get you started. 
Yeah I see that. But it means the times are not comparable in these benchmarks because the code isn't doing the same thing. 
I was recently interested in a related problem: save the main content of a page. The obvious solution is to get the content and manage it using a library like [AngleSharp](https://github.com/AngleSharp/AngleSharp/wiki/Documentation), that uses a jQuery-like API //Get all li elements and set the test attribute to the value test var elements = document.QuerySelectorAll("li").Attr("test", "test"); Another one is to use a specialized library to extract the kind of content you are interested in, in my case it was [ReadSharp](https://github.com/ceee/ReadSharp). The third, more complicated way, [phantomjs](http://phantomjs.org) or [CefSharp](https://github.com/cefsharp/CefSharp). CefSharp can be used as an headless browser and is easier to use while PhantomJs is an headless browser that is multiplatform, but is more difficult to use. You need to launch the program from C#, using ProcessStartInfo/Process, see an example of the workflow here: [How to use asp.net and phantomjs to take a screen shot of a page and return it to the client](https://stackoverflow.com/questions/16165755/how-to-use-asp-net-and-phantomjs-to-take-a-screen-shot-of-a-page-and-return-it-t#16299343). The advantage is that you can easily manage javascript and create something that can reutilized for other projects and platforms.
It was, especially if you came from strong c# background and don't really want to use python or java (or mono). But as I said: there is (right now) no driver support AT ALL. It works with USB mouse, keyboard, there is like three/four different Bluetooth stick which is supported, and that's all. But VS made it very easy to use, there is a nice little tutorial how to set up everything and how to deploy. Accessing the GPIO was easy to use and natively supported. Basically after you copied the IoT on the SD card it too about 5 minutes to write and deploy an app which can blink a LED and detect a button press. I really hope they will expand the framework and add driver support somehow.
I really don't know why would you use log4net over Nlog.
Thanks for the info. I am not too worried about driver support since I plan to use the Pi as a small web server. Will give it a try in my winter vacation. Really looking forward to that! :)
The article is about MVP pattern and how it can be useful in developing forms application, not about forms replacement
It's possible for you to make the move over to development if you're motivated. Age is not an issue. I got into it after leaving the service at 26 yo. Try to find an opportunity for a small project that will increase productivity in your current department. Ask someone from dev to take a look at your code. That might be your foot in the door over there. Code in your free time. The ability to deal with sleep deprivation is a big plus. Best of luck.
So... just a DoS attack.
Yes I've been doing some exercises and things (building up my little apps and things, using the Console.WriteLine() and the Console.ReadLine() to read up information from the user, and then converting it to int, doing list, working with IF statements and Switch and things.. nothing to fancy.. ) But so far I'm not sure where would be a source to get more exercises with answers online.. I don't even know if that's the best way to learn, I usually try to figure out myself, and then when I get stuck, I think about it and try few things, but then I run out of options and start looking it up online.. is that a "good practice?" or should I just figure out everything by myself? I haven't really study on my own ever.. I went to school and things, I was very good at school but now that I've been away for such a long time... I can't seem to remember a lot of things :/
Worse, this guys article has no abstraction. So well done, you've now tied log4net into your application for no reason at all, when it takes maybe 10 minutes to instead write an `ILogger` and `ILogManager` with implementations for NLog or log4.net, and then inject that `ILogManager` into your code.
Good to know.
I highly recommend doing something in Azure Functions. It's really cheap. I've been running three functions for about two months it's totaled up to be about $2 dollars. I'm sure you could get some Azure credit somewhere. (I have mine through work.) If you have questions or need help setting this up, let me know.
Not too late to start. Having 3 kids in my 20s was actually a great motivator for me to work hard at learning programming. I would also recommend a book called Code Complete. It helps you learn good techniques for coding, regardless of language.
A software engineer's #1 tool is the internet. There is nothing wrong with googling for a solution, as everyone does it. Try to figure it out yourself, but if you can't, just google it :) Don't copy and paste though... Won't learn much from that. I learnt by thinking of projects and just making them. Surely there's some things that you'd like to have which would make your life easier? Even if they already exist, it may be a good learning experience. Remember, no-one can be expected to remember every little detail. Stackoverflow and dotnetperls are the best resources that I've found. Definitely use them!
Ok thanks for the advice!! :)
When you say don't copy and paste what do you mean? the answer is the right one, what else can I do with it? 
Write it out yourself. If you just copy and paste it, you will forget the details of it. It's like revising the times table, you had to repeat it several times in order to remember it, right? Also, in software engineering there's never really only one answer. There's tons of ways of doing things, but there are trade offs involved. Such as readability, performance and modularity.
It's too late only if you believe it's too late.
then is not too late!! :) thanks :D
This is super important. You will type something wrong and it will all blow up. Then you will spend an unreasonable amount of time finding a missing return statement or damned ; or something similar. Those mistakes are the most powerful teaching tool you have available to you.
Azure scheduler actually allows any crond style recurrence. A webjob can even be continous.
You could.
oh ye I've already seen that.. I've spend already hours just looking at a code and wondering why the hell they don't work, only to seen that I've just missed a comma or something... is soooo frustrating!
oh right, thanks for all the advice! I'll probably ask you a few things in the future when I get stuck...
I just use something like selenium webdriver and grab the html, then parse it to whatever I want. 
you can have a scheduled task launches a console app. Have the task run every 5 minutes or so and it should be fine. 
You fail the turing test and will now be wiped from memory.
&gt;is it even possible for a 29 year old to change career this late in life? I'm 46 and doing a data science course to get back in to IT after driving heavy vehicles for 9 years. So 29 is definitely not too late, lol.
[Pretty high compatibility](http://www.mono-project.com/docs/about-mono/compatibility/) as long as you don't use anything obviously Windows-specific.
Oh wow it looks like it's improved a lot. It was missing a LOT of core 4.x features and even some 3.x features a couple years ago when I last used it. I'm a Java dev though, so I'm used to using that on Linux and .net on windows.
Pretty neat. After a very shit and completely bogus compiler and languages module at university (thanks University of Huddersfield) I've been completely put off ever wanting to do any kind of language/compiler design. I think they are fascinating but after spending weeks trying to get some shitty yacc/lax thing to work with no help at all from the lecturer I've never wanted to do it again (one person out of 30 passed the module...), but ANTLR seems nice and this one actually has unit tests unlike every other article ever. I suppose it could be useful for making small DSL's too not just whole languages.
Especially if it's something like Unity, best to learn good habits of efficiently packing/serializing data now rather than later. OP, look at https://github.com/mgravell/protobuf-net (Good for quickly and efficiently packing data) or Json.Net (Still better than BinaryFormatter, very human readable, something something webscale)
Glad I wasn't the only one. &gt; Building full languages remain a complex task Very true, and there is the whole type system, oop, compiler intrinsics, I could go on haha. None of that was mentioned in the course at all. Roslyn is pretty cool, it's nice to see a compiler with an API, that's a pretty novel approach and it's awesome. 
Which seems like a really silly position to have, given how complicated and arcane the design of C++ is. Understanding the language itself - nevermind how machines work, etc - is a gargantuan task. I'd love to see how much your colleagues understand undefined behavior in C++.
By the way I am building a book exactly on this (type system, validation, compiling, etc). I do not report the link here to not spam but it is available on my blog, in case someone is interested.
Well, I have to admit they are pretty good at what they do. I say they write C++ but it is really C with classes so they can use a GUI without writing the GUI code themselves. I would not ask them to do anything that involves the internet. They are great with UDP on closed controlled networks and communicating with custom hardware.
Thank you so much, this helps me a great deal. I need a domain specific language for some coursework and the blog in general is turning out to be useful.
So, I'm sure youve told the team that you're battering their bandwidth and they're cool with that, or you're contributing to their hosting costs, or you have at least told them that their analytics are probably screwed. And obviously you turn this system on and off so that you don't cost them a fortune for the rest of the week/month/year
Ethics aside, I think this is a perfect candidate for using Azure Functions, you can set one up on a timer and get it to send out either an email, text or some other form of notification. 
This is a typical dB design problem. Look into normalization examples on line. You need at least 3NF. Don't put everything into a wide detail table. It will haunt you.
You are coming off as an idealistic nightmare. Talk about red flags, if you were on a team talking like this I would avoid that team as I know this would just be the tip of the iceberg of a very long list of peculiarities that make you difficult to work with.
Removed: Rule 4. There are plenty of tutorials and resources on how to upload files. For example, you could use the [`FileUpload` control](https://msdn.microsoft.com/en-us/library/ms227669.aspx).
I would definitely use selenium for this purpose. http://www.seleniumhq.org/. It is a browser automation tool and the things that you can do with it is countless. You can easily manipulate the DOM through your C# code. It can also inject JS into a page (which means you can also use the power of JS if selenium C# libraries are not enough for the purpose)
Yes, what is missing right now is a way to link the order detail line item to the part order, or repair order, etc. 
Competitor analysis is a major part of marketing. This goes on manually already. You do know that you can use something like protractor to control chrome for scraping. Alternatively you can set the user agent to whatever you want. Are they going to block the user agent from for chrome? It's great to see that you know better than me on the projects I've worked on. You must be brilliant. this must be the reason why startups discriminate against developers over 35
We made our view models conform so that the vast majority auto-mapped (95%-ish). If anything more than say a third or so required configuration, we switched to manual mapping since at that point there was not so much auto-mapping but obscured-by-configuration-far-away-mapping. Things we'd fix were weird prefixes. Like flattened "HomeAddressAddress" etc.
It helps if you understand rs232. In rs232, there are always two types of devices - data terminal equipment (dte) and data communications equipment (dce). For example, take a Pc-modem-modem-Pc system. The left pc creates and consumes data and is connected to the left modem. The pc is a dte, and the modem is a dce (it just relays whatever it hears). The modem talks to some data network and is somehow connected to the right modem, which is also a dce. The right modem connects to the right pc. Again, the modem is dce and the pc is dte. So if you have four devices: Pc-modem-modem-Pc, then you have the following chain of roles: dte-dce-dce-dte. Notice the dtes are always on the end (that's why they're called *terminals*). When a dte wants to talk to a dce, it has to signal so - some devices expect more than just reading and writing bytes. For instance, a modem might not do anything until you signal it. I work with RF transmitters that don't put out power until you assert RTS (request to send). So the answer is probably that you're not setting the data terminal ready pin, or the request to send pin, so that GPS isn't bothering to write out data for you. It works in TeraTerm because TT will set those pins when you open the connection. 
&gt; \#RepairOrder.Id, #PartOrder.Id as a new table to link these two? Normalization.
While this might be considered bad manners seeing as this is /r/csharp, if you want to scrape the web you should really have a look at the F# HTML TypeProvider (http://fsharp.github.io/FSharp.Data/library/HtmlProvider.html). You are not going to be able to get a better experience scraping the web than this on the .NET platform. Mixing F# and C# in the same project is not that hard, so you could still write the rest of your application in C# but just have a single F# project in the same solution for being able to use this. When it comes to things like this, you just can't beat F# - and since you are on the .NET platform you really should use that to its full advantage by taking advantage of the easy interop between languages when it can save you a ton of time and headaches. :)
There's a code sample [here](http://stackoverflow.com/questions/6052992/how-can-i-disable-close-button-of-console-window-in-a-visual-studio-console-appl) which shows you exactly how to do it. The only thing missing from that code sample is that you'll need to add a "using" statement to reference the System.Runtime.InteropServices namespace. The static extern methods, together with the DllImport tags above them, tell C# about the existence of non-C# functions that are part of the core Windows library. Then, you use GetConsoleWindow to get a "handle" that references the console window. Pass that to GetSystemMenu to get a handle to the console's menus. Then, pass that to DeleteMenu, along with a couple of flags, to delete the menu. One of the parameters to DeleteMenu is a flag which specifies which menu it is that you're trying to delete, so we pass in a constant that represents the Close menu.
Happy to read that! Yes l
Agreed to a certain degree. It's true that for the majority of scenarios there is a software package available that already contains the most of the features you're looking for. However, and this is a personal preference, I usually hate having to learn the (structure/framework of the) concerning package thoroughly and making clunky module/add-on/extension-esque constructions in order to add that last 20% that I need. I too usually resort to making stuff myself. If you've been programming for a few years, you can re-use/replicate a lot of your own code as you make more websites/applications as well. There are people that are perfectly fine with adapting to some third-party's exotic framework/database/codebase to add that last 20%. Once again, it's a matter of preference.
First of all, name your controls. button3, listBox1 and listbox2 mean s**t. Right now u might know what they do but when u come back in 6 months to work on it again u will be lucky to guess what that does. What i would do: make a list containing **your** numbers. make another list containing the **winning** numbers. Intersect both lists var myNumbers = Enumerable.Range(1, 10); var winningNumbers = new List&lt;int&gt;(){2, 4, 6}; var result = myNumbers.Intersect(winningNumbers); string.Format("U have {0} correct numbers", result.Count()).Dump();
Just check monster.com and you should get a feel for demand. C# consistently is in the top 10 slots for software languages in terms of popularity, albeit at a much lower percentage than java. http://www.tiobe.com/tiobe-index/
The underlying principles are fit for any language. Don't learn to program C# - learn to program.
Don't try to improve on that, improve on that What was the answer?
Removed: Rule 4.
Can confirm C# in high demand right now. No sign of that dropping off in the next few years anyway. Absolutely no harm in learning other languages in your spare time of course, the jargon is different so it's good to know what translates.
37 years old, i started Web Development when I was 30, at that time I was a truck driver and the only place I could study was at a Starbucks because I couldn't afford internet at my house. I had a wife and two kids and one on the way. I got up at 4:00am read books till Starbucks opened then sat and drank a single cup of coffee and did tutorials. I started in PHP, did that for years up until about a year ago when I was hired into a company transitioning to MS products. I have spent the last year diving deep into .NET and C#.. Does Ageism exist in the tech community.. yes, but if you really enjoy the craft and get into it you will succeed.. Most clients prefer to look across a table at someone who looks like they do, and not someone who looks like they just finished eating a hotpocket and playing Xbox... Age is not an excuse to not try... 
I have considered not using the Repository pattern but I was told we couldn't change it because this is how it has been done up to now and we don't have time. Despite the fact that it was the first month of the project. We're in the 6th month now but luckily I'm out of the project in 3 days.
Are they pass-through repos as well?
Hey, I do dependency injection using simple injector. None of my services creating instances, so I do mock the repos and test using in memory data.
To me it sounds like your repositories are based too much around your data model and not your domain model. If you are finding that the same type of service layer calls are always requiring the same repositories used together then it might mean that those are not actually part of the same domain boundary, and might benefit from being in the same repository then. Just because you have a table `Foo` and a table `Bar` doesn't mean you need one repository for each, especially if `Foo` entities turn out to be a domain root for `Bar` entities.
What do you mean by "pass-through"?
I wouldn't use Entity for a game. 
EF is way to much of a bottleneck for this use case. Look into ADO, or Dapper. ADO: https://msdn.microsoft.com/en-us/library/e80y5yhx(v=vs.110).aspx Dapper: https://github.com/StackExchange/dapper-dot-net While EF is awesome, it is not a golden hammer. To actually answer your questions: &gt;I would like to know if it's "safe" to have that much applications connecting to the same database and perform operations? As long as the database is ACID compliant then it doesn't matter how many applications are connecting (assuming the DB allows that many concurrent connections). SQL Server is ACID compliant. &gt; Considering there is at least 4 applications + multiple tools that will access/edit database data, what would be the best design? This is an application specific issue that you get to figure out. Application architecture is one of the many joys of programming. If you really don't know where to begin, look up some books on multiplayer game design. &gt;I've seen a lot of projects that have splitted the DAL and the entities in different projects, may I ask why ? What are the benefits ? Tightly coupling your DAL to your Business Layer is, in general, not a good idea. If it turns out that you went with EF, and that the bottleneck was to large, then you don't want to have to rewrite the portions of code that affect how it operates. You only want to have to touch code that corresponds to getting the data out of the db, and mapping it to what you're using. &gt;Can I do instead just a "Database" class library that contains my DbContexts and my entities ? You could, and for smaller projects it's almost recommended. For server level architecture I'd really advise against it for the reason I listed above.
It's safe to have multiple applications hitting one database, there are issues that could arise such as locking etc but with proper design it shouldn't be an issue. The big concern would be how slow EF is, I personally wouldn't use it for my DAL in a game, if you want to use an ORM look into a really light weight Micro ORM like Dapper.Net
&gt; Even if you want to bundle everything in one desktop app, you should separate the parts. I agree. A separate business object layer will help with unit testing and will allow your code to move to another platform, like Xamarin or the Web, if that option comes into play at a business level later on. 
Ah. That's not been my experience with some of the GPS units I've worked with.
Sometimes they contain LINQ queries but most often they are a dumb wrapper around EF and even accept Expressions so they provide literally no value as they do not even abstract EF away. They are your standard generic repository implementation from all the stupid articles over the internet
I guess your location does count a lot for it, I was recently looking for a c# developer role having only done a little c# in projects in my last job but enjoyed it more than my last job role which was very ms SQL heavy. There didn't seem to be a lack of jobs and a lot of junior roles too. It's easy having c# knowledge if you want to go into other languages as you'll find big similarities in others like JavaScript so don't feel that once you have chosen a language to learn you will be stuck doing it forever even if you want to do another in the future. 
Well, `Expression` in itself isn't something that is EF specific, and if you use POCO objects for DB mapping you're also not EF bound. What does bind you to EF is if you're relying on ORM detecting changes in your entities (which is really, really nice, but that's one thing that isn't immediately obvious). In my personal experience I've not seen even an attempted DB ORM change; it has all been evolutive (f.ex nhibernate used in "old" classes and supplanted by EF in newer stuff and then move to CQRS style Dapper/EF).
There is a lot of freelance web programming work out there doing sites for local businesses and "idea people" with more money than sense. That work can be poorly accomplished by any high school kid who has decided to call herself a "programmer" because she learned some node.js or some PHP. That'll be a good gig until you get three or four customers then you'll find that you are spending all of your time on unbillable maintenance work. Yes, you are unlikely to find many jobs of that caliber that require C# skills. There may be fewer jobs than some other languages but they are better jobs that you can make a career of rather than shit work awarded to the lowest bidder.
Ah, that Java stack trace... So glad I'm a .NET guy now :P
I agree that exceptions are stupid for simple cases like parsing an int or double but anything deeper than 1 level does not work that well. We had "no exceptions" code before. It sucked and thus exceptions were born. For example C has no exceptions and code with return code checking after every step is a nightmare. 
You need to be more specific.
Thanks, I'll give that a shot!
I switched from .NET to Java... Quite a culture shock 😀
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [\[x\/post\] I am a developer of the new Live Unit Testing feature in Visual Studio 2017 looking for feedback or to answer questions you may have.](https://np.reddit.com/r/dotnet/comments/5jf0bi/xpost_i_am_a_developer_of_the_new_live_unit/) - [/r/programming] [\[x\/post\] I am a developer of the new Live Unit Testing feature in Visual Studio 2017 looking for feedback or to answer questions you may have.](https://np.reddit.com/r/programming/comments/5jf03n/xpost_i_am_a_developer_of_the_new_live_unit/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Use it. Especially to avoid coupling models and circular references. 
This worked great, and now I am getting the data! I only keep running into a hitch now where after it grabs some data, it gives me 'An unhandled exception of type 'System.IO.IOException' occurred in System.dll'. If I just keep continuing the program from the error, it will continually spit out the data until it shoots the error message again. Any tips on getting around this? my code now: using System; using System.IO.Ports; using System.Threading; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace SerialPortProgram { public class Portread { public static void Main() { Console.WriteLine("Available Ports:"); SerialPort.GetPortNames(); foreach (string s in SerialPort.GetPortNames()) { Console.WriteLine(" {0}", s); } Console.Write("Enter Desired COM port:"); string portName = Console.ReadLine(); Console.Write("Enter Baudrate value:"); string BaudRate = Console.ReadLine(); int Baudrate = int.Parse(BaudRate); SerialPort port = new SerialPort(portName, Baudrate); port.Open(); while (true) { var dat = port.ReadLine(); var lineData = dat.Split(new string[] { "," }, StringSplitOptions.None); if (lineData[0]=="$GPGGA") { Console.WriteLine(dat); Console.WriteLine("GOT EEM"); var time = lineData[1]; var lat = lineData[2]; var lon = lineData[4]; var fix = lineData[6]; Console.WriteLine(time); Console.WriteLine(lat); Console.WriteLine(lon); Console.WriteLine(fix); } else { Console.WriteLine(dat); } } } } }
Currently this information is not discoverable outside of Visual Studio, so it is not possible at the moment. I will certainly log a bug to see if we can make this information queryable (possibly via the command line or some request API).
So I can't tell you that you should use it or not, but I can tell you why *I* use it.^disclaimer I wrote the library We use it to get rid of code we were already going to write. Projecting our domain model to some sort of DTO, whether for an MVC app or SPA. That code is braindead simple, but annoying to write and test. So I wrote AutoMapper to solve a few problems: * I wanted to enforce a convention on DTOs on their member names. No more bike shedding. * I didn't want to write a test for every. single. projection. AutoMapper with "AssertConfigurationIsValid()" tests all my mappings with one line of code. * I didn't want to worry about null reference exceptions when navigating relationships. You can use the null propagation operator, but that doesn't work in LINQ expressions. We always use View Models because we don't want our entities influenced by the serialization concerns of the web and model binding. So when shouldn't you use AutoMapper? Here's a few scenarios: * Your destination types differ greatly from source types OR you don't want to couple your destination types to the source type shape * You have more configuration than auto-mapping. You don't want an auto-mapper but a manual-mapper. * You want to reverse-map back into your domain model. Don't use DTOs if you want to have this coupling, just use your domain model as your view model. Finally, an addendum, don't use AutoMapper if you're trying to create some hyper-layered architecture with eleventy projects for a single web app and only some projects are allowed to reference the other. AutoMapper hate comes down to a few main scenarios: * Some architect decided on some crazy layered app with a bazillion projects and thought AutoMapper might make it less insane * People trying to reverse map back into their domain model. Don't. * People that don't use AssertConfigurationIsValid and complain about silent mapping errors HTH! edit: formatting
What is opinion between .Net and PHP? Thanks
This is awesome, it's exactly what I needed. The main problem I'm facing right now is that querying with EF is returning infinite nesting--I query a post by its category, so the post has a category object which contains a posts collection with one post, etc. Right now before I do my mapping I have to manually set those collections to null, which as I understand it is something that AutoMapper can handle for me. (I opened [this issue](https://github.com/aspnet/EntityFramework/issues/7270) for EF Core to see if it's intended behavior. It is.) My mappings are all pretty straightforward, and my models all match up with my base classes pretty well. I only map a couple things back to base classes, and that's only on new object creation. I can keep my manual mappings for those. It seems like AutoMapper will work for me based on what you described. Thank you so much for this comment, it really made a lot of sense and helped me out.
Oh... ignore me then lol.
Expression is not EF specific but if you expose Expression from your Repository you pretty much guarantee you cannot replace the implementation with anything else. At best you can replace with another ORM but even this does not work in all cases since there are unsupported expressions and they differ for most ORMs and EF has the most complete implementation. Your personal experience just proves that the repository pattern is useless :)
Not sure if functional people would be very happy with C#/C/Java
Does live unit testing always run all the tests in the solution or is it controllable? How performant is live unit testing for solutions containing thousands of tests?
Are there any plans to improve C++ unit testing features? Thanks!
Ah, thanks for taking the time to verify that... I just tested xUnit and you're right, it's working now. MSTest output doesn't seem to be working: http://i.imgur.com/sLHaCgQ.png I can't seem to find a project URL from NuGet for the [MSTest.TestFramework](https://www.nuget.org/packages/MSTest.TestFramework) package, so I'm guessing that project isn't up on GitHub. Is that something you should/could submit a ticket for? I'm using xUnit lately so I don't care about tracking the MSTest issue, but if you have a link and would prefer I submit a ticket/issue, I can do that. Thanks
Currently we try to run all of the `impacted` tests. That is to say, we attempt to only run the tests that cover the code edit that was made. Even so, with a particularly large solution (such as Roslyn, which has over 60k unit tests), a change in the lower layers could end up running a very large portion of these tests (and even with massive parallelization, it could still take some to complete). For example, imagine changing something in the parser, this theoretically could impact every dependent project and nearly every test in the code base would get run as a result. For these reasons we are continuously looking at ways of improving this data and possibly providing some way for the user to select a subset of the impacted tests to run.
C++ is a separate team and so I am not aware of the work that they are or are not doing. Sorry, I couldn't be more helpful here.
MSTest appears to be working as well http://i.imgur.com/beN9hhH.png If you aren't referencing the binaries via NuGet, then it may be picking up some version of the binaries that ship with Visual Studio instead and that may be causing some of the issues you are seeing.
I feel like this advice needs to be stickied somewhere, as too many people likely get hung up on the "Which language should I learn?!" question (I suggest reading the [FAQ](https://www.reddit.com/r/learnprogramming/wiki/faq) on /r/Learnprogramming for this reason). Admittedly I got hung up on this too when I started out. OP should definitely take time to do some research and see if the potential prospects out there for C# are some that interest them, but ultimately you're not likely to be dedicated to a single language. Regardless of what language you choose, you just need to learn how to program and write good, efficient code.
I feel like this advice needs to be stickied somewhere, as too many people likely get hung up on the "Which language should I learn?!" question (I suggest reading the [FAQ](https://www.reddit.com/r/learnprogramming/wiki/faq) on /r/Learnprogramming for this reason). Admittedly I got hung up on this too when I started out. OP should definitely take time to do some research and see if the potential prospects out there for C# are some that interest them, but ultimately you're not likely to be dedicated to a single language. Regardless of what language you choose, you just need to learn how to program and write good, efficient code.
I'm 33 years old and just in the last 6 months made the switch to become a full on developer. I dabbled a little in my spare time and my previous job required me to know a little scripting but nothing super in depth. So as for being 29 and even thinking you're too old to make a change this "late" in life, I'd say nothing can be further from the truth but that also depends on how much you're willing to dedicate yourself to learning a new skill. As for resources, I'd suggest the C# Yellow Book as a reading resource and (Mosh Hamedani's)[http://programmingwithmosh.com/] C# courses on Udemy. Those are personally my two favorite resources that were very helpful to me when starting out. Some of this will definitely depend on how you respond to different forms of learning media. I for one, really like video content as I get to watch someone else do it (something Mosh is great at explaining along the way). You'll just have to try some different things and see what you respond best to. Regardless of which avenue you go though, you're going to need to do two things to be successful. 1. Write Code. Find sample work to write, take on small projects, make stuff and find ways to make it better and more efficient. You're going to eventually have to start writing something, even if you're not super comfortable with it yet. Which brings me to the second item, 2. Don't get discouraged. You have to take it slow, and sometimes rewatch the same video hundreds of times before the concepts start to sink in (Took me forever to understand Events/Delegates/EventHandlers). Don't get down on yourself. Stick with it and eventually it will start to sink in.
Thank you :) Glad I could write something good, even if all maybe 3 people have read it haha. How would you rate the information I've wrote, did I miss anything?
Okay, thanks! Side bar, do you use TFS for your tracking/vcs needs or are you not confined? 
In RC and RC2, entire projects can be excluded from instrumentation and test coverage (but there is no finer grain control at this time, hopefully in the next release) by creating a `&lt;SolutionName&gt;.lut.config` file next to the solution. The contents should look something like this. &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;LiveUnitTestingConfiguration&gt; &lt;Enabled&gt;True&lt;/Enabled&gt; &lt;Projects&gt; &lt;Project Path="./src/Integration/IntegrationTests/IntegrationTests.csproj" Build="False" /&gt; &lt;/Projects&gt; &lt;/LiveUnitTestingConfiguration&gt;
&gt; monadic error handling I've almost exactly zero exposure to the functional world's way of doing things. Would you mind explaining how this works, and if the approach is in any way adaptable to C#? 
This looks like an awesome feature. Are you able to comment on whether live unit testing will work with apps developed with Xamarin? I assume it should work ok - the blog post announcing the new tooling just says C# targeting the .Net Framework, and you can do conventional unit testing on Xamarin apps. It would be good to get a clarification whether this will be supported though.
You should parameterize your queries. It's cleaner to read and more secure when inserting. You would have to call parameter.clear() on each iteration of the loop though. Also your open and close connections and anything query related for that matter should be within your using statements so they will terminate/dispose on error. You can also wrap your using statements in a try catch block where the catch grabs any exception and then outputs it into a message box. I didn't see a close connection anywhere but you tried to access the database twice. For the select use of a data adapter instead of a reader would remove the need to open and close the connection manually since adapters do it automagically. 
In RC and RC2, both Desktop and standard Web projects should work. dotnet core is currently not working, nor is UWP. I haven't tried anything on Xamarin yet, so I don't know (I will try to follow up with results here shortly). My expectation is that Xamarin based apps will not be working at this time. We are looking at expanding our coverage to support the additional frameworks, but I don't have any particular timeline or guarantee when or if that will happen. *Edit* So, portable class libraries that target Xamarin are working in RC/RC2. Xamarin specific class libraries (or other project types) that target an individual platform (such as Android or iOS) are not currently working.
Really pleasantly surprised to see my blog ("Common Multithreading Mistakes in C#") in there. I had no idea it was so popular! &gt; We are eager to see part 3 about unsafe assumptions. Considering the mention, I felt I ought to just give a small update on that series. I understand that my release schedule is very slow currently. I'm actually working on migrating the blog to a custom site that is almost complete (where I have more control over the layout than you get with free wordpress); and also my game is nearing completion and I'm in "crunch mode"- I'm working up to 12 hours a day at the moment. In short, the series is still active and I will publish part III sometime in the near future, there are just other things slowing me down currently. Thanks and merry xmas :)
Well, as seen as it's only in the 10 billion trillion dollar Enterprise edition I'd say most people in here will never get to use live unit testing haha.
&gt; I didn't want to write a test for every. single. projection. AutoMapper with "AssertConfigurationIsValid()" tests all my mappings with one line of code. Oh man, where I worked until recently (new job, woo) had literally hundreds of tests that would assert properties had been correctly mapped by AutoMapper... hundreds :( I mean, I see the logic, as we had an interface for an `IMapper` type thing which meant we could swap AutoMapper out if we needed but oh god so many tests looked like this: * Setup test * Assert a =&gt; a * Assert b =&gt; b * Assert c =&gt; c * Assert d =&gt; d * Assert e =&gt; e * Assert f =&gt; f * Assert g =&gt; g * Assert h =&gt; h * Assert xi =&gt; i argh
I work on a project that is pretty large, and it pushes VS2015 right up to (and sometimes beyond) its limits, i was looking forward VS2017 being slimmed down and using less ram and cpu overall, leaving it free to make VS usable again. What sort of impact would this have on VS as a whole, and in particular, the main UI thread, where everything seems to run.
[removed]
This should have no real impact on the VS process itself, as the Visualization is essentially the only thing that executes there. Everything else should be isolated to a separate process and should only impact your system, as a whole, as much as running Unit Tests in the background would normally (possibly less, depending on whether the impactful tests are run in serial or in parallel).
Register at https://www.hackerrank.com/ and do some challenges for C#, that should give you an idea about coding tests. Focus on LINQ and how you name things, this should also help you be a good candidate. I don't remember any specific questions, sorry.
Can we get Shims and Fakes without the Enterprise price tag? It's frankly preventing us from upgrading several projects past VS2013.
Positive or negative?
I'm gonna go ahead and post another link, since I think their explanation is more complete than I have time to write currently. Hopefully [this](http://stackoverflow.com/questions/19572647/using-mef-with-c-how-do-i-call-methods-on-the-host-from-the-plugin) helps. Not trying to be rude or anything, but I did find this result on the very top of a Google search for "mef plugin access main application". You may get faster answers by searching for yourself rather than asking (especially here).
I'd like to piggyback off of this since we're talking about .NET Core unit testing. Any idea why code analysis is utterly broken for VS2015? I think a SO post mentioned it was it didn't have the necessary pdb files or something like that to build statistics off of. The % covered metric was useful for me since it allowed me to prioritize less tested portions of code.
Could you please add a setting such that when i pause my debugging, i don't get taken to the "you are in break mode"/current executing line of code, and instead stay where i am. I could use the call stack to get to current line but usually if i pause, i want to edit code where i am looking.
To be fair, they have to hold something out for those versions... What we get for free in the community edition is pretty great.
Another one... methods' code lens "tests" and "references" gets a long way out of whack when implementing interfaces. It would be nice if the calling code had static analysis to derive the appropriate concrete implementation where possible. If not, code lens should put references on the interface class and not the implementing classes
No offense taken, I guess I wasn't searching the correct terms. I searched for "MEF Import from External DLL", "MEF Import from dll", "MEF Export from Host" and various others etc, and nothing specific came up.
Ahh ok, I worked in general home user technical support (basically anything that can possibly break on a computer we fix, remotely) and now am a developer building the tools for the same job, so my "Google Fu" is fairly strong. Hope that link helped out. 
To even reach the interview phase, you probably need to pass some coding test, and there are companies that utilize hackerrank as platform to conduct these tests.
I don't think I've ever seen a company pay outright for enterprise; most get it through the partner program.
I wouldn't recommend EF for a beginner. Sure writing the Linq queries are easier. Assuming he's profecant with Linq. It's a lot of overhead when you just want to write a few Sql queries. If you know the Sql already I would suggest Dapper. 
Oh....oh my
Thanks, I was actually looking for the term `generic method` but couldn't remember the name :) Also how about using Object.GetType Method? like this: if (result.GetType() == typeof(Message1)) { // Cast or DoStuff() on (Message1)result } else if (...)
It seems like the comments on it have the same issue. I'm going to see if I can get in contact with someone on the Visual C# team to possibly answer it. &gt; My host member is never populated. Did you ever encounter that? – jsmith Apr 12 at 12:37 &gt; &gt; &gt; @jsmith - Sorry for the late reply, but I think this was the initial problem I was facing at this time. If you haven't already solved this and would like to post your code on another question and link here I will be happy to take a look. – Alfie Apr 28 at 0:28 
Interesting, I was able to get that example working on my machine just fine, without any adjustments. Are you adding the host assembly to your catalog before composition? var catalog = new AggregateCatalog(); catalog.Catalogs.Add(new DirectoryCatalog(Directory.GetCurrentDirectory() + "\\Plugins")); catalog.Catalogs.Add(new AssemblyCatalog(Assembly.GetExecutingAssembly())); I can send you the full working solution if you want to PM me with details on how I can do that.
I put it on my GitHub for you: https://github.com/CodyJohnston/MefHelp
Why is dotnet core not working? It's always weird to see it presented as the next big thing for Microsoft, yet so often things do not work (analyzers, now this).
Wix here too
Inspiring words mate, I really like your approach, I age was a problem because most of the people that I know at my age are already successful Senior programmers, I'm not really too familiar the ins and outs of the trade, that's why I came here asking, because I'm only a newbie. But very inspiring comment, I'll keep doing my best!
Both, actually. But C# is clearly the better languange IMHO ;-) Also, it seems to me, in Java, even the simplest things are way to enterprisey; with configuration here, XML there, 20 3rd party libraries here, 4 property-files there..... On the other hand, you have libraries/frameworks/projects like Spring and Guava that try very hard to make Java as bearable as possible ;-)
Wix toolset as well, has a learning curve but ive found it alot better than others. Main benefit is that it stays up to date with current VS versions. So if you build an installer in your solution with a version of VS you are not locking your soultion to that version of VS. You just need to update Wix on your machine... Ive worked on projects before stuck in VS2010 because thats the only version the installer supported... After we migrated to Wix we could upgrade the solution...
That's how forms work, I think; there is generally no bitmap backing store built-in, so if any of the pixels need to change, everything needs to redraw.
WiX is pretty good and we use it, but it isn't non-Microsoft. What do you mean by that anyway? Msi is a Microsoft format, after all.
You'd be surprised. I saw an entire codebase abusing java8 features so hard that code almost looked like like scala. I can only imagine what they would've done with c#.
Download more
Think of it this way: VS was made for c#. VS *works* for c++, JavaScript, etc. 
Not double the RAM it uses.. increase the RAM it has available. Less waiting for background shit
not a problem I'm always glad to help when I can. If you have any questions feel free to comment again or PM me. I feel like I did a pretty good job marking up the code though.
Theres ways, this and base? Still I cant imagine someone doing it..
Not the exception, the stack. 
string.Split() -&gt; string.Trim() -&gt; int.Parse()
There is no easy way to convert numeric to English. u/taracus is leading you down the correct path, splitting the string, trimming any spaces and parsing out the integer. But you'll need to convert each digit into an english number yourself. 
 String.Join(";", input.Split(';').Select(x =&gt; Readable(Int32.Parse(x.Trim())))); http://stackoverflow.com/questions/3213/convert-integers-to-written-numbers
That's not really something the VS team can answer appropriately; it's a question better directed to JetBrains. I'm a R# fan, myself, but I share your frustration with its performance cost. PSA: Use of R# has a number of side effects, including, but not limited to, performance degradation, code style conflicts, and developer holy wars.
You can use the humanizer package and call the .ToWords on your numbers. https://github.com/Humanizr/Humanizer#number-to-words
What do you mean by non-Microsoft installer software?
tbh VS itself is pretty slow
Irrelevant for home use and also yes to answer your question 
http://stackoverflow.com/questions/5449956/how-to-add-a-delay-for-a-2-or-3-seconds There is a lot of good information here, like why thread.sleep isn't a good solution. Try the timer solution that is the second response.
I've tried as hard as I can to clone myself lately but no success :P
I'm going to take a stab in the dark and say it's because a lot of these projects were started before .net core was stable enough to be developed against/on top of. Now that it's starting the maturation process I'm sure we'll see more and more projects becoming compatible, but for projects that didn't start with .net core support, there's now an outstanding to-do to go back and fix it.
I've used await Task.Delay(2000); You'd have to setup your method to be async... for example: private async void button1_Click(object sender, EventArgs e) { button1.Text = "Saving. Please wait."; await Task.Delay(2000); button1.Text = "Saved!"; } If there's a better method, I'd be intrigued. 
Fair warning: ReadLine is a quick and dirty way to read from the serial port. The better way is more complicated. Consider the function below an ugly hack. private static string GetData(SerialPort port) { try { return port.ReadLine(); } catch(System.IO.IOException) { return ""; } } and then call change your code to var dat = GetData(port);
dotnet core has a different API surface area, at least as of v1.0 (this is changing for v2.0 - https://blogs.msdn.microsoft.com/dotnet/2016/09/26/introducing-net-standard/). This means that old tools might not be compatible by default. The PDB format for dotnet core applications has also changed (https://github.com/dotnet/core/blob/master/Documentation/diagnostics/portable_pdb.md) which means that applications that relied on the previous format won't recognize the new format without being updated first.
These are owned by a completely separate team. I believe using the 'Provide Feedback' feature in Visual Studio will be your best bet for letting the team know your needs here. 
Not sure why so many people in the comments are using WiX, but I would highly recommend Squirrel. (Pretty sure that's what Slack uses if you are curious about how it works from an end-user perspective).
I can certainly pass this suggestion along. 
You think that having more RAM available is going to make disk I/O faster? The OS is already caching what it can outside of VS. Move too much memory from the OS to VS and you may actually lose cache space. And what about your poor CPU cache? That's effectively going to get a lot smaller with all of those larger pointers. Or memory bandwidth. You can only move so much memory between main and CPU per cycle. Again, the pipe isn't going to get bigger when you switch to 64 bit mode. 
This isn't like sticking a V8 engine in a car that preciously had a straight-4. Using 64-bit only improves performance in very specific situations.
Yes, and its alright. It took me awhile to get used to git from TFS. I also attached images.
I didn't specify in my post but yes. I tried changing the extension to XLSX but the files just won't open.
None. I develop web apps.
Can't you talk to the client? Also, have you tried opening the files in a text editor to see what the format looks like? If they open in Excel with an xml extension, they might actually be xml (or xhtml) files.
One of those situations is an application that uses tonnes of ram.. such as Visual Studio. I literally cannot turn on full solution analysis without getting out of memory errors - yet I typically have 12 gigs of free ram.
Thank you for taking the time to respond.
Just a shot in the dark, but can you open it with Office Live: https://office.live.com/start/Excel.aspx 
Is this just an online version of Excel? I need to be able to pull the data into my program so if it can be used in that way I'd love to know how. Or if you know of any documentation.
That won't help when the bottleneck is in moving data between main memory and the L2 cache. P.S. Do note that we're talking about assembly registers anyways. That's not the same as real registers in the CPU. The processor can detect register reuse and assign the one assembly register to multiple hardware registers so that multiple operations can be performed concurrently. Gone are the days when we could look at the assembly and actually know what the hell is going on.
I use both the built-in and resharper.
That might be part of the problem. Resharper has its own parser so you're keeping two copies of the code structure in memory. Unless it changed recently, most of the built-in code analysis runs in a separate process. So the memory limits of VS aren't a concern. (Also, that's a good reason for not giving all of your RAM to VS, as it would starve the compiler, test runner, etc.) Have you filed a bug against Resharper?
Virtual memory? You really have no idea how any of this works. 32-bit vs 64-bit determines the maximum amount of virtual memory a process can address. If anything, going to 64-bit will increase the amount of virtual memory you are using because... 1. You actually have the ability to have more virtual memory than main memory in machines with more than 4GB of ram. 2. Instructions and data structures are larger, meaning that you need more total memory. It seems like you are confusing the difference between 32- and 64-bit CPUs with the difference between 32- and 64-bit programs.
I had not heard of this one until now. Are there any functional limitations to Squirrel as compared to WiX?
Thanks.
Have you tried doing 'Open and repair' yet? Start Excel, then open file, and in the explorer dialog window, in the bottom right corner, there's an 'Open' button with a submenu-arrow. Open that submenu and you'll also see an option 'Open and repair'. I know your pain; I often get exotic or corrupted Office files from clients, suspiciously enough the majority of the broken ones come from OSX users. But simply using 'Open and repair' usually does the trick for me, without having to go nuts with any code.
We have to save files like this in one of the applications we use. If you were to have an excel file and do a save as.. there is an option to save as "xml spreadsheet 2003 (*.xml)". We have to save as this format but with .xls extension. Excel opens them fine but with the same warning you reported above. Not sure how that might help you, if that is a standard or anything but if it is, try opening it as that in C# (if there is a library) random links (I didn't read them): https://www.roelvanlisdonk.nl/2010/01/11/how-to-read-a-microsoft-office-excel-2003-xml-file-with-linq-in-c/ https://social.msdn.microsoft.com/Forums/office/en-US/ade29753-9a86-4f79-ba73-7306dfb39a7b/how-to-convert-xml-spreadsheet-2003-openxml-to-excel-xls
I want to do all this programmatically if at all possible. I can go through each file but that would defeat my attempts at automation.
Understandable. I'd still try it on a few files to see if it does repair them; if this 'fixes' them, you could always use Interop or another library to batch-process them programmatically.
Great tool, been using it for fun and its honestly awesome. Sadly its extension is not yet available for VS 2017 RC
I'm working in C# and need a C# solution. 
Coding tests shouldn't be hard for someone going into the position. If you feel that you need to practice for them you either don't actually know enough for the job you're applying for, or you're overthinking things. I'll concede there may be benefit to just knowing how the platform works if companies are actually switching over to it as a interviewing tool. My experience with hackerrank in particular though has been extremely negative from a customer service perspective, so I tend to warn people against relying on things such as that.
I think it is more complicated than that they are happy, monadic error handling is just a more ergonomic form of error codes. If you look at Rust's use of monadic error handling they added a macro to ease the pain of checking for errors when you aren't expecting them, then again switched from the try! macro to the ? operator. At this point it is pretty clean, but still not perfect imo. I think ultimately the best solution is a mix of monadic errors and exceptions for truly exceptional cases as Joe Duffy talked about. http://joeduffyblog.com/2016/02/07/the-error-model/
This is a great article, but I think that an even more important point for avoiding non exceptional exceptions for your average .net developer, rather than performance is semantics. As in unlike error codes, or result types, unchecked exceptions aren't communicated in method signatures. (And apparently Java's checked exceptions are their own bag of worms). 
Akka.NET has a nice pattern around the 'match' extension on object. It's a similar syntax: someObject.Match().With&lt;FirstType&gt;(match=&gt;DoSomething(match)).WasHandled; The WasHandled lets you chain as many attempts as desired, although only the first match is executed.
if you can deal with the escotericness of the library, Linq2Db is stupidly fast at fetching/filling while giving LINQ goodness. Also it has a rather beautiful update syntax IMO, and allows updating without first fetching from DB (Not all that straightforward to do in EF.)
Sometimes the interviewer will want to see how you solve the problem and your methods in solving something. I found its a good idea to explain your reasoning and thought process. The idea is to see how you will go about a problem that you would not know the answer to, and what you would do in cases of feedback, opposition, and when you are not sure where to go.
I've been looking for that link for months now, thanks.
Skills required for an interview are quite different from actual job skills. It is ironic that I know how to build stuff and it runs all over the world but I think that I would bomb in an interview. 
very good article.. thanks!
Hi, i'm new in C# world. The interface for repositories is great for testing but imo bring redudance in programming, every time you add a method to the repository (getPaidProducts() for ex.), you have to make it in the interface, and the TestRepository. The read queries have to be written also in the testRepository as Linq expressions against an in-memory array, or hardcoded but you dont benifit the coherence it gives to query from know memory-list of entities. Anyway, I am not a tester-guy, would like to be, but do you agree on these consequence, should i keep the repositories light or ? Should i query against a dbset or array and them just would have to set fake data in TestRepository but be sure to always use portable linq expressions if there are any ?
They already fixed ListView extreme lag on Android?
Thanks man, and no worries, I've got a week off planned next week, so more time to blog n' stuff :)
No thanks. This fluent stuff is overdoing it. For LINQ and query-type stuff it's fine, but that doesn't mean it has to be used for every single thing.
Universal hammer.
Was literally about to Google this. reddit always comes through
Thanks a lot. I'll take a look. edit: This looks amazing. If this doesn't do the reading as I need then at least I have an easier way to write excel files.
Perfect - thanks /u/AngularBeginner and /u/Billibon - I am programmatically challenged and I didn't even know Split() or TryParse() existed, or even how to find out those things specifically through independent research (so many coding tutorials or posts are waaaaay out there for me). Thank you!
You really do. The day rates for contracting are tremendous.
Oh, excellent to hear! Any other suggestions for good tutorial/sites to look at? 
I also like Pluralsight a lot. Never looked at their cert courses but in general it is one of the best sites for education.
But every api that use the auth server is used on different application and have a different set of rules regarding authorization and roles.
What do you mean by localized user record for each application? This how it works here: We have an angular client app and a web api to serve data to that application. Usually, this is the only client that will ever use that api. A different app will have it's own web api serving the needed data Every app is built for a different in house department - there for, all users are authenticated using active directory. But app X and app Y should allow access to different users (usually defined on it's DB) - there are dozens of applications, each with their own authorization rules - but they all need to authenticate using active directory (the auth server) Putting all applications authorization rules in the auth server also seems wrong.
Odds are pretty good with .net that there issome method that does a chunk of what you need
You could keep a counter that you increment each time the file is saved, and save it in the file as well as somewhere else (e.g. the registry). If the counter in the file is lower than the one in the registry, the user probably copied back an older file. Of course this is reasonably easy to circumvent by changing the registry value back to an older value as well, so this is just adding a little bit of obscurity. A more secure option would be to create some sort of online service that the app connects to to save and retrieve the data. That would be a lot more work and require an internet connection, of course.
I literally just had a recruiter hitting me up a few days ago about a Xamarin dev position in Chicago for up to $200k.
Not OP, but a Xamarin dev.. been doing it 4 years.. I still use Xamarin.iOS / Xamarin.Android for high-end design apps - things that are very design heavy and fancy. For LOB apps, Xamarin.Forms is a big win. Just depends on how much flexibility you need to accomplish the design, and how flexible you are in willing to adjust your designs if you run into any roadblocks caused by Xamarin.Forms' imposed app structure / capabilities.
This post contains a lot of awesome resources already. https://www.reddit.com/r/csharp/comments/5ix1bf/good_advanced_c_resources/
Thanks for the response, I'll dig through this, but initially I'm seeing mostly written blogs/articles. 
So, if we don't take as given that a fluent interface is better than a non-fluent interface, what's the value, here?
Is it fast using xamarim forms in Android? Last time I checked was impossible to use in a comercial app
Yeah a database somewhere that client software talks to is best option. If it has to all be run locally even a local database that user doesn't have rights to but the software can talk to. Or windows service that runs with elevated privilege and have the service write to a file that the user has no rights to. Then the Client software could send the state to the service. That seems overly complex when a database solution would better fit the problem though.
They do cover lot of topics including IOT.
Line of Business - apps that aren't consumer focused. For example, Burger King might be suited for Xamarin.iOS and Xamarin.Android more than Xamarin.Forms, because they probably will have a crazy whiz bang interface, but for an internal tool or an app for a smaller business then Xamarin.Forms can be a huge win (90%+ code share). Edit: companies like UXDivers make some fancy themes for Xamarin.Forms that can cut down a lot on creating something nice.
&gt;but I need to prevent this just from a regular PC user, not some pro. you and I have vastly different definitions of 'regular user'. a regular user has no clue where files are stored on the computer. that said, when you trust the client to maintain its own data, the client has ultimate power over that data. what's stopping me from editing the value in memory before its saved? like others have said, your only end-all-be-all solution is to store the data on your own service.
Nothing. I think it's obvious that you need to believe that a fluent interface is better for this tool to be useful.
Based on the problem description, using a Regex is not a bad way to go and avoids unnecessary allocations - important if you are doing this on, say, millions of strings in a loop...not very important otherwise. The following regex will match if the characters after the second period are numeric digits, otherwise it will not match: ^.+?\..+?\.(\d+)?\..+?$
Ehh... seems gross if the API isn't designed for this and that you need to write the fluent interface which subjects you to refactoring issues and method signature mismatches etc...
I think to get the right answer you need to explain the context. Is this a game with a save file, a test, financial records, something else?
This will actually be pretty handy. What license is it under?
Eh let's call it MIT license
Holy cr@p! 1990s are back! Is text-mode windowing coming next? Any plans to add mouse event and pseudo-graphics?
Two things you should do. 1. Put the source code on Github or some other source control platform. It will let you show off your work. 2. Investigate how to publish a Nuget package so it is easier for others to use your project.
There's an extension for it - but for the sake of learning, I would advise following Github's guide on how to add a project to git in general terms: https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
We could sit here all day and invent 1000 forms of obfuscation, but what is the point? You cannot secure a device that you do not control. 
Now for some feedback. Simplify it. For example invocation could look like this: string[] options = { "Shutdown", "Format system memory", "rm -rf /", "Self destruct", "Fork bomb", "Begin DDOS", "Launch missiles", "Delete system32", "Launch reddit.com", "Launch Visual Studio", "Delete projects", "Encrypt data", "Connect to a printer", "Disconnect from server","Unsubscribe from Cat Facts"}; var result = ConsoleTools.ConsoleChoiceMenu.Show("Choose an option using arrow keys.", options); Console.Out.Write(result); Console.ReadLine(); There is no need for caller to know all the implementation details. 
The most useful kinds of fluent interface guide a developer through a compile-time state machine of configuration steps. They require a lot of intermediate classes, and they still ought to be a layer over a standard configurable object graph.
How about a static class? public static class Strings { public string Version = "Version"; .... } Call it from code return Strings.Version; Are you trying to localize? Then you need something else
I don't see one,I usually prefer the (relatively) better type safety of an enum and write a ToSteing(enum) method. 
I agree that enums aren't the way to go. Either store them in a "Constants" sort of static class where each during is defined: | const string SUB = "csharp" Or define any strings you need in a config file (or database or JSON file or whatever makes you feel fancy) and pull them in when you need them.
Xamarin sucks since it is not free with professional vs. I realized I rather use SWIFT than a non native language.
Creating a Nuget package is quite easy (https://docs.nuget.org/ndocs/quickstart/create-and-publish-a-package) and will seriously expose your library. People are starting to think "if it's not on Nuget, it doesn't exists" since it's so convenient.
Performance sucks ass for Enum.ToString(), also.
Use a resource. Easily localized, easily changed without recompilation.
Java doesn't do it way better. It's different. Lots of APIs in Java use int as argument and has a lot of constants defined because you can't combine Java enums like you can with C# enums. Java enums are simply syntactic sugar whereas C# enums are not. Different use cases.
An easy way is to use some kind of in-between layer for registry modifications and call it's interfaces from your methods that contain the logic. That way, you can easily mock them from your unit tests.
True, setting the capacity will speed things up especially if you start with an empty list and add to it in several steps. I think the default list length if 4 iirc, so even going to a few hundred items gets a little silly with the number of reallocations.
to expand on /u/ngergo6's comment, most people would tell you to create a service that handles all registry operations. you'd make an interface for that service. public interface IRegistryService { string Read(); void Write(string value); } public class RegistryService : IRegistryService { public string Read() =&gt; "real code goes here"; public void Write(string value) { // more real code } } you'd then inject an instance of your service implementation wherever you need to perform registry operations. this is dependency injection. it's most commonly done via constructors. public class ExampleClass { private readonly IRegistryService _registryService; public ExampleClass(IRegistryService registryService) { _registryService = registryService; } public string GetValue() =&gt; _registryService.Read(); } then to test, you'd make a mock of your service. public class RegistryServiceMock : IRegistryService { public string Read() =&gt; "test"; public void Write(string value) { } } and so, to test ExampleClass, you'd just pass in an instance of your mock service when constructing your ExampleClass instance. to test the actual registry operations? well you could maybe inject a configuration object into your service that defines different locations where the values are written to and read from if you're worried about polluting the actual values.
As you became a programmer, you will understand array. I mean, I've never find any programmer who does not understand array. Just learn its basic, no need to 'master' it. You probably should worry about whether to use List or Array later, if you didn't understand the basic of array.
Console textbox with intellisense/text completion would be nice. Not sure how to implement that well though. I just remember how many times I had to open another console window just to get help on some basic switch. Grrr.
&gt; working with older/badly written code that requires array arguments instead of generic interfaces (e.g. some WinForms stuff) This is where I have been burned more than once. The other time I get arrays a lot is when I am integrating across a language barrier and the API I am accessing just does not expose data in that way (I am looking at YOU gemfire API).
In short: you don't need to care about Array vs List. Write functions that take/return IEnumerable or ICollection.
Eliminate writing to the registry. There are much better storage locations. If you are modifying external settings or Windows stuff, make the tests directly modify it for real. If I needed to modify the registry I would make it a transactional object and roll back the transaction after the tests complete 
Don't have code to look at or any other background information. I can ask these questions though and try and help :) * Did you override any default settings? * Is your border style for the control set to transparent? * Have you tried setting breakpoints around your load events? * Does anything look off in your designer file. * Try setting breakpoints in the designer file where the control gets initialized and set a watch to the border style. * I can see that you are using VS express but if you break the application (hit the pause button in VS) and step through each piece individually does the output show any first chance exceptions? I realize these questions may seem silly but any info I can get will assist me in assisting you :) Edit - Formatting
&gt; (very) high performance code where you need to optimize out any dispatch and boundary checks Note, C#, and most modern languages, have "arrays as objects", and accessing them still has boundary checks. You aren't getting C++ style "offset this memory address by 60 words and read it" performance. This is why you still get Index Out Of Bounds exceptions in C#, rather than just segfaults. It does still perform better than a List, but not insanely so.
While yes SO is a great place for questions, more than likely this kind of question has been asked already. If OP had posted this question on SO more than likely it would have been closed shortly after its post and downvoted to hell. SO is a great resource for sure but it's not very newbie friendly, I've found on several occasions that the SO community can be incredibly negative.
If I had to pick a handful of languages as the "Best" introductory languages it would look like this: * C++ * HTML/CSS * JavaScript * SQL * C# * Python C++ was the language I started with. It's a great intro to .Net, Command line based so you don't have to worry about a GUI, and it has libraries available to it too. Understanding the basics of a CLR(Common Language Runtime) will make it easier to grasp the concepts of other .Net core languages. C# is great because now you move on from basic CMD based applications to applications that have front facing UI. C# is also the language I used when I learned OOP (Object Oriented Programming) Its a bit tricky at first but once you get the hang of it you wont stop using objects. C# is incredibly dynamic and can do amazing things for you if you write the code properly. Additionally seeing that Microsoft joined the Linux foundation and now supports .Net Core on Mac and Linux this opens the door for even more potential in C# and .Net languages in general. HTML/CSS/JavaScript Understanding the basics of Web Dev is pretty important as a developer (IMHO) regardless of what language you work with most. Understanding how websites are formatted and how data gets passed through them is just great knowledge to have. JavaScript is also good to know whether you are doing web dev or not because it can be executed almost anywhere since most computers have a JS compiler by default. Python is good to know because its a fundamental scripting language that compiles on almost every platform. It can be used everywhere from windows to mac to linux and can even be ran on some network switches/devices. I read an article recently that said network management is moving in a software driven direction and the primary language used is Python. You could learn any scripting language really but Python IMO is the best to start with. SQL (Structured Query Language) If you are going to be doing any kind of backend of fullstack dev you need to know SQL. There are many different flavors of SQL (T-SQL, NoSQL, MySQL, PostgreSQL, and the list goes on...) but they all do the same basic things, the only difference between the flavors is that each engine has unique commands to do certain specialized things. I would start with MySQL, the engine for MySQL is open source and comes packaged with XAMPP which I typically use if I'm writing in PHP. If you plan to stick with C# (or even if you don't since most companies use MS-SQL) learn T-SQL(Transact SQL) is Microsoft's flavor of SQL and it comes packed with some pretty powerful features and tools. You can get a full Dev version of SQL Server from the MS website which includes the management studio and the DB Engine. Might also want to look into learning SSIS which is a part of the MS-SQL package for automating database tasks. Be forewarned though, if you do put SQL Server on your machine make sure you have plenty of ram. MS-SQL engine + SSMS(SQL Server Management Studio) = Massive Resource Hog. 
I question if a test is actually needed for the RegistryService class. It would be extremely simple: writing to and from the registry. I think these are one liners. It's more important to ensure RegistryService class is invoked correctly according to the application logic. You don't need to test each method of each object. In fact, it's bad, because it makes the app hard to change. You only need to test the public API of the app. Then the squishy interior is free to evolve.
You are a beautiful person and obviously a skilled wizard, knowing the deepest Regex Magiks from before the Dawn of Time. I prithee, what about a way to check if there are just 2 or if there are 3 '.' (periods) within the string?
i agree.
How long did it take you to write all the GUI and custom components in fucking WinForms instead of using WPF that would have taken a fraction of the time? I swear to god people use WinForms just to troll other people.
Unsafe is probably overkill. But when you're dealing with a lot of highly iterative code or highly used code (i.e. reflection on cloning/serialization, SQL Building) for loops are probably not a bad thing to try, I typically write code like that using for instead of ForEach, but that's also because the scoping can look cleaner when I want to know where I am in the array.
I'm not exactly sure what you're asking, but the `(1.0 / i)` segment in the for loop below will cause an infinity result [1] when `i` hits 0. Is that what you're asking about? for (int i = -10; i &lt;= 10; i++) { Console.WriteLine( (1.0/i) - (equation.limitDerivative(90, i)) + " At " + "(10, " + i + ")"); } [1] https://en.wikipedia.org/wiki/IEEE_floating_point#Exception_handling 
Just download stackoverflow.com: [Archive.org](https://archive.org/details/stackexchange) 
Added this as a "guard": double stepsize = (Math.Abs(y_val) + Math.Pow(10, -6)) * Math.Pow(10, -6); if (stepsize &lt;= (Double.Epsilon + 1e-6)) stepsize += 1e-6; Having a result of infinity in is necessary, as mathematically, results of infinity actually do occur (e.g. dy/dx|(1,0) x/y = infinity). However, the residuals mostly stayed the same. The wikipedia page for [numerical differentiation](https://en.wikipedia.org/wiki/Numerical_differentiation) states: "This formula is known as the symmetric difference quotient. In this case the first-order errors cancel, so the slope of these secant lines differ from the slope of the tangent line by an amount that is approximately proportional to h^2 . Hence for small values of h this is a more accurate approximation to the tangent line than the one-sided estimation. Note however that although the slope is being computed at x, the value of the function at x is not involved." Since my residual follows a x^-2 (or similar pattern), my guess is that the two are related.
Results of infinity are okay, since the actual derivative function (the one that the code tries to approximate) can validly return infinity. My issue is that the residual (estimation error) is massively off for the function it tries to imitate (even 10 units away from the x-axis carries an error of around 0.899, which is unacceptable). Function: x/y Derivative (analytical, actual): 1/y Residual = Actual Derivative - Approxamation
What exactly is it? 
Couldn't agree more, I really hate seeing this used for configuration. It just feels like the wrong answer.
Isn't `stepsize` supposed to be a constant? I still don't understand why `y_val` is used to calculate it, regardless of checking if it's too small. 
arrays are the most important data structure. so inoortant that the ever present List&lt;T&gt; is really just an array thst can grow behind the scenes 
Stepsize is supposed to scale since there has to be a balance between accuracy and rounding error. For example, y' at large values of y don't need as much accuracy because the difference between y(1000) and y(1001) for constant x isn't that large. But at small values of y, for y' to be accurate, the step size must be decreased as there is a large change between y(0.00001) and y(0.00005) for constant x. But because of floating point math, a small step size isn't always appropriate, due to rounding errors.
C# enums are still too weak for my taste and not far from being syntactic sugar. 
Okay I see. Then maybe the stepsize is too big but you could still scale it. Have you tried the machine epsilon times the square root of abs(y)? That with the size check might work. 
"Head First C#" is a good book
Nuance is dragon api. I looked into them and it's way too much money. I'm going to write the program to be adaptable so that if it does take off after development I can substitute something better like dragon or Google api. 
FYI: stack overflow isn't Microsoft. 
Most places i know of are phasing out DataTables as much as possible. Too much "looseness" in the table as opposed to objects, it helps move some errors from runtime to compile time, and can help prevent type conversion issues
Enums can be a huge code smell. Most of the time when you use an enum, you're using an if-block and then doing functionality according to the enum value. Your best bet is too encapsulate the functionality within the if-block into a strongly typed object. Nothing to do with your question, just food for thought.
MSDN?
Can't decide if i should use Xamarin or continue with React Native -_-;. I love C# because it's strongly typed and the code is easier to read for me...but the hype around React Native is sucking me in 
Colorblind people are going to have a tough time with this UI.
This is bad advice. IEnumerable, ICollection, and even List&lt;T&gt; are all *leaky abstractions*. Most of the time, you don't need to know what's going on under the covers. However, a small percentage of the time, you really do. Also, arrays are a primitive found in almost every language. If you're ever going to be porting code from one language to another, you need to understand arrays. If you want to be more than a code monkey and actually grow into a software engineer, you need to know, at the very minimum: * arrays * the difference between int/uint 16-64 * how floating point numbers work * when to use decimal or BigInt
Ah... ok.... Is the option in project settings to not check bounds still used anywhere anymore, or is it an obsolete feature?
WTF is `ArrayList` good for?
This looks amazing, thank you for posting. I recently tried R# and it was getting on my nerves. This is the feature that I enjoyed the most, glad to see a free alternative! 
Thanks, I was replying to both of his posts at once. He referenced stack overflow and MIcrosoft separately.
Programming productivity is built on abstractions. Patterns. Object-Oriented Programming. A "leaky" abstraction is when the actual details of the thing underneath leak through. We have a high-level design that hides all the low-level details in nice, pretty objects. The Stream class, for example, is an abstraction over what's actually going on. In reality, there's a network card doing the grunt work of TCP/IP networking... which is really analog electrical signalling under the hood! Down the rabbit hole we go. But Stream usually works just fine. But the Stream class does its job well and *most of the time*, you just need to read the Stream docs and use it how it's intended. However, every once in a while, the abstraction breaks down. Your code is just *not* doing what it's supposed to in production, for some reason. If you don't have the ability to look below the Stream class at the real things it is abstracting away, you'll never be able to troubleshoot it. Is it the IP routing table? Is the network card faulty? IEnumerable is a *very* leaky abstraction. It leaks all over the place. It's very simple, so it's used everywhere. When you are enumerating over an array or a List (which is an abstraction over an array), everything works fine. But what if someone passes in an IEnumerable that is actually representing a sequence of barcodes being input from a hand scanner being used by a human in a warehouse? Suddenly, you have absolutely no "reasonable" expectation that the next item in your foreach() loop will be processed in under 10 minutes! Or that the loop will ever exit. List&lt;T&gt; is an abstraction over an array. It automatically resizes and keeps track of the position of the last item. This abstraction leaks in two common cases. 1) It is not threadsafe! Simply adding to the list from two separate threads can throw an exception. 2) The resize operation allocates a new array *double the size* of the previous one and then copies all the contents of the old one to the new one. For small lists, this isn't too bad. As you start dealing with bigger and bigger lists, this rapidly becomes an a noticeable performance degradation.
Came here to say this. Was surprised too.
Premature optimization is a bitch. If he is just developing an O(1) or an O(n) algorithm, a few milliseconds likely aren't going to matter. 
You might be thinking of the setting for arithmetic overflow, which determines whether integer math is checked (e.g. `Int32.MaxValue + 1`) and throws an exception or silently wraps around. This is the same as `checked`/`unchecked` blocks. This is unrelated to array boundaries, which are always ensured (except in `unsafe` code).
It's a relic from the early days before generics were added to the language.
These days I'd use `IReadOnlyCollection/List` as much as possible. 
Yeah, but it's not very important for the "end programmer".
Those are interfaces, not containers. Arrays compare more to `List&lt;T&gt;`.
You can't use static strings as cases in a switch statement, but const strings can be used. For this reason I always use const string over static strings 
Java enums can't be used for bit fields which is a huge disadvantage. They also serialise by ordinal by default in JPA. I think C#''s enums are closer to what is actually practical. It should have an option of stronger typing, but then again that only really matters in deserialisation so just add validation.
Can you provide more details to your answer ? Why hashing twice ?
Please do not use SHA1.. https://bcrypt.codeplex.com/
Java got there first. Most of the educational resources out there use (books and such) Java as their example language. It would be a big endeavor to change, and for little gain. There are other reasons, but I think this is the biggest one. It was an ordeal to switch from C++ to Java (which happened in the late 1990's, mostly) but it was done because universities felt it was a big gain. Other reasons include: - Java is available on more platforms. (Many universities prefer Linux, Mac or some other UNIX, and Mono wasn't considered a very serious alternative to .NET.) - Until very recently, Java was a much more open platform. - Anti-Microsoft bias.
C# and Java have very nearly the same syntax. I have an easier time jumping back and further between them than any two other languages. 
Lots of academics are still very anti Microsoft for some reason.
Microsoft provided good reasons to be anti-Microsoft in the past which aren't easy to forget. 
Pretty much this. There would be no benefit switching to C# now, and it would cost a lot.
gonna switch fast with oracles antics lately!
I meant that just like a teenage nerd who can locate the encrypted text file and have no skills with reverse engineering of the source code (obfuscated).
And Oracle is so much better than Microsoft /s. Though I do realize a lot of these decisions were made before Oracle purchased Sun. Aside, were my daughter goes to college, they just recently switched to Python. 
Mostly because of an historical anti-Microsoft bias. MS has been trying to remove strong arguments (proprietary commercial systems rather than Open Source). They have pretty much Open Sourced most of C# and the language is now an ECMA standard. Java is a proprietary language owned by Oracle. The argument against multiple platform support is now fairly worn. And tooling (through JetBrains free for .edu students) IDEs are pretty sophisticated. So, you are left with a need to update course content and overcoming a generation of bias against MS. Personally, I think schools should leap to TypeScript at this point.
&gt;May not apply to all schools reasoning, but it is because Java is the #1 most in demand language for employment. Aside from a quick job search in big US sites where the gap is small, the EU industry is still Java dominant. Add to the Java Enterprise dominance the mobile phone market (Android) and that's pretty much it.
Wow. Thanks for all the responses. While I know that MYSQL5 hash isn't the best in the world. It's what I need at this moment.
New stuff also fails sometimes - like silverlight - anyway java and C# are very similar - the tools are different. 
If by recently you mean the past decade, then yes.
Java is cross platform and has free, very capable IDEs available. While things have changed with C# recently, historically it hasn't been the case. As much as I love C#, I can't disagree with the logic. Without spending a penny you could get an OS, compiler and fully featured IDE for Java. And given the amount of Linux usage at universities, it only makes sense.
Which will produce an invalid hash for a MySQL login.
Don't forget about import &lt;=&gt; using
https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.MicrosoftVisualStudio2015InstallerProjects This also uses InstallShield under the hood. Not sure why you want an alternative, you didn't provide any reasons what's wrong with InstallShield. Alternatives are either InnoSetup or Wix installer.
Yes, but that still cost the school money. Whereas, for Java, you could just say "Download Eclipse from the Eclipse website and the JDK from the JavaSE site" or "Download JDK with NetBeans from the JavaSE site"
Decades don't really mean much in the context of a university. 
Not until Microsoft or the .NET Foundation starts shipping a GUI library with .NET Core. .NET Framework has three (WinForms, WPF, and UWP), but .NET Core doesn't. Well, for anything other than web applications that is.
Mine switched not so long ago from Java to C#. They found GUI building more intuitive for new programmers. I'm not saying if that is true or not but this was their reason. 
Guess schools shouldn't have career fairs then either.
I use [Squirrel.Windows](https://github.com/Squirrel/Squirrel.Windows). It doesn't provide an install wizard but you get a single .exe and if you want a .msi package. 
Innosetup. Or wix
Thanks man, since you asked i am looking for alternatives because i have the community version of visual studio 2015 and it doesnt support it.
I see thank you.
Because sockets are assholes. They get the job done, but the programming model around them sucks. 
&gt; New stuff also fails sometimes - like silverlight - anyway java and C# are very ***similar*** - the tools are different. FTFY 
I have only been programming professionally in java recently and it seems to be more pedantic than c#. C# has more features but the edge cases aren't fully fleshed out. I can't think of specifics after Christmas eve libations, but I remember being annoyed with some threading/lambda stuff? For practical usage this is fine, but for "pure" CS it is better to present a system that has all its bases covered. Also C#, for all its graces, will be tied to The dwindling Microsoft market. Not really a good market for this going forward.
Curious what the difference is between American Universities and others. My experience in the United States is that most computer labs are all windows, but I've only been to 3 universities. Can anyone speak about the setup in other countries?
TcpClient and TcpListener are better. Still have exceptions in your main code flow and 0 length reads. With heir native IO completion support they are hard to pass up though. 
My university teaches c# and vb.net, even VBA and teachers refuse to teach us java 
Ive been stuck on this for about 3 days now -.-
My University, a big state college in the Midwest, absolutely hated Microsoft. I had one master level UI class where the book followed a “fictitious” company called MicoShaft. Although I found it a little funny – I find it more interesting that in the “real-world” – I’ve only worked on the Microsoft stack.
Removed: Rule 4. Feel free to repost it, but include a description of what it's supposed to do, and what it's currently doing. Also be sure to properly indent/format your code for reddit. Unity coroutines are a bit obtuse. I would suggest you create a minimal example/test demonstrating a working and functional coroutine usage, then add bits on top of it until you find that it breaks (or is fully functional). It's plausible that the coroutine isn't the issue here but simply a logical bug in your `if/else` conditions.
Yay for them. Which one so we can come to the department when hiring?
Joel and others use the term Leaky Abstraction very pejoratively. I use Leaky Abstraction for anything where you frequently have to understand the ins and outs of the implementation, even though it may be generally well behaved. &gt; I would hardly call lack of thread safety a leaky abstraction; I mention it in the case of List&lt;T&gt; because exactly how it's unsafe would surprise people. Everyone would understand that `myList[i] = someItem` from multiple threads would be unsafe because and might result in undefined behavior as to which value ends up in `myList[i]`. However, even `myList.Add()` from multiple threads is unsafe and can result in an `IndexOutOfRange` exception, which people do not expect. In short, I call List&lt;T&gt; a leaky abstraction because you absolutely must understand that it is implemented with a backing array and a Count, or it *will* bite you eventually.
A beginner can definitely be forgiven for not knowing arrays, but he asked specifically if he needed to learn them. Yes, you do. They are important and relevant.
currently my character is stuck at one waypoint and is constantly starting the walking animation. I thought at first something was interfering then i thought the reference null is in the wrong place. Coding is hard and confusing and makes me wana suck my own dick.
also everything worked before i put the coroutine in witch makes me believe thats the problem.
 &gt;Now the program has been updated to include Android App Inventor (Blocky), C# and bash and finally in year 3 Java this means there is a smaller gap as C# and Java share some charactoristics however students still struggle with jumping from C# to Java. That sounds terrible. I picked up C# on my own prior to learning Java in school and I find myself constantly annoyed at the things missing in Java that C# has. Meanwhile my classmates roll along with it fine, unbeknownst to C#'s features. 
Here in Singapore, everything runs Windows and some Macs in design schools. You probably won't ever see a Linux box ever. 
I took Intro to Programming at my university in 2000. They still used QBasic for that course!
Are we talking about GDI+/`System.Drawing` here? You probably want some combination of `Graphics.SetClip`, `Graphics.RotateTransform` and `Graphics.DrawImage`.
Upon graduating you should have been able to look at these things and understand them easily. You should be able to understand the advantages and disadvantages. If you cant do that you either failed to take advantage of your education or you chose a bad school. I've worked with a lot of people that dont understand why they use things other than because it was recommended or its popular. 
And yet most schools picked up proprietary IDEs and libraries.
[Advanced installer](http://advanceduninstaller.com) is a really great tool. 
There were very few units at the university I attended which forced a certain technology upon us. The few which did force us to use a specific technology were for the most part in the first year of my bachelors. This is something I really loved about my course, given that most of the other educational institutions offering courses related to programming literally mass-produce code monkeys who can only build certain types of applications using a specific set of tools. In my country though at the time, students usually entered programming courses already knowing Pascal and Java having used them in pre-university years.
&gt;dwindling Microsoft market Illustration of bias here. Did you know that .net is now open-source and multi-platform? Runs on windows, mac and linux. You can even go to github and download the source code. Talking about fleshed out.. I was experimenting with code porting from C++ to Java or C# and quite frankly Java was pain in the rear to port to. C++ to C# porting was much easier due to syntactic sugar that Java lacks. Java feels like C# from 2005.
/r/learnprogramming
Yup and the students are unhappy too. Unfortauntely the wheels of acedemica move slowly. I decided when on my program to try and cross learn 2 languages at once. In the end I learned C#, Java, Swift and Python self taught however most students don't want to go out of there way to learn new things i've found in my department so when they finally get to Java it's a massive shock. All I can do is try and reach out to first year students to get them reading up on the technologies they will learn in the 2nd and 3rd year.
Whoah dude! Leave perl alone! LEAVE HER ALONE!!! 
`List&lt;T&gt;` is the generic equivalent of it.
Think Pascal. Spent many an hour cursing at that program. For assembly we used Motorola 68000. Except for a two semesters where they taught MIPS RISC. Which kind of fucked over those of us who took it then because all our subsequent coursework referred to 68000. That was the only required language, we could choose others for electives. I did C and COBOL. One class used LISP.
thanks Sir!!!!
maybe just the ones in my area then, and personal experience.
I don't know if it's the same for you guys, but the uni around me usually didn't stick only with 1 languages. My uni itself starts with C - C++ - Java - C#, and flexible language to choose for the thesis. I find that quite useful, because I like to get to know other languages, even I'm learning C# more than any other language.
and : instead of extends / implements
Unfortunately 90% of requested info here in in regards to web and mobile. 
Java might become legacy language but I think JVM as a platform will continue to be first tier.
Where I live (Bulgaria) C# is immensely popular for teaching in both state-sponsored universities and coding schools/academies (I think they are comparable to those code camps in the USA)
"Leaky" is a non-specific descriptor. All abstractions leak at a certain point, just like all metaphors break down if you push them too hard. That leaves you with context ("I feel your object model here is a leaky abstraction") or extra adjectives to specify how bad it is.
Removed: Rule 4, Rule 3.
But even integers would be "very leaky" in the same vein. You need to know that they have limited range, and that they wrap around unless checked, and that they truncate fractions, and that multiple threads can't safely access the same variable, and so on. It ceases to be a useful descriptor at that point. Not being thread safe applies to 95% of the framework.
I'm in my 4th year now and we did the 68k for our organization courses. Timeless!
The solution is to deploy MonoDevelop. It's cross platform and works fairly well. It just doesn't give a good indicator of what C# is capable of, since a lot of what C# can do is tied to Windows/VS.
Have the common auth server yield an encrypted tokens (claims) the client can use to authenticate with the other applications and get privileges specific to them. Alternatively have the common auth server aware of the different applications (e.g. lookup from application to some set of application-specific permissions).
This is bad practice and a lot more verbose than just list[i] == val
How is Java anymore proprietary than C#?
U have no idea what job it is? How do u know what language and framework it uses? Learning a new language is the easy part, learning a new framework is the hard part.
Squirrel also provides you with an updating system. It's a pretty solid project and I've used it for two production apps so far.
And in my opinion NetBeans is better than Visual Studio. Mainly because VS tries to do too much and being only 32bit it can't use bigger memory. I want my IDE to do code completion and building. 
What I mean is I have no idea what kind of programming job I want yet, I'm just learning, and I want to learn the more advanced aspects of C# at some point, but have no idea how to go about it. 
When those libraries are managed by Maven it is much better than NuGet.
I've always learned by doing. Pick a project, something small, and just do it. Push it to github and repeat, build a portfolio of you just learning new things by making. 
Computer Science isn't really about teaching you to become a programmer/software developer/engineer though.
Some of that hostility comes from the time when Microsoft had their own JVM with proprietary extensions (embrace and extend), and Sun sued MS (and won) for their incomplete Java implementation. Some of that bashing has well deserved roots.
Have you actually used vs? It does exactly that. Intellisense is pretty fucking great. I remember trying netbeans and not liking it, but not sure why though. 
Why would typescript be better in any way to java or c#. It will only confuse first year students even more and introduce them to the wonderful world of web programming and task runner. With java or c# you can easily have an ide that will create an empty project with a single main class and a play button to launch. Typescript is for making Javascript bareable not a general purpose language. 
Australia. I'm sure there are universities that do these things though. University of New South Wales seems to always top the national ICPC so I assume they have their shit together. Though a hackathon isn't the same thing as properly designed code, so who knows.
Ah, that old cop-out. Still selling that one are we? 
C# has always been an ECMA standard. 
Good stuff, but one correction: express editions were the precursor to community editions and have been available since 2003, if I recall (2005 for certain). 
Well the mismatch between what universities think and what students and industry want is still there. Universities need to start teaching software engineering instead of computer science.
I don't think I saw any proprietary tools at my uni (except maybe Matlab).
If you have the time and are committed, I recommend picking out some kind of fully fledged product like a website or a desktop app and trying to create/recreate it. More than half of software dev is solution analysis. Demonstrate to yourself, and possibly others, that you can design a valid solution, and then set to work building it. Your code may be sloppy, but every first big project is. Greater understanding and quality, come with experience. For example, I taught myself PHP by building a gaming news website back in 2002,which was essentially a complete ripoff of the then-popular CMS, PhpNuke. Initially the code was absolute crap, but with every new page or feature that I added, quality got a little better and my comprehension of the language and frameworks improved.
Some teach both. Again, different degrees with different subjects.
[removed]
I dont think that exists. Google is pretty smart about this stuff, but going right to stack overflow and searching under the c# tag will probably get you even better results. 
First thing: get used to digging through piles of documentation. You'll be doing yourself a favor. It's pretty much a requirement when you're building something at the advanced+ level, or working off of someone else's research, etc. Computer science is science, science involves buku documentation. Second thing: C# is a computer programming language. Thus, anything you can do on a computer, you can do with C#. A comprehensive list of things C# can be used for is the same as a comprehensive list of things you can use a computer for. Ninja edit for the third thing: Google. Seriously. Google most things you can do on a computer, follow that search query with C#, and you'll get example code and stuff more often than not. 
stackoverflow.com you just have to phrase it as a question specific to what you already know and have already tried.
Exactly the same for me. I bet most of those lecturers wouldn't have even heard of DI or solid. 
Yeah exactly, where I've worked someone wouldn't be hired if they hadn't heard of DI 
It's a little difficult to tell from your post just how beginner you are, but I'll try some recommendations: * Code Academy is great for exercises in a variety of languages (does not appear to have C#??) * Design Patterns - many book's cover this, Head First Design Patterns is a good one for beginners * Clean Code by Robert Martin covers how to write code that is readable, both by others and yourself 6 months from now * As others have said, pick something and try to solve it. I myself will usually rewrite the same time keeping app in any new language I want to learn, because it is a problem that I understand well. * Accept that you will write bad code, and that's OK
That's the way it is, but not necessarily the way it's meant to be :). At least bright students learn quickly, that's way more important then learning Fad language x.
[https://referencesource.microsoft.com](https://referencesource.microsoft.com) is a pretty good reference site that lets you see how classes and methods are written. There is a little bit of a search ability. [CodeProjects](https://www.codeproject.com/) has lots of little sample programs. They are not always the best but they do help in learning how to do things. Otherwise you'll usually find someone asking the same question as yourself on [StackOverFlow](http://stackoverflow.com/) 
Which is very recent and far from mature. Non-windows is still 2nd class citizen - .Net core lacks plenty of functionality compared to .Net Standard (and again is very immature).
MonoDevelop is shitty IDE. Not comparable to the quality of free Java IDEs.
I don't want all the "integration". I want it to do good intelisense (with is really only achievable with resharper), good refactoring tools (not available, move needs to refactor all usings), and good build support (not good with net core, and I know it is on beta still).
Honestly, you shouldn't *want* to find beginner information, you should aim to understand the "real" documentation.
Basically this. The fault on most claims that .net is the new great thing deals with the fact that majority of these people are coding in 4.6.x not core. So yes it's a fact that .net is behind, compared to python,java,go. Change it to .net core and it gets a lot closer. 
You forgot the 5% chance of [having to seek the wisdom of the ancients](https://xkcd.com/979/). 
Java is *NOT* Open Source. It is owned by Oracle and is a propriety language. Many Java frameworks are open source, but that's something entirely different. On the other hand, C# is an ECMA standard, the .Net core is open source, as is the Roslyn compiler.
I don't disagree with you. I think typescript is a good thing, but to me it feels like a bandaid for a language that wasn't deaigned for it. It's a good option for modern web programming (backend or frontend). But I don't think it's a good language for an intro to programming course. Typescript isn't really made to learn advanced algorithm. It's made to implement feature based around the web. C# and java are much better in my opinion to learn about OOP and algorithms and all that intro to programming. If you want to introduce typescript to a beginner you will have to teach him about everything surrounding it too. While with java or c# you can just say download this or that ide and press play. 
I've only taken a cursory look at the code, but a few obvious things that would stop me from considering to use this: - If you want anyone to use your library, make a Nuget package. It makes a huge difference in how many users you will reach. - No encryption for confidentiality - No integrity/authenticity checking - No authentication - Path traversal vulnerability (e.g. client might send the file name "..\\..\\..\\..\Programs\SomeImportantApp.exe" to escape the intended download folder) - you don't need to manually `Close` objects in `using` statements.
Please do not commit build artifacts to source control. Just don't.
I was exactly where you were just a few months ago. I didn't know what a method was, or a parameter, or even know how to read the documentation on msdn. I knew basic programming and that was it. I knew if statements and for loops. Then, I forced myself to read stack overflow responses. Almost every response was confusing and I didn't understand. But I read. Any time I didn't understand a term I would Google that term. "C# method" "C# enumerable tutorial". Tutorial is a good keyword to use because you get to a blog post or a code project article that explains it all in detail. Do this for everything. Now after just a few months I can read a msdn reference page and understand every part of it. Having this knowledge lets me expand my code a lot faster than if I always just copy and pasted examples. It's a lot slower to research everything, but as a programmer you need to know how to do this to advance. 
Same here. Google is the no.1 resource for programmers, regardless of programming language. Also, +1 for your username: Long live the Sabretooth Clan. 
One reason why this method is better to use than implementing your own idea is that you have an example. You know how it's *supposed* to work, and you can also be less likely to get sidetracked with random features. That said, it can be less of an adventure. 
It's IDEA + ReSharper. I wouldn't do anything with it that should produce money however until it leaves EAP status. But man is it faster than VS, and it has the IDEA UI which I love.
Yes it was.
Maybe. Part of this was also the hypetrain around Java itself. One of the selling points boiled down to 'security vulnerabilities and bugs are because software developers can't handle * or ~' Java decided to handle this by leaving the security vulnerabilities and bugs in the VM Itself (kek). Also, it MAY be better for some to learn about OO Fundamentals separately than Memory Management. On the third hand there's no reason you can't teach both in C++.
Well now Mono is official Microsoft software, and there's also .NET Core. The anti-Microsoft bias seems real though - Java is core at my university if you do Computer Science. It seems like it would be much better to teach C# though since as far as I'm aware, it can do more.
I just think that the risk of hitting a roadblock for some reason you can not anticipate is there until they move away from EAPs and therefore less chance of changing a lot from build to build...
If you can teach general relativity at university then you sure as hell can teach memory management.
MonoDevelop is pretty lacking compared to Visual Studio. Not sure how it compares to Java IDEs... Visual Studio is excellent though, and has free versions.
Windows isn't designed for supercomputers. Don't they use more specialized OS's?
&gt; Windows isn't designed for supercomputers. Neither is linux.
Not your average distro, but Linux covers many many operating systems. Aren't they using customized distros?
Many use [Compute Node Linux](https://en.wikipedia.org/wiki/Compute_Node_Linux) or similar.
Use your intellisense in visual studio, and msdn through google. When you see a method, search it on google and choose the msdn page. Works every time!
Hey, Dude below did react a bit dramatic to the winforms thing but...doesn't mean he is wrong. I used to be a die-hard winforms fan, writing custom components, using pointers and overriding the draw/paint functions to make cool custom components. (I was quite partial to a dynamic one-line form/combobox thing I did for DB searching) Although after a few years of it someone suggested I take the leap to xaml. I despised the html I had done in the past and xml is still IMO a garbage language, so I was not very keen on the idea... but the power difference was immense. It made all the work I did in winforms feel disgustingly wasteful and redundant. *** I had a similar reaction when I learned angular and realised web had come a long way from my early days of dhtml/html4 and was actually a fully state managable view system. I used to think web dev was a simplistic version of software development. Now I am a web dev first and foremost. c# still being my primary language. *** TL;DR It is rare people ever make a webform app if they know how to make a wpf app or even better an electron powered cross platform application using web technologies... I try to avoid suggesting people jump on bandwagons as being confident in your technology is the n1 most important thing. ...that being said I have been there, swore by winforms....until I didn't. So I guess what I am saying is, the effort of picking up a pluralsight course on wpf/angular web apps will not only be far more beneficial to you in the long run but you will enjoy the development more and have far more creative freedom. One suggestion for the actual problem, if memory servers you can make a custom component and write directly to a canvas of a custom user control instead of using an image user control, that gives you a lot more freedom with coloring and layers. I think there is a default form colour that supersedes actual transparency. Although tbh It has been 5 years or more since I did anything in winforms so that could all be entirely gibberish... Good luck with your problem either way. Regards, apof
It's a silly truism but also....true. The hard part about learning a programming language is understand programming. learning how to think like a programmer. despite all the debates, java vs c# vs python vs javascript... at the end of the day 90% of all those languages function the same. Once you understand, and i mean TRULY understand any language, maximum time to learn another is a month. all that a second language takes is learning the syntax and a few changes in design practices. If you really understand the effects and use of variables, conditional statements, functions/methods,scopes, oop principles, generics co/contravariance, threads etc... then the actual language really really does matter the least. 
These two pages should help you figure it out. http://stackoverflow.com/questions/455713/selectively-coloring-text-in-richtextbox http://stackoverflow.com/questions/1926264/color-different-parts-of-a-richtextbox-string If you just want a specific word colored different from the rest you'll have to come up with a way to do that. But it is possible.
Not true at all. A CS degree simply isn't likely to expose you to the sort of problems DI is meant to solve. You need experience working on real, maintained software for that, and while undoubtedly a student could and should work on open source, that's not strictly speaking part of their degree. 
C++ was the main language for my degree, and yes, the memory management content was responsible for an awful lot of dropouts. Memory management is also largely too hard for industry-level work, too, which is why the majority of sectors have moved onto something else. 
&gt; the only was to build c# was with visual studio That isn't true. You can build C# code using the command-line tools in the SDK, which has always been free since day one. Visual Studio was always just the IDE. 
I think you're a bit out of date. 
I have had great experience with Project Rider for my .net core and non-.net core work projects, except for minor minor bugs that weren't a big deal to me perosnally. It feels much more responsive to me than VS 2015 + R#. The reason I can't use it as my main driver though is because we rely on database projects and deployment from within visual studio (until we can get CI setup) so for now it's just easier to have one IDE open until two.
Serious .NET development (in my opinion) still effectively requires Visual Studio which requires Windows. In a few short years that may change. But .NET Core still has a long way to go. As do free IDEs.
Holy crap, you have no idea how many years I've been looking for this. Thank you! 
Instead of dealing with the TreeViewItems directly, you should probably be dealing with whatever hierarchy the tree is generated from (i.e. the DataContext). Add a Background property to your data class, and bind the UI to that color. Your data class would also most likely have a Children collection that should make it easy to traverse the tree. This is generally true for most if not all things in WPF, don't mess with the controls directly, but with whatever they're bound to.
I think it's bloody great, and I've used it for a long while now as my daily driver. They had some kinks during the EAP, but now once they've gone public almost all of the issues are gone. My primary issues with it is that on occasion it leaves cruft in the project files which produce warnings, and the reference editor is very, very basic. The syntax highlighting and code inspections blow out-of-the-box VS and MonoDevelop out of the water, and I'm very comfortable with having all of my IDEs for different languages under the same roof.
Thanks for the example.
Why wouldn't you just post a custom object and determine your logic based on that? Then you could just use: http://url.com/repair If not an option, can you pass all of those details as a querystring parameter? http://url.com/repair?company="test"&amp;etc Then use [FromUri] in your endpoint method and set a default value on them 
The pattern you are describing is actually best implemented as a set of key value pairs. This is typically done with query parameters. Now, realizing that may not be an option for you, I don't believe the [routing definition language](https://msdn.microsoft.com/en-us/library/cc668201.aspx#setting_default_values_for_url_parameters) is actually powerful enough to specify what you're after. You could try to specify shorter routes first with longer routes later. * "Repair/{company}" * "Repair/{company}/{name}" * "Repair/{company}/{name}/{department}" All parameters in the routes above would have to be required. It may not be 100% what you are looking for based upon your *Does Not Work* example. If that still does not get you there, based on the [documentation](https://msdn.microsoft.com/en-us/library/cc668201.aspx#url_patterns) you might be able to do something like this url: "Repair/company-{company}/name-{name}/.... and leave everything optional.
If you install resharper and do a foreach, resharper will rewrite it into linq for you. It's a good way to learn (though it can be confusing.) edit: maybe learn is a bad word here - but resharper will help you see what the linq looks like for the collection you are working with.
I have a few partners who cannot utilize posting from their backend but they can append values in a string. This is the best option available. And by formatting it in the way I did I was hoping to provide an option with minimal characters (due to max string sizes in my partners system) and maximum simplicity.
I was hoping to avoid that due to some string length requirements on the partner's system.
Country? What a low effort question.
Wow, your partners have a *really* shitty system. It is not possible to do what you are asking. For example, if *imei* is specified, then every other parameter in that URL path **MUST** also be specified. That is how the path segment of URLs work, and there is no getting around that. If you want to keep using the path, then you'll need to agree to a default value for your partners to pass for each level on the path that isn't specified. The better option is to use query parameters. The entire point of query parameters is to provide a method of sending optional data parameters. If your keys are terse, then you won't pay much extra in string length. "company" can be "c", costcenter can be "cc" and so forth.
Business is like that, old ass shitty systems that you need to find ways to work with haha. I understand that all thanks!
Just as good as the Google search engine :)
all those nice &amp; helpfull comments over here :) thank you all and you guys are truly inspiring me!
It's shocking someone would neg someone for posting a question on a site for C# help
I agree, I've had this problem too. There are two good solutions, though: * http://symbolhound.com/ is a search engine just for this * Sometimes you can get Google to work by using escapes (so "c# \=\\&gt;") or quoting the symbols
It's the Rocket Operator.
Hash Rocket operator 
The main thing is this was written with .Net Core and Standard in mind, as well as being simple and practical. That package is easily the best example I saw when researching what exists, but it still doesn't have a finished .Net Core release, and I just wanted something fairly lightweight. EntryPoint definitely isn't trying to be the next PowerArgs, which tries to do everything. It's very focused on *nux like style, and composability.
Great! Thanks for including tests too, and TIL the IEEE has a standard for argument syntax, it's cool you've followed that too. How's it compare to this? https://github.com/dotnet/corefxlab/blob/master/src/System.CommandLine/README.md
Thanks. I will try your package in my next project. 
i'd love to hear others opinions as well
Generally speaking, WinForms doesn't just randomly break for no reason. You're doing *something* wrong, and I'd wager you'll do the same or similar thing wrong again if you just start over without knowing what the problem was. If anything, WPF is more difficult to grasp and debug.
A large part of WPF is XAML. For 10,000 lines - you're going to have bugs regardless of whether you're using WinForms or WPF - that you are going to need to troubleshoot. I would advise against re-doing it in WPF unless you have an abundance of spare time. If I were you I would probably create a global exception handler to catch and log (to disk, or via email) the exception message, inner exception message and stack trace. This will help you pinpoint your problem areas. https://www.google.com.au/search?q=c%23+winforms+handle+application+error
check out the docs. You will have to check to see if you are running under TC, then you can use the methods defined here: http://cakebuild.net/api/cake.common.build.teamcity/00038f02
Others have already explained what it means and the basics of what it's good for. One thing that helped me when I was just learning lambda expressions was to read =&gt; as 'such that' in my head. Ex: Foo.Where (x =&gt; x.Name == "Bar"); In other words, give me all items in the list Foo such that x.Name == "Bar".
Resharper doesn't do that automatically though (at least for me) 
EDIT: It looks like I misunderstood what /u/AngularBeginner meant by "old delegate syntax", which would put this post in a different light and means I accidentally picked a fight he didn't intend. In which case - I'm sorry! My mistake! If you want to join in the religious war about LINQ syntax, the conversation continues below this post. Ah, it's you. :) We've disagreed a fair amount in the past and this is no different. Our engineering dept is ~70 people and we have very few specific coding standards but we do not use the pseudo-SQL syntax. It's all delegate syntax. For a few reasons: 1) 1 fewer syntax to learn 2) easier to understand what's actually happening under the hood (since the query syntax is translated to delegates anyway) 3) easier to control what's actually happening under the hood (since the execution is more explicit) People frequently underestimate the importance of (1), IMO (not just in this case). And (2) and (3) are actually both very important to us, as query performance is a real issue (we use EF and complex queries are frequently poor if you're not very precise). But so is generating queries dynamically and doing that with homegrown dynamic SQL is a different PITA.
I like the Head First books. No book like this reads without being hokey, gimmicky, or whatever you want to call it. I also strongly support little games for learning code. The game app certainly has no immediate use, but it's a simple thing to get you comfortable with the language without you needing the specialized knowledge that might be required for something like a employer tracking HR application. And it's supposed to be a little fun. Yeah, you'll never use it when you're done, but chances are, the code you're writing right now isn't great anyway. You're making mistakes, you're doing things the hard way or the inefficient way until you learn the better ways later. Anything you write now is probably going to be a throw away. If you don't want to do a game, then try coming up with software that would make your life easier. Solve a problem you currently have. And remember, the best practice code you can right are things that are iterative. You want to be able to show something working, even if it's stupid and doesn't really DO anything big, immediately. Then add little features until it's something that matters. This is generally called a Minimum Viable Product (MVP). That way you're not getting burned out without seeing results. Also, this is how many "Agile" shops architect their work because it's so effective (in some scenarios). Once you get a grasp on the language, I suggest Code Complete for coding style, architecture, and best practices.
Who's fault and what are people failing to understand? DI, and Unit Testing are not things you should have to be given an extensive training on and SHOULD be things you pick up quickly. Not learning design patters can probably be blamed on your school but then again are not rocket science either. If you have a strong understanding on what you were probably taught you could probably pick up a book and start going through it and make connections between what your reading and places you've seen the pattern used before. You won't get a full appreciation for them until you start using them or not using them but if your school gave you enough work for you to really appreciate them then you would probably be on here bitching about how much useless and repetitive work your school is giving you. 
Interesting that yours is different than mine, even though we are using the same tools exactly. I just reinstalled fresh to verify, and the hint is there by default. The foreach loop in question needs to have logic in it that can otherwise be converted to a LINQ expression as well. A simple example would be: var collection = new List&lt;string&gt;(); foreach(var item in collection) { if (item == "test") { Console.WriteLine(item); } } Which is converted by ReSharper into: foreach (var item in list.Where(item =&gt; item == "test")) { Console.WriteLine(item); } I'm running version 2016.3.1 on VS 2015 Enterprise. You can change the settings anytime by going to ReSharper &gt;&gt; Options &gt;&gt; Code Inspection &gt;&gt; Inspection Severity &gt;&gt; "Loop can be converted into LINQ-expression". The default setting is "Hint".
Based on what you're saying, I would suggest spending time learning how to debug instead of learning wpf.
So it's quite possible we just have a misunderstanding here. By "old delegate syntax", I thought he was referring to explicitly using the IQueryable and IEnumerable extension methods - I didn't think he was referring to a pre-lambda delegate syntax. So I thought he was implying nobody coded your your example as: collection.Select( v =&gt; v + 1 ) and *everybody* used the query syntax of: from v in collection select v + 1 Anyway, given my (potentially-flawed) understanding of the statement, I was responding to give voice to what I think is a different and reasonable opinion. That would be moot if I just didn't understand his point. "Unwilling to learn" is both overreacting and glossing over the important distinction between "syntactic sugar" and "reinventing the wheel". Do you support Perl's intentional "many ways" philosophy? Because I see that ALL as reinventing the wheel and adding unnecessary cognitive load to the ecosystem. This is an area where I love Python's approach - there should be one (and preferably only one) way to do something. I'm happy to learn stuff that has real, new value - but don't waste my time with lateral moves. Don't create yet more ways for developers to argue over whose favorite flavor is tastier (as you might say we're doing here). Sugar should provide a concrete value that outweighs its cognitive load. The query syntax doesn't do that in the vast majority of cases and, I would say, has additional load in being SQL-like *enough* to ensure confusion to those swapping between those contexts. And the "more explicit" does mean something - something very important! SQL syntax declares what you want and where to get it - it doesn't specify the HOW. That magic "let it decide how" is both the beauty/power and pain/terror of the language. You're leaving a ton up to the query plan generator which is amazing when it's right and unbelievably painful when it's wrong. That kind of complexity has some pros and the cons are you need to hire many full time DBA's to manage and decipher them for a DB of sufficient scale. But I digress a bit. The point is the same analogy applies to LINQ - if you naively describe the data you want it to retrieve with the query syntax, you're actually describing the WHAT and the HOW is dependent on however the layer of abstraction is translated into method calls. Admittedly, that is really not likely to change any time soon... or probably ever. But all that means is you have to learn an abstraction layer on top of another abstraction layer. And when the top layer doesn't do what you want, you still have to learn the lower one in order to debug/understand the HOW. So, as I was saying, sugar/abstraction needs to provide value that outweighs its costs. The irony here is that we both agree that we should optimize to the human. But I think your perspective is optimizing for humans with short-term, small codebases where cognitive load rarely manifests. I'm trying to optimize to a long-term, large codebase where every non-essential layer of abstraction is an additional barrier to understanding and productivity.
Is using LINQ essential to C#? Genuine question, cause I use C#, but I don't know how to use LINQ.
He said **automatically**. ReSharper does not do it automatically, but it suggests you it by default.
I've got C# 5.0 all in one for dummies. Its a great book to learn from, no matter what other resources I had, I'd always revert to this book. It covers OOP, WPF (forms) a big section on design considerations and a basic intro to Asp.net. The only thing I wish it had was an intro to sql, but there are loads of tutorials on the Microsoft msdn website 
The versions of IIS and SQL Servers installed with Visual Studio are Express versions intended to be run on workstations rather than servers. If you're not actively developing then they will use negligible resources. There's no benefit to turning them on and off manually since VS only uses them as needed.
It is just something about me, opening Task Manager and seeing all those services running. Maybe it is pointless. I'll probably add some RAM, additional HDDs and go for VM approach. 
Where do I start to learn it if I'm not well versed in SQL or database languages.
on dualboot you must have 2 OS licenses ?
Have you actually measured any performance loss? If not, don't bother. Most likely it doesn't really make any difference.
Just my paranoia)
"Such that" is not a good name; it implies a logic implication. At least it would mainly make sense for bool-returning lambdas.
No legal advice, but from my point of view: since you are using the exact same physical device for both installations and simultaneous usage is practically impossible, I would say that a single license should be suitable.
Visit r/powershell - a C# app is to bulky for this. You can easily write a one liner PS script to start/stop the services. On mobile so I don't recall what is started when launching VS - I would have assumed closing VS kills the tasks though.
ReSharper can remove redundant ToString calls automatically and safely across the whole solution.
&gt; Maybe it's pointless If they're the express versions then yes, yes it is. Look at the cpu or memory usage they use when you're not actively running them. Do you have the need to kill every program that runs in the background that's really not using much of anything? That being said, you can write a simple batch file to kill all things iis and sql express related, if it'll make you feel better. I have full blown iis and sql server installed on my gaming machine and I don't even kill those. They're local so I know there are no web requests coming in, so they're not doing shit.
Yes. I spent a lot of time looking for that perfect resource or tutorial. I started one but maybe this other one is better, so I'll start it. I've been in this spiral for about a year, starting things and then starting a new "better" one. I had to just pick one and follow it though. That's what I'm doing now and I'm actually learning something.............finally. :-) 
Which adds nothing to the conversation
The Murach book line is really good. I can tell you that I have a copy of it sitting right next to me as we speak in my office. It's the book I learned C# with and while I typically use google to check look for an answer I have gone to the book a couple times to see how things are supposed to be structured. Not sure if its still the case but the e-book publication was on sale for 38 and the physical for 45 on the Murach page. I also own their book line for ASP.net, PHP, Java, and Android Programming. I completely recommend this book line.
I have to agree with the people saying learn to debug. However I'm going to give you a couple awesome pointers to assist you :D Note a couple of the tips I give may only work on higher tiers of Visual Studio (Like IntelliTrace, which is possibly the most powerful debugging tool I've ever used.) * BreakPoints - These suckers are your new best friend. Clicking on the left side of your IDE near the line number will drop a BreakPoint on that line. When your application hits that spot in the code it will stop (Break) and you can take a "Look under the hood" and see whats going on at that particular moment. * Watch - Once you have "Broken" your application whether done manually by pressing the pause button in VS while debugging or by hitting a BreakPoint you can use the watch section to quickly check the value of variables, check the state of objects and soooooo much more. Using watches will greatly assist you in development as you can check and confirm that the values flowing in your app are the values meant to be there. * Try/Catch Blocks - Every good program should have Try/Catch blocks around functions that could potentially break horribly. You know what scratch that. Try/Catch blocks should be used everywhere you are performing many actions in a function or your function runs off of user input. As a developer you should always have the mindset of "My end user is most likely a chimpanzee trained to bash the keyboard. Better make sure I validate my inputs" Even with that mindset sometimes things slip through the cracks. Try/Catch blocks solve that. I tend to use a very broad catch like Edit - view the code block at the bottom of the post. I could not get it to format properly up here. that broad catch statement will catch any exceptions thrown and output the exception information for you to see. * MessageBoxes/Console Writes - At various points in your application during the development cycle adding MessageBoxes (MB) or Console.Writes (C.W) are a great way to see what code your hitting and what your not. If you have a funtion that is supposed to do X Y and Z in that order add a MB or C.W either before or after the one of those lines and make it output a confirmation that it reached that code i.e MessageBox.Show("Hit X"); If things don't line up like Z fires before Y or Y never fires then you know where the issue is. * This next one is reserved for the higher tier of VS as it uses IntelliTrace - IntelliTrace is what is known as a "Historical Debugger" As you run your application IT (IntelliTrace) will write down all relevant debug information that occurs during debugging. Most of the time it follows processor threads but it can be set to focus on other things as well. I swear by IT, it makes your job a hell of a lot easier when you can follow every single step your application takes, view the state of every variable and the UI, and you can get earlier warnings on first chance exceptions with more detail. IT ships with VS Enterprise in the newer versions of VS and in the Ultimate versions of the older ones. I believe there are some third party versions of IT out there but I don't know what they are called :( if you have access to this tool don't just use it... Abuse the crap out of it and make it your slave. You will thank it later when it saves you hours trying to find one bug in dev. Once you have applied these debugging tips you can take a look at your code from a much higher level and figure out what code needs to be there and what can be removed. You will also get a feel for the flow of your application and will likely find better or more efficient ways of accomplishing tasks you previously accomplished in larger code blocks. It seems to me that if you have managed to write a 10k line program that breaks occasionally you have some kind of grasp on programming. Keep at it, like everything else you can't learn to code overnight. It takes practice and once you get a real feel for it you will be a lean mean coding machine :) Aforementioned code block try { //Do something } catch(exception ex) { MessageBox.Show(ex.ToString()); // or Console.Write(ex.ToString()); if you dont have a UI. } Edit 2 - HAPPY CAKE DAY!!!!!!!
Please Please Please do not let your DB Hash for you. Hashing should always be done client side if at all possible. Second you should be using a much stronger encryption algorithm than SHA1. SHA1 has been cracked for a long time. I would strongly recommend using a SHA256 Algorithm or something similar. If you need a code snippit ill supply you with one. It's easy to implement and will do all of your hashing client side before DB transfer. byte[] Hash(string pInput) { var Bytes = new UTF8Encoding().GetBytes(pInput); byte[] HashBytes; string BaseHash; using (var HA = new SHA256Managed()) { HashBytes = HA.ComputeHash(Bytes); string Salty = Convert.ToBase64String(HashBytes) + 'Q'; Bytes = new UTF8Encoding().GetBytes(Salty); HashBytes = HA.ComputeHash(Bytes); BaseHash = Convert.ToBase64String(HashBytes); HA.Dispose(); return HashBytes; } } This is the method I use for hashing passwords. It uses a standard Hash Salt Hash method. The reason I use this method is because even though SHA256 is incredibly secure as of right now it adds an additional layer of "Randomness" to your hash making it harder to break. If you can find a way to randomize your salt value its better than keeping a static HardCode like you see in this snippit and again will make your hash even harder to break than it was before. Additionally you can return the string version of the hash by changing the return type from byte[] to string and setting return to BaseHash or return them both using a dynamic array or any other multiple output method you choose to use. 
Hey there friend. Just curios to see if you were able to implement any of this code or if you managed to figure it out. Hope everything worked out. :)
While everyone is mentioning LINQ (and when you search for LINQ, most people are talking about "LINQ to Objects" here), lamda expressions do not require you to use LINQ. In fact they have tons of value without ever touching LINQ. LINQ can basically just be thought of as a series of functions that take in other functions as parameters. For example, you can do: Object.Select(x=&gt;x.ValueToReturn); or: Object.Select(MyFunction); Where MyFunction is an actual function. Let's assume both ValueToReturn and MyFunction return an int and take an object of type MyClass. In both cases they have this signature: Func&lt;MyClass,int&gt; They're both functions, they both take in the same type, they both return the same type. The lambda expression is just one that you define inline. Think of it as short hand for all of those one or two line functions that you've been writing in your code. That also means that you can define your own functions that take in these types: public static IEnumerable&lt;T&gt; Distinct&lt;T&gt;(this IEnumerable&lt;T&gt; enumerable, Func&lt;T, T, bool&gt; predicate) { if (enumerable == null) yield break; var Results = new List&lt;T&gt;(); foreach (T Item in enumerable) { if (!Results.Any(x =&gt; predicate(Item, x))) { Results.Add(Item); yield return Item; } } } The above extension method is a very basic function that I have in my utility library for returning the distinct items from a list based on a function that is passed in to it. So I can use it like this: MyIEnumerable.Distinct((x,y)=&gt;x==y); Where X and Y are the two parameters passed in to the function and the function returns a boolean value. After a while of using lambda expressions, you start seeing their use everywhere. In fact in the comments, I saw this: foreach (var item in list.Where(item =&gt; item == "test")) { Console.WriteLine(item); } And immediately thought: list.Where(item =&gt; item == "test").ForEach(Console.WriteLine); Because, once again, I have an extension method for those instances that I don't want to write a foreach statement: public static IEnumerable&lt;T&gt; ForEach&lt;T&gt;(this IEnumerable&lt;T&gt; list, Action&lt;T&gt; action) { if (list == null) return new List&lt;T&gt;(); if (action == null) return list; foreach (T Item in list) action(Item); return list; }
Hey! Thanks for following up, yes, I was able to get this to work and your help is most appreciated!
You can use element peak while debugging (included in VS now I think) to see elements properties and values live. It makes debugging WPF a lot nicer for some issues.
Awesome!!! Glad I could help. This just made my first morning back at work that much better :D Feel free to PM me if you have any other questions. I'll Do my best to help if I can.
Not essential, no. But is it great? Yes. It takes some learning, for sure, but once you catch on it's a much more powerful way to deal with collections. http://stackoverflow.com/questions/1101841/linq-how-to-perform-max-on-a-property-of-all-objects-in-a-collection-and-ret ^ here is Jon Skeet weighing in on a linq issue. It always gets my attention when the giants in the field spend extra time on a topic. I am making an assumption of course, but I feel that if Jon cares that much about linq, it's probably the best way to do things. 
Ah, yes, my resharper does hint automatically. I thought you meant automatically apply the changes. Sorry for the confusion.
Thanks for the feedback! I would push back on combining it into BaseApplicationOptions since it would hurt the long-term composability. To put that into context, I'm planning a Commands system which would permit routing to one of multiple ApplicationOptions implementations. In that context it makes sense to have one Api class which orchestrates the different types of objects you can compose to form your program. However, if it's simply the class name I'm definitely open to changing it, so long as it's obvious it belongs to EntryPoint, as it's really an idea I adopted from [Limebean's BeanApi](https://nick-lucas.github.io/LimeBean/)
To answer the what is it called part of your question, it has been called a hash rocket but the more common and generally accepted term these days is a fat arrow. It is used for different things in different languages but in C# it is used to write a very terse inline method/delegate.
Well, I was just going to plow through with Head First but then someone mentioined Murlach...............No, kidding. I'm going to see Head First though and also some online stuff like Hackerrank. Then start some projects. I'm going to start easy with some basic Youtube tutorials, weather app etc. With something like Hackerrank I'm using the 30 Days track and learning about each days topic before I do the exercise. Day 11 is multidimensional arrays. So I'll find a tutorial on arrays (the Pluralsight C# video tutorials) and then do the exercise. All the examples on Hackerrank are in Java and right now I just find that too confusing. So Im actually using 3 sources but I'm making sure I do them everyday. Pluralsight to prep for Hackerrank and then a chapter or 2 in Head First.
I always thought that it was "goes to", but "such that" works just as well.
It's just called the [lambda operator](https://msdn.microsoft.com/en-us/library/bb311046.aspx).
*bu dum tss*!
Yeah the hint is there. I said that it didn't automatically rewrite my code. You have to manually tell resharper to make those changes. 
I don't dual boot anymore. I prefer having multiple drives, then selecting the drive/OS at POST time. There is almost zero hassle going this way. I currently have Win 10, Win 7, and macOS drives to boot between. 
Hehe. I was like that years ago... but I managed to get past it. Life is so much simpler now!
Thanks so much for a detailed and very helpful response! This is the kind of guidance I can hopefully research and implement well. My two questions/issues though, even with proper debugging are: - One crash in particular I cannot replicate, and it only appears to happen on Win 10 machines (I dev on Win 7) - Another crash, when it crashes and goes to the line that made it crash, is on "Application.run()" or something and the message is crazy generic
for your first question/issue I would recommend using the visual studio remote debugger tool. After you download the tool from microsoft install it onto a windows 10 machine. On your dev machine tell VS to use remote debugging (Tutorials are online) and start debugging your application. The app will run on the windows 10 machine but you will be able to run breakpoints on your dev machine. Remote connect to the windows 10 machine and play with the app until it crashes and see what the output is on your dev machine. Alternatively you can enable Just in Time debugging, which should give you the exception message on the windows 10 machine when it crashes. The message is not pretty but you should be able to pinpoint line numbers where things break. As for the second question it's possible that you have another exception popping up prior to this one with a more detailed information about the crash. Set a break point before that particular section of code and step through each line 1 at a time with F11. Look at the output for each line and look for anything that says First Chance Exception. If you see one then there is something going wrong prior to the major crash. I would recommend wrapping the block thats crashing in a Try Catch Block that way if it does throw a first chance exception the catch will pick it up and show you the error. You are most likely being pointed to the Application.Run() method because that is the "Master" function that inevitably calls everything in your application.
The market is very good for a skilled .NET dev of all levels if you ask me. It tends to be most in demand in states that have very pro business laws. I suggest learning how to write some basic ASP.NET stuff, basic universal apps, and ideally a basic xamarin app. Be able to write a small project with proper test, documentation, design, etc for each of the above. As a decently experienced coder with C#, all the above should be possible in a couple months imo. As long as you can demonstrate those basic skills/knowledge, and have the basic software development practices down, you will not have an issue.
Linq doesn't really have that much to do with sql, though there are frameworks that can compile its expressions to SQL. It's just a functional programming-y way of working with collections and enumerables.
Where do you see the hash mark in there?
That's great!
Yes there is. You can create multiple windows and design them individually (as I assume you're already doing). But instead of *dragging* them into your main window designer you can just create an instance of the popup-window-class and show it. Basically var p = new Popup(); // &lt;- the "popup window-class" p.Show(); If you need a blocking result, you can call p.ShowDialog().
Windows phone development is also a crash course. Everything requires async and when you find your UI is frozen and not doing what you expect you realize you don't understand async/await :)
Clutter and the need to constantly rearrange child windows *is* the core experience of an [MDI](https://en.wikipedia.org/wiki/Multiple_document_interface) application, and are a good reason why most developers left that kind of UX design behind long ago. :P Before reworking your MDI UI, consider the other UI / UX options open to you today, look at other applications and how they handle multiple document interfaces today &amp; you will probably find a better UI scheme without the drawbacks of MDI. 
You can use other models of UI with Winforms, i.e. tabs etc., you are not locked into MDI with Winforms,
*Concurrency in C# Cookbook* by Stephen Cleary is a great resource for understanding async from a practical standpoint. It doesn't get into the nuts and bolts but gives a decent high level overview and leaves you with enough info that if you want to know more about a specific topic then you know what to look for. Async works the same for desktop and web you just need to understand how to use ConfiguresAwait() correctly depending on context,for example if you need to get back to the UI thread as you would for a desktop application. The book covers that decently well. It reads more as a recipe book, "if you're trying to do this.. use this pattern". I found it as a great resource to understand how I should be using async/await best practices.
The question was about Java vs. C#, so there was no reason to talk about reasons for abandoning C++ as the CS language of choice. Reasons for that switch are discussed here: http://alpcentauri.info/java_manual_switch.htm
I've been messing around, and this does not work: for(int k = 0; k &lt; Main_TabControl.TabPages.Count; k++) { g.DrawImage(Main_TabControl_ImageList.Images[k], Main_TabControl.TabPages[k].Bounds.Left, Main_TabControl.TabPages[k].Bounds.Top); }
It was quite recent that a lot of people really started to *believe* that MS was serious about open source. They have a long record of talking the open source talk but then releasing their code under unacceptable licenses. I for one ignored most of that talk until their release of a large amount of .NET code under the MIT license made it pretty clear that there was probably no going back to their proprietary model.
&gt; crazy generic Try looking at the **inner exception**.
I see that as a chicken-and-egg problem for C#. Those libraries exist for Java largely because it's the standard language in academia.
I guess with 6gb of RAM, a virtual machine is not really an option... Anyways, that's how I do it. My work environment runs inside a VM on my home machine. If I shut down the VM, nothing from the work environment can affect the machine anymore. Also, HyperV really got so fast, I can barely tell the difference between the virtual environment and the actual host OS.
You might be interested in this answer: http://stackoverflow.com/questions/9994019/why-does-this-color-comparison-fail You can also see the [implementation](https://referencesource.microsoft.com/#System.Drawing/commonui/System/Drawing/Color.cs,1b09f9e0c56104e6,references) for yourself.
I get their reasoning. And I suppose it has its merits. My biggest concern is one has to be very careful to initialize things that depend on color equality and user input (say a color dictionary).
Hey do you have any examples of things that were MDI and changed? Or at least an alternative? For example we have an old, very complex, data entry VB project that was ported to ASP.net, popup windows and all. Sometimes we have browser popups 3+ deep and it doesn't feel very modern at all, but I have yet to see something as complex as our application on the web. One of our main screens has sliding panels, tabs, toolbars, editable content, entity selectors that spawn dozens of different popups, etc and it's all necessary to be on the screen at once. It's almost an SPA with the exception of the many different types of selectors and data editors that are in popups.
Hi, I just pass the data in the constructor, and have it set this.Top, this.Left there
That's very true but I am not in any ability to change that 
It's very well documented!
Just took a look, and it seems they're being integrated into other current certificates. So if you wanted to take exam 487 (Developing Microsoft Azure and Web Services), that's now included in the MCSD: App Builder.
Isn't cake more or less just a replacement for msbuild? TFS and TeamCity would use cake just like msbuild, although I'm not sure there are any existing integrations with it.
I really can't read the head first series. I have two books from the series and they are both so overly simplistic that I lost interest very quickly. 
This was the best explanation I've seen-- [ Task and Await in C#](https://youtu.be/0qiB3oW_nd8) by Jeremy Clark
&gt; WPF (forms) Uhm.. which is it, WPF or winforms?
That is certainly a bad line of code yes, might as well have put `return true`down. I do wonder if you can ever get it to give the wrong result in practice though, you'd need to compare two 'known colors' with the same values but different names, or two non-'known colors' which I think can't have names at all?
Well, I still cannot remove those circular references. Any other way to deep clone the Game object that does not involve serialization?
You could try your luck with protobuf-net, which is a serializer for a compact binary format and will probably require less memory and no string construction. But really, this is more of a bandaid solution in my opinion. It may be convenient to abuse serialization this way to avoid having to write custom cloning functionality, but as you're seeing it has its downsides. Another option to avoid this completely would be to design around immutable data structures, but of course that would involve even more changes now. I suspect that there might be another deeper issue at play here, however. There are limits to the size of strings (depending on the available memory among other things) and the serialization process will use additional memory in temporary buffers etc., but usually we're talking about hundreds of megabytes at least. If your typical serialized JSON is less than a 100 KB, it is rather strange to suddenly explode so much in size. Also as a small nitpick, technically *JSON* (the format) does not handle circular references, in fact it has no concept of references at all. Json.NET (the library) can encode reference integrity using its own custom semantics in JSON, though.
In my view it's not the job of a university to teach specific programming languages; Students are expected, and taught, to teach themselves that afterwards as needed. If a graduate can't teach himself a new, very related, language, I don't think you'd want to hire that person in the first place.
So far only C# 2 with C# 5 in the works.
That's all great, but... OP has specific needs, as stated.
Which is why [I provided code](https://www.reddit.com/r/csharp/comments/5k2kba/any_quick_way_to_convert_passwords_to_mysql_hashes/dbkw3er/) to meet those needs. This particular comment thread was going in the wrong direction, hence my comment above.
I don't quite see the difference between converting it to a MySQL hash vs converting it to a SHA256 Hash. In theory they will both be used the same way. Hash the password store it in a DB. The major difference I see here is the security of the hashing algorithms. MySQL uses SHA1 which is broken and my posted method uses SHA256 which is the go to standard for hashing algorithms. I realize OP was asking for something specific, however it wouldn't be very ethical of me to give him a solution that leaves his DB/Passwords vulnerable... that is unless its OP's intentions of pulling a Yahoo... Edit- I just learned this the other day. You can get a full version of MS SQL Server from Microsoft as a developer. The licence granted is for a Developer version of MSSQL but it contains all the functionality of a full MSSQL install. I used to use SQLLite and MySQL but I've moved away from them now that I can work with an actual MSSQL DB. I am tempted to say i would prefer to use SQL CE over SQLLite or MySQL but sometimes there are things you just cant get around :/
You should really paste some code samples to the readme page. It currently points to the test directory, which appears to only contain a single test which doesn't give a good impression of how this is supposed to be used... maybe give a real world example, too. Besides that, I appreciate the effort. This has probably been implemented thousands of times, yet nobody took the time to polish and put it on github before.
So what you are describing should work. I've done self referencing before with complex objects and they serialize just fine. Looking at your code I think you've set it up so that it does serialize references loops in full. I'm pretty sure you only need the PreserveReferencesHandling setting. See if using that and removing the ReferenceLoopHandling setting helps. You may be doing something weird with your data model? If the above doesn't work check and see what the JSON actually looks like. You shouldn't see two of the same object described the text output. Maybe draw out what the model looks like and see if you can optimize it? Finally it sounds like you are trying to test your AI by playing the same game multiple times? Are there other ways you can test it ? Instead of deep cloning run the program multiple times and output data into log files. Have the program be able to launch with different parameters to tweak the AI, write scripts to automate running tests. Edit: also are you sure it is the serlization that is causing the memory exception? How many times are you cloning? How big are your clones? Do you have a clone loop? Try outputting your clone strings to files instead of memory to test this. 
Same as French interpreter companies should hire fluent German speakers. If they can't learn another language on their own time, what use are they? No. The students are paying VAST quantities of money to learn languages I don't want? That's bad judgement. I will look elsewhere. I'm sure there are still employers looking for Java skills, so Java students will be fine, but Universities need to adequately prepare for the workplace (or, you know, academia if that's their thing).
Well, since this is a 2-player game, a bool would suffice. But this isn't the point. Via the Player class, I can not only access the player, but also the whole Game structure, since players point back to the game they belong to. Also, this is not the only circular reference. But anyways the methods described earlier seem to work for now.
https://referencesource.microsoft.com/#System.Drawing/commonui/System/Drawing/Color.cs,1844 is clearly a bug return name.Equals(name); meaning return this.name.Equals(this.name); It is fixed in corefx: https://github.com/dotnet/corefx/blob/master/src/System.Drawing.Primitives/src/System/Drawing/Color.cs#L597 though I suppose that is technically a behavior change.
Looks like there was a bug in the code that made me discover that they do actually adjust dynamically. I got a memory stream as big as 140 megs. *I was serializing the freakin' card artworks.* As if the fake environment needed them...
Let's say you have 3 forms in your project, Form1 which is your main window and Form2 and Form3 which are your pop-ups. In the "new" button you want to call Form2 (supposedly your new contact pop-up), so you do the following in the click event handler of the button: var addContactWindow = new Form2(); addContactWindow.ShowDialog(); // This shows the pop-up If you want the pop-up to pop next to the button you need to do some extra work, it is really simple, don't worry. var addContactWindow = new Form2(); // This, so you can set manually the start position addContactWindow.StartPosition = FormStartPosition.Manual; // Save the location of your main window, so we can work around this var location = this.Location; // This is right next to the button relative to the main window var marginLeft = button1.Left + button1.Width; // This adds the space to the location we had location.Offset(marginLeft, 0); // Set the location of the pop-up addContactWindow.Location = location; // This shows the pop-up addContactWindow.ShowDialog(); And that's pretty much it
&gt; `Environment.Exit(0);` This is unnecessary; once the `Main` function completes, the program will exit. 
I don't think 1) is necessarily a good argument against. If we were to constrain ourselves to only things that were easy to less experienced developers, we'd never get to use a lot of things that in the end make our code better. Hell, the entire incursion of FP into C# may never've happened!
The maximum size for arrays is 2 GiB (regardless of architecture), far away from the 32 KiB mentioned here.
If you're going to use this extension method, you should yield each element in your foreach, otherwise... * It will quickly run out of memory on large collections * You couldn't lazily apply it. Ie, something like this probably wouldn't work the way you'd expect/the way it's supposed to: collection.ForEach(i =&gt; DoSomething(i)).Take(10); // assuming more than 10 values in the original enumerable.
Memory management is but one form of resource management, but it does demonstrate/teach issues that apply to the general field. Second, nobody is going to stay in one field (e.g. web-development) for their entire career and, three, currently IOT intimately connects web-development with embedded systems development. I did assume the thread was about computer science as a main dish, not some introduction on the side, for which, I agree, memory management is not interesting, and neither is Java.
&gt; 32768 Sorry, yeah wasn't thinking, that's only an Int16 max. Cheers! 
&gt; ... is cross platform and ... These days many platforms are rapidly becoming cross-platform ;)
In our application's case you technically can use multiple tools at once, kind of like Excel's old MDI interface, but it's not heavily used. So I guess my issue is not how to fix MDI, but really how to improve upon a modal dialog heavy application. Guess I was just piggybacking on this topic because I have yet to see a good solution.
Thanks! That is very very helpful. Is there anything I should know about namespaces or "using" or anything like that? When I last fiddled with using other forms, it didn't recognize any of the classes or functions from the rest of the program, and then I tried to pass things in and it just got awkward and didn't work right.
FIN_WAIT_STATE_2 error. Oh the fun times.
&gt; software development and computers are the primary the tools by which computer science is done. Except for rather large theory part.
Big project is a bunch of small projects in one solution or could be multiple separate solutions.
The size of a project tends to come down to what you want to achieve. Without an idea, you're pretty stuck. In terms of how to do it, start with the idea ans break it down into sections. Writing a specification can sometimes help clarify how you may want to orfanise things: I want to write a booking system for a cinema. You have to be able to: Book seats, cancel seats, schedule screenings (or make it schedule these based on the length of the film?) To expand this, I was a GUI based system for staff and a webapp based syatem for clients to book online (Yes, this is not realistic, but it may suit your purpose of a 'big' project to include multiple elements). That was just a quick idea and I am sure you can see where the expansion comes from. As for how? I tend to start with a spec, then basic classes (class called seat that has a row, number and bool for booked etc) and create my 'core' project. This tends to just be a class library that has basic functions and classes. Then I tend to use another project for frontend that would use the core project. There are many ways to skin a cat, but this tends to be my way.
[Snippets](https://msdn.microsoft.com/en-us/library/z41h7fat.aspx) would fill probably fill that niche, and they've been around for almost a decade. ctor, prop, propg, and propfull are my favorites. I also use testm a lot, but for some reason that list doesn't include MSTest snippets.
You can use [ServiceController](https://msdn.microsoft.com/en-us/library/system.serviceprocess.servicecontroller\(v=vs.110\).aspx). Shelling out should be a last consideration, generally.
Sure! Thats why I want it to be open-source
Not 100% certain on the memory issue. Nothing is created in the loop. The Distinct function definitely has potential issues but I can't spot any such issue with the ForEach. Then again I'm running on 2 hours of sleep today. Also the lazy application, I actually did that originally but it caused confusion with junior devs. It was more intuitive for them to do: collection.Take(10).ForEach(i =&gt; DoSomething(i)); Than the other way around. They usually went in this order: 1. Get List/Collection of data. 2. Pair down list with Where, First, etc. function calls. 3. Call Select or something similar to get final values needed. 4. Call ForEach on final set of data. I don't know if that's common for most people or if it's just the devs that I've worked with but that made the most sense to them, so that's how I wrote the method. That said, I do like the idea.
I'd have some interest in this. Let me know if you want any contributors.
I sent you a pm
It definitely is more intuitive to `Take` first, but the point was that both would work the same when yielding. As far as memory is concerned, it's not that you're allocating anything within the loop, it's just that it has to keep the entire collection in memory before the function returns. For large collections it'll run out of memory, and infinitely sized collections will never return anything and just eventually crash. I do a fair bit of stream-like processing, so I have to think about these things.
Squirrel https://github.com/Squirrel/Squirrel.Windows 
My suggestion is to plan out each component on paper first. If you have a ui draw a rough sketch. Plan out your controls and methods. And any related classes. Then once you have a rough design written out start writing code. Only work on 1 component at a time. Pick a form build it, write any code for the ui, and then build any supporting classes/objects. If you try and bite off too much in one shot you will quickly become overwhelmed and lose track of everything, and that my friend is when scope creep happens. 
Usually, no. If you're adding the forms to a single project VS will just use the Default Namespace set in your project properties, of course if you modified one of the form's namespace you'll need to add a using and make the form public. Regarding methods, check that the methods you're trying to call are public (or internal) otherwise you won't be able to access them. Working with multiple forms can be a little messy at the start because sometimes you forget forms are actually just classes and we forget things like inheritance, static members, access modifiers and stuff.
break will make you jump out of the switch statement. In a similar way, continue inside a foreach will make the loop jump to the next item in the collection being iterated over.
Thank you
`break` exits the containing `switch` or loop and jumps to the next statement after it, basically. It's like a statement-level `return` in a way. `switch` statements are a bit of a special case, because they are based on the (imo unfortunate) C syntax but also have additional restrictions. In C#, you *cannot* fall through from one `case`/set of cases to the next case (which is legal in C). That means each case *must* also contain some sort of abortive statement. Most commonly this ends up being a `break` at the end of each `case`, but could also be e.g. a `return` or `throw`.
Yes! Snippets are awesome.
I haven't read all of the code, but here are some general comments: 1. The Ast class may be unnecessary if it's just a container for a root node. Any context that wants to hold a reference to a root node can just have an AstNode. 2. Whenever a class instance method can be implemented entirely in terms of other public methods (like AstNode.AddTwo), I prefer to make it an extension method; this keeps the class's own implementation more orthogonal. 3. It's not clear why you need both IAstTransform and IAstTransformer, at least not from the existing implementations of them. It's also not clear what the comment on IAstTransformer that it's mutable means, since nothing on the interface seems designed to mutate state of the transformer itself. It doesn't even seem like a transformer would need visible state; from the outside, it should appear to be a pure function from one AST tree to another.
Having automated memory management and guaranteed memory safety probably makes it much easier to grasp than especially C(++). On the other hand, being strongly typed may be a hurdle to brand new developers who aren't used to having different data types (e.g. numeric/string conversions, integer division, up and down casting), while many loosely typed languages just make it work somehow (Javascript, PHP etc.).
I'm not sure sure what you meant by "set of cases", since that doesn't make much sense in the context of C-style switch statements - each case is separate, but falls through by default. In C#, case fallthrough is a syntax error unless the case is empty, which I guess you could call a "set of cases", but it's not what I'd call it.
[removed]
Depends on the "other" programming language. Easier than C or C++? Definitely, and this is mainly related to not having to do memory management. Easier than Python? Swift? Ruby? Not really.
I'm sure putting the title into Google will give you all that you need.
Yeah, keeping the switch syntax from C is definitely a design mistake if you ask me. The same with keeping the operator precedence of (binary) `&amp;` vs. `==`.
Script the folder copy in power shell or a batch file and call it in a post build step.
Why not set it to build directly to the remote computer?
This IS the API for Drive, though. Check it out here https://developers.google.com/drive/v3/web/quickstart/dotnet It's that working with any of the Google services can become a massive headache, really fast.
I believe at some point you could open project.json in VS. unsure if this still works
&gt; Easier than C or C++? Definitely, and this is mainly related to not having to do memory management. Memory management isn't difficult at all to learn; it's difficult to master. I don't think C# is easier to learn than C. C++ however is probably the most complex programming language in existence.
How's are you getting the new exe on the other machine? I work on a LOB WPF app, we just deploy the debug along with release to our internal users.
While it may be more of a challenge to start with a strongly typed language its likely a better place to begin. I've met a couple programmers who started with loosely typed languages because they wanted to do web dev. When they started using languages like C# and such it was miserable for them because they got so used to just declaring a variable and slapping whatever value they want into it. On the other hand though, starting with a loosely typed language forces a developer to learn to validate and sanitize user inputs alot sooner because you can shove whatever you want into a variable :/
Which you should use really depends on what you're trying to do. WebAPI with one of the JavaScript MVC libraries (i.e. Angular or React) tends to be better for smaller Single Page Applications (SPAs), while MVC tends to be better at more traditional multi-page applications. I used to work on the Java side at my last job. The .NET side switched from MVC+jQuery to WebAPI+AngularJS 1.x+Bootstrap. Edit: Side note, both MVC and WebAPI can be used with .NET Core if you need multiplatform support.
I don't know much about ASP, but I usually just copy the .exe and any DLLs to the remote machine, then register it as a service.
Yeah, the office isn't ready to switch to core yet. But thx. Actually, I'm switching to jscript framework because I've no clue how to do some of the things I want in c#. For instance say you've got a table of items, with name and quantity in stock, and you want to add at each row of the table two buttons "+" and "-" to change that quantity : in jScript I know it's easy to do, in c# I've seen how to do that in a webform, but in MVC i've no clue : how do you bind each button to a particular property of the model ? Sooo... going to jscript for now :p
With MVC, you still can write DOM aware JavaScript and use any JavaScript library. The use case above can certainly be done with MVC and vanilla JavaScript by updating a JavaScript variable or incrementing a hidden field's value when an HTML button is clicked and then posting that value to the server. Also, your terminology might throw some people off - when you say "jScript" it seems like you're referring to client-side libraries built on JavaScript. If you said to a developer that you can't use JavaScript in MVC, you'll get some weird looks.
It is a current trend because that is what people advise. 
If you are doing this often, use octopus deploy. You can script out the deployment process and setup test/staging/production environments to deploy. Then it's not a manual process anymore, less prone to errors.
The problem is that there's an `IComparer` and an `IComparer&lt;T&gt;`, and because you'd not told the compiler to use the `System.Collections.Generic` namespace, it tried to apply the type argument to the non-generic one. In that context, the error makes complete sense.
Top Shelf is a framework to help with creating a service, not for deploying it. I also find topshelf to often be a needless 'fluent' wrapper around the simple Service classes already provided in the framework. 
Octopus Deploy FTW
He's very good. I usually look for his videos first because of how simple he makes it.
&gt; Why is System.Collections checked if it's not in an import? It's not. If you don't have the `import System.Collections;` directive included, you get the error: &gt; The type or namespace name `IComparer&lt;int&gt;` could not be found (are you missing a using directive or an assembly reference?) Which is the reasonable and expected error to get. If you _do_ include `System.Collections`, then you get the error message stating that, yes, there is an `IComparer` type available, but not one that is generic. This also seems reasonable to me. OP here had `import System.Collections;`in their code file, but didn't include the namespace imports in their post. EDIT: I mean `using`, not `import`. Oops.
&gt; OP here had `using System.Collections;`in their code file, but didn't include the namespace imports in their post. That's odd as Visual Studio defaults to putting these includes in newly created C# Class files: using System; using System.Collections.Generic; using System.Linq; using System.Threading.Tasks; 
did you shart the code out?
Hey I really like the idea of a queue system, it works really well, this even made me realize why my original solutions for the problem didn't work as well. (Too much parsing from Comment to String types and attempting to add them to the list in the confusion). Can I ask where you learned programming? I'm mainly learning on my own from books or websites like dotnetperls.
Heh. 5 an hour. I would suggest starting with a good book, it doesn't even need to be c#, if statements are a fundamental that is in pretty much every language, you're also going to want to learn loops. I started with an outdated c++ book, which I wouldn't suggest. But the fundamental aspects of if, loops, and classes were there. Though I know the animal book for c# will show the fundamentals too, that is, the O'Reilly book. Look for learning c#, find one that is up to date, you can get it from most any book store with a computer science section. Animal books are generally cheap too, no more than 30 cdn generally
There is a tremendous amount of free resources online to get you started that won't cost you $5 an hour. Try this to get started if you are asking about IF statements. https://channel9.msdn.com/Series/C-Sharp-Fundamentals-Development-for-Absolute-Beginners/ 
Try jquery typehead
Take this with a grain of salt, as I have never done this kind of development. But session storage is done on the hosting server, right? Since you're using virtual (cloud) servers, that means your application is hosted on a load-balanced server farm. So the server you initially stored the information on is probably not the same server that you talk to the next time you refresh. I know in "traditional" ASP.Net there are options you can set up in as to where Session storage is done. The fastest and easiest is in-memory, but that doesn't work on server farms. For server farms you have to use cookies or you have to create a backing store (database) for session data.
https://www.reddit.com/wiki/selfpromotion
Cool, I didn't know about that project. Thanks for the link!
You never assign the `gameCloseTicks` field. Your saving method should read: PlayerData data = new PlayerData(); data.currencyToCollect= PCM.currencyToCollect; data.maxCurrencyToCollect= PCM.maxCurrencyToCollect; data.premiumCurrency= GM.premiumCurrency; data.showTimeLeft = PCM.showTimeLeft; data.gameCloseTicks = DateTime.Now.Ticks; //missing this line So in your loading method, it's currently always checking the difference between `DateTime.Now.Ticks` and zero (which is the default value if left unassigned). So your line `ticksSinceClose = System.DateTime.Now.Ticks - data.gameCloseTicks;` is always calculating as `DateTime.Now.Ticks` or the ticks since January 1, 0001. EDIT: This is why it's shooting to max currency right away because the game thinks it's been shut off for almost 2017 years. By the way, I also added this answer to your StackOverflow question. So if it fixes the issue, mark it as answered there as well for posterity.
Alright thanks for your response. I'll try these things and continue to mess around with it.
We build our server side shit to return JSON rather than HTML, then use Handlebars to transform that to HTML (then jQuery to chuck into a div tag). I wonder how much quicker it is though (in terms of client side processing, especially on mobile), to have the server generate the HTML for you and then to just throw it straight into the div.
Removed: Spam.
Im not sure that I have ever used the debugger that you speak of. The only debugger that i know that if it doesnt compile then i figure out whats wrong because it wont work, but everything compiles fine.
It works! Thanks!!!
Awesome thanks! I am a reletively new programmer, ive been using the language for a while but never got past just the language logic. In order to do this before i was making new text and setting it as the values i wanted lol. I hope this is easier.
Exactly. Also apart from prerendering immutable views, you can prerender mutable views with initial state on server side to eliminate initial roundtrips to APIs on client side page load, and then as client state changes the app talks to APIs and does rendering client side.
If you need something simple and supported out of the box, WebDAV with IIS (for file uploads) + PowerShell via WinRM (for service installation) would work pretty well, free and highly customizable. If you plan to use continuous integration/continuous deployments, worth looking into Release Management or Octopus Deploy or some other similar systems, depending on infrastructure you have.
I would love this as an opportunity to learn!
Removed: Spam.
[removed]
Oh... Proper debugging, with Breakpoints, Step-Over, and Watch's (Live view of variables whilst running) and all the other goodies is going to blow your mind. Stop coding **now** and go do a tutorial on how to set breakpoints, what they are, and how to step over your code and read variables (via Watch's), your coding sessions will never be the same again, **ever**.. Then, when suitably impressed, go learn conditional breakpoints and what *they* offer. You're gonna be like a kid in a candy store. :P [This](https://msdn.microsoft.com/en-us/library/k0k771bt.aspx) is a great place to start.
I cant wait! They sound like they would help a ton! Thank you very much!
var keyword FTW
You'll probably find more resources under the term "plugins"/"plugin system". A very basic implementation of this is reasonably simple using reflection: 1. [Load an assembly](https://msdn.microsoft.com/en-us/library/b61s44e8.aspx) 2. [Get its types](https://msdn.microsoft.com/en-us/library/system.reflection.assembly.gettypes.aspx) 3. [Find implementations of your base class](https://msdn.microsoft.com/en-us/library/system.type.issubclassof.aspx) 4. [Create instances](https://msdn.microsoft.com/en-us/library/wccyzw83.aspx) For a more thorough approach, you should look into the MEF (Managed Extensibility Framework). 
Hmm, I don't see anything on their site about that. I've just checked on it though. :)
C++ is so complicated because of the standard libraries. Without the STL, it's basically C with classes.
I concur. Most cloud implementations have to remain stateless. This is because you might connect to different machines or because your machine is spooled down when not in use. You can store your session in a cookie if it's not sensitive. You can also store it on the database or a Redis cache if you need to keep it away from the client. 
AstNode has an Add method. AddTwo can call Add twice. IEnumerator exposes part of its state with the Current and MoveNext members; they're part of how IEnumerators are expected to be used. With the transformer interface, however, I didn't see anything exposed to callers that they would be expected to use to manipulate state directly--including a reference to the tree that's being transformed. Maybe I missed something; if not, it seems like you're exposing an implementation detail that callers don't need to use. Just my two cents.
That's not true at all.
I'm not entirely sure what your question is. You would export an interface or base class from your application, and plugins would then reference that type.
I personally haven't seen any with a bunch of examples of each one, but you can find plenty of examples on their own around the net of the more common principles. I think OCP and LSP are hard to make practical examples for (that is, examples that aren't over simplified), mostly because they're more like considerations that are made more than a "don't do this or that" kind of problem to solve. Also, I personally believe these principles can be applied at varying levels and better demonstrated at different levels of application. When I say level, I mean system &gt; application &gt; class &gt; method and so on. Maybe we could just dump some production code here and solidify it for funsies. 
Rewrite it in service fabric.
So /u/tweq 's method is what I would strongly recommend. However, just to put something else out there. Ive used CSharpSyntaxTree.ParseText then passed that into CSharpCompilation.Create to get a custom class parsed and in the system. I havent needed to do versioning or anything with it yet, but that would just be a thin layer over what all that returned. 
I'm not sure I was even born back then.
From what I understand, you have simultaneously MVC and API in your project, therefor your distinction is understandable and important. My question however was more "do you do MVC OR API" ? I'm currently working on very small projects to learn how to do things, so there's no chance to work those on mobile apps or whatever, it's more SPA (like an rpg character sheet or a list of the books I've lended, you know, basic stuff). And I've found that making an MVC for such small projects is totally overkill, where an API is exactly the same as the controller of the MVC but without the whole "fuuuu where do I place this logic" problem
Ideally the best current way is to count on the client to render your shit, for what I've got from friends that are heavy on javascript. I don't really like that, as it means a mobile user will see his phone die between two pages, but "that's the trend". 
Yes, but why do people advise this? because it's trendy, or because of some real life advantages? If the latter, could you elaborate on what those advantages are?
But don't you need to have separate layers in a MVC too ? I would think you have a folder "repositories" that contain the code that will call the database, and that db layer itself is indepedant from your solution. Writing an MVC and an API + front end for the same project, I've the feeling that the MVC is longer to write and has the same requirements, not mentioning that some framework javascript (angular for instance) requires you to literally rewrite your controllers in Jscript -.-" I think you're right saying the microservice pattern is what led to the massive use of API + presentation pattern.
The guidelines state: &gt; DO NOT use exceptions for the normal flow of control, if possible That was the reference for the part about "exceptional, unusual or rare'
Did you read his comment? He said he was able to create it using the tutorial. 
I mean you have to reference some common interface in both app and plugin. App Assembly can get updated version, while plugin is still using old version of Assembly containing Interface. Is it still OK or you can get problem casting plugin class to common interface because while names are the same but version is not.
One advantage is clearly separating backend from frontend. Your frontend people consume an API and do what they do best. They don't have to learn Razor. As others have noted, it also ties in with this push to microservices. There's more information and answers to your question in these threads: 1.http://softwareengineering.stackexchange.com/questions/238647/pure-front-end-javascript-with-web-api-versus-mvc-views-with-ajax 2.http://softwareengineering.stackexchange.com/questions/287819/should-you-write-your-back-end-as-an-api 3.http://stackoverflow.com/questions/23583782/pure-front-end-javascript-with-web-api-versus-mvc-views-with-ajax
Nah lets get really crazy. Forget var lets set everything to dynamic :O
Awesome. Glad I could help :)
Thanks, it's a good idea. I'll add some code samples and maybe a real world example.
var task = new Task(() =&gt; Parallel.ForEach(list, (l) =&gt; DoWork(l))); task.GetAwaiter().OnCompleted(() =&gt; Console.Write("!!!")); task.Start(); --------- var tasks = new Task[list.Count()]; Parallel.For(0, list.Count() - 1, (I) =&gt; tasks[i] = Task.Run(()=&gt;DoWork(list[i]))); var task = Task.WhenAll(tasks); task.GetAwaiter().OnCompleted(() =&gt; Console.Write("Wat"));
I hate working with multi-threading too - it's difficult to debug. I don't mind the application taking time in the foreground - the truth is I need to process a list of 100000+ list items - trying to think of a way to split the A - J, K - Z sort of thing but, can't think of a design.
From what you've said you're probably out of luck unless you want to redesign the entire architecture. It sounds like the way you've built your thing it's only ever going to work in a single threaded sequential way. Multithreading isn't something you slap on at the end. You have design your system from the ground up to be asynchronous, which might mean complicated locking semantics depending on what you're trying to do. That said, what are you trying to do? What does the processing entail? Is there a database behind this? If possible, you might want to try doing the bulk data manipulation in SQL. Sorry, there really isn't enough information here to give a good answer. With multithreading, seemingly tiny details can have a huge impact on your design. Edit: Downvotes eh? OP stated that his program is crashing when he tries to slap parallel processing. The most common reason for this is because you're manipulating some UI bound thing on a thread other than UI thread. When that's the case it's usually because the logic and UI are tightly coupled and it's going to involve a heavy rewrite to get away from that (especially true with WinForms stuff). It's either that or the processing is dependent on running sequentially, though if you didn't put your own locks in, you'll probably get bad data as result rather than a hang. Every one offering up quick solutions involving Task.Run or whatever are just glossing over the fact that you can't just automatically parallelize any arbitrary block of code. Sometimes you can and other times you need to do things like marshalling specific calls to specific threads or protect against race conditions (being careful to avoid deadlocks in the process). It really depends on the specifics of what you're doing and OP hasn't provided any of that.
They can't be different. It has to be exactly the same interface. Your plugins have to reference either the app .exe itself or some common dll both the app and the plugins reference. If you make changes to the interface in the app, it won't be the same interface used by the plugins anymore.
Background workers seem to be the best fit here given the amount of information OP is trying to parse through. In addition the background worker comes with several events and methods that allow for process monitoring, error detection and you can use the WorkComplete event combined with Boolean flags from the other workers to prevent any further processing until the list each list has been ran though. 
`async`/ `await` does all of this in a more convenient way. The `BackgroundWorker` is a relic from a bygone era.
Sorry, but that is just silly. `BackgroundWorker` is a clunky way to start a thread and post the results back to the WinForms GUI thread, that's all. The TPL and async/await are so much more modern, capable and versatile, and easier to use to boot. It's like saying other added features like generics or `Nullable&lt;T&gt;` are just reinventing the wheel, and fumbling around with `ArrayList` and whatever is just as well. There is literally no reason to use the outdated mechanics unless you wrote the code before better alternatives were added.
In his case he does.
If I have to do that in code then I use PsExec and installutil to install the service after copying the files to the remote machine.
These probably cover what you want: https://msdn.microsoft.com/en-us/library/4as0wz7t.aspx https://msdn.microsoft.com/en-us/library/ms172307.aspx https://msdn.microsoft.com/en-us/library/ee890485.aspx
Does it matter if they are processed sequentially? If yes, then there's nothing you can do but offload it to a non-blocking task. If order doesn't matter than there are many ways to approach it. Simplest is to just move the `Parallel.Foreach` into a Task and await it: await Task.Run(() =&gt; Parallel.ForEach(names, n =&gt; Process(n))); Or you could use a more complex implementation like Dataflow or Rx _streams_ where the processed values can be used as they are processed. 
Tasks don't use threads; they use IOCP. The thread is freed to do anything else, and any of the available threads will pick up where the task left off when the ISR fires on the CPU. I will grant that, because this particular parallelization is CPU-bound, many threads will be occupied processing the work, but no thread is actually involved in "waiting" for the task. Check out Stephen Cleary's [explanation](http://blog.stephencleary.com/2013/11/there-is-no-thread.html); it's a good read.
&gt; API and MVC in same project Correct, this is generally how I set things up, and I think it would make sense for you, as well. Doing so will force you to learn both, and be able to identify the strong parts of either. Even for your simple project, you need to send down the initial HTML at some point before the SPA takes over, right? Do this initial page load in MVC, then have your SPA call the API layer to get its data. &gt; without the whole "where do I place this logic" problem On the contrary, that problem exists in both API and MVC. I'm guessing what you're referring to is that in an API project, there aren't necessarily any models (as in the "M" of MVC), so your probably cramming all of your logic into the controller, and returning some collection of anonymous objects. I know you said your project is small, but it's still important to make good architectural decisions. In my opinion, regardless of whether it's an API controller, or MVC controller, you really shouldn't have much model/object-building logic. I always separate that logic off into another layer of classes. That way, if/when you need to reuse that logic, you can do so...Rather than copy/pasting it from the controller. 
&gt; I have tried parallel.foreach, but because of the thread blocking properties my app often hangs. This line doesn't make much sense. If all you're doing is purely independent, parallelized work then there's nothing that should hang your app. Parallel.For or ForEach is the right approach to this question according to the information you've given so far. Could you post some actual code of your Parallel.ForEach usage?
&gt;Whichever thread starts the task is freed Yes, that's the whole point of `Task.Run()` &gt;once the task starts Which then runs the delegate on another thread, blocking it.
[This article](https://android.jlelse.eu/solid-principles-the-definitive-guide-75e30a284dea#.ahj379kah) was just posted in [r/java](https://www.reddit.com/r/java/comments/5l39jd/solid_principles_the_definitive_guide/) and has some code examples. It's not comprehensive, and some grammar correction is needed but it gets the point across in very simple terms.
&gt;It won't. You got your theory wrong. Funnily enough there is a series also written by Stephen Cleary that explains how `Task.Run` works and why you should stop using `BackgroundWorker`: http://blog.stephencleary.com/2013/09/taskrun-vs-backgroundworker-conclusion.html
That post only applies to a *subset* of all types of tasks. A `Task` is just an abstraction for a piece of work that can signal its completion at a later time by calling a specified callback. The work it represents *may* be truly async IO using OS-provided completion ports. It may also be a timer. It may be a manual state transition (e.g. `TaskCompletionSource` and `TaskFactory.FromAsync`). And it may be a synchronous method executed on a thread pool thread. In the case of the parent comment, *awaiting* the task does not block the awaiting thread. But *the thing that is being awaited* is a blocking operation on a different thread. (And that operation is waiting for the completion of the parallel worker threads).
+ to both your points, does depend on the situation tho! Also should note that .Batch() isn't an inbuilt linq method, but it's easy enough to write 
&gt;... but I don't see anything contradictory, or anything stating that a thread is occupied until completion. This is explained in the first article of the series. When you use `Task.Run` the delegate you pass to that static method is run in *another thread*, just like /u/tweq said. What you need to understand about C# `Task`-based programming is this: a task *could* be using a thread or not. As corollary: **all C# tasks don't use IOCP** ([that's something you said before](https://www.reddit.com/r/csharp/comments/5l3cb7/how_to_process_a_large_list_using_multithreading/dbsqn2d/)). Also *There is no Thread* is basically about how I/O works. **But it is not about what a C# Task is or works**.
&gt; In the case of the parent comment, awaiting the task does not block the awaiting thread. **But the thing that is being awaited is a blocking operation on a different thread**. (And that operation is waiting for the completion of the parallel worker threads). This is what I'm getting at, and why I stated "the thread which starts the task" rather than "the thread which creates the task." Or rather, I intended to relay what you stated. In the case IOCP is involved, there is no thread occupied. I'll concede there would be certain types of Tasks that do occupy threads; I can envisage scenarios that would cause that. You have me curious now. I know I have used tasks for "asyncing" synchronous tasks. Do you have example code for a timer and `TaskCompletionSource` and `TaskFactory.FromAsync`? I'd like to toy around in the debugger and see how the threads operate.
thanks for that. i have skimed around the net for a while. trying to get an idea of how to build a basic mmo server. i have been looking at Photon but i can't follow the code on their demo because so much of it is handled by Photon.
[removed]
Removed: Rule 3, Rule 4. Maybe /r/learnprogramming is a more appropriate place for this question as it is.
Yes, as long as the plugin still fully implements the interface. If you for example added a new property to the interface in the main assembly, the plugin would fail to load at runtime.
Working With Legacy Code by Michael Feathers. The entire thing pretty much start to finish. It focuses on doing it with unit test backstops, which is the right way if you're actually talking about production code anyway. Clean Code by Bob Martin The whole book is great, but more specifically: Ch 16. - Refactoring SerialDate Is a pretty explicit process. DI by Seemann as well as /u/ThereKanBOnly1 suggested.
I've actually been really curious how others work with architecting Roslyn projects. I [have one here](https://github.com/aholmes/BuilderGenerator/tree/master) that I've started overhauling and rearchitecting, but on GitHub it's still the procedural code I started with.
AFAIK (it's been 4 years since I've played with this) this is dependent on whether you're using strong-named assemblies. AFAIK, this is possible: 1. Create projects Common, Plugin. Common has an interface, Plugin implements interface with method A. 2. Build and store Common.dll, Plugin.dll 3. Create project Entry. Have Entry reference Common and load Plugin at runtime to invoke method A on interface. 4. Modify interface to add method B, invoke B in Entry after invoking A. 5. Build, copy old Plugin into directory so it is dynamically loaded with a mismatching Common. 6. Run. A executes happily, B throws a MissingMethodException
I see them every once in awhile and they are hilarious. They take simple, working code and make it into a unintelligible mess. The best part is the authors think it is a good thing. You can't write satire as funny as these sites. My advice, forget that bullshit. Get yourself a copy of .NET Framework Design Guidelines, 2nd edition. It will make you a much better programmer.
You could use HtmlAgilityPack for that.There are plenty of samples on forums.
Are you looking for something that works like [emojitracker](http://www.emojitracker.com/)? Instead of emoticons (emoticons are text too) u will want to track certain keywords 
With the CSharpSyntaxTree you're making more of a scripting system than a plugin system. Can be useful in many situations but it's not the same. Scripts are easier to write and change than plugins because they are just text files not dll files. And plugins can follow protocol easier because they are usually bound to an interface.
C# has a bright future based on the development of the .NET Core tech and general acceptance and approval of the language. I'm more of a desktop dev myself but ASP.NET (which is a framework for creating all kinds of webapps) can be executed on almost any OS if using the (slightly more limited) .NET Core variant. It's always worth doing programming just to learn new things. If you like C# and .NET then I recommend fiddling with it. Be it creating a REST API, cloud based app or a general website.
A ton of web development is done with a javascript framework on your front end and communicating via REST API calls to a back end. C# is good for the back end portion. There are ways to write a front end in C# as well with Web Forms (deprecated) and ASP.Net MVC (has it's uses). C# is good for a lot, it's used a lot in the enterprise world and there are a ton of jobs for it. You can pretty much do anything you want in a Windows ecosystem with it. If you're looking at a Unix ecosystem it can do a bit but it's still early on in it's lifecycle. I don't mean to sound harsh, but this is a really open ended question that could be searched for on Google for what you want more specifically. You say you want to write more traditional software but what does that really mean for you? What do you really want to do with programming? Hard to answer without really knowing that and there are ways you can find what you want pretty easily.
[removed]
You're saying that keeping the hashcode is an extra step for your users.. but you can abstract this away in a custom dictionary class to do this automatically for the user of the class. I doubt reusing the hashcode would be faster anyway because you still need to find which hashcode belongs to any given string (if I understand correctly). Edit: To test this I would create a scenario with the custom class and the 'normal' way and profile that to see what takes the longest.
Your last sentence before the edit is the essence of my problem. I fail to see how a custom dictionary class can solve the problem, though! Ultimately it is a string passed to a function. I just want to know if there is a way to coerce the compiler to see that the string is constant/hard-coded and store off this hash code for reuse at that line of code without any extra hoops for the user to jump through, aside from just passing a string into the function. 
I was wondering how long it would take you to show up and barf all over SOLID
You want to scan every single tweet? From everybody? Good luck.
Among the other things people have mentioned, it's a very easy language to use for making Windows forms apps or Mono apps. Make an app with a GUI in Visual Studio is a breeze with its interactive Windows forms tools.
Looks like I can't really follow you with the amount of details you've given about the project. If your users pass in a paragraph of a string into a function.. what do they expect in return? Does it have to be a string or can they also pass in an index/enum value? Afaik you cannot 'bind' an index to a string through the compiler or otherwise. You either need to hash the string and use the hash or compare against other strings directly.
You might want to checkout Websockets, I think they may be what you are looking for. There is a pluralsight course called Real Time Web Applications which is a good starting point. It focuses on mostly browser to server but you could also have a .NET client as well. The following link details a sever to C# client situation http://itq.nl/net-4-5-websocket-client-without-a-browser/
No, strings do not cache a hash (you can check out the implementation [here](https://referencesource.microsoft.com/#mscorlib/system/string.cs,d2703b6cf5609af3), look for `GetHashCode`). I would normally advise against using strings "for convenience" in performance-critical code, but I don't know enough about your situation to be able to tell. Note that if your dictionaries are very small (a dozen elements), and you expect your input strings to be interned, you can try to match the input string with `ReferenceEquals` and only do a hash-based lookup if that fails.
Here are a few Plural Sight suggestions. Look at the Table of Contents and Expand All to see what topics are covered and skip the class if it’s too basic. Also, I highly suggest watching these videos at a higher playback speed. The presenters are instructed to speak slowly to help out non-native English speakers. Intro to C# 1. C# Fundamentals with C# 5.0 2. C# Collections Fundamentals 3. C# Best Practices: Improving on the Basics 4. C# Tips and Traps Programming Courses 1. LINQ Fundamentals 2. TSQL Playbook 3. Tactical Design Patterns in .NET: Control Flow 4. Tactical Design Patterns in .NET: Managing Responsibilities 5. Refactoring Fundamentals Being a Better Developer 1. Productivity Tips for the Busy Tech Professional 2. Becoming an Outlier: Reprogramming the Developer Mind 
I'm just playing around with that just now and I'm quite impressed with the simplicity. I still feel confused about everything but since Unity also installed Visual Studio I was able to go through some of the tutorials on the MS site. Is WPF ok to use even though it's newer or is it better to use Windows forms? I have at least narrowed down my question in that I now want to find out more about working with databases with C# and about networking, though that's a subject I know surprisingly little about.
If it were me, here is my strategy. Wrap the list in a queue object. It has a thread safe pop function to get next off the queue. Wrap the processor in an object that receives a reference to the thread safe pop function. It is designed to pop an name. Process it. Put results in a file, or whatever. It logs what it does when a debug flag is set. It returns a value when Pop returns null. If need be, the processor can receive a termination signal to stop at any time. The program creates the queue creates N processors. Sets them all running, waits for all processors to return. Collects the N outputs and does whatever to the results. I'm using old school nomenclature, but I've done this sort of thing on many different platforms and languages over the years. How you accomplish this depends on hardware. All one one machine with a multi-core processor? Is the source list in memory or disk or API? Multiple machines with a database as the source list? By process, are you running a report on a reporting system? Moving a file via FTP? There a lot of permutations. 
There are just a lot of them, and for a wide variety of purposes/classes! An enum may not be quite appropriate either. I had hoped to make it as simple as a String.Format(). I'll probably just end up storing and re-using the hash code.
Fair point. I'll probably go with a custom one that is deterministic.
Now adays with Xamarin you can make iOS apps, Android, Windows Phone, linux programs.. With MVC/etc you can make web "apps", plain C# there's windows desktop programs, windows services.. Only place you may run into issues is on embedded systems. 
C# is at the core of many corporate business processes. 
I am working on a templated logger so strings are involved! I am attempting to squeeze more hard-drive life out of an elevated level of logging without using compression. I need a key to associate with the template-placeholder string of my logger so it can be looked up later. I like the ReferenceEquals concept. It gave me a fun idea that might be worth looking into. I could probably move forward by using hashes and come back to this concept later with a revealing usage case. Brainstorming here.. I will probably have more than twelve entries but not more than a few hundred. It's still an uncomfortable number so I probably shouldn't iterate. The messages that are logged are fairly variable in length so just for fun it might be worth doing an analysis on the lengths of all of the template-strings in my code base to see how many of them have the same-lengths. Every type of template-string will be registered and effectively become read only at runtime. On registering I could put the template-strings into a list sorted by string length. If the collision rate overall is fairly low (a dozen elements) it could be a fact worth abusing. I could use a binary search on the list to find the start of the template-strings with a certain length, followed by a linear search that uses ReferenceEquals. On templated strings that are short enough you could just use GetHashCode(), but on the longer ones you could search for the precomputed hash code. It would be fun to tune that algorithm and find where the performance graphs intercept.
Ctrl-Z :( Only kidding.... Ctrl-V :( ;)
 public struct ReadOnlyKey { public ReadOnlyKey(string key) { Value = key; } public string Value { get; private set; } private int _hash; public override int GetHashCode() { if(_hash == 0) _hash = Value.GetHashCode(); return _hash; } } 
Ctrl-K/C or whatever the combo is for comment/un-comment in your version of VS. Those bastards have changed it with nearly every release since 2010, so I can never remember which one it is for which version I'm using. Close second would be Ctrl-M/O or whatever the current Collapse/Un-collapse All shortcut is. Again, seems to change depending on the version and environment...
Ctrl-K, C to comment, Ctrl-K, U to uncomment.
It should be able to open the project.json file. Don't think you should be opening it as a web project. 
Tip: Read the Exception Message, look for line numbers where the error occurred in your code. In this case, apparently FileName is reportedly null, so look for places where you set/tried to set FileName. The error is usually around there. It appears that you are calling ReadBookingsFromFile from your BookingManagement instance (BM) before you initialize your FileName property in BM, which is used by ReadBookingsFromFile (https://gist.github.com/LeParkour012/a7e1fe9bd758cadf42eeaa8e9a969051#file-travelagency-cs-L24). 
So correct me if I'm wrong (and I'm sorry if I am) but the fix to this is to swap the positions of BM.ReadBookingsFromFile() and BM.FileName in TravelAgency.cs?
Ctrl + K + D Formats your code in visual studio 
VS Code is a text-editor with extensions. If you want C# support you need the C# extension. Open the extensions panel on the left or Crtl+Shift+X. Search for C#, the first result should be what you're looking for. C# for Visual Studio Code (powered by OmniSharp). Install and restart VS Code. Then click File, Open Folder. Open the top level folder of your project. VS Code should notify you that your project needs to restore dependencies (unless you already have). It should also ask to setup a .vscode folder that creates two simple configuration josn files for debugging. Be sure to click yes/restore for both of these notifications. You should now have full intellisense with code checking via rosyln. Two other handy extensions are 'C# Extensions' and 'vscode-icons'.
Resharper: ctrl -r ,r renaming symbol ctrl -r ,m extract method
ReSharper: Alt + Enter 
Dude, you're a hero. I had the extension already but it was an outdated version and when I did what you said, it downloaded special debugging/dotnet core stuff which pretty much gave me exactly what I wanted, so thanks so much!
I learned to program in Netbeans at Uni, so the only shortcut change I ever make is to swap comment/uncomment to Ctrl+/ and Ctrl+Shift+/, which is thankfully the only thing I hold onto from that horrible IDE! 
Thanks, I think I will focus on WPF but make the effort to at least familiarise myself with Winforms. It's probably not going to be soon I'm putting out anything public so if WPF is the newer system that seems best for now.
ALT + ENTER : resharper emacs like : CTRL + A : go to beg of line CTRL + E : go to end of line CTRL + K : cut line CTRL + Y : paste line 
Where can I learn about rest apis? Google just points me to existing apis but I want to build my own backend app in C# or java
I found my code, https://github.com/keninishna/ServUO-master/blob/master/Server/World.cs int threads = 8; int mobileCount = mobiles.Count(); int mod = 0; int[] group = new int[threads+1]; group[0] = 0; //do some maths for (int i = 1; i &lt; threads+1; i++) { group[i] = Math.Abs(mobileCount / threads) * i; } Math.DivRem(mobileCount, threads, out mod); group[threads] = group[threads] + mod; //add remainder to the last thread' Parallel.For(0, threads, index =&gt; { Chunk(v, mobiles, s, group[index], ((group[index + 1]))); }); private static void Chunk(List&lt;Database.Mobile&gt; v, List&lt;MobileEntry&gt; mobiles, List&lt;Database.Skill&gt; s, int start, int end) { for (int i = start; i &lt; end; ++i) { MobileEntry entry = mobiles[i]; Mobile m = entry.Mobile; m_LoadingType = entry.TypeName; m.Deserialize(v[i], s); //i see said the blind man } } 
Good luck finding a job where you can do Brainfuck
If you want to just "try and see the result" you can use [Swagger](http://swagger.io/), it's pretty easy to use and generates valid .NET [Core] servers.
I believe that will work...you can't read from a file before you tell it where it is at. There is a lot I could say about the design of your program, but two simple things you should do are: * Wrap disposable resources like streams with using statements so that resources are appropriately released when they go out of scope. * Public member variables, like FileName, should properties. Generally member variables should be private, and properties used to expose values to other objects.
Ctrl+Space - brings up auto-complete on some IDEs (useful when it doesn't pop-up automatically or already closed) Ctrl+R, R - brings up rename in ReSharper What ever the IDEs to Run/Debug and Run Unit Tests shortcut are
I have been using c# for work since its inception. Life has been good. There is always work and I have developed applications across a wide variety of platforms. From small devices, to mobile, to desktop apps, to web sites, to games, to reading from car engines and I know I am leaving stuff out but short answer us: You can pretty much do anything, it's my life and there are always jobs for it.
You're pleasant
Try changing that to Ctrl + D + D and you can do it all the time one handed.
I highly recommend changing those to Ctrl + Shift + C to comment and Ctrl + Shift + X to uncomment. So much nicer to be able to do it one handed.
Ctrl + Shift + S to save all open files to make sure you haven't forgotten a file.
Ctrl + K + S to do "surround with". Alt + arrow keys to move a single line up and down. Alt + Shift + arrow keys to do a square selection and type on multiple lines (use this is combo with the multiediting plugin for max fun). You can also hold alt and click and drag with the mouse to do a square selection.
You are right. In the last 2 years I have worked on 5 .NET web projects 4 of them being SPAs powered by ASP.NET Web API and one was a traditional ASP.NET MVC app. In my opinion that last one should have been a SPA and it was a mistake to build it as an MVC app.
https://www.asp.net/web-api
You need the .Net Core SDK and .Net Core Tools extension, and then you can open project.json files. https://www.microsoft.com/net/core#windowsvs2015
Ctrl + K, Ctrl + C 
Hey I'm also interested in learning how to do this l. Do you mind sharing your code so I can learn as well. Currently in school
Once I get to know the solution, I will definitely share the code with you.
Although I'm not horribly familiar with BotFramework SDK, but it sounds like you just need to add the assemblies for the Google API into your active project. Here is the [MSDN Article](https://msdn.microsoft.com/en-us/library/wkze6zky.aspx) on adding and removing references in Visual Studio.
God, I wish my colleagues would use it more often (or use it at all for that matter)
Yes, we do have to include Google API assemblies (along with doing some other steps) but the implementation of APIs is different for each type of application. And I wasn't able to find any implementation for the bot application on the Google site or any place else.
Please don't call me a SOLID fanboy. I respect SOLID, but I'm not one that tries to make every class I write fit the practice without actually solving a problem. For the record, I often send people to the design guidelines myself. With that said, can you show me an example from the FDG that directly conflicts with SOLID principles?
[removed]
CTRL + R (twice). Visual studio Renames variables, methods and classes etc then updates all their references.
What about Ctrl + j Ctrl + Shift + Space
If you install the [Productivity Power Tools](https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProductivityPowerTools2015) extension, you can do ctrl-LMB in place of F12, along with getting a host of other handy features (such as coloring/sorting your editor tabs by name/project)!
It's a lambda operator (pronouced: "goes to"). Lambdas are anonymous delegates(function pointers, callbacks, etc). The syntax is short hand method signature followed by the method body. So for example: public int Add(int left, int right) { return left + right; } becomes (left, right) =&gt; left + right; I break it down a bit more on my blog: http://www.codeprovausio.com/2015/06/07/what-the-heck-is-a-lambda/ Here's an example of 3 ways to delegate the same operation: private Random _rnd = new Random(); void Main() { // using a standard function pointer (method group) ProcessTwoRandomInts(TraditionalFunctionPointer); // using an old style delegate AddTwoNumbers del = new AddTwoNumbers(TraditionalFunctionPointer); ProcessTwoRandomInts(del); // using a lambda expression ProcessTwoRandomInts((left, right) =&gt; left + right); } public int TraditionalFunctionPointer(int left, int right) { return left + right; } public void ProcessTwoRandomInts(AddTwoNumbers callback) { Console.WriteLine("Generating random numbers to process..."); var randLeft = _rnd.Next(0, 100); var randRight = _rnd.Next(0, 100); Console.WriteLine($"The result is: {callback(randLeft, randRight)}!"); } public delegate int AddTwoNumbers(int left, int right);
im not sure that would be lucky!
I would recommend this book: https://www.amazon.com/C-Network-Programming-Richard-Blum/dp/0782141765 I currently am a development intern at a company, where the main product is a network analysis tool! (written in C#) It is important to note that this is not for server-side networking, and a lot of high-performance concurrent server code, and design patterns will not be present in this book, or any book I have found, things like that only come with exposure IMO. 
I would highly recommend learning how to use visual studio debugger. It would be much faster than posting to reddit. F10, F10, F10, F10.. Voila!
In every single IDE I find myself doing this
Where do you suggest I learn how to use the debugger? 
C# has goto, I know; people sometimes use it for breaking out of nested loops to avoid having to set up an `isDone` boolean variable to test in the loop conditions.
Good Lord, why would you?
 - `ctrl-k, c`: comment selection - `ctrl-k, u`: uncomment selection - `ctrl-shift-w`: select word - `f2`: rename - `f5`: run in debugger - `f12`: go to definition - `alt-f12`: peek definition - `ctrl-f12`: go to implementation And an honorable mention to `ctrl-left/right` to move by word, but that's an OS feature on Windows. Also, I've copied my configs through three past versions of VS because I hate having to redo it, so YMMV on newer VS versions.
Make sure you turn off code preview or it will suck to use 
I think system types are a really bad example. SOLID is more about the stuff you're writing in your system. FDG is more about keeping the approach uniform for adopt-ability. Also, it's focused on framework extension, not system design. ✓ CONSIDER using unsealed classes with no added virtual or protected members as a great way to provide inexpensive yet much appreciated extensibility to a framework. "Classes are unsealed by default in most programming languages, and this is also the recommended default for most classes in frameworks. The extensibility afforded by unsealed types is much appreciated by framework users and quite inexpensive to provide because of relatively low test costs associated with unsealed types." That is from the FDG. While I agree that some people take it too far, it really sounds like you're contorting an idea to argue against SOLID because of the complexity it introduces in some cases and how far some people take it. I don't believe the FDG and SOLID principles are incompatible with each like you're suggesting. Not at all.
winforms or WPF WPF if you want it to look better and have more graphical options or Winforms if you just need a functioning GUI that won't take much time to learn. I don't have much experience with outside GUI libraries, but if you are developing in visual studios I would stick with winforms or WPF cause visual studio makes it super easy.
I would go with wpf. If your app could end up on mobile devices then also look into [xamarin forms](https://developer.xamarin.com/guides/xamarin-forms/) and MVVM.
FDG is a measured approach. SOLID is the extremist alternative. That's why you often hear people say things like "You need to know when to apply SOLID". It's an attempt to back track a bit on otherwise ridiculous rules. 
Honestly using the debugger and how to set breakpoints or step through functions is really helpful in learning C#. You end up seeing the whole lifecycle of the actions your app or site is taking. I can't send the link right now, but there's a guy on YouTube that has a few ASP.NET tutorials - he has gone through how he personally sets up Visual Studio and that helped me when I started. Seriously, debugger. Really powerful, immensely useful, and just awesome to see how your code is working. 
This. WinForms can be faster to build and easier to learn, for those needing a throwaway app. If it's a project which could in any way need to survive for many years, though, you should consider WPF as a more technically modern and powerful solution. Nothing wrong with WinForms for the long term case, of course, it's just an older approach which most standards have moved away from.
Thanks for pointing this out, I have been really wanting to pick up a Pluralsight membership but money is going to be tight for a few months.
Oh that's a loaded question :). As an enterprise dev, I would say the most important thing has nothing to do with programming, it's about how to function in an office. But definitely learn your platform. If you are going for web, understand asp.net but also understand IIS. I do recommend learning networking; sockets and such. We can talk about it more if you want.
Wpf + Metro is the way to go in most cases. Mahapps provides Metro controls easily
Some are visual studio, some are just standard shortcuts, others are Resharper which is all but standard now, so I can't even tell the difference anymore Ctrl (when an intellisense window is in the way): makes the popup transparent Ctrl-K-C: comment Ctrl-K-U: uncomment Ctrl-Shift-Space: intellisense show method parameters and overloads (when cursor is inside method arguments area) Ctrl-M-O: collapse everything down to method signatures and regions Ctrl-K-S: surround code with something (e.g. try/catch) Ctrl-T: search all things (resharper) Ctrl-R-R: rename (resharper, i think) F12: navigate to code (resharper?) Ctrl-F12: navigate to code in embedded window (peek) Ctrl-G: go to line number Ctrl-Shift-F: advanced find/replace Ctrl-Alt-Shift-up/down: move selected text up or down Ctrl-Alt-up/down: select multiple lines Ctrl-Shift-left/right: select words Shift-home/end: select lines Ctrl-end: bottom of page Ctrl-home: top of page 
Na
Other than .NET itself, I've used DeExpress in the past. It is pretty good, especially for business intelligence. For basic stuff though, you don't need anything more than WPF.
Nothing has made me want to learn C# more.
&gt; You should use async whenever you have IO-bound operations To clarify, this doesn't just mean that the method that performs the IO-bound operation. Everything in the calling chain from this point up should be async as well, thus "all the way down" &gt; If you have a long sync query, and someone tries a GET meanwhile, does it have to finish the long query before handling the new guy request ? No. That request will be on a different thread. It'd help if you got comfortable with the way async/await actually works at least at a high level. But in the meanwhile, the over-simplified TL;DR is that they are promises to perform the task. Your task (the part that comes after "await") will be run whenever the host finds the time to do it. `await MyFunction()` basically says "hey, get around to doing this thing and come back here when you're done". This is important with IO operations because of the overhead associated with that kind of operation, you'll want to let the framework/os manage that instead of doing it synchronously which is basically saying "screw everyone else, do the thing for me and make everything else wait". What's actually happening is a bit more complicated, and I'd encourage you to do some reading on that.
Yup, of course there is mono, and MS has tried to open it up. But there are compatibility issued between each version and honestly why bother, it'll be gone in 5 years. Consistency and backwards compatibility are why C and C++ have lasted so long.
Microsoft virtual acadamy was very usefull for me. They have a lot of courses and tutorials for beginners to experts.
Only downside of WPF is that it's not cross platform, otherwise WPF all the way.
MVVM is not required for WPF. It's a good practice which WPF easily handles, but it's by no means required. I'm a bit confused why this keeps popping up, it seems people have some weird preconceptions of WPF.
thanks. though im a bit worried since the book was published in 2003. there has been a massive amount of improvement to the .net framework that wont be covered in here.
Hence "especially if" :) I think with newer frameworks people feel more pressured to do it "right". While going with winforms you're probably going to do it in the same way you did it 15 years ago.
I beg to differ. While you don't have to understand XAML for the most simplistic of apps, you're likely to have to learn it. XAML is not exactly all that straightforward. At first it seems like oh it's just HTML, except it has a bunch of it's own composition rules etc. How events bubble up, etc. Anyway, we can agree to disagree.
System.PlatformNotSupportedException on mac os :) need to wait for standard 2.0
You mean you want a Dapper storage provider for ASP.net Identity?
WPF would be my opinion. I think it's far easier to create in the program than through xml though.
There's no reason you can't use both. Use EF and all the built in EF stuff for identity so you're not reinventing the wheel And then use dapper for all of your app stuff. I recently did this and it turned out just fine. I even extended the base EF models to give the user a few extra properties without issue. Let me know if you have any questions and I can throw you a link to a GitHub project with the code
&gt; SRP: Keep class members focused on serving the class. Remove every other case to a service. ✓ DO ensure that each type is a well-defined set of related members, not just a random collection of unrelated functionality. &gt; FDG and SOLID are in agreement That's not SRP and you know it. This is why I call people like you fan boys. Whenever SOLID is challenged you just redefine it to fit the situation. 
I'm using Dapper mainly, but I still keep EF for the generation of the schema and identity authentication. I think it's the easiest thing right now. Everything still kind of green so I think it's ok to still drag EF until some new .net core auth library comes along. I don't see how it could become a mess, am I missing something?
&gt; I don't see how it could become a mess, am I missing something? I was mixing up some concepts when I wrote that. I've deleted the comment out of embarrassment.
I'm guessing your location_ID is a Identity PK, so your SQL table should have something like this: location_ID INT NOT NULL PRIMARY KEY IDENTITY(1,1) I don't believe the quotes around '@country' are necessary, but it's been awhile since I used ADO.NET. Look into the using statement to dispose of objects that implement IDisposable (which SqlConnection and SqlCommand both do). [MSDN](https://msdn.microsoft.com/en-us/library/ms971481.aspx) MSDN Sample: //C# string connString = "Data Source=localhost;Integrated Security=SSPI;Initial Catalog=Northwind;"; using (SqlConnection conn = new SqlConnection(connString)) { SqlCommand cmd = conn.CreateCommand(); cmd.CommandText = "SELECT CustomerId, CompanyName FROM Customers"; conn.Open(); using (SqlDataReader dr = cmd.ExecuteReader()) { while (dr.Read()) Console.WriteLine("{0}\t{1}", dr.GetString(0), dr.GetString(1)); } } Finally, int.Parse will throw an exception if the input is not correct. You might want to add a separate function that runs prior before adding the record to check that the input is correct, and you have all the required inputs for the NOT NULL columns in your database. Edit: Formatting. 
I guess that you have a set of profiles and a set of communities and a profile can own or subscribe to communities? One way to solve this problem is to use a pivot table. This table acts as a link between the profile and the community to create a many to many relationship. There are multiple ways to do this, for example using the Fluent API, but I'll demonstrate using a simple model: // Profile.cs ... public virtual List&lt;Profile&gt; Friends { get; set; } public virtual List&lt;CommunitySubscription&gt; Subscriptions { get; set; } public virtual List&lt;Community&gt; Owned { get; set; } // Community.cs ... public virtual Category Category { get; set; } public virtual Profile Owner { get; set; } // CommunitySubscription.cs ... public virtual Profile Profile { get; set; } public virtual Community Community { get; set; } Note how the type of the `Subscriptions` property changed to `CommunitySubscription`. This class is the link between a profile and a community, making the `Subscribers` property obsolete. You can get all subscriptions using the following snippet (you may add this as a method in the profile class so you can reuse it througout your code): profile.Subscriptions.Select(s =&gt; s.Community); I hope this clears things up a bit for you!
What about `Friends` field? Should I handle it in the same way? using a `Friendship` class to hold a reference to two `Profile` objects?
This would be a many to many relationship, so the same approach can be used indeed. You may want to read some articles about many to many relationships in EF: my comment was just a quick example. You may prefer another way to do this (but it'll probably all end up in the same database structure). I don't know the size of your application but if refactoring is too much you can add some helper methods to do conversions for you, but this may impact performance or maintainability at some point ;)
&gt; Because it makes it hard to understand the API. Having to look at different places for separate, though related, functionality is a pain in the ass. Or you could just look at the method signature. So those are common interfaces on all primitive types -- basically part of the language, which is why I said that is a terrible example. It's a struct, not a class. It's purpose isn't to provide to provide functionality, it is to provide a value. All methods on the struct are related to value of the struct. ToString() is a member of object which they overrode, and overloaded to allow a formatter. In retrospect, an extension instead of overload may have made that more clear, but they followed they're own rule of thumb not to create extensions for types that you own. SRP applies to classes and modules, of which Boolean is semantically neither. The key point with 'function' in terms of SRP is that it only has a single reason to change. For example, if a class handles business logic and formatting, THAT would make the API hard to understand, it would be two reasons to modify the class - it should be two different classes; basic separation of concerns. If you don't agree with that, then... I don't know how to talk to you. Moreover, you're still not justifying your statement that the FDG and SOLID are in conflict. Do you have a better example?
If by object you mean an instance of a class that you defined, you could use a DataTable that you'd have to build from that list.
i will add a separate function to catch the error. my SQL table does look like what you have mentioned. i still cant insert data into the table without adding the primary key, i wanted the primary key to increment itself, and it does that when i add it manually (without running the application)
Replace List with ICollection
Stuff like handlebars and knockout are nice, but makes SEO a real pain.
Yep, they do. Though most of my work is with internal corporate apps, so SEO generally isn't a concern.
How does it change anything when the List already implements ICollection?
Thanks - I have one thing I do that uses a backgroundworker (not the datagridview in questino), but otherwise I stay as far away from multi-threading as possible - seems like a pandora's box.
thanks all for the suggestions. I know that I have to eventually choose a source and just follow through. But I came across these 2: https://www.amazon.ca/gp/product/0985580127/ref=oh_aui_detailpage_o00_s00?ie=UTF8&amp;psc=1 and https://www.devu.com/curriculum/. Any experiences with either?
You can happily have multiple references to the same type but you just need to give EF a hint as to how the relationships work. You can do this with the ForeignKey/InverseProperty DataAnnotations. Have a look here for an example: http://www.entityframeworktutorial.net/code-first/inverseproperty-dataannotations-attribute-in-code-first.aspx You don't need to create any additional classes.
&gt; All methods on the struct are related to value of the struct. That's true of any class. Even your "business logic and formatting" example satisfies into the "related to the value" rule. 
Building facades just to satisfy SRP leads us right back to bad API design. You should build a facade because you need one, not because it satisfies some arbitrary rule about what is or is not a responsibility. Yes, you can have multiple functions that still satisfy the "only one reason to change" rule, but that's pretty damn rare. Unless you expand "one reason" to mean anything that deals with the value represented by the object, which again then just renders the rule meaningless.
I only see the empty page.
I friggin hate MVVM. Tools do not support it so it is always done using some library that has a lot of assumptions that are not properly documented. Writing simplest apps can be major pain in the rear for no reason. With winform it is like "whatever, just drag and drop". It is kind of outdated but with WPF/XAML it is more like "FU, get your MVVM PhD then maybe we will talk". 
Of course you don't have any trouble following it. You just change the definition to be whatever you were going to do anyways and call it good.
Hastebin is down http://pastebin.com/HpidSAgB 
Can u let us know what keywords u used to search? All i did was c# triangle wave And the first hit i got was [this from Stack Overflow](http://stackoverflow.com/questions/1073606/is-there-a-one-line-function-that-generates-a-triangle-wave) post :) 
Yes, but the separation of concern is always pushed further, meaning it never stops. MVC becomes MVVM and I'm pretty sure soon enough I'll be told that I must have a "page component model" or something along these lines. I totally agree with you on the importance of good architectural decisions, but in some cases I'm searching how to do something technically speaking rather than ideally, and in those situations I'm not sure of what can be achieved with some technologies (like the HTML helpers and so on). But if you can show me how to do a table with +- buttons for each lines controlling the quantity of that line only, I'm interested :)
In a network stream (assuming TCP) you'll have to somehow specify a beginning and an end of your message. You cannot simply deserialize a stream object and hope for the best. This is because of the nature of TCP - packages will arrive in the order you sent them but one packet may contain two or more messages, for instance. It is for this reason you have to specify that beginning and end of your message. You'll have to decide on a format, for example: [4 bytes containing the length of the message][2 bytes containing class identifer][payload]. The idea is to read 4 bytes from the stream, then 2 for the class identifier and then whatever the length of the message is. The class identifier is something you decide in both your server and client implementation (make a common class library) - it should simply be a number (short) specifying a Type, you can then deserialize the payload to the appropriate class. In this case you'll have to do the deserialization yourself as well (but I'd recommend letting the classes deal with it themselves). You can probably use the [BitConverter](https://msdn.microsoft.com/en-us/library/system.bitconverter) class for an easy method of converting things. Or..just use an existing implementation which kind of do this already like [networkComms.Net](http://www.networkcomms.net/). I might be misunderstanding your question though - you might already be receiving POCOs - in this case what you posted as an example could work but I'm not sure what the recommended way of checking the type (and where it should go) would be - someone else with more experience on the subject can possibly enlighten us. Note: The explanation above is simplified.
All UI related operations have to be running on main thread. If you are modifying controls in other threads you will have to do something like this. public static void InvokeUI(this Control control, Action action) { control.Invoke(new MethodInvoker(action)); } and invoke it like ```this.InvokeUI(() =&gt; { /* code */ }```
That is C! 😛 I searched with things like "C# sine wave PCM data" "PCM data for Xamarin.Forms" and so on. 😕 Also asked in SO but "here you can not ask for explanation of somebody's code" was the answer... Thanks I will try them.
I don't want / can't do this, because the text, displaying the value might change, and thus the value displayed will be wrong. texblock.text = string.Format("greeting {0:0.Username}", UserModel); texblock.text = string.Format("You have {0:0.Dollar}", UserModel);
Ok. Well, that can't be done. (yes yes, everything is *possible* to do somehow, either by using reflection/runtime code generation or by restructuring the code, but it's not possible to do it simply.)
PCM is irrelevant here; you just want a sine wave. Seriously, `c# sine` first hit: https://msdn.microsoft.com/en-us/library/system.math.sin(v=vs.110).aspx
You can use the above code, but scale the normalized angle to be between 0 and 2\*pi (just multiply by 2\*pi). And replace the code that calculates the sample with Int16.MaxValue\*Math.Sin(angle).