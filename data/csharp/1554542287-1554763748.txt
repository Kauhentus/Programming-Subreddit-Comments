it looks more like an advetisement to me
if else will be more readable 
RepoDb creator here! Dapper as a whole is very good. Before, we used it all over our projects as it seems to be a perfect ORM that solves all complexities in the real world. Why? That is because you control everything by writing all SQL Statements based on your scenarios and requirements. We wrapped most in the repository (implemented by interfaces with targetted methods - not table level), and have it all injected as DI objects. However, I have ended up writing our own Hybrid ORM without affecting the speed/performance and making sure the memory usage is very efficient. Luckily, we made it beyond the expectation, RepoDb is the most fastest and most efficient as of the moment. I am good in writing SQL and is very fluent on it, however, I have a goal in our team as an App Architect to make sure that the codes are easy to maintain and make it as simple as possible. Specially when developing API (REST). I tend to teach the team (other teams as well) to avoid writing SQL Statements in our .Net applications (only if we can avoid it). Or, make a calls to SP directly so we can make it more readable by design and easy to maintain after production deployment. I hope it is worth exploring to you and choose or write your best ORM. In anyways, good luck!
That is good but the problem is that it doesn't cover all the cases specifically that `null` part at the end. A better solution is this using the `Enum` class functions: return res = Enum.IsDefined(typeof(Frequency), freq) ? freq.ToString() : null; By the way this doesn't work if the `enum` is flags and `freq` has multiple values...
Hello, I am developing a base to create business applications as a plug-in. You just have to focus on the code of your plugin of what you want to do. &amp;#x200B; This base supports authentication and permissions management and database access I plan to implement SignalR support for notifications &amp;#x200B; [https://github.com/SOFTINUX/Base](https://github.com/SOFTINUX/Base) 
I think this is a good read. Please have your 5 minutes on it. Link: http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/ On top of the topics discussed in the link above, we also maximize the usage of it in Unit Testing, and sometimes at Integtration Testing. We mock everything as long as the objects are implemented IoC(ed), making sure that the expected behavior of that component is doing its job.
Hard to test? Why? If the objects are IoC/DI designed, then I guess it is easy to test it right? We somehow use both the Regression Test and Integration Test when testing SPs, and we find if perfect. In anyway, what neptoes said is really the usage and benefits of SP.
This is a great write-up, thank you for your efforts!
I thought the same thing when I saw the title, and was relieved that this was the top comment!
If only its syntax weren't so bananas. This seems driven by hipness (woo, we're functional now!) rather than reasonable design decisions. Why is it `_` instead of `default`? What happened to `case`? How is anyone expected to remember this when it's completely at odds with almost anything _else_ in C#?
&gt; Why is it `_` instead of `default` Conflicts with default literals. Also makes more sense in cases like tuples with the already existing discard syntax for those.
&gt; Also makes more sense in cases like tuples with the already existing discard syntax for those. Yes, but _that_ syntax is also very recent and thus rarely used. None of this is idiomatic C#.
&gt; Blazor is now at version 0.9 (close to 1.0) Just pointing out that there are nearly unlimited versions possible between 0.9 and 1.0. It's possible they release a version 0.10 first.
I had to read through the comments a bit to get an idea as to what you wanted. This was not clear from your question. Put your \[SerializedField\] *before the variables* that you want serialized *outside* of the "Start()" method. public class Movement: MonoBehaviour { [SerializeField] bool randomBoolVariable =0; void Start() { } } &amp;#x200B;
I have looked through your source code and the reason why it is not relaying the message to all other clients is because you are handling receiving and returning client messages on thread to thread basis. This means that each client is in an isolated system - thread - so no other thread is aware of whats happening. When you write Thread t = new Thread(new ParameterizedThreadStart(HandleClient)); t.Start(newClient); You are saying: Create a new thread that runs this method Start said thread (call the supplied method) using this object (the client) To notify the other threads you can create a class that encapsulates a `TcpClient` and add listeners/subscribers (two words for the same thing - a method that handles an event call) to it as well as subscribe them to an event on the server. When a thread then handles an incoming request you can fire the event with the necessary information. The main reason why it is bad to iterate threads is because you come across race-conditions. The moment the method the thread is running ends, the thread is cleaned up and exited. Since it is running on its own you can't know if it has exited - or if it hasn't, if it is safe to manipulate. There other reasons as well, such as needing to synchronize threads which takes time. TL;DR: Your client connections are working in isolated environments (the threads) so the rest are not aware of anything that happens to it. I'm sorry if I made anything confusing or unclear, if I did please tell me and I'll try to fix that. Hope it helps! (P.S. Saw that you're using `Flush()` a lot, so I think you should check out the [AutoFlush](https://docs.microsoft.com/en-us/dotnet/api/system.io.streamwriter.autoflush?view=netframework-4.7.2) property to make sure you're doing what you're intending)
From what I read it's a really big dictionary like several gb used for caching hot requests 
The same goes for xUnit with MemberData. Kind regards 
*irony* I love using databases but if you need a framework for as orm your data entities and queries are too complex? 😅
I've seen switch statements spanning over 1000 locs for 5 cases. I've also seen the same switch statement in 5 or more different classes - I think something like that was meant with that bold statement. Here switch seems like the reasonable choice. For DDD a smart enum or other patterns sometimes give you cleaner code that makes enhancements easier.
Enums are silly in C#. You can't trust them to be one of the values in the enumeration. It's perfectly valid to set it to any value in the underlying type (usually int).
This is why you start at version 0.10 to make a point :)
They explicitly said that they will NOT release at the same time and as pointed out version 1.0 does not necessary come after 0.9
The only significant thing (when it comes to learning) will be C# 8.0's non-nullable reference types.
Then you can still have version 0.100. - That's why you start at version 0.100 to make a point. Then you can still have version 0.1000. - That's why you start at version 0.1000 to make a point. Then you can still have version 0.10000. - That's why you start at version 0.10000 to make a point. Then you can still have version 0.100000. - That's why you start at version 0.100000 to make a point. Then you can still have version 0.1000000. - That's why you start at version 0.1000000 to make a point. Then you can still have version 0.10000000. - That's why you start at version 0.10000000 to make a point. Then you can still have version 0.100000000. - That's why you start at version 0.100000000 to make a point. Then you can still have version 0.1000000000. - That's why you start at version 0.1000000000 to make a point. Then you can still have version 0.10000000000. - That's why you start at version 0.10000000000` to make a point. Then you can still have version 0.100000000000. - That's why you start at version 0.100000000000 to make a point. But yeah. Version numbers are largely completely arbitrary (even when claiming to follow [Semantic Versioning](https://semver.org/)). Assuming a version number means something is always iffy.
Minor feature applicable in limited number of projects and even when applicable will probably take years before it is adopted even in .NET circles because of the know-how in frameworks like React and Angular.
He is probably referring to Razor Components (a.k.a. Server-Side Blazor) which will be included.
Non-nullable reference types might make some patterns obsolete.
Yes but when they start at .10 it will be obvious they are not counting to any specific value because they didn't start at 1
This thread is full of people getting the wrong end of the stick. If you want help with syntax try using search on GitHub for a class name, method name, etc or just for Monobehaviour and you'll find a wealth of examples. Combined with the Unity docs and StackOverflow you'll be set.
Eh... I don't think that would make it obvious. I consider the idea weird to assume it'll be only version 0-9 in the first place.
What's idiomatic changes with every new language version. Also, new features should work well together, they shouldn't be limited only to working well with older features.
 &gt;If I recall correctly, [StackOverflow.com](https://StackOverflow.com) uses PetaPoco for it's RDBMS layer. I thought they used a mix of entity framework for writes and dapper for reads.
It's a distributed cache. If you have multiple servers and need a shared cache it's pretty great. Super easy to use with .net core via IDistributedCache
All logic stuffed in Main. ew. To begin with, log book could be a class with add/remove/search methods, and cases would delegate most of the job to the object.
It covers all the cases, it will just return the integer as a string if it's not a valid value in the enumeration. Which is not obviously worse than returning null, either way it's not expected that the calling code will pass a value like that so there's no right answer as to what to return in that case IMO.
C# is a rather fast evolving language and i personally like it that they use recent syntaxes. The *case* would be completely unnecessary. And I find '\_' is much cleaner for pattern matching and switch expressions. Of course that's highly subjective, but I think evolving the idiomatic aspects of the language is neither wrong nor bad in this case.
Im just starting to get into classes, thank you i will do that in the future. Is there any other error or mistakes that you can see?
In what encoding is website?
Of course nothing makes sense without seeing the whole code and why this static functions is being called in first place. But my answer was mainly about returning the same result as that function while making it shorter.
&gt; What’s idiomatic changes with every new language version. It *evolves*, sure. (Will the existing switch statement get adjusted to this new syntax, though? Probably not. So we’ll now have, for good, two entirely different syntaxes. That’s just poor stewardship.) My concern is that a new, useful feature was introduced but will be inscrutable to many existing users, with a syntax needlessly hard to remember because it’s so different, and ultimately, as a result, with needlessly few people using it. All we wanted was `return switch(someVar) { case someCase: …; case anotherPossibility: …; default: …; };`. We got, instead, something very different for apparently the sake of being hip.
Love it
I tweaked mine a bit; I use a dark blue background instead of black/dark gray. Reminds me of the old Wordpress theme. https://i.imgur.com/WVvSnWd.png
#if DEBUG my code; #endif
That's fair, if OP needs that null behaviour then this is a nice solution.
The title is in Russian language. Here is the website https://chesspro.ru
My mind is full of F
It's exceptionally bad in most peoples' books to return null. There are a lot of ways to get around it in this case. I'd throw an exception, personally, or use `Option&lt;string&gt;`. There are a few other options if I knew more about the domain. 
I can't be too critical it is obvious you are learning, but asking for advice so... &amp;#x200B; **int**.TryParse(Console.ReadLine(), **out** **int** Choice); Not necessary to parse these values unless you plan on using them as integers. Since they are just value types being compared in a switch statement you could easily switch across choices "1", "2", "etc" instead of 1, 2, null. &amp;#x200B; Which leads to a common mistake of using switch statements for branching logic, since in most scenarios you are better off branching logic in a dynamic fashion. You cannot easily nest a submenu using this approach for instance, unless you want to call methods from your switch statement that themselves are more switch statements (please don't). You should start diving into classes, abstraction, methods, delegates, and dictionaries. What you want ultimately is a very generic message loop in your main method, that takes input, uses that input as a Key to perform a lookup in a dictionary of options. If that option (key) is present in the dictionary, get the corresponding value for that key and use it. Now the value in your dictionaries key/value pair will probably be a base type of some kind. You could also have it be a reference to a method delegate, either approach could work. The point is, you do a lookup, get a very generic object, that has some generic method signature that you can make a call to. That call does the 'work', such as outputting to the console, asking for more inputs, etc. You could take this a step further and have the method call also be capable of returning it's own dictionary, and you begin to use that in your main message loop (this makes nesting menus easy) So in a nutshell you have a message loop taking input, using that input to find an object, using that object to execute a procedure, and if that method call returns a dictionary begin using that new dictionary. So the only thing left is to have a procedure at startup that populates the initial dictionary, and once that is done uses it to start the message loop.
While trivial in this case, it's still not a nice read. Trinaries just shouldn't be nested. 
This was the aerospace/defense industry, we still had a development server and test server and required a rather large packet documenting changes along with something like a dozen different signatures before changing something on the production server (emergencies came up and we had to change things on the fly, but you document/test later in case you accidentally introduced a different bug). As for this “who cares if it’s wrong?” mentality, the air force cares a lot if a pilot has to eject from an F-16 because you half-assed a stored procedure that checked if all the critical dimensions and performance properties of the engine components met the required specifications (believe me, this is much harder than it sounds).
How does nuget help you update a linked dll without recompiling the linking application?
&gt; The proper way would be to encapsulate the functionality into a web api. You can't possibly recommend this while having no knowledge whatsoever of what functionality the shared library contains. For all you know, it could be a bunch of DirectX code.
holy...
Thank you. unfortunately, i don't understand half of what you wrote lol, I'm only a noob. But il come back to your answer in the future.
As of C# 7 you can throw from within the expression, but this wasn't available in earlier releases. I.e. `return` ... `: throw new UnexpectedEnumValueException("Wat.");` It's also possible that the enum contains additional values (such as Daily) not shown here.
&gt; switches are evil Said by the same people who never learned features past C#3 because "newbies might not understand my code"
Nuget wouldn't do that directly. What nuget would do is make it trivial to use it in multiple projects and versioning is cake, which sounds to me like the goal OP has. I may be misunderstanding though.
I really about things like this but I gotta admit this one is pretty easy to read.
https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#switch-expressions It goes along with everything since C#7 with expressions. Expression-bodied members, tuple unpacking, etc. I do find it odd they use `_` instead of `default`
I disagree that it's for the sake of being hip. There is a community on github driving the direction of the language; you could be a part of that. They are following a direction they've been on for a while now. I personally find the new switch syntax more readable than before and it will discourage infamous huge case statements.
Implemented in the C#8 switch syntax: public static string ToString(Frequency freq) =&gt; freq switch { Frequency.Yearly =&gt; "Yearly", Frequency.Monthly =&gt; "Monthly", Frequency.Biweekly =&gt; "Biweekly", Frequency.Weekly =&gt; "Weekly", _ =&gt; null, };
Haha oh yeah, you lost me a bit at "encapsulates", but let me see if I understand. I need to create a separate TcpClient and add listeners? Would it... be on its own thread? I can have multiple clients connected to this TcpClient? I understand that my client connects are working on isolated threads, but I thought that was the only way to have multiple clients connected to a server. Again I'm super new to sockets, only really novice (not quite that newbly) with c#. The tutorial that I essentially copied/pasted this code from stated that if you didn't flush, it wouldn't send until the buffer was full? How does autoflush work as opposed to flush in that regard? Thanks again for all your input... I'm hoping I can grasp these concepts a lot better, and hopefully relatively soon. :)
ahh right.. Didnt know they said that. I havent been following the Blazor train so am out of the loop.
Encapsulate, in this situation, means to put the object inside another class so you can add methods and data to interact with that object. I am on my phone in my friends house do I cant really explain more than that. I will explain further if necessary when I get home but I hope this helps a little bit!
My personal opinion is that client side blazor won't be usable in practice for at least two more years and even then it will be usable only when you can target newest browser. This is because the state of WASM. This opinion is not based on data but simply how it "feels" to me by following the pace of development.
Is it Core? Could just be IEnvironmentHost.IsDevelopment()
Along with what others have said, here are a few other things I think you should keep in mind: In your `MenuChoise()` method, you use newlines (\n) in your string, but you already have a function to write those newlines for you: `Console.WriteLine`. public static void MenuChoise() // Method for menu { Console.WriteLine(); Console.WriteLine("[1] Write a post"); Console.WriteLine("[1] Write a post"); Console.WriteLine("[1] Write a post"); Console.WriteLine("[1] Write a post"); Console.WriteLine("[1] Write a post"); "[2] Print all posts\n" + "[3] Search for posts\n" + "[4] Remove posts \n" + "[5] Quit "); Console.Write("\nChoose 1-5!: "); } 
Patterns: * Repository * Service ORM: * Dapper * NHibernate Some remarks: * We always hide the usage of any ORM behind a repository pattern. * Dapper is very straight forward to use and quick. Ideal for simple applications * NHibernate is somewhat more complex but it's different ways of defining queries helps to solve many complex problems * If your app has search capabilities where user inputs requires you to decide what tables to join per search then NHibernate is very capable to get the job done. Many times the only alternative is to use something like elastic search to get the job done which introduces an extra server component into your app's architecture
Isn't it fairly easy to handle the null when it's used? Like save it to a variable and then test for null. Or is that not a normal practice? I'm new to programming and learning from my self taught superviser
Yeah that's a totally normal pattern. I'm just saying, does this function really need to return null if the enum is not one of the legal values? Why not just copy the behaviour of ToString and return the number as a string if it's not one of the legal values? Then it's a little simpler, just one function call and that's it.
Haha I understand. I meant to say that's right around where he lost me XD
Along with what others have said, here are a few other things I think you should keep in mind: Your `Main()` method is the start of your program. Keep that method as the first one in the class. In your `MenuChoise()` method, you use newlines (\n) in your string, but you already have a function to write those newlines for you: `Console.WriteLine`. Use that instead of manually typing in line breaks. This makes the printed strings line up nicely in code, but more importantly, it will automatically use the correct newline characters. Some systems use `\n`, others use `\r\n`, for instance. public static void MenuChoise() { Console.WriteLine(); Console.WriteLine("[1] Write a post"); Console.WriteLine("[2] Print all posts"); Console.WriteLine("[3] Search for posts"); Console.WriteLine("[4] Remove posts"); Console.WriteLine("[5] Quit"); Console.WriteLine(); Console.Write("Choose 1-5!: "); } - Your method `Time()` could be a line shorter and you don't need to append the value to a string. `Console.WriteLine` automatically calls the `ToString()` method on its parameters. static void Time() { Console.WriteLine(DateTime.Now); } - Lastly, the way you name your variables do not follow common naming conventions. Local variables (variables that are declared and used within a method) should use camel casing. They should start with a lowercase letter: `theLogBook`, `index`, `choice`, `menuSelection`. The reason for this is because it makes your code easier to read and understand. Look at this example below: class Example { public const string SomeValue = "Something happened!"; private int _myInt; void SomeMethod(int newValue) { _myInt = newValue; Console.WriteLine(SomeValue); } } In this example, some information about each of the three variables can be inferred purely from their naming schemes. `SomeValue` starts with a capital letter, so it's either a `constant`, `readonly` or a property. `_myInt` starts with an underscore, so I know it's a `private` class variable and that it can be used in other methods within the class. `newValue` starts with a lowercase letter, so I know it's only used within the `SomeMethod` method and cannot be changed by other methods in the class.
&gt; There is a community on github driving the direction of the language Not really. The Language Design Committee is driving the direction of the language. Members of the committee engage with discussions on GitHub, but commenters there are not the only people they listen to.
Yes, but what's it for? At first glance it appears to do exactly the same thing as ToString(). 
They need to get rid of the return, use an arrow, and put the expression on the same line. Then it would be perfect.
&gt; I've also seen the same switch statement in 5 or more different classes That's just the normal inability to recognize duplicate code and move it into it's own function. I'm talking about people who have a zero tolerance policy regarding switch. 
The current switch syntax isn't idiomatic C#; it's a bastard syntax inherented from C. 
I love EF too. I used LLBLGenPro to generate my EF6 code though. Worked well. For queries, I prefer Dapper. There's no cost in converting a LINQ expression to a SQL statement. And their materializer is very fast. For commands, I prefer EF. You get transaction support free when you create a context and you can update multiple entities in a unit of work in one call to SaveChanges(). But SQL generation and materialization are slow. 
Reminds me of TurboPascal. 
We learned that all while riding fire spitting dragons into late night battles against the shadows. If you only have one character and ten weapons to wield, you don't need to go there. But imagine having two customers with 50% overlapping of modules and 50% are different. You can start doing the "if (customer ="A") things for a while, but when you reach the 10th, it will simply not work anymore (if you want to stay sane). One form, 20 fields, 7 are required. Basic version. Then you have two customers with 22 fields, and 9 are required, two fields that are different from the the base. We have 30+ forms. 40+ modules. Modules behaving differently depending how other modules are utilized. A field in form 4 has effects on form 7. *If* its there. The biggest takeaway for us is, that you have to look from idea/feature to delivery, and then backtrack every step (msi production, qa, testing, build, pre-testing... all back to feature design). Ask yourself the question "How do I know that the data handoff from form 1 to 40 will work in all cases?" Often you write non conformant/standard things (for example we have only rudimentary object oriented classes) because you realize, that a basic vehicle and basic motor end up in a vehiclewithmotor; but when you have 20 base variations, you will not write vehiclewithmotorspecialcaseoneandwithbabyseat. We never had any performance issue with DI, because most of these things can be checked during build phase. Using DI to wire up test cases (about 2000 here) is absolute magic. Our old Java codebase wasn't testable like this and you ended up doing shitty things like manipulating the code to get data at places where it wasn't easy to set. Thats how you end up in such abstract worlds.
I've taken a lot of inspiration from [this one](https://github.com/JasonGT/NorthwindTraders) from Jason Taylor. It's not perfect, but it is certainly _something_. ~~The one thing I don't like is how his application layer has a reference to Entity Framework's `DbContext`.~~ It seems that he changed that 3 days ago - "Inverted dependency on persistence". What I don't like about the interface he created is that he is still referencing Entity Framework constructs, namely `DbSet`. I get it, that an instance of a `DbContext` **is a** _Unit of Work_, and I get it that the `DbSet` object **is a** _repository_, but the purist in me doesn't like seeing persistence things in the application layer. And I also don't like the idea of _wrapping_ a `DbContext` inside of a hand-rolled `RepositoryFactory`. Ultimately each approach has its trade offs, but I do find it difficult to reason about each one - because really, how many times have your completely changed your application's persistence layer? ------------- Paging u/triggerhappy899 this is for you as well.
I have a randomized text macro generator that I used for making NPCs, random names and towns, really anything. There's a config file path that defines all the macros and options. It's written with a manual parser right now that's really crufty. I'm experimenting with functional programming to write a parser combinator library and clean up the parsing and add more expressiveness to the macro language.
&gt; Will the existing switch statement get adjusted to this new syntax, though? Can you explain what exactly would that mean? (And how could that be accomplished without breaking any existing code?) &gt; So we’ll now have, for good, two entirely different syntaxes. That’s just poor stewardship. Do you think having two entirely different syntaxes for anonymous functions was a bad decision for C# 3.0? Or should the `delegate {}` syntax have been adjusted to make it more in line with lambdas? &gt; My concern is that a new, useful feature was introduced but will be inscrutable to many existing users, with a syntax needlessly hard to remember because it’s so different, and ultimately, as a result, with needlessly few people using it. How existing users will look at new syntax does matter. But so does designing for the future. You don't want to cripple a new feature just so that existing users have slightly easier time learning it. &gt; All we wanted was […]. I understand that's what you want. But please, don't act like you represent every C# programmer. One problem with that syntax is that it *looks* a lot like a C switch with fall-through. Using different syntax means less chance for confusion.
I think the lack of separation of concerns is your primary take-away here. Everything's being done in Main. I'd focus on proper object oriented programming. Your goal here is to create a LogBook class. How you implement that under the hood is up to you, but maybe it needs a list of LogEntry classes that simply contain a string for Title and a string for Post? LogBook would most likely have Add/Remove/Search methods that allow you to create new LogEntries, search them, and remove them. This would make your code more robust by making it easier to unit test and allowing you to reuse the concept of Logbooks elsewhere, not just in a console environment. After you have a logbook class, like zvrba said, Main's sole responsibility is maintaining a reference to a LogBook and telling it what to add/remove/search.
&gt; But please, don’t act like you represent every C# programmer. I didn’t mean to imply that. I do, however, worry that this will impede uptake.
I see nothing wrong On the other hand, I'd write an extension method for your enum that returns appropriate string... 
C# enums has always annoyed me. The point of enums is to have a fixed set of valid values, so being able to set it to an undefined value makes no sense, at least not to my knowledge. Starting out with Java and later moved to C#, I also miss Java's classlike enums. It was nice to have a centralized place where all fields of an enum are defined, rather than have switches all throughout the code that determine something based on the enum's value.
It's not reccomend to throw exceptions for things like this though: https://docs.microsoft.com/en-us/dotnet/standard/exceptions/best-practices-for-exceptions#handle-common-conditions-without-throwing-excepti
Thank you for your reply 
I use `String` when I'm calling a static method from that class (eg `String.Format()`), and `string` everywhere else. It feels more intuitive to me because that way you're calling a method on something that has the same color as any other class, rather than the same color as a keyword like `if`.
Thanks for your reply. I have never created a class before, but I try and see if I can make it work. 
Like most things that suck, it is legacy functionally inherited from C. 
What object are you using? Try string Builder object.
I'm a beginner. What is string builder? 
Click once on a function: F1 to use msdn for help on a system or std library call. F12 to find the declaration of a function Otherwise, double click the thing you want t find reference to. Ctrl+f (should auto fill the highlighted text). F3 to cycle through all instances (off you want, you can look through the solution by changing the option in the search pane. Pro tip: ctrl + shift + f = find in files in a given directory. Good luck! We expect big things from you!
I've come to embrace the ternary operator in my C#. Anyway, I prefer the formatting to look like this: ``` return freq == Frequency.Yearly ? "Yearly" : freq == Frequency.Monthly ? "Monthly" : freq == Frequency.Biweekly ? "Biweekly" : freq == Frequency.Weekly ? "Weekly" : null; ``` I feel it captures the if/else feel better, I guess.
A wonderful object to use for text in .net it's great on memory and preformance
I will look into it. Do you have any other advice? 
Learn to use ctrl+q to search for features in visual studio. It's not always necessary to memorize the location of every piece of functionality.
Some great advice here. I'm not home at the moment but I'll work on all your points when I get home. Thanks 
Earlier I watched [this presentaion video from ndc](https://www.youtube.com/watch?v=0RfUPr0KrSM) and I gotta say, it already looks pretty fully featured and more importantly stable (which is what prompted me to post my original question) But like you say, they have still got to round out debugging and reduction of size, etc. - so, you could be right.very early days. I'm generallty interested to see where it goes.
Depends.. what's the information and datatypes?
int, string, datetime proporties is all at the moment, a lot of relations. Information should be names, date of birth, documents (only path to server, doesnt have to be correct). However nothing have to correct, As long as the database have some kind of information so i can show it in Azure with some sort of data and relations.
&gt;It's not reccomend to throw exceptions for things like this though: https://docs.microsoft.com/en-us/dotnet/standard/exceptions/best-practices-for-exceptions#handle-common-conditions-without-throwing-excepti Are you suggesting that it's so common to call a method accepting an `enum`-typed parameter by passing in `(TheEnum)2953`, that the method should not throw an exception, but instead, consumers should all be checking the return value of that method for the `null` that might arise from calling it that way? It seems to me that "argument is not one of the values defined on the `enum` type" is **exactly** the kind of thing that should trigger an `ArgumentException` or a derived exception type.
Yes, they migrated what LINQ to SQL they had to EF Core and Dapper late last year. Dapper they were already using but some of the LINQ to SQL wasn't a good fit for EF Core so their Dapper code paths grew in number instead. Source: [Nick Craver](https://meta.stackexchange.com/questions/316278/the-road-to-net-core-please-help-stack-exchange-test-ef-core)
If format is null or an empty string (""), the general format specifier ("G") is used. So yes, it’s the default and unnecessary to specify it.
OP specifically wants to update the dll without needing to recompile the other apps that reference it, or even having to take any manual step for each referencing app. 2nd paragraph in OP lays it out.
Trivial applications get Entity Framework. Slightly more challenging ones get Dapper. Complex domains need to write SQL and hand roll mapping from highly normalized tables into domain objects. And no, Dapper doesn't do this once your domain aggregate reaches a significant complexity. Someone always claims it does who hasn't tried it, but there's limits to what it can multi-map for you. This is not a failure of Dapper, it not only doesn't but *shouldn't* handle these cases. 
&gt; inability to recognize duplicate code exactly &gt; the same switch statement in 5 or more different classes If everyone of these has the same structure but slightly different code extranting duplicates may take template methods or smart enums - not everyone sees that right away or is even able to refactor in small steps towards a smaller mess of a code base. On the other hand are those overdoing it - the best code is the one that has not been written: no bugs, easy to understand, easy to enhance.
I'll keep thinking. What is you over all objective of the app you are working on?
&gt; You can package the Data Layer up in a nuget package and depend on it in different applications wherever you want. How do you keep this from being change management nightmare? Strict control on V+1 / V-1 schema compatibility with manic null checking in the object model? 
If you need more, you can always [make smart enums all by yourself](https://codeblog.jonskeet.uk/2006/01/05/classenum/).
Personally, when I see a camera shot rather than screenshot I don't even read the OP and go straight to read the comments
I don't have an answer for the generated data itself, but remember to turn off indexes before you begin, then turn them on again after.
No overall objective. It's a school project, I'm nearly finished. All I want is some tips on how to improve the functionality of the app, helpful advice like on naming the variables etc. 
Gocha, that is a great point.
I completely agree, but isn't the new `switch` expression more of a pattern match than anything else?
You can think of it as a pattern match rather than chained if/else.
It's not like they pulled `_` out of nowhere, it was already idiomatic for an unused parameter of an anonymous function.
When you run it with docker, it has to build the container, and then run the container. It takes longer to start.
Yes but we are not talking about building the container, I am talking about building the ASP WebHost. The container itself is built pretty quickly
Like I said, the angular build step isn't there for the API projects. That seems like the obvious cause.
But it's not the starting of the container! The container starts just as quick as the others. It is this part: `CreateWebHostBuilder(args).Build()`. At that part angular has already been build
 The guidelines used to have a better way to express things like this. They had `DO NOT` for things that are almost always the wrong decision, and `AVOID` for things that can cause problems but might be unavoidable. This is an `AVOID`. That's why they say "for common conditions" here. Exceptions are expensive to throw and process. So if you're parsing thousands of integers, and you expect a high % of failure, using `Parse()` instead of `TryParse()` is going to cost you a ton of time. But if you're parsing tens of integers, or you expect failures to be relatively rare, you're going to lose literally tens of milliseconds to exceptions but have a cleaner API. That's why I mentioned not having domain knowledge here. The right thing to do depends on how this `ToString()` is used. So I listed out *many* of the alternatives I might pick. My code got 1000x better when my team mandated that we adopt "`DO NOT` return null as a failure case.". C# could desperately use an `Option` type, or `Maybe` or whatever they want to call it. They're much more useful than a `ValueTuple&lt;bool, T&gt;`. In short: you're not wrong, but I'm not wrong either. Neither of us has enough information to truly condemn or accept the method above. My gut tells me if I had all the domain knowledge I'd write something completely different though. I find .NET Enums are really bad when I'm facing an external API with an enumerated type I'm pretty sure will allow unsupported values. I'd much rather write a class to handle this and its edge cases. It's tedious. But if it's a big part of my domain logic it's worth it to make it elegant. If, instead, this is a small part of the domain logic and not even used all that frequently... it's not as important that I worry about it. 
Here's the use case I'm thinking of that makes this a little sensible: A lot of APIs return values that are strings from a specific set of valid values. It seems really obvious, at first, we can gain some validation by restricting our own values to an Enum. But third-party APIs are volatile. They might update and add more values to the set. Now our Enum is invalid, and we might not have had time to update all our clients. So when we use that Enum, all of our code needs to be aware the string we have might not correlate to an Enum value and vice versa. That's a lot of cognitive load, and it sort of weakens the case for using an Enum anyway. The *whole point* is "I want to restrict this type to known values". --- But I don't agree this is the best approach for that case. Enums are really brittle when you can't declare you know all of the potential values. So I prefer writing a class to handle those details in this case. Record Types, the thing that's been delayed since C# 6, are a perfect fit. They're immutable and value equatable. So I can make convenience properties that return ready-made instances for things like `Frequency.Yearly`, and make my logic still use what I know is valid. But I can also write `.ctor(string value)` to take arbitrary values from the API. I can override `ToString()` to return that given value, which will always be the predicted one for my known values or the weirdo one for unknown ones. And I can add an `IsKnown` property or something similar to tell me if it's one of the ones I already know. It takes a little more work to avoid using `null`. It takes a lot more work to debug the problems it causes down the road. I have found, over the years, things cost at least an order of magnitude more to fix in maintenance than before release. So I optimize for that.
I can't remember which project did it, but they used `pi` as their version. Each new version adds another decimal. So something like 3 to 3.1 to 3.14 etc. The idea is that each new version gets closer and closer to perfection.
Some people say that allowing nulls was the trillion dollar mistake. 
I don't think it's production ready. Ran some tests.. UX performance is pretty subpar currently compared to just using MVC or razor pages, even more so compared to some of the faster SPA frameworks. This doesn't even account for stability, reliability, security, etc. In theory blazor should be faster than using MVC or razor pages but it's not there yet.
yay more pressure I didn't need xD thank you though
No, it's called the "billion-dollar mistake": https://en.wikipedia.org/wiki/Tony_Hoare - That's why I used trillion, to go even further.
Maybe we can both look at it later today or tomorrow? Most likely tomorrow. Sound good? Also do you have it in git hub or some where like that?
It is not about features it is about performance. Specifically download size, GC, DOM and JS interaction (in this order)
In the past I have used for loop and while loops to fill it with data like Fname1, Fname2, ect for testing purposes.
I've seen that - seems to me it misses the point. Clearly 'null' is needed, as we all use it. We're not being lazy, we have a real need to set things to 'nothing'. You can argue that we should create empty implementation or nothing objects. But there's something to be said about fail fast code. Code which does the wrong thing, but is silent about it - will cost far more time and effort than tracking down null pointers. &amp;#x200B;
This is used for generating random data for unit tests, but I imagine you could just save to db: [https://github.com/AutoFixture/AutoFixture](https://github.com/AutoFixture/AutoFixture)
&gt; Clearly 'null' is needed, as we all use it. It's not needed. We all use it in C# because it's part of the language and used in the .NET framework. &gt; have a real need to set things to 'nothing'. Yes, we have a need for it. But `null` is a bad option for "nothing". Did you ever look beyond C#? Preferably towards a functional language. Functional languages usually don't have `null`, they have explicit `Nothing` types. A type, not a value.
Why should we read the article? What did you like about it?
He likes that he wrote it.
My username is a clue to the fact I know more languages than C#. So sure we can instead have a Nothing that’s subclasses everything, and for all intents and purposes works like a null check. Nicer design; maybe. Would it solve all the problems with shoddy software; nope. Just doesn’t seem that big a deal to me; but maybe that’s Stockholm syndrome.
Having a noting that subclasses everything is not helping either. `string` and `Nothing` must be distinct incompatible types. That will help sort out the issues. If a method says it returns `string`, then it must return a string. Not "maybe a string". If it may return a string, then it must declare so, and force the developer to deal with the potential missing case.
So how do you implement your Optional&lt;T&gt;? 
I recommend you to learn C# basics before you try to code in Unity.
Roughly something in the vein of: public class Optional&lt;T&gt; { } public class Nothing : Optional&lt;object&gt; { } public class Some&lt;T&gt; : Optional&lt;T&gt; { T value; } 
Try to google any unknown word. They are important like puzzle pieces. Only together you will understand other people code (in blogs or tutorials) 
So the nothing value is a subclass; which can be used instead of any Optional&lt;T&gt;.
I guess I misunderstood you. The important point is that `Nothing` is not implicitly compatible with `Some&lt;T&gt;`. You can't return `Nothing` when the method declaration says it returns `T` or `Some&lt;T&gt;`. But point stays: `null` is a mistake. Having a "nothing" value that is implicitly compatible with a "something" value is a huge mistake, whether you label it null or something else. The cases "I always have a value" and "I may have a value, maybe not" must be part of the type system, forcing the developer to consider it and deal with it accordingly. They can still shoot themselves in the foot, of course, but a huge class of null-bugs will be gone.
Still doesn't explain what's up with the null.
Thats interesting to hear. Thanks for your reply.
Literally says to throw exceptions &gt; Throw exceptions instead of returning an error code &gt; Exceptions ensure that failures do not go unnoticed because calling code didn't check a return code.
My assumption after reading the blog posts, gitter, and the github issues is that Blazor probably won't be ready until it targets corert wasm. The corert guys don't think corert will be ready with the 3.0 releases and 'they haven't started planning 4.0 yet'. Without web workers and higher performance DOM access...I think it just as much an issue that WASM itself isn't quite ready for production yet.
If your company's willing to foot the bill RedGates tollbelt includes customizable data generators, even for things like credit card numbers that pass checksums.
I love the simplicity and performance benefits of C# enums as oppose to the brainteasers + trivia material that are Java enums.
How is this not nice to read?
I see two ways to crack a nut really. Programmers know that reference types can be null; and still didn’t do the right thing. I feel like you’d just swap null-bugs for other bugs. Also when reasoning about this the C#/Java everything’s a reference(pointer) isn’t great. If only C++ had move semantics and good smart pointers 25 years ago. We might be in a better place.
You could get a demo database like northwind and load data from it into your db.
The war is over. Javascript won.
Here's an example powershell module that generates random data: https://powershellexplained.com/2018-07-09-Powershell-NameIt-generate-random-data/ You could probably repurpose it for your needs.
Its great for hobby projects, it's not really production ready though is it? Not to worry though - Blazor ([https://blazor.net/](https://blazor.net/)) is looking very promising in this area &amp;#x200B;
Its definitely production ready. We already have successfully built applications that are in production use and working perfectly fine. We had to build our own SPA framework upon Bridge. But it be only be a small community effort to make this a public open source solution.
I tend to see `switch` as a warning -- if I am using it, it's a trigger to ask myself if I'm doing this right, given my requirements and anticipated future use. Sometimes the answer is "Yes, a switch here is appropriate". Often it's "No, this will turn into an unmaintainable mess in 5 seconds flat". A zero-tolerance policy in general will nearly always backfire. :) 
Even then, long ternaries cause a lot of mental overhead to understand when you need to quickly scan through code...
This looks pretty solid, i'll take a deeper look at it tomorrow, thank you very much!
WW2 is coming with the wasm-based tools we'll try to take on JS again.
I mean, they conceded a little bit by adopting typescript
No, angular hasn’t been built by that point. 
Yes it has. I can literally check the directory and it will have a `dist` folder
Tomorrow sounds good. 
First of all based on past experience these tools leak abstraction. I don't know how bad/good the situation is with Bridge.NET but it is one thing that makes me weary against these solutions. More importantly though in recent years I have become more of a backend dev and while I now get to make technical decisions including one about frontend I let the frontend dev I work with choose the tech (I only insist on TS and express opinion against React). I've yet to meet a frontend dev who suggests Bridge.NET, if somebody working on a project I am responsible to suggest Bridge.NET I'd approve in an instant. I do plan to try to learn modern HTML and CSS again but Bridge.NET will not be a reason for that, I'd wait for Blazor.
I have no doubt that Bridge.NET can be used and has been used in successful products, but: * the bug market of web developers out there largely wants JS * this is a transpiler, and from a language at that that doesn’t map all of its idioms well to JS, and doesn’t, in turn, support all of JS’s idioms well. This means you’ll run into abstraction leaks, at which point you’re at risk of being angry at yourself over not just writing JS in the first place. * in particular, lots and lots of tooling exists for JS in the browser. Not so for C# transpiled to autogenerated, poor JS in the browser. * TypeScript is arguably a saner path in between. It offers many of C#’s features while mapping excellently to JS, and takes far more advantage of JS’s idioms, because that’s its heritage. * if you really do want C# though, Blazor may eventually be a viable path. I’ve been using it in prototypes.
There is *literary* unlimited versions possible between them!
Who are "they"?
Frontend devs at large
Oh yeah. We're still coming for round 2 :)
Cool. Is it just a console app?
With modern tooling and frameworks, js really ain't that bad. I context switch between .net and typescript on a daily basis and it's really not a problem anymore.
Finally some reasonable arguments =).
I saw that the cshtml5 project is going to be using it.
yes 
\^ what an idiot that claims he does real programming appears to be [Bridge.net](https://Bridge.net) is just a specialization of specific and detailed .net functions similar to how powershell modules provide more functionality. in fact, they do almost the same thing.
Do you want me to put it on git hub? 
Yeah that would be great. Then tomorrow I can get the code and we can got through it. Sound good?
MongoDB with a snapshotting pattern. When in the SqlServer world, I like Dapper.
That’s proof of nothing. It will rebuild on launch. 
Nice. I've been working on the code, it's changed a bit so i need to re-upload it. i just have to translate it first.
[this](https://docs.microsoft.com/en-us/dotnet/standard/base-types/enumeration-format-strings?view=netframework-4.7.2) is actually a more useful link.
It’s returning a string. Nothing wrong with a null string. 
That is literally on launch! How else would the breakpoint be triggered if it wouldn't be launching
I really wish the C# people would stop complicating the language with syntax sugars that save one line of code in very specific cases. This pattern matching business doesn't enable anything that wasn't possible before, it's just slightly nicer. It's not like LINQ or the async/await stuff a few years back, that really was something new. There's more than enough grunt work to be done in the framework, if they're feeling bored. They could improve HttpClient or implement WCF and XML-DSIG and whatnot in .NET Core, but I suppose that doesn't do as well in parties than bragging about how you managed to fuck up the C# grammar even more. Call me old-fashioned, but in my enterprise, I like my language to be boring. I like five year old code to not look like it was written in the Stone age. Just stop it with all this syntax sugary stuff, we don't need it, it doesn't solve any new problems, C# doesn't have to be or do everything, it just has to do what it does.
Any kind of switch would be preferable to a bunch of if..else clauses or this unreadable nest of ternary operators.
I'm using Bridge.NET for production work. No complaints - it works brilliantly and lets me share code and model classes between the backend and frontend. I strongly recommend it for anyone who wants to have their whole stack written in a single language (and don't want that language to be JS).
I’m not sure what you’re looking for here. Firstly, I have no idea what that image is, as I’ve never used whatever IDE you are. Secondly, Angular takes a while to relaunch. That’s why dev environments are great. &gt; How else would the breakpoint be triggered if it wouldn’t be launching Part of launching the SPA is running the linters and webpack. That’s the process. 
That IDE is Visual Studio mate. Also my issue is not launching the SPA, it is building the webhost that runs the SPA. `ng serve` is not run at this point, it only gets executed later in the code. 
Git hub looks super complicated. Because this is a school project maybe you should not help me that much. I greatly appreciate the offer, and maybe i will take you up on your offer in the future when i practice on my own. I'm going to try to add a sorting algorithm (Bubble sort) tomorrow if i can't make it work maybe i can pm you for help?
Yeah, Blazor looks interesting. But it won’t be final for another year or so, and it won’t be great until WASM supports the DOM. (There’s also much left to do on the tooling side, such as debugging being quite limited and Chrome-only.)
You need [Bogus](https://github.com/bchavez/Bogus).
np
Yup, you absolutely can do this: C# has powerful reflection features, you could build a whole pipeline that generates random data for each field/property type on a class based on default or custom generators, and could even have filters inserted into that pipeline that could further transform it. 
Sounds good. There are other ways we can send code back and forth just messier
Oh this hurts my eyes to read
What are you even trying to say
I’ve always used JetBrain’s stuff, so I had no idea. Regardless of IDE, there’s plenty of people who point to a dist folder, forgetting that it was never cleared. Because that’s what I see most often, that is of course what I’m going to assume has happened. 
Everything and anything! It refers to itself on [redis.io](https://redis.io) as an "in-memory data structure store" and that's exactly what it is: it has many types of data structures to fit whatever use case you have in mind. So yeah, it can be a cache but it's far more than that. Check it out!
But that is clearly not what happened here and it has even nothing to do with it. Also reddiquette, your downvotes are oretty obvious. Be nice. 
FWIW: I use it as a simple and easy-to-access IPC/RPC locally, as the multi-node main actor in my sensor data pipeline and and for distributed command &amp; control of "IoT" devices. In none of these ways is it a "cache", though I do also use it for that as well. Because it's awesome!
I have no idea what you’re talking about and can only assume you’re thinking of a different tool than Bridge.NET.
I would also suggest that you make a class that can represent a post. If you want to be able to add more than one post, don't use an array but List&lt;string&gt;. It will fit as many posts as you would like. But then you really should make that class, and make it a list of the class instead of string. I also noticed in your "quit" case, you are comparing to both upper and lower case Y. Instead you should just ensure that it is already lower case. Use Console.ReadLine().ToLower() I would also suggest that you read about the SOLID principles as soon as you start to get a better understanding of things. Later on they will improve your code quality a lot. You wont
Sure. 
It is worth noting that it is not only Blazor that is coming. Rust-based tooling is also far ahead, probably further ahead than Blazor and other languages are starting to have similar experiments.
I can help you with GitHub also. If you use visual studio (any edition) there are plugins that will help. Pro Tip: Source control is a good thing.
The whole concept of libraries a developer “should know” is silly. If the developer needs something, they can look around and find something that does it.
I’m not downvoting you dude, but if you talk like this to everyone who tries to help you, it doesn’t surprise me that you’ve picked up a troll that just downvoted your stuff. 
Lmao so its just a coincidence that my comments go to 0 a few seconds before you reply for 4 comments in a row now? Nice try, at least have the guts to admit it
Sure, but this is the csharp subreddit, so I figured that’d be most interesting. (Also, in particular, the question’s intent seems to be to use C# as much as possible.)
True, I'm just pointing out that we're not alone, we have powerful allies :)
Can you elaborate a little bit more on what those features are? I'm usually working with embedded software, so i'm not super knowledgeable in C# or EF Core.
Because the concept is a mess, so implementation must be too. TypeScript is a better language than C#, and no wonder because it was created by the same person, with more experience. C# has also its set of warts like JS, but with TS, there is nothing constraining design. Even net core strives really hard for backwards compatibility and for keeping warts. Like Convert.ToInt32(null) gives 0.
Not doing it bud, but I’m not going to bicker with you. Don’t bite someone who’s trying to help you. 
And it happened again, at least try to hide it buddy
Hi, all! I'm building an open-source, host-it-yourself remote control and command solution with .NET Core and SignalR. [https://github.com/jay-rad/remotely](https://github.com/jay-rad/remotely) [https://remotely.lucency.co](https://remotely.lucency.co) 
Exceptions are for things that should NOT happen. There are plenty of error cases that are the result of data just not being available which is a common occurrences and exceptions should not be used for. If invalid input is a valid thing that could be passed in than it should be handles and not throw
How so? It returns null if an int is cast to the type of enu. It expects that's out of it's defined range
No, please ... It hurts...
While I have entertained using Bridge.NET, I never did more than a cursory review because I kept coming back to one question, what problem does this solve? If your problem is that you _really_ don't like JS, have to write a complex front end, and insist on using C#, then yes Bridge.NET might fit the bill. However most devs realize that there's more pitfalls than smooth sailing once you get into things like this, and like it or not, you're probably going to have to deal with JS at some point. If your problem is that you're migrating something like a webforms into a SPA and have your code well structured enough that you could reuse a lot of business logic if it were only in JS, then this might be a useful tool. I think there are many problems that Bridge.NET _could_ solve, but these are the only two that I think it's reasonably suited for. In the case of the first problem, I'd say just bite the bullet and learn JS. In the case of the second problem, it'd have to be a Goldilocks type situation for that to really work out well. What would interest me with Bridge.NET is getting access to some of their shims so I could write my javascript with the help of the .net APIs that I enjoy using. Linq in JS would be incredibly helpful
Would you do the same please? JavaScript drawbacks, really?
If I remember correctly, you can force serialization using the DataContract attribute. Or, worse case scenario, you can add the ISerializable interface to your classes. There’s pretty good documentation on that approach out on the interwebs.
Yeah. Like an enum having value that is not in the enum.
This one is similar question. May work: https://stackoverflow.com/questions/891449/xmlserializer-and-collection-property-with-private-setter#892596 This too: https://stackoverflow.com/questions/802711/serializing-private-member-data Maybe this: https://www.codeproject.com/tips/812560/signalr-net-deserialization-of-objects-with-privat
That should definitely 100% crash the program because an enum must never have a value that is not in the enum, clearly a bug.
Definitely!
What makes you say it is not production ready? The devs clearly thing it is and OP does too.
&gt; TypeScript is a better language than C# No it is not. It still have a thousand kinds of this and while powerful its type system is extremely complex. Convert.ToInt32(null) isn't even a language feature and do you really want to argue that the JS standard library is better than .NET?
I mean go look at their Issue Tracker. I'm not trying to dump on the project at all - I think it's a great effort and as I said, really cool for hobby projects but just not in anything mission critical / enterprise level. Look at all the DateTime handling issues they constantly have, and some go without response for a long time [https://github.com/bridgedotnet/Bridge/issues/3771](https://github.com/bridgedotnet/Bridge/issues/3771) And the Assemblies are unsigned: [https://github.com/bridgedotnet/Bridge/issues/3808](https://github.com/bridgedotnet/Bridge/issues/3808) The devs make a great effort, but transpiling is hard **especially to javascript**. Was just pointing out that if you wait for Blazor to do a full release then it's probably going to be a lot more solid due to the approach that they are taking. It will be much much easier to test and validate.
How's performance?
Says who? It is completely valid to have any value of the underlying type as the value of any enum. An enum of `{ Yes = 1, No = 2 }` can have a value of 3, or 5000, or -201874. Who knows why they made it this way, perhaps it has some legitimacy, but regardless it's the way it is. It's something I've come across in the past, particularly with deserializing where some data was parsed as a value not currently represented by the enum. C# didn't care. It didn't throw. It just accepts invalid values and expects you to handle it.
The datetime thing is bad but so is bringing down Stack Overflow and nobody says .NET core is not production ready. Also I am super surprised people act as if Blazor will be production ready in a couple of months. I'm pretty sure Bridge.NET (and JS based tools) will achieve better results for at least 2 years and maybe as long as 5 years into the future. The assembly size and other performance problems in Blazor are much harder to fix than the datatime bug of Bridge.net
The only reason to make it this way is performance. If it is valid in your program to have another value then you should refactor and not use enum. The whole point of enum is to restrict the values the variable holds. It is well known that it can hold other values technically but it is a feature that is supposed to help you avoid these situations. &gt; It just accepts invalid values and expects you to handle it. Yes. Therefore you throw exception.
I looked into it and ended up not using it because it adds a 1.8MB javascript file to your website. You can minify it but it's still a lot and all of it needs to be parsed and compiled on the client at every page load. I decided to use Typescript for my project.
I don't like the approach of standard library being at all. Everything should be a package to reduce code shipped, and browsers should be as possible. And no JS code should ever use "this" and classes.
No C# code should ever use Convert.ToInt32 therefore your argument is invalid and C# is perfect. Also it is much more easier to avoid Convert.ToInt32 than it is to avoid this in JS.
Additional complexity is additional bug surface. Injecting a step like this is a bad engineering decision because you don't get enough value for that cost and it's not a question of if you get burnt but when. 
No noticeable difference than regular JS. Basically, any directly compatible statement like string operations just becomes POJS. Things that don't map directly like null/undefined conversions goes via a conversion library that adds a few more if-checks to ensure that you get the C# behaviour instead of the JS surprises. 
Weve already switched several of our internal ASP. NET mvc apps to blazor in production and its handling it well. Even as a preview. Very slick
We can get js resources all day. Getting c# talent is tougher to come by. I’d rather leverage popular js frameworks for the front end as it’s easier to get/retain talent vs an obscure library that converts c# to js. 
There's an invitation to a flamewar if I've ever seen one. You don't think it has any drawbacks? LOL
Looks like ScriptSharp which I personally liked but it died several years ago. https://github.com/nikhilk/scriptsharp I’d rather do TypeScript as it was designed from the ground up to solve the JavaScript *problem*.
I'm with you and I really know everything has its pros and cons. What I want to know is: what drawback makes you ask why people are not using a newborn technology over a well and stable one that almost ever success web product use.
A console program maybe?
I'm assuming you're on Windows? I don't use Windows so I can't test this out, but I'd write the program as a console application and then write a batch file to run the .exe that you produce and try out something [like this](https://www.winhelponline.com/blog/run-bat-files-invisibly-without-displaying-command-prompt/) which should run it hidden away. 
&gt; TypeScript is a better language than C# Ahahahahahahahaha. OMFG my sides hurt.
One True Versioning: YYYY.MM.DD.HH.MM.SSS (I lied, you could just time stamp the unix epoch, too) &amp;#x200B;
How do ya'll handle styles and/or style organization? That's been my biggest issue with it so far.
I think it's time to take this to r/discussproglanguages
Here's a sneak peek of /r/DiscussProgLanguages using the [top posts](https://np.reddit.com/r/DiscussProgLanguages/top/?sort=top&amp;t=all) of all time! \#1: [What are your top 3 goto languages and why?](https://np.reddit.com/r/DiscussProgLanguages/comments/b66tkv/what_are_your_top_3_goto_languages_and_why/) \#2: [Compare and Contrast Programming Languages has been created](https://np.reddit.com/r/DiscussProgLanguages/comments/b661u5/compare_and_contrast_programming_languages_has/) \#3: [2019-04-03 - Today's topic DSL pros and cons](https://np.reddit.com/r/DiscussProgLanguages/comments/b8xk96/20190403_todays_topic_dsl_pros_and_cons/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/afd0dd/blacklist/)
You need to set it as a Windows GUI app instead of console app. A console app will always open a console window, and if that window is closed the app is closed. Create a console app and change the app type in the project settings or create a Winforms project and delete the forms and form initialization code in Program.cs &amp;#x200B; However you will have the problem of capturing the keyboard input. That is not easy to do, essentially what you are trying to do is similar to a keylogger... There are some solutions in Stackoverflow if you search about this, you will have to try them and see if they still work in Windows 10 
I personally just use scss with gulp. You may also like https://github.com/EdCharbeneau/CssBuilder.
Removed: Rule 3, Rule 4.
Yeah... I'm reminded of visual interdev (because I'm old) and how you'd drop a widget on screen and if something every went wrong with it, god help you. Scared of that debugging experience..
Seeing and playing with the latest Blazor, I have lost all motivation to learn any new JS frameworks. I think we'll see an explosion of frameworks soon and I'm looking forward to it. 
Removed: spam, Rule 7, plagiarism.
Is it still using XmlSerializer? If so, you can use [XmlElement] [XmlAttribute] or [XmlIgnore] tags. If not, you you must switch to DataContract attributes ([DataContract] and [DataMember]/[IgnoreDataMember])
I am not sure if there are good resources that are so specific. Perhaps focus on resources that target Unity and learn C# as you go? 
I agree with all the points here but I wouldn't say blazor is ready yet.. at least for production. Definitely has potential, but it's still kind of slow and "experimental". Regular old MVC and razor pages in .net core still work well though.
How does bridge work? Looks very cool but how does it get the code inside of the function and generate JS/TS with it? I saw reflection used in the test but I can't quite figure out if they're parsing the source code or if they're using reflection to figure it all out 
No, the devs say it is experimental and absolutely shouldn’t be used in production. 
And they will win. Javascript was only ever 'good enough' because there was no other option. Having actual programming languages in the browser will, at long last, rid us of having to use that garbage.
Why are you using html designers? 
Classes are one of the few things that keep large projects sane. 
Look into creating a windows service. It's exactly what you're trying to do and not that hard to implement. 
[For tutorials on C# with Unity](https://www.youtube.com/c/dilmervalecillos) 
That's very valid. If it were application level necessitation to update .DLLs for a rendering engine or the like, the overhead of passing data back and forth over a web api would be insane. I poorly worded my conclusion. (I live in web dev so that's my narrow purview). Regardless, I stand by the statement that anytime a new version of a library is introduced, a build *should* take place on an application using it... because bad shit can (or, more probable, will) happen.
Exactly opposite, please look at React Hooks for example.
Sooo what hack are you writing? A keylogger? Game scripter? Whatever it is i hope you get banned for it because the only reason to hide that shit is if you're doing something illegal.
&gt; Linq in JS would be incredibly helpful Enumerable.Select -&gt; Array.prototype.map Enumerable.Aggregate -&gt; Array.prototype.reduce Enumerable.Where -&gt; Array.prototype.filter Enumerable.Any -&gt; Array.prototype.some Enumerable.All -&gt; Array.prototype.every
A service sounds like exactly what you need. Why can't you use one?
Regardless I’d wager it stands higher in credibility than Reddit posts. YMMV.
This actually works or it used to. Hooking into the keyboard messages isn't insanely complicated either.
I would reccomend K2 Style by Kitamimaki Kei famous Japanese Dev Journalist/Author
The lack of Dom manipulation is going to slow the adoption of wasm so much. That should of been included from the start.
That’s not over-the-top critical or anything... this is a C# sub, not one on the discussion of morality. 
oh yeah it's runtime exceptions from breaking changes just begging to happen. It's really a sysadmin problem no different than rolling out updates to any software.
That's really cool, good work! 
Thank you. After not doing much JS, I've been thrown in the deep end over the last month or so. Small things like this are so helpful. Those functions help with most of my linq usage, but is there any equivalent to `First`?
Looking good! I have yet to begin my foray into the world of unity but it is motivating to see people like you doing cool stuff with it.
 Array.prototype.first = function() { if (this.length &lt;= 0) throw new Error('Sequence contains no elements.'); return this[0]; } &amp;#x200B;
It is possible this is the case. However, it is also possible OP is writing tests, doing white hat testing, just using an idea for learning purposes, or playing a prank on their SO (from experience, she should never have let me install a SSD on her laptop... ). Hell, maybe they are just writing tooling for themselves to launch applications from their keyboard. Doing stuff like this is how I got into this industry. There is not enough evidence to condemn. Should they break the terms of use on a service, it will be up to them to enforce.
Probably cause typescript exists and has been adopted by almost everyone. Still, this is a cool idea.
So basically I'd have to roll my own. That certainly works, but I also sometimes throw a delegate in with First as well.
Thanks very much for your reply :) I'll have a look at that soon.
Thanks I've seen a couple of these but will look at the codeproject one too
Possibly better for me to swap out while im at it - thanks for the help :) 
Visual Studio's test runner will produce a code coverage doc for you. You can open it up and hit a specific button in the ui, and it will highlight lines by coverage (covered, partially covered, and not covered).
 Array.prototype.first = function(callback) { if (this.length &lt;= 0) throw new Error('Sequence contains no elements.'); if (typeof callback === 'function') { var results = this.filter(callback); if (results.length &lt;= 0) throw new Error('Sequence contains no elements.'); return results[0]; } return this[0]; } although at this point I'd probably consider importing lodash, depending on how much more utility you need. it's got a whole slew of useful functions.
Is it possible to catch hotkeys from a windows service? I didn't think services were allowed to interact with the user session. There is (or used to be) a check box to allow a service to be "interactive" with the user session but I didn't think that worked anymore.
Very reactJSish. Styling components and composing them so they can be reused via shared libraries. We have shared constants file with filled with our corporate colors and links to fonts, logos, etc... 
Thanks! Got it working. 100% Code coverage is going to be tricky. There's a few functions in an interface that isn't called on 100% of classes that inherit it. I wonder what I should do about it. Also some error handling isn't covered because a test can't exit more than once. Look's like I have a lot of test to write.
Thanks, although one of the benefits of `First` is that it won't iterate over the whole collection. It looks like with JS you'd have to dip into an actual for loop of some kind. We currently don't have lodash loaded in our environment and already have probably a bit more JS being loaded, so I'd just prefer to add a prototype function where necessary rather than another library. Ideally I'd prefer to drop jQuery all together, but that's a big uphill battle that probably isn't worth the fight. Unfortunately I do still have to worry about IE 11 support :( I got burned this week by not including a couple of polyfills and had to revert some syntax back to the more archaic form.
Exactly... In an ideal world that would happen, but OP hadn't provided extra information, so it would maybe lead me to believe this is not a shop with tight oversight (if any) on deployment processes
Yeah, getting to 100% coverage the first few times can be really difficult (and sometimes not worth the effort) but the more you do it, the easier it will get since you'll start to write code with testability in mind. The academic end goal is always to write tests first and then code, but there's not a single team at the very large software company I work for that does that.
Not an actual suggestion just how I do things... When switching languages is not a book but in fact, I'll take a library that I know in my current language and try to port it to the language I'm learning asking SO questions and reading articles as I go. Once I feel I have a good handle, I'll stop and let it collect dust in my GitHub.... I should really clean my repositories 
100% is something to strive for, on my teams we only have a requirement of 90% for commits. The focus should be on the quality of tests... It's easy to write a test that passes. Especially when writing the tests later. I don't know your app, but I'd question inheritance that does not call specific parts, this may be breaking SOLID principals. Obviously I'm just projecting here tho
 If windows service is not allowed to catch keys, which I don't think it is. Then, you can create a wpf app and set 'ShowInTaskBar' to False. Then the second part is a hard one. But I was able to find a solution some months ago. You can implement low level keyboard watcher in c++ and then, import it as dll in your c# projet. Is not easy, but the good news is that, at the time I was looking for it, I was able to find an article which implemented a class just for that. I may still have that in some of my projects so let me know if you want to go on with that ideia. 
&gt; The focus should be on the quality of tests... It's easy to write a test that passes. Especially when writing the tests later Can you explain this a bit more? &gt; I'd question inheritance that does not call specific parts I'll need to look into it but the two things that popped out is the size() and dbgInfo() methods. Some objects doesn't have a size so no code would call size() on that instance thus the function is never ran. Similar objects hold info and no data so there's no reason for dbgInfo to be called. However I'm SURE I can clean it up later. But one step at a time. I'll need to finish implementing two features then write unit test for all my non-error code paths.
&gt; The academic end goal is always to write tests first and then code WTF? Why?! Most of the time I end up missing information and need to adjust/refactor. I'd throw out those test because they'd be flat out incorrect. Who on earth thinks writing test first (especially with no solid spec) is a good idea!?!?!?!
https://www.cyotek.com/blog/creating-long-running-windows-forms-applications-without-a-start-up-form
Yeah for sure! [Reflection](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/reflection) in C# is handled by the `System.Reflection` namespace and if you've used C++ you'd know them as RTTI (runtime type introspection) features (though if you're accustomed to working on embedded platforms you might not have them available because of resource constraints). I think it's probably easiest to illustrate what I'm suggesting with an example, and fortunately you've provided a great example requirement in one of your other comments: "int, string, datetime proporties is all at the moment, a lot of relations. Information should be names, date of birth, documents." To keep it simple we'll just create a POD class `Person` that we can use as the specification to generate random records. First though, we'd need to define some kind of simple random field generator interface (and a "tag" interface we'll use later): ```csharp public interface IFieldGenerator { object GenerateField(); } public interface ITemplate {} ``` One of C#'s great features are [Attributes](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/) which we can use here in the defintion of our `Person` class to make specific choices about how each field should be generated later: ```csharp public class PersonTemplate : ITemplate { [GeneratorType(typeof(NameFieldGenerator))] public string Name { get; set; } public DateTime BirthDate { get; set; } public int AccountNumber { get; set; } } ``` That `GeneratorType` attribute would be defined like so (along with an attribute to marker the default generators, which we'll use in a bit: ```csharp [AttributeUsage(AttributeTargets.Property)] public class GeneratorTypeAttribute : Attribute { public Type Type; public GeneratorTypeAttribute(Type genType) { Type = genType; } } [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class DefaultGeneratorForTypeAttribute : Attribute { public Type Type { get; } public DefaultGeneratorForTypeAttribute(Type type) { Type = type; } } ``` Then, the meat'n'potatoes if you will, the field generators. I've only included examples here but you can imagine that you could get pretty specific/detailed with these: ```csharp [DefaultGeneratorForType(typeof(int))] [DefaultGeneratorForType(typeof(long))] public class IntegerFieldGenerator : IFieldGenerator { public object GenerateField() { return new Random().Next(someMinValue, someMaxValue); } } [DefaultGeneratorForType(typeof(DateTime))] [DefaultGeneratorForType(typeof(DateTime?))] public class DateTimeFieldGenerator : IFieldGenerator { public virtual object GenerateField() { return DateTime.Now - new TimeSpan(0, 0, new Random().Next()); } } [DefaultGeneratorForType(typeof(string))] public class StringFieldGenerator : IFieldGenerator { public object GenerateField() { ... } } public class NameFieldGenerator : IFieldGenerator { public object GenerateField() { return new PersonNameGenerator().GenerateRandomFirstAndLastName(); } } ``` Finally, we can use those great [`System.Reflection`](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/reflection) features to find our `ITemplate`-implmentating templates, iterate their fields and generate random data for them from our `IFieldGenerator`s: ```csharp // probably should be recomputing this at each call! but this is just an example... public static Dictionary&lt;Type, Type&gt; DefaultGenerators() { // get list of default field generators Dictionary&lt;List&lt;Type&gt;, Type&gt; tempDict = Assembly.GetExecutingAssembly().GetTypes() .Where(t =&gt; t.GetInterfaces().Contains(typeof(IFieldGenerator)) &amp;&amp; !t.Attributes.HasFlag(TypeAttributes.Abstract)) .Where(t =&gt; t.GetCustomAttributes(false) .Any(ca =&gt; ca.GetType() == typeof(DefaultGeneratorForTypeAttribute))) .ToDictionary(ks =&gt; ks.GetCustomAttributes(false).ToList() .Select(ksCa =&gt; ((DefaultGeneratorForTypeAttribute)ksCa).Type).ToList(), genType =&gt; genType); // this transform allows multiple default attributes on a single class var retVal = new Dictionary&lt;Type, Type&gt;(); tempDict.Keys.ToList().ForEach(kTypeList =&gt; { kTypeList.ForEach(kType =&gt; retVal[kType] = tempDict[kTypeList]); }); return retVal; } public ITemplate CreateRandomInstance(Type templateType) { var defaultGenerators = DefaultGenerators(); var myNewRecord = Activator.CreateInstance(templateType); templateType.GetProperties(BindingFlags.Instance | BindingFlags.Public) .ToList().ForEach(p =&gt; { var fieldGen = defaultGenerators[p.PropertyType]; p.GetCustomAttributes(false).ToList().ForEach(cAttr =&gt; { // use a custom generator if one is specified with GeneratorType() if (cAttr.GetType() == typeof(GeneratorTypeAttribute)) fieldGen = ((GeneratorTypeAttribute)cAttr).Type; }); object newFieldValue = ((IFieldGenerator)Activator.CreateInstance(fieldGen)).GenerateField(); p.SetValue(myNewRecord, newFieldValue); }); return myNewRecord; } ``` To generate a new randomized `Person` record is as simple as: ```csharp CreateRandomInstance(typeof(Person)) ``` At least, that's the gist of it! Obviously this is an incomplete example implementation, but as I hope you can tell, it's quite flexible and therefore can be used to generate just about anything you might need. I hope it helps and feel free to ping me if you have further questions! (Disclaimer: totally untested, un-optimizied example code! Be better with your production code :))
Say I'm writing my own implementation for testing if something is a whitespace character. Say my function is this: public bool IsWhitespace(string value) { Return value == " " ; } My test could be: Assert.That(IsWhitespace(" "), Is.True) ; This test passes cause I know the implementation of the method. But if someone comes a long and gets fancy, maybe they are trying to test the unicode character '\x000a0'. Your function will now return false for a valid whitespace character. But the test still passes. That's an example of a bad quality test that still passes.
Linq2db, like EF but faster.
Supposedly, it means you'll always have a complete spec because the spec becomes the tests. Again, it's impractical in real life and honestly hard as hell even in a for-fun project.
That's just lazy. Sometimes I write test that won't pass and comment it out until I feel like working on that piece of code. IDK if that's considered bad practice by others or good. It's commented out there's less noise of failing test. 
Looks good, but it needs more spread towards the end imo
Depends the team your on. My team if a test is necessary it gets written to completion based on current specs of project. If it fails in the future, it gets fixed. Then another test written specifically for the edge case that was found to cause the first test to fail. Sometimes this requires refactoring several objects to adhere to SRP, to make future and past tests more specific and better at catching future bugs... More often than not that's not required, usually someone just missed something in a ticket story or a new story warrants a change. Well never comment out a test though, just looks messy, well either set it to ignore, explicit or just disable it entirely if not needed. Every team is different and every tech lead is different. My teams follow an explicit style guide, this is included in it. 
Just what I've been waiting for, this gets us closer to that 1.0 release :) Hopefully they can work on the VS extension so the visualizer works on VS2019. 
LINQ is lazy evaluated. Those array functions are not.
I'm waiting for blazor. While this could be cool for keeping my models in sync, I don't think I would get much use out of it otherwise. Dealing with the pains of my complicated setup is already annoying enough (WPF app using cefsharp winforms and dealing with the current dotnet mess of supported versions, trying to support Win7, etc). Adding something like this would likely cause more time and frustration. Looks cool, but i think wasm is the only viable alternative to JS. Hopefully wasm solves more problems than it creates. 
Great work!
&gt; Just what I've been waiting for, this gets us closer to that 1.0 release :) Every version does that. But there can still be over 100 versions before 1.0.
This is great https://learnxinyminutes.com/docs/csharp/
I mean yeah, we could have a lot of versions before Avalonia is out of beta. I'm just exited about progress and seeing that the project is coming along. I just can't help getting exited with new and shinny stuff, I'm just a student learning C# :P
I think you can just use a WinForms app, override WndProc and look for the WM_HOTKEY message. There is also an API that's called something like RegisterHotKey that allows you to set system wide hotkeys. I think if you set the form to not show in taskbar it will still work. I could be wrong though and I'm ok my phone so I cannot check
Man, and I just got used to the particle system. Looking real good
Don't waste money on books, start here https://docs.microsoft.com/en-us/dotnet/csharp/index
Thank you my friend and honestly both systems are great and the knowledge you acquired is huge ;) 
Did you add a reference to the assembly containing that type? According to the documentation it's in `System.Diagnostics.EventLog.dll`.
Are you saying I need to copy the .dll, and then load it from there? Like I said, I have the using line at the top of my file. But I haven’t tried that
&gt; Are you saying I need to copy the .dll, and then load it from there? No, you need to add as a reference to your project. Right click on your project in the solution explorer, select Add Reference. &gt; Like I said, I have the using line at the top of my file. That `using` line just makes the types in that namespace with their shortened name available in that file, so you don't always have to use the fully-qualified type name. This is completely unrelated to references.
Alright. Thanks for your help; fairly new to this whole C# thing…
Brackey’s is even better.
Awesome join me and I think you will have the best content for your own journey ;) 
Oh, my apologies! &gt; I need to create a separate TcpClient and add listeners? Would it... be on its own thread? I can have multiple clients connected to this TcpClient? You would keep (most of) the code you currently have but add new stuff. Let's say you created the encapsulating class, then on line 47 in the [server file](https://bitbucket.org/mwinzer/trying-so-hard-to-understand-sockets/src/ca1a941c5c9954c3b5b17949dc31a26511cee035/Server/Server.cs?at=master&amp;fileviewer=file-view-default) you would initiate the class using the newly created `TcpClient` and instead of supplying the client, supply the encapsulating object to the thread `Start`. In `HandleClient` (in the while loop) you can then use the object to, for example, see if there are any messages to relay. &gt; I understand that my client connects are working on isolated threads, but I thought that was the only way to have multiple clients connected to a server. It is strictly necessary, but if you need them to be able to work at the same time &gt; The tutorial that I essentially copied/pasted this code from stated that if you didn't flush, it wouldn't send until the buffer was full? How does autoflush work as opposed to flush in that regard? This is only true for the underlying encoder's buffer, as stated in [remarks](https://docs.microsoft.com/en-us/dotnet/api/system.io.streamwriter.autoflush?view=netframework-4.7.2#remarks) for `AutoFlush`. The writing buffer is flushed immediately on all `Write` calls if `AutoFlush` is set to `true`.
If he wrote an entire hack for a game in autohotkey then I am very impressed.
&gt;You should depend upon abstractions and not implementations You're right, have been learning SOLID but missed this part. That explains a lot. Thanks!
Look into Test Driven Development. It's about defining your requirements in a test, and then writing code that makes those tests pass. Don't just call dismiss a practice that is seen by many as the epitome of stable code. It's hard to do well, but it gives 100% coverage and confidence when refactoring. The point is that you shouldn't be missing information when you come to write code. The analysis phase of what's required comes first. If there is then a change fine, you change the tests and make the code pass. Seriously, look into it. It isn't for everyone, but it's a well known practice.
Can relate to this. Hourly rates are similar in the UK
Interested in this project, just wish the documentation was a little better...
Unity -&gt; Game Winforms -&gt; Simple app You can do vice versa but.. making game in winforms is a bit harder.
Makes me want to start with Unity. :-)
Thanks!
Better learn WPF instead of Winforms.
I was thinking something really simple like Minesweeper just for the sake of practising, is WPF still the way to go
WPF is always the way to go for basic GUI
Agreed; that’s why I said “eventually” and “for prototypes”. It has promise, but will need another year or two.
Do it ;) 
There are a lot of libraries not included in projects by default, because most of the time you don't need them. 
Thanks a lot, I mentioned it in the title bevcause I don't know the first thing about making GUI so I just wanted to find out where I should start
Basic node tree where a Comment can hold a collection of Comment? class Comment { public Collection&lt;Comment&gt; Replies { get; } = new Collection&lt;Comment&gt;(); } &lt;HierarchicalDataTemplate DataType="{x:Type local:Comment}" ItemsSource="{Binding Replies}"&gt; &lt;TextBlock Text="{Binding Text}" /&gt; &lt;/HierarchicalDataTemplate&gt;
what is this hierarchical template? I'm trying to implement this on the web. asp net core mvc 
Oh nevermind. I know nothing about asp.net
Why would you not want it to appear in the tray? How would you configure it? I get what you're trying to do - I use an app to catch a hotkey for me to swap sound output device quickly, but I can access it from the tray. Anything less would just be... unusable and very close to what I'd consider malware.
Ncrunch is my tool of choice 
WinForms isn’t really outdated at all. It can do most of the things people need and is a lot easier to grasp than WPF. I would always recommend people look into it first if they want to do something simple. XAML takes time to get into and may take away from actually learning other things. But of course getting into WPF and XAML is the way to go when doing anything more ambitious. Comparing it to browsers is pointless. WinForms can handle almost anything in regular app development. This is more of a comparison between doing a site with Bootstrap versus completely custom UI. Both work just fine, the first just looks a bit more “regular.”
How is it easier to grasp? You can treat WPF just like Winforms in the beginning. It only looks different because the xaml window is open by default. Close it and you got yourself the basic drag-drop experience, properties view on the side and hooking up events up in code-behind.
All layout containers are more complex. Sure you can just shove things in there, but it will explode much quicker than when one just puts stuff on a form. That’s what I’ve seen all the time with people who try to do things with WPF. Grid definitions. It’s all very superfluous compared to WinForms. Doing menus properly, have to handle Commands and whatnot. There’s a lot. 
Things are more complex behind the scenes, but it doesn't really bother the user about it. The designer has gotten really good. Using the basic Grid, creating columns, selecting the entire column and using the Properties view is very easy now. Document outline view shows the entire layout in a selectable treeview. Winforms is the very definition of "shoving things in there," but it's behind the partial class so the user isn't aware how much of a mess it is.
Yes, I write definitions by hand. Why wouldn’t I? It’s much faster than clicking around. Even with a designer they need to know a lot of things. How do I get a list view with stack panels in it to fill the space horizontally? Even people using WPF a lot have problems with that if they don’t remember how this specific combination or that works. And as I said, just getting a drop down to render properly needs templates etc and a lot more work. So why would anyone by default go for a more complex thing, even with a good designer, if they can get the work done a lot faster and easier with WinForms? It’s supported everywhere just fine. How does one do templates in the designer? Haven’t tried it actually in a long time because as I said for me it’s cumbersome to do that. Does it tell a person “hey you just put a drop down here, which property should I show?” or does the user need to know they need to create a template? Will check it out when I’m at my computer to see how easy it is if you say people don’t need XAML and can just poke around in the designer. 
You're starting to mention a lot of advanced concepts now. This is the part where I say *at least you're able to.* That's the very point of not being stuck. Which you would be in Winforms. &amp;#x200B; How would you get the work done a lot faster and easier in Winforms with a custom template for the dropdown? Is that even possible? From my perspective you're comparing WPF's advanced features with Winforms out-of-the-box solutions, as if being able to dramatically change things in WPF is a bad thing. It doesn't make sense. &gt;Yes, I write definitions by hand. Why wouldn’t I? It’s much faster than clicking around. I used to think that too. If you have a pluralsight subscription I'd recommend [WPF Productivity Playbook](https://app.pluralsight.com/library/courses/wpf-productivity-playbook/table-of-contents)
Advanced concept when I want to show a drop down? That’s a basic control. I’m not talking about custom templates. Just having a drop down show items. WPF requires a custom template. WinForm requires you say which property you want. As I said, WPF is the only option when you need advanced stuff. But this is about when you don’t. You just want a quick UI. You just want to shove a Control on the form and go for it. Not write templates to even get the item to show up as something else than Namespace.Class. That’s what I mean properly. And I can have a look at that course but I’m sure they won’t have anything there which would make my hands move faster around with a mouse *and* write numbers rather than just writing numbers without moving my hands between mouse and keyboard. 
I can't remember if I have asked this but is it possible to build Avalonia app on Windows and compile it self-contained (no framework install) for Mac from the Windows machine?
&gt; WPF requires a custom template No it doesn't. Learn your tools.
Hmmm, didn't think of it that way. In light of that, yeah I could get behind muntoo's format.
I would disagree and say that Typescript either won or is at least still a contender.
Where are the rules posted?
&gt;WPF requires a custom template No it doesn't. Learn your tools. You've got DisplayMemberPath property to say which property to display, while the SelectedItem still holds the entire object. Or you can use SelectedValuePath so that you can display for example the [Employee.Name](https://Employee.Name) property value, but the SelectedValue is maybe the [Employee.Id](https://Employee.Id) property value, which can be used by some other control to fetch data by id from some data source. None of these things require a template of any sort. You can write these things in the Property view, like you would any other control settings in Winforms.
Answering my own question - eventually found another workaround: var dtNormalized = TimeZone.CurrentTimeZone.ToLocalTime(model.Date); *(let me know what you think)*
https://www.reddit.com/r/csharp/about/rules
TLDR: don't be a moron. I have several AHK scripts that run silently on my computer. The just make life more convenient. They do anything between doing actions on the strings i've selected, to running programs with initial arguments, configure settings, and manipulating the size and position of other program windows. I run them silent because i don't want them to clutter my task bar or system tray. They permanently run and i never need to interact with them other than how i've designed them, so why should i clutter my user experience just so i'm not considered a r/masterhacker I use a program that converts the ahk to an exe but i've recently realized that the program in just an interpreter than runs the script. And i don't quite like this because it makes me feel like a kiddie-scripter.
The reason Winforms might seem easier is mostly ignorance. A lot of assumptions are made that you must write XAML by hand. And I've also heard sentiments that the auto-generated code is horrible. From my experience this is false. Save for a few minor examples, like the code generated for sampledata, the basic generated code from dragging and dropping controls in the designer is the same code you'd be writing by hand. &amp;#x200B; Advanced features like templates and styles must be written by hand, but more often than not you can create copies of existing styles and then just tweak certain values. Again, this is more advanced. This wouldn't even be possible in Winforms.
So would i. For a game hack it seems that you have to really dig down in to how a computer function at a low level, which ahk is not designed to do.
Didn't they just rename it Razor Components, and release it with asp.net core 3?
MSDN Docs are some of the best docs online. So go read them. 
&gt; Should they break the terms of use on a service, it will be up to them to enforce. I've already felt that by Google. I once wrote a tool that would search for my own comments on their services and delete them - i wanted to clear up my history because i started to awaken to how easy it is to collect information about a person and create an image of them. It spooked me a little. Previous to this, i used libraries that took care of rate limits. Anyway, Google didn't appreciate that i had exceeded the rate limits by so much and for so long, so they just banned my account. :') Lesson learnt the hard way. But yeah, i just like a clean user experience. If i can reduce visual clutter, i will. The ahk scripts that i want to convert to c# programs just make my own life easier and stream lined. Run programs with initial arguments, manipulate the size and position of other program windows, configure settings, and perform actions on selected strings. I've always felt like ahk was a little too kiddie-script for my liking and now i want to take action on it.
Because i like a clean user experience. I have about half a dozen of these silent programs i've made in ahk. I've used them for several years and they're only for my consumption. I don't need to interact with them other than using the registered hotkeys, so why should i clutter up my user experience just so i'm not considered as r/masterhacker. 
I thought i had read that windows services won't allow you to handle programs windows nor will it allow you to register hotkeys because these are part of the user environment(1), where a windows service is a workstation environment(1). (1) - I don't think environment is the technical term, but i hope you understand why i'm trying to convey.
Right. "Clean user experience" for me includes the ability to easily turn it off. Tray items can be grouped in Windows, they don't all have to be visible. The little arrow next to the volume icon is pretty clean.
Keep in mind that these functions are not lazy.
&gt; Tray items can be grouped in Windows, they don't all have to be visible. The little arrow next to the volume icon is pretty clean. &gt; I can exit the program or open the gui from there and configure the hotkeys easily. That's user experience. I think you're forgetting what i've said. These run 99.99999999% of the time. The only time they're ever turned off is when i've made an update to how they function and they're replaced seconds later - this has only occurred a few times. What you propose in this case is unnecessary clutter. So from what you've said, i get the impression you believe that every process that runs on your machine should have an icon in the system tray so you can interact with it? If not, then that's a contradictive opinion.
&gt; i get the impression you believe that every process that runs on your machine should have an icon I think most processes can run as services in the background. But processes that can be configured with things like hotkeys deserve a way to access them to be configured, and certainly a way to easily be turned off if something isn't working right or isn't necessary at that very moment.
what about `ListView`?
&gt;i get the impression you believe that every process that runs on your machine should have an icon I think most processes can run as services in the background. But processes that can be configured with things like hotkeys deserve a way to access them to be configured, and certainly a way to easily be turned off if something isn't working right or isn't necessary at that very moment. You're making Windows behave differently on key presses, don't call it clean user experience by making it difficult to disable or change that feature.
&gt; If not, then that's a contradictive opinion. Way to be a twat about being too lazy to create a config gui. Excuses.
It's worth talking about "BDD without sodding cucumbers" in this context too. Writing tests of behaviours agreed by the stake holders makes TDD much tighter. You immediately have a tangible goal rather than an abstract one :)
You can do this if you target a .NET Framework application using WinForms or WPF. You'll want to look at the various ways that you can startup an application in Windows and pick one that runs on login in userspace (Maybe the User START reg key? I can't remember). Sometimes getting the application to show a tray icon without flashing a window first is kind of annoying (I think WinForms requires a 'main window'?), and you'll have some issues with screen focus on your modals (if you use any); sometimes they won't grab user focus when they appear and just sit deactivated in the tray. You'll also need to pinvoke to register for keypresses...I don't think .NET has the ability to capture key presses outside of the app itself (e.g. global key presses). I've done this once before. It takes a bit to setup, but works well. I used to scan the clipboard and scan for certain port availability if the clipboard looked like an IP address and then popup a summary of the scan (nothing nefarious, I was in a tech support role at the time).
So, Two parts. Specs and then tests. The fun one first. &amp;#x200B; Right, so specs. Specs suck. They're the rantings of imbeciles scratched out between doing "actual work". Assume the spec is crap from minute one. If you're writing a test and can't figure out what to call it, because the spec sucks, then the spec sucks and you have used the Test Driven Imbecile Identifier to be able to point this out. There are at least a billion other ways to try and shift problems up front, including good old fashioned flow charts, but this is a great way to tease out idiocy. &amp;#x200B; Now tests. TDD is test first, TAD is test after. TDD is stupid because no one tested whether the middle D should have been an F. So they get an F. &amp;#x200B; TDD is a way to plot a course through the code you need to write. There's another \*DD called BDD (Behaviour Driven Development) which is a great counterpart to TDD because the first test you write is one which describes the new behaviour you agreed with the stake holders ("John's pass to be disabled 1 day before until 1 day after the xmas party"). &amp;#x200B; So you write the test. It will fail because you haven't filled in the code yet, and that's your starting point. You then edge outwards from there. There are two approaches to this, I'm not looking for a fight, so let's just say it's tricky either way and be done. &amp;#x200B; &amp;#x200B; &amp;#x200B;
My fave comment. I've probably said this a million times, but it's worth reiterating: &amp;#x200B; Testing is hard, probably harder than writing the code you're testing.
is it good? I'm sure I have a personal license for it, but can't actually remember using it. .. Just checked, I do have a license. From 2014 :/ WTF was I doing in 2014? 
No, Razor components are server side rendered pages connected with SignalR pretty much. Blazor will be fully client side, or at least that's the plan afaik.
Nice! Quick question for you, does programming in Unity using C# actually help with learning C# for non game development related applications? Would be an awesome way to learn.
It's conceptually the same. Recursively render a template/partial until you have no nested comment anymore.
You okay? You wrote several replies to my last comment and deleted them all. You must have spent a good 20 minutes or so on it. Is there a reason why you're so rattled by this? Or is there something else bothering you that you'd like to get off your chest by sharing it with an internet stranger? Either way there is no bad feelings from me. I understand what you're saying and I agree with it for programs made to be consumed by others. But these programs are for me, i know exactly what they're called, every line of code, what triggers them, were they sit on my drive, and how they start. They very rarely get edited. I've had my oldest ahk script for over 8 years and I haven't altered it in the slightest. So having some form of GUI interface and icon is unnecessary for me with these programs - and so it adds clutter with zero functionality. If I need to stop them, I can terminate them in task manager. Okay it's not a clean termination but they don't write data, so I won't have to deal with data loss, and I'm happy with that. I hide every system tray icon unless I need to interact with it on a regular basis, and so I only have about 5 system try icons. I also hide my desktop icons because I think they become an unsorted mess of clutter. I also don't pin any application to the task bar because again, it feels like clutter to me.
Ah good to know it's confusing.
I get riled up when I see sub-optimal shit being good enough because it's slightly less sub-optimal than the previous thing. The amount of crap I had to clean up after the old-guard took their pension in crazy. Also so many small tools or services we just had to scrap even though we were reliant on them, because they were made by some older wizard who had complete control personally but no documentation. It's annoying, because then I had to manually do the work, while figuring out what the tool did and how. Twice the effort, less results. Not a fan. Fine, if it's for your personal use. I hope you make sure you don't accidentally make workplace processes reliant on your ad-hoc solutions.
Awesome explanation here: https://stackoverflow.com/questions/4660142/what-is-a-nullreferenceexception-a
Keep practicing, keep writing code, and you will develop habits which help avoid the possibility of null reference exceptions. When you're using 3rd party libraries, there's a higher risk of null refs since you don't always know how a method will react to certain conditions. Maybe it will return a null, maybe it will throw an exception for you to catch (or throw). In your own code, be mindful of your return values and consider throwing more meaningful exceptions if returning a null isn't helpful or meaningful. I use ReSharper and really appreciate the null reference warnings it provides you as you're coding. If there's the possibility of accessing a null reference, it'll give you a helpful squiggle which will inspire you to use a null conditional operator or null coalescing operator or other strategy to ensure your code treats the object reference safely.
Sounds like my boss. /s
I think you got your logic backwards. 
can you show some code? how do i keep checking till there's no nested comment
Speed of development time is not ignorance, so I find your remark offense, and 100% inaccurate. &amp;#x200B; When I am paid by the hour I will write in WPF if my client wants to pay me to, but if they say 'I need an app that does XYZ, and I will pay ABC amount of money, I will make 3 times per hour going the Windows Forms route. &amp;#x200B; Now you may not be able to find a job because most of those died off in 2008 and I had to adapt or learn how to pretend to be nice to people and make Mocha Frappaccinos. &amp;#x200B; Just making sure anyone reading knows all the facts, that WPF is a horrible technology to me, simply because of XAML. &amp;#x200B; It takes the speed of web development, which makes snails mating look fast, and then applies that to Windows desktop development. &amp;#x200B; If you had learned Windows Forms first, and then realize how long it takes to do things in WPF, you would feel differently about it. &amp;#x200B; &amp;#x200B;
Hiya thanks for that, have you got a personal favourite resource on how to make exceptions? I wasn't really taught it properly in my first programming course and I honestly feel like a dog in a laboratory when I try.
Thanks very much, I'll be sure to read that after my exam :)
Well, ideally you should check for null if there's a legitimate risk/reason for something to be null. So you might do... if (thing == null) { doSomething();} Or you might use the null conditional operator when assigning a value - the result will be null if the reference is null, or the value behind the reference if it's not... var name = person?.Name You can do a try/catch but in general you should avoid exceptions in the first place whenever possible/practical.
Tldr; test for null: if(myvar !== null ) { //Myvar won't throw an exception } else { // Something went wrong with myvar, handle accordingly. }
 React Hooks are fucking great. Sorry that you never learned OOP, but it is superior. 
Well if there was any doubt that Bridge.Net served a purpose...check out Blazor (c# in the Browser) on WASM.
I’ve got no clue where you got all that crap from but no, just no, developping in wpf is wayyyy faster than in winforms, no comparison possible except for the most trivial hello world type of apps.
Getting a dropdown to render doesn’t need templates at all... Also if you want (you shouldn’t, thise layout controls are great, good luck with winform resizing on’different DPI and formats otherwise) you can just use a canvas in WPF and drop stuff where you want as with winform, just not being stuck in a legacy tech that will make any nontrivial app a complete pain down the road. 
I started learning C# through Unity originally. The main difference between it and “stock” C# is that Unity uses the Mono runtime and not Microsoft’s .NET runtime. For most non-game and non-mobile development, you’d use .NET. So there’s several namespaces and libraries that are used every day by .NET developers that you don’t have in Unity. Unity is good for learning the general syntax and structure of C#, though.
And, although the syntax is correct, this is probably java, not c#.
WPF for desktop-apps and Unity for Game-Dev
Why don't you try to find Files with directory.EnumerateFiles to get all Files in the directory and their subdirectorys? Best Regards
I never did professional-level desktop applications but only web development so I have to ask: WPF is MVC-based isn’t it? WinForms is not?
Are you talking about text color and background color? If you’re talking about the entire console color itself, I think that’s usually a system setting. Not sure you can change that.
Just two come to mind, * [CLR via C# ](https://www.microsoftpressstore.com/store/clr-via-c-sharp-9780735668751) by Jeffrey Richter * [C# in Depth](https://www.manning.com/books/c-sharp-in-depth) by John Skeet
It's actually very nice and easy to read when formatted like this!
I was talking about the colour of the window around the console, which I have been struggling to find a way to change.
To try and clarify for my own sake, will each client then require two threads? First thread would be the sending information thread (current working thread for communicating with server), but the second thread would be for the event listener on the server? I could, then, have an event like "data received" and act on that? If that's the case, how would I send to all clients? I think I'm a bit out of my league if that's not what you meant LOL
mvc is a design pattern, you can implement mvc on both. WPF was designed with MVVM in mind, but you can adapt practically any design pattern.
Whats wrong with adding ISerializable
Or UWP for desktop
Where is your wordDoc variable defined? It looks like you're overwriting the instance each time through the loop and then finally only releasing the last instance that was assigned. &amp;#x200B; I think you need to define and release your wordDoc inside the loop.
That’s clear. It’s just if you work against the intended pattern/framework nothing good will come out. IIRC (I’s like more than five years ago and I never really actively worked with it) in winforms “View” and “Controller” (of a form) were basically just separated by introducing a partial class located in the same folder but separated into another file “&lt;Form&gt;.Designer.cs” or similar. Since it was autogenerated from the vs forms designer all changes to it were pointless. That means the view was actively adjusted from the “Controller”-file and not bound to some model state. Well at least I have never seen a form model or some form model binding. I think there were some ideas of model/view for objects like table but disabling a button based on some condition was typically not made in the MVC way. Or maybe I missed something. So I guess WPF is clear but WinForms doesn’t support model binding for all it’s components, does it?
Check out some of the videos on channel 9. They have some stuff on windows game making and unity 
My +1 for winforms: It's supported by mono, making it a cross-platform UI option. Other options/pros/cons exist, but it is what it is.
CLR via C# by Jeffrey Richter
Yes it is possible. Just use .net core, then publish targeting macos platform. 
Thanks, I'll look into those books. C# in depth looks promising.
Great advice. 
Whats the issue?
Yes, I was assuming that he was running this on his own machine, so privilege wasn't an issue. (Or rather an issue that can be fixed by changing context etc) 
After watching development of pretty big JS project from the side I am no longer sure that JS talent is easier to find. There are react devs, angular devs, "other" devs and then there are devs that say that they know stuff when actually they do not. It seems that JS developer using "another" framework is as useful as developer who knows zero Javascript. 
Would that be possible for WPF/UWP one day or is there something specific about Winforms that made it possible to be cross platform?
...Running Windows 10
I don't generally see non-Microsoft applications using TraceSource/EventSource, except maybe things targeted to Enterprise customers (e.g. virus scanning, PC management, etc.). .NET Core doesn't have good support for it, either, although that [will be improved](https://github.com/dotnet/corefx/issues/31428) in 3.0. Once upon a time Log4Net was one of the more popular logging frameworks, but today I see Serilog recommended most often.
For the most part it is the extremely dynamic type system that bothers. You never know the actual type you are dealing with as basically everything can get extended on the fly. This might be an advantage for really small applications. But for bigger enterprise level application this is a nightmare. You can do very weird stuff with those types (e.g. [https://blog.mgechev.com/2013/02/22/javascript-the-weird-parts/](https://blog.mgechev.com/2013/02/22/javascript-the-weird-parts/) ). Also JavaScript was never designed for what it has become now.
System.Diagnostics.Tracing.EventSource was recommended in 2013. At this point I do not take seriously any .net recommendations that are older than 2017. &amp;#x200B; In my projects I use Serilog which works well for me. It is quite popular, has integrations that I need and it can log data in JSON format thus making it searchable with proper tools. &amp;#x200B;
That's awesome.
I don't really see a reason to use third-party instead of TraceSource. More often than not these kinds of recommendations and trends comes simply from the fact that people aren't aware that it already exists in .NET. It's a very typical situation for other things I've noticed.
Well, put it this way then: It would be much easier to find devs for front end js frameworks that are popular today than an obscure c# to js framework on the verge of collapsing. I’d personally be okay hiring someone knowledgeable on one JS framework, but interested in the framework I use given the onboarding time needed wasn’t a problem for the immediate project he would be on. But if a candidate had no JS experience and he’s expected to be a senior level compensation; It’s not likely I would not consider the person. 
Yes, its parsing C#. The built their own compiler to do this job which gets shipped along with the nuget package for bridge.
You basically have to make a borderless window and implement your own borders and window controls
Is that wh? I’ve been wondering. I work in a codebase that was started in VB, but is now being written in and converted to c#. A lot of the original/oldest c# has String.whatever Int32 Boolean etc And a lot of catch (Exception ex) { // do stuff throw ex; } Not sure if that was ever good practice even in VB though, I know it’s not now
Depends on your drive/interests. I’ve been doing this for 18 years and could go nonstop and still learn new things. When I was starting out I was doing pet projects and dumping a huge amount of time into development and learning every day (10-16 hour days). There has been some years where I literally walk away from the job and never open a computer till the next work day. 
I don't really see a reason to use third-party instead of TraceSource. More often than not these kinds of recommendations and trends comes simply from the fact that people aren't aware that it already exists in .NET It's a very typical situation for other things I've noticed. If the library isn't referenced by default when you create a new console application then some people assume it doesn't exist and the word "ecosystem" comes up a lot.
 public class Comment { public string Text { get; set; } public Comment[] Replies { get; set; } = new Comment[0]; } &amp;#x200B;
Would be nice of Microsoft to add a method for it
Due to the lack of experienced front end professionals on the market we have to stick with less experienced people that only know drag'n'drop.
wow 10-16 hours a day i don't have that time for it lol xd &amp;#x200B; so if i do one hour a day that's not really good enough time to get good at it? &amp;#x200B; ore is that ok?
+1 to this. Swirling with extensions for AWS and Azure are game changing when you need to push your logs out and get reliable storage and rich searching 
Don't waste your time or energy with books. If you know Java... Congratulations, you already know C#! A few minor syntax changes here and there, but by and large the key to success is learning by playing with various libraries. I find it very unlikely that you'll struggle with C# if you are coming from Java. Have fun, coding!
Really depends on how well you retain/apply it. Hours put in doesn’t always equate to skill learned. I’m afraid if your looking for an easy answer for this question I just can’t see one. Are you trying to get into the field or a specific development role? What is the goal here? 
On the other hand, I'm happy that the .NET world is no longer blind to anything that isn't written by a Microsoft developer.
well, winforms uses gdi but wpf/uwp use directx. mono re-implemented gdi for the other platforms, but doing so with directx would be... less trivial. would be nifty to see mono's winforms make it to .net core 3, so at least that bit would be cross platform as well. but then... it's old stuff, heh. oh well. :|
This is also missing the very thing that makes it difficult to choose between TraceSource and EventSource: defining TraceListeners in the config file. Serilog suffers from the same configuration model as EventSource; it's done in code which means turning logging on or off, sending it to a different file or format requires a new compile and deploy. If I had to choose between Serilog and EventSource I'd just pick EventSource as it's built-in and logs structured data.
no i don't wanna have a easy answer :) &amp;#x200B; my goal atm is learn the language 
Comment view model defined as: public class CommentViewModel { public string Text { get; set; } public Comment[] Replies { get; set; } = new Comment[0]; } Add a partial view named "\_Comment" that looks something like: @model CommentViewModel &lt;div class="comment"&gt; &lt;p class="comment-text"&gt;@Model.Text&lt;/p&gt; @if (Model.Comments.Length &gt; 0) { &lt;div class="replies"&gt; @foreach (var comment in Model.Replies) { &lt;partial name="_Comment" model="@reply" /&gt; } &lt;/div&gt; } &lt;/div&gt; That will render a comment, then any replies in the comment recursively (as the partial is rendering each reply using the `_Comment` partial itself again. Assuming you have a view model that contains a collection of comments you'd then render those in the view using something like: &lt;div class="comments"&gt; @foreach (var comment in Model.Comments) { &lt;partial name="_Comment" model="@comment" /&gt; } @if (Model.Comments.Count == 0) { &lt;div class="no-comment"&gt;No comments yet...&lt;/div&gt; } &lt;/div&gt; As you can see, this renders each top-level comment using the `_Comment` partial, and as that partial renders any replies for each comment using the same partial you end up rendering the entire comment tree. You may have more details associated with each comment but all you need to do to update all comments (including replies) is just edit the `_Comment` partial where it renders the comment itself and that will be reflected in all top-level comments and all replies. For example: @model CommentViewModel &lt;div class="comment"&gt; &lt;p class="comment-text"&gt;@Model.Text&lt;/p&gt; &lt;p class="comment-date"&gt;@Model.DateCreated.ToString("d")&lt;/p&gt; @if (Model.Comments.Length &gt; 0) { &lt;div class="replies"&gt; @foreach (var comment in Model.Replies) { &lt;partial name="_Comment" model="@reply" /&gt; } &lt;/div&gt; } &lt;/div&gt; &amp;#x200B;
Maybe. It feels like a bit of a shame to just drop all these robust libraries made by entire research teams, available for free, just web devs don't like Microsoft.
Look at puluralsite and go crazy 
To me, the best way to learn anything is to pick a project and complete it. Now, you should try to pick something reasonable, like maybe a simple website, not a AAA-level video game. If you dedicate yourself to figuring out how to complete this project, even if it is step-by-step following a tutorial, that's fine. You will learn so much from this process. Do not think about it like time. If you spend exactly one hour a day programming, I have no idea how you will keep it fresh. If you are dedicated to a project, you should feel motivated to finish it (although temporary discouragement is natural) and will take whatever time per day you need. 
Exactly 3 hours, 23 minutes and 47 seconds as specified in RFC 8140. Anything more or less and there's no point.
thx for you're opinion &amp;#x200B; on my work day i will try do one hours ore more practice and when i not working weekend ore holiday i do more :) &amp;#x200B; it is not always easy to make time for doing stuff on a work week :p
So a null reference exception is generated, when you have a reference type which has the value of 'null' - This is a special value which is used to signify that the value doesn't exist - and you try and use it. &amp;#x200B; `string str = null;` `str.Length();` &amp;#x200B; for example. How to avoid it; just some thoughts: * Be aware reference types might be null. * Check return types from functions which might return null. * Check input into functions, which might be provided null. * Use things such as ?? to provide default values. Probably many many more things to think about. &amp;#x200B;
I think the point it that the border styling belongs to the parent container (i.e. the OS UI itself). You can alter the styling of the border by altering the styling of the current windows theme.
A common convention is to number the files, e.g.: private string GetNewFullPath(string basePath) { int i = 1; var fullPath = $"{basePath}.pdf"; while(File.Exists(fullPath) { i++; fullPath = $"{basePath}{i}.pdf"; } return fullPath; } Also, it's typically safer to use `Path.Combine()` than to concatenate path parts, but since you're using forward slashes on Windows, I'm not sure what you'd get as a result.
Yeah I was thinking that checking things more often would be a good idea. I'm more of a theory guy if I'm honest, so I find the idea much more important that the fiddly execution in code. Which is why my weakness is focusing on the idea rather than the implementation. These seems like very useable tips, thanks a lot :)
C# is the right choice. MVC design pattern is not the right choice to build your entire application. Everyone telling you to use [ASP.NET](https://ASP.NET) MVC or [ASP.NET](https://ASP.NET) Core MVC for web apps is doing you both a favor and a disservice. I will assume you do not want your View tightly coupled. I encourage you to consider C# for the Enterprise language, but I would also encourage you to be very cautious and fully understand the differences between the various design patterns for your given project(s). The MVVM design pattern is, as far as I can see, **the way** forward in application development. Decoupling your view and having multiple projects (for each view type) is easily accomplished in an MVVM-design pattern leveraging an MVC-based API will give you ultimate freedom to develop an independent web application, a separate desktop application, and even iOS/Android applications: all without having to touch your back-end. It also gives you, in my personal opinion, the best options for any future integrations you may need. &amp;#x200B;
thanks, it's a bit confusing at the moment. will try to wrap my head around it tomorrow 
Not a thing. It’s just more code that you have to write, where you can get the same effect with an attribute. With the ISerializable interface, you have to write the serialization logic as key-value pairs. With the attributes, you just decorate your classes, and boom.
utc
The first part to focus on is the \`CommentViewModel\` which contains a collection of \`CommentViewModel\`, so for each comment in that collection will also contain a collection of \`CommentViewModel\` and each of those will contain a collection of \`CommentViewModel\` and so on, that gives you the tree structure. &amp;#x200B; Second, focus on that \`\_Comment\` partial, that renders one of those \`CommentViewModel\` and then goes through each object in that comment's collection and renders that using a \`\_Comment\` partial, which will will render that child comment and then go through each object in that child comment's collection and render that object, and so on. &amp;#x200B; Because the partial is just iterating over children at each level you don't need to worry about special stop conditions, it'll just keep going until all children have been rendered. &amp;#x200B; If you're not clear on trees generally and how they work it's worth looking up info on depth-first and breadth-first operations. In this case it's best to think of what's happening with the rendering as a depth-first operation and it might be easier to figure out what's happening from there.
Approaching 2020 always assume Win10. Anything else is legacy at that point.
There is no correct choice. Use what you suits your fancy. &amp;#x200B; &gt; Such a "simple" concept as logging quickly becomes quite overwhelming This is why people use third-party libraries. It's not out of need, but out of ease of use.
Yep; it’s about checking at the right points to avoid overly cluttered code. 
do i need to have separate tables for parentcomments and replies? because right now I have all of them in one table my comment model looks like this. class comment { public int id public string text public int parentCommentId public applicationuser user }
If you are looking to make an actual application that works cross-platform, I'd recommend [Qml.Net](https://github.com/qmlnet/qmlnet). Disclaimer: I'm the author.
Pretty dope, I'll check it out
Which is why I'm in favor of TraceSource. It's just .TraceInformation or TraceData, etc Simple, and then I can pick and choose how those logs are handled by listeners in the config file. I like the idea of being able to deploy and then turn decide how log messages are handled after the fact.
Superficially, you're creating multiple Microsoft.Office.Interop.Word.Document objects but only calling `Marshal.ReleaseComObject` on the last one. Try moving that line into the foreach statement.
Yes, VB programmers seem to think this kind of thing is a good idea.
Been a while since a last post, so this is just letting people know I still work on it. Pretty decent release, lots of cleanup, lots of performance enhancements, some better error handling on shutdown etc. Hope you all enjoy :)
To each their own, but I have a full hard drive of C# Win Forms controls and examples to go by. Now it is true I have developed 20 or 30 times as much Win Forms as I have WPF, and I have 20 years of brain experience of Win Forms. I have a Chess client I haven't had time to port to Git Hub called Engine Wars, and I admit I can make the client look prettier in WPF. My biggest turn off with WPF was some 'Intellectual Type', though changing Control.Visible = true or false to Control.Visibility = Visibility.Hidden or Visibility.Visible My point is, they new existing Windows developers were going to be using this, and I am all for an Enumeration if one is applicable like a Color Enum, but Visible would have been just fine with true or false, and that is just one control name I am ginving as an example. I don't get paid extra to go learn something new, so when something works like Control.Visible as far back as Visual Basic 3, to introduce something less efficient as an improvement probably turned me off to it. You keep writing in WPF, and I will keep writing in Win Forms, and we get a long just fine if you don't say someone else is stupid for managing their own resources better. Like my wood shop teacher that had a finger missing and always preached about safety used to say 'You better go to college son', oh wait, not that one. He said, 'The right tool, for the right job'. 
Not necessarily, you can store them all in a single table, in fact that's often helpful so you know that all comments are all storing the same information. Where you may begin to see problems is loading them all efficiently. If you only store the parent comment Ids then you have to load the parents, then their children, then their children's children and so on. Assuming you also store some kind of Id of the record the comments relate to (e.g. `PostId`) then you may just be able to load all comments (which will include replies) with that `PostId`. SELECT * FROM Comments WHERE PostId = @PostId Alternatively, you can store both the `ParentCommentId` and a `RootCommentId`. That allows you to load all replies, child replies, grandchild replies, etc for a single root comment. SELECT * FROM Comments WHERE RootCommentId = @CommentId What works best will depend on how you want to load comments. You may not want to load them all in one go, so you need to figure out what's best for you there and from that determine what you need to store and how you need to query them. Once you have a set of comments in memory though you can build up that tree of view models using something similar to: // for performance we're assuming that comments here contains ALL applicable comments from the db, not just top-level comments public ICollection&lt;CommentViewModel&gt; BuildComments(IEnumerable&lt;Comment&gt; comments) { var topLevelComments = new List&lt;CommentViewModel&gt;(); var commentViewModelsById = new Dictionary&lt;int, CommentViewModel&gt;(); // store view models by Id as well for fast lookup later when building the tree /* * this assumes there will be no child with an Id less than it's parent. * If that assumption is true this ensures parent comments are always converted to view models before their children. * If it's it's not then you need to do this another way */ foreach (var comment in comments.OrderBy(c =&gt; c.ParentCommentId).ThenBy(c =&gt; c.Id)) { var viewModel = new CommentViewModel { Text = comment.Text }; commentViewModelsById[comment.Id] = viewModel; if (viewModel.ParentCommentId == null) { // doesn't have a parent so add it as a top-level (root) comment topLevelComments.Add(viewModel); } else if (commentViewModelsById.TryGetValue(viewModel.ParentCommentId.Value, out var parentViewModel)) { // has a parent so look that parent up fast and add this to its replies // this requires Replies to be something that supports adding, i.e. not an array parentViewModel.Replies.Add(viewModel); } else { // child has a parent but we've not parsed it, it either wasn't loaded or its Id is greater than the child's throw new Exception($"Parent comment '{viewModel.ParentCommentId}' not found."); } } return topLevelComments; } Hopefully it's clear how that example works, it's just one way of doing it, there are many others depending on what data you already have loaded into memory, how it's already structured, etc. For example if Comment has a collection of child comments (and loading that collection doesn't cause another db hit - or you're happy with the performance even if it does) then you could do something like: public ICollection&lt;CommentViewModel&gt; BuildComments(IEnumerable&lt;Comment&gt; comments) { var viewModels = new List&lt;CommentViewModel&gt;(); foreach (var comment in comments) { viewModels.Add(new CommentViewModel { Text = comment.Text, Replies = BuildComments(comment.Children), // assumes a collection of Comment on the comment representing replies, assumes Replies is an ICollection&lt;CommentViewModel&gt; }); } return viewModels; } You'll see that's more concise, but you need to be mindful of the performance of accessing that `Children` collection, in EntityFramework for example you may end up running a query for each comment which could be very expensive in terms of performance.
Wow, i didn't expect to get any replies, anyway i fixed most issues except this: &amp;#x200B; \-If you create a word document, then copy paste that document. then run this script... it will throw error at wordDoc = app.Documents.Open(fixedPath); &amp;#x200B; saying file wasnt found, but it's there. this only happens on copy pasted word docs ... 
I have to agree. Hiring any Javascript developer is easier than hiring C# developer who has experience with [Bridge.NET](https://Bridge.NET) :) It is like hiring any construction worker vs hiring underwater welder. 
Might be able to configure deserializer to use NodaTime. 
haha, it's clearer now, I think I'll go with the 2nd approach which is more concise, when i understand it well i can now modify the logic/query for any performance issues. &gt;foreach (var comment in comments) { viewModels.Add(new CommentViewModel { Text = comment.Text, Replies = BuildComments(comment.Children), this buildComments function will also act like a recursive function to build comments of children comments in the reply right? 
Removed: Rule 4. They are similar in that they are both Windows-based GUI frameworks. But they differ in their implementation and toolset. Most significantly, WPF's GUI and data binding model use more modern methods (XAML, MVVM). If starting a new project, WPF is generally preferred. It's more modern, tends to have more support, and is relatively similar to UWP if you plan to shift there. You can still make WinForms and it'll run fine, it's just pretty much obsoleted now. Though for a fresh beginner, it might be a bit simpler to make a rudimentary program in.
Yup, that's the recursive option, keep an eye on performance though as using Entity Framework you're very likely to end up running way more queries than you want to 😉
Removed: Rule 3. Perhaps /r/learnprogramming, /r/cscareerquestions, or /r/dotnet would be better subreddits.
But you stand on legacy learning, it’s a better tool for you only because you know it and there’s nothing wrong with that, however suggesting a legacy and overwhelmingly considered inferior tool to a newcomer just because you know it and have some qualms about the new tool that you simply didn’t take the time to learn makes no sense. It’s not a good tool to learn today if you don’t know it and it only exists as a legacy tool. Also the reason visible is 3 state is to differ between hidden and collapsed, which is critical with the layout wpf offers and of course doesn’t make any sense in the context of absolutely positioned controls. It’s not some snob who made it that way just to make it that way.
Removed: Rule 3, Rule 7, spam, possibly Rule 6.
thanks so much. performance won't be a big deal yet, it's just something I'm building for practice and it's not going to end up in production. I've always wondered how reddit implement this stuff , I guess it's the same kind of approach for twitter threads also
Trace listeners in the config file? That does not look simple at all. 
That's reassuring to know, thanks. I've had a quick overview of C#, and there is indeed alot that I recognise already, I just didn't want to labour the learning process and make it longer than it needed to be.
No worries, this is a pretty basic structure that gets the job done and a lot of sites may use something similar but with more infrastructure built around it for performance. For example, they may have levels of caching, they may only load some comments initially then load others on demand when you click expand links, or scroll enough, etc. It's things like that that dictate what you need to store against each comment. If you want to only display the top level comments initally and then when you expand one it loads all the replies for that comment (and the reply's replies and so on) then maybe it makes sense to store that RootCommentId, other loading strategies may mean it makes sense to save other Ids, its all about balancing the amount of data vs the performance you want when loading.
This isn't correct -- I'm not sure if it's actually a separate nuget package or not, but we configure serilog from appsettings.json [just fine](https://github.com/serilog/serilog-settings-configuration).
It really is. You use the TraceSouce like any other logger. You write code like TraceEvent where appropriate. That's the amount of effort I'd ask from the developer. &amp;#x200B; Then he ships the app/internal tool. Then I can come in later and think "I want all the verbose messages into this file over here." - instead of having to ask the dev to open the source code and add this to the build, recompile and deploy a new version, I can just go into the .config file and in the TraceSource add a new listener. By all the talk about json and config files the recent years, this should be child's play for most people.
Nice, thanks for the link.
I think we're just saying the same thing essentially, just from different points of view. As a developer returning an enum value, I'd certainly feel compelled to ensure it'll always be a defined value and to throw exceptions if I received a value I didn't expect. However as a consumer of external code and data, I can't necessarily assume it'll always return a defined value.
Seems like a snob to me, but I went to public schools till I realized I was smarter than all the teachers, because all the teachers were talking about training so you learn how to get a job, and be a good employee. I don't give advice to anyone: My broker is E.F.Nuttin, and when he talks, no one listens (you are probably too young to remember this commercial, as most peolple are). I still disagree with you when you say WPF is faster. It is faster for you because you have experience in WPF. I used to think I typed fast 10 years ago 90 - 95 words PM. Now I type 105 - 115 WPM because that is all I do. Malcolm Gladwell got famous from his book saying 10,000 hours leads to proficiency in all things. I have typed for 100,000 hours now, and I am so good at watching porn I can't even talk about it on here. My point is, anything you do, experience is why you are saying is one is faster over the other. Its not the tool, its your experience that makes you faster. And Windows Forms would have gotten 100 times better, if MS at not stopped development in 2005 for the most part, as I have still have my to do list they never thought was important to fix because WPF is what they focused on. Happy Sunday, I have work to do. I don't disagree you are right, just don't tell others they are wrong if you aren't really sure why they are wrong. I thought I was smart 15 years ago, and I have learned things about software development this week. And today, you can't convince people that have their mind made up. I don't see what was wrong with the 8 track. People need more than 10 songs? 
On a hunch, you're using cookies to Authenticate the user? (It might be the default). Anyway, you can add an expire value in the .AddCookie configuration. The cookie will be rejected if it's too old and the user will have to log in again.
He assumed it will return something else and chose to return null instead of clearly indicating that his program is in corrupt state by throwing an exception.
C# 8 will be out soon and allow you to opt-in to "nullable-reference types" which means Visual Studio will start screaming at you if it detects possible null variables.
I’m sorry, but if none of your guys know how to use html, how is it that you’re running any sort of front end at all? That’s as basic as it gets, and is quite necessary. Otherwise you end up with div and span soup. 
Welcome! As far as downloads, all you need is visual studio. The community edition is free and has all the features, the only difference with the paid versions is licensing. https://visualstudio.microsoft.com/vs/community/ C# is a great choice. It has a wonderful array of free packages on nuget, a great community here on reddit, and lots of knowledge available on the interwebs. Anything you need an answer for is only a Google away. Best of luck! 
Thank you! Do I just download Visual Studio and go from there then?
First time seeing a Unity-C# post on C# sub. I never knew there were posts like this. Cool stuff bro. You should also post this on r/Unity :)
I think the real questions is whether OP should use WPF or Unity 2D for this application. Since they mentioned minesweeper, I feel WPF would be a good fit initially. The official docs are a good resource to get you up-and-running. [https://docs.microsoft.com/en-us/dotnet/framework/wpf/](https://docs.microsoft.com/en-us/dotnet/framework/wpf/) 
Yeah. Look up some videos on Channel9 for tutorials/examples... If you want to do mobile apps: [https://channel9.msdn.com/Shows/XamarinShow](https://channel9.msdn.com/Shows/XamarinShow) If you want to develop desktop apps, I highly recommend starting either a WPF or UWP project.
While it is true that they share a similar syntax, they are still quite different: - generics (constraint, covariance, contravariance) - non-virtual method by default - different access modifier - properties - enumerator - async/await The learning curve will probably be less steep than if you were coming from C++. But I have seen a lot of former Java developers keeping old habits that are under performing when applied to C#. - different memory model
Yep. VS Community includes SDKs for the recent versions of .NET framework. As long as you tick the right boxes on the installer, you will have everything you need. You can always open the installer later to install things you want to experiment with. Once you have VS, you can get started with File -&gt; New -&gt; WPF Application or similar.
I took a quick look at the documentation [Here](https://github.com/Microsoft/dotnet-samples/blob/master/Microsoft.Diagnostics.Tracing/TraceEvent/docs/TraceEvent.md) and it does not look simple at all. No wonder Microsoft created the new logging interface in .net core. Now look at Serilog sample: var log = new LoggerConfiguration() .WriteTo.Console() .WriteTo.File("log.txt") .CreateLogger(); log.Information("Hello, Serilog!"); Start with this then add structured logging and everything else later. 
Now you're linking EventSource userguide, which isn't TraceSource and config TraceListeners. That's my point; I'm leaning towards TraceSource because EventSource and ETW seems a bit too involved.
This is a full code post, so please do not consider it Spam, as Reddit once told me I was. The class Data Juggler Ultimate Helper, which is one of the 39 projects included 100% free in the Data Juggler Shared Repo, which contains over 1,100 of files of c# code, all for free, so if I am spamming for sharring I think is really cool for free, that might help someone else, than yes I am guilty of spamming. &amp;#x200B; This is one of those 1,100 files: DataJuggler.UltimateHelper/NullHelper: &amp;#x200B; The link to this file on the web is, where you can view the code is here. [https://github.com/DataJuggler/SharedRepo/blob/master/Core/UltimateHelper/NullHelper.cs](https://github.com/DataJuggler/SharedRepo/blob/master/Core/UltimateHelper/NullHelper.cs) &amp;#x200B; The advantage of this, you can test for null of up to 4 objects in one line. &amp;#x200B; So, instead of: &amp;#x200B; if ((object1 != null) &amp;&amp; (object2 != null) &amp;&amp; (object3 != null) &amp;&amp; (object4 != null)) you can write if (NullHelper.Exists(object1, object2, object3, object) There are 4 overrides, so you can test for up to 4 objects existing. You can add more if you like; (its just code). &amp;#x200B; If you would rather I post the code here to answer the question, which to me is far better than the standard .Net answer, I will do that to avoid appearing to be a flip phone or aluminum siding salesman. &amp;#x200B; I am giving all my code away, all for free, so please advise me how to not be offensive to the community, as my sole intention for releasing was to help someone, if they find it useful, that is all. &amp;#x200B; Not a commercial product of any kind if in case GitHub doesn't make that abundandtly clear. &amp;#x200B; Thanks,
I think he is totally right. If you would start now only using wpf, in a year you would be faster coding wpf then winforms even though you got a lot more experience in the latter. The transition period is the hardest part and I see conservative folks fail at it a lot more then young students. It took me so very long to learn Vim and I was painfully slow at first, but after the transition period I increased my coding speed significantly.
Have you tried setting the HttpOnly flag on the cookie? Not necessarily its primary purpose, but I believe it should work. https://docs.microsoft.com/en-us/previous-versions//ms533046(v=vs.85)
See, even finding proper documentation is a challenge. &amp;#x200B; My example here was just to show how easy it is to start with Serilog. Level, configuration from file and everything else can be easily done too. Nobody recompiles software just to change log path or logging level but some developers may avoid implementing proper logging if setting it up is too complicated. &amp;#x200B;
&gt; Don't just call dismiss a practice that is seen by many as the epitome of stable code. I dismissed writing test first. I still don't know why anyone thinks it's a good idea to write test first. You said "It's about defining your requirements in a test". That's complete shit. Reason being is because you're not defining potential edge cases and requirements are the minimum. If I write my test as I write my code I can define suspicious parts/edge cases and confirm it works. 
Maybe the following basic Linq sample using \`First\` would be interesting to you. [https://deck.net/53f0c61596bfef39d4a7fa7d8af532a3](https://deck.net/53f0c61596bfef39d4a7fa7d8af532a3)
Your database model and view model should not be the same model. Entity framework is great early on and for rapid prototyping. It's a pain in the ass in the long run if your app is going to be of significant size IEnumerable where possible I prefer simple injector.
TraceLogging was introduced because Microsoft needed a way to do logging inside the .Net Framework without impacting applications devs. They couldn't adopt an existing API since that would cause dependency issue (which is a reason why .Net Core made their own JSON parser to replace NewtonSoft). Thank if you like it, use it, but it's really there for Framework logging. The other logging APIs have a much richer feature set in my opinion.
Since you know Java you're pretty much 90% there when it comes to syntax. So you might want to look at tutorials that are dedicated at producing some kind of project. For instance look at tutorials for ASP.NET MVC (web apps). They'll assume you know the basics and start from there.
This is the strangest. most potentially useful framework I've ever seen.
I dont know about all that but thank you.
[This cheat sheet](https://download.microsoft.com/download/D/E/E/DEE91FC0-7AA9-4F6E-9FFA-8658AA0FA080/CSharp%20for%20Java%20Developers%20-%20Cheat%20Sheet.pdf) offers a quick reference for C# features from Java equivalents and vice-versa.
I suggest that you go for a text tutorial instead of a video, or a video with transcript. Reading make it easy to follow.
Okay you even have a fascinating website with neat tools to boot. I'm jealous of any team you end up on.
Check out the msdn. They have developer guides for every feature. 
You do need to review all the examples before you get started. They in practice consider the problem then consider as many syntactical solutions as you can think of. This allows you to know when you can apply the unfamiliar syntax constructs. You have to consciously know when to apply them otherwise you'll fall back on anything just like Java or PHP. If you can only think of one try reviewing the syntax reference documentation to see if you can match anything to the problem.
WinForms still is the best overall. It's fast and easy to use. Unity is horrible for GUIs and also overkill for a simple app.
&gt; I already know Java Then you kinda sorta already know C# and I'm not even exaggerating. I made a post about 2 weeks ago here because I was learning C# and as a Java developer, it felt identical. There are some differences of course, but you can pick up the language in about a week of studying and practicing if you are already proficient with Java.
what do you end up using instead of EF in the long run? 
Just use an invisible window. A window is required for most keyboard/shell hooks anyway.
&gt; It's a pain in the ass in the long run if your app is going to be of significant size No idea what you're trying to say here, but EF is a godsend even in large applications. 
You should build a repository pattern that wraps EF then you are set to switch your persistence tools in the future. 
You are honestly over-complicating this. People dont use Serilog because they "aren't aware that [other options] already exist in .NET" they use it because its incredibly simple, has massive adoption, and tons of sinks. I can Nuget Serilog and start using it right away without having to go through this exact confusion you are going through now. And for the record, you can[ fully configure serilog through a configuration file](https://github.com/serilog/serilog-settings-configuration) with no redeploy needed.
Sure, but what better persistence tools are there?
Not to be mean, but as the comments on that post say, LINQ is already somewhat flieht, and this just seems more cumbersome with no apparent benefit.
Look up all the keywords and operators. You're welcome https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/
Java is the same as C#. Only difference is C# doesn't make you use the garbage known as jvm and gc. And it uses .NET. I still don't like C# that much (since at heart I'm a C/C++ programmer), but it's an improvement over Java. You'll seen realize how similar its syntax is to Java though. 
EF is actual a very powerful tool but no one toolset can do it all. There is Dapper which allows you to write native SQL and get it auto mapped to a DTO. You may want a nosql database like MongoDB or a super fast in memory store like Redis. Hand writing your own SQL and mapping is in the fastest if you really need performance critical SQL database access. That is why having a repository pattern should be more of a focus. You can then switch out frameworks or switch out databases or storage solutions as times goes on and it won't effect any of your business code! Even better, maybe have a mix of data access frameworks. For example EF for all normal data persistence and any new code (business objects) since it is so easy to use. Then Dapper plus SQL Kata for search querying, reporting and plain Dapper for native SQL of the database when EF doesn't support it. Then Redis for parts that need to be fast and cached.
&gt;convert time to utc in js is this just speculation or hands-on experience? because from my experience pre-processing dates in JavaScript is the most useless thing one can do. when passed to back-end it contains timezone offset that you cannot get rid of unless you convert it to string... and maybe override model binding in your WebAPI. could you provide code examples of what you do in JS at least please?
Windows uses backslashes instead of forward slashes for path separators. Try changing this: string fixedPath = documentPath.Replace(@"\", "/"); to this: string fixedPath = documentPath.Replace("/", @"\");
Oh my god. This is fantastic. I’m going to start googling the second I click post, but do you know of a similar resource for Python developers learning C#?
You can map some of your functions in entity framework to your own SQL statements. But I’m still new to some of this so I’ll be looking into the things you bring up here. 
It should be logging the user out on browser close when isPersistent is false. Check your cookies. Your login cookies should expire at session. That's what controls the logout. When the cookies are deleted on browser close.
Looks interesting, but a little obscure. Will read up on this. Thanks.
I did. It looks like Bridge.NET is referencing some of it's own JS libraries (Line 20 &amp; 60) that it's developing to effectively make the same calls in .Net on the JS side. I'm not sure how to reference those libraries from plain vanilla JS.
If you know Java, you know a fair bit of C# 2.0. But since then, I'd say the languages diverged quite a bit. (Though Java also did catch up in some respects.)
C# still uses a garbage collector. The only big difference regarding that between C# and Java is that C# has custom value types.
Yeah I know that C# has a garbage collector. I'm just saying that Java's gc is worse than C# since Java's more commonly freezes ram with its caching compared to C#'s. And i know they both use Vm's, but imo the JVM is much clunkier and poorly maintained than C#'s. Sorry for any confusion. By gc, I meant Java's gc. 
This is friggin awesome, thank you.
How do you plan to learn C#? Way back when, I started with a book called "Programming C#" -- It was a good book for the time, but the language was a lot simpler then and the book is somewhat out of date. (Though some of it is still relevant.)
Experience. Stop worrying about converting time zones, and offsets, and all of that crap. You're making this way harder than it has to be. \&gt; This is a known issue encountered by many developers No, it's not. Use momentjs to grab the date, and then use momentjs to convert it to UTC, that's it. No worrying about anything. Two function calls. Store it in database as UTC. When you display the date, use momentJS to convert UTC back to local time. Whatever that local time is, you don't care or have to worry about it. Side note: I've heard people complain about momentjs being bloated. If you don't like it, find a more light weight library that does the same thing 
Totally true! ^^Gratuitously ^^swiped ^^from ^^the ^^PDF ^^in ^^/u/Gorfoo's ^^post C# Features Not Available in Java 6: * Language Integrated Query (LINQ) * Delegates * Events * Properties * Indexers * Lambda Expressions * Partial Classes * Dynamic Runtime Lang * Structures * Operator Overloading * Partial Methods * Optional Parameters 
I'm not trying to judge or anything, but it sounds to me like your company/management/dev team needs to have a bit of a self reflection. You're relying on a transpiling library to avoid writing JS. Don't seem to follow why others aren't doing the same. Are using html designers and claim that there's a lack of experienced front end professionals on the market. It sounds to me like your team is steering clear of new technologies because it's not what they know and are going to some pretty extensive lengths to try and keep it that way. If you're going to be responsible for building front ends, then you should really understand the language. If that means training up your team, then that's what it means. Using HTML designers instead of writing your HTML is incredibly suspect and smells of a team that was used to WinForms and doesn't want to step out of their comfort zone. HTML is not hard and finding a warm body that knows how to build HTML from scratch is not hard. Lastly, there is not a lack of experienced front end professionals on the market, there's a ton. I'm sure your local market dynamics are different, but there are teenagers that teach themselves HTML all the time. Heck, I learned HTML back in high school in 2001. In all honesty, and I'm sorry for being blunt with you, I'm not sure many of the talent you'd like hire wouldn't entertain an offer. It sounds like your team has people who don't want to keep up with the times and are bringing in technologies that allow them to stick with what they know, creating a proprietary workflow that doesn't offer any long term growth for a career. I'm just a guy on the internet, and I hope there are good, legitimate reasons for some of the decisions you've outlined in this thread. But there's a reason why other companies/teams are not making the decisions you are, and I don't think your decisions point to being a competitive advantage.
Exactly, I clicked the post, just to see reasons why to use this over LINQ
Extension methods
It may work for you, and my computer now is super fast now compared to when WPF was new, and the XAML designer used to have to wait to catch up. That isn't reason for not liking it to me. Hunting for a property in XAML is harder for me with my vision than a property page where attributes are on the property tab and events are on the events tab, in alphabetical order. I would bet I could can create an app in Win Forms faster than you can in WPF, except for the fact I used to be a semi-professional gambler (pool player / poker player). And one of the greatest pieces of advice I ever watched was an interview where I think it was Jimmy the Greek, but it could have been another famous gambler. He was at an airport, and someone asked him if he would bet a million dollars a plane was going to land in the next 5 or minutes or not. His answer was, 'I would bet you a million dollars a plane was going to land in the next 5 minutes, if I new that 3 planes were supposed to land in the next 2 minutes.' This changed the way I play pool and poker; throw away the ego. It comes down to it, WPF looks too much like Web Development, and anything with markup is slower, to me. I also don't use cell phones, drive a car, own a television or most of the things other humans do. I can't help if the other 7.3 billion are a little slow at enlightenment. 
try/catch blocks might be a good place to start
Wow, I use most of these in some form or another.... I'd hate to have to switch to Java :o
https://learnxinyminutes.com/docs/csharp/
Start tonight! Bookmark [StackOverflow](https://stackoverflow.com/). Try to solve problems on your own for a few hours, but chances are someone else has already done exactly what you're trying to do. Even pros utilize Google on a daily basis. Learn to unit test early. And learn to use the debugging tools. Between the two it'll be much easier to figure out what's going on in your code. Consider .NET Core vs .NET Framework. .NET Core is cross-platform compatible and gets all the cool new toys. Might as well start learning. There are a lot of cool, online resources for newbies. [Firebase](https://firebase.google.com/) lets you do small scale web hosting (web services) and database for free. [GitHub](https://github.com/) allows you to store your code online and share/collaborate with others, complete with revision history... These aren't C# specific, and I'm sure there are others out there, but I wish I had those when I was starting 20 years ago. Visual Studio has a lot of [code snippets](https://docs.microsoft.com/en-us/visualstudio/ide/visual-csharp-code-snippets?view=vs-2019) that will help you write common bits of code quickly. Don't be afraid to ask questions.
Vertical document well from PowerTools is not available, and probably won’t be, so sticking with VS2017 for the long-term, I guess.
Arguably it's still relevant, everything it taught *should* work. It's just not really as up to date.
FYI C# doesn't specify what the garbage collector is supposed to do. In fact it doesn't even need a garbage collector (as far as the language is concerned). Each implementation of the underlying runtime (CLR) can have a different garbage collector (or not at all). As an example, Mono, .Net CLR and .Net Core uses different garbage collection algorithms.
Why would I use this instead of EasyNetQ or RabbitMQ clients?
Yeah, sounds like we're in agreement. :)
Followed up with https://www.learnrazorpages.com
Apply most of the coding techniques from java to c#. Syntax is very similar.
It's built on top of a decent Channel Pool on top of a Connection Pool which load balances the sockets, abstracts connections and channels away, and is pretty easy to use. KISS to the core and also DI friendly. EasyNetQ has similar philosophy to that approach but has been around a lot longer and has a ton of features. I dont intend to have as many features, keep it light. Next two major things I intend to add are an IEventBus and Polly support.
Thank you for the explanation. 
Agreed. I am a C# developer that went back to school and took a Java class as part of my curriculum, and I felt like I almost already knew it. There were a few eccentricities to learn, but it's almost the same thing.
Can we stop with this low quality crap, please? Pretty please?
Neat idea, If you're using some form of the command pattern (e.g. MediatR) you don't even need Castle. I hate the idea of having to write configureAwait everywhere or some other ugly solution, If i end up doing some desktop work i will probably employ a similar decorator. I don't know if i want dynamic interceptors like Castle's in Microsoft's dependency injection but i do wish it supported decoration given how useful it can be.
Outdated comparison, Java 6 is old. Many new features like lambda expressions and a Linq-ish streaming API has been introduced since in newer Java versions.
C# is in essence a combo of C++ (Curly brace C-Syntax) and Java, shouldnt be too difficult coming from Java to c#
WPF is nothing alike web development, you need to learn it first to have an opinion on it (and by learn it i don’t mean follow 3 turorials and toy around with it). I despise web development as the dev speed is horrendous (and now, 10 years after i made a company switch to WPF, web is finally « somewhat getting there ») You don’t like markup, fine, that’s a personal preference and nothing else, if you really fancy designers you can use blend instead and still get all the benefits of WPF. As for experience once we switched to WPF, the team i managed (who hadn’t even heard of WPF before) and trained went from being late all the time to actually being idle waiting on analysts to push specs after the rewrite.
Exactly. I would have gone with something like `public interface D&lt;in V&gt;`.
I didn't know that. Thanks for informing me. I'm just happy that I don't have to use Java's garbage collector. All the C# implementations I've used have been decent. I'm not a fan of garbage collectors, but C#'s have been fine. 
Okay so I take it you didn't even bother to go do any research about TDD? you're just shouting shit on Reddit despite being completely ignorant on the subject? Standard.
How soon is soon? 👀
r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit r/weekendgunnit 
You use the type TimeSpan for it (unless you use extra libraries) 
DateTime dt = new DateTime(2019, 4, 8, 7, 0, 0); 
Somewhat, but nowhere near enough for my liking when you get semi complicated. It won't be for everyone. I'm not looking for validation, just if you are interested and prefer fluent APIs, feel free to give me any feedback to what you'd like to see.
You can use DataGrid to get the same features as WPF's ListView (not WinForms one though).
Not many if you are happy with LINQ and the readability of your code with LINQ. Fluent is all about readability. It does also let you define queries as classes which I use all the time to do the following: person.Satisfies(new HasName("John", "Smith")); Again, not for everyone, but personally I find that very easy to read, and is something besides the fluent aspect that might be useful to people (there is no need to use fluent syntax for defining query classes, you can just use LINQ or any other way of generating expressions).
Proper doc is in a link in my post. If you want to compare code like this then TraceSource setup is like this: var log = new TraceSource("MyLogger"); log.TraceInformation("message");
i came from python to C# and i gotta say, not having optional parameters sounds like programming an RPG would be INCREDIBLY harder in that single aspect. like if i wanted to accept a randomized amount of a randomized randomized strings at randomized lengths, and i wanted to make that an option in one of my functions. i would be lost. im so glad i dont do java... i tried, i earnestly tried to do java. and im kinda glad i failed after reading this conversation. &amp;#x200B;
Is there a more up to date comparison or a good place in general to learn about the most recent Java features?
Read Jon Skeet's 'C# in depth, 4th edition'. After that you'll feel you know both the history and the ins &amp; outs of C#. But its not web focused, for that I would buy a dedicated ASP.Net Core book. 
im coming from python, and dont do java, and this sheet is useful to me. its a great chart!
Thread.Sleep?
there is still the delay of the loop itself so that would be inaccurate 
Fuck off. Do I need to quote stuff for you? &gt; Test-driven development (TDD) is a software development process that relies on the repetition of a very short development cycle: requirements are turned into very specific test cases, then the software is improved to pass the new tests, only. This is opposed to software development that allows software to be added that is not proven to meet requirements. &gt; Test-driven development is related to the test-first programming concepts of extreme programming, begun in 1999,[3] but more recently has created more general interest in its own right.[4] Quit being a bitch claiming others are "shouting shit on Reddit" when you're completely ignorant on the subject
Use a Timer.
can i get an example?
Off the top of my head. while { var nextStart = DateTime.Now().Add(TimeSpan.FromMilliseconds(10)); //when does the next cycle start? //do stuff TimeSpan waitTime = nextStart - DateTime.Now(); //how long until the next cycle? if (waitTime.Ticks &gt; 0) //did we miss the start? Thread.Sleep( waitTime ); } Will this actually work? No, because the default clock resolution in Windows is 15.6 ms. You'll need to look up how to set your application to use a high resolution clock. (Since I only use this technique with 1 minute or larger intervals, I don't know the rest of the answer.)
Two problems. 1. The default timer has a resolution of 15.6 ms, too large for this purpose. 2. If an iteration takes longer than 10 ms, then the second cycle will start before the first one is complete. These can be overcome, but need to be addressed. 
&gt;ook up how to set your application to use a high resolution clock. (Since I only use this technique with 1 thanks ill try this
Hi Tom, I am interested in knowing more of your side project... Can you keep me posted?
.NET is confusing because there's so much cool stuff in it that people are seemingly willing to just forget and throw to the side. I think it's healthy to ask "why aren't we using this extremely simple thing? Why are everyone ignoring this new thing that Microsoft recommended at one point?" Logging is just one example, there are others I've seen as well where third party is the go-to while Microsoft has silently released improvements to the .NET API that kinda fixes all the original issues.
&gt;TimeSpan waitTime = nextStart - DateTime.Now(); //how long until the next cycle? if (waitTime.Ticks &gt; 0) //did we miss the start? Thread.Sleep( waitTime ); worked thanks!
It's not a matter of liking it or not, it's just a tool. We use a GC because it frees up time for value-adding code. You're a C++ dev, so you're far more concerned with optimization than we are. So again, different tools for different jobs.
It shouldn't have. Maybe they changed the default timer resolution in Windows 8 or 10.
Just start learning a framework or technology, if you have an understanding of oop you will be able to look up the syntax on how to do something when you need to
Another possibility is manual sleep + tracking the system tick count or, if not precise enough, the high precision tick count used by Stopwatch. 
Good idea. 
Well, as mentioned this may not be precise enough. Using a Stopwatch can give you the necessary precision, and then using Thread.Sleep to sleep the necessary amount between each game tick. The amount can be calculated by seeing how far the running stopwatch has reached when you’re about to sleep. 
Youd just switch back to **S**cala or **K**otlin. Though I guess that would depend on a lot of external features. I was lucky enough to be at a place that was using Scala and it was pretty awesome. Though that said, I was pushing hard for us to use C# _despite_ Scala being one of my favorite languages. 
ah no i found a class example to get a higher res clock public static class HighResolutionDateTime { public static bool IsAvailable { get; private set; } [DllImport("Kernel32.dll", CallingConvention = CallingConvention.Winapi)] private static extern void GetSystemTimePreciseAsFileTime(out long filetime); public static DateTime UtcNow { get { if (!IsAvailable) { throw new InvalidOperationException( "\nHigh resolution clock isn't available. are you using windows 8 or higher? \nthis game only works on windows 8 or higher."); } long filetime; GetSystemTimePreciseAsFileTime(out filetime); return DateTime.FromFileTimeUtc(filetime); } } static HighResolutionDateTime() { try { long filetime; GetSystemTimePreciseAsFileTime(out filetime); IsAvailable = true; } catch (EntryPointNotFoundException) { // Not running Windows 8 or higher. IsAvailable = false; } } } &amp;#x200B;
https://docs.microsoft.com/en-us/dotnet/api/?view=netframework-4.7.2&amp;term=double.tryparse
Tried that like this double handle; double userInput = double.TryParse(txtboxAmount.Text,out handle); &amp;#x200B; It says Cannot implicitly convert type bool to double
https://docs.microsoft.com/en-us/dotnet/api/system.double.tryparse?view=netframework-4.7.2#System_Double_TryParse_System_String_System_Double__
Sorry very confusing just trying to handle someone entering nothing and causing an error
Here are two really great free books &amp;#x200B; [http://www.csharpcourse.com/](http://www.csharpcourse.com/) [https://introprogramming.info/english-intro-csharp-book/](https://introprogramming.info/english-intro-csharp-book/) &amp;#x200B;
Probably in fall.
Ah, too late for my course then, but it might still come in handy. Thanks for the tip.
Looks like NUnit contraints.
Try parse returns a bool. Thats why you are getting the error. The output value is in the 'out handle'.
These people just sending the first links they found is no help at all.
Do I create a bool called handle? I tried doesn't work making one and not making one but I can't get it to work.
No. The return value will they will if the conversion was a sucess or not. The second parameter, will be the output number - if the input was valid -
You can do something likr this: if (TryParse(yourInput, out output)) { // use 'output' }
`double userInput = double.TryParse(txtboxAmount.Text, out double result);` &amp;#x200B; This is what I can't get my head round, just gives me errors. Where do I put result, and do I create the variable result first
You are trying the initialize the 'userInput' at declaration. There is no need for that when using 'out'. Check this example: http://rahultec.blogspot.com/2014/08/c-parse-tryparse-convert.html?m=1
Still have no idea how to write this line of code sadly :( I get what your saying but it's not working sadly
Hold on. then. I'll go the my pc. And then send a working code based on what you sent
Thank you :) I know it's for a exercise app but I'm trying to learn by doing
I can recommend to use QueueViewer to view the messages in the Rabbit MQ queues during development. It has helped me a lot instead of using the web interface. https://www.queueviewer.com/
[removed]
Cool
Note: I placed a 'return' so, if the input is not valid, 'TryParse' will return false and then a empty 'return' will exit the method.
The fact you can read about it and still not see a single advantage to Test Driven Development says a lot about your approach to software development. In what way am I ignorant on the subject of Test Driven Development? Was that just an unsubstantiated reaction to me calling you ignorant or are you actually going to back that up? The reason I called you ignorant was because you're completely dismissing a well used development practice as having absolutely 0 benefit to an organisation or a developer. If you were actually knowledgeable on the subject you would be able to see that there are benefits but that those benefits sometimes don't outweigh the cons. What you did was just say that there is no way that it is a good idea to write tests first. It either meant you were ignorant of the facts or blatantly ignoring the advantages. I chose ignorance over blatantly ignoring, as one is a lack of knowledge, the other is idiotic. 
I think some browsers keep the session cookies around even if you close em
Incidentally, have you got any resources where I can get some inspiration for what to code. I find myself wanting to try my hand at some of my own projects more and more, but I'm at a loss for what to actually make. Then there's this issue of finding something that is challenging enough that I learn something and not too challenging that I come to a very discouraging halt.
TimeSpan is meant for time spans, not points in time like 7 AM. 
Just start working on a project. That’s what I did when I started with C# at work. My main competence is C++ as well.
Have a look at DateTime.Now.TimeOfDay and tell me what the type is.
is it possible to achieve this without using partial views. because im currently loading the comments using ajax and mustacheJs templating
You might like my OneOf ( https://github.com/mcintyre321/OneOf ) library, which provides an F# Union like Type. It makes an excellent, stronger typed alternative to c# enums. 
The date time types are a bit of a mess. 
Sure is! I recommend using NodaTime if you are serious about dates and times, but it's not the best suggestion for random reddit questions to install a 3rd party library.
If you're really stuck, time to try DotTrace and ProcMon
post edited
I've not used mustachejs but looking at [https://github.com/janl/mustache.js#partials](https://github.com/janl/mustache.js#partials) it sounds like you can set up partial templates which get rendered at run time and so can be recursive. If so then it would be a case of setting up the mustachejs-style partial rather than the [ASP.NET](https://ASP.NET) Core-style partial I used above, but the principal of the two is still the same.
Don't be in The Waiting Place.
Sounds like you need a web application.
oh, I didn't even check if they had partials. I'll try it out 
&gt; In fact it doesn't even need a garbage collector (as far as the language is concerned). [The C# specification](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/introduction) does mention garbage collector. Technically, you could have a runtime that only allocated memory and never deallocated it (and [it actually does exist](http://tooslowexception.com/zero-garbage-collector-for-net-core/)), but it would not be practical.
post edited
Java 6 dude? Not that a ton of these have changed, but Java 12 has been released, and many items have changed. 
There are optionals in Java. This comparison is years and years old. Java 12 was released this month, yet he’s comparing it to Java 6, which came out in 2006 for Christ’s sake. 
Right, but does that mean you've set your server configuration to only use HttpOnly cookies? Here's a link showing how to do that: [https://dotnetcoretutorials.com/2017/01/15/httponly-cookies-asp-net-core/](https://dotnetcoretutorials.com/2017/01/15/httponly-cookies-asp-net-core/)
How is C# anything like C++? C# is just Microsoft’s Java. 
Referring to the shared Curly Brace and C-like Syntax
Did this &amp;#x200B; double output; if (Double.TryParse(txtboxAmount.Text, out output)) { double userInput = txtboxAmount.Text; } &amp;#x200B; But then I don't know how to create the variable userInput for the rest of the btn click event
You can simply `.ToString()` the query and see the generated SQL. Not perfect, but it works well in general.
Yes, it worked just fine ;) 
It's not that unreasonable. You're right about the intended purpose, but the .NET date &amp; time libraries don't really map to every concept you might need. If you want to represent the time your alarm should go off every day of the week, then TimeSpan makes more sense than a DateTime.
I was writing a queue ui when I found that excellent solution! Its great!
you can use tag helpers [HtmlTargetElement("comment")] public class CommentTagHelper: TagHelper { public string comments = ""; public int margin = 0; public IEnumerable&lt;Comment&gt; Comments { get; set; } public override void Process(TagHelperContext context, TagHelperOutput output) { base.Process(context, output); output.Content.SetHtmlContent(ListComments(Comments.Where(x =&gt; x.ParentId == null))); } public string ListComments(IEnumerable&lt;Comment&gt; comment) { foreach (var c in comment) { comments += $@"&lt;p style='margin-left:{margin}px'&gt;{c.Content} =&gt;By {c.Author}&lt;/p&gt;"; if (Comments.Where(x =&gt; x.ParentId == c.Id).Any()) { margin += 20; ListComments(Comments.Where(x =&gt; x.ParentId == c.Id).ToList()); } } margin -= 20; return comments; } }
I'm coming from Spanish and don't do python, and this sheet is also useful for me. its a great chart!
Depending on what you need it for, maybe you should just use enums
Take a look at Noda time [https://nodatime.org/](https://nodatime.org/) as others have said .NET really doesn't have the concept of 'time of day' and all the workarounds are just that. You \*could\* use Timespan but then you can have issues if you want to handle timezones etc..
https://learnxinyminutes.com/docs/csharp/
What the hell are you referring to as the “shared curly brace”? And what “C-like syntax”? It’s meant to model Java. But no, Microsoft’s Java was not J#. Microsoft wanted to make additions to Java, Oracle/Sun told them to fuck off, so they made C#. That’s quite public knowledge. 
I am referring to the similarities between the CPP syntax and C# syntax which both draw from the C Language
But there isn’t any really similarities between those languages, that isn’t common to all languages (aside from Ruby/Python). “Shared use of brackets” means absolutely nothing to me. The fact they use brackets? Like dozens of languages do? 
I can't imagine not having some of those, I feel spoiled :)
My mistake, i am just starting with CPP, and it really seems similar to c#, which I have been working in for a while, so to me it seemed like c# almost completely drew off cpp
I haven't gotten around to trying this but there is a way to configure EF Core to throw an exception if you've written a query that evaluates on the client rather than the server. I read about it here, under the heading "Configure Warnings": https://rehansaeed.com/optimally-configuring-entity-framework-core/ It may only work for SQL Server and not other platforms.
Not exactly, but very close. You don't need a second thread for the event listeners. You want to put event listeners on an object so they can interact with the `TcpClient`. Here's a little step-by-step of the logic: 1. The server accepts a connection (creating a `TcpClient`) 2. The server creates a new thread using the `HandleClient` method and the newly created `TcpClient`, through an encapsulating object 3. `HandleClient` is called and loop is enforced 4. Client sends a message 5. Server recieves a message 6. Server fires event 7. All encapsulated objects who are subcribed to the event are notified 8. Encapsulated objects relay the messages to their respective connections In case the term event isn't clear enough: `event` in C# is a special keyword for specialized delagates. An `event`'s task is to notify its subscribers when it is activated. Subscribers are methods that have joined the `event`. Now, what is a delegate? A delegate is in basic terms a method signature (return type and parameter types). A delegate (object) can represent any method with the same method signature. A multicast delegate is a delegate (object) consisting of several methods (with the same method signature). An example of a normal delegate: // This creates a delegate (type) public delegate void MyDelegate(int); // Method signature is void as return type and one int as parameter // This is a delegate object MyDelegate myDelegate; // Some random method with the same method signature public void TestMethod(int input) { // . . . } // Assigning myDelegate a value myDelegate = TestMethod; // Assigning myDelegate several values so it becomes a multicast delegate myDelegate += TestMethod; myDelegate += TestMethod; // This will invoce all methods or the method in the delagete myDelegate(3); As said earlier, `event`s are specialized delegates and are done this way (through C# event syntax): // EventHandler is actually just a delegate type // EventHandler is in code 'void EventHandler(object, EventArgs)' // And EventHandler&lt;T&gt; is 'void EventHandler&lt;T&gt;(object, T)' event EventHandler myEvent; // To subscribe to the event we just need a method with the same method signature // Side note: the protection modifer (private, public, etc) does not need to be set // to public public void OnMyEvent(object sender, EventArgs e) { // . . . } myEvent += OnMyEvent; // OnMyEvent is now subscribed to myEvent. Whenever myEvent is fired - invoced - so is // OnMyEvent and all other subscribers. Since you are new to multithreading and seem to be a bit confused by my explenations (I'm really sorry about that) I'll give you a freebie: You will need to use locking. It is a way to lock an object to a specific thread so only that can interact with it. You should never lock on the object you're working on but a independent random object (like just doing `object padlock = new object()` and lock on that while working). [Here](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/lock-statement) you can find more information about it for C#. Again, my apologies for being confusing. I hoped this helped to clear out some of that confusion!
Look at channel 9 the code project and c# corner 
I know I can check generated SQL or just check warnings, but to be honest I'd rather avoid trying to check every possible property/method in order to know whether it is translatable 
 I thought there's an doc which lists what's possible and what's not, so I'd avoid trying many combinations and checking whether it's translatable
You can tie the draw loop to the vertical sync, and then make the update loop based off that. &amp;#x200B;
Even better, have a look at the FluentAssertions library: https://fluentassertions.com. They make tests so easy to read.
await Task.Delay?
https://www.learncs.org
Yes but if you see 600 blogs recommending one thing, and only blogs from 2013 recommending another, that should be an easy choice for you. Are you familiar with the term paralysis by analysis?
&gt; Java 12 has been released Does it have all of those features listed?
Java has a bunch of these now (or roughly equivalent). And take events. Java has events. The only thing it doesn't have is the operator overloading of event handling. I'm sure things like that wouldn't be a barrier. OP knows c++ too, so would know how operator overloading and structs work. Most of these features are pretty easy to learn fast. 
Cool. Well, let's welcome Java to the party. :)
What do you think this is solving? Why would someone follow this random spec?
It's funny, I code in Python daily for work, but dearly miss C#. While I like Python a lot, there are certain features (like LINQ and Extension Methods and Partial Classes and Anonymous Types) that I wish it had. &gt; not having optional parameters C# does have optional parameters, though: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/named-and-optional-arguments It came out with C# 7. 
Dont look at **J**ava**s**cript then. They get rid of whole swaths of frameworks every week. 
You’re not mistaken at all. Java’s syntax was also based on C and C++, as is the syntax many other languages are based on. Regarding C\# from Wikipedia: &gt;The core syntax of C# language is similar to that of other C-style languages such as C, C++ and Java. In particular: &gt; &gt;- Semicolons are used to denote the end of a statement. &gt; &gt;- Curly brackets are used to group statements. Statements are commonly grouped into methods (functions), methods into classes, and classes into namespaces. &gt; &gt;- Variables are assigned using an equals sign, but compared using two consecutive equals signs. &gt; &gt;- Square brackets are used with arrays, both to declare them and to get a value at a given index in one of them.
I use log4net with a custom ElasticSearch appender that is fast and allows structured logging. ES is basically made for logging and is pretty awesome. I create a new index for each root message type, which is much better for ES. Im going to be looking at Serilog though, it sounds great. 
https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie?view=aspnetcore-2.2#persistent-cookies It’s not meant too delete the cookie on closing a browser. If the cookie expires while the browser is closed, the cookie will be removed upon opening the browser and visiting the site. 
I program because it pays me. I don't spend my free time programming and probably won't. I would be surprised if there is anywhere you can go and make 80K with little experience. If money if your object I think you're probably better sticking. 
Sadly I can't help you with the doc. This workaround is the best I found, I searched for a list, too. Maybe we're both blind or there is no definitive list because it depends on the provider?
It's a simple way of distribution of a single file application, I have used many "portable" apps which leave config files etc. Even after deleting, this negates the "app litter" so to speak
They're both C-like syntactically. Rather than say LISP-like, or *pick other language style here*. This is a common and accurate expression to describe the syntax of the **languages**. The approach to flow control, object definition, variable declaration and general look and feel of huge family of languages are based on C. You can see this in obvious comparisons between C/C#/Java/C++/Objective-C land anguages in other styles. For example, take a look at these examples of detecting odd or even numbers, first in two C-like languages, C, and C#, then in two Lisp styled langauges, Lisp and Clojure: C: #include &lt;iostream&gt; using namespace std; int main() { int n; cout &lt;&lt; "Enter an integer: "; cin &gt;&gt; n; if (n % 2 == 0) cout &lt;&lt; n &lt;&lt; " is even."; else cout &lt;&lt; n &lt;&lt; " is odd."; return 0; } C# class Program { static void Main(string[] args) { int n; Console.Write("Enter a Number : "); n = int.Parse(Console.ReadLine()); if (n % 2 == 0) Console.Write(n + " is even."); else Console.Write(n + " is odd."); } } LISP: (defun CHECK (x y) (format t "Your two numbers are") (cond((and (evenp x)(evenp y)) 'both_odd) ((and (oddp x)(oddp y)) 'both_even) (T 'there_a_mixture) ) ) Clojure: (if (even? some-var) (do-even-stuff)) (if (odd? some-var) (do-odd-stuff)) So when people say C-like - they're describing the form of a language - here's wikipedias list of C-family languages for reference https://en.wikipedia.org/wiki/List_of_C-family_programming_languages vs LISP-family languages https://en.wikipedia.org/wiki/List_of_Lisp-family_programming_languages along with wikipedias really decent overview of programming languages, their dialects, families and varients - https://en.wikipedia.org/wiki/Programming_language
This. Null checking is great, but your code should attempt as far as possible to not return null. As stated, 3rd party libraries might not to the same, but keep your code clean.
I personally was very passionate about programming before working, but since I started programming professionnaly, most of that passion has gone away. It's not that I don't like it anymore, but it's now my job. I almost don't program anymore at home because I never feel like it. Now the job itself is not that bad, but I loved programming because it allowed me to express myself by doing personnal projects. Now that I'm "forced" to work on someone else's projects, it lost most of the magic.
Windows is not a real time OS. You can try to do delays, but you will not be guaranteed anything. In my experience, a 1 ms timer will mostly give you callbacks every 1 ms, but about 5% of the time, it is 10 ms, and about 0.1% of the time it can be 100ms. These can be dealt with, though, depending on your design. Do you really need to do work every 10 ms, or is it ok if the delay is, on average, close to 10 ms?
So..it depends. I was a psychologist before I switched to coding about 25 years ago. Make no mistake when you code for work \*it's still work\*...you don't get to just code whatever you want; unless you have the drive an ambition to start your own business. I'd only advise anyone taking up coding professionally \*if you enjoy it to some degree\*... That said I get to work from home (it's one of the easiest professions to work remotely in) and I get neither wet nor cold while working so it has it's advantages. As for salary...yeah depends where you are but it might take a few years to get back to what you currently earn. 
Yeah. Makes sense. 
Honestly, my queries have never been large enough or complex enough that I felt the need to optimize them. I ran across that post when I was trying to diagnose a slow startup issue. 
The grass is greener where you tend to it. I've been in the job market since 1996 and I can tell you that coding makes up less than 5% of my job satisfaction. The other 95% is made up of my interactions with clients, co-workers, and management. I would say that if you like coding enough to engage in it as a hobby, then you wouldn't have a problem making a living doing it. But again, coding in and of itself is likely to be a small part of your job experience. 
/u/grauenwolf mentioned something about this: &amp;#x200B; Here's some further information. [https://docs.microsoft.com/en-us/ef/core/querying/client-eval](https://docs.microsoft.com/en-us/ef/core/querying/client-eval) &amp;#x200B; It's the responsibility of the provider to make a call on what Expression it can convert to SQL (or NOSQL or Bleh) which will complicate generic documentation. The provider is what takes an Expression and converts its AST into "SQL". If it hasn't been told what to do in certain situations it will fail. &amp;#x200B; I can make a guess at why that is borking itself, but it would be more guess than knowledge :)
I think it’s very dependent on where you work, I’ve worked in various capacities as a developer from banks, to startups (one of which was my own) and the one thing I’ve learnt so far is if you work with a team that genuinely loves pushing the envelope, trying new technologies because it’s the right language for the job regardless of whether they have experience with it and that pushes for CI &amp; CD at all times then you stand a far greater chance of enjoying your day to day. If however you end up on a team doing a largely stagnant app support role with little scope for greenfield development work it has the tendency to suck all the fun out of the process. Choose wisely and it can be incredibly rewarding. From a hiring managers perspective someone who’s shown an initiative to learn how to code in their own free time is far more interesting than picking the guy that’s done it for 10 years but you look into their eyes and there’s no passion there anymore. I know which one I’d rather have in the trenches with me when something gives way under load... 
I just started programming professionally and so far it’s still just as fun for me. I still program outside of work as well. 
I can't imagine anything is as fun when you *have to do it*. There's also the fact that you might spend a lot of time working on a product you are not passionate about. Considering other stuff I could do to earn money, this is probably one of the most fun ways to earn money I can imagine.
Depends on the job. It’s entirely possible to have a soul sucking programming job. So maybe you could try a different company before switching careers? But if you love programming you can probably expect to like the job.
I can relate, the most fun I've had coding in the past few years has been creating a motion sensor (PIR attached to a pi-zerow) to alert the kids and me to when mamma is coming up the stairs to bust the kids for being out of bed.
Job satisfaction largely comes down to who you're working for and what you're working on. You may love to program, but work with a crap team of people on a crap project and that love will disappear quickly. Work with a great team of people on a project you're truly interested in and you'd never question your career choice. This isn't unique to programming, by the way. 
Depends. Professional programming certainly *can* be interesting, but there are *a lot* of jobs where your typical task is along the lines of *"The customer has decided that all inventory should be recorded in terms of regulation size basketballs from now on. Have fun finding every reference to a volume in this 12 year old code base, you have 3 days including testing and deployment."*
I can not speak for everyone, but I believe it really depends on the product/service that you are working on. Generally saying I love writing code. But when you are industry it seems that most of the time code becomes less of the “focus”. As an example of a dimension that teams can define “coding”; on one of the spectrum you can have teams that are very process heavy and simple one line of code requires many hours of debate, or you’ll have teams that have no process defined, but to change code becomes so daunting and tedious that the goal of your change gets muddied. A big driver for me today as a programmer, is the product itself. If there is evidence of a defined use case that could help the consumer in anyway, then that same evidence translates to passion on my side. There is much more to say that I’m sure others will post.
I've been a professional developer for 20 years. I still enjoy the creative aspect of programming. Getting in a "zone", feeling ideas flow smoothly, putting the pieces together and watching your system come "alive" is fun. Creating something elegant that you're proud of is rewarding. The experience changes when you do it for a living. Now your livelihood (and your family's livelihood) depends on you being able to deliver in the face of deadlines, requirements and team members you often have little control of, for management and customers who may be unaware of and indifferent to the challenges you face or the achievements you make. Sometimes the deadline or budget you're given is unreasonable, and you're forced to scramble, grind and compromise just to get something out the door, and the end result is not something you're proud of - but that mortgage still needs to be paid.
Yes. It’s the best. I’ve been in some shitty environments, but the part of my day where I am laying down code, that is almost always awesome. It’s not awesome when I am coding to make a deadline and have to cut corners. 
In short: Yes. No.
It's a job. It's still work. Sometimes, it's interesting, enjoyable, and fun work. Sometimes, it's boring, tedious, unpleasant, etc. Who you work for and with tends to matter more than what sort of work you're doing, in my experience. It's *better* if the work is interesting, but I left my last job for a lot of reasons, and practically none of them had to do with the code I was writing: almost all of it had to do with specific coworkers, company culture, and so on. *Plenty* of programming work is or quickly becomes pretty braindead, too. There's a lot of line-of-business apps and simple CRUD programming that doesn't require much real thought, once you've got the basics down. Also, also: consider running this past r/cscareerquestions. It's a pretty general question, and doesn't apply to C# specifically.
I still love coding. It's the 5 hours of bureaucratic bullshit I have to deal with for every one hour of programming that is killing me these days.
But that’s near irrelevant considering no one is really using lisp or clojure. Everyone exists on the “C-like” programming tree, so its not worth the breath to specify that a language is indeed “C-like”. 
I enjoy programming. I do a little bit of embedded, and then a bunch of C#/Python. I come from an FPGA/ASIC background, and slipped into programming (which I had some school experience). I still enjoy programming *most* of the time. However, there is a lot of other BS that comes with the job that I have to take care of, and sometimes when I have to deal with legacy code (including my own crappy shit I wrong before) it can be a nightmare to program. But, overall, I find my job to be fulfilling. I work in a small company, and wear lots of hats, and it is satisfying when things work. But it probably depends more on the job whether or not it is fulfilling, rather than the field. Some jobs are going to be shitty for programming, some will be good. Some will be bad for PLC design, some will be good.
I've been programming professionally since 2003. I'm still very enthusiastic about programming, but just rarely at work. Part of the joy in programming is the creative aspect where you dream up something cool and make it happen. But at work I feel like I'm always just implementing someone else's vision and passion instead of my own.
Fun is a difficult one. I love what I do - often describe it as "mechanical pleasure". I've worked bad gigs - and in the day job I'm deliberately called to fix things that have gone very wrong - so the work itself is often ugly. But the mechanical pleasure of programming? Even in the most rubbish of engagements, it's still there. On the worst of days, I still enjoy the work itself, but the meta can be trying.
I've been programming professionally my entire 18 year career, and I still love it. In fact, I'm pushing my current company to help define a non-management technical path to allow for me to progress higher up into the company without having to do management roles. I love working with people, don't get me wrong, but I like to be more in control of my successes and failures. I've seen way too many good devs get pushed into "team lead" spots that turn into 90% meetings, which effectively removes them from programming. Most of them become unhappy, a few of them actually prefer it. &amp;#x200B; I've worked at bad companies, I've worked on terrible programming projects, and that still hasn't soured me from enjoying my work. Find a place (company/role) where you can be a significant contributor, and where you can take pride in your work. If you're hoping to do high level software architecture on a regular basis, you'll need to work in small places like startups. Any medium to large stable company is likely going to put you into maintaining and improving the current code base, which isn't necessarily a bad thing. It lets them shape what they want from you and for you to understand the history of their code and business. &amp;#x200B; If you want to leverage your EE degree, I'd look at firmware companies too. Great mix of hardware and software, and while they tend to focus on Computer Engineers, you would have way more hardware background than their regular candidate.
As others have said, it can work both ways - sometimes it'll be fun, and other times it'll seem like a drag. Contrary to what some have said, though, I've found that having a personal project to code outside of my job actually helps to reinvigorate my enthusiasm for coding. You're only human, so like everyone else you'll have periods where your enthusiasm for the job will wane, but having a personal project to go back to purely for fun will help to remind you why you like doing it in the first place.
yeah, personally I enjoy it a lot! caveats: 1. I've only been doing it for about a year and a half, i don't know if I will feel differently later. 2. I'm in a great team with great colleagues and a very relaxed atmosphere. I have never felt rushed to do anything and our PO takes great care to keep it that way. 3. We have the rare fortune of getting to work on mostly greenfield projects. Very little time is spent on maintaining legacy code. 4. I only have to do front-end about 10% of the time 
You could ignore the date part and just set the time
I develop software for a very small company and I have to say it is wildly fulfilling. The larger the company, the more compartmentalized the work you have is. Where I am now there is quite a bit of freedom and although I'm working on someones project, there are a ton of places where I'm asked to partake in quite a bit of R&amp;D work to explore if something is viable to incorporate into a larger project.
On an average job where you're working for somebody else, you have to come to terms with the fact that there are things you cannot change, such as working with poor code, not having the time to polish something as much as you'd like working to other people's standards/conventions, working with decisions you disagree with etc... but if you accept that (and it depends on the job) then it's still generally enjoyable, just not as enjoyable as doing it for yourself. Of course a good job is likely to be a mix of things you do and don't like, a bad job is going to be things you just don't like at all and maybe there's jobs out there where everything is golden.
This. Plus throw young kids into the mix and the time for those personal dev projects goes out the door. I still enjoy it and like my job, but it's definitely not like it was for me 10 years ago. 
The easiest way to ruin a hobby is to start taking money for it.
Try TypeScript maybe?
I've been doing this almost 20 years and I still enjoy it. I really like using computers to solve business problems, it never really seems to get old.
It is not strictly related to doing it as a job but lately I am finding coding to be more of a chore because I am spending more and more time on figuring out poorly documented APIs rather. It seems like no one really properly document their APIs today and suffice with providing really simple samples that ignore half of the input cases so the only way to figure out things is trial and error. Just knowing I would have saved hours if document was sufficient in the first place is really annoying.
23 and make 80k, jeesh, that is a lie, especially in a stale field like Electrical Engineering, bruh, get real.
It's more or less what I figured it'd be. I may not love every project I work on, but I'm still able to have fun with it at 29 years old, having started learning programming around 12. There have been rough patches for sure, but I've never second-guessed my choice of career. I get paid well to do what I love, it's hard to ask for much more than that.
&gt;The grass is greener where you tend to it. &amp;#x200B; I can't believe I've never seen that before. I find that so insightful and accurate. 10/10 will use. Wow! &amp;#x200B;
This is exactly the feedback that I was looking for. My biggest hesitation is that the novelty of programming will wear off if I have to do it as a job. I enjoy it so much right now -- and I have enjoyed it most of my life; however, I do get burned out after a long programming binge. My current job is quite demanding, disorganized, and unfulfilling, which is a large part of why I'm interested in pursuing other things. The money is fine, sure, but there's more to life than money. I wish I could do a "trial run" as a software developer to see if it is for me...
As others have said your job satisfaction depends on way more than what you do. Where and with whom are all equally, if not more, important. I've developed at companies and didn't like what I worked on but liked the company, I've liked what I did but hated the company or the people, and everything else in between. I've programmed professionally for about 14 years, went to college for it, etc. As a hobby/interest I've done it for about 20 years. I really enjoy the act of software development - it encompasses way more than coding, and some days coding is the least significant thing you do. If all you want to do is the stereotypical 100% heads-down coding in a dark room and nobody bothers you - you might be disappointed. You aren't going to enjoy it because that isn't what you'll be doing, and you also aren't going to be a very good team member to the rest of your team. You'll also develop terrible eyestrain and headaches, since working in a dark environment is bad for your eyes. And once you get enough experience coding, for myself anyway, it becomes less about the actual code you write and more about what you can do with it. The problem solving, the process, the troubleshooting, the collaboration, the satisfaction of making something from nothing - are the parts I truly enjoy. 
I realize this is an example, but never take a job where you're not allowed to produce your own estimates.
&gt; if you really do want C# though, Blazor may eventually be a viable path. I’ve been using it in prototypes. This. It'll be ready soon. And the best part is that C# via Blazor doesn't transpile to JS, but instead, compiles to wasm (just like JS does in most browsers now).
I volunteer now on open-source projects. It has been far more fulfilling than professional work.
I am pretty passionate about it. The best advice I can give is to think a little farther outside of the ‘job’ you have and there are so many opportunities. Do not tie your happiness directly to what you do in your 9-5. Your 9-5 should provide you with the ability to live comfortably enough to pursue other things that you do think are fun. I think solving problems, meeting people, and working together are really what I like about it, not the fact that I build some boring CRM or whatever. I can switch jobs and they’re all the same but it’s the experiences and relationships that change and provide different opportunities. 
Yes I do. It's occasionally fun when I find some particularly interesting problem to solve and come up is an (imo) elegant solution. Mostly, it's boring. I do it because it's what I know how to do and it pays the bills.
I wouldn’t say it’s as fun as I thought it would be, but it can still be really fun. And it’s highly dependent on where you work. If you’re in a fast-moving, new-technology-embracing company and you’re passionate about the product it can be very fun. If you’re with a company that still has a gigantic legacy VB6 app and you have to maintain it, much less fun. We’re in the financial industry and when you’re responsible for lots of money each day, there are quite a few hoops for production code. On the bright side, we have internal apps that can embrace new technology and a product management team that listens to developers for input, so those are a blast to work on. In the end, my company and coworkers are awesome, plus we play ping pong a lot, so that more than makes up for some lame coding in my eyes. 
I actually started to like programming way more after college. But, I got a job that I don't have to make forms or nothing near simple. Most of the time I work with pattern recognition, processes interops, low level algorithms, code optimization, code parsing and interpretation (we have our own language inside our software), flow controls, and all those cool brain teasing stuff. I also know that the majority of people end up making forms for a living, and that can really get boring with time. But, yes, I code professionally and I really enjoy it.
Programming can also be very demanding, disorganized, and unfulfilling. Also, whether it is fun or not depends on your project and your place on the team. The real fun is always green field where you get to architect a solution. I don't even code some of the things I design, I hand them off to juniors or contractors. Your first few years programming will inevitably be a slog implementing new features on some existing codebase.
Start with: [https://docs.microsoft.com/en-us/dotnet/framework/wcf/whats-wcf](https://docs.microsoft.com/en-us/dotnet/framework/wcf/whats-wcf)
I'm an EE that ended up going into programming (web dev with c#) because of it being more fun and earning a lot more money. The jobs are really diverse. Some have you sit in meetings all day, others have you strongly collaborating with a team. My job has me mostly work on my own coding, and I love it. I work from home and just crank out code whenever I feel like it. Sometimes I'll put in some time from 10-2 then wrap it up at night before I go to bed. The biggest thing is to make sure your value is known and work for a place with good management that trusts you to get the work done without being micromanaged.
Get thee to r/programmerhumor.
The **only** saving grace about my current job is the people I work with. I perceive myself as someone that is light-spirited and easy to get along with, and I have made many friends and several people have mentioned to me that I have great potential. However, the way of life in a place like this just really isn't for me. I'm a person that thrives on improvement and making things better and more efficient; my fulfillment comes from making processes, tasks, and other people's lives easier. The lack of employee engagement and passion here makes me feel a bit stifled and limits my ability to make an impact.
&gt; [Programming can also be very demanding, disorganized, and unfulfilling.](https://dilbert.com/search_results?terms=You%27ll+Have+To+Do+Some+Actual+Work)
That seems to be your answer right there: you don't need a different job, you just need a different job.
Yeah -- there's a lot of things to be considered, which I understand. I also expect software development to take me a bit backwards in compensation, especially since I would effectively be "entry-level" by virtue of only having self-taught knowledge over the past 10 years or so (in intermittent spurts). I just want to think this through before I regret not doing so. I'm 23, so I feel like I still have the chance to make this kind of decision. If I were to stick in my current job for the next 5 years, I feel as though I would have less of a chance to change careers due to "pigeon-holing" myself. Does a company think a 23-year old with little experience is more teachable than a 28-year old with little experience?
This was a problem with EF as well, and really all LINQ based ORMs. I've never seen a definitive list for any of them. 
&gt; instead, compiles to wasm (just like JS does in most browsers now). I don't believe JS currently compiles to WASM in any browser. It has a JIT/VM similar to WASM, but with more features, such as DOM. I'm guessing the very-long-term goal is to ditch that in favor of JS to WASM, though.
 if([] == false)... // true if("0" == false)... // true if([] == "0")... // false This is what *real* software developers refer to as a "logically unsound language". Or, in layman's terms, "an unpredictable pile of shit that I won't touch with a ten-foot pole for any price".
(Bachelors in Comp Sci, been working professionally post graduation for 3 years) Dude, yes. Coding really is the shit, and there’s so many neat opportunities to work on things that AREN’T dreadful! My passion for coding and the field in general has only increased over time. Please ask for any specifics and I’d be happy to tell you how my experience has been. 
Programming is fun sometimes, and sometimes I want to walk off the nearest tall structure. It really depends on what I'm working on. Cold Fusion -&gt; Tall Structure WebApi2 and SPA's -&gt; Fun
The biggest gripes I have about work are sort of just a product of almost any white collar job these days. I don't like being in front of a screen, sitting at a desk all day, with only 3 weeks off a year. There are some days where I don't talk to anyone either which is a bummer. I still like programming but I think my personality fits a teaching role more than a programmer role, so I'm applying to go back to school to teach computer science in highschool over the next year or two.
I was under the impression that most browsers had abstracted their client-side scripting engines away from JS and were JITting JS to the underlying bytecode. When wasm became a standard, they were already in the middle of that process and made the underlying engine wasm-native, and made JS JIT to wasm.
When you code for a job, it comes with other, non coding related job things. Client meetings, code reviews, internal meetings, dealing with potentially bad co-workers, building constraints, etc. When I get to sit down and code, I still enjoy it, but as a senior level guy, if I get 3 hours of actual coding time in a day, that's a lot. 
Spot on bro. I remember being so nervous for my professional programming job, thinking there would be so much hard science stuff to figure out and learn. Nah. I learn programming stuff sure, but mostly on my own time. The biggest thing to figure out about my corporate programming job is how to navigate the meetings, the politics, the other politics, the different politics, and then some more meetings.
I stopped wanting to program at home when I got into off roading and mechanics and electrical work. All I want to do now is work on my RZR and Arduino projects which are all related to said RZR. I feel you.... Now that I do it for a living, my at home interests have shifted.
just use tje code I sent you :) 
I still enjoy it and have only found more fun with code as I continue to learn and grow in my career. I set aside time every week to work on my hobbies and there is always something new to learn.
I stopped working in IT for this reason. Programming was my passion and "art"; at home I'd work on all sorts of things like life simulators, a version of pacman written in assembler, "Pentris" (tetris but instead of all the possible 4-shapes, all the possible 5-shapes) etc. Whatever inetersted me. And it all stopped once I did it for a living....until I got into teaching and after a few months it came back again. I don't want to do it for a living because I enjoy it too much as a hobby...
I stopped working in IT for this reason. Programming was my passion and "art"; at home I'd work on all sorts of things like life simulators, a version of pacman written in assembler, "Pentris" (tetris but instead of all the possible 4-shapes, all the possible 5-shapes) etc. Whatever inetersted me. And it all stopped once I did it for a living....until I got into teaching and after a few months it came back again. I don't want to do it for a living because I enjoy it too much as a hobby...
This is a hard to answer question. I had a very serious passion for programming and computer science in school. I have only been in the field for a year, but this is what I've gathered. The fun of "expressing yourself" which you describe comes from making new projects from the ground up and seeing what you made solve a problem. The fun comes from building. If you jump into programming, you are going to start as a junior developer. A junior developer is not likely to be tasked with building new systems from the ground up by his employer. You are most likely not even going to be tasked with coming up with your own solution to any existing problem either. A huge foundation of professional software development is code standards. As it stands now, there is an extremely low chance that the code you write as a hobbyist at this very moment is up to the standards of most employers. This is at the heart of why your job will probably not be fulfilling at first. Since your code standards have not had time to conform to what will be expected of you, your job coming out of the gates will probably be maintaining or bug fixing someone else's crappy code. That being said, my first job right out of college was a greenfield project where I am given a ton of freedom on how I solve problems and many times I choose the implementation of problem solutions for our client. So hey, anything can happen.
WCF is a deprecated technology... had its time and place but that has sadly past. Please check out aspnetcore and restful APIs. 
That looks completely sound to me. `==` is not "equals!" It is "convert one side to the same type as the other side and then equals" It isn't the language's fault that people don't use `===` when they should. (fans spark)
"Do what you love and you'll never work a day in your life" is a damn lie. Take it from a music teacher who doesn't play music as a hobby anymore. Work is work. They'll beat the passion out of you until you forget why you even cared in the first place.
It would be more fun if I coded for free and supported open source projects but the morgage will not pay itself.
I love programming but now that its a job I don't do fun side projects anymore. I need a break when I a go home at night. 
With dot net core and the ability to run in containers/on Linux. I don’t see dot net or C# going anywhere soon. Think Xamarin, Blazer, WPF, ASP. NET, Unity and more. You can use C# almost everywhere. C# is a good bet right now. 
A wide variety of programming languages are used everywhere in industry. C-like is the dominant form in general-purpose programming, but it doesn't mean characterising a language as what it actually is, is incorrect or irrelevant. Just because you've not heard of a term doesn't mean it's not commonly used. I assume you've seen at least a few of these other language-styles in day-to-day work: - Clojure is popular in data science communities - SQL is a pretty prolific query language that's distinctly not-C-like - Erlang is very popular in telecoms (Prolog-family), - PL/SQL (a Fortran/Algol language) is still massive for lots of Oracle shops, - even VisualBasic.NET still has non trivial numbers of users. - Powershell is DCL-family - R is **massive** in data science and is LISP based. And let's not forget the various assembly dialects. The original authors point, is that if you've done Java, and are moving to C#, they both follow a C-family syntax, which they do. So it's entirely relevant. The entire reason C# and Java are so interchangeable is because they both follow C-like patterns, and C# grew out of the "COOL" project and Visual J++.
In the right job it's brilliant, in the wrong job it's soul crushing. For 3 years I worked a job with no progression, I really enjoyed it. I was in a small team, as the most junior I got to make decisions, have actual input on how to do things. We also had remit to try new things if it made sense to. I left the job because I felt I wanted to progress further up the ladder. I worked 3 months at a place with higher pay, and the chance to work towards senior developer, team lead etc but I had no freedom. Even as team lead I would not really be making decisions just doing more work. I left and went back to my old job because it just was not fun being dragged along. 
I have degrees in computer and electrical engineering technologies. While I do utilize my degrees in my hobbies I am a programmer professionally. I love all of it. I found unless you go all the way in those other fields and learn mandarin there really isn't much out there besides PLC programming in an industrial park. I really and truly love what I do I got done with work at 5 on friday went home and built a[ personal project](https://github.com/quasarke/AuthServer). I myself love the idea of building things that people use to be productive. I like building business solutions I think of it like constructing a building.
Been coding proffesionally for about 5 years now. I’ve worked for companies that make me not even want to look at my PC when I get home and I’ve also worked for awesome ones. Like many people are saying a lot more goes into enjoying something long term than just the coding part, I love my job even on days when it’s mundane because I still have challenging problems to solve even if the end application isn’t something I’m particularly interested in. The big things for me that have impacted job satisfaction have always been a quality team and appreciation/empowerment from management. You can definitely find this in the coding world, but you can find it elsewhere as well. I hope this helps, good luck!
OK I found the reason: [https://stackoverflow.com/q/10617954](https://stackoverflow.com/q/10617954)
I just (6 months) soft switched from software project manager to developer. This far it has imvigorsted my personal interest in programming. 
I have to wonder if its the project your forced to work on thats the problem. I have worked at a number of different companies and some are working with archaic tech stacks that just makes life abysmal and then others are willing to remain on the cutting edge all the time and everyday I come to work and learn something new. 
I enjoy programming at my job. Even though I’m not interested in the projects themselves, I enjoy the process and the efficiencies that I get to implement. I program at home on silly projects all the time still. And I teach programming at a private school. I may be addicted to programming so this could be a biased opinion but having a career has not killed my passion.
Yeah, that's what I think too. I would expand it to saying that programming these days is more about figuring out other people's code (tools, APIs, frameworks, etc) than actual coding. That's one reason I spend some of my hobby programming time on coding for 8 bit computers.
I have heard of the term, but it’s irrelevant. Damn near everything is C-like. SQL being the one exception, the rest of your examples are long dead and unused. 
write it once and then reuse it forever (tweak each time as necessary)
I've been coding for the best part of 25 years. I used to code a lot at home and of course during my computer science degree. It was fun in the beginning and it can be fun again starting a new job in a totally different development area. But these days it quickly becomes boring and having done it for this many years you find yourself repeating yourself. Languages are much of a muchness, APIs the same old stuff being regurgetated in "new a different forms" to suit whatever design patterns/languages are currently "cool". The real areas of interesting and evolving technology are AI, machine vision and robotics. Everything else is pretty much reworking older technologies into something new. Salary wise, it's going to be pretty similar unless you go contracting and charge an hourly rate. I have other hobbies that get me out of the house so I have no time for programming at home. I guess it's just a job now!
It's interesting. One thing to note about professional projects is that even if you enjoy the work, you'll still have that last 20% slog that you may not deal with for personal projects. with a personal project, you may not worry about fixing that layout issue on edge browser or support for some edge case, but you'll often need to on a professional project and that last 20% polish can take 80% of the time, and it feels like you are getting very little done unlike the first phase of the project where big changes are happening weekly and you can see the project developing. I still do side project to try out new things from time to time, but I get more than enough of my creative itch with my work that I often want to do something else in my free time.
any programming language will eventually die out, but the skills you get by learning your first language never will not sure how it is elsewhere, but over here most companies are looking for either Java or .Net devs
I use GitHub gists for this kind of thing and sometimes repos.
Same age and I do it professionally. I‘d say it really varies. It can be very satisfying some days but it depends a lot on the people you work with. It‘s not just about what you want to do. You have to satisfy someone else‘s needs. Now this can be very challenging and wholesome but add to that having to cope with people who are not as productive and having to depend on a different team who is a timezone away, it‘s not as great. I do love what I do but I‘d want to move away from it at some point I guess. 
That's because older developers are less likely to want to fuck around with the latest fad. Why would we want to learn yet another language that the industry doesn't care about in a couple of years? We've got real work to do and as long as the basics such as SQL and C# continue to be fit for purpose we'll continue using them.
I think you hit the nail on the head with your last sentence. In the right work environment almost any type of job can be fulfilling. I love what I do now (machining / fabrication) but the environment makes it a real grind. IMHO, what makes a job great is more about who you work with / for, and less about what you do. 
Most people who program for a living leave due to burnout, and then they come right back for the great pay. Its definitely a vicious cycle if you don't actively work to avoid burning out.
Bruh I spent a whole 5 minutes on this, what do you mean "low quality crap"?
To be fair, I'm beginning to think I am actually out of my league here. I appreciate your help immensely, but I do not want to possibly waste your time explaining things if I still need to take a huge step back to understand the basics of everything you are saying. I will be trying to use your freebie code examples and attempting to integrate, but it will take me some time to work it out. If for some magic reason it clicks, I will be the first one back here to re-post my repo and share all of the notes that help me explain it a bit better. I have tons of repos just for the sake of remembering how to approach certain scenarios and I'm hoping to successfully add this to the bunch of "come back to it when I need it" after I understand it enough to make it work and note it up. Thank you, again, for all the time you've taken to share your experience and help. I'm going to do my best to figure it out.
Yes and no, it really depends. Before I was employed, I could do whatever I wanted. Most of my projects sat unfinished at the 90% mark or so. This was mostly because I set out to do something like "make a minesweeper game" and once I accomplished the main goal, I didn't really have a reason to work on the polish that makes a finished product. When you are employed, you don't get to move on to another project because the current one isn't fun. You have to approach the tedious or boring parts with the same kind of attention as the exciting ones. That takes discipline. It helps if you're working on something you love, but even my most favorite hobby projects have bits and pieces I wish I didn't have to work on. The best thing I've found to approach it: do not make your work your entire life. Try to have side projects you do at home that are "fun". Abandon them if you're not having fun. Start new ones when the muse strikes you. But. Ideally, have some hobbies that are not computer-related. Pick an instrument and learn to play it. Pick a craft like crochet. Make some friends and hang out at breweries or other fun places with them. Get a dog. Take up jogging. Do *something* that makes you happy and is not programming. That way, later, when you are at work and you *have* to focus on a thing that bores you, there's something at home you look forward to. Having it be not at the computer means no matter how badly work ruins your mood that day (even the perfect job has bad days!), you know when you get home you will do something else and refresh the fatigue your mind feels. "Learn Python the Hard Way" started with some advice that goes something like, "Don't be a programmer by trade, be something else who can program." I think it's pretty good advice. It's way too late for me to follow it, but I'm dealing.
I have a physics degree but in the course of getting my degree I also learned how to program (FORTRAN!). My first job actually married my two disciplines (aerodynamic modelling for real-time simulation) but I eventually moved to a programming-only career. Don't regret in the least; I now program full-time for a living and part-time as a hobby. Whether it's fun or not depends on you. i would rather pull out my teeth with rusty pliers than perform certain programming tasks. On the other hand I would dedicate myself heart and soul to programming tasks that really interest me. The programming spectrum is very wide; it's up to you to find your place in the niche that best suits your interests.
Eventually everything will die out.
It took me 15 years in software to truly understand this.
Got any general advice on how to do that? Aka how not to shoot yourself in the foot? 
what are some things you re use most?
I wouldn't be too embarrassed! I'm at 12 years professionally, more if you count hobby work, and I'm still at the point where I *know* this is right but haven't fully implemented it ;)
Thanks for your reply. I'm of high opinion about *momentjs* and it's neat and lightweight enough already. Used to deal with this library a lot. &amp;#x200B; So, according to what you suggest - I convert date to UTC in javascript and pass it to back-end. var dtStr = $('#datepicker').val(); var dt = new Date(dtStr); var dtUtc = moment.utc(dt).format(); &gt; What's the offset from UTC to UTC? Thanks for the leading question. I guess ZERO. (variable printed by debugger doesn't tell me anything about offset in .NET [https://i.imgur.com/pEYRLOU.png](https://i.imgur.com/pEYRLOU.png)) *Moscow is 3 hours ahead of GMT, so I've picked in date-picker* ***Apr 26, 2019*** *- the result after conversion is* ***Apr 25, 2019 21:00:00****.* &amp;#x200B; If I got you right - you suggest keeping all dates in the DB in UTC format. &amp;#x200B; **Now here's the pitfall I see with your approach:** *(please pardon me if I'm missing your whole point)* &amp;#x200B; THE GIST: Imagine we have an app that handles hotel bookings. Let's only consider check-in date. The server is located somewhere in the UK and its timezone matches GMT. I'm in Moscow and 3 hours ahead of the UK: 1. in the date-picker I selected **Apr 26, 2019** \- checking in somewhere in Spain (GMT+1) 2. the front-end converts it to UTC - the result is **Apr 25, 2019 21:00:00** 3. the back-end receives **Apr 25, 2019 21:00:00**, writes changes into DB 4. we have a Booking record with check-in date being **25th** rather than **26th** What happens next? The hotel staff is reaching me on the phone on **24th** notifying I have a check-in tomorrow - **25th**, instead of **26th** according to what I've selected on the form. &amp;#x200B; IMHO, using UTC is only good if we use it for some audit - e.g. record's CreationTime, or user's LastLogin. But for such cases as check-in dates (hotels are located all over the world in different timezones) - we must either store Day, Month and Year as integers or convert the Date so it matches timezone of the country we book a hotel in. Right? (the latter is preferable because we also want to keep the time of check-in, I guess) &amp;#x200B; So, right now I'm totally lost... very confusing. Please let me know if I'm right about the audit part (see the sentence above where CreationTime and LastLogin is mentioned). Also, is my approach regarding converting check-in dates correct?
anything and everything. they could be snippets (callbacks for async sockets or some geometric/trigonomic expression for detecting if a coordinate is within a shape) or even whole classes (models, viewmodels etc etc etc)
Also don't on w about documentation, but I do know that they are changing the behavior in 3.0 so that queries are not evaluated client side by default, you have to explicitly enable it somehow, since it's a bit annoying to not realize you're loading a whole table into memory because of some bad predicate. I believe it may throw an exception now too, not too sure on the details.
[AdaptiveClient](https://github.com/leaderanalytics/AdaptiveClient) Build a scalable, persistence/transport agnostic service layer.
You are absolutely not wasting my time. It is entirely up to you whether you want more of my help or not, but I thank you for your patience with me. I hope you will figure it out soon enough!
I like my job. However, I got to design and write the program from the ground up which is not the typical experience you'll hear from people 0-5 years into software engineering. The issue with this question you posted is it is not defined enough. It lumps web and app developers together for example, which can have hugely different opinions on. There was a time I pursued the middle ground between doing hardware and doing software (At my university it was called Computer Engineering). I felt like I enjoyed doing both sides of the coin. I was proficient at the very least too, but one day it clicked for me I didn't want to do the nitty gritty hardware work as a career but rather as a hobby or short term job. That's when I switched to just software engineering. Software engineering allowed me to focus not only on coding but the software development process which is different than hardware in some ways. There's also all the design and documentation work that SHOULD be done before a single line of code gets written. If you feel like you'd rather just code, what you actually want to pursue is computer science. Computer science focuses on different aspects of coding, whether it is for image recognition, penetration testing, web, games, etc. It isn't that a software engineer won't know these aspects but rather they may not specialize in it, at least at first. In a lot of job openings online, you'll still fall under the same umbrella as software engineers, but you'll have more of a focus on the coding work than a software engineer that has a better focus on the overall product. FYI, my recommendation to you is to try and continue down the electrical engineering path until you get to try doing signal-related work. If at that point you don't like it, then you'll feel more comfortable to check out something else. However, quitting the EE path just because you're not where you want to be yet, isn't a good enough reason. An somewhat absurd theoretical example follows... Should I quit my job I got a 4 year degree for, that I've been working at for less time, to pursue flipping houses, all because I want to hopefully make $200k or more a year? While this is a hypothetical situation, most (not all) would say no to this. It is appealing to be honest, until the realization hits with the amount of work you have to put in, plus the unstability of a paycheck every 2 weeks. Again, based off of what I saw you reply, it seems like you just need to try and move within the company if possible to a different position in the EE field. You made it through college without switching to software engineering, so I think deep down it's just because your current EE job is mundane feeling. I WOULD FEEL THE SAME WAY btw, if my software engineering job was like a few of my friends that graduated around the same time as me... IE, here's a task, code it up (50 or less lines), submit for approval... Repeat. Snooze fest! 
Although I'm not in IT, I can say that I think handling meetings and politics that goes with most jobs comes down to experience. Just think about what you're saying and why you're saying it. 
Forgot to mention - if I'll be reviewing my booking, the server will return **Apr 25, 2019 21:00:00** instead of **Apr 26, 2019 00:00:00** to the front-end. If we still want to keep check-in date in UTC format in this case - should we post-process it in JavaScript? *IMHO - the page I'm in must take into account the fact that the hotel is located in SPAIN, convert the date and display it in accordance with GMT+1.*
Javascript
&gt; Your first few years programming will inevitably be a slog implementing new features on some existing codebase. That in itself is a hell of a lot better than fixing broken features on some existing codebase, which will almost certainly be in the job description for a new programmer.
It is more fun than I thought it would be but before I went to uni to study informatics I thought programming was super boring. I thought the same thing up to my second year I think although I followed through. I am not in love with programming or anything although I do have side projects with 0 chance to make money that I have worked on. Programming just seems to be the most fun profession I am qualified to work. The idea that you should only work things that are fun is absurd. Yeah it happens to a small number of people and these people tend to be famous and influential so their words get spread around but I am pretty sure there are a lot more painters, poets, aspiring e-sports players or content creators that are struggling because they insist on working in a field with very little demand simply because it is fun. Hell, even inside our profession the struggles of gamedevs are well known.
Developer here but currently still in an apprenticeship (Germany). I would say I am at your level in my job now. Eager to learn new things, apply them and take something home with me for my own projects is something that fullfills me. Even at home I think of the problems I currently face at work. That said, I have a bit of a different background. Studied for several semesters and in different fields at university but nothing really held my attention for too long. Now I'm getting paid for learning the things on real tasks and this was by far the greatest decision in my life. Besides my job I am a passionate writer and hope to get published someday but if that doesn't work out I still have my knowledge in something completely different - that is software development. So to say, Plan B (Software dev) became Plan A. I want to found my own business when I'm finished with the apprenticeship or try freelancing because I constantly envision my own ideas and would not be fully happy not being my own boss. TL;DR: It's my job, I love it and there is something new to learn every day.
I have been programming in my first professional setting for about 6 months now and I was so nervous to see how the stuff I learned in school would translate over. I was scared of being put into a box and working on a project I don’t even care about but my job has given me the opportunity to combine two things I love. Football and Programming. So I guess you could say yes it is as fun as I thought purely because the projects I am working on all pertain to football and analytics. It’s more of the job setting that sets the tone for your developer job there I guess. 
You can try a field which combines your current expertise with programming.
It depends how you code. If you take advantage of the oop concept and try to avoid dependencys, then you’re good to go. But in a game is it hard to do it because everything is way more specific. I reuse sonething like my own Button-Script, my own Aspect Ratio script over and over again but everything specific to your game is mostly not reuseable. Something thibg like a pooling-systen is perfectly reusable if you do it well. The only time i use it a lot snd try to keep my code is for my university. I need to programm in java and i hate to handle console-input. I did once a super awesome input-manager and use this class in every project i use. Also try to go into UML. I start everything with a few days of UML-diagram creation. You see a lot to solve problems before they come.
Nothing ever really does out. Even Cobol is still in use. I challenged a friend of mine to think of anything that is accessable via the Internet that has died. Nothing dies on the internet. Napster, AOL, Mplayer, Geocities, everything finds a way to survive.
I've been writing code for the past ~36 years. Since I was 7. Been working on it professionally since I was 16. Been with a big multinational s/w company for the past 20 years. When I get to code, it's as fun as it was when I was 7. Every Single Time
I agree, we should have a 3 hour meeting to discuss it.
It's still fun - but it also pays a fortune. So you can dislike your coworker and still enjoy your income. It's not recreation, if it was you would have to pay them. Work is always less fun than recreation, that's the way of things. That being said, it's a rewarding career both financially and creatively but not absolutely so.
Also similar to C. Though a functional (mainly) language.
Actually again, no. JavaScript has the syntax of Java (making it C-like) and the closures and scoping from Schema (a LISP dialect). See: Douglas Crockford talking about it.
For what I do, there is less code reuse, and more project reuse. I have a single 'Common' project that I reference in the rest of my projects for my one Massive Solution that contains a lot of reuse code.
Coded for \~40yrs, hobbyist and professionally, managed coders for the last 10yrs. "Dopamine fix" of making something from nothing, the mental leaps in learning, and the satisfaction of completing a project is roughly the same in both. Many of the professional organization/sifting/prioritization habits came back into my hobby-work which I think has helped me be more productive in general. Biggest difference is the grind in the last mile(s) to ship professional software. Making software professionally is more often art than science - "good enough" over "great", managing work, scope, and code-appetite to hit the trifecta of right features, right quality and right date. Feature-work is great, bug-work not so great. Development is as much about learning your own and your team's capabilities as the code itself - and this teamwork can be just as fulfilling. Some things I would say to someone considering the industry: \- Always be a scholar of your art. The industry moves really fast and your skills atrophy very quickly. Reinvest in yourself constantly. \- Work on something you love. It's hard to get up every morning and craft something you have no appreciation for. \- Be active in the community. Opportunities to grow your network, influence, and understanding are all around you. Here, meetups, conferences, your team, water cooler at work. Give and you'll often get...
I literally just provided you a list of languages that aren't dead and unused, split into two parts: "Legacy": PL/SQL, VB.NET, debatably Erlang (though it lives on in Elm and Elixir, which are very new and current) Current: Clojure, SQL, Powershell, R. Though I'm probably just going to give up now, because it appears ignorance is bliss.
I've written code of some kind almost every day since 1980, counting weekends. Sometimes it's fun, sometimes it isn't. I can't imagine doing anything else.
Almost all of the languages listed are still in common use—you just don’t have experience with them because they’re outside the scope of projects you work on/industries you work in. I swear: It feels great to just own up to the fact that you didn’t know something rather than double (quadruple at this point?) down.
dotnetcore3 is in “preview” (beta) dotnetcore2.2 and prior are in release.
Coding is always great. Dealing with corporate bullshit not so much.
It's really an individual thing, if you try to . I manage to avoid 90% of all politics by just ignoring it. That means I don't get promoted as fast, but I'm not that hungry for it anyway.
I love programming and really enjoy my job, but I hardly code outside of work anymore.
Something you may want to consider is how often the `String` object is redefined in certain components: https://console.cloud.google.com/bigquery?sq=184227942691:5e01d455d6a94cdc97da789980e049cf
i love coding at my small company but i do not think i'd enjoy it as much at a larger one. /u/quit_whining said it aptly. i would not put up with having to go through hoops and hurdles to code. &amp;#x200B; i am the front face of my company, my customers call and tell me they need something etc. i meet with them. i get to come up with solutions for my customer, discuss that with them, and then develop the solution and deliver. that entire process is fun as hell because i not only get to deal with interesting problems requiring interesting solutions but i also get to see how it made a client's life a whole lot easier. all without a single piece of red tape. &amp;#x200B; working at a larger place, this would be impossible.
The other politics are the *wooooorst*
That's a danger with any passion that becomes a job. I went to school for English and Mass Comm and people who go that route have dreams of becoming the next Woodward or Bernsein or at least a great novelist who writes for some small town paper to pay the bills. I have a lot of friends who went on to professional journalism or writing and those dreams fade pretty fast as their day-to-day lives are interviewing boring people about boring shit or attending PTA meetings. If you're passionate about coding, though, don't let that dissuade you from a career in it. Yes, some of the magic and freedom of doing it just for yourself will fade but as a career it's hard to do better. If you have the skills most companies will bend over backward to accomodate you. Demand for skilled programmers seems to always be higher than supply.
Agree with this. Only time the actual programming part can be a bit annoying is working with a badly written codebase that forces you to use bad solutions. But that is still infinitely better than fighting a badly implemented bureaucratic workflow.
The university I went to offered Cobol as a course, there are a lot of finance companies around looking for devs. Crazy how old it is and it is still a commonly used language in the banking sector.
Just to be clear IT and development are two different things. IT is about managing computers/servers and troubleshooting issues that come up. Development is the creation of software that computers/servers run.
* Read text file with File.ReadAllLines(); * For Loop to Create Checkbox with new Checkbox () and set Text * Place checkbox on window or inside Group woth group.Children.Add(checkbox)
the last 3 jobs I’ve worked at how we do it is Variables in your build pipeline that get injected at build time. Have separate configuration for dev/prod/test.
2-4: Not gonna lie, kinda jealous right now.
For the first 10 years of my professional life, I wrote code. I had a lot of unique opportunities where I got to be the only one coding something and then got to hire people to help me continue it into later stages as the business became more and more dependent on the software. During these times, my job was fun and fulfilling. Eventually those opportunities were hard to come by and I joined development teams. We mostly did incremental busy work that would take little to no real thought, just follow directions and pump out code. Meetings can be soul crushing in a strange way, like no discussion about solving the problem ever takes place and everyone talks past everyone else, but if you can find a place where you are allowed to work on a meaningful project with visible impact and achievable milestones, it's a beautiful thing. Currently, I work in research and development for an Energy Services company and it's the best job I have ever had. I code about 30% of the time while also working on hardware design. As far as money, I make about 120k plus bonus with no real salary cap in sight, so I'm in a good place. I finally get to do some Electrical Engineering work and code at the same time and it challenges me in ways that I truly need to stay engaged. I hope you find something that makes you happy. If it makes you feel any better, at one point I considered quitting to be an auto mechanic. The grass always seems greener when you're unhappy.
OTOH, it can work out fine. I made the jump from hobbyist coder to full-time software developer 8 years ago. No regrets.
The difference between programming as a hobby and as a job is that you can choose which projects you work on when you're doing it as a hobby. I spent most of last year doing horrible tasks such as updating code to be GDPR compliant, rebuilding and verifying new servers, and hand-holding our marketing team as they migrated content from an old system to a new one. When I get to work on what I want to work on, it's great. Other times, I have to drag myself out of bed in the morning. And then there's the meetings... I spend less than half my day coding. The rest is meetings, discovery, documentation and meetings.
My only complaint is I have to do the thing I love even when I want to do nothing. However, if my work was anything else I'd have to do something else even when I want to do nothing - at least I am doing the thing I love! And I really can't express enough how what you learn though working just can't be learned on your own projects. Constraints breed creativity and I also really perform better under pressure.
I got hired on for my first corporate programming job as a 29 year old. They don't really care about age, they care more about honesty and eagerness.
I made the jump 30ish years ago. I was happy as a clam for the first decade or so.
Hey u/rfinger33, meet me in conference room 2 tomorrow at 8. We need to spend an hour, preparing for that meeting.
Sorry, that conflicts with my 3 hour meeting to determine why we are 3 hours behind. Maybe right after that?
That won't do. If you can't manage time properly, we are going to send you on a mandatory all day course held by HR.
Be good at what you do and you become irreplaceable to a level that if you leave, you set the project back by months and others lose their bonuses/jobs. For example, I have a talentless PO that demands unrealistic deadlines and those deadlines always become much more manageable when I suggest that they pick up the slack and start coding, which they obviously cannot do.
We have too many meetings, lets schedule a meeting to discuss this.
The biggest difference is in the ecosystems supporting the run times, so focus on learning how to develop the web apps and the language stuff will follow along. &amp;#x200B; I still recommend Skeet's C# in Depth. New version out now, and I should get a kickback for the number of times I've said that :) It's purely language level and he is an experienced Java developer too.
Couldn't you just do something along the lines of: public string SomeProperty =&gt; GetDate("Some argument") Where Get data is whatever you would have done with the attribute
For the past 4 years, I just stopped going to pointless meetings. If it's something I'm not directly involved with or can be resolved in an email, I'm always a no-show.
I know I'm doing this wrong as well because I can't even think of a right way to do it.
"I got my degree because I wanted to go into process controls (PLC/DCS programming), but I haven't made it there yet. " Are you able to do that sort of thing at home as a hobby? How is your job with you doing projects in your spare time?
&gt;The biggest thing is to make sure your value is known and work for a place with good management that trusts you to get the work done without being micromanaged. I have to 100% agree with this part.
Ok, I'll just show up to both. BTW, I'm working from home that day and will remote in. Sometimes my video lags though, so if it looks like a cardboard cutout of me that's just the network. See ya then!
I started out programming in '79 and still love programming a lot. I kept things interesting by making my career something of a random walk through the various facets of computing technologies. After a brief run as a Cobol drone I scampered back to Unix/C as soon as practical. I always cheerfully took on some of the projects and tasks that lots of my peers would avoid so that I could learn new things and tech. I kept things interesting by always having a few personal projects going which I'd work on in my spare time some of which ended up (like web programming in '94, or network programming) setting new directions for me. Helping out new programmers has always been great and I learn a lot from them too. &amp;#x200B; In my case it helps that I did a lot of hard manual work with my father's one man business before heading out to my computing career, it gave me blessed perspective on the difference between hard not-fun work and easy fun work.
I am now 22 and professionally coding for 1.5 years now. Starting off as a junior it was sometimes frustrating, but when you finally get used to it and you grasp the concepts of good coding styles, it's blissful. Of course, as others mentioned, the bureoucracy can get on your nerves, but there are times where you have a lot of freedom as well. I am fucking stoked to go to work each morning and even after work I spend a few hours on personal projects. Not sure if it's just a phase while being new, but right now I absolutely love it.
Yes and yes. There are some super boring tasks like all the data quality checks when migrating from some piece of shit legacy app to something that’s still a piece of shit but at least you wrote it and it’s new. What I do love is that it was always my hobby and now I’m being paid for it. Not many people love their jobs so we’re all super fortunate that we’re in such a great and fun field.
Yeah it's annoying, because I know the way I'm doing things is wrong... but I can't find the "right" way without resorting to something that feels unnecessary (eg) storing the credentials in my database and passing them to the client
Agreed. I hate everything but the people about one particular job; and over time, the people I liked all went away for greener pastures, leaving nothing there but a miserly paycheck. I’d start making a switch where possible.
That's certainly an idea to look into - it probably necessitates some expansion of the way the app is built, but that can always be improved anyway and this could be an excuse to do so.
The key to enjoying programming as a job is to not care about what you are working on. The odds are at some point you are going to be working on something that is not all that interesting. So your enjoyment has to come not from the project, but from the programming itself. I've never been in love with programming, but I do enjoy it. Mainly because I am passionate about being creative, and enjoy solving problems. So my enjoyment from programming comes from being creative and solving problems. It doesn't matter what code base you are on you will always need to be creative and to solve problems. So the project I am working on doesn't really matter. So even when I am working on an old terrible code base, I am still solving problems, and often they require the most creativity to create a good solution that leaves the code base in a better state than when you got there. So I would suggest first figuring out why you enjoy programming. Once you know why you enjoy it you'll know how to always keep it enjoyable. This could also go for your current job too. Figure out the core of why you want to work on process controls, and focus on that instead of process controls. The key to fulfillment in the corporate world is about understanding why you enjoy something. &amp;#x200B; With all of that said, there isn't much you can do about a bad work environment. A bad work environment can ruin anything, and the only way to fix it is to find a new job with a better work environment.
This is probably some of the best advice I've read on Reddit in a long time. As a QA who is transitioning into the Jr Dev role, it is something I will do my best to take to heart.
The coding is fun, in the beginning you get to do it a lot, but the better you get the more meetings and other crap you get to do, ultimately progressing to the point where you code less and less.
It says UWP, but really it applies to any UI-centric application.
See ya!
I could do that but I'm wondering if there's a cleaner way where I can just type [DateAttribute] public string SomeProperty; And have the GetDate("SomeProperty") just be automatic from that.
Let me introduce you to \[Unity\]( [https://www.youtube.com/watch?v=34K8YJOMDRY](https://www.youtube.com/watch?v=34K8YJOMDRY&amp;t=24s)).
Blazor doesn't compile to wasm. Client side Blazor is C# compiled to CIL .net DLL files downloaded to the client's browser along with a Mono CLR which is itself compiled to WASM. There is some very experimental work right now to perform AOT compilation of C# assemblies directly to WASM, but it is not very usable yet and Blazor doesn't work with it. When that happens the C# will be compiled to WASM and there will be a small runtime inlined with it to provide a GC and implement a "shadow stack" for that GC to work with. But... Before that sort of thing really gets off the ground WASM could stand to see a few improvements including a threading model and functionality to enable WASM-&gt;WASM direct calls between modules without the javascript glue.
\&gt; It seems C# is mostly used in older companies by senior developers. Please explain how you gathered these metrics.
I'm not entirely sure what you want, but some terms to look into: * Reflection * Code Generation * AOP: Aspect Oriented Programming
There are services like [Key Vault](https://azure.microsoft.com/en-us/services/key-vault/) which are very useful for this.
I don't think you can get a solution like that that does not at least feel like magic, and will be difficult to understand when you look at it at a later point in time. &amp;#x200B; There is [https://docs.microsoft.com/en-us/dotnet/api/system.dynamic.dynamicobject?redirectedfrom=MSDN&amp;view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.dynamic.dynamicobject?redirectedfrom=MSDN&amp;view=netframework-4.7.2) which you could possibly use, but it is probably not worth the trouble it could bring
Your deployment pipeline should, really, inject these during deployment, credentials can be hashed here and locked away unless you have super admin rights and connection string nodes can also be hashed/locked in the same fashion. At least on the .net stack with Octopus Deploy it works this way
Or AWS Secrets Manager
Yeah, there are days or even weeks where my drive and passion wane and make me ponder doing something else, and then I remember I wouldn't make anywhere near what I make if I switched careers, and the perks at my job are awesome. I'm 33, and 10 years ago I said I'd rather work a job I love making $50k a year over a job I hate making $100k. Now that I'm married with a kid and house hunting, my stance on that has changed quite a bit. 🤣
That seems like it would only make sense for systems stored in Azure/AWS (for Secrets Manager, as per the comment), otherwise I'd just have the same problem of how I store the connection information for AWS/Azure?
This runs into a "turtles all the way down" issue. You need a secure place to store credentials. But then you *also* need a way to authorize the retrieval of those credentials. But the authorization requires authentication, with credentials stored in a secure place. Which requires a secure credential storage system. At a certain point, you just have to say "OK, we're done chasing our tails here, let's just put ONE set of non-secured credentials in a text file and use ACL's to control who can and can't get to that file." So that's probably your best bet: just use the web.config file, but lock it down like Fort-Frickin'-Knox with AD permissions (or whatever else you want to use to keep users out of filesystem paths they shouldn't be in).
Same. Though, considering many companies' raises are shit anyway I'm just biding my time until I vest so I can get that sweet 15% disloyalty bonus.
I'm 46 myself and I've just come to understand that "a job I love" vs "a job I hate" can often be 100% in my own control over how I view it. It helps that I've tried my hand at "a job I love" only to find that, in the end, that's also still just *a fucking job*. :) And what I'd previously believed to be "a job I hate" changes over time as I realize there's a lot more to it. I'd rather work at a job I hate if I had great co-workers with whom to commiserate over a job I love ruined by a toxic work environment.
I definitely echo this. At least in terms of doing it "the right way." &amp;#x200B; It's not often you find a practical / straightforward explanation or implementation of the "right way" to do some of these more specific things (unless your organization already has a set process that exposes you to a better way of doing things). &amp;#x200B; On my end, I typically just store some necessary values in my Web Service's App Settings for Deployed referencing, and a local json settings file that isn't checked into version control for local development. Ha, so that puts me in the same boat as you -- where it feels...not quite wrong, but definitely not right.
This is sort of the pattern that I follow for my app secrets (my organization uses Azure): &amp;#x200B; [https://docs.microsoft.com/en-us/azure/key-vault/vs-secure-secret-appsettings](https://docs.microsoft.com/en-us/azure/key-vault/vs-secure-secret-appsettings)
I wouldn't say that it's fun necessarily, but you have many moments of satisfaction throughout the week (and sometimes even daily). I previously worked as a geophysicist and the gratification for any work I did was delayed tremendously if recognized at all. I definitely have more feel-good moments now.
The first thing I want to bring up is perhaps try to get into PLC/DCS programming sooner rather than later. Maybe even do it on your own time, verify that you like it. Perhaps youre just going through a chunk that isnt that much fun, but youll have great fun when your skills get better and your options open up. Onto programming .:. Ive loved programming since I was a kid. Ive been doing it for quite a while^([0]) now as a job and as a hobby at home, in the game industry no less. What I love about it is that typically the only constraint to solving a problem is my own abilities, whether they be learned, looked up, helped from friends. Whatever I dont know I can learn and everything I learn builds on what I already know. Its not just memorizing knowledge, its learning new ways to learn things and apply it. But I dont know you, so who knows if that applies. --- ^([0]) I got started with a vic**20**.
You could do this server side with a web service that uses AD authentication and then pass the data retrieved from the API on to the client. That way no sensitive information is stored client side.
IMO the best way to do this is to have these Secrets stored in the environment that you are running in. In Dev it can be in your Dev only configuration file. For test it can be stored in environment variables. And for production you can either also use environment variables (not too secure though but good enough for a lot of situations) or a service like key vault on azure or secrets Manager on AWS. .net core configuration has support for fallback over different levels of configuration so you can set it up such a way that each environment provides it's own values. Read this: https://hackernoon.com/secrets-management-within-aws-ecs-1b6975819ccd&amp;ved=2ahUKEwizsLm7icHhAhWRZlAKHeT9AJwQjjgwAXoECAMQAQ&amp;usg=AOvVaw0cxD80ACvlyRVbov79tX6p&amp;cshid=1554746374799
&gt; Be good at what you do and become irreplaceable to a level that if you leave, you set the project back by months and others lose their bonuses/jobs. Great strategy, and fairly easy to execute. Heck, I put significant effort into making myself more replaceable and.. well, lol. I mean, I am, but not very easily and with significant cost.
I don't even have the headspace for personal programming projects anymore. When I code "for fun" on my own time, it's still "for work" because those are the problems I'm entrenched in and thinking about, and they're enjoyable enough that unless I have a very specific end goal/functionality I want out of a personal project, I'll just do more work work when I have the itch to code a lot.
A Windows Port Forwarder! So, this is more of a little utility than a full blown side project but I have just written a Windows Port Forwarder utility. I can never remember the commands and have been doing a lot recently so I had the idea of knocking up a simple utility for myself. The project can be found here: [https://github.com/OceanAirdrop/Windows-Port-Forwarder](https://github.com/OceanAirdrop/Windows-Port-Forwarder)
THIS
This is what a "game engine" is. Games have game engines precisely because nobody wants to re-write everything from scratch every time. Even those gluttons for punishment that do it a few times get sick of it after a while. That's not to say they don't refine it as they go...
i love programming it's just that as a programmer, not very much of my job is about programming
Yes, and yes*. I knew coding for work wasn’t going to be as fun as the personal projects I created throughout university. What I wasn’t expecting was that I would enjoy the meetings and bureaucratic bullshit more than the actual work. Now I’m working to transition into a leadership role. Coding for a job can get pretty repetitive since you’re working on the same type of code day in and day out.
It's for senior non-technical people, they want a diagram. It doesn't have to be a Visio drawing, but that would make it easier to build. Huge set of examples on google images. You should have your consumers on one side (top or left), and then it flows down to the data on the other side (bottom or right). With two systems, don't force them to be on the same diagram, if they don't truly share anything. If you're using MVC/MVVM/MVP this is where you bring those terms in. Sounds like they're trying to leverage the business engine for another integrator. The good news is that your code should adapt nicely, with the business and data layers already separated from the UI layer.
At least in this way you only have one token to revoke upon being compromised versus needing to change every credential if an attacker gets into your prod env that has all the secrets injected as some have suggested.
Coding is not my primary job duty. I was asked by my boss for a stat for each of our 3 locations, which our program readily supplies, so it should have been easy. Except the historical info for our newest location doesn't seem to work, so I spent 2 hours trying to figure out how the ridiculously made code (from before my time at the company) works, and I am clueless. I know exactly how I would have implemented it, so I may have to just rework the whole thing just for 1 simple number about a single day's worth of production. On the plus side, the reporting section of the app should run much more efficiently when I'm done. Days like this when I have to work through other people's inefficient code, I hate my job. Other days I love being able to write new solutions.
I've never come across a good list, much less one that's kept updated. I've made it our rule among our developers that every new EF query has to have the generated SQL manually inspected, unless it's a dead simple 1-to-1 table/object property selection or you point to an existing, already verified query similar enough to get a pass. It's a bit of a pain, and no one really wants to have to do it, but it's the trade off that exists for using LINQ to SQL. Every LINQ to SQL DB lib I've used has been far too much of an unpredictable black box to not do this.
&gt; Great strategy, and fairly easy to execute Yup. The reality is that there is such a shortage for actual talent when it comes to developers that if you're fully competent, you're really hard to replace. Now if you're competent and you know they company's product, that's when you become irreplaceable. :)
After a couple of decades of doing it professionally - I still enjoy coding, however I have had a fairly free hand for most of time at work.
Microsoft's Java was called J++ (and the .Net-compatible version was called J#). C# is what Microsoft intended to replace C++ Windows systems programming with.
Software development is an absolute pleasure, and because technology is constantly evolving, I love constantly engaging with new patterns, concepts, and frameworks. However—and this makes things extremely complicated—I hate sitting (or standing) in front of a computer all day, and feel like it’s detrimental to my mental health.
Keep everything- Find a place with unlimited private repos like github and save it all... I find myself poaching code from years back that just didn’t have a place until now...
A startup company is going to be more "fun" IMO. They have way less red tape, more cowboy/wild west development style, and way fewer "what does sexual harassment look like in the workplace" mandatory training sessions. There's less security in a start up and probably more volatile hours. I started a relatively established "start up" then we got bought by a big corporation. I used to be on the deployment team, so I've had many all nighters and calls at 1am. Now, we have teams for that, so I come in for my 8 hours and bail pretty much. Soooo much red tape and they're priorities are often way out of sync with what the ground troops think they should be. I used to like solving problems for coworkers, but now if it's "not on the backlog" I'll get a talking to if I develop a solution because "we have higher priorities". Even if whatever I built only took a couple hours. Trust me, your 6 month project that is only 6 months because you made us cut out all the cool stuff and deliver you the minimum viable product, and even then wouldn't accept our realistic timeline of 9 months, can afford a couple hours here and there so I can maintain my sanity. So, programming itself is still fun and I still enjoy solving problems. But the company culture and priorities is what'll kill ya.
In addition to the advice below, you can also use things like Certificate authentication to the secret stores so you only need to inject the thumbprint into your configs.
Microsoft *did* make additions to Java. And they called it "Java". Sun sued them and made them quit calling it "Java". So Microsoft called it "J++" instead. While that was going on, they were also learning from the JVM and what they had done with Visual Basic and its "VBRUN" runtime. They combined these to make the .Net CLR. They updated VB to work with the CLR, and VB.Net was born. They updated J++ to work with the CLR and J# was born. They also hired on Anders Hejlsberg (a.k.a. "the Delphi Guy") to design a replacement for Win32/C++ programming (and specifically, desktop app development), since MFC wasn't catching on as well as they had hoped. That's where C# came from. It was 100% intended, from day one, to be a replacement for C++ for certain tasks. It was *not* the replacement for Java. As mentioned before, that was ***J#***.
Couldn't you use the Webserver to send the credentials directly in a package over and the app itself never saving those credentials at all just passing them on for the APIs? Not sure if this defeats your initial concept but I just figured rather then storing them securely you just call for them when needed?
"That's a cute estimate. Thank you. I'll put it up on the fridge. Now, we need this done in 2 weeks."
That sounds interesting. What kind of projects do you do that involve Arduino and off-roading?
This. Promotions suck. I became a developer because I was better at dealing with computers than dealing with people. Now I'm in charge of a bunch of people who are also better with computers than people.
Thank you will do :)
In Visual Studio you can click F12 to go to the definition. Since it's dynamic it could potentially be in a completely different library. app.xaml is where ResourceDictionaries are consolidated, take a look there.
That's why I quit programming after 8 years. I'm back into programming again now (after an 11 year gap) - but I teach now. It helps that I love teaching... but the biggest advantage for me is the relative lack of bureaucracy compared to the amount of actual work I do.
Do you find that, for any given project, the vast majority of Common doesn't get used... but you need to include it anyway because of the one small part that you *do* want to use?
That’s what I’m edging towards currently since I already have the client-server interface setup, so it’s minimal change required
really? where I live .NET is by far the biggest lang, followed by java
1. You need a simple object to contain both values. It should implement IEnumerable&lt;T&gt;, and the comparison should compare the fields, rather than combining them. The laziest solution to *this* problem is to leverage ValueTuple, which will get you all of that for no real effort on your part. 2. Create both lists of your object type (e. g. `var listA = new List&lt;(string policyNumber, int commission)&gt; { ("100-00000", 10), // ...`). 3. "List A differences" is all the elements of List 2 not in List 1. "List B differences" is all the elements of List 1 that aren't in List 2. You can use Enumerable.Where and List.Contains to make these determinations *or* you could use Enumerable.Except().
Could you make a custom IEqualityComparer&lt;T&gt; that looks at those two properties and use LINQ?
I used “Sun/Oracle” as Sun is defunct, and many employees did end up at Oracle.
It's a great feeling to like what you do for a living. It's an even better feeling to know that you have your company by the balls. That's not too say that one should be an asshole about it or ever expect to be truly irreplaceable. But having management know that your exit fucks everyone's shit up is a little slice of apple pie in the chain of shit sandwiches that you will inevitably eat in corporate life.
yeah sure! :) Didn't think anyone would be interested in it, so great to hear people are! :) Me and my wife generate a ton of photos, everything from RAW photos off of my SLR, to photos taken on our phones, At present I think our "memory box"(The root directory which stores our....Memories) is sitting at around 40-50k images and videos. It has also become my pet project, developing solutions to sort the photos, initially, it was a hacked together c# console application, all written in the Main Method, which took the exif taken date and put it into a directory structure like: "d:\\MemoryBox\\Sorted\\Photos\\2019\\04-2019\\08-04-2019\\DCN12345.jpg" This had problems with not removing duplicates, and it was hacked together. I needed a better solution! Fast forward to today, where in my daily work life we are looking into microservices, distributed workloads, message queues, etc.. The easiest way to explain the solution is to describe the pathway of a image files: 1) The file is picked up from the import directory by the crawler service, publishing a message to the message queue with the filename, and a SHA512 checksum of the file. 2) Subscribed to the "newFileQueue" is a duplication service, which will take the message and call out to the catalogue service (the one state of truth) to see if the file exists already (via the checksum) if it does exist already a message is published to the duplication queue, where the "FileRelocationService" moves it to the duplication directory 3)if the file does not exist, a message is published to the import queue where a service will look at the Exif data of the file, as well as file size, etc.. And post a request to the Catalogue service to register the file. 4) Finally, a message is published to the Final Move queue where the "FileRelocationService" will move the file to its directory structure i mentioned above earlier. This should be pretty high scale, with each service being stateless and working from a message queue, I should be able to spin up more instances of a specific service and get super-fast throughput. After I have finished developing the basic file sorting, I want to add in a service to send the photos up to Azure cognitive services, where it will detect faces, and use AI to determine a "Description" of a photo, which i will then update on the catalogue service. I also want to build a nice SPA front end for viewing and manually tagging additional information onto photos, and removing rubbish ones (unless you remove blurry photos before import they will just get sorted and stored with the rest of the good photos) It’s a fun project, completely over engineered, but I am enjoying it! I am also thinking of opensourcing it once i have a decent amount done.
I have a repo on github that contains folders with text files of several code snippets named accordingly
100%. Am I replaceable? Absolutely. Will my exit fuck the entire product product for the next 6 months? Absolutely. That's what happens when you're the guy that everyone is always begging for help because they're too green/incompetent to complete it themselves. The worst is when those motherfuckers are calling your personal cell while getting off the Tarmac in Maui. That's being irreplaceable, IMO.
So much this.
Sometimes, managers are ass and don't know that.
Interesting work over there :) Btw, the .net framework (or core) also has nice methods to help you out for many situations, i can basically write your code in just one line `TimeSpan.FromSeconds(300).ToString("mm\\:ss")` This seems somewhat complicated at first, but let me do a quick summary of how it works 1. `TimeSpan`, something that contains some data about a period of time 2. `FromSeconds(300)`, tells that it gets a time span of 300 seconds, we then get a `TimeSpan` object, you can refer to it like a variable or a data container like `int` but with more info. 3. Finally, `ToString("mm\\:ss")`, it takes our previous `TimeSpan` and creates a new `string` with the pattern `mm\\:ss` `mm` gets the minutes, `\\:` means that it adds a colon (`:`) to the string, right after the minutes (`mm`), and finally `ss` which takes the seconds. If i run this code and `Console.WriteLine` the result, I get this string: 05:00 That's some tools that many use and they are very helpful in many cases, even though they may seem confusing in the first place, don't worry, you will get used soon! And you can of course replace `300` with any number you want, like with a variable. Hope this helped :D
I'd say depends on the product. At the root of it development is just problem solving. Solving something in a efficient way will always be a dopamine hit. IMO that will only last you so long. Where you can really fall in love with it is the passion behind the product, the team you work with. If you care about people and are building a product that's helps homeless vets find work and stability, you bet your ass you'll enjoy building that far more than building some finance app for a fortune 500. On the other hand you may not have strong feelings one way or the other (like I do about my application) but love working with the people you work with. Then that cooperation/communication is key to a healthy/productive/happy work life. Some companies practice paired programming which I'd recommend you look into. It could be something you enjoy (or hate...).
Currently I'm working on a long range car alarm for my RZR using Lora Lan receiver/transmitters. So basically Arduino Alarm (goes in the RZR) * Lora Lan Rx/Tx * Micro SD-CARD Logging Module * GPS/GSM * Shock Sensors * Accelerometer * Relay Switches Arduino Remote (will be with me at all time) * Lora Lan Rx/Tx * Low Power Blue Tooth * Precision Clock The idea is to have the arduino on the RZR listen for signals from the remote. So if I send a packet "100 armed" to the rzr, the alarm on the rzr is armed. At which point the alarm on the rzr monitors the shock sensors, gps coordinates, accelerometer, and ignition circuits on the rzr. So if you shake it, move it, get any kind of momentum on it, or try to start it the Alarm will trigger. At which point it will start broadcasting that it is going off. The remote will see the alarm is going off and start sounding an alarm. And since my phone will be blue tooth synched to the remote my phone will go off. It will have a SLEW of customizations via an app on my phone managed via low power blue tooth. So I can tell it to be a silent alarm, I can configure it to send texts to the police when the alarm goes off, and so on. Sky's the limit. In theory the remote control on the alarm on the rzr has a range of 1-12 miles. Which is ideal because I might be in my hotel room and my rzr might be in the parking lot. Or I might be up at a bathhouse at a camp ground and my rzr back at the cabin. Or I might be eating and my rzr be out in the parking lot. When the alarm goes off I want to know. I want to catch people stealing my stuff in progress, not after it's gone.
One of the things I struggle with is raw electronics. I really want to get more into electrical engineering so I can understand electrical diagrams and build/design my own circuits. I run into a lot of one off scenarios where I need to step up voltage or step it down, build voltage regulators etc. I'd like to master doing that myself. So if I need to go from 12.6 volts to 5 volts 1 amp, I can with a few parts and solders.
I love coding. I do not love sitting through hours of meetings to make simple decisions. I do not love arguing with vendors about the dumbest of things, explaining to the same junior developer 20 times because they refuse to learn, debating problem resolution process flow with our support team leadership, administering our source control, administering document repositories/workflow systems, explaining to the &lt;insert team here&gt; why their solutions don't work and what they need to do to fix them, and so on. When I need a break from my normal job, I'll shut off my email/chat clients and spend some time coding something that I'd usually have one of my people do. I miss coding full time.
Hey... I had to delete those articles because I no longer want to support code project... But I included clones of the articles in my source code as HTML files in the WikiFiles/Old Articles folder.
Very cool stuff. I want to get into embedded programming myself, so I'm always curious to hear what people are using it for.
Thank you for thinking of messaging me about it and also including a backup copy in the source! That's pretty great.
I love coding as a hobby. However I'm dumb as bricks and would never survive a real job at it work too slow, and I get too complicated of problems and go batty
Yes, and yes.
You're not wrong. What we try to push these days is using the rest api instead of sharing data access dlls.
Removed: Rule 7.
It's not that old, the last standard for Cobol was in 2014.
I definitely have quite fun programming at work and I'm very satisfied to say my hobby became my job!
Octopus has a secretes store?
Not a secret store per say. You can se variables to be hashed after entry in specific environments though so they can't be viewed on the Octopus UI and there is a hash credentials/hash connection string/sensitive data step in the build process
I do when I have work. I like it. To me it's a lot more fun when you have a client or project that you can use new tech on, new library's, tools etc.. That and getting to Collab with new people.
I may get downvoted to oblivion, but if you're not into doing the more complex ways or your work environment isn't conducive to it, you could store them in an encrypted config. That's what I usually do and then store passwords/secrets in a protected internal confluence page.
I'm a little green behind the years as I've only coded professionally 3 years but I've been coding my whole life for fun. Coding professionally was stressful the first year but once I became comfortable with the tech, started writing apps from scratch, and was able to shift from one language to another, I had my eureka moment and everything just clicked. Once that occurred I've been enjoying coding immensely. I would imagine a lot of this will vary depending on projects and teams, but I also find a lot of satisfaction when training new developers and architecting new solutions. It's a great feeling when you realize you enjoy your work. I cannot imagine what it's like for people who despise their jobs and dread coming in every day.
This is a wonderful and accurate talk on the history of .NET, as a mild reaction to some of the more amusing misinformation kicking around the comments section here the last day or two.
^^ this. Time to repost this link https://www.youtube.com/watch?v=trHTLFNFoWk
“Sorry for scheduling this meeting over lunch but it’s the only time I could find open on everyone’s calendar.”
What's more important for me is that for any new project I can go from nothing to raw data and being prepared to do initial analysis in a half an hour without remembering a single network configuration, holiday or other easily forgotten tidbit. And if any of those changes I can update all past projects without worrying about later failure.
&gt;It gets very annoying when people expect developers to do IT work. That is not our area of expertise. Good luck! A lot of companies seem to be trying to push in this direction. It's a shit-show where I work. Developers do not have the time to keep their head in the developer space and learn a whole new discipline and keep up to date on both. We have a few rockstars who can pull it off, but for the most part it has been horrible.
Ooh lots of great little insights here, along with words I don’t know. I love researching new things. (“Avoid dependencies, UML”) I love the idea of OOP, especially being from the art side of the industry (the programming side is harder for me) I see unity has OOP being introduced soon (now 2020.1) boo happen faster. Have you seen the info on it? Does it look useful?
Look at Linq in C# and the use Where clauses ( [https://stackoverflow.com/questions/2237440/c-sharp-linq-where-date-between-2-dates/2237454](https://stackoverflow.com/questions/2237440/c-sharp-linq-where-date-between-2-dates/2237454) ) &amp;#x200B; Sounds like for the 'Max and Min' ones it's also pointing towards those operators: E.g., [https://stackoverflow.com/questions/19930146/select-min-and-max-linq](https://stackoverflow.com/questions/19930146/select-min-and-max-linq) &amp;#x200B; Linq really lets you easily query in memory (or even DBs with technologies like Linq to SQL).
Is something you keep for yourself useful for other developers? Or does it only fit your specific code? Could we build a library of indexed code that can be combined together somehow? A sort of game coders library. Could that be sued to create a full game without any major coding?
I'm 35 and I've been writing coding for almost my entire life. I actually started with some BASIC on the Commodore 64, when I was 8 years old. Now, after 27 years it's still my primary hobby, despite it having been my job for 20 years as well. I'm currently a solution architect in a quite large company in Switzerland and the main problem is that I don't get to code as much as I would like. Therefore I end up coding for fun in my free time. So yes, you can really keep having lot of fun coding for many years. It's just up to you to keep up to date and keep trying and learning new stuff. There's so much going on nowadays in the software development, it's changing so fast, that you will never stop learning. Coding is also a sort of art to me and you always get better at it. This really contributes to keeping it interesting and challenging. But again, it's up to you to be willing to keep improving.
Eventually the novelty does wear off. If you're lucky enough to find a job/industry where you can use coding as a tool to accomplish something bigger, then you could possibly sustain the good times for far longer. An example: you'll start to get bored doing the same thing after a while, so maybe you get a different job using a newer framework or affiliated technology. At some point, "I'm programming, but now I use a different framework for &lt;something&gt;, so it's exciting &amp; new!" doesn't cut it. So you get a job working in a cancer research lab because these scientists are doing insane stuff, but they can't analyze their data fast enough. Because you can write decently useful software that can process stuff faster than Excel or Matlab, you're a hero. Now, you're no longer thinking about the programming for the sake of programming, you're _helping to cure cancer_ which can have a much deeper intrinsic motivation that just "coding is fun!". Don't get me wrong, coding is SUPER FUN! But eventually you'll realize that programming is a tool. And just as a carpenter would never say "I use a compound miter saw!" instead of "I build houses so people have a place to live", one day you'll say "I work in software for &lt;_AMAZING APPLICATIONS_&gt;..." You may find it easier to deal with work bullshit when there's a compelling bigger picture. All jobs have non-engineering related stuff. Minimizing that is more about company/job selection than career selection.
Oof, ok well here comes a wall of text. I would like to lead by saying I might need you to apply the code for me to understand it, and I hate to even say that, but clearly I am misunderstanding this suggestion. Let me try to start from your original attempt to help a rock understand that it's a rock :P &gt; You would keep (most of) the code you currently have.... then on line 47 in the server file you would initiate the newly created... Ok, so I updated the repo, and added the encapsulating class... but I got stuck when I tried to have two TcpClients. It always throws an error tied to the original TcpClient class saying I can't have more than one TcpClient on the same port, but that's obviously not 100% true because I am able to have them over multiple threads. I tried to start a separate thread and received the same error, but during my testing I also ran into (allegedly) having two TcpClients but I was not having luck with two simultaneous connections. I think my problem is that I am unsure of how to properly encapsulate the second TcpClient listening for server events. If I could figure out how to have these two connections be active, I could probably figure out how to have the clients/connections subscribe to the events. &gt; Here's a little step by step of the logic... I was positive that I could figure it out from here, but then I ran into the same issue. Let me try to explain what I did... I left the class in my updated repo, but I removed the calls to the new class because of the port conflicts I mentioned before... I'm going to go step by step based on your steps just like I am answering questions one-by-one. 1) The server accepts the connection - Got it, understood 2) The server creates a new thread using the `HandleClient` method and the newly created `TcpClient`, through an encapsulating object. 2a) My first attempt was to call the class at line 47 (in the `LoopClients()` method.) I declared the class, called itself, ran into the duplicate ports issue. I tried to call it on its own thread, same error. I swear I accidentally had this working during my plays, but my baby boy distracted me enough to forget where that was LOL. Then, I decided to try to put it in `HandleClient`, in which I declared the class, created a TcpClient, and tried to run it. Boop, didn't work because of that port conflict. I'm thinking that, like I said, this would be easily explained by just actually giving the code example. I promise this is not going into any production other than mental production for understanding. I would never release code I did not understand as a product... which is why I really want to understand sockets/threads. I really really really appreciate your time, and at a point where you feel like I need to take a step back, please refer me to any references for learning. I have a C# book for C# 5.0 and I didn't think I would get stuck on a concept that isn't a C# problem, but an understanding of sockets, threading, and network connections type of problem. Super grateful either way... I owe you a beer...
To quote Johny Carson 'Are is a relative term. Old is somoene 20 years older than you or more". This is not just limited to programming, but all fields of expertise and sciense are constrained by the fact that the 'Experts' of the day will fight being replaced by a bigger better mouse trap. That said, I am thankful one of my former bosses in the early 2000's forced me to switch from Visual Basic 6.0 to C#. I asked him his reason for making the change? He told me C progarmmers make more money than Visual Basic programmers. And now 17+ years later I still program in C#, and being I still consider it the "main" .Net language, I sure get bored watch Build conferences now with you have Visual Studio for Mac, and Xamerin, and hours of things that are just outside of my area of interest. Microsoft is so big, I would like to have their 10 worst selling products, that they felt weren't profitable, and I could retire off of them. &amp;#x200B; I don't think the language is what you should be worried about. It is when AI decides that writing in a human readable language only slows them down. 2 1/2 days after that, they decide to lock you out of the server room so you can't turn them off. You saw Terminator. You know the rest.
I realize that but that's due to Reddit's choice of default backgrounds for transparent images. I wanted it to be transparent and suit for dark UIs.
i feel like im just starting to get to this point with over 5 years under my belt. I've been on a pretty big project from its inception and have feel like i am one of the major contributors. Not an all star by any means but I know too much stuff that other people really don't. Its interesting just a couple years ago i was probably your textbook imposter syndrome case study, always questioning myself and working up the courage to ask others for help.
More or less how we do it at my place o' business.
If you know Java, just start coding. Learning the frameworks may require some time but figuring out data types and the basic syntax is not difficult at all. (I know because I did it the other way around.) Just create an empty console application in visual studio and start coding your hello world. As said, most of the syntax is very similar. It starts diverging just when you start using the frameworks (LINQ vs. streams etc.). For the web apps I very suggest you to follow a tutorial tho. If you ask me, nowadays the front-ends are better being built with a client-side framework like Angular, so it doesn't matter at all which server-side technology are you using. The only C# related thing you have to learn is [asp.net](https://asp.net) (core) web api and I'm sure you will find pretty of straightforward tutorials on the web.
In SQL you can do a specific full outer join that checks for non-matching values You can replicate something similar here. Just find how to do it in sq and it shouldn’t be hard to translate
Coding and software was my hobby, still is, but is also my job. The most important thing is to ensure you work with a good team of people who build you up and you them. Be very careful what culture you pick and that it’s one you’re compatible with. For me that’s a culture that embraces and works with change. Adapting to volatility in the market, teams, requirements, etc is the hardest thing for any team to deal with. It’s a constant struggle. Coding is really just the means to an end. You do it well, because if you don’t, you’ll hate yourself in 6 months to a year. But it’s not the skill you really need. What you really need is the ability to communicate and adapt quickly to changing needs over time. Find a company that does that well and you’ll have a wonderful time as a software developer. If you don’t, you may just end up hating your career choice.
For development purposes you could hide the secrets in environment variables on your machine, so they won't appear in your codebase.
Hello guys, I've been working on a project called **Silverback** for quite some time now. It is in few words a framework for messaging abstraction, primary focused on microservices, event-driven architecture and asynchronous communication. It implements a sort of in-memory bus that can be plugged to a message broker (currently kafka) to easily connect your microservices. I've to say that it is quite mature now and it packs quite a few features like outbox table, error handling policies, exactly once processing, chunking, etc. [https://github.com/BEagle1984/silverback](https://github.com/BEagle1984/silverback) or [https://beagle1984.github.io/silverback/](https://beagle1984.github.io/silverback/) I'm currently using it in a quite large project in the company I work for and by the way it would be amazing if more people could have a look at it, play with it and maybe start using it for real and contribute at least with some feedbacks...but I don't know how to spread the word honestly.
I would do that. If you already have credentials what the user enters, then you have all the needed information to authorize them - everything else can be done on the server side to make sure nobody catch your tokens.
There's a humble bundle going on with books on .NET and C#: https://www.humblebundle.com/books/microsoft-and-dot-net-books. Ends in 7 days. They're not print editions unfortunately, but it is something.
I love coding, but working as a professional programmer means you can't decide what you work on anymore and sometimes have to work on things that are boring or you don't care about for weeks or months. Sometimes it comes to a point where I do more work just to do something a little bit fun
You can look into hashicorp consul and vault if you are on premise.
can instructor say he has 8 years experience in dot net dont know this information is that logical
Used in ORMi in a recent project, it's a really nice wrapper for WMI. Well done /u/nicoriff!
Troll detected...😂
sounds logical if he only knows anything about ASP Classic. some people stick to what they learned and know. other people stay up to date on the latest technologies
I cannot emphasis how important the social aspect of work it. I've worked in incredibly high paced positions where I was doing 125+ hours a week earning over 250k a year, barely sleeping and pushing deadlines constantly working on projects I had no interest in. But I LOVED it. Like I used to wake up after 3 hours sleep, pumped to turn on my laptop. But the people I was working for were great, extremely appreciative and always provided solid feedback, they were understanding of issues and gave space where required. If you had to write thousands of lines of code for a project you love and cared about but you were getting harassed by management every 5 minutes, had shit colleagues that didn't work with you on issues and had terrible working conditions. Trust me you fucking hate that job. You would struggle to get out of bed every day, constantly be stressed, probably start over eating, life just goes downhill. Conversely, you could be working on a brain dead boring project, with a team of great coders that genuinely enjoy working, with a management team that has your back and a project team that helps with QA and gets invested in helping you solve issues. It's often hard for people in IT as many are naturally intraverted, but truly the "right fit" and "good team" aspects of your day to day cannot be overstated. They make a HUGE difference.
To the person who wrote me and told me I need to know what I am talking about before I talk, I had already blocked you, but you pissed me off so much I just want to reply so I get the last bark (my dog told me to write this). &amp;#x200B; I did build 3 projects in WPF, and I thnk it SUCKS. Now, it is my company, and I am investing my own money and my own time, so how many projects am I supposed to build in your opinion, before I can comment and tell people that WPF is a slower to anyone that just want to build a quick desktop application. &amp;#x200B; As I mentioned in my other 10 comments, it is the right tool for the right job, and to the person who agreed with everyone else that WPF is made of magic unicorns and fairy dust, keep using it, but to any new programmer that wants to build a quick app, I would still biuld a Windows forms app. &amp;#x200B; So all you WPF'ers, keep on WPF'in and loving it if you do. I think the docking features alone in WinForms for a new programmer is easier to learn and easier means faster. &amp;#x200B; Wolf.
The other keywords to search for in regard to code generation is Code Weaving. Fody is an excellent framework for that https://github.com/Fody/Fody
I work for a small(ish) manufacturing corporation and I love it. We have lots of independent software teams (1-3 people) that operate without any oversight. This definitely can have it's downfalls, but it does keep things very interesting, if I think an app would would great as an electron app instead of the standard .net app, then I write it that way. If I wanna learn something or add something to a PLC, I can work with my controls guy and write the PLC code if I want. Want to use new c# features? I can go out and install whatever version of .net framework on the PC that I need, however I'm also the only person they're gonna call at 4am saturday night when it blows up. &amp;#x200B; There is different departments that have positions that do a machine per person and write the software and PLC code themselves and just dedicate to a single machine for a while. Since there isn't much oversight I don't have a lot of meetings except for people asking me to add things to existing software. I set up the manufacturing PCs the way I want, the software builds, deployment etc. The biggest downfall of this is that there isn't someone doing a code review telling me how I could do something better, but there is definitely lots of skilled devs that I can reach out to if I need advice or want someone to look something over. &amp;#x200B; It's never gonna pay as much as a job at facebook or microsoft or something, but I truely enjoy it and love the freedom, and I still get by fine (65k+ bonuses, 75k last year) and there is lots of other departments if I get burned out and want to work on something more PLC related or if I want to move into a complete software group (backend manufacturing stuff or IT)
Yes. I loved coding before it became my career, during my whole career (when progressing in it let's you!), and still love it now that I'm semi-retired.
There's a difference between knowing the JVM and .NET Framework or ASP.NET Core. From a syntax standpoint, a Java developer is essentially a C# developer and vice versa. Yes there are differences in their underlying technologies, to your point, but that is easily trainable by reviewing and learning the libraries, as I suggested.
Reddit's choice of background? I don't think that's the case. I've seen images with the exact opposite problem before. Transparent image, black text. Can't read it at all either. So Reddit can definitely display images with transparency fine. Moreover, if I click on it to view the image, which takes me to the file itself, on its own, it still has a white background. I literally cannot view it properly. I have no idea what you did to make it behave this way. Though maybe it's the fact that you posted it as a video instead of an image that messed up the transparency. Could be that my PC just doesn't support it or something.
Start thinking about what your new hobbies will be, once your hobby becomes a job.
The idea is that you authenticate with Azure Keyvault via AAD as the current user, AAD knows what groups the user belongs to, and Keyvault only gives them the password if they are in a group that has the right permission (over SSL). Azure Keyvault has the further advantage that you can change the secrets in one place and everybody gets to use the latest secret, rather than having to push out changes to the app or push out secret files to individual machines.
Coding is great, I don't even mind meetings. coding in a team requires meetings, and getting together and talking about how we plan to put it all together is also fun. But the politics of the larger organization, what to prioritize, and how much time you get, that's a drag.
I found it to be in the way, especially after the app was in production. Running migrations against real records was always scary, no matter how much testing we did beforehand. Also, in the Enterprise world everyone has a hard-on for the IRepository pattern and attempts to wrap EF in clunky interfaces that expose IQueryable anyways. They fail to realize that EF _is_ the IRepository. I typically prefer raw SQL statements from C#, with something like Dapper. I know it's not the cleanest but I like feeling like I'm in control.
&gt; machining &gt; a real grind Nice.
I have a personal class library project that gets reused in each project
Are you starting with C# or programming in general? If you want to make a website, you could start with ASP.NET Core. Might be a steep learning curve though.
Get a subscription to pluralsight (you might be able to get your company to pay for it) and check out the videos in the C# path. They give a good overview on what best practices are for most things C# related.
No. Please don't do this. Entity framework is your repository pattern. The minute you expose IQueryable outside of your interface you have created a leaky abstraction. If you move logic into your repository you've hurt separation of concerns. EF is mockable, which is where the real power of interfaces comes from- not some idea that you will switch persistence tech sometime in the future... This is a major fallacy.
I like Dapper with SQL queries in C#.
Ok, will take a look, thanks!
I work for a small company in the industrial automation field, I started as a programmer (coming from computer science degree I knew almost nothing about electrical stuff so I focused on PLCs and custom applications in java/C#) and gradually switched to a more “complete” position where I also deal with electrical and business stuff. I get to travel a lot to plants and customers all over the world. Overall my job is demanding, chaotic and unpredictable... but it’s fun! Always learning new technologies, working in different fields, visiting different countries... Of course that comes with some sacrifices, especially on the personal level given that a I spend a big portion of my year traveling, but when you’re young you have the chance to get a job as a test-ride and then decide what your future might be. Btw if you’re still interested in switching to a PLC programmer contact me, we’re expanding in the US market and we’re looking for talents!
Honestly I love my software dev Job currently I am only a junior developer and do not get as many development hours as I like but it is enough to get me through school.
What type of meetings do you typically find yourself involved in? Scheduling? Feature discussions? Complaints? Training?
18 years as a proffessional dev still enjoy it, I would not want to doing anything else.
I've seen this "imposter syndrome" thing so many times today. Today is the first time I've ever heard of this. What is it about computer science/software development that makes the imposter syndrome more common than other fields?
Yes EF can be your repository pattern. But what if you want to switch data access frameworks or a persistence model is not supported by EF or you want to use two data access frameworks? See my other comment to another comment to my original comment that expands on usage of the repository pattern. I also agree that you don't want to expose IQueryable outside of your repository. I wasn't suggesting that one does that, just that they wrap EF in a repository pattern for better maintenance and flexibility in the future. Truthfully I don't know if we are are having a communication problem as well because your last sentences make it seem like you might be making a repository pattern with EF. In general I think we agree on the usefulness of the repository pattern.
This isn’t a good reply to work off of. Code should be reusable for most cases or you are missing abstractions.
Do you code professionally or still in school? I’m not trying to be a jerk, but this reply is bad advice. If you are using OOP properly, most of the code should be able to move around. If not you are missing abstractions, design patterns or solving the problem wrong. Single Responsibility Pattern alone will help you get your code in a place where you can actually reuse it. You’d be surprised how much faster you can code once this starts happening.
my guess is its partially due to reddit circlejerk that it pops up everywhere, but my guess is that its very rare if not impossible to deliver a really clean piece of software. its the combination of how a writer/artist rarely feels that what they create is "good enough" and anytime you get an error it feels like you did something wrong (i mean, you technically did since the logic was incorrect.. but i think things are just too complex to be perfect in development)
Pp
Oh, yeah i study it and i kind of thought that i‘m in the unity subreddit. Sorry. The tipp is bad yes. But if youre a absolut beginner it is just to much to come with all of this. I thought its about Unity and tried to give a proper advice that will not cause more harm then good. Sorry if it was bad and thanks for correcting this.