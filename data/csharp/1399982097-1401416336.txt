I mostly mean the selection available. I personally use Eclipse along with a variety of test and integration suites, but any time I've been unhappy with something I've had the option to just use something else. 
This. I can't stand eclipse myself, and it didn't take long for me to just outright by a licence for Intellij during college and my last job. I actually miss it now lol I'm working in vs2005 and vs 2013 at work, although Resharper is quite nice.
It's easier to read If you have the change the object type you only have to do it on the right side It really helps out in generic programming where you can have something like Dictionary&lt;string, DTO&lt;object&gt;&gt; d = new Dictionary&lt;string, DTO&lt;object&gt;&gt;();
You save a tiny amount of typing, and in return lose some metadata about your program... I personally would recommend never using it. **But**, most C# programmers disagree with me. So if you care, here's some extra reading: * http://stackoverflow.com/questions/41479/use-of-var-keyword-in-c-sharp * http://www.brad-smith.info/blog/archives/336 * http://blogs.msdn.com/b/ericlippert/archive/2011/04/20/uses-and-misuses-of-implicit-typing.aspx
There are pros and cons to var Pros : as outlined in other posts Cons : Overuse can make maintenance/readability harder (IMO)
I try to be lol
&gt; It really helps out in generic programming where you can have something like Dictionary&lt;string, DTO&lt;object&gt;&gt; d = new Dictionary&lt;string, DTO&lt;object&gt;&gt;(); This is incredibly important (read: sanity saving) when working with some LINQ queries. In addition, if you're using [anonymous types](http://msdn.microsoft.com/en-us/library/bb397696.aspx) you ***must*** use the `var` keyword. (EDIT: Although, the anonymous type usage is likely outside the scope of the question asked)
Or DreamSpark for students. My daughter is "interested" in programing.
What metadata do you see being lost?
Well the declaration of intention, for example: var users = new List&lt;User&gt;(); ... Is not the same as... IEnumerable&lt;User&gt; users = new List&lt;User&gt;(); I don't just mean it compiles differently, I mean the second line says something about how I should expect to use and pass around *users*.
Or you can use dynamic instead of var. Always an option.
I see, I am still learning a lot and your examples have helped. Thank you. Could you show me an example of how you would link 2 tables and return columns from both? Here is how I am doing it now: Create a model that is a combination of both tables, use a LINQ query to join the tables and select the rows into a generic List, then loop through it and assign each row to an item in a list of the combined model I created. Is that the correct way? I would think there is a way so I do not have to loop through the results to get a model list I can work with.
I actually find it harder to read. My eyes stop at the variable name due to years of C#, Java, and C++ coding. But when using var, I have to read the entire line to figure out what the object is that I'm looking at. Not to mention, it brings back VB flashbacks for me...
For example var customerData = new CustomerDataRequest { X1 = Parameter1, X2 = Parameter2, X3 = Parameter3, X4 = Parameter4 }.Execute(); On the face of it the customerData looks like a CustomerDataRequest, but it is not, because of the Execute() call, which can be easily missed. CustomerDataResponse customerData = new CustomerDataRequest { X1 = Parameter1, X2 = Parameter2, X3 = Parameter3, X4 = Parameter4 }.Execute(); Is better, IMO, as it clearly shows that the customerData is not a CustomerDataRequest. --- var tends to hide things, esp when dealing abstract classes and generics. Again, the team I lead doesn't really use var 'all over the place', we tend to use it in foreach() and linq.
&gt;change it twice. This is the _major_ issue with var... it hides code changes and can lead to unintended consequences.
 CustomerInfo customerInfo = GetCustomerInfo() This declaration adds absolutely nothing against using var. And if you really suspect that customerInfo is an enumerable of penguins, you can just hover over 'var' and Visual Studio will show the inferred type.
I would say Eclipse is the closest experience of VS I have after finding this tutorial to emulate Intellisense: http://www.jackyliang.com/jackyresumecoding/2014/4/5/make-eclipse-work-more-like-visual-studio Eclipse still has its quarks, however, such as the Workspace paradigm which doesn't make any sense. Why can't I just create a new project wherever I want?!
I tend to agree with you. I pretty much only use var for anonymous types, or other generally short-lived linq results. But I definitely see two sides to the coin. I just don't like relying on mouseover intellisense to see what a type is when I'm reading code. And that's only in an IDE, not so helpful in a separate code review app.
It's been quite some years since I used Eclipse, but it was slow and things often didn't work correctly. Netbeans on the other Hand was faster and way more stable. But I started using IntelliJ IDEA sometime in 2010 (version 9 or 10) so my information is obviously not up-to-date.
I can honestly say that having used both plenty, I have never found Eclipse lacking anything I wanted whereas VS is missing what I consider basic refactoring options (without Resharper). 
Yep, there is more than one way to skin a cat :)
Use *var* when it makes **sense**. Don't use it **always**, use it when the **type is obvious**. foreach (var calculation in calculations) // Type is obvious, use var var customerList = new List&lt;Customer&gt;(); // Type is obvious, use var var customer = GetCustomer(); // Type is obvious, use var ResultType fubar = MySuperMethod(); // Type is NOT obvious, don't use var!
You can set up break points in the code for the button.click event handler, but I think the issue might be the order of your xaml. In xaml, the order that the controls are written in the source matters. Let's say you have a 400x400 size Grid, and inside the &lt;Grid&gt; &lt;/Grid&gt; tags you have 2 ListBox controls. If both of those ListBoxes are also 400x400 then what happens is the first one gets read, created and placed in the grid, then the second one gets read, created and also placed in the grid, ON TOP of the first, completely hiding it. Xaml is XML based, and XML is sequential. There's a few different ways to create 'dynamic' interfaces in WPF, where controls aren't even visible until something happens, but you have to make sure those controls aren't being hidden by other controls that are further down in your xaml. If you post a copy of the xaml you are having troubles with, I might be able to give you a more direct pointer as to what's going on.
We agree :)
[Android Studio](http://developer.android.com/sdk/installing/studio.html) is a full IDE that Google is developing with JetBrains to replace the old eclipse plugin. It's basically a skinned / targeted version of intelliJ for building for Android and from what I've seen it's pretty slick. Even before Android Studio, IntelliJ was sooo much better than eclipse for developing android applications.
The anonymous type is still strongly type. Not so much with dynamic. Big difference.
This. How many times do you have change types is directly coorelated the number of Indian DBAs at your company.
&gt; var users = new List&lt;User&gt;(); &gt; &gt; ... Is not the same as... &gt; &gt; IEnumerable&lt;User&gt; users = new List&lt;User&gt;(); You are very correct these two lines are not the same. And their intent is not the same. The 'var' says I am a List&lt;User&gt; object (which could then be treated as a IEnumerable&lt;User&gt;). And is strictly shorthand for List&lt;User&gt;. The second line can't (directly) be treated as List&lt;User&gt; anymore. You hid that functionally. Now this may be intended, but... The two lines are definitely not the same. 
Dynamics are still strongly typed, just done so at runtime rather than design/compile time. EDIT: But I get what you're saying that they don't provide _compile time_ type safety.
Our school actually started with NetBeans, but I was frequently frustrated with it's rather barebone features and frequent unexpected slow downs that I went to Eclipse for its customizability potential such as what can be done here: http://www.jackyliang.com/jackyresumecoding/2014/4/5/make-eclipse-work-more-like-visual-studio It's not perfect; far from it. It is however the closest while using Java IDEs to emulate VS. 
Ah so it's an IntelliJ plugin? Does this mean I have to learn to use a new IDE to take advantage of it? Does there exist an Eclipse version?
[`Enumerable.Union`](http://msdn.microsoft.com/en-us/library/system.linq.enumerable.union%28v=vs.95%29.aspx) requires that `Y` in this case be `IEnumerable&lt;T&gt;`. tibataw was asking how to combine `X` being `IEnumerable&lt;T&gt;` with `Y` being a single instance of `T`. Basically, `X.Union(Y)` will only work if `Y` is a collection which it isn't in this case.
No, it's not a plugin; IntelliJ is a full java IDE and android is just a stripped down version of IntelliJ. Google/Android is basically winding down their eclipse integration to be replaced with Android Studio. Yes, you will have to learn a new IDE, but it's a lot more straightforward in my opinion than eclipse.
What do you mean by "Android is a stripped down version of IntelliJ?" Android isn't an IDE.. Unless you mean Android Studio.
NetBeans had many features out of the box that Eclipse needed quite some plugins for when I used it. &gt; It is however the closest while using Java IDEs to emulate VS. IntelliJ IDEA is (I know, controversial opinion here :D) better than VS without ReSharper imo.
Don't forget anonymous objects which are very useful with linq 
You shouldn't have a method called MySuperMethod with a non-obvious return type.
There is only a disadvantage for newing up an object using var because it can make your code harder to read (especially to other developers). To me clarity is more important than saving keystrokes. 
Because hovering over the method to reveal the return value signature takes wayyyyyy too much time :)
What's the advantage of using explicit type names instead of declaring an object like this `var obj1 = new object();`? 
If you don't know what type GetCustomerInfo returns, then I'm willing to bet you have no idea what it does either. So having the return type doesn't really cause an increase in the research you need to do.
I have to strongly disagree. I find that using explicit types for local variables actually decreases readability. At the end of the day the types are not important to me. What I care about is the operations on those types, the stuff that is happening on the right-hand side of the statement. 
I've yet to see any example of that.
In that case I recommend F12. I find it to be a slightly bit faster.
I cheated. I wrote piugins for Visual Interdev (the predicessor to VS) that would allow me to use its editors and then compile on school computers.
Not sure if this has been posted yet but [this SO post](http://programmers.stackexchange.com/questions/125262/should-i-encourage-junior-developers-to-use-explicit-or-implicit-typing) really drove the point home for me.
It does actually, when the text is right there in front of my eyes. 
I haven't in any real life projects found a case where using var would reduce readability. I would rather say that MySuperMethod() has a bad name. Instead of using ResultType as type I would rather name the method to something like MySuperResultTypeMethod(), or perhaps even refactor it entirely.
Well, you've taken my one-line example and added your own context in order to make a point. And quite frankly I'm a little annoyed because I'd never write code as stupid as your first implementation of *SystemUserArchTypes*. It doesn't even require a List&lt;&gt;. But even then, I consider this: IList&lt;User&gt; users = new List&lt;User&gt;(); to be better then var. I can already feel the swathe of anger, but there it is. The left hand side of the expression is your declaration of intent, whereas the right hand side is your declaration of implementation. It's been that way for a long time, and yeah, C# goes out of its way to make you explicit in what you're doing, but that's a great thing, really.
Start building it yourself, and then come back when you're stuck on something. You're starting on the right track that you'd have a Room class with a list of Users, and that when a user talks, it's rebroadcast to every other room member. Your user class would contain something like a nickname and a reference to their connection. The other thing you'll find useful is the use of StreamReader, which will make it easier to asynchronously wait for entire lines of text from the NetworkStream.
It's not about you though, it's about declaring what your intentions are for the next guy who has to read your code.
Right, but then why try to remember this rule instead of just typing a few keys more? I mean, what does **var** actually *give* us?
Thanks for the quick reply! So basically I'll use something like - await StreamReader.ReadAsync(TcpClient.GetStream()); 
I meant android studio
It's more like: var reader = new StreamReader(TcpClient.GetStream()); var line = await Reader.ReadLineAsync(); It's worth noting that you only get access to TcpClient.GetStream() on connect. What you need to do at that point is prepare your user class with a reference to that TcpClient. What you then do is await reading a line, and once it's been read - await reading another line, rinse and repeat.
&gt; The left hand side of the expression is your declaration of intent What intent? I've been using C# since version 1 was in beta and I still can't gleam any sort of "intent" from a line of code like that. 
&gt; In every single example I've seen where var is considered bad, the real problem is poor naming of variables, methods, etc. The great thing about var is that highlights these problems instead of allowing you to sweep them under the rug.– KyralessaDec 19 '11 at 18:18 . &gt; Arguably, the real problems with the 'bad' example are the facts that a method with that name a) returns anything at all (when Load is a command) and b) returns a Stream, which isn't by any stretch of the imagination something that could be regarded as 'image data'.– AakashMDec 15 '11 at 9:47 Yep, that about sums up most of the arguments against var.
The intent is that I'm using an IList&lt;User&gt;, then the right hand side is saying "and I'm using the default implementation of IList&lt;User&gt;".
Well, I'm not on board with liberal use of ?: either. It's not that my brain can't 'parse' it; it's just that I like keeping the code simple, clean, and *self-explanatory*. But either way, like I said in my original comment, I know I'm fighting a lost cause here. I just wanted to make my point heard.
But why go searching for every place it's used just to get that, when instead, the simpler alternative is to just not use var?
Yes, I just did, it works fine.
Which one is clearer? Which one is easier to maintain? Dictionary&lt;string, Func&lt;string, string, int&gt;&gt; funcs = new Dictionary&lt;string, Func&lt;string, string, int&gt;&gt;(); ----- var funcs = new Dictionary&lt;string, Func&lt;string, string, int&gt;&gt;(); ---- If the declared type adds no new information then it's nothing but redundant noise. 
Abstract interfaces don't have "default implementations". So I stand by previous assertion that people who use that syntax don't know what they are doing.
If your functions are so long that you can't see how a local variable is being used you've got far more problems than can be solved by explicitly typing a local variable.
I believe it was originally intended to only be used for anonymous types. The ability to use it everywhere just kinda came as a side effect.
Ok, lets look at this again: ResultType fubar = MySuperMethod(); // Type is NOT obvious, don't use var! Well what the heck is a ResultType? Is it an enum? A class? A struct? Does it support collection semantics? Is it disposable? Type names alone don't actually tell us anything when the naming conventions are bad. And if the naming conventions were good we wouldn't have MySuperMethod.
I would like to add that you are reading it backwards. IList&lt;User&gt; users = new List&lt;User&gt;(); What this is really saying is that "I am not using the default interface for List&lt;User&gt;. I am instead choosing to use a different interface because of some unstated reason." 
Anyone have issues with E&amp;C causing errors and crashes when attempting to change controls and properties in the design view? I know it doesn't work, but sometimes I forget my program is running and attempt to change something in the Designer, giving me errors and infrequently Visual Studio crashes. Seems like the whole Designer should be completely read-only while the program is running.
I cringed when I saw it, too. However, there are cases where a class implements multiple interfaces containing methods with the same signature, in which case you need to cast them to that interface before the method can be invoked. So, I uncringed. Still, that is something that was the case whether or not var is involved. You literally *cannot* use var in that scenario. Oh, wait, nm: var obj = (IInterface)new Class(); I still feel like you're not losing anything there, though. The intent is pretty damn clear. No matter how you slice it, you're declaring a type on both sides of the "=".
Like i said you're just saving some keystrokes. And in your example it is obvious what is but when going through var after var especially when debugging spaghetti it is much clearer to me and less tedious. But that's me.
No. What I'm arguing is that merely knowing the name of the variable's type doesn't actually tell you everything you need to know about it. 
&gt; You literally cannot use var in that scenario These days that is my criteria for not using var. If you accept it as a purely objective rule there is never a need to debate a particular case. My second choice is actually to "never use var unless you literally have to". Again, it is purely objective.
Actually, List&lt;User&gt; is the default implementation, where other collections can implement the IList&lt;T&gt; interface with different performance metrics or threading implementations; or perhaps implement the interface with a specific reification of the type parameter T. Here's a screenshot of just some of the things that implement List&lt;T&gt; in .NET: http://imgur.com/GMTrvjh By the way, interfaces are always abstract, you should read up here what they are: http://msdn.microsoft.com/en-us/library/87d83y5b.aspx
Rule CA1002 explicitly forbids exposing generic lists. While not exactly on point for local variables, it does disprove the notion of a default implemention of IList. http://msdn.microsoft.com/en-us/library/ms182142.aspx 
No, you don't understand why that warning is given. It's about exposing the right interface, not selecting the right implementation. 
Just to name a few: 1) LINQ 2) Anonymous Types I saw FizixMan say something about Anonymous Types...however these are outside the scope of your question as to what they _actually_ are.
I've got frequent issues with breaking out of E&amp;C and having my project binary objects then locked, forcing me to restart Visual Studio. Just upgraded to Update 2 and hoping that has been fixed. Other than that, there's all of the issues with E&amp;C with LINQ
Yeah, DreamSpark is way easier to get than bizspark and your "daughter" can have access all the way through college. And depending on the school as long as she has a .edu address. Though, the application for bizspark is pretty straightforward, pretend to have a startup, get free M$ everything. It's so easy for startups to fail. Funny how the timing is so similar to when you are supposed "graduate" to a paid account. Then it's time to rebrand and resubmit. 
And yet it suggests three implementations to use instead and doesn't even mention the possibility of using IList as the return type. Your fascination with abstract interfaces suggests to me that you were once a Java EE programmer. That's the only community I know which is so heavily invested in abstract interfaces that they try to cram it in everywhere.
Can you? On older versions of C# you couldn't because members on anonymous types were not public.
 public IEnumerable&lt;User&gt; GetUsers() { var users = new List&lt;User&gt;(); //logic to populate users goes here return users; } Yes, this is leveraging the fact that List&lt;T&gt; implements IEnumerable&lt;T&gt;, but it allows a class to expose a mutable collection as an immutable one (and I know that can be made untrue if consumers have/create awareness of the actual implementation and do unhygenic casting, but some people are really hell-bent on shooting themselves in the foot). Back to my point: as a consumer, I am unaware of exactly what sort of object the class uses under the covers to produce that IEnumerable&lt;T&gt;, I'm just aware that I get something that adheres to that interface back.
var can cascade changes in your codebase esp if you're architecting your program correctly via injection and use of interfaces. A recent and reproducible instance of this occurring in my organization: We changed from OledbConnection =&gt; SqlConnection (long story). Luckily the code looked like: using (var connection = new OledbConnection(/*etc*/)){ connection.Open(); using (var command = connection.CreateCommand()){ command.CommandText = "etc"; using(var reader = command.ExceuteReader()){ //etc } } } All we needed to do was a find and replace on the new OledbConnection and the entire DAL worked perfectly fine.
Up vote for answering honestly, but oh god I hate it when people write that crap. Data binding is unaware of static types. As soon as you attach that to something like a DataGrid it is going to lookup the real type and see that it has a List&lt;User&gt; and react accordingly. Is it really so hard to write this instead? public ReadOnlyCollection&lt;User&gt; GetUsers() { var users = new List&lt;User&gt;(); //logic to populate users goes here0 return new ReadOnlyCollection&lt;User&gt;(users); } *** Fun fact: You actually take a small performance hit when calling small methods on via abstract interfaces instead of public interfaces. Methods on abstract interfaces are virtual. That means the JIT compiler can't inline them like it can for non-virtual methods on a class. 
Yes, you can: using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace ConsoleApplication { internal class Program { public static void Example(dynamic Parameter) { Console.WriteLine(Parameter.X); } private static void Main(string[] args) { Example(new { X = "ASDF" }); Console.ReadKey(); } } }
I checked the IL code and it looks like they are compiling it as `public` now. Well hell, time to refactor some ugly code.
True, but I was just saying that it was another option. Not that you should use it in those situations. Although, considering I'm getting down voted, apparently a bunch of people think that you can't use dynamic in that situation. Either that or hate the dynamic key word. Note sure which.
You don't actually need an .edu email. Even though I was in jest we got our middle school tech club members (6-8 graders) into the program. Just need transcript for students.
Even in VS2013, with the projects I work on, E&amp;C always has an excuse not to work. We thought the 64 bit support in 2013 would do the trick, but now it complains about optimizations even on debug builds with optimizations disabled. I presume it's due to the fact we have so many cross referencing projects and assemblies, and I realize that edit &amp; continue working in projects as complex as ours would be no small miracle, but it's still frustrating to have a key upgrade feature be virtually worthless to us Additionally, I haven't taken the time to fully track it down yet, but in some projects where we write output to a debug console in debug builds, which is spawned via a P/Invoke (AllocConsole), the new VS2013 debugger causes the output to vanish. We have to switch to the legacy debugger (which doesn't have the 64 bit E&amp;C or enhanced Autos window support) to make the output appear.
Relevant username is relevant.
And it the return type is anything *other than* `CustomerInfo`, you need to rename the method.
I'd definitely favor the first example over the second.
I think we'd have a harder time figuring out when it works.
I hope you're not wearing glasses.
I don't. Edit: only while I'm in a school lesson and I need to read something from the whiteboard which is too far away 
So you indeed C-Sharp! Hahahahhahahahhahahahahahahahahhaha *rolls on the floor laughing* ^^^^^^I'm ^^^^^^so ^^^^^^sorry!
hahaha ^^^np ^^^:P
C hashtag? I don't get it... Shouldn't it be #C?
 var query = from c in customers join o in orders on c.ID equals o.ID select new { c.Name, o.Product }; http://www.dotnetperls.com/join
My two rules: * Always use `var` unless you can't. * You can always use `var`.
I rarely use it when I don't have to but I have to agree there are times when it just is useful.
So... Your task is to program a stripped down IRC server? I'd suggest taking a look at the IRC RFC
Nope. I do write [SIL-4](http://en.wikipedia.org/wiki/Safety_Integrity_Level) software though. Guess what, no var. Instead, everything very explicit. So, okay, not everyone writes defence software, but why not always hold yourself up to a rigorous standard like that, anyway?
Hmm.
That file doesn't even manage project files. They do however have a new file called [.kproj](https://github.com/aspnet/DependencyInjection/blob/dev/src/Microsoft.Framework.DependencyInjection/Microsoft.Framework.DependencyInjection.kproj)
Xamarin shirt?
project.json is packages.config + .nuspec + .csproject stuff &gt;Include files via wildcard: &gt;&gt; "code": "**\\*.cs;..\\Shared\\*.cs", &gt;Exclude files via wildcard: &gt;&gt; "exclude": "more\\*.cs", https://github.com/aspnet/KRuntime/blob/dev/samples/HelloWorld/project.json#L3 
Lookin' sharp, there!
You're cool in my book.
It would be better if it was blurry.
*hehehe*
I think it would be much faster for them to ask when it doesn't work. I develop a silverlight client (i know, i know) and a 64 bit server and all the time i get messages along the line of 'cannot edit a 64 bit application' or 'cannot edit while debugging silverlight'. So, I'm sure it does work, but when? Even vb6 had 'edit and continue'
But where? I want one!
From completing the Xamarian app? Still waiting for mine
I c what you did there... ^^I'll ^^show ^^myself ^^out..
they should start by giving up edit and continue as a retarded idea and making the ide like recompile in the background on save (optionally of course) because that would actually be achievable
The error you are getting isn't because the value is too big for BigInteger but rather that the value is too big to be represented as an integer in .NET. Instead of using new BigInteger(...); use BigInteger.Parse("..."); This should solve your issue. 
We vehemently agree on the first point, but I'll politely shrug at the second; I haven't bothered diving in deeply enough to how the compiler and JITter works to speak sanely one way or another on that. I will say that I've been pleasantly surprised enough times when I've taken a look at source/decompiled BCL binaries that I'm pretty confident when I suggest "don't try to outsmart the compiler." There can be times when it's true, but more often I end up writing obfuscatory code that is either minimally more performant (what was that about premature optimizations?) or, more likely, never properly benchmarked (so why bother over-thinking it in the first place?).
I'm rather excited by this. :D
If it makes readability harder it means you don't have a well named variable and you need the explicit type to know its context.
Yup! 
D:
It 3 weeks for me to arrive and I live in the Netherlands. But yeah it was from that app
http://xamarin.com/sharp-shirt there! For free! :) 
I got the email from PrintFection a couple days ago. Shouldn't be long now. No signs of them pulling the event any time soon.
Still waiting for my shirt, but I got the Xamarin stuffed monkey the other day!
What IRC server is #C on?
I see, that helps a lot! Thank you for that link, looks like some good information there I can read up on.
No problem. And as was said earlier LINQ is much more than a thin SQL layer. To me it is first and foremost a generic collection manipulation "language". I love having access to public content of objects in simple one-liners. Although, be careful because too big one-liners are notoriously hard to debug and understand. For instance ReSharper can help you make LINQ statements, but sometimes these get incredibly hard to understand. There's no problem with splitting the queries up. You see, none of the manipulations/queries are applied until you actually use it - e.g. say query.ToList().
And now, in c#? :)
Color me unimpressed unless it comes along with more substantive changes (like, say, no longer quietly transforming wildcard includes).
Someone please ELI5 to me? What are the advantages of .json?
Got mine last week in the UK
I just toss the performance issue as yet another reason not to play games with return types. I seriously doubt that it would even show up on all but the tightest inner loops, but why expend effort to make something slightly slower than it is by default? To continue this line of thought, any attempts to get the Count of the returned object is just going to involve a type check and cast to ICollection. So not only are you paying to turn it into an IEnumerable, you are also paying to turn it into something else. This isn't a premature optimization; it is just wasted effort.
It's easier to read (by humans), mostly. Also, since they're changing the format anyway, they can make it better than the previous one (they've had plenty of time to realize what is and isn't a good idea in project files).
How can I adjust build targets using this? Why would I use freaking json for this, where I can't even use comments?
DataTables...now there is a name I have not heard in a very long time. There are various ways to answer that, but it really depends on a number of factors (amount of data, number of records, number of tables to update, etc). * Simple approach: write your own parameterized queries is sql and ado.net. Look at Dapper or other light ORMS for help executing the query. https://code.google.com/p/dapper-dot-net/ * Heavy approach: wire up EF or NHibernate and use that. Either way, if you data is in a DataTable, you might have to resort to looping through each row in the DataTable and do your inserts that way (bulk insert is something to look into tho).
Holy crap! You can hover over that on Reddit? In all seriousness, (A) the hover takes that much more time and takes away from fluid reading and (B) not all code is read in Visual Studio (see: Github, Reddit). Don't get me wrong. var myList = new List&lt;Penguin&gt;() is great. But var isn't always best practice.
Hmm, Dapper looks interesting. Might try it on a home-project :)
I don't get it. It's free, but I need a Indie license to run the store app? Then it's not really free...
:o
I thought you could run it with starter, I was running an evaluation period of xamarin indie so I'm not sure. 
How do you want the output displayed? Usually you would use the EventLog. edit: If you really want to be non-standard, http://msdn.microsoft.com/en-us/library/ms683502(VS.85).aspx Also another great way would be to build a web page with the output. 
Recently started doing C# (32K LoC so far). Even the t-shirts rock!
Agile development really has become a big pile of buzz words.
I haven't yet run into a problem with it, but my team is very good with naming variables properly and stuff. 
most people that do this, have a second app that lives in the tray that talks to the service. Services, by their nature, don't usually have a UI.
This is exactly what we do. We have a number of services that run as Network Service, so they can't interact with the desktop. We have a small forms app that sits in the system tray and communicates with the services via sockets to display logs, alerts, status, etc. 
If you're mainly writing then raw sql is not that bad at all (parametrized sqlcommands). If speed matters, then you can't get faster than SqlBulkCopy, which is a bit tricky to get to work correctly (identities), but worth it with speed (this is MS Sql Server only though). I'd avoid EF / nhibernate if you don't need to read the data back, they suck at writing it down. I don't know about dapper. Remember to always have explicit transactions, even with the ORM tools; implicit transactions often make things really slow even for small data.
are u server op?
Honestly, not a whole lot. 
Yeah, I would have preferred YAML over JSON for configuration files. 
How long did it take to arrive from first order?
[Sort of client](http://github.com/Banane9/Iris)
Glad to have helped you! ;)
Around 2 weeks
Step 1 is to note that the database and your app are two different things. They communicate through protocol, leaving you with multiple ways to do it. Table adapters (DataTables tied to SQL in a DataSet) are one way. EF is another. They are data retrieval objects, which makes "compatibility" a murky water. The only clear thing is that EF doesn't deal with DataTables, and DataSets don't deal in POCOs. That said, they are 100% compatible in that you can use one or both to talk to the same database - even at the same time. EF is slower, but it makes life much easier as a programmer by providing concrete objects and a very nice interface to handling those objects as an enumerable structure. It offers great predictability and foundation for unit testing, too. DataSets are an ugly structure that is full of pitfalls. (I have to check if a field is null with a separate property before I get it or you throw an exception? Fuck you.) It is, however (when functioning nominally) rather simple to work with. If you connect a TableAdapter 1:1 with a table, it can automatically generate insert and update methods that you could use to do what you want. And there's also other stuff like DbCommand.ExecuteReader, which returns a reader that you can DataTable.Load with. Or DbCommand.ExecuteNonQuery(), which will tell you how many rows were effected for a CUD command. This is a solid option if you find the extras that come with DataSets a pain in the ass and you don't feel too guilty about having nasty SQL literals in your code. (If you *do* have them, please put them in a read only property somewhere else. Nobody wants to see that shit when they read your function.) Given what you said about wanting to "drop this in", your best option is almost always to go with the flow of what's been done. If they're using DataSets, try and find a TableAdapter that points to the table you're writing to. If not, create one. If there's SQL everywhere else, go that route. EF is a solid choice, and my preference when I have my druthers, but there is a notable amount of setup and learning curve to it. And if it's just going to be one little island of the same damn thing done a different way? I'd prefer consistency unless it's truly isolated from everything else. (E.G. One of my projects is heavily invested in using the DbDataReader method, but the custom logging and continuous integration functions are 100% EF.)
json configs, because comments are for wussies.
Pluralsight. Lynda.com. YouTube. You can also just Google it there's a lot of videos out there. Plural sight is my number one choice. 
Idk, but it's on the whole network.
Its less verbose than xml, has array types. 
Thank you for your detailed answer, I appreciate it! I am not in school, and this isnt homework. Im afraid I cant explain any more.
This looks great! Thank you :)
This place: [Microsoft Virtual Academy](http://www.microsoftvirtualacademy.com/#?fbid=CbOngfUbWiT) Start with Bob Tabor videos(Called C# Fundamentals) he explains quite well and you can just skip the ones talking about what you already know AND to his videos there are also small quizzes that you can take :) I'd then skip to other C# videos, there are plenty :) 
Easier to read? You can't even use comments.
It doesn't duplicate every tag name, for starters. Yes, you can't use comments, but if you need comments to explain your project file, you're probably doing something wrong.
Some of his content is here (and free): http://channel9.msdn.com/Series/C-Sharp-Fundamentals-Development-for-Absolute-Beginners Might be a bit too "beginner" for you, but it's worth looking into.
Yes. Just sign up and go nuts :) ps: there are also other topics
Im on my phone so i cant check but in MVA there is a a updated version so make sure you refer to an updated one :)
This is the kind of soul-sucking concept that makes Monday meetings drone on and on... It's on the task list, it has an estimated amount of time (pulled out of an orifice somewhere) and will require developer time to fix. Put it on the list, and assign it to the next available developer. Call it what you like, I'll fix it when I can.
http://thenewboston.org/list.php?cat=15 
It's not that good
I'd like the same shirt in Visual Studio Purple
A few things to consider here: 1. What license model is going to help you get into a new client 2. What license model is going to help you grow an existing client 3. What license model is going to help you make the most net profit 4. What licensing conditions and technology are going to help you to encourage license compliance 5. How many clients and users do you currently have? 6. Are all of the devices your app is going to be installed on internet connected? 7. Do you have any inherent preference for named user, concurrent user, installed device, concurrent device, or site licensing? Given that you're new to this, I'd recommend that you encourage proliferation of the product but make sure that you can track installations. Think business model first. 
&gt; I am pretty scared of it getting cracked. Don't be and don't worry about it. It's just not possible to prevent this 100%.
Just ordered my shirt and monkey 🐵 because of this thread :D
You can use the indie trial :)
&gt; What a buggy piece of code/software. And &gt; It's not the computer's fault! Yes... Nobody sayed it was.
You need a login, which will give you access to the Starter license. You'll probably be contacted by a sales engineer. If you use a garbage account, you can just ignore it. If you are interested in Xamarin development, use a real email addy and you can see if you can snag a discount from the sales engineer for you or a team (they love provisioning and helping new teams spin up).
That's really not an easy question to answer without seeing your business object and tables. If each corresponds to one table, it's very easy. You'll want to do "Code First" EF. If you have business objects that are more complex (IE require joins to get a field from another table [foreign keys excluded - EF handles those well]), then it will probably be easier to build a Data Model as /u/dregan suggested. This will create new entity objects based on your tables. The framework creates these as partial classes however, so it would be very easy to supply a constructor that translates from one object to another.
Any particular reason yall use sockets instead of named pipes? /curious
In some ways, having your software hacked is a good problem to have... It means your software is popular enough for people to want to hack it.
Mainly because it's been migrated piece by piece over the last ~9 years. Originally it was one service (the first .NET bit we wrote), and a bunch of VB6 apps. This service acted as a central trace and error logging service for all of the VB6 apps (sending logs from client sites around North America back to my server each night). From there we spent years rewriting 10 libraries and apps into .NET, while adding ~20 more libraries and services. The TCP/IP library in VB6 was written around third party components (/n Software), so we used the same components in .NET to make everything simpler (this was back in 1.1). Today, almost all of the VB6 is gone: We're less than 2 months from the first 100% .NET release, and from there I'll decide where to take things (but honestly, what we have is running on 700+ sites, is fast, and is rock solid, so I'd need a pretty good reason to abandon it).
Or someone else did something wrong and you need to hack around it...
I think you will seriously regret that choice if you are planning on doing any kind of serious development work. Processor speed, amount of memory, and hard drive space are all likely to be an issue. Visual Studio will choke. No way you should go with less than an i5 and 4GB memory when running Visual Studio, at a minimum. I just bought a refurb Lenovo Yoga 2 pro from Best Buy for just over a grand. You need something more along this line for running Visual Studio and being productive with it. http://www.bestbuy.com/site/lenovo-yoga-2-pro-2-in-1-13-3-refurbished-touch-screen-laptop-8gb-memory-256gb-solid-state-drive-silver-gray/4430006.p?id=1219098137739&amp;skuId=4430006
Already have a basic understanding of programming? Learn by doing! Start a small project with a simple but achievable goal and apply your knowledge. If you hit a road block when working on it, you are doing it right.
You're saying "licensing," which is how you determine who has permission to use your app, but I think you're asking about copy protection, so that's what my answer will be. What you have to look at is the ratio of effort to steal your software to the demand of theft. If the demand gets high enough, it will be stolen. Period. Unless you're selling saas, in which case it will just be duplicated. ~~Even if you make a physical device, if the demand is high enough, there will be copies coming out of Shenzen in a month. On the low end of the copy protection scale is the honor system. A simple key system works well for most software in the $5-20 range with a medium demand. A simple one uses a one way hash, just like password storage, with some secret appended to it. No matter how you obfuscate it, with enough demand your secret can be teased out. A little better is a message signing system. For the user it's the same, they register and get a key they put in their system. On your end it works a little more like pgp. With either of these, including the computer's MAC addresses and some user PII do a better job of locking it down to one computer/person. But both can be defeated with enough effort. Or, have a login/phone home system. Much easier to implement, but you'll have an obligation to keep your servers up or release an open version at eol. Or you'll need a partner like Microsoft or Valve. On the high end is an FPGA connected by usb that runs significant part of your program. (And these have been broken, too.) Your software can always be cracked to be told that "I'm activated." What I'd do is start with a basic md5 hash. User's email address and name + your secret key. Generate it on your server when they buy. Desktop app runs the same process to activate. When someone puts their key up on the pirate bay, add the user's Mac address and lock the key to one machine for the next version. Next level, use the message signing/cert version of that once someone figures out your shared secret. If someone cracks your private key, congrats, you've hit the big time. Most likely they'll just crack you so your program just thinks it's legit. Now you can play cat and mouse by detecting when the crack is run, and crashing or doing weird things. Or just have the program show a picture of you and your kids and ask the person to pay you for your time.~~ Honestly, the best form of copy protection is reasonable pricing, fair usage terms, favorable upgrades, and convenient payment options.
There are many commercial solutions out there. My company uses Wibu. You should check them out.
I love my Surface Pro. It runs VS like a champ 
&gt;DataSets ...(I have to check if a field is null with a separate property before I get it or you throw an exception? Fuck you.) Upboat! I'm on a maintenance cycle on an app that's using a custom DAL that's all wanna be enterprisey and "reusable and predictable" and full of DataSets and DataTables. Not a single model class in sight, nevermind generics. Iterate through each row, null-check each mofoing field in the row, and load into simple data types, and then pass *all those* around I subsequent methods all over the webforms project! Not a single OO model to be found. ORMs were NIH so they are suspect. [Expert Beginner level shit](http://www.daedtech.com/how-developers-stop-learning-rise-of-the-expert-beginner). Fuck my maintenance dev life. Look, ADO.NET is great and fine. It's devs who stop learning and stick with the patterns they learned/"perfected" in 2004 who suck balls. 
I should mention that size and weight are both big issues here. 3 lbs is a lot and something this size when it's on your back along with a tent, sleeping bag, food, water, etc. creates problems. If they weren't issues, I'd just use my 13" Macbook Pro which I put Windows 8.1 on.
SqlBulkCopy is indeed *very fast* But SqlCommand is also pretty good. using (var conn = new SqlConnection("connect string here")) { conn.Open(); using (var cmd = new SqlCommand("sql goes here", conn)) { cmd.Parameters.Add(new SqlParameter(stuff here)); using (var reader = cmd.ExecuteReader()) { I can write this stuff in my sleep now. EF isn't bad. I think it's more reliable than NHibernate. But it takes away a lot of control. 
Listen to this guy. I used Bob's videos too to start with C#. Free, good, concise. I did have previous programming experience but neither in C, C++, C# or Java. I watched the videos, did the test programs and was programming a nice side project for my company less than two weeks later (global company, lots of AD forests, wrote an app to find, disable and move tombstones AD computer accounts) Just by using what I already knew about programming, his entry videos, and for the tricky parts, Google. Made using the C++ like language for Arduino much easier too, which I got hooked on after the C# project. This is a good year to learn new stuff and do projects :) 
Straight up go buy whatever laptop costs roughly $500 and has a 15.4" screen. Today that should run league of legends at 30 fps, and visual studio no problem. Some people don't like 15.4" for coding (too small), but then you shouldn't be buying a laptop for code in the first place if that's the case. I'm on my third toshiba satellite (new this year, no touch screen, slows your computer down massively), they've never done me wrong. I've had a few hps and a giant dell server (&gt;$20000), but for writing code. Hands down, $500 laptop, no touchscreen, full keyboard with a numpad. That's it, that's all, nothing more, nothing less. (If you want a little more, get a 'code' keyboard, sexy as all hell). I use this laptop for visual studio, nodejs, java, python and frequently pin all four cores with machine learning processes and it runs perfectly. If it ever dies, who the fuck cares I only paid $500 for it. I carry it everywhere in my bag, usually with a D&amp;D manual as a heatsink for my lap so my crotch doesn't light on fire when I play games.
I have a surface 2 (not pro) and it doesn't run x86 or x64 executables because it actually has an ARM processor - meaning you can't even install chrome, visual studio, or nodejs on it (without ridiculous, ridiculous hacks). It's essentially a big cell phone, without the cell part. That being said, it's beautiful to type white papers or anything not to symbol intensive on. Hands down the best for taking notes at lectures or meetups (get an app that lets you doodle and write so you can draw diagrams). Oh and netflix, obviously.
Dunno what this has to do with c#
Just to clarify, weight and size are issues here. A 15" laptop won't work well packed with food, a tent, water, a sleeping bag, etc.
Yeah well that write is sql injection partytime, regardless how well you validate your datatable. Never concatenate sql as string (nor format string). Read up on parametrized SqlCommand (simple example of working code here: http://stackoverflow.com/questions/7174792/does-using-parameterized-sqlcommand-make-my-program-immune-to-sql-injection this is just to get you started). If you make helper function like AddParameter&lt;TParam&gt;(SqlCommand cmd, string paramName, DataTable dt) some of the bulkiness goes away as well. A simple help for readability is to use C# raw strings like this (prefixed with @, changes how escape backslash works, RTFineM :): var myQ = @" select Id, e.Name, b.Name as BossName from Employee e left join Employee b on (b.Id = e.BossId) where e.Id = @EployeeId"; In our current project we use EF6 CodeFirst and it has been "good enough". Migrations with database are a bit tricky but doable. My last experience with nhibernate are from a long time ago so I can't comment that. What I can say is that for 1-2 inserts per second EF is good enough, but 50-100 is already getting hard (need special setup for context, removing automatic change notifications etc.).
God I hope it's not one of those stupid USB keys. They get lost, they easy to break on a laptop. Fuck I hate them. Side note, turns out I'm able to plug them into the server and use some software to virtually plug it in any machine on the network. After having to buy replacement because they got broken or lost in a machine shop I stopped caring about how their company wants me to use the software. If you don't use these USB keys, good on you, please never consider it and ignore my rant.
Pluralsight.com Best training on the net . Really. 
Thanks guys for all your suggestions. Much appreciated
Second this and they have a broad spectrum of videos in different Topics. We got a subscription free through school and pretty much the whole class agrees that it is an awesome resource. I know some really big companies that use it as well for their employees. 
According to their blog some people there make 1/2 a million a year. Another tutor said that many progamming writers have stopped writing books and instead just make the videos. 
I have about 24 hours of training videos at http://www.educator.com/learn/computer-science/c-sharp/snape/ If you are in school, you might already have free access.
Thankyou! I've never been given magical internet currency before!
Its still relevant yes. Just use VS2013 Express instead.
Oh I have VS2012 Express because I don't have Windows 8. Is this still okay to use? It says in the book it wants the 2008 version. 
Of course! VS2012 is great! There will be a few tiny subtle differences but nothing you can't handle.
Great, thanks a lot!
Make it a function inside the class and then just call the function.
Yeah, that is entirely possible. I'm just wondering if there's a way to do it with the += symbols. For instance, you can do DateTime += DateTime iirc.
That's possible, it's called [operator overloading](http://msdn.microsoft.com/en-us/library/aa288467%28v=vs.71%29.aspx). You can't overload +=, but you can overload +, and the C# compiler will then let you use += automatically (by doing a + and an =).
You actually have to overload the + operator and += will use this as s2 = s2 + s1 Operator overloading tutorial : http://msdn.microsoft.com/en-us/library/aa288467(v=vs.71).aspx
Thanks a lot EscapeLizard! I'll use this tutorial :)
Thank you XeeXkr! Appreciate it.
most of the logic there is making sure you dont get words split up. ex: "A variation of the comm on lorem ipsum text has ect..." fixed to "A variation of the common lorem ipsum text has ect..." [Heres it is in action](http://i.imgur.com/zuyCbOQ)
Find a good tutor as your friends while you are learning, and practice your skills in a real project. FYI,I'd like to offer some help if you need.
I don't think it'd make sense to take a laptop to that then.
You'll miss out on quite a few new features with C#3 instead of the latest.
Seconded on a commercial solution. Anything you write yourself is either going to be ineffective or cost you a lot more in development time than you would spend on a simple ootb solution. I work in software licensing myself (not for Wibu in case you thought this was a shameless plug!) and the number of considerations that go into an even remotely robust solution are phenomenal. Have a look around at the different offerings on google.
Exactly this. Someone who wants to crack a system will do it if they have the drive. Even if they don't use reflection/decompilation to get an estimation of the source code, they could use hardware to read the details of commands sent to and from the CPU (although this might be overkill for an interpreted language).
I don't think there's a Learning C# for the latest version though unfortunately.
http://bit.ly/1iOIW67 This led me to [this course](http://www.microsoftvirtualacademy.com/training-courses/c-fundamentals-for-absolute-beginners), which should be more than enough for what you need. I don't want to be rude, but you need to start making a habit out of googling first, and only ask questions if that doesn't help you. 
Thanks, I'll look into it!
No idea :) But good luck and have fun with C# anyways!
Some think so. There are even those who kick the PC and call it names when the software freezes and won't respond to the user commands.
It's free, I think it wants you to register. At least you shouldn't worry about being unable to use it. I would suggest to upgrade to Visual Studio Express 2013 For Desktop since it's newer and has some nice new features.
Yea, but those don't get the difference :D Especially a programmer should know it, which is why I pointed out this minor thing :)
The non pro surfaces are borderline useless. It's like an iPad with far fewer apps, much worse battery life, insanely heavier, worse touch experience, and from my experiences it's slower. The only benefit non pro Surfaces have is Microsoft Office. And I'm sorry, but that's not enough for such a shitty device. The Pro is a full x64 Intel chip with full conversion utility from desktop to laptop to tablet. Oh, and note-taking? If you like the non pro, I'm betting you've never used the Wacom digitizer on the surface. Incomparable. 
do you know what DRY is and/or means ? edit: that try/catch also smells...
https://www.khanacademy.org/computing/cs/programming/arrays/p/intro-to-arrays This is great. It's in javascript, so they don't use foreach (they use for and while) but you get the gist.
Ah ok. For some reason I thought this was all on the same machine (probably the context of the thread).
public static Stat operator+ (Stat a, Stat b) { return new Stat(a.stat1+b.stat1, a.stat2+b.stat2); }
Everything you need whether you're experienced or just started C# today.
http://www.dotnetperls.com 
In that case the Surface Pro, as suggested by others, is probably your best bet. There is nothing else that small that packs the appropriate amount of power. Or maybe just enjoy your trip and leave the coding behind.
SP2 kinda fits the bill, if you're looking for a small device. It's built like a tank, just needs some sort of case as the metal gets scratched rather easily. The only downside I see is lack of proper hinge, which makes working on the lap or sitting cross-legged or lying down with back on the ground and knees bent less than ideal. Thing likes a desk.
I don't agree. I think null is a wonderful thing. It makes it very easy to mark an object as invalid, which is unavoidable ANYWAY. Once your code interacts with unsecure sources, like files or web-streams, or in fact users, you will encounter invalid values. How would you handle that if strings were not null-able ? Pass empty strings ? Pass "Empty" ? Bullshit. Null is beautiful, useful and unavoidable.
That site definitely does rock, especially for a quick look at things you didn't use before PS: Great quote LOL "Programs are beautiful but their construction is not"
Like /u/umilmi81 said, arrays are very important, if you're having problems with them focus on it (tutorials in any other language should suffice, as long as you understand them). As soon as you're done with them and if you want more functionality you should checkout the [.NET collections](http://people.cs.aau.dk/~normark/oop-csharp/html/notes/collections_themes-list-sect.html#collections_collection-overview-1_title_1) and after that [LINQ](http://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b), which extends even more the possibilities of working with collections by adding SQL-like methods (also has query syntax support)
Thanks I will check that out
Got it. In that case, I think you are right.
Currently learning C# and I can attest to this. When I'm googling to figure something out, I'll find myself bouncing around to various sites until I wind up on dotnetperls, where I usually find an explanation that makes sense, and it just 'clicks'. It looks like arse though, which made me shy away from the site initially.
And please be aware that the dreamspark version can't be used for commercial applications.
&gt; For instance, you can do DateTime += DateTime iirc. No you can't. Addeding two DateTimes does not make sense. However, you can subtract a DateTime from another to get a TimeSpan (the time difference between those two dates). But you can't use **-=** with two DateTimes, as the result is not a DateTime.
Are you working with me on a project?
Have I been with your company for 15 days? Edit: Scratch that, there's a 1:1 relationship between my username and my name, you'd know ;)
The starter (free) version will not work, the amount of code in the Xamarin Store app is above the starter edition limit (65k bytes or something). You'll need to activate the indie/business trial. &gt; Error XA9005: User code size, 429568 bytes, is larger than 65536 and requires a Indie (or higher) License.
Look up signed XML documents. Its a cryptographically secure way (using public and private keys) to generate license files that are plaintext XML, which makes them easy to parse. It also has the advantage of allowing you to put the licensees name and other details in it making it less likely he will distribute it around to unknowns. Its also built into the .net framework The only way around it is if they get your private key (should never leave your server) or if they hack the IL code (which will beat any protection schemes)
Right meeting, wrong day. Also, it was online. :)
Thanks!
You too!
I have to disagree. I recall a delightful but short thread on TheDailyWTF about this very site. After verifying its issues, I have avoided it ever since. This speaks to its oddities better than I could in short reddit post: http://forums.thedailywtf.com/forums/p/21045/241670.aspx (Apparently they were writing in haikus at the time.) But I simultaneously don't want to discourage what help the site has to offer you. Like my old history teacher used to say, "Eat the meat and spit out the bones." Just be aware that the misspelled site does have a few... quirks.
Break things down in smaller tasks. Now take one of those tasks and brake it down further. If you're lost, google the shit out of it and try again. Patience and perseverance. 
Don't look at it as a whole. Learn one concept at a time and write a toy program that uses it, then move onto the next concept and repeat the process, while also including previous concepts. Your programs will grow in complexity in a natural way. Example: Just learned what arrays are and how they work? Write a program that writes out a grid of characters that are derived from a multi-dimensional array into a console and uses user-input to toggle specific characters into something else. Then when you feel comfortable enough with them, move onto the next concept. But most of all: don't stop writing code. Just watching videos/reading books is not enough, as you'll forget 90% of what you learn unless you apply it in code several times over.
Absolutely.
I dunno I was up at like 2 and couldn't find anything on the net so I posted this. 
Divide and conquer
I'm a beginner too but I've done some pretty decent programs. I learned python first though so the transition was a bit easier knowing programming concepts. Best thing to do is come up with simple programs to create. If you can't get any ideas just Google c# beginner projects. Keep at it. Don't give up. If you don't get something don't worry. Skip over and then keep coming back to it later then kick it around and toy with it. Also the community here is very helpful so you can always ask too. 
This is true. I am definitely considering it. 
Thanks! Good advice.
Thanks for the advice! It shall be used.
Yeah then you should be fine. Just keep at it. You can msg me if you have questions. 
Well, I loved it. I first tried dot42 to create an app, so I dragged in the source of a library of mine. I got around 50 errors. With xamarin I got 2.
No no, it's okay reading just wastes time - downvote instead. Clearly.
In general, switch statements are quicker due to compiler optimisations. For example, when you've got a large switch statement the compiler will generate a hash table. There's an article here testing the performance (although it does not explain "why" there's a difference): http://www.blackwasp.co.uk/SpeedTestIfElseSwitch.aspx However, if you find switch statements a method in which to challenge yourself I'd guess you were a beginner so you needn't be worrying about the minute performance increases you may get by using an alternate method. Think more about code quality and readability - it's *much* easier to read a switch statement and work out what's going on than it is to read a huge pile of nested if's
You cant use switch statements in every case, but if I have an enum, int or string with multiple possible values I use switch statements. Mostly I use it for enums. Because I guess you shouldnt use strings for any verification and its not possible to use ranges of numbers in switch statements. I dont think one of them is more efficient, but switch statements could increase readability a lot.
Thanks for the input, changes will be made. 
It really depends on the context in my opinion. Sometimes neither is the best option. For example, once I tried to create a generator that chooses the color of the output based on the input of a combobox. Basically I just created an array with the colors of the possible outputs in order of appearance in the combobox, then changed the color like so (control names not the ones I used :-) ): textBox.ForeColor = colorArray[comboBox.SelectedIndex]; Don't know if it was the most efficient way in the end but it saved a lot of lines!
With local DB you mean a database on the local computer? Or local as in locally in the network? Because its a CSV based now one could assume its on a local PC. On that scale on a local PC I have no experience. Otherwise just a Database somewhere in the network. EDIT: I know many people hate it, but is Access an option? 
You could take a look at LINQ to SQL on how to access databases and get SQL Server Express edition to get you started.
ns? As in nanosecond? Uhmmmm.... 
Thanks, will look into that, using a bit of LINQ to objects already.
I started C# when I was 14, I got very far by just using [YouTube](https://www.youtube.com) tutorials, [dotnetperls](http://www.dotnetperls.com) (My favourite) and [stackoverflow](http://stackoverflow.com) 
Yeah...pretty insignificant. I guess it might make a difference when iterating through a million records, but a one shot deal, the speed difference is negligible. It's like those guys that will overclock their CPUs to get that 1 extra mhz. Is it really worthwhile with the CPU/memory speeds that we have today?
Unless you work for Target managing their cash register credit-card receivers. There is a time and place to be very concerned about piracy/cracking/security. Working for an enterprise environment, and having to be PCI compliant - I deal with this sort of stuff daily. Even our non-sensitive internal (never sees the light of day) databases are encrypted and only accessed through integrated security.
There's really no reason to offer Access, when you can use Microsoft's free SQLEXPRESS databases. It's like a mini SQL server database for your application. SqlLocalDB or EXPRESS would work. http://msdn.microsoft.com/en-us/evalcenter/dn434042.aspx Once you have your database created and you're talking to it directly, you can use ADO.NET or LINQ-to-SQL / DBContexts to access your data and massage it how you wish. I know people are enjoying LINQ and Entity Frameworks, but I'd strongly recommend you learn SQL. LINQ and EF will only take you so far, but knowing SQL in your knowledge toolbelt, you really put a feather in your cap to becoming a strong developer. LINQ and EF will only take you so far. A developer who also knows SQL and can optimize their database calls, indexes, sprocs, updates and reads - etc - so that the database access is as fast as possible - that's a whole 'nother ballgame. In that free version of SQL, comes with an SMSS (Management Studio -- an IDE interface for SQL) where there are wizards and stuff for importing your data from CSVs into tables and the like. You can google "import CSV into SQL Server tables" and get an absurd amount of results.
http://i.imgur.com/Dl8slvu.gif
If it isn't MDN, MSDN or Stack Overflow, I'll generally give it a pass. MSDN has what feels like three or four different sources of information for their namespaces (and some of them pretty thing), but they have great information and examples out there at the right locations - I guess I've been doing the MS thing for so long, I can "read Microsoft". :-)
You don't need Windows 8 to use VS2013. I currently rock the VS2013 Professional (MSDN membership) on my Windows 7 box. You can seamlessly switch from 2010 or 2012 to 2013. You get scads of nice new features (better JS editor, *soooo sexy* definition peeks, etc). Love the package management and online / nuget integration, too.
I honestly wouldn't have anyone learn C# 3.0 at this stage. With the .NET 4.5 (and 4.5.1) on the scene, there's some good things that are with us here and now that didn't exist in C# 3. Things you'll want to use. I guess I would say, "you got the book, go ahead to learn basics - but really lean on online resources". MSDN, Stack Overflow, and a bajillion different sources online for learning and educating yourself (just avoid W3Schools).
http://msdn.microsoft.com/en-us/library/kx37x362.aspx
I put that there to really show how insignificant performance-wise it is, really it's more syntactic sugar .
[This post](http://stackoverflow.com/questions/3639846/what-is-a-good-embedded-database-to-use-with-c) on stack overflow lists some options for databases. I prefer SQLite for embedded databases but I know a bunch of people that like SQL CE. If you want to go the NoSQL route, the only embedded database that I've tried is [siaqodb](http://siaqodb.com/). You do need a license though and while it worked fine, there wasn't much of a benefit for us over the SQL route.
Yes, sort of. Switch statements are faster but only because compilers know when to do the hash lookup vs doing an if/else chain. It is a question of locality. For a 2 or 3 statement if else chain, using if else will be faster because that portion of code is likely completely cached. (especially if the insides of the if/else block are small) so the execution should be pretty decent. If, on the other hand the statement is large with a high number of if/else blocks, the switch statement will be faster simply because it doesn't have to do every branch. But, like I said, compilers are smart. They know when to do the lookup optimization and when not to use it. Long story short, if speed is key, use a switch statement :)
I'm interested in this as well. Upvote for visibility. One thing I get confused about is say with a multi window forms app, where would the delegates go? Most likely the main program.cs? What I wanted (and what I think delegates can be used for ) is for transferring or updating info/objects between forms or classes. In other words, it helps to decouple the classes/forms. A good ELI5 about delegates would be very helpful 
I usually start here: Microsoft - http://msdn.microsoft.com/en-us/library/ms173171.aspx 
Oh, I am, don't you worry...
At first everything will seem overwhelming and hard. Don't lose faith. You have to start somewhere. I recommend you first pick a programming language. I am a .Net developer so I may be biased but c# is a great language. You could also start with Java. Get yourself a book on your chosen language and start practicing. Once you get the hang of the language, get yourself some math and algorithms books. This will help you a lot as you continue to grow in game development. Optimization is key in games today.
Good! I asked around and it seemed that yield was one of the lesser used features in C#. I know lots of people actually are though.
Db4o is a easy to use object database. You can find it in nuget, and it's as easy as using .Store(myObject) and .Query&lt;ObjectType&gt;() with LINQ. No setup needed.
Thanks jjnguy! I do have a question about the yield: if I'm running a static function with a yield on one thread (while looping through it) and want to access the same function from another set, will it start the data at its cursor on the first thread or start it from the beginning? Also can I use the yield keyword without putting it before a return? Can I yield before a block of code? 
Like most things in programming it's easiest to learn by doing. You could implement a multi-threaded program, for instance, which calls a delegate function when an event is fired.
For your first question about multi-threading, if you call the generator function again, you will get a brand new state machine and essentially start over. However, if you you spin up two threads to loop over the same `IEnumerable`, I'm not sure what the functionality will be, and I wouldn't recommend it. For the second question, you could probably have a Generator return an `IEnumerable&lt;Action&gt;` or something like that. That would be like returning a block of code. Usually generators are just used to return values though. You can do `yield break` which signals the end of a generator.
Awesome. Thanks for the quick and comprehensive response! 
Yeah! Thank goodness for Google, right? Haha. Thanks for the resources!
You are welcome. Thanks for watching!
Watching this now. I'm new to C# and "yield return". This is a very cool concept and this video clarifies it nicely. 
Just a little nitpick on your terminology as it looks like you're confusing `IEnumerable` with `IEnumerator` You should be perfectly fine looping over the same `IEnumerable` on multiple threads as long as the `GetEnumerator()` method returns a new enumerator each time. Unless you have a thread safe enumerator (which is the generator) then accessing this will potentially cause issues as you mention.
You can think of a delegate as a variable that holds a method. You can pass that delegate around like you would a variable. You can assign different values to it. Whatever the keeper of that delegate variable does not have to be related to the implementation. The only thing you know about the delegate is the method signature, what parameters it takes and what it returns. You can then execute whatever method is assigned to that delegate variable with whatever parameters are appropriate, and if it returns something, you can assign that result to another variable (or do other things with it). I think where a lot of people get confused is the difference between events and delegates. An event is a thing that can be triggered to call a delegate that's been registered to handle the event. The event goes on the class triggers the action. You hook up the handler, which is just a delegate with a particular signature (defined by the event) from somewhere else that can see the event. The class with the event doesn't have to know anything about the class handling the event. Does that clear it up at all? I don't have time to type any examples right now.
To be honest, I've never spent the time to fully understand the exact role the `IEnumerator` plays vs the `IEnumerable`. I've always just returned `IEnumerable` from my generators because that's what the LINQ methods return. Thanks for adding a bit of clarification.
Effectively the enumerable is the thing that gives you the enumerator, which is what you use to iterate over the collection. If you've ever done any Rx then the same concepts are present with `IObservable` and `IObserver` The observable gives you a subscription to an observer, which pushes values to you. If you fancy some in depth reading and are interested in the functional underpinnings of enumerables and observables then I highly recommend having a look at Bart de Smet's blog post. http://blogs.bartdesmet.net/blogs/bart/archive/2010/01/01/the-essence-of-linq-minlinq.aspx
Good video! Cleared some stuff up for me. Still have some questions but I'll keep looking at it 
Aside from the tutorials people are sure to list, the main thing to understand is that a delegate is basically a variable that has a method signature as its type and it can hold a reference to a method of that type (in its simplest usage). Delegates are similar to function pointers in C. 
&gt; There's really no reason to offer Access, when you can use Microsoft's free SQLEXPRESS databases. It's like a mini SQL server database for your application. SqlLocalDB or EXPRESS would work. LocalDB is a mini SQL server, but SQL Express is a fully working SQL server. There's nothing *mini* about it. Please note that a HUGE difference is that SQL Express runs as a system process, but localdb runs under the local user.
&gt; However, if you you spin up two threads to loop over the same IEnumerable, I'm not sure what the functionality will be, and I wouldn't recommend it. Each time you do a `foreach` or iterate on it say via LINQ (read: call its `GetEnumerator()` method), it spins up a new state and begins from the start of the yielding function. If you're _being evil_ and passing around the resultant `IEnumerator&lt;T&gt;`, and manually calling `MoveNext()`, my tests seem to indicate that the compiled state machine iterator is a bit smart about it. If a `MoveNext()` is called when another thread is currently attempting/executing the method body (read: working its way to the next `yield` statement), then the `MoveNext()` simply returns `false` and doesn't do any work whatsoever. So, aside from non-threadsafe user code, it looks like the generated enumerator for `yield` code probably is thread safe (in the sense that _Bad Things_ don't seem to happen)
http://www.codeproject.com/Articles/4773/Events-and-Delegates-Simplified#Whataredelegates2
Ok, so (1) lambda methods and Func&lt;&gt; makes delegates kinda obsolete but heregoes: A delegate is a special type that represents a method signature - so param number and type, and return type. Any method at all that matches this signature can be referred to by the delegate. Much easier with an example so: Imagine you want to make an integer calculator, +, -, and * and you want the user to be able to define an expression before processing so the user can say 5 + 4 - 3 * 2 and click a button and calculation will occur. You'd split the input on spaces, extract and parse your numbers and then what? Well, you're left with the operations themselves. Now, you could walk through the operators and switch on them, performing the correct operation depending on which character you find. Another option would be to define a dictionary of symbol-operation mapping. This is where a delegate comes in, you could define a delegate: delegate int MathFunc(int lhs, int rhs); And then your methods: MathFunc int do[Add/Sub/Mul](int lhs, int rhs) { } And finally, your dictionary: "*": doMul, "+": doAdd, "-": doSub and then, instead of your switch, you'd say: dictionary[opcharacter](pLeft, pRight); Notice, i'm missing division. Division results in a double, not an int and so cannot match our signature. Edit: your dictionary would be: Dictionary&lt;string or char, MathFunc&gt;();
Ask away, I'll answer if i can.
It's going to be soooo fun when people can mix ?:, ??, and ?. all in the same line of code.
Thx for all the replies... I will look into SQL Express because I also want to learn that for future projects where I will host that on a server. You all pushed me in the right directions.
Will check that out too, thx.
Probably will skip that, sounds like it is .net exclusive and Iike being flexible. Or is it available for java?
Check out F#, that has yield! which does what you're talking about
It's for both java and .net.
It definitely helps.. the second paragraph is slightly confusing. &gt;You can think of a delegate as a variable that holds a method. This makes sense but what if the method requires access to an instance of a class or data bound object? When I was trying to learn c# ( I'm more of a php guy but wan't to dablle with c# some ) I started creating this program : https://github.com/rowej83/CustomerDebt Basically a small windows form app using sqlite to add customers and how much debt they owe. There are two form classes.. Mainform and Customerform. Main form has a data bound combo box that stores the customers names. When you goto add a customer , you click add customer on main form which brings up the customersform. Now here is where I think I should be using delegates or something else I'm unaware of.. When you finish adding/editing it currently calls a function in customerform.cs: void ResetCustomerList(MainForm myForm, int customerListIndex){ myForm.loadCustomerList(customerListIndex); myForm.customerList.SelectedItem=MainForm.customerBL[customerListIndex]; } This trys to reload the combo box (from the customerform.cs) on the MainForm and to set the selected index of the new added/edited person. I feel this method is incorrect and it has given me unexpected results. Currently, it uses an instance(the only instance, should only be 1) of the mainform and tries to call the function from Mainform..wouldn't this be something a delegate handles better?
One way to get your head around it is to realize that Windows Forms events use delegates. A "Button" object knows that when you click it, you want to execute a method, but the "Button" class doesn't know what method you might want to execute, since that method will change on an object-to-object basis. So, the "Button" class defines a variable called "Click", and on each "Button" object on your form, you set that "Click" variable to point to a different method. That feature that lets you assign a method to a variable is called a "delegate".
Isn't that just assigning a method to a control's event? I think theres alot more to it then that
ok your reply below you stated that Func and Lambda expressions make delegates obsolete. Why is that? Besides using delegates to invoke UI controls why couldn't I just directly call a method instead of using the delegate? I'm going to TRY to answer this question and let me know if I'm right. Let's say I want to call 5 methods a bunch of times, I could add all of the methods onto a delegate and just call that one delegate in different areas of my application when I need it. Is that right? Feel close to grasping this concept... I also know delegates are like a variable holding a method and as such they can be passed in method parameters but when is this beneficial? I've watched and rewatched videos on delegates and lambda expressions, perused stack overflow questions, and gone on msdn for these subjects but the concepts still seem just out of reach for my little brain...
I'll take a crack at this. (You might also want to take a look at [this reply](http://www.reddit.com/r/csharp/comments/25pl0j/best_way_to_learn_about_delegates/chjqu7r) I made to another user) Firstly, the `Func` and `Action` generics do not by any means make delegates obsolete. They are in fact just generic delegate definitions. They just provide a generic way of defining a delegate without having to declare it somewhere every time. public Func&lt;int, string&gt; SomeFunction; Is functionally equivalent to public delegate string SomeFunctionDelegate(int); public SomeFunctionDelegate SomeFunction; (although they're not the same type, so you couldn't cast between the two). Lamdas are just anonymous functions (more or less, ignoring some details that don't matter for now). They're like regular functions, only their scope is local to their declaration, they're not exposed by the class like a regular method would be. If you wanted to assign some to the delegate we just defined above, both of these would work: private string BlahBlahFunctionName(int someInt) { return someInt.ToString(); } //This is in some method on the class, let's just say the constructor SomeFunction = (Func&lt;int, string&gt;)BlahBlahFunctionName; //If you used the named delegate it would look like: SomeFunction = new SomeFunctionDelegate(BlahBlahFunctionName); Or using an anonymous method: //Using Func&lt;&gt; SomeFunction = (int someInt) =&gt; someInt.ToString(); //Using the named delegate SomeFunction = new SomeFunction((int someInt) =&gt; someInt.ToString()); &gt; Besides using delegates to invoke UI controls why couldn't I just directly call a method instead of using the delegate? ... &gt; I also know delegates are like a variable holding a method and as such they can be passed in method parameters but when is this beneficial? One of the main reasons is because you don't want the thing doing the calling to have to know about the thing it's calling (beyond the method signature). Callbacks are perfect example. Say you have a method that's going to do some stuff and you want it to do some stuff when it's done and you want to leave that up to the thing calling the method. You could do this: public void SomeMethod(Action thingToDoWhenDone) { //Do some stuff that maybe takes a while here if(thingToDoWhenDone != null) thingToDoWhenDone(); } Now whatever is calling that could do something like this: SomeMehtod(() =&gt; MessageBox.Show("All done!")); `SomeMethod` will just run whatever is passed in via the `Action` delegate parameter. It doesn't need to worry about calling some specific method on some class, it just runs what you tell it when you call the method, from wherever that might be. 
(dont?)forget ?? @nullable.casting ?? dude ? !it : can ?? get ?? !confusing;
you don't need delegates to share data between classes. however, they can be useful for creating your own custom events for alerting a subscribing class that some data has changed.
I did a small bit of investigation ... http://stackoverflow.com/questions/1056487/httpcontext-current-user-identity-name-is-always-string-empty Now, the Identity Name for yours seems to be return null and not empty string, but I think the core of the handling seems to be captured in the highest voted post. &gt; The problem you have is at this point you're only setting the authentication cookie, the IPrincipal that gets created inside the forms authentication module will not happen until there is a new request - so at that point the HttpContext.User is in a weird state. Once the redirect happens then, because it's a new request from the browser the cookie will get read before your page is reached and the correct user object created.
I just did a Unity C# game that uses yield for its UI multitasking. It was fugly code using it in basically every method, but it worked well for coroutines. [more here](http://unity3d.com/learn/tutorials/modules/intermediate/scripting/coroutines)
What would yield foreach do?
How on earth does that MySQL query work with a generator? Surely the database still SELECTs every one of the rows in the table, which in non-yield scenarios is what takes the time? Obviously you'd still end up with an out of memory exception if you tried to assign that to a DataTable and work with it. I'll definitely be profiling this tomorrow.
Ahh I see. Cool :)
took them long enough
I guess: yield enumerable would do foreach(var item in enumerable) yield return item;
Fun fact: you does not need to implement IEnumerable to be able to use an object in a foreach loop. It just needs a GetEnumerator() method that returns an object. And this object does not need to be an IEnumerator, it just needs the two methods MoveNext and Current.
Oh! Pearl, not PERL.
It has for some time. I run a small MVC 3 site on mono. The big news about Mono here is that the ASP.NET team will be testing on Linux and working with the Mono team to resolve issues rather than being something that "should" work but may have issues in practice. It's also not clear from the posts I've read if the ASP.NET runtime itself will be open sourced and run on Mono instead of you having to use Mono's fastcgi-mono-server. I think this may be the case because MVC is moving away from the baggage of System.Web. It's great to see how excited Xamarin is by all this and that they'll be working with Microsoft to make it work with Mono. In my experience they've given low priority to anything that doesn't affect mobile. Hopefully they'll be giving the web stack some love now.
Division of two ints return an int.
Good reading; I'll keep that in mind if I ever make a recursive structure like that. Thanks!
In your example, my first gut reaction was "oy, 13M connections to the database?" Because it's a fast turn-around does it end up re-using the same connection in the pool, or is there any kind of benchmark on the DB itself with the constant *getting connection &gt; read single record &gt; close connection* -- versus -- *get* *connection &gt; pig it up &gt; close connection*?
No.
Care to elaborate?
Well, I guess it depends largely on what you mean by "first class citizen"? F# has some advantages for certain scenarios, and it is clear it is popular enough, but I can't think of any commercial or high-profile projects that use it exclusively.
For my [math project](http://github.com/Banane9/EquationAnalyzer) I actually create a class from the inputs and use that :)
Yes. I understand it would be difficult to use F# for the full stack. But there are places where it a far better tool but isn't used. Is that because of something inherent to the limitations of F# or is it fear of the learning curve? I suspect the latter.
I don't believe fear factors into the equation, so much as the time it takes to pursue and understand a new language for the sake of optimization. Unfortunately, folks tend to think in terms of optimizing within their preferred language before considering a new language altogether.
Edit: actually, after reading the post in the other response, they're actually correct, you have to get the browser to make another request to the server so that the cookies, having been set, are resent. This is why ususally, you'll see Authentication modules return Redirects - this directs the browser to make another request and set the cookies. The response on stack overflow is correct. When the MVC framework attempts to turn your action parameters { User.Identity.Name } into the parameters for the controller method that you're calling, it matches based on the name. so if your method is: public ActionResult Manage(string uName) Then you'd need to say: { @uName = User.Identity.Name } whereas: public ActionResult Manage(string userName) would require { @userName = User.Identity.Name } 
Oooh, Roselyn, nice! Right now, I've been using an extension to the System.Linq namespace that lets me define the predicates to linq queries as strings, but I'm psyched to try out using the new API.
There should be a rule for pointing out the fact that people are self-promoting their own blogs. From Rediquette: &gt;Feel free to post links to your own content (within reason). But if that's all you ever post, or it always seems to get voted down, take a good hard look in the mirror — you just might be a spammer. **A widely used rule of thumb is the 9:1 ratio, i.e. only 1 out of every 10 of your submissions should be your own content.** http://www.reddit.com/user/jconway007/submitted/ You're batting a zero. Everything you've submitted is to your own blog content. But what *really* gets me - is that five days ago you pushed up this topic in other subreddits - and now, today you're submitting it to C# subreddit - which is not F#.
So its not User.Identity.Name being null that's the problem, but the fact I don't have a Manage action? **Edit** Okay so I misunderstood... thats not it
Glad you found this interesting. Let me know what you find.
I believe that since it's just one SQL statement, there is just one connection that remains open while the generator is still in use. I'd imaging that creating and destroying 13m connections would cause performance problems.
My apologies, I'm new to reddit. I do have plenty of content to submit that is not my work so hopefully I can put this right. How would the internet work without pedants? Maybe I'll blog on this and post it up here. Make sure I get the subreddit correct though
 public static class MyExtensions { public static IEnumerable&lt;T&gt; Shuffle&lt;T&gt;(this IEnumerable&lt;T&gt; source) { if (source == null) throw new ArgumentNullException("source"); return source.Shuffle(new Random()); } public static IEnumerable&lt;T&gt; Shuffle&lt;T&gt;(this IEnumerable&lt;T&gt; source, Random random) { if (source == null) throw new ArgumentNullException("source"); if (random == null) throw new ArgumentNullException("random"); return source.OrderBy(x =&gt; random.Next()); } public static void ForEach&lt;T&gt;(this IEnumerable&lt;T&gt; source, Action&lt;T&gt; action) { if (source == null) throw new ArgumentNullException("source"); if (action == null) throw new ArgumentNullException("action"); foreach (var item in source) action(item); } public static bool In&lt;T&gt;(this T source, params T[] list) { if (source == null) throw new ArgumentNullException("source"); if (list == null) throw new ArgumentNullException("list"); return list.Contains(source); } public static string Format(this string source, params object[] args) { if (source == null) throw new ArgumentNullException("source"); if (args == null) throw new ArgumentNullException("args"); return string.Format(source, args); } public static string Format(this string source, IFormatProvider provider, params object[] args) { if (source == null) throw new ArgumentNullException("source"); if (provider == null) throw new ArgumentNullException("provider"); if (args == null) throw new ArgumentNullException("args"); return string.Format(provider, source, args); } public static void AddRange&lt;T, S&gt;(this IList&lt;T&gt; list, params S[] values) where S : T { if (list == null) throw new ArgumentNullException("list"); if (values == null) throw new ArgumentNullException("values"); foreach (var value in values) list.Add(value); } public static IEnumerable&lt;T&gt; EmptyIfNull&lt;T&gt;(this IEnumerable&lt;T&gt; source) { return source ?? Enumerable.Empty&lt;T&gt;(); } public static string ToCurrency(this decimal value, string cultureName) { if (cultureName == null) throw new ArgumentNullException("cultureName"); var cultureInfo = new System.Globalization.CultureInfo(cultureName); return value.ToCurrency(cultureInfo); } public static string ToCurrency(this decimal value, System.Globalization.CultureInfo cultureInfo) { if (cultureInfo == null) throw new ArgumentNullException("cultureInfo"); return string.Format(cultureInfo, "{0:C}", value); } public static T GetService&lt;T&gt;(this IServiceProvider provider) { if (provider == null) throw new ArgumentNullException("provider"); return (T)provider.GetService(typeof(T)); } public static string GetDescription(this Enum value) { if (value == null) throw new ArgumentNullException("value"); var fieldInfo = value.GetType().GetField(value.ToString()); var attribute = fieldInfo.GetCustomAttribute&lt;System.ComponentModel.DescriptionAttribute&gt;(); return attribute != null ? attribute.Description : null; } public static bool IsEven(this int value) { return value % 2 == 0; } public static bool IsOdd(this int value) { return !value.IsEven(); } public static bool IsNull&lt;T&gt;(this T obj) where T : class { return obj == null; } public static bool IsNotNull&lt;T&gt;(this T obj) where T : class { return obj != null; } public static decimal PercentageOf(this decimal number, int percent) { return number * percent / 100; } public static bool ContainsCaseInsensitive(this string source, string value) { if (source == null) throw new ArgumentNullException("source"); if (value == null) throw new ArgumentNullException("value"); return source.ToLower().Contains(value.ToLower()); } public static IEnumerable&lt;T&gt; AsEnumerable&lt;T&gt;(T item) { yield return item; } public static void AppendFormatLine(this StringBuilder sb, string format, params object[] args) { if (sb == null) throw new ArgumentNullException("sb"); if (format == null) throw new ArgumentNullException("format"); if (args == null) throw new ArgumentNullException("args"); sb.AppendFormat(format, args); sb.AppendLine(); } } public class ComparerFactory&lt;T&gt; : IComparer&lt;T&gt; { public static IComparer&lt;T&gt; Create(Func&lt;T, T, int&gt; comparison) { return new ComparerFactory&lt;T&gt;(comparison); } private readonly Func&lt;T, T, int&gt; _comparison; private ComparerFactory(Func&lt;T, T, int&gt; comparison) { if (comparison == null) throw new ArgumentNullException("comparison"); _comparison = comparison; } #region IComparer&lt;T&gt; Members public int Compare(T x, T y) { return _comparison(x, y); } #endregion } 
Can you explain what the code is doing? I'm new to C# but have a background in Java.
Some explanation please!
I'm pretty sure there was dynamic compilation before...
This allows you to not have to write: if(obj != null) { bunch of code } You call IfNotNull on a class, provide it with the property you want as a predicate and an optional default value to return. If the source is null, and you don't check for it, you'd get an invalid operation exception, this allows you to gracefully handle nulls.
Almost all default extensions use IsNull or IsNullOrEmpty IsAThing. you should make it IsNull too. then you want to do a check for not null &gt;&gt; !object.IsNull
object is a general 'container' for any and all types. object can be int, float, a class etc etc. and is probably a reference type. float is a value type. float var1 = 5f;makes var 1 a float and assigns it the value of 5.0000000 object var2 = 5; makes object an int with the value of 5 doing this off the top of my head tho, please feel free to correct me :P
This one has been useful for me. https://github.com/devshorts/MonadicNull
Nearly, I'm British :)
Try not to do that too much. When you go to retrieve a value from a variable of type Object, it has to be converted back into a float. This takes CPU time. Look up Boxing and Unboxing. Collections in .net v1.1 could only hold type Object and they were a huge pain. Generics fixed most of the pain.
These are extension methods. They allow you to extend functionality of a class*. An easy explanation is the IsEven(). By creating an extension, as long as the Extension has the appropriate access modifiers (and possibly references set), you can use simply do the following: myInteger.IsEven() or myInteger.IsOdd() This helps on getting rid of "Utilities" classes where code that is being used in multiple places gets put. (Happens quite often!) var isEven = Utilities.IsEven(myInteger); vs var isEven = myInteger.IsEven(); Some of the other extension methods are just simple things to help cut down on a few extra characters. For example, the IsNull() method. object myObject; if (myObject == null) { // do something } vs object myObject; if (myObject.IsNull()) { // do something } I don't see much advantage to this one. Going a little deeper, the example for which OP made the original post about, I think is a little silly. I personally don't want to throw all my method calls into a lambda if something is not null. I might however do it if it was null, and I would let the constructor of Foo instantiate the List&lt;string&gt; rather than nesting another lambda. A lot of this is up to the developer's discretion. Some of the things, I'd prefer not to do are somethings that other developers don't mind doing. *In this instance, it's a closed .Net Framework class. However it could be anything. Edit: Formatting, and other stuff.
This hasn't been mentioned yet, but [System.Object](http://msdn.microsoft.com/en-us/library/system.object.aspx) is the very root of the .NET Framework object hierarchy (i.e. everything in the .NET Framework derives from System.Object). There are very few situations where you would want to be explicitly using a System.Object type in modern C#.
&gt;...and is probably a reference type. Technically, an `object` will *always* be a reference type thanks to [boxing](http://msdn.microsoft.com/en-us/library/yz2be5wk.aspx). 
i'm not really up on all the nomenclature, but i understand how it works x)
&gt; public static IEnumerable&lt;T&gt; Shuffle&lt;T&gt;(this IEnumerable&lt;T&gt; source, Random random) { if (source == null) throw new ArgumentNullException("source"); if (random == null) throw new ArgumentNullException("random"); return source.OrderBy(x =&gt; random.Next()); } Just so you know, this Shuffle is O(n log n) because it uses a Quicksort underneath. And yes, Knuth used it in his book, but if you're dealing with large sets of data you're really going to want to use the O(n) Fisher Yates shuffle instead: http://en.wikipedia.org/wiki/Fisher-Yates_shuffle
var1 is declared as a float. This means that it can only store floats. var2 is declared as an object. This means that it can store pretty much anything. So why would you ever want to declare it as a float then? Why limit the type of data your variable can hold? Well, as it turns out, when you create a variable of the type 'object', then the compiler isn't going to know a whole lot about that variable. The Object class has only 4 methods: `Equals()`, `GetType()`, `GetHashCode()` and `ToString()`. So these are the only operations you can perform on var2. Because the type of var2 is `object`, it could hold *any* object, and the only methods and operators guaranteed to be available to any object are the ones I listed. This is why we try to specify the *type* of an object as narrowly as possible. Var1 is of the `float` type. This means that it can *only* hold floating-point numbers. However, *because* of this fact, the compiler now knows that, whatever is being stored in var1, the application can perform mathematical operations on it. If you try to write `var2 = var2 + 1;` after your declaration, it will give you an error. It will give you an error because var2 *might* be holding a float, but for all we know it could be holding a string, it could be holding an array, it could be holding *anything*. On the other hand, if you try to write `var1 = var1 + 1` it will not fail, because the compiler knows var1 holds a float, and no matter what the value of var1 is, the application can always perform an addition on it. Keep in mind that this applies to objects, too. If you write `object var3 = "example"`, you will not be able to do this: `var3.Substring(4);` because var3 is of the type object, so while it might be holding a string, it doesn't have to be. To answer your question directly: var1 is holding a float, and it will only ever hold floats. var2 is holding a float (specifically, a boxed float) but it is also able to hold pretty much anything else, at the cost of preventing the compiler from being able to have any idea what's in there. With this in mind, there are certain situations where you would want to use an object, but they tend to be sort of rare, because there are very few situations where a method you're writing actually needs to be able to receive *any* type of data. One example is in some asynchronous standard library methods, where you can pass some sort of state into the method. In this case, the type of the state you're passing into the method is determined by you, the programmer, not by the programmer who wrote the method. However, another feature, called Generics, allows you to write methods which accept any type of data, without losing the information about what type of data is actually being passed into the method. This is obviously an advantage over accepting any type of data at the cost of losing what type of data it actually is (well, that doesn't rule out reflection, but still..), so while there are some situations where you want to accept any type of data, there are very few situations where you want to accept any sort of data and don't care about what the type of that data actually is.
That makes a lot of sense, thanks!
I only skimmed [this article](http://www.codeproject.com/Articles/8688/Extracting-files-from-a-remote-ZIP-archive) but it appears to be what you're looking for.
&gt; Enum has appropriate XML comments Nope, there's a `DescriptionAttribute` defined [in the standard library](http://msdn.microsoft.com/en-us/library/system.componentmodel.descriptionattribute(v=vs.110\).aspx) that it looks for when grabbing the description. It won't work with XML comments (which aren't present in the compiled code AFAIK) nor with custom Description attributes.
What benefit would that provide over if(obj == null)?
&gt; I don't think I'd ever use a IsNull() or IsNotNull() extension method. I agree. &gt; Will your GetDescription() only work if the Enum has appropriate XML comments on each of the values? No. The XML comments are unrelated. It will check for the `DescriptionAttribute` that is part of .NET. This attribute is the standard way of adding textual description to enumerations. &gt; I would however discourage you from using the ForEach() on an IEnumerable. I am aware of this article, and as with everything: It has its uses and its limitations. There are neat use cases for this method and cases where you should not use it.
Thank you. I will adapt this.
*Object* is, literally, the mother of all types in C#.
Jeez, that article had some not so nice grammar problems. &gt; ... Instead of call `someMethod()`
Java needs to die already. :-/
Part one: foreach (var item in testowaStr) { Console.Write(item + " "); } Simply remove the call `GetEnumerator()` you have. `foreach` will call the method `GetEnumerator()` on whatever argument you pass in, and use the returned enumerator to iterate the set. Also.. it does not really make sense to create a `IteratorClass`. What do you actually want to achieve? Do you want to be able to iterate over whatever data on of your classes hold? Then simply implement the `IEnumerable&lt;T&gt;` interface on your class. Example: public class Fubar : IEnumerable&lt;string&gt; { public IEnumerator&lt;string&gt; GetEnumerator() { yield return "Fu?"; yield return "Bar?"; yield return "Fubar!"; } IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); } } // Usage: var fubar = new Fubar(); foreach (var t in fubar) { Console.WriteLine(t); } --- Part two: It is not clear what you want to do. The first and second code examples provide different purposes. You have to have a method that returns a bunch of `whatever type dzialanie is`? Then do this: return dzialanie; // It is already of type IEnumerable, not need to iterate and yield the items. You want to add the resulting items to a list? Do this: myList.AddRange(dzialanie); You want to create a new list of your resulting items? Do this: dzialanie.ToList();
I want to replace public static List&lt;T&gt; SortujMalejacoJesliZaczynaSieOd&lt;T&gt;(this IEnumerable&lt;T&gt; kontener, T parametr) { var wynik = new List&lt;T&gt;(); var dzialanie = from x1 in kontener where x1.ToString().StartsWith(parametr.ToString()) orderby x1 descending select x1; foreach (var item in dzialanie) { wynik.Add(item); } return wynik; } with public static List&lt;T&gt; SortujMalejacoJesliZaczynaSieOd&lt;T&gt;(this IEnumerable&lt;T&gt; kontener, T parametr) { var dzialanie = from x1 in kontener where x1.ToString().StartsWith(parametr.ToString()) orderby x1 descending select x1; foreach (var item in dzialanie) { yield return ... //something } }
The `IteratorClass` does not make any sense. Perhaps you should move a step back and say what you actually want to do.
Why should it? That's not valid C#.
ok, nvm now I see that I tried to do sth that doesn't make any sense, thx
Because it is not valid C#. You would have to use Math.Pow, as you would normally when coding in C#.
I tried to create a GetEnumerator() method that would work on many Lists (different types), not only one edit: it doesn't have to be this exactly method, I'd prefer to create sth that I can pass argument to and use it in foreach loop
10 levels in I got annoyed with the flashing "Sign in so you don't lose your progress!" message after each result so I signed in... aaaand "You are signed in, select C# or Java". Progress lost.
Some of these arithmetic questions are making me feel stupid...
Yuck, and agree about VB.NET. That puppy needs to fade away, also. Java should, too, though. I wouldn't mind if Oracle also switched from being a litigious company and actually started making good shit again -- or tanked itself, also. 
well that's not exactly what I was looking for... I have extention methods up and working - I just wanted to do the same (sort in some way) with a list/array using: Class : IEnumerable and GetEnumerator()/SortItThisWay() method bcs I heard It's possible too EDIT: and your query isn't complete, bcs I'm sorting my result ascending or descending depends on method :P 
This is not a learning tool. Maybe a knowledge testing tool, but it won't help/hint even after dozens of wrong attempts. Also, what value is there in trying to figure out what the task is? It would be better to say "here is the task, write the code." Boss: I've got 30 unit tests written, write code until they work, but I'm not going to tell you what it should do. Oh, also, I'm not going to show you the unit tests. 
And you have no idea what the task is, or what the unit tests are testing. So really there is no value in this game. 
I am not sure if I understand what you want to do, but LINQ can sort any IEnumerable: myList.Where(item =&gt; item.ToString().StartsWith("te")).OrderByDescending(item =&gt; item.ToString()) What exactly is the functionality you want to create? 
Shows the age of this community why would anyone upvote this.
I look at this as just a puzzle.
My only gripe is that it doesn't show all the test cases immediately, otherwise it's a fun puzzle game. Not very useful to help you learn C# from scratch though.
SPOILER THREAD: How would I score elegant coding on level 02.01? int[] r = new int[n]; for (int i = 0; i &lt; n; i++) r[i] = i; return r; The task was simple enough, but I got the lowest passing score. It wants an array so I had to declare it, then I had to fill it, then I had to return it. How can I be more succinct than that?
Nice, that did it. Thanks!
I don't see how age is relevant. Nobody codes in CFM or classic ASP anymore (if they can help it). The strongest advantage Java has is running in its own VM - but that disparity is closing. In the browser world, things like HTML5/CSS3, etc - negate the need for it. As an aesthetic - designing anything in it, is pure butt-ugly. Even crap from Oracle that runs in Java these days looks like crap - something from the early 90s. 
I thought you were talking about buying the Indonesian island...
No worries. Did you manage to do 4 and 5?
Some people say if you are using if/switch, you aren't doing object oriented programming. Branching using switch/if/else chains is code smell for refactoring your state into different strategy classes.
Not yet. I decided to sign in and now it's making me do all the previous exercises again :(
Well considering the only other major managed language is Java, this is hardly a surprise.
This seems to test coding knowledge more than it teaches it. Very early on the division example assumes you know that the remainder of ints are truncated during division. That's a topic that takes beginners some time to understand, and it doesn't explain it at all. 
In my world I see Java in two places: Android's Java Implementation, and anything web-facing involving Oracle/Linux. Sometimes also Oracle/Windows, but the justification is always 'so we can switch to Linux.' Java Sucks, but sometimes Linux peeps want to talk to a database using something other than PHP. Disclaimer: I don't care for Java at all and hope that Mono displaces it in the Oracle WebService World.
I'm not trying to be a dick, but if you're genuinely curious I'll tell you. Your post was a typical low-effort low-relevance post like you'll see all over the default subs. Change the word "Java" to "Justin Bieber" and your post would be indistinguishable from a post on /r/adviceanimals.
VB.Net seems to be something that Microsoft keeps around for Old VB6 programmers to be able to program in .NET. Sometimes I see awkward re-implementations of VB6/VBA examples in VB.NET code I've inherited, and just wind up shaking my head.
To start with: * It's overly verbose * It's slow * It has major issues with backward compatibility with older versions and you can't have multiple versions of the runtime on a single system. * Oracle seems to have acquired the rights to Java for the express purpose of keeping their legal team busy suing the few remaining companies who use Java.
More of a reverse engineering maths game, rather than coding.
I'm a novice with C# and I got pretty excited when I saw this but it really doesn't teach and I can't learn from it. Like others have said, it's a tool not to teach but to test knowledge of the language. I got through a couple levels quite easily as the ones at the beginning are just mathematics but I can't get past 1.06 because I can't see the relationship between the numbers/I don't know what operation would work. No matter how many times I failed (I did get past with a convoluted else if statement) there are no real hints other than results page (input x, expected output, real output) but that's not sufficient for someone learning. I'm pretty disappointed but I guess it's back to the books for now.
I'm not that familiar with the XNA framework, but my guess is your splash screen should probably inherit from GameScreen. Here's some sample code that does a bit of what you want. http://thrillforge.blogspot.com/2011/05/how-to-add-screen-to-gsm.html?m=1
That's not a gripe, that's a fundamental flaw in this.
Good GOD this is slow to execute. Also, as others have said... GIVE ME THE FECKIN' SPEC and I will write you some succinct code. Don't make me reverse engineer the spec. I get enough of this at work.
Er.. I've been programming C# for quite some time and must admit I skipped 6 by using a switch case statement. My friend who is a professional C# programmer did something similar. All of the others on section 1 were relatively straightforward however.
.
Yeah, you're right, it's not that the game was particularly difficult or anything. I was just very disappointed when I started going through it. And I have this sort of internal desire to get a perfect rating on puzzle games. I was just a little frustrated being unable to do so.
It's actually sending the code to the server and compiling/executing it, which would be why it's so slow. It'd be cool to have something similar but entirely client-side using JavaScript (or a language that compiles to JavaScript).
You are right. It didn't bitch about x ^ 2. The compiler would have. 
On 1.06 think of how ints are rounded. Pretty tricky stuff for the 6th question!
If you're worried about 1.06, don't feel bad. There isn't an obvious pattern to be found. There *must* be one, but nobody seems to have figured it out yet.
I probably go overboard with "using" clauses, but I'm now in the habit of using a "using" everytime I have something that's IDisposable. I see you clean up after yourself, but I'm leary of opening anything that I don't ensure gets closed. ServiceManager is a static class, which contains a static dictionary Services. I generally use ConcurrentDictionary for situations like this, since it's likely you'll be calling this in multi-threaded environments. It also has useful methods like AddOrUpdate. Finally, one super minor nit. It's a private method, but you've done such a beautiful job of naming variables/methods throughout the code that this method name sticks out to me: GenerateIV. I first read it as the roman numeral for 4, and it's also not consistent with your other acronym casing (like Aes). That said it looks really nice! I think the intent of the code is clear, everything'd well and I didn't notice anything astonishing..so, great job!
I'll just say to take things slowly. Don't rush through things/concepts. Take your time to fully understand the idea behind it. Know that when you finish learning from a book/videos, you won't retain everything perfectly. You aren't a dictionary. But no one is, everyone has taken their time and much of it. And those who are well experienced, still have to look in reference books because no one can know every in and out of any language. Don't set the expectation for yourself too high. Aim to gain understanding and comprehensions. 
It's 4/x. Just int-rounding trickery.
I gave up on it. This isn't a teaching tool by any means. Most people going in with little to no programming knowledge wouldn't know anything about int rounding and there are absolutely no signs to hint towards that either. As cool of an idea as this is, this is an absolutely horrendous implementation of the idea.
So if i cant figure out the first level it means i am not for programming right ?
This....I was so angry
Node and Python both let you talk to a database just fine if your on linux, don't be that guy who writes php. Friends don't let friends use php.
I don't think it's really possible to go overboard with usings. If an object is disposable and you're *not* putting it in a using block, you better have a clearly articulated reason why.
If you're using Visual Studio as your editor, certain editions (premium and up, maybe) have the Code Analysis feature. Menu item is ANALYZE then Run Code Analysis on Solution. It will then do some static analysis of your code. What this does for you is spot the places where you forgot to dispose something, plus a bunch of less-important things like naming convention, etc. Review what it finds, and decide which to fix (in addition to anything related to IDisposable). John Carmack uses the C++ version and likes it a lot. http://www.altdevblogaday.com/2011/12/24/static-code-analysis/ 
This is so correct, it's doubly correct.
This sounds awesome! I will definitely check it out. Thank You! :)
Let me preface this by saying that I don't think what you are doing is necessarily bad coding practice. In fact, whenever I give code reviews to my peers at work I try to adhere to SOLID and look for code smells - but the great thing about those is they are just principles and not the rule. If there is a good reason on why you are doing something (and what you explained could very well be a good reason with making it easier to work cross platform) then it's not bad coding practice. However, my intention is to just make you think about your code and if what you are doing is really what you want to accomplish. So let me leave you with this: You say you want to reduce the dependency, but aren't you really increasing the dependency? Let's use an example like this... let's say I have a button interface. We would expect the button to do something when I click it. Pretty simple interface correct? It does one thing and it does it very well. Now, I want to say that the button when clicked turns on a light. So I add a method to my button interface to turn on a light. Now my button is a little more complex and is acting like a lamp so would it really be considered a button now? What if down the road I wish my button could turn on the TV? Well shoot, now I have a little bit of a problem of my button interface getting bloated as it's doing a few different things that aren't really related to another. In this case wouldn't it be better to have a button interface that just clicks, have a lamp interface that implements the button interface, and then another TV interface that also implements the button interface? I mean yeah, now your TV and lamp are dependent on the button - but if the button breaks it will be pretty obvious where that code is that you need to fix and in the end makes your code much more manageable. Where as the way you're doing it now, your TV might break but now you're not sure if it's the button, the display, or maybe you're just not getting a signal from your cable provider. Finding that issue becomes a lot more difficult.
You're creating 2 Game classes (Game1, and also deriving Splash from Game) and duplicating all the Game specific stuff. Your Splash class should be much simpler. Have a look at this source code - http://www.xnadevelopment.com/tutorials/creatinga2dsprite/CreatingA2DSprite.zip from http://www.xnadevelopment.com/tutorials/creatinga2dsprite/CreatingA2DSprite.shtml If you have a look at Game1.cs and Sprite.cs in there it should give you the idea.
Basically you create your spritebatch, spritefont, contentmanger, etc. in Game1, then pass them to Splash as arguments. And spritebatch begin/end is just called once in Game1, with a call to your splash class along the lines of splash.Draw(spritebatch, spritefont, gametime) Follow through the tutorial step by step at at http://www.xnadevelopment.com/tutorials.shtml, it does a really good job of starting you off on the basics.
Yes, I got it. Thank you for your wonderfully simple explanation. I'm going to think about my interface design a bit more and simplify them. I really like the sound of SOLID, I'll talk to my team and maybe we can learn about it and use it for our project. Your help was greatly appreciated :)
Since you're using Stream.CopyToAsync I assume you're targeting .NET 4.5. In which case, don't be afraid to use async/await. For example, public async Task EncryptStreamAsync(Stream input, Stream output, string password, byte[] salt) { using (var managedAes = new AesManaged()) { managedAes.Key = ComputeAesKey(password, salt, managedAes.KeySize/8); managedAes.IV = GenerateInitializationVector(managedAes.BlockSize/8); await output.WriteAsync(managedAes.IV, 0, managedAes.IV.Length); using (var encryptor = managedAes.CreateEncryptor(managedAes.Key, managedAes.IV)) using (var crypto = new CryptoStream(output, encryptor, CryptoStreamMode.Write)) { await input.CopyToAsync(crypto); } } } 
In this code if (!Directory.Exists(RootDirectory)) { Directory.CreateDirectory(RootDirectory); } the test is unnecessary. See http://msdn.microsoft.com/en-us/library/System.IO.Directory.CreateDirectory(v=vs.110).aspx &gt; Creates all directories and subdirectories in the specified path unless they already exist. Also, if (DirectoryExists(pathComponents)) Directory.Delete(JoinPath(pathComponents), false); contains a race condition. Best to use a try-catch try { Directory.Delete(JoinPath(pathComponents), false); } catch (DirectoryNotFoundException) { // } 
Well, I haven't ever written any PHP (Most of my work has been in either LISP or .NET) but thanks for reminding me that I should learn Python... it's been next on my list for a while.
Wow, that's beautiful! :D I was trying to use async/await yesterday but I had written "return await input.CopyToAsync(...);" and it was giving me an error. I assumed this wasn't possible, you just got rid of the biggest headache I had with this code! I didn't realize that saying "await input.CopyToAsync(...)" automatically creates a Task for you. Wow, thank you /u/midnight_city
Wow, it's amazing how you noticed this :) Thank you, I'll change this right away!
Awesome! I'm happy you learned something from my video!!! Thanks for watching.
What you are describing is an inversion of control container - these have been around a while check out Castle Windsor, Ninject, StructureMap, AutoFac they all exist to solve that problem.
return 4/x;
Just as a caution ConcurrentDictionary is fairly more expensive then regular Dictionary so it might not be suitable for every situation. 
&gt; Friends don't let friends code in PHP Best advice in this whole thread!
Yeah, I figured out the "elegant" solution after a while. But I don't think anyone who is learning programming and C# would be immediately aware of that, which this game seems to be aimed towards.
True that
VS Professional (Above Express) got it, so he'll probably have it :)
The advanced version of this is called StyleCop, check it out it's pretty great. Also Resharper will help prevent many of these issues, they work together very nicely.
I had the same problem with 1.10 because I'd forgotten what a 'linear operation' was and had to go look up the formula.
What exactly do you want to monitor? Can't you query in certain intervals and check for changes for the items you want to monitor?
Looks nice, I was (actually still am) looking for something similar. But I need something where I get a random color (pastel or something like that) from a string. Like GetRandomColor("Peter") always returns a blueish color, while GetRandomColor("Hans") always returns a yellowish color. I've already tried to just convert the string to hex and use that as a color code, but the colors are too equal.
Why would you write an extension method that ignores its first parameter?
While I really like the idea and was kinda excited as I needed to refresh my Java knowledge a bit, this game is not really helpful. Those are just math puzzles. Doesn't really help me to be a better coder, if I have to figure out I have to return x / (y * 3) or something like that.
Programming is a lot about code design patterns. Recognizing where you need them and where to use them. For every solution you write you're really just piecing together some very common and very small "design patterns" much like how the brain compiles English sentences and speech. It doesnt construct it word for word, just as we don't program latter by letter. In this sense, a matching pattern to purpose is very useful for a learner.
In methods where "this source" is ignored, a random color is returned, irrespective of what the source is. In other methods source is used to return a random shade of "this source". The decision to make all of them extension of Color was on the basis of their functions, they return random colors with some parameters. But your point calls for a more thinking to qualify the stand or restructure the methods. Do you see any issue with the extension where the object is not part of method's logic? 
If an instance method doesn't use `this` in some way, it should be made static, period. Otherwise it's lying about what it does, implying that calling it on different instances will lead to different results. The same goes with extension methods.
You could try using the string's hashcode as a seed for the RNG.
Yea if it doesn't notify you, this is the only way. (I don't know anything about interaction with AD)
That's what I've tried. But the colors weren't different enough with the values I've used. So I need something less random.
You might want to check /r/forhire too, if you haven't already. There's other programming specific jobs subs in /r/programming's side bar too.
Basically I just need help with the MVC. I've been working for a week on a private project so as to try and understand what I'm doing, but I haven't even managed to edit a user record yet. So while I can learn, I just don't have time to on this project. If you're interested, PM me your Skype name and we can discuss.
How is it being hosted? Are you using an ORM? If so, what ORM?
Yes, this really is not what extension methods are for.
using Entity Framework, will be hosting it on an IIS web server with my friend's hosting company.
This entire blog is really frustrating to read. It *might* be better if the code wrapped, but I personally hate when code wraps. I'd rather see the blog not be fixed width. If I resize the browser window to span multiple monitors, the content column of the blog should expand as well. Having to scroll down to the bottom, scroll to the right, and then scroll back up is very frustrating. &lt;/rant&gt;
Thanks for the comment. Will see if something could be done. Currently I use [code] block provided by WordPress.
No prob. And thanks for posting. I hope I didn't come across as too douchey. The problem could easily be with WordPress itself. (I've never written any kind of a blog since ye olde myspace days.)
No. It is more like a puzzle for those who know basics, they couldn't make a learning tool.
Use the string hash code to seed a random for the color's hue, then randomly generate the value and saturation. Then convert to rgb. 
I haven't looked in to the details of it but ActiveDirectory has an ETW event provider. Depending on the events available you might be able to write something using those. .Net 4.5 has a library called TraceEvent that makes implementing ETW listeners fairly easy, I believe it is available through Nuget.
I'd be willing to help out, depending on the project. I can either code or act as guidance. PM me for discussion.
&gt; then randomly generate the value and saturation In my case there should be no random without any seed, as one base string should always have the same number. But maybe I just understood you wrong.
&gt; Unless you wanted a given string to always produce exactly the same color and shade every time, in which case you should use the same seed. That's exactly what I want. As it's only a small part of a personal project, I didn't really spent any more time with it. I think I've used something like [that](http://snipplr.com/view/36461/) to generate a HEX from a string, but how I said, the results where too close together, so everything almost looked the same. Maybe I'll give it another try someday.
You can also [verify](http://referencesource.microsoft.com/#mscorlib/system/io/directory.cs#e3885fef9f6af9de) this in the reference source, for those inclined to do so.
Short code review: - Please **always** use access modifier (line 1). Later looking at this code there's no way to know "Did he forget it? Did he know what he did?". By explicitly defining the access modifier you leave no room for this. - There is no need to wrap the return expression (line 9 and many more). `return generateColor(..)` is fine, `return (generateColor(..))` is nonsense. - You should check for **pre-conditions** at the beginning of the method, instead of somewhere in the middle (line 35). Check for all pre-conditions, throw exceptions on failed conditions, then have the code normally. - For types like `ArgumentOutOfRangeException` you should **always when applicable** define the **paramName** constructor argument (line 35). - Please use the C# naming conventions (line 73). `generateColor` is no proper name in C# for a method. - Please watch that you have a **consistent** coding style (line 79/80). Sometimes having a space after the `if`, sometimes not. - Empty lines are not harmful, but they can improve readability (method line 73). The code is squashed together. - Don't keep debug output in your methods (line 92). Instead use Visual Studios **trace points**. - Your code is **incomplete**. `ConvertToRGB` and `ConvertToHSB` are undefined (line 75 and 86). - A class name such as `HSB` or `RGB` is very bad. It does not describe what it is. Absolutely only use this if it's a **private class**. - Extension methods that do not access the **source** (aka this) are **no extension methods** and should not be made as such. - Again, C# naming convention. Variable names should never start with **_**, and should also not have **_** somewhere in the name (line 76).
&gt; So in TDD, the aim is not to write any production code without writing a test for it first. This I can accept (although I find it weird). By writing the tests first you're forced to think about the design of your application beforehand, before jumping right into coding.
I was already thinking "nice, I agree with all points". Then I saw it: Eric Lippert.
How funny - I saw this thread this morning and started thinking about it.. then needed to tackle the problem myself. This is what I was able to find: http://msdn.microsoft.com/en-us/library/ms676877(v=vs.85).aspx It looks pretty promising, I plan to play with it today! Unfortunately they only show C++ code. I would wager a guess that p/invoke or normal LDAP functions will accomplish the task.. wont know until I start playing with it.
There should be a rule for pointing out the fact that people are self-promoting their own blogs. From Rediquette: &gt;Feel free to post links to your own content (within reason). But if that's all you ever post, or it always seems to get voted down, take a good hard look in the mirror — you just might be a spammer. **A widely used rule of thumb is the 9:1 ratio, i.e. only 1 out of every 10 of your submissions should be your own content.** http://www.reddit.com/user/jconway007/submitted/
 using System.IO; using System; class Color { public int R, G, B; public Color(int r, int g, int b) { R = r; G = g; B = b; } public static Color CreateFromString(string str) { int hashCode = str.GetHashCode(); Random r = new Random(hashCode); return new Color(r.Next(0, 256), r.Next(0, 256), r.Next(0, 256)); } public override string ToString() { return String.Format("#{0:X2}{1:X2}{2:X2}", R, G, B); } } class Program { static void Main() { var sourceStrings = new string[] { "Chlorine", "Sodium", "Uranium" }; foreach (var str in sourceStrings) { Color color = Color.CreateFromString(str); Console.WriteLine("Color for {0}: {1}", str, color); } } }
Thanks for the detail review. I will go through them and get back.
Thanks, that actually works pretty well. :)
I don't think I've ever been able to find a point I didn't agree with Eric on. He's a really smart individual and his contributions to C# as a whole will probably continue on for quite some time.
&gt; I note that DateTime.Now violates these first two guidelines; the current time is not really a property of the set of DateTimes, and it changes frequently on its own. In retrospect, it ought to have been a DateTime.GetCurrentDateTime() method. Convenience &gt; design patterns and silly rules. To a certain degree of course, but in this case DateTime.Now is incredibly more convenient and only slightly less proper making it the right choice.
Sweet resource! Thank you! :)
Good points as always. Just one question: &gt; Don't keep debug output in your methods (line 92). Instead use Visual Studios trace points. Did you mean break points? AFAIK tracing is only available in Ultimate editions of Visual Studio. 
Except for jumping straight into coding tests :P
In the end he says that too. &gt; These should be seen as guidelines, not rules
That violates naming conventions which are expressed as actions (`[verb][context]`).
Oh my god that was awesome. My understanding of c# is nowhere as deep as yours, i use it at somewhat cruder level, using only what i need... Shit, i need to get me some books...
Have a read up on data binding and data context. Rather than 'adding' the data to a datagrid, you just bind the datagrid to your collection. This is one of the areas where WPF really comes into it's own. Here's some very simple code showing the basics - http://pastebin.com/YJpxAW1R The "{Binding}" on its own in the datagrid itemsource just means the data context (the window data context in this case - I set it in the Window_Loaded method. You could if you want set the data context for the datagrid but then you'd need to name it to access it through code). If I had instead set the data context to a collection class called "People" with a list of Persons called "PersonList" the itemssource would be bound to "{Binding PersonList}". Your bindings follow whatever your hierarchy is, so the itemssource is bound to the collection, the column text is bound to the properties of the individual items, etc. Hope that makes sense. More reading: http://wpftutorial.net/DataGrid.html http://msdn.microsoft.com/en-us/library/ee344869(v=vs.110).aspx
In that pastebin example I specifically didn't show the date of birth to show you that you can cherry pick the columns you want. If you're doing something really simple and you want all columns you can just do: &lt;DataGrid ItemsSource="{Binding}" AutoGenerateColumns="False"/&gt; and leave out the column stuff, then it will just autogenerate a column for each property on your class.
Also the name "Items" I used in the code doesn't have any significance, it's just what I called the collection. It could as well have been called "Things", "People" or whatever. "{Binding}" relates to data context, then the names of sub-items, properties, etc use the actual names. e.g. "{Binding Something}" is the "Something" field/property on the class that is set as the data context.
Getters are expected to be idempotent. A property is a property - it's a fact a class contains when provided and provides when interrogated. A read-only property whose value changes independent of the callers? Kind of smells like a method.
It could be that great minds think alike, or it could be that fools never differ. :-)
Holy shit! Are you like...holy shit! OK. Calmed down and ready to reply. I'm quite happy to see you here on this sub-reddit and perhaps I'm just gushing right now, but it's great to get a reply here from you. So, thank you. Great blog post like usual Eric. Keep them coming! Also, if you're able to reply...I was toying with writing a whitepaper or a post somewhere (CodeProject probably) on something I've managed to put together recently because of my work. Essentially I've been able to interop from Visual FoxPro 8.0+ (yay COM) to a .NET C# library and expose IronPython...and I was able to navigate up and down completely (IronPython could see and interact with the FoxPro object and FoxPro could pull the object back and see the changes). Have you seen something like this before? I did some Googling/Bing searching and I couldn't find anything.
To be fair, he did have a fair hand in authoring the language and knows quite a bit of the internals (and spec).
Source code: https://github.com/chrisparnin/attachables Visual Studio gallery: http://visualstudiogallery.msdn.microsoft.com/850937ba-ff0b-43cb-badd-4e273b508c32
If I meant debug points, I'd have said debug points. If I meant tracing, I'd have said tracing. I said trace points. :-) Trace points are basically debug points that do not break, but print out a message to the output instead. They're available for all versions of Visual Studio. http://msdn.microsoft.com/en-us/library/232dxah7(v=vs.90).aspx
Yes, indeed. This self promoting is really pathetic and getting overhand.
Interesting... I didn't realize trace points were a separate thing from Intellitrace.
I love all these new features of VS!
This is not a new feature of VS, this is an extension written by freedoodle.
:o I love freedoodle?
And this doesn't even have the chance to blow up in production. Now this is way better then the original :D
I use Castle Windsor, it is not the fastest by any stretch but it has a lovely fluent configuration api eg 'register all classes from this assembly implementing this interface with this lifestyle.' It's my go to for any complex project. For Mobile, I believe you might want to look at Funq (renamed/forked to Munq) which is very lightweight - Munq was built with mobile in mind. I think it forgoes advanced features such as auto-registration in favour of speed/low memory use.
Seems truly awful on the whole. Most of it is polluting the readability of the language. * New KeyValuePair syntax - Bad. Makes syntax different from tuples, which are essentially the same thing. * New $ indexer - Could be good, making things more readable. * Auto-intialisation of properties - Good but horrible implementation. I would prefer this so that syntax is kept consistent: public IList&lt;string&gt; Foo { get; set; init { return new List&lt;string&gt;(); } } * Primary constructors - Pointless and bad. I fail to see the use. Which constructor you use always depends on what values you can/want to provide, this seems to offer nothing new besides polluting the primary constructor with inline private fields, and spreading value assignments all over the class. * Using static - Bad. Its reducing the readability of the code. * Declaration expressions - Hm. While helpful (everyone hates declaring for out parameters), it does reduce readability slightly. * Await in exception - Cool. * Numeric binary literal - Not comfortable with it, but will likely never use it.
 //TODO By three weeks after I leave: stop compiling :) Cool feature, though I think it better that items (especially those with deadlines) are managed outside of the codebase. :)
Do you really want to use DataGridView for this? The DataGridView control is normally used with bound data. If you just want to add rows I'd suggest taking a look at the ListView control instead. Set it to Detail view, add your columns (you can do all this in the designer) then to add a new item do the following: ListViewItem lvi = new ListViewItem(); lvi.Text = "First column data"; lvi.SubItems.Add("Second column data"); lvi.SubItems.Add("Third column data"); myListView.Items.Add(lvi); If you still feel the need to use a DGV, take a look at DataTables then just bind it and do your data editing on the DataTable instead
Thanks for looking at it! I'll check out ListView in the morning! DataGridView seemed like the best fit at the time which is why it was chosen.
i assume that this is only at compile time and not something that could hurt production. /u/freedoodle? 
Correct, but living in a world of CI, it would still be a pain in the rear. :)
Am I ruining the party by saying that I think that this sort of thing is a really bad idea? Because I am bad at predicting the future and code I've written that I wasn't super proud of has been good enough to keep working for years in spite of my thinking "this shit will crash and burn if I don't fix it." I'm aware that this type of thinking is in ugly support of worse is better, but breaking things that work just because you had a hunch that shit would get ill three weeks from now is *even worser*. If it's something genuinely worth fixing, fix it now.
The code snippet is minuscule - no excuse for it to be compiling that slowly.
Couldn't you always just edit the comment to extend the deadline and let the code compile?
This blog post has a (possibly out of date) comparison of major containers http://blog.ploeh.dk/2014/05/19/conforming-container/ It's worth following Mark and/or reading his book - he knows his stuff.
If you want to drive only trucks: foreach (Car car in myList.Where(car =&gt; car is Truck)) { car.Drive(); } If you want to drive the third car: myList[2].Drive(); If you want to drive the third car only if it is a truck: if (myList[2] is Truck) myList[2].Drive();
If it's a list you can obtain item #3 by using cars[2]. If it's IEnumerable you can skip the two first and take the next: cars.Skip(2).First(). If you only have one truck and you want to retrieve it use cars.OfType&lt;Truck&gt;().Single(). Single, unlike First, will throw an exception if there are more than one Truck in cars. If you want to select by some other arbitrary condition use Where.
&gt; cars.Skip(2).First() Wouldn't cars.ElementAt(2) be better?
Oh, absolutely! But those todo comments are starting to pile up and editing the comments every few weeks to unbreak the compilation is starting to become a drag. Maybe we should just whip up a service that runs every few weeks and updates those compilation-breaking landmines for us?
Thank You. I cannot believe it is that easy!
Thank you for so much for the answer. I can not believe it is that easy!
Why would anyone expose a concrete `List&lt;T&gt;` as a result from an interface, when `IList&lt;T&gt;` gives you everything and is at the right level of abstraction?
&gt; foreach (Car car in myList.Where(car =&gt; car is Truck)) { Please use `OfType&lt;T&gt;()` instead of the *is*-operator.
Just a code review, no logic review. - The summary and the actual code do not match (QuadTreeBranch.cs, line 17 and more). The comment says it's `IQuadTreeNode`, so the interface, but the property has the actual implementation. This should be the interface. - Mark todo-comments with the word **TODO** (QuadTreeBranch.cs, line 61). Most IDEs can pick up comments that begin with TODO, so it is easier to keep track of these items. - Please stick to the common C# naming conventions (QuadTreeBranch.cs, line 161). The method name should be PascalCase, not camelCase. - Comments like *because I can* have nothing to do in professional code (QuadTreeBranch.cs, line 163). - Consider separating these lines using variables to improve readability (QuadTreeBranch.cs, line 164). - Commong C# naming conventions dictate that private fields start with an underscore (QuadTreeLeaf.cs, line 17). - This line is way to long, split it up using variables (QuadTreeLeaf.cs, line 43). - Use the LINQ `Max` and `Min` methods instead of doing this yourself (QuadTreeLeaf.cs, line 69). - If with no items there is no average value then it should be **nullable** (QuadTreeLeaf.cs, line 162). Having 0 as an average when there are no items does not make sense. Also here, use the `Average()` method that LINQ provides. - I only found **3** places where you actually check for **pre-coditions**. Add more checks for pre-conditions. Even if you'd not expect it, a null can always accidental be passed and a `ArgumentNullReference` is **MUCH** more valuable than a `NullReferenceException`, because it clearly says: It was the users fault, not the developers. A `NullReferrenceException` could also be very easily your fault. - **Where are the unit tests?** Some items occur multiple times in the code, but I only list the first encounter I see.
Good point. Not thinking it all the way through, obviously. :-)
I don't think this sort of feature is for large scale development studios, which probably have their own bug tracking system their users can interface with. You aren't allows to (or really shouldn't) intentionally submit an incomplete algorithm to the repo with a to do by tag.
If we're considering another piece of the framework that returns different values with successive calls, would you argue that it makes sense for Random.Next() to be a method or a property?
Thank you very much :) I've got two hours completely free this morning so I'm going to change some stuff. I'm pretty sure that the official guidelines say *no underscore* for private members. I'm assuming the method one is about the `protected` methods ... I chose camelCase because it's not public.
Is there a difference?
*I can't believe it's not butter!* ^^Sorry
I also feel slightly uncomfortable with compile-time errors being generated by comments. Something about that really bothers me.
More like I get an email from offshore saying that they couldn't do any work overnight because of some weird compiler error. Never underestimate how stupid some developers are. Also, this absolutely won't work if some other team builds your code.
See, now we are talking! This is way better than [suggested the other day](http://www.reddit.com/r/programming/comments/25se6v/todo_notes_that_throw_an_exception_if_theyre_not/). I especially like, that the syntax is no different than the existing one! Your expiring todos show up on the same todo list as the rest. This is the proper way to do it!
I'm working my way through them and blogging hints as I go... http://www.davidbond.net/2014/05/microsoft-research-code-hunt-walkthrough.html
Sweet link, thank you! I'll definitely check them out :D
Ok, fixed everything possible. I can't use LINQ's Average method because that only works on numbers.
This makes zero sense; code comments are not user-facing. A build that fails certainly approaches user-facing. Even small shops can afford BitBucket private or Trello or whatever to track items/cases/stories because *that shit is free*.
I agree entirely. But back when I was a hobbyist programmer working with some friends on a project I think I'd have been able to appreciate it back then 
This is a terrible article. The only valid point is to use enumerations instead of magic strings. How can having three classes to remember be any easier than a single constructor with 4 clearly named parameters? This technique is only useful when it already makes logical sense to group information into classes - i.e. when the method/constructor is composing objects already.
Ran into errors: The name 'e' does not exist in the current context 'System.Array' does not contain a definition for 'Contains' and no extension method 'Contains' accepting a first argument of type 'System.Array' could be found (are you missing a using directive or an assembly reference?) And after this project, I will try to get into WPF. Never learned it, but I guess its time lol
Debug it, man. I missed that GetTextArea is going to need to be passed the PaintEventArgs. Contains is an extension, you may need to add "using System.Linq" to the top of the file.
I dunno, forcing a failure every time a comment contains "this should work" or "here be dragons" might be a good idea ;)
If you modify the code to only break in production builds, it would be perfect for things like // TODO filler image until designers create a logo for the About page var imagePath = "dancingbaby.gif";
&gt;Specifically all the line details spreads across the every other row in the group, starting with the first row I don't quite understand what you're saying here. I don't see any attempt to add or set groups in your code. You just seem to create the columns, and then add each item twice, once with columns/subitems and once just with the first column. Add a group like this: // Create group and add it to the ListView var group = new ListViewGroup("text"); StationCTs_ListVW.Groups.Add(group); // Assign item to the group lvi.Group = group; You can also refer to groups by a key, for example: StationCTs_ListVW.Groups.Add("key1", "text"); lvi.Group = StationCTs_ListVW.Groups["key1"]; On an unrelated note, you should use ListView.BeginUpdate() and .EndUpdate() when doing bulk changes to the ListView's contents to prevent flickering and speed up the process. 
Internally? No. Semantically? Yes. It is easier to read and explains more specific what you do.
It's not the best article but it's not terrible either. You don't think it makes sense to group username and password into a class? I will say I'd rather that be called Customer instead of LoginInfo but that's just an opinion on naming convention. Using default values is also a sound practice. Assuming reasonable defaults exist, a good API would require the minimum amount of information useful to perform an operation. If such a default is available why not use it and allow the option for using a custom value instead of requiring it to be passed in? The place where they lost me was the class for age. I've never found a need to create such a wrapper class.
It is safe to say I have never seen anything like that before. Sounds like fun! 
Did you perhaps mean Application.Current.Restart(); ? You should really learn to read and understand the error messages, and learn the difference between static and non-static.
That doesn't work either. Do I need a Using at the top of my code that I don't have? Everything I've seen online show it just being used as is, and apparently working?
I don't expect a spoon, I expected some help. System.Windows.Forms doesn't exist, which is what Restart needs. 
http://msdn.microsoft.com/en-us/library/system.windows.forms.application.restart(v=vs.110).aspx Note the namespace and assembly. Add a reference to the assembly, and add a using directive for the namespace.
Thanks! I eventually got it. I used System.Windows.Application.Restart(); in the button, and that worked out fine
QuadTreeBranch's GetContents and GetLeafs could be written more simply public override IEnumerable&lt;TContent&gt; GetContent() { enumerateChildren().SelectMany(node =&gt; node.GetContent()); } public override IEnumerable&lt;QuadTreeNode&lt;TContent, TAverage&gt;&gt; GetLeafs() { enumerateChildren().SelectMany(node =&gt; node.GetLeafs()); }
Heh, forgot to refactor those after adding the enumerateChildren method. Thanks for pointing it out :) Edit: pushed.
This is about the only thing that he will get from Active Directory, and then it's also based on what has been configured in Active Directory in regards to diagnostic and error events ... The only other option would be to sniff all incoming AD(LDAP, DNS, etc) traffic that comes in on the server and interpret those
there is no such thing as `Application.Restart()` you need to call `System.Windows.Forms.Application.Restart()`
System.Windows.Forms.TextRenderer.DrawText() can handle alignment and other formatting options such as overflow and line breaks on its own, no need to reinvent the wheel.
I'll just comment on some of those points: &gt;* New KeyValuePair syntax Personally, I'd rather see better tuple support (e.g. destructuring, at least) instead of that... &gt; * Auto-intialisation of properties - Good but horrible implementation. I would prefer this so that syntax is kept consistent (...) Fair point, although proposed syntax is probably derived from F#: type MyClass() = member val Id = 0 with get, set // auto-property with init &gt;* Primary constructors - Pointless and bad. I fail to see the use. It's not a *huge* change, but along with initialization of properties, it reduces boilerplate when creating immutable objects and makes it clear which constructor is the primary one. For example, F#: [&lt;Struct&gt;] type Vector(x : int, y : int) = // syntax for get-only properties member _.X with get() = x member _.Y with get() = y while currently in C#: public struct Vector { private readonly int x; private readonly int y; public Vector(int x, int y) { this.x = x; this.y = y; } /* * everything above could be just put * into a primary constructor */ public int X { get { return x; } } public int Y { get { return Y; } } } &gt; * Using static - Bad. Its reducing the readability of the code. I haven't noticed any reduction in readability in either Scala or F#, which both have that feature. On the contrary, sometimes it's most useful for general helpers, like methods in `FSharp.Core` or `Scala.Predef`, or domain-specific stuff. For example, if I'm in the middle of math-heavy domain, it's easier for me to read: var r = Sin(x) + Cos(y) - Log(z); instead of: var r = Math.Sin(x) + Math.Cos(y) - Math.Log(z); Of course, it can be abused, but the same thing can be said for any language feature. &gt; * Declaration expressions Agreed. I don't really like `out` parameters at all, I'd rather work with an `Option&lt;T&gt;` type. Still, that kind of support is better than nothing.
See http://www.aforgenet.com/framework/
That's seems like the best bet. I'm curious to know how you are going about modifying your images. I worked on a similar project in the past as a sort of side project thing and would be interested to see how other folks went about it.
Never heard of it before. TextRenderer looks good, but there aren't many examples out there.
It is polling but only includes things that have changed. http://msdn.microsoft.com/en-us/library/ms677626%28v=vs.85%29.aspx It's how FIM gets changes from AD I believe.
Photoshop for is very flexible and can create any type of game art. Illustrator and other vector drawing programs can create great looking cartoony or flat styles. It's really up to what you need and what your experience is.
No concrete examples, but searching for the "observer pattern in c#" might get you what you're looking for.
Excellent thought! Thank you!
I've been bitten hard by default parameters and only put `default(T)` in them now for whatever type it is. Consider the following: public interface IFoo { int Bar(int baz = 1); } public class Foo : IFoo { int Bar(int baz = 2) { return baz; } } With this done, what is the result of `Bar` called with no parameters? Thus the only constants I use for default parameters are `null`, `false` and forms of `0`.
A c# dev here with liking for creating graphics. I use GIMP for creating raster images and sometimes vector as well. For pure vector you could also consider of Inkscape. Both free and very powerful tools.
You're looking for a message queue system. MSMQ is the quickest/easiest to setup. http://www.codeproject.com/Articles/5830/Using-MSMQ-from-C
The problem with a message queue, from my very limited and inexperienced understand of it, is that it guarantees delivery of all messages. I want the monitors to receive only those messages that were sent after the monitor attaches to the main application.
Then look into a queue using Last Value Exchange (e.g. RabbitMQ) or maybe an XMPP server.
XMPP may be the way to go as it can be configured to not keep messages and just send current messages to subscribers.
OfType does cast to T automatically afaik. Does not matter in this case though, I guess.
Just because they're completely obvious doesn't mean they'll be fixed. * http://i.imgur.com/DXRVK.jpg * http://blogs.msdn.com/b/oldnewthing/archive/2010/08/03/10045199.aspx
In general I agree with you, but I dislike the $ indexer, but like using static and declaration expressions. Here's what I would like to see: * First class support for Tuples * auto packing: var tup = {1, "Hello"} // Parens or curly braces * auto unpacking: var first, second = tup * returning multiple params: public int, string Method() { return {1, "Hello"}; } * String Interpolation * this feature is being discussed * I think the way to go is add a new predicate r for razor syntax interpolation: r"@Interpolate @(razor) @{syntax; style;}" 
While he no longer works at Microsoft, he definitely has his hands full wherever he's located. His blog posts seem to indicate that, at least.
I actually need to find time to create a little utility to remove white space from the bottom of a batch of images. Basically cruise through the pixel array until it hits a pixel that isn't white, and crop from there on up, eliminating the white space on the bottom. Anyway, what I'm getting at is have you identified a image processing library you will use for the raw image access? The default BitMap class and GetPixel() is -very- slow. 
May not be your thing, but I've been loving Pluralsight. Video based training keeps my attention, and they are very thorough and often point out a lot of 'gotchas' and best practices a lot of books dont even touch on. For example, while explaining exception handling, the C# Fundamentals class also gave a good example of how a StackOverFlow exception is thrown, and why. Just random bits like that to enhance knowledge outside of the scope of the current topic is what I like.
I'd add some convolution filtering - a lot of useful image processing can be done w/ convolution. I'd also add an image FFT.
Oh I would love some automation of tuples. Atm they are so verbose I avoid using them.
It's set at the default 100%. The program is just for me so I have just been coding it as I go along and learn something new to add in. How exactly do I make WinForms high DPI aware explicitly? Have never worked with WPF before, but will check that out. I did read about using specific cultures [here](http://msdn.microsoft.com/en-us/library/cc165448.aspx). I'll change it around and see if it works.
The method is pretty self-explanatory for the most part, [with the docs for TextFormatFlags](http://msdn.microsoft.com/en-us/library/system.windows.forms.textformatflags.aspx). The only gotcha is that it takes a somewhat obscure `System.Drawing.IDeviceContext`, but the `System.Drawing.Graphics` implements that interface, so just pass that in from `PaintEventArgs.Graphics` or something.
RoutedEventArgs suggests he's using WPF. I wouldn't expect the WinForms application stuff to work in that context.
Thanks for checking out the post, but I think you're missing the point of the article. I'm focusing on the subtleties of _encoding_ not the decoding. I looked in to the decode code and saw that they are both identical, handling upper and lower case just fine. There's no fun in writing an article about that! 
That would be definitely a good addition. Generally, I think pattern matching would also help *a lot* here, but even simple destructuring would be good enough for starters, just as /u/BecauseItOwns suggested. Although, both because of a general convention and cross-language familiarity reasons, I'd personally use the same syntax that's used in at least several other languages: // F# let tuple = (2, "abc") // Scala val tuple = (2, "abc") Destructuring: // F# let (a, b) = functionReturningTuple() // Scala val (a, b) = functionReturningTuple() Return values of methods could still be in the fully specified form: public void Tuple&lt;string, int&gt; SomeMethod() { ... } All that is, of course, subjective. ---- Since we're wishing now, I also would like to see traits in C#, or *at the very least* the default method implementation in interfaces a'la Java 8...
I love pluralsight as well. However, I also enjoyed [virtual academy](http://www.microsoftvirtualacademy.com/training-courses/c-fundamentals-development-for-absolute-beginners) before I started using pluralsight. It's free, too.
I tried changing the DPI settings and it did fix it. My PC is set to 125% while my laptop is set to 100%. I managed to solve the problem by changing Form.AutoScaleMode to Inherit for all forms and it scales fine. As for the dates I also managed to fix that using DateTime.Parse with culture settings. Thanks!
It's probably worth pointing out that C# allows named parameters when calling a method, which can help readability a lot: LoginAsCustomer(userName:"Darth Vader", password:"ihatewookies", customerType:"New Customer", numberOfTries:3); Also, typically, well-named variables being passed into a function will also make the function arguments easier to understand.
Unity's use of 'yield' for coroutines is definitely pretty hackish. Basically you can return a specific object such as WaitForSeconds(5) or WaitForEndOfFrame(), and any undefined type will simply wait until the next frame. In an ideal world, Unity coroutines would simply use the new async/await syntax in C# which is much better suited for asynchronous operations, but Unity coroutines predate that syntax.
Congratulations! Do you plan to release it as an open source project or some other model? I'd certainly be interested in using such a library in the context of ad-hoc image manipulation via an Intranet interface. I'm aware there are libraries out there already that fit similar needs... But hey, they're not made with the love and care of /u/DirectorChurch :) Keep up the good work pal, and keep us updated on the progress/release!
Since you want to be a game developer, go download yourself the free (and perfectly-capable) version of the Unity game engine. Find some tutorials online (there are lots on the Unity website and elsewhere), and make yourself a simple game. C# is one of the (and these days probably the main) programming language that Unity supports.
I have been using WCF callbacks for a while for monitoring purposes and it works well - sounds like a good fit for you too. http://www.dotnetcurry.com/showarticle.aspx?ID=721
Your IEquatable example can't work like it's on your blog, you're missing `&amp;&amp;` after the null check.
The program already has a basic GUI which I made.
I use the lockbits method kind of like in this link http://msdn.microsoft.com/en-us/library/5ey6h79d(v=vs.110).aspx.
This is what I do, simply because it causes your application to be largely scale-able (since it can act on other machines and connect via network) automatically
Sounds like you want a pub sub kind of thing...
I would suggest a database layer. Have the server write to a database and the clients query the database. Otherwise, the clients would have to broadcast their IP to the server, and then asynchronously send the message to every known client.
Default parameters in interfaces are the devil.
100% agree on the age: I would simply validate the parameter and throw a ArgumentOutOfRangeException. Also, default parameters are nice, but are not supported by all languages... I find properly spelled overloads much better. Lastly, they mentioned that by using an enumeration you don't have to provide validation... this is outright false: it is perfectly legal to pass any value from which the enum is constrained to, so better beef up your parameter validation logic there pal. In the overall, not a very good article.
+1 from a random stranger that knows your pain
If you get it up on GitHub or something then I'd love to contribute.
Be sure to check out the [best practices with async/await](http://msdn.microsoft.com/en-us/magazine/jj991977.aspx): they are deceivingly simple to use and you can easily stumble into some issues if you don't understand how they work under the hood.
I get your article, and all I'm saying is: It does not matter what you use, the difference does not matter.
While Photoshop is very nice, it's also very expensive. Paint.net will do almost the same, and is free.
The CLR does _not_ have an understanding of default values; it's all C#. Therefore a virtual method call (such as that from an interface) can only use the default parameters from the virtual method definition since the implementation is not known at compile time. Therefore Foo.Bar() = 1 while IFoo.Bar() = 2 because it's compiler magic not CLR magic.
I would love some more insight to the whole Reactive - Actor Model and what it is useful for. I'm currently looking online for this topic but if someone here could simplify the whole principle for me that'd be probably easier to understand. 
i would start also with academy too as its free. It has fundamentals and jump start course. Seems the fundamentals video has just been updated :) Personally quite recently i went thru the fundamentals videos, c# step by step book, c# jump start videos and last the exam ref book for 70-483. But I don't recommend the exam ref book for learning anything its just for reference if you study for certificates. The more I write my own code the more i learn... 
MQTT even
The infoq article is the formal definition. It is a long read but explains all aspects. This one is a blog post from a couple of months ago: http://byterot.blogspot.co.uk/2014/04/reactive-cloud-actors-no-nonsense-microservice-beehive-restful-evolvable-web-events-orleans-framework.html
Thank you, the blog post is very interesting. I will take a look at BeeHive. I've only just started looking at the whole event-based programming. But speaking with some friends from other companies, it's grabbing a lot of attention lately... 
This is simply not a viable solution where you can't use composition for multiple, self-contained features (e.g. when creating WPF view models). And even composition, usually done via interface forwarding, is *very* cumbersome to do manually. Stuff like strongly-typed `INotifyPropertyChanged`, view model validation by `INotifyDataErrorInfo` etc. could be exposed as *traits*, or partially (sometimes even fully) implemented interfaces. Freedom to mix them into other classes would be better than combinatorial explosion of abstract base classes for every combination of features you might need...
Blogs are a fairly dead medium There's a reason I usually don't read them, because reddit text-posts usually gets the job done You can argue that you can prettify code better on a blog, but reddit could just as well improve their Code tag
A basic string comparison in .NET or case-sensitive database compare would fail. The blog post is informative.
Thanks I wasn't sure...
What exactly do you mean by using it ad-hoc over intranet?
They're similar enough man, just remake something you've made in VB in C# that's how I started. I never went back.
For my [Quad Tree image thing](http://github.com/Banane9/Quads) I used GetPixel to get the colors ... It's _ok_ since it's only once when loading the image 
Me too :) Just worked with color spaces \*_*
That URL is like buzzword bingo. edit: But it's not a bad thing, and is completely understandable why.
Yes, that's correct. 
I mean, we have an internal web-based application here, part of it's functionality includes the ability for a user to upload images. Being as the nature of the application favours security over functionality, 3rd party services that offer image manipulation interfaces are out of the question. Having this library sounds like it'd make a nice back-end addition to an image tweaking facility.
I am saying default parameters with values that are not: null false 0 0 default(TimeSpan) //compile time constant form of TimeSpan.Zero default(BigInteger) and so on are bad. 
Placeholder for my response, but I did have a question for you: 1. The 4 enum fields within MyObj, do they share from the same pool of Enum types? (Ex: are there 16 different types of enums, or only 4 different types of enums)
They do not share from the same pool. So there's 16 enum values available. 4 for each of the 4 fields
I recently solved the same sort of problem a completely different way. There's one caveat though, all of our view models share a common base class. This might be an issue for some, but it works fine for us. I'm also solving a slightly different problem, the only thing I'm worried about it is raising the `PropertyChanged` event on other read only properties. This is all to make WPF data binding and data validation update correctly. So what I did was create a `DependsOn` attribute that I can apply to my read only property. The read only property produces a value based on some other read write properties on the view model. I need to fire the `PropertyChanged` for the read only property any time one of those properties the read only property utilizes to produce its own value changes. What I end up with is a property that looks like this: [DependsOn("ReadWriteProperty1", "ReadWriteProperty2")] public string ReadOnlyProperty { get { return ReadWriteProperty1 + ReadWriteProperty2; } } What I really like about this is that it keeps the dependency declaration right next to the code that's using it, so when some one goes to change it later, it should be obvious that they both need to change together. To make this work I have a method on my base class, `SetPropertyValue&lt;T&gt;`, that looks for other properties on the same class that depend on the property being changed, then raises the event on those properties. The way it's used is like this: private string _readWriteProperty1; public string ReadWriteProperty1 { get { return _readWriteProperty; } set { SetPropertyValue&lt;string&gt;(ref _readWriteProperty1, value, "ReadWriteProperty1"); } } It's somewhat like a DependencyProperty but lighter weight. I cache all the metadata I need in a dictionary that maps to the property name on the type so it ends up performing pretty well. The one thing I wish I could do differently is get rid of the magic strings in the attribute declaration, but those arguments must be constants. I plan on doing it for the `SetPropertyMethod` but I just haven't gotten around to it yet. 
It sounds like you are after a 'factory' pattern, but I've never written a factory that triggers off of 4 distinct enums, let alone one with 256 distinct return values. Maybe roll the 4 enums into a single enum, then run a factory off of that? Maybe you need to rethink your design first, if possible.
As an addendum to this, 2 More options 1. Use a 5th enum that is delimited by a character, parse that into an array, and load each field with the string value 2. (probably my favorite) method chaining. 
This is not what I was talking about. This is about method parameter default values. default(T) is something completely different.
I use MvvmLight for this - it comes with a ViewModelBase that implement INotifyPropertyChanged, and code snippets that let me easily create 'observable' properties. The code snippets can even use a lambda style syntax, so 'magic strings' even goes away - just don't use that for performance-dependent properties.
Yeah, below I posted that I think chaining methods is the way to go. Something like MyObj obj = MyObj.New().Enum1(enum1).Enum2(enum2).Enum3(enum3).Enum4(enum4); This would meet the ends of 1. writing as minimal code as possible, 2. avoiding creating a full on factory, and 3. Being able to clearly see and define the object without having to refer back to a list somewhere to know what I want to create.
I'm not sure what you're trying to accomplish here. If the enums are properties, you could do something like this: new MyObj() { Enum1 = Enum1.One, Enum2 = Enum2.Two }) Else, whats the need for the 4 methods? You could have one method like so: MyObj.New(enum1, enum2, enum3, enum4) Or even use the constructor for it
That's the way I'm used to doing it, but I wanted to take the time to question that style. IMO it looks sloppy and there are other fields in the object that can be forgotten. Or I'm way off base and you're completely correct, guess I just wanted a second opinion
Oh, yes you are correct the CLR doesn't do anything to handle default parameters as it is handled by the C# compiler (which is why you can use them in C# 2.0 when compiled with VS2008 even though you couldn't in C# 2.0 on VS2005).
If you do case sensitive string comparison with Url encoded you deserve it to fail. Ad I never said the blog post is not informative - it is interesting. I just said it does not matter at all which you use because those strings should never ever be compared case sensitive.
How are you calling this function? That while loop is not a proper timer and 5000 loops != 5 seconds. It will execute as fast as your CPU can run it, so most likely it is executing so fast that it reaches the end before you can change the color. You should look at using actual time either in an actual timer, or doing it manually using something like the Stopwatch class. Read this for information on the various C# timers: http://msdn.microsoft.com/en-us/magazine/cc164015.aspx
Yep, and that would make the query a lot simpler as well.
Well, usually you would put all "required" fields or properties in the constructor - or a factory method for that matter, so they can't be forgotten. If you really have 265 (4^4 ) possibilities that are all valid, than its nonsense to make that many factories. However, if there are only a certain number of right combinations, for example "you can only use Enum2.Two if you also have Enum1.Two" - then you might want to make factories or something for it. if you don't have too many right combinations, you could make specific classes for it. For example, you'd have a base class like this: public abstract class MyObj { // constructor public MyObj(Enum1 enum1, Enum2 enum2, Enum3 enum2) { // ... set fields } } and you could make instances like so: public class SpecificConcreteMyObj { SpecificConcreteMyObj() : Base(Enum1.One, Enum2.Four, Enum3.Two) } That way you can create classes for very specific cases. If you have too many valid combinations, this isn't a good solution. If you have a lot of valid combinations, you could look into the [builder pattern](http://en.wikipedia.org/wiki/Builder_pattern) Then you'd get some kind of method chain, like you already suggested yourself.
If this is XNA I wouldnt bother using a timer since you basically already have one (the Update() method is regularly called). What you need to do is keep track of the time. Use the Stopwatch class to keep track of elapsed time. Every Update() call check keyboard input ONCE (not in a loop). Then increment the elapsed time. Then check if the elapsed time is &gt;= 5 seconds, if so reset the elapsed time and set the color to white. http://www.dotnetperls.com/stopwatch
... or - although it is a completely unessecary workaround - you could use System.Threading.Thread.Sleep(1000) in each loop. That'll order the applications' main thread to wait 1 second before looping again. [MSDN-Source](http://msdn.microsoft.com/de-de/library/d00bd51t%28v=vs.110%29.aspx?cs-save-lang=1&amp;cs-lang=csharp#code-snippet-2)
 [Flags] public enum UserType { Employee = 1, Manager = 2, Contact = 4, Thug = 8 } [Flags] public enum Location { NewYork = 16, California = 32, Nevada = 64, Valhalla = 128 } [Flags] public enum FoodPreference { Pizza = 256, Hamburger = 512, Sushi = 1024, Starvation = 2048 } [Flags] public enum LikesMe { Yes = 4096, No = 8192, Maybe = 16384, Lamp = 32768 } public class MyObj { public MyObj(){} public MyObj( int value ) { SetValue( value ); } public UserType UserType {get;set;} public Location Location {get;set;} public FoodPreference NomNoms {get;set;} public LikesMe ShouldDate {get;set;} public void SetValue(int value) { UserType = value &amp; ( UserType.Employee | UserType.Manager | UserType.Contact | UserType.Thug ); Location = value &amp; ( UserType.NewYork| UserType.California | UserType.Nevada | UserType.Valhalla ); NomNoms = value &amp; ( FoodPreference.Pizza | FoodPreference.Hamburger | FoodPreference.Sushi | FoodPreference.Starvation ); ShouldDate = value &amp; ( LikesMe.Yes | Likesme.No | LikesMe.Maybe | LikesMe.Lamp ); } public override int GetHashCode() { return UserType | Location | NomNoms | ShouldDate; } public override bool Equals(object obj) { if(!obj is MyObj) return false; return GetHashCode() == obj.GetHashCode(); } } Examples: var first = new MyObj(UserType.Employee | Location.Nevada | FoodPreference.Sushi | LikesMe.No); var second = new MyObj(UserType.Thug | Location.Valhalla | FoodPreference.Pizza | LikesMe.Maybe); if( first.Equals(second) ) ...something... Just one example. I wouldn't even say that it's actually "best practice" because it is not very extensible. You could also have the enums not be flags and write your own custom logic into GetHashCode().
This is pretty much the right answer. But also: You seem to be changing the value of some outer-scope variables (XxxIntensity), but how is changing the value of a variable actually resulting in a change to the display? It's conceivable that these are actually properties, which when changed result in some method in the UI getting called, but that seems unlikely to me. But even if that were the case, because you've got the program trapped in the while loop, you're hogging the UI thread, so the update to the window won't ever happen. Working within an event loop can be difficult to get your head around at first, but you've got to keep in mind that, as the parent post said, you're actually being called from within Windows's own loop, you don't need to provide your own. I also notice that you're only getting the keyboard state once, at the top. You're looking at that state multiple times, but what you're looking at is just the state *as it was when you retrieved it*. So you won't be seeing varying keypresses.
The downside to this is that sleeping the thread will freeze the game for however long you've told the thread to sleep. That probably isn't acceptable.
The reason nothing happens is because of the XNA-Gameloop. XNA calls Update and then Draw, Update then draw and on and on and on. Your loop will run, but when it runs, draw won't be called because the code is "locked" in the update function. After the while loop you check if time == 0 and the colors will be reset and then it will call the draw function. Xna is a great framework (even if it's dead) but you'll have to learn how the gameloop is functioning.
Some old /. comments - not necessarily proof, but a provision of evidence that lends to the understanding that it's more of a first class citizen than most other languages. http://developers.slashdot.org/comments.pl?sid=4989195&amp;cid=46666375 http://news.slashdot.org/comments.pl?sid=1855610&amp;cid=34135634 The nice thing about it is that you get the full .NET library in tandem with a imperative functional language. One of the really nice things about it is that you have a functioning prototype of your code, as you code it. You don't really have to get into the world of snippets or special tools in order to unit test - F# has had that built in since the beginning. It's fairly difficult for developers that have procedural backgrounds to change their mindset to that of a pure lambda language, which would be my guess as to why it isn't seen much within the typical bland business web dev world.
NO, do NOT block the thread to create a timer.
I'm new to this - why can't you just pass the credentials in? WebService.Service srv = new WebService.Service(); NetworkCredential cred = new NetworkCredential(); cred.UserName = "username"; cred.Password = "password"; srv.Credentials = cred; srv.DoWhatever(); 
http://msdn.microsoft.com/en-us/library/ms149618(v=vs.110).aspx easiest way is to setup a timer and have it call a method when it's done. Since this is an XNA project, take a look at this method: http://gamedev.stackexchange.com/questions/32203/interval-timing-in-xna
What are the color intensities initialized at?
I like to use unity from Microsoft, they have they own base class, and it's super useful.
Are you calling this in the Draw method? And if this is in a second class, are you passing spriteBatch as a service? Also, is time just a custom int, or do you plan to use gameTime.ElapsedGameTime.TotalMilliSeconds?; 
Since you have 4 enum possibilities, 4 enums - have you considered having one property with flag enum? Let's describe this in simple way: [Flags] public enum mythingEnum { None = 0x0000, FieldOneOptionOne = 0x0001, FieldOneOptionTwo = 0x0002, FieldOneOptionThree = 0x0004, FieldOneOptionFour = 0x0008, FieldTwoOptionOne = 0x0010, FieldTwoOptionTwo = 0x0020, FieldTwoOptionThree = 0x0040, FieldTwoOptionFour = 0x0080, }; Now, you would of course name your enum values to something sane - but this way, you could have 1 field for your value and be able to compose all the 256 options if you wanted and test for them easy: //combination of two options var myopts = FieldOneOptionTwo | FieldTwoOptionThree; //adding option to existing combo Var myopts |= FieldThreeOptionOne; --&gt; https://dotnetfiddle.net/5z5c13 
I think you would be better using ReactiveUI with Observables and the method WhenAny and WhenAnyValue. Check it out. It will change the way you write your view models. It's based on Reactive Extensions, so if you haven't played with that you're missing out.
I would set them up in the constructor after the call to InitializeComponent(). I'm not sure I know what I'm doing either, though. I just started learning too. Figured I'd take a shot, though. 
Are you trying to fade to white over 5 seconds or jump to white after 5? If the first you need to use Linear Interpolation to gradually shift towards white. If the second you need a timer than hits 0 after 5 seconds.
Thanks for your reply.
Thanks. That looks interesting.
I assume this is winforms you're asking in regards to? And from what I can gather you're more or less asking how to instantiate dependencies? Two patterns I would recommend is service locator and model-view-presenter. Ideally in the constructor of your form you will use a service locator to instantiate the presenter for your view (form) and then pass the view to the presenter. These topics deserve way more than I could ever type, but I strongly recommend checking them out. Apologies if you know all this.
As of now, I just want it to jump to white. 
The reason why it's generally not a good idea to instantiate objects on Form load is that some objects may do a lot of work in their constructor (loading data from databases or web services, etc) and that will slow down the Form loading. Your application will look stuck to the user and will give a bad experience. If this is the case then you should create a Splash screen (another form) to show to your users that the app has started and is currently initialising. When your application starts, display the splash screen, then load your main form (you can instantiate your objects in the main form's load event) and once completed, hide the splash screen and show your main form.
By default only the same domain will be able to access the API. If the domain is different you're going to have to explicitly allow calls, otherwise CORS will block them. http://www.asp.net/web-api/overview/security/enabling-cross-origin-requests-in-web-api 
Almost, it's not the browser that's calling it but the server. We have 2 websites, one is for external use the other is back office stuff (technically this one is also connected to the web). The back office server already knows how to generate invoices as PDFs. So instead of duplicating that I would like to be able to make a WebApi call to the back office server to have generate and return those PDFs for me. What I am looking for is the easiest most straight forward way to secure that API. (Close it down except for that one web server)
Then don't upvote. It's as simple as that. Let the community decide the worthiness of each post. I don't see a problem here. He's generating original content and his blog doesn't have any annoying ads and he doesn't appear to be selling anything. I'm not sure why you feel the need to take issue with someone who is trying to contribute.
I disagree. I browse at least a dozen programming blogs every day looking for new and interesting things. Not everyone is on reddit and it's not intended to be an internet replacement. 
It's a confusing title, but a well presented blog entry. Keep it up! 
How are you calling it, a webrequest? And like issafram says it sounds like a shared library might be more appropriate.
I am a bit tied down right now with the things I can do there as I am not the only dev and we agreed on that in the end. I was hoping to avoid the whole "why do you want to do that?" discussion. The question is really how I can get the easiest authentication method for that.
No, I don't. I don't want to lay our the whole discussion here but it's just what we agreed on. Call that service from that server. The question is how I secure that.
First, IList&lt;T&gt; aggregates most of those interfaces anyway. More importantly, producing a clean interface isn't about seeing how many interfaces you can expose, it is about providing the right abstraction. IList&lt;T&gt; says that the sequence is ordered by index and indexable. It also has the contact of the more basic interfaces. List&lt;T&gt; is the wrong choice because not only does it fulfill the contract but it _picks the implementation_, in this case a fully in-memory, array based storage. There are many useful implementations of IList&lt;T&gt; which might be better suited for the implementor but wouldn't be able to be used.
How are you calling the api?
Well if you are just looking for something simple and both computers are behind your own firewall then I would store a user/pass on server1 which it passes to server2 on each request through authorization header using basic authentication (http://en.wikipedia.org/wiki/Basic_access_authentication#Client_side) over SSL (just in case). Server2 could register a delegatinghandler with ASP which looks for this header in request message, validates it, and if it not there or not valid then return an error response bypassing the WebApi controller altogether. If everything is valid the handler would pass the request down the chain where a controller would respond to the request like normal, not even aware of the auth process that just happened. If you want some stuff protected and other stuff available without auth then you would need to put logic in the handler to only auth certain requests. Personally in my application I do this by putting custom attributes on controllers/actions that require auth and I use reflection to get that info which is used during the auth process. FYI I am no security expert. My knowledge comes from the implementing OAuth2 spec on a WebApi server project that I am currently working on. Edit: Btw I mentioned SSL, but I am pretty sure if you stick to purely server to server where both servers are on the same machine then SSL is overkill. With SSL, your private key is what tells the receiving server how to decrypt the message. But in your case the private key is stored on the same computer as the client (the calling server) and the client and server are communicating locally so the requests should never leave the machine. With this in mind the only people who could intercept the traffic would be someone that already has full access to that machine and at that point they have access to the private key as well so SSL wouldn't really help. Where SSL would come in to play is if they were on different machines on a network you don't have total control/ownership of or if you allowed 3rd parties to use the API as well. So I think SSL in your case would be mainly for future proofing. Granted, if you did move to allowing 3rd parties to access the API then you should probably consider something like OAuth2.
&gt; I'm working on an assignment What did try **yourself** so far?
You have a list of objects. You're trying to get a property from each of that list of objects. To do so, you'll need a reference to each item in the list. Thus, the foreach: IEnumerable&lt;MyObject&gt; allOfMyObjects = GetAllObjects(); // or whatever. However you're getting the list. foreach (MyObject thisObject in allOfMyObjects) { // Do something with the name. Set it, get it, display it, whatever. Console.WriteLine(thisObject.Name); // &lt;---- See how you're accessing a property of your reference to the individual object? }
Did you ensure that there are people in this list?
What is the return type of ListPeople()?
Discount code == get more for your money? No? Never mind :) thanks though
IEnumerable
They already had sample people in this list, but it is in a public static class 
While not C# specific, this should help: http://en.wikipedia.org/wiki/Identifier#In_computer_science 
I'm not a webdev, so I have no idea how tenable this is from an IIS standpoint, but what about running your "secret" service on a port bound to the loopback (127.0.0.1). You can only connect to the service if you are running on the same physical machine and your traffic doesn't even leave the NIC. 
What I don't get now is an example of where it's used, seeing as it's always used?
How did you populate the DataGrid?
Ok where in StackOverFlow? I have been searching there and found nothing related to what I am trying to do. I will read that. I am coming from desktop c++ applications development and never used control databindig. tks!
Well that sounds like a mistake. IEnumerable makes sense for LINQ operations, but for a public API you should be returning PeopleCollection or at least a List&lt;Person&gt;. What is the real return type? 
Then you need to set up a timer variable, decrement it using gameTime.ElapsedGameTime try using: //In variable declarations float countdownTimer = 5f; //number of seconds before color change //inside update if(countdownTimer &gt; 0) { countdownTimer -= gameTime.ElapsedGameTime.TotalSeconds; // May look odd, but gameTime.EGT.TotalSeconds is just time since last update in seconds. if(countdownTimer &lt;= 0) { backgroundColor = Color.White; //(or rgbintensity = 255) } } That should be all you need for a 5 second timer then cut to white.
Thanks a lot! Ok so I was sort of on the right track. :)
Yeah, that's something I was wondering about, if you could open/close a webapi project for certain IP ranges or whatever.
 public static IEnumerable&lt;LwCiPerson&gt; ListPeople() {var lstPeople = new List&lt;LwCiPerson&gt;(); lstPeople.Add(new LwCiPerson(1,"Goofy")); lstPeople.Add(new LwCiPerson(2,"Donald Duck")); lstPeople.Add(new LwCiPerson(3,"Mickey Mouse")); lstPeople.Add(new LwCiPerson(4,"Daisy Duck")); lstPeople.Add(new LwCiPerson(5,"Minnie Mouse")); lstPeople.Add(new LwCiPerson(6,"Alvin")); lstPeople.Add(new LwCiPerson(7,"Simon")); lstPeople.Add(new LwCiPerson(8,"Theodore")); lstPeople.Add(new LwCiPerson(9,"Larry")); lstPeople.Add(new LwCiPerson(10,"Moe")); lstPeople.Add(new LwCiPerson(11,"Curly")); lstPeople.Add(new LwCiPerson(12,"Billy Bob")); lstPeople.Add(new LwCiPerson(13,"Popeye")); lstPeople.Add(new LwCiPerson(14,"Jimbo")); lstPeople.Add(new LwCiPerson(15,"Bugs Bunny")); lstPeople.Add(new LwCiPerson(16,"Yosemite Sam")); lstPeople.Add(new LwCiPerson(17,"Lion O")); lstPeople.Add(new LwCiPerson(18, "He Man")); lstPeople.Add(new LwCiPerson(19, "She Ra")); lstPeople.Add(new LwCiPerson(20, "El Presidente")); return lstPeople; } } Thats the code.
No problem. Let me know if you have any issues.
 int emloyeeNum = 9999; employeeNum is the identifier.
I just found this: [Programmatically Selecting and Focusing a Row or Cell in a DataGrid](http://social.technet.microsoft.com/wiki/contents/articles/21202.wpf-programmatically-selecting-and-focusing-a-row-or-cell-in-a-datagrid.aspx) I think this will help me and instead of: Object obj = datagrid.Items.CurrentItem; used: MyClass item = (MyClass)gridCatalogo.Items[rowIndex]; string name=item._customerName; While I learn how to bind I will use this. Thank you for your help, to all that answer. 
Change this &gt; public static IEnumerable&lt;LwCiPerson&gt; ListPeople() To this public static List &lt;LwCiPerson&gt; ListPeople () Then foreach (LwCiPerson person in ListPeople()) Console.WriteLine ( person.Name ); Sorry for any formatting/syntax problems, I'm on mobile. Also, why is the function static? Edit: Console.WriteLine should be: listbox1.Items.Add(person.Name); 
It was a very frustrating struggle to get it working. I'm currently writing an article over it and trying to make the .NET side as simple as possible. I'll link it here when I get it done.
Oh please please please please don't do this. This is how bugs are born. When you go to look at this again in 2 years/2 months/ 2 weeks after it goes into production you won't remember anything about what you were trying to do and there will be some funny case that doesn't *quite* work correctly. You will probably spend as much time trying to figure out the problem as you did writing the code for this and taking a shortcut. My first couple of weeks as a brand new dev I tried to outsmart the databinding/ MVVM model and I'm still paying for it 2 years later.
tks for the advise!
try { Console.WriteLine("Input number: "); int numbr= int.Parse(Console.ReadLine()); numbr= numbr*3; Console.WriteLine("The Number is"); Console.WriteLine(numbr); } catch(exception e) { Console.WriteLine("you didn't write a number..\n"+ e);} Is that what you mean? Catch returns a exception object, which you can convert to a string using .ToString() . In this example tostring is called automatically. 
 catch (Exception ex) { Console.WriteLine("You didn't write a number...\n" + "Error: " + ex.Message); }
As a general rule you want to be open as possible for parameters and as explicit as possible for return types. So I would expect to see public APIs like these: public static List&lt;LwCiPerson&gt; ListPeople() public static void SavePeople(IEnumerable&lt;LwCiPerson&gt; people) 
You were supposed to use a property of the exception class. To do this you need to declare the Exception in the catch block, like this: try { // code that may throw SomeExceptionClass } catch (SomeExceptionClass ex) // declare exception { // access exception property (Message in this case). Console.WriteLine(ex.Message); } ------------- int.Parse(string) can throw these exceptions System.ArgumentNullException System.FormatException System.OverflowException So you could catch all three and have a different response to each one like this: try { // int.Parse } catch (ArgumentNullException nullEx) { } catch (FormatException formatEx) { } catch (OverflowException overflowEx) { } This would be overkill for this program -- I just put it here to show you it's possible.
Guys, we really shouldn't be doing this kid's assignment... ____ OP, you may want to check out the documentation for the language: * This will show you the exceptions that can be thrown when using int.Parse(string): http://msdn.microsoft.com/en-us/library/b3h1hf19.aspx * This will show you the exceptions that can be thrown from trying to read from the console: http://msdn.microsoft.com/en-us/library/system.console.read%28v=vs.110%29.aspx These exceptions are probably less likely in your case, but it is a good idea to try to catch them. * All catchable exceptions inherit from the System.Exception object which you can find the documentation on here: http://msdn.microsoft.com/en-us/library/system.exception%28v=vs.110%29.aspx * Finally, You should definitely check out the documentation for properly handling exceptions: http://msdn.microsoft.com/en-us/library/ms173162.aspx
"Identifier" is just the scholarly word for "name". Basically anything you give a name is addressed by an identifier.
Or you could avoid string concatenation all together: Console.WriteLine ("You did not enter a number...\nError: {0}", ex.Message);
Actually returning list&lt;T&gt; in public APIs is completely against the guidelines.
I think this is the code provided by the course instructor.
They should have used yield returns for the persons...
I've yet to hear any legitimate argument for discarding type information by upcasting to IEnumerable.
Why is your public field starting with an underscore and lowercase? Public stuff is PascalCase.
Well ideally it would be a PeopleCollection, but List&lt;T&gt; is still a hell of a lot better than IEnumerable&lt;T&gt;. The reason they say to not return List&lt;T&gt; is because you cannot add new methods to it via subclassing. With PeopleCollection (which would inherit from Collection or ObservableCollection) you can add methods and properties to the class without breaking backwards compatibility or asking the user to perform an unsafe downcast. Returning IEnumerable&lt;T&gt; doesn't satisfy any of the reasons behind rule CA1002. http://msdn.microsoft.com/en-us/library/ms182142.aspx
&gt; For one, it's advised in the C# guidelines. Where?
That's probably a bit too much for an intro course but at least that would justify the use of IEnumerable. And it would solve this problem: var people = ListPeople().ToList(); //will this unnecessarily allocate a new list object? Or will it save me an expensive trip back to the original source each time I use people? On one project I had to create a custom version of ToList that would determine if I was dealing with an actually IEnumerable or a List and either down-cast the object or create a new list as appropriate.
&gt;...I wonder if there is a better way to handle such requests? Forward them to /r/learnprogramming. It might not be the perfect place, but most people over there are on board with the "don't just do peoples' assignments for them" situation.
[Here](http://blogs.msdn.com/b/kcwalina/archive/2005/09/23/collections.aspx)'s an MSDN blogpost about usage of the "new" (at That Point) generic collection types.
What did You fix? The ReadOnlyCollection only protects your list, not ist Contents. Those should protect themselves. And an IEnumerable does pretty much exactly the same.
Nothing there says that you should be returning IEnumerable&lt;T&gt;.
Again, for the Nth time, upcasting a collection to IEnumerable does not protect it from modification. Any code that works on untyped variables is going to have code like this: object list = [???] IList&lt;Foo&gt; typedList = list as IList&lt;Foo&gt;; var listIsMutable = (typedList != null &amp;&amp; !typedList.IsReadOnly); 
I said *returning the ITEMS as IEnumerable*. As in: foreach(var item in myList) yield return item;
Thank you, TIL.
I have to say, I've learned more about programming in C# from FXCop and its matching book, .NET Framework Design Guidelines, than all other sources combined.
That's the old version of FXCop. These days it is built into Visual Studio as their "Code Analysis" feature. 
Cool, thanks again.
You're welcome. If I could, I would have a copy of that on every C# developer's desk.
I suggest you take a look at this overload for the CreateMessage method: http://msdn.microsoft.com/en-us/library/ms586762(v=vs.100).aspx &gt; This method reads the envelope, buffers all the headers into the header collection, and reads up to but not including the Body start tag, and returns the message. If the method call throws an exception, it closes the reader. So at that point your message contains everything *except* the body of the message. You can then use the WriteBody instance method to write the body of your XML to your new message object http://msdn.microsoft.com/en-us/library/system.servicemodel.channels.message.writebody(v=vs.100).aspx &gt;This method writes the body contents as well as the start and end tags of the element. *Just as a note, I've never done that myself so I'm unsure if it will actually do what you need it to.
I'm all about turning to other resources for help, but I've yet to have a useful TA and have had more than one professor not actually know how to write solutions to their own problems. One was so bad that after the assignment was due they released a solution for review that didn't actually meet the specifications of the assignment. I've had some great instructors as well, but sometimes your school's resources just aren't cutting it. We definitely shouldn't spoon feed answers to people, but we can't really fault people for making use of available resources as long as they're trying to actually learn something. 
I agree with this. Give them some terms they can google, or drop some hints. Help them learn, but don't flat-out give it to them. 
Unless their problem is that they didn't listen, lol.
I'm currently working on my [own version](http://github.com/Banane9/Quads) of a program originally written in python. It uses QuadTrees to divide up an image into smaller quads. I'm just trying to figure out why the hell it's giving me blueish green when I average white and yellow in Lab color space.
I'm getting easily pissed when people ask improper questions or don't show any effort. If you know that I'm active, then you should have seen plenty very friendly posts too.
I tend to get like that as well. Laziness really bothers me. I swaps a freshman comp sci major back before google and all these other awesome resources exist. We had to rely on (sometimes shitty) books and other students/TAs/professors. Those who couldn't sort it out dropped the major and went to something more suited to them. I feel like a lot of kids get into comp sci because they think it's automatic money but they don't realize the time and effort it takes along with the need to understand many facets of mathematic (of all my courses, the math courses were the most difficult but to me the most rewarding). I'm all for helping people learn but many posts for homework help just want their assignments done for them. 
You could have had "Why does my enumerator not enumerate?" :D
Best example: *"My code does not work, why? &lt;insert part of the code&gt;"*. Only a part, no explanation what the person tried, not even an explanation WHAT does not work. *It does not work* is **NO** error description.
I've messaged the mods before about this. I thought it would be better to have only articles and no programming help. Their philosophy was that the submission stream would be too small without help questions, and I get that. They also said they were going to add a Stack Overflow link on the side bar but I don't see it yet... There should be a guideline for asking help, very much like Stack Overflow has. Questions written poorly should be asked to conform or be removed. By forcing submitters to follow a guideline they will probably end up thinking about their problem and understanding it much better, and we can answer it better as well. 
I'm not too snobby about helping people out with their assignments but I really wish they'd keep it out of this subreddit - stackoverflow and /r/learnprogramming are great for that. (Edit: Not that I was implying you meant anything by what you said!) I visit this place to see new C# news and libraries and blog posts, right now the front page is mostly "How do I do X?".
What do you mean by "unstructured"? If there are 80 columns then there is already some kind of structure to it. 
I assume he means 80 character columns, and by unstructured he means there's no order to the data in the file.
Unstructured data varies so much you'll need a bit more background on the data before you can really have an approach to it (at least from my experience)
If I'm understanding correctly, you can split the string by the line feed, then use the substring function on each of those strings once you know the start position and length of each field.
That's still structured, just not the way you're used to. Lots of string parsing. That's all you can really do. A regex will keep it pretty compact and will probably be faster than a half dozen substrings. 
To be honest, unstructured wasn't my terminology it was my future supervisor's, and when I asked for clarification that is what he told me. You cannot parse something (usefully) that truly has no predictable structure. I get that. So my short term goal would be to either get my hands on a collection of likely examples, or perhaps create program in *creates* a file in a likely fashion, reversing the process if you will. That is creating semi-random columns of text that would result in a file that would be a likely example of a terminal screen dump.
When you create a new person object you get a reference/pointer to that object in memory. When you set that variable to null one line later it wont crash the program, but when trying to access it later it will point to null and not an actual person object. I also don't see any reason to alter the name of people within the list you are given 
You should really take advantage of c# features if you are programming in it. Take a look at some of the linq examples. 
 LwCiPerson empFound = new LwCiPerson(); empFound = null; This is doing extra work, and could be simplified into a single line. if (foundPerson.FullName == nameToFind) foundPerson.FullName = nameToFind; Does absolutely nothing. If you're not sure why, try reading the code out loud or using the [Rubber duck debugging](http://en.wikipedia.org/wiki/Rubber_duck_debugging) method. empFound.FullName = foundPerson.FullName; Will throw a null exception because empFound is null, you cannot access a property when the base object is still null. Here you would want to just set the entire base object instead of a single property of it. Additionally, you probably just want to return the object at the point of match to be more efficient.
&gt; If you're not sure why, try reading the code out loud or using the Rubber duck debugging[1] method. Line 1. I'm declaring a variable 'empFound' to a new instance of a LwCiPerson. Line 2. I'm setting the 'empFound' variable to null. Later on....I'm setting the FullName property of the 'empFound' object reference variable which I've previously set to null. BAM 'Object reference not set to an instance of an object.' I cannot emphasize the importance of rubber duck debugging enough. I have over 10 years experience doing C# and I still ask co-workers if I can "borrow their eyes" for a minute just to explain something to them. Then, the problems usually become apparent (e.g., usually case-sensitivity issues).
Not your problem here, but strong suggestion: Always use braces with your if statements. Seems unnecessary, but it *will* save you one day. Also: Move your assignment after the loop. 
I would use int.tryparse(), and thus avoid having an exception being thrown in the first place. Exceptions should occur when exceptional things happen. I'll always attempt to handle a possible error, instead of using a try - catch to do some kind of input validation.
Just going to share some of my experience with you and if it sounds like it may be helpful I can elaborate more as needed. I've done quite a bit of this type of thing dealing with choicepoint/lexusnexus integrations. They would provide us with a spec for which lines/positions contained what data. So I created some tables to store that meta data for each integration/file, and it contained all the columns, start/end positions, data type, etc. I then wrote a generic routine that used the meta data for each integration to parse it as needed. Since we did a large amount of different integrations, it was beneficial for us to handle the parsing in a generic way. We also created a mapping system as part of this to transform their Text file into a dataset, so we had some guidelines for how "new records" were created as part of the source text file. In our situation, the text dump we had contained a Letter, and an identifier, before each line of text : A100000 B100000 C100000 B200000 C200000 So we had some very basic rules that decided when the line warranted us creating a new record in our destination dataset. *EDIT: and for the parsing, we identified the lines by the prefixes, kept an indexer to know the line # if needed, and wrapped our substring in a cleaner function, then parsed the value based on the expected data type.
When you're getting a null reference exception, it's because you're trying to look at a property of an object that's null. So this is okay: object a = null; if (a == b) { ... } No error here. What you're really saying is: if (null == b) { ... } which is fine. Now if you do this: LwCiPerson a = null; if (a.FullName == b) { ... } you're really saying: if (null.FullName == b) { ... } and now you're trying to examine a property of a null object which isn't allowed. So looking at your code, I can see that you'd get a NRE if FindPerson ever returned null because you're looking at the LwCiPersonKey of the result of FindPerson: FindPerson("He man").LwCiPersonKey if "He man" isn't in the list, then FindPerson returned null and now you're looking at a property of a null object so this won't do. You could add lots of if statements to make this work, but I'd add a function like GetPersonKey: string GetPersonKey(string fullName) { var person = FindPerson(fullName); if (person == null) return null; return person.LwCiPersonKey; // more concisely as a tertiary expression: return person == null ? null : person.LwCiPersonKey; } And now use this function to ensure that you're checking for nulls rather than FindPerson and just expecting it not to be null. 
It's not just C#, the language doesn't matter. Programming is about doing a thing. Asking for homework assignments helps no one. Prod them in the right direction but don't do everything for them.
I mean stuff like this: if (preConditionWrong) throw new Exception(...); that would throw later anyways. Also: Are we not going to complain about the `goto`?
Ok, I'll make an exception (no pun!) for checking preconditions at entry points. They're almost always single condition checks, there's usually several of them, and skipping the braces lets you get on with the show. It's C. Goto's will be around forever in that language... 
 if (pun.NotIntended) throw new PunNotIntendedException("Lies!");
I jumped into it really quick on my phone but here's the gist of it: When you are "newing" up the controller in Program.cs on Line 23 it initializes the AddListener() function. 
Do(x)
To be honest I don't even know what kind of dark voodoo magic Xamarin is doing, but it'd be definitely interesting to do :)
Look up Mono for Android, that's the place to start. You'll find bits and pieces that'll work like compiling for andrijnd and then pushing using the adb console. It sounds tedious and complicated, but really, xamarin charges a huge premium packaging it together. You will eventually get used to it, just like pushing Git through bash after every update.
This might not be helpful at all, but its a bit of the old 'outside of the box' thinking: If you're planning on making a game app or even anything remotely similar you could use Unity3D Free.
You probably have enough on you plate but... Once you have the MVC pattern nailed, might want to have a look at the MVVM pattern. Works really well for desktop frameworks that allow for view and model data binding in the presentation layer. i.e. WPF and Android, and iOS implementation example (https://github.com/MvvmCross/MvvmCross)
Isn't Mono for Android just the old name for MonoDroid which is the old name for Xamarin.Android? Unless there's older versions floating around that had a different license, I don't think you could use it. You can't use Mono's .NET implementation on Android/iPhone because it is impossible (for normal apps) to properly comply with LGPL because they can't have separate libraries. See [the text under "When do I need to obtain a license from Xamarin to the Mono Runtime?"](http://www.mono-project.com/FAQ:_Licensing). Even if your app is open source, you [still have to distribute the runtime as a library](http://www.gnu.org/copyleft/library.html). ([TL;DR Version](https://tldrlegal.com/license/gnu-lesser-general-public-license-v2.1-(lgpl-2.1\))) ^(Also, obligatory "I am not a lawyer": This is merely my understanding and not legal advice.)
I was more concerned with how they run it on android/ios ...
Agree with the sentiment of this post. I think the guy who founded Xamerin, Miguel de Icaza, has been brought closer into the Microsoft fold so you never know, it could happen. Personally, I'd love to see something along the lines of the visual studio express editions which got me into asp.net because it lowered the barrier to entry. 
There's a free starter version, but it's heavily limited.
That is very true, just checked my sources and yours, looks like mono for Android is now completely Xamarin. The old link now redirects completely to [Xamarin](http://monodevelop.com/Download/Mono_For_Android) That's unfortunate news.
Check this out, http://lostechies.com/jimmybogard/2009/06/30/how-we-do-mvc-view-models/. View models are an extremely important part of any non CRUD mvc app.
Remove the comma after "3". Also, an enum is a kind of class so to speak so you might want to move it out of your other class. 
Looks like you've deleted your main method from the original template. Add this before your int counter = 0 line: static void Main(string[] args) { and a closing curly brace after your code. Additionally, I assume you've put Console.ReadLine() in order for the console app to not close. However, since it's inside your loop, it will be called every time the loop runs. I assume you want it outside of your loop.
They're not inside a method
My coworkers consider me strange for wanting to put enums in their own source file... 
The Lockbits method still uses GetPixel its just like an extension designed to make the program more efficient in dealing with pixels.
I never really planned on releasing it because I wasn't sure if anyone would use it since there's already so many other libraries like C++'s OpenCV, etc.
Sorry this doesn't really answer your question - but Xamarin does have free licences for Open Source developers, if that's something you're interested in doing with your project. It's pretty painless. As long as your project is non-commercial and one of the OSS licences (I use MS-PL usually), it should only take a day or two to be approved and they'll send you licence keys. The [Application Form](http://resources.xamarin.com/open-source-contributor.html) is linked from their [FAQ](http://xamarin.com/faq).
&gt;even the 'indie' $300/year plan is fairly prohibitive to most students/hobbyists. They have academic pricing. $99 for a business edition level license (normally $1,000) but without support. Email student@xamarin.com
Feel free to pm me if you want help :)
Damn... I completely missed the program.cs file, you can tell that i am new to c# :) Yes, that's what i was looking for, thanks a lot! 
Thank you for sharing. I don't doubt I'll encounter a wide variety of various structured and unstructured data sets I'll have to parse. My short term goal over the next couple weeks is to get my head in that space and possibly write some routines that *create* files similar at least to which I might encounter, the thought being by doing so might be just as beneficial as if I had the source files themselves. Thanks.
Don't remove the comma after the 3. It simplifies DIFFs.
Your enum (short for "enumeration", NOT "enumerator", which is a different thing) needs to be inside a namespace or inside a class. It is not allowed inside a method.
Your co-workers are dumb.
It's not a "view model", it's just a model.
To expound on Asphael and jCuber's posts and hopefully provide some clarity: The nesting goes generally, namespace { class { method() { [code that you want to execute] } } } ...where namespaces usually define the class grouping of either a library or your program, classes define objects and contain a list of actions your object can perform, and methods define each of those actions which the object can perform. The compiler expects to find classy stuff in a class, and a while loop is methody stuff. Therefore it sees it as an error. You need to put your code that you want to execute into a method, and call it. The method that a console program looks for at the very start is static void Main(string[] args) { } where static means that Main can be called without needing to create a Program object first, void means it doesn't have a return value, and (string[] args) means that when the Main method is called, it requires an array of string values to be passed to it. This array is everything you list on the commandline after "yourprogram.exe", with each space character separating that list into items in the array.
Without knowing more, it's hard to comment on whether this is the correct approach for what you're tying to do but it should be achievable. One solution is to subclass the DataGrid control and override the methods for handling cell editing. This would allow you to pull in templates in an extendable manner (you could traverse the resources in scope and find a template defined for the given data type with a fallback template for common editors, like a TextBox. Or go as far as using something like MEF to load DataTemplates registered against types and create a pluggable architecture). An easier, but more rigid method would be to use a DataTemplateSelector on the CellEditingTemplateSelector property of the column to apply the correct DataTemplate based on the data type of the cell value, but this depends on how you're defining your templates. This guy shows the principle for the display content, but it's not a big leap to apply this to editing. http://zamjad.wordpress.com/2010/08/23/apply-conditional-data-template-in-data-grid/
Well this will probably not be a very well received comment here, but the C# community is not know for releasing loads of free and open source software (neither is the Java community to be honest) while the Ruby community is literally built on free software. 
I'd say in their own source file when they're public and private in a class otherwise.
Yeah, I know historically C# has been mostly closed/enterprise-oriented like Xamarin, but recently with Roslyn/.NET Foundation the community has been moving more and more towards the open-source direction, and with that we'll probably see some more open-source stuff like this.
Mono supports most (all frequently used) features of .NET, and MonoDevelop isn't hard to grasp. You should be able to just use tutorials etc. which are aimed at Windows developers. I, myself, use MSDN for documentation despite running Linux and Mono.
The only issues I've had with Mono have dealt with MVC views and aspx docs not giving useful or meaningful errors.
Look up fixed width format files. Excel can actually import these and separate them into columns for you, albeit through a pain-in-the-butt interface. Programatically, they're very easy to read and parse. Just read each line and parse it with regex or substrings.
I did a couple of the lessons for C# at LearnVisualStudio.net on my linux laptop while I was at a science conference. The basic inheritance stuff seems to work just fine. I think the only thing you will be missing are the .NET libraries.
I don't use ReSharper (gasp!) and recently had to write a project in MonoDevelop on Debian. Overall I didn't miss much from VS2012 and it was a good experience. If you're actually targeting Linux, then winforms is ugly as sin, and you're better off learning Gtk#. However, the documentation is a bit sparse for Gtk# -- this was the main problem I encountered.
Really? I did some work with Monodevelop 4 and I can't remember that this was an issue...
Lucky you. Resharper is like a fucking drug. Get a little taste, then you just feel like nothing is as good anymore without it. 
Did you use the method syntax? Maybe grok_it meant the query syntax.
The Mono Project has an independent implementation of .NET libraries.
Nice. When did that happen?
It's been there from the start.
Stop wastig your time with WPF. It is beking killed by MS.
WPF support is severely lacking on Mono though.
That is kinda the entire point of mono.
&gt;the documentation is a bit sparse for Gtk# This seems to be the case for a lot of the Mono world - as soon as you get into anything of middling complexity, you'll end up doing a lot of trial and error.
and what exactly do you propose as an alternative?
Do you have any sources on that? From what I can see, it's not dead yet. http://greglevenhagen.com/is-wpf-dead-no/
Mono has no WPF support at all, and they've no intention of supporting it either sadly.
The application has a pluggable architecture(uses MEF). The first option is what I am looking for. I'll look into it. Thank you. 
I want the cell to have events. There should be a user control to display the data, and when the user wants to edit it, a different user control should be displayed (after a double click). 
No problem. I architected something similar a few years ago for a property inspector control. The inspector could be used on myriad data types and needed to be extended by third parties so they could add their own. There was a common set of editors as well as editors specific to each data type and it worked really well. Just shoot me a message if you need any pointers.
Monodevelop and xamarinstudio share the same code, just the ui changes and the fact that the second has also a direct support from xamarin if you buy it
Well they basically can't. Wpf is closed source and under license, also that closely related to win32 api. 
Recently I lost my key and tried to use Visual Studio without it until I got back in the office to get it. I actually gave up - realised I'd be no where near as productive to the point of it being frustrating. 
R# is of the few tools that I'll happily pay for, no questions asked. The amount of productivity increase it brings me vastly overshadows the price tag. LinqPad is another that's certainly worth buying.
It might not be essential, but neither is cream on strawberries. The question is, why would you not?
https://github.com/Mitchus/Image-Processing/ Here is the project on github if there's any issues with that link or if you want information or a readme let me know.
Is this a real world project that will be in a production environment? If not, you're adding needless complexity with all the dlls. Since you're just starting out, I would do everything in one project then refactor it out to separate projects later if there's a legitimate need for that.
This is indeed a real world project, or at least it will be once it works. If I do everything in one project, how do I incorporate a decent design standard? Should I have a folder for business objects and just thwack them in there? 
Well, if you're passing around datatables/datareaders you've already got a bit of a messy situation with regards to separation of concerns given that those constructs are strictly concerns of the data layer. This isn't outright bad if the thing you're building is going to be very self contained but you've basically married the highest layer those objects touch to the database layer. A better approach is to use something like Entity Framework to ferry your data to and from the database and between your layers. Are you doing MVC or Web Forms?
Web Forms, I do believe. With regards to the separation of things, anything that is underneath "App.dll" is not meant to be publicly accessible. I.E, that should be my data layer et cetera.
Awesome thanks :)
I've been debating posting this here, as I'm not sure how much interest there will be, but I figured it is c# and a little different to what usually gets posted!
This is fine. You should have a data access library. You should have other dlls. It's hard to know exactly what you are doing; however, your web app flowing through a few dlls is not in and of itself bad. As long as it's on the same machine.
This doesnt answer your question, but you do realize that all the harddrive space in the world together couldnt hold anything close to 2^512 bits, right?
Are you looking for something specific, like a code review or contributors, or just putting it out there?
Just putting it out there, I've seen posts in the past asking "how to do an rpg inventory system" etc, so thought beginners might benefit from the source. The project has been going for almost 2 years (recently moved to github from googlecode) so it's a fairly mature project.
Same here, break up as small as logically reasonable. Keep your libraries as dumb as possible, just like your classes. This makes code more portable.
That's like asking if a // comment changes the source. LINQ is part of the source. So is a comment.
Exactly, however efficient compression could reduce this significantly as access time on the set is not the issue. Should the set have to do adjustments and compression passes on adding a new member, or have to perform decompressions, its okay.
Might I ask why your view differs slightly from /u/lukeatron's? If that's even a question, of course.
You didn't read the article, though the title is rather crap. The "source" in the title doesn't refer to source code, it refers to the source collection in a LINQ expression. i.e. var source = new List&lt;Foo&gt;{item1, item2, item3}; var result = source.Where(x =&gt; x.Prop==val).ToList(); -edit The article isn't really that great to be honest. I'm not aware of any LINQ operations that mutate the original collection. All the article really does is highlight that references and value-types are always copied into new collections which is all LINQ could ever do, though it doesn't actually create a new collection unless you call ToList(). If you don't call ToList() and just iterate down the resulting IEnumerable, it lazily evaluates the LINQ expression, which can lead to a bad time if you modify the original collection before you finish iterating.
I prefer my strawberries plain, thank you. All that cream will rot your mind.
This is exactly the same any other method call. If you pass a value type variable into that method, then change the value of that variable inside the method, the value doesn't change outside the scope of that method. Conversely, if you pass a reference type variable in and then change some property value *on that object*, you're changing the value of that property or field on that specific instance, for every one who can see it.
Moreover, it's demonstrating the clash of _two_ bad* practices: 1. mutable structs 2. LINQ queries that have side effects ^*generally ^speaking EDIT: That being said, if this behaviour is new to someone, or if they didn't quite understand how it is that LINQ (at least, LINQ-to-objects) behaves in terms of emitting new enumerables/collections, then I strongly recommend reading [Jon Skeet's Edulinq series](http://msmvps.com/blogs/jon_skeet/archive/2011/02/23/reimplementing-linq-to-objects-part-45-conclusion-and-list-of-posts.aspx) on re-implementing the basic underlying components of LINQ-to-objects.
Can you tell us some more about why you want to do this?
The article is pretty crap. The correct answer is that LINQ does not modify the ORIGINAL collection from which the data is pulled from. However, it's not LINQ that does the "copy-by-value/by-reference" deal. That's .NET as a whole; that's how it operates. You should not be modifying the collection while iterating anyway. That's all around a horrible idea and practice. I agree with FizixMan below; this article is showing two bad practices and doing a poor job on presenting it. Apologies to the author if he/she/they read these comments for my bluntness/rudeness; this is just not that great of an article.
Umm... I don't think you understand. 2 to the power of 512 bits is somewhere in the neighbourhood of [1,524,290,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 ***tera***_bytes_](https://www.google.ca/webhp#q=2+to+the+power+of+512+bits+to+terabytes) Are you _sure_ this is the value that you meant? EDIT: Or do you mean you have 512 distinct/individual boolean values, thus producing 2^512 _permutations_ of those values? EDITx2: Updated the number to be more precise and with comma separators
Because the cream is $150, but the strawberries are free.
Horrible article, really horrible. &gt; The correct answer is that it depends on the type of Employee object. LINQ always creates a new list. If the Employee object is of value type such as Struct, it would create array of objects. If the Employee object is of reference type such as Class, it would create array of references. This is wrong. It does not create a list, it does not create an array (two different things). All it does is return the next element in an enumeration , nothing more. Special functions like `ToArray()` or `ToList()`, THOSE create arrays and lists. But that's not technically LINQ anymore.
I don't think you realize how large 2^512 exactly is. You're **surely** not generating a mass of data with that size.
Nothing to see here. This articles makes it more confusing by calling whatever it is trying to talk about "source". If you are trying to update items through an enumerator, you are doing it wrong.
&gt; You should not be modifying the collection while iterating anyway. That's all around a horrible idea and practice. So much truth here.
&gt; LINQ always creates a new list. At first, I was pretty sure this whole article was wrong and then I read that and knew this person just didn't understand it.
C# works fine without an IDE for me - I use vim and emacs both, and a Makefile isn't hard to make
You should also try /r/games and /r/programming for a wider audience.
Just for more scale there are only 10^82 atoms in the observable universe which is about 10^58 times less than this data set. It certainly presents challenging problem.
512 distinct boolean values to create the permutations 
yes 2^512 permutations 
Using it to test a theory for boolean expression minimization
expanding on this point: 2^512 might as well be infinity. I am assuming you don't actually want the set (some subset of the set of bool values: {True, False}), but instead the actual sequence. Consider another dataset which is: 1. reasonably large enough 2. enumerable 3. boolean true, true, false, true, false, true, false, false, false, true, false, true, ... this sequence can be defined with the following C# code: IEnumerable&lt;bool&gt; Generate() { BigInteger x = 2; while (true) { yield return IsPrime(x); //definition of isprime left to reader x++; } } How would you store this generated sequence? Answer: you don't generate it in the first place. You could cache portions of it if desired using something like the following (note: this is completely ridiculous for this example but the logic is sound): static bool GetValue(BigInteger index) { var key = index.ToString(); //very fast compared to IsPrime var computation = new Lazy&lt;bool&gt;(() =&gt; IsPrime(index + 2)); var result = MemoryCache.Default.AddOrGetExisting( key, computation, DateTimeOffset.Now.AddMinutes(1) ); return ((Lazy&lt;bool&gt;)result).Value; } though chances are you are expecting cache misses most of the time and thus all you are doing is adding overhead; here is a function to get random indexes into that dataset: public BigInteger Random() { var rng = new System.Security.Cryptography.RNGCryptoServiceProvider(); var data = new byte[64]; rng.GetBytes(data); return new BigInteger(data); } To suggest that it would never get a cache hit would be a gross understatement of how rare that event would be ... ---- Undoubtedly you are not generating that much data. Assuming you can generate any individual element in 1 attosecond (well beyond the physical limits of classical computing) it would take roughly the duration of the existence of the universe (13.7 billion years) 3*10^118 times over to generate. 
Each boolean expression corresponds to a set of tuples (input\_0, input\_1, ... input\_7, output), right? Perhaps your theory can be tested on smaller problem sets whose tuples could be stored explicitly. Alternatively, don't store the tuples at all, because the output can be derived from the inputs and the expression. You could use .NET expression trees, or you could just hand-roll some classes like BooleanVariable, AndNode, OrNode, etc. to represent the expressions themselves. But note that even storing them implicitly via expressions is futile if you're trying to exhaustively characterize the behavior of the expressions; you'd just be trading prohibitive space requirements for prohibitive time requirements. Your problem will not be solved primarily with C\#; it will be solved with symbolic reasoning, either by a person or by a computer.
Data readers should pretty much immediately be consumed by the caller and disposed of within a using block. See the Repository pattern. Entity Framework, Dapper, PetaPoco make this very easy to implement. You can then have a service layer that constructs application views/objects out of some combination of your repositories/model objects for various tasks, so that the output can be consumed in different manners, such as JSON/XML Api's, a web page, and a WinForms app. EDIT: To add to this, pass model objects around, not data readers, etc. Your SProc handler should know how to call the procedures from some parameters, and return useful objects to the caller. The caller should not care a lick how the object it gets back from the method is obtained. I would go so far as to say it should have no idea that it even comes from a stored procedure.
Currently I've used a bit array to test the idea to 32 variables,so each position in the bitarray corresponds to a bit string input ,00...00101 if evaluated to true then has position 5 in the bit array changed to true which has worked perfectly, however it occurred a penalty of using 500MB , current ideas I have pushing forward are the idea of using bloom filters using probabalitistic methods to store the values I have in a set 
You are not generating this mass of data ([read the other comment I made here why](http://www.reddit.com/r/csharp/comments/26m7ce/the_search_for_efficient_set_representation/chslxmu)). You can represent the indexes to the dataset with the BigInteger class and can get random elements from that set via the function I posted in the other comment. You can use this function to test individual bits in that BigInteger. public bool IsBitSet(BigInteger x, int bit) { BigInteger testbit = BigInteger.Pow(2, bit);//potentially precompute these as a static readonly array BigInteger testresult = x &amp; testbit; return testresult == testbit; } With these you could do some sampling on the dataset and possibly infer properties of your data generation function. Given that you aren't going to generate this dataset, how you represent the indexes into it is probably worthwhile. As I see it you have some options: * bool[512] * byte[64] * BigInteger * some custom datatype Given the choices I would go with BigInteger until I saw a reason to create a custom datatype specifically designed to do quick testing of individual bits (if that is necessary, C# is probably the wrong language). 
Yeah I already agreed I wasn't generating that data as per my reply
&gt; .Select(x =&gt; x.Salary **=** x.Salary + 500) Ugh. Assignment within a LINQ expression.
Few options: Look into bootstrapping SQL Express into a ClickOnce installation. ClickOnce would work fine and you could burn it to a CD if you intend to install it on a single PC If you need a shared database between more than one PC then you can install SQL Express on a server (or an always on PC that acts like a server) Failing that, try Azure. I believe they have a free tier for databases (up to 20mb if I remember rightly) There are other options, but installation packages beyond ClickOnce and paid solutions like InstallShield, get complex very quickly
My first public software release was a [game utility](https://code.google.com/p/dfocp/) for starting Dungeon Fighter Online without having to log in to the website, plus a couple bonus features like the ability to swap in a custom soundpack before starting the game. They make good projects to hone your skills on that other people may actually use.
Install SQL Server via its own setup. You will only need to do this once. Is there a specific reason you want to add SQL server to your app's setup?
Hello zryl Thank you for responding. Sorry it's taken me so long to get back to you. I've got a few deadline paying projects, so my experimentation has to wait until I can get to it. Your advice did help, I'm at least getting the groups to show up. But now the group is showing up with each line of data. So the ListView displays something like the following =============== Station 01 Cpt ... Cpt Count Station 01 LT ... LT Count Station 01 FF ... FF Count Station 02 Cpt .. Cpt Count Station 02 LT.. LT Count etc.... ============== I am still learning C# and know this is probably very simple, but for the life of me I can't figure it out. Following is my code ============ conn.Open(); // ====================== TESTING: Total Counts by Rank/Shift/Station ================== var cmd_StationCts = conn.CreateCommand(); cmd_StationCts.CommandText = "SELECT (CASE WHEN StationAssignment = '' Then 'UA' ELSE StationAssignment END) as Station, RankClr, Rank, SUM((CASE WHEN Shift = '' THEN 1 ELSE 0 END)) AS U, SUM((CASE WHEN Shift = 'A' THEN 1 ELSE 0 END)) AS A, SUM((CASE WHEN Shift = 'B' THEN 1 ELSE 0 END)) AS B, COUNT(PersonnelID) AS RankTotals FROM Personnel_Tbl GROUP BY RankClr, Rank, RankOrder, StationAssignment ORDER BY StationAssignment, RankOrder"; SqlCeDataReader dr = cmd_StationCts.ExecuteReader(); // This for Loop creates the headings. for (int i = 0; i &lt; dr.FieldCount; i++) { ColumnHeader ch = new ColumnHeader(); ch.Text = dr.GetName(i); StationCTs_ListVW.Columns.Add(ch); } // Trying to build list and do the grouping here while (dr.Read()) { ListViewItem lvi = StationCTs_ListVW.Items.Add(dr.GetValue(0).ToString()); // Create group and add it to the ListView var Mygroup = new ListViewGroup("Station: " + dr.GetValue(0).ToString()); StationCTs_ListVW.Groups.Add(Mygroup); // Assign item to the group lvi.Group = Mygroup; for (int i = 1; i &lt; dr.FieldCount; i++) { lvi.SubItems.Add(dr.GetValue(i).ToString()); } } =============== I understand what you are saying about ... &gt; On an unrelated note, you should use ListView.BeginUpdate() and .EndUpdate() when doing bulk changes to the ListView's contents to prevent flickering and speed up the process. And after I fully understand how to add grouping to a ListView, I'll certainly follow your advice. But - right now I just want to get this grouping down. Thank you for your patience Pavilion
I am not sure how new you are, but SQLite is very easy to work with and gives you a database interface with a single dll. You can download it from here: https://system.data.sqlite.org/index.html/doc/trunk/www/index.wiki and I can post example code accessing the database and getting queries.
Yes! I actually need something like this. But, can you make it not use Console.Beep? Rather output to a WAV or something that can be played by system audio APIs. 
Just a heads up on Azure, you can use the virtual machine aspect of it and install any database that you have a license for (so any open source DB) and it would act just like any other data on the platform. It would mean you could have a larger database without having to pay for SQL Server.
just install sql server manually. it's going to take you a few hours or even days to learn about and build this functionality , or it will take 3 seconds to click on an installer icon. you're not going to be installing this on hundreds of computers, just the one, so there is NO benefit to automating it you're still going to have to setup and configure the sql server afterwards anyway and THAT'S the time consuming bit. SQLite or even Access is an option BUT this will leave you with a single moveable copyable file containing everyone's personal info and wages....sounds like the sort of file that someone will one day end up getting into a LOT of trouble over. 
Excellent, I appreciate it. =)
VS 2013 + the free version of Code Rush.
Thanks! I'll check out Code Rush. I found an article mentioning Xpress but the link didn't go anywhere useful. I'll keep poking at it.
VS2013 + Resharper can not recommend it enough. It makes refactoring so much easier. :)
So far I stuck to VS2012 and bought R#. The last company I worked with still uses VS2010 and R#. We both mainly do MVC websites. By the way, you can use VS 2012 for MVC 5. Just download this http://blogs.msdn.com/b/webdev/archive/2013/11/18/announcing-release-of-asp-net-and-web-tools-2013-1-for-visual-studio-2012.aspx and you'll get it : http://i.imgur.com/DMrpRSb.png But I did not really checked what VS 2013 brings so maybe I'm missing on some stuff.
Resharper really isn't that expensive, you have licences from 100 something euro. I value resharper higher than a visual studio upgrade (don't really know what changed from 2012 &gt; 2013). So if you have to choose, go for resharper.
I think I'm entirely sold on R# at this point. Is there anything in VS2013 that you couldn't live without that makes it worth the cash?
VS2013 feels to me like a "What 2012 should have been"- it's a very nice, capable upgrade. Resharper is very useful, really quite brilliant, but I worked for a couple of years without it. I didn't know what I was missing, but I was still quite productive. If you really must pick I would choose the VS upgrade, I hate being behind the bleeding edge on these things.
Nice! Loading up the upgrade as we speak. That was really my only thought on upgrading to VS2013 so that leaves me with R#. If it was a staple at your last employer and you still use it, that's good enough for me. =)
I agree - the price is crazy cheap compared to the benefit, but I'm just trying to be ready to defend my expenditures on the corporate card. It looks like to stay on the up-and-up with licensing it's going to run me 256 euro for the C# version. Totally reasonable especially since the patch /u/zebishop mentioned got me MVC5.
To get you the full picture, I asked that R# to be bought and installed on every developper computer. I have been using R# since version 5 and can't imagine working without it. It improved my code, taught me a couple of thing I did not knew, and makes my day to day coding so much easier. The only thing I wish about R# would be a smaller price so that more developpers could affort it at home. 
"I didn't know what I was missing" Things like CTRL+SHIFT+T are pretty impossible to live without once you're used to them (for big projects) - also re-factoring in general. Also the live templates, if you use them properly - are outstanding.
I'd choose VS2013. There's some nice goodies that come with it, that I enjoy. Resharper *is* neat. But what you don't hear on the surface is how bloaty it can be. It will slow your system down. You do have to reign your IDE in all over again (with how RS expects you to format your code). People generally stop using Resharper after awhile. Whether they don't like how much it slows down the IDE, or it mucked up one of their solutions, or they just don't need all that babysitting anymore, or some other reason. I think the thing I really loved the most about Resharper was I could start typing away, and if I didn't have a reference or using already included for what I was typing, it'd suggest it and insert it for me. Visual Studio has code-analysis, but I don't think it's as complete as RS, though. I'm not a big fan of needing to add RS type comments *to my code* to get RS to shut up about some code inspections or naming conventions. Buy VS2013. See the new stuff (peek definition is sexy). Use the Resharper demo for a month. Stuff is rapidly changing (ASP Next all that) -- so I think VS2013 will have you better set.
Honestly, if you don't need MVC 5, 2012 will be good enough for now. You can upgrade to 2013 when you have the money, and just re-run the R# installer and it'll install itself into both. 
I find resharper to slow VS down too much. I wrote my own replacement for that ctrl-t functionality.
zryl Thank you so much for your patience with this. It has been somewhat frustrating, in that I sensed the group was added with each iteration, but not understanding the logic behind grouping in a ListView, I wasn't able to fix it. Even now, I am trying to figure out the logic behind your syntax. Following is my rewrite (I intentionally name the variables in ways that help me understand processing or logic, so please bear with me). =============== // Trying to build list and do the grouping here while (dr.Read()) { ListViewItem lvi = StationCTs_ListVW.Items.Add(dr.GetValue(0).ToString()); // Create group and add it to the ListView string grpStation = dr.GetValue(0).ToString(); var iterationGrp = StationCTs_ListVW.Groups[grpStation]; // get existing group for that key, or null if none exists if (iterationGrp == null) { iterationGrp = StationCTs_ListVW.Groups.Add(grpStation, "Station: " + grpStation); // group doesn't exist yet, add it } // Assign item to the group lvi.Group = iterationGrp; for (int i = 1; i &lt; dr.FieldCount; i++) { lvi.SubItems.Add(dr.GetValue(i).ToString()); } } ================== Firstly - is the entire while{} block written appropriately, or is there "waste" in it. I like to keep things nice and tidy, and if there is something unnecessary, or that can be written more efficiently, please let me know. Beyond that, I think I do understand what you're doing in the grouping block. Every iteration checks the Station. If there is a null station, then it's starting a whole new group. **lvi.Group = iterationGrp** assigns the iteration group to the actual listView group property???? If **lvi.Group = iterationGrp** does assign the iteration group to the actual listView group property, isn't that still happening with every iteration?? I mean that line is not encased in any if{} loop??? It's that line where I lose the logic of how things are processed. Thanks again for your patience. Pavilion
Were you having problem the the ReSharper solution-wide analysis. That's usually the memory hog, I keep mine off unless I am really having a problem
I'm not sure why you were downvoted because you are mainly correct. XS *is* a rebranded MD. They come from the same codebase. XS has support for the mobile solutions; Xamarin.* and that is the main difference.
I run XS on my Macs for C# (any .NET) projects but I would still suggest everyone creates a Makefile so you have tight control over what happens down to file location (which you can change in MD/XS but through a nasty GUI layout).
I used to do a lot of form building in VB.net (when I thought I was really getting stuff done) and the syntax of C# scared me long before I knew what syntax was. I've wanted to learn to program for years (and I've had a drive to learn C#) so I searched for something to learn from, which never worked. I eventually came across /r/openra and decided it was time to force myself to learn. If you want to help work on an awesome game (not bias at all ;)) and learn some C# stuff feel free to join us!
&gt;Every iteration checks the Station. If there is a null station, then it's starting a whole new group. Not exactly. Every iteration tries to get an existing group for the station. If there isn't one (StationCTs_ListVW.Groups[grpStation] returns `null`), it creates one for that station. Here we try to get a group for the key `grpStation`. var iterationGrp = StationCTs_ListVW.Groups[grpStation]; The previous code will return the group for that key if one has been added in a previous iteration already, or it will return `null` if that hasn't happened yet (current iteration is the first with that station). *If* it is null, there is no existing group for that station yet and we have to add it: if (iterationGrp == null) { iterationGrp = StationCTs_ListVW.Groups.Add(grpStation, "Station: " + grpStation); } &gt;isn't that still happening with every iteration? Yes, because (I assume) you want to add every item to a group. The difference is that we don't add a **new** group for every item, but instead reuse groups we've added before (if two or more items have the same station). &gt;lvi.Group = iterationGrp assigns the iteration group to the actual listView**Item** group property???? Basically this line means "the group lvi belongs to is iterationGrp". Maybe you have a wrong idea of how the ListView and it's groups work. It's not like SQL's GROUP BY, with the ListView you *explicitly create* a group and then *assign* items to that group. 
I'd definitely go for ReSharper, not VS2013. The upgrade is in my opinion really nice, but not that hugely important. Also I know that Roslyn will not be integrated into VS2013, so I suspect there will be a VS2014 or latest a new full version in 2015. I'd save the money for this, if money is a concern.
Do you just install the trial version? If I select the Code Rush Xpress edition from the extension manager in VS I just get directed to the product page.
What's CTRL+SHIFT+T supposed to do? It doesn't do anything for me.
Not sure about CTRL+SHIFT+T but CTRL+T brings up a window where you can search for types, files, and even methods.
Use a timer or a dedicated thread. Look up this. The problem with your approach is: Your code is stuck in the loop. It stays the whole time in your loop, when would it go back to the code that actually updates the UI?
I don't know that you've *over-thought* it but you've definitely *over-complicated* it. Premature generalization is evil. Abstractions and patterns only have value if they are used for a purpose. Programmers love to read up on the hot design patterns and shoe-horn them into code even if it doesn't make sense (see: forty-six million articles teaching you how to implement the Repository/Unit of Work patterns on top of Entity Framework. News-flash: EF has already implemented those patterns in the form of the DbSet and DbContext). For two perspectives on opposite ends of the complexity spectrum, see: * [Jimmy Bogard's *Evolutionary Project Structure*](http://lostechies.com/jimmybogard/2012/08/30/evolutionary-project-structure/) * [Jeffrey Palermo's *Onion Architecture*](http://jeffreypalermo.com/blog/the-onion-architecture-part-1/) My advice would be to **keep it simple**. If at some point that simplicity becomes a burden (e.g., you need to build a separate WPF application which acts upon the same data and services as the web application), then it would make sense to abstract away your entities, data layer and services so that they can be reused. Until then, what's the value of **sproc.dll** versus just calling the SP within your application? Especially as a beginner, don't get to caught up in doing it *the right way*. Make it work. Learn more stuff. Iterate. Make it work better. Repeat.
Yes! It's résumé gold.
The biggest issue they still haven't fixed http://i.imgur.com/wmdaLL7.png
Exactly. Even for students their licenses are expensive :(
Good call on the demo. May as well get the full run of it. /u/zebishop provided this link to get MVC 5 in 2012 so I'm golden there: http://blogs.msdn.com/b/webdev/archive/2013/11/18/announcing-release-of-asp-net-and-web-tools-2013-1-for-visual-studio-2012.aspx
That's exactly how I felt about Perl Best Practices when I worked in a shop that did nothing but. Everyone needed a copy. I like that angle though, especially for justifying the cost: uniformity.
Great feedback; thanks! It turns out that our MSDN level affords us licenses to VS2013 so I'm all set there.
Good idea - grabbed the installer this morning.
I knew we had one but I hadn't needed to pull software in a while so I didn't know if it was just discounted or gratis. Looks like the level we're at affords us upgrades so I think I'm getting an ISO this morning.
They should take a lesson from Unity and Unreal and implement some sort of a monthly subscription model... that includes VS support for less than $1k annually.
Hey, I noticed that you said: "GfxUIEx.exe" and in your path you have: "gfxuie.exe" without the 'x' before the '.exe'. Try this: v = Process.Start(@"C:\Windows\System32\GfxUIEx.exe"); I googled the name of the .exe and it appears that you have the correct name, but it could be "GfxUIEx.exe" on your machine for some reason. 
Xamarin.Forms.... omg want. That pricetag just got a whole lot easier to swallow. Still kinda steep, though.
Another reason to double-check your spelling and realize that C# only does what you specifically tell it to; no more, no less.
Monotouch used to allow you to build and run whatever you wanted, on the emulator... want to publish to a real device or to a store... you have to pay for a licence. I ported one of my companies SDKs to monotouch, and was able to get it working in the emulator, now the project won't even compile, without having to pay some money :/
If it were perpetual, or at least an up-front 1k cost then an annual maintenance of say 200 then maybe. I don't really see the indie licence being worthwhile without VS support - that's half the reason to use Xamarin (for me at least) 
If they didn't keep innovating, that would be greed. It's a company, they want to make money and the cost savings for most are worth the license (not having to hire three different teams to build and maintain three codebases) The only way this pricing changes is if Microsoft buys them or does some other deal with them (like a big discount or free licenses for MSDN/Bizspark members) 
The pricing makes more sense for big companies where you can get rid of Java/Obj-c devs and have one team of C# developers. The new Forms and support for universal projects is targeting those customers as well (for creating LOB apps with one code base that can run on all platforms or even consumer facing apps) I prefer that price and the innovation instead of a cheap/free option. Being able to create one app, including the UI, and getting three native apps would be worth 2000$/year. I'm still paying the old price (grandfathered in), so I mostly use VS but Xamarin Studio is getting really good (now with Nuget support and lots of other features I was missing when I tried to actually use it). 
Okay, I figured that might be the case because your path looks fine :) I know you said that you located the .exe but looking at the .NET Process.cs source here: http://referencesource.microsoft.com/#System/services/monitoring/system/diagnosticts/Process.cs#f8b2e604d6f1fe04 I can see (after following what code would be executed) that this is the function that would actually execute your string: [DllImport(ExternDll.Shell32, CharSet=System.Runtime.InteropServices.CharSet.Auto, SetLastError=true)] [ResourceExposure(ResourceScope.Machine)] public static extern bool ShellExecuteEx(ShellExecuteInfo info); That's an external function so that means it is referencing a function in an external DLL (shell32.dll). Here's the source for that: http://referencesource.microsoft.com/#System/compmod/microsoft/win32/NativeMethods.cs#9cc9c97dbd0d28a4 So now that we know that, can you open up the command line (cmd.exe) and copy and paste the path: C:\Windows\System32\gfxuiex.exe into the command line? Then Press Enter to run it. If it doesn't run in the command line (and tells you that it doesn't recognize the command), then I would also try your original path: C:\Windows\System32\gfxuie.exe If neither path works, then the file probably doesn't exist and you should verify that you have the correct path. My reasoning for trying this is that what's happening when you call Process.Start with your path, is that a shell is brought up and fed your path. Then the shell (with some help from the registry) decides what program to use in order to "open" the file pointed to by the path. You can use the shell to verify that the file actually exists because Process.Start will use the shell to "start/execute" your string. Note that you can replace the path in Process.Start with a .PNG or a .JPG and it would open the file using the default program for the file type (this is how I know it's using the registry). Tell me what you find :)
I'm pretty much with you on that. I've only ever used Xamarin Studio from the beginning and so have only paid for 2 Indie licenses (iOS and Android), which cost $600, although actually you get a discount if you buy both. But, even at list price that's only $50 a month. My current contract as a freelance Xamarin Dev pays £450 a day ($720), so I've paid for the licenses in barely a few hours. By far the best investment I've ever made. Taking a risk and investing in their tools was a gamble for me. At the time when I got started I'd lost my house and business, and was scraping to get by. The licenses had to go on a credit card. But rather than complaining about the price, I looked at it as a business decision. Did I think the return would be worth the risk? I felt the answer was *yes*. It may sound selfish, but it kinda makes me happy when I hear people complain about the price because it means they're not going to buy into Xamarin, so it keeps the pool of developers down, which provides me with a constant supply of work. The price also, as you rightly point out, means that primarily big corporate customers or well-funded start-ups have been the first to 'get in'. It makes sense to them to be able to combine 2 or 3 mobile dev teams into one and share code between platforms. As a freelancer/contract worker this means you're dealing with people who understand cost vs. benefit and have the budget to pay decent fees for your work. I absolutely adore working with Xamarin. Developing mobile apps for multiple platforms, but with the benefit of modern language features like Async-Await, Lambda expressions, LINQ, great tools like Nuget, PCL support, and of course virtually the entire .net base class libraries... I could go on for ages... it's completely revitalised my love of software development, which after 20 years in the industry is no mean feat.
So I ran it in cmd and it brought up the program right away. C:\Windows\System32\gfxuiex.exe So I guess this verifies that I had the correct file path. What should I try next now that I know this? I might give what DarkZlayer said a try. For added info I start another program in the System32 folder earlier and it worked. Thanks for the help.
I tried that and it didn't change anything. Same error. 
So you if you go into "Build -&gt; Configuration manager"the selected Active solution platform is x64? And when you hit run, it still says that it isn't found? Also, make sure that the Build column is checked for the project that the Process.Start is in. It's possible it's running from a previous build..
So oddly enough it is not giving the error now, but it is also not starting the program. 
Code lens :) Only available on Ultimate :(
But at least you ship
Expected the pricing, was right :D
&gt; cided it was time to force myself to learn. I I'm intrigued :) I always wanted to learn gaming, but usually C++ and no one really hires C++ programmers except game designers WITH experience... So, learning C# and having it be a GAME at the same time sounds pretty awesome! Can you PM me more info? Thanks man. PS -- as for other guys, thanks too! I'll keep these all in mind. I've been doing a lot of eBay so randomly made an eBay app and C# feels familiar, like a combination of VB and Javascript. I caught on pretty fast, although nothing SUPER advanced yet.
It does look very good, but yeah playing around with it for that price is a bit much for a single developer.
To be honest, I haven't noticed that much of a difference between VS2012 and VS2013. I currently work the most with VS2012 + Resharper and that seems to work fine so far. EDIT: Just read that you got VS2013, and I agree if you can upgrade to the latest go for that.
Holy hell that would be amazing.
This is a major step forward in write-once UI design on mobile. In a sense it's the missing piece of the cross-platform jigsaw that was lacking up to this point (at least with regard to "official" support) although Xamarin did give a lot of support to 3rd party data-binding projects such as MVVMCross which cover some of the same ground. Jason Smith, one of the engineers responsible has stated on the forums that this is not a 'silver bullet' - of course there are going to be trade-offs when you're abstracting something that is usually as platform dependent as UI controls. But it's far and away the most elegant solution I've seen yet. Having done a fair amount of dev using the considerably earlier and more limited monotouch.dialog as a shortcut to producing tableviews and other layouts in Xamarin.iOS, I can absolutely see the value in having this as a productivity tool for rapidly designing "pages" (as they are referred to in X.Forms). The capability to be able to create hybrid apps with embedded custom controls, or entirely separate native views and activities really gives about as much flexibility as you could ask for. **Edit:** By the way, before anyone else chimes in, can we give the price of Xamarin licenses a rest for once? It doesn't need to be brought up in every single discussion of their tech.
Ours is 'mail'. Something like this: DirectorySearcher searcher; SearchResultCollection results; DirectoryEntry searchRoot = new DirectoryEntry(OUPath); searcher.PropertiesToLoad.Add("mail"); searcher.Filter = "(&amp;(objectClass=user)(objectCategory=person))"; results = searcher.FindAll(); Then loop through results.
Is there a better way? We have thousands of people in AD...
We actually keep that in a cache. If that previous code was a method called 'ReloadActiveDirectoryData()', the code above would be: public DataTable GetData() { if (HttpContext.Current.Cache["ActiveDirectoryCache"] == null) ReloadActiveDirectoryData(); return HttpContext.Current.Cache["ActiveDirectoryCache"] as DataTable; }
ahhh ok. That sounds better. I'll give it a shot after my next meeting! 
Type has an IsValueType property on it. Or is that cheating? :)
http://msdn.microsoft.com/en-us/library/system.type.isprimitiveimpl%28v=VS.100%29.aspx
Yeah, but then the chances of a Linux version would be 0%.
I maybe wrong but reference type can be modified when passing in a function. void TestFunction(string myString) { myString = "I am a reference type"; } Main() { string myString = string.Empty; TestFunction(myString); if(!string.IsNullOrEmpty(myString)) { // Reference Type } else { // Not reference type } }
A reference type can be modified, but strings are immutable. Besides, since the string is passed *by value* into TestFunction, it doesn't modify the original even if it's a reference type.
TIL. Thanks :)
At the risk of adding to your competition... would you be willing to share where you find contract jobs developing with Xamarin?
&gt; String is a value type. That's [just wrong](http://referencesource.microsoft.com/#mscorlib/system/string.cs#8281103e6f23cb5c).
You are right, I'm sorry. I was confused, as string is passed like a value type.
Meanwhile the desktop has been forgotten :(
class Bar { public string s;} Bar aBar = new Bar(); aBar.s = "Hello"; Bar bBar = new Bar(); bBar.s = "Hello"; //aBar and bBar are two different objects Console.WriteLine(ReferenceEquals(aBar.s, bBar.s)); // True The above statement returns true even though s is the field in 2 different objects(aBar and bBar). As the strings are immutable when the program is compiled, memory is allocated for a single string "Hello" . Wherever the string "Hello" is referred, the compiler would point to the same memory. This can be proved by executing the below statement string cStr = "Hello"; Console.WriteLine(ReferenceEquals(aBar.s, cStr)); // True Even though there is no relationship between aBar.s and cStr objects, they point to same memory. Am I making sense?
That wont work because you dont know the e-mail. That is the point of the post.
Strings are not passed by value, you're just overwriting the reference exactly like it happens with all other reference types: static string myStringOriginal = string.Empty; static void TestFunction(string myString) { Console.WriteLine(Object.ReferenceEquals(myString, myStringOriginal)); myString = "I am a reference type"; Console.WriteLine(Object.ReferenceEquals(myString, myStringOriginal)); } static void Main(string[] args) { TestFunction(myStringOriginal); if (!string.IsNullOrEmpty(myStringOriginal)) { // Reference Type } else { // Not reference type } } You should get true, false with this code.
*immutable reference type
Good point.
&gt; string is passed like a value type What do you mean by that?
You might try using the System.DirectoryServices.AccountManagement namespace... It's a little easier and it's "UserPrincipal" class has a strongly typed "EmailAddress". http://msdn.microsoft.com/en-us/library/system.directoryservices.accountmanagement.userprincipal(v=vs.110).aspx 
You are making sense but I'm trying to understand what problem you are trying to show with this snippet. 
went ahead and wrote a quick sample of this. It's quick, but it will grab a users email address. You should be able to use this to write something to work with your app. using System.DirectoryServices.AccountManagement; namespace ConsoleApplication4 { class Program { static void Main(string[] args) { var mail = ""; using (var c = new PrincipalContext(ContextType.Domain, "domain")) { using(var u = UserPrincipal.FindByIdentity(c, IdentityType.SamAccountName, "user")) { mail = u.EmailAddress; } } } } }
~~But Xamarin's licensing is way too expensive!~~ Looks they took the name "pages" from windows phone, didn't they?
Why don't you do something about them then, Mr emperor? &gt;.&lt;
Well, if you want to _"prove"_ that it's a reference type, you don't need to look any further than its class declaration: public sealed class String The fact that it's a `class` (and not a `struct`) dictates that it's a reference type. EDIT: I think you may be confusing _immutability_ and _reference_ types. You don't need to test mutability to ensure reference usage. It can really be as simple as: string a = "asdf"; object b = a; Console.WriteLine(Object.ReferenceEquals(a, b)); If that outputs `true`, then it's a reference type. If it outputs `false` then it's a value-type as its value is boxed and no longer referencing the same object. EDITx2: Indeed, mutability and reference-types are _mutually independent_. You can have both mutable _and_ immutable value-types, and you can have both mutable _and_ immutable reference types.
http://www.linqpad.net
I don't have an answer, but this is a great question. I also want to know answers for this, as I also struggle with deciding how to structure an app (I think it's related to "analysis paralysis").
 String foo = null; Compiles. Problem solved. You can't assign null to non-nullable-value types, so string has to be a reference type (it's `string`, not `string?`/`System.Nullable&lt;string&gt;`, so `foo` can't be a nullable value-type). Also, the correct answer is of course: Look at the spec and/or look at the source code. 
Create a generic with a "class" type constraint, then try to declare an instance of it with an int, guid and then a string. String will work, as it is a reference type, the others, value types, will not.
[CShell](http://cshell.net/)?
My method is to come up with a general plan in my head, maybe taking some notes as I go, but just to keep track of what's in my head. Then I code out the big structures and from there I just keep refining and refactoring. It's very easy to over-plan in the beginning only to find that you made some mistake that messes up all your plans. There's a lot better tools to help you refactoring your code then to refactor your plan documentation. For much larger projects with multiple people involved it's a similar process but I'll probably have a few of the key developers involved in the brain storming part. This works best when they're people you've worked with before and are able to get on the same page with quickly, otherwise you get bogged down explaining stuff. From there we will split the project up into different areas with each developer blocking out the framework of their area. During this process there's a lot of collaboration to keep everything lined up so it all meets in the middle, so to speak. This phase might take a week or two and then we bring in more developers to flesh out the missing pieces. Having the major structures in place is really helpful to give people with a less complete understanding of the whole system direction to move in.
Thanks for the reply. I think taking notes isn't a bad idea, i'm pretty old school in the fact that I like to see a plan in pencil and paper before I start. It helps to have a basic plan, even if its a sketch of the GUI I think. Great suggestions though thanks. 
I'm usually starting with database design too. That guides a lot of UI decisions. If you're not going to have database, design your data model first then figure out what UI you need to edit it. Starting from the UI too often leads you to make regrettable decisions about your data model and it's a lot more work to refactor a UI than relatively straight forward code.
Before you start, figure out, from a user's perspective, what you want the app to be able to do, and then break those items down into smaller blocks of work. For example, let's take your flight booking app. This is what it could possibly do for the user: * As a user, I want to be able to book a flight so I can go to cool places. * As a user, I want to be able to track flights so I can * As a user, I want to be able to cancel a flight I have booked. * As a user, I want to see all flights I have previously booked. You can break these user stories down even further (let's take the first one as an example): * The user needs to be able to enter a starting location. * The user needs to be able to enter a destination. * The user needs to be able to enter a departure date. * The user needs to be able to enter a return date. * The user needs to be able to perform a search. * The user needs to be able to view the results of a search. * The user needs to be able to book a flight from the results of a search. Note that all of this doesn't speak of how you're implementing it. This is taking the big picture and breaking it up into smaller, more focused chunks of work that's easier to work with. You take each individual chunk and work on them one at a time until they're all done. If you're feeling frisky about learning about test-driven development, this would probably be a good place to pick up, too. 
Notepads turn into whiteboards, which turn into GUI wire-frames that turn into code which gets re-factored to death. I generally try to list all of the nouns/verbs I can find in my user stories to pinpoint models and features I'll need. http://scrummethodology.com/scrum-user-stories/ From that I layout the forms/pages/screens used in the software. Try to find points where you can make items modular and share code. http://balsamiq.com/ From that, development can now begin. Rough prototyping will make it functional, re-factoring will make the code beautiful. http://en.wikipedia.org/wiki/Rapid_application_development
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Rapid application development**](https://en.wikipedia.org/wiki/Rapid%20application%20development): [](#sfw) --- &gt; &gt;__Rapid application development__ (__RAD__) is a [software development methodology](https://en.wikipedia.org/wiki/Software_development_methodology) that uses minimal planning in favor of rapid prototyping. The "planning" of software developed using RAD is interleaved with writing the software itself. The lack of extensive pre-planning generally allows software to be written much faster, and makes it easier to change requirements. [Graphical user interface builders](https://en.wikipedia.org/wiki/Graphical_user_interface_builder) are often called rapid application development tools. &gt;==== &gt;[**Image from article**](https://i.imgur.com/nuNDICR.jpg) [^(i)](https://commons.wikimedia.org/wiki/File:Coding_Shots_Annual_Plan_high_res-5.jpg) --- ^Interesting: [^Agile ^software ^development](https://en.wikipedia.org/wiki/Agile_software_development) ^| [^List ^of ^graphical ^user ^interface ^builders ^and ^rapid ^application ^development ^tools](https://en.wikipedia.org/wiki/List_of_graphical_user_interface_builders_and_rapid_application_development_tools) ^| [^Software ^development ^process](https://en.wikipedia.org/wiki/Software_development_process) ^| [^Software ^development ^methodology](https://en.wikipedia.org/wiki/Software_development_methodology) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chube1o) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chube1o)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
1. Design the gui and a rough spec on paper. 2. Decide what database tables you need in the background and their fields. If any. 3. Decide how many layers you want. Eg gui project, presentation layer, business logic and data layer was in my last WPF project. This keeps the whole thing structured so you can easy build it without losing track. You in a few months will get lost. Every project should have a clear purpose. 4. Create interfaces. You can declare the inputs and outputs clearly here, work out how it all fits. 5. Start coding. I tend to write comments explaining the process, then code around them later. If code is repeated then create utility or extension classes.
You're confusing reference types with by-reference parameter passing. The behavior you describe would be exhibited by the following code: void TestFunction(ref string myString) { myString = "I am a different reference!"; } Main() { string myString = string.Empty; TestFunction(ref myString); if(!string.IsNullOrEmpty(myString)) { // reference changed by TestFunction } else { // no change by TestFunction } } Note that passing parameters by reference has absolutely nothing to do with type. The above code would behave identically with respect to changing values if you used `int`s instead of `string`s.
LinqPad is indeed very good however I was looking CShell. Thanks for the help too!
Ha! Yeah, every time I write a post like this, I kinda feel like I'm just creating more competition for myself. Erm... combination of places really: recommendations and referrals, recruitment agencies, job ads. Also Linked In has a certified developer group where Xamarin is encouraging recruitment agents to add job postings. It might be as simple as typing "Xamarin" into a job site.
Thanks for this, was hoping for something like this since my current job is C# but I come from a Python and Java background. This'll be very helpful!
No, that's completely wrong. *All* parameters in C# are passed by value, *unless* they are annotated as `out` or `ref`. Whether the type being passed is a reference or value type is irrelevant. So your code doesn't test whether string is a reference type, it tests *whether the string was passed by reference* (which it isn't). Also note that the `else` block in Main would get entered, because, obviously, `myStringOriginal` was passed by value. That doesn't mean that `string` isn't a reference type (which it is).
 int? number = null; Try compiling that. You'll find that while you're technically correct things are not what they seem.
But isn't type *int?* just shorthand for type *System.Nullable&lt;int&gt;* though?
Winforms is easy, and it really shows.
Oh, I see what you're saying now. Guess we were talking across each other.
I break my applications up into multiple projects. I prefer for each project to have its own set of concerns (data access layer, domain model layer, logic/business layer, external api dependency, ui layer, etc). We've been using "onion architecture" at work and its brilliant for medium sized applications.
You can use the lock statement on a string, therefore it is a reference type. http://msdn.microsoft.com/en-us/library/aa664735(v=vs.71).aspx &gt; The expression of a lock statement must denote a value of a reference-type. Edit: Here's another way void Main() { var proof = new ProofOfReferenceType&lt;string&gt;(); } class ProofOfReferenceType&lt;T&gt; where T : class { } 
Lock isn't enough. If you lock on int it autoboxes. Which is a fun bug to catch, because every lock call autoboxes and creates a new boxed object :D
Yes, and *System.Nullable&lt;T&gt;* is a struct and therefore a value type. Or check section 4.1.10 in the [C# Language Specification](http://www.microsoft.com/en-us/download/details.aspx?id=7029) -- /u/ChaosPandion is correct.
Huh. That changed, I'm sure I managed to mess up a lock at one point.
I just started reading Code Complete, so I'm not necessarily recommending it to you, but rather bringing it to your attention. It seems you have questions about how to construct your code, and this book is primarily a guide on code construction.
You must be misremembering -- it's been that way since version 1 of the spec. Though, there are plenty of other ways to mess up locks :)
string aStr = "asdf"; string bStr = aStr; Console.WriteLine(ReferenceEquals(aStr, bStr)); // true What I was trying to say is that in the above code snippet it returns true not because of the fact that we are referring aStr to bStr (the statement string bStr = aStr; ) Even if we use like string cStr = "asdf"; Console.WriteLine(ReferenceEquals(aStr, cStr)); The above statement would print true.