/u/Enaver ignore all these books &amp;#x200B; get this one [https://www.manning.com/books/functional-programming-in-c-sharp](https://www.manning.com/books/functional-programming-in-c-sharp) &amp;#x200B; also don't get C# in depth for your first book, it doesnt help you learn C#
Probably one of the best references out there.
At least the Bob Taber series can be downloaded for viewing offline. Great introduction to coding C#. 
&gt;Yeah, that should work fine. There is a Date example linked in the MaskedTextInput article &gt; &gt;[https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.maskedtextbox.validatingtype?view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.maskedtextbox.validatingtype?view=netframework-4.7.2)
What’s the yellow book?
I've worked with selenium in a project, it's a nightmare. Get far far away from it. If you want test automation lookup python or CI/CD like Bamboo, Jenkins, Team City, Octopus. I recently got a career in C#, been working with it for about 1-1.5 year now. Learn about .Net Core, Entity framework, SQL/MongoDB/Node JS, MVC, Razor Pages. Start from there then you can find what you find interesting and see what kind of stacks you like and that ppl are looking for. After .Net Core, EF and SQL you can look up some front-end like Angular 6/7 or react/Vue etc.
Link is dead.
You mean he Cs #.
Removed: Rule 4.
Works for me.
Neither of the above mentioned books are beginners books. A good beginners book that is used in colleges/universities all over the country is "Visual C#: How to Program" by Paul J. Deitel and Harvey Deitel. Not only does it go in depth about the language, it has a ton of exercises at the end of each chapter.
Ah this is helpful. I was thinking about sql and worked with Mongo before. I'm going to start working with sql I think. I just prefer reading. I hate watching videos. I do code in between chapters and stuff. The last thing I did was make a balanced binary tree. SQL I'm on my way
Thanks for looking into this deeper. I've got a homework assignment now! In the meantime, just in case you're not aware, the XAML data-binding is optional and can be done completely in code. Here's an example from the [demo project](https://github.com/lesarde-co/frogui) of what's generated when taking in xaml... \`\`\` &lt;local:MoneyBox Name="e\_bill" Anchor="0,1" Style="InputStyle" Money="{Binding Bill, Mode=TwoWay}"/&gt; \`\`\` and generating C#... \`\`\` e\_bill.SetBinding(Demo.Tip\_Calculator.MoneyBox.MoneyProperty, new Lesarde.Frogui.Data.Binding() {Path = "Bill", Mode = Lesarde.Frogui.Data.BindingMode.TwoWay}); \`\`\` This this is not compile-time time-safe either, of course. I completely share your commitment to type-safety, however. For instance, you'll probably appreciate that Frogui using generics to register and work with dependency properties, which completely eliminates casting. There are other examples but, yes, if the goal is to be as type-safe as possible then the data-binding leaves room for improvement and it's on the to-do list now (as are all the other items you listed). Keep the great ideas flowing!
Do a tutorial on creating a web application on the net stack. This will teach you Ef, core, SQL and prob razor/angular. Look up stuff you dont understand as you follow the tutorial. 
Encapsulations and seperation of concern. You object should control it's own state. If you access fields directly from other classes then those other classes are gaining direct manipulative powers over the classes state. When you use getters and setters the class retains control over it's own state. Assume you have some field. That field is manipulated by 10 different classes. Then you add some business logic to throw an exception if some particular value is assigned to it. Without getters/setters you have to find all the locations in the code where Any class modifies that field and add logic to ensure those business rules are maintained. If you use getters and setters then you can just change the logic of the setter and all useage of that property follow the business rule. 
A Beginner's Guide to Visual C#. It has the ins and outs of Windows Forms, and makes it really easy to jump right in to building real, useful software.
Yes, it is definitely doable, but the exact architecture will depend on the required openness. If you intend to be open to any RPG system, you can't really have a CharacterClass class, since not every system will even support that concept. In fact, no concept will be an integral part of any system, maybe except the idea that you have a Character with a Name property. You need to define this in much more detail. Is this for D&amp;D with support for a few house rules, or is it completely system agnostic? One idea, just to get you started, would be to have a ICharacterCreationSession with an IEnumerable&lt;IHouseRule&gt; that you can filter for more specific rules to apply at critical points in the process.
Pretty strong generalization. I definitely recognize what you are saying, but that accounts for 10%. The remaining 90% of cases it is exactly what I think it is.
“Functional Programming in C#” is definitely not a book for beginning programmers!
I meant the not obvious bugs, but yeah, accounting for every single bug, most of them are really obvious, but I consider them just small bumps, not really bugs. But, I work with a really big enterprise system, lots of different modules talking to each other, lots and lots of unit tests, code revising and peer programming, so the bugs I have to deal with are almost every time the not obvious ones. 
Async/await was created to make it simpler to work with asynchronous IO. Everything it does was already possible in C# and .NET. No assumptions can be made about which thread will execute a continuation, i.e., resume after your async work, when the async work has released the thread that started it. There are many cases when the thread is not detached, e.g., if the async work is completed before it comes time to detach, but your code should be written to assume you cannot predict which thread will execute. ConfigureAwait is not used to manipulate threads. Its purpose is to capture contexts and to cause a SynchronizationContext to make these contexts available on continuation. This is what causes HttpContext not to be null, for example. I'm fuzzy on how this works, so apologies for not explaining it well.
A good resource for game programming can be found [here](http://gameprogrammingpatterns.com/contents.html). More specific to your question, you could use the [Bytecode pattern](http://gameprogrammingpatterns.com/bytecode.html) to accomplish what you need. It might be helpful to be really clear about what you are attempting to do: you want to transform a user's input into raw data that describes classes/races/feats/items/etc. that can be reloaded later by your application as well as being parsed by another, external application. This means you'll need to be able to share a library with external applications so they'll have the tools needed to "read" your file types or query the data in a database. When I created something similar in the past, I introduced the concept of "inheritance" to the application using a tree-like structure. For example, I'd design the concept of an `Item`, defining common attributes for ALL possible items like Name, UniqueID, Image, IsStackable, etc. Then I'd design the concept of `Equipment`, *inheriting* the common attributes from `Item`, and then add attributes specific to `Equipment` like EquipmentLocation (head, chest, hand, feet, legs, neck, finger, etc.). I'd then design the concept of `Weapon` items, inheriting from `Equipment`, and adding attributes like damage. All "leaf" nodes were the actual "things" for the game. All parent nodes were just there to make designing the "things" easier and faster. I don't know if designing "things" like this for the game in a strict tree-like structure is the best choice, but it worked for me and allowed me to design the content for my game quickly. As a side note, many applications use the "inheritance" pattern for things like permissions. "Groups" of users can be assigned permissions/roles/claims that all users belonging to that group inherit. However, users can usually belong to more than one group, so the app has to decide how to determine which permission setting takes precedence in the event that a user belongs to 2 groups that contains 1 or more mutually exclusive settings (like "User can edit another user's profile" vs "User cannot edit another user's profile"). My designer that I made allowed the user to add pre-defined UI controls to a node. These UI controls were things like `TextAttribute`, `ImageAttribute`, `NumericalAttribute`, `ToggleAttribute`, `ListAttribute`, etc. A user could introduce the 'Name' attribute for all things inherited from the `Item` node using the `TextAttribute` control, or the 'Image' attribute using the `ImageAttribute` control, 'IsStackable' with the `ToggleAttribute` and so on. Also, each pre-defined UI control had a few common things displayed to the user like whether or not the user could override the default value in child nodes (child template nodes or leaf nodes), whether or not the attribute could be inherited at all, etc. The game that reads the result of the designer program needs to design such things in a very, very abstract manner. The game shouldn't have a class called "SwordOfFire" that reads the data specific to the weapon you've defined as "SwordOfFire" in the designer -- the game should have an "Item" class that contains a *collection* of attributes. The game will then decide what to do with such an item based on the attributes it finds in that collection. I hope this helps. 
I am a bit in to the course right now and I realised that it mostly teaches c# correlation with unity, than as a language when I tried making a simple program outside of unity 
How do I refer to them from my mainwindow?
For an internship? Communication skills
For question 2, you have lots of options. Option 1, cheat. Just add some text at the bottom of the page for things the character builder can't handle. I did that for Edges in this file. https://github.com/Grauenwolf/SavageTools/blob/master/SavageTools/SavageTools.Shared/Settings/Core.savage-setting Option 2, make your framework smarter. Design your settings files to allow for listing of the modifiers that the program can process. You can see an example of that in the "Races" section of this setting file. https://github.com/Grauenwolf/SavageTools/blob/master/SavageTools/SavageTools.Shared/Settings/Rifts%20Tomorrow%20Legion.savage-setting Option 3, just make them real C# classes. This is what I did for careers in Traveller. https://github.com/Grauenwolf/TravellerTools/tree/master/TravellerTools/Grauenwolf.TravellerTools.Characters/Careers Option 4 is to use runtime code evaluation. Basically you put little bits of C# code inside your XML files. Then you use the CS-script library to load and execute those mini programs. https://github.com/oleg-shilo/cs-script Don't try option 4 until you have some practice with the other options. 
&gt; and eventually "unload" them if the user deselect certain rules. That's harder. I cheat and just don't allow unloading. Once you load a setting, it is merged into the base setting in memory. Option 2 is to never merge the different settings. I don't recommend this because it makes the rest of your code harder much to get right. Option 3 is to track everything they load. If they unload something, clear your memory and reload everything expect the one they unchecked. 
In my experience, internship interviews aren't super technical. Knowing the foundations of OOP, an overview of the MVC pattern, and some simple SQL would probably be enough depending on the company. Looking at the project templates would be a good place to start.
No problem. If you ever see duplicate logic save for a few differences, it might be a good candidate to introduce a method that takes in Actions or Funcs (or delegates).
Probably stick away from PHP then.
Yeah, I've done that about once, with a method that copies, moves, deletes or recycles files. With luck, your example will inspire more like that!
This book was very useful for me as a developer learning C# for the first time. I just hunkered down and read the first couple hundred pages and now I’m doing C# professionally! Woo!
Even is the UI is just the console? And also when I create a new class library I don't see a reference area. Or is just converting my console app to a library fine via the properties tab, and will that keep my references? &amp;#x200B;
Ok! thanks a bunch
I mean when I create a Class Library project, there's no references section 
Enthusiasm, openness to learn, and knowing when to listen instead of talk. Ideally, you should know some C#/.Net Core, if that's what the internship will have you using. Expectations will be fairly low for programming know-how and experience, but it helps to know the syntax. Consider asking around campus and seeing if other students or your school's career services group can give you some advice on the matter. Also, you might try writing a polite email to the HR department, recruiters, or technical manager of whichever companies you intend to apply with about what they want to see in their interns.
Any audiobooks ? I drive allot and listening to conference recordings is starting to repeat slowly. Some good C# listening would be good or design patterns ? 
I have one more question, I found a book called Pro ASP.NET MVC 5 , it talks about VS 2013 so im going to assume its a .Net framework around that time, how different is this framework compared to the new. It talks about Razor/ angular. Would this still be applicable or would it be too out of date.
Oof.
You shouldn't read a book that's intended for game development when you're learning a new language
I think that you shoud do everything asynchronously. So: not netStream.Read but await netStream.ReadAsync, not fileStream.Write but await fileStream.WriteAsync and so on ...
This is not legal SQL. INSERT INTO Downtime (Machine ID, Time Went Down, Time Back Online, Notes) If you're going to have spaces in your column names you need to escape them. Although I suggest you just don't.
https://msdn.microsoft.com/en-us/library/wkze6zky.aspx
Yes but it doesn't solve the problem. 
Removed: Rule 3. As pointed out, this is an SQL formatting issue. If the other poster's fix doesn't resolve it, maybe try giving /r/sql a shot.
Beginning C# Objects from concepts to code, University 1st, 2nd year basics on C# programming. Yoy will learn C# basics and how objects / classes comunicate. Everything you need to get a good start with Unity. https://www.apress.com/gp/book/9781430206910
You might be on to something with regards to the assembly - I downloaded the sample repo ([https://github.com/xunit/samples.xunit/tree/master/DynamicSkipExample](https://github.com/xunit/samples.xunit/tree/master/DynamicSkipExample)), built it in VS 2017, ran it using the same xunit console runner, and it worked fine
has something changed after using async? Are you sure that problem is on the server side ?
Usually, APIs are limited to returning a certain number of results for any one query both to minimize round trip time (it takes a lot less time to fetch and return 50 records than 5000) and to protect the system from suffering poor performance due to a few people pulling more records than they actually need. If you want to pull everything, you're going to need to make multiple requests.
I'm just pulling the data than putting it back into a database. Would I be best making all the calls for the API and then storing those values in SQL then querying the database for my ideal results? 
C# in Depth, Fourth Edition Dependency Injection, Second Edition [ASP.NET](https://ASP.NET) Core in Action Re-Engineering Legacy Software (not c# but if you need to modernize legacy applications it is useful) &amp;#x200B;
Some structs have an IsEmpty property. Try using that if it's there 
&gt; Would I be best making all the calls for the API and then storing those values in SQL then querying the database for my ideal results? Yes, absolutely, though to clarify you'll only need to make the calls for the API when the data the API provides changes, which is likely to be much less frequently than you'll be querying your database. The challenge is figuring out how to determine when the data in your SQL database is out of date, but most online games only add items in major updates, so that might not be a major problem in your use case.
I don't think there's anything in the official style guides, but if you're using git for source control then it's best to end with a newline anyway.
Removed: Duplicate. Also, please be aware of the [Guidelines for self-promotion on reddit](https://www.reddit.com/wiki/selfpromotion) and try to consider them when contributing.
Not required. Probably 10% of my commits are accidentally adding or removing the final newline character.
Read up on Mvvm it's the recommended pattern for working with wpf. Ultimately with this pattern you'll end up transforming whatever object your using to something presentation friendly in the view model.
My bad. Thanks for pointing it out. I should have read the post more carefully.
thanks keep up the good work, another vote for easier access to source though, it's nice to have both video and code available to tinker with.
First? This article mentions that .NET Framework will be DROPPING support for .NET standard. So from two to one.
Forms or no Forms?
Hi yeah the blog is lacking a lot. That is because I want to write up a full post, and I usually write the apps in 1-2 hours then upload and I don't really have time to write up a tutorial. But i will try for sure. The code is available always (if you are interested in anything just write up a message and I will send you a download link), but i will try to do more with the blog thank you for checking it out
I'm also including other implementations like Mono in my statement. Although .NET Framework isn't dropping .NET Standard, just not supporting future versions.
No worries it looks like a great start, but even if you can upload whatever code you produce (placeholder pages with source and maybe link to video if its available) I don't really want to keep bugging you about links, I want to tinker with them all :D Thanks again.
*ctrl R,R*
Android
'Microsoft Visual C# Step by Step' by John Sharp was my goto when learning .Net 'C# in a nutshell' by Ben and Joseph Albahari, also their pocket reference on LINQ is great. Always liked their stuff and would make use of LINQ Pad quite a bit. If you haven't got LINQ Pad it is a great tool to have if you want to get better at using LINQ Also I enjoy using Microsoft Virtual Academy, I know its not a book but it is a great resource &amp;#x200B;
I concur to that. The books I mentioned might be a bit hard for a beginner in programming in general. I don't know about Deitel's book but if it has good exercices then it's probably a better choice indeed.
I do ;)
Youre right. Besides all the obvious bugs, its always a not obvious bug.
First of all, thanks for all the detailed answers, i won't pretend i got it all but will definitely dig into it. Now i would like to go deeper on one of your options though `Option 3, just make them real C# classes.` because that is where i was going to begin with until i realized that i knew nothing about how things work behind the scene, what i mean is that if i end up with an absurd amount of .cs files, how will it impact the application ? is everything loaded at launch or is there a way to choose when some of those classes are loaded later ? I think i have an idea of how i will make it work now that i have read your post, i guess i will create effect classes (and inheritances) and use .xml files like you did in your option 2, so that users could even eventually create content from inside the application and share it with others (assuming i can go that far :p).
Specifically: 1. Ask questions 2. Remember the answer 3. It's ok to ask twice/thrice. If you do ask twice, make a point of saying, "I didn't understand it the first time. Let's take it slow this time, and I'm going to make notes this time around." 4. Everyone is bad at programming. If you have complaints, don't make your seniors feel bad. Yelling is not acceptable. Being angry is not acceptable. 5. Likewise, your code won't be perfect. They shouldn't make you feel bad. They *should* check your work, and work *with you* to make your code better.
&gt; what i mean is that if i end up with an absurd amount of .cs files, how will it impact the application ? It won't. You'll get tired of writing C# files long before the compiler will have trouble dealing with them. &gt; is everything loaded at launch Yes and no. They are all loaded into memory at launch, which is cheaper than you think. They are not JIT compiled until they are first used. In theory this is the expensive step, but honestly I doubt that you'll ever notice. 
I would like to add that none of those links represent "good code". It is all quick and dirty stuff written because I wanted something. If that's what you are doing, just trying to get something done so you can use it, cool. If you are using this as a learning exercise to write professional code, don't mimic me too closely. The options I gave you are legit, but the implementation was sloppy. 
You should look at why you would need to encapsulate data and then you will understand when to use public, protected, private or internal. In general anything that you want to be accessible outside of a class or object should be marked as public although this is not great pratice for fields and this is when you need to look at using properties. Properties allow you to provide controller access to change or retrieve a field, this is important when you have a field that you want accessable outside of a class but do not want to allow other objetcs to modify it. Take a bankaccount with a field bank balance, you may want to view the bank balance but not change it directly (change it by withdrawing or depositing money for example). public class BankAccount //marked public as I want BankAccount to be accessible anywhere { private double _Balance //marked field as private as I want to restrict access public double Balanace { get { return _Balance; } } //'get' is public meaning the Balance can be accessed //from outside the class but cannot be modified public void Deposit(double value) { _Balance += value; } public void Withdraw(double value) { _Balance -= value; } } Why did I add a Depostit and Withdraw method? Because this means we can add additional functionality here, such as checking if we have enough funds to withdraw, for say the account does not have an overdraft facility. I think part of understanding the use of access modifiers comes with how you prepare and plan your code, if you think and know that allowing other objects to view and modify encapsulated data, then mark it as public, but if the data needs to be hidden, wont be used outside the class or modifying the value directly is not expected then make sure you provide the correct access modifier. 
Quick tip: There is a "Paste XML as Classes" feature. It helps a lot. https://blog.codeinside.eu/2014/09/08/Visual-Studio-2013-Paste-Special-JSON-And-Xml/
TIL You are able to set a property without a setter in the constructor. Usually i do "private set"
a do while is better pratice, because OP wants to prompt for user input alteast once: bool validInput = false; do { Console.Write("Enter Student ID: "); validInput = setStudentId(Long.Parse(Console.ReadLine()); } while(!validInput) I think that in this case if the 'studentId' is set correctly, then it should return true. This is more intuitive for the developer, you would expect a true as a result of a successful operation. Just my 2 cents. 
It is a project for a single game.
[https://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html](https://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html) [https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-using.html](https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-using.html) [https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html](https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html)
Delayed Acks at a TCP level? ~200 ms or so? Is this a production application? I would read about Nagle's algorithm and delayed TCP acknowledgements, and how they conflict. I don't think you'll find an answer in code, because that's happening at on the TCP stack. If it's production, I would ask the customer to dig further into those two things and have their networking folks fix it, or at least make the recommendations for how the two servers should be configured.
You probably meant to say if it was a *compile time* guarantee. There is already a *run time* guarantee that the null reference is not attempted to dereference, right in the form of the NullReferenceException that you mention. Unfortunately, in a language with nullable references and side effects the problem of static analysis is most likely undecidable. Is known that even without side effects, aliasing is *at least* NP-hard and Pspace-hard. There were some results indicating that aliasing in general is not recursive, thus undecidable. So there is indeed a rationale besides compatibility that you are correctly touching upon, including practical reasons, viz. analysis performance, that the "hard guarantee" is not going to happen. It does not mean nothing can be done. C#8 will probably do a decent job in helping write more robust code.
&gt; And it seems you’re confused about Access. There is no Access database engine - just mdb files. I'm 99.9% sure that I'm no more confused about Access than I was about the state of ODBC on Linux. Microsoft Provide(d) two ways to access an Access database via ODBC. Either via the ACE driver, or the JET driver. The ACE driver is the only one still maintained to the best of my knowledge, and requires the Access components (or a redist). The JET driver requires JET components. In both of those cases, the ODBC is just talking to those lower level components, just like an ODBC driver for SqlServer/Oracle/MySQL talks to a database. Only difference is instead of network calls to a server, it's API calls to a registered library. The SQLite ODBC providers get around this by embedding the runtime into the driver. The SQLite format is well understood, thus it's easier to work with than .mdb files. The Commercial options I mentioned above are from companies that took the time to provide a way to read/write MDB files without Microsoft's direct support, which is probably why they're having to charge for the privilege. That being said.... Depending on your needs for cross-os, maybe facilitating a way to convert to/from SQLite on a windows platform would be a solution to your problem.
I bet it is taking a long time due to the number of files, not their size. With modern hardware, it can take the same amount of time to read 1 MB file as it takes to read a 1 KB file. So lots of tiny files take a lot longer to load than a few largish files. Or they screwed something else up.
I don't think you understand. Maybe read into xamarin a little more.
Entity Framework Dependency Injection with Autofac AutoMapper Know how to create a REST API Know how NuGet packages work MVC web apps are not that great. Most newer web projects are using react or angular for front end and using .Net for the APIs. 
I’m not op, I haven’t used Access in 15+ years. I agree with everything you said. There are ODBC drivers for access on windows. 
It depends on what you're interested in doing. You should learn C# and either .NET Core or .NET Framework for sure, but also dependency injection (doesn't matter which) and get REALLY good at unit testing. You can find a lot of projects online to help you thru understanding the language, but once you've got that down, I'd challenge you to write a console-based tic-tac-toe game that has a computer opponent (I'd call it AI, but it's really too simple for that). It sounds tough, and it is challenging, but it's totally doable for someone with a little experience and it's fun to show off in interviews. Be prepared to talk about projects you've done. We have hired interns that haven't coded in C# for any length of time. When we do interviews, we give them a problem or two and let them write it in whatever language they're comfortable with.
If what is being done is I/O bound on the network adapter, waiting on a response from a server, there is a lot to be gained by multithreading it as described. You left that out. 
Where are you running the application? On Azure or on-prem?
Love this book! Every time I reread a section I learn or realize something new. They also have a free eBook expanding on threading that covers everything you'll need to know about the subject.
Hey man, as someone looking into learning C#, what is it that makes this trio so powerful? I have zero knowledge on the subject (Other than experience with C++ / Java).
Electron runs on chromium, so it pretty much has the performance of chrome, which is pretty hefty for a desktop application. I don't have anything against electron, but the consensus among redditors seems to be to stay away from it. You'll get better performance out of native stuff like .net for windows and swift for apple ecosystem. There are also security concerns I've heard about electron, but I'm not smart enough to understand those.
I think it's gotten much better. Both Atom and Visual Studio Code don't kill my machine as before. There are also relatively free cross platform frameworks so there isn't much to go with.
Highly parallel I/O is the main use case for async/await. As you experienced, blocking thread pool threads on I/O is not as efficient as using async/await since it limits your concurrency and can lead to thread pool starvation if you're not extremely careful. Of course, if your S3 operations are already bottlenecked by something else like network bandwidth, parallelizing those operations isn't likely to help. However, if each of your S3 operations take a reasonably fixed amount no matter how many you execute in parallel and your operations don't need to be sequenced in any particular order, using async/await and Task.WhenAll sounds ideal. There's no need to use Task.Run, ThreadPool.QueueUserWorkItem, Parallel.ForEach or anything like that to do this. Instead, call your async method inside a loop like you normally would, but instead of awaiting the method immediately inside the loop, simply store the returned Task in the array you pass to Task.WhenAll after the loop completes.
I thought about that too.
Well multi client performance increased but in our case it is one client that's sending files at a high rate. Yes I'm sure it's the problem with listener.
Yes we checked. The thing slowing down the process is the listener. This whole process is running as a Windows service. Is there any way we can apply functionally of setting maximin threads which is normally done by `ThreadPool.SetMaxThreads(int,int)` using `Parallel` class so we can assign multiple threads for a listener object. Or increase the amount of threads on the service entirely?
It has to do with the creation of objects. If you have a static class, it is like a library and anyone can go use the public static services (methods) it has. Classes not marked as static are more like a car. If you want to drive the car (use the non-static methods) you need to create the car first (call it's constructor). Static methods appear like so Console.WriteLine(); Non static methods require you to make the object first Date time currentDate = new DateTime() currentDate.ToString()
That's how I wrote it the first time, but decided to change it on *one of the many* debugging sweeps. I should learn to save to draft, especially in this subreddit..
The pic alone makes me want to use this in all my projects. Thank you
Ah. I used it more than a year ago as insider. Is it good now?
What do you mean? Didn't he mean xamarin forms or xamarin native
Blocked video lol
Usually that's a great thing, but with Microsoft I would be worried they would buy it and it would disappear or get "revamped" and the next version is Windows only...
I use it constantly, I can't think of anything really that I have not been able to do that I wanted to do. They even have some gui work arounds to make some things work. 
It is related to the different between a class and an object. A class is like a blueprint, while an object is a single constructed instance following that blueprint. Static makes either variables or functions belong to the class as a whole, rather than to each individual object. If you had a static int in a class, there is only one int, but if you have a normal int, every single object/instance you create of that class has a separate int value. Normal functions operate on individual instances, but static functions can only access other static functions or variables (well it can create instances as well, and call instance functions on those instances). It is commonly used for utility functions and factory functions. &amp;#x200B; A static class is a class that cannot be constructed. It can only have static variables and functions, and is commonly used as a utility class (like Math).
Think of static as defining a SINGLE item which isn't created with the new keyword. Let's say you have a color that you want to use in various places in your code. Far better to have: private static readonly Color OffRed = new Color(255, 20, 0); ...than to recreate it every time you need it. Note the use of readonly. This prevents it being modified after creation (but is not required). Static can also be used with methods (functions). This is a good idea when the methods do not refer to any class variables, as this indicates intent (and makes unit testing easier). Functional language purists argue that this is a good idea generally. Example: public static double Add(double x, double y) =&gt; x + y; You couldn't use it with this version, as it references a class field - it wouldn't compile: public double AddToField(double x) =&gt; x + _y; You also need to use static for the entry point to your program. Look familiar?: public static void Main() { // code here } So far, so good. Safe, clean, good for you, wholesome programming. But. You can also have static classes, constructors, destructor,... Here is where it gets dangerous. Here be dragons. Static classes are great where you really, really genuinely only want one object. This is very rarely the case. Until you absolutely know what you are doing, don't use them. You might find yourself using them from the .Net library, this is fine, just avoid creating your own, particularly if you have dreams of "global variables" in multi-threaded applications (shudder). Don't do it. Static constructors and destructors even more so. If you are a beginner, avoid them. Too long, didn't read: Ststics are great for global, unchanging things and pure functions. Don't use them for anything else until you have more experience.
Assuming IO operations, async simply moves "blocking" from "OS blocking your thread" to ".NET runtime blocking your execution context" * in synchronous code, you cede your execution to the OS scheduler. So your thread is blocked until OS has a response. Your thread is still occupies memory. * in asynchronous code, you cede your execution to the .NET runtime, which can allow other things happen on your thread (e.g. render UI). As a benefit, this also allows you to run concurrent code, thus giving you more scheduling control. There is no performance gained, CPU/IO-wise. Previously you can spawn 1000 threads have each thread call your API, it would accomplish the same thing, but take up a lot more memory. 
When I first started programming in C# I could not get my head around it. I had statics EVERYWHERE as they were just easier to use and this whole "object" thing did my head in. ELI5 (er ish). I have a lego set to make a basic car. If I don't use the static keyword my code is the instructions and I can create the same lego car over and over from my pile of legos (Using the new keyword) and in different places in my code I can refer to different cars with different states (color, fast slow etc). If I use the static keyword I have a single finished lego car, I can change the states of that car (I can repaint it etc) but there's only ever one.
Here's a nice and short tldr. Go create a new class with a static property. Set the value in one instance of the object and print the value from another object of the same type. They'll be the same. So static is consistent across all instances of an object where as nonstatics are instance specific.
It probably doesn't use .Net Core which is the newer, crossplatform, slimmer version of .Net framework. As well as the Angular versions have big differences between them so this one would probably be an old one. So I would say no, find a book about .Net Core and you will probably find what you are looking for. Order a book online, I recommend it.
That's the trade-off though. With electron you can build much more quickly, but need to consider performance in the long term. With full native windows apps my experience is just the tech is a massive time drain and it's very time consuming to build with. I would choose electron every time because I can prototype faster and the time sync to optimise resources isn't going to take me much longer than it would have taken to even get moving with a XAML based solution. 
&gt; With electron you can build much more quickly That's a fallacy. Whether you can build much more quickly or not depends on your experience.
Even if what you are arguing was entirely true (which it's not, I've built with both and XAML is a beast for any kind of complexity) it would only support my argument since the vast majority of frontend developers know web tech best these days. That's why electron came about.
&gt; it would only support my argument since the vast majority of frontend developers know web tech best these days. ... It actually supports my argument. If you know the web techs, then it'll be faster for you. If you know XAML and WPF very well, then that will be faster for you.
Maybe interesting, in VB it is called `shared` which may be a better name for it. A static field is shared among all instances of a class. Or better said, it does not belong to any instance. If you say `static int x` then there is only one `x`. If you say `int x` then each instance of the class has their own `x`. Since a static method does not belong to any instance, you have to use the class name to call it. for example: `Console.WriteLine` or `Math.Sin`. A non-static method must be called on an instance: `list.Add`
I think that the problem is not in the threads count. Look here: https://blogs.msdn.microsoft.com/oldnewthing/20170623-00/?p=96455 Generaly: show me the code ... Your code can be better. For example there is: if (!ShouldStop &amp;&amp; !listener.Pending()) { Thread.Sleep(35); } What is the purpose of this sleep ? 
No, it’s not. You may sometimes end up in this situation, but it is not the default. This only happens is specific cases (eg legacy asp .net), where you have specifically opted in to the behaviour (or the template you used opted into it for you, in your web.config, probably). You’re getting confused between the asp .net defaults in mvc 4/5 whatever, and the defaults in c# in general. 
Woah woah, wait there. Discord sucks so hard and 95% of programs that use Electron absorb the hell out of the RAM. Electron shouldn't be recommanded for doing anything at all. The only program that got away with this and is now usable is VSCode.
I tried finding something about a year ago and it was either "hello world" examples or 1000$ courses.
OK, I think you mean no forms, Android only. In my experience a lot of Xamarin material is either outdated, or created by people who aren't very good in what they're doing. The safest bet is to read through [official docs](https://docs.microsoft.com/en-us/xamarin/android/) as a start. Once you're done with that bookmark [API reference](https://developer.xamarin.com/api/root/MonoAndroid-lib/) and figure out what exactly you want to make. In my previous experience with Xamarin there were cases when I researched whatever I needed to make in native Java or ObjC, and translated examples into C#.
Keep in mind that if you are performing a bunch of http requests in parallel you'll still be limited to 2 or 10 concurrent calls unless you change the default connection limit. See here: https://docs.microsoft.com/en-us/dotnet/api/system.net.servicepointmanager.defaultconnectionlimit?view=netframework-4.7.2#System_Net_ServicePointManager_DefaultConnectionLimit
&gt; Electron shouldn't be recommanded for doing anything at all. Electron is fine for plenty of use cases. Most end users don't care about and won't even notice RAM usage. It's a trade off like anything else in tech, and if you only know JS/TS building an app in electron will take 5% of the time it would take to learn native tech for 3 different operating systems. Not to mention how easy it is to distribute and update/patch electron apps. For a mainly front-end web developer, electron is more than worth the consideration. &gt;The only program that got away with this and is now usable is VSCode. Plenty of programs "got away with" it and have millions of users.
Depending on the api you are calling, or perhaps regardless, you may want to throttle the calls to it by some app setting. That gives you the option to tweak the number of remote calls in each environment to a suitable value.
Using Blend effectively makes the xaml experience completely different.
If Microsoft were to buy it they’d want it for its cross platform capabilities. They’ve already got at least three XAML implementations so they don’t need another windows only one. 
Static classes can't be initialized by a *new* operator, but they are when you have a reference on them. You can have a static constructor inside your static class to perform logic on its initialization. If you are running a website, your static classes will be reinitialized each time the resources are recycled. It's important to keep that in mind, because if you are doing expensive work in your static classes' initializations and expect them to always be alive, you'll end up with unexpected behaviors and bad performance.
https://stackoverflow.com/questions/7160187/standardoutput-readtoend-hangs
I could not disagree more, if you know your xaml it goes 1000% faster to just write it then drag and dropping the element and configuring it! The big win is that you can see your result instantly in blend or visual studio! 
Seriously, are you serious or just trolling? How the heck most of users don't even notice RAM usage when most people are complaining about these programs like Github, Skype, Atom...etc? What "learning curve"? What the heck are you bubbling about? All Electron apps give the developers something and take something much greater that it doesn't let it have a userbase, your apps are nothing if the users are nothing. Electron is not worth it. Plenty of programs didn't get away with it. No one uses Github client except few, no one uses Skype for desktop anymore(the users you fucking see are from other platforms like web one and Android...etc) No one uses Atom for code editing(it's declining more and more when much better editors like VSCode with better performance exist and this is all because of Atom's performance) and I can continue like this until the next morning... Please no bullshit about "Wow it is easy to make a crossplatform app with Electron and it has no learning curve too, yaaay!" it never was worth it. Don't bother yourself replying to this, I already know the result of the discussion.
Start WSL directly instead of doing it via cmd.
I tried this, but in this case, an error occured "the file has not been found" (I translate it) 
You must compile and run your application as 64 bit.
Yes, this is basically a case someone else pointed out I left out (but in reality I wasn't trying to write an exhaustive guide, just some examples). It's useful to think of how threading might help by looking at the points where you are stuck waiting. I'm imagining it works like this: 1. Make a data structure containing information about the moves to make. 2. Make an API call (over network) to perform the move. 3. Wait for the API call to complete. 4. Handle errors/note completion. Steps 2 and 3 probably spend the most time per item, thus could yield the most savings. But if Amazon has a rate limit, you have to expect it. And if your network adapter has some limitation that affects this, that impacts you. You probably need to check out how to configure whatever HTTP client you are doing in case it limits simultaneous connections to the same endpoint (for example, most browsers only allow 4 and I think that is a setting in HttpClient.) So there are a lot of reasons why you might be constrained, even though network I/O like this *should be* good to do in parallel, but there are a lot of things that might limit *how* parallel it can be. 
From my experience, the more complicated the program, the more effort it takes to keep it performance. That was true in the early days of Motif, Java JWT, and C#. Even games have that problem A simple program in Electron is fast, a complex one takes work. So yes, it is acceptable because it is a part of development.
Then you're not using Blend effectively.
It comes down to skill sets. I always prefer to manually write component layout because it makes sense to be. I did it with Gtk, Swing, and Xaml. Even Active Reports. For some of my coworkers, though, it is faster and safer if they use the designers. Know yourself. 😀
I came to Electron brocade I needed a cross platform GUI that worked in Windows and Linux n my options were limited and Electron was the most stable code I found that didn't involve writing my own. Of course, then I had to learn Typescript because there wasn't a good C# interop. So win?
Ok, you're right then. I was expecting you to say that instead.
Well, at this situation, you're assuming that they already have good computers(like 8GB RAM) but if they have bad hardware, then they will notice it rightaway and will stop using it. She certainly not going to look at her task manager but she will notice how slow the app was. Anyway, I want to apologise for insulting earlier. 
I'm not really sure what you are trying to say here. The only thing I'm saying is that the default async behaviour is that is tries to continue with the same synchronization context. You can see that here: Task has GetAwaiter which returns a new `TaskAwaiter`. https://referencesource.microsoft.com/#mscorlib/system/threading/Tasks/Task.cs,2937 Task also has ConfigureAwait which returns a `ConfiguredTaskAwaitable. `ConfiguredTaskAwaitable` has `GetAwaiter` which returns a `ConfiguredTaskAwaitable.ConfiguredTaskAwaiter`. https://referencesource.microsoft.com/#mscorlib/system/runtime/compilerservices/TaskAwaiter.cs,376 Now let's compare the `OnCompleted` methods of `TaskAwaiter` and `ConfiguredTaskAwaitable.ConfiguredTaskAwaiter`: TaskAwaiter calls `OnCompletedInternal(m_task, continuation, continueOnCapturedContext:true, flowExecutionContext:false);` ^ note that `continueOnCapturedContext:true` is true here. https://referencesource.microsoft.com/#mscorlib/system/runtime/compilerservices/TaskAwaiter.cs,93 ConfiguredTaskAwaitable.ConfiguredTaskAwaiter calls `TaskAwaiter.OnCompletedInternal(m_task, continuation, m_continueOnCapturedContext, flowExecutionContext:true);` ^ note that `continueOnCapturedContext`depends on the value provided to ConfigureAwait. https://referencesource.microsoft.com/#mscorlib/system/runtime/compilerservices/TaskAwaiter.cs,420 So, if you don't use `ConfigureAwait(false)` then it will set `continueOnCapturedContext` to true. Which means it will use the same sync context. It does not matter if you use asp.net or not. This is what always happens. 
Honestly if you need any tooling other than an editor to write your apps the ecosystem has failed you. Tooling should be supplementary because code should be easy to read write and debug with your eyes. Generated code is just a nightmare to solve issues with in my experience
&gt; synchronization context(i.e same thread). ^ Nope.
Running command line and reading output is tricky. Don't reinvent the wheel. [Use CliWrap](https://github.com/tyrrrz/cliwrap)
&gt;The one where you have to learn windows, MacOS, and linux gui libraries to make a native cross platform app. While agree with your other points, this one just isn't true. Anyone who's making a cross-platform app is going to be using something like Qt, GTK, or [Avalonia](http://avaloniaui.net/). You don't need to learn 3 different platform's UI frameworks to make a crossplatform program.
Why not call bash.exe and the arguments “ls /home; exit”
I don’t think this actually happens in practice. The actual compiler doesn’t add anything and is quite capable of determining the end of the source document without a fancy line termination character.
Now I have not an error, but I have nothing in stderr or in result. Why does it "work" in 64bit and not in 32 ? 
Not every tool works for every person.
It's because of how backwards compatibility with 32 bit apps works. If You try and read c:\windows\system32\ as a 32-bit app you get sent to c:\windows\syswow64\ instead where of course there is no wsl.exe.
Knowing all three makes you something called a "full stack developer". When writing software professionally there are 3 areas of concern. * The client that the user interacts with * The server that handles the business rules * The database that In today's world clients are usually web based. JavaScript is a language that runs in web browsers that makes all the fancy shit that web pages do work. C# has dual use. It can be used to make traditional windows applications, but it can also be used to do the web server piece that serves up the web pages and does the business logic. SQL is the universal language used for accessing data in a database. So if you know C#, JavaScript, and SQL you know the three most common languages used at all three levels of the "stack". Now you should also know there are different ecosystems, and each ecosystem has it's own stack. There is the Microsoft ecosystem, the Linux ecosystem, and the Apple ecosystem. C#, JavaScript, SQL is for the Microsoft stack. Python/PHP, JavaScript and SQL is for the Linux stack. Objective C, JavaScript, and SQL is for the Apple stack. See any patterns? 
You can use the /c parameter of cmd.exe to accomplish what you are going for. I have previously done it this way: string args = $"/c wsl gcc -fno-strict-aliasing -fno-unroll-loops -nostdlib -shared -fPIC -Os main.c"; string cmdPath = Path.Combine(Environment.SystemDirectory, "cmd.exe"); bool success = RunProcess(cmdPath, args, dir); private static bool RunProcess(string file, string args, string workingDir) { Process process = RunNew(file, args, workingDir); string outputNormal = process.StandardOutput.ReadToEnd(); string outputError = process.StandardError.ReadToEnd(); process.WaitForExit(); if (process.ExitCode != 0) { Console.WriteLine("'{0}' failed with exit code {1}. Output:", file, process.ExitCode); Console.WriteLine(outputNormal); Console.WriteLine("Errors:"); Console.WriteLine(outputError); return false; } if (!string.IsNullOrWhiteSpace(outputError)) Console.WriteLine("'{0}' output: {1}", Path.GetFileName(file), outputError); return true; } private static Process RunNew(string file, string args, string workingDir) { ProcessStartInfo processStartInfo = new ProcessStartInfo(file, args) { WindowStyle = ProcessWindowStyle.Minimized, UseShellExecute = false, RedirectStandardOutput = true, RedirectStandardError = true, WorkingDirectory = workingDir, StandardOutputEncoding = Encoding.UTF8, StandardErrorEncoding = Encoding.UTF8, }; Process process = Process.Start(processStartInfo); return process; }
Love you ! This works fine !! not with wsl but with bash -c, don't know why. 
But it should work with bash -c no ? I tried with it but I have the same problem ( it's just block indefinitely )
You are welcome and good luck! Being a software developer is a strange career. There is nothing like it. There are jobs where you can do it even though you hate it. Software development isn't one of those jobs. You must love it. But since you love it, you will be successful. People who get into programming just for the money quickly transition to more administrative jobs like project manager or architect. That's not to say you will always be having fun and always enjoy learning. But you should be feeling great about it more than 50% of the time or maybe it's not the job for you. If you find that you get an endorphin rush after you finish a program and it works properly then you will probably be good at the job. 
The rush after finishing a program is honestly the best feeling I've ever had! When I first started my Computer Science major I was always going above and beyond to make my assignments perform a little extra. Was it a simple output to console? I'd try to make it output using JavaFX, etc. One of the hardest parts I've run into was not only finding what language would be best for me to really commit to (as I understand programming in general, I just want to find my focus point and where to grow from) and I came across your post which seemed in line with everything I was already interested in! Thank you again for everything, and I picked up a free three month subscription to Pluralsight due to being a student and I plan on working through their C# tutorials now!
That is probably because of WOW64. If your app is 32-bit it is probably running the 32-bit version of cmd.exe, and I don't think there is any 64-bit version of WSL. You can do the following to bypass file redirection and launch 64-bit cmd.exe always: string cmdPath; if (IntPtr.Size == 8) { // 64-bit app, use normal path cmdPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), "cmd.exe"); } else { // 32-bit app, assuming WOW64 (a better check would pinvoke IsWow64Process) cmdPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Windows), "Sysnative", "cmd.exe"); } 
My suggestion would be to first measure where the bottleneck is (not just saying it's in the listener) and then determine which strategy should be most appropriate to handle this issue (either in the your code or socket/tcp configuration). Glancing at the code, a few remarks: 1. You've wrapped the TcpClient in a using statement, but you also call tcpClient.Close() somewhere in between even though Close and Dispose do the same thing for TcpClient 2. You should read up on NetworkStream/socket documentation a bit (e.g. [https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.networkstream?view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.networkstream?view=netframework-4.7.2)), calling read and giving it a buffer which should be populated with read data, doesn't mean that the whole data will be read in one go - you need to check the return value of Read to know how much of it was \*actually\* read. I don't know what kind of use case you have exactly but if we assume the simplest scenario - client sends out the file and then closes the connection, you should read the stream until it returns 0 (see in docs, this means connection was closed). 3. From the current code snippet, what I see is that you accept connections asynchronously, but still block on reading the data from the socket and also you seem to be using the old APM API (BeginXXX/EndXXX methods) which is not the most performant way to work with sockets and can create garbage collector pressure since there is a lot of state objects being created between the callbacks (again, not sure if this is happening in your case, don't know the exact logic/use case, but you can check this and related network tracing with perfview). From an API usage standpoint, for high-performance async sockets in Windows you should use the EAP API (e.g. [https://www.codeproject.com/Articles/83102/C-SocketAsyncEventArgs-High-Performance-Socket-Cod](https://www.codeproject.com/Articles/83102/C-SocketAsyncEventArgs-High-Performance-Socket-Cod)) 4. You mention some kind of performance measurement, but didn't really show any numbers/environment information. Have you tried using .NET network tracing ([https://docs.microsoft.com/en-us/dotnet/framework/network-programming/network-tracing](https://docs.microsoft.com/en-us/dotnet/framework/network-programming/network-tracing)) to see which internal framework calls are causing the delay to localize the problem? HTH &amp;#x200B; &amp;#x200B;
You can decide that when scheduling, but nevertheless it can still deadlock if you use it incorrectly. 
It was mostly a joke.
Thanks for the link. I read a lot of interesting and new things for myself
Not necessarily a bad choice. All I'm saying is that documentation is a bit scarce, but if you're a competent developer then you will come up with a solution regardless.
I concur 100% with the exception of editing Grid's (inserting rows for example).
\&gt; A **#STRUCT** is a value type so it is faster than a **#class** objec &amp;#x200B; What if I am passing a very large struct to a function. Is that faster than passing a very large class? &amp;#x200B;
They are not great for transferring data. In that case you should use a class.
Would really appreciate if you could watch that video and provide me some feedback. :)
You can pass structs by ref, or as an in parameter (readonly ref). That way you avoid the cost of copying the struct. However, you can't store a reference to a struct instance so you should use a class for those cases.
incomplete definition/analogy but another way to think about it: static is the interpreter's way to "hard code" something into machine code. it holds only static (hard-coded) state for static methods. 
Removed: Rule 7.
Or if you’re using Mercurial or if you’re using any source control, really. 
Each object has a set of fields, properties and/or methods. Each of these can be either static or instance. An Instance variable retains state within a particular instance of the object. So whenever you create a 'new' object of that type a new object is created in memory with storage allocated to each of the instance values. This is why two variables of the same type can have different values. When you create a static field/property/method it is not associated with a particular instance. The memory is allocated for only a single instance of that value... that's why you don't use an object to access the value (You use the type), your not affecting the value of a particular instance of the object. There no extra memory allocation for methods... on methods it determines the scope of the method. An instance scoped method can access instance value directly... you have a particular object that is doing work on it's own personal location in memory. A static function does not have access to instance data because it is not associated with a particular instance. So, if you asked for property bar (where bar is an instance value) it wouldn't know which (or even if any exist) instance of bar to modify. 
I recall the .NET team admitting that moving 4.6 to be NetStandard2.0 compatible was a mistake as some APIs misbehaved, so I'd say yes. In the compat table there's also an asterisk saying that library authors should multitarget 2.0 and 1.6 if they want to support .NET Framework 4.6. This might be related to your problem. 
Have you thought about using Docker? Will probably fix it by virtue of the fact that all the dependencies are pulled in when the image is created.
Check the .Net Standard chart that you can find online that tells you which versions of .Net Standard and .Net Framework and will work together.
It depends on the API really. You would have to check if they say you can make calls to other URLs that don't require the other fields.
&gt; Static classes can't be initialized by a new operator, but they are when you have a reference on them. You can have a static constructor inside your static class to perform logic on its initialization. Yes, with a few additional points of note: - You can have a static constructor on a non-static class. - The static constructor is guaranteed to run before any static members are referenced, or before the first time a non-static class is `new`'d up. The documentation implies that this is not guaranteed to be immediately before, buried in the spec is enough to make it a rule. - That said, a static constructor can have interesting impacts on static fields; [you can play with the commments in this linqpad script to see that adding a constructor can change when fields are initialized](http://share.linqpad.net/vv4qxh.linq) - Static constructors can fail silently, and when they do the static class can be in an uninitialized state; you only get one shot at executing a static constructor properly in a given appdomain. - Static constructors do not play nice with [`ThreadStatic`]; The field will only have a value on the thread the constructor was called on.
Yeah, I have also experienced this. Trying to do .NET Standard on .NET Framework is utterly hopeless once you get past the most basic cases. Just go straight to .NET Core piece by piece and you'll be much happier. It will require good splitting up into pieces and deeper migrations but it works better.
No worries,you are doing better than the programmers at Reddit. For som reason this is the top post for me.
You want all your projects that can using the new csproj format, and the ones that can't (e.g. ASP.Net MVC v3-5) using &lt;PackageReference /&gt; instead of packages.config. That cleared up most of our binding issues in mixed solutions.
I read that .NET framework 4.7 is actually the one that should be safe with net standard 2
I did one this month - referenced NetStandard 2.0 from a .Net 4.6.1 project. For some reason it would not find System.IO.Compression.dll 4.2.0 despite existing in both net framework and net standard. I ended up putting in the installer. The project *almost* works on Linux (mono) now. I didn't change a great deal to make it work.
No reason to run cmd.exe when you can run bash.exe
https://github.com/dotnet/standard/issues/481 Have fun.
.NET 4.7.2 to be exact
Very few programmers on earth have learn A language then gone on to have a career in just that language. One learns programming in general more than one learns a particular language, especially in the space of mainstream languages like C#, Java, Go, Javascript etc which are not so radically different. So don't fret about what language you learn now. There is no way to know if it will be popular 5 years from now, or if it will be what you use at your next job. But if you learn C# and get good at it, and later you need to do Java, it will be a very short time to get up to speed at Java, for instance. &amp;#x200B; Many jobs that hire do not require that you know a specific language, only that you have experience in a similar one. &amp;#x200B; Anyway, C# is fairly popular in industry, and similar to the other popular languages, so it is a fine one to start with. It is also maybe the best performing garbage collected language at the moment, and used in lots of popular gamedev tools (Unity, Monogame) , so you can get excited bout that.
C# is used in all kinds of industries. Including SpaceX for example! 
The problem with questions like this is everyone's got very different experiences. I know some guys who studied C# and never got jobs as developers. I know some other people who are amazing developers, who know C#, and are constantly being offered jobs. It'll depend on the industry you are looking at, the location you are in, your ability and experience level. As an example, I feel like I've hit the jackpot (mostly due to luck, I'm not an amazing developer) - I'm a C# developer and I work from home 100% of the time. The company flies me places 1-2 times a year and I treat it as my mostly free vacation. I love it. I don't commute anymore, I don't sit in traffic, I don't even sit in meetings or deal with clients or have to get dressed up or remind a client that they need to sign the contract or ask why they didn't pay their invoice. I friggin love it. But I could get fired Monday morning and then spend the next six months going to interviews and getting rejected. I'd head over to CareerBuilder or Dice or StackOverflow jobs or a million other sites and do some searching. Look in your city or the city you'd like to be living in. Compare how many open jobs there are with other languages. See if you can get a feel for salaries using other sites like Salary or Glassdoor and then look at the cost of living in whatever cities you are looking at. That'll give you a good general idea that is likely to apply to you. If you are a rockstar, you'll always have more options in any language. Also, a lot of people are just 'developers' and they move from industry to industry; but maybe you love finance and want to spend the next 40 years working in finance? Well, make sure you look for jobs at finance companies - what are they hiring for. 
Yes, this headache happened in the netcore 1.x days for a lot of us transitioning to netstandard. The lesson learned was to switch NuGet to PackageReference format and write the new csproj files. This solved it for us and we had the benefit of learning the new format which is, in my opinion, far more reliable and easy to use.
It's called [apis of .net](https://apisof.net/).
Thank you. I didn't know what it was called because all I usually do is type .net standard in Google.
There are plenty. Banks, finance, state and local governments, enterprise in general use C#. It is not as popular as Java, but there are plenty of jobs for backend developers looking for C# work. It's not the sexiest language, but if you understand C# you likely can use any other C-like language afterwards. 
You're probably going to need to work with [System.Reflection](https://docs.microsoft.com/en-us/dotnet/api/system.reflection?view=netframework-4.7.2). You'd need serious wizardry to get it to work with a string (and namespaces are not something that exists at runtime, you'd need to do ExampleAssembly instead), but you can get [MethodInfo](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.methodinfo?view=netframework-4.7.2) for a method and use GetParameters to check the parameter types. For the string implementation, you'd need to parse the string and work from assembly on down getting the assembly, then the type, then the method.
That's the part I'm looking at a solution for. I know about using the MethodInfo, and that seems like just what I need, but I don't know where to begin when trying to get it using a string.
I would guess C# is one of if not the most diverse languages when it comes to what jobs you can get with it. In my opinion, this makes C# the best first language to learn because you can take it in so many different directions. Also, since it is backed by Microsoft you know it isn't going anywhere anytime soon. From what I have heard, about the only place where you might have trouble finding jobs is Silicon Valley. 
Is this for work? This is a really bad way to handle storing passwords. You don't want to store passwords as plain text because someone can just examine the connection string (usually saved in a publically viewable config file), run a query, then get everyone else's password. It's a huge security vulnerability. That being said, you can do that with this data reader: https://docs.microsoft.com/en-us/dotnet/api/system.data.oledb.oledbdatareader?view=netframework-4.7.2 It's a little complicated, but you create an OleDBConnection object using your connection string (assuming this is the same as the SqlDataReader), then you use the OleDBConnection.CreateCommand() method to create a command, then you said that OleDBCommand's CommandText property to a SQL command with one parameter. In this case: "Select * from TABLE_NAME where USERNAMECOLUMNNAME = @username" Then you use the Parameters.AddWithValue("@Username",usernameVariable) to set the parameter. At some point in there you use the Open() method of your connection, then you need to create an OleDBDataReader object to pull the data out. You do that with OleDBDataReader dataReaderVariable = commandVariableName.ExecuteReader(); After that, you can use the DataReader to get the values from your query. It has a Read() method that'll pull the first entry (and you can keep using it to read other entries). While it is on an entry, there are a bunch of GetXXX() commands you can use to pull columns of data into variables. You have to use the right GetXXX() command or it causes an exception. You may have noticed that you can instead of using a parameter (the @Username) from before, you can just combine the string with whatever they entered into the username box so ("Select * from table where column = " + txtUsername.Text). Doing so opens you up to something called a SQL Injection attack and it better avoided. Final pro top, use your connection's close method when you are done so the server stops waiting on you. I know this is a lot, but it boils down to: Create a connection using your connection string. Use that connection object to create a command object. Set the command object's command text to a SQL query. Bonus Round: Add the values of any parameters you used as filters. Use your command object to create a DataReader. Use the DataReader to get the data you want. I do this all the time at work, except we handle usernames and passwords with Active Directory for security reasons. After the first few times, you get the hang of it. 
yeah we had the same issues, switching to PackageReference fixes almost everything, a few things we had to add generate binding redirects to the csproj
\#1 and #2 didn't work, but #3 still has an actual WSDL description at the URL specified. http://www.thomas-bayer.com/axis2/services/BLZService?wsdl
Multi-target `netstandard2.0` and `net461` if you want to support .NET Framework with a .NET Standard 2.0 library: https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/cross-platform-targeting
I don't think any of it is safe to move
I wouldn't do it unless you are forced to do it because say you're using Azure Functions V2 which now is on .net standard or core and you're using the same dlls. If you want to develop .net on a mac and deploy on linux, you have a serious Microsoft Derangement Syndrome
We have been porting a 4.7.2 MVC / API solution now for about 4 months now and its been pretty good. We have moved each project across one at a time, wrap in unit tests and ported it to .net standard 2.0... There was 1 dependency that wouldnt port (box api). Also each time we change dependencies in the 4.7.2 project it breaks about 5 system references but we just fix those by hand... If things go to plan next weekend I will port the entities and mvc project to core and we will be done! We are also porting the front end from jquery to React, now thats been a clusterfuck, we should have gone with Vue or just rewritten it in Angular 2+.
We moved ApprovalTests to .netStandard. It took almost a full year (in 2-4 hours 2 to 3 times a month increments). It was hard, and frustrating and that's with 100% test coverage. Using the new .csproj format helped a lot. but my main advice is to go \*really\* slowly. Don't change 2 things at once. so that when things do break, it's easy to pinpoint what did break. For example, often we would move to the .csproj and (update package, clean dir, rename something) this was often a mistake. We also ran into places where the tests would stop running and just give an 'inconclusive - test not run' result. &amp;#x200B; Nothing we did was super exciting or all that difficult in retrospective, although we spent a lot of time on it, so must not be all that simple either :-( &amp;#x200B; [https://github.com/approvals/ApprovalTests.Net](https://github.com/approvals/ApprovalTests.Net)
Then add lots of binding redirects to the version referenced (which is probably latest) :-/ .NET Core does have the advantage of doing away with the joy of binding redirects.
Is this r/programmerhumor? You need to be more specific.
We want to develop on Windows and deploy on Linux docker containers. If there is derangement, it's in upper management deciding to try to convert us to an open-source shop without providing us the resources to convert a decade's worth of code to Java while we learn Java and support C#. Moving to .NET Core seemed like a reasonable compromise. I mean, until we actually TRIED it ;)
Why treat them differently? In both cases they surround the body of a function.
Unfortunately it's not at all clear what you're asking. What do you mean by "click a button?" (I assume you don't mean doing it with your cursor). And what do for loops have to do with this? What did you search while trying to answer a question about about buttons that led you to for loops?
Honestly, consuming a soap api is about the simplest api you can Integrate to from c#. It's far easier than integrating to rest. Simply do add service reference, enter the wsdl endpoint, and then use it like normal class calls. Done. 
They do, but sometimes lambdas can get exceptionally long and complicated. I’ve found this lols easier on the eyes to me. Call it a quirk of my personality if you want to.
What exactly are you trying to accomplish by getting the name and types?
You should start with basics of general programming basics (in C#). Variables, loops, , collections, object oriented programming, threading. Pick up any entry level C# book and start there. I wouldn't think about any frameworks just because you will face many problems without basic knowledge how the things work
&gt; This is a really bad way to handle storing passwords. You don't want to store passwords as plain text because someone can just examine the connection string (usually saved in a publically viewable config file), run a query, then get everyone else's password. It's a huge security vulnerability. I said this to my old workplace. Wasn't much we could do about since the system they were using was developed by another company, and they didn't have access to the sourcecode (given that they aren't developers).
thanks bro, now i am going to start from C#. Just need one help, give me the roadmap to .Net.
Learn .net core. 
I'm creating a command system and want to show syntax for the method that the command calls
Reported as spam.
I reported your shitty comment as abusive! If you are dumb enough to think that a free tutorial would cover 6 hours of hand-on training good luck to ya! I bet you can't even write a hello world program !
You're cute.
Foreach is a loop, but it will only loop once through the elements given to it, so if you loop until you find the button (I assume that's what you're doing?) then click the button when you find it, it will only click it once. However, you can use the command `break;` to end a foreach loop once you've found the button and it will stop looping. Again, without more specific info, it's hard to give good advice, but if you're using the WebBrowser class, it has a Document property, which is of class HtmlDocument. That has methods on it you can use to get specific elements without looping. For example: [https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.htmldocument.getelementbyid?view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.htmldocument.getelementbyid?view=netframework-4.7.2) So you'd do `webBrowser.Document.GetElementById("MyButtonId").InvokeMember("Click");`
£15 for that is an absolute rip-off. And proper lolz at the 'sale price - 63% off £39.99'. Also reported for spam.
This isn’t for work I’m just doing a fun project for myself and I’ll add all the encryption later, I’ve only just started coding for like a year and it works best for me when I take it in steps so I decided to make the code for the login first before I do the encryption. But thank you very much I’ll be sure to try this!
Unless I'm misunderstanding what you want, you shouldn't need to set CursorLeft at all. If you just do a Console.Write (not a Console.WriteLine), the input cursor will be at the end of the text anyway.
If I marked it as solved, then it’s solved. SetCursor starts editable and selecting text after the the cursor position you set.
Sure, it works, but that's because SetCursor doesn't do anything there. Just having a Console.Write will accomplish the same thing, since that already moves the cursor to the end of the string.
I’ll have to try that. Thank you.
To search for a type you can do Appdomain.Current.GetAssemblies().SelectMany(a =&gt; a.GetTypes())Where(t =&gt; t.FullName == typeName).FirstOrDefault() this will return a matching type or null if not found looking in all loaded assemblies.
Another no code approach is rescuetime.com
Oof. That is really something. 
Ideally, you want to minimize the permissions as much as possible for the set of credentials used in your project. If your program isn't deleting data, you don't want to allow the set of credentials to do that. Same with dropping or adding tables. You can get crafty and hard code the connection string within the program somewhere, but that restricts your ability to edit it later if you get a new server or if you are deploying your program to other companies. There are ways to obscure it for sure, but the default behavior leaves it pretty exposed. 
/r/lostredditors
You can download the latest here: https://github.com/operasoftware/operachromiumdriver/releases
Could be worse, I had a recruiter ask me if I knew "c hashtag".
Thanks bro. i will try my best.
It's a bot, look at the history.
I've heard people call it C pound
Try accessing as a UNC share instead of a mapped drive. You may also need/want to look at an application pool so that you can set the user security credentials used to access the share. There's a (stack overflow)[ https://stackoverflow.com/questions/14611015/iis7-accessing-network-share] post which may help you.
Removed: Spam.
Removed: Rule 5.
except it's still showing up
Why not take these two as examples and create your own?
It was removed and I can't see it on /r/csharp anymore. If it's still showing up for you, then it might be an issue on reddit's end.
I'm not understanding the requirement here. Do you want any random SOAP API? Surely that makes no sense. Does your customer want you to consume their SOAP service or asking you to provide one to them?
1. Use the UNC path 2. Mapped drives are per user. I'd expect that you can map one for whatever user IIS is running as. 3. Create a symlink
Yeah, I'm not saying it's your fault. That's pretty bad of upper management to do that. Sounds like someone in upper management spoke to someone at a party who was bragging about his Linux docker containers while slurping down the caviar. Azure web apps are very scale-able, but depends on your situation if you can't use azure. I'm all serverless, so much less of a headache
Or when the provider handcrafted their SOAP service in PHP along with handcrafted WSDL that is faulty. This is where something like SimpleSOAPClient steps in. There are people out there who still manually build strings for the SOAP envelopes. Tooling is king, but some remain rebels.
Spam bot keep blocking me
Use .net core
Goddammit... 
I created something, you may be able to get some use out of, at GitHub.com/danielandastro/datadrop sorry for link, mobile here
The usual CRUD applications need access for writing as well so read/write permissions would be necessary. In this case, are there measures to prevent unauthorized modification of data if connection string is public? Maybe encrypt the connection string or some parts and the application could decrypt it.
I am looking for one to consume so I can get familiar with SOAP in general. Their service isn’t well documented and figured I’d get head start probing someone else’s service before I am forced to work with the customer’s. 
Heidi SQL
https://www.GitHub.com/danielandastro/datadrop
Create an `Attribute` and use reflection to get it. I've made a similar system myself. A simple example: [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = false)] public class CommandAttribute : Attribute { public string Aliases { get; set; } public string Description { get; set; } } Now, attach the attribute to a "command" method: public class MyCommands { [Command("dostuff|do|ds", "Writes {text} to the console.")] public void DoStuff(string text) { Console.WriteLine(text); } } Now, to use reflection: var myCommands = new MyCommands(); var myType = myCommands.GetType(); var methods = myType.GetMethods().Where(x -&gt; x.GetCustomAttribute&lt;CommandAttribute&gt;() != null); foreach (MethodInfo mi in methods) { var attr = mi.GetCustomAttribute&lt;CommandAttribute&gt;(); var aliases = attr.Aliases; var description = attr.Description; Console.WriteLine($"{aliases} - \t\t" + description); } Output: dostuff|do|ds - Writes {text} to the console. Hope this helps.
There are a couple of good videos on "channel 9" which show unit testing probably a good place to get started about testing in C#
Result to Franz Bouma's Bencher using the Expression-Based queries. &amp;#x200B; Results per framework. Values are given as: 'mean (standard deviation)' ============================================================================== Non-change tracking fetches, set fetches (25 runs), no caching \------------------------------------------------------------------------------ Handcoded materializer using DbDataReader : 171.24ms (7.01ms) Enum: 1.22ms (0.09ms) Tortuga Chain, Compiled v1.2.6553.39558 : 188.58ms (11.18ms) Enum: 1.30ms (0.25ms) LINQ to DB v2.0.0.0 (v2.0.0) (compiled) : 192.68ms (3.82ms) Enum: 1.28ms (0.32ms) LINQ to DB v2.0.0.0 (v2.0.0) (normal) : 193.39ms (4.13ms) Enum: 1.23ms (0.24ms) RepoDb (RawSql) v1.6.4.0 : 193.95ms (7.13ms) Enum: 1.40ms (0.19ms) Handcoded materializer using DbDataReader (GetValues(array), boxing) : 196.60ms (14.96ms) Enum: 1.45ms (0.12ms) LLBLGen Pro v5.4.0.0 (v5.4.1), Poco typed view with QuerySpec : 197.81ms (7.51ms) Enum: 1.25ms (0.12ms) LLBLGen Pro v5.4.0.0 (v5.4.1), Poco typed view with Linq : 198.91ms (3.35ms) Enum: 1.17ms (0.04ms) LLBLGen Pro v5.4.0.0 (v5.4.1), Poco with Raw SQL : 199.27ms (9.19ms) Enum: 1.32ms (0.04ms) PetaPoco Fast v4.0.3 : 200.14ms (7.61ms) Enum: 1.23ms (0.11ms) RepoDb (Poco) v1.6.4.0 : 201.75ms (9.99ms) Enum: 1.30ms (0.11ms) &amp;#x200B; Memory usage, per iteration \------------------------------------------------------------------------------ Handcoded materializer using DbDataReader : 15,163 KB (15,527,336 bytes) LLBLGen Pro v5.4.0.0 (v5.4.1), Poco with Raw SQL : 15,167 KB (15,531,776 bytes) RepoDb (Poco) v1.6.4.0 : 15,168 KB (15,532,640 bytes) RepoDb (RawSql) v1.6.4.0 : 15,169 KB (15,533,744 bytes) PetaPoco Fast v4.0.3 : 15,204 KB (15,569,016 bytes) LINQ to DB v2.0.0.0 (v2.0.0) (compiled) : 15,976 KB (16,360,048 bytes) LINQ to DB v2.0.0.0 (v2.0.0) (normal) : 15,977 KB (16,361,080 bytes) Tortuga Chain, Compiled v1.2.6553.39558 : 16,164 KB (16,552,936 bytes) PetaPoco v4.0.3 : 21,107 KB (21,614,576 bytes) Dapper v1.50.5.0 : 30,800 KB (31,539,712 bytes) &amp;#x200B; Non-change tracking individual fetches (100 elements, 25 runs), no caching \------------------------------------------------------------------------------ Handcoded materializer using DbDataReader (GetValues(array), boxing) : 0.33ms (0.02ms) per individual fetch Dapper v1.50.5.0 : 0.34ms (0.04ms) per individual fetch Handcoded materializer using DbDataReader : 0.35ms (0.05ms) per individual fetch RepoDb (RawSql) v1.6.4.0 : 0.35ms (0.04ms) per individual fetch Massive using dynamic class : 0.44ms (0.06ms) per individual fetch ServiceStack OrmLite v5.0.0.0 (v5.1.0.0) : 0.44ms (0.01ms) per individual fetch LLBLGen Pro v5.4.0.0 (v5.4.1), Poco with Raw SQL : 0.46ms (0.03ms) per individual fetch RepoDb (Poco) v1.6.4.0 : 0.47ms (0.06ms) per individual fetch &amp;#x200B; Memory usage, per individual element \------------------------------------------------------------------------------ Handcoded materializer using DbDataReader : 08 KB (8,192 bytes) RepoDb (RawSql) v1.6.4.0 : 10 KB (10,640 bytes) Handcoded materializer using DbDataReader (GetValues(array), boxing) : 16 KB (16,384 bytes) Dapper v1.50.5.0 : 16 KB (16,384 bytes) ServiceStack OrmLite v5.0.0.0 (v5.1.0.0) : 16 KB (16,384 bytes) LLBLGen Pro v5.4.0.0 (v5.4.1), Poco with Raw SQL : 16 KB (16,384 bytes) Massive using dynamic class : 24 KB (24,576 bytes) RepoDb (Poco) v1.6.4.0 : 24 KB (24,576 bytes)
Here's an idea for what to implement: The most annoying part about **any** library that provides expression-translation is that you only see at run-time if something can't be translated. Why not add a Roslyn-Analyzer that will check the expressions and tell you at design time if something can't be translated?
Nice! Never used that analyzer yet, will surely use that on total support of IQueryable. I used a usual Expression&lt;Func&lt;TEntity, TResult&gt;&gt; debugging (VS default), so not all scenarios are supported but it managed to include most expressions. Of course, I first write unit test for SQL Statment field expression before writing the parser.
I've read that book as well. The only place where I remember finding it being dated was an example of a static DateTime construction, that would not work in parallel unit tests. I recently read Functional programming in C# by Enrico Buonanno, which gives excellent examples on how designing functionally can help ease unit testing. Personally I've learnt a lot about unit testing by contributing to Fluent Assertions, which is a assertion framework for C# that helps in writing readable unit tests and provide descriptive failure messages. 
If your favourite library that you use and like interface of is opensource/github:ed, check out their unit tests. In my experience books don't get real life unit testing and while they're inspiring to read, they're not all that actionable. Real life examples and techniques will be most useful.
This FTW 
You never want to use mapped drive paths in your program. This is because drive mapping is done on the user account level in active directory, meaning 2 users can both have a networked M:\ drive that go to completely different places. In order to access networked storage, you should use the UNC (Universal Naming Convention) path to the server. A UNC path is made up of the host name of the destination machine, followed by the logical file path to the destination folder, they look like this ` \\StorageServer\File Path ` The \\ in the address tells the computer the destination is on the network not local. Additionally you can replace [StorageServer] with the IP address of the destination server as well. The last 2 things I want to mention are very important, if you read nothing else, at least read this. When defining your UNC path in your program, make sure to declare it as a `Literal String` so that you don't have to escape the back slashes. Literal strings are declared like this `string Path = @"By putting the @ symbol before the opening quote I'm able to use characters like \ without escaping it with another back slash."` The second thing, and I can't stress this one enough, is make sure Network file sharing is enabled on the destination server, otherwise you will get access denied errors. Hope this helps. 
I've used this port of Roaring bitmaps to create indexes: https://github.com/Tornhoof/RoaringBitmap . 
I don't know if it will work, but try this package: https://www.nuget.org/packages/MySqlConnector/ 
Not only are you a dumbass nigger but you cant even code correctly. Hang yourself
Because it's fun :)
&gt;Do you want any random SOAP API? Surely that makes no sense. OP wants any random SOAP API to get a basic idea how consuming SOAP works in .NET, not to _actually_ consume it.
Something like this, perhaps? public class Foo { public void Bar(int i) { } public void Bar(double i) { } } var foo = new Foo(); var methodName = "Bar"; var methods = foo.GetType().GetMethods().Where(o =&gt; o.Name == methodName); foreach(var method in methods) { var parameters = method.GetParameters(); Console.Write($"{method.Name}("); Console.Write(string.Join(",", parameters.Select(o =&gt; $"{o.ParameterType} {o.Name}"))); Console.WriteLine(");"); }
Sure, sure. Here's a code snippet from some old code (that's in production, it works) that finds types by string names. I don't think it's Core compatible, though, because of the use of AppDomain... It's been a while, though, so maybe that supported now, or there's likely another way to do the same thing. static private readonly LockFreeConcurrentDictionary&lt;string, Type&gt; _types = new LockFreeConcurrentDictionary&lt;string, Type&gt;(); static public int FoundTypes =&gt; _types.Count; static public Type FindType(string typeName, string assemblyName = null) =&gt; _types.GetOrAdd(typeName, t =&gt; FindTypeInner(t, assemblyName)); static private Type FindTypeInner(string typeName, string assemblyName) { var type = Type.GetType(typeName); if (type != null) return type; try { var assemblies = AppDomain.CurrentDomain.GetAssemblies(); //To speed things up, we check first in the already loaded assemblies. foreach (var assembly in assemblyName == null ? assemblies : assemblies.Where(a =&gt; a.GetName().Name == assemblyName)) { type = assembly.GetType(typeName); if (type != null) return type; } if (assemblyName != null) { var a = Assembly.Load(assemblyName); type = a.GetType(typeName); if (type != null) return type; } var loadedAssemblies = assemblies.ToList(); foreach (var loadedAssembly in assemblies) { foreach (AssemblyName referencedAssemblyName in loadedAssembly.GetReferencedAssemblies()) { var isLoaded = loadedAssemblies.Any(x =&gt; x.GetName() == referencedAssemblyName); if (!isLoaded) { try { var referencedAssembly = Assembly.Load(referencedAssemblyName); type = referencedAssembly.GetType(typeName); if (type != null) break; loadedAssemblies.Add(referencedAssembly); } catch { //We will ignore this, because the Type might still be in one of the other Assemblies. } } } if (type != null) break; } } catch (Exception exception) { throw; } if (type == null) { throw new ArgumentException("Type '" + typeName + "' cannot be found.", "valueType"); } return type; } 
I LOVE lucene.net. Everything works so smoothly. There's advanced ways to manipulate it but it's very powerful without those parts. The query language is simple but powerful. My only complaint is that you have to trick it into doing just a negation. You're not allowed to say 'give me everything that doesn't match xyz'. You have to add an "everything" inclusion with an xyz exclusion. not allowed: -title:xyz work around: +*:* -title:xyz
Yeah, echo. Why are you using mono and not .net core??
Lucene.net is love, life and shrek. I already have in plan to use It but is for full text search not for "strict" search (ex: find a datetime between two)
WPF is what you are looking for. Have a look at [AngelSix](https://www.youtube.com/playlist?list=PLrW43fNmjaQVYF4zgsD0oL9Iv6u23PI6M) WPF series it has very advanced level techniques to do animations.
I'm not sure animations are what you should be looking for. I've seen and used great GUIs done completely in WinForms with no animation what so ever. If you want to make your GUIs more "flashy", then maybe animations will do it, but that doesn't necessarily make the user *experience* any better. If you really want to improve your UIs, think about the true usability of it first. How well does the interface convey information, data, or state? How intuitively can a user perform a task? Would they be able to figure it out quickly or would it take some time and additional resources? How efficiently does the interface allow the user to get those tasks done? Does it take a click and a drag, or does the user have to click through some dropdown menus with a right click here an there to finish the task at hand. Any interface, can be "dolled" up by making it more visually pleasing with nice colors, gradients, drop shadows, animations, what have you. But if the underlying interaction is the same, then eventually the nice visuals will wear off and you're left with the actual functionality. Improving that functionality is what really improves the interface, and that's what allows users to ramp up quickly and keeps them using your software because underneath any glitz and glam, it just works. As for transitioning to WPF understand that it is a completely different development approach, and while WPF allows you to create slightly prettier interfaces out of the box, it takes a lot of time and effort to produce really slick interfaces. All that being said, WinForms is essentially a dead technology.
Unit testing is probably the most difficult thing to learn because nobody seems to address long-term strategies. I've gone through a lot of painful trial and error and still don't feel like I have the answers, but this is where I am now. The best long-term approach is to define a unit as an entire business logic concept, no matter how many classes or methods are involved. Otherwise the unit testing code will constrain your production code (hamper refactoring). Imagine if you did test driven development and developed until you had one huge mega method doing everything except 3rd party integration (databases, APIs). Then all your unit tests would call that method. Next you refactor the code to something maintainable, likely creating classes and methods. Your unit tests wouldn't change at all, as they shouldn't. There may be some shared logic that can become its own unit because it requires testing that extends beyond the main unit you programmed. This usually happens when another unit is developed that uses and extends something from the original unit. I'm not saying you'd necessarily do test driven development this way, just wanted to demonstrate why you'd do unit tests this way instead of other popular methods (mock everything, tiny units, etc.).
Black box style integration testing brings the most business value for the effort invested. I do believe in unit tests with good coverage (&gt; 90%) for shared libraries as the complexity is lower (or at least constrained) and the functionality is typically unchanged by changing business logic. Moreover, when you're debugging you really want to be able to rule out your libraries and solid coverage enables that trust. You won't find a single source of truth on testing because it is highly contextual and even subjective in many ways. A pragmatic approach is always best.
If you just want something simple, use a for loop to iterate over each 'row' and sum every column in that row e.g. for (var row = 0; row &lt;= numArray.GetUpperBound(0); row ++) { var rowSum = 0; for (var column = 0; column &lt;= numArray.GetUpperBound(1); column ++) { rowSum += numArray[row, column]; } Console.WriteLine($"The sum is {rowSum}"); } * If you want your code to be readable, both by others and yourself coming back to it a year from now, drop the single letter variable names in favour of something more descriptive i.e. 'row' and 'column' instead of 'i' and 'j'. * Don't hard-code the bounds checks, use the GetUpperBound method to ensure changes to the array dimensions don't break your code. Further to this, I'd probably create some helper methods to do the heavy lifting for me and keep the code readable e.g. An extension method to calculate the sum of a row (preconditions omitted for brevity). public static class ArrayExtensions { public static int RowSum(this int[,] array, int row) { var rowSum = 0; for (var column = 0; column &lt;= array.GetUpperBound(1); column++) { rowSum += array[row, column]; } return rowSum; } } ...and then the original for loop can be simplified to something like this... for (var row = 0; row &lt;= numArray.GetUpperBound(0); row ++) { Console.WriteLine($"The sum is {numArray.RowSum(row)}"); }
UNC path and use impersonation 
Thank you so much for this, okay I understand this, thank you again
Go for it. There only other option I can think of would be to offload this legacy to a vendor product, framework or language that natively supports it (if you can find one). Kind of like a sidecar.
WPF, but use Blend to do animations. Afaik visual studio lacks the functionality and you would need to do them by hand. Here's a good tutorial. If youre interested about wpf watch the whole series. https://m.youtube.com/watch?v=gfjBOFg-vvo&amp;index=19&amp;list=PLBDF977B2F1DAB358&amp;t=0s 
Yes! Do some actual HCI testing before even considering writing any more code. In general programmers under-value HCI testing because it so heavily depends upon psychology. But it is the only way to actually improve user experience. Code is easy, but you gotta know what is wrong first.
Check out Bob Martin's videos at cleancoders.com. or Kent Beck's excellent book Test Driven Development by Example. Most of the best resources use java for the example code, but it's easily translatable to c#
Thanks
Mark Seeman has some very good [blog](http://blog.ploeh.dk/tags/#Unit%20Testing-ref) entries on unit testing. As does [Phil Haack](https://www.google.ie/search?q=unit+testing+site%3Ahaacked.com&amp;oq=unit+testing+site%3Ahaacked.com&amp;aqs=chrome..69i57.10216j0j4&amp;client=ms-android-om-lge&amp;sourceid=chrome-mobile&amp;ie=UTF-8). Disclaimer: Both of those resources could be a bit dated but they still have quality content. [Microsoft](https://docs.microsoft.com/en-us/visualstudio/test/unit-test-basics) has some good starting points as well although I think they're trying to push Live Unit Testing (which is currently only available as part of Enterprise &amp; not as good as NCrunch). I'd also strongly recommend getting [NCrunch](https://www.ncrunch.net/) - it's a concurrent unit testing til for Visual Studio that's indispensable for unit testing / TDD, especially when you're starting out as it massively shortens the feedback loop. This makes writing tests much more fun and transparent. The coverage markers show you which lines of code are covered/uncovered which makes me want to aim for 100% coverage everywhere. This changed my approach to design and helped me to design software which is more testable &amp; naturally encourages TDD. I'd suggest getting your hands dirty &amp; approaching it positively. It's hard to get started, but once you get more familiar with it, the easier it becomes. And with tools like NCrunch it actually becomes enjoyable. On a practical level - I'd suggest remembering: 1. The simple mantra _[Arrange, Act, Assert](https://docs.microsoft.com/en-us/visualstudio/test/unit-test-basics)_ - this is the most basic pattern for a unit test. 2. Too many Asserts in a single unit test is a code smell - it suggests that you're trying to test too much in a single test. This could mean you're testing the wrong thing, or the code your testing is poorly designed/implemented. It's called "unit" testing as we want to test small blocks of code with other small blocks of code. Don't worry that there's stuff you don't know about unit testing, you'll learn it as you go along. I've been doing TDD for close to 10 years and still learning stuff all the time. Get started. Know and accept that you will make mistakes. Learn from them. Good luck! 
I love fluentassertions! I push it at every job I am at!
Think you have missed the core of unit testing then. The test should break if you change the code in that way.
Just index the DT as a numeric. Numeric ranges work as you'd expect. As with every store, you just need to use the right pattern for the queries you need
GUI maybe? Idk
.net core in action is good for you. This is an entry-level book for .net core developer. It also introduces building a REST endpoint with [ASP.NET](https://ASP.NET) Core. [https://www.manning.com/books/dotnet-core-in-action](https://www.manning.com/books/dotnet-core-in-action) Then, you can decide what you need to do more. Here is the roadmap from the book: &amp;#x200B; This book has 12 chapters: &amp;#x200B; Chapter 1 introduces .NET Core and .NET Standard—what they’re for and why you should learn them. Chapter 2 gets you started creating .NET Core applications. Chapter 3 explores the MSBuild build system and how to edit project files. Chapter 4 covers unit testing with xUnit. xUnit documentation online tends to be scattered, so this chapter will be useful as a reference later on. Chapter 5 introduces working with relational databases, a common thing for developers to do. .NET Framework developers familiar with relational databases may want to move on to chapter 6. Chapter 6 covers object-relational mappers (ORMs). It introduces two different types of ORMs: Dapper, a micro-ORM, and Entity Framework Core, a full-featured ORM. Chapter 7 explores building a REST endpoint with [ASP.NET](https://ASP.NET) Core, as well as how to make HTTP calls to other services. Chapter 8 explores different options for debugging, from IDEs to command line. Chapter 9 introduces performance testing with xUnit.Performance and profiling with PerfView. Chapter 10 covers the internationalization process and how to make applications world-ready. Chapter 11 looks at how to build .NET Core libraries and applications that rely on framework- or operating system–specific constructs. Chapter 12 covers how to prepare your .NET Core library for release and distribution. The appendixes contain specific details useful for writing .NET Core applications, such as target framework monikers and what’s in each version of the .NET Standard.
Hi, Search for the WSE3.0 from Microsoft, it's an MSI File. This contains the Web Service Extensions from Microsoft for .NET. With that you can generate WS-Security Headers. 
Absolutely this. I'd add that forcing the user to wait for an unnecessary animation to complete before letting them get on with whatever they're trying to do makes the UI worse, not better.
You can use the modulo operator (`%`, gives the remainder of a division) and division combined, it's a little more advanced to understand this though, but if you step through it with the debugger you'll understand: ``` var sum = 0; var dim0 = array.GetUpperBound(0); var dim1 = array.GetUpperBound(1); var totalLength = dim0 * dim1; for (var i = 0; i &lt; totalLength; i++) sum += array[i / dim0, i % dim1]; Console.WriteLine(sum); ```
The too many asserts rule only works if you think of logical asserts. Don't try to use this rule for actual assert statements or you'll drive yourself crazy. For example, when testing the state of an object you'd have at least N asserts (1 for each property tested) but the logical assert is the object was created successfully.
You might try StackOverflow, most of us are on the toilet reading this on our phones 
Your problem is not with entity framework. When you use a webmethod the result is serialized with XmlSerializer and there is a problem with the design of class that it is not serializing. Either create a DTO/Model outside the Entity Framework and map to it or make find out why your entity will not serialize. 
Like the other reply, I'm out on mobile so I might not be as much help as I would be with VS open in front of me. First, the purpose of marking a method on an aspx page with WebMethod is to allow that method to be called using ajax in the browser. For sure it's still something you can call directly because it's simply a method in your class. But generally JavaScript is going to be used to call the method from a browser. Without seeing all of whatever code you're using to create the "webservice" object, we're not going to be able to help you much. You should still be debug everything in your solution, even if you have multiple startup projects. Look up [WebMethod](https://docs.microsoft.com/en-us/dotnet/api/system.web.services.webmethodattribute?view=netframework-4.7.2) and the common ways to use SOAP web services (assuming that's the technology you want to use). Personally if I'm using .Net and an IIS webserver, I'd be using WebApi and REST as the web service stack and either .Net MVC/Razor pages or an Angular SPA for the front end client. 
`for(int i = 0; i &lt; 5; i++)` `{` Console.WriteLine(num1 + 5); } &amp;#x200B; [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/for](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/for) &amp;#x200B; &amp;#x200B;
Thanks &lt;3
Not a C# developer but in Java we have JavaFX and its quite similar to WPF in many way. Having shit tons of books as reference helps a lot. Just skip over to parts that you need to implement your idea. Also, when designing UI ask yourself; would people be bothered staring at it? Bad UIs leave sour taste and scars people impression ("if it looks stupid most of the time it wont do the job"). A fine example of this is Java IDEs in general. At this moment IntelliJ IDEA is the only Java IDE that looks ... civilized. That's UI. Next, UX. More things needs to be considered; mostly related to how to place yourself as end-user. 
One could argue that asserting the state of more than one property could be an indication that the code under test may be doing too much work, mutating too much state in one call &amp; that all properties except one (the one under test) should remain the same. I get your point though &amp; the easy "violation" of this principle is testing constructors of immutable types with publicly exposed members (think anemic types/public properties/etc.). I do this. Wouldn't want to scare OP with too much academics over it though. Just a general, Pareto principle, guideline to help OP stay on track and gain confidence with unit testing. There will always be exceptions to the rule. 
If the method is in an \`ApiController\` doesn't it auto serialize out to JSON?
That `DynamicProxies` thing you can turn off in the constructor of your `DbContext` class with: `this.Configuration.ProxyCreationEnabled = false;`
How would you make complex queries with WHERE conditions using Dapper? Like for example a paging/sorting/filtering logic for some UI grid.
 for(int i = 0; i &lt; 5; i++) { Console.WriteLine(num1 + i); } FTFY
Depends on how different your data is per query. If every user is querying for the same data and the data returned doesn't need to be updated every single query (and rather a matter of minutes is fine) then you could do some basic in memory caching. Redis would work well here, but if you want to be lazier then that (and are already using entity framework) I like EntityFrameworkPlus since you can just tack on a simple ".FromCache()" and set how long the cache will persist for.
If your data is really different per query, let's say you have a ton of different filters, then you can still do some form of in memory caching, you just need to figure out some common filter combinations and cache those results. (The from there return the common filtered results, but in code filter down the result set like how you would query the database). Note: You would need to build some sort of code to keep this in memory cache from going stale.
The second variant is how task-based programming used to be done in older .NET versions, `async`/`await` was created so you wouldn't have to write ugly `ContineWith` callback chains anymore. There generally isn't any reason to use the second method unless you have a good understanding of task internals and are trying to fine tune the continuation behavior for some reason.
your for loop is fucked up and the content is not relevant to the question you FTFY nothing fam
You need to read up on what EF does to make things like lazy loading work— it makes proxy wrapped versions of your base model classes. 
To avoid repetition, we usually use loops or iteration statements. You can read about them in the [docs](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/iteration-statements) In this case, it is best to use the ‘for loop’ as you’re trying to increase a value by one each iteration. So the code for that would be (as mentioned above): {for (int i = 1; i &lt;=5; i++) { Console.WriteLine(num1 + i) }} We wrote {i &lt;=5} instead of {i &lt; 5} because if it was the latter, the last statement in your code {Console.WriteLine(num1 + 5)} wouldn’t be included, as the loop would stop once *i is equal to 5*. 
https://bevacqua.github.io/dragula/ 
You can actually save yourself the forloop. Call query.ToList() will give you your items in a List. 
If you find you're running the same exact query verbatim, time and time again, then it would be easier and more efficient to convert them into parameterized stored procedures rather than build a whole new backend to handle database work. Once you've built your queries up as stored procedures and run them a number of times, you will also have the ability to run some analytics and optimization over it, go improve its speed and reduce its resource cost overall. With regards to your concerns for access control, I'll admit they are well founded in some ways, as account sharing is never a good option. However, the simplest way to minimize this concern, would be to create separate accounts for your database, using the separation of duties principal. One account serves as your DB master/owner/creator etc. for administrative purposes, while the second service account is simply given permissions to say, read and update from N tables. If you have any questions let me know. 
This looks like webforms
What does HCI stand for?
Are you aggregating the data? Summing, averaging etc.? If so, you can create a data mart that represents the data your end-users want to see, and populate that using a stored procedure or whatever service you choose. This would save you a significant amount of query time. Unless however, you're simply displaying a one-for-one representation of the records. In that case, I would agree with many of the others that a good way to overcome your time constraints is caching. 
Okay awesome, good to know. Thanks :)
Return new Jsonresult(yourList);
Let me explain a bit more my setup: There are different accounts: Me and the system maintainers have an all access account that is not given away for obvious security reasons. The desktop apps are sent to universities with different sql accounts (There's a different account for each university, our uni has access to all data, other unis have access to the data of their countries for legal reasons). My fear is for example: if bob who is a researcher at country x gives his account to Alice, who is a researcher at country Y, she will be able to access data from country X and possibly cause my university to get sued if I do not have proof it was her. I wanted to use separate accounts authenticated against our backend as a sort of DRM so even if bob gave his account, I would be able to see that it does not match the software I sent him, and even if he did share his installer, I would have a paper trail to protect us legally.
I disagree with renaming them. If I see i and j I assume they are loop variables. Calling them something else would make the code take a bit longer to analyse for me. But that just my opinion.
Sure. I think any non-functional points like coding style or naming will always be contentious. I work in environments where they have explicit style guides preventing single letter variable names and advocate something similar to the 'Use Intention-Revealing Names' advice from Uncle Bob's "Clean Code" book. YMMV.
I absolutely agree with that. With the exception of loop variables. But it's completely opinionated as you say.
I only heard about Shouldly recently and have only glimpsed at their docs for about a minute and they seems to be a large overlap. In version 5 Fluent Assertions got a similar feature to Shouldly regarding including the variable name in failure message. The reason for `.And` or `.Which` in Fluent Assertions is to support chaining on verified assertions. E.g. `obj.Should().BeOfType&lt;string&gt;().Which.Should().HaveLength(42);`
I see, thank you for the additional details, based on that I can make a couple of suggestions on how to handle this sticky situation. * Option 1) Device registration - Since every university has their own unique login, you could require them to register each device they plan to use with your app by using the devices unique MAC address. When your application launches and the user attempts to login, your application can pull the MAC address of the machine and check if it's registered with the university account its logging into. However, this could be easily bypassed by using a remote connection to a registered machine. * Option 2) IP Geo-Location Filtering - This option is similar to the previous, however it requires a bit less effort on your end. Every device that accesses the internet has a front facing public IP address, that address is associated with a particular geographical region based on the ISP that provides it. When a user starts your application you could run a Geo-Location check on their public IP address, and restrict account access based on the return value. This method can be beaten even easier than the last one however, by using a VPN, Proxy, or Address Spoofing. * Option 3) Dual Factor Authentication (DFA) - I feel like this one speaks for itself really, but for brevity sake I'm gonna explain it anyway. In its simplest form, DFA is going to be far my effective than either of the previous 2 options as, not only does the user have to provide credentials to login, but they also have to use a secondary physical authenticator as well. This can be anything from a KeyFob, to a SmartCard, or Hard Token*. Beating DFA is hard, but it is doable as it would require Alice to physically send her authenticator to Bob in order for him to see her data. The biggest drawback to this option however, is the cost associated with implementing this system. The only thing I can't stress enough is that **CELL PHONES SHOULD NOT BE USED AS AN AUTHENTICATOR** they are too insecure, are highly targeted for theft, and easily lost/broken. * Option 4) Multi Factor Authentication (MFA) - Taking option 3 a step further, you could implement MFA, where in addition to requiring the login credentials and secondary authenticator, you also run IP Geo-Location or device registration filtering. This is probably the best option in terms of security (see note below) and is nearly impossible to beat. However, as with option 3, cost is a big factor here, in addition to any development time that would need to be invested in building the device registration or Geo-Location systems. * About Hard Tokens - Hard tokens are devices that look like flash drives, however the contain heavy encryption and contain the require keys for accessing secure material. While these devices, for the purposes of this post, are considered DFA tools, they realistically are MFA tools. The reason for this is, in addition to providing a physical secondary authenticator, it also provides device registration (only one machine can accept and use the token), and Geo-Location filtering. For this you're probably going to want a Fips (Federal Information Protection Standard) 140-2 token with a Level of Assurance (LoA) of 2 or 3. If you're interested in learning more about DFA/MFA/Hard Tokens you can read [this](https://blog.gemalto.com/security/2016/03/22/ultimate-cheat-sheet-on-strong-authentication/) blog post by Gemalto Safenet, a leader in MFA and identity access management solutions. More information about FIPS 140-2 can be found in part 2 of the above blog post [here](https://blog.gemalto.com/security/2016/04/14/ultimate-cheat-sheet-on-strong-authentication-2/) Gemalto Hard Tokens can be found [here](https://safenet.gemalto.com/multi-factor-authentication/authenticators/pki-usb-authentication/) **NOTE: I am not affiliated with Gemalto in any way shape or form. I have dealt with them in the past as they are one of the few vendors approved by the federal government for being NIST/DFARS compliant. Their products aren't the cheapest by any means, but you absolutely get what you pay for. ** Other useful stuff: [NIST 800-63-3](https://pages.nist.gov/800-63-3/) Digital Identity Guidelines - I would specifically suggest reading section B on authtication, but the entire document is worth a read. [NIST 800-171](https://csrc.nist.gov/publications/detail/sp/800-171/rev-1/final) Protecting Controlled Unclassified Information in Non-Federal Information Systems - These are the IT/Security compliance requirements for privately held government contractors, while you aren't a contractor, given the legal red tape you're dealing with, it may be worth giving this a read and possibly implementing some of the security controls. IMHO, these guidelines, if followed by every organization, would drasoxly reduce security issues. But that's none of my business really. I know this was a massive wall of text, so I'm sorry for that, but I hope it's helpful and provides you with the insight needed to move forward. If you have any other questions or need clarification on anything, let me know and I'll see what I can do. 
It came with the newest major version in January
so long as _collection is a thread-safe collection type, you should be fine. https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentbag-1?view=netcore-2.1
This is the only place where the collection is being accessed. Nothing else is actually trying to access this collection until the task is finished. Would I need a thread safe collection then as well?
Yes you do. Threads aren't about places of code; the same code can be run in multiple threads at the same time. For each task returned by `Task.Run()` another thread may be used. So let's say you have 12 items to add: this will result in 12 calls to `_collection.Add()` in up to 12 different threads at the same time.
For my own unit tests I only regard that as a nice to have feature. If it's needed to identity the failing assertion, you might have to many assertion statements in a single test. It could also be a sign of non-idiomatic use of the assertion framework. I did a [writeup](https://fluentassertions.com/tips/) on how idiomatic usage improves the failure messages. I'm all in for the fluent syntax and improved failure messages. 
It seems like the number of assertions stays the same they are just written in a more complex way compared to a bunch of assertions + variable name/expression
Honestly man I haven't really used Dapper aside from making relatively-small fixes to others' code. I will say though I don't think it's any more fickle than say doing a SELECT * from the app code to the DB, and then doing LINQ with things like .Contains like you mentioned. StackOverflow can help you out more than I can. 
Yeah I mean fair point, since I posted that it was determines the issue lies not with EF but with the way he's deserializing. Anyway being on the toilet, I was not able to do more than eye the code, the non-formatted, all-one-color code. That said, I think I made some fair points about EF/ORMs. a) Honestly man I don't know if I would want to be working with a "dev" that only knew C#. As though C# is more-general and widely-known than SQL. I work with every RDBMS you listed save Oracle (thank God), and except for some niceties you'd see in complex queries, the syntax is mostly the same. The real complexity IMO comes from knowing the RDBMS, not its flavor of SQL. Things like "Postgres doesn't have stored procedures" (well, as of like a couple of weeks ago it does), and "MySQL stored procs don't support optional parameters". But of course it's rare to be working somewhere that uses multiple RDBMS solutions. And anyway when something inevitably goes wrong with EF, I wan't the dev to be able to interact with SSMS to try to gather troubleshooting info. b) EF's greatest strength is also its greatest weakness. It's like Automapper. It's a great idea in theory, but in practice it's sometimes easier to just write custom mapper methods/functions that you *know* will always work. Pros and cons man, we could argue all day but we're both right. Agree to disagree as they say... 
Where do we find the project? I’d like to look into it. Thank you!
Why would you keep posting this when it keeps getting removed as spam?
I did a little bit of investigating into assertion libraries recently and I preferred Shouldly on a couple of fronts, but the variable and method names didn’t seem to pull through in .Net core and the github repo didn’t seem as active as FluentAssertions. They are very similar, but FluentAssertions seems to edge it out for me (e.g. maturity, documentation, extension points, momentum)
That's good to know. When I was writing WinForms (2006), there wasn't any talk of MVP or any frameworks that could help you with that. Thanks for the update.
This is what I ended up doing, Thank you guys so much int row1 = 0; int row2 = 0; int row3 = 0; int total1 = 0; int total2 = 0; int total3 = 0; while (row1 &lt;= 2) { total1 += numArray\[0, row1\]; if (row1 == 2) { Console.WriteLine("The sum of row 1 is {0}", total1); Console.ReadKey(); } row1++; &amp;#x200B; } while (row2 &lt;= 2) { total2 += numArray\[1, row2\]; if (row2 == 2) { Console.WriteLine("The sum of row 2 is {0}", total2); Console.ReadKey(); } row2++; &amp;#x200B; } while (row3 &lt;= 2) { total3 += numArray\[2, row3\]; if (row3 == 2) { Console.WriteLine("The sum of row 3 is {0}", total3); Console.ReadKey(); } row3++; &amp;#x200B; }
Dapper? lmao that's almost non-existent "here" people use either EF / or nHibernate...
All I can do is speak from my own experience!
Just a bit of feedback. 1:20 was just you typing text that took 5 seconds to read. Consider starting the recording after you've typed it up perhaps? 
Removed: Spam.
If the purpose of the task is to create `Customer` objects, then instead of using a collection that supports concurrency, I would suggest to have the tasks return a collection of what they created and then aggregate the returned values into your final collection. That way the original collection is not affected until all tasks have completed their work which is more stable and doesn't need a special collection. Something like: ``` var tasks = new[] { Task.Run(() =&gt; LongRunningMethodCustomers(parameter)), Task.Run(() =&gt; LongRunningMethodCustomers(parameter)), }; await Task.WhenAll(tasks); var results = tasks.SelectMany(t =&gt; t.Result); _collection.AddRange(results); ``` Where `LongRunningMethodCreatingCustomers` is a method that returns a new collection of customers. 
I agree! Maybe different countries have different “most popular ORM”s? 
Human Computer Interaction. It's the field of study that studies how humans interact with computers. This includes improving their experience. Of note is that with this field, the concern is with how to change the technology to fit what the people's need, whatever it is. Not how to change the people's view of it.
To answer the question you didn't ask, EF generates proxy classes for you behind the scenes. That's where the `System.Data.Entity.DynamicProxies.Location_FE9E38CE98E5C1E4D3AE77E81C4C8DA9DC3BECC73CEF7555D7B2A84790FDB413` class comes from. IIRC there is an option to disable it, but I do not know it offhand.
And before the inevitable, i know that page is in simple HTML, that was because when i made the site, i had no internet and therefore could not download the required packages to make an ASP site, but I will transition as soon as i sort out hosting
What page? 
Best solution IMO is to use Dapper.SqlBuilder for dynamic queries https://stackoverflow.com/a/39794873 I do agree that it seems quite fickle and wrong building up SQL manually in C# as if there's a mistake in the SQL it will result in a runtime error because it's not strongly typed. Also it's hard to test code that builds up SQL. 
Convenience?, Also the way it is designed makes it completely language and platform agnostic
It doesn't sound like convenience. It adds more overhead by integrating a third-party system.
There is a code and I will upload it today
_The dog did my homework_.
And adding resilience in case of network issues. And adding a fallback / error handling if this service is down. And storing the credentials to access the service somewhere (like.. settings). Using whatever configuration system my framework of choice provides is the easiest I can think of.
I think "people may not know how to use Entity framework" is a very poor argument not to use a technology. I think it may have -some- merit for a small library because it will less likely be maintained, but part of a job of a developer is to understand the technologies in a system they're working on. You'd have a very hard time if you only stuck with vanilla C#.
So, running multiple tasks in parallel is rarely a good idea. The overhead of creating threads, returning results, and waking up the calling thread usually for outweigh any gains in processor utilization. &amp;#x200B; These are the exceptions: When you have computations that take at least seconds to complete then you might consider running 4-8 at a time. Remember that most computers really only have 4-8 processors. When your worker threads spend a lot of time waiting on external events like database access, network queries, user input, web requests. Actually the last two are handled by Windows so forget those. So if you're hitting multiple web sites or databases to collect information then absolutely run many tasks. Otherwise, it's probably not worthwhile.
&gt; this also assumes good knowledge of T-SQL to whatever provider you're using. Using Oracle? MS-SQL? MySQL? PostGres? You're expecting your dev to know an entire SQL language over just knowing LINQ. Want to change providers? Re-write all of your services. You should at least have someone who knows SQL on your team, if you are working against a SQL database. And no, you don't need to rewrite your services when changing providers, unless you wrote shitty code. Just have an interface for a data client with an implementation for each DB-type. This is not hard and does not require any rewrites. &gt; That is huge in professional software when you have 100+ developers working on the same project You don't want 100+ developers changing your underlying data-model. If you are doing that, then you are doing something very wrong.
I couldn't find this article on here, so I thought I would share it as some of you may find it interesting.
I recommend reading [https://docs.microsoft.com/de-de/nuget/consume-packages/package-references-in-project-files](https://docs.microsoft.com/de-de/nuget/consume-packages/package-references-in-project-files) Especially the part that says to use `&lt;RestoreProjectStyle&gt;PackageReference&lt;/RestoreProjectStyle&gt;` if you are referencing Projects (e.g. NetStandard) that use PackageReference for restoring NuGet Packages. This allowed me to use a NetStandard2.0 DLL, with other NetStandard dependencies within a NetFramework4.7 Project. Without that, the dependent DLL would not be copied over and i'd get a Assembly.Load exception
I did not though.
Not to be that person that posts xkcd buuuuut https://xkcd.com/1053/
That's like saying you don't use a toaster to make bread, these days. What do you do then, write for loops for everything? Eek.
&gt;t the problem is not in the threads count. Loo If I do not use use Thread.Sleep in this case, the client is unable to connect. It checks if client has pending connections, if not then sleep for 35 mili seconds. 
That site's outdated. Have they never heard of AJAX?
Have you thought about using Docker? Will probably fix it by virtue of the fact that all the dependencies are pulled in when the image is created.
It can be 100x faster to do for loops sometimes :D [https://github.com/jackmott/LinqFaster](https://github.com/jackmott/LinqFaster) &amp;#x200B;
What an ignorant comment... LINQ is nice and all, but it has performance issues. So, for example, people that write games in C# using Unity3D are generally advised to *never* use it. And so they probably don't. But they might see an article like this and go "Hmm, that is kinda nice. Maybe I could use this for offline tools where performance doesn't matter as much". 
Wait until you check out F#!
There are some good C# project examples implementing clean architecture in [ASP.NET](https://ASP.NET) Core (although the architecture itself could be applied to WPF and other kind of apps). Have a look at this talk: [https://www.youtube.com/watch?v=\_lwCVE\_XgqI](https://www.youtube.com/watch?v=_lwCVE_XgqI) GitHub repository from the talk here: [https://github.com/JasonGT/NorthwindTraders](https://github.com/JasonGT/NorthwindTraders) (I'd prefer this one) &amp;#x200B; Another example: [https://github.com/ardalis/CleanArchitecture](https://github.com/ardalis/CleanArchitecture) &amp;#x200B; Additionally, if you really want to understand the subject this is an obligatory read: [https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164](https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164)
Any project, commented code with explainatation. I found bunch of examples but poorly written without comments. I would like to see good examples from experianced programmer about SOLID and design patterns.
Didn't say it wasn't.
LINQ \*is\* black magic, though. I use it all the time and still think so. Funny thing I've noticed about LINQ... I can write the most complex query imaginable and come back a month later and admire my own cleverness at writing such elegant code. But then five minutes later when I'm reading a very simplistic LINQ query a co-worker wrote I'm left scratching my head going "Wtf does this query do?"
eshoponcontainers is a great microservices reference 
Try typing the name of a university or college in github search. A lot of times you come by projects of students or teachers and they sometimes have class diagrams or others in the file system or in the Readme. Courses like "software architecture" or "software design" mostly requires students to really think about the design of their code so those can be helpful too.
I usually run stuff like that on its own thread. Makes everything much more simple.
Here is a UWP app from MS. The readme pretty much explains everything. https://github.com/Microsoft/InventorySample
I’d use a reactive timer and at each interval read the messages. Alternatively, I’d try to have a reactive TCP client and in the subscriber buffer the messages with a count of messages (e.g. 100) and an interval (e.g. TimeSpan.FromSeconds(5)).
Sounds too complex for your level. Adjust the features to you level and complete one app. Then add more functionality when you are done with the first part.
&gt;So, for example, people that write games in C# using Unity3D are generally advised to *never* use it. And so they probably don't. Sounds like the kind of dogma that will be repeated ad-nauseam, the reason why is quickly lost and beginner C# game developers will never truly learn what LINQ is other than "bad, do not use." However considering people easily mess up their LINQ queries in simple Entity Framework CRUD applications and get dogshit performance I can sympathize as to why they, as a general rule, want deferred executions far away from performance critical code.
It's not duck typing, I've been using Go a lot and their interfaces are all [implicitly typed](https://tour.golang.org/methods/10), but it's still strongly typed. I figured I could do it with reflection, but then I lose the compile time checks, that's why I'm asking. Thanks.
Very true, but often only worth it if profiling suggests that's a meaningful bottleneck for your code. Otherwise simplicity should win.
what if an abundance of linq or other choices are leading to an abundance of cache misses making the whole program slow, which doesn't show up in any particular function in the profiler? What if linq was fast like Java Streams or Rust Iterators? What if space ships did not need reaction mass?
I remember seeing this blog post by Scott Hanselman. https://www.hanselman.com/blog/ExampleCodeOpinionatedContosoUniversityOnASPNETCore20sRazorPages.aspx
Fair enough, then we're calling this structural typing. The answer is still no, mind. Although, I don't think duck typing is limited to dynamically typed languages.
Like /u/tweq saod, you'll have to generate proxies with either `RealProxy` or `DispatcherProxy` (those may not be the exact type names, been awhile since I messed with them and I am not able to look them up at the moment).
[Start here](https://docs.microsoft.com/en-us/windows/desktop/uxguide/guidelines)
C# supports certain duck typing scenarios but, in general, you are right. For example, you don't need to implement `IEnumerable` to be able to use `foreach` on a class, you just need to implement a method called `GetEnumerator` that returns an enumerator.
It's worth noting that this has to do with the properties and overhead of lazy evaluation. Writing alternative extension methods that are (at least close) to `for` loops is trivial. There are exceptions. One I ran into lately was copying back and forth between two-dimensional and single-dimensional arrays (i.e. `flatten` and `unflatten`). Using `memcpy` is spectacularly fast at something like this compared to LINQ or even `for` loops. If I could figure out how to do type punning in C#, that'd be even faster, but honestly I think once I get into that, I'm using the wrong language.
&gt; What an ignorant comment... If you're using LINQ to calculate volumetric lighting... yeah, you're an idiot. That doesn't mean LINQ shouldn't be used outside of CPU/GPU-bound loops.
Interesting to know, thanks for that.
Can you just derive a new class from the one you want to work with and also inherit IToString on it?
LINQ for collections (i. e. System.Linq.Enumerable) doesn't involve any black magic I'm aware of. EF might.
I've been using The C# Players Guide by RB Whitaker. I find it to be a very clear book with good examples and interesting projects at the end to test yourself with. As a novice I'm impressed and it's working well for me. 
I usually indent the way you have there already, but love the multiple variables for each step suggestion. Thanks.
The thing I don't like is that they are using the service locator anti-pattern across the client.
I would recommend to look at [Mark Seemann's book of Dependency injection](https://www.manning.com/books/dependency-injection-second-edition-principles-practices-patterns). It not only explain DIs but shows you how to properly design your system with examples. You can download the source code without buying the book on Manning. In the source code, look for the e-commerce projet.
WHERE THE FUCK IS FRANCIS???
&gt; sometimes If you limit yourself to only arrays and lists, of course there are optimizations that can be made.
&gt;I could have asked this earlier since I still don't know the answer, could I create a cross-platform software in C# using Visual Studio in my Windows laptop? How could I run it on Mac and Linux? No problem. All you have to do is write the C# code while targeting the .NET Core framework. To do this on Windows all you need to do is open Visual Studio and create a New Project with a .NET Core application such as Console. Once your New Project is created then you need to add the supported runtimes to your project file. Right click on the project to Edit the .csproj file. Inside it you will need to add the following property to a &lt;PropertyGroup/&gt; &lt;RuntimeIdentifiers&gt;win10-x64;osx.10.11-x64;ubuntu.16.04-x64&lt;/RuntimeIdentifiers&gt; These codes are specific to the platform, so this line says that your Project is able to be built for Win10 64 bit, Mac 10.11 64 bit, and Ubuntu 16.04 64 bit. You can find a full list of the RID (Resource Identifier) codes [at the MSDN site](https://docs.microsoft.com/en-us/dotnet/core/rid-catalog). When you're ready to compile your app then navigate to it with Powershell or CMD and issue the following command: dotnet build --runtime ubuntu.16.04-x64 You can also use this command for the other versions which you added to your Project: 
Map, Filter, Reduce, eh? You mean Select, Where, and Aggregate, yeah? Yes, LINQ is part of C#'s multi-paradigm aspect. It's OOP and Functional, too! Yay! Most good languages are. What was this article getting at that we didn't cover in 2006 when LINQ was first introduced? 
Well, this concept was new to me. As I am an apprentice, I found it quite helpful.
&gt; Not sure why it needed to introduce Python/Javascript names (Map, Filter, Reduce) They're pretty common names for those operations in lots of other languages. Including F#, which it uses for its examples of functional programming outside of C#.
RavenDB works and works well when you make a "Non Analyzed" index - which does exact matching.
Even then it's just taking advantage of expression trees, which is a very neat feature, but not black magic.
Using it right now. Annoying as hell. Still less annoying than having to write the same logic in C# for Windows, Java for Android and Swift for iOS. Between multitargeting and .NET Standard you can REALLY write most of your logic once. Pretty great.
&gt; But then five minutes later when I'm reading a very simplistic LINQ query a co-worker wrote I'm left scratching my head going "Wtf does this query do?" Thank-you. I have that problem when I come back to my *own* code a few months later.
&gt; Are there any github c# projects with clean architecture which I can *git* and learn something? FTFY
And F# inherits that terminology from OCaml, I think.
`Directory.GetCurrentDirectory()` is the **working directory**. That can be configured by the user at his will. If you want the folder of the program, you should first get the information where the program is. You can get it with the `Assembly.GetEntryAssembly().Location` call. Potentially you might also want `Assembly.GetExecutingAssembly().Location`. Then use the `Path` class to only get the folder of the path and navigate to it.
&gt; Now I've been burned by so many hard-to-predict side effects I only use it when the scope is constrained. Would you please explain "when the scope is constrained" and give a couple examples of side-effects, so I know what to be concerned about? Thanks in advance.
Great! Feel free to get in touch if you get stuck with anything. 
&gt; It can be 100x faster to do for loops sometimes So the web page refreshes a millisecond faster? In my inexpert opinion, making the code comprehensible for the next developer is a continual problem and shaving a millisecond off a loop is never a problem. But then I write business applications, *not* trading algorithms.
&gt; What if space ships did not need reaction mass? Dang, they need reaction mass? Doesn't that make things difficult?
Never is a strong word. Especially when I use software that is annoying slow every day :( 
I haven’t really tried it as in from blank app to a fully functional app but I was at a Xamarin seminar held last year in Microsoft office. I finished first in their Mission Mars Fourth Horizon Xamarin app dev contest. I don’t know what that means, might be nothing. Got a badge, stickers and a certificate. Yes, it has pros and cons if we go specific but in general, I think they’re cool.
Nope. Interfaces in C# are nominally typed (i.e. the name of the interface matters)
I will! Thank you.
I don't think these exist for backward compatibility. They are adding new language features that work like this for example the new Task-like objects.
Xamarin was a joke before MS came to it. Now, it got huge support from MS and it is getting better literally every release. I personally think that Xamarin is an only successful cross-platform framework I have dealt with. Just meh on react native and so on...
Structural typing is pretty much the static version of duck typing.
I was once expert in a venerable technology named *PowerBuilder* and authored a dozen articles for PowerBuilder Developers Journal (back in the days before every developer and his brother had a blog on programming). One article was about *PowerBuilder Performance Myths*. I gathered about 25 supposed optimizations from the usenet, etc and examined each empirically. ONE if them turned out to be true, one other was half-true ("It depends"). The punchline: **It's always the database.** So I'm a firm believer in the wisdom against premature optimization. It almost never helps. See, I qualified the "never" this time! I can learn!
Always use CodeBase instead of Location unless you know you want Location. Location is where the exe/dll resides during execution. This sounds desirable but many times is not. Sometimes, especially but not limited to asp.net, the executables are copied somewhere else and executed from there. CodeBase will show you where the assembly is originally from, regardless of whether the OS actually runs it from somewhere else.
Fun fact: this was under consideration as a language feature in .NET 4.0/VB 10. 
The existence of many wrong ideas about performance does not inform whether performance is important. If the database takes too long and you have CPU capacity to spare, use it to hide the fact that the database is slow (caching, for instance) and don't make the user wait another 10ms after they had to wait 100ms for the databases. Also, improve the indexes and give the db more ram :D 
&gt; Another principle that wasn't shown here is to make liberal use of indentation. When function chains are used, line up the dots for easy reading: I wish VS defaulted to this. (Can it be _configured_ to do this? Perhaps even with `.editorconfig`?) I really dislike their default: var sum = employees.Where(x =&gt; x.CompanyTimeInYears &gt; 5) // for tenured employees, .Select(x =&gt; x.Salary) // take each's salary .Sum(); // and get the sum (This is especially jarring because the `.` now lines up with the declared variable name. Ugh.)
Don’t know about improvements. I’ve been using it for a couple of months. It ranges from “Awesome!” to “Why VS? WHY??” Example: I mentioned multitargeting, and it’s great, but I still haven’t figured it out with the default VS project system, I have to manually go in and rewrite the whole .csproj in the new format (IIRC “Microsoft.Net.Sdk”, or something similar). It can be mitigated with a template, but it’s still annoying. Stuff that I consider awesome, however, is the java binding generator for Android libraries. It’s by no means perfect, and I’m sure that a lot of people had to mess with it a lot to make it work properly, but to import the library I needed (OpenCV Android) it only took an extra 4-5 lines of XML to get it to compile properly, and to me that is very impressive (and useful, as we might not want to port a huge subsystem to C# any time soon)
Don’t know about improvements. I’ve been using it for a couple of months. It ranges from “Awesome!” to “Why VS? WHY??” Example: I mentioned multitargeting, and it’s great, but I still haven’t figured it out with the default VS project system, I have to manually go in and rewrite the whole .csproj in the new format (IIRC “Microsoft.Net.Sdk”, or something similar). It can be mitigated with a template, but it’s still annoying. Stuff that I consider awesome, however, is the java binding generator for Android libraries. It’s by no means perfect, and I’m sure that a lot of people had to mess with it a lot to make it work properly, but to import the library I needed (OpenCV Android) it only took an extra 4-5 lines of XML to get it to compile properly, and to me that is very impressive (and useful, as we might not want to port a huge subsystem to C# any time soon)
Why not using Visual Studio since you are learning C# anyway?
Let's consider the case where you have an initial principle and no new savings each month. A = P * (1 + rt), but the equation you're using is A = P * (1 + r)^t.
What is your start values?
EF just uses expressions and reflection. They seem complicated at first but really there's not much to it.
Not really, I would assume that it uses the compound interest formula, but the above equation was the only one that semi worked. 
Your calculation is off. I ran your calculation and split the total monthly savings and interest calculations into two variables. See if you notice something interesting about how the monthly savings and interest are calculated in the output: *Month 1: $50.250 savings, $0.000 interest* *Month 2: $50.501 savings, $50.754 interest* *Month 3: $50.754 savings, $102.781 interest* *Month 4: $51.008 savings, $156.629 interest* *Month 5: $51.263 savings, $212.880 interest* *Month 6: $51.519 savings, $272.166 interest* *Month 7: $51.776 savings, $335.185 interest* *Month 8: $52.035 savings, $402.714 interest* *Month 9: $52.296 savings, $475.627 interest* *Month 10: $52.557 savings, $554.921 interest* *Month 11: $52.820 savings, $641.737 interest* *Month 12: $53.084 savings, $737.395 interest* *Final savings: $790.479* Interest doesn't compound like that! The biggest monthly increase will be from savings, not interest. Your calculation should instead be: `total = (total + monthlySavings) * (1 + monthlyInterest);` Since you are calculating this iteratively, you need to simply just add the monthly savings to the total, and then multiply it by the monthly interest rate. This calculation gives me a final savings value of $619.862.
You betcha! Good luck with the assignment.
Model it in excel first, then as you step through your code debug the calculation line, and make sure your assumptions by hand (excel) match the assumptions in your local variables.
It has improved greatly the last couple years. I rarely have issues anymore, and is about on par with XCode and Android Studio last time I used them. The only major issue left is the designer just simply doesn't work. 
It's ironic he decided that guy was the ignorant one yet is being ignorant himself.
God I hope they don't kill the dark theme. That's all I ever use. 
The smarthotel360 example application has a bunch of different projects that you can use to learn not only c# (core/xamarin) but also cloud (azure) and architecture. https://blogs.msdn.microsoft.com/visualstudio/2017/12/13/connect-2017-smarthotel360-demo-apps-and-architecture/
That really doesn't change the fact that the names will be recognizable to those familiar with other languages, and useful for deciphering scribblings about them centered in those same languages. It may also be useful to know reduce/Aggregate is also often known as "fold". Especially because it suggests an opposing operation, called "unfold", that can be a useful abstraction for generating functions but which is not exposed by C# in LINQ.
Suggesting WPF to a beginner is just evil 
That's a big ass project... You should do something more adequate to your skills 
"Filter" isn't that bad. Not sure why so many languages have settled on "Map" and "Reduce". 
If it said "Select, Where, and Aggregate," I probably wouldn't have clicked on it :P
It works until it doesn't. If you are right down the middle it's a great tool. If you try to get a little outside of it's greatest strengths then you will find trouble and may end up writing native code in triplicate.
F# is almost perfect, but I miss some things from C#, like protected and protected internal modifiers.
Well, the problem here is it's often so subtle you have to come up with a sort of contrived example, or copy/paste some work code you could get in trouble for posting. If I make the explanation *simple*, there are lots of "Well, why would you design it that way?" questions that make it seem silly. So I'm going to have to ask you to believe that when I wave my hands, it would take me an hour to explain to you why some of the constraints are in place. What I really mean is something like this: &gt; NEVER return as an `IEnumerable&lt;T&gt;` a LINQ query chain that breaks deferred execution. If you need to return such a chain, return it asynchronously and force the execution via `ToArray()` so the caller isn't surprised. What I mean is this method is dangerous, and a lot of better development practices can help you realize why: IEnumerable&lt;Thing&gt; GetThings() { return _someFile.ParseThings().OrderBy(...); } This opens callers up to hidden dangers. Someone who isn't paying VERY close attention might write something like this: var things = GetThings(); foreach (var category in _thingCategories) { category.Add(things.Where(...)); } If you aren't slapping your forehead, you should be. Every single time that `Where(...)` resolves, the collection of things is re-sorted. The `OrderBy()` call is a time bomb with a cost that has to be paid when it is enumerated. That won't happen until something tries to access a ThingCategory's items, now. For the `Where()` to work, the `OrderBy()` has to resolve, and depending on the implementation of `ParseThings()` that might even result in trying to open and re-read a file! This is deferred execution 101 but it can be easy to get lazy and forget, because most of the time we don't write code where it really matters. I think a better way to write `GetThings()` is either of the following: // "I return a bounded set of sorted Things." Thing[] GetSortedThings() { return _someFile.ParseThings().OrderBy(...).ToArray(); } // "I return a bounded set of sorted Things, this might take a while." Task&lt;Thing[]&gt; GetSortedThingsAsync() { return Task.Run(() =&gt; { return _someFile.ParseThings().OrderBy(...).ToArray(); } } Both of these say what they're doing. I know there is a finite set of Things so I'd like to return an array. It has a `Length` property, indexing, and lots of other convenient members. There's no way a caller can be surprised by hidden costs of that array. And since an array is an `IEnumerable&lt;T&gt;`, all LINQ methods the caller might want to use work on it anyway. Some are going to roll their eyes and say "Code review can catch that, just be careful jeez." If that's working for you, great. The bug that bit me in particular was introduced through four or five different, seemingly unrelated features over the course of a year and a half. None of the individual changes seemed to be harmful. No behavior was changed, so all unit tests were happy. It wasn't immediately apparent that a LINQ method 8 layers away in the call stack someone wrote a year ago could be so destructive, and it took a lot of careful examination to realize that method even existed at the call site. If we'd had the policy I follow now, it never would've happened. 
There is a good repo on .Net architectures : [https://github.com/dotnet-architecture](https://github.com/dotnet-architecture) I don't know if all of them are good, but there is a bunch of exemple and a book to go with it.
Every version has a bunch of UI changes. That's nice and all. I would still like a version that doesn't take ages to load a solution at startup for what is essentially a text editor. Even on my i5/SSD combo, I'll open a project and go get some coffee while I'm waiting.
For a beginner, the scaffolding generated by the Visual Studio C++ templates can be confusing, especially if they are following a tutorial and the files they have don't match the text. If OP is an absolute beginner, I suggest bypassing the auto-complete features that an IDE would provide and just using the console of Windows Subsystem for Linux with an editor. They will also get the GCC tools that are commonly referenced in tutorials.
Probably safe, it looks like they are going to ruin blue theme again. The removed blue theme when they added dark...
If you want to prepare yourself for a job, better to get used to working with horribly written code.
Any particular reason you're going with C++ rather than Java? C++ is just inherently difficult to code in. The IDE isn't going to help a lot. You're going to get compile errors on lines without problems and sometimes in different files. There will be bugs that require immense experience to spot, and you need to be really careful not to cause memory leaks. I'm not saying you shouldn't learn C++... I just think you need to be really certain you want to go down this particular path when there are other languages that are easier, in much more demand, and still related to C#.
Looks like they need their monitors calibrated. This "blue" looks pretty darn purple to me. Yuk.
Yeah... UWP has a `Navigate` method; First parameter is a type that is newed up, and the second parameter will be passed to the `NavigatedTo` method on the ViewModel. That alone somewhat sounds like something that is *fixable* from an architecture level at least, now that Microsoft has a standard for DI.
I hate it with a fiery intensity of a thousand suns. Hopefully I can customize it.
&gt; I could have asked this earlier since I still don't know the answer, could I create a cross-platform software in C# using Visual Studio in my Windows laptop? How could I run it on Mac and Linux? Surprised nobody mentioned [Avalonia UI](https://github.com/AvaloniaUI/Avalonia). It's still in beta, but is usable and actively being developed, with [working examples out there](https://github.com/AvaloniaUI/Avalonia/wiki/Projects-that-are-using-Avalonia).
Upvote for something I learned that I wish I knew before today...
Yes. [here's a good Lippert article on the reasoning for the behavior.](https://blogs.msdn.microsoft.com/ericlippert/2011/06/30/following-the-pattern/)
I looked into Xamarin as we are .net house for an android based inventorying application after the failure of win IOT... and it was just so slow and horrible in my opinion to deal with. Just seemed natural for Android development to use Android Studio even without having any Java Experience... Android version targeting seems easy without issue on Android Studio but Xamarian it complained every time I tried changing.
Here's the thing if you read it you will remember certain ideas and aspects. the whole point of reading the book isn't to memorize everything it says it's to gain a better understanding about how interesting parts of the language work.
You can look at this, probably the closest you can get: https://docs.microsoft.com/en-us/dotnet/api/system.type.isassignablefrom?view=netframework-4.7.2
I've written hilarious abstraction layers around Dapper to do those things. Once for work, and I did it again for fun. While it wasn't very unit testable, it WAS actually really nice in that the criteria based search code became far more readable/maintainable. If you know how to pick MemberInfo out of Expressions, you can probably write a decent layer up in a weekend.
I don't have that problem. One of those soultions I open has 30+ projects in it too. VS handles it fine
What project types and how many do you have? I've noticed my asp.net core projects load considerably faster than my webforms projects even though I have more projects and more files in the former. I think there are problems with some of the older project types with loading stuff on the main thread.
Yeah, terrible idea. I was a student not too long ago and I can tell you that most of them have zero idea what they were doing when it comes to clean architecture.
&gt;difference = yearlyExpense - yearlyRev; &gt;double breakevenAmount = initialInvestment + (difference); &gt;while ((initialInvestment + difference) &gt;= breakevenAmount) &gt;initialInvestment += difference; Difference is less than zero so you only do one iteration in the while loop. Also, every item in lstOutput starts with 1, even if you were adding more than one of them.
&gt;Not sure why so many languages have settled on "Map" and "Reduce". Because anyone with even a passing familiarity with category theory (including all language designers) will instantly recognize those words. Personally, I find them much more intuitive than 'Select' and 'Aggregate' (particularly 'Aggregate', since that operation can do so much more than just aggregations).
Get an i9
so how would I change that? &amp;#x200B;
VS 2017 is the best VS ever and 2019 looks even more promising. I like VS. The article however, is more a testament to the self-righteousness of the VS team than a description of the product they have built. &gt; Over the years, we’ve learned that sharing the evolution of Visual Studio, with you – our users – early and often helps us to deliver the best possible experience for our community. We knew you wanted... so we created... so you could... the way YOU - our community - want to do it. Gag. me. 
No problems like that here, my project has over 550 KLOC and loads very quickly. Takes a little longer for things to settle down and for navigation to work, but I'm talking 10-30 seconds at most even on my laptop. (my 7900X desktop is obviously faster) Maybe you have ReSharper installed? Also, I wouldn't exactly call it a "glorified text editor" ... Notepad doesn't do symbolic indexing and navigation, for instance. Or a lot of other things.
I recall a discussion of history of C# and explanation for why certain features were developed on the roadmap to LINQ. Is that correct? I could care less about the historical stuff. I like cookbook books. Here's how to do X. Go ahead, shame me. No, thanks for the encouragement. I'll try to pass through it again one of these days. Isn't there a new edition coming out shortly?
1) this issue isnt normal 2) its a lot more thsna text editor. Visualstudio code is a text editor. But maybe we can help you with your issue. First question. What addons do you have? Second question, are you loading from a network drive? 
And never assume the file is always there, can be read and contains something your code can deal with. Check, check and double check
There's always vim.
Stop using resharper and other extensions 
[Dark isn't going anywhere.](https://twitter.com/Johnmont/status/1062062614916657153)
No offense, but this is mostly theming and rearranging. Nothing wrong with a refresh, but there isn't really much "UX" to this. This still seems to have the same cluttered many-palette UI design approach as… VS.NET 2002? Or even older? While perhaps a bit too radical, IDEs like Xcode and (even further to an extreme) apps like VS Code show that you can go much simpler and still be very powerful.
Personally I love tech history. I can get engrossed in reading about the processes and decisions that led to something I use today. There is! https://www.manning.com/books/c-sharp-in-depth-fourth-edition I essentially preordered it when they had a $20 deal since I have not read C# In Depth (just other books). Which gave me the previous versions PDF, and I'll get the 4th edition book shipped to me when it's published. 
What would really be great is they actually used color to mean something useful. Like if you could associate a color with a code branch so certain UI elements (like Solution Explorer) would be colored so you don't accidently write code in the wrong branch. 
I stand corrected. Thanks for pointing that out.
I had a contract to write a PowerBuilder book for Manning. Put in a couple hundred hours before I figured it out that I was OK at writing articles, but a book was beyond me. I can't organize worth a damn. Got a few PBDJ articles out of it, anyway. ;)
I’m a little surprised that .Net Framework is already losing support for even new language features. Maybe I haven’t been keeping up with things as closely as I should have been, but I had no idea that features like default interface implementations and async streams wouldn’t be supported in any current version of .Net Framework, and it sounds like there aren’t plans to ever bring them to Framework. I’m a huge fan of .Net Core and use it on all new projects, but I didn’t expect .Net Core development to begin outpacing Framework so soon.
To me that just sounded like "we've gotten our ass kicked Enough by releasing stuff without consulting the community first that we now run every little detail by them."
Flat UI is the progression
Not really caring much about any of that if it isn't supported on the regular .NET framework. .NET Core isn't something that is commonly installed on people's computers and its installer is still unreliable (I can't uninstall or install newer versions on my PC).
I can’t believe those crazy bastards are actually going to do nullable reference types. So hyped, pump that type safety straight into my veins.
When they add a half decent file search like in VS Code I'll be excited 
You can create standalone apps with .NET Core which just bundles the whole framework, but I guess the major use case for .NET Core never was something end users will install on their PCs but server backends and console applications.
I use GoToAll (I believe it's called). For some reason it's not a easy to reach feature. But you can map it to CRTL+P (like VS code) and it does the same kind of fuzzy search that VS code has. I've been pretty happy with it.
There's a strong rumor that 4.8 eill be the last framework and it will be core moving forward. 
Embedding .NET Core into my applications sounds interesting. Do you happen to know any good website about this?
https://docs.microsoft.com/en-us/dotnet/core/deploying/index#self-contained-deployments-scd
Does anyone know how (if?) default values will work with non nullable reference types? I can see this causing far more problems than it solves.
When you are listening for the purpose of making yourself important you write articles that tell everyone that you are listening. When you are listening for purpose of understanding what people are saying you write articles that address what people have said. They can tell from that if you are listening or not. 
vscodium. It's not 100% visual studio but it's pretty damn nice. It's the same source as VSCode but without MS branding and telemetry. I've used it with gnuC,gnuC++,C#(.net core), python, bash, and probably a few more. It's quite flexible, and when compared to other IDEs such as atom, it is faster and doesn't generate config files literally everywhere (unless you tell it to).
Beginner here. What does core do? Can it build only a certain set of applications unlike framework which allows a wide range of applications?
No, Core is the evolution of the .Net Framework, essentially a rebuild. They're making it more modular this time so you can include only what you want/need from the different parts of the framework. 
I've spent most of my time on commandline tools and winforms before warming up to work couple years ago. At this point I'm used to WPF enough that I probably break even between things I still find cumbersome vs things that are made easier. I would put in the effort to learn it. Or at least look into ways you can adapt an MVVM model for winforms. Separating your UI from business logic and models/data makes life so much easier for anything but small one-off tools.
So we can build as many applications(console, web, etc) as framework does using core? 
Yep! That's exactly right.
.NET Core is a new platform implementing the .NET Standard interface (just like .NET Framework is a platform implementing the .NET Standard interface, as well as a bunch of other things). The main benefits of .NET Core are: 1. Streamlined tooling 2. Cross-platform support 3. Performance What you won't have in .NET Core that you have in .NET Framework: 1. Frameworks that have not been ported: WebForms, WCF, WPF, WinForms 2. Libraries that are Windows-specific and have not been ported to utilize the correct cross-platform abstractions (The Windows registry, for example) 
nullable reference types will always be half baked as long as they don't deal with arrays. var array = new MyReferenceType[10]; is legal and doesn't cause warnings, but it is full of nulls. hopefully they have changed that since the last spec i saw. what i really want is better type inference. it grinds my gears to not have return expressions considered. SO many generic qualifiers could be eliminated. since it is illegal now, i think it could be done in a backwards compatible way too. 
WPF/WinForms are coming to core, to be fair, but it will only be compatible with Windows.
[removed]
It does apply to types defined in programs, yes. While null is totally a valid value for some variables, in other cases it’s not - plenty of code is written which will never intentionally pass null to some parameter and would therefore benefit from getting warnings should it accidentally do so. Protecting us from ourselves is what a compiler is for!
OK, I think I see. To me, though, the fact that they added the null conditional operator (".?") went a long way towards this and should have been sufficient. I guess I come from a defensive programming school of thought - I'm going to be checking for null (whether it's at the time of assignment or usage) regardless. And it seems like an all-or-nothing setting - you're going to get this warning everywhere, where it should only apply to the cases you're describing.
I'm pretty sure they fired all the people involved with that... it was a dumb moment in MS history...
How will nullable reference types be backwards compatible. Will all my c#7 no longer compile because it's not got the `?` in it?
I suspect default values will just not be assignable to non null references.
They have abandoned the CLR in .NET Framework. It's been so long since they added new features to it that they've forgotten how to do it. At least that's how I read it when they literally saying they cannot safely create a new CLR for the .NET Framework 5.0 to support C# 8.
I seriously doubt that. They still need to push out the occasional security update or high DPI fix. I do think it is safe to say that there will never be a new CLR for .NET Framework. 
Not yet, but we're getting closer as time goes on. Console and web are well supported. Windows UI is planned for .NET Core 3.0. Windows Services... well there's a hack that makes it work.
I'm assuming that will be a compiler error.
Look carefully at your code? What percentage of your reference type variables are legitimately nullable? As in the value could be null and the application would work correctly? For most of my programs, that number is very, very low. I've got null argument checks everywhere I can to ensure that nulls don't slip into variables where they don't belong. This is going to significantly reduce the boilerplate in my application. If it doesn't do the same for you... well then I recommend turning it on anyways because like it or not that's the direction everyone else is going to go.
https://github.com/nopSolutions/nopCommerce NopCommerce is an example of real-world project with good architecture.
Could you give an example of how this will be used?
The biggest thing I can think of is an extra layer of protection from null pointer exception
So it’ll just cause the warning talked about in the article then for model types since they can be null right?
A whole new class of bugs for the next half a century! Yay! This time they'll be logic problems and data inconsistencies, not exceptions.
It's optional
Hint For 1:... 2:... As you loop through the while you are already incrementing year. What would be the value of year on the first pass? And second pass?
Yes, from my experience MVVM is better than MVC or MVP. I can't really give you a good source, I just Google search things as I work on projects. 
The symbol means "there is a variable here, but I'm never going to read it so don't give it a name". It already exists in C#. For example, you can use it to ignore `out` parameters. 
This will turn *existing* reference variables into non-nullable. And *where ever you can get a null reference exception* will be a compiler error.
If they remove dark theme I will hate my career field
I understand there could be limitation with dependency injection, but the issue is using the service locator itself. Instead of creating a class where you call a method to get an instance of a type, you could easily create properties or method to get these instances. Instead of: NavigationService = ServiceLocator.Current.GetService&lt;INavigationService&gt;(); You can easily replace it by: NavigationService = ServiceLocator.Current.NavigationService; or: NavigationService = ServiceLocator.Current.GetNavigationService(); This would reduce the chances to get run-time errors because you forgot to register a service and gives you a clear indications of all their references in the views or what services are available to use.
The other way around it's worse. C# is lacking so many features that F# got already. But step by step C# gets the features of F#, just many years later.
No, the ? Makes the type explicitly nullable. The option to make the compiler treat nullable references as errors if they are referenced without being assigned can be toggled at the project level so that you don't break your existing code.
No, adding `?` will mean that it's nullable, same as it does currently. They meant that enabling that feature in the first place is optional--you can pretend it doesn't exist and nothing will change with how you currently write code.
*Compiler _warning_, not an error. You can turn it into an error, of course, but they're warnings by default. 
Yes, at public API points, you'll likely want to continue checking for \`null\`. However, once you get past the public API, your internal code can safely omit null checks, as the only way a \`null\` could get it is if you explicitly ignored the warning. There have been some discussions about creating a syntax that would automatically add a null check and throw \`ArgumentNullException\`, but nothing definitive has been decided there yet.
&gt; Default interface member implementations rely on new runtime enhancements, and we will not make those in the .NET Runtime 4.8 either. So this feature simply will not work on .NET Framework 4.8 and on older versions of .NET. So we can use these features in .NET Standard libraries, and they will just blow up when used on .NET? That's just crazy stupid.
You should try learning a language that doesn't have null. I think you might be impressed with how nice it is to have nothing to be defensive against. Expressing the intention that something might not have a value is done with a type. For example Rust uses `Option&lt;T&gt;` (see [here](https://doc.rust-lang.org/stable/book/2018-edition/ch06-01-defining-an-enum.html?highlight=null#the--option--enum-and-its-advantages-over-null-values)). ```rust enum Option&lt;T&gt; { Some(T), None, } ``` The problem with null in C# is that every reference type takes it as value. It's maddening to have to consider whether I need to check for null or not when de-referencing *every* reference type. I work in a code base that has the tendency to return null from methods and properties (bad practice imo). If it was type safe like Option&lt;T&gt;, I wouldn't have to look at the implementation of every method/property (look at the documentation you say? what documentation?) for code I'm unfamiliar with. No having to do "try" pattern methods with out params, which don't work well with linq. Option type works great with function style of programming. It would work great with linq and pattern matching if we had it. However, we can't have it replace null because that ship has sailed.
Right, `_`is callee the discard symbol because it indicates you don’t need the variable. It’s helpful for memory management. 
Yea, I'm unreasonably excited about that. I really hope Code Rush picks up a refactoring command to convert my lame ass switch blocks.
No records :-(
And every single application that should be a few KB in size will not require to ship 100s of MB to include the whole framework. Not practical. Plus there are features of the framework that are not available .Net Core, regex compiled into assemblies being one I can think of. Also the fact that .Net Framework is not going to support future .Net Standard makes having a standard completely useless. Microsoft is making bad decision after bad decision. I was always bullish for .Net and C# but now I'm going to be advocating against using it in new projects in my company.
One of the explicit goals of the feature is that it won't change emitted code, so nullable aware dlls can exist alongside unaware dlls, and that opting in doesn't have any behavioral changes. It's the only way to get incremental adoption of the feature. 
Yes you can do it standalone, but you will significantly increase the download size of your app. I know .NET Core is supposed to be side-by-side deployable, but MS needs to sort some way of installing it with Windows.
If you use mvvm in conjunction with caliburn.micro, then if you use Rider you can add a caliburn.micro line template, or download the plugin/add on from the market place for VS the up front investment iis minimal and provides immense time saving. It had tons of nice automatic mappings and other stuff. Definitely look it up. 100% worth it and makes mvvm a breeze. https://youtu.be/laPFq3Fhs8k
Wow I'm glad to see this is happening faster than I expected. I was reading about the nullable reference types several months ago feeling a bit disappointed that it could be years before 8.0 sees the light of day. 
I am very grateful that you took the time to write that and expressed yourself so well. Thanks a ton! I'll go re-read it a couple times now. I'm not sure why returning an array is special sauce. Don't tell me, I'll figure it out. Or ask you again if I don't. ;) Thanks!
Some time ago I claimed the same thing, but then I was told by MS employee that I'm probably wrong and there probably will be a need to add some APIs to the .NET framework. I would call new API a feature.
Am looking for some resources on learning MVVM with C# WPF? Anyone please? 
I hope Anders comes and slaps some of these guys before going live with shit like the small hat for the Index. How about a simple minus? 
In .NET Standard 2.1, which should’ve been called 3.0 due to this hard break: it won’t be compatible with any .NET Framework.
While looking at your codebase I saw some code smell. I will fork your project and will resolve those code smell in my free time and will send PR for it. Cheers! 
I see, thank you.
Oh man. It was definitely too late at night for Markdown. Thanks!
Minus can’t be used because it has an existing meaning.
Ohhhh, ok it's a compiler option, thank you, wish it was mentioned somewhere in the article. So what if I import a library written in C#&lt;7 but want to use this feature, is there some kind of exclusion for outside code ?
Yeah. The feature is turned on by an attribute in your code. When referencing an assembly lacking the attribute, the compiler considers the parameters and return values in that assembly to be “null-oblivious” (ie don’t understand null checks). I don’t remember the specific semantics around oblivious types, but my intuition says “anything can be assigned to oblivious, but an oblivious value must be ‘proven’ to be non-null to be assigned to a non-null reference type”
MSVC++ (not MVSC) has naturally GUI support for Windows, as it is the OS vendor compiler. Namely [MFC](https://docs.microsoft.com/en-us/cpp/mfc/mfc-desktop-applications?view=vs-2017), which is a bit outdated and mostly in maintenance mode nowadays. [WTL](https://sourceforge.net/projects/wtl/) based on [ATL](https://docs.microsoft.com/en-us/cpp/atl/atl-com-desktop-components?view=vs-2017), which is no longer maintained by Microsoft themselves and the new official one introduced in Windows 8 as WinRT and nowadays known as [UWP](https://docs.microsoft.com/en-us/cpp/windows/universal-windows-apps-cpp?view=vs-2017), which you can think of as WPF for C++. WinRT/UWP originally required either the low level COM library known as [Windows Runtime C++ Template Library](https://docs.microsoft.com/en-us/cpp/windows/windows-runtime-cpp-template-library-wrl?view=vs-2017) or the language extensions known as [C++/CX](https://docs.microsoft.com/en-us/cpp/cppcx/visual-c-language-reference-c-cx?view=vs-2017), similar to [C++/CLI](https://docs.microsoft.com/en-us/cpp/dotnet/dotnet-programming-with-cpp-cli-visual-cpp?view=vs-2017) but targeting native code instead of the CLR. As of last Visual Studio release, C++/CX got superseded by [C++/WinRT](https://docs.microsoft.com/en-us/windows/uwp/cpp-and-winrt-apis/index), which makes use of plain standard C++17 features instead. If you are using mingw or clang instead, then your options would be mainly third party GUI toolkits like Qt and wxWindows, which build on top of Win32. Apparently UWP might be possible with clang using the C++/WinRT framework, but there isn't much information available.
Actually you can use pointers and hardware resources with C#.
Depends. There are numerous exceptions which allow you to assign nulls (or not replace default nulls) to non-nullable variables. This code will not produce any warnings: public class Foo { string a; string[] b; string c; string d; public Foo(string val) { a = new Bar().a; b = new string[1]; c = val; d = default!; } Foo() : this(null!) { } } public struct Bar { public string a; }
Supporting nullable reference types with array is a hard problem to solve, if it even can be solved. Most of the time people just use `List&lt;T&gt;` anyway and it supports nullable reference types just fine.
Is it? I mean it's a big pile of information and images but on top of that it's just data sheets for each object, a search page, and a browse page, isn't it? I already submitted the idea and they said it's good. I asked if it will be too much but they said no... Anyway, I'm not afraid of the size, I just need some directions.
Really like the new icon
Now I feel like I was baited. because they never told me with one single word that I should reconsider because of the complexity... And now it's approved, I'll have to do it somehow.
It's also used in pattern matching in Haskell for example, for clarity
Yes, I mean nullable reference types. And I'm aware that F#s Option type is not the same. F#s option type is the more elegant and cleaner solution, but it would not map well to the C# space.
Well, more like 9/10ths baked. It certainly won't be any worse. 
They also did not include Shapes :(
 using (var tcpClient = listener.EndAcceptTcpClient(asyncResult)) { if (tcpClient.Available &gt; 0) { // .. } } You're assuming data is avaialble to read as soon as the connection is established, and if there is nothing to read you dispose of the client immediately. Why? It takes time to send data after the connection is established. netStream.Read(bytes, 0, tcpClient.ReceiveBufferSize); Are you sending at least `tcpClient.ReceiveBufferSize` bytes? If you don't send enough data it will wait until enough data is available.
You might want to check out this, it adds a lot of functional stuff to c# and works quite well. https://github.com/louthy/language-ext
Well I wouldn't call it elegant, in F# for some very odd reason Option type in F# is a class not a struct.
Amazing. 
might need a little more info, what "times out"? is this a web request to get a file from a server? What i can say right now though is that code isn't the same. Your first example creates many tasks that are all running concurrently. your second example iterates through each id and awaits each result before getting the next document. Potentially whatever you're interacting with can't handle multiple requests at once but has no problem doing them one at a time. Experiment a little, your first example is 'correct' but you may have to figure out why it can only handle one(or a small number) of requests at once and if all else fails limit how many you send at once.
They are not identical. The first approach will start all of the tasks at (more or less) the same time, the second one waits for the previous task to finish before starting the next. Whether that matters depends on the `client.GetDocument(s?)Async` implementation.
I'm calling it from an unit test. It waits, like, 30 seconds, and timeouts. There must be a deadlock or something like that. I'm doing some tests.
Thanks for your help, I'm seeing that right now (I corrected the typo, BTW).
&gt; GetDocumentsAsync And there is documentation that it's thread safe?
There's also no guarantee that it reads up to X available bytes and returns, when the stream is still available and not finished.
&gt; You're assuming data is available to read as soon as the connection is established Is there a way to wait to read data when it is sent?
How many documents are you retrieving at once? And how many tests are retrieving documents? Keep in mind all your unit tests run at the same time so your unit test could be a stress test. This doesn't look like a deadlock to me at all, if a http request is timing out the server your calling either can't handle the request or something has gone wrong. Quick tip if your not already doing this, one of the big reasons we put everything behind an interface is that when unit testing we can remove calls to an actual persistence medium wherever possible and replace them with a simple mock. For HttpClients i quite like [mockHttp](https://github.com/richardszalay/mockhttp), grab a recording of a real output and you can then use that instead of a real request. A test suite is useless if it takes too long to run.
This is an HTTP call from an HttpClient.
Just call `Read`. Make sure to keep reading until you reached the end of the stream.
&gt;Make sure to keep reading until you reached the end of the stream. Can we use stream reader for this purpose? Also is there a way to handle empty files?
But if they do, Resharper has you covered.
I don't know anything about autorest but I'm sure `HttpClient` doesn't have `GetDocumentsAsync` method. So that sure does something else too and you are not directly calling `HttpClient` and not everything in `HttpClient` is thread safe, list of thread safe methods can be found here https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?redirectedfrom=MSDN&amp;view=netframework-4.7.2#Anchor_5. So my previous question applies, are you sure it's thread safe? 
&gt; book has 12 chapters: &gt; &gt; ​ &gt; &gt; Chapter 1 introduces .NET Core and .NET Standard—what they’re for and why you should learn them. &gt; &gt; Chapter 2 gets you started creating .NET Core applications. &gt; &gt; Chapter 3 explores the MSBuild build system and how to edit project files. &gt; &gt; Chapter 4 covers unit testing with xUnit. xUnit documentation online tends to be scattered, so this chapter will be useful as a reference later on. &gt; &gt; Chapter 5 introduces working with relational databases, a common thing for developers to do. .NET Framework developers familiar with relational databases may want to move on to chapter 6. &gt; &gt; Chapter 6 covers object-relational mappers (ORMs). It introduces two different types of ORMs: Dapper, a micro-ORM, and Entity Framework Core, a full-featured ORM. &gt; &gt; Chapter 7 explores building a REST endpoint with ASP.NET Core, as well as how to make HTTP calls to other services. &gt; &gt; Chapter 8 explores different options for debugging, from IDEs to command line. &gt; &gt; Chapter 9 introduces performance testing with xUnit.Performance and profiling with PerfView. &gt; &gt; Chapter 10 covers the internationalization process and how to make applications world-ready. &gt; &gt; Chapter 11 looks at how to build .NET Core libraries and applications that rely on framework- or operating system–specific constructs. &gt; &gt; Chapter 12 covers how to prepare your .NET Core library for release and distribution. &gt; &gt; The appendixes contain specific details useful for writin thanks bro 
I'm pretty sure that the issue is not there. `GetDocumentAsync` does a `PostAsync` and deserializes the result to the required object.
In fact that's an integration test, and I'm launching only one of them. I'm sure that this is an issue in my code, since when I have one ID it's ok, but with 2 IDs, it fails with timeout.
I'm a little confused that C# 8 is going to have different features depending on the framework. This is going to make reading the documentation a lot more of a pain when you are looking stuff up in the future. It would have made more sense to have the common features as C# 8 and the extras for standard as C# 9 so that the versions are more consistant.
It gives me time to think about all the great things in life.
I don’t get it. It’s a unary expression. Isn’t index a value type? What’s wrong with it being negative? I understand there might have been reasons, but I don’t think the likely outcome is along the lines of “yeah, of course it’s a caret” when you’re typing.
Self Contained Deployments are definitely preferred in my opinion. It’s a bigger download size, but you don’t leave room for runtime version issues. Alternatively, the .NET Core Runtime does side by side installations so you can “pin” your application to a specific version. Generally I have a build server that has all the SDKs I need and then my deployment servers are barebones and don’t have any additional runtimes. As a *workaround* to “installing” the sdk. Download the binaries (instead of the installer) and ensure “dotnet” gets added to your PATH. I’d still recommend troubleshooting why it won’t install. That’s really weird. https://www.microsoft.com/net/download/dotnet-core/2.1
I don't understand the problem with "\_" That's like saying = is bad because it's a meaningless symbol and doesn't describe what is going.
They are working on a linker to remove unused assemblies.. and also bundling everything into a single exe (both based off Mono’s linker and mkbundle I believe). I’ve had cases where I can’t guarantee all my end users are on 4.7.x. I’d love to be able to distribute a single exe that is essentially independent. SCD is still also great for server environments where multiple applications are deployed on a single server. Upgrading the Framework requires validation of every single application post-change... and sometimes does break them.
&gt;I don’t get it. It’s a unary expression. Isn’t index a value type? What’s wrong with it being negative? It needs to be backwards-compatible, and you can implement your own `int`-based indexer, which may already have its own special behavior for negative IDs. My understanding is some Office COM APIs do. &gt;I don’t think the likely outcome is along the lines of “yeah, of course it’s a caret” when you’re typing. No, the caret isn't the most intuitive of choices.
https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/ &gt; Given many of the API additions in .NET Standard 2.1 require runtime changes in order to be meaningful, .NET Framework 4.8 will remain on .NET Standard 2.0 rather than implement .NET Standard 2.1. .NET Core 3.0 as well as upcoming versions of Xamarin, Mono, and Unity will be updated to implement .NET Standard 2.1. It's Silverlight-level "alive" right now. They'll never say that it's dead. It's the closest to official statement that we can have. 
https://github.com/Fody/NullGuard 
An advice in the life, don't ever make someone an "idol" Even if you praised him, even if you sucked his dick, he will never return the good or even care about you. Be yourself and never care about the others because they will do the same to you too.
But as soon as we can escape the type system, it becomes useless, in my opinion. I know it's a hard problem to solve, but I'm not that excited for the feature because of its defects.
I read that as 4.8 won't be on 2.1 standard, but 4.9 should be. And they're only pointing it out as 4.8 is currently in pre-release, and to stop the inevitable question. There's literally billions of LoC in enterprise applications written for Framework, far more than Silverlight ever had, and it ships with every version of Windows. It won't be dead, but they have to provide a higher level of compatibility. It'll just move much much slower than Core.
Creating .Net Framework 5.0 that could live side-by-side with .Net Framework 4.x would require a lot of work and could cause its own set of problems. I don't think they can't do it, but it wouldn't be worth it.
Uh...You can do what you mentioned with C#. To be fully honest, learning C++ doesn't really help much in your job if you wanted to do anything other than obvious C/C++'s tasks(like making an OS, drivers and bigger access to hardware) there is cross-platform desktop development but to be fair that isn't worthy at all especially since Desktop Development is not in a very good place right now. There is game development but C# already does that perfectly flawlessy. Learn Javascript and HTML/CSS in addition to C# if you want to do web development, they will actually help you massively instead of C++ which is a skill that you may regret the time you spent in learning it.
Support for Windows Registry is included in [the Windows Compatibility Pack](https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/).
.Net Framework 4.8 will not support .Net Standard 2.1. So it will not "blow up" at runtime, it won't even compile.
How is that a breaking change?
Nullable reference types will not cause any errors, only warnings. That's because it's not possible to add that on top of the existing C# in a way that would be both convenient and work 100%.
Wow, whose dick did you suck that made you this bitter? ;)
So it doesn't detect some edge cases and you think it's useless? Wow..
I don't think this adds a new class of bugs. There are edge cases where you will get no warning, but the code will still throw a `NullReferenceException` at runtime. But that just means it won't discover 100 % of `null`-related bugs. It doesn't mean there are new, worse bugs it could cause.
&gt; I can't uninstall or install newer versions on my PC Then you should report that bug.
&gt; I guess the major use case for .NET Core never was something end users will install on their PCs but server backends and console applications. It will be once support for WPF and Winforms is included in .Net Core 3.0.
&gt; The option to make the compiler treat nullable references as errors Enabling the option will mean the compiler produces *warnings*, not errors.
PCL was infuriating. 
To be fair, I think it's some common sense. Don't make someone feel he's greater than the world, that will make you feel the shittiest person in the world to him.
It doesn't matter for memory management. The CLR has always tracked variable usage.
Well, now I'm sad, this would be a great feature.
So the entire type system is useless because of reflection, good to know. The type system doesn't have to be a prison from where you can't escape. It's supposed to help the developer avoid their own mistakes.
Nope, but inside the generated code, it uses an HttpClient. I've done a little test, and it works well: static async Task&lt;int&gt; LongRunningOperation(int id) { await Task.Delay(1000); return id; } private static async Task Main(string[] args) { var ids = new[] {1, 2, 3}; var results = await Task.WhenAll(ids.Select(LongRunningOperation)); var equal = results .Zip(ids, (x, y) =&gt; x == y) .Aggregate(true, (result, current) =&gt; result &amp;&amp; current); Debug.Assert(equal); } I guess you're right, the code generated from autorest is in code, maybe.
What "next best option"? VSCode might be excellent for web development(Javascript, HTML, CSS) and maybe some other scripting languages but it's horrible for .NET development. If you want "next best option" then Resharper is the closest to that.
What "next best option"? VSCode might be excellent for web development(Javascript, HTML, CSS) and maybe some other scripting languages but it's horrible for .NET development. If you want "next best option" then Resharper is the closest to that.
Still no wcf, a heavily used component of framework
All code that previously worked will continue working.
Really? Personally I get SAD after months of darkness and rain...
By that definition, no breaking changes exist anywhere. If I change a library from .NET Standard 2.0 to 2.1, it will stop working from any project that uses .NET Framework.
Oh, good to know.
Well two of those are by the same danish person. &amp;#x200B;
autorest generated probably uses instance fields in manner that is not thread safe. Maybe you just need to create new instance autorest client for every request something like 'var documents = await Task.WhenAll(myIds.Select(id =&gt; new AutoRestClient().GetDocumentAsync(id)));`?
I worked with them a lot, they earn my respect. They are very productive and accurate. Maybe that is true, weather is one of the factor. But not just that, I find it Danish people are focus. Happy to be here!
I know right. Their documentation on this could be a lot better. And "Location" seems like the obvious name. In fact, I had to edit my above reply several times to remove the word "location" to describe these paths since that's the natural word to describe what CodeBase is.
If you are referring to me, no I am not. I am Filipino, living in Denmark. Please ignore this if you are not referring to me.
I agree as we are all human. He is not religiously my idol, but he made a big change to our world and that inspire me a lot. Seeing him in person and talking to him is an accomplishment, listening to his ideology.
If you changed it from `netstandard1.0` to `netstandard1.1`, then your library wouldn't work for any version of Windows Phone Silverlight. If you changed it from `netstandard1.2` to `netstandard1.3`, then you'd leave behind all Windows 8 and Windows Phone 8 platforms. These aren't breaking changes; they're trade-offs that you're making about which platforms you choose to support. If you need to target .NET Framework 4.8, then you can only use APIs that are included in .NET Framework 4.8, so you shouldn't switch to .NET Standard 2.1.
I was really hoping for this :-(. Oh well, such is the downside, from our perspective, of the development all happening in the open: getting excited for something that won't make the cut. Hopefully they'll come in a point-release, but I won't hold my breath; looking at how the proposal has evolved, it looks like the team is shooting for a design that's much more complex than I realized, since they're trying to integrate records with other relatively new language features like deconstruction and pattern matching. The interesting part for me was always going to be how records handle equality, especially when unsealed, and it looks like those are still open issues for the team.
Breaking change happens when you upgrade a component that your application uses (a library, a framework, a compiler) and it stops working. But .Net Standard is not a component. And if you increase the version of .Net Standard used by a library, it's always a breaking change, because it limits which versions of frameworks you can use, that's nothing new.
```Anders Hejlsberg (/ˈhaɪlzbɜːrɡ/, born 2 December 1960)[2] is a prominent Danish software engineer who co-designed several popular and commercially successful programming languages and development tools. He was the original author of Turbo Pascal and the chief architect of Delphi. He currently works for Microsoft as the lead architect of C#[1] and core developer on TypeScript. ```
From Wikipedia &gt;Anders Hejlsberg (/ˈhaɪlzbɜːrɡ/, born 2 December 1960)[2] is a prominent Danish software engineer who co-designed several popular and commercially successful programming languages and development tools. He was the original author of Turbo Pascal and the chief architect of Delphi. He currently works for Microsoft as the lead architect of C#[1] and core developer on TypeScript. 
But on the other hand, I’d much rather look up to someone like this than a celebrity. 
Since EF Core, I don't abstract any further. I communicate with the database through database context injected in particular service which is called from controllers.
**"default interface implementations"**? What happens when there are multiple interfaces with the same method signature and all of them has a default implementation? Which one is going to be called? Or it won't be allowed? One thing that I really liked about c# is that there is not multiple inheritance which can be a hell. It seems like this brings in something like that. Also the usual answer to the interview question "what is an interface" is just became wrong. lol
It is a very poor convention.
well I know but usually you dont the same way in C++, inheritly the performance on C# is slower in some data types calculations
Not at all, the equals sign is a very well known and defined symbol.
As someone who picked up Kotlin recently, they are amazing and I am glad they are coming to C#
Cool! i'm waiting to see that! :)
is there any noticeable change between C++17 and C++11? What I think i was learning was mainly focused in resources from 6years ago
I've had no issues setting up ( and developing) C# applications in VSCode. It was honestly harder to get the .NET core SDK and runtimes installed on Linux ( which is not a VSCode problem). It works great for other C variants as well imo.
That's my point. "_" is not that unused so some people will know it, besides if you won't know it, then by the time you will know it. Exactly when you were 6-7 year boy who found reading "=" awkward but now after looking at it more by the time it's perfectly normal. It's not the best example but I hope you understood it.
Who is the other software inventor from Denmark? I only heard Anders
bjarne stroustrup is the creator of c++ 
In your opinion, maybe. I think it's fine. It's as minimal as possible to indicate that you don't want to use the variable at all. Would you rather allocating a variable for something unnecessarily?
Awesome! Danish rocks!
Anders is amazing! I'm working at Microsoft and I haven't met him yet. What would I tell him that wouldn't make me sound like a groupie? Almost nothing. I'd love to attend a session with him just once. You're a lucky person!
This is not exactly hard to do, in WinForms and with MDI. Here are some thoughts: 1. If your welcome screen only has info and no interactivity (no buttons to click, etc.), you can use the (gray) background of the MDI parent window (the main window in your screenshot) to show an image that will have the "intro to your software". Just research "MDI parent window backgrounds", here's an old article: http://www.r9paul.org/blog/2009/mdi-in-dot-ne/ That way the intro to your software will always be visible to the user in the main window, and will also show as the very first thing they see, when your app opens. 2. "Do I need 110 forms for each object"? No. In MDI, you create new forms when there is completely new functionality being added, your forms should be separated by functionality, not by objects. What you need is a single form, containing a TreeView and a PropertyGrid. See this screenshot from one of my MDI projects --&gt; https://imgur.com/LTvTbgp The left side TreeView in my screenshot is showing 4,115 objects. When user clicks on an object, you do the database query, get object's data, and show it in the PropertyGrid on the right side. In your case you may also need a PictureBox to show the image, since PropertyGrid does not do well with images. The TreeView and PropertyGrid are inside the two panels of a SplitContainer, with the "Dock" property for each control set to DockType.Fill I like building searches as a separate tab in the left section, see this screenshot from the same software --&gt; https://imgur.com/dqtw9U9 In this screenshot, I am searching for homes in a particular city and state, and when the search finishes, the TreeView we saw in my last screenshot gets loaded with the 4,115 objects returned by the search. As you can see, the search, the catalog, and the "detail" view, are all in a single form :) Hope this gives you a good starting point.
PHP is in there too
I'm going to guess it'll be something like order of implementation: public class MyClass : InterfaceA, InterfaceB{} If both interfaces share a common method signature then InterfaceA wins. There'll probably be an attribute to override this behaviour. I gotta admit, I'm not a big fan of this idea. Although I guess like any language feature, we don't have to use it if we think it leads to messy code. It sure muddies the waters when it comes to knowing the difference between an interface and an abstract class, I agree. I would guess that the difference would be that you wouldn't "override" the default implementation of an interface method and hopefully you'd get some kind of compiler warning if your code was falling back to a default. So an abstract class is something you inherit from and make use of its base methods on purpose, an interface is something you implement and you get a default implementation as a contingency if your class is missing a method. Eh, total conjecture, I could be completely wrong about everything!
In the end what counts is what the profiler says and how well it fits the use case at hand. Even if C++ wins on the benchmark game, maybe the extra development effort might increase the actual cost if that additional performance boost wasn't part of the project requirements. It is always a matter of tradeoffs. You see this on UWP for example. Whereas the visual layer and graphics engine are implemented in C++, everything else on top of it is mostly using .NET Native. Likewise the large majority of IoT Core samples make use of .NET Native, as it is fast enough for those deployments and set of supported hardware boards.
&gt;The reason you can't find a DbSet&lt;&gt; is because you didn't add one to your context. I didn't write the context. Like I said, I inherited the project and I know that this is the reason. There are dozens of tables and entities in use here but no DbSets... So sure, I can add the DbSet&lt;&gt;, scaffold a migration and such... but when it comes to initializing the database, it'll still fail because the database, as I indicated earlier, will have none of the tables that the view requires...
Turbo Pascal and Delphi IIRC, or are they considered the same thing? Not sure if one was a predecessor or if they were two different paradigms.
I've done the same as you - return the array when I don't want to leave it up to the caller to iterate something like a file.
I feel like adding support for certain existing IList implementations (possibly via a new sub-interface to avoid changing the expected functionality of IList) to accept negative numbers as an index to indicate an index from the end would have been cleaner and more intuitive. The downside would be that it would make certain existing invalid calls to their indexers suddenly valid, if they pass a negative number.
This "bug" affects a multitude of Microsoft products for 10+ years now. It's not really something there's unaware of, I hope.
Self contained Core apps are not 100s of MB. Where do you get that from?
Removed: Rule 7. Feel free to resubmit it, but include more information about what you created, what it does, why you made it, maybe source code, what you learned, etc. Something more to go on than just a screenshot of some command line input/output.
Thank you so much, I did what you mentioned, it solved the problem
 Default implementations of interface members Today, once you publish an interface it’s game over: you can’t add members to it without breaking all the existing implementers of it. In C# 8.0 we let you provide a body for an interface member. Thus, if somebody doesn’t implement that member (perhaps because it wasn’t there yet when they wrote the code), they will just get the default implementation instead. It's game over by design. An interface is a contract : it cannot change. You want to add a new method to interface IMyInterface1 ? then add it to IMyInterface2 (that inherits from IMyInterface1) 
WCF is a code smell.
Yea, this is something that they need to address.
Technically true, I can't remember the last time I didn't use "Treat warnings as errors".
If it's specific to something in your setup, they might not be aware of it. Or they might not be aware of the magnitude of the issue.
&gt; Not to be a stickler, but why have the comments anyways? In this case, the purpose is fairly apparent--but not as much so as you'd think. Off the top of my head I can think of at least one other reason for writing code like that: data filtering. For example, the purpose might actually be analytics on how salaries change over time with a minimum time window of 5 years. Every developer needs to consider both variable names and the code itself ask whether the whats and whys are apparent. If not, a comment narrative can be an easy and effective way of making it so. &gt;This makes it easier to change/reuse the tenured logic too! This is completely incorrect, IMO. One of the benefits of this layout: var tenuredEmployees = employees.Where(x =&gt; x.CompanyTimeInYears &gt; 5); var tenuredSalaries = tenuredEmployees.Select(x =&gt; x.Salary); var tenuredSalarySum = tenuredSalaries.Sum(); Is that the components can be easily re-used and composed. For example: var tenuredEmployees = employees.Where(x =&gt; x.CompanyTimeInYears &gt; 5); var tenuredSalaries = tenuredEmployees.Select(x =&gt; x.Salary); var tenuredSalarySum = tenuredSalaries.Sum(); //re-use salary enumerable var averageTenuredSalary = tenuredSalaries.Average(); //re-use employee enumerable var tenuredEmployeeAverageAge = tenuredEmployees.Average(e =&gt; e.Age); //composition var midTenureEmployees = tenuredEmployees.Where(e =&gt; e.CompanyTimeInYears &lt; 10); &gt;I know it's an example, but I also think Sum takes a predicate Haha yup, it wasn't my example and I wanted a 3-line statement anyway so I left it. I do love combining functions in chains though. It's bizarrely satisfying.
It's definitely a thing you should understand! Here's a quick mini-tutorial. If you want a longer story, I strongly recommend Skeet's *C# in Depth*, I didn't really get LINQ until I'd read it. Let's talk about what a simple `foreach` loop has to do with a handful of inputs. Here's a function every example will use: public void PrintEverything&lt;T&gt;(IEnumerable&lt;T&gt; input) { foreach (var item in input) { Console.WriteLine(item); } } `IEnumerable` (I mean `&lt;T&gt;` but for the sake of my fingers let's not explicitly use it.) is just a contract that the type can return an `IEnumerator`. The compiler is going to generate code similar to this for our function: public void PrintEverything&lt;T&gt;(IEnumerable&lt;T&gt; input) { using (var enumerator = input.GetEnumerator()) { while (enumerator.MoveNext()) { var item = enumerator.Current; Console.WriteLine(item); } } } In order to understand how LINQ can make this spiral out of control, let's talk about how to implement an Enumerator for something very simple: an array. The contract is: an Enumerator type starts in an invalid state. When `MoveNext()` is called, it moves to the next item and returns if that was valid (so in a 0-element array, `MoveNext()` returns false immediately.) The `Current` property should return the current element, with undefined behavior if the current element is not valid. So for an array, we might end up with something like: public class ArrayEnumerator&lt;T&gt; : IEnumerator&lt;T&gt; { private T[] _array; private int _index; public int Current { get { // Throws in a lot of cases, who cares? return _array[_index]; } } public ArrayEnumerator&lt;T&gt;(T array) { _array = array; _index = -1; } public bool MoveNext() { _index += 1; return _index &gt;= _array.Length; } public void Dispose() { _array = null; } } Ignoring the "nice to have" cases it doesn't handle, this works. If you use this with our example `PrintEverything()`, you will get every array element in order. Now here is the magic of LINQ: every LINQ method returns a custom type that has a custom `IEnumerator&lt;T&gt;` that pulls off what it does. So when you call a LINQ method on one collection, you "wrap" the inner collection so you get an enumerator that calls an enumerator. This is the Decorator pattern. Let's implement how `Select()` would be put together: First, the extension method. It probably uses `yield return`, but that is syntax sugar for building an enumerator too. So let's just use enumerators: public static IEnumerable&lt;TOutput&gt; Select&lt;TInput, TOutput&gt;(this IEnumerable&lt;TInput&gt; input, Func&lt;TInput, TOutput&gt; map) { return new SelectEnumerable(input, map); } Ha, well, OK, that didn't show you much. Let's implement SelectEnumerable and you'll see: public class SelectEnumerable&lt;TInput, TOutput&gt; : IEnumerable&lt;TOutput&gt; { private IEnumerable&lt;TInput&gt; _target; private Func&lt;TInput, TOutput&gt; _map; public SelectEnumerable(IEnumerable&lt;TInput&gt; input, Func&lt;TInput, TOutput&gt; map) { _target = input; _map = map; } public IEnumerator&lt;TOutput&gt; GetEnumerator() { return CreateEnumerator(); } IEnumerator IEnumerable.GetEnumerator() { return CreateEnumerator(); } private SelectEnumerator CreateEnumerator() { return new SelectEnumerator(this); } private class SelectEnumerator : IEnumerator&lt;TOutput&gt; { private SelectEnumerable&lt;TInput, TOutput&gt; _creator; private IEnumerator&lt;TInput&gt; _enumerator; public SelectEnumerator(SelectEnumerable&lt;TInput, TOutput&gt; toEnumerate) { _creator = toEnumerate; _enumerator = _creator._target.GetEnumerator(); } public TOutput Current =&gt; _creator._map(_enumerator.Current); public void Dispose() { _enumerator.Dispose(); _enumerator = null; } public bool MoveNext() { return _enumerator.MoveNext(); } public void Reset() { _enumerator.Dispose(); _creator._target.GetEnumerator(); } object IEnumerator.Current =&gt; throw new NotImplementedException(); } } The important work happens down in `SelectEnumerator`. It gets the enumerator for the input collection, then uses its enumerator contract to ask for one item at a time, applying the user-provided map function. So now that we know how it works, let's unravel how passing something with a `Select()` call affects `PrintEverything`. Let's hard-code a PrintEverything() that uses Select(): void Example() { int[] values = { 1, 2, 3 }; var timesTwo = values.Select(x =&gt; x * 2); foreach (var item in timesTwo) { Console.WriteLine(item); } } Here is how to think about what happens there. First, we know the `Select()` call is going to return `SelectEnumerable`. No real work has been done yet. Next, when the `foreach` loop starts, it is going to call call `GetEnumerator()`, which it knows by type inference is going to give it an `IEnumerator&lt;int&gt;`. It happens to be our `SelectEnumerator`. It will, as part of creation, call `values.GetEnumerator()`, which is also an `IEnumerator&lt;int&gt;`. Next, `SelectEnumerator.MoveNext()` will be called. That will call `MoveNext()` on the `values` enumerator and return whatever value it returns. Internally we know this is setting the index to 0. Next, `SelectEnumerator.Current` is accessed. It will delegate to the values enumerator's `MoveNext()`. That returns the value 1. Then, the map function is applied. The result 2 is returned. The last 3 paragraphs loop until the `values` enumerator's `MoveNext()` returns false, the 4th iteration. So we had to involve 2 enumerators, make 2 method calls per step, and add a lambda call, but we also got to express what we were doing very nicely. One thing to note now that you know how `foreach` works: every time you call `GetEnumerator()`, you restart iteration. LINQ does NOT cache results. Let's look at the implementation for something that doesn't work like `Select()`: `ToArray()`. The implementation of `ToArray()` doesn't need to bother with enumerators/enumerables so much. Here's a possible implementation: public static TOutput[] ToArray(this IEnumerable&lt;TOutput&gt; input) { var result = new List&lt;TOutput&gt;(); foreach (var item in input) { result.Add(item); } return result.ToArray(); } Note this isn't recursive: `List&lt;T&gt;.ToArray()` is a specialized method that has the implementation you might imagine. What I'm aiming at here is while `Select()` works one item at a time, `ToArray()` has to do all of its work before moving on. It "breaks" deferred execution. If the `input` parameter happens to be very large, then there will be a big cost to the `ToArray()` call. That gets hidden in a very long chain. We can make a very expensive LINQ chain and keep it in an `IEnumerable`: var items = x.OrderBy(...).ThenBy(...).Select(...).GroupBy(...); `OrderBy()`, `GroupBy()`, and `ThenBy()` are all operations that cannot work one item at a time. That is going to have to iterate the entire collection at least 3 times before it can emit a single result. So if, for some reason, we wanted to use it in an inner loop, we would take that huge O(N) cost and *multiply* it: void DoSomething(IEnumerable&lt;A&gt; left, IEnumerable&lt;B&gt; right) { foreach (var l in left) { l.Children = right.Where(...).ToArray(); } } Every item in the loop has to invoke the chain `OrderBy -&gt; ThenBy -&gt; Select -&gt; GroupBy -&gt; Where` before it can complete. This is a nightmare, and there is zero indication in `IEnumerable&lt;B&gt;` that it contains such a trap. The caller might not even know: their `IEnumerable&lt;B&gt;` might come from somewhere else that hid it. But now imagine this: void DoSomething(IEnumerable&lt;A&gt; left, IEnumerable&lt;B&gt; right) { var collapsedRight = right.ToArray(); foreach (var l in left) { l.Children = collapsedRight.Where(...).ToArray(); } } That will be MUCH faster, because the `OrderBy -&gt; ThenBy -&gt; Select -&gt; GroupBy` chain is executed once, and stored in an array. Now you only have to pay the costs of `Where -&gt; ToArray` on each loop iteration. So especially when you plan on using enumerables as inner loop variables, it can be a good idea to go ahead and "resolve" them by converting them to an array. I say when I wrote the code that created the call chain that led to `IEnumerable&lt;B&gt;`, inside the function that creates it I should strongly consider calling `ToArray()` before returning it. That way the performance problem happens "when you call the function" instead of "when you iterate the enumerable". It's easier to train my brain to think calling `FilterResultsAsync()` will take some time to complete than to train it to understand that `results.Take(10)` could try sorting, mapping, and grouping 400,000 items before it can give me the top 10. There are a lot of things I'm glossing over here. For example: if the data sets are huge, you can't use `ToArray()` because you might run out of memory. But, that said, you aren't going to be able to use `OrderBy()` for similar reasons. Still, it pays to remember that an `IEnumerable&lt;T&gt;` is not a fixed, immutable collection. It is an iterator that does work and restarts every time you ask it a question. 
You can change that exact warning to be treated as error in your build configuration if you want, preventing you to access any nullable var without checking beforehand.
Beyond that, some collections support a negative index. // Create the array. var myArray = Array.CreateInstance(typeof(double), new int[1] { 12 }, new int[1] { 15 }); var asInterface = (IList)myArray; // Fill the array with random values. Random rand = new Random(); for (int index = 15; index &lt;= 26; index++) { asInterface[index] = rand.NextDouble(); } // Display the values. for (int index = 15; index &lt;= 26; index++) { Console.WriteLine("myArray[{0}] = {1}", index, asInterface[index]); }
Depends on the nature of the security update. For example, new cryptographic algorithms are needed from time to time as standards evolve.
&gt; but 4.9 should be I haven't seen anything stating Framework 4.9 will target standard 2.1. I haven't seen anything stating there will even BE a Framework 4.9.
Oh yes, we're estatic about default interface methods. So long as I'm still supporting .NET Framework, that feature doesn't exist for *my* code. But I still have to deal with it when *other* people decide to start tacking on extra shit to interfaces. 
To add to that, sometimes you need to call `GC.KeepAlive` because the CLR is being overly aggressive with collecting stuff. 
Vitamin D supplements fixed that for me.
That could be very useful
Note that CodeBase is an URI and could in theory be non-local (although that doesn’t really happen in practice much).
A friend me pushed me as well. Hahaha! For me, laptop and RepoDb is the cure.
Not really because a lambda doesn’t have a type at all. You always have to provide the type (of either the delegate or expression tree). It’s like when “12” can be typed differently depending on context. 
Lars Bak, also Danish, created the V8 engine for Chrome and co-created the Dart language.
Smell is an understatement.... I smell WCF from across the damn office. (note: I do WCF stuff - kill me)
I don't know about the console stuff, but you may get incrementally better performance by using a ConcurrentDictionary&lt;int, T&gt; instead of a list(?) for ActiveBoards, since then you can avoid some waits caused by locking (probably not that much, to be honest), and you may want to use Task.Factory.StartNew(() =&gt; { /* your code*/ }, TaskCreationOptions.LongRunning) instead of Task.Run *IFF* these tasks usually run for multiple minutes before completing, since the task scheduler will by default only schedule as many tasks as you have hardware threads, so you may be wasting cycles waiting on the locks or network round trips (is the training DB remote?) without other threads ready to use the CPU.
How is adding a class in a minor release breaking semver?
&gt; Default interface member implementations rely on new runtime enhancements That sounds way heavier than adding a new class.
Thanks, these are good tips. I'll implement them; every little bit helps.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [How do I maximize my upload speed?](https://www.reddit.com/r/dotnet/comments/9wrxd8/how_do_i_maximize_my_upload_speed/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I'm scared of meeting him because I would be super awkward (more than usual). I once met Don Syme I tried very hard to cover how big of a fan I am. Outside observers tell me I was weird but less than they expected
I too don't think we should make The Prophet into an idol.
I haven't done it yet but i was thinking of doing the plural sight's MVVM Light course.
If you need a struct there is `ValueOption&lt;'T&gt;`.
It's pretty easy to set up a MVVM architecture and it have a lot of benefits. I would say you have two different tracks: - Go easy and start with something like MVVM Light (Pluralsight have a really good fundementals video on) - Go all-in and read about Prism (https://prismlibrary.github.io/docs/wpf/Introduction.html) Prism is a lot more than just MVVM but I'm sure you will learn a lot about good WPF architecture.
Bla bla bla bla. Again and again and again. Interfaces will still be contracts. Nothing about DIM changes that. And adding a second interface does not solve the main motivation behind this feature, and neither do extension methods or abstract base classes. This has been mentioned numerous times everywhere. Alone in the GitHub issue it has been mentioned over 10 times, yet people repeat their wrong statements all the time.
&gt; I guess I come from a defensive programming school of thought - I'm going to be checking for null (whether it's at the time of assignment or usage) regardless. I'm from the lazy school of thought. Why do **I** have to check it? Why can't the compiler check it for me, based on the type informaton? With this feature the compiler will be able to check it at compile time.
Oh I'd certainly approach him and ask for a picture at minimum. I also might express my concern that he feels a need to talk about super simple stuff as an ambassador to a language rather than do talks which give us insight into.language design. This annoys me a lot. We have the greatest language designer out there and unless we get a competent interviewer we get to watch presentations on how an if check for null changes the type of the variable to non-nullable. We get that! Tell us about the algorithms involved or about these weird corner cases and how you resolved them!
I actually used prism for the one application I made. I always get worried that “frameworks” I adopt are going to go out of support. Do you think prism is going to continue to be supported? Brian Lagunas’ videos on prism are excellent.
On this post, right after, I have spoke with him after the session. I also have took personal picture with him. Link below: [https://scontent-arn2-1.xx.fbcdn.net/v/t1.0-9/46065307\_10210926016740251\_273123335494172672\_n.jpg?\_nc\_cat=104&amp;\_nc\_ht=scontent-arn2-1.xx&amp;oh=34285f1d065419a742ee3e7bb8102fd0&amp;oe=5C73756C](https://scontent-arn2-1.xx.fbcdn.net/v/t1.0-9/46065307_10210926016740251_273123335494172672_n.jpg?_nc_cat=104&amp;_nc_ht=scontent-arn2-1.xx&amp;oh=34285f1d065419a742ee3e7bb8102fd0&amp;oe=5C73756C)
Is order important? Sort first? Unique data? Build up a natural key of every column? if row isn't the same look for moved row? 
They made a design mistake by choosing class for Option type and tuples. For struct tuples you have to use extra keyword `struct` plus not all compiler optimizations work with struct version, at least at the time when I tried F#. Also it seems you have to use `ValueNone` and `ValueSome` for struct option and having to write them with `Value` prefix doesn't just feel right. Using something like `Nothing` and `Maybe` would have been better.
Where do you set AvailableOptionsListSelectedIndex? If it's always zero then you're always going to add the first on the list and remove all the others.
https://youtu.be/laPFq3Fhs8k
Ok, now I feel stupid :D The AvailableOptionsListSelectedIndex is bound to the selected Index of the ComboBox via MVVM databinding. However I called the HandleTriggerStatusEventSubscribers() Method **before** setting the property. Now it is working. I go in shame...Thanks a lot for the tipp anyway
I forgot arrays could have arbitrary starting indices. I should have remembered considering I posted it as a TIL to the programming TIL ages ago.
I agree with the link, though. The great amount of those who can’t learn to check their nulls is the face that languages like Swift and Rust were designed. Safety is better when you simply cannot allow bulls (or have to explicitly opt in for them), because you absolutely cannot forget to initialize the variables.
&gt;great amount of those who can’t learn to check their nulls So this is how the world ends... not with a crash, but with a warning...
Well, in Swift at least it is an error to leave variables uninitialized, and its complex initializer machinery is there to make sure you absolutely cannot use an object pre-init. C# warning about possibly-null uses is a great start to a null-safe language.
Have C# versions had any relationship between the different .Net Famework versions... or is this a first? For the language to be fragmented across different .net frameworks feels messy. Is this unprecedented or am I off?
Hmm if everyone is saying this there must be a valid reason behind it, no?
Don't be so dismissive, he has a legitamite point. The ability to tie implementation directly to the interface does represent a fundamental change to the traditional role of interfaces. It's no longer just a contract since it also defines the implemntation. Its mentioned everywhere since its significant.
The compiler would be able to wipe your butt for you and *not* complain about non-lazy code if they had done this correctly. Instead, they Microsofted it all up and made everything suck. NonNullable&lt;T&gt; would've solved the issue. "But that's a lot to type! I want it built in like Nullable&lt;T&gt; is!" OK, how about we do it like this example: `string!` as a stand-in for `NonNullable&lt;string&gt;`. Now everyone is happy. You can have your null-rejecting reference types, the compiler can watch *those specific variables* with the make-sure-it's-not-ever-going-to-be-null checking that it's doing now, and *all of my null-expectant code doesn't bitch at me until the end of time because of "you kids" and your disturbing penchant for locating yourself on my lawn*. ::eats butterscotch candy:: ::takes a mid-afternoon nap::
&gt; since its significant. It's not significant. That never mattered. It's a silly dogmatic rule without a pragmatic purpose.
&gt;If you think about it, it's rather silly that nearly everything in C# can be set to null by default. `IntPtr.Zero` disagrees.
Ignorance. Just take a look at the relevant GitHub issue, see how often extension methods and base classes are suggested as solutions, while it was made clear several times already that these "solutions" don't work.
I can't C# because he is out of focus :/
Then you might need visual basic :)
The purpose is to make code more consistent and readable, ultimatley resulting in more efficiency. Lots COULD be added to C#, but ultimately isn't because the language designers opt to preserve conventions that promote readable code. &amp;#x200B; You can make a case for default interface implementations, and that would be fair. Instead I see you dismissing criticism as silly, when in reality its not. 
Not sure why you’ve been downvoted. I tend to agree with you. When you’re focused on an issue, the last thing you want (or need) is the cognitive load of edge cases. I think I’ll keep adding null checks unless the compiler warns me not to.
But why? It's literally the same amount of work. You have a view, you have a view model. Assuming it's a window you start from, you pass in the Viewmodel, set the DataContext of the window to that. Now you can add bindings. Need a command, add a RelayCommand, bind the command from the view model to the button. Databindings give you so much freedom (like converters), and it's not more work then adding click handlers.
But I'm left with the impression that you end up needing a lot of those packages anyway and then they're neatly packed together, almost like... a framework.
I wouldn't call implementing all that boilerplate the same amount of work.
What do you mean?
Can you explain why? I'm looking into these kinds of libraries as my current workplace has a patchwork of various hacks to achieve what WCF sounds to solve in a structured manner. From my perspective it looks like many of these robust battle-tested technologies are being re-invented as a massive web of dependency hell.
Haha yep thats pretty much true. Splitting it out also lets them work more quickly on those individual modules though. So one team doesn't really need to wait for another since their code is separated out more. 
I see where you're going with it and I've done that plenty of times. `tenuredEmployees` is a locally scoped var. The logic `CompanyTimeInYears &gt; 5` would have to be repeated every time `tenuredEmployees` is needed somewhere. I suggested containing the logic for IsTenured rather than using comments to describe what the reader can already see in the code. As a suggestion for other readers: consider an Employees aggregate object that exposes a getter for `TenuredEmployees`. ``` internal class Employees { public IEnumerable&lt;Employee&gt; TenuredEmployees { get { return _employees.Where(x =&gt; x.CompanyTimeInYears &gt; 5); }} } ``` ``` return employees.TenuredEmployees.Sum(e =&gt; e.Salary); ``` Can't get any cleaner than that! Oh wait, you can. You could take it a step further and return an aggregate object of type TenuredEmployees. Probably not a bad idea to have a TenuredEmployee class too if they have certain privileges. ``` return employees.TenuredEmployees.Salaries.Sum(); ``` ``` internal class TenuredEmployees : Employees internal class Employees { public IEnumerable&lt;double&gt; Salaries { get { return _employees.Select(x =&gt; x.Salary); }} } ``` Bt using the aggregate objects, you get the benefits of Linq/FP without exposing data directly. I don't think `Where` returns new objects the way a functional language would. It instead returns a new set containing pointers to the original objects. You have to be careful with the analogy between functional and C# lest you end up with accidental parallel data manipulation!
How does it become useless? You'll reduce these annoying null reference exceptions by 95%, this is quite useful even though it is not 100%
IMHO instead of default interface implementations they should have added multiple inheritance to abstract classes. What's the point of not adding multiple inheritance to abstract classes if you can emit a compile error if there is a diamond inheritance anyway?
The new method is added to the interface. But unlike Java, you are not required to expose the entire interface as public members.
see also: [https://safe-stack.github.io/](https://safe-stack.github.io/) &amp;#x200B;
1. WCF is poorly documented. 2. WCF encourages XML configuration, which is inappropriate for most projects. 3. Javascript sucks at dealing with SOAP. Still, it's a lot better than REST for many tasks.
 &lt;StackPanel HorizontalAlignment="Left" Margin="10,67,0,351" Width="280" Orientation="Horizontal"&gt; &lt;TextBox Text="TestTbx" Foreground="Black" Background="Transparent" FontSize="26" Margin="0 0 5 0" BorderThickness="0" VerticalAlignment="Center" Height="{Binding ActualHeight, ElementName=tb}" VerticalContentAlignment="Center"/&gt; &lt;TextBlock Name="tb" Text="TestTb" Foreground="Black" FontSize="26" VerticalAlignment="Center" /&gt; &lt;/StackPanel&gt; &amp;#x200B;
.NET Core is a new Runtime- a rebuild, as the other commenter states. Originally, it was going to be called .NET Core 5.0, to represent it's place "version-wise" with respect to the more traditional framework (4.x right now). But, .NET Core 5.0 was renamed to .NET Core 1.0 before release. It goes without saying, of course, that .NET Core, which is itself a full, standard framework on it's own, should not be confused with .NET Standard, which establishes a Core set of supported interfaces across different runtimes.
&gt; WCF is poorly documented. [If you look at this, would you consider that still the case?](https://docs.microsoft.com/en-us/dotnet/framework/wcf/whats-wcf) &gt; WCF encourages XML configuration, which is inappropriate for most projects. The current production code is consuming XML absolutely everywhere *without any sort of schemas or API contracts*, naively assuming that elements exists and attributes have certain values. All "configuration" we already do is in XML, most functions in the program are taking any arbitrary XmlElement as input yet promptly starts making assumptions about the structure within. The query that is eventually scrounged together in yet another internal XML format, sends a request to a tcplistener which then calls some convoluted wrapper over very simple database API and eventually mangles the response into a payload that looks very similar to the request, all in XML. Lots of string manipulation, millions of items hogging memory. No way to know the format of these things other than manually looking at the response and making your own assumptions, no schema in sight. &gt;Javascript sucks at dealing with SOAP. This is all in C# comfy .NET environment. I'm at a crossroads as to what I should be putting any mental effort into. I don't want to start studying WCF only to realize I'll be replacing a mess with more mess. The thing is, as I hope you've realized, is there is no proper data model in this application, so there is a lot of potential regarding data manipulation here, and I basically have free reign regarding API details. There's so much interesting industry data here, we're talking dozens of projects over years, half a year of data on one project is at least 500 GB.
I disagree, since as of right now JavaScript isn't the only langauge of the web. "Browser as Native" is emerging, and it makes sense that more powerful web apps will benefit from a compiled standard. I'm not declaring the death of javascript, but there is no reason to assume better technology won't ever be adopted. 
I am mostly speaking towards historical opinion .
Looking towards the future, I see less and less reasons to develop for desktop and more reasons to develop for the web. Things like web assembly will inevitably close the gap between native and browser performance... and the cross-platform benefits of the browser make it even more appealing. &amp;#x200B; I'm not saying desktop is going away, but some things done on desktop now will become better suited for the web. That trend seems undeniable. &amp;#x200B; I've not actually tried Blazor, but I have no doubt Microsoft will do its best to leverage their "mindshare" of current .Net developers in front-end development. Given the growing popularity of ASP they have a tremendous incentive to create a .Net based front-end... whether Blazor succeeds or not I have no idea. My complete guess is that Blazor is what they say it is: A research project. Once the future of WebAssembly is more clear, I believe they will use what they learned from Blazor to make a serious run some sort of .net runtime for the front end. 
If there was a .NET Core implementation I would say use it for everything except public facing REST APIs. But there's not and we don't know when that'll change. 
I already asked this, but Can you explain why? I'm looking into these kinds of libraries as my current workplace has a patchwork of various hacks to achieve what it sounds like WCF exists to solve in a structured manner. Would you say WCF services is still the way to go for TCP requests on an isolated intranet?
I've already written a few \[non essential\] apps for my company in Blazor. I really hope it sticks around, because I absolutely love it!
Their poor choices sure did outshine all of the hard work that went into that generation of products. And that is the real shame of all this.
The exact same article we are commenting on, for one.
Its legacy. Will never be ported to Core. They tried to simplify code for communication but even the config files turned into some meta language. Its unnecesary.
Oh right, I see what you mean, yeah. Whichever interface wins out is irrelevant since you'd be calling the method on the interface and not the class - you'd never call MyClass.NewMethod() even if MyClass implemented it - you'd always be calling through the interface .
That greatly depends on how many assemblies from the framework you are using. It can quickly grow to several MBs. If you have several app in your software solution, then each of them will ship with their own copy of the DLLs. Hence 100s of MB.
Well, your username checks out.
It's been discussed to death, really. I have a handful of practical misgivings about this (i. e. interfaces with sealed members are going to break a lot of mocking libs; the use cases overlap a fair bit with the shapes and extension everywhere proposals, which may be more valuable for those of us *not* maintaining large amounts of framework code), but I'm not sure how abstract interfaces result "in more efficiency" or contribute to making "code more consistent and readable", per se. I'm not looking forward to dealing with it in the near term, but it's going to be useful for library maintainers in ways that the alternatives simply are not.
Microsoft didn't say that. It was even on the .NET Core 3.0 roadmap at one point.
what is the difference between a record and a tuple?
I think you're being hyperbolic a bit by saying it's *useless*, but I too hope they'll find a way to solve the problem in the future.
Yes! Someone else who gets it. As a way of providing interface-flexibility for already-published APIs, this *is* a good thing.
More efficient because promoting convention over flexibility means developers more easily understand how a codebase is working. In C#7, I know for certain that the implementation details of my objects will be defined in a base class. In C#8, I have to consider they are coming from an interface. I'm not sure, but what happens when I implement an interface with a default implementation that I don't realize exists? Will stubs still be automatically generated for methods with a default implementation? I imagine now if you are reading source code you have to go to the interface to find the implementation... where as before you knew it came from a class definition. &amp;#x200B; I'm really not sure how I feel about default interfaces yet... And I'm not saying that Convention &gt; Flexibility in all cases... but there is a trade off that is worthy of consideration. What happened to designing programs in a way that makes them extendable without modifying the source code? Why are we including language features that promote the opposite? 
&gt; every single application that should be a few KB in size will not require to ship 100s of MB Your original claim was that **every single application** will now require to ship 100s of MB.
I agree. I've yelled at Microsoft from the sidelines for years about a JS replacement and finally we are getting Blazor. I've also been yelling at them for years about an IE replacement and I don't mean Edge. Google has been making Chrome specific apps for years now. Why can't Microsoft make a Blazor-specific browser which is to say they should put some code in there that will make Blazor dance and sing. Who cares if it's not cross-browser. Google sure doesn't. It's time for Microsoft to get out and lead. Blazor can be a great technology. Microsoft needs to do whatever it takes to make it happen. Microsoft needs to build a better platform (Blazor + browser + .net) and others will follow. 
I like blazor and wasm. But it’s got a long way to go. Try creating a table that can sort, filter in blazor. But running Compiled C in the browser is where it’s going to be....some day. 
Google is deprecating Chrome apps and Nacl for everything except Chrome OS in favour of webassembly and other modern web things.
Got to see him talk in the 90’s...great man!
Yes. I'm *so* uninformed that I provided reasoning behind my opinion, unlike, for example, *you*.
new language features have frequently required new framework versions. generics required 2.0, linq 3.0, dynamic 4.0, async 4.5...
You'd be surprised at how many people don't even understand 1/4 of those questions...
And with most ChromeOS devices having native Android apk support who knows how any ChromeOS app development will last.
&gt;Q34: What is a Destructor in C#? A huge friggen mess
Back when I was mostly doing C programming I used to ask folks to implement the standard library strcmp (string compare) function as one of my interview questions. A shocking amount of folks couldn't do it. A more shocking amount wouldn't even attempt it. Even students straight out of CS programs that taught data structures in C.
Removed: Spam. Please review and follow the [Guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion)
I still don't understand why we need the ^ operator, and can't use -1 like Python. Another Python-ish thing I'd like is a range that implicitly goes to the end. I imagine it would work like this: var slice = a[3..] *instead of* var slice = a[3..a.Length] 
&gt; var slice = a[3..] I agree. This is nice.
Records can be implemented with classes or structs. The point of records is to easily define an immutable data structure without having to write all the boilerplate code yourself. Ever tried to write immutable data structures with update-operations (e.g. `With()` methods) in C#? It's painful.
What was your answer? Hash function -or- simple length compare, then try character-by-character?
In standard WPF, no. Either use the OpenFileDialog, write your own, or check the control vendors (Telerik and DevExpress are the names I know).
Wouldn't it be a[3..^]?
Int-based indexers are already supported in C#, so making `a[-1]` now mean something different would break backwards compatibility for libraries that make use of that feature. I like the `a[3..]` idea a lot though.
*swoops in uninvited* This is something we’re considering for F#, the funky functional cousin on .NET. We already do the a.[3..] syntax :)
Sadly I cannot use F# in UWP.
Wow! Thank you very much! On the main page I'm planning some welcome text and a picture but no buttons. The tree view is a great idea! You said database query, but is it needed? What about what the teacher suggested me to use a text file?
It is but the thing is everything I've found online indicates I need to add the `DbSet&lt;vwEupReportDisplayPerType&gt; ReportsPerType { get; set; }` but even if I did that, I thought the addition of the model as a table in the Fluent API stuff was supposed to serve the same function as the DbSet but that doesn't seem to be the case. My concern is that I need to add a migration but if the database initialization I did already on a different server is any indication, it wouldn't be added to the database anyway
End up abandoned? Maybe you haven't heard the news, but server side Blazor will be released in ASP.NET Core 3.0 named as Razor Components. Server side and client side Blazor share most of the code.
Tricky and complicated compared to what? Have you used SPA framework like Angular, Vue or React? If you compare it to them it's equal or less complicated. Also compared to JavaScript package management NuGet is like a dream. Server side Blazor that will be released ASP.NET Core 3.0 as Razor Components will change things for enterprise software at least. It has it's cons and pros, one of the big pros is that it has better security model because your "client" code is running server side. This means if you really wanted to, you could do database calls directly in your UI event handlers. Java has had similar in technology called Vaadin for some years now.
I've tried it and didn't experience performance problems. What kind of performance problems did you have? You know that server side Blazor will be release in ASP.NET Core 3.0 as Razor Components? Server side and client side Blazor share more of the code, that means most of the client side Blazor will be supported product.
Hm, I don't think LINQ required runtime changes (.NET 3.5 still used the 2.0 runtime).
As gulbanana said, it's not unprecedented for new language features to require changes to the runtime. What's unprecedented: this time, there _won't_ be a newer runtime that works with .NET Framework. You have to move to Core, which is an altogether different migration path.
Have a parent view model that exposes others as properties. Bind a content control to the property and use data templates to locate the correct view. You can then use messages or events to communicate with the parent. Which in turn can access the children vm's.
I get the theory of that, but I can't say I've come across it in the real world. Are you aware of a good example that supports negative indexes, which doesn't use them to mimic reverse indexing? Also, if there are classes that do have custom indexing rules, won't they need to be updated to work with the new range syntax anyway?
&gt; We already do the a.[3..] syntax :) Nice! I really need to give F# a whirl one of these days. Do you happen to know if that syntax is in the cards for the C# implementation?
Use a messenger.
I’m still confused. I’ve been using cshtml files for a while now with asp.net. How is this any different? 
Blazor is client side and cshtml is server side 
Ahh, thanks.
Let me stop you right there. The premise of debugging by reading the console is wrong from a just a general programming standpoint. Also just bc it’s in the background doesn’t mean you can’t attach the Visual Studio debugger to the process as long as the code is from the same build and you produced symbols and it’s not optimized. Anyways, use a logger. Without any additional code you can write to a file using the built in console log appender. Writing to a log file is safer and persistent. It also doesn’t require you to be interactively logged into the machine to see the results, like if this is scheduled to run or is always running like a service. Also, invest time in learning to use a real logger, not just the console. Nlog, Log4net, etc. these libraries have better options for the log patterns, logger names, context info and log rolling. Then get a separate app like LogViewPlus or Splunk to read read or tail the log. Apps like Splunk will email you if it detects an error. You define an error by what is written to the log and tell Splunk to email/slack me when you see “error”. Use a standard logger like nlog/log4net and this becomes easier bc all your log entries have a “level”, ie info, warn, error. 
The trailing bit state carries, meaning it is applied to the leading bit when you shift. This is essential in things like encryption, where you don't want to lose the state of a bit after shifting.
What if you run it in checked block?
Because it's defined that way: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/left-shift-operator
It's not completely true, Blazor can run in client or server side mode. Client side will work like your basic SPA framework like Angular 2+. In server side mode there is just very thin JavaScript in browser and C# is code is running server side. Example of server side where someone clicks button that increases counter in screen following happens. Click event it sent to server via SignalR -&gt; server side handles event and increases counter -&gt; diff of virtual DOM changes are sent back to browser via SignalR -&gt; Browser updates DOM with diff.
&gt; Are you aware of a good example that supports negative indexes, which doesn't use them to mimic reverse indexing? A coordinate system with the origin in the center. 
&gt; Sure, coordinates can have negative values. But when would you use the [] operator to look things up by their coordinates? Well there are many reasons to access coordinates in a coordinate system. For example in Image Processing I could have the indexer give me pyramid representations where 0 is the current scale. Or I could access kernels around a ROI in signal processing. 
To me, the difference is too subtle on the exclusive. I would not notice it scrolling through the code unless I thought it might be the issue.
Yeah, those seem like good examples. Still, in those scenarios it seems like those indexing schemes aren't really compatible with indexing from the "end". At least in the kernel case. I'm less sure about the pyramid example. I'm curious, what do you think?
Yes, it introduces you to some ideas which are used in different architectures/scopes, such as dependency injection, relay messengers, and so on.
https://github.com/AvaloniaUI/Avalonia looks like an option
Thanks, will take a look
Splunk integration seems a bit overkill for 3 small apps running locally
REST? Its outdated, inflexible and also legacy. Try GraphQL, it at least have a spec to follow and have things like Swagger/OpenAPI integrated at its core.
Write to the Windows Event Log: http://www.daveoncsharp.com/2009/08/writing-to-the-windows-event-log-using-csharp/ 
Tostring
I was basically looking for an awareness that C strings were actually null terminated character arrays and the looping character by character approach with the associated pointer manipulation. Anything more advanced than that would have been gravy.
I think Xamarin Forms work in Windows. Linux (GTK#) and Mac versions are in preview.
https://github.com/ElectronNET/Electron.NET Electron allows you to create a cross-platform desktop app using web technologies. Electron.net is the same with asp.net core
I’m just explaining what can be done once it’s properly logged. 
Whoa, that's a bit heavy, isn't it? We have [MemoryMappedFile](https://docs.microsoft.com/en-us/dotnet/api/system.io.memorymappedfiles.memorymappedfile?view=netframework-4.7.2).
You're thinking of rotate left. The &lt;&lt; operator is a shift left.
&gt; C strings were actually null terminated character arrays Ooh yeah. Good one. I always forget about the null terminating character. And then at my very first run-time, *crash burn*... I'm like, oh yeah: Null Terminating character marks the end of the string. (I always take that one for granted working in high level languages...)
You're right my bad. I wonder why c# doesn't implement rol and ror
Is it possible via ML.NET to identify sentences with same meaning? Or does any one know any python ML library which can do it for me! Examples or link on it will be highly appreciated! 🙂
As others have said, you need to call `ToString()` to concatenate. However, I'd also like to suggest using string interpolation which will call `ToString()` anyway: bm.Save($"{txtFP.Text}{Guid.NewGuid}.MP4"); The $ tells the compiler that the following string is interpolated, ensuring that code in the { } characters are evaluated to a string in the right position of the final string result. I rarely use + or string.Format since I learned about string interpolation. You can even pass string arguments to ToString if the type supports it: //contrived example -- I'd just call ToString("N") directly in the example but I wanted to show how to pass arguments to `ToString(string arg)` in the expressions var guidText = $"{Guid.NewGuid:N}"; Hope this helps.
&gt;and beginner C# game developers will never truly learn what LINQ is other than "bad, do not use." *"LINQ Considered GOTO"*
It's great. My main issue is that I cannot get XAML previewing, which slows me down when making UI. Xamarin Live Player does not work for me. Can't get the previewing to work inside Visual Studio. Saw Gorilla Player on the Xamarin blog and can't get that to work either. So that's annoying. WPF support is often a bit dodgy with UI, but WPF is in preview, so I can't complain. Works pretty well there. Works excellently on Android. MacOS recently had a bug that crashed your app if you used a NavigationPage with an Entry, and tabbed out and then back in. Took about 2 weeks for them to roll out a fix contributed by a community member. MacOS is apparently production ready so that was a bit of a serious, game-breaking issue that seemed to be pretty low priority. I also understand it works very well on iOS. I use Forms, having migrated from Xamarin.Native. Much better experience in my opinion.
&gt;The only major issue left is the designer just simply doesn't work. Have you tried Gorilla Player? I saw it on the Xamarin blog but can't get it to work. I'm using a shared project for my Forms solution, and reading through the error logs I got from Gorilla Player it seems that the shared project may be my issue, but I can't find anything anywhere saying that shared projects are not supported with it.
Lookup “Sentiment Analysis”. 
Thanks, but that’s an error reporter, which I have already made years ago. My error reporter already supports email and SMS, encryption, it doesn’t save the same report twice, it will save a report locally if it can’t be sent and when the app starts, it will try to send them again. Reports can be try to be sent 3 times, after the third try they get deleted. Also there are several protective features to prevent spam such as only uploading 5 reports a day and deleting cloned reports. My reporter automatically collects the exception, inner details, and provides the user with more data as well for collecting a good amount of information about the users computer and the software itself. My reporter also supports localization and high contrast themes. It’s plug and play too and also works on app crashes as well. You know the error reporter that shows itself when your app crashes? Think of that but on steroids. I normally use it in every project, but for this one, not a good idea.
Think of the numbers: 2, 4, 6, 8, 10, 12, ... There's a pattern to these numbers: They always increase by two. So this number range follows a specific pattern. That's how it is here. Does the instance `p` match the specific pattern `Student { Graduated: false, Name: string name }`?
I think it has to do whether referencing something that is relative or absolute. If there is no converging limit to a series (morphologically) then of course the "end" is sensibly irrelevant :) 
Thank you for your reply. But how are they declared? How do I write code using a pattern? Where can they be used? Is a pattern always introduced by the keyword "is"? Can you point me to a comprehensive article about them?
[Check out this link.](https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching)
I'm interested bin machine learning for use in log analysis. Any good material out there for this?
Looks like they've been making (some) progress on that. https://github.com/dotnet/corert/issues/6055#issuecomment-421032358
As the article said it's probably since they feared making breaking changes to the .Net Framework CLR that was holding them back on new features that Core has. It's probably the same reason why it's starting to lag behind since it's now focused on stability for older clients than being on the bleeding edge which has bigger changes of breaking changes but still safer on .net core due to side-by-side installation feature of the SDK compared to the central .net framework installation. Though I do still hope framework would get those features albeit in the farther features as it'll still have use cases for it I'd bet.
You can create an array with a different lower bound (e.g. start at -5 instead of 0)
Try sysinternals tools. You can record and dump memory etc. of a process. Then you can start to find patterns. 
That, plus it fucks up any parens counting return ([1..3), [4..5], [10..18))
Server-side Blazor is of no interest to me. And if they're just going to cram C# into HTML rather than develop a better UI framework like Silverlight then client side Blazor isn't any use to me either.
I love how everything that isn't "cool" or "hot" is automatically labeled as "legacy".
Thanks to both of you who provided this link. That's helpful, but it does not discuss the syntax in the original example, in which a pattern is used as a shortcut for something like this: IEnumerable&lt;string&gt; GetEnrollees() { foreach (var p in People) { // if (p is Student { Graduated: false, Name: string name }) yield return name; if (!p.Graduated &amp;&amp; p.Name != null) { yield return p.Name; } } } From the context, I gather the following: The expression in curly brackets is an extension to the familiar use of "is" to test if an object is an object of a specific type. We already know p is a People object and Student is a subclass of People. If all we cared about was whether p is a student, regardless of whether he may have graduated or may or may not have a name, we could have just used `if (p is Student)`. Within the angle brackets, we can test values of properties by specifying the name of the property and the desired match condition. In addition, a new variable can be declared containing the result of the match, as was done with "name" here. 
Null is null. It's not a mistake, and it's not unwanted. In fact, it's just one more tool in a good programmer's toolbox. Why destroy tools that work, just because some people are incompetent? I think the disconnect here is an opinion on whether lazy programmers should be allowed to fail or not. Some think they should fail, and fail hard, so that they can learn to not fail. You, and others like you, seem to think we should bend the rules for them so they can fail without hurting themselves. I cannot and will not accept your viewpoint, simply on principle. Giving in to incompetence is a *classic* slippery slope.
It also implies a version where both ends are exclusive, but then it looks like a method call: var slice3 = a(0..4);
That would leave ambiguous syntax, unfortunately, since the following is legal today: void Main() { var t = new Test(); t[end: 10, start:1].Dump(); } public class Test { public string this[int start, int end] { get { return $"{start} - {end}"; } set { } } }
Yes Blazor will be HTML only because that's the only markup that browsers support natively.
I would've been happy if they'd just give us a short-hand way of doing an `if(blah==null)`. Every other language seemingly interprets a null reference as equivalent to false, allowing you to just check `if(blah)`. Now, I understand why C# doesn't do that (it's been explained many times), but would it be so bad to allow `if(blah?)` as a short-form null check?
&gt; Or it's not a compilation error. Weird. Really could've sworn that was a thing. You might be referring to structs, whose fields must be [definitely assigned](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/variables#definite-assignment) before they can be used.
Yes, it would be bad. The vast majority of the time when I see `if(blah)` it is because the developer got distracted half-way through and didn't finish the expression. Especially when it is buried deeply inside a larger expression. Being explicit here reduces bugs.
But `if(blah?)` would be explicitly doing a null-check, just with shorter syntax.
Maybe. I still have my doubts.
No, I was pretty sure this should have yielded a compilation error: string s = null; var x = s.ToString(); I have probably just been using Resharper too long, where I have it set up to create an error (can’t fail a build, though).
 What do you mean horrible for .Net? I use it every single day and there are nothing I have problems with, just a few convenience things that VS does that I don't get in VS Code, but that's it.
Give me a break. The best error handling prevents the error from happening. This is as true in language design as elsewhere.
There's two primary things going on here. The first is what exists today: `p is Student`. This is a convenient shorthand way of checking if the particular instance of `p` is a `Student`, which you'd otherwise do like this: ``` var s = p as Student; if (s != null) { /* Something with 's' */ } ``` The second part, `Student { Graduated: false, Name: string name }`, is far more intricate. I like to think of it like this: * You pull apart an object's structure * You can make an assertion about that structure (e.g., that `Graduated` is `false`) * You can get a variable that refers to the value of a piece of that structure(e.g., `name`) So there's really three things you can do here in a single line. Doing this today requires a few `if` checks and a variable assignment. The thing to keep in mind here is that this is still all based on subtyping. If your object model is not inheritance-based, then it's not likely that you'll use this feature.
This.
That syntax is from C# 8.0, which is not yet released. The link will update once C# 8.0 is released. You can find more information about the upcoming Recursive Pattern here: https://github.com/dotnet/csharplang/issues/45 And in general about upcoming C# 8.0 features here: https://github.com/dotnet/csharplang/issues?q=is%3Aopen+is%3Aissue+milestone%3A%228.0+candidate%22
That would be the correct use of the term. A pattern can be simple or can be a complex relationship of multiple classes. Its just not the best use of the term IMO. 
Thanks for the update information. Apparently .NET Native still doesn't understand all MSIL opcodes, maybe they should talk with the Xamarin iOS team. :/
Awesome, just found today's commute material! Thanks
Console app A could log to a file or db, and console app B could check for updates to it maybe?
Maybe Public properties
No, that’s not the same thing as a logger at all. 
I don’t think sentiment analysis really is what they are looking for - isn’t sentiment analysis really more about attitude and emotion of the text? I think the GP might be more interested in topic extraction and more generally NLP than just sentiment analysis.
That’s not a solution because now we have to factor in IO permissions, seeing if the file exists, and if the computer has enough space, and if the computer runs out of space what am I supposed to just tell the user to delete their stuff? The point of a network or direct approach is that anything recurved, resides in RAM and not in a file where so many things can go wrong. I even mentioned this in my post. I’m just looking for a way to achieve IPC using only built in libraries.
Yes, REST needs a replacement. For many reasons in fact. But its age isn't one of them.
Oh no, the blockshit spam is leaking here...
This. I understand that’s roughly Swift’s syntax, and I appreciate how much clearer it makes what’s going on.
Does this problem occur on an instance that's not receiving any incoming connections? If yes, look into places where 'maintenance' type operations are scheduled. Does the number of threads lost per hour scale with the number of requests received? If yes, look into how resources are disposed after responding to a connection. Is the application running behind a load balancer in such a way that connections can be drained from an instance to allow for restarts that are transparent to customers? If so, you may want to just automate your restarts and save a lot of code auditing time. 
Oh, I didn't know Avalonia, it seems pretty nice, I'll probably try it in the future!
Winforms runs on Mono
Here is one option. I've been using it for a while and it works well. http://rainysoft.cc/rainwallpaper.html
Looks cool. But I mean how do you make that program? Like setting an animation as a wallpaper? What kind of concepts do I have to understand? Any ideas?
The setup includes a wallpaper, and you can find several other animated wallpapers at deviantart. https://www.deviantart.com/rainwallpaper/gallery/ 
Not grauenwolf but app loading is slow as heck now. mono.wasm takes a second all by itself. If they can get it so that I can load everything in 250ms to 500ms, then I'm more inclined to be interested.
Not sure of a specific resource, but look into Anomaly Detection.
I know this is 3 months old, and I will keep my place of work anonymous. Literally, there is a severe discrimination against Microsoft and .Net at my company. 90% of the developers here are Java. They're pretty much choking out my team's application slowly. It's getting to the point where we've sat down and discussed our options about how we can stay alive in this company. They have a web based application that is doing the same thing as ours, but has not quite got all the functionality yet. It's terrible to feel like you're discriminated against based on the technology that you use. They've basically told us, sorry we're decommissioning that server and IIS. We're basically fucked and have to come up with a way to address the problem.
BEGIN RANT It's an over-architected configuration mess that attempts to make you abstract endpoint logic while trying to serve all sort of service endpoint needs. I appreciate the sentiment the WCF tries to adhere to, it's just a damn nightmare to maintain and write beyond simple services. Sure documentation is EVERYWHERE, every single damn configuration setting has some one or two line blurb telling you what it is for but no context on it interacts with other settings or any reasonable examples beyond the basics. You try to make a consuming WCF SOAP endpoint with a nightmare WSDL (again, thanks svcutil.exe for failing on anything beyond an almost moderately complicated wsdl - esp. if the wsdl is part of a standard you cannot control, but that is not a failing of WCF) that requires connecting client to provide a client certificate as well as a SAML bearer token with custom assertion attributes that WCF constantly cannot process out-of box. Why didn't I make the security and connection requirements simpler? I can't, because business requires says so and, more important, the standard we are trying to implement is not a standard we created, we just have to adhere to it. Great, maybe make an Message Inspector to try to intercept badly formed SOAP header you cannot control. What?? Not the right place to intercept some malformed data need? Ok, lets make a damn custom Message Encoder to remove some god-forsaken WS-Security Timestamp, that by all means is probably correct, but WCF still doesn't like position, so your custom encoder has to strip it out in transport or no incoming request will ever work (yes, I even files an MS ticket on this very issue 2 years ago with no solution, except a work around i sent them). It's the whole kitchen sink given to you, but the only tools you have to manipulate it is either a very small screw driver or a damn large sledge hammer and anything in between seems to be buried or doesn't exist. Don't get me started on sealed classes because MS thinks you can't build on what they built for you. I just want to bury WCF in a ditch on the side of I-44 outside of Fort Smith and never see it again. END RANT
WCF is just a mess - I am reasonably good at it. I still don;t like it. Unfortunately, for SOAP service processing, there aren't a bunch of other alternatives I know of, besides going back to ASMX files \*shudders\*
And here's [my rant](https://www.reddit.com/r/csharp/comments/9wk9on/whats_coming_in_c_80/e9nf72s), that I see you've already read. It's why I'm interested in WCF in the first place: I'm already in a xml mess but without definitions. So many arbitrary functions making assumptions about their XmlElement arguments. But I don't have to worry about external requests which it sounds like you have to, so all I really want is a neat way to coordinate API between client and server. So; is WCF is inherently a mess, or is it a fair statement to say that companies are digging the holes by trying to make it do everything when they just needed some of it? Or are you forced to use the advanced stuff to do simple things?
Checkout uno! 
Use visual studio, connect to process, use break all and then open thread window and then double click on a thread to inspect call stack - that should give you some hints.
To take it a step further... 1 &lt;&lt; 33 gives 2. 1 &lt;&lt; 34 gives 4... Here is a dotnet fiddle to show the results: https://dotnetfiddle.net/L8ro54
Well, admittedly, I need to do some rather strict, but not beyond specification, security gating of my requests. This is where configuration hell comes into places. Not a lot of good resource to describe the security needs the service needs. I have been able to figure out 90% via trial and error as I could never find specific examples of what I needed. The rest had to be done with custom message encoders and custom message inspectors to get around the some of the addition security nuances that I have no control over with incoming requests. Again this all all part of standard network of clients and consumers that have to adhere to a specific standard. I can find all sort of examples of the service in JAVA, but almost none use WCF. We still use the very BASIC form of WCF when acting as a client to an existing SOAP service. Luckily, in Visual Studio, making a reference to a connected service (that is SOAP and doesn;t have to overly complicated WSDL) works fine. However at that point, we are letting Visual Studio build the boiler plate code and we just instantiate and instance of a class and start calling methods. That part works well. Once you get beyond basic SOAP, it's just driving blind. Again, I don;t know of a better alternative, especially when it comes to SOAP. For other types of services, like REST services, we just use WebAPI. We have to run some TCP-based services for older standard, that we just did a roll-your own, as the message standard that comes across the TCP service were going to be custom text streams anyways. TL;DR - We only have one project that uses WCF to create a hosting SOAP endpoint with security and schema requirements that are very very very specific and WCF doesn't handle them well, even though documentation seems to claim it does.
Also, if many companies and developer \*are\* (again I have no idea if it is just us or many like us) digging holes with WCF - that seems to be a failure of the framework to either provide something easy to adapt to or documented properly. Yeah, maybe it is really awesome, but nobody seems to have the ability to unlock advanced features well.
Harddrive running out of space? Haven't you heard about something as basic as rolling logs? Sheesh... just use something like Serilog.
The idea is simple: The client shows a list of available reports. User picks one. The specific report code read the config file, creates a query and sends request over tcp, as XML . A tcp listener picks it up, extracts the ids from the xml and makes some legacy opc api calls. There is no "security" here, it's a closed intranet. The items it gets back are then picked apart and slapped into xml again - the objects are NOT serialized as their type, the property values are just tacked on as new attributes on new elements added to an XML that looks like the request XML. The response is received and then the fun data churning on the client-side starts before ultimately preparing the data into a DataTable that is added to a SSRS LocalReport's datasource, rendered as PDF byte array and written to a filestream. All I wanted was to just simply make a normal function call that returns defined types. Furthermore this could then be filtered with LINQ and potentially opening up the possibility to use IQueryable and pass Expressions to the service and do the heavy lifting server-side. SOAP doesn't really interest me here, I'm not looking to make any public-facing API, if I did I'd make a separate REST layer that got the deserialized server response and serialized it to json or something, but that's the least of my worries. I'm just trying to find order in the POS code I've been tasked to maintain, without guidance.
You do not need delegates here. The subject of delegates is important in connection with "classical" .NET events declared with `event` keyword which is actually a syntactic suger for having a property and a backing field of a delegate type. These properties use `add` and `remove` keywords for subscribing and unsubscribing handlers. And instance of a delegate type is essentially just a typesafe link to the method. (actually a collection of links to methods). You implemented only one half of the message provider. The point is that message provider provides messages to the subscribers calling corresponding methods `OnNext`, `OnError` and `OnComplete`. So it is you who must decide where provider gets messages from. It can be an observer itself and perform some transformation of the incoming messages, it can notify subscribers when its internal state changes because of some calls to its other methods, or in can provide dedicated method which will eventually initiate the notification of observers like in the example `provider.BaggageStatus(712, "Detroit", 3);`
That article is sending you on the wrong path. .NET events already is an observer design pattern implementation. An event is a delegate that holds a list of observers to notify. [Most modern languages such as C# have built in "event" constructs which implement the observer pattern components, for easy programming and short code.](https://en.wikipedia.org/wiki/Observer_pattern) The example in the documentation you're following is describing PubSub design pattern where subscribers can be ignorant of existing publishers and vice versa. [https://hackernoon.com/observer-vs-pub-sub-pattern-50d3b27f838c](https://hackernoon.com/observer-vs-pub-sub-pattern-50d3b27f838c)
&gt;I wonder why c# doesn't implement rol and ror Because it's pretty easy to implement yourself and it's rarely used.
Seems to filter on `p.Graduated == false` and put Name into a `name` string variable. A lot of extra code still. Would be better: ``` for (Student { Graduated: false, Name: string name } in People) yield name; ``` No need for all the extra lines just to do type checking. Equivalent with Linq: ``` return People.OfType&lt;Student&gt;().Where(s =&gt; s.Graduated).Select(s =&gt; s.Name); ```
If you only care about Windows, [this Stackoverflow post should help](https://stackoverflow.com/questions/1061678/change-desktop-wallpaper-using-code-in-net)
I would not call it a wrong path per se. With classical .NET events you won't be able to notify subscriber that no more messages will be sent - `OnComplete`. If you need to implement `async` behavior in a mode other than `fire&amp;forget`, or want to call all event handlers even if some of them throw an exception, you have to work with delegate's invocation list. If you want to make subscribers weak, you'll have more adventures with classical events. And in multithreaded scenarios there are [issues](https://blog.stephencleary.com/2009/06/threadsafe-events.html) with unsubscriging/notification concurrency.
You can implement and bind everything via FileSystemWatcher.
Creating a file (poor mans IPC) is not a solution. I have a specific way I want this setup. Creating a log file not only is a larger footprint, even if it is session based, but it’s also more unnecessary code when I know there is a proper way already available. It may sound dumb to you, but for me it’s not. I’m trying to learn here, and making random things like this helps me learn new and cool things.
Sounds similar to a Java predicate.
I'm still looking for insights - does my example make WCF overkill?
There is a process called "text/word to vector" that maps strings to a multidimensional sentiment vector: https://github.com/zhongkaifu/Txt2Vec I think you could use this as a starting point - probably this would extend to short phrases or sentences.
If you want a C# job, why is Java at the top of your resume? You should also try branching out and trying [ASP.NET](https://ASP.NET) CORE.. it's pretty sweet and cutting edge I'd say. I've been learning React lately.. It's great and pretty easy to work with. Plus React Native for mobile apps is very easy to use. Ever think about getting some mobile experience? That could open the scope up a little. Might not be as much C# though, but still you can build a C# backend.. Or use Xamarin (I think this is C# too but not sure the demand) to create a mobile app. 
You can just use a shared buffer. This is the consumer producer problem. Your AI application is the producer, so write the string into the buffer, and the second application is the consumer. You keep talking about not wanting a log file, and this solution does not involve a log file. 
I saw the video, looks cool! But why use monogame? 
I use this resume for every job I apply for whether it’s primarily a Java, C# or JavaScript position. Many of those job descriptions want experience in at least one of these languages and I’m just listing my experience in programming in general, I know Xamarin and React Native pretty well. I’ve even played around with AR apps in Unity and done some native development on Android using Kotlin and iOS using Swift. I know ASP.NET Core as well. I haven’t the chance the use it at my job yet but I really like it. What do you think managers look for in a C# developer particularly? I’m trying to cater my resume mostly for C#, but writing a description of my skill set is what I need help with. And knowing what projects to build. Sometimes in tutorials, I will see instructors make little JavaScript games or playthings that really don’t give a great scope on what an experienced C# developer is looking for in a new hire. I don’t want to build silly games but I also don’t feel I need to produce massive apps. I’m looking for something in between. I’m writing some things on my own now, but I just need a little more guidance.
If you want to dig deeper and like video: https://channel9.msdn.com/Shows/On-NET/Reactive-Extensions-for-NET-Developers
I solve it!!!, all i have to do was &amp;#x200B; private void ClearAllButton\_Click(Object sender, EventArgs e) { DrawingArea.Refresh(); }
I'm currently learning C# after learning Javascript and whatever this LINQ stuff is..... looks like black magic. I figure you need the using System.Linq line to do it?
Yep. LINQ is good stuff. You will use it a lot.
Can someone explain to me why go out of the way to use an MVC template to then go using all of these other technologies? 
You can create an interface, something like IOpenFileDialog, with a method for retrieve the file. In your ViewModel constructor add a parameter of type IOpenFileDialog and use it in your VM code. Create a class that implement IOpenFileDialog and pass an instance to your VM.
those runtime enhancements are implemented in .NET Core, not .NET Standard. &gt;The .NET Standard is a formal specification of .NET APIs that are intended to be available on all .NET implementations. The motivation behind the .NET Standard is establishing greater uniformity in the .NET ecosystem. ECMA 335 continues to establish uniformity for .NET implementation behavior, but there's no similar spec for the .NET Base Class Libraries (BCL) for .NET library implementations. &gt; &gt;The .NET Standard enables the following key scenarios: &gt; &gt;Defines uniform set of BCL APIs for all .NET implementations to implement, independent of workload. &gt;Enables developers to produce portable libraries that are usable across .NET implementations, using this same set of APIs. &gt;Reduces or even eliminates conditional compilation of shared source due to .NET APIs, only for OS APIs. &gt;The various .NET implementations target specific versions of .NET Standard. Each .NET implementation version advertises the highest .NET Standard version it supports, a statement that means it also supports previous versions. For example, the .NET Framework 4.6 implements .NET Standard 1.3, which means that it exposes all APIs defined in .NET Standard versions 1.0 through 1.3. Similarly, the .NET Framework 4.6.1 implements .NET Standard 1.4, while .NET Core 1.0 implements .NET Standard 1.6. https://docs.microsoft.com/en-us/dotnet/standard/net-standard
To give you an actual answer: because those are the semantics of the x86 bitshift instructions. Giving them any other behavior would require emitting code to produce that behavior, severely impacting performance of the operation, with no compelling benefit to doing so.
Speaking from experience, using MVC Views as catalysts to inject data into the front end is very easy. You have the model in the view, and all you have to do is serialize it to Json and you have it wherever you want.
Not an answer for the OP, but... COM interop may be an old technolagy but I'm using it so I can make new GUI's and classes for an enterprise application written in VB6 and I don't think I'm the only one :)
Interop/pinvoke is still supported and present in .net core. In fact if you need to interop with a native library from .net, and do it across mac/linux/win/arm you can do so with the standard interop attributes. Unfortunately, I haven’t seen new documentation or literature that explains this in depth, but existing text/material still applies. Checkout existing open source libraries that use interop such as Cross platform .net standard wrapper around libuv https://github.com/StormHub/NetUV Cross platform .net standard wrapper around chakracore https://github.com/BaristaLabs/BaristaCore Binding for libcurl https://github.com/stil/CurlThin
That is the base template, which will run every 5 minutes. Take a look at these samples to be able to what you want to: [Azure Function](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-storage-table#input---c-example---iqueryable)
I used monogame because my original vision was to allow people to do whatever they wanted in the background. Using monogame, you can animate/simulate whatever you want - even a video game - on the wallpaper. I always was planning on implementing a pong game to play in the background while I write essays/work/etc :P I could have gone with "raw" sharpdx, but that would have reduced coding productivity for background scripts. And GDI from winforms isn't really the best option for things that might well require a solid 60FPS.
Okay...i didn't understand half of the stuff you just said but cool cool lol. So my idea is to get the frames from a gif and continuously set as wallpaper? How does that sound? I'm guessing it would hog memory like crazy and shit on the processor. 
&gt; I use this resume for every job I apply for Big mistake. When I’m flipping through many dozens of resumes I’m looking for the skills I want, and if I don’t see them immediately that resume goes to the trash bin. Long ago, when I was applying for jobs I would customize my resume for every job I applied for to highlight the skills they wanted. The results: I got an interview almost every time I applied, and often turned down offers.
I've found using a framework makes having complex functionality on pages easier. I usually end up using mvc to bootstrap data into the mini apps. But I agree that this is Overkill if there isn't much going on on the pages
Yes this is the strategy I am moving toward.
Yeah. I'll try it out. Thanks!
As far as as reviewing resumes you took a lot of space to list out technologies and frame works . That could be condensed in to a small bulleted list. Anyone can acronym vomit all the standard tech stack frameworks onto their resume. What stands out is a resume that highlights a firm grasp of software engineering principles. The resume should show you understand and have used design patterns, know what dependency injection is, know how to gather specs and write requirements and design documents and understand the software life cycle including test validation and deployment. Also if you are going to claim full stack you better put some database and nosql experience as well. Also, don’t list a tech or framework unless you’ve really used it and know it. Typically we stay away from pedantic questions that are a google search away, but when you list 40 frameworks prepare for a deep dive into at least one at random. Focus less on the technologies and more on the teams you’ve worked on and processes you’ve improved. As far as portfolio I would rather see a single well documented, unit tested WPF todo app with a working installer that i can clone from github, build and run in one pass over 20 machine learning ego inflating half assed projects any day. 
I’ve done deep dive interview questions in .NET interviews and I could answer just about every question. I’m very confident when it comes to in-person and on the job. Translating that to paper in an organized fashion is still my hang up. But thanks.
Am looking for already implemented algorithm which can do this comparison for me? Is there anything like that? In .NET or python? 
Done. Please have a look at PR. 
My condolences.
&gt; COM and P/Invoke P/Invoke (Platform Invoke) is just invoking native code from .NET. [This Stack Overflow answer](https://stackoverflow.com/a/19450830/1600) is a good example. So on Windows, there's a library called `User32.dll` that offers a method `SetForegroundWindow`. To call it from C#, I first declare its existence: [DllImport("User32.dll")] public static extern int SetForegroundWindow(IntPtr point); And now I can call it as if it were a .NET method: Process p = Process.Start("notepad++.exe"); p.WaitForInputIdle(); IntPtr h = p.MainWindowHandle; SetForegroundWindow(h); // this method is called outside .NET! Notice how `SetForegroundWindow` doesn't have an implementation body (it just ends with a semicolon `;`, rather than a block of braces `{}`), how there's an `extern` keyword, and how there's a `DllImport` attribute. There's further details to this, such as how to handle more complex types. But this applies to general native code. For COM in particular, you'll typically use VS to have it generate an interop assembly for you, after which you can more or less instantiate COM objects as though they were .NET objects. &gt;I don't understand how it fits in with WCF or .Net Core. You'll have to ask a more specific question than that. For WCF, I really don't know what you're asking. Calling native code doesn't overlap much with a transportation mechanism like WCF. (I hope you're not trying to call native code _remotely_?) For .NET Core, you have to keep in mind that this is literally _native, platform-specific_ code. The above `User32` example obviously won't run at all on Linux or macOS.
Facebook group? No thanks.
Thanks :)
No IPC here. Your service (AI what ever) is creating that log. No other app is reading that log. It's really bad to log into memory, what if your app crashes? You will lose the whole log. Also it's nice to just able to open log files and see what's happening in the service. If you want client to get access that log you should use Serilog and create your own ILogEventSink to also log into memory (remember to make it thread safe). You should also use rolling file sink with the memory sink you created to log to file as well. Then you add API to your service. I would suggest adding ASP.NET Core to your service and create API with it. Use that API to from client to access that memory log from the service and for other communication with your service.
You're making your life more difficult by making this a multi-page MVC based app. A SPA with a REST API would is much easier to develop with.
Cool. Cya there! 
Yes, I can. Using just razor, javascript or jQuery is fine if it fits your needs. There's nothing wrong with it. But, if you have complex dynamic pages, doing all that in Javascript or through multi pages will diminish your user experience and make a lot of spaghetti code, especially in jQuery. The best example I could give you is GitLab. They use Vue heavily in their projects and you can notice they don't have an SPA. They even wrote a blog why they choose Vue this way and how it helped them push their business forward. I personally build my applications as SPA's and API but I have noticed that a lot of people and companies do it this way and that is perfectly fine :)
Your description is a bit vague, but you're probably using a control that inherits from the [Selector](https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.primitives.selector) class like a [ListBox](https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.listbox). That means there's a dependency property you can use called 'SelectedItem'. Option 1: the VM of your view/page handles the retrieval of the data and updates one of it's own properties called for example 'CategoryDataView' of type [ICollectionView](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.icollectionview). The other control, which is probably a control that inherits [ItemsControl](https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.itemscontrol) like [DataGrid](https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.itemscontrol), should bind to this CategoryDataView dependency property. Option 2: your other (custom) control binds directly to the 'SelectedItem' property and handles the data retrieval in its own VM. Option 3: probably not the right solution, but it works. Use MVVM Light's Messenger or Prism's EventAggregator to publish/subscribe to events.
That doesn't invalidate my point.
Couple of options. Build the VM with a reference to the second VM so it can talk to it. This is not a great idea as it gets complicated fast and it becomes difficult to untangle as the design changes. Second is use a messenger to send messages from one VM to another. There are two ways to do this. Either have a public messenger which all VMs use, this is a great option where a number of other VMs might need to be updated. The second is to use a private messenger shared only between the (in this case) two VMs. Messengers solve a lot of MVVMs problems. I use a ViewFactory which manually assembles views and viewmodels. A button on a view can tell the viewmodel to call the ViewFactory **with** a reference to its private messenger. The new view is created, with the viewmodel and the private messenger is passed into the viewmodel. The two can now communicate using decoupled messages. A message is just a class which abstracts the topic of conversation between them.
Oh, third option which will work if this is a subview with its own VM. So for example you have a usercontrol which has its own viewmodel, which has a child usercontrol which has its own viewmodel. Here you can create the parent viewmodel, and have a property on that viewmodel which is an instance of the child viewmodel. When you bind the parent view this datacontext will flow down to the child view and thus the child viewmodel. At this point you bind the child viewmodel using a path that includes the property you set to the child viewmodel. i.e. ```Path=ChildViewModel.ThisIsAPropertyOnTheChildViewModel``` 
That explains a lot; no wonder the other articles I read didnt seem to tie up with the first one. Given my lack of experience would you suggest sticking with the standard event approach, rather than the PubSub I was attempting? &amp;#x200B; Also, what does the ? do in the invoke line? I havent seen that before. 
Not exactly. There was a blog recently here or programming subreddit that making SPA's takes a lot more time and makes it more complicated. I believe it is a trade-off and it depends what kind of application you are building. This is not the one as I did not save it but there are a lot of articles on this topic. https://www.amberbit.com/blog/2017/9/20/why-you-should-not-build-your-startup-as-spa/
I seem to have got myself confused between two different approaches to the same (similar?) thing; and without realising they were two different things! Do you think I should go for the classical event setup or stick it out with this approach? &amp;#x200B; I'll check that video out, thank you. 
Question mark is a coalesce operator. Next action is performed if value is not null. `SomeValue?.SomeMethodCall’ is equivalent to ```CSharp if (!(SomeValue is null)) SomeValue.SomeMethodCall ```
This design is much better than what I was thinking about. The treeview is ready, I also created the property grid, now I will have to find out how to put in the search on the treeview, how to bind the nodes to different data, and how to bind pictures to the nodes. But at least you showed me a way and I really appreciate it!
I assume you have the same problem as I had. You can use the following line to use xterm instead of xfce4-terminal: export GNOME_DESKTOP_SESSION_ID=1 &amp;&amp; monodevelop 
Ah! Understood, thank you for clarifying mate. 
&gt; export GNOME_DESKTOP_SESSION_ID=1 &amp;&amp; monodevelop Wow! I worked! Thanks a lot ;D
Is it possible to pipe the output and filter it? e.g $sb.ToString() | ? { $.Success -not $True }
They are trying to make initial client download small as possible. But for fast app loading, downloads need to be versioned properly and correct cache header need to be used, so after initial load everything is loaded from local cache without requesting anything from server. When doing this only initial load will be slow.
And btw have fun with angular just, it's fucking garbage, but I guess your choice in language reflects your personality.
They all do the same thing. I use ms test because itss easy.
Drop the `.Result` and properly `await` your call. Since C# 7.1 you can have an async `Main` method.
Surley this wouldn't solve my problem? Also is async Main method supported in .net core 2.1?
It's possible that it solves your problem. You're blocking the thread. And an async Main method is supported in whatever runtime that supports Tasks. It's a language feature.
running [http://api.icndb.com/jokes/random](http://api.icndb.com/jokes/random) through the browser goes fast
I would advise giving xunit a try if you've not already. It's just as easy but seems to have less boilerplate. It also has parameterised tests out of the box (I know this is coming for mstest soon or maybe already here but it's in xunit and is easy to do)
There are two options that I can see. 1) Pipe the console output and attempt to filter out lines that contain text you don't want to see. This may or may not work depending on if the "Test passed" text is on the same line as the name of the test etc. This is the quick and dirty option. 2) Save the test results to a "TRX" file using the /resultsfile command line option. This file is XML format. You could then load this file up into powershell and parse and output only the elements you wanted to output. For the long term, have you considered some form of continuous integration solution. I use Azure DevOps a lot, and the results of the build display any failed tests, but doesn't display passed ones. Also, not sure why you are using "cmd.exe" to run a command from within powershell. If you have the command you want to execute in a string then just do this: $cmd = "C:\...\MSTest.exe /testcontainer:Test....dll ... /testcontainer:Test...dll" &amp;$cmd
+1 on xunit, I really like their Fact-Theory approach. &gt;It also has parameterised tests out of the box (I know this is coming for mstest soon or maybe already here but it's in xunit and is easy to do) It is already in MS test framework as of at least a year ago: [link](https://blogs.msmvps.com/bsonnino/2017/03/18/parametrized-tests-with-ms-test/).
Your initiation of this pedantic rhetoric is what shows your internal shit. The choice you made to squalor yourself with angular just reflects it thoroughly. FB is never ideal ,but it is there and functional. And why would it not be personal. I am taking the time to try and actually help people. If anything you are the childish one for shitting on that. Do something useful with your life or Go excuse yourself from existing. As for what this shows of my personality, it shows I don't want to waste my time on your moronic outburst of displeasure. You never had to say shit in the first place. You don't like FB whatever it's not an excuse to shit on some one else. Grow up yourself. 
Unfortunately still the same error. 
MS-Test has parametrized tests since VS2015. It's basically the same syntax as xUnit. Use [DataTestMethod] and [DataRow(...)] instead of [Theory] and [InlineData(...)].
Ah ok, yeah, I hadn't kept up to date with it after switching to xunit. I knew there was talk but didn't keep up to date. 
The standard event approach is relevant is almost any code I can think of. I have a hard time thinking of a .NET library that doesn't have classes that expose events - they're everywhere. Get a firm grasp of how that works. The PubSub stuff becomes relevant way later when you want decoupling, especially between different processes, or threads within a process, but there are so many ways to implement it that more often than not you'll be picking existing solutions.
I'm sure with this attitude you'll do great helping other people.
Did it for years before I met your sorry ass. 
It depends on the skill set of the people involved in making it. If they are good at making SPAs and prefer working on them, then they will of course be more productive making SPAs. Thank you for the downvote though I guess.
&gt;In the past I have put applications on our shared drive, and created a shortcut to the executable on the user's desktop. This is great if I make a change, everyone's version is updated, and I do not need to go to each machine to update the application. This is bad if the user is off our network. Build it in ASP.net and you have a single version + acces from everywhere.
Of course, there is more than one factor at play here. I didn't downvote you, your comment is perfectly valid :)
&gt;/usestderr It says it doesn't exist for this variable. If I GetType() then I get "System.Object\[\]" and: &amp;#x200B; &amp;#x200B; IsPublic IsSerial Name BaseType \-------- -------- ---- -------- True True Object\[\] System.Array
Just from seeing the OP's comments in this thread, I would avoid this group by a thousand miles, as long as he has some position of power in it. I also share u/AngularBeginner 's sentiment about FB. Many people don't have an account, many have only old account, which is not used anymore. I don't know if anything has changed, but I don't think FB has a good interface for pasting and viewing code snippets.
Xunit is far less verbose for passed tests, a bit more flexible than mstest, and pretty painless to convert to, I just migrated 400ish tests in less than an hour 
This code runs with no problems for me in both regular .NET Framework and .NET Core 2.1 on Windows 10, so if you're developing on Mac or Linux, it might be something related to the .NET Core runtime on those platforms. As others have said, you're doing some things that are not recommended (like your blocking `.Result` call) that may be contributing to your problems.
Removed: Rule 5.
Repost, really? https://www.reddit.com/r/csharp/comments/9x7bka/welcome_to_join_us_anyone_want_to_help/ Again: Facebook, no thanks.
No
Then my initial statement holds true: &gt; Make sure you actually have a connection to the target host. You say in the browser it works. Are you using a proxy by chance? Or perhaps a firewall? Corporate network?
Stalking? You again take it very personal and inappropiate. I'm subscribed to /r/csharp and I usually order by /new. So naturally your repost appears on the top of the list.
https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app-xplat/?view=aspnetcore-2.1 ?
Yet again you are choosing to post here when you have no motive to beyond being rude and harassing me. 
But you can't do Framework GUI apps with VS Code?
If you think I am rude to you, then report my posts for violation of this subreddits rule 5. If you think I am harsasing you, then report my profile to the Reddit mods.
Adding comments to your posts on this sub-reddit alone counts as following you "around the internet" and harassment? Really?
https://www.google.com/search?ei=vn3tW6aJAcH4tAXN86mACw&amp;q=rate+limit+azure+&amp;oq=rate+limit+azure+&amp;gs_l=psy-ab.3..35i39j0i22i30l2.2839.2839..3032...0.0..0.89.89.1......0....1..gws-wiz.......0i71.xKMWLq9UF40 Look for the term "Rate limit" and that should help you
if you cannot see how what you are doing is rude and harassment then you obviously have proven my initial replies from the last post true, i already reported you, and im sure you will be dealt with, just like hancar was deleted from my post for doing the same shit you are pulling now. im trying to set up something, which i have done before for python over quite a long time, to help the public, encourage new coders, and enable people anoter, interactive environment to find help and research or collaborate, but you want to come in and turn it into this stupid bickering for no reason other than your own satisfaction of fucking someone else over. so im going to delete this post and repost one more time, why dont you do yourself a favor, and NOT BE THERE. because i have been reporting your harassment, and im sure eventually the mods will get sick of seeing your name come up in reports every time i post something and you decide to follow me and harass me. 
yes, when you repeatedly show up in multiple of my posts to be derisive and make negative comments, that constitutes "following and harassing."
So we need to join some shady FB group when we already are on a perfect forum for discussions and seeking help? Why would we do that? We have r/Unity3D/ and r/csharp and r/CsharpGames if you need to ask a specific question. And also you speak about 20 people but your group only has 4. And posting and deleting same stuff may count as advertisement\\spam which is surely not allowed here. 
noone HAS TO do anything, it was an invitation, noone is twisting your arm to join or twisting your arm to reply so negatively. i do say twenty, not everyone in the initial post that got the group started joined, as for reposting, maybe i would not have done that if people like you or angular took kept your negative comments to yourself, and let sleeping dogs lay. i reposted because of what you and angular both have now done, and hancar and that dude twep, none of you HAD TO come in and make negative comments just as much as you dont HAVE TO join just as much as you dont HAVE TO read my posts. catch a hint. 
I haven't said anything about HAVING TO. I said NEED. And yes a group on FB that has 4 people after 3 posts on reddit surely shows that barely anyone NEEDS it. I haven't done anything, I just showed you that you don't need to create another place for discussions, as you are already in such a place. And people are here because they prefer this place. You targeting wrong auditory and getting a negative reaction. And then starting to accuse people that didn't like your place. 
There is a difference. If you would say have to - it means that I must join this group whether I need it or not. I say that I have 2 subreddits that amount to 150k+ people that I could reach/that can reach me. This place has tools to share code, can hold more needed information, has less ads. In short it is far superior to FB to become a place for developers to collaborate. Why would I change this place to a FB group? My point is that nobody on this /r will benefit in any way by joining it. So there is no NEED in it's existence.
Yeah I'll give it that, I haven't seen a way to build gui's with it. It's not perfect but I would suspect that Microsoft has it on their list
Yes, I'm using a pretty strict corporate network.
Then likely your browser is configured to use a proxy, and your console application is not. Thus you don't get a connection.
I know that I shouldnt inistiate the httpClient for every request. This is just example code. The "real" code better designed with models, async, controller etc. 
I'm running on a pretty strict corporate network which could be the problem. I'll try the code on my private home network once I get home.
I currently work on a project with similar setup to the one in the link (I kind of wish this was published half an year ago so we could copy part of the setup). We have a small amount of pages where we really need the SPA experience and we don't have enough front-end devs or in general desire to move server code written in C# to the client. So what we do is write MVC views and create a bunch of vue components for example comment thread and use it inside the MVC pages. We also have a bunch of screens linked in mini SPA. BTW if you pay attention Facebook works like this. Some pages like the profile screen are loaded with partial HTML from the server and then some other stuff appears loaded via AJAX.
&gt; A SPA with a REST API would is much easier to develop with. Highly debatable. Especially if the ratio of JS devs vs C# devs favors C# devs.
What do you mean saying " **Web installer**"? &amp;#x200B;
Does this so answer address your question? https://stackoverflow.com/a/602801/516419 If you want to extract the anchor value you'll need to extract it from the controller context or write a custom model binder.
Let me test and see if that would work
Yep. I had to redeploy 4 times, each time it got a little further before an error (timeout in all but 1 for me). Eventually it deployed, and subsequent deploys have gone without an issue. Just keep retrying 
So, old advice, but can be good sometimes, when was the last time you restarted your computer?
ManagerID is probably a numeric column which means you don't need to surround the value with single quotes.
Before I posted this :')
I must've retried 10 times by now, I see a resource group was created but nothing else (no app service, storage account, hosting plan etc)
To piggy back, please don't store passwords in plain text also.
Actually a fan of nUnits more "modern" Assert.That(blah, Is.Blah); but the rest, yeah...
What are the odds that you are being blocked by your network? I just went though the demo that you linked and had no issues with it at all.
Don't use string concatenation to create SQL statement, it's really bad practice and can lead to security and other problems. Use SQL command parameters instead. Just use Dapper for SQL database connection stuff, it's easier to use. You can get it from NuGet. More info here https://github.com/StackExchange/Dapper/blob/master/Readme.md. Are you using ms sql server? If you are, you should use SqlConnection instead. 
Wow! Just about a week ago I started working on something similar but based on Angular. I'm thousand miles from getting anything as concrete as this. Not having any experience in Vue and being relatively new to Angular itself, is there any reason that would make this task easier with Vue than with Angular? You can check my work in progress here: https://www.github.com/kralizek/angular-mpa Any feedback is very welcome! 
Yes use salted password hashing instead. 
Make sure your Azure Dev Tools *and* Visual Studio are up to date. Hop into the Azure portal and ensure that the function and App Service were created properly. Try creating an app service plan and app service manually through the portal and deploying to that. 
Are you using GH deploy, or from VS?
All of the above plus disposing. Wrap the connection and the command in using statements. That way the connection is closed and returned to the connection pool correctly and the command object is disposed of.
 RouteConfig also lets you define custom routes. This means instead of querystring or hashtags, you can call a specific controller and then return whatever view with that “dynamic” value.
Thanks again. I'm studying this, returning to it and getting it better each time. In the meanwhile, I am astonished at your really obvious complete lack of talent for laziness. It is an excellent, long, beautifully formatted post -- and content too! Awesome. return _index &gt;= _array.Length; Should that be &lt; _array.Length; ?
Thank you for your answer!( And sorry for late reply :( ) You said you hired people that haven't coded in C#. What were some factors (except the knowledge with language they were comfortable with) that made you take that decision? What made them stand out from the others?