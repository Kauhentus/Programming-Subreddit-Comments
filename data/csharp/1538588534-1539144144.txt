😂
I wouldn't put an experimental (0.6.0) anywhere near a production environment. I truly hope it takes off across the microsoft tech stack but far too early for enterprise or smaller deployment
Are you asking if you can create a web interface to call your web service (you can, but that's a totally different thing)? Because originally, it looked like you were asking if you can reach a web service that resides at a different URL.
Sign up for a free trial on pluralsight and search "web api C#". There are a ton of different tutorials for all levels just under that one topic. Start with whatever the beginner or intermediate is would be a good start.
A lot of people said the same thing about Core, and the API surface and configuration did change a lot but it DID take off and now its amazing and has really altered the .NET landscape forever. I do hope C# client side is something I can write and rely on some day. Applying the skills and tools I already know on the front end is so much less painful than having to ramp up on TypeScript, Angular, and RxJS just to have a modern front end.
Oh god yeah a C# client side is a dream come true! Less reliance on the absolute quagmire that can become the front end. 
If you don't mind me asking, what sort of development do you do? I see many job listings around me and as a student who graduates in a year or so, I'm trying to gauge my options. So far I think ideally I'd like to be an internal app developer for whichever company I work for. 
That's a good idea. Thanks for outlining a way to utilize both technologies simultaneously. 
Thanks for the in-depth response. As another user pointed out, I can learn [ASP.NET](https://ASP.NET) Core MVC and Javascript at the same time with a [ASP.NET](https://ASP.NET) CORE backend and JS frontend.
OMG he’s seriously gonna do it 
`x is null || x.y is null ? "empty" : x.y` is identical to `x?.y ?? "empty"` both will use `ReferenceEquals`
Who
Create a rest api instead. Then it will be super easy.
Only one of the main developers of .NET...
Message brokers = AMQP, basically.
Don't forget to reference the System.ComponentModel.Composition assembly. Also, I've omitted namespace declarations in the below C# examples for readability. Suppose you have the following class: using System; using System.ComponentModel.Composition; public class FooBar { public static int Count { get; private set; } public FooBar() { Count++; } [Export(nameof(DoStuff))] public void DoStuff(string[] args) { Console.WriteLine($"Args: {string.Join(", ", args)}"); Console.WriteLine($"Count: {Count}"); } [Export(nameof(DoSomethingCool))] public void DoSomethingCool(string[] args) { Console.WriteLine($"Args: {string.Join(", ", args)}"); Console.WriteLine($"Count: {Count}"); } } The class `FooBar` is doing a few things. Firstly, I increment a static counter in the constructor because I want to show you that the same instance of `FooBar` is used when exporting both the `DoStuff` and `DoSomethingCool` methods. Secondly, its methods are attributed with the `ExportAttribute`. In that attribute, I am specifying the name of the `contract`, a string value. This contract name will allow us to grab a specific method that we are looking for (for example, if you had a command called "cg_draw2d", its contract name should be "cg_draw2d"). Each method is simply printing the arguments it received to the console as well as reporting the current value of the counter. Now, these examples are coming from a console application, so I did most of the 'magic' stuff in my application's `Program` class which contains the entry point. Here is my `Program` class: using System; using System.ComponentModel.Composition.Hosting; class Program { private static CompositionContainer Mef { get; set; } static void Main(string[] args) { var catalog = new AggregateCatalog(); catalog.Catalogs.Add(new AssemblyCatalog(typeof(Program).Assembly)); //add more assembly catalogs if you want to import exported types from other assemblies Mef = new CompositionContainer(catalog); //example command args args = new string[] { "DoStuff", "Hello", "World!" }; var command = args[0]; ExecuteCommand(command, args); //example command args args = new string[] { "DoSomethingCool", "Hello", "World!" }; command = args[0]; ExecuteCommand(command, args); Console.Write($"{Environment.NewLine}Press any key to exit..."); Console.ReadKey(true); } public static void ExecuteCommand(string command, string[] args) { var action = Mef.GetExportedValue&lt;Action&lt;string[]&gt;&gt;(command); action.Invoke(args); } } Output: Args: DoStuff, Hello, World! Count: 1 Args: DoSomethingCool, Hello, World! Count: 1 Press any key to exit... In the first few lines, I am configuring MEF. I created an `AggregateCatalog` so that I can specify more than one catalog since the `CompositionContainer` only allows a single `Catalog` type. A `Catalog` is an object that contains all the information about **what types are being exported**. The `AssemblyCatalog`, then, contains information about the types being exported from that specific assembly. In this case, we want to import our exports from the same assembly as the `Program` class (which also contains the `FooBar` type). I then initialize the `CompositionContainer` and assign it to the Mef property to reuse when executing commands. I explicitly set the `args` value just to show what arguments I was using when executing the command. We assume the command is at args[0]. The `ExecuteCommand`method uses the `CompositionContainer.GetExportedValue&lt;T&gt;(string contractName)` method to retrieve an *export* of type `Action&lt;string[]&gt;` that contains the specifed contract name. After retrieving the action, I call `action.Invoke(args);` and the method is executed. Now, the above doesn't cover a few things. Firstly, it doesn't cover aliases. You'll either have to create your own custom attribute that inherits from `ExportAttribute` as well as a metadata interface in order for more than one 'contract name' to point to the same method OR you can create another method with an export attribute that contains an alias and then have that method just forward the call to the "proper" method, like this: [Export(nameof(DoStuff))] public void DoStuff(string[] args) { Console.WriteLine($"Args: {string.Join(", ", args)}"); Console.WriteLine($"Count: {Count}"); } [Export("ds")] public void DoStuffAlias(string[] args) { DoStuff(args); } As far as the custom attribute goes, I've done something like this: using System; using System.ComponentModel.Composition; [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true), MetadataAttribute] public class CommandAttribute : ExportAttribute, ICommandMetadata { /// &lt;summary&gt; /// Gets a string representation of all acceptable aliases separated by the pipe '|' character. /// &lt;/summary&gt; public string Aliases { get; } /// &lt;summary&gt; /// Gets the description of the command. /// &lt;/summary&gt; public string Description { get; } /// &lt;summary&gt; /// Creates a new CommandAttribute instance with the specified name/aliases and description. Aliases should be separated /// by the pipe '|' character. /// &lt;/summary&gt; /// &lt;param name="nameOrAliases"&gt;&lt;/param&gt; /// &lt;param name="description"&gt;&lt;/param&gt; public CommandAttribute(string nameOrAliases, string description) : base(nameof(CommandAttribute)) { Aliases = nameOrAliases ?? throw new ArgumentNullException(nameof(nameOrAliases)); Description = description ?? throw new ArgumentNullException(nameof(description)); } } /// &lt;summary&gt; /// The ICommandMetadata interface is used by the &lt;see cref="CommandAttribute"/&gt; and shouldn't be implemented. /// &lt;/summary&gt; public interface ICommandMetadata { /// &lt;summary&gt; /// Gets a string representation of all acceptable aliases separated by the pipe '|' character. /// &lt;/summary&gt; string Aliases { get; } /// &lt;summary&gt; /// Gets the description of the command. /// &lt;/summary&gt; string Description { get; } } Example usage: [Command("DoStuff|ds", "Does stuff.")] public void DoStuff(string[] args) { Console.WriteLine($"Args: {string.Join(", ", args)}"); Console.WriteLine($"Count: {Count}"); } Going this route, you can do something like this using the `ImportMany` attribute: using System; using System.ComponentModel.Composition.Hosting; using System.ComponentModel.Composition.Hosting; class Program { [ImportMany(nameof(CommandAttribute))] private static IEnumerable&lt;Lazy&lt;Action&lt;string[]&gt;&gt;, ICommandMetadata&gt; Commands { get; set; } static void Main(string[] args) { var catalog = new AggregateCatalog(); catalog.Catalogs.Add(new AssemblyCatalog(typeof(Program).Assembly)); //add more assembly catalogs if you want to import exported types from other assemblies var mef = new CompositionContainer(catalog); mef.ComposeParts(this); //this will fill properties attributed with the Import or ImportMany attributes. //example command args args = new string[] { "DoStuff", "Hello", "World!" }; var command = args[0]; ExecuteCommand(command, args); //example command args args = new string[] { "DoSomethingCool", "Hello", "World!" }; command = args[0]; ExecuteCommand(command, args); Console.Write($"{Environment.NewLine}Press any key to exit..."); Console.ReadKey(true); } public static void ExecuteCommand(string command, string[] args) { var handler = Commands.Where(x =&gt; { string[] split = x.Metadata.Aliases.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries); var aliases = new HashSet&lt;string&gt;(split, StringComparer.OrdinalIgnoreCase); return (aliases.Contains(command)); }).FirstOrDefault()?.Value; handler.Invoke(args); } } It can get complicated, but adding a new command becomes as simple as adding a new method (return type void, takes a single `string[]` parameter) and attributing it with an appropriate `CommandAttribute`. 
By posting 280 char snippets on twitter! One tweet at a time! \s
[Youtube video of the session](https://www.youtube.com/watch?v=wgHIkdUQbp0)
The thing is the webservice is something our ERP system generates, and it can't generate rest api's So if i cant call the webservice with an URL, I would have to make something entirely different.
Yup tabor is greatnesses still doing God’s work over at his newer site [devU](https://www.devu.com). He has courses on MVC, .NET Core and anchor of other stuff.
\&gt; discusses an idea on a forum dedicated to the stack/lang he chose \&gt; spend less time wasting time neat.
This is where I'm currently at! (After only taking one college course and teaching myself a bit).
Good point. Thanks.
Can use SignalR as it has a Java client now https://blogs.msdn.microsoft.com/webdev/2018/08/23/asp-net-core-2-2-0-preview1-signalr-java-client/
 tokenSource.Cancel(); ct.ThrowIfCancellationRequested(); This will always throw and make the rest of the method pointless.
Removed: Rule 4. You may need to include the code/API you're using to currently retrieve values asynchronously to help give people something to go on. I don't know if there's synchronous versions for these methods. For example, I can't find a synchronous version of "OnceAsync" in the source code. Perhaps you may have some luck though wrapping/calling the async methods in a synchronous fashion: https://stackoverflow.com/questions/9343594/how-to-call-asynchronous-method-from-synchronous-method-in-c
Awesome write up, wish I could give you gold. Can’t wait to dive into this.
Yikes ... yes, you are correct. &amp;nbsp; I'm fine if I just get rid of the ct.ThrowIfCancellationRequested();? &amp;nbsp; I've tested the code and everything works; I can't test the timeout until it's in our production environment (yep ...)
Call the Web service from the rest api.
The windows service this comes from was build in VS2010; I don't think I have access to async/ await. At least that's what the quick amount of research I did told me. &amp;nbsp; The issue I'm attempting to solve is having the "timeout" move things along after time expires. The old code would hang the service and all requests would be queued until a service restart. &amp;nbsp; If this will accomplish that, then it's a good start. I'm certainly going to be looking into this stuff a bit more now that I've stumbled across it.
again?
I managed to solve it by simply using SignInManager.SignIn after logging in with the access token as seen here: https://what.thedailywtf.com/topic/23000/converting-an-owin-token-to-an-owin-cookie/5. It didn't seem like it would work, but it did!
So, among all of the solutions, I'd suggest either SignalR (As pointed out, there's a java client now!) or GRPC. I'll note that with GRPC, You can, in both [.NET](https://bartoszsypytkowski.com/c-using-grpc-with-custom-serializers/) and [Java](https://github.com/yugui/grpc-custom-serializer) use serializers other than protobuf if you choose. This will likely be as close as you could get to 'low level sockets' without ACTUALLY having to do low-level-sockets. At your own peril, there *is* [a library for .NET that allows Peer to peer AMQP, i.e. no broker.](https://github.com/Azure/amqpnetlite). I have no clue how to use it or how to have a Java AMQP library talk to it... but it's there.
It sounds to me like you want "an Electron app" but you want to write Electron yourself in different languages. That's the snarky take. I'm sure you have reasons to want to use Java and C# so badly and there are reasons to not want to use Electron. But I don't know, your responses are a bundle of difficult constraints. * Lots of message brokers would be an easy abstraction for this, but you don't want to install one. * The next-easiest abstraction would be HTTP, but you seem to believe that's too complex. * ...which I sort of agree with from the perspective of Java and C#, but in JS and over HTTP you don't think about the TCP/socket layer. JS introduces browser incompatibilities (and you'll want the Fetch API) but... * ...Electron only ever uses Chromium so you don't worry about incompatibilities. That's why I'm kind of stuck. You've rejected the tools and protocols that I'd use to solve this problem. These days if I need a backend/frontend relationship I write a REST API. But if I want to go cross-platform I prefer HTML as my frontend. 
Someone already posted this before. 
I agree. Things that are strictly UI related like opening a dropdown menu now need a roundtrip to the server. Also the server will have no view of the browser so you can't hook into things like browser resize events to manipulate the DOM, or if you can it will be firing hundreds of events to the server per second and would not be very responsive. I think realistically, you will always need to have some javascript on the page for UI interactions, but then that brings up the question of if javascript modifying the DOM that conflicts with the websocket DOM changes. For that reason, I would rather stick with client side only (WebAssembly Blazor), but unfortunately (and a bit Ironically), that means your website would no longer work on Internet Explorer. &amp;#x200B;
Write a method and deploy that method as a completely independent service.
Won't compare to Terry A. Davis' divine intellect though.
 3. Stupid Threadpool tricks. [Namely, something like this with a low concurrency level set.](https://code.msdn.microsoft.com/Execution-Time-Based-dd4dbdb6/sourcecode?fileId=67470&amp;pathId=1378361369) Any code inside has to be careful about how tasks and async/await are used. 
Newsflash: Rich Blum doesn’t code. Mods!
I recommend following along with this. Learning this lexing/parsing/abstract syntax trees is really empowering. &amp;#x200B; &amp;#x200B;
So, haven't tried this with Web API controllers... But you MIGHT want to try moving your `T` Declaration to the abstract class itself. This has other implications, but I think that may help the overload resolution out.
For non-germans, change the „de-De“ in the url to „en-US“ see the english version. Or click [here](https://azure.microsoft.com/en-us/blog/introducing-azure-functions-2-0/?WT.mc_id=none-reddit-bramin).
This was pretty cool, definitely learned a few things. Will be following. 
The guy behind LINQPad did a demo of some IPC code using memory mapped files. Those should be supported on both Linux and Windows, though you'd have to port the code to Java too. TBH though, it's kind of silly that bundling an HTTP server is "too complex" while writing a custom protocol over raw sockets (I assume you meant TCP rather than SOCK_RAW) is just fine.
Hey, and if you think `List&lt;T&gt;` is cool, check out `Dictionary&lt;TKey,TValue` and the other members of System.Collections (and System.Collections.Concurrent, when you get into multithreaded code!) That said, Arrays can still have their own uses, usually around memory-sensitive and/or performant code.
Thanks man. I can never decipher the marketing-speak for these cloud-based "solutions". As usual for these sorts of things, the [landing page](https://azure.microsoft.com/en-us/services/functions/) uses a million words to say absolutely nothing (because, I daresay, it's aimed at managers and not programmers). 
&gt; 1. It may never make it to a 1.0 product. I don't have a crystal ball, but Microsoft has hyped this technology enough that I'm sure it will make 1.0. They just need to cattle-prod the Mono team into fixing up the WebAssembly bits so that client side works well; that's the biggest hurdle in my mind. Besides. It's not like the days of Silverlight where they have a lot of good will to burn... OTOH I'm amazed people still use Entity framework anything for new projects. &gt; 2. The final result may have a completely different api from the current builds. Very true. I'm *guessing/hoping* that at least for 1.0 this is going to be a very 'it works, don't touch it!' sort of thing, where at least the server-side API is pretty stable at this point.
 &gt;(because, I daresay, it's aimed at managers and not programmers). Exactly :( Incidentally, when faced with this issue, I'll normally look it up on Wikipedia. It often has a much, much more useful description 
The language is determined by your location and set automatically. I.e., if you view the page in the US, it will set the language to “en-us”. 
I'll try it tomorrow at work and see what happens. Stay tuned.
Exactly :)
crosspost to /r/watchpeoplecode next time
Noted. Hadn't heard of it.
Already posted in [https://www.reddit.com/r/csharp/comments/9iqse4/introducing\_microsoftcomlearn/](https://www.reddit.com/r/csharp/comments/9iqse4/introducing_microsoftcomlearn/)
Cancellation tokens for task creation *only* throw the exception if the token is cancelled on **task creation**, once the task is created that cancellation token passed into "Task.Factory.StartNew" doesn't do anything, even after being cancelled. Unfortunately at that point you have to update that client.Send method to accept a cancellation token and regularly poll it to know when to cancel. The unfortunate truth is that you can't force a task to cancel; the task has to both accept a cancellation token and be programmed in a way to properly handle that token. The closest thing to forcing a task to cancel is running raw threads and aborting those threads, but that is a huge no-no because of the possible undefined behavior you can create.
I like SignalR but I wouldn't trust it for anything that has to be durable.
Many APIs are beginning to only offer async methods now (if the method has any sort of internal async action like I/O calls).
To note, this is not really an issue unless you are doing an insane number of decimal calculations.
I've revisited the example from earlier today. So, if I'm undrstanding his correctly: 1. The " ct.ThrowIfCancellationRequested(); " will never do anything. Makes sense. 2. I need to update "client.Send" to accept the cancellation token. I'd need to check to see if we're going to cancel the task in that function ... probally at the start. But, this means once it reaches the point where it hangs, I can't stop it. 3. I have to regularly check the token to see if I should cancel the task ... If I'm right, is it possibe to do something like wait 120 seconds (as above) and then just throw an exception to fail the entire thing and move the service along? &amp;#x200B; Thanks for your help!
Ok. Thanks a bunch for your help!
Damn! I missed it!
[Here](https://www.youtube.com/watch?v=wgHIkdUQbp0) is a link to the recording. The series will also be continuing for an undetermined length of time, Wednesdays at 8am PST.
O yeah or if speed is super critical.
https://www.linqpad.net https://dotnetfiddle.net/
I should clarify, by "undefined" I mean that some very bizarre stuff can happen like aborting a static constructor. The [doc page](https://docs.microsoft.com/en-us/dotnet/api/system.threading.thread.abort?view=netframework-4.7.2) goes into more detail. But yes, technically all it does is throw a special exception immediately inside that thread.
Isn't it just a data serialization protocol?
REST API with JSON messages? Processes do not even need to be on the same machine if need arises.
Can you explain? I've never grasped react. But I work all day on desktop and mobile applications using MVC of MVVM patterns. I've always had the idea that it more resembles Angular.
Thanks, it's really interesting to watch.
How long did it take you to learn C# before you were employed? I'm currently living off my savings after I lost an unrelated job not to long ago, and just started school for a software dev degree at WGU, but hoping to quickly learn C# on the side to gain employment in under 6 months if possible. Also using Tabors course before moving on to pluralsight.
Oh, that never crossed my mind. Java -&gt; JNI -&gt; CoreCLR. Though: I have looked at its hosting APIs and it seems I can only call static methods on assemblies, i.e., no direct access to objects. That's... impractical.
&gt; IPC code using memory mapped files Interesting idea. Except it has to run on OSX, which doesn't support cross-process timed waits on semaphores. (Well, it's doable through Mach APIs). &gt; it's kind of silly that bundling an HTTP server is "too complex" while writing a custom protocol For my purpose, HTTP is junk because [schema] -&gt; [schema compiler] -&gt; C#/Java classes -&gt; [length][data] byte stream. 10x simpler than the ridiculous complexity of the HTTP protocol itself. 
&gt; I'm sure you have reasons to want to use Java and C# so badly Java: cross-platform UI. Electron is a mess, plus none of us is a web developer. It's a desktop app. Plus, strong typing has advantages. C# / CoreCLR: business logic, schemas, database, worker backends, etc. 
yep, that was what I understood
totally this
Thanks a lot! I’ve seen this recommended very often.
This looks really interesting, thanks! 
I’d wholeheartedly recommend creating a an OpenAPI 3 YAML file. You can still use this in swagger but there some other open source tools you can use to generate static docs if needed. 
well i got en-gb and i am most certainly not in eruope.
I can't watch this at the moment (at work), but how does this compare to the typical compilers course you'd get at university? I still vaguely remember terms like LR(1) parser, Lex, Bison, Yacc...
I think your code could use a bit of review. Before that, here is the idea for the solution. **Base case.** This is the simplest call that we know the answer to without making any other recursive calls. But what is an answer in this case? If we are out of border, that means we solved the maze because we can already exit. So we return true. If we are not out of border but the current cell is either # or X, we no longer want to explore. Why? Because a # means this is a dead-end and a X means we already visited here. In both cases, we haven't found a solution (not exited). So we return false. So our base case will look like this: `bool MazeTraversal(char[,] maze, int row, int col)` `{` `if (OutOfBorder(maze, row, col))` `return true;` `else if (maze[row, col] != '.')` `return false;` `}` &amp;#x200B; **Recursive Case:** We are at cell maze\[row,col\]. We go all four directions one by one. If let's say going North returns true, it means there is an exit there. So we no longer need to explore the remaining directions. We simply return true. This is the reason I used || in my code. It will short-circuit the checking. Meaning if the first becomes true, the whole thing will be true, so no need to check remaining conditions. It will look like this: &amp;#x200B; `bool MazeTraversal(char[,] maze, int row, int col)` `{` `if (OutOfBorder(maze, row, col))` `return true;` `else if (maze[row, col] != '.')` `return false;` `bool canSolve = MazeTraversal(maze, row - 1, col) ||` `MazeTraversal(maze, row + 1, col) ||` `MazeTraversal(maze, row, col + 1) ||` `MazeTraversal(maze, row, col - 1);` `return canSolve;` `}` &amp;#x200B; the variable `canSolve` will basically tell us if there a solution possible from trying **either** of those four directions. If that is not the case, we mark this cells with O. We then simply proceed to return false. Every recursive function must have that format. Base Case + Recursive call(s). &amp;#x200B; Now, back to your code. You don't need these: 1. Remove the if conditions. The base case should take care of this. 2. Mark the cell with X during at the beginning of the function just once. Same with printing the maze; it can go to the beginning of the function. 3. Remove all those return statements and their if conditions. Just ORing them together as I explained above should suffice. Last note: If you want to understand recursion very well, watch Marty Stepp's standford lecturers on Youtube. Solve a lot of recursion problems. &amp;#x200B; Hope this helps.
In the first episode he writes a basic expression evaluator in a REPL. He doesn't really go into any CS like what LR(1) is but he does briefly mention that he's writing a recursive descent parser and talks about how to deal with operator precedence in the parser. He's writing the lexer and parser himself so no need for Lex, Bison, Yacc etc.
Thank bro
I can't answer your question regarding pandas, but what are you trying to do on the trading front? The only reason I ask is because I've been using Trady to calculate a lot of common indicators... 
If you are referring to generating API (note: I do not mean web api) documentation from the XML documentation comments, I've used [Sandcastle](https://github.com/EWSoftware/SHFB) with great success generating documentation files in the HTML and .chm formats.
&gt; As a beginner I need to compile simple programs, so when I compile one program, I right-click the .cs file and select "exclude from project". I don't think this is the right way to go. Personally, when I teach beginners, I teach them to create a new solution for each program. But I understand that you might want to have lots of programs all in the same instance of Visual Studio, and you can't do that with a new solution per program. So perhaps what you need is a single solution that contains many projects, and each project contains one program. Then, you can right-click on the project you're working on, and select "Set as startup project", and that will be the project that runs. To add a new project to an existing solutions, in Visual Studio you can select File/Add/New Project. Then choose a Console Application, and you've got yourself a new class with a Main() method.
That sounds great, thank you! 
So many tools have been mentioned, I will try them all and update my post about which one I chose and why. For the sake of the future devs coming here with the same question I had (: Thank you so much all! Highly appreciated 
You can install a Sandcastle VS extension (.vsix) and create a Sandcastle Documentation project (.shproj I believe). This is great if you want to generate the docs during build. In fact, I'd say using .shproj is a must :-D.
Hi! I've used [vsxmd](https://github.com/lijunle/Vsxmd) in one of my open source projects, which generates Markdown formatted documentation from the XML comments in your code, and it worked really well, it worka great on GitHub. 
Do you not use the built-in XML documentation syntax with the summary tags and all? Like what I did [here](https://github.com/Bryan-Bennett/Boondoggle/blob/master/System.ComponentModel/ObservableObject.cs).
Your debug window should have a console tab. You can also change the debug settings to use a console window instead of letting Rider redirect the console output to the console tab. 
Please, PLEASE for the love of god, give examples of the expected incoming data and the expected results!
Ah, I see. Yeah, use Sandcastle to generate the documentation from those XML comments automatically. If you don't have the resources to host the HTML file as a website, consider generating .chm files instead. They are heavy (since each .chm is basically an executable) and uses the legacy help file format but you can provide those chm files to whoever. If you are using github for your source, you can actually host your documentation using GitHub Pages which will render the generated HTML appropriately :-D.
Yes. And the tread code catches it and goes on its merry way.
Sounds neat, I will give it a shot right now 😊👌🏻
As a test automation engineer.... do not use any other tool. Thanks!
Whats the error? Whats the source code of `DoubleAnimation`?
What CLR does (last time I checked!) is to throw that exception at **some point when the CLR takes over**. Say, upon entering a Monitor (`lock` statement in C#). It has **no way** of terminating a random blocking call (say, waiting for the network resource to reply). Indeed, the remarks section speaks of a similar thing .
Well. Then you have nowhere defined `from`and `to`. Maybe in the book it's somewhere in the class of `AnimateEnemy`defined or even randomly generated? Also there are unused method paramters `p1` and `p2`, maybe these are your `from`and `to` but just with other names?
&gt; when i am using my loop it also loops my else statement Isn't that the point? Also, not sure if your teacher would consider it cheating (I wouldn't :P), but numbers satisfying these two conditions at the same time are simply multiples of 21, which simplifies the code ;)
lol, that's pretty much what I'm doing as well. I don't know what you're using for the data side of things, but you should take a look at IEX as they provide a free data feed (historical &amp; realtime). https://iextrading.com/developer/docs/#chart If you search on nuget, there is also a C# wrapper for the API as well (although I haven't used it).
It's for communication. Think you are mistaken with protocol buffers.
I second Doxygen. It has always served me well and the number of configuration options is extreme. Oh and it's free. The only thing I would add is that it's really not enough to just generate API documentation and call it a day. You *ideally* would also have supporting materials like examples, tutorials, a readme, and a FAQ. Of course I never manage to get all of that done for my *own* projects, but *ideally* I would..
Thanks! IEX does provide a ton of info. Right now using interactive brokers API because I trade futures and options too and want to track implied volatility spikes..
Swagger is pretty good, and you can just decorate actions with the response
No i do not want the text to display in my rlse statement 10 times
The thought is probably to use boolean, but my teacher hasnt gone through boolean at all, we've only had if, for , case etc..
Hard to help without knowing what it should do, instead.
Swashbuckle is fine if you’ve already written the api. Creating the YAML file manually is better if you’re designing the API first. Could be wrong but I don’t think swashbuckle has moved over to open api 3 yet either. 
For examples, you can use the `&lt;example&gt;` XML documentation element to in-line an example in the source -- I don't know about Doxygen, but Sandcastle knows how to render the example element into the resulting document (usually html). Typically, you'd also nest a `&lt;code&gt;` element in the `&lt;example&gt;` element.
Looks like the WPF version way less smooth with more stutter, but half the memory and similar CPU. The Avolonia version definitely looks smoother but double the memory. Anything to glean from the differences in memory?
Du ska testa nr mellan I och A och skriva ut alla som delas på 3 och 7 utan rest? Jag hade satt en bool myBool = true; och sen endast satt myBool = false; i else! Sen utanför loopen sätter du te x if (myBool = false) { Console.WriteLine ("inga delbara nr mellan 'I' och 'A'") } 
No, you're right. Also, to get the output right, you have to markup your code with a shit ton of useless garbage attributes. We've been doing it manually with an OpenAPI doc in the repo root and use it to design the changes, then use it to verify the changes. Our automation people write tests to that doc and we treat it as the spec for that API. Learning OpenAPI and yaml isn't the easiest thing, but so worth it. It also allows your doc teams to participate in cleaning up docs.
If anyone can tell me how to override the default 200 code for methods that return void/Task it would be really cool. I've added middleware to replace 200 codes with 204 when there is no response but Swashbuckle doesn't know about this :(
Looks like server side Blazor will ship with .NET Core 3 with client side Blazor coming at a later date.
Yeah we’re using it this way so that the client dev work can begin at the same time. It also means multiple stakeholders can be involved in maintaining it. We’ve also opted to put it in its own repo so we can track changes more easily. 
besides documentation tools, my favorite "how to" example for good documentation is Racket https://docs.racket-lang.org/reference/index.html
Just to clarify for the OP since nobody really said this outright.... There is nothing special about the main() method that is generated. If you want to write your own all you have to do is make sure that main() method is static and matches one of the supported signatures (no parameters or an array of strings).
As my colleague says, C ++, boost and optimizing compiler is the best obfuscator! I like ArmDot obfuscator. It isn't free, but it is secure
It will depend a lot on your learning style and how logical your brain is, for me, programming in general just fits well with the way my mind works. It took me 6 months to learn enough for my first job, including fundamentals, the basics of .Net Apis and MVC. I was studying 4 hours a day, for 4-5 days a week. That included time to pause videos, catch up to the tutor and code along with the examples. Try to not only copy what the tutor has written, but add your own little flair, experiment and you'll learn so much more effectively and faster. My final bit of advice would be to make your own piece of software as a final assignment for yourself. Take everything you have learned and try to make something, even if it's really simple. Make it as neat and structure it as well as you can, I made a WPF application that organised images into folders by Year -&gt; Month -&gt; Date, it was terribly designed when I look back at it now, but I'm sure that it helped me get the job. I was able to talk about it in the interview and explain how it worked. Let me know how you get along, and don't hesitate to ask more questions if you need to.
Swagger FTW
I'm a web app developer, I started out doing mostly HTML and GUI stuff in MVC. I was super lucky to be honest for someone of my qualification level and found a job at a 3 dev company. My company makes parking/access control web apps that are more user friendly and tailor made than the generic, unintuitive interfaces that said software comes with. Now I've ended up shifting more towards the backend stuff to do with Databases and more C# exclusive code just because I prefer that sort of stuff.
You are right. Nice to see that it is still alive 
I am looking at WPF/WinForms integration with suspicion. I just hope that it does not ruin .net core in some weird way.
It's never really a good thing trying to organise an already unorganized project. Try looking into SOLID principles. Also make classes meaningful. Make classes for each bit. Don't stuff everything into the form. The form should just be a UI that makes calls to the main functionality. Also put similar classes into a class library. Inheritance and polymorphism is also good at cutting down on code duplication. That being said I struggled with organising my code for years. Just gotta remember that C# is a massive hierarchy system - functions in classes, in namespaces, in projects, in solutions, in repositories. If you can use all of that to your advantage you can keep it pretty well organised. 
This is what we use at work.
Glad you liked it! Suggestions on how to improve are highly appreciated too :-)
If they did it like Windows Compatibility it'd be perfect. See h[ttps://www.nuget.org/packages/Microsoft.Windows.Compatibility/](https://www.nuget.org/packages/Microsoft.Windows.Compatibility/)
My approach is code first. Based on my personal experience and from chatting to members on the Roslyn team too many people have been turned off by the parsing formalism that everyone gets subjected to in CS. And virtually everyone I know hates Yacc with a passion ;-) I think there are decent parser generators out there, such as ANTLR, but I also believe it's more empowering to write it by hand. It's easier to deal with error recovery and debugging is brain dead simple (in the sense that it's just code you wrote).
Why would it? .NET Core is a cross-platform stack with operating system specific additions. Having WinForms and WPF *also* available, doesn't take anything away from your ability to write console apps and web services. It merely extends what you can do with .NET Core.
The platform loses its cross platformness when large pieces are platform dependent and the people start building more and more like that
Life takes us places we never expect! I feel lucky working so close to my dev team where I'm at. Although I'm in a different department, I'm always able to spend some time over there and soak up all the info I see. Good luck on getting a more backend oriented job and thanks for sharing your background!
That is very fair concern. Let me try to outline how I think about this and how the platform exposes it. 1. **Avoiding Accidental Dependencies**. We try hard to make sure that developers aren't *accidentally* taking dependencies on non-portable APIs when the they don't expect that. For example, console apps, ASP.NET apps, and .NET Standard libraries do not reference such API sets by default. The user has to add them explicitly. 2. **Avoiding Lowest Common Denominator**. One of the core tenets of .NET have been that we allow first-class interoperability with the underlying operating system (unsafe code, P/Invoke etc). As such, we believe in exposing operating system APIs if it makes sense, for example, WinForms &amp; WPF, but also Xamarin IOs and Xamarin Android. We want to enable our customers to build native experiences. 3. **Promote Portability**. I'm also a believe in making it easier to author portable code to ensure more upstream dependencies can be operating system agnostic. I've done various talks on how to achieve this with .NET Standard, multi-targeting, and NuGet. My personal opinion is that having a cross-platform UI stack for .NET would be a very valuable addition, but it's a lot of work. I am, however, not a fan of the idea to make WinForms/WPF cross-platform because it will likely be a poor result: not compatible enough for existing WinForms/WPF customers while also not being a great cross-platform API (to much designed around the Windows PC).
Since .Net Framework 4.0. For example, you can have .Net Framework 3.5 and 4.0 installed on a machine at the same time. But you can't have .Net Framework 4.0 installed at the same time as .Net Framework 4.5 or 4.7.
Well said and I agree with everything you said.. was more stating what people might feel, I can't say I wouldn't feel that way too if I kept running into non portable deps when going to implement something. Hopefully it all won't be a big issue though
very easy with this swashbuckle 'plugin' https://github.com/mattfrear/Swashbuckle.Examples
We'll expose WinForms and WPF in a similar manner, but we won't be using NuGet for that. The reason being that NuGet packages are versionined independently of the underlying platform. For WinForms and WPF we want an opt-in model from the project file *without* having to specify a version. The current proposal is to add a reference to the project file like this: ``` &lt;FrameworkReference Include="Microsoft.DesktopUI"/&gt; ``` It would probably be good if we would add `Windows` in that name somewhere, though.
&gt;NodeJS and Electron What the heck dude? That's a very bad advice. People should get away from Electron, not use it. 
&gt;Don't stuff everything into the form Could you explain this a bit more? I currently have methods from the buttons clicks of my Main Form that call other methods, also within the same Form.cs . Should I add these to their own namespace even if some methods are made for specific buttons? For example: btnImportFileABC calls the method ImportFileABC() . 
It is, indeed. It's used for docs.microsoft.com (i.e., all .NET documentation) and is deemed good enough by Microsoft to replace the decades old MSDN. It also supports generating [REST API documentation using Swagger](https://dotnet.github.io/docfx/tutorial/intro_rest_api_documentation.html), but I don't know of a project that uses that functionality, so YMMV. 
Found this on the playlist linked by OP: [https://youtu.be/r3bFT8A8bQo](https://youtu.be/r3bFT8A8bQo)
I still don't know myself how logical I can be. I just sort of started and find it somewhat confusing but not sure. I feel like if I stick with it it will eventually click with me. I kinda just jumped into this, which might of been dumb. As in I just started school for a software dev degree. But I'm 25, and Ik'm tired of being undecided in life and needed to just pick something to stick with. Having ADD doesn't help the learning process, which I think may be troublesome when it gets to the point of going through all the material then wanting to build something. But I'll cross that bridge when I get to it. The overwhelming amount of stuff to learn keeps me hesitant, and some days I wont be consistent with learning as much as I want to or spend enough time on something. Pair that with school now and it's tough. But I'm improving. Really appreciate your advice thank you. And will do!
Dude, you only looked at VS Code which is like 1% from all programs that are made by Electron, look at Atom, Skype, Slack, Discord desktop app, Github...etc All these apps are garbage and just so unusable, Skype became from usable to an app that you regret for opening it, Atom is nearly unopenable compared to VScode, don't let me talk about Slack and the others please... I understand that Electron is for making Javascript on desktop but why the heck we needed that at first place? Javascript at first place is a very disgusting and stupid language(a Javascript developer), Electron is so painfully slow and RAM-eater like crazy(It's built on Chrome) that's just too much, like too much, Node.js is ok but Javascript on desktop and uses Chrome too is just too much, if you want to build desktop apps, just build them natively instead of screwing up the performance.
Ideally yes. It's not punishable by death if you don't. But you can then swap the UI out really easily, if you keep all the functionality in a different class elsewhere. If ImportFileABC() uses form controls (which it will probably do as I assume it has a OpenFileDialog) then you probably want to keep it with the form.
Gotcha. Thanks for the advice! I'll definitely keep this in mind!
In that case it's better to call the OpenFileDialog on the form then call something like ABC.LoadFile(openFileDialog1.Filename); this keeps the dialog on the form and the file loading logic in a class which defines how to save and load that file. 
I'm no master at it myself. But after 4 years I'm slowly grasping the "what to dos" and "what not to dos". It may take you longer to implement a UI correctly for a while. But when you do it saves you a lot of effort in the long run. If it helps I wouldn't mind calling you on discord/skype and showing you some real life examples from my projects.
I'm pretty sure you just decorate your controller action like this: [ProducesResponseType(204)] public IActionResult MyAction[reddiquette] (int id) That's what we're doing in some of our APIs and Swashbuckle picks it up just fine.
https://what.thedailywtf.com/topic/22101/longest-class-name/21 Seems like it's already been discussed lol. 
We use explicit namespacing. While we don’t have short class names, explicitly calling each object by namespace makes for long declarations. An example class name is: CompanyName.Enterprise.DataAccessLayer.Database.CodeBuilder.AssociationLinkCodeBuilder I am thankful for the var keyword. At least we do not have to explicitly declare the type lol 
What do you think about AvaloniaUI? Its long way from being production ready, but it seems like nice idea.
Will DesktopUI or parts of it be open-source? Does Microsoft have any plans to allow libgdiplus being used on other platforms? 
I like how that class name parades across the screen. Seriously, that's ridiculous.
Right?! There's a happy medium ground between so short you have to explicitly refer to it &amp; so long you fall asleep before you're finished reading it.
To be honest the reason I decided to teach myself programming was because I couldn't seem to focus at University. I dropped out after two attempts at in the first year, lectures and classes just didn't stimulate me any more and I was doing badly. You're already doing better than me by going to school.
Net Core - Winforms makes zero sense to me. What exactly is that? Winforms with 90% fewer libraries?
This is all well and good, but that comment from Jack Bond uses the word "prevaricating." Listen, I'm a pretty educated guy with a decent vocabulary, but I had to look that up. TIL.
A really good book is "Microsoft Visual C# Step by Step" by John Sharp. It explains anything you need to know to get started with the language
Why can't Microsoft just do what AvaloniaUI are doing? All everyone ever wanted is a cross platform UI framework. Nobody wants Winforms for anything Nobody wants WPF when it's being sidelined by UWP Nobody wants UWP because nobody is using the latest version of Windows 10, especially not in business. Why not provide a cross platform UI framework for .NET Core, and then dominate the application world
Yes, they serve the same purpose. In fact, some `Task` methods are simply [wrapping APM methods](https://referencesource.microsoft.com/#System/net/System/Net/Sockets/TCPClient.cs,def3df58ea9dbdc8). `Task`s were introduced much later and are somewhat easier to handle, especially when it comes to chaining multiple async operations. `async`/`await` was added even later makes writing async code much more convenient, without needing multiple callback methods, explicit error checking and so on.
https://softwareengineering.stackexchange.com/questions/309277/would-the-apm-be-faster-or-more-efficient-than-tap TL;DR: TAP is the modern and is recommender over EAP and APM simply because it simplifies the code you write and doesn't affect performance 
Do you have similar feelings towards UWP as you have towards WinForms and WPF?
Only the latest minor release for each major is supported, and can be installed sbs. .net 3.51 and 4.8. 
Oh so this, so much this. Also, if it could be HTML-based, perhaps backed with Blazor, that would be great, thanks!
It's C#, so was there an interface version?
I learned more from him and team treehouse than I did in college, I graduate in December, I don’t learn programming well from textbooks man. Videos are so much easier for me. 
I definitely get that. I use textbooks as reference for when I need to understand something or can't find it online for whatever reason. Videos start to bore me because I just want to do the code faster than they are typing within the videos. So I started to learn from doing better than learning from watching. I've taught myself *a lot* of C# (I feel) just from working in the field and finding out how to do something I need to for work. I'm now helping tutor the other students in my C# class due to learning past the last. The only thing I tend to really struggle with now is just organization of projects and good coding practices (which I also tend to learn from my own searching about).
I understand the thought behind it, but that attitude is why Java doesn't have a good UI anywhere. We have to be pragmatic about this, offering both a lowest common denominator UI that is cross platform and a high performance one that fits the specific platform.
Haven't companies made large products that make tons of money use java gui... How can we say it doesn't have a good gui.. 
People have made lots of money creating products with MySQL, MongoDB, lead, and asbestos. That doesn't mean any of them are "good". 
It's been awhile, so not sure if this would work, but you might be able to use Metadata(?) attribute on a partial class that overrides things to keep things nice. I forget what this is called, but anyway, maybe this will help.
Why not database routines? It sounds like functions will scale automatically, and so it'll handle increased traffic on the site with no effort on your part.
Xamarin Forms? 
WinForms is just way easier to use. Give me UWP/WPF with that level of ease of use, and I'll stop using WinForms.
Awesome! two pastebin links below. https://pastebin.com/B6Pa9usj https://pastebin.com/4DRG1N7n
Winforms that can use the latest and greatest tech from the .net core world. Winforms that can benefit from major changes (Such as say...DPI awareness?) because deploying it won't break everything else on the system. It's basically a way to let legacy users migrate to .net core so they can get all the benefits of .net core without a complete rewrite.
Razor components (blazor on the server) have been announced for 3.0
It will, but with more latency. So, acceptable for non-UI stuff
Technology really should not be treated like a religion. Should be treated as tools.
Think of WinForms as a Windows-only library rather than part of the .Net Core platform. The ability to load OS-specific libraries in a platform does not detract from the portability of that platform itself. 
Isn't .NET Core supposed to be cross platform? I don't get the introduction of Windows specific stuff into Core...
Agreed. Didn't write that it was. 
Edge isn't on Server at all
The Windows specific stuff is being added as optionally installable NuGet libraries. Its more that it can run on Core than its being added into Core.
This may get some hate, but if you're doing c#, the default structure to use is a list, then use others when necessary. If you're not, I assume you're just used to using something that was around beforehand. Strongly typed, queryable, can convert to an array afterwards if necessary, no need to specify the size. Why create a for loop to find stuff, with temporary variables to hold stuff, when you can just query against it. 
Just finished another Net Core app today. Took me several hours to get log4net working when deployed on Ubuntu. Fun. Then I wanted to use Selenium. Net Core 2.1 and Selenium - gave up on it. Simply can't afford spending several more hours trying to code something that would take me 3 minutes on Winforms. So how long will take for Net Core to give me awesome Winforms? Two more years? Five? But that is not even the main point. Net Core was all about cross-platform and now we are going backwards? Net Core is awesome and I love Winforms way more than WPF, but they should keep their paths separate. If they wanted to make Winforms better, they shouldn't have abandoned them 
Sorry I should have mentioned I understand this, I'm saying it in reply to the other guy as I can see how people feel this way
Once people get started with this development model they will never go back. I switched from requesting my data from several endpoints to subscribing to my cache servers data update notifications directly through an IObservable, and by just triggering StateHasChanged in the subscription I get realtime data rendering with less DB load and no boilerplate or controllers or other overhead. I was so happy when they announced it was going to be a supported feature as the next evolution of razor.
Composition: &gt; BoundTreeRewriterWithStackGuardWithoutRecursionOnTheLeftOfBinaryOperator &gt; You fool. This isn't even my final form.
At a glance it looks like there is an issue in your Numbers class. Here's the (start of the) sort function: private void setOrder() { if (num1 &gt; num2 &amp;&amp; num1 &gt; num3 &amp;&amp; num1 &gt; num4) { num1 = num4; } if (num1 &lt; num2 &amp;&amp; num1 &lt; num3 &amp;&amp; num1 &lt; num4) { num1 = num1; } if (num1 &lt; num2 &amp;&amp; num1 &gt; num3 &amp;&amp; num1 &gt; num4) { num1 = num2; } else { num1 = num3; } Let's step through this using the following values: num1 = 10, num2 = 9, num3 = 8 and num4 = 7. Now our values are: 10, 9, 8, 7 We hit your first IF statement: 10 is greater than 9, 8 and 7, so we set num1 = to num4. Now our values are: 7, 9, 8, 7 The next IF also gets evaluated: In this case, 7 is less than 9 and 7, but it is not less than 7. If it was, we'd just be setting it to itself though, which doesn't do anything. Our values are still: 7, 9, 8, 7. The next IF also gets evaluated: In this case, 7 is less than 9 so that passes, but it's also less than 8, so that fails. Values are still: 7, 9, 8, 7. Since the IF failed, we run the ELSE. This changes our values to: 8, 9, 8, 7. If this isn't what you expected from this part of the function, then you can see it's already going wrong. For one thing, you are completely missing a value that the user entered, so there's no way you can possibly return correct results at the end.
I am working on a tool to create documentation from xml as markdown. Its a dotnet global tool [Lib](https://github.com/igloo15/MarkdownGenerator) [Example](https://github.com/igloo15/MarkdownGenerator/blob/develop/docs/api/Igloo15/MarkdownApi/Core/Themes/DefaultTheme.md)
Check out NoesisGui. Its cross platform, high performance and closely matches the WPF class hierarchy and API. Can be used with C# on .net core. Not free though.
Didn't even think about that.
Why don't you create a new list and push into it the biggest first and so on. This way you wont overwrite your variables.
You may be able to spin gold from straw, but that doesn't make the unspun straw any more valuable. 
AvaloniaUI goes a long way towards that by eliminating some of the bad design decisions such the need for ICommand.
Tbh I just feel like mvvm is an Antipater not 
I dunno about matrix, but check out rotativa. 
It can be if you follow some of the more ridiculous versions.
The thing I care about the most is the bundler for self contained applications. This has been a goal of mine since I started messing around with ILMerge and ILRepack. The ability to pass around a single exe that can just execute no issues and no dependencies will be amazing. No more dll clutter. Most people don't seem to care though. I would love to beta test it before its officially released but I can't find any mention of tool on github or anywhere. Besides these blog posts there is no mention of it anywhere.
Thank you for the response. What do you suggest? I am at a loss here. Pretty flustered 
Any more info on what you are doing client side? Desktop or Web? Played much with Blazor? Very excited for it since I'm sick of the JS world constantly changing and pretty poor performance overall for low end HW.
We have not gotten into arrays just yet.
You forgot that nobody wants EF6. I migrated my code to EF core while it was still beta and it was not that big of a job.
I'm guilty of using long 3 to 5 word descriptive variables in camel case often.
I really like Mosh. I've take a lot of his courses. [Build a Real-world App with ASP.NET Core](https://codewithmosh.com/p/asp-net-core/?product_id=662733&amp;coupon_code=LUCKY1&amp;preview=logged_out) &amp;#x200B;
yes
The real way you would do this is to put the numbers into an array then simply call Array.Sort(myArray); However, your teacher is probably wanting you to learn how to figure out an algorithm for sorting things. The first problem with your approach is that you are writing over your user input value. You need a placeholder or two to hold on to values. Somewhere to store an existing value before your overwrite one of your needed values. You might want to declare an extra double called max to hold the largest one you've found yet. If you have any understanding of collections and loops, you could loop through the values to make comparisons much more succinctly. Otherwise continue to make many conditional checks. Another thing you missed is the possibility that the numbers could be equal. One last thing to mention is that you should be very careful about variable names. In your setNumbers function you demand the parameters smallest, small, large, and largest. The arguments that get sent to this function most likely will not come in in that order. In this case, the untruthful names are trivial, however, in real code poorly named variables can destroy tons of development time. Good luck and happy coding!
If I worked at your company I would straight up refuse to call everything by namespace. That is a ridiculously meaningless rule to have to follow. 
I'm personally doing web, although it looks like their is a direct path to desktop with electron, and I imagine my employer may go that route to replace a legacy app in the next couple years. Im also running server side rendering, although I tried web assembly and it's pretty great too. The big thing for me is the productivity boost of the server model. Because it's on the server it can still talk directly to the cache servers or database, and have an always up to date view. Doing this with the client model has a lot more boilerplate because you have to architect over the network connection, often via a restful API, while the server model abstracts over the network connection in most situations. Its different flavors for sure, but if you are able to ensure low latency, such as by hosting on azure, the feel is lightning fast just like it would be as a client side app, but with much less developer effort.
&gt; We use explicit namespacing. What's the point of doing that? I fail to find one single reason why that would be desirable.
Over the past few years Caffe, from Berkeley AI Research, has gained a strong following in the deep learning community with over 15K forks on the github.com/BLVC/Caffe site. With its well organized, very modular C++ design it is easy to work with and very fast. However, in the world of Windows development, C# has helped accelerate development with many of the enhancements that it offers over C++, such as garbage collection, a very rich .NET programming framework and easy database access via Entity Frameworks. So how can a C# developer use the advances of C# to take full advantage of the benefits offered by the Berkeley Caffe deep learning system? The answer is the fully open source, 'MyCaffe' for Windows .NET programmers. MyCaffe is an open source, complete C# language re-write of Berkeley's Caffe. This article describes the general architecture of MyCaffe including the newly added MyCaffeTrainerRL for Reinforcement Learning. In addition, this article discusses how MyCaffe closely follows the C++ Caffe, while talking efficiently to the low level NVIDIA CUDA hardware to offer a high performance, highly programmable deep learning system for Windows .NET programmers.
I'd like to see Bob Tabor go over Csharp fundamentals. This video, however, is Javascript fundamentals.
Found github page for MyCaffe. https://github.com/MyCaffe/MyCaffe
That's a complete rewrite. Estimate it as such or you will regret it. 
I got it figured out! Thank you very much for this info though. I appreciate you
ML?
It's been a while since I've used Angular; I'm sure the two frameworks are more similar these days than when I used angular (angularJS). I think the biggest advantage is how it encourages code reuse and component decoupling naturally due to the way data flows. This concept is/was revolutionary for front-end development when comparing it to something like jQuery where data was flying six ways from sunday with event firing/subscriptions and there was no clear direction what data was moving where. With React data flows in one direction, which is directly down to the child component, and you can respond to events from the child component and propagate back up if necessary. This makes debugging way easier and the design much more clear. &amp;#x200B; All that is great, however I personally *hate* using javascript. I think the syntax is kind of hacky and ugly, little things like a function which should be called Array.**prepend** is called Array.**unshift**. Every small library seems to need thousands of other libraries it depends on, things like webpack need mass amounts of configuration to get your project to work properly and can some dependencies can randomly break webpack. But most importantly, it's not statically typed. I know typescript fixes this, but any documentation or libraries you find, you need to specially configure to work with Typescript and overall there is less documentation around it, unless your using Angular (in my experience). /rant &amp;#x200B; Blazor takes all of the advantages of React, but with a beautiful, statically typed language that is C# which just works with minimal configuration. You might not see any advantage as a back end developer using MVC, but the great thing about Blazor is they have server side rendering capabilities (being released in .NET Core 3.0). Which (hopefully) will allow you to make components more modular without the need for ugly RenderPartial calls or Tag Helpers in ASP Core. &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
Are you sure about that? Afaik you can't have 3.0 and 3.5 at the same time
I'm also confused as to why they are adding EF6. Why don't they just force everyone on EF Core, and then focus on catching up EF Core to add features that it's lacking? I don't see any point in having two different streams (EF6, and EF core) unless the plan is to have them converge at some point,. B I though EF Core had some fundamental principles that have been redesigned and are not compatible.
Just trying it is the best way to learn in my opinion. Google is your friend. There are great user/auth libraries out there but I think you will learn a ton implementing your own. Although, many companies would appreciate if you have experience in a real robust library. Some topics to study that may be helpful to you are Custom AuthorizationAttributes, Session variables, and Encryption. Here is an Auth Attribute I made public class AdminFilter : AuthorizeAttribute, IAuthorizationFilter { override public void OnAuthorization(AuthorizationContext filterContext) { if (filterContext.ActionDescriptor.IsDefined(typeof(AllowAnonymousAttribute), true) || filterContext.ActionDescriptor.ControllerDescriptor.IsDefined(typeof(AllowAnonymousAttribute), true)) { // Don't check for authorization as AllowAnonymous filter is applied to the action or controller return; } // Check for authorization if (HttpContext.Current.Session["isAdmin"] == null) { //filterContext.Result = filterContext.Result = new HttpUnauthorizedResult(); filterContext.Result = new RedirectResult("~/User/VolunteerPortal"); } } } You can decorate a controller or action with it like so: &amp;#x200B; ​ \[AdminFilter\] \[AuthorizationFilter\] public class AdminController : Controller ... &amp;#x200B; For encryption, I like [RijndaelManaged](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rijndael?view=netframework-4.7.2) Good luck. &amp;#x200B;
Machine Learning
&gt; prevaricate - /prɪˈvarɪkeɪt/ - verb &gt; &gt; speak or act in an evasive way. &gt; &gt; "he seemed to prevaricate when journalists asked pointed questions"
Then maybe explain what your intention is. Not something to brag about, but I assume I speak for the majority of the redditors in this subreddit - I have no idea what these messages mean.
It's experimental but they do have Blazor running in Electron. And since they have .NET Core it does what Blazor does but without the WebAssembly layer. [https://blogs.msdn.microsoft.com/webdev/2018/07/25/blazor-0-5-0-experimental-release-now-available/](https://blogs.msdn.microsoft.com/webdev/2018/07/25/blazor-0-5-0-experimental-release-now-available/) People should take note that Microsoft is making most of it's cross-platform apps with Electron and web-based tech (VS Code, SQL Ops, Azure Storage Explorer).
Are you allowed to use aliases for namespaces? (using alias directive)
Here is cross platform UI for you :) https://github.com/migueldeicaza/gui.cs More info https://channel9.msdn.com/Events/dotnetConf/2018/S313 
I think it's not as easy as you think. If you use plain winforms, you'll have to do the checking for collision yourself. (like: [Collision Detection](https://developer.mozilla.org/kab/docs/Games/Techniques/2D_collision_detection)) You might want to look into MonoGame or Unity. They're both free and have lots of tools you need to develop a game. 
sorry for inconvenience, i am working on page scrolling fix this asap. 
There's nothing custom about this, this is just the most basic example of dependency properties.
yes, you are right 
12:43 right now but when I wake up and am on the PC I'll try to help you put with a solution. You'll want to set a fixed size to the winform and you'll be using an array of picture boxes to spawn from right to left and move their position. Have the form check for a space key down to move your guy up and then down. You'll need to check during each update that your character isn't inside the box. Simple way of doing it. X and Y positions. If you want to get fancy look into jumping physics. 
We need some deep learning examples with [ML.NET](https://ML.NET). Mostly for stuff that Azure Machine Learning can't accommodate for and requires us to build our own models.
I think it’s a great idea. I just don’t use Windows apps anymore.
Thanks man, I'll try my best :), have a good sleep, and Happy Cake Day :D
Yo, big multinational corporation here. We are all down with Windows 10 and have teams that have put years of effort into making well functioning and pleasant Winforms apps and are now transitioning the organisation towards. Net core. Kthnxbye
You must have a relatively simple database schema. I spent a few days trying to port to ef core and gave up when I realised it was just a completely different incompatible system. Several key features were gone, not planning to return, or just reimplemented in a frustratingly different way
I didn't even know there was a JScript fundamentals! I saw Bob and assumed op video was the same c# series lol. Well spotted bud. 
Honestly OP, I don't want to sound like a dick here, and I know that I do sound like one, but I really don't think that you are best placed to give this estimate given the type of questions that you are asking. You need a much better understanding of both MVC and your own code base in order to provide this estimate, and it sounds like you don't have either. If you try and do this without this knowledge you are going to fail the client and yourself. Is there anyone else in your team that can help you with this? I would recommend that you go back to the client and let them know that it is likely to be a complete rewrite, rather than a migration (just to set their expectations) and then ask them if they still want you to go ahead and provide this estimate. If they do, let them know that it will take you some time given the scale of the work involved (just to provide an accurate estimate).
That exact one was posted to progrqminhorror a few weeks back even :D
I’m actually trying to accomplish something similar. Any interest in sharing code? I’d love to help out with this.
I don't want to decorate methods manually. This is why I added the middleware
Thanks I will look into this when I find time. Quite annoying that this thing worked on the full framework and broke when I migrated to Core
I'm also working on c# to google Sheets API if theres room for one more!
&gt; huge ass-mix *** ^(Bleep-bloop, I'm a bot. This comment was inspired by )^[xkcd#37](https://xkcd.com/37)
if you want a to use a real logger, Serilog is great. may be overkill for your needs though.
If your log will be rather long, you may want to write to a filewriter instead of storing it in a string.
Unfortunately the Murach's and Step by Step books mentioned here are only for general C#, not for .net Core, and may not be what you're looking for. There's a book that just came out called .NET Core in Action, which I haven't used yet but I do like other books in the "in Action" series. There are also some good courses on Pluralsight and Lynda.com. I'm able to get free access to Lynda.com through my local public library, it might be worth looking into whether there is something similar in your area.
Swashbuckle is easy until it's not. For example, our API allows for multipart uploads with a boundary in order to upload multiple files at the same time, and we basically had to overwrite Swashbuckle completely for that endpoint because we just couldn't get it to understand what we wanted. At least that was the case when we introduced Swagger to our API two years ago. 
If this will be distributed and you don't want to install extra message bus solutions, you could always make your Java program run your dotnet program and pass arguments through standard IO. It's not scalable or fast, but it is cheap and easy. 
Use NLog it's a great logging framework! 
http://bluemountaincapital.github.io/Deedle/index.html
I think most .NET developers would prefer to use a native machine learning library, rather than integrating Python code into their application, even if involves writing an extra five lines of code. As far as I'm concerned, ML.NET is the default option for my next machine learning project.
I never claimed you could. Based on [this](https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/versions-and-dependencies#targeting-and-running-apps-for-older-versions), you can have: * One installation of 2.0, 3.0 or 3.5. * One installation of 4, 4.5, 4.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 or 4.7.2.
All our apps have been UWP for about a year now at 2 of our sites, and 1 more will be UWP by the end of the year. Enterprise win 10 usage is constantly growing, it won't be long until it is ubiquitous. 
You might want to take a look at this page: https://en.wikipedia.org/wiki/Swap_(computer_programming)
Log4Net works great for us. 
&gt;I have a little question about the log class. What log class? You probably want to use a logging framework like NLog. &gt;I want to create a txt file with the logs after the copy is finish, is it possible ? Yes, logging to a text file is certainly possible.
You probably don't want to implement logging yourself, but aside from all the other issues (threading, dealing with file system locks, …), you almost certainly want to use `AppendAllText` instead of `WriteAllText`.
Can confirm
Ah okay. They're adding API controller conventions in ASP.NET Core 2.2 so you won't have to decorate them manually: https://github.com/aspnet/Announcements/issues/307
https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/append
Not a class name, but my test methods often look something like: Positional_WithPositionalArgumentThatLooksLikeLongNamedArgumentAfterDoubleDash_ParsesPositionalArgument Write once, read many.
Try using Zapier. They have a nice WebHook POST to Google Sheet integration. https://zapier.com/apps/webhook/integrations/google-sheets/1035/add-data-to-a-spreadsheet-from-a-webhook 
Meta Language
Thanks!
My guess is they want to open a mostly painless upgrade path from .net to core so they can make it legacy and eventually drop support. It's not going to happen anytime soon but they are going to build a nice road for people to take and give them time to migrate.
This man's accent was confusing to me. Seems like an interesting combination of accents...
near enough. [I made this a while ago](https://imgur.com/a/UrVwdtB) so it doesn't have Pipeline on it, but it shows the evolution over time /u/tweq is right on the intrinsics.
Hopefully you significantly cleaned up the various layers in the process too so you can make the ANC migration someday easier.
Have you considered an Azure Logic App? 
&gt; But you suggest me how to approach? Should I go page by page? Sorry if this comes off as rude, but if you have to ask questions like this, you might as well pick a number out of thin air. It might be in your client's best interest to direct them to someone more experienced. &gt; Or should I go for migrating to. Net 4.5 instead of mvc You need to understand what your client wants and what value they're expecting to get. "Migrating" to .Net v4.5 without changing your app from (presumably) Web Forms to MVC is something you can do in a day - you're just retargeting it. Rewriting to MVC will likely take weeks for a small application and months for most applications. There's an enormous difference between these two options and it's certainly not a similar either/or option. Also, if they're investing in a big rewrite why would you not jump MVC5 and go straight to ASP.Net Core?
&gt; but to really take advantage, you’ll want to dive deep What are you referring to? It's just a retarget. What "deep diving" are you going to do?
While log4net was great when it was new the development has more or less stopped, I would not use it when developing new software! 
That's not bad, though.
So beautiful. So clean. 
Yes, it's just a retarget, and it'll work, but merely retargeting won't give you any benefits (other than being able to reference libraries that require a newer framework). Code linked against .NET 2.0 will: * definitely not use LINQ, as it requires 3.5. There will likely be ad-hoc implementations of Select, OrderBy, etc. in the code, and they can be refactored away towards something more standard and readable. * definitely not use the TPL, much less async/await. * most likely (but not necessarily*) not use any language features of VB9 and newer or C# 3 and newer, such as: much nicer lambda syntax, type inference**, extension methods, string interpolation, … *) You _can_ use most language features while targeting an old runtime and framework if you really want to. **) No, seriously: C# 2 did not have `var`. And if the code was first created _before_ 2.0, it will even lack generics. You'll find usage of classes like `ArrayList` and `Hashtable` all over the place. So, to _really_ take advantage of the newer framework, runtime, and compiler, you will want to refactor significant portions of the code.
I strongly disagree with the reasoning. This indicates it's maturity. It also has the same configuration and output as Log4J, Log4PHP, and every other variation.
Seems like that would work
What do you mean? - C# code reading a json file into objects? - C# code read from json file and compiled then executed?
[json.net](https://www.nuget.org/packages/Newtonsoft.Json/) There are other options, but even Microsoft use it.
I suggested a rest api because it would be easy to point a qr to it and you don't have to expose your webservice publicly. 
Removed: Rule 4.
Removed: Rule 4.
I would just use eventlog. Is small, simple, straightforward and avoids the code bloat of logging frameworks.
&gt; I never claimed you could. -- &gt;Since when did .NET fx not support side-by-side versions? -- &gt;Since .Net Framework 4.0. as you just said, even before 4.0 it wasn't possible so your answer is more wrong that right.
This is true, go with AppendAllText as it just adds the text to the end of the file. 
I'm in no way an expert, but I'd wager that has more to do with the rendering backend (OpenGL for Avalonia vs DirectX for WPF), however I would not discard WPF being better optimized by Microsoft for lower resource usage. &amp;#x200B;
He also wants Windows Presentation Framework on non-Window platforms 
A reasonable migration path to core instead of a rewrite of the data access. We have projects that are simple enough to not need EF6, but its still a lot of work to migrate them. 
&gt;Would that mean that the libraries are simply wrapping Task.Run within their own methods at some point? No, generally these methods are genuinely asynchronous and do not use `Task.Run`. For example, `FileStream.ReadAsync` uses the asynchronous IO functionality of the OS and doesn't need to block a thread while waiting for completion of the read operation. &gt;The only use case I can see is when you are calling other async methods that live in libraries. The use case of `async`/`await` is to easily work with other methods that return a `Task`, yes. This will largely consist of calling various library methods, and your own methods that call other library methods. It is possible to write your own `Task` methods from scratch, for example with `TaskCompletionSource`. It's relatively uncommon outside of writing libraries, however.
Since you mentioned it, I’ve also been confused by this for a long time. What do you mean when you say “Genuinely Asynchronous?” What is the fundamental difference between FileStream.ReadAsync and a method I write that wraps synchronous code I’m Task.Run()? How can one tell if an asynchronous method is “genuine?” Is it possible to write a “genuine” custom method that does not end up calling a framework-level “genuine” method at its core?
At the end, I was trying to ask if it’s possible to write your own “genuinely asynchronous” method that doesn’t involve simply wrapping your method around another existing “genuinely asynchronous” method, such as the asynchronous methods in the .Net File API?
No I'm afraid not.
It would appear you're trying to access an index of your int[] ip that has not been assigned to anything. Changing this line: private int[] ip; to private int[] ip = new int[32]; should work
We use it at work, it's solid. Main problem with log4net is the documentation. Newer logging solutions also do have desirable features that log4net lacks.
Think about a JSON file. C# has the ability to read files, right? So in theory you could read and decode JSON on your own. (I'm giving you a hard time but yes, this turing-complete language can handle JSON)
Thank you for this. I will take your advice. Out of interest, what would you classify as the threshold for long running code? For instance I have some CPU bound operations that take between 100ms - 800ms. There I have used your advice and it works OK. Elsewhere I have code that takes between 2ms - 6ms. Would this still experience a benefit?
Async is effectively allowing the runtime (operating system) to participate in the scheduling of the program if it supports it. So any method you write that makes an external call (file/network) to the os, if the os supports it I would assume that method is doing it properly (with IO completion on windows etc) and making your function chain async. You may create your own TaskCompletionSource that can allow you to write other code that abstracts over some other waiting idiom and participates in the async system for its callers. So say you had a normal thread posting/waiting for events from say some usb device, you could expose a WaitForEvent method which returns a Task object, this method would return a TaskCompletionSource.Task to the caller the caller could wait on it however it wanted, then in the real thread where you're trapping things once you get an event, you could call TaskCompletionSorce.SetResult and it would signal the Task you handed out earlier to callers. If say you got more sophisticated by using IOCompletion instead of a Thread to monitor the device you could maintain the same interface to calllers and be "more" async with respect to the os. You could also make a "group" timer. Is another thing I've done that used TaskCompletionSource. linq pad script ``` async void Main() { Func&lt;TimeSpan,Func&lt;Task&gt;&gt; makeTimer = (TimeSpan delay) =&gt; { var source = new TaskCompletionSource&lt;bool&gt;(); Task.Run( async () =&gt; { await Task.Delay(delay); source.SetResult(true); }); return () =&gt; source.Task; }; var tellMeIn30 = makeTimer(TimeSpan.FromSeconds(30)); "Gonna Wait".Dump(); await tellMeIn30(); "It took 30".Dump(); } ```
&gt; Task.Run for long running code, use Task.Factory.StartNew Beware that Task.Factory.StartNew doesn't automatically 'unwrap' a task depending on what you do in the function: https://blogs.msdn.microsoft.com/pfxteam/2011/10/24/task-run-vs-task-factory-startnew/ 
&gt; myIP[i] = 0 I also believe that the myIp is declared as an object, so shouldn't it be this? myIP.ip[i] = 0; 
Thanks for this.
I don't know if they're is a ready made library that can do it, but it can be made. 
No. Your code accesses the array member of `myIP`. The original code invokes the indexer operator.
On the other hand it turns out to be a pretty cool word :)
In general I don't see why Win Forms can't go in the current mode adding features like high dpi and WPF can be moved to a similar position of maintenance mode if MS throw some dev resources to help Avalonia which can be the .NET desktop UI framework.
&gt; You forgot that nobody wants EF6. WHAT? EF6 is my biggest request. I migrated one project to EF Core and it was super painful and had to rewrite a bunch of queries that were perfectly fine on EF6 to raw SQL because EF Core generated complete crap. I have another project that I have migrated to run ASP.NET Core on top of full framework and after that experience I immediately stopped any plans to migrate that to .NET Core.
Worst of all you can compile and then it fails runtime. But that's not all. It can compile, run, pass integration tests and generate queries that are totally unusable with production volumes of data.
I wouldn't object to that plan.
You need WPF with a lot of new features?
This is not asynchronous at all. The only thing you do is wrap the result in a task which you await. The task is complete the moment your FromResult call ends. Everything that happens up to the moment you wrap the synchronous result in a task does block the calling thread. In my opinion this is even worse than the async void eventhandlers in the OP’s question.
https://gist.github.com/jonlabelle/841146854b23b305b50fa5542f84b20c I know this does not address your question directly nor this is a rtfm, but this helped me quite a lot when dealing with the "new" async programming in c#. Hope this brings value somehow. Cheers!
Live and learn, I don't usually write event driven applications, and most of my apps are not massive in resources, so I was just taking a punt at an answer. Reading the rest of the thread I have a better understanding on how these things are done 
Removed: Rule 4.
https://docs.microsoft.com/en-us/aspnet/identity/ gives a good overview for identity and such for user accounts
I think "genuinely asynchronous" in the way you're asking relies on communicating with some piece of hardware that's not the CPU. The disk controller executes independently of the CPU, so file I/O is "genuinely asynchronous". The network interface controller (NIC) executes independently of the CPU, so network I/O is "genuinely asynchronous". Clacking your fingers on your keyboard happens without the CPU taking control of your fingers, so keyboard I/O is "genuinely asynchronous". And so on. So how do you write "genuinely asynchronous" code? Pick a device, find/write some drivers that do low-level message passing between that device and the CPU, and then write .NET bindings on top of those drivers.
False. I don’t want to give any personal info about my project.
I wrote an article on it: https://www.infoq.com/articles/Exceptions-API-Design
Don't wrap I/O bound stuff in [Task.Run](https://Task.Run). That's creating a new thread, forcing callers to always create a thread if they want data, and that new thread is blocked anyway.
I'm sure there are hundreds of questions on StackOverflow that show syntax. I'm really interested in concepts and practices. For example: Should I wrap my code in a try catch block? All the code? Some of the code? Each individual line? Odd numbered lines only? Should I throw exceptions in my code? Never? Often? When? Why? What if I can just return null? Should I do that instead? Does any of this even matter? Does a separate a good product from a bad product? 
Official msdn documentation of exception handling best practices: https://docs.microsoft.com/en-us/dotnet/standard/exceptions/best-practices-for-exceptions
Thank you for posting. Microsoft used to have a great page on best practices but it has been replaced by... that. Honestly I think that page is incomplete and in several places it is incorrect. Hence this post.
It's not incorrect. And it's incomplete insofar as people like to believe their opinions on subjects are the final word. It's idiotic how much back and forth goes on between coders about bullshit like this. The standard isn't "what would a junior do wrong?" Catching and properly handling an exception is the best practice. How you handle it is up to negotiation among your team. It can't be completely generalized and doing it differently doesn't mean you're doing it wrong. 
 How do I tell the guy who went first? please you can reupload these links, I was downloading the fifth season and now the links are out! For God's sake, please, please! links have not worked since last week! pleas reup ## [TV] Desperate Housewives (1080p WEB-DL x265 HEVC 10bit AAC 5.1 RCVR) [UTR] [103 GB] [https://www.reddit.com/r/megalinks/comments/775bsl/tv\_desperate\_housewives\_1080p\_webdl\_x265\_hevc/](https://www.reddit.com/r/megalinks/comments/775bsl/tv_desperate_housewives_1080p_webdl_x265_hevc/)
IMO it's most important to be consistent. Don't have for example GetCustomer() return null of the customer ID doesn't exist, and have GetReservation() throw a "ReservationNotFoundException" if the reservation ID doesn't exist. Also, don't catch exceptions unless you know how to handle them at that point. (Though you could log the exception and throw it as well so there is a "stack trace" of where the error occurred in the log files) 
The question you keep asking cannot be answered with a general purpose response- there is no one size fits all answer to that question. That could be a great piece of code or a horrible one depending on the context where it is used. What is appropriate for a internal application could be horrible for a public library, etc. And for that piece of code, it really depends on if a null Order is an anomaly case or a valid business condition. And if the calling routine is expecting the null response or an exception to be thrown.
I created a list of podcasts in the .NET ecosystem. Did I miss any? _neeeed moooar ~brains~ podcasts...
My main concern with error handling is that the application should never quit unexpectedly, that’s it. It needs to be able to recover from any code path that could kill the application, from there you can figure out what to wrap with a try catch. Typically I would log the error and do any corrective action in the catch block to keep the application alive but still tell the user something happened unexpectedly. 
There are a few JSON libraries out there. JSON.NET is the de facto standard one. But yeah, basically going to keep this thread removed under Rule 4 because the question is easily googled.
Alright.
Correct. Don't use exceptions to control logic flow. They have a cost. 
Just chiming in: Exceptions have a cost though. They create stack traces and things and throwing "NotFound" exceptions can really make it start thrashing. Throwing custom exceptions should be avoided unless there is a really good reason for it. Like show-halting. Like maybe you check if a config file that is essential to operation is present... and it's not. That's a good use for an exception, operations must cease. Something isn't found? Throwing an exception is too heavy for that. 
Handling is easy: if a piece of code can throw at some level: - if you know how to handle the exception such that you can continue execution, then do it, i.e. catch and don't throw any more - if you know how to partially handle the exception, catch it, do whatever you can/should, then throw the same type or a different one with added context if you have anything to add; it is possible the only thing you can do is add context; - if you don't know how to do anything about the exception, then don't catch it at this level Obviously at some level you either handle every single one or leave some to kill your program. It's a design decision. In an interactive app it quite often makes sense to handle everything at the very top level, and show an error message to the user for them to decide what to do about it. The exceptions to this rule could be asserts that indicate bugs, or errors in some life-critical stuff, then you exit. But even asserts may not be lethal because they might just indicate that some functionality is not working, so the user can continue - depending on the audience of your app. 
Is there a reason you require this to be a listview? You could use a datagridview which has sorting and ui interactions with checkboxes. Take advantage of either LINQ or the standard settings available to either a datatable (binding it to the datagridview) or manually on the view itself
This is quite a fun project I did years ago myself. The basics as others stated are a fixed size form and some basic math are required for this project. First, you will need a timer (with a tick of 500 or sooner). Establish your picture box at a fixed position on your form. Next, the concept here is that obstacles will be moving not your character. As you move your character, the world moves. Keep track of your obstacles x and y. As your character moves forward, your objects x and y will increase; backwards it decreases. Finally the timer. Every tick you will check and see if your pictureboxes(player and obstacles) share any x or y positions(depending on your sized, I would keep them similar for easy math). That is the basic principle of what you are trying to accomplish I believe. Happy coding!
I think by long running, they mean minutes or hours
Merge Conflict with James Montemagno and Frank Kreuger. Focused on Xamarin, mobile, and whatever they're interested in that week.
You're going to need some proof because I have always read that to not be the case. I'm not going to say that you should use them to control logic, but you might find that in large application layers. But, being able to throw some kind of specific versions of `MyApplicationNotFoundException` that is caught by some middleware could possibly save you a lot of checks against response objects or `response == null` and deal with them in a standardized way. Something such as returning `NotFound()` from a WebAPI.
Not found isn’t an exception in a web api response... it’s a status code. No stack trace. Custom exceptions should be reserved for specific uses. I can find links to corroborate if you like.
To the extent that we have standards on exception handling: 1. catch the Exception 2. log it After that, it all depends on whether there's anything you can do about it at a specific place. Ideally, you have some sort of error handler at the far outside to manage a controlled shutdown (if needed) and to log whatever error made it there for troubleshooting, but it's pretty much impossible to nail down exactly what to log or where to catch an exception without a lot of specific details. As far as whether you *throw* exceptions, if you're dealing with code you have control over, I'd say you shouldn't *throw* exceptions unless there's nothing to do but fail the current operation. If you're in a position to *return* an error, instead, that's probably a more sensible thing to do, *but* it's non-idiomatic and you need to find a way to deal with it cleanly. This may mean returning some sort of discriminated union is the way to go.
.net rocks no longer rocks from .net perspective. It is too much of everything else. Even "better know a framework" segment most of the time is about something totally unrelated to .net. They should change the name of the podcast and spin off geekouts. 
Thank you! I've noticed that and it apparently never gets brought up
Hi! I am working on an experimental cross-platform chat (Telegram client) for Desktop: \[screenshot\]([https://raw.githubusercontent.com/egramtel/egram.tel/master/screenshot.png](https://raw.githubusercontent.com/x2bool/egram.tel/master/screenshot.png)) &amp;#x200B; I am using .NET Core and Avalonia: [https://github.com/egramtel/egram.tel](https://github.com/x2bool/egram.tel)
Interesting... I use Task.Run a lot under the assumption and I recall reading it was simply a shorthand notation for setting LongRunning and also just setting some of the default options in StartWith. When should Task.Run be used then appropriately? 
Oh my god
This week on "merge no conflict". -"xarmarin still sucks" find out why by downloading our 30gig explainer. - probably 
Don't know why you are being downvoted.. I want c# libs to be competitive. But a lot of c# libs are verbose.. nothing wrong in highlighting that ..we want to move forward we should point out issues.
&gt; We have just deployed a major migration from Linq-2-SQL to EF Core I knew they started on Linq-2-SQL but didn't know they still had some! &amp;#x200B;
Any opinions on handling expected (non-exceptional?) failures, as shown in this example? [HttpPost] public HttpResponseMessage CreateCustomer(string name, string billingInfo) { Result&lt;BillingInfo&gt; billingInfoResult = BillingInfo.Create(billingInfo); Result&lt;CustomerName&gt; customerNameResult = CustomerName.Create(name); return Result.Combine(billingInfoResult, customerNameResult) .OnSuccess(() =&gt; _paymentGateway.ChargeCommission(billingInfoResult.Value)) .OnSuccess(() =&gt; new Customer(customerNameResult.Value)) .OnSuccess( customer =&gt; _repository.Save(customer) .OnFailure(() =&gt; _paymentGateway.RollbackLastTransaction()) ) .OnSuccess(() =&gt; _emailSender.SendGreetings(customerNameResult.Value)) .OnBoth(result =&gt; Log(result)) .OnBoth(result =&gt; CreateResponseMessage(result)); } [https://enterprisecraftsmanship.com/2015/03/20/functional-c-handling-failures-input-errors/](https://enterprisecraftsmanship.com/2015/03/20/functional-c-handling-failures-input-errors/)
get yourself pluralsight subscribtion and take c# path. 
Thanks for the reply man :), I kinda get the concept, and I'll be trying it to code now, mind if I message you if ever I encounter problems that are out of my knowledge ?
Only catch exceptions you can handle. Catch specific exception. Don't use exceptions to control logic or communicate. That's about it really 
If you are using Visual Studio and create a Microsoft account, you'll get 3 months of pluralsight for free! 
I'd recommend googling the "Bulgarian c# book", it's free and better than a lot of books I've paid for. It's a gentle introduction to various programming concepts and best practice. 
That’s the beauty of abstraction and clean code folks. They went from dapper to EF core. Can’t be done with tightly coupled code. 
They didn't go from dapper to ef core... &amp;#x200B; From the link: "Since many have asked: Dapper isn't going anywhere. No Dapper was removed. A few code paths even went to Dapper instead of EF Core as part of the migration."
&gt;What is the fundamental difference between FileStream.ReadAsync and a method I write that wraps synchronous code in Task.Run()? First of all, `async/await` doesn't imply `Task.Run()` at all. Task.Run() means running code in a separate thread. async/await doesn't necessarily mean that. For your specific example, FileStream.ReadAsync won't run in a thread. The expensive (as in time-consuming) part of reading a file isn't something the _CPU_ does, but rather your _I/O_ — the hard disk, SSD, possibly the network, etc. Therefore, moving it to a different thread won't help much (as that thread will mostly be idling), and will hurt some (as it'll require a context switch, and as the result will need to be synchronized back to your previous thread). Hence, no thread. Use Task.Run() for code that you expect to take up significant _CPU_ resources: a complex calculation.
Take the free courses on MVA https://mva.microsoft.com taught by Microsoft employees.
No new release in over a year makes me suspect that it's a dead project. No matter how good it is there should be at least some bug fix releases! But I was happily surprised that it was supported on .net standard! 
Added, and subscribed. Thank you!
They didn't do that here. Also almost every single abstraction over EF I've seen is leaky and worse than EF. If I see one more armchair programmer proselytizing about wrapping something that already has a great UoW implementation with a much worse one that is bad and less comprehensible, I will be mildly discomfited.
Thanks, that solved the problem.
Thanks, that solved the problem.
Thanks, that solved the problem.
I find that so odd. I'd prefer to rip out a dependency like that on such a long term project.
You have to consider what employers are looking for. If you don't have the skills they are looking for you will not get hired. That is not to say that someone out there isn't looking for someone that knows these skills, but they may be the minority. If the market says that people are moving towards angular, then getting hired in 2 weeks will be easier as teams expand. However, there are plenty of legacy operations looking to move from say asp.net web forms to a asp.net MVC app. It's all about marketing yourself at that point for these projects. At the end of the day, do what makes you happy. You don't want to be in a team that you will hate.
No, it is 100% completely impossible to use React/Vue with a .NET Core MVC backend. There's code in the React/Vue libraries which sense a hidden endpoint exposed by an MVC middleware, something like /netcore/ismvcnetcore; if it gets an HTTP 200 back, React/Vue pop up a "FUCK YOU ASSHOLE" dialog and blow your app up. I believe newer versions of the libs even sense your source git repo and delete it too, maybe even post a message to your social media accounts saying "I SUCK BECAUSE I'M NOT USING NODE.JS".
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [Lightweight Key-Value Database](https://www.reddit.com/r/dotnet/comments/9lvvfl/lightweight_keyvalue_database/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
We don't because they aren't aware that's a thing they should care about. Incompetent, malicious compliance or job security, I haven't figured out which yet. Leaning towards the first.
&gt; Exceptions are for exceptional circumstances that can't be recovered from. So if I encounter some situation in my code that should never be encountered should I throw an exception? Others who have commented in this thread seem to feel the application should never crash. What to do? public void ProcessOrder(Order order) { // assume OrderType must be 1 or 2 // strategy pattern is NA here this is just a short example thx. if(order.OrderType == 1) // do something else if(order.OrderType == 2) // do something else else { // What happens here? } }
&gt; UoW Searched Google for "UoW" - Nothing relevant in the first 5 pages. Searched Google for "UoW programming" and still didn't. Should tell you something...
[Indexed property](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/indexers/)? A list behaves pretty similar to an array: List&lt;string&gt; strings = "Hello, this is a sentence".Split(' ').ToList(); string second = strings\[1\]; [https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/) Explains jagged and multidimensional arrays. They are rarely used since whenever actual representation of a matrix is required, or an array holding items that themselves hold items, there are often separate classes defined for those purposes to give the abstraction a proper name, often with the added benefit of methods to do calculations on those objects. But the option is there should you want to use it.
This isn't one of those cases.
Yeah, I wrote this post so quick that I forgot it's [ASP.NET](https://ASP.NET) to be specific. I'm already learning C# and I'm really liking it(Javascript is a mess compared to C#'s strict typing and organized concepts) and I'm not forcing myself to learn it at all. I already learned Node.js/Express, I even made some simple APIs with them but I didn't go beyond that really because first, I didn't like using it and second, jobs for them are much smaller than [ASP.NET](https://ASP.NET), PHP, Java not to mention that the ecosystem is...well, messy. Thanks for the advices! 
Search "EF Programming" on Google, and the first page is nothing BUT Entity Framework results. The above scenario shows that it's an unused acronym that no-one cares about,.
C# Players Guide
I tried following this demo. At the very end, he uses two classes, `SalaryData` and `SalaryPrediction` - but he doesn't seem to declare those classes at any point. Have I missed something? I tried creating the two classes, each with one `float` property of the appropriate name based on the properties he was using, but I got an exception with the message `Column 'PredictedSalary' not found in the data view` on the line which makes the prediction function.
I know but I mean how would you make the indexed property for a list? also in all these examples for Indexed Property I see only 1 array, I dont know how it would be used for multiples array, getting the length maybe? 
Entity Framework implements it. If you're dealing with EF, you're dealing with Unit of Work. Here's actually a good article that represents what I was saying: https://www.thereformedprogrammer.net/is-the-repository-pattern-useful-with-entity-framework-core/
"exceptional" doesn't in reality have any mystical meaning. it means the code is designed in such a way that it cannot return normally. treat exceptions as a flow control mechanism alternative to normal return. design such that you are using the most convenient mechanism that is easy to maintain and acceptably fast. don't let the name to fool you. and don't make a religion out of it. in your example does "else" mean a programmer error somewhere else? if yes then throw. whether to crash the app depends on other things i mention in another message. if it's a user error, you can set a flag in order and return normally, or throw - choose the most convenient way. if you need to pop through 10 layers of calls checking the flag until you can continue execution say for next order, i would use an exception. or if ProcessOrder is some widely used library method and order doesn't/can't have a flag. If it's a one off i would use a flag/
access a private List's element from a different class
You want to implement your own indexer to index into a private list?
I've used the book and it has some good points. But it has a serious lack of "get to the point" without a lot of extra stuff that should have been left on the editors floor.
ASP.NET MVC / Web API and ASP.NET Core are two different products, make sure you use ASP.NET Core it's the future. Start here https://docs.microsoft.com/en-us/aspnet/core/ Also React/Vue/Angular really doesn't care with what language or framework server side (backend) is written in. Good luck!
It's a pattern that is as old as the hills, and is now more commonly implicit in any active record with a transaction. https://martinfowler.com/eaaCatalog/unitOfWork.html
yes, but also i have a question how could I use same indexed property for different arrays or list in the same class
I think that's a fair criticism, the recursion section, for example, does start to run off solving classic computer science problems immediately after introducing the concept. However, the first 5-10 pages per chapter and a lot of the exercises are awesome. I imagine if I were starting to learn to program today I'd get on much better with this book than the current crop of "download these readymade solutions from our website and we'll add bits of code to them piecemeal" books you get these days.
I don't understand, but glad to be of help.
ok sorry check the edit
You can use regex
?
https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.json
Why do you need to roll you own? Most would suggest Json.net
I wasn't aware of this. Have you used this library? 
Your previous question was removed due to lack of effort (https://www.reddit.com/r/csharp/comments/9lnx5e/is_it_possible_to_make_c_read_off_of_a_json_file/) please make effort.
I think you definetly need to use jQuery with VB as per your last question's replies.
I still have no idea what you're talking about.
I did not say NotFound is an exception in WebAPI. I specially said that I wasn’t claiming that you should control flow with exceptions. When you separate your business logic layer and delivery layer (WebAPI), exceptions can be used to group errors in the business layer that can be handled in a standard way using middleware in the delivery layer. Once again, this is really only a benefit when the number of response objects would become cumbersome, or the path to get them back to the delivery layer is long. You also did not provide proof that there is a significant cost to using exceptions in any case outside of complete meltdown. 
And read the replies.
That mostly seems like it might be better replaced with a couple try/catch blocks. I like the idea, but this looks unnecessarily obfuscatory.
Are you seriously comparing this to a SQL database? Completely different problems solve they do. That said, I look forward to studying the code because there is definitely a place for an easy to use persistence store.
I prefer Json.Net since it's more flexible and makes it much easier to read arbitrary JSON. But if you really need a built-in solution, it's perfectly functional for basic object serialization/deserialization.
Ah, now that you have clarified about layers, I can agree with you there. Grouping errors into an aggregate exception from a layers subroutine is good practice, because that is exceptional. Would you also agree though, that these situations are uncommon, and should only be used as a pattern when it makes sense to? As for actual performance metrics, https://stackoverflow.com/questions/891217/how-expensive-are-exceptions-in-c Jon skeet wrote about this in 2006 and had much of the same opinion on exception cost as you mentioned, but then the community dissected and found that his test wasn’t representative of deeper stacks in a large solution. If you are really interested, I encourage you to read all the answers of that thread. One guy found that in a larger solution with deeper stacks, the exception speed could slow down to as much as 30,000 times slower than just using return codes. Rico Mariano wrote at length about it and I really like some of the costs that he points out, in how throwing exceptions causes page faults and runs code that in normal conditions would not be run, and explains this should be considered when deciding to throw exceptions or not. https://blogs.msdn.microsoft.com/ricom/2006/09/25/the-true-cost-of-net-exceptions-solution/ Basically rule of thumb that I keep reiterating is “only use exceptions in exceptional circumstances “
https://www.reddit.com/r/csharp/comments/9lozeh/asyncawait_clarification/e7a866n/
I listen to some select episodes and even then I find there is too much fluff. I used to learn something I could apply in the past. Now I find I get, at best, a very general overview of some things.
my idea of using an indexed property https://pastebin.com/RGA5JLM7
No you absolutely don't need to subject yourself to MVC development. You'll probably enjoy making a SPA with a REST API. I also use Vue for this. MVC is certainly ~~infamous~~ popular but not as maintainable or enjoyable to use, but it has a lot of job share historically - especially legacy. Perhaps make a few small apps with MVC simply so you can gain some ~~despair~~ experience with that overall workflow and approach (such as rendering javascript into strings, rendering data into the window object via @Html.Raw() to pass data to your javascript, using hidden fields in order to post extra data around, using jQuery for everything, attempting to understand how its backwards routing system works, dealing with it's JSON naming conventions not at all being useful for JS, form posting everything, etc). Then once you've done that you'll be able to compare and contrast that "experience" with writing modern front-ends with SPAs.
Why can't you use nuget? Why not json.net?
List already has capacity you can set by the way.
True but linq2sql has been a non-thing for a long long time now. I would have assumed some effort would have been made to push that out of the codebase.
I decided to create this library a couple years ago as I had a requirement to convert coordinate types and calculate location based sunsets. The library allows you to get solar/lunar info without having to use web requests using minimal code. It can convert various coordinate types and parse coordinate strings. It even has some GeoFencing abilities. It's been used in power savings applications, weather grouping concepts and The Walking Dead - Our World recently used it to fix its day/night cycle. Example usage: //Seattle coordinates on 5 Jun 2018 @ 10:10 AM (UTC) Coordinate c = new Coordinate(47.6062, -122.3321, new DateTime(2018,6,5,10,10,0)); Console.WriteLine(c); // N 47º 36' 22.32" W 122º 19' 55.56" Console.WriteLine(c.CelestialInfo.SunSet); // 5-Jun-2018 4:02:00 AM Console.WriteLine(c.UTM); // 10T 550200mE 5272748mN
Yeah but new features vs fixing tech debt in a legacy system that noone touches anymore.
I think I get what you mean. If you had three array fields could you write an indexer to access them all. I guess you could take two parameters one to identify the array and the other the index in it. It would be easier to just expose it as a property though.
\&gt; I was annoyed with the setup required for maintaining a database such as SQL &amp;#x200B; Have you tried SQLite?
Can you explain why you can't use any third party software? Being allowed to uses third party nuget package, in this case json.net, is pretty much necessary for any programming project. You don't have to pull from nuget.org itself. Companies normally mirror know good third-party software to their internal nuget server once it's been vetted by legal/security.
Json is not necessarily untyped. There are plenty of toolchains out there for strongly typed json interchange. Check out Swagger, JSON Schema, etc.
Week number in taskbar https://GitHub com/voltura/volturatools
Previously, we had: * ASP.NET MVC * ASP.NET WebAPI Now we have: * ASP.NET Core MVC If you want to make SPAs, then create a REST API using [ASP.NET Core MVC](https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-2.1). 
ok so instead a property for Count, I make an accessor for capacity 
I'd suggest Mechanical Turk over jQuery+VB
that seems a good idea, so i would have to write something like public int this[int index1,index2]? 
Hi, fun! Alright you can do it (as goes for most stuff you can do) in many different ways. One way would be to do a for loop with a delay in each itteration and update the the progress bar; for (int i = 1; i &lt; 101; i++) { Application.DoEvents(); this.progressBar1.step(); System.Threading.Thread.SpinWait(500); } this.label1.Text = "Work done."; 
Is in included with VS?
WinForms
CS1955 Non-invocable member 'ProgressBar.Step' cannot be used like a method. &amp;#x200B;
If you have any invariants check them at the beginning of the method and handle whenever you can. // Use a ProcessResult type here instead of void to message non-exceptional circumstances back to caller public ProcessResult ProcessOrder(Order order) { if(order.OrderType &gt; 2 || order.OrderType &lt; 1) return new FailedProcessResult($"Order type {order.OrderType} is invalid"); if(order.OrderType == 1) // do something if(order.OrderType == 2) // do something else // since 1 and 2 are exclusive no reason to else if with trailing else } The caller is responsible for handling the result, logging it, and either gracefully failing it's own logic. 
I would argue that SO is a codebase/business like any other, and there is always a higher priority on pushing out business features rather than erasing tech debt. 
?
I'll not give you code, since i think one of the most important skills to have is learning to search for something you don't know about. - Read Text from textbox - Start new Thread that does the following : - - Make input read-only - - Increment progress bar at desired rate - - when done with that, set text in textbox to something else - - Make input writeable
&gt;However now I can't open my controls in the designer. It say the Control is abstract. Why is that? Because the WinForms designer doesn't support this scenario. [There are hacks](https://stackoverflow.com/questions/6817107/abstract-usercontrol-inheritance-in-visual-studio-designer/) to sort of get it working, but I haven't found any that's reliable. Are you _sure_ you want to start a new control hierarchy in WinForms? It's a very old framework.
Great, writing on the phone so syntax might have been a bit off :) 
So make a new library layer that boils it down to 5 lines just like python does..
Why would they do it? It worked and the replacement (EF) wasn't significantly better. If they did replace it they would have to do the replacement once again (with EF Core) for no value. They skipped a replacement that was not needed.
As others users have mentioned — why not use SQLite? It’s fast, no-setup, and is well-supported by other languages and tooling. If you’re running on Windows, there’s also the ManagedEsent library you can use — it wraps some native database functionality provided by Windows: https://github.com/Microsoft/ManagedEsent
But why are you wrapping and referencing the same thing? Capacity = Limit
What is the old project written in? Either way it will be a total rewrite. MVC didn't exist back in 2.
That annoys me a lot but what I do is that I skip episodes that do not interest me and that means that I skip 60-70% of the episodes which are not .NET related. Testing SPAs? Making bots? Node and IoT? I just press delete in my RSS reader.
Basically people are ripping on you as you seem incapable of basic fucking googling and have some aversion to using software libraries, and when your posts get removed you just shitpost a new poor quality one.
I'm not surprised. Since Dapper was written by the SO team, I'll bet it fits Stack Overflow's use cases better than LINQ-to-SQL/EF ever did (or could).
You don't need to learn MVC but the fact that you have to ask this question is worrisome. It seems like you don't understand what the different parts of the stack do.
Your interfaces should be designed around the domain actions not replicating EF abstractions. 
I can second this. I once forgot to remove the ASP.NET headers and the React tooling formatted my hard drive. Those JS people really hate us because they envy us.
I recently made a font where by accident some obscure character is zero-width... Suddenly all variable names of a particular "friend" were only that character... 
What this is a whole paragraph.
Uh I have been googling it. I don’t want to use any 3rd parties because of optimization and I want to know how to do it myself.
https://docs.microsoft.com/en-us/dotnet/csharp/index 
How would I do it (Without) any third party libraries.
That's correct. What are you expecting to happen?
Don't do the threads yourself. You'll regret it. Use async await 
I don't understand what you're trying to do. Why are you wrapping a list like and doing the same thing a list already does? var numbers = new List&lt;int&gt;(); for(int i = 0; i &lt; 10; i++) { if(i % 2 == 0) numbers.Add(i); } int secondNumber = numbers[1]; Console.WriteLine(secondNumber); Console.WriteLine(numbers.Capacity);
You only ever assign one of the two fuel variables, but always try to calculate mpg for both. (Also, you really like doubles?)
The problem with most books is they're 'sold by the pound' so to speak (not literally). But in order to make a full book they have to put in a lot of filler text, otherwise they'd end up with only 30 pages of real content. The benefit of video courses like Plurasight is that they get to the point because they only have an hour or two to cover whatever they're covering. Also keep in mind that Microsoft/MSDN keeps all documentation online. So you can also access that for free. https://docs.microsoft.com/en-us/dotnet/ https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/ https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/ So not telling you NOT to get the book, as you may find it helpful but just to let you know there are other/better options.
Oh wait, I think I get what you're saying. Since I have the "else", only one of the fuels would be assigned, right?
The System.Runtime.Serialization.Json namespace should be fairly "built in", though that might depend on what framework/runtime your application is using. 
Yah, apologize for all the edits. Been jumping back and forth between the source code and trying to keep my thoughts in order. From your original code try adding the lines under my edit. That way you will have a value for both no matter the choice. Double check my conversions, but it should be a quick fix for what you’re looking for. 
You should always use decimal when it comes too money. That’s really it’s main purpose. Doubles have a higher float point so they can accept “more” decimals, BUT it comes at the cost of accuracy. You can gain or lose value decimal values during calculations which is something you can’t afford to have happen with money. 
Oh I care, I have an app that is much easier to convince Linux users to try if it's a single binary than if I tell them to download the core runtime.
Yes and they replaced LINQ to SQL with EF Core. If they had tried to replace it before it would be a wasted effort since they would have to replace it again now. They saved one replacement by not replacing it in the past.
well my point was trying to use an indexed property but not using an array,instead on a list, my idea was implementing the same property but I found it is basically the same to send the variable like an array does to the indexed property but I needed to set to a private property, my idea was accessing it from a different class what I am still wondering would be how I could use an indexed property for multiples class arrays
I inherited an application clearly written by a non-programmer that uses exceptions for *so much* control flow. It generates a list of items it needs to "check" for existence on a remote system. Instead of grabbing a list of items on the remote system and comparing the two lists, it attempts request, one by one, each item. When the item doesn't exist, it traps it in a `catch {}` block (yes, a bare catch). This is pervasive throughout the code... luckily it's a relatively small application so I've been able to eradicate parts of that control flow when I can.
If your goal is to learn how to parse json, there's plenty of open source example you can go look. https://github.com/JamesNK/Newtonsoft.Json https://github.com/neuecc/Utf8Json If your goal is to solve an actual problem, like load a json and display stuffs based on it. Just install a json library and move on. Here the documentation on how to install nuget package in a project in VS. https://docs.microsoft.com/en-us/nuget/quickstart/install-and-use-a-package-in-visual-studio 
Good to know! Thank you
Awesome, going to give it a look.
Thank you! That will help me greatly!
Fixed the init, replaced presencecheck with containskey the rest will follow suit
So are there any comparisons to say, sqlite on performance? 
Apart from ‘type sharing’ which seems semi interesting, everything mentioned in the article as a positive can be a negative, too. Joining fe and be builds means your fe and be devs have to commit to the same repo; incremental builds mean if some dependency is incorrectly versioned, you might get screwed at runtime (the infamous Json.Net 4.5 versions, for example). From my perspective, independent builds, repos and shipping code built every time from scratch (but only for one environment, and then deployed without recompiling everywhere else - e.g. docker, msi installers etc) is the only way to avoid weird issues that lie outside of the code itself, and the only way to make teams grow.
I don't know if I can answer your specific question, but there's probably a start here https://stackoverflow.com/questions/16253215/open-and-modify-word-document That being said, if you are going to automate a form, why export it to WORD at the end of the day, just for it to be transcribed again into another system. This sounds like something that you could do with Google Forms or something, and just have people read those submissions directly. Why go through Word at all?
Do the official tutorials on the MS site, then build an app.
you can work around it by giving all these variables an initial value of 0
Because they are only ever set behind a conditional, it is possible that they will remain undefined. The Compiler hates that. Set them to zero when you define them.
There's lots of ways to do it, but it needs to be done.
Yes, but there are three fields. I basically want the user to put in their "ID" like "8920189" etc and then it needs to output their first name and last name as I would have typed it in the code, and there needs to be other ID's as well.
First of all, use [SignalR](https://www.asp.net/signalr). Works great for chat on [desktop](https://www.codeproject.com/Articles/1181555/SignalChat-WPF-SignalR-Chat-Application) and [web](https://docs.microsoft.com/en-us/aspnet/signalr/overview/getting-started/tutorial-getting-started-with-signalr) apps.
Meat Loaf
It's good to see fellow .NET devs and Reddit users from Mumbai posting here and on GitHub. I forked your project and made some changes that were related to clean code and clean project structure, something that's crucial for both personal and professional projects, open source or not. [Fork link](https://github.com/prajaybasu/DataDrop). Please add a LICENSE.MD file with a suitable open source license like MIT and also please unlist (since you can't delete) your nuget package (with the name DataDrop.dll) because it's not appropriately named (it should simply be DataDrop). Type `dotnet build` to build the solution, `dotnet test` to run defined tests and `dotnet pack` to generate nuget packages. https://xunit.github.io/docs/getting-started-dotnet-core https://docs.microsoft.com/en-us/dotnet/core/tutorials/using-with-xplat-cli https://docs.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli 
Ok thanks, I'll make those changes
First try OpenXml, word interop is pretty ugly and you'll only hear how it's not recommended/supported. I did manage to use word interop, it's slow and error prone.
Is it possible for you to recreate the word document? In Office 2013, Microsoft introduced Content Control XML Bindings. It is now possible to add a custom XML file to a word document. Then you are able to create content controls which are mapped to certain XML fields. If the user edits a mapped control, the XML field is automatically updated by word itself. You just have to get the custom XML file from the word document and then read the XML fields. No Word Interop necessary! Just OpenXML APIs used here. This way I automated the whole document processing in our business. The server component fetches data from various systems, reads the data definition in the template XML, modifies the data accordingly, populates the XML, adds it to the word template and sends the word document to the user. On opening, the mappings get updated (not visible for the user), and the user has a complete document with all needed data. Complete word automation from a server without word interop. 
No need to modify XML bare hands. Use OpenXML in case of docx.
Where is this notion of an indexed property coming from? What language has this feature?
You would most likely have to create a server to handle the connections. (Very basic using Socket/TCP) Or look into Peer-to-Peer networking (a lot harder)
Look up a nuget package called DOCX. It makes manipulating word docs pritty easy and can do what your looking for be editing a template 
I did come across this a while back https://gunnarpeipman.com/aspnet/aspnet-core-websocket-chat/
I did exactly this a month or two ago. I've got to say, SignalR made it stupid easy. I just found a basic tutorial somewhere. There are lots of them. It was easy. 
 if (File.Exists(..)) { // Oh noez, some other thread/user/antivirus deleted/renamed/log-rotated that file File.ReadAllText(...); } The second you add a try-catch, the File.Exists call makes no sense, except if you don't 'need' to read that file (if so, why try it at all?) The system throws a `file not found` as it should. It could return just null, or Optional&lt;string&gt; or .... But it doesn't, because this exception is one that should not happen ever - it's exceptional. Any custom 'NotFound' exception could apply the same rule as FileNotFound, that's why there are First and FirstOrDefault methods on Linq
You can find everything you need about network programming with C# at 16bpp.net. https://16bpp.net/tutorials/csharp-networking/preface
If you wanted to do something like that (just running something off thread) you could use async Task MyMethodBG() { await Task.Yield(); // always puts you off the thread, does not need ConfigureAwait(false); // Do your background work, but don't say that this is inherently async, because it's not. }
I dont think reinventing the wheel is a good idea in this instance. There are many databases and storage solutions that are readily available that are tried and tested. SQL or non SQL, 
Clean as a whistle, i cant thank you enough
Just as a tip, you should work on your naming early. Get into the habit of really meaningful names now and it will be second nature later. For example what is `fuel1`? I assume it represents the price of fuel in the US? So a better name might be `usFuelPrice` or something similar. If you name everything like that you (and others) will have an easier time reading your code because the intent will be much clearer. i started programming 14 years ago and only started doing that in the last few years. It is crazy how hard it is to read some of my old code.
https://github.com/dotnet/corefx/issues/29417 
Or look onto what /u/floriniii posted. A chat is even an example for how to use SignalR. 
Try the student edition of Resharper. It can automatically suggest fixes for the two situations described here - also null references, multiple iteration of enumerable, adding readonly to class level variables and much more. [https://www.jetbrains.com/student/] (https://www.jetbrains.com/student/)
&gt; It means something is wrong - probably programmer error but perhaps data corruption or perhaps there is a new order type and someone forgot to update the method. in this particular case throw an exception - it's a guarantee the error won't be silently ignored either by you or the users. you are still better off with a top-level handler - it will prevent your app from plain crashing in the presence of such errors. then decide if you need to tell the user about what happened and what they should do, whether you do it right away or maybe after your app has correctly processed a whole bunch of orders. whether to kill the app or continue. it all depends on the situation, the app audience, how life/business-critical it is and so on - so think through various scenarios and choose the best. there is no universal answer. also don't expect that you always find the correct approach right away - it may take time to sort things out with all stakeholders. 
You can try udemy course - Build an app with aspnet core and angula from scratch. It cover a lot of thing and its updated for core 2.1 and angular6
This the correct answer. Instead of going through all the hassle of 3rd party libraries to find your elements on your current page, you should just create the doc each time. I have had many projects were a manager or director wanted one thing, then ended up wanting something different next week. You will thank yourself in the future.
Thanks! &amp;#x200B;
There is a specific course on this on pluralsight.com
Why learn any tool or framework? Because it is good to try different things. For example I began programming with C# and after a while started to learn a little bit of C++, the reason is simple, more knowledge is always better and allows you to better pick the correct tool for a job.
https://www.udemy.com/build-an-app-with-aspnet-core-and-angular-from-scratch/learn/v4/overview I am doing exactly the same course I think, and getting a lot out of it. The assumption is that you already know programming, but the pace is perfect as a way of transitioning to the new software
I've read all the posts in this thread and still don't know what you're trying to accomplish. Lists have an indexer just like arrays do, so that can't be what you mean. Since you keep mentioning "indexed properties", I wonder if you mean the obscure VB.NET feature of property parameters ([C# does not have an equivalent](https://stackoverflow.com/questions/11711659/c-indexed-properties)), but that still doesn't answer what you're actually trying to do. Best as I can tell, you are overcomplicating the problem, but what even _is_ the problem you're trying to solve?
[removed]
I didn't use SignalR before but I used [Socket.io](https://Socket.io) \+ Express and it's very easy to make a simple chat so my question is, is it as easy/supported to make a chat with SignalR?
what is computar
Not yet. There are some benchmarks (www.cell-lang.net//benchmarks.html), but they only compare the performance of Cell and Java for purely computational tasks. The next release (0.3) of the compiler will provide a much more optimized relational layer, one that I expect to be competitive in terms of performance not just with embedded SQL databases, but also with optimized object models implemented directly in C# or Java. Once it's out, I'll post benchmarks for it.
If the original developer(s) were heavy into TDD, separation of concerns, inversion of control, etc. you might be able to salvage a fair amount of it. That would be a minor miracle, though, since .NET 2.0 was still largely dominated by VB6 converts and RAD teams. Safest bet is to assume it’s a rewrite and anything you can salvage is a happy accident.
Project Steel Toe has some of the same components as spring cloud https://steeltoe.io/ Other than that there is spring.net http://springframework.net/ Not sure if there is a spring boot equivalent
When you are setting your mpl and mpg variables, you are dividing by an unassigned variable (either fuel1 or fuel2). You should set them to something first or maybe do the division inside the if fuel input block.
They already own Windows licenses.
Thank you for the advice. I will definitely work on that from now on.
I believe most of this is handled. For full framework apps they just do that. For core I think publishing options can achieve this. But I'm not sure about core. I haven't used sprig boot I'm just guessing based on a quick Google. 
Why not Vue or React?
Good to know, thank you
I wouldn't mind learning Vue. I mainly wanted to learn how to create .net API. But seeing how the entire stack is built helps me. 
If you're learning try to go with vanilla asp.net core first as it should have most of what you need.
Unity is your friend here.
When you click a course link and find you already bought it...this is my general Udemy experience, so much ambition so little time lol
also [Monogame](http://www.monogame.net/). Depends on what you fancy.
And if Unity 3D doesn't suit you for some reason, i found Neoaxis a good alternative. Less tooling and no premade prefabs, and a small community, but built in C# and easy to understand code.
+I For LiteDB.
+1 I started with angular and then went to React. Really wish I had just gone with it in the first place. Such a joy to use. 
Yeah it’s really good. It’s by Shawn Wildermuth. 
I assume you mean mapping between DTO's and domain objects etc, have a look at AutoMapper.
angular's own tutorial is pretty good https://angular.io/tutorial
Is `myFarm.Chickens[3]`, `myFarm.Cows[4]`, `myFarm.Pigs[5]` what you want? If so, all you really need is three properties with a collection type, such as array or List`T.
I’ve never used React but one day I’d maybe like to learn. I use Angular at work and I don’t see any problems with it.
It‘s the other way around for me. Mostly because TypeScript is supported out of the box, proper two-way binding and that it has much more framework features which aren‘t render/displaying related.
For dealing with C# variables in VS you can use the [immediate window](https://docs.microsoft.com/en-us/visualstudio/ide/reference/immediate-window?view=vs-2017). When you place a breakpoint you can manipulate many things.
Look up Uncle Bob. He uses Java in his examples but everything is applicable to c#.
Wrapping the SOAP call in a REST api is a great idea. 
Sounds you are looking for best practices. Like you said many times people have opposing views. I would recommend [C# Coding Conventions.](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions) It touches on some of what you discussed. I would also look up the gang of 4 and the book "Design Patterns: Elements of Reusable Object-Oriented Software". It teaches some best practices on the pattern side of things.
this is the standard example of modern .net core micro service based web-at-scale architectures https://github.com/dotnet-architecture/eShopOnContainers
i personally think .net developers tend to like angular more than react. as we come from a framework ecosystem.
Search - Programming design patterns Read - clean code 
async/await. There are a million ways to get it wrong. Nuget packages that are async/await get it wrong. For example, SQLite-Net-PCL (Xamarin) wraps everything in Task.Run. Not good. Everything and anything by Stephen Cleary (even his non async/await stuff) is fantsatic. Such as https://blog.stephencleary.com/2012/02/async-and-await.html A word of warning, is that async/await is a [zombie](https://msdn.microsoft.com/en-us/magazine/jj991977.aspx). Once you start using it, it's going to spread throughout your entire codebase. One thing that few people will suggest, is that it's perfectly fine for a method to "just" return a Task (instead of async Task). That tip is hidden in a MSDN video somewhere.
Along with all the other suggestions, you should read up on the [SOLID principles](https://en.wikipedia.org/wiki/SOLID). There are many articles on this if you need to dig a bit deeper. 
OpenTK is a graphics library, while something like Monogame is a game framework. With unity being the highest abstraction as a game engine. If you want to learn a lot, install OpenTK and translate the cpp from the variety of OpenGL tutorials available, such as learnopengl.com. If you maybe don't want to do quite so much manually and are more wanted a 2d game instead of 3d, go Monogame and look up some XNA tutorials(Monogame is the cross platform port of XNA). And finally if you just want to skip all the fluff and make a game in a few days, Unity has you covered with the sheet amount of beginner material and assets available.
It's a docx file. I was actually reading something about the connection between XML and word documents. Was only able to do some skimming, but I'll need to look into that more. 
An object is an instantiated class. 
A class is a blueprint and an object is an actual thing created from a blueprint. [Here is an SO post that can provide more details](https://stackoverflow.com/questions/8550130/what-is-the-difference-between-objects-and-classes-in-c). A class != an object. You wouldn't say that a blueprint for a house *is* a house.
Class = blueprint for an object. Example: Class person. Objects of that class = karl, peter, anna A class is to an object like a datatype (int) to an intilialized variable (myInt = 10). Person karl = new person(); Int myInt = 10;
A class is a type of object. This may be very broad (e. g. Car) or very specific (FordPinto1979V6): it depends a lot on the needs of the system being modeled. An object is a specific thing. So, if you owned a 1979 Ford Pinto with a V6, *your car* would be an object, and FordPinto1979V6 would be its *type* (in a contrived and entirely hypothetical system). C# allows you to get objects that represent types within the platform. Conveniently, these objects are of the type `System.Type`. These aren't actually types themselves, but they do contain a lot of information about the respective types they represent.
You define the class, the program uses the object. The object is an instance of the class. Webster's dictionary defines "dad", the world is filled with people that are dads. Your dad is an example of a dad. Weathermen define what conditions are required for a hurricane, there are multiple hurricanes per year. Katrina was a hurricane.
It doesn't look as though this code actually _calls_ `PrintArrays`.
just wait a week, it will be on sale again :'D
What you're probably looking for is called "Design Patterns." It's a set of named best practices along with lists of times where they are helpful / most useful. The most widely known set is from a book called "Design Patterns" by the Gang of Four. [Here's a link to a site](https://www.dotnettricks.com/learn/designpatterns/gang-of-four-gof-design-patterns-in-net), but I also recommend the book, even though it's written in C++ and a little dated. 
I'm seeing it at 94% off ($11.99)
If your exporting to excel may I suggest EPPlus? It has some great libraries for working in excel and I think are much better than working with the standard interops.
Do you know how can I download it?
You can either get it directly from github with a clone (if you are curious for the samples) here.https://github.com/JanKallman/EPPlus Or you can get the package by using a nuget request. You are using visual studio correct?
Yessir, in windows
[AutoImplement](https://www.nuget.org/packages/HavenSoft.AutoImplement/) is a utility that can automate the creation of common design patterns: composites, decorators, and stubs. I created it because I know I don't use design patterns often enough, and I hope that automating the glue code makes using them more attractive. 
Hello, thank you very much for replying. What do you think the best way to call PrintArrays is? 
It really depends on what you are wanting to do. Since you said you want to do games I'll put them at the top of the list. * 3D Game: Unity * 2D Game: Monogame (you can use Unity too, but last time I used it the 2D experience wasn't very good) * Win10 App: UWP * Win7 App: WPF * iOS/Android/Mac/Linux: Xamarin
As the other comment said, the method containing the bit of code you’re referring to isn’t being called. Also, if you’re using visual studio you could have used the debugger and placed a breakpoint on the line of code and noticed it never got hit. I’d recommend making use of the debugger whenever you can when things aren’t working as expected at runtime.
You already know how to call `power()`…
If your using visual studio, go to tools&gt;nuget package manager. Type in EPPlus and it will be the top install. Once you have it in your project, just add the using statement and your good to go. I'd recommend going to stack overflow or use the EPPlus samples on their github. Happy coding!
Omg! Ty! I will sure use it, as I use a lot of excel for work calculations and sometimes excel gets quite laggy or just cannot keep up
I would suggest most of the Robert Cecil Martin books tbh.
Take a look at Service stack as well. Not sure what if there is a free version but it is an interesting "framework"
another vote for reading into design patterns and the solid principles. don't just blindly follow things though as some stuff has fallen out of favor. 10 years ago i saw static singletons (one of the most known design patterns) and static utility methods everywhere in c# code bases. these days doing that seems to be an anti-pattern as it tends to make your code pretty difficult to test. however, the concept of a singleton lives on ... more about that in a bit. i would say it's pretty uncommon to see actual inheritance in contemporary c# code as well. rather than inheriting shared code, most people are going to inject dependencies that implement that shared code. this is all done via extensive use of interfaces. rather than overriding a method in a base class, you'll just implement the interface that defines that method. rather than other code taking something that is of a base class type, they'll just take something that implements the appropriate interface. a lot of this falls under the dependency injection umbrella and most people will also use an inversion of control container in their code base to make DI easier. DI and IoC go hand-in-hand so much that most people will describe IoC concepts when asked about DI. so, back to singletons. the most common thing i've seen these days is to have your 'singleton' just be another dependency that gets injected via an IoC container. the IoC container will just be configured to only ever create one instance of that dependency and inject that same instance everywhere where the functionality is needed.
I thought I was calling on Printarrays with a public static void.
Also mvvm 
I believe he's talking about a javascript variable. I think he wants to have a c# program watching variables running inside a browser javascript app.
Thank you!!! I thought they were different. That makes sense. 
Perfect, thank you!
Gotcha, makes sense. Thank you!
Unity doesn't allow for JS and UWP/WPF/Xamarin are not made for making games. Unity's 2D support is decent since the last couple of years. 
PrintArrays Method doesn't really do anything. Also you never call the PrintArrays method. 
Hey! I work quite a bit with both spring boot and .NET The short answer is it’s different but .net would be your equivalent of spring boot. Spring boot is definitely more advanced imo and allows you to rely heavily on annotations for middleware and DI, But you should be able to find the .net equivalent for doing all the same things from Routing to security, filters, orm’s/data access patterns and choices, logging frameworks etc. You would want to start with with .NET Web API and build from there. 
OOP principles and design patterns did not change much in the last 20 years, it is still the same problem which one is the best for my task. What has changed dramatically is the industry urge to have all code **unit testable** with ideally 100% coverage. Hence that dictates the code design best practices and as a useful side effect makes code less coupled. As [u/anamorphism](https://www.reddit.com/user/anamorphism) well described, that's the latest approach to the code composition: layered architecture of loosely coupled components (nothing new here too) where other components functionality is reused via dependency injection (DI). Each dependency is hidden behind an interface, that makes it very easy to mock its functionality in a unit test, injecting a fake object implementing the same interface instead of a real one, disconnecting the testing logic from the rest of the code/system. There are bunch of various (nuget) packages available to facilitate both IoC container configuration (another magical pattern) used for DI and objects mocking with subsequent validation of results. That's shortly the direction I'd take the further research to.
It's static not strong - https://ericlippert.com/2012/10/15/is-c-a-strongly-typed-or-a-weakly-typed-language/
Yeah. I usually think of returning a Task as being like returning a Func. It's usable in much the same way but designed for async. Indeed, one may easily convert a Func into a Task so it's a very close analogy.
Dude, call the consulting companies. PM me if you want an introduction.
You *can't* use `ConfigureAwait` with `Task.Yield`, but that doesn't mean it's not needed. If you do this in a GUI application the scheduler will put you right back on the same thread after the await and you still block the UI.
[removed]
Solid pays the bills, yo.
I'm opened to learn some new stuff! I really appreciate your advice! I'll take a look into it and, hopefully, get it working
Do you know how to make games with IWP?
It is old, but it is an option, and it is well supported for third party controls developers. 
I will never understand how a piece of paper (degree) will magically earn you more money at certain companies. I will take experience over a degree any day. Furthermore self taught devs are very good at figuring things out and almost always have a mad drive to learn. You don’t teach yourself programming unless you REALLY like it and have drive! 
Windows will be charged per year or month soon enough.
THANK YOU. I generally can't justify a degree price. Except my boss's boss used to be an english teacher so he REALLY gives a shit about then :P But, I'm mostly self taught and learned past my classes.
This wasn't his question and adds nothing to this conversation. 
C# is both ‘strong’ and ‘weak’, and also both static and dynamic, depending on what you do with it. For the most part, though, C# is a ‘strongly typed’, statically typed language. 
&gt; Unity doesn't allow for JS Right, they call it Unityscript now. &gt; UWP/WPF/Xamarin are not made for making games, they are UI frameworks. Hence why I stated their purpose in my list. With that said, you can make games with Xamarin.
&gt; Right, they call it Unityscript now. It's deprecated for a good reason
Look at my library [Veldrid](https://github.com/mellinoe/Veldrid) if you want a small, graphics-only library, instead of a sprawling game framework or engine. It is lower level than some of the alternatives mentioned here, but you will have much greater control and learn more about modern rendering techniques and best practices. If you were looking at libraries on the level of OpenTK (which is basically just a wrapper for OpenGL), then Veldrid is a good modern replacement.
Unity or CryEngine. CryEngine is dope, obviously, but it has no docs.
I want something simple, not a complex game framework. I thought about openTk because that way I can do most of the work and that what I want, in unity you have a lot of stuff already available for you
I'm genuinely sorry, I myself mis interpreted the functioning of Task.Yield. Task.Yield just "queues the rest of the method onto the SynchronizationContext" (or ThreadPool if SynchronizationContext.Current is null)
My favourite book (and I have read Harry Potter) is "Agile principles, patterns and practices in C#" by the great Robert C. Martin. Don't be scared off by the "agile" part of the title. It's probably just there to sell the book. It covers all the topics that come to mind about clean code (SOLID, TTD, packaging etc.). It also does what most books forget (or others are solely focused on), which is to promote a mindset to help you use the knowledge in your everyday work. Even more important it also teaches you not to overdo all those things. It's so great, it's hard to describe. If I were to suggest one single book every professional C# programmer should read, it's this one.
OpenTK translates OpenGl into idiomatic C#, as well as providing extended functionality such as platform specific window management. You'll need to adapt lines of c/c++ opengl calls to OpenTk "syntax". Here is an example, as you can see the lack of `void*` means you have to use [`IntPtr.Zero`](https://IntPtr.Zero) and all the old global constants become enums ie `BufferTarget.ArrayBuffer` instead of `GL_ARRAY_BUFFER` glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW); becomes GL.BufferData(BufferTarget.ArrayBuffer, new IntPtr(vertices.Length * sizeof(float)), vertices, BufferUsageHint.StaticDraw); and glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0); becomes GL.VertexAttribPointer(0, 3, VertexAttribPointerType.Float, false, 5 * sizeof(float), IntPtr.Zero);
Lol this seems pretty complex, I'm not that expert in c#, just started about a year ago, so I don't think I'll go to openTK for now 
You need to Console.ReadLine to read users input and Console.WriteLine to print output. But that example video seems to be telling all of this. I just jumpped around video without audio, but seems that everything you need is there. Also example is quite bad in one case, you should never store money in double/float, store them in cents to long (64bit int). Maybe use decimal.TryParse to parse input values and then multiply with 100 then convert to long. 
Uh yeah, graphics programming isn't the best place to jump in when learning a language. But if you really want to learn, look up learnopengl.com and try not to be scared by the paragraphs on paragraphs about matrix translations and vertex math 
For posterity: there are also lists of anti-patterns to look out for.
As others have mentioned Design Patterns; check out this guy Design Patterns in Object Oriented Programming: https://www.youtube.com/playlist?list=PLrhzvIcii6GNjpARdnO4ueTUAVR9eMBpc While he will not replace GoF book, he'll give you a solid grasp of the topic
I just got it into my head that Task is basically void. Made it easier to reason about.
That's a bit hard if you are new to programming
Thanks! 
&gt; My First Big Project welcome. This is just beginning. The real world project isn't 200 line of code. keep practice
Thanks! I'll keep practicing :)
Read the article :) &gt; So which is it, strong or weak? It is impossible to say because it depends on the point of view of the speaker, it depends on what they are comparing it to, and it depends on their attitude towards various language features. It’s therefore best to simply avoid these terms altogether, and speak more precisely about type system features.
Licenses with software assurance cost per year
Can't help you with that, but there is [stackoverflow.com](https://stackoverflow.com/) which is better suited for your question.
Have asked there but turnaround time here is shorter so I thought I'd give it a try :P
Your reply added nothing to this conversation.
Try to avoid too many annotations in C#. There is almost always a better way of doing things that is more decoupled. All the decorations is one of the things that drives me nuts about working in Java. No need for @Component, @Service, @Autowire, etc. Decorators on controllers, to map HTTP verbs, are fine. I seriously can’t think of anywhere else I use decorators with any frequency. I very strongly recommend the fluent mapping for Entity Framework and other ORMs. If someone found a way to replicate @Autowire in C#, I’d make sure every scrap of code they had got reviewed by another dev.
So, basically simple test logic and front-end tests? e.g open browser click button X insert data Y click button A check whether result match expection? :P
Sounds great. 
Add a global catch in the api, log it and re-throw it as a json message with a 500? Let the front end display it as appropriate.
&gt; installshield There's your problem!
You can't. Testing frameworks like NUnit will detect that your app is simple and lacks of complex logic and automatically fail all tests.
Here is what I do. - Unexpected exceptions which are a bug - just let them surface as "unexpected error" to the user via the global handler and log them. In this case the global handler doesn't need to know about the type because it is always "unexpected error" it is an error in your code. - Sometimes error situations should be shown to the user. For example if the BL says that a product cannot be deleted if there are still orders referencing it. In theory methods should return some kind of result object but sometimes it is just not justified to change the API so much and follow the rule dogmatically. In this case I create a BusinessException class and add this to the handler. If a BusinessException is caught a general purpose error popup is shown to the user but the message is the message from the BusinessException which should be suitable to show to the user. In your case an empty catch doesn't seem right. It seems like you should fix your bug. How come you are losing files like that and are fine with it?
Oh I’m sorry, I’ll make sure in the future my responses are improved. Just for you!
Removed: Rule 4. Break down the task into smaller steps. Figure out how to read input from the console, figure out how to store it in memory, figure out how to cycle the console (so you can keep entering commands), figure out how to increment/decrement the quantity of an item in stock, bit by bit.
Very true. Just because a lot of people on the internet do something a certain way doesn't mean it's the best way to do it. It might mean it's the *easiest* way to *start* something (God objects come to mind) or it could just mean that all of the people ran into the same problem (not knowing how to refactor).
I didn't ask whether I can :&gt;
Value types are objects, too. All value types derive from `System.ValueType` which, in turn, derives from `System.Object`. Boxing a value type just puts the value type on the heap and, in turn, making it a reference type. So, it is more accurate to say "an object is an *instance* of a type where 'type' can be a class or struct". To clarify, a value type *is* an object (a value-type object), but when you box a value type such that its value becomes an `object` during runtime, that value is now reference type on the heap. [Mire info here](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/object).
For 2D games, use MonoGame. Monogame took over Microsoft's XNA. It is a lightweight framework and, in my opinion, is a lot more fun to use to create games than sophisticated game engines. For 3D, use Unity3D with C# scripts.
not taking everything literally is also a good skill; obviously a common sense has to be applied along with handy attribute **ExcludeFromCodeCoverage** taking care only of designated areas. 
Pluralsight is your friend. 
Are you asking whether I believe UWP would be a bad choice for a cross-platform UI stack? I'm undecided. As it stands today, it's very strongly tied to the Windows platform.
&gt; Will .NET Framework implement .NET Standard 2.1 (and its associated runtime features) in the future? No. .NET Framework 4.8 will remain on .NET Standard 2.0. &gt; Will DesktopUI or parts of it be open-source? I don't think we made a decision around this yet. But needless to say we fully understand why people care :-) &gt; Does Microsoft have any plans to allow `libgdiplus` being used on other platforms? No idea as it's my area of expertise. &gt; Will XAML Islands support .NET Core 3.0? I *believe* the answer is yes, but I'm not entirely sure.
Does my [comment here](https://www.reddit.com/r/csharp/comments/9ldt98/update_on_net_core_30_and_net_framework_48/e75yv4b/) address your concerns?
according to my research people will downvote my c# questions in less than 300 milliseconds 
I started as an automation QA and transitioned into dev. Just keep reading and writing code. Try to understand all the terms and concepts the devs talk about at work... go home and research them afterward. Do tutorials and read articles from multiple sources on concepts that are hard to understand. See if you can start fixing small bugs you see in the production code, so you can get experience with checking in and merging code to the same repos as the other devs. Once your name starts appearing in the commit history, you’re pretty much 90% of the way there. 
Yes, basically, I was just curious on what your opinion on the ability to extend UWP to be cross-platform instead of Windows only. Personally, I believe Microsoft should replace Xamarin.Forms with UWP, and make UWP a truly universal UI stack. It would be a lot of work, but if they could make it code once and work on Windows, Mac, Linux, iOS, and Android I have a hard time believing that developers wouldn't migrate to it. 
OpenTK is a pretty good way to go to be able to interact with OpenGL Directly. Look at learnopengl.com for some tutorials on getting started with that. If you don't want to bother with OpenGL, you can use SFML which is built on OpenTK. There is a .net core version of OpenTK available, but it is not from the official openTK team. The official openTK Team is working on the official version of .net core 
Thanks for the information..but I cannot do any development work in my project as I am contractor and automation qa..I don’t have flexibility to contribute in development..that’s the reason I am trying to look for individual small projects where I can contribute learn and get transitioned.not expecting any pay.
Monogame would likely be better.
Happy cake day!
Ive found testing basic create, read, update, deletes on objects to be fragile, that is to say every time you refactor you end up breaking multiple tests. This is because your testing the implementation, instead of testing what the application actually needs to do.. Dont test the methods, test whats needed to be done. e.g. dont test CreateOrder(...) test adding items and creating ordee, submitting an order, reviewing previous orders. TDD is good for this, but it sounds like you have already written the application. InMemory database might work well for a crud heavy application, it means you wont need to interface out all your repositories.
Holy moly, drop the regions dude
LLBLGen author Frans Bouma does some benchmarking across many micro/large ORM's, you can find further articles starting from this: https://weblogs.asp.net/fbouma/net-micro-orm-fetch-benchmark-results-and-the-fine-details FWIW, Dapper(esque)+EF solution is great when you have separate Query/Full Data adapters (meaning you can return specific data with dapper and just use "reasonable" item tracking when modifying/creating object hierarchies). EF Core feels to me to be "fast enough" if you're not being a complete botch job with your views (ie. 1000+ rows per grid including 50+ rows as metadata per each shown row).
OK.
Is this actually parsing JSON with string manipulation?
Well, for starters, SignalR is for C# backend (ASP.NET), while Socket.io is for JavaScript backend (Express). Since this sub is a C# sub, it makes Socket.io off topic.
Dunno, it looks conceptually the same to me.
I made a simple chat in socket.io(just sending messages and receiving them, nothing more) and its code was waaay less than in the article but I dunno, maybe the article made also additional options like authorizing and stuff like that since I have heard SignalR has much more built-in features than Socket.io.
I understand the problem. You're reading an outdated tutorial from a beta version. You should read the tutorial from the official source: https://docs.microsoft.com/en-us/aspnet/core/tutorials/signalr?view=aspnetcore-2.1&amp;tabs=visual-studio
ODATA string parser. 
Saying competitive too much makes me really think this is a game or something...
Something like linq2db gives you closer to the speed of dapper but the strongly types classes and linq syntax of ef core.
I'd like to collaborate with someone to learn git and teamwork. I have a couple of ideas. Don't sure if they are useful though.
WebRequest in 2018 no less
Right. By "OData string", you seem to mean JSON (OData responses can be different formats). Don't do your own JSON parsing unless you absolutely have to.
Normally that would be configured in the firewall or the web server itself, not inside the application (e.g. IIS). So before you do this, talk to you network admins.
You've gotten some good responses and you're right, there are plenty of viable ways to "skin the cat" for any given system or problem. To me, you can argue design principals all day, OOP vs. procedural, etc. but the biggest factor is to just be consistent for any given app. What I mean is if you're coming into something existing and they took a procedural approach, don't start creating objects out the wazoo because you think OOP is better. The same goes for file structure, naming conventions, and hell all the way down to using tabs over spaces. For me personally, I tend to go the procedural route for most things, until I can see a good use case for OOP. I think a lot of people tend to get object happy when it's just not necessary. No, you don't need a god damn object for your contact us form that sends an email with 4 fields. But that's just a personal preference, I can see arguments for and against both. I will say I do love the dependency injection things .net core has going on. They've already proved to be really useful. 
IP restrictions should always be used when possible; its a very helpful layer of protection. That said, IPs can be spoofed so that alone doesn't count as security. You still need a shared secret or other security mechanism. 
So that's what I was trying to figure out, is if someone could spoof an IP to get in, but everything I researched seemed to make me think that isn't possible given the way the http protocol works, am I wrong? I mean, if you send me request x and spoof some other IP, wouldn't the system in turn send that response back to the IP you stated, which if it's a valid one, is one of my servers?
Filtering by IP address this way isn’t useless, but it’s also not very secure. IP spoofing can be easy unless there are other safeguards. Generally, IP spoofing attacks are blind, so if this is a read only endpoint, it might be fine.
You're not wrong, Walter, you're just an asshole.
This suggests I'm wrong, but I still wouldn't trust that as my sole line of defense. Novel attacks are constantly popping up and a shared secret isn't hard to toss in the config file. https://security.stackexchange.com/questions/14505/can-i-trust-the-source-ip-of-an-http-request
Maybe you should stop asking bad questions?
Ahh that makes more sense. If someone were to spoof an IP and post to an endpoint that manipulates data, it might still execute, even if they can't get the response. That's a good point! I'll have to go the token route then. 
dapper can give you strong typing. &amp;#x200B; using (var connection = connFactory.GetConnection()) { connection.Query&lt;Product&gt;("SELECT TOP 100 * FROM Products"); } &amp;#x200B;
Yes. One question is, what type of game? You could build pretty much any game without an engine, but depending on how complex the graphics if it did stuff a game engine could provide you’d be better off reusing something someone else built as opposed to reinventing the wheel. I would use wpf over forms any-day.
True IP spoofing isn't possible with HTTP since it's based on TCP which requires a back and forth handshake. IP spoofing only really works with UDP (UDP-based QUIC also has a defense against spoofing, I believe). However, there are other real world attacks that involve tricking a machine in the allowed range to issue requests on the attacker's behalf (CSRF/SSRF). Stuff like external XML entities, naive preview image generators, etc. are fairly common, so IP address restrictions should never be the *sole* defense.
That SQL is just a loose string though.
My question is just why create a game without an engine? It’s possible yeah, but why?
I would use WPF. Because xaml is basically designed for UI stuff I would create a usercontrol open the code behind and overwrite onrender. Now you can draw to the drawingcontext. If you only use keyboard inputs it's pretty easy if you also need mouse input you would have to write a custom hitbox system. Maybe you could tell us what type of game you are trying to make.
The best reason I can imagine would be: To learn how to write an engine, as that's what you end up with. For the purpose of learning.
You could use SharpDX to spin your own 3D game. SharpDX is just a thin wrapper around DirectX. It depends how complicated you want the game to be. Personally if I were not to use Unity or another major engine, I would probably opt for Monogame. It is a continuation of XNA.
Yeah, that’s a good reason, but the way the question was formulated just gave me a feeling that isn’t the case. Could be wrong of course 
You could use SharpDX to spin your own 3D game. SharpDX is just a thin wrapper around DirectX. It depends how complicated you want the game to be. Personally if I were not to use Unity or another major engine, I would probably opt for Monogame. It is a continuation of XNA.
Yes. The most common example people bring up as a game library is Monogame, but there are numerous 2D libraries devs can use, notable cases being osu! using OpenTK.
Or for fun :D
&gt; I can't, at least for the foreseeable future, see a reason why anything will need to access this api outside of specific servers I'm running my code on. &gt; &gt;That being said, I was thinking of trying to do some simple security by basically saying if you're not coming from a set of IPs, I won't return anything. So, IP security as an *added* layer of validation is fine. As others have said, that's usually done at the router layer or OS firewall, not your app code. But I'll share a couple of rules of software development that I've come to believe in over the last couple decades. 1. Never show management a visual prototype that looks better than the quality of the code behind it. 2. When developing a GUI/WebUI, always leave at least one obvious visual ugliness that is easy to fix, like a bad font choice or a border that is too thick when you think it's ready to be shipped, so that management has something to suggest as a last minute change. 3. Never talk about incomplete features within earshot of anyone from Sales. 4. **There is no such thing as a simple and useful service**. 5. If you ever say "a couple", someone will point out you miscounted. Rule #4 applies here. Specifically, even if you believe your service has no need of security because it is internal and doesn't deal with sensitive data, you need to know who is calling your service. **Any useful service will get used**. The more useful, the more widely used. The simpler it is to use, the more widely used. Your simple service quickly becomes a critical part of the infrastructure. When you decide not to work on it anymore, it is now "legacy". Have you ever tried to shut down a legacy service? Even before it becomes legacy, what do you do if your "internal only" service is suddenly getting loads more QPS than you expected and the requesting IP resolves to a VM hosting a bunch of Docker containers each hosting a bunch of microservices or has been scrubbed from the logs by edict of the privacy team)? **You need to know who is calling your service, and it needs to be real authentication.** I've seen people try to do this with "ClientID" values shoved in a header/query parameter or with a User-Agent. That ends up being worthless, because it can just be copy/pasted by a lazy developer. You should use an authentication scheme that ideally * Can't be used without a secret or certificate. * Requires registering the client with a valid user/group behind the registration. * The client's right to use the service can be disabled by you. That's a lot of work, so the answer is "don't roll your own". If your company is ever going to be doing business in Europe, you should probably bite the bullet and go SSL for internal connections. That comes with some significant maintenance overhead in keeping the certs up to date, however.
I'll be the first to admit I'm a Xamarin homer, but these articles are always such shit. It's the same repackaged high-level stuff that leaves out so much nuance that it's kind of pointless. 
I guess you're right, I had the same feeling. It's just my odd way to answer questions just in case.
you can use opengl or direct 3d apis via some CLI libraries, or an abstraction library that are simpler, like SDL2, SFML, of which there are CLI ports.
I'm not sure how getting mouse aim necessitates a custom hitbox system. Is there something I'm missing that link those two together. 
Use monogame (a frame work, not an engine) most of the advice here is bad. 
&gt;I would use wpf over forms any-day. Isn't there some performance issue with wpf that should be considered here?
Don't be lazy, learn how to use an engine. Unity uses C#. 
You could use GDI. It's built in with C#'s winform. I made a top down shooter a few years ago. Here's a video of me playing alone (it's a multiplayer game): https://youtu.be/qQtW2c1TfA0
I know how to use an engine. I want to make a custom one. So I am not stuck with some company for the rest of my life.
Yes, but using an engine will save you a lot of time.
I don't want to be stuck with some company for the rest of my life. I don't want to pay someone to do code I could do. I would also like to learn how to make a basic engine. It might really help me understand physics and C# more.
For now I am trying to do simple 2D platformers. Once I get good I want to move over to 3D.
Sorry, I should have been a little more descriptive. I am going to start out with some 2D platformer types of games while I get better at C# and physics. I want to eventually move over to 3D but I am good with 2D right now.
I would like to use System.drawing or Winforms/WPF because they are most simple and require the most code. Why would I want that? Because I am not really making games for a deadline right now and I can experiment all I want. If I eventually got good enough at System.Drawing or Winforms I might be able to create 3D games without many frameworks. That is my goal. Because I am one of those annoying "purist" in my free time that like doing everything myself.
Ok, well, based on your question, I'd tell you that you don't have the expertise to do it. So maybe stop worrying so much about vendor lock in and recognize that there are many game engines out there, and once you know how to code against one, you can pick up the others quickly. No one builds their own engine anymore, because it's a complete waste of time that could otherwise be spent building the actual game you want to make. 
I want to learn as much about the internals of C#, 3D graphics, 2D graphics, Physics and more. This would be a great way of learning about all of those. In my opinion If you code enough physics into a game the game itself becomes the engine. I could work and branch off of it's code and have my own engine.
There are a couple of articles over at CodeProject for 2D games in WPF. They might be a good starting point. For lower level access, take a look at [SFML.NET](https://www.sfml-dev.org/download/sfml.net/) or [SDL2#](https://github.com/flibitijibibo/SDL2-CS)
Thank you! I will try all of these. I've got a couple questions though. 1:(I could be a total idiot) but Isn't Vulkan a continuation of OpenGL? If it is where could I learn about it? And 2:Do you have any tips for beginners in this area?
Thank you!
I understand that want. I kind of did the same with a simple window console 3D graphics engine, but never got to the game part. Thus why people tend to say use an exiting engine if you actually want to create a game. I would start with System.Drawing and wrap all your drawing (rendering) in a abstractions (interfaces etc). ideally you do this with all your “services” code anyway following SOLID principles. that way you can swap out your system.drawing renderer with an SDL2 renderer or OpenGL renderer, etc. same with other graphics services like math or mesh stuff (so they can run on the GPU...so faster execution). That is how and why PC games have an option to pick software, direct3d, or OpenGL renderers.
This is true. However I am trying to learn about C#, 3D Graphics, 2D Graphics, Physics and more. This would be a good way of learning about those.
How do you learn somthing without doing it or asking someone?
Yeah it's mostly for the learning part. Thank you!
&gt; Here's what most people got out of Design Patterns: "blah blah blah blah SINGLETON blah blah blah blah". I kid you not. I've seen this so many times that it's become a full-fledged pattern in its own right; patterns need a name, so let's call it the Simpleton Pattern. - Stevey, 2004 - https://sites.google.com/site/steveyegge2/singleton-considered-stupid 
I'll check these out thank you!
I definitely understand you wanting to understand physics better, building your own engine is indeed a great learning experience. But what do you mean by being stuck with a company or paying someone to do what you could write yourself (in regards to this).
Thanks! I'll check these out!
Yeah can you give me a link to the repository? Even if it's a buggy as heck I might learn a thing or two from it.
OpenGL and Vulkan are NOT for beginners... Or even mid-level programmers. It's pretty damn hard. If you want to learn, try SFML or monogame (I'd go with monogame). 
Vulcan is a lower level "version", sort of, of opengl, its essentially the dirextx 12 to dirextx 11 (which is also not like a new version, its a lower level API) the basic gist is that with Vulcan and DX12 the programmer gets more control however they also require more setup and a deeper knowledge of the API to even get started, as a beginner I gave up a week into DX 12 and re wrote my dissertation proposal to use 11. You would use Vulcan if you were a very experienced programmer and you needed to squeeze the most performance out if your game by managing absolutely everything. It's not a silly assumption, you wouldn't really know without someone telling you or looking at the code yourself.
There's still the message in there about using the Init function which was removed.
I just get a little worried about monopolies. Remember about 10-15 years ago when Apple was still a decent company that tried innovating once in awhile? Now they are pretty much just lazy sitting on some buggy OS charging a billion bucks for a 4GB RAM phone.
Here : https://github.com/Charles-Isaac/MultiplayerTopDownShooter If you plan to go multiplayer, don't do it like I did. It's fugly. 
I am aware of this. I am not trying to make the next triple A game I just for now want to make some basic 2D platformers. That me and a few friends can play. I want to eventually move on to 3D yes but that is more because I am fascinated with physics.
Monogame would be my recommendation as a beginner, it's easy to use and the docs are great and the XNA documentation on MSDN is good. Also there are loads of tutorials on common tasks and some good tutorials on YouTube too.
Thanks, I'll check it out.
Alright! Thank you! I'll start with Monogame and work my way to DX, OpenGl or Vulkan.
I thought OpenGl was concidered old and buggy.
Sounds great! Thank you very much!
Thank you!
No. It is the hallmark for graphics APIs still, and every major multi-platform engine uses OpenGL. It is slowly being replaced by Vulkan.
Go-to http://www.monogame.net and click "get started". There is a ton of documentation and a few guides for new devs.
Alright. I might just have some bad experiences with engines that use OpenGL. Source Engine has OpenGL support and it runs like Crisis on high settings.
If you're running source games on Windows then you are almost certainly running in DirectX, not OpenGL. Additionally, Source is CPU-bottlenecked, whereas cryengine is GPU-bottlenecked, meaning if your CPU is on the lower end, you'll probably face more issues than having a lower end graphics card.
A lot of the most acclaimed studios all use their own in-house engines, but you’re right that building your own as an independent dev is a waste of time unless your goal is to be able to build engines specifically.
No. I use Windows but I remember trying to get Source mods running on Mac used OpenGL and was ultra buggy. Also try playing TF2 on Mac.
That's not the fault of OpenGL there either. macOS doesn't have official support for the latest versions of OpenGL because Apple wants people to use their own graphics API called Metal. So the version that they do support is pretty unstable and there aren't any major updates to it for macOS.
I'll change it, I though i had
the best way is to download from http://www.monogame.net/. Run the installer and then start a new monogame project. You will have choices base don OS and tech(opengl/directx). here is basic documentation http://www.monogame.net/documentation/?page=main I can help with any questions.
i do have a question is yours always showing up that it is cheaper in canada no matter what? &amp;#x200B;
Ah, well have fun. I built an engine using the old 'Managed DirectX' libraries at a previous job. You'll learn a lot and have fun doing it
monogame is probably the best way. its more framework, less engine. &amp;#x200B;
I don't like your approach for a number of reasons which I won't go into. Place all your servers in a private vnet. Only expose the web server's ports.
Thanks.
wut lol
Thank you! I appreciate the help.
Use an open source engine? Something like SlimDX for 3d graphics for example. It also depends if you want to use a full blown engine, or just a collection of game libraries. Ogre would be an example of a full open source engine. 
I read some of your comments. Just start working on it and you will learn what you want to learn. 
Imo, you might be better off just jumping into unity. When I started in school I wanted to program without using an IDE (worst idea ever...), all because I thought it would help me understand better. Unity has some good tutorials (that's what my school has us use). So if you follow those you should learn C# pretty easily. The engine helps explain and keep everything organized.
Is this r/programmingcirclejerk?
What is circle jerk?
This isn’t a good reason to not use an engine. Games are projects and your next game can always be released in another engine if you want to switch it up. There have been thousands of developer hours poured into these engines to do one thing really well. Unless this is just for your personal development and you think you’d enjoy making an engine that lacks many of the features that others come with out of the box, I would recommend picking up an engine. Another way to think about it: is your goal to learn C# or make a game? I’d force yourself to pick one and let that guide your way.
I know how to use Unity. I am worried about monopolies and I would like to learn more about C# and Physics.
You should set aside your worries and just cut your teeth on the framework that will hold your hand a bit so you can accelerate your learning a bit. You'll learn faster if you can focus on one aspect of game development at a time. Frameworks like Unity help you with that. And all of the knowledge you pick up as you grow is transferable to the next framework. 
Are you really asking 'how to use a game engine without writing your own' ? Here is another question -- are you interested in creating 5% of a buggy game engine, or do you want to create a game people are interested in playing?
The deal here is that you're not being a "purist" by using those tools to do the job you want to do. They aren't the right tools. You should let this hangup of yours go. It's holding you back already.
You're already stuck with Microsoft for the rest of your life. No serious company builds all their libraries from scratch. That makes no economic sense whatsoever. The whole point of using libraries is that you can leverage the time and effort of hundreds of way smarter people, and focus your energy in what remains : game mechanics, what makes a game fun, etc. You can build a library but then you're not building a game. Building a game is already incredibly hard. Why would you make it even harder? Just learning to use a library can require hundreds of hours. Building a library can take several years for hundreds of very talented developers. It requires advanced math. Certainly you can build a 'play' library from scratch. But even then, learning some game libraries will help you understand everything a game requires. You can also look at the code to understand things. Just by your question it shows that you know very little about game engines, libraries, and C#. WPF came out 12 years ago and is the replacement for Winforms. Don't use Winforms. Your first few games will be throwaway anyway. The gaming industry is extremely competitive. Hundreds of games are created and released every DAY. By yourself, with no engine knowledge and no additional libraries, the best you can hope to create is a crappy Tetris or Snake. You will learn a TON. But noone will play your game. And it's ok! 
How can you think you're ready to create a custom game engine if you haven't used any? You're far too early in this process for that to be the next step. That's what everyone's trying to explain to you. You need to crawl before you can walk. Take the time to learn using some engines for a few years. Get a handful of projects under your belt. Circle back around to engine development once you find a problem that no one else is solving that requires it. Otherwise, you're ignoring one of the most important adages in software: Don't Repeat Yourself.
Just watch some tutorials or something. Its fun to learn on your own but there are ways to learn so much faster. The most important thing is to have fun though. If you get a game built id love to try it
For Peet’s sake I have created several games on Source, Unity and Unreal engine.
I have used several engines. Before learning how stuff is made and more about physics won’t hold me down.
..but why?.. Some game engines are free.
Neat I’ll check it out.
Thank you! I’ll let you know when it’s playable!
In theory, but I strongly doubt it in practice. If I’m experiencing a slowdown with a desktop app, chances are it’s my code and not the platform I’ve chosen to develop in.
UWP goes further than being just a UI framework. It's also the basis for new set of libraries that function in .NET Core 1.0, 2.0 and soon to be 3.0. It allows a number of improvements on the server side also. Performance and memory consumption is also lower. Things will blur a bit in .NET Core 3.0. UWP is the framework that is used for the Windows Store apps, but also development on to XBOX (although the hardware limitations on the GPU). UWP isn't for making games, but it's framework is there to enable game development on some platform targets. Of note, having my game work both on UWP and WPF, the different in memory and cpu consumption is enormous. I have seen a 50% drop in memory usage (if I can get my game to run again in UWP I will post the compartive memory consumption). Having had experience with it, it has it's cons. &amp;#x200B; &amp;#x200B; &amp;#x200B;
Just curious if you got the program working? Hope all went well and good luck to you. 
Learning experience.
I see a lot of people mentioning MonoGame, I feel it's not completely shameless.. But, come checkout /r/monogame. It's exactly what you're looking for OP, really friendly community. We also have a Discord which you can find there!
&gt; UWP goes further than being just a UI framework. UWP is largely a UI framework. &gt; It's also the basis for new set of libraries that function in .NET Core 1.0, 2.0 and soon to be 3.0. UWP is a closed source .NET Core compatible implementation. It is not a basis for anything. &gt; on the server side also UWP is meant for client side apps, and not server side apps. &gt; Performance and memory consumption is also lower. That is because all UWP apps are compiled ahead-of-time to native machine code. Nothing stops normal desktop apps from being AOT compiled. &gt; Things will blur a bit in .NET Core 3.0. Again, not sure what you're talking about. &gt; UWP isn't for making games, but it's framework is there to enable game development on some platform targets. UWP, like Android defines an application model that all game/app developers must follow. UWP is not for making games, when you target UWP for your game, you are simply running a DirectX app inside a sandbox, like you would do on iOS and Android. &gt; Of note, having my game work both on UWP and WPF 
I'll check it out! Thank you!
If it's on Github, why are you asking instead who's interested rather than just posting your repo?
&gt; UWP is largely a UI framework. Not disputing that. But it has a lot of integration into the windows environment that removes boiler plate code around account mechanisms / cross platform integration. &gt; Nothing stops normal desktop apps from being AOT compiled. Actually, there is more to it than that, because the .NET Core libaries are also lighter. AOT compiling for WPF I believe is coming with .net Core 3.0? Hence the blurring of benefits of .NET Core 3.0 + UWP vs WPF. &gt; UWP is meant for client side apps, and not server side apps. I will clarify, I should of said .NET core here. &gt; UWP, like Android defines an application model that all game/app developers must follow. UWP is not for making games, when you target UWP for your game, you are simply running a DirectX app inside a sandbox, like you would do on iOS and Android. Unsure how there is a dispute here? &amp;#x200B;
I did! Thank you for checking.
This is like, so wrong. You're living in a fantasy. A C# developer will never be seriously considered for a C++ position. C# is way closer to Java than C++.
&gt; But it has a lot of integration into the windows environment that removes boiler plate code around account mechanisms / cross platform integration. For apps like Spotify, yes. But I'm not sure how that helps game developers more than existing solutions. &gt; because the .NET Core libaries are also lighter. 
 &gt;.NET Core 3.0 will include tools to make compiling .NET Core 3.0 apps easier, by introducing a user friendly way to package existing tools (ReadyToRun, IL Linker, etc.) into a single solution. &gt; &gt;Most game engines already have some form of AOT compilation. The static linking of libraries may have some performance improvement, but probably not much. I was under the impression that it compiles to an intermediate cross platform which could be further enhanced if the app could be compiled to .NET Native. Although that has some limitations around compatibility. &amp;#x200B; &amp;#x200B;
If WPF becomes a bottleneck, it's time to drop down to OpenGL or DirectX with Interop, or adopt a library or engine that does it for you.
Yeah wpf won't be slow under most circumstances unless you're doing silly things on the UI thread 
In fairness, I'd bet the majority of repos get zero attention
And repos which are shared with people get more attention than those which are not.
&gt;.NET Core apps don't need UWP to run. You can make a game in .NET Core without touching UWP. I would be keen to understand how i would do that. 
How do you think .NET Core works on Linux and macOS... 
I'd like to put my vote in for [Ultraviolet](https://github.com/tlgkccampbell/ultraviolet/blob/develop/README.md)
small games = unity with C# real games = C++ with Directx or Opengl Vulkan etc C# isn't made for games
Well I am going to start out doing basic 2D platformers before anything else. I already have some C# experience.
I have made several games with Unity and mods with Source.
If you create a simple platformer for example and the hero has some special power to pick up distant objects (with the mouse) you need to keep track of objects in a way that you can work backwards after a click on the control about what element (if any) was clicked. If you however would use xaml to create a platformer you could use the xaml hit-test system to detect what element was clicked.
For 2d plattformers the custom usercontrol approach is fine, but 3d is hard you should definitely use an already existing framework/engine for 3d stuff.
There are some interesting games built using WPF on CodeProject you can have a look at to learn.
&gt; less cognitive load To me it's **more** cognitive load, because now I also have to worry about the SQL generation - and that is absolutely not obvious. It's easy to fuck up and cause massive performance issues (just take the recent StackExchange outage as an example).
F# Type Providers are IMO the best option. You can write raw SQL that gets validated at compile-time and it will automatically generate you classes for the results and access methods with the appropiate parameters.
Ugh, what? That doesn't make any single sense.
Alright. Thanks.
What the heck dude? That doesn't make any sense. I'm a beginner at C# but I definitely know that its syntax and C++'s are just so different, not to mention that it isn't even a "very" OOP language like C#
Programming without an IDE is not a bad idea at all
From a C# perspective, yes, because of the auto boxing and the sort of fake implementation value types have of `System.Object`. From a IL/CLR perspective, they are more different. 
I'm supprise no one has mentioned this yet, but Win2d is pretty good. It's a c# wrapper for direct2d by Microsoft. 
If the stack trace is shown people can work out how your application works. They can use this information to try and find weaknesses, for example, if they know you are using a certain library that has known exploits. 
I'd like a peak
Get some good books, read them, and put them into practice. You need one on Game Engine Design and a one on a suitable graphics API to start off with. &amp;#x200B; Read code on github; see how others have done it. Start with a triangle and go from there.
Yes, there are quite some tutorials, probably not. To make a game in C# you don't need more then some way of displaying graphics, an update and draw loop, and then bob's your uncle. A lot of tutorials exist for this, and also libraries. I've used Monogame in the past, but you can also write it out yourself if you want to know how an engine works internally.
I would add: \- Learn how to use dictionaries
"Let's just post bunch of tool names with description and call it a great blog article". 
It's a really bad idea. The amount of productivity and aid you get from visual studio is insane. Apart from learning to run the compiler from the command line you will learn nothing more from not using it. And you will almost certainly never do that, it's pointless.
C# is like C++ in pretty much syntax only. There are completely different. What you said is so far off the mark.
“Learning to run the compiler from the command line”, if you dont know how to do this in the first place, you should really not use an IDE. A lot of people using visual studio are basically running it as an editor, and not using any of the more advanced features. Saying you cant get aid in an editor makes me think you are quite inexperienced, and i flat out stupid. Sometimes taking the overhead of running an insanely large debugger and 50029291817 other tools is slowing you down a bit. I would also reccomend learning tools like git, gdb, compilers, and basically the gnu toolchain. It IS the industry standard when you get out of @home development and only being able to use git in visual studio is not something to rely on. Ever written in a domain specific language? You REALLY dont want to do that in visual studio either. VS is good if you are new, as it creates an abstraction, or if you know its tools in and out. It is not something you want to stay in forever though, learning other tools is a great idea. Im not saying VS is useless, it is definetly not, but saying using an editor is bad, is just ignorant and shows lack of experience
Finally!! Some direction ! Thank you .. ! That’s literally what I need! I’ll gladly start there ! 
Spoken like a true college student without any professional experience!
I work with python and C# proffessionally 
Firstly, this is the very first result on Google: https://www.learncs.org/ I haven't done this, I learned from books and just trying to make something I wanted, however it looks pretty decent and you can do everything entirely in the browser in the beginning. It would be a good way to pick up the basics. Secondly, do you have an idea of what you want to end up making? I found learning to be way easier when the learning is centred around the sort of applications I wanted to end up making. For instance I found Head First C# to be dull as dishwater because the learning tasks and examples were centred around a fictional paper company. I have no interest in programming data entry for a database, so I didn't go past the first few chapters. However, if for instance you are interested in making games, there are several well-known tutorials where the examples are centred around making a game. RB Whitaker's book the C# Player's Guide was amazing for me and was the first programming book I ever read from start to finish. He has a website which takes you through a C# crash course: http://rbwhitaker.wikidot.com/c-sharp-tutorials This would be a good starting point.
Wat. Just because you can do some stuff outside VS, why would you? For small projects I would use VS Code too, but professionally, I don't see how you can manage 100k+ LoC without a robust IDE. Out of the box I've got: - Live UI editing and the visual tree - Conditional breakpoints, intermediate modifications, step back during debugging - diagnostic tools to catch leaks - ReSharper support Rider comes up-and-running, and hopefully will boost VS too. Stability is still an issue, codelens is a huge performance hog, and git integration is hugely lacking.
I would put the ip filtering into a middleware instead of a method, so you are sure that is always executed no matter what.
[https://mva.microsoft.com/en-us/training-courses/c-fundamentals-for-absolute-beginners-16169](https://mva.microsoft.com/en-us/training-courses/c-fundamentals-for-absolute-beginners-16169) this is how I started, hands down best teacher out there 
Any future projects or growth means higher licencing costs.
.NET Standard is not an additional "package". .NET Framework 4.X *implements* a specific version of .NET Standard, so does .NET Core 1.X and 2.X. See [.NET Standard Implementation](https://docs.microsoft.com/en-us/dotnet/standard/net-standard#net-implementation-support) for information on which versions of which framework implement the various versions of .NET Standard. I also suggest this video for some help understanding .NET Standard: https://www.youtube.com/watch?v=YI4MurjfMn8 As far as I know, there is no .NET Standard 2.0.**3**. The latest version of .NET Standard is 2.0.
I would strongly advise you to use a security token/certificate of some sort and use ip filtering as an added security bonus because this is how you would create a security hole.
Good luck, it is fun solving problems with code. Stick at it.
I do understand how it works. I just don't get how it is installed and why isn't there an option inside VS installer to install either net standard or net core. There is a 2.0.3 and it was released in May https://github.com/dotnet/standard/releases
Yes, and as said i use VS too for that, but this was not what was said. The comment i answered said using an editor is the worst idea ever when learning your toolchain, and i really disagree, sometimes learning it all from an out of the box solution with a lot of abstractions, leads to misunderstandings. I have never tried live UI editing with unity + VS, and i have never heard that was possible(i dont do unity anymore sadly) but unity provide most of theese tools temselves
Jesse dietrichson on Youtube, great teacher!
Think of .net standard as being an interface and .net (normal) , .net core and the other flavours as being implementations.
By looking at the username, I guess the repo is https://github.com/haven1433/gen3hex
c++ isn't for coding. Real developers use assembly.
Have you read this? https://docs.microsoft.com/en-us/dotnet/standard/net-standard That page explains what .NET Standard is, and it also explains what NetStandard.Library is. These are 2 different things.
I'm sorry, it didn't seem like you understood the concept of .NET Standard. If you mean that you are trying to read code targeting the NetStandard.Library 2.0.3 and you are experiencing "red lines" in VS, have you tried restoring the NuGet-packages for the solution? That would make sure the NetStandard.Library metapackage is downloaded.
&gt; probably IronRuby. That's dead I checked your repository and have a few suggestions: * Use Allman style braces, the C# community ended that debate long ago. * Consider using the following [folder structure](https://github.com/dotnet/docs/blob/master/docs/core/porting/project-structure.md ): * src/ * tests/ * samples/ * Consider using [plural folder names](https://blog.rsuter.com/recommendations-best-practices-implementing-mvvm-xaml-net-applications/) * Models/ * ViewModels/ * Views/ * Make your code [.NET Core 3.0](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/) ready by abstracting as much of non-UI code as possible into a .NET Standard 2.0 library with a .NET Core xUnit test runner. * Add README.md with some text and screenshots to make your project a bit more friendly 
When you open the code, make sure that you add a reference to the .NET framework (or any other framework that implements the .NET standard, such as .NET Core). Your using imports should work then.
.Net core 
If I am not mistaken, isn't uwp framework agnostic? You could write a wpf/winforms application and make it uwp by putting in the hooks.
If you are going Windows 10 everywhere, I would say UWP, but first check if you have all controls available that you might require. Either on the [Windows UI Library](https://docs.microsoft.com/en-us/uwp/toolkits/winui/getting-started) or the third party UI component vendors. If other versions of Windows might be required, then WPF.
Not sure about this but Will research more. What I know is UWP is only supported by windows 10, or Xbox one or hololens (if it indeed becomes cheap enough to be used at normal environment)
UWP is 3 things: * An UI framework using WinRT APIs * An application model that defines the capabilities of an application in a manifest * A closed source .NET Core runtime built using WinRT APIs. WPF/WinForms in a UWP container is like running 16 bit apps on 32 bit Windows. 
UWP has very slow adoption rate for LOB applications and I'd say that WPF/WinForms are far more mature and popular. But Microsoft is definitely paying attention and is starting to add features in the latest Windows 10 build that cater to LOB apps. See [this](https://github.com/Microsoft/InventorySample ) LOB app example. It shows you some good practices for LOB apps while still using a modern UI framework. 
You're treating the same, so can you have them derive from the same class or implement the same interface and use that instead?
go texted base and use the cli
.NET Core 3 will support desktop frameworks including WPF. It is my choice for enterprise desktop development. UWP doesn't easily support the information density requirements of an enterprise application; nor does it have the API surface area often needed due to it running in a sandbox.
&gt; .net core UWP =/= .NET Core. Please don't use them interchangeably. .NET Core as a .NET runtime is on its way to [replace .NET Framework with .NET Core 3.0](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/) as the "main" .NET runtime. .NET Core itself is very stable and is [used by production servers worldwide](https://blogs.msdn.microsoft.com/dotnet/2018/08/20/bing-com-runs-on-net-core-2-1/). It's also going to make existing WPF and WinForms apps twice as fast. UWP also has shipped to billions of Windows devices and it powers Microsoft Edge, Groove Music and other system apps like Calculator. 
Removed: Rule 4.
[removed]
Use MVVM with a framework like ReactiveUI. That's way you only need to change your views to the specific platform (WPF, UWP, Xamarin Forms, etc). 
LMGTFY: [https://stackoverflow.com/questions/1991345/origin-of-the-c-sharp-language-name](https://stackoverflow.com/questions/1991345/origin-of-the-c-sharp-language-name)
Your mileage may always vary. It's always depending on the amount of data your work, and the resulting performance issues are also always relevant. If it takes 2 seconds instead of 100ms it might be completely fine in your environment. But loading 10 million rows instead of 5 rows, for every request, because filtering happens on the client-side does have an impact.
Your post looks like spam because you ask the same question thrice.. 
I am just express my question. I have not any discription. so i do this.
I got it. Your learn more from you.
Yes. This is helpful site to me
I faced a similar dilemma about a year ago. My solution was to build the core of the app as UI agnostic as possible, and just put a UI layer on top. This meant I could easily switch from WPF to UWP when I felt it was appropriate. I would say, if you feel like you can create it in UWP you should go with UWP as it future proofs your app better. If you don't feel like you can create your app in UWP yet, go WPF but design the app in a way that you can easily hook it into a UWP UI in the future.
I've considered webstack before. The only thing preventing me from considering it further is the performance. Desktop apps like WPF or UWP UI reacts very quickly compared to webstack. The environment the software is being used is very repetitive based for example manual data entry of hundreds of thousands of items and needs to be very responsive.
Should've been C octothorpe :\
Definitely. I'm getting a mixed direction from Microsoft as office and visual studio is still WPF based. True that edge, groove, even OneNote is UWP based. If not because of these choices of MS, I would already picked WPF in a heartbeat.
Even in cases where a non-specific collection is unavoidable, I'd always use generic collections with an `object` type parameter instead of the old pre-generic ones. Among other reasons, the old collections sometimes have different behavior, for example `Hashtable` doesn't throw an exception for nonexisting keys. Also, you'd still get partial type safety if `Key` is a static type. Two options to avoid your problem that I can think of: A: Change the definition of `ISomeBehaviorImplementor.Behave` to `void Behave&lt;TValue&gt;(IDictionary&lt;Key, TValue&gt; dictionary) where TValue : Parent` B: Create your own covariant dictionary interface. `IReadOnlyDictionary&lt;K, V&gt;` unfortunately isn't covariant, but I think it could easily be done with a trivial subclass of `Dictionary&lt;K, V&gt;`.
Agreed, but what I said was in response to /u/AngularBeginner when he said: &gt; Or a boxed value type. ... which, given the context of what /u/EmptyPoet said, implies that an *regular* value type (read: unboxed) isn't an object, which isn't true from the C# perspective (which I believe is what we are talking about here in /r/csharp).
My point with Net Core not being stable enough come from my recent experience in developing ASP NET Core web services. For example, entity framework still has unimplemented features and others are still quite buggy. That was with core 2.1 I also don't really like the forced DI implementation in core, which can be quite complex to replace with another DI of your own choice. Many of my favorite nuget libs cannot be used with core or are buggy as hell. I realise this is not because of the framework, but that's another thing to consider when it come to reusability. I call it unstable because it changes so fast, that means that the platform is not quite at the same place as .NET classic. Maybe unstable is not the right word
Office is probably on the same boat with VS, it needs to be very powerful and flexible, and making it UWP will probably broke all the support for add ons. Wouldn't be surprised if it will take at least another 1 or 2 generations of office before making it fully UWP. Adobe XD is definitely an interesting development. Our software does not need to be really flexible and powerful. It just needs to be able to do certain process on repetitive basis quickly and in stable manner. Take a POS software or an accounting software.
My comment has a link to UWP PoS API samples a LOB sample. I think UWP, as of latest Win10 build can handle it fine. The learning curve is painful compared to WPF, though. 
Just as an FYI, the immensely popular game [Stardew Valley](https://stardewvalley.net) was written in C# with Monogame, largely by a single dude. He also used [Paint.NET](https://www.getpaint.net) to create the art for the game and [Finale Notepad](https://www.finalemusic.com/products/notepad/) to create the music and sound effects, both of which are free to use for commercial products. The same is true for Monogame.
Thanks. Will definitely check it out. Learning curve isn't a problem if we can get ahead of time. If we can build something that works for the next 20 years or so without a rewrite it would be great. We are not in a hurry and can have both software work in tandem while migrating each module to the new platform. FYI the current software was built on 1996 and is currently adding features still. 
See pound. 
You divide 2 integers which are whole numbers. If you want fractional numbers use float or double variables.
try not declaring result as int, but as double.
it is rounding the result as you are dividing 2 integers. Try changing int to double and see what happens
OP, what they're saying is define `double result = first / second;`
Wont work since the division will still be performed as integer division youd need to cast one operand to double
Just as a tip, you can create formatted code text directly in a reddit post in two ways: * Inline, using the character " \` ". So the text \`Foobar\` results in this: `FooBar` * As code blocks, using **four** spaces in front of every line of the code. So, if I posted ' Console.WriteLine("Hello, World!");', the result would be: Console.WriteLine("Hello, World!"); The above makes it far easier for us to be able to parse your code.
Use what's necessary to solve the problem. It's not a beauty contest. Nothing is future proof. That's why you're rewriting it. 
giving full solution is not helping to learn much... debuging step by step is the way to perfection :)
These are methods specific for unity. I would recommend you look into r/Unity3D , but, to answer your question right now: - The "Start ()" method is called when the object is instantiated - The "Update()" method is called once per frame - "MonoBehavior" is the base of every unity script. It contains all the method like "Start()" and "Update()" and it is what allows you to attach scripts to objects
well, if you apply some creativity to my first answer and just replace int with double... but that would be a full solution :|
Thank you! :D
I would say UWP, but with the degree of fumbling incompetence around UI that Microsoft has shown over the last decade or so, who really knows. Funny you should say Delphi though. Unpopular or not, high level tools like Delphi and Visual Basic were excellent tools for many LOB apps. There doesn’t really seem to be a modern day equivalent - b that I mean a tool that prioritizes simplicity of development and maintenance over linguistic purity and architectural correctness. Or is there?
Removed: Rule 4.
Wow that was quick 
Yeah, first time for everything for this mod.
Thank you and sorry for breaking the rules i'm in a rush \^\_\^
WPF + MVVM Light project template, and see for yourself how well structured, clear and concise a WPF aff can be.
absolutely no reason to add a multiplier to it, it's way clearer to show what you're attempting to do when you use an explicit cast: if (secondNumber != 0f) { // ensure floating point division instead of integer division double result = (double)firstNumber / (double)secondNumber) } &amp;#x200B; Note that you don't technically need both cast to doubles, either one is sufficient
One thing I highly recommend is getting rid of all the excessive regions you have. I used to use them a lot but found they eventually just are noise. Using them sparingly is the way to go.
UWP is still a long way from being ready for line of business applications. Microsoft is ever so slowly working on it, but if you are starting a new project today I strongly recommend you use WinForms or WPF.
&gt; Or is there? It's called WinForms and its still very popular for internal applications.
AngelSix (https://www.youtube.com/channel/UCJ3AxeCHGPZkMi3kRfCuiHw) is my favourite C# channel on YouTube. Covers lots of aspects from basic code to WPF and ASP.
[https://www.youtube.com/user/1kingja](https://www.youtube.com/user/1kingja) Check out this guys videos on C#. Lots of useful info + his videos are amusing to watch!
&gt;delphi, which is quite unpopular what do you mean by this? i am just trying to understand what problems you are trying to solve. we have a whole bunch of in-house and client-facing applications written in D5 that are still being maintained and developed, and not a single person in these almost 20 years has made peep about them being in Delphi.
That's exactly the inverse of what he asked.
I’ll check it out thanks.
Thank you for that advice. It is very much appreciated.
OMG that’s so cool!
That works too, but I'd only cast the divisor.
True. It was popular back then, which is why our software is still in active development using Delphi. But new LOB apps started fresh within past few years wouldn't use Delphi. There are some limitations of the older UI, especially with high DPI screens nowadays. Some of our users are old people (like 65+) and they would rather use 1366x768 on 1080p screens just to make the screen bigger (though blurrier)
What advantages does UWP have over WPF? I know Microsoft is developing UWP but I was under the impression that this just meant they were adding features to UWP that WPF already has. My understanding is that UWP only real purpose is developing cross-platform apps for Windows Store and Windows Phone. But nobody uses those things anymore. Ive heard UWP is basically the next Silverlight. 
Not sure, at the time we had a lot of older Win7 and Win8 hardware out there, so being able to run on that was important. But WPF has some serious performance issues on light weight hardware, and UWP is supposed to solve those issues. All of the logic (ViewControllers, etc) is in a library while the actual WPF application only contains Views, Data Templates, and the startup code, so replacing the front end should be manageable.
Ha. Forgot about that.
&gt; I was gonna stay overnight at my friends place, he said "You're gonna have to sleep on the floor.".... Damn gravity. You got me again. You know how badly I want to sleep on the wall. – Mitch Hedberg [Source: Mitch All Together](http://skulkersbole.tumblr.com)
Dividing integers is surprisingly tough. Most people will tell you to cast or multiply by 1.0, but that's hard to remember. Here's what I usually do. int a=1; int b=2; float a2=a; float b2=b; Console.WriteLine(a2/b2);
Unity uses C# as its scripting language though, so if you want to learn more about it, it's a good place to look, especially if as you say you "know how to use Unity". AFAIK they license mono from the Xamarin team.
Interesting take on the structure. How did you solve the performance problem on the lightweight hardware? Same here, although all of our hardware is on Windows 10, most of them (especially the POS) are weak atom based. They are good for power consumption as only peak at 10w and idling at 1-2w. They run 16hrs a day so should count something on power saving.
I've had to onboard a few new developers to my team in the last couple of years and whipped up a pile of software development resources worth looking into on a github repo: [https://github.com/AdamHess/TrainingMaterials](https://github.com/AdamHess/TrainingMaterials) &amp;#x200B; There should be everything you need there to get started. Some resources rely on pluralsight and others on safari books online. Both are great resources and worth purchasing if you decide to become a professional developer. There are a few free resources and number of youtube videos. I'd recommend looking at [Derek Banas](https://www.youtube.com/user/derekbanas) and [Programming with Mosh](https://www.youtube.com/user/programmingwithmosh) if you want specific content authors.
Is it though? Scripting in Unity is done in C#.
If you create a class with the label and sys\_id as properties and bind the combobox itemssource to the collection, the selecteditem to a property in your viewmodel and set the displaymember to your property containing the label you will display the label in the combobox and you will have a class with both items in your viewmodel. I think this website does a good job explaining it all: [https://www.c-sharpcorner.com/article/explain-combo-box-binding-in-mvvm-wpf/](https://www.c-sharpcorner.com/article/explain-combo-box-binding-in-mvvm-wpf/)
Been a professional C# dev for almost 10 years just FYI. Visual Studio is industry standard for C#. You miss out on a huge amount of features by not using it. I get the feeling that you may actually be quite inexperienced yourself. 
My understanding is UWP is much lighter in resource use. It is also better in handling high DPI situation. Also, IF WPF will end up being shelved by MS, we don't have to rewrite the software again. IF UWP is the one who's more likely being shelved, the probably WPF is the pick.
Don't add the multiplier just cast one of them. That looks pretty odd at first glance and doesn't make it clear what it is doing.
Don't have to in the next 36 months. Right now we are going to start the development within 2-3 months and possibly looking at 100% porting over at more than 36 months. Future proof is more important as we are more likely to get stuck with the platform for the next 20-30 years before new major platform change (such as this win32 to UWP)
The variable is being truncated, which means all the decimal points are removed. This is different from rounding, as such using integer conversion to round numbers is undesirable.
I actually started writing everything as library code years ago. So the vast majority of our applications (WinForms, WPF, and Windows Services) are library based, with thin wrappers around them for the final exe. In WinForms this allowed us to build out huge .NET based functionality while slowly rebuilding our VB6 UI over about a decade (replacing the VB6 code one bit at a time until it was gone). In Services this allows me to wrap the functionality in a service for production, or in a small forms app for debuging / testing. As for performance, we basically had to abandon ATOM based hardware completely with WPF. I'd heavily test both UWP and WPF if you want to run on ATOM based hardware.
It's amazing how people can come up with thousands of different valid solution in programming. I've tested simple UWP POS app before and it is within reasonable speed, though the office clients will have to use core based CPU. On a side note, our current software built using Delphi shows neglible difference in UI responsiveness on both atom and core based (equally fast). If it weren't for high DPI and responsive UI, we would stick with delphi (some older hardware runs on Pentium 3 and still runs fast).
Completely understand, I wish I could tell you that UWP is as solid a gamble as Win32 but I am just not sure yet. I am seeing more apps but honestly I don't think even MS is buying into the UWP ecosystem fully until I see office delivered and run as a native UWP application. For the kind of longevity you are looking for I would make this lean toward being a very strong headless application where the UI is a thin layer atop. You can even make into commodities some user interaction logic with careful planning. Ensure your code is written so that the meat of it can live 50 years and is not reliant on what the latest in UI is. If you are looking for arch tips to pull that off, pm me. 
Ding ding ding ding. Thanks!
I second this one, these videos are great. 
[Switch case?](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/switch)
Not knowing the specifics... I would make a function for each ’if’ or ’else’ and make a dictionary having cases as keys and the corresponding functions as values. (It might be called a ’jump table’? or not) 
Technically it isn't a jump table, but it does the same thing and I can't think of a better name for it.
To be clear: I didn't think the lack of not having a PQ is an issue for real code because there are probably some good 3rd party packages available anyways. My question was specific to coding challenges. I naturally just switch to Java but I'll look into `SortedSet&lt;&gt;`, `SortedList&lt;&gt;`, etc. I'd prefer to stick to one language instead of making the cognitive switch for the few occasions it's more advantageous for code challenges.
Add comments / documentation and a decent README. It's quite ironic that the tests have comments but the actual code doesn't.
Well considering that Microsoft has begun writing its own applications in Electron, I feel like neither WPF or UWP are the future. But WPF has the advantage of being basically like complete, like WinForms which is still used a lot even though its been "shelved" for over a decade.
You should write your software so that any layer can be switched out. Including the view layer. They shouldn't be dependent on each other at all. This way it won't be such a problem down the road if you make the wrong choice.
ouch -17 just to try to get clarification? these mofo's don't play.
If your main focus is on learning c#, then these tools will help. Once you have used them to learn the language, then you can move away and create your own engine or use other methods. Use them until it suites your needs then move on. Use corporations the same way they use us... 
Huge difference between not using an IDE after you're a learned programmer, and when you're first learning programming. The IDE is great for understanding how everything comes together.
See I find WPF to be like WinForms 2.0. You can basically ignore the XAML and MVVM and create a WinForm like application or you can embrace XAML and make it better than WinForms. MVVM is great if you plan on including unit testing but otherwise not really needed. In fact, I've done applications that are a mix of MVVM and code behind. I use MVVM for the observable objects and code behind for everything else.
so, how's your first day going?
That is very actually interesting. You're probably right on using the tools. Thank you!
Yeah. Pretty harsh..
In which way are you thinking?
You are arguing against using vs for C#. No tool even comes close. And that is just plain bad advice. Saying it's just for beginners is also totally wrong. If we weren't talking about C# the use of editors would be much more appropriate. If you are using the features of vs correctly it outperforms any editor by a long way. And I do believe using an editor to learn would affect your productivity a lot. I never said they were stupid in general but you gain literally nothing by using them instead of vs or vs code.
I would say vs code is primarily an editor, especially compared to vs. And when learning C#, im not sure which tools would not just confuse you. I guess it depends on whether or not you are learning C# as your first time programming, or if you already have experience. I honestly think it is going to be overwhelming for a lot of beginners, and thats why i would say, start out with your basic hello world programs in a simple editor. If you are getting started, just the oo pradigm itself seems dauting, so stuff like vs reccomending autoimplementation of disposable patterns or constructors is just an unneccesary layer of confusion imo
check out [Microsoft Virtual Academy](https://mva.microsoft.com/), its free and there are tons of courses. [C# Fundamentals for beginners](https://mva.microsoft.com/en-US/training-courses/c-fundamentals-for-absolute-beginners-16169?l=Lvld4EQIC_2706218949) [Programming in C# Jumpstart](https://mva.microsoft.com/en-US/training-courses/programming-in-c-jump-start-14254?l=j0iuozSfB_6900115888)
Neither Electron is the future, I really feel like Electron hype and use will end in a very short time, it's just so unstable and so immature and so buggy that its future is pretty short. It's just a cheap and failed way to make Javascript frontend developers real desktop developers, one alternative and this will end. 
Tim Corey deserves to be mentioned here. I really enjoy listening to him explain stuff.
It's more just a function lookup table I would say.
You got answers from other people, I will nitpick on your coding style 🙂 * Do not declare two or more variables on same line. Each variable should go on its own line: int firstNumber = 6; int secondNumber = 5; int result = firstNumber / secondNumber; * Newer versions of C# support inline string expansion, which is much nicer than positional parameters: Console.WriteLine("{firstNumber} / {secondNumber} = {result}"); 
I don't think that's true. A company I work for has been build enterprise UWP applications for government and other public sector agencies for a year or so now.
UWP is Microsoft's future for Windows app development. If there is something you majorly can't accomplish with UWP today, then you need to get in touch. We build enterprise UWP apps for public sector agencies for about 2 years now and they've been more than happy with the results. I'd recommend building with Xamarin in mind though. Cross platform with the option for a mobile device is appealing to the enterprise space. 
Here you go. Ints are whole numbers. Floats and doubles are floating point numbers. int firstNumber = 6; int secondNumber =5; float result; result = (float)(firstNumber / secondNumber); Console.WriteLine($"{firstNumber} / {secondNumber} = {result}"); Console.ReadLine();
&gt; My understanding is that UWP only real purpose is developing cross-platform apps for Windows Store and Windows Phone. Surface Hub. &amp;#x200B;
Surface Hub.
Yeah, OK, I can relate to that somewhat. I am also trying to start new projects in C#/.NET, but I am using Windows Forms and my understanding is it's not going to silently die (in particular, hi res display-related updates came out). It's the closest thing to Delphi so not a bad choice. I would have fully continued with modern Delphi if the most important component I am using (TopGrid) wasn't abandoned by its authors years ago.
This will display "6 / 5 = 1.0" or something along those lines. To get it correct, you have to do `float firstNumber = 6.0;` and `float secondNumber = 5.0;` OR instead of that, do `result = (float)firstNumber / (float)secondNumber;`. That way, float.Op_Division is called rather than int.Op_Division. Because once int.Op_Division gets called, the result gets truncated to an int and no matter what you cast it to afterward, the lost decimal data is never coming back.
Fully agree with this.
UWP has almost no traction on the Enterprise desktop. Your choices the desktop are WinForms vs WPF (Both of which are alive and well in the enterprise and not going anywhere in the next decade) Delphi VCL is closer to WinForms, FireMonkey is closer to WCF
What are you on about?
My bad, I meant `result = ((float)firstNumber / secondNumber);` If I wanted to keep fN and sN as ints for whatever reason, that's what I would do. (Or typecast both of them, but as far as I know it doesn't make a difference in this scenario) 
I always recommend Jamie King. Search for “Jamie King C#” on YouTube. He’s a computer science professor at the University of Utah at Salt Lake. I couldn’t program my way out of a paper back before I saw his supplementary material. Now I’m a software engineer for an S&amp;P 500 company 
&gt; Console.WriteLine(**$**"{firstNumber} / {secondNumber} = {result}"); FTFY 
Thanks!
Especially now that we have pattern matching.
I'm going to throw in my own definition of "Genuinely Asynchronous" as well. Long-long ago, in the early days before multi-threading, you still had to be able to read and write from the disk without stopping your application. There are specific APIs that you could tell the OS to do something, and it would return immediately, but you then make another call to see if the response is available. So you could have your main program just be a giant while loop. You check to see if the response is available, and if it is, take action on it. Otherwise, handle UI input/refresh the screen/whatever you want to do, otherwise wait 10ms and start the loop all over again. Totally single threaded. &amp;#x200B; FileStream.ReadAsync (and many, many others) just wrap these APIs. BeginReadAsync schedules the Read/Write/whatever, and EndReadAsync gets the final result. You can implement these yourself by calling off to the windows APIs. These methods have been in .Net since 1.1. If you wanted to do non-blocking IO in .net, you had to use them. But they are a PITA. &amp;#x200B; Then async/await make calling the Async methods easy. You can implement the same effect as async/await with a bunch of C# code (which is really what the compiler does under the covers), but it's easier to just to use these keywords. You call BeginReadAsync, there's a way to tell if it's ready, then you call EndReadAsync. Then you only need one thread. You check to see if you have any data available, if so, process it, otherwise handle UI updates, otherwise sleep. But that code looks UGLY/it's hard to read/expensive to maintain. So most people just cheated and used the non-async versions of the methods. &amp;#x200B; Now async/await comes around, now we can write code that's both clean and efficient. &amp;#x200B;
I believe that he actually used XNA instead of Monogame. (I believe the biggest different is that XNA is no longer maintained.) He said he regretted using XNA and would have rather had gone with something that is still supported such as Monogame.
Hmm you could be correct. I thought he had mentioned MonoGame but it could have been XNA.
It's only necessary to cast one of the two numbers to float.
Delegate dictionary?
Classic.
I mean, look at the quality of games that come out of monogame vs unity. I feel lile that's because developers have complete control over everything and can intimately mould the world at every stage. Whereas in unity it seems like people get trapped following cookie cutter design philosophies and just reskinning a game type or are so limited by others tools (that do a wide, general array of features instead of specifically what the developer wants/needs) and because they're in unity they're like "well fuck it, good enough" and the game suffers for it and they get the "generic crap" that everyone talks about. If you're going to spend all your time fixing other people's plugins or finding workarounds aren't you better off learning it the proper way AND getting what you want?
Thanks for the info and the link. I got it working.
The controls are stored, in Main\_Panel.Controls When you add an event handler, the event handler stays until the control is destroyed. Just because you do not have a variable for it doesn't mean the control is gone, any even handlers assigned will remain valid. So add them.
Thank you this sounds promising
Just remember a variable that has a new instance of a class (an object of some sort) is just a reference to that instance. The object is never destroyed until all references to that object are gone (via the garbage collector). So you can create a control in code, assign event handlers to it, add it to some collection (i.e. a Panel's Control collection) and should behave fine. If you created the control, added an event handler, then ***never*** did anything to it (like add it to a panel's Control collection) then once the variable with the reference to that object lost scope, *THEN* the garbage collector then would destroy the object.
Take a look at edX Microsoft has some beginner classes I'm taking a course on edX! Check it out: https://www.edx.org/course/introduction-to-c-sharp-1 I'm taking a course on edX! Check it out: https://www.edx.org/course/object-oriented-programming-in-c That should be a good start
&gt; My manager takes 10% from me. Sometimes I work for free drinks. I bring him home a Jack and Coke. – Mitch Hedberg [Source: Mitch All Together](http://cynicsaccelerants.tumblr.com)
Thanks a lot this will come in very helpful!
And remember in .net Core 3 they can wrap WPF in a Win 10 store UWP like package for easy deployment. Plus it will run on .net core, which is nice :)
Try running visual studio as administrator.
I've been banging my head against my desk trying to figure this out because I thought they would go away like in Java thanks dude this solved my problem!
Chucker23n - Since this there's been a few 'compile the solution' type things appearing which are similar to what we want. But FPGA's are now a thing. Sod the compiler, why not in hardware? Daft?
Programming with Mosh is great for beginners!
Because I want the bug found by a tool running on the machine used by the programmer, not the machines used by the end user. At compile time, not at runtime.
I haven't done these tutorials myself, but I'm doing others they have to learn Xamarin. But if you wanna learn the easy way I suggest this: https://www.udemy.com/courses/search/?src=ukw&amp;q=c%23 It's gonna cost you a bit for each course, but you will learn FAST and the videos are very well done.
Use `public static void Main(string[] args)` method, bro
No. You come across like a dick for talking the way you do. There is nothing wrong with the way the nitpicking was worded. We have someone new to coding so why bother shoving terminologies that are easily overlooked to not intimidate or scare someone away. The point is to help someone code, not be a fucking dictionary. There vocabulary will come with practice.
duuuueeeeeeee, integer division would work that way in any language. It lops off the remainder. You'll need a float to be able to do that. Are you fishing for karma here?
I did made it up... I didn't have C# specification next to me when I was answering, and I had no idea how's the feature officially called, so I just invented a phrase which seemed to describe it well 🙂
An edited version of what I posted on this subreddit before: First, [Download Visual Studio 2017 Community](https://visualstudio.microsoft.com/vs/community/). Then in the installer, scroll down and select these "workloads": * .NET desktop development * ASP.NET and web Development * .NET Core cross-platform development These workloads will install the required programs and extensions, for creating console apps and websites. After you are done installing, start with the [Official Microsoft C# Guide](https://docs.microsoft.com/en-us/dotnet/csharp/index). After that, read the [C# Coding Conventions and Guidelines](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/) to start writing clean and understandable code that will assist you in understanding what's wrong with your code and also allow other people to understand your code easily. After you are done learning the basics of C#, see [this](https://docs.microsoft.com/en-us/aspnet/core/tutorials/index?view=aspnetcore-2.1 ) guide to learn how to build websites with ASP.NET Core. 
Of course Udemy courses are good. They pirate good, free courses on YouTube and charge for them. https://www.youtube.com/watch?v=X7jf70dNrUo
I don't know but I can say with full confidence that it's not linq or lambda. I was using those in my first month.
Okay, what’s the type of stuff u use Nowadays that are challenging?
How long would u say it took u to become a confident c# programmer?
delegates, async tasks, threading, etc
There’s no fixed point. As with all development, C# competency is simply where you can do anything you need to do, with perhaps a little research on whatever part of the project is new to you.
Ok thanks
Check out Derek banas on YouTube. 
Uhhh. Wat?
Technically mono...
I can see some recent activity here: https://github.com/IntelRealSense/librealsense Maybe you can download installer from here: https://github.com/IntelRealSense/librealsense/releases I also see inerop wrappers available on nuget but they are not current.
Google+Stackoverflow and Stack exchange thought me enough over time to test through some college courses. Start with making a simple object oriented program that doesn't display much. You can make a (nearly) complicated game without even using graphics. 
There's a third way: use ``` before and after your code, like so: \`\`\` Console.WriteLine("Hello world!"); \`\`\` looks like ``` Console.WriteLine("Hello world!"); ```
``` Testing123 ``` 
Jumping in here. There's no real fixed point. You just gradually get better at working with the language, knowing techniques to use and gotchas. Personally I started doing c# professionally 4.5 years ago, and I felt I was a decent c# programmer even then but I've been coding other languages and in c++ for years. But since I've been focusing on it since then, most in the last 2 years, I've gotten a lot more familiar with it. Now I look back at my state of knowledge with the language then and realize I wasn't that decent. I can only imagine how I'll feel about my current state of skill 5 years from now.
It works with multiple lines, of course - much easier than typing four spaces before each line!
And interfaces. Not interfaces themselves, but the various things that go with it.
Microsoft virtual academy. An excellent video intro to C# for absolute beginners: https://www.google.ca/url?sa=t&amp;source=web&amp;rct=j&amp;url=https://mva.microsoft.com/en-us/training-courses/c-fundamentals-for-absolute-beginners-16169%3Fl%3DLK8n0uQIC_306218949&amp;ved=2ahUKEwiCkJuH0PrdAhWi1FkKHaaGDXUQFjAAegQIAxAB&amp;usg=AOvVaw1EQoXBcfyxwOv9Zx9HPlZa&amp;cshid=1539131647533
Pluralsight.com (paid subscription) is what I use instead of YouTube. Been using for years. Comes with a free trial of a week I think.
Software development is like chess. You can learn it in a short time and spend the rest of your life getting better at it. Most of us will never get to the highest ranks but are able to make a living doing it. If you are diligent and smart and lucky and have a long career, you may end up an expert in that one thing you've focused on. But even then you will probably admit that you still look up a lot of stuff.
Object reference not set to an instance of an object.
Seems to be an account/bot that keeps posting Mitch hedberg quotes... for some reason
Ha - if you know 90% there is to know about any language, you’re beyond an expert. Actually, you’re probably mistaken, as there is always more to know. If you think you’ve learned enough, you probably haven’t learned enough. I’m not trying to sound pseudo-profound - this is absolutely true. There is no end game. Keep learning, and keep trying new things. Then, something new will come along, and you’ll need to learn that. 
It's a niche subject, but expression trees and linq providers might take a bit to wrap your head around. Did for me at least.
This is all great information! Thanks for the detail. A few specific questions based on your suggestions: I understand the importance of good ReadMe docs (look at [another of my repos](https://github.com/haven1433/autoimplement) for an example), but didn't think it made sense to make a ReadMe until the project was further along. When do you feel it's appropriate to add a detailed ReadMe to a project? You mentioned IronRuby is dead. I've used it in the past as a good in-app scripting tool, to allow me to quickly test things out and generally allow my application to support easy macros. Do you have a different recommendation for what I should use instead? I've seen the Visual Studio .gitignore and decided that I wasn't interested, because it was so long and contained so many things I wouldn't need. What's the benefit of using a standardized one instead of a minified custom one that contains only the info I'll use? I'd never seen the suggestion for folder names to be pluralized like that, but I have seen the suggestion that folder names match namespaces. Does this mean that you recommend pluralizing all my namespaces as well? As a Windows PC developer building an app for a Windows PC, I don't really have any interest in making it cross-platform. Assuming I wouldn't be worrying about cross-platform development for quite some time, do I get any immediate benefits from switching to .NET Core / .NET Standard?
Wow. I torn about how that makes me feel. It afflicts /r/csharp specifically?
Nah looks like he’s all over the place
Ah. Well I think there's some serendipitous humor in the fact that it did it in a thread about learning how to program, at least.
For starters, I'll assume you're talking about [ViewPort](https://github.com/haven1433/gen3hex/blob/master/Gen3Hex/ViewModel/ViewPort.cs), since it probably has the most. In general, I've seen two conventions. One is to put all your fields, then all your properties, then all your methods, etc, with all publics of a section before any privates of that section. The other convention is to put code as close as possible to the thing that's using it. I've found that the regions do a good job of helping me associate fields with the properties that use them (and in the case of a command, the command's execute method) (and in the case of dependency properties, any static or protected change callbacks). Without the regions, I would probably find the code easier to read by moving all those disparate member types into separate groups, but then I would lose locality for edits / additions. Is this what you would recommend as a replacement for regions, or is there some other option I'm unaware of?
Apply. Study like you need to know it by the interview. Worst case they say no and you lost nothing.
Thanks!
Regarding a decent README, I absolutely agree. My thought was that I would add one as soon as I have some of the basic features working. But I suppose that at the minimum I should add some sort of vision statement to a README so that you kind people at least can see my goal for the project. Regarding comments: I actually agree with [Clean Code](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882), that using comments is usually a smell showing that the code isn't clear enough. Were there specific places where the code was hard to read, which made you want comments? Maybe there's some refactoring I could do to make the code more clear. 
You can call yourself a C# programmer without doing any linq. A lambda is just a function with no name. There is no end game though, you are always learning. &amp;#x200B;
IL
I can give you practical advice. I am self-taught, been slinging C# since .net 1.1. Self driven learning was very hard for me for the first year, but so very worth it. I learned to code by starting with the basics. How do I make a console app? Now how do I use a class? Then I started diving into the MSDN documentation and I poured over the keywords. This led to more discovery and little wins, like “OMG ++ does the same thing as myVar = myVar + 1!!” My curiosity grew from there. I had to know why the keywords and operators were used. When I felt I had begun to get a few basic concepts, I found projects on the web to pull down and debug. I remember finding a very old C# 2D game engine written over Managed DX (lol, stories for another time). Really small game engines were great for me. It taught me interacting with classes, data structures, and also dealing with really difficult interfaces, such as doing COM Interop with FMOD. The exposure was worth it weight in gold. My point? My approach may not work for you, but at the very least, my advice is this: Light the match of curiosity and let the flames consume you. Ask yourself why everything is the way it is. You’ll start to learn compiler intrinsics, how features came to be, and more. 
expression trees and linq providers are very advanced topics that very few people ever touch. unless you're implementing an ORM, you probably will never encounter either.
&gt; When do you feel it's appropriate to add a detailed ReadMe to a project? It doesn't have to be a long readme. Even a few lines makes it a lot more "welcoming" than a simple list of files in the repo. &gt; Do you have a different recommendation for what I should use instead? Why not C# itself? &gt; I've seen the Visual Studio .gitignore If you have a lot of contributors on different platforms using different IDEs, you need it. There's really no point in "minifying" .gitignore files, unlike JS minifying a gitignore file does not improve speed, and nobody opens it, so you can make it as long as possible unlike C# code. &gt; I'd never seen the suggestion for folder names to be pluralized like that, but I have seen the suggestion that folder names match namespaces. Does this mean that you recommend pluralizing all my namespaces as well? Yes, namespaces should match folder names, which means my folder structure was a suggestion for namespaces too. Pretty much every MS/Xamarin tutorial/sample app uses pluralized namespaces. &gt; do I get any immediate benefits from switching to .NET Core / .NET Standard?
This really depends on whether C# is your first programming language. If you have some programming under your belt, I highly recommend Jon Skeet's 'C# in Depth'. There are several versions, and the changes are largely based on new features given to the language. If you're new to programming in general, I can't really think of good 'learn programming with C#', but you may be surprised by how similar it is to Java. I imagine there are plenty of good 'learn programming with Java' tutorials out there that could really help. At a fundamental level, the two languages are very similar, both conceptually and syntactically.
Don't be afraid to ask questions here and over on r/learnprogramming. 
 using system; Next question?
&gt; vertex math oh my...
There shouldn't be any assignments that require knowing things outside of the text book. Have you taken Programming Logic? Programming Logic really should be learned before a language course, because it makes it a lot easier to learn any programming language.
Build your own "Game of Life" and then maybe "Minesweeper" and eventually "Tetris" to learn lots of good things.
The hard part of programming is how to build a complex application that is reliable and maintainable. It's like a carpenter asking what tool they need to buy. A good carpenter doesn't need a lot of tools and guy with $20k in tools may not be able to build a bird house.
Program.cs for the win