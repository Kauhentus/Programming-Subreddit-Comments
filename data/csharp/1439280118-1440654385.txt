Did you read the last part of the error? :p
So probably the hardest thing I've found about WPF is animating anything. At all. Storyboards seem so frustrating and clumsy. How do you pull off such smooth zooms/expands. Its like your bars are mini accordion controls. I can make an accordion control easy peasy, but getting it to animate is another task in itself.
So the fundamentals would be the MVC, web Api, c#, html, and... I forget the "R" thing (on mobile so I can't read your comment while typing) ?
RabbitMQ / MassTransit are pretty simple to pick up and get going with. 
 return (T)(object)result;
Note that the code is very inefficient.
I find it amusing that the talks are always about which programming language is the best, while no one mentions SQL. Pretty much any useful application uses a database and it is a must to have at least some knowledge of that area, both the syntax and actual database design (The 3 Normal Forms). 
Yeah, I used text files and binary blobs for a king time until I have in to the inevitability that I would need it. Now I find myself using it for even simple projects. I would say it's the one "language" every good programmer knows. I also agree that you are going to have to learn to crest and maintain your own. In a perfect world we would all have DBAs to take care of it for us but in reality not so much. 
As some other poster said this is an opinionated topic. Imo this is wrong and model should be seperated from viewmodel through some more abstraction/indirection.
https://github.com/9swampy/Telnet/ https://www.nuget.org/packages/Telnet/
I can't even think about how to switch from WinForms to WPF on my work. i'm gonna cry.
Is telnet the only way to access the server? If you can use "rexec" on the same server, the protocol is dead simple to use.
Despite the naming, `Collection&lt;T&gt;` does actually implement `IList&lt;T&gt;`.
I'd point you to http://codereview.stackexchange.com/ but that would require you to "publish" the code.
Hey Xeno, Thanks again for the reply. Yes it is indeed coursework, Although consultations with lecturers aren't readily available and not really fruitful. I have come up with an idea for a solution, using threads. Yes indeed a thread in my prototype is for a car instead of parking space. I'll post it here after I refine it a bit (Or maybe message it to you) To give you a clearer idea of what I was trying to attain. Thanks again for the great feedback, It's being immensely helpful!
Why did you decide to go without MVVM? I found it difficult to grasp at the beginning, but once I got it was very helpful. BTW you should do custom window frame, it would look great. 
Doh, that's right. Not sure what I was thinking on that one.
Hey, Thanks for the great feedback! Indeed I will be using a separate actor class to represent the car. Thanks again, All the feedback has been really helpful!
Thank you so much! For someone still working on the basics of programming, it's hard to navigate the ocean of acronyms that is the list of popular technologies for developers. I know it's not perfectly on topic but could you maybe ELI5 with a small sentence or so about what each part of the stack might be for? I'm sure there are problems they solve that I can't even think of but seeing the way they fit together or what each part does.
They only do if i sue something like `await Task.Delay(1000);` or am I wrong? EDIT: Nevermind. /u/lukeatron already gave a good explanation :)
I already saw this one but there is no real code in it, but thanks to your comment I was able to find https://channel9.msdn.com/events/Build/2015/2-762, which contains a live coding demo, so thank you :).
Please guys, forget about MongoDB. Read this: http://cryto.net/~joepie91/blog/2015/07/19/why-you-should-never-ever-ever-use-mongodb/ http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/
Hmmm, I'll try that out. Thanks. 
Maybe this will help... If your sending a message to a window. Try to track down the equivalent API that would allow you to receive said message. [GetMessage function](https://msdn.microsoft.com/en-us/library/windows/desktop/ms644936%28v=vs.85%29.aspx) Not saying the above message is correct, it has been awhile since I worked with API calls.
Another vote for this. I've worked with C# for years and even still I sometimes come accross his videos when I'm searching for how to do something new. Very concise explanations
You can check out my [code here](https://dotnetfiddle.net/ppuOSA) in dotnetfiddle. This lets you immediately change and play with it. I refactored a few things you had, you can ask me why if you're not sure the benefit. From an API perspective, it's a little odd to have Deck expose Coreset. This is a stylistic difference these days. Some would say inherit from List&lt;T&gt; and tasck on your Shuffle code. Other say the List&lt;T&gt; should always be an internal mechanism, hidden by the deck interface. Maybe you expose IList&lt;T&gt; maybe you don't. I'm more a fan of the latter, but it involves a bit more work. As a compromise, I made List&lt;T&gt; readonly, changed the shuffle so we don't constantly blow away the list each shuffle, and exposed the IList&lt;T&gt; as CoreSet. But I'm pretty firm in believing there's no difference between Deck and Coreset. using System; using System.Collections.Generic; using System.Linq; namespace MyGame { public class ConsoleApp { public void Main() { var deck = new Deck(); deck.Shuffle(); Console.WriteLine("Full Deck:"); deck.CoreSet.ToList().ForEach( o =&gt; Console.WriteLine(string.Format("Race: {0}, SubClass: {1}", o.Race, o.Subclass)) ); Console.WriteLine(); Console.WriteLine("Just the Orcs:"); var orcs = deck.CoreSet.Where(e =&gt; e.Race == Race.Orc).ToList(); orcs.ForEach( o =&gt; Console.WriteLine(string.Format("Race: {0}, SubClass: {1}", o.Race, o.Subclass)) ); } } public enum Race { Orc, Elf, Human } public enum Subclass { Knight, Rogue, Wizard } public class Card { static Random _random = new Random(); public Race Race { get; private set; } public Subclass Subclass { get; private set; } //Default, random race, subclass public Card() { var races = Enum.GetValues(typeof(Race)); var subclasses = Enum.GetValues(typeof(Subclass)); this.Race = (Race)races.GetValue(_random.Next((races.Length))); this.Subclass = (Subclass)subclasses.GetValue(_random.Next((subclasses.Length))); } public Card(Race race, Subclass subclass) { Race = race; Subclass = subclass; } } public class Deck { static Random _random = new Random(); private readonly List&lt;Card&gt; _coreSet = new List&lt;Card&gt;(); public IList&lt;Card&gt; CoreSet { get { return _coreSet; } } public Deck() { //_coreSet.Add(new Card(Race.Orc, Subclass.Rogue)); int nCards = 7; while( nCards &gt; 0) { nCards--; _coreSet.Add(new Card()); } } public void Shuffle() { int n = _coreSet.Count; while (n&gt;1) { n--; int r = _random.Next((n+1)); Card c = _coreSet[r]; _coreSet[r] = _coreSet[n]; _coreSet[n]= c; } } } }
The third and fourth param are wParam and lParam like /u/Caethy says. They are like wild card params for different send message "types". The "Type" in this case ("WM_KEYDOWN") needs to be told what key down, and then some ancillary metadata. Your sending 0x28 virtual key ( VK_DOWN ). The fourth param ( lParam in win32 docs ) is a bitfield. It contains lots of little params masked into an integer. In the case of WM_KEYDOWN the first 0-15 bits can be used to repeat the key press X times. 16-23 is scancode which is a way a custom keyboard could use custom keys with their own scancodes, then you get into things such as a bit that can show the difference between left alt and right alt being pressed when they both have the same virtual key code. 25-28 is magic you're never supposed to touch, bit 30 specifies the previous key state, and 31 the transition state. Also, you can use [SPY++](https://msdn.microsoft.com/en-us/library/Dd460756.aspx) to watch a window and see what SendMessage sends to that window when you bang on a keyboard or press a button. This is a good way to debug your app as well as find out tricks some apps require to read the key message. If it's a game your trying to send WM_KEYDOWN it gets complicated. Most game's poll the keyboard state on their own timer and don't rely on messages being send to a window. At least for game control. Once you open a console or chat input, it generally switches back to reading SendMessages because of the complexity in handle foreign keyboards/unicode text.
That's a matter of opinion—I was simply pointing out the "common" stack, as OP asked.
Research the concept of polymorphism in object-oriented programming. Basically, think about inheritance as a "is a" relationship. **D** is a type of **A**, which means it can do whatever an **A** can do. Thus, you can assign a **D** to a variable of type **A**. When you have a piece of code that uses an **A**, it only cares that the object can do all the things an **A** can do. Since **D** can do all those things too, there's no reason your piece of code can't use it.
In .NET, you can query the run-time type of an object through the *GetType()* member function. It returns an object of type **Type**, which you can look at to determine an object's type. In most good high-level designs, you probably shouldn't need to look at an object's type.
&gt; Why would someone instantiate "a" from "A" and not "D"? This is just an example from the MSDN website, so don't take too much out of it. They are just trying to demonstrate one aspect of virtual methods. This example is just trying to show the most derived implementation of the method at any point in time. &gt; Finally what is the run-time type exactly. As in how does one figure it out? The GetType() method will give you the runtime type. In this case, a's runtime type would be D. a.GetType(); 
What version of vs are you using? I am running 1 2015 and the upgrade went flawlessly. Maybe an add-on?
&gt; Why would someone instantiate "a" from "A" and not d? Ok, Imagine that I wrote a method. public void DoSomething(A a) { a.F(); } I only require object to be any subtype of type A. It ensures that any object you pass where will have the same methods (**the same interface**) as type A so I can use it as object of type A. You, as caller of that method, can pass different subtypes because you might require to pass specific implementation of method F. DoSomething(new D()); D d = new D(); DoSomething(d);
It's best breaking it down into lines: int userValue = 2 This declares an integer called userValue and assigns the value of 2 string message = (userValue == 1) ? "boat" : "car"; This declares a string called message, introduces a condition that checks userValue equals 1. The '?' is called a conditional operator, it returns one of two values depending on whether the condition is true or not. If the condition is true the first expression is evaluated. if it is false the second is evaluted. As userValue was set equal to 2, the condition userValue == 1 would evaluate to false. This then sets the string message to car. Console.WriteLine("{1} - {0}", userValue, message); The {0} and {1} is called composite formatting. It's basically a way putting placeholders in with fixed text to make it easier to format. See here for further info https://msdn.microsoft.com/en-us/library/txafckwd(v=vs.110).aspx It's easier to understand with this Console.WriteLine("{0} killed the {1}, but it never killed the {2}", "Curiosity", "cat", "coder"); The {0} are simply placeholders for the objects you pass in at the end. The positioning of the words at the end relate to the number placeholders, starting at 0 so {0} is "Curiosity", {1} is "cat" etc. The reason Console.WriteLine can do this is because it has a method signature (one of many) that looks like this, you can find this by right clicking Console.WriteLine in visual studio and go to definition - as a relative newbie I do this a lot as I find it helps. There you will find this: public static void WriteLine(string format, params object[] arg); This takes two things, a string called format (this is set as "{0} killed the {1}, but it never killed the {2}" in the example, and an array of objects. Object is the base class for all derived classes, including string so you could put strings, dates, integers at the end as they all derive from object. The [] declares this as an array of objects. The params keyword means it can take a variable number of arguments. So you could have {0) all the way through to {50} and beyond if you wanted. Hope this makes some sense, I hope the C# gods forgive me if I've gotten anything wrong, I've only been meddling with C# for about 9 months. 
The reason the are generally separate is because they are modelling different things. The ViewModel is an abstract representation of the UI and the model is a representation of the data. They might share much of the information but they are separate things. In your example it's probably ok, your only displaying data and a view model would not add anything. As soon as this ceases to be true however you should create a full view model.
If you are just starting to learn programming I would focus on WebApi &amp; AngularJS. For persistence I would focus on learning SQL since you will need it even if you are using an ORM. If you really are starting from scratch just focus on something that runs in the browser. You can consume plenty of apis hosted by many of the services you probably already use. gmail, facebook, npr, random scientific research database.
In XAML, where the markup is visible, i would set them to visibility hidden, only switching it on if i needed to operate on the layout for it. (this is probably the state you want them in anyway since you are changing their visibility at run time) In Winforms, I would probably add them programatically (you can add it and manipulate it in the graphical viewer and then copy the generated code for it if that helps)
You know, every time i feel like i have a handle on things i visit questions like this, read answers likes yours, and realize i have no idea what the fuck i'm talking about.
Thank you for help.
Release
I figured out what happened. The "Universal Windows" designer has a console macro it runs to set whatever permissions it needs on the folders. The first time I ran it it popped up and said it had finished a file and sat there a bit. Not really thinking about it I closed it. Afterwards all it would pop up is an empty Git window which wasn't doing anything. After I clean reinstalled Visual Studio the original "CMD" window popped up again when prompted to "fix the folder permissions" error. This time I didn't touch it. Turns out it stalls for a bit after doing the first file and there's a bunch more it did after I waited long enough. I had closed it the first time wrongly thinking it was done and was just leaving me a console window.
Yes, I want to return array of values from property/properties. I will get only one type for Array&lt;T&gt; - class from which is this part of code get values from some simple context. It can be either player.stats.health (single value) or player.pawns&gt;field.id (pawns are an array and I'm flattening result to be an single array of field ids).
References add to CLR meta-data size, not "additional info". My guess is embedded resources, especially if you're using WPF.
It's embedded resources (like styles) because you're writing a WPF app. http://stackoverflow.com/questions/20945064/wpf-exe-large-filesize
Is there a reason you can't use a tab control?
He sure knows how to make a good use of charts O.o
I see now. In that case, use [Array.ConvertAll&lt;TInput, TOutput&gt;()](https://msdn.microsoft.com/en-us/library/exc45z53(v=vs.110\).aspx) then. It'll be a lot more efficient than what you're trying to do.
This might be anecdotal, so take this with a large heap of salt. I took the exam when it was brand new and the companion book hadnt been released yet. I was using the list from the microsoft website (https://www.microsoft.com/learning/en-us/exam-70-483.aspx) to revise from. When I actually took the exam, I was shocked by how ever the top that list was. It was a relatively simple exam, that skimmed the surface of most topics. Maybe I just got lucky
But it's not a WPF app. It uses WinForms. That's why I'm confused.
&gt; I thought there would be some clean way of doing it with layers on the design mode or something. There is - you can use the DesignInstance property of the Design DataContext xaml attribute to specify a DataContext that should be used at design time. I implement this by having a DesignTime sub folder under my ViewModels folder with classes that inherit from the ViewModels and set specific properties on those view models for use at design time (such as having certain visibility properties set to false). You just need to add this to the top of your XAML file: xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:designTime="clr-namespace:YourNameSpace.ViewModels.DesignTime" mc:Ignorable="d" d:DataContext="{d:DesignInstance designTime:DesignTimeSomeViewModel, IsDesignTimeCreatable=True}" Once that's done and you have your design time viewmodel set up all your bindings at design time use data from the design time viewmodel instead of from their usual data context (which often will have a lot of nulls etc when it's not initialised).
For anyone interested, i found a detailed blogpost about it : http://blogs.msdn.com/b/tiles_and_toasts/archive/2015/07/02/adaptive-and-interactive-toast-notifications-for-windows-10.aspx. Seems to be what I was searching and the only "official" documentation for now.
Haha, same here. The more I learn, the more I realize how very little I know.
Don't take it too hard, some of the tests are pretty brutal. On top of that, they don't necessarily teach you the right way to do things. Instead they are often testing if you know the *Microsoft* way of doing things.
&gt; A discard pile is a collection of cards, so it's just another type of Deck Although, typically, it's more *stack* than *queue* so you may need different rules for pulling cards out (if your game includes it).
Thanks for the encouragement. I have one more retake on the test. I am going to study hard for that now that I know what to expect. Also I got a report back on what my problem areas are. It is def the Microsoft way and that part is annoying. 
Arrays aren't generic types. They're a special parametric type that has an **element** type, not a **generic** type. It's similar in purpose, but distinct from generic types. You should use the correct notation T[].
What would you think my best option would be? I'm attempting to write a script that will talk to a PDU in our datacenter. The PDU gives us the ability to power systems on/off. At the moment I just telnet in and run a few commands to do this, but I'd like to automate this task. 
I've bookmarked it, thanks!
Which also use embedded resources.
From what I remember the only questions about threading were about Tasks. Stuff like why not to use ThreadPool and use Task.Factory Another imporant tip I think I should mention is to learn the .exe tools like gacutil.exe sn.exe and regiis.exe (or sth like that) I think I had a question about all every one of them.
This angers me, not because of the terrible joke, but because only *pure evil* puts the \* on the variable name side.
The decl syntax for pointers in C/C++ annoys me. You're declaring a variable of type int *, but the * binds to the varname, instead of the type, so this is legit: int * a, b, c; and *only a is a pointer*. It makes me angry with rage. Good thing it got fixed in C#.
No, I would hold off with the patch, and deploy once you actually have something beneficial for the client. Worst case, you introduce new bugs.
I constantly refactor code which i believe is a good thing so never stop doing that, however releasing a patch with release notes "improved readability of the code" isn't probably going to bode well for the users or project stakeholders. In a controlled environment this would also be near impossible to get through. I'd wait for a feature to be built, then attach this refactor as a story on the feature. Then when the feature hits qa the testers can see what has changed and they can test that stuff again before the release is cut. That way you can be sure you're not breaking something else. But my motto is always leave code in a better place than you found it, however, it still has to go through the cycles. 
Refactoring is not necessarily something you do for others, but more something you do for yourself. Also it shouldn't necessarily be something you do after some time,but something you do immidiatly after you wrote your code and it seems to work. In a first throw, to proof my code is working I'll just write it down in one giant function or maybe a few more. When it works I break it down into multiple function to make the code more readable + commenting critical parts of the code. This not only help others to understand the code, it also helps myself when I come back to the part of the code after some days or weeks (bug fixing etc.). I just don't remember what I was thinking a few days before, not even thinking about weeks or even years.
Just meaning that you try to keep your code clean from the very beginning. Refactoring unreadable code is a pain in the a**.
I try to keep my code clean from the beginning, but there is always something I find, that I could have done better. 
You could always call it "Minor improvements" ; ). But yeah, I get the idea, seems like you all agree - don't do it unless the user gets something from it.
Sure, but to see what you could have done better, you have to understand what you did in the first place. Anyway, happy coding :)
It's legal but stylistically unwanted. int[] b = {4}; unsafe { fixed (int *a = &amp;b[0]) { Console.WriteLine(*a); } }
Hmm... I thought they would have been more consistent. Declaring multiple pointers can only be done like `int* a, b`, so I assumed that it'd be the same for single pointers.
What have i started^^^pointerwars
I'd use pointers in C# more if they weren't so dumb. For a start off, not having an implicit conversion between Xyz* and IntPtr is annoying, and also the precedence of operators means I have to write `IntPtr someLocalPtr = (IntPtr) (&amp;someLocal);`. Then the fact that you can't have a pointer of a generic type (i.e. `T*`) is frustrating. I get it, even if `T` is a struct it could contain GC'd types, but I'm already in unsafe land so why not just trust me that T is blittable? Or better yet, add a `where T : blittable` constraint... And then there's the fact that you can't have pointer types as generic arguments (e.g. `List&lt;int*&gt;`) so you have to convert everything to and from IntPtr (which is basically the same as void*)- at least let the compiler just cast it all to IntPtr behind the scenes! But I guess their primary concern will always be enterprise, and enterprise doesn't use pointers much. Oh well.
Thank you for explaining the problem! In my work environment the data sources I'm working with are unchanging (some would say outright stagnant...), so the possibility of my code models changing from under me had never occurred. Makes more sense now. :)
That's pretty much life.
It's *unsafe* to run with pointers...
Not to mention that in a professional environment, you can spend a lot of time working on code that was written by several other people before it got to you.
One thing to note is that a virtual function can be called from the parent class. That is, class A can call the implementation of a method in its derived class B -- but if you Hide the function, then class A will be calling it's own implementation of the method and not the one defined in class B. See: void Main() { Child c = new Child(); Console.WriteLine(c.Test()); // outputs 1, not 2. Change the hiding method to override and it'll output 2 } public class Parent { public int Test() { return GetNum(); } public virtual int GetNum() { return 1; } } public class Child : Parent { public int GetNum() { return 2; } } Also, by instantiating class A with an instance of class B is just encapsulating B as C. In other words, while you have an instance of B, only the public members of A will be accessible.
They're talking about integrating some MS source already in [the 4.0 release](http://www.mono-project.com/docs/about-mono/releases/4.0.0/). I believe they're also working on using Roslyn in Mono Develop to improve their IntelliSense and refactoring capabilities.
I guess I don't really think of a deck as being either a stack or a queue (though it can be represented as one depending on the game's needs.) I just think of it as an ordered list of cards with some extra functionality on top. Hand, Draw piles, discard piles, played cards on the table... sometimes you don't care about the order, but I think of them as just lists that can be added to or removed from (at any index), shuffled, peeked at, etc. I'd probably have something along the lines of... public class Deck&lt;T&gt; : IDeck where T : ICard { public virtual T Draw() { return Draw(1).Single() } public IList&lt;T&gt; Draw(int count) {...} public T Remove(int index) {...} ... } Draw() would leverage remove to modify the underlying collection, and always act on the "top" of the deck, but if you wanted to take cards from anywhere else you can just call Remove. Or RandomDraw() could be implemented to call Remove on a random number from 0 to deck size... ooh, all the fun little helper stuff that could exist in a library like this!
 [WebRequestMethods.Ftp.ListDirectoryDeta](https://msdn.microsoft.com/en-us/library/system.net.webrequestmethods.ftp.listdirectorydetails\(v=vs.110\).aspx) will give you the datetime, along with the access permission and the file owner. This 'format' of this listing ( or lack there of) can change from FTP implementation to implementation. Generally there's the UNIX format and the Windows format. [Stackoverflow](http://stackoverflow.com/search?q=ListDirectoryDetails+) should have more details on parsing the text into useful information, and you can examine some other FTP client implementations to see how they extract DateTime ( RegEx will be your friend here ). 
Reaharper is something a profesaional developer cannot afford NOT to have. At the very least, please go for the free trial and play with alt-enter. I promise you will never look back!
The first thing is that mono developers are able to read the .net implementations when writing mono implementations. Before, even stuff "opened" under the reference source was off limits. But the cross platform dnx/dnu workflow is also super neat. Though monodevelop (last I checked) didn't support project.jsons, I use atom with the omnisharp plugin and get all that goodness in mono anyway.
I second this. Made the switch 1.5y ago from 14y in Java/Unix. The language itself was the easy part. The first challenge was Visual Studio. It's very unforgiving and omnipresent. You essentially need to submit to its opinionated ways. Second challenge was learning the APIs and runtime behaviors. What's the lifecycle of an HTTP request within IIS?
No, spacing isn't considered. 
It's just ignored white space.
No, that is quite unusual. Are you embedding a lot of graphics?
Thank you for the comment. That is correct, I will need to better design my methods. For the above example, I would have 3 discard piles (3 "graveyards" for the 3 races). I would have each player have their own "hand". I was going to put the hand as it's own class (Hand.cs), and then I would inherit from the Deck. public class Hand : Deck { // ...
`T*` would be super useful. It exists in CIL. C# just decided not to have it. :(
Two separate options: - *implement* a collection *interface*. In this case I would recommend implementing `IList&lt;T&gt;`, which is a superset of `ICollection&lt;T&gt;` that additionally allows accessing items by their index rather than just enumerating them. In this case you'll have to provide implementations of all methods yourself (which can be as easy as calling the same function on an internal `List&lt;T&gt;`). `public class Deck : IList&lt;Card&gt;` - *inherit* a collection *class*, such as `System.Collections.ObjectModel.Collection&lt;T&gt;` (note the lack of the I). The `Collection&lt;T&gt;` class already implements the `IList&lt;T&gt;` interface, so you don't have to do that yourself. `public class Deck : System.Collections.ObjectModel.Collection&lt;Card&gt;` 
where does dice1 come from?
Why not just have 3 picture boxes one for each image. A picture box control can only have 1 image assigned to it. So you will need 3 seperate controls 
dice1 is an imported resource from my computer( a png file i made in paint). is there a better way?
I've tried this. But i dont understand C# well enough. My thinking is that if i have three pictureboxes for each dice roll. When the first die is rolled, lets say it == 1. how do i make the image i have for the face of a die that is 1, appear in that picturebox? Wouldn't it be a bunch of if statements considering that the dice roll could produce a number from 1-6.
I dunno about better, but I was thinking ... pictureBoxDice1.Image = (Bitmap) Image.FromFile(@"C:\...FILE LOCATION..\dice" + PLAYER_DICE1 + ".png", true); 
For a novice, he's not gonna need to worry much past "if it ain't broke don't fix it"
OK this is without knowing any of your code , but just some psuedo code(on mobile) would be having an array of images say diceFaces[] and then to choose an image I would just say diceFaces[numberIRolled-1]. If you don't know about arrays, learn now as they will be your best friend ;). Basically if I have each image in that array, in order of 1-6, and I roll a 4, it will choose the image in the 3rd position.(because it starts at 0, instead of one, hence the -1.) Which would be a dice face of 4. 
DAMN i talked to a tutor and they said i might need to look into arrays...i have until tomorrow to do this. WE HAVEN'T EVEN COVERED ARRAYS YET. is there a simple way? 
I feel like this question gets asked a lot, but how does Mono compare to Windows? I have nothing against windows it's just my best pc's are a mac and a linux machine. I know we can't use windows forms or something and gui stuff is god awful looking.
I believe what you are looking for is called sockets. They allow data to be transfered across network connections. I am on bike so i am too lazy to find a link, sorry.
Just putting an alternative viewpoint out there, one I'm not completely convinced of yet. There's a movement being started where instead of having a large team of functional testers in an org, one invests in creating a very sophisticated deployment system, where it's very easy to send your changes to a subset of your customers, and to roll back if there are any problems. In that case I think it might be recommended to deploy even for refactoring, because you're aiming to fail fast. This would really apply more to services than applications though, and I'm sure that there could be several counter arguments against this, but I thought I'd put it out there.
There are also bindings to GTK (gtk#) and Qt (Qyoto) so not all guis are god awful.
You can have them all in one line like this: if(object == "string1" || object == "string2" || object == "string3") { //code } This will check if object is one of those three strings and if it is execute the code. Edit: if you meant that you wanted to clean it up you can do something like add all the strings it could be to a list, then use linq or Contains() to ask if it's in the list. List&lt;string&gt; myStrings; myStrings.Add("string1"); //etc... if(myStrings.Contains(object)) { //code }
Like the others, I would package it with something else to sell it, but I do think its worth getting it in the wild. While Im sure you tested it well, and it passed all your Unit tests, but there still could be issues. Its still worth whatever your release cycle is like. Canaries, alpha users, beta etc. 
You need to write the *complete* statement, and connect them. If(o == "string 1" | o == "string 2" | o == "string3") Or you could use a switch statement. From msdn: int caseSwitch = 1; switch (caseSwitch) { case 1: Console.WriteLine("Case 1"); break; case 2: Console.WriteLine("Case 2"); break; default: Console.WriteLine("Default case"); break; } On mobile, sorry for the formatting :\
Pretty sure you want a switch statement here. Putting them all in one line of an if statement would fire the same code. It sounds like you need different code depending on what your object is equal to. Yeah, use a switch.
probably need to make Bitmap dice1, dice2, dice3...etc an array Bitmap[] dice = new Bitmap[7](); and then initialize them just like you did, but go dice[1]=Dice_Game.Properties.Resources.die_one; through dice[6]=Dice_Game.Properties.Resources.die_six; and then just do pictureBoxDice1.Image = new Bitmap(dice[playerDice1]); since what you are doing above with pictureBoxDice1.Image = new Bitmap(dice1); means always load the image for dice1. 
after re-reading the post, and noticing you were sorta looking to do it without arrays... i guess i would need to see how you had your image controls set up. did you have pictureboxdice1, pictureboxdice2, pictureboxdice3? or how did you have it? and what was your whole logic section for assigning the images. your code above with the playerdice1==1, assign dice1 should be fine, as long as you had if(player_dice1==1) { //assign dice1 } else if(player_dice1==2) { //assign dice 2 } else ... etc
What's that saying about people who are always running into assholes?
You were on the right track with your if statement but you only need three picture boxes. One for each die. So if die 1 is a 4 you show image for 4 in box 1 If die 2 is a 6 you show image for 6 in box 2. Basically each box corresponds to the die you are displaying the value for. The way you describe it with the code above was a box for each possible image which isn't waht you want. 
better make sure SURE that there isn't any change because if there is even the slightest mi-nute change I'm sure your clients will find it and if they don't like it they will complain to high heaven. This is why refactoring code is really not the best thing to do. If you are adding a feature or fixing a bug and the code that uses that part can be done better than fine, but don't just go through your code base and refactor code just because your code base sucks.
Can't you just multiply the current size by (1000/1024)\*(1000/1024)\*(1000/1024). So... just multiply the size in bytes that windows reports by: .93ish and call it a day. And if I'm doing my math backwards because it's late and I'm tired, then do it the other way around, and multiply by 1.073ish.
It is good, but at first it can be overwhelming because there are tons of features.
it depends on what functionality you want. if your if chain looks like this if(string1 == "Thing") { //do a method } if(string1 = "Thing2") { //do method 2 } then you probably want a case statement. switch(string1) { case("thing"): //do method break; case("Lemons"): //do other method break; default: break; } however if your if chains depend on multiple conditions, then you can do it inline you just need to make sure the logic and chaining is right. but be careful with the logic in if's they CAN get overly complicated. if(string1 == "thing" &amp;&amp; string1.Length &lt; 10 || string1 == "chips" || string1.Contains("Orange") &amp;&amp; string1.Length &lt; 7) if in doubt, put brackets round things to make the order of operations clear and remember if(()string1 == "thing" &amp;&amp; string1.Length &lt; 10) || (string1 == "chips") || (string1.Contains("Orange") &amp;&amp; string1.Length &lt; 7)) check out https://msdn.microsoft.com/en-us/library/aa691323(v=vs.71).aspx for more. **EDIT** fixed wrongness.
Careful with your nomenclature here... Both `|` and `||` are *binary operators* in all their uses, which only means they take two arguments. Both `|` and `||` are also logical operators (fully evaluated and short-circuit respectively), while `|` is *also* a bitwise operator (what you called binary).
Uh, instead of a bunch of if/then/else I would use Case, probably. https://msdn.microsoft.com/en-us/library/06tc147t.aspx
I use this method extension public static bool ExistsIn&lt;T&gt;(this T obj, params T[] parameters) { return parameters.Contains(obj); }
Any idea of what "Token Broker" is, and how it compares to the existing WebAuthenticationBroker?
Agreed. Would be a possibility, but switches with fallthrough are considered bad style in some style guides, even though I think that they *can* enhance the readability of code. switch(object) { case "string1": case "string2": case "string3": // do something here break; // very important in this case default: // do something else if necessary // yet, the default case should always be included in switch statements break; }
The biggest part is UWP, which stands for Universal Windows Platform; they had to make some backwards-incompatible changes to the APIs (or to their behavior) to ensure they are the same across devices. There are a bunch of these changes that look like they could be made in a backwards-compatible way, but since Win10 is free and many big changes are backwards-incompatible anyway, why bother?
yeah, check the Request.AcceptTypes looking for Json or Html. Assuming MVC here you'd return a View or Json depending which one you want. That assumes you want to return the same data. If you need two methods you'd have to probably write an attribute that inherits from ActionMethodSelectorAttribute that examines the accept type.
&gt; One potential hack would be to sniff the user agent making the request and serve different content. If HTTP only would have a way to request different media types.......
Thanks for the tips, will do.
Awesome, thank you so much.
&gt; However, you can only access the public methods/properties of the base class for the items inside the list. Unless you test for B-ness and cast the item explicitly. foreach(var item in test) { var itemB = item as B; //The "as" operator casts the item as B if the item is an instance of B // or one of B's descendants, returns null otherwise Console.WriteLine("Name: {0}, Age: {1}", item.Name, itemB != null ? itemB.Age.ToString() : "unknown"); } Less "clever" and easier to read version: foreach(var item in test) { Console.Write("Name: {0}, Age: "); if(item is B) { //The "is" operator returns true if item is B or one of B's descendants Console.WriteLine(((B)item).Age); } else { Console.WriteLine("unknown"); } }
When you do *what* you get an error? "Have a list"? Also: - You didn't post any code. - Your explanation isn't technically precise in any way (so we don't know what's going on). - You didn't post any error information.
XAML with designer support for c++?! That is awesome
Lol, my bad mobile*
Because despite what you mentioned there are going to be a large number of people hanging onto older versions of Windows. Heck, it's 2015 and I still can't make the jump to .NET 4.5 on the desktop application that I support because we still have a significant number of customers using Windows XP. It'll be a good 5-10 years before I can even consider using some of these new features if they're Windows 10 only.
Our application (MVC 3) does this in an overridden ViewResult class (which we call FormattableViewResult&lt;T&gt;). We override ExecuteResult and check Request.AcceptTypes and a querystring override (so they can be linked to in browser) and decide to either: * return the view (base.ExecuteResult(context)) * return a generic html table data view (useful for some of our in house scraping tools) * return a csv dataset * return an excel document * return a pdf * return json * return xml This way our actions simply `return FView(...);` instead of View. Other options are to create a model binder and pass into the action this property (see http://stackoverflow.com/a/11744463), an Action Filter to do basically the same thing, check the request in your context in the action or create route constraints and provide two different controllers for the route... From our perspective, varying the structure of the response to meet the requirements of the request is a task suited to the scope of the object that instruments the view (thus we did that).
I don't know much about Blend but use it constantly. It's very useful if you are using the MVVM pattern. It helps with binding, commands, behaviors... I have 2 monitors - blend on first and code on second.
I agree about the first link. Heck, some of his bullet points are things that NoSQL solutions explicitly do not do because they're not relational databases.
Ahh never mind. I spelled "assembly" wrong and copy pasted it a bunch of times. 20 minutes of staring at it, how did i not see that...
Blend is a quite cool tool for front end developers. Say you want to make an animation based on an event (could be enlarging a button whilst pressing it) this is your tool. you can open your Visual Studio project/solution in Blend and make the event animations, then jump over to VS and make the business logic for that event. I hope this answers your question. 
Gotta watch out for that Assmebly...Assmebly always gonna gitch ya.
One time i spent almost 2 hours trying to figure out why this loop wasn´t running in javascript: for(int i = 0; i&lt; array.length; i++) doStuff(); Hint: there are no "int"'s in javascript.. Another time, at a faculty class, i spent another hour and a half pulling my hair until i figured out that the stupid font the compiler used to display code made the letters "k" and "K" look the same...
I've not done this using Mocks, but I do have an integration test somewhere that uses a custom Bootstrapper that sets the ServiceLocationProvider prior to running some Integration tests. Basically, we have a public class IntegrationTestBootstrapper : UnityBootstrapper That prep's for this kind of test. I'm sure there's a tighter/better way to do this with Mock and Unit Test specific areas, but for our app this allowed a more 'realistic' test. 
Depending on how much data you are trying to bulk load, you may want to abandon the concept of using a transaction, and go with nonlogged bulk copy. You'll need to alter your ETL flow to handle the concept of a failed partial load, but the speed benefit is worth it. Plus, nothing worse than thrashing your log file with gigantic commits, or setting a low batch size and thrashing it in small i/o. 
You're asking a pretty broad question. There's practically an infinite number of ways to do this. You're going to need to investigate some of the options, the trade-offs and decide which you want to persue. Off the top of my head: 1. Client connects to server using WebAPI or some other HTTP based transport. 2. Server is run as a custom service listening on a custom port. Client connects directly to this port, you handle the protocol. 3. Server is using WCF and Service Contracts, you don't handle the protocol.. 
x:Bind and the App to App communication look pretty cool.
Some people just really don't want to change. What they have works for them and that's what they want. Ask any of our customers that are still using XP why they are using it and the answer you'll get is, "Because it still works."
Get another job.
You basically need to find a way of selling them new stuff.
I'd like to ride my Iphone.
Why? Because I don't get to use the latest and greatest Microsoft toys? That's asinine. I have a great job with great pay, great coworkers, management and a sales team that actually works with us. I should throw that away because we have some big (think multinational) customers that don't want to be dragged into this decade?
Here you go: http://www.25hoursaday.com/csharpvsjava.html
We just show our customers Windows 10 on an Acer S7 (super fast laptop) and they usually tend to want to upgrade. (We upgrade for them because customers are useless) It's soooooo much easier to have everyone running the same OS when it comes to support.
That would be awesome, but we're a small software shop that pulls in a few million a year. Our biggest customer is a multinational that pulls in a few billion a year. Guess who gets to call the shots on when they upgrade?
Installing definitely affects previously compiled app; the framework is a drop-in replacement, so the old app now links against the new one. Internally, the framework contains some combatibility switches here and there, but certainly not everywhere where behavior has changed. Changed behavior should only occur when both behaviors are within the documented behavior, of course. The classic example is stability in sorting. Sorting is not documented to be stable, but a lot of code subtly depend on such properties, and had trouble when .NET 4.5 changed from a rather simple quick sort to an introspective hybrid sort. It's very hard to know how to troubleshoot. I guess I'd start with a profiler, to see where your app is slow.
Check out https://github.com/jbogard/MediatR - it'll allow you delete all your boilerplate code and achieve the same results.
The [PerfView profiler](http://www.microsoft.com/en-us/download/details.aspx?id=28567) was created by a senior member of the .Net Runtime, and is very good at tracking down problems such as this. You can generate two traces, one before the patch, and one after the patch and it should show you where your performance change comes from.
I know what an RTA system is, but they are generally big and complicated and good ones require integration with your business solutions (CRM software, phone systems, etc). You haven't given NEARLY enough information. How you expect to obtain agent states, first and foremost. Unless you plan on having a completely independent UI where the agents will have to manually click to change states, your implementation will depend heavily on what your agents do and what business solutions you use.
If you can build and run with visual studio, it had a pretty damn good profiler as well.
Thanks a bunch guys :)
Yes. Unless you plan to end your career with your current employer or to move out of programming. Otherwise your career is pretty much fucked. 
This is more or less how we do it. Once we have an IMessage we can use our container to request instances of type IMessandler&lt;ourMessageType&gt; using some light reflection and then handle the request that way.
Very cool. Thanks for sharing. Will be checking this out very soon.
Thanks! Let me know if you like it!
It's a 2 hour course, and you can sign up for a 10 day free trial. I'm also giving away a few 30 day unlimited passes. I'm just proud of my work and want people to find it.
It's the first time I've used it and it works really well. I'm using it in a command/query/response pattern. My controllers are now just dispatchers to the business layer and figuring out where to go next. Although it has been interesting convincing my new .net shop to use stuff outside of self written code!
dosent seem like it, here is the output i get when i pass the whole line to a messagebox http://imgur.com/v0qafnR
now there is no error, but it still dosent seem to import. what is the diffrence between adding a " with \"" or "\"" ?
The space in the switch - between the "/" and "importprf" - looks odd. But what really doesn't look right is that you're importing the prf file from a Temp folder.
Pretty much the same here. Although I register IMessageHandlers at run time with reflection.
&gt; now there is no error, but it still dosent seem to import. Have you tried it without the space between the / and importprf? Process.Start("OUTLOOK.EXE /importprf \"" + Path.Combine(Path.GetTempPath(), "Mail.prf") + "\"");
Technically (i.e. by definition), *refactoring* only changes internal stuff, without changing external behavior. This can be verified with unit tests. We all tend to use the R-word from time to time to refer to any changes to the code, though. If you haven't made any changes of value for the end user, I would think the cost of doing a patch far outweighs the benefits. 
yes same problem. the file cannot be found problem. i also tried with the full path for the outlook exe. it gave the same error... Process.Start("C:\\Program Files (x86)\\Microsoft Office\\Office15\\OUTLOOK.EXE /importprf \"" + Path.Combine(Path.GetTempPath(), "Mail.prf") + "\""); An unhandled exception of type 'System.ComponentModel.Win32Exception' occurred in System.dll Additional information: The system cannot find the file specified
Nice popup mate Enjoy the downvote
I will give this a try as well. 
&gt; That would be handy. No, it's a type safety issue. The whole point of reflection is that it's runtime parsing of types. += is a method which means the compiler must know that the method is type safe which it doesn't if you're obtaining its return type and parameters at runtime. Just like you can't invoke a method obtained by reflection using type safe syntax, you can't assign to an event using type safe syntax. There's only select applications you should be using reflection to attach to one assembly from a class library. What purpose do you have to violate encapsulation in this manner? The only thing I can think of where this would be truly justified is for having a generic class in your library with which you can run event logging diagnostics on events in any assembly.
Linq is so cool.
There is no difference, in both cases I'm adding " via \". In the first case, we're already in a string literal, though, which is why there is no starting ".
He's saying: It looks like importpfr could be an *option* to outlook, which normally would mean you'd pass it as /importprf with no space.
&gt; Basically, I've written an application that allows data review, as closely as possible to following a three tier pattern (MVC as close as I'm capable of pulling off). The app worked awesomely... until I realized the data models are constantly different from project to project. There is no guarantee that the "Address" model for Project 1 will even contain the same fields as the model for project. One might have street address, the other not. One could have AddressID, one be uniquely identified by ParcelID and include an AddressID or not. This sounds like a legit use of reflection if you have no access to the underlying code you're interacting with. Although I'm kind of confused as to what you're talking about as you're speaking in generic terms. &gt; M that can change in the middle of a project. I use some reflection classes for this in programming in Unity - creating a completely generic field that picks it's own layout format based on the Type of the variable for setting variables of gameobjects in the editor. Databases aren't my strong suit so I'm not really qualified to help you with your architecture in that - but I've done enough reflection that I can tell you why you can never use += with an event obtained by reflection just like you have to use "MethodInfo.Invoke(object[])" for methods and can't call "MethodInfo(5.3f)" += is just a method, like how "ObjA = ObjA + ObjB" is a convenient way of writing "ObjA = BaseType.Add(ObjA, ObjB)", it's a convenient way of writing Event.Add(delegate). As it is a method, it has a return type, parameter types, and an owning class which may or may not define the method you're looking for. With reflection the compiler can never be sure of the type at compilation time so you can't use a method with this kind of syntax on methods obtained by reflection.
Well, you can do it, as long as you don't need to communicate to your actual object but instead to some instance of your loaded assembly apart from any that you created with Activator.CreateInstance(). **this** will be null. It looks like a messaging queue is the only way to do it.
I suppose if your view is that you have to be on the leading edge of technology to stay employed then that's true. Somehow I've successfully managed to build a career out of supporting apps that are not the leading edge for fifteen years. I think I'll be fine.
Powershell. http://thesurlyadmin.com/2013/04/04/using-powershell-as-a-telnet-client/
...exactly what I've been looking for! Thank you. 
You can try renaming the executable that's locked. I've had mixed results depending on the server. In the case of Samba file servers, I could also bypass it and rename/move the file from WinSCP or the command line. One other possibility would be to make a launcher .exe or script that just runs the latest version of the main .exe. That would allow you to use versioned filenames without breaking people's shortcuts.
Question: What is the requirement for not running it on the desktop?
I think they just don't want anyone using an outdated copy of it. It's department of defense so everyone wants everything as locked up tight and restrictive as possible. So first thing I do is check to see if the file is being ran from the shared drive and if it isn't - closes down and emails their supervisor. 
One other thing you might add add, for people who leave their computers and programs running 24/7, is an update check within the program, to force an exit if it sees a newer version of itself on the network share. Mine just does it once a night, exiting silently, and nobody really notices.
I PMed you.
Good idea. Thanks for the input. I'm sad to say I never even thought to track version numbers!
He didn't say not to divide up responsibilities, just that the business logic layer shouldn't be reaching into the presentation layer. Pass the values you need into and out of the business logic, don't rely on the logic to read from or update the text box directly.
ps great book. I just finished it and it helped me a lot. tho the last 30% of the bookis something i won't need - just yet at least. 
This. For webforms, you need to use session or viewstate. Variables do not persist the way you're expecting. 
Well other posters are correct in telling you that separation is good, but things should be loosely coupled. Your new class accesses the textBox field of your form, which means it's dependent on that form and thus tightly coupled. However, it seems to me that you are still rather new to code design (I apologize if you are not, I'm not trying to offend you or anything). The actual issue here is that you are attempting to access the textBox field as though it were static. Form1 is the name of the class, but the textbox you are trying to access is a member of an *instance* of that class. See here: string emailText = Form1.textBox_email.Text; // illegal, textBox_email is not a static field // you need an instance of the form to access the text box Form1 myForm = new Form1(); string emailText = myForm.textBox_email.Text; // This is legal Now the instance of your form is probably located in a file called Application.cs, but you probably don't need to worry about that. I'm assuming that you are creating an instance of your other class inside the code behind of your form. What you will need to do to get your example to work is something like this: // Pretend we are in your code where you are instantiating your other class OtherClass myOtherObject = new OtherClass(this); // Pass an instance of the form into the Constructor for that class // -------------------------------------- // Now pretend we are in your other class private Form1 _myForm; public OtherClass(Form1 myForm) { _myForm = myForm; } // Now you can access that text box inside the other class like so: string emailText = _myForm.textBox_email.Text; I hope that makes sense to you. But something to keep in mind is what I said above, and the other posters have said. You should look up the MVP design pattern to learn how to separate your concerns in a widely-accepted way.
I'm going to be 100% honest with you. Its not for lack of experience but I'm not sure exactly what you're asking. Are these 50+ mini apps all in the same program or source code? Or are they each separate programs?
They're called live tiles. 
Thanks - had trouble searching for them due to not knowing their name.
Everything is even in the same class/namespace/cs file. static void Main(string[] args) { MainMenu(); } From there I have only MainMenu() for handling menu, and all the rest would be for separate public static void MiniApp() {} What I'm looking to do is to somehow return the current app were in, to restart the function, but trying to reduce the code. I've been manually copying the last finalizer text to each and every miniapp - and sometimes it takes the biggest part of the whole code. public static void ThirdDigitSeven() { /* Write an expression that looks for a given integer if its third digit * (right to left) is 7. */ // Easy way is the double divide, but it will work only on triple digit numbers string numberString; int number; Console.Write(" Enter number to check: "); numberString = Console.ReadLine(); number = int.Parse(numberString); number %= 100; number %= 10; string finalText = (" Provided number (" + numberString + ") last number "); if (number == 7) Console.WriteLine(finalText + "is seven."); else Console.WriteLine(finalText + "is not seven."); // Finalizer Console.Write("\n 'r' to try again | 'm' to menu | other keys - quit :: "); string finalGet = Console.ReadLine(); switch (finalGet) { case "r": ThirdDigitSeven(); break; case "m": MainMenu(); break; default: Console.WriteLine("Bye!"); Console.ReadKey(); break; } }
Oh ok. Tbh, it really depends on how you have your code set up. Without seeing the code in its entirety, I don't feel all that comfortable making recommendations. You could use a while loop in static void main if they're all in the same class..depending. You can also use ref or out depending on if these mini apps are in other methods. If you have these all inside the same method, then encasing the whole thing in several do while loops is a thing..not very efficient and kinda messy though.
The most logical would be to simply a declare a base class (MiniApp) that contains your finalizer logic. You'd then have a child class for each mini app (ThirdDigitSeven) that extends the MiniApp class. Each child class will inherit your finalizer logic, so you could simply call down to that. I noticed you said you were starting out, so may not feel ready for objects (classes). The alternative then would be to to just have a finalizer method in your current class. Remember to pass in some kind of identifier to the method so you can work with out which mini app to call when the user presses "r". A simple way would be an interview or string, a better way would be an enum.
Okay, as a continuation of what I mentioned about Autofac, here is a complete implementation with the IoC setup. I created four different Sample Apps, none of which have any logic implemented other than printing out a unique string to the console. Console application written in Visual Studio 2015, utilizing a few C#6 features (string interpolation, property expression bodies) I haven't taken the time to add in a lot of commenting for it yet, but I'll throw some in for some of the bits that may be difficult for someone still learning C# and the BCL, such as the uses of reflection. Cheers. https://github.com/noobzilla-csharp/MiniAppExample
I'm only about 20 hours in and only started learning loops, and this app is 4k lines already, so dropping it out makes no sense. I already chopped out the main components. Everything is in same class, but everything different is stored in method.
You'll find them on Windows phone too.
Here's an example using a String as an identifier: public static void ThirdDigitSeven() { // Do mini app specific stuff // Call your finalizer logic, passing in an // identifier for the calling mini app FinalizerLogic("ThirdDigitSeven"); } public static void FinalizerLogic(String lastMiniApp) { // Read key press switch (finalGet) { case "r": // Check the passed identifier and handle accordingly // in an if/switch/another method call if(lastMiniApp == "ThirdDigitSeven") { ThirdDigitSeven(); } else if(lastMiniApp == "SomeOtherApp") { SomeOtherApp(); } ... break; // Handle other cases as before .... } }
Thank you. Have to do a extra read-up on almost everything. IoC and Autofac doesn't really ring much bells, besides - I'm not even to the arrays yet. All I want is just to: keep everything in one big file, declare name somewhere (and have it ID automatically); launch by ID (extra declarations for goal and input - should be put outside of App's logic.) after launching and getting input/output, it should finalize with 3 options. I will take and use your GitHub example, most definitely. 
I'm also interested in this. I wonder what is the simplest client / server architecture.
You can greatly improve this like so: public static void ThirdDigitSeven() { // Do mini app specific stuff // Call your finalizer logic, passing in an // identifier for the calling mini app FinalizerLogic(ThirdDigitSeven); } public static void FinalizerLogic(Action rerun) { // Read key press switch (finalGet) { case "r": rerun(); break; // Handle other cases as before .... } }
Just an additional note from looking into some of your functions. You utilize the Parse method for a variety of number values, but you may want to look into using the TryParse method instead when you're relying on user input to be correct. For example, var input = Console.ReadLine(); int number = int.Parse(input); will throw an exception if the user enters anything non-numeric, like 'a1' Instead, you can do something like this: var input = Console.ReadLine(); int number; while(!int.TryParse(input, out number)) { Console.WriteLine($"{input} is not a valid number."); Console.WriteLine("Please enter a valid number:"); input = Console.ReadLine(); } The way this works is that the TryParse method doesn't return the value of whatever you're parsing, but instead returns a boolean that represents whether or not the parse was successful. I prefix the function with a ! to get the opposite boolean value, so the while loop will only run while the tryparse returns False. The out parameter means that the number parameter will be populated by the function. This way you can insure that you get a valid input while preventing a potential crash. You can then use the number variable just like you normally would going forward.
This looks like a nice library of features. I'll explore this, maybe it's got some cool stuff I can use in other places too.
There is an easy way to do this on a Windows server. Start Server Management from the Control Panel. Then look at file shares, open files. You can see every file that is opened remotely. And you can close them. Then update your exe. I do this quite frequently to manage shared .exe files.
Must be. As you say, all the others are just warnings.
&gt; I'm not entirely sure if var has an advantage performance wise It makes absolutely no difference.
Performance wise there is zero change as the compiler will put the Type in. On the other hand I believe it helps keep thinks readable specially when the return is a generic within a generic with multiple parameters taking half the width. I'd rather name my functions better and use var. SomeGeneric&lt;string, bool, Dictionary&lt;DateTime?, int&gt;&gt; result = SomeFunction(); is worse than: var result = SomeFunction(); In my opinion. If I want to know the exact type I'll either F12 into the function or hover my mouse over it. If it helps reassures anyone, Microsoft's CoreCRL coding guidelines state to use var whenever possible.
 var list = new List&lt;int&gt;(); is fine, you know that list is a List&lt;int&gt; because it tells you right next to it. var list = getTheThing(object); is bad, because you don't know what type getTheThing is returning without going to check. in fact, unless it's clear earlier in the method what type someList is, I'd say your first example is bad practice.
Does your *large object* really need to be that large? I would suggest starting splitting it in more manageable chunks, add some new components with the single responsibility of keeping track of the properties you want to monitor and another component that observes them and reacts when something changes
You see I am not very good at C# but why not try a while (true) { code }
I can't stand vars in c# It makes the code harder for others to read, many people that use vars can read the code they write fine but not having the type easily recognizable makes code harder to read by others. And since you get autocomplete anyway it doesn't save any typing either. I don't see any positives to using var, only negatives. My game studio has outlawed them (not really but everyone hates them so no one uses them)
It does make code harder to read to *some* extent, however it's certainly not as bad as you seem to be making out. From what I gather, your game studio seems to think 'var' is the Anti-Christ. Anyway, wouldn't you agree that this: var list = new Tuple&lt;DateTime, int, string&gt;(); Is slightly more readable than: Tuple&lt;DateTime, int, string&gt; list = new Tuple&lt;DateTime, int, string&gt;(); In this scenario, it's obvious what 'var' actually is, however in some cases it's not so clear, such as this: var result = from x in something where x.somethingelse == 1 select x; Or even this: var something = MyAmazingMethod(); In this scenario, I would agree with you, it would make more sense to use the actual type instead of 'var'. That being said, there is no difference other than readability when it comes to using 'var', the compiler will always use the correct type.
Depends on what everyone you work with thinks. You need to come to a consensus about it's use. I'm fine with it, but everyone I work with prefers to see the type spelled out, so I spell out the type. 
the post above is a very, very dumbed down and kind of wrong definition of CQS. It's...not good. First of all, if you use CQS with just methods that's insane. Of course you need return values sometimes. We lock things down to what's coming in and out of our system (in our case GET, POST, PUT, etc) are either commands or queries. Which they are! Really it gets as simple as "nobody expects you to make changes to the underlying data in a GET, and don't have POST and PUTs be in charge of querying too". That simple. We use it and it makes our architecture much easier to manage and rationalize. This overly simplistic example just confuses the value of it. In fact, I don't think there's any value at all as presented here. I implemented a pattern shockingly similiar what Jimmy Bogard posted here with using Mediatr and AutoMapper for the past 8 or 9 months and it has worked GREAT - https://lostechies.com/jimmybogard/2015/05/05/cqrs-with-mediatr-and-automapper/. All our senior devs have embraced it and even better the Junior Devs like the fact that it leads them into good architectural decisions. 
There are two schools of thought on this. School 1) People who prefer their code be explicit with its intention and thus prefer to define the type directly. I.e. they don't use var because it makes the code less "clear" about what type is what. School 2) Var is a much better alternative as it's much easier to refactor code later that returns to "var". I.e. if you have a method that returns a float, it can be easily refactored to return a double later. Both schools have valid points and both schools have downsides. Ultimately, what you feel is best for your code is what matters most. However, if working on someone else's code, or as part of a group, it's far better to agree on a standard and stick to it, even if it's not your preference. My personal preference: I like var, I use it explicitly where I can and I don't have issues with it. I never find my code is less clear (but then again I'm the one that wrote it). The IDE is clever and knows what type that variable is. Seeing its type at declaration, I find, is less useful as if I need to check its type later on, I'll have to mouseover the variable anyway - it's no harder for me. The benefits of easy refactoring far outweigh the cons. I personally feel that the type is often superfluous anyway, when it comes to defining the meaning of my code. Name your variables well, name your methods well and your code should be explicit enough without worrying too much about what the type is.
I use var in all the things. Why do you want to put List&lt;int&gt; there twice?
Could you try implementing the INotifyPropertyChange interface, and using custom event handlers? 
None of those are errors, even the last one is a warning. In fact, the last one will pretty much always be there as a side effect of how compilation happens in xamarin. I believe your apk is being built just fine, and you just need to find where it is and/or learn the ide better.
If I'm simply instantiating a new object with the `new` keyword, then I use `var`... because it seems silly to redundantly type the class name on both sides of the equals sign. If I'm assigning a variable from the return value of a method call, then I always declare the variable type explicitly. Personally, I think it's much more readable and clearly understandable when you or someone else skims the code later. It also helps you more quickly catch the occasional surprise.
In the codebase I work in there is a lot of var abuse going on, but with tooltips and intellisense I dont think it's a big deal and doesn't make automatically the code bad. I just hover the variable if I dont know the type and done.
When I am reading code and need to know the type to fix something, a good or bad variable name doesn't change the fact that I need to know the type. And that's the root of my issue. A bad variable name is a bad one regardless of the use of var.
Always been a Java lover, so converting to `var` in my new job was tough going. You definitely sacrifice readability, for writing faster code. Now, I don't care what the type is, and dump everything I can in `var`. It can be annoying trying to debug when you can't immediately see the type of stuff. But it isn't that big of problem.
I abuse lambdas, var, and auto (c++) like it's my job.
So where is it building the apk to? I thought it would at least show the file picker, or some kind of app signing tool, I don't know.
Any time I have to use a KeyValuePair&lt;T,T&gt; - I hate typing that out. Generally any generic with two or more types you'll find me using var because I don't want to type it multiple times. Other than that I generally don't like it as, for me, it makes the code slightly harder to read. Linq queries and foreach statements are pretty much the only time I use var. It's not really intentional - I just learned C# being very explicit in types and almost never using var, even in foreach statements. I would be breaking myself of my habit of typing out the full type for a reason that isn't really that much more efficient - so I continue to usually type out the full type.
I find that I almost never need to know the type of a variable. Either it is obvious or unimportant. On the rare cases where I do need to know the type, as opposed to just what operations it exposes, it usually means something is wrong in the design.
My professor in college said using var in their assignments was an instant zero. I didn't know if they were joking.
Of course! I knew I was missing something obvious. Thank you
Does the compiler not optimize that away?
The issue I have with that is you'd have to hover over the function (to get intellisense) or look at it to see what actual type result is supposed to be. When someone else looks at that, or even you a few months later, are you going to remember what type is coming back? Doesn't really make a difference performance wise, but IMO it's easier to know what type result is from the get go. Plus, if SomeFunction() ever returned a different type of object (say someone else edits and and screws something up) you could end up with strange things happening in your code. If you explicitly define it and something else comes back, you're going to get an error and know right away SomeFunction is returning the wrong type.
First of all, using "var" or not definitely doesn't make a good graduate. Depends on the level of the course. If this is an entry level course, people don't care about "good or bad principles", since those will be taught in later courses. If this is a course about code design principles, you can still say annotating types explicitly is still good (see for example the subtleness of downcasting to an interface instead of using var). I would agree less then though. Ultimately I believe learning to use "var" in a good way will be taught best on-site at a job, since style varies from company to company.
We'll agree to disagree. Teaching poor form to make assessment easier is just lazy. Also, I could never imagine hiring anyone that needed to be taught the correct usage of var on the job. As for casting, its a little hard not to.
Some parts of Microsoft. They don't have uniform coding guidelines. 
I *always* use it, unless I can't in that context. 
And interface dispatch is more expensive still.
&gt; When someone else looks at that, or even you a few months later, are you going to remember what type is coming back? No but the point is that it rarely matters; you'll often just type in the variable you want to do something with and type "." to get a list of "stuff to do". The actual type doesn't matter too often, in my experience. 
For me, it mostly makes the code *easier* to read since it doesn't drown in type annotation I often don't need. Less clutter, more focus on what's going on. 
&gt; You cannot ctrl+click navigate anything and you cannot hover-see &lt;summary&gt;s. You can hover on var to get the type. &gt; It adds needless navigation time. For when you need to know the exact type, sure, but that's not too common in my experience. It's far outweighed by the reduction in clutter. 
I completely agree.
Why would it matter in API? It can only be used for local variables. 
3. You have a different opinion than yours. But I agree :)
Because when you're using an API (take, for example, LINQ), you don't really care much about the actual types as much as you do their interface. So var works there. But if you were to design something like LINQ you'd be smart to be very specific and careful about exactly which types you're using; for the sake of performance, correctness, and even occasionally thread safety.
I don't understand your problem domain enough to offer sefinite answers, but keep in mind that inheritance is not always the answer. If things work fine in a base class and the object is adhering to the single responsibility principle, then it is fine. You can mark methods virtual so subclasses can optionally override some behaviors. I think abuse of inheritance is probably one of the biggest mistakes a lot of people make when developing. You can always refactor if it becomes apparent that a class really does need an inherirance hierarchy. I second the other recommendarion about DI, I think it will help you a lot.
I think you need to bbe in a release build configuration to have the apk get published, ensure you have done that.
 &lt;Window.Resources&gt; &lt;LinearGradientBrush x:Key="ButtonBackground" EndPoint="0.5,1" StartPoint="0.5,0"&gt; &lt;GradientStop Color="#FF124600" Offset="1"/&gt; &lt;GradientStop Color="#FF289C00" Offset="0.307"/&gt; &lt;/LinearGradientBrush&gt; &lt;Style TargetType="{x:Type Button}" x:Key="SameBackgroundButton"&gt; &lt;Setter Property="Background" Value="{StaticResource ButtonBackground}"/&gt; &lt;Setter Property="Template"&gt; &lt;Setter.Value&gt; &lt;ControlTemplate TargetType="{x:Type Button}"&gt; &lt;Border Background="{TemplateBinding Background}"&gt; &lt;ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/&gt; &lt;/Border&gt; &lt;/ControlTemplate&gt; &lt;/Setter.Value&gt; &lt;/Setter&gt; &lt;Style.Triggers&gt; &lt;Trigger Property="IsMouseOver" Value="True"&gt; &lt;Setter Property="Background" Value="{StaticResource ButtonBackground}"/&gt; &lt;/Trigger&gt; &lt;/Style.Triggers&gt; &lt;/Style&gt; &lt;/Window.Resources&gt; &lt;Grid&gt; &lt;Button Content="Testing Button" Style="{StaticResource SameBackgroundButton}" Width="100" Height="35"/&gt; &lt;/Grid&gt; &lt;/Window&gt; A quick google search for "wpf button background" turned up two links that showed similar code above. Here is one of them: http://stackoverflow.com/questions/20073294/wpf-button-mouse-over-change-color hope this helps.
ill try and be more clear, say you have class **Car** public class Car { public void Drive() { /* doing car stuff */ } } now you start defining all sorts of car types from **Car** some of these Cars have the capability of **IFourWheelDrive** &gt; public interface IFourWheelDrive { &gt; void StartFourWheelDrive() &gt; } so you define **FordCar**, **JeepCar**, **HummerCar**, etc. but the logic for IFourWheelDrive is exactly the same for JeepCar and HummerCar, but they **don't derive from the same base class** (completely different manufacturers etc.) . so how do you avoid copy-pasting code here ? in my example, eventually a **CarManager** class will get a List&lt;Car&gt; objects and needs to start the FourWheelDrive on those that support it. 
Take a look at signalr
My team prefers using type names over using the var keyword. I often find myself using var during my initial coding. Before a code review, I go back through, mouse over all of my vars and change them to the appropriate type.In most case, I agree that not using var seems redundant. 
I managed to fix the issue. Believe it or not, but the VS2015 now allows you to build with Xamarin Starter... Of course, nobody said anything, and I didn't get any warning message either. It just logged in to trial account that I was using with VS2013... I logged out and created new, starter account, and now there are no problems. I don't have to look at the splash screen every time I run the APK. Also it doesn't break after 24 hours. Now, other question. What are the new limitations for Xamarin Starter with VS2015? Can I share my app?
I try to avoid using var except for when working with LINQ, where it is almost a necessity. If I can't remember the return data type, I'll type something like 'int x = SomeAPICall();' and let intelisense figure out what it's supposed to be.
Xamarin does a lot of weird shit sometimes, I had a lot of WTF moments last time i used it. It is really cool but they need to get their shit together, stuff in the IDEs always seems broken. I do not know the details of the licenses, but I am sure their website will tell you and that they will be more than happy to explain the terms of the license if you ask them. 
I go by this rule: use `var` for everything **except** when the type of right-hand side of the assignment isn't readily apparently. For example this is okay: var list = new List&lt;string&gt;(); Because it's clear at a glance that `list` is of type `List&lt;string&gt;`. But this is not: var foo = Utils.PerformSomeCommonTask(); Because it's not readily apparent what type it will be from the method call alone. You could hover over the method call in Visual Studio and it will tell you the return type, but if you're reading code on say, GitHub, then you don't have that luxury. If the method call makes the return type clear (or it only makes sense for the return type to be one thing) then I use `var`. For example: var joined = String.Join( ", ", ... ); var parts = "some string".Split( ' ' ); I also usually use `var` in `for` and `foreach` loops no matter what, the only exception to this rule being non-generic enumerators in the `foreach` loop (anything that doesn't implement `IEnumerator&lt;T&gt;` or `IEnumerable&lt;T&gt;`. A common-use example is the `MatchCollection` class returned by the `Regex.Matches()` method) because `var` is inferred to be of type `object` instead of whatever type the collection actually contains.
Haven't heard them recommending it anywhere except for in a context of "don't understand what classes are but want to learn c#? don't worry your pretty little head about it...until you're a big boy you can use 'var'" They use it a lot in their documentation, but they use tables and inline font declarations a lot in their documentation and I'm not going to let that sway me.
Its not teaching bad form. It's teaching to produce easily readable , portable, and understandable code.
This is what you need to do :)
 Fruit myVar = (Pear)GetSomeFruit("MakeAPear"); // coder forgot to check type/safe-cast FunkyDevice device = Device.Create(); // Device is factory and makes the appropriate device for system IFruit apple = new Apple(); // we only interact via interface
&gt; What if GetData() is supposed to return a List&lt;int&gt;() but someone else edits your function This is what interfaces and code reviews are for. This kind of API-breaking change is grounds for a beating, unless it's for a *very* good reason and there were no good compatibility-maintaining alternatives. &gt; It's not any harder to explicitly define the type, and doesn't make a difference performance wise, so why not do it, if it has the potential to save you head aches down the road. Because of constructed generic types with lengthy type names, whose type parameters also have lengthy type names. You don't need the type name on both sides of an assignment, one works just fine. If, instead of directly instantiating a type, I were calling a function whose return type wasn't obvious, then I'd say it's reasonable to use the type name on the LHS instead of `var`, for clarity's sake, but never on *both* sides. It quickly becomes hard-to-read noise. You COULD use a `using` type alias, but then, to maintain sanity and consistency, you should repeat that in every file that uses the aliased type (since `using alias = type` scope is intentionally limited to file scope, unlike C/C++'s `typedef`). It's therefore just easier to use var without type aliasing. Also, because COM, because *fuck COM types*.
You can't save in C:\ unless the program is running in admin. Change the output directory.
&gt; the type of the variable is likely to be changed or copy-pasted to another variable (like when you make a function for int but expect to want to expand it into ulong) You should be using generics for this. Don't copy and paste code across your codebase, because the instead of changing something in one place, you almost certainly have many places to make an identical change.
Good points.
Exactly. The compiler handles the verbose version and the succinct readable 'var' version identically, so there's no reason not to.
my opinion is that every minute you spend pondering trivialities like this is a lost opportunity to think about interesting questions and challenges which might make you a better developer.
Why should var be stated at all? Why not just myList = new List&lt;int&gt;(); I'm guessing any response will involve local/global issues but imo that seems a non issue. I personally don't use var i hate it.
I find this one of my last remaining nitpicks with the c# language (along with 3/2 returning 1). You basically have to do something like you are if your object model doesn't suit single inheritance. The game developers have solved this using the entity component system. https://en.wikipedia.org/wiki/Entity_component_system
I avoid it. I prefer to be explicit. Edit: It's funny... actually, I've written action script in my career so I'm aware of the use of "var". and I always qualified my types as a point. I'm pedantic that way... but why it's funny is because as I wrote the above sentence, it occurs to me that "I" is a pronoun, is the english equivalent of "var". If I was as pedantic in english as I am in C#, I would write "Majeric avoids the use of "var". Majeric prefers to be explicit." Maybe I'll rethink my view on the subject. Can see it useful for local variables. 
&gt; var glipglop = produceGlipGlop(); &gt; printGlipGlop(glipglop); &gt; consumeGlipGlop(glipglop); I heard what you said.
And a nightmare to refactor.
Oh god yes Hey guys, I've got a function that takes seven VARs and returns a Var , it seems to take the first var and use it as parameters in an httprequest object - a var gets returned and passed into the GetStream method of a var which returns a var which is then passed into the dal and I have NO idea what's going on from there or what data types I am working with.
I'd like to hear some of these business reasons. I've worked at places where we happily used as/400 and vax systems. If they won't die, why would .net?
The "correct" usage of var varies based on the code style of the project.
Its the Nickelback of code. Just because everyone's doing it, doesn't make it right. If you KNOW what datatypes you're working with, there is no reason to use var. Its a short-cut used to make TEACHING easier, it doesn't make code WRITING any easier once you know what you're doing. Over-use of the var keywork is a sign of a programmer who isn't too comfortable with OOP methods. It makes it less readable, and vastly increases the time it takes you to learn bow to use the framework. For example, there are many code snippets that we all use a lot. Getting an httprequest object, getting an httpresponse object from it , creating a streamreader to get the data .... Blah blah blah. I know that if I have a 3rd part library that, for example, takes a stream or an httpresponse as an input parameter, I know EXACTLY how to plumb that in to my workflow. How the hell do I know what's going on if I just have a VAR? All I have been taught is that a var returns a var which I can use to get a var.
Same here. I just use it for anonymous types and long generics.
Thank you! :)
Its not a matter of .net dying, its a matter.of "handheld field device x" not having the NET framework available, or having to port the client reader to objective-c , java, or something equally mundane. Yes, you COULD just rewrite and rethink the whole app from an entirely fresh wireframe, and debug from day-1 , or you can take already proven code and port it to another language/platform.
I never use var. I also never use using in the header. And I rarely use abbreviations. I like my code very explicit. I'm strange like that.
It was made for anonymous types, then everyone started using it everywhere. IIRC, Resharper warns you, by default, to use vars for every variable, which doesn't help.
Omg, if I saw that in code I would rage, or cry... or possibly both! 
So you have a lot of properties for various potions like "IsBearPotionActive"? Maybe instead of storing it all in one class, you could instead delete/destroy/hide the player object and create a new Bear object?
Lazy 
Var all the things. No exceptions. Use better names to avoid confusion. Microsofts official recommendation is "everywhere unless it's really not obvious at all what the data is" - that's what they use for their MSDN docs, and interestingly, supersedes previous advice on the topic. Arguing about this was all the rage back in 2007/2008 though. Especially useful when you're doing type changes or broad tool assisted refactors and don't want to see tedious change deltas across a million files because you renamed a type / switched out a type with another compatible one etc.
Correct if you care about the concreteness of the class, though I think convention can override this. Abstractly, I see GetThings as returning a collection and EnumerateThings returning an enumerable. If I'm working with an array from GetDirectories, then I wouldn't use string[], I'd use var as abstractly, I just have a collection of paths.
Furthermore, work on naming things! Lots of examples in this thread have methods that are named like actions - if I see that, I expect a result object of some sorts, or void.
Compile time won't work, as the definition may change as DLLs are upgraded. JIT, maybe. They don't want to spend too much time on optimizing during the JIT cycle, but this doesn't sound too expensive.
My complete lack of performance problems and complete abundance of codebase readability problems?
except you can't declare functions to take parameters of type var, so your example is completely BS. 
Academia is full of stuck in the mud attitudes, after all
I'm not sure you know how strongly typed languages work. 
Seems to me like he's an idiot who started out in Visual Basic back in the day. It's the same kind of people that are convinced it's better to use notepad than to let the IDE work for you. Computers were build to help us not the other way around. Letting the IDE do type inference, and many other things, so you can focus on solving the real problems is not a bad thing. Let me elaborate: A lot of those people think "var" in c# means the same as in Visual Basic, where it means a variable doesn't have an exact type. var x = 1; x = "hello" Is perfectly valid in languages such as Visual Basic. In languages like this, most of the time, you need to avoid using it. In c# it's something completely different. A lot of so called professors I've worked with don't understand this at all. They learned something once, 30 years ago, and never learned anything new.
So the way i have it currently isn't that bad? thats good to hear :) little new at this I am using XML serialization to save elsewhere, just had not thought about using that with a dictionary (elsewhere it is used to save a List&lt;T&gt;), would it be just as simple?
I appreciate your example. Mostly because whenever I am typing something out and need a variable name... it's bob. If the code stays then I will change the name, but long live bob the variable!
http://pastebin.com/3Gwq73k3 I did a version of it myself, with a linq and non-linq approach to saving and loading. Hopefully it's easy to follow.
For what it does, the code looks alright to me. I suppose you could read the file in chunks and use a StringBuilder to save unnecessary string allocations and memory, but unless the options file contains hundreds of thousands of options or is too large to fit into memory at once, it's not gonna make a measurable difference in efficiency. I'm not sure why you turn the `Split()` array into a List&lt;string&gt; and why you replace the (non-existent?) colons after splitting, however. My major concerns would be: - Type safety. Everything is a string, so you need to remember which option is supposed to be which type and convert them all the time. If you have more than strings and bools (especially dates and floating point numbers), it's also easy to introduce subtle culture-related bugs. - Error handling. Currently there is none, so a corrupt options file will presumably just crash your app again and again if you load it on startup. A partial but technically valid options file may also lack expected options and could cause problems or exceptions later on. - What happens if you want to store an option that contains a : or ;? E.g. a file path with a drive letter And you're really re-reinventing the wheel here. .Net already comes with a decent [settings system](https://msdn.microsoft.com/en-us/library/bb397750%28v=vs.110%29.aspx) that can handle type safety, serialization of arbitrary classes, user and machine-level settings, resetting to defaults, automatic generation of a settings class with properties so you don't have to deal with dictionary keys, and a bunch of other stuff.
No, the correct usage is provided by best practices from Microsoft. Sure project specific styles will be enforced, but they deviate from the 'correct' or 'recommended' way, rather than define it.
Edited for clarity, ok I'll probably switch over to xml serialization as I know how it works pretty well
And they often do :-\ 
And using var as mentioned above has nothing to do with that...
Oh god, my Java professor back in the day pretty much demanded that no one use an IDE. You know, so we could learn to develop like professionals... I used Eclipse because I had no need to revisit command line compilation. Learning the tools is just as important as the language.
Vars and anonymous types seem to be necessary for some of C#'s capabilities, and I've found them useful for sometimes avoiding type mismatch problems, but none of that changes the fact that somewhere in the recesses of my mind there's a scowling comp sci professor glaring at me each time I use one, and he's right.
This is an interesting post because your preference was my preference until pretty recently. I always preferred to be explicit because it helps to clearly, unambiguously show what is happening. I always saw var as a lazy choice that hides some information. But now I have a better understanding of the language, and of the .NET types, I feel better using var - because it's quicker and simpler, and if the compiler can infer the correct type so can I. It also makes me more vigilant (as an amateur with no style guides or formal training) to name things well. var soccerTeamList= new List&lt;SoccerTeam&gt;(); Seems perfect to me now.
 foreach(string s2 in split) { s2.Replace(":", string.Empty); } This code does nothing for two reasons: You have already splitted away ':' in the strings, and replace is a *pure* function **and** strings are immutable. Calling `Replace` on a string returns a version of that string with that value replaced. It does not change the string you call it on. In any case there is no reason to put this into memory before processing it. Here is an example that should do the same thing as your code: http://pastebin.com/QWP8jg9t
Same here, but without exceptions. I use it everywhere the compiler will let me. I sometimes even go as far as doing this: var x = (string)null; Just to make it align better with other variable declarations. I have never come across a situation where I miss the explicit declaration. I can hover over it to see the type, and I can get the definition by F12 as usual. 
Like all patterns in software development, there really isn't any right answer, but I would avoid using CallerMemberName for this use case because you're now depending on a contract from another piece of code that isn't being enforced by the type safe compiler. I'd try to only use this attribute for things like logging not stuff that impacts your actual code execution. What happens if the names change or a new one is introduced with a different naming structure? It may never happen but your program would break suddenly at runtime. Also it's not very clear from the code what it's trying to do. Code is write once, read many times. Ultimately it should be easy to read and not have any tricks in it.
I'd say no. Your parsing could use a little work but honestly, I love little tricks that reduce code volume like this. Source: ~10 years experience with C#
Then I don't understand the scenario. You can control the implementing methods of an interface but not the base class of these classes? That's not how OOP is supposed to work.
I have used json to store settings in a lot of my private projects. You can see it on http://pastebin.com/m4SxAhNH What I find great about this is that the code fairly simple to read, easy to expand and it gives a strongly-typed access to your settings. This assumes that you store the .json file in the same directory as the application and you have permission to read/write to a file.
I use `var` for almost everything. Exceptions being mostly where I cannot use var (such as declaring a variable before assignment). However in my experience you don't need to know datatypes to understand what some piece of code does, and very often it can actually get in your way. Examples being dictionaries or lookups of data for processing. They tend to produce hideous typing, but the typing itself doesn't matter actually. It's more about what the code does. You infer how a method works by reading semantics, not datatypes. The explicit implementations of methods or variables usually doesn't matter that much. Even with methods where the return type isn't immediately clear good naming can do a lot more than explicit variable definition does since a variables name will follow each usage whereas its datatype must be looked up which coincidentally Visual Studio can already do for you on inferred types as well. So I use var when it saves me some punches, or when it is beneficial for refactoring.
Learning academically is - and should be - much different to learning professionally. Someone can easily work out how to do stuff by trial and error using a nice IDE without ever learning the actual fundamentals or really having a meaningful understanding of what they're doing. As /u/bossfong said it's just to make sure the students demonstrate their understanding. The professor isn't saying "never use vars at any time in your life", he's saying "use vars in your assignments so I know you understand what's happening". It's similar to "show your working".
Thanks for your response, that makes sense. And If they introduce new colors without folowing the same naming structure my code will not work. However theyve developed a huge predefined color palatte and id guess they wouldnt be adding more
Fire up NuGet and check out the HTML Agility Pack it is designed for web scraping
I am gonna guess that it is Winforms because it is that old, before WPF came around. But I will give them credit for actually keeping up to date with .Net versions. I wonder if they actually take advantage of 4.5 features besides just making it compile
Eric Lippert has this to say on the topic http://blogs.msdn.com/b/ericlippert/archive/2011/04/20/uses-and-misuses-of-implicit-typing.aspx 
I use var pretty much all the time. The only time I DON'T use var is when I need to declare a variable that will be populated in an inner scope, such as a using, or an if/else combo. Ultimately, I find code more readable in all cases w/ var, since I usually don't care about the type itself in any particular context, merely the actions, methods being called, and properties being accessed. If I REALLY need to see a type, I can hover or push F12.
 shutdown /? reveals several options: /s Shutdown the computer. /t xxx Set the time-out period before shutdown to xxx seconds. The valid range is 0-315360000 (10 years), with a default of 30. If the timeout period is greater than 0, the /f parameter is implied. /c "comment" Comment on the reason for the restart or shutdown. Maximum of 512 characters allowed. /f Force running applications to close without forewarning users. The /f parameter is implied when a value greater than 0 is specified for the /t parameter. So something like Process.Start("shutdown", "/s /t 0 /c "Forcing shutdown because security violation" /f"); would effectively shut down the computer instantly (I would test it, but I don't see why it wouldn't work and don't feel like rebooting).
Yeah but you can hover a ~~car~~ var or auto and it will show you the data type ... 
I have stopped using it on numeric types, because they all implicitly cast to each other.
That would still finish writing to the disk though, and wouldn't it be a clean shutdown from the view of the os?
Only in safe directions.
They dont, ever This is about adding functionality withouy copy pasting code AND being able to recognize said object has this functionality
Why would someone with intent to steal do that? 
Thanks!
So far the course is really good and I enjoy the pace. We've been using asycn on our projects for quite a while but you make some great cases for why you would want to implement on a new project.
How long until we start hearing ridiculous Stephen Hawking "quotes" in EDM tracks?
Derp. On my phone.
Why not just use group policy to disable all removable drives?
Below you said you're doing this for security purposes. You may want to look into making your own [kernel mode driver](https://msdn.microsoft.com/en-us/library/windows/hardware/hh439665\(v=vs.85\).aspx) and throwing a 0xDEADDEAD bug check from it. You'll need to do this in c++. You can communicate from user mode ( c#) to kernel mode using the Minifilter framework. You could make a "BSOD" driver that waits for a message from your C# app, and then throws a custom BSOD. A bit more involved, but won't require Debug ( admin ) permission on your app to do the previous mentioned hack.
I really enjoyed this deeply insightful comment.
Did you ever have to write some code for a test with just pencil and paper and I mean not on a computer at all? 
I think you need some sleep. &gt; For Delegates, I get that They are a theoretically I'm not really sure what that means. Do you mean theoretical in the sense they are abstract? A delegate is basically a function(s) pointer(s). You define the method signature, I pass in a method, you call my method. You can find uses for that in pretty much any system you build. Think of an event system used in EF to notify subsystems of repositories updating or saving changes. As a form of concurrency using multicast delegates. With regard to your database design, why not just add a new column for "Discontinued". Make it a nullable datetime field. You can track when it was discontinued. Encoding an integer that happens to be the index of production descriptions to "mean more" than simply a unique identifier is a form of "data hiding" or magic numbers. I don't see the need for it. Why make it so obtuse? Having to know 1-999 is a best seller, vs simply having a new column, with # of units sold, or some other metric. Then have thresholds for what constitutes a best seller. The database likely shouldn't keep track of something is/isnot a best seller. It should keep track of the data necessary to determine that calculation. It sounds to me like maybe you are missing some fundementals. If you are changing one part of your system, and then EF is breaking or WPF breaks, then you may not have your design laid out in the best way. Maybe take a step back and try to explain to us your design choices. You might be coding from the hip with too many new technologies and at this point, need to consider taking a step back and revisiting your core assumptions. 
Did you learn about internal combustion engines and motors in college?
The Microsoft guidelines are sensible and make sense. It always best doing what is considered "the standard" unless you have good reasons. In context of the OPs post, most people would say it is a good starting point.
I would bet that there are ways around that. also, i like this idea. 
As long as the users aren't given excessive permissions, it's pretty watertight. You can even allow data to be read off external devices without allowing it to be written. At which point the only way around it is the pen-and-paper route.
Hello! Youre on the right track here. Animating the ellipse's opacity is easy. MyEllipse.BeginAnimation using a DoubleAnimation(UsingKeyFrames if youd like), targeting the OpacityProperty. Animating an ellipse's position depends on what type of panel its on. For example, if you've placed the ellipse on a Grid and set the Vertical/Horizontal Alignment properties, youll want to use a thicknessanimation to animate the ellipse's MarginProperty. If its on a canvas, you may choose to animate the Canvas.Top/Bottom/Left/RightProperties, whichever applies to your ellipse's horizontal and vertical positioning. Also, you cannot directly set two RenderTransforms. However, WPF offers a lovely class called [TransformGroup](https://msdn.microsoft.com/en-us/library/system.windows.media.transformgroup(v=vs.110\).aspx) that allows you to assign a collection of Transforms to a single property. The visual is recursively evaluated through each transform in the the TransformGroup. I tend to not use RenderTransform to animate an object unless its really necessary, especially using multiple transforms. Youll have a more difficult time getting the result you want. Id try to stick to animating the MarginProperty or Canvas attached properties. Hopefully ive helped! Let me know if you want more detail about how to trigger the animations and keep track of them. As a side note for multiple overlapping animations, you may want to look into Storyboards! however, you'll need some helper classes to create these cleanly in c# code.
what are you using rendertransform for?
I still like being able to do this on demand, if nothing else to screw with my friends.
Ha, no. That was probably the furthest thing from my department's curriculum / outlook. Well, didn't learn about them formally in the classroom. Learned about them by doing.
For the movement of the Ellipse. Here is my current testbed code for moving object, this does not include the Opacity code. It works fine, though needs cleanup to work in the app, but that's not important here... so I don't know why I bothered mentioning it. Anyway... This example in XAML could also be a help: https://social.msdn.microsoft.com/Forums/silverlight/en-US/3ccab40c-5f50-4b04-8743-37871c52a642/pause-in-xaml-code-at-a-keyframe-using-doubleanimationusingkeyframes?forum=silverlightarchieve But I'm going to start fresh tomorrow NameScope.SetNameScope(this, new NameScope()); double dBubbleOpacity = 1.0; double dSize = 100; Ellipse Bubble = new Ellipse(); Bubble.Width = dSize; Bubble.Height = dSize; Bubble.Stroke = Brushes.White; Bubble.StrokeThickness = 5; Bubble.Fill = new SolidColorBrush(Color.FromRgb(0, 0, 255)); Bubble.Opacity = dBubbleOpacity; double dStart = 700; double dTop = 400; BediaBubbles.Children.Add(Bubble); Canvas.SetTop(Bubble, dTop); Canvas.SetLeft(Bubble, dStart); TranslateTransform animatedTranslateTransform = new TranslateTransform(); Bubble.RenderTransform = animatedTranslateTransform; this.RegisterName("AnimatedTranslateTransform", animatedTranslateTransform); DoubleAnimationUsingKeyFrames translationAnimation = new DoubleAnimationUsingKeyFrames(); translationAnimation.Duration = TimeSpan.FromSeconds(10); translationAnimation.RepeatBehavior = RepeatBehavior.Forever; translationAnimation.KeyFrames.Add( new LinearDoubleKeyFrame( -500, KeyTime.FromTimeSpan(TimeSpan.FromSeconds(4))) ); double dNext = 500 + dSize; translationAnimation.KeyFrames.Add( new LinearDoubleKeyFrame(dNext, KeyTime.FromTimeSpan(TimeSpan.FromSeconds(5))) ); dNext = 0; translationAnimation.KeyFrames.Add( new LinearDoubleKeyFrame(dNext, KeyTime.FromTimeSpan(TimeSpan.FromSeconds(10))) ); Storyboard.SetTargetName(translationAnimation, "AnimatedTranslateTransform"); Storyboard.SetTargetProperty(translationAnimation, new PropertyPath(TranslateTransform.XProperty)); Storyboard spBubble = new Storyboard(); spBubble.Children.Add(translationAnimation); Bubble.Loaded += delegate(object sender, RoutedEventArgs e) { spBubble.Begin(this); };
Identity theft? ;-)
http://www.codeproject.com/Articles/28725/A-Very-Easy-Introduction-to-Microsoft-NET-Speech-S If you're signed up, you can download the demos at the top. I appear to have a female voice at the moment - a *little* more sophisticated than SH's... I wonder where the old version is online? It doesn't take much code at all, it's all in the framework, and voice packages you can download... look at the example: https://msdn.microsoft.com/en-us/library/system.speech.synthesis.speechsynthesizer(v=vs.110).aspx Here's an online one that sounds a bit like SH's: http://codewelt.com/proj/speak
It's much nicer for data binding. ... that's all I got.
According to the Documentation: curl_setopt($ch, CURLOPT_HTTPHEADER, array('apisign:'.$sign)); you need to set a header Request.Headers.AddHeader("apisign: ", sign) I think...
Can you give us some real (eg. more than one services and classes) code that shows how the services will be called? To me, that code will be overly complicated. Simply because you have to always check if object implements a service before calling it. Reason why inheritance or mixins are in compilers is because compiler can check for you that you are calling a method that exists. You don't get that luxury in your design and any possible error happens at runtime. Also, main reason why multiple inheritance/mixins exist is because the inheriting object wants to interact with multiple different behaviors at once. For example if class has both ObjectScroller and ObjectContainer, it might change how the contained objects are rendered based on what scroll state the scroller is. How do you handle this kind of situation?
Also. I see you use var hmac = new HMACSHA512(Encoding.ASCII.GetBytes(ApiSecret)); Are you sure Encoding.ASCII is correct? I look at my code and I use Encoding.UTF8. Just a thought if you checked that the header indeed WAS set as per my other post.
&gt; I have done some research now and saw that it might not be a good idea to apply thru a recruiter because they'd take a chunk of my salary for their commission No, they don't take any of your salary for their commission. Some recruiters fees are based on your first year salary, but not all -- and it never comes out of YOUR salary, it is an expense to the company, and companies are happy to pay it. Generally the fee is delayed some amount, so after you have been at the new company for maybe 3 months, the recruiter will get a fee payment that is either fixed or a % of your first year salary. &gt; and they have some kind of contracts where I might have a harder time finding a job in the future. Now, I legitimately have no idea what you are talking about. Using a recruiter will not make you have a harder time in the future, recruiters are par for the course in the IT industry. &gt; Should I go to this recruiter interview this week or not? Recruiters (both internal an external) are a standard part of working in IT, better get used to working with them. Find ones you like and they can be good assests for years to come. 
the url in this line is the same as before and nothing is added (no param and the same base + apikey=...). and when i changed the base url to ....balances... which doesn't need any parameter it gives me "Invalid apikey or apisecret" error. i tried "UTF8" and got the same error , i think ASCII is the correct way to go.
is this how the url that i send as request should look like: https://bleutrade.com/api/v2/account/getbalance?apikey=MyApiKeyGoesHere&amp;Param0=Value0&amp;TheCharactersThatgenHMAC()Produced also what part of the whole url should i sign with the ApiSecret. the whole url starting from https or the part starting with "getbalance"
You need to set a Request **header**, not the url. Did you check that the header is included in the request you are sending?
oh i though the url that i send changes like the public url that i used before. anyways i placed a break point at where you said and client has this https://i.imgur.com/mD7sPfZ.png
None. They are identical but to use String you need to use System namespace.
It's still best if you can get hired without going through a recruiter. It gives you some negotiating wiggle room that you wouldn't have otherwise. So if I'm looking for a new dev, and I post on indeed and ask some recruiters to look as well. If candidate 1 comes through a recruiter asking for 60k vs candidate 2 coming through indeed asking for 65k, it's cheaper to go with candidate 2 usually (which only matters if they are equally matched in other ways). That being said, it's generally not a deal breaker and it's part of the "cost of doing business" as they say. It's pretty rare that that amount of money will matter to the company, but you can usually ask for a little more if you found the company directly as they'll consider that percentage lost already - you just need to know some of these variables, which is sometimes not possible. 
DC here, similar salary ranges for .net folks on our end. OP, what you're suggesting seems low unless this is your first programming job period and you don't have a degree. 
I agree with, and at work we have in our guidelines, using "string" for declarations and in typeof, and "System.String" (usually not qualified) when accessing static members. But this varies a lot. Some people use string always, some use System.String always. 
There is another "difference", see my other reply. 
&gt;They asked me for a salary directly and I said that since 60k seems pretty average, 40k-50k seems fair. Ouch. 40-50k is poor, even for the Midwest.
Oh I didn't know that. Good to know, thanks :)
Go to the interview for practice, but in no way should you take the job. Never undercut yourself in salary negotiation. The goto document on this is [here](http://www.kalzumeus.com/2012/01/23/salary-negotiation/)
I would just use [Json.NET](http://www.newtonsoft.com/json). To serialise, you just use `File.WriteAllText("C:\Path\To\Settings\File", JsonConvert.SerializeObject(options))`. To deserialise, you just use `JsonConvert.DeserializeObject&lt;Dictionary&lt;string,string&gt;&gt;(File.ReadAllText("C:\Path\To\Settings\File");`
I have just begun doing some networking so that when I want to move to a different company, I may be able to circumvent the use of third party recruiters. Many companies have "corporate recruiters" that work for them, which are a little different beast because they are trying to negotiate on behalf of the company rather than your behalf. At least that's been my experience.
Its better for (almost) everything. The layout system, rendering system, dependency properties, dependency injection, mvvm is better, the forms designer is awful (no precision... takes forever. Xaml has its fair share of issues but its really the way to go) dont put off learning wpf. Its worth it
Yeah, I agree with you. Sometimes budgets don't make mathematical sense. There's a hiring/salary budget and 3-6 years down the road is not part of the equation yet. Not saying I disagree with anything you said. Good points. 
I like the popup ad that is too big to close out of on a mobile phone
$60K is right in the middle in this area for a dev with no experience. Some in the city may pay and some in the suburbs may pay less but it isn't too far off from the norm out here.
I've always had good luck with recruiters. And nothing is ever based as a cost to you, it's a cost to the company. Unless you have 0 skills I'd feel like 60k is the MINIMUM I'd accept for a job given your area. Don't let your own insecurities make you take a hit to your salary. I'm sure you're a much better coder than you think you are (I find a lack of confidence to be common among new coders). Programmers are in high demand so the scale is weighted in your favor. I wouldn't even see it out of the realm of possibility for you to be making 70-75k starting out, if you're working in Chicago. 
Here in Richmond, I can get a just-out-of-school dev for about that much. In Chicago, that sounds low. Just looking on Indeed, it looks like $65k to $75k on average, with the median being $71k for the area. As far as the contracts making it harder to find a job thing. Some recruiters have a "non-compete" style contract. Basically you can't work with other recruiters while working with them and if they send your resume to a company and you go out and find the job on your own, send your resume, get hired, etc. they get their commission. Some do that, some don't. The key is to read the contract, ask questions, and research the recruiter. But it's usually nothing to worry about. Now the non-compete, NDA, etc. that the company you end up working for may have you sign will have a bigger chance of screwing you in the future. And yes, go. If nothing else, it's practice.
With the contracts, I think he means the tactic of recruiters setting you up for a six month temp to hire, only to have you change jobs after six months are up. I've heard this is a common practice with recruiters so they can keep milking you for commission. You get stuck in this cycle of having a new job every six months (or so) and never become an FTE. As long as you're firm with the recruiter that you only want direct hire, this won't be an issue. If a recruiter insists that most jobs are temp to hire and there aren't a lot of direct hire positions, you might need to find a new recruiter. 
In chicago? I live in an area where the cost of living is a lot lower (so salaries are) and I was making 40k a year before I even graduated. 
The recruiter should not be taking commission from your salary. They charge the client (your employer) a percentage of your salary as their fee. Of course, that does create incentive for the employer to lowball your salary in order to reduce the fee they have to pay, so ultimately the net effect may on your salary is similar. As far as whether you should use a recruiter or not, it really just depends on the reputation of the recruiter and the firm. Some firms rely on repeat business and word of mouth, so they usually have better opportunities, better client relationships, and better reputations. But other firms are just the opposite - they don't care about you or the client, they just want their money. You want to seek out the former and avoid the latter. 
On a related note, I don't know why I do this, but I always use Boolean instead of bool despite the fact that I use string and int instead of String and Int32. I just don't like the look of "bool" for some reason.
Not for everyone, I refuse to use them when hiring new staff. I really can't understand why so many companies use them, is it really that hard to post a job on dice and read through some resumes? They are equally annoying as a job seeker because you generally don't even know what company you are applying to.
I replace the word Recruiter with Vampire in the context of helping me get a job and it really puts things into perspective. I avoid them. &gt;Vampires are a necessary evil. &gt;Vampires are what the IT job market runs on. &gt;I have done some research now and saw that it might not be a good idea to apply thru a vampire... &gt;Should I go to this vampire interview this week or not?
I was just going to say this and I'll add: 1) Nobody hires the 2nd candidate over 1st choice. That's just pure crazy. If you do, then obviously they weren't you number one choice. 2) Even with the expensive finders fee, its a onetime fee. A $5k bump in salary is forever. And benefits are based on this so they are now more expensive too. 3) Not coming from a recruiter gives you NO bargaining leverage whatsoever. 
No.
&gt; I'm sure there are bad recruiting firms (ones who don't properly screen applicants, or fully understand the industry they are recruiting for). Far too many, in fact. The best IT recruiters have a technical background. The decent ones are intelligent enough to learn some high-level concepts. The median, though, are the ones playing buzzword bingo with your resume or sending out blanket cold contacts on LinkedIn.
Roughly translated to "fuck the guy that has to maintain this" You should write code to be as explicit as possible, because (unless it's a pet project) some other poor mug will have to deal with it.
Thanks, I've heard those have good, easy to use APIs, I'll check them out.
This is not common practice, at all. 20 years in industry, I have never seen this happen. This is a level of control recruiters simply don't have. Once a recruiter gets on onsite they have no power at all and generally no contact with you. You aren't a recruiters slave, they can't force you to do anything. They have no way to pressure you into switching jobs every 6 months. Also, temp to hire is the norm not the exception, it gives a company a safe way to try you out for a few months -- and generally, if they like you, they convert.
Yeah. I edited my above post to include my starting point, a more general overview of authentication which seems to include good depth but covers a lot of stuff I don't want to / doubt I need to implement from scratch. I'll look into the WebAPI authentication. Are there any other frameworks that I might need to supplement with that, or is that pretty robust for user registration / login-type support? On the JS UI bit- this is actually permeable and I should edit my post to reflect that. I've already written most of the backend code, and I've written a number of single-page applications with that general JS UI -&gt; Web API architecture, but it's not set in stone. Given that I can use server-side binding to the UI if it's superior, is that the best way to deal with secure authentication? 
&gt; It's still best if you can get hired without going through a recruiter. This might be so, but it is often much harder. Good recruiters have networks of people established relationships. 
&gt; However, be aware that recruiting companies are not looking for your best interests. True, but the nature of the relationship makes it very easy for YOU to look out for your best interests. Recruiters don't want to waste time on a deal that will fall apart at the end, so be SUPER clear about your needs: $X, Y vacation, Z benefits, etc. Recruiters will only try to hook you up with good fits because they don't want to waste a ton of time on a bad fit. Just because they don't work for you doesn't mean you don't have power -- you have the power to waste their time and scuttle deals, which is non-trivial and hurts their reputation. 
&gt; is it really that hard to post a job on dice and read through some resumes? Yes. Last time I did an open call I got nearly 3000 resumes. Just doing a first pass "throw away the laughably bad" took days. Working with recruiters, you can tell them things like "bring me any unqualified applicants and you are done for this round". Honestly, directly applying to many of the places I have worked at is like throwing your resume into a garbage can. If you actually want the job, find the recruiter they use the most and go through them... that relationship will work a vouch for you and help immeasurably. 
&gt; Find ones you like and they can be good assests for years to come. Such a good piece of advice. Recruiters can be great if you let them know what you want and tell them to weed out the junk. Keep a good relationship with them and you will occasionally see great opportunities. You should also have 2 or 3 that you work with as companies often have agreements where the recruiter cannot approach you again with jobs after they have placed you. Some of them will try to throw every job they can find at you, regardless if it meets your salary, skill requirements, and location needs. These will waste your time, cut these out of your communication if they don't improve. tl;dr recruiters are like an automated search, use them to advance your career.
I can't disagree more. I have wasted endless hours interviewing for jobs or talking to recruiters that are a 0% chance of fitting. I'm a .net, sql, back end business, senior developer. I've been on interviews where the company was looking for a nuget specialist and build engineer. They dont understand that Java != C# and ASP != ADO. So I have no idea where your respect for a recruiters ability to *place you* came from but I have 0 faith in recruiters doing anything but showing me job offerings and arranging interviews for jobs I'm interested in. Other then that they are practically worthless.
&gt;Good recruiters these are exceedingly rare to find in my experience. It's true that some places won't hire without going through a recruiter, so sometimes it is a necessary "evil." I'm referring to the general "technical recruiters" - I have met a lot of really good recruiters that work at specific companies. They are trained on the product/skill set and can evaluate candidates to actually filter before technical interviews. Unfortunately, you don't normally get that with the general IT staffing companies - they just want to flip good enough candidates. 
I'm surprised you're not familiar with this. It almost happened to me twice in my last job search. What usually happens in this circumstance (I've been told) is that during the temp period, you work for the recruiter. So you are employed by the recruiter and contracted to the interested company. Then at the end of the temp period, the company can opt to hire you. I think this is where the shady stuff happens. So in this scenario you are very much under the control of the recruiter. I suppose one thing you can do to avoid this is in a temp to hire situation is to ask "during the temporary period, who is going to pay me?" If it's the recruiter, you may be getting into a situation like this. 
&gt; Given that I can use server-side binding to the UI if it's superior, is that the best way to deal with secure authentication? I'm not an expert and am interested to hear other people's take on this. As far as I know, there is no reason that you can't create the UI server-side, then just use a WebBrowser control to display it. I've done the same in the past using Stripe and it worked well for me.
No, the folder you are looking for is under C:\Users\UserName\AppData\Local\Packages\ApplicationPackageName.
I am a founder now (formerly over 15+ years as a consultant) and in both cases and used and valued recruiters. They do ungodly amounts of legwork for me. As for "extremely talented people" avoiding recruiters -- those are probably not the people I want to work with anyway, I want pragmatists who use every tool available... recruiters can be annoying for sure, but they are a useful tool. Extremely talented people are the ones who NEED recruiters, because they constantly get garbage offers for like $135,000, when they are looking for $200k+ ... recruiters can act as a fantastic first filter, "No, they seriously won't take a position under $200k". Your can loathe recruiters, and loathe lawyers, and loathe dentists... but they all fill useful niches and shouldn't be avoided if you like your having a good job, freedom and oral health. 
Yeah, this is a good point. I would TREMENDOUSLY prefer not to host credit card information, especially with a 'learning experience' project that could be vulnerable.
Using MVC, could I just have controllers check permissions before returning the relevant view, and then treat the UI as normal?
fair point, but the recruiter gets more if you get more, so they are likely to want to submit you for what they can get.
Yeah. This is why I suggested using a third-party, PCI-compliant ecommerce transaction management provider. You *really* don't want to go down the road of trying to do that yourself, because it's a nightmare.
And you simply tell them it is irrelevant, the salary you are looking for is $X. You won't work for less, your current salary is irrelevant. 
Yeah, I guess a naive young developer might not understand the difference, but I suspect that would be a mistake they make exactly once. Also, seems like something that a quick bit of google-fu could help with.
&gt; Have a look at the ContentPropertyAttribute. Perfect! Thanks!
Perfect, it is!
I don't know if I'm just used to it, or what, but most of the things on this list don't trip me up or make me frustrated at all. In fact, I like a few of em. 
What if i want to know the integer index? Sometimes ill do foreach with a integer index that increments if im lazy, but for loops are very useful for this situation
I kind of wish .Net would get the "Edge" treatment and a profile/version in which all the cruft from the pre-generic, lambda and async days removed, and replaced with stuff designed with the current feature set in mind.
Many of the LINQ methods have an overload that incorporates the index, as well. foos.Select((i,x) =&gt;F(i, x)) 
[This is probably what you're looking for.](https://support.microsoft.com/en-us/kb/302084)
That's more or less how the Python 2/3 situation came to be
I agree. A lot of those were edge cases and I really like the simplicity of C#. Any mature language is going to end up with some duplication at some point down the road.
That would be nice. Move all of that old stuff into a library that can be imported for backwards compatibility if needed.
My first reaction on reading that was "BS, I use for loops often". Then I looked at some recent code and thought about what I'd written in the last while and I realized I almost never use for loops. And when I DO use them, I don't use any of the esoteric features that you can use with them. It's always (for int i = 0; i &lt; foo.length; i++). All of which can be replaced with a foreach or a LINQ expression or a while loop. There really is very little need for the basic for loop anymore. I'm not saying remove the feature from the language (not that that would happen anyway). But I have realized I wouldn't miss it much if it was gone. Which is amazing because it used to be something I used a LOT.
\#7 (multiple syntaxes for lambdas) and #10 (`{ ; }` is valid C#) are minor annoyances I think compared to some of his honorable mentions (`void` and the colon issues in particular). And I wonder where null reference exceptions (which he has discussed [here](http://blog.coverity.com/2013/11/20/c-non-nullable-reference-types/#.VM_yZmiUe2E)), the weaknesses of the design of `IDisposable` ([here](http://stackoverflow.com/a/2103158) among other places) and the problems in `IEnumerable` rank (Jaredpar's points [here](http://blog.paranoidcoding.com/2014/08/19/rethinking-enumerable.html))? 
From the third paragraph: &gt; In every case, there were powerful arguments for the feature at the time, and it's very easy to criticize with decades of hindsight. C# gets almost everything right; all of these points are minor quibbles about details of a very impressive and successful language. The author is under no delusion that these are terrible mistakes that ruin the language.
My understanding was this was more of a problem with Mono's GC than .NETs. But yeah, if you have a path of execution where there's a noticeable performance loss than by all means optimize it. Until then, why make things hard for yourself?
I've been programming in C for 25 years, and C# since it came out. Love both of them, that doesn't mean they don't have warts. Sometimes I agree: \10. Empty statement... agreed. The naked ; should have been ditched. However, the labeled break would have been nice. :) Please? \9. Equality can be a bit of a mess, agreed. To properly overload Equals takes some thinking or R# to remind you of all of the other things you should be overriding as well. \8. &gt;&gt; / &lt;&lt; is a stupid C holdover that probably doesn't belong in C# to begin with, or should have been a method in the int base type. (x.Shift(2)) \6. Bit twiddling with parens... again, C# should have fixed the precedence once and for all and said "Sure, because it's *not* C!" But then: \4. Sorry, no. Disagree. I've had my share of cases where I've NOT had all of the bitmasks handy for something but I *do* have the masks for the few I want to set/unset. Let me handle it as an enum/flag and leave me alone. Don't tell me to put the masks in a constant somewhere, let me hang them under an enum. \3. I won't speak to ++/--, but having assignment return the value in question is fucking brilliant. a = b = f(x). Leave it alone. 
I tried to get into WPF, but found out quickly that the designer isn't always showing what it's really going to look like at run time. I had a checkbox with text next to it, that looked properly centered in the designer. But at run time, the text was like 2 pixels higher and it looked like shit. I tore my hair out trying to get them to line up the same both ways, and couldn't get it. Until I changed the font size up or down one level, neither of which I wanted for my form, then they worked the same both in the designer and at run time. Fuck that.
The fact that methods aren't virtual by default like in java means you need interfaces for every class if you do tdd. Interfaces become c++ header files.
Yep. I've used this quite a bit when refactoring some legacy code. Using Lazy&lt;T&gt; has made declaring stuff like this easier `public Lazy&lt;ExpensiveResource&gt; Foo = new Lazy&lt;ExpensiveResource&gt;(() =&gt; getExpensiveResource());` but then you're stuck calling `Foo.Value.Whatever` everywhere instead of just `Foo.Whatever`.
My only beef with `null` is that ANYTHING can be null... more accurately, null can be anything. int? num; string str; MyObject obj; num = str = obj = null; // this makes no sense! I'd rather see a type-safe null be forced. So `null&lt;string&gt;` or `null&lt;MyObject&gt;` rather than one null to rule them all.
It's true of any GC - if you allocate objects endlessly, the GC can only help so much. It could be a tight game loop, or an app server, or any number of things. It seems silly to throw away for loops when they're simple. Linq / foreach are handy, but when it comes down to it, just syntax candy, and candy that causes allocations at that. I think good performance for a complicated code base starts small. 
Am I missing something? Why is everyone saying for is rarely needed? What about modifying the collection?
What version of .NET and WPF did you use? WPF completely changed it's text rendering between .NET 3 and 4 
Specifically [TextFormattingMode](http://blogs.msdn.com/b/llobo/archive/2009/10/21/new-wpf-features-textformattingmode-for-clear-text.aspx) is probably what you'll be interested in. Just be aware of using the Display formatting mode if you're going to be using a transform on your text as it will use the display formatted version.
Okay, I know it's not a list of massive flaws, and just minor annoyances, but seriously, point #5? It's type first because it was meant to be a competitor to Java but closer to C++! Of course it was type first! It's typical C syntax! It doesn't make it any more or less difficult to understand!
Just use Zip
use something like a ToList() to makes a temporary copy of your code in the foreach loop and refer to the orginal. foreach(enumerable.ToList() {#A copy of the collection enumerable.Add(item); }
That requires two collections, not one collection and a counter.
You can inflate it, but why bother starting off the relationship with a lie that is irrelevant. 
The major annoyance around delegates that I have is that *delegates and lambdas aren't interchangeable*. There's still a few methods that take only a delegate (Control.BeginInvoke I think being the one I always stumble upon) and you *can* pass a lambda in to in - but you have to know how, because the type system fights you the whole way.
Download Telerik's Fiddler that allows you to sniff the requests. Use HttpClient to emulate the requests and gather the data. There is a FiddlerToCode extension that transfers the request into C#/VB.NET/Python code (sadly, not using the HttpClient).
[Check out this SO question](http://stackoverflow.com/questions/15828/reading-excel-files-from-c-sharp) which shows how to use an OLE Database provider to access Excel. I prefer this method more than working with the Office COM interface because you have to be very careful or you will end up leaking an implicit reference to one or more COM objects.
When I worked in recruitment all placements were a percentage of annual income. In my experience it is a lot easier to negotiate a better salary if there is no referral and you approached company direct as there will be no recruiter fee but it's also a bit harder and will take some persistence on the phone to get an interview.
Generic types are pretty confusing to a lot of people. It doesn't help that everything is called "type" at the reflection level, while type at the metadata level means something different. Only closed types are really types in the sense that a value can be of that type. Everything else, partially open types, open types (i.e. generic type definitions) and generic type parameters, are not.
I like my ++ operator, but also have to admit that it can be dangerous in multi-threading situations. Although the syntax suggests it, ```x++``` is in no way safer than ```x = x + 1```. I'd much prefer them making the operator atomic than throwing it out.
Just do the formatting yourself. With flexibility comes responsibility :D
&gt; Edges are tinted Yes, when you zoom in. You're not supposed to when using sub-pizel rendering. It looks fine without zooming. That part of it, at least. I agree that WPF rendering is not as good as e.g. OS X text rendering and similar. It does look like your display doesn't have the correct sub-pixel layout, though (as expected by WPF), since it looks that bad.
I actually think what you want to do may be easier to accomplish in Powershell. But should be doable in c#. If you want to do it in c# I wouldn't use a string array, but a List&lt;string&gt;. Just easier in most cases and usually allows for more. Both implement Ienumerable, so they should be relatively interchangeable, but probably requires a cast. Also make use of the .NET File, Path, and Directory static classes. They will make dealing with the file system easier and less error prone. Powershell accessing excel links. http://www.lazywinadmin.com/2014/03/powershell-read-excel-file-using-com.html http://blogs.technet.com/b/heyscriptingguy/archive/2008/09/11/how-can-i-read-from-excel-without-using-excel.aspx 
Not to call you a liar, but have you actually applied metrics to these operations? Everything that I've read seems to indicate that the modern C# compiler does a pretty good job of optimizing in these scenarios. 
Or https://github.com/mhinze/ShortBus 
Null, by definition, means a reference to nothing. It is quite literally a pointer to a reserved space in memory for "I don't know". The biggest problem with using &amp; accepting null values is that you cannot distinguish between good behavior and a bug. 
Oh, my, god. I've been using C# since 2001 (and J++, J# before that) and I've never noticed that those overloads existed. What have I done with my life. Thank you sir/madam!
I guess, but every time i see text rendered by WPF i notice it looks uneven and choppy. If i create a UI design in photoshop, its impossible to replicate text or even get it looking presentable when i code the ui in WPF. Whereas with web design, mobile apps, etc text looks fantastic. I have non standard desktop monitors. I have a 4k monitor and two vertical 21:9 monitors (3440 x 1440 px) so at first i thought it could be wpf's scaling settings muckin up the works. But at work i have 1080 displays and it looks the same.
This surprised me a bit, because Eric has written quite a few articles on the topic, yet it doesn't really seem to bother him that much. http://ericlippert.com/2013/07/25/what-is-the-type-of-the-null-literal/ http://blogs.msdn.com/b/ericlippert/archive/2009/05/14/null-is-not-empty.aspx http://blogs.msdn.com/b/ericlippert/archive/2012/03/26/null-is-not-false.aspx Based on his own criteria of "Follow the rule of least astonishment. If a feature is surprising to almost everyone, it's probably not a great design," you'd think this one would have made the list. If you end up writing a dozen articles explaining why people are wrong about how they think about null, maybe it wasn't such a great idea?
That's not entirely true. Eric addresses this topic in talking about designing Roslyn and how they handle type comparisons and null. If you're going to force the compiler to do type checking and null is involved, you can't just wish it away. http://ericlippert.com/2013/07/25/what-is-the-type-of-the-null-literal/ &gt; As an implementation detail, the Microsoft implementations of C# 1.0 through 5.0 all do have an internal object to represent the “null type”. They also have objects to represent the non-existing types of lambdas, anonymous methods and method groups. &gt; the final decision was to make two APIs, one which asks “what is the type of this expression?”, and one which asks “what is the type of this expression given a certain context?”. In the first case, the null literal expression has no type and so null is returned; in the second, the type that the null literal is being converted to can be returned. 
But if i do a pixel comparison of microsoft word, photoshop, QT/C++, mobile apps, and web browsers, WPF text subpixel rendering is the one that doesnt fit in
This article is 50% "I've clearly never written C# in high performance scenarios" and 50% /r/iamverysmart because look at all the esoteric bullshit I know just enough to whine about! Edit: I'm not saying there's nothing wrong C#, but more that the author is reaching for obscure things to complain about. A lot of C#'s major issues are not even listed.
Having a way to represent null is extremely important... but having all types be nullable by default is a mistake. If types were non-nullable by default, then Nullable\&lt;T\&gt; could be used for both value and reference types. Then, if you're dealing with a type that's not Nullable\&lt;T\&gt;, then you don't have to null check, and if you are dealing with Nullable\&lt;T\&gt;, you could be forced by the compiler to deal with both the null and non-null cases.
I have clear type on. Also i just found TextOptions.TextRenderingMode="Aliased" gives me close enough to the result im looking for 
This makes me cringe. I write a lot of high performance C# and foreach has some subtle but painful performance problems. Not to mention the performance problems of Linq. And someone below mentioned copying a list when you want to modify it. I think my eye twitched so hard my retina detached.
Best subject heading in this sub for awhile.
Ah, that works if you want to rename a class, globally, yes... but (unless I've missed something) it doesn't help you copy a class as e.g. a basis of trying something slightly different, while leaving the original intact. I do accept that there's never going to be a 100% perfect solution; even the function renaming example breaks down if the function is called recursively (you'll still need to edit the body); and the same is true of a class, if it mentions itself, you'll still need to change body. I've seen some languages use a "Self" type, a bit like "this", but referring to the type of the class.
You could always fork Roslyn.
Dividing by powers of two must be optimized by compiler.
This. I love Elmah
I see that snippet quite frequently used for singletons instead of the static constructor. Especially in a lot of newer C# 6.0 code that allows getter-only properties to have lambda bodies. public sealed class Foo { private static Foo _instance; public static Foo Instance =&gt; _instance ?? ( _instance = new Foo() ); private Foo() { /* ... */ } }
I know this may be an unpopular opinion, but this is the kind of mental gymnastics that are required when you encourage the passing of a null value as an argument, and even worse passing back null in the return value. If you're going to insist on this pattern, at least make the return type nullable to give the caller the expectation that the return value could be null. At best this is just syntactic sugar for allowing code to (ab)use null as something other than "something is wrong". 
In Elmah I trust.
 if (myArray?.Any()??false) { // Although, really, at this point you may as well check myArray != null &amp;&amp; myArray.Any(). or myArray = myArray??new obj[0]; if (myArray.Any()) { / / or foreach (var x in myArray) or etc. or even just if (myArray == null) { return null; } return myArray.LastOrDefault(); // or whatever. u/ElGuaco is right that it's not great style to pass or accept null in the first place, and it's definitely not great style to rely on knowing obscure or esoteric ins and outs of the language spec. I mean, yes, it *works*, but you either need to drop a comment explaining why, or just to not do that, because the next dev to come along may be less clever than you are. And it may be you, some morning before your first cup of coffee.
http://stackoverflow.com/questions/20857773/create-dynamic-variable-name
Why copy the class when you can just inherit from it and override what you want changed?
I'll second that, but explain why. Needing a dynamic variable usually indicates that you want to keep it in a Hashtable, Dictionary&lt;string,&gt; or something else to access it. C# itself doesn't really lend itself well to dynamic variables in code, except using dynamic/expando which is a lot of overhead.
For a moment, I thought you were talking about the enterprise logging application block. Still have bad dreams over that one.
I'm with you. An issue I have with the above code is that I would read that as expecting that the array could be null and that a null array and an empty array are equivalent, which I don't find to make sense. I'd expect a check and an ArgumentNullException to be thrown, or if it truly is reasonable to be null and there's truly no difference between an empty array and a null array for some reason, then an immediate return null, skipping any further execution. Getting nice things like null propagation doesn't mean we get to be lazy about the intent of our code.
I was going to resort to that, but I figured I should ask before I tried to reinvent the wheel. Not sure why the downvotes on the thread though. It's not like this is an easy to google question.
I'd have to go spelunking in DLLs with a disassembler to be *certain*, but I'm pretty sure that most everything LINQ is pretty well optimized with respect to different collection types. It shouldn't need to walk through the whole array, because it should be doing the exact same array.Length - 1 calculation behind the scenes.
Chaining the null propagating operator with value types actually converts them to Nullable&lt;&gt;, which is technically still a value type but perfectly fine to compare to null.
ELMAH, all day every day. (all I do are web apps though)
That would make philosophers poor accountants. ;)
I know I've asked before for an IsNullOrEmpty for arrays... but this isn't what I had in mind.
I was just curious, I have no problem.
Serilog is the best log.
For what we do the UI is just the tip of the iceberg. Serilog has enrichers to gather all the data ELMAH gives us and enough sinks to get the data in the right spot in the same way ELMAH does. Throw in Seq as the log aggregator (or splunk, exceptionless, elmah.io or any number of other sinks) and you have a nice way of consuming it. The real improvement is we can use the same logging from all our backend services, libraries, etc that aren't tied to ASP.NET. Combined with structured logging makes for a very powerful library that's very easy to consume. edit: very short version of structured logging - instead of logging text it logs the message format and the variables that build it. e.g. log("The account {accountId} failed to bill", account.Id) would log exactly that format and the variable. Then you can use something like Seq to query maybe all the log statements related to a specific account id if you suspect you are having problems with it. Or we include the username and referring url in our logs. So I can quickly get a list of all the requests made from a specific html page to our api filtered by the username. 
no love for [StackExchange.Exceptional](https://github.com/NickCraver/StackExchange.Exceptional)?
Still, can you show how the text looks in Explorer then? This is how it looks in mine: http://i.imgur.com/1xAJR6r.png Edit: The thing is, the text is not supposed to look good zoomed in. It's supposed to look good on a LCD screen.
We evaluated ELMAH and quite a few other logging servers, Seq was a close second to Logg.ly, but everything else, including ELMAH, just felt so clunky and...flat, for lack of a better word. I just felt like I had to really dig to get a view of what was going on.
What a clickbait title
That is the implication of the ruling... Also it means Monodevelop can be sued by Microsoft.
If you want a strongly typed result set like IEnumerable&lt;myResultObject&gt; then you need to maintain them all, and you are halfway to an ORM like EntityFramework, linq2sql, or nhibernate. If you just want to keep hacking, then returning a List&lt;List&lt;object&gt;&gt; would work, but be ugly. Finally, you could fairly easily have a routine which takes an Action&lt;IDataRow&gt; and runs the action on each row, or takes a Func&lt;IDataReader,T&gt; and returns a List&lt;T&gt; or yield returns T to return an IEnumerable&lt;T&gt;. However you'll probably find learning Entity Framework or something similar much more valuable.
It works with block 0,0 in the array!
Definitely go the ORM route. It's worthwhile and takes care of that ugly syntax. On a smaller project I used petapoco as a micro ORM since I only need to use 6 or 7 queries/stored procedures. It's super slick, easy to read, and easy to maintain. 
Can you try adding the [System.IO.Filesystem](https://www.nuget.org/packages/System.IO.FileSystem/) nuget package? They seem to have split many things out into separate packages.
Take a look at a micro-ORM before you enter the hellish world of full fledged ORMs like EF, or, $Deity forbid, NHibernate. Especially if your database has more than like 2 tables.
Nobody. Unless it's an "original work", and that "original work" can be considered intellectual property owned by its creator. Furthermore, as copyrights are concerned, there are typically exemptions that are considered for "fair use". Unless there was widespread profiteering, most software reuse would fall under these exemptions. I don't disagree that copyrights with respect to software aren't ideal, are open to interpretation, open to abuse, and there are issues abound. But I don't agree with your interpretation of these events in terms of the extent of its implications.
The reason that frameworks like Ruby are popular (especially with startups) is because it's easy to get something up and running quickly. I would be very surprised if there is a significant salary difference between developers on one platform over another, but the availability of jobs using a given platform could vary greatly depending on locale.
In the US, I highly doubt that .NET-stack developers earn less. Enterprises are more often than not on a .NET stack, and so are a great many financial firms such as hedge funds. If you look outside of Google, Apple and Amazon (all 3 of which have very obvious reasons for not being on a Microsoft technology), most good-sized companies have at least parts of their platforms on .NET technologies, so it wouldn't make sense for them to be paid less. "Trendy" technologies often only stay trendy for a few years before they flicker out. These techs will always gain much more attention than .NET because their proponents will be much more vocal about them while they're still trendy. After all, what use is there shouting from the rooftop about how great C# is, 15 years later? There's also the fact that they are considered "underdogs", which people love to voluntarily promote and root for. It's the same reason Java, C and C++ aren't "trendy" either, yet if you combine these 4 languages together, you encompass the great majority of software development positions out there. The only "trendy" technology right now which I feel will still be big in 5+ years is JavaScript, and it's pretty well known that JS developers get paid relatively little compared to most other languages.
The way I see it, people who develop using the current *Hot Big Thing ^TM* are like hardcore surfers: they live in the moment but they always have to be ready to catch the next big wave and ride it otherwise they just bob along aimlessly. The money is great if you're riding that wave, but the minute you're bobbing along, you're one of millions just sitting there. Meanwhile, the established stack developers are like the casual surfers: there's a lot of them out there and they just ride the smaller but ever present waves. They're in demand, they work with the established stacks, and they're in it for the long haul. Neither is better, but it takes a burning desire to keep riding those big waves, and not everyone wants to do that. 
Yeah, I'm not a fan of the pattern either. I usually write an extension method/wrapper like so: internal static TResult ExecuteReader&lt;TResult&gt;(string connectionString, string commandText, IEnumerable&lt;SqlParameter&gt; parameters, Func&lt;SqlDataReader, TResult&gt; readerFunc) { using (conn = new SqlConnection(connectionString)) { try { conn.Open(); using (cmd = conn.CreateCommand()) { foreach (SqlParameter parameter in parameters) { cmd.Parameters.Add(parameter); } cmd.CommandText = commandText; cmd.CommandTimeout = CommandTimeout; cmd.CommandType = commandType; using (SqlDataReader reader = cmd.ExecuteReader()) { return readerFunc(reader); } } } catch (Exception ex) { // Trace or whatever throw; } } } And use it like so: ExecuteReader&lt;int&gt;("localhost", "select * from foo", Enumerable.Empty&lt;SqlParameter&gt;(), (r) =&gt; { while(r.Read()){} });
I would strongly encourage you to never hard code literal SQL into c# code. Use EntityFramework (or similar) or stored procedures.
It's regional and situational. For the most part, a software engineer doing the same job is going to make the same, no matter what the tool. HOWEVER, a business IT programmer at a non-tech company using .NET to write disposable business forms with no deadline, no spec, and no requirements is going to make less money than an engineer using Java to write the customer-facing front end of a popular website/webapp. A .NET programmer with zero experience in a college town shitting out 100s of .NET programmers with zero experience is not going to make much money, but neither will a Ruby/JS programmer in a college town shitting out 100s of Ruby/JS programmers with zero experience. .NET is popular in business, and that means you may be tempted take an offer for a shitty position in a business that offers no real opportunity. On the other hand, anything-but-MS technologies are popular in academia and hair-brained, bad-idea startups. 
I got to thinking I've been doing this indirectly when using ADO queries to populate database controls. I think I may have found a solution: static void DoSqlQuery(string query, DataTable t) { using (SqlConnection sqlcon = new SqlConnection(MyConnectionString)) { sqlcon.Open(); using (SqlDataAdapter da = new SqlDataAdapter(query, sqlcon)) { da.Fill(t); } } } Then I can do: DataTable results = new DataTable(); DoSqlQuery("SELECT r1, r2, r3 FROM MyTable;",results); foreach(DataRow dr in results.Rows) { Console.WriteLine("Result : " + (int)dr["r1"].ToString() + "," + (string)dr["r2"] + "," + (string)dr["r3"]); } Thanks for the responses.
But not from a mathematical one. 
At least in the reference source, LINQ Last and IndexOf methods check if the IEnumerable implements IList in order to use IList's accessor as an optimization. 
There is a Serilog sink available for Loggly here https://github.com/serilog/serilog-sinks-loggly
It is csv, is there not a native way to do that? 
Just use the library. Someone already did the heavy lifting for you.
I love dapper. I've been using dapper for years.
Isn't a java enum basically a class?
Yes. We are actually using https://github.com/samirahmed/serlog.logglybulksink Looks a bit sketch, but it works perfectly. If you're pumping LOTS of events in from any one machine or process, it's definitely the way to go. I put 20GB through it in the past few hours.
Probably here. Also, I got VS15 free, so if you want to upgrade, go for it.
I find it hard to use stored procedures when you need to restrict your results to a list of values IN a @parameter. I wish SQL Server supported WHERE Region IN (@Regions);
RAII. IDisposable doesn't cut it
Exactly. Save for really necessary situations I avoid stored procedures. Rarely worth the headache.
No I meant he could try either linq or ef. You can use ed without it being an mvc application
NLog
RAII. Using statements suck. The ability to specify a base class with a generic (similar to C++'s CRT pattern). This would have been useful in some Android programs: public class EventSource&lt;TActivity&gt; : TActivity where TActivity : Activity { public override void OnCreate() { base.OnCreate(); RegisterForEvents(); } } public class MyActivity : EventSource&lt;Activity&gt; { public override void OnCreate() { base.OnCreate(); RegisterForOtherEvents(); } } 
java enums are fuckin awesome. I have to do backflips in C# to make a enum&lt;T&gt; class, write a custom XAML typeconverter, and XSD element injector for intellisense support.
While I agree that views are useful they add to maintenance overhead IMO. It's especially more of a pain in older systems that won't really go into a DB project. Of course the ability to tune the query on the fly is lost which is a substantial loss. For me, they're not much more than optimized SQL capsules that require a hop over to the DB to maintain.
A class with specific possible values. 
Why are you creating a 100 GB memory-mapped file? I can't imagine what this could be used for. I'm not exactly sure how Windows manages such things, but I think its reasonable to assume Windows expects much, much smaller memory-mapped files to be used. 100 GB is beyond absurd.
Could you give an example of the Java enum &lt;T&gt;
common.logging, then you can choose\change your implementation
It depends on your area, but in the North East I have found that it's a very sought after skill set vs php, ruby or node. Those things are out there, but many corp jobs are standardized on .NET. I've been doing Microsoft stack development since about 1995 and I've never had a problem finding a well paying job. If I lost my job today, I could find gainful employment within 2 weeks.
Im not great with java but heres a little example: public enum NotificationStyle { ERROR (12, Red), MESSAGE (14, Blue), ALERT (16, Yellow); private final double fontSize; private final Color color; NotificationStyle(double fontSize, Color color) { this.fontSize = fontSize; this.color = color; } private double fontSize() { return fontSize; } private double color() { return color; } } So now a variable of type NotificationStyle can only be assigned ERROR, MESSAGE, or ALERT. You cannot make a new NotificationStyle, only the predefined ones can be used. And youll get access to the associated fontsize and color.
GOTO. Heh, I see what you did there.
If you know .net I'd say it's better than rails in terms of getting something up fast. And you won't hate yourself 6 months down the road when you realize the corner you coded yourself into with rails
Hash or Dictionary would be your best solution for things like this. 
In my experience pay is pretty similar until you get to the higher end of the scale -- 160k or so where it tends to be harder to find .net jobs but you can still find tons of python , java, or front end gigs
 Regex csvParser = new Regex("\"([^\"]*)\"");
Which is about $20K less than talented .NET developers.
[Relevant xkcd.](https://xkcd.com/1171/)
[Image](http://imgs.xkcd.com/comics/perl_problems.png) **Title:** Perl Problems **Title-text:** To generate #1 albums, 'jay --help' recommends the -z flag. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/1171#Explanation) **Stats:** This comic has been referenced 56 times, representing 0.0728% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cu9247x)
Where are you that you can find $160K Python and front end jobs?
Wrote my own xthreaded logger, it's not that hard.
This highly depends on the region too. In Los Angeles, a talented JavaScript developer can easily make north of 150k.
Yeah, the everything's-an-object-whether-it-needs-to-be-or-not paradigm annoyed me in Java, even before I'd been exposed to C#.
There's ORM frameworks, which have been suggested, but are also a more significant decision in regards to your application. If you want to stick with ADO.NET, this post [ADO.NET, the right way](http://blog.gauffin.org/2013/01/ado-net-the-right-way/) is the best resource I can point you to. IMHO its just as easy to use as a micro-ORM framework (such as dapper), and gives you control without having to write a ton of boiler-plate ADO code.
I wish I could apply interfaces to 3p/core classes. Drives me batty when a class implements the methods I need (ahem HttpRequest) but I can't mock or deal with it in an abstract way.
Why not just use a class with private constructor? public class NotificationStyle { public static NotificationStyle ERROR { get { return new NotificationStyle(12, Red); }} public static NotificationStyle MESSAGE{ get { return new NotificationStyle(14, Blue); }} public static NotificationStyle ALERT{ get { return new NotificationStyle(16, Yellow); }} private final double fontSize; private final Color color; private NotificationStyle(double fontSize, Color color) { this.fontSize = fontSize; this.color = color; } } or you could even cache the values of ERROR, MESSAGE, and ALERT in private static variables and return a reference to that so you dont create duplicates.
San Diego here. $160K development jobs are almost impossible to find regardless of the language.
Earn less? Absolutely not. .NET is in high demand for enterprise development and the pay cap is through the roof in regions like Seattle, NYC, and Raleigh. Get into Finance, Healthcare or CRMs and you're golden for the foreseeable future. In Seattle, there's a metric fuck ton of .NET jobs, although the market tends to be saturated with high mid-senior developers with MSFT experience. Source: ex-Microsoft that moved to NYC to get into finance
I would argue that a method that is intended to return the last character of a char array is encountering an exceptional situation when it receives a parameter in which it cannot return a char from. There is no "flow" occurring, the method encounters a situation where it **cannot** do what it is designed to do, and (for some reason) instead of letting the exception bubble it is desired to return a null. Further, I think it is more clear to read than comparing null to an integer. Though I do believe the "best" approach would be something like if (myArray!= null &amp;&amp; myArray.Length &gt; 0) I would much rather have a try/catch block (that I believe even saves some minuscule amount of time) than to compare null &gt; 0.
Wut? Have you ever written a Rails app? Have you ever deployed a Rails app? Did you accidentally swap .Net and Rails in this comment? 
I would agree with you. Most of the other examples people have listed are basically just a more convenient way of doing something c# can do in some fashion, but const correctness is a more fundamental feature that can improve program correctness.
where do my fellow .NET developers make $140k?
Throwing and catching an exception is much more expensive than a few if statements and comparisons. Requires walking the stack, among other things. And a good discussion for "Don't use exceptions for flow control" is [here] (http://c2.com/cgi/wiki?DontUseExceptionsForFlowControl). 
static classes are "not really objects".
When you have a try/catch block to catch the exception and return null instead, then this is obviously an **expected case**, so it's absolutely not a good match for try/catch.
I would say 2013's a safer bet at this point. 2015's got issues that were fixed in 2010 and 2013 (same bug had to be patched in a later update, that showed up again in 2015)
Probably wherever front-end devs make $120K.
Both a dozen times yes
Pretty much everything is in a separated package in .NET Core.
Nothing prevents you from importing a testing library to your project and adding unit tests to your classes.
Yes I noticed that. Kinda strikes you how stupid you feel even though you worked for years with .NET. 
Null is not "nothing", it is "Not a Number" in this context.
This is why I said &gt; Proper language level macros Many languages have them, and they can be done well. Even for C# I have used codegen to speed up calling message handlers. And frankly, the C++ preprocessor is fine used sparingly. Theres all sorts of nice things you can do with it to help projects. Any sufficiently powerful language feature can be misused and used as an example of what not to do. Otherwise you get Java. 
Windows Explorer: http://i.imgur.com/ShLzuoH.png Webpage in Chrome: http://i.imgur.com/hJHdKq8.png
When they say core, they *mean* core. I think they're trying to introduce an a la carte model to .Net so it's practical to use NuGet to literally bootstrap the entire .Net framework for an app without installing the mscorlib from an MSI (like you do now on Windows).
Technically, so is a C# enum.
Why doesn't it cut it, and what do you want exactly?
CLR supports global functions (and fields etc.), but C# doesn't. 
Why do using statements suck? What do you specifically want instead?
I have googled a bit about that book, it has a lot of good opinions and I think of buying it. However, I have already started my adventure with C# with "Head First". Do you think I should continue with it or switch to Learning C# with Unity? Will it be still a good book if I pick it up after Head First? Thanks in advance!
You shouldn't pass around null arrays a lot. And actually, you shouldn't use arrays a lot at all.
I'm sorry if I'm being unclear. I'm probably assuming things are common knowledge when they aren't. When I talk about embedded SQL, I'm referring to the sort of hard coded SQL that is represented in the examples given. When I take about an ORM, I am mainly (though not exclusively) referring to the latest version of Entity Framework. When using Entity Framework, I always use Code First. But I never let it create the database from the code. Entity Framework is designed to encourage you to either auto-gen code from the database or auto-gen the database from the code. I can't stand either. The database (assuming here we are referring to a relational database) should be in some reasonable normal form and optimized to do database sorts of things. The models in the code should ideally be POCOs that lend themselves to use in generic collections. These are distinct approaches that don't lend themselves to auto-generation IMO. So, I create POCOs and use modelbuilding/mapping. At which point I can direct the mapping to point to a view for the get, and to stored procedures for the C,U,D. Or whatever, this is just an example and real world applications can certainly be messy at times. I just shoot for the least mess possible under the circumstances. I know that any heavily used call will eventually be optimized by SQL Server. It caches candidate execution plans and what not. But if your application has frequent updates (such that specific SQL may change with new minor releases) and would like to have your users experience a minimum amount of delay, i think it is still very reasonable to use sp_executesql (in SQL Server). What does it hurt? Dynamic SQL is less secure (much more likely to suffer from SQL Injection attacks) and you can't set permissions on it the way you can stored procs. It is not precompiled. And it can at times be more difficult to perform maintenance on. If I have a stored procedure, and all I need to do to perform a bug fix or enhancement is change the SQL, I can do that in a SP without having to recompile/deploy the entire App (or dll or whatever). But, if you like what you're doing, and you're boss/co-workers also like it: mozel tov. Not trying to start an argument, just trying to be helpful.
Wat
So what's the big deal with static classes as a container for functions?
bad-idea startups? Whats wrong with you?
Well especially with 'using static' in C# 6.
Interesting. Chrome does not use ClearType, but instead the old Grayscale rendering, but Explorer uses Cleartype (does Explorer look off to you?). Why this is, I don't really know. For example, zoom in on the lower case L in Explorer, and see how it matches your lower case L in WPF. It's the exact same color hinting. Why you have this weird artifacts above the letters, I don't know. It might be because you use a font that does not have a bold version, causing WPF to render it with Faux Bold (which should be avoided like the devil, IMO). Could you perhaps upload your sample application, so that I can test it? edit: I saw your other post, that you are using vertical screens. That would explain it, I guess, as ClearType is pretty dependent on how the pixels are laid out on the display. 4K could perhaps also mess it up (why are you even using subpixel rendering on 4K? Don't you use DPI scaling?)
I was a Linux sys admin for 10 years, but don't let that stop you making an ass of yourself.
Enterprise is a mixed bag. The lower and mid-lower jobs pay better, but there's a fundamental ceiling on what you can earn unless you can go into management. You often end up doing work that you *know* someone else has already done elsewhere and isn't particularly challenging or innovative. Keeping up to date with your skills will be your own responsibility and may get a lot of pushback from your employer if it's not a skill you directly need to serve their interests. Especially if the business is non-tech. This is a very broad generalization and there's a lot of variety, but the level of talent you work with can be a lot lower in Enterprise IT, especially in a non-tech company. It gives you an opportunity to stand out... but you can find yourself not realizing you've fallen behind in professionalism.
Not so much "it's not Microsoft" as much as "I don't want to ever have to even think about whether I'm in license compliance."
https://chrome.google.com/webstore/detail/backstop/pidcjgldchekcoolelhbjfbnccjkckfj I don't even know why the backspace-to-go-back-a-page is even a feature, let alone a default-on one, *let alone* one you can't turn off! I've never once used it intentionally, and it seems like every time I do i lose a form input.
They're clunky, and absolutely a workaround-like hack as opposed to a native language feature. There's also a cost to allocating the Tuple object. If you use them frequently, they're a pain. In Python and ML languages, they're used frequently. In C#, they are not, because of this. Fortunately there's a proposal for better tuples in C# 7: https://github.com/dotnet/roslyn/issues/347 Read the background of the proposal for more reasons why a better system for tuples than Tuple&lt;T1,...,T16&gt; is a good idea.
MS licensing has gotten a lot clearer and they have reasonable datacenter licensing now. Lots of people haven't forgotten the bad old days and really small companies just don't even want to spend any time even looking into it when they can just use FOSS for everything.
Not in finance, no.
That's how my company deploys, yes.
Some people, when confronted with a problem, think “I know, I'll use DataTables.” Now they have two problems. 
Sadly, without corporate backing, I think it's doomed to be another very nice language that nobody uses for real projects.
I enjoy C# language a lot, but I often end up writing core algorithms in C/C++ due to intrinsics support, and then need to maintain a native DLL which makes everything slightly to way more painful - from debugging to deployment. I really wish C# had intrinsics. Rant: I kinda don't understand why they chose to go Vector&lt;T&gt; route directly in .Net 4.6. If JIT had intrinsics support (which doesn't *seem* that difficult, relatively, just somewhat menial due to sheer number of instructions), Vector&lt;T&gt; could be implemented on library level, and easily extended by users.
Any decent agencies you know of?
Aw yiss. 
Regex is awesome! It gets a bad rap. If you use a regular expression validator (theres a great one in resharper) youll learn it fast
The issue also occurs on my work PC which has 1080 landscape monitors. Idk man, maybe its just a matter of preference but greyscale looks so much more clean to me
Yeah, if you use Azure. IIS is a piece of shit. Kestrel will be the saving grace but it isn't production ready. 
1. Multiple inheritance. 1. typedef 
[Up for grabs](http://up-for-grabs.net/#/tags/c%23) has a bunch of links to open source projects that are looking for contributors (not just C#, but I linked to the C# tag). Many projects will tag easier bugs/issues with the up-for-grabs tag to allow people to easily wade into a project.
Yes but getting people to learn a non C style language is difficult.
Mostly because they don't guarantee anything. I want do be able to do something like: class IndentLogger { readonly int _spacing; MyScope(int spacing) { _spacing = spacing; Logger.Indent(spacing); } ~MyScope() { Logger.unindent(_spacing); } } .... MyScope m = new MyScope(5); Logger.Log("something); .... // Now m is out of scope so it should unindent. .... The using statement is kind of weak when it comes to scope guards since if the user forgets the 'using' part things don't happen. RAII is much more useful then just freeing native resources. I really want an object that guarantees to run a function when it goes out of scope. I also don't like having many using statements next to each other or nested since then you have to play with where variable declarations go.
This was actually one of the reasons I moved to edge just recently.
im in the process of open sourcing it now :) i want to clean it up so other people can follow it.
In C#, memory used by objects is not released right away. Each time you click the button you get a new string that holds the fetched HTML. It doesn't re-use the previous storage location. Eventually when memory pressures require it, the garbage collector will free up the space on the heap occupied by previous incarnations of the result string.
Seriously? All my family is there and I love it but I grew up in Seattle so it's always been a tough choice for me. Are there actually a lot of jobs there?
[Enumeration classes](https://lostechies.com/jimmybogard/2008/08/12/enumeration-classes/) work a treat. I don't think they can be used in switch statements, though, and the class I linked needs some work to implement flags.
You shouldn't view yourself as a .net developer. You shouldn't box yourself into a single language. Lean .net and is and rails. Probably throw in some python. There thing about being a developer that transcend languages such as design patterns and engineering practices such as TDD. That's how you make the big bucks. 
Head First C#.
&gt; var z = new Tuple&lt;int,string&gt; (x,y); There is `Tuple.Create(x, y)` but I agree it's still much too cumbersome.
I'd recommend Heads First C# as well.
&gt; Proper language level macros How do you feel about using Roslyn plugins (which are themselves .net code) to add to the language? I'll bet you could even implement a plugin to add a macro syntax.
I dont get it. What's the point? Why cant I just use an intializer or the constructor.
Would you say that you're so excited, that you just can't hide it?
pretty much. I sent the link to a few coworkers as well. hehe
Yes you got them mixed up? I have also deployed both dozens of times and Rails is far and away a quicker framework to get an application created, configured, and deployed. Also a lot easier to maintain going forward. 
Using is a C# feature that doesn't exist at the runtime level at all. It's converted into try-finally, so it makes no difference. 
Dapper is awesome as is NHibernate with Fluent. Just find what works best for what you need.
Just fooling around actually. I wrote a .NET method hook but decided to fool around and discovered i can cast any .NET object to a pointer to that object... hmm.. i ask myself if i could allocate a .NET object inside unmanaged memory...
&gt; Except it doesn't. and even if it did, who in their right minds thinks that adding a comment to documentation makes sure that users correctly use your code?
Hey i'm full of bad ideas. Few days ago i wrote a library that allows you to "hook" a pointer (get a delegate called when you either write to it or read from it) https://github.com/cartman300/PointerHook
Please to explain why you are performing such a nasty task as screen scraping?
While I'm on the subject, a big new feature has just gone into the toolkit; you can now change palette at runtime: https://cloud.githubusercontent.com/assets/658107/9396115/79956848-478a-11e5-9e64-0fa300ac455d.gif
&gt; "...to screw with my friends." This is why you don't have friends. ;)
When you say text, I'm assuming a textbox. Are you getting the box's handle? Are you P/Invoking WM_GETTEXT to read it?
first of all, congrats on the release. Some feedback from me: Why not use Unity to do the resolution? Seems like you just want to build ontop of that? Either way, interesting project.
It's going to come down to whether it's text stored in a textbox/label or if it's being written directly to the canvas. WM_GETTEXT should work for the first case, but you may need to get creative otherwise.
I agree with you! This is something to keep in mind but not adhere to all the time. Software is an art and you can't follow each principle all the time. It depends on the scenarios and specific use cases. 
http://i.imgur.com/cgg9kIB.png
Oh no!, not a dependency! :-) Thanks for the link!
You can. There is nothing magical about .NET objects. The runtime is a standard COM MTA. It has to create .NET objects in unmanaged memory all the time.
There are several problems with what you did. 1) You are making an assumption about the location in memory where the string is instead of actually determining the location at run time. Notice that the poitr address is constant because you are always using 0 + 4 * sizeof(char) as the address. 2) In a longer running program, the GC can and will move the string around. If you are going to pass pointers around, you need to pin them. To solve both problems: string foo = "My string"; GCHandle strHandle = GCHandle.Alloc(foo, GCHandleType.Pinned); IntPtr fooPtr = strHandle.AddrOfPinnedObject();
Depends on the application. For company/internal apps I like to log the exceptions to the db along with user info, computer, etc so I can track when/who has the issues.
That's pretty awesome!! This is literally the first time I've seen vectored exceptions at work.
That would be wrong, though - the trick is that the call to int toPointer() is being replaced by the call to getString() - so instead of returning 0 + (4 * sizeof(char)), it's returning (string) + (4 * sizeof(char)). The Magic.Hook() function is what is enabling this black voodoo
The "using" clause forces an object which implements [IDisposable](https://msdn.microsoft.com/en-us/library/system.idisposable%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396) for "releasing unmanaged resources." Memory is not an unmanaged resource; memory is managed by the .Net garbage collector. Unmanaged resources may include file locks, database connections, ftp connections, etc. Memory will go up until the GC decides it shouldn't any more, then it will release it back to the system. You can't control this. You can help by ensuring that objects which are eligible to be released aren't global or otherwise in access levels too high for their own good. I'm rambling. Does that help at all?
I can vouch. I am a dev in Scottsdale. .Net jobs are plentiful. Non a lot of candidates out here so we're in high demand. If you're worth two shits (or even if you're not lol), it isn't hard to get a really good paying .Net job out here. The added bonus in Scottsdale is, while we still have the normal plethora of boring jobs run by dinosaurs, we also have an abnormally large pool of interesting .Net jobs as well. We're packed with established companies, innovative companies, and of course, startups. And it's growing every day.
not everyone shares your coding style.
wait i am confused, isn't try (catch) finally for error handling and catching exceptions? i can't see the relation between this and using Statement 
yeah, i am going to leave this topic for future that i learn more about c# basics
I'm certain there is an astronomical amount of overhead to do all this black magic.
This is moderately fascinating.
Magic.Hook probably has an decent amount of overhead. It sounds like it is replacing the one delegate's definition with another. Depending on implementation it could be horridly expensive or not too bad. The method I posted causes less efficient garbage collections and memory fragmentation because the GC can't compact pinned objects. In terms of run time, it basically just returns the memory address which is super cheap. The GCHandle allocation just exposes something .NET is already keeping under the covers.
Cute. I don't know what Magic.Hook is doing, so I ignored it. I'm still not sure what it does. That code still has the pinning problem. At any point the garbage collector can move the string's memory location. At that moment, the pointer becomes invalid. There are built in utilities to work natively with pointers. C# has the unsafe block, GCHandles, and IntPtrs. They all play nice, there is no reason not use them and instead on this level of indirection.
It's looks like you're about to lose control. Do you think you like it?
Do you mean terrific, or terrifying?
Then they think they'll use a DataTable for each problem, and keep them in a DataSet. Now they have 99 problems. 
The latter... for those worried about security.
That's interesting but would it work without the 'unsafe' in the signature? Seems like Cartman300's hackery is able to do so without hinting the compiler that you are doing some shady stuff.
Bonus point for first non-MS screenshot of Edge...
- A random Reddit username just registered for the sole purpose of promoting this package. - Not a single name on the project page. - Source code not available. - NuGet user only has this package. - WhoisGuard for the project domain. Too fishy. No thanks.
&gt; Being the guy who does the business logic, ui concepting in photoshop, the ui code, the SQL, the data communication, etc is cool because i get to learn a ton of stuff. I just wish i had a team to help me with some of it Story of my two lasts jobs as trainee. :)
Nice work :)
Stack Overflow
It doesn't matter. GCHandle is a perfectly good way of getting a stable pointer to any object. All this discussion about the Magic.Hook workings are moot because there already exists a better way to do this using vanilla code.
(i was joking)
I will hijack this comment to ask a question. yesterday I moved from tuple to anonym object. Now I have something like this : // full method here : https://dotnetfiddle.net/mIgown foreach (var test in new[] { new { Expected = true, Args = new[] { baseYear, february, februaryBaseYearMaxValue }}, new { Expected = true, Args = new[] { leapYear, february, februaryLeapYearMaxValue }}, new { Expected = false, Args = new[] { baseYear, february, februaryLeapYearMaxValue }} }) { int year, month, day; Assert.AreEqual(test.Expected, Program.TryParseArguments(test.Args, out year, out month, out day)); } Can I improve this snippet? (Its unit test if its matters).
Well, the nice thing is that 99.9% of the time you don't even have to think about it. If you hadn't been watching memory consumption you would have never even had to think about it All I can say is, I've been writing C# code for a long time now and I've never run into memory leak problems.
All I can look at is the color scheme, what is it?
Hm? I'm not downvoting anything, in fact i just woke up. And of course it's not recommendable, it's just hacking around. 
https://github.com/cartman300/Hackery/blob/master/Hackery/Magic.cs#L25-L41 And i did it.
http://viasfora.com/
A well documented and Microsoft supported way to use directx without ressorting to hack like sharpdx. Bring back XNA!
So, using(var x = Foo()) { … } Is the same as (and converted into by the compiler): { var x = Foo(); try { … } finally { ((IDisposable)x).Dispose(); } } The try-finally is there to ensure cleanup even in the event of an exception.
I fix..
Can you do parametric tests instead? In xUnit: [Theory] [InlineData(true, "2015", "2", "28")] [InlineData(true, "2016", "2", "29")] [InlineData(false, "2015", "2", "29")] public void TestTryParseArguments(bool expected, string year, string month, string day) { int iyear, imonth, iday; Assert.AreEqual(expected, Program.TryParseArguments(new[] {year, month, day}, out iyear, out imonth, out iday), "TryParse"); if (expected) { Assert.AreEqual(year, iyear.ToString(CultureInfo.InvariantCulture), "year"); Assert.AreEqual(month, imonth.ToString(CultureInfo.InvariantCulture), "month"); Assert.AreEqual(day, iday.ToString(CultureInfo.InvariantCulture), "day"); } } Tests should be straighforward and devoid of logic so that you aren't spending a lot of time debugging them and can jump straight to debugging the actual failing test case.
There's getting an IntPtr from a string, and there's using the string *as* an IntPtr, which is what's being done. This is why there is the offset added via 4 * sizeof(Char).
Don't remove zero pointer to unhappy recursion that is of kill stackings. public static void Destroy() { if (Handler != IntPtr.Zero) { Native.RemoveVectoredExceptionHandler(Handler); Handler = IntPtr.Zero; } }
Don't worry, getmotivatedmyass is just an asshole in general. Look at his comment history.
Oops. I set the handler to IntPtr.Zero before removing the handler.
Thanks for the advice and sorry for the slow reply. The use case for sure would have multiple limits active on the MinMaxInt - for example I would track the health of a player character, and want to have something happen when the health reaches 20%, 80%, and so on. Reactive Extensions look pretty cool but also performance intensive given how often I'd like to be checking these events, since many characters in the scene would be active. I think I get the concept of creating an AddMinThresholdSubscriber function, but actually executing this properly is a bit confusing for me still at this point. I'll give it a shot though and I appreciate the help.
What would that look like in terms of syntax? I only recently started using events/delegates and my understanding has basically been that I'm using events. 
There's a small issue with using VB.net. The VB compiler gets confused and can't figure out which overload of Update() to call. It's not happy with me right now...
Second result when searching Google for "string format javascript" http://stackoverflow.com/questions/2534803/string-format-in-javascript
Sorry, but you have no idea what you are talking about.
Yes, there are a bunch of them, the one I shared has been working for me. Let me know if you find better.
check your controller for what you are passing the view. the error message seems to spell it out pretty well, you are passing the wrong thing. Models.Rewards, Models.Receipts. right?
*vomits alittle in mouth* but it's *definitely* worth the experiment, just because you may never need to do it, doesn't mean you shouldn't know how :P
Thank you for your answer. I will try InlineDataWithRandomSeed!
You are right. Thank you for your answer.
Just curious, did you come from Java or another language that used Boolean/boolean? When I came to C# it took a while to get used to 'bool' (now I find myself using bool when I should use boolean all the time!)
This is generally called grouping. Some controls allow it but some don't. IIRC, the ASP.NET GridView allows it but the Winforms DataGridView doesn't, for example. Just search the control name and "grouping" and you should find some examples.
It's still handy, and can do various things interpolation can't. Plus it can sometimes look clearer, although this is mostly a matter of taste. 
Much appreciated, and I'll do so.
Native C++ programmer here. I empathize with your frustrations with the managed environment. You should at least pin the string before messing with pointers. 
Back in the days? Was that like.. a couple days ago?
viewbags should be what you need.
Looks like VB.NET can't resolve the ambiguity, because in VB there is no use of "ref" or "out" on the calling side. Sorry, I didn't do any testing on VB.NET. Unfortunately, I'll have to change the name of the by-reference overloads, which is a breaking change. Look for an update, soon. Thanks.
/u/turboronin is absolutely correct, but I wanted to explain a little further. Let's say that you're using NLog and injecting a typeof ILogger into your class. The "{callsite}" renderer will always log the location of it's original instantiation. Because of the way that a lot of DI containers work, you'll get inaccurate results from the "{callsite}" renderer as it will always display the location of the func (or whatever depending on container) from where the original instantiation occurred. Things like Ninject's Logger package build their "{callsite}" renderer with a typeof ILoggerFactory to guarantee accuracy when getting the current class's ILogger. And you absolutely should be injecting your ILogger. It's something you don't need to unit test and it's a dependency.
Work projects - Parsing text files that contain loan payment histories / using the PDFsharp library for some in house needs. Home projects - HTML parsing for a particular purpose / working on algorithms to mess with the stock market
Ohhhh ok so I read your message 2 days back and I didn't have anything to say until I really sat back and thought about it. And after some more reading and still unsure of it, I think I finally got it when I read ..."You define the method signature, I pass in a method, you call my method" So my struggly wasn't in understanding what delegate could do but I didn't see a use. I just always called my methods in order and they did what I wanted so I had a hard time with the concept of parametricised methods and what problem to solve with it. In my project I had a hard time keeping my classes from regular use without tweaking this or that. The main class was a DayScanReport and some day I was sending in a date to get it to print for today, some days I'd send in a date in string.With delegates I'm guessing I can say, if the method signature shows string params I can have a full implementation of the same class the same as another delegate that would do it with a datetime. This way I don't have to keep watching my classes. Even if this isn't exactly that I think I understand the actual usage of a delegate. &gt;"You might be coding from the hip with too many new technologies and at this point, need to consider taking a step back and revisiting your core assumptions." Very, very true. I just google keywords or exact errors to get answers. And a lot of things I've learned by learning how to do it wrongly than by doing it the right way all along. It was working for me but these last 2 weeks I really stepped back and got back to the basics of simply c# language. I got a much better understanding of interface, generics and delegates. I plan to go back to my program and just redesign it all with these new concepts. I'm genuinely enjoying reading about c# and what I'd expect to be boring and repetitive is made fun when I keep thinking of things in terms of my project and its particular goals.
Hey, I totally understand what you did and how your life is made better by simply using the delegates. I use linq and lambra expressions all the time to do stuff. I was really only struggling to see how and where to make my own delegate and implement it. I think I finally get it and I'm going to start out by simply implementing a logging interface for all my classes and within each class an implementation of information to be added to the EventLog. Is that a proper use of delegates? depending on the type of object being logged, the correct delegate will get work done. 
I disagree. Viewmodels are a typesafe way of passing around data. I only use the current when the view needs to pass data to the layout views.
So each delegate acts as a kind of formatter for the object type? Yes, I think that would work. To be honest, though, I *rarely* ever feel the need to create a named delegate -- if I were re-designing the language, I'd probably take them out and leave Func&lt;&gt; as the only delegate (since they can be used with existing methods and lambdas are awesome)
Thank you that worked. Edit: Finally went with this: foreach (Chunk Chunk in Chunks.FindAll(x =&gt; IsViewable(x))) Chunk.Fill(SetID, TexID, Block.TETBITSALL); But you put me on the right track.
From what I recall, he isn't one to use the latest tech for the sake of it. He uses what works, even if it's a decade old voice synthesizer.
Fair enough :p
Thanks man :)
Will you release publicly once completed? Sounds interesting! 
I think I will switch to NUnit. It will allow Linux dev to use my projet. Thank you for the clarification though.
Personal project.. PDF manager that catalogs your PDFs scraping metadata from the Web. Built in viewer with a basic Web interface. Supports notes and annotations etc. My first real project that is almost ready for an initial release. WPF MVVM.
/u/hosecoat's comment is fine, but I want to propose a small alternative. I will simply write it like this : foreach (var chunk in Chunks.Where(chunk =&gt; IsViewable(chunk))) { chunk.Fill(SetID, TexID, Block.TETBITSALL); } [Try it on .NET fiddle](https://dotnetfiddle.net/fbUOru) Read this if you want to know more about [`foreach vs ForEach`](http://blogs.msdn.com/b/ericlippert/archive/2009/05/18/foreach-vs-foreach.aspx). &gt; The first rea­son is that doing so vio­lates the func­tional pro­gram­ming prin­ci­ples that all the other sequence oper­a­tors are based upon. Clearly the sole pur­pose of a call to this method is to cause side effects.
You can write `Chunks.FindAll(IsViewable)` instead of `Chunks.FindAll(x =&gt; IsViewable(x))`.
&gt; Its already a very complex pseudolanguage and im afraid it will only make sense to me. Share it with some pairs and get feedbacks. If you want users, lets them follow the language's creations and decisions. :)
&gt;Looks like VB.NET can't resolve the ambiguity, because in VB there is no use of "ref" or "out" on the calling side. Sorry, I didn't do any testing on VB.NET. No worries. Not your fault VB.net can't figure things out :) &gt;Look for an update, soon. Thanks. Awesome :)
Mmkay. I'm open to testing if you need it. I've got a few apps this would actually do remarkably in.
You.. create a list for the sole purpose of being able to call `ForEach` on it? We have `foreach (..) {}` for this.
1. Is it worth it as a 16 year old to keep going to these classes to learn how to use SQL Server and C#? 2. How does my job security look with learning C# and SQL Server.
1. **Your primary goal should be to focus on high school** (or whatever the equivalent is in your country). Get good grades there. Then you can learn whatever you want in your free time. Are these courses for free? Go to them. It can't hurt, you learn stuff. Did you pay for all of the courses already? Go to them. You paid for it. Do you still have to pay for the remaining courses? Drop out. There are better alternatives, like reading a book or doing free online courses. 2. The job security obviously depends a lot on area, where you live. Also you're only 16 - things can change a lot in the future. In general C# is a solid choice and there are usually a lot of jobs available. However, the most important is that you will also gain programming knowledge in general. A lot of basic knowledge is transferable to any languages, so with the given experience switching to another language will become a piece of cake.
So the main thing is, I am going to miss the first hour of 6 sessions because I have school on Fridays and I wont be out till 3:15 (coding class is from 2-8). I haven't paid yet and they are expensive; 3000$. School is starting next week but I am just starting so it wont be to bad and school will be easy at first. The reason I am interested in taking this class is because I have no idea what I want to do when I am older. I hear a lot about how many coding jobs there are and the amount of money coders make. The market seems insanely large for coding related jobs. I know that C++ and Java are pretty similar to C# so if I do end up switching in the future it won't be much of a problem. I am taking the class with my Dad and Brother as well, and all I hear out of my Dad is this class is going to get harder and you will struggle and then I think about how much money I am going to make and how I will have a decent job this early on. I am just stuck and I don't know whether I should stick with it.
Although it is ballin as fuck, i don't know how much it conforms to material design with that background spikey thing.
well im not sure what your question is, but i started in VB when i was 14, and moved to C# when i was 15. If you area really passionate about coding and have a real desire to learn new things, you will have no issue finding work. I'm 20 now, and have a senior level C#/.Net project lead position at a Fortune 500 company. There is no shortage of C# jobs for good developers. Also you need SQL, its an important skill to have. Be aware, that as a programmer you never stop learning. You gotta really love this shit, or else you will hate your job. I come across devs all the time with 20 years of programming experience that are USELESS, because they dont care enough to learn new things in the rapidly progressing world of programming.
I'm just gonna copy paste the stuff I said above if thats fine :p So the main thing is, I am going to miss the first hour of 6 sessions because I have school on Fridays and I wont be out till 3:15 (coding class is from 2-8). I haven't paid yet and they are expensive; 3000$. School is starting next week but I am just starting so it wont be to bad and school will be easy at first. The reason I am interested in taking this class is because I have no idea what I want to do when I am older. I hear a lot about how many coding jobs there are and the amount of money coders make. The market seems insanely large for coding related jobs. I know that C++ and Java are pretty similar to C# so if I do end up switching in the future it won't be much of a problem. I am taking the class with my Dad and Brother as well, and all I hear out of my Dad is this class is going to get harder and you will struggle and then I think about how much money I am going to make and how I will have a decent job this early on. I am just stuck and I don't know whether I should stick with it.
&gt; I have no idea what I want to do when I am older bit of a red flag there. Its fine to not know what you wanna do, but you may not wanna drop $3K on classes if youre not in love with it. It sounds like you are more into the money aspect of it, (which is totally understandable) but there are easier jobs if you just wanna get some solid cash. Also java is pretty similar to C#, but C++ is much different. C++ is an extremely difficult language that many people struggle to efficiently use. Dont get me wrong... i love C++ but i see guys incorrectly use it constantly. What id say is this. In your free time, download visual studio and teach yourself some stuff. Its hard at first, but if you are truly interested in it its very learn-able. Tons of great tutorials online. And if you like it, then maybe enroll in some classes. Ive never taken a coding class in my life, theyre not always necessary. 
I have learned how to use Cinema4d by myself as well as Photoshop which are both complicated programs and I have made a little bit of profit. I am really looking to find a career that I can do as well as have me interested in me doing. We haven't used C# at all yet but we did start making our own databases which I did kind of enjoy. I am scared of my dad dropping the 3k and me not liking the class since we haven't used or done anything C# related. The class is based on learning C# too though and I honestly have no idea what I am capable of doing with it. I just really want to find a career because I hear a lot of people my age in fact my friends who know what they want to do and I am over here lost. I just have no idea if I should stick it and see if I enjoy learning C# or just leave it. From what I know, I am also able to learn how to take the class later because the guy who is teaching it does this often.
C# is a totally different skill than learning how to use software. I dont know what to tell ya bro. What youre saying is basicly the equivalent of this: "Should I learn how play basketball?? I've never played before but I heard that NBA players make tons of money. I taught myself golf and im pretty good at baseball so i figure if i take a $3000 class about basketball ill be able to pick it up and that will be my career path" Tons of people aren't cut out for coding. I'm not saying you're not, but in order to make a solid decision on it i think you should try it out yourself by downloading Visual Studio Community (its free!) and play around in that. 
Alright man its just I am so torn haha. I guess I have been looking at a few careers like a doctor, can't say my GPA is quite high enough or a teacher. I guess I am just going to drop it, I will tell my dad. I feel like its not worth putting down the $3k without actually trying coding myself. I have been on computers since I was 4, (I AM A BIG TIME GAMER) and I have always been insterested in some PC related or gaming job. Any advice?
You shouldn't take these classes at all. They sound like a waste of money. Start learning this stuff on your own using books and free online resources, then apply for colleges for a computer science related course.
I just dont want to leave my brother in the class with my Dad and the teacher (my bro is 24). He is quitting his job to become a C# coder but I have learned other programs just by doing what you said and I prefer that way. I could take computer science next year in high school and not worry about dropping $3k
Youre supposed to find something you like and that youre good at. I dont know you so i cant really tell you what career youd like
Well this might sound kinda lame and I am not sure if you would understand, but I used to be into the graphics arts area, not quite like drawing insane pictures from scratch but rendering out things in programs and editing them. I enjoyed it so much but I didn't make much.
If only people didn't use their phones haha :p. My brother is telling me to at least stick around and build this app we are planning to make in C# any ideas? I know he is going to be a great coder though he is very good at SQL and we just started using it.
I am going to talk to my bro and my dad and ask see what they think. I feel like I should just listen to you guys and probably just drop it. I dont want to waste 3000$ when I could see if I like it first, but then again I haven't even gotten a chance to touch C#.
nah, ive been using photoshop, illustrator, and indesign for around 6 years. I love graphic arts. I love ui design. This is my recent project : http://imgur.com/a/HxBWJ . I concepted this in photoshop initially, then i wrote the code for it. Heres a ui design ive been working on for fun. http://i.imgur.com/R2i5qTr.jpg its a multi channel radio streaming website with a social media element added to it. I found a great web developer online thats helping me out with the code side of it (im not great with web development)
Here is my portfolio: https://vexxgfx.carbonmade.com/ Some stuff is missing, but those were my final works before I quit my design life. But wow your project looks pretty sweet. I thought C# had some web dev to it as well?
Feel free to share your code with [.NET Fiddle](http://dotnetfiddle.net/) if you are looking for review. Good luck with your program :)
Of course this isn't possible in C# since the CLR is a garbage collected runtime.
It would require automatic reference counting, so not really compatible with the CLR. If not reference counting, it would require a lot of manual hoops when you don't want to dispose your object at the point you leave your function, etc.
They can't effectively leave the current method, though, or have their types be named.
Much worse is consuming them: x, y = getStuff() vs var t = GetStuff(); var x = t.Item1; var y = t.Item2; 
&gt; everything has to be an object or a struct How is that an actual limitation? &gt; You can't define a function outside of a class Incidentally, you can in the CLR, just not in C# :p
But you have to use the alias sytax in every file where you want to use it.
Thank you Aloisdg I'm going to check out your links. edit: I see ..dotnetfiddle shows me the IL.... interesting! Nice link thanks.
Stop teasing us like this... But seriously, that look super slick. Shame you can't share it with us.
Personal project: - [SharpResume](https://github.com/aloisdg/SharpResume) - It is a C# PCL for JSONResume. JSONResume is an open source initiative to create a JSON-based standard for resumes. (Everything was made today :)) - [Gravimage](https://github.com/aloisdg/Gravimage) - It is a tiny C# PCL for Gravatar. It just convert an email to an image url. (Merge the pull request of another developer :)) I plan to build an UI for [CountPages](https://github.com/aloisdg/CountPages). Probably with mahapps. And I am thinking about rename it Doocu. What do you think[?](https://github.com/aloisdg/CountPages/issues/1)
Your code looks weird, I think something is missing. But I guess what it's trying to do is implement coroutines, so it can have the explosion running while some other thing also happens (and the rest of the thread doesn't freeze). Didn't do much Unity3D, but the call to ``fadeToBlack()`` should probably not be direct but queued in the Unity "coroutine scheduler" using ``StartCoroutine(fadeToBlack())``, or something like that for it to actually work. Co-routines are a way of implementing cooperative multi-tasking, and they help a lot to synchronize things, and implement animations or events that execute along time but depend on one another. Take a look: http://unitypatterns.com/scripting-with-coroutines/ For those thinking that this is *"omz the basterd way of codings, unity treating C# as script"* then [I guess you must know better than guys behind the C# compiler, right?](http://blogs.msdn.com/b/ericlippert/archive/2010/10/25/continuation-passing-style-revisited-part-three-musings-about-coroutines.aspx) Yeah, maybe not... The major problem some people see with this kind of thing is the ``while(something)`` loop, people mistake that for a busy waiting thing. It's not. When you implement co-routines system, you most likely also have a co-routine scheduler, and when a co-routine yields it yields to the scheduler, making your code stop for a while until the scheduler decides to make it active again. So it's not running the while loop like crazy unless Unity co-routine scheduler wants it.
Couple of comments, you've got Chunk Chunk in Chunks, it should ideally be Chunk chunk in Chunks. Local scope variables are casedLikeThis. Fields are _namedLike this. Class properties are NamedThisWay. Also you basically never need to specify Int32 etc: https://msdn.microsoft.com/en-us/library/x0sksh43.aspx
I'm thinking more in the current stack because that's where they're most useful in C#. So maybe variables of this type (or usage) couldn't be member variables. Alternatively you could use WeakReferences to store them as members? I'm not entirely sure except that there have been a number of times where I've needed this behavior or have had to use uglier code because there is no RAII.
I prefer PascalCasing...I work alone and all my work is done in the editor so the distinction between class and object is obvious because of color coding...I find camelCasing unpleasant to look at and annoying to type. I don't like using underscores for fields either unless they're a backing store for a property; if they're not I just use the this "keyword". Not sure what you mean about the uint32. I'm using all 32 individual bits as flags, so it's important that one of the bits isn't treated as a sign bit. So I have to use a uint, standard int is no good. Also, it's important that the int is 32 bits not 64. My project is more than 13 years old and has changed from pascal to c++ to c# over time....I seem to recall the default int in c# has changed from 16 bits to 32 and maybe one day it will change again to 64 . I need it to be exactly 32 bits and if I just say "int" I can't be completely sure that it is... I had a look at your link but it doesn't seem to apply in this case... Anyway thanks for your comment though. I know many people *do* follow your conventions. 
Wouldn't something like chunks.Where(x=&gt;IsVieweable(x)).ForEach(chunk=&gt;chunk.Fill(.... )) work? EDIT: I would probably write an extension that would let me write chunk.IsVieweable etc :)
1. There is no extension method named `ForEach` as part of the .NET framework. 2. Writing an own extension method like that is a bad idea: http://blogs.msdn.com/b/mazhou/archive/2011/09/21/why-no-foreach-method-on-ienumerable-interfaces.aspx 3. Writing `.Where(x =&gt; IsViewable(x))` is silly. When the parameters match you can write directly `.Where(IsViewable)`.
Thank you for the reply! I will clean this up. Any more feedback is very much appreciated!
Hello all! I've updated the code a little bit. Will update the rest soon.
I figured he had a List there. Thanks for the pointers, learned something new here :)
Yes, he had a list. And yes, List has a `ForEach` method. But when you call `.Where(..)` you don't have a list anymore, you have an `IEnumerable&lt;T&gt;`.
&gt; Avoid Pokémon exception handling [Hah](https://zippy.gfycat.com/AcceptableColossalEastrussiancoursinghounds.webm)
I can :) im open sourcing it, i have to clean it up and rewrite all the dependencies on code i wrote specifically for the company
http://i.imgur.com/DHvATgn.jpg i actually like the white theme better!
That's awesome!
Here is the [code](https://dotnetfiddle.net/NBkFbh)!
That easy? Damn, and here I am, trying to explain it with something so complicated... Thanks I'll check it in a sec. Edit: Yep, that was the only cause. Thanks for pointing it out!
I'm surprised this even compiles with the question mark after PropertyChanged: PropertyChanged?.Invoke Have you tried removing that question mark? Edit: thanks all, I knew about null variables but not that new syntax.
That's not exclusive to Unity, though, that's a way you can implement coroutines in c#. Read the link I posted about where Eric Lippert explains it better.
Well, it does what the OP asked for in terms of functionality, but allocating a list when you have absolutely no need to is really not good practice. The OP seems like a relative beginner with regard to this stuff so I think it's valuable to do things properly so as to demonstrate best practices.
Got C#6? http://prasadhonrao.com/c-6-0-language-features-null-conditional-operator/
sure if i knew how. im using an ssd drive, i wouldn't really mind storing it on disk.
Good. And remember these words, it took AngularBeginner longer to write all of this than to watch the whole video. ;) Joking aside, all of the points above are propably learned over the course of 3-5+ years in business. Stick to 'em. Even if some coworkers will call em ridiculous - they'll be worth it in the long run.
What's a good naming convention for WinForms controls these days?
Www.pastebin.com
I want to make a websiye like pastebin but with more features for syntax highlighting. Pastebin syntax highlighting is pretty lame. It just knows all the c# keywords and makes them a different color. Thats not what im looking to do
http://gist.github.com
Thanks for a real answer. My datacontext is defined on the page element, does this matter?
A good case for this would be an RES extension that does sub specific highlighting. Not something I'd be interested in helping along though lol.
No, because page is at the top of element hierarchy and every control will inherit it unless it specifically defines it (sets it's own). Post the whole class that contains BrushWidth or at least it's name, post the code where you declare an instance of that class and a code that shows where you are declaring a DataContext.
Some people do this for a living and can't just adopt a new version of a language willy nilly.
Not directly. I construct it manually in some code where we show where in the document it can't validate, in an error to the user. Basically by counting, string concatenation etc. 
I'm almost 50; I don't have the energy to code when I'm done with work for the day. That's time spent with my family. I'm still using VS 2008 and SQL Server 2008 because that's what the client requires. This fall the plan is to update to SQL Server 2014 and maybe next year we'll go VS 2015.
Well, you don't understand the concept of MVVM correctly. Give me a second and I will give you a working example. EDIT: Don't really have time now and don't want to give you a bad example. Will post tomorrow.
IDE One is pretty good though it doesn't allow XAML: http://ideone.com/E4I3If . It even lets you run your code.
Like www.dotnetfiddle.com?
I guess that you use .net Interop to call into native functions. My assumption is, that those interop declarations are wrong (e.g. use uint or int where IntPtr should be used, structure layout, etc.). The fact that executing the application in a 32 bit environment seems to support this assumption. I'd compare the interop declarations with the real Win32 API and fix all the inconsistencies. EDIT: This ```uint``` for size/length seems suspect to me, but I honestly didn't look up the corresponding API definitions.
Nice :) Why are you returning -1? "Exit" doesn't seem to be an error, just the end of the program. If you return 0, maybe you can improve your while loop. ;)
Relevant username?
thx for the replay! can you put it in more layman terms? im pretty new to this, and this is a work project that has been dropped on me. if i understand correctly you are saying there is a difference between the variables between 32 and 64 bit systems. as in, int, uint and intptr are not the same between the 64 and 32 bit? so what do i need to check exactly? 
The int and uint types have a size of 32 bits, IntPtr has the size required to hold a pointer/offset, e.g. 32 bits in a 32 bit environment (or 32 bit process on win64) and 64 bits on a 64 bit environment. EDIT: Another thing you might want to check is the color structure layout (member alignment). The ```TranslateColors``` function takes a union, which means that the size of the union should be the size of the largest member of the union. However, a quick peek at the MSDN documentation doesn't show anything suspicious with the accepted stack overflow answer. In this situation, I'd check for bugs in my own code or take a look at the original C header files from the Windows SDK.
ok so uint, is 32bit in both 32 and 64 bit, so it should not make a difference intptr has a different size between 32 and 64 bit so maybe its the problem? which seems odd cause it just hold the pointer... i guess im doomed :) 
is this something beyond my control?
"I have a million dollar idea! I just need someone to make it." How many times...
At work: Building (with my team, of course) a Learning Management System for a nearby Diocese. Interestingly enough, this Diocese actually oversees the high school that I graduated from 2 years ago. Also making finishing changes to a Customer Relationship Tool we built for a large truck part manufacturing company. At home: Working on a project that I won't quite reveal the concept of just yet :p. Like the CRT and LMS we're building for work, I'm also creating this project with a Web API backend and Angular SPA front end. It's going pretty well, and hopefully I can help a ton of small businesses out if I'm able to keep it self-sustainable when it comes to azure web hosting/godaddy domain name fees with some ads. Now that I think of it, I should probably get to working on that now!
non taken i have no experience. ill try to post the code, thx!
How is it "working with you" if you can barely fudge together a bit of html. Whoever takes this up will be doing all the work, I'd put money on that.
So you want to make www.dotnetfiddle.net?
Are you just wanting to let the user 'log in' using an IE session, then take control of that session? That might be an easier way of doing it, you won't have to worry about the capture. Also what kind of site puts up a captcha on the first log in? I mean I think fanfiction is normally strange to begin with but still, that strikes me as most hostile.
Thank you, I'll take a look at it tomorrow, because I don't have access to my PC today.
Thanks.
Thanks but no thanks. Can you suggest different approach?
Is it possible to use IE for this, instead of using HttpClient? If so, that would be perfect for me.
Pay the homepage owner to provide an API to access for you. Or deal with OCR and try to read the captcha and answer it correctly.
No, that makes no sense. IE would also get the captcha.
No because you let the user enter the capture in IE, then hijack the session cookie?
Use [windows.web.http.httpclient](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/windows.web.http.httpclient.aspx) to open a browser to grab the captcha so your user can enter it.
Ok, so the WebView control is a bit shit. However it has the functionality you need. First off, log into the site using a desktop browser with dev tools turned on. Look at the response setcookie. Find out what that session cookie is called. Now because the WebView control is shit (don't know if I've mentioned it's shit enough times yet, it's a bit shit you see) we will have to hack our way into the cookies, yey! Thankfully we can run javascript on it, such as eval, and get the result, there is a quick [example here.](http://blogs.msdn.com/b/wsdevsol/archive/2012/10/18/nine-things-you-need-to-know-about-webview.aspx#AN4). Ok so you know the cookie you want right? Brilliant, because say you've got a control called webView1, you can now go var cookies = await webView1.InvokeScriptAsync("document.cookie",null); And you've got your cookies. You can listen to the WebView navigation events, to find out when the user has submitted the request OK.
Can I force the WebView to load Desktop versions of websites, or is it too shitty for that?
I bet if you actually *read* the error message, it would tell you what was wrong. 
Yes, with your own user agent string. But be warned, it's horrible! Someone posted a nice example on SO: http://stackoverflow.com/questions/13774396/custom-user-agent-for-a-webview
Excellent find. FileSystemWatcher is a headache.
Hey, id love to check out your site and interface! What stage of the redesign are you in, do you have photoshop mockups yet or just conceptual ideas?
Ive written 2 of my own pseudo languages (one is just a markup language and the other is a powerful network execution language) and ive written full featured IDEs for both with syntax highlighting and code refactoring. I know that web development is different, but much of the same logic will apply.
Ah, that's not how you pitched it. Your post sounded like the classic "I know some html, wanna build a thing, it can't be that hard right?"
Yes, I meant that the language that was being used for handling/scripting events, animations, etc, was C#. It was definitely being compiled after each change and utilized through the Unity API.
Oh, that's how I learned :P Is there anything I can add to this program?
Nope. You need to define the prefix, build a bridge, and get over it. 
Other than theming, I would say .NET Fiddle and http://executify.com/ pretty much cover the OP's needs.
UWP has res scaling/dpi scaling built in by default and there is no way around it. Don't hardcode sizes like that because it won't work. Looks like 1920x1080 is being scaled down to 80% of it's original size, which is 1536x864. It is in there so that some apps don't look super tiny on high res monitors.
Before I dove in too far, I wanted to get a feel for the interface. I was working with HttpClient, the text I was trying to display from the call was being cut, so I was getting caught up on display issues. That ratio seems correct, I will pursue using scaling content, as the end result will be that way. Thanks!
I downloaded the demo. I notice when I delete a directory it won't list the it's subdirectories nor will it list the files in those subdirectories. Any idea how I could get it to do that?
No. Otherwise a control could exist in both and xaml wouldn't know which one you meant. 
In addendum to this: an UPDATE (or INSERT) statement only manipulates a single table. So concerning the original question afaik (I'm not a SQL god) the answer is no. You can however use a JOIN statement in an update, but this is only for elaborate updating (eg, copying values from several tables to another). UPDATE DestinationTable SET Value1 = SourceTable1.Value , Value2 = SourceTable2.Value FROM DestinationTable INNER JOIN SourceTable1 ON DestinationTable.Id = SourceTable1.DestinationId INNER JOIN SourceTable2 ON DestinationTable.Id = SourceTable2.DestinationId WHERE DestinationTable.SomeValue = 'X'
Now your code could look like [this](https://dotnetfiddle.net/o1Qn1p) [spoil? ;p]. By the way, thank you /u/Sacastinator!
I used to do my UI mockups in Photoshop/MsPaint, but then I discovered Balsamiq which I found much faster and just as effective. I'd recommend it if you're feeling stressed for time :) http://webdemo.balsamiq.com/ EDIT: I should clarify that this is only a tool I'd recommend when mocking up controls and layout, not detailed high-fidelity mockups that include colors, graphics, and other detailed style elements. :)
just as effective?! Looks like a pretty good tool for wireframe concepting, but itd be tough to create a full ui in it. What i love about photoshop is the precision and the control you get over layer grouping, parity, manipulation, etc. I just wish there was a tool that was a mix between photoshop, autocad, and css with included stylistic variables and ability define property bindings.
There are plenty of times you need things that aren't as powerful as an object, which has to be powerful enough to solve all cases. All the types between structs and objects in F# are really powerful and useful.
Oh sorry I wasn't thinking, I guess it depends on the context. For me, I use it to convey the application/window/form controls and layout. I would not recommend using it for mockups that are meant to convey colors, images, detailed graphics/styles, etc
I'll be interested to try this out. Doubt my company will switch anytime soon though. We just got VS2012. 
If all you're doing is using the browser instance in headless mode, I'd use [AngleSharp](https://github.com/FlorianRappl/AngleSharp). It's a fully-custom .NET browser engine, totally independent of all the desktop browsers, is cross-platform, focuses on standards compliance, supports interactive (headless) use, and Javascript execution using a separate Javascript engine (currently has built-in support for JINT).
Like it's already been mentioned ask some obvious questions. However when I interviewed, I would usually start by introducing myself and what I do. Then I ask about their past and then I try to make it more conversational by discussing something I worked on recently, code standards, new things happening in the development community, etc. to see if they 1) fit our company culture, 2) have a passion for the work, 3) can share experiences that relate to our specific work. If you aren't drilling them with questions you tend to get more realistic answers out of them. However our company was very much active in paired programming to complete certain issues and greatly encouraged peer to peer help and discussion. If they could figure it out with help and were able to contribute as well, they would typically fit in. Then we also had tests which were, again? Kind of short but they were all issues/things we had to deal with over the past month. 
I recently got my resume in this format and hosted in github. Got it publishing up with a theme to azure on commit. But I'm relying on resume-cli for all that. Might be kind of interesting to change that up to be a C# app. Thanks for this
To an extent that is far more limited than what is possible in C++. String immutability and every reference object having a count will limit performance in a way .NET native will have trouble optimizing.
Every reference object having a count?
wow thx! thats way more then i exepcted! much gratitude!
Oh, thanks for clearing that up for me. I guess I am going with mono then. Most tutorials I find for mono tend to be about 10 years old for some reason. I guess I'll just jump in and start playing with it.
Mono is just a cross-platform runtime for .NET. In theory, there is nothing Mono-specific you'd need to know. You can build your app on Windows (using Winforms or GTK#), compile it and run that same compiled binary on Linux/OS X/*BSD with Mono. Of course, there are a few things you need to take into consideration when writing any cross-platform code (stuff like path separators and case-(in)sensitiviness of the file system), but a vast majority of that is not Mono-specific in any way.
Just jump over 2012 and 2013 straight to 2015.
That is pretty cool. Which of the built-in generic collections use AVL trees for searching? any? Does anyone know what sort of algorithms the built-in collections use to search?
Dont go to technical ? [I don't remember how to balance a damn binary search tree, and that's perfectly OK](https://www.reddit.com/r/cscareerquestions/comments/3i23iv/i_dont_remember_how_to_balance_a_damn_binary/) : [The Technical Interview Cheat Sheet](https://gist.github.com/TSiege/cbb0507082bb18ff7e4b)
My app just uses some labels, text boxes and a data grid styled with a theme. Will the gui just port straight over to Mac without me having to remake it? I don't care about it being pretty, if I don't have to manage two seperate gui then that would be awesome.
Is it possible to manage one gui for all platforms?
I think they were hinting that the CLR doesn't use reference counting. It uses a mark and sweep GC.
OK cool. I am fine with how the winform app looks, if it looks identical on mac without any need for making another UI then thats ideal. I'm sure there is a "gotcha" here somewhere that I am missing though, i guess I'll have to make a test mono app to see.
My bad. You are right
Ask alot of questions about action filters. The pipleline is everything of MVC. When i interview people one of things i dig on circumspectly is if they'll state a MVC controller is itself an action filter. Very few people understand this fact (or seem to state it atleast). Understanding the MVC controller is an action filter is a profound concept. Acknowledging that even the "heart" of ASP.NET MVC, the controller, is itself an action filter really explains everything you do with MVC. Also talk about LINQ. LINQ is imperative to modern development. Not a single method that consists more of 8 lines of code will be written by me goes without LINQ. I would only strip out LINQ if the profiler said it was *the* bottleneck. I've been working with large object maps and indexes, **hundreds of millions** of data objects. LINQ with smart usage of defered execution takes it like a champ.
About 6 months ago I switched from ADO.NET to Entity Framework and I can tell you I will never go back. I have never tried Dapper, but I will say that EF has made my life a lot easier even with its learning curve. I hope that helps!
I'm using EF now and I can tell you that if I had issues, I would use Dapper for complicated queries (weird JOINs or whatever). But I will never use straight ADO.NET in my personal projects. I have had too many DBAs in my professional life force me to use that shit with Stored Procs and it is the most unproductive shit ever.
When I have to interview people I usually ask them to implement a `LinkedList&lt;T&gt;` class. Linked lists are straightforward enough that I think people ought to be able to implement one on the spot with a list of methods. This is also a really common question so I suppose it's not exactly a shocker to people, necessarily. That said, a whole lot of people can't clear this bar.
EF or Dapper. If you need full control over SQL queries use Dapper otherwise use EF.
Me too.
oh never thought views can do that thanks I'll try that
IIRC, Sorted Set and Sorted Dictionary (uses Sorted Set) are built on Red-black trees (another self-balancing binary tree): http://referencesource.microsoft.com/#System/compmod/system/collections/generic/sortedset.cs As a general rule, collections where you want ordering + fast-lookup will most likely use such trees.
There's a few caveats, so it may not work for your specific needs, but it may be worth looking into. From the [MySQL manual](http://dev.mysql.com/doc/refman/5.6/en/view-updatability.html): &gt;It is sometimes possible for a multiple-table view to be updatable, assuming that it can be processed with the MERGE algorithm. For this to work, the view must use an inner join (not an outer join or a UNION). Also, only a single table in the view definition can be updated, so the SET clause must name only columns from one of the tables in the view. If that doesn't work for you, I don't see any way around writing your own update statements.
Same.
Mainly it's easier to use. Also, it is much faster out of the box. EF needs (or needed - I'm not up to date with the latest EF versions) to be configured for raw performance to be comparable in speed. However, doing so you skip a lot of features EF provides. Mainly it provides a model repository. This keeps your objects in sync. Very powerful stuff, if you need it. So, EF is much more powerful, but more complex to use. Dapper is popular because a lot of us don't need the power of EF. 
When I got my first job 1 year ago, I got thrown into a project that need to set up a data access layer. I had to read, and read, and try so many different things, but I came to EF and wow, I don't want to try anything else anymore. It saved me and a lot of time. Things was straight forward and no obscurity at all, plus support :D
[Dapper](https://github.com/StackExchange/dapper-dot-net) primarily and [ServiceStack.OrmLite](https://github.com/ServiceStack/ServiceStack.OrmLite) where I can. There is just too much overhead with EF and nHibernate, although EF7 seems to be fixing that to a certain extent.
Could you please elaborate on the benefits? I use ADO.NET and am very comfortable in it.
Yeah I hear you, definitely a skill I'll pick up soon.
First time i've heard of Dapper. Looks very interesting.
We're working on performance critical financial systems and have switched from EF to ADO with SPs. We just couldn't justify the overhead of EF, although things like context management are useful. 
I can't even remember the last time I used a SQL database of any kind.
Two options: 1. Keep a connection to the server constantly open. Then your server can use this channel to inform the client. 2. Let the client periodically request if there's a new update.
Being able to use linq instead of SQL is a big plus to me. 
It really depends on how you use ADO.NET. I've had projects handed off to me that have had 15k LOC of just random terrible SQL calls. I've seen classes that return the connection and reader to the caller counting on them to close it out. If you can use ADO.NET with foresight to the future things are going to be just fine, but giving that much power to shit the bed to random devs can end in tragedy easily. If you enjoy writing queries yourself and are sick of mapping sqlreader values to your classes, I would recommend looking into Dapper or PetaPOCO. If you want a bit of IQueryable in your life, but don't want to commit fully, NPOCO is great. If you want to fully commit, nHibernate and EF are the way to go.
2nd one seems, easier and less resource intensive on both the client and server. Thank you, I will look into this. 
Yeah, thats probably true. i type very quickly but i could improve on my accuracy a bit. I end up hitting Backspace, Ctrl + Space probably more than i should. Either way, extra function keys for triggering resharper live templates or commonly typed patterns might be nice if set up correctly.
I might argue that I did in some cases, because I had more time to think of a faster algorithm, but you're right, we don't need to care. C++ will continue to be appropriate in some cases. I was reacting to a recent thread [1] and link contained within [2] that brought back harsh memories of managing my own memory. [1] https://news.ycombinator.com/item?id=10095678 [2] http://ptgmedia.pearsoncmg.com/images/020163371x/supplements/Exception_Handling_Article.html 
I use EF with LINQ to Entities and a generic repository. Instead of focusing on boilerplate data stuff, I concentrate on just business logic and the interface. The generic repository helps keep me true to domain driven design, which is why i shy away from dapper and will never go back to ADO.NET.
I know right? XD. I was put on the project, my supervisor told me my predecessor used something from code project previously and made their other projects work. I checked it out the the thing was so old, like 7+ years old. So I google and read so many things, and figured out EF is what I wanted. I had to deal with a schema that basically 20 years old and have no primary or foreign keys whatsoever. I was fresh out, did a few internships but didnt have experience so 1 year is a stretch there. Left the company, but I heard EF did wonder for them on that project :) Edit: but seriously though, is DAL required more experience programmer to do?
You can still use linq on the data you retrieve using ADO.NET, since it's a .net feature, not an SQL one.
Might I ask what your doing that needs random elements from a collection?
EF surpasses Dapper for me in that you can "write and forget" your persistence layer for basic collections. EF's *magic* comes at a cost though - "warm up" times and heavy, complex queries when chaining LINQ statements or using child collections. This is where Dapper excels - it's performance is excellent.
Array searching can use binary search (provided your array is sorted), which is as good than any binary tree (better, in fact, due to data locality). No built-in collections use AVL trees. As for sorting, since .NET 4.5 the built-in array sort (also used for lists) uses a hybrid quicksort-insertion sort approach with cut-off at 16 elements, I think, and a fallback to heapsort if quicksort degenerates by more than a factor 2.
A card game :) * Drop one random card of your hand * Move this card somewhere on your deck * Draw one random card in my hand * etc. This kind of stuff
* Laptop: Lenovo x1 Carbon * Layout: Qwerty International instead of Azerty (I am french). I am looking to switch to [Colemak](https://en.wikipedia.org/wiki/Keyboard_layout#Colemak) layout. * Mice : common cheap dell (wireless). I broke my G5 and I looking to switch to [G502](http://www.amazon.com/Logitech-Proteus-Tunable-Customizable-910-004074/dp/B00IRHE892/ref=pd_bxgy_147_img_z). Hello /r/MouseReview * Keyboard: I will buy a [CM Storm QuickFire Rapid - Tenkeyless](http://www.amazon.com/Storm-QuickFire-Rapid-Tenkeyless-Mechanical/dp/B0068INSUM/ref=sr_1_1?srs=2529193011&amp;ie=UTF8&amp;qid=1440489493&amp;sr=8-1&amp;keywords=cm+storm+quickfire+rapid+-+tenkeyless+backlit) when I would have enough money. Hello /r/MechanicalKeyboards * Switches: [Cherry MX Brown](https://wiki.installgentoo.com/index.php/Mechanical_keyboards#Cherry_MX_Brown)
Great thread! I have some and Ill post here when I'm at work tomorrow. :)
&gt; Please avoid hungarian noitation ("btn") While I agree with you for variable names, a lot of developers prefer a quasi-Hungarian notation for Winforms control names. I like it for Intellisense grouping. There isn't a standard naming convention, though. There have been several Stack Overflow threads on this topic (duplicates, of course), and it really just boils down to a personal preference.
really? I think you miss the bigger picture here. do you use IQueryable with ADO.NET? I guarantee you don't.
Dapper and straight ADO.NET. Just never liked EF in any way. 
Thank you for the comment. I think it is time to learn more about thread-safe, the Parallel library and the lock keyword. Do you recommend any tutorial around this topic?
?. is the c3 6 null conditional. so obj?.Prop1?.Prop2 == null if any of the three parts are null. https://msdn.microsoft.com/en-us/library/dn986595.aspx 
I got tired of reimplementing the same extensions in each of my projects, so collected them up into my own NuGet library. You can [look through them all on GitHub](https://github.com/BitFn/Core/tree/master/Library/Extensions). They're all well documented, and mostly self explanatory. The ones I use the most are probably the ones that increment dictionaries with integral values, which is incredibly useful for counting anything. The LINQ extensions for Shuffle and ThrowIfAny are often useful as well.
EF and dapper are like are like vb to c++ in the 90s. Much faster at development time, with a performance hit at run time. In many cases, it's worth it though.
And that Random isn't random. 
The biggest pitfall is probably that `System.Random` is seeded with the current time by default, which makes it vulnerable to attacks as well as accidental duplicate numbers/sequences if two `Random` instances are created close together (up to ~10ms window I believe, depends on the quality of the system clock). I'm fuzzy on the details, but it's also just not a great implementation of a random number generator. This isn't obvious just from looking at its output, but it is slightly biased to certain values. I believe there is also an issue with the cycle length (how long it takes before it starts repeating the same sequence) and generating doubles. For anything remotely security related, an actual cryptographic RNG must be used. There is a builtin one in the `System.Security` namespace.
System.Random produces pseudorandom numbers quickly, which is plenty good enough for most purposes. Shuffling a song playlist, for example. But a sufficiently motivated person can exploit the fact that it doesn't produce *truly* random numbers. When money is on the line, or when doing anything relating to cryptography, you need better quality random numbers. Guessing the next song in a shuffled playlist might be a neat party trick, but a player knowing what the next card will be in a real-money game of poker is a big problem. Basically, whenever you pull a random number, you have to decide how big of a problem it would be if your "random" numbers were predictable. If it would be a big problem, use System.Security.Cryptography.RandomNumberGenerator. If it wouldn't really matter, [like a classic single-player videogame](https://github.com/id-Software/DOOM/blob/master/linuxdoom-1.10/m_random.c), something that just *appears* random is good enough.
After coming back to C# after a few years of Ruby, I got annoyed by the lack of a .IsBlank? method. I know, it's pretty pointless, but it's useful to me. /// &lt;summary&gt; /// Syntactic sugar for "String.IsNullOrEmpty(x)" /// &lt;/summary&gt; /// &lt;param name="this"&gt;Extends the string&lt;/param&gt; /// &lt;returns&gt;True if null or empty, otherwise false.&lt;/returns&gt; public static bool IsBlank(this string value) { return String.IsNullOrEmpty(value); } The only other extension method I got a lot of mileage out of was a string interpolation function that is now obsolete in C# 6.0.
http://csharpindepth.com/Articles/Chapter12/Random.aspx
Random isn't good enough for anything but toy projects (it's predictable). Anything that needs truly random should use something like System.Security.Cryptography.RNGCryptoServiceProvider
The "update or add" operation is commonly called upsert, and it would have been my contribution to this thread.
Extension methods are particulary useful for LINQ. For example create a custom extension method that accepts a Roman Numeral number (as a string) and returns the corresponding integer number: public static Int32 linq_roman_numeral_string_to_int32 (this string arg_roman_numeral) { // http://stackoverflow.com/questions/14900228/roman-numbers-to-integers return RomanNumeral.ConvertRomanNumeralToInt32(arg_roman_numeral); } So you can now do a LINQ query on a collection using Roman Numerals to structure\filter it.
True - though I've seen upsert mostly in the context of data repository layer, so I decided to stick with the "Update" and "Add" naming of the IDictionary interface. I also think it's marginally more discoverable. Anyone looking for "Upsert" will find my method instead, tho anyone who doesn't know about Upsert would have a harder time knowing what it did by scanning method names.
It is random enough for my purpose.
Thanks!
See this is exactly what I didn't want to read. Why would a method that makes random numbers not be random? Seems completely counter intuitive. 
Wow, those are handy. Thanks! Edit: okay, Humanizer has already saved me time. Shit like this is why I love Reddit.
The [MoreLinq](https://www.nuget.org/packages/morelinq/2.0.0-alpha01) package contains a lot of good one too : &gt; This project enhances LINQ to Objects with the following methods: Acquire, Assert, AssertCount, Batch, Cartesian, Concat, Consume, DistinctBy, EquiZip, ExceptBy, Exclude, Fold, ForEach, Generate, GenerateByIndex, GroupAdjacent, Incremental, Index, Interleave, Lag, Lead, MaxBy, MinBy, NestedLoops, OrderBy, Pad, Pairwise, Partition, Permutations, Pipe, Prepend, PreScan, Random, RandomDouble, RandomSubset, Rank, RankBy, Repeat, RunLengthEncode, Scan, Segment, SingleOrFallback, SkipUntil, Slice, SortedMerge, Split, Subsets, TagFirstLast, TakeEvery, TakeLast, TakeUntil, ThenBy, ToDataTable, ToDelimitedString, ToHashSet, Trace, Window, ZipLongest, ZipShortest
Never used Dapper, but I tend to stick to straight ADO.NET over EF just because most of my projects are heavily data driven and are often inter-linked, so they're not limited to just the one application:database coupling. ORMs and straight ADO.NET both have their places where they offer a solid compromise between efficiency and ease of use. The key is knowing for a given project design, which is the appropriate way to go. 
IsNullOrWhitespace() may be more appropriate here.
I don't see what advantage your example gives when it's easy (and more readable than underscores, sorry) to do: var ints = someStrings.Select(RomanNumeral.ConvertRomanNumeralToInt32); or even why the `RomanNumeral.ConvertRomanNumeralToInt32` method isn't an extension itself? 
&gt;Why would a method that makes random numbers not be random? It's because computers aren't naturally very good at creating randomness. It's kind of the opposite of what they're designed to do. If you multiply 2\*2, you predictably want 4 every time. Trying to pry a random number out of that predictability isn't easy, but a number that *seems* random to a human is much easier. Just take a number that changes rapidly (like, say, number of milliseconds since 1970/Jan/01 00:00 GMT), put it through some complicated math, and presto - a number that looks random to the human eye. It's fast and easy. And if you don't care if somebody manages to predict what your random numbers will be, it's good enough. Like a Magic 8-ball app, or AI for a videogame. When you need to generate *truly* random numbers on a computer, there's different ways to do it. But virtually all of them require *time*. For example, you can get entropy by measuring mouse and keyboard input, and use *that* to generate random numbers. Or, your software could exploit quantum physics by various means, such as measuring alpha decay using specialized hardware. Radio static is another potential source of entropy. But no matter how you do it, entropy takes time to collect. Even if it only takes, say, 100ms, that's probably still way too long for AI in a videogame where you might need to generate a dozen random numbers for every "decision". So you only go that route if true randomness matters more than speed. You're right. It certainly *does* seem counterintuitive, but there's good reasons for it.
And I think that's what OP of this comment was saying, that he/she hates Sprocs. I feel like EF and sprocs, as with any technology, depends a lot more on the person implementing it, than with the actual technology itself. I've ran some rather large applications using EF, and when my sprocs are written correctly, I haven't ran into any issues.
In most cases, you are absolutely right. Thanks for pointing that out. In the particular app I'm working on now (and thus, copied from), whitespace needs to be treated as a non-empty string for a very specific reason (trust me, that's a rabbit hole I spent over a day trying to escape from). Which is why IsNullOrEmpty is the more appropriate choice in this instance. But again, you are absolutely right that IsNullOrWhitespace would be better in most cases.
Linq is an AST generator that can have any kind of back end. What you suggest would pull back too much data and then use Linq to filter/shape it. But if you use e.g. the NHibernate Linq driver, it will create the appropriate SQL to get only the data you need in the shape you request (e.g. select only certain fields, etc.). Used this way, Linq becomes compile time type-safe SQL.
I got annoyed at a project that I was working on that made large scale used of ASP.NET CheckBoxLists everywhere in an application. The problem was, there is no native function to return things like SelectedItemCount or SelectedItems. The native methods/props only returned the first item found in SelectedItem, etc etc. Everywhere in the code, the original developers had these foreach() loops to count selected items or to create a list of the selected items, which was annoying as hell. There was no reason to take 6 lines of code to generate a simple integer count or list of selected items. So I added these two extensions (copied their original code and cleaned it slightly) and started refactoring the code every time I encountered one of those horrible copy/pasted loops. **Neither are a best-practice scenario method, but this was more a case of reducing code clutter since they were copy/pasting the original loops 200+ times in the application.** public static ListItemCollection GetSelectedItems(this ListControl source) { var selectedItems = new ListItemCollection(); foreach (var item in source.Items.Cast&lt;ListItem&gt;().Where(item =&gt; item.Selected)) selectedItems.Add(item); return selectedItems; } public static int SelectedItemsCount(this ListControl source) { return source.Items.Cast&lt;ListItem&gt;().Count(item =&gt; item.Selected); }
Interesting, what VS commands can you map your gaming keypad to?
Pretty sure if you understand programming, that's like one of the first things you learn after 'Hello World'.
Ha, I eventually wrote one exactly like this after getting frustrated with legacy code that was ported from early C++ days. That article might have saved me some headache if I found it earlier.
Same here. Well, actually I've flipped back and forth depending on the company I've worked for and what the product does. For simple CRUD sites, EF is very nice, but for performance critical applications with complex data models, I prefer ADO.Net. I do try to avoid SPs as much as possible, but the current system I'm walking in on has hundreds of them. The current company and past companies that I use ADO with are financial software. The EF companies were basic UI-heavy sites with minimal business logic.
Dapper just runs a command (query/sproc) and sticks the results into an object/list of objects. It's a smaller tool.
Thanks!
I've implemented several of those on my own. I'll have to look into that package. Thanks!
It's a cleaner way to ensure all the references are broken. And honestly Newtonsoft's JSON lib is really good.
I use the shit out of my IsBlank method too!
You're probably right about not letting it apply to all objects. But in the business application I'm working in (MVC 5) the only streams we pass around are all marked with json ignore and everything else is simple POCO stuff for a CRUD heavy analytics/management application.
At work I'm using a Razor Naga and I have a lot of key combinations mapped to the inside of the mouse. Some of the more helpful ones are My refactor key (I use code rush, but I'm sure that it can be done with the jetbrains one), build, format document. The refactor one is amazing and I use it alot, the others are just helpful. There is a dark side to this though, I really think my productivity drops when I don't have the mouse as I am constantly looking for the shortcuts.
It's a null check. If the value before the ? Is null it will short circuit and return null instead of throwing a null pointer.
That's a keeper
I see. So you build the command first in sql and the associate it via dapper and just call it? Does that mean you have to hand create any lists (or classes, not sure how it works) to get the specific data back? 
Yeah, you define a class (by default the field/parameter names must match between the class and result set) and then call: var object(s) = command.query&lt;myclass&gt;("name of stored procedure / select x from y", parameters, command type [text/sproc]) Its a super light weight way to map your result set to an object or list of objects.
I can see how that would be nice. I find myself writing a view here and there b/c doing super long queries is tough in EF and way to performance prohibitive. 
Not sure what the point of it is, Dictionary is already generic. Your class "GenericDictionary" actually makes it not generic. You could just make a Dictionary&lt;string, Example&gt; and the index accessor would return an object of type Example, already casted and not boxed in an object. Or if you want to store multiple object types as the value in the dictionary, you could just use a Dictionary&lt;string, object&gt; and make an extension method for generic casts public static T RequireType&lt;T&gt;(this object @object) { if (!(@object is T)) throw new Exception("RequireType&lt;T&gt; cast"); return (T) @object; } then use it like this var valueExample = _dict["Testing"].RequireType&lt;Example&gt;();
I wrote my own benchmarking method for A/B testing, but that is much more elegant. Yoink! :D
Agreed that having the client check periodically is a good solution. You can also consider (in addition) to sending a udp packet out to the clients, and having your app be listening on the udp port. You would have to know the client ip of each client, and should put some code in to protect to verify the packet. If all clients are on the same subnet, you could use a broadcast. Last, if you want to get a little fancy, you could just use multicast which would eliminate the need for open connections and knowing the client ips. Again, having the client periodically check is a best solution, but these other items can be added to speed up the process a bit and give you a little more control - push vs pull. Hope that helps
I assume ListControl.Items can contain types that aren't ListItem otherwise .Items would already be an IEnumerable&lt;ListItem&gt; and you wouldn't need to Cast()? If that's the case, you can replace the Cast&lt;ListItem&gt; to OfType&lt;ListItem&gt; to make that second method just a tiny bit safer with presumably, no extra overhead. (But I didn't look into the objects so my premise may be entirely wrong to begin with.)
Forgive me for being full retard. I should know better do post a clear example of how it was useful to me. I actually used them with a list kind of thing, I don't know why I thought that it would make sense with a class like in my post.. I finally found the link to where I found it. Read reply's. I had pretty much the exact situation as the post of this link. http://stackoverflow.com/questions/654752/can-i-create-a-dictionary-of-generic-types Have an upvote for not being an ass while giving me information. :)
Hey mods, there's been a LOT of useful stuff put in this thread so far. Any way it could get added to a FAQ or the sidebar or something?
I'm an EF (with MySQL) guy, but lately I've been looking at Dapper and kinda like it. Although I do like EF's "magic" for complex query operations and migrations. Code-first migrations make EF a win for me. EF Migrations though come at a cost, which is fixable if you disable model checks on the database and rely solely on manually running `Add-Migration` and `Update-Database`. 
You should use the TotalMilliseconds property of Elapsed rather than the Milliseconds property. Milliseconds only gives you the milliseconds portion of the total time span rather than the number of milliseconds the action took. public static void Benchmark(this Action a, int iterations, int numberOfBenchmarks = 1) { var process = Process.GetCurrentProcess(); var oldAffinity = process.ProcessorAffinity; process.ProcessorAffinity = (IntPtr)1; double totalMilliseconds = 0; for (int benchmarkNumber = 0; benchmarkNumber &lt; numberOfBenchmarks; benchmarkNumber++) { Stopwatch stopwatch = Stopwatch.StartNew(); for (int i = 0; i &lt; iterations; i++) { a(); } stopwatch.Stop(); totalMilliseconds += stopwatch.Elapsed.TotalMilliseconds; Console.Write(stopwatch.Elapsed.TotalMilliseconds); if (numberOfBenchmarks &gt; 1 &amp;&amp; benchmarkNumber &lt; numberOfBenchmarks) Console.Write(", "); } if (numberOfBenchmarks &gt; 1) Console.Write("Average: " + (totalMilliseconds / numberOfBenchmarks)); Console.WriteLine(); process.ProcessorAffinity = oldAffinity; } EDIT: Spelling
You need a comma before forename in the console.writeline to separate the text and the variables that should be substituted. The specific overload of Console.WriteLine you're using takes a string format as the first argument and then any number of additional arguments to substitute the string. As you know, all arguments need to be comma separated.
Thanks for noticing that! I totally know that issue and have fixed it several times in other people's code. Serves me right for copy/pasting this snippet without strongly interrogating it. Thankfully, all the benchmarking I've done with it thus far has been for sub-second methods.
To add to this, it even put a red squiggly line exactly where the error occurred. WriteLine() is a function. Arguments to function calls have to be separated with commas. Your first two arguments aren't, which is what the error message is telling you.
From what I can tell, you need something along the lines of Console.WriteLine("Hi {0} , you are {1}" , forename , age); you're not separating your format string from your variables, so it's assuming that "Hi {0}, you are {1}" forename is all one term, and it's expecting more (because you provided 2 variables to be filled in the WriteLine)
Thank you for that, works perfectly now just took the note down wrong 
No problem! I know it's snagged me a couple of times ;)
ListControl.Items only holds elements of type ListItem, but the underlying ListItemCollection implements *IEnumerable*, not *IEnumerable&lt;ListItem&gt;* which is why the Cast() is there (because Count() requires an implementation of IEnumerable&lt;T&gt;). That's actually just how Resharper reduced the original loop; I didn't actually bother to double check how it reduced it. OfType() is probably the more appropriate option here.
Generic, super easy dependency property registration helper class i wrote, relies on a few extension methods as well. Allows you to register dependency properties with generics in much simpler syntax. Just paste this in your project and it works (youll just have to replace my exception string resource stuff). ASupports Register, RegisterAttached, and Addowner. Gives you generic property changed callbacks, generic coerce callbacks, and generic validation. Also gives you force manual value inheritance/precedence overriding. no casting required. public static class DP { public static T Get&lt;T&gt;(this DependencyObject i, DependencyProperty dp) { return (T)i.RequireNotNull().GetValue(dp); } public static void Set&lt;T&gt;(this DependencyObject i, DependencyProperty dp, T value) { i.RequireNotNull().SetValue(dp, value); } [MethodImpl(MethodImplOptions.NoInlining)] public static DependencyProperty Register&lt;D, T&gt;(Meta&lt;D, T&gt; meta, PropertyValidate&lt;T&gt; validation = null, [CallerMemberName] string autoFieldName = null) where D : DependencyObject =&gt; DependencyProperty.Register(GetPropertyName(autoFieldName), typeof(T), typeof(D), new FrameworkPropertyMetadata(meta.DefaultValue, meta.Flags, meta.ChangedCallback.TryInvoke, meta.CoerceCallback.TryInvoke), validation.TryInvoke); [MethodImpl(MethodImplOptions.NoInlining)] public static DependencyProperty Attach&lt;D, T&gt;(Meta&lt;DependencyObject, T&gt; meta, PropertyValidate&lt;T&gt; validation = null, [CallerMemberName] string autoFieldName = null) =&gt; DependencyProperty.RegisterAttached(GetPropertyName(autoFieldName), typeof(T), typeof(D), new FrameworkPropertyMetadata(meta.DefaultValue, meta.Flags, meta.ChangedCallback.TryInvoke, meta.CoerceCallback.TryInvoke), validation.TryInvoke); [MethodImpl(MethodImplOptions.NoInlining)] public static DependencyProperty Add&lt;D, T&gt;(DependencyProperty property, Meta&lt;D, T&gt; meta, DPExtOptions options = DPExtOptions.None) where D : DependencyObject =&gt; property.AddOwner(typeof(D), new FrameworkPropertyMetadata(options == DPExtOptions.ForceManualInherit ? property.DefaultMetadata.DefaultValue : meta.DefaultValue, meta.Flags, meta.ChangedCallback.TryInvoke, meta.CoerceCallback.TryInvoke)); [MethodImpl(MethodImplOptions.NoInlining)] public static DependencyProperty Attach&lt;T&gt;(Type owner, FrameworkPropertyMetadata meta, PropertyValidate&lt;T&gt; validation = null, [CallerMemberName] string autoFieldName = null) =&gt; DependencyProperty.RegisterAttached(GetPropertyName(autoFieldName), typeof(T), owner, meta, validation.TryInvoke); internal static string GetPropertyName(string autoFieldName) { if (autoFieldName == null) throw new Exception(FSR.DP.AutoCallerNameNotAssigned()); if (!autoFieldName.EndsWith("Property")) throw new Exception(FSR.DP.AutoCallerNameNotValid(autoFieldName)); return autoFieldName.Replace("Property", string.Empty); } } here are the supporting delegates for callbacks public delegate void PropertyChange&lt;in D, T&gt;(D i, DPChangedEventArgs&lt;T&gt; e) where D : DependencyObject; public delegate T PropertyCoerce&lt;in D, T&gt;(D i, T baseValue) where D : DependencyObject; public delegate bool PropertyValidate&lt;in T&gt;(T value); generic property changed notifier public class DPChangedEventArgs&lt;PT&gt; { public DependencyProperty Property; public PT OldValue { get; } public PT NewValue { get; } public DPChangedEventArgs(DependencyPropertyChangedEventArgs e) { Property = e.Property; try { OldValue = (PT) e.OldValue; } catch (Exception GENEX) { throw new InvalidCastException(FSR.Conversion.CannotDirectCast(e.OldValue, typeof(PT)), GENEX); } try { NewValue = (PT) e.NewValue; } catch (Exception GENEX) { throw new InvalidCastException(FSR.Conversion.CannotDirectCast(e.NewValue, typeof(PT)), GENEX); } } } Extended DP options for force inherit overriding [Flags] public enum DPExtOptions { ForceManualInherit, None } Generic Metadata public class Meta&lt;D, T&gt; where D : DependencyObject { public T DefaultValue { get; } public FrameworkPropertyMetadataOptions Flags { get; set; } = FrameworkPropertyMetadataOptions.None; public PropertyChange&lt;D, T&gt; ChangedCallback { get; } public PropertyCoerce&lt;D, T&gt; CoerceCallback { get; } public Meta(T defaultValue = default(T), PropertyChange&lt;D, T&gt; changedCallback = null, PropertyCoerce&lt;D, T&gt; coerceCallback = null) { DefaultValue = defaultValue; ChangedCallback = changedCallback; CoerceCallback = coerceCallback; } } Example of usage: public static readonly DependencyProperty MyTestStringProperty = DP.Register( new Meta&lt;ParentClass, string&gt;("default value", ChangedCallback, CoerceCallback) { Flags = FrameworkPropertyMetadataOptions.AffectsRender}, Validation); public string MyTestString { get { return (string) GetValue(MyTestStringProperty); } set { SetValue(MyTestStringProperty, value); } } private static bool Validation(string v) { return v != "Cant be this value"; } private static string CoerceCallback(ParentClass i, string b) { return b.ToUpper() + " and stuff"; } private static void ChangedCallback(ParentClass i, DPChangedEventArgs&lt;string&gt; e) { MessageBox.Show($" {e.Property} just changed from {e.OldValue.ToLower()} to {e.NewValue.ToLower()}. "); }
I'm French to, but living in Quebec. The Canada French qwerty is interesting, and closer to the US qwerty I use to code while offering accents and whatever. It reduces the gap between both layouts.
I build some extension methods for doubles and floats to convert inches to meters, meters to inches, radians to degrees, and degrees to radians. They help alot when dealing with physics programs. 
While we're giving example code to newbies, could we at least follow some best practices. Throwing a general `Exception`is universally frowned upon. I'm not sure what it gains you in this case anyway, since you can just do the cast and let the runtime throw an `InvalidCastException` for you. The exception message is also redundant since the method is already in the stack trace. I also really dislike `@object`. There are dozens of alternatives that don't resort to overloading reserved symbols. How about `self`, `obj`, or `value`?
I'm on Windows 10 right now and wanted to check Environment.OsVersion and this is [the result](http://i.imgur.com/GE1OqGA.png) Let me know how your attempt goes, /u/JamesWjRose! 
It hasn't been depreciated, you have to "Target your application for Windows" https://msdn.microsoft.com/en-us/library/windows/desktop/ms724832%28v=vs.85%29.aspx https://msdn.microsoft.com/en-us/library/windows/desktop/dn481241%28v=vs.85%29.aspx Added second link With this Windows 10 shows as version 10.0.10240.0
Fair enough with the exception thing. And i love @object, but i could see how it would be confusing as a reserved keyword. point taken.
in the app.manifest is all Ive done to get 10.0.10240 CS System.OperatingSystem osInfo = System.Environment.OSVersion; Console.WriteLine(osInfo.Version); Console.ReadLine(); app.manifest &lt;compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1"&gt; &lt;application&gt; &lt;!--Windows 10 Guid--&gt; &lt;supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}"&gt;&lt;/supportedOS&gt; 
I have used https://github.com/SecretDeveloper/Eloquent a few times. 
Possible Visual studio didn't feel like rebuilding after adding the manifest. Glad its working, and thanks for the gold!
C# strings are immutable, so combining strings using concatenation means that the compiler creates a new (third) string for every two concatenated. string myString = "foo" + 23.ToString(); "foo" //string literal, string 1 23.ToString() //string literal, string 2 "foo" + 23.ToString() //concatenation, string 3 String.Format() doesn't work the same way, in that it creates one final string, no matter how many objects are provided. string myString = string.Format("foo {0}", 23); "foo {0}" //string literal, string 1 string.Format("foo {0}", 23); //string formatting, string 2 Obviously this is a very simple example (and it only saves a small amount of memory), but hopefully you can see why string concatenation isn't always a great idea. Edit: fixing formatting
Thanks!
Yes. I was just adding additional information to the "It's a no-op" statement. I've also written ReturnEnumerable&lt;T&gt;, though I called it Yield&lt;T&gt;. Still looking for a better, concise name.
Interesting to hear some love for NHibernate here. I was under the impression that as of EF 4.1 (I think), that NHibernate didn't really have anything in particular to offer apart from some seriously rare use cases. I don't know that to be the case, but it's what I'd heard. Also, regarding the generated SQL, I have to say I've not had a problem with the SQL generated by LINQ/EF. It's generally been about as efficient as possible and often better than what a lot of developers can hand crank. Perhaps the queries I've seen with EF though haven't been complex enough to stress the LINQ to SQL compiler. I've always had a curiosity about NHibernate, but I've never spent any time learning it, I've been put off by the multitude of ways that things can be done (e.g. fluent, HQL, LINQ, config in code, config in XML etc). Might have a dabble tomorrow though. 
That is a valid point with the circular references. I'm only using it for a web api that is already returning the objects as serialized json so this issue won't happen without causing much larger problems. Someone else mentioned a George.Cloney Nuget package that I'll install and switch it out with (mostly cause of the name)
I'm a strong believer if you don't love it, you'll never be good at it. You might get by, but you need to enjoy it. Also, 'blank solution' leaves you with trying to come up with a problem you want to solve, which is challenging by it's own right and nothing to do with learning the language. Better to have problems provided so you don't have to worry about that part. For that, check out GitHub, find some open source c# projects that interest you, and see about fixing bugs, or adding features or contributing in some way. 
Here are some of my extensions: [Strings](http://pastebin.com/3QEKFyPK) [Primitives](http://pastebin.com/wg8EYd7d) [Delegates](http://pastebin.com/xKD4SqEy) [Collections](http://pastebin.com/35e8BHFf)
That implies that your extensions library has dependency on NS JSON lib which is inherently bad. Use reflection to create a deep copy.
Agreed, Dapper is probably closer to native ado performance wise, since its your own SQL, not code-gened stuff.
I do like to id my diapers. But seriously, that's a better example than the first response
Lol. Fixed. Thanks.
servicestack ormlite. clean and simple
lol. Thanks. But no. This: if (osVersion.MajorVersion &gt; 9) {}
I saw this, but the problem is that if/when Windows moves to version 11... The code we worked out will resolve this problem. But thanks
Aye, was poking fun of Windows 95/98 detection. https://www.reddit.com/r/programming/comments/2i14ny/if_osnamestartswithwindows_9/ for context, which the top post also explains why checking the major version is no longer allowed.
Maybe I misunderstood, you said " I'm using EF now and I can tell you that if I had issues, I would use Dapper for complicated queries (weird JOINs or whatever)." As though there was a possibility you could run across something you couldn't do in EF ("weird joins") that you could do in Dapper.
I find that EF is more verbose once I add in enough crap to get halfway decent SQL.
&gt; You could set the [CausesValidation](http://msdn.microsoft.com/en-us/library/system.windows.forms.control.causesvalidation.aspx) property to false. Credit: http://stackoverflow.com/questions/8751861/datagridview-bailing-out-of-cell-validation
I have a ton of them that I've implemented over the years but the one that I use the most is probably some variation of this: public static class IEnumerableExtensions { public static string ToString&lt;T&gt;(this IEnumerable&lt;T&gt; List, Func&lt;T, string&gt; ItemOutput, string Seperator = ",") { List = List ?? new List&lt;T&gt;(); Seperator = Seperator ?? ""; ItemOutput = ItemOutput ?? (x =&gt; x.ToString()); var Builder = new StringBuilder(); string TempSeperator = ""; foreach (var Item in List) { Builder.Append(TempSeperator).Append(ItemOutput(Item)); TempSeperator = Seperator; } return Builder.ToString(); } } Maybe not all that surprisingly, most of my extension methods are dealing with lists of items or strings... Also, another up vote for Humanizer.
All the stuff in the side bar is really good. If you don't already have Visual Studio check it out in the Getting Started section. Check out /r/Unity3d too, if you have any unity specific code related questions people there can help, I see beginners ask questions there daily. 
Good eye :)
Thanks for the tip! I see someone downvoted my post so I expect that it will be the only piece of advice I will get tonight. I will go check that out now. 
 The reason for that distinction is to distinguish local variables from properties, not classes. Syntax highlighting doesn't usually help there. I get the ugly thing, but you get used to it when you recognize that what it means, and it's going to be useful if ever the code has to change hands or if you change jobs to a team which cares about these kinds of things. You should try resharper btw. It would actually have flagged your foreach with the if statement and suggested a lambda conversion which would have safely generated the same code snippet aloisdg suggested. It also gives a lot of suggestions for code formatting, which helped me learn what falls under most companies standard coding guidelines, and can even be easily customized to your own conventions if you so desire.
On iPads, the text is falling off the white part of the page and disappears into the dark blue part, which is equally illegible.
Find some tutorials that actually teach you what's happening. I found this series as a great first project in Unity for myself: https://youtu.be/MbWK8bCAU2w You start with a new project, no downloaded assets, and the guys explains the code as he's writing it. He goes fast though, so you'll probably be rewinding a lot; but it really is a great series for learning. If the programming is still overwhelming you, you might want to hit up codecademy and go through the JavaScript tutorial just to learn base concepts of programming. 
I'm guessing the issues were performance issues, not functionality issues.
I would do all the tutorial game projects on the Unity website, and look at the scripting section as well. -http://unity3d.com/learn/tutorials -http://unity3d.com/learn/tutorials/topics/scripting the scripting section also has links to the live training sessions they hosted a while back on beginner scripting -http://unity3d.com/learn/live-training the live training section itself -I personally found a C# specific non-unity book helped a lot, theres tons of books out there but I personally liked Joes to Pros C# 2012 because it had exercises at the end of each chapter. Or these youtube series -this guy seems to get recommended a lot here https://www.youtube.com/watch?v=SXmVym6L8dw&amp;list=PLAC325451207E3105 or try Brackeys https://www.youtube.com/watch?v=pSiIHe2uZ2w -This guy gets into explaining things like Raycasts and such https://www.youtube.com/user/ETeeskiTutorials/playlists
Its actually being tested in our Beta Program. You could email me at Ivan at codeanywhere and I can get you in.
Just like https://xkcd.com/927/ I thought that no option was really close enough to what I wanted to have. So I began coding my own database access technology. It's actually going pretty well, although there's still a good amount of things left to do. But what I've got is quite cool - I've showed it to some colleagues and people I've met at user groups etc and people generally seem to be very positive towards it. As usual, I would love any kind of feedback https://github.com/wastaz/Hyperboliq
[Image](http://imgs.xkcd.com/comics/standards.png) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini-USB. Or is it micro-USB? Shit. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/927#Explanation) **Stats:** This comic has been referenced 1890 times, representing 2.4296% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_cug1n9g)
&gt; I have literally copied word for word from a tutorial Honestly, many Unity tutorials are not very good. I've seen a few cringe-worthy scripts come from them, mostly due to the fact that many Unity "developers" never properly learn C#. They learned it like you're learning it, copying from other people who never properly learned C#. You should _not_ learn C# from Unity tutorials. You _should_ learn C# properly to some degree from a reputable source before continuing. I know the "unity way" is to just jump in but this is something you will not regret taking the time to do. However, there are a lot of C# features you won't use in Unity. Unity is also using an older version of C# (something in between C# 3.0 and 4.0) and doesn't make much use of the .net framework. So don't concentrate on learning it all, nor on learning the latest and greatest C# has to offer. Unity treats C# like a scripting language and that's mostly how you'll be using it. However, lacking a deeper understanding of the language will just get you stuck, as you've discovered. 
Is your program running on a LAN, or are we talking about a mobile app ? 
Ahh, I see. I didn't really think about the context, but yeah, if you need the key of the max value, you do have to do what you're talking about I suppose.
Learn c# first. Unity is a tad complicated for a beginner. Try doing some basic programs like taking two numbers from the user and adding them. Things that sound ragged simple in theory. Then you can graduate on. 
First - learn C# and logic. Huge mistake diving straight into Unity... Because right now you're learning both C# and Unity. Learn of thing at the time - start with simple console program to work on your logic and program flow.
Here is a .NET Fiddle that demonstrates some of Humanizer functionality and to play around with it: [https://dotnetfiddle.net/sKea7c](https://dotnetfiddle.net/sKea7c)
Interesting...ok
You could perhaps look at the server doing a UDP broadcast, and any running clients seeing that broadcast, and then requesting the new version from the server.
&gt; The only thing that NH lacks are: &gt; Async API &gt; Migrations Thanks for the response, it's good to hear an opinion which isn't just voicing unfounded popular opinions (meaning that I think a lot of people talk about it negatively with no experience). Migrations would be nice to have from a developers perspective to be fair as would async. Async may even be critical for some.
I used to do this when I was starting out. I kept running into issues with using declarations. When you see code in a tutorial, they don't always include the using declarations you need at the top of the .cs file. This might be what you're running into. 
For total beginners I would recommend paying for one month of [PluralSight](http://pluralsight.com/). Great video tutorials and plenty of stuff to work through. K. Scott Allen's C# Fundamentals videos are fantastic but I'm not sure how recently they've been updated (it's been a few years since I've watched them).
This site will be great when you guys get more advanced tutorials. I really like the setup.
http://rextester.com/runcode ^- write + test + auto-indent Then go to notepad++, Ctrl+A, tab, paste in reddit.
probably -Nii- meant post type: link
Why do you suppose they would do that? It's not smart business to tote your product as beginner friendly and then turn out to be the opposite and have a bunch of trash released with your name on it. How would I determine whether or not something is reputable? As far as I can tell, anyone who can write anything, even if it's ugly code to people with actual knowledge, look like a Demi-God.
This diagram is unreadable: http://get-the-solution.net/media/filerequestorder.jpg Otherwise nice post, good code, bookmarked for later!
There it is, I've been waiting for this comment, it's probably the view that most serious devs hold. I admit, it was a tongue-in-cheek joke meant to highlight how green I am at this while adding a little self-depreciation. Truthfully though, this is exactly what has motivated me and I can only assume that everyone was motivated similarly in the beginning, unless some people just like to code and don't care about building anything. Thank you for the well wishes, we will find out soon if I have a talent for this or not :)
Everyone has to crawl before they can walk. Everyone needs a little bit of encouragement in order to get going, if someone's learning to walk and they fall over, you don't give up on them or tell them they're a failure, you help them up and you push them to try again. It takes the same amount of time to offer helpful intuitive advice as it takes to reprimand someone for asking for it.
Hey just a heads up, for now you can write Console.Writeline("Text {0}", value) like that, but when you're going to be writing it pretty much anywhere else you will have to write: string.Format("{0}", value);. Just so you don't become surprised when/if you cannot write it out the same way on things other than Console. edit: Unless, as others have mentioned you're using c# 6.0 and you can use string interpolation to type $"{input}"); for instance 
Oh it's definitely not easy that's for sure. I'm learning C# myself currently. If it weren't for the assistance of others I'd feel massively overwhelmed and I'm coming from an existing programming background. Everyone starts from some where and it's not always easy to learn a new skill, diving into C# and a few other languages can be pretty nightmarish for someone with no experience. We (those with a programming background) often forget how crazy grasping some of the concepts were back when we first learned.
Check out the Concurrency in C# Cookbook.
First of all: thank you! for letting us know about the safe navigation operator. That looks very helpful. Next (tongue in cheek): Reduce your cyclomatic complexity and use only a single return in each function ;)
That is a huge generalization.
If it's Task based programming using Task Parallel Library in C# you are after then I can definitely recommend the following: http://www.amazon.co.uk/Professional-Parallel-Programming-Extensions-Programmer/dp/0470495995 Also the Microsoft docs on the TPL are pretty decent! https://msdn.microsoft.com/en-us/library/dd460717(v=vs.110).aspx
Just because Microsoft calls something best practices, doesn't mean that in reality it is. Spend a little more time in your job and you will see. Even Microsoft employees don't always use their company's "best practices". A simple perusal of Microsoft's online documentation consistently proves this out.
not to be sarcastic, but print 'hello world!' first. Play a bit with conditional statements and programming logic with cheesy console applications. After that, play around with concepts like classes and objects. Learn a couple programming paradigms (Object-Orient(you're using C# after all), Functional, Structured, Event-Driven, Task-Driven) and understand the difference. Create your first loop and accidentally crash your program because your loop doesn't terminate. After you get familiar with C# and it's (super)powers, then start playing with Unity or software engines(as metaphors) in general. Those are just large encapsulated blocks of functional code, and everything in there you can write yourself (it's just more convenient to use someone's work, because let's face it, we're lazy and it's efficient).
Sounds like you're creating pure functions (without side effects) like a maths library. You're not modelling interactions of a system, which is what OO is useful for. Go go static functions.
Seems to be handled pretty gracefully here. There's a not-super-long code output limit, and the editor doesn't lock up during evaluation.
If they don't maintain an internal state and you don't need to mock them for testing, you're free to use static methods. If you have multiple algorithms, depending on the way they're used and how similar they are, turning them into objects can still be useful, though. You could create an INoiseGenerator interface implemented by multiple classes for each algorithm, which would allow consumers of your library to more easily pass algorithms around in their code, dynamically choose different algorithms, reuse code for multiple algorithms, etc.
That is what I was thinking too. Each algorithm is currently it's own class, with an additional utility class for math functions like dot products and fast floors.
Visual Studio will give you a compiler warning if you write methods that don't actually refer to any properties or fields on the object. So if you've turned on Code Analysis, you don't have a choice but to make it static.
I'm loving all the new stuff in C#6. Less code = less bugs as far as I'm concerned. 
This issue has moved into Connect etc. long ago, but for those finding this via Google later on: See my blog post at http://www.heikniemi.net/hardcoded/2015/08/windows-10-breaks-net-date-parsing-in-certain-locales/ for more details on this.
I've seen people using Expression-bodied members **everywhere**.. *shudders* Even with 20 line long methods.
In your second C# code block you have a try block without a catch or finally.
Which part is generated and by what?