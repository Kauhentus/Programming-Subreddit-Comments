Locally. I don't have access to exchange.
This isn't "decrypting" a file, this is "cracking encryption". You have a file that was encrypted, and you no longer have the credentials required to decrypt it. If the encryption was worth a flip, that means you either don't have enough money or enough time to decrypt it. It's gone. If anyone knew a reliable way to crack BitLocker in realistic time they'd be busy making bank off their lucrative career in either espionage or counter-espionage instead of explaining it on reddit ;)
Another C# developer here who has dipped his toe into Discord bots... just use Node for this.
[removed]
[removed]
When you show the child form you can either pass the MDI Parent in as the `owner` parameter, or you can set the `Owner` property on the child form before you `Show()` it, and it should stay on top of it's parent.
You can use Access 2016 for that. You can download GAL right from there
So, I don't have to learn and know Unity keywords like Console.WriteLine's Console and WriteLine? That's what I mean by commands &amp; codes for Unity. I don't see if this is a denial or if I really don't have to know Unity commands.
I think you can do it. Java is pretty similar to C# with syntax. You could use the JDA (Java Discord API) and Eclipse IDE to create a simple bot. It would teach you a good amount doing a very simple bot, such as responding when some sends a message. Tell your friends that you love them whenever they post a message in the chat or something. There's a bunch of different ways to get started. There's python libraries and javascript/node js stuff. I used Java because I needed a refresher for work, but as long as you get the finished product working nice, it's all good G. Just take it slow and start small, make sure that it works and then move to the next piece. You will be fine if it's something that interests you. I made a discord bot that gets fresh memes from reddit when you type the !memes command and my friend loves it. If it's something fun like that, then I think you'll figure it out and learn a lot. Imo it's way better to workout concepts by doing a project that is fun, than to just memorize them and do little things that serve no purpose. Of course you need to balance the two, but I think you can do it if you've got the basics down. Also, google is your friend, you will need to master asking good questions to let google do some work for you. Have fun and good luck!
I've added a pull request with a good amount of changes. Let me know if you have any questions!
Can't say I've ever seen someone use the persistence feature. People are much more comfortable storing long term state in a database where they can see it. My current client wants me to break apart a WF because they want the 'parallel' steps to be fully independent.
There is a perfectly usable ML engine [available in .NET](https://dotnet.microsoft.com/apps/machinelearning-ai/ml-dotnet), the demo projects are easy to setup and understand. The project is OSS too so you can pick it apart and understand the implementation details behind the engine.
Thanks! I appreciate you taking the time to do that. I'm going to take a look now.
The general sense I've gotten is [ML.NET](https://ML.NET) team is closely aligned with Facebook's PyTorch team.
I have not done this in a while but there might be some security issues associated with this that outlook prevents (maybe just via a popup warning you can allow). This is so 3rd party apps can't just read emails in the outlook address book. You could bypass this with the extended MAPI api but its less dev friendly. If its for an outlook add-on then that one is a bit easier.
You can literally just leave a console app running on your computer
All kinds of tutorials, videos and podcasts out there for C# beginners. I suggest learning the fundamentals like Object Oriented Programming (OOP) concepts before diving into specific APIs. This will give you the vocabulary you need to understand the next level. Pretty much anyone can learn this stuff, it just comes down to how much time and effort you are willing to put in to understand it.
Start with ASP MVC 5 tutorials will get you started with Entity Framework too https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/introduction/getting-started
Don't even worry about the .net framework, once you get the basics of OOP down, learn .net core.
There is an Office API that had an outlook namespace or .DLL. We use it at work and is essentially a COM wrapper which lets you control the outlook process, to send, read etc
Yes and no. Getting something up that could respond to simple requests isn't that hard, but building out an architecture that supports many functions of the bot would be a little too complex for a beginner. If you are up for the challenge then go for it! I've always found it's easier to stay motivated on projects where you really want to build something that solves a problem for yourself.
A few months ago I went to a seminar by Cesar de la Torre - he’s the program manager at Microsoft for ML.NET. Seems Microsoft is pretty heavily invested in playing nicely with TensorFlow, etc. Check out https://devblogs.microsoft.com/cesardelatorre
I very much disagree with this. There are challenges in whatever you do, but the biggest driver is passion. The key thing for me is to pick a project you are passionate about, where the end goal is something you personally will want to achieve. Every step towards it then is a great reward and will get you looking into how you make it work. That's how I learnt. It wasn't about simple projects, it was about a website I needed. I must have built that website 5 or 6 times, each time improving on what I had done before, and every time I was delighted with the result. It's what pushed me past the times where I couldn't get anything to work.
You can run a discord bot from your local machine. No need for Azure and all that Gumph.
Discord bot doesn't use the bot framework. It uses (via a client library) the Discord HTTP API that they expose.
[https://github.com/misterjesus1983/mugabe-bot](https://github.com/misterjesus1983/mugabe-bot) This is mine. I used it to brush back up on my python skills.
So from just reading through your changes on Github (haven't had the chance to test them until I'm home this evening), I can see two categories that things fall into for me: &amp;#x200B; **Things I can improve / implement now:** * *Use of nameof()*. Although because I use SharpDevelop when I'm at work because it's portable, I can't use these at the moment (portable version of SharpDevelop only supports up to C# 5.0, nameof() being introduced in C# 6.0 from what I read. * *More concise use of enum* * *Better naming conventions/practices* (e.g. underscore for fields vs local variables) * *Expression Body Definition (=&gt;)*. I had to look the name up on microsoft docs, but it makes sense and I feel like your changes gave me enough examples that i can start using it effectively * *Nullable values (Type?)*. Also had to look this up, and I'm a little fuzzy on the proper way/time to use it, but I think i'll be alright once I take a look at some more examples of use &amp;#x200B; **Higher level items / concepts I need to put a dedicated focus on:** * *Interfaces:* (I already knew this was something I needed work on). You've given me some really good example of how to use and implement these, which I think is going to help tremendously. * *Composition:* Just started getting into this on a tutorial series that I'm working through, so it was nice to see it used here to connect things for me a bit while I learn. * *RelayCommand / ICommand:* I only have a loose grasp on how this is actually functioning and why. I definitely need to spend some time here. &amp;#x200B; Does this seem like a fair / objective self-evaluation from what you've seen? &amp;#x200B; Thank you again for taking the time to refactor all of that. This post was the first real code review I've had from people in the field, and it's been great motivation.
That's a pedantic approach to it. Yes, there is a Discord bot framework, there is also a bot framework from Microsoft. Both can interact with discord.
I completely agree with you. Passion is everything, google will help you with the rest. I haven’t looked into it but there are probably more than a few step by step tutorials on how to make a discord bot. It would be a great learning experience just to follow a tutorial like that without making any changes at all. Then go back and make some minor changes, rinse and repeat. Learn by doing.
Thank you :)
Thank you :)
To give you hint: what happens when you call a method more then once?
Ohh I feel stupid now. Didn't put much thought into the word "first *invocation*" and the fact that he meant calling the method again within the program itself.
I would agree with all that! Relay command is magic and really implemented once and you'll never really encounter problems in most applications. Nullable types are nice for expressing the return value of a function a little better. It removes the need for a lot of null checks. Also, I would focus on visual studio primarily at some point because almost all jobs using .net will use visual studio.
Does as a suggestion, I have heard that learning WPF can be difficult (never used it myself so can't attest), but using the .net framework is really easy to create and use UI (in visual studio it's just drag and drop designing). As said, never used WPF but I have used .net framework and personally I love it.
1. I agree with /u/lestjustbefriendz: ASP.NET Core is fairly mature now and safe enough to commit to. It is more modern and more in sync with what people are doing across the board in modern web development than the older stuff the comes with the .NET Framework. Web Forms is end-of-life and you should not start anything new in it (my opinion). MVC + Razor (out of the box in ASP.NET Core) is a great place to start and has great developer tooling. 2. I don't think web development is too complex for a beginner. Web development is a very big domain but you can accomplish very functional things with only the basics and you can increment from there. I would recommend getting familiar with "semantic HTML" so that you at least create good structure in your web-site. Someone posted "[How to Section Your HTML](https://css-tricks.com/how-to-section-your-html/)" recently and it's a really good read. Learning layout and styling using CSS is a bit of an art-form. I'm not the best for giving advice on CSS. **Hopefully someone else can reply and offer some good starting points for CSS**. I will say this: if you are using "!important" in your style sheets, you're almost certainly not learning the right lessons. 3. I don't have any links to share personally but in my experience I've been able to find lots of starter information with simple web searching. Microsoft's official ASP.NET web-site is a great starting point if you are going to use ASP.NET MVC.
It's a great project for JavaScript using Discord.js, not C#
Okay, when you first compile a .NET project, it does not go straight to machine code. Instead, it goes into a format known as Intermediate Language or IL. Because IL is platform agnostic, it allows for it to be on any system for as long as another compiler can read it. For Windows, this will probably be the .NET Framework compiler. For Linux/macOS, this would probably be either Mono or .NET Core. JIT, or Just-In-Time, is a type of compiler that will convert IL to native machine code when it needs to. Because converting IL to Machine Code can take away processing power, JIT will cache the machine code in case it needs to use it later. .NET will cache it to the system memory from what I can remember. And the reason the cache comes into existence is that the JIT will only convert the IL at runtime and it never saves the cache after execution is done. Now, if this was something like C++, there is no JIT, no anything. The source code goes straight to machine code. Now, there is something like Unity's IL2CPP which takes that IL language and converts it to C++, which in turn gets converted to machine code. But this locks the game down to that OS. As a side note, this is why modding Unity games are so easy if they do not use IL2CPP, even if the developer did not create a modding system. I hope this helped.
MVC is a big learning curve, but honestly, learning webforms or .net classic just wouldnt be worth your time. Even though those are easier to wrap your head around, MVC is the standard now.
100% agree. Also a website is a great first project.
If OP asked "I'm teaching a class on programming 101, is this too advanced?" I might agree with you, but for a self-driven learner, this sort of lofty project is perfect. It will expose OP to several technologies they will need to learn to be a good programmer, and no amount of practicing syntax is going to advance them beyond just hashing out code. &gt; By choosing a bot that has to be online 24/7 youre tackling a problem that would normally require a consultant, system architect and a team of developers. This statement in particular indicates you're answering as if failure isn't an option, and as if learning isn't the goal. OP didn't ask whether he can make a successful business around some insanely complex technology. The software will not be great, the infrastructure problems will be difficult, and OP will figure it out as they go along, and that is fine.
I like this strategy.
For any web app regardless of the tech stack normally comprises of two sets of technologies: Frontend Tech: * (X) HTML * CSS * JavaScript Backend Tech: * Server Side languages. * Data Store (SQL Server, MySQL, NoSQL databases such as Mongo DB). Normally the two parts talk to each other via HTTP protocol. There is basically quite a lot to learn. I have seen others have said "Do the MVC tutorial", which is fine *but* you will find that there are quite a few concepts that presented all at once. It might be worth concentrating on C# / OOP fundamentals such as Classes, Methods, Polymorphism. Then I would play around with some basic front end stuff e.g. HTML with some basic CSS and build some basic forms. Then learn the basic HTTP methods and what they are used for If you do the [ASP.NET](https://ASP.NET) MVC tutorial afterwards all those bits will kinda fit together.
I wrote a library that makes bot development against different platforms relatively easy. The library is called [BotsDotNet](https://github.com/calico-crusade/botsdotnet) and it allows for pretty quick development of Bots against Discord, as well as Twitch, and other supported frameworks. However, it also allows you to pick and choose individual platforms to target. It handles most of the advanced stuff, like connecting to discord, processing commands, and that sort of stuff. The most advanced it gets is using custom [Attributes](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/) to specify things like the command to look for and who can use what commands and such, as well as using [asynchronous operations](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/) for handling call-backs and such. I have had plenty of beginner c# developers use it and comment on it's usability, and I'm available to help with any issues you run into. The wiki and the source project have plenty of examples of how the basics work. The primary downside, is that you would have to run the program on a machine that is always on for the bot to stay connected. You could also use a VPS service like Azure, however, that isn't required. Now that I've self-advertised, getting down to the crux of the issue. Developing a discord bot might not be the best place to start. I'm of the philosophy that you should understand the basics of how something works before you start using it. Many people do not share in that line of thinking, but I understand the need for motivation and programming is very much a "your mileage will vary" hobby/job/pass-time. However, you are not alone. There are plenty of people on the internet that are willing to help, there are many resources available with tutorials on how to do this, that and the other. The primary one, imo, being [StackOverflow](http://stackoverflow.com). There are also entire discord servers dedicated to teaching people and helping people learn how to code. So don't give up just yet!
He's right, you're a fucking idiot.
&gt;That's Blazor! Not only C#; C, C++, Rust, Go, TypeScript,... Yes, I was making a rhetorical question. What I mean is that MS has been insisting with this since 2002 (aspx) and it wasn't good, it was a mess. Performant? No, it was terrible. Now, if with webassembly they really make it execute in the client, without conversion to js back the scenes but natively and genuinely, like real assembly, then ok. It will have to prove it's good though.
My first "real" project was a Discord bot. I say "real" because I frequently took breaks from developing it to do other mini-projects to reinforce concepts I was learning. For instance, I started developing my bot and ran into the need to save data persistently across restarts. That led me to needing to learn about JSON and file I/O, so I took a short break from my bot to follow along some MS tutorials and make a tiny shopping list app. In short, yes, I'd recommend a Discord bot as a beginner project, so long as you're prepared to learn along the way and take breaks from your bot to learn the skills you need to create it. Think of it like a quest in a video game. Your ultimate goal is to make a Discord bot, but there are prerequisite tasks and side-quests to complete before your final goal is possible. Be patient - it took me about a year to get from a beginner level to a (somewhat) functioning) bot - and don't get too tunnel-visioned on your end goal.
I disagree. Working with persistent connections in any language will be a challenge for a new developer. Especially one that doesn't understand how certain aspects of the libraries they're using work. If anything, I think node.js is more complicated due to the differences between browser-based node and server-side node, learning command line npm can also be a challenge for some new developers.
I think it would make a great beginner project except for when it might not. Meaning you're always going to be breaking big problems down into little ones and learning the stuff you don't know as you go, so you might as well start now. However, go into it accepting the fact that you just might not be able to complete it yet. Don't let a lack of progress or running into a problem you can't solve frustrate you, just find a different project to work on but keep that problem in the back of your mind. Eventually you'll learn what you need to progress on your discord bot and you can come back to it. Then you'll learn some real valuable lessons about coming back to your own code after a break 🤣. But if you repeat the process enough times you'll eventually have what you set out to build.
Or... Use the C# discord library "Discord.Net"... Not sure why you're so focused on Java
I share Tvel response And you can read an exemple here (1st code example) : https://visualstudiomagazine.com/articles/2018/09/07/blazor-apis.aspx?m=1 As you are a bit new to C#, I suggest you to install this extension from Sonar https://www.sonarlint.org/visualstudio/ It will suggest you some refactoring and help you with the correct casing of the Microsoft C# convention (for instance snake case is not a common casing in C# ;) )
Speed for example
I don't get it.
You are correct, this is your issue. I'm not as familiar with efcore, but in ef there is a property on the context object called LazyLoading that you set to false on context creation.
https://www.learnentityframeworkcore.com/lazy-loading Force lazy loading as above? Paste your EF query, it'll be easier to help
There's a big difference between website and discord bot. Building a website without prior programming knowledge is like trying to swim in a kid's pool without knowing how to swim. Building a discord bot without prior programming knowledge is equivalent to asking to be dropped in the middle of pacific ocean without having swam once in your life.
So you want to log in without using a database? Is that correct? Well, you could store a static username and password in Azure App settings then when somebody logs in, you can get the setting and compare what they entered. Note that this will be pretty insecure (at least in comparison to storing hashed password in a database that's running in a secured server).
To be fair, you could hash/salt the password in the configuration... Though that requires the extra step of doing that before storing it. Probably about as secure as storing a the DB then.
Can confirm, work on Azure in the App Services Dev pod.
If you are using Azure App Services and you want to authenticate using sign on from Azure AD, Microsoft, Google, Facebook or Twitter, you can just turn on Authentication / Authorization in your Azure App Service settings. The Azure App Service will need to create an App Service Registration in Azure AD; you will need to have permissions in your Azure AD to create App Service Registrations. If you are an Administrator of your Azure AD then you don't have to worry about that.
Discord.net is outdated, use DSharpPlus
Whoopsie doopsie...forgot about that...I haven't used that so I didnt think of the .NET wrapper....just use that OP lol my bad
Depends. Setting the bot up is easy, but if you want it to do anything meaningful... nope.
Whoopsie doopsie...forgot about that...I haven't used that so I didnt think of the .NET wrapper....just use that OP lol my bad
Where are you getting the "accurate values" from? That 1.14 is surely more like 1.14±0.005 anyway, so 400 times that is 456±2, so rounding or flooring are both correct.
By definition, a template would not be a blank page, so right off the bat there, conceptually just, no. &amp;#x200B; Clearly this is your first foray into C#, seems pretty likely its your first endeavour into coding at all. I would strongly encourage you to continue, writing code has provided me with a great career and its a lot of fun, always an interesting challenge. That being said, if you're really not trolling us, I doubt you'll have any success if you don't adjust your attitude. &amp;#x200B; The more I learn, the more I understand that I don't know, so I have some point of reference to empathize with your over-confidence, but I truly am floored by just how hilariously far you've gone with that. &amp;#x200B; What depth of knowledge are you basing this statement on? Do you really believe you're more qualified than Microsoft to make objective statements about their template designs in the IDE they give away for free, for a language they created and continue to develop? &amp;#x200B; Besides all that, you probably just failed to follow along with tutorial properly, because if you use .NET Framework instead of .NET Core as the template, you'd get what you want. I can't imagine you're far enough along to be concerned with the platform independence of core anyways.
That automatic fixup shouldn't be causing you problems. Are you trying to serialize your models into JSON?
Lazy loading has to be explicitly turned on with EF Core.
Yeah I'm not concerned with security too much as I'll keep the real copy in another location
Are your navigation properties virtual?
When I say a template should be blank, I meant that it should be minimal with built in codes that should be useful. I shouldn't have to delete anything before starting at the beginning of my coding. Yes, I think I'm more qualified than Microsoft to make objective statements about their template designs. In fact, I don't think there is a "qualification" required for it. It's a matter of logic. If I end up deleting some codes every single time I start new codes, those codes are useless and adds to wasting time. It's pointless.
Upvoted for your edit because as someone who hasn't worked on discord bots specifically, I wasn't too clear on the challenges involved. Actually sounds like a great learning project honestly but yeah, might be tough and potentially discouraging as a first programming exercise. If only because it could become a "you don't know what you don't know" situation in how to Google for help with certain topics. But still, I think if the motivation is there, could be rewarding for a beginner, especially with people like you dropping useful hints like this for topics they might want to study some programming principals for along the way. Researching some of the topics you mentioned would be a good way to understanding the bigger picture of what they're learning how to do as well.
Hmmm... I'm going to talk about DSharpPlus here because it's related to Discord. &amp;#x200B; I have a bot in DSharpPlus. It is super easy to get it running. They even have a tutorial on it. &amp;#x200B; Now, on the downside, it's not the same as learning the basics. There are concepts that it uses that are not beginner friendly. &amp;#x200B; Async tasks, responding to an event. If you have never dealt with it before, you could either plunge deep into it, or just find another side project. &amp;#x200B; On the upside, there are a lot of tutorials about how discord bots work on the internet, so if you're willing to watch videos about how they did certain things with other frameworks, then you could apply it probably to DSharpPlus. Honestly, if you are willing to put in the time and effort to learn it, do it. But don't just go ahead with copy/pasting. Make sure that you LEARN what is going on while you write it, that way if it breaks then you can kind of figure out what is going on by following some kind of order of operations.
If you can commit to research and practice the way you've committed to this troll, you're going to do great. If not though, you can probably save yourself a ton of time by just giving up on the pong smartphone game now.
This. Models don't always get serialized into JSON. Sometimes they need to get converted into DTOs for other purposes first. Automatic fix-up becomes a nightmare in such situations. AsNoTracking is the solution. Frankly, in my opinion, it really ought to be the default, but it's not up to me. :)
Yeah, I don't get it why you keep calling my questions a trolling.
See now I'm not sure again, roller coaster. &amp;#x200B; For your purposes, there is no difference between framework and core. Framework is built to run in a runtime environment on a Windows host. Core is designed to remove the requirement that it be a Windows host, allowing core to run on unix based machines. Thats the major, defining difference between core and framework. &amp;#x200B; The point of the hello world, is that someone who has no idea what they're doing can pick the template and push start to see it compile and put a message on the screen. Anyone who knows any more than that, knows exactly what it is, and can just delete it, or replace the "hello world" with whatever introductory message they actually want for their program, thus saving them time. &amp;#x200B; It is well within the realm of possibility that you're literally the first person in history to complain about it.
It's not the only solution, and I would consider it more of a workaround. OP would be SOL if they needed to utilize change tracking. They would be better off projecting their data into the forms they actually need. `.AsNoTracking()` or setting up their serializer to ignore cycles will have the downsides of sending crap you don't need. Also if you don't like the default behavior, you can change it. https://docs.microsoft.com/en-us/ef/core/querying/tracking#no-tracking-queries Then use `.AsTracking()` as needed.
&gt; What I mean is that MS has been insisting with this since 2002 (aspx) and it wasn't good, it was a mess. Performant? No, it was terrible. Completely agree with this. MS screwed up their front-end technologies a long time ago; that's past now. What's important is, they are currently on the right track with Blazor (WebAssembly). &gt; if with webassembly they really make it execute in the client, without conversion to js back the scenes but natively and genuinely, like real assembly, then ok. The compilation of WebAssembly has nothing to do with JS. WebAssembly generates binary code that's independent of JS. It's not like Babel.js, or nothing like TypeScript or CoffeeScript; it's the renovation of front-end. According to [MDN](https://developer.mozilla.org/en-US/docs/WebAssembly), *“WebAssembly is a new type of code that can be run in modern web browsers — it is a low-level assembly-like language with a compact binary format that runs with near-native performance and provides languages such as C/C++ and Rust with a compilation target so that they can run on the web.”* &gt; It will have to prove it's good though. I agree. If you research regularly, you'll find that interesting things are being built with WebAssembly. For example, Google just has started to develop the [web version of Google Earth](https://9to5google.com/2019/06/20/google-earth-web-all-browsers-webassembly/) in **WebAssembly**. Web technology is ubiquitous, so browsers are becoming the modern universal OS. We needed a technology that can empower the browsers by utilizing the native resources more effectively, especially on the client-side. So WebAssembly walked in, and started to change the game. It is the technology Web needed the most to dominate the whole software industry. WebAssembly is the future, no doubt!
Yeah, I would like to serialize my models directly into JSON to be sent to my mobile app client, but because of the automatic fix-up, more data than I've explicitly requested gets returned from the database. I've already implemented ReferenceLoopHandling.Ignore, which solves the errors I was getting in terms of the self referencing loops, but I'm still getting more data that I explicitly request. I've also given AsNoTracking a try, which helped the problem as it removed some of the unrequested data, but the majority of the unrequested data remains. This is an example of what I believe is happening due to fix-up: **Models** public class User { public int Id { get; set; } public string Name { get; set; } public virtual List&lt;Message&gt; Messages { get; set; } } public class Message { public int Id { get; set; } public string Text { get; set; } public virtual User User { get; set; } } **EF query** _dbContext.Users.Include(m =&gt; m.Messages).SingleOrDefault(x =&gt; x.Id == 1); **Result** "user": { "id": 1, "name": "Alice", "messages": [ { "id": 1, "text": "What's up?", *"user": { "id": 1, "name": "Alice", "messages": [ ... ] }* } ] } I would not expect and don't want the User with the asterisks around it to be included in the result unless I call ThenInclude like follows: _dbContext.Users.Include(m =&gt; m.Messages).ThenInclude(u =&gt; u.User).SingleOrDefault(x =&gt; x.Id == 1);
Just because I'm the first person to complain about it doesn't mean it's right. If they rely on the users deleting those codes, they shouldn't have put them there in the first place. It doesn't make sense. I don't know programming enough to know the difference between framework and core. I just filtered "console app" then picked the first one on the list like my tutorial videos did. It's good to know that Console App (.NET Framework) doesn't start the template with "Hello World" though. Thanks.
Deliberately not using azure is ridiculous, your learning style is way too outdated. Today's development climate (and job market) is heavily focused on cloud services e.g. Azure functions, app services, etc. Not learning them just because "that's not how it used to be done" is insanely regressive thinking. I'm not saying you write your first hello world in an azure function, but op is clearly past that, and he should be exploring what tooling exists to help him, not doing things the hard way to prove some non existent point. And you're showing a complete lack of experience if you think building a basic discord bot requires a tram of developed and an architect. I've assigned multiple grad developers fresh out of uni to build POC bots hooked up to our proprietary APIs and they've all delivered a fantastic solution in a matter of a few weeks. You need to actually go out and build a bot before you start giving newbies advice about them. It's not nearly as hard as you think it is. Maybe if you leveraged the services Azure provides you'd be aware of that.
This is why you should use projection. Your query isn't grabbing additional data. Why would you expect the cycle to not exist?
Thankfully. We use lazy loading in some projects and it's terrible
As the other guy says, if you can get Azure AD up and running you wont look back.
I have no idea how to do this. But if your motivated then just do. Maybe you will not finish but anyway you will learn on your journey. Just start programming.
I don't understand your post at all. But I think you're saying there's a game that already exist and you're making a client for it? The ssh tunnel makes no sense. I wouldn't know why a game would use it. Are you saying you can't access the game at work and you're using the tunnel as a SOCK proxy? You don't nessacarily need to implement tunneling code. You can use putty or ssh to listen to a port and it will tunnel it for you so you'd use regular sockets POST and GET are not difficult. I used WebClient, but latest project actually used 'HttpClient'. For some reason dotnet likes to use an old tls version so I needed to use this line to get newer System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls; Using HttpClient you can add headers via DefaultRequestHeaders and for post you can use PostAsync with StringContent
Hey man I got thrown into a python course project where I had to use the twitter api to get popular tweets and classify worda as positive, negative, and neutral. The project was old and I had to figure out both the new api and differences for python 3.0. It was my second time using python, and I still bumblefucked my way through it just fine, ending up with a completely working and actually simpler and nicer looking version than the example solution. What really scares me is the google maps api combined with javascript. I gave up at that point, and so did everyone else in the class.
My first self-driven project after getting proficient in java, my first language, was an interpreted programming language. It was tough, but I really wanted it and so I kept going until I had a working result. inum =1 text =2 go text1.1 is "Enter number: " out text1.1 in inum1.1 text1.1 is "You entered" text1.2 is "." out text1.1 - inum1.1 - text1.2 no. It's an abomination but I learned a ton and had a lot of fun making it. Mu first projrct in C# was actually an asm-like interpreted language that was built for obfuscation. var 0,6 add 0,7 +stdlib.if( 0 &gt;= 7 skip ) var 0,"a ge 7" out 0 ;skip rem 0 ret 0
It’s def possible, depending on what you want to do. If you have the complete db, there is an option to scaffold the code first entities from the db, but it’s really like a one shot deal. Conversely you can abandon it all together and just create the mappers and entities, which I think is technically reverse engineered code first. Database first with an Edmx is technically deprecated
You absolutely can. You would just define your database and then use [EF Core PowerTools](https://marketplace.visualstudio.com/items?itemName=ErikEJ.EFCorePowerTools) to generate your context and model classes. Just click on their wiki link and you should really have all the info you need!
If you're just starting out with programming, understanding how the JIT turns IL into Machine Code is probably pretty far down on the list of priorities. Unless you're working on VM internals or just have a very strong personal interest, this is probably not very important for you. That said, an honest question gets an honest answer. When talking about Virtual Machines like .NET, you have to keep three separate entities in mind: The "machine", the VM and the Program running on the VM. Keeping track of the state of these three entities can get a bit mind-bendy. It's not your code that is executing on the hardware, the VM program is executing on the hardware, and your "program" is just input to the VM. For each instruction in your program, the VM takes an action, finds the next instructions, gets the behavior for that instruction, and then executes that. It does this in a small, fast loop called the "runloop". In machine code, a "method call" is a few operations: parameter values are pushed onto the system stack and then control jumps to the start of the machine code block of the method. These operations (stack push and jump) are very fast in machine code. In IL things are a bit different, parameter values are pushed onto the Virtual Machine stack and then the Virtual Machine looks up the start of the method IL block and executes it. When the VM sees the "Execute Method" instruction, it has an opportunity to run some code. In the non-JIT situation, the VM sees the "Execute Method" and just fetches the address of that instruction and continues running at that point. But in a JIT, the VM first asks the question "Have I seen this method before?" If it has, it pulls the compiled Machine Code version from its own memory and executes that. If it hasn't, it passes the method to the JIT to be compiled. Where does the cache live? In the memory of the VM program. Also, yes, JIT cache is typically ephemeral. It, like all other ephemeral data, disappears when the program exits, and is recreated again next time. This seems like extra work, but in an OO language like C# it isn't necessarily a waste. The JIT optimizes program execution based on data which is only available while the program is running. To understand this, consider the example of three classes: A, B inherits A and C inherits A. If I have a code snippet "A a = GetA(); a.DoSomething();" the variable "a" could, because of type logic, be an instance of A, B or C. The VM doesn't know the specific type at compile time, so the ".DoSomething()" method has to be looked up at runtime based on the type that the variable actually contains. In a JIT situation, we know exactly what type "a" is, because we're running and we have the variable there to inspect. So the JIT can create machine code which jumps directly to "B.DoSomething()" instead of having to lookup "a.GetType().FindMethod("DoSomething").Invoke()". This is the benefit of JIT, the ability to optimize based on runtime type information. Compilers for non-VM languages can't do this. If your program runs in a few seconds and exits this might not be a benefit, but if your program is running for hours or days the cost of JIT compiling methods is far outweighed by the savings of those optimizations. Bringing it all together, your JIT cache is going to contain multiple "traces" for a single method, depending on the types of the variables in that execution. In the example above, the JIT will cache a trace for each case of variable "a" being type "A", "B", or "C", and will jump to whichever one is fastest when it's time to execute the code snippet. Your program, of course, doesn't know that any of this is happening, the only effect is that sometimes a method executes much faster than it did last time. I hope this helps, let us know if you have any other questions
The idea of Database first or Code first doesn’t make sense any longer. As mentioned the EDMX structure is deprecated and should no longer be used. So technically everything is code first. As others have also mentioned there are tools to help you along, power tools and there are a few other VS addons that will generate classes for you as well.
I'm a big fan of [Sql Server Data Tools](https://docs.microsoft.com/en-us/sql/ssdt/sql-server-data-tools?view=sql-server-2017) for maintaining my database schemas / migrations. I generally build the C# models / dbcontext by hand unless there's a lot.
Remove virtual properties and only use eager loading.
I'd second this. There's a bit of a learning curve but it's a very useful set of tools if you are doing a lot of SQL server stuff and not developing the db code first. There are always trade offs, so for me I also tend to just manually generate the db context and configurations. Code first can be a very steep learning curve depending on how complicated your entity models are and your DB needs, but it is still my first choice if it fits the task at hand.
Hey! Thanks for the response! You are correct, the game exists, and I am trying to make a console client so I can play at work. As far as I can tell, it's an SSL Tunnel, not SSH. This is just from what I am seeing in Fiddler. It's says Connection established to ---.com, then posts are made after the connection. I'll give your methods a try!! Thanks for the response with code.
So, while it's fun to tackle problems like this (I come from a networking/security background) I think a better use of time would be to build something good for your employer. If you have the drive to do this sort of thing then showcase your skills and ideas. If you're not challenged at work then you're in the wrong job
Oh I see. I believe its http**s**. HttpClient and WebClient in .NET both will handle that on its own just fine
Unless you have a job like night phone dispatcher (I've played wow with a lot of people on night shifts I recommend working). That said I love this stuff. Fidler calls HTTPS an HTTPS tunnel. It's just normal HTTPS. You are better off figuring out the calls with chrome Web tools if it's not a flash game. F12. Best tip is start small. Figure out authentication first. Google webclient for a place to start.
I think adding [JsonIgnore] to the items you don't want serialised should do the trick.
Just use HttpClient, it'll handle HTTPS just fine. You can start by creating the client object and calling its methods to send/recieve data to/from the server.
If you're showing this to new employers, why don't you care about security? They do.
I just build my database first and then write the corresponding entities by hand. The amount of additional work compared to database design is negligible. In addition it allows me to name things properly (where generators sometimes generate shit like Users1 and Users2 instead of Authors and Subscribers) and allows me to omit properties I don't want on specific entities.
Careful, for some reason ssdt doesn't fully work in vs2019 yet, nor will it generate an EF model, but it's my favourite database management tool, bar none
It did help. But i didn't get what you meant by modding Unity games?
The nice thing about SSDT is it's got the ability to work with either
Aaaaaaaasssholes
Why would you first define your database and then generate your context? You would only use that if you already have a database from an other application you need to scaffold.
This is my go to when I have EF questions https://www.entityframeworktutorial.net/
&gt;Sort by Yes. Imagine you work for a company with a big database that already exists, and you need to create a new, small application to solve a specific problem. You still got to work with that data.
Wow. I need to read it a few more times to understand a few things here and there but I got the rough idea. BTW, I'm just studying about this as a personal interest or even because I want to completely understand what exactly is going on when I work on a project. You're very knowledgeable about the internal working. Does it come from experience or is there any where we can learn all this from? I didn't find any books or resources that goes this deeply.
Because that's literally what OP asked.
You don't need the whole database in your context, you can only use the relevant tables and/or columns (you will need to have the required columns in your code otherwise the database will just complain).
Well OP don't do that...
Basically i want to start Narlea.exe without carying if the .exe is in /C or in /F or idk in what folder
How about adding Narlea.exe's full path to the Path in the Environment Variables of the computer?
So why not scaffold and then rename/ remove stuff. Should be much faster
How about you fucking work instead?
That or provide full path in method argument
I hope you're not a programmer. If so, you should eat shit instead of developing :)
Add the reference to System.IO string filePath = Path.GetFullPath("Narlea.exe"); Process.Start(filePath);
Not much faster. The process of producing entities will be much faster but considering the whole process it would be only marginally faster. Also I don't think the scaffolding is faster if you add a couple of tables at a time which is what you do in normal development.
Do you know where it is, relative to your running program? Like it is beside it? If so, do `Process.Start("./Narlea.exe");`. If it's in a folder called Narlea, you would do `Process.Start("./Narlea/Narlea.exe");` If you have no idea where Narlea will be at runtime, then youre going to have to ask the user to find it, because there is no real way to find it short of writing some code to recursivly search all the Hard Drives connected to the system, which would be less than ideal.
In many instances it is preferable to put more effort into design, which includes design and creation of the DB before a single line of code is written. The book Agile Principles and Practices in C# goes into great detail about using the design process to refine software to a place where the actual coding takes a while lot less time.
The template is designed to have users, particularly new users, be able to: 1. Open Visual Studio 2. Create new console application 3. Hit run and see that it works The last point is important. It lets absolute newbies get something going without a syntax error, and it lets users (newbies and experienced) to verify that everything is wired up and working fine. Deleting the two lines is trivial for anyone. Just about all of Microsoft's project templates include a barebones "hello world" level implementation so users can dive in and start changing things and verify that it just works. And for experienced users (or very opinionated users) Microsoft enabled the ability to modify or add new templates to whatever suits their fancy.
Sounds like you are getting yourself into a lot of difficulties like this. Why don't they want asp.net? The way you want to approach it you are trying to reinvent the wheel.
Just use ASP.NET Core.
That is not going to change anything if the executable is not in the same folder.
Both you and your employer are in for a world of hurt if you go this route. Slow performance, outdated models, reinventing basic interfaces from scratch, and near-impossible maintenance are what you’re going to get if you try to cram a dynamic Internet-facing web application into a C# application without using any other resources but basic tutorials. I’d recommend looking up the use of ASP.NET with Kestrel and “console” ASP.NET apps, and also having a design meeting with your bosses about real requirements and constraints!
I checked [ASP.NET](https://ASP.NET) and it seems to use IIS Express Server to host the webpage, and there was no .exe file at all anywhere in the project. And my employer is not happy with that. He does not want IIS or anything else, but just one executable.
So does that mean I do not need any extra server like IIS and runs as only one executable?
Asp.net core can be run using CLI tools. For .net framework, you can use OWIN selfhost to host the site using an exe.
thanks guys
btw, how i can add a background music ? when i open the .exe, the music starts by itself? can somone help me with this ? i'm trying to build a launcher by myself and i kinda need help ! &amp;#x200B; Thanks in advance !
Yes, you won't need IIS.
Here is the code : &amp;#x200B; using System; using System.Collections.Generic; using System.ComponentModel; using [System.Data](https://System.Data); using System.Diagnostics; using System.Drawing; using [System.IO](https://System.IO); using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows.Forms; &amp;#x200B; namespace WindowsFormsApp3 { public partial class Launcher : Form { public Launcher() { InitializeComponent(); } &amp;#x200B; private void pictureBox9\_Click(object sender, EventArgs e) { System.Diagnostics.Process.Start("[http://narlea.bine.me/](http://narlea.bine.me/)"); } &amp;#x200B; private void pictureBox2\_Click(object sender, EventArgs e) { string filePath = Path.GetFullPath("Narlea.exe"); Process.Start("F:/World of Narlea/Narlea.exe"); } &amp;#x200B; private void pictureBox8\_Click(object sender, EventArgs e) { System.Diagnostics.Process.Start("[http://wotlk.tebex.io/](http://wotlk.tebex.io/)"); } &amp;#x200B; private void pictureBox7\_Click(object sender, EventArgs e) { System.Diagnostics.Process.Start("[https://narlea.guildtag.com/](https://narlea.guildtag.com/)"); } &amp;#x200B; private void pictureBox4\_Click(object sender, EventArgs e) { System.Diagnostics.Process.Start("[https://discord.gg/qydzxr3](https://discord.gg/qydzxr3)"); } } }
For web apps, you can do this: https://docs.microsoft.com/en-us/ef/core/get-started/aspnetcore/existing-db
I just did this at work and did about 5 tables all one time but the -T argument, took 15 seconds
**ALL** ASP.NET Core applications are just console applications.
This is why managers who know nothing about IT shouldn't be managing developers lol.
You can use Kestrel. It's a built-in webserver for [ASP.NET](https://ASP.NET) Core that can run on a command line interface so you just need the runtime, no server. Although I have to say that the requirement of your company to want a website without a webserver is kinda stupid. From my experience, working for these kinds of companies is always an unnecessary headache.
Hi! Thanks for the feedback! I love my job actually, this is just a fun side project. Appreciate the response!
Thank you for the response! Not a phone dispatcher but this is just sending a few console commands, so no harm :) That is great info about Fiddler. Really appreciate the help. Cheers
Hey! Thanks for the response! I'll look into that. Appreciate all the help!
Thanks for the response! That is the general consensus I am getting. I will look into that! Appreciate the help!
Hi! I appreciate the feedback. This is just a small side project, so no harm no foul :). Thanks for the response!
Is it a web *socket* connection? It's a way of creating a http request but leaves the connection open for two-way communication. Messages usually consists of XML or json and are sent within a frame. If you're able to connect within chrome, you'll know it's a web socket because the connection remains open (check the network tab). There are a few web socket apps in the chrome store.
Also, in .Net Core you can use Kestrel for self hosting.
it seems that you were given a tons of bad information for other co-worker or manager it's hard to get simple explanation out of the box is a short answer : 1 - Aspnetcore CAN runs on top of .NetCore 2 - .NetCore is cross platform 3 - IIS is windows only 1 + 2 means that AspnetCore is designed to be XPlat so it means you can build a web site running on linux in addition to point 3 it means that you DO NOT NEED IIS Addition : 4 - IIS Express is a "host/runner" is just for development =&gt; out of the equation (it's just to simulate IIS for devs) possible host : CLI/Wpf/init.d/iis whatever host you want =&gt; kill that host kill the server, Wpf was a joke but it would perfectly work 5 - you can setup dev env to use console runner (edit launchSettings.json and order the profile to get console first) 6 - aspnetcore is a webframeowrk not a server 7 - Kestrel is probably what you are looking for (the web server it self) and you will probably have best performance with aspnetcore instead of reinventing the wheel Important : NEVER EXPOSE KESTREL directly : NGnix / HaProxy / .... / IIS as you can see iis just acts as a reverse proxy/security if you want to use it but it's up to you You can * run kestrel in your Corp LAN on machine A1 A2 .... * run a reverse proxy on machine B that would load balance A1 A2 .... * give the url of the load balanced url from the reverse proxy to consumer =&gt; et voilà
Google "Owin Self-Hosted". I'm not at my machine right now, but theres a library to run your own http server in a console app (or windows). From there, you can create web controllers or api controllers that will respond to requests made from javascript in your web client (making it dynamic).
Ah I see. Well you should ask him why he only wants only one exe. It's probably not because he likes the one exe but it's ease of usability. You could try to make a self hosted asp.net site combined with a framework like topshelf to install it as a Windows service. But still I suspect that you are not skilled enough yet to explain to your manager what the negative aspects are of the way they want it. Probably your manager also does not really know what he asks. My advice is that you first really well figure out the goals that they want to achieve. Then come back here and ask for advice on how to achieve those goals
1) what game is it? Maybe sometime here could help. 2) if you're sidestepping your IT departments policies of the computer you might get fired for something like this. I'd tread very carefully. Many companies get very upset when you bypass security measures.
&gt; I’d recommend looking up the use of ASP.NET with Kestrel Kestrel does not support ASP.NET. You're looking for ASP.NET Core. You can use ASP.NET Web API with OWIN tho. Or use NancyFx (awful framework).
Basically, I have a functioning Winforms application that met all requirements. But instead of using Winforms, to take user input and send status messages, he wants a localhost webpage to do that. That's all. &amp;#x200B; So he told me to do a 'simple' change in my application, i.e., to remove the winform and write a new class to host the server. Customer double clicks the exe and goes to localhost:port and all is well.
Thanks!
What are your guys thoughts on DbUp? https://dbup.readthedocs.io/en/latest/
I used to contribute a lot of code to an open-source VM project which has since become defunct. At some point books lose their value and you'll need to start reviewing real code. Coreclr can be found online here: [https://github.com/dotnet/coreclr/tree/master/src](https://github.com/dotnet/coreclr/tree/master/src) though it's all C++ and a pretty advanced example of C++ at that. Here's a particularly relevant bit, where the interpreter goes to execute a method [https://github.com/dotnet/coreclr/blob/master/src/vm/interpreter.cpp#L1522](https://github.com/dotnet/coreclr/blob/master/src/vm/interpreter.cpp#L1522) Notice the call to "JitMethodIfAppropriate". Also, you can see the runloop starting here: [https://github.com/dotnet/coreclr/blob/master/src/vm/interpreter.cpp#L1946](https://github.com/dotnet/coreclr/blob/master/src/vm/interpreter.cpp#L1946) and the actual instructions are decoded and executed a few lines later: [https://github.com/dotnet/coreclr/blob/master/src/vm/interpreter.cpp#L1986](https://github.com/dotnet/coreclr/blob/master/src/vm/interpreter.cpp#L1986) If you look at this situation, for *every single instruction* the runloop must fetch the next IL instruction from the pointer, go through the switch, jump to the instruction body (dispatch), execute that code and then jump back up to the top of the loop. That's a lot of extra work. The JIT removes all of this, the generated machine code is just a sequential list of machine instructions with no loop and no dispatch. That's the big performance benefit to JIT. I hope this helps!
https://code.visualstudio.com/docs/editor/command-line
You should be able to do this hosting the aspnet inside you're exe. So why does he want the UI to be web based? I ask this because to me these sets of requirements does not really makes sense to me. Is it that he wants to have a better looking user interface?
Have a look at the [docs](https://code.visualstudio.com/docs/editor/command-line), everything you need is right there.
Sounds like a simple byte[] array. Or you can check out MemoryStream and StreamWriter.
It doesn't work with byte\[\].
This is a sample from JavaScript project. `const data = encode([ 'r', [ 'profile', username, '', null ] ]); // this is byte array` `// this.socket.send(data); this is not working when I sent to the socket` `this.socket.send(data.buffer); // this is working` &amp;#x200B; What is the difference between `data` and `data.buffer` ? I am sending as byte\[\] in C# project, so it doesn't work.
Go do the code, that is all I can give you, taking 400*1.14 produces a number smaller that 456 (454.9999999999994)
But it's not precisely 1.14, that has an error bar, so it surely doesn't matter if you're happy with a rounded/floored result.
Hey! Thanks for the response. I'm leaving the game name out of the public post on purpose. Great feedback, that's the last thing I want to do! However, I am very confident I am not bypassing any security measures so that is not something I am concerned about. Appreciate the thought!
except 455.9999994 floored is 455 not 456
All classes that should report changes must correctly implement that interface and actively report the changes. There is no way around that.
I'm not sure if "hit run and see that it works" is important. I would expect a clean template without anything to delete and it still should work. I'm not sure what everyone's fuss is about that I don't like to delete "hello world" every single time I open a new project.
So? 400*1.1397465435 floored is 455. That's why I'm questioning your faith that your input 1.14 is *exactly* that.
A thing to consider in EFCore is that if the related entities are in the context they will be assigned to the corresponding navigational properties. Serialization problem that stem from circular references can be avoided with proper attributes on navigational properties. I read this in the EF Core docs. Another option to consider is avoiding the navigation object property and leaving only the ID property. Be careful here though, it might make your database schema out of sync with the model, so a new migration is highly recommended, if you have one to one or one to many relationships, they might need some tweaking in the OnModelCreating's model builder of the appropriate dbContext class.
May not be important for you, but Microsoft apparently thinks it's worthwhile for newbies learning it and keeping it as accessible as possible for them. For experienced developers, deleting the two lines is so trivial that it isn't even even an issue; you're the first person that I can recall to raise it on /r/csharp as a problem. And as pointed out, it's easy for you to change it to whatever you want it to be: https://docs.microsoft.com/en-us/visualstudio/ide/how-to-update-existing-templates?view=vs-2019 So the best of both worlds is maintained.
It's turtles (INPC) all the way down.
lol RUN
If VS Code is in the PATH variables of your OS then It's just type the command `code test` in the terminal and it will open the VS Code in this folder.
Dotnet core using raw http handlers should do the trick.
Kestrel with ASP.NET Core would be a good choice, here's the docs on overview and usage https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-2.2
If vs code is in the PATH variables then you can use the Process.Start with first argument as destination folder. If it is not then you will need to give the full path to VS code in the Process.Start with first argument as destination folder.
Games built using the Unity engine are coded using .NET/C#. So when people want to make a modding system for a Unity game that the game does not have. Modders will look for, and modify, Assembly-CSharp.dll. Subnautica is a great example that is off the top of my head. Subnautica does not have a modding system, but go to Nexus Mods and search Subnautica and you will see that people have made mods for that game and even modding systems. Modifying an IL assembly is quite complex, so if you are just starting out, I would not recommend doing this. But if you ever wondered how people made mods for Unity games that do not have mod systems, this is how!
I need to know what this Narlea.exe thing does.
Is this for your own understanding or is it something you want to make sure is true because you have logic that depends on the memory being laid out that way??
I am a newbie, but I don't see how a template for coding starting with lines that have to be deleted is for "newbies learning it and keeping it as accessible as possible for them". It's not a big problem. I just think it's better if the template starts without Hello World. It's an eyesore, and most newbies end up deleting them anyway.
Im working on [SharpDiscord](https://github.com/estchd/SharpDiscord/), an unofficial Wrapper for the Discord API. Its a lot of work, but im learning a lot about Websockets, REST, async and JSON
Something for my own understanding but that I could possibly apply in the future. For example ECS in game engines, they like to layout data sequentially for cache performance.
Is this a prank?
A good example I think is the inclusion of the `Console.ReadKey();` line. If you're a newbie, you might just write something like `Console.Write("Hello world!")`, hit play, get confused by the error, eventually figure out you're missing a semi-colon, fix it, then hit play again, then Visual Studio's GUI jumps around a bit (going into debug mode), something flashes on the screen (if you're quick enough to notice it), and... nothing happens. Because launching a console application by hitting the play/start-debugging button automatically closes it after execution completes, but this is completely unknown and unexpected behaviour by someone unfamiliar with it. That is not a good experience for first-time users. And again, as pointed out, _you can just change the template yourself and make it blank._ But at this point, we'll probably have to agree to disagree on Microsoft's decision. Feel free to voice your opinion directly to Microsoft Visual Studio team: https://developercommunity.visualstudio.com/content/idea/post.html?space=8
The default layout for a `struct` is sequential, and the padding for alignment of primitive types is generally what you would expect (structs are padded to a multiple of their largest field, fields are aligned to multiples of their own size). This can be customized with the [`StructLayout`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.structlayoutattribute) attribute. Structs (value types) don't have any object header or inline metadata information that would change their size or layout (unless they are [boxed](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/types/boxing-and-unboxing)).
OP wasn't very clear on the requirements for the website aspect of it (Are users on the same LAN or connecting over the Internet? Do you need HTTPS? Do you have a server that is on 24/7 to host this?) but I agree that the approach OP is talking about and some other comments are making suggestions for are crazy. You need a real web server to host a website for a variety of reasons. Step one should be figuring out that part and step two should be making the code work in that environment. Taking a WinForms application and adding some hacks to make it technically able to serve HTML content to avoid learning and using standard, secure, off the shelf web hosting technology is a terrible idea.
How do you plan to do ssl? You mentioned password so it is needed.
INPC or Reactive Programming
You're in a bit of a tough spot right now because it seems that you do not have the knowledge required to discuss the pros and cons of a solution design with them. So even if they are giving you requirements that might make your life painful, and you recognize that, without being able to describe to them why (in your own words - without someone else telling you what to say), you might be stuck doing what they ask. &amp;#x200B; There is some good advice in this thread and my best recommendation is to look into the things people have suggested and build up your knowledge so that you can more confidently discuss (and even reject bad) solutions in the future. For now, this is a learning experience and you will definitely come out of this with more knowledge than you had before, so I would disagree with people who are saying to "run away".
This is by far the best route. It will fulfill requirements and put you on a path to keep current with modern software.
How would you continue listening to the child property's PC if the parent object's reference changes?
The parent listens to it's children and propagates the changes upwards as required.
Good info. Just a small update, though. As of ASP.NET Core 2.1, Microsoft has deemed it safe to run Kestrel facing the internet. https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/?view=aspnetcore-2.2&amp;tabs=windows
Yes. Like this: `code path/to/folder`
But I mean let's say I have a class named People and a class named Person with a class of Age (int age) Not the best example but it'll work. If I initialize these into objects I'll have: people.PropertyChanged += PeopleOnPropertyChanged; But then I want to know when the person's age changes. So I'll do: people.Person.PropertyChanged += PersonOnPropertyChanged; But what if the Person object reference changes? For example, I say people.Person = new Person(); The first property changed event will fire because of course the Person changed, but then the second will be void after doing that I'm assuming?
If you're already going to use nginx anyway, why bother with kestrel at all?
Perfect, that's all I wanted to know. Thanks for your help!
Not sure if it's the language that slows you down. .Net works mostly like pyhton (compiles to IL and not to native code). Speed isn't a sufficient reason to switch.
What you want is extremly niche but I have an answer for you. I'm the developer of a nuget package that can do most of what you're asking. It lets you run a webserver from your exe. I made it so I can have a control panel you can access from a browser, it was not designed for constant use by users but it's running in a few production environments for years without issues. It even supports SSL. https://www.nuget.org/packages/DNA If you're not happy with all the features you can decompile and modify it. At some point when I've cleaned up the code I'll put it up on github. Combine this with Costura.Fody and you have your single .exe file also. Fyi what your boss wants is stupid and he doesn't understand the implications of what he is asking for.
At the top level, you shouldn't be listening to the changes in child objects. You only listen to changes in person. Person then listens to changes in age and then re-issues a message saying "hey everyone, my age has changed!"
My answer was based on the fact that "Kestrel edge" was not released yet. =&gt; it seems i was not aware that is has been released This idea is that you should never expose directly your httpServer for several reasons (like security / load balancing / zero down time deployment ...) i sais "Nginx" or "HaProxy" so that they would only be used as reverse proxy there are just here to forward the request to kestrel (based on a "live and/or readiness" probe) For example if you want to handle throttle/http 429 you can set it up in the reverse proxy not in your business code You also don't expose real port/internal machine etc ...
Yeah, at work the all web development is done using mvc
I think people should learn programming (including Console.ReadKey()) by tutorials, not by built-in template. I still think it's better if a template doesn't have built-in codes you have to delete to start coding.
Ok. So what I know is that reflection stuff, which is metadata about your types, is stored in a separate and cenralized space in the assembly. Objects do have memory overhead, structs don't (it actually depends on the gaps between members. Read more here https://stackoverflow.com/questions/33671215/what-is-the-memory-overhead-of-a-net-custom-struct-type/33671230#33671230 )
The first thing you should do for this project is update your resume. The second thing is submit that resume to other companies.
You misspelled all three technologies. #HelpfulInternetCitizen
Well, I think the ratio of water to brains in your head should be more in favour of brains but here you are, a bit of a waterhead.
You have some pretty strong opinions for someone who: * just started programming a couple days ago * doesn't know how to make smartphone games * doesn't know what an "engine" is * doesn't know what Unity is All questions which could have been answered via the self-initiative and tutorials which you ironically assert people should be learning from. I say this because you are going to need _a lot_ more humility, humbleness, and initiative to be successful in developing your programming skills. Continuing to make questions of this sort and having this attitude is likely to make people suspicious of your motives and/or not want to waste their time on such asinine questions and discussions.
..what?
The advice below is great. I will add that you should discuss with your "they" why they don't want certain things. One of the toughest bits of being a developer is dealing with sponsors or users. Always ask why repeatedly until you get the answer that lets you proceed. Never accept "You should know" or "because I say so" or "Time magazine said so", etc.
Actually, the book is in Portuguese, but point taken, it is better these days concerning languages. It is fine, I think your advice is good in most cases, I just believe that for some people, starting is hard, and those people require all the encouragement they can get to get off the ground. I do not know if this person here is that case, but I prefer for them to hear both sides of the argument and then make a decision for themselves than be discouraged and think programming is not for them.
Just updated the article and included your point as well. Thanks for the suggestion it really helped me to improve the article. Please let me know what you think about it! [https://kudchikarsk.com/delegates-and-events-in-csharp/#create-and-raise-events-in-csharp](https://kudchikarsk.com/delegates-and-events-in-csharp/#create-and-raise-events-in-csharp)
What the fuck is this mess.
Thanks for the advice! Updated the article and included your point, here is the link for the same: [https://kudchikarsk.com/delegates-and-events-in-csharp/#create-and-raise-events-in-csharp](https://kudchikarsk.com/delegates-and-events-in-csharp/#create-and-raise-events-in-csharp)
 Thanks for the advice! Updated the article and included your point, here is the link for the same: [https://kudchikarsk.com/delegates-and-events-in-csharp/#create-and-raise-events-in-csharp](https://kudchikarsk.com/delegates-and-events-in-csharp/#create-and-raise-events-in-csharp)
It reminds me of when a recruiter told me to put C# on my resume. I just said, "What?" "Well... you told me you have a lot of experience with C#, and that's a pretty big language. I don't know why it's not listed on your resume." "It says right here, ASP.NET." "Yeah, but C# is *much* more popular. Besides, there's no reason you can't have both." To be honest, there are so many like her, that she's probably right.
I need to write a web app but I'm not allowed to use HTML, CSS, Javascript or any code at all. Actually my boss wants me to use only two paper clips and a rubber band and he needs it by tomorrow.
Lmao
&gt;To be honest, there are so many like her, that she's probably right. Lol
I am writing a package that does this... its pretty simple to understand code.. I have been doing massive rewrites making changes in order to user the JExcel API.. but none of that is implemented in the version on github. public async Task ProcessRequest(HttpListenerContext Command) { var Request = Command.Request; } public async Task ConfigServer(string URL, string Port) { using (HttpListener Listener = new HttpListener()) { Listener.Prefixes.Add(URL + ":" + Port + "/"); Listener.Start(); var Server = new BuildFlow(Listener, 10, new CancellationToken()); var requests = new HashSet&lt;Task&gt;(); for (var i = 0; i &lt; Server.MaxConcurrentRequests; i++) { requests.Add(Listener.GetContextAsync()); } while (!Server.Token.IsCancellationRequested) { var t = Task.WhenAny(requests).Result; requests.Remove(t); requests.Add(Listener.GetContextAsync()); if (t is Task&lt;HttpListenerContext&gt;) { var context = (t as Task&lt;HttpListenerContext&gt;).Result; await ProcessRequest(new OutputPipelineParams(new HttpContextResponder(context, Encoding.UTF8), Server.Token)); } } } }
I mean she is kind of right. You should put C# on there for people exactly like her.
That makes sense. Thank you!!
And what if your experience with asp.net was in F#? Ironpython? Just because you did asp.net doesn't mean you know C# at all.
I don't see why my point is asinine. A template shouldn't rely on people immediately deleting some lines when they start a project. Just because I'm a beginner doesn't mean my point isn't valid. Appeal to False Authority fallacy.
Yeah? Well, I don't get your point.
And for automated systems that scan for keywords and exclude anyone without the ones it wants
Yeah, and it could all be VB.NET too. This is all a technicality. Anyone with significant ASP.NET experience also has experience with C#. It's not the only technology on my resume, either. Which is precisely why I don't want to repeat myself when it comes to C#.
A .NET Core 3.0 server side Blazor web application can be bundled into a single executable exposing your API and views on a port via Kestrel without IIS. You would need to create the views and controllers, but for the most part they could just be simple dispatchers to the class library methods you said you had extracted, except for the UI which you'll still have to code up. This would essentially allow you to use the class library as the shared backend component with your winforms UI and your Blazor Web UI. Keep in mind there are still security considerations on top of this, but it would meet your specified requirements while taking advantage of some of the newest features from Microsoft and minimizing your technical debt.
If you used SOLID that would be easy. Get somebody todo a front end in anything and webapi backend that reuses your business / service layers. You did separate it.... didn’t you ?? 😮
Lol
If you are a trainee then ask your supervisor for for help, because the things you are asking for are complicated mostly if you want a secure application. In addition, you are using very out dated technology that should not be used anymore. Look into .Net Core
Would NancyFx work? http://nancyfx.org/ And ILMerge for merging the assemblies so there are not apparent external dependencies? This is completely untested...
Yea really. I get stupid crap all the time. Like something wasn't meant to be on a certain screen. My business team, do it anyway.
.Net Core 3.0 Server Side Blazor will meet all of your requirements out of the box. Keep in mind you specified making it available on localhost, which is fine, but if you make it available beyond the machine it needs to be secured behind something like IIS or Nginx. Blazor will let you push data in realtime with less effort than any other .Net solution I've found. Because this is Core 3.0 it can also be deployed in a single executable. Good Luck! If you have any questions shoot me a message.
Try starting VS as Admin. If you can start the process, your problem is permissions.
npm aside, it would make sense to mention both js and node
Agreed. Just use the dotnet cli to get started. dotnet new mvc is where I would start. It is technically a console application and you can host it anywhere. Linux/windows etc. take it to the next level and run it on docket containers. Then you can truly run it anywhere! Honestly I don’t understand why you can’t use asp.net. I get old style asp but asp.net is much different.
You can download them here: [https://github.com/apress/beg-csharp-OOP-2ed](https://github.com/apress/beg-csharp-OOP-2ed)
I guess technically they’re right, you can use asp.net with VB and F#.
These are only activities 6.1 to 7.2. I need from 7.3 upwards
&gt; Contain no duplication. Unless the code belongs to different domains.
ASP.NET isn't a language though, it's a framework. It's possible, however unlikely, that you've been using legacy ASP.NET with Visual Basic. While her understanding and justification is flawed, her advice is solid. Put your languages on your resume for the hiring managers.
I’ve looked at a few comments and no one has brought this up yet. Are you expecting your users to open an .exe file, which will then run a local api and then also launch the browser and run a web front end, locally? Meaning you’ll distribute the .exe to everyone individually? Or is this actually being hosted?
Are you sure that they exists? Contact Apress support and ask...
It is not advisable to use events with inheritance. It is an uncommon pattern and usually confuses people. The template method pattern would be a better solution. -Source: Microsoft Design Guidelines.
Sure. Thanks
You can easily create a simplistic web server. Just write a network server that follows HTTP standard and bind it to port 80 Doing all that work when it is already done for you in a lot of different ways is a bit of a waste but you would learn a lot. You can store the web pages as resources you can compile into the exe file. (I think a better approach is to talk to whomever came up with the requirements and get feel for why)
What the hell is this non-sense
I think we saw the same video. I too didn't really understand why it's more efficient.
strings are immutable, so += is more expensive than using StringBuilder .Append(), cause underlying architecture of StringBuilder is specifically optimized for string operations (appending, removing, etc.) \[you can see StringBuilder in details here: [https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Text/StringBuilder.cs](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Text/StringBuilder.cs)\]
He's referring to StringBuilder's Append method. String's operator + will allocate a new object for each + operation (barring compiler optimizations), while Append just adds it to StringBuilder's internal buffer, and a String instance is only created when you do ToString().
What do you do with a field that you don't want included in the result from one endpoint, but do want included in another endpoint? /u/PinkySmartass you are running into a few of myriad reasons not to use the same type for your ORM models as for your API input/output types. You can stick your thumb in this hole in the dike, but you'll soon run out of thumbs to plug the holes that keeping popping through this lack of design.
He's not using String.Append() There's no such thing. He's using a StringBuilder class. Strings are contiguous chunks of memory and cannot be appended to. When you modify a string in C# you always get back a new string in a new location. What does this mean? Well the old string has to be copied into a new piece of allocated memory and the appended string copied on the end. This is really inefficient if you're doing it a lot, like building up a string in a loop. StringBuilder maintains a list of strings which will eventually be concatenated in one go when you request it. Lists are a really efficient way to append to something since each item just contains a pointer to the next item in memory.
\&gt; (barring compiler optimizations) &amp;#x200B; Compiler won't optimise this
In a simple instance of appending one string to another it should make little or no difference. The benefit comes when you contatenate multiple strings. So suppose you have: "hello" + "there" + "world". If you use: s = "hello" s += "there" s += "world" At the first += the length of the two strings are checked, 5 in each case, a new string of 10 characters is allocated then both strings are copied into it one by one. Then you get to the second += and now you have a 10 character string "hellothere" and the five character "world" string for a total of 10 characters copied. So a buffer of 15 characters is allocated, and the two strings are copied into it one by one for a total of 15 characters copied. So the system had to do two memory allocations (one for a 10 char string and one for a 15 char string) and copy 25 characters (the two 5 char strings in the first concatenation and a 10 and a 5 char string in the second). Now if you are using StringBuilder.Append then instead of allocating a string it allocates a buffer, the first string gets copied into it, 5 chars, then the second, 5 chars then the third another 5 chars. You have only one memory allocation for the buffer and copy a total of 15 chars (though in this case you get a slight performance loss when you convert it to a string since it has to allocate and copy the string). The benefit comes when you are appending lots of strings and you avoid all the extra memory allocation and copying.
Can you give me an example of how that would be done in this example?
The compiler will optimize away the concatenation version but not the StringBuilder version.
I much prefer a migration-specific tool like DbUp over EF's migrations, and then I use templates to regenerate EF model &amp; mapping classes from the DB schema. I personally use Migrator.Net along with a set of extensions to it I've developed over the years to support additional DB features. I prefer doing most of my migrations with simple c# code rather than SQL scripts, but every migration library out there that offers a code based API requires extension to be very useful (they pretty much all support straight SQL scripts, too, of course).
&gt; Is it that he wants to have a better looking user interface? Nailed it. Manager doesn't know how to phrase the requirements. Basically make it in WPF instead.
No it won't. No current JIT optimizes string concatenations
Removed: Rule 4
The JIT doesn't compile C#, it runs the CIL output from the C# compiler. The optimization happens at compile time, not at run time. You can see that this happens very easily using a tool like dotnetpeek to decompile the compiled code.
I know. But, look at the CIL, and you'll see the concat isn't optimized. The only optimizations that really occur in C# -&gt; CIL are eliding unnecessary locals and unnecessary `stloc, ldloc` ops. You can then also see the JIT output, as ASM, and it doesn't optimize the concat
It's what happens when people who don't know what they are doing ask people to do something they don't know how to do it, and copy and paste code from sites to try and cobble something, instead of hiring a developer.
Look at the disassembler output from that same file: .class private auto ansi beforefieldinit ConcatTest.Concat extends [mscorlib]System.Object { .method private hidebysig static void Main() cil managed { .entrypoint .maxstack 8 IL_0000: nop // [16 7 - 16 40] IL_0001: ldstr "Hello World!" IL_0006: call void [mscorlib]System.Console::WriteLine(string) IL_000b: nop IL_000c: ret } // end of method Concat::Main .method public hidebysig specialname rtspecialname instance void .ctor() cil managed { .maxstack 8 // [21 7 - 21 24] IL_0000: ldarg.0 // this IL_0001: call instance void [mscorlib]System.Object::.ctor() IL_0006: ret } // end of method Concat::.ctor } // end of class ConcatTest.Concat Note the single ldstr instruction and the single pre-concatenated string it loads?
Concatening constants is something else. That's not a common real world use case
So you were wrong and in some situations the compiler will optimize this.
&gt; But what if the Person object reference changes? For example, I say people.Person = new Person(); Then you'd implement a setter for the people.Person property that unhooks the previous Person's events and hooks the new one's.
"Rule 4- Request-for-help posts should be made with effort", what kind of extra effort could I put in for asking that question?
No more than 4 lines of code per method?
&gt; runs as only one executable? --- &gt; One solution is to write a separate .html file and link them but that means the webpage would be separate from executable file and I want just one .exe file with everything it needs. If you mean will my final compiled program only be one single .exe file, then no. Is your WinForms app just a single .exe file (meaning you're not using any nuget packages at all)? Your ASP.Net (Core or not) application is going to have dozens if not 100+ dll's, and you will also be publishing individual, static files for html, css, and js resources, and usually some other miscellany like jpg's, favicon, robots.txt, web.config, etc. That's the way it's done. Is it possible to build a web site all wrapped up in one single .exe? Yeah (well, with .Net it's often possible, but sometimes not. merging assemblies is tricky), but you'll be making a whole hell of a lot of work for yourself to create a completely custom and unsupported scenario. It would be a terrible decision.
&gt; And my employer is not happy with that. He does not want IIS or anything else, but just one executable. Your employer is clueless and has the completely wrong priorities.
No more than 4 lines of codd per method lmfao. Bullshit. That only makes things more confusing as you spend all your time examining a trail of 20 different functions just to send an email.
I second Rx
Generally we don't expect INotifyPropertyChanged to work like this. If I subscribe to events on type `A`, I only expect to be notified if properties that belong to it change. If `A` has some property `B` and I want to know when those properties change, I'm going to subscribe to `B`, not `A`. That also means I'm on the hook for listening to `A` to see if `B` is updated to a new object reference, so I can unwire my old subscription and wire a new one. It's complicated, but at least in WPF-like frameworks that's handled by the data binding features. And if you think about it, you have to bind to the deepest property anyway. If you bind a text box to "A.B.Name", behind the scenes WPF is watching for if its viewmodel's A property changes, that object's B property changes, OR if that object's Name property changes. It has to do slightly different things in all cases, and I'm glad it handles that for me becasue it's tedious! In code I write, I'd try to stay away from this kind of design. This is where people talk about *immutable* types. If I have an object `A` and I want to listen to its property `B`, I prefer to design it so `B` *cannot* change unless I'm given a new, different `A`. That way I don't have to worry about it so hard. So odds are if you described the real situation you're in, someone would know how to get out of the mess! A lot of times when you ask, "I'm trying to get this solution to work but it's hard", it turns out you might not have the right solution so it's better to describe the problem.
From the [detailed rules description:](https://www.reddit.com/r/csharp/about/rules/) (emphasis added) &gt; Request-for-help posts should be made with effort &gt; Make sure any code is properly formatted, explain what you have tried, and where applicable try to create a Minimal, Complete, and Verifiable Example. Be clear and courteous. **If a question that could have been easily Googled is asked without indicating what and why those typical results didn't work, it will be removed.** Help posts that have had little effort put into them will be removed at the discretion of the moderators. If you google "c# why is string append more efficient than +=" you get a boatload of results and discussions.
[asp.net](https://asp.net) web console app?? surely that's very obvious
wtf is a console web app?
he's also a junior, oh lord he's in for funsies.
At that point you might as well go for reactive programming and save yourself the hassle
If you don't think this line of discussion is asinine and you think this is an important/painful issue for you, just wait until you wander into the `var` debate. Oh boy.
I am studying what c# class is at the moment. What about "var"? What is that?
You'll find out.
Mind you that ASP.NET with OWIN does this too very easily (although ASP.NET Core is far better).
Create a separate process that executes where.exe passing narlea.exe as a parameter. Parse the output of that to get the full path of narlea.exe and use it in your Process.
I recently ran into this issue and the fix was basically ensuring that they is appropriate mappings between the columns in your query result and model type, \`CodeProc\` in your case. Precisely, the error is that one of the properties in \`CodeProc\` is not present in the columns returned by efcore \`FromSql\` query.
The command line script "Code" will respect your working directory. Don't know if that's the exe file or a batch script bootstrapping pwd into a command line argument tho...
I'm not sure about for C#, but I've used the MAPI API for the address book in C/C++. There is likely a MAPI COM interop for it. In Visual Studio with a C# project loaded, invoke the add a reference dialog and look in the list for an Outlook assembly. That should be the COM interop for Outlook.
Run through the Identity Server 4 tutorial. It's pretty good.
Seconded. dotnet new -i identityserver4.templates [https://github.com/IdentityServer/IdentityServer4.Templates/blob/master/README.md](https://github.com/IdentityServer/IdentityServer4.Templates/blob/master/README.md)
I agree with the Identity Server 4 answer. If you need extra help there are also some great Identity Server 4 videos on pluralsight.
Without a server on the internet to act as an intermediary you will need some code so the devices can find each-other via configuration or discovery. Once they have that info the receiver could implement a simple web server or TCP endpoint style server and just talk over that. 2-way communication is possible. It's not used as often these day but this might be an ideal project for WCF on the .NET side.
I don’t think so. The thing I remember was a video of a presenter walking through the steps they took to refactor. Thanks for providing this though.
Either &amp;#x200B; a) Via a server - probably [ASP.Net](https://ASP.Net) if you already know how to use .Net b ) Via files which you transfer using SDcard or USB connection
Eric Lippert, former member of the C# design team, wrote a couple of interesting pieces giving a high level overview of the stack vs heap. He clears up a few misconceptions about value types and when / if they are allocated to the stack. [The Stack Is An Implementation Detail, Part One](https://blogs.msdn.microsoft.com/ericlippert/2009/04/27/the-stack-is-an-implementation-detail-part-one/) [The Stack Is An Implementation Detail, Part Two](https://blogs.msdn.microsoft.com/ericlippert/2009/05/04/the-stack-is-an-implementation-detail-part-two/)
BouncyCastle is my usual go-to for crypto in C#. All of its hashes and ciphers use the normal “init/process a block/finalize” model that you’re familiar with.
I use a C# Framework called Nancy.FX for server API and I make Http calls to it from Android.
I'll go look for that now. Thanks!
No problem! It has support for about a quarter million algorithms, but MD5 is one of them. It may be a little overpowered for a non-security-focused application but hey, you won’t have to implement MD5 yourself and you’ll get some experience with BouncyCastle as a result.
Where is it? Thanks
That'll cause them issues if they want to serialize a message with the related user.
I didn't say you can't write method more than 4 lines. I say don't try to put so many abstractions on a single functions. Apply SLAP (Single Level Of Abstraction Principle). Here is quote from my article. Turns out long is not about length of code, it’s about level of abstraction.
nvm i think i got it :) [https://docs.microsoft.com/en-us/dotnet/api/system.drawing.graphics.drawstring?view=netframework-4.8](https://docs.microsoft.com/en-us/dotnet/api/system.drawing.graphics.drawstring?view=netframework-4.8)
Is there a way of calculating the size of a char(using font.GenericMonospace) so i can make the images to size rather then just guestamating 5000,5000 ?
I'm learning C# myself, but I was looking for something similar a couple of weeks back. I can't say if it works as I found that the library I was using already had such a function. Iirc, you have to draw it first so you can fetch the size. It was something like this: https://bytes.com/topic/c-sharp/answers/236397-exact-width-font-character
thanks dude!!
&gt; I've been looking at the MD5 code provided by Microsoft, but there doesn't seem to be any similar functionality. The `MD5` class has `TransformBlock` and `TransformFinalBlock` to incrementally calculate a hash.
I'd use ASP.NET Core over that NancyFX shit every day.
Yes, exactly. We'll distribute it individually. Nothing is in cloud. Just local.
Yup, that's true. EF Core 2 for some cases like mine didn't put default values for the missing columns, it a kinda a limitation now and I think they fix this because it is not practical My case was solved because I was able to change the return type of this procedure but it will be so annoying with something already exists and you can not change
... but why?
Iirc, Graphics has a MeasureString method
Try [https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.sha256?view=netframework-4.8](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.sha256?view=netframework-4.8) I like to do Compute hash but what you want is transform block + final as another comment said
I also had to upskill on token based auth and found this guy Jason Whatmore's tutorials to be valuable. He is thorough and have many articles on the matter. Hope this helps. https://jasonwatmore.com/post/2019/06/22/angular-8-jwt-authentication-example-tutorial
You're always going to be self taught. We mentor too, but essentially you're autodidactic. Our graduate programme takes smart graduates from any discipline, the emphasis is on smart and able to learn. You will never know everything, the skill is to know how to solve a problem and trust in yourself that you can. Experience just smooths the problem solving bit. Also, remember that all big problems are just a bunch of tiny problems glued together. Sounds patronising perhaps, but if you can't see a solution to a problem, break it into bits. Build Facebook? Nah. Get a Facebook logo onto the screen in a web browser. Yes. Just push on with what you're doing. As I said above, be confident in yourself and don't give up. Ask for help if you have a specific problem, but don't give up.
&gt;Reactive Programming We still need INPC and ICommand as they're the interfaces defined for a view to talk to its VM. Am I missing something?
Look for vacations and try to get job, you will know what they asked, what they wanted and learn it, if you don't know that.
https://www.scottbrady91.com/Identity-Server/Getting-Started-with-IdentityServer-4
Graduating on Wednesday, then on to the job hunt. I always wanted to make games and ended uo really enjoying mucking around with unity started with js on then moved to c# then the place i was studying was doing c# and enjoyed it a lot, so trying to find a job that primarily uses c# for now
When I was 24 years old, I decided to change my path. I graduated journalism so I had to learn a lot of new stuff to be a programmer. I was very lucky, I had a first job after 3 months of learning. The beginning was tought, but I accustomed to never ending learning. Now coding is very enjoing for me and gives me a lot of satisfaction.
I think you are overestimating how much you need to know. If you solve the problem and the solution is satisfactory, i. e. no repetition, no surprises, self documenting, elegant, that is it. You don't need to know more for that problem. The point of learning more is so you can solve more problems in such a way.
I don't think the `SHA256` class is helping him when he wants to calculate a MD5 hash.
If you are building a non-scalable local only connection where you expect the WPF app and Android app to be on the same network, then you can just host a web service in your WPF app. I have actually had to do this for various reasons over the years. Host ASP.NET MVC https://docs.microsoft.com/en-us/aspnet/web-api/overview/hosting-aspnet-web-api/use-owin-to-self-host-web-api Host Signal-R: https://docs.microsoft.com/en-us/aspnet/signalr/overview/deployment/tutorial-signalr-self-host You could host a WCF service : https://blogs.msdn.microsoft.com/brunoterkaly/2013/11/01/wcf-service-hosting-how-to-host-a-wcf-service-from-inside-a-windows-presentation-foundation-application/ You could expose an HttpListener or even TCPListener: https://docs.microsoft.com/en-us/dotnet/api/system.net.httplistener?view=netframework-4.8 If you need to do this over the internet and cannot/should not expose the WPF app to the internet then you'll want to use something as an intermediary. Basically something that they both can talk to like a Signal-R Hub hosted in Azure.
With IP v6 each app can listen on its individual address. You just need the server to communicate this address. Like with Skype. You chat via server, but send big files directly. Good telcos offer v6 without Nas. It may still be dynamic after reconnecting. Static costs premium.
&gt;Self taught or Uni? Pros/Cons Uni forces you to learn something which sometimes is an huge pros. The con is that a lot of is dependent on profs. Some are in touch with industry, industry standards and good practices and actually care about good code, but overall I'd say that programming level at uni/college isn't above youtube tutorials
How did you get a job after three months? Did you have no experience with programming at the start?
Currently teaching myself coding whilst in a mad full time job. I'd love to work in video games someday. Although I worry I'm getting to old to change career. I'm 27 and worry I might of left it a bit too late.
The current scope is to keep it on the local network. Thanks for the suggestions!
Got an IT job at 18 fixing computers. I'm 42 now and senior dev at a big education charity. Didn't go to university because I was having more fun partying
Try to surround yourself with smarter people or get a mentor. Some history. at 8 i did some basic programming, and sucked. At 20 i took a year off work and learnt chess. Then i took a year off work and played online muds,(text based games) more to the point i spent the year writing programs to play the game for me. Then I just started writing a top down real time game in visual basic (dont judge) which at the time was near impossible. So i go home, start a degree and get to show off what i had written at a job interview and got hired. I got lucky and started working for a good development company with a lot of people that were better, and a few smarter than me. TDD, C#, scrum, CI, because of smarter people than me i was there on day one. I sucked, and i still suck 20+ years later, but im still learning. The day i stop learning i wont be far out from being put out to pasture.
Suround yourself with smart people or your just learning from your mistakes, which imho is the slow way to do it.
If it was that easy i wouldnt spend my life fixing other peoples fuck ups.
Painfully obvious. OP it's on you to evaluate the correct tools for the job and communicate it back to the stakeholders.
Hey! I have been using the following IOC Container framework for my projects. [https://marcusts.com/2018/12/26/smart-di-container/](https://marcusts.com/2018/12/26/smart-di-container/) It's extremely powerful, flexible, completely free, stable and easy to use. You can create DI containers wherever you need them without worrying about centralization. In contrast to IOC containers which always store an instance when you create them, making it unsafe, this Smart DI container provides only three types of registrations namely do not store, shared between instances and global singleton PS. I am not affiliated with the company that wrote it. I am just a user.
You could use a message broker aswell, aslong an async message flow works for your case
Hi sorry for the late reply, but yeah all source code is available on my blog: code-ai.mk
Ah, but smart people are smart and difficult to catch ;) I mentor a lot, one of the first things I try and instil is the idea that it's ok to ask for help.
I wish I could sit down with you and talk about this. I feel your pain but it's a pain you should not have to endure. You don't have to learn everything to be employable. The Key Performance Indicators of a programmer have more to do with personality fit, reliability and their passion for giving value to other through their work.
Hey, can you tell us more about how did you get a job after 3 months? What language did you learn and what kind of job did you get and how is it going with you right now?
Wrong page but all the hashes are the same, only class name
Why wouldn't it be? I would much rather work with someone that has a solid understanding of a few constructs and what problems they solve, then someone that crammed for the job interview and is familiar with a lot of stuff but doesn't really understand anything in-depth.
really? have you seen some benchmarks? (I am not talking about native python without transpilation or other methods) the speed can be quite crucial with big networks or a lot of agents or complex functions, etc.
I can relate to the feeling of not being ready. You learn a desing pattern, well here are 5 more! This constant chase around knowledge, feeling like your'e not good enough and you will never "know everything" in regards to the subject (c# can be substitued for any other field), and this chase is really hard. Sometimes you just want to give up because you feel like you'll never be able to succeed. To be honest I don't really know how to deal with this, or why some people adopt this approach in the first place (not by will usually) and that's really frustrating. I hope you can find a way around this (and everyone else as well).
In fist place I started with SQL to check my analytic predispositions. I know that is not programming language, but it was easiest for me. After I learned a lot of it (created few databases, do a tons of online exercises) I felt that I want something more. So I stared learning C# and make simple winforms applications. Learning basics of C# took me three months. After that I stared looking for the job and I found free one month internship. After it I got a normal contract of employment. That was 3 month of full time learning. To do this I had quit my previous job.
Check out the Quick Starts section here: [http://docs.identityserver.io/en/latest/](http://docs.identityserver.io/en/latest/)
I found free one month internship after which I got normal contract of employment. I did a few simple applications and upload them to github. I think that was helped me in recruitment process.
You're not overestimating how much you need to know. You may be overestimating how quickly it needs to be learned. Set a reasonable pace and learn everything you mentioned and then keep working your way down the never ending list. That's the job. On the plus side though, they will pay you a fortune to do it.
&gt; no repetition, no surprises, self documenting, elegant, that is it ^ in order to do this, you need the above knowledge.
Cheers man, congratulations!
You can always post it as a "best answer" on stack overflow and let them tear it to shreds.
https://codereview.stackexchange.com/ There's so the option of creating a merge request and allowing the subreddit to comment on it!
Yeah, this is the "not /s" answer (the actual correct answer.) But I was being snarky :)
Went to college for math, chose to minor in CompSci because I liked dicking around with computers. Enjoyed the more math-like CS classes a lot but was pretty overwhelmed by any of the classes that had group projects because it just felt like an alien world where everyone else knew more than me. But by the time I was about to graduate I realized that I wasn't going to make any money with my math degree, so I decided to stick around and bump my CS minor to a second major. Was still shit at any of the group project type classes, but I tried hard and one of my professors took a liking to me and helped me get a paid summer internship at a large healthcare company that his wife worked at. They were a C++ shop that was transitioning to .NET. This was the greatest thing that could have happened to me: I ended up on a small team that was in charge of interfacing the company's equipment with other healthcare systems, so there was not much UI code to worry about, and socially awkward me somehow managed to become close enough to the whole team that I essentially was surrounded by mentors. That's where I started learning C#, and it was my first real intro to databases. They started me out with simple little projects: tweaking tools that the team used for various tasks, helping the team's QA build out a testing environment and writing tests, etc. By the end of the summer the team found me useful enough that they agreed to let me stay on as a perma-intern while I finished out my degree, and they gave me the task of rewriting an order processing app from C++ to C# - real production code! Having the team take me under their wing made this seem like something I could actually accomplish, and it turned out that it was. Once I graduated they hired me as a full-time developer. Ten years and four companies later, I am still mostly working with C#, and I am still learning every day. But I think the most important thing my internship gave me was the experience of learning how to read other people's code and how to tread lightly enough in an existing codebase that changes I make have a decent chance of fixing more bugs than I create. That, and it taught me just how important a good QA team can be for a company: you are always going to be learning new stuff, and you'll always be making mistakes of one kind or another, but if you have a good QA team you're working with a safety net.
By thinking? If these rules/patterns are any good you will rediscover them yourself. Of course learning rules is easier, but if you don't fully understand what problem they solve that just leads to cargo culting. Programming is primarily about solving problems, not learning about how to solve problems.
I have been doing this professionally for 20 years now. -First job * During the dotcom boom I enrolled in a javascript bootcamp while also taking computer science courses at my local community college. I did really well in the bootcamp and got hired on by the company running the bootcamp. -How long did it take? * It was fast, but honestly, I got very lucky. -How long before I felt like I deserved a job. * Probably 10 years into my professional career. The first job I felt like a charity case, 2nd job, huge imposter syndrome, it was difficult to learn from others because I was trying so hard to pretend I knew it all. 3rd job, finally realized that I wasn't awful, and that most of us are average and winging it. -Self taught or Uni? * Both, but I have to say that oftentimes the value of the 4 year computer science degree gets way overstated. Unless you're going to get a job doing actual *computer science*, you know, designing the algorithms that the rest of us copy and paste into our applications. Most of us though, just build apps, you don't need diffEq, Calc3, Operating Systems and Design, etc, to do that. -How bad was I at my first job? * Bad, how bad am I at my current job? Slightly less bad, much, much faster at spotting and fixing errors though. It's sort of like the old cyclist saying, it never gets easier, you just get faster. -Did employers ever give me a rough time? * Yes, and it was awful. I thought I was terrible, that somehow everyone around me was just smart enough to get everything right on the first try, meanwhile I was completely paralyzed by the fear of getting it wrong. Eventually, an essay by Paul Graham (in his book Hackers and Painters) helped me get over the fear of being wrong. You write the code, if it's wrong, you delete it, and you write it again, and you keep doing that until you're done. Practice the craft, write apps that have already been written, write code and throw it away, it doesn't have to be perfect, but if you do it all the time you will find yourself doing things that you never thought you could do. -Ever worked remote? * Yes, I was pretty confident in my ability to get the job done before I started working remote. -Self promotion, blogs? * I think it's hit or miss, you don't *need* to blog or self promote to get ahead, unless you're in one of those front facing roles like technical evangelist, or if you're on the conference circuit. I'm active on social media and on linkedin, not so much on github though. I think these days having some sort of online presence is "nice to have". -Advice for someone changing their career at 38? * That's a tough one since you're older than I am (37) but I imagine it would be the same advice I'd give to anyone wanting to break into software development. If you build applications using code, you're a developer. The difference between experienced developers and rookies is that the experienced devs have way more failures under their belts. So if you want to catch up you have to get in the reps, go out there and start accumulating failed projects, good luck.
Solving problems before you learn how to solve problems? If that's your idea of logic, your code must be a mess.
Well yes, you never solved anything by yourself?
Is there a senior developer or architect? Learn the basic concepts and let the senior developer point you in the direction of what technology you can use in a particular situation. I'm a senior developer and I still learn from others during code inspections.
Thank you soooo much! I have been battling with this for a long time.
I was at my freshman college year when I got my first job, mostly due to luck. I was self taught from high school, but it was not anywhere close to a real qualification. Finishing a Bsc gave me a stamp of approval and did help me expand my mind somewhat regarding abstract thinking. But most of the actual learning I did on the job, from experience and looking for tools for solving my problems. I remember and cringe how after 3 years of a part time student job I declared myself a C#/.NET expert, but some of that cockiness paid off and got me my next job. So I got about 13 years professional experience, but I only heard of design patterns till I was a couple years in my next job, and SOLID in the same breath. So my point is, you learn all the time. And you never know it all. If you think C# and its world is a lot, wait till you get to the sheer madness of the javasctipt ecosystem.
Skip memorizing the design patterns and just memorize the design principles instead. They are far more useful than any one pattern.
I'm assuming there are technical reasons and you need to maintain compatibility with the old way, but wouldn't generating a GUID be an easier way to generate a unique ID?
I have a job unrelated to programming where I can code for 8-10 hours per day (or do whatever I please). I have no idea how long that job will last before being completely automated, so learning this stuff is a form of security. I could continue on like this for 3 years, 5 years, 10 years, who knows. So I am not really stressed about moving into LINQ and OOP and all of that so I can have those check marks for my resume. I am learning in such a way that I become relatively saturated with the learning materials. So I am taking a basics of C# course, eventually I will be completely familiar with all of the content and be able to do every single thing in that course from memory. After that I will probably move on into an OOP course. Then I will rinse and repeat until I can do everything in that course from memory. I will just keep on doing that until one day I come in and receive a pink slip, or I become so godly at coding that I can accept a job somewhere in Asia (sick of North America, people talk about politics too much). I have a non STEM degree.
It sounds like you have been learning for just a few months. It's natural that you find out about new concepts every day. It would be strange if one could learn to be a senior programmer in a few months. I wouldn't worry about learning everything anyway. Here's my suggestion to you: Make a few easy applications on GitHub. Whatever interests you is OK. WinForms is really easy to start with. [Asp.NET](https://Asp.NET) is not that hard either, especially if you know some HTML / CSS. Learning while doing is best anyway. Once you have a few apps on GitHub, say in 4 months, start looking for a job while continuing learning. Nothing is more impressive for recruiters than a GitHub account. As for my own experience: * Was in programming class since 13 years old * Went to Uni for computer science degree * Didn't work in computers 7 years after Uni due to personal reasons * When I decided to get back to it, I took a night-guard position where I could sit all day and program for 6 months. I did WinForms, C++, Android, games, whatever. Granted, I had a huge head start over someone else * Eventually, my friend got me an interview in a startup and I got in (barely, with luck) * Now, about 8 years and 3 companies later I'm a team leader * Also, I got a blog ([michaelscodingspot.com](https://michaelscodingspot.com)) but I created it in my last job. So if I ever wanted to move to another company, I'm guessing it would be a huge help. Wouldn't recommend it for you though, GitHub projects is your best bet IMO
I already feel apprehensive comment on "Best Answers" on StackOverflow 😂😂
How do you generate the same GUID if the contents are the same?
OOO, do you mean pasting the GitHub page for the code directly here in this post?
Or run a programming subreddit and get an inflated sense of skill and self worth.
It is a constant 1.14 in a list of 9 multipliers. And also sample code, doing 400*1.14 results in 455.999999994.
Actually, the id is generated based on the contents of the disc and I have no idea how I could tied a GUID to that information. There are also some compatibility issues, but I could overcome those if I could find a way to tie them together.
Cheers :)
&gt; I was very lucky, I had a first job after 3 months of learning. The beginning was tought, but I accustomed to never ending learning. Now coding is very enjoing for me and gives me a lot of satisfaction. I'm 33 and started 6 months ago.
It might be a good idea to make a separate post. Post a link to the GitHub repo or page.
Thanks that is reassuring. Learning alone is a tough sell sometimes.
This is a horrible idea. What’s the point of using a web interface if it’s not actually online. It makes 0 sense to switch from WinForms if it’s going to be distributed like that. Just stick to WinForms. As others have said, this sounds like a classic case of your management having no fucking clue how current technology works, and pushing you, an inexperienced dev, to complete the project since you don’t know better. Push back on this project. Have someone setup some clean requirements, and discuss architecture with someone who won’t tell you “use C# and create a web application for local use without ASP”, sine that’s outright stupid.
This is a horrible idea. What’s the point of using a web interface if it’s not actually online. It makes 0 sense to switch from WinForms if it’s going to be distributed like that. Just stick to WinForms. As others have said, this sounds like a classic case of your management having no fucking clue how current technology works, and pushing you, an inexperienced dev, to complete the project since you don’t know better. Push back on this project. Have someone setup some clean requirements, and discuss architecture with someone who won’t tell you “use C# and create a web application for local use without ASP”, since that’s outright stupid.
It doesn't stop ever. Got my first programmable computer in '85 running a version of BASIC at 5 years old. Enamored with the control it gave a child I soaked it up. By the time I was 20 I had been programming on and off for nearly 15 years with the last 4 in school including lots of intense self study. It was the boom and people were less hung up on degrees than they are today. If you knew what a computer was you had a job, if you could program or do networking (I did both) you basically had any job you wanted. In my day self taught was about all you had, most university programs were 10 years behind the times and pretty much no one taught the oft-sought-after "WEB" technologies. These days lots of schools have stellar tech programs that cover all the modern concepts. It really comes down to how you learn, having the paper can help if you don't have a bachelors already for the usual reasons it makes thing easier but its not a requirement to make good money. A bit over 20 years later from when I did my first contract, a lot has changed but the big one that has never changed is the endless study. This is not a career where you can remain sedentary. There is never any "done" with regards to new concepts, new technologies, techniques and APIs. When you decide you are done learning its likely because you are working toward retirement. I spent over a decade before I thought I knew what I was doing, but people had been paying me a 6 figure salary the whole time and told me they liked the work. Impostor syndrome is real, and you will fight it. These days I pretty much take the jobs I like. I have a good gig right now where I work from home full time and its wonderful as we are expecting our first child. Balancing work and life can be tough with all the distractions at home but so far I have handled it for the last 3 years. Before this it was wither 25-50% work from home depending on the company.
Awesome! I'll give it a try tomorrow (I wanna edit the code to make it look nicer before I get absolutely demolished)
I'm wondering if there is more to the story we are missing. It's possible that the original poster doesn't fully grasp the business requirements and is just being told about the decision he needs to implement. Please note that this still doesn't mean the requirements make sense, but without deeper knowledge of them, it will be impossible for him to argue. Maybe the requirements are driven like this because they require all apps to display in a web browser because they aren't training their end users on anything else. That doesn't make much sense but I can't even count the number of times some huge opportunity with a completely ridiculous requirement got their way by stomping their feet and calling the CTO on the phone. Devs and designers can argue all they want but at the end as soon as someone starts with a sob story about how we are losing X number of dollars by not doing this, it becomes harder to steer it back on track. OP doesn't sound confident enough to change the direction on this because in order to do that you need the technical knowledge AND the business communication skills. If you tell them you are losing just as much as X dollars to technical debt, they just won't always fully grasp it. A lot of people will end up in this situation at one time or another in their career and it's not as simple as just saying no, there is a lot of skill in multiple areas that someone needs to be able to properly back that "no" up and to get others to understand.
Client side evaluation will be disabled by default in the next version. The query generation depends on the provider
I worked for a company for 5 years as a customer service representative. Got really tired of my job and wanted a change. Rather than looking externally I looked internally. Specifically on a process that could be dramatically improved through a web application. With the help of a supervisor friend of mine that I've known for years prior to working at the company, we tackled the problem and developed a custom solution for them in our own free time. We had no previous experience. Neither of us has a college degree. We presented the application to senior leadership and they wanted it deployed and in use on their servers. We saved the company approximately $160,000 per year with our application. We continued to develop it 2 days per week for about 18 months and the other 3 days was devoted to our actual job. About 2 months ago they announced they would be promoting my supervisor friend and myself to .net developers. Any dream is attainable if you are willing to put in the work. We put in days and weeks worth of time off the clock to learn and create the application we made for them and it finally paid off. My hobby is now my career.
I've been doing this for almost 30 years. I've been learning new things during all that time. Started out writing C and then C++, which moved from straight declarative to object oriented programming. Funny thing is, I'm comfortable with Javascript because it feels like C to me. They're both very unopinionated languages, which is to say, they don't have a built in preference for code organization. You spend a great deal of time and effort preventing errors. C++ is highly opinionated and when it comes too code organization and this came next because Microsoft introduced the Microsoft Foundation Classes, which made writing windows programs easy. However, Borland introduced Delphi at that time and their Windows classes (object oriented programming) was more complete. I wrote hybrid programs with a Delphi front end (Pascal language) and C++ backend. Worked with excellent mentor with this. Then came work where the whole program was just a UI for a database, client-server program. C# became the preferred front end and SQL was the guts of the data storage. Most of the work was writing a way to translate from tables to object and back. What we now call an ORM. This was mostly self taught. Then web interfaces came into vogue. Much easier to distribute (more difficult to secure) and now I was writing Javascript front ends and C# back ends with SQL data storage. Object Oriented thinking became a handicap because of the stateless nature of both http. REST became a standard. Now SQL is only one of many options. I'm now using MongoDB and GraphQL. I'm OK with that because, before SQL became the only way. Now people are thinking of the best way again. And I've learned React with Javascript and Typescript, which feels a lot like when C moved to C++. These are just the highlights in 30 years of constant change. There are now people who simply configure/chain large Python libraries and call that programming and that's another chapter, I suppose. Werr moving back to deployment on discrete machines rather than to a server using Docker, currently, you're still accessing Docker containers through a port, but very soon I'll expect that corporations will move back to deployment of docker containers in desktops and move away from everything being http protocol web apps. The industry is constantly circling the same, intractable issues. Consequently, you never get to be bored doing the same thing unless you opt into that comfort zone by maintaining a legacy system, but then you've become a panda who only eats bamboo. You can do this safely when you're 5 or so years from retirement.
Lol? Discord.Net is constantly updated and more popular than DSharpPlus...
Nobody releases Unity mods that directly edit Assembly-CSharp.dll (except for the mod managers that need to inject a hook to load their modding system). Mods that hook functions in Assembly-CSharp are using 'detours', which overwrite the generated machine code for a function with a `jmp` instruction pointing at the generated machined code for a replacement function. The things that make modding Unity games so easy are that the assemblies on disk aren't optimized, so they retain the original code semantics &amp; decompile cleanly, along with the .NET runtime reflection functionality, which means much of the source names are retained and you can simply ask the runtime for the memory addresses you need to install a detour. Although both of these aspects are closely tied to the overall runtime JIT architecture, the JIT itself actually makes writing a robust detours library significantly harder. Also, dnSpy makes modifying IL assemblies pretty easy (most of the time).
Started from a non-development job and worked on webforms for a few months and move on from there. The important part for me was to understand that you actually need people surrounding you. When you're around good developers (not all senior developers are good developers), you'll learn some tips and techniques from them and their work. When you're around "get it done" developers, your knowledge will be put to the test. From there, things were smooth sailing and opportunities became available to me.
First, to answer your direct question: I started when I got my first computer at about 10 years old. Studied computing for A Levels, did a degree in Software Engineering, went straight into my first programming job after that. I worked as a programmer for 8 years. Then got into teaching, became a flying instructor, then a school teacher, then in my current job working as a tutor at a company that offers public courses in a range of technology subjects. &gt; Every time I feel like I am making progress, there's another wall of information that I had no idea existed, that I need to learn Absolutely - and it never stops. I've been programming for well over 30 years, it's over 20 years since I got my first programming job, and I'm still learning all the time. I was out of the industry for 12 years teaching people to fly planes, and when I came back it was like learning from scratch again, there were so many new things that simply didn't exist only a few years before. &gt; How bad were you at your first job? Was it cringey? Did your employer give you a rough time? I'm cringing thinking about it now. I created a web site where, when you saved something, it overwrote a static HTML page. There was no database. I'm not sure if the server was multi-threaded but I definitely didn't think about whether someone else was using the page I was overwriting. But it was the 1990s, the internet was still a novelty, and no one knew what they were doing, it wasn't just me, so they trusted me to get on with it! I'd like to think I know better know... but I have no doubt in a few years I'll look back at some of the stuff I'm doing now and cringe too. Learning to program at your age (you said 38) is not as easy as when you're 18 (trust me, I've taught people of all ages), but I've changed career at various points in my life and never regretted it. Good luck!
tl;dr: self taught, made a career out of nothing with things didn’t go as planned for an original career, wouldn’t change my decisions. Keep learning an never second guess what you can achieve with enough willPower I went to college for network security back in 07-08... got expelled from it in 09 took a deal with the college (ecpi va beach) and left with a aas degree in network security. Never once tried to get a job with my degree because I knew if they checked into it even tho I settled for an aas degree the background would likely leave me unemployed. So I took a job around 2010 with a small Internet cafe software sweepstakes company and started as tech support for their locations done that gig for a couple years and left took a job in another state relating to that same software and building our own software as the only programmer for the company using flash as2, and c# winforms and wpf, and unity, Java and simplistic web stuff like html and css all of which I self taught never took a class at any time on any of them. Over the rest of those years leading to today I’ve switched to contract work I work with many companies mainly securing software built in c# and unity, but also creating software made in unity written in c#. I also use asp.net, php, I use mssql, and sometime MySQL, and sqlite all self taught. Most would probably say your self taught you don’t know the professional side of things and your codes likely a mess. I started out with many headaches and worked my way to building huge project million dollar making products in weeks-months from the ground up. To explain in more detail a software sweepstakes (sweepstakes based slot machine style games) system consists of many parts -Point of sale system. -a database to control and keep track of everything -Server tcp service, and udp service. For in room Or remote web server. -Game terminals made in wpf -20+ games made in unity or other engines -Kiosks that allow users to reload thier accounts with cash though a bill acceptor -reporting server to keep track of locations in out net play stats etc I build all this from scratch alone on my own and never once had a mentor or college for programming. There are many companies in this grey area and a lot of them do not protect their files so a lot of times I’ll reach out and offer helping them with custom obfuscation, eliminating configs or registry entries with their database info and passwords, compressing unity builds to single file instead of unity build exe + _data folder and encryption that isn’t commercially available so unpackers or deobfuscation is dependent upon custom keys. I clear 150k in salaries, I clear more in contract. There’s nothing wrong with being uni taught but there’s no limits to self taught if you set goals and achieve them instead of giving up. There’s a lot I don’t know about programming a lot of languages I haven’t learned but I do ok without them so I’ll move towards those when I want to.
:D
Meh, get in there, it battle hardens you :)
You can use WPF without MVVM. I would recommend it until you understand a reason why you would want it. Following design patterns blindly rarely leads to anything good.
Its less a fact that I want to use it, and more that this framework seems to only offer an MVVM tutorial. http://avaloniaui.net/docs/tutorial/creating-the-project Its unfortunate that my Uni education never really taught us design patterns except that one lecture we had on MVC, which I think we used precisely zero times in our course.
If someone else doesn't explain, I'd be happy to write up a post about it. It will take a bit of time and I'm off out. Drop me a PM after 12 hours ish (no idea of your time zone) if you don't get help and I'll pop something up when ever I'm up :) &amp;#x200B; MVVM is really easy to follow once you know five-ish things, but for some reason it's always explained really badly. &amp;#x200B; It's well worth getting to know, it's not convoluted. If I knock up a "try it and see" app I still use MVVM.
And no, you're not a moron.
&gt; but for some reason it's always explained really badly. I feel like this is most complex topics: * Calculus * Dependency Injection * OOP
I had a project in uni where we used wpf, and were supposed to use mvvm. However they explained what mvvm is, but not really how to implement it, so a lot of people dropped it and packed all of the logic in code behind files, directly manipulating the ui elements, because it was so much simpler. Considering the project had around 10-15 entities larger entities, complex dynamic forms for each, some of them related. The code started growing and reached a point that people started losing their head in it, it became too complex. Every small tweak had unexpected consequences, you turn on the light, the toilet flushes, you flush the toilet, a window opens... So, the moral of the story, use mvvm because it will reduce the cognitive load you will have to carry when making changes to your code. Code behind files should be used only when there is no simple alternative in the modelview logic. Find a good course on wpf and learn how to implement mvvm correctly. Pay for a course if there are no good free ones, because I guarantee 100% that if you have a larger project that mvvm will reduce the complexity and time you put into it. Rely on the benefits of wpf.
&gt; their experience and path towards their first job? I was a tech support in a mid-sized software house. After a year they started an internal recruitment process for people on tech support that wanted to become a junior dev. This is how I started programming for a living. (I was already a compsci studend at the time) &gt; How long before you got your first job? I got my first job _as a software dev_ 2 years after writing my first line of code, but I had other jobs in between. (I had to pay my bills!) Summary of techs I used in my programming jobs: * First job: vb5, vb.net, winforms, sql server, ms access * Second job: C#, asp.net, jquery, bootstrap, sql server, azure * Third job: python, scipy, nodejs, aws, postgresql (that's my current job) &gt; How long before you felt like you deserved a job? Oh, that's a tought question. I'm not very self confident and I constantly feel like I'm a lie. &gt; Self taught or Uni? Pros/Cons I learned programming at Uni, but 90+% of my current programming knowledge came from outside the Uni. I definitely think that you shouldn't understimate none, both are important. &gt; How bad were you at your first job? Was it cringey? Did your employer give you a rough time? I wasn't a bad developer given it was my time. My boss however was a very big douchebad and would harass all his employers (me included), which would undermine our self confidence for years. (Side note: Eventually I discovered that my boss had some daddy issues, which explains his toxic behavior. I still consider him a douchebag regardless, as he shouldn't be such a toxic person in a professional environment, especially being our boss) &gt; Ever worked remote? How good were you before taking it remote? Nope. &gt; Did self promotion and blogs etc help? I use github a lot, but I don't think my employers so far cared about that. &gt; Any advice for someone dedicated to the career change at 38 yo? Newcomers to programming are usually young, right? So make a massive use of your soft skills. A 20-year-old boy probably isn't used to behave on a professional environment. He doesn't know that talking too much or too little makes a bad impression, he doesn't know how to approach people on different positions, he doesn't know what kind of conversations should be avoided with his coworkers, etc. You have many years of knowledge on how the world works, make good use of it!
There have been a few different tools, but they all seem broken now due to the frequent changes of how Microsoft handled things (from before 1.0.0, to 1.0.0, to 2.0.0).
For the first tip of rethrowing exceptions it is better to use "ExceptionDispatcherInfo". Even when you use the "throw;" there still will be a part of the stacktrace that is lost. &amp;#x200B; ExceptionDispatchInfo.Capture(ex).Throw(); # [https://stackoverflow.com/questions/57383/how-to-rethrow-innerexception-without-losing-stack-trace-in-c/17091351#17091351](https://stackoverflow.com/questions/57383/how-to-rethrow-innerexception-without-losing-stack-trace-in-c/17091351#17091351)
Please don't use Avalonia as a beginner to UI development. It's is most certainly **not** in any way built on top of WPF. It's a cross platform UI framework that is inspired by wpf. And it has very little documentation and usually requires debugging. WPF more or less just works, has tons of documentation, and has plenty of tutorials. Use that and get comfortable before using something like Avalonia. No one is going to really be able to explain the concepts of WPF, xaml, mvvm, etc to you in a Reddit post. I encourage you to look for tutorials and such on wpf and try it out along with them. However, I can tell you that WPF was made for scaling applications. Swing gets messy fast. Also, you're doing a false comparison. WPF isn't tied to MVVM. You can use WPF without MVVM and you can use swing *with* MVVM if you implement yourself or use a library. Also, data binding is possible on swing, as well. Throwing up a jframe onto the screen is really not comparable to implementing an MVVM framework and using data binding. Trust me, you'd be more confused trying to do all of that in swing.
A design pattern is just a general approach to solving common issues. They are often a poor way to learn programming however. The best thing to do is hack stuff together as best you can until it works correctly. Then you will run into specific problems caused by your poor code organization. Then you can read more about design patterns and you may see how some adaptation of that pattern could help you. I have seen so much garbage code written by people blindly following patterns without any understanding of what the pattern means. Until you make the mistakes a pattern can help with it can be counterproductive to try and use them. Ultimately you want to focus on learning, which is an iterative process of struggling and mistakes leading to real understanding. Sadly programming is rarely taught this way and instead is presented as following recipes that magically lead to success. I've never seen this work in practice. It is a real problem that most tutorials you encounter will follow this philosophy. I would point out in this case that MainWindow.xaml.cs can contain any code you want, not just what tutorials say you should put there. Stuffing everything in there is not a good way to make production code but it may be a good way to start learning. You should quickly graduate to using a view model for most of your logic so you can learn the accepted ways to make bindings to your view. Then write most of your UI related code in the view model. When problems eventually arise you can think about how to refactor the code to solve those problems. You are absolutely correct that these tutorials that start with 15 simultaneous concepts are terrible.
Try messaging /u/kaisinell - he has a Discord channel where he does code reviews. He reviewed some of my code and gave me a few good ideas - I've been coding, on and off, for over 20 years but a few pointers from an independent pair of eyes is always nice!
You are over-complicating things for yourself. Start with a simple WPF project and get an idea of how binding works. MVVM is a suggested pattern and if you stick to it it will pay off as complexity increases. Considering your UI is pretty basic and likely will not explode into a ton of controls and layouts you need to manage WPF might not even be best suited to what you want. &gt;The view I can kind of understand is where you show the user the components on the screen, but what is the model if it is programatically generated? I heard WPF called a "data-driven framework" but all of my data is generated from a reaction by the backend, this is actually the point of WPF. The View and View Model are supposed to be primarily concerned with the UI and the user interactions with it. The idea is to keep your core game logic separate and to use properties and commands in your VM to get away from the UI classes as quickly as you can and into logic and processing classes (your game) where you are divorced from UI concerns. With data binding and correct use of observable your changes to data in your game logic can trigger updates on the UI automatically without worry about threading or halting. This decreases the amount of ceremony code you need as WPF generates it for you in g.cs files.
Woah, there's a lot here. It sounds like you've attempted to jump right into the thick of things with WPF and MVVM expecting to be able to pick it up just by reading docs and probing the API for similar constructs that you're used to. The main thing to keep in mind here is that MVVM represents a mostly new way of creating a UI application than you're probably used to. You won't be able to glean how to write an MVVM application just by poking at the API, rather you'll need to find resources that cover the core concepts of MVVM and WPF specifically. Similarly, many of the concepts and practices you're used to from Swing either don't exist in WPF, or are discouraged. Trying to draw comparisons or find equivalent concepts is probably not a good way to go about things. Another difficult aspect of WPF and MVVM is that it's hard to understand the usefulness of certain constructs without seeing the full picture. For this reason, I think it's important early on to read through and understand an end to end MVVM example. That's what [posts like this](https://www.markwithall.com/programming/2013/03/01/worlds-simplest-csharp-wpf-mvvm-example.html) are for. And finally, it's important to note that WPF and MVVM can lead to one hell of a rabbit hole. I've been meaning to write up a blog post up about this at some point (maybe some day), but this was my experience when diving into nontrivial MVVM work: * This MVVM thingy is cool, but I'm running into some limitations with bigger applications. I wonder how I'm supposed to handle this... * Okay, so there are certain [MVVM frameworks](https://stackoverflow.com/questions/5069783/which-mvvm-framework-is-the-best-framework-for-wpf-apps) out there to help fill in the gaps with cool features for more complicated applications, let's use one of those * I chose Caliburn.Micro, which as it turns out comes with a nifty [IoC Container](https://martinfowler.com/articles/injection.html), "hmm, I'm sure that will never be necessary" * Oh man, one of the big benefits of MVVM is that you can test your viewmodels. How cool, it's almost like a UI test without having to launch and automate the app! Let's get some tests in here. * Aw yeah, it's a good thing they have this IoC Container already integrated now that I'm refactoring towards [Dependency Injection](https://en.wikipedia.org/wiki/Dependency_injection) to help with testing and general improvements to my architecture, separation of concerns, etc... * Oh man, these tests are so great, but I'm having to write all these mocks. I really should get a mocking framework integrated.... And so on. So yeah, start with the basics. Get a grasp of data binding and the general separation of concerns between your models, viewmodels, and views. Odds are you'll stumble into a similar rabbit hole, but it's up to you how far down you want to go. It's valuable to get a grasp of the big picture before diving in. You don't want to be doing stuff just because "that's the way you're supposed to do it". But if you understand the big picture and the impetus behind this approach, it will help you drive your journey into deciding what and how you learn about WPF and MVVM.
&gt;...because it was so much simpler. Simpler to implement, not simpler to maintain, as you've described. This is the piece that most devs (and *all* managers) seem to prefer to ignore.
Do we need one? Just install the versions you want and target a specific one with global.json.
avalonia isn’t WPF
\- their experience and path towards their first job? * Internship -&gt; Create an Ardunio Alarm system from scratch (we completed the project) * Research Project Virtual reality learning environment (project was not completed, but started - had a terrible group of unmotivated individuals) * Internship -&gt; Worked on .NET applications / automations * The previous internship landed me part time and then a full time offer at the same company * Graduated with a BS in CS \- How long before you got your first job? * Immediately after I graduated I was hired on \- How long before you felt like you deserved a job? * Half way through my internship I knew I was providing as much value as fellow team members (granted this was not a fully development gig) * During my second job it took about 3-6 months before I felt like I earned the software development position I was in * \*Note every new job will come with challenges and imposter syndrome so be prepared for this \- Self taught or Uni? Pros/Cons * BOTH! * Self Taught: I was always interested in technology (and taking things apart) and this provided me advantages over colleagues as I understood the full picture of technology and how it worked * Uni: I truly did not learn anything new regarding software development until I was a junior in college when I started learning about design patterns and better overall code quality * A good example was when a director presented to us interns: He said to think about your knowledge as a matrix and as you progress in your career you check off boxes in the matrix. Basically what he was saying is try to specialize in a certain area (depth of knowledge), but try to cover the breadth of knowledge as well. \- How bad were you at your first job? Was it cringey? Did your employer give you a rough time? * I was actually highly praised. My boss at the time told his boss that the best person on his team was me (an intern). When I first started full time I actually gave a presentation to the IT department on transitioning from an intern to a full time position (I was being showed off as the ideal intern in terms of intern to full time transition). * Personally I cringed at my code and I was ALWAYS trying to improve. I knew I could do better so I pushed myself to write cleaner code and mess around with design patterns. I am typically harder on myself than my colleagues and this has pushed me to grow my skills further even when those around me were satisfied. \- Ever worked remote? How good were you before taking it remote? * I work remote now. I rarely go into the office. It's awesome that my company trusts me with only about 2-3 years experience to complete my work. IMO if you are motivated and driven remote work is no problem at all. I am transparent about my progress during our daily stand-ups and ask for assistance when I truly am stuck. The collective goal of a team should be to ship a high quality product so don't feel bad if you need help or want to solve a problem correctly. \*Note most of my team is either in a different state or in India. If my team was located in my office I would totally go into the office more. \- Did self promotion and blogs etc help? * Not sure I exactly understand the question, but IMO self-promotion should occur during interview stages. The whole objective of an interview is to convince the recruiter / hiring manager that you would add value to company X. Have confidence in your interview, but be genuine. If you are given a whiteboard problem find a solution first and then try to optimize the solution. Explain each step of how you would solve the problem. \- Any advice for someone dedicated to the career change at 38 yo? * Keep at it! * This may or may not be an unpopular opinion, but 38 is relatively young in the scope of your career. Sure you may be late to the game and you may be working with younger individuals. However, I think a big part of this is to translate what you already know from the real world. You are 38 years old.. your life experiences would typically be much more complete than say a 22 yr old out of college. Use this to your advantage. Use your non-technical skills to your advantage. Being a good developer is much more than simply being able to write high quality code. &amp;#x200B; Best of luck!
Why are you a king a game in wpf and. Ot something like monogame
I don't come from a CS background so I literally didn't know C# when I became a professional developer, I had done a course on OOP with java and some very basic programming at college (we didn't even use classes there). It was for a consultung company with very low employee loyalty so they hire anyone with a degree and some coding basics. Now I'm working at a place that actually hired me as a C# developer bit I'm still learning new things every week.
Curious, have you been coding long in C#.. Perhaps you used to program in Java.. Almost every line of code is referencing *this.* Not only makes it a pain to read, also not needed at all. Then the huge description header in it with donations and bla bla.. Guess this is not for me, wonder for who it is though.
What headers? Hah, just kidding.. they're removed now. As for "this": I have to maintain a lot of legacy code, and the glorious users before me *used* to have local variables and fields with the same name, causing confusion. So I got into the habit of using "this.". And to be honest, I actually prefer using "this.". :) It's easy to read for me.. at a glance I know it's not a local.
Of course you don't :).
I decided to switch careers at age 38 as well. Having no programming experience, I went to a university to obtain a degree and the knowledge I would need to do my newly chosen career. The university was good about providing some basics and a degree but the skills I actually use at work I got from Pluralsight, my own projects, YouTube, Stack Overflow, and books by people like Michael Feathers and Bob Martin. Fast forward five years and I'm crazy about solving problems by writing code. I can't believe they pay me to do it (or how well it pays). The learning never stops, embrace it.
Guess I should have specified that better, I knew modders who mod in a mod system modify the Assembly-CSharp.dll file. dnSpy does make it easier since it seems way smarter than dotPeek by JetBrains. I guess this mostly falls to, "I could have written my comment better."
Yes. I still don't get dependency injection.
Honestly, our industry as an engineering discipline feels like a fucking mess a lot of the time. You're 100% right in what you say, but compare it to a regulated industry like civil engineering. Think of the levels of training and discipline involved there... yet here there's nothing much to prevent a 2 week fresh graduate throw together a stack of npm packages into a moving system that could end up being used in something quite critical like healthcare or some sort of safety testing of some hardware, etc. and it ends up in production without any real due diligence being needed.
On my current project I decided to use MVVM at one task - editing some stuff. So I end up spending about a week on it, while it can be done in a two days; also the code was not really straightforward. Button leads to some action which invokes that which invokes this and so on and so forth. I think it's MVVM is good for complex UI with hundreds of buttons, fields etc; but if there is a really simply one its not worth it.
That wasn't clearly part of the requirement "unique disc ID". What OP wants is a hash, not a unique ID. It's *probably* unique, but two discs could collide. Now that I know this my question's answered.
Try some of these tutorials https://github.com/haavamoa/xaml-code-experiences They’re a great introduction to relevant concepts and patterns.
Exactly.
Nope, it was a very difficult pattern for me to grasp since there is a lot of code out there that just uses code behind and that's just how I did things when I first learned c#. It took me a full year to understand the design pattern and even 4 years later, I still find myself learning new things. But once you get the hang of it, you notice that it's incredibly powerful and simple to use. My code has never been more clean and modular thanks to MVVM and it's allowed me to rewrite full fledged desktop/UWP applications within a couple weeks just by reusing old MVVM code &amp; libraries that I built.
[removed]
MVVM is a pattern for managing complexity. All patterns add a little bit of complexity. We make that trade because we feel like the complexity it fixes helps us more than the complexity it adds. But in a very simple app, there's no complexity to manage. Half your code can end up devoted to just implementing MVVM. When that happens it's OK to write your code without MVVM. These patterns exist for applications that have lots of forms and/or many complicated components on the form. I've written applications that had more than 30 individual controls all updating based on separate asynchronous inputs. That's very hard to manage without something like MVVM helping you. So you're not a moron, it's just most simple applications aren't a good use case for MVVM. I still use it for them, but it's only because I'm *used to it* and feel icky when I don't use it.
Small suggestion: as you are rendering to a char\* anyway, you could move the OpenGL code to a separate thread, then sync the image with a custom swapBuffers()-like function, because you system may have a problem: the rendering thread is tied to WPF's tick() event, which might be either to slow or too fast, and not necessarily connected to the system's refresh rate. With a custom swapBuffers() you can implement some sort of vsync-like functionality (which I don't know where you could find that on WPF, but it should be possible.)
There's an amazing book you need to read, then - Dependency Injection in .Net. It's probably the best tech book I've ever read. Treat yourself!! It's super enjoyable!!!
I really liked the MVVM tutorials on Pluralsight. I'm on the fence about recommending it though because it costs money. I think there might be a free trial.... Maybe?
This exact problem is why I don’t like EF very much. It works really well for c# developers that need a quick database, but it does not work well when you already have strong DB skills and need to integrate I usually build the DB first then use custom integration tools
WPF and MVVM were designed together and anybody who is recommending not going with it together is giving a bad advice.
Dependency injection is really just a complex-sounding phrase to mean you instantiate your objects outside of the calling class.
I'm recommending learning things one at a time. Trying to understand C#, WPF and MVVM all at once is overwhelming to most people without a strong programming background and makes them give up. It's better to learn one aspect well and then incorporate the others. No different than learning how 'if' and 'for' work before trying to understand inheritance.
Recommending using WPF without MVVM really is not a good advise. Especially if we consider that OPs usecase will profit from reactive Binding.
That's not really true. Databinding is nice and all but many design decisions in WPF are the very antithesis of MVVM like the built-in command system.
If you really want `value` to be `null` when `response.IsSuccessStatusCode` is `false`, you should probably have separate methods *or* declare `value` as `T?`. If you intend on `value` being some non-null default, you'll either need to pass it in or constraint `T` to having a default constructor or something.
Its not really a matter of taste in this case.. Please explain what you mean with the command system and I will try to change your view.
I think there might be too much focus on making the view itself decoupled from the logic, it's the opposite that is important. I say fuck it, write code-behind button click that calls some specific class method, as long as that class logic doesn't rely on UI elements. If it can be instantiated and used in a console application you're golden.
Last I checked, you can't. I hope they fix this before RTM.
Does Unity not come with some shooter demo and provides you with the full source code of that? Would that not be the started kit you want? &amp;#x200B; Last time I checked Unity, it also many tutorials were included Out of the Box.. Basically step by step.. &amp;#x200B; If you already checked these (assuming you did not though) and you still have no idea how to get started, then I would highly suggest to temporary shelve this idea and build something easier first. Building a game like Half Life took years with a large team of highly professional developers. Although developing these kind of games got a lot easier with tools like Unity and Unreal, it's still an enormous amount of work and most certainly not for beginners. &amp;#x200B; If you insist on going with Half life 1 regardless, check out something like: [https://unity.com/fps-sample](https://unity.com/fps-sample?utm_source=youtube&amp;utm_medium=social&amp;utm_campaign=community_global_release_2018-10-23_unite-la&amp;utm_content=sample-fps_ole-video)
We recently hired a junior developer with a lot of enthusiasm, but not much knowledge and not even a CS degree. What this person is going to work on will be deployed in aviation and possibly safety relevant systems (because that is all we work on). That sounds scary at first, but it really shouldn't. Neither their code nor mine will go on to the aircraft unchecked. There are high standards for software of this kind and we have to adhere to them. This will also not be checked only by ourselves. 3rd parties and regulatory authorities will check what we did. Not sure how this is in other industries, but I just wanted to say that not all software development is comparable with Web development and "stack of npm packages".
Without creating a RelayCommand or DelegateCommand or whathaveyou, how would you bind and register an existing routedcommand in WPF, like ApplicationCommands.Close, to the viewmodel?
it's been a while since I've coded in WPF and MVVM but I struggled just like you as other GUI interfaces and languages were a bit more intuitive. alot of people covered alot here but the one thing that would really really help you get going faster is finding the code for data binding. it's a pattern. it was just a file of code or so and a pattern to follow that we copied into every WPF project we did. once you got that going it should help alot. if you cant find it.. I'll get it from a coworker jus DM me
Josh Smith made a Post about this back in 2008: https://www.codeproject.com/Articles/28093/Using-RoutedCommands-with-a-ViewModel-in-WPF The commandsink pattern is a clean and simple solution If you really really need this.
Uh... enabled nullable checks? That's supposed to help you write code that doesn't return null.
That's just more convoluted solution than the most basic RelayCommand.
I found this with redux. So few tutorials could explain it. Felt like very few people actually understood it but wrote a tutorial based on a tutorial.
It's more interesting to understand *why* you would want to do that, though. And that's a bit of a longer conversation.
WPF and MVVM are good for a specific type of application. And by that I mean line of business applications, usually with some kind of database as a backend. If you watch a tutorial on MVVM or WPF, all of the example programs are exactly the same, i.e. some kind of small line of business app with a database or some kind of collection as the Model. Like a basic banking app, some kind of inventory management app, a point of sale app, etc. The reason why they are all like this is because this is the only kind of application that MVVM is good for. &amp;#x200B; Its not good for making games so if making games is what you want to do then I would look for a different UI framework.
There is a one month trial with a visual studio dev essentials account
To add on to what was said before, it's really just about passing the objects a different object needs to it, instead of having some object create all of its dependencies itself (either through inheritance or some other way).
That’s really only for specialized usage where you want to returns the exception at a later point. Most people shouldn’t use this mechanism. Most people should use exception filters or naked throw keyword or throw a new exception with an inner exception.
First of all client side evaluation is obviously stupid idea. In fact I bet they knew it was stupid but it was a workaround for their non-functional LINQ provider. They could avoid admitting that the whole EF Core plan was a failure if they hid the fact that they couldn't translate shit under this "feature". Their SQL Server provider sucks. It sucks infinitely more than any other LINQ provider I have used (LINQ to SQL, NHibernate and all EFs). It was outright unusable in EF Core 1, it was barely usable in EF Core 2. EF Core shouldn't have existed at all. The world would be much better place for Microsoft and its customers if they had ported EF6 in v1 of .NET core instead of creating EF Core.
I second this ^^^ as a c# win forms coder going to UWP, XAML courses on pluralsight have been excellent. The WPF MVVM is very well from what I hear too
Also a free 10 day trial too :)
You can still use EF 6
Yes I will be able to use EF6 in a couple of months. Thanks to the fact that I (and countless others) told Microsoft in github issues, surveys, blog comments, etc. that they suck and we need a working ORM because their new one is barely useful.
install code analyses nuget, like https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp/
I actually had a 6 month subscription to Pluralsight as part of my work, but that was a good year and a half ago! Need to get a new sub sorted out
Why are you so set on learning a framework on top of NET? Just learn .NET, and if there's anything that can't be done (doubtful) then find a framework that does it.
I'm glad you're hopping around and telling everyone this. You aren't wrong that WPF was made for MVVM. But hear me out. A very long time ago, maybe the 2008-2010 timeframe, Scott Hanselman had trouble grokking WPF too. So he sat down and wrote an app without MVVM and asked people to help him refactor it to MVVM so he could get the picture. The result was [BabySmash](https://github.com/shanselman/babysmash), it's cute. I think it's bad advice to dogmatically stick to one approach. I think it's bad to respond to a person who says, "I don't get MVVM" with, "Keep beating your head against the wall, tiger!" I think there's value in refactoring code towards MVVM and it's more fun to learn with a working app than when you've got nothing functional.
I prefer “this.” too. No it’s not necessary, I think it’s more readable though and it really narrows down intellisense recommendations faster. Also I jump back and forth between Typescript (where this is required) and C# in the same project so it feels more consistent.
&gt; &gt; MVVM is really easy to follow once you know five-ish things OK buddy you can't post this without at least coming back to post the five-ish things. I like trying to explain MVVM too so I'm intrigued.
Guy just use a micro-orm and stop complaining. Check out Dapper
Yeah, my decision to use Avalonia was purely due to its .NET Core compatibility. Since Java Swing provides cross-platform compatibility in one UI framework I was hoping to find the same when jumping to C#. I guess its not a huge issue if I have to build a working game for Windows first then port to Mac/Linux in future, but it'd be nice to have a single UI that consolidates the three OS's together. The question is, does MVVM suit my purposes? I can't imagine much scalability of my game other than maybe adding in some new basic screens for new game mechanics. Pretty much most of the game just consists of simple text drawn onto the screen alongside some really basic shape rendering for a minimap and health bars, so really the absolute most I'd be looking for is a framework that can render basic text input and output components along with a basic canvasing functionality like Graphics2D.
MVVM is not the right choice for this use-case. You have almost no data that needs to be represented in a model. Using very basic MVC would be better here. Swing is a better choice here if you want cross-platform functionality. Though, to be honest, making a webapp is even more suitable for this use-case. You can do everything you want using html/css/js and it will work more easily cross platform than either swing or Avalonia. If you don't like JavaScript, look into typescript, which is another huge language pushed by Microsoft with plenty of inspiration from C#.
I think its worth noting that I don't think I've ever successfully implemented a design pattern in my project. To put it charitably... my UI implementation is a mess, particularly when it comes to how all the UI behaviours are coupled with the game logic. I've spent many a time trying to figure out how to make my program conform to SOLID, then give up and implement some solution that makes sense to me but probably to no-one else.
MVVM is not the right choice for this use-case. You have almost no data that needs to be represented in a model. Using very basic MVC would be better here. Swing is a better choice here if you want cross-platform functionality. Though, to be honest, making a webapp is even more suitable for this use-case. You can do everything you want using html/css/js and it will work more easily cross platform than either swing or Avalonia. If you don't like JavaScript, look into typescript, which is another huge language pushed by Microsoft with plenty of inspiration from C#.
&gt; WPF isn't tied to MVVM. You can use WPF without MVVM But you really shouldn't. The separation of concerns is so important (and a concept that returns in other technologies, e.g. Angular), plus MVVM code is so much more elegant. But there is a learning curve, yes.
Well, yeah, WPF and MVVM are difficult and it's very easy to use them wrong. The problem is in the paradigm shift - same applies to dependency injection, functional programming, asyncs and stuff. The good part is that when you master these new paradigms it makes you a better developer - having rather extensive WPF background I'm now playing with Angular and it looks quite easy to me (still, my abysmal HTML/CSS skills doesn't make it too easy to get something good looking). The bad part is that imperative style UI programming feels like a chore when you get used to declarative style, for me WinForms will never be the same :)
Why wouldn't I complain? I was using perfectly fine framework and MS decided to rewrite it to no benefit and make it significantly worse. They are supposedly investing money to make my life easier and my software better but they spent the money to do the opposite. I actually canceled a planned migration to core on one of my projects because of this. Apparently a lot of people were in this situation because bringing the best ORM out there is what they are doing right now with v3. I simply don't understand why they didn't do that with v1.
The low hanging fruit answer is a good start: It makes mocking and and testing a breeze. Want a unit test? No problem! Want an integration test with any combination of your app's real classes and Mocks? also no problem!
...with a sprinkling of stupid people and learn from *their* mistakes.
WPF is compatible with .NET Core 3 which is still in beta, just make sure you use VS19 if your using VS because .NET Core 3 doesn't work with VS17 and you need to enable a setting in VS to allow beta versions of .NET Core to be used
No
Fair enough! Bash is great as well!
I was attempting to work with Tesseract not long ago, and never could get it to work either. The ONLY thing I could really suggest, is making sure the version for Tesseract and the version of train data you have, both match up. Otherwise you may have to search through the 40+ pages of forum posts for a potential solution.
A. this has nothing to do with C# B. You can do exactly this in bash extremely easily by altering your PS1
If that's your use case, have you considered Godot? It's multiplatform and has a surprisingly solid UI toolkit for a game engine.
This is just tooling, and like myself, a proficient C# user, thought it was good to share. Maybe it’s useful for other developers.
&gt;their experience and path towards their first job? I've been a professional software developer since 2008 &amp;nbsp; &gt; How long before you got your first job? I got my first job as a software developer about two years before I graduated university. I worked full-time while finishing my last few classes, so I took online and night classes when available. &amp;nbsp; &gt; How long before you felt like you deserved a job? I've never had impostor syndrome or felt like I didn't deserve to be a software developer. When I started my first internship I was nervous that I would not be able to perform, and it took a few months for me to be comfortable developing, but I'm hesitant to count that. &amp;nbsp; &gt;Self taught or Uni? Pros/Cons I went to university, but I learned way more through internships. Having to refactor, writing tests, doing code reviews, and learning the process from the more experienced developers was an incredible learning experience. &amp;nbsp; &gt;How bad were you at your first job? Was it cringey? Did your employer give you a rough time? Looking back at my first job I was awful. Getting things running and pumping out code was way more important to me when I started out, and it resulted in a lot of poorly written and unmaintainable code. It sounds like a sweet gig but I feel like not having any senior developers to learn from really slowed down my progress. &amp;nbsp; &gt; Ever worked remote? How good were you before taking it remote? I'm constantly working remotely: maybe 2 or 3 times a week. I think the 9 to 5 office slog is outdated. My home office is bigger, quieter, and has more monitors than my work office. However, I think that in the first few years it's very important to be in the office so you can learn as much as you can from experienced devs. Having access to them face to face is really, *really* beneficial and some of that communication gets more difficult remotely. I started working remotely after about 4 or so years in the field. &amp;nbsp; &gt;Did self promotion and blogs etc help? I'm not sure what the question is here, but I'll try to answer the blogs part. I tend to stay away from blogs and articles that I consider opinion pieces. I used a lot of books and technical sites like stack overflow for the meat of my development knowledge. I focused on things like design patterns and principles. Understanding the *why* of software implementation is a lot more valuable than the how, and I feel like blogs and articles don't get too much into the why. &amp;nbsp; &gt; Any advice for someone dedicated to the career change at 38 yo? Here are a few things I learned through my journey that I believe are essential to being a successful developer: - Know your tools. Hotkeys and shortcuts have improved my development speed tremendously. It's easy to keep a flow going when you can quickly navigate through massive projects. - Be reasonable with your estimates. It's hard at the beginning because you want to prove your worth and you don't want to seem like a slacker. Sometimes that leads to promising unrealistic deadlines. You know yourself and your skills better than others do, so don't let other people dictate to you how long it should take. - Everyone has opinions, so don't be scared to give yours. Discussion is the key to a good solution. If you feel like you have some insight to a problem that one of your team members is facing you should let them know. - Don't get defensive about your code. Everyone does it. It's understandable. But take constructive criticism and learn from it instead of getting defensive and you'll learn a lot more. - You might feel like you're not good enough and that you don't measure up. This is called impostor syndrome, and it's pretty common. If you've made it to the point where someone is paying you to be on a team of developers you're probably doing something right. Just keep striving to learn and improve, and don't be scared to ask for help and you'll be on the right track. - I mentioned previously that I think the why is more important than the how. What I mean by this is your goal should be to understand *why* you're implementing a certain design pattern, or *why* you want to refactor; *why* you're doing whatever it is you're doing really. Putting that forethought into your code is what separates a decent developer from a great developer.
&gt;MVVM is really easy to follow once you know five-ish things, but for some reason it's always explained really badly. This is so true. I had so much trouble when first trying to figure out MVVM within WPF because all the explanations tend to leave out something important that they assume you'll just know. I don't think poor explanations is something limited to MVVM though, I think that is something pervasive throughout programming resources.
Just takes time
**Pardon the interruption.**
Don't get too tied up with SOLID, it is good, but can be difficult for someone first learning. The main lesson to learn from solid is to keep your methods and objects simple. The more you break every task down into subtasks the more you'll understand concepts like OO, SOLID, and design patterns and the more you will see their benefits.
What bothers me the most when people talk about Dependency Injection is that they also *mistakenly* call it Inversion of Control. Which, yes, it is a form of, but not accurate enough for our purposes. Like when talking about a square, you don't keep calling it a polygon. Call it a sqaure, dangit.
&gt; I think its worth noting that I don’t think I’ve ever successfully implemented a design pattern in my project. Don’t worry about that too much. Writing good code matters, and design patterns *may* help with that in some cases, but in the real world, your code won’t be measured by whether it follows the right patterns.
My company does OCR with .NET as a core part of its product. 2 years ago I did a review of the industry and honestly, as much as a PITA it is, only leadtools worked and worked consistently. Hate it because its not free.
Look at Prism MVVM for WPF. There are templates and videos out there by Brian Lagunas that will help you 1000% http://prismlibrary.github.io/docs/wpf/legacy/Introduction.html
I went to school for something totally different than programming, but taught myself how to program while I was finishing my studies. I graduated in '08 and never found a job in what I have my degrees in. I was unemployed for a year sitting in my dad's basement, doing small programming side jobs, and he pushed me to do it full time. I was super excited when I landed my first gig, but I was quickly exposed to how much I didn't know. It was incredibly overwhelming, but I just did my best to learn what I needed to. I taught myself as much as I could, picked up books where I thought they'd be helpful, and learned as much as I could from my boss and my coworkers around me. Hopefully an employer will have realistic expectations for a junior dev where they won't be dumping a ton of work on you that you're not qualified for. They'll hopefully be patient with you and help you learn what you need to in order to be productive and contribute within their org. You WILL make mistakes, but everyone does. Cut yourself some slack and recognize it as a learning experience. As long as you're not making the same mistake twice, then you're progressing as a junior dev. &gt; How good were you before taking it remote? Personally, I would not recommend working remote for a junior dev. Remote work requires a lot of self discipline, which many devs (junior up to senior) don't have. Junior devs also need to learn as much from their coworkers and environment, and I don't think that's as conducive when done remotely. I'm not saying it can't be done, but in general, it's not something I'd recommend. &gt;Did self promotion and blogs etc help? I think they help if you're willing to put in the effort and have a goal for what you're doing. If you want to simply put whatever you want out there, then go ahead, but that may not gain an audience or get any notoriety. If what you put out there has value for an audience, then definitely pursue it, but that requires that you A) know who you want your audience to be and B) that you can properly identify what adds value for them. Having a goal for the content your producing is incredibly helpful. &gt;I still think most of my code is shit, but I'm making progress. If you don't look at your code from 6-12 months ago and think "oh man that's crap, I can improve that in so many ways now", then you're not progressing as a developer. The thing that no one tells you is that your code is always crap because chances are you understand the problem better today than you did the day you wrote that code. Nothing's going to change that, as you gain understanding of the problem as you write the code that solves the problem. The other thing no one tells you is there's a lot more crap code out there than you think, and if think that code has to be perfect in order to develop a tool that's useful to someone or ship a product, then you're way off base. &gt;Any advice for someone dedicated to the career change at 38 yo? A career change at 38 is not easy, and it's not something taken lightly, but you've still got a lot of your career ahead of you. I imagine if you're making this change it's for a more rewarding career that hopefully has better monetary outlook. You likely have a family that you're trying to provide for and had to make some real tough decisions to decide that this was the path you needed to take. Quite simply, don't give up. Being a developer is full of frustration, from things not compiling, to errors happening for god knows what reasons, to bosses or clients changing their minds, to dozens of other things. Keep at it. The best programmers are not the ones that instantly know the answer to tough, complicated problems; they're the ones who can work out a bunch of different solutions until they get it right. Tenacity is rewarded, and layer on top of that the ability to find the answer yourself, and you'll be just fine. This profession has it's frustrations, but it's great when you get it right and when you can take a step back and look at what you've built.
Thanks to both of you for your help. It ended up being Tesseract and language being the correct versions.
Thanks for thew time taken to write all of that. Great insights. Cheers.
&gt;How does the Viewmodel even know about the view? In a strict MVVM world, the Viewmodel *doesn't* know about the View. The MVVM pattern is a set of guidelines to help enforce separation of concerns between you UI and your business logic. Your Viewmodel isnt really meant to know about your View, it is the *DataContext* for your UI. When people say that WPF is data-driven, they are essentially saying that you're defining a set of UI rules and behaviors and then *binding* your UI to a set of data that informs that behavior. I would forget about UI frameworks for now. If you're serious about learning WPF (which id highly recommend because WPF is incredible), I'd start with building some simple apps to get a good grasp of the basics of databinding. WPF also works *wonderfully* in tandem with dependency injection, so I would recommend learning about containers (I'd recommend Unity) as well. Once you have the basics, I am personally a huge fan of Prism's WPF framework. It integrates well with Unity and offers additional support for regions, modularity, and auto-wiring ViewModels. 90% of my professional work is in WPF development, so please feel free to drop me a PM if you need help or more resources. It's hard to explain all the power of WPF in a single comment, but I can help you if you have any questions.
Never hesitate in recommending PluralSight, it is easily one of the most comprehensive instructional platforms out there and the cost is really not much when you consider the wealth of resources it offers. I also watched the MVVM tutorial they have on there, it is excellent.
I'm going to focus on this part: &gt; Where do the functions go that append text to the screen? The View or the ViewModel? How does the ViewModel know about the View? What is the difference between a UserControl, a Panel, and a Page? Working with WPF and MVVM is a little mind-bending if you've never used a pattern like MVVM. You have to think a little different. Let's step back from MVVM and choose a simpler pattern: Presentation Model. This one just says "separate our UI from your logic". Presentation Model would say "functions that append text to the screen" are UI concerns. The screen's your UI, so that makes sense. Here's another way to look at it. I see UI in your screenshot for the player's hitpoints. If I want to implement, "The player takes 10 damage", which of these approaches would you prefer? 1) Without separation _player.HP -= 10; _txtPlayerHP.Text = _player.HP.ToString(); 2) With separation _player.HP -= 10; When UI isn't separated from logic, then any time you change data the UI must display you have to worry about updating the UI too. It'd be nicer if you could just update the player object and have the UI update, right? So Presentation Model tells us we should write UI that shows us a picture of our data, we should write data that doesn't know what its UI looks like, and we need to write some "glue" in between so user input gets to the logic and data updates get to the UI. There are a lot of Presentation Model patterns like MVC, MVVM, Supervising Controller, and I could go on. The only difference is each has opinions about how the "glue" should operate. So you've probably seen it a million times, but let's discuss the three parts of MVVM: * A **View** is something you defined with XAML. It binds to properties and knows nothing about the object it will bind to. * A **Model** is some type relevant to your program's logic. It doesn't know anything about what View will display it. * A **ViewModel** is glue, but abstract glue. It knows what properties a UI wants, and its job is to present the Model's data via those properties. So here's how I envision an MVVM version of just your left-hand side of the UI. Your model is some type that runs the game. It's going to produce output sometimes, but it doesn't know how to print it, so it has an event I'll call `Output` it raises with the message it wants to display. It also wants to be able to take input, so let's assume it has a `TakeInput()` method that does that. We'll say it has a `Player` property too, to represent a player. So, with no UI, if I want to move the player South what I believe happens is: * I call `Game.TakeInput("south")` * The game figures out if I can move south. * If I can, it raises `Output` with the message "You take a wander south." * The player's location changes, and other things might happen. * If I can't, it raises `Output` with a message indicating why. Now let's talk about the View. WPF doesn't really have a console element that lets us draw to the screen. It does have a TextBlock element that's pretty sophisticated for formatting. But I'm also thinking of ListView. That one displays a scrollable list of elements, and it strikes me that a console screen can also be considered "a list of inputs and outputs". So I create some XAML with a ListView and I bind that ListView's `ItemsSource` property to a property named `Outputs`. At this point nothing in my program has that property.When I bind to it, I'm saying, "At runtime, I expect this XAML's `DataContext` to be an object with an enumerable property named `Outputs`. Why enumerable? Because that's what `ItemsSource` hopes to find. So now I need the ViewModel. I know it has to have an `Outputs` property that is at least `IEnumerable&lt;string&gt;`. But I'm going to add and remove items as more outputs come in. In WPF that means I really need to use `ObservableCollection&lt;string&gt;` for the property. How do I know when an output should be added to the list? My ViewModel should take a `Game` object and handle the `Output` event. Then it can update the `Outputs` property every time a new output is added. How do I know when there is player input? This is where I sigh. XAML can only bind to properties, and events aren't properties. MS uses a concept called Commands to deal with this. A Command is an object that has an `Execute()` method. Unfortunately, MS didn't go the extra mile and `Button` is one of the very few elements that has a `Command` binding. So WPF people have had to use all kinds of tricks to deal with that. The one I like most is "EventToCommandBehavior", but let's punt on that for the example's sake. Let's *pretend* that TextBox has an `OnEnterCommand` dependency property that will execute its bound command if the Enter key is pressed. So I can put a TextBox down for user input underneath the list of outputs, and bind the imaginary `OnEnterCommand` to a property named "InputCommand", passing the TextBox's text as a parameter. So here is what happens when the user starts up the program and as soon as possible types "south" and pushes Enter: * A `Game` object is created and populated with startup data. * The `Game` object is passed to a new `GameViewModel` object, which handles the `Output` event. * A `GameWindow` is instantiated, and its `DataContext` property is set to the `GameViewModel`. * The `GameWindow` is displayed. (Footnote 1 here.) * The user types "south" and pushes Enter. * The TextBox checks if its `OnEnterCommand` property is bound, finds it is, and executes it. * The ViewModel has implemented this command property to point at a method (also in the ViewModel). * That method sends the input to the `Game`'s `TakeInput()` method. * The `Game` decides what to do and raises an `Output` event. * The `GameViewModel` handles the event and adds the output to the end of `Outputs`. * The `GameWindow` notices an item has been added to its data context's `Outputs` property and updates itself. (Footnote 1): (Generally you might want ViewModels to be told when their Window is displayed, this is more EventToCommand magic and I left it out. But when the window is displayed, it'd execute a command on the VM, which would call a method to tell the Game it started, which would cause several `Output` events, etc.) So that's how the separation works. * The View doesn't ask for a specific type to be its data context. It only asks for that type to implement certain properties, some of them commands, and it makes two promises: 1. If a data context property changes it will update itself. 2. If something happens that can execute a bound command it will execute it. * The Model doesn't know anything about how it is displayed. It has whatever design is convenient for making the logic work. * The ViewModel knows what properties the View wants and how the Model works. Its job is to expose properties that accurately represent the Model's values and, when the UI executes a command, interact with the Model as intended. You can certainly argue it sounds like the VM knows an awful lot about the View. But it's still fairly separated. It isn't *sure* if the View has a TextBox or some other more exotic control for input. It only knows it has a Command that will be executed when the user puts input in. that means, in theory, you could abandon WPF, start a new console application, and fairly easily write something that uses the ViewModel to generate a console UI. I hope that cleared something up. I didn't really see anyone else try to tackle your specific UI yet.
Nice. I am in a similar position. A dev position is very likely if I keep getting better! Congrats on the job!
Consider yourself lucky. My first exposure to WPF was a massive project to replace an old Silverlight site. I was flat-out told to take the Silverlight code and dump it into the WPF app and make it work instead of re-writing it. They wanted me to do this in order to save time.
Still has nothing to do with C#
I also think that MVVM is overcomplicated. It is a bit like using the same complex relational database for complex app with 1000's of users doing concurrent transactions or simple app that just stores a few notes.
Yeah but that's like telling people to stop saying "I'm eating fruit" when they're clearly eating an Apple.
If you have a hard time decoupling code from UI. Apply MVVM is the way to go. The framework will do it for you. Because more or less listens to for changes to your ViewModel there is inherently no coupling.
Eeehh....I don’t know how I feel about this. We are working pretty hard to influence people to use good patterns at my place of employment. We may not expect textbook implementations but when someone code uses the wrong pattern it will be declined in code review.
You missed the point.
Yup. It also makes your components instantly reusable. And it allows you to have third-party libraries where you can effortlessly mix and match the provided components with your own implementation. I almost never use libraries these days that don't use some form of DI, for that reason.
As some other users have commented - once you understand data binding, it becomes rather straightforward to use and data binding is an easy pattern to learn. I personally hated WPF. While I did find it very intuitive at the start, later on I was running into so many silly problems using xaml and I found myself thinking "If this was Java, I'd just do (insert list of things), and I'd be done with this". So many random, untraceable and many times non-existent errors... But both Java and WPF come with their own set of problems. &gt; Its all these questions that make me wonder why these UI design patterns even exist. I mean, the pattern exists for a reason. It solves a certain problem. It sounds to me like you just need to push through the initial confusion that happens once you jump into something new, and especially in this case as your brain is probably stuck in a Java-mindset. My advice to you is to browse through someone else's code (find something on github), and see what works and how. Also browse through the official documentation, that might help.
Thanks a lot! You’re a great help! I guess I should try to program a worse game for the beginning and work my skills up, until I manage to make a fangame....
I know it's been a decade since I posted this, but could I ask why, for future reference? I thoroughly explained exactly what I was after, with more detail than was strictly necessary.
Ok so since Apprentice can mean a wide variety of things... How comfortable would you say you are in writing the following application types: 1. Hello World 2. Address Book 3. Client / Server Chat Program Have you done anything in Unity before? Have you at minimum gone through the following Tutorials to completion with having working programs without downloading and running the provided code examples? [https://unity3d.com/learn/beginner-tutorials](https://unity3d.com/learn/beginner-tutorials)
Nice! Maybe that could fix the ugly hack done in the editor of Xenko. cc /u/xenko3d
I would add that the object tree creation should be done done once near the root of the application and that this this only applies to volatile dependencies (things this might change). You don't have to inject a StringBuilder.
Manning has a great book on DI - I suggest you read it. Same goes for WPF. Books are the best way to learn any complex subject, because of their didactic approach. Tutorials are often too random and all over the place. Just go to Amazon, type in WPF and order decending by rating. Read something from the top which is more less recent. Both MVC and MVVM are methods to completely disconnect the UI layout (XAML / HTML) from the data and logic (View Model or View). MVVM adds bi directional data binding and data related logic to the View Model (compared to MVC).
- makes dependencies mockable - can swap out implementation of injected interfaces more easily - constructor serves as a "contents" page that hints at functionality of the class What else?
you don't need anything but the latest version, and you should always be targeting that.
I'm curious enough to see your logic if you want me to take a look (all the other answers are good here ). I've only been progressing 34 years so I'm a bit new.
Yeah, it got complicated thanks to long history. But I think that as a beginner, you don't really need to care about these things. Things you need to know: * .NET **Framework 4.5-4.7** \- Original and old runtime. Only works on Windows. Will become obsolete and legacy with .NET 5 (notice there is no "framework" or "standard", just 5). * .NET **Standard 2.0** \- Microsoft latest and finally successful attempt at creating multi-runtime definition of what APIs .NET runtime should support. Not a runtime, just defines what classes and methods should be in library of a runtime. Different runtimes support different version of standard. Used for libraries that can be used among different runtimes. * .NET **Core 2.0-3.0** \- Microsoft's successful attempt at making multi-platform .NET runtime. Hottest new thing. 2.2 is only for web or console applications. 3.0 will include WinForms and WPF, but only for Windows. * **Mono** \- Open-source and multi-plaform runtime of similar age as .NET **Framework**. Was bough by MS and it's features slowly merged with .NET **Core**. Will become obsolete and legacy with .NET **5**. * .NET **5** \- Notice there is no "framework" or "core". Basically just next version of .NET Core after 3.0. With major difference being that in MS's marketing materials, it replaces .NET **Framework** and **Mono**, making them obsolete. One thing to make clear is the idea of **runtime**. Runtime in .NET is set of binaries that contain compiler, GC and all the necessary stuff to run code in .NET DLL, which are in machine and OS-agnostic bytecode. Each runtime also contains implementation of default libraries, which are then used by running DLLs.
Seems like Blazor is out of _[experimental](https://devblogs.microsoft.com/aspnet/blazor-now-in-official-preview/)_ - the official website is [here](https://dotnet.microsoft.com/apps/aspnet/web-apps/client) and the [official documentation](https://docs.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-3.0) looks very decent (to me atleast).
Practically beginners shouldn't have to think about this. Create a new project and the latest framework or standard is targeted. Run program.
Hah, yes, sorry I had to go out. I'll do it properly once I'm available later. I haven't even had a chance to see if they got their question answered! :)
I'm not a CS beginner. I'm a beginner in C# and .Net and I'm joining a company as a .net developer in a few months and I feel like I should know this.
Yep, such a good point. I knew people who did aerospace maintenance, as in actually hitting wings with hammers and broiling ailerons (?? I really have no idea how things stay in the air). They were beginners but their work was supervised and vetted through the same procedures which ensured the planes stayed off the ground (During the times they were supposed to be off the ground, I'm not sure if that's an integration test or not void TestPlaneIsOnGroundIfSwitchedOff() ). &amp;#x200B; We do the same thing. No one gets to deploy code without it being reviewed and tested. That process becomes more rigorous the more critical the impact.
&gt; Not a runtime, just defines what classes and methods should be in library of a runtime. The library of a runtime, like *mscoree.dll*?
No. I don't know exactly how it is defined. But I would say best is to think of it as a specification or a document that describes what classes and methods should be available. Then each runtime has it's own implementation. But as a experienced .NET developer, I never had to deal with such details. Only thing that .NET Standard is about is libraries. Eg. if a library says that it requires .NET Standard 2.0, then it means it can only be run within runtime that supports Standard 2.0 . [Handy table of support](https://docs.microsoft.com/en-us/dotnet/standard/net-standard) Really anything else (CLI, CLS) is just old legacy stuff that is no longer useful to know.
No, like a .h in C/C++, it just contains the declarations of classes/functions/structs, not the definitions. The definitions are already compiled and then your program links them.
Steve "Ardalis" Smith has a session on YouTube called "Working Through the Blazor Workshop From Scratch" I haven't seen it yet, but he usually has some great tutorials. &amp;#x200B; [https://www.youtube.com/watch?v=QkVQ6XdIsE0](https://www.youtube.com/watch?v=QkVQ6XdIsE0)
The problem with the naked throw keyword is that if you use that you will use information from your stacktrace and can make debugging harder. So instead of using the naked throw it is better to use the ExceptionDispatchInfo. This is also used by the framework to rethrow errors that happend in a Task when you await it.
Yeah. Tutorials tend to be super simplistic and then get copy pasted as blog spam. You come away from them thinking "Ok, that's the same X, but wtf happens for Y??"
C# support for Godot is still maturing though. But for a cross platform game, I'd use that definitely.
Patterns just give you a shorthand for describing a unit of functionality, they have no influence on the implementation. foreach is an implementation of the GoF iterator pattern. People can use foreach without knowing that it's an implemenation of a GoF pattern, but during a code review you'd want to establish the developer was iterating over the correct thing and doing the right thing with the things :)
If you look around, I'm pretty sure the source code for Half Life is somewhere (I remember reading a reddit post I think). &amp;#x200B; I've also seen a lot of posts where people "re-create" the source engine in Unity, bunny hopping and surfing etc. So that makes me think there's some kind of resource\[s\] out there somewhere.
It's a chicken and egg thing. We didn't start with SOLID or GoF and then build languages that conform. You write code that can be shown to work correctly and then everything else will start to fall into place. I mentioned below somewhere that you use patterns all the time. "foreach" is an implementation of the GoF iterator pattern. They're just Lego bricks. Knowing their names doesn't mean you can assemble them correctly. But knowing their names means you can reason about them more fluidly and eventually build a Chiron.
[Dev essentials](https://visualstudio.microsoft.com/dev-essentials/) usually has a free trial of 1 to 6 months included.
[https://docs.microsoft.com/en-us/dotnet/standard/components](https://docs.microsoft.com/en-us/dotnet/standard/components)
数据绑定啊 wpf的话 从这个开始吧 绑定到文本输入框 绑定到图片 绑定到列表 绑定到样式 任何你想绑定的东西都可以在wpf里面实现 数据 和 ui models and xaml
So can we say .Net Standard is the modern substitute for CLI?
That's true, but I've been writing code for about 14 years now so I would have hoped that I'd maybe have some good design concepts down, or at least be able to understand how to apply them in my use case. I did some gradual refactoring of my project, trying to lower concrete instance references and sub them out with interfaces but that's about as much as I understand when it comes to reducing the amount of coupling.
Looked into Unity? Seems more like what you're after than WPF? There is no cross-platform .NET UI framework out of the box - at the moment the UI stuff (WinForms/WPF) only works on Windows. Even though .NET Core is cross-platform, the UI stuff is not (only console / web apps).
That's a complex *name* for a simple topic. It's like calling the act of eating "resource consumption"
What is the full name of the Office API/DLL file?
Oh that's awesome! I'll send him a PM and see if he's interested. The code I have is super simple and honestly incredibly messy, but any help I can get now would make it that I write much better code later (rather than repeating the same mistake) Crazy to think you've been coding longer than I've been alive! Lots of knowledge hehe
If you're "a bit new" with 34 years, then I'm still a fetus! It would be amazing if you could check! Obviously if it's too much code then don't worry about it ofc. Here's the GitHub link: [DyTrailer](https://github.com/Ahsome/DyTrailer)
Man, if only stuff like this worked on Visual Studio Code. Might as well download VS Community and give it a shot. Thank you!
Can the Exchange web service be accessed using the same credentials for Outlook? Or does it require Exchange admin credentials?
&gt;My problem is I've been trying to use some stuff I've learnt about OOP (e.g. Interfaces) as well as generics, but I'm not really sure if I've done them properly or if I've made really smelly and bad code. Looking at this subreddit made me realise that there is such a thing as too much inheritance. &gt; &gt;Is there any online resources where I could send my github link for my code and have it checked, just to see if I did the major things correct? It's around 600 lines. If I have to pay, I'd be happy to you code in C# ? vscode is really good for javascript, powershell, xml, json, text.. but for C# you might better use visual studio Sonar Analyzer is available as an extension for VSCode, but it only deals with JavaScript, TypeScript, HTML, PHP, Python, Apex : [https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarlint-vscode](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarlint-vscode)
You probably do though, that's the thing. If you can build a bit of software that does X, and then someone needs software that does Y, and you build it, built on the knowledge you got building "system X" then you do :) &amp;#x200B; Underlying every change you make to software is the question of "What is the problem I'm fixin'" That comes first, and all the pattern stuff is just a way to short hand what you're doing when contemplating or discussing the problem, current or vNext.
Which part of the stacktrace will be lost? Because `throw;` is defined in such a way that it does not create a new stacktrace. Which is also the reason you can only use it in a catch handler. `throw ex;` on the other hand will overwrite the stacktrace.
As far as I understand it, no, it builds on top of the CLI. The CLI is the common language infrastructure, and defines things like types. .NET Standard is a formal contract of API's (using the CLI types) which should be defined by a runtime. So each runtime (like .NET Core) just needs to implement those API's to be .NET Standard compliant. This is super useful for cross-platform support.
" The more I try to learn, the less I tend to know. " LOL. I feel ya, buddy. Hang in there!
What is your background in other languages? Maybe it will be easier to explain with analogues.
Got it. So every version of .NET Standard can run apps that are built targeting itself or the previous versions. .net core 1.0v implements 1.6v of .net Standard and .net framework 4.6.1v implements 2.0v of .net Standard. So can apps built using core v1 run on .net framework 4.6.1v runtime because 4.6.1 implements all of the APIs that core 1.0v does?
I wouldn't say I'm an expert in any of those. But I know C, Java(pretty well), python and Javascript. But my problem(for now) lies in understanding this whole architecture Microsoft has set up rather than a language.
it looks like there is too many operation/condition on string which should be avoided but i didn't study your code deeply enough to tell you how you can perform differently.. anyway those are standard guideline you are not following : &amp;#x200B; design : &amp;#x200B; * WHERE ARE YOUR TESTS ????!!!! (test are the most important part in a code) &amp;#x200B; * you should never use litteral string in code use resource file (words, pattern) and config file (url, key..) * you should avoid string condition on your logic, if you really have too create an abstraction layer where all that operation are performed. * test for empty string should be provided from string.IsNullOrEmpty or string.Length * field set in the constructor should be set to read only * try to avoid using break * URl should not be string but URI * validate parameters are not null before using them * dispose HttpClient and WebClient after using them * deals with system culture for each int to string convertion, or contains test (Contains(string, System.StringComparaison), Convert.ToInt32(string, IFormatProvider) * mark UtilClass as static &amp;#x200B; style : &amp;#x200B; * remove unnecessary using * line break before open bracket
Programmers have a tendency to overcomplicate things.
We are using this https://netoffice.io
Hmm you're getting into territory I haven't strayed into much, but I think that yes, essentially they can. In fact, I know you can now target multiple frameworks - https://docs.microsoft.com/en-us/dotnet/standard/frameworks Actually yeah, it does seem like that's exactly what can happen: https://devblogs.microsoft.com/cesardelatorre/running-net-core-apps-on-multiple-frameworks-and-what-the-target-framework-monikers-tfms-are-about/
Ok, so let's go with Java CLR - Common Language Runtime - is the runtime, the library that actually compiles and executes your code, and contains Garbage Collectory. It's basically like JS Interpreter engine (V8). For java it's JVM. CLI - is the specification on how your assemblies are assembled so CLR can load and execute them. This includes metadata and bytecode format. For Java it's the bytecode specification for jars. CLS - basically it's not used. It's subset of CLI that says the lowest common denominator for all .NET languages (VB, C#, F#). You can skip it. .NET standard - is the specification on standard library. Basically CLI+CLR define only the most common types - Object, String, …. .NET standard define all other stuff - Files, Networking, collections, etc. So when you "target" .NET standard 2.0 you expect the runtime to provide you with all types defined in .NET standard 2.0. [This is how specification for .NET standard looks](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.0.md). Just a list of APIs that should be supported. Then .NET has another thing - runtimes. It's like different JVM implementations. .NET Framework, .NET Core, Mono, Unity - are different CLR runtimes. But they provide some level of .NET standard compatibility. So when you write a library for .NET standard 1.4 you can target all runtimes that implement .NET standard 1.4+ [Compatibility table for .NET standard](https://github.com/dotnet/standard/blob/master/docs/versions.md )
Sure about Unity? Take a look at Godot, it supports c# now and is completly open source and its growing very fast
&gt; Really anything else (CLI, CLS) is just old legacy stuff that is no longer useful to know. I don't think this is true at all. .NET Standard is the set of .NET APIs and CLI includes things like the bytecode specification, how assemblies are loaded and so on.
A link to an example gist containing the code to test and the stacktrace related to it. [https://gist.github.com/daanflore/4402fb614a568556fd321e1c793f2685](https://gist.github.com/daanflore/4402fb614a568556fd321e1c793f2685)
Things like CIL and CTS only concern language designers and people who implement runtimes. Really these are just specs on how to implement .NET or a .NET language. Now .NET Standard is something that every developer has to deal with although the rule of thumb these days is "just target 2.0"
mvvm is just a way you structure your code.if you do all the logic like if a button is pressed do something, in the behind code, that's fine. with mvvm you use xaml data contexts' and bind to them (aka bind a text box's text to a string in a class).
Got it. So because of .net Standard, we can safely build apps targeting a specific version which we can then run on other platforms which implement that version (and also previous versions) of .net Standard?
honestly just go for it. My first game was so damn out of scope it hurts, but i was motivated as i really liked the idea and i worked on it for more then a year and shelved it then... doesnt matter learned a lot! If i would have started with simple tetris i wouldnt have kept going
Man o man, do you need to use fish ([www.fishshell.com](www.fishshell.com) ) with a proper theme like bobthefish ([https://github.com/oh-my-fish/theme-bobthefish](https://github.com/oh-my-fish/theme-bobthefish) ). It is git-aware and you can search commands, not just auto-complete. ![](https://cloud.githubusercontent.com/assets/53660/16141583/0b3e8eea-3412-11e6-8068-617c5371f6ea.png)
I agree, Games are our of the scope of WPF, and MVVM doesn't mesh well with most games ime. Unity is great, but for the project id recommended Monogame it uses c#, cross platform(platform targeting type no equivalent to a .jar/.dll), as about as beginner friendly as professional frameworks go, solid documentation, and Unity was built from it.
Yes, that's what it's for.
From the [detailed rules description:](https://www.reddit.com/r/csharp/about/rules/) (emphasis added) &gt; Request-for-help posts should be made with effort &gt; Make sure any code is properly formatted, explain what you have tried, and where applicable try to create a Minimal, Complete, and Verifiable Example. Be clear and courteous. **If a question that could have been easily Googled is asked without indicating what and why those typical results didn't work, it will be removed.** Help posts that have had little effort put into them will be removed at the discretion of the moderators. If you google "c# create array from text file" you get many results and discussions on how to do this.
Fair enough. Thank you
Think of it as headers only.
Your kind of picking a very small case and claiming it to be true for all. Yes it does change the implementation. A good example would be just flat out calling SQL in your code which would heavily couple your code to the data access. In stead it is pretty common for people to wrap sql in a repository pattern allowing less coupling with the data access. Whether or not to wrap Entity framework in a repository pattern is basically a religious battle. Check it out there is basically a war on both sides on whether it is needed.
If OP isn't married to language, then Godot's almost-Python isn't bad, specially for smaller projects.
Another example would be the Singleton pattern which basically frowned upon any more. It makes unit testing very hard. Also there are whole slew of “anti-patterns” which some people swear by as bad ideas.
THANK YOU SO MUCH, YOU ARE A GODSEND. I will absolutely take all this feedback and improve the code, some of this stuff I would have never thought of. Thank you again! Sadly a lot of operations rely on string because that's the only way I can get the name of year of movies from folders. I will try my best to remove unnecessary use of string logic though Sidenote, do you think the base logic is correct in how the code is structured regarding stuff like Interfaces? I.e. that scrapers have an interface that lets my code check through each scraper. OOP is a hurdle for me right now, and I'm _hoping_ the way I did it makes sense Will try to fix all of these right now!
Are you planning to use server side or client side Blazor?
Yes
Naturally I want to learn and be familiar with both.
Don't hit on the poor Singleton, they get enough bad press already! Any DI framework you use will support two types of registrations; singleton or not singleton. You absolutely must have singletons.
Yes, but the repository pattern doesn't care about your SQL. That SQL you've hard coded just ends up inside the repository class rather than outside of it, it's still bad code, it's just a folder or two up. You can't take the iterator pattern, decorate it with caveats, and claim it's still the iterator pattern :)
&gt; null forgiveness operator That's the most ridiculous name for an operator I've ever read.
But ; is not the same as &amp;&amp;. The latter only continues if the command completes successfully, which is not the case for ;.
\[quote\]Sadly a lot of operations rely on string because that's the only way I can get the name of year of movies from folders. I will try my best to remove unnecessary use of string logic though\[/quote\] in a code, you always have a part where you can't follow the best practises, so the common behavior is to abstract all those logic in a "dirty layer" class so the main code still looks nice. &amp;#x200B; \[quote\]Sidenote, do you think the base logic is correct in how the code is structured regarding stuff like Interfaces\[/quote\] lots of programmers use interface like you do (and also Microsoft), but to share code logic, the best practise is to use inheritance than interface. &amp;#x200B; Interfaces are contracts, they are mainly use to define a contracts between two external application so that they can communicate, they are also heavily used for test, the usual way of using them is with a dependency injection pattern, and in the test project the original object is replaced by a mock which implement the same interface. &amp;#x200B; Dependencies injection is a pattern where on startup you tell your project which object you should implement for each interface used in the project, then you never instanciate objects, they are automaticaly injected each time you call the interface. &amp;#x200B; mock can be used in the same way in the main project than is test project, when you have to use part of the code which are not yet available. &amp;#x200B; void SetProperties&lt;T&gt;(T content) where T:IContent ??? =&gt; SetProperties(IContent content) void Download&lt;T&gt;(string url, T media) where T : IMedia ??? =&gt; Download(URI url, IMedia media) &amp;#x200B; we usually use T with a base class or several interface or new() or class.., i see no benefit or using it with one interface. [https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/constraints-on-type-parameters](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/generics/constraints-on-type-parameters) &amp;#x200B; for the project tree, the usual separation is like this : &amp;#x200B; * Core : methods which can be reuse from one project to another * Service : logic specific to the projects \* Models : classe \* Contracts : interface * UI * Tests * Resources : all resources needed to deploy the solution (mostly used for project host to the cloud, can be a setup project for standalone/desktop application) &amp;#x200B; Core, Service, Tests, UI and Resources are usually in a different CSProj all contained in a solution (sln)
Hey man, we're programmers. Eating *is* resource consumption.
What’s the equivalent for powershell?
Not much else, really. But as I said, the longer conversation involves explaining why we *care* about all that. I can't tell you how many times a junior programmer has responded to the simple synopsis with, "But couldn't I just...?" Yeah, you could, but you don't want to.
Not sure if that’s on C# path, but try courses by Zoran Horvat.
Don't be too quick to sit down for dinner, you should probably read a few blog posts on how to properly use the resource consumption pattern.
Ok. I brought it up because they haven't entirely settled things on client side Blazor. Until they get the Mono / .NET Core BCL merge done in .NET 5, you will probably continue to see a lot of flux in the client side blazor project. Client side blazor isn't going to release until 'sometime after .NET Core 3.0', per the Blazor team.
I learned enough about ASP.NET Core to write a web api allowing a potential customer to interface with our SDK via RESTful web api with basic functionality up in a day or two. I haven't spent much time with their other C# courses but in general, I've found a lot of gold in their courses on different topics. I've been focusing on PowerShell for the last few weeks.
Try the "best practices" courses
Also, keep in mind that my suggestions are just that. **My** suggestions. Some of this stuff is my personal style so if you have any questions, don't hesitate to ask me to back up my opinion!
Depends on what level you are on C# already. I did many courses from them, not just on C#, and found most of them quite helpful. I liked Scott Allen's courses but most of them are beginner level. I also found PluralSight quite good for reference on different topics. Good luck!
I might have asked this to early. I asked in Theory. Like I am a total Apprentice. I’m learning at codecademy and parallel to some YouTube tutorials. Codecademy says that I have learned about 30% of the needed basics from C#.
It's really not that difficult. At it's core a Windows Service is just a Commandline Exe app. Something like TopShelf can handle some of the minutae of managing a windows service too. [http://topshelf-project.com/](http://topshelf-project.com/) The tutorial on Microsoft is pretty useful too [https://docs.microsoft.com/en-us/dotnet/framework/windows-services/walkthrough-creating-a-windows-service-application-in-the-component-designer](https://docs.microsoft.com/en-us/dotnet/framework/windows-services/walkthrough-creating-a-windows-service-application-in-the-component-designer) (the VS Windows Service template IS a great example :))
I might have asked this to early. I asked in Theory. Like I am a total Apprentice. I’m learning at codecademy and parallel to some YouTube tutorials. Codecademy says that I have learned about 50% of the needed basics from C#. So still have a long way. I just couldn’t stop wondering how I could do it with Unity. Still: Thanks a bunch for your comment and the tutorials! You helped me out a lot! I might actually post updates on my fangame/fan-dlc as soon as I have a bit progress in my hands and I finished learning
Thanks! Does this also show how to interact with it from a second application?
You are right! Imma try it with my friend!
My advice is *don't*. You *can* using things like JSON, sockets etc...but it's a pain (wither you'd need to use Named Pipes, TCP handling or even a web server in your windows service really) . Since you already have a database why not use that as the point of integration? The Windows Service would then update some shared table with the results of calculations and the front end just read those...
Yes! Imo the overall quality of content on pluralsight is really high, most of the time way better than for example Udemy and slightly better then Lynda. Next to C# i would also recommend the [EF 6 course](https://www.pluralsight.com/paths/entity-framework-6)
.NET Standard is not a runtime, and does not run apps. Think of it more like a clearly defined ABI that your .NET Standard libraries are compiled to, independent of Core and Framework. Core and Framework can both load and use them. Core can’t run something targeted at Framework, and Framework can’t run something targeted at Core.
Ps has been amazing for me, no jokey BS, always straight to the point. I can learn more in 5 mins on PS than a 30 min on the avg youtube video. They have a 10 day /200-minute free trial, try it out :)
That works for me. I think that's part of why I'm enjoying programming so far. It's creative and technical at the same time, which keeps me engaged on multiple levels. So far it's all pretty "easy" to follow. Easy meaning that I can understand your intent and what the code is doing, but i'm not quite at a point where I would think to do it that way myself (yet). You use a lot of concepts that I'm just beginning to touch on, but none of it feels hard to follow or read. My biggest struggle at the moment (I actually have it open in front of me) is understanding the way you use interfaces. Particularly where you use the interface reference variables instead of just using an object. &amp;#x200B; It's getting clearer as I read more about them, but I need to do some small projects that focus on this topic, so I have a clearer picture of the benefit. I've been bouncing between your examples and [this](https://code-maze.com/csharp-interfaces/) tutorial (among others) to get a better understanding. It makes sense as I read it, and can follow what it's doing in your code, but I need more practice before I'm at a point where I can implement them like you do in your suggestions and understand why.
I was a novice at C# and was supposed to be a junior developer on an enhancement project. Thru PS I was able to keep the project on track after Senior level took another Job. I'm not a master coder but I was able to find video quickly that allowed me survive. I have access to other training thru work but I still keep a PS subscription as my preferred method of learning.
I only tried the WPF/MVVM/Xamarin courses a few months ago. I found them remarkably out of date. They were still useful because I was already familiar and I was more looking for information I didn't have, but I'm glad that was a free employer-provided subscription.
Zoran is my favourite author
Thanks for this awesome summary. I work in .net core every day and still didnt know some of this.
Unfortunately there is no equivalent :'(
See [Microsoft Exceptions Best Practices](https://docs.microsoft.com/en-us/dotnet/standard/exceptions/best-practices-for-exceptions#) and [this response](https://github.com/dotnet/docs/issues/9432).
Doesn’t exist. You’d need something like `if ($?)`. Wouldn’t be elegant.
A few things here: I think maybe one of the best books for working towards SOLID is *Working Effectively with Legacy Code*. That book defines "legacy code" more or less as "code that isn't following SOLID principles". So it's a book about how to take code that is "a mess" and turn it into code that is "clean" by the SOLID definitions. I have a few other go-to books but I think I'd have figured it all out years sooner if I started with this one. That said, games are notoriously difficult challenges for SOLID design. Some game designers argue you *can't* write games using "good" practices. Sometimes they have compelling evidence that their game would perform too poorly or be too hard to maintain. One thing worth knowing is not every type of program follows the same rules. SOLID principles are based on applications I'll call "business" applications even though lots of hobby applications follow that model. They arose based on decades of experience with those kinds of applications. But games may be a different kind of application with different sets of rules. It's possible there are different principles that work better for games, but nobody's written papers on those ideas. That's *probably* because while most business applications aim to be very similar to each other, most games are intentionally trying to do something nobody else has done. So while we have about 50 years of data about the best way for an application to interact with a queryable remote database, we don't have so much experience with, "How do I implement a game such that a player can rewind gameplay for up to 10s at variable speed?" So when Braid did that, the developer was implmenting it for *maybe* the first time, and certainly didn't have a lot of prior art to study. Even today, with 15 years of C# behind me and more like 20 of hobby work, I don't write SOLID code the first time if I'm doing something new. I tend to pick a small task, prototype a few attempts, then when I have something that works I start asking how I can refactor it to SOLID code. If it's the 2nd time I'm doing the thing, I know what the SOLID implementation looked like and where the rough patches were. By the 10th time, I just do it the SOLID way first. I have some further opinions about how games tend to work and if I think MVVM is the right pattern, but this has gone on pretty long! If you're interested, ask me, and remind me "it has to do with the game loop".
&gt; So instead of using the naked throw it is better to use the ExceptionDispatchInfo. I really don’t think so. But then again, I think naked throws should be avoided in favor of wrapped throws. &gt; This is also used by the framework to rethrow errors that happend in a Task when you await it. Yes but that’s a very different situation involving suspended execution.
I can only vouch for PS. After high school, I landed my first programming job back in 2011 and am still a .NET developer today. Most of PS's courses are very much to the point and one out of ten courses maybe isn't that great. Most of my fundamentals come from PS. The most recent course I can recommend is Shawn Wildermuth's [Building a Web App with ASP.NET Core, MVC 6, EF Core, and Angular](https://www.pluralsight.com/courses/aspdotnetcore-efcore-bootstrap-angular-web-app). I still mostly work with the .NET framework and WPF building desktop apps. After the course I was able to build a decent full stack web application and go from there. Also PS courses get updated quite regularly if required.
*C# Fundamentals* by Scott Allen was one of the first courses I did back in 2011.
User credentials is enought. All users by default have that rights
This is true for so many things in programming.
&gt; After high school, I landed my first programming job back in 2011 and am still a .NET developer today. So no college for you? Good income, no college degree isn't holding you back? I had a good career as a software developer (now retired). I had a college degree, but in *statistics and survey research*. Computer science wasn't a thing at my university when I attended. However, my *perception* is that there are a lot of computer science grads out there so companies are requiring that degree more and more. What's your experience? This is a very serious question, because I have a smart son interested in coding and I think it would be wonderful if he could either *skip* college, or earn real money for a couple years before starting his CS degree. Thanks in advance!
That's fine for now, while I'm using the front end application on the same laptop as the service and database, but I'd like to have it set up to where someone can walk around and register attendees on a tablet, while someone else walks around and inspects vehicles with a second tablet. I'd like the service to take care of all the queries and calculations and just send the data to the tablets. Also SQL express only permits named pipe connections from the same machine, not tcp connections from other hosts
&gt; Until they get the Mono / .NET Core BCL merge done in .NET 5, you will probably continue to see a lot of flux in the client side blazor project. Client side blazor isn't going to release until 'sometime after .NET Core 3.0', per the Blazor team. Client-side Blazor will ship after .NET Core 3.0, but probably long before .NET 5.
No, that won't work: .net core 1.0 may theoretically implement capabilities outside of the standard, but .Net framework won't have them. So .net Framework can't reference .net core dlls, nor vice-versa. They both can target dlls targeting .net standard. This means that any infra/intermediate package should strive to target only .net standard and only reference other .net standard dlls or nuget packages. Once you target .net core or .Net Framework, your consumers must have the same target (or higher version). It gets really interesting once you try to target the same package to multiple targets: then you can toy around with the capabilities you make available and what references you use.
Check Bob Tabor's DevU and Mosh Hamedani's courses. There are the best C# ones in my opinion.
Their Design Patterns library is worthwhile.
If you look at the gist, follow the link because the information redit shows is outdated, you can see that the naked throw in the .net framework loses the info where the exception was thrown in the try catch. &gt; I think naked throws should be avoided in favor of wrapped throws Here I fully support your opinion.
I would probably build the [ASP.NET](https://ASP.NET) core service with REST API service. It could do background processing and also expose REST API that could be called by windows desktop app and any mobile apps. Or this service could just serve Razor web pages for browser access.
Yeah at that point you'd probably want to use something like ASP.NET Core / WebAPI. I wouldn't advise direct access to a Windows Service as you'd have to implement things like authentication, enable it's secure etc..etc...Intranet / on same machine is fine but internet access really needs a proper web server as an intermediary to be secure &amp;/ scalable.
Would you have any idea where I should start looking for?
Awesome, thanks
I know they do, or rather: they set the position of the current stack frame to the throw place instead of the error place. They don’t touch the rest of the stack trace.
Up to a certain point. You can't write an executable in .net standard. Only dlls. So your entry point will have to be in one of the frameworks
What u are looking for is xamarin. Have fun
I agree, but the Blazor WASM runtime is based on the AOT Mono code line. Merging the BCL for .NET Core and Mono is probably going to cause some instability between the two, especially for AOT, since Microsoft said that they were looking for Mono's AOT implementation to be their primary AOT strategy.
For smartphone games - Unity For smartphone apps - Xamarin
Pluralsight is by far my favorite resource to introduce myself to a new language/practice.
It’s kinda like Swift and others’ force unwrap, except of course there is nothing to unwrap. I don’t know if it throws a NullRefEx when applied to null; that would make it semantically close to force unwrap. Otherwise it really is more a forget :p
You need to go into your BIOS and enable VT-x. If your BIOS doesn't show the option, either your CPU doesn't support it and you need another CPU altogether, or you need to update your BIOS. Look up your CPU online to know if it supports VT-x.
Its meant to demo ASP MVC knowledge. I can say that I used AD security in my past apps. Can also spout off the ASP Identity 2.0 and explain how saltinig and hashing a password would work if they really wanted to know how much i know about security.
You can use WPF with the beta version of .net core, in fact I'm doing that right now in vscode.
Are you an oldschool email list user with emphasis like that \_words\_ curious cuz im starting to notice a pattern with older users like that. before fancy HTML markup and markdown
... What's the point of using the single file feature, when you're using Docker anyway? It will cost you performance, and the advantage of a single file is not relevant in a Docker container.
Unity and Xamarin are for smartphone app and game, not for desktop?
With Unity you can deploy to all sorts of platforms IIRC - Andriod, Mac, Windows, iOS You seem to be very much a beginner so I'd start with C# Unity games on youtube Brackey's miight be one. its been years since ive watched his vids tho
for desktop too
Thanks.
You also have through visual studio dev essentials a month of subscription for free. I did two full courses so far, and a little bit of a dozen, wherever I needed knowledge about something specific. I did the .net core beginner course by Scott Allen and it was very good, I am finishing successfully a razor page project at uni thanks to him :) However I wasn't very pleased with Julie Lerman's course on EFCore. It was very focused on the differences between EF and EF Core, than on explaining how EF functions, even tough it was declared an introductory course on EF Core. I'll definitely continue using it over the summer, because it seems to have a lot of quality content on a myriad of topics.
https://old.reddit.com/r/csharp/comments/8l4n01/what_courses_do_you_recommend_taking_on/dzghw8o/?st=jxaneorw&amp;sh=3b0bce8b are my recommendations but they're mostly basic and intermediate.
Personally I find it better to see which method throw the error and where it has been retrown doesn't mather so mutch. But this is a personal opinion.
Sure, but that problem goes away with wrapped throws. The new exception capturing mechanism is clearly not made for that purpose. If you don’t need to wrap the exception, abuse exception filters instead to avoid catching it in the first place. That is, make a method that does what you need to do and then returns false, and catch when YourMethod.
First of before I say anything I completely understand that getting something dropped on you that you don’t know is just bad management. But I think WPF and Silverlight have a lot in common from what I remember. I believe Silverlight was heavily influenced by WPF. You could even straight deploy WPF projects in Silverlight with the WPF web embedding. Saying that, I never tried it the other way around and I’m pretty sure Silverlight is like a superset of WPF so WPF is just not going to have everything.
The language is pretty much the same. The framework, the ideas behind how the language is used, is very different. That said, whoever originally programmed it in Silverlight didn't really know what they were doing, either.
Mosh is the man. I’ve used his courses from a number of different sources and I’ve always felt he was like a great mentor passing on not only best practices but lots of little tips and tricks
Note that it isn’t currently AOT at all; it’s interpreted. It *will* eventually use Mono’s AOT though, yeah. No doubt the merge will be rough.
It looks to me like your data model is wrong. If I understand your code snippet correctly, every single table in the database has an Email column, except Scenario, and every single table has a foreign key connecting it to Scenario. And you are trying to find all the Scenario records where the Email (which comes from another table, but you don't know which) contains some search data. If that's the case, the Email column should be in the Scenario table. Then you could query it with a simple single-table query. The Scenario table should also include a column that indicates, for each record, which of your many other tables links to this record - then, once you've got the scenarios you want, you can join each one to the appropriate table to get any other data you need. **If that's not possible**, you could do a [left outer join](https://docs.microsoft.com/en-us/dotnet/csharp/linq/perform-left-outer-joins) to every other other table. As far as I know, that's not possible using the "query syntax" that you're using, you'll have to switch to "method syntax".
Unity is for games. Xamarin is currently mobile only and has been "able to target desktop any day now" for 3 years.
Nitpick about your blog. &amp;#x200B; It's very difficult to read the code. I have to page down about 3 times to see the scroll bar at the bottom. And for some reason the blog only fills the middle 3rd of my screen. So I have 1920 pixels, but your using 1/3 of that. Make that a bit wider, so I have to scroll less, and maybe break each function into its own code box so the scrollbar can be reached
Thank you for sharing!
their Cloud stuff is what I use it for. they aren't perfect but in some cases they are better since they work through examples
Definitely one of the best. He also put some courses on udemy. After this courses you have a completely new understanding of oo in general. Put me in the way to functional programming. His course are a must view in my team.
It's pretty easy to find a 3 month trial. https://visualstudio.microsoft.com/dev-essentials/
&gt; Are you an oldschool email list user with emphasis like that _words_ Yes -- although nowadays, under reddit's influence, I'm more likely to use \*asterisks\*. ;)
I had no problem getting a job outside of high school in 2005. My first dev job was actually at 16, so I had two years of experience when I graduated HS.
&gt; My first dev job was actually at 16 Super-cool. How did you get the job?
Family. Worked for my uncle. It was cool to get XP, but working for family blows.
ahah yet another anecdotal evidence to add to my memory :)
&gt;However I wasn't very pleased with Julie Lerman's course on EFCore. It was very focused on the differences between EF and EF Core, than on explaining how EF functions, even tough it was declared an introductory course on EF Core. Julie is the defacto expert on all things EF and always has been, but have never found her to be good at teaching/explaining the basics.
&gt; PhishMeWebApp hmmm.... 🤔🤔🤔
&gt; Worked for my uncle. I hoped you got paid -- but regardless, it led to your career getting started, so time well spent. Inspirational, thanks!
you can make a game with c# using monogame: &amp;#x200B; [http://www.monogame.net/](http://www.monogame.net/) &amp;#x200B; which leverages xamarin for the backend when doing a smartphone build
The Tips and Traps pair of videos is great, and I still go back and re-watch the Concurrent Collections video when wrapping my head around async stuff. I did not get anything out of the intermediate level vids, but that makes sense considering where their scoring system placed me.
COPY . . is fine as long as you have your .dockerignore set up correctly. In this example I am only sending c# files to the daemon. The benefits are clear, the container weights less and this allows faster deployments. Also this allows doing R2R deployments where the warm time is lower. Moreover running a native application is always faster than running it on top of net core suite.
Interesting question, it's quite difficult to answer I think. At this point on *my* career path, if I was to get a bachelors degree in CS, I wouldn't benefit at all from it. The 8 odd years actual working experience I have are way more valuable than any degree. But also, what I'm doing isn't anything special. I'm a not yet senior, full stack .NET developer, building *line of business applications* for Windows desktop environments*.* Nobody needs a degree for that. Pluralsight, self discipline and being curious about new technology can take you very far. And my income is quite decent (living in Switzerland). What a bachelors degree would do is enable me to get a masters degree and pursue a career in academia which at this point is impossible for me. In university, especially in CS, things are very theoretical. Lots of maths, statistics that aren't that useful for a simple developer. Those are also topics you can't learn overnight in an 8h Pluralsight course. If you pursue a career in AI or Big Data nowadays, these are things that can really help you. And you don't learn these on regular "programming job", those are things you can learn over multiple years in university. So, it's really hard for me to give you any advice here, so take this with a lot of salt. I never had the money or parents that helped me finance my studies. As soon as I moved out, I was on my own. But I always envied the people that had the chance to study for 5 years and get their masters degree quickly without having to worry about their finances. It's a beautiful thing, studying something you are really passionate about. It's also a very good kickstarter for a career. The 1-2 years I've spent to work my way up to get good income is mostly "skipped" by just having a degree. Right now I'm working on a bachelors degree, part time studying while working (70% work, 30% studies) because I love the subject. I don't expect that I'm getting more income off that. :P If your son has the choice between 1. Skip college entirely 2. Work for a couple of years and the go to college 3. Start college right after high school I would definitely recommend option 3. Even if your son doesn't pursue a career in IT, he's an engineer after that and besides the maths, statistics and all the other stuff he might not need, it will teach him problem solving skills, analytical thinking and *self discipline* (that one is *so* valuable and I still needto get better at that).
&gt; COPY . . is fine as long as you have your .dockerignore set up correctly. In this example I am only sending c# files to the daemon. Copy as the **first** operation is bad. First you copy the solution and project files, then you run package restore, then you copy the rest and compile. Otherwise you don't make use of the Docker caching, and it will always restore NuGet packages even if only a source file changed. Waste of resources. &gt; lso this allows doing R2R deployments where the warm time is lower. Startup time will actually increase, because now the assemblies that are embedded in the executable first need to be extracted. This will also increase the size of every started container (so the effect multiplies) for saving a few bytes on the image size.
From someone who has used PS for years, i can say that it's a hit or miss. Depending on how you feel about accents. a lot of the courses can be hard to get though because you don't really know what they are saying. Their content is always growing but some of the courses i couldn't stand the presenter for more than a few seconds, but that's just me.
Pretty similar for me, though in 2011. We're getting old fast, things in IT change so fast. OPs perception is pretty spot on. As a simple Desktop application developer I feel though jobs in machine learning, AI, big data are out of reach for me without a academical background, no?
Looking up compiler theory and advanced memory management is different than looking up "MSDN C# task" and reading the docs... or "MSDN C# stream". One is more theory based and the other is more language based. I would suggest googling terms, and locking the search down to MSDN and C# with your term.
&gt; My thoughts on this question are as unstructured as this post is Your post seems nicely-structured to me, thanks! :) &gt; If you pursue a career in AI or Big Data nowadays, these are things that can really help you. Those seem esoteric to me. I have no idea how big those fields are, in terms of employment or how well they pay. I can look into that. &gt; I never had the money or parents that helped me finance my studies. As soon as I moved out, I was on my own. I commend you for doing it on your own. Excellent. &gt; The income boost you get at the very start of your career, without any working experience is quite significant. The 1-2 years I've spent to work my way up to get good income is mostly "skipped" by just having a degree. Given that a degree takes at least 4 years and costs $$$$$, your strategy sounds superior. Thanks for your response.
You welcome, glad you liked it
This is an example of dockerfile, I have no other dependencies, so no need to do that. Also publish single file is not the same as self contained apps. So the executable does not get extracted. It is just a native binary. Here you got more reference: https://dotnetcoretutorials.com/2019/06/20/publishing-a-single-exe-file-in-net-core-3-0/
Pluralsight content is largely web focused, so you'll easily find things like Javascript, Angular, NodeJS, Ruby etc. There are other content but not as much as web based stuff
They reduced it to one last time I looked.
Ok first off ... WHY??!!?
Scott Allen's courses took me from zero to expert. I took his intro course and quickly jumped off and wrote ETL and advanced integrations and custom applications years ago which are still in production. More recently I have used his advanced courses to refresh my knowledge and use the more sophisticated language features to make larger software projects clean and fun to work with.
&gt; So the executable does not get extracted. It is just a native binary. From **your** link: &gt; A single tidy exe! When this is executed, **the dependencies are extracted** to a temporary directory and then everything is ran from there.
I'm really enjoying the C# path so far. I am finding the pacing good and learning a lot. Scott Allens course was a great into. If you are learn by doing like me, set up test projects locally and do the exercises, even if the presenter does the let me show you thing and copy pastes code in.
It's going to be hard to help you without your models and mappings. You don't need to join to a table to filter on it if you've set up the relationship in the EF models and mappings. You can also use `.Include` rather than join if you want the whole model rather than a projection (`Select`).
For work.
Have you looked at other DM software? Arkenforge, roll20, etc? Perhaps look at those features, see if you can replicate aspects of each piece of software. That way you aren't having to do the entire product work along with the development work.
It’s for work
I wouldn't use unity. I would build an api in c# (hosted on azure and using a sql database) with all of the content you want to use and then write an ios app in swift for the IPAD that consumes your api content.
Pluralsight is awesome, especially for the C#/.NET space.
Haven't got any iPad or tablet but that's a good idea
thank you, that's a good idea, I've already used roll20 in the past years.
Np. In general, cloning existing software is a great learning experience. My go-to project is dice rolling for whatever game I'm playing
I wouldn't say that. If you know the tech, you can probably get a job in ML.
Out of curiosity, you show a 3D model of a dice that rolls and pick the number on top?
Bastards
Not the previous poster, but I've concentrated more on utility than fancy graphics. So, for instance, I made a shadowrun dice roller that handles all 3 Edge use cases including exploding, and displayed success, fail, glitch or critical glitch based on the target number given
The only reason you use .net standard is for compatibility. Think of it as stripped down parts of the language that are compatible with everything. Then you have more specific parts available. .net framework for more legacy stuff. .net core for new stuff and mono for Linux stuff. Standard is useful for library code that you want to share with people using any of the more specific language implementations.
That's cool, if you won't mind too much I'll take that as a piece of advice. :)
&gt; Those seem esoteric to me. I have no idea how big those fields are, in terms of employment or how well they pay. I can look into that. Well lots of interesting things happening in the field and only the ones that came up in my mind. There are lots of fields where CS knowledge certainly is a requirement. There's more of course. Network architects, distributed computing, data science. I'm quite young and even I'm amazed and start feeling old when seeing how fast digitization changes. I wouldn't call them esoteric. The thing I like about universities is that you meet lots of like minded people. Other students, professors, depending on the uni, you get to have chances to network inside the industry (to what degree depends on the college / uni of course. When just starting out, you gotta be lucky with the place you work at, too. For me it was a small company and everybody was at least twice my age. Bad mentors, bad habits, you know the learning process wasn't that straight forward. &gt; I commend you for doing it on your own. Excellent. Well, I'm kind of proud that all I did was by myself. It came with some drawbacks as well though. Mental health issues (once could say burnout) while I tried to manage full time studies and working. It also made me stronger but quality of life overall suffered quite a lot :P And if you'd ask me if I would do anything different looking back at my decisions I'd say absolutely yes. Lots of things didn't work out as I hoped they would. :P
Not at all, go forth and code.
You might not like it... IMHO, C# fixes the most pressing issues that C++ has: * modules and interfaces vs clunky include files * a wealth of standardized libraries vs several competing choices (STL, boost, ...) * memory management with garbage collection vs smart pointers * LINQ, nullable types, object wrapping, extension methods and a gazillion other little feature that make C# enjoyable and which simply don't exist in C++ So, while they are both C-like languages, in reality the coding styles are quite different. It'll take a while getting used to it. Cheers!
C++ is a different world, if the job requires the experience then you do not qualify and you won't be able to learn on the job quick enough. I would suggest spending some time learning the language, maybe some classes and some work on an OSS project before applying for any jobs. If you have to work with other people that know C++ you will be found out in less than 5 mins.
mmmmhmmm.
I really enjoyed his "functional" C# classes.
I am working through Building Applications with React and Redux at the moment. Its great. Pluralsight is an industry level site.
C# can't say no to any feature anybody wants. Being such a large language isn't necessarily a good thing. I personally don't like extension methods and partial classes for example. &amp;#x200B; C++ can implement most of what you mention there; just not part of the base language. Really the standard binary interface and rich library's are what made Java/C# popular. If you've never done any C++ before - it would be a step curve.
Nice article. Right to the point. Very well done!
16x16 icons only buddy. Welcome to 1990.
you could build an MVC app that consumes the content as well, that's the advantage of using an api. Once you've build the back end, building one or more front ends is much less difficult.
 i was trying to build a .net core 3 electron app and couldnt get it working. The node js with core cli worked. maybe i should try VS 2019
Yeah, basically what the other person said. Focus on mechanics, proper code design/formatting. Get familiar and **comfortable** with your testing tools. Mocking Math.Random is a great exercise to in writing testable code.
Yes my previous job was mostly C# services, now I write a fair amount of C++. C++ can be used in very different ways. The way includes, header files, and source files work can be foreign to someone used to modern languages. You may need to learn about make, cmake, and compiler flags and how they work, whereas the build system in C# is so simple and integrated into VS very well. The IDE's for C++ are a lot less intelligent then VS is for C#. Starting my career with C#, I was really used to having an IDE that detected everything basically perfectly with great tool tips and error detection, and you don't really see that in other languages. In C++, you can have seg faults, where if you were not careful in how you used pointers your program will just crash and you won't really know where it started, and then you have to go back and scrub your code and try to figure out where you forgot to handle memory access in a more friendly manner. They are quite different languages really. I thought C++ was really hard to learn, there are so many "gotchas", but once things started to click I felt like other languages were just so much easier. C#, on the other hand, is just so easy and developer friendly. Everything is just neatly packaged in one program.
Good lord the guy is just starting out hahah.
Personally, I would use a windows application. This sounds like the sort of thing that most activity would occur as a response to user actions... Games (unity) are designed do constantly update regardless of user actions. &amp;#x200B; A DM Tool would likely benefit from a complex and robust UI... tables that can be sorted by column at the users discretion, large amounts of text that require optimized textboxes. &amp;#x200B; You could make a Die Roller so you could enter a roll string like 3d6+3-2d4 and it would calculate the highest, lowest, average or random value. &lt;Reverse Polish Notation, Shunting Yard algorithm&gt; You could make random loot generators, random encounters, weapons. &lt;Various Randomization Algortithms: Weighted Random, Bag Random \[put n objects in a bag, pull one randomly until the bag is empty\], Eventual Success Random \[Each failure increase change of next sucess\]&gt; &amp;#x200B; You could create NPC name generators &lt;Marcov Chains&gt; &amp;#x200B; You could create random maps &lt;Perlin/simplex noise/Minimum spaning trees/Delaunay triangulation&gt; &amp;#x200B; You could make look up tables to match challenges to skills... for example, if a DM wanted to make the High Dex characters shine they could look up "Dex" which would list all the skills that used Dex as the primary skill, then if you selected a specific skill it could generate a list of random example challenges that would use that skill... Like-&gt; Dex would show Acrobatics, and etc. then selecting Acrobatics could come up with a bunch of examples like... there is a log in a noxious river players need to cross. The path is blocked by an intricate web of ropes, accedently hitting one will cause the cave to collapse, etc... &amp;#x200B; You could make it track characters and allow the user to export character sheets as PDF, BBC, HTML etc. &amp;#x200B; You could implement a calander, possibly even both in and out of game calander for real life scheduling... you could hook it up to read email so players can send "I'll be missing next session" or "I'll be late" messages which it detects and puts that info so it's easy to keep track of who's available when. And the in-game calendar can help keep time realistic or track deadlines or effects they are under. &amp;#x200B; If you went with connecting it to email, you could make it so the DM could hit a button that would send an email to all players with a reminder of the date and time and situation.
I wouldn't start in Unity because it's very opinionated. A simple C# WPF application should be pretty easy to build.
Completely agree; I did multiple courses on PS via work, and there were all totally worth it.
Make something that isn't bloated/slow, with a well-designed UI. These are my biggest complaints with most DM software.
If i would choose to specifically work in embarcaderos C++ Builder, I would do that. In any other envoirements or IDEs, it would be very stressful if doing it professionally. C++ was the first language to learn. I went and bought Stephen Prata's book sometime in the end of 90s. At that time i had Borland c++ builder and I still remember the VCL. At that time .NET was introduced and you could feel the similarities between .NET &amp; VCL. &amp;#x200B; Things changed since then for my part. I love playing with Ruby &amp; Elixir in my spare time &amp; do C# to pay the taxes up here in the country near the northern screw.
It will be hard, you will be moving into a world where you have to manage memory yourself, which is a large paradigm shift. On top of that, C++ is a very big language, with lots of features, and sometimes odd syntax due to it's age. If you are young and/or have time to study up for 8 hours a day for the next few weeks, it is worth a shot, but it will be hard.
Guess you haven’t heard of Cofense PhishMe...🤔
Ideally one would have done kind of header that indicates the schema version of what comes next (however hindsight is a wonderful thing... And this is said with the voice of bitter experience)
Oh no I guess I havent heard of some niche anti-phishing start up, so 0.0001xer of me. oh Good God, spare me with a passive aggressive answer after an "its for work" you could of just said it was that in the first place. and mostly, I was fucking joking you snarky boy.
Good article. I will say though that for loops vs foreach has an extremely small difference in performance.
Exceptional article
Good article. One thing I like to do is profile the DB and check all the queries that are coming through, that way I can check that all my caching is actually working and that we're not re-running the same queries when it's not necessary.
Yup if you write any more then you are a worthless developer
"AngularBeginner" no wonder why you can't understand the usecase, you like bloated stuff anyways
I think all information everywhere about WPF/MVVM is pretty out of date. There seems to be an assumption that if you do that stuff then you started doing it 10 years ago and haven't stopped. Coming into a WPF product team has been really hard work, I ended up going back and reading a lot of old MSDN magazines.
&gt; The difference of a self contained app and publish single file is that the first one is a compressed binary that will be decompressed when ran. The second one is a binary that just contains our application. Yeah, but that’s completely wrong. A self-contained app is just a folder that includes the .NET Core runtime alongside your app. Single file goes further by [generating a self-extracting archive.](https://github.com/dotnet/designs/blob/master/accepted/single-file/design.md) Neither is a single binary.
&gt; Also publish single file is not the same as self contained apps. So the executable does not get extracted. It is just a native binary. This “native binary” feature you’re imagining doesn’t exist. Are you thinking of .NET Native? (Publish single file *does* extract.)
&gt;C# can't say no to any feature anybody wants. Being such a large language isn't necessarily a good thing. I personally don't like extension methods and partial classes for example. Isn't C++ the larger language in this comparison? C# adds new stuff faster but C++ has a couple decades on C#.
I can see from some of your other posts that you are someone who seems to be pretty set in their view points. Their is a huge advantage in moving it into a wrapper and claim that you are just pushing the buck is flat out wrong. By separating the code out you now have a reusable class that can be mocked out for testing purposes and even replaced all together very easily. And if the code is really that “bad” you just reimplement the interface that the repository pattern implemented with something you deem “better”. Also I like how you are claiming that I have added caveats with out seeing the code. Not saying that I’m not just like your assumptions. The repository pattern is not all that complicated but I guess you know better than me.
Also, from the logic of one of your other posts working code == good code as thing just fall into place. So I would guess by that logic my code is good code, it works ¯\_(ツ)_/¯
You dropped this \ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¯\\\_(ツ)_/¯`&amp;#32;or&amp;#32;`¯\\\_(ツ)\_/¯` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
Out of curiosity why don't you like extension methods?
Not hindsight, I store a format version numbers as the first element in the file. So I can easily use that to change processing at run time. I also already use "dead" properties with the ShouldSerializeXXX to prevent writing. With this a can read in old rename or changed value. However I hate doing this since it means my classes are exposing obsolete structures which BTW can't be decorated with obsolete because properties marked as obsolete don't get serialized in on read. I''m debating have a set of parallel classes to handle reading the old format but if I have to go with this, I might was well bite the bullet and implement the custom serialization interface.
Managing memory is a big big deal. Expect to take 25% more time to produce reliable code due to tracking down memory leaks that hide in int strangest places. Add another 10% for debugging seemingly random crashes that result from using already free’d memory. And god help you if you inherit a code base with nested templates. Overall, I’d say you have to be 2 levels more conscientious and disciplined using C++ compared to C#.
I've started making one for myself as an example application for Avalonia (since I'm a maintainer of Avalonia). I don't think I've pushed it publicly yet.
Yeah that's exactly the feeling I get. It makes me wonder if MS even has a strategy going forwards? They need people doing XAML for desktop apps, unless they think everything's going to be Electron/Blazor within a few years. I wish they'd pick a direction and go there instead of dividing their attention between *everything*.
I know. Both of these features seem great to me. With extension methods I can either “add methods to classes” that I cannot otherwise modify or I can design classes with intentional simplicity and then optionally add in methods that reduce complexity which may be somewhat specific to a given context. They are another tool that gives me design options. I know they’re syntactic sugar and aren’t “stateful”, but they’ve helped me clean up a lot of code, especially legacy code. Partial classes aren’t the most exciting thing in the world and not something I have a lot of use for... but one of their typical use cases is adding custom code to EF generated code, which has been super helpful on occasion for me where extension methods alone wouldn’t cut it.
Read just a tad further... Crossgen is the feature he’s talking about here. &gt; Assembly trimmer, ahead-of-time compilation (via crossgen) and single file bundling are all new features in .NET Core 3.0 that can be used together or separately. Expect to hear more about these three features in future previews.
I only don't like extension methods sometimes, that's usually when they are messily added or people add them and I don't know haha.
This guy’s head will explode when he learns about zsh... 😂
Yes but registering an instantiatable class as a singleton is not a true singleton.
https://docs.microsoft.com/en-us/dotnet/framework/interop/ https://docs.microsoft.com/en-us/dotnet/framework/interop/marshaling-classes-structures-and-unions https://pinvoke.net/
If Mosh Hamedani is on there, then yes. He is good. That being said, I dropped Pluralsight in favor of Safari books (videos, tech books, even cooking books), but that's because I do better with written text than video instruction. Everybody's different.
Just interviewed for a job there actually! Not only is their content amazing, but any C# engineer in the Salt Lake or Utah vallies should consider applying. I was very impressed by their engineering culture there.
We haven't done it for svg, but to create a html edited. You can embedded the webbrowser control on the winform. You can do a lot just using file urls in the webbrowser control. And I recommend you try only that. Load web browser with a relative path file url. We eventual had to embed a http server in a separate thread to serve up content to the embedded web browser control for some of the stuff we were doing.
Try to look at this. https://github.com/MarkWithall/worlds-simplest-csharp-wpf-mvvm-example
Personally, if I were you, I would use WPF to create a desktop app to do the basics of what you want - that'll be the easiest way to get a windows GUI an to learn the broad ideas in doing desktop development in C#. Given that, I would in the future expand the application to use a database for storage, and perhaps from there you could use it to explore other .NET libraries like UWP, Xamarin, Entity Framework, so on and so forth. Beat of luck, I hope it turns out well for you!
There isn't really any robust, reliable way to load SVG files in .NET that I know of. I've worked on a similar problem for work to load SVG files during run time and evaluated quite a number of libraries. I've found that for simple SVG images, the SVG# Sharp Vectors Nuget Library is most reliable, but I found numerous ways to break SVG functionality with more complex files. If you're simply looking to have SVG images in your application that can be defined before run-time, Inkscape can actually load SVG files and then output Microsoft XAML. Adobe illustrator also has an extension that I find to be more reliable. XAML, of course, is for Windows WPF forms which are the more advanced version of Win Forms, so I am not 100% certain whether the XAML loader class can generate Win Form controls as I believe that WPF UI Elements are an entirely different namespace from Win Forms. I recall that that the SVG Sharp Vectors extension from the NuGet library works with Windows Forms though and this will probably be your best bet if you want to include SVGs in your application.
I really like c# courses there. Even advanced stuff has much good content.
Ahh, well if you are learning through tutorials, the best thing I can recommend is start off with a simple project before going head first into a half-life game. Start small with it. Make it so you can just walk around on a flat plane. Following the FPS Demo tutorial through Unity will get you that far at least.
From what little I know about DataGridViews, to me it seems your best option is to create a custom column type. https://docs.microsoft.com/en-us/dotnet/framework/winforms/controls/customize-cells-and-columns-in-the-datagrid-by-extending-behavior
I miss C++, but C# seems to be a step up from my experience.
I think any Microsoft related subject on Pluralsight is good. You can get a free trial for a month with a Microsoft account.
Always initialize your variables. C# initializes everything to a default value, but this doesn't happen in C++. It's tricky because the debugger will initialize variables in debug builds, but your variables will not be initialized in release mode. This can cause weird bugs, so be sure to compile both debug/release builds with some frequency. If you don't initialize a variable it will be whatever garbage exists in memory at the time that you access it. Whenever you write 'new' anything, a good habit to get into is to go ahead and write the corresponding delete. You're managing the allocations, now. You don't have to new everything. If you allocate something on the stack, you can say "ClassType variableName = ClassType()" to initialize it in-place on the stack. Learn about copy constructors, and move semantics. Headers and implementation files are separate, except when it comes to templates because you have to inline the code definition into the header. Keep in mind that it literally macros in the type at compile time. You can't set type constraints like in C#. As long as methods used exist on the type, you can pass any type into a template. &amp;#x200B; Strings in C++ are way less ergonomic. Find a solid string algorithms library. Keep in mind that allocating strings is no longer "Free" like is in in C# with generation 0 garbage collection, and it will take time. Be weary of dealing with strings in critical paths of the application without buffering them into a pre-allocated piece of memory. &amp;#x200B; Include as much as you can in the .cpp instead of the .h files to keep your compile times down. Learn about forward declarations. You don't need to include the full header of a file if you are only declaring a pointer variable to a type. &amp;#x200B; Learn about include directories, lib directories, and .dll's, and get your hands into the build process. Linking libraries into your projects won't be as easy as nuget. &amp;#x200B; Be weary of circular includes. Learn about circular includes, ifdef guards, and #pragma once (most compilers support it). &amp;#x200B; Compile early and often, so you'll know what changes you have made have caused an issue. You'll find that C++ compilers are much less helpful when it comes to compilation issues. A simple mistake somewhere can manifest as hundreds of cryptic errors and head-scratching wtf's.
Just learn Rust.
&gt; bite the bullet and implement the custom serialization That's almost inevitably where you end up trying to manage versioned serialized data. When using .Net's BCL serialization classes, you can drop the 'almost' (some 3rd party JSON and binary serializers provide some help, but I don't know any XML serializers that do off hand).
Do you have a screenshot of your build settings menu? Like the popup that comes up similar to the screen shot in the tutorial.
It's good. Ad you get into it, you'll find a lot are just them going through documentation examples. It's still valuable imo to make sense of the docs when you're unsure of something. I think its worth paying for a year but probably not more than that
Ive been learning API stuff for work and have contemplated a collection of DND apis to use for building up other projects. Then you could start small and work up. Build name and npc generators and work up to full character generation. I haven't really gone anywhere with it, but that was my idea
But it is. The DI framework takes care of the instantiation, ensuring there is exactly one instance. If you have a look at the code of the DI framework you will see a "proper" implementation of the Singleton pattern :)
/r/hmmm
Two options: 1. Create a custom implementation. This requires creating a custom class for the Cell, the Editing Control itself, as well as the Column. (DataGridViewCell, IDataGridViewEditingControl, and DataGridViewColumn respectively) That is fairly involved, the link that /u/corybarlage provided should give a starting point for that. You mention "some of the properties for the form use this same setup" though. That is because the Properties are not a Data Grid, but rather a PropertyGrid Control. You can use that (if it's not in the toolbox, you can add it with right-click-&gt;Add Items.) and it may actually be easier to utilize. The general idea would be the creation of an appropriate Settings class. You create an instance of this, and you assign it to the PropertyGrid's "SelectedObject" property. The PropertyGrid basically allows editing of public properties of the provided instance. The settings class itself would then encapsulate all the options you want to be available via public properties: public class MacroSettings { public String MacroFile {get;set;} = ""; } Adding custom editing is done by first creating a UITypeEditor: public class FileBrowseEditor : UITypeEditor { public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context) { return UITypeEditorEditStyle.Modal; } private IWindowsFormsEditorService mserv; public override object EditValue(ITypeDescriptorContext context,IServiceProvider provider,object value) { OpenFileDialog ofd = new OpenFileDialog() { Title = "Choose File", Filter = "All Files (*.*)|*.*" }; if (value != null) ofd.FileName = (String)value; if(ofd.ShowDialog()==DialogResult.OK) { value = ofd.FileName; } return value; } } Then you "link" the editor and property by adding an attribute to the property: public class MacroSettings { [Editor(typeof(FileBrowseEditor),typeof(UITypeEditor))] public String MacroFile {get;set;} = ""; } When you click the "MacroFile" property in the PropertyGrid, an ellipsis appears and when you click it the FileDialog appears to select a file, then that value is filled with the result if a file is selected. If you want varying numbers of, say, Macros, that's a bit more involved, but could be done with a Collection Editor. Though at that point you are getting into some fairly unfriendly UX.
I don't get any popup. I click on "build", and it just doesn't do anything.
Even so you're still not coupling to a singleton. Yes it may be a singleton but at the end of the day it is injected and not being called directly. Does,'t explain why i should implement a singleton verbatim.
Did you save the project before trying to build?
or Webapp
And to go back to the original point which is "do patterns effect implementation". You just argued that singletons, a design pattern, are integral to development. I would say that if they are that important then there is no way they do not affect implementation.
That's not what he is asking. He is asking for your "player settings" screenshot.
Try adding a scene file. It won't hurt, and I don't see how the engine is supposed to know "use the current scene in the executable" when the current scene doesn't even exist yet (on the disk.)
I'd look at creating it as a web API initially, then skin it with anything you want.
Selenium, HTMLAgilityPack, RestSharp (If API's are available)
Moving from C# to C++ is like moving from C# 7 to C# 1 with no garbage collector, a very limited standard library, no linq, no nuget packages and crazy long compilation times. Quite frequently 100s of lines of C++ code are needed to do the same thing as one line of C# can do.
Hey friend! This is already a project I have been working on as I have the time! https://openrpg.io or https://github.com/incomingstick/OpenRPG
The big Unity icon called Main in your Assets folder is your scene file. Did you click on Add Open Scenes in Build Settings?
That's really cool :)
Hey, I've been working on this myself, though only as a DM guidebook / world building / player reference app. A few things I'd like to point out that helped me: * Use inheritance excessively. My application is a web app so maybe not as detailed as you're planning, but I wish I had started with a UML (which is something I never thought I'd say). For instance, an NPC and a PC share so many common traits that it was stupid of me to use two separate models and I quickly fixed that the first go round. * Remember that people would like to not only chart their characters journey, but also their players journey. Having a spot to put player reminders / notes / item uses is as important as making spots for characters jots / journals / native idea on how to use an item. Visually, making this intuitive is something I'm still wrestling with (as I'm sure you know the GM notes / Notes on roll20 are... less than awesome and I want to avoid that). * People like making up shit. And it shouldn't be hard to do. Again, harkening back to Roll20 it's a damn shame that we can't just wrote some intuitive JSON and add an item to a character sheet. 50% (probably closer to 80%) of what you experience in D&amp;D isn't going to come from a book, and it sucks when I have a cool idea for an item that.... I can't put in roll20 easily. It's why I started this project for myself. * Modeling is the most important thing (for my personal app). Everything in D&amp;D is interconnected somehow. Items respond to players, areas, ethos. Places have towns, people, items, stores, players, quests, events. Encounters are modular based on player level and amount of players. Everything needs to be extensible, and connected. Learning how to model this connections (And how to retrieve them) is an absolute key point. And, if you figure out how to focus on it, please dear god let me know because I'm languishing in hell here. I feel like learning to make a D&amp;D application is the capstone to a developers education. There are so many nuanced things that can all be broken down into simple, simple small tasks that it should be able to teach you everything you need to know about development. But what do I know, I'm just a plain old learning to dev dev. And, if you ever want some collab work, I'm more than happy to help.
This
Except for the iPad in swift part it's not a bad suggestion. Instead of placing yourself in a walled garden you could just use a generally consumable API and then work on the front end afterwards. Maybe with more consumer friendly front end frameworks.
I can't commit to a real collaboration right now. I'm still working on a uni project about an online tabletop videogame (using java) and other stuff :/ but when I'll get an idea of what to make about this project, I'll sure as hell create another thread for updates. I'll try and dm you too if you want. :)
Really depends how you measure it I guess. C++ is complex, C# has a lot of actual language features. I’ve never listed them so it’s just my impression.
Mainly because you are able to call a method which isn’t part of that objects type; as if it is part of the type. In some cases it’s used well; in others not so.
Hey, jot down the username and save it for when you're going to tackle the problem! I'm always available to message and, maybe by that point, I'll have a pretty large codebase for you to look over!
I can assure you many people with a degree and several years of experience don't know shit about compilers and memory management/memory layout either so you're not that far behind.
I did this by including `XmlNode[]` in each serializable class; all elements unknown to the current schema are put into that array after deserialization. Then we wrote manual migration routines. If the structure is largely the same, Automapper does a lot of the work with 1:1 mappings, and the rest we fix with manual code (we don't do much renaming, just restructuring the data). With a lot of renaming, it's going to be tough and error-prone to implement the mapping manually. Maybe it's possible to customize Automapper by writing some code that takes a dictionary from `OldClass.OldField` to `NewClass.NewField`. Then you only have to maintain the dictionary and Automapper fixes the rest (if datatypes haven't changed). This seems like an extensive customization so you may just as well do it yourself with reflection. Have a dictionary from `OldClass.OldField` to tuple `(NewClass.NewField, Converter)` where `Converter` is a delegate (null converter meaning identity, i.e., no type change).
Unless the project has a dedicated build-manager person, you're in for a world of pain. Also, VS is the best IDE for C++, and even *its* capabilities are below what VS can do with C#. Everything else is even worse.
Thanks!
Well, the benchmark below will show that `for` is twice as fast as `foreach` (134ns vs 256ns) because in `foreach`, each iteration has to call `MoveNext()` and `.Current`. I sort of agree anyway because loops are extremely fast and in most cases, their performance is usually going to be negligible compared to the loop contents. ``` private List&lt;int&gt; _numbers; public ForVsForeach() { _numbers = Enumerable.Range(0, 100).ToList(); } [Benchmark] public int Foreach() { int count = 0; foreach (var num in _numbers) { count += num; } return count; } [Benchmark] public int For() { int count = 0; for (int i = 0; i &lt; _numbers.Count; i++) { count += _numbers[i]; } return count; } ```
Interested ! Can we discuss ?
Have you build for the right platform? If you Cann add screens. :D
Yep. After further reading I realised I messed up a tad. My bad there.
Cast the type.
Try a coverter: http://converter.telerik.com/ { (Excel.Worksheet)objWorkbook.Worksheets.Item("Sheet1")(); }
Hmm, yeah. Discoverability, knowing that extension methods exist and where to find them can be a problem. One thing I will say is that I enjoy working with C#, but I’m glad I’ve learnt it over years as it’s grown as it has become a bit of a “kitchen sink” language. Although it is well designed there are a lot of language features.
The Worksheets collection can contain both worksheets and full page charts, so the safe way is to cast using `as` and then access the sheet: if(objWorkbook.Worksheets.Item("Sheet1") as Excel.Worksheet sheet) { // do stuff with 'sheet' }
Swap HTMLAgilityPack with AngleSharp.
That's what we ended up doing - every time we made a breaking change to the schema we copied the set of classes (the 'old' version) together with a serialiser class that implemented Serialise (which called XmlSerializer), Deserialise, CanConvertFrom (i.e. indicates what previous version the controller could convert to this version) and ConvertFrom. Then we created a new controller for the current version and implemented a conversion from the old version. Finally, we had a method that could take an input stream, extract the version number and find the serialiser required to deserialise it and then chain together one or more serialisers to convert it to the current version. I suggested the extra property because you asked for '**easy**'!
Its not working sir...
That's my problem, how do I cast a excel worksheet?
In the beginning the "best practices" recommended not to make extension methods and when they were made be careful to avoid clutter. Then .NET Core came and everyone decided to extension everything.
Its not working sir, I need to cast the object into a excel worksheet. I'm still searching for the answer.
Sorry - syntax error. It should be a pattern matching declaration (https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching#the-is-type-pattern-expression). See my edit above.
&gt; The answer is No! Otherwise you couldn't do `x = z;`
oh yea, sure, that will help him at the c++ job offer. &amp;#x200B; "oh yeah - me know c++, me do rust all day .... why did this crash, why no rust compiler errors at time of writing"
Kudos for updating your post!
Good point
Of course you're coupled to a singleton. You are expecting the same contract: A thing that exists exactly one time. That's a singleton. It's the only part of being a singleton that makes it a singleton :)
A pattern is a shape. A rectangle is a pattern. You can implement a rectangle with two properties L and W. If your code to set the W is a thousand lines long, this is not the fault of the pattern. The pattern doesn't care about its implementation, only that it is the correct shape.
1) Apps. 2) Yes. 3a) Yes. 3b) Better in what way?
I like selenium but if you have to browse multiple pages the app can end up pretty slow
I like selenium but if you have to browse multiple pages the app can end up pretty slow
C#: honey i need you to take out the trash C++: lol in ur dreams
[link](https://alekseygulynin.ru/rabota-s-excel-v-c/) this site on Russian, but i think it can help you
You should ask this in /r/Unity3D
What an application a difficult application? But yeah, you can make virtually any App with Xamarin. Of course, if you want to make games, it would be better to look at other options (game engines such as Godot Engine or Unity).
All cources by Kevin Dockxs are top of the line imo. Very detailed, easy to follow and very useable. He mostly has courses in ASP net core though.
Wrap the requests in a service, re-use the service instance, make it cache (per http request).
If you're getting an error, you need to actually post what it is. Saying "it's not working" is unhelpful. To cast to a type in C#, you just put the type in brackets. var mySheet = (Excel.Worksheet)objWorkbook.Worksheets.Item("Sheet1");
The main reason you should prefer for over for each when is when you are working with collection interfaces. For each over an IList and you will allocate, for loop over it and you will not. That is because the enumerator struct is boxed when enumerating an IList.
That answers "how do the requests know about each other", I suppose. I don't suppose you have some sample code?
we build our web scraper with WPF + JS (cefSharp + js doing item capture and e.t.) , you can download trial version of ~~Mozenda~~ and look in their js code
I've used SkiaSharp for SVG rendering in various apps, they do seem to have Win Forms views and so on.
It’s all about the end goal. If you want an app to use on both platforms Xamarin will do. If you’re only looking to build an app on an android platform Only id use java.
&gt;I'm building my first PowerShell module, MilestonePSTools. Our company has a free .NET based SDK and our software is very extensible, but automating maintenance/configuration tasks via C# is cumbersome and out of reach for even most IT folks. There is a [Discord.Net](https://github.com/discord-net/Discord.Net)if you want some inspiration
I always "try" to hold myself to these standards [https://github.com/thangchung/clean-code-dotnet](https://github.com/thangchung/clean-code-dotnet) &amp;#x200B; They feel clean and effortless
Ditto for S. Wildermuth. Did the Best Practices in [ASP.NET](https://ASP.NET) one
For the record, this is what [the spec](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#anonymous-object-creation-expressions) says: &gt; Within the same program, two anonymous object initializers that specify a sequence of properties of the same names and compile-time types in the same order will produce instances of the same anonymous type.
Like everyone already replied to you, you can create anything with Xamarin. Now if you are focusing on Android only, then you should get comfortable with Java 6 - 8 (the old way), Kotlin (Android's Swift) and C++ (some APIs are NDK only).
I don't have a link handy but NopCommerce does this a lot in their service classes.
 Hey! I have been using the following IOC Container framework for my projects. [https://marcusts.com/2018/12/26/smart-di-container/](https://marcusts.com/2018/12/26/smart-di-container/) It's extremely powerful, flexible, completely free, stable and easy to use. You can create DI containers wherever you need them without worrying about centralization. This is a non-static container, so can be stored nested as well as privately. There are a lot of handy extensions to make your life easier. You can even register and resolve simultaneously. PS. I am not affiliated with the company that wrote it. I am just a user.
Dude, your posts are quite awesome and much appreciated!
Have a singleton service that handles both requests and caching. It exposes a method ``` GetData()```. In your service class, you use a semaphore or a mutex do guarantee only one request is called. ``` private SemaphoreSlim sem = new SemaphoreSlim(1,1); public async Data GetData() { await sem.WaitOne(); if(dataisincache) return cachedData; else { var data =await SendRequest(); cache.Add(data); return data; } }
Thanks, keep following :)
Some of these comments are quite dramatic. I switched jobs to C++ after doing C#/Java throughout college and C# for my first job. If the company is any good, they'll give you time to catch up. Part of being a good software engineer is having the capability of learning different technologies. You'll be fine and you'll learn as you go. Now... Whether you *want* to do C++ is an entirely different topic.
Some of these comments are quite dramatic. I switched jobs to C++ after doing C#/Java throughout college and C# for my first job. If the company is any good, they'll give you time to catch up. Part of being a good software engineer is having the capability of learning different technologies. You'll be fine and you'll learn as you go. Now... Whether you *want* to do C++ is an entirely different topic.
Well, yeah - otherwise this could lead to a terrible class explosion all done by the compiler. This is also why you could do something like this: private static object ReturnAnon() { return new { Name = "John", Age = 25 }; } private static T Cast&lt;T&gt;(object o, T anon) { return (T)o; } var obj = ReturnAnon(); var typedObj = Cast(obj, new { Name = "", Age = 0}); Not that you should ever do such an atrocity. Just fun fact.
Not sure why you think it's more difficult to build a full back end than it is to build a back end as an api. As for adding it to asure and a sql database, also nothing so complicated a beginner cant' do it. Then adding front end system (like a mobile app in swift) may be more challenging but to be honest it's going to be less than learning unity. These are distinct and achievable milestones with plenty of learning involved. Then you can build on that learning to do different kinds of front ends. This is how development works. We build one reusable piece and then stack other pieces on top of it. But if that's too intimidating, then that's ok too.
Thank you. I have heard and experienced this at first hand myself. It feels good knowing it I just also don't want to be one of those people either lol.
Thank you for sharing, this is an excellent tutorial to help migrate one piece at a time and makes it look very approachable.
Hey man. I know that writing this response in this sub is probably gonna get a fair bit of hate because MuH CpP. You’re gonna wanna go with a popular engine because they have the best accessibility options. So right now there are two, unreal engine and unity engine. They’re written in a language called c# but that is fine because it’s a lot easier to learn as a beginner. These engines are solid enough to produce triple A titles and easy enough to use such that a mortal person could learn them. However. If this is your first coding project I would like to give mentions to a special language called JavaScript. It’s the most popular language used by every website, you can write whole sites, apps and native programs in it. It’s truly the most universal language and if you write a game in its popular libraries like pixi.js or phaser you can later walk away from the project with the skill set to try a new avenue of development. Lastly the reason I’m not recommending c++ is because looking at your post history it looks like you’re new to this whole programming thing. C++ is a fantastic language but it is god awfully difficult to learn even for an experienced dev such as myself. It’s not even the best language for modern game design unless you wanna help out on the wow classic team rewriting 20 year old code. There will probably come a day where you can appreciate c++ but I don’t think that day should also be your first day.
The IDE normally doesn't stop a program from working, how are you using electron with .Net Core?
Out of interest - why is Unity unavailable to you? Is it not possible to use it if you are blind - does everything have to be entirely in code. I would say yes C# would be a decent language to develop in and I have heard good things about Monogame.
Unreal is written in C++, not C#. But this doesn’t really answer the OP’s question at all, about 3ad positioning sounds etc.
I've found [Instant CSharp](https://www.tangiblesoftwaresolutions.com/product_details/vb-to-csharp-converter.html) to be useful when I can't/don't want to convert by hand. Trial limits the number of lines you can do at once but is good for snippets still.
The best videos on powershell are on YouTube, starting with the the sessions with Jeffrey snover https://channel9.msdn.com/Series/advpowershell3/01 Also look for don Jones
I cannot use the Unity editor. it's not available to us. Our screen reader programs cannot read this.
Very honest, transparent and down-to-earth reply :)
Are you oblivious to the environment? You're posting in r/csharp, so no clue where *MuH CpP* is coming from. "Experienced dev such as myself" but you don't even know unreal is C++ and unity is C#.
I think you've forgotten what it's like just starting out as a programmer, and I can respect that because 90% of people have similar issues 'looking back'. You just told the guy to learn and integrate 4 different outside services for his first 'big project'. That's outrageous to ask of a self-taught programmer who just wrote some basic c# apps before.
I think that going from "my first c# app" style projects to integrating a pair of remote back-end services is going to be hard enough, but you forget that he hasn't given us any indication that he knows how a database even works much less how to write basic sql or set up an NSG properly. Without guidance, and being a new programmer, sounds like a recipe for an abandoned project.
Even better, have a service that handles the requests and another service that wraps the request service using a decorator pattern that handles the caching - this keeps your separation of concerns nice and clean.
Just some friendly advice to help him prepare for the future job market instead of the past one.
Yeah I would do something like this but I think OP is not ready for this kind of OOP masturbation
"OOP masturbation" - LOL
Between your 2 choices, I'd go with Unity. &amp;#x200B; On a side note, you could check out some videos on Divinity: Original Sin 2's GM interface. If I was about to get into GM'ing online, that would be my platform of choice at the moment. Granted, it's got the game engine going for it, but you can get a feeling on the UI, see how they played everything out and what features they supported, what else they might be missing that you can do for yourself, etc. Might give you some ideas and get you started. The same goes for other GM software, as others suggested.
Personally, I don't think, that you should use existing games engines like Unity or Unreal. They are very visually oriented. Lot of basic objects needed to setup an environment are based on a visual representation and bring quite an unnecessary overhead. I searched for some other engines and I found two engines: [Engine from cool blind tech](https://coolblindtech.com/developers-create-engine-allowing-blind-people-to-develop-own-audio-games-regardless-of-coding-experience/) and Blind Adventure - A Game Engine for Blind Game Designers. I don't have link for the latter and seems not to support the 3D. If you do want to start your own 3D audio game development, C# is good choice. It is a mature language and there are lot of resources for studying it. It has also a big collection of different libraries, which could be used for the audio games framework development. I am pretty sure, if you start the initiative for an
I echo /u/manticor and /u/readmond. I grew up learning C++ and switched to C# ten years ago. I love C++ but I suffer every time I go back to it. Technically, it’s not C# I am hooked on. It’s .NET. Its the base class library. It’s the NuGet ecosystem. It’s the common language runtime. Without these things, C# wouldn’t be half of what it is. Imagine using C# but not being able to use NuGet or most of the .NET base class library. Imagine not getting free garbage collection and memory management and other runtime only features. This is what it is like to work in C++. C++ does have some standard libraries but they give only a fraction of what you don’t even know you rely on from .NET. Depending on the device you are targeting and the tool chain you get to use, you may not even get to use all of the standard library (or any of it for that matter). You may not be able to use features from the latest standards. As others have said, C++ does not have generics. C++ has templates and they are not the same thing. TL;DR - I don’t think it is a simple transition from C# to C++. Everything you know about .NET development doesn’t translate well to C++ right down to the application design level. You will find yourself trying to bend C++ to feel like C# and you will have a bad go at it. You won’t be “doing it right” for much longer than you think it will take even if you have an educated guess. I still love C++ and I think you should learn it. Read the C++ FAQ (easy to google). It is a great place to learn most of the pitfalls in C++ and there are some serious WTF things in C++, especially coming from a managed world. If you take this C++ job, expect the translation to be very difficult. It can be done. You might want to put in as much of your personal time, in tandem. In my experience, learning C# is significantly easier than learning C++. If you can remember how long it took you to lean C#, maybe multiply that by 5 to get an idea of what it will be like with C++. Best of luck!
The other solution i've thought of is The server raising an event when a client is created, passing said client as an Event Argument and subcribing an event handler from there, but i think that it's pretty much the same. I'm not sure wheter it's a good or a bad practice.
OOP is terrible at being concise and your solution, while certainly good separation of concerns, has certainly crossed into the realm of "I'm not doing it because I don't want to have to go through 5 different files to undestand what the code is doing", which is exactly the solution you're describing. Also, all those patterns that you threw are nice but I'm not sure OP would have any familiarity with them or get anything from describing the solution in those terms.
It really depends on his geographical location in the country he is working in. Some areas you'll see more .Net, other areas more Java, other areas more Rust -but OP is specifically asking about a transition to C++. Maybe working brownfield development suits him/her. Most work is arguably brownfield anyway.
When you are talking about training on large data sets, having a language that has "speed" on it's side is a huge reason to use it. You can have things come down from python taking several days to train to a low language like C# take only a few hours. I have seen this a couple of times where the language speed it the deciding factor.
Check this: [https://www.talkingdotnet.com/3-ways-to-use-httpclientfactory-in-asp-net-core-2-1/](https://www.talkingdotnet.com/3-ways-to-use-httpclientfactory-in-asp-net-core-2-1/) And this: [https://hackernoon.com/asp-net-core-how-to-use-dependency-injection-in-entity-framework-core-4388fc5c148b?gi=14ce439664bd](https://hackernoon.com/asp-net-core-how-to-use-dependency-injection-in-entity-framework-core-4388fc5c148b?gi=14ce439664bd) And don't forget this discussion: [https://www.reddit.com/r/csharp/comments/7fvp1w/youre\_using\_httpclient\_wrong\_and\_it\_is/](https://www.reddit.com/r/csharp/comments/7fvp1w/youre_using_httpclient_wrong_and_it_is/)
Honestly big mistake on my part. I wrote this first thing out of bed and it shows
Almost three years dev know, I wanted to share how I got where I am today. For context purpose, I am a 24 years old French lead C# dev in a service company developing applications. &amp;#x200B; \- Path towards first job (and only current job) : I'll go quickly on the university stuff I did before searching for a job. I did three years of computer science. (2 years : university of technology diploma called DUT in France, and the third year for a bachelor's degree which was much more about theory than the DUT). After those three years, I had to choose between going further by doing an engineer's degree (2 to 3 years more), or finding a job. I really was not sure at what I was supposed to do... In France diplomas are quite important to get a comfy salary and to get accepted where you want. I was accepted in an engineering school, but I dropped out the very first day. I really really wanted to start working, and the more I thought about spending 3 more years in the university the more I wanted to go away and work. So I looked for a job, I went to multiple interviews. Finally someone contacted me on LinkedIn, the offer was interesting. I did an interview and it went really well. People were really nice and it looked like it was a great starting point ! I am still working there as of today. &amp;#x200B; \- How long before you got your first job ? Two months of search, not a lot of letters and interviews to be honest. &amp;#x200B; \- How long before you felt like you deserved a job ? As I said I really wanted to work, but once you're there you still feel like a student for a while. You have to learn all the company tools, the way people work there, etc... Once you have learned all that you are starting to feel more and more at your place and that you are really deserving your payroll and your job. I think it took me about 2 to 3 months to be really confident about deserving my job. &amp;#x200B; \- Self taught or Uni? Pros/Cons Both. University is great to learn stuff and it really helps you getting started, you learn a ton of stuff, you meet people doing the same thing than you it's cool. But for me learning on your own is really necessary for everyone working in computer science. It's really where you are going to do what you like the most. I always loved doing side project, and I learned a lot by doing them. Self learning is really important as you will be doing it almost everyday at work. And learning stuff is really funny anyway, so have fun and learn people :) &amp;#x200B; \- How bad were you at your first job? Was it cringey? Did your employer give you a rough time? I don't like judging myself or others, I prefer thinking that I can always do better and if I fail something I will learn something in the process. When I look back at things I did I am usually happy because it shows me the way I got better and better. Always stay positive about your work and remember that failing is learning. I still have a lot of things to fail ;) I was accepted really quickly and quickly moved on to a lead dev position, which is great and scary at the same time. I had to manage other devs and make important decisions about what library to use, what code to implement, etc... It was overwhelming. I did not have any experience in the big world of work, so having that much trust so quickly was a bit intriguing. It was rough, I had a lot to learn and my employer wanted me to do more and more stuff until I burned-out two months. The pressure was too much for me at the time. Now I'm back and fine. Health tip for yourself : learn to separate work and personal life really quickly. &amp;#x200B; \- Ever worked remote? How good were you before taking it remote? I had a few occasions of working some days at home (one or two days every month). It's great. I can really get more focused on complex tasks. I know I will not get interrupted by another person. I would really like to work remotely one or two days a week. It's not fully remote work though. \-- Sorry if there is any bad English writing, it's not my native language.
Which is the part that scares you?
So I've decided to go the parallel class structure approach. The problem with using IXmlSerializable is class aggregation. I only store version information at the root of the xml tree. There's not clean way of getting that version information down into other classes that are aggregated under the root in order for those classes to change their serialization.
How would you expect do be able to do a project like this without a database? Do you plan to just make text strings all over the app?
I'm not scared of any of it, I have 10 years of experience and mentor fresh college graduate developers at my company. you clearly dont recognize what a huge amount of internalized knowledge you have if you think your suggestion is sane for a self taught dev. Have you talked to someone who just came out of college for programming recently? This guy doesn't even have that much experience.
https://docs.microsoft.com/en-us/dotnet/standard/io/how-to-write-text-to-a-file
We hire people right out of school all of the time and I they can ALWAYS handle a project like this. In fact they frequently impress me with how much they are able to take on. I suspect that you don't respect the amount of determination and ability that op has.
oh god
Did you even read what I wrote? My point was that OP didnt tell us he even went to college for programming, your entire digression about how amazing your college graduates are is noise. I do respect it, and the nice part about my suggestion is that when OP is ready to start worrying about networking and RPC, it's as easy as rewriting the file read/write instead of stranding him in 4 different tech stacks.
Another fun fact.... This is how JSON.NET does anonymous type deserialization.
What about the [GoDot](https://godotengine.org/) engine? It supports C# and I've heard good things about it.
Yes, a tuple is actually just a \`ValueType&lt;,&gt;\` with extra sugar
Just use the `GetOrCreateAsync` extension method on `Microsoft.Extensions.Caching.Memory.IMemoryCache`.
I previously did something similar with the OIDC middleware. The same basic principles should apply with the JWT middleware, When you register your JWT middleware, create a handler for the `OnTokenValidated` event. In there, you can access the user id as well as your DbContext and perform whatever logic you need to and insert a user record in the local DB ``` OnTokenValidated = async context =&gt; { var dbContext = context.HttpContext.RequestServices.GetService&lt;CloudpressDbContext&gt;(); string userId = context.Principal.FindFirstValue(ClaimTypes.NameIdentifier); // Perform your logic to add a local account for the user } ```
Will try it now. Thanks for the straight to the point answer, it seems like exactly what I was looking for :)
You can use NLog but still inject an ILogger of type Microsoft.Extension.Logger. I do this with Serilog because I do not want to change my whole code should we ever decide to use another logger (which is kinda the point of injecting interfaces rather than concrete classes).
The scripting language you choose will be the least of your worries, however for what its worth, C# is proven to be a good one in general. Your question really is what is the best way to develop games as a visually impaired individual i.e. what good modes or libraries out there are good options. As mentioned elsewhere, Godot is an open source engine so if you can't find a satisfactory option, perhaps you could advocate for improved accessibility and lead the way in creating the kinds of tools you envisage.
Please clarify what kind of technologies your SPA is going to use? Is it just going to a bunch of JavaScript files, simple HTML/CSS? &amp;#x200B; Hosting is a very broad term, and it largely depends on what type of content you want to host. [https://www.interserver.net/webhosting/windows-hosting.html](https://www.interserver.net/webhosting/windows-hosting.html) For a .net project, this should suffice. &amp;#x200B; And for the rest of the content. Just get a cheap VPS, install the necessary software and host your website. [https://www.interserver.net/vps/](https://www.interserver.net/vps/) Note: They are not free. Now, you also need to get the domain name to point wherever your data is so you can share it with others.
I think I am missing something because I keep getting a null, and this happens only for the first request I try. I am trying to send requests from Postman and the browser. Here is my code so far: &amp;#x200B; `// Authentication setup` `var key = Base64UrlEncoder.DecodeBytes(Configuration["Secret"]);` `SymmetricSecurityKey signingKey = new SymmetricSecurityKey(key);` `services.AddAuthentication(x =&gt;` `{` `x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;` `x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;` `})` `.AddJwtBearer(x =&gt;` `{` `x.RequireHttpsMetadata = false;` `x.SaveToken = true;` `x.TokenValidationParameters = new TokenValidationParameters` `{` `IssuerSigningKey = signingKey,` `ValidateIssuerSigningKey = true,` `ValidateAudience = false,` `ValidateIssuer = false` `};` &amp;#x200B; `x.Events.OnTokenValidated = async context =&gt;` `{` `/* Breakpoint below doesn't reach*/` `var dbContext = context.HttpContext.RequestServices.GetService&lt;AgentBackendDbContext&gt;();` `};` `});` &amp;#x200B; `services.AddAuthorization(options =&gt;` `{` `options.AddPolicy("IsAgentPolicy", policy =&gt; policy.RequireClaim("aut", "ROLE_AGENT"));` `});`
The 3D objects might still be useful for audio games? For things like collision detection. So the traditional game engines could offer useful functionality perhaps.
Yeah I thought so. Thank you for the answer
I have a cheap linux VPS that i use for some node projects, my blog, and any .net core hosting I may want to do. all very low traffic. &amp;#x200B; With that said, it heavily depends on what technologies you develop on. There are no free solutions long term that I know of, however aws and azure both have a free tier that will run a super small server for a year for free. Might get you where you want to go.
Maybe it is worth to inspect those frameworks deeper whether you can cleanly split visualization from the physicality. I am afraid the visual part cannot be "turned off". Its tight coupling with abstract rules like e.g. object collision will represent and unmanageable obstacle for blind people to develop with.
Seconding—Do not ignore Godot. Given your requirements it is a great possible solution.
Inject the ILogger and then add NLog so all the logging goes through it. &amp;#x200B; This way all your libraries will work the same as the microsoft provided libraries that take an ILogger instance from Microsoft.Extensions.logging. I dont really subscribe to making it easier to swap out logging frameworks (although its a nice side benefit), its more about standardizing on an injected interface and ILogger makes sense since Microsoft.Extensions.Logging is set up to allow the use of other frameworks pretty transparently.
You could use the Azure App Service free tier... Very easy to deploy from within Visual Studio (or manually via FTP etc if you prefer). https://azure.microsoft.com/en-gb/pricing/details/app-service/plans/ Supports .NET Framework and Core, and also NodeJS I think. Only downside is you have to have &lt;your project&gt;.azurewebsites.net as the URL I think.
I personally would use AWS/Azure, but you can also use Heroku which is easy to deploy new boxes.
`reproductionSteps` is a list of strings. It doesn't make sense to print it out. You either want to use a StringBuilder() *or* you need to write some code to format the strings in your list into whatever it is you're actually expecting. Maybe something like var builder = new StringBuilder(); foreach (var node in doc.DocumentNode.SelectNodes("//text()")) { var value = string.Join(Environment.NewLine, node.InnerText); builder.AppendLine($"VALUE{value}"); } Console.WriteLine(builder);
Thank you! This worked perfectly! This is my first time doing this thing before so I will be sure to check out StringBuilder a bit more.
Here is an example how to drag and drop between listboxes. https://www.c-sharpcorner.com/uploadfile/dpatra/drag-and-drop-item-in-listbox-in-wpf/
I am really really interested in how to make games that are 3D and dependent on sound only. &amp;#x200B; I think you can make some kickass spooky dungeons if you have some amazing sound design!
I’ve been working on a WPF/MVVM project and have been finding incredibly challenging to learn.
/u/BradleyRenshaw
Is this something to do with Html Agility Pack? If it is, you don't need to string.Join() the node's InnerText property--it's just a string. (At least according to their documentation.) Assuming that's so, here's a couple that ought to get you to the same place: // LINQ var result = string.Join(Environment.NewLine, from node in doc.DocumentNode.SelectNodes("//text()") select $"VALUE: {node.InnerText}"); Console.WriteLine(result); // for() loop and string concatenation--no LINQ, no foreach(), no string.Join(), no StringBuilder. var result = ""; var nodes = doc.DocumentNode.SelectNodes("//text()"); for (var i = 0; i &lt; nodes.Count; i++) { if (result.Length &gt; 0) { result += Environment.NewLine; } result += "VALUE: " + nodes[i].InnerText; } Console.WriteLine(result); StringBuilder is probably preferable to raw concatenation, but string.Join() should be using a StringBuilder (or something similar) on the back-end.
Thanks.
Thanks.
So I would need to pay in order to use a domain name that I own?
Here's a relevant excerpt from "C# in depth" (4th ed) https://imgur.com/eC6ydwu.jpg
Azure is good for free stuff (Free SQL Databases, .azurewebsites domain etc) but the price hikes up fast when you want things like SSL and custom domains. If you have VS Enterprise go for Azure since you should have £150 of free credit a month. &amp;#x200B; What is it exactly you are planning to host? I'd always personally go for Azure since it's a one click deployment from Visual Studio and the app is up and running.
I intend to use smarterasp.net hosting for similar purpose. Now I host there my database and it works; they have big trial period and cost for first paid tier is about 3 or 4$ a month.
I'd like to suggest looking into the work Mark Miller is doing with his D&amp;D add on for [MrAnnouncerBot](https://github.com/MillerMark/MrAnnouncerBot). if you want to collaborate and follow along with the things he is doing you can watch his Twitch stream ( [https://www.twitch.tv/videos/444060033](https://www.twitch.tv/videos/444060033) ). In essence, the guy is creating an overlay for Twitch that will simulate a table top experience for a group of players. The plan is to open another twitch stream where people will play out a D&amp;D session ( [https://www.twitch.tv/dragonhumpers](https://www.twitch.tv/dragonhumpers) ) and they'll use the work done in this code base to play the game. It's pretty neat to watch and the visuals on the dice rolls are super cool. Might not be the direction you were thinking of heading with this idea, but it might also give some inspiration and insight into what others are doing in the same space.
Imho, https://www.netlify.com is the best service for hosting static sites (that is, no "backend"). If you need that you could always use something like https://heroku.com which also has a great free tier for demo/pet projects.
Use a find and replace with a regex modifier to return only void keywords at the beginning of the line, and replace them with private void
Coding blindly is a serious undertaking. Development would take maybe three times as long. The IDE highlights errors through red squiggly underlines. If you forgot the exact spelling of a variable or method name, lowercase or uppercase, you'd have to scroll up and read a ton of text at once to see where you declared it. Debugging is a strictly visual skill. If an enemy is standing sideways, you have to either know your code really well or visually test constantly.
I think so yes, but I'm not certain as I've always just used the free version with the default domain. Unfortunately once you're off the free tier it does get expensive, so if you need a custom domain, SSL etc then maybe a small VPS would be better, but obviously you'd have to set it all up manually. I have one with Vultr which is only $2.50/month and works great for low traffic (but that deal isn't always available).
It's part of Code Cleanup: https://docs.microsoft.com/en-us/visualstudio/ide/code-styles-and-code-cleanup?view=vs-2019#apply-code-styles (see the Configure window)
Hey, i would love it if you checkout my project here: &amp;#x200B; [https://openrpg.io](https://openrpg.io) or [http://github.com/incomingstick/OpenRPG](http://github.com/incomingstick/OpenRPG) &amp;#x200B; Its written in C++ rather than C# and will use Electron to help build the end user app. The main master branch on Github may make it seem like there is not active development, but I assure you the branches are! &amp;#x200B; Would love to hear thoughts or perhaps even work together on this!
Thank you! But how come I have to activate this with the hotkey "Ctrl + K, Ctrl + E" when it used to work by doing the "Ctrl + K, Ctrl + D" hotkey in Visual Studio 2017?
I was kind of hoping you used C# to automate the process of making cookies. That's something I could get behind.
I did the same in Ruby years ago. It was called RSpec. But beside having way more to type and for coworkers to adapt there are not much benefits to it. You can have fast and parallel tests with nunit and xunit. Personally I use ncrunch as testrunner. The given when then steps are the same. I just separate them with an empty line. Maybe put comments before: assume act assert. No need for more syntactic sugar. Shared context is a normal feature in xunit, don’t know if nunit has the same. The real reasons why a test suite could not run in parallel are different. For my part it’s because of a single shared database (in memory doesnt have all features of sqlserver) but I bet there are some other good reasons to dismiss parallel execution for other folks. So the last point I see why somebody choose this is, that he/she comes form a ja/ruby background and like to feel at home. When you look at the nspec docs you see underscores und method and class names... it’s ok, but I bet not the coding style guides in many companies. My last point: testers and stockholders will read the tests ( or even write ). As I said we used that in the last ruby company. There was no case where this really happened. Would love to have the benefit, but reality was different.
Please educate me on how it is harder to use a text file using the built in language imports in a one page msdn article than it is to: &amp;#x200B; * Learn database design/architecture basics * Learn sql server and how to create a database * Learn insert/update/delete mechanics * Learn RPC * Learn how networking works, included but not limited to the TCP/IP stack * Figure out the connection string * Figure out azure * Learn IP addresses (don't forget CIDR notation, because if you use azure you know they like that) * Figure out how security groups work * Figure out how call the RPC you learned about earlier &amp;#x200B; \*\*When all OP wants to do is save notes from his DM session\*\*. Troll. &amp;#x200B; It's a really sad life you live if baiting people online and leading new people down a completely overwhelming path is how you get your jolly's. Grow up.
We do this as well. The only thing I don't like about it is losing the ability to push properties to the context. Yeah you can do a begin scope and pass a dictionary but it replaces previous context. And I doubt we will change logging libraries any time soon.
Last updated 2 years ago? :/
one idea is that you can make the entire SPA "static" as in just all "demo" pages. I did this before, while showing them an older C# code project to show that I know the fullstack. Just an idea. Then you can host it on github or gitlab.
I said in another comment that the Master branch makes it look like there is no development, but the branches themselves are still being worked on. Check out "patch-v0.5.0-dev". I just pushed to "character-module" yesterday :)
Oh yeah dude if you don't want people to think it's dead you gotta merge to master a bit more frequently :) I'd love to help but I don't know CPP. Good luck though!
I would say the major benefit here is the reports generated through the reporting package!
Run the code in the debugger and see what key codes your function is getting when you press those keys. It's been a LONG time since I've done this kind of thing, but I believe the numpad arrow keys have a different key code than the standard ones. The only way to know for sure is to see what your code is getting, by using the debugger.
I use Code Maid for that. It can automatically run cleanup on save. I set it the other way though, removing redundant modifiers such as 'private'.
It's definitely possible to do something like this in C#! Depending on how low level you want to go with technical details, you have a few choices: Wwise and fmod are industry standards for game audio engines, and as a bonus, many sound designers and audio engineers that work in games are experienced with them as well. NAudio is a very powerful, but very low level library for working with audio in C#, it's most commonly used outside of games, such as in audio editing and music production software, but could be used for something like this too. I've also heard good things about irrklang, which is a smaller, but supposedly quite powerful game audio engine for C# and C++ I believe MonoGame also has its own audio engine, but I'm not sure how powerful it is. Either way, all of these options should be fully compatible with MonoGame which is a great choice for the rest of the game logic.
It is very posible to make a prototype like Call of Duty only with sound. &amp;#x200B; C# a good choice because is easy to learn, compared to other programming languajes used un games like c++. And has lots of resources online. Monogame is also a good choice. Many people choose it because they don't like the workflow of visual enviroments like Unity or Unreal. Monogame is based on XNA. A framework people used to make xbox360 and pc games back in the day. I learnt to programm games with XNA and this pages: &amp;#x200B; [http://rbwhitaker.wikidot.com/](http://rbwhitaker.wikidot.com/) &amp;#x200B; [http://www.riemers.net/](http://www.riemers.net/) &amp;#x200B; Even if Monogame is not really 100% compatible with XNA, I think the assetts loading is different, searching for XNA tutorials will help.
I'm not sure how to use debugger on Unity.
Well now's your chance to learn. How do you develop code without using a debugger? It's like programming without a keyboard.
Which offers the features you actually intend to use?
Where's the debugger button in unity? I have Unity window open with many separate C# scripts in that Unity panel.
Most possible cause : You declareted moveUp without assinging it "public KeyCode moveUp;" Then you added to Unity editor, it serialized the variable with default value Then you added = KeyCode.UpArrow; But since Unity serialized it as default value it will use as it is, until you set/reset or re-add the component.
I have these 2 codes. public KeyCode moveUp = KeyCode.UpArrow; public KeyCode moveDown = KeyCode.DownArrow; I'm assigning UpArrow and DownArrow in one line each as I declare public KeyCode.
https://youtu.be/rjNDXKgbhgY
Thanks.
I'll get back to you about that
Please do
Check the Blazor roadmap on Github: [https://github.com/aspnet/AspNetCore/issues/8177](https://github.com/aspnet/AspNetCore/issues/8177)
I tried running debugger. I don't get any bug alert. The codes seem to be running pretty good. I don't see why my up and down arrow keys are not working.
You missed the mark on this one buddy. Your links aren't addressing the language or platform I'm using. Try again next year
I fixed it by changing the implementation. if (Input.GetKey(KeyCode.UpArrow)) { vel.y = speed*3; } else if (Input.GetKey(KeyCode.DownArrow)) { vel.y = -speed*3; } How come the following didn't work? public KeyCode moveUp = KeyCode.UpArrow; public KeyCode moveDown = KeyCode.DownArrow; if (Input.GetKey(moveUp)) { vel.y = speed*3; } else if (Input.GetKey(moveDown)) { vel.y = -speed*3; }
Nice, thanks! I'll check them out
That’s not what a debugger does. You need to set a breakpoint. What a breakpoint does is pause your code at a specific point. The debugger then allows you to check the values of all the variables in the current context.
Debugger allows you to run your code step by step and see the variables in current moment. You need to add breakpoint in place, where you implement your arrow keys by clicking on the left of line code number. F10 - next step. Coding without using debugger is wasting time for asking questions on forums. Learn how to use it, very helpful thing :)
This is required for List&lt;T&gt; initializers to work properly.
IIRC, Godot's editor has basically nothing when it comes to accessibility, so I think it would be out of the question for OP.
Good question, heh. Lots of new formatting/code style/editorconfig features have been/are being added, my guess is they're keeping simpler stuff in Ctrl+K/Ctrl+D and putting things resembling refactorings in with the Ctrl+E. 🤷‍♂️
Yeah, you need to create an instance of `JwtBearerEvents` ``` .AddJwtBearer(x =&gt; { x.RequireHttpsMetadata = false; x.SaveToken = true; x.TokenValidationParameters = new TokenValidationParameters { IssuerSigningKey = signingKey, ValidateIssuerSigningKey = true, ValidateAudience = false, ValidateIssuer = false }; x.Events = new JwtBearerEvents { OnTokenValidated = async context =&gt; { /* Breakpoint below doesn't reach*/ var dbContext = context.HttpContext.RequestServices.GetService&lt;AgentBackendDbContext&gt;(); } }; }); ``` Regarding the breakpoint, it could be something to do with your policy. Try and remove the policy and only put the `[Authorize]` attribute on the endpoint you want and see if that makes a difference. Or perhaps update your policy to explicitly require an authenticated user: ``` options.AddPolicy("IsAgentPolicy", policy =&gt; { policy.RequireAuthenticatedUser(); policy.RequireClaim("aut", "ROLE_AGENT"); }); ```
Should return doesn't indicate to me you know for certain what it's returning. Can you replicate the same call in sql workbench ? Does it return a single value?
Well, it's working without debugger. Thank god.
I have one point that confuses me in the authorization. Where do I set the authenticated user's info to access it later in the app? For example, if I want to access the database and only fetch data from the current user, where do I get his ID?
I tried setting breakpoint at if (Input.GetKey(KeyCode.UpArrow)) and at public KeyCode moveUp = KeyCode.UpArrow; but the values were invisible. It just returned my class name as value. I'm not quite sure how debugger works. But I set breakpoint and when the code stops, it says my value for "this" is "Paddle1 (PlayerControls)" and my value for "vel" is "(0.0, 0.0)".
In the inspector, they were set to W and S. I guess Inspector menu options can overwrite C# codes. If Inspector menu says to use W &amp; S and C# codes say to use arrow keys, Unity uses W &amp; S I guess. Thanks.
It's not ADA compliant. I just had to retrofit my company's whole app to be ADA compliant. Best trick: do it as you go. Glad to make our apps accessible to people like OP though :)
If you are using 2019, you have to go down to the cleanup icon and click the dropdown arrow next to it, then go to Code Cleanup Options. From there, you can change what Code Cleanup changes and what it leaves alone. I know, it is stupid.
You don't understand, but it's no problem.
You can attach extra claims to the user inside the `OnTokenValidated` event. So for example, in my case, I was working with a multi-tenant system and I wanted to only query data for the tenant that the user belongs to. What I would suggest you do something along the following lines: ``` // Inside your OnTokenValidated, after you have created the local user record, or retrieved it var localUserIdentity = new ClaimsIdentity(new List&lt;Claim&gt; { new Claim("my-custom-claim", localUserId) }); context.Principal.AddIdentity(localUserIdentity); ``` Then, inside your controllers, you can retrieve the value of that claim on the `User` object to fetch the correct data
 //Enumerate all strings var reproductionSteps = doc.DocumentNode.SelectNodes("//text()").Select(node=&gt;node.InnerText); //Join them into a single string separated by line breaks var concatenatedSteps = string.Join(Environment. New line, strings); Console.WriteLine(concatenatedSteps);
&gt;But beside having way more to type and for coworkers to adapt there are not much benefits to it. I don't think you read his response to the end...
Awesome. Thanks for your reply!
YAML is insignificant compared to JSON. Even Kubernetes which is the biggest system using YAML configs just converts it to JSON internally.
[removed]
I like [NopCommerce](https://github.com/nopSolutions/nopCommerce)
Here's a sneak peak of the next one. https://www.infoq.com/news/2019/06/CSharp-8-More-Nullable-Reference/
I was going through the readme. I didn't understand this last part. &gt; With its pluggable architecture, additional functionality and presentation elements can be dynamically added to the application at runtime. What does it mean to **dynamically add functionality to the application at runtime.**
WTF is there no documentation on that method? https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.caching.memory.cacheextensions.getorcreateasync?view=aspnetcore-2.2 It is really f-ing important to know if that is storing the `Task` itself or just the result in the cache.
Providing whatever you're developing has interfaces that can be implemented and a common UI "pattern", it probably has some mechanism to load components from custom DLLs at runtime. Have a look at reflection if you're interested :)
Look at the Microsoft github content. And watch some of the webcasts by the asp.net team
No I mean I did the part about "at runtime". Runtime means the time at which core is running. So we can add new functionality while the code is running?
Yup!
What you need to do is store the `Task&lt;TValue&gt;` in your cache instead of just the `value` itself. That way when something reads from the cache, it will get the pending query when appropriate. Something like this... public static async Task&lt;TItem&gt; ImprovedGetOrCreateAsync&lt;TItem&gt;(this IMemoryCache cache, object key, Func&lt;ICacheEntry, Task&lt;TItem&gt;&gt; factory) { if (!cache.TryGetValue(key, out object result)) { var entry = cache.CreateEntry(key); result = factory(entry); //save the task entry.SetValue(result); // need to manually call dispose instead of having a using // in case the factory passed in throws, in which case we // do not want to add the entry to the cache entry.Dispose(); //Yes, "Dispose" means "Save" in this stupid API. } if (result is Task&lt;TItem&gt;) return await (Task&lt;TItem&gt;) result; return (TItem)result; }
I'm having trouble grasping this concept. I will look into reflections. But reflections is just code right? If we add new code, we have to compile it and run again, don't we?
Oh boy, there are even approaches where dlls are being "downloaded" from database to extend your app
So the dll being downloaded itself has the logic for the app to implement the functionality in this dll without altering the main app? Is that how it essentially works?
Search Microsoft patterns and practices. Prism is a good library for traditional development. https://github.com/PrismLibrary/Prism Now PnP publishes cloud patterns more.
I didnt do that, but afaik that's been used in ERP-ish soft used by many different companies/govt places which used kind of different functionalities and it was easier to setup app on client's environment
Yeah that's basically it. In a nutshell you use Assembly.Load("MyFuckin.dll") to create a reference to your compiled assembly. You can then use the reflection API to discover it's types and invoke methods. There are a ton of examples online.
Thank you a lot. :) I don't understand why using both Reverse Polish Notation and Shunting Yard algorithm to do that.
Not exactly what you asked for... but to code in unity etc since it isn’t compatible with screen readers then would it be possible for you to get a scribe? The concept sounds awesome btw (if it doesn’t already exist)
Cool thanks
As far as I know, [asp.net](https://asp.net) is C#, so those concepts can be used with wpf or whatever GUI you like as long as it uses C# &amp;#x200B; As a matter of fact, I use a REST-API in the backend of the WinForms App that I need to maintain.
 [https://github.com/NancyFx/Nancy](https://github.com/NancyFx/Nancy) basically service http requests from the command line, without IIS
 public KeyCode moveUp = KeyCode.UpArrow; You're trying to declare a public field, which is not possible within a method. Fields are declared at class level. Dropping the accessibility modifier `public` will work, because then you have a local variable.
How can you object to partial classes when comparing to a language that has all-but-mandatory partial classes (header files)?
The code won't even compile.
The code won't even compile, so using a debugger makes no sense. You can't declare public fields within a method.
What is an "under query"?
ask your employer why he wants just one exe file, because it makes no sense at all to everyone else. what is the purpose? it sounds to me that you just need to create an [asp.net](https://asp.net) core app and port your current winforms app to it. it can run on iis, or you can run it free on linux no problem.
True the module system of C#/Java is better than header files. Header files aren’t that bad in that the interface of the class is separated from the implementation. Once you mix in templates and inline functions it gets tricker. Partial classes are bad in that both the interface and implementation are in different files. Plus it’s a feature which I don’t believe is used outside of a single use case, my opinion is that it’s not a good language feature. But then that’s just my opinion.
Ah yeah let's hope I don't get tripped up using something that's only compatible with CORE
You can also use a container such as Castle Windsor to dynamically load assemblies outside the main core as long as they implement interfaces known to main app
Awesome as always!
&gt; Prism is a good library for traditional development Prism is far too much of an anti-pattern. Maybe they've changed that now, the info I'm going on is 5+ years old. PRISM was about bringing CAB ideas to WPF which *fucking sucks*, the idea of WPF is good bindings allow for MVVM, so you want to compose your application at View Model level and have the views found by the template binder. PRISM goes against this by trying to compose at the view and join stuff up *via fucking magic* like it's event broker. MVVM will let you use any DI/IoC at the VM level to create good re-usable apps, components should be clear in the dependencies that the VM needs and have all the injections happen that way. PRISM instead is like let's just fuck it all in the visual tree, good luck debugging that, good luck persisting state in that, good luck testing this in a modular manner.
I would probably have something like a windows service or worker running at interval to ping and store the results in the db
Glad you liked it. I can't post anymore InfoQ links for awhile (gotta fix my ratio of personal to other posts), but if you could share it on Reddit I'd appreciate it.
https://github.com/dotnet/roslyn
Done!
I think he means [subqueries](https://www.dofactory.com/sql/subquery).
But that wouldn't make any sense for the rest of his question.
[VanArsdel Inventory Sample](https://github.com/microsoft/InventorySample) is a wonderful example but please keep in mind it may be too complex for intermediate students as it uses some more advanced concepts.
&gt; What you need to do is store the _Task&amp;lt;TValue&amp;gt;_ in your cache instead of just the _value_ itself. Oh, that’s an interesting approach!
Pretty straight forward at a basic level.. You (as the system provider) provides an assembly full of interfaces ISomething etc etc.. The plugin maker consumes this and implements ISomething etc.. .NET can then load in the plugin assembly at runtime (late binding, reflection) and find all ISomething's and then use the methods where appropriate.
&gt; This doesn’t really work for this use case. It will allow multiple executions of the query to run in parallel, with the last to complete winning. Hm, yeah, I’d prefer to avoid unnecessary network+DB strain
You can argue the same thing with the DI in Microsoft.Extensions as well.. You lose a lot. And who ever changes logging/DI? It's rarely a thing.