Imposter syndrome is common in all scientific fields, and others where threre is considerable depth of knowledge. The deeper the information on a subject goes, the more common it is that those who study and work in it will experience the phenomenon. Essentially, feeling it can be a good thing, you realize you've learned much but that there is still more to learn and experience. It is the opposite of the Dunning Kruger effect.
Ah okay - that sounds like a lot of work for an organisation our size, I don’t have direct access to AD so it would involve some fairly considerable hassle and cost that isn’t really worthwhile for a utility application. I’ll keep it in mind in future though
I would recommend you to use a database (like postgres for example) and getting the data from there with a query. For example &gt; SELECT temp FROM weather WHERE date &lt; '19.02.2018' AND date &gt; '01.01.2000';
We are all here to learn. I’ve been coding for a very long time and there is always more to learn. I’ve done some work with Unity though and it is also just code. All the same rules apply. Always break things down into small, compossible pieces. Every piece of software (the whole package) will have domain specific pieces of course, but most of the core code should be building blocks. The thing that makes this specific applications work in this specific way is how those blocks are combined. Think LEGO. Same pieces can build a LOT of different things.
&gt; Be good at what you do and become irreplaceable Two things: 1. Being irreplaceable is a double edged sword. Sure it is good for job security and you are more likely to get more money, but if you truly make yourself irreplaceable then you will never get promoted. This might be fine if you really love your job, but you want to think long term here. 2. You don't want to get stuck on a project or area of the company that **costs** money. Projects that are necessary but not do not generate revenue will always be treated like redheaded step children and management will constantly be looking for ways to reduce or eliminate costs associated with these types of projects. If you yourself become associated with these types of projects, you will likely be tarred with the same brush and, even though you may be irreplaceable, you will treated as a merely necessary evil while other (possible far less competent) developers get all of the love. As an aside, I saw a post somewhere recommending a book on why its best to be working in a part of a company that generates revenue, but for the life of me I cannot remember the book or find the post. If anyone knows the book I would appreciate if you could post it.
I don't think it's more common in IT, it's might be that it's easier to measure. You see someone who can bend databases to their will, set up servers on the most adverse situations, solve problems with unmatched skills, and then you hear them say, "me? I'm just a regular bloke. *That* guy over there, that's the real star." Neil Gaiman talked about it [here](http://neil-gaiman.tumblr.com/post/160603396711/hi-i-read-that-youve-dealt-with-with-impostor).
I wrote code for an energy company for 21 years. Never dreaded going to work. I love solving problems and writing cod# is like solving a new problem with new rules every day. When c# came out it quickly became my choice wherever I could use it.
Programming for work is great! Currently I'm in AAA gaming, which is amazing. Making games is relatively low stress because no one's life or livelihood depends on me. A couple years ago though, I was working at a financial company. The code was much less interesting and the environment was more stressful, but it was still a relatively fun job. I'd keep up on various hobby projects either way, I make small games and guitar pedals in my free time and it's a lot of fun.
I’m in this situation myself. I’ve been developing for around 8 years now and I’ve had interests in getting into teaching, but I’d still like to be involved with tech. What kind of teaching do you do and how did you get into it?
There's a few ways to do this. The most secure way that I know of is a secrets manager, since not only are the secrets only stored in memory (and not embedded in the deployment artifact or stored physically on the deployed machine), but they support auth schemes that make it only possible to steal the credentials if you are able to have direct access inside the deployed server itself. At my company, we use AWS, so we use an identity auth (supported by both AWS Secrets Manager and HashiCorp Vault) that validates the identity of the requesting service in a way that only works for that specific machine doing the request.
Sounds like you need to look at the costs and benefits and make a priority decision. It take 2 years to get to professional competency but then you can make six figures.
Depends on a lot of factors.
AWS does a similar thing with IAM. It's really the way to go, since you eliminate the need for explicit auth by the service (the service has no idea what credentials it has to access the secrets, it just grabs them) and is a more secure way to hold secrets.
A dynamic proxy?
 var rand = new Random(); List&lt;string&gt; temp = new List&lt;string&gt;{"a", "b", "c", "d", "Hello"}; string randomValue = temp.OrderBy(s =&gt; rand.Next()).First();
Is this something like udemy?
That's a good policy, but requires discipline.
Write an app that fetches weather data from the National Weather Service. It could be a desktop or web app. You can make it as simple or as complicated as your ability allows. Will build your skills for making http calls as well as building a UI. The Api is free to use and is well documented. https://www.weather.gov/documentation/services-web-api
This is a great idea and exactly the kind of thing i was looking for! Thank you!!
&gt; The worst is when those motherfuckers are calling your personal cell while getting off the Tarmac in Maui. &amp;#x200B; Every job I've quit they are all like 'well we will just get you to document everything you know before you go'. Everything is already documented, there is at least one programmer that has a good understanding of any code base that I've worked on. &amp;#x200B; I will never got a phone call on the tarmac in Maui.
When ever I hear that a programmer is irreplaceable my first thought is that they need to be fired straight away.
yup
You can download all your Facebook messages and figure out your most used words over a given time period. You can check who you've sent the most messages to or the average number of messages sent across all people. Download it as JSON files so you get experience with working on them. Serialise the export into C# objects and arrays. GLHF
Well... I was hoping there was an easy way to do it with one line of code. Something like string randomValue = temp.Random(); It seems like this would be a common enough task that it would be built into the language to do this easily. I am new to lambda functions... Could you explain exactly what the the last line of the code above is doing?
Or you could just do this which would mean you don't have to sort the list each time... Here you just use th indexer to access a random element in the list using rnd.next(listcount). `static void Main(string[] args)` `{` `List&lt;string&gt; temp = new List&lt;string&gt; { "a", "b", "c", "d", "Hello" };` `var rnd = new Random();` `var listLength = temp.Count;` `for (int i = 0; i &lt; 100; i++)` `{` `Console.WriteLine(temp[`[`rnd.Next`](https://rnd.Next)`(listLength)]);` `}` `Console.WriteLine(temp[`[`rnd.Next`](https://rnd.Next)`(listLength)]);` [`Console.Read`](https://Console.Read)`();` `}`
Create a couple of HashSets for linear lookup time: // Replace List&lt;Object&gt; with proper data type public List&lt;Object&gt; GetUniquesInTwoLists(List&lt;Object&gt; list1, List&lt;Object&gt; list2) { var uniques = new List&lt;Object&gt;(); var hs1 = new HashSet&lt;string&gt;(); var hs2 = new HashSet&lt;string&gt;(); foreach(var item in list1) { hs1.Add(item.PolicyNumber + item.Commission.ToString()); } foreach(var item in list2) { var value = item.PolicyNumber + item.Commission.ToString(); hs2.Add(value); if(!hs1.Contains(value)) { uniques.Add(item); } } foreach(var item in List1) { if(!hs2.Contains(item.PolicyNumber + item.Commission.ToString())) { uniques.Add(item); } } return uniques; }
10 year vet, got in early when I was 18, am senior dev in a small team that does a little bit of everything. I've slowly developed a drinking problem and a deep disdain for computers. At this point this job is just a paycheck, if I had any skills in any other field I would never touch code again, but unfortunately I've boxed myself into a narrow skillset with a high pay grade. It will be fun for the first few years, but the more you have to betray your ideals about good code, and the more you realise how broken and shitty everything you have to deal with is, the less fun it becomes. There reaches a day where you realise you're not as retarded as you thought and everything is just built by idiots like you and its always going to be like that. It can be really fun, but it is still a job, and at the end of the day most jobs entail doing a lot of bullshit you have no interest in doing and dealing with people whose funerals you'll probably skip. Im not saying don't do it, but for the love of God don't make it your only thing or it will ruin your life.
You could always write a function or extension method to make it 1 line if that’s what you are after. At least the consumption of the method would be in 1 line ;)
OTOH, working in games can be stressful due to the expectation of overtime (varies studio-to-studio). The tradeoff is that the work is rarely boring CRUD work. FWIW, I've worked both in games and enterprise (doing fw for satellite ground terminals), and I'll take games any day of the week. Helps that my current company is awesome, loves their employees, and treats us like human beings.
Stuff like this is why we decided to move away from EF for any not-dead-simple queries at my company. Sure, we trade in *some* portability, but sadly in the end SQL is often easier to reason about, more predictable and sometimes easier to test and develop.
I mean, a quick and dirty hack... var temp = new List&lt;string&gt;{"a", "b", "c", "d", "Hello"}; var random = temp.OrderBy(x=&gt;Guid.NewGuid()).First(); Though god-knows how "really actually deterministic" that is as far as random goes, because "actual random" is pretty complicated - possibly good enough though if it's not under deep scrutiny.
The reason you see ??? is because the encoding of the HTML text on this page is not UTF-8, it is Windows-1251. Try setting encoding to Encoding.GetEncoding("windows-1251")
These might *seem* outdated, but most isn't: &amp;#x200B; [https://code.msdn.microsoft.com/Visual-Studio-2010-Samples-31b491f3](https://code.msdn.microsoft.com/Visual-Studio-2010-Samples-31b491f3) [https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b](https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b)
What I do with my home projects is hard code the secret and then comment 'test only' distraction 100
If a meeting isn't productive, politely leave. As long as SOMEONE is there to cover, your boss should support you being productive with your time. Decline meetings, same thing. Shut down email during coding stints (but not collaboration tools with fellow engineers). Force meetings into following best practices.... an agenda, some action items with owners, etc. During politics remind people youd rather be coding. Over time folks will find ways to accommodate that, to some degree.
Lol, go ahead. Then spend multiple months trying to hire a replacement that isn't a complete fucking idiot. Then groom them for the next year so that MAYBE they can be productive. Then in 3 years, you can be where you are today with the "irreplaceable" programmer.] But you won't make it that far so you don't have to worry, because you'll be fired after the first year of missed releases.
Here are a few pieces of advice, although you may already know some of them: - Something will almost-certainly eventually go wrong with the program. Prepare yourself to be able to find the source of the problem and fix it. So, do not "swallow exceptions" (have a catch block that doesn't do anything, thereby hiding the exception). Add logging for unexpected conditions (exceptions, switch statements that hit an unexpected "default" case, etc.) - Use source control. When you need to make a change: make it small, test it, and check it in to the repository. This way, if you break something, you can easily revert back to a working version of the program. Also, this lets you delete commented-out code from your program. If you ever need to see what code used to be there, you can look in the source code repository log. - In your SQL code, use "using" statements for your SqlConnection and SqlCommand objects, to dispose of them properly. see https://stackoverflow.com/questions/3079098/the-c-sharp-using-statement-sql-and-sqlconnection - If your users are entering values that are used in your SQL queries, add them to the query with parameters, instead of concatenating the value into a string. see https://stackoverflow.com/questions/13600179/parameterized-sql-query-asp-net-c-sharp - Let SQL Server do the "heavy" work. Let's say you want to get a total amount for the transactions for an account. You could write a function that gets all the transactions from the database, loops through them (getting the row's amount from a datareader) and adds them up - all in C# code. Or, you could write a SQL statement that says "SELECT SUM(amount) FROM transaction WHERE account_id = @RequestedAccountId". - If the database doesn't have indexes, you might want to add some. A quick-and-dirty way to determine what indexes to create is to see what columns you're searching on in your SQL queries. If you're using Microsoft SQL Server, SQL Server Management Studio has (or, at least it used to have) a performance profiler that would show you good candidates for indexes to create. - Let's say you have two (or more) SQL statements that must either all work, or none work. For example, you want to transfer money between two accounts. That requires two UPDATE statements - one for removing the money from the first account, the other for adding the money to the second account. Put these into a SQL transaction (https://stackoverflow.com/questions/19165291/how-to-use-sqltransaction-in-c-sharp). This way, they either both succeed, or you can rollback (revert) them. This can prevent a situation where the first query succeeds, and the second fails - causing money to disappear. Of course, there are the standard good coding habits (clear class/property/function/variable names, short functions, SOLID principles, etc.). But, when I saw "accounting firm" and "SQL database", that is what popped into my head.
I've been in development now for 25 years. I don't think it's ever been fun, after all, it is work, and you are often working on projects that you would not do in your spare time. I was never expecting the job to be fun. It's more of a toleration that you are well compensated for something that frankly doesn't seem that hard to you, but appears as black magic to everyone else. However, I have found that the key to having a rewarding time... 1. Working with an organization with non-movable goals in mind, nothing destroys morale than working on something that ends up being thrown out 2. Having management that have your back 3. Working on projects that will at least be somewhat interesting, whether it be a new technology or something that would be interesting to you even if there was no coding involved; writing code to churn out phone bills is no fun, but if you're looking at new tech it may at least bearable 4. And most importantly, the people you work with. If you're an introvert, you may find success at a place that allows you to be an introvert and doesn't make you ill with forced fun or a loud environment. In the same vein, you may be extroverted and find those things awesome To be honest, the coding is secondary to the environment of the job. You could be working your ass off but enjoying your job because it doesn't feel like work. Or, you could be coasting and the job is a chore because you have no interest in what you're doing.
The programming is great! I love to program. What isn't great and isn't loved are the meetings, the meetings about the meetings, and the meetings about those meetings. And still having management not know what part of the thing you should be working on because all of management is both clueless as to what they want and need as well as operating under some level of panic mode.
The ridiculous breadth of computer science. It changes so fast. There are so many languages, patterns, libraries.... did you pick the right one? Truth is... clean code is clean code. If it gets the job done and other people can read it without looking as if they've just swallowed weasel shit then you're not an imposter.... you're a coder.
One I always used to do when learning a new language - &amp;#x200B; If you like sports, write a program to simulate teams and games of your favorite sports. You learn objects (players), arrays and variables (teams) and how they interact (matches). You can also do data persistence (statistics on the games). The only part which isnt really covered is the UI and the use of external data sources
Whatever you use, AD or regular password/API key, just make sure it's unique to the application (or better - each server, if you have a load balanced system), and grant the API key access to ONLY the credentials that it needs. Then, make sure you log and notify on invalid credential requests. It really doesn't matter where you store the API key - if an attacker breaks into the box, they're going to get access to it somehow. But now you'll be notified when an attacker starts trying to request credentials they aren't allowed to use and the API key will identify *where* the attack is coming from so you can shut it down immediately.
Haha yeah the place I work is great about work life balance, but I've heard horror stories from our new hires about some other studios.
That may be OK for the server-side code, but a big nono for the desktop apps.
You could mimic the basic pattern. Desktop app starts up, talks to server as the current user, and the server checks group membership. Server gives credentials (over an encrypted channel, of course). Desktop app keeps credentials in memory as SecureString, never storing them to disk. (If you don't use SecureString, a crash dump will have the credentials in plain text). Now, while that may seem simpler than using AKV or IAM, the first rule of security is "don't roll your own". You are probably not the first person in your org to face this issue and almost definitely won't be the last. Using a proper, standardized Secret Store across your organization is the right thing to do. Yours would hardly be the first organization to do something easy-but-wrong, too (like pushing out secret files to each desktop or compiling the secrets into the executable and trying to obfuscate them).
Is this is a legitimate problem you're solving or are you butthurt &amp;#x200B; &gt; **Imagine** we have an app that handles hotel bookings.
Be careful about the "islands of information" problem that less formal, experienced enterprise developers can fall into. You want to think about your data in the context of the business and not just the project. That can be challenging; especially since you're going to be hard pressed to find examples with that breadth. Enterprise projects tend to be multi-faceted and to that end I've found the Prism framework to be invaluable if you're doing desktop applications.
I hate it so much when people do this. At my last job, towards the very end (when I knew I was about to put in my notice), I'd just decline the stupid meetings. In my opinion, that's a piss-poor excuse for why you're stealing other people's time. I've only ever seen a handful of occasions where something was important enough to mandate pulling everyone in during lunch; on those occasions, the other things on people's calendars were all magically re-scheduled anyway, because we were either losing money, at serious risk of losing money, or at risk of not reporting our accounting numbers on time.
should be fine. both / and \ are invalid characters for a file directory name. but this is why you should use path.combine, it just does the right thing.
c would like to have a word.
To be completely honest, coding is merely better than all the other things I could get paid for. But it's not what I do in my free time, not anymore anyway. I feel like that ship has sailed.
Unfortunately it’s called work for a reason. That been said I have been lucky enough to work for some really cool companies on some really cool projects and have no regrets. Less about dev and more about working in general Long term you can be very selective of who you work for and what roles you consider. I mostly enjoy what I do because I do just that. Working 9-5 at a company with flexible work hours makes a difference for me it means I’m not burnt out when I go home and I actually work on my own software in my spear time. As others have said, depending on the company, you may end up dealing with a lot of other corporate rubbish. Unfortunately this is fairly common for dev work.
Curious what was it you did in between? I may want to go a different path someday in the future.
Haha, I love it. What language do you use most?
Did you start coding at this company, or did you join this company after a having gotten previous experience?
\&gt; The grass always seems greener when you're unhappy. I think there's so much truth to that. I want to believe that software developing could be more fun than my current job, so it's very easy to convince myself of that. I know that I don't have a bad job by any means, but I know that it could be even better.... I'm working in a 24/7 manufacturing environment and it really just isn't for me. I think something like what you described would be quite fun, to be honest. I just have to figure out how to get myself into a role like that, and it's tough because the concentration of jobs isn't too high near me
A lot of people talk about the meetings... at my work, meetings almost always mean being assigned more work than you can handle. Is that the case with software developing meetings? What types of meetings do you find yourself in the most?
I just have a simple extension method. public static T Random&lt;T&gt;(this IEnumerable&lt;T&gt; list) { return list.ElementAt(new Random().Next(list.Count())); }
This was meant to be a reply to davidwhitney's post below but I did it from the mobile app and didn't reply to the correct post.
Guid is not random at all A similar idea could work with orderBy(x=&gt;Rand.GetNext())
I'm new to lambda functions, and I'm not familiar off the top of my head what the OrderBy function does... Could you explain exactly what it is doing in that code?
I have snaked my way into some tools to learn those things at home on my own time, but I would never really have the opportunity to implement those skills at work. We contract that type of thing out to other companies, unfortunately... I could make time to learn those skills if I had enough motivation to do so, but I enjoy my two hours of evening time too much to spend it also working. Two hours a day of 'free' time sounds like a lot to some people, but I have so much to do that it is hard to prioritize learning things to advance my career. Except, I prioritize programming because it's really fun -- which is why I made this post, I guess.
If you don't mind, may I ask what type of work you're doing as a new dev? Did you get your degree in CS? What programming languages are you using at work? Do you work for a large company, or a small one?
Optional&lt;T&gt; is not the same as optional parameters - optional parameters are syntactic sugar allowing you define a default value for a param in a method eg void manipulateTheThing(Thing thing, ActionType type = ActionType.Squish) { ... } Easier to read than overloading with manipulateTheThing(Thing thing) { manipulateTheThing(thing, ActionType.Squish); }, especially once you start having multiple optional params void manipulateTheThing(Thing thing, ActionType type = ActionType.Squish, Force force = Force.VeryHard) &amp;#x200B; Have been working with Java the past 6 months after over a decade writing C#. Java is pretty underwhelming.
What exactly is this code doing?
@[ScottInParaguay](https://www.reddit.com/user/ScottInParaguay) has awesome points. Taking his #2 a bit deeper... &amp;#x200B; From an "enterprise/business environment" perspective, I can't stress Source Control enough. &amp;#x200B; Git (currently the most used source control system) is fairly complex and will take a good portion of time / effort to learn, implement, and get used to as a beginner. But its benefits are huge. * **Tracking!** * You can track every code change you commit! This allows you to go back and see exactly what you're doing or have done, as well as also providing you a light form of 'backup'. In other words, it can give you the power of a macro version of CTRL + Z -- if you realize that the last thing you committed overwrote something you didn't intent, you can roll back to a previous commit or just go look up the code you need from a commit that had it. * **Control!** * When you start working with a team and sharing your code for others to work on, it can give you control (ha, as the name 'source control' implies) over what gets changed or how it gets changed. This is a big deal because coordinating multiple code changes from multiple people all within the same project or even the same file gets very manual / confusing without some implementation of version control refereeing the file merges. * **Access!** * If you host your code in a Source Control Management service (you usually would use services like Github, Gitlab, Team Services, etc.), you can get your code at any time on any device that can download files. This is helpful for the developer working on that code, but also, for the business, this provides persistent access and a home for their own source code. Which, of course, is always preferable to the source code for some important business function residing solely on some employee's laptop...somewhere. * **Git Blaming!** * The best part: once you start sharing your code and others work on it...if some block of code is committed and starts creating exceptions, you can see who committed it, and then Git Blame them. Typically, the developer in question will need to do some push-ups or serve as a pinata at the next standup meeting depending on the severity of the exception. ( Kidding. =P ) &amp;#x200B; Quick Links! * Learning Git: * [https://www.codecademy.com/learn/learn-git](https://www.codecademy.com/learn/learn-git) * [https://www.youtube.com/watch?v=SWYqp7iY\_Tc](https://www.youtube.com/watch?v=SWYqp7iY_Tc) * Too many other sources to link... * Adding Version Control to Visual Studio: * [https://www.youtube.com/watch?v=jUiuIAZt6Dw](https://www.youtube.com/watch?v=jUiuIAZt6Dw)
This is what I have come up with to give me a .Random method: public static class ListExtensions { public static MultiplicationProblem Random(this List&lt;MultiplicationProblem&gt; list) { int max = list.Count; var rand = new Random(); var i = [rand.Next](https://rand.Next)(max); return list\[i\]; } }
It's my second job with programming but my first as what I'd consider a true programming Job as my previous one required me to do a whole lot of tasks other than programming...and that programming was pretty much me integrating their erp with bigcommerce
When you said pentris I had something different in mind tbh. Yes, mature.
It uses the LINQ orderBy function to order the list by a random identifier var Rand = new random() list.OrderBy(x=&gt; Rand.Next()) Most people only ever user OrderBy to order a list by an object property (like ordering a list of users by name). However, there is no requirement that the order key selector be based on the objects in the last. You can use my example to assign a random number to each object sort. NOTE: orderBy only calls rand.Next() once for each element of the list. The result is then cached. That is the pivotal factor that makes it work. If the rng were called multiple times, then it would never resolve
This is what I have come up with to give me a .Random method: `public static class ListExtensions` `{` `public static MultiplicationProblem Random(this List&lt;MultiplicationProblem&gt; list)` `{` `int max = list.Count;` `var rand = new Random();` `var i =` [`rand.Next`](https://rand.Next)`(max);` `return list[i];` `}` `}` Any thoughts?
Unit tests. Lots of them. And integration tests. It’s for your sanity later on when the project gets bigger (it will. “Add this feature,” “Can it do this?”) It’s also for the sanity of the next person who has to work with your code.
This is a good question, but it's a big question. I'm a programmer, I've been coding for fun or profit since I was eight years old (most of the profit has been in my most recent twenty years as a professional developer, but the fun has been well distributed). I can't imagine doing anything else. Is it as fun as I thought it'd be? I mean, they don't pay me because I'm having fun, and work tasks are work tasks. What I code for fun isn't what I code for work, but I do both. It's what I thought it'd be as a career. Quick pause for some required reading. If you haven't seen it, this is humorous and accurate in many ways: [http://www.stilldrinking.org/programming-sucks](http://www.stilldrinking.org/programming-sucks) Back? Great. One of the awesome things about software is that it's application neutral. You can write software for software's sake, but it's involved in basically every industry currently operating (though the pay is industry specific). If you enjoy, in abstract, applying logic to problems and making systems work, with programming skills you can almost certainly find a job somewhere; if you see everything as a puzzle, and you like solving puzzles with code, then what's not to like? The actual thing you build may be something mind-numbing or something you'd never personally need. Even if you land in an industry you love, a lot of times the day to day realities of doing what the business needs aren't going to be especially fun. If that doesn't sound okay to you, this may be no more fulfilling than your current work. As far as languages and things, one point that's both cool and a word of warning. You will generally change technology stacks every few years. You know C# and Python now. In five years, would those be the things you're working in? Maybe not. Will learning some new language, tool, or operating system quickly be a problem? Does it sound fun? You need to view being able to change languages and technologies as a job skill, rather than concentrating on any specific one with the expectation that it will always be the thing you use. This is a profession that involves constant learning to keep up and stay employable.
If you're a team of one, chances are VERY high that you're still at the 'school project' level. Without someone to peer review your code, it's really hard to improve. You can still do it, you're just missing out on frequent feedback. If you have other devs there, ask them to peer review your changes, preferably before merging into master (and if you're not using source control, start now) How's your test coverage? Are you unit testing or integration testing at all? If not, get started on that. Even beyond just testing being good, unit testing can be a good barometer of how well structured your code is. If you're trying to access your private methods in your tests, your class probably breaks the single-responsibility rule, for example. Do you have any monitoring or alerting in place? It something goes plaid, will you know or are you reliant on your users to inform you? Are you familiar with and do you implement common best-practice principles like SOLID? Do you think about code reuse and spend time refactoring your old stuff? Have you separated concerns? For example, when you hit SQL, is everything that cares what the data store is or looks like all contained in one 'layer'? If so, you should be able to switch between SQL, Excel, or a web service without your presentation layer caring at all. This is a long road you're starting on. There is a TON to learn, and you're not going to learn it all at once. Spend a few hours every week on formal learning and write code every opportunity you get and you'll get there. And congrats on getting an actual project at work! That's a big first step!
In 10 years, I've never once tried to rip out a data access layer and replace it with another :( ... this is expensive as it takes some significant time, and product owners like to see features- not months of refactoring. My thought is: Repository pattern is a good thing. Wrapping up EF in a custom implementation (IRepository, IUnitOfWork, etc), and treating EF as the CRUD mechanics under an interface your app depends on is a bad idea. At that point, I always strive to just use EF directly in my business layer. It already abstracts SQL complexity away for me and let's me write unit tests against my data storage- and that's what I'm really shooting for.
Is the product you manufacture exciting to you? Do you have the ability to provide input into the design process to where the business could see value? In my situation, I wrote software that drives the backend of an IoT solution. I got to look at the hardware and provide feedback to where I believe we could save money in the manufacture of the device and add flexibility and scalability toward the edge and I was lucky enough to have leadership that basically asked me to prove it. I made a few proofs of concept and was provided with additional resources to flesh it out and I got moved into a new organization. I realize that isn't common, but it is possible. If the thing or things you manufacture are banal and/or you don't see a viable way that you could potentially improve it, then maybe that's part of your issue. Maybe you're doing the right job for the wrong place. Maybe you're in the wrong vertical. Industrial Automation or an Energy Services role like Production Optimization would lean heavily on your skills and give an opportunity to dive into PLC programming. Of course, ladder logic could drive lesser men insane.
Remember that other people will need to support your code. Make it readable, don’t spend a lot of time being clever. 8 months from now somebody will log a bug, you will need to be able to look at this thing you barely remember and understand it. Don’t be afraid to make a mistake, don’t be afraid to admit a mistake, just own it and move on. Everybody else makes mistakes too, it’s ok. If you are stuck, ask. If you aren’t sure, ask Test your code. Get other people to test your code
Not a bad way to go- but at this point I'd just assume drop EF and use just Dapper :grin: Plus, you won't have all the junior engineers asking for help getting their local database set up because the migrations failed in some strange way. Shove a SQL project in your solution and show them how the comparison tool works. profit!
This isn’t an answer to your question but ironically my career is PLC programmer/c# developer. I do both lol
Not at all. It's something that has been manufactured the same way for over a hundred years. There are opportunities to decrease cost, but it's mostly centered around getting people to just do their jobs the right way instead of taking shortcuts. The problem-solving is more centered around that than anything else, it seems. I definitely want to go towards Industrial Automation, I just have to find the right way in.
If it takes 3 years to replace the irreplaceable programmer the sooner we do it the better. &amp;#x200B; Personally when I quit a place of employment, they want me to spend my last 3 weeks documenting what I know that isn't written down and isn't obvious. I'm normally done by lunch time... I spend the afternoon making some pretty diagrams because they always look cool. &amp;#x200B; Sure, it will take my replacement a month or 3 to get to full velocity, but not 3 bloody years.
How do I get hired? :)
We're a scrum team, so we have general scrum 'ceremonies'. Stand-up meeting every morning, usually followed by backlog refinement. These can often take an hour, though it's not supposed to (It's called a stand-up meeting because it's supposed to be so short you don't bother sitting down). Then we have additional backlog refinement meetings once per week, usually an hour. Every other Friday we have our end-of-sprint ceremonies which last the entire day - Sprint review with stakeholders, technical review with our dev organization, sprint retrospective and sprint planning. Beyond those, we have meetings with stakeholders and with our product owner. Those are often planning of future projects, discussions of existing challenges the users are having that we can help fix, etc. With scrum/agile, you start a sprint - two weeks in our case - and all work is assigned at the beginning of the sprint. If someone in a meeting decides that something need to get done now, you talk to your product owner and decide what they want removed from the sprint to allow that new work to get done. Each project (called a story) is given a size (called story points) and we have a set number of story points we can do in a sprint. If that number is 40 and the product owner decides we need to do 80 points of work, it's the scrum master's job to push back and tell them no. It's also the product owner's job to try to get as many points in the sprint as possible... That's where the name scrum comes from, two opposing interests holding each other up in perfect balance. That's a long way of saying if you're being assigned more work than you can handle, there's a management or communication problem.
What are your interests? What hobbies do you have? Sometimes silly tools can help you progress through.
new Random().Next() is not good. You should make a something like a static Random, instantiate it once then keep calling next on the same object. new Random().Next will give some kind of random numbers, but it's not uniform! Also new Random() is super slow.
Close. Make it generic and you’ll have something usable.
Always keep this in mind: software is a tool that enhances a business process. To do well, you need to understand the process and then advise the client what parts will benefit from automation. Software is very good at remembering stuff and never forgetting a step. Look for places where errors occur because of information loss, or because it's important to not skip steps. What computers suck at, right now, is dealing with situations where there are lots of exceptions. Clients don't know this most of the time. Being good at understanding their process is a huge thing. If you can, watch what the clients actually do. It's super helpful.
This sounds almost anecdotal. What a unique system, haha. I'd love to see that in action, to be honest.
You’re clearly not a senior developer on a complex web project then. It literally takes a solid year just to learn our business/product.
Thanks, I will give that a whirl. I just use it to pseudo randomize data when setting up for integration tests.
I have 17 years of .net framework experience (started in asp.net 1.1). So having 8 in “.net” is completely possible. To say .net core is in preview though seems like that statement is a bit dated.
Forget the code, how professional is the documentation? It should detail: - who the stakeholders are - what their requirements are - a functional solution to their requirements - a technical design that implements the functionality - a test plan that verifies the requirements - where the code is - how the system is built from the code - how the system is deployed - disaster recovery plan
Oh, it's interesting all right! :D We don't do scrum properly because we lack a dedicated scrum master (it's me right now, but I'm also a developer) and our product owner owns dozens of projects instead of a handful. Many of the duties we have belong to one of those roles. If you're interested in learning the RIGHT way to do scrum, check out the [scrum alliance](https://www.scrumalliance.org/learn-about-scrum). And [the agile alliance](https://www.agilealliance.org/agile101/) might be helpful, too.
Honestly, this stands out to me so much. I don't know why it's intriguing, perhaps because it sounds so informal. It reminds me a lot of the training that I went through for lean/six sigma and leading effective teams and meetings. I learned a lot today, but this is particularly cool! :)
Removed: Rule 4. You'll have to provide more context/code/configuration about what you have already so we can better understand your problem and offer solutions.
Removed: Plagiarism.
My first thought is "We should train someone else to do their job so we have redundancy".
I would HIGHLY recommend Clean code by Robert Cecil Martin. It covers many topics touched in other replies, it provides indepth working examples and is written clearly and directly. The amount of advice I've taken away from this book has made me a FAR better developer. It was recommended to me by a coworker from one of our overseas teams and we've made it required reading for all devs in the business now. Whether you're a new developer or a seasoned vet, there's tons to take away from this text. 10/10 the best book I've ever read on how to be a better developer, I cannot recommend it highly enough.
What about meetings?
Late to the party, but to me, this question is not so much about programming, but about adjusting to professional life. &gt;but my job is hardly fulfilling I'm not saying that you shouldn't aspire to do something great and worthwhile with your career, but most days are not going to be inspirational or momentous. Even a fulfilling job will be a grind at points. The more important thing is that your _life_ is fulfilling, and for that you're best searching for that outside of work. &gt;I got my degree because I wanted to go into process controls (PLC/DCS programming), but I haven't made it there yet. Careers are work, and it takes years to get where you want to go. A lot of people early on in their careers expect that it'll take 2-3 years to get there. Unfortunately, business doesn't move that fast, and management isn't ready to just hand out big raises and promotions and throw you the keys after a few years. Careers evolve over decades, which I know is daunting to think about. &gt;Would you say that programming for work is as fun as you thought it would be? It's work. Don't expect it to be fun. Work to put money in your pocket, a roof over your head, save a little for later, and have fun with the rest. Have fun however you like. It may be programming in the same stack you use at work. It may be programming in a completely different stack. It may be doing "programming adjacent" things like building a Raspberry Pi cluster. It might be a completely unrelated hobby like woodworking, or homebrewing, or knitting, or writing your own sci-fi comics. Balance will help you more than thinking that your job has to be fun every day. &gt;Do you have to work on stuff that's mundane and miserable? Yes, and you will too. But you know what no one tells you, this is where the real problems are solved. Some stuff can be quite menial, but other stuff that isn't super sexy is actually quite a challenge, and once you've solved it, you can make some super cool stuff happen. There's so many developers that can write hello world in 12 different languages, or can do a quick to-do app in the latest JS frameworks. Those are fairly easy mainly because they have very few requirements and a short feature list. Businesses and work have problems to solve and constraints around those problems. The best programmers I've worked with have had incredible intuition about finding the best solutions given the circumstances they have to work with. You don't learn that with Hello World, and guess what your manager values most... problem solving. &gt; a lot of people interaction, meetings, and nonsensical politics. This is life and part of what it means to contribute to a group. Some places are worse at it than others, but it will always be there. Another mistake I see a lot of programmers make is pretending that politics don't exist or deliberately choosing not to engage on that level at all. Many of these programmers are passed up for various reasons, wrong or right. At the end of the day, you need to show you bring value to the table, rather than just be a code monkey. That means interacting well with your coworkers, asking good questions, understanding the business, and realize that yes things will change. So many programmers would rather simply be told what the business wants, then go put their headphones on and crank it out.
I was the same way for awhile then I decided to stop programming what I already know at home, and go for only new stuff that seems cool to me. So my latest "projects" (quotes cause I don't expect to finish any of them unless I an use them at work, which is in the works) have been doing AR developement in various tools such as Spark AR and Unity, game development and shader programming, using three.js more to discover what all it can do in terms of interactive 3D experiences on the web (I think this is going to blow up soon), using Unity to create VR and other interactive experiences, using the Kinect for interactive experiences and for motion capture, etc. Stuff that I am super interested in keeps me going. As soon as I get bored with one, I move to the next.
I love it. It is problem solving everyday. Except now I am more in management, and while I like it in a different sense, I can't seem to ever just zone out and attack a single problem at once. I get pulled everywhere each second, so each problem gets worked on a little at a time.
Absolutely this ^^^^
There is a place for both snippets and complete libraries. Snippets are useful as quick reminders for how to use a given control or data structure: easier to copy-paste your template code, than have to Google the same question many times over (I know I'm guilty of this). If you find yourself copy-pasting the e*xact same* code many times, that's a good indication to use a function or class. When you find yourself reusing the exact same classes over and over, this might be a good time to package them into a library. As for building a library, there are many out there for game design. When starting out, I'd say to direct your energy at learning to make good use of use a well-established library. There are many out there, and a lot of thought has been put into their design. At one extreme, the library is a simple "utility," like a collection of data types or graphics functions, and you do the rest of the coding to produce the end product. At the other extreme, the library contains the entirety of your code, and needs only one command to call it. As you add more functionality to the library, there is a risk of making it less flexible. This is exactly what you'll see with game libraries out there (in any language). There are libraries for 2D, 2.5D, 3D, point-and-click, shooters, text-based, and many more. The more specialized the library, the less code you'll likely need (which should mostly be your game logic), but the more frustrating it will be to push the bounds of what the library can do.
Thank you so much, proceeding with TimeSpan
&gt;TimeSpan ts = new TimeSpan(7, 0, 0); Thank you
Awesome. Share me micro services if done, i may have one or two use of it. Are you using .Net Core?
Where I am right now we do manage some IT work, it isn't a lot, but it is enough. I had been mostly insulated from it until recently as my more senior partner took care of most of it, but he is reducing his role so I'm having to take over more of it. I am finding it very annoying. Luckily for me, I work for a consulting firm, and most of the work they do is pure development. So when my stint here is done at the end of the year I'll be requesting to be moved somewhere else.
Make `rand` a static readonly field and initialize it in a static constructor. Otherwise calling `Random()` on the same list in a loop will likely cause the same element to be returned multiple times in a row.
It's a bit different from what I thought: I thought it was 24/7 coding but it's closer to 60%. And I'm quite happy with that. I wouldn't want to be coding all the time. I've been a programmer professionally since 1997 and I've always done what people call 'horizonal career moves'. I didn't go for the money, but for fun. It's still good money, I mean I have a house and a car, but my income is above-average, definitely not 'high'. So yeah where I work I have a voice and people listen to it, which is important to me. Also no one is checking my hours or something like that, they trust me. My colleagues are smart, creative people with a sense of humour. They are friendly and people care for each other. And for the software we make.
Student of Biotech 4^(th) year, Coding since 3 years and choosing it as my profession without a degree
I don't really have much, but the core thing that irks me about other developers/programmers in my group is the lack of documentation, and things not being configurable/flexible. At some point if you leave, or someone has to work on your tooling, documentation is a must. It sucks, but if you write it as you go it's much better.
Yes unity uses c# but not everyone works as a unity game developer. So it's a niche area.
But it's incredibly hard to get a job with an unpopular language.
I was really hoping someone would get that! Thanks man
Show the code you are using to send the email message.
The error means you are unable to connect the your email server. This is normally an authentication or port issue. You should post a code example or else no one will be able to help you.
Anyone know if that's a common mail server port? If this is a home hosted mail server I bet his isp could be blocking it, no? I know most block port 25.
I'm hired as a backend dev for a large asp net project but tend to do full stack, so it is mostly C# and Typescript. Yes, I got my degree first. I'd say the company is medium sizes
Great response! One small addition: Try to use as much ms frameworks as possible (as long as they are useful). E.g. use Entity Framework for your database and as orm. Thus, you are not inventing the wheel all over again. Kind regards
You don't need to know the entire application to have 100% velocity, just a good overview, not too much technical debt and a good understanding of the current bit your working on...
That's a much more reasonable thought :)
string password = "Don't be silly, I wouldn't really do this. Look somewhere else."
Very cool
Maybe something like this would work for you? &amp;#x200B; Class Location{public List&lt;WeatherData&gt; weatherData} &amp;#x200B; Class WeatherData{DateTime date; float temperature; float precipitation; float humidity; float windSpeed; //etc} &amp;#x200B; in your main function if you have the location you can query the specific date for data. &amp;#x200B; WeatherData todaysReport = yourLocation.weatherData.Where(x =&gt; x.date.Day == currentDate.Day).FirstOrDefault(); &amp;#x200B; then you can read off todaysReport but be weary that using FirstOrDefault can return null or the first result ignoring the rest.
A few things I can just throw out there: &amp;#x200B; \- Write extensive tests for all of your code. \-Document all of your code, create and maintain UML diagrams, but most importantly write clean, self documenting code. ([https://en.wikipedia.org/wiki/Self-documenting\_code](https://en.wikipedia.org/wiki/Self-documenting_code))/SOLID. You never know when/if they will want to hire another dev; or if one day you'll quit and someone will need to take over your code-base. Write your code expecting this to happen at some point. (for the sanity of some future dev...) \-Look into, and implement transactional database code if you haven't done so already. \-Increase your knowledge on best practices when it comes to security, go over all of your code with a fine tooth comb; and ensure you apply good security at every step. (especially since this seems to contain financial information.) If you are unsure if something is secure, ask in security forums, and if all else fails; try to break your own code.
Depends what you're doing and what the product is.
I agree that "Clean Code" is a must! I would also suggest the second book in the series, for OP. It's more about good habits and attitude.
I like just finished creating an wmi app....that essentially searches for specific services running on every computer in our Network and grabs their configuration files and such(appended to the path). Now I'm wondering how much easier this would've made my life ... Granted I used that SQL like language for it. Wql?
Damnit the description alone wins.
Yeah but now I have other hobbies that have a bigger priority :/
Nice article! Can I reference it as further reading in my solid training? Kind regards
Yeah. Just moved it all up to core 2.2
To elaborate on software being a tool that enhances a business process - embrace Domain Driven Design. Sometimes, business requirements aren't really all that clear. Sometimes they change over time. That's why it's really important to separate business logic into a business layer. This helps a lot when you're a programmer with not so much knowledge in a given domain, and you're trying to incorporate some requirements a domain expert gave you. It also makes it easily testable independently of technical details of your app.
I want to capture exceptions with pidget and send them to sentry. But I cant run the code inside another mvc application. I will capture the errors of a mvc app .net 4.7.
I was a flying instructor for 11 years. I'd just got my private pilot's licence when I was made redundant, and my redundancy payment allowed me to continue my pilot training until I qualified as an instructor.
Few things.. First a crazy unrealistic one. But rewrite it from scratch! All the problems/technical debt you noticed during development and wish you could have changed but were too far down the rabbit hole change in the new release. Iv found taking the same requirements and developing the solution a few times from scratch in my personal(as I said, it’s unrealistic in work!) to be amazing at trying new things and improving my general capabilities! A more realistic one and Simone I have on the wall for all my devs is “treat logging as a first class citizen!” First thing I implement before anything is my ILogger interface. Write logs as you comment your code. It’s so handy to look over a story your user proceed through before they hit that bug! Play out different scenario in your head, anticipating what your users may ask for in 6/12/24 months time as the business changes, as you bring on more clients, as you open another site office, etc.. and then ask yourself if what your currently doing is too tightly coupled/set in stone. More of a personal one, but look at how other people do things... there is a very small amount of devs out there actually doing unique things with code, most of us are spending 60-60% of our time writing CRUD in different forms! How do other people read from SQL? How do other people take user input handle a user typing “one” instead of “1”(poor example I know!) Most of all enjoy it! Writing code is fun! Push yourself and don’t take the easy route as once you master that thing your stuck with your code will be better and you will be a better developer!
Thanks for the detailed response! Some of these I didn't really think about. Just recently we actually spun up a gitlab private server as I have convinced another guy in IT to join me in programming.its version control is super useful. Thanks so much again for this masterpiece of a response, I will have a more detailed look/research into the points I haven't came across yet.
Sorry about the late response heres the code: [https://pastebin.com/Ts2Khzei](https://pastebin.com/Ts2Khzei)
Yeah we actually made a gitlab VM on one of our hypervisors to help with this as one of my colleagues will be joining me in the coding train. Took us a few days to set it up and learn the basics of git, but it has already proven amazing, even just being able to log problems or feature requests on our own internal webpage and not on my scrappy notebook make a huge difference.
Beware of dependencies. Try to write your domain/business logic (the code that is specific to your field) so that the project it is in doesn't reference third-party libraries. Instead it should reference interfaces that define the required functionality, and orchestrate these to achieve the business intention. At runtime the root of the application can provide the implementations for these interfaces e.g. data access, configuration, logging. See also dependency injection and IOC but be aware many professional developers still think that these exist solely to facilitate unit testing. See also "ports and adapters" and "hexagonal" architectures.
Thanks for the support, a lot of great points!
I actually found yours after working on my own after a while - [WmiSharp](https://github.com/lzinga/WmiSharp) \- Mine isn't nearly as complete and has its own issues. Once I found yours a few weeks back I kind of stopped development on mine and added yours as alternatives. Most likely I will just end up deleting mine. It isn't really needed.
Will have to have a look what prism is, but this sounds super helpful. Thanks!
If you have them injected at build time it also means you need a different build for Dev, prod, test. That's a big no from me. I want the same version everywhere. Instead inject at start time, e.g. environment variables, or at runtime, e.g. configuration files.
Thanks for the great response, and shh don't tell anyone but it already has been rebuilt 2 times! Although I don't think I'm able to do it again :D
This approach also is not threadsafe. New instances of random created at (roughly) the same time will use the same seed. This is a pretty common problem (and it’s a bit tricky to solve). Each instance of Random will produce random numbers, but multiple instances could be closely correlated
Sure, if you don't have to maintain legacy software in a big cooperation ;)
Just thinking in Unity projects, you can see that is not going to happen...
To add to this. Write tests, a ton of tests. this imo really takes a project to the next level. And what peace of mind it provides when you know your changes won't break something else!
It's a multi-billion dollar niche with tens of thousands of developers.
What have you read? Patterns of Enterprise Architecture is probably worth your time. In particular read the ORM and MVC bits. Try not to reinvent the wheel. If you work through a primer on asp.net mvc and entity framework, then start from a template in visual studio, you'll be done quicker and better than if you start right now from a blank page.
Yep, agree it's not random - but depends on how often the code is run, how tight the loop is, and how random you need - a static instance of Random would likely be best here.
Ching chang walla walla bing bang.
Sure thing. It's 3 weeks worht of work though, so I'll be taking back the extra time once it's delivered.
lol
No offense, but I believe the majority of users on this subreddit is speaking English, and not mandarin.
Yes. No. "Do what you love" kills what you love.
The article can be translated to english.Original in english.
I use snippets in Resharper/Jetbrains Rider. They are then stored in your IDE and available with a macro/hotkey. For example, if I type `test` followed by a tab, it expands to a unit test stub and automatically places the cursor at the method name for me to fill in. I mostly use this for repetitive boilerplate sort of stuff.
OrderBy orders by whatever value the function returns, in this case, a new Guid. The niggle here is that new Guid creation is not truly random, and there's a chance you'll have similar Guids or potentially even a collision if you're unlucky. That said, it'll shuffle the list, then you're just returning the top of it. A better, but not-one-line approach, would be to call .Next() on a static instance of new Random(). If I were writing this for a run-once piece of code where performance is of no concern, I'd probably just throw a sleep / task.delay in there for a couple of ms and get on with my life. If it's a busy piece of code, static Random is probably as good as you're going to get in a succinct snippet. Alternatively, shuffle a list and select from its bounds, that'd certainly be more "correct", but less succinct.
My advice is to remember that we write code for humans, not machines. Code can be garbage and work, but if it won't be maintainable, that won't matter that much. Knowing that, when writing code, try to think from their person perspective, get in their shoes and write empathetic code. I love the quote "write code as if the person who takes is over is a psychopath and knows where you live".
I understand, later today I will create a project with sample code with comments explaining fully what's going on and upload it somewhere I can share it. I don't mind if it does go into production code, the only problem then is that the person who copies it has full responsibility over what happens with it. After all coding is 90% copying from github and/or stackoverflow ;) As for taking a step back, that's never truly necessary. I didn't learn to code things on a leveled basis, I had something I wanted to do so I searched and tried till I succeeded. First time I didn't really understand what I was doing but as I kept making projects I kept using different methods and tools which both gave me understanding of the methods and tools I was using but also new ones I came across. Moral of the story is don't be afraid to tackle the problem head on and push till you have succeeded. After all, you might learn other things along the way to help you in the future. Keep the beer. Instead if you find anyone in a similar situation, please help them out - to me, that's the best way you can repay me. Again, later today I will create a repo with sample code along with comments to explain what's going on and share it here. Good luck with the kiddo and else that you have going on!
Thank you very much. Of course, spread knowledge further!
While learning, it will be more beneficial to a long term career to start with ADO.Net. Using magic frameworks is great for prototyping, but hides so many assumptions inside, it can become a job in itself to troubleshoot later when one of these assumptions goes wrong. Understanding the ADO.Net API will expose the learner to the intent behind many operations built into the framework and make living with the next “hot new framework” easier and highlight the benefits of using one when the time comes. Furthermore, exceptions and their source are easier to pinpoint when you are creating each of the componenents yourself (connection, command, reader). Once the learner starts to identify boilerplate aspects of ADO.Net and begins to compose strategies to avoid copy/pasting, it’s time to shop for a framework. Then and only then will the hard lessons of abstration and modularity sink in and drive the would be code slinger to application architecture principals that will set them apart from the hordes of average line of business code monkeys and script kiddies.
&gt; Document all of your code /.../ You never know when/if they will want to hire another dev; or if one day you'll quit and someone will need to take over your code-base. Write your code expecting this to happen at some point. (for the sanity of some future dev...) Do this for your own sanity as well, because that "future dev" might actually be *you*.
More inportant than docs, which expire quickly and go unread in single man shops, is writing self-documenting code. Human readable variable/method/event names go a long way to describing intent and usage. Comments fill in the blanks on intent at the heart of the problem. Viciously eliminating code that does work, rather than commenting out or leaving dormant is essential to clarity. Taking time to think of the next dev will drive you to refactor and adjust unclear intent.
Onion Architecture is a great starting point with many examples in .Net.
Currently busy building a mood tracking mobile app. Backend is done in C# with .NET Core, frontend is done using Ionic. You can find the app [here](https://play.google.com/store/apps/details?id=io.whisperer). Would appreciate any feedback if you decide to download it.
It might be helpful to know which line throws the exception and what the exception is/says. Not everyone (myself included) has Word installed, so we can't reproduce the bug. Does it work fine if you have two different (not copy/paste) Word docs in the same folder? If you copy/paste then edit the file name and/or content does it work? The interop library is just opening Word in the background, so it shouldn't care what the content is or if they are duplicates, so I'm guessing your bug is something other than what it appears.
Or just use docker?
Either you set up a Dictionary, or use Reflection.
The scale of docker and SCAPP are really different, it would be much easier to create a SCAPP file than a docker image, SCAPP is for simple stuff, I was looking at the Mac .app file, when designing the spec, this is more for apps like Rufus and less for apps like MSSQL server
Hi sorry, i updated the main post with the exception line and the error. i also tried changing the duplicated file name and content, both did not work. same error.
Also, yes the code will work fine if you have two or more original word files, it only throw exception on copy pasted ones.
Ah don't worry I think like that too ...:-P
I in fact have made this library after writing dozens of WMI apps. I got tired of running those WQL queries again and again
Kindy, in fact. I got into it by seeing an advertisement for English teachers wanted for China. So I gave two weeks notice at work, sold all my stuff, and moved to China. That was 16 years ago. Since then I have been married and divorced, had 2 kids, bought a home. Still teaching kindy; I like it. And yes now I work on "projects" when I am home.
I've been doing it for about 40 years, but only some of that was for a living. A lot of it was just in private, for fun, while i worked in other jobs. I've done dip switches, punched cards, monitor, assembler, basic, vbasic, c, c++ c#, delphi, etc. To my surprise one guy told me I'm the oldest still-active programmer he's ever met (I'm 57.) Currently I teach kindy but at night I am working on a video game.
is it a windows form or a web application ? do you have any experience connecting to database from an application
Windows form application. I dont think I am to connect a database. Autocreate is to be hardcoded I think.
Does this count as a repost? https://old.reddit.com/r/csharp/comments/9d3usa/async_streams_in_c_8/
yes! thank you for the link.
are you saying you don't need a database for this project?
ya
Its just a small non mandatory one for college, first year.
Hello, i will unleash the down vote hell now: The question reads how to be a better programmer in an enterprise/business environment. Thus, for learning purposes ado.net fits the bill and your whole point is true but that was not the question. It is not a good habit to use ado.net in these environments (except in special cases). Imho: EF is far away from "hot new framework" and targeting for example cloud development the way to think - use existing stuff before reinventing - is an important lesson as well. This should be extended beyond MS frameworks of course. I marked them in my previous comment to give a good starting point to look into. Kind regards
oh, you can create a class staff. and a list of staffs to hold the data temporarily. all your crud(create read update delete) will be applied on the list. but if you close the application all the data will be reset, since there's no database to store the data
I built the fastest and the most efficient ORM for .NET technology. It is an ORM that helps you speedup the development and simplify the implementations. It is a worth spending time and it is quite cool to develop. I am actually eager to hear the thoughts and feedback of everyone, but seems everyone is silent on here!
Was just wondering as I read about this book popping up quite often - I recently read "Adaptive Code", is it comparable? Would it be worth reading Clean Code as well?
Ya its ok if its reset once application is closed, thanks :) I have the public staff class made. How do I make the create form?
How have you implemented the function GetUniqueFilePath? There is nothing in the other code (as far as I can see) that would explain this behavior. If you somehow return an invalid path when the original file path contains spaces or dashes (since the postfix " - copy" is added to the file when you copy/paste) then that might be the answer.
[removed]
This. Entity framework’s tracked objects are an example of proxy classes. Everything entity framework pulls back from the source used these unless you specify otherwise.
just create a new windows form, drag and drop the control you need. then double click the create button to generate a click event. where you create a new staff from the information filled out in the form and add the new staff to the list of staffs you have . something like this var newStaff = new Staff(); newStaff.firstName = txtfirstName.Text; newStaff.lastName = txtlastName.Text; staffList.add(newStaff) ;
Thanks really appreciate your help. If I wanted something like "staffId" to auto increment each time how would I do that?
I know that pain all too well :) In fact, that pain is one of the biggest reason I'd steer OP away from WCF. &amp;#x200B; Totally agree that it has it's uses and no it's not "dead" but only if your quantification of that is that there are a bunch of diehard WCF nuts out there still trying to ram it down 2019's throat :) &amp;#x200B; Jokes aside, for what OP is trying to do, aspnetcore with MVC and restful APIs feels like the right tool for the job and imo its much easier to learn.
That seems less of a falling out with programming and more about falling into new hobbies.
Got a link to those comments?
I've wanted to make exactly this for a while. Have you given any thoughts to the UI, if any? Or will the photos be viewed by something else?
https://github.com/reactiveui/refit
&gt; I built the fastest and the most efficient ORM for .NET technology. https://i.kym-cdn.com/entries/icons/original/000/023/021/e02e5ffb5f980cd8262cf7f0ae00a4a9_press-x-to-doubt-memes-memesuper-la-noire-doubt-meme_419-238.png No repo or benchmarks?
Stay-off the doubts, hopefully! RepoDb: https://github.com/mikependon/RepoDb Official Run of Frans: https://github.com/FransBouma/RawDataAccessBencher/blob/master/Results/20190307_netcore.txt
Found the solution in the meantime: [https://developercommunity.visualstudio.com/content/problem/505489/cannot-navigate-to-the-symbol-under-the-caret-3.html](https://developercommunity.visualstudio.com/content/problem/505489/cannot-navigate-to-the-symbol-under-the-caret-3.html) TLDR: 1. Right click on "References" in the Solution Explorer 2. Select "Manage NuGet Packages" 3. Under the "Installed" tab search fro "Microsoft.Net.Compilers" 4. Select "Microsoft.Net.Compilers" 5. On the side window of "Microsoft.Net.Compilers" click the update button This worked for me!
you can do that manually by getting the max ID of the latest entry , auto increment it and assign it to the new staff . var maxStaffId = staffList.Max(a =&gt; a.staffId); newStaff.Id = maxStaffId + 1 ; or you could also generate a new guid for every new user, in order to avoid doing the manual work. newStaff.Id = Guid.NewGuid();
Someone asked me this same question some time ago. I'll paste my answer below: &gt;I've been on the other side of the interview table, and I've never dismissed an applicant based on age. I did experience that most 50+ people expect way too much pay, because each of these guys usually has decent pay in their respective fields, and then expect the same pay starting out as junior devs. Just to say: temper your expectations when starting out. &gt;If you're passionate about something and have the needed skills to add AND (important) can communicate that to an employer, then I see no reason why you couldn't switch careers. &gt;You're 40 now and feeling like it's too late, but when I started learning webdev at 27 I also felt like it's too late. It's all a matter of perspective. But I can promise you that when you turn 50 and you didn't switch careers, you'll kick yourself for not starting at 40, and then you'll say "it's too late" again and then nothing ever happens. So the conclusion seems logical: learn to program right now.
GetUniqueFilePath is unrelated really, the error happens before this method is even executed. You're right!... I just removed the dash and spaces from the file name and it worked! so now my question would be how would i use this function on files that contain spaces/dashes?
It's both. My main side hobby was programming but since I started working I don't feel like programming as a hobby anymore so I replaced it with other ones
You can self study, if you do it right, in 2 years you can become a solid programmer.
Are you trying to say that you have a job interview in C#, but have really only done python before?
No ive Also done c# but i dont know what creative stuff i Can do with the .net framework
never mind that was a stupid question i'll just have a function that ignores spaces, thank you
You seem overly passionate about your indefensible position. As you stated, the question reads “how to be a better programmer”. Frameworks do not teach better programming, but understanding why they exist certainly does. In my 25 years as a self taught programmer, I have met many crutch wavers who struggle to debug performance problems in production after latching onto a framework without understanding the fundamentals. EF is a very mature framework, but still underperforms ADO.Net and promotes a host of antipatterns in the process. Most examples encourage ubiquitous use of data transport objects throughout the application and sharing a context that can lead to thread safety issues and side effects from dirty objects. Properly isolating data access becomes very challenging when you suckle the teet of “it’s easier”. Beginning with ADO.Net will build a strong foundation for strengthening the new developer and help them discover why they want/need a framework. Furthermore, if his organization is under 100 employees and they are doling out programming work to a guy with little experience, I would hardly call this enterprise development. As a hiring manager, if I see nothing but framework acronyms on a resume, it’s a hard no and meets the waste basket faster that you can spell “worthless”. An athlete does not become strong by eating fast food and watching races on TV. Likewise, a developer does not become stronger by blindly using a framework and expecting it to solve the problems. The OP would do well to incubate his fundamentals in his current protected environment, so he has the skills to get the proper title at his next gig.
Appreciate your answer. I always wanted to do programming and dabbled few times but did not continue. Now I want to and commit to it but just wanted to hear opinions from folks like you.
A literal value is something like `12` or `true` or `"foo"`: it's a raw value of its type, not assigned to a variable or resulting from some calculation. A literal expression is one that doesn't involve constructor or method calls or other non-literal values. Constants: * A `const` field or local variable must be initialized when it is declared, must be initialized to using a literal expression, and may not be assigned a new value once initialized. * A `readonly` field may not be assigned a new value once it is initialized, and must be initialized either in-place or in the type's constructor. If it is not explicitly initialized, it will be implicitly initialized to the default value of its type. Locals may not be declared `readonly`. * An `in` argument may not be reassigned or mutated within the method it is passed to (this is enforced by the compiler, and can be gotten around in particular ways). This allows a method to get the benefits of passing by reference (cf. `ref`) without having the mental overhead of wondering if it was reassigned. It's useful for large structs, and is a new-ish feature (C# 7.2). Variable: A variable is a location in memory that can hold a value. In *general* a variable is a *local* variable, while object- or class-level variables are *fields*, and *global* variables are (technically) non-existent in this language. (*Technically*. In practical use, a public, static field on public type is basically a global variable, with all the headaches that entails.) Consider running stuff like this through r/learncsharp. It's not as busy, but the people subscribed there are either learning, too, or are specifically looking to help out with questions like this.
Why are you trying to be creative? You can build pretty much any type of application with C#, so the fact that you're using C# isn't really relevant. Are you just asking us for project ideas?
Yes
A few comments: 1. I presume you're talking about people using this standard in their own code to keep things tidy on a target machine, but the fact is people already have all the tools to do this. Applications don't leave stuff behind because they can't remove them, they do so because they're lazy. 2. On OS X where you're taking inspiration from, lots of data comes out of the package because of standards the OS imposes. Some are technical requirements, others are just good practise. 3. From an abstract POV, you're talking about creating a sort of 'container' for apps to be bundled in that they can be run from... 4. In docker, you can bring an entire OS up and install a DB in less than 10 lines of configuration. That doesn't seem difficult to me at all. 5. Sure, I don't think you can do GUI apps on windows in docker (it seems you can on linux these days) so why not spin them up in a full VM? Unless there's a use case I'm missing, I just feel like you're trying to solve the wrong problem (point 1) and you've got plenty of tools available to deal with your issues right now.
Thanks for your answer quoting me incorrectly and ignoring the argument in the given context. Calling the position indefensible only to get back to your arguments that this is not the way you should learn. Ok :) If you think it is worth trashing peeps because they invested "too much time" into frameworks while hiring, ok :) Kind regards
My company used to ask people to build a leave submission application to show skill level. The application would be used by employees to submit annual leave or sick leave requests and for managers to go in and approve / reject the requests. You could build something like that in ASP.NET Core with an MSSQL backend?
Alright i've removed the spaces from path, but then file is not found??
You're welcome. Prism is, in short, a framework for enabling modular applications.
I learned some basic Python but it seems like c# is the mainstream language and has more jobs. Any suggestions?
That's ok. Non-English submissions are acceptable.
I'm going to try and keep this generic 1. Keep your code simple above all other considerations. Simple code that doesn't quite work can be made to work, simply. Complicated code that works will probably break in surprising ways at some point, and that will be your worst nightmare. 2. Code should express intentions, not mechanisms - the "what this code is for" rather than the "how it works". All kinds of IDE tools are available to help you understand the mechanisms of the code - no tool beyond the code itself will help you understand its intentions. 3. Every line of code, every if clause, every variable declaration has the potential to confuse someone reading the code, and so must justify their presence by making the code compile, by making it work or by telling the reader something they can't find out some other way.
Removed: Rule 4.
I'm 44. I am a full-time, self employed developer. I have been for almost 20 years now. Let's say 4 years will give you ample experience with specific languages and frameworks. You can be a full-time dev at my age too. Don't hesitate. Go for it.
I worked full-time while learning to program. I actually followed classes after work for 3 years. If you can, I'd recommend you follow the same route and find classes near you. They help a lot with keeping you going even when motivation temporarily drops a bit. Also, being able to ask question to a teacher / fellow students alongside a structured lesson plan will make learning a lot faster and easier. Having followed actual classes also adds to your credibility towards future employers.
FYI, here's the talk Abstract The next version of C# has been reimplemented from scratch in C#, with an open, complete, resilient and incremental language model. All IDE features are built on top of this public API and you can easily add your own – e.g. pluggable diagnostics and code fixes that fit your style and policies. The compiler is open source, and we’ve added a host of new language features. We’ll take a whirlwind tour through the layers of the new C# universe.
Often, beginning programmers don’t know how to ask the questions that will lead them to greatness. So, regardless of your interpretation of his question, I’ve provided a counterpoint to your argument as well as the reasoning behind it. By resorting to logical fallacy in your reply, I can see that perhaps you may soon have some introspection of your ways and consider for a moment that your assumption that ADO.Net has no place in the enterprise is naive (not in the derogatory sense).
That actually sounds pretty fun. Thanks for the info! It's a good reference.
While I agree with you, it must also be said that domain driven design is not the easiest nor the fastest way to write (good) software, so it's really important to do DDD only when necessary. Sometimes, it's a better decision to just go the old fashion way and revisit later
Sure. But employers that work for big companies will still consider applicants that have went to school and have years of experience. If this is something you are passionate about then age is just a number. There are so many resources online and nothing is stopping you from making your own software firm or studio. The sky is the limit and try not to let employers get to you.
Some form of documentation is necessary but I don't think it's necessary to put THAT much doc for a software. Chances are the doc will never be updated as the software evolves. If it's not updated, it does not reflect reality so it cannot be trusted. If it cannot be trusted, it is useless. I usually do the following: - user doc (how to use) : directly in the software - user doc (how to setup) : in git, readme file - tech doc : in the code Design, schema, requirements, etc are rarely updated so while they can be useful when designing a system, they kind of become irrelevant later. Unless you spent a lot of time maintaining them. But who want to spend time maintaining documentation? From my experience: nobody.
Sam here, i don't want to sit at the front of the monitor after work, just want to go out more and more.
and here i was thinking a few days ago..."why am i not looking for a c# subreddit". i join one and two days meet someone with a library to truly help what i'm working on. absolutely fascinating. &amp;#x200B; got a question for you! do you know if we can do WQL queries against azure vms? can't imagine a better person to ask, hahaha.
or...does ormi let me do this?!
Exactly! I just build a greenhouse for this exact same reason :)
And I respect that -- it seems you went after fulfillment over money, and I'd like to be able to make that choice as well because I'm currently making more than enough money with no fulfillment and it sucks. Might I ask -- did you get a degree in CS or Engineering, or did you go straight to work?
I go out with a shovel and make paths to myself near my house, to have nice walks later :) That's the best!
Awesome! There's something about working outside that just feels right, as opposed to sitting in front of a screen all day
As for learning programming you should definitely try it, enterprise level coding is no rocket science really especially if you have STEM background or are all around tech-savvy person. As for developer career you will need to be prepared to take harsh criticism from someone much younger than you.
I´ve never done WMI work against Azure VMS but I imagine that if you have visibility with the machine and all the respective permissions and ports are set and open, you could perform WMI queries. Even if that can be possible WMI isn't intended to be used over internet. If you want to use it on cloud based environment I assume you will have to run your WMI solution on the same subnet that your VM´s are running. In that scenario you will be able to use ORMi or any other WMI tool. I usually use WMI Explorer ([https://github.com/vinaypamnani/wmie2/releases](https://github.com/vinaypamnani/wmie2/releases)) to check connectivity and permissions.
Make a twitter clone.
Your not too late. Though are tons of jobs in python. I'd say more future opportunities than C#, python is the leader for AI libraries, and its in demand more outside of the enterprise area. By all means learn c#, but your rational is flawed.
I have thought about a SPA front end written in blazor which you can use to remove photos from the catalog, add additional tags to photos and various other tasks you might what todo it when organising photos and videos... Also, at present it backs up by just having my root “memorybox” directory inside of my Dropbox. Going forward I think I will spin up an additional server to be responsible for backing the photos up to the cloud... It also needs to run on a raspberry pi, so I can have a little dedicated always on machine running away sorting and backing up my photos.
Yep I was trying to make solving 1 easier so more lazy Devs can keep their apps tidy
i will remove it
Your position is totally different from the one OP is in. A lot of places would hire 44 yo with 20 years of experience, but most wouldn't hire 40 yo with no experience.
I started CS at the University, but quit after three years (having completed 2,5 of the total of 4 years worth of courses) Then, after a small break, first job as C++application programmer.
Removed: Rule 3. Try giving /r/cscareerquestions a shot; probably get better feedback there.
You'll have to ask yourself a basic question: * Is your brain still fast? Some people at 40 still have crazy fast brains. Others find that their brains have been slowing down, little by little since they were (insert young age here). Programming is (arguably) a young man's game. That said, there are a bunch of 40+yos still out there coding away, but most of them have 20+ years of experience under their belt. So while they probably don't write as much code as a 20-something, they are wiser and have more experience and generally produce better code. So in the end, they're usually just as productive. Should you learn to program at 40? Yeah, I think you should. We have a bunch of guys in the office who are seasoned IT Pros, but never managed to really write any code. Many of them are interested in learning the basics of programming. One fellow I work with (mid-40s) has never had any formal training, but he showed me a script that he was working on and it was really good. He displayed good basic programming form, skill, and understanding. So I encouraged him to keep learning and to ask me questions on how to make his code better. Will you be able to get a full-time job doing programming? That remains to be seen. I think having programming under your belt would make you a more well-rounded candidate for an IT position. Finding a full-time job might be harder given your lack of experience and age.
thank you for sharing. great job!
This is absolutely perfect for a beginner. You really nailed this and me 5 years ago would have killed to have this advise packaged so easily and friendly. I'm sure like others here, we learned this shit the hard way lol
As somebody who has never heard of anybody actually using [ADO.Net](https://ADO.Net) directly nor ever seen it on an applicant's CV I was initially curious. EF isn't great, Dapper is far better, but I'd never heard of anyone using ADO.Net &gt; As a hiring manager, if I see nothing but framework acronyms on a resume, it’s a hard no and meets the waste basket faster that you can spell “worthless”. Nevermind.
One of my pet peeves is regions around constructors... fields... properties... methods &amp;#x200B; if your class is getting large enough that you need regions to navigate it, it's too big.
If your class is getting too large... Then your class is getting too large! &amp;#x200B; Fix that instead of using regions.
What happens when someone changes the names in the database outside of the application? Things will no longer line up with the hard coded enums. Also what if you need a new status? You have to redploy code.
If you like gaming Kerbal space program allows for modding in C#. That's where I've been applying my skills.
I have had a bite experience with it but not too much I always lost motivation after a bit time But this time, I'm gonna go through It's a hate love between me and programming Back in my day I started with batch Infected our school PCs, stole wifi passwords, trolled the administrator Those were the days And I want to do csharp so badly, but it seems like I lose motivation after just a few days... But like I said, I'm gonna go through it this time, I'll take it as some kind of motivation to put the source code up on github and see what you guys think.
You know, there's so much truth to this. How could anyone tell what they were getting into before they show up on day 1? Is there any red flags that you would look out for if you were pursuing a job today?
would you be interested in knowing about a lovely c# scraper i've used before? if so, i'll try to find what it was called but...i really enjoyed using it.
If you are adding a new status, you are probably changing the code anyway.
Absolutely! That would be great. I’m working on developing my C# skills, too.
i'm writing a wpf/material design application that loops through every single network computer using inherited domain admin credentials looking for specific windows services (WMI) and allowing the modification of those services as well as documenting every instance of SQL Server along with their list of databases to be used in modifying the previously mentioned services(that have a config file attached to their path as a parameter with details such as which database/dbserver to attach to). first fully c# program (we use a proprietary language at work) for me, and i'm loving it.
Another thing that helps is the concept of table ownership. I mark some tables as being 'owned' by the code. This means no one has write access and it can only be altered by an application deployment.
Correct. But the gist was: If you would just take the coming years to gain experience, you will no doubt have a job. 4 years is more than enough to be experienced enough.
If he can get a job to get that 4 years of experience.
alright so im fairly certain it was htmlagilitypack but i just read a guide and saw that anglesharp seems to be more regularly updated and has more features so you may want to take a look at that. htmlagility took me a minute to get my bearings but once i actually understood how it worked it was a breeze. it also made me better understand html which is ironic considering i spent 10 years prior using html on a daily basis.
Yes you can, I believe on ef Homepage exist example of it as well.
Are you still using it? We are starting a new project and looking at using the beta build, but there hasn't been mutch activity since the beta5 build, it's over a year old. Somewhat concerned about using a beta product in production.
Pretty cool! I'd have gone with Vue, but i'm biased.
Is the connection string correct for both computers?
Personal project.. Building a job to scraper, for highend job sites like hackernews currently it has the following : Scrapes jobs. Tags jobs against a skill list (200+). Saves to a local light weight nosql dB. Advanced search on tags. Filters on remote/on site. Ranked results. Console pagged results. Refresh jobs.. Thinking of making it a dotnet global tool :).
&gt; If you are adding a new status, you are probably changing the code anyway. I don't agree with this at all. As someone who has tons of lookup tables for dropdowns, we frequently append new items to fit business needs and also rename items frequently. If you have a stoplight table with "Red", "Green" and "Yellow" as the values then sure, I highly doubt you will need to manipulate that table ever. You could follow the authors advice and even create a table for it and foreign keys or you could straight up save the string representation directly to the entity. I just want blog posters to tell people WHEN you should do these things in addition to how. I think thats very important for a developer to be able to decide what tool is good for the job. **In most database driven applications your data is the source of truth and mapping enums to many of the lookup tables is essentially hardcoding app data which any good developer knows never to do.** Additionally, I hate magic strings just as much, so I would love to find a solution that is best of both worlds. For example I do like the idea of locking the table as read only from /u/grauenwolf although that does clash with making my codebase really versatile with its backing data store. For example, with EF core I can target in memory, SQL Server, MySQL, Sqlite and more. Not all those are easy to add table ownership stuff out of the box.
&gt; I had been using the free Express editions but apparently 2017 was the last year that will be offered They claim VS16 Express for Windows Developers "is available", but I could not find a download link. There won't be a VS16 Express for UWP or Web development. https://visualstudio.microsoft.com/vs/express/ &gt; -Does this option include updates to VS2019? If there's a VS 2019 service pack 1, I assume I still get the update since it's still VS 2019, is that correct? Yes, updates are included. &gt; -Also, it sounds like I would need to find a different solution for version control since Azure DevOps is not included in the standalone license. Is that correct? There is a free version of Azure DevOps available. A subscription just provides you better / more services (e.g. included build time). &gt; If I'm reading that correctly I would no longer have access to host my repo on the Microsoft servers. Well, you can host on GitHub too.
Nice but there is something missing : we don't have simple list. We have to use a dictionnary. An other question is : which methods are thread safe ? Can i dico[1] = "something"; ? Is it thread safe ? Only the try methods ? And finally, why do i need to provide the old item when i want to replace it ? Do i need to read and store it before ? Btw, thanks for your articles, simple and clear :)
What are we looking at here? is that a case in a switch statement? Where is the main menu?
Yes a case in a switch statement. Main menu is above the switch
&gt; They claim VS16 Express for Windows Developers "is available", but I could not find a download link. There won't be a VS16 Express for UWP or Web development. https://visualstudio.microsoft.com/vs/express/ Haha well i stand corrected then. I swear they had the same note about 2017 being the last of the Express editions 2 years ago though. &gt;There is a free version of Azure DevOps available. A subscription just provides you better / more services (e.g. included build time). According to this page - (https://visualstudio.microsoft.com/vs/pricing-details/) it says the basic features of Azure DevOps are "not included" with a standalone license. It sounds to me like that means the free version isn't included either, no?
&gt; it says the basic features of Azure DevOps are "not included" with a standalone license. It sounds to me like that means there is no free version included, no? There's a free version of Azure DevOps itself available: https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/
 An entire day in my calendar filled up with meetings, wtf.
Let's call this the reddit version of a subtweet, but my comment history will provide hints.
Post all of it.
Irreplaceable is the quickest way to end up in mandatory pairing sessions.
The do while loop is a bit confusing. If you put in anything but y, it'll loop back to whether they want to save or not. I think it should be: string Save = Console.ReadLine().ToLower(); // Invalid input. Loop until they get it right while (Save.ToLower()!="y" &amp;&amp; Save.ToLower() != "n") { Console.WriteLine("Svara y/n !"); Save = Console.ReadLine().ToLower(); } // Valid input, Is it y or n? if (Save.ToLower() == "y") { TheLogBook.Add(LogEntry); Console.WriteLine("\n\nDitt in lägg har blivit sparat!"); } else { Console.WriteLine("They input n"); } Console.Clear(); break;
Gists, ReSharper snippets, and open source libraries for the generalisable things.
Haha yes I see what you mean now. I've been there - occasionally this sub seems to get trolls, arguing with them is impossible. I think the worst I've head (not on reddit but a discord server) is that "assemblies and namespaces and dll's dont exist". I pretty much gave up at that point.
Kinda feel like it's the responsibility of people with knowledge to share it - and to try and be kind about it. But sometimes. Nah. I give up ;)
OMG thanks.
The msdn/microsoft docs has info on what methods and types are threadsafe or not. When in doubt, just check there
You should use the entities generated by EF as your domain entities, and consider creating flattened DTOs (data transfer objects) when dealing with your views for both inputs and outputs (AutoMapper helps a lot here, but be careful how to use it, Jimmy Bogard has a blog about design considerations for it) If your app is CRUD-y by nature then those DTO classes will be very similar to the ones EF generated for you, otherwise if your app had a certain degree of complexity to it then I suggest to have a look at DDD (Domain Driven Design). Hope this helps!
I had to do this for my job, so do it yourself too I suppose. It's pretty easy and gives you room to prove yourself in a few areas. Make a media organiser app with a windows forms frontend and an MSSQL backend, that keeps track of albums and games, and qualities about them (publisher, artist, developer, year of publisher). Make a working search in C# (filter the names or something), and get the data from the database using stored procedures. Keep it fairly simple, but make the front end pretty if you can. They will probably judge you on how pretty the code is, so follow this [this](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions) quite closely. Make sure the SQL code is also pretty (remember good capitalisation). It looks a lot more professional. &amp;#x200B; One thing: Please work on your grammar, make sure any written communication is to a good standard since the person judging may put a lot of value into it.
2015? So the "present", not the future :-). Roslyn, yes?
&gt; Nice but there is something missing : we don’t have simple list. We have to use a dictionnary. The article does mention `ConcurrentDictionary`. &gt; which methods are thread safe ? Can i dico[1] = “something”; ? Is it thread safe ? Only the try methods ? Yes, the indexer is thread-safe. &gt; And finally, why do i need to provide the old item when i want to replace it ? You don’t (see above). `TryUpdate` is an *atomic* thread-safe way of saying “change it to y if it’s currently x; otherwise, do nothing”. &gt; Do i need to read and store it before ? No. That’s kind of the point. Imagine doing: if (dict[key] == oldValue) dict[key] = newValue; This requires a read and a write, and isn’t atomic (and therefore not thread-safe): the value could change between having read it and having set it.
Removed: Spam.
To be clear, this is about the move to Roslyn in VS 2015, *not* about C# 8 or beyond.
&gt; Well we say an operation is atomic when it completes within a single step without being interrupted. Only atomic operations are thread-safe. Code inside a locking block is by definition atomic. I have issues with these statements. I agree with your definition of atomic, and it is true that atomic operations are thread safe. The problem is code inside a `lock` statement is not atomic but can be used to create thread safe code. Code inside a `lock` statement is not atomic because it can be interrupted by code not inside a `lock` statement, or by code locking on a different object. Code in a `lock` statement becomes thread safe if you guarantee all access to the shared memory/object first locks on the lock object. There are also other ways to achieve thread safety. `lock` uses [Monitor](https://docs.microsoft.com/en-us/dotnet/api/system.threading.monitor?view=netframework-4.7.2) behind the scenes, but there are also things like [SemaphoreSlim](https://docs.microsoft.com/en-us/dotnet/api/system.threading.semaphoreslim?view=netframework-4.7.2) and [Interlocked.CompareExchange](https://docs.microsoft.com/en-us/dotnet/api/system.threading.interlocked.compareexchange?view=netframework-4.7.2) that can be used to create thread safe code. While thread safe operations will require atomic operations to create the thread safe boundaries, they do not need to be atomic themselves.
Are you sure it doesn't work under the compatibility shim? It looks like just string manipulation so even though it may not target .net core, I'd be surprised if it didn't work.
That's sweet! Good job! :) I love creating little tools like this to accomplish mundane things, it's always a lot of fun until it turns into a much bigger project.
I think what op was getting at is there’s no concurrent list type, for som reason. A dictionary works as a workaround but you’re wasting space having to store a value you’ll never use.
I have the Surface Pro 6. I use it when I'm out and about, and it works quite well. Instead of paying for the LTE, I tether it to my phone. It's a lot faster than I thought it would be. Not as fast as a home PC, but definitely fast enough for work. I'd say the laptop is 75-80% as fast as my i7-9300k/16GB Ram/240GB SSD home PC.
I wasn't able to get any work for the first couple of years. Keep a job and study programming on the side. switch jobs when a good opportunity comes around.
Work gave me a Surface Laptop recently, not a pro, but damn, that keyboard is sick!
I decided against the Surface because of the lack of a USB-C connection. You should be sure that you're not lying to yourself. It's often easy to fall for the trap to think "if only I got this fancy new device, then I surely will make use of it at situation xyz".
Did you do any research? [Google Cloud Natural Language](https://cloud.google.com/natural-language/) [Microsoft Cognitive Services](https://azure.microsoft.com/en-ca/services/cognitive-services/text-analytics/) There's more, but I suggest you do some research yourself too: &gt; **4.Request-for-help posts should be made with effort** &gt; &gt;Make sure any code is properly formatted, **explain what you have tried**, and where applicable try to create a [Minimal, Complete, and Verifiable Example](http://stackoverflow.com/help/mcve). Be clear and courteous. **If a question that could have been easily Googled is asked without indicating what and why those typical results didn't work, it will be removed**. Help posts that have had little effort put into them will be removed at the discretion of the moderators.
Well, use base interface allow you to invert dependencies. For example you need fake object for test your component , then you create another object that implements your interface with a custom behavior. In your example there is no difference because your attribute theorically will not be exposed.
Thank you so much in advance. If at all possible, could you pull my existing repo and modify that to work? It would help immensely to see my existing code modified with the pieces I need to make it work. That way, the next time I try something like this, I can take an appropriate approach and have all the pieces in mind. I've since changed my repo to have the autoflush, and included a new spot to pull the IP address, but as soon as I see an example how to send a message over all threads/connections via an event trigger, I will be SO HAPPY OMG! And don't worry, I love helping people with code or logic. It's really an awesome feeling to help someone understand something so they can get on with their project. Especially in regards to games :)
An interface is a contract. The most common thing I use it for is implementing test data during debug mode, and production data during release mode. &amp;#x200B; public interface IDataService { List&lt;string&gt; GetData(string user); void UploadData(int data); } Then I have two separate classes that inherit the IDataService. First is the production one public DataService : IDataService { List&lt;string&gt; GetData(string user) { // Call SQL Server here } void UploadData(int data) { // Call SQL Server here } } When it's in debug mode, I don't want the program to use our production data, so I create a different class public DesignDataService : IDataService { List&lt;string&gt; GetData(string user) { return new List&lt;string&gt;({"Test 1", "Test 2", "Test 3"}); } void UploadData(int data) { return; } } Whenever I initiate the class, I can use compiler directives, like so IDataService dataService; #if DEBUG dataService = new DataService(); #else dataService = new DesignDataService(); #endif This is just one example, but one I use often. Interfaces allow for flexibility in how you implement other parts of your project. It also allows for easier collaboration. Let's say your co-worker Bob is working on the DataService. The problem is, you need to know how that DataService is going to be implemented because you're working on the part of the program that will display the data. Instead of waiting for Bob to finish, you and Bob can spend some time hashing out an interface. Once you both agree on an interface, you can immediately begin work again because you know what functions are going to be available. You won't have to wait for Bob to finish the whole DataService.
Treat enum as what they are? String representations of int/byte. Store them as int/byte.
&gt; I think what op was getting at is there’s no concurrent list type, for som reason. I read the quote exactly vice versa for some reason. I’m guessing `ConcurrentList` doesn’t exist because the one thing `ConcurrentBag` doesn’t have that it would have, namely indexed ordered access, cannot be done in a concurrent manner. What does `list[3]` or `list.RemoveAt(5)` *mean* when another thread could be adding or removing items before those indexes? At the end, you’d just be reinventing a lock.
Cheers mate. Thanks. Yeah your right, it was fun to create this and I've actually been using it which is a bonus!
I didn't realize they were already up to pro 6. I see some pro 3's around. 4Gb seems a bit low though.
Space Engineers uses C# for in-game scripts. Not as involved as a Kerbal mod, but still C# at least. Cities:Skylines also uses C# for modding and is a very mature game with tons of mods that you can use as references.
i don't have any USB c at home. Is there a specific device that uses USB c that is a deal breaker for you. I completely know I could be lying to myself...but could always re-sell if i never use it
laptops just end up feeling a bit too clunky these days. I know its hard to pack everything into a tablet size. Granted I haven't actually picked / held / seen a surface laptop before
&gt; I don't agree with this at all. As someone who has tons of lookup tables for dropdowns, we frequently append new items, and rename items to fit business needs. Are they new status codes that the code needs to be aware of? Or are they merely informative to the user and the code blindly passes it along? In the first case, the values are being checked in the code and drive if/switch statements. So enums are preferable to raw integers. In the latter case, we wouldn't ever actually use the enums so it wouldn't matter if they were in sync. So yea, they should not exist in the first place. *** Now personally I try to use table-driven logic to push as much as possible into the second case. But that's not always an option.
I went for the 16GB one. 4 is definitely low for Visual Studio. 8 is the absolute minimum I would go.
&gt; I want blog posters to tell people when you should do these things in addition to how. I think that is very important for a developer to be able to decide what tool is good for the job. Yes please. Over the years I've grown increasingly annoyed by the emphasis on how without discussing when and when not.
I almost bought a surface last month, but decided to go with a new laptop instead. You can get a laptop with comparable or better specs than the surface for less money. &amp;#x200B; Just for reference, I bought a Dell G5 gaming PC from walmart.com It was listed for $1100 in store, but $799 online. Also, just checked and it still is. It's bigger and a little less convenient than the Surface would have been, but I'm ok with that. &amp;#x200B; If you want the convenience of the Surface, though, I'd go for it. I spent a lot of time looking for the very same reason you are and it tends to get positive reviews for that type of use.
It's largely because lists are iterated over. If you don't need iteration then a list probably isn't the type you need anyway. &amp;#x200B; enumerators can be thread save, but you have to lock the entire entity to make it so, which is expensive. You can iterate over the enties in a concurrentDictionary, but this operation is not thread safe.
&gt; For example I do like the idea of locking the table as read only from /u/grauenwolf although that does clash with making my code-base really versatile with its backing data store. There is no real DB solution, even if you restrict rights. The only way I make it work at all is cultural. And by cultural I mean I act as a downright bastard. Every deployment automatically erases any rows not in source control and resets the rest to match what the code wants. I don't even warn people more than once or twice, I just do it. After the 12th time I have overriden someone's changes they usually get the hint.
Work gave me a surface pro 6 when I started. I've liked how light and portable it is. It's definitely powerful enough for development. My biggest complaint if I had bought it myself would definitely be the ports, but work got the dock and that has enough ports for me.
They might be more interested in how you do it, than what you do. My advice would be that whatever you do: * Show some project structure knowledge by creating a solution consisting of multiple projects and at least one class library * Write unit tests * Use dependency injection (with something like Autofac) * Use Entity Framework (I have mixed feelings about EF, but nobody can deny its popularity) * Use a logging framework like NLog * If this project will have a UI, consider exposing data to the UI via a REST service * Demonstrate knowledge of OpenID Connect/OAuth 2.0/JWTs by securing your app with something like Identity Server [https://identityserver.io/](https://identityserver.io/) * Follow the C# style guide * Demonstrate good error handling and input validation
Multithreading means you can't guarantee ordering anyways. You're best bet if ConcurrentBag is not good enough is to do a ConcurrentBag&lt;DesiredType, DateTimeOffset&gt; then when iterating, add an OrderBy on the datetime.
I use Surface Pro 3 i7/8Gb for some coding - quite acceptable experience (good enough, but at times it lacks another 4-8Gb RAM). I do VSCode + React-native with Android emulator, or ASP.NET Core with some Docker.
One thing that bugs me and isn't at all obvious is how ConcurrentDictionary.AddOrUpdate can actually run the add/update Funcs but not use their value. This means that you have to be aware of side effects (and avoid them) if you use a few of ConcurrentDictionary's methods.
Python is absolutely massive too and that’s not C-like. Unless you consider “has an if statement” to be enough I guess.
I've had a few Surface products over the years. I have some serious reservations about them. &amp;#x200B; The worst are the ones that have a kickstand. It suddenly becomes a bitch to use on a train, plane or automobile because it needs twice the depth of a laptop to maintain stability. I found that a pita. Even things like using it in bed or one the sofa were annoying. The fabric keyboard is surprisingly good, but it's no where near as rigid as a normal keyboard. The original ones also had a stupid wide screen design which made them awkward to hold because of the long limb-ness of it. The square ones were better, but the tablet support in Windows was dire back then. &amp;#x200B; The SurfaceBook is clever, but also a pita. I had lots of technical issues with mine, great things like it refused to work with my Microsoft mouse intermittently. The build quality is excellent, but the tablet mode was pointless for me. It's too heavy for a tablet, and awkward to hold. At some point it's going on the floor. Overall the weight was more than I expected. I had the top spec model with nvidia card. The performance felt poor, and I think that was because it always seemed bogged down by IO. The pen is annoying. There's no storage slot, so it sits on the side using magnets. This is why pens go missing a lot. The pen performance was quite good, but the glass is a bit thick, so you're offset, and there was lag. &amp;#x200B; They're all well build, but the designs seemed driven by Microsoft's historical desire to make a better iPad.
Write something that fits in with what the company does or has some relevance to their mission. It’ll make it instantly relatable to them.
Take one of your Python projects and rewrite it in C#.
I have the surface pro 3 i7, and I gotta say it's perfect for the job. How thin it is makes it sooo much convenient to carry around without having to open up a laptop every time. I'm pretty satisfied with it only for work tho.
I'm a student, I have a surface pro (2?) and a thinkpad t440 (w/ Debian) I personally haven't touched my surface in about 4mo. Then again, take that with a grain, as most of the code I write is gnu c/cpp
A lot of android phones are usb-c
Maybe a website is a bit much for a starter project if you lose motivation after a few days. It's a big stack of technologies, none of which make a lot of sense in isolation. You'll need to learn about asp.net core, ef core (or whatever you want to use for your data layer), async, dependency injection, cshtml... And if you want a native gui program you'll need wpf/xaml (or something equivalent, but this is what I'd recommend for c#). Each one of these frameworks/patterns can take a couple of weeks until you start getting productive in them. Unless you are some sort of genius, in which case it would probably be more fun for you to do everything from scratch anyway - but it would still take more than a few days probably.
I’d like a post on how the concurrent collections work
On a side note, it may be time to start rethinking your database naming scheme. Starting with a prefix like 't' our 'tbl' is generally considered bad form these days. Obviously, you should design and write how you want to. I'm just throwing this out there.
I have a Surface Pro 4. Before that I had a Surface Pro 2. I've used both to program when I'm at the airport and at other times where I have to wait like at the dealer service department.
Well, that's motivating Well my next project wouldve been a wpf that's able to connect and maintain connection to a website and maneuver through it just with packages I guess I'll start with that?
I hate my laptop. I like large keyboards and big screens long with a desk or a table (which I stand). I don't think it'd help. Maybe a physical notebook where you can sketch out designs would be more useful?
Yea I'd agree. I suppose it's a bit of a mental shift. You can't just slap Concurrent on the front of the usual collections!
Why is it considered bad form?
Removed: Spam. Please review and follow the [Guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion)
Interfaces is a nice way to share API without implementing any logic. Let's say your class logs everything it's doing - you could use an ILogger interface: `public ILogger Logger { get; set; };` And use it in everywhere in your code like `Logger.Log(message);` Then you can use maybe a logger that writes to the console, or swap out for someone else's logger that does something different, without having to re-write all the code that uses the logger.
i'll be honest, i've never written a extensive c# tests unless i'm mistaken on what people actually consider testing. i've just written code and documented it very well and ran my program along the way to make sure things work/make changes as needed. granted every c# project i've worked on(except one) is a webservice that hooks in to our ERP and i maintain business logic and test there. what resource do you suggest i read if i wanted to learn how to create extensive tests? a lot of time when people mention things like "testing framework" the only thing i think of is that it's a buzzword for "test this function with some random hardcoded strings/ints/etc. to make sure it works before moving on to creating parameters and such". is that what people typically mean by testing? take for example `public static List&lt;Person&gt; ReturnPeople(string nameFilter,string phoneFilter)` when you say test extensively do you mean that for each function like above, i should try it hardcoded first? the reason i ask is because any time i download a well planned github demo(such as WPF material Design) they always have a section entirely dedicated to tests. is it nothing more than a hardcoded version of the real program?
My apologies - offering that advice with no backup. :) Here are two articles that discuss naming: [https://www.vertabelo.com/blog/technical-articles/an-unemotional-logical-look-at-sql-server-naming-conventions](https://www.vertabelo.com/blog/technical-articles/an-unemotional-logical-look-at-sql-server-naming-conventions) [https://www.red-gate.com/simple-talk/blogs/sql-naming-conventions/](https://www.red-gate.com/simple-talk/blogs/sql-naming-conventions/) Additionally, When using EF with database first all the generated entity class names will have the same prefix, which doesn't make sense for a class. When using EF with code first, the table names are generated without prefixes. You can specify to add a prefix automatically, but generally is not needed. Table names should describe the information contained within the table. The name does not need to indicate what type of database object it is. It isn't necessary to know what type of object it is to use it. Usually. Hope that explains my suggestion adequately. :)
\+1 to all of this, especially version control. i come from a system that has no such thing and as a result we sometimes have up to 5 20gb+ SQL databases saved just to make sure we didn't lose any code when importing things in to production
I didn't read "Adaptive Code", so I can't compare them. "Clean code" is full of great advice on how you should write and format your code. It tries to make you understand why with examples or stories from the author's experience. &amp;#x200B; As a general idea: [http://catdir.loc.gov/catdir/toc/ecip0820/2008024750.html](http://catdir.loc.gov/catdir/toc/ecip0820/2008024750.html)
Maybe do some simple project without a connection first? Maybe something calling some public API... Like a very simple reddit app. Then for your next project you could make a simple server with a rest API (visual studio has templates for that), and then another wpf project that connects to that. I think if you schedule a week for each project (evenings and weekends), that could work!
Same as in .NET. Look up cultures.
 [https://www.w3schools.com/xml/xml\_whatis.asp](https://www.w3schools.com/xml/xml_whatis.asp) [https://docs.microsoft.com/en-us/dotnet/standard/data/xml/](https://docs.microsoft.com/en-us/dotnet/standard/data/xml/) &amp;#x200B; As for .NET, while the `System.Xml` API is easy enough use, and worthwhile to learn, once you get the gist of it I'd recommend you put more effort into LINQ to XML, in the `System.Xml.Linq` namespace.
Thanks! Im glad you like it.
Here is a [detailed explanation](https://visualstudio.microsoft.com/vs/pricing-details/) of what you get with each subscription. Of particular note is the "Cloud vs Standard subscriptions" tab. Even if you simply use Community Edition, which is [available for download](https://visualstudio.microsoft.com/downloads/), you can still use Azure DevOps cloud services for source control. If you are using Visual Studio for your own company, you don't need to purchase a Pro or Enterprise license until you are making over $1 million a year.
I use a Surface Pro 2017 for work. Mostly Python and C# development in Visual Studio. Works fine. Indistinguishable from a laptop.
Thanks for the suggestion, I'll look into it 😊
I'm speaking over server to .net application/server, not server to browser.
Right, but the company i work for is not eligible to use the Community Edition because we are in the enterprise category. I'm not really interested in the "Standard subscription" since it seems to include a bunch of extra features that I don't need and I'm trying to keep costs down as much as possible, which lead me to looking at the standalone license option.
I find my surface pro 4 to be serviceable when out of the office however the screen is a bit small and makes all day use for extended periods of time tiring.
Seems like that is the best option for you, from what I can tell. You can still use the cloud Azure DevOps for source control, or you can use any internally hosted system as well. Good luck!
[C# GameDev Tutorials ](https://www.youtube.com/c/dilmervalecillos)
Are you telling me that buying a new bass won't motivate me to practice more often?!?!?!?
Isn’t the shader written in C, not C#?
&gt; Encoding.GetEncoding("windows-1251") Thanks a ton. It works. But is there a way to know when to use UTF8 and when to use Windows-1251? as languages like arabic doesn't look right with windows -1251 but Russian works with it.
The shader is written in C but the implementation to get the audio data is in C#, also the high definition rendering pipeline which this is using is written in C# as shown here https://github.com/Unity-Technologies/ScriptableRenderPipeline
That makes sense, thx!
It’s crazy to me how many articles like this push out example code that isn’t valid or thought out. The example code creates a non-generic container, and then calls a non-generic “Create” method with no arguments. I’m assuming the parameterless Create is supposed to be generic, and its caller is also supposed to be specifying a generic type? The frustrating html encoding of angled brackets aside, the container class used as an example won’t even compile in its current form, and neither would the example calling code, even if the container class was fixed.
&gt; When you set their values to use the class/interface The **value** will always be of a specific **class**, not the interface. For example: public interface IAnimal { public void MakeSound(); } public class Dog : IAnimal { public void MakeSound() { Console.WriteLine("Woof!"); } } public static void Main(string[] args) { IAnimal animal = new Dog(); Console.WriteLine(animal.GetType()) // the type is Dog } Now, what happens when the class "Dog" has some dog-specific functionality, that **isn't** defined in the IAnimal interface: public class Dog : IAnimal { public void MakeSound() { Console.WriteLine("Woof!"); } public void WaitForOwner() { { Console.WriteLine("Waiting for my owner..."); } } public static void Main(string[] args) { IAnimal animal = new Dog(); animal.WaitForOwner(); // compile-time error! This method isn't defined on the interface, and // therefore isn't accessible! Dog husky = new Dog(); husky.WaitForOwner() // output: Waiting for my owner... } As you can see, you can't call the Dog-specific functionality when the variable is defined as an IAnimal. That's 1 of the differences. &amp;#x200B; Another difference is that, by using the interface in defining your variable, you allow it to be set to any kind of IAnimal, not only Dog! &amp;#x200B; Let's expand on the previous example by adding a Cat class: public class Cat : IAnimal { public void MakeSound() { Console.WriteLine("Meow!"); } public void PlayWithSocks() { Console.WriteLine("Playing with owner's socks..."); } } Now, you can put either a Cat or a Dog in the IAnimal interface. public static void Main(string[] args) { IAnimal animal = new Dog(); animal.MakeSound(); // output: Woof! animal = new Cat(); animal.MakeSound(); // output: Meow! } You can also call Dog or Cat specific functionality, if you cast the object to its specific class: public static void Main(string[] args) { IAnimal animal = new Dog(); animal.WaitForOwner(); // ERROR! if (animal is Dog myDog) { myDog.WaitForOwner(); // output: Waiting for my owner... } } Hope this helps.
I agree there are still side effects people are unaware of. However, ConcurrentDictionary.ToArray() can be used. It's useful when using with linq. Eg var item = ConcurrentDictionary.ToArray().Where(x =&gt; x.Value.SomeProperty == someVal).Select(x =&gt; x.Value).ToList()
Oh no please don´t do it.
After you digged into some XmlReader and XmlWriter documentation and tutorials I‘d recommend to also have a look into XPath for querying XDocuments. You can however also consider to map into your own domainspace via XmlSerializer/DataContractSerializer and work on your own objects in C#.
Good work, but id suggest being a little more humble when showing off work
I have one with 4gb. Can confirm it’s not enough for VS (but that doesn’t stop me from trying)
My Surface4 served me well the last... 2 years? I love the form factor, but the detachable keyboard has caused me problems.
Oh i highly disagree on the kickstand. that's been a lifesaver. on the train or bus? kick stand against my leg or knee or even higher pushed against the back of the seat in front of me. in bed? raise my knees and set the kickstand back and up higher to prop against my legs to keep the screen at the angle I want. I love the kickstand. i'd hate a standard laptop because it couldn't work for all the ways I can angle the pro 6 now. But to each their own.
The device is, but that doesn’t mean you need a cable with only usb-c connectors
I have yet to see a consumer device that actually plugs into a USB-C slot. I know they exist, but I’ve never seen anyone use one
The difference is that the IClass1 version could be of a type of any class that implements IClass1. And the Class1 version can only be a type that is or inherits from Class1 specifically. Also note that since you didn’t share the source code, it’s possible that IClass1 actually has less members defined than Class1. In that case, you could use IClass1 to kind of hide those extra Class1 members from scope, assuming that the only members you care about in this context are those of IClass1. And vice versa. You’re basically outlining specificity of what types of objects you’ll allow through at compile time by changing that type.
I'm talking specifically about the remarks in AddOrUpdate and GetOrAdd, &gt;If you call AddOrUpdate simultaneously on different threads, addValueFactory may be called multiple times, but its key/value pair might not be added to the dictionary for every call. &amp;#x200B; &gt;Since a key/value can be inserted by another thread while valueFactory is generating a value, you cannot trust that just because valueFactory executed, its produced value will be inserted into the dictionary and returned. If you call GetOrAdd simultaneously on different threads, valueFactory may be called multiple times, but only one key/value pair will be added to the dictionary. &amp;#x200B; [https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2.getoradd?view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2.getoradd?view=netframework-4.7.2) [https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2.getoradd?view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2.getoradd?view=netframework-4.7.2) &amp;#x200B; Basically, the value factory (lambda) you provide can theoretically be called a 1000 times by a 1000 separate threads with only one of the values being used, so any closures/global variables captured by the lambda may cause unexpected side effects.
I use Surface Pro 4 while travelling. VS 2019 works ok. For code review, quick fix and push it's great. It's biggest value is touch&amp;pen for discussion, brainstorming, sketching and studio mode for app demos. It's also great when we demo an app to the customer and they say "let's change that layout" Single press on the pen and we sketch on a screenshot immediately. However at the desk there are 24" 16:10 monitors plus some portrait oriented displays and full keyboard. If you have enough RAM and SSD at home, fire up VM (Hyper-V strongly recommended) with dev environment to avoid mixing business and private. Easy to backup and move to other machine at will.
This isn’t a good answer because you can do the same thing with a virtual or abstract class.
Regex probably isn't what you're looking for. I'd find the last index value of '_' in your string, then use that value to split it.
Nice to know that you use it incredibly.
My phone is charged via USB-C. And for my work I got docking station. I have two displays and power connected to that docking station. When I arrive at work I just connect a single USB-C cable, and I have two screens and power for my notebook. That's comfort.
And most probably stick to InvariantCulture. I wonder if it would‘ve been less pitfall-ish if default would‘ve been InvariantCulture instead of SystemCulture.
 Console.ForegroundColor = ConsoleColor.Yellow; Console.WriteLine(msg); Console.ResetColor(); This will print a message in Yellow. The ConsoleColor is an enum and has other colors as well.
I'm not sure if this is homework or not, but this should get you started: "(.\*)\_(\\d+)"
Listen to the other guy because it really looks like a string split but if it has to be regex: `^(.+)\_(\d+)$` And then check first group for the string and second for the int. You still need to parse the int though.
I've built a huge single page application framework (SPA) using [Bridge.NET](https://Bridge.NET), and I can safely say that [Bridge.NET](https://Bridge.NET) is awesome and rock solid. They've invested about 5 years of development time and included similar transpiler technology that they acquired. Microsoft was stupid not to just buy [Bridge.NET](https://Bridge.NET) and go with that. Here are my arguments why the other mentioned options are inferior to Bridge.NET: * [Bridge.NET](https://Bridge.NET) is here, it's real, and it has been proven in production use in probably thousands of projects. Where does Blazor stand in this respect? &lt;cough&gt; * Blazor is "lipstick on a pig" that is built on Mono for WASM. Neither the Mono framework nor WASM are under Microsoft's control. So what will Microsoft do if Mono or WASM are not headed in the desired direction? What if the long-awaited garbage collection for WASM never arrives? Or what if DOM interop for WASM will always stay as crappy as it is today (since WASM was never meant to do DOM operations) * Blazor assumes that every C# developer likes and wants the Razor syntax, which basically destroys HTML5 compliance of the markup (therefore also destroying any editing capability with such editor, especially WYSIWYG editors like Pinegrow). Well, the vast majority of frameworks go another direction, like vue.js and angular which mostly work through compliant html attributes and tags; no need to reinvent the wheel. So while Razor syntax is acceptable on the server-side (like PHP is), I don't think the community will like it as a client-side language. [Bridge.NET](https://Bridge.NET) on the other hand is much more open and flexible. It doesn't force you to choose any specific binding / UI framework; instead, it opens up the entire JS world to the C# developer, except strongly typed. * chucker23n mentioned the leaky abstraction problem. I absolutely agree, but then what about TypeScript? It basically does the same thing as [Bridge.NET](https://Bridge.NET), except that they had to invent a new syntax never seen anywhere before - for what ever reason. But again, everyone jumps at Typescript, while [Bridge.NET](https://Bridge.NET) is not accepted. Strange world. When considering the fundamental problem that JS is - well - a not-so-clean and consistent language, then I would say that [Bridge.NET](https://Bridge.NET) is still far superior despite the leaky abstraction. Of course you need to know some JS to get along with Bridge. But trust me, once you've had LINQ or async/await patterns in JS, you will not care about leaky abstraction any more ;-) * [Bridge.NET](https://Bridge.NET) is blazingly fast (pun intended). We use it in production for quite large SPA projects, and there's absolutely no noticable difference between native JS and transpiled C# code. I've tested Blazor projects, and they are... well... not so fast. * Javascript is supported by billions of devices/browsers worldwide, and bridge will basically run on all of them without any problems. WASM on the other hand... yes, I know, there are some dirty libs that will enulate WASM on JS.. but seriously guys... is that the direction we're heading here in the 21st??? &amp;#x200B; So to answer your quesiton SubujectMorning8: I think the only reason Bridge has not been adopted by the community is the lack of money and the lack of "wanting to understand what it's good for". Remember, it's not always the best who wins, but rather the one with the most ressources at their disposal, like M$.
Could you do this in two separate regex? :)
I have a very expensive Surface Book as my work computer. 16 GB Ram, Intel i7, 2.60HHz. Plenty of power to program anything I've needed. That said, it was a stupid buy on the part of my employer. You pay for features you really never need or use. I tried to use it in tablet mode. There's almost nothing useful that you can do with it in tablet mode. It frequently screws up the display when I try to re-dock the thing. It comes with a stylus pen. I'm sure that the pen is in my laptop bag, somewhere. No one in my whole department knows where their pen is. It's totally useless. It only has 2 USB port. Mini-DP, and that's it. The dock that's built for it is a POS. None of the ones in our office lasted 6 months. Either you moved to a third party dock, or you just kept getting replacements. Oh, and be very careful buying replacements from [Amazon.com](https://Amazon.com). Most are cheap Chinese knockoffs which is important because . . . Every single Surface Book purchased for my department (10+) has been replaced within 2 years of purchase due to swelling batteries. The few of us that bought extra power supplies (so we could have one at home, one at work) had our computers die faster, due to the fact that you can't tell if you've bought an real MS power supply or not. If I had it to do all over again (and I probably will within the next couple years when the batteries swell again) I'll ask my employer to replace it with a gaming computer from Cyberpower or even Alienware. It's less sexy and less compact, for sure, but it will be beefier and more robust. I'm not a laptop fashionista.
Some may nice projects! I'm developing a Product Configurator / Product Catalog for CNC machines. It should work as a framwork where different machine tool builder can configure their machines and give each individual component logic via rules. &amp;#x200B; First step is to create it as a C#, WPF, MVVM app. Afterwards let's see
Programming starts fun, and has two real buzzkills: - things very often don't work as advertised - working for boneheads is more the rule than the exception There's a challenge point, which is not a buzz kill, but an ego challenge which is things often are more complicated than expected. This is different than not working as advertised, because that's in the lie category and this is in the wisdom category Overcome these things for a joyous programming career:)
You posted this twice, the original is [here](https://old.reddit.com/r/csharp/comments/bbazg3/flurl_30_planning/).
What do you mean?
Yeap, you can use polymorphism to invert dependences, the question was about interfaces. In that example there is no difference between use base interface or any implementation because the member is private. If you want to override a virtual method, use inheritance with abstracts classes or implementation inheritance with interfaces, Then you must validate all the pros and cons of each case
as someone new to the cloud world this has been driving me mad. at least with desktop app you can look at the source code to figure out what is really going on and what options you have.
I feel ya there. Life responsibilities always come first. What I'm suggesting is something I often tell people wanting to make video games, but have no idea where to start and do not already work for or are friends/family with someone who does work for a game studio - figure out something really really small to work on, and then carve out some time on a weekend to work on that strictly for fun. Even that is hard. Motivation is crucial and that can easily get sapped away by little frictions, but especially by anxiety from either feeling too isolated or too overwhelmed. I do things to motivate myself like tweeting about what I'm doing or twitch streaming - not even worrying about if anyone really cares - just to do it and i guess keep a record of it. Because it's for fun - it's like traveling to some other part of the world for a week and it's there all around you while you're there but you take pictures and journal it because you know that in a week it will be gone and you'll be "back to reality". So my philosophy is to treat a hobby project like an enjoyable thing, and to only do things that I'd really enjoy doing as hobby projects. What I would not suggest is taking on hobbies because that seems like that would be the next rung on the career ladder, because that is a path to misery. Your spare time is valuable and precious, so reserve only the things that really matter to you for then. The trick, then, I guess, is figuring out just exactly what those things are.
My only warning is the Surface is underpowered for the price point. It's important to get the latest editing with the 8th gen or 9th gen Intel CPUs. Another concern I want to bring up is your real problem is not hardware but motivation. Being able to code from your deck or beside a pool is an excuse not a reason. If you were really motivated you'd user a desktop in your mom's garage where pretty much every major company started anyways. PS: I'm a fellow dev and startup owner
Oh crap, thanks. I meant to post the other to a different group...sorry!
Looks fine to me. You could simplify it a bit by moving the "empty" check up to an earlier point in the function. i.e. if the source is empty, do nothing and \`yield break;\`. That way the last part of your function just becomes \`yield return source.Slice(lastIdx, currentIdx - lastIdx);\`. In your current implementation, you're also not handling the case where currentIdx == lastIdx (which should be impossible). With my suggestion you can get rid of this code smell. But otherwise the logic is fine to me. :)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [Flurl 3.0 Planning](https://www.reddit.com/r/dotnet/comments/bbcwkj/flurl_30_planning/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Like one regex that gets you the string and one regex that give me the int that I can parse? :)
That's some useful advice, really. I hadn't thought of it that way, but I like your suggested method of accountability -- telling/showing others what you're doing so that there is a silent expectation that you will continue to do that thing. It also speaks a bit to the fact that you should do something out of habit instead of out of motivation because motivation is easier to lose. Devoting 30 minutes a day to learning more about DCS/PLC programming and creating something small could be a breakthrough for me. I just might try that.
isn't the screen size too small for y'all
Even tho I’m not OP, this helped me understand interfaces better. Thx! 👍
Haven’t much exposure to vue... I’m still undecided about if blazor is mature enough.. Might have to have a look into vue..
The point of regexes is that you match the whole thing at once. You just need to extract the matched groups. If you apply the basically same regex twice the whole thing becomes rather pointless.
That's good to hear! Let me know if you have any more questions :)
Right, but if you want to charge your device at the usb-c speeds, you need that port. Otherwise, the device pulls power too fast. Not many people are still manually copying files from phone to PC. It's usually for charging, in my experience.
Lol, I will highly disagree with you, but I love that it's working for you. I guess they tested it at least once before release :) &amp;#x200B; Most laptops go to 120 these days, so if you're not into Yoga (Lenovo burn) I'll stick with structural integrity ;) &amp;#x200B; I'm messing with you ;p
I wish I could buy the keyboard standalone for my PCs. They're my favorite part of the surface.
I tried a pro 3 for a bit. Was not a good fit, resolution was too high for such a small screen. Increasing font size made for not being able to fit much on the screen. Was hard to find a sweet spot
Totes. What's working great for me doesn't work great for everyone.
Unit tests are a way for passing a known value to a method and validating what it returns against an expected result. For your example method, I might write a test that passes in a nameFilter and phoneFilter that I know generates a certain Person, then validate that it does. These are meant to be automated and idempotent so that you can run lots of them over and over as you make changes. I recommend (here)[https://docs.microsoft.com/en-us/visualstudio/test/getting-started-with-unit-testing?view=vs-2019] to get started.
&gt; As a hiring manager, if I see nothing but framework acronyms on a resume, it’s a hard no and meets the waste basket faster that you can spell “worthless” Where do you work? I'd like to add it to my black list.
They explained it like they cannot control code in lambda and cannot prove it will work well when inside of lock. You always can implement your own locking in factory method. Easiest way I know is to use Lazy, like `var x = new ConcurrentDictionary&lt;int, Lazy&lt;MyClass&gt;&gt;();` `var myClass = x.GetOrAdd(5, (key) =&gt; new Lazy&lt;MyClass&gt;(MyClassFactoryMethod)).Value;` So you add proxy with Lazy, it's construction is cheap, so can be called 1000 times without any problems, and then all threads receive the same Lazy object from dictionary and call its .Value property, that finally makes thread safe call of real factory method producing MyClass.
:)
I am originally from South America sorry if this didn’t sound right.
Didn’t mean to make it sound this way, I was born in Venezuela and my English is not 100% good, some words may sound bad but I do appreciate your feedback m.
You don't need DDD to separate business logic to business layer.
I haven't done it but I suspect it's the provider param https://docs.microsoft.com/en-us/dotnet/api/system.double.parse?view=netframework-4.7.2#System_Double_Parse_System_String_System_IFormatProvider_
Make a method that generates (and returns) random characters. You can find plenty of these on stackoverflow if you don't know how to accomplish it. Then in the button click event set the Text property of the textbox to the returned value. If you've got any more questions, or don't understand my explanation feel free to ask.
Can you DM me with a line of code? I'm horrible at C#
This one prints 10 random chars to a textbox.: string s = "1234567890abcdefghijklmnopqrstuvwxyz"; Random r = new Random(); char[] c = s.ToCharArray(); string temp = ""; for(int i=0; i&lt;10; i++) { temp += c[r.Next()]; } textbox.Text = temp;
I thin kthat problem may come from how you are creating the path + file + extension string. In dos at least to have a path with a space the whole path needs to be in quotes. Otherwise it assumes the path ends at the first space. Maybe try making it a directory path object?
I run it but I get the error, "Index was outside the bounds of the array."
Wow that was really good. I adopted .net when it was in beta, but back then I was 17 years old, just a kid in my first job fumbling my way along. I had used the vs6.0 IDE and used to do some VB at high school, so at the time I wasn't aware of the big picture, more like struggling with the basics. But those early days of learning to code as a child and then going into the workforce bring back so many good memories, this talk really brings them back up. I was so passionate about computing.
Look at the Microsoft docs for Random.Next(), if can take a min and max value as parameters. Utilise that so the generated number isn't greater than the highest index in the string
Building a tax reporting tool for cryptocurrency investors: [CryptoTrader.Tax](https://www.cryptotrader.tax)
???????
This is how Microsoft does it too. My only concern is just people unfamiliar with this may not realize that their value factory is going to do unexpected things if the factory has side effects.
I'm not just going to send code because there is no point just copying if you don't learn but this is the part of the docs I was saying about https://docs.microsoft.com/en-us/dotnet/api/system.random.next?view=netframework-4.7.2#System_Random_Next_System_Int32_System_Int32_
Im so tired, sorry. The correct line of code is temp += c[r.Next(0, c.Length)]; Sorry!
Oh my god thank you so much!
You will need to set the culture or UI Culture property of the Thread properly to something like German. Is there a parse with another argument?
Any reason why your slashes are forward? Try throwing in backslashes (probably need two for each slash).
Word thinks you are giving it multiple space-separated files to open. Instead, enclose the path in quotes to force it to use the full path. E.g. “\”your path to your doc.docx\””;
That shouldn't matter, a forward slash is usually recognized by the OS as an alternative path separator.
I used the messaging system from mvvmlight for stuff like this. In the relay command the child vm sends a message with a type containing the data out. In the parents vms constructor you listen for messages of that type and specify an action to run.
I have a dual monitor setup at home. My laptop has one HDMI output, so the second monitor uses the laptop's USB-C port.
I've been down this path before... "if I buy new hardware I'll be motivated to do more with it". Didn't happen lol. Hardware wasn't the issue, you just need a good idea that you really want to build.
Upforgrabs.net
 [https://github.com/quozd/awesome-dotnet/blob/master/README.md](https://github.com/quozd/awesome-dotnet/blob/master/README.md)
&gt;string file = @"G:/8-Practice/MultiWordtoPDF/Hi/Dash- Dash.docx"; But am i not using quotes already??
C# != HLSL/CG
Nope, those quotes are for c#. Word wants them too. Fussy software. Go on, please try it :) string file = @"\”G:/8-Practice/MultiWordtoPDF/Hi/Dash- Dash.docx\”";
Unity3d abstracts those out by using Shader Graph and exposed properties can be accessed through C#
The answers in this thread are already pointing in the right direction, I just wanted to give a quick summary of cultures in .Net Framework/Core: A lot of core methods that have to do with converting numbers or dates have an optional parameter that lets you pass in a class of type [`CultureInfo`](https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo). This `CultureInfo`, as the name implies, contains information on a specific real world culture about how to format dates and what char to use a decimal separator. By default, if you don't pass a `CultureInfo` into one of those methods, they will use whatever culture is "current" in the execution context, usually from the current thread. ([Example from the .Net Framework source code](https://referencesource.microsoft.com/#mscorlib/system/single.cs,220)). Note that sometimes, [methods want an `IFormatProvider`](https://docs.microsoft.com/en-us/dotnet/api/system.single.parse) instead of a `CultureInfo` instance, but `CultureInfo` implements `IFormatProvider`, so passing that in is fine. The "problem" with this default implementation is, that the "current culture" will differ from computer to computer, as you already saw in your example. So to ensure that the methods behave the same, no matter which computer they are executed on, you have to pass in a `CultureInfo` yourself. A really simple solution that is also proposed [here](https://www.reddit.com/r/csharp/comments/bbbp4f/how_to_make_my_net_core_console_app_parse_float/ekhswtv/) is to drop in something called an [InvariantCulture](https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.invariantculture), which as the docs describe it is a culture that is following standards inherited from the English language (like using `.` as a decimal separator) but is otherwise culturally independent. So if you don't really care about which culture you want to use, going with the `InvariantCulture` is generally advised. In your example, this would result in: var num = float.Parse("27.5", CultureInfo.InvariantCulture); // num == 27.5 Of course understand that this is not a magic be all end all to all culture problems, `float.Parse` will throw when you try to parse `"27,5"` with it because it doesn't understand `,` as a decimal separator. If you still want to parse data that has `,` as a decimal separator, you can either do a string replace operation, or use a culture that more closely resembles the culture the input data was created in. That would look something like this for a German culture: var culture = new CultureInfo("de-DE"); var num = float.Parse("27,5", CultureInfo.InvariantCulture); // num == 27.5 Also, I always see a lot of people advocating for modifying the current culture object directly, which is a really easy way to fall into a pitfall, because if you for example specifically change the current culture's decimal separator to `,`, you now suddenly got the same character for both the decimal separator AND the thousand separator, which might result in further weirdness. Therefore try to use one of the predefined cultures instead of hacking together your own if possible. (Disclaimer: The code in the examples is written from memory and this is based on my knowledge on the .Net Framework. As far as I am aware though, all this applies the same to .Net Core)
Can I just say Flurl is fun to say?
How would i use those quotes if my function is like this &amp;#x200B; foreach (string file in files) { Document doc = app.Documents.Open(file, Type.Missing, false); }
Try foreach (string file in files) { Document doc = app.Documents.Open(‘“‘ +file ‘“‘, Type.Missing, false); }
The question was “interface vs class” and you gave an answer that works equally well with either one
Ok i just ran a little test: string file = @"\”G:/8-Practice/MultiWordtoPDF/Hi/w1 - Copy.docx\”"; string file2 = "G:/8-Practice/MultiWordtoPDF/Hi/w1 - Copy.docx"; Console.WriteLine("DOES IT EXIST: " + File.Exists(file1)); Console.WriteLine("DOES IT EXIST: " + File.Exists(file2)); file returns False using quotations file2 returns True &amp;#x200B; confused
The exists function is not the same as the word open function. The value you pass into the word open function is actually a space delimited set of files not a single file name. Think of it like having to put quotes around file names if you’re trying to open a file in the command line. Did using quotes get word to open the file properly?
I used to write scripts on paper with pen at school before i went home and tried them out. (turbo-c days)
Used surface pro 4 after seeing my friends surface pro 3 back in college. Got it, and definitely do not regret doing so. OneNote is really nice for school, so I mostly took advantage of that, but I was able to significant amount of work on it. The only reason I swatched later is due to linux, so if you dont want to run linux on dual boot or at all (outside virtualization) then it's a great bet.
 Oh ok thank you for explaining, what is the correct syntax for this? i get "unexpected characters" ‘“‘ +file + ‘“‘
Passing data is fundamental to all languages and what you are showing is why object oriented programming is powerful whether it's C#, C, or C++. I'm just curious why you see that as an aspect that only C# has when others can do the same if not better.
I think my mobile phone or your browser has converted the double quotes to “smart quotes” " is not the same as “ You want "
Please let us know how you go, OP. Kind of invested now!
My phone, my partner's phone and our Nintendo Switch all do. It's becoming surprisingly common. Common enough my non-tech-inclined dad had to order a multipack of USB-C cables on Amazon. I also noticed all new Apple devices are also Usb-c, including iPhones and iPads. I was shocked to say the least when I saw that.
Thank you very much. Improving now :-)
I'm just trying to get the quotations right, as this is a new thing for me (I just use normal quotes all the time) &amp;#x200B; heres a image, is that how it is supposed to be?: [https://i.imgur.com/dTKnMl6.png](https://i.imgur.com/dTKnMl6.png)
Be prepared to spend a lot for name and quality. You would need/want one of the higher end models to be able to use it comfortably. There are some good ultrabooks out there with similar specs if you look hard enough though. If you want a surface book clone I think Lenovo had some really nice ones for slightly less than the Microsoft ones. If you dont care about having touch screen I think the msi prestige edition laptops were very nice (good performance, quality and portability). The 17in screen laptop is basically the same size as most other 15in ones, and the 15in one is even smaller. If you want the most bang for the buck ultraportable I would consider checking out this one [https://www.eluktronics.com/N131WU](https://www.eluktronics.com/N131WU) (13.3in thin and light) Or this one for a 14in sized 15.6in laptop [https://www.eluktronics.com/MB-15](https://www.eluktronics.com/MB-15) Look around for similar types of laptops from other laptop builders (hidevolution, Greentech, etc.) or the same (Eluktronics). Try to grab something with a newer gen cpu if you want a good balance of battery, performance and value. You can especially save money on these if you buy your own ram, and hard drive. More so if you have your own OS to install. Just don't expect to be able to game heavy games on any of these. Check out the mech-17 or mech-15 if you want that.
Wot. Sorry but this is misinformation. USB power isnt related to the usb form factor or whatever you want to call it. Some manufacturers/models just have higher powered USB ports, and it can't be either type C, B, A, etc, whatever their fancy is. Source: I own devices with high powered type-a ports that charge faster and regular type-c ports that charge at normal/average speeds.
Didn't vote for features as I no longer use the library regularly (change of job), but I answered the others. Just want to say thanks for a great library!
Exactly. They aren't fully integrated everywhere yet, but that's definitely where things are headed. My note 8, iPad, switch, and newer work laptop all have them. Plus all the new MacBooks literally only have USB-C, no other ports.
I mean it shouldn't be the sole motivator, but upgrading my bass to a fender jazz absolutely motivated me to practice more consistently. Theres plenty more behind that motivation too, but I'd be lying if I said that it didn't at least temporarily spark some fire. Sometimes changing things up might be what you need at the time.
Good summarization :) Just FYI, in your second code example I’m sure you meant for CultureInfo.InvariantCulture to instead be culture.
Wrap your file.OpenText and your StreamWriters (basically any file access, including your save) with a [using statement](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-statement) to ensure that file gets closed. That was only a quick glance - willl look more later
*Flurl is a modern, fluent, asynchronous, testable, portable, buzzword-laden URL builder and HTTP client library for .NET.* Love it!
That was it. My save function works perfectly! Load function is still halfway there - it only loads the most previously data in the text document - the bottom four rows. I've edited the OP
We cannot see Car class definition, but your constructor call has the same order of string/int as explicit properties assignments below. If you have only 4 properties, maybe you just forgot to remove assignments after adding the constructor, and now you are reading a car and then instantly replace it's values with another car data?
And also you don't need to call f.Close manually, using does it for you. And you should move the declaration of at least variable Car c in the scope inside while, outer code doesn't need it, you have list
Oh, well fuck. Lemme strikeout my shit then
As mentioned, a messaging system will help with the inter-viewmodel communication. Most MVVM frameworks have a message system construct and if you're going to be doing WPF/MVVM, you are going to want to work with a framework. It will make your life easier. I recommend MVVMLight or Caliburn.Micro (my preference). Caliburn.Micro will make it really easy to do the contextual views that swap out based on the active viewmodel.
Thank you very much. My Car class is as simple as it gets. public class Car { private string model; private int year; private string colour; private int mileage; public string Model { get =&gt; model; set =&gt; model = value; } public int Year { get =&gt; year; set =&gt; year = value; } public string Colour { get =&gt; colour; set =&gt; colour = value; } public int Mileage { get =&gt; mileage; set =&gt; mileage = value; } public Car(string mo, int y, string c, int mi) { model = mo; year = y; colour = c; mileage = mi; } } Am I missing something here?
I have done Perl and Python many times on both my Surface and Android since I generally submit the source as text files anyway... but I haven’t done Visual Studio yet since I typically use my desktop for that.
I'm on. Surface Pro 3 or 4... And I love the shit out of it
After commenting out the explicit property assignments (since I already have my constructor calling the values) and bringing the variable car C in the scope of the while, my program seems to be working perfectly. Thanks a lot for your help.
So you have read 4 rows from file while calling constructor, which populated properties inside. Then you populate properties explicitly reading 4 more rows and replacing all previously read data. Looks like your file contains 8 cars and your code is now creating objects for every second car. That's why you see only 4. Also read about auto properties and var. It simplifies your code significantly.
That looks right to me. You want normal quotes.
Oh my bad man. Sorry to take it the wrong way. Sounded snooty. No worries. Great work!
I have the surface book 2. (15”) It has been awesome. The usbc has been awesome for hooking up to a 4K 60hz monitor or for use in conferences.
Might need more to the error than just a nullReferenceException. What's going on in the stack?
Go directly with the LINQ xml api even if not doing LINQ it is much much MUCH simpler than the previous XML api
I have to learn this fairly soon, is the standard pretty tedious?
You could just check out the [source](https://referencesource.microsoft.com/#system/sys/system/collections/concurrent/ConcurrentBag.cs,137), too, since it's open.
Cool
I'm not aware of any that don't
[ConcurrentDictionary](https://referencesource.microsoft.com/#mscorlib/system/Collections/Concurrent/ConcurrentDictionary.cs,808) is in there, too. Looks like it's a bit of a dense read, though.
Rest service to get data from database. MVC based UI.
You can encrypt values in your web config. Tey can still be retrieved by someone with a profiler but is otherwise fairly safe. Especially since this sounds like an internal application. Other ways to do it would be to make a wrapper service around the third party API. Your client calls your service which then calls the API with the key.
well, you're reading the first four rows into the car's constructor, then overwriting it with the next four rows, then adding the same instance of the car to a list that going to have x references to the same car. todo: if you're passing properties into a constructor, remove the setter on the property so it's readonly outside of the class. todo: put the car variable where you have \`c = new Car...\` todo: remove \`f.Close\`. that's covered by the using statement
is \_context getting initialized?
This does a lot of allocations. Maybe it's unavoidable but maybe you could use ArraySegment instead.
I used to have a Surface Pro 4 with an i7 and 16gb of ram. It was a nice machine overall, nice screen and keyboard, but not good for coding. They suffer from cooling issues and as soon as you demand some processing the machines throttles and became unusable. I would go for something “less” portable. I’m currently using a MBP 15” with bootcamp. Pretty much the same internal + gpu but dozens of times faster. (Yes, I know the surface is much smaller but the MacBook has an amazing construction and it is not heavy compared to other laptops)
I mean... If you are just gonna whore your skills out there and you happen to know some mathematics... :D My library is still in heavy development. It doesn't involve any web code or JavaScript (it is entirely C#). https://github.com/ZacharyPatten/Towel Math, data structures, algorithms, symbolic mathematics... Meh... It's got a number of useful topics. Probably good to look at if you just wanna learn C# :)
I know when I did Assembler and C++ back in the 90s, there was a book that detailed programming with audio. I remember WAV files generally being playable but the headers had to be analyzed. You need a detailed explanation of this. Nowadays, support is more ubiquitous. There are decent, pre-made libraries to handle this for C but looking into Google... I hope this helps: https://github.com/naudio/NAudio
I think you need to add: services.AddScoped&lt;RecipeContext&gt;(); To Startup.cs to inject your DbContext into RecipesController.
I take it you use the EventAggregator baked into the Caliburn.Micro framework handle that? I’ve just started using caliburn after a long stretch of web only and this is a problem I’m looking to solve for composing multiple views into screen.
just checked it, working fine for me
Your lambda should be pure. Yes it will be called a billion times and only added once. This is why it should be a pure method and not alter anything else
I got your point yes. I was trying to explain something simple, but by making it simple, it became a bit wrong
Yes and loving it every day! Except for some missing keys on the keyboard like the break key...
Same results with Postman. u/JKenney_, can you provide us with more context about the request that throws this error? I was unable to reproduce the error you described. Also, if you are interested, on line 42 in RecipesController.cs, there is a typo. Retreived should be Retrieved.
I've noticed that the scaling is a bit odd in Surface Pro. Everything looks super tiny. Are you able to increase the display zoom (like when plugging in a 4k monitor to a Windows desktop)?
I really like this algorithm just because it doesn't require a count and it can be used on any IEnumerable. ``` /** Grab a random item from the stream not knowing how big the stream is. It calls the random number generator once for every item it traverses. It's basically reservoir sampling specialized for k = 1. */ public static T RandomFromStream&lt;T&gt;(this IEnumerable&lt;T&gt; enumerable) { using (var e = enumerable.GetEnumerator()) { if (! e.MoveNext()) throw new Exception("No item available from stream."); T item = e.Current; for (int i = 1; e.MoveNext(); i++) { if (random.Next(i + 1) == 0) item = e.Current; } return item; } } ```
I would suggest getting a quieter keyboard, or at least better mic placement. It’s not nice to listen to the clanking of keys. Also that tic tac toe “refactor” seems like an exercise in “enterprise development”, that is, how to make a simple thing into as complicated and convoluted thing as possible. Instead of checking diagonal via indices you create an array, place values there, and do a method call? That’s the opposite of clean code. That’s wasteful in resources as well as hides things behind more and more layers.
That's a fun idea.
Thanks for the input! I have to disagree, as we do follow dry principle too. Array in that case makes us avoid if checks. So I have to disagree with that. Premature optimization is definitely less of a win than clean code. This is just a first review and i reviewed what I had. I am not limited to that. Next time I will be reviewing a game server and game in unity. My keyboard is not a bad one, but I have a squeaky space key... I need something to lubricate it with. I will do my best to organizme that by the next review 🙂
Or `Span&lt;T&gt;` or `Memory&lt;T&gt;` See https://docs.microsoft.com/en-us/dotnet/standard/memory-and-spans/memory-t-usage-guidelines
It’s not squeaky. If you can’t hear the clanking of every single key press, well... And why are if statements bad? Why should they be avoided? We can disagree, but I would claim if your thoughts about “clean code” are “don’t use if statements, just create arrays, call methods, use LINQ” then most would disagree with you. There is nothing premature optimizing in keeping code *readable*. A simple if statement is obvious. Hiding things behind layers is not. And especially returning false in a method hinting it should return true when all elements match is not clean code either. So do you really think your array/method call is cleaner than a simple if?
To repeat, I'm well aware, it's just a gotcha for new devs. And it doesn't have to be pure as long as the state captured accounts for that.
True, true
The answer is always "it depends". Which line are you referring to? @keyboard oh... Clanky keys.. I will need to check if I can do some Noice reduction magic next time then. 🙂
And returning true when it implies false is wrong. That is a mistake of me.
And a great example of where this can lead to. Simple if -&gt; you know exactly what’s happening. Arrays and method calls -&gt; oops the return is opposite.
Maybe. In terms of this, it might come down to preference. I prefer to avoid redundant checks, and if I checked something 3 times, and I can group the checks, I would rather do so. Si ce if a change happens, then I will have to change 3 places instead of one. Not clean.
Like what change? And how would it be different here? You’re writing *more* code. If anything changes that would affect one, or would affect the other also. Show examples.
That's why I asked the line. Idk which if-&gt; array refractor are you referring to
So, you replied saying it’s better and now say you don’t even know which one we are talking about? You say you’d need to change three parts and don’t know which part it even is? The diagonal checks. That’s what we are talking about. I’m starting to sense a strong Dunning-Kruger here, but do explain exactly why this change was good and what possible changes it does easier? There are things in that code that I personally would change immediately to make it cleaner and more extensible which you don’t seem to even consider and rather stay on the side of complicating things.
Right. We have implemented the check for matching symbols which accepts an array. Thus a conversion from ifs to array. And I mention in the end that it is not perfect. There would be a need for second iteration. In any case, I am not perfect and miss stuff too. I would appreciate if you could say what crucial did I miss?
Yay
Who cares.
Good talk. I think I still have the three "Visual Studio .NET Beta 2" CDs kicking around. Has a 2001 Copyright. However, I think it is rather fair to say that some- if not many- aspects of .NET were inspired by Java and learned from the mistakes that were made with Java. Java, after all, had a Java Class Library (good ol' classes.zip). Not to mention C and C++ had a "standard" Class library as well; so the primary drive would seem to rather be nteh shared platform of the CLR Many of the design goals that Microsoft pronounced with .NET were the same ones they had claimed for the future of the Windows Foundation Classes. This suggests to me that the original intent was to make the JVM the underlying platform upon which their libraries and new languages would be based, and that plan was "foiled" due to the legal action from Sun Microsystems. Just read the information they provided about WFC and try to say that .NET is something completely different: &gt;Every day, more organizations are turning to client/server solutions based on Internet protocols running on the Microsoft Windows platform. As developers we've all been finding our way around this new application architecture, often frantically searching for ways to more easily bridge the assorted technologies. It's easy to get excited about the new development opportunities fostered by the marriage of the Internet and client/server computing. However, when implementing solutions across these different programming disciplines (with varying degrees of maturity) it is just as easy to get frustrated while productivity suffers. &gt;In response, Microsoft is creating the Windows Foundation Classes (WFC) to lower the bar of entry for developers into this rich new environment. WFC is an object-oriented framework that encapsulates, simplifies, and unifies the Win32 and Dynamic HTML programming models. WFC is specifically aimed at developers who want to take full advantage of the spectrum of features essential to capitalize on both Windows and the Internet and therefore create winning solutions while cutting development time. &gt;Developers want to create and deploy: &gt;1. Applications that adhere to the industry and worldwide standards for networking, data sharing, and user interface that allow their software to interact with software from all around the world from any vendor. &gt;2. Web server applications that respond to HTTP URL requests that in turn do database connectivity. These applications return HTML visible by standards-based, broad-reaching Web browsers onto platforms ranging from Windows CE handheld devices to WebTV to the Macintosh to legacy Windows 16 bit. &gt;3. Specialized business components that transact a specific line of business on high volume servers. Client front-ends that take full advantage of the richness of the latest DHTML features, possibly including rich encapsulations of the most commonly used controls today (trees, calendars, grids, and so on). &gt;4. Applications that are triggered from server events that create and maintain static Web sites. &gt;5. Secure, robust applications that are easy and low cost to create, deploy, and administer. &gt;6. High-powered, high-performance, complex, feature-rich client front-ends that perform DCOM invocation over high-bandwidth protocols to remote specialized objects. &gt;7. Applications with clients that behave just as well when connected as when offline—reconciling changes made to data upon reconnection. &gt;8. Applications that bind to heterogeneous data formats that are found locally and remotely. Some combination of all of the above! &gt;9. With WFC, developers can now build these applications without sacrificing the productivity they have come to expect from traditional class libraries and tools.
The xml standard or how to work with it in c#? IMO xml is a very nice and clearly structured markup - especially in combination with xml scheme definitions. It‘s just sometimes a bit redundant and polluted, which might be the main reason why nowadays most people prefer json. Xml integration in c# isn‘t that bad. There are at least four different approaches that I know for parsing and creating xml. As long as you are not working with many huge xmls filling your LargeObjectHeap everything is quite nice.
And as usual: Planned obsolescence strikes again. Want to use .NET Core 3.0 or C# 8.0? Need to buy a new license (or get a subscription). I could understand it when they switched from the old compiler to Roslyn, but now?
Providing an extension method on `string` is serious code smell. I'd definitely drop that.
You'd use an unsafe int pointer and set it to the address, but Windows is a pretty secure OS and one app getting access to another app's memory is somewhat advanced stuff. If you try this without elevated privileges then you're just going to get a memory access violation.
Would it be possible if i just want to check if value at the address == 100, then i want to invoke a keypress?
What license do you need? And both .NetCore 3.0 and C# 8 are still in beta
Same answer, except it's more complicated than using an unsafe pointer. This may get you started: https://stackoverflow.com/questions/5137036/is-it-possible-to-access-memory-from-an-application-to-another-how
The answer to this question is the comment you responded to.
Thank you for the reference! 🙏🏻
This is only kind of true. Two USB type C only pins are required for USB PD and for 3A 5V charging. There are non-standard extensions that will charge at higher voltages (e.g. QualComm QuickCharge), and some chargers that can go up to 2.4A 5V (but not combined with data). Type C absolutely extends the charging capabilities of USB significantly.
I dismissed the cloud alternatives to too quickly and started testing/trying everything I found on nuget/GitHub. I see now that Google Cloud natural language API is obviously what I should use.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [Gradient: full TensorFlow binding for C#](https://www.reddit.com/r/dotnet/comments/bbirp0/gradient_full_tensorflow_binding_for_c/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Ah yes of course, changed it :)
https://github.com/openrct2/openrct2 (game) https://github.com/openrct2/openrct2.api (backend) https://github.com/openrct2/openrct2.webui (frontend)
This article reads like a bot wrote it.
Oh sweet god thank you so much for this
Writing xml yourself in normal text editors? Definitely tedious. Writing code that handles xml, not so much. Protip though: if you create a schema then Visual Studio can give you intellisense when you write xml, which makes it way easier.
Sounds really cool. If I ever get off my ass and start playing with deep learning, I'll make sure to try this.
I’m on a surface pro 4 i5 16gb and it’s been fine. I wish I’d gotten the i7 for the larger cache but it really hasn’t been a problem. Get the dock if you use it on your desk. You get more USB 3 ports, mini-DisplayPort jacks.
Thank you!
I don’t know where you are in the world but a surface pro in the spec I would need would be over 2k I use a Dell XPS (whatever the top spec is) and it costs about £1600. I don’t have 4K on it because it’s pointless. The scaling in photoshop and VS is weird when you have a monitor attached which isn’t 4K. Absolutely love it and never had an issue. They’re light and thin enough that you don’t notice the form and the battery will last about 6-7 hours. I sit in the car watching my little boy play football and I’ll have the laptop on my knee, working. I know it’s not the question you asked but I can’t recommend them enough
&gt; Not being able to inherit from generic types: How do you imagine that would work? At compile time, you don't even know if T can be inherited. It might be sealed, or a struct, or an interface. And even if you could, it would mean that every closed generic class would have it's own inheritance tree. The reflection API would have to be radically altered to support something like that, to say nothing of the runtime. This isn't C++ where templates are just glorified macros. Everything is interrelated.
&gt; C# is statically typed. Types are known at compile time. You're dealing with an open generic type at that point. The closed generic type is not known at this point, so you can't inherit from T. This is a limitation of .NET, not of C#. &gt; type aliases not visible in other files/classes: Completely unrelated to C#, and generally also not a very nice practice. You obfuscate what type you're dealing with. &gt; - partial specialisation of type aliases doesn't work at all: It does, when done properly: A subclass. Otherwise you're not dealing with an actual type again.
&gt; type aliases not visible in other files/classes: That's just stupid. Type aliases have nothing to do with generics.
&gt; Second, and a huge pet peeve of mine - variadics are missing It's called `params` in C# and has nothing to do with generics. public void Log(params object[] values) { /*...*/ } I can't even imagine why you thought that you would need a type parameter for each normal parameter. Do you even know what polymorphism is?
&gt; public class Foo&lt;T&gt; where T is int, char, bool { } So you want a type parameter that is simultaneously an integer, a character, and a boolean? You have no idea what you are asking for, do you?
Maybe he means "one of these".
Generics were written a while back. Roslyn is relatively new and they're pumping out new features faster than before. Maybe we'll see some new ideas soon? Raise the issue on github, they'll probably hear you out.
&gt; Types are known at compile time. The compiler can trivially resolve T to the types passed in, if it wanted to. Oh, no no. Generic arguments are not known at compile time, only at link/JIT time, or even runtime (when using reflection). This is not trivial.
Jellyfin
&gt; I wonder if it would‘ve been less pitfall-ish if default would‘ve been InvariantCulture instead of SystemCulture. The default is CurrentCulture, which I guess is what you mean. Yes, I tend to agree that the default should be ~~the glorious Ame~~InvariantCulture.
He should probably be a bit more humble and come off.. less Dunning–Kruger like, in order to have success ;) The statement "C# generics are so underpowered they're practically useless." alone is ludicrous.
If I got you right, you are trying to figure out how to subscribe to rabbitmq and where will this routine be executed. Take a look at Background hosted services - https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-2.2 There are plenty of examples covering basically every case available on internet
True. The line &gt; having to find some dirty workaround that takes hundreds of LoC more, makes me cringe. I've seen my share of C++ hacks in C# on the assumption that some feature doesn't exist or isn't possible. I have this hunch that OP is making a shitton of Foo&lt;T&gt; type-defined subclasses instead of creating Foo&lt;T&gt; instances.
I would start by looking at the response headers (press F12 in your browser and look at the response). There might be a header called “X-Powered-By” which will give some information. What kinds of language are you looking for?
Yes, I know all about ```params```. They solve some problems by boxing up objects, but they do not solve all the problems, and they have problems of their own, most notable the total lack of type safety due to the aforementioned boxing.
that did not work for me, however this did: Document doc = app.Documents.Open(filePath.Replace("/", "\\"), Type.Missing, false); finally, what a headache that was
&gt; At compile time, you don't even know if T can be inherited. It might be sealed, or a struct, or an interface. You totally do. Sealed, struct, and interface are all known at compile time &gt; This isn't C++ where templates are just glorified macros. Everything is interrelated. C++ templates have nothing to do with macros. Like absolutely nothing. Totally zero.
That is exactly what I mean, thanks.
&gt; So you want a type parameter that is simultaneously an integer, a character, and a boolean? Uh, no. This is a type constraint that would enforce that T is *one of* int, char or bool, and throw a compiler error otherwise.
Ok, but what would that actually mean? With no common members, it would be no different from just typing it as System.Object. The thing about constraints is that they expose more functionality by redefining the 'lowest common denominator'. The LCD for those three types are just ValueType and Object.
&gt; less Dunning–Kruger like, in order to have success ;) We've already delved into insults have we? I outlined with 4-5 examples why generics are extremely underpowered and feature-lacking. I urge you to attempt to solve any one of the 'missing features' I outlined in my post. Then you'll understand.
&gt; I have this hunch that OP is making a shitton of Foo&lt;T&gt; type-defined subclasses instead of creating Foo&lt;T&gt; instances. Nope, nothing of the sort. I simply used those as the simplest examples that everyone could understand without me explaining my problem in full. If you want to hear about it, let me know.
I guess you don't know what a generic type alias is then.
The `async` keyword only means "let me use `await` in this method". No `await` in a method, no useful difference in behavior.
Well, I think most of the issues have been addressed by others. I don't know if you intended to word it that way, or if you're just frustrated, but I don't think it's going to convince a lot of people.
The client-side and server-side may be unrelated technologies (and there could be several involved in the development of each). If the site is careful about leaking unnecessary headers and content, then identifying the server-side will be much harder.
At compile time you don't know what the type parameters are going to be. It has to create the open generic type first with an unknown T. The closed generic type, with specific values for the type parameters, are created later. *** So you don't know how templates work either. It's just sophisticated text substitute that then gets fed into the compiler. Which is why you can't create an arbitrary instance of a generic type at runtime. Now you could create your own template system for C# by building a pre-processor. It would work just like it does in C++, though it would need a different syntax.
But if I want to use `await` in my function, Id need to call another function and have the same problem in the new one. In the end there is always a function which does not use `await` and therefore the whole call chain is sequentiell. So where is the point in using `async/await`?
That's exactly what i was looking for! Thank you very much,
One small point, since ChunkByDelimiter uses deferred execution, I'm pretty sure your parameter checking won't execute until the returned IEnumerable&lt;T&gt; is actually iterated. Which can cause errors to manifest far away from the cause of the problem. To resolve, you could emulate the way Linq does it, and have a wrapper method that executes immediately, so something like: internal static IEnumerable&lt;T[]&gt; ChunkByDelimiter&lt;T&gt;(this T[] source, T delimiter, bool keepDelimiter = false) { if (source == null) throw new ArgumentException(nameof(source) + " can not be null."); if (delimiter == null) throw new ArgumentException(nameof(delimiter) + " can not be null."); return ChunkByDelimiterIterator&lt;T&gt;(source, delimiter. keepDelimiter); } private static IEnumerable&lt;T[]&gt; ChunkByDelimiterIterator&lt;T&gt;(T[] source, T delimiter, bool keepDelimiter) { //do the stuff }
Params has nothing to do with boxing. You can apply it to type. The important thing is that you actually pick one type that's shared by all of the parameters. What about printf you ask? Yes, it can just shove mixed types into the stack. But C is also not type safe. If you shove a bunch of integers onto the stack, but the format string says they are floats, then they are treated as floats. This doesn't fly for C#. The runtime is typesafe and won't let you tap dance over memory.
There is a tool for that [https://builtwith.com/](https://builtwith.com/) but it won't be 100% accurate.
Yeah, I kinda do want to know what the issue is. If there's one thing I lack it's professional devs showing real-life problems and solutions instead of [this shit](https://www.reddit.com/r/programminghorror/comments/8p93b5/code_reviews_no_we_dont_why_is_there_something/) I'm dealing with.
Where are you getting 4 or 5? Oh wait, you are still counting the ones that have nothing to do with generics.
No type alias spans multiple files. Therefore this is not a generic issue.
Wapalyzer can detected this quite often (it’s a browser plugin)
Why? Those three types have nothing in common that isn't also shared by all other value types.
amazing work !! thank you
HI friend, just use a google chrome extension called Wappalyzer, it ill detect everything and showit in the bar, its awsome.
I use this service: https://hexometer.com/stack-checker
What is IoC Container without scoping?
bookmarked this to try it in a year or so
Yo are never doing anything that is actual async, therefore everything runs synchronously. Try replacing your inner for-loop in the DoSomeWork-method with a Task.Delay(100).
I am building a Digital Marketing Helper Software called, Social bomber. The application has a full WhatsApp bulk messenger, An Email Marketer, Wordpress Autopost and manager, Youtube Downloader, Youtube to facebook publisher, facebook post manager, and autopilot tools, and Keywords manager, and other tools, also it includes a library to manage posts for rescheduling. this project will be completely free and open source when I finish it. &amp;#x200B; Screenshots: [https://imageshare.me/gallery/F27aGRQBxn](https://imageshare.me/gallery/F27aGRQBxn) [https://imageshare.me/gallery/5TTmzJrt9g](https://imageshare.me/gallery/5TTmzJrt9g) [https://imageshare.me/gallery/CTC69Z4d9L](https://imageshare.me/gallery/CTC69Z4d9L) &amp;#x200B; if you have any suggestions, I will be glad to hear. Thank you.
Ahaha! So the slashes were the problem after all! I guess the first commenter was right.
&gt; Raise the issue on github, they'll probably hear you out. Hahaha... No. Plenty of requests are already present, but not recognized. Also C# is not everything, you need to keep track of the CLR as well. If a feature requires CLR changes, then it's extremely unlikely to be implemented within the next years.
This looks really awesome! I know very little about machine learning, but it is something I would definitely like to sit down and learn some basics of. This may be a very stupid question, but what is the difference between using something like what you built and using ML.Net?
Removed: Rule 3.
Amazing! Gonna have a play with this later today! :)
I think you're better off explaining what problem you are trying to solve. What you are asking is not possible in itself, but we might be able to provide something equally good.
My disdain for python thanks you
Why reads &amp; writes as separated aps?
Ahh, I'm not to the point where I can fully understand everything you've mentioned just yet, but this has really helped me understand what variables, constants, and literals are a little better, and you've given me more useful information than I was expecting, so thank you! I really appreciate it!
Thanks for sharing buddy. It’s help/motivate a lot to novice like me. P.S Like your accent anyway.
Number 4. It has no allocation (everything is on the stack) and no additional method call.
Method call in #3 will most likely be inlined so there is no difference between #3 and #4.
&gt; everything is on the stack Do you have any source for me to read and learn more about this? &gt; But it is not clean code and shouldn't be done in production like this. Yeah, that is what I've figured. For the time being I am mostly learning how things work and familiarizing myself with new concepts.
Well, it's more work for the jitter. ;P
Yes, EventAggregator for inter-viewmodel communication, Conductor for the parent ViewModel and Screens for the child ViewModels.
&gt; Do you have any source for me to read and learn more about this? The C# book of your choice. Or the official documentation. Keywords "stack heap value type reference type".
I'm in USA. I had an XPS laptop a while ago that I did enjoy. Seems like laptops are more ideal
Thanks.
while you and some others are in favor most seem to suggest just using a laptop
while that does seem awesome I'm sure the price tag is a litttttle too much for me.
i hadn't heard of these before, thank you for sharing
What happens if you try the following instead? Typing on mobile so pardon any incorrect formatting ``` var keyEntered = Console. ReadKey(): if (keyEntered == "Y") { } else if (keyEntered == "N") { } ```
Find out yourself: https://github.com/dotnet/BenchmarkDotNet
Hi, You need to store the result of Console.ReadKey(true). in a variable and check that variable. Right now your second check in "else if" waits for another input from console as you ordered it to read key input again. &amp;#x200B; `var response = Console.ReadKey(true).Key;` `if (response == ConsoleKey.Y)` `{` `// your code here for key Y` `}` `else if (response == ConsoleKey.N)` `{` `// your code here for key N` `}`
IIRC Browsers disallow POST data if it isn't https but I'm not sure if localhost is an exception.
&amp;#x200B; &gt;I know there's a rule against self-promotion, but I am hoping my work will actually be very useful for C# and .NET lovers, who also want to get into machine learning. How then would people get to know it? At some point (if one is not a well known person) and you think other people could benefit it's a necessity to self promote
Is the "[? operator](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/conditional-operator)" what you're looking for ?
Thanks to the both of you! Makes sense and this indeed works :)
Yea, that stinks. Company paid for mine, so I had no problem asking for it.
wouldnt then half of the internet wouldnt work?
&gt; enumerators can be thread save, but you have to lock the entire entity to make it so, which is expensive. Isn't _anything_ "thread-safe" if you put a lock around it?
Seriously, this. I would never use furl with extension methods polluting strings.
It depends if you want to pass in argument of different types depending on your "if" result. &amp;#x200B; enum Mode { Mode_A,Mode_B } long Add(int x, int y) {...} long Add(string x, string y) {...} and then void Foo() { Mode workMode = Mode.Mode_B; var numberX = 5; var numberY = -5; var numberA = 10; var numberB = 15; var stringX = "12"; var stringY = "30"; //This works var result_sameType = Add((workMode == Mode.Mode_A) ? numberA : numberX, (workMode == Mode.Mode_A) ? numberB : numberY); //This doesn't work var result_DifferentTypes = Add((workMode == Mode.Mode_A) ? stringX : numberX, (workMode == Mode.Mode_A) ? stringY : numberY); }
&gt; Wouldnt then half of the internet do not work if browsers disabled POST without HTTPS? Of course not. Chrome and firefox gave 2+years notice and started doing warnings in their browsers. It's pretty hard for me to find a site that isn't https &gt; Anyway this is not the case here I had a feeling I was wrong but wanted to throw it out there in case someone sees this and isn't using localhost
If I understand correctly, instead of: var dic = people.ToDictionary(p =&gt; p.Id, p =&gt; p); You propose: var easyDic = new EasyDictionary&lt;Guid, Person&gt;(p =&gt; p.Id); foreach(var p in people) { easyDic.Add(p); } My OCD tells me the first one is shorter and cleaner. And if the `p =&gt; p` is bothering you, rather than a new class, just define an extension method: public static Dictionary&lt;TK, TV&gt; ToDictionary&lt;TK, TV&gt;(IEnumerable&lt;TV&gt; e, Func&lt;TV,TK&gt; f) =&gt; e.ToDictionary(f, v =&gt; v); And write: var dic = people.ToDictionary(p =&gt; p.Id);
This is more than welcome. Thanks a lot!
Check the line .Include(d =&gt; d.Description) there should be Directions i think.
Yes, it works. Check your web app. Is it live? I’m on mobile and can’t read the full exception message.
Sure but that would only cover creating new dictionaries, how would you cover adding/updating an existing one or looking-up/getting a value by its key without having to specify the key again?
So, if I understand correctly, it's basically Tensorflow written in C#? Does it work with CUDA?
Any plans for supporting TF 2.0?
That's an interesting point, probably _the_ main point of the approach, so why not feature it more proeminently in the article ?
It isn't I'm kinda asking whether it is possible to test web app while running it "from tests" I wanted to know whether it is possible to test web app without deploying it on some e.g testing server But apparently it isnt possible :P
I thought I did by showing the examples at the end but I think you have a valid point. I need to draw more attention to that part.
This seems a little more geared to stuff other than MVC. Because the web is stateless, validation is a bit easier for us I think. I also have limited experience with desktop apps thankfully lol. For example, I would not bake anything into my ViewModel. I use something like https://fluentvalidation.net/ and then that would be registered with core DI and validated during model binding. Now when I DO have to get into this ugly stuff its usually on the front end. And then thats been done for me by some React, AngularJS, Vue, jQuery Validation plugin, etc. Also, I thought the article was good. Very comprehensive and my favorite part was the first few blocks defining the different terms. I havent seen them defined so simply before.
Oh no. You have to have it deployed somewhere. I misunderstood your question with “can I test a local app?” Sorry for the confusion. Anyway, you might want to look at having it deployed in a container.
Substring isn't valid for all strings either though. Obviously there are trade-offs with extension methods but C# doesn't allow you to easily express constraints for this sort of code.
Substring makes sense for all strings, because you can take a substring of all strings. But not all strings are urls, which "Flurl" requires. The majority of strings do not match that constraint.
If you ask me why, might as well ask me why we went to the moon.
Very cool stuff. I’m not too familiar with machine learning, but have always found it very interesting and may want to get into it in the future. Hoping maybe you can shed some light on a question I have: What are the benefits of using this library, or even Tensorflow in general, versus Microsoft’s ML.NET?
I think sharing something you made isn't self promotion. Sharing your product or service that you profit off of is.
Yea, yea I was just curious whether that was possible just from running tests in VS :p
Hi, the top responses have already solved your problem but I'm still quite curious as to why you've used `goto` statements?
&gt; Source code will be available on Github soon though. Then... post when you actually have something to show...?
Still setting up the repo, actual code (as indicated in the title, writing the logs to a file including different formats, console and possibly network calls although I'm not entirely sure that belongs in there yet. It's nice to have, especially for combining it with ELK Stack, but like I said, not sure whether or not that belongs here), readme and sample. Shouldn't take too long though. Planning on implementing it in a lot of projects, so it's priority number one at the moment.
Flurl requires a url while Substring requires startIndex &lt;= string.Length and length &lt;= string.Length - startIndex. C# is not an easy language to avoid exceptions in and I'm not sure that is really a knock against Flurl.
I don't think one way is really better than the other when it comes to speed, but I think the first way looks more readable. The second is more useful when you're adding in other characters in between or whatever.
The overload without the element selector [already exists](https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.todictionary?view=netframework-4.7.2).
StringBuilder is what you're looking for when you're using loops 😉. If it's just a matter of only a single 'merge' of two strings, either method is fine.
The point was not to avoid exceptions, but about what makes semantically sense. Being able to take a substring makes sense for any string, but appending a path segment does not make sense for any string. That only makes sense for a small subset of strings. Take the first example on https://flurl.io: Would you ever consider calling `"person".AppendPathSegment("...")`? Or `"Claire".WithOAuthBearerToken("...")` in any circumstance?
That’s just not true. The vast majority of sites still do not use https. Google has given prods, but it certainly hasn’t taken much action against those who don’t use it.
String interpolations are a fancy version of "string.format". There is no gain using + operator or interpolation. The only advantage is readability. For really bigger strings StringBuilder is better.
When I am working with urls a lot, sure. In other projects, no. I agree with you in principle but I am more annoyed by writing new Uri("http...") everywhere than I am by extra extension methods on string. String already has a ton of irrelevant extensions via LINQ anyways; at least these extensions provide value if you are working with urls.
This. For just adding 2 strings together, go with the first one. If you need to add some small extra stuff I'd go with interpolation.
I see now! Fair enough. At first glance I thought `lastIdx` would be 0 only if `source` was empty. That's not the case. Looking at it more closely, `lastIdx` can only be 0 if `source` is an empty array, ***or*** if `source` has no delimiter. Either case, what you're doing is correct, so the code looks fine.
If you put the deterministic validation into the model, then you can have ASP. NET automatically run the validation. And that same validation can be unit tested. Filters are awesome. *** In theory Fluent Validation is appropriate for rules that require DB access. In practice I find it to be very inefficient. What happened was I kept finding myself fetching some data for the validation and then fetching the same data for the service method that does the work. Doubling my DB calls isn't fun. I also didn't like my service calls to be naked. I often reuse the service classes for background processing work. If validation is separate, then I have to drag it along separately and stitch it together in both applications. One encapsulated call is easier to deal with.
 if (!File.Exists(@"E:\Data\TEST.xml")) { var postData = File.ReadAllText(@"E:\Data\TEST.xml"); This will try to read the file's content if it **does not exist**. Perhaps you wanted to have that condition without the `!` negation? Also, you have a `return` statement in the second part of the code that will exit the method (finishing whole execution) if the file doesn't exist. And I can see no waiting in the loop to check if the file appeared after some time (seconds? minutes?) as well as there is no code to set the `i` variable to false to end the (currently) infinite loop.
Since I have no clue how else to go back to an earlier part of the code :')
These are good points. You could push the FluentValidation all the way back to the service layer though and manually run it. All within a scoped lifetime too (acces to your dbcontext and such). Especially with MVC you can always have something as minimal as jQuery Validation preventing the form submit, and then your service layer catches everything else.
The point is that if you have a ConcurrentDictionary for example, people assume that because the methods to add and remove stuff are thread safe, the enumeration of that type will also be thread safe. It isn't so you have to lock (or use another thread related blocking construct). &amp;#x200B; So yes, you're right, but I'm more right because my answer was correct in the context of the question ;p
It may be easier for you to use Azure Service Buses as they're free and integrate nicely into .NET (Core).
Supposedly attribute based validation on the models can be automatically translated into Javascript validation, but I've never seen that incorporated into REST servers. I'd love to have that idea somehow merged into Swagger.
It kind of is https://github.com/micro-elements/MicroElements.Swashbuckle.FluentValidation That package automatically sees the validators attached to the VMs since thats what the controller actions bind to. It does have some issues, it does not do well with injecting scoped dependencies into your validators. I have worked with the author and we came up with a few solutions but then the FV package got updated and it broke our solution and now were back to square one. The Core team even mention this package in the official docs somewhere too.
Thank you for your input, I've updated the code to evaluate the if condition properly. I've also removed the return to disallow finishing execution. I do want to application to run continuously to monitor the folder for a new file and when it finds it, it will send to a web service. Do I need to specify a wait time for this? I do want it to be an infinite loop. At this time the application runs (there's no file in the specified folder) and it's continuous. It also gets to the part where it will create the "backup" folder, but when I drop the file in nothing happens. Seems almost as if it's not actually looping.
I have to disagree. What next, adding `Add` to `int`? 1.Add(1); I hope you're starting to see the problem of adding extension methods for URLs to strings. It is indeed a code smell.
If you want to have DoSomeWork work asyncronously you have to queue the work for execution on the ThreadPool using [Task.Run](https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.task.run).
Cool. I'll have to look into that.
I'm not sure what you are disagreeing with. Int does not have Add but DateTime does. I'm not sure how duplicating operator logic is related though?
&gt;I've updated the code to evaluate the if condition properly It is still incorrect. !condition == true Will return true when the condition is false. In your line, it's going to return true when the file doesn't exist.
I think meetings are just the price of bureaucracy. I bring my laptop and can often get some work done that I can do while "lightly listening" (document, plan change, respond to emails, etc).
&gt;!condition == true Okay, updated to !condition.Equals(true); Going to give it a go. Thanks again for you're input. I'm a true noob.
All you need in the if statement is `if(File.Exists("file"))' You don't need the additional check, it returns a bool itself.
With Interpolation you can mix diferent types without format problems, properties, etc... var str3 = $"{myString}, {myNumber}, {(myNumber + 35)}, {customer.Names.First()}, {myDateTime} "; Without interpolation... would it work witout add ToString()? var str3 = myString +", " + myNumber +", " + myNumber + 35 + ", " + customer.Names.First() + ", " + myDateTime;
I'm posting it here so if people find this on a search engine they don't have to dive into the commens. [Here](https://github.com/Tobiky/Multithreaded-Chatroom) is the repo /u/dreph, It's not perfect but hopefully it's a start. I added a version of the server project without comments so it's easier to see and put everything together. Like the description said, a lot of comments were made later in the evening; so they might not be the most explenatory or completed. I will update the same repo with any changes made, comments or code. Hope this helps!
I prefer interpolation. Often times I find myself adding more crap to the string later on (usually for logging purposes) so having it ready to go is just more convenient.
Why don't you combine code for sending web request and moving the file into single piece? After all you want the file to be used first and stored in the backup afterwards, right? so I would suggest doing something like this: while (true) { string sourceFile = @"E:\Data\TEST.xml"; var movedToBackup = true; if (File.Exists(sourceFile) == true &amp;&amp; movedToBackup == true) { var requestSent = false; try { //send the web request using file's content requestSent = true; } catch (Exception ex) { //store exception in a log file } if (requestSent == true) { try { //send the file to backup folder movedToBackup = true; } catch (Exception ex) { //store exception in a log file movedToBackup = false; } } } System.Threading.Thread.Sleep(10 * 1000); //sleep for 10 seconds }
At it's core, this sounds like an assignment in "single responsibility" and bordering on full-scale SOLID design, which engineers get wrong in the industry all the time. The breakdown comes from the outset. It's easy to just embed all your logic in the UI code and just do the assignments and results right in the UI event. This is where single responsibility has to really be learned. Your UI code should interact with underlying "business logic" classes that truly own the decision making processes based on inputs and injected dependencies. The UI code is just "dumb" presentation layer stuff. It gets more complex with dependency injection, which you can probably avoid for this assignment. You can envision this with something like an Amazon product page. There's a dozen different services invoked on that page giving you product details (specs, images, descriptions), pricing, availability, reviews, comparisons, etc...The UI layer can't maintain all that logic. There's orchestration classes and underlying micro-services at play here. You just basically want to pass your selected value (dog, cat,..) to an underlying "logic" class that returns your result. Probably not much more that a simple string concat operation that when looked at seems easily ownable by the UI, but the intent here is for you abstract those logical operations into separate classes. This single responsibility excercise, while terribly simple, sets you up for atomc units that can be tested without needing to run the entire program.
OMG thank you!!!
Instead of using a loop to constantly check whether the file exists you should use a FileSystemWatcher.
Careful, The GC can assign value types to the heap. Its in general that value types go on the stack but it in no way guaranteed.
Any major benefits over SeriLog or log4net? (or in core Microsoft.Extensions.Logging?) Or just writing your own for the hell of it?
You dont go back, you put whatever you want to happen inside the if :) like a method called PlayGame(); for example
Please show me a single case where a local value type variable will end up on the heap.
Fully.Erect('Tensorflow Binding C#');
Once you get done with this, assuming you're using this as a learning experience, you should try to get rid of the procedural things you did and instead use an object oriented approach. You'll benefit from it. For instance, assuming this is a choose-your-own-adventure type game, each decision point is going to have * a text you read before making a decision, * a list of possible decisions, consisting of the decision text and some indicator where that choice should lead. You might create a class for decision points, and a class for decisions. (Or you might instead choose structs because both structures are [good candidates](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/choosing-between-class-and-struct) for structs. But for now if you are learning, just use classes. Structs aren't complicated and are *technically* better here, but it's one less thing to have to immediately learn about.) You'd populate an array or list or dictionary with decision points, and then have a method that outputs the next decision point to the console, for a decision, and then calls itself recursively to output the next decision point. Play Again? (Y/N) would then simply be another decision point.
Put the if statement by itself, store the result in a variable, call the method with the variable as an argument.
Learn how to use interfaces and generics properly, Not everything needs an interface, and generics are only useful when things do the same things time after time without modification
Finishing a 50 hours school project over 6 weeks is nothing compared to code 10 hours a day, every day and never actually finish anything.
TensorFlow is all about neural networks. ML.NET strength is "conventional" algorithms, e.g. k-means, decision trees, etc. ML.NET does enable consuming TensorFlow models, but to create, train and tune them you currently need TensorFlow.
Explicit support is in the works, but can't say anything about concrete dates (as it is not released yet itself). 2.0 is, actually, mostly backwards compatible with 1.x series, so you might be able to just use it (however, might be a bumpy ride). All the great features are already in 1.x like eager execution, and Keras.
It is not written in C#. You have to have TensorFlow for Python installed to use it. This is a .NET binding for it.
That's perfect. Sounds like you guys are hitting all the right steps in getting your development sub-department going. 👍
The conditional operator. Foo(isBar ? bar : baz); which is basically equivalent to if (isBar) { Foo(bar); } else { Foo(baz); } or var arg = baz; if (isBar) { arg = bar; } Foo(arg); Posts like this are a good candidate for r/learncsharp.
TL;DR; ML.NET does not have extensive support for training neural networks. TensorFlow is focused around them.
He used wrong kind of quotes! TRAITOR!
Oh yeah, it does work with CUDA, burning my GTX right now. Probably works even on ROCm build, but that I have not tested myself.
What do you mean never finish anything? Like literally not finish anything, even after all the hours you put into it?
Well, I surely want to profit off it!
Really good points. A real world example of such ambiguity is in Unity. `System.Object` vs. `UnityEngine.Object` vs. `object` If you're in the `String` and `Object` camp, have fun resolving all those ambiguity errors with namespace specifiers and unnecessary `using` directives.
What is the difference between using this framework and using the IronPython interpreter? Does the library use any graphics card acceleration?
This is a fun one for me. My goal is to show that C# can run just about anywhere now with .NET Core! I also may be trying to get people to use git and understand some of the base concepts... This is one I will be building off of to dive into more advanced concepts. I think a bot is a really fun way to learn C#.
Oh Alright thanks, I guess I misunderstood your original post. This is interesting
There is an actual product used by some users, but the desired new feature list is huge and there are always some bugs to fix. As long as there is someone paying, a project is never finished and you rarely start a new project from scratch.
Ah okay. I get your point!
Thnx for the feedback :) it is my first attempt at an actual script / program. The game space engineers got me to look into c# and now I'm getting the taste for it outside of that game (which I kept at very basic if/else scripts). I would like to learn more about C# since I saw you can do a lot of cool things with it 😊 and it seems like a lot more fun than making html/java/JavaScript (tried that a long time ago and didn't really like it). For now I'm mostly focussing on trying to get a feel/understanding for the code, understanding the mechanics, syntaxes, terminology etc. I am trying to get a hangman type game going (friends suggestion to start with, he codes in a different language, not sure which one) and at the end I would like to "reset" the game, instead of having to "reboot" the program. So want to play again? y/n - Y = go back to start of game, N is exit. I also looked up someone else's way of creating a hangman game and trying to learn from it, since I had no clue how to hide a string when written! So far having a lot of fun with it, but it's a lot to keep track of 😁 mostly because I want to actually understand the code before typing it in and using it myself (instead of mindlessly copy pasting). There is still a few lines I don't quite follow, but today I already learned quite a bit of new things (while/for/Y-N/StringBuilder/bool). And I think I understand what you mean, but correct me if I'm wrong, as I'm trying to learn! 😊 So instead of having the game run in the "static void Main ()" (not sure if I wrote that right XD), it'd be better to make a, not knowing the actual term, 'subprogram' ie "public program Game()" which you can then go to, instead of using labels? Not sure how I would do that though... I now ended up throwing the game in a while (!win = true &amp;&amp; lives &gt; 0) loop, which works a lot better (no more after if goto start stuff 😉). But I'd like to update the line where the hidden word is instead of ending up with a console full of text ;) but that's for another day! Also, the way you describe using lists / arrays is what I would probably need for some other ideas I'm having :) Anyways thnx again!
Keep it simple. Do not overengineer a solution. Keep it as simple and straightforward as possible for as long as possible. Using composition in conjunction with inheritance. When I first started out my resources only really talked about inheritance, composition as a purposeful tool was just kind of ignored. The further I got into things composition started cropping up, and it wasn't long before people were saying inheritance is evil you should only use composition. The truth if you should use both. You need to weigh the pros and cons of each method for the situations. In most situations you'll want to both use inheritance and composition at the same time.
Heh, reading the article made me think "I wish there was a type-name for `List&lt;T&gt;`". Why? Because the game I'm wetting my toes at modding with is a Unity Game (Pathfinder: Kingmaker) and of course there is an assembly with `List&lt;T&gt;`…
The closest thing is looking into style transfer research, though I have a feeling it might not be sufficiently powerful. You might have to do a mix of feature matching and separately trained synthesizers for different body parts. Or you can matchup the latent space between something like the GAN synthesis for anime faces and the encoder from a GAN of real faces, though I wouldn’t know how to do that. I’m just guessing out of my ass though.
Click bait headline. &gt; The debate between String and string though is not a simple style debate, instead it has the potential to radically change the semantics of a program. Yes it *does* theoretically have that potential, but that’s literally never an issue in practice, leaving it as a style debate.
See, I imagined layer drawings where you use circles and wire frames overlaid on the original image, then overlay limbs, match skin tone, etc... At this point I may as well learn to draw.
You've got some odd `if` statements... if (!File.Exists(sourceFile) == true); Nothing happens here except potentially any side effects of File.Exists. It's an `if` without any `then` due to that semicolon. if (!Directory.Exists(newPath) == true) Directory.CreateDirectory(newPath); { try { File.Move(sourceFile, Path.Combine(newPath, Path.GetFileName(sourceFile))); } catch { //DoNothing } } This `if` will `then` create a directory sometimes... And you have an entirely unrelated block that will always execute the `try/catch`.
If Unity can do it, anything can do it.
It may not be appending to the log file, but instead keeping the whole log in memory and saying log+="new message", then writing to a file. With out know how exactly you are writing no one can say for sure. However just appending to the file should cause no performance issues at only 100kb. Something like Log4Net is bullet proof with the file appender. It will take care managing the log file for you. You could also tell it to create a new log file once it reaches 100kb.
But does it? I’ve never seen it. That said, I always use C# type names myself (unless I’m calling static methods).
&gt; Click bait headline. Come on, now. That's not what "click bait" is. You can disagree with the content of the blog, but to suggest it's deceptive is just wrong. This blog post makes a reasoned case to support the thesis.
I almost wish that the current syntax for arrays was actually the syntax for creating Lists instead of Arrays, and that Arrays required a more “normal” construction. Kind of like how JavaScript’s arrays, using normal C-style array syntax, are actually more List-like under the hood, and aren’t true, fix-sized arrays. I get why it can’t be done, especially since Lists are relatively “new,” but for day-to-day programming I use 99 lists for every one array in C#, and some kind of syntax shortcut would be nice.
Wow, this is awesome
&gt; Come on, now. That’s not what “click bait” is. You can disagree with the content of the blog, but to suggest it’s deceptive is just wrong. Yeah ok, that was a bit much. I’ll go with slightly misleading or exaggerated, in my opinion.
k
I am in the worst camp. Using string for variable/member definitions, and String for static methods (String.isNullOrEmpty() and the like). When I catch myself using String, I always correct it (also VS showing it in a different color helps), and I feel bad when I look at some old code and I find String all over the place.
I just sign up in reddit to vote up your post. Seems interesting and valuable work.
Cool, that makes sense. Is there a specific class of prediction that would prevent ML.net from being used for?
/u/coreyfournier Thank you! Couple of clarifications: 1. This is using filestream and writing a single line of text. I beleive we are using append. 2. *Should have mentioned this before* The slow down is specific to this single installation. We have hundreds of installation that work without error, which is why I am leaning toward a windows account setting. Thank you again!
This is awesome. Going to save this for later. I am interested in starting to write using .NET Core as I've done a few projects with Raspberry Pi, but it was a while ago before Core was even available.
I moan at people daily(weekly?) who use the same class name for two classes that will one day meet. Sure "namespaces" sounds like a solution, but namespaces are like boxing referees, "Blaa.Thing is now BlaaThing, Bleh.Thing may remain 'Thing'". It's a crappy solution to a problem which wouldn't exist if naming mattered to the authors.
Ah logical fallacy time. If you go to Scotland and see one black and white cow, this does not disprove the existence of cows painted differently.
`Concat` will outperform `Format` as it doesn’t need to parse a format string.
Nonsense. I have in my career not seen it, and I’ve seen a lot of code. So I think it’s an exaggeration to claim that it’s a problem in practice. I am obviously not claiming that it can’t happen. But in practice, string vs. String really does come down to style.
I have one tiny project that I need some help getting loading bars working on.
Honestly I was hoping this would descend into an argument ending with Godwin's law being invoked. ;)
The latter is compiled to the former iirc. The latter is much nicer to work with.
I feel like the things that break when you do use `String` and mean `System.String` are breaking a different guideline that warns strongly against naming your own types similarly or identically to very common types in the .NET libraries. I've run into this before when I had perfectly good reasons to name a class `Process` but the burden on me and my customers was very large because it was often used in the same context as `System.Diagnostics.Process`. I chose to rename my type because I didn't want to ask customers to be cautious on my part. That said I think the worst thing a project could do is *mix* `string` and `String` interchangeably. Make one your team convention and stick to it. I prefer using the C# aliases to keep them consistent.
I was pointing out the logical fallacy and that still stands. Until you've seen all the code you can't not assert that it won't happen to as soon as tomorrow :) &amp;#x200B; Tangentially, code generators are supposed to use the full name, so you'll always see "System.String" instead of "string". From memory it's something to do with making it easier to generate code for different .NET languages, but also specifically to avoid class name clashes. So if we're not generating code I'd never countenance using "String".
It may be a bad/slow harddrive instead of a weird setting?
&gt; some kind of syntax shortcut would be nice var list = new List&lt;int&gt; { 1, 2, 3 }; Sure, arrays are even more terse, but only when when type inference is possible: var array = new[] { 1, 2, 3 }; This shortcut isn't allowed if the elements have different concrete types (the array type will _not_ be inferred to be the same abstract type): var array = new[] { new XElement("foo"), new XAttribute("bar", "baz") }; (1,14): error CS0826: The type of an implicitly typed array cannot be inferred from the initializer. Try specifying array type explicitly I have to explicitly declare it as XObject: var array = new XObject[] { new XElement("foo"), new XAttribute("bar", "baz") }; …at which point, frankly, it's really just three characters less than a list: var list = new List&lt;XObject&gt; { new XElement("foo"), new XAttribute("bar", "baz") };
The same issue still applies to all types which do not have an alias. One has to be careful even when using aliases for the primitive types. Unfortunately full namespacing instead of using declarations are just too much of code pollution. While possibly ugly writing proxy classes and using mapper can keep your own domain space clean. This can be easily done for third party packages as database clients but is much harder for complex “datatransfer”-objects which you should avoid IMO. If you really keep foreign code outside your business logic namespace pollution doesn’t occur and hence `String` becomes `string` again.
If you find yourself using Arrays a lot more often than lists, you're doing something wrong. More often than not, you know the size of stuff you wanna put into the container. And in those cases, arrays are always faster and more efficient than lists. Exceptions apply, but that's my rule of thumb. Only use a list if you actually need to use a list.
"Not even \*\*Hitler\*\* would use \`System.String\`". \~Some Developer somewhere, probably ;)
I was in the same camp until I joined a new team where they all said they preferred string; so to keep things consistent I changed.
I'd be interested to see the curriculum. &amp;#x200B; My offering is to write code rather than read books. You can read books and there are some great ones, but it's better to write code. You will find problems you have to solve, research stuff and then turn that into working code. It doesn't matter if it's wrong or bad at the start, the second try will be better. Second. Learning is hard at the start, and gets easier the better you get. You will learn little in the first day, some on the second day and lots on the third day. So always remember it will get easier. Finally, write code.
We've found DataDog to be absolutely invaluable at my organisation.
Is that BigQuery link supposed to show some results? Was it recently blocked? (I'm getting errors such as "VPC Service Controls: Request is prohibited by organization's policy. Operation ID: …" or entirely empty results.)
Thans for the advice! The problem I find myself facing right now is to find “problems” for which I can write code. Got any tips on what to write code for, like real life applications etc?
Thank you so much! I'm sure this will help immensely at understanding why I was having issues. I'll let you know if I have any questions.
&gt;Really good points. A real world example of such ambiguity is in Unity. &gt; &gt;`System.Object` vs. `UnityEngine.Object` vs. `object` Is that Jared's argument? Because I don't follow (and kind of feel while reading Jared's post that I'm being trolled). Clearly, this is an example where the designers of Unity screwed up. Don't name your class `Object` or `String`. Ever. _Unless_, that is, you really _do_ intend to be a substitute for those built in runtime types. I don't know enough about Unity to answer that. If UnityEngine.Object _isn't_ the root class, then it really shouldn't be called that (much like `System.Xml.Linq.XObject` is called `XObject`, not `Object`).
Unity is full of bad practices.
Interesting. All these years I thought String was just an alias that the precompiler turned into string. I would still fire any junior developer that made a class named "String".
Sure, give [CodeWars.com](https://CodeWars.com) a go. It give you really small programming challenges. Some are hard, some are easy, but the nice thing is, you can look at the answers other people posted and learn a lot there. &amp;#x200B; Otherwise just pick anything. Write a bit of software in which you can store all the good ideas you have for what to write? Seems like a good starting point :)
I named an inner class "Task" the other day and it was a class that was doing a lot of async stuff. I noped out of that decision pretty quickly and changed the few related classes to use plural naming instead - so "Tasks" instead of "Task." In retrospect the plural naming is probably a tad better, but sometimes the best name does clash and you're left with namespacing, picking a slighly off name, or using a Java meme class name (FactoryAdapterWidgetFooBuilderManager).
WooHoo! Day made :)
Never say "never". Sometimes it's ok to name your class Object/String/etc. You mentioned this yourself: If you're developing within a framework (like Unity), it's ok to enforce certain assumptions like this. Maybe you work in an environment where you want all classes to be derived from a an extended version of `System.Object`. I think it's 100% ok to name your class `Object`. Sure, this will lead to ambiguity. But sometimes that's ok. Because this ambiguity tells people "Don't use System.Object if you're in my framework." Unity's mistake wasn't that they named their base class `Object`. Their mistake was that `UnityEngine.Object` isn't a generic enough class to be a base class for everything inside Unity framework.
Thanks dude! :)
&gt; It's a crappy solution to a problem which wouldn't exist if naming mattered to the authors. That is wildly untrue. There are billions of libraries out there. You think my if everyone *just tried harder* that no single classes would clash? Sure, within the same project I can see that clashing should be rare to zero. But namespaces solve clashing for all those other 3rd party references you have brought in as well.
I still feel like consistency is more important then these nit picky arguments.
&gt;If you find yourself using Arrays a lot more often than lists, you're doing something wrong I disagree with everything you just said other than the very this very first sentence.
I end up using this in a stream where I need a cohesive array, but I will look into those to see if they can fit in the paradigm.
&gt; If you find yourself using Arrays a lot more often than lists, you're doing something wrong. I think you meant the opposite. Also, does anyone else tend to avoid arrays and Lists? Their interfaces are usually wider than what is really needed. Read only collections with an indexer are what I use most. I do work on code where the difference between `for (var i = 0; i &lt; array.Length; i++) DoStuff(array[i]);` and `foreach (var o in array) DoStuff(o);` matters and using custom contracts with narrower interfaces can lead to a lot of type parameters, including seemingly odd stuff like `interface IIndexableReadOnlyCollection&lt;T&gt; where T : IIndexableReadOnlyCollection&lt;T&gt;`, in order to propagate concrete type information so that the compiler can inline otherwise virtual method calls.
Implementing this now. Thanks for the heads-up.
The way I see it, Objects aren't an end-all-be-all. They're a convenience. Use minimalism. Use structs, strings, and value-types We should program as memory efficient as possible regardless of any kind of external memory management. C# shouldn't be better Java, it should be C with object support.
Thank you u/TheManWithSomeName I'll make that change, I did end up getting it resolved
Thank you u/Avalan4er, I ended up discovering that and it did resolve my issue
&gt; I guess Guid and DateTime but also static classes as Math could be troublesome. File and Directory are pretty common ones to see conflicts with, in my experience. And of course whoever's File and Directory class have to use System.IO classes of the same names.
&gt; Azure Service Buses While I've used rabbit for a long time, I do have to admit I'm quickly becoming an ASB fan boy.
Ah oops, I did mean the opposite! Typo! :D
I should have qualified what I said as you're absolutely right. If a developer names a class "Object" they need to be shot. If a developer working on Project X decides that he wants two entities and calls them both Entity but in different namespaces they should be shot. If a developer uses a popular package, say JSON.NET and decides to add a class called JSONConvert (JsonConvert? can't remember), they should be shot. And there could be shootings in some 3rd party libraries where naming is overly generic, but that's just bad craftsmanship. But you're absolutely right. Comparability across an ecosystem is part of why we have namespaces, I was just rather caught up in my own little world :)
It was a mistake. I meant the opposite of that. So you fully disagree with me. That's fine. :P I'm curious as to why though.
It finds the first post because you break inside your if statement. Remove the break statement inside the if and the else and only keep the one at the end of your case and it should work correctly
You mean in case 3 the foreach loop?
I figured it was a typo, but I found it funny. While I'm sure it probably varies depending on what domain you work in - I find that performance increase you get by using arrays over a list almost never matters. Generally speaking, when dealing with collections I find myself wanting to do things like query the data, sort it and other general set type functions. I often do not know the number of elements in the collection other than perhaps an upper bound if it's possible that I could be receiving large amounts of data and I want to implement paging. I only find myself using arrays when the data is structured in a certain way and I need to maintain that. Digesting CSVs as an example. Beyond that, the speed bottle neck has never been with the data structure, in my experience. All that being said what I actually use most frequently is IEnumerable.
&gt; Unity’s mistake wasn’t that they named their base class _Object_. Their mistake was that _UnityEngine.Object_ isn’t a generic enough class to be a base class for everything inside Unity framework. &gt; &gt; Similarly, regarding Jared’s argument, I think it’s perfectly normal for a framework to have a _String_ class as a replacement for _string_. But it better damn well be a complete replacement of _string_ such that you’d never want to _string_ ever within that framework. Yes. I had originally written something to that effect, but discarded it because I couldn’t find a good way of putting it. Go all-in or take a different name.
Get a firm grasp on the S.O.L.I.D. coding principles as well as the different data structures and when to use them.. Be open to criticisms. Don't rush to the implementation, take time to analyze and weight each options with their pros and cons (trust me it will save you a lot of time compared to a huge refactor). On the other hand, sometimes it is better to get something working quickly amd not waste too much time coding "for the future features". If your code is well done it should involve minimum changes when the time comes.
Ya. Remove the case located in the If statement inside the foreach loop and in the else
Ah fair enough. I'm a game programmer. To me, every microsecond matters. I imagine outside of games Lists are a lot more popular.
On a side note, not to be critical because you are clearly learning to code, but you should read a bit on Object Orient Programming and make use of classes. Coding all that code in a Main is eye cancer. This way Logbook should be a class with distinct functions (AddEntry, Clear, SearchEntry, etc) and hold a list of entries internally. In your main you create an instance of the Logbook class and simply call the appropriate functions depending on the user input. You will then see how easier it is to both read and understand what the code does.
&gt; I was pointing out the logical fallacy and that still stands. Until you’ve seen all the code you can’t not assert that it won’t happen to as soon as tomorrow :) I think (thought, at least) that the meaning was clear enough in what I said. As for code generators, as long as the name spaces are controlled (with using statements), it should be fine to use C# types. The lookup rules for types only take the current file into account, normally.
Exactly. Part of the problem is in Unity's early days they wanted to treat the C# end of things more as a sandboxed scripting layer instead of giving people the full power of C#. Over time they've rethought that stance but some of the changes and decisions they've made have to be kept for backwards compatibility purposes.
Yes I could definitely see the performance being an issues in gaming, high frequency trading and impeded systems. I work primarily in enterprise and web. Arrays are comparatively rare.
Right.. Hitler was all about efficiency :/
I know but the assignment is to make it this way. not allowed to use classes. But there is a problem. if i remove the break; The message in the else black will show even if the if statement is successful
I get grossed out when I see string It looks like a control word (and not an object) like namespace, class, var, out
You have three main files you care about: MainWindow.xaml, MainWindow.xaml.cs and MainWindowViewModel.cs. You are right that if you do MVVM right, MainWindow.xaml.cs will have almost nothing in it. Probably just a constructor that creates, or accepts as a parameter, your view model class, and sets it as the data context. ##View MainWindow.xml is where you define how the UI looks, and also where you define the bindings of the UI to the view model. For example, if `IsPolynomialFunction` is a bool property on your view model, you would bind to it like this: ``` &lt;RadioButton IsChecked="{Binding IsPolynomialFunction}" Content=... /&gt; ``` Once you define the bindings like that, changes to the UI will cause calls to the property setters of the ViewModel. This happens whether or not the ViewModel implements `INotifyPropertyChanged`. ##ViewModel MainWindowViewModel.cs will define your ViewModel class, which is will implement the `INotifyPropertyChanged` interface. ``` public class MainWindowViewModel : INotifyPropertyChanged // Probably actually some base ViewModel class. { public event PropertyChangedEventHandler PropertyChanged; protected void RaisePropertyChanged([CallerMemberName] string propertyName = "") // CallerMemberName is magic { PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName); } bool IsPolynomialFunction { get =&gt; _isPolynomialFunction; set { _isPolynomialFunction = value; RaisePropertyChanged(); } } } ``` The `INotifyPropertyChanged` interface allow changes to the ViewModel to propagate back to the UI. The binding defined in the xaml will automatically subscribe to the `PropertyChanged` event and will update the bound UI class properties when the ViewModel raises the event. ViewModel properties don't have to be simple types like bool or string. They can be complicated types with many properties of their own. Because the PropertyChanged event is only triggered when a property is set, the UI can only listen for changes to these properties of properties when the child also implements `INotifyPropertyChanged` (or it's related `INotifyCollectionChanged`). ##How do you make changes when the slider moves? Lets say the slider is bound to the `PolynomialDegree` property ``` &lt;Slider Value="{Binding PolynomialDegree}" .../&gt; ``` You might define that property like so: ``` int PolynomialDegree { get =&gt; Coefficients.Count set { SetCoefficientsLength(value); RaisePropertyChanged(); } } ``` `Coefficents` would be a property of type [`ObservableCollection&lt;CoefficentViewModel&gt;`](https://docs.microsoft.com/en-us/dotnet/api/system.collections.objectmodel.observablecollection-1?view=netframework-4.7.2). The `CoefficentViewModel` class would also implement `INotifyPropertyChanged`, and would have one `int` property `Value`. The `Coefficents` property would be bound to the `ItemsSource` of an [`ItemsControl`](https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.itemscontrol.items?view=netframework-4.7.2) The `SetCoefficentLength` method would add or remove `CoefficentViewModel`s to the `Coefficents` collection. Because `ObservableCollection&lt;T&gt;` implements the correct interfaces, these changes would then propagated back to the UI.
I've had a similar issue with a coroutine/delayed-task class of mine. It has, for example, a static method that takes an action as a parameter and calls it after a set amount of frames (`FrameDelayedAction()`) - useful for actions that need to be called with a delay - or a method that takes an Action(float) and slowly calls it with values from 0 to 1 over time (`FloatLerp()`). Because `DelayedAction` was too long (and true for only some methods), I wanted to name the class `Coroutine`, but such class already exists. So I went with `Cort`. It's shorter, short enough that I don't have to rely on code suggestion (which usually prefers `Coroutine`), still keeps the meaning, and is not some weird fancy name that contains `Helper`, `Factory`, `Foo`, `My`, or any of these "meme class names".
It's probably a firewall somewhere that doesn't allow connections on port 1433.
C# is definitely not like C or C++, you need to use another language if this is what you believe.
I mean, why should I use other people's libraries when I can make my own? A new robust Input System is being developed for Unity? Better make my own instead! Heck, while I'm at it, *why not go create my own, perfectly optimized new game engine that isn't supported by anything else and thus is useless to anyone but me.* ***Or why not go and create my own specialized hardware, with custom built-from-scratch software, and reinvent the entire wheel while I'm at it?*** ^(obvious /s)
Boo.Lang? Unity, please, rid us of Boo.Lang. Rider's code suggestion sometimes likes it too much (especially because it starts with B).
If it does it means that you have an entry that does not satisfy your condition. If you have Entry1 and Entry 2 and search for a keyword that will match Entry1 it will obviously not match Entry2 on the second Foreach loop iteration. From what I understood, your desired behaviour is to display each matching entry or another (error?) message if no match was found. If so, I suggest you to change your logic a bit. Here is how I would do it for your case3: [https://pastebin.com/r1qcsPBP](https://pastebin.com/r1qcsPBP) &amp;#x200B; You can move the Console.ReadKey() and Console.Clear() outside the foreach if you want also.
My lazy ass just does whatever resharper wants lol.
This will 1. Cause app.db to show up as a file in your project in Visual Studio. 2. Cause the app.db file to be copied to the build output directory if its file write time is newer than the file that already exists. 3. Cause the app.db file to be copied to the publish directory under the same conditions.
Neural networks currently hold state of the art in image processing (conv nets, GANs), text understanding and generation (Transformer and alike), and reinforcement learning (AlphaZero) to name the least. &amp;#x200B; In many cases it would depend on the amount of data you have, and if your area can reuse one of the big pretrained models. Generally, the more data you have, the more you'd want to use deep learning.
&gt; I'm having trouble figuring out what `int payloadLength = (b[12] &lt;&lt; 8) | b[13];` means. It's combining those two individual bytes into a single larger integer, in big-endian order. &gt;Can someone explain to me how is that event being called? How does it know when to trigger? Why aren't the parameters of it being called explicitly? The method subscibed to the event will be called by the `wpcap` object, and the parameters are supplied to the method each time the event is raised. How that works is an implementation detail of the `wpcap` class, presumably it's raised every time a packet is received and the `byte[]` is the contents of the network packet.
This is the fun thing about logical fallacies. Actually assuming that your meaning was clear and therefore the protagonist (me as always) is wrong is also a logical fallacy. Honestly it's just for fun, sorry if it was annoying. It would certainly work, but it's not how the guidance is or was written. Specific language type aliases were to be avoided. It does sound daft, if you're generating C# code, it will only work in C#, but it's what the guidance said. Comically my last paragraph was also an abuse of a logical fallacy. Um... Appeal to authority probably. I'm asking you to believe my position because some authoritative entity said it was right without providing any actual evidence :)
That was my initial thought as well. The system hosting SQL needs to have the firewall configured to allow SQL connections. Since it's running as a named instance you also need to allow the SQL browser service in the firewall. That one is the kicker for most people. One last thing - the domain user running the program has been added on the remote server?
Going to need more details. I'm guessing th 'search' function is case 3 in your switch case? Tell me more of what it should do
&gt; This is the fun thing about logical fallacies. Actually assuming that your meaning was clear and therefore the protagonist (me as always) is wrong is also a logical fallacy. Honestly it’s just for fun, sorry if it was annoying. Oh no, it’s all good :) &gt; It would certainly work, but it’s not how the guidance is or was written. Specific language type aliases were to be avoided. It does sound daft, if you’re generating C# code, it will only work in C#, but it’s what the guidance said. Right ok. I must ad it, I am not familiar with it. We use some code generators at work (self made over the course of.. many years), and they tend to generate code that’s horrible to read and without much consistency :p. They use C# names, I think, but I only look at it if debugging. &gt; Comically my last paragraph was also an abuse of a logical fallacy. Um... Appeal to authority probably. I’m asking you to believe my position because some authoritative entity said it was right without providing any actual evidence :) Well I believe that the guidance says that, at least ;). I generally only ask for evidence if I am skeptical for some reason. Which is often, but not now.
Yes the domain user has been added on the remote server. I also tried turning the firewall completely off on the server just to test it and I still wasn't able to connect to it.
This probably isn't helpful at this point, but this is a really good reason for you to start using git on every single project, and learn to commit often. When things like this happen you can compare versions and see what changed.
Thanks for the reply! &gt; It's combining those two individual bytes into a single larger integer, in big-endian order. Is it like b\[12\] is 11111111, and b\[13\] is 00000000, so b\[12\] &lt;&lt; 8 | b\[13\] would be 1111111100000000 ? Not sure I understood entirely what you said at the moment , but I'll check that link later and hopefully will understand. Thanks again!
&gt; Remove the case located in the If statement inside the foreach loop and in the else I know this is a student's work and all, but...shudder.
([Literally reinventing the wheel](https://www.youtube.com/watch?v=KgkyGMU2IEo)) :D &amp;#x200B; There's actually an interesting side note to this. A common anti pattern in companies is to try and share code by wrapping it all up in a burrito and crapping it out of nuget with ever increasing dependencies and specialisations until the various teams literally drown in effluent. If you're doing microservice style development, just go with duplicate code, or borrow from a gist, but don't call anything Object! Speaking of effluent, my cat has and I don't think it's where it's supposed to be :/
I'm a game programmer too. List is almost always better unless you know 100% for sure that you're never going to add or remove elements. List&lt;T&gt; isn't actually a linked list, it's more like an array backed vector from C++. This means that a foreach on a List&lt;T&gt; and an Array are effectively exactly the same, since List&lt;T&gt; foreaches the underlying Array. Whenever I see a codebase where they only use arrays, it turns out they've basically implemented List&lt;T&gt; in Array helper functions. TLDR: use arrays only when you will never insert/add/remove, otherwise List is gonna be better.
Thanks dude
Eventually you get to an API that uses async calls into the OS, such async File API or the async methods of HttpClient or runs CPU intensive code on another thread using Task.Run. Async is contagious and will 'infect' a codebase quickly. Used correctly it greatly improve performance but it shoul be used sensibly
This right here. And if you have a good idea how big it's going to be, you can force the List&lt;T&gt;.Capacity value at initialization. The default is 0, but the first item added causes it to reinitialize to 4. But if you know that 10 items will cover the 90% case, just set Capacity to 10 first thing. The only reason it would ever change after that is if you add an 11th item to it. And that's a runtime issue. And you could even work around *that* if you found it necessary.
Are you coming from a java background?
Thanks!! I'll definitely use that send email project!! The only thing I'll add is reading names and emails in an excel file.
Deserialise as object then I suppose you could look at the first element to see what type it is then recast as your specified type?
You verified the sql express has an instance running on that local machine? https://www.connectionstrings.com/sql-server/
C# is very much like C++. In fact, with the `unsafe` keyword, it can become almost entirely indistinguishable from C++. [Here's a link to a thread about a guy that wrote an EFI module in C#.](https://old.reddit.com/r/csharp/comments/b5dvfr/c_hello_world_running_without_os_or_runtime_by/). If you look at the code for his POC out on GitHub, it looks a *lot* like C++.
You're a good sport :) Also I found the cat problem. It was in the bath...
Just wanted to stop by and say thanks for this. We went with this route and have Pipelines building the DACPAC and Octopus deploying it. We've had it in our rotation for a few weeks now and everything works exactly how we were hoping it would.
Read up on composition over inheritance. When you first start out in OOP with a language like C#, it can easily feel right to create layers of inherited classes in an attempt to avoid code duplication These inheritance chains can quickly morph and grow out of control and create all sorts of problems. [https://en.wikipedia.org/wiki/Composition\_over\_inheritance](https://en.wikipedia.org/wiki/Composition_over_inheritance)
I realize a List is implemented as a dynamic array internally. I disagree with you though. No code base should ever use only Arrays, though. Every tool has a purpose, including lists. In my experience in gaming, you don't end up in too many situations where you're constantly adding/removing items from a *sequential container*. This partially depends on your programming philosophy too. I don't know about you, but personally, I try to avoid mutating state as much as I can. When your code is too stateful, it is harder to test, it is harder to serialize, it is harder to replicate, and it's harder to debug. Lists have internal logic to keep track of capacity and count. They produce garbage. It's very easy to end up in situations where you're doing a lot of unnecessary boxing when using Lists. If your function is returning a list, that is going to allow the user to add/remove elements and mutate state (this goes back to the "stateless systems are better" philosophy). In contrast, arrays have no overhead logic for keeping track of items inside them and capacity checks. They're simpler, and not as stateful as lists. Because of this, they don't produce as much garbage. This makes any code using arrays inherently less error prone as well. I could dig into countless examples where people incorrectly use dynamically sized containers when they don't really have to. There is a reason most core Unity functions (physics raycast functions, component/object finders, etc.) work with arrays instead of lists.
I will look into it. thanks
Git is the same as git hub?
Thanks, i fixed it. last passible minute too :P I was panicking
C# should dump or replace the ugly "break" statement. What I suggest is a new similar construct be added. The old style switch/case block will still work, but the new one will be encouraged for new development. &amp;#x200B; // Example new construct select(a) { when 1,2,3 {...} when 4 {...} when 5,6 {...} otherwise {...} }
Like, check if there is a float in there, or something. Then cast it to the corresponding class?
Thank you very much!!!
GitHub builds on git and adds stuff like an issue tracker, a wiki, and the pull request workflow. The version control is git.
Is the SQL browser service running on the remote system?
Interesting, my experience is a bit different. I don't often run across a container where you aren't constantly adding or removing items. Things like: list of equiped weapons, list of maps in the current mp queue, list of attacking enemies, list of resources, list of all entities, etc. Actually, searching through the codebases, the only Arrays I'm finding are totally static things, like an array of month names or things like that. It sounds like you're building completely functional? The tradeoff for not mutating is that you're spending a more time creating objects or copying memory around. &gt; In contrast, arrays have no overhead logic for keeping track of items inside them and capacity checks. I disagree with this. Any complex usage of the array will require you to add your own code to do stuff like bounds checking and tracking deletable items and whatever else.
i dont know for sure, because im no expert, but i am pretty sure for the second methodology you have here, you would have to do a series of explicit data type conversions before adding them all together, and you would have to to any math involved before hand, then convert the result to a string, then add them together.
Honestly I think this would be the "best" camp, were it not for the issues raised in the article. It makes the most sense from a stylistic point of view.
Unless you have many possible classes you could always have more json files and devote each one to a single class. Alternatively, json file can get much more nested and complex than a single property:value field so you simply nest them inside “macro” categories.
For all those cases you mentioned, I usually end up using hash sets or maps, because I want to guarantee uniqueness.
I been on git hub, it's a bit complicated. But i know i have to learn to use it.
Could you please elaborate on what this means?
For tables use a DataGridView control
Right I've already come across that, but the user requirements are, they want to use a 2D-array, if you have any ideas let me know.
Do you also use Single and Int32?
Yeah, this was what I always did; use the type alias when defining a variable, but reference the class directly when invoking a method. If you really do have compelling reasons to define a new class called String, then maybe it's best to define it in an infrequently used namespace to reduce the risk of collision; in general I'd say it's still too risky for most projects.
I always use string interpolation. Aka $”{obj}”. It makes formatting my string much easier in my opinion because it allows you to access object fields/methods without breaking your string. I find its particularly useful when formatting URLs inline. Uri address = new Uri($“{baseAddress.toString()}/v1/{extensionRoute.toString()}”);
That link has a demo that displays the audio coding format of the file that's selected. If I dig enough in the source code, I think I'll be able to find it. This is a great start; thank you.
When you do, let me know what you think! Eventually I plan on going over how to publish specific for the platform as well.
If I'm using them as an instantiated instance of a class (or accessing their static features) then yes, yes I do. In the case of Int32 it's a struct but can still have a constructor.
Good! Glad I could be of some assistance. Are you guys generating a SQL migration script from the DACPAC for migrations or something else? Just curious.
If you do the serialization yourself, you can instruct the serializer to explicitelly write the class info into the json object
I do this as well. His argument doesn't apply for using String. isNullOrEmpty () etc because the compiler will let you know its time to pick a different external library that doesn't have a class or namespace called String. &amp;#x200B; The real reason I should change is, most people use string. isNullOrEmpty ()
&gt; I thought about using the INotifyOnPropertyChanged Interface, but I can`t get my head around to how I`d do this. I know how to implement it, but I don`t know how to actually go the way from detecting that a radio button has changed or the slider has been moved, to calling the event in the class implementing the interface. `INotifyPropertyChanged`, and more specifically data binding, works in two ways. First, there is raising the property changed event from your view model (the calling the event from the class implementing the interface) to let the view know it needs to update, then there is the view 'notifying' your view model of a change by updating the property when the user changes it (like when a radio button changes). Thus, for example, you can detect that a radio button has changed or the slider has been moved in the setters of whichever properties you've bound those controls to. From there you can handle the logic of what to do when the user interacts with the UI (call a function, raise your own event to let your code know something has changed, etc).
I have a class named Task... I would like to go back in time and bitch slap everyone in the meeting that made the decision to use that name.
Or, and hear me out, we track down everyone who declares classes with the same name as fundamental CLR constructs and we burn their houses down until compliance is achieved.
Yes i plan to have several classes with more complex data in them. I just want to get this part down before i move on. I simplified the classes just to make it easier to understand.
That's the shit why I keep lurking on this sub :)
We build the pac from source control on Azure Pipelines, then push it Octopus where we just run a schema compare with a powershell script - ignoring things like roles and users. That also runs any pre/post deployment scripts we have, which are in the same source repo. Honestly the whole thing was pretty easy to setup. It accomplishes exactly our goal of having all deployments funneled through our source control, and automated. Now it's just about migrating all of our projects over to this system.
`new Uri("person")` doesn't make sense either. I fail to see a real difference. It's all about context.
I'll need to verify that
These kids in here talking about unity can go fuck off to unity.
Holy shit the fucking children in this subreddit. How the fuck is your comment getting downvoted? What the actual fuck is going on?
Piss off to unity.
Fair enough! Maps are great. Although the mp_map list wouldn't want to be unique and some of the others are ordered. That's a great point though that list vs array can be misleading and often the right choice is actually a map or binary search tree or something else entirely.
When you install NuGet package, and try to call any TensorFlow method, Gradient will instantiate an embedded Python interpreter, and load TensorFlow for Python into it. It then will forward your method call to it. Same for classes, properties, etc. If you are concerned about performance, in TensorFlow you define a pipeline starting from the data source and ending at your model's output layer(s). After you defined it, it executes entirely in native code (unless you screwed up something).
Thanks for trying. This is going above my head though. Maybe if I read up some more on this and get back to it.
Yeah #1 users of C# go fuck off.
Attempt 2: it is an advanced PInvoke into TensorFlow (which is a Python library).
I always lean towards `String`, because of it being a reference type as opposed to the other basic types.
Unity hasn't supported Boo for a few years now, it really annoys me that it still shows up
* Language 1: string x = “a”; * Language 2: let x: String = “a” * Language 3: let x = ‘a’; * Language 4: var x: String := “a” * Language 5: DECLARE @x as NVARCHAR(1) = ‘a’ * Language 6: x = ‘a’
You can make Mac apps, .NET Core web apps, and possibly Windows and Android apps, in MacOS without issue, You cannot work with .NET Framework in MacOS, though. Also, there's no 'Mac version of Windows', you can just install regular Windows on Mac hardware like you would on any other computer.
And I can shove this into your namespace and fuck up your programs, too. #LINQ CONSIDERED HARMFUL 🙄 public static class Yikes { public static IEnumerable&lt;T&gt; Where&lt;T&gt;(this IEnumerable&lt;T&gt; src, Func&lt;T, bool&gt; predicate) { return src; } public static IQueryable&lt;T&gt; Where&lt;T&gt;(this IQueryable&lt;T&gt; src, Func&lt;T, bool&gt; predicate) { return src; } }
I will have another full project about email marketing soon with more features, thank you for your message.
Thank you, friend.
Not familiar - can you clarify the .NET Framework statement? Also - you’re right and wrong about a Mac version of Windows. When Windows detects The underlying hardware is a Mac it adapts accordingly with drivers and support for Mac hardware architecture uniqueness (for example the T2 chip). So there are instances where Windows on Mac is very much it’s own thing, from a development standpoint. That said, yes, I understand its essentially an x86 underneath. And as I hinted at, I’d be dual-booting, not directly installing. I’m not sure if anything about C# dev or otherwise would take issue with this kind of UEFI config.
It sounds to me like they don't want you using the api in the way you want to use it. By retrying failed requests your just beating up their server for no good reason
.NET Framework is the name of the ‘old’, pre-Core .NET. It’s the one that most .NET CMS’ and many NuGet packages use.
Without commenting on your code, Shopify allows 2 requests per second after the initial 40 calls to fill the queue/bucket. Eleven hours at 2 request per second equals 79,200 requests. Add the 40 requests that fill the queue/bucket, their allowed bursts and I think you are close to maxing out the number of calls. You would need to know their allowed bursts to see if you hit the ceiling.
.Net framework is the old, bulky, Windows-only framework. .Net Core is the recent rebuild. It’s much slimmed down (not carrying 15 years of legacy baggage), cross platform, and generally the new direction overall.
How so?
I named my application core namespace as Application. How do I go back in time to bitch slap myself?
Same exact boat here. I usually just change other peoples String to string and move on with my life. I need R# to stop bitching at me.
I got creative and wrote a Parallel ForEach with asynchronous support (based on Stephen Toub's work) I always like seeing people using parallelism smartly. Good article. public static Task ParallelForEachAsync&lt;T&gt;(this IEnumerable&lt;T&gt; source, Func&lt;T, Task&gt; funcBody, int maxDoP = 4) { async Task AwaitPartition(IEnumerator&lt;T&gt; partition) { using (partition) { while (partition.MoveNext()) { await funcBody(partition.Current); } } } return Task.WhenAll( Partitioner .Create(source) .GetPartitions(maxDoP) .AsParallel() .Select(p =&gt; AwaitPartition(p))); }
Yeah, That sounds like it. And yes, it's on top of the proper list in Rider.
For example, a local that survives across an async/await boundary and get's promoted to the heap as part of the async state machine.
You can use a 2d arrary, just fill the datagridview programmatically, adding columns and rows at runtime.
&gt; You cannot work with .NET Framework in MacOS, though. But you can work with mono
Put the name of the class before each JSON string in your text file?
Also C#8 has even stronger type inference to further help with this. https://www.infoq.com/news/2019/01/c-sharp-targeted-type-new
So...... &amp;#x200B; //Pseudo Code string myString = Whatever\_class.GetType().ToString() + json serialization stuff //then write myString to file here &amp;#x200B; That mite work, but how would I be able to get the type back from the string without having to put something like &amp;#x200B; //More Pseudo Code if(myString.contains("Class\_A"){ //deserialize json string and cast to Class\_A } &amp;#x200B; Is there a neater way to do that but for each possibility? Or am I going to have to stick with a bunch of if/switch statements?
What do people enjoy about python anyway? I really don’t like dynamically typed languages since it’s more difficult to catch type errors, syntax errors, etc, and because of that, it seems like code is more likely to become a mess and it would be harder to do non trivial tasks. Plus since it’s a scripting language it’s supposedly slower, though I’ve never had to deal with that myself (although faster compiling time is nice.) Also, I hate whitespace.
It looks about as clean as possible to me.
If you're serializing the json to the text file, why don't you serializer a type descriminator into the json and key off of that, e g. _type : class_a If you're using [json.net](https://www.newtonsoft.com/json/help/html/SerializeTypeNameHandling.htm) it's pretty simple:
 public class NoIdea { public void WhatImDoing(int o) =&gt; WhatImDoing(o); public void WhatImDoing(char o) =&gt; WhatImDoing(o); public void WhatImDoing(bool o) =&gt; WhatImDoing(o); private void WhatImDoing(object o) =&gt; DoSomethingIGuess(o); }
I think you put me on the correct path. I also found [this](https://stackoverflow.com/questions/38679972/determine-type-during-json-deserialize) right before I read your comment.
A simple string.IndexOf would do a better job than a Regex; string s = "MyTeststring_001"; int idx = s.LastIndexOf('_'); if (idx != -1) { string firstPart = s.Substring(0, idx)); if(int.TryParse(s.Substring(idx + 1), out int secondPart)); { // do something} }
This is why I var the shit out of everything!
Well it presumes to understand the needs of the customer and dev team. I disagree with the OP. If my program uses a ton of memory, but I can spend time fixing bugs and implementing features instead of optimizing memory performance, and *if this is what my customers want*, then it's what I do. Not all applications are the same and not all customers care more about reducing memory usage by 5% over the bug that corrupts their database.
Ok think I might have found a solution to the problem. &amp;#x200B; To Save: First I get the class Type. Next I serialize the class into a json string like normal. Then I create a new wrapper class. This class takes in 2 arguments in the constructor. A type, and a string. Finally I serialize the wrapper class into a json string, and save to a file. &amp;#x200B; To Load: Read the string from a file. Deserialize it into the wrapper class. Now I am left with a json string that represents the data\[my original class from earlier\] and the Type of that class. All I have to do after that is deserialize the sting like normal, to whatever the wrapper.saveType is. &amp;#x200B; This is the code below. Let me know what you think. &amp;#x200B; public class Save_Wrapper { public Type saveType;//the type you want to cast this class back into public string saveData;//json string representin the original class you serialized public Save_Wrapper(Type _type, string _data) { saveType = _type; saveData = _data; } } public class Class_A { public float someFloat = 4f; public Class_A() { //do whatever here } } public class TestSave { private string fileLocation = "file path here"; public TestSave() { Class_A classA = new Class_A(); Type classType = classA.GetType(); string saveData = JsonConvert.SerializeObject(classA); Save_Wrapper saveWrapper = new Save_Wrapper(classType, saveData); string finalSavedContent = JsonConvert.SerializeObject(saveWrapper); File.AppendAllText(fileLocation, finalSavedContent + Enviroment.NewLine); } } public class TestLoad { private string fileLocation = "file path here"; public TestLoad() { string[] data = File.ReadAllLines(fileLocation); for (int i = 0; i &lt; data.Length; i++) { Save_Wrapper wrapper = JsonConvert.DeserializeObject&lt;Save_Wrapper&gt;(data[i]); var myClass = JsonConvert.DeserializeObject(Convert.ToString(wrapper.saveData), wrapper.saveType); } } }
TypeNameHandlng is the name of the function: https://www.newtonsoft.com/json/help/html/SerializationSettings.htm If type mame is available a custom deserializer might make decissions based on the zype name in the json object.
&gt; Is that Jared's argument? The post avoids judging whether a custom definition of `String` is a good or bad thing. Instead the argument is that it happens and does so much more often than most developers realize. There are definitely bad cases where developers define `String` but there are also valid uses. One I encounter the most often is serialization frameworks where mirror type systems are used. Those mirror type systems need the same primitives and hence end up defining `string`, `int`, etc ... in some form. &gt; A real world example of such ambiguity is in Unity. I don't have a lot of experience developing in Unity but I have worked with a number of their developers. They have a deep understanding of the C# type system. Given that I'm guessing they have good reasons for using the name `Object` knowing it would create some level of ambiguity.
This is good blanket advice, especially for Junior developers. But... &amp;#x200B; I often choose not to use StringBuilder for readability when I know there won't end up being an ungodly amount of strings to join together.
I would be very confused by the latter. I would do a double take and wonder where the extra characters are hidden to justify using string.Format.
Just writing this for the hell of it, although my goal is to make it very extensible, including the capability to write your own extensions for appending logs. Currently writing logs looks like this: [https://gist.github.com/CodeDead/8754469b91ffebdffb1e2571468c19a4](https://gist.github.com/CodeDead/8754469b91ffebdffb1e2571468c19a4) So that the output will look a lot like this: [https://imgur.com/5POapRL](https://imgur.com/5POapRL) Right now, the most important step is to make the loading of settings possible using configuration files, dynamically. Design wise, everything is there, so the picture in the OP is already pretty outdated. &amp;#x200B; All in all this is going to be a very light-weigt and open/extensible logging tool.
It's a regular transparent GIF like any other, been making them for over a decade, there's nothing strange about this one. Just has to do with the theming on this subreddit. And if you're using Firefox it doesn't display it with a black background, but with Chrome it will, so maybe that's the issue you're having.
I think he means variadic templates. But again, generics in C# aren't templates. Generics are resolved much later than templates are in C++. Look e.g. at how long it took C++ to make templates available across library borders (assuming different compilers, etc).
Thank you! I made some tests with reading/writing into files and now I have the results I wanted. Im now in love with the feature
Your proposal is incomplete, their families need to be sent to prison as well.
Well... That's about `string` and `object` and... I can't think of anything else. People should not name their stuff `String` and `Object` in the first place and when they do, they shouldn't expose it to a lot of other code. So yes, TFA is true, but we're already deep into "it hurts my eye when I poke it" territory, so...
I see more and more companies looking for c# devs so I don't think it will die out any time soon.
Absolutely a place for them. `Task&lt;T&gt;` is a monad in itself. I also quite like them for more declarative functional signatures, take a classic example: `public Customer GetCustomer(int id)` What happens if there's no client fr that id? null? Throw an exception? `public Maybe&lt;Customer&gt; GetCustomer(int id)` Hey, here's a method that may or may not return a customer, no more ambiguity! Of course C# 8 will allow `public Customer? GetCustomer(int id)` Which is quite similar. Another one i'm fond of is `Either&lt;TLeft,TRight&gt;` For when you want to return 2 possibilities but don't want to use exceptions for control flow.
For something as general as a repository, would you rather make it monadic (return Maybe&lt;T&gt;) or classical (return T)?
Woow! That looks great ! What do you think of F# as a Lang to do the port or move to TF 2.0?
To be fair, they're mostly useful because typenames in C++ can become extremely long.
BTW printf-style functions can be fully type safe in modern C++, using variadic template functions. It's no longer grandpa's C.
And here in lies the question... You will get a variety of opinions on this. &amp;#x200B; I'm in the camp of "A function should fulfil it's contract or throw an exception" as well as "Exceptions are for exceptional circumstances" &amp;#x200B; If the method should always return T than a T not existing is exceptional and throwing something is the correct thing to do, if however not being able to find a T is expected (e.g. id based on client input) then not finding something is not an exceptional circumstance and therefore an exception should not be used. &amp;#x200B; In the first example, without looking at the documentation the consumer has no idea what's going to happen if no client is found. With a maybe/Nullable result the consumer is **forced** to be aware of both situations and react accordingly.
The word you're looking for is ASP.NET
I agree with this guy
&gt; The post avoids judging whether a custom definition of `String` is a good or bad thing. That’s what has me confused — I read this as you saying it _is_ a good thing: &gt; Looking through these results you’ll see that String is defined for a number of completely valid purposes I can’t look at the results (I’m guessing the query exceeded a usage limit), but “completely valid” sounds to me like you’re defending them being called “String”. &gt; One I encounter the most often is serialization frameworks where mirror type systems are used. Those mirror type systems need the same primitives and hence end up defining _string_, _int_, etc ... in some form. Yeah, I get that, but I think System.Xml.Linq, Newtonsoft.Json et al have this right — have a short prefix to make this clear. XObject, JObject, etc. It ain’t pretty, but it avoids the ambiguity.
Shoving all the parameters into an object array is also typesafe. A little less efficient at run time and a lot more efficient in terms of how much code the compiler has to emit. From the C# developers perspective, the variadic template is just a work around for not having a universal base type.
I suppose depending on your Jason structure you could just have key value pairs that way you could check first elements key
Recommending ASP.NET MVC5 by Mosh course from udemy. Before the course I have never even touched web development(not just with C#, but generally) and the course was amazing, can't recommend it enough. The lecturer has really put effort into designing the course for beginners and **so far** I haven't found a better lecturer.
&gt; And the example it shows is quite beautiful Uhm.. I guess that’s subjective. I find it quite verbose.
Can you explain why you would "lean" towards reference types as opposed to regular types? I thought they both had their strengths and weaknesses that can be used in difference scenarios.
But, to explain the “None” part, it *won’t* integrate into the build process (unlike Content, Ressource, Compile, etc.), other than being copied.
Check out all the open source code [here](https://www.github.com/dilmerv) Also tutorial videos about this [here](https://www.youtube.com/c/dilmervalecillos)
Keep an eye out on Blazor
I know. But it has to be handled at runtime. In C++ you can often do recursive template tricks to get rid of runtime branching to handle the values. In the end you get type-specialized generated code for the list of arguments (not saying this is without issues of course).
[Demo Scene Video](https://youtu.be/qi3qBzsddcI)
True, reinventing the wheel has a possibility to make it more optimized, but it's still usually better to use an existing library for JSON formatting instead of making a new one. And I used to lean towards that instead of using what already exists, which slows development down immensely. Middle ground, that's where it should be, given that you can spare some performance and space for maintainability and preventing headaches.
I love F# as a language, but have not been using it for a while, because I find ReSharper irreplaceable for large projects. Anyway, there's an item in the backlog to generate F#-style APIs too. However it will happen after the initial release, and, probably, also after the move to TF 2.0 (unless it is not released for the next year or so). BTW, if you are waiting for TF 2.0 to get started, then it might be just an excuse to delay introduction. AFAIK, core TF 2.0 will not bring many new APIs. It is mostly a cleanup release, where Google decided to refactor that pile of goo TensorFlow 1.x is. The APIs will be mostly the same, but will be neatly split into different projects (AFAIK, you might want to read about differences yourself).
BenchmarkDotNet is good; Microsoft uses it in some of their internal stuff as well. It takes care of stuff like warm-up for you, avoiding some of the quirks of GC and VM behavior. But. Drawing conclusions from a microbenchmark without a basic understanding of why competing implementations behave in certain ways is not a good idea — it can lead you to draw wrong conclusions. In particular, since the code from a microbenchmark will never actually be used that way in production but will 1. interact with other code and 2. itself likely the more complex, you’ll be forced to *extrapolate* from the benchmark. Just because code performs a certain way in isolation doesn’t mean it will in production.
Lol, amazing
Agree about dynamic. Disagree about whitespace. I enjoyed F# quite a bit, and lack of these tedious curlies is actually refreshing. I am also annoyed, that in C# any actual code you write is at least 2 nested levels deep, which is extremely wasteful.
&gt;Another major issue with lists is that if you give me a pointer to a list, you could modify the list at any time without notifying me about it. If I'm a defensive programmer, I have no choice but to copy the list. With arrays, this issue just goes poof! Don't you have the same problem when you are giving a pointer to an array? You would also need to copy the array to stop someone from changin its order. Besides that, it's more obvious to just return ImmutableArray/ImmutableList, giving you more self-documenting code because it's obvious the array haven't changed.
As others have mentioned, 1 and 2, and 3 and 4, will probably respectively perform the same: the compiler will likely inline those extra methods (if you want to be extra-sure it tries, [you can ask it explicitly to inline this method](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.methodimplattribute?view=netframework-4.7.2)). So whether you put these in a different method is a stylistic choice: if you call this line of code from multiple places, or if you like it having its own self-descriptive name, do so. If it’s a throw-away one-liner, just put it inside the other method. (The JITter will have slightly less work to do, then, too.) That leaves us with 1/2 vs. 3/4. The array will always require an allocation, making it slower. Thus, for this isolated case, you should avoid the array and go for the latter approach. But in real-world code, you probably have more values and more complexity, so the choice isn’t as easy.
They're extremely useful, but I would avoid them in C#. There's no standard library for it and the concept is just too foreign to the majority of C# developers. It also does not play very well with the language. If you like them, then you should check out F# instead.
I love F#, when working with ML it does magic with data transformations. It's a nice mix of the two🙂
Haven't touched Windows Forms in ten years, are they still supporting that? I thought WPF was the way to go nowadays. Seems like it might be a waste of time to spend energy learning such an old framework. I mean, if you attend school they teach you MVC .NET Core for web development, it's not like they're teaching ASP .NET Web Forms.
Although Microsoft is providing a new JSON parser to replace JSON.Net ;) I'm delighted by that actually. It becomes a bit hellish when two libraries require different versions of JSON.Net. We're currently locked into an old version because of libraries we have to use provided by a different part of the business. Here's a problem I had to solve recently. We had an issue where by one service was throwing errors because it couldn't parse some JSON is was receiving from another service. Both were using the same version of JSON.Net, and it looked like a problem in the way it was handing type information. So I forced them to both use the same type settings, no joy. Looking at all the deployed services, it looked like some had JSON.Net dlls that were not the same size... Turns out that the portable version does things slightly different to the non-portable version. So I just had to remove the dependency from our portable library right? Simple. Unfortunately some idiot had added a single DTO which had one JSON.NET attribute on one property. So change the DTO in the source and destination services right? No. We don't control the other service and it would be hellish to get it changed. Anyway the solution was simple. I just ripped out the attribute and it still worked. The attribute was basically just giving a hint about the destination type which is pointless. I do agree with you though. I'm totally happy to write a bit of code rather than use a third party library, in the same way you might not want all of JQuery, so you write a single function to replace one function in JQuery, but I'm not going to rewrite JQuery :)
It's not just lazyness, this discussion is active bikeshedding 🤣
You get used to it really quickly and it's just so nice to be able to write $"variable has the value {variable}" instead of string.Format("variable has the value {0}",variable). I don't hate on "variable has the value " + variable particularly for simple cases, but again, once you get used to $"" it makes life so much easier if you're constructing a string with more than a couple of variables in it :)
So lesson is, only use “string”?
The thing is, I once was in a state where I *would* rewrite jQuery (or rather do something similar for Unity/C#). Though, that was also a time when I really wanted to use IMGUI instead of UI objects. Glad that has passed.
As a C++ guy, I hardly use the string type in C#. I stick to the old char buffer way of doing things. BUT!!!! And it's a big BUT....I am totally aware that I am writing more lines of code than needed when dealing with strings/buffers. But hey - that's the way us C++ types do things, right?
:) It's quite fun though. You learn a lot. I built something that looks like RestSharp recently. It's not as flexible or as tight as RestSharp, but it taught me quite a bit :)
Well that was cool
This is amazing!
no, you are amazing
&gt; For really bigger strings StringBuilder is better. And by bigger you mean many strings, like loops and whatnot, right?
Dude this is very cool. Do you plan on sharing the code or maybe releasing a plugin?
Amm, repost?
Create a WPF app where you can drag and drop a file or multiple files from the file explorer, and if the files are images then display each image in a listbox, next to the filename. Should be quite the mishmash of different concepts to know about, which should be a challenge for a beginner, but the task itself isn't difficult.
What's changed since the last time this was posted?
If you want to combine multiple elements, separated with ", " then consider using `String.Join()`. It's especially useful if you have a variable amount of elements.
Have you considered anger management, as unity seems to have made you irrationally upset.
I once made my own Lazy&lt;&gt; class before I found that C# already has its own. It essentially worked the same way, and even had an implicit cast to its type (Lazy&lt;GameObject&gt; can be implicitly cast to GameObject).
I am glad that I've been using string since the beginning. I never really thought of the differences between string and String, but now I know I've been doing it right.
Your repository layer can have a dependency to your domain - that is fine, as the data access layer is 'further away'. Dependencies should always flow inward. [https://social.technet.microsoft.com/wiki/contents/articles/36655.onion-architecture-in-asp-net-core-mvc.aspx](https://social.technet.microsoft.com/wiki/contents/articles/36655.onion-architecture-in-asp-net-core-mvc.aspx) In this way when you need to change data storage mechanism only that layer must change, as the inner layers don't know about it. You can define an interface for data storage in your domain, then implement that interface in your data layer. The domain objects then don't need a reference to the data layer, they can just work with the interface in their layer
I think this is a repost. Not sure tho
Okay let's say I define the interface IRepository in the domain layer and implement it in the data layer - e.g with the class CarRepository : IRepository{...} But then when I'll need to use the CarRepository in my domain layer I will still need to do IRepository carRepo = new **CarRepository()**; which will again require a reference to the data layer. Or am I missing something?
I use Parallels to run a Windows virtual machine on my Mac, and I use Visual Studio in Windows. Performance is ok, but obviously not as good as it would be natively - but you get the full feature-set of C#. If you're learning, you'll find that tutorials, etc, assume that you're running on Windows, and may not work for a variety of reasons if you're not, so I'd suggest doing that to start with. Once you understand the envrionment and terminology, you might decide that you only need those features that you can use on the Mac version of Visual Studio, but I'd hold off of that until you know more about it.
Sorry, I had a drink on me when I wrote that. I lean towards `String` over `string` because unlike the other basic types of C#, it's not a primitive type, and it feels more consistent to treat it like any other class rather than switch to a different casing for just that one type.
Look up Entity Framework.
Thank you for the quick response :)
Ideally, depending on your design, the domain objects would be ignorant of the fact they even need persisted and would be saved by an outer layer instead... However you could just use Dependency Injection in order to inject the implementation - either using a DI Container, or simply by taking an IRepository in the constructor of the object and passing that in from an outer layer when entering your domain model.
Repo: [https://github.com/CodeDead/Logger](https://github.com/CodeDead/Logger)
That’s quite a broad definition. Using databases with WPF is no different than using databases in general, or using WPF in general. So if you’re searching specifically for that combination there probably isn’t anything. If you explain more about what you want to do maybe someone can point you to a better direction.
That makes sense, I guess just the slight differences come down to syntax a little bit, right? My ultimate goal is to make a position assignment program. I have made a layout of all the different spots made with labels and each label has a corresponding textbox to display who is assigned to said position. I like this approach because it is more UI pleasing to look at compared to a dataGrid. So I want to be able to databind a textbox with a database in order to save users names in their corresponding positions and allow editing of that textbox if it needs to change.
Sell it to r/citiesskylines I know there game uses unity
Great write up!
Removed: Duplicate, spam. Please review and follow the [Guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion)
Removed: Rule 4. Check out /r/learnprogramming's FAQ: https://www.reddit.com/r/learnprogramming/wiki/faq
Removed: Spam. Please review and follow the [Guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion)
I'm sorry but I don't get what you mean. Even if I were to inject the repository in a object in the Business Domain layer, I would still need to reference the data layer. public class CarConsumer { public CarConsumer(IRepository repo) } will still need to be initiated as this: var carConsumer = new CarConsumer(new CarRepository()); which means that it'll still need a reference to the data layer. Can you provide a code sample and project structure which explains how that can work? Also, can you elaborate on the idea that an outer layer takes care of the persistence of the objects in the Business domain? I haven't seen such pattern and it sounds quite interesting.
Hi friend, Thank you for sharing your opinion, But I think when it comes to developing apps, the framework used is selected according to your goal. Example: If I am building a simple pdf compressor to compress my files, the easiest way to develop this is using Windows forms or maybe WPF, but windows form is still easier especially for beginners. And why still Microsoft release these frameworks in the latest .NET versions ??! why a lot of companies like devexpress, Telerik and other companies still update and create controls for such type of applications, simply because you may need them in some projects. In my humble opinion, each Type of projects targets certain application development ideas. A good programmer knows how to achieve the goal with the easiest and simplest way he can. Finally, the projects I am building targets beginner c# programmers and goal is to let them have some programming ideas, it's not about windows forms or WPF or MVC or whatever, it's about the Project Idea. &amp;#x200B; Anyway, I may be wrong in my opinion, if you have any comment, I will be happy to hear and learn from you. Thanks.
One thing I haven't seen anybody mention is that if you're making a .NET library/API, it will help consumers of the library that are using another language like [VB.NET](https://VB.NET) if you use the CLR type in any method names. int does not exist in [VB.NET](https://VB.NET) for example, so Convert.ToInt makes less sense than Convert.ToInt32
https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/enable-net-framework-35-by-using-windows-powershell
I wouldn't say flat out avoid but if you go nuts your going to end up with something [in this blog post](https://blog.ploeh.dk/2019/03/18/the-programmer-as-decision-maker/) which as the author points out the "result is so non-idiomatic that only the syntax remains of C#". "Monad like" without chaining things together crazily can help though, Look how powerful IEnumerable&lt;T&gt; is. And funnily enough the more i play with F# the better it looks (for some applications).
That's the same as the batch command am using as shown above but in powershell instead
Look up DDD and onion architecture or 'clean' architecture. The commenter isn't doing a stellar job at explaining what they mean.
 try { Ping myPing = new Ping(); String host = "google.com"; byte[] buffer = new byte[32]; int timeout = 1000; PingOptions pingOptions = new PingOptions(); PingReply reply = myPing.Send(host, timeout, buffer, pingOptions); return (reply.Status == IPStatus.Success); } catch (Exception) { return false; }
[Found this](https://stackoverflow.com/questions/2031824/what-is-the-best-way-to-check-for-internet-connectivity-using-net)
&gt; You have three main files you care about: MainWindow.xaml, MainWindow.xaml.cs and MainWindowViewModel.cs. The MainWindowviewModel in this case is a class I need to create, which communicates with the MainWindow? So in the background I\`d probably have another class (probably called the Model), which handles all the application logic? So a transaction might look like this: User selects radio button --&gt; MainWindow communicates the change to ViewModel, which communicates it to the TextBox. User presses button to draw function --&gt; MainWindow communicates the press to ViewModel, which in turn communicates the change to the Model in the background. So I\`d probably create 3 model classes, one for each section? &amp;#x200B; For example, if IsPolynomialFunction is a bool property on your view model, you would bind to it like this: &lt;RadioButton IsChecked="{Binding IsPolynomialFunction}" Content=... So in your given example, IsPolynomialFunction would be a property that\`s declared in my custom built ViewModel class, and by setting the DataContext in the MainWindow to my ViewModel class, all the elements in MainWindow would gain access to properties in my ViewModel? Is that what DataContext is all about? So, by having: public partial class MainWindow : Window { InitializeComponents(); ViewModel model = new ViewModel(); this.DataContext = model; } I could essentially bind all of my controls to the properties of my ViewModel, which would also mean I could bind the corresponding events to event handlers that I\`ve declared in my ViewModel?
 &gt;You have three main files you care about: MainWindow.xaml, MainWindow.xaml.cs and MainWindowViewModel.cs. The MainWindowviewModel in this case is a class I need to create, which communicates with the MainWindow? So in the background I\`d probably have another class (probably called the Model), which handles all the application logic? So a transaction might look like this: User selects radio button --&gt; MainWindow communicates the change to ViewModel, which communicates it to the TextBox. User presses button to draw function --&gt; MainWindow communicates the press to ViewModel, which in turn communicates the change to the Model in the background. So I\`d probably create 3 model classes, one for each section? For example, if IsPolynomialFunction is a bool property on your view model, you would bind to it like this: &lt;RadioButton IsChecked="{Binding IsPolynomialFunction}" Content=... So in your given example, IsPolynomialFunction would be a property that\`s declared in my custom built ViewModel class, and by setting the DataContext in the MainWindow to my ViewModel class, all the elements in MainWindow would gain access to properties in my ViewModel? Is that what DataContext is all about? So, by having: public partial class MainWindow : Window { InitializeComponents(); ViewModel model = new ViewModel(); this.DataContext = model; } I could essentially bind all of my controls to the properties of my ViewModel, which would also mean I could bind the corresponding events to event handlers that I\`ve declared in my ViewModel?
Just tried opening it in Firefox and it's indeed a GIF, but the behaviour is not quite as you described. In Chrome it's an MP4 (for some reason... wtf), white foreground on white background. In Firefox it's a GIF, white foreground on white background. Neither have any form of transparency. That may have something to do with the fact that GIFs don't support alpha channels.
It's… not clear to me what these stored procedures _do_. Do they each just contain a single statement? Is the point here more fine-grained access control?
Think of it like this // Project.Data &lt;- EF Project which exposes IRepository // Projekt.Buisness &lt;- Processing Project, which uses IRepository and exposes IDoStuff // Project.View &lt;- Grabs an IDoStuff and processes work using it. View knows Buisness Buisness knows Data and Data known EF &amp;#x200B; Often people create an "Domain Transfer Object"(DTO) for mapping an EF Entity. This would often be found in `Project.Common` and would be referenced by `Project.Data`, `Project.Buisness` and `Project.View`. `Project.Data` would only return an EF Entity mapped to a DTO. This way no one, but `Project.Data` will ever know that EF is used.
I'm sold, when do we start?
The generator creates simple CRUD stored procedure for your DAL. + bulk insert and select by your unique constrain (more specific) . You can grant "EXECUTE" based on the roles defined in your dacpac model. You can define some default settings for all your tables or override with specific settings for each table (for stored proc, entities or DAL generation). Stored procedures is a choice if you know you will use it for other more complex stuff you have the simple ones generated for you. You can use direct sql with Dapper but depends on your use case it can be cleaner to use stored procedures to access your data. I don't know if it really answers your question ?
Code examples: https://github.com/ZacharyPatten/Towel There are two very important topics I wish I knew early on. Many would say these topics are too advanced for beginners but I disagree. Learn delegates as soon as possible (don't wait till you are advanced to learn about delegates). 1) You can break type safeness using generic types and runtime compilation and store the runtime compilation in a delegate. Why do I wish I had known this? It let's you write code once using generic types and reuse it (rather than having to copy-paste code for different types). This is especially useful when writing mathematics equations. This is better than using the "dynamic" type because the dynamic type is slow as balls. 2) Delegates are often better than interfaces when writing generic framework code. You cannot make types in other frameworks implement your interfaces. If you use interfacing in your code, you have to wrap external types in your own types in order to use it as one of your interfaces. This is slow and unnecessary when you can use delegates instead. A good example is my "Heap" data structure. Most people use interfacing for generic heaps, but my implementation (using delegates) allows for two enhancements: 1 you can use any type in the heap including primitives because there is no interface on the generic type, 2 you can have multiple heaps of the same type that are sorted differently because you can pass in different sorting delegates.
Ah.. I guess I cannot explain. I understand the need of layering the architecture and separation of concerns. But if IRepository in Project.Data exposes a DTO and uses EF entity, then it needs a reference to Project.Business , so it knows what exactly a DTO means. (Let's assume that the DTO is defined in Project.Business) But also Project.Business must reference Project.Data which is the cause of the circular dependancy.
The DTO would be an EF independent representation of your EF Model, and it would be exposed by `Project.Common` (Or any other glue project), which has no dependencies on [`Project.Data`](https://Project.Data), `Project.Buisness` or `Project.View` Buisness (and View) can instantiate new DTOs and pass them to `Project.Data` and vice versa.
An easy solution would be for you to adopt a more modern architecture. For instance, it's bad practice to have that much logic inside of event handlers (like button click event handler). The form class should not have much code at all, really. You could easily rid yourself of the win forms burden by developing class libraries that you utilize like a service or a library. You can still keep using windows forms, the console or whatever, but you are making it more clear that there is a distinction between the application logic and the graphical presentation. The performance counters could easily be rendered in a console application if you separated the logic from the presentation.
Thanks, friend.
Already posted as a specific post : [https://www.reddit.com/r/csharp/comments/bbypzs/mssql\_stored\_proc\_c\_netcore\_dapper\_generator/](https://www.reddit.com/r/csharp/comments/bbypzs/mssql_stored_proc_c_netcore_dapper_generator/) ; c# tool that allows you to generate standard stored procedures, entities and DAL for Dapper and .netcore project. You can already use it and test it : [https://github.com/PensionLab/dapper-sql-generator](https://github.com/PensionLab/dapper-sql-generator)
IIRC, this was the guidance early on, but is no longer recommended
But what if I want to put some complex business logic in my Business DTOs? I don't want these to be separated from my business layer.
You can absolutely develop the new module as a separate wpf application and embed it on the main application where needed (on startup, in a specific view....). I would suggest to start without framework and DI unless you already have a huge list of configurable dependencies and complex use cases for the new module.
Hi, we used a lot of T4 scripts in the past but now we use a generator because string interpolation in C# is just fun and can maybe replace T4, you can find some examples here : [https://github.com/PensionLab/dapper-sql-generator](https://github.com/PensionLab/dapper-sql-generator) (we will never come back to T4 stuff but it's only an opinion).
Interesting stuff. I have used T4 templating in the past to generate enums from a database lookup table
I like the look of this. Keep up the good work. How does it compare to Dapper?
Hear, hear! I raise my goblet to /r/fr0stbyte124, in a toast, for the most wonderful idea I've heard all day! To /r/fr0stbyte124!
Thank you both for the clarification. I guess what I was reading about was core then, because I understood it to be cross-platform. I appreciate all the quality feedback!
This is valuable info, thanks man. I don’t have anything against dual-booting vs. doing something with Parallels or another VM, but dual-boot would definitely be better performance due to being native. I have used a setup like you describe, though and I like the appeal of swiping between OSs.
As /u/Ronald_Me said - use a DataGridView. It is literally designed to show visual representations of 2-dimensional data. However, as for why your code doesn't work - youv'e got a `foreach` loop which goes through the `names` array. But for each name, you've got multiple grades, so you need a second, nested (i.e. inside the first) loop. You'll also need to use `for` loops instead of `foreach`, because you'll need the index variable from the loop to access two arrays - the index for one of your loops will be used to access the item in the `Names` array and one of the dimensions in the `Grades` array; the index for the other loop will be used for the `Columns` array and for the other dimension of `Grades`. You can get some more ideas from [this StackOverflow question](https://stackoverflow.com/questions/29633018/show-2d-array-in-datagridview)
Where do you have to problems? When you're binding the Textboxes or when you want to get the data from the database?
You're right. Extension methods have the potential to be way worse than string vs String arguments.
Thanks! I’ll for sure check it out
It looks pretty cool. I’ll check it out. Thx!
I’ve tried .NET a little bit but it seems a little different from what I’m used to. I guess I’ll just have to keep practicing! Thx!