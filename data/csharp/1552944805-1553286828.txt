cringe
Can I use a custom type to pass arguments to test methods? 
&gt; since you are so adamantly against mocking and testing. Please stop misrepresenting my position. I'm am NOT against testing; I want to see more testing and more types of testing employed.
The thing is, with properly layered code you can reduce the amount of DI needed. Often the DI framework is employed because too many dependencies are being injected into low-level code that should have been purely business logic. It's not the framework's fault, but it does make it easier to make this mistake. As for the mocks... well they are just a symptom of bad architecture. Once you have the I/O code separated from the business logic, they stop being so necessary. 
Ahh, my bad. Good feedback: I will fix the README.
This is most likely Mojibake: https://en.m.wikipedia.org/wiki/Mojibake Raymond Chen explains how this can appear in the Windows UI: https://devblogs.microsoft.com/oldnewthing/?p=100675
Desktop link: https://en.wikipedia.org/wiki/Mojibake *** ^^/r/HelperBot_ ^^Downvote ^^to ^^remove. ^^Counter: ^^245221
The way I interpret the documentation is this: You can either call the \`Dispose\` method directly, or use the \`using\` statement. The \`Dispose\` will close and dispose the object, as will the using statement.
Yes, this was definitely one of the most annoying things. It doesn't behave the same way linqpad or visual studio behave so it's very annoying to leave it on :)
To me, the lines you bolded are trying to convey that: 1. You must use the .Close() method followed by the .Dispose() 2. **Or**, you can implement a using clause, but the .Close() method must be called before that using clause is out of scope. Either way, .Close() is invoked before it's disposed of. Nowhere in that documentation's text do I get the impression that they have somehow overridden how a USING clause operates. I believe this is a feature of the compiler, so there's no way they *could* do something like that.
Hmm, I can kinda see that, but they go on to **literally** say: &amp;#x200B; &gt; NOTE: Objects must be paired with an open and close operation. **If you use the Open method without the Using statement, you must call either the Close or Cancel method on an opened object.** Failure to close an object will lead to read access violations and cause AutoCAD to become unstable. &amp;#x200B; Again, their doc team can be really stupid at times, so it's possible they butchered this explanation. &amp;#x200B;
Thanks, it was an interesting read.
&gt;If you use the Open method without the Using statement, you must call either the Close or Cancel method on an opened object. Exactly, but when they say: &gt;If you use the Open method without the Using statement, you must call either the Close or Cancel method on an opened object. I'm not really sure how else it interpret that. But maybe I'm just being to pedantic. &amp;#x200B;
&gt; it's possible they butchered this explanation Seems pretty clear to me. If you call `Open` without using `using`. Then you are responsible for clean-up - calling `Close` or `Cancel`, as the say. That implies that if you call `Open` **with** `using`, then you are **not** responsible for clean-up. That also implies that `Dispose` will do the necessary and appropriate clean-up. Also, couldn't you just peek at the source code? Use https://www.jetbrains.com/decompiler/ or something similar (there are several such tools). That's the most definitive way to understand an implementation.
&gt; Also, couldn't you just peek at the source code? Use [https://www.jetbrains.com/decompiler/](https://www.jetbrains.com/decompiler/) or something similar (there are several such tools). That's the most definitive way to understand an implementation. Yeah, like I said, most .NET calls in their API are just wrapped calls to an unmanaged library. And some of the things it does is fucked beyond comprehension. In this instance, they appear to use a DisposableWrapper object that appears to A) Suppress the Garbage Collector functionality, B) control Finalize() calls, and C) throws around unmanaged pointers back and forth from the unmanaged ObjectARX library. &amp;#x200B;
That still makes sense if you believe `Close` and `Dispose` do the same thing. Is `Dispose` visible on the object itself? Or was it explicitly implemented? Also, this documentation probably existed before the `using` statement existed. The doc writers probably were too busy to replace every instance of "must call `Close`" with "must call `Close` or `Dispose`". That is exactly the type of thing an understaffed doc writing team would miss.
&gt;That is exactly the type of thing an understaffed doc writing team would miss. Agreed. These people are supremely understaffed. There's countless entries in their reference that are just literal documentation Mad Libs like [this fucking gem.](https://knowledge.autodesk.com/search-result/caas/CloudHelp/cloudhelp/2018/ENU/OARX-ManagedRefGuide/files/OREFNET-Autodesk-AutoCAD-DatabaseServices-Database-GetMetaObject-Expression-html.html)
&gt; In this instance, they appear to use a DisposableWrapper object that appears to A) Suppress the Garbage Collector functionality, B) control Finalize() calls, and C) throws around unmanaged pointers back and forth from the unmanaged ObjectARX library. That sounds pretty standard, really. You do want to call `GC.SuppressFinalize(this);` when your object is disposed, so that the GC knows it does not need to call the finalizer later. Presumably their helper functions for handling unmanaged resources are in this ObjectARX library. And if you're using a fair amount of unmanaged resources, you'll probably have a helper or two to reduce boilerplate and keep dispose/finalize handling consistent.
Yep. This is definitely another approach. For me, I tend to refactor like crazy anyway, so I tend to rewrite my code about half the time I'm using it. As an anecdote, I had a university professor once tell me something that stuck with me (and resonates with your comment). "If you want to write good code, write it 3 times. The first time you have no clue what you are doing. The second time, you now know enough to see why your code sucks. It generally takes 3 tries at a problem to have a chance at producing a good solution."
I guess I can see that. Thank you for the info!
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/explicit-interface-implementation class Foo : IDisposable { public void Dispose() { Console.WriteLine("Dispose()"); } void IDisposable.Dispose() { Console.WriteLine("IDisposable.Dispose()"); } }
Well the authors are legit esp Anders Hejlsberg - he pretty much made C#. - https://en.wikipedia.org/wiki/Anders_Hejlsberg however C# 2.0 is like 2007 or something I'd pick up C# in a Nutshell and C# in Depth if you arent a beginner as other resources to use in teh future
Sorry. I meant unit testing specifically. I currently do work for a big financial company with a heavy cloud infrastructure/architecture. Security is massively important making testing very difficult so I rely on mocking cloud and security resources in order to make automated unit tests. The level of mocking and injecting that I do right now is far beyond anything I’ve experienced in my last 25 years of development, but it’s great experience learning it. Most importantly, it catches bugs and makes me more comfortable making and accepting changes to the code. 
In my earlier example we got to the point where I needed to mock up an IEnumerable to do my testing. Is this what you mean by separating the I/O from the business logic? This separation is the reason we use mocks, not tight coupling. I’ll agree, if you’re mocking very specific concrete implementations, you’ve taken it too far. 
Why would you have to "mock" IEnumerable? Just create some test data and throw it in a collection. 
I'm against most mock testing, not unit testing. (And I stress most, not all. There are times where even I think it's necessary.) To that point I want to see more emphasis on writing code that can be unit tested without mocks.
I wish I could share my S3Stream implementation with you to show you how much mocking helped my testing. Alas, confidentiality. 
.... define mock Back to that example, what if it was IDataSource? I’d take some data, throw it in a collection, and mock IDataSource with the data. What difference do you see between mocking a framework interface with a framework collection, and mocking my own interface with a small test facade class?
Thanks for sharing again, always looking forward to your updates.
In other words: "If you persist in using GetHashCode for DB/external values despite our warnings then we're going to make it so you can't"
I'm glad to hear that my comment was helpful! That's great news. Since you mentioned Excel files, I assume you might be working with .csv or other delimited data. A good library for that is [CsvHelper](https://joshclose.github.io/CsvHelper/). Learning it was frustrating for me though so if you ever need help then feel free to ask. I pretty much got started with C# because I needed to work with Excel files. It sounds like you've got a ton of great ideas and new things to study. I hope you remain encouraged because it sounds to me like you're going to do extremely well. You're close to what I consider the main hump in the .NET learning curve. Once you gain an understanding of how Visual Studio is putting these projects together then you can practically write .NET in anything which supports it. Thanks to recent efforts it's looking like .NET will run on basically anything. This is a fairly advanced tool but I hope you will remember it. [PostSharp](https://www.postsharp.net/) takes everything to the next level and allows you to write code which targets what MSBuild is doing to your projects. I'm bringing this up because you asked about how people truly reuse their code everywhere without having to copy and paste everything. When you use PostSharp, you write the code once and then you inject it during the Build so that it does the copy and pasting for you. The proper term for this is pattern aware post-compiler injection of aspect-oriented code. 
That's not the point. No engineer breaks existing code just to spite developers who don't read documentation 
My experience is that companies really do exactly that if they think that enabling the 'bad' behavior is more expensive than forcing people to change. 
Very interesting. Regarding the DoS attacks against hash tables - why bother with the linked list substructure and not a secondary hash table with a different hashing algorithm? Is that too much overhead for what should be an occasional occurrence?
What do you mean?
Well many actually do do that (see the other comment about Apple, or anything regarding Python 3), but Microsoft used to be adamant about never doing that to the point where [there are registry entries that were only valid to use for a few months during the Windows 95 beta](https://blogs.msdn.microsoft.com/oldnewthing/20031103-00/?p=41973) that still exist to this day.
Apple is an odd exception in that they have legemdarily bad customer service but everyone cheers their quality and service. Watch "The horrible truth about Apple's repeated engineering failures." on YouTube. https://youtu.be/AUaJ8pDlxi8 Louis has endless examples of how terrible Apple is. To be fair Google has begun acting this way, too. Since 2008, and, again in 2015: 2008. Google Gears Down For Tougher Times. https://www.wsj.com/articles/SB122826503489174369 2015. https://www.wsj.com/articles/google-takes-stricter-approach-to-costs-1436827885 Tell me those stories don't sound like a broken record. Let's be clear. Terrible cultures breed terrible practices. 
Same here for the same reasons. It's a real bane to the industry. 
As I understand,with this design, if a .NET Core application is facing hashed flood attack, we just restart it and the attackers have to find out a way to flooding us again from beginning?
Have you considered the built-in server mirroring tools?
We learnt this the hard way since we persisted a hash of a string. I understand why it's necessary now that I've read up on it, but it's horrifically unintuitive. Not many features in c# allow you to so easily shoot yourself in the foot like this. 
Thank you I really appreciate it. Will try to upload more often...
This is what determinism is: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/deterministic-compiler-option You can choose to disable it to get wildcard support back.
While that's true, that's not really the point. With a deterministic hash, an attacker can just grab their own copy of .NET and generate a large number of matching strings. It's even possible to generate strings *from* the hash, faster than local random trial. With randomisation, assuming you aren't exposing the hashes (don't do that), there's no easy way to discover the random factor and therefore no easy way to generate matching strings. It's not so much about the hash being different per start. It's about it being undiscoverable to an attacker (e.g. different per machine would accomplish the same goal).
Adjust your mic sensitivity to get rid of that background noise.
Thanks my dude
Are you in need of adult supervision?
I'm not sure what your issue is. That documentation is pretty clear.
Is this this similar to the rest client class in this repo https://github.com/NimaAra/Easy.Common
What. No. I used to love have thought it was so nice and easy to understand. No going back and porting code I just can't believe the amount if junk in it. Even the patterns and naming convention are a nightmare looking back. But i guess languages evolve like c# has but still I don't reckon ill be looking at it again. Made my choice with sharp sticking with it. Switched to sharp aput 10 to 15 years ago but still twiddle around with java because I was playing with jsp
I assume it throws an exception, if it can't establish a connection. Consider looking into exactly which exception is thrown and then catch it and handle it.
I have the same experience when I have to write C# code again, instead of F#.
The thing is I can only run it locally if I want to test the offline sync so I can't debug it. And it just crashes without any messages or anything. I'm kinda new to visual studio and all this so can I somehow get the exception in my situation?
A lot of smurf-naming. Get inspired by this library: https://github.com/canton7/RestEase
Surround the offending code with a `try-catch` block and just catch all exceptions (the base `Exception` type). If possible, write them to a log file to identify the type of exception that causes your program to crash, then rewrite the catch clause to handle just that exception. Alternatively, you can just catch all exceptions and handle them the same way, although this is not ideal.
What is the reason for doing this in memory in C# when you already have a database? Querying data like this is what databases are made for.
I sent you a PM on where you prefer to be contacted
I do some interesting stuff in c#. A lot required updating Ui for multiple users over multiple system and a custom data base that handles that and pingng off the ugly ass hell data/model/view/that gawd awefull depenancy property mess. Is there any benefits of f# i should consider. Always up for something new :-) And darn I think I may have admitted the observer system in have was better.
Speed is the main reason. If I use the database, it is great since the memory usage stays low, my code it rather simple and clean and easy to manage, but when you have to perform millions of these searches, the milliseconds really add up.
You realise if you have enough RAM the database will be in memory. Databases are literally designed for this exact use case over many years your probably not going to be able make something faster yourself. The memory usage shouldn't stay low, it should use all available memory, which database did you try using? I think you set it up wrong
So I got a messagedialog showing the exception. It says "Push operation has failed. See the PushResult for details." How do I see this PushResult?
Good idea. I noticed several typos in the code examples, anyway, plus the tokens in the retrieval lib didn't have sufficient visibility, so I went ahead and put out a 1.1.1 release just now with these changes. If you go to the code examples now, you'll notice a link at the bottom that will take you to a full source (.cs) version of it. Is this better?
Use SQLite. It's essentially made for that problem. This page will help you change memory usage so you can use more https://stackoverflow.com/a/2185699
Are you trying to do an async await method or an async task?
I started with SQLite and then moved to SQL Server, added the indexes that I needed. &amp;#x200B; I did some benchmarking on the simple searches - find the price for security "XXX" where the timestamp if say smaller or equal than 1550559862 and for instance using dictionary outperformed a database query by quite a bit. I will re-run these little tests I did later on today just to make sure that I didn't mess them up, but the speed difference was more quite noticeable.
Have a look at Lucene - it is designed for high speed searches of static data.
Eventually you wait on it, you can just start other things in the meantime so that you can process in parallel. 
I started with SQLite and then moved to SQL Server, all the indices are in place.
https://github.com/tejacques/AsyncBridge/
I'm not sure, its crappy phrasing he's using...
Why did you move?
Please vote for/or submit your request for the next coming release
Where does it say that Dispose doesn't call Close? What I see is that if an object is already closed, calling Close again (as part of Dispose) doesn't do any harm.
First make sure if it's possible to make the calling method async, it's always best to avoid these kinds of situations. But if you absolutely must, I suggest using the [Nito.AsyncEx](https://github.com/StephenCleary/AsyncEx) nuget package. Usage: `AsyncContext.Run(() =&gt; MyAsyncMethod());`
You said that sorted dictionary was really slow, yet you say its faster than a database? How slow/fast we talking here? I imagine you have something configured wrong as you said the database didn't use much memory, it should be using as much RAM as your data set is to hold it all in RAM and get maximum performance. Are your timestamps all uniform? For example if they are always 5 minutes, you could store them in a large block of contiguous memory using for example a Span object then just slice that by working out the index (i.e. time query / 5 minutes to get the index), that would probably be the fastest you could get.
PushResult is probably a property on the exception. What you could do is get Newtonsoft.Json and just serialize the exception with JsonConvert.Serialize(ex) then add it to the log.. I wouldn't suggest doing this in production code, but while debugging: who cares...
This looks nice.. doing it properly with sync contexts and stuff.
I don't think that's the main reason. The hash used for strings is far from being cryptographicaly relevant. A dedicated denial-of-service attack will still be possible, as the service process doesn't restart very often, normally. There is also a dynamic aspect, by the way, which will re-hash if the chain length becomes too large, but this isn't new to .NET core.
I don't really agree... think of it as breaking it now to prevent any app from starting to store hashes. Of course it's a bit late.
That is exactly the kind of problem i was facing. Thanks this looks nice I'll try it out.
I suggest starting thinking about **The Election Patch** with some advanced features like managing 1000 accounts at once
Removed: Rule 5.
Off topic question: how do I get a button to shutdown the app and go back to the default app?
That depends on what the apps are. Are they web apps, mobile apps, classic desktop applications, UWP apps?
_I knew it!_ You'll never be a mod in this here town again!
You're just scared.
You were supposed to destroy the competing languages, not join them!
If C# would get its lazy ass up and improve enough, then sure. But garbage like the inline `using`-scope or the half-hearted nullable-reference types implementation is just disappointing.
Nevermind I found the right code. But I still don't have the offline sync working. And would it be a desktop app if it's a windows iot core app?
https://i.imgur.com/g6Z2HkZ.jpg
I don't have any experience with Windows IoT Core, but from quickly reading up on it, it appears to be running UWP apps. I stumbled upon this [link](https://docs.microsoft.com/en-us/windows/iot-core/develop-your-app/iotcoreshell) which contains some info on app switching, though I don't know if it's useful. 
As /u/har0ldau mentioned, it might be a property on the exception. It might also be a value returned from the `PushAsync()` method, in which case you'll have to change the code into something like this: public async Task SyncAnswers() { await surveyTable.PullAsync("answers", surveyTable.CreateQuery()); PushResult result = null; try { result = await MobileService.SyncContext.PushAsync(); } catch(Exception ex) { // Show dialog with exception info here... if(result != null) { // Show dialog with property values from result // Example string: $"Property1 = {result.Property1}\r\nProperty2 = {result.Property2}" and so on. } } } 
Simplest is to use: AsyncMethod().GetAwaiter().GetResult(); Don't use AsyncMethod().Wait(), as that wraps the stack trace - https://blog.stephencleary.com/2014/12/a-tour-of-task-part-6-results.html.
The timestamps - the raw data can be inconsistent, but then it gets interpolated. This depends on the app's settings, say if 1 minute is chosen the data is interpolated and inserted, but since original data is never overwritten, they might not be exactly one minute apart. This is done before the app is run, so it has nothing to do with the speed, tests, etc. When the app starts, the data is (more or less) one minute apart if 1 minute interpolation was chosen. &amp;#x200B; The SortedDictionary "slow" comment stems from the way I find values when searching by keys within range. The only way I found is by iteration or Linq, which "seems" slow to me. And yes, from my tests this was still faster than using the database.
I'm pretty sure it's stated in the intellisence hover documentation when you mouse over gethashcode, or as you type even. 
Is it better to do AsyyncMethod().ConfigureAwait(false).GetAwaiter().GetResult() for .net framework? I know core doesn't need that.
You could do something like: try { var task = Task.Run(async () =&gt; await MyTask()); task.Wait(); var result = task.Result(); } catch (AggregateException e) { // e will be an aggregate exception // So check e.InnerException for null // Then handle that } You could wrap a function around this whole thing. Someone please check me on it all though, I just woke up and I'm typing on my phone. 
Do this fo sho 
It generates a proxy at runtime.
Depends. I omitted it as the OP's platform and needs aren't clear. In general^*, library developers should always use ConfigureAwait(false), and of course, whenever there is no need for captured context. ^* ^results ^may ^vary. ^Terms ^and ^conditions ^apply. ^Do ^not ^use ^while ^operating ^a ^motor ^vehicle ^or ^heavy ^equipment.
I love you too Fizix Man.
What if you try to hold the SQLite file in a RAM-Disk big enough to support all the data you amassed? Maybe this will let you conviently search the data, given the rest of your system can handle the speeds, and will at least make the queries faster then data managed by a bigger solution like SQL Server? Don't know how the ram allocation exactly works and which is faster in the end, but maybe it's worth the try.
That does nothing useful if you aren’t awaiting the Task. 
Why would core not need it? It has to do with sync contexts. If there is no sync context, it's not needed. So it's not needed for console applications, for instance (unless someone installs a sync context). So unless sync contexts don't exist in core...
I was looking into this yesterday. Came across this site https://cpratt.co/async-tips-tricks/amp/ I liked it 
I'll assume that's a joke, as what you described would be grossly unethical on multiple levels. Besides, running that many instances at once would be prohibitively expensive in terms of hardware requirements.
Are you asking for help, for people to join you finish that project or what ?
Hi all, &amp;#x200B; We are hiring for .NET Core and Frontend (React) developers in London and Oxford. &amp;#x200B; We're a wonderful company that have just closed a funding round led by some huge institutions in the city, with a great culture of collaboration. &amp;#x200B; Please have a look if you or someone you know may be interested! &amp;#x200B; [https://www.hvmd.io/careers](https://www.hvmd.io/careers) &amp;#x200B; Thanks!
You should look into a distributed search layer. Something like https://aws.amazon.com/cloudsearch/ It will created shards of the data and distribute the search across them. You can also shut down the instances after hours to save some money.
Yes
I just ran the "Deadlock Example" in that repository and it didn't deadlock me at all. Are you sure this is up to date?
I haven't tested this with as large a dataset as yours, but I put a DataTable into memory using caching and then wrote a class that I do different queries off of the cached data using linq. I had the same issue where the roundtrip of the database calls was causing performance issues, those milliseconds add up and I had multiple types of data on a page that were different queries. While not the most efficient memory wise, it allowed for much more flexibility and it was an app that was already designed so converting the dataset to a cached DataTable allowed me to not have to recode large portions of the application. 
http://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html
If the int in the database is a primary key, it will always be faster than string searching. Even if it isn't the primary, I'd bet a search against an indexed int is still far faster than one against an indexed string. I don't have data at hand, but I'm working with a database with a few hundred million records and string searching can be problematic at times for us, but a query against numbers works out fast most of the time. 
I'd agree that for me, at least anecdotally, int is WAY faster than string searching. 
Use a Tuple if you need keyed information to find the data. I have a question regarding the memory of the SQL server. Depending on the manner of the query and index size, included columns, and ordinal values; why do you think that the SQL query is not the problem rather than SQL server? 
Machines speak number better than they speak words, after all. 
Great, but that’s just ASP.NET core. Sync contexts still exist. 
I would look at this one https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AsyncGuidance.md
[Google is your friend](https://stackoverflow.com/questions/30682228/troubleshoot-why-printwindow-is-blank)
You haven't described the problem you're facing. If you feel there's a need to query on an indexed composite string, so add an index to the composite string/fields. &amp;#x200B; Let SQL server do the heavy lifting and try to measure your problem as a + or - from the required performance. Basically, are you running too hot? It's usually easier and more efficient to normalise or denormalise data rather than mess around trying to out think the engine. Ymmv, but without knowing server size, table size, etc, I'm guessing you're fighting the wrong demon. You are fighting though, so you get a massive upvote for that :) &amp;#x200B; &amp;#x200B; &amp;#x200B;
You already have the objects in memory right? You know which ones you’re going to save because that’s how you’re populating your DataTable. Why can’t you isolate the “objects” you want to save into a list, hold onto that in memory, use that as the basis for your DataTable creation, and then use it directly for updating your cache?
There are a bunch of considerations. I asked a detailed question on Stack Overflow, and got a good set of replies. https://stackoverflow.com/questions/40324300/calling-async-methods-from-non-async-code
While others answered how to do it, I want to add the warning that be extremely careful doing it. In fact dont do it at all if your code is part of an app with UI and the code would run on the main UI thread. Thats a recipe for a deadlock to occur at some point unless you are 100% sure that async method doesnt and will never have a dependency to UI thread. There are libraries available for such cases where async and sync has to be mixed due to new and old code coexisting, but they require changes in the async methods themselves too.
So i can't do it, that's what that says? Because it says the BitBlt isn't guaranteed to work?
In all likelihood, the search time will be dwarfed by the time spent transmitting data to/from the SQL server.
Great answer..
Do you mean like creating this list which is going to be used to populate the datatable? Could you provide an example?
Could I then do in the take the list as a param in the inserttodb, use do a try catch finally ? Then I put the method to add list to cache in the finally?
I'd be using WPF and calculating the increments based on the x axis and screen width. Then, just render element (border, rectangle etc) widths based on the appropriate values.
Yes that actually can help prevent some deadlock scenarios
They look like they still exist. There's one for WinRT. https://github.com/dotnet/corefx/blob/940ecee40b64ab93c92f87a7e8909771c013f1a5/src/System.Runtime.WindowsRuntime/src/System/Threading/WindowsRuntimeSynchronizationContext.cs So yeah, still use ConfigureAwait in library code.
Show us the SQL you used, that's most likely your bottleneck if you have enough memory to hold the dataset.
Typically, in an MVC project, there is a service layer responsible for providing the data. The controller is responsible for invoking the service layer to obtain the data in question, and then passes that along to the views. As a beginner, this might be a bit of overkill, as adding a service layer will complicate things a bit. Having the controllers query for the data and populate the models would probably be the best route to take until you're more comfortable with developing in MVC.
Search a date range is going to be a forward-only operation. What about a dictionary of security with a linked list of dates of prices? Dictionary&lt;string, linked list&lt;date, price&gt;&gt; 
Most documentation regarding GetHashCode() explicitly says that it shouldn't be persisted.
[You can host a web api in a windows service](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/windows-service?view=aspnetcore-2.2) (assuming you're using .NET CORE, it's really easy to do), but you need to ask if you *should...* &amp;#x200B; Hosting a web api in a windows service you lose all the benefits of hosting in a "real" web server - security, process management, etc. If you are publishing this API for someone else to consume, I would recommend using IIS or another "battle tested" web server so that you're not re-inventing the wheel implementing features that come OOTB with web servers.
Yes - with OWIN, using a `var app = WebApp.Start&lt;StartUpClass&gt;(arbitraryUri)` call in your TopShelf's service `Start` chain, and `app.Dispose()` in the `Stop` chain - but I'd personally be more inclined to port to a Core service entirely.
&gt;return Task.FromException(e); Great tip. Brb, time to scream into a cone of silence to regain a little bit of sanity 
&gt; if I am to store the index as a string opposed to a username The way you're using the word "index" doesn't make sense to me. What do you mean by "index"?
Its really easy to do even if its not .NET Core. 
Here is an example on GH to get you started. https://github.com/dennisroche/TopShelf.Owin If you're using .NET Core, there are examples for that as well on GH. 
I'm trying to understand what your code structure. It sounds like you have a list of objects that is your local data store. When you want to save this to your database, you convert this list of objects into a datatable to save it to the database. Your question is what to do when the write fails because you have already changed your local data store (list of objects) and it no longer matches the datatable that you used to write to your database. Is this correct? &amp;#x200B; If so, I can think of two solutions. Probably the best one in my mind is to make your object a wrapper for the datatable rather than an independent data store (ie the constructor takes and privately stores a reference to its datarow and the get/set method for each property reads and sets the datarow directly rather than a separate object. Another option might be to have a GenerateObjectListFromDataTable method that takes the resulting datatable after a database operation (ie in your InsertIntoDB method whether it succeeds or fails) and converts it back into an object list. You would then have your InsertIntoDb method return this object list and replace your local data store with it.
Hey man, thanks for the reply! Do you have any resources for that? I'm not very intermediate at C# and have never used WPF so it'd be great if you could point me in the right direction more precisely.
You can try to push in the service Nancy [https://github.com/NancyFx/Nancy](https://github.com/NancyFx/Nancy)
I feel dirty about utility functions for "run async as sync". I think it's a topic that takes a *discussion*, not a helper library. What comes to mind is, "What if the async bit never completes?" Maybe I'm paranoid, but the tools I write tend to want to complete and report errors rather than hang and be killed by some other process. Nobody writes the helpful utilities to include timeout logic or some other way to detect a total hang. I don't like arguing, "It'll never hang forever." Lots of things in .NET look async but can't be cancelled or don't have good timeout facilities. Lots of libraries people write don't consider either of those cases. My experience is if it's really important that it doesn't hang forever, my most important customer's going to have the weird confluence of unforeseen factors that make it hang forever. I would much rather structure my app to be able to wait for an asynchronous process to finish. I just feel more in-control that way.
You are right that int is going to be faster in pretty much every aspect, but in a database the primary bottleneck is the data page IO, so the performance mostly reflects the difference in compactness and how many records can fit onto each page. 
The internet has once again removed my ability to spot sarcasm... Are you saying that is not good practice?
Well, i prefer use Tasks instead of Threads. Basically both are the same thing but i like readability and sugar. &amp;#x200B; You could use WaitAny method to execute N threads, once the first one has been completed will return you index of your previous Thread array. If you need all the work to be done to continue, then you will need WaitAll &amp;#x200B; When you work with parallelism, you must manage single thread exceptions (AggregateException) , timeouts, input and outputs should be immutable. &amp;#x200B; You must be careful with parallelism and external connections like database or another clients. You could use all avialable connections and create a bottle neck. &amp;#x200B; There is no an easy answer when you add parallelism to your code, you will get more power, yes, and more problems. &amp;#x200B;
No sarcasm - it's a great tip. I didn't know about it, and I'm very frustrated with how different 'async C#' looks from 'sync C#'. It feels like I'm writing old Java code.
This is not a good idea because you won't be able to do a binary search on the linked list, so you'll have to fast forward through days' worth of irrelevant data in linear time just to find what you want.
What indexes did you add?
i cant tell if this is a passive aggressive answer because your source file is just the markdown your video has a LOT more code than the "simple login" exercise Does this adequately address your question?
The WithData CTE feature is really cool.
Wonder where the name IntelliCode was based on
That is also my only gripe with modern C#, that async code is sprinkled all over the project. Take a look at golang, if you haven't already. You are writing "sync" code inside a goroutine. There is no difference there.
Typically this logic is handled in the controllers. Some teams will break the logic up further and have a repository (another controller) for doing the data access, and another controller for manipulating that data based off business logic needs
My opinion with respect to `async/await` is it belongs where it does the most good: in your top-layer UI/API code. Every horror story about how you need to use `ConfigureAwait()` or further tweaks to avoid problems seems to involve trying to place them at lower levels. If you don't have a reason to capture context, you're probably not at the layer that should be making those decisions. The biggest problems I had in early attempts to work with it was I started at the lowest levels of my API and made each call in the chain async. Experience and severe burns taught me it's better to stay synchronous as long as possible and have a clear layer where you start to write asynchronous code. The Task API's always felt pretty clunky to me. I've enjoyed using Rx.NET, but it's not for every scenario. 
You shouldn't be manually creating threads. They are quite expensive. Ideally you would use async / await. But if not at least use the ThreadPool. 
For a Web API where the outmost handler is async, do you use `Task.FromResult` to bridge these "layers"? At the top of my hat, I have mostly sync code for the domain models and some infrastructure methods, once the DB is involved, it is again async. For Rx.NET, I am using Rx.JS quite extensively, I think you are referring the usage mostly towards clients like WPF or Xamarin or do you also use it in the backend? For the backend, I am only using it to model long-lived subscriptions via user-scoped subjects. I would appreciate a few examples :) 
I had the same problem, searching by ints or floats is much much faster. All data in my app is double, first as a string and then as a float. My datasets are not too large, so doubling them is no problem.
It's just /r/inclusiveor showing
Worth noting that async / await will use thread pools and other optimisations. So you may get some performance benefit. 
If you want to use raw sql have a look at Dapper. You provide the sql and it maps it to models.
&gt;async/await belongs where it does the most good: in your top-layer UI/API code &gt;Better to stay synchronous as long as possible and have a clear layer where you start to write asynchronous code I'm with you on both points, but they also seem contrary. Point1 makes it seem like you write async immediately. Point2 makes it seem like you delay async until you hit library code.
The other suggestions were already quite concise. Maybe to add: Controller is like the entry point accepting the request. It needs to create the model out of the request (or delegate the creation). The model is what you actually want to provide. However us humans are bad in understanding binary data so the model is projected into something that humans can understand (or other external programs tbh). The view is the projection of the model that we want to provide to the consumer. Typically neither model nor view contain any complex logic. (Model typically is restricted to auto properties and ctors and view typically at max a bunch of conditionals and string conversion). So your controller does all the fancy business and ideally he doesn‘t do it himself but knows who to ask for the creation of the view according to some context.
This doesn't match my experience. If your controller is querying your database, what is its single responsibility? Is it application flow? Data access? Business logic?
How do you get .net core running on Android? Or does it do fallback to Xamarin/Mono? &amp;#x200B; &amp;#x200B;
Came across this library couple of months ago. Really digging it so far. Haven't tried it on any prod apps. But for simple utilities I use at work to do some simple db interaction, so far its been great. Might give it a go on some utility webapps I need to build. 
When you spend a lot of time working with a programming languages and others will start to look weird or even wrong. Paired with the fact that you wrote the project 8 years ago and it would be more concerning if you didn't find a bunch of problems with it.
After posting this I realized you had no way to jump to the start of the date range. After which you’d do a sequential read. So yes - could be better :/
Not in front of the computer, but searching for prices within a range looks like this: SELECT price FROM MYTABLE WHERE security='xxx' AND timestamp&lt;=222222 AND timestamp&gt;= 1234567; The query is parameterized in my code. 
If a row is a small nvarchar and not much else, versus an int and **a lot** of other stuff, could be different though.
I'm pretty sure it's not referring to a database index. More likely the index is an integer referring to the index of some string (e.g. `FirstUppercaseCharacter varchar(10)` that stores string values of ints (`'1'`, `'18'`, etc.)) Frankly I doubt OP has enough data to make the debate anything but premature optimization, but in general `indexed int column search` &gt; `indexed string column search` &gt; `pull all data and int search in C# code` &gt; `pull all data and string search in C# code`
I think there could be multiple reasons, but one is that PrintWindow can't capture windows that are drawn directly in hardware/GPU - and given that the window you're trying to print is from NVIDIA, it's highly likely they are doing some fancy direct drawing that bypasses PrintWindow entirely. 
In-database table scan should go in the middle somewhere.
Hello! I'll try to help you out here. I will suggest a fix for your current issue and also ask some questions + give some advice on how to improve. --------- # Suggestions First of, a few tips for posting on reddit: Currently, your code is not formatted properly. this is because you inserted \` \` on each line of code. Instead, try indenting each line of code with 4 spaces so your code will look like this: public class Foo { public string Bar { get; } } That looks a lot nicer! **Secondly**, you give a nice bit of code in your post to help you out with, but it could be better. If you were to create a little example project with only the necessary code to reproduce your problem and post it on Github or something, people could easily download your project and quickly help you out. This might sound like a lot of work for a problem but it can make fixing the problem easier and also has some other advantages: - It teaches you how to create small code examples and maybe brings insight about your project if this task is hard. Because if it is difficult to create an example, maybe your project needs some restructuring? - It gives you a chance to look at the problem from a fresh perspective which always helps with debugging. I say this because you have not posted the Razor code (.cshtml) which is a part of your problem. **Third**, you did not tell us exactly WHAT the project is. Is this .NET Core or .NET Framework? Which version? .NET Core 1 or 2? 2.1 or 2.2? You get my drift. Telling us these things can help us help you in case a certain framework has some edge cases in some versions. -------- # Helping you out! Alright! I will be assuming you are using ASP.NET on NET Framework with Entity Framework. You most likely have 2 Create actions. One (`GET`) where you enter which returns a create view for a project, and one (`POST`) where you will POST the data to which was created in the form. This means that in the `GET`, you want to prepare ALL the necessary data for the create view so it can later on `POST` all necessary data to the `POST` action. Right now you are gathering a list of `Sector` objects and putting those in the ViewBag. Sometime ago I had the same issue as you. I had a many to many issue where a Product had many categories and a category had many products: `Product &lt;-N--N-&gt; Category`. Instead of using the ViewBag, though, I created a `ViewModel` which looked like this: public class ProductCategoryViewModel { public string Afbeelding { get; set; } public string Naam { get; set; } public string Beschrijving { get; set; } public double Prijs { get; set; } public virtual ICollection&lt;Categorie&gt; Categoriën { get; set; } } This was used in my GET Create action in the controller like this: public ActionResult Create() { ProductCategoryViewModel pcvm = new ProductCategoryViewModel(); pcvm.Categoriën = db.Categoriën.ToList(); return View(pcvm); } Then, in the view, I had my code look like this: @model WebshopMVC.Models.ProductCategoryViewModel @{ ViewBag.Title = "Create"; } &lt;h2&gt;Create&lt;/h2&gt; @using (Html.BeginForm()) { @Html.AntiForgeryToken() &lt;div class="form-horizontal"&gt; &lt;h4&gt;Product&lt;/h4&gt; &lt;hr /&gt; @Html.ValidationSummary(true) &lt;div class="form-group"&gt; @Html.LabelFor(model =&gt; model.Afbeelding, new { @class = "control-label col-md-2" }) &lt;div class="col-md-10"&gt; @Html.EditorFor(model =&gt; model.Afbeelding) @Html.ValidationMessageFor(model =&gt; model.Afbeelding) &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; @Html.LabelFor(model =&gt; model.Naam, new { @class = "control-label col-md-2" }) &lt;div class="col-md-10"&gt; @Html.EditorFor(model =&gt; model.Naam) @Html.ValidationMessageFor(model =&gt; model.Naam) &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; @Html.LabelFor(model =&gt; model.Beschrijving, new { @class = "control-label col-md-2" }) &lt;div class="col-md-10"&gt; @Html.EditorFor(model =&gt; model.Beschrijving) @Html.ValidationMessageFor(model =&gt; model.Beschrijving) &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; @Html.LabelFor(model =&gt; model.Prijs, new { @class = "control-label col-md-2" }) &lt;div class="col-md-10"&gt; @Html.EditorFor(model =&gt; model.Prijs) @Html.ValidationMessageFor(model =&gt; model.Prijs) &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; @Html.LabelFor(model =&gt; model.Categoriën) &lt;div class="col-md-10"&gt; @foreach (var item in Model.Categoriën) { &lt;input type="checkbox" name="selectedCategories" value="@item.ID" /&gt; @Html.Label(item.Naam) &lt;br /&gt; } &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;div class="col-md-offset-2 col-md-10"&gt; &lt;input type="submit" value="Create" class="btn btn-default" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; } **TAKE NOTE OF HOW THE Categoriën are dealt with!** And then I had my POST Create action like this: [HttpPost] [ValidateAntiForgeryToken] public ActionResult Create([Bind(Include = "ID,Afbeelding,Naam,Beschrijving,Prijs,Categoriën")] Product product, string[] selectedCategories) { if (ModelState.IsValid) { ICollection&lt;Categorie&gt; databaseCategories = db.Categoriën.ToList(); foreach (string item in selectedCategories) { foreach (Categorie cat in databaseCategories) { if (cat.ID == Convert.ToInt32(item)) //if the categorie was selected { product.Categoriën.Add(cat); db.Categoriën.Find(Convert.ToInt32(item)).Producten.Add(product); } } } db.Producten.Add(product); db.SaveChanges(); return RedirectToAction("test"); } ProductCategoryViewModel pcvm = new ProductCategoryViewModel(); pcvm.Categoriën = db.Categoriën.ToList(); return View(pcvm); } Please note that this code is from an old project of mine. IT MIGHT not work in your scenario but you should be able to adjust it so it does. You could use the ViewBag instead of the model, probably. Maybe your answer could be as simple as using `&lt;input type="checkbox" name="selectedSectors" value="@item.SectorID" /&gt;` in a foreach loop and then in the controller accepting a `Project` and also an array of selected SectorIds! Then you could create a `new Project()` and set the properties of the `Project` itself. Then retrieve all the `Sectors` from the database by finding them using each value of the `selectedSectors`. Follow this up by creating a new `ProjectSector` and setting the `Project` to the Project you just created, the ID to the ID of the project (note: if you get errors, you might want to call `SaveChanges()` after creating the `Project`, that might also not work but its late and im tired) and set the sector and sectorId to the sectors you just retrieved from teh datbase. Then assign the `ProjectSector` list to the list of the Product. Sorry for the degrading quality of advice during this post, it's late and I'm tired. If this code helps you, great! If it doesn't , please create a little example project i could run (or at LEAST show me the controller GET Create, controller POST create and the CSHTML) adn I could help you out further. --------- ### Last pieces of advice **TODO** - If you are using Entity Framework (NOT CORE!), you might not need a join table. If you do need one, I would advise just creating a method `AddSector(Sector sector)` to the `Project` class which would create a `ProjectSector` itself and add it to the list. - Using attributes for your database model works, but I think its nicer to split this into table mapping classes where you use the Fluent API. This seperates the domain classes from the database configuration. - If this is a small (school) project or just a hobby project, using the `DbContext` in your Controller is fine. If it is a bigger project, I would advise against using a `DbContext` directly in your controller since this does not scale and can create a lot of messy code when the project becomes bigger. I would advise layered architecture to seperate the parts of your application. - I would **NOT** use the viewbag to pass data. Pass a (view)model instead. These are strongly typed and make it easier to read for a programmer exactly what is going on in your models. 
Honestly, MVC is a severe oversimplification of how people actually use it. MVC is like a web application paradigm, but you also have to combine it with an application development paradigm, the most common one I see thrown around is Onion Architecture. So go read up on onion architecture, and it will basically kind of elaborate on the many layers of an actual application. And someone else already mentioned it, but I'll say it again. Dapper is a great database ORM for C#. It will even work with other databases like MySQL and Oracle. Basically you just need to make an idbconnection for your database. Create an instance of it in a using block, write your query in a string, then you do something like var data = db.query&lt;Model&gt;(sql, new { parameter1, parameter2 }); It's so much better than dealing with entity framework's quirks. It's super fast. And you have complete control over the SQL because you write it yourself.
Good point. Though I changed because when I started playing with it, it just seemed far more natural and it's gotten cleaner with time
Do you know of a way to capture stuff that is drawn that way? Or is it just impossible?
&gt; the Model is said to be where all the data and business logic happens, No; zero logic belongs in the model. It is purely a representation of your data structure. &gt; and the Controller controls the requests from the view. The controller handles the lifecycle from a request coming in to a response being created, typically with the view.
Got to take the good with the bad. 1 simple pattern won't save one language though especially if you have the patience you can achieve the same if not a better thing with some magical code in the background. F.i.y I have so freaking xaml binding least of my concern these days. And tons of code to update every single change to a property gone all handled on a heap of data that deals with serializing and notifying other controls and even users on different systems done. Get set forget
Also, I should mention that even those who don't want to learn it, but just help, are very much welcome to contribute 😊
What tutorials have you found helpful?
Sample of workshop https://github.com/Almantask/CleanCodeSeries.Workshop
&gt; If your controller is querying your database, what is its single responsibility? Is it application flow? Data access? Business logic? All of those. It’s no secret that a weakness in the MVC paradigm is that the ‘C’ part is loosely-defined and ultimately takes up a lot of responsibility (in stark contrast with M and V, which are verh sharply defined and each do a narrow, specific thing). For someone just starting out, that’s nonetheless a good starting point. OP’s question was whether logic belongs in the model or the controller. The simple answer is the latter. The more complicated answer is that you’ll eventually want satellite classes, such as repositories.
If you want to access sql and write the queries yourself, look into PetaPoco for donet core. [https://github.com/qingask/PetaPoco.NetCore](https://github.com/qingask/PetaPoco.NetCore) You are slightly mistaken on where business logic should take place. No business logic should be in your model. A model is just a container for displaying the data in a view. Business logic shouldn't really be in your controller either. There is a third layer you should engineer yourself and introduce called the Service Layer. Your business logic should be in the service. Ideally you should create repositories for your data access and repositories should be simple CRUD operations (Create, Read, Update, Delete) and should not have business logic. Your service layer should have the business logic and your service layer is what engages with the repository layer. Your controllers use the service layer and surface data to your models. Your models should be expose to the Service and Repository layers and any business logic on the models should happen in the service layer. So a controller can be simplified to something like this: public Action&lt;Employee&gt; Employees() { `var employees = _employeeService.GetEmployees(); //returns a List&lt;Employee&gt;` `return View(people);` `}` By having this separation of concerns, it decouples your business logic from the MVC engine and makes it easy for you to use your business logic elsewhere (console apps, rest apis, packaging them as dependencies for others to use, etc etc etc). Ideally, you want to keep as much of your data and business logic out of the MVC engine as possible so you don't have issues porting or upgrading to new platforms down the line.
Keep in mind, I've been out of programming for 10 years.
PetaPoco.NetCore is pretty sweet too, I use it for everything, I prefer it over Entity Framework all day every day.
What version of SQL Server? There are tricks in later versions. 
The last option sounds like something I need. But how can I convert datatable back to list of my datatype like List&lt;Category&gt;?
have you checked out programmingbymosh mvc tutorial on YouTube? it's actually a good starting point and helped me grasp the mvc concept 
create a constructor in your Category class that takes a datarow as an argument. In the constructor assign each property to the datarow field value like this: &amp;#x200B; class Category { int ID {get; set;} string field1 {get; set;} public Category(DataRow data){ this.ID = data\["ID"\]; this.field1 = data\["field1"\]; } } &amp;#x200B; then in your method to convert your datatable back into your object list, do something like this: &amp;#x200B; var toReturn = new list&lt;Category&gt;(); foreach ( DataRow row in YourDataTable.Rows){ toReturn.Add(new Category(row)); } &amp;#x200B; FYI, I just typed this into reddit so there may be some syntax errors but you get the idea.
Maybe this will help? https://docs.microsoft.com/en-us/windows/configuration/kiosk-single-app
int is faster. Fast string search is generally done by hashing a string and that's... you guessed it, converting it to an int
I can tell for sure it’s from Russia, because I have no idea what you’re asking.
I am trying the threadpools, this is my code: ThreadPool.GetMaxThreads(out maxThreads, out comp1); ThreadPool.GetMinThreads(out minThreads, out copm2); ThreadPool.GetAvailableThreads(out avaThreads, out copm3); ThreadPool.QueueUserWorkItem((DoWork) =&gt; { }); I don't know how to let all the threads join the section: "DoWork"
It'd work better if I were drawing on a whiteboard. I'm drawing the UI layer at "the top" and increasingly specific code at "the bottom". I tend to start writing code at "the bottom" because that's where I can write the best tests. So when I said "stay synchronous as long as possible" I meant in a bottom-to-top order. When I first started trying to use the TAP, I'd know I ultimately wanted the stuff I was writing to be async so I'd start with async methods at the bottom. That was miserable. Now I like to start synchronous at the bottom, and as I ascend layers I ask if it's the layer where I start to need asynchronous code. The higher up the chain I say, "no", the more I find I succeed.
Depends on if the int column is indexed or not in that case. 
Don't use `.GetResult` or `.Result` either. Not because of exception handling, but because of the risk of a deadlock by blocking the calling thread. In response to a child comment, [don't use `.ConfigureAwait(false)` to avoid deadlocks](https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html). If you must do sync-over-async [this is the safest way to do so](https://stackoverflow.com/a/44836942/1801382).
Removed: Rule 4. Please limit your code to only the relevant portions and indent/format it for display on reddit (put 4 spaces in front of each line). Also, please try to better describe the problem you're facing. Try to include the inputs to the methods, the current incorrect outputs, and the desired outputs you want. Ideally, try to make a [Minimal, Complete, and Verifiable example](https://stackoverflow.com/help/mcve) for us to better help you with.
I think your understanding of MVC (the pattern, not the framework) is a little flawed. Specifically, what you are calling the Model is actually just a ViewModel. To use a common example in a To-do list app, your model is probably the list. To add an item to a list, you'd use a ViewModel to collect the data you need, post that to a controller action along with the ID of the list you're adding to. Then, your controller action would do something like [HttpPost] async ActionResult Add(AddItemToListVewModel vm) { if (!ModelState.IsValid()) { return View(vm); } var list = await _listService.GetAsync(vm.ListId); var result = list.Add(vm.ToListItem()); if (!result.Success) { return RedirectToAction("AddError", vm); } await _listService.SaveAsync(list); return Redirect(wherever); } The controller shouldn't know where the list is coming from, or what it means to add an item to a list. It should know where to direct the user under different circumstances and delegate everything else.
[No, it is not better and should be avoided](https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html). &gt; Using ConfigureAwait(false) to avoid deadlocks is a dangerous practice. You would have to use ConfigureAwait(false) for every await in the transitive closure of all methods called by the blocking code, including all third- and second-party code. Using ConfigureAwait(false) to avoid deadlock is at best *just a hack*).
have you checked out programmingbymosh mvc tutorial on YouTube? it's actually a good starting point and helped me grasp the mvc concept 
I just want for the program to return ascending order of integers. Thank you for your reply.
http://www.csharp-examples.net/sort-array/
I would protect the application using Windows Data Protection API and an encrypted HMAC key, in addition to the single app kiosk idea. HMAC keys are easy to implement but they basically give you a graceful way to revoke all clients in case they get hijacked. As long as your are using SSL (HTTPS), authenticating via an HMAC key will allow you to basically have an "API Token" that you can throttle or completely disable if the client has an intrusion.
&gt; I think your understanding of MVC (the pattern, not the framework) is a little flawed. Specifically, what you are calling the Model is actually just a ViewModel. There is no ViewModel in the MVC pattern, so I don’t now why you would bring that up. &gt; Then, your controller action would do something like &gt; &gt; &gt; &gt; [HttpPost] &gt; &gt; &gt; &gt; async ActionResult Add(AddItemToListVewModel vm) What? That’s a Model, not a ViewModel. If you want to pass data between controllers, all you should need is their raw structure. Passing a ViewModel in that situation is a kludge. A ViewModel is useful in a binding-heavy UI framework like the XAML frameworks (WPF, Xamarin Forms et al), where binding directly to the model isn’t feasible; you need an intermediary that has largely the same properties but is more tweaked towards what is actually presented. Hence *View*Model. On the bright side, that approach removes most of the need for a controller, making for an overall leaner approach. But since were discussing ASP.NET MVC, not some hypothetical MVVM web framework (Uno, perhaps?), I don’t know why you would bring this up. &gt; The controller shouldn’t know where the list is coming from, or what it means to add an item to a list. It should know where to direct the user under different circumstances and delegate everything else. Yes.
&gt;Do you mean like creating this list which is going to be used to populate the datatable?Could you provide an example?ReplyshareSaveedit &gt; &gt;level 3LekowskiOriginal Poster1 point · 5 hours agoCould I then do in the take the list as a param in the inserttodb, use do a try catch finally ? Then I put the method to add list to cache in the finally? &amp;#x200B; I see, but could I create this list and get it returned from a method GenerateListToUse, and then use this list and send it as a param to generateTable and Could I then do in the take the list as a param in the inserttodb, use do a try catch finally ? Then I put the method to add list to cache in the finally?Could you provide an example? &amp;#x200B;
&gt; Basically both are the same thing but i like readability and sugar. It's important to draw a distinction between the two. A `Task` (.NET) represents the state of a unit of work, which may or not even be associated with a thread. A thread (general computing) is the scheduled execution of a unit of work. In .NET it's very important not to assume a Task and a thread are the same thing for several reason, e.g., It's easy to end up with deadlocks.
Threads use thread pools - hence why they are called "thread pools," not "task pools" or "async/await pools." Async/await are keywords that cause the generation of a state machine to manage the execution of a unit of work. This may include *pulling threads from the thread pool*, shipping work off to hardware via overlapped IO or IOCP, skipping these entirely, or several other optimizations as you suggested, but there is a distinct boundary between async/await and thread pools. It's quite possible an async `Task` will not even touch threads.
Every Task or async method should be treated like a thread. Isolation is the key if you want to be a happy developer. I agree with you, Tasks could give illusion of work on the same context. That happened with backgroundworkers on C# 2.0 and windows forms.
&gt; What if the async bit never completes? You could ask the same thing for a sync call
Something like KDB is perfect for you use case. It would seem you need to stray away from the general containers. I would try, having each data set (1 per security) in a set of arrays - I assume everything is sorted - so: &amp;#x200B; `int [] timestamps` `double[] prices` &amp;#x200B; Use a binary search to find the indexes for your range; then you can simply iterate the indexes through the price array. 
No no I didn't write it. Just found it on a Google hunt and thought others might find it useful
Well, I haven't done a lot of web APIs in C# but I've dabbled in ASP .NET Core and peeked into a pretty big internal API with fairly high usage rates. I'm going to speculate, don't treat me like an expert for web APIs. (Fair warning here, if you dig through my posts I've been pretty vocal about disliking many aspects of the TAP.) I'm pretty sure ASP .NET MVC Core lets you return a `Task&lt;T&gt;` instead of `T` directly. I'd much rather do that at my top-level handler than try to convert some deeper async call to a synchronous one. That gives me much better options for composing a timeout into the task. The first thing that comes to mind is something like this sort-of-pseudocode: var timeout = Task.Delay(...); var real = _someObject.SomeCall(...); // Returns Task&lt;T&gt;. var composed = Task.WhenAny(timeout, real) .ContinueWith((finishedTask) =&gt; { if (finishedTask == timeout) { return new SomeErrorResult(...); } else { // This still has to check for an exception or maybe other // things. return ProcessResult(real); } }); return composed; That still feels clunky, but it meets my contract. I return the typed result asynchronously, or I throw if I can't. One of the "I can't" cases is timeout. I could have decided to instead: var timeout = Task.Delay(...); var real = _someObject.SomeCall(...); // Returns Task&lt;T&gt;. var composed = await Task.WhenAny(timeout, real).ConfigureAwait(false); if (finishedTask == timeout) { return new SomeErrorResult(...); } else { // This still has to check for an exception or maybe other // things. return ProcessResult(real); } I don't think this is a lot better. I don't think it's intuitive whether or not I have to use `ConfigureAwait(false)` there, but my assumption is since ASP doesn't have a UI thread I don't really give a flip about maintaining my context here so I shouldn't. If I'm wrong there, I need to know. I prefer Rx because IIRC I could instead be writing: return _someObject.SomeCall(...) .Timeout(...); That has, contained within its logic, that the value I return will asynchronously: * Emit at least one result and notify when it is completed. * Emit an error if the call doesn't complete. * Emit an error if the call doesn't complete before the timeout. I don't have to `ConfigureAwait()` or think about captured contexts. It doesn't capture the context because Rx never captures the context. My caller might *direct* it to do so via `ObserveOn()`, but it's not my place as library writer to make that decision. That's my biggest gripe with the TAP, if you're writing library code you have to guess your client's needs, and you're already dealing with too much of that. Now, in terms of a WPF app, what I mean is I'll use `async/await` in my Commands. I will possibly even use them in the libraries that the Commands call directly. But once `GetData()` command has awaited `ISomeApi.GetData()`, I'm probably going to `await` some direct HTTP method to get that data by necessity. Now I feel like I have a choice, but I really don't. The choice feels like, "Do I keep using `await`?" If I do, it seems like every `await` needs to be paired with a `ConfigureAwait(false)`, because the things above me should've already captured a context, and I don't want to recapture it or even return to it yet. But wait. I'm already on a worker thread context, why am I trying so hard to try not to get back on the UI thread context? It turns out if I need to do further work like parsing JSON or whatever, since I'm already on a worker thread, there's no point in saying, "Please do this on another worker thread, and make sure you don't come back to the original UI context when you're done because I still have more work to do." I can just say "do this work." That's an awful lot of thinking to find out you can either use the keyword and add a lot of clutter or start calling synchronous methods. I think `async/await` is very valuable at the UI layer *in a framework that has thread affinity*, and I think it causes more problems than it solves everywhere else, becuase its default is only appropriate if you're on the UI thread and you're supposed to get off of that ASAP! 
I wouldn't keep passing it around as a parameter like that, make some sort of DBController class that has your connection strings, list of objects, and your datatable as properties and put all of your data manipulation functions in that class. I'm not sure I can really provide any more concise examples without knowing more about your code structure. What does your local cache look like and what are you using it for? Can you post any of your code? If I'm understanding correctly, I'd return your up-to-date list of objects from your InsertIntoDB function and replace your local cache with it every time its called.
Absolutely a valid point. It does feel like it should be a discussion. Unfortunately I find there are so many people out there with a bad grasp of what asynchronous code and the async/await keywords really is/are; that there needs to be a bit of guidance and steering into the right ball park. You talk about timeouts and cancellation which are important but to my knowledge there only way to add then to existing async functions that don't have that API is with Task.Run, ie wrap the task again. Unfortunately that has reprocussions and can in scenarios severely effect performance since you are shift work into another thread that maybe doesn't need another thread. There are scenarios where the trade off is needed but to provide it as an API means some less experienced users over use it thinking it's harmless and just adds more functionality, not knowing it can have detrimental effects. But you could say the same about these sync over async utilities - they should be used sparingly and only when no other option is available. Tl;Dr; I pretty much agree with you general point
Have not reviewed your work and likely will not have time to do so but thanks for your efforts in helping the industry.
After you run the IDataView through the transformation you can just call MLContext.Data.SaveAsBinary. Takes the data and serializes it out in a binary format. You then just use MLContext.Data.LoadFromBinary to use it.
I like to think of the controller as the traffic cop. A request comes into the controller and it then directs that traffics to the correct service(s) for processing, a valid model object is then kicked out by the service(s) and that is returned back to the requester as a view or partial view.
If you create a new thread it doesn't pull it from a ThreadPool. 
[https://www.hackerrank.com/](https://www.hackerrank.com/) [https://projecteuler.net/archives](https://projecteuler.net/archives) &amp;#x200B;
So I shouldn't do it like this? public class DoThis(){ var listObjects = GenerateListOfObjectsThatAreNotInTheCache(ListOfCurrentObjects); var dataTable = GenerateDataTableUsingListObjects(listObjects) InsertToDB(dataTable, listObjects) } public class DoThis(Datatable dataTable, List&lt;Category&gt; listObjects){ try { /// CODE FOR SENDING dataTable TO SQL } catch{ // handle exception } finally { } /// If successfully written to DB in SQL, then add listObjects to cache. } &amp;#x200B;
Cheers. I am just glad being useful. 🙂
I imagined it as a fix to a particular problem we sometimes get. you'd download the code, modify it a tiny bit, fix the problem and forget about it it woudl eb WAY too much job to make it 'proper' and generic and stuff, it's a quick and rather blunt instrument to fix one particular problem. and it still NEEDS to be modifiable, be it because the environment or specifics of the problem itself that's why i want it to be a one time, fire and forget source delivery system. imho, the easyest option
That is one of the best qualities to possess as a coder. Most of the other stuff just falls into place if you start each task with that attitude. 
Absolutely. Everyone can write code that machine understands. But it's much harder to write code which is easily Understandable by a human 🙂 I wish everyone would give more of those kisses.. Special ones.. SOLID YAGNI DRY KISS 🙂
Personally I've found the best way to learn is by actually programming, not just reading code. Anyway, this free book has a lot of exercises: [https://introprogramming.info/english-intro-csharp-book/](https://introprogramming.info/english-intro-csharp-book/) While it doesn't provide solutions it does provide hints for the exercises. There's also the subreddit r/dailyprogrammer that has a lot of exercises and some have C# solutions.
I'd like twitch and discord links, thanks. 
So I'm assuming that both DoThis(...) are functions and not classes, and that the second DoThis(Datatable dataTable, List&lt;Category&gt; listObjects) is actually InsertToDB (Datatable dataTable, List&lt;Category&gt; listObjects). You could do it this way but passing around your local data like that is not a very object-oriented way of doing things. Also, that finally block is ran regardless of whether the code in the try block succeeds or not. so you'll want some sort of flag that indicates success and it probably doesn't need to be within a finally block. &amp;#x200B; bool Success = false; try { /// CODE FOR SENDING dataTable TO SQL Success = true; } catch{ // handle exception } if(Success){ /// If successfully written to DB in SQL, then add listObjects to cache. } I'm still not sure what your cache is and what you are using it for. Is it your local copy of your sql data in DataTable form? Something else?
Xamarin for android/ios. Mono for desktop. Common basic library on netstandard
Sorry for my bad english
Any reason you are using public fields instead of properties? 
Hahahaha mother Russia!
I just want to say that there is such a project. He is raw. But people can do it better if there are extra hands and heads
 Here you go 🙂 https://www.twitch.tv/kaisinnel Discord link: https://discord.gg/Bfme3PD 
Oh you'd be surprised at some of the awful bullshit some people call code that I've seen over the decades. Some people really should have their fingers chopped off for some of it. Come to think of it, maybe I'll carry one of those pocket cigar cutters to the next dev meeting as a prop. And everybody's stayin after class until we find out who wrote the shit code. Haha I'm jk. 
It could be a missed refractor. I would say that public fields should only be used for struct.
I worked as support dev for a year. I have seen it all 😁 I love the saying OOP is POO. Programming for Others. Would be so lovely is lazy devs would understand that. But it's the same wishful thinking expecting people to be kind to each other. There are too many rude programmers. Rude in terms the code is written. 
I love when rude coders see me and think I'm some young pup then I tell them how long I've been coding - and take their sorry ass to skool on a topic. 
What I hate the most is "seniors" who think they are seniors. You can have 10 years of xp, but it won't matter if 9 years you've been repeating the same T by St you did on the first year. Experience measured in years is like measuring code quality by lines of code. 
That's a good point. I can name some examples but won't. This is coming from a very well-seasoned senior btw, where 10 years is just a warm up!
My cache is in internal move, just a public class variable... It just stores everything to this list, in order to not add the same items that is already in db into the datatable.
I disagree, it’s incredibly easy to separate up the model into a competent service layer with service classes implementing the logic and manipulation of data, and repositories performing the interactions with the database. Making a competent service layer just requires a few extra classes. 
I stated that a Task may be involved in pulling a thread from the thread pool to complete work, not that creating a new thread pulls from the thread pool.
Your first statement is just not true. All business logic belongs in the model. The model is your data, and manipulation. Your controller invoked that model, and your view decides how to present data it’s given. “A model” when speaking specifically about ASP is usually just an object, so of course it will have no logic. But the MVC structure is far from unique to .Net, and saying logic does no belong in the model is just wrong. 
A base class is a part of inheritance(which is a big part of C#) so I wouldn’t suggest finding a way to work around it In simple terms you are defining one class(the parent class) of “Items” and all your base classes(child) will be built off this. A “healing item” , “weapon” and “key items” are all “Items” but a weapon doesn’t need an “amount to heal” property and a healing items doesn’t need “damage” properties, ect... so instead of defining similar properties like name, Id, ect you only have to do it once in the parent class I’ve done this course before as well and I would take a look back on lesson 7 where he introduces inheritance and base classes 
I agree it's important to keep concepts like "thread safety" in mind, but that's really the realm of "parallel" execution more so than the differences between `Task` and threads. My comment is largely driven by observing conversations about, and work involving async/await. You don't have to get very deep before it's important to separate the concepts of `Task` and threads, so I believe it's important to realize that from the very beginning.
CleanCode is not a registered trademark? Maybe it doesn't matter much since this a small scale project, and free as far as I can see.
The error message is fairly self-explanatory, no? https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0501
The error message is fairly self-explanatory, no? https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0501
Base classes are useful for sharing code/behavior among similar classes. Think of a base class as a "generic" object and derived classes as "specific" objects. &gt; Could I avoid using a base class using something else? If you just need to define shared behavior and not its implementation, you could use interfaces. But if you need to share behavior implementations, you'd otherwise have to copy and paste the same code over and over. Let's consider an example and use the old trope of a base Car class. Maybe it looks something like this: public abstract class Car { public int Speed { get; protected set; } public abstract void Accelerate(); public void Stop() { _speed = 0; } } Here we have a base Car class with a Speed property and Accelerate and Stop methods, all behaviors that all Cars ought to have. Stopping a car is the same regardless of what kind of car it is - when the speed reaches zero, it's stopped. Since this behavior is shared across all cars, it is implemented in the base class and doesn't have to be copied to derived classes. But, not all cars accelerate at the same rate so that behavior isn't defined in the base class. So, let's create some specific cars. First, let's start with a minivan. It doesn't accelerate very fast, just 5 speed units at a tme: public class Minivan : Car { public override void Accelerate() { Speed += 5; } } Next, let's add a Ferrari. It can obviously accelerate a lot faster than a minivan. Let's pretend that its acceleration is a power curve that doubles every time Accelerate is called: public class Ferrari : Car { public Ferrari() { if (Speed == 0) Speed = 10; else Speed *= 2; } } And finally, where it all comes together. You can now create a function that handles all Car implementations. It doesn't matter if it's a Minivan or a Ferrari: public void GoFaster(Car thisCar) { thisCar.Accelerate(); } GoFaster doesn't care about the actual object type as long as its base class is a Car. Pass it a Minivan and its speed will increase by 5. Pass it a Ferrari and its speed will move from 0 to 10 and then double thereafter. You can also add specific behaviors to derived classes that aren't in the base class. For example, you could add a PickUpChicks method to the Ferrari class that obviously doesn't apply to the Minivan class. In that case, you'd have to know that the object is a Ferrari and declare it so in order to access the PickUpChicks method - that method would not be available to an object declared as a Car since the Car base class doesn't contain that method.
Read the error carefully and look at your code for the method of the overloaded bark. Compare it to the empty method bark. You are missing a body for your method as the error states. (Hint: Body is declared with the curly brackets. { } ) 
Just eagerly waiting for Unity to let Span&lt;T&gt; through. 
Never ever use getAwaiter and/or getResult. The docs state that these methods are for the compiler only. Besides that, why would you make an async method just to call it synchronous anyway with an de-tour over the awaiter? very bad anti-pattern http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html
 There is no ViewModel in the MVC pattern Not in the pattern, no, but in the framework, yes. It's important to grasp the distinction. That’s a Model, not a ViewModel. It's just the ViewModel. Just a bag of properties. The list is the model, it models the behavior of the list. If you just passed the list on through to the view and posted the whole thing back then you'd be right, but as the example is written you're wrong. If you want to pass data between controllers, all you should need is their raw structure. Passing a ViewModel in that situation is a kludge. Data binding is a feature of the MVC framework. How is using it a kludge, exactly? Why should I put any weight into what you say when you're not aware of a very basic feature of the framework?
I don’t buy this. How are your queries being made from your application?
As it should be. Maybe I'm evil for doing this or whatever but I don't read infellisense for every method I ever write, especially the ones I use regularly and are fairly basic. I certainly wouldn't expect to have to read the intellisense on a gethashcode function. I'm not saying C# is bad, just that I'd wager most reasonable developers wouldn't expect a gotcha like this in a language that is otherwise one of the most developer friendly options in the market 
No this is perfect, I'd rather not just be given the answer haha I guess the solution was simpler than I thought? using System; using System.Collections.Generic; using System.Linq; using System.Text; namespace Assignment11 { class Dog { public void bark() { Console.WriteLine("Empty method"); } public void bark(string dogsName) { } } class Program { static void Main(string[] args) { Dog fido = new Dog(); fido.bark(); fido.bark("Fido"); Console.Write("Hit any key to close"); Console.ReadKey(true); } } } Does that look right? It compiles so that's at least better than what I had. I have discovered I have a tendency to overthink things when I'm coding so this seems to be another example of that
Thank you, it is self-explanatory haha, I guess I was reading too much into it rather than just making the obvious change
Thank you for the detailed response. You are totally right with the decision fatigue with client apps. Your assumption is also correct that ASP.NET Core doesn't have a main/UI thread. `ConfigureAwait` is not needed there. One article on that: https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html (HttpContext.Current still exists, but seems to be differently implemented) You also might be interested in this section of the blog: https://blog.ploeh.dk/#fa919e35f82a4387822c9888dd5d7537 (highly recommend his blog in general) 
This isn't really a C# question, as much as it's a SysAdmin or Identity Access Management question. The short answer is both yes and no. The long answer is a bit more complicated and depends on a number of factors. * First, are there other machines that will be accessing your website aside from the "Whitelisted" ones? * Second, is the website you're trying to access locally hosted (on site) with IIS? * Third, do you use Active Directory as your Directory Services? Depending on your answers to the questions above, this is a very broad explanation of how to accomplish what your asking about: * While authentication by Machine Name is certainly possible, it is by nature an insecure practice, as "spoofing" the machine name is easy to do. * Keep in mind, if these terminals are connected to your domain, you're still going to need an account to log into the computer. That being said, the best approach here would be to create individual Service Accounts for each terminal and provisioning them with the least access needed to do their job. * Since each Service Account is tied to a single machine, you can create a group policy that restricts Login access to each terminal to its respective service account and admins, and keep it logged in and unlocked at all times. * All of your newly created Service Accounts can then be added to a single security group within Active Directory. As long as your web site is hosted locally with IIS, you can then go into the security section of your site and restrict access to members of your Security Account Group. * If the website is built with ASP.NET there are ways to use Windows Based Authentication, specifically the logged in user (Service Account), to authenticate automatically. I assume there are libraries in other languages that can accomplish this as well, but I don't know them and know ASP works. 
Very well done man. I like your style, and your ideas are solid with what I consider good code. I'll have to add that book to my reading list, and try to follow along. I've been writing software for 20+ years, and this looks interesting.
Good stuff man, just followed on twitch
This is good! It will be very usefull.
Run async as sync should almost never be done and that async helper is bad. You can be ok with it on a console application out of luck but any server side application with a lot of simultaneous tasks (like a web app) you heavily risk thread and task exhaustion causing your whole application to deadlock.
The semantic differences in java and c# are fairly minimal. C# has its own level of ceremony that really isn’t that different than Java. 
That should fix the error. However, does that mean the assignment is complete? Shouldn't it do something with the string you give to the overload method? Or is that the next step you were going to do anyway? If so, ignore me :) 
Yep! I just added the writeline for the dogsName method and that's it. Thanks for your help!
Ok great. You're welcome! If you feel like practicing some more and really get an understanding of overloading, you could add a third method of bark. Do you have an idea of how you would do that? 
Would I just change dogsName to something different? And then call that one specifically?
"Okay, chuck, here's what we'll do. This directory with all of your project files? Shift- delete, there, all clean..."
Not quite. But you're thinking in the right general direction. The compiler cant differentiate between your variable names, so it wont know what the difference is between dogsName or catsName for example. What it can do is differentiate between the data types, order and amount of parameters. Have a look at this page, it explains method overloading with examples and the different ways of doing it. https://www.google.nl/amp/s/www.geeksforgeeks.org/c-sharp-method-overloading/amp/
I’m really interested in this course! Send me the discord and twitch links 
Been programming for almost 20 years and I have interviewed my share of rookie's. Be personable and and show your eagerness to learn. Highlight what time have done and don't try and BS anyone, they can spot it a mile away. Brush up on concept's in case it gets technical. Highlight your communication skills and your eagerness to be part of a team. Great communication skills are something alot of developers lack.
&gt;you should elide the async/await keywords I disagree. Knowing when that is ok and when that will break something can be tricky (see try/catch, or worse, using). Also, debuggers will lose the stackframe when you elide the keywords. It can improve performance, but the first rule of optimization is [don't](http://www.moscowcoffeereview.com/programming/the-3-rules-of-optimization/). ``` public string GetString() =&gt; GetStringCoreAsync(true, CancellationToken.None) .ConfigureAwait(false) .GetAwaiter() .GetResult(); ``` This is one of those cases where you should just use `.Result`. The `.ConfigureAwait(false)` is pointless, because you aren't awaiting, and `.GetAwaiter().GetResult()` is no safer than plain old `.Result`.
Okay, I understand that part now. So what type would I change to then? 
This. Really, don’t try to bullshit. Saying you don’t know is perfectly fine. If you don’t know but have a theory on how to answer it say it after you said you don’t know but &lt;insert theory&gt;. It can help with critical thinking / analysis. 
All of this is true. Showing them that you're motivated and that you're worth investing in is a big deal. That said, there are some important non-technical things you should bone up on. Research the company online, peruse their website and make sure you have a decent grasp of what they do. If they are in a particular industry then make sure you have a understanding of what that industry is as well. Look at press releases, product releases, product reviews. Doing your homework goes a long way to impressing interviewers, or rather, avoiding embarrassing revelations that you have no idea what the company even does (it happens and they usually don't get invited back). I don't beat-up junior devs on super technical stuff but that probably doesn't mean much, every interviewer is different. If they ask you about something you don't know, write down and say you'll look it up after this; be eager. Of course, whatever must-haves and nice-to-haves they outlined in the job posting are the things you need to be reviewing regardless of what anyone here says. But again, the point in hiring junior devs is investing in someone early on and getting a top-notch employee out of the investment and it's less about buying the experience. Let's be honest, it's good a value for the company and it adds a lot of career value to you. Your age, specifically maturity, will be a benefit in this matter. &amp;#x200B; OH, one last thing, you must follow-up after the interview and thank them for their time. If you're genuinely still interested then say that. Annoys me when folks don't do that. I've hired ones that didn't... but little things like that become decisive factors when you're deciding who to callback between a dozen candidates. &amp;#x200B; Good luck!
Working on teaching myself C#. Would love to join your discord! 
You could do `public void bark(int howManyTimes)` As a third overload. I don't know if you've gotten into optional parameters yet, but there's a way to combine your two existing overloads into one method as well. I get that's not the point of the assignment, but if you're wanting to learn more, might want to try that one too. As an aside `abstract` means you can't instantiate it, the implementation must be provided by a derived class. You can have abstract classes (and methods with that class). All it means is that when you derive a class from it, *that* class must provide the implementation. So you could have an `abstract class Dog` and derive a Hound and a Pomeranian. The hound could implement `bark` as `writeline(loud)` and the pomeranian could implement it as `writeline(yappy)` Now you know all dogs bark, so anything that derives from your abstract `dog` can have a distinct bark implementation. There's more to it, but you'll get there sooner or later. 
Thanks, this is very helpful
If the hash function is cryptographically secure, it is fully mixed and non-invertible, such that you \_cannot\_ “flood” a hash bucket and the lookup which would normally be an *O(1)* operation decends to that of a linked list - *O(n)*. As for how an attacker finds out how to break a non-cryptographically secure hash function in the first place, please see: [https://www.josephkirwin.com/2018/04/07/z3-hash-inversions/](https://www.josephkirwin.com/2018/04/07/z3-hash-inversions/)
read the first google doc. are your streams once a week or every day of the week?
Agreed. Sysadmin here and I recently did something similar. I used a pslogin with a AD service account with very little access, I then configured the ShellLauncher to replace explorer.exe with internet explorer (iexplore.exe [https://your-app-url-here/login](https://your-app-url-here/login)). How you configure the app is based on your needs. With a configuration like this, you don't want a user authenticating and walking away. In our case, we just had a web page where you enter a pin code and sign-in so there was never any risk of sessions being left open.
Rather than try to learn the general principle of base classes, perhaps I can teach you a specific way in which they are used, and you can begin to generalize to other uses. &amp;#x200B; A base class is used in a "Template Method" pattern. Most Graphical User Interface toolkits, like Windows Presentation Foundation (WPF), use the Template Method pattern to describe how layout of a control should be arranged and measured in order to calculate relative location and viewport size. In WPF, the "abstract base class" is UIElement: [https://docs.microsoft.com/en-us/dotnet/api/system.windows.uielement?view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.windows.uielement?view=netframework-4.7.2) Below is a slimmed down version of UIElement which only does measuring and then arranging, and invalidation of those calculations. Note that with this general concept of arrange and measure, any UIElement can describe to the framework how it wants to be displayed. Not only that, but since it is inductively defined, it can efficiently compute hit detection for mouse clicks, because each element has explained to the framework how it fits on the screen. In this sense, any element subclassing UIElement gets to participate in the "framework" provided by the base class. public abstract class UIElement { // Positions child elements and determines a size for a UIElement. Parent elements call this method from their ArrangeCore(Rect) implementation (or a WPF framework-level equivalent) to form a recursive layout update. This method constitutes the second pass of a layout update. public void Arrange (System.Windows.Rect finalRect); // Defines the template for WPF core-level arrange layout definition. protected virtual void ArrangeCore (System.Windows.Rect finalRect); // Updates the DesiredSize of a UIElement. Parent elements call this method from their own MeasureCore(Size) implementations to form a recursive layout update. Calling this method constitutes the first pass (the "Measure" pass) of a layout update. public void Measure (System.Windows.Size availableSize); // When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content. protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize); // Invalidates the arrange state (layout) for a UIElement. After the invalidation, the UIElement will have its layout updated, which will occur asynchronously. public void InvalidateArrange(); // Invalidates the measurement state (layout) for a UIElement. public void InvalidateMeasure(); } &amp;#x200B; And here is the general pattern, outside any specific problem domain: &amp;#x200B; public abstract class AlgorithmBase { public void TemplateMethod() { Step1(); Step2(); Step3(); } public abstract void Step1(); public abstract void Step2(); public abstract void Step3(); } public class ConcreteAlgorithmA : AlgorithmBase { public override void Step1() { Console.WriteLine("Algorithm A, Step 1"); } public override void Step2() { Console.WriteLine("Algorithm A, Step 2"); } public override void Step3() { Console.WriteLine("Algorithm A, Step 3"); } } public class ConcreteAlgorithmB : AlgorithmBase { public override void Step1() { Console.WriteLine("Algorithm B, Step 1"); } public override void Step2() { Console.WriteLine("Algorithm B, Step 2"); } public override void Step3() { Console.WriteLine("Algorithm B, Step 3"); } } &amp;#x200B;
The term you're looking for is 'psuedo-code'.
Psedo code Please give some context to what you want. It is more likely than not available on "all the twitters". 
When my team(s) hired for Microsoft it was A) can this dude code, and B) is he going to cause drama or not? 
I always see that advice, "Follow up" do you mean to call them a day or two later and see if they made a decision? I feel like I would be pestering them and they would reject me for being impatient and childish. 
What's a loop? Asking for a friend. 
I put out a hotfix release just to address your issue. I guess that's gratitude for ya.... The source file is more than just the markdown. Are you trolling?
not while(1) 1 += "retards" } Are you saying it's that dead simple? they are offering me 145,000/yr Sorry to sound like an idiot but I haven't intervied in a long time and most CS shit we never use. 
The program keeps telling me there's an Update Available but the windows store doesn't have the update so... that's annoying! :)
Are you a robot?
Interview loop. It's what they call all of the interviews that you do in a day with different engineers.
Every place is going to be different but.... A lot of work is building CRUD apps. This may be what you're interviewing for and if so, hopefully the interviewers will not be asking you to reverse a linked list or some garbage like that. Knowledge of source control, unit testing, integration testing and general familiarity with working on a team are some things I would ask about. I would expect some OOP questions and it sounds like you're comfortable with that. Expect to answer questions about tech\projects that are on your resume. Hopefully you didn't list AWS as something you're familiar with when the extent of your experience is "I spun up an EC2 instance once." (This is something I've seen multiple times and I don't think we've ever offered a position to those candidates.)
Senior dev here: this is good material! Thanks for taking the time to get this into the wild. PM me if you want any example code snippits for your future lessons?
I would like a discord link! I’ve been doing unity for the past 6 months, but what I find the most helpful is when I learn programming concepts. Finding SOLID changed everything for me. 
if name.contains(“dildo”) &amp;&amp; name.contains(“nitro”) { Console.WriteLine(“give this man some pseudo code!”); } else { Console.WriteLine(“RTFM”); }
I can't build the solution. It's trying to use net framework 4.6.2? That seems... old. Also, it's trying to start up ..\\RoslynPad\\src\\RoslynPad\\bin\\Debug\\net462\\win\\RoslynPad.exe which seems wrong. The bin folder doesn't even exist for me.
Is there a chat for this project? I'd like to contribute but I have questions.
The book you want is [Pro ASP.NET Core MVC 2](https://www.apress.com/us/book/9781484231494) It will walk you thru plenty of good "model" examples.
This turned out to be longer than anticipated, hope it helps and I apologise for any typos. I interview potential software engineers fairly often. For entry level, you'll probably get hit with textbook questions. So you should brush up on some technical developer questions. If the company is somewhat known, you can checkout indeed and Glassdoor reviews/interview sections. Sometimes they'll list commonly asked questions for your position. Study these questions if available. Protip: come with questions, and not just general ones! Show interest in the company. The questions don't have to be directly related to the position, but to the company, such as... How's the culture? What are the main languages used for the software? "During my research, I noticed &lt;company name&gt; is headquartered in &lt;location&gt;. Will there be travel involved to &lt;location&gt;?". Or whatever you see as relevant-ish. My favorite question to ask (if I feel the interview went decent): "was there anything that you did not like about me in today's interview?". This is a great time to correct any concerns they have with what you've said. Here are some of the things we like to ask, in no order of seniority (we aren't too picky). Remember, if you don't know something, that is ok! At one point, we didn't know it either. They'll know you're lying so give it your best shot and express what you know. Some questions we may ask (feel free to give an answer or ask for help, pm is ok too): What is big O notation? What is a unit test and when do you perform them? This is personally one of my favorites. Many developers seem to be afraid and/or hate testing and documentation. If someone shows that this is important, they stand out to me. Why is sub versioning important? What are requirements? In simple terms, how does a binary search work? What are some of the principal's of object oriented programming? What is threading? Explain the software development life cycle What is the difference between white and black box testing? What's an efficient way to determine if a number is negative or positive? Non technical questions Given 10 stones, 9 of them weigh the same, 1 is a different weight. In the least amount of steps, find the stone that weighs different. This isn't a programming question, it's just getting you to think out loud. What kind of boss do you like to work for? 
Why dont you create a variable that records/seconds/minutes or whatever has passed. Set the timer interval to 1 second or 1 minute. Then after each timertick increment your counter variable. Disable the timer when you need to pause. Enable it when you need to resume. When your variable reaches do something and reset it to 0
Is this what you're looking for? [https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-add-package#examples](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-add-package#examples) While in the project directory run a command like `dotnet add package Newtonsoft.Json` and it will be added to your project...
The only file dialogs I know of are bound to either WinForms or WPF, neither is cross-platform. You could try looking around the code for Avalonia, but I don;t know if it's worth the hassle.
Ugh, just had to install 4.6.2 and restart VS
Never been involved in either company but if you know enough cS nonsense to know the time complexity of a hash table lookup that's usually enough at my company. 
To get what you want properly, I think you'd probably need to write it yourself, and have it wrap the appropriate native methods/implementation based on what it is running on.
Here's my lean code lesson: Control+K, Control+D (1 second) 
There's no reason to create an async delegate for `Task.Run` - it will handle the async method itself. There's also no reason to call `.Wait` and then `.Result` - `.Result` will wait for the task to complete. Also `.Result` is a property, not a method. Here is your code, corrected: try { var task = Task.Run(MyTaskAsync); var result = task.Result; } catch (AggregateException e) { }
I am interested but I havent understand which day of week, just time. Is it Wednesday? I will join ofc.
I'm pretty new here, but I don't think this is a good place for posting basic coding questions like this. I also googled your question and the first result was in java, but you should be able to figure it out. https://stackoverflow.com/questions/29001777/creating-a-hollow-rectangle-using-asterisks-in-java
It's possible the indexes that you made aren't being used (can be various reasons). If all of your queries are using the same columns, adding a non-clustered index on both with an include may be just what you need: CREATE NONCLUSTERED INDEX IX_MYTABLE_Security ON MYTABLE (security, timestamp) INCLUDE (price); https://docs.microsoft.com/en-us/sql/relational-databases/indexes/create-indexes-with-included-columns?view=sql-server-2017
Yes, the lessons are based on Robert C. Martin's book Clean Code. But his name and reference to the book are mentioned multiple times in the material. 
Thanks 🙂
Much appreciated 🙂
Glad you like it! 
The most clean code = no code. That's right! 
 Here you go 🙂 https://www.twitch.tv/kaisinnel Discord link: https://discord.gg/Bfme3PD 
 Here you go 🙂 Discord link: https://discord.gg/Bfme3PD 
Once a week. That could change though if I get a bigger viewership. You know, I do lessons for free, but if only a few people watch, it's a bit demotivating. What I had in mind though, is doing public code reviews or refactoring sessions on Twitch 🙂. What do you think? 
mono supports winforms on Linux/macos https://www.mono-project.com/docs/gui/winforms/#about-systemwindowsforms
No, I am not. I am just a friendly dev caring about the quality of code that we all write 😊
Thank you, I will have to keep that in mind! 
 Here you go 🙂 Discord link: https://discord.gg/Bfme3PD 
Haha! That's actually the first thing I said in my first workshop 🙂
It's on weekends 🙂 and it's up to you guys to decide the exact day. Most likely Saturday 
Thank you for your reply. I will join for sure. I will track this post for more info. Unfortunatelly I missed first lesson, do you have any material from first lesson that I can examine? Git repository maybe?
Your twice voice...
Yup 🙂 Theory:https://docs.google.com/presentation/d/1r_SlfLpf7gT98p1pPjCc9d3II8W6qBeTMPDusBFGmcY/edit?usp=drivesdk Recording (sadly no workshop recording):https://youtu.be/kH2-X-H1PSA Workshop:https://github.com/Almantask/CleanCodeSeries.Workshop/tree/master/src/CleanCodeSeries.Workshop.Lesson1.EasyToUnderstandCode Master is material, Clean Code branch is refactored version. 
Ahh.. Sorry about that. I bought a new mic recently, so hopefully that won't be an issue anymore. 
No no, later in the day or the next day send an email (don't call, they're busy) saying something like the following: Hi whoeverinterviewedyou, I just wanted to say thank you for your time, I enjoyed speaking with you and the team yesterday. XYZ corp seems like a really exciting opportunity and I hope you consider me for the position. If you have any follow-up questions or recommendations for further reading, please share! Thanks again, someredditor &amp;#x200B; Re: pestering, sending an email a few days later saying, "did I get the job???" is impatient and possibly a little childish, so don't do that ;) If it's been a few weeks... well, you either aren't being considered or their timeline has drawn out (maybe you were one of the first interviews, maybe they were overly optimistic about budgets). It doesn't hurt to do a polite poke at that point and reiterate your interest if the position is still open.
If you end up writing your own version, \[this C project\]([https://github.com/mlabbe/nativefiledialog](https://github.com/mlabbe/nativefiledialog)) looks like a good source of inspiration. It looks like someone has made a C# wrapper of sorts, although building the original project as a dynamic library doesn't really seem to be supported (and is likely painful for all the systems you'd want to support). Given how simple most of the implementation is, it wouldn't take much effort to port it to C# and call stuff via PInvoke.
I do the same thing! I cofounded an organization called oneleif (we recently got a subreddit! r/oneleif) and we are more geared towards being eclectic in what people can learn. We have game devs, mobile devs, UI designers, music engineers, etc... I think it really helps to get different perspectives on an idea or project. If you would like to join and help teach people, get help on a project/ learning, or just be a part of the community, join our discord: https://discord.gg/FNMeDEn
Hey, it's really nice to find like-minded people! Invitation is much appreciated, will join right after writing this reply! R. C. Martin is an amazing person and Clean Code is a great book. The lesson material is mostly based on it and referenced from the very first slide and R. C. Martin quoted many times across 😊 See you on Discord 
greate content.very much appreciated
Thank you 🙂
when your code is not producing the results you want, a good idea is to run through the code in your head, with a piece of paper. Do that, and you will understand why your code doesn't do what you want it to and it might help you towards a solution
Yea, that's a joke :P
&gt; &gt; &gt; &gt; &gt; A ViewModel is useful in a binding-heavy UI framework like the XAML frameworks (WPF, Xamarin Forms et al), where binding directly to the model isn’t feasible; you need an intermediary that has largely the same properties but is more tweaked towards what is actually presented. Hence ViewModel. On the bright side, that approach removes most of the need for a controller, making for an overall leaner approach. But since were discussing ASP.NET MVC, not some hypothetical MVVM web framework (Uno, perhaps?), I don’t know why you would bring this up. You're returning model data and additional data in that vm to view. e.g you have edit form with select list, thus you need to fill that select list somehow, thus data from vm.
Heh Poe's Law strikes again.
Personally I'm using this approach * InputModel e.g data from forms, sometimes with some hacks needed to have some fancy UI * ViewModel e.g returning model with data to fill select list 
I see the pull request (and it looks great btw) but not the PM. You can just message me on Reddit if ya like and I'll see it. I'll merge it in sometime in the next few days. I just put out a new release so I get to be lazy and take it easy for awhile. =)
Yea, I forgot about adding emote or something :/
It would be awesome if you share it on YouTube.
It is on YouTube too 🙂 https://youtu.be/kH2-X-H1PSA
In that case I would just put them in a git repo and copy them out. But I see your point. There are several services for storing snippets. We used to use one for our sql scripts. Can't remember the name now.
Let's hope you don't get downvoted more, because you're right. Let's be clear for everybody: **The model in MVC is where the business logic is meant to be.** For reference, take a look at [Wikipedia](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) or [Microsoft's own ASP.MVC definition](https://docs.microsoft.com/en-gb/aspnet/core/mvc/overview?view=aspnetcore-2.2). Ignore the top google search result for 'MVC definition', it's wrong (fake news! /s). But a lot of people do believe otherwise. I'd could happily give some observations about why people have this misconception, but that'd be a bit of an old developer ramblings post ;)
I'm offended by your assumption that I can't go 'cruising for honies' in my minivan - other wise great post 
The principles behind OOP say more or less that you should split stuff up as much as possible so that related things are grouped together in their own class. Often used example is that of a car - if you need to deal with the data of cars, you would make a car class containing relevant variables like top speed, name, colour and appropriate methods like for example drive(double distance) or something like that.
Class should hold properties and methods related to one functionality. Like handling physics or collisions
Classes are a logical grouping of data and/or behaviour. What you define in the class itself is the "blueprint". public class Pet { public string Name { get; set; } public int Age { get; set; } public AnimalType Type { get; set; } public Pet(AnimalType type, string name, int age) { Type = type; Name = name; Age = age; } } and maybe you use it like this Pet petOfcbirchy87 = new Pet(AnimalType.Cat, "Missy", 2); Whenever you have data that belongs together, you usually make a class for this, and usually this class is meaningful for the business. A certain class definition might have the same name as one in another software, but their definitions might be vastly different, depending on what's meaningful for the business.
Just read it all, what a beautiful piece of information! However, I still have a few questions regarding your project template and how to keep track of these kind of "more complex" POST requests. &amp;#x200B; Should I leave my doubts in here or would you like me to send them to you via Discord (assumind you do have free time! If you don't I can find a way and figure it out by myself)? &amp;#x200B; I was also trying to seatch for some useful videos or articles about these "niche" cases but I couldn't find any that could be helpful. 
A huge **+1** for pen and paper testing for beginners.
Our lecturer didn’t explain them very well. I mean, he told us what they are used for, but never adequately took us through the implementation, leaving a hell of a lot of people completely confused. Worst part, our assessment was a week later, and required us to implement 8 different classes. 
What you want is Entity Framework, Code First. https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application Your model is used to create a database, it's a really slick system. Take your time though, work through slowly, it's a mind fuck if you rush through too fast.
thanks, i guess that's what i'll do. tit just seemed a bit of a hassle to have a separate repo and handling 'mixed repo' projects
Blyat
Ask your teacher.
No one is doing your homework for you.
Thanks, mate. Yeah a method group is cleaner. I didn't know Task.Run could handle the async calls itself. Thanks for that!
Incorrect. Sure, in the original Smalltalk 1970's definition of it. But things change. Stop spreading FUD.
alright no need to brag there mr money bags
From the Microsoft ASP.NET Core v2.2 documentation link I included (emphasis mine): &gt; The Model in an MVC application represents the state of the application and any business logic or operations that should be performed by it. **Business logic should be encapsulated in the model, along with any implementation logic for persisting the state of the application**. I'm not sure how much clearer that could be. The thought that MVC has changed is one of the misconceptions I referred to. MVC itself has not changed, people have just moved onto an MVVM/MVC hybrid approach.
Why: classes encapsulate things. You don't need to think about the internals of a class (at least, not all the time.) This lets you think abstractly about it. It's more complex than that, because there are different types of classes, but at its core, that's why. Think about your bank account. You understand what happens with your bank account: you put money in, and you later take money out to pay for things. You may know that the bank stores your money in a vault. You may know that you can tell the bank to send some of your money to pay for goods using a paper check, or electronically. You may know some of the internal checks and balances that a bank goes through to make sure someone else doesn't try to take your money when you don't want them to. You may know that a bank deals with thousands of bank accounts. But you don't have to think about that. All you have to do is walk up to the cashier, have her tally up how much it costs to buy your groceries, stick that little piece of plastic in the slot, and put in your pin code. *Your* bank account is an instance of the "bank account" object. It is one of a collection of instances of "bank account." "Use ATM card" is a method of "bank account," which you use to pay for goods and services. And so on. Having a bank account lets you not have to know or deal with all the particulars about how money moves around from bank to bank. That's pretty much what classes are for. 
@Jestar342 bro clarify more plz, ex if possible 
If it's just a text game, no DLLs or anything required, you can build the project and send the .exe from the build folder. You could also get the setup project extension and create an installer for it. Console applications are just run off the command line, so they don't need visual studio to run it
It’s just an executable. Go to the bin/release folder and you will find it there once you built it.
When you compile your file with Visual Studio, its creates a .exe in the bin (or binaires) or release folder. Use the file explorer to find it, it should be inside the folder of your solution. You might have some problems with the version of the .net though, but that is a completely different matter. 
Starting a web app (with OWIN and Katana) is all in the link I posted already. Integrating with TopShelf is done either by using the library the other user posted, or simply calling WebApp.Start in your TopShelf service start. If you're using a ["simple service"](https://topshelf.readthedocs.io/en/latest/configuration/config_api.html#simple-service) (i.e. a `ServiceControl` derivative), then that would be done in the `Start` method on that class. If you're using a ["custom service"](https://topshelf.readthedocs.io/en/latest/configuration/config_api.html#custom-service) then it would be in whatever method you have configured in the `WhenStarted` chain. Then you'd dispose of the started webapp in the respective `Stop` or `Shutdown` chains.
There is no .exe anywhere. 
Ok bro thank you, i have a console application with topshelf installed and configured, so i think with your way i can add some other configuration to add the web api to console beside the topshelf, right bro ?
&gt; Besides that, why would you make an async method just to call it synchronous anyway Because some libraries only expose async methods and you need to use it within methods that have to be synchronous (because you're implementing an interface that defines synchronous methods).
Is this just a standard .net framework console app? If you build the project, open the project folder in explorer/file explorer, go to the bin\debug or bin\release dir (based on if you did a debug or release build), then you should find the exe, dlls, and pdb files generated
You should write code, not read code. Every programmer has 100,000 lines of bad code in them, best to get them out ASAP so you get to the good code :-) Find a project you consider fun and start writing. Don't worry about quality of the code, it'll get better. As for reading code, consider this post: [http://www.gigamonkeys.com/code-reading/](http://www.gigamonkeys.com/code-reading/) \- dissecting and experimenting with code probably beats plain reading in terms of understanding the whys and whats. Best way to read a program is to rewrite it :-), so the question "what to read" can be reframed as "what to rewrite" - which also helps with the 100,000 lines mentioned above. &amp;#x200B;
+2 Think about it, currently for each position you are drawing a shape followed by a space. Draw it out and break it down logically. Change your for loop to be i &lt;= num. That way the loop will run while i is either num or less than num. Then we can use num as our maximum value for checking borders Then your logic should be something like this. If i = 0 or i = num AND if j = 0 or j = num We are on a border position so write a shape ELSE we are not on a border position so write an empty space 
i found them all except for the exe
You are totally right, I hate people that spread this misinformation. All your business logic should go in your model. The model in MVC isn't only a folder were you put all your DTO, otherwise you get an anemic domain model. Read more here : https://www.martinfowler.com/bliki/AnemicDomainModel.html I like to have an entirely seperate project in my solution that will contain it.
It's best to use a common example: Want a single place to store all the data for a user? Use a class. Want to get, update, and delete user data from a database? Use a class. Need to save user data across the internet? Also a class. You build classes by grouping common functionality together. In my example you might have these three classes, all with different functionality: User, UserRepository, UserService. My user class would be boring, probably just a couple properties like username, password, first name, last name. My UserRepository class would only contain database related methods. When using that class to get user data from a database, my UserRepository class would return a User object filled with the data I requested. Same goes for the UserService, except it's implementation would call out across the internet instead of to a database.
I've always liked the "blueprint" analogy. I usually ask people "Imagine a cup in your head, it might be big or small, contains a liquid, can be sipped from. That's a class. Now it's not until someone hands you a cup, is when you have your instance".
Or you could use something modern: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/rename-computer?view=powershell-6 You can call PS from C#.
 char filler = '*'; int width = 9; int height = 4; for (int i = 0; i &lt; height; i++) { if (i == 0 || i == height - 1) Console.WriteLine(new string(filler, width)); else Console.WriteLine($"{filler}{new string(' ', width - 2)}{filler}"); } &amp;#x200B;
I have to disagree that your model in the MVC should not contain business logic. It shoud contain it. The model is so much more than just dumb objects that do nothing. I think you are not understanding what is the difference between a dto and the model layer in the MVC. A dto, data transfer object, is what your controller will send and receives (your current definition of the model). It should not hold data that you do not want to transfer and don't have methods in them. On the other hand, the model layer is where all your domain operations will be. More often than not, I keep this layer in an different project in my solution to decouple everything (this project holds no references to the other one). This layer has the responsibility to hold all my business logic. Objects in there should be rich and contains methods that won't be exposed to the other layer. If I have a small project, I will put my service layer in there too. By doing this, you are staying away from an anemic domail model, which is an anti-pattern.
class Rect { public int X; public int Y; public int Width; public int Height; &amp;#x200B; public Rect(int x, int y, int w, int h) { X = x; Y = y; Width = w; Height = h; } &amp;#x200B; public void Show() { var list = new List&lt;string&gt;(); AddSpace(list, 0); for (var i = 0; i &lt; Width; i++) { list\[0\] += "\*"; } for (var i = 1; i &lt; Height-1; i++) { AddSpace(list, i).Add("\*"); &amp;#x200B; for (varji = 0; j &lt; Width-1; j++) { list\[i\] += " "; } list.Add("\*"); } for (var i = 0; i &lt; Width; i++) { list\[list.Count - 1\] += "\*"; } } &amp;#x200B; public List&lt;string&gt; AddSpace(List&lt;string&gt; space, int index) { if (space.Count &lt; index) space.Add(""); &amp;#x200B; for (var i = 0; i &lt; X; i++) { space\[index\] += " "; } return space; } } &amp;#x200B; Not sure what works. I have not checked. Something like this)))
Go to the project properties, select Build tab, and look for Output Path text field. It should contain the path, where all the resulting files are generated. You can also change it here. This path is usually different based on the selected Configuration and Platform. You can see both at the top of the project properties tab.
Never feel embarrassed to ask a question. It shows strength of character. &amp;#x200B; Show that you've tried to understand and people will always help you here.
Can I get the links?
 Here you go 🙂 https://www.twitch.tv/kaisinnel Discord link: https://discord.gg/Bfme3PD 
Classes are simply a way of organizing code. Here is a nice Analogy that helped me. Your application is a swiss army knife and each tool is a class. Your application has a Knife class, A scissors class, a saw class and a toothpick class. Code related to knife functions would be in your knife class. for instance it may have a Cut() function. but other things cut as well, such as a saw. But it cuts differently and therefore would need different code which you organize separatley into your Saw class. You would use these classes as needed when the most relevant Cut function is appropriate to apply. Say you had some virtual cheese. well knife cuts cheese very well and so you use the knife class. But what if you have some virtual wood? Knifes don't cut wood all that well but saws do. so then you use the Saw class. 
 Here you go 🙂 https://www.twitch.tv/kaisinnel Discord link: https://discord.gg/Bfme3PD 
I was trying to ask what library you use. It's possible to speed it up with better library 
Removed: Rule 4.
Classes are one way of underpinning Object Oriented Programming (OOP), and there's no shortage of material to explain the whys and hows of that. Here's a point that I don't see made often enough is: It takes a lot of time and practice to become comfortable with the OOP way of thinking. OOP is often cast as a disappointment today. In the 1980s and 1990s it was the hot new silver bullet that was going to save everyone's bacon. It didn't exactly turn out that way, partly because designing a high-quality system of objects, and knowing when objects are and are not appropriate for the problem at hand, is harder than anyone realized. I don't mean this as a discouragement. I just want to assure you that almost no one really groks this quickly. OOP adds yet another dimension of hierarchy to bear in mind while developing, implementing, and maintaining a system. If procedural programming is 3D chess, OOP is arguably 4D chess.
In a relatively large project (say, tens or hundreds of thousands of lines of code), you need to be able to understand things. Classes let you define conceptual objects and relationships that turn those lines into a bunch of things that can be understood in isolation. I will give an example to illustrate: Let's say you're making a video game. You have to have enmies with hit points who die when they have no hit points left. Do you make one array for all of the enemies' hit points and three more for their positions (x, y, and z coordinates)? And make all of your logic look in the different arrays? Sounds messy. Instead, let's make one class (or maybe struct) for "three dimensional position" and one class for "enemy" or "unit" that has a position and a hit points valie, maybe also a getter for "IsDead" that returns whether HitPoints is 0 or less so you don't have to constantly type "HitPoints &lt;= 0" everywhere to mean that. Now your logic gets way cleaner and more organized andijnstead of managing one array for each attribute of a unit, you have an array of units with logical behavior. Does that make sense? I can expand on it further if it helps. There are other reasons as well. As people have noted, encapsulation and abstraction are useful - basically, wrapping up complex behavior so you can reason about it at a higher level. Going back to the (x, y, z) position example, you might have a struct for position and a struct for offset (i.e., movement) and operators so you can add an offset to a position and get a new position. Now you don't have to continually write three statements to adjust x, y, and z, you can write one to add an offset to a position. This means less code, but also that you can zoom out and *think* of position and offset as "one thing each" rather than "three things each". This is called "chunking" in cognitive psychology and it helps you process and remember information, because your working memory can really only store 5-7 things at once. Another advantage is that you can use classes as building blocks for other classes. Maybe in your game the player and enemies have a lot in common (position, hit points, weapons) and some differences (how they are controlled - mouse/keyboard vs. AI), so you define a base class with all of their shared properties and inherit from it twice to define the differences in their own classes. Saves you time and effort, and you can also write other logic that takes arguments of type "BaseUnit" and therefore applies equally well to both "PlayerUnit" and "EnemyUnit". To summarize, classes let you: 1. Combine shared behavior logically 2. Organize your code to be easier to understand 3. Think about things in a zoomed-out way a.k.a. "at higher levels of abstraction" 4. Share and reuse code instead of rewriting the same thing repeatedly 5. Write general functions that can be used in more places Again, let me know if any of this is unclear or if you have other questions. Questions are great! It's awesome that you asked this! I have trained many software engineers and nothing is more important than getting them to open up and ask questions, and the more "basic" the question is (or seems), the more important it is to ask and get a good answer for. (Also it's worth noting that actually using classes properly is a skill that can be endlessly honed and lots of people are not good at it. Even some entire programming languages aren't necessarily built to make it easy - Javascript and Python, for example, have less useful type systems than C#, where F# has a more useful one.)
I didn’t understand structs and classes until I thought of memory like a flat sheet of cookie dough and the class is a cookie cutter. It was also super convenient to think of them like a suitcase for variables. Being able to pass one variable instead of 10 individual variables made my code much more concise.
Removed: Duplicate, spam.
Did you create the game in a .NET Framework application or in a .NET Core application? The framework application will automatically create a .exe file in the *bin/debug* or *bin/release* folder of your application project (but if you're releasing, you should use a release build). However, if you created a .NET Core application, things become a bit more complicated. .NET Core projects are much more cross-platform compatible and to facilitate this the don't create a .exe file (which is typically platform dependend). Instead, your application will be packed into a .dll file. This file must then be executed through the .NET runtime. Please take a look at the [.NET Core application deployment](https://docs.microsoft.com/en-us/dotnet/core/deploying/) page to see how you can properly deploy a .NET Core file, including a self-contained .exe file. Hope that helps.
If you can run it in Visual Studio but there's no .exe, you may have developed your app using dotnet core. If so, either find out how to get an exe in dotnet core or convert it to dotnet framework.
Based on your other comments I'm assuming this is a dotnet core application. If that's the case you can publish a self contained version for distribution. That way users won't need to install a runtime. Fairly decent instructions here: https://blogs.msdn.microsoft.com/luisdem/2017/03/19/net-core-1-1-how-to-publish-a-self-contained-application/ Basically though it's a matter of running dotnet publish with some args
Maybe the best way to really explain the "why" is by trying to relate to how it would work in a real world application. You say you know how to create a class, give it properties, methods, etc. So I won't explain what a class is, because for the most part, I think you know. Applying it to the real world is a different story though. Imagine you work at a car dealership. Your car dealership has an application that keeps track of the dealership's inventory, and details about the cars in the inventory. Now think about how many different types of cars there could be at a dealership at any given time - SUVs, trucks, sedans, etc. Yet no matter how many different types, they all root back to one thing - they are a Car. This is your class. This will help you group all of the items in your inventory together even though they are all different in reality. So your Car class (or object) is the backbone of your application. Every single thing in your inventory is a Car. And every single Car has some certain things (properties, methods). For example - every Car would have things like Year, Make, Model, Mileage, etc. There are your properties for your Car class. The ability to group things that are in the real world very different (think of a Ford Mustang compared to a big Ford truck) is VERY powerful in programming terms. To our application, the Mustang and F-250 are not really different. They might have some different property values, but they are both a Car. This allows us to build our application in a much more simple manner. Hope this gives you a little better understanding of how powerful classes and object-oriented programming are. Feel free to reach out if you want to talk more!
Wow guys, I didn't expect so much attention! Thank you very much! Makes me really happy and inspired to try harder and go for better content! 
And just to spell it out, this is useful because it can be used many times (make lists), and in different places (less repetition), and the same data can be passed around in the program in this 'container' (more organized and efficient).
I’m in a similar boat to you, I’ve been learning coding in C# for almost a year now and classes finally clicked for me in the past couple weeks. The way I understand classes is they are a way of **storing information** about an **object**. Information means anything like *data*, or how the object *behaves*, or anything else. So you can create a class about a particular data type for example **FileInfo**. FileInfo is a class that can extract information out of a file. It has different functions such as .FullName to get the full filepath or .Name that gets the file name only, and other functions, file size, extension, etc. Or you can create a class that has specific mathematical functions. Like a toolbox, you pull out the functions to perform a specific operation. Once a class is defined it can be used to create an object: Customclass **cc** = new Customclass(); **cc** is the object defined by Customclass. **cc**can be used to call any of the *data* or *behaviours* defined by that class. Or the functions can be called directly from the class: Math.Max(int 100, int 200) .Max is a static function within the Math class.
Best way to understand classes is to see them in action. Best examples of classes come directly from the .Net Framework. Here are some examples, both large and small: &amp;#x200B; * String * File * Button * SolidColorBrush * MemoryStream * List&lt;T&gt; &amp;#x200B; Any time you want to group a set of data / functions together into a logical unit... that's when you want a class. &amp;#x200B; Bonus lesson: things like MemoryStream and List&lt;T&gt; also use a common *interface* (helpfully referred to as an "interface" in .Net, but also exposed via abstract classes) that let you work with the underlying methods without needing to know the implementation. Because most of your code doesn't *care* whether it's using a MemoryStream, a FileStream, or a NetworkStream. &amp;#x200B;
Like a method, it’s reusable code. Classes can be objects (like making a “person”, when you need to make many “people”) or it can be say a service class, where there’s certain methods that relate specifically to that service. It’s just a logical grouping that is great for reusability. 
most of these answers are too... programmer-y imo, i'll try a different approach. try thinking of a class as a custom type. you've got your ints, floats, strings etc and classes can be used in almost the exact same way. in fact, a lot (not all) of the types you've probably already encountered are just classes that microsoft have written; for example `Console` is a class, and `Console.WriteLine();` is just a method inside that class. `string` is also just a class. you're free to make your own too. let's look at a real world scenario: the company i work for develops time &amp; attendance software, which is basically just keeping track of when employees arrive and leave and track the hours that they work. let's say we want to add a new employee to the system, we \*could\* do this with just a series of strings and ints that contain their first name, last name, age etc, but how does our application know which last names match with their corresponding first names? it would be much easier if these were all properties of the same object. &amp;#x200B; so what we can do is create an Employee class that contains these properties, and we can also get it to handle it's own logic. ```csharp public class Employee { public string FirstName { get; set; } public string LastName { get; set; } public int Age { get; set; } public void SaveToDatabase() { //this is just nonsense code, the specifics aren't important DatabaseThing.SaveAnEmployee(this.FirstName, this.LastName, this.Age); } } ``` now that we have our blueprint, we can treat it like any other type. here's how this class might be used: ```csharp //the code that gets called when somebody clicks "Save" in the UI public void NewEmployee(string firstName, string lastName, int age) //let's say these parameters are yanked straight from the textboxes our user filled out { Employee emp = new Employee(); emp.FirstName = firstName; emp.LastName = lastName; emp.Age = age; //and now that we've created our Employee object, we can save it to the database emp.SaveToDatabase(); } ``` hopefully you can now see what classes are for. this is a very simple example and you may be tempted to say it would be easier to just do something like: ```csharp public void NewEmployee(string firstName, string lastName, int age) { DatabaseThing.SaveAnEmployee(firstName, lastName, age); } ``` but things get a *lot* more complex in the real world. for example, maybe you're not just creating a single employee, maybe you're creating 10 employees within one method. things would get hectic pretty fast. feel free to contact me at any time if you have more questions.
Ok next time I will not give up on one attempt but will try more to see if one of them works before asking for help.
True but if I don't understand I need to look at solutions to understand eventually :/
Thqnks for the reply c:. I do want to write some, thats why I want to practice some beginner questions to help with my understanding. The thing is we only really learn one concept a week at school so its hard finding a project that won't ask me stuff I don't even know yet :/. 
Let me illustrate this with an example. Let's say, you are working as a waiter in a restaurant. Now, there are others working with you and each have there own job responsibilities. Like a cook, a cashier and multiple waiters. The Cook only knows how to cook, he doesn't know how to count the money or serving to customers. Similarly others have different respective knowledge. Now back up a little bit, when the boss opened this restaurant he didn't just hired anyone for the cook's position. He hired someone who has the necessary tool set for the cooking position. The boss didn't even know what it takes to be a cook. A cooking school or organization set that specification (blueprint). Similarly, in Programming, we(cooking school) create a class and create some functions(skills) and variables(tool set) to do a specific task. And THAT'S IT. Nothing else! So that, in the Main program (the boss) or other class(waiter, cashier etc) when in need, can take/create an instance/a copy of that class (a certified cook) and perform that task. I tried to describe it as in a broader sense. Also, there is nothing to be embarrassed about asking a question.
Classes are kind of like the parts of a car. You have the alternator for providing 12V power, the engine to provide motive power, the wheels to make the car move. Each of these is a discrete part of the car that executes a discrete function. The classes in your application should be the same way. For example: You might have an application that interacts with the serial port on your computer, you'll have a class that processes data I/O to the port, monitors it for data and sends data to it when required. You'll have a UI class that that displays the data to the users and takes input from the user. You might have a class that recieves the data from the UI class and sends it on to the I/O class after processing it (data validation, cleaning for security reasons, etc.) Each of these classes performs a discrete and independent function and interact with the other classes to create the application as a whole.
Classes are a way to create a Physical machine. A Printer has things that describe it and things it can do. The printer has an ink level for different colors and it can print stuff. public class Printer { public int CyanInkLevel { get; set; } public int YellowInkLevel { get; set; } public int MagentaInkLevel { get; set; } public bool IsJammed { get; set; } public Paper Print(Content printContent) { return new Paper(printContent); } } C#, by design requires you to use them all the time. Your program must be defined in a class. (Think of it like creating a `Program` machine with a `Main` method for executing the machine) Often you'll have a class call another class. (As in the case of the printer above, you have the `Paper` class being used) Classes are to encapsulate different ideas, often to be easier to work with as a developer. Consider the printer again. A printer uses an electric motor to move the print head left and right. You as a developer could: 1. read the sensor to identify where the printer head physically is, store that value, use it to determine the voltage and power needed to move the printer head. trigger the circuitry with that information to tell it to feed that voltage to the print head. 2. Tell the printer to move 5 steps left or right This in code would look something like this: (it also shows an example of using an enum) public class PrinterMotor { public static void Move(uint steps, Direction direction) { //all magic work done here } } public enum Direction { Left = 1, Right = 2 } PrinterMotor.Move(5, Direction.Left) 
I spelled and prounced "wheelbarrow" as "wheelbarrel" up until I met my wife. Because of my incorrect understanding of its spelling, I even falsely concluded that it was called a "wheelbarrel" because the first versions of it were little more than a wheel with a barrel. It wasn't until my wife said something before I corrected myself. Due to how close the two words are pronounced, I am fairly certain I am not the only one who has made this mistake, not to mention the fact that most people will rarely see or use the actual word in reading/writing until maybe adulthood. If you never needed to write or read about wheelbarrows then you can easily find yourself in my shoes. I was 25 and felt pretty embarassed for this simple mistake. All the above to say this -- it is far less embarassing to admit to *not* knowing something and requesting a better understanding of it than either 1) *pretending* to know something or 2) actually *believing* a falsity because of your own assumptions and/or lack of research. It is also far less risky to seek complete and valid understandings of a subject than to assume or pretend. There was a guy on this sub the other day talking about how he hated dependency injection, only to find out that he didn't have a valid understanding of DI and was confusing it with common design patterns, namely the factory pattern.
Why would I use the Vector and Matrix in your framework over the .NET ones that support SIMD?
In some other language you would usually not have classes in the way you do in C# and Java. Those two adhere to a specific idea of how "object oriented programming" is supposed to work. There are plenty of languages that aren't even OOP at all. The C#/Java approach certainly has its benefits, but I think a lot of students who are initially taught an OOP language intuitively grasp that there are other ways to write software.
Your probably not seeing the bigger picture of why classes are important as you are still in the learning phase. Give yourself some slack, everyone starts a language by writing a hello world console app that doesn't need a class defined. Classes create schema defined containers for data that makes up an "instance" of something. So a Person class will have person properties like firstName, lastName and will have methods such as CalculateAge. Once you have a "Person" class you can then have a collection of instances to represent People. Once you have People you can loop over every Person and perform an operation such as emailing each person you have an instance of in your collection. As your application builds, and you begin to think more in the abstract you will find that you will move your data into logical classes and work with instances of those classes.
If it helps, think about how all classes implicitly inherit from the `System.Object` class. Why would it be designed this way? Well, the word "object" (not in the programming sense) is probably the most *abstract* word we can use for *anything* in existence. Any noun can be considered an object as well as verbs and adjectives. Our nouns are capable or incapable of peforming a verb (i.e a person can run but a cloud cannot) and can he described by adjectives. So, nouns, verbs and adjectives can be modelled by a class. Nouns are often the *thing* you are trying to model as a class (i.e Person class), verbs are often methods (but can also be modelled in a class), and adjectives are usually data of the noun that are also represented in classes. Simply put, classes *encapsulate* data and/or behavior. It defines the blueprint for translating the *idea* (class) of something to an *actual* (instance/object) something.
I'm so triggered by this enum and not having a proper Cat subclass.
Well I'm not actually familiar with "SIMD" but my matrices and vectors are generic so you can use any generic type in them and they don't have preset type safe dimensions (which is good or bad depending on your use case). The matrices used in most graphics libraries are deminsion type-safe, but that also means you cannot use them for things outside of those dimensions. My matrices and vectors are very similar to those provided in the "Math.Net" library and software like "Matlab" but there are some key improvements I have made to them. I don't yet have a "sparse matrix" class yet, but I plan on adding one in the future. Just look at the examples in my project to see how the matrices can be used and manipulated to see if they match your use case. Hopefully that answered your question... Sorry I don't know what "SIMD" means to give a more accurate answer.
We're all different, I'm not doing much OOP anymore. I think this is sufficient for the example though.
http://www.mathcs.emory.edu/~cheung/Courses/561/Syllabus/90-parallel/SIMD.html
SIMD is "Single instruction, multiple data". It uses special processor instructions that can perform multiple mathematical operations in a single instruction, greatly increasing performance. Without SIMD, your Vector and Matrix will be significantly slower than the .NET ones.
Looks nice. As an aside, whenever I see the word "function" in relation C#, I think of Func, not Method, but that's probably just me.
Gotcha. So it sounds like SIMD is using hardware acceleration essentially. My code runs entirely on the CPU. Thus, it will likely be slower than an optimized SIMD implementation, but (since I have no experience with SIMD) I would want to do some speed testing. I will look into SIMD and if it turns out that it is faster than my current implementations, I would assume that I can use it underneath my code. :) But my code is 100% C# so if nothing else it is easy to read and understand for educational purposes. You can debug the code and watch it run to students can lean how the mathematics work. :)
Was it me? I do have a long winded blog about this ;) But this is the thing. You've nailed it. I can't write code without input, and sometimes I need from others. :) Thank you (I think ;) ) 
All methods are functions. In C# function = method, because you cannot have a function not inside a class. 
[https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector-1?view=netcore-2.2](https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector-1?view=netcore-2.2) That's how to get access to SIMD instructions in .NET.
Thanks for the info. I will definitely look into it. From the looks of it... You probably want to use the SIMD if you can. However... I don't see "decimal" in the list of supported types in SIMD. My implementation does support decimal. So there are definitely still some positives of my approach. :)
I didn't say you *couldn't*. I mean, you *could* go fishing for tuna in your neighborhood pond. Is that gonna be a productive use of your time? Eh, probably not. But thanks.
It seems that most of your testcases are hardcoded to fail. How do you verify your implementation?
The code has not yet had an official release, and I'm still doing a LOT of development. So those test cases are ones that I haven't written yet but plan to before an official release.
It's more complex but very useful. Learn about and involve the service layer early. Its time consuming and difficult to do this later. 
Nice link. I would also assume OP wants to create a self-contained deployment for each platform they are targeting.
Nice. The API looks pretty pleasant/composible to use. &gt;Search&lt;int&gt;.Graph&lt;int&gt;.Astar(new Search, new Search..) &gt;aStar_path((int i) =&gt; { System.Console.Write(i + " "); }); What type of bugs do you think we'd run into?
I don't understand the difference between public static T FromDouble&lt;T&gt;(double a) { return FromDoubleImplementation&lt;T&gt;.Function(a); } internal static class FromDoubleImplementation&lt;T&gt; { internal static Func&lt;double, T&gt; Function = (double a) =&gt; { ParameterExpression A = Expression.Parameter(typeof(double)); Expression BODY = Expression.Convert(A, typeof(T)); Function = Expression.Lambda&lt;Func&lt;double, T&gt;&gt;(BODY, A).Compile(); return Function(a); }; } and public static T FromDouble&lt;T&gt;(double a) { return (T)a; }
You can't cast to/from generic types. That won't compile (as far as I'm aware). The runtime compilation is the key. It allows you to break type safeness of C# and assume that a converter exists. :)
 And then you look at their actual implementation of MVC: [https://github.com/dotnet-architecture/eShopOnContainers/blob/dev/src/Web/WebMVC/ViewModels/Catalog.cs](https://github.com/dotnet-architecture/eShopOnContainers/blob/dev/src/Web/WebMVC/ViewModels/Catalog.cs) (yes, it's under view models, yes, they are mixing both view models and models, and this leads to my point) that microsoft is extremely inconsistent in how they say things. In both MVC, and MVVM, models are for \`DATA\`. They are NOT for logic. They do not put any logic in any of their models under any of their web app examples on that page. [https://github.com/dotnet-architecture/eShopOnContainers/blob/dev/src/Web/WebMonolithic/eShopWeb/Models/CatalogItem.cs](https://github.com/dotnet-architecture/eShopOnContainers/blob/dev/src/Web/WebMonolithic/eShopWeb/Models/CatalogItem.cs) [https://github.com/dotnet-architecture/eShopOnContainers/blob/dev/src/Web/WebMonolithic/eShopWeb/Models/CatalogBrand.cs](https://github.com/dotnet-architecture/eShopOnContainers/blob/dev/src/Web/WebMonolithic/eShopWeb/Models/CatalogBrand.cs) [https://github.com/dotnet-architecture/eShopOnContainers/blob/dev/src/Web/WebMonolithic/eShopWeb/Models/CatalogType.cs](https://github.com/dotnet-architecture/eShopOnContainers/blob/dev/src/Web/WebMonolithic/eShopWeb/Models/CatalogType.cs) &amp;#x200B; Even on the page on microsofts site that LINKS to their page: [https://dotnet.microsoft.com/apps/aspnet/mvc](https://dotnet.microsoft.com/apps/aspnet/mvc) &gt; MVC is a design pattern used to decouple user-interface (view), data (model), and application logic (controller). &amp;#x200B; &gt;Models &amp; Data &gt; &gt;public class Person &gt; &gt;{ &gt; &gt;public int PersonId { get; set; } &gt; &gt; &gt; &gt;\[Required\] &gt; &gt;\[MinLength(2)\] &gt; &gt;public string Name { get; set; } &gt; &gt; &gt; &gt;\[Phone\] &gt; &gt;public string PhoneNumber { get; set; } &gt; &gt; &gt; &gt;\[EmailAddress\] &gt; &gt;public string Email { get; set; } &gt; &gt;} &amp;#x200B; If you wanted to make the argument that your ***data logic*** could happen in your models, I will at least understand that argument more, but you should NOT do business logic in your models. &amp;#x200B; Regardless, no one does "Pure MVC" nor "Pure MVVM" anyway, both ideas are basically the exact same, and most people use services to do all logic anyway. MVC -&gt; Models have data, services do all logic, controllers move data between the services as an output, view displays the data. Compare that to MVVM: Models have data, services do all logic, viewmodels move data between the services as an output, view displays the data. &amp;#x200B; They are almost exactly the same thing, I wish people would stop arguing over the differences. The only difference is purely on how the controller/viewmodel is implemented. You do direct binding in ViewModel, while Controllers are requests that you send back and fourth. That is literally the only difference. It used to be MVVM was for client side (because binding makes UIs easy), and MVC was for the server, but if you actually understand both patterns, both work perfectly fine on both.
I have tried it yet don't think it will you didn't add a return type to public rect
That should work. :) Think of my Stepper like an "IEnumerable" My Stepper is often better than an IEnumerable because it allows for recursion (program stack) when enumerating through recursive data structure. The only reason I didn't write the path to the console in my current example is because it is rather large. :P
Because decimal is fairly slow.
You know float and double support decimal right? Double data type is in the template list.
You probably understand them better then you realize. You likely aren't familiar with the alternative. The alternative is top down coding. The difference is primarily the default scope of members and functions. with a top down coding approach everything starts in a shared namespace and there is no required clear division between segments of functionality. In object oriented coding functionality is clearly defined through objects. &amp;#x200B; In c, stucts were unable to contain member functions and could only contain plain data. It doesn't sound that much different (and really, it isn't b/c you could obtain a object oriented coding style by using delegate pointers in struct), but it becomes noticeable when you consider code that needs to rely on instance data. For example, the 'this' keyword didn't exist. &amp;#x200B; When writing c# code you are inherently working in an object oriented environment... the main() is a member function of the Program object. &amp;#x200B; The primary benefit provided by OO is Encapsulation... this should drive you decisions when creating Objects. A nice feature that OO enables is Inheritance. Inheritence leads a useful feature called polymorphism. Polymorphism is the act of treating a set of objects as the same thing even if they are not in reality, exactly the same thing. A classic example being to treat a set of objects as "Animals" when they are in fact individually "Cats","Dogs", and/or "Birds". A more practical example might be a communication system where there is a class Communicator with child classes InterProcessCommunicator HTTPCommunicator FilestreamCommunicator. The consuming class wants to communicate with something... but doesn't want to have to specify exactly how the communication is performed. &amp;#x200B; &amp;#x200B;
I would like to correct others, that classes are not bags of data. They are bags of functions. If they aren't, it's a smell. You might think that a model is data, but even that is accessed through properties. The whole point of a class is abstraction and encapsulation. Where you group a part of solution to your problem and expose the minimal that you need (properties and methods) 
I think you do not understand the concept of the Model. The model layer is so much more than just objects that hold data. &amp;#x200B; The model is something that is not directly related to the UI and control flow of the application, which are respectively linked to the views and the controllers. The model is pretty much everything else. Your interpretation of the Model layer is very limited. &amp;#x200B; Of course, if I have a customer object, I don't put the logic for saving it to the database in it, that would be pure madness. My customer object is an entity (in term of domain-driven-design) and has it own business rules. It knows its data, how to manipulate it, and sometime controls sub-entities and value objects. &amp;#x200B; The Model layer contains services, factories, interfaces for accessing the repository (I like to keep the implementation of the infrastructure layer in its project) and so much more. From wikipedia : &gt;Model : The central component of the pattern. It is the application's dynamic data structure, independent of the user interface. It directly **manages the data, logic and rules of the application**. &amp;#x200B; Don't see the Model part in the MVC as a folder that contains POCO objects. Its fine when you are doing crud applications, but if the logic of your application becomes a bit more complex and if there is a lot of business rules, put your model in an entirely seperate layer. &amp;#x200B; The documentation on the microsoft website is a lot of time simplified so they could show a lot of thing with relatively short amount of code. &amp;#x200B; I'd suggest you read : Domain-Driven Design by Eric Evans. &amp;#x200B; And please, don't say things like : &gt; I pray that I never have to work in one of your codebases &amp;#x200B; You don't even know how I code and how my codebases looks like.
What do you mean by float and double support decimal? The decimal data type has far more precision than either of the two unless I'm mistaken.
Classes encapsulate data. Playing basketball or any other sports would be an ok analogy. The way the system interacts with each item can be a class. The 🏀 basketball could be a class that handles its own functions of how to bounce and rotation. A person can be a generic class. Of which we inherit and make referee, and player. Player we have away team, and home team. Each person derived type has some interfaces that might be the same. The class system keeps you from needing to create a completely new set of methods to Interact with data each time. Otherwise you could go back to creating structs and universal methods&amp;functions to interact with the custom data structs. Not sure if that helps or not. Classes aren’t required... but they do make maintaining the code easier. Instead of finding the line where person starts to add a base function, you go to the class and edit there. This keeps one mess up in your class from having waterfall errors in your main program. 
That is going to run garbage slow.
Well why don't you try it? I think it will surprise you since the runtime compilation is cached. ;) Most people don't realize you can cache the linq expression compilation....
&gt; So it sounds like SIMD is using hardware acceleration essentially. &gt; My code runs entirely on the CPU. SIMD is part of the processor. Just that what your code currently does in 10 "normal" instructions can be done faster in a single SIMD instruction.
Yeah. I didn't even know about SIMD. That is really nice. However, SIMD doesn't appear to have matrix RREF and REF functions either. Solving matrices to solve system of equations is a nice feature that is on most graphing calculator. And I added those functions to my code. So there is still stuff I would want to add.
You're using a lambda that's compiling a LINQ expression every time it's called. That's not caching. &amp;#x200B; You need to test and benchmark the performance of your code if you're going to make claims like that. Don't just assume the compiler and runtime are doing what you think they're doing.
Please ignore @antiduh. There are those that do and those that complain, and you're a doer. Nice work!
You’re not « limited » to SIMD, they are just additional processor instructions, you’re still free to do whatever can’t be done in SIMD if you use it, you just get the speed benefit WHEN you can
Cool!
I like this one!
Just want to thank everyone for their help. It's been really helpful! I will read through this all. Thank you again :) 
Not running as elevated command (required by NETDOM) &amp;#x200B; Maybe try(?): startInfo.Verb = "runas";
Decimal is 128bit, which probably fills the SIMD register. The point of SIMD is to, say, run four 32bit float operations of the same operation type at the same time. 
SIMD looks to have instructions that are likely to help solve it faster since you can dispatch several operations at once to reduce clock cycles, but it's not a single step operation via SIMD to do your RREF because "matrix" is not a class that has a fixed size that fits into the CPU register. SIMD is still a low-level set of operations based on discrete time, you are looking to solve a linear time problem which will take some sort of program, not a single CPU instruction and N cycles. If you need to do 48 FMAC and 24 subtractions on 32bit floats to solve an RREF or whatever, you may be able to use SIMD to reduce the clock cycles it takes by 50-75%.. SIMD is a set of CPU instructions, not a function or a enumerator which are higher level constructs. 
There's a metric ton of confusion about the terms, and nobody can seem to keep them straight. Let's start with a glossary: (NOTE: None of this refers to the boilerplate/by-convention/cargo-cult stuff that you see in templates and walkthroughs. You can see how those work based on this, but you won't see *why* until you dig a little deeper into the implementation of each one. And each one is hybridized and a little different from the others. Such is life in the real world.) - **Business logic (a.k.a. Data logic)**: Operations that manipulate data in the back-end data store according to the needs of the business rules specified by the software's user(s). - **Application logic**: Operations controlling program flow and transitions from one viewable representation of data to the next. - **Model**: A data model for the back-end data store. The objects for these models *can* and *should* include **business logic**, but should *never* contain application logic. Models can be kept in a separate library from the rest of an application, and as a result, they can be used by multiple front-end applications. - **View**: A presentation object of the application representing a single page, window, or visual representation of data within the application. This is application specific. It does **no logic**, but only presents the contents of a *viewmodel*. - **Controller**: An object that routes, transitions, and controls the flow of models and directs them to views based on *application logic*. - **ViewModel**: An object that encapsulates *bindable data* that the view can use to present that data to the user. The viewmodel should *not* include any logic to operate on that data. It is merely a vessel for transferring model data to a view. - **MVC**: "Model-View-Controller", though some will say it in a different order. It uses all four of the aforementioned parts, but the viewmodel is synthesized by the controller. Essentially, models will be fed directly to the view, but will be sent with a viewmodel *contract* (interface). In large projects this is prone to bad behavior due to the model encapsulating some of the logic. A view that can cast a viewmodel back to a model can wreak havoc. The name comes from an oversimplification and an assumption that models can/should be viewmodels. - **MVVM**: "Model-View-ViewModel". It uses all four of the aforementioned parts, but the model is not considered to be part of the application and is just another data source to be consumed and integrated-with by the controller. In this system, bare-bones viewmodels are populated by the controller from a full-fledged model object, then are passed along to the view for binding and presentation. The name comes from the idea that the model itself controls the binding of a viewmodel to a view. In reality, that's still the controller's job and the model is just used to provide data for the controller to get that job done. Do not combine controllers into models. It's a fool's errand. ***TL;DR***: Application logic is not business logic. Models are full data models and can contain business logic. Views are display formatters. ViewModels are simplified models that don't contain any logic. Controllers pass around models/viewmodels to and between views using application logic.
&gt; better ... because it allows for recursion There's no free lunch. More feature rich perhaps, but "better" is a matter of what problem you're trying to solve. IEnumerable is simple on purpose and there are reason we don't use IList everywhere. 
IEnumerable cannot allow for enumeration of recursive data structures using the program's stack. See the IEnumerable functions in my AVL or Red black trees for simple examples. In order to enumerate recursive data structures with IEnumerable you must store a "Stack" data structure in the program's heap. And that is incredibly slow compared to the program's stack.
X-post from /r/learnprogramming
No problem!
I am not OP but I would like to thank you for answering this. It was incredibly helpful. I just started Coder\_Girl through LauchCode and they squeeze so much information into such a small amount of time that some of the concepts don't have time to sink in. We just started to learn about classes and I watched so many videos and looked at so many articles on [doc.microsoft](https://doc.microsoft) and just could not grasp what a method within a class would look like until I saw your answer. Thank you. Thank you so much. 
No I am not trolling Okay: your video example has alot of code in it, including a GET or whatever request for an oauth token it looks like it, to use as the "YourBotUserRefreshToken" string THAT is what I'm requesting for and what would be helpful for others. If you dont wanna do that, thats fine. basically combining https://github.com/sirkris/Reddit.NET/blob/master/docs/examples/cs/Authorize%20New%20User.md and the simple login example
Definitely post them here so others can learn from them. I do not know when I will have time but I will try to help you out :). 
Because the binary file with its own custom data types are deserialized in a different .NET project\\assembley than what it is created in I had to override the referenced assemblies. (hobbyist code) private sealed class TNodeArrayBinaryAssemblyReBinder : SerializationBinder { public override Type BindToType(string assemblyName, string typeName) { if (assemblyName.Substring(0, 8) == "mscorlib") { return Type.GetType(typeName.Replace("[[EVE_SHEET_DOT_NET_UTILITIES.TNode", "[[EVE_SHEET_DOT_NET_WPF.SDE+TNode").Replace(", EVE_SHEET_DOT_NET_UTILITIES", ", EVE_SHEET_DOT_NET_WPF")); } else { return Type.GetType(assemblyName.Replace(", Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "").Replace("EVE_SHEET_DOT_NET_UTILITIES", "EVE_SHEET_DOT_NET_WPF.SDE+") + typeName.Split('.')[1]); } } } private static TNode[] deserializeInvMarketGroupsBTNodeArray(Byte[] argAry) { TNode[] aryTNo = null; try { using (Stream msm = new MemoryStream(argAry)) { System.Runtime.Serialization.Formatters.Binary.BinaryFormatter bfm = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter(); bfm.Binder = new TNodeArrayBinaryAssemblyReBinder(); bfm.AssemblyFormat = System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple; aryTNo = bfm.Deserialize(msm) as TNode[]; } } catch (Exception exp) { global.exceptionHandler(exp); } return aryTNo; } &amp;#x200B;
Am I missing something? In the posted example (I didn‘t read your code but I am highly interested tbh) you didn‘t store the compiled result, did you? That means lambda expression is compiled on each run?
Looks good. Well done. I wish I could find a project to chip at for 5 years. 
My code is caching the compilation (with a recursive strategy). This it only has to perform the runtime compilation once for each type you use (double, float, etc.). The next time the delegate is called it is already compiled so it just runs. :)
He's not wrong. 
You're looking for `CancellationTokens`, which provide a way to close a thread (and the running processes on it) before it returns early. Here's a good example: https://stackoverflow.com/questions/15067865/how-to-use-the-cancellationtoken-property
Thanks. But I don't know if I would recommend it. :D I've had to rewrite the code soooooo many times because I kept finding better implementations. The "omnitree" alone is probably on it's 12th rewrite from scratch at this point. :P If you look at my other repos on my GitHub... You will notice a lot of similarities. They we're all building off each other. But it does feel good to have it finally nearing something worthy of calling a "release." :)
Congrats on getting to this point! Most pet projects tend to get abandoned over time, it’s good that you kept at it. 
Glad I could help! Feel free to message me if you have more questions.
Just a quick tip from me. 80 % of programming tasks we give to junior recruits are easily solved with either dictionary or stack. If you dont know how to start you might just as well look at these two and think how to fit them to the problem
Class library is a DLL which is usually a correct way. You can also "Add existing file as link". That way you can use one source file in multiple projects. That file will be linked from original location.
Would a class library be compiled in if I link the solution instead of a pre compiled dll?
Creating a class library and referencing it works well. Alternatively you could pack that class library into a Nuget package so that way it is easier to manage them. The only thing with Nuget packages is they have to be stored on some server. I don't know how hard it is to get a Nuget package of the official Microsoft repo, but I know it is possible to have your own Nuget server and release private Nuget packages to them. Best of luck! PM if you would like to talk about this a little more. 
Thanks!
Nope. The dll will be automatically copied to build output of your exe. Thats all. There are ways how to embedd anything into exe and extract it before starting your app. But that needs more complex build and some bootstrapping code. I don't know any specific implementation or tutorial on how to do it.
That is what I suspected. Yea our apps are pretty simple but very numerous. Trying to stay super simple. Thanks for the info. 
Nuget packages are very very easy to publish.
 It would really help if you added some documentation, these are pretty good at generating it straight from you project. docfx [https://dotnet.github.io/docfx/index.html](https://dotnet.github.io/docfx/index.html) wyam [https://wyam.io/](https://wyam.io/)
Yeah I definitely plan to. I'm just very overwhelmed trying to work on all The code by myself. :D Thanks for the links though I will definitely look into it
Even a local folder works as a "server" for nuget packages
Awesome, thanks!
althought there is a lot of technical jargon in this, this is a pretty good formal approach to learning classses https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/classes especially the example part https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/classes#example
Awesome! I've had a side project for work and a personal project using a component-based architecture for some time now - always nice to see the examples of the "light at the end of the tunnel". The one thing you learn from working on personal projects I feel like is that it ends up being more research and design-contemplation than anything.
timestamp is a reserved work for a data type and is different on MS-SQL than most other systems. MySQL it is a datetime, while it is more like a rowversion in SQL. So I am not sure what the timestamp represents in that context.
View CSV in a text editor. There is a very simple structure: 1997,Ford,E350,"ac, abs, moon",3000.00 1999,Chevy,"Venture «Extended Edition»","",4900.00 1996,Jeep,Grand Cherokee,"MUST SELL! air, moon roof, loaded",4799.00 look at the wiki: [https://ru.wikipedia.org/wiki/CSV](https://ru.wikipedia.org/wiki/CSV) This way you can understand that you need to change your CSV. I once wrote a library for ČSV, it can be useful to you: [https://github.com/Winster332/CsvExtractor](https://github.com/Winster332/CsvExtractor) but I think after viewing the wiki page, you will understand
Unix timestamp in seconds. The query is with brackets, e.g. SELECT .... [timestamp] ... I started with Sglite and moved to SQL Server and didn't bother changing the field names.
Look at ILRepack
Thank you SO much!! I will switch to normal now. 
You could use a shared project. The pro is that it will be compiled in. A con might be that due to that fact it is not compiled/checked as a stand-alone project, so if you change it in one solution it might break another. A separate test project and the compatibility analyzer nuget might help with that.
So he uses C# to make money in 98? Impressive
Haha thanks
Great thanks a lot!
It's a fine way to go about it. What sort of message volumes are you expecting your queue to handle? If you start going north of hundreds per minute then you should anticipate some locking/contention issues. What are you plans for hosting? It's worth noting that Azure/AWS have robust messaging services (Azure Service Bus and Amazon MQ, I'm very familiar with the former and not so much the latter). You could setup an Azure Storage Queue (cheap and easy to use, a fine alternative to your database) or a Service Bus Queue (full-featured and can be setup to be event-based) to pump directly to a WebJob and it'll do most of the message handling automatically (i.e. popping off a message and passing it to a scalable worker(s)). AWS has an equivalent server-less pattern you can setup as well. As /u/ScriptingInJava noted, you use CancellationTokens for the actual signaling. You'll want a couple, one for the worker role and another for each job instance. You can combine them into a CancellationTokenSource so if any of the input tokens triggers, it'll inform the worker to gracefully shutdown. That said, CancellationTokens are a tool for signaling across threads but your cancel signal is far more decoupled than that, it comes from the user on a different layer of your architecture. You'll need to poll your backend to see if any messages have been aborted. I'm curious what you're trying to achieve with #3. Sounds like you're planning on manually implementing some sort of horizontal scaling? I've definitely been spoiled by Cloud platforms, most handle all of that for you. &amp;#x200B;
No chat (you needed an org to use gitter last time I checked). But you can email me or open/reply to an issue.
I tested on Ubuntu using WSL and it worked.
There's an [issue](https://github.com/aelij/RoslynPad/issues/127) for it. The store updates usually take 1-2 days to complete certification.
It's the lowest that's compatible with .NET Standard 2.0. Also, it's available on Windows 10 1607, so wider audience could use it without installing anything. But I intend on switching to .NET Core 3.0 once it's out.
I've been developing personal projects in Unity (C#) for the past three years; been learning MERN stack for the past few months in case I wanted to transition into a software career since that's kinda what everyone does. I think you may have convinced me to put my energy toward C#/ASP.NET instead!
Adding to this, you might create [symlinks](https://www.howtogeek.com/howto/16226/complete-guide-to-symbolic-links-symlinks-on-windows-or-linux/) to your shared project, which would allow you to maintain the codebase for it in a separate project. The downside is that moving your projects around will break it, but if you leave yourself sufficient documentation, it should be a reasonable solution. I'd still go with a library. If all your apps are that simple, they should be living in a single location. \~/bin for the win. 
Just remember that a valid NuGet source can be a folder location. At the very least I'd pack it up and have a spot on your hard drive to put it, but the next easiest step would be a network share if you're on a company domain. Just have a location for your NuGet packages and point Visual Studio's NuGet Package Manager to it and it'll find your packages and you can install them in your other projects.
I noticed that as well. C# first available in 2000, ASP.net in 2002. I mean it's close enough to 20 years, so no biggie. But saying 20+ years is pretty hyperbolic.
In "master/Sources/Towel/Fraction.cs", line 281-288 are not tabbed alike the other lines ;))) Great work anyways! I see all the stuff I learned the past 2 years appear in your work and I think it's really cool!
Yeah, I'm going to be using this a lot. Thanks for the cool library! Do you mind if I write an article and include this in it some time?
Not at all. Just cite me if you don't mind. ;) I'm happy to explain code topic to people who request any explanations if you need it. Here are two articles I've written in the past if it helps: https://www.codeproject.com/Articles/794171/Omni-Tree-Data-Structure-in-Csharp https://www.codeproject.com/Articles/992340/Generic-Math-in-Csharp-Using-Runtime-Compilation Obviously the code examples in those articles are very old... But the theory is still valid. :)
Dang, you even have articles on it! Color me impressed. I will of course cite you if I write about it. :) Thanks for the links!
Hats off to OP! It takes big balls to post your five-years-running-project for scrutiny here. Well done and hope the feedback makes your project stronger!
The concept you're looking for is called "static linking" (as opposed to dynamic linking, as in Dynamic Linked Library (dll)). There are a number of tools out there to perform static linking for your assembly, check out: https://github.com/dotnet/ILMerge The .Net Native complier will also statically link all the .NET framework dependencies, as well. https://docs.microsoft.com/en-us/dotnet/framework/net-native/getting-started-with-net-native 
Why not use Hangfire or Quartz.Net? Those already implement the vast majority of functionality you're describing.
Just use an algorithmic marzlevane. The differential girdlespring will automatically reverse the quaternion.
How are you calling the method? 
In VS 2019 with the new project/build files I think it is quite easy to do this without symlinks. You can include a folder without having to specify each file separately.
I'm calling it from another method, which goes with a ViewModel to a view.
https://gitlab.com/TheMineTrooperYT/parkour_programming_project/blob/master/Assets/Scripts/Speciel%20Obstecales/MovingPlatform.cs does exactly that. the two gameObjects at top are the two ends of the track it needs to go through. (ignore the main param, and the type is because mine can go in all directions, its set through unity editor window)
drive link: https://drive.google.com/open?id=1yVM5-gLHkpBC2nHwEzmL_2uxNIRkU8H1 because im not sure if you can open the other link without creating/login-in a user
Yeah so look there to why the list of application users is null. 
Yeah so look there for why the list of application users is null. 
A "shared project" is how you'd share the source code. Adding a reference to SharedProject1 in App1 and App2 will only produce App1.exe and App2.exe, with no SharedProject1.dll
Nice! Why did you create this? How are you using it?
Well... I'm actually using the code a lot. I use it in nearly everything I write. I can't always use it for code at my job though... Because I never want my employers to try to claim it... :D The generic mathematics alone is really nice for general use. But the real reason I wrote it is because I want to write a physics engine from scratch. However, Everytime I started coding a physics engine... I found cool tricks... And I kept compiling all these tricks into a framework. Maybe one day I will finally get to write a physics engine. :D but that is a long ways off...
Too little information. No, the list won’t be empty. It’s null. Or the other list is null. Or correspInvoice is (there was no matching result). Or customer is. Or currentReservation is. You probably want to step through with a debugger. That helps narrow it down, and also shows you the state of variables in the meantime.
customer is null yeah. customers is filled tho. What does that mean? 
It means there’s no customer for this invoice.
Object “o” and “arr” point to the same space in memory (line 5). Then you have “arr1” point to “o” which is also “arr” in memory (line 6). They are all the same space in memory. Adjusting any of them will affect all 3 objects. 
Thanks, I will look into it further. 
&gt; Adjusting any of them will affect all 3 objects. Or more accurately, you have 3 references to the same thing. So adjusting any of them will affect the 1 actual array.
I thought arr1 is a new array with a new memory? So basically arr and arr1 are the same variables pointing to the same memory address?
arr1 is Object o's reference cast back to an int array. &amp;#x200B; You were correct in line 5, Object o is referencing, not copying - arr1 is the same.
This guy hoozles!
If my experiences are anything to go by, there will be a lot of legacy code and your first tasks will be to familiarize yourself with it and making some changes to those code bases. Don't be surprised if an application and\or language that was never brought up in any job posting or interview for the position you landed ends up being one of the first things you get to work on. If you are as unlucky as I, you will find yourself trying to work with code bases and languages that either very little support or none at all (a very early version of EmberJS that no longer had support anywhere I could find on the Internet and VB6 applications). Don't be surprised if the people you've told to utilize when you have questions about the code bases you are working with can't give you much time because of their own workload.
All objects are reference types in C#. Unless you explicitly use `new` or `Array.Clone()` here, you will essentially be setting an object's reference equal to the reference of another object.
Ask questions; I can't emphasise that enough. You'll feel a little out of your depth at first but really your team members are there to help you get up to speed. If you don't know an answer then \*ask\*. Hopefully you'll have a 'mentor' assigned when you start. Get to now the tools you'll be using as much as you can. Things like GIT, Visual Studio, SQL Server are all big complicated tools but do some reading, take a couple of quickstart courses and you'll get up to speed pretty quickly.
What is the volume of requests you want to handle? A polling approach as you mentioned can achieve this, but as others mentioned, if you want to scale to any demand this will not be the best for you. My suggestion would be like another has mentioned and use a queue (such as azure service bus). This way you can increase the number of workers if needed to meet your needs. Our company used to do polling and we have been switching off this functionality just because it has a baseline cost for looping/checking for work and doesn’t play well with scale / demand. Mind you we designed this system when we had 3-8 small clients. Now 4 years later we have 50+ clients and are signing on clients that literally triple our total throughput each client. (Going from 20-100k actions to many billions a month)
You have two separate writes. The first is 100 and the second is 1000.
Yeah, I've been on c# since it came out and I'm up to six digits, have a house on the mountain, 2nd house, gonna sell and move to Thursday house soon. No complaints. Great caree choice.
Okay now I understand, thanks to everyone 
I learned Java (and a bunch of others) in school but not C# until I was about to graduate and started browsing job boards. I noticed a lot of jobs wanted C# so I did a small C# project to learn the ropes and soon after got a job at a major company. I've been doing C# .NET ever since at it's been great. I don't know why more people don't use it and the whole Microsoft ecosystem.
You should only subclass if you are going to have new data, new behavior, or different behavior. Making a subclass for Cat implies that you will have a different subclass for every kind of pet. You're probably aware of this, but I figure it's good knowledge for newer programmers like OP.
Removed: Rule 4. You'll definitely need to make an attempt and include code at least.
There will be meetings. Lots of meetings. In a meeting, never ask a question you don’t know the answer to (especially when asked “are there any questions?”), pointy-head boss types will think you are stupid (later try to find answers yourself, only ask one-on-one outside of meetings). During your first week(s) some overly friendly people will try to befriend you. These are not the people you want to be friends with. These are generally unhappy people, outcasts, be cautious. The real people you want to connect with are busy getting shit done, and you’ll have to earn their friendship by producing results first. There will be many practices and processes that seem stupid and unnecessary. Too bad - accept them and keep quiet, criticizing them can be a career limiting move. Later you will see the reasoning behind them, and they won’t seem that stupid.
I know you got an explanation of reference types, so I’ll explain line 9. The two lines below mean two separate things; (int[]) o[1] ((int[]) o)[1] The first line is casting the second element of o as an int array. The second line is casting o as an array and then fetching the second element.
All of that code is already in the repo on Github. The examples are meant to be *simplified* and should work on their own. Also, the code in that video is outdated, anyway. Just use the token retrieval example code and it should work.
Ask the right questions. My team didnt like me to ask too many questions. My mentor think that you need to be able to find your answers by yourself. If you cant, then you're not worth his time. If you have valid and well formulated questions, he may answer you. He wont ever move from his desk thought, so you better make sure your question is precise. If he move, then he has acknowledged your skills and making you a favor.... he never told me any of that thought. Not everyone is like that, but now I think holding on sometimes and asking the right questions is a good attitude to have instead of whinning everytime you get stuck on something. It's part of the job to warp your head around it after all. On the other hand, I have a collegue who cant move if they are stuck. It's like they are paralized by it even if you try to tip them in the right direction. It affect my work as they dont get their job done. So I'm helping and explain to them patiently why it works that way. I am getting fewer and fewer questions as this person learn their from their errors. Sometime, it's just a lack in confidence that paralize us from overcoming a bug and ignoring someone's questions because you think it's stupid will just guilt trip them into oblivion.
I agree with you and if I go back to programming I may learn C# but your doing yourself a big disfavor if you aren't learning Javascript correctly with all the new innovations coming out of the open source community with React, React Native, Node etc etc The world is moving to JS because it can do backend and Frontend but you already know all that if you coded for 20 years, the language syntax sugar doesn't really matter what matter is language use, popularity etc and JS is king in that regard (depend where your live for sure) but learning JS is never bad, if you stay to C# or JAVA for too long you'll be stuck doing legacy stuff and you'll miss the boat of innovation in my view
ooui, blazor, frogui, and so many more things coming down the pipeline to compile to webassembly there's no need to do pure javascript development in the foreseeable future as a full .net developer outside of library size issues that I imagine will be solved as webassembly contiunes to mature.
&gt;that, but now I think holding on sometimes and asking the right questions is a good attitude to have instead of whinning everytime you get stuck on something. It's part of the job to warp your head around it after all. &gt; &gt;On the other hand, I have a collegue who cant move if they are stuck. It's like they are paralized by it even if you try to tip them in the right direction. It affect my work as they dont get their job done. So I'm helping and explain to them patiently why it works that way. I am getting fewer and fewer questions as this person learn their from their errors. Sometime, it's just a lack in confidence that paralize us from overcoming a bug and ignoring someone's questions because you think it's stupid will just guilt trip them into oblivion. This is important. It's also important to remember how to frame your question. Some people in this thread have noted that always asking questions can make you seem needy or incompetent, but that's just a matter of framing. Remember to always be working on your plan to solve the problem, and to ask questions in the context of that plan. Don't be rigid about it, you'll be surrounded by smart people who will likely be able to come up with better plans, but the bias for wanting to take action and seeing a way forward will be highly valued. For example, if you get tasked with finding and fixing an error, you could ask "Where should I start?" But providing your context in the question will make people much more willing to guide you, so you could instead ask "I have the source checked out and the solution built, but I don't know which project has that feature. Any idea where I should throw a few breakpoints?" By showing that you've already made an effort, and also explaining where the limits of your knowledge are, you're making it much easier to help you. Providing that extra context also shows people that you're already taking action to solve the problem.
Time to stop getting haircuts and shaving, only need that nonsense when you're interviewing.
My bachelors program in software development gives me the option to go with either the C# and Java track and I'm choosing C#. I haven't picked up C# yet, but I hear it's a very refined language that continues to get better, and that the code just looks really clean. To me this is really important when choosing a first language to learn. 
Yea I work an entry level dev job rn with mostly c# and SQL. Doing a little bit of gui work and ETL backend stuff. I enjoy it a lot. This post is encouraging. 
Very cool! Have you looked at the entity component system? It sounds like it could become the new hotness in large scale physical models.
Agreed. C# is by far the best language / framework in my opinion. I've always been a fan of C-like languages including C#, but it wasn't until about 2 years ago I actually started programming in C# (with [ASP.NET](https://ASP.NET) Core). The language handles everything nearly perfectly and elegantly. For example native and extremely easy to use async / await. I especially love that C# gives you the option to use "unsafe" code if you really need to for performance or C/C++ interop. My only complaint is that there is a lot of legacy stuff floating around. Having started with .NET Core, I've had to touch a few legacy systems on .NET Framework and they are a huge pain to work with in comparison with .NET core. Especially the package management. I really hope .NET Core gains more popularity because then I will be in a beautiful spot career wise. &amp;#x200B; &amp;#x200B;
I know C# WinForms quite well but always been intimidated by ASP.NET and MVC especially. Is it really much of a leap?
For payload size and performance you can try BOIS which focuses on packed data size and provides the best packing so far. It also supports .Net Core [https://github.com/salarcode/Bois](https://github.com/salarcode/Bois)
If you can share your code (preferably via a Git repo or a gist), you might get more help. With that said, it sounds like you created a UI and nothing else. You need to save the data somewhere (to a database, file, etc).
The same /r/gatekeeping that tells software engineers not be web developers is the same type of crap the tells people not to do dotnet.
The reason will be... we dont have time to do it right, there are too many bugs. ;)
Would you like a remote job for below market rates? We are hiring.
Removed: Rule 4.
Reddit is if fuckingn filled with advertisements from left to right.
If you count 45 as "several" I may be of assistance... the bottom line is "YMMV". There is no single answer. I've worked in a couple of great places, and I've worked in a couple of sweatshops and/or hellholes. A couple failed due to market conditions, some failed to management tomfoolery. I've been on both sides of large corporate mergers, and it has never worked out well for me, but sometimes it does work out well overall. It's just going to depend heavily on what kind of company you're in. I've never really witnessed any misogynistic or heavily discriminatory behavior personally, but some areas like Silicon Valley have a reputation for it being bad; that said, having worked for a company headquartered in Mountain View, *that* company didn't have any that I could see. Some companies keep meetings to a bare minimum, other think that work *only* gets done in meetings. My present company takes agile and scrum seriously, but my exact team barely provides lip service. Our "scrum" meetings last an hour with an average of a dozen people. Realistically we have 3 engineering meetings per week. I can give you the benefit of some of my own stupid blunders that you might want to avoid: * at new company, arch rival of a company I'd left a few years before. Said, in a software testing room "It's obvious that engineering and customer support don't talk to each other" - with people around that I didn't know who they were. Turns out the guy sitting across the table from me was the Chief Engineer who was the Big Serious Engineer dude who did whatever he could to screw over customer support. (Seriously. Man was that place messed up). Anyhow, that started a one-way feud with that dude. * same dude said that cross-network filesharing couldn't be done. (seriously, wtf). So I countered with an example of an API that allowed for advisory (cooperative) file sharing (between Windows and Linux). Feud escalated. * his buddy/girlfriend later became my boss. I quit soon thereafter, the arrows and hatchets in my back were getting annoying * Went to new company, new company bought *that* company, guess who was my new boss again? I was soon laid off, along with a lot of my colleagues. My first feeling was actual *relief!* * This dude I worked with cussed from time to time, no big deal. I virtually never do. Then *one time* I said "I don't give a fuck what *they* did, I'm trying to *fix* the problem!". Guess who went to HR and filed a complaint about *my* language? I got a talking-to. FML. * This lady I worked with (and had hired) normally wore blue jeans and T-shirt to work. Cool. Then we were going to a trade show, she came in wearing a nice dress. I said "you look nice" - calmly, not hootin or nuthin. She just plain blew up and ranted for 10 minutes or so. Note to self: S.T.F.U. I could go on, but realistically these are a few low points in overall good times. Mainly, don't be a dick, and be aware that others are sometimes going to try to screw you over. Try to figure out who's who. Easy to say, but... FWIW I'm currently working in C# but have done most work in C++ and C. Good luck!
It appears you’ve been answered but if you’re interested in learning more, look up the difference between pass by value and pass by reference :)
For me, it is readability - if I do have a parameter that is calling something versus just being set, I'll use regular syntax for debugging. The other scenarios where I LOVE initializer syntax is for Collections and for setting indexes. e.g. var obj = new List&lt;Object&gt;() { someDefinedObject, new Object() { prop1 = propValue1 } } var intArray = new int[] { 1,3,5 }
We don't use it for complex types because of the problems debugging, like you said. It is very handy for IList's though, array initialization is probably our primary use of it.
I got distracted by the referencing part and forgot about this bit. Thank you for explaining it. I thought I understood casting but this question really exposed my ignorance as I've not come across this syntax before. Thanks again
WinForms has been deprecated for almost a decade. It hasn’t received any new features since 2014
It's meant to trick you. Nobody should be writing code like that.
The syntax is fairly similar. If you learn C# you shouldn't have a large problem learning Java if you need to in the future.
&gt;The world is moving to JS because it can do backend and Frontend but you already know all that if you coded for 20 years Extremely hyperbolic and dependent on the region. If I look at job ads near me there are very, very few who use Node/JavaScript as the backend. Keep in mind the tech industry is bigger than your city.
An important reminder for everyone, regardless of experience. It's really easy to butcher OOP and polymorphism beyond what is truly necessary.
If the project have some time on production, expect a shit ton of workarounds on the code. if you have a somewhat good arch, read a lot about good practices and meaning of things inside that arch. And please if the people who works on the same project as you is somewhat old, just make them remember what a good and scallable job looks like!. SOLID it's your best friend boy, do not ignore it,
Always ask questions. Chances are at least one other person has the same question and you and is equally, if not more, afraid to ask it themselves. An easy way to ask questions is to ask for validation of understanding. Speaking as someone who used to tutor in math and programming, it's much easier to tailor an answer for a student when you understand the context of their understanding and misunderstanding.
Dude, where are you from?!?, Asking the right questions in a meeting could be the game changer on a lots of applications, i think that the real question that you have to make yourself on a meeting is, ¿is this 'thing' really critical? ¿is here any peolple that can help me on my issue? ¿is this a development issue or a bussiness one?
Oh yea I heard if you know one the other is very easy to learn as they're similar. I will probably pick up Java later on just to be more diverse in the job pool. Starting with C# just because I think it will be more beginner friendly. My goal is to land a Jr position as quick as I can and maybe go for internships for summer 2020.
You could even use different types of cutting apparatuses to conveniently explain interfaces.
Yes it's worth the leap. Get an up to date MVC book. Read it and do the examples. Then start looking for a job requiring that experience. Then get that money. 
I don't know if that's a good thing for a beginner to dive into in C#, it's more complicated than you might think. public class Program { public static void Main() { var val = 10; Hello(val); // Pass by value by value Hello(ref val); // Pass value by reference var obj = new MyClass(); Hello(obj); // Pass reference by value Hello(ref obj); // Pass reference by reference } static void Hello(int arg) {} static void Hello(ref int arg) {} static void Hello(MyClass arg) {} static void Hello(ref MyClass arg) {} private class MyClass{} }
Do organizations still use asp.net? I'd imagine they would still work on legacy projects. I'm working in asp.net mvc RN. 
It keeps you from repeating `obj` many times. In real code your variable should be much more descriptive than `obj`, so it will have more effect there. Related, the Collection Initializer syntax is really cool because it calls an `Add` method on your class, which can do *anything* you want it to. It supports generics, default parameters, etc.
Going from C# at my uni and adding ASP.NET at my work was still like I was discovering a whole new world *inside* C#, it just has so many nifty and nice features
A concept a week seems a bit slow :) I was about to recommend "Learn python the hard way", but noticed it's behind a paywall now. You might still find a pdf of it for free if you Google it. Not C#, but very good to get started. Another thing to try is sub reddits like /r/learntocode. They might know of a good C# intro book. 
This is a C programmer abusing C# in order to be an ass. I've got a decade of C# development experience and if this code showed up in a code review I'd tell the person to fix it. Anyway, lines 4, 7, and 9 are just different ways of referencing the same array element. Line 9 combines lines 6 and 7 into a single expression. In converts o to an array reference and uses a subscript to access element 1. &amp;#x200B;
Your post is very helpful for me. Thank you so much 
Shameless plug: if you're interested in learning ASP.NET Core (the latest web stuff for .NET), I wrote a free book: http://littleasp.net/book
You imagine a lot of things that may fundamentally not be true. Large scale production development in Web Assembly simply does not exist at this point. We don't know if it will be viable or not and there are lots of reasons to believe it may not be at least not anytime soon. Writing performant, easy to use client side UI frameworks is **hard** JS has been doing it for years, and there's still a lot of trade-offs involved in picking a framework. Blazor isn't remotely close to ready for prime time, and it may never be. This fantasy that you can avoid JS is just that, a fantasy. Even if these technologies take off you've got years of JS interop to deal with and you'd better know JS. 
What about graphql .net conventions? https://github.com/graphql-dotnet/conventions
For lists you usually use the collection initializer, not the object initializer.
Yeah this was my experience as well. First month or two new employees usually work on legacy code base just to get their feet wet before jumping onto one of our main code bases. My company would usually set some kind of task on the legacy base. And it's not necessarily about knowing the code or producing some incredible work... It's just about getting use to the teams workflow and getting to know your colleagues etc.
Probably like me, I started in 97-98 with classic ASP (VBScript) and VB6. 
Like you can see [here](https://github.com/graphql-dotnet/conventions/blob/master/src/GraphQL.Conventions/Types/Relay/Extensions/ConnectionExtensions.cs), the connection implementation happens in memory, which is a hard no in many of my use cases. This would be a bit different if entity framework would support `.TakeWhile()` and `.SkipWhile()` operations. Besides that I think this library would be a great option if you want to quickly hook up your back end to a graphql api! Just remember you're trading a bit of control for development speed.
I ported my c# app to java a few years ago to see if the new lambda stuff was good. Maybe i don't know java well enough but fuck that. Linq is a killer fucking feature for me, now. Now i wish i could give myself a good excuse to really dig into f#.
LINQ is an *amazing* feature. I've worked with PHP and Python, you can do some fun stuff with their array syntax, especially Python's single liners, but nothing comes closed to how much I love LINQ.
This is like sugar. Little of of it is fine, but when over use it may cause numbness in limbs.
It's on my desk right now. I've been a dev 20 years and I'm still learning stuff from it
If you mean the components frameworks provided in .Net, yes I have used much of that before to great effect. :) I haven't looked into that for this Towel code yet mostly because the code is still in too heavy of development that I just haven't had time to look into potential use there.
Visual Studio should have an option to add files/folders as a link. I use Rider so I have to put something like below in all my projects. &lt;ItemGroup&gt; &lt;Compile Include="G:\C# Libraries\StdLib\**\*.cs"&gt; &lt;Link&gt;Libs\StdLib\%(RecursiveDir)%(Filename)%(Extension)&lt;/Link&gt;&lt;/Compile&gt; &lt;/ItemGroup&gt; It has the advantage of automatically including all new files and subfolders.
Maybe the proxy protocol? 
I was floating while writing code before, but reading Clean Code was an eye opener. 
Agreed. There are no stupid questions. Everyone has different experience so invariably if you take two random people in the company, one will know more about a particular subject than the other and vice versa. The sooner you ingrain that you’ll always be learning, whether you’re a senior, principle, tech lead, the more comfortable you become with asking questions and advice. 
What makes you think asp.net wouldn't be used nowadays?
I guess I was just thinking within my org. Most of them are mvc projects. 
MVC is [asp.net](https://asp.net) though...
Sorry. I was talking about asp.net web forms. 
My 5 cents? If the code is reasonably stable and doesn't change very often, create a nuget package. If it gets too painful having to update it all the time, convert it to an API and call it from your other projects. 
To be fair, when I read asp.net I don't automatically think of asp.net MVC. Worked on both for 7+ years
Actually I had a good reason to add the Rest prefix in the calls, if that's what you mean by smurf naming. &amp;#x200B; I wanted to make these methods clearly distinct than their non-rest counterpart, which are from HttpClient. Those methods won't do any of the new functions that this library provide and thus I thought a prefix would be a good way to remember users to be aware of that.
Bridge.net. C# to JS compiler
I just started my first dev job in the beginning of January, so it's all fresh. You're probably woefully unprepared. Not in the sense they'll fire you, in the sense that not even your largest school project or personal project compares to enterprise level software complexity created and maintained by a team of devs. I takes me about 75-100% longer to incorporate new changes into the code base than the other devs. Just finding the location I think is relevant involves many ctrl+shift+F searches and tracing method calls. I came from a c++/python background and use c#/.net professionally. There is a slight learning curve as I learn the language specific features to write code matching what currently exists. I work for the DoD, so the gov specific jargon adds an entire layer of complexity to adding changes. "We need to add a XYZ toggle to the JGGAWCK controller on the LibertyMurica QTZ." Yea, sure, let me just figure out what all that means, understand what those systems currently do, why they do it, and then I can get started on it. I'm sure many companies will have something similar. My senior devs want me to ask questions. If I think I've been bothering them, I'm still not asking enough. Even the other junior devs have valuable experience because 6-12 months in the environment already imparts so much knowledge. I make sure to not sandbag, though. If I have questions, I make sure I have what I've tried, what I think the problem is, what I think are possible solutions, and then I throw it all out when they tell me what I missed. I want them to know I've put in effort already and I'm not just asking for help at the first sign of distress. So it's been 2.5 months and I'm able to make small changes to the code base. It's better than they expected I think and in another 3 months, I'm sure I'll already know much more than I do now.
[removed]
Check out hangfire dude! You're re-inventing the wheel! (Great job so far though). Did you google "long running tasks in ASP.NET" before you started? I am guessing not. 
i rarely see any ASP jobs these days, there couple of C# .NET backend jobs but that's about it most people go for the cool boys JavaScript club
It is fairly useful for initializing objects within a call chain like many of the `builder` patterns, LINQ, etc. (i.e fluent style). Without the syntax, you'd have to create and configure the objects outside of what needs it and you'll be declaring a variable to go with it. Also, you'd have to repeatedly refer back to the variable to access its members, something that doesn't apply to the initializer syntqx. Bottom line, though, is that you should choose the styling that you believe maximizes readability.
There are some good c# discords out there! Send me your discord, we can talk on there :)
Kika.mika#7841 :)) thanks 🤸‍♂️🤸‍♂️
Agreed, this analogly does extend to interfaces. (perhaps ICutter or IPoker, or even IFoldable). I just didn't want to go too deep into the OPs question. 
You WILL see really shitty code written by people with more experience. Don't let it destroy your soul.
[Object initializer syntax prevents your variable from containing a partially initialized object.](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxAgrgOwD4AEAMABLgIwDcAsAFAHEkAslNATPtbgMx0BsxzdAdkIBvaoXHEuUOBAA2cACZ9CAMQD2akWIk7OhAEIQEBoyIDmcGGULSrAX23iHVXVJnylufoePDCz1x5iekIAWQgAS0wACgBKLRcdCUck3BCAQXQAD2i1YAArOABjGEIs+NFEpKSoAHcImCKAC0Jo8oTqzoki6DhCTHRZWRAUrq7SAE5ogCI8wpLCCKh+wdlp2KYxrcJgBBkAa03tnQU4ADMIQdRR44lJmbni0sgATx2+gAcjGAi5WTeog1frIIgAvRTrI63JK7A5QsYBTqI6GjACQ6k0Z0IAF4VkN4ToAPSEwiPBaAn5yMGIQgAWkIHwQag+iBgAMwQKp4OMcCyH1kalOUBu4hgCDelWOWNxmDgtVUGg60JMxlxpwuV2iPniAH4dYQYE0mfLZfKAKJZIpwD4/NQxWJIEVJOwEiR2Qg9RotYTIpKZHJnDZOp3E/qaMmlCnA6l0hlMlkINmLDmUkHgwi8/mCuDCqpJaV42Su0XipVbAumhVqOLF/MAOh8OMI6sushgWqMuv1huN/TlhAtVptETtNad7s9zREvp0/uigdrwbzuhIU2mgB4NwAg+5CUs47EA===) So there's at least *that* value.
There's no "new Arr1", you just create a variable "arr1" that points to the same object "o"
Well, you have an animal type discriminator, so one can safely assume that it'll be used for triggering different behavior, otherwise the type would be useless. Of course that's a textbook example and in real code things are rarely so clean-cut.
https://imgur.com/wfUHNyh
Seems like a good start for a beginner like me. I think I'll give it a try, thank you, shameless.
Totally 'Let me Google that for you' (or SO) will quickly annoy even the most patient colleague. Learn how to use StackOverflow and you'll be off to a flying start! (reading C# In Depth won't hurt either as 'Skeet is God' )
Hi, this is a really confusing example. I fleshed out the methods to see how variables and values change (or don't). I'm not trying to turn it into a full tutorial, but at least OP can step through. &amp;#x200B; class Program { static void Main(string\[\] args) { var val = 10; Hello(val); // Pass by value by value Hello(ref val); // Pass value by reference &amp;#x200B; var obj = new MyClass(); Hello(obj); // Pass reference by value Hello(ref obj); // Pass reference by reference [Console.Read](https://Console.Read)(); } &amp;#x200B; static void Hello(int arg) { arg++; } &amp;#x200B; static void Hello(ref int arg) { arg++; } static void Hello(MyClass arg) { arg.ThatArg++; arg = new MyClass(); arg.ThatArg++; } &amp;#x200B; static void Hello(ref MyClass arg) { arg.ThatArg++; arg = new MyClass(); arg.ThatArg++; } &amp;#x200B; private class MyClass { public int ThatArg { get; set; } } } &amp;#x200B; &amp;#x200B;
Guessing this is supposed to be an insult? I don't code professionally.
Thanks for being the only one to answer the question. Will def take another whack at it.
Fix the typos.
I work for a small shop that mainly uses C#. About 10 people excluding outsourcing. I started learning it last November while plowing snow for a state agency. Learning has been slow mainly because I work more with SQL server and do a lot of testing. While I don't write a lot of C# I see a lot of the build process and am developing a good understanding of data. I think I like working with databases more. Anyways I didn't get the job because I was good or know my stuff. I got it and kept it by accident because I didn't know about the fake it till you make it culture and just told the truth about my ability. When I don't know what something is I tell my manager and when I screw something up I tell them how I screwed it up with documentation because I'm writing everything down. They love it. I'm with a lot of other developers outside of work because I'm working remotely and get to travel. My peers tell me I need to get out of C#. There is no future in it. I'll never find a job and companies are using newer tech. SQL is outdated and noone uses SQL server. I'll have more of a future if I just learn python or JavaScript. My project manager and the owner don't really do social media like reddit or discord. I send them examples of above and they all think I'm fucking with them. Honestly it messes with my reality sometimes. Our work is primarily enterprise programs for big firms. Their tech guys can't imagine using anything other than C#. Almost everything is a MVC. If it wasn't for C# subreddits and discord channels I would think I was working in an alternative reality. 
It was necessary syntax for anonymous types. It's the only way of initializing them. Then it's a small step to have the feature available for other types as well. It goes together nicely with Collection initializers and expression-bodied members: public List&lt;Person&gt; GetPeople() =&gt; new List&lt;Person&gt; { new Person { Name = "A", Age = 30}, new Person { Name = "B", Age = 31 }, ... }; You do a lot in just one statement. &amp;#x200B;
Would you say that most of the demand is in web apps? I've been doing desktop C# for 5-6 years writing plugins for CAD software but I'm getting pretty sick of my current position. 
If your project is something that would be good for general purpose programming (and if it is open source) then I would be interested to see it. I'm always researching trying to find better code techniques.
Would you say that most of the demand is in web apps? I've been doing desktop C# for 5-6 years writing plugins for CAD software but I'm getting pretty sick of my current position. 
y u so mad
JS is becoming ES 6. The syntax is incredibly close to C#. As a stepping stone to ES6, Microsoft introduced TypeScript that is an ES6 style syntax and transpiles to JS. The author of C# worked on TypeScript (and ES6 spec). If anything I'd say that JS is moving towards C#. And, that's a good thing. 
Could you send me the info too please? FrostWyrm98#2511
Could you send me the info too please? FrostWyrm98#2511
I’m considering a C# and .net bootcamp. I was nervous about it at first because these weren’t “trendy” options. Then I looked at the job postings in the area I’m moving to and there’s a ton of them. 
To answer your question, orgs definitely still use ASP.NET WebForms...in legacy applications. Most new development will either be ASP.NET Core MVC, or more likely Angular/React/Vue + ASP.NET Core WebAPI (which is basically the same thing, just without Razor templates). If you are bleeding edge you might be playing with Razor Components. Orgs that are investing or branching into microservices might be using ASP.NET Core to make single endpoint middleware.
Where are you looking for jobs? Java, Python, and C# web development jobs are all over in my area.
Yup. Intentionally tricky questions like this and the ones they stuff into programming interviews bother me, because this is just *bad code* and bears no resemblance to the actual job. The only time skills like this are useful is when debugging somebody's already-written bad code. I'd much rather see questions about how to architect a system for a particular task.
Can you better describe what you're trying to do? What version of .NET Core?
I feel like these days the question is more what can't you do with C#? You can make video games, console apps, desktop apps, web apps, etc. I personally do a lot of data stuff so interfacing with sql database and doing stuff with that data. You will actually learn a lot if you start with the ancient ADO.NET approach and then come to appreciate modern solutions like dapper or whatever your ORM of choice might be. 
&gt;I want to create something with C# which would help me learn the language more instead of going through tutorials or books. &gt;Are there any good tutorials out there Lol just google "easy c# projects" and im sure youll find something to try. 
As you say BobbyB
One advantage is that it's an expression: var x = new Foo(); x.Bar = 12; SomeMethod(x); can be written SomeMethod(new Foo { Bar = 12; });
&gt; Related, the Collection Initializer syntax is really cool because it calls an Add method on your class, which can do anything you want it to. But probably shouldn't :p. The expectation would be that it adds items to a collection of sorts.
&gt; Blazor isn't remotely close to ready for prime time, and it may never be. Blazor won't be ready, but Razor Components will be production ready later this year and has a similar feature set. You can build component based web UIs using HTML, CSS, and JS interop that conform to modern web expectations while having free server side rendering, great performance, and (relatively) free server side push. The in-memory state management is a downside, but unless you are trying to support tens of thousands of concurrent users at a time it doesn't really affect scalability.
&gt; And they can't be used together. Well, indexed collection initializes can new Foo { [1] = 2, [3] = 4, Bar = 5 }
And yet dotnet core 3.0 supports it.
Darn, you're right! I forgot the new syntax. Just keep in mind that it uses the indexer instead of the `Add` method.
I'm trying to convert the longtitude and latitude to a value like 0xE6100000010CF819170E84444A40EA3E00A94 . This value is a SQL Geography type. I'm using .Net Core 2.2
In memory state management means no load balancing and piss poor scaling. Not ideal for anyone, and especially not for anything with a spotty internet connection.
I'm sure you found WinForms intimidating when you first learnt it too.
The validation attribute is designed to allow the property value to be set, but then track that it is in an invalid state. This can be used to alert the user to change it or something before continuing. It looks like you may not be using it that way, and instead using it to prevent updating the property value at all. The issue with this approach is it is less obvious, and less efficient (you have to use reflection stuff to get it to work). If your goal is to prevent the property from being set to an invalid value to begin with, why not just check the validity in the set function, vs checking the validity in the attribute, and then using reflection to get the valid state?
Not sure how he can use SIMD in this project. The copy and object overhead of doing things like `new Numerics.Vector&lt;float&gt;(Towlie.Vector.ToArray)` would kill performance. In my experience I've always lost performance with Numerics.Vectors because their constructor requires an Array - of which is generated (then needs GC'ed) for the sole purpose of creating a vector. So each element gets copied twice and there is increased GC pressure. Numerics.Vectors need support for instantiation via Spans or ptrs to be worth a damn. There is a private constructor though that takes a ptr. If I use Reflection and Linc.Expressions to compile a delegate constructor to that, decent performance can be had. But overall I just tend to avoid the current IMO shitty implementation of Numerics.Vectors
Consider using immutable types as a matter of course, so then you don't have public setters. &amp;#x200B; I prefer using a constructor to initialise values even with public setters available, because you get compile time safety when adding a new param.
That is what I was thinking when I first looked into SIMD after reading the above comment. Thanks for the info. I still want to test things though... I might be able to come up with some crazy hack to bypass the overhead of the constructors... But I assume I won't be able to at first glance.
If you indexed security and timestamp, it may be a bit of a boost on your timing for the query.
So from my understanding you want to convert float/double value (geo data) to binary and then display it as a hex string ? If yes then you can use BitConvert class to get byte array from your value and then use LINQ to display it in hex: var result = "0x" + BitConvert.GetBytes(geo).Select(b =&gt; b.ToString("X2")).Aggregate((l, r) =&gt; l += r);
Yeah. And please email me a link to your articles. At some point I want to either make a wiki or include links on the readme for tutorials and more information.
Thanks for fleshing that out. Mine was not meant to be an example, just a listing of the different method signatures that you would have to explain to fully cover "reference vs value" 
&gt; var result = "0x" + BitConvert.GetBytes(geo).Select(b =&gt; b.ToString("X2")).Aggregate((l, r) =&gt; l += r); yes, I think so... How can you do this given that the longtitude is 10.4 and latitude is 17.6? 
&gt;This is a C programmer abusing C# in order to be an ass. I've got a decade of C# development experience and if this code showed up in a code review I'd tell the person to fix it. This. There's value in understanding the value/reference semantics of C#, of course, but the code is needlessly obtuse. `((int[])o)[1] = 1000;` is nonsense you should never ever have to write in practice.
You mean that the value is string ? Parse it :) var geo = double.Parse("17.6");
Man is right tho, had some typos
&gt;I'm trying to convert the longtitude and latitude to a value like 0xE6100000010CF819170E84444A40EA3E00A94 &amp;#x200B; I'm trying to parse these to values longtitude and latitude to a format like this 0xE6100000010CF819170E84444A40EA3E00A9. This format is in SQL Geography
Fix the typos then!
Everybody mad today hehe... fixed already
Added!
Added
Yeah, you probably right about that. Been so long now. I think I'm so used to the GUI building aspect and event driven functions it's hard to switch over to XML GUI building + data binding.
Just use WebClient. var wc = new WebClient(); var text = wc.DownloadString(url); // Write content to disk &amp;#x200B;
Below market rates for which market? :)
Yes. 
&gt; if you stay to C# or JAVA for too long you'll be stuck doing legacy stuff and you'll miss the boat of innovation I'd rather maintain old Web Forms projects until I retire than work with the crap that is considered "innovation" in the JS world these days. I do write JS from time to time (in the form of TypeScript these days). I'd rather not but I have accepted it. I however directly refuse any offer that involves JS on the server. 
Yes
I hope that you are right but the jury is still out on the tech (who knows maybe the assembly size thing is too hard to solve) and the mindshare (tech may be great, but what if nobody uses it so you can't get a job or pitch the tech in your company).
Look into the new Net.Core 3.0 System.Runtime.Intrinsics.X86. Theres some good things in there, but currently it's buggy and I can't get correct results when directly translating low level c++ vector code in some cases. 
I agree that there are hard problems to be solved but somehow JS made its way to the server so I can't imagine why this web assembly thing will be harder.
Will do. I'm SUPER excited for .net core 3.0 I'm a winforms fanboi and I'll probably use it till I die for standard tools that don't need much GPU acceleration. My SevenEngine project on my github was a winforms app using opentk for opengl functions... And it was cross platform using mono. However, with .net core 3.0 you will no longer need mono for desktop apps to be cross platform. :) Larger companies often cannot install third party stuff like mono on all their servers, but .net core should be mainstream enough for companies to allow it.
My anecdotal evidence says more than half of web devs are employed building internal web apps which do not need to scale. I don't see how spotty internet connection is a problem with Razor Components but not with React. You still need that server data on practically every click.
```csharp public static void Main(string[] args) { // Create an integer array of length 2. int[] arr = new int[2]; // Set element 1 of integer array to 10. arr[1] = 10; // Create a reference to arr which is down-cast to the base object class. Object o = arr; // I think o is not copying the values of arr but referencing them // recast o back to an integer array // (this would cause an InvalidCastException runtime error if the orignal arr object wasn't already this type. int[] arr1 = (int[])o; // Change the value of element 1 in the first reference to the array to 100. arr1[1] = 100; Console.WriteLine(arr[1]); // inline cast the object reference "o" back to the integer array // and assign the first element the value of 1000. ((int[])o)[1] = 1000; // I don't understand this line // Since arr, o and arr1 are references to the same object, arr[1] is now also 1000. Console.WriteLine(arr[1]); } ``` As mentioned by others, this is absolute garbage code for the sake of being garbage.
`wc.DownloadFile(url, path)` should work aswell...
I can't get it to work...
Perfect. That worked first time. Many thanks!
I hate to be that guy, but... ... let me get this straight - you're asking others, most of which have probably achieved the position to aspire to at some point in their life, usually by hard work and due to their experience, to help you pretend you have more knowledge than you do in order to be a position where your lack of knowledge/experience will be detrimental to people that end up working with you - which will be people just like us?
My anecdotal evidence is that internal web apps almost always need load balancing, which you can't do on something with server side in memory state. And you don't have to fetch server data on every click in react. It's a client server model, you can cache on the client like any other client server model. You can't do that with razor components. 
Because JS is actually a surprisingly good fit for a lot of the stuff on the server. A single threaded evented architecture is actually really great for a lot of problems. Especially since running up a gigantic decomposed microservice architecture in node is quite trivial. It took me a long time to come around to JS, and particularly server side JS, but it's a surprisingly good fit for a lot of problems. Not every problem, but a lot of problems. 
What exactly is not working. Can you show your code ? Any errors ?
I usually ask these questions. * What is the difference between an object and a class? * Give a real-world example of an abstract class. * In pure Object programming theory, you can inherit from 2 different class. If you ever find that it would be useful in your code, how would you do it knowing that C# doesn't support multiple inheritance?
Removed: Rule 3, Rule 4. Plenty of resources available searching. At minimum you'd have to show us what resource you used and how you feel it's lacking. Otherwise, maybe give /r/cscareerquestions a shot.
Well from my point of view, preventing the update of the value to a invalid value is the goal, but I want to generate a class and add attributes to properties dynamically and the data I need to pass in is contained in the attributes that are added. So moving the data and validation into the property setter is unworkable. 
:) 
Why the hell do you need load balancing on an internal app? Also you can surely do load balancing with Razor Components as long as you stick the session. Hell you can load balance even without sticky session as the connection is a web socket, and surely load balancers can maintain an open web socket.
non-JS languages are known to be very good on the client. We know that from writing a great amount of desktop and mobile apps :)
You need load balancing to provide HA, and FT. Sticky sessions and session state in general interfere with that. And again, you don't have to do that in react, you do have to do it in razor components. 
Ugh... Stop spouting this tired old inaccurate crap. ***WinForms is not deprecated.*** It's a wrapper around Win32 calls. It simplifes them the same way MFC does, but in managed code. It will be deprecated around the same time as Win32 and MFC, which will be approximately *never*. (And, no, MFC isn't deprecated either. Its latest release was *two days ago*, version 14.20.27508.1 updated for VS2019 RC3.)
so actually solved this in the way you are thinking with a library that has been mentioned before, hangfire. I had some tasks that I wanted to schedule to run on each web server (cache refreshes) and some tasks i didn't care if they ran on the server that queued them or a processing service. Hangfire set up with a sql server backing store and a processing server running a windows service. It worked very well, took very little time to set up, and all i had to do to get the queuing working was feed hangfire a database connection string. once you have to write your own (did that too since hangfire wouldn't work for that project) you will appreciate all the stuff hangfire does for you.
Just working through it, and I think it is an fantastic book - easy to read, follow through and each chapter is nicely short
Actually client architectures in other languages have been pretty awful to work with and maintain, especially cross platform. That's why we ended up in the browser in the first place. It's why we're getting Electron apps everywhere. You're also going to have to stay with HTML as your UI because otherwise you lose accessibility and your ass gets sued. Dealing with the DOM is most of what makes JS suck in the first place and you're not going to escape that. 
What kind of internal apps do you think people work on? I've never ever seen anyone provide HA and FT on internal app. If HR can't download that maternal leave data until the server restarts who the fuck cares?
It is HTML and the DOM that provides the cross platform story. Actual languages have been as portable as JS for decades. HTML and DOM suck even worse than native frameworks but they are indeed portable.
Look into FluentValidation. Sooooo much easier, cleaner, and more elegant. Plus, it can do more. 
I don't think it's the best syntax or always the best practice, but I do like and use this. I think it's an example of some cultural clashes between "old C#" and "new C#". In "old C#", and I mean like "2005 C#", we had a completely different outlook on how to build systems. I remember Framework Design Guidelines had a whole chapter on "the Component pattern". It suggested we should build objects that: * Were completely valid from a default, no-args constructor. * Could be further configured by setting properties after calling the constructor. * Performed work by calling methods. The idea was to have a create-configure-act pattern for every type. This was followed (and works well) in Windows Forms controls, and turned out really useful for WPF elements too. But "new C#" is more focused on building the backend behind the GUI. In that world, software engineering is favoring things that don't follow the component pattern. Some people should argue a class should be all methods or all properties but never both. Some people argue most types should be immutable. Object initializer syntax is a sugar to help with types that follow the component pattern. It allows you to omit some clutter in the "create-configure" steps. VB always had this functionality via the `With` keyword, so it's not exactly new. But that syntax isn't quite so useful for immutable objects, since they need to be initialized via constructor. It turns out that *using* that constructor isn't really much different than using an object initializer, perhaps even more clear: var withInitializer = new Something() { Name = name, Value = value }; var withConstructor = new Something(name, value); The problem is *writing the constructor* is a little tedious. You only have to do that once, but you have to write object initializers many, many times. Nonetheless, Record Types and/or Representative Constructors have been delayed as a feature for at least six years now. This has always struck me as sort of odd, because I feel the amount of frontend code (where this is most useful) is diminishing compared to the amount of backend code being written. 
int\[\] Arr = new int\[2\] ==&gt; Creates array at location L with room for two elements {0,0} initially. arr\[1\]=10 ==&gt; Puts 10 in mem at pos L+1=&gt; {0,10} Object o = arr ==&gt; o points to location L int\[\] arr1= (int\[\])o; ==&gt; arr1 points to location L arr1\[1\] = 100; ==&gt; Puts 100 in mem at pos L+1=&gt; {0,100} Console.WriteLine(arr\[1\]); ==&gt; Outputs value at mem pos L+1 ==&gt; "100\\n" ((int\[\])o)\[1\]=1000; ==&gt; Puts value 1000 in mem at pos L+1 =&gt; {0,1000} Console.WriteLine(arr\[1\]); ==&gt; Outputs value at mem pos L+1==&gt; "1000\\n" &amp;#x200B; &amp;#x200B; If your out put is 1001000 check to make sure that line 8 isn't simply Console.Write(arr\[1\]); If you output is 100 and 1000 on two different lines then that is what I would expect. &amp;#x200B; Objects are reference types... this means that we you create them, you create a spot in memory to hold them then the value you are passing arround is simply the address of that location in memory and not the values contained within that location in memory. When you assign a reference type from another reference type you are assigning the location to point to... not the value. So if you have &amp;#x200B; &amp;#x200B; foo O1 = new foo(); foo O2 = O1; &amp;#x200B; You don't end up with two copies of a new foo... you end up with one copy of foo in memory with two handles pointing to it. &amp;#x200B; In order to make a seperate copy you need to create a copy operation &amp;#x200B; foo O2 = new foo(O1); &amp;#x200B; pu &amp;#x200B;
Check this out: https://stackoverflow.com/q/8077570/2302383
Isn't the proxy protocol to report the client ip to the server? How can it help in this case?
&gt;My peers tell me I need to get out of C#. There is no future in it. I'll never find a job and companies are using newer tech. SQL is outdated and noone uses SQL server. I'll have more of a future if I just learn python or JavaScript. Your peers are fools. They sound like penny-ante web developers that don't know how actual work gets done behind the scenes of their user-facing Javascript abominations. SQL Server is *widely* used and is a growth field. The "old guys" are retiring and are often being replaced by know-nothings that can't actually administer a server. I'm a developer that works with SQL Server all of the time, and I'm *constantly* having to instruct clients' DBAs on the ins-and-outs of their own databases. *And I'm not even an old fart yet.* Learn SQL (the language). Learn the DBA basics (index optimization, query performance stuff, table and storage partitioning, replication, clustering, etc.) and you'll be able to figure out the implementation for any DBMS by reading the documentation. .Net is also growing by leaps and bounds. Your peers are probably jaded anti-Microsofties since back in the early 2000's. Don't let their cynicism fool you. Microsoft in the post-Ballmer era is *very* different. And .Net is wide open and cross-platform now. Python is handy for some data-mining and simple scripting stuff, but as a language it's pretty terrible to work with. Sometimes it's all you've got to work with, though. It's not a bad thing to learn. Just don't focus on it to make "big software". It's not going to escape its niche. Javascript is the soon-to-be-overthrown king of interactive web page scripting. Web assembly ("wasm") cannot get into the mainstream soon enough. Once it reaches that critical mass of installations (very soon, on the order of a few months very likely), it will only be a matter of finding tools to compile *any* language to wasm. There are already C#-to-wasm compilers in the works and reaching release-readiness. Javascript gets a big, fat "don't bother" rating at this point.
Unless there is a major project underway they will ease you in. I'd never drop large or urgent work load on a new dev before 2 months at least. Have a question, google it, if you don't find the answer or are unsure ask for help. Ask *all* the questions in your training period, it'll show everyone you want to and are capable of learning and advancing. You'll feel like you're drowning for the first couple of weeks don't sweat it. It'll pass and you swim away.
&amp;#x200B; &amp;#x200B; If you click on the set and press F9 you can set a breakpoint on the property without backing code. &amp;#x200B; Second, if you Debug-&gt;Windows-&gt;Exception settings you can put a Tick &amp;#x200B; &amp;#x200B; &amp;#x200B; CLR exceptions to make it a tick rather than a square your code will stop as soon as it throws an exception. &amp;#x200B; Use a ctor instead of manually setting properties on object initialisation if you're likely to hit validation issues. Object initialiser syntax works great for dumb objects like DTOs. &amp;#x200B; Be careful when using properties as a means of validating state. Silly example, you have two properties X and Y, both start as zero, and a computed property Z = X / Y. &amp;#x200B; At this point you can get a divide by zero error simply by setting the properties in the wrong order, especially if you've got some sort of INotifyPropertyChanged thing going on. &amp;#x200B; Keep this notation for simple DTO's etc. &amp;#x200B; Like all these things, just because the syntax allows it, doesn't mean it fits every situation :) &amp;#x200B;
It's specific to game development, but the concept can be applied to other things. The main purpose of Component-based architecture as I see it, is to allow your program to be very flexible, avoiding a very convoluted and difficult to maintain inheritance structure. That being said, I don't really feel like I have enough that's worth sharing at the moment, but as soon as I do, I'll shoot you a DM.
You could always request data in time batches eg, get a list from day 1 - 10 and then day 10 to day 11 and so on and combine the lists in your code. .addrange() etc If you're problem is timeout or deadlock etc.
What kind of apps do you work on that don't? Do you enjoy patching out of hours because you can't take the system down, or do you just not give a shit about your customers, because who the fuck cares is HR. 
This should do the trick: https://gist.github.com/airbreather/591b9fb85aa2823a58eedea75ca1f99a
The base type of all delegates is `System.Delegate`. 
Apps with like 10 users total that do things like HR, accounting, and an insane amount of regulatory bullshit. Also education related apps like one for assigning halls and professors for lectures at university and so on. We usually deploy after hours or when the customer confirms they don't currently need the app.
I just came here to say that sounds fuckin awesome. Got any advice on books or courses to start out with?
Thank you for taking the time to write that. I really do appreciate it. I feel what your saying. My shop is the old timers. The whole shop is retiring in 5 years. I feel that for every 10 programers I meet in the wild, 1 of them says exactly what you just did and it hits home. 
I have a block of code i use at home for embedding DLL's into a solution. You just add it to your project in the initialize bit and the block of code will load the DLL into memory at start of execution. It means you will have a single .exe which is what i always want also. Doesn't require any third party bloatware either, just all native to C#. I'll try find it Tonight, if i don't reply with it in the next few hours and you're still struggling comment to remind me haha! 
Try to look into delegates. I think that should solve your problem. 
I appreciate it but that’s more the I need. Others may appreciate it however. 
you want to parse over each line in the csv file first i'd imagine.. and then parse over each line in your listbox &gt;foreach(string line in $csv) { i++; line += "," + listbox.item\[i\].text; } This is just bastardised powershell/c# but i'm sure it makes sense lool! Maybe? 
I actually got into programming through a video game "Final Fantasy XI" an online MMO back around 2003. The game was really hard and it was hard to make GIL so I started looking for bots and from lack of anything decent, I decided to learn to make one and started working in a crap tool called "AC Tools" [http://www.ac-tool.com/](http://www.ac-tool.com/) &amp;#x200B; Within 6 months I had one of the best scripted Fishing Bots available, and I had it publically available too, it got quite popular. However was limited by the tool. But the success of this and how fun it was to make inspired me to learn other languages. So I picked up VB6 (since I had a background in GW-Basica from when I was a kid messing around with MS-DOS books my step dad had laying around. Basic made sense to me, c/c++ was super confusing at the time. Square Enix patched fishing in FFXI and broke the scripted fish bot so I went on a quest to remake it in VB6. This led me down a rabbit whole of learning some assembly, learning how to use and read memory editors starting at raw binary in loaded ram and reverse engineering things at a low level and reproducing high level code to manipulate them using the Windows Debugging API (ReadProcessMemory, WriteProcessMemory, CreateRemoteThread, etc etc etc). A team of like minded folks found all the memory locations for the new fishing stuff in the game and I made a bot that could automatically fight fish for you and remade the whole thing in VB6. We didn't publish that one, as we were tired of SE breaking them, and we had developed something we called "ASM Signatures" So we had a file map made in XML that described a memory location and it has an ASM signature which was a chunk of Machine Code converted to Hexadecimal that our memory scanner used to relocate memory structures after game patches. So as long as SE didn't change the code declare the fishing sturctures the ASM stayed the same and we could easily recalculate memory offsets from the dll base address when the bot started up (did this stuff on the fly, no need to manually search memory for stuff after patches). My point is all of this inspired me to learn to code, it drove me. And shortly after 2003 ish I picked up C# because one of my Mentors was using it (we talked a lot over AIM). And I found it quite easy to pick up and learn and I just kept making stuff. For the first 6+ years I pretty much stayed in the Windows Forms world and Windows API interop ([pinvoke.net](https://pinvoke.net)) and most the things I built were desktop apps related to video games as well as learning some Direct X and how to do code injections etc. And then in 2010 I got an internship as a sharepoint developer and started learning [ASP.Net](https://ASP.Net) WebForms. When I started as web dev, I had no idea what I was doing, I just knew how to code. I was thrown in the deep end of the pool and I swam and never sank, I just learned on the fly. Google this, google that, asking co workers etc. I can't say I ever really had a good set of books on c#, just a drive and ambition to learn it. If you want to get really passionate about learning to code, find a way to connect it to something you love to drive your desire to want to learn it.
I second what /u/TNMattH said. Been in the C#, SQL and JS game for many years. I can't believe how many new/medium level devs can't write a SQL query. 
Excellent series. RX, TPL, TPL Dataflow is super overlooked but yet so powerful and the underlying implementation for many high throughput scenarios. You could also use a actor framework to solve this kind of problem, for example akka.net. 
Fellow dinosaurs unite!
&gt; abusing C# I think this is less "abusing" C# and more setting up an example to explain how references work. &gt; if this code showed up in a code review There's no indication this was meant to be in production code. It's obviously just an example.
🤯
I feel like an asshole admitting it. &amp;#x200B; I normally recommend Java or C# to different people because I feel like it might keep the quality of most C# a bit higher. A lot of Java is just unreadable garbage whereas most people seem to learn C# through microsoft resources or something derived from the microsoft resources - so most C# ends up looking acceptable at worst. As much as I don't like microsoft, the documentation is really good. People who are likely to write unreadable crap I recommend learn java and people who I think are likely to want to keep things cleaner I tell C# to.
Yes, `Delegate`. But obviously, it cannot be called
Related question: is there a way to declare a Func that takes any kind of value, `int`, `string`, `Customer` object, `HttpClient`, whatever. yes, there is, you type the value as `object`. But you can't really do much with it then.
You very probably can do this but you need to ask yourself how are you going to use it afterwards?
True, but i think that is an annoying example. My interview question was this: what is the time complexity of the dictionary class and why? Answering that requires in-depth knowledge of computer science and .net
Why don't you just overload method with different signatures for different cases? 
Don't. Is this yet another Python-dev-trying-csharp-looks-for-bad-practices-hack?
Yeah it looks great, doesn’t it? ;)
I don't think of myself as a dinosaur. I follow new developments, I have used React, Vue and Angular 2+, I support new features in languages and frameworks. I simply think that the JS ecosystem and the JS language are terrible. Even the new additions to the JS language are terrible. For example the syntax chosen for spread/rest (i.e. ...) is an idiotic decision and I am ready to insult everyone involved in the choice of this operator in their face and tell them that they are morons. JS is objectively bad and no amount of TypeScript can save it (it makes it more bearable but it is still bad) and even legacy .NET is more pleasant to work with.
Not an insult by any means. We are looking for people on my team to support a Winforms App in VB.net
The cheapest one!
Send me your resume. aaronkclark@yahoo.com
Love the clear and concise code examples. And the breakdown of the code. Thanks a lot for writing these. I thought the first one was easier to read though probably because I don't know RxJS so the `.publish()` did not make any sense to me. 
I don’t doubt your understanding of casting. What I’m not sure you know is what the [] operator is doing behind the scenes. Think of the operator as a method called “get” which takes an int index parameter. (int[]) o.get(1) What would you think the line above does? First it returns o.get(1) and then it casts it as an int array. ((int[]) o).get(1) What about the above line? This line may be easier to understand the order of operations than the line below. ((int[]) o)[1]
Ah ok, sorry, misunderstood the tone. My expertise is in C# though. I'm sure you could find someone more qualified than me. Thank you for the offer!
The FOSSed it so the community can carry the torch if they want. MSFT is done with it. Just because it "works with core" doesn't change the fact that it "has been deprecated for almost a decade". It has been superseded by many better techologies and patterns.
Maybe obvious, but not true. `.DynamicInvoke(...args)` will do it.
That doesn't change the fact that there are alternatives that are easier to learn and read. And that are currently undergoing rapid development with much more high performance feature sets. Stable and mature also means "we cant change shit now because it wont be backwards compatible and it will break everyones shit. So we are stuck with this design that could be a lot better but never will be"
but, don't
&gt; MERN is kinda what everyone says is the way to go Many companies and people in the industry are rapidly removing Mongo from their products and services. Express and Node are still fantastic. I highly recommend you learn an RDBMS like Sql Server. You wont find many .NET shops in the country that dont have MSSQL servers.
Its not just the syntax. Yeah any good dev can learn a new syntax, its the stacks and frameworks that begin to have huge diminishing returns when you switch languages. .NET, ASPNET, .NET Core, ASPNET Core, Entity Framework, LINQ, Visual Studio, SQL Server, n/xUnit, and the countless C# libraries used every day. Mastery in those tools and SDKs is what makes a good senior dev. I dont think it would be too smart to higher a seasoned .NET dev as a new senior Java dev. In short, check your area, see what is most popular or gaining rapid popularity and jump on that train. And right now C# is an incredibly safe bet.
Sure kid, I've been doing full stack dev for eons and used every language available. In that time I've found I've been very good at predicting tech trends. JS is garbage, even its creator thinks so. Sure a tool is a tool, but if u dont think wasm will fundamentally change the web landscape then you haven't even bothered to read the spec. Did I say today? No, I said in the future. I dont give a shit about what's hot today. I do care about productivity, maintenance and longevity, and so I can be patient. Have fun modernizing your app every year with a full team while i outwork them all by myseld.
I sort of back up the "use a different, higher-level class", but want to explain what I think is going on here, it's not intuitive. `Read()` in this case is NOT a non-blocking method. Almost every version of an API like this is explained as if it is non-blocking, but this one blocks and it has burned me many, many times. What's that mean? What you *expect* is that: * If no bytes are available when `Read()` is called, it returns 0 and doesn't do anything to the array. * If 0 &lt; x &lt; length bytes are available, the buffer will be filled with what's there and `Read()` will return `x`. * If at least `length` bytes are available, the buffer will be filled with `length` bytes and `length` is returned. In all cases, you expect a non-blocking function to return immediately. What we have instead is a blocking function. What it does instead is: * If fewer than `length` bytes are available, it blocks (freezes the current thread) until either more bytes are available or the socket closes. * When one of those two things happens: * If fewer than `length` bytes are available and the socket isn't closed, it waits again. * If at least `length` bytes are available, it fills the buffer and returns `length`. * If the socket closes before `length` bytes are available, it puts what was read into the buffer and returns how many bytes it read. So if, for some reason, the other side doesn't want to send you a full 1024 bytes in one go and it wants to wait for some confirmation of what it *did* send, this `Read()` call is going to hang. Frustratingly, the `Timeout` you set concerns the TCP connection negotiation, not necessarily the amount of time `Read()` is allowed to wait. I can't remember if I've found that `BeginRead()` or `ReadAsync()`behaves in a non-blocking manner. All I remember is a lot of swear words when I last got into a mess like this. I'm pretty sure the actual answer involves something like, "If you use the `Socket` class you can configure this, but nothing higher-level does it for you." That gets real ugly real fast. The easiest solution is to use a higher-level class like `HttpClient` or `WebClient` when you can. Writing these kinds of network loops is tedious, and if you don't have a reason to do it you really shouldn't. Yes, that's what someone else said in fewer words. Now you have some insight into why.
&gt; My peers tell me I need to get out of C#. There is no future in it. I'll never find a job and companies are using newer tech. **ASP.NET Core is newer tech.** This is the dumbest thing I have heard. Sounds like they drinking the cool-aid for hot new languages and tools. ASP.NET Core and stuff like Blayzor is living proof that C#/Microsoft is still trail blazing and its definitely going places. TypeScript is legit too and in heavy active development. Also its not like its hard to disprove them. Theres so many jobs out there right now. Go find yourself a higher paying C# job elsewhere and then on your last day say "Welp see ya! Im off to my new job writing code in futureless language!" In all seriousness it sounds like they are going to end up holding you back.
It's not though, we already have the ability to compile multiple languages to wasm. Performance is already way ahead of us and we've just begun. Runtimes can be standardized and cached as they have before, and other runtimes will be created. Everyone will be free to use their existing languages and compile to wasm sp the buying is minimal. VMs running in the browser are crazy powerful, it's just nice that this time we are doing it on open standards instead if flash/java/silverlight.
Honestly I wouldn't go in with any expectations. Pretty much anything can happen when you turn up. Companies/people/processes etc. all vary and combine infinitely. Just focus on you and how you approach and deal with things. Be inquisitive, ask questions, use google, avoid rabbit holes, recognise bad habits, don't be afraid to fail, talk to the actual users and get on well with the business analysts. Pair program if you can. There's lots of things really. At my first company the CEO used to sit down with the lead dev + sales guys + head of engineering and smoke weed in the afternoons. There wasn't any real mentoring and I was pretty much dropped in at the deep end. I got up to speed pretty quickly through reading lots of code and making sure I understood how things fitted together. I've always done lots of reading to learn stuff generally. I made myself hugely useful by talking to the customers and understanding things from their perspective. Since then things like the following have happened: * Arrived at a company which hadn't organised a computer for me and I got to desk share (for computer purposes) with someone for 6 weeks. * The induction process at one (multi billion £ turnover) company included their check-in procedure that was pure madness. It was literally a document that listed all the steps you had to go through to perform a single check-in. It was a minimum of a 45 minute process (I kid you not). We coined it 'the chicken dance' - lots of flapping and not actually achieving much. * Turned up at another to find the previous occupier of my desk had been arrested for child pornography and somehow neither HR nor the police had emptied his desk drawers, which included several unknown CDs etc. I swiftly got HR to remove those for me! * Not quite an 'arrival' story but a friend of mine ended up working with an ETA terrorist who had been on the run for years after killing a policeman and plotting to kill the King of Spain (he was eventually caught and has gone to prison for a very long time). It's a weird world. Good luck and have fun! &amp;#x200B;
Don't listen to this guy. Use httpclient
Thanks. Yeah Rx can be tough to swallow. Don't know, never used Hangfire myself but heard of them. 
Check it out if you haven't already. They have a great getting started page. 
Absolutely will
&gt; Also if you want we can drop the word "depreciated" and use something like "sidelined". "Deprecated" has a further meaning beyond just not being developed further. It also means "we're going to remove all support for this soon, so migrate away from it." WinForms is not deprecated. It's mature. The words I used were "stable and mature", which have the correct meaning for this situation. Active development has come to an end because *there's nothing left to do*. And if you think that the alternatives to WinForms are easier to learn and read, then you've not lurked on this subreddit long enough to see the myriad questions from people that have *litle-to-no trouble* grokking WinForms, but then try out WPF and have all sorts of trouble wrapping their minds around it. It took me *years* to "get it", and it didn't all fully sink in until I had a project to use it on. WinForms is much simpler and easier to learn than the alternatives. You're just looking at its alternatives through rose-colored experience glasses. You'd also have trouble finding a better performing UI layer for Windows. WPF/UWP are slow by comparison, since they're doing all sorts of other behind-the-scenes trickery to work the way they do. Microsoft has ironed out most of the problem spots in them, but they're still a *much* heavier abstraction layer than WinForms. WinForms is pretty damned close to its Win32 underpinnings. And as for being "stuck" with things that "could be better"... Having WinForms didn't preclude WPF, did it? You can use both. You can even use both *in the same app*. And with a bit of virtual glue, they can coexist *in the same window*. They're not mutually exclusive. You act like it's some kind of exclusive choice. It's not. It's a component. A tool. Don't tell people not to learn how to use a hammer just because they have a screwdriver available to them. They should learn to use both. And just as a side note: cloud services are not a replacement for a desktop UI. Azure is not an alternative to WinForms. And integration with Azure services is quite possible with WinForms. There are even drop-in components for it.
Well is it not also a question of where I want inefficiencies to lay? reflection now or later? I personally would incur the cost now to enjoy higher efficiency later. The code I have is more incorrect that I realized, when I call isValid(value) with a valid value it was returning false, so I then tried value.ToArray() and passed that in with a count of 13 elements which also returned false.Any clue why? I am reading more of the documents now to figure it out. but in the mean time I made this to import the data from the attribute and use it. private void SetNameOfReport(ReadOnlyMemory&lt;byte&gt; value) =&gt; (from prop in Properties.Where(x =&gt; x.Name == nameof(_NameOfReport)) let Range = prop.GetCustomAttributes&lt;RangeAttribute&gt;(false).Select(x =&gt; new { Range = Enumerable.Range(int.Parse(x.Minimum.ToString()), int.Parse(x.Maximum.ToString()))).First().Range where Range.Contains(value.Length) select _NameOfReport = value).First(); 
You'll not go wrong using either.
There is the switch pattern matching on type syntax: Switch(value) { case int i: break; case string s: break; case CustomerObject co: break; }
I'm curious, why don't you just use ILMerge?
i think first version is the only one that works. If statup is async function you might be able to use await Task.WhenAll(tasks). 
I keep my head pretty close to bald anyway lol.
Don't make properties throw exceptions.
You could also use a generic function, something like: MyFunction&lt;T&gt;(object o), which would then cast o into T if possible.
Sync Task.WaitAll(aTask, bTask, cTask); Async async Task.WhenAll(aTask, bTask, cTask); 
Heh. Interview questions are great. For instance, I can easily answer the OPs question, but your question would just get a blank look from me, and then you'd say 'sorry for wasting your time' (by which you would mean 'why did you waste my time?'). For starters, I don't understand the idea of time complexity for a data structure. I would understand if you asked me about the lookup or write functions part of it. Even then, without having a better idea of exactly how dictionaries get optimized by the compiler, my ham-handed explanation would have something to do with key length and key numbers.
Does it matter? In this case probably not. Yes you would "waste" a thread that's blocked in the sync version, but that's not important when talking about startup code. 
I'm going to post what I want to explain as one file, but I strongly suggest breaking this up into a helper class or classes. This is just a loose architecture I like for this approach. The first thing I want to point out is it's a console application: it's not as bad to occupy the main thread as it would be in a UI application. While you can use the Task API to schedule 3 separate web requests at the same time, there's still probably only 1 network card so it's not always true that trying to do 3 things at once will make it 3x as fast. Strongly consider doing one web request at a time, reporting the status as you go. If you don't want to do that, I think the best thing to do is to compose the three tasks into one method that waits on all of them and collects the results. I didn't get very sophisticated with the approach and I did some oversimplification. using System; using System.Linq; using System.Threading.Tasks; namespace AsyncStartup { class Program { static void Main(string[] args) { Console.WriteLine("Starting up..."); var startupTask = DoAllStuff(); try { startupTask.Wait(5000); } catch (TimeoutException) { Console.WriteLine("Startup did not complete as expected."); return; } Console.WriteLine("Started up! Here's what I got:"); foreach (var result in startupTask.Result) { if (result.Error != null) { Console.WriteLine($"Task '{result.Name}' threw an exception."); // Probably do something. } else { Console.WriteLine($"Task '{result.Name}' returned: '{result.Data}'."); } } } private static Task&lt;StartupResult[]&gt; DoAllStuff() { var tasks = new[] { DoStuff1(), DoStuff2(), DoStuff3() }; return Task.WhenAll(tasks); } private static async Task&lt;StartupResult&gt; DoStuff1() { try { Console.WriteLine("DoStuff1 doing stuff..."); await Task.Delay(1000); return new StartupResult() { Name = "DoStuff1", Data = "result from DoStuff1" }; } catch (Exception ex) { return new StartupResult() { Name = "DoStuff1", Error = ex }; } } private static async Task&lt;StartupResult&gt; DoStuff2() { try { Console.WriteLine("DoStuff2 doing stuff..."); await Task.Delay(2000); return new StartupResult() { Name = "DoStuff2", Data = "result from DoStuff2" }; } catch (Exception ex) { return new StartupResult() { Name = "DoStuff2", Error = ex }; } } private static async Task&lt;StartupResult&gt; DoStuff3() { try { Console.WriteLine("DoStuff3 doing stuff..."); await Task.Delay(3000); return new StartupResult() { Name = "DoStuff3", Data = "result from DoStuff3" }; } catch (Exception ex) { return new StartupResult() { Name = "DoStuff3", Error = ex }; } } } class StartupResult { public string Name { get; set; } public Exception Error { get; set; } public string Data { get; set; } } } Let's walk through it. The program simulates fetching 3 strings via 3 tasks that take some time and are done asynchronously. I feel like the best way to do that is defining a class like `StartupResult` to represent the result of each task, and say that we want to wait for a `Task&lt;StartupResult[]&gt;` to finish in our main script. I'll explain a little bit more about why I don't just use the `Task.Exception` property later, but the spoiler answer is, "This makes it easier to pick out WHICH task threw an exception or defer handling it until later." So the Main() function calls the function without awaiting or using `Wait()` or `Result` immediately. I want to do other things. Namely, I hate making a `Wait()` call without a timeout, and you can't set a timeout with `Result`. So I grab it, then call `Wait()` and handle the timeout case. It won't happen in this example, but I don't think you should *ever* do this without a timeout in place. So let's have a peek at what `DoAllStuff()` actually does before we see what happens to its result. All it does is grab the `Task&lt;StartupResult&gt;` return values from the 3 startup methods, stash them in an array, and return a `Task.WhenAll()` result from them. That means I'm shipping back to `Main` a promise that at some point there's going to be an array of `StartupResult` objects. Let's have a look at one of those three methods, they're copy/paste clones. I think `DoStuff1()` is a good pattern for composability. The spot where the `Task.Delay()` is could be any kind of async method. If it completes, we populate a `StartupResult` without its `Error` property set. If it fails, it's going to throw, which means we return a `StartupResult` with the `Error` property set. As we bubble up, that makes more sense instead of throwing. So OK, moving back up the call chain into `DoAllStuff()`... imagine how this works if at least one of the three methods threw an exception. `Task.WhenAll()` will catch and propagate those exceptions, but you'll have to unravel an `AggregateException` to get there, and that means you need to do a little more work. I don't like dealing with that. So instead... I made the contract that the `DoStuffX()` methods SHOULD NOT throw exceptions. If something goes wrong, they put the exception in the `StartupResult` object. That means that `DoAllStuff()` should also never throw exceptions. If any of the tasks had a problem, their corresponding result object will reflect it. So stepping back up the call chain into Main again, that's why I grab the `Result` property, confident it won't throw. It should be an array of `StartupResult`, so I loop over each one, decide if it was good or bad, and respond appropriately. I do think in more recent .NET Core implementations you can make `Main` async void and use await, but I'm not sure it buys a lot of savings in terms of complexity if you want to support timeout. 
Oh, no, I didn't expect everybody to know the answer, but how the question is answered is also very revealing. Short answer: O(n log n). Dictionary uses a hash table, which is O(n) to insert n items, but where there are collisions you have to traverse a list to find the insert point. That's O(n^2). On average it's O(n log n)
Something like #3 would be better, but you need to await on the Task.WhenAll(...) and so the startup function needs to be async. Either that or remove the other awaits and do a blocking Task.WhenAll(...).Wait(); &amp;#x200B; You definitely don't need any [Task.Run](https://Task.Run)() calls in your code, since you have actual async API's you are calling. [Task.Run](https://Task.Run)(...) is useful when you have some synchronous code you want to throw to a background thread so it will run in parallel. 
What are you planning to study?
Ok, so, a dictionary can be different types. The collision statement only makes sense to me if there is string comparison going on. If the dictionary is pointers, or ints, I'm not following the traverse a list part. I guess I have to go read a data structure article now.
What is the difference? The async Task.WhenAll and Task.WaitAll? I am using await Task.WhenAll();
WaitAll blocks the current thread. Same as if you called `myTask.Wait()` or `myTask.Result` on each task in turn. await WhenAll releases the current thread to do other stuff while waiting for the tasks to complete. 
Which await should I remove?
I’ve just been dipping my toe into Rx the past few weeks. To be more specific I’ve been trying to getting ReactiveUI working with a legacy winforms app. Fun times as there’s not a lot of documentation out there for this, especially in dealing with collections. Looking forward to checking the content provided OP and hopefully I’ll be able to deepen my knowledge that bit more. Thanks!
A dictionary can contain different types, but it uses key hashing to figure out where to store things
The correct output is: **100** **1000** To be **1001000** as you pointed out the Console.WriteLine shoud be replace with Console.Write &amp;#x200B; &amp;#x200B;
Is it a large list that wont update after the page is initialized? If so, pppulate on construction of the view. If it's a smaller, dynamic list. Populate in the drop down open event.
Click the form window in the designer view. In the properties panel where you normally set stuff like text or font size, switch to events (a lightning bolt icon). Double-click into the empty text box for the 'Load' event. Call your custom method from the generated event handler that shows up.
It is the former and it worked perfectly, thank you!
Remove the 3 awaits after Task.WhenAll(task1, task2, task3);, provided you add the Wait call like Task.WhenAll(task1, task2, task3).Wait() since the Tasks should be Completed after that.
r/programmerbuddies
Well thanks. I (sort of) learned a lot today: [https://docs.microsoft.com/en-us/previous-versions/ms379571(v=vs.80)#the-systemcollectionshashtable-class](https://docs.microsoft.com/en-us/previous-versions/ms379571(v=vs.80)#the-systemcollectionshashtable-class) (in case anybody else wants to refresh on this stuff) I didn't realize dictionaries just made a list when they had a collision, so that's good to know. Glad I didn't have to learn it while in the midst of a cold sweat at an interview :)
If you get really curious the source code is available online. https://referencesource.microsoft.com/#mscorlib/system/collections/generic/dictionary.cs
When should I put try catch? I think it's a lot of change in structure I have done right now in Version 3. When an exception occur, is it possible for me to just do &amp;#x200B; catch(exception e){ Console.Writeline(e.message) } ? &amp;#x200B; And it will continue on the next loop?
Are you using a database? Store the Point in the db as binary then when you want to access the Point, select it as text and you will get the binary representation of the Point like you want. 
i dont know if i can take a programming article seriously if theres a picture of minions with it. 
Thanks! :)
(ง’̀-‘́) 12 op 
If you know the basics and know stackoverflow the remainder is only practice. Do code reviews and let people review your code. In half a year you are on another level.
right, any idea on some practical things I could practice?
This is dangerous depending on the context! Never wait tasks. Async is a virus that should be transmitted up to your entry point.
If you are looping through all the members of the string array, why are you breaking after the first result doesn't match? I think you should use "break" when it is found (which exits the for), and "continue" in the else, so it goes to the next one rather than end the for statement. 
This is my rough solution (bodge it till it works) Have the names stored in lower case, then itr through query string making each letter into their lower case if it isn’t already, then search the array/database/you name it. Is this it? If I’m missing something please say
THANK!! it works. But now it writes my message several times "you'r seach was not fund" "you'r seach was not fund" "you'r seach was not fund" "you'r seach was not fund" Like that 
I don't see why it wouldn't work with a load balancer, they are planning azure signalr backplane support for preview 4, and you could build your own with a redis backplane if you really wanted to. If you aren't publishing server events to clients then you likely don't even need the backplane to use a load balancer. Re-connection happens automatically to the same server, and they have a backlog item to handle it to a different server.
Transfer the `async` keyword up to your main method. Never use `.Result` or `.Wait()`. You can use `await Task.WhenAll()` or `await Task.WhenAny()` to combine tasks and let them run in paralell. If you need timeouts or other cancellation use `CancellationTokens` retrieved from a `CancellationTokenSource`. Inject the cancellation tokes up to your db calls. Basically all async io operations and all `Task` operations support cancellation via tokens.
It's a school project so i'm not going to answer the question directly Read through that loop and exactly what it's doing; * When is it breaking? * What condition must be true for that else block to be called? * What happens if i iterate through the entire array. also perhaps try writing out the logic on it's own, perhaps as a separate function, or as "pseudo code" for example(you would do this in your native language obviously) for each name in array if name is input print true break else print false break The answer is incredibly simple and you'll be a little embarrassed with yourself when you spot it :).
Well, yea. Its going to do whatever is in that else statement each time it doesn't find a match... 
If I change the last break to continue, I works but it writes out my message "your search was not fund" 5 times Thanks
Oh i get it :) i have 5 names saved i my array. How do i get it to only write my massage once 
Now we have the questions: * "What conditions must be met for that line to be printed?" * "Why does the loop continue after finding a match?" * "Why do we print on every iteration of the loop?"
This isn‘t something you learn from books. You typically learn by solving bugs. I would really encourage TDD/BDD. Accordingly learn testing frameworks (NUnit/XUnit) and test helper frameworks (Moq,AutoFixture). For user interaction get into asp.net core MVC which I assume will be the standard for web and desktop development with netCore 3.0. Get to know logging frameworks as Serilog, DependencyInjection as Microsoft.DependencyInjection, mapping frameworks as AutoMapper and SQL and NonSQL database techniques (Maybe MongoDb, EventStore). Get into interprocess communication via HTTP/REST, messaging (e.g. RabbitMQ) and serialization techniques(Newtonsoft.Json, protobuf, XML) Read what was introduced in C#4/5/6/7/8 and why it was introduced. But these are all words and without application they don‘t mean anything. Learning by doing is much more reasonable. Try to solve a problem and if it‘s something complex think about whether there might be already a framework doing it hundred times better than you ever could. And most important: read other peoples code and let other people read your code.
I don't know man, i've been trying 4 hours. I'm struggling
You should check out [DynamicData](https://github.com/RolandPheasant/DynamicData) for collections if you haven't already. ReactiveUI already depends on it so you already have it available. Also, the ["You, I, and ReactiveUI" book](https://kent-boogaart.com/you-i-and-reactiveui/) is pretty good, as well as the accompanying sample project.
Thanks for the heads up. I’ll look into these.
Nobody should be putting tricks like that in interview questions either. Serious red flag that you have smart arse it manager / lead developer flexing in the company. &amp;#x200B; &amp;#x200B;
Questions like this highlight that there is a very high chance that you really dont want to work for this company. So there is an upside.
&gt; C#7.x). Never us Ok, after the startup is done, then it launch a timer in a class called data poller. This poller has a function bounded to timer.elapsed += DoStuff1; for example. This poller kind of keep calling on the DoAllStuff over and over again every minutes. Where should the task return to? To the data poller function that is bounded to the timer.elapsed?
&gt; Never use .Result or .Wait(). Whta do I use if I should never use result? Because I can't assign det data if I don't call await or use result?
And async stuff
Would you please take a look at that XSLT generating excel spreadsheets. It should be a small change.
Lets break down the code for (int i = 0; i &lt; rygga.Length; i++) { if (search.ToLower() == rygga[i].ToLower()) { Console.WriteLine($"\tDin sökning fanns i ryggsäcken: {rygga[i]}"); break; } else { Console.WriteLine("din sökning fanns inte i ryggsäcken"); break; } } This loop will; 1. If the value is equal, break the loop and print the found message. 2. Otherwise, Break the loop and print the not found message. Changing that second break to a continue for (int i = 0; i &lt; rygga.Length; i++) { if (search.ToLower() == rygga[i].ToLower()) { Console.WriteLine($"\tDin sökning fanns i ryggsäcken: {rygga[i]}"); break; } else { Console.WriteLine("din sökning fanns inte i ryggsäcken"); continue; // will also work to just remove this line } } This loop will; 1. If the value is equal, break the loop and print the found message. 2. Otherwise, print the not found message **and then go to the next iteration** Therefore, maybe the not found message should be outside of the loop for (int i = 0; i &lt; rygga.Length; i++) { if (search.ToLower() == rygga[i].ToLower()) { Console.WriteLine($"\tDin sökning fanns i ryggsäcken: {rygga[i]}"); break; } } // Need some way to tell if a value has been found. Console.WriteLine("din sökning fanns inte i ryggsäcken"); Now the not found message is **outside** the loop and we just need some mechanism to know if a value was found. 
It is hard for me to understand what is being said in the text of the program, but I think what you want to do is set a flag if the search was found. Then check the flag after the loop and output "din sökning fanns inte i ryggsäcken" if the text wasn't found. Remove the else statement. for (int i = 0; i &lt; rygga.Length; i++) { if (search.ToLower() == rygga[i].ToLower()) { Console.WriteLine($"\tDin sökning fanns i ryggsäcken: {rygga[i]}"); success = true; break; } } if(!success) Console.WriteLine("din sökning fanns inte i ryggsäcken");
WebClient is legacy and deprecated. Per the documentation: "We don't recommend that you use the WebClient class for new development. Instead, use the System.Net.Http.HttpClient class."
 tl;dr A blog about how you can use some clever caching to speed up your every day integration tests with dacpacs
What you are seeing is the result of an append operation. Instead, the ListBox text items need to be inserted into the file in the appropriate places. One option to achieve this is to transform the input CSV file content into into a DataTable. At that point, the specific columns and rows can be accessed easily and the Listbox text items can be inserted right where you want them. Then dump the DataTable to a CSV file.
Manipulation with classes and objects (solving tasks together) 
Use a Boolean variable set to false before the for statement. Set it true if a match is found, before the break. After the for, only show the message if the variable is still false.
I recommend using string.Equals(x,y,StringComparison.OrdinalIgnoreCase).
It used hardware intrinsics. Modern CPUs almost all have extensive instruction sets available in addition to x86 and amd64. SSE, SSE2,... but almost all compilers default to the "vanilla" ones, because there's a .001% chance that the CPU is so old it's amd64 but does have SSE for example. .net hardware intrinsics allow you to safely use extension instruction sets to boost performance on the 99.999% of CPUs.
I don't really like to use what isn't mine as it's usually filled with bloatware which I'll never actually use. And normally comes with stupid watermarks everywhere. I always look into third party tools like this and they end up making my executable two times larger than its original size for something I could do in a few lines of code so I end up just making everything my self haha. Not to say ILMerge is filled with shit LOL or that it's bad, as its probably is perfect for what people want.
Hi, intermediate ASP dev here, have spent a lot of time mapping Entity classes to DTO's recently, does automapper do that? What do you use it mostly for?
Could someone walk me through the Task.Run(() =&gt; { OnStart(); }); part, particularly the () =&gt; { OnStart(); }. I understand this is a lambda expression, but whenever I work with lambdas they never look that obtuse. I haven't really figured out how to look this up as I don't really know how to ask what I'm looking for. Any blog links, etc. would be appreciated. 
Thank you for all your help. I just can't get it to work, there is a problem whatever i try. I think im going to just turn it in iv made everything required of me, this is only extra, a small bug
&gt; C# .NET Kind of redundant there 😉
Speaking of interop, that's one thing that drives me crazy about online resources. I spend a decent amount of time on pinvoke.net and people there write like we're still on C#5
Yeah...it's hard, it seems to me like they *all* do it, both good and bad companies. I've never been in charge of interviews but I'd like to think I'd come up with less dumb questions.
&gt;It should be a small change. If I had a dime for each time I've heard that little lie in my life, I'd be retired already.
There's also vb .net which you will still find at major companies who didn't want to start learning C# because it needs ; .... so there's that.
My first real job was with C#. It's a dream to work with. I don't understand the hate at all. And msdn documentation is excellent not to mention VS as an IDE is awesome (though getting real f'ing slow). Junior dev for 1.5 years and then jumping with a 50% salary bump now. With .NET core around the corner of popularization it's an amazing time to jump in.
Overloads are compile time and on static type. Maybe you want runtime dispatch; aka virtual functions; but can't use them for some reason?
J2EE has done almost transparent HA and load balancing for ages.
AutoMapper maps according to mapping rules, delegates to custom mappers or - as the name proposes - supports automapping of similarly named properties. It also allows to map any enumerable implementation into another one. I am not a big fan of automapper but I can understand why people use it.
You can use `await` and that‘s the proper way to do. You could also use `.ContinueWith()` which is the `bind` of the `Task`-monad (google 'FAIC monad' and read a nice series of blog entries if you are into it) but that‘s rather inconvenient from code and exception handling point of view. Concise: Use: `await`, `Task.WhenAll()`, `Task.WhenAny() ` Use with care: `.ContinueWith()` Don’t use: `.Result`, `.Wait()`
Yes, transparent load balancing and HA is trivial **if you don't have session state**. Razor components have session state, which is the problem. That's actually what makes this particularly shitty because if you don't use session state then you can offer these services effectively for free.
DoStuff1 should be approximately specified as `private static async void DoStuff1(object sender, ElapsedArgs args)`. Events are the only exception where `async void` is tolerated. Then call await in the timer.
I'm not a kid, I'm quite possibly older than you, and I've used JavaScript when it **was** trash and I've used it today when it's not. I've also been around enough to see that webasm has a bunch of problems that the spec doesn't solve, not least of which is that the people writing front end libraries for DOM manipulation **aren't doing it in webasm**. The biggest problem with webasm though is that if you want to meet accessibility requirements you're going to have to use HTML as the output, which basically negates every single advantage that webasm can offer. Now it's certainly possible that the issues with webasm can be ironed out, but it's going to take years, and if you want to work between now and then, **you'd better learn some fucking JavaScript.**
If you have session state you're stuck with a particular server. Being stuck with a particular server makes all sorts of things more painful to implement, because you can't touch that server without affecting the service. You could build this to work, but this one doesn't yet. And that's the whole point. It's possible that in ten years you won't need to know JavaScript, maybe sooner if you only do greenfields work, but even if that's true, you've got to eat today. Saying that you don't need JavaScript because webasm *might* replace it, and that's a big might, someday, is insane. 
Its not really session state though, its component state. If your component can be rebuilt from the route and url query parameters, then you aren't stuck with a particular server. &gt; Saying that you don't need JavaScript because webasm might replace it, and that's a big might, someday, is insane. I think you are responding to the wrong person. I only claimed there was going to be a production ready variant of server side Blazor (Razor Components) later this year. JS is still going to be necessary. Razor Components only wraps up UI binding and events, there are still a lot of other things you need to do with a browser for a successful app (e.g. uploading files, accessing browser storage, using webgl libraries, 3rd party libraries, etc...). I see Razor Components (or **maybe** Blazor in the future) as a replacement for Angular or React, *not* as a replacement for JS.
Please reformat your code, it is not easy to look at. four spaces doesn't work by default unless your in the old mode. You can Highlight it and press the code block button to format it fairly easily. &amp;#x200B; Also, check you make sure you set the Context Active every iteration of your rendering loop. &amp;#x200B;
&gt; To me, avoiding JS, isn't enough to sell webasm for most uses. Maybe not today. If they add a mechanism for DOM access or parallel WASM, then it might take off. &gt; I love C#, but there are things that JS is just fundamentally better at, at least at this point. Being built into and integrated with all major browsers? That's the only real advantage I see after years of using both.
I did this over the last couple of days, the following worked for me; Install the required packages: `dotnet add package Microsoft.EntityFrameworkCore.SqlServer.NetTopologySuite NetTopologySuite` Specify use NetTopologySuite in `ConfigureServices` ```cs services.AddDbContext&lt;ParkWarriorContext&gt;(options =&gt; options.UseSqlServer(Configuration.GetConnectionString("someDb"), x =&gt; x.UseNetTopologySuite()) ); ``` Add a property with type point on whichever entity class you need it ```cs using NetTopologySuite.Geometries; public class SomeLocation { public Point Point { get; set; } } ``` And then when you're adding/updating it in the database ```cs // casting to double is required as that's what the Point constructor takes // but there are constructors available too var point = new Point((double) longitude, (double) latitude) { SRID = 4326 }; ``` That's all there is to it. 
You got a typo (async instead of await).
Fear not, this is first party. ILMerge is part of the .Net family of tools and designed to specifically do what you want. I wholly recommend you [check it out](https://github.com/dotnet/ILMerge).
&gt; What would we do? &gt; int outDummy; &gt; if(m_myQueue.TryDequeue(out outDummy)) Or just: &gt; if (m_myQueue.TryDequeue(out var outDummy)) (And I just puked a little in my mouth writing the `m_` prefix. Dat shits nasty.)
Discards came at the same time as out var to be honest. Ok the m_ prefix is a preference :) 
&gt; the m_ prefix is a preference No, it's an abomination.
No, JavaScript is an abomination :p 
JavaScript is the bigger brother of the `m_` prefix.
WAT :) https://www.destroyallsoftware.com/talks/wat
Heh, I remember seeing this one! :D
You might as well do `MyFunction&lt;T&gt;(T value)` then. Which would help you for the case of `Func&lt;T, Result&gt;` for any T, but not for the case of `Func&lt;T,U,Result&gt;` with 2 input parameters.
Yep. this looks like another [X Y Problem](http://xyproblem.info/). Why do you want to do that in the first place?
I asked the "Related question" not because I needed to know, but because if OP understood the limits of "declare a method that takes any kind of value as parameter" then they will be a good way towards understanding the limits of "declare a method that takes a function over any kind of value as parameter". 
Yeah, I wrote an article about the reasons javascript sucks http://www.devsanon.com/rants/stupid-javascript/
The Math class has static methods that fit the bill: https://docs.microsoft.com/en-us/dotnet/api/system.math?view=netframework-4.7.2 For example, 2^3 would be `Math.Pow(2, 3)`. Also, it's probably worth going through the docs for each data type.
The easiest way: &amp;#x200B; Create a function, with a function parameter: public void Foo(Func&lt;int&gt; funcReturnsInt) { int ret = funcReturnsInt() } &amp;#x200B; And call it like: private int Whatever() { return 1; } //... Foo(Whatever) Or if you need short lived functions, you can use Lambda expressions: Foo(() =&gt; 1) &amp;#x200B; If the argument method should have a parameter: &amp;#x200B; public void Foo(Func&lt;string, int&gt; intParser) { int x = intParser("123"); } &amp;#x200B; And to call it: private int Whatever(string numStr) { return int.Parse(numStr); } //... Foo(Whatever) &amp;#x200B; Or with lambda: &amp;#x200B; Foo(numStr =&gt; int.Parse(numStr) &amp;#x200B;
This is how I use solve "any function" kind of input, but that's about it. static void Main() { var nums = new List&lt;int&gt;(); var time = Measure.Method(() =&gt; { for(int i = 0; i &lt; 1e5; i++) nums.Add(i * i); // Doing lots of things here SomeOtherMethodCall(); }); Console.WriteLine(time); } static class Measure { public static TimeSpan Method(Action method) { var sw = Stopwatch.StartNew(); method(); sw.Stop(); return sw.Elapsed; } } &amp;#x200B;
*Hey just noticed..* It's your **11th Cakeday** prophet001! ^(hug)
You're using one kind of function, and that is `Action` - a function with no inputs and no output. This is fine, since you can [capture vars](http://geekswithblogs.net/rajeevr/archive/2012/02/26/closures-and-captured-variable.aspx) from the surrounding code. It's not what OP asked, but it might be what they need.
&gt; I know that I should avoid using async void You should lookup and understand **why**, then you will know **when not**.
followed by `iMyInt`, `cMyString`, `lMyBoolean`, `liMyLocalInt` and `loMyLocalObject`
Event handlers are about the only place where async void is warranted, since you cannot change the return type of the method.
I'm a bit confused of how to handle exceptions, since sometime I notice that my tasks doesn't return any exception, and it just seem that it's stucked. Is there any properly way I should use try catch for exceptions? If so, when?
Provide a concrete example. Async void functions won't bubble up the exception so your best bet is to have a try-catch inside the function. 
```async void``` is fine for events. The event signature is a hang over from early .NET, so you have no choice but to use ```async void```. It's considered bad practice because any exceptions get "lost". [Here's an old but gold article about it](https://msdn.microsoft.com/en-us/magazine/jj991977.aspx) 
I can't think of any good usecases for this 
Removing from a concurrent dictionary but not caring about the value?
&gt; It's not what OP asked, but it might be what they need. That's what I was thinking. He probably just needs to use Action and learn lambda, but the way he asked screams "how to make the compiler allow me to do whatever, I'll deal with the technical debt later... or never. Most likely never."
maybe i'm just not understanding the article, but i don't see how i would ever use this
Being able to perform tasks in C# isn't enough, it has to actually be better than JavaScript for some purpose, and I just don't see it. DOM manipulation will still be slow, it will still be single threaded and it will still be painful. If you write web pages without a DOM for the screen reader to inspect, accessibility becomes a nightmare and you'll get sued. 
Removing from a concurrent dictionary (which uses the try pattern, like TryRemove(key out T value) without caring about the value
Why not just `this.` instead of `m_`? Like `m_`, you see immediately that it's a member variable, *and* the compiler makes sure it's *really* a member variable...
OMG seeing this everywhere? No....... That is even worse, much more noise in the code
I've found them most useful in lambda expressions that don't make use of the parameter. For example: SomeStringList.Select(_ =&gt; "test") 
What's the diff between .Select(x =&gt; "test")
Makes sense!
You'd only use it if you needed the lack of ambiguity. In practice, with proper and consistent styling, I never get confused about whether a variable is a member variable
try catch in the async void function? But should I return anything in the Task for it to catch the exception? Or will it automatically let's say return an error if the httpClient times out?
I'm a .NET developer and I agree, while I am able to learn the syntax of a language pretty fast, I don't think I would bring as much value as a Java Senior dev. The issue is that you would spend more time on ramping up on frameworks than doing actual valuable work. The more you work with a technology, the harder it is to change (and bring value to your customer). But for personal projects, it's really easy to switch languages, though I'm not sure why I would do that, C# masterrace.
There can be multiple discards. This can be useful when deconstructing tuples. var (foo, _, _, bar, _) = makeHugeTuple();
You can use multiple discards, for example when deconstructing tuples: var (foo, _, _, bar, _) = makeHugeTuple ();
umm, var?
Async with Task and Task&lt;T&gt; will return an AgregateException containing all the exceptions that have been thrown. Async void will return nothing.
There might not be a referer - they might just have keyed / pasted the URL into the address bar. &amp;#x200B;
Division is unique in that it is one symbol for 2 different operations. There is integer division, where the operation stops at the integer level and gives a remainder. And there is floating point division which gives you a decimal number. C# differentiates between the 2 using the types of the arguments. If you pass in 2 integers, you get integer division;however if you pass any number that is not an integer then you'll get floating point division. Exemple: int a = 5; int b = 2; a/b // 2 Now if you do int a = 5; float b = 2; a/b // 2.5 In that second case, a is implicitly converted to float.
&gt; Being able to perform tasks in C# isn't enough, it has to actually be better than JavaScript for some purpose, and I just don't see it. These are just my personal opinion after having used both, I'm not claiming everyone sees them the same: * Parallel Support (assuming WASM gets support or you use Razor Components) * Better abstractions for large systems (reified generics, built-in DI, required namespacing, interfaces, powerful refactoring tools) * Integration with native code (and other CLR languages) * Better web server and code performance (Kestrel, value types, stack allocations, SIMD support, tiered compilation, concurrent garbage collector, zero copy slicing) * Better globalization and localization features (cultures and string formatting, date, time, and timezone handling, etc...)
Your example isn't actually using '\_' as a discard. '\_' is only treated as a discard in these contexts: * Tuple and object deconstruction. * Pattern matching with is and switch. * Calls to methods with out parameters. * A standalone \_ when no \_ is in scope. [Source](https://docs.microsoft.com/en-us/dotnet/csharp/discards). It'd be nice if it was though to avoid needing to do (on the rare occasion) `(_, __) =&gt; { ... }` when wanting to ignore more than one parameter.
Ahh, you are correct. I knew it *used* to work that way, but I thought it was updated recently to make them actually discards. I just did a quick test, and indeed, they are variables, not discards. Thank you for correcting me.
Yeah I only caught onto that fact recently too since I've just started doing a bunch of Rx and using '\_' is pretty common.
referer is designed for analytics use only and should not be used for redirection. It could easily be used as an attack vector for malicious phishing sites to link to your site, knowing that the victim will be redircted back to the malicious site and verifying their (fake) authenticity. If you want to use redirection, it should be relative paths only (so it can't be redirected offsite, typically passed via redirectUrl GET parameter). If you absolutely need to redirect offsite, the destination domain should be referenced from within the application logic. For example, you could pass in an "redirectOrigin" GET parameter or "originSiteId" cookie (integers) that refers to a database lookup table of known offsite domains. &amp;#x200B; See this [report from OASP 2013 for details](https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards).
Ok, so how do I for example catch this Task aggregate exception and like writing to log / console? :) Could you provide an example? A async Task calling on another async task?
What alternative convention to you propose to make member variable and local variable access distinguishable at a glance?
I don't use any. That's an unnecessary detail. If this becomes relevant, then likely your class is too large already.
Strong disagree here. Being able to quickly tell the difference between code that permanently changes the state of it's object, vs. manipulating a few locals that will soon go out of scope is far from an "unnecessary detail".
It seems more like you went out of your way to find quirks of Javascript that are already well-known and have been widely talked about for years across the internet. You essentially explained a joke to everyone an hour after someone else told it.
Sure, we agree here. I stick to a more functional style and strongly avoid mutable state in the first place.
If you are in need of such distinguishment, which is very unlikely, use this.objectName.
It's extremely useful: the presence of m_ allows me to quickly spot methods that are impure (rely on object state), or stateful (modify object state). "this.blah" does the same thing (though only if you use it 100% consistently!), but takes longer to type.
`[JsonExtensionData]IDictionary&lt;string, JToken&gt; AdditionalData { get; set; }` add this to your model. Every additional data what isn't in the model are going to this Dictionary.
&gt; What alternative convention A single underscore. That's how virtually every MS sample is written, and also how ReSharper handles initializing injected vars: private readonly Config _config; public class MyClass(Config config) { _config = config; }
The only exception to using async void is in event handlers. In terms of handling exceptions, you'll want to use a try/catch inside this method around your handler code, and handle the exception there. You may want to simply log and ignore the exception. If it's a fatal exception, you may need to send it to something which can do something extra with it (e.g. perhaps you want to stop the timer). The gist is; async void is generally bad, because exceptions can't be handled by the caller (as they can with normal void methods, or awaitable methods). Also, your code won't work if try to await `_handler.DoALotOfStuffLikeGetDataEtc()`; You can't use async/await inside a `lock` block, as the lock is Thread dependant. Look into using [`SemaphoreSlim`](https://docs.microsoft.com/en-us/dotnet/api/system.threading.semaphoreslim) instead.
[Task.Run](https://Task.Run) is where it does the fire and forget in that current method. You would want to return the task that returns if you wanted to keep a handle on that task. Aka... if you want to know when it is done, wait for it to be done, cancel it, etc. If you don't return that task, you lose the ability to control/observe it.
I have no idea what the author of this code tried to achieve. There is an asynchronous lambda function, where the only asynchronous operation is waiting for 1.5 seconds - and that asynchronous code is fired off (Task.Run without doing anything with the result is basically what someone referred to as "fire and forget") in a synchronous method. At this point I would strongly recommend that you read up on the whole concept of async/await in C#, because it's clearly not used correctly here. Example reading: https://msdn.microsoft.com/en-us/magazine/jj991977.aspx (especially the "async all the way" part).
Putting stuff in the constructor in WinForms can cause the VS designer to flip out. You're better off putting it in the Form's Load event (usually called Form_Load).
iLoveYou
I'm alright with this too (though i've worked on codebases where this is reserved for method parameters). Just as long as there is some convention in use!
* Parallel support is largely irrelevant on the front end the DOM just isn't parallel, and you support it architecturally on the back end. * Most of this is either not applicable to dynamic languages, offered through type script or only applicable in projects JS doesn't fit. * You can call C code from node, you wouldn't want to call C from the front end, and CLR interop is largely pointless. * Most of this stuff doesn't even exist in Framework, or isn't applicable in the scenarios where node makes sense. * JS handles this just fine with the appropriate libraries. No one is suggesting JS is a fit for every problem, it's not, but the places it fits, it fits well.
I think he's trying to populate a collection (probably displayed in some kind of list control on a page or window) without holding up the UI thread. &amp;#x200B; As stated earlier, please read some articles on async/await and please try not to see this function in its current state as a solution to any kind of problem. &amp;#x200B; Here's what you should do with this function if you're currently studying programming: Save it somewhere and look back on it in a year and marvel at how far you've come. I'm serious. It's a great morale booster.
I think you've got an issue here: if (grantAidedPropertyAddress != null) { ADDRESS1 = grantAidedPropertyAddress.BuildingNumber + " " + grantAidedPropertyAddress.StreetName; ADDRESS2 = manualCorrespondenceAddress.Town; ADDRESS3 = manualCorrespondenceAddress.County; POSTCODE = manualCorrespondenceAddress.PostCode; } You're in this block because "manualCorrespondenceAddress" is null, but you're trying to use it. Copy/paste error, I guess. I don't think this is *that* bad. I can understand why you'd want to clean it up, though. You can call functions in a constructor (well, obviously, you are doing so); you can build small initialization helpers that accept "sp\_FindAddress\_Result" and "ManualAddress" types, for example, which would make this code shorter and more self-documenting. You can also combine assignments and tests into one expression, which would eliminate a lot of the nesting, just a list of "else if" clauses: sp_FindAddress_Result grantAidedPropertyAddress, applicantAddress; ... void Init(sp_FileAddress_Result Addr) { ADDRESS1 = Addr.BuildingNumber + " " + Addr.StreetName; ADDRESS2 = Addr.Town; ADDRESS3 = Addr.County; POSTCODE = Addr.PostCode; } ... else if ((grantAidedPropertyAddress = GrantsDAL.GrantAidedPropertyAddress(grant.DFG)) != null) { Init(grantAidedPropertyAddress); } else if ((applicantAddress = AddressDAL.GetAddress(person.AddressUprn)) != null) { Init(applicantAddress); } ... &amp;#x200B;
you can move the code but not really "Fix" it. as some point you have to have the giant if statement. With that said I would not have the constructor responsible for figuring things out. the constructor would take all the necessary parameters (or an address object) then you would create a factory to do the checking to figure out what values to pass to the constructor. It cleans things up and the constructor is then simple and the code to figure out the address is in a spot that can change without affecting all users of `Stakeholder`
&gt; though i've worked on codebases where this is reserved for method parameters Just as long as they don't PascalCase them
`i loVe m_e too`
The world could use more positivity. Good job!
Nice catch. Fair enough, I'll do that and at least it won't take up as much screen real estate. Thanks.
I don't know enough about factory pattern so I guess now is a good time to find out. Thanks.
Are you using git as source control? I have seen some projects use [git submodules](https://git-scm.com/book/en/v2/Git-Tools-Submodules) to include shared code at strategic locations within the projects that use it. The downside is that if other people change that shared code, it may affect the behavior of dependent code immediately. Continuous Integration and integration testing can will help there. But it may be more of a pain than it is worth. 
&gt; You may want to simply log and ignore the exception. If it's a fatal exception, you may need to send it to something which can do something extra with it (e.g. perhaps you want to stop the timer). Could you give me an example on a fatalexeption and how I can skip it? :) If I just console.writeline in the catch, is that the same as skipping? In this case, should the try catch be in the timerElapsedFunction or in the DoALotOfStuffLikeGetDataEtc? Or maybe both? I'm using a semphoreslim now. 
The biggest example I can think of is "I'm using `TryParse()` to validate an input, but I don't actually care about the parse result." This queue example was probably a bad one. Overall it's rare, as I think most APIs where this might happen have a non-returning form or eschew out variables, but it's nice to know you can explicitly state "I don't want to use this variable" instead of having to name it `unused` or some other convention. In short: it's a band-aid for people who didn't listen to Framework Design Guidelines' "AVOID out parameters."
In most contexts you can assume that .NET is being used as the framework and runtime but there are other runtimes/frameworks like Mono. Also, .NET can be ambiguous between netfx and netcore.
So essentially you want to store the "Task.Run(.." in a variable so you can control it?
I used “Access” Database to store data, I used the following code: private void button1_Click(object sender, EventArgs e) { OleDbConnection Con = new OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=|DataDirectory|student.accdb"); Con.Open(); try { OleDbCommand Com = new OleDbCommand("Insert into student(ID,first_name,last_name) values(@ID,@first_name,@last_name)", Con); Com.Parameters.AddWithValue("@ID", textBox1.Text); Com.Parameters.AddWithValue("@first_name", textBox2.Text); Com.Parameters.AddWithValue("@last_name", textBox3.Text); Com.ExecuteNonQuery(); studentBindingSource.EndEdit(); studentTableAdapter.Update(this.studentDataSet.student); MessageBox.Show("Registration successfull"); } catch (Exception ex) { MessageBox.Show(ex.Message); studentBindingSource.ResetBindings(false); } Con.Close(); } 
I do not know why data is not saved in the access table but I see in the DataGridView 
The only thing that comes to mind would be if you're dealing with someone else's library that was written poorly and you have not choice in the matter. You shouldn't write code that allows for this situation in the first place.
As I mentioned above, I'm not sure what you want to achieve. If you want an answer in vacuum: no, I would instead make the whole method async and drop the Task.Run "wrapper" altogether. But that might not be correct in your particular scenario.
Thanks for the explanation :D I've switched to webclient and it works... and I'm scared to touch it!
FYI, your Init(...) method is a great use case for a local function since it probably isn't useful outside of the calling function. Also, if the various Address classes don't implement a common interface or derive from a common Address class, you could use "dynamic" to save having multiple implementations since they all have the same property names and types.
If the individual address classes all inherit from the same interface (which provides the 3 address lines and postcode) you can do the ?? you're thinking about
Yes. In order to catch the Task exception you need to wait on it, either with await, or Task.Wait . Put that Task task = sometask; try { task.Wait() } catch (AgregateException e) { foreach(var ex in e.InnerException) Log(ex) }
I get the sense the people behind Pact and this .NET library have never heard of AutoFixture and freezing fixtures before. A lot of the patterns they created already exist in more general forms. Pact should be a plug-in to AutoFixture rather than a standalone library.
&gt;It's the de-facto standard for C# Don't the Microsoft's coding conventions recommend to use PascalCase for member variables?
You can remove that await in the loop and create a list o Tasks. Then in the end of the loop you can Task.WaitAll("list of tasks") &lt;&lt;I dont remember the signature of the method&gt;&gt; It will make all the tasks to run asynchronous instead if running one by one.
IMHO if this is required it should be enforced by constructor
the best use i've found for discard is for fire and forget async to suppress the CS4014 warning "Because the call is not awaited" &amp;#x200B; `_ =` [`Task.Run`](https://Task.Run)`(async () =&gt; await Call());` see: [https://stackoverflow.com/questions/22629951/suppressing-warning-cs4014-because-this-call-is-not-awaited-execution-of-the/22630057](https://stackoverflow.com/questions/22629951/suppressing-warning-cs4014-because-this-call-is-not-awaited-execution-of-the/22630057) &amp;#x200B;
DISCLAIMER: I didnt checked the semantic of the code
PascalCase for member properties, not private variables (fields). 
No, don't do this. This is very bad practice.
When have you used Akka.net to solve the problem 
Pact comes from Ruby world, and this library is just a .NET version. I know what you mean, though, given that now we have pretty nice libraries for integration testing (e.g. for [ASP.NET](https://ASP.NET) Core) it could be done probably even better now :).
So a library is written poorly if it gives you more information than your specific needs? 
Just gotta be aware of mutable shared data. It's easy to forget about with DI.
Yeah in the end, for most requests, it's better to use one of the things that does all the work for you. The lower-level ones like you were using are more useful for if you want to do something fancy, like trying to parse a text file as it arrives, dealing with files far too big to fit in memory, or holding the connection open to get more data later. Otherwise you end up doing a lot of buffer management with lots of potential for mistakes when you don't need to!
Yeah, overall I wish fire-and-forget async had some better syntax sugar. It's a real use case.
Is that code basically trying to identify if a number is prime or not?
No. A function is poorly written if it looks like that.
It should be, if Foo requires Bar contain a value to be a valid Foo. This isn't always the case, and we don't always consume libraries whose API we can control. You may be able to solve this by writing a wrapper for Foo that guarantees Bar is always set for the Foo wrapped by FooWrapper, but you also need to enforce use of FooWrapper, and it all falls apart if you ever need to actually support a situation where Foo has no Bar. A better solution probably pulls the creation of Foo() out to a separate method *or* lets the error in creating Foo be propagated all the way back up the stack, rather than initializing to a local outside a try-catch block that doesn't do anything useful with the error. Regardless, changing Foo to require Bar isn't always either practical or correct.
this - so often
Well, it's not pretty code, but it is simple to understand and it works (I assume...), so leaving it as is might not be a problem. If the various classes don't share an interface, making the code "prettier" probably entails adding complexity... I'd keep the simple but ugly solution.
But you do realize the library was not written for you specifically? You may be using the library without it being an exact 100% match for your use case. In the real world of large and complex systems, I personally feel that kind of attitude can quickly turn into a toxic environment. You are of course free to disagree, but let's all try to be a bit open minded and not judge everyone for every minor inconvenience, I say.
Or, what if the referrer is the same page?
What kind of object does it return when using tasks? Because my original method returns a GeneratedBuildingResult object. Thanks!
Well yes, and I maybe came down a little hard on this specific instance. That said, I think it's generally bad design decision to have a function that returns a value and has an out parameter, but if the return value is just a bool then it probably isn't quite so unclear. This isn't a matter of toxic attitudes and real world large and complex systems, this is often an indication that the function is trying to do too many things at once. Again, in this situation, returning a bool and having an out probably isn't such a big deal.
 BANK_SORT_CODE = string.Format("{0:########}", grant.ApplicantBankSortCode); BANK_ACCOUNT = grant.ApplicantBankAccountNumber; EMAIL_ADDRESS = person.EmailAddress; CODE = "GRT" + person.PersonID.ToString("00000"); NAME = person.Forename + " " + person.Surname; AddressLookup correspondenceAddress = grant.CorrespondenceAddressId != null ? GrantsDAL.CorrespondenceLookupAddress(grant.DFG) : null; if (correspondenceAddress != null) { ADDRESS1 = correspondenceAddress.BUILDING_NUMBER + " " + correspondenceAddress.PRIMARY_THORFARE; ADDRESS2 = correspondenceAddress.TOWN; ADDRESS3 = correspondenceAddress.COUNTY; POSTCODE = correspondenceAddress.POSTCODE; return; } ManualAddress manualCorrespondenceAddress = grant.CorrespondenceManualAddressId != null ? GrantsDAL.CorrespondenceManualAddress(grant.DFG) : null; if (manualCorrespondenceAddress != null) { ADDRESS1 = manualCorrespondenceAddress.BuildingNumber + " " + manualCorrespondenceAddress.StreetName; ADDRESS2 = manualCorrespondenceAddress.Town; ADDRESS3 = manualCorrespondenceAddress.County; POSTCODE = manualCorrespondenceAddress.PostCode; return; } // etc...
Switching on type is my most common application of discards. E.g. switch (objectOfUnknownType) { case string _: // Do string things... break; case Guid _: // Do Guid things... break; // etc }
Here is my rewrite. &amp;#x200B; public Stakeholder(Person person, Grant grant) { AddressLookup correspondenceAddress = grant.CorrespondenceAddressId != null ? GrantsDAL.CorrespondenceLookupAddress(grant.DFG) : null; BANK_SORT_CODE = string.Format("{0:########}", grant.ApplicantBankSortCode); BANK_ACCOUNT = grant.ApplicantBankAccountNumber; EMAIL_ADDRESS = person.EmailAddress; CODE = "GRT" + person.PersonID.ToString("00000"); NAME = person.Forename + " " + person.Surname; if (correspondenceAddress != null) { ADDRESS1 = correspondenceAddress.BUILDING_NUMBER + " " + correspondenceAddress.PRIMARY_THORFARE; ADDRESS2 = correspondenceAddress.TOWN; ADDRESS3 = correspondenceAddress.COUNTY; POSTCODE = correspondenceAddress.POSTCODE; return; } ManualAddress manualCorrespondenceAddress = grant.CorrespondenceManualAddressId != null ? GrantsDAL.CorrespondenceManualAddress(grant.DFG) : null; if (manualCorrespondenceAddress != null) { ADDRESS1 = manualCorrespondenceAddress.BuildingNumber + " " + manualCorrespondenceAddress.StreetName; ADDRESS2 = manualCorrespondenceAddress.Town; ADDRESS3 = manualCorrespondenceAddress.County; POSTCODE = manualCorrespondenceAddress.PostCode; return; } sp_FindAddress_Result grantAidedPropertyAddress = GrantsDAL.GrantAidedPropertyAddress(grant.DFG); if (grantAidedPropertyAddress != null) { ADDRESS1 = grantAidedPropertyAddress.BuildingNumber + " " + grantAidedPropertyAddress.StreetName; ADDRESS2 = manualCorrespondenceAddress.Town; ADDRESS3 = manualCorrespondenceAddress.County; POSTCODE = manualCorrespondenceAddress.PostCode; return; } sp_FindAddress_Result applicantAddress = AddressDAL.GetAddress(person.AddressUprn); if (applicantAddress != null) { ADDRESS1 = applicantAddress.BuildingNumber + " " + applicantAddress.StreetName; ADDRESS2 = applicantAddress.Town; ADDRESS3 = applicantAddress.County; POSTCODE = applicantAddress.PostCode; return; } ManualAddress manualApplicantAddress = person.ManualAddressId != null ? AddressDAL.GetManualAddress(person.ManualAddressId) : null; if (manualApplicantAddress != null) { ADDRESS1 = manualApplicantAddress.BuildingNumber + " " + manualApplicantAddress.StreetName; ADDRESS2 = manualApplicantAddress.Town; ADDRESS3 = manualApplicantAddress.County; POSTCODE = manualApplicantAddress.PostCode; } else { throw new InvalidOperationException("Cannot find a supplier address"); } } &amp;#x200B;
You still dont seem to even understand what wasm is. People aren't going to write libraries in wasm. People will compile libraries TO wasm, libraries like skiable, avalonia, xamarin at and many more and yes it's already happening. Accessibility has to be baked into a UI framework to work as it has many times before. Again this isn't about today, this is over the next 3 years. I started on html javascript and have written apps in react, ember, angular etc. It is absolute crap compared to the productivity, performance, and maintenance of better frameworks. You might want to put the kool-aid down.
Seems to me this is the intended usage of the feature, I wonder why the article author didn't mention it.
J2EE has session state transparently replicated, with standard API and guarantees. Beware dragons: distributed transactions are hell and you need compensation movements.
thanks this is what i was looking for.
Thanks using NUNIT now thanks for the great comment!
It's going to entirely depend on your program. If your handler makes an HTTP request, then perhaps examine the status code and decide when to stop and when to ignore. If it's a database, it might be a different case. In terms of logging, Console.WriteLine might be good enough for your case, or you might want to log it to your logging library? You're going to have to decide.
&gt; I made this code for splitting a factor from a number (for example, it splits 6 from the number 42, because it is dividable by 6.). 
&gt; Parallel support is largely irrelevant on the front end If you are rendering to a webgl target, or processing data in batches before it is rendered to the DOM in batches (e.g. vdom), then those things could be done parallel. &gt; Most of this is either not applicable to dynamic languages, offered through type script or only applicable in projects JS doesn't fit. All projects that aren't toys have to deal with dependencies and can make use of refactoring tools. &gt; Most of this stuff doesn't even exist in Framework We were talking about Razor Components, which is going to release in ASP.NET Core 3.0, which is going to run on .NET Core only. &gt; or isn't applicable in the scenarios where node makes sense. ...which one(s)? They all seem pretty relevant to me. You were the one who brought up scalability. I think much lower CPU usage, memory usage, and higher throughput is relevant in that discussion. &gt; JS handles this just fine with the appropriate libraries. Maybe date and time formatting, but I haven't been impressed by any of the other globalization / localization libraries I've seen in JS. Do you have some examples?
The var keyword was there long before c# 7.0
The var yes, the inline out var no
Tuple deconstruction. Out parameters where you create an unused dummy variable. There is a difference in the emitted IL for those discards since there not allocated. 
 // step 1: map the address types to 1 type of address // ... do that // then var addresses = new AddressLookup\[\]{correspondenceAddress, manualCorrespondenceAddress, graintAidPropertyAddress, applicantAddress, manualApplicantAddress}; // you could also use an array of functions that return an address to delay execution var address = addresses.FirstOrDefault(a =&gt; a != null); if (address != null) { ADDRESS1 = address.BuildingNumber + " " + address.StreetName; ADDRESS2 = address.Town; ADDRESS3 = address.County; POSTCODE = address.PostCode; } //one other thing, mapping logic is mixed in with the business model // check out AutoMapper for mapping objects
I could be completely wrong, but wouldn't the Webforms way of doing this be to create a custom control and/or override its `render` method? Poked around with the idea in the past, but was able to move into EF/MVC-land before I needed to really get into it. https://support.microsoft.com/en-us/help/893667/overview-of-user-controls-vs-custom-controls
The article is total garbage. I think the tl;dr is if you declare a variable called _ (I didn't know that was valid) you'll use it instead of discard? But the article says something totally different and is nonsensical. 
Whooh that is cool, somehow the command confuses me a great deal. I googled it and it seems there are some nice examples, it is totally different than how I currently parse json but it seems like a better way. ([https://www.newtonsoft.com/json/help/html/DeserializeExtensionData.htm](https://www.newtonsoft.com/json/help/html/DeserializeExtensionData.htm)) thanks for that comment, very helpful! &amp;#x200B;
How much control do you have over ManualAddress, sp\_FindAddress\_Result, and AddressLookup? Can you change them so they implement a single interface? If so, you could create a separate function that gets the address you want: ``` public static IAddress GetStakehoderAddress(Grant grant) { AddressLookup correspondenceAddress = grant.CorrespondenceAddressId != null ? GrantsDAL.CorrespondenceLookupAddress(grant.DFG) : null; if (correspondenceAddress != null) { return correspondenceAddress; } ManualAddress manualCorrespondenceAddress = grant.CorrespondenceManualAddressId != null ? GrantsDAL.CorrespondenceManualAddress(grant.DFG) : null; if (manualCorrespondenceAddress != null) { return manualCorrespondenceAddress; } // etc... } public Stakeholder(Person person, Grant grant) { IAddress correspondenceAddress = GetStakehoderAddress(grant) ?? throw new InvalidOperationException("Cannot find a supplier address"); CODE = "GRT" + person.PersonID.ToString("00000"); NAME = person.Forename + " " + person.Surname; ADDRESS1 = manualApplicantAddress.BuildingNumber + " " + manualApplicantAddress.StreetName; ADDRESS2 = manualApplicantAddress.Town; ADDRESS3 = manualApplicantAddress.County; POSTCODE = manualApplicantAddress.PostCode; } ```
normally you would add controls to the control collection of your page/user control instead of using markup. Your user control can have an aspx with an aspx.cs code behind. It would look something like &lt;div class="form-field"&gt; &lt;asp:Panel runat=server ID="myPanel"&gt;&lt;/Panel&gt; &lt;/div&gt; // in code behind myPanel.Controls.Add(...) &amp;#x200B; However, webforms does have a DetailsView control that might be what you need. I think it can generate some controls automatically or you can use an item template, edit template, etc with data binding
&gt;C# spends most of it's syntax time making garbage no one cares about and it isn't IMO much easier to read than JS. I use both and JS more but C# is much easier to read.
One thing that sucks about this is if it doesn't exist there is a strange exception. 
yeah, this code can identify if a number is prime or not. It returns 0 if it is a prime, because it isn't dividable by a factor that isn't itself.
lol, I made this code.
I'm too lazy to go look up the exact method in the docs, but you can just deserialize the whole JSON to a JToken. You don't get the benefit of having some pre-defined statically typed properties, but it should also avoid that exception.
For example: &amp;#x200B; If I got this code, where would the try and catch for the Aggregate Exception e be? &amp;#x200B; public void Taskhandler() { Console.WriteLine(Fetchstuff1"); var task1= GetStuff1(); Console.WriteLine("[Fetchstuff1stuff2"); var task2 = GetStuff2(); Console.WriteLine(Fetchstuff1stuff3"); var task3= GetStuff3(); Task.WhenAll(task1, task2, task3); List&lt;String&gt; data1 = await task1; List&lt;String&gt; data2 = await task2; List&lt;String&gt; data3 = await task3; // DO STUFF AFTER ALL TASK OVER IS DONE var categories = GetCategories(); var dt= CreateDatable(); Sendtodatabase(); } public async Task&lt;string&gt; Dostuff1,2,3() { try { using (HttpResponseMessage result = await _httpClient.GetAsync(Adrdess)) using (HttpContent content = result.Content) { result.EnsureSuccessStatusCode(); string data = await content.ReadAsStringAsync(); } return data; } catch (Exception ex) { Console.WriteLine("Error" } }
Could you provide me a example of how of how you think it should be done in this code? Maybe I would understand it more. &amp;#x200B; public void startup() { Console.WriteLine(Fetchstuff1"); var task1= GetStuff1(); Console.WriteLine("[Fetchstuff1stuff2"); var task2 = GetStuff2(); Console.WriteLine(Fetchstuff1stuff3"); var task3= GetStuff3(); Task.WhenAll(task1, task2, task3); List&lt;String&gt; data1 = await task1; List&lt;String&gt; data2 = await task2; List&lt;String&gt; data3 = await task3; // DO STUFF AFTER ALL TASK OVER IS DONE var categories = GetCategories(); var dt= CreateDatable(); Sendtodatabase(); } public async Task&lt;string&gt; Dostuff1,2,3() { try { using (HttpResponseMessage result = await _httpClient.GetAsync(Adrdess)) using (HttpContent content = result.Content) { result.EnsureSuccessStatusCode(); string data = await content.ReadAsStringAsync(); } return data; } catch (Exception ex) { Console.WriteLine("Error" } }
It's a good idea until you try it. What happens when I visit `/WriteMyPost` which sends me into `/login`. When I submit the form it'd go to any url (I like `/post`) which will what now? Redirect you to `/login` since that's the referrer? Also what the other guy said. "Use relative paths + origin site instead"
"not using MVVM is not harder then not using it" I am going to have to dust off my Discrete Math book and break out some Boolean identities to figure out what the hell this phrase means.
Might be worth looking into the Microsoft logging abstraction library to help with compatibility. 
https://github.com/cyanfish/naps2?files=1 I think you can find something like this in NAPS2.Setup. I believe it is called Wix or something like that. should be able to install it as an extension to VS2017
I'm on mobile, have only skimmed your code, but have you fetched a user object both from dB connect and from owin context? 
Yes, discards with pattern matching
Yes, but I felt that was too deep to go
Except that you don't declare this variable. This is a keyword that is declared by default. Also unlike a variable it can't be used after that.
&gt; Edit 2: Also, your comment " //Don't await it here because you're working with the UI thread in here." I think is most likely wrong. Aka... if your UI thread is the one that executed the UpdateChart method, then as soon as you called Task.Run, you got a new thread from the pool that this thing is working on (not the UI thread). You are half right. You are right that the comment is wrong. You are wrong to say you are not on the UI thread. You are right that when you call `Task.Run`, the action pass in is run on a worker thread from the threadpool. However, the call `Application.Current.Dispatcher.Invoke` puts you back on the main UI thread and blocks the worker thread. The comment is wrong because it is fine to await when on the UI thread. What you do not want to do is block the UI thread. The point of await is it does not block the thread. This whole function could have been written as a simple `async` method, removing all of the `Task.Run` and `Dispatcher.Invoke` calls. But make it `async Task` because `async void` is evil.