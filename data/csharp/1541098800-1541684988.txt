Looking at the code, especially code related to supporting the embedding of SDL windows and such shows a serious lack of comments. Is there a plan to document the classes in the library?
&gt; The compiler doesn’t try to reorder the initializers based on which references which, or anything like that, because that would be even more confusing. And also wouldn’t work since there can be cyclic dependencies that can’t be detected by the compiler. Note that this only applies to static field initializers. Instance field initializers can’t refer to other instance fields of the class.
Relevant IL: `.method private hidebysig specialname rtspecialname static` `void .cctor () cil managed` `{` `.maxstack 8` `IL_0000: ldstr "A"` `IL_0005: stsfld string Resources::StringA` `IL_000a: ldsfld string Resources::StringA` `IL_000f: ldstr "B"` `IL_0014: call string [mscorlib]System.String::Concat(string, string)` `IL_0019: stsfld string Resources::StringB` `IL_001e: ret` `}` and if you declare StringB first: `.method private hidebysig specialname rtspecialname static` `void .cctor () cil managed` `{` `.maxstack 8` `IL_0000: ldsfld string Resources::StringA` `IL_0005: ldstr "B"` `IL_000a: call string [mscorlib]System.String::Concat(string, string)` `IL_000f: stsfld string Resources::StringB` `IL_0014: ldstr "A"` `IL_0019: stsfld string Resources::StringA` `IL_001e: ret` `}` &amp;#x200B;
A big thanks. 
Removed: Rule 4.
"We" is the set of me and others with the proviso that both me and the others use String.Empty. You and your others may be in the set of "me and others" but you aren't in the subset of those who use String.Empty. It's a tiny distinction, but then my original reply was also making a tiny distinction in the hope it helped clarify something. 
Why breaks my post Rule 4? This is not meant as a techical question - but just an open discussion about using unmanaged C#, whitch I think is an interesting part of C#
Was my first thought
I was thinking in the (edge) case that you are working with an instance created by a factory implemented in a 3rd party library, which might have unexpectedly added IDisposable to the created objects class.
 Input2 = Console.ReadLine().ToUpper(); ... Input2 = Console.ReadLine().ToUpper(); ... Input3 = Console.ReadLine().ToUpper(); ... if (Input2 == "Look") ... if (Input3 == "Look") ... else if (Input3 == "Look") Gotta capitalize all of your checks to be all upper-case...
IHostedService is an interface. Can you share anything about the class that's implementing it?
Here is a bare minimum example: https://gist.githubusercontent.com/Palmer11/1fd696d73ba529cc31b494226b365ccd
On the Singleton topic... Having your code depend on a global state (Singleton) makes it impossible to properly test and can often introduce bugs that are extremely difficult to debug because you can't track how and why the Singleton state changed. Think of it like, for example, if your code depended on the system clock. How are you supposed to know if your program broke because of a bug in your code, or because the machine's domain admin changed their timezone? You can't, until you spend way too much time and money on a technical support call. That being said, there are sometimes situations in which a Singleton is a decent option. However, it's better to treat it as a last resort. Just because it's "useful" doesn't mean it's the best option. Often times, singletons are the lazy option.
This is a step in the right direction, and it's called separation of concerns. Splitting the timer logic out of the Program class/Main method is separating these concerns. It leaves Program/Main with more room to add more functionality, and is an indicator of where the main logic is, versus where the timer logic is. There's some room for improvement in the way you name things. When working with a framework, like .NET, you should respect its types by not naming your own the same. Since your own Timer class "contains" a Timer, or that it "helps" with Timers, consider renaming your `Timer` class to something like `TimerContainer` or `TimerHelper`. In C# world, methods are Pascal cased - `ProcessTimedEvent` instead of `processTimedEvent`. Check out these official [Naming Guidelines](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines). Dig through those articles at least once, and practice them constantly. Developers of a language following the same conventions, especially official ones, leads to better sharable and understandable code.
Arcus is rad!
Hey, FizixMan &amp;#x200B; The issue is that that a can\`t progress in the games story. Is there anyway to overcome the issue? Thanks for the support man really helpful! &amp;#x200B;
 public class Service : IHostedService { private Client _client; public Service() { _client.OnMessageReceived += OnMessageReceived; } private void OnMessageReceived(object sender, OnMessageReceivedArgs args) { Console.WriteLine(args.Message); } public Task StartAsync(CancellationToken cancellationToken) { _client.Connect(); return Task.CompletedTask; } public Task StopAsync(CancellationToken cancellationToken) { _client.Disconnect(); return Task.CompletedTask; } } that's basically it, I made sure that there is no issue with the Client class by testing it in a Console Application, which worked perfectly over long periods of time. but I'm having issues running it in asp.net core for even short periods. I've also tried registering the class as a singleton instead of a hostedservice but I ended with the same result of it stopping after 5~ minutes.
Sure, sure, but for small, private software, that's not the biggest of issues :) For big company software on the other hand....
did it?
Hi mosentok, This is great advice, thank you! I realised after I had posted my code that when I copied the code from Main to the new class it had changed it to System.Timers.Timer. I'm assuming it's because I hadn't set up the using directive before I pasted it and it realised what I wanted to do. I then realised I had called my class the same name as the Timer type. I changed this. Thanks for your response.
Are you hosted behind IIS? The default IIS configuration will terminate your process after a period of time where no one requests the website, and start a new instance when the next request arrives.
Fair enough. I kind of misread it as looking for info about making unmanaged C# code. I restored it.
That's kind of a knee jerk, though. In this case, the singleton seems to represent configuration, and he's passing the values to a method, not using them inside the method (as he'd considered doing).
It's the default development mode (IIS Express), what you say does seem possible, the thing is I don't get a new instance if I request the website again, it just stops, and no other request will start the service again.
&gt; OK, first of all, I learned today, that many people consider singletons to be anti-pattern and shouldn't be used. The idea of a Singleton itself isn't an anti-pattern. Singleton-instead-of-static-variables is an anti-pattern. Rule of thumb: If your consuming classes *need to know* it's a Singleton, you've done it wrong. Why is Singleton-instead-of-static an anti-pattern? Because it doesn't fix any of the problems with static, while potentially hiding the fact that those problems are there. You still have all the multi-threading risk. You still have global variable hell. The only place in your code that should know something is a Singleton is the composition root. If you don't know what that is, then you should read up on Dependency Injection. Another anti-pattern that crops up in conjunction with Singleton is the Universal Parameter For Everything, often in the form of a config object. This anti-pattern is when you replace a bunch of methods that have too many parameters and mostly the same parameter with a "FooParams" object that holds those same values. Too many parameters repeated all over the place is a code smell that your OOP code isn't properly designed with separation of concerns in mind, i.e. it's too procedural. Replacing those parameters with a FooParams object is not getting rid of the smell, just sweeping the problem under the carpet. People often see this bulge in the carpet and say, "why am I passing FooParams around everywhere? I know! I'll make it a Singleton!" That's covering the bulge in the carpet with a new shag carpet that makes it harder to see the bulge.
It created an issue big enough in your project that you were led to create a topic asking people how to solve it. I had the same kinds of concerns/issues with singletons and decided to stop using them. It took some adjustment. But that's sort of neither here nor there. I think what you did with the helper variable `cm` is fine. You're just grabbing a reference and putting a more convenient name on it. If what you are grabbing is REALLY a singleton, there's no harm in that. But honestly I'd hide it further behind a helper method, this is a variant of /u/AngularBeginner's answer, with some renaming I'll suggest and explain: private Whatever DetectEyePositions(CameraModel instance) { var cascadeOptions = instance.cascadeOptions; var generalOptions = instance.generalOptions; return CascadeClassifier.Detect( RadioButtonDetectedFeaturesImageViewChecked, cascadeOptions.FaceScale, ..., generalOptions.EyesRectColorScalar); } Now, here are some suggestions I have. First, if you created `CascadeClassifierClass`, drop the 'Class' from the name. If something in C# has a PascalCased name, it's likely a class. Especially if it is in the context of a method call. If you want to be explicit, you should have named it `CascadeClassifierIsACSharpClassForDetectingFacesImplementedUsingCSharpDotNet.StaticWhateverDetectFunction()`. It turns out that often, the more detail you add to a name the more cluttered it becomes. Name it `CascadeClassifier` and with enough experience, you'll know something with an action-noun name capitalized like that can *only* be a class. ;) Next, if you control all of this, I think you'd be much better off if you had: public static void Detect(CascadeOptions cascadeOptions, GeneralOptions generalOptions) { ... } That way your call site becomes: return CascadeClassifier.Detect(instance.cascadeOptions, instance.generalOptions); Depending on circumstances, you might even just take "a CameraModel". All of these simplify the call site at the cost of hiding exactly what is required. 
I was replying to the first paragraph of history post, not talking about his code. 
I don't think this is possible by using entities with EF. You can go lower and hack it with plain SQL, but you lose all that EF provides this way. You mentioned you got assigned this task and you didn't architect it. This is the time to ask for advice from you systems architect. Architects might not need to code, but *have to know* whether a solution is possible to implement (not to say the duration of such task). You should escalate this, because it's not possible, or even if it was, it's extremely bad practice to do so. 
There is no such things as useful software that doesn't deserve good unit tests. Other than run-once-then-throw-away tools/experiments. Designing for testability from start doesn't take any more time, and pays off almost immediately. Maybe you're perfect, but I often find I've introduced regressions in my code within hours of fucking around with anything significant. Writing a unit test for well-designed code takes far less time than tracking a regression down with a debugger stepping through spaghetti code.
And I'm referring to the code he published, and not opposed to avoiding singletons in general. I'm scheduling a one hour meeting in Room 2B so we can have a really productive discussion. ^(praise satan)
Yup, about the slower-than-expected counting, indeed you set the `Timer.Interval` to 1000ms, but the `Timer` isn't perfect. You are still at the whims of the operating system and the hardware to run your `Timer.Elapsed` event, which takes a non-trivial amount of time. Granted, it might only be a few extra milliseconds, maybe even less, but it will most likely happen and not be perfect. If you legitimately need a more accurate timer, there are a few things you could do. * After the `Timer` fires, `Stop` it, determine what the next `Interval` should be (remember, probably less that 1000ms because of the added non-trivial overhead), then `Start` it again. * Research a library or implementation of a more accurate timer. * Research a solution outside of .NET. Threading is fantastic! When you research it, if it's too gnarly, don't worry, focus back on single-threaded code for a moment. Understanding single-threaded code helps learn multi-threaded code. It is great that you are eager. Since we're in .NET world, when you research threading, check out the [Task Parallel Library (TPL)](https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/task-parallel-library-tpl). While `Thread`s definitely do still exist, in most cases it is now easier to use `Task`s, and a lot of modern .NET libraries and APIs favor `Task`s over `Thread`s. Anyone's case could be different than mine, but personally, I use `Task`s almost every day, and I can't remember exactly the last time I explicitly used a `Thread`, but it's been years.
That's not what IHostedService is meant to be used for. You could use IHostedService to facilitate background work for the web site. But it's not meant for independent, long-running tasks. Here are instructions for running .NET Core inside a Windows Service. https://www.stevejgordon.co.uk/running-net-core-generic-host-applications-as-a-windows-service
Thanks a lot for your help, it's much appreciated! I have written a chip8 emulator which worked ish and a Sinclair ZX Spectrum emulator which worked ish but not really. I really struggled with maintaining the use of the user interface (So need to look at threading (or tasks :) )). When the main loop of the emulator was running I lost the use of the UI (form) Also timing. So like a cpu running at x mhz must process an instruction in x ms. I never got this working so it just free ran.
Okay but why did you reply to me and judge my comment if you knew we were talking about different things? Seems kneejerk. 
Let's not discuss implementation during standup, please. Save it for the compulsory wiki entry linking to an email with an attachment of a picture of the whiteboard with the meeting notes. ^praise satan
Jesus Christ, you sound fun to work with. Maybe you should look into alternative career options....
Seems like it encompasses exactly what it says it does. From a glance it looks like a good start to get comfortable navigating the very basic language concepts, but this doesn't get you any closer to web development specifically. It doesn't touch on delegates and events which are important, and no mention of any frameworks. There are already jump starts for [asp.net core](https://docs.microsoft.com/en-us/aspnet/core/getting-started/?view=aspnetcore-2.1&amp;tabs=windows), you can decide yourself if the examples are skipping too far ahead of what you're comfortable with.
Thx for the input! :)
Wow.
Are we losing any proprietary goodies along the road to core, or is it all slowly making the transition? 
Thanks for your reply. Is unmanaged code in game-development an alternative to DirectX ?
Personally I've found rider preferable to visual studio. As for WPF this is windows only. I don't think there is any equivalent for Linux. 
Using DirectX/OpenGL is what I mean by "interop with graphics hardware". Both of those are unmanaged APIs.
20 years ago i wrote some utils interop directly with filesystem and registry using Win32 API. Do you have had any performance issues parsing data through DirectX/OpenGL ?
I'm suffering from Microsoft churn confusion I guess, but I thought that ASP.NET Core always just ran on Core. Isn't that why they called it ASP.NET **Core**?
No no. EVERYTHING targets dotnet standard. Its the standard. Its the minimim requirement. Core might have stuff outside of standard but standard is the minimum 
No more ASP.NET and ASP.NET Core I guess. Now it's just ASP.NET that runs on Core. Remember that the Standard is the features all .net implementations should have. Framework does meet those, Core does not yet, but will. At least that's how I understand it.
I don't believe that is the case. The whole point of the standard library is that it can be used by either Core or Framework (the aspnet part doesn't matter). That doesn't seem to be changing. Previously you could do AspNet Core targeting Framework, which always confused me. But Standard should be around till Framework no longer exists at all.
yeah, which means if aspnet targets core then you cannot create a library targeting standard that depends on it.
Exactly thats my worry. Do I have to target netcore to use a aspnet core library?
I hope that is the case I hope that aspnetcore libraries just move to targeting only netstandard. My worry is that the article literally says aspnetcore will only run on netcore. If it targets netstandard though I should be able to run it one netframework technically. The only way what the article says is possible, is if aspnet core targets netcore and not netstandard.
yeah, me too. My current stuff has my libraries targeting standard.
 Standard is there to provide a set of common APIs that are guaranteed to run on framework OR core. It is the intersection in a vinn diagram between framework and core. So this doesn't change that. You can't make a standard app, only a core or framework app. If you write a standard library you are saying you don't care what the app runs as, so you are golden no matter what direction MS moves in.
You believe that netstandard is the lowest common denominator but I instead believe it should be the fore front of csharp development. I want to see netstandard first and then the implementations of it. I think the best approach is that we develop netstandard3.0 as then next standard api and then it can be implemented by anyone, NetCore, NetFramework, Mono, Unity, Xamarin, etc. The way it is now netcore is the lead and when all the implementations get around to it some common ground that becomes the next netstandard. Thats a horrible way of doing things because library makers are not forced to multi target code between netcore and netstandard to serve all possibilities. I would rather pick a netstandard level and mark that as my minimum implementation than be forced to pick a netstandard and netcore level to support both. If I wanted to pick a netstandard that has access to APIs implemented in netcore2.1 guess what its not possible. There is no netstandard2.1 because netframework doesn't have anything that supports netcore2.1 apis. That is the ultimate problem as netframework lags behind netstandard becomes pointless. There is no way for me to write a library that targets netstandard and uses those new netcore APIs. The problem will only get worse in time until netstandard is abandoned and everyone will be targeting netcore.
Yes I understand that but now microsoft is saying the aspnetcore libraries are going net core only. I can't target netstandard and reference netcore libraries. Thus my netstandard libraries must move to netcore and away from netstandard.
I think the title is just poorly worded. Anyway, I thought the transition to Core-only was the plan all along. I'm sure the .NET Framework will continue to be supported for some time, aka Microsoft's "done, but not dead" status.
The Core part is more of a branding then anything at this point (kinda how like back in the day they were attaching *Windows* to everything). IIRC, .Net Core did come in part from the ASP.NET Core team's effort to make it cross-platform and took on a life of its own (and eventually was large enough to have Microsoft create the .NET Standard). Yes, ASP.NET Core ran/runs on any framework implementing the .NET Standard: .NET Framework, .NET Core, and Mono being some of those implementations. My understanding is that they're saying .NET Core is moving faster than .NET Standard so they want to be moving faster as well.
no, it means the opposite. so let s say we create baskets of fruit. standard says baskets must have banana and apples. core might add blueberries but it MUST also have apples and bananas. So if you are on core any basket with apples and bananas works. Core HAS to HAVE what standard has.
You can currently run ASP.NET Core on the .NET Core or .NET Framework runtimes. Sometimes it's necessary to use the .NET Framework as a runtime in order to use features not available in .NET Core (yet). I'm assuming Microsoft is feeling confident that those cases will be minimized or nonexistent come 3.0, but we'll see. They've reversed course on these sort of things before.
.NET Framework is also open source.
Not really. I just happen to look at csharp subreddit sometimes when my mind is drifting during C# language design meetings, to remind myself what real people are dealing with.
&gt; if aspnet targets core then you cannot create a library targeting standard that depends on it Depends what parts of ASP you reference. I doubt every ASP lib will reference Core. Libs that only need to reference Standard should only reference Standard. Interface and type definitions are often separated from implementations. Also, why does it matter? If your library needs to use bits of ASP, then it takes on ASP's transient dependencies. Where are you going to use this lib where you can reference Standard but not ASP/Core? Is that a scenario where perhaps you should be splitting your lib up into one that only depends on standard and another that depends on ASP.
That's cool. 
This was an obvious step
ASP.NET Core can run on .Net Core and .Net Framework. Now on version 3.0 they want to remove the latter part.
MS is willing to rewrite an entire JSON library from scratch but some random third party LINQ library stops them cold - enough to conveniently cut a rather unpopular ORM loose just in the nick of time. Now that .NET Framework is dead and anyone on .NET Core 2.1 is going to be cut off after a few more years - starting to feel like being a .NET developer is a losing proposition... This same shit was attempted last year with 2.0 until senior MS execs stepped in to fix the batshit insanity... I suppose I'll wait and see if common sense prevails again.
Interesting. Thanks for the clarification. I recall one of the Microsoft MVP's saying that we should think of .NET Standard like the HTML spec in that it will change, but they expect the changes to roll out very slowly. 
This won't have any impact on ASP.NET 4.x since it only supports the .NET Framework anyways.
They had already planned on making the 2.0 version Core-only last year, but reconsidered after considerable backlash.
What this announcement is saying is they are now adding Core blueberries to ASP.NET Core, so ASP.NET Core 3.0 can **not** be put into standard apple+banana baskets anymore.
The same way you have to target netframework to use an aspnet framework library today.
Nope. I am currently running an ASP.NET Core site on .NET 4.7 due to one of my require libraries still needing the full framework. It took a little bit of config changes, but it still works.
Yeah i think you are right. I thought you were talking about your inhouse standard dll and referencing that from your web app
It is possible. I use Rider / VSCode on Pop_OS. In terms of coming from WPF check Avalonia out http://avaloniaui.net
Hence the layman term *layman terms*, for a noob it's sufficient to simply understand that what the OP is trying to manipulate doesn't exist three way he's expecting it to *yet*
I'm working on a 2D game engine for hobby development built on top of SkiaSharp. I got multiple cameras, multiple views (that can target the same scene), and parent/child transforms working for the most part, so it's been good.
Yeah I am not thinking your understanding what we are saying. If I have a netstandard library I can reference aspnetcore once it starts targeting netcore. NET Standard libraries can't reference netcore or netframework. Netframework and netcore can reference netstandard fine but we are talking about the reverse which is not possible.
I run IdentityServer4 which is a Asp.Net Core 2 app. I originally targetted .Net Core but had to re-target for .Net Framework so I can add server-side support for WS-Federation (a security token service provider for SharePoint 2013) in the same web application. I call the [FederatedPassiveSecurityTokenServiceOperations.ProcessSignInResponse](https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.services.federatedpassivesecuritytokenserviceoperations.processsigninresponse?view=netframework-4.7.2) method which is only supported in .Net Framework. I'm not sure how I would do this in .Net Core.
 I run IdentityServer4 which is a Asp.Net Core 2 app. I originally targetted .Net Core but had to re-target for .Net Framework so I can add server-side support for WS-Federation (a security token service provider for SharePoint 2013) in the same web application. I call the [FederatedPassiveSecurityTokenServiceOperations.ProcessSignInResponse](https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.services.federatedpassivesecuritytokenserviceoperations.processsigninresponse?view=netframework-4.7.2) method which is only supported in .Net Framework. I'm not sure how I would do this in .Net Core. 
Ah I see what you're saying, but I mean that your standard library code has to be run from one of the frameworks still. Can you not separate your netstandard portion from the netcore platform?
Maybe https://www.linqpad.net/ It's not focused on HTTP calls, though.
Unmanaged code just comes down to whether or not an API that would benefit me to use is only available through unmanaged code. Win32 stuff is common to use. I use a media info library. Performance wise, I have a util for enumerating very large numbers of files that is faster than anything exposed in .Net. Un*safe* code has uses, too. A couple places it comes up for me is string manipulation and concatenation - if you have a constrained set of inputs you often find performance gains over simpler implementations. Another place is in custom collection classes, particularly copying or moving array contents.
No, this is totally naive. The ‘core’ of asp.net core will target netcoreapp3, and as a dependency on that so will the vast majority of other packages. Furthermore, They have specifically said they’re moving away from the ‘it’s all just packages’, there will *not* be some arbitrary subset of pacakages, eg Ms.aspnetcore.authentication targeting net standard, that you can write a helper library for that targets net standard. You will spend on asp .net core 3 or not. The .All packages which are just aggregates now will not be able to be something you can opt out of. For example, right now you cannot import the aspnetcore.all 2.1 packages of you target the full framework (right now), but you *can* import all of those packages one by one, because they target net standard. This **will not** be the case in the future release, that’s the point. The parent comment is quite correct. If you’ve never actually worked with this net standard stuff, you may think... hm, seems ok. It’s really not. This is a line in the sand; after this, the full framework is on notice; there will not be any major releases after 4.8 and even if net standard 3 comes out, it’s an open question if the full framework will *ever target it*. The tldr; here is, if you’re targeting the full framework, and you don’t have some kind of migration plan in the works over the next year or two, you’re in deep shit. 
This looks to be exactly what I was after, and it hardly involves any wacky architecture. Thank you. 
Rider is awesome. I prefer IntelliJ and CLion to Visual Studio. 
Most of the samples you will find will demonstrate how to create a class which implements `IHostedService` and then write the code which executes in the background inside that class. This is what the document you linked to does. What you want appears to be a little bit different in that you want to simply hand off a piece of code to an `IHostedService` implementation so that it can run that code in the background. The [Queueing](https://github.com/jamesmh/coravel/blob/master/Docs/Queuing.md) feature of Coravel does exactly this. This will allow you to do something like the following: ``` [HttpGet] public async Task&lt;IActionResult&gt; GetData(int foo) { try { var response = await someService.GetSomeData(foo); this._queue.QueueTask(() =&gt; LogEventInfo(foo, response.Bar, response.Baz, response.Qux)); return Ok(response); } catch (Exception ex) { return ErrorResult(HttpStatusCode.BadRequest, "Error attempting to get the data", ex); } } ``` I have only used Coravel in a few proof-of-concepts, so I cannot testify to how battle-tested it is. But I think it will work great for the scenario you described.
If you do games then stick with Windows. Unity has a Linux build but not everything is supported, not everything runs smoothly. If you just work with dotnet, then use Rider it's awesome, better than Visual Studio once you get used to it.
Does your table have a solid schema and you're dynamically adding the data for some columns? Or is your table itself dynamic? 
&gt; System.Drawing APIs come to mind as they're tied to GDI+ `System.Drawing` was never supported in ASP.NET services anyway.
splitting pdf by content maybe a little difficult, how can a tool recognize the content in the pdf? [split pdf by page in c#](https://www.iditect.com/tutorial/pdf-page/) is available by most the pdf library. or there are some bookmarks in the pdf, then split pdf though the bookmark.
I was up in arms when they announced that 2.0 won't work on the full framework but I think now this is OK. 2.0 was important 1.1 was practically unusable. If you want to follow that path now you can go to 2.1 instead of 3.0 and it will be fine way to migrate.
I have much more popular example. If your project is using EF6 it is incredibly painful to move to the half-assed EF Core. With .NET Core 3.0 EF6 will be coming to .NET Core.
Have you looked at the new Span? What are your thoughts on this - does it even affect you? I'm a newbie myself but this stack memory manipulation of structs without additional allocations is really interesting.
&gt;Comment/Uncomment block of code - Ctrl+K+C/U I actually have an extension that combines them so i only have 1 shortcut to comment my selection or uncomment it, depending on what it was before. &amp;#x200B;
What does your library need that keeps you on Full?
I've installed [conda.io](https://conda.io/docs/) to write some python programs and it worked well on Windows. Unity works with any text editor I think for writing scripts.
Sorry man i forgot to give you props!! It did indeed work! Couldn't believe i didn't even try it haha. Worked just as expected but decided to take the sender route as it will answer another problem i have haha! Thanks man. 
Having a certificate has some benefits: \- It will eliminate the discussion or possible unnecessary conversation between you and the firm during job interview when it comes to verification of your abilities. **(Door opener effect)** \- If you are a junior: It will help you in basics and will provide you a structured path of learning (instead googling or learning from real-life failures) **(Guidance Effect)** \- If you are a company owner or a manager: It will be a standardised base for all colleagues to avoid knowledge pitfalls. **(Common Denominator Effect)** \- If you are changing country: It is an international certificate to validate your abilities where you remove all the suspicion and the fear of HR of hiring you. Give something to choose you without any fear. **(Trustworthiness Effect)** \- If you are working for a MS Partner, your certifications will help them to gain some extra advantage if they are in lack of certifications to get the competency. (Ofcourse they will choose you if they are in need) **(Reinforcements Effect)** \- (Especially in consulting or outsourcing companies) If your customers (or the customers of your company) asks it as a prerequisite or when your company uses it as a prestige in sales cycle. **("Look we are all certified" Effect)** Other than above, you dont need one. I am a senior consultant and a developer more than 12 years of experience in a consulting sector, I only required a certificate for the competency of the consulting company that I've worked for. &amp;#x200B; **Remember:** Certification will not make you a good developer or consultant, but a hard work will. &amp;#x200B; (%100 frank confession: If I had time, I would like to have more certificates.)
Worked for me fine: Form2 f = new Form2(); f.Show(); f.pictureBox.Load("https://images.pexels.com/photos/34950/pexels-photo.jpg?auto=compress&amp;cs=tinysrgb&amp;h=350"); Did you just forget to call `.Show()` on your new form?
Can you link your github user 😊 I always wonder if I overkill with my extension methods, as they are just static code. e.g IQueryable.FullTextSearch(...) // works for db queries and any data.
Microsoft directx lib "SharpDX" has some special sauce in it to reduce/remove the overhead of calling into it from C# &amp;#x200B;
I might have forgotten to call the .Show(), yes. I'm going to try it out then. Thanks!
&gt; The .All packages which are just aggregates now will not be able to be something you can opt out of. That would be crazy dumb, because that package also contained Entity Framework Core. That is a dependency I do not want.
Looking like .NET Standard was a total waste of time then...
&gt; was never supported I’m not sure what that means because I certainly used that namespace - had to target 4.6.2, but it certainly worked.
Last time I checked, that was for the client side. I'm dealing with server-side here.
Yes indeed, that's literally why they've removed EF Core and Json.Net from the framework package. https://github.com/aspnet/Announcements/issues/325 &gt; As part of this change, some notable sub-components will be removed from the ASP.NET Core shared framework in 3.0: Json.NET (Newtonsoft.Json), Entity Framework Core (Microsoft.EntityFrameworkCore.*), Microsoft.CodeAnalysis (Roslyn) &gt; Starting in ASP.NET Core 3.0, references to Microsoft.AspNetCore.App will no longer be a &lt;PackageReference&gt; element in the project file. The .NET Core SDK will support a new item called &lt;FrameworkReference&gt; which will replace the use of PackageReference. Changes to support this new item type are already under way. I presume this issue will track all the of the fallout as a result of that decision eventually --&gt; https://github.com/aspnet/AspNetCore/issues/3612. 
Until you need something that's only in core?
No, that was the dream; many implementations all implementing the same 'API interface'. ...but that isn't 'the plan' anymore. 'The plan' is now that everyone just does whatever the hell they want on their own runtime, and we call it 'innovation', and packages multi-target the runtimes they expect to support. (I'm not kidding; read the Microsoft comments on https://github.com/dotnet/standard/issues/682) 
This thread from a couple of years ago is interesting. https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/500 I'll bet there's something non-cross-platform when doing cryptography and support for signed XML.
"Microsoft.AspNetCore.All" == "Microsoft.AspNetCore.App" &gt; false You're mixing up two packages.
Are you allowed to create a view in the database? If so then do that and select all rows from customer and run the function in the select. Then you can map the view to a new entity object in the code. It was I while since I did it but you might be able to extend the existing customer entity making the new class small and easy to mapp over.
You might want to check of http://avaloniaui.net/. Or you can try https://docs.microsoft.com/en-us/xamarin/xamarin-forms/platform/gtk?tabs=windows.
That's a good work-around. Thanks.
Oh man i forgot about this. I already solved this using [vb.net](https://vb.net) (although im sure you can do it using C# i just used [vb.net](https://vb.net) because it had free nuget packages). &amp;#x200B; But you're right. What i did is have the pages/headers barcoded with unique values such as &amp;#x200B; Coversplit Complaintsplit Militarysplit &amp;#x200B; etc... &amp;#x200B; The code just searched for the first Barcode, and extract all the pages till it got to the next unique barcode. &amp;#x200B; &amp;#x200B; If you like i post the entire code if you want. &amp;#x200B; Basically this is for law suits and every county has a different criteria to how the County Clerks office want the affidavits submitted. So for Cook County, they'll want all the PDF's split by their headers but they'll want the coversheets and complaints to be merged while having the rest split. &amp;#x200B; And the final output will look like ZTEST01 Cover &amp; Complaint.pdf &amp;#x200B; ZTEST01 Exhibit (3).pdf (meaning 3 pages of exhibits) &amp;#x200B; ZTEST01 Military(5).pdf ZTEST01 Summons(8).pdf
A quick google search led me to question on stackoverflow, about using a tabcontrol but huding the headers. I was unable to test since I am not near my of at the moment, but people have commented on the answer, and it seems to have worked for them. tabControl.Appearance = TapAppearance.FlatButtons; tabControl.ItemSize = new Size(0, 1); tabControl.SizeMode = TabSizeMode.Fixed; Its a simple solution, hope this helps
Not being supported is not the same as not available to use. You might find that one day your code simply won't work. I thought we turned that ActiveX corner 5 years ago, but here we go again.
This: "I know that making a database call in a property getter is frowned upon"... It's a really bad idea, please don't do it, I must ask why do you need to bind this value to the DB call? Do you really need it to display in "real time" the customer debt? I would populate at the customer constuctor, just my 2 cents.
I don't understand your question "Why do you need to bind this value to the DB call?" The only way to get the value is by calling the DB function. I've decompiled the dll being used and tried to follow all the queries it builds and subsequent function calls, but it's just a mess. Yes, I definitely need to display the amount due in real time. There is no Customer constructor. Well, there is, but it's EF generated code.
iTextsharp supports pretty much everything, including fonts and positioning of elements. iTextSharp is also under a semi restrictive license, you would most likely need to pay to use it in most business applications. I use PDFsharp for this reason.
I am currently doing what you want to do, i.e. building a drawing surface. Be aware that many of the legacy desktop drawing applications are written down to the render level, in other words somebody has applied business logic to repainting, has designed their matrix transforms, etc. This is such an insane amount of work you practically need to use WPF or wxWidgets. These are the only two (as far as I know) mature API's that let you delve into custom UI objects easily. My advice is to open up the WPF docs and open up 5 tabs with the 4 following classes: Control, UIElement, FrameworkElement, Visual. Understand them back to front. This will get you into the mindset of building a control. A final word of warning: you might be approaching the app from a business perspective ("I want to show electronic resistors on a circuit board layout designer") but I guarantee the devs for other apps have spent 80% of their time working on repainting, render passes, and other boring minutae. Probably 5% goes to actual business logic. 
I've looked at Span but haven't found much use for it yet in my own programs. Most cases where I might use Span I'm already using raw pointers which is even cheaper and more flexible. Span seems more useful as an efficient way of working with managed arrays and strings, but when working with graphics my arrays are all unmanaged and I just use pointers. More useful to me have been the new 'in' parameters and the new 'unmanaged' generic constraint. I have vertex structs that can be 100+ bytes in length which is way too big to pass to a method by value. Previously I had to pass them as 'ref' even though they weren't actually modified, but the new 'in' parameters let me efficiently pass them by address, and the 'unmanaged' constraint allows me to get a pointer to the passed struct even even if it is of generic type T.
Read the announcements carefully. There will be no .All for 3.0
I've started to deploy core stuff to linux, but I can't see using it for dev any time soon.
Ah, well I missed that they were combining *everything* apparently into one package. But still, what lib are you or /u/blooping_blooper writing that needs to reference ASP.Net Core that isn't going to be used in an ASP.Net Core application? That you just need to target Standard? That you can't simply split into one lib for your ASP stuff, and another for your not-ASP stuff that needs to target standard? Dropping full Framework as a target is not really the issue in this bit of discussion thread.
You can even use a proxy with HttpClient and capture the requests with Postman if you need to see/manipulate stuff in Postman
I'm guessing Microsoft Access isn't installed on the laptop. And dump Visual Studio Express 2015, use Visual Studio 2017 Community Edition instead.
I think the point of Span&lt;T&gt; to be structs by reference. The "in" parameter is basically the same thing; only "readonly ref" is accepted; and if it is readonly ref then the struct is passed by reference despite being on the stack.
Yep iTextSharp is very flexible, they had an example on their site of an invoice template styled with different colors and images, if you want to have different clients to have different themes, you'll have to track their theme styles and then apply then according (depends on the client)
currently we are deploying our app as a windows service, so our web server component is written as a netstandard2 library and consumed by the host service (net472). This change means that i'll have to try and accelerate migrating everything else to standard or core, since the host application would have to target core.
As if rewriting is the only issue. EF Core is just terrible. I expect another 5 years before it catches up with EF6
Just curious. Why such a desire to switch to Linux?
I feel better on this OS, Idk why, it have tried it and it is really nice
Not sure what you're asking for here. But feel free to send us a message via modmail.
I see only one reason for desktop linux: escape from corporate malware. OSX used to be an escape from crazy antiviruses, scanners and other performance-sucking evil. Now OSX is also screwed. Linux is the last remaining safe place.
That's what I initially thought, but given your example, G34 should be in chapter 1, page 40. However, page 40 is in chapter 3. If you look at G23 you have "??-44". As for the rest of the examples, those pages have no references to the heuristics at all. 
You can also get extremely good performance on old hardware with Linux. My main desktop is a Dell Inspiron 530s Core 2 Duo (from 2005; yes my computer is 13 years old). I can barely run Windows 10 on it. I am however running Kubuntu 18.04 right now and everything is extremely responsive.
Depending on your background with other languages i’d say just start using it and learn along the way, apps like sololearn can’t really teach you more than syntax and simple concepts
ActiveX was used to send executable binaries to run on the client-side. *Anything* done that way is unsupported now, and for good reason. But it's 100% supported to use System.Drawing in server-side code. It's very commonly used to generate or manipulate a System.Drawing.Image object, then send back the HTTP response with `Content-Disposition: attachment;filename=blah.png` and write the image as a byte[] into the response stream.
Yes it is possible and I’ve seen customizable reporting /docs done quite a few times now at different companies/systems. Each time I can recall was cool to see at first but it never ended up well. The main problem always came down to users just not wanting to do shit themselves in the first place and then the eventual new requirements get added over time that turned them into a nightmare from a maintenance standpoint. 
It's a partial class, so you can add a second file and extend the class with a new constructor that way. 
I did see that and did try it however it fails to make the tab less wide but it makes it shorter but still visible.
I like SoloLearn and use it to introduce myself to languages I've not used before. I like it because it lets me learn a little in a situation where I'd otherwise be doing nothing productive. But don't fool yourself, SoloLearn not helpful beyond obtaining a very basic introduction. If you are at home using an App like SoloLearn, I think you are wasting your time. &amp;#x200B; I can recommend the [C# Yellow Book](http://www.csharpcourse.com/), it was my first book on C# and I think its a good introduction. Ultimately you need to practice by writing code.
Nice job!
So, I posted it to the subreddit a while ago, but this month I'm finishing up the NetStandard Packaging for my [Job Scheduler](https://github.com/to11mtm/oddjob). In the process of doing so, I've managed to add some features, and learned way more about Reflection than I'd like to admit.
Have you tried Linq2Db? If you're already resorting to stored procedures and losing object tracking, you may want to give it a shot.
&gt; But it's 100% supported to use System.Drawing in server-side code. It's not. Check the documentation: https://docs.microsoft.com/en-us/dotnet/api/system.drawing?view=netframework-4.7.2 &gt; Classes within the System.Drawing namespace are not supported for use within a Windows or ASP.NET service. 
EF Core suffers from the same problem as EF6, just on a completely different axis. They both try to do way too much. In the case of EF6, It was all of the mapping types, all of the inheritance types, the proxy support, the interception... I could keep going. In the case of EF Core, They are trying to instead be an all-encompassing abstraction over a data store. **IMO** In the case of the former, all of the complexity led to a pipeline that just couldn't really be optimized. In the case of the latter, there's too much fear of putting themselves in too much of a compatibility corner between the very disparate data stores supported. To be clear, I'm not one of those people that thinks NoSQL has no place. I'm one of those people that thinks it's the right tool for a lot of jobs, just like an RDBMS, *but the way you use each should be conceptually different*.
Thank you for your reply. I'm not anywhere near hopping on the ASP ship yet, still brushing on the basics. Yeah, the book does seem to cover all of the begginer stuff but I was hoping to get a feedback whether it's actually begginer friendly. No way to know other than to jump in and see for yourself I guess.
I did not say that it "is" a migration path - I said it "serves" as one. This was in reply to the comment that it is a waste of time. I was specifically highlighting one of its uses that makes it not a waste of time. 
No. EF Core suffers from the problem that most things don't work.
As Frustrating as this is, I disagree. .NET Standard is still a thing. And in .NET Standard, the concept of Backwards compatibility *does* exist. i.e. I can run 1.6 libraries on 2.0, etc. What that *means* is that ASPNet Core applications can absolutely still consume these libraries. *On the other hand*, if your Library required ASPNet core to function.... yeah, you may have a problem, based on this announcement.
When you put it that way... One has to ask whether this is EEE all over again.
Ooo TIL.
I was using http://json2csharp.com for this purpose. Having a built-in function in VS is good. 
You'd probably best take a look at the object model outlook (and other office components) are using. The VSTO Add-in documentation should help you get you on the way. https://docs.microsoft.com/en-us/visualstudio/vsto/architecture-of-vsto-add-ins 
the following lines will output the values to the Console window &amp;#x200B; foreach (int userage in useragelist) { Console.WriteLine(userage); } &amp;#x200B; \------------------------- Also, a little naming convention hint: userAges (plural) so that when getting a single object, such as this loop, you ask for the singular name (Users and User, Cars and Car, etc)
I am perfectly happy with EF6. I downgrade to pure SQL when I see fit and even then EF6 has better tools for executing it that EF Core. EF Core is like EF1. Insanely immature. EF became mature at ~ version 5. EF Core was totally not needed. Also why do I need an ORM for non-relational databases. Come on R stands for relational
Thanks, I'll look it up and see what I can do with that ;-)
The only part I don't understand is why `equalsName` takes 2 parameters, but `equalsID` takes only one. Other than that, it looks relatively straight-forward. Do you have any specific questions?
Thanks. Will do.
Presumably whether the arguments match the current instance values.
Thanks, thing is the console just closes the second it opens, is this a problem on my end or is there something I can change?
The program is running to the end - As designed. You can easily stop it from ending by adding this line: &amp;#x200B; Console.ReadLine(); &amp;#x200B; This will prompt your program to wait for you to input a line into the Console and not finish your program until it has gotten that line.
Why don’t you go to office hours and ask your prof?
I made an assumption that you are using Visual Studio to run your code. If that is the case, select the VIEW menu, then OUTPUT. 
Looking at the professor's code, there is no "name" field, but there is a "first" field and a "last" field. So `equalsName` has two parameters because one is the first name and one is the last name.
Let me start by saying there are many things wrong with your professor's code. The biggest issue I have with it is that he’s made a class called "info". Info of what? A building? A bank account? A film? Looking at his code, it seems like it’s the info of a person. So the class should be called "Person". Now that we’ve established that, understand that you can make objects from this class, and each object represents a person. You can send messages to the object, and the methods indicate the messages you can send. Your professor is asking you to make a method called "equals", where you send a message to a person, giving it another person for it to compare itself to and say yes or no, this is the same person. Then he wants a method where you send a name (first name, last name) to a person and say "is this the same name as you?". And a third method where you send an id to a person and say "is this the same id as you?" That’s the first part of the assignment. I don’t have time to go over the rest right now but hopefully that’s got you going the right way.
As well as the other suggestions for not having the console window close straight away, pressing Ctrl-F5 (instead of just F5 or pressing the Run toolbar button) will prevent it closing straight away. This method does have downsides (it doesn’t allow you to debug the program), but I find it the easiest method to use - just remember to not use it when you start learning about debugging.
Thank you. As a tets I just put that blob of json \^ and voila, 11 classes ready. Beauytiful (sp).
I get the impression you are working on a lesson having to do with objects and equality. This may seem like I'm pointing out the obvious but this is a special topic in programming languages since equal for most complex data types does not mean "the same contents" like it does for fundamental data types but instead "the same existance to the same referenced data." It also goes into how your custom classes need to have their own definitions for equals() and compareTo() and toString() and others. What book are you using for the class and what chapter are you on?
I have Microsoft Access installed and I had both versions of Visual Studio but I uninstalled the 2015 version however the problem is still happening
I don't think that this is applicable to my code as I didnt use Jet driver
Is this really for C#? The formatting is way off... If your professor wrote those instructions and that CodePile it hurts my heart, I'd bring it up to them or complain to someone in charge :( * Overwhelmingly Class and Method names are "CamelCase" * "Object definition" doesn't really make sense in C#, since objects represent instances of a type, unless they are actually asking you to edit the "Object" type definition, which I'm confident they are not. * Why are they not providing the return type and full qualifying information for method arguments? IE `bool EqualsName(string firstName, string secondName)` * There is already a method `Equals(object obj)`, since all classes derive from Object. If they want you to override it its not clear why. Same for `ToString().` &amp;#x200B; I agree its not very well defined and you should ask them. My best guess is as good as yours. The idea though is that you need to add methods to some class, that do what they sound like. Validate however the code sets the ID field so that the input is between 10xxx and 99xx. My guess is the CompareTo method would compare one of your objects properties, or its position in an array to that of another. &amp;#x200B;
I feel like you're missing my point. Said point being that EF6 over focused on pipeline and querying features over compatibility and wound up failing at end functionality for it's potential user base. EF Core overcompensated for this by trying to handle compatibility but completely failing at actually making sure things worked by version 1.0. I'll take this opportunity to note; if you look at raw timelines, EF Core was first put on Nuget in 2016. By that measure, t's 2.5 years old, and **if we compare to 'EF Classic' it is still at least 2 years behind EF5**. But instead of focusing on making sure EF core has functionality close enough to at least an EF5/6 level as reasonable, they're off dabbling in supporting NoSQL. *In any case* Just start dealing with the DB a little more directly. Moving to Linq2Db was great for our team because we could start easily testing our DAL via SQLite; Not like the mess with EF6 or EF Core where the abstraction layer caused our queries to break. By the time I can do what I want to do with EF6, I may as well be using a more raw abstraction. The amount of BS you have to go through for things like Single-round trip updates of even a single entity, let alone multiple is absurd. To say nothing of actual performance in such scenarios. EF Core was needed because EF6 performs like garbage in a number of scenarios. Like NetStandard. Microsoft needed a way to make a cleaner break. BUT, Microsoft's data team missed the plot here; Rather than following the path of ASP.NET and providing a usable library, they've managed to frustrate a few people, including at least one vendor in their process of making the big shift.
I feel your point is wrong because EF6 works. EF Core doesn't. I disagree with the notion that it is failing at least if you use it with SQL Server (I have not used it with another DB)
&gt; I feel your point is wrong because EF6 works. EF Core doesn't. To restate, I agree that EF Core can in many cases work WORSE than EF6. but.... &gt;I disagree with the notion that it is failing at least if you use it with SQL Server (I have not used it with another DB) **That was the entire problem with EF6**. If you were a company that used .NET with Oracle, the perception you'd get from Linq2SQL (EF's precursor) and EF was that Microsoft wanted you to shift to their platform to use their technology. If you didn't, and weren't lucky enough to have picked Postgres in the past (where people have done an amazing job to make things work) you were SOL. [BTW, Have a look](https://github.com/RepoDb/RawDataAccessBencher/blob/master/Results/2017-11-20_NH5.txt) at where we can see that EF6 is STILL at least 5X slower at Change tracking fetches than Linq2SQL, which means it's still *even slower* versus any sort of framework that allows single round-trip-updates. **In any case** If you ever used EF6 with anything other than SqlServer or a properly versioned Postgres, you'd know my pain. You wind up fighting two battles: - EF6's Expectation that the underlying DB understands SQL Server Concepts - Fighting with Datatypes (Mostly applies to Oracle, but that was/is one of Microsoft's biggest competitors in the commercial space) Oracle did not support `APPLY` till 2014 in 12c; and Oracle isn't cheap to upgrade. PostgreSQL started supporting `LATERAL JOIN` (equiv to `APPLY`) around the same time; at least there weren't licensing costs involved. MySQL? I'm still not sure if it is properly supported yet. My response is also colored by witnessing a different team convert their NHibernate DAL to EF6 on Oracle 10/11. The result was months of testing different scenarios and rewriting when the compiler wanted to generate an `APPLY`. *It performed worse at the end, but it was on the 'happy MS stack' so who cares?* So yeah. Microsoft alienated a bunch of their user base, who meanwhile started exploring alternatives like Dapper and Linq2DB 
If EF6 really doesn't work well with Oracle they should have fixed this. EF Core doesn't work well with anything. BTW how come EF6 work well with postgres but not with Oracle. Aren't they supposed to be somewhat compatible in terms of SQL?
Do you have any evidence that it's a vocal minority?
In my experience there is nothing that comes close to Visual Studio on Linux. That doesn't mean it's not possible to do and/or not possible to do well. Just the other day I was writing code in Monodevelop on a Raspberry Pi and it worked fine for what I needed to do. My suggestion is to dual boot for a while. Take the other great suggestions given here and see what you can do with them on Linux. You may find the experience very good. Personally, I can't dump Windows even as much as I want to and Visual Studio is one of those reasons. I do spend quite a bit of time in Linux, however. 
Depends what you want to run it on. WPF is probably your best bet in the C# world for desktop. Its windows only ATM but apparently its being ported to .NetCore which would enable you to port your app for Mac/Linux
Acquired by Microsoft in 3.. 2..
As pointed out above, most of the issue is in/around the `APPLY` Keyword. Oracle Pre-12 doesn't have the capability to support it. Same for Postgres before version 9.3-ish. Good providers will try to make a best effort to rewrite the query to 'avoid' an apply, but *you still don't know till runtime if the query won't throw*. The EF providers make a 'Best Effort' to avoid the query generating an apply. However, the apply itself comes from level of abstraction higher up, making it difficult for providers to know how to best rewrite the query. This often precludes concepts like using CTEs or `RANK` (I've used both of these to get around lack of `APPLY`, but I've yet to see a LINQ provider do so.) By the time the expression tree gets there, you don't have enough information how to do so. The core issue is Entity SQL (at least, the iteration EF classic is based on) *assumes* that `APPLY` is a concept. As mentioned above, nobody else really supported it well so it became a red herring in the impure MS stack. Don't get me started on the damage of things like that.
I have *minimal* experience with unmanaged C#. I have had to do the pointer-math dance in the past however. That said, most of my high-performance code has **not** involved unmanaged C#, but rather designs that are performant in managed code. I'll also take a moment to point out that *marshalling* is not unmanaged code in and of itself. it's the process of translating the data from managed code to something usable in an unmanaged call. You can do things Unmanaged better than ever in the newest versions of NetStandard thanks to `Span&lt;T&gt;`, but I still have to ask... Why do you thin you want to do Unmanaged c#?
AFAIK there will be breaking changes. I am concerned that this will have a negative impact on projects like OrchardCore. What are your thoughts? 
Thank you for this. And it is indeed for C# and my professor did indeed also write this code :)
Here is the code I use. https://github.com/docevaad/Chain/blob/master/Tortuga.Chain/xTests.Tortuga.Chain.Access.source/custom/Setup.cs https://github.com/docevaad/Chain/blob/master/Tortuga.Chain/xTests.Tortuga.Chain.Access.source/App.config 
That could be your problem. Jet is the only driver I've been able to use to create new Access databases.
Thank you for the info. Honestly, we don't really use the textbook at all. He just sort of teaches on the fly and doesn't do a great job of explaining things. I've had to sort of teach myself alot of the stuff so far. We just finished up with arrays though.
So the problem with EF is the corner case with Oracle Pre 12 and Postgres pre 9.3? I'd say that's far better than the EF Core case where it doesn't work with anything.
Possibly. Still irrelevant. They replaced one option with obviously worse option. In version 2.1 still it is significantly worse.
&amp;#x200B; &amp;#x200B; Hi I added a screenshot from SmartPivot to show what exactly I want to achieve.
What about Oledb ? Will that work as this is how I am creating my system
&gt; They still both are inadequate at the end of the day. Yeah... like 10 successful and paid for by customers project I have built with EF6 tend to disagree and I am not the only one. I ported one to EF Core and it was really painful and took a lot of time so I vetoed one other migration to Core.
Tough call... Supporting `IQueryable` is a hell of a lot of work. As someone that's written a couple in-house (sometimes micro)ORMs, I'd state that in the current landscape there are options supporting `IQueryable`for my use cases that I wouldn't write my own, so you'd have to do better than that to get my attention. Which is a tough order to fill. Looking at RepoDb's documentation, there are a lot of things about the syntax that I like. If it could support IQueryable to the extent other options did out there I would consider it. As a design gripe, from the docs: &gt; Note: Querying a record using PrimaryKey will throw a PrimaryFieldNotFoundException exception back to the caller if the PrimaryKey is not found from the entity. This feels like an overabstraction of a corner-case to me. I'd rather have the same behavior as if I were doing any other query not based on primary key that I was expecting a value from.
It's for when you use your class, particularly when you have many instances. You can check the id of it against an existing value in your code
If you write a line of code like: &gt;a=1 Nowhere did you tell it to show you "a". You only set the value of "a". There's a lot of ways you could show "a": &gt;print_to_console(a) &gt;open_message_box(a) &gt;send_email(a,"my_email@gmail.com") &gt;save_a_pretty_picture(name=a) Programming languages won't assume that you want to see everything you're working on. As for your "exit immediately" problem, depending on your operating system (like Windows) you may have things set up so the program runs and then exits because it's done. You'll need to add a system pause or system wait or a wait for user input. I'm giving answers that apply to all languages, not just C#, since that seems to be your level. Also, this may not be a hugely popular opinion here but I don't think C# is the best language to learn how to code from zero. I recommend Python.
Trying to read all the code is next to impossible on mobile, so I'll ask this instead: have you tried running a debugger on the server while testing? What about on the client? If you're not getting the output you expect at the client then one of two things is happening, right? Either the server is sending back the wrong info or the client is ignoring the new info and reprocessing the old stuff for some reason. Once you narrow down the culprit you can step through line by line to see where the runtime state diverges from what you'd expect it to be.
I believe the .net core port of WPF will remain windows only. GUI on core is in an uncertain place at the moment. I'm currently just using a web-page for all my interface stuff, although I wouldn't recommend that for most situations
Thanks! Hope you enjoyed!
You can use anything that lets you draw on a canvas. UWP, WPF, even old WinForms if want. They've all got a 2D graphics library.
No, with the bash it's a superior work environment. Work gets done quicker on Linux, once you master the bash.
Why do you not want to create a temporary variable for Car? It reads cleaner from my perspective and makes it easier to debug. If you must, extract out the httpclient call to a method that returns car. Also, please don't use using with [httpclient](https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/) 
[https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/](https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/)
It's actually in the docs, if it wasn't in the past: [https://docs.microsoft.com/en-gb/dotnet/api/system.net.http.httpclient?view=netframework-4.7.2](https://docs.microsoft.com/en-gb/dotnet/api/system.net.http.httpclient?view=netframework-4.7.2) "HttpClient is intended to be instantiated once and re-used throughout the life of an application"
Yup. Same here. "Why aren't our Mongo calls working? Oh, because we're using up all the sockets elsewhere with HttpClient"
The documentation is a mess. They added the warnings in v110, then removed them in v118. https://www.infoq.com/news/2016/09/HttpClient
Oh, that's right. If any one library screws this up, all of the other libraries that use network access can fail. 
I'm not sure how that is relevant, but I'm interested in seeing how you're going to turn this into evidence so I'll bite. &gt;What programming language besides Java and C# (and any invented in the last 10 years) use XML for configuration? None that I've used.
UWP or WPF are good choices. You could also use https://github.com/Microsoft/Win2D. They have some demos of zoomable tiles interfaces.
WinForms and wpf core will not be cross platform. They are too closely tied to Windows. They will simply target core meaning you don't need the full framework anymore. 
Wpf or WinForms would both be fine for this. WinForms would be easier. You could also look at monogame or unity.
Hey thanks for that link about using `using` with `HttpClient`. As to why not using a temp variable, I was wondering if there was any other way of doing this, hence the question. I finally did it using `Func` but it is way too ugly. I am going with temporary variable. Thanks!
Right, but if the generated code already has an empty constructor, is there a way to extend it? I thought that wasn't possible for constructors.
“This is a test” is a string literal, if you want a char array you would do { ‘a’, ‘b’, ‘c’ } But, yeah, just use strings and as a beginner don’t worry about the implementation other than they’re immutable and a reference type.
I am perfectly able to replace the EF code myself when it can't scale
Dns.GetHostEntry works for netbios too, it's calls into the local dns client cache which uses netbios as fallback (as long as netbios has been configured on the NIC). But if you still prefer to use getnameinfo() you can always use P/Invoke to call native functions. 
in C# there's broadly no need to use char arrays. Although you can do this: char[] myCharArray = "Foobar".ToCharArray();
Can you not replace the Tip Calculator with an actual deployed webassembly using FrogUI? Also, the information about license costs, usage limitations for community edition, etc is already putting me off. This is nothing specific to FrogUI. We (work and me personally) never invest time without at least ball park pricing and a commitment to being in that ballpark. It looks kind of interesting though. 
Thanks for your feedback! It's exactly what I was hoping for. &gt; Can you not replace the Tip Calculator with an actual deployed webassembly using FrogUI? I don't understand the question. Would you please clarify? The Tip Calculator and all examples are 100% WebAssembly and FrogUI. &gt; Also, the information about license costs, usage limitations for community edition, etc is already putting me off. This is nothing specific to FrogUI. I see what you mean. Most energy has been put into getting the development to this stage. Do you have any recommendations about licensing and prices?
It’s a screenshot lol 
 &gt; I don't understand the question. Would you please clarify? The Tip Calculator and all examples are 100% WebAssembly and FrogUI. The Tip Calculator link in your OP takes me to https://i.redd.it/sggcmhf384w11.png 
Use StringBuilder class if you need to assemble strings piece by piece. var sb = new StringBuilder(); sb.Append("Tommy"); sb.Append(" is"); sb.Append(" sick.") var finalString = sb.ToString(); This is generally the best way as it is both easy to work with (no length/index tracking by hand) and fairly efficient (no unnecessary string interning). Or you can use a newish feature called string interpolation. var name = "Tommy"; var verb = "is"; var directObject = "sick"; var finalString = $"{name} {verb} {directObject}."; You'll find many examples using string.Format, but string interpolation is newer and probably better way to do it. But just to show: var finalString = string.Format("{0} {1} {2}.", "Tommy", "is", "sick"); Where the 0, 1, and 2 are immediate value index reference the remaining params[]. Avoid using the + operator on strings (i.e. var myString = "Tommy" + " is " + " sick.") as it will waste cycles and memory interning more values to the string intern pool than necessary. 
It's a bit slow to load, but I found live demos [here](https://lesarde-co.github.io/). Tip Calculator is at the bottom.
How would I know that things are need to be public? Ps. Sorry beginner here✌
I've played around your online examples [here,](https://lesarde-co.github.io/) and I have to ask: Why is it so slow? It took several seconds each time I pushed a button on the calculator, and generally felt pretty clunky. Furthermore, would this work with the MVVM library titled Prism?
That's exactly what it is, what part is confusing you? https://msdn.microsoft.com/en-us/library/4bftz997.aspx
Thanks for checking Frogui out. &amp;#x200B; \&gt; Why is it so slow? &amp;#x200B; Two reasons. Primarily, it's slow because the Microsoft Xamarin team's C# -&gt; WebAssembly compiler and runtime has not been completed. So in the meantime they've provided a bridge that allows immediate use albeit extremely slow. When they release the full compiler and runtime, speed will be virtually native, i.e. much faster than JavaScript. &amp;#x200B; \&gt; Furthermore, would this work with the MVVM library titled Prism? &amp;#x200B; My guess is, out of the box, no, but I haven't tried. How important is Prism for you, and what are its key features of interest?
public double factorial_Recursion(int number) { if (number == 1) return 1; else return number * factorial_recursion(number - 1); } How does "return" work here?
public double factorial_Recursion(int number) { if (number == 1) return 1; else return number * factorial_recursion(number - 1); } How does "return" work here?
Thanks for checking Frogui out. &gt; Why is it so slow? Two reasons. Primarily, it's slow because the Microsoft Xamarin team's C# to WebAssembly compiler and runtime has not been completed. So in the meantime they've provided a bridge that allows immediate use albeit extremely slow. When they release the full compiler and runtime, speed will be virtually native, i.e. much faster than JavaScript. &gt; Furthermore, would this work with the MVVM library titled Prism? My guess is, out of the box, no, but I haven't tried yet. How important is Prism for you, and what are its key features of interest?
I assume you mean the else clause? else return number * factorial_recursion(number - 1); } This will return ```number``` multiplied by the result of factorial_recursion(number - 1) You can think of this like a loop instead of that helps int result = 1; while(number &gt; 1){ result = number * result; number--; }
Well, it's generally easier to work with it. The bindable base class allows to simply call which property changed, and the Delegate Command class streamlines working with commands.
Hmm looks interesting, however running pretttttty slow at the moment... ?
Admittedly, I have not used Prism. But based on your comment, I suspect you will be pleasantly surprised in how Frogui has evolved WPF. Frameworks like Prism (though, not Prism) have influenced the API. For example, the Frogui `DependencyObject` is designed to be used for models and view-models so its `DependencyProperty` properties can be used just as in WPF. That also means Frogui's *API-level* integration of \[Reactive Extensions\]([http://reactivex.io/](http://reactivex.io/)) allows properties and events to be be observed in a thread-safe way and do magical things, such as filter using a LINQ-based criteria declaratively; extremely powerful. I recommend perusing the \[sample code\]([https://github.com/lesarde-co/frogui](https://github.com/lesarde-co/frogui)) because it demonstrates all this in action. &amp;#x200B; There is also support for commands, of course, but I will look into Prism's Delegate Command and if there's something there Frogui does not have, it will be added!
You need to replay step by step what is going on for e.g. number 5. Do on paper every step this function when called from main program with parameter 5. When you have difficulty with that, write here.
Yes, very slow! I'll quote myself from above: &amp;#x200B; \&gt; Two reasons. Primarily, it's slow because the Microsoft Xamarin team's C# to WebAssembly compiler and runtime has not been completed. So in the meantime they've provided a bridge that allows immediate use albeit extremely slow. When they release the full compiler and runtime, speed will be virtually native, i.e. much faster than JavaScript. Secondly, to a lesser extent, Frogui has yet to be optimized.
What's the problem you're having?
not getting past line 4. Tweaked it to: Console.WriteLine("Player one enter a number 1 to 10"); int numberToGuess = Convert.ToInt32(Console.ReadLine()); while (numberToGuess &lt;= 1 || numberToGuess &gt; 10) { Console.WriteLine("Not a valid choice, please enter another number"); } int guess = Convert.ToInt32(Console.ReadLine()); guess = 0; int numberOfGuesses = 0; while (guess != numberToGuess &amp;&amp; numberOfGuesses &lt; 5) { Console.WriteLine("Player two have a guess."); guess = Convert.ToInt32(Console.ReadLine()); numberOfGuesses = numberOfGuesses + 1; } if (guess == numberToGuess) Console.WriteLine("Player two wins."); else Console.WriteLine("Player one wins"); 
See my update to my original comment.
Such a silly mistake. It's fixed now, thanks for your help &lt;3 
Haha, happens to the best of us! My pleasure :)
ASP.NET MVC will be no more complicated than WinForms and more relevant in the long run. [Machine learning in C# from the ground up](https://www.youtube.com/watch?v=z8DY5DndmxI) Patterns are easy to learn but it takes a bit of experience to figure out whether you've applied a described pattern accidentally and whether you can apply a pattern proactively. Read up on GOF patterns. In addition look at MVC and if you do do Winforms, MVP (Model View Presenter, not the Microsoft's MVP programme). ADO.NET. Relational databases start with two concepts: Normalisation and denormalisation. Start with that and it will make it more obvious how to figure out what you need to do in ADO.NET. Unit testing is hard. Seriously. It's easy to write a test, it's a bit of a slog to figure out how to test things in a way that isn't brittle (needs to be changed if you make irrelevant changes to the source). NUnit or XUnit are good starting points. XUnit has been adopted by Microsoft, but either is fine. Also look at mocking. I'd start with Moq purely because I've used it for a long time and see mocking as an anti pattern. For ideas, I've no idea what will interest you. I like cars, you may like... well anything. There's a website [which implements a to do list in every web framework](http://todomvc.com/). It's not a bad place to start, you could easily do one in winforms of (more advisable (ASP.NET MVC).
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers
Yes, I've done this quite a bit, but 99+% of the time, managed performance is just as good as unmanaged (in fact, managed performance can be better than unmanaged). What are you trying to learn? How to add your own unmanaged code to a project? The easiest way is probably to write an unmanaged DLL with C functions and call those functions from C# using P/Invoke (DllImport). 
Thanks! I will think about ASP.NET then! When it comes to unit testing I just want to grab idea and show that I can implement it in my project.
Safari refuses to load it: [Info] Content blocker prevented frame displaying https://lesarde-co.github.io/ from loading a resource from https://lesarde-co.github.io/mono.wasm (mono.js, line 1) [Error] Resource blocked by content blocker getBinaryPromise (mono.js:1:20116) instantiateArrayBuffer (mono.js:1:21387) doNativeWasm (mono.js:1:22070) (anonymous function) (mono.js:1:23462) Global Code (mono.js:1:168034) [Error] Fetch API cannot load https://lesarde-co.github.io/mono.wasm due to access control checks. getBinaryPromise (mono.js:1:20116) instantiateArrayBuffer (mono.js:1:21387) doNativeWasm (mono.js:1:22070) (anonymous function) (mono.js:1:23462) Global Code (mono.js:1:168034) And so on
Note that `GetHostEntry()` internally calls `GetNameInfo()` anyway. [GetHostEntry](https://referencesource.microsoft.com/#System/net/System/Net/DNS.cs,dc01bdebe3fce795) calls [InternalGetHostByAddress](https://referencesource.microsoft.com/#System/net/System/Net/DNS.cs,cfadeb20b4303841), which calls [TryGetNameInfo](https://referencesource.microsoft.com/#System/net/System/Net/DNS.cs,540330eccf807fa6), which calls [GetNameInfoW](https://referencesource.microsoft.com/#System/net/System/Net/UnsafeNativeMethods.cs,e6e8830c3475c929).
Thanks for sharing this. Sorry for the inconvenience. I believe this is an issue with our [github.io](https://github.io) server's configuration. I tried experimenting a few months ago with no success. Solution may be to find a different host.
Good luck :) For the unit testing just start with writing tests. Don't worry about quality just get some tests in there. The important thing is to start and be fine with being a beginner, we've all been there :)
No worries, it was just a stream of things I thought of at the time. Best wishes :)
Thank you!
It doesn't have to be static, you need to specify the object on which the callback is to be invoked, like this: MyClass instance = new MyClass(...); var callback = new AsyncCallback(instance.ReadCallback);
Great work bud, I would suggest you make it free for personal work, then charge commercial by the number of developers for small, and full site liscense for large or make it full free and chatge an advanced component set and direct support.
Yeh I changed it to Jet and it worked fine thank you!
Thank you! As you can see, your feedback from the last release did not fall on deaf ears: XAML is in. It set the schedule back five weeks but I am already seeing significant benefits and really with it. So again, much appreciation. I like those licensing ideas -- sort of how my thinking is treading, too. Thank you.
How is client-side scripting done?
Just came to say that Prism support would definitely make me try it. Bryan from Prism is insanely smart and lovely person to listen talk about his (albeit adopted) project.
How does this work with garbage collection? Also I'm confused on the web assembly bit. Is this really web assembly or is this web assembly compiled to JavaScript?
I hear you! I don't know the Bryan you are referring to, but I'm sure I can find him. I'll look into Prism. What I'll be looking for is whether it's something to integrate, as was done with Reactive Extensions in this release, or borrow ideas from. Any thoughts?
This seems a very awesome idea that it can be really a huge game-changer(Especially with Blazor that is supported by Microsoft and this project now) But unlike Blazor(supported by Microsoft), this is a work of the community and I have seen a lot of abandoned cool projects so I'm really afraid that this project's future will be the same like many projects before.
Thanks for the questions. &gt; How does this work with garbage collection? Ultimately (i.e. when MS Xamarin completes wasm compiler), my understand is GC will work the as it does with other .NET flavors. &gt; Also I'm confused on the web assembly bit. Is this really web assembly or is this web assembly compiled to JavaScript? Yes, this is a very confusing concept! For years transpiling languages to JavaScript was now other languages were used on the web in the client. Fortunately...FORTUNATELY...those days are numbered! This is true, 100% native compilation / Jitting of C# to IL that runs in the browser. Underneath there is tiny, tiny, tiny bit of bootstrapping JavaScript but that's it.
Thank you for the vote of confidence and wisdom! Your concerns are legitimate. Momentum will be required to make Frogui a framework you can count of for years to come. I am giving it my all on the development front and really want to see Frogui blossom into something special. I've been flying under the radar, only posting in this forum actually, but will begin heavy evangelizing after Tech Release #3. For clarity, this is presently a closed-source project that will always be available free to the community with commercial licenses being explored for companies. I hope you give Frogui a try! I'd love to know what you think.
You could try learning Blazor? That's quite cutting edge. It's also cross platform. 
This is pretty cool, I hope you can get traction with it. It seems like you will be competing with CSHTML5 (if you look on their site, they have an example of using their XAML with WASM) and to some degree Uno (although that's UWP, it is still XAML). As others have implied, licensing could be a make or break deal. I'd second the non commercial for free approach to encourage early adopters. 
I appreciate the input and well-wishes. I'm aware of those players :) In fact, the Uno team and I stay in touch about this and that. All three of us have differing philosophies, with Frogui allowing browser power to drive our API in addition to WPF et al. &gt;As others have implied, licensing could be a make or break deal. I'd second the non commercial for free approach to encourage early adopters. If you don't mind, I'd love to hear your thoughts on the matter. This is an important topic and I'm still trying find good footing -- too much time developing :)
&gt; I like sports and I was thinking about betting system, but that's machine learning, probably not suited for C#. Don't think of sports - your interviewers may or may not relate to that and you don't want them to not understand your sample app because they don't understand the sports. Think of boring business software - like something to keep track of time cards or something to keep track of help desk complaints or to take phone messages. (30 years ago I made a database-backed application at one of my employers that put a pink "while you were out" slip on screen, let them fill it out, and displayed it when the recipient checked in. They loved this. They particularly loved that it looked just like the paper slip they were used to.) In software development most of the money is actually in boring business applications, so think of something in that line for your example app. &gt; I think I will do my project in WinForms as learning ASP.NET could be too much (I give myself 3 month frame). Do you know Winforms? Do you know HTML? If you know HTML, you should be able to learn ASP.NET (enough to do a respectable application) in an hour. If you don't know either yet, you will learn ASP.NET much faster. If you already know and are comfortable with Winforms, great. &gt; I scrapped some stuff from internet and put it to database - I can show it to potential employer but I can’t make it show it on GIT as it would be not legal. No, but putting the code that did the scraping on GIT would be legal, and if you write a program that collects some useful information from the web and puts it in a database, that would be a good sample app to show at an interview. 
Have you looked at String.Replace?
That looks like a great possibility. It reminds me of the more familiar SQL logic (I'm a data miner so I'm waaaay out of my element in C#). Forgive me if this is stupid but where would you list it? Would it be like: string query = "Insert into " + SchemaName + ".[" + TableName + "] (" + ColumnList + ") "; query += "VALUES(string Replace (char ' ', char 'NULL')" + line.Replace(FileDelimiter, "','") + "')"; That looks to be the field definition spot and I know in SQL that may be where we did an ISNULL but C# appears to function quite differently so I'm not liking my chances of being right there. 
Blazor is interesting, but its future isn't really certain. WPF seems promising since it will supposedly be portable to .NetCore in 3.0 &amp;#x200B; Honestly it depends on what kind of apps you want to develop. For mobile its Xamarin
Mostly focusing on Windows desktop apps for now. Probably going to try out WPF. 
Cool! Be ready for a bit of a bump in difficulty compared to WinForms IMO, but stick with it and you are in a good spot.
The real question is why do you need to expose them? Chances are if you're doing that there is an issue with your design.
If you can't find this as a pre-made control, you would need to make it with a graphics API. Direct2D for UWP is very good, very very fast. If you want to support more platforms, go Xamarin.Forms and SkiaSharp.
I found https://www.wpf-tutorial.com/ to be a great first step for WPF. After that, you would need other resources to learn MVVM and advanced styling techniques, but for getting started it's clear cut and easy to follow. 
Hmmm, last time you posted you wanted to use C# as a form of DSL for defining UI. Now you are using XAML. What made you switch direction (or maybe I mixed up which project is this)?
Thanks I will have a look at this one as well. Push comes to shove, this is what I will end up doing. 
Well, they apparently got added back in at some point because they're clearly in the docs now.
c++ didn't have `std::string` when the language was invented while C# did have `string` aka `System.String` when the language was invented. Hence string literals in C# are of the actual string class rather than just being a char array.
What have you tried? What don't you understand? Right now, you've shown us that you made no effort to understand. https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/methods
This is neat but I'm generally curious as to what benefit this has over native web development with HTML/CSS/JavaScript? Yes, you get to use C# and XAML, so in regards to the amount of tech in your stack you can cut out the aforementioned three plus whatever framework you would need to do it right. But frankly, I find XAML and WPF a lot harder to work with than your usual web stack. Modern Web UI frameworks and libraries are very expressive and powerful with little work. I'm curious how many people prefer the XAML style of things to traditional web, or react, or Angular.
Look into parameterized queries.
this is what i''ve tried so far &amp;#x200B;
Great input and questions! I'll answer in reverse order. &gt; Yes, you get to use C# and XAML, so in regards to the amount of tech in your stack you can cut out the aforementioned three plus whatever framework you would need to do it right. But frankly, I find XAML and WPF a lot harder to work with than your usual web stack. Modern Web UI frameworks and libraries are very expressive and powerful with little work. I'm curious how many people prefer the XAML style of things to traditional web, or react, or Angular. Let me start by saying, as someone who has done a fair amount of traditional web tech development and a substantial amount of Silverlight and WPF development, I hear where you are coming from. You may have picked up on this: I've tried to make it clear that WPF serves as a design launch point, but that Frogui also draws heavily from the web (HTML / CSS / SVG) for design inspiration, as well as other sources. So. As the creator, you have my undivided attention. I'm not interested in pushing WPF, per se, but creating an API that is smart and robust (and as familiar as possible so long as it's not compromised). A good case in point is **Units**. I'll quote from [Frogui Compared to WPF](https://www.lesarde.com/compare-to-wpf): &gt; The WPF unit of measure is a device-independent unit (1/96th inch). Frogui uses all of CSS3's units of measure (%, cm, em, ex, in, mm, pc, pt, px, vh, wv, vmin) comprehensively. A Length struct is used instead of a double. All that said, Frogui is a few releases from being able to full demonstrate it's advantages, so I'll limit the rhetoric for now :) &gt; This is neat but I'm generally curious as to what benefit this has over native web development with HTML/CSS/JavaScript? One benefit is performance. Once the MS Xamarin wasm compiler is complete, native (as in compiled to the native hardware) apps will simply be playing a different game than interpreted JavaScript. As for HTML and CSS, the proof is in the pudding: these are brilliant tools. I just happen to believe that the more complex a project becomes, the more important a type-safe cohesive API becomes; you don't get that with HTML/CSS/JavaScript. I hope you'll give Frogui a try and, equally, hope you'll stay in touch because I like the doubt and angle of approach. That was important after that last release and the community helped shape the API and expect it will happen again.
A perfect example of if all you have is a hammer, everything tends to look like a nail. Wrong tools for the wrong job.
Removed: Rule 4.
&gt; &lt;?xml version="1.0" encoding="utf-8"?&gt; I don't think .NET Core requires that for csproj files anymore. &gt; Imagine Well, you could have just linked to [your GitHub](https://github.com/SystemExt/SystemExt.Devices.Mraa) &gt; trying to reproduce what other libs Try following what this library does: https://github.com/mellinoe/ImGui.NET 
\&gt; I wasn't a big believer in the C# as DSL approach Cool, because I want believers! \&gt; Is it possible/meaningful to use Avalonia's XAML for this? I haven't studied their XAML but I have studied some of their product. I suspect that even at this early stage, Frogui is different enough from Avalonia so as to make having a compatible XAML challenging. &amp;#x200B;
Thanks for reply, but I'm not sure what you are replying to. Would you please clarify?
As much as I'd rather use C# than JS and HTML (no, that wasn't sarcasm), what are the benefits of using this API instead of JS/HTML? What does this offer in the way of speed, capability, etc that using JS and HTML would not? 
Using WPF\XAML for the web is like the hammer. This is a bunch of WPF\XAML fans who don't know how to "web" so they bend, and mold, and force their square peg into the round hole (don't mind the edges being shaved off). It's the same abhorrent thinking that brought the first iteration of ASP.NET and view-state... all so desktop devs could "web" without having to learn about the web. C# already has an answer for this... ASP.NET MVC. Yes, you need to learn JavaScript and how the web works, but it is a much better layer with greater flexibility. The problem will be, just as it was with classic WebForms ASP.NET, is that as abstraction layers get too lofty they get in the way and prevent you doing things that the "native" environment makes doing relatively easy (as long as you know how).
WinForms -&gt; WPF -&gt; Xamarin.Forms
Blazer, otherwise web wise you're best to javascript yourself with react or angular
Yet another XAML API which is very similar to UWP, Xamarin.Forms and WPF but not quite compatible?
What you are asking is rather trivial however I think the issue is you won't learn how to do it until you work through a bunch of those exercises. My advice to you is do them as separate projects until you understand how to do what you are asking. 
Most of us learned to code by coding. Don't worry about the best way to do it- just do it. The act of writing it will show you better ways to do it. The act of rewriting it will teach you more. Rinse. Repeat. When my generation learned programming 1) it was from a book, 2) the internet did not exist and 3)they didn't teach it in school. So we just started typing, and learning from our mistakes.
Yes and i used it, cmder.net is okay, so is the git bash. But it is not the real thing.
What is confusing me at this stage,-however trivial this is - is just how to do it. My problem was that i could modify existing code when it came for other scripts - like game scripting, but i was hardly able to write my own. I have learned most of the things i know is by aiming for something out of my league, and i would learn the steps needed to complete that. Like, 3d modeling or graphics, or video editing.. I would intentionally set myself a stretch goal, that i knew there was no way i could do just at the time, and i would learn the skills and methods required to achieve it. Rinse and repeat....so far, i would not say that this way of learning work for coding, at least in my case.
I appreciate the response. I'll take a look! I'm sure some people I work with will like this. Keep up the good work!
This is my advice: 1. Start a project and solve exercise 1. 2. Run it, test it, make sure it works. 3. Comment out all the code for exercise 1. 4. Using comments, label where the beginning and end of exercise 1 are. 5. Using comments, label the beginning of exercise 2. 6. Start writing a solution for exercise 7. Repeat steps 2 through 5 until you have written enough exercises that give you enough information to understand how to combine them into a single program. I would also advise that even before you start writing any code you install Git in your computer and init a Git repository in the folder you will use to store your exercises and learn how to commit code to that repository and then commit soon and commit often. That way you will be able to go back to older versions of your code in case you need to. Good luck with your learning journey. 
So Can I substitute recursion with while loop?
I would recommend the same like the others, too. But anyway for your "problem" if I understand it correctly, you could do some thing like: Make Console app, a while loop with deadline, then a switch statement with parameters 1-xx. Then you link the methods from the exercises with the statements and now call them on the fly in the Console. IDE question: I use VS Community Edition for C# and VS Code for everything else. But use what you feel most comfortable with.
Some hints: * Console.ReadKey() * switch/case * Google "C# &lt;Thing you are confused about&gt; and pick the first Stack Overflow URL
Where I am everything is moving to Web. So ASP.Net Core would be a good way to go.
&gt; i could modify existing code when it came for other scripts Ahh, programming in a nutshell. What exactly is confusing you?
Same here too. Despite me not being an C# developer, more and more services are going into web applications, even if the front end is native.
Asp.net (especially asp.net core) Cloud computing with azure.
Asp.net (especially asp.net core) Cloud computing with azure.
Just keep posting your questions. There are many of us who will help you in your journey. I don't think you need one specific person. This sub might be the mentor collective you need.
If you really don't asp.net then Xamarin wouldn't be bad idea, at least broadens your opportunities. 
Why did you decide to write another framework instead of joining forces with https://platform.uno/? That also uses XAML and C#, and you can use it to target mobile, desktop and native web apps.
Looks like everybody is recommending the web route...and me too :) &amp;#x200B; It would be a really nice compliment to your current skills, and if you aren't into the ASP thing then keep it minimal and focus on the UX. It might be a nice break for you and it's a solid bet for the future.
I think the trend says Core, but WPF is still used a lot and I dont think your software will be outdated just because you keep doing it in the moment. WPF will still be there for a long time. 
Clear and concise! Thank you!
`Span&lt;T&gt;`: I've [whipped up](https://github.com/airbreather/NetTopologySuite.Optimized/tree/552081bf5fd9cb83cedd0b07f26321f13726af8b/NetTopologySuite.Optimized) a bunch of types that use (`ReadOnly`)`Span&lt;byte&gt;` and operate directly on the [WKB representation](https://en.wikipedia.org/wiki/Well-known_text#Well-known_binary). This lets you treat any contiguous section of virtual memory as geometry (managed or unmanaged) and do things like [this](https://github.com/airbreather/NetTopologySuite.Optimized/blob/552081bf5fd9cb83cedd0b07f26321f13726af8b/NetTopologySuite.Optimized.Bench/Program.cs#L315-L335) in roughly 4% of the time it takes a more traditional idiomatic library to do [its equivalent](https://github.com/airbreather/NetTopologySuite.Optimized/blob/552081bf5fd9cb83cedd0b07f26321f13726af8b/NetTopologySuite.Optimized.Bench/Program.cs#L95-L114), with further room to optimize it [like so](https://github.com/airbreather/NetTopologySuite.Optimized/blob/552081bf5fd9cb83cedd0b07f26321f13726af8b/NetTopologySuite.Optimized.Bench/Program.cs#L340-L358) to run in only 103% of the time that [this glorious hyper-optimized loop](https://github.com/airbreather/NetTopologySuite.Optimized/blob/552081bf5fd9cb83cedd0b07f26321f13726af8b/NetTopologySuite.Optimized.Bench/Program.cs#L47-L89) runs in. Additionally, that code doesn't care if the virtual memory is backed by a managed array, memory-mapped file, some bytes allocated on the stack, unmanaged memory, or whatever other weird thing, so this code doesn't force you to copy all your data into an array like traditional idiomatic managed approaches might have done. `Memory&lt;T&gt;`: for when you want to use `Span&lt;T&gt;`, but can't, because you have an async method or want to store it after your method returns or something. Its own use cases aren't really that separate from `Span&lt;T&gt;`'s, as far as I can tell... it's just a way to get most of the advantages of `Span&lt;T&gt;` in all the places that you can't use it directly, at the cost of [potentially having to think really hard about stuff that the compiler just hand-waves away when you use `Span&lt;T&gt;`](https://gist.github.com/GrabYourPitchforks/4c3e1935fd4d9fa2831dbfcab35dffc6).
https://discord.gg/jvGQHPF Pretty awesome C# discord group :)
Seems like with things like electron even native apps will be based on Web apps. 
I can’t seem to open the link in the app it just takes me to the App Store 
Haskell
Especially in banking and finance: the yjust started to move from WinForms to WPF.
I get it but you don't really help yourself but not going through the basics. One of my personal pet peeves with the junior developers that work for me is when they do not read the documentation to learn the basics of whatever we are working on. Since you don't know the absolute basics go through the exercises and you will quickly understand how to answer your question. (switch statements , classes, methods etc)
Thanks everybody for your answers ! One last things, what do you think of [https://platform.uno/](https://platform.uno/) ? :)
\&gt; Also, I am currently using Visual Studio Community, and I was wondering if MonoDevelop is more preferred for C#? &amp;#x200B; nope
your problem is you aren't listening to advice, you are just hoping to have someone tell you what you want to hear.
Me either I've just started one year ago and it seems so hard to find an effective learning source. does anyone know a good website or YouTube vids to start with??
I think I've found a great one, [https://www.youtube.com/watch?v=WTVcLFTgDqs](https://www.youtube.com/watch?v=WTVcLFTgDqs) Project type tutorial, very clear IMO
Okay I see what I have been doing wrong and I never used them because I could never get that code to tell me it looked right, before it kept saying that something was wrong.i will be home in 12 hours I'll be back to try it then 
Yes but I want leave the domain of banking and finance ... :) 
MS C# compiler team member?
Reducing/eliminating memory allocations gets all the glory, but it's really only half the story. The other major benefit of Span&lt;T&gt; is that it helps you avoid copying data between buffers, instead allowing you to safely operate on it in place. As with garbage collection, rarely is one single instance expensive, but can accumulate to a significant cost across a complex system.
If you like MVVM and don't enjoy [ASP.net](https://ASP.net) then maybe WPF is where you should stay? I think a lot of companies are investing in [ASP.net](https://ASP.net) MVC though. A website is easier to deploy than a WPF application for the most part. 
he could keep them as properties through the use of expression-body members. He just needs to change his = sign to =&gt; e.g. public double Add =&gt; operand1 + operand2;
Yep, I second this.
Not really. Like i mentioned before, setting a goal far ahead of my skills helped me polish those skills so far. tried to to the same here, first time i found that it does not work for me. If people tell me that im much better off learning the basics (meaning i need to suck it up and lay the very basics first, and small steps, instead of my usual pace) then i will do it. But again, as i said I do not know what i don't know. This is why i asked, and while i was hoping for different results, everyone is in unison that i should stop and start from beginning. Which i will do.
Change the = to =&gt; and you'll now be using expression body methods. e.g. public double Add =&gt; operand1 + operand2; For methods longer than "return one_statement;" you should use the syntax and approach of public double Add() { //statements return result; }
Will do, thank you. I understand. Some of the aspects are quite alien for me, and i am sure you are (just like others whom i would like to thank for their input as well!) speaking from experience. You would not advise me this if it wouldn't be the best way of doing things. Honestly? I think i will look back to this thread in some month's time and facepalm just how trivial question i asked... And yes, I would definitely want to avoid learning bad coding practices
Kind of like when you can understand a foreign language better, but you cannot speak it (or write) yourself. I can usually see how it fits together, but i would not be able to write one myself. I think it is because of my own stupidity - I am trying to over complicate things in my head and i am confusing myself. Even more so, because (sorry, gonna write it down again) i am self taught, and i could bring myself up to speed in relatively short times by deliberately choosing a goal way ahead of my skills, and i would learn the steps needed to achieve it, rinse and repeat. This method just does not work for me apparently when it comes to coding. This is a first, and this is that it confuses me :) But i came here for advice, and even though - i admit - was hoping for a different advice, meaning that it would be doable "my usual way"... everyone agrees that this is not the way to do it, so i will need to suck it up and do as i was suggested
Thank you!
Thanks for the input! Xamarin makes outstanding tools, but they won't get you to the web. And that's Frogui's reason for being: use Microsoft's outstanding tools -- C#, Visual Studio, et al. -- to create web applications. Note: web apps are just our starting point. To be continued...
Probably best to start out with normal function syntax as arrow functions will surely confuse a beginner
My pleasure. That is great news for a Sunday!
Thank you for the advice! Yes, you understood me correctly. Now for a little coding horror: My first idea was to reate a plethora of methods outside Main, and it would ask for an input, then it would run THAT specific method based on the input. For example: Main() ► * Ask for input * convert it to int * use concatenation to cobble together the method's name i wanted to use For example: Exercise_ + exnum; // so that it would run THAT specific method. brilliant!!! ....sigh So at this point i was facepalming...realising that MAYBE this is not the way to do it... ---- &gt;IDE question: I use VS Community Edition for C# and VS Code for everything else. But use what you feel most comfortable with. Will be using VS Community Edition for C#, thank you... gonna check it out if it works well for me. So far i would say it is good :) As for everything else, I am using VS Code as well, and i have to tell you that i think it is amazing! 
The thing with programming is that it's not something you can just read about. You have to do the same things over and over until you can recite it by memory due to knowing how each letter/symbol interacts with the others(like learning a new spoken language). When I first started out as a programmer (with 2 years of C# knowledge from votech, no web stuff), I was thrown onto an internal ASP.NET/MVC4 site. I had complete control on how to make it. I spent an entire week and a half just messing with local copies of internal sites to see how everything worked and how changing a small piece of code in one place, caused something else to change down the line. I did a ton of googling and asking questions to my colleague.
That's when you'll know how far you've come. All of us have looked back upon our old code with a mix of horror and impressiveness. 
There is WPF for web. *runs for cover*
&gt; One of the principles of good programming is that any class should have a single responsibility. And in c#, each class should be in it's own file, so having all the exercises in a single file is bad practice. And this is where my inexperience is trying to shoot me in the foot. Thank you. To me, it made more sense just to put everything in a single class, thinking that "wow so efficient!" Learning a lot today about bad practices. I will be taking all the advice to heart, so thank you! ---- Do I understand you correctly, that if i wanted to go through with this afterall (wont, i will take the advice i got to heart and do as they suggested), it should have a separate class for exercises, then another class for asking the user input (can it be the Main?) the reason i am acting like this is for my future self. I would like to read those lines i wrote today one day in the near future and i want to smile at myself that "oh i remember when i was there..." &gt; There aren't really any shortcuts in coding. No matter how you go about it, the only way you can get better is time at the keyboard. I understand, thank you!
\&gt; it would be easy to look at Frogui as just another variant of XAML No matter the added value you think it may bring, the fact is that it \_also\_ brings yet another variant of XAML into the .NET ecosystem. I'm not talking about the features, I'm saying you can't just use it as a drop-in replacement for your UWP/WPF existing XAML code. This kind of addition has a cost IMHO. So we can add it to the list: UWP, WPF, Xamarin.Forms, Avalonia, Uno, Caliburn.Micro, etc Why would I use Frogui in place of Ooui? What makes you think the UI approach taken by Frogui is superior to that of Blazor?
Here is an example you can tinker with. It's a basic Console app: using System; namespace TinkerConsoleApp { public class Program { static void Main(string[] args) { Console.WriteLine("Hello World!"); MyMethods m = new MyMethods(); bool quit = false; while (!quit) { string s = Console.ReadLine(); switch (s) { case "1": m.Foo(); break; case "2": m.Bar(); break; case "quit": quit = true; break; } } } } public class MyMethods { public void Foo() { Console.WriteLine("foo"); } public void Bar() { Console.WriteLine("bar"); } } } &amp;#x200B;
As a counterpoint to the "each class should do one thing" rule, I think a much more important rule is "only use a class when you really need one". The ideal use for a class is when you have multiple instances of it, internal data that is different for each instance, and methods that need that data to work. If you ever find yourself writing a class that only has one method ("PrintHelloWorld") and no instance fields, you can probably remove the class and replace it with just a method. Especially as a beginner, try writing it the "simplest" way and use more complicated structure when you find the simple way results in duplicated code or other problems. That way you will know why using classes is a good idea and helps make you code better through experience, rather than just blindly following design rules without really understanding why.
You could be done with all the basics today if you hadn't done all this typing. 
No problem. I know where you are. I was there too when I started with studying CS a few years ago. It is normal to learn the basics first (like mentioned here a few times), but I also know, that sometimes you need see a little bit ahead to know where you are going. &amp;#x200B; The best advice I can give you is that **comment your code**. It's a good learning task. Learn guidelines, etc. because with an IDE like VS, it's easy to read and learn from your (old) code or from others, what this code does.
Not really, as life happens, and i have other things to do, unfortunately. cannot focus on coding today as much as i would like. And people taking the time and effort giving me suggestions and not just snarky remarks. The least i can do and acknowledge them and reply. But yes, i would much rather be practicing coding if it wasn't for chores.
Yes... I've ran into this problem before, even with games... You let it go for a while, you return then spend the next hours trying to figure out where you left off... I actually started taking notes in notepad where i was, and describing the general state of my save i was about to abandon for maybe months. 4 months later i got back in the saddle and surprise...i had no idea what the hell i was supposed to do. Remembered the txt file, read it, and instantly brought me up to speed. Thank you! :)
\&gt;I'm saying you can't just use it as a drop-in replacement for your UWP/WPF existing XAML code. This kind of addition has a cost IMHO. This is a excellent point! What's hard is trying to gauge what features will compel people to use Frogui. At this point, it's something of a guessing game. For example, during the last tech preview, the Reddit crowd debated an approach Frogui was taking for layouts. The concept I proposed was using the declarative properties of C# to make .design.cs files (instead of a DSL like XAML). Roughly, it seemed to be 60% for DSL and 40% for C#, but the DSLers were more vocal. I gave both a fair shake and XAML won out because it was concise, easier to read and is a tree structure like UI elements. That said, if the people want compatibility then that's what they'll get! There's no reason Frogui can be something of a super-set to minimize the porting impact of existing code. Your humble opinion is great one: labor has a significant cost. \&gt;Why would I use Frogui in place of Ooui? Well, Ooui may be an outstanding option, based on your needs. For example, if you are a Xamarin.Forms dev and you could essentially just drop you code into Ooui then that's compelling. I might be wrong, but it does not seem like Ooui is being actively developed much anymore based on GitHub. Fun fact: I bugged the heck out of Ooui's original creator Frank when I was learning all this! Also, as alluded to above, Frogui is designed from the ground-up to be WebAssembly-centric: I firmly believe the world as we all know it will be vastly different in a few years. \&gt; What makes you think the UI approach taken by Frogui is superior to that of Blazor? Duct tape. I have used it to successfully repair all sorts of things in a pinch, and [apparently I'm not alone](https://www.reddit.com/r/DuctTape/)! There are a lot of variables that dictate the best tool for a job at a given time. Far be it from me to ignorantly say Frogui is superior to Blazor. My job is to create a tool I feel is most effective as solving the complexities of modern application development, with a focus on UI. I rely on my own experiences but, more importantly, *your experiences*. Frogui is nothing if it's not solving your problems. Based on my experience, I have found the MVVM pattern to be more adept at handling the complexities of UI development, and that's why Frogui embraces it. I hope you'll give it a try. I would be happy to work directly with you because you represent a segment that I am trying to reach. For example, you could present a scenario and I could add an example to the Demo to show how it could be solved. And if there's something in Blazor, for instance, that's easier then Frogui could be adapted accordingly :)
&gt; WPF + MVVM From personal experience: get Xamarin Forms + Prism and start rolling mobile apps. You will be productive pretty quickly, and now you get to dev for mobile too! There are some gotchas, but mostly it's a smooth transition. Then slowly get into custom renderers and other platform-specific stuff. Stick to Android and iOS though. UWP is good, but some nugets *may* not support it as it isn't quite as popular. All the others are raw. Mac is so raw that a skilled vet could resuscitate it. I don't think mobile apps are going anywhere, and even if Xamarin (Forms) will fall out of favor, we know how long Microsoft supports technologies beyond their natural death (e.g. Silverlight)
Your answer is on par with someone from MS, thanks! Followup question, is it conceivable that methods exposed through an api **would only** have parameters of type Memory&lt;T&gt; and Span&lt;T&gt;?
&gt;is it conceivable that methods exposed through an api **would only** have parameters of type Memory&lt;T&gt; and Span&lt;T&gt;? As opposed to `IEnumerable&lt;T&gt;`? Not usually; only in performance-sensitive APIs where it really matters, and even then, only after building a case for it. I would be frustrated over not being able to just slap a `.Where(...)` onto some enumerable, and if my items aren't already pre-filtered or stored contiguously, then `Memory&lt;T&gt;` would actually **increase** copying compared to `IEnumerable&lt;T&gt;`.
Yes, you should have a separate class for each exercise, and you could have the method that does the user input in Main and not have it's own class. I tend to avoid having anything in Main, but as others have pointed out, it's simple enough logic that making a class may be overkill. And I think you should go through with this. It's well within the ability of a beginner to do what you want to do. Aside from the Console class, everything you need to make this happen is in the core C# language. You need to know how to make classes with public methods, how to make instances of a class, a loop of some sort, a branching mechanism (if/else or switch, for example) and how to call a method on an instance of a class. You could learn how to do all of that in an hour or so. go for it! &amp;#x200B;
From my own experience just pay attention to the way small programs are structured. Use the step through code option frequently. If you honestly sit down and step through multiple small programs line by line taking note of what startup looks like, moving between classes and functions, and program end, you will be able to throw together your own simple program from scratch. Small console programs can be thrown together rather quickly with a little bit of experience. Anything bigger than that like actual programs with a GUI, coding in Unity3D, or mobile apps will have you working off some base template that you follow for a lot of the repetitive tasks anyways. Once you’re to that point is when you’ll be stepping through those and making modifications to how those base templates work for your particular project.
Take a look at Xamarin Forms, UWP or WPF. These are all XAML based UI so your skills will, in some way, be transferable
Would de/serialization fall into the same use case? I have a bunch of data I download as xml and json and I deserialize it. How would that work?
\*27
&gt; Well, you could have just linked to [your GitHub](https://github.com/SystemExt/SystemExt.Devices.Mraa) Didn't want to show something that is not really working. (Just left the native dependencies part) &gt; Try doing [what this library does](https://github.com/mellinoe/ImGui.NET). I had no idea what your folder/project structure is from the long comment, a GitHub link would've saved time. That lib is doing something I interpretate as wrong, when publishing for win-x64 it also publish linux-x64 binaries &amp;#x200B;
Well I really hate vanillaJS syntax but typescript made me love front end dev 
It's pretty much a direct port of your WPF applications to websites. It is fun to play with. You should feel right at home.
Thanks for your feedback!
I'm also a WPF dev. The best course of action is learning Asp.NET Core for backend, and coupling that with Angular for front-end. Angular is Typescript, which is extremely easy to pick up if you know C#.
My 2 cents: As others have stated, WPF will probably be around for a while. Heck Windows Forms is still alive and kicking if you look around. VB6, VBA and MFC are still being used. You obviously will continue to see a decline in the jobs for these techs but I think you can at least feel a little reassured that the world isnt going to get rid of them overnight. The fact that MS is giving WPF and Forms a place to go in NET Core next year means these techs will continue to have life. :) This all being said, if you want to continue to use XAML, Xamarin is indeed the most viable option, if you are looking for a career change. Ive noticed that places in my area are now just starting to use it too, which is interesting. You may have to look a little harder though and be patient, depending on where you live, if you want to work with Xamarin. UWP is an option too, but I feel that's even more regional. I do see jobs for it around where I live sometimes, but I see WPF and Xamarin more than UWP at this point. I mostly see UWP jobs for companies in other states (I live in the US). Also I feel like a lot of people are feeling weird about UWP right now. Uno is a great thing for it though, and that may make places consider using it. But the trouble with Uno ATM is it's still new and a lot of people still don't know about it. Things may change, but I think its going to take time (and work on Uno) to make it a viable option to justify using UWP. So... unless you want to be patient and know you have job security, I'd probably go with Xamarin for now. You've probably heard of Avalonia, which is another bright prospect for XAML/WPF. It's still not a major contender though, but with as far as it has gotten, I think it could be a good successor to WPF and allow XAML apps to compete with Electron. This is all speculation at this point though. Avalonia imo isn't ready for prime time, mainly due to the lack of a proper work flow compared to WPF, Xamarin and UWP. Again, I'd probably go with Xamarin right now if you are looking for a career change. But definitely keep your eye on it. All this being said, web is obviously the more lucrative choice if you want to get a new job quicker. However, I personally don't advise getting into something you don't want to do with your life. But if you feel you need to broaden your skill set and make yourself more well rounded, ASP.NET CORE is a good choice. You may want to consider the fact though that technology allowing you to use XAML in the web is showing up. CSHTML5 is supposedly being used in production at various companies and the afformentioned UNO allowed you to make websites using UWP. Someone else made a post here yesterday showing the framework they are working on that does something similar, FrogUi. Of these I'd say CSHTML5 may be the most likely to be found being used, but I feel like it's a microcosm at this point. So with that being said... If you decide to go web right now though, you probably will need to pick something up that doesn't use XAML. Blazor be more quick to catch on than anything using XAML in the near future, if you want to keep things more on the .NET side. Thank that to it being officially sanctioned by MS. But realistically I think you will need to settle for a mixed stack, if again, you want to find a new job soon. TLDR; Xamarin is probably the most viable in the imeediate future if you want a new job using XAML. Otherwise, ASP.NET Core and a mixture of something else is probably your next best choice if you are just wanting to get a new job. 
Although your points are valid you could have been a bit less condescending. I would say take on board the feedback and maybe implement a class library that does this so it allows you to transfer over to .net MVC and give it a try with that.
I have a strong background in desktop development, both WPF and UWP, and I can totally understand not wanting to take on a new area such as ASP.NET. Nonetheless, I would still recommend that you consider it, or other web oriented frameworks as its good to have some experience in that space. Today I work mostly with ASP.NET (both .NET and Core) and honestly the switch was less painful than I thought it would be. I also want to add that whatever you decide on in the .NET space make sure you get started with .NET Core. Version 3 is right around the corner, and that means support for desktop applications. If you get comfortable with .NET Core and .NET Standard it will make it easier for you to broaden your skill set to specific platforms and frameworks such as Xamarin, ASP.NET Core and so on. [Core support for desktop apps announcement](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/) Feel free to DM me if you have questions in regards to .NET Core and/or ASP.NET Core Disclaimer: Microsoft .NET MVP 
What is it that is preventing you from 'setting up sqlite on my Visual Studio for Mac'? To use a sqlite database, you import the NUGET System.Data.SQLite package, which is the same on both Windows and Mac.
I'm just confused because when I went to [this link](https://www.nuget.org/packages/System.Data.SQLite.Mac/) and downloaded the package my computer rejected it and said that there was no available app to open it.
&gt; Although your points are valid you could have been a bit less condescending. Maybe, but people googling a password strength solution shouldn’t use this, and a decent level of quality is particularly important in security-related code. Don’t send unsecured passwords over the wire.
if your target framework is netcore, use this one: [https://www.nuget.org/packages/System.Data.SQLite/](https://www.nuget.org/packages/System.Data.SQLite/) in visual studio for mac: select Project &gt; Add NuGet Packages and search for sqlite &amp;#x200B;
I get your point but you won’t get very far imposing that attitude. 
Got it, appreciate the help. I am new to visual studio so thanks for your patience.
I was in the same position as you when I started learning programming (quite late, at 26, after working as a clinical dietitian). I was also looking for guidance, and one thing that worked out really well for me was to contact companies (smaller ones) and ask if I could come in once a week and just be a part of the team and sit with one of the developers and watch and occasions ask stupid questions. With time I could help with smaller things, and I was eventually hired as a result. Almost a decade later I still contact companies and ask if I can meet the dev team and learn about the product/solution etc. And quite often they are more than happy to even show some code, which is my favorite part! I’ve done this with both small and large companies such as GitHub, Skype when they still had their Stockholm office, DICE (gaming company) Leap Motion (hand motion tracking device and SDK), Tobii (eye tracking devices and software), RedGate (profiling tools). And many small companies. Don’t underestimate how keen devs and companies are to show what they do, and some are happy to take interns or visits. I’ve found many mentors this way, and learned a lot! 
I also kind of disagree with you on testing the strength to be done on client side. Surely the strength of the password is business logic? If so this should be handled server side along side unit testing.
You wouldn't want the password transferred. That's a no-go for a password-strength test website.
Really? What’s with the finger pointing? We are supposed to be a community that’s helps each over to improve. The best way I see that happening is to not point fingers and give people a chance. People make mistakes we are human at the end of the day as long as you don’t constantly make the same mistake then there’s no reason to be treat like that
So when someone makes an account and the username and password goes from client to server that shouldn’t happen? I get there needs to be security 
I'm not going to be saying anything that anyone else hasn't said already. If you are coming from WPF and are not interested in [ASP.Net](https://ASP.Net) then the most obvious choice to expand you skills is Xamarin. The reason being is Xamarin.Forms has a lot of similarities to WPF, although is not as mature, so it should be an easy transition. This would open up more opportunities for the least amount of work. I think from there it wouldn't be a bad idea to add UWP. While UWP hasn't taken off yet, it will eventually the be the successor to WPF. So having it in your bag of tricks is not a bad idea, and would allow you to be more adept at using Xamarin.Forms to create apps that also work in Windows. Another thing to consider is with WebAssembly you are going to start seeing things change on the web. With how popular [ASP.Net](https://ASP.Net) is I think it is highly likely that C#, XAML, and MVVM are going to have a strong presence there. This is a little far off, but it is something to keep your eyes on. In the mean time if you do want to get involved in web frontend I would suggest Angular with Typescript. &amp;#x200B;
If you are learning to learn the C# language and OOP go for WinForms. If you want to learn to get a job... uhm… learn ASP.NET. If you are hell bent to work on desktop software learn WPF but you might have harder time finding a job with it.
Yup, they can absolutely be outdated and it’s a major pain for the content creators (books and video). Microsoft has their Virtual Academy, it’s free and should be fairly up to date (make sure you select the right asp.net core version tutorial). [MS Virtual Academy ](https://mva.microsoft.com/learning-path/asp-net-core-2-0-23) Also: Subscribe to the ASP repo on GitHub if you want to stay up to date with asp.net core There is also the asp.net core blogs on msdn (has RSS feeds) Pluralsight is fairly good at getting out updated video tutorials (there is a free 30 day trial, and if you are a student check with your school if they have a license). If you need help/have asp.net core questions feel free to DM me. I work with asp.net core on daily basis. Disclaimer: Pluralsight author (but no tutorials on asp.net core so I don’t make any $ by recommending them. I used Pluralsight myself when I learned programming so that’s why I often recommend them)
What a piece of garbage.
Wow that’s great! I’m going to look into that I never thought about doing that
Blazor is really interesting, but I personally wouldn’t recommend it as it’s still just at an experimental stage. If you do decide on giving it a go make sure you subscribe to the repo and keep an eye on the issues. Also be prepared to spend more time trying to figure things out as there are less resources out there on the framework. 
Most recommend hashing on client side and storing the hashed version server side. I.e. We never send the password. 
Wow, I don't realise a friendly suggestion would get me so downvoted. Guess I offended people :/
Awesome! It’s a lot of fun! I don’t know where in UK you live, but I lived there for a year and visited Just Eats and Red Gate among others (London and Cambridge). Also, check out user-groups on Meetup.com . UK has many really good user groups with a lot of fun and helpful developers, and good sessions. 
I don’t see why it was downvotes TBH, even if it’s experimental stage it’s still a very interesting project definitely worth keeping an eye on. 
I think so too, probably the most interesting development happening in C# UI world right now, in my opinion. 
[https://up-for-grabs.net/#/](https://up-for-grabs.net/#/)
I agree!
Hash on the client side. And/or use techniques like SRP. Transferring the password plainly is not necessary.
I'm not sure if you already know this: Sqlite runs in process and does not have an external server that needs to be installed. You simply use the API to access a *.DB file.
I do already know that. One idea why I wanted to use sqlite is that I already have a lot of experience with using it in my Python scripts, and o was hoping to then port any .db files to my visual studio projects
Ah. Im pretty sure the DB files are portable. What library/framework are you using to read the DB in c#?
And AWS. Lots of enterprises and US government agencies are going that route. OPs geographic location would matter too. 
Well now that I've added the package System.Data.SQLite I'll use that
Entity framework is also a great option.
Removed: Rule 7, spam. Please review and try to follow the [guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion)
Learn building ASP. NET Core API's and write the Frontend with whatever you like... WPF, Angular, Xamarin, Razor Pages, MVC... 
Web assembly opens some opportunities. We might be doing web applications with XAML yet (Platform.Uno, Ooui.Wasm, Frogui) 
Look into Design Patterns and automated testing (Unit Testing). If it's one thing I wish everyone was better at it is designing something maintainable. (I have 10 year experience, I've seen some crazy systems through the years.)
You drop everything, and read this [book](https://www.amazon.com/Dependency-Injection-NET-Mark-Seemann/dp/1935182501). It advance you as a programmer more than anything else. Don't believe me? Read the amazon reviews.
Familiar with unit testing and I'm getting far better at it now, TDD finally 'clicked' last week when i did a major refactor with confidence everything still worked. As for maintainability, that's probably the #1 thing i want resources on, do you have of any topics, or even better books or courses you would recommend? I find lessons in maintainability also come with some useful additions to my programming toolkit.
Way ahead of you! :D Would absolutely agree(although i read the second edition). For anyone else [second edition is almost out](https://www.manning.com/books/dependency-injection-second-edition-principles-practices-patterns), i don't know what amazon offers but buying direct from Manning came with the first edition alongside being able to just download the book as a plain old PDF.
&gt;There is a big push in the industry right now for micro-services/micro-servicing, cloud everything (storage, compute, DB) and the like. Most of this, in my opinion, is because it requires less know-how but also comes with a higher price. There's got to be value in knowing how to run and configure an actual server with IIS or SQL Server. .NET Framework isn't going to stop being supported, and is still the best way to do a lot of things due the very small size of your builds.
- Andvanced EF core - useless It can't do anything yet so you can only learn advanced bugs - Concurrency - very fun topic but I have not have much use of it. Because it is fun I read about it periodically and a year later I find out that I have forgotten everything because I am not using the knowledge but maybe your job is more fun than mine. - Functional programming - yes, please do A fun topic that I have found useful in my boring job as an enterprise web developer is advanced LINQ - working with expression trees programmatically. We've used it on a couple of projects to generate queries on top of an ORM from things like URL parameters. This topic may require some knowledge of compilers and IL (mainly to reverse engineer how the compiler does it). The latter is my favorite CS topic that I never got to apply in practice but when I was in university I had no passion for programming until the compilers class. After this class I built my first project that wasn't a homework and I did it for fun. This was when I decided that this programming thing might work out. Not everyone sees it this way though, some people find the topic boring. 
So many dark themes...
TDD isn’t really about refactoring though. It’s about writing loosely coupled code. If you write tightly coupled code you can’t unit test it. By doing TDD you write your code so it can run in a mock environment. This becomes another client. So basically it forces you to write loosely coupled code and therefore sets you up for dependency injection. Thats the beauty of unit testing and TDD imo. 
https://imgur.com/a/PYP2Vmo Here is a good example, an imported file, that has tons of errors that cann't be turned off. Others I have tried to reduce, down from over 400. All are in imported files, CSS, etc. 
Right, you can quickly reference the other solutions and eventually you can try to combine two or more as an additional exercise. But I cannot emphasize enough how much you will benefit from learning source control practices along with your coding and you will also avoid a lot of frustration by being able to go back in time if needed. 
Solved!!! Well partly , under Settings / Elements To Skip I can add entire folders not to check. This should improve the operation of RS as well. 
You know visual studio has added a lot of resharper features over the years. Does resharper really provide more that makes the errors worth it? 
Hmm... I read an article a month or so ago saying .NET Framework 4.8 would be the last version, but I can't find that info anymore, so maybe disregard that part? But .NET Core... all the cool kids are doing it! The big value of cloud computing is that it is easily scalable at a trivial cost. If you're running your server's CPU at 100% all the time, the only way to increase your processing power is to buy new hardware. Even more vexing is if you're running your CPU at 100% and losing business during your peak hours because you can't process orders, for example, but during the majority of the day, you're sitting mostly idle, you simultaneously have too much and not enough server. Cloud computing fixes this. If you have stable and steady compute needs and are able to plan your growth out months in advance, then bare metal boxes are usually the way to go. I disagree that cloud computer requires less know-how. It's just different know-how. And you have to be far more deliberate with what you put in the cloud because you can peg a CPU on a bare metal server without any extra cost. AWS will eat you alive with a smile with if you push the same code to the cloud. It used to be that efficiency took a back seat to readability and maintainability to the point where you just optimize if you run into problems. Now optimization needs to be a priority at the same level as maintainability because it hits the bottom line.
Hey its free for me who I am not going to complain. :-)
I wish that author wrote more books, it's like he created a masterpiece and was never heard from again. I see you're looking into parallel programming as well - check out this course on Udemy: https://www.udemy.com/parallel-dotnet/ The nice thing it's all practical lectures, with the guy writing console programs demonstrating every aspect of C# concurrency/parallelism. After watching it, I ended up buying the rest of his C# courses.
&gt;And this is where my inexperience is trying to shoot me in the foot. Thank you. To me, it made more sense just to put everything in a single class, thinking that "wow so efficient!" that's how alot of people code. If that is your first instinct a good compromise/learning effort would be to actually code that way and get whatever you are working on functional and then force yourself to refactor after the fact to clean things up. Refactoring is not a nice experience for most people so after a while you'll tend to write code that's either easy to refactor or doesn't need to be which brings you to the same goal point the single responsibility thing is trying to do.
While that is true, nearly every theme that exists for Visual Studio today only styles the editor. Dainty not only styles the editor and the environment – it even styles the Start Page. Dainty also enables you to tone down certain elements, such as making the tool window grip handles transparent. Such functionality is not possible with any other Visual Studio theme out there, including the built-in themes.
XAML (WPF, XamForms, etc) + ReactiveUI
 `//using is a statement to pull namespaces and classes from other scripts.` `using System;` `//namespaces seperate conflagerations of functions and classes into callable sections for easy use and import.` `namespace sharpfirst` `{` `//classes seperate codeblocks of functions inside of a namespace to know which parts of the namespace are being used.` `class Program` `{` `//functions are used to organize code blocks within a class, allowing each block to perform a different task` `public static void Main(string[] args)` `{` `//declaring a variable lets the compile know what data type you will be working with.` `//dynamic declaration allows the data type to be set at runtime instead of at compilation` `int x = 9;` `int i = 1;` `string e = "end";` `// for loops are used to repeat an action or series of actions a set amount of times.` `for (; i &lt; x; i++)` `{` `Console.WriteLine(" ");` `Console.WriteLine("turn = {0}", i);` `// Conditional statements such as if, else if, else, and ternery operators are used to control the logic flow.` `if (i == (x-1))` `{` `Console.WriteLine(e);` `}` `if (i == 4)` `{` `Console.WriteLine("Halfway there! ");` `}` `else` `{` `Console.WriteLine("attacking...");` `}` `int crit = 30;` `int regular = 70;` `Random rnd = new Random();` `int critter = rnd.Next(1, 100);` `Console.WriteLine("Crit Score = {0}", critter);` `float damage = rnd.Next(1, 100);` `Console.WriteLine("Base Damage = {0}", damage);` `var result = crit &gt; critter ? regular &gt; critter &amp; critter &gt; crit ? "Critical Hit" : "Regular Damage": "Weak Hit";` `Console.WriteLine(result);` `/*if (critter &lt; crit)` `{` `Console.WriteLine("Critical Hit!");` `damage = damage * 1.5f;` `Console.WriteLine("Damage = {0}", damage);` `}` `else if (critter &gt; crit &amp; critter &lt; regular)` `{` `Console.WriteLine("A Regular Hit");` `Console.WriteLine("Damage = {0}", damage);` `}` `else if (critter &gt; regular)` `{` `Console.WriteLine("Weak Hit");` `damage = damage * 0.75f;` `Console.WriteLine("Damage = {0}", damage);` `}*/` `//Console.Write, WriteLine, are used to iterate data to a console or file.` `//Console.Read(); is used to take data from a file or output` `//Console.ReadLine(); is used to read data one line at a time` `//Console.ReadKey(); is used to take input from the used. this can be used in conjunction with a conditional` `//to effect logic flow based on user input.` `Console.Write(" Press any key to end. ");` `Console.ReadKey();` `}` `}` `}` `}` 
I like the blue - gray palette, but it's way too low contrast for my taste. 
I think OP meant that the unit tests caught issues that otherwise could have been regressions, making them confident in merging the refactored code.
I'm on mobile so I don't want to try to parse out the classes you've written. In general though this is called persistence and data serialization/deserialization and there are a number of well documented and reliable ways to do it where you can minimize the amount of code you write/maintain/update as you extend the project. That said, this is a really good project for developing your skills. Especially when you refactor it as you discover better ways to do things. Nice work!
.NET Framework, just like even VB 6, will continue to be supported by Microsoft, but 4.8 is likely the last big version to come out. We're already seeing C# features and library features/interfaces getting added to .NET Core that will not be added to .NET Framework. Do not use .NET Framework unless you have a very good reason to (such as supporting legacy applications).
I would say good work. The only complaints I have is the naming of the class is a bit of a nightmare. Is it saving or Loading? What is Object exactly? I would say one thing you really could improve is the naming conventions and refactoring to smaller pieces
You could go this way, and it would work fine, as long as you're not sprinkling SaveString calls all over the place. I would personally just use [Json.Net](https://www.newtonsoft.com/json) to save. It even has the option to [keep references to other objects](https://www.newtonsoft.com/json/help/html/PreserveObjectReferences.htm), although I haven't used it, but you could also just write your own way to save references the same way you currently do and it would work.
Thanks. It does both saving and loading, and by object it just means any class that uses it. It basically converts an object into an object that can be saved to text in one line. 
I really wouldn't recommend ternary operator in this case, it gets really messy when trying to do something with 3 possibilities. That being said, the correct syntax for it would be `cond1 ? cond1expr : (cond2 ? cond2expr : cond3expr)`. If chaining them, always fully enclose each inner one in parentheses.
I would have an object that handles loading and a separate one to handle saving. To give you more of an idea it might be worth while looking at this video: https://youtu.be/oar-T2KovwE I know it’s a long one but if you take it in and practice this you will thank me later
&gt; But I would encourage you to dig deeper. Nah... I've already moved on sufficiently from .NET to not need to look back. Regardless, I do understand what it is and, using WebAssembly, what you are trying to accomplish. &gt; Finally, there are features that have not yet be introduced that will allow presenting side by side comparisons of pure web-tech vs Frogui that will clearly demonstrate the advantages. I'm less interested in "advantages" and more wondering what are the tradeoffs. All abstractions have limitations and those are - at least in the past - what tend to cause heartache. I think WebAssembly is exciting and interesting but, at present, I just don't see the value for developers other than they can use a language they are comfortable with (which is good but not a "killer feature"). These days, there are far more important things in an architecture - like how it is deployed and managed. I'm heavy into serverless techs these days and .NET just can't play there (yet).
if you're planning to go full stack at some point I would invest some time into building an ASP.NET Core Web API with a separate SPA front end using Angular, React or Vue. build a robust authentication/authorization system using JWT and build a simple interface for interacting with a database.
SOLID - An object should have a Single responsibility. In this case, you should have a class that is responsible for persisting the data, perhaps a PersistanceWriter. You should also have a class responsible for loading the data, so perhaps a PersistanceReader. It might be helpful to have a GameState object that is composed of serializable objects, but ONLY contains properties. Use one of the following methods in this answer: https://stackoverflow.com/a/22417240/5022251 
I usually add Typescript to my React projects. I won't do vanilla JS either.
Selenetic still #1
&gt; i always need to wrap the second set in "()" so that it evaluates after the first? I don't think it's strictly necessary, but I think it's better to do it that way than risk otherwise, and it's clearer this way besides. &amp;&amp; uses "short circuit evaluation." If the first condition is found to be false, it never evaluates the second, because the final answer should be false either way. &amp; does not follow this behaviour, so it unnecessarily checks the second. I'm pretty sure this is slower, but besides that it could also result in an error if you're using the first condition to check that the second is valid. And besides that, since &amp; is normally used for bitwise AND, it's less clear than &amp;&amp; for standard AND. In this case, I think using nested ternary is probably the wrong way to do it, but it should work and it's not too unclear. I would prefer if (condition1) { result = expression1; } else if (condition2) { result = expression2; } else { result = expression3; } There's no need for a third if, since we can assume the third condition is correct if the both others are false.
thank you for taking the time to explain that for me, i will update my code and give an update in the comment in a few minutes. 
Serialization, XML I/O, the limits of concurrency, networking, [ASP.Net](https://ASP.Net) APIs, localization &amp;#x200B; That's stuff I found to be most useful. &amp;#x200B; &amp;#x200B;
 `using System;` `//namespaces seperate conflagerations of functions and classes into callable sections for easy use and import.` `namespace sharpfirst` `{` `//classes seperate codeblocks of functions inside of a namespace to know which parts of the namespace are being used.` `class Program` `{` `//functions are used to organize code blocks within a class, allowing each block to perform a different task` `public static void Main(string[] args)` `{` `//declaring a variable lets the compile know what data type you will be working with.` `//dynamic declaration allows the data type to be set at runtime instead of at compilation` `int x = 9;` `int i = 1;` `string e = "end";` `// for loops are used to repeat an action or series of actions a set amount of times.` `for (; i &lt; x; i++)` `{` `Console.WriteLine(" ");` `Console.WriteLine("turn = {0}", i);` `// Conditional statements such as if, else if, else, and ternery operators are used to control the logic flow.` `if (i == (x-1))` `{` `Console.WriteLine(e);` `}` `if (i == 4)` `{` `Console.WriteLine("Halfway there! ");` `}` `else` `{` `Console.WriteLine("attacking...");` `}` `int crit = 30;` `int regular = 70;` `Random rnd = new Random();` `int critter = rnd.Next(1, 100);` `Console.WriteLine("Crit Score = {0}", critter);` `float damage = rnd.Next(1, 100);` `Console.WriteLine("Base Damage = {0}", damage);` `if (critter &lt; crit)` `{` `Console.WriteLine("Critical Hit!");` `damage = damage * 1.5f;` `Console.WriteLine("Damage = {0}", damage);` `}` `else if (critter &gt; crit &amp;&amp; critter &lt; regular)` `{` `Console.WriteLine("A Regular Hit");` `Console.WriteLine("Damage = {0}", damage);` `}` `else` `{` `Console.WriteLine("Weak Hit");` `damage = damage * 0.75f;` `Console.WriteLine("Damage = {0}", damage);` `}` `//Console.Write, WriteLine, are used to iterate data to a console or file.` `//Console.Read(); is used to take data from a file or output` `//Console.ReadLine(); is used to read data one line at a time` `//Console.ReadKey(); is used to take input from the used. this can be used in conjunction with a conditional` `//to effect logic flow based on user input.` `Console.Write(" Press any key to end. ");` `Console.ReadKey();` `}` `}` `}` `}` 
Just an FYI, python has had a ternary equivalent, but they simply don't use ? and : to represent it. https://stackoverflow.com/a/394814/5022251 a if condition else b 
Bingo, I was able to fearlessly make a large refactor because the code was loosely coupled well covered by tests which felt awesome.
I'm a banking and financial software developer, can confirm. Making a pretty big app that's beautifully done in WPF. In the embedded world, it's pretty much WinForms and lately the hardware has been capable of WPF. Everyone saying "going to web" is talking home user computers. And if it's web + large office/industrial it's going to be hosted on the local circuit, not a cloud computing system like azure. I wish people would understand that azure is not acceptable in many places that requires regulations and security beyond "social networking".
This totally depends on of the end user needs wants internet/server or is on a computer that can have a web browser. Target audience is everything.
jezuz christ dark mode pls 
Sorry,I didn't know you had trouble with your eyesight. I will upload it in brail for you.
Yes, I'm almost done with it. Definitely worth it. There are a few examples that are unnecessarily convoluted, but the majority have a good practical demonstration, not to mention a decent SOLID intro during the first few lectures. At $9.99 it's a no brainer.
it looks like your ide is windows 95
it looks like your ide is windows 95
It's not working. I see no difference after applying the theme. VS2017
I would say things like Clean Architecture (or Hexagonal Architecture, or whatever you want to call it) would be a good thing to learn. I don’t see a lot of people practicing it, and it’s immensely beneficial. 
I understand. I’ve got some questions: 1. Do you have the Color Theme Editor for Visual Studio 2017 extension installed? 2. Were you able to unzip the file without any problems? 3. Are you able to open the unzipped files in a text editor to read its contents? Do you see XML (which is correct)? Or does it have a binary form – or look corrupt in some way? 4. Did you follow the following order exactly (i.e. not the opposite) when applying the theme? * Tools → Customize Colors → Import Theme * Select \`dainty.vstheme\` * Tools → Import and Export Settings… → Import selected environment settings * Select \`dainty.vssettings\`
I like it, don't need/want too much contrast
I think eventually it will find it's way into all projects :)
I am working on a Machine Learning library in C#. Developing everything from scratch and posting tutorials and videos on YT on the progress. [https://www.youtube.com/channel/UChnRswBqAEU1YYbshSmIyrA](https://www.youtube.com/channel/UChnRswBqAEU1YYbshSmIyrA)
Every data that crosses App-Domains needs to [marshalled](https://en.wikipedia.org/wiki/Marshalling_(computer_science)). That is slow and not always possible. Are you certain that you need app-domains? If the operation is just slow a simple thread would be a better option.
Net standard exists as a compatibility layer. Dotnet core will receive features that .net framework won't get, and .net standard can't advance past what .net framework doesn't support. I honestly don't know what the future of .net standard even is. 
Apparently, yes, we've thought of that before - do we really need AppDomain for this? Unfornately, we do, this plugin we're runnning needs to be executed in an isolated environment. Anyway, thanks for pointing me to Marshalling.
&gt; Unfornately, we do, this plugin we're runnning needs to be executed in an isolated environment. Be aware that restricted AppDomains have security issues too. Also: AppDomains do not existing in .NET Core, so you block a potential migration path to .NET Core.
Two problems: * Items is a collection of, well, items, which may or may not be strings. * Even if it were just strings, your IndexOf call would only work if an item had that at its entire string. Something like `lbxInfo.Items.IndexOf(lbxInfo.Items.OfType&lt;string&gt;().FirstOrDefault(i =&gt; i.StartsWith(“Population = “)))` should work. Or, slightly simpler: object listItem = lbxInfo.Items.OfType&lt;string&gt;().FirstOrDefault(i =&gt; i.StartsWith(“Population = “)) if (listItem != null) { lbxInfo.Remove(listItem); … 
Can you elaborate more which differences you mean?
Thanks @chucker23n. Works a treat!
`Func&lt;&gt;`, `Action&lt;&gt;` and `Predicate&lt;&gt;` are various delegates. But they are like black-boxes. If you want to filter a collection of numbers, like `new [] { 1, 2, 3, 4, 5 }` by passing a `Func&lt;int, bool&gt;` to the [Where](https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.where) extension method, something like `Func&lt;int, bool&gt; condition = number =&gt; number % 2 == 0` so that you keep the even numbers, then it can only be ran in memory. Instead `Expression&lt;Func&lt;bool, int&gt;&gt; condition = number =&gt; number % 2 == 0` can be looked at through code. It is a tree like structure that describes the actual code. The fact that it is a lambda expression with a parameter of type int named number and a body. The boy is composed of an equal check between the operator % applied to the parameter number and the constant 2, and so on. Why is this important? Well, tools like EF look at this tree and turn it into SQL code such that instead of pulling all the data from the database in order to check it in memory, the database server will provide already filtered or sorted data.
WinForms is fast and easy to use. Newer framework aren't automatically better. I've been using WPF for a month or so and dropped it because it was slower than WinForms and overly complicated.
`Func&lt;&gt;` is just a method that gets compiled to IL. It can then be executed as you'd execute a normal method. At runtime the only information you can get is "accepts an argument T, returns a boolean". An `Expression&lt;&gt;` is a data structure that represents your epression. It can be analyzed and picked apart. This is what is required for the SQL generation, because at runtime the library needs to be able to see the "code", not the generated IL instructions. At runtime you can get every single part of the expression: "an expression accepting an argument of type T, and returning the result of a binary operator, the first operand being the parameter, the second operand being a constant value 123". As an example, take the simple lambda `(int i) =&gt; i != 0`. Using LinqPad it's easy to see what IL is generated. // (Func&lt;int, bool&gt;)((int i) =&gt; i != 0) IL_0000: ldsfld UserQuery+&lt;&gt;c.&lt;&gt;9__0_0 IL_0005: dup IL_0006: brtrue.s IL_001F IL_0008: pop IL_0009: ldsfld UserQuery+&lt;&gt;c.&lt;&gt;9 IL_000E: ldftn UserQuery+&lt;&gt;c.&lt;RunUserAuthoredQuery&gt;b__0_0 IL_0014: newobj System.Func&lt;System.Int32,System.Boolean&gt;..ctor IL_0019: dup IL_001A: stsfld UserQuery+&lt;&gt;c.&lt;&gt;9__0_0 IL_001F: call LINQPad.Extensions.Dump&lt;Object&gt; IL_0024: pop IL_0025: ret &lt;&gt;c.&lt;RunUserAuthoredQuery&gt;b__0_0: IL_0000: ldarg.1 IL_0001: ldc.i4.0 IL_0002: cgt.un IL_0004: ret You can see that the lambda compiles to a local method with a compiler generated name (`&lt;&gt;c.&lt;RunUserAuthoredQuery&gt;b__0_0`). But when you compile the same lambda as an expression you get a **vastly** different result: // (Expression&lt;Func&lt;int, bool&gt;&gt;)((int i) =&gt; i != 0) IL_0000: ldtoken System.Int32 IL_0005: call System.Type.GetTypeFromHandle IL_000A: ldstr "i" IL_000F: call System.Linq.Expressions.Expression.Parameter IL_0014: stloc.0 IL_0015: ldloc.0 IL_0016: ldc.i4.0 IL_0017: box System.Int32 IL_001C: ldtoken System.Int32 IL_0021: call System.Type.GetTypeFromHandle IL_0026: call System.Linq.Expressions.Expression.Constant IL_002B: call System.Linq.Expressions.Expression.NotEqual IL_0030: ldc.i4.1 IL_0031: newarr System.Linq.Expressions.ParameterExpression IL_0036: dup IL_0037: ldc.i4.0 IL_0038: ldloc.0 IL_0039: stelem.ref IL_003A: call System.Linq.Expressions.Expression.Lambda&lt;Func`2&gt; IL_003F: call LINQPad.Extensions.Dump&lt;Object&gt; IL_0044: pop IL_0045: ret You can see there is no method for our lambda anymore. Instead the `Expression` class is called several times, which is used to construct the expression we had in our code: `(int i) =&gt; i != 0` - `Expression.Parameter` for the parameter `int i`. - `Expression.Constant` for the `0`. - `Expression.NotEqual` for the operator `!=`. It gets passed the `Parameter` and the `Constant`. - `Expression.Lambda&lt;Func`2&gt;` to construct the lambda. It gets passed the `Parameter` and the `NotEqual`-expression. That data structure can then at runtime be picked apart and translated to the relevant SQL.
Finally a theme that uses the Theme Editor. Are there others like this? Every single theme I find only style the editor.
Yes but it seem that most of company use it for financial application. I think I want to discover other things because in 5/10 years, I want to have other skill than only WPF.
So you tell me that I should look at other technologies than C# ? 
WPF is kinda like a hot model thats on crack... Pretty, but fatally flawed. Winforms is like your granny. She was good in her day, but she aint no spring chicken. Could you make it a web app? If not WPF and pray it gets the .net core approach at some stage. N.b. Spent years developing both, Im ready for my down votes, have at it.
Maybe you should note on your website that you need the Visual Studio Color Theme Editor extension. For someone who recently jumped into Visual Studio this doesn't seem to obvious..
I don't know. The app will be used on a mobile device (tablet) but people aren't allowed to all the other functionnalities of the tablet. Only the application. So a web app... I don't think it's going to work
Hell, write it in android or what ever the iOS freeks use these day. Or xamarin? Andriod it you can imho ;)
Maybe I am an idiot, but I can't see "Customize" colors under Tools window. What am I missing?
IMO, WPF came in at the time when desktop-based clients started to wane (analogously to the now discontinued WCF, which came in when SOAP-based webservices started to wane, being overshadowed by REST). Certainly, you can make a very pretty application in WPF, but the more fundamental question you should ask yourself is whether a desktop-based application that only runs on Windows is what you need. If you're writing some application that'll only be used in your Intranet, then looks are not that important and WinForms is perfectly functional. If you're writing a consumer-facing application (and which doesn't need to hook deeply into the system), then one which runs on all platforms and has lower development costs due to utilizing widely known technologies instead of the very peculiar and, in my opinion: clumsy, XAML is clearly the superior choice. Even if a desktop application is what you require, there are frameworks which let you embed a HTML+JS GUI in a Windows Frame - Slack comes to mind.
It will be an app only used by people working on the site. So yeah, no consumers. My app will be a too to help people work faster.
First, thanks for the time and your complete response !! " My point is that I don't think you have to worry about your job at the moment " : Yes but I don't want to be lost in 10years because I had focus only on WPF. For the rest, I understand that Uno, Avalonia or FrogUi will be more a personal learning than a professional learning (who knows, one could grow !). So at the end, I should maybe go for Xamarin.Forms or [Asp.net](https://Asp.net) Core for create Apis and learn Angular, React or View.Js for the front. &amp;#x200B; Thanks again !
At first I liked it a lot. But after using it for an hour, I had some serious problems. For example: on my screen it's virtually impossible to see the scrollbar.
Apparently people keep forgetting laptops and 2-1 devices are desktops as well and those aren't going away anytime soon.
Yep. Pretty much. I hate that they require proffisional experience for a junior. But it's usuall. No one want a complete noob.
Thank you for that information! I was wondering about this myself for a long time.
I guess I phrased that wrong. By "desktop-based clients", I didn't mean that the hardware itself is going away, but that desktop-based \*programs\* (i.e. your regular old executable). Nowadays, a lot of those have been replaced by web-apps which you optionally run in a shell like [electron](https://electronjs.org/). For instance, I have Skype, Slack, GMail, Facebook Messenger, and Whatsapp running, all as web-apps, on my desktop in a native window, but none of them use WinForms or WPF.
Yeah I was thinking who would agree to start out again as a junior with 1 year experience behind his back
Same thing in Germany, that’s why I am doing a student job as a .net developer. That really helps me
As a junior it would likely be enough if you fulfill the "Good problem solving skills. Team Player" part. That and the other most important part: Having good soft-skills. Being able to talk and sell yourself. Showing that you want, that you are capable.
So it's a standard all around. Good to know! Thanks!
If you really want the best Windows 10 tablet experience possible, either write it as a Modern XAML application, or use XAML components. WinForms is tried and true, I don't see a huge amount of advantage in going to WPF for the sake of it unless you really want to learn WPF.
I don't know about any deliberate push, but Microsoft developed Typescript, so it would be logical to move in that direction if you're used to working in their stack.
Nice job - keep up the good work!
&gt; asyncronous programming Parallel Programming with Microsoft .NET by Campbell, Johnson, Miller, Toub is a great reference covering different use cases and patterns. &gt; LINQ Joseph and Ben Albahari's LINQ pocket reference is great, and so is the C# In a Nutshell book.
Pretty pleasant to the eye. I get more tired from the light theme о\_О
 mesh2d.Draw(); RenderingSystem.ClearScreen(); Is this backwards?
Then you need to spend time in MVC. 
&gt; The main problem always came down to users just not wanting to do shit themselves in the first place and then the eventual new requirements get added over time that turned them into a nightmare from a maintenance standpoint. Yeah, this was what I was afraid of but at the same time it is kind of an important feature for this particular project. Know of any examples of how to create this using iTextsharp or another library like the PDFsharp mentioned above?
It really depends on your needs. Those PWAs use a whole lot of memory for doing absolutely nothing.
Give Electron a shot. You'll skill up your web technologies while still building an installable Windows app that can run anywhere. [https://electronjs.org/](https://electronjs.org/) 
You could take a half measured approach and use CEFSharp (https://cefsharp.github.io/) to embed chromium in your WinForm so your UI is built using web technologies linking to your C# business logic via a data access layer. I used this very stack for a university finals project https://github.com/Projkt-James/FaceTAN
Thanks! I looked up PDFsharp, including the samples, but I can't figure out how to allow a user to edit the original invoice template while keeping the variables (address, invoice lines, etc.) intact. 
If the app is only going to be used on a Windows tablet (or a Windows 10 device) go for UWP.
&gt; even when I had trouble with WinForms, I've never saw anyone said "Stop using this. Use WPF"... That is because WinForms is neither deprecated nor going anywhere. As we speak Microsoft is busy adding WinForm support to the upcoming .Net Core 3.0 release. There is a metric asston of WinForm code out there, especially in the enterprise. The major 3rd party component vendors are still actively building out their WinForm components. It is just an older UI framework and has some rough edges.
Also- if you have the budget most of the major component vendors (DevExpress, etc) have touch enabled WinForm controls. Those will give you a reasonable touch UI experience w/o having to change UI frameworks.
I've been developing windows applications for 15 years. I started with VB 5, then went to VB 6, then C# WinForms. I never learned WPF because I was already an expert at WinForms and they work just fine. WinForms aren't going anywhere. They will always be supported as long as Windows exists. Even though VB6 is so far gone that you can't even download the IDE from MSDN VB6 apps still work and Windows still comes with all the DLLs to support VB6 apps. The world is moving to browser clients. There will be some viable Web based framework in the future that we all target. Only switch to WPF if you want to. Don't do it because you think you should.
Can you suggest some??
Uhh, no? All the tech I mentioned is based on C#, and it's not going anywhere in the near future. I'd say it's a sane and safeish bet.
Leave your application in winforms but pay extra attention to decoupling your business logic from the UI. Eventually a business requirement might initiate a shift in your UI framework but until then, If it ain't broke dont fix it.
I do web apps all the time in these sorts of situations. Just package a browser into the final tablet app. Such as electron, or an embedded webview. Not saying that’s the approach you should take, but just to throw the option out there 
Finally some practical advice in this thread. You can create a ViewModel layer in a WinForms app to decouple the logic from the presentation/event-handling side. As a bonus, it makes the business logic easier to test.
because it's 2018, not 2008.
I'm surprised no one has mentioned that UWP is Microsoft's latest desktop framework. While it hasn't seen widespread adoption, Microsoft keeps pushing it hard. https://docs.microsoft.com/en-us/windows/uwp/get-started/universal-application-platform-guide
If it only took you a month to develop then it's in that spot where you could justify not moving to wpf or converting to wpf. 1. If it only took a month to develop then it is not that large of an application and not important enough to convert. 2. If it only took a month to develop then it should only take a few weeks to convert to WPF.
This won't compile. You're using character identifiers '' instead of string "". So it should be .Replace(" ", "NULL") However, this will just replace every space with the string "NULL" - and not an actual DBNull which I assume the OP is wanting. It also will do weird things like replace a double space " " with "NULLNULL". 
As u/Canthros stated, look into parameterized queries. I'd also think about moving all of this logic into stored procedures so that you can just call them with said parameters. Otherwise - you're going to need to do something along the lines of: if(string.IsNullOrWhiteSpace(myString)) { myValue = DBNull.Value; } else { myValue = myString; } 
&gt;modmail Hi, maybe I'm doing something wrong. But I do not see my posts. What could be the problem? Grateful for the help
This is pretty much the idea case for UWP
https://youtu.be/Et2khGnrIqc
Don't change the EF generated code. If you ever need to refresh your tables, you'll either lose your changes, or the EF entities won't update correctly. (This is assuming a database first approach) Instead do 1 of the following 2 options: Write an extension method to add your new functionality As the Customer class is partial, you could add your functionality with another partial class with just your new method. Of the 2, I would prefer the extension method approach. It's more expressive I think, and it will give you compile time warnings if you ever do something like remove your Customer class, or rename it, etc. The partial class won't. Also - if you truly need the amount due every time you work with the customer object, you should be doing that work on the server and pulling it down with the customer object. 
There's nothing wrong with using WinForms. It's easier to use and often faster than WPF.
I agree, if you have to start all over because of a UI framework change your application wasn't that well-designed to begin with. Mark Heath has a good course on Pluralsight which also covers decoupling in WinForms: https://app.pluralsight.com/library/courses/windows-forms-best-practices
But the entire purpose of electron.net is cross platform, which .net core *is* and .net framework is *not*. You could probably hack up a bridge, but then the app would only run on windows, so why not just use WPF or win forms?
This person is obviously new. They should be using the full method block for now until the understand the basics.
Can you link me to the posts you can't see? There are these 3 I see on your profile, and as far as I can tell, they should all be visible: * https://www.reddit.com/r/csharp/comments/9pbrur/web_installer/ * https://www.reddit.com/r/csharp/comments/9pbw1r/alternatives_for_molebox/ * https://www.reddit.com/r/csharp/comments/9pknc9/how_to_generate_license_key/
When you say "control" are you talking about a UI control? Like a TextBox or something? In that case - you shouldn't be exposing it. The only thing that should care about your UI controls is your UI. If that control is executing some code that you need access to, like for testing, you should be encapsulating that code in a method. Then you can expose that method if needs be. Or even better, removing it from the UI completely so it can be reused elsewhere in your project. 
.NET DLLs right? Have you tested them with portability analyzer that they don't work in .NET Core? You should be able to use non .NET Standard libraries and they might just work. If I remember correctly you need to add `&lt;PackageTargetFallback&gt;$(PackageTargetFallback);portable-net45+win8+wp8+wpa81;&lt;/PackageTargetFallback&gt;` element to csproj to make it work. More info https://github.com/NuGet/Home/wiki/PackageTargetFallback-(new-design-for-Imports)
Do I expose the method the same way I exposed the control? Is it okay to do that even when the method is set to modify a control's property?
You need the [Color Theme Editor](https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.VisualStudio2017ColorThemeEditor) extension.
Thanks for the the answer. I see :) &amp;#x200B; I've tried what you said there, (both typing it myself, to get the feel of it, as well as copy paste) but i get a error on the "value + 50; stating "Cannot implicitly convert type 'int' to 'string' Am i missing something fundamental here? &amp;#x200B;
Why? If it is only going to be used on Windows tablet, WPF is far superior. UWP is basically a subset of WPF. Be prepared to spend lots of time implementing features missing in UWP, if you go that route. Only big plus with UWP is you can distribute your app in the Windows store.
I’m currently working on configuration options that will solve these issues for you.
Thank you!
If you really want to be ahead of the curve, take a look at [react native for windows](https://github.com/Microsoft/react-native-windows)
The method shouldn't modify the control's property. Here's a quick mock up: private void MyControlClick(object Sender, EventArgs e) { var myOtherControlValue = TextBox1.Text; var result = DoSomethingMethod(myOtherControlValue); TextBox2.Text = result; } public string DoSomethingMethod(string input) { return input; //do something here } Now you can interact with the method in anyway you want. 
`value + 50` is of the type `int`, but you try to assign it to `textBox2.Text` which is of type `string`. Basically the same problem, just the other way around. You first need to create a `string` out of your `int` using the method `ToString()`.
Thanks! My eyes seem to prefer dark themes as well.
They left out a small bit. Now that you have an integer (`value + 50`), you can't directly toss that into a `string` property (`.Text`). All you need to do though is call `.ToString()` on it. It might help to see it broken down into two lines: int calculatedValue = value + 50; textBox2.Text = calculatedValue; //bang! Can't set an `int` to a `string` directly! So we call `.ToString()` in it: int calculatedValue = value + 50; textBox2.Text = calculatedValue.ToString(); And to do it in one line: textBox2.Text = (value + 50).ToString();
Because tablet applies touch and as far as I know UWP has better controls for this case.
Might well be a point if you prefer gestures, like swiping and pinching. Apart from that, I am not aware of any real difference, and even those can be at least partly be supported in WPF. Of course, if there are more, I would be happy to learn.
As other's have said - you need to .ToString() the int result of the math. My bad for missing it.
And you can enable kiosk mode on UWP apps right from the settings app
&gt;int calculatedValue = value + 50; textBox2.Text = calculatedValue.ToString(); Wow thanks man :) That simple huh! Everything is simple when u know how to i guess hehe. Thanks for helping me learn this :)
&gt; I'm getting a bit nervous on what it is you're trying to do :p May I ask why haha &gt; The idea here is you really want to separate your UI logic from any business logic. What I want to do is probably a bad practice, right? I really want to do things in the right way, but terrible Youtube tutorials had corrupted my mind already so it's probably gonna take a while. Anyway, thank you. I'm gonna try your suggestions.
If you're working with asp.net WebForms the temptation to cram everything into the code behind is great. However, this limits testability and all the things I mentioned above. It's 1 of the main reasons WebForms has such a bad name. It doesn't have to be that way. Look into something called the MVP pattern (Model View Presenter). It's very similar to MVC, but can be easily implemented in you WebForm project. Here is a decent intro to it: http://www.bradoncode.com/blog/2012/04/mvp-design-pattern-survival-kit.html 
Thanks! I'll be looking at it. By the way, I'm just using WinForms. 
Ah! Well, they're basically the same as far as your architecture will go. Some of the examples given in the above link may not 100% apply, but the theory would be very similar. 
&gt; If it only took a month to develop then it should only take a few weeks to convert to WPF. If it takes a few weeks to convert the UI on a one-month project, there were some horrible design decisions involved.
In my opinion, WinForms is perfectly acceptable for internal tools &amp; quick, free applications. It works &amp; it's easy to put together a UI with. WPF is more complex, and focuses on letting designers put together the UI while developers put together the logic. Harder to create a good UI with, easier to make something that looks pretty.
It's a bit strange. But now I see my post. I did not see the post №3 Sorry for the inconvenience!
Who is your target demographic? If its users that will be using your app on Tablets or Mobile devices then there's plenty of reason to use WPF, if your target demographic is desktop business users then there's no reason to not use Windows Forms. &amp;#x200B; The main reason why WPF was added was to homogenize applications across multiple platforms; Desktop, Mobile and Tablet WPF apps can run on Windows Phones, Windows RT Tablets(if they are even sold anymore?) and Desktop PCs. Windows forms apps can only really be used on Desktop platforms, kinda hard to hit teeny menus and other UI elements with fingers right?
If you want to use cross platform libraries then your touchpoints with them need to be at minimum cross platform as well. Usually If I need to do a mixed project, my data layer and integrations are all cross platform while my top layer classes are all Framework. You need to do this a ton when deal with WPF apps that need new guts.
No problem :) Yeah, noticed that hehe. Followup question, what if i want to add decimals as well? If i have understood correctly, int doesnt work with decimals? 
I genuinely appreciate the brutal honesty. Frogui *is very slow* at this point, due to the present limits of the MS Xamarin compiler. And the *samples are crappy* (the focus has been on getting the framework in shape). Your points are spot on; I hope the following will illuminate the reasoning: Of all the possible ways to promote Frogui, this subreddit is literally the only avenue chosen for the very reasons you state. Exposure-wise, I've only attempted to reach 1% of the C# community, wanting to stay off the radar as much as possible, yet still get critical feedback; this subreddit has provided that. Microsoft has asked me to write about Frogui for an online magazine but, again, for the reasons you've stated I have put them off. Bear with me; this subreddit is the only oxygen Frogui gets (92% upvoted!) during this critical phase.
Makes sense! I'd love to spend some quality time with FrogUI when all the ducks are in order. I also think the shift to XAML was the right call. Using C# was the wrong tool for the job, however much I love using C#. Best of luck to you and the team.
What are WPF's flaws?
I would likely just make a DaysOverDue property on whatever class it is. Then do the conditional logic on what to display in the view.
\&gt; I'd love to spend some quality time with FrogUI when all the ducks are in order. Great! \&gt; I also think the shift to XAML was the right call. I am very glad to hear that. \&gt; Best of luck to you and the team. Thanks for the encouragement.
Could you possibly PM me? I would really like some more information about the best way to go about this.
I've used [Electron.NET](https://Electron.NET) with normal packages just fine. Most libraries are .NET Standard 2.0 compliant, which means they run on both Core and Full framework.
You can target .net462 and .netcore2.1 simultaneously if you haven't done that before. Edit your csproj file: &lt;PropertyGroup&gt; &lt;TargetFrameworks&gt;net462;netcoreapp2.1&lt;/TargetFrameworks&gt; &lt;/PropertyGroup&gt; 
I currently have a .NET Core test framework using Selenium.WebDriver 3.11.2 (.NET Core compatible) and Appium.WebDriver [3.0.0.2](https://3.0.0.2) (relies on .NET Framework). The Appium tests work just fine with the .NET Core Selenium assembly and the only things we are missing are .JPG support (because .NET Core doesn't support it) so we have to use .PNG instead when capturing screenshots. &amp;#x200B; It's worth nothing, however, that .NET Core is missing some features and some package owners (AWSSDK.Core for example) are producing packages that contain .NET Framework and .NET Core .dll's, but the .NET Core .dll's are missing functionality (like SAML authentication) so you have to use it at your own risk
Difficulty Creating, Performance, Can't be run on other platforms...
You reminded me [https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f](this) ... 
I'm a long-time winforms user. Tried learning wpf a few times and it just felt so clunky and awkward to use. I see nothing wrong with winforms, and I can do everything I need to with it so I'll probably stick with it forever. The only thing that could sway me is a cross platform UI framework, but every one I've tried is lacking. 
Don't switch your app to WPF, as others have said decouple the UI layer from the business layer with an MVVM approach. Going forward on new projects I would suggest using WPF or even UWP (if it doesn't need to support anything prior to Win10).
Again - it's 2018, which means that article is outdated. create-react-app even supports Typescript now. Eject when necessary. Learning new things will always be part of our jobs.
&gt;&gt; .NET Framework 4.8 will remain on .NET Standard 2.0 rather than implement .NET Standard 2.1. &gt; &gt;Isn't the entire point of .NET Standard to be the set of APIs shared between .NET Core and .NET Framework? Why even have it if the .NET Framework won't target it? Mono, Xamarin, and Unity all should benefit from this. I kinda saw this coming eventually, but I'm surprised it happened so soon after 2.0. I was expecting 2.1 to grudgingly omit the neat `Span&lt;T&gt;` stuff for the sake of .NET Framework. I'm actually kind of relieved that they went this way.
I just released a new version that addresses the contrast issue. You can see the result in the screenshot on the website. The contrast throughout the theme has been increased (without using any gamma adjustments). The website also has increased contrast. I have added a couple of configuration settings: * Additional contrast for scrollbars (enabled by default) * Additional contrast for comments (disabled by default) These are available through the website. For additional settings you need to clone the repo and edit \`configuration.json\`.
However, if it's not already decouoled and you find it's too hard to decouple now, you done messed up your architecture - you may as well rewrite in WPF immediately. 
I have added configuration settings for increasing the scrollbar contrast. It is enabled by default. There is also a new setting for increasing contrast of comments. It’s disabled by default, but you can click “Configure and download” on the website to enable the setting.
This excites me more than it should. 
The issue has been adressed, and various settings for contrast has been added. The default configuration comes with increased contrast. Let me know what you think.
Does anyone know what the point would be for porting over apps to the .net core framework? I don’t understand what the real point of doing that is. 
Long-time wpf user. Tried using winforms again and it just felt so clunky and awkward... (kidding... a little)
You have the draw and clear the wrong way round. Also are you calling up swapbuffers or display on the gamewindow?
That doesn't mean .NET Framework 4.9 won't support .NET Standard 2.1. I doubt that Microsoft has even had that conversation yet. They don't seem to like talking about sun-setting projects.
Because it’s the future, and it looks like they are retiring the regular framework.
Check out the Mac compatible Visual Studio Code IDE: https://code.visualstudio.com
It's doubtful that NET framework 4.9 will ever be released. 4.8 is probably the last .NET framework version.
Just swapped over to Core myself, .NET framework's probably to continue to linger behind like this. And Span&lt;T&gt; is just too sweet to miss right now.
Performance, new APIs, easier deployment and updates (apps can be self-contained). 
But it says that’s not what it’s for, unless I misread that. 
While you are right to have doubts, it is too early to make predictions. (Which is a real problem.)
I've used Electron.NET and it's not the best. Some Electron APIs / configurations weren't available and I ran into issues with electron-rebuild. &amp;#x200B; If all you are trying to do is run .dlls with a web based UI, I would recommend having a look at using normal Electron and hit the .net .dlls with Edge.js [https://github.com/tjanczuk/edge](https://github.com/tjanczuk/edge). This cuts out Electron.NET completely.
No. WPF and WinForms are still Windows-only. This is just so they are compatible with .NET Core on Windows.
You could always dual boot the Mac (Boot Camp), or run Windows in a virtual machine (VirtualBox, VMWare, etc). Running in a VM will require an SSD for the virtual HDD image to get solid performance (this can be your main boot drive if you have space, or a secondary SSD), but I've been running my .NET dev boxes in VMWare for years and don't notice any performance difference between the host and the VM. 
I would recommend bootcamp Windows 10 with VS Community edition 
There's nothing in that beyond but idle speculation. While it is possible that 4.8 is the last version of the .NET Framework, this article shouldn't be treated as a source.
&gt; And Span&lt;T&gt; is just too sweet to miss right now. Can't you just reference [System.Memory](https://www.nuget.org/packages/System.Memory/)? Right now, today, when targeting full framework..
If MS ever removed WinForms as a project type from VS I would consider switching to WPF, but in reality I would probably just skip to the next thing like Windows Universal or go 100% HTML client if it was a viable option. 
That allows you to create spans, but without span APIs in the Framework there isn't much you can do with them in typical use cases. You still need to copy from and to arrays when doing IO, create temporary strings when parsing numbers, etc.
Thanks!
The only problem with WinForms is when you want widgets outside the standard set provided by Microsoft. If you want to skin your List View or do crazy shit with the buttons then it's quite difficult to override the default draw methods and do your own mouse handling and crap like that. WPFs innovation was allowing you to easily combine and skin widgets. But for 99% of WinForms users we're writing shitty business software that has it's development time measured in hours, not weeks or months. There is no designer, QA, or focus group testing. It's just a programmer and Jenny from accounting who wants you to give her a button to summarize car rental costs from June to October.
I think it will likely depend on framework adoption. At this point web technologies allow for the best develop once deploy everywhere. I believe this will likely drive adoption to web tech over UWP/Xamarin.
I'm not sure what regulations your speaking of but you can definitely make PCI/HIPAA compliant apps on azure.
They mention in the article that the framework runtime might have to be modified to implement Span correctly. Given that .NET Framework's runtime wasn't modified in like 7 years, they won't do it now. Framework is and should only be used in legacy projects. There's really no reason at all to start a new netfx project today, Core is thriving. The few missing features will either be added in 3.0 soon (classic Windows Desktop development) or will be marked legacy (WCF server side). I really was happy to make the switch to Core as soon as I did. It's an absolutely awesome framework with a great ecosystem and tools. As you said and as can be understood from the NetFx4.8 announcement post, it really is on life support. End of life won't come for a while yet, but I hope noone expects any major things from the classic framework. It'll still _work_, but anyone that hasn't made the jump to Core should do it as soon as they are able. 
The old Framework won't be as performant as Core using Span, as the runtime (CLR) would have to be modified. It hasn't been modified since .NET 4.0. So yeah, you can get some Span functionality, but it won't perform any better than using arrays. There's a bit more info in the announcement post about this if you're interested. 
For those interested – Dainty is in a sense a refactor on the Visual Studio color palette. The entire theme, both for the editor and the environment, consists of 11 hex color values. This enables changing the look of Visual Studio – the editor and everything else – with very little effort. I did an experiment with the Material Palenight theme. It’s in no way a port of the theme – it’s a lot simpler. But that might also be exactly what one is looking for. I will consider how to best enable use of custom colors. [https://imgur.com/a/A68SNh9](https://imgur.com/a/A68SNh9)
Your being down voted because electron is a memory hungry piece of crap. Not because we don't like web. Many of the suggestions have been web based. But if you're developing for desktop use a desktop framework. If you don't need any desktop functionality go web based. Don't use web based tech to make a desktop application. 
Applications that requires levels of security clearance or regulations put in either by a government or company policy. PCI and HIPAA are somewhat easy to satisfy, as long as you're aware of the policies.
Yes, that's what I was implying. .NET Framework is still the best tool for these scenarios, probably always will be. 
Thank you! It will help noobs like me 🙂
&gt;Dainty ❤ Selenic → [https://imgur.com/zQPbCDv](https://imgur.com/zQPbCDv)
WPF? What? It's widely used in production and I believe there is no alternative.
Can someone ELI5 what the .net standard is and how it compares to regular .net and .net core?
Interesting challenge, is the second thread supposed to pop the stack once the first thread has finished pushing numbers? 
It is the first time I read "Not the real thing" in technical context. I see this phrase when people write about art, cars or drinks but never ever about a shell script :) 
Yes, I know, and I agree to politely disagree with all of them.
Maybe you never used a proper Linux shell. Not the real thing. It doesn't do what the original does. I'm sorry for your ignorance. That's all to say to your last post. Up to this point you seemed reasonable, now you look ignorant.
.NET standard is the common subset of APIs that is available for .NET/.NET Core/Mono/Unity/UWP. If you build a ".NET Standard" library at a certain level, it should work anywhere that supports that level. Here is a list of platforms and which levels of .NET standard they support. https://docs.microsoft.com/en-us/dotnet/standard/net-standard 
The first release of .net standard breaking commonality between full framework and .net core means the end of useful .net standard. 
I now realised that in my Game.cs (Which I didn't link thinking it wasn't needed), I had a few more lines which interfered with the graphics. I fixed this and now it works! Thank you ^^
Please feel sorry for me. It really helps.
.net standard is just that. A standard. It states that these APIs are available and what they should do / return. .net framework and .net core are both runtimes. They are what is actually doing the work. They also have a set of APIs that are flushed out and if a runtime contains all of the APIs and behaviors of a standard it can be considered to be compliant with that standard. This way you can make a library that only uses .net standard and you are guaranteed that it will run on runtimes that are compliant for that standard. A standard says that a car should have a steering wheel, airbags, wheels, etc... But a car manufacturer makes the actual car (runtime) Both high performance cars and high efficiency cars follow the standards but can very drastically. Because they all follow the standards they are all able to be driven on our roads.
Good. That was my intention. I'm all about helping others, that's why I posted in this topic concerning C\# and Linux in the first place.
True. Same as consideration if these new things fit for designed usage and how much will be maintainable by colleagues. Put web technologies everywhere because they fit for certain scenarios is not good way to go. 
Check out Dapper. https://www.nuget.org/packages/Dapper/
To build on this, a quick note that threw me off when I did this before: the tag also changes from singular to plural: TargetFramework to TargetFrameworks It took me longer than it should have to fix this when VS complained about it. 
this is the real reason
Sorry you burned some time on that. I should have pointed it out but I forgot. 
Thanks!
Right, but in his case there is still the learning...
Would moving it to the right side of the screen be an option until you sort it out?
That's my current work around I have an option in the settings that you can move it to the left or right side of the screen the thing I don't like about the right screen as people with multiple monitors it's It's oddly in the middle
Sure, but we'd be open to any solution. We just want to see an understanding of a producer/consumer pattern.
Integers are for whole numbers. For decimals define your variable with “decimal”.
That's correct , To use decimals it's the exact same as you've done before with int's except you change the type of the values from int to decimal. I can't go into much detail right now as I'm in bed on my phone :) Although if you need anymore help feel free to message me and I'll respond when I can.
For a beginner I would not recommend jumping straight Into Xamarin.Forms , the documentation and available resources just aren't very friendly to beginners 
You've never used XAML have you? 1 wrong character will give you the most cryptic compile error ever and won't even give you a clue as to where it might be.
Mhhm interesting, i use visual studio for Mac , must be a specific issue to that then. 
That is answered in the post. .NET framework will move at a slower pace and always be a few steps behind for stabilitys sake. 
It's not worth it to rewrite a Windows Forms app to use a newer UI framework.
very nice example thank you
Yea but Windows Only :(
Never say never, but given that .NET Standard is accumulative, I don't think it's very likely as the risk argument that applies to .NET Standard 2.1 will always apply to future versions too. And a side-by-side release of .NET Framework is extremely unlikely. See [this thread for details why](https://twitter.com/terrajobst/status/1059528228434456577).
It wasn't though. Will .NET framework eventually get .NET Standard 2.1? Or will .NET Framework be stuck on .NET Standard 2.0 forever? And if .NET Framework will be on .NET Standard 2.0 from here on, why even have .NET Standard if .NET Core is the only one who implements it? From my view, the whole point of .NET standard is a common API set for library developers to target. Now libraries will either need to conditionally compile again or abandon .NET framework. Neither is a good option.
4.9 will probably be on 2.1
I am very doubtful about that. It very much sounds like .NET has given up on doing anything with the .NET framework outside of security patches.
I think the risk argument is a lot of bunk. C# and the .NET Framework were specifically designed so that new features can be easily added without breaking backwards compatibility. 
That's probably true, but if it is then Microsoft needs to actually say it. We don't need another Silverlight incident. &gt; We're excited to announce Windows Server 2024 with .NET Core built in. (By the way, it doesn't run .NET Framework) It is an exciting time for the Windows ecosystem.
You may want to look at Identity provider with claims. I stood up a custom user store that also works with MS accounts. 
I've looked at Identity provider - but it seems that all the example I'm finding are all geared towards OAuth or external providers. 
Why don’t you give .NET Core and VS code a try?
You mean like [this](https://purple.pizza/explaining-dotnet-standard-like-im-five/)? ;)
&gt; Sure seems like you had a conclusion before you started looking. No, I'm an expert in .NET and actually worked at Microsoft for 4 years. I don't need to "look back" because I have moved on to other technologies that fit the needs of my projects. Perhaps, some day, I will find a need for which .NET offers a better solution than my existing soup of tech... I am always attempting to use the right tools for the right job. Far too many devs (usually in the .NET or Java communities) have only one tool in their bag and so reach for that to do nearly everything. I started way (way, way) back and have used so many technologies over the years that I see them all as mere tools with different features. A hammer here, a screwdriver there, a torque wrench there.
Not sure what you mean by that; we've seen a lot of issues with evolving the .NET Framework recently. For details, read the section "Machine-wide frameworks versus application-local frameworks" in my [Introducing .NET Core blog post](https://blogs.msdn.microsoft.com/dotnet/2014/12/04/introducing-net-core/). The crux of the problem is that the .NET Framework was designed to be a centralized resource on the machine. Many other features (such as COM activation and IIS) are closely tight to this notion. Side-by-side installations don't fully solve this. For more details why, read my [Twitter thread](https://twitter.com/terrajobst/status/1059528228434456577).
I don't think that .NET Framework 4.8 will be the last version. It's a safe bet that we'll eventually have to ship *some* new API (e.g. a new crypto standard or something like TLS 1.3 will happen which needs new APIs). It's just that we don't generally plan on bringing new features to .NET Framework by default anymore.
Out of curiosity, do you work on the .net team?
[This tutorial](https://docs.microsoft.com/en-us/aspnet/identity/overview/getting-started/adding-aspnet-identity-to-an-empty-or-existing-web-forms-project) is really remedial and dated but the key parts are the UserStore and IUser implementations. I've stood this up on top of an existing custom forms auth with success. There's some coupling to EF you may find gross, but it's stable. It goes into Owin, but you can omit those bits and get started with the UserStore then [google-fu](https://www.google.com/search?q=asp.net+custom+user+store&amp;rlz=1C1APWK_enUS747US747&amp;oq=asp.net+custom+user+store&amp;aqs=chrome..69i57j0l2.4270j0j7&amp;sourceid=chrome&amp;ie=UTF-8) your way into your own custom UserStore.
The blog post says 4.8 stays on 2.0, basically dotnet framework is obsolete
Wed internally used direct3d. There’s huge complexities at the driver level in there.
Yay, netstandard. A base specification with, again, only one compliant implementation.
&gt; look back &gt;moved on I think the pushback is coming from your choice of words. I *think* the gist of what you're saying is, "I'm currently using different tools and they're working for me." But people who *read* your words are hearing, "I have evolved past .Net and using it again would constitute a regression to a worse tool/ecosystem."
There's a good chance that 4.9 will never come, or at least not for many years.
They've already announced that .NET Framework won't be receiving major features that .NET Core will and that .NET Framework is on long term stable support.
It was just released, of course the first to support it will, for a while, be the only compliant implementation.
Agreed. The majority of .NET coding is network and console apps that with .NET Core run just fine on OS X.
&gt; I just feel like they COULD have made WPF cross platform, but didn't even entertain that route because it goes against their best interests. They COULD have made it cross-platform... Just that it would have taken an enormous amount of resources. But the estimated ROI is too little for the amount of effort and resources needed. It's simply not worth it.
The small thing that sold me was that it includes a command line tool for creating and manipulating projects, and the project file format generated by it is just so much simpler. 
And here I was trying to be polite. Eh. 
I think the docs are pretty good. Docs are always daunting to beginners. Xamarin.Forms is well worth learning. I'd start with it. It's been very helpful in simplifying my developments.
I just ask questions
&gt; For example, I'm building a tool that needs to be able to read Access databases. .NET Core 3.0 will support COM; e.g. here's a tweet about how it can currently drive Excel https://twitter.com/runfaster2000/status/1053704090671185920
I completely agree with that, but I just wouldn’t recommend it to a total beginner, it’s too much to take in at once. 
560 views not a single comment :/ 
.html
 Hey guys, So I uploaded a new video on finding the optimal amount of centroids when using the K-Means clustering algorithm. The method is called "Elbow Method" and it is very useful when you don't know how many clusters are there in your data. For example, let's say you have a bunch of text documents and you want to cluster them by topic. You can use this method to find out the optimal number for "K" (find out how many different topics are there in the text). Maybe I should create a separate project on this subject, but for now I uploaded only the implementation and a very simple example. Next I would download the statistics for NBA players and try to find out how many different types of players there are Here is the video demonstration: [https://www.youtube.com/watch?v=lERwlRfxwj4](https://www.youtube.com/watch?v=lERwlRfxwj4) Also I uploaded video on Face Detection using AForge and Haar Cascades: [https://www.youtube.com/watch?v=8yetDpD3ksI](https://www.youtube.com/watch?v=8yetDpD3ksI) I really hope someone would find any of this useful.
 Hey guys, So I uploaded a new video on finding the optimal amount of centroids when using the K-Means clustering algorithm. The method is called "Elbow Method" and it is very useful when you don't know how many clusters are there in your data. For example, let's say you have a bunch of text documents and you want to cluster them by topic. You can use this method to find out the optimal number for "K" (find out how many different topics are there in the text). Maybe I should create a separate project on this subject, but for now I uploaded only the implementation and a very simple example. Next I would download the statistics for NBA players and try to find out how many different types of players there are Here is the video demonstration: [https://www.youtube.com/watch?v=lERwlRfxwj4](https://www.youtube.com/watch?v=lERwlRfxwj4) Also I uploaded video on Face Detection using AForge and Haar Cascades: [https://www.youtube.com/watch?v=8yetDpD3ksI](https://www.youtube.com/watch?v=8yetDpD3ksI) I really hope someone would find any of this useful.
Is HtmlAgilityPack still having an awful API? I remember it returning `null` instead of an empty enumeration when it couldn't find any matching elements.
NetStandard is not about performance. It's about writing code once and then reuse it in all the different platforms without change. I simply don't care if the old framework would use the "slow" span as long I could use it without #ifdefs in my libraries.
Without any argumentation your remark is pretty silly. What are the reasons it's legacy? You can 'disagree', which is fine, but at least use arguments why. 
Wtf is this subreddit coming to, that a normal remark is downmodded to -5 (and counting) and claims without any argumentation whatsoever are upmodded? 
What I've always wondered is why MS decided to drop the side-by-side way of installing .net frameworks. I mean, let's say there's a .net 5 planned, why not install it sidebyside? Or even, install 4.8 side by side? net 4 runs side by side with .net 3.5 (which is still supported thanks to sqlserver and therefore brings clr 2.0), why not do that? Run on the latest CLR unless explicitly stated in the app.config file (and e.g. run on 4.7 or earlier instead of 4.8). 
OMG IOT!!! Finally IOT , no need to start learning Go for my smart house. To be honest i am totally unexcited for the GUI,hate win form... But the AI and Machine learning and IOT, pfff MADE MY DAY
Side-by-side installations don't fully solve this, as explained in [my Twitter thread](https://twitter.com/terrajobst/status/1059528228434456577).
Good points, didn't realize the in-process situation nor the com-&gt;.net activation route, which indeed makes things a nightmare. Ugh... rock, meet hard place.
Why not just run visual studio on Mac? 
Why not try iDiTect.PDF library, it can generate table easily to insert it to PDF page in C#, please see the full guide for adding table to pdf [https://www.iditect.com/tutorial/pdf-table/](https://www.iditect.com/tutorial/pdf-table/)
Sorry, but as the other post said, this is a rabbit hole I don't wish to get into. I did in the past, and others spoke better than I on the interwebs. 
Yes, I totally agree with you. I think Core is a framework that will get new features and I'll prefer using it where possible, but .NET Framework will continue to be a good second choice if you're in the ecosystem.
Try https://www.firsttimersonly.com
Example: You have base class-&gt;dervived class-&gt;even more derived class. base class (bc) knows nothing about derived class (dc) or even more derived class (emdc). It can't. bc can have a method called AMethod() which is virtual or abstract. dc or emdc can then override it (provide their own implementations. Derived classes can know about their base classes because they can access bits of them. They can also call a method on the base class by putting base in front of it ```base.AMethod();``` If you have an object of type emdc and assign it to a variable of type bc and call AMethod it will call the version in emdc. If emdc doesn't have an implementation it will look in dc and if nothing will look in bc. This is how your behaviour class is calling the version in the derived classes. Just assign the derived class to a variable of the base type and it will call the most derived version. If you have a lot of different behaviour types in a collection, the collection type will be of the base type. This means you can loop through all the items in that collection and call AMethod, and it will call the derived type's version. public class BaseClass { public virtual void AMethod() { Console.WriteLine("AMethod in BaseClass"); } } public class DerivedClass : BaseClass { public override void AMethod() // Replaces the version in BaseClass { Console.WriteLine("AMethod in DeriviedClass"); } } ... BaseClass bc = new DerivedClass(); bc.AMethod(); // Should show "AMethod in DerivedClass"); There's a bunch of nuances to inheritance which I've skipped to try and make it simpler.
Thanks. I just updated my post, read the bottom of it. I provided a better example of what I am trying to do.
The project in the company that I work for uses [asp.net](https://asp.net) as a backend and angular on the frontend. For your second question, I am referring to .NET not .NET Core. Thank you for your time!
I am also a newbie regarding [APS.NET](https://APS.NET) so I am going to check out what you suggest!
Yuck no. Why do people keep insisting on using HtmlAgilityPack? Why not a more modern library that isn't a pain to deal with such as AngleSharp? Why even Selenium? After using it I can with 100% confidence say the C# bindings for it are a complete shit show. It was clearly written by a Java developer that didn't appreciate C# conventions - don't blame them but it means that the API is horrible, and its almost impossible to debug due to the way they throw exceptions. I would highly recommend using PuppeteerSharp instead (as long as Chrome only doesn't bother you, which for scraping I doubt it would). https://github.com/AngleSharp/AngleSharp https://github.com/kblok/puppeteer-sharp
...oh dear, you should have waited until he built it in WPF before mentioning this option, to continue the theme.
&gt; 451: Unavailable due to legal reasons &gt; We recognize you are attempting to access this website from a country belonging to the European Economic Area (EEA) including the EU which enforces the General Data Protection Regulation (GDPR) and therefore access cannot be granted at this time. For any issues, call 304-235-4242. What kind of BS reason is that?
I’m quite aware of what ODBC is. Of course it only works of windows. They said that they needed odbc in core. I’d assume they’re not on Linux since there is no such thing as odbc on Linux. 
it's easier for them to just deny us access instead of complying with EU law.
If all constructors in the base Animal class registered each new instance in some global collection, that would get you a collection of all Animal and Animal derived instances. You could then iterate this collection in the allAnimals.Speak method. Obviously this would require you to manually remove these references before these objects could be garbage collected. Perhaps you could use a WeakReference instead to avoid having to do this, and clean up dead ones you find when iterating the collection.
I don't understand. Do you have an example on adding these classes to a collection? I'm assuming this is going to require reflection?
&gt;**If you’re a library developer**, you’ll get the best compatibility (folks able to use your code), by targeting the lowest netstandard version. Hey Joe, [this page](https://docs.microsoft.com/en-us/dotnet/standard/library-guidance/cross-platform-targeting) has two recommendations that contradict this, one about not using `netstandard1.x` and one about considering adding a `net461` target when targeting `netstandard2.0`. I know that your page was written as an ELI5, but it may still be appropriate to throw in a link to that page.
I think you need to be more clear about the distinction between classes and objects. You don't call methods on classes but on objects (unless they are static methods, which doesn't apply here).
I was just thinking you have (ignoring WeakReference for the moment, and using a List for simplicity) something like: public class Animal { public static List&lt;Animal&gt; AllAnimals = new List&lt;Animal&gt;(); public Animal() { AllAnimals.Add(this); } public virtual void Speak(){} } Then you could iterate all Animal derived instances and call their Speak method with something like: foreach (Animal animal in Animal.AllAnimals) { animal.Speak(); } But with the AllAnimals static List keeping a reference to each instance, none of them will be garbage collected ever unless you manually remove them from the List. I've never played with WeakReference, but it might be a solution.
Risky click of the day
https://github.com/dotnet/roslyn https://github.com/dotnet/core Working on either the C# compiler or the core library is the best way to start. It has a higher entry level than maybe some other projects but offers a very active community.
Be careful what you wish for! Once you start an open source thing that people use they will expect you to work on it all the time and will give you shit for having a life or not wanting to work on old projects any more. If you have a single passion project that you intend on working on for a long time, then absolutely. If it's a little side thing here and there you may be asked for a lot of thankless requests and most certainly won't get any money for your time.
REST fanboys literally can't comprehend that people might need more sophisticated support for interprocess communication. They only think of web sites.
The bunch of rambling on twitter? Yea, and it said nothing of merit. Windows itself is updated on a regular basis without breaking anything. And that's a lot harder than .net to maintain compatibility.
There's more to working with access than just ODBC. You need COM support. 
That's good to hear.
I’d assume that package uses interop to handle that. Yes, it will only work on windows. They said nothing about needing Linux support. 
The reason the WPF and Winforms people want it is performance. Most of them couldn't care less about running on Linux.
Check this link: [https://github.com/MunGell/awesome-for-beginners](https://github.com/MunGell/awesome-for-beginners)
Which is fine. Access + Linux is silly. 
No worries! Just wanted to mention it to save anyone reading the time.
With "platform" I meant CLR implementation. Don't forget the justification here is not that you can't provide these APIs/types but rather that microsoft doesn't want to change the "old" CLR. I'd prefer them to amend the apis, even without performance improvements. It's the goal of netstandard: a common set of types and apis that can be shared across .net implementations allowing people to move forward cleanly without #ifdefs all over the place. Performance, other than the possibility of sharing newer versions of common libraries, was not the major concern. I have a mix of .net core and old .net web services that share a lot of code. At this moment, I can't take advantage of span&lt;T&gt; &amp; friends because all the shared code must stay in net standard 2.0. It's a lose/lose situation for me: neither .net core or old .net will take advantage of the performance improvements.
Agreed.
https://up-for-grabs.net/#/
#2lazy2formatthis 1. wrap your StreamWriter in using statement 2. define your properties like this, if you can: public string first { get; set; } = string.Empty; 3. your equals methos would be something like this: public bool equals(Test t) { return (new { this.first, this.last, this.id, this.major }.GetHashCode() == new { t.first, t.last, t.id, t.major }.GetHashCode()); }
Do you mean MVC..?
&gt; But people who read your words are hearing Ah... quite right. Not what I intended at all. Thank you.
 public double[] values { get; private set; } = { 1.0, 2.0, 3.0 };
As far as I know, creating vectors with a Span&lt;T&gt; (i.e., new Vector(Span&lt;T&gt;)) is not possible. Any idea if this even possible, and will it be available?
As stated by [mike2R](https://www.reddit.com/user/mike2R), you'll either have to register the objects being created or you'll need to use reflection to find all objects that inherit from `AIBehaviour` and then call the `Update` method on those. Reflection will probably be slower.
Hi again. &amp;#x200B; i've tried that one, but still got a error. if (decimal.TryParse(textBox4.Text, out decimal value)) &amp;#x200B; &amp;#x200B; &amp;#x200B; { decimal calculatedValue = value + -0; textBox3.Text = calculatedValue.ToString(); textBox3.Text = (value - 58.04).ToString(); } &amp;#x200B; } &amp;#x200B; operator '-' cannot be applied to operands og type 'decimals' and 'double' (on (value - 58.04)) &amp;#x200B; Also, with int, the last test i did the top line decimal calculatedValue = value + -0; worked with 0, as long the last line had the value i wanted to calculate with. Whats the reason for that? &amp;#x200B;
Try a month with winforms, then WPF(Fody + Mahapps Rules)... For mobile right now I'll go Blazor(not for beginners), and don't focus too hard on .net framework as it's phasing out
&gt;Hi again. I'm not the same person that responded before :) &amp;#x200B; instead of this &gt;textBox3.Text = (value - 58.04).ToString(); &amp;#x200B; Try this instead &gt;decimal value 2 = 58.04; &gt; &gt;textBox3.Text = (value - value2).ToString(); &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
Exactly. If you’re doing that, just convert it to some other RDB. 
Wcf is not legacy. There are a ton more use cases besides rest when building an api. As an aside, if Microsoft really wants to get people to migrate they will have to support wcf either way. Itll be decades before business core APIs are rebuilt because they work and migrating to core brings little to no benefit besides making a developer feel good. If wcf existed in core I'd be having my teams migrate everything we have to core as a project. As is, nothing is moving because ms hasn't saw fit to include this critical and highly used portion of .net due to what I can only assume is rest idealism debates within the company 
I wouldn't recommend it to a beginner either. Get to grips with the language first.
I don't think that's an option. The reason people still use Access (as opposed to SQLite) is that it has a built-in UI. 
Right, in which case, they’re on windows. 
&gt;decimal value2 = 58.04; &gt; &gt;textBox3.Text = (value - value2).ToString(); Hi. &amp;#x200B; First of all, removed the calculatedValue=value+ -0; so it was only calculatedValue=value; (bit tired, but after reading that line again, it made no sense having that -0 hehe) &amp;#x200B; So, i tried that way you described, now i got a new error stating: Literal of type double cannot be implicity converted to type 'decimal'; use an 'M' suffix to create a literal of this type. Your added line made sense to me, but the error doesent hmm. 
Mvp is also a pattern: https://en.m.wikipedia.org/wiki/Model–view–presenter
mhhh that's really strange. Can you send the full code, il try to figure it out. preferably using this site [https://pastebin.com](https://pastebin.com) &amp;#x200B;
Ah! Thanks
[https://pastebin.com/DqyUQ6nt](https://pastebin.com/DqyUQ6nt) &amp;#x200B; &amp;#x200B; Removed some lines of other tests i've been doing, so it wont confuse you :)
If you ditch WinForms and use WPF instead you'll be able to use MVVM - which actually has a ton of resources and articles.
try this , it should work (haven't tested it though) [https://pastebin.com/fX093Xtt](https://pastebin.com/fX093Xtt) &amp;#x200B; I also cleaned up your code a bit and added another more elegant way of doing it.
Ah.. Perfect! That worked :) Was missing (decimal)58.04; i see. This has been a lot of help from you all. Thanks :) Back to reading and testing then :) &amp;#x200B; I got a old version of C# for Dummies book (cant remember which version), is it still a good book to read to learn from, or do you have a suggestion of a better book to learn basic ? (or even just a newer version of it?) (from my perspective, i learn a lot more of actually testing different tasks, such as this, instead of "boring" stuff, which i will create and toss away 5 min later (such as hello world)), even tho i know that all that basic is what i really need as well.
&gt;What is the difference between the SpeechRecognizer and the SpeechRecognitionEngineclasses? why use one over the other for speech recognition? The answer is in the [documentation](https://docs.microsoft.com/en-us/dotnet/api/system.speech.recognition.speechrecognitionengine?view=netframework-4.7.2#remarks ). &gt; Is the speech recognition widget that I see in Windows 10 when I start my program has to be shown? &gt; I loaded the SpeechRecognizer object with simple grammar such as "a", "b", "a r". it recognizes it perfectly but the time it takes is not ideal for my program, I would like it to be faster, any way to do that? Use [Windows.Media.SpeechRecognition](https://docs.microsoft.com/en-us/uwp/api/Windows.Media.SpeechRecognition), [Azure Speech to Text](https://azure.microsoft.com/en-us/services/cognitive-services/speech-to-text/ ) or [Microsoft.Speech](https://msdn.microsoft.com/en-us/magazine/dn857362.aspx )
I've never read any books on programming, so I cannot recommend anything either. &amp;#x200B; I personally used this videos series to get myself started [https://www.youtube.com/watch?v=pSiIHe2uZ2w&amp;list=PLPV2KyIb3jR6ZkG8gZwJYSjnXxmfPAl51](https://www.youtube.com/watch?v=pSiIHe2uZ2w&amp;list=PLPV2KyIb3jR6ZkG8gZwJYSjnXxmfPAl51) &amp;#x200B; &amp;#x200B;
Cheers :) Will check that one out.
You can use MVVM with Winforms.
&gt; The bunch of rambling on twitter? If that’s how you see it I’m not sure us rambling on Reddit makes a difference then 😉 &gt; Windows itself is updated on a regular basis without breaking anything. And that's a lot harder than .net to maintain compatibility. Ironically it is for the reason that C-style ABIs have clear input and outputs and Windows has a mechanism called shims which allows tweaking them *per application*. And those shims can be shipped after Windows releases too. An OO framework like .NET doesn’t have clear input and output semantics. It’s also very easy for app authors to inadvertently depend on implementation specific behavior which we can guarantee. The closest thing we have in .NET is a mechanism called “quirking” which allows us to give applications compiled for an older version a different behavior. However, in contrast to Windows’ shims these aren’t app specific and have to be known up front, thus they only work for known breaking changes, not unknown breaking changes.
There's a couple of tags on the website that you can search by that give you suitable issues for beginners
Ideally you would have a database.
[removed]
"Can i write something that just reads and writes to the excel file?" Yes. Look at -&gt; Microsoft.Office.Interop.Excel
I think if you are just starting out then a console app is a good idea. Its the easiest thing to get going and you wont have to worry about any UI stuff. &amp;#x200B; I'd recommend sticking with the excel file for now. What you're describing should really be stored in a database of some kind but again, if you're just starting out a spreadsheet should be fine. The only issue with the spreadsheet is the "normal" way to edit and read them uses COM interop which is really annoying to use. If your spreadsheet is a .xlsx file or can be converted to one, you can use a library called [EPPlus](https://www.nuget.org/packages/EPPlus/) to make editing and reading much easier. &amp;#x200B; At my last job i spent ALOT of time working with excel spreadsheets in C# so feel free to ask me any questions you might have I'd love to help
You can also use a RS-25 rocket engine with a bicycle too.
We started seeing it across our entire environment for apps that had not changed, usually it manifested itself around dB connections. They eventually tracked it to a Microsoft patch and uninstalled the patch. I have no idea which one though
I'm not sure if there's already something in the namespace for it, but you could do something like: public void LineCount(string fileName) { StreamReader sr = new StreamReader(fileName); int lCount = 0; while(!sr.EndOfStream) { lCount++; } Console.WriteLine($"Number of lines: {lCount}"); } &amp;#x200B;
I was thinking about making a single table in a database to start off. that isn't too hard for me to do but then my worry was how does the database move with the program? it is only me and Boss who use the data so i can't justify hosting it in Azure or anything like that. So if it was just the excel file and doing simple look ups that felt easy enough. 
This is why you edit your readme every so often. “Oh look a commit was made a few days ago this project is maintained”....
You would host the database on a server. The database would be accessed through web api. You would create accounts with the Identity Framework. You would consume the api through a client application. If you can't use azure or aws then you need an on premises server.
Ah that changes things, In that case you should ask yourself "how are we going to make sure we both have the same version of the spreadsheet"? If there are going to be multiple people editing and viewing the same data, possibly at the same time, 100% you need a database. 
&gt; will the .NET Core runtime make a best effort to execute any code in that .NET Framework assembly and only bail out if it runs into an API that .NET Core doesn't implement Yes. Core v2.0 introduced a compatibility shim that does exactly that. You can reference packages that only target full framework, and as long as they don't actually attempt to execute any unsupported API's, it will just work.
Do you have Discord, so I can ask some more questions? My discord is Plakt0ets#5137 
Your one was also nice! But I am making a form application, not a console ;)
 using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Drawing; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows.Forms; using System.IO; namespace WindowsFormsApp1 { public partial class Form1 : Form { string fileLineCount = "0"; public Form1() { InitializeComponent(); } private void label1_Click(object sender, EventArgs e) { } private void label1_Click_1(object sender, EventArgs e) { label1.Text = fileLineCount; } private void button1_Click(object sender, EventArgs e) { OpenFileDialog ofd = new OpenFileDialog(); ofd.Title = "Open your proxy file"; ofd.Filter = "TXT|*.txt"; if (ofd.ShowDialog() == System.Windows.Forms.DialogResult.OK) { fileLineCount = MessageBox.Show(File.ReadAllLines(ofd.FileName).Count().ToString() + " Lines added!"); } } private void label4_Click(object sender, EventArgs e) { } } } &amp;#x200B;
unfortunately, its not classic asp.net. Would be lot easier to put in place if it was. (At least based on my own experience with classic aspnet and lack of experience with MVC's identity framework)
If you are going the database route, just make a web app.
I edited the post to reflect what is really going on. He says he realizes he is addicted to video games but has to be able to do his online course work and his gaming is starting to reflect in his grades. 
Wrong. The fewer lines the better. /s
Sure someone could Linq up the streaming solution into a single line :)
Pretty sure you can just do a File.ReadAllLines and count on the returned object. I can't test at the moment though
Saw that too ! lol
just start making something that sounds cool also if you're looking for existing projects to contribute to, these boards have lots of posts like "X, the new thing for Y" where it's a repo they made, so you can contribute to those to get some experience and thanks.
Removed: Rule 4. Sounds like the XML reading is the trivial part (check out `XmlSerializer` or `XmlDocument`), but having it run "some pre written macros" is a pretty broad subject. You'll need to provide more information what the "macros" are, and how the XML hooks into it.
&gt;fileLineCount = MessageBox.Show(File.ReadAllLines(ofd.FileName).Count().ToString() + " Lines added!"); This is still a messagebox, and it needs to be text.
i think ***MessageBox.Show*** will return ***System.Windows.Forms.DialogResult***, not the string ([msdn](https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.messagebox.show?view=netframework-4.7.2#System_Windows_Forms_MessageBox_Show_System_Windows_Forms_IWin32Window_System_String)) So change if (ofd.ShowDialog() == System.Windows.Forms.DialogResult.OK) { fileLineCount = MessageBox.Show(File.ReadAllLines(ofd.FileName).Count().ToString() + " Lines added!"); } to if (ofd.ShowDialog() == System.Windows.Forms.DialogResult.OK) { fileLineCount = File.ReadAllLines(ofd.FileName).Count().ToString(); MessageBox.Show($"{fileLineCount} Lines added!"); }
Yea, I accidentally forgot to remove when I quoted and edited. Whoops. 
Making a second user account with only access to productivity tools (or at least shown) might be a more realistic step in the right direction. You still need some discipline to work with it though.
Well it sounds like we are talking about a young individual. It’s quite common for these age groups to lack willpower... it gets correctly mostly with life lessons and ending up the loser of situations. It’s hard to put myself back in those shoes so I don’t have great input because doing the right thing seems so obvious to just log out of the game and get stuff done. I would try to find out if the issue is the class work is too easy or do they really not love programming .. normally for me due to my passion, working on a project in code beats gaming any day and I love games still to this day. If the work is too easy maybe we need to look into CLEP or something. 
How do you build the MVC website? could this be an Intranet type of website? 
There's a lot of questions. To start, what is your work environment like? How big is the company? Do you have an internal network? Do you have network shares? Do you have servers you could host your own services on? Do you have an intranet? Also, your description is very vague. When you search for an employee, what do you want to get back? "Yup, that's an employee", or are you looking up specific information? Are you intending to manage employees through this? Where did this spreadsheet come from? Is it the only copy? What will you be writing back to the spreadsheet? Do other people need to see what you're writing back? I have many more questions, but answering those we can narrow in on the most likely best path.
There should be some socialized public project system. So often I’ll find a tool that’ll have a 6month PR backlog and the maintainers been MIA. I don’t blame them for having lives but it should be a lot easier to maintain a project democratically. 
I apologize i should be specific. We use this to spreadsheet to look up a users PC information and its to easily remote into it and do what we need to. My boss and I are the only ones using the spreadsheet. We have Network shares we can use. 50 employees at the moment and it has always stayed around that for the past few years. 
Yes. Whether something is intranet or extranet just depends on how you configure the network. For new websites, you would do [ASP.NET](https://ASP.NET) Core MVC. Web API and MVC are basically the same thing, it's just that Web API is more about programmatic access, and MVC is more about UI access through a HTML page.
Oh nice ok thank you. Sounds like I should rework it a bit..
He has willpower, hence why he's trying to find an efficient way of restricting access when he shouldn't be playing stuff. That is willpower. Creating ways to stop yourself from doing something is just as good as just not doing it at all, if not better, because now you can't "slip" and do it anyway. &amp;#x200B; It's just a kid that enjoys games. It's the same for nearly every human in history, he is at least trying to do something to stop himself. &amp;#x200B; Enough for philosophy, killing executables is the only thing you can probably do. It might be decent to make it a windows service, and create scheduled times for no gaming (6-9pm or something) so you don't have to turn it on or off, this is your time to work, and allow for adding more time if wanted, but not less without a password.
Thanks! Looks great, but the subclasses are not getting added through Animals constructor. Right before the foreach statement I counted how many objects the list contained and it was '0' no matter how many classes derive from Animal. IS the code working for you?
Do you have Active Directory? Do you have an intranet? Do you have servers you could host your own services on? Do you and your boss currently use the same exact spreadsheet, stored on a network share? Is your workflow "Issue with users computer -&gt; Find users computer information -&gt; remote into users computer", with no other steps in between? As I understand your use case, you have 2 required components to your system. A front end, where you can search for the users information, and the back end, where you are storing the data. Currently, you're using Excel for both the front end and back end. From my understanding, my business recommendation is to continue to use Excel. It works, the file is easy to maintain, can be backed up using your normal business backup process, everyone understands it, and 5 years down the line, after you have moved to another business, it's not going to break, causing headaches because no one on staff understands what a database is. However, this isn't /r/business, this is /r/csharp. You need to mix and match a front end, and back end. These will depend on what exactly you want to prioritize. The console application would be the quickest to actually query, you could add it to your path, and from any command line just type "remoteinfo john" and have it spit out all the info for all johns. You could do the same with a desktop application, too. The downside is dealing with distributing new versions, but with just you and your boss, not a huge deal. You can continue to use Excel as the backend. It's not really ideal, it's slower, but the huge advantage is that it's so easy for anyone to just open it up in Excel to just see all the data. On the deep end, is setting up a full database on an internal server. This is the most robust, easier to develop, but takes a bit to set up the DB server if you don't have one. Also, if someone new comes in 5 years from now, and your app breaks, and they don't know databases, while the data is still all there and super easy to look at, that person will probably struggle to see it. In the middle is a simpler DB. SQLite3 works on Windows, and with CSharp, it's a full database that's really just a single file, no server installation anywhere. Just point to the network share, and it just works. Again, the downside being if someone doesn't know DB's, they can't get that data. I'm curious as to what advantages of a custom written application you really want to see. Like, I applaud learning just for fun, but what is the annoying hangup about just using Excel that made you want to come up with a new, better solution. That will also really help determine which solution can best resolve your use case.
I don't mean to be rude, but that's totally not how object orientation works (and even though Unity doesn't use the built-in functionality of C# in that place it still gets to the same result). Unlike a function or a procedure a method always requires an object that it's related to. A function calculates its results solely from its parameters, a procedure accesses global parameters that are the same no matter which procedure you start, but a method accesses one specific class instance. And that's why what you are proposing can't work. Look at this example and try to explain what result you would want to see: &amp;#x200B; class Animal { string name; Animal(string p_name) { name = p_name; } void Speak() { print("My name is " + name); } } class Bird : Animal { int numberOfWings; Bird(string p_name, int p_numWings) : base(p_name) { numberOfWings = p_numWings; } void Speak() { print("I have " + numberOfWings.ToString() + " wings."); } } class Main { void AnimalSpeaker() { Animal allAnimals("Peter"); allAnimals.Speak(); } } The base class "Animal" simply doesn't have the "numberOfWings"-variable, so if Bird.Speak() was called on an Animal what value should it use? &amp;#x200B; May I suggest that you explain what you want to accomplish? It seems you are having an [XY problem](http://xyproblem.info/). There are hacky ways to achieve what you are describing (unless you run into situations like the one I described), but I am pretty certain that that's not the code you actually want to have.
Look up VBA, that's how people have been automating excel for years. You can do it in C# too, but I think you'll find a lot more support with VBA. &amp;#x200B;
Works ok for me - see [fiddle](https://dotnetfiddle.net/Ok7ibu)
My original sentence in the first post is the most relevant to your question. They know computers and if they know how it works and are admins on the PC (99% chance to be true) he can literally just end task the app that tries to end task his games... which is exactly what he will do after the first day. The only thing I can think to help with that is for it to email alert the whole family on a timer to say it’s still running and also to email the family on start that tracking has begun. On the other stuff you wrote.. we have a fundamental difference in our definitions of willpower. I won’t go further because it is not helpful to this conversation. I do wish them the best getting all on track for success. 
Mike2R commented a possible solution, all though it currently is not working. From a pseudo standpoint, his comment is exactly what I m trying to do. I have a class named Animal, I have several animals like bird, cat, and dog, that derive from Animal. All subclasses implement the Animal 'Speak' method. From outside of the Animal class I want something like AllAnimals.Speak() which will call every Speak method inside of every Animal subclass.
I guess i'm thinking if i could make something work with this it would help me come up with a better solution to grow it later maybe i show my boss this and he goes "wow we should find a way to do this even bigger" it could lead to more opportunities to code a big database instead of just an excel spread sheet. this would in turn have him put me on a project that i could be spending more time on at work to build and maybe get my experience to grow for my career. 
Its called a FORK ;)
This is just awesome and can't wait to port my own WPF applications to core. 
You mean forking on Github? You shouldn't be disappointed that someone who gave you something for free doesn't feel like giving you more of their free time to merge pull requests and test changes. If it's that important to you, fork it and apply those changes to your fork...I dare say it's very socialized and democratic process :)
I got it now, did not realize you were creating new instances of the subclasses. You can actually do the same thing but with interfaces. All though this does work, in my post I did want something a bit more dynamic. I want the code itself to add these subclasses to the list instead of manually having to create a new instance of a class. I know that this can be done through Reflection, I have done it before. But I am primarily looking for a non-Reflection based solution. Say I open this project up, not everyone will know that if they want to use the Speak method inside of their subclass that they have to manually create a new instance. I would like it to happen on its own at runtime.
Ok now I'm confused at what you want... :) My understanding was that you were trying to emulate the Unity approach of inheriting from Monobehaviour and getting certain magic methods that the engine runs at designated points. You have to have an instance of your Monobehaviour derived class in Unity for this to work - eg you attach a script to a gameobject, and when that gameobject is Instantiated, an instance of your class is created, and its magic methods called by the engine when appropriate. Or if you attach a component to an existing gameobject at runtime, an instance of the component is created and added to the gameobject's collection of components. You never use the 'new' keyword with a Monobehaviour derived class IIRC, but it is happening behind the scenes. I'm not sure if I'm misunderstanding what you are trying to do, or if you are misunderstanding how to do what you want :) To me it sounds like you will *need* instances of these derived classes - I don't see how they can be used otherwise.... 
A getter without a setter does not require C#7. Are you mixing this idea with expression-bodied members?
 int count = Enumerable.Repeat(new OpenFileDialog(), 1).TakeWhile(ofd =&gt; ofd.ShowDialog() == DialogResult.OK).Select(ofd =&gt; Enumerable.Repeat(new StreamReader(ofd.FileName), Int32.MaxValue).TakeWhile(sr =&gt; !sr.EndOfStream).Select(sr =&gt; sr.ReadLine()).Count()).FirstOrDefault(); I couldn't figure out a nice way to dispose the `StreamReader` when done, but this will do it, but it feels like cheating. It's that stupid `.Dipose()` being a `void` method that's really tripping me up. int count = Enumerable.Repeat(new OpenFileDialog(), 1).TakeWhile(ofd =&gt; ofd.ShowDialog() == DialogResult.OK).Select(ofd =&gt; Enumerable.Repeat(new StreamReader(ofd.FileName), Int32.MaxValue).TakeWhile(sr =&gt; { if(sr.EndOfStream) {sr.Dispose(); return false;} return true; }).Select(sr =&gt; sr.ReadLine()).Count()).FirstOrDefault();
That is exactly what I am trying to do, I think I am going about this the wrong way, I have never been great at explaining things. So in your comment, you said that when you attach a script to a game object an instance of that class is created automatically, users don't have to create an instance themselves. In my project, I am trying to do somewhat of the same, but of course I am not attaching these class files to anything. I just need to be able to invoke a certain method in all subclasses without having to manually create new instances. I want my program to see all the subclasses, add them to that list, then invoke. This way I can freely use the Speak() method in any subclass and not have to worry about or remember about having to create new instances like before with: Animal a: a = new Dog(); a = new Cat(); a = new Bird(); I would like the above to happen automatically behind the scenes. So I am assuming that reflection is going to be required but looking into Unity, the developers actually had an article that said their approach does not use Reflection, instead they actually parse (?) the scripts and see if there is one of these magic methods, if so, then add it to a list of scripts that needs to be constantly updated. In essence, it is almost the same approach you listed, but instead of doing it manually, Unity is doing it dynamically. I really hope this does make sense, I have been up for the past 14 hours working on several parts of this AI system and it's driving me insane.
You uninstall the games and make someone the admin of the computer. 
Thank you for the reply. I found some information that ill try out.
An access database seems like a better solution then a console app. 
This is not a C#, but a Unity specific problem. Because the Update() method is only meant to called by the engine and not by your code, you'll have to figure out a way to ask the engine through its api, to do what you want. I'm not well versed in Unity so I don't know how you would do that. I'm just pointing out, that this problem is meaningless in the context of normal C# without Unity.
Removed: Rule 3. I believe you're looking at an HTML/CSS issue here. It's also dependent on the rest of your wesite's structure and design.
That manages the code but not the issue tracking, project management, infrastructure, community, etc. Github forks also aren't really designed to maintain a fully fledged continuation of a project. For ex, source-code searching will be straight up inaccessible unless your fork has more stars than the original project, among other accesibility issues. Github treats forks as a user friendly interface for mmaking PRs, which makes sense. I'm not complaining about free software, I'm complaining about a lack of infrastructure around communally-run software projects. It seems, to me anyways, to be a surprising hole in the OSS community. Every software project still depends on one executive person at the end of the day. I guess there isn't really a demand for it. And the status quo might be very socialist, but I can't really describe it as democratic. Maybe anarchist if anything. 
It is actually me that is misunderstanding the language, your responses are exemplary. I however did just get this system up and running using Reflection, eek, but it will be a patch until I can better understand what I am trying to do. I really do appreciate your help and I do apologize if I did waste any of your time. You did teach me something new.
Get him a chrome book for school stuff. You can't do shit on them.
No problem at all, and good luck with it!
I'm with the advice to shift up to WPF if you can. If not,... MVP is a variant of MVC. Fowler explains the two variations [here](https://martinfowler.com/eaaDev/ModelViewPresenter.html). His explanations are precise which makes them harder to understand if you don't get the background, but just naming the two variations will help you google. I loved Winforms, but moved to WPF once I got over the initial pain from the transition. Now I've sort of moved to webby stuff too which is another set of patterns :) Not the answer you're looking for, but hopefully it will help a bit. 
Do you have a example? I just got the system up and running by using reflection. Correct me if I am wrong, but isn't your idea the same as Mike2R's?
That's not what Mike2R's code does. What his code does is keep a list of all INSTANCES of Animal or any of its subclasses and call Speak() on those. That's a huge difference. For example if you went Animal a = new Bird(); Animal b = new Bird(); Animal c = new Bird(); AllAnimals.Speak(); you would get "Tweet Tweet Tweet", because there simply aren't any instances of Dog or Cat, so there's nothing to call the Speak()-methods of those classes on. That's the important part you need to understand: you can call functions and procedures (and you can call static methods because they are basically just syntactic sugar for procedures, since they modify global state), but methods can only be called ON an instance. So no, Mike2R's code is not simply not working, it does something very different from what you describe. But what confuses me even more is why you think that Unity was doing that? The things you read about reflection and parsing the scripts are only optimizations. The result is exactly the same they would get if they used plain old inheritance and virtual methods. Maybe you can describe a situation where you think this functionality was used in Unity? Because if you create a class Animal that inherits from MonoBehavior and Bird, Cat and Dog classes that inherit from Animal and you then attach three Bird components to a GameObject then the code in the Bird class' Update method will be run three times, one time on each of the three component instances. And if you don't create any instances no Update method will ever be called. Don't let the fact that you aren't allowed to call the constructor in C# in Unity confuse you - they just combined C# with a graphical declarative programming language, and that is the editor. Adding a component to a GameObject in the editor may not look like a call to a constructor, but it effectively is.
And by the way I just noticed that his last response was newer than your response to my comment, so my answer may be a bit outdated, but maybe hearing what Mike2R said in the end once again in other words helps you understand the issue.
Thank you! I've done some digging on that topic as well to read up. Sort of tangential to my actual question, what would be good places to subscribe to/follow for news like this? I'm newish to .NET development and want to start keeping up on developments in the ecosystem.
And then u can do gameobject.addbehaviour&lt;dog&gt;()
Great list!
Do you by chance have an example or article I could read from?
Nice, thanks!
Not.on top of my head but.searching."c# generics" will tell sbout the &lt;T&gt; stuff
I'm not sure but I think this app gets news articles from msn.com At least on my computer I get the same articles both the app and the website. You can then download the html source code and extract all links. 1. Grab source code using HttpClient 2. Parse HTML, for example use https://html-agility-pack.net/ 3. Find the document node and extract the href attribute 
 Nearly all chromebooks can install linux using Crouton, and the new pixel chromebooks even have a native way of doing Hyper-V on linux. You can do a whole lot on them now :)
Thanks for your reply. It is a great list of projects and I have been watching it for some time now. There are many cool projects on there. Maybe I'm not very good at searching through, but, I haven't been able to find many C# projects there. There are a ton for python, java, cpp, … though. Would you happen to know how I can improve searching for C# specific projects?
Too bad at my company we still have to support XP. And by the time everyone moves over to 7 it will be long dead...
The &lt;T&gt; stuff. :D Thanks anyways, hopefully this will be a starting point.
Check out the top shelf library. It can help you keep the console app running indefinitely as well as in the future be able to install it as a windows service. 
Nice! But doesn't this just pause the main thread? I looked at the API but I am not understanding what exactly is going on with this.
WinForms runs on Windows, Linux and MacOS.
I don't know how good you are with collections but I'd suggest to check Simon Robinson's course on Collections. Its a pretty long course compared to others, but really good. This used to be a part of the path like two months ago but it's not now (Don't know why). The same guy has that course about Concurrent collections (still part of the path - advanced section). 
Link?
http://docs.topshelf-project.com/en/latest/installation/install.html
It pauses the current thread indefinitely without wasting CPU time on an infinite loop. If that's not want you want you'll have to be more specific.
I understand that it pauses the main thread, I am just a little confused about the flow of execution. I have a timer and a delegate setup, the timer is a System.Timers timer, on every tick it runs a method. So if the main thread is paused then how is the timer and method still working? Is the timer on its own thread?
Oh wow, this looks cool. Not exactly what I am looking for but I will definitely be bookmarking this one. Thank you! 
It will continuously run your console app. 
Unless you're using a synchronized timer (`System.Windows.Forms.Timer`, or `System.Timers.Timer` with a `SynchronizingObject`), the timer event will run on a random thread pool thread.
Okay. I used your one liner and I have also have a System.Timers,Timer setup as well. So the timer is running on a separate thread? I'm guessing that the app will only close if the main thread closes. So if the main thread is paused the app stays open allowing other threads like for examples sake, the timer thread, to continue running until the main thread finishes/closes? I am understanding this correctly right?
I see, I will be checking this out then. This, and suspending the main thread and opening new threads also seems like a good solution too to keep the projects footprint at a minimum.
[The Morning Brew](http://blog.cwa.me.uk/) is a pretty decent site to follow for a variety of .Net blog posts.
More or less, yeah.
I've been reading the documentation on windows services and I'm wondering if I should use visual studios drag drop function for creating a service then editing the code and inserting the code ypu provided? Or should I start from scratch and write all the code for the service from the ground up? 
Outstanding feedback! And the history helps with context. &gt;On the performance front, once WebAssembly is more stable and prevalent, what's to stop other web native frameworks from being compiled and closing the performance gap that is promised by the Microsoft compiler you refer to (my knowledge in this area is very limited)? Just for clarity, WebAssembly *is stable* in most popular browser / device combinations. It's the tooling that lags. For your specific question, there's nothing stopping other UI frameworks from being ported provided the aforementioned tooling exists. &gt;As for design thoughts, I poked around the Tip Calculator source a bit, and I like what I see. The cascading styles is pretty nice. Styles are one of the blunders of WPF style frameworks. They can't be combined or customized in any meaningful way. However, templating and lookless controls are the foundation of the awesomeness of WPF. As long as you have that, you're golden. My relationship with WPF is love / hate. The power is just unreal. But the XAML can easily become a nightmare to edit and maintain. I've taken all my pain of working with SL / WPF over the years and used it guide the modernization process of the API. Styles, Visual States, Data Templates (Frogui's Motifs), Resources have all been redesigned. In fact I am working on Visual States and Styles as we speak, trying to tune them to be robust and much easier to maintain. This would be a great time to have someone like you rip them part looking for vulnerabilities. As you continue to dig you'll see looklessness is taken beyond WPF's approach. For instance, there are no font-related properties in the Control class; such properties exist only in TextBlock and TextBoxBase. The rationale here is that cascading should be done with asset sheets and styles. This may change, but you at least get the minimalism mindset at play. &gt;I'd like to see significant nods in the direction of view model first development. This could be controversial and subjective, but I feel it makes MVVM development so much simpler and easier to reason about. And it does not preclude a view first approach, but having built in support would make at least this developer very happy. I may not be tracking the train of thought. Please education me, either here or DM! &gt;I'd also like to see binding expressions leave the XAML. Perhaps this is another controversial opinion, but I feel like XAML is only complex once binding gets involved. I much prefer ReactiveUI's approach of putting binding in the code behind where it can be type checked by the compiler. It also frees up the XAML to be used for designer data, since the code behind bindings will take over at run time. *Full-discloser: I'm pretty new to Reactive Extensions (rx) and ReactiveUI (rxui).* The value of rx became immediately apparent and that's why it's integrated into Frogui as a first-class citizen (see `DependencyObject.GetObservable&lt;T, TOwner&gt;()`). I really wanted to make rxui *fit into Frogui* but it became clear that it's understandably too specific (e.g. assumes properties are members, not like the beautiful weightless `DependencyProperty`). I had many conversations with the rxui team before deciding to use it for ideas, but not as a framework. So, if you are so inclined, I'd love to see code mock-ups of what you have in mind. As for bindings in XAML, I'm hoping that the minimalist redesigns mentioned above eliminates "XAML data-binding hell." I hope I can look forward to your feedback after some experimentation. &gt;As for the designer, for my use cases, all I need is a representation of the XAML with all styles and templates applied. The Microsoft WPF designer went well beyond what I needed, allowing all kinds of editing and property panes, etc. This caused it to be slow and buggy. I just want to see the results of a style change or a new button while I'm coding the XAML by hand. Making a full blown drag and drop designer would be way too much work, and probably would be a maintenance nightmare. Good thoughts. You'll probably like the first iteration of the designer since it will be just that -- WYSIWYG editing. &amp;#x200B; I hope you'll continue to dig around Frogui. My hunch is you could significantly impact design as this early stage. Thanks so much for the useful post.
Update() is a method that gets called by Unity game engine exactly *once every frame*. Every Update() of every instantiated GameObject gets called automatically by the game engine and you shouldn't call it yourself. Instead, you should put the code that you need to run *every frame* inside Update(). The code that you only need to run once when the GameObject is first added to the screen should be in the Start() method instead.
This is the first time I've dealt with windows services. I'm kinda leery of running the application to test it and have it start a service that is flawed and cause instability. Is that something I need to watch out for? 
I switched on and off the vm itself. Just to summarize these are the steps: 1. first I install it using the command `curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin` for which I get the following result: ``` dotnet-install: .NET Core SDK version 2.1.403 is already installed. dotnet-install: Adding to current process PATH: `/home/&lt;!username!&gt;/.dotnet`. Note: This change will be visible only when sourcing script. dotnet-install: Installation finished successfully. ``` 2. I do `. ~/.profile` as you said to reload the profile But even after this when I run `dotnet` I get the following error: ``` Command 'dotnet' not found, but can be installed with: sudo snap install dotnet-sdk ``` 
Forks aren't an end-all. Postal is my poster-child (pun possibly intended) for this phenomenon. At one time it was hyped up on the blogosphere (and rightfully so, it was a great way to attack the problem of composing emails!) But, over time, the project maintainer stopped caring. "Just fork it!" you say. But, that leads to fragmentation. Assuming this fork is put on nuget, the question becomes.... Do I download the "Postal" package? or the "jjb3rd.Postal" package? or the "qubidt.Postal" package? And what if THEY don't have the particular fix I need? What if they don't really want PRs themselves?
Hence my original point of being careful of what you wish for. Once you put it out there people expect you to continue to give up your time. I have a c# client for Freshdesk that I’ve abandoned because I didn’t feel like updating it for their new api and the new tls version wasn’t available in mono at the time so I would’ve had to drop cross platform support, etc. etc. etc. Screw that noise. I made it in a weekend and have never actually used it myself, but people gave me shit or tried to guilt me into it. Forking is exactly what this is for. Stars, number downloads and release date on nuget are how you figure out which library you need. If not, you take your weekend. You have your girlfriend complain about you ignoring her. You get shit from internet trolls :) as they say, no good deed goes unpunished.
All the "Best practices" series 
On the VM first approach, I started looking for examples of what I'm talking about and realized that I may be using the wrong term. What I'm going for is the approach that I saw first in Caliburn, but also in RxUI, where you don't deal with navigation or view binding directly. Instead, you rely on a container that will find the correct view for the given view model. This allows you to compose views and view models in a very simple way. And after typing all that I realize that there's not much you would need to do in the framework to support that. It works simply off of binding and some sort of convention to find views. [Screens, Conductors and Composition](https://caliburnmicro.com/documentation/composition) from the Caliburn.Micro documentation goes over the idea quite nicely, if you're interested to deep dive. But as I said, probably not much for you to do at the framework level to enable this kind of functionality. And as for the RxUI bindings, I get why you wouldn't want to go all in with it as a framework. It would probably box you in too much. What I was suggesting is a way to create data bindings from DependencyProperties to observable data in an easy way from C# code. Easy enough that many would prefer that method over XAML binding expressions, and maybe good enough where XAML binding expressions could be abolished entirely. [RxUI Bindings Documentation](https://reactiveui.net/docs/handbook/data-binding/) has some examples. They're binding is super useful for 98% of cases where I've used them. For the other 2%, it's a pain, but at worst you're just falling back to a method of binding that everyone else uses. The benefits here are many fold: * Cleaner XAML that is more about design and layout * Designer data can be put in line (e.g. TextBlock.Text can have data, and then code behind binding will replace that text with the binding expression at runtime) * Code behind binding is compile time safe * Allows for inline data conversions, as you're in C# code, not XAML I'm not sure what it would take to implement this at a framework level. Perhaps it would be better off as a set of helper utilities on top of the framework that could deal with the 90% case, where the framework has to deal with 100% case. For example, I'm only imagining view + view model scenarios, but that's not all that your framework would have to deal with.
Vector is CPU accelerated for primitive numerics types e.g. `int`,`uint`,`float`,`byte` etc, `Span&lt;T&gt;` is like an array, so `Vector&lt;Span&lt;float&gt;&gt;` wouldn't work. If you flip it around though it would `Span&lt;Vector&lt;float&gt;&gt;` so its an "array" of vectors
I meant something like, `new Vector&lt;float&gt;(Span&lt;float&gt;)`. Similar to `new Vector&lt;float&gt;(float[])`.
[removed]
Here is the list of C# projects sorted by popularity (stars): https://github.com/search?o=desc&amp;q=language%3Ac%23&amp;s=stars&amp;type=Repositories Here are the trending C# projects: https://github.com/trending/c%23 In case you want to do another searching on GitHub, check this article: https://help.github.com/articles/searching-for-repositories/ 
Backwards compatibility and COM versioning convention.
Can you just run it as a console app with a hidden window?
If your application is ending unexpectedly then I think you have a design flaw or bug tbh. What is the intended exit path for the application? Is it following that path or is something else happening to end the application? If there is no user input and it's not a Windows service, how do you send control messages? Are you skipping that completely, or are you using a mutex or named pipe or something? Assuming you're already making a blocking call in main to prevent an early termination as soon as the application starts, then the hacky cheater way to ensure it never exits would be to wrap your main methods contents with a while (true) and inside, a try/catch where you just log or no-op an exception if it happens, then loop over main again. But don't do that. Ideally your main method is small and simply calls your application in as few lines as possible. Then you could use a signal from a cancellation token or manual reset event provided as a property of your own class. Then after you kick off your main program code, you could wait on that token's wait handle or the cancellation token. That way your code can signal when it's finished and main can exit gracefully.
Its in .NET Core 2.1 https://github.com/dotnet/corefx/pull/26499 so like is also in .NET Standard 2.1 (as it has both Vector and Span)
I indeed mixed something up. Corrected my post.
Wait... ok, so I was unaware of ODBC on Linux! And it seems you’re confused about Access. There is no Access database engine - just mdb files. So maybe this package does work on Linux?! I e made an awful lot of mistakes on this thread if that’s the case. Will be researching this tomorrow. 
git add . git commit -m "first commit" git push
In answer to your question this is a "feature" of console applications. A windows service will keep running without Application.Run() or a loop. It sounds like you have written your code for a windows service and didn't realize it. Below is the basic framework I'v been using on services for &gt; 10 years. This is both a console app and windows service. If you run the application it will run as a console app, but with a service installer it will run just fine as a windows service. (Warning! Debugging a Windows service is like trying to argue with a career politician there is a lot of movement but you never get anywhere. Debug as a console app!) static void Main(string[] args) { if (Environment.UserInteractive) { logger.Info("Launching User Interactive!"); CoolAiProject service1 = new CoolAiProject(); service1.TestStartupAndStop(args); } else { logger.Info("Launching Windows Service!"); ServiceBase[] ServicesToRun; ServicesToRun = new ServiceBase[] { new CoolAiProject() }; ServiceBase.Run(ServicesToRun); } } public partial class CoolAiProject : ServiceBase { private Timer _timer; private string[] _args; private ElapsedEventHandler _timerElapsedEvent; public CoolAiProject() { InitializeComponent(); } protected override void OnStart(string[] args) { try { _args = args; _timerElapsedEvent = new ElapsedEventHandler(timer_Elapsed); _timer = new Timer(1000); _timer.Elapsed += _timerElapsedEvent; } catch (Exception ex) { logger.Error("Start Failed!", ex); } } protected override void OnStop() { if (_timer != null) { _timer.Stop(); _timer.Elapsed -= _timerElapsedEvent; _timer.Dispose(); } } private async void timer_Elapsed(object sender, ElapsedEventArgs e) { _timer.Enabled = false; if (_timer.Interval) { _timer.Interval = 30000; //Run every 30 Seconds } try { ///TODO Do Somothing } catch (Exception ex) { logger.Fatal("Sad days!", ex); } finally { _timer.Enabled = true; } } internal void TestStartupAndStop(string[] args) { this.OnStart(args); Console.ReadKey(); this.OnStop(); } } &amp;#x200B;
Checkout top shelf. 
I am still so confused. If they are both the same then how is one more efficient than the other?
To really simplify it, code normally gets executed once line at a time. Asynchronous means they will run at the same time. So imagine you have an array you want to call this function on each item in the array, normally the processor will handle each item one sheet the other, but with asynchronous you can make it handle them at the same time on different threads.
Normally an application only can do one thing at a time. Using the async method, you can create a new thread. Using threads, your application can execute multiple things at the same time - often utilizing multiple CPU cores so this way it can - not always, as it greatly depends on the task itself - increase the speed of the application by offloading some of the tasks to different CPU cores.
https://docs.microsoft.com/en-us/dotnet/csharp/async A method needs to have the `async` modifier to be able to use the `await` keyword. The`await` keyword is used to asynchronously wait for the completion of a `Task`, e.g. a network download. If a method doesn't call other `Task`-based asynchronous methods, it doesn't need `async` or `await`. The timer doesn't know or care about `async` at all. 
This is not true. Asynchronous does not mean "at the same time" - that would be parallel. Asynchronous APIs can be multi-threaded but do not have to be. What you are describing is threading.
async means it is executed in a separate thread. Await means you wait for this thread to report completion. This is how C# provides concurrency, or the illusion that things are being done in parallel. Note that things are only actually executed in parallel if you have the physical cores for it. In your example, it doesn't look like anything is being executed in parallel because it awaits for it as soon as it calls. But you could call two async methods without awaiting, but then call wait on both of them afterwards. That would (in the best case scenario where you have plenty of CPU cores) execute your methods just a little under twice the speed.
Because people here seem to not give you a good understand of what async is and how it is different to a background thread, here is a good read: https://blog.stephencleary.com/2013/11/there-is-no-thread.html . The only thing you need to get your head around is: There is no thread!
Asynchronous literally means not synchronous. In javascript, there is only 1 thread in each process, so code runs linearly. Using asynchronous functionality of javascript you can run chunks of your code in A-synchronous way but not parallel. This eliminates race conditioning while stuff runs virtually in parallel. What actually happens is there is a list of functions you want to execute and each of those functions can introduce a new function to this list. Only one function can be executed at a time. In C# it is more complicated. There is an entity called SynchronizationContext which determines how asynchronous functions will be executed. It is bound to your current thread. For example in WinForms and WPF SynchronizationContext makes sure that 1 operation is executed at a time. There is no race conditioning. But in your case, SynchronizationContext tells to use helper threads which are parallelized. &amp;#x200B; timer.Elapsed += async ( sender, e ) =&gt; await HandleTimer(); It says when timer is elapsed run this functions. Function says I don't know when and I don't know how but run HandleTimer(), get the result and tell me about it. For now, I am taking a break. The function literally stops its executing until the result from await is gotten. Then it continues where it left off. This is achieved by C# compiler which breaks the function into parts and binds them with delegates. For example &amp;#x200B; `f1()` &amp;#x200B; &amp;#x200B;
Now I am starting to get it. Back in my VB WinForm days I used to do a lot of information processing when loading files into a custom built editor. The example you listed above was the approach I had taken because the UI thread would freeze and the app would a) become unresponsive or b) crash. Seeing how that was when I was 16 I guess I forgot. Thank you.
Great write up! Thank you!!!!
Thank you very much!
This is the correct explanation. Stephen's blogs on async programming in C# are the best sources of understanding the basics of async/await on the internet.
This is wrong. The async / await pattern is about suspending execution so it can be resumed later, by a worker. That’s it. In c#, the worker will be from a thread pool, and selected based on the synchronisation context. You may see the same worker thread picking up the same task to resume in some cases (unity, mvc 5, etc) but I would like to emphasise here: Await/async **is not** about executing work on the same thread. &gt; nowhere does async/await say anything about threading models (Correct me if I'm wrong). You are wrong. The async/await model, specifically in c#, is defined in terms of the threadpool it runs on. You have it the wrong way around; you *can* choose to have a threadpool of one worker thread, or have terrible performance by forcing the same work to resume (which is why this is gone in asp .net core), but it is not the default. By default the threadpool will slowly allocate more threads as it gets busy until it hits hard limits. The best way to understand this is to consider every ‘await’ to be a pause in execution, which is resumed once the function completes (eg. I/O) by the first available worker. I.e. basically a producer consumer queue, where resolved jobs are placed back on the queue once I/O is done. It is even more complex due to multiple threadpools, but it’s the trivial take away. Any await may resume on an arbitrary thread, and may spawn a new thread to do so, if required. This is *extensively* documented.
Hey dude. There's a whole bunch of misinformation in here. So do yourself a favour and Google Stephen Cleary. He's literally written the book on async. 
Instead of thinking about what async/await do internally, try to think of them in a broader sense. When you say var result = DoSomething(); You're telling the computer to immediatelly enter `DoSomething`, execute everything in there and get back asap. However, when you say var result = await DoSomething(); You're telling your computer `DoSomething` will return at some point that _may not be immediatelly_. This way the computer knows it can do other things until `DoSomething` finishes instead of wait. This generally happens when `DoSomething` interacts with some external resource (hard drive, pen drive, internet, local network etc). If you make an http request, your computer could keep doing other things -- as long as these other things don't depend on the http response, of course. By using async/await you hints your computer about these situations. So yeah, there are threads, pools, semaphores and whatnot, but these are implementation details, which are important to know but may be confusing at first. So just keep in mind that `await` means that something will return at some point in the future, and async means something depends on something that will return at some point in the future.
I think you need to get or create an instance of the GlobalVars class inside of your forms.
&gt; Mind you, it's still not just CPU-bound tasks that may execute in separate threads. Speaking from experience, this is very noticeable when working with ASP.NET, where you'll find that HttpContext (which usually holds things like session information) is only available on the thread context that started handling the request (by the default configuration). Do some database calls, and you might suddenly find that HttpContext is null. It sounds like there's more going on in your code as that shouldn't be happening unless the Task is configured to not return to the same context that you called it on (i.e. calling `ConfigureAwait(false)` on it).
The class GlobalVars must be static too. &amp;#x200B; `static class GlovalVars { ... }`
Yes, as I said, by *default configuration* it may be `null`. It can be solved by either calling ConfigureAwait, or by some option that goes into web.config that I can't recall off the top of my head. It was just an example to show that not only CPU-bound tasks may be selected to run on background threads.
https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/yield
You can run tasks without tying up the rest of your application. Await means that you're waiting for a task to finish before continuing on.
Good video explaining it. https://youtu.be/2moh18sh5p4
Not true - you don't need an instance of a class to use its static members.
No, classes can have static members even if the class itself is not static.
Hardly better but hey, who doesn't like some LINQ. MyContainer[] Generate(int size, float multiplier, float startAmp, float startFreq) =&gt; Enumerable.Range(1, size) .Select(x =&gt; new MyContainer { amplitude = x == 1 ? startAmp : startAmp /= multiplier, frequency = x == 1 ? startFreq : startFreq *= multiplier }).ToArray();
maybe scope related dependingo n where you want to set the value inside your code
I don't think that quite works, because the multiplier compounds. You want something like Enumerable.Range(0, size) .Select(x =&gt; new MyContainer { amplitude = startAmp / Math.Pow(multiplier, x), frequency = startFreq * Math.Pow(multiplier, x), }) .ToArray(); Which also suggests a slightly cleaner iterative solution (since it doesn't have to keep track of so much mutable state): var array = new MyContainer[size]; for (var i = 0; i &lt; array.Length; i++) { var x = Math.Pow(multiplier, i); array[i] = new MyContainer { amplitude = startAmp / x, freq = startFreq * x, }; } return array; You could also implement it with a tail-recursive coroutine, but it really doesn't do anything magical: MyContainer[] Coroutine(MyContainer[] x, int i, float mult, float amp, float freq) { if (i &gt;= x.Length) { return x; } x[i] = new MyContainer { amplitude = amp / mult, frequency = freq * mult, }; return Coroutine(x, i + 1, mult * mult, amp, freq); } return Coroutine(new MyContainer[size], 0, multiplier, startAmp, startFreq);
No. `string output;` as a member means it's initialized with the default value of `string`, which is `null`. As a local variable it won't be accessible unless initalized first. `string output = "";` initializes the field / local variable with an empty string. `null != ""`
A LINQ solution that doesn't carry along mutable variables: Enumerable.Range(0, size) .Select(x =&gt; new MyContainer { amplitude = startAmp / Math.Pow(multiplier, x), frequency = startFreq * Math.Pow(multiplier, x), }) .ToArray(); Which also suggests an iterative solution without the mutation: var array = new MyContainer[size]; for (var i = 0; i &lt; array.Length; i++) { var x = Math.Pow(multiplier, i); array[i] = new MyContainer { amplitude = startAmp / x, frequency = startFreq * x, }; } return array; You could also implement it with a tail-recursive coroutine, but it really doesn't do anything magical: MyContainer[] Coroutine(MyContainer[] x, int i, float mult, float amp, float freq) { if (i &gt;= x.Length) { return x; } x[i] = new MyContainer { amplitude = amp / mult, frequency = freq * mult, }; return Coroutine(x, i + 1, mult * mult, amp, freq); } return Coroutine(new MyContainer[size], 0, multiplier, startAmp, startFreq); Whether any of those is *better* depends a *lot* on whether you find them any more readable. My guess is that they all perform worse than what you have, though.
Nothing about your initialization, but don't use `public` fields, use [auto-properties](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties) instead. Your `MyContainer` class could be a struct, but it might depend on your [use-case](https://stackoverflow.com/questions/521298/when-to-use-struct). Also if you don't explicitly need an array in my opinion it's a better idea to return `IEnumerable` (or `IReadOnlyList`, `IList`).
A simple example goes a long way. Imagine this code is inside of a method marked as "async": https://stackoverflow.com/a/44204614/20471
It is actually the opposite. By default ConfigureAwait is set to true and the task will try to continue using the same synchronization context(i.e same thread). So your HttpContext can't be null unless you use configureawait(false) or manage to run on a different thread(task.run, new thread, etc).
Did you check to see if the dotnet directory is in your path now? `echo $PATH` then make sure the new dotnet path is in there.
Other people are explaining it very well, I want to offer an opinion that is likely going to get me downvoted but I put the weight of my 15 years of C# behind this opinion. Consider avoiding async/await, at least until you're very comfortable with asynchronous programming. .NET had 2 other asynchronous patterns before it. People wrote basically all there was to write about them, because while they had some boilerplate attached it was easy to understand what was right and wrong. On the other hand, for every 100 words written about how to use async/await, there are 1,000 words about how to avoid deadlocks, or unobserved exceptions, or making performance worse, or a seemingly infinite series of problems that can be caused if you don't run through a checklist of considerations every time you use `await` or return a task. Surprisingly, this seems to be common to the idea of async/await in general. JavaScript has recently adopted it and I see precisely the same kinds of articles about async/await pitfalls in that language too. I think some of this is because the TAP is much more nuts and bolts than I'm used to seeing MS put out as an API. From 2003-2010 I feel like they only pushed a pattern once they knew which helper classes everyone would need. The TAP feels like it requires me to wrap it with a helper library to be effective. This makes it feel more unfinished and experimental, but also means you have a lot of power. But when you have "more power" over "ease of use" it's easier to find the API is a Pit of Failure, rather than Pit of Success. And I feel strongly that some of the most obvious ways to use the TAP are what people write you should never do. For example: returning `Task` is very dangerous. So dangerous many libraries define a void-like type so they can always return `Task&lt;T&gt;`. You should read enough blog articles about it to find out why, because the documentation sure doesn't go into it. I do think you should take some time to use it. When I started my career in 2003, it was more common to just let a 2-3 second operation hang the UI thread. But for complicated reasons today's code should be doing almost everything asynchronously. When you use async/await ONLY at the top level of code, a lot of the more subtle pitfalls can't happen. The hydra rears its head when you have an async method that awaits other async methods that await other async methods: don't write that kind of code and you can't get in some of the worst cases. Problem: many APIs you will have to call already publish async methods. So my advice, since you're going to use it anyway, is to find out what `.ConfigureAwait()` is and why you'd use it. Read about "unobserved exceptions" and why you should be very nervous if you ever declare a function `async void` or return `Task`. (This is so dangerous I've seen many APIs define a "void"-like type so they can use `Task&lt;ThatType&gt;` instead.) And when you are writing code, think about what "layer" you are in. I find this set of heuristics is useful when I do decide to use the Task Asynchronous Pattern: * At the lowest layers, where my most unit testable code exists, I prefer to write only synchronous methods. * Ideally, the only Task-returning methods I write expect to be called directly by UI thread callers (ViewModels/Views). * Ideally, the only place I use `await`is within UI thread callers. (ViewModels/Views.) * If I think a method will need to be called from both asynchronous and synchronous contexts, or I'm not sure, I make it synchronous. * If a method does I/O, particularly network I/O, I make it return a `Task&lt;T&gt;`. * If a method returns `Task&lt;T&gt;`, I make sure I use or check the thing it returns. Often the `T` is just some type that tells me if an error occurred. Deadlocks happen when two different things are waiting for each other to return to the UI thread. That's easiest to detect if "things that must be on the UI thread" are the only things using `await`. If you understand how to properly use `ConfigureAwait()` you can safely use async/await in more places, but personally I despise code that has to think about its context to know what is safe. Unobserved exceptions happen when you have "fire-and-forget" methods. It's worth pretending they return something to avoid this. Don't just blindly follow those. Learn why they're true. Or consider using the Event-Based Asynchronous Pattern and it will be clear when you do something stupid, because it doesn't ask you to memorize how the compiler uses code generation to understand its mechanisms.
Thank you for this.
Think of it this way -- running code that you have no prior knowledge of is like running a "plugin". In this case, the generated code is the plugin. Whether or not you generate the code and use it during runtime *or* you want to use a "3rd party" plugin, the following remains the same: * You need to establish a common "language" (more specifically, interface) between your app and the plugins. An "interface" here does not mean an abstract interface like `IDisposable` or whatever -- it means that your app and the plugin must *interface* with each other through some standard. This standard is what I mean by interface. For example, emails use the MIME standard so that way all apps expecting to be able to manage emails understand the message format. In our case, we just need to develop a common API assembly that plugins are expected to reference so our app and the plugin can communicate. * Your app and all plugins for your app *must* reference the common API assembly. * Your app must have a way to dynamically load assemblies during runtime. Create three projects: * MainApp (.NET Framework console app) * MainApp.Api (.NET Framework class library) * Plugin (.NET Framework class library) Have both MainApp and Plugin reference the MainApp.Api assembly. In the MainApp.Api assembly, implement the following: public interface AppContext { void WriteLine(string text); string GetString(); } public interface IPlugin { void Run(IAppContext context); } That's it for the API assembly. In your Plugin project, add an assembly reference to `System.ComponentModel.Composition`. This assembly is where the [Managed Extensibility Framework (MEF)](https://docs.microsoft.com/en-us/dotnet/framework/mef/) resides and provides us with a plugin framework. Also add a project reference to MainApp.Api. Now, implement the following class: //other usings omitted using MainApp.Api; using System.ComponentModel.Composition; [Export(typeof(IPlugin)] public class MyPlugin : IPlugin { public void Run(IAppContext context) { context.WriteLine("Hello from the plugin!"); var result = context.GetString(); context.WriteLine($"Received '{result}' from app."); } } That's it for the Plugin project. For the main app, add a project reference to the API project and an assembly reference to MEF like you did for the plugin. Now, implement the following: //other usings omitted using MainApp.Api; using System.ComponentModel.Composition; public class Program : IAppContext { public static void Main(string[] args) { string pluginDirectory = @"C:\path\to\directory\containing\plugin\assembly"; //replace this with the appropriate path var program = new Program(); //now begin with MEF var catalog = new AggregateCatalog(); catalog.Catalogs.Add(new DirectoryCatalog(pluginDirectory)); var container = new CompositionContainer(catalog); IEnumerable&lt;Lazy&lt;IPlugin&gt;&gt; exports = container.GetExports&lt;IPlugin&gt;(); //run all plugins imported from specified directory foreach (var export in exports) { export.Value.Run(program); } Console.ReadKey(true); } public void WriteLine(string text) { Console.WriteLine(text); } public string GetString() { return "Foobar"; } } That's it. Build the whole solution and put the compiled plugin DLL in the "plugin directory" that you specify in the main app. Run the main app and voila. However, you are generating the plugin during runtime. You'll have to get the `Assembly` object that describes the generated assembly. You'll use an `AssemblyCatalog` instead of a `DirectoryCatalog`. Also, your code generation will need to reference the MainApp.Api DLL **and** your generated code will need to implement the `IPlugin` interface. Once you do all of that, you'll be golden. 
Very nice overview, thanks :)
I definitely need to look more into yield, yes. It feels like it could provide an elegant solution but since I'm not experienced in using it, I cannot tell yet. If someone can provide a hint at which point in my code I should use *yield* I'll be grateful. I'll post a solution on my own using yield as soon as I have figured it out.
It's going to be hard to help you without seeing your code. You're likely making a silly mistake somewhere. :)
The reason to go for an array in this case was that this generator provides data for an API call which expects an array as input. I previously had this code handle a List, as I find Lists more convenient to deal with, and the return line was *return list.ToArray();*. You're right, I probably should use a struct. Thanks! In the OP, I omitted the outer class in the attempt to break the code down to it's essentials. Which means, there are no public fields, just a nested class and a method. But I take the opportunity anyways to talk about public fields / auto-properties: Why is the latter preferrable? If possible, I declare my fields as private (encapsulation). I usually only use properties if I want to perform some checks or behaviour on get/set. Is there something to learn or improve for me? 
Can I send it to you? And how?
First item behaves different from other items in the loop, so you need to use special condition for this item or unroll the loop (as you did). Maybe something like following code looks better to you? var array = new MyContainer[size]; // initialize element 0 var current = new MyContainer(startAmp, startFreq); array[0] = current; // initialize all other elements for (int i = 1; i &lt; size; i++) { // create new element from previous current = new MyContainer(current.amplitude/multiplier, current.frequency * multiplier); // initialize elements for i &gt; 0 array[i] = current; } return array; But to be completely honest your code doesn't even look like "modern" csharp ... public fields, arrays, no ctor and Generate smells too much like static =) 
ELI5...Your in a long line at a fast food joint, waiting to order. If it's synchronous, they take your order, and you stand there until it's ready. Then they take the next order. If it's asynchronous, they take your order, give you a number, and tell you they'll call you when it's ready. And they take the next order. 
I recently made a blog post demonstarting how async/await works: https://seesharpdotnet.wordpress.com/2018/10/17/a-really-simple-c-async-example/ I also include a complete working example in my public repo here: https://github.com/mfcallahan/adhoc/tree/master/AsyncDemo Always remember that the “async” keyword simply enables the use of the “await” keyword inside a method. 
Pastebin and link here
ok I will
Thanks
The await would be a customer so important that you stop taking new orders until that person is served. 
 MyContainer[] Generate(int size, float multiplier, float startAmp, float startFreq) { var amp = startAmp; var freq = startFreq; for (int i = 0; i &lt; size; i++) { // initialize elements array[i] = new MyContainer { amplitude = amp, frequency = freq }; // each value depends on the previous value amp = amp / multiplier; freq = freq * multiplier; } }
\- You create a class library project. \- You add a class that does the user verification. \- In your console app, you add a reference to the newly created class library. And call it from you main, like in your example above. &amp;#x200B; Not sure what you mean with model in this context. How is it different than a class?
So clean, so simple. It's one of those instances when you appreciate being shown you're the idiot. Thank you! You basically just needed to swap two blocks of code, rendering other parts unecessary. I guess this is what I was looking for, though I'll follow the other solutions for the purpose of learning.
Oh my god, I love it!
VBA will be the death of me
Eh, technically the cashier is doing the "await" on all the orders before doing a "shout order # is ready". This ties in nicely to synchronization since the cashier can still only do one thing at a time, so if they're still busy taking a new order they may not be able to make the callout till that the other order is done, and they can only call out one order at a time once they're finished.
That's though. Shit happens indeed. 
I don't actually use the Timer classes, and I'm not sure which one this is. To answer your question simply: There are two types of long-running task for the CPU. In one case, the work is taking a long time because the CPU usage is high, meaning the CPU cannot keep up. So when you are doing work, the thread blocks because of high CPU usage. If you do this on the main thread, your UI will become unresponsive. The other scenario is that the work is taking a long time because the CPU is waiting for something, commonly the network or the disk. Say you make a synchronous network request on the main thread and the server is slow to respond. During this time, the UI is blocked, but the CPU usage is zero. So, we have two scenarios: * Thread blocked because CPU usage high * Thread blocked but CPU usage is low In the first case, the solution is multi-threading - we have to move this work to a different thread to prevent blocking the UI. Asynchronous APIs can help to synchronize your threads whilst keeping your code clean, but they are not specifically about threading. In the second case, there's no need to move the work to another thread, because the CPU usage is so low. In this case, we want the UI to remain responsive, but we don't want the particular method we called to continue until the result of the web request comes back. For this, we can use asynchronous APIs to await that result. Whilst awaiting, our main thread will not continue through the method called until the web request completes, however, the thread is free to process other work whilst waiting, such as UI events.
Did you try giving them default values.
No. string output; will be null. string output = ""; is an empty string. If you try to use the first option your application will crash and tell you null reference exception, unless you have a way of handling the error. You would have to set the value at some other point before using it. With the second it has an actual value defined and will not crash the application if it's being used.
Btw sorry some poor bastard had to downvote you for a simple question. Feel free to ask anything on this sub. A lot of people will be willing to help you out.
Not a good project for a beginner. You're dealing with a lot of interops and even in my professional experience that's a pain in the ass and we have a 3rd party library to handle Excel. 
Create a service that monitors other services. If it sees anything that looks like a game process kill it like you said. Just don't tell your brother any of what you did. Don't name it something obvious. Make sure you hide the exe behind the service deep in the file system somewhere. 
I know, but he is talking about a console application. And a "Model" is still just a class. His question of " Or can I only work with models?", sound like some kind of confusion on his end. So I wanted to hear from him what he thinks a Model is and why he thinks he can only use those...
Do you mind expanding a bit? I get the point about Backwards compatibility, but that also means that for new versions of VS I need to re-write code to use the latest interfaces. &amp;#x200B; As far as COM versioning, I'd really like to understand why separate assemblies help. If you could explain or point me in the right direction I'd appreciate it
Is what I'm attempting more of an intermediate level program? Or is it pretty straight forward and basic?
One thing to consider is that even if your function could benefit directly from ValueTask, the functions that call it might be regular async Task. Doesn't this mean that in such cases the ValueTask would need to be converted to Task eventually anyway?
&gt; returning Task is very dangerous. So dangerous many libraries define a void-like type so they can always return Task&lt;T&gt;. What danger are you referring to, specifically?
Yea a model and a class are the same thing. He might have saw some video talking about it that was more advanced.
It's not too difficult. You just need to understand how to build a service, install it, then how to start and stop a service once you check the service/process name.
Not necessarily &gt; It doesn’t, however, imply anything about whether that object can be reused once an operation completes. If the object can be reused, then an API can maintain a cache of one or more such objects, and reuse them for serialized operations, meaning it can’t use the same object for multiple in-flight async operations, but it can reuse an object for non-concurrent accesses. &gt; &gt; In .NET Core 2.1, ValueTask&lt;TResult&gt; was augmented to support such pooling and reuse. Rather than just being able to wrap a TResult or a Task&lt;TResult&gt;, a new interface was introduced, IValueTaskSource&lt;TResult&gt;, and ValueTask&lt;TResult&gt; was augmented to be able to wrap that as well. IValueTaskSource&lt;TResult&gt; provides the core support necessary to represent an asynchronous operation to ValueTask&lt;TResult&gt; in a similar manner to how Task&lt;TResult&gt; does
Oh yeah, somehow I mixed up regular variables and static ones...
It is not *as* dangerous as it used to be, but it's still bad and it's been carried over into JS Promises as well. Do a Google search for "async void" and you'll get dozens of exciting blog posts. Here's my version of them. The danger happens when the asynchronous code throws an exception and you don't handle it. In general, in any asynchronous programming pattern, you want to be very careful about throwing exceptions on worker threads. Generally an unhandled exception means the thread terminates. That means it didn't really run to completion, and any side-effects you were expecting might only be partially done. You don't tend to get in this situation with `Task&lt;T&gt;` because you were expecting a result, and now you're not going to get it. So like, suppose you weren't using `await`, a good developer would more or less something.DoWorkAsync().ContinueWith(parentTask =&gt; { if (parentTask.Exception != null) { // Do something about the exception } else { txtSomething.Text = parentTask.Result; } }, TaskScheduler.blahblahblah); With `await`, the smart thing to do is: try { txtSomething.Text = await parentTask.Result; } catch (AggregateException ex) { // deal with the exception } This isn't just "good practice", things get really messy if you don't. But it's easy to understand "wrap await calls in an exception handler" and deal with it, or "if I have a completed task I should check its Exception property first". This was fundamental in all of the other async patterns, too. Now let's talk about `async void`. You do this because you have some thing that is going to do something async and finish. But it doesn't return a value, so unless you are a seasoned veteran of the TAP, you may not be thinking about, "What if it throws an exception?" Worse, what happens isn't obvious. If you aren't using `await`, you actually write the same code and it works. Since you get the Task object as a parameter to the continuation, you are a good developer and check the `Exception` property. If you try to use `await` though, apparently this puts gum in the gears. It turns out due to how the compiler auto-generates the `await` code, you cannot catch exceptions thrown by awaiting `async void`/`Task`! You'd think this would be considered a major flaw in the TAP, but it was a necessary evil "so event handlers could be asynchronous". I don't fully get it but [it's discussed often](https://msdn.microsoft.com/en-us/magazine/jj991977.aspx). In early-ish versions of the .NET Framework, what'd happen here is when the GC collected the Task, your application would crash citing an `UnobservedTaskException`. If you were smart enough to have a handler for `AppDomain.UnhandledException`, you'd know that, but in general that meant your app was dead anyway. More recently it is not an app crash, and you can see it in the default output when debugging. (Ignore the bits in the article about "you can't compose `Task` with methods like `Task.WhenAny()`, it predates .NET 4.5 which added those methods.) ## So in summary The problem with `async void` is the way it propagates exceptions with `await` is completely different from how `Task&lt;T&gt;` works, and you can't actually catch the exceptions. This was done because the only valid use case for `async void` is intended to be .NET event handlers, and this exception behavior is apparently good for their use case. You aren't really supposed to use it yourself. This means if you actually have some sensible "there is no result, just tell me when it finishes" use case, you usually tend to lie and use a `Task&lt;T&gt;` instead. The pseudo-void I'm having trouble coming up with a completely believable situation. Part of this is because I'm so used to avoiding `async void` I naturally want to know a return value. And in the rare cases where I honestly decide I don't care about the results, I design the async work to be self-contained and handle/log its own exceptions. Messy? Sure. It's so rare that happens I really can't remember the last time I did it. It turns out `Task&lt;T&gt;` is just more useful than `Task`. 
Aye! That's exactly what I tried looking up. :)
I did! That was the issue.
It was a timing problem tbh. Form 2 was starting faster. 
Most games have a "game loop" that works like this: bool done = false; while(!done) { // do some stuff, maybe change done to true if you need to escape the loop } That seems to fit what you want to do rather well, actually.
 foreach (var proxy in File.ReadAllLines(Directory.GetCurrentDirectory() + "/proxies.txt")) ; That's a bad and naughty semicolon
[https://blog.stephencleary.com/2013/11/there-is-no-thread.html](https://blog.stephencleary.com/2013/11/there-is-no-thread.html)
Indeed. I highly recommend [u/CARVER-D12](https://www.reddit.com/user/CARVER-D12) _ignore_ everything posted here and read through Stephen Cleary's blog on the subject. [https://blog.stephencleary.com/2012/02/async-and-await.html](https://blog.stephencleary.com/2012/02/async-and-await.html) &amp;#x200B; Async/await is largely misunderstood, even by intelligent and capable developers. It is easy to use and challenging to understand; as such, it is best to learn about the subject from the horse's mouth, so to speak.
F.lux support both of these features. &amp;#x200B; [https://justgetflux.com/faq.html](https://justgetflux.com/faq.html) * **Where is "Safe Mode" in f.lux v4?** We built it in! The new build has massively less impact on games and the overall system. If you are a gamer and want less impact while playing games, you can also try Options -&gt; Very Fast transitions. * **How do I dim my desktop monitor?** In Windows f.lux, use the hotkeys Alt-PgDn and Alt-PgUp. (But if you're on a laptop, you should mostly dim your backlight to keep contrast.)
You should look into the System.ServiceProcess.ServiceController. You might have to reference it but it's well worth it if you're looking to control the services running.
Yes, but it would likely still avoid allocations. E.g. consider: async Task&lt;SomeType&gt; Foo() =&gt; await Bar(); Here, if you switch `Bar`to `ValueTask&lt;SomeType&gt;`, then it's true that `Foo` will still allocate. But you do avoid the `Task` allocation from `Bar`, so it's still an improvement. On the other hand: Task&lt;SomeType&gt; Foo() =&gt; Bar(); Here, if you switch `Bar` to `ValueTask`, `Foo` now has to convert it to `Task` (by calling `.AsTask()`), so you do not avoid any allocations in that case.
It's Called a [Property](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties). In your case you have what's referred to as an auto property. In a nutshell it's what's called syntax sugar. Take the following code. public class Foo { private int _bar; public int getBar() { return _bar; } public void setBar(int bar){ _bar = bar; } } Now that's a lot of 'boiler plate' code, C# gives us a neat way to remove all that: public class Foo { public int Bar {get; set;} } It's basically the same under the hood, just a lot easier to read and write. In your example it would actually be far better to have the following: public class Test{ public int X { get; } public Class Test(int temp) { Int X = temp; } } As your setting the value in the constructor, there's no reason to have a "set;" in fact it's considered best practice as it stops the class from being changed (read into immutability when your a bit more comfortable with the basics)
In your example, X is a property. Properties are exposed to the world outside of your class. Fields are generally a private/non exposed member of the class, and accessed via get/set properties. A field `private int _field` wouldn't be accessible from outside of that given class. There's a standard pattern with properties to read/write to that field from outside the class public int Property { get { return _field;} set { _field = value;} } C# has a shortcut for this encapsulation pattern where you declare `public int Property {get; set;}`, and essentially have both the field and the exposed properties without writing that code. There are plenty of cases where you want to write that code explicitly, (say you want to fire an event with a value changes, or perform validation) but that's probably beyond the scope of your question. 
I don't think your last example is correct unless you remove Int in the constructor body.
Ahh yes, fixed. (for everyone else, i had written "int X = temp;" A perfect case for both testing and having a good IDE to protect against stupid mistakes as that would have compiled.
right. Currently in my program I have the following code followed by gathering more info from the user. I want to re prompt the user if that Student ID is greater than 9999999 or less than 1000000. Currently my program simply displays my error message and then moves on to setting the next value for students last name (code for that not included) TIA. &amp;#x200B; bigArray\[i\].setStudentID(Convert.ToInt64(inp)); Console.Write("Please enter the student's student's major : "); inp = Console.ReadLine();
Your if statement should be followed by and open and a closing curly brace. Try this: &amp;#x200B; public static void setStudentID(long i) { if (i &gt;= 1000000 &amp;&amp; i &lt;= 9999999) { studentID = i; } else { Console.WriteLine("Student ID must be between 1000000 and 9999999"); } }
Thanks. I'm still not getting re prompted. Do I need a while loop? 
Yes, you will need a while loop (or any kind of loop) to iterate over the different user inputs. Here is a code snippet to get you going fast (this is just a basic example, you should refaactor it later): &amp;#x200B; static void Main(string\[\] args) { while (true) { Console.Write($"Enter student ID: "); if (long.TryParse(Console.ReadLine(), out long id)) { setStudentID(id); } else { break; } } } &amp;#x200B; public static void setStudentID(long i) { if (i &gt;= 1000000 &amp;&amp; i &lt;= 9999999) { studentID = i; Console.WriteLine($"StudentId has been set to {i}"); } else { Console.WriteLine("Student ID must be between 1000000 and 9999999"); } }
Ok, thank you very much. How would I be able to find out if a vector exists or not?
 public void setStudentID(long i){ if(i &gt;= 1000000 &amp;&amp; i &lt;= 9999999) { studentID = i; }else{ Console.WriteLine("Student ID must be between 1000000 and 9999999"); studentID = i; } } You're not enclosing your blocks with brakets... { my code block} This is why you should always use {} even when they are not required: it reduces error.
This is the part I struggle with the most. Conceptualizing what the await actually does. I generally stay away from async because I don't know when I'm writing blocking code anyway.
you need a while loop. &amp;#x200B; set your value before you enter the loop ie: i = 1000000 and loop until it reaches your max. &amp;#x200B; do not for get to iterate + 1 (i++) BEFORE you reach end of } otherwise you infinite loop.
There are a lot of things wrong with this, but returning a bool from a void method is the cherry. Please refactor this.
Sorry. Done.
I have been testing my toad in a non windows service application. What are the benefits to running it as a windows service as opposed to just an installed application? I'm also having difficulty killing multiple processes without having to write multiple if statements. Is there a way that I can kill all of the process is that I want to kill in one if statement?
The service can simply be granted elevated rights and so it won't rely on your user granting it access every time it starts up. If it's not a service then they can just kill it. You can also set up a Task Scheduler to respawn the service if it detects that the service somehow goes down. The service can also be started automatically with Windows when it boots up. If you want to limit your if statements then you should consider using LINQ. **Using LINQ**: List&lt;string&gt; listOfGames = new List&lt;string&gt;() { "game1.exe", "game2.exe", "launcher.exe" }; Process[] processCollection = Process.GetProcesses(); var processesToKill = processCollection.Where( process =&gt; listOfGames.Contains(process.ProcessName) ); foreach (Process p in processesToKill) { Console.WriteLine(p.ProcessName); p.Kill(); } **Without LINQ**: List&lt;string&gt; listOfGames = new List&lt;string&gt;() { "game1.exe", "game2.exe", "launcher.exe" }; Process[] processCollection = Process.GetProcesses(); foreach (Process proc in processCollection) { if (listOfGames.Contains(proc.ProcessName)) { p.Kill(); } }
Graphical apps are not generally the easiest way to learn to program (I'm assuming you're a beginner). If you want to learn about the basics of csharp, including things like access modifiers, flow control (if-else, loops, etc), variables, and more, start simple. There's a reason Hello World is the classic first program. What do you understand so far? What's the most complex thing that you've gotten to work (where you understand all the parts)?
Here you go, an explanation of why getters and setters are better than direct access to property. https://stackoverflow.com/questions/11071407/advantage-of-set-and-get-methods-vs-public-variable
This is probably a really dumb question, but if MemoryStream.ReadAsync completes synchronously, why would we use it and use just Read() instead?
The “null” equivalent of a struct is *roughly* `default(StructType)`, for example `default(DateTime)`
It's quite complicated. I understand programming 100%. I understand how it works and like i said before, can learn the syntax very easily, anything math related i can learn really quickly. I even plan things out in my head, I will have moments of blank thought and then I just start going off with ideas and what i need to do for it to work. My main issue is remembering and knowing when i will need either public or private etc. I learned CSS basically from reverse engineering some styles off codepen. I would get like an animated dropdown menu, and tweak numbers here and there, maybe add a style property, and see what it changed. I may not know everything CSS though but what i dont know, i understand. &amp;#x200B; So overall: What I know in C#, general syntax and some common keyword names and such.
When you are using it as `Stream` and don't know its a `MemoryStream`
That helped clarify some things, and strangely out of all the results i got for c# tutorial, this one did not come up, thanks.
The default for Vector3 is probably 0,0,0. So if thats not a valid value the maze needs, then it can be used as null.
Thanks for the response. Yes I stated that wrong. I need to compare to see if ID, Last Names, and first names are the same. I also need to limit ID's to be within the range stated and if not to re-prompt the user for the correct formatted ID. &amp;#x200B; As far as the efficiency goes, I am always open to suggestion and critique. My prof doesn't really teach as much as he just rushes through code with minimal explanation and expects us to learn outside of class. Personally I haven't learned much being in class and have been trying to teach myself the best I can.
This is what is required. pastebin.com/PnHifmg7 Make sure the XunitTestCaseDiscoverer attribute on the custom fact attribute has the correct type name, and assembly name, or it won’t work. 
It's easier to create a custom class student and generate an object from it for each student in an array (I used a list). You can implement IEquatable&lt;Student&gt; and then implement the Equals functionality based on what you want. public class Student { public string FirstName { get; set; } public string LastName { get; set; } public int StudentId { get; set; } public string Major { get; set; } } public class StudentManager { public List&lt;Student&gt; Students { get; set; } = new List&lt;Student&gt;(); public void Main() { // get number of students from input var studentCount = 3; // parse number of students here for (var i = 0; i &lt; studentCount; i++) { var studentName = "SomeFirstName"; // get user input var studentLastName = "SomeLastName"; // get user input var studentMajor = "Primate gender studies"; // get user input var studentId = 10000; // call your code to generate the id here GenerateStudentArray(studentName, studentLastName, studentId, studentMajor); } } public void GenerateStudentArray(string firstName, string lastName, int id, string major) { Students.Add(new Student { FirstName = firstName, LastName = lastName, StudentId = id, Major = major }); } } I'd post more but I do enough coding at work. Also, use Pascal case for function names.
There is a lot to unpack here. Lets start with the student class: public class Student { private string firstName; private string lastName; private long studentID; private string major; public string getFirstName() { return (firstName); } public void setFirstName(string f) { firstName = f; } public string getLastName() { return (lastName); } public void setLastName(string x) { lastName = x; } public long getStudentID() { return (studentID); } public void Main() { bool badNumber = true; while (badNumber ){ Console.WriteLine("Enter student ID:"); badNumber = setStudentID(long.Parse (Console.ReadLine())); } } public bool setStudentID(long i) { if (i &gt;= 1000000 &amp;&amp; i &lt;= 9999999) { studentID = i; return false; } else { Console.WriteLine("Student ID must be between 1000000 and 9999999"); return true; } } public string getMajor() { return (major); } public void setMajor(string m) { major = m; } } 1. I recommend you only use private variables if you can make a good case that they should not be accessible by any future child classes. Private fields can be important for data encapsulation, but overuse/abuse of private fields violates the [open/closed principle](https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle) because it is closed for extension. This can be pretty controversial and I expect someone will disagree with me. Do some research and make up your own mind. 2. You can use the C# get/set helpers to eliminate a lot of this code 3. The Main function does not belong in the Student class. It is poorly named and It binds the Student class to the the UI. What if you wanted to reuse this class in a project with a GUI? Try to distill the elements of what you are doing into more focused functions 4. I try to make [objects immutable](https://hackernoon.com/5-benefits-of-immutable-objects-worth-considering-for-your-next-project-f98e7e85b6ac) unless I have a good reason not to. This means setting properties via the constructor and preventing public access to the setter methods 5. [C# coding conventions](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions) state that member variables should be capitalised 6. Don't use [magic numbers](https://en.wikipedia.org/wiki/Magic_number_(programming)). You can use static members to indicate what static values are and make your code more readable. It also gives you a single point of maintenance for the values. Putting all of this together gives you: public class Student { public string FirstName { get; protected set; } public string LastName { get; protected set; } public long StudentId { get; protected set; } public string Major { get; protected set; } protected static int StudentIdMin = 1000000; protected static int StudentIdMax = 9999999; public Student(int ID, string fn, string ln, string m) { if(!IsValidStudentId(int id)) { throw new ArgumentOutOfRangeException("ID", $"StudentId must be between {StudentIdMin} and {StudentIdMax}.") } StudentId = ID; FirstName = fn; LastName = ln; Major = m; } public bool IsValidStudentId(int id) { if (i &gt;= StudentIdMin &amp;&amp; i &lt;= StudentIdMax) { return false; } else { return true; } } } Then add the other methods from the spec such that: 1. **equals(otherObject)** compare the values of the object parameter with the local values. if they are equal return true, otherwise false. Given you have also been asked to implement an equalsID function, I assume this function should compare all fields and return true if and only if they are all equal. 2. **equalsName(string, string)** I assume the params here are FirstName and LastName and you need to check if they are the same as the local Firstname and LastName 3. **equalsID(long)** compare the int param with the local Student ID 4. **toString()** render the object to a string. This should probably return the string you want to display in the console (but don't actually render it to the console in the to string function) 5. CompareTo() - See [here](https://docs.microsoft.com/en-us/dotnet/api/system.icomparable.compareto?view=netframework-4.7.2) for what a CompareTo function should do. Basically it is used to decide where items go when sorting them into a list. You need to decide (or get from the requirements) how a set of students would be ordered ie are they ordered by last name or student ID etc
I will give this a try :) I think I'm starting to get a little better how this works when I look at your example side-by-side with the RetryFact example
One more thing set is useful for is if you want to change the value before saving it. The example I've seen just multiplied an integer by 10 in the set and divided by 5 in the get (and no, I'm still not sure why). Maybe you could always format something the same way in the set part? I'm still new to this so if someone with more xp wants to go more in depth be my guest
To be honest, it looks like there is enough different to make it worth not changing. Readability, to me, is very important when refactoring and I believe you'll just be introducing quite a bit of complexity. You could refactor the first part to be `CreateTemporaryDirectory( [SystemFileInfo](https://docs.microsoft.com/en-us/dotnet/api/system.io.filesysteminfo) , true/false) where you'll pass it the FileInfo or DirectoryInfo and it'll create the appropriate directory for you, returning your tempString. In this, you'll use .FullName and .Extension to set the appropriate fields for GetName. Basically, look at what you can take from FileSystemInfo to deal with overlap. It won't help with the while loop which is fine imo. 
simple, hot, and open source, that's how I like it.
Perhaps you could use a better paste page? The viewport of the code is very limited, and all the code having a pinkish background makes it unreadable.
I thank you for your answer. I think my misunderstanding is with Context vs. thread. I have read Cleary's stuff but I guess not enough and it was a while ago. Uhh, so my understanding was that the Context in many facets of async/await would be continued by the same thread **generally** (By default ConfigureAwait = true) and that async/await was originally conceived to help with async processing that does not affect the GUI thread (Maybe hearsay). Obviously in web applications this is not true, though and in Asp.Net Core there is no SynchronizationContext. I guess when you think of a GUI 'thread' now or of thread context it's actually a managed thread pool that executes through an asynchronous message pump which decides what gets executed by which thread and in what priority. I was actually trying to make that point that /u/RedditWithBoners made with his link below. You shouldn't think of async/await as multi-threaded, and you should never think of async/await as spawning a 'new' thread when used. My actual answer seems to be incorrect, though, and appreciate you making me go read more. I'm probably still misunderstanding lots of it. I'll admit I just recently starting working in Javascript with async/await, so the single threaded thing is stuck in my brain. 
Thanks, as I replied below to /u/shadowmint I was wrong in my answer. You can read that as an elaboration of what I was trying to really say but failed at. 
Not sure that's quite true, as [this questions](https://stackoverflow.com/questions/18383923/why-is-httpcontext-current-null-after-await) shows. It seemed I misremembered slightly though, and it's actually `HttpContext.Current` that's null, not `HttpContext` itself. Calling `ConfigureAwait` is still not necessary to produce the issue though.
Is the app - for any reason - on a SMB1 Share? MS prohibits network usage from SMB1 Shares
Another open source screen temp app I have been using for a while. Lots of options. https://github.com/Tyrrrz/LightBulb
In addition to the other reasons... A lot of libraries (mappers, UI frameworks, ORMs) use reflection to determine the structure of your classes. These libraries are often designed to only look for properties, never fields. So if you make it a field, a lot of stuff simply won't work as expected.
That's for Java. The arguments for C# are very different because we don't use getXxx/setXxx methods. 
This is awesome! But *please* fix the indenting in MainWindow.xaml.cs it's painful
... which they did as I am almost sure they are monitoring this sub.
If you assume that C# is used in corporate environments then AWS/Azure, [ASP.NET](https://ASP.NET), and SQL would be good to know, but in six month you probably don't know much yet so LINQ would be a really good area to cover as well as async/await and a good knowledge of core .NET 
&gt; all the code having a pinkish background makes it unreadable. Oh, good, I thought maybe I was going blind.
https://docs.microsoft.com/en-us/dotnet/api/system.windows.application.onstartup?redirectedfrom=MSDN&amp;view=netframework-4.7.2#System_Windows_Application_OnStartup_System_Windows_StartupEventArgs_
Wow, I don't know what happened but indentation in my file doesn't look like the one on github...
Well, it figures out I didn't knew it by the time or maybe I was to lazy to find it and too immerged in c# development... Anyway, I can say that with my application you can have multiple configurations, custom bindings for each configuration, and for example you can change the color directly from nvidia panel and save it with the application. Multi-screen support with individual screen configuration and I think that's all :)
Yeah, I saw it few days ago and that's what motivated me to post here :)
Initialize them when and where they are needed. If you need them on startup use the on startup documentation /u/Mabenue linked.
It was mixed tabs and spaces!
That is because of asp.net not targeting .net framework 4.5. As the answers show it requires `&lt;httpRuntime targetFramework="4.5" /&gt;` for it to work correctly. To understand why this is happening, it is important to know that async functions are run synchronously until the first await. In this case it would run on a thread that asp.net started, and not a thread from the threadpool. So in this case it is impossible to end up on the same thread again because the awaiter doesn't have access to the thread. So yes, it is possible to end up on a different thread if the calling function is running on a thread that is not managed by the threadpool. And this only applies to the first await. After the first await call, every other await call will end up using the same synchronization context unless you use `ConfigureAwait(false)`. If the calling function is also an async function, then the sync context will also be the same after the first await.
C# in a nutshell by Ben and Joseph Albahari, as a reference.
this guy C#s
Videos !
Sadly I can't as I am in the underground for the majority of my journey.
Thanks, will take a look at C# in depth by Jon. I am a complete beginner at this, so I just want to confirm that I should understand it while reading?
just to add to this, in the UK you can phone your local schools/colleges and ask if they have any work experience in the fields you wish to get experience in. My friend did this to get into a netops role. 
I think this one is the best to start with "Head First C#" [http://shop.oreilly.com/product/0636920027812.do](http://shop.oreilly.com/product/0636920027812.do) It is full of examples and also covers some OOP principles. It is an oldy but goody...
C Sharp Yellow Book by Rob Miles is often mentioned as a nice intruductory book to C#. http://www.csharpcourse.com
Not really, though. default(int) is 0, which is a perfectly valid integer.
That post title gives me headaches. Also “”, while pretty, doesn't compile ;).
&gt; As a local variable it won't be accessible unless initalized first. Meaning: The program won't compile if the variable might be accessed before being initialized.
Complete beginner in C#, or programming in general? If the former, you should be ok, if the latter then you should get something else then come back to C# in Depth.
 Beginner of program as a whole, C# is the first language that I am learning . 
I have to second the Head First series in general for beginning programmers. Even the early chapters give you a bunch of exercises to do to retain the stuff you’re reading, and the later chapters actually walk you through designing things with the language. It’s old but aside from async/await you’ll still learn most of what you need to know about the language.
… hence the emphasis on *roughly* The value of an uninitiated object is `null`, the value of an uninitiated struct is `default(that struct)`
I’m always looking to mentor people. PM me if you have time to hop on a Discord server and chat sometime. 
Skeet is what you want
Yellow Book is your best friend. 
Second C# Pro. Excellent book. 