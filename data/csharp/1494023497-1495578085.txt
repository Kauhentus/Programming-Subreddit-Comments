Depends, if you ask me. Single-filing is generally the norm, and the reason for it is simple: it doesn't take very much complexity/length across the total of your classes etc. before mushing them together in one file gets REALLY unwieldy.
Did you just tell me to go fuck myself?
This is pretty neat, bookmarking for later. Was very interested in the implementation of the JWT authentication. Thanks for sharing.
I'm trying to make a "What's reddit pissed about?" App with Facebooks API and RedditSharp. The basic idea is grabbing the top 25 posts of the week sending them through Microsoft semantic analyzer and then take the ones that are negative, send them through a key phrase analyzer, and then make a word cloud of what reddit is angry about this week! The only problem is var apiKey = "You'reNotGettingMyKey"; var document = new SentimentDocument() { Id = "documentMyButtInMyPantsu", Text = redditTitle, Language = "en" }; var request = new SentimentRequest(); request.Documents.Add(document); var client = new SentimentClient("834d70278ac84264b39b0eac12c61f76"); var response = await client.GetSentimentAsync(request); foreach (var doc in response.Documents) { return doc.Score * 100; } return 0; } doesn't work at all :( It gets to var response = await client.GetSentimentAsync(request); and then does nothing. It's obviously awaiting a response from microsoft but I have no idea what the fuck :( 
&gt; Is there any point to an Observer pattern in C# when the language supports events out of box? No. This is where the GoF fails hard. It should have explained how patterns are context dependent. 
Sorry to piggy back but my question is sorta on topic. Is there a way to insert a series of variable names twice in VS. I find myself doing something like this all the time: myClass.Joe = prefs.GetString("Joe") myClass.John = prefs.GetString("John") myClass.Jack = prefs.GetString("Jack") Not a real example but something like it and I want to write a single line but then copy it several times and insert Joe, John and Jack into each different line like above. I know code snippets might help but it seems silly to make a new snippet everytime I have a piece of unique code. I've been doing a lot of forms and sometimes the amount of variables the clients want are insane. The way I have been doing it is in Notepad++ with the column editor mode. I'm wondering if there is an easier way out there from veteran programmers. Edit: sorry about formatting I'm on mobile 
not a better answer but assuming you use a fixed width font, you can hold alt + shift to use column editing right inside vs.
Yeah I've tried that. But if you ever paste it gets all wonky. NPP handles column mode pastes a lot better than VS
Vim's visual block (i.e. column) mode works pretty well too.
I know you have a workaround, but this is likely a permission error when the ScpClient attempts to set the timestamp on the file. 
Re# keeps original but adds live templates, easier syntax and nice UI to add them quickly.
This was a project with 0 stars I stumbled upon a couple of weeks ago. I thought it was really cool because there are a slew of errors I've made while writing test code that could have been detected by an analyzer (e.g. `[InlineData(nameof(Foo_MemberData))]`, which took me a while to debug because the test method accepted a string). xUnit seems like the perfect place to write analyzers for because it's not very type-safe. The project is still in its beta stage, and was just made part of the xUnit organization, so it's not very feature-filled and it doesn't detect a lot of stuff yet. Here's a related thread: https://github.com/xunit/xunit/issues/851#issuecomment-292856238 I am posting this here hoping to bring attention to the project and to encourage people to try it out/contribute. I'm also interested in gathering a little feedback for the project owner, so he can add new analyzers: for those of you who use xUnit, what mistakes have you guys run into writing xUnit tests before?
I've been told that even knowing what an API or what a RESTful API and having this project puts me above other people looking for internships but I feel like thats *completely* bull shit... I feel like this code is about as bad as Garbage Pail Kids and will probably do as much damage to the psyche that that movie does... In summary: I'm really just looking for people to tell me it does suck so I can feel validated in how I've been talking about I suck at this. And also for any advice on how to make it 'slightly' less awful. EDIT: **WARNING** Also I'm about to make it possible for someone to sign up with an email as well so I can send emails when a book is due. For the love of all that is holy please *do not* use your real email and don't use a password you use anywhere else. It is literally all plaintext and more importantly there's no SQL injection protection (I'm working on both) and until I get those two things done please be careful if you actually run it to see how it works and create an account. An account has already been created though if you wanna see how it works. Root is the ...root admin that has full permissions and Root1 is the password. 
I used ilspy for the first time today and found it incredibly intuitive and easy to use. Somehow I expected I would have to compile my own code to see the source for specific .net methods but the simple namespace browsing made it a breeze to find the source for some system.net.networkinformation classes.
Here's a [list of the analyzers](https://github.com/xunit/xunit.analyzers/tree/master/src/xunit.analyzers) right now because the readme is sparse on info. Looks pretty darn handy.
I like R# but have it disabled because it was making VS lag so much. VS 2017 has pretty good features on its own, but I'll probably enable it again soon, just wanted to mention how at a loss I am without snippets!
I've got a few ReSharper ones. I created one called testx that generates an xunit unit test method with the correct attributes. All I have to do is enter the method name and the method body.
Are you not supposed to have any logic inside of your winforms? I thought I could use the forms to basically separate different parts of the code logically. 
Modern convention is to keep your views (forms in this case) models (books, users, etc) and view models (basically an adapter between the two) separate. Though this is more commonly done with ASP.NET and WPF applications as they are better designed to take advantage of it. When I write a winforms application I will usually encapsulate the purpose of the tool in a set of completely separate classes, exposing the information and methods I need to interact with it. I then write my winforms application to utilize my class(es). This helps me write cleaner code and makes applications more portable. Maybe you want to make this web based later on, or migrate to a WPF application or mobile. Demonstration MVVM (model view view-model) or other patterns will be recognized by employers. 
&gt;You have a .gitignore file, which means you at least know that Git exists kind of lol. I think half of my commits are me typing "I hope this fucking commits this time this is the third fucking attempt Jesus Christ." Because making it work correctly just eludes me somehow.. &gt;Also, avoid using the class name as a variable name Okay. &gt; I'd ask you a ton of questions about IDisposable to see what the depths of your knowledge are And theoretically in an interview if I said "I have no idea what the fuck that is". Would that be a dealbreaker? I'll definitely look into it though and absolutely refactor all the code to make sure it follows guidelines. &gt;In Book.cs, you mix a "success" property in with the book property, even though you identify that it has nothing to do with the book. That's a red flag. I'm not sure how else to do it though :( My php file returns a 'success' string into the JSON string so I want to be able to access that. I think the only way to do that is to have a success part of the class. Also do you have any opinions from a general UX standpoint of what I should do different? Like if you build/run it is there anything you could say you like/dislike? Nothing is threaded and that makes me very very very worried but threading is...difficult. 
So should I call methods from within classes that I create on button presses? And I pass like text box stuff through strings into the methods? 
R# is very resource intensive, and there's less and less reason to use it as Roslyn allows VS and basic extensions to be better and better. There are better profilers, better live unit testing, and equally good validators. Basically Resharper is McDonald's. It's familiar, it's affordable, and it's easy, but it's not that great and it'll leave you feeling bloated.
This thread is awesome! Once upon a time I asked similar question on stack overflow. It was a horrible mistake. I got no answers and was shamed into oblivion.
This I hate so much. I'd really love to install R# but to keep it off until I need it. But disabling it leaves VS crippled. 
Already saved it for the future or colleagues :D 
Since those tools are configurable, I guess it just moves the discussion to a new place.
If you select some code and then type the name of a surrounding snippet, VS puts the code you just overwritten as the body of that snippet. Example: select code -&gt; type `if` -&gt; press enter
What are the alternatives and do we have to use VS2017?
Nprofiler is a much better profiler. Ncrunch is a much better live unit testing suite. There are a handful of refactoring and validation tools for VS that are about equivalent to resharper. You don't need 2017, though 2017 makes some of these things better and has more tooling. You do need at least 2015 for Roslyn support at least in terms of validators. Resharper isn't bad or anything, it's average at a lot of tasks, reasonably cheap and has a subscription model which is nice for corporates, but this idea that resharper is still totally necessary for productive use is bullshit.
Idk, but you can instantiate a cmd.exe with no window once and give it commands through stdin to launch other executables and read via stdout. That way you'll end up doing `Process.Start` only once. Probably won't get faster than that.
If I understand your example right, then it sounds like MixEdit is up your alley. You can check out some GIF demonstrations here: https://marketplace.visualstudio.com/items?itemName=MarcoAlamia-CodingLabs.MixEdit Unfortunately it's not free, and I'm not sure if there's a free alternative that doesn't involve using a separate text editor. I think they have a trial period at least.
Uhm...because I just wanted a way to return whether the operation succeed or not. And the only way I could figure out how to do that is to put it into the json array. I could change the PHP but I don't actually know PHP and the PHP code files were kind of cobbled together from different places across the internet and kind of shoved together and forced to work. 
What I'm asking is why is the success within the the book in the json? I'm on my phone so I'm not looking into it too deeply. But if the json is like this { "book" : { "title" : "something", "success" : "true" } } it could instead be { "response" : { "book" : { "title" : "something" }, "success" : "true" } } 
Hey I wasn't saying you should just that it has that advantage, sometimes in large projects it's not simple even with the right tools. Jetbrains will show the leak but I find some tools aren't very good with delegates, ants seems to be the best for me but these tools are expensive
I just worked on something very similar to this so I thought I'd share my implementation. My MainViewModel contained properties for a HeaderViewModel, NavigationViewModel, and ContentViewModel. The ContentViewModel had properties for Page1ViewModel and Page2ViewModel. Each of those ViewModels had a property pointing to ContentViewModel. My pages were dependent on each other, they really shouldn't have been separate classes but I found the ContentViewModel was too unwieldy without them. The MainWindow datacontext was set to the MainViewModel. It contains a Header user control, a navigation user control, and a tab control. Each tab contains a view that is bound to a property in the ContentViewModel. There is no code in the code behind and instantiation of the MainViewModel is performed automatically because it is bound in the XAML. I also used MVVM light to reduce boilerplate code. But I think I'm a lot better off because I learned MVVM without a framework and then used the framework to reduce the amount of code I need to write after understanding the purpose for it. 
Removed: Rule 4. Please include the platform you're using, the StackOverflow examples you found, and why they weren't satisfactory.
Maybe not what you're looking for, but I always use Excel for these types of things. =CONCAT("myClass.",A1," = prefs.GetString(""",A1,""");") With Column A being your list of names. Excel is also really useful for creating quoted and comma separated list from a plain old list of values
Thanks! I'll have to try that. IMO anything that increases productivity is worth paying for. We are developers and we should be supporting other good developers for their work
Rider is already close to being better than VS: it's much faster/snappier, and it runs on both Mac and Windows. I'm already doing a lot of production work with Rider at my job. I am excited to never use VS again, as soon as RIder is production-ready. Vs is really powerful, but it's a monster of an app, and there's a lot of bloat in there. 
I've used nimble text (nimbletext.com) to good effect doing similar things. Otherwise sublime or notepad++ multi-line editing like you say. 
Also: 1. Rider is MUCH faster/snappier. 2. Rider will be included in the JetBrains "All Products" package, which a lot of professional devs are happy to pay for, and which gives access to the best IDE's for every major language out there. For instance, I've been using DataGrip for almost two years now, and it's so much better than SSMS that it's not worth discussing.
You can return an IHttpActionResult which lets you return status codes such as BadResult(), Ok(), ect.
Code snippets are the shit. 
I am really excited to do all of my .NET development in Rider. It's already fantastic, and will only get better, I am sure. It's already so much faster/snappier than VS that it's like a drink of cool water on a very hot day.
&gt; but to me C# seems to be the most advanced programming language of its kind That's true, but then again Python is a different kind of language. Later versions of C# do lend a lot from languages such as Python (which is a good thing) &gt; Start something quickly: True, but meaningless if ... Python is great for prototyping, then again, so is C# interactive &gt; Excellent language for a beginner: I don't know.. It's easy to get started with but I don't know if it's an excellent language for beginners. It doesn't impose a lot of restrictions which can cause beginners to create a huge mess (same holds true for other languages but more restrictions can help). I'm a full time C# developer, have been since the first beta's, and was using many other languages before that. But when people with no programming experience at all ask me where to start I actually point them towards functional languages, specifically F#. From an educational point of view it just makes more sense, and I wish that's what they started us with back in school. Consider mathematics and programming. In algebra you learn `x = x + 1` is impossible yet the next hour, in programming you learn `x = x + 1`. There's much more to it of course but my point is that a "good language for beginners" should does not always mean "an easy language for beginners". &gt; Great standard library: I think the BCL is also very good, if not better. The BCL is great, and if you want to target .NET with Python, there's IronPython. That's probably where I use Python the most, through IronPython as a way to allow .NET applications to be extended with scripts. (Although these days you can script C# as well) &gt; Indentation: I do it with C# anyway. And forced indentation is sometimes annoying. It's different, I don't like or dislike it. The only thing I hate is when `{` are not put on a new line (Java) &gt; Great documentation: Is it better than that of C#? Some hate MSDN, others love it. The new docs are great. Never used the Python docs, just read books instead. So sure I like Python, but depends who wrote it and how they wrote it. It has it purposes, just like C# or any other language (Except Java and PHP... *take that with a grain of salt :p*) 
The first answer on the page you've linked to looks close. In their RemoveText method, though, you might what to do: if (myTxtbx.Text=="Enter Text Here...") myTxtbx.Text="";
This!: &gt; I'm not sure it's good to learn Python as a first language when it's dynamically typed and can be used quite "loosely". Couldn't agree more 
I am spoiled by C# and I actively dislike using other mainstream programming languages. I have not used Python in production but I have taken a Python course and did a cryptography course using Python for breaking hashes and such. I don't hate using it like I hate using Java or JavaScript but I don't find it better than C#
You could try to disable UseShellExecute in the ProcessStartInfo and see if that helps, if you're really desperate you can also pinvoke the CreateProcess API but I think you should rather move the logic inside of your program rather than calling external programs.
I write C# by day, but I really enjoy Python when: * I need something cross platform * I need to build something quickly * My codebase isn't large enough for static types to provide a major advantage. * I need to build a light web service that can run on hardware that won't cost $100 per month * I want to do something on Raspberry Pi I think in terms of a learning language, we don't realize how much overhead is involved in writing C# code with Visual Studio for the first time. You need to have a Windows machine, download and install Visual Studio (2015 or 2017? hmm... 2017 wasn't stable last time I tried it), wait a half hour for the install to finish (if you have a SSD, longer if you don't), open VS - wow that's a lot of buttons, select the correct project type out of roughly 600 different project templates, etc. This is the happy path. At least one of your students will end up with an install error you have never seen before. This stuff is second nature to us as we've struggled through all of it, but directing 30+ students to do all of this just so they can start writing code? No thanks. Python comes pre-installed on Unix-based systems, can be written in a basic text editor, and executed from the terminal. I probably don't care if the language is better or worse, I want students to be interested and learning during their first week rather than frustrated and overwhelmed. 
I use this a lot. I use V:s&lt;original&gt;/&lt;new&gt;/g. This selects the whole line then substitutes &lt;original&gt; with &lt;new&gt;. The g flag tells the substitute command to substitute every occurrence of &lt;original&gt; instead of just the first.
Is ironpython still a thing? If so, op would be interested.
Thanks for all your suggestions. I decided to be a good programmer and make my own code helper. Here is a fiddle if anybody wants to use it https://jsfiddle.net/xphacter/uhxfap7j/
&gt; and it's almost unusable on high density displays (such as my SP4), whereas VS and VS Code scale correctly. Weird, when did you try it? All of the jet brains products for the past couple years have had great high dpi support.
There are two kinds of hatred for Java. One is hatred for the competition. The two languages are used in the same niche so some people want to prove they made the better choice and thus feel the need to express their hate for the opposite side. I have some of that flamewar-style hate but most of it is more of an annoyance when you need to use Java and you are used to all the sweet things in C# that are missing or done in far inferior way in Java.
Interesting thought! I'll give it a spin
I've enjoyed programming in python recently after heavy C#/TSQL usage. Python is really great for data science due to the large number of open source libraries and the interactive jupyter notebooks.
I can attest to this somewhat. I used Android Studio (basically the same thing as PyCharm) with 150% DPI without much of a problem. You can adjust the UI font (even though it is said to be not-recommended, I did not have problems from it). 
Could you elaborate on "prototyping"? When I need quickly to test some algorithm or code, I often run Visual Studio, create a console application in C#. Perhaps that is not prototyping, I am not sure.
I use both Python and C# quite a bit and here are my reasons: - Python is used a ton by the Data Analysis and Machine Learning guys. As a result, there are a ton of python scripts and libraries online from people in these fields. - Jupyter Notebook - this is a IDE like thing used in the Python world that allows people to share around code. C# doesn't have anything close to this and the scientific community/data guys share these around all the time. (http://jupyter.org/) - Amazon Cloud. Amazon is starting to support .NET Core but if your building a serverless cloud application, Amazon (used to) only support Java, Node, Python. Between the 3 I'd prefer python - Python comes default installed on a number of linux systems such as centos. Python is better than bash (in my opinion) for more complicated scripts and you might not want to add complexity to your environment but installing .NET Core. - Better cross platform support (this is changing with .NET Core but .NET Core is in its infancy) - In embedded systems .NET and C# are pretty heavy. On an ardino/rasberry pi you definitely can use .net core but for prototyping embedded systems python is a pretty nice language. - I would recommend a beginner start with javascript/node but python is also a good choice. The reason being is C# requires you to understand object oriented programming somewhat or be ok with a bunch of magic until you do. For example a "Hello World" app in python is print "hello world" where in C# you need a static class inside a namespace with a static main method and the included System namespace, then you can call Console.WriteLine("hello world"). If you were starting out there is a lot more going on here, we have classes, namespaces, static, functions. For a true beginner, in my opinion, you should start dead simple (not even the concept of a function yet) and work out. All this being said I still prefer C# to python as C# is an amazing language but python still has its place.
To your last point if you are looking for a scratch pad for c# where you can test simple lines of code without having to create a whole project, you should look into Linqpad it is amazing for mor than just this reason. You can add library references to other dll and use it also to test out your linq queries. I can't recommend it enough. 
.NET Core will likely change some of these things for me in the future, but it's not ready yet. Keep your mind open to other languages and frameworks. C# and .NET are great, but they have their tradeoffs just like any other language or framework. 
I've used the latest 2017 version. The text and buttons are very small for me, making it difficult to use.
I completely understand that I _can_ run C# on linux and on a raspberry pi. That's not really the point I was making. I enjoy writing Python for the Raspberry Pi because when I have a little bit of free time to tinker with side project, I don't want to be digging through stackoverflow trying to figure out how to make Mono and C# work when I could simply just use another language. 
True. The alternative would be to add a flag that tracks whether the user has typed something yet. But based on the fact that OP couldn't work out why the pseudocode on his Stack Overflow link wiped out what the user typed (which was really absolutely trivial), I guessed that his level of experience was quite low, and gave him the simplest possible answer.
Only thing I can recommend is check the references are correct. I was hoping it was a misleading exception message lol That is a weird one.
I come from Python, and am now still learning C#. I prefer to write larger projects in C#, but I enjoy the ease of prototyping ideas in Python. I also enjoy "exploring" interfaces in the IPython REPL (same in Jupyter) instead of simply debugging code written while reading the docs. I enjoy many of the idioms from Python, and it's the reason why I'm so immediately comfortable with LINQ. Threading is terrible, true, but my uses of Python have never had performance concerns. I also note that documentation in Python libraries has been of better quality than that I find in C# libs. I've never seen a project with the popularity of HTML Agility Pack with such sparse or inaccessible documentation in the Python world, but I recognize that this is just my experience. I also miss reading docstrings in the REPL while I write code rather than searching out docs online. Python does documentation very well, in my experience. MSDN is a monumental resource, but third party docs rarely keep up.
What would be the most useful code snippets? I only use {tab tab} on prop, if and for/foreach 'cuz I dont know others code snippets
We all have to learn, and asking questions is part of learning. As far as I know, there's nothing built into .NET that will do this, but I may be wrong. But it's not too difficult to build yourself, and it's good practice!
In the project there is a references node you can expand. Usually if it can't find one it has a yellow triangle next to it.
I wouldn't say it's not ready yet. It might not be a fantastic choice for business critical prime-time enterprise, but for your example use case of something smaller and/or cross-platform, it's fine. I'm writing a rather large app in it for work and it's been an absolute treat
That's odd. I have no issues with it on hidpi screens with either windows 10 (creators update) or macOS.
I like the way my university handled this. They used python for the intro to programming class. This made it much easier for freshmen or people who maybe just wanted to 'see what this whole programming thing is about' to ramp up quickly and not spend hours dicking around with make files, fighting the compiler, seg faults, etc. But the from the 2nd semester class and upward, everything was C++. They used python as the hook for people that were interested, while not utterly decimating people who didn't end up wanting to do programming. 
It's because enums in java are actually classes. They're "unrolled" into specific subclass instances behind the scenes. This actually makes them INCREDIBLY powerful and java enums are the ONE language feature I miss when using other languages. Since they are 'just classes', you can give them fields by defining a constructor with parameters. So if you want to give an enum a sort-of backing int, you could define a constructor that takes an int parameter, then in your enum declaration, you'd say public enum myEnum{ enumOne(1), enumTwo(2) private int myField; public int getBackingField(){ return myField;} public myEnum(int backingField){ myField = backingField; } } Now whenever you have a particular value of an enum, you can actually call getBackingField() on it to get that values field. e.x. myEnum.enumOne.getBackingField() // returns 1 myEnum.enumTwo.getBackingField() // returns 2 This is a SUPER useful feature when you have a small collection of unique but related values (e.g. enums) but you want to store metadata about them. This lets you do that at the enum level without having to maintain some mapping in another location.
Me too! My job is a C# shop, but I automate a lot of support tasks with python
This is probably the primary use case I would suspect in an MS shop. It's certainly how we use it. Throw in Node for quick services or utilities as well. 
Why not both? I don't prefer one over the other, I use them for different tasks. C# is my favorite statically typed language, Python my favorite dynamically typed language. Regarding IDEs: JetBrains &gt; all.
Prior to graduation, I interned at a small Python shop that dealt with taxes. My responsibility was to use Python to automate as much of the mundane/tedious tax tasks as possible. The owner joked (but I can tell he was serious) that with enough automation he wouldn't have to hire future summer interns anymore.... haha. I used this Python site as my automation bible. Good stuff. https://automatetheboringstuff.com Anyway, I've been at a typical enterprise .NET corporation for a couple of years now. I don't miss Python as I definitely prefer C#. My opinion could change if I learned Python to do more exciting things than mere automation.
That reminds me, I want to install [Windows 10 IoT Core](https://developer.microsoft.com/en-us/windows/iot) on my Pi one of these days.
VS 2017 has done a lot to streamline the download and installation process. Many of the previously hefty components are now optional. You can even choose which templates you wish to install. It's kind of weird to have so few options when creating a new file or project.
Yes, and I prefer it. It's so much easier to go from zero to working program. As far as IDEs: PyCharm is phenomenal. Nearly as good as Visual Studio, and crashes less often despite being written in Java.
With the grid and alignment properties, is there really a need for docking?
I went from a C# developer about 4 years ago to a full time python developer, and my reasons were: - AWS had poor support for running C# web services - C# was not cross platform - I quite liked python as a language - I hate visual studio with a deep passion Things are better now; .Net core is cross platform and is pretty decent (it's getting there anyhow...), VSCode is here and Rider is on the way too. Stiil, here's my take on python, after 4 years: good: - Its quicker (more productive) to write stuff in than C# - It has a lot of libraries, and the package management is better than nuget. - pep8 and pyflakes offer a generic code format standard which you can't argue with, which avoid a lot of bike-shedding arguments. - pycharm is an *excellent* free IDE that gives you many VS-like features (eg. code completion, refactoring, etc). bad: - It's slow. Like, really. really. slow. I'm deeply disappointed by how slow it is in production use. - Deploying python is like stabbing yourself with a wine glass. Fragile, easy to break, and if it does, you cut yourself badly. - People sometimes argue that C# is bad because its attracts the 'lowest common denominator' programmers; but python is easy to learn, and trust me, bad python is just as bad as bad c#; but its waaaaaaaay slower, and harder to fix because you don't even get static type checking. - There's more hidden python2.7 hiding away in odd edge cases than you ever might imagine, and my dream of writing python 3.x code has been blown away several times by legacy code. - Python crashes. ...but you can't easily debug the running application, so if something *has* caused a python segfault, it can come down to 'comment out sections of the code until segfault goes away' to narrow down the problem. - Python maintainers (specifically the setuptools and pip ones) roll changes out without bothering to test them. This has broken application deployments several times. Just totally unprofessional; but hey, they're volunteers, so what do you expect? - Things are surprisingly platform *non-independent* when you install packages that have to compile C extensions. ie. They don't work on windows. Yeaaaah, there are probably more good things about python, but you're not really missing much from not using it. I'd say stick with C#; python's great for data science stuff, but I'd be reluctant to pick it as an application platform.
Because in Java enums are classes. This makes them more powerful in some ways. For example you can override ToString and return meaningful names from enums (unlike C#). Now they could have their cake and eat it too if they allowed overloading the implicit cast (like C# does) or at least hardcode the assignments in the compiler. 
I'm not a huge fan of dockpanels but it's there as an option for sure. You could create a dockpanel, dock the button to the top, a grid to the bottom and do the rest of your work in the grid.
Yeah, I think IntelliJ is good in feature-wise, perhaps almost as good as Visual Studio, although it is slower than VS due to the fact that it is written in Java. I used some other Python IDE when I wrote the aforementioned programmes. If I had used PyCharm at that time, I might have liked it a little better.
I have an old system from 2012 so even restoring VS from the taskbar takes about 30 seconds for it to become fully usable. The lack of IntelliSense and graphical debugger can be somewhat difficult but you do end up memorising and bookmarking the docs for various things, and it is relatively simple to use pdb.
&gt; I have an array PlayerScore that can be from rank 2-6 An array's **rank** is its number of dimensions (`[,]` is rank 2, `[,,,,,]` is rank 6, etc.) You probably mean the **length** of the array. &gt; So basically my question is how do I test an array as a condition for a loop. The easy answer to problems like this is usually LINQ! while (PlayerScore.All(s =&gt; s &lt;= 100)) { // processing } `All` runs a boolean function (a "predicate") on all elements of an enumerable (an array or list in your case), and returns true if and only if all elements return true. A verbose way of doing this would be: bool end_game = false; do { // processing foreach (int s in PlayerScore) { if (s &gt; 100) end_game = true; } } while (!end_game)
I love LINQ, but I just have to say that s =&gt; s &lt;= 100 Might just be the most confusing looking C# statement I've ever seen. I need to find some excuses to use this gem.
Just FYI, of you want to stop when a player gets 100, it should be &lt; 100, not &lt;= 100
Ha, yeah. It pains me that C++, Java, F#, and Haskell all use the less confusing `-&gt;`
Python is really nice when you don't have to write anything very large or structured
That's the way I've always seen it used
I know, but it can't be slower than the managed version
If I need something quick and dirty, I use python. If need some tools that needs to be optimize; C++ or Fortran is where I go to.
&gt; usually do not want to pass API arguments through request body For that matter, OP is using GET as the example so it *cannot* contain a request body. Parameters are the way to go.
Being lazy, things like Code Snippets were the first thing I learned. The problem of course is that it will take me some time to write a `for` loop outside of VS :)
Is this available in VS 2013? Because it doesn't work for me, it just replaces the code with `if`!
i remember delegates, thank christ i don't have to deal with them any more
I remember another article saying never use the word Handler when naming things
The syntax is terrible. Lambdas compile to delegates, but the syntax is much nicer.
&gt;So its a simple AST transfer... Identify structure, decompose and break down structure into identifiable chunks. associate data chunks to class structure. I understand the basic steps, I was more looking for example code if you have any thanks. &gt;Also your data types are off.. :) &lt;type type="int"&gt;drink&lt;/type&gt; Yeah, it was just for demonstration purposes. 
They are general purpose alternatives, but not always clean alternatives. You can't properly document the arguments or the return value of a `Func&lt;&gt;`. Delegates you can properly document completely. And yes, lambda syntax are an alternative to the old syntax to declare anonymous methods - as I said before. But the StackOverflow post is about declaring delegate types - something that lambdas are unrelated to.
I don't think so. I only ever found out about it in VS2017 so I don't know if it works in earlier versions.
they may not have a direct relationship with it but they're pretty much required for that bullshit event driven shim, writing delegates when i should be doing it properly instead left a bad taste in my mouth, but i'm repeating myself
i'm guessing you've probably not had to deal with them then, [writing this sort of thing](https://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.gridviewediteventhandler\(v=vs.110\).aspx) for a web app just makes me very upset, maybe i'm projecting
&gt;I would suggest you separate your serialization concerns from your application/business logic concerns. This is just a testbed at the moment, where, why and how the code is called will be altered once it's working. &gt;Then setting up that dictionary is as simple as myItems.items.ToDictionary(i =&gt; i.Id) Are you suggesting a second process that parses the items List into a Dictionary? I had thought of that but want this not to be a second stage, but instead a single stange directly into a hashed collection. &gt;EDIT: I just reread, regarding the data coming in empty. Did you intend for your KeyValuePair collection to be using your KVP&lt;K, V&gt; class that you posted? If so, I don't believe you've correctly typed the collection. You have public List&lt;KeyValuePair&lt;string, string&gt;&gt; KVPS when it probably ought to be public List&lt;KVP&lt;string, string&gt;&gt; KVPS That all works just fine and is a separate collection that I'm using *inside* of an item. My question is that I want the items collection that holds all items to have a key.. and that key to come from the id XML attribute This line: public List&lt;Item&gt; items = new List&lt;Item&gt;(); I want to change it to a unique key collection and that the key comes from the id XML attribute
`XmlSerializer` can not do this automatically. Your options are: - Convert the list to a dictionary in a second step, as already suggested - Implement `IXmlSerializable` and manually deserialize the items - Manually read the XML (e.g. with `XDocument`) without using `XmlSerializer` at all
You may have to implement `IXmlSerializable` if you want to do it in one pass. Though, there are some third-party solutions out there that have serializable dictionaries, I don't know if any support specifying the object property to build the keys from. Most will give you content more-or-less like: &lt;Dictionary&gt; &lt;Item&gt; &lt;Key&gt;100&lt;/Key&gt; &lt;Value&gt; &lt;Item Id="100"&gt; &lt;Name&gt;Burger&lt;/Name&gt; &lt;Description&gt;The lovely tasting Big Mac&lt;/Description&gt; &lt;Value&gt;5.67&lt;/Value&gt; &lt;/Item&gt; &lt;/Value&gt; &lt;/Item&gt; &lt;/Dictionary&gt; Where you can now have a disconnect: `&lt;Key&gt;999&lt;/Key&gt;` and `&lt;Item Id="100"&gt;` AFAIK, there isn't a serialization routine that can map something like: [XmlDictionary(keyMapping="Item.Id")] Dictionary&lt;int, Item&gt; items; You _could_ maintain two collections in your class for serialization purposes: [XmlArray("Items")] [XmlArrayItem("Item")] public List&lt;Item&gt; serializedItems //for serialization only; do not access in-code! { get { return items.Values.ToList(); } set { items = value.ToDictionary(i =&gt; i.Id); } } [XmlIgnore] public Dictionary&lt;int, Item&gt; items = new Dictionary&lt;int, Item&gt;(); //for code usage only But doing so means you have to make sure you work with the proper collection in-code. Another option is you can look into other serialization formats and libraries, though I'm not sure if they'll better options. (For example, you could use `BinaryFormatter`, but then you won't be able to easily edit the serialized content and is more fragile to changes.) &gt; Are you suggesting a second process that parses the items List into a Dictionary? I had thought of that but want this not to be a second stage, but instead a single stange directly into a hashed collection. Yup, pretty much. Ultimately, the serialization layer of your application probably will be a very small proportion of the overall code. So if you have to do an extra step in there, or define some similar classes, it's probably not _that much_ extra work. And it will shield your application from your serialization dependencies leaking into your application. For example, your classes are currently mutable. If you wanted to have immutable objects, or not directly expose the underlying collections, you have no mechanism to do this by working with the serialized content directly. There are options out there to try and simplify the conversion process to/from data objects (like AutoMapper).
 public class SQLtoPOCO { /// &lt;summary&gt; /// Enumerate all tables and fields in the database defined by the current connection string, return a file that defines the structure of tables wrapped in Protobuf.. /// &lt;/summary&gt; public void GeneratePOCOFromSQL(string ConnString) { try { // holder for the schema information for the current DataTable SchemaTable = new DataTable(); // make sure we have a connection if (ConnString != string.Empty) { // start the connection in a using statement using (OleDbConnection conn = new OleDbConnection(ConnString)) { try { // open the connection to the database conn.Open(); // Get the Tables SchemaTable = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, new Object[] { null, null, null, "TABLE" }); } catch (Exception e) { Console.WriteLine(e.Message); } } string env = Environment.NewLine; string header = "using System;" + env; header += "using ProtoBuf;" + env; header += "namespace SQLStructures" + env; string headeropen = "{" + env; header += headeropen; string footer = "}" + env; string classheader = "[ProtoContract]" + env; classheader += "public class "; string memberheader = "[ProtoMember("; string memberfooter = ")]"; using (StreamWriter sw = File.CreateText(".\\output\\" + "SQLtoPOCO" + ".cs")) { sw.WriteLine(header); Parallel.ForEach(SchemaTable.AsEnumerable(), (ni, w, l) =&gt; { ni = ni as DataRow; // Iterate the table names DataTable dtField = new DataTable(); StringBuilder sb = new StringBuilder(); sb.AppendLine(classheader + ni.ItemArray[2].ToString() + env + headeropen); using (OleDbConnection conn = new OleDbConnection(ConnString)) { try { // open the connection to the database conn.Open(); // Get the Fields dtField = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Columns, new object[] { null, null, ni.ItemArray[2].ToString() }); } catch (Exception e) { Console.WriteLine(e.Message); } // Iterate each field int x = 1; Parallel.ForEach(dtField.AsEnumerable(), (Row, ls, tot) =&gt; { // Query the Field by Table. string sSql = "SELECT [" + Row["COLUMN_NAME"].ToString() + "] FROM [" + ni.ItemArray[2].ToString() + "]"; OleDbCommand cmd = new OleDbCommand(sSql, conn); OleDbDataReader rdr = cmd.ExecuteReader(CommandBehavior.KeyInfo); DataTable schemaTable = rdr.GetSchemaTable(); // Build POCO structure here.. sb.AppendLine(memberheader + x.ToString() + memberfooter + env + "public " + schemaTable.Rows[0]["DataType"].ToString() + " " + schemaTable.Rows[0]["ColumnName"].ToString() + "{ get; set; }"); x = x + 1; rdr.Close(); }); sw.WriteLine(sb.ToString() + env + footer); } }); sw.WriteLine(footer); } This is a modified version of dbspy on codeproject, all credits go to original author, i just made it run in parallel and restructured the logic into a reusable paradigm to learn more about databases and their structure, also for importing data into sql...with the changing data types and structure, its hard to get a pin on if what your doing is still the way it is done..so this helps make it a bit more dynamic.. https://www.codeproject.com/Articles/23053/View-Database-Structure-Using-C?msg=3556299#xx3556299xx Hopefully you can extrapolate from that what you need. 
Thank you. I know what my options are now. The overhead for processing maybe a few 100 items into a dictionary will be miniscule even on a handheld device. So for simplicity that's what I'll do for now. 
I recommend avoiding 'Action&lt;&gt;' and 'Func&lt;T&gt;' on public APIs unless it is incredibly obvious what they are doing. Strongly named delegates offer better documentation.
what I wanted to was to learn more about the restriction of inputs, research about parse and tryparse helped, the original objective doesn't seem suited anymore., will have to change the program and research further ... but I seem to be close to do a sum of 2 numbers until one of the inputs is a string
Sorry, I didn't remember it correctly. I thought it was about suffixing the name with handler, [but that's not the case](https://www.reddit.com/r/programming/comments/5fc81a/naming_things_avoid_handlers/)
Not really.
You don't have to do X == true or X == false - the == operator is just a function that returns a boolean value, and while/if statements just take a boolean value. You can do while (!quest1) rather than (quest1 == false), they both return the inverse of quest1. This can make for clearer code if you name your variables appropriately - for instance: do { /* Some code */ } while(!NeedAnotherInput) Or "Do (something) and repeat while I don't need another input." Glad you're getting the hang of it :)
Removed: Rule 4.
In what way is this in violation of rule 7? Are the videos not made with effort? Are they not in a passable quality? I respect the decision to remove the post, but I'd like to know what the exact problem is.
 decimal y; bool x; do { x = decimal.TryParse(Console.ReadLine(), out y); } while (!x); makes sense thank you, "while x is not defined as specified above"
I would initialise x as true or false before entering the loop. bool x = true;
ctrl+k, ctrl+s -&gt; if -&gt; enter.
I have to write C++, C#, Python and Object Pascal on different codebases at the company I work for. Pascal is definitely my favorite, but I'd say Python and C# are tied at a close second.
That's actually really cool! Whetstone isn't the first name that I would pick for such a project but it's actually a pretty good name. 
Fat arrows got more going for it than your little skinny ass twig arrow. *snap fingers* I don't know. Just being random. Ignore me. 
For all intents and purposes, this should do the trick. I just want to point out that Tasks aren't guaranteed to run on a different thread. But it doesn't matter, the whole point of async/await in C# is to abstract parallel programming away from the developer, and how it is achieved is just an implementation detail.
You can use LINQ, like many others have said. And there is more than one way you can go about this. // Get the smallest value in the array and make sure // it's &lt;= 100 while (PlayerScore.Min() &lt;= 100) { } // Check every score and see if any are still &lt;= 100 while (PlayerScore.Any(score =&gt; score &lt;= 100) { } // Check every score and make sure they all aren't &gt; 100 while (!PlayerScore.All(score =&gt; score &gt; 100) { }
Can I not fix this problem at all?
No. It would be up to Unity to finally use a more recent version of Mono.
Well that fucking sucks 
Simply make a method. You can't use the **local functions** feature of C# 7, but you can just fine create new methods on the class level. You should probably get a beginners book on C#.
Thanks! Though may want to look at [the primes class](https://bentheiii.github.io/WhetStone/html/T_NumberStone_primes.htm). Truth be told I developed those functions for internal use (prime numbers are useful for random-access cartesian product), but I figured there's no harm in making them public.
Hmm, not sure then. I've never used +[\*\]\*, I always restrict it to my assemblies +[Company.Name.\*]\* for example.
Yeah, so i can change the variable's value anytime later in the code but not the constant, thanks.
A constant is less about the computer DEMANDING that it's not going to change, and more about telling the developer (you, or probably you in 2 years when you want to change the code), "this variable doesn't change anywhere, so you can change it here, and you don't need to worry about it getting set to something else later."
That `Operation` is basically how I've chosen to implement a success or not type response for an application I'm writing. I'm glad I'm not the only one with this idea. I find it a much cleaner approach than simply catching an exception. I can do it at a slightly lower level while the higher level only cares if something was successful or not, and logs when it's not successful. I also have a `Exception { get; }` on it so I can still log the full stack trace. How does that sound?
This is so wrong that I am not even sure what fever dream you got your information from. Microsoft now owns Xamarin(not Unity) which held the rights to Mono . Unity is in the process of upgrading to use the latest version of Mono (not .NET Core), as they could negotiate a new licence deal with Microsoft (Xamarin had not been cooperative before the takeover by Microsoft).
Do you know why Xamarin weren't cooperating?
&gt;Writing var doesn't makes it less strongly typed You're obviously right, i didn't mean to imply that by using "var" the code is not strongly typed. That section deals with reading code, and i personally think you can make things a lot easier to read by always writing the type. Obviously, this is my own personal opinion, i think var is bad for code readability. 
&gt; In fact, it can inline the value Yes, and it always does. There is no direct way in the CLR to read a constant field (they aren't really fields).
On an aside a Magic number is a hard coded number that is used somewhere in the code. I was dealing with some code where it was building a packet so after a loop it did: packet_size = packet_size + 20; The 20 is a magic number. It did this after 3 seperate loops. When I modified the code I changed it to be: const int std_packet_size = 20; ... packet_size = packet_size + std_packet_size; This way if I need to change the 20 to a 22 or other value, I can change it in one place and not in 3 places.
I think that the official ASP .NET Core documentation offers a solid starting tutorial, [see here](https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/) Hope this helps
I would recommend to attend a meetup or something similar. Find a friend who has those skills and try to finish a project together. You can learn a lot just by watching other people work. If that's not your thing, the only thing you can do is to start reading and training. Have a look at similar projects and their design. Try to copy some of them until you get the hang of it. 
I have several course on Udemy and such for programming and other stuff, but I need structure... I have Dyslexia, A.D.D, and have had a stroke at a very young age leaving my right side almost useless... That is why I'm looking for a class, because the teaching myself through videos of 'monkey see monkey do' and books are not working.
Is your problem on the UX- or UI design side of things or both?
In what world is the `Tally()` code more readable? What does it even return? Why does `TallyAggregate()` depend on the return value from `TallyCount()` and so on? The old code was obvious - the new code is convoluted.
Good answers here, so I'll just add this. Say you have a magic value of 1 that you use in lots of places in your code. Later on you discover that you should actually be using 2, not 1. Now you need to find every instance of "1" in your code and change it to "2". But only the right occurrences of "1". There are lots of other 1's in your code, so you can't just do a global find and replace. You have to look at each and every instance. That's slow and error prone. Instead, if you had created a constant called MAGIC_NUMBER and given it the value 1, you just have to change that value to 2 in one place. No search and replace, no risk. Similarly, if you have to find all the places you used that value, you can just search for MAGIC_NUMBER instead of searching for "1". No risk of false positives. Finally, MAGIC_NUMBER tells you something about the value, where "1" tells you nothing. Even a comment isn't as good as a well-named constant. (Obviously "MAGIC_NUMBER" isn't a good name!). Magic numbers are always bad. There's no good reason for them.
I also recommend Microsoft Virtual Academy. The beginners C# course is updated fairly regularly. Edit: I understand this doesn't meet your requirements though. I went back and re-read your post after I commented.
One common thing I have been evangelising at work is the project file structure. Having ViewModels live with the Views (ofcourse unless the VMs live in another project because you already have multiple front ends!) Makes it so much easier to navigate the structure. Also using services and a Event Aggregater(e.g. MVVMLight Messenger). Have clearly defined features and favour components over inheritance! Just some stuff off of the top of my head
[Moqqer](https://github.com/michal-ciechan/Moqqer) Moq.Mock&lt;T&gt; factory / IoC container to help with TDD and ever changing constructors dependencies. As well as other common Mocking tasks. Currently need to look if it is possible to mock open generics! If anyone knows/has an idea let me know! Meanwhile will dive into Moq source! Also any comments/suggestions are welcome!
Kudvenkat has some good stuff. He slows the pace down and re-explains everything often. c# tutorial for beginners: https://www.youtube.com/playlist?list=PLAC325451207E3105 
use bootstrap...
To me the following are observer pattern IObservable/INotfiyPropertyChanged/ICollectionChanged. Events are not necessarily the observer pattern...(they are just wrapped delegates that provide some encapsulation)
Yup, that's completely standard.
You can find html templates for FREE online, or for around $14 - $25 from sites like themeforest,
By the way, a lot of string methods actually call unmanaged code for faster processing. On phone so can't check of ToUpper is implemented in managed .net or as part of runtime
Since netstandard 1.5 or 1.6 you can use an AssemblyLoadContext. On other platforms, you might want to use an AppDomain. You should put the assemblies and their dependencies in separate folders. Or you create a process that just loads the DLLs and you use IPC/remoting. There are only bad and worse choices.
Ok thanks. I had another question but I forgot it :(
Thanks for the response, I had asked related questions on StackOverflow and it was recommended I look into Prism but I wanted a fundamental understanding of MVVM architecture and technology implementations before adopting a framework. I'm glad to read you believe you were better off for not using a framework from the outset as it somewhat validates my initiative.
Removed: Rule 4. Feel free to repost it, but please include the platform you're using (e.g., WinForms, WPF, UWP). Depending on the platform, you may have different ways of implementing this behaviour. &gt; I've toyed with the idea of using a picture box and IF statements but can't seem to get it to work. This is a pretty common way of doing it, at least in simple situations. When you repost it, please include the code you used for your attempts. It may only require a simple fix to what you already have. On a very general level, you could listen to the various "change" events on the drop down list and text box, and do an `if` check on their content to show one image or the other.
The body of the method is fine, but the btnTrade name is questionable.
Apologies, I am really very new to this. Would I be correct to categorise my platform as "C# Windows Application"?
I'm not using Visual Studio, but I'm using a program called SharpDevelop. It is a windows forms application so I put that in my new post. Thanks so much for helping narrow that down, I'm struggling to get my head around this and I'm working from the basics
Showing your code is more or less a prerequisite for any kind of help
Pretty awesome stuff, thanks for the share!
Why are local functions so important to you? I've been writing effective code in C# for a decade without them.
C# 6 in June would be amazing. I'm not finding anything official about that, but if it's right I can't wait.
At this point, I think I'm going to start asking for examples of how to do EF *without* repositories that somehow avoid data access code littered throughout random layers in the application. If you can't give that, you shouldn't be writing about EF. Don't say the repository pattern is *just* bad, because it's fine until people use it to return IQueryable. That's when it becomes a useless [non]abstraction. If you skip the repository but throw all the data access code everywhere in your application, you've just traded one EF problem for another. I suppose my view of this differs from the author because I don't expect EF to be an abstraction itself (and I don't know why others do). I expect to be a data access tool that may require an adapter layer/abstraction if I want to be able to hide/replace it in my codebase. The repository gives me that ability, but IQueryable is where it falls apart. I won't claim that EF is great for every situation. But when you get to the point where building a robust repository for exactly what you want from EF becomes cumbersome, you've probably outgrown an ORM anyway.
IMO, the best way to *learn* to code is to just do it. Start by making clones of small programs like notepad or paint. That will teach you important programming concepts. Eventually, you will think of an idea for a program that you want, and you'll think "hey I think I know how I would create something like this" and start making it. You will get the most out of courses if you already know how to program, because you will be able to keep up and won't get stuck on new concepts that can be strange or confusing. As for C# specifically, go ahead and download Visual Studio Community 2015 (not 2017, I've heard about crashing issues). There are plenty of tutorials for getting started with C# apps. Good luck!
Something like this? foreach(var user in users){ user.Color = GetRandomColor(); } Or you could pass the color as a parameter when you create the user. 
why?
I wouldn't use this a lot myself, but I can see it being really useful to someone who uses `checked`/`unchecked` a lot already. Also, I was worried when I clicked the link that they were gonna add checked exceptions, haha.
Just seemed like he wasn't getting any feedback from his jokes.
ah ok, I just assumed the mic didn't catch that
I think it's fine honestly. You know that it's a button, and you know which button it is. That's the same convention I follow
I think what you need is a project to set your sights on. It is really bland going through the courses and writing "Hello World" type applications. Find a project that you are passionate about and go for it 100%. I'm not saying that there is no value in books and courses, there is plenty, but if you are hitting a wall maybe it is time to try something different. As another user in the thread said, you may have good results by just trying to "do it" rather than focusing so much on course material. That was how I learned best.
From my point of view, `enum` in C# is just a set of integers, which are constants and can be understood at compile time (good old c# `switch` allows `enum`, for example).
Your not wrong in regards to Enums and backing ints, but how would you enforce type safety at compile time? The fact remains that the attribute still wouldn't know about what Enum is being represented. That's important, since an in of 6468922 may not mean anything to my enum. I think there's better solutions, but i think it'd require either rolling your own attribute or a little compiler magic that isn't there yet at the moment. As much as i think it should be better out of the box, it would seem it's not a huge enough issue.
I was going to say themeforest as well. A little pricier, but a good selection. I also use the startbootstrap-sb-admin theme for projects that don't need to look too fancy. I think [this](https://github.com/sudhirv20/startbootstrap-sb-admin-2-1.0.7) is the original source.
Damn. And he didn't even cover half the content he had prepared. 
We would name it "tradeButton" instead of "btnTrade", but I'm not sure if that's Microsoft convention. We do a lot of things that are stupid (must use String instead of string... -_-). Personally, if I were writing this, I would have it look like: private void tradeButton_Click(object sender, EventArgs e) { var ts = new TradingScreen(); ts.StartPosition = FormStartPosition.CenterParent; ts.ShowDialog(this): } Use "var" because it's obvious that we're instantiating a TradingScreen, use "ts" because the scope of the variable is small (3 lines).
Having something in a method signature that doesn't actually affect the method signature seems confusing to me.
Working on a store for tusdotnet (https://github.com/smatsson/tusdotnet) where one can save files to a Azure storage account. Progress is slow though mostly cause I don't have much spare time at the moment :( 
Are you looking for web, Winforms, or WPF? For web, have a look at Kendo. I can't remember if the grid is a part of the free package, but it is pretty handy set of UI controlls for the web. They also work very well out the box with different platforms you might be using, MVC, Angular, etc. Or you can hook it all up yourself with JQuery.
Search Stack Overflow on this. I remember reading a detailed post several years ago that discussed the pitfalls FSW and some workarounds.
From memory this was an early session on the last day (after a pub quiz the night before) and there weren't a great deal of people in the audience.
Attributes can take enums. They can take the following types: - All primitive types. - String. - Enums. - The type System.Type. - Boxed primitive value types. - SZ arrays of the above. 
If you have control of the `Utente` class, then add a Color property to it, and follow /u/AbandonedArchive's suggestion. If not, then perhaps instead of a `List&lt;Utente&gt;`, you might use a `Dictionary&lt;Utente, Color&gt;`?
I recently wrote a Windows service to manage / sync the RGB lighting of all my peripherals (keyboard, mouse, headset, graphics card and thunderbolt dock). Pretty fun little project!
My experience with FSW is that it is extremely unstable. It has tendency to miss or duplicate events. 
Note that you are not naming an object (which doesn't make sense per se); you're declaring a *local variable* and assigning an instance of some type to it. So the applicable naming conventions are the ones for local variables. 
I don't know. Normally I don't use Hungarian notation much either, but for complex hierarchies like GUI stuff, I think it adds clarity. Also, before someone mentions it, the "framework design guidelines" governs the public API only. 
Thank you so much! This fixed all my problems and it runs smoothly now, thank you :)
The Kernel?
And who watches the Kernel!?!? Oh boy... it never ends. 
The problem is, I don't have any color propertys on my utente class. How can I assign them?
Classic asp is extinct, webforms is basically extinct. Mvc is standard and core is bleeding edge
Yes I got the idea now after almost a year but if you can imagine learning the different flavors of .net all at one time can be quite discouraging. 
Ask your seniors for a short overview. I think the most straight forward would be to look at some code structure because they are distinct enough to give you a foothold. You probably don't have to worry about stuff prior to MVC unless the company has a lot of legacy web apps to maintain, but even then, worst case is probably webforms. If you understand MVC (which is not hard at all), core will fall into place easily.
here you go.. https://www.codeproject.com/Articles/866143/Learn-MVC-Project-in-days-Day
As much as possible, I give them neither prefix nor suffix. (like Html.TextBoxFor(m =&gt; m.Title) would do ) If I need to add something, I try to use semantics rather than types; If the user will see something that acts like a button even though it might be an anchor: ActionNameButton 
That's awesome, thanks!
https://docs.microsoft.com/en-us/dotnet/articles/standard/components
[Classic ASP](https://en.wikipedia.org/wiki/Active_Server_Pages) - essentially PHP like user hits URL and there is a file associated with that page that runs. [Asp. Webforms](https://docs.microsoft.com/en-us/aspnet/web-forms/what-is-web-forms) - originally intended to be GUI based drag and drop way to develop websites using XML like tags. Has a view page and a code behind that executes to manipulate stuff on the view. Now is generally used to refer to the tempting style used (ASPX over Razor). [.NET MVC](https://msdn.microsoft.com/en-us/library/dd381412\(v=vs.108\).aspx) - the "ruby on rails" of .NET. Create .NET websites using strong folder and file naming conventions. Strong separation of concerns between view and controller. Eliminate usage of state between client server (allows better scaling). View is focused on just rendering content. "web forms" (ASPX) is one templating, Razor is the preferred templating style. Razor is more HTML-like, less verbose, does not have editor as pages are more hand coded. This is considered the current industry best practice to use. Avoid using Web Forms. [.NET Core](https://en.wikipedia.org/wiki/ASP.NET_Core) - .NET originally was intended for windows based operating system. .NET core is not quite the full .NET but is intended to allow you to write applications for any operating system using a .net language (namely C#...F# and others to hopefully come in the future) .NET core is still in it's infancy, many developers avoid it unless they really want to work in C# and cannot afford the windows licensing. It's considered bleeding edge and need a bit more time for it to mature. (it's about 2yrs old at this point AFAIK and they are already through 2 '.NET Standards') use for hobby, small or low risk projects. 
And who watches the filesystemwatcher watcher? 
Personally I prefer to prefix the method / object name like btnTrade instead of tradeButton. I find this better for me because if I'm using intellisense I just need to type btn and I'll see a list of all buttons for example. It probably doesn't follow Microsoft's convention but it is better for me.
Where are your key presses coming from? I'm assuming that your chip reader is simulating key presses, and that it will simulate either 5 or 6 keys? Is there any other user interface, or any interaction with a human user? 
Yeah, and some are far-fetched!
I'm not really crazy about using attributes to direct the compiler, personally. Partly, there is the amount of ceremony involved in an attribute vs a keyword. But, there's also that attributes are implicitly informational. Attaching compiler behavior to attribute metadata that way has always struck me as counter-intuitive.
Start a timer after every key press. If the timer is already running from a previous keypress, reset it. 
The feature is basically a "nice to have" so if it works 90% of the time it would be good enough, but if I can make it work all of the time without a burden to the file server or massive programming expense, all the better. I'll have a look at this later today. Thanks again
The reader I worked with would send a few special character's at the start of a code and then send a new line character at the end. Does yours have a different way of indicating this?
Already read about those options but sadly our reader does not support this, at least to my knowledge. If I could manage something like this how would I implement it into code?
I thought about that, and I'll consider it if this turns out to be too unreliable. In my app it's mostly a convenience thing. If it only works 90% of the time, then that's probably okay. People will likely miss notifications from time to time anyway. But if it works less than 80% of the time, well then I might as well not have the feature and look toward alternative methods.
Just gonna cut in to say you probably do have to worry about Webforms
Could depend on the company. Sadly in the last month I've been moved to a team that's maintaining a legacy webforms app. I'll occasionally be pulled off when the business has new requirements/needs/wants for the Web API for their mobile apps, but until then I'm helping with backlog issues for this crappy webforms app.
In that case I'm sorry. I think UX is the only part I would've been able to offer some advice.
That's what this is about. If you use ASP.NET Core, then you won't be able to use the full .NET framework with version 2.0. You need to stay at version 1.x of ASP.NET Core, or switch to .NET Core (and not the full .NET framework).
Update your stuff
I like preloading both images and setting them both to Image[0].Hide() and Image[1].Hide() in the initializer. Then you can just use: If(string.IsNullOrEmpty(textbox1.text)) { Image[0].show(); Image[1].hide(); } Else { Image[0].hide(); Image[1].show(); } Something along those lines
I was in the audience. I was speaking myself at NDC, but wandered along to this one because Jon Skeet has always been something of a hero. It probably sounds a bit like I'm bashing Skeet, which I'm not because I love his work and he still remains someone I admire a lot, but a lot of the other speakers put a huge amount of time and effort into their presentations, and got through a lot of awesome material, whereas he came across as not taking it terribly seriously and just winging it. A lot of his material was recycled from other talks so many people had seen some of it before, he barely got through half of it, and it got a bit cliquey at times with him sort of talking to his friends in the front row a lot. Admittedly it was a lighthearted topic, but I vaguely recall the conference program made it sound a lot more interesting and useful. NDC itself is a very expensive conference to attend (around $2500-$3000 if you do the whole thing) so I think perhaps people felt a bit short-changed, especially when expectations were probably higher since he is something of a "developer celebrity".
I have this code. class Utente { // Class Atributes private int numUtenteSaude; private String nome; private int telefone; private String email; //Get e Set public int NumUtenteSaude { get { return numUtenteSaude; } set { numUtenteSaude = value; } } public String Nome { get { return nome; } set { nome = value; } } public int Telefone { get { return telefone; } set { telefone = value; } } public String Email { get { return email; } set { email = value; } } Do I add it on class atributes? Sorry for these amateur questions but this is my first time doing a C# project. 
If you're a visual learner and want to see videos, you can get a free 3 month subscription to Pluralsight from Visual Studio Dev Essentials thingy. There's 40 hours of content for MVC.
Non-Static (also called Instance) Methods need a method reference to be called on: `new Object().ToString()` (to be honest: what would be the string represention of something not represented by an object?) Static Methods do not need that, for example checking whether a file exists is `File.Exists(String)` and not `new File(...).Exists()` (this would not compile)
I find Bob Tabor to be really helpful. I'm currently doing the C# beginners course on devu.com, he's kept me focused and engaged so far and I have a short attention span! 
It's confusing, but "dynamic" is not the opposite of "static" in C#. The "dynamic" keyword is completely unrelated to the concept of "static". You can pretty much forget that the "dynamic" keyword even exists as you will probably never use it. The opposite of "static" in C# is "instance", as /u/Gambleon says.
I tried going through that, but Im looking for practical applications and tutorials of C#. From what I know, the tutorial he offers on Microsofts website is console-oriented, (readline/writeline, different maths, intro to IF, FOR statements, etc). This stuff I know; he doesnt teach much code/syntax related stuff, (unless he has another tutorial that Im not sure of).
It looks like (someone correct me): * A subset of the ASP.NET Core libraries are switching to target `netcoreapp2.x` directly instead of `netstandard2.x` except that you must use these to run an ASP.NET Core web app so for the common use case all Core 2.x web apps must target .NET Core 2.x. * .NET Core 2.x will attempt to load dlls that are compiled against the full framework and let you use them as long as they don't actually use types/methods in the desktop framework BCL which are unavailable in Core (then you get a type load exception?). * The preferred way to move forward with legacy code is to migrate the parts you can and leave the stuff you cannot but change it so that you can call it from an out of process model. 
There is nothing called dynamic methods. There are static methods, instance methods and virtual methods. 
That's my read. In short, you will need to switch to .NET Core to run ASP.NET Core starting with v2.0.
&gt; The pushback needs to be against the 3rd party library providers who really have no excuse in most cases for not releasing .Net Core versions No, far from it. The majority of the complaints are about Microsoft libraries that are not or will not be ported to .NET Core.
&gt; The pushback needs to be against the 3rd party library providers who really have no excuse in most cases for not releasing .Net Core versions of their products. 3rd party? Plenty of libraries from Microsoft are not even ported to .NET Core.
Honestly, just create a new MVC project in Visual Studio and then follow the MSDN documentation. You'll learn how to set up a project and it'll be good exposure to some C# code because there wont be a lot written at once and you will get a template that you can run and see working. The documentation offers very good tutorials that go down to the basics of "right click this, and choose this option." ect. ect.
Unless we are talking about statically typed vs dynamically typed.
The FormColletion would have data on any input fields. In this example they are pulling the file data straight from the Request object. HttpPostedFileBase file = Request.Files["UploadedFile"]; 
The problem you've got here is that SQL is predicting your deletes cascading to the same place more than once. When you delete a parent object, SQL will "cascade delete" all of its children by default. This creates problems when cascade deletes update the same table more than once, i.e. You delete a row from Table A, that updates table B and C, tables B and C both update D. I think, *think**, your cascades are colliding on your Contact entity. For instance, let's say you delete an AreaId. If an Insider references that Area, the Insider is deleted. Then, since Insider is a required field for Contact, the Contact is deleted. The problem shows up because if an Outsider is keyed to that Area, the Outsider is deleted as well, which will delete its Contact as well! SQL will not let you do this since it allows for the creation of race conditions. You can disable the cascade delete on a relationship by setting: relationship.DeleteBehavior = DeleteBehavior.Restrict; or, set it throughout the model by doing this inside OnModelCreating(): foreach (var relationship in modelBuilder.Model.GetEntityTypes().SelectMany(e =&gt; e.GetForeignKeys())) { relationship.DeleteBehavior = DeleteBehavior.Restrict; } [Credit to Rowan Miller for that last gem.](https://github.com/aspnet/EntityFramework/issues/3815#issuecomment-159059491) Hopefully this gets you started, feel free to ping me if you have any other issues (I'm supervising a release tonight). \*But I'm a bit confused, since your context doesn't make Contact.Insider or Contact.Outsider Required, but your Entity code has the [Required] annotation on it. 
Think of a static method as being like a global function in another non-object-oriented language. As such, they can be abused. There's nothing stopping you from creating a static function in a class that has NOTHING to do with that class. In fact, something you'll see often is a "Utility" class with a whole bunch of apparently random static functions. People just keep sticking new functions there over time.
Am I right in saying you're trying to load pictures of cards into an array and then determine their value based on what number is on it? I'll tell you what I'd do and hopefully someone better than me can chime in. I would create a Card object with an image attribute, a value attribute, etc. Then load each picture and specifically create an instance of the Card object for each one.
If you are using SQL Server, you have an excellent tool available to you called SQL Profiler. It allows you to trace every SQL call and get the exact SQL statement that is being executed by the database. I love that tool - I used it daily. (These days I'm mostly doing Oracle development and the profiling tools are total shit compared to SQL Profiler). p.s. I fucking HOPE the where clause is being run server side in your example. Otherwise you're bringing thousands of rows across a network only to throw away most of them...
the concept of static is too big to explain in short terms, but here is one way to look at it: class Cat { int age; static int maxAge; } The variable age is specific to each individual cat, but maxAge is relevant to cat as species. Static makes the variable shared between all cats. This example does not nearly capture everything important about static but it's a good start I think.
Yes, so you'd do something like: private Color colore; public Color Colore{ get { return colore; } set { colore = value; } } Alternatively: public Color Colore { get; set; }
Let's tackle this book one by one. Your previous comments as well as other ones on here have the tone that you completely despise relation databases and that the mere fact that someone would use an ORM is a sign that something was done wrong. Even this post has that same tone, I think you gone from the one extreme to the other. Also the amount of times you refer to event sourcing makes it seem like you think it's the greatest thing ever created. You can't bash having slight work arounds by defining your own query, making a view or stored procedure but then say that you prefer to use event sourcing and replicate that data into multiple different data stores so that you can cache the data in a specific way that makes querying the data a little easier (literally what was said to do for EF). You've just traded code complexity for architecture complexity and what I can only imagine is additional code complexity to keep all of those data sources in sync. The event sourcing complexity comment. You can't say that event sourcing isn't complicated because you can hide it under a framework. It's still an added complexity for the benefit of being able to track every change. Then it's almost always useless and slow unless you are creating snapshots which is probably what you are doing with your polyglot data layer. These have to be kept in sync or you have to have someway to load the snapshot and any events that have not been merged. Does that really sound less complex. In practice it is not. Event sourcing in general I think is a very niche thing. There are very few applications where having to track every change is really required. There are very few clients that would go for it if I told them we could make things a little more complicated (translate to more money) but it will allow you track every change. If they really wanted to track the changes then chances are their domain would have such an event already. Think accounting or inventory, these domains usually have things like Inventory Adjustment, Inventory Transfer, Debit Memo, Credit Memo. These are things that act like your event store but only for what people really care about tracking changes for. Most businesses don't care that a user added an order line, removed an order or updated an order line quantity. It's extra data no one will touch or use. Now the performance section. I've yet to have an experience where the millisecond difference between using a Micro ORM vs EF or N-Hibernate is noticeable by anyone. If things are slow the bottleneck is usually somewhere else and not in the time it takes for the query to be generated so the benefit of a Micro ORM really isn't that great in the long run. Most people are not running these "Web Scale" applications where saving milliseconds a query is going to make a difference. Even then a caching layer would probably help a lot more which is where NoSQL would come into play. 
But unsafe already does this...
I believe that MS Press was laid off last year and no longer exists. 
And this is why SafeHandle does ref counting. SafeHandle calls the Release method when the ref count hits zero, not when its finalizer is called; the finalizer only decrements the ref count. The finalizer could be called due to the mechanism mentioned in the article, meanwhile the handle is being used in a function call to the platform invoke you're in the middle of. If the finalizer unconditionally called Release, then your external handle will get released while you're in the middle of a function call that uses the handle. Thankfully, the pinvoke layer has specific knowledge of SafeHandles and will automatically do ref counting for you when passed to a pinvoke method. You only have to do it manually in rare circumstances. 
This depends on the LINQ provider you're using. In EF (or LINQ-to-Entities) this simply will throw a runtime exception, because it can't translate the expression to SQL. Instead you'd need to first retrieve the rows to memory, then operate in memory (LINQ-to-objects). In that case, if you have the `Where` clause before the retrival to memory, it will be translated to SQL. I believe it's the same for LINQ-to-SQL and LINQ-to-DB.
&gt; if you have the Where clause before the retrival to memory So i could "force" that behavior with a .ToArray() call inserted in the call chain before the Select? (not saying thats a good solution, just wondering) Also do you happen to know of a entity framework architecture reference that explains the system down to the internals and Edm and the expression compiler and sql generators? (aside from the MSDN reference site). I've been digging through the source code/reference source for a week or so off and on and i've got a handle on parts of it but definitely not all of it. Much more complex and large than i imagined. Thanks for the response!!
I just ran into this problem the other day. Im fairly new to EF and not totally sure this is what youre looking for. I was able to fix it by removing the convention in the modelbuilder conventions in the context class. (this will change the global cascade conventions on your whole model) modelBuilder.Conventions .Remove&lt;OneToManyCascadeDeleteConvention&gt;(); and/or modelBuilder.Conventions .Remove&lt;ManyToManyCascadeDeleteConvention&gt;(); or, you could configure that per-relation declaration (not globally) with the fluent API with the WillCascadeOnDelete(bool) method on ManyNavigationPropertyConfigurations ... .WithMany() .WillCascadeOnDelete(false); ----- Also as a side note (you might know about this and decided against it, but ill mention it for fun), you can split up your fluent api entity config calls into a Map class for each entity type inheriting from EntityTypeConfiguration&lt;TEntity&gt; and making the config calls from the constructor. Then in your modelbuilder, you can reference each map config class modelBuilder.Configurations.Add(new MyEnityTypeMap()); instead of having all the configurations in the same method with modelbuilder.Entity&lt;TEntity&gt;. Or you can add all of them with reflection var typesToRegister = Assembly.GetExecutingAssembly().GetTypes() .Where(type =&gt; !String.IsNullOrEmpty(type.Namespace)) .Where(type =&gt; type.BaseType != null &amp;&amp; type.BaseType.IsGenericType &amp;&amp; type.BaseType.GetGenericTypeDefinition() == typeof(EntityTypeConfiguration&lt;&gt;)); foreach (var type in typesToRegister) { dynamic configurationInstance = Activator.CreateInstance(type); modelBuilder.Configurations.Add(configurationInstance); } base.OnModelCreating(modelBuilder); [source, stackoverflow](http://stackoverflow.com/questions/27747599/modelbuilder-configurations-add-and-modelbuilder-entity-on-onmodelcreating) Or using a single AddFromAssembly call for all maps in the assembly (which i have not been able to get working for some reason) modelBuilder.Configurations .AddFromAssembly(typeof(MyContext).Assembly); Good luck!!
Yeah, it's bad EF due to bad database design and shoddy input validation. A whole different issue. "Garbage in; Garbage out" was paid no attention. The argument is based in perspective. On the new platform that I'm working on, this entire thing was avoid because it wasn't needed since I'm no longer using a relational database. Can't have shit EF code if there's no need for EF.
As u/Lisurgec pointed out MS Press did [lay off all its staff last year](http://www.zdnet.com/article/microsoft-lays-off-remaining-handful-of-microsoft-press-staff/). The article I linked above says that Pearson may be continuing on with the name. If we look at the [MS Press store](https://www.microsoftpressstore.com/store/browse/all-titles), they still seem to be publishing titles however. I hope John Sharp creates another C# Step-By-Step book. In the back of my copy of the 8th edition (2015) it says "John Sharp is a principal technologist for [CM Group Ltd](http://www.cm-group.co.uk/contact/offices/), a software development and consultancy company in the United Kingdom". You could try contacting them and if John still works there you could ask if he's writing another book?
I always thought it was weird that ASP.NET Core supported .NET Framework as an option to begin with. Apparently Microsoft meant for this to be a transitional thing **and forgot to tell everyone**?
Oh dear, Person, anyone but *that* evil empire!
This is actually pretty cool.
Looks awesome! 
Check this site https://www.learncs.org/
They seem to be treating those who have been on the original .Net Framework since 1.0 about the same.
You have the correct value for `bppModifier`? Run in debug mode in VS and maybe sure you have all exceptions switched on from the `debug-&gt;Windows-&gt;Exception Settings`
Don't you have to pin your memory when you use pointers to them? So that the garbage collector doesn't move the objects to other places. 
Um... what nuget help page? Check out the github page for a more in-depth explanation.
[\[Authorize\]](https://msdn.microsoft.com/en-us/library/system.web.mvc.authorizeattribute\(v=vs.118\).aspx)
You could probably start with an implementation of CRC encryption, but that's rather simple stuff if you already know how memory works. If you actually want to control memory allocation etc., you'd be better off looking at C++, as C# is designed to take care of that stuff for you.
Considering [the official C# documentation](https://docs.microsoft.com/en-us/dotnet/articles/csharp/) is open-source and can be edited by the community, what's the point of this?
You could make a loop inside the case where you add items to the list until a certain exit condition (eg an empty input, 'q' or whatever you want) is met. 
Everything about .NET Core has been a complete disaster to anyone that needs applications with a lifecycle longer than 3-4 months. I'm getting off this wild ride and I won't return until they can go &gt; 1 year without introducing a breaking change.
hmm okey! i'll give it a try, thats a very good idea . Do you have any example on how this is done tho? Like im pretty new to this but i get what you mean, i just need a little guidence.
Well, this StackOverflow is closed source, so now we have a choice ;)
It ran sql against sql server. Apparently it still lives https://gist.github.com/imranbaloch/10895917 
This is almost Python 3 level of failure.
I have to tell you in all honesty, when I read this code I said "urk" to myself. Running LINQ queries inside a loop just seems so wrong. More importantly, this code will only find the last search term. Each time you run the loop, you're completely re-creating "list" with the results for just that term. So after the loop, "list" will only contain the matches from the last search term. So at the very least, you need another list to which you append the values that are found in the loop. That would be your final result. But there has to be a better way. I just can't think of one off the top of my head.
Yeah, I had the same problem with this. I've seen a better solution before, but now I can't seem to find it. It wouldn't be recreating the list, would it? Using a where clause creates a new list, right? And then I replaced the original reference with the list that I just created from the where clause, and then when it loops through it should change it's reference point, unless I've completely forgotten how that works.
Yeah, but the original "list" is then lost when the new one is created. So at the end you only have the last one created. Replace "list" with a simple scalar variable, like "x = term.length" or something. When you exit the foreach, x will have the last term's length. All the values for the previous terms will have been thrown out. There needs to be a line right before the end of the foreach that does something like "finalList.append(list);". (pseudo-code).
 var results = searchTerms.Aggregate(list, (current, term) =&gt; current.Where( x =&gt; (x.FirstName.ToLower().Contains(term.ToLower())) || (x.LastName.ToLower().Contains(term.ToLower())) || (x.Email.ToLower().Contains(term.ToLower()))).ToList());
Yes. Edit: what, downvotes for answering a question? That's a bit cynical, no?
That was my first reaction, too. But unless I've missed it somehow, there doesn't seem to be a "Compare Invariant" in the style of (pseudocod) string.equals(val, Invariant). When I looked up how to make it a little better there, I seemed to have [unknowingly opened a can of worms](http://stackoverflow.com/questions/444798/case-insensitive-containsstring/444818#444818). I suppose I could do that, but why isn't that part of the framework already? 0_o
Something like this: static void Main(string[] args) { List&lt;string&gt; list = new List&lt;string&gt;(); string str; do { str = Console.ReadLine(); list.Add(str); } while (str != String.Empty) ; foreach(string s in list) { Console.WriteLine(s); } Console.ReadKey(); }
I honestly think right now the best free resource is the Microsoft Virtual Academy.
I used Workflow Foundation 3.5. At the time I was the designer for our company's big project, so I did my research and evaluation and sold it for the management and the team as the right thing to use. But in real life when the project hit a certain size (less than 100 files in the solution) its designer became unusable that we had to edit the files in notepad, and in general it turned out to be a toy technology. It literally fucked me over and my career never recovered in that place.
I'm sorry to hear that.
Absolutely beautiful
Removed: Rule 4. Yup, half of learning C# is also learning how you do things on the various platforms. Unity in particular is quite unique in its usage compared to most other C# platforms. I would suggest sticking with their [learning materials](https://unity3d.com/learn) or books specifically written for Unity. Otherwise, if learning other C# language fundamentals, stick with "Console" applications so you don't have to muck about with irrelevant GUI/platform concepts.
Pitty reddit doesn't allow titles to be corrected.
that's what i did.
https://msdn.microsoft.com/en-us/library/7h9bszxx(v=vs.110).aspx
That only applies to managed objects, in this case the pointer comes from a native GDI object via `Bitmap.LockBits`.
I brought asp.net core 1.1 into play in a smaller project we have, hoping things would be settled now. Got the new visual studio. Sold it to the client that this is a good thing. Now the ant hill starts moving again. I'm not in a position in my career advancement that I can just shrug this off if things go south. 
&gt; This is a key element for me, a fast moving (or worse: churning) library is not what I need, I need things that will be stable. And I thought this was Microsoft's strength. It seems like a different Microsoft is working on the Core stuff.
That seems like it would be horrid to maintain though, since you'd be dealing with generated JS and on top of that you would still need to be able to convert to whatever instructions CodeCombat use.
I'd rather have smaller strings than constant time indexing.
This leads in the right direction, but this just validates that the user is logged in. He said that the user IS logged in, but may not be allowed to edit the form, so roles or claims will be needed.
If it's just a term search, you could consider defining which fields are to be searched, then just pull the values all into a single field and then search that for your term. That should give you the effect that you described, but it's not what I'd call a good search feature. However, going beyond that is actually a pretty complex task. I threw this together in a few minutes to demonstrate, and it's reusable: Demo here: https://dotnetfiddle.net/UaaaFL Usage: var searcher = new GhettoSearcher&lt;Person&gt;() .Include(source =&gt; source.FirstName) .Include(source =&gt; source.LastName); var term = "John"; var result = searcher.Search(sourceList, term); Implementation: public class GhettoSearcher&lt;T&gt; { private readonly List&lt;Expression&lt;Func&lt;T, string&gt;&gt;&gt; _maps = new List&lt;Expression&lt;Func&lt;T, string&gt;&gt;&gt;(); public IEnumerable&lt;T&gt; Search(IEnumerable&lt;T&gt; source, string term) =&gt; source.Where(item =&gt; Combine(item).Contains(term)); public GhettoSearcher&lt;T&gt; Include(Expression&lt;Func&lt;T, string&gt;&gt; property) { if (_maps.Contains(property)) throw new ArgumentException("Already defined"); _maps.Add(property); return this; } private string Combine(T input) { var sb = new StringBuilder(); foreach (var map in _maps) { var value = map.Compile()(input); sb.AppendFormat("{0} ", value); } return sb.ToString().Trim(); } } 
&gt;You can use the Linux .NET Core SDK and Runtime builds for most Linux distros. You can build apps that target Linux as a single operating system. Yeeeeeeeeeeeeeah!!! About time!
Here is the revised support plan after all the discussion that went on: https://github.com/aspnet/Home/issues/2022#issuecomment-300043783
It's aspnet core that isn't supported. Web projects and mvc, basically.
How can it be a decision after the discussion, if it's been made before the end of the discussion? It also contradicts the preview release blog post. In the post of Edward there is no mention regarding 2.0 on .NET, yet in the blog post they explicit say they will support it.
You programmers and your logic :) Okay you got us...perhaps we should rephrase it to "10 visual studio tips you wish you wish were available and/or knew about 10 years ago". Doesn't quite trip off the tongue so well though :/
Or just no click-bait title.
&gt; For sanity's sake, if I ever implement IEquatable&lt;&gt;, say for dictionary keys, even if I don't have to implement the == operator, I do so. This doesn't sound like a good idea to me, unless it's an immutable reference type at least. &gt; Nothing good can come of foo1 == foo2 being different than foo1.Equals(foo2). I really don't agree with that. People generally expect == to be referential equality. So unless there is no need for referential equality, I wouldn't overload it.
Is it considered clickbait if the linked page is good?
Removed: Rule 4. Good news is, more often than not, rewriting the same program/code often takes a lot less time.
But it isn't...
Not click baity enough. 
This came out real fast on Ubuntu 16.04 LTS. Was surprised to see the package pop up on last night updates.
Sounds up my avenue. Any reason to work with Roslyn is good fun. That and I work on a transpiler similar to Bridge.Net &amp; DuoCode in my day job.
We've learned that .net standard 2 is not worth the paper it's written on, that MS desperately wants to mothball .NET Framework ASAP, even though that will strand a great deal of enterprise customers that depend on functionality that won't ever make it into Core, that .net community outreach is basically lip service and they'll pivot regardless of what has been said... oh and version numbers are tough. It's a shitshow 
You're welcome!
&gt;The problem is that you're relying on people sticking to the pattern of not using null and using the Empty singleton instead, the type system isn't enforcing it, which is what you want; Is it? Sometimes you *want* to have a variable be nullable. You can debate about whether reference types *should* have been nullable by default, but the reality is that they are. There is a proposal to make reference types not-nullable by default (with compiler warnings if this is violated) but until it makes it into the language (*if* it does), you still have the problem that you can't use reference types without the possibility of them being null. &gt;so all usages of it by a dev can be treated with the appropriate caution. What do you mean by this? null isn't dangerous unless you try to access it without checking it first. Option&lt;T&gt; is no better - what happens if you try to access its value without checking for None first?
ah gotcha I put in something different for the name, thanks!
That's really nice of you Fancy Mammoth. I get it, people don't like the idea that they're being sold something. I employ coders for a living, I know they can be sensitive to anything that's too sales-y. I'll definitely take the feedback onboard but it's nice to have some positive feedback too. Thanks again :)
I mean... if VirtualVoidSK knows it EVERYBODY should know it right? Apparently he's the leader of the human Hivemind. 
Thank you. Let me also drop this here: [visualstudioshortcuts.com](http://visualstudioshortcuts.com)
Holy shit! Thank you...great resource, so much so I'm going to add it to the top of the blog post that's already up. Edit: It's now on the post.
You are welcome. It is a good source but it's not very easy to read. I have known about this site for a long time but I learned cool shortcuts from your post.
If I had to do it my first guess would be to see if I could make a simple Visual Studio extension that does this. 
That's an idea I didn't think of. Will look into it. Probably easier than some weird item template or powershell script.
You get the added benefit that you can deploy your extension with ClickOnce on a network drive and everyone that uses it will get updates automatically, so it's easy to add features down the road, or change your templates
You can create custom multi-file item templates.
&gt; .net standard 2 is not worth the paper it's written on Too early to say since it isn't even out yet. &gt; It's a shitshow Agreed. .NET Core was a good idea, but Microsoft's implementation of it and the transition from .NET 4.x to .NET Core (or netstandard) has been a shitshow. To me, it looks like the .NET team is flailing around due to community demands and corporate demands clashing. 
TIL I don't want to work at Atlas - Cleversoft.
Ahh, good old Goodwins law
You don't even need to do that; Microsoft already did that for us via the ["Paste XML as Classes"](https://msdn.microsoft.com/en-us/library/hh371548%28v=vs.110%29.aspx) command. /u/Asiriya, you can try using that command to at least give you an idea of what needs to change in your original data classes. Another option is you can deserialize to these auto-generated classes, then use something like [AutoMapper](http://automapper.org/) to convert those POCO objects to your legacy data classes.
Thanks for the info! It will come in handy when the need invariably arises again.
It is a lazy loaded property but if your are instantiating Asset directly then AssetType is null. If you don't want to set it in your constructor then you can instantiate it before attempting to set its value. var asset = new Asset(); asset.AssetType = new AssetType();
Thanks, that's great!
That sounds like a job for ADO.NET--create a command object, give it the text of your query and any parameters to go with it, open a connection to your DB, assign the connection to the command, and run the command to get the results. This may be a better question for a forum acquainted with Dynamics CRM or for .NET, in general, rather than C#-the-language.
 &gt; Too early to say since it isn't even out yet. Yeah, by that I'm just recanting that if ASP.Net Core 2.0 is not using Standard 2.0, because it defines a subset of what ASP.Net Core 2.0 needs, then what's the value? &gt; To me, it looks like the .NET team is flailing around due to community demands and corporate demands clashing. Agree -- mismanagement? There are plenty of examples elsewhere in other developer communities where doing this type of thing results in fragmentation (Python 2/3 the most premier example) BTW if you haven't seen it already, this is a good read: https://www.infoq.com/news/2017/05/ASPNET-Core-2
You want T4 templates. You can generate any textual content, including code and unstructured content. It's pretty easy to pick up and is fully integrated with VS. 
http://utf8everywhere.org/ &gt; Here’s reality. Saving half the memory is true only in artificially constructed examples containing only characters in the U+0800 to U+FFFF range. However, computer-to-computer text interfaces dominate over all other usages of text. This includes XML, HTTP, filesystem paths and configuration files—they all use almost exclusively ASCII characters, and in fact UTF-8 is very popular in respective Asian countries.
So, you're OK not having the entirety of the Unicode standard?
Try this basic tutorial to get you started https://blog.udemy.com/a-step-by-step-asp-net-tutorial-for-beginners/
What do you mean not having it? You can reach into it with the surrogate pairs methods? I'd certainly trade making it harder to work with these obscure characters for constant time indexing.
aha that's interesting.. so bc it is a lazy loaded property it's basically like instatiating a variable? I am now having a problem saying the newly made asset to the database when I reach the db.SaveChanges(); line I get an error saying "Validation failed for one or more entities. See 'EntityValidationErrors' property for more details." any idea why this might be? maybe I'm not doing something correctly before saving? I have this line right before the SaveChanges db.Assets.Add(asset);
Heh - we're saving advanced tips for the next blog post :D
Follow-up https://www.infoq.com/news/2017/05/ASPNET-Core-2b 
My favorite and one I use a lot is write cw then press TAB two times. cw Tab Tab Console.WriteLine();
well the thing is, if I just create a new asset the regular way by my create method, I don't need to populate all the "not null" properties.. and some of them I'm not using at all such as byte[] stamp or bool Archived so I don't know what I would do then to counter that. I do also have my primary key set as autoincremented which is why I never insert any column for AssetID in my excel spreadsheet bc I wanted it to auto generate that, and now that I think about it what were talking about rn wouldn't be the problem would it? or when adding a new asset to the database, it knows already to give it a primary key id? I just assumed it worked like that.
in all honesty, Ctrl+KC/KU is an atrocious shortcut. What's wrong with Ctrl+/?
If you have Web Essentials... Edit &gt; Paste Special &gt; Paste JSON/XML as Classes. Simply paste json/xml into it and it generates a class for you. Saves so much time if you're creating request/response classes based on existing definitions.
You don't need to worry about setting the ID. That will happen automatically. There is some other property that is marked as 'not null' that is not being populated. Or it could be on AssetType or any of the other navigation properties that you are setting. 
You can also give scaffolding tools a try. .net core I believe has stuff built in, but for anything else, maybe something like Yeoman. http://yeoman.io/
TL;DR - due to some bugs, they shipped a special-purpose build that only ran on Core 2.0, but the final version will run on the .NET Framework too.
Try up/down arrows - does that let you scroll through the suggestions to see more?
We hear you, and we're going to put out a more advanced article next time. Thanks for your feedback.
And that makes us sad.
Good find! Sharing with the team and stealing the credit for it. Jokes... :)
Totally stealing this idea. Thanks!
Well, I've dug into some of the windows UWP samples on GitHub and this looks promising. https://github.com/Microsoft/Windows-universal-samples/blob/master/Samples/XamlUIBasics/cs/AppUIBasics/Common/NavigationHelper.cs
I am all for that, I gave one of my own tips before. It doesn't mean I cant express my disappointment in the article.
Several of the things used here are taken directly from how my team is doing other methods. That Splitting of Disable and Add confuse me, They don't want to split the disable method and edit method because they want it to appear the same to the user. But breaking them into their own private methods seems a bit off from what I have learned. It feels like I am breaking that DRY i keep reading about by doing it. So i kinda deviated from their plan and made a call to our already existing AddDivision method, then just sent the list there as an array. Did I pass that information correctly for the disable method? I tested it and it works, but I kinda just threw the ref in there for good measure, as i thought it was already a reference type... I don't know. I feel like i've screwed something up here and that might be because I am just new to all of this and very self conscious about presenting it. Really just looking for someone to either say, "No that code looks nice and clean (or good enough)", or "That is hard to follow because (x), try (y) instead". And I do want to ensure I start off with good coding practices. So If anything is just bad practice/performance. It would be appreciated if you let me know that as well.
 Division_ref CurrentDivision = new Division_ref(); CurrentDivision = db.Division_ref.SingleOrDefault(x =&gt; x.Division_ID == division.Division_ID); No point in initializing `CurrentDivision` to a new instance just to throw it away on the next line. Just declare/assign it directly: Division_ref CurrentDivision = db.Division_ref.SingleOrDefault(x =&gt; x.Division_ID == division.Division_ID); ------------------ CurrentDivision = db.Division_ref.SingleOrDefault(x =&gt; x.Division_ID == division.Division_ID); Use of `SingleOrDefault` is suspect here. If it doesn't find a matching entry, it will return `null`, which will in turn throw a `NullReferenceException` on the following line: `if (CurrentDivision.WorkCode != division.WorkCode)`. Either check for the `null` case or use `Single` instead. ----------------- msg = Request.CreateErrorResponse(HttpStatusCode.Forbidden, "Im sorry user, Im afraid you I Can't do that"); return msg; * No point in assigning `msg` just to `return` it after. I would suggest you dump the `msg` variable and just `return` in each of the places you use it. For example: return Request.CreateErrorResponse(HttpStatusCode.Forbidden, "Im sorry user, Im afraid you I Can't do that"); ----------------- Several spelling and grammatical errors in the message strings. These should be fixed. ----------------- Disable(ref disabling, out successfullyDisabled); private static void Disable(ref List&lt;Division_ref&gt; disabling, out bool good) { try { foreach (Division_ref division in disabling) { division.Active = false; } good = true; } catch (Exception) { good = false; } } No point in declaring the `disabling` parameter as a `ref`. You don't change the variable reference in the method. Get rid of it. Ditch the `out` parameter here too. Just have the method return a `true/false` value and assign it to `successfullyDisabled`. The `try/catch` in the method is weird too. If you guys have some weird exceptions being thrown here on iteration or assignment of the `Active` property, that's weird. Also, you're swallowing all exceptions here and not reporting/logging them. Ideally you should catch the exceptions you _expect_ and let the rest bubble up. (Another sign of using exceptions for flow-control which is generally a bad practice.) ------------------- AddDivision(updating.ToArray()); Not sure why you're calling `.ToArray()` here. If `AddDivision` requires an array, consider tweaking it to use `IEnumerable&lt;&gt;` instead if appropriate. -------------------- catch (Exception) { msg = Request.CreateErrorResponse(HttpStatusCode.InternalServerError, "Error Editing Divisions"); } Same as above. Swallowing all exceptions without logging. It's fine to catch everything here, but you really ought to see about implementing some logging mechanism otherwise you'll never really know when/why errors are thrown.
Thanks a ton for your response, Now to explain/reaffirm I understand. CurrentDivision thing, I knew that. I dont know why i didn't do that. Will fix. Use of SingleOrDefault was chosen because thats what the team above me chose. They want a null reference thrown if it wasn't found in the database, Wouldn't this just get caught up in the catch statement? (That's how I understood it at least... first I've used it). Assigning then returning the variable is silly. Got it! I just copied how other methods where done, If this is bad practice I will be sure not to follow suit. (typo's where just me screwing around. I don't know what error they want to use. just translated "I'm Sorry Dave, I'm afraid i can't let you do that.) on the disable method, thats all me. They said private static void, so i wondered how the hell they planned to tell if it worked or not and just threw that together. As far as the ref goes, I figured as much but was not 100%, it worked so i figured it was ok. At least that confirms that suspicion. I think I follow on the try catch, I don't know why that would fail... of course i don't know why it had its own method to begin with i just went with the flow here. As far as logging goes, I don't know. I'm the junior here and am not involved in any of the decisions. I will read up on that. From what I have heard they are both new to webAPI's as well, this being the first so it may not of been thought of. I am calling .ToArray because I was told these methods would all consume an array, which was explain to me that an array was more efficient to pass to this webAPI. I have seen others use IEnumerable&lt;&gt; but I am not sure how to use it correctly, or how to tell if it is appropriate. This methods signature is the same as the AddDivision. Any words or links to find this out would be greatly appreciated. Again, Thanks a ton. You have no idea how much this helps me learn.
I would argue that over 50% of VS users wouldnt know half of these, or any other 10 tip article. From personal experience anyways.
I prefer to F12 on it and go to the framework source code, I dunno if thats VS or Resharper anymore. Or use http://referencesource.microsoft.com/ Still, MSDN is often useful.
Have you encountered its brother Ctrl+X? Love that guy.
Heres an advanced tip: most everything in the IDE is customizable. The context dialogs in the debug/regular code windows can be fully custom tailored, colors and themes, keyboard shortcuts, toolbars, etc.
Hmm? Ahh right, I usually do something like s.IndexOf(term, StringComparison.OrdinalIgnoreCase) &gt;= 0
Several of your points are probably my fault as a novice coder but I will ensure I don't repeat them from this point on, Thank you for that. For the others. The Try, catch alls were actually used by another and i just reproduced them, Can you link me to reading material on correct use? Honestly as the junior here I don't want to step on any toes, but if i can't provide a good argument not to, I am not going to stop this use. As far as The foreach loop, THANK YOU! I was trying to figure out how to do that and never realized I could add that condition in the foreach loop! Edit:*CurrentDivision is not declared yet though. Does it work like that?* I agree on the disable function, I don't see why its there, but I was just translating the words they said in a meeting 2 hours earlier. Maybe I did it wrong. But using the parameter like that was my noobie mistake, I will be sure to correct that. In the whole not reusing msg part, It has been used like this throughout the application and it felt weird to me, but what is the correct way to do this?
It's not at all a 2017 exclusive feature.
Wow this looks great, I can't wait to play with it... Why did i have to learn about this as i was going to sleep!
Im not. Perhaps I just happened to work with less experienced VS users more than usual, I dunno.
"paste ring"
Thanks!, I will be sure to check out the flow control and read up on Linq. I have poured about 200 hours into video training already, but have not yet been able to apply a lot of what I learned, Hence the simple mistakes where i didn't retain the simple information, just the concepts.
&gt; Another piece of general advice: dont just copy things verbatim. Its more difficult because you are newer, but will come easier as you learn. Just dont fall into the trap of not thinking through things logically, asking questions, and trying things out on your own. That, while it should have been obvious... I mean I usually do think things through on my own... Was not how I have been being taught... Which is actually why I have come to reddit. I was actually taught, "Hey, these guys know a lot Just copy what they did if you get stuck" And while it made sense so i did it, bringing it to light like that really highlights the stupidity of that statement. While you may have just greatly devalued my opinion of the guy who has been there a year longer than I have, you probably have just saved me from falling into a very nasty trap. If i do copy other methods, I'm going to make sure I fully (or at least mostly)understand what I am copying first and I will make sure It is the best way to approach that situation. Seriously, Thank you.
I think I'm going to have to download this and check it out. I love how they commented the heck out of everything so someone who's just learning all this like me can poke around in the code this creates to see how things are done. 
The `PixelFormat` of the image is Format24bppRgb. For reference, here's the entire declaration: `int bppModifier = bm.PixelFormat == PixelFormat.Format24bppRgb ? 3 : 4;` 
FUCK YOU T....oh, you're joking... Seriously though, I guess if we're going to stick content out there we've got to expect a kick back. Most people, just like in real life, have been very supportive and interested. Hopefully we've helped a few fellow coders out if nothing else.
I wish I knew about C# 10 years ago. I mean I wish I wasn't a GNU/Linux/vim/Pure C/OOP is overrated/Lisp - forever/etc fanatic 10 years ago.
I didn't use unsafe pointers, but the solution I found for getting the correct start address for the data was var lck = bmp.LockBits(... var startAddr = IntPtr.Add(lck.Scan0, (bmp.Height - 1) * lck.Stride); Look at the Remarks section from the documentation: https://msdn.microsoft.com/en-us/library/system.drawing.imaging.bitmapdata.stride%28v=vs.110%29.aspx
They even add TODO for you for things they can't do, for example if you add the Map page it will prefill a dev key and then add a message to the page and a // TODO (that shows in the TODO pane) reminding you to fill in your API key. Really slick!
if you look at the above comment I posted, it has the Asset class that I am using with all the properties and AssetType is actually nullable. but yeah I see your point but I just don't really understand why I can't make an asset this way bc I just tested it and I could make an asset with just description, name, user, asset type, and manufacturer. would it help if I override the SaveChanges so it can maybe give me exactly what might be wrong? 
The unreachable code being muted is a feature of R#. I don't think VS does that by itself. 
There's no good brute-force method to recognize speech. It all relies on machine learning, often neural nets, to recognize the patterns of speech that encompass different accents, voice register, etc. Your best bet is to use one of the available ML platforms. There are a few open source APIs as well as Azure and Google Cloud APIs.
Right I mean using Microsoft's inbuilt speech platform for C#/.net. I've been able to do *a lot* of things with voice and I get a general idea of how its set up so I can identify everything my program needs...except dates. 
Ah, not a novice. Sorry for assuming. I've been doing low-level ML for a while but I'm only just getting started with Azure ML, so I don't know it's quirks yet. That seems an odd gap that it struggles with dates specifically. What are you using for your training set?
The main argument all of these articles (this isn't the first on the topic) is that EF already implements the repository pattern by default, so layering additional abstractions upon it is unnecessary. This is mostly true, but one downside to this is DbSet's don't contain any way to "can" queries, so now you're putting data access logic all over your application instead of just saying "get me all active users, I don't care how you go about that" - and as soon as you are doing this what do you have? A repository, yay! Writing an extra repository layer on-top of EF isn't necessarily a bad idea, but I've seen some applications go into overly complex abstractions with them that don't do anything but add complexity (when, in reality, you could easily write an abstract base class in a couple dozen lines and be "good enough").
Oh no no no. I'm not training my own grammar! I'm nowhere near that smart! I'm using using System.Speech.Recognition; using System.Speech.Synthesis; And I just have a lot of choices and grammarbuilders and all that stuff going on. Here's the introduction/docs for what I'm using so we know we're talking about the same thing. https://msdn.microsoft.com/en-us/library/office/hh361683(v=office.14).aspx I just need choices for dates..and I don't really know how without spending 20 hours creating cases for every single date. 
If its web and you are going to be tight/granular about permissions, you can create it at install time and then you don;t need to grant the app permission to create folders
You may also want to look into Environment.SpecialFolder enum if you aren't already. Probably Environment.SpecialFolder.LocalApplicationData See: http://stackoverflow.com/questions/2501167/what-directories-do-the-different-application-specialfolders-point-to-in-windows
In addition to being in the above boat, is there any way to use EF and MVC that isn't unreasonably complicated without Visual Studio? Everything I've read - at least for EF - says it's a requirement. I don't use Visual Studio or any IDE for that matter, as I prefer the simplicity of text editors. I write my webpages by linking ascx pages and compiled libraries in the header of my aspx pages. I know that's old hat (I self-learned MSSQL, IIS, and asp.net/c# back in something like 2005), but it's way less complicated to me than the bulk of VS and all the files it creates with a "new project".
Take a look at some of the magical SQL these ORMs generate. Pretty shocking stuff. It helps to keep on top of your pure SQL language skills when the day comes to figure out why some generated SQL fails in performance. I ditched EF on the project I'm on. It just didn't work out well with the somewhat dodgey development practices around here.
Judging by the amount of repositories I see on real world project it is obviously not common wisdom :(
That's sort of my point. If repository pattern is old and busted, people should say it somewhere (lots of introductory materials around peddle for that, it's not like people choose it because it's the obvious thing to do)
Mine did this too, but switching the theme to a light one and back fixed it. I often get graphical glitches in VS2017 like the whole page going black needing me to change the size of the window to re-draw it uncorrupted. 
Can't you summarize? 
Thanks. I haven't seen vigorous criticism of the pattern before today, I kid you not (otoh been doing .net only 3 years now)
I was under the impression that once the task is completed than it's disposed of. I'm trying to make it so that it keeps running on a regular interval.
Windows task scheduler. Or a third party scheduler like ROBOT. 
i got the datetime to work, just had to do some changing beforehand. i used something called FromOADate method
It's configurable.
Now to be fair the pattern is not useless if done correctly. "Correctly" means not leaking the ORM by exposing IQueryable or accepting Expression&lt;T&gt; as an argument. Each query should have its own method in the repository instead of trying to expose the querying functionality to the business layer. The value is that you can change your data access layer to something not based on EF. Say you want to go full stored procedures in the data access. You can change the implementation of the repositories and keep everything else without change. However this abstraction is not cheap. It costs a lot of boilerplate code, problems with transactions and loading related entities, and not using convenient IQueryable. It should be used when we think it will pay off. Note that if you do repository like in the tutorials (either return IQueryable or accept Expression&lt;T&gt;) you cannot effectively change the implementation. IQueryable is not part of EF but it is damn near impossible to implement your own LINQ provider so you are effectively stuck with EF. At best you can switch to NHibernate but that's it. So you are writing a lot of code for repositories and creating annoying pain points and you do not get the benefits of abstraction.
I've never done that myself. We are getting dates in excel as strings like '2017/5/1' Try stackoverflow for some type of conversion method. 
But the instant you start using surrogate pairs anywhere, the bulk of your stuff stops working correctly. `Length` lies to you. `Substring` breaks. You have to literally blacklist portions of Unicode if you continue to rely on various `string` methods. http://stackoverflow.com/a/14942142/264712
Creating a folder is not a heavy operation. I would be doing a CreateIfNotExists every time I write to that folder for a few reasons: 1. You'll avoid having to deal with issues where the folder may be deleted/renamed/turned into unicorn dust between install/startup and file write time. 2. Simplicity. It gets hard to remember when things happen if they're all over the place. If you come back to this application in 5 years to debug a file issue with the SaveFoo flow you'll have to wonder: when do I do that create folder operation? Install? Startup? Login? It's just easy to write things as simply as possible so that when you'll start looking at the SaveFoo() function and hopefully solve it right there.
I still can't get it to work but you know what I think the problem might be... so for the properties that I'm trying to update that are lazy loaded such as asset.AssetType.Category.. I'm inserting the text value only which let's say might be "Computer Equipment" and not storing in the actual ID of Computer Equipment. you think that might be why it can't save properly?
yeah in my excel sheet I have it like '04/01/2017' but it converts it automatically to the 5 or 6 digit number excel recognizes as dates.
For those that haven't used them much before, DO has a vast number of tutorials in the documentation part of their site. Useful for specific things like initial server setup, utilizing git deploy, etc. They generally assume you're working over SSH, and you can usually find rather specific tech stack instructions (e.g. Ubuntu 16.04 LEMP). If you're using Windows I'd recommend the new shell (the awkwardly named Bash on Ubuntu on Windows) that was introduced last year. For migrations I use git deploy.
I tried EF 4 for a project about 3 years ago. I got some bits working, but it was slower than molasses. I wound up writing my own database-interaction layer. It's been running very successfully for several years now, and it's very fast. I've kept tabs on the EF "scene." In fact, I recently started an ASP.NET project with EF 6 to interact with the database that's now established. It should have been easy, since the entire schema was created with EF in mind, before I abandoned it. However, there's a lot to learn about Microsoft's particular MVVC pattern, and I'm also trying to integrate DevExpress widgets in different template formats, and the project has stalled while I work on other things. The main thing that makes me wary of EF is the fact that there's a middle layer at all. I'm referring to the "T4" templates that need to be updated, either in the database- or the code-first method. I've been using Rails as my main stack for 10 years. There's nothing like this concept in Rails. There's no re-importing on schema changes. The ORM just handles the schema by convention and reflection. The original ASP felt like a direct ripoff of PHP, probably because I had been using PHP for 10 years before I tried it, too. And not that that was a bad thing. In the same way, most of the paradigm of ASP.NET feels like a ripoff of Rails. Again, not that this is a bad thing, but they've left out the very best part: that there's no need to do anything to "setup" the ORM layer in Rails. I like this writeup. He makes the point I frequently bang on in discussions like this: Microsoft's own docs on their own things are often sorely lacking, and will just confuse the issue. He also points out that most people using a "real" SQL server are paying for stuff they don't need, and (extrapolating) would be quite happy to run MySQL or Postgres instead. This was a controversial position, 20 years ago, since MySQL didn't even have referential integrity constraints when I started using it, but that advice has proven itself superbly over the past couple of decades. Let the business logic handle the integrity. Also interesting to me is his compare-and-contrast between IEnumerable and IQueryable. Sounds exactly like the Rails stack's change to returning ActiveRecord::Relation so that further scoping can be applied. I will definitely keep this in mind. I read his first post too, where he says: &gt; "... whole departments of supposedly smart people fold their arms and simply come to conclude that EF is garbage, not that their usage of it is garbage." I'm going to argue that, if the problem really is as widespread as it seems to be (and it sure seems that way to me), maybe it is, after all, the fault of the stack, and not the people trying to implement it.
Create a new C# console application. In there, put in your code that executes the SP. Build that. Then, open task scheduler and set up a task to run once a day, that runs the .exe that your console app built. Alternatively, if you have full blown SQL server, you can schedule the SP directly from SQL Server Agent
Worst way : Write an app or service that had an internal timer mechanism that calls the SP. Why worst? Because it relies on that app or service being open, not crashed, with the required permissions, and that it's internal timer doesn't suffer from lag over any 24 hour period. Next : Write an app or service without internal timer, just runs the code and closes, scheduled to run by windows scheduler. Has slight advantage in that windows itself is responsible for starting the app even if it's been closed. Can be run by a system account even if you're not logged in. Still possible that there's a bug in the code that causes a fail or that it gets misconfigured to not have required permissions if you aren't logged-in at the required time etc. You can make this 99% reliable with enough testing, running it as a service that doesn't require any of your personal permissions etc. Best : SQL server has various maintenance tasks, schedules etc built in. If the server is running, they WILL happen. Use them.
What? There's nothing "functional" about this, and I'm pretty positive it has nothing to do with "functional programming" nor does it "illustrate the benefits of FP". We've literally rewritten the same getter the same way three times. Hell, I'll bet that the IL is probably almost identical. (The original example does two field lookups, whereas the others I believe will use a local variable and only one field lookup.) All we've done is toss out some of the more verbose syntax of earlier C# versions.
Another option I didn't see mentioned is [Hangfire](https://www.hangfire.io/). I have used this from an asp.net application to schedule daily jobs. You do need to ensure that the app pool is set up to be always on. It can run on multiple web hosts but ensure while ensuring each job is only ran on one server. It also has features to attempt the job multiple times, with an increasing delay between each attempt, if the job does not complete successfully.
Like the other guy said, here's not a damn thing about this that's functional Furthermore, C# is, at its core, an OOP language. People use c# because they want OOP. People don't use c# to get some hacked together facsimile of functional programming
I would probably just write a PowerShell script to call the sproc. Then run it in the task scheduler. 
`Register-ScheduledJob` if you don't want to leave CONHOST :)
What about Jenkins CI? That's what we use. 
Yeah, those weird MS links with parens in them
Oh shit that makes it way easier..thanks. 
I highly recommend this tutorial series: https://www.youtube.com/playlist?list=PL6n9fhu94yhUPBSX-E2aJCnCR3-_6zBZx He covers many important concepts. 
Are you referring to IBM's robot Scheduler?
Seem inferior to Rider?
Use Inspect.exe or some other UI spy tool and see if all 40+ items are even visible in the control tree. I actually ran into this problem yesterday with a combo box. We use a third-party infragistics control and it is difficult to work with. Since the controls use the MSAA proxy and the control's accessibility object wasn't implemented correctly for a combo box, I wasn't able to grab all of the items. I found that the only list items that I saw were items that were actually visible at that time, so my version of your code would only return the 7 visible items. If your problem is similar to mine, then when you expand the combo box, you are only going to see 23 items that are visible and you'll have a scrollbar for the remaining ones. Ultimately, I ended up having to implement the GetAccessibilityInstance() that returns a custom accessibility object that modeled the information I needed.
What I sometimes do is get the logged in user ID from the context. Then make a call to the database to check if the passed Id belongs to that user. If the id doesn't belong to the user, display a warning or error. 
DBA here. Though I agree that using a job scheduler in the database is probably the quickest and easiest. But it requires DBA intervention and/or extra privileges in the database engine. This can be problematic in some environments depending on security policies, DBA staff availability, etc.. Also, for example, SQL Server EXPRESS edition (which is free) does not have the SQL Agent job scheduler. With that in mind, I thought I'd give a second option. (I'm a SQL Server DBA so this will be SQL Server centric - though this technique should likely work in any database with slight modification). You are likely calling your stored proc like so: EXEC dbo.storedproc; ... and that is your whole SQL batch. You load that string into your SQLConnection and .ExecNonQuery(); You could also do something like: DECLARE @current_loop INT = 0; DECLARE @max_loops INT = 100000; WHILE (@current_loop &lt;= @max_loops) BEGIN EXEC dbo.storedproc; -- -- OPTIONAL - to get query status every loop -- -- this SELECT method gives you a new dataset every 24 hours -- -- (would make your c# code more complicated though) -- -- -- -- you could INSERT into a 'status' table here as well. -- -- -- -- you could do a RAISERROR ('status msg', 0, 1) WITH NOWAIT; and trap that error in c#. -- -- -- SELECT 'dbo.storedproc last executed at' AS DESCR, sysdatetime() AS EXEC_DATE_TIME; SET @current_loop = (@current_loop + 1); WAITFOR DELAY '24:00:00.000'; -- Could use WAITFOR TIME instead, if that works better for you. END; This has the benefit of never needing DBA access (to the scheduling engine). All you need to do from the app side of things, is spin that SQL query into its own thread (c# async functionality should probably work, I think), then monitor that SQL connection for errors. Have your code do the following: While (1=1) { Wait for &lt;time of day you want proc executed at&gt;; // if you don't care WHEN the proc is run, skip this step Connect to database with new connection; Run above query instead of your single stored proc call; If error, do any desired error handling. // Now, let the WHILE loop do it's thing and loop back around }; What this gives you is - the DB Engine is now handling the 'scheduling'. All you need to know from your end is that you have a single open database connection, with no errors. The DB Engine will handle the rest. Note this is just a different approach to think about. Could be better in some cases (as in the "Cannot have access to DB Scheduler" scenario). Could be considered 'worse' by some people (as you are not using a 'true scheduler' to schedule something). 
Slower, breaks syntax highlighting extensions and crashes randomly
Unless you want to generate the EF model from the DB I don't see why you would need Visual Studio and even then there are ways to do it. However judging by your other preferences I think you will like my way of not generating anything but just writing EF model classes to match the Database i.e. you make a table Product with ID, Name and Price and instead of generating a class you just go and write a class Product with ID, Name and Price.
Same, this worked for me though I just switched themes and back to correct it
You should actually read the error message. They're not *undeclared*, they are *unassigned*. Local variables must always be definitely assigned a value in *all* code paths before they are used, not just depending on some `if` conditions.
This is what I have experienced at work with our infragisitics combo boxes. ~~The selection item pattern will work for any of the items since they are being virtualized but if you expand then attempt to click items in the box it will not work properly until you bring the item into view.~~ Never mind we used the value pattern to get around this and set the combo box text to the item we are attempting to get.
"Ditto? Ditto, you provincial putz?" First thing I thought of, and the second was I should say Ditto more often. 
Not only low-hanging fruit, but plain wrong. Not functional, not a lambda (though the syntax is similar, a lambda refers to a function that is being passed around), and to top it off, the Singleton is a shit pattern.
Whether VS crashes seems to be dependent on the code you are editing, and timing.
They are making the non-nullability from TypeScript (with control flow analysis) available in C# as well, which is nice
It's long overdue and can't come soon enough. I just wonder how they'll deal with all the existing libraries.
One really nice thing JetBrains lets you do is annotate external code without modifying that code, just keeping that metadata in a separate place. This is ideal for this sort of problem because the community can annotate libraries without even touching the library, and those annotations can potentially be found and used automatically.
This has been a proposal for C# long before it was in TypeScript. There are a lot of problems with it in C# that made the proposal skip two versions. I kind of dislike the proposal. Declaring ALL current code legacy is not a good idea. My code was fine yesterday today it is legacy and should forever be compiled behind a flag.
Treating code that won't be updated to deal with non-nullability as legacy is fine in my books. E.g. in our codebase, we can use it in the DLLs under active work, while marking more 'ready' DLLs as non-checking legacy 
Can't you do that already?
Looks like I can! Disregard this post. http://i.imgur.com/qsuKEVj.png
Yep what I've found best is just a simple "service" layer they contains your business rules and logic. Makes testing simple and everything reusable without making it complicated. Now that EF is more mockable/testable testing it doesn't require you to have a full repository layer. In memory is nice :)
I'd start with the free Unity game engine. It support C# scripting, integrates with Visual Studio, and is well documented with a large community of novice programmers like yourself. It conforms to the .NET 2.0/3.5 standard using Mono (open source .NET alternative) as it runtime. You can then apply your newfound C# skills to more serious .NET proper pursuits later, but you can't beat game programming for motivating you to learn. It offers visual feedback unmatched by console-based examples.
That depends entirely on your perspective. Also keep in mind I mentioned both at the beginning and at the end of my post that this was merely an alternative, and that some might say (basically what you just said). And that the "right" way to do it is likely to properly use a properly designed scheduler. However, many non-DBA people (especially who are asking questions such as this, and running a single stored proc from code) don't know much about the database engine and what it is capable of doing for them - rather than them doing it themselves in code. (getting philosophical here) - I mean, truly, at its core, the relational database is basically just an exercise in "taking the hard stuff that is difficult to program, and giving the developer an easy button to make that difficult shit work, work well, and be able to scale from tiny to ENORMOUS and basically still work the same." This is stuff that is difficult to make work (at all), and significantly MORE difficult to program efficiently, and even moreso to make it scalable while still being efficient - think stuff like : IO prioritization, Multi threading with extremely tight thread synchronization, data organization and data usage/retrieval, dynamic data caching, multiple simultaneous user functionality with data access locking to maintain concurrence, network IO, etc. I would argue that from a *PROGRAMMER'S* perspective, something that they can run in the database and merely monitor for an error on a single SQL connection is a fairly simple and effective interface (new thread -&gt; connect -&gt; run sql batch -&gt; on error throw event -&gt; re-connect and re-run using an event handler). And if it doesn't cause problems for the database engine itself or cause any performance issues for other users, what is the problem? Keeping a database connection open and sitting in a "WAITFOR DELAY" state costs (significantly) less than 1MByte of data, and very nearly zero CPU usage (I'd anticipate it's probably on the order of &lt; 1M CPU cycles, total). It would literally never cause any issues for anyone in the database (unless the SPROC call itself is expensive or disruptive). And as long as you implemented "reconnect on disconnect" and "re-connect/re-execute on error" functionality, even shutting the DB server down would not prevent this process from doing its thing (and continuing to do its thing), without affecting literally anyone else. And the database code is neither complicated nor difficult to understand for a coder who is used to C#. It is significantly less effort and less complicated than "building and using Quartz.NET service to execute code on a regular and specified schedule", which was mentioned by others in the thread. Anyway, basically I was mostly trying to illustrate that sometimes by putting a (slightly) larger amount of "work" on the DB side of things can save you a lot of time and effort compared to coding-your-own. Many do not know this is possible, and I was mostly trying to spread knowledge by example rather than saying "THIS IS THE BEST SOLUTION EVAR".
I'd love to be able to go back in time 10 years and show that screenshot to every developer I could find and record their reaction Have fun!
I agree with your last sentence. The thing I'd not like to see when working on others code at work would be the things like `newString.Add(extraWords[2]);` what is `extraWords[2]` without me having to f12 on it then find the second index in the array? I'd personally just hard code the word "Thousand" or "And" in those situations because I'm lazy but they could easily be turned into an Enum too. Besides that the code is alright for a graduate I guess it's better than other stuff I've seen but if OP gets the job and has a mentor helping them I think their approach will be different in the future. Good luck with the interview OP! :) 
It actually changes the type of foo. So for example, you could then call a function and pass foo as a parameter, and the type of that parameter could be explicitly not nullable. Or you could return foo, and the function could explicitly return not nullable.
You'll need Mono to run C# on Linux/Mac.
&gt; I think the biggest issues I had with your code were the variable names and the decision to make many of them class-level fields instead of local variables. why? 
tempNum_1 could be named to numberLength for example as tempNum_1 doesn't really mean anything to me before going back up the method to see how it's being set
Yes, using ASP.NET Core. I'm not sure exactly how much of ASP.NET is supported in Core however. I wouldn't recommend ASP.NET for learning C# anyway.
tempNum_1, tmp, and tmp2 are non-descriptive. At first glance I found newString to be confusing since it's a list not a string. numbers and numbers1 seem like they might be related based on their names. I was just trying to give you some feedback, but I wouldn't sweat it too much.
What's the problem with infoQ and inaccuracies? I tend to like their articles even if I don't like the design.
So you no longer are forced to check that an object is null down the stack as it's implied it can't be null (and removes the compile error that it can be null before usage)? Not sure how I feel about this mostly because I haven't come across or can think of a problem that this would solve.
You can, but using a different toolkit. GTK# will do.
My approach would have used modulus arithmetic for the integer portion. String processing is longer in terms of number of lines. Though I would have used string processing for the fractional part assuming that 0.253 is appropriately read as "Zero Point Two Five Three" instead of "Two Hundred And Fifty Three Thousandths". The biggest oversight is that you don't handle out of range exceptions. If the number if greater than or equal to one billion or even simply negative, what does your function do? Even if that's not part of the requirement, it should be clearly documented in your method and you should provide error handling in case it pops up by throwing an exception. Always check for invalid or out of range parameters, especially in an interview setting. Stylistically, your capitalization style for names is consistent and your formatting/spacing is clean. Your comments have more typos ("positon", "transaltion", "conver", "percision", etc) than I'd expect. My personal preference is that I don't specify class members as private because that's the default. You could tidy things up by removing some of the references your code doesn't rely upon (eg. System.Web), but I wouldn't be too concerned about that. And lastly, precede your classes and functions with VS-style "///" summary comments to allow IntelliSense to give users of your code information about how it is to be used.
You can still have nulls, you just need to check for those in your code before trying to do something else with the reference. Your compiler will also know whether the function can return null, so you can guess that null is used to signal "not found" or whatever. A function that can't return null signals that errors are reported as exceptions or similar. 
That would be a bad reason. Examples you find on internet have been worked on with probably more time than you had, and with the help of internet.
I wouldn't stress about having a perfect solution. It may not matter for this interview. I hope it works out for you, but if it doesn't, then it couldn't hurt to spend some time on a site like LeetCode, Hackerank, etc. to get used to working on these types of problems.
How is an interface with default implementations different from an abstract class?
I'm not exactly sure how to. It's not changing the name of the textbox but rather the name property. How would I go about removing a textbox where I find it via the name property. Specifically from the grid. Am I over thinking this? Would it be as easy as: tB.Name("someName").Remove(); 
Oh, that makes more sense. 
Read Code Complete rev. 2
Sorry im in mobile and out and about but you can easily find an object and remove it many ways. I would do it via linq but u can iterate through the children till u find and remove it. I think you may be overthinking it but i tend to make test apps to prove theories and i think messing around will help understand it. I used to dynamically make buttons with diff backgrounds then make var = my selected button via findresource image names. Not how i do it nowbut shrug.
Thank you!
Both.
You need to remove the element from the gridview 
The interface cannot have state
Wrong subreddit? Console.Beep(554, 60000);
Nothing showing up as in you can't even enter the data? Add a Console.ReadLine() as a last statement, because the console will close itself once every statement is finished, that means the last WriteLine() will be executed, but you won't see it. 
Ha! I get it. Good show.
God damn I like that. I had to rewrite it in javascript just because I wanted to see it in action! I love recursive functions. I cleaned it up a wee bit too... function NumberToText(n){ if (n &lt; 0) return "Minus " + NumberToText(Math.abs(n)); else if (n == 0) return " "; else if (n &lt; 19) return ["", "One", "Two", "Three", "Four", "Five", "Six","Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen","Nineteen"][n] + " "; else if (n &lt;= 99) return ["Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"][parseInt(n/10) - 2] + NumberToText(n%10); else if (n &lt;= 999) return NumberToText(parseInt(n / 100)) + "Hundred " + NumberToText(n%100); else if (n &lt;= 999999)return NumberToText(parseInt(n/1000)) + "Thousand " + NumberToText(n%1000); else if (n &lt;= 999999999) return NumberToText(parseInt(n/1000000)) + "Million " + NumberToText(n%1000000); else if (n &lt;= 999999999999) return NumberToText(parseInt(n/1000000000)) + "Billion " + NumberToText(n%1000000000); else return "Numbers don't go that big, silly!"; };
Exactly. As soon as this clicks, you immediately wonder why it wasn't always this way. And the reason is because it hadn't clicked yet for language designers 20 years ago. :)
It's probably working fine, the application is just exiting too fast for you to read what is written to the console. Put this after the last Console.WriteLine: Console.ReadLine(); This will make the program wait until you hit the enter key before exiting.
Alternatively hit ctrl f5 instead of just f5. It won't debug but I doubt OP is using the debugger just yet. 
&gt;Why would Bob know how to save itself? I scratch my head a lot whenever I heard this type of question. Bob doesn't know how to actually save the data onto a disk , or over network or whatever, but it knows what/how to package its content/data for saving. Eventually, somebody will have to call the method to save the actual data onto the hard drive/on the net/whatever, but who will that be? Have you ever faced this kind of problem? 
&gt;What's the responsibility of Bob? Most likely just to hold the string `data`, which could be anything. &gt; Why does Bob need to know that saving is possible? Good question. Maybe it is the same as Serialization? Like [ISerializable](https://msdn.microsoft.com/en-us/library/system.runtime.serialization.iserializable\(v=vs.110\).aspx)? &gt;Yes, someone needs to save. But it should be something that takes care if the data. Shouldn't the class itself takes care of the data? Like in the case of serialization, we can pick what to serialize and what not to serialize due to various reason. (constructors takes care of it, default values, static values, etc...). I mean, shouldn't `Bob` itself knows how to handle its data the best?
As others have said, the program is executing and terminating more quickly than you can see. To prevent that, I like to add the following code to the end of my `Main()` method: if (Debugger.IsAttached) { Console.WriteLine("Press enter to quit."); Console.ReadLine(); } This causes the program to wait for the user to press the Enter key before terminating, but only if they are debugging. 
I think that the best way to explain this is like this: If Bob has any ideea on how to save data, and for example you change the transport from xml, to http request, you need to change Bob. If you have multiple similar classes like Bob, let's say Jimmy, which has similar functionality to save, you also need to change it. But if you use a third class called DudeSaver, you will only change this. This is easier to maintain, easier to mock for unit tests. Sry for the unformatted block of text, I'm on the bus...
But would that problem be solved with Dependency Injection though? I mean I can implement something like `DiskDataSaver`, `HTTPDataSaver`, `XMLDataSaver` and pass it in via the `IDataSaver` interface and `Bob` wouldn't know about it. I mean I agree that it is cleaner to have the separate class to handle this, but wondering if Dependency Injection may lead to SRP violation. 
This is not possible. Direct database access is not supported with in Dynamics CRM and really shouldn't be done. If you needed to deploy to Dynamics 365 you'd be screwed. What you could do to make life easier is create an Action and use the strongly typed objects created from the CRM Service Utility to do your query inside the action. Depending if you like Linq style queries it could make life a little easier. You can return the data out as JSON from the Action which will help with parsing to display in CRM. But seriously, unless you have a very specific reason or there really is no other way you shouldn't be writing stored procedures or writing direct queries against the database. It will circumvent all of the built in security features, logging and plugin execution pipeline.
Add this to your UserControl: &lt;Usercontrol x:Class="...SettingsView" xmlns:local="Namespace.Of.Your.SettingsViewModel" ... mc:Ignorable="d" d:DataContext="{d:DesignInstance Type=local:SettingsViewModel, IsDesignTimeCreatable=True}"&gt; 
it can crash if the user enters something not a number in age and current year. just read them in a string and check if there numbers and add Console.ReadLine();at the end to see your output
Just compare the line of code that causes the error to the code from the link?
IBarcodeReader reader = new Barcode reader(); Semicolons are used in csharp to delimit statements, meaning your compiler sees that line as two separate statements 'IBarcodeReader' and 'reader = new Barcode reader()' which it can't make sense of. The error later on is because reader hasn't been declared properly due to the above mistake.
Obviously you can re-map the keyboard shortcuts. But I actually use Ctrl+/ to toggle comment. So Ctrl+Ku and Ctrl+KC for explicit command and an easy way to just toggle with Ctrl+/ 
Removed: Rule 3.
You can try something similar to: var arr = new int[] {0,5,5,5,7}; var g = arr.GroupBy(n =&gt; n).OrderByDescending(x =&gt; x.Count()); Console.WriteLine($"{g.First().Key} occurs {g.First().Count()} times."); The GroupBy/OrderbyDescending will give you an enumerable of groupings with the largest group first, then the second largest and so on. This runs in sub millisecond times, so you shouldn't have to worry about threads.
I'll definitely do that. I completely forgot about Rider!
Oh, that's great news! I didn't even know pinvoke.net was editable. The Wayback Machine seems to have a copy for every page so that will work until pinvoke.net comes back.
You got the numbers but you need to have them as a specific data structure? Can you tell me what kind of structure you want the results to be?
I see where you are coming from and you are correct but that would work for simple POCOs. The kind of situation I am in is I have repositories over EF and I have a model e.g. `AggregateResponseModel` that has properties where data needs to be filled from separate repositories e.g. public class AggregateResponseModel { public PropOne { get; set; } public PropTwo { get; set; } public PropThree { get; set; } public AggregateResponseModel() { PropOne = _oneRepo.GetAsync(); PropTwo = _twoRepo.GetAsync(); PropThree = _threeRepo.GetAsync(); } } Since the repositories are exposing async methods I cannot use them in my constructor to fill in the properties. Since its not possible to await inside a constructor. I hope this makes things more clear.
Like I commented above, I use Dapper or EF, its abstracted behind my repositories and I need to fill properties with data fetched from multiple repositories as I shown above. I do not think its related to the ORM or is it? I guess I can have a SqlProc that will do the aggregation and I can get the aggregated data from database rather than making it in the program.
I would recommend using the database to aggregate the data. Create a view or procedure that aggregates the data and then map the query to your `AggregateResponseModel`. Databases are optimized for this kind of work and you won't need to get more data from the database than necessary.
It's achived: http://web.archive.org/web/20170506052610/pinvoke.net
I assume this is Unity from the Debug.Log line. If so, I'd try commenting those lines and see if that clears up the issue - Debug.Log causes a performance hit.
No idea why posts like this get downvotes.
You can use var newArr = g.SelectMany(x =&gt; x).ToArray(); to create a new array containing 5,5,5,0,7... if that's what you want. The "IGrouping" returned by the .GroupBy method is a bit confusing to use initially. A great way to learn about it and to play around with it is to use LinqPad and it's marvellous ".Dump()" facility. (It's what I used to test the code above before pasting it in my post.) With it, you can see that the return of the .GroupBy looks like [this](https://imgur.com/a/49g8E) 
I have a feeling you're correct... Thank you very much! :)
Thanks for asking.. I thought it was the way of the dodo.
*twitches at wrong order of Assert.AreEqual arguments in the first animation 😨 Edit: after reading, came back to say: great article! 
If when you are parsing the json array into a c# List and you convert the json objects directly to c# objects do: var sortedList = listOfDataObjects.OrderBy(i =&gt; i.start);
I'm not sure how helpful this will be but have you heard of view model locator? You can use it for instantiating your VM through a property (the locator can be an application level static resource) which can allow you to have more control over your VM life time.
There is a manifest file you can include that lets you run the application in administrator mode, which is probably what you need for the run-as. I haven't done what you are doing, so I'm not sure. http://stackoverflow.com/a/6413024/5582849 has a discussion for that.
psi.Verb = "runas"; Wont "work" if "UseShellExecute=False", and you cant "Run as another user" if its true. For some reason i can start Calc.exe and Notepad.exe, but it still shows as my current user. If i try and launch any other application, like Firefox, it tells me i lack admin priv. 
I wonder why they wrote a custom tool instead of just configuring something like style cop and fx cop? 
AFAIK there are [actual Roslyn analyzers](https://github.com/bkoelman/CSharpGuidelinesAnalyzer/blob/master/src/CSharpGuidelinesAnalyzer/CSharpGuidelinesAnalyzer/Rules/ClassDesign/AvoidStaticClassesAnalyzer.cs) being used, or at least that appears to be the case based on popping into the [linked repo](https://github.com/bkoelman/CSharpGuidelinesAnalyzer). I've only been looking at it for ~10 minutes or so though.
I don't think I fully understand what your trying to do. Can you give some more details. From the post I just kind of thought you were trying to query a bunch of data so you could show it in a more efficient way through a web resource or something. 
For those who want to cut to the chase, [here are plain English descriptions](https://github.com/bkoelman/CSharpGuidelinesAnalyzer/blob/master/docs/Overview.md) of what the analyzers are actually looking for. Some are of a decent quality, while others like `AV1115: A method or property should do only one thing` are... questionable, at least in their current state: &gt; This analyzer reports members that have the word "And" in their name.
&gt; AV1008: Avoid static classes (LOW) So we're supposed to create new `Math` objects every time we want to calculate the cosin of an angle? I hate the "static classes are evil" bullshit. 
&gt; AV1500: Methods should not exceed 7 statements (HIGH) Methods should be limited in the amount they do, not the number of lines it takes to do it in. You can have a 3 line function that does 6 completely unrelated things or a 50 line function that does one thing really well. For example, I have a data transformation function that needs one line per column. There are 18 columns. How many needless private methods do you expect me to create?
&gt; AV1537: Finish every if-else-if statement with an else-part (MEDIUM) if(param == null) { throw new ArgumentNullException[...] } else { //it wasn't null } Are all of these rules just from some kid's blog? 
That or if you have to use C# for a project that deals with a lot of SQL data, check out SSIS
Because each should be considered and discussed separately. One can't have a meaningful conversation if the debate is reduced to "all of X is good|bad".
Maybe HIGH is too much, but it could break compatibility with a method, if the parameter names change. Without named parameters only the signature matters and it will only start failing to compile if the signature changes. 
This guy is evolving the game.
I'd like to see a big project that hits these marks.
I think named arguments aren't really the problem. Default values are. Specifically default values on override-able members. It is possible to specify default values for example on an interface and on a class and they can be different values: public interface IFoo { int Bar(int baz = 1); } public class Foo : IFoo { public int Bar(int baz = 2) =&gt; baz; } We have a rule: you may only use default values on a sealed method which does not override a parent member, doesn't share a method name with any other member and almost certainly never will. In practice that means we might use them on certain static methods but probably not (I can think of 2 in our whole codebase). Named arguments themselves though are great for documenting inline constants at callsites among other documentation based usages.
Awesome, informative article. I'll be incorporating these principles at work. My testing generally consists of Print_r("You made it"); exit(); note: I learned C# and .NET mostly at school but got a job doing PHP development, hence the syntax :/
Dapper
I applaud the effort and the fact you have made this public even if I disagree with a number of the guidelines. 
So?
Only applies if there is an else-if. It is to make sure default/all cars are captured. It sucks...I remember for some man rated software (in C++) we had to create an invalid error code just for things that should never happen in code. On the other hand...We did catch like 10 bugs because of those error codes.
I have heard of it, and also checked it out when I was learning but the results of my google search were always about someone using some kind of library but I wanted to learn the code behind it. I guess I'll go check it out again and dig deeper now.
Im assuming you're using WPF here not Windows Forms? Could you post a screenshot of what you have (code and/or the form front end) so I could get a better idea of what youre trying to accomplish? Im seeing that you want to enter a parent object, then multiple child objects but have the child objects persist the same associative ID or whatever property you choose? Couldnt you just have the views be parent/child-aware and be able to hold that value you want to be common accross a set of child records inserted each from another views? Also are you using MVVM and bindings and commands? May be completely off base from your question here, but if you could post an example i could get some better context!
I'm ok with default values only if the default is `default`. That is to say zero/null/false. If the default is 2 today, how do I know that it shouldn't be 4 tomorrow? 
I have to echo your sentiment. The specific rules need more thought, but the effort is noble.
Then you have to keep track of said annotation file. (Probably the same one that Roslyn/FxCop uses, but still its a pain.)
I guess I haven't run into that issue yet. I would assume git would make sure such metadata is recorded. Like you said, this is probably what tools like stylecop use, which has seen pretty wide adoption. Is it commonly a problem to keep track of the metadata? With CVS/git I assumed this is kind of a set it and forget it thing.
This rule actually makes sense. Any decent IDE will allow you to collapse blocks, and this format helps prevent vulnerabilities like Heartbleed (which was caused by an errant statement which should have been in an if block, but wasn't because it was a single-statement body).
I just private messaged you :)
&lt;333
Very useful, thanks for the link!
Netstandard 2 is a monolith again, so the deps will be cleaned up
Web developer mindset. Anything more than 8 months old is obsolete and not worth knowing.
Wow. I think this is the first time I saw a blog post on testing that legitimately needed mocks. (As opposed to the "OMG databases that are 100% in my control are too scary" attitude I usually see.)
4.3 is the assembly version for the core variant of those assemblies. AFAIK, System. assemblies in the traditional .net version have assembly version 4.0, for any of .net 4, 4.5, 4.6 and 4.7.
Thanks, I'll take a look at them
If it is WPF, here is a great answer to your question: http://stackoverflow.com/questions/10892233/add-delete-button-for-every-row-in-datagrid Here are some other good resources for datagrids: https://wpftutorial.net/DataGrid.html https://www.codeproject.com/Articles/30905/WPF-DataGrid-Practical-Examples 
The first things to get your head around in my opinion are: [Layout/panels](https://www.codeproject.com/Articles/140613/WPF-Tutorial-Layout-Panels-Containers-Layout-Trans) In Winforms you're used to explicitly stating where everything should be. WPF is more about choosing the right panel for the job and letting WPF make most of the decisions, then just tweaking anything that doesn't do what you want. You'll typically be using Grid/DockPanel/StackPanel most of the time. [Data Binding](https://www.codeproject.com/Articles/18270/A-Guided-Tour-of-WPF-Part-Data-binding) Once you get the hang of data binding you'll wonder how you ever got anything done in WinForms. It just makes life so much easier. No more fiddling around adding data to controls, you just bind it then work with plan ordinary code/collections. The data binding tutorial I linked there is part of a series at [from here](https://joshsmithonwpf.wordpress.com/a-guided-tour-of-wpf/). Once you get a grip of some of the basics, I'd recommend looking into the MVVM pattern. Rachel Lim's articles are very good - [A Simple MVVM Example](https://rachel53461.wordpress.com/2011/05/08/simplemvvmexample/) followed by [Navigation with MVVM](https://rachel53461.wordpress.com/2011/12/18/navigation-with-mvvm-2/)
Fair warning... code-analysis in Roslyn doesn't fully work yet. You can hook it up but you will find numerous gaps and issues.
I hope you told them you would no longer consult for them?
It was a three-week engagement, I left their offices after three days, delivered a report two days later and never billed them. 
Oh that would be great! 
I applaud /u/grauenwolf for mentioning so many of the problems, but considering [this issue](https://github.com/dennisdoomen/CSharpGuidelines/issues/6), open since 2015, where the author shows that he doesn't understand how C# works , I'm not sure it was worth the effort ;)
Try cloning the project and editing [this file]( https://github.com/Tyrrrz/YoutubeExplode/blob/master/YoutubeExplode/Models/MediaStreams/MediaStreamInfo.cs). Make sure you open the actual project so that IntelliSense works, because I suspect it's the main culprit. There's a static dictionary towards the bottom, when I copy and paste an item to make a new one, and then edit one of the passed enum values, the VS just freezes. I actually use a separate text editor to edit this file now, lol.
In conjunction with Dependency Injection we can depend on container's lifetime (singleton) instead of static class. Static class are evil, because we can't test it, mock it, replace it. Let's say I want to check in test, that in some scenario Math.Cos was called. If our code depends on inteface or Math.Cos is virtual, no problem, we can mock it. Static classes are quick and dirty, in some cases there are fine, because it's irrelevant to test if Math.cos was called, but often they block possibility of testing specific behavior without rewriting code.
Mentions "Feature**s**", then presents a single one.
NASA says this in their Java coding standard. They claim it forces you to think about what could happen in case not all previous alternatives are chosen.
`(post as IEnumerable&lt;Feature&gt;).Single()`
Yes and no. You reference it as a monolith, but I think it only deploys what you actually use from it.
They're not allowed to use this one feature. 
`(post as IEnumerable&lt;Feature&gt;)?.Single();` 
Upvote for advising they do not couple the code to the database. So much pain awaits especially in testing and scaling.
In which case you should do an explicit cast. This is not about preference, it's about clear code and intention. I expected better of you robhol. :-\
If you have 10 buckets and 100Hz sample rate, each bucket represents a band of 10Hz. Also FYI it isn't really amplitude per se, more a function of some trigonometric calculation that eludes me that roughly corresponds to amplitude.
Ah okay - thanks for the help, I'll try and see if I can figure it out from this :)
From my understanding, you always need admin rights to run another process as admin. You can only choose where and when you get those initial admin rights from. For example, this [stack overflow post](http://stackoverflow.com/questions/2488632/win-c-run-app-as-administrator-without-uac-prompt) presents some options.
There are a few libraries with their own implementation but honestly coding it yourself is probably for the best. It can be extremely simple, for example: public class ViewModelLocator { private MainWindowViewModel _mainVm; public MainWindowViewModel MainVm =&gt; _mainVm ?? (_mainVm = new MainWindowViewModel()); } The above example would be a simple locator that saves view models that have been created (storing state). I don't know whether it's best practice or not, but usually when I'm working with MVVM I wouldn't save the view model and instead I'd just construct a new instance as needed (e.g. for construction of each view). Any data I wish to persist between views is held within a model that the view model has a reference to. I would then use dependency injection at the view model locator level to construct the view models and pass them any models required through the constructor. The DI container I use can be set to give the models a singleton scope, allowing the model instances to persist and be passed into new view model constructors. View models can then have their own child view models. For example: I have a page MyView, and within that I have a control called MyControl. My control might have it's own view model, so I could set it up so the locator creates MyViewModel, and MyViewModel has a property within that creates MyControlViewModel and stores it. This way, while you are still on the same page, the child view model is saved, but when you navigate to a new page and navigate back, a new MyViewModel is created with a new MyControlViewModel child.
Thanks so much! 
Can you give an example of a gap or issue? I've made dozens of analyzers over the past two years and haven't had any problems doing what I wanted to do.
Have a look at [this article](https://www.codeproject.com/Articles/1018661/Writing-a-XAML-application-for-X-with-UserControls)
It may have escaped your notice, but this was an off-hand comment, an admittedly poor joke, and certainly not a code review request. Bitch at someone else.
&gt; when you don't have an IDE that includes auto-formatting Or when someone does a merge without paying close enough attention. At least three times I've had coworkers do merges that would've resulted in compiler errors if block statements were used, but ended up making it to production with incorrect behavior. Not trying to say that justifies it, just providing another perspective. Personally, I find it more readable to always use block statements, and I rarely feel like my methods are long enough to be concerned about vertical screen space.
As an aside from the other responses here, you can read up on "Frequency domain analysis" and "spectrum analyzers" as it might give you a better perspective on what is happening with FFTs and provide you with some ideas on how you can use the FFT's frequency domain information to detect atrial fibrillation.
I'll try that as well :) Thanks a lot!
I am always on the lookout for a way to use XAML in Linux. Thanks so much for sharing this!
that's the problem though, I don't want to set it. I need the values to be dynamic, if they ever change it changes on it's own. 
It is WPF, and I will check those out, thank you!
Quick question though, on that link that you sent me from stack overflow. How do I tie the back end code to the front end? Sorry if this is a dumb question, I just haven't done this before. 
1. At present there is no support to skip generated code. Which is particularly awful if you are using WCF, non-code first Entity Framework, or some other Microsoft provided tool that generates the code for you but does it in a way that violates numerous rules. 2. A few of the rules (sorry I don't have the rule #'s at my fingertips) simply don't run any more. After VS 2015 Update 3 we noticed that some rules were simply not running or triggering. We have left the rules turned on but the team is trickling in issues because it isn't catching violations. To be fair I do think that once all of the kinks are ironed out of the new analyzers they will be superior to what we had before (FxCop and StyleCop separately). However, at present I am supremely disappointed (although not shocked at all) that MS decided to drop support for the old versions when the new ones weren't fully ready to replace them.
Yeah, Roslyn is pretty great but the quality is still a bit bumpy in spots. I attribute it to Anders leaving the C# and Roslyn teams to go off and do TypeScript. It seems, at least to me and my team, that in MS's zeal to get to open source (and cross platform) that they are using the public as alpha (not even beta) testers. In general, their quality of nearly any released thing seems to be way down. For instance, we had continual issues with VS 2015 until Update 3 came out... which solved our IDE crashing issues but broke some of the analyzer versions of some FxCop rules. Kind of a win/lose. Maybe that's just a consequence of getting rid of the test role and only having "engineers"... who knows.
https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2
Looking at your design here (which I still don't like but whatever) but there's no reason you can't just have tasks as the property types. You didn't specify a type so it won't compile but you could have something like: `public Task&lt;object&gt; PropOne { get; set; }` then when you set it in the constructor do it as you're doing it above. When you want to use the property you can just do: `var result = (await myClass.PropOne).ToString()` For example. 
var inputs = new string[4]; for (int i = 0; i &lt; inputs.length; ++i) { Console.WriteLine("Please add a new item:\n\t"); inputs[i] = [Console.ReadLine()](https://msdn.microsoft.com/en-us/library/system.console.readline(v=vs.110).aspx); } This is untested but should work. This subreddit isn't for doing your homework, you should learn to use Google properly before learning to program. A search as basic as "C# read user input into array" would probably get you your answer. 
hmm okey, i'll totally look in to this! thanks for your time :D
Wow, thanks a lot for taking your time to write such a lengthy reply! This was certainly really helpful, and made me rethink the way I am currently counting the heartbeats in my application :)
Reading the documentation would probably be more useful since you already know c#. [Stacked overflow](http://stackoverflow.com/documentation/c%23/1936/c-sharp-7-0-features#t=201705161824403371135) [MSDN](https://blogs.msdn.microsoft.com/dotnet/2016/08/24/whats-new-in-csharp-7-0/) 
My only advice is that depending on the FFT library, different conventions are used with respect to how the frequency spectrum is represented. Some libraries normalize with respect to 0 to 2*pi, some to 0 to 1. The documentation will usually explain this for you. In the event that you cannot figure this out, create a dataset that combines various different frequencies and pass this dataset into your FFT algorithm. You create this dataset so you should know the frequency spectrum you created it from. This will help you figure out what the FFT output represents.
I'm working on just such a book, but who knows when it will be ready. In the mean time, here's a sample chapter for C# 7. https://www.infoq.com/articles/Patterns-Practices-CSharp-7
Following up, I also found this - http://stackoverflow.com/questions/1405739/mvvm-tutorial-from-start-to-finish
There are multiple ways of solving this. This is a classic hierarchy data structure. Assuming this is for a course/school, they'll want you to store the data in the hierachy instead of a flat list. So you can used a SortList class, and use the ID as the key. Then your object should have a Children of type SortList to be able to add the children as you read the input. Finally to output, you should do a recursive function which outputs the current value and if there are children call the recursive functioning. Hope this helps.
*C# in Depth 4th Edition* by Jon Skeet is still a MEAP (preview) from Manning: https://www.manning.com/books/c-sharp-in-depth-fourth-edition Part 2 covers C# 5 Part 3 covers C# 6 Part 4 covers C# 7 (and beyond) The previous editions have all been excellent resources.
Visual Studio Code is more like a fancy text editor (think Sublime Text). It can be used for C# development, but isn't optimized for it. You'll want to use the regular Visual Studio IDE; I don't recommend VS Code for your purposes.
Thanks ! I really want to program so i don't think that unity will be useful for me. Thanks for your advices, i've just installed visual studio community 2017
No sweat. 
Since I do not want to pollute my POCO persistence models with ORM specific attributes, I strictly use the fluent configuration approach.
Fair enough, I felt this was the proper way to go but didnt really have a compelling reason for it. 
For #1, does the generated WCF code not have a `GeneratedCode` attribute? I thought any code with `GeneratedCode` or `CompilerGenerated` attributes would be skipped by Roslyn-based analyzers. For #2, I remember reading that some FxCop rules were intentionally not ported, but don't remember where I read that. Could also obviously be a bug in the Roslyn-based implementations. Either way, FxCop rules no longer running doesn't seem like a reason to not implement your own Roslyn-based rules. If anything, it'd be a reason to not use newer versions of VS...which I guess is worse. All things considered, as someone very familiar with StyleCop internals, I've been thrilled with the Roslyn-based analyzer functionality so far.
Monogame is good if you like to have more control and less overhead from using a game engine like Unity. You can make cross-platform games with Monogame but afaik you need to write some things per platform and/or define a few settings per platform. If you just want to learn C# then creating a simple (probably 2D) game in Monogame will get you the most hands-on on programming. Use Unity if you don't want to stick to only programming and want to go more all-around (modelling, audio and programming).
Here you go Csharp 6 https://github.com/dotnet/roslyn/wiki/New-Language-Features-in-C%23-6 Csharp 7 https://blogs.msdn.microsoft.com/dotnet/2016/08/24/whats-new-in-csharp-7-0/ Possble future features https://github.com/dotnet/roslyn/blob/master/docs/Language%20Feature%20Status.md
Personally I love to spit through the language specification (see the draft for version 6 here: [https://github.com/dotnet/csharplang/blob/master/spec/README.md](https://github.com/dotnet/csharplang/blob/master/spec/README.md). Edit: there is no spec for C# 7 yet, but you can track the proposals here: [https://github.com/dotnet/csharplang/blob/master/proposals/README.md](https://github.com/dotnet/csharplang/blob/master/proposals/README.md). Be sure to read the readme to know how to interpret this repo.
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [dotnet/csharplang/.../**README.md** (master → 7f64711)](https://github.com/dotnet/csharplang/blob/7f64711c0a39defe44e07992f34b64d31ca5ac6f/spec/README.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dhndzl1.)^.
You should use Unity. It's just a collection of libraries, tools and assets that will help you out. If you don't want to use them, it's all still done with ordinary C#. But if you really don't want to use it for some reason, you can [Learn C# by building a simple RPG](http://www.scottlilly.com/learn-c-by-building-a-simple-rpg-index/). If you do this first, you'll realize how much work goes into even simple games so you'll at least understand why you should be using Unity.
thanks. Do you know some websites to practice c# programming like codewars ?
Avalonia
This is the right answer, and can also be found on the MSDN with a quick Google search.
I think pulling the integration out into a 3rd application that runs periodically would be a little easier if your just starting. You can make it run at intervals to pull any changes and push it to the other system. Once you have that done and you find that you need or want realtime integration it should be easy to modify the existing code. 
C# in a Nutshell is my go-to favorite. It's written like a manual that can be read like a book. 
No worries. I know that *eventually* they'll get everything working.
Ugh. You do realize that users can write their stuff in any language that knows COM Automation? That's .net , Javascript, C++, C, Python, Perl, Ruby and much more. You seem to be underestimating the depth of the field there. But I agree, people will use VBScript for this -a lot. How well do you know what your users are doing and how much of the code they have? I am asking because what you're attempting is a breaking change for them and their stuff. If you can't break your users or get them to migrate , will you will need to continue providing both ways to automate your stuff, in which case, what have you achieved?! As for the access to types inside your software - a late-bound language does not need it, meaning e.g. all-out "dynamic" C#. That's obviously horrible. What you get with COM-based automation are the type libraries, which non-scripting clients will use. You can provide that in .NET - write interfaces-only assemblies which you can reference from wherever, and have methods to create concrete implementations that hook into your code, which implements the required interfaces. All in all - what you have now is **way** bigger than what Roslyn normally does. What I would consider (but hardly ever do to be frank) in your place would be to rewrite the stuff in C# but keep the existing automation as it is. That also could be a first step to a more thorough migration to .net.
Interesting! Is there a certain code element that benefits most from a custom highlight? The example screenshot looks too colorful to me. I wonder which elements to change so it actually improves the readability. What are your preferences? 
*Thank You for your response and time!* I'm working with MDI, so my code looks like: * ActiveMdiChild.Controls["RichTextBox1"].Font = new Font(RichTextBox1.Font, FontStyle.Bold); **However, it won't allow me to do "RichTextBox.Font", it forces me to do "RichTextBox.DefaultFont" (which ruins the whole point of my Text Editor program).** *EDIT: The error message shows "An object reference is required for the non-static field, method, or property "RichTextBox1.Font"* 
 var rtb = ActiveMdiChild.Controls["RichTextBox1"]; rtb.Font = new Font(rtb.Font, FontStyle.Bold); *richtextbox1* is *his* name of the r.t.b. your "name" is *ActiveMdiChild.Controls["RichTextBox1"]*
I agree with /u/Gotebe. Given that UWP is built on top of COM and both .NET Framework and .NET Core can handle COM just fine, a better path would be to ensure your application doesn't have any issues with COM written in C#.
I still need a scripting interpreter (preferably C#) that can call into the host so what else should I use besides Roslyn. It seems most developers are shifting over to Roslyn though. VBscript is simple but limiting. I'd like to be able to make use of the huge .NET library in scripts.
C# in depth changed my perspective to programming and understanding things. It should not be seen as just a C# book.
I'd give [Unity3D](https://unity3d.com/) a try. There are other engines using C# competing with Unity (like Xenko), but your safest bet as of now is Unity thanks to its maturity and enormous user base. Visual Studio 2017 and Visual Studio Code are your typical IDEs / text editors when working with Unity. I personally use [JetBrains Rider](https://www.jetbrains.com/rider/) because I find myself a lot more productive in it. Try and see what works best for you. By the way, what environment / engine have you been using Lua in?
7 screenshots of settings, 0 of actual usage. 
Explain more about Resharper and arse sticks? I'm baffled by VS without it. Part of me wishes MS would just buy Jetbrains and incorporate it into the core of VS.
I highly recommend using Rider from JetBrains. It's a cross-platform IDE built on ReSharper, and in my opinion it beats VS for C# development. Core just works with it, and it supports both Mono and Core. If you haven't already, swing by the discord channel - there's a number of us there who use Linux for C# who can give you some pointers. 
I use lua with LÖVE. I'm very sceptical to use unity because i have read many times that if i realy want to program (and be a programmer) unity will not allow me to practice my skills and will learn me things that are not useful outside of unity... Also, another question, what do you think about sololearn ? It is a good place to learn how to program in c# if i practice ? Some peoples says no, others yes because sololearn give the bases to practice...
Ok thanks ! So unity will be useful even if later, i want to work in desktop application development and not games ?
That's strange because i've read the totoal opposite but thanks. I don't really know what to use between java/libgdx and c#/Monogame/Unity but i think that i will use C# and unity (and maybe later give a try to monogame). Thanks !
&gt; I use lua with LÖVE. Heeey, my favorite Lua framework! Good old days! &gt; I'm very sceptical to use unity because i have read many times that if i realy want to program (and be a programmer) unity will not allow me to practice my skills and will learn me things that are not useful outside of unity... Learning C# (even the outdated version Unity uses) will benefit you no matter what. There are som game / engine concepts only usable in Unity, but as for the programming itself, you can do things in many different ways. You can bend Unity to your will; it will not prevent you from practicing your skills. No idea why would anybody say that. &gt; Also, another question, what do you think about sololearn ? It is a good place to learn how to program in c# if i practice ? Some peoples says no, others yes because sololearn give the bases to practice... You can get solid basics just by following tutorials (both pure C# and Unity-related). I'd recommend going solo. You will most likely learn all the stuff the hard way, so it will take you more time, but it's for the better -- you will hardly forget the lessons this way. I picked up on some advanced concepts by talking to veteran coders, so it's also very beneficial to be around experienced guys.
Thanks ! So i will learn on sololearn and practice, i have found some website like codewars with some programming challenges.
Good luck and have fun! Think of unity as a big packet of addons for c# to help making games easier, you are still using the language for everything, but you dont have to write your own physics engine etc. If you need any help just ask! 
No problem ! Thanks, have a nice day !
Thanks !
Thanks :) I quite like the look of Mono so I might try that!
Thanks :) I think VS Code will probably be the closest to VS I'll get too. It's pretty nice too and has tons of plugins. So I might just go with that! 
I'm a .Net developer and my main OS is Ubuntu. This might not be the answer you wanted, but I found the best solution is to run a VM with Windows in it. I virtualise Windows 7 with Virtual Box and it works flawlessly. I gave it 4 GB of ram (out of 8 that my laptop has) and Visual Studio 2015 runs quite smoothly (I don't use resharper, though: that might slow it down a notch). VMs are not everyone's cup of tea, but I like this solution, and it offers a few advantages: I particularly like having a dedicated environment for development, and also it's easy to backup and revert the state of the virtual machine if something goes wrong. For my next project, though, I wanted to try and use Visual Studio Code and .Net Core, even if I know I'd miss the Visual Studio goodness.
&gt; Stacked overflow Is that the overdone cleavage porn site?
It's a godsend when you're trying to follow the logic in a VB.net codebase where they insist on not using parens for parameterless method calls.
Just be aware that Unity is (at last check, but to be fair that was almost a year ago) still using an ancient Mono compiler and libraries, and doesn't support modern C# - although they've been working on it - with more momentum after Microsoft bought Xamarin. They should be close to done with that - if they aren't already. What's much worse, though, is that there are a plethora of bad practices in the Unity API, which *will* encourage you to use the same bad practices in your own coding - when the strangeness doesn't just confuse you. Everything from a reliance on string constants and string lookups; encouraging public fields rather than properties (although you can get around things to use properties instead, that will often replace bad practice with confusion); using mutable structs (for performance reasons, likely); doing crazy operator overloads (overloading == for null checks in a misguided attempt at developer friendliness); not to mention other "magic"; bad API design in general (naming, parameters, inheritance, and so on) etc. etc. Which is "fine" to some extent - but not the ideal environment to learn C# in.
Thanks... Hmm I don't really like game engine so first, i will learn a language, practice it and go for monogame i think. I really want to be a programmer, maybe a game programmer but first a programmer.
I'll do a cum right on your face
Double check the credentials. Because that's basically a copy paste from my program that lets users launch specific things with an elevated account. I'll check later to make sure there's not something missing.
For sure, my company's style doesn't like it though 
Alright No problem, I got the Answer
[Image](https://imgs.xkcd.com/comics/wisdom_of_the_ancients.png) [Mobile](https://m.xkcd.com/979/) **Title:** Wisdom of the Ancients **Title-text:** All long help threads should have a sticky globally\-editable post at the top saying 'DEAR PEOPLE FROM THE FUTURE\: Here's what we've figured out so far \.\.\.' [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/979#Explanation) **Stats:** This comic has been referenced 2035 times, representing 1.2879% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_dhojzk2)
I've been keeping tabs on this for a while. Would it be possible to port a basic wpf app to your framework now? Using things such as listboxes with databinding, texeboxes etc? Keep up the great work :)
When WebAssembly was first announced. I figured a year or 2 after it stabilizes, someone would release a GUI toolkit that uses the canvas or WebGL. Once this happens, I give it 2 or 3 years before the DOM starts going back to being for documents and web apps use an actual real GUI toolkit. I think you guys might beat my prediction! Keep up the good work.
Is it possible to integrate styles from https://github.com/ButchersBoy/MaterialDesignInXamlToolkit in some not painful way?
Yeah, I've seen those, there is another one that Autodesk made, not sure where it is now. Those libs looked difficult to use, C#/XAML compiled to WASM would be a lot nicer of a development environment for UI development.
Terrible thumbnail. "This buttplug is uncomfortable" level of terrible. 
Hey guys- I spoke to [Stacey Haffner](https://twitter.com/yecats131) who runs the gamedev portion of the [Week in .NET blog](https://blogs.msdn.microsoft.com/dotnet/tag/week-in-net/) and she mentioned that maybe it would be cool if I uploaded the source code for [Escape Lizards](http://store.steampowered.com/app/508940/Escape_Lizards/) and its engine- so here it is :)
Yeah I am not sure why the down votes.
We are using the same set of graphics primitives and visuals. Control template API isn't that different. The main issue would be the styling system itself, since we use a selector based one instead of triggers. So porting those styles should be possible, but it can't be done automagically.
What's the target runtime for the dll? And for your application? Perhaps they're not compatible.
.NET Framework 4.6.2
I've looked around in other places for similar errors and it may be some kind of memory error to do with chaining/nesting too many expressions. Are you using Visual Studio 2017? Unrelated but .StartsWith() returns a boolean, so you don't need to compare it to true. 
I have been trying to use ScriptOptions.AddReference calls to add assemblies and pass it along to CScharpScript.Create() but the script still can't see anything. Since the thing compiles fine I'm getting no feedback on what I'm doing wrong.
I'm using VS 2017 Community. I converted the problem line to a `foreach` and that worked. Not exactly sure why... any ideas?
Yeah that Addreference doesn't work the way I though it should. I sort of got it working by creating a class then pass it along during CSharpScript.Create() as a global. Not what I originally envisioned because now I have to pass a bunch of references from the MainForm to the "global" object so the script can manipulate stuff in MainForm. But it works so I'm not going to complain.
Are you talking about WPF or Windows Forms?
So many people here take pictures of their screens with their phones. I don't understand it, personally I find it so much easier to post from a screenshot on my computer. 
Screenshot with a phone? for code?
ReactiveUI makes me wish I had a reason to write WPF apps more often. 
Just what I was looking for as well :-)
I see this issue has been already answered for you, but as an arbitrary aside, it is generally considered very bad form to include the == true for the line ```subrecordData.Find(n =&gt; new string(n).StartsWith(subrecordTypeName) == true);``` Also depending on what type the variable n is you would usually do a ToString() instead of a new string(n) Typically you would write this line as ```subrecordData.FirstOrDefault(n=&gt;n.ToString().StartsWith(subrecordTypeName)```
Does the class need to be public?
Or... Just the code.
It seems you have just started out programming, so rather than answering your question, I am going to be a dick and help you post better questions. Asking the right questions will get you further, faster. * When you want people to look at code, please do provide the code in a copy-pasteable format, so people can try it out in their own editor. * Describe what is happening, and what is expected. When you just ask whether anything is wrong, you are asking for people to look at everything, rather than the issue you know you have. * Tell us what your editor is telling you. If your code is not running, or stopping unexpectedly, the editor should provide you with a message, indicating what is wrong. We might be able to tell you exactly what is wrong from the error you are getting. Good luck! :-)
It's easy enough to enable/disable the button with a button.Enabled = &lt;bool&gt;. So why not have an overarching form validator which gets called when the textboxes change? Just have the onchange event for all text boxes go to the same method so you can call the overall form validator and set the enabled state of the button to the result.
Do you have your app already running? try closing all applications and run again your app. 
So you'd want to create an api. Your websites would use the api methods for all data handling as would your apps? You can create a basic api from visual studios, [link](https://www.visualstudio.com/en-us/docs/integrate/get-started/rest/samples) Then you would *consume* your api in your app or web project. http://stackoverflow.com/questions/32497019/consume-rest-service-in-mvc-6 Id suggest you read up on some of the api tutorials, they will explain authentication methods, for testing try the basic auth method which will be just a username and password. build a basic mcv web project then try to connect to your helloworld restful api method you'll be well on your way then, to start learning more that is. :)
if negative it simply rejects the number. and yes my spelling is horrid and i do make a lot of typos. it would be nice to have a spell checker for my comments when programming.
thank you, will comment further when I have had time to check out :)
yeah i tried that, including unchecking the folder read-only. I still cant get access 
Try re-launching Visual Studio itself as an administrator. If that doesn't help, as an experiment, can you navigate to that file? Can you rename it (make sure you rename it back!) ?
I tried still no access
With only 7 lines per method, that big project would be HUGE.
Gotcha
Seriously. This is what I'm curious about. Also I'd bet money that a bunch of contradictions would eventually arise.
From what I have seen ReactUI is a collection of components for the React JS framework. ReactiveUI is a MVVM framework using C# reactive extensions.
&gt; Maybe something is wrong with your Visual studio install. Just tested the following and it compiled and executed correctly in 4.5.1 and 4.6.1, not using my usual machine so I cant test 4.6.2. I switched to target 4.5 and it still failed for me. Are you using vanilla VS 2017 Community install? Also, I commented out everything in inside the chunk of code that's iterating through properties and copy-pasted your code: no build failure. :\ I also changed it to switch on type and added a case statement to test if that type were `List&lt;object&gt;`, and still no failure. I can't find any substantial differences between that and what I'm doing. Just regions, scoping brackets, and local functions beneath the switch. &gt; subrecordProperty.PropertyInfo.PropertyType.Name That's just a property of a certain type (my `Subrecord` type); should work like every other property, I'd assume. p.s. I appreciate the help you're giving me. :)
Seriously. I'm not the best developer and even I knew that. Maybe the code analyzer for whatever reason doesn't recognize this issue unless the `new` keyword is present?
&gt; If I can't make sense of what's going on, then I generally fix variable names or extract methods and ensure they have descriptive names. I usually use them not to explain what is happening, but *why* the code is the way it is. Sometimes I look back at older code I've written and I'm thinking 'why did I do it this way'? After scratching my head awhile, I remember there's a good reason for it. :\
Without the `new` keyword you get a compiler warning. So in effect, `new` means "I know the names clash, but I can't change them".
I think it is a code smell. The reason is that there is not a single "Textbox" object that exists in c#. Winforms has a textbox implementation, wpf has a textbox implementation, asp.net has a textbox implementation... all these textbox implementations are for the GUI layer of your application. If the class you are writing is not a GUI specific class... a form, a webpage, a user control, etc. Then it should not have any gui layer specific data/logic. Maybe look into layered architecture. You have a data layer, which isn't even really code... it's databases/files/webservices.. etc.. the items that contain the actual data, but no logic or implementation for utilizing that data. Then you add a data access layer, this contains functionality for retrieving and setting information at the data layer. The data access layer and the data layer are separated so that you can change your data source without any of the layers utilizing the data access layer noticing. On top of the data access layer you add a business layer. This layer contains data structures and logic specific to the business case the application is working with. This layer contains all the objects and operations... such as, if a user has a value of X for property foo then values q,r,s are valid values of Y. Then, on top of the business layer you create the GUI layer. The Gui layer does no more than invoke operations through the business layer. Keeping the GUI layer seperated like this allows you to easily rewrite only the GUI layer when you want to port from say, WinForms to WPF or to ASP. So... with that in mind, unless the class is used only in the GUI layer written for this particular GUI Implementation it shouldn't have any GUI data or logic. 
I think the only excuses for x:Name'ing XAML elements is: 1. Youre using something as a resource elsewhere 2. For complex layouts using multibindings and converters without creating new layout panels 3. If youre going to bind to it using ElementName and it doesnt make sense to use a RelativeSource 4. You can't get around it while defining complex custom control templates with "PART_xxx" 5. You're writing a weird API extension to force DataContext value propogation behavior to a non-frameworkelement base as a direct child of a DependencyObject. I would stick to binding wherever possible, even if it is seemingly convoluted at first.
Hey, I recognised your username- [we interacted a few months ago too](https://www.reddit.com/r/programming/comments/5pwsd9/building_a_3d_game_engine_with_net_core/dcv4klp/). I never tested my design against SharpDX or anything else. I don't honestly know how much difference it would have made, to be honest, but I did measure before the direct cost of P/Invoke call overhead and it's not huge but not negligible either. Yes, the editor was winforms based. Frankly, I'd love to have had time to implement a proper UI framework- I really like the one in Unreal Engine- but as time was short (and the editor wasn't going to be publicly released) I just went with a technology that I already knew well enough to just get started with.
&gt; The MFC application runs a Windows Scripting host that supports vbscript and jscript. None of my users bother with jscript. Everybody uses vbscript. So you are switching to the much harder to learn C#? That doesn't sound like a good idea. You should probably just wait until VB for Roslyn is ready. Besides being easier on your new users, it will be easier for your current users to port their existing applications. 
&gt; Last time I checked vb.net in Roslyn is still a work-in-progress Reference please
Currently using 2015 professional. Maybe because it is trying to build it like it's a .Net Core app?
I mean your code is building that way, this machine doesn't have Core on it. This line gave me the impression you might be doing something with .net core `\Community 2017\MSBuild\15.0\Bin\Roslyn\Microsoft.CSharp.Core.targets(71,5):` Sure send the code this way.
Great idea :) just never thought of it actually. I use Reddit a lot so I thought it would be okay idea to find something on it 
Ok, first of all the only reason it works at all is because you're making use of a memory leak: public Form1() { FileSystemWatcher watcher = new FileSystemWatcher(); watcher.Path = Path.GetDirectoryName(@"C:\Windows\CCM\Logs\CmRcService.log"); watcher.Changed += new FileSystemEventHandler(OnChanged); watcher.EnableRaisingEvents = true; InitializeComponent(); } `watcher` falls out of context and should be getting garbage collected, but your event subscription keeps it alive. As a double bonus, you now have no way to remove the event subscription. If this were a non-trivial program you could spend a serious amount of time tracking this kind of thing down. Secondly, the reason you're seeing the behaviour you're seeing is because the form loaded event doesn't do what you think it does. Don't use it (or unloaded) until you get a lot more experience with WPF. The simple fix is to switch your code to an OnVisibleChanged event.
I second this, but if it's a new project maybe try https://github.com/IdentityServer/IdentityServer4
Part of that makes sense. I guess what complicates it is that I have 20 textboxes: 1 uses VOL_errorProvider, 4 use IP_errorProvider, 8 use HEX_errorProvider, 2 use FLOAT_errorProvider, and 4 use INT_errorProvider. Right now I have each textbox's OnTextChange event got to validate_TextChanged(). I'm not sure how to check all the errorProviders for each textbox on every textChange event. 
Eric Lippert wrote about this: https://blogs.msdn.microsoft.com/ericlippert/2009/10/05/why-no-extension-properties/ C# 8.0 is tentatively planned to have "Extension Everything" (including properties). You can see a quick example of this at the recent talk at 1:00:20 https://channel9.msdn.com/Events/Build/2017/B8104 EDIT: One big concern as to why they weren't added way back when was that all extensions were `static`. So sure, you _could_ add an extension `get_MyProperty` and `set_MyProperty`, but you would have to somehow manage storage of the value _somewhere_ not on the instance you were calling it on. So the example you're posting, essentially storing data in a backing field or as an auto-property wouldn't really have any fundamental meaning in with how extensions currently work in C# anyway.
Something I use: public static string ConnectionString(string serverIp, int serverPort, string username, string password, string database) { string ret = ""; // // http://www.connectionstrings.com/mysql/ // // MySQL does not use 'Instance' ret += "Server=" + serverIp + "; "; if (serverPort &gt; 0) ret += "Port=" + serverPort + "; "; ret += "Database=" + database + "; "; if (!String.IsNullOrEmpty(username)) ret += "Uid=" + username + "; "; if (!String.IsNullOrEmpty(password)) ret += "Pwd=" + password + "; "; return ret; } 
Oh cool a down vote!
ASP.NET Identity: https://www.asp.net/identity
We can inherit, and use add as many properties as we want. I know it doesn't really answer your question, and you may need to do quite a bit of work, especially you are referencing this class everywhere, but Visual Studio makes sorting that out quite easy. Create your new class, and use it where you need it. Then follow the breakes, method by method until you override where the class is created. When your class is initialised it will now be your new class, but you can keep the old references, until you need one of these properties somewhere else. 
I'm using auth0, works pretty well azure ad has limitations, like 50,000 people and I never get a great experience from it
Personally I use a Database project within VS, which resides in a separate project, within the solution. Whenever I need to do an update, I just use the SQL Schema compare and let it do the "migration" work for me.
I actually just finished using MathNet.Numerics to perform FFTs on data as part of my dissertation. In particular it was to find the frequency distribution of some head tracking data. Unfortunately their documentation wasn't very helpful, and many examples I've found seem to be outdated. I believe I've figured it out. I'm linking two images, which are parts of an appendix in my dissertation. I'm linking them as images since I don't want my university's plagiarism detector to fuck me tomorrow when I actually submit my dissertation. Check them out here: https://imgur.com/a/DRuHF You could then plot the frequencies array on the x axis, and the FFTArray (amplitudes) on the y axis. Also note that there are several optimizations you could make. EDIT: Just added a before and after graph to the gallery so you can see what it does. 
Nah it's alright. C# is fairly easy to use. When VB is ready I can add it in. Those who can handle C# can switch to my new application. Otherwise they can stay on the old one, which will no longer be updated.
That's really surprising given that VB's compiler is Roslyn based.
Dead-end doesn't mean the same thing for scripting languages that it means for full programming languages. VBScript is "done" and has been since the first version of classic ASP. To the best of my recollection, they've never added anything to it, preferring to keep it narrowly defined. *** That's not to say that you should necessarily pick it. I just wouldn't dismiss it out of hand either. 
Yes. Overload with something that doesn't need ("","",0,null,0,null) 
I guess I'm partly to blame. When I first rolled it out to our field engineers I only bothered providing vbscript code samples. There was no incentive for anyone to write jscript when they can just modify existing vbscript code, since using jscript confers no additional functionality.
I agree, inheritance is the way to go. If the class is sealed you're probably making a mistake somewhere with an aspect of your design. 
I am using System.Data... but after tinkering with it a little more. I've very close to solving this issue.
Create a concrete instance of an IDbConnection object and that will have a method to create an IDbCommand, which you can then populate with your command text and parameters. Then it's as simple as calling ExecuteScalar.
This might help, looks eerily similar: http://stackoverflow.com/questions/12129824/validating-multiple-textboxes-using-errorprovider#comment16222785_12129824
Can I ask something on this subject? It's been annoying me for weeks. So my authentication for our database is a simple API on our server that returns the username if SQL command "SELECT username FROM users WHERE username = 'username' AND password = '#password';". Suppose you prevent that from a SQL injection why would that ever reveal what the password is? Sorry about the high level language. I dunno how to ELI5.
Unity is what I use. Note however that CryEngine also supports C#.
What are the advantages of using this vs standard asp.net identity? (curious) 
I think you misunderstand what UTF-8 is. It's not a way of encrypting something, it's how your computer knows that the letter "A" is represented by the binary `01000001`. When you call `GetBytes("A")`, that's the single value that `b` should contain. Here's a good resource to explain the basics about Unicode: https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/
It is an OpenID and OAuth framework. It gives you a way to secure multiple applications and APIs via a central auth service. It is open source and extensible. There is a learning curve though. https://identityserver4.readthedocs.io/en/release/
Right click on the function name, then Show all references 
Thanks for the help, it led me in the right direction. For anyone who finds this in the future, the option I was looking for is called "CodeLens." Tools &gt; Options &gt; Text Editor &gt; All Languages &gt; CodeLens
I've been using Entity Framework migrations on .NET Core and they have worked well for me. I know you aren't interested in EF, but others might be.
Now that's a thought - I could always just run Visual Studio in a VM. Good point!
Active Directory on my last project.
Usually the problem comes from using an ORM such as EF or NHibernate that returns all of the database columns by default. But even then, a hashed password isn't too useful unless you have a really bad hashing algorythm. 
Fascinating theory... but see, the object I'm trying to *extend* is from a nuget package
Yes. I built a successful dev shop around C#/.NET. I was finally able to leave the rat race and work from home as my own boss.
JWT https://jwt.io/
Would you mind elaborating on the Java and Node library side and how does it compare? I am not very well versed in those. I know Java excels in big data and machine learning (with Python as well).
I would rather say it's the other way round: it tells your program how a byte sequence could be interpreted as glyphs. And UTF-8 is not *unicode* - the first is an encoding that supports (most?) unicode symbols. The latter is just an abstract concept nowadays (formerly it was equivalent with UTF-16 until the limit of 16 bytes was hit for defined symbols).
 Have been looking and for jobs using my c# skills. Lots of times I hear: if you know c# then you'll not have a problem transitioning to Java. :(
Damn, that looks really cool! What exactly is DataStorage?
&gt; Running Xamarin on it means year another layer between your application and the OS Isn't it more like switching out a layer? Mono replacing whatever Java bytecode interpreter is there? 
Not at all. First of all, Android doesn't use a plain Java bytecode interpreter, rather a JIT compiler (until Lolilop), an AOT compiler (Until Nougat), a mix of Interpreter/JIT with PGO/AOT with PGO (since Nougat). Second all native code produced with the NDK, compiles to shared objects which are loaded into a Java process. Even the so called native activity from the NDK, is just a predefined Java class with a set of expected native methods that must be exposed on the .so. https://developer.android.com/reference/android/app/NativeActivity.html What Xamarin does is to package the whole Mono runtime as a native library to Android applications. One example of this complexity is that you need to know how objects that are shared across both worlds, Android and .NET, are managed by both GC on each side of the fence. https://developer.xamarin.com/guides/android/advanced_topics/binding-a-java-library/ https://developer.xamarin.com/guides/android/advanced_topics/garbage_collection/ https://developer.xamarin.com/guides/android/advanced_topics/limitations/
TIL. Thanks for the in-depth explanation! 
Careers are not defined by knowing a programming language or not. If your job requires a language, you learn it and apply it. I am pretty fluent in a dozen or so languages in my 15 year career or so.
Also learning a framework, platform and best practices takes time. Of course after 15 years it is a different story. But consider a developer whose maybe 4 years in – changing a language every year wouldn't be beneficial.
Any writeups on your successes or how you went about that?
If you're only talking about the language that's true, but what you'll really miss is Visual Studio and the rest of the MS ecosystem. IntelliJ is nice but it doesn't even come close.
The same reason why everything else not in .Net does not exists. Because no one have specified, implemented and tested it. There are plenty of examples of "obvious" things that are missing, but there are often easy workaround for them, like you just showed. You can always suggest it in a relevant github repository.
You need to be able to design software. I don't mean code software, I mean actually architect a system from the ground up. A client comes to you with a need and you need to be able to design and code a solution that addresses that need. Most small/mid businesses who need LOB apps would rather deal with a local person than India or some other outsourcing firm. There is a lot of work out there for someone with the right skills. You can dip your toes in moonlighting and see if any opportunity presents itself. Another thing that helps: get social access to company owners and wealthy people. The former are always looking to solve their lingering IT issues and the latter usually have money to throw at any project that sparks their interest. Connections are not necessary, but the are very helpful. Entrepreneurship is best conducted when you're young. The older you get, the more life obligations you accrue, and the harder it is to maintain your lifestyle while you get your business off the ground. Get an S-Corp LLC set up as soon as you can. I used LegalZoom to do mine. It's tax obligations are handled simply and it's relatively inexpensive to set up and you get corporate protections that prevent a failed business from affecting your personal assets. It's best to get another person (e.g. a family member) on the board for survivorship and prevents a tactic some lawyers use to assert you're actually a sole proprietor (with more personal liabilities) if you go bankrupt. Finally, you will fail. You need to pick yourself up and keep trying. You can always return to working for someone else if needed.
You can use federated servers or azure AD with Auth0 as well. 
That would be public MyClass { readonly NugetClass nugetClass; MyClass(int someParameter) =&gt; nugetClass = new NugetClass (someParameter); int NugetProperty { get =&gt; nugetClass.NugetProperty ; set =&gt; nugetClass.NugetProperty = value; } string MyProperty {get; set; } }
You could use `d.GetFileSystemInfos()` instead, which returns files and directories.
If I need any more than a couple for a given class, then I tend to inherit it (unless of course it's a sealed class) which means I can also add things like my own properties.
My apologies. DataStorage is a static class acting as a global storage. The BeforeFile is a file of data from an early treatment session, and the AfterFile is a file of data from a later treatment session, after they've been read in and processed. Feel free to ask more questions. Once I know that my university's plagiarism detectors have already done their work I could provide you with an electronic copy of my dissertation if you need it, which explains all of the code.
you were on the right track with the concrete connection source.
Also note that this is not available in VS Community Edition. I was confused going from Pro to Community the first time.
In all fairness though sometimes the reason something might not exist (this can apply to any programming language) is because doing 'that thing' could be considered bad practice or violate some rules.
I think the more user friendly approach would be to keep the save button enabled. If they click it, and there are any errors, highlight them and then prevent the save from continuing. Otherwise you have a scenario where the user can't continue but they don't know why. This is also more straight forward to implement and is more consistent with other forms in other applications.
Why are you not interested in entity framework core?
Yes, but why? That's just pointless pedantry. Either it never occurred to someone, or a conscious decision was made not to do it. Particularly in the latter case, that could be an interesting thing to know.
Thanks for posting that. How do you go about getting clients/business?
This comment should have more likes. The domain is enormous and newly minted devs (like myself) will have overall lower quality work if we're diversifying aggressively.
When there is a conscious decision to not implement, you can usually find discussion of the reasons. http://stackoverflow.com/questions/8671427/why-some-types-do-not-have-literal-modifiers/8673015#8673015
/u/jocq sort of side skirted the larger problem,but didn't say it directly - colaboration. All it takes is one person on the team not seeing a migration that's wrong and you could loose whole swaths of data. The larger the team, the more likely it is to happen. Migrations are great, don't run them on startup. 
Actually what you say is (I will give example from my aspect which a mechanical engineer work on programming as a hobby) I learned static calculations with metric system now I can only work in countries which use metric system. I am programming for 8 years and I can say programming language is just a system not a way to solve a system. The thing is understanding how to create algorithms and ubderstanding hot to make your sub-algorithms work together. So it does not matter what language you know what matter is do you know how to use it. 
&gt; You have two great frameworks for creating web applications — ASP.NET and ASP.NET MVC Is he referring to ASP.NET WebForms here? or the fact that you can develop ASP.NET MVC on the .NET Framework or on .NET Core?
I love working with extension methods. It helps make the reading more natural. I tend to use them (instead of adding the method to the class) when part A of my program uses it but not any of the other parts that also have access to the class.
Well, it isn't as straight forward if you think about it... the definition would be ambiguous. In fact your implementation doesn't handle an edge case that might catch someone by surprise. Can you see it? We can all agree that a directory containing no files and no sub-directories is clearly empty. That's simple. But what about a directory that has a sub-directory... which is itself empty? Many would consider an "IsEmpty" method to mean it is a folder which contains no data, or rather no bytes. It might have bunches and bunches of empty directories in a great big tree... but is still "empty" if none of those directories contain any files. What if there is a file with zero bytes? Does that mean the directory is still empty? A lot of the time the rule API designers try and follow is "principal of least surprise". When ambiguity comes up it is best to not offer one opinionated point of view that will catch some users by surprise and instead give the user the tools to answer the question their own way... handling the edge cases the way they choose.
You can handle the ambiguity with a modes enum. That is also self documenting.
They did this with TypeScript, they introduced a flag for null checking that was opt-in and yes, it starts throwing errors everywhere.
I think it's worth mentioning that the dotnet core version is the latest right? (1.1 if I'm correct?) Great post anyways.
:D What if there are files that I don't have permission to see, is that empty? If not, then we might be leaking sensitive information. 
That's really all it boils down to! 
Yes `GetFiles` returns an array but in your comment you are using `EnumerateFiles`
Yes, the whole point of my comment was noting that `EnumerateFiles().Any()` can stop after finding one file while `GetFiles().Any()` will list the entire directory.
Ahh yes I see, I think I must have misread, whoops!
Exactly the same way, `"\x41"`.
I'm referring to tweq's answer.
Thank you for the reply. Just tested and it works. I must be experiencing a bug elsewhere with my code. Back to the bug search. Thanks again!
With TS it is easier. First of all you accept TS as the lesser evil anyway. TS is younger so not so much legacy. It also throws errors on existing JS so people who migrate are used to dealing with these. C# went 15 years without significant breaking changes and the community values backward compatibility much more.
tweq's answer is a quote from Eric Lippert on stack overflow. (I don't know if he is the first to have said it)
Extension methods if someone else wrote the class, normal methods if I wrote it.
Then yes, to reiterate, that is a poor answer. Of course it's completely correct, it's just not in any way helpful to anyone.
There is no helpful answer, that is the point of the quote. The number of features that do not exist is literally infinite, there is not and couldn't possibly be an individual, documented reason for each of them.
Thanks. That gives me a few new things to try.
Are you antisocial by chance? I feel it's very obvious that the actual question asked here is "Is there a reason that Directory.IsEmpty doesn't exist, and if so, why?" No shit it doesn't exist because no one's added it yet, but is there a reason?
Also from the version you have specified (4.6.x) it looks like you have .NET Framework 4.6 installed on your laptop. This is okay! The .NET Framework is backward compatible, so you can run 4.5.2 binaries fine with very very few exceptions. The folder you found is called the "GAC" this is a centrally stored cache that is used to store the .NET Framework's binaries on any computer that the .NET Framework is installed on. This means you generally do not need to deploy these DLL's to your bin folder. (and when you do, undefined behaviour can occur!) From the actual error you're experiencing I wouldn't be surprised if you were running into that "undefined behaviour". It's also possible that you need to look into binding redirects as well (especially if you are using binaries that expect older versions of the newer binaries that you are using). You can usually get away by running "Add-BindingRedirect" in your package manager console, but you want to make sure you are not copying any assembly files manually in as it won't be able to scan assemblies that it won't be deploying!
Sure, it's six of one, a half-dozen of the other. You'll note I never explicitly said UTF-8 was *Unicode*, I just gave a link explaining how Unicode works. UTF-8 is an implementation of the Unicode standard (and supports all code points). The term "Unicode" never referred to UTF-16, but to UCS-2, which is its predecessor. UCS-2 and UTF-16 are, of course, similar, but not identical, and UCS-2 is no longer a supported encoding in the eyes of the Unicode Consortium.
I wouldn't say severe. It would put a preference on someone who has php influence of course. They have to spend less time training. But say if I was hiring a php developer, And I'd have to choose between * c# dev who has very good practices, understand OO patterns * php who doesn't really know what's a decorator or a factory pattern. Or doesn't do unit test I'll pick the c#. IMO all languages have the same concept just done differently.
Not always - if the directory is a mount point for another user that only mounts when they are logged in, then in a way it's a directory with contents that not visible to other users. Of course, that's the Linux nerd and QA guy in me. Then again I don't know how common it is to mount a network drive to a random location inside an existing filesystem rather than to its own drive (although it is technically possible these days on Windows, and it's always been both possible and very common in Linux).
Just write it as an extension method and toss it in a class library. I don't know about anyone else, but I have a half dozen small extension methods I use all over the place in their own little library that I can put in any solution I want.
Anyways. I think c# is still heavily used. 
Fair enough. I guess maybe I was simplifying matters. There are definitely more variables in play. If your location has more opportunities in a certain stack, definitely try to immerse yourself in it. But I think we often get scared by the situation. I'm just speaking base on my experience. I thought I would find it hard to go into c# and angular (coming from zenscript and backbonejs). But when I got the job it came in a natural progression to be up to speed. I think what secured my job was my ability to adapt, work in teams and good programming practice. And I suppose that's why I'm a big advocate on that. But definitely your concerns are legitimate and will definitely play in your decision making. 
I'd like to hear the success stories with that, because from my experience learning a new platform is hard and takes time. Switching from a C# corporate backend stack to web development in Rails would take at least a year to get certain level of "mastery". Yes, you are able to contribute and produce some value from your week two, but you don't really know what you are doing and what's the best way. Also, unless there is a real shortage of people for that position you are not gonna be paid your "master" salary from your previous stack. You can level up quickly and take it as an investment, but it takes a bit of negotiation (which not everyone is good at).
No there isn't. Except for the default reason mentioned in the quote you keep ignoring. 
Yeah I started learning programming as a fun little side-hobby with the hopes that it could perhaps turn into work if I can get to a point where I'm proficient enough. Starting with JavaScript and then dabbling with a little c# I figured I'd better pick one and just run with it before I started trying to learn all these syntaxes along with the basics of programming in general. I ended up sticking with c# because Visual Studio :D
Someone said that about placeholder text in a xaml textbox. I was so sure there had to be a way to do that already in xaml but it wasn't there... For no good reason. 
Others pointed out some reasons why the very meaning of IsEmpty is unclear. My question for you would be: what are you trying to achieve, and why the presence of IsEmpty would help? I, for example, see that File.Exist is largely nonsense, and this looks similar.
Ah, that makes sense - that would be awesome though!
Great point
Curiosity was my drive. How is File.Exist nonsense?
Will XAML standard mean that we can write XAML apps for Mac and Linux? Color me interested.
No, this only means that you can use the same XAML for UWP (Windows apps/Xbox) and Xamarin (Android/iOS).
Yeah, Java will be strong for a long time because of how long background it has (which means the amount of programs/systems, libraries, etc. using Java is insane) and also because of Android, but I feel like .NET has a brighter future ahead. But we'll see how .NET core turns out in the next few years.
File.Exists is nonsense because the information it gives is incomplete or erroneous. The reason I am looking at a file (name) is because I want to do something with it: to read it, write to it, create a new one, perhaps without overwriting an existing file. To read: I need to open a file. Information that it exists is not sufficient to know I will be able to open it. It could be that I have no read right; even if I do, it could be that somebody has it open exclusively; finally, it could be that file is deleted between the call to exists and to open. To write: same as above, really. To create, not overwrite: same as above, again. The system offers the "create, don't overwrite" flag. About the only practical use for ""Exists" is UX ("hey, file with the name you gave me exists, do you want to overwrite it?"), and even that can be achieved with an "open existing" call. So in conclusion: whatever my purpose, I have to open (and deal with the failure there), "Exists" is useless. In fact, it just makes the code more complicated (and slow), no benefit at all.
Avalonia has been making some good progress (I'm one of the contributors). We're for a different style of app dev than Xamarin.Forms and we're also supporting embedded devices (I.e. Our frame buffer support and the remote windowing system in issue #900 that is a WIP).
Does it perform poorly at some point or are there other reasons not to use a string PK? 
Assuming the methods are actually async and don't have inter dependencies you can collect the `Task` objects into a `List&lt;Task&gt;` then do `await Task.WhenAll(taskList)`. eg. var taskList = new List&lt;Task&gt;(); taskList.Add(DoSomethingAsync()); taskList.Add(DoSomethingElseAsync()); await Task.WhenAll(taskList); Another option would be to use `Parallel.ForEach` to run the async methods as syncronous via `.Wait()` or `.Result` so they will always finish prior to exiting the loop.
How viable is Avalonia on mobile compared to Xamarin.Forms? When do you expect it will it be near parity for features and stability?
Thank you. The .wait fixed my problem. Albeit, I probably shouldn't thread my program after just test (I am doingCPU heavy stuff) and it's hogging the cpu kek :( Thank you for your help 
Stability: AFAIK its stable. The new way we do windowing on mobile is much nicer and much more stable than before. Feature Parity: We have a smaller control catalog and we don't have themes that look like native yet. That's all on the way eventually. Another interesting thing is we have (unofficial) Xamarin.forms interop because of their support for embedding native controls, at least on Android. /u/kekekeks posted a demo of it on our gitter chat a few days ago.
Generally that's what you want when you're​ multithreading, maximize the CPU power available and do it evenly across logical CPUs. Of course it depends on what you're doing. If you have other threads that need to be responsive and service the UI or handle or tasks, then you might need to look at ways to ensure your work threads don't starve the other threads. I'm not not sure the best way to manage that - task.delay might help but I suspect that's the wrong strategy.
Not officially, but it should make the [Avalonia](https://github.com/AvaloniaUI/Avalonia) dev's lives a bit easier perhaps. [Early days](https://github.com/AvaloniaUI/Avalonia/issues/982) though.
My client's server is 2008 SP2 not 2008 R2 so it looks like I am limited to 4.5.2 or 4.6 according to this: https://msdn.microsoft.com/en-us/library/bb822049(v=vs.110).aspx
ReSharper also does this ("color identifiers"), but I usually turn it off. Too colorful.
&gt; supporting embedded devices Is embedded considered an SOC with a core A7 running at a few gigahertz with 1 GB of ram, or are we talking a Cortex M4 running at 84 Mhz with 128 kB of sram?
&gt; Our team is well under way developing for GTK# and WPF. [link](https://blog.xamarin.com/glimpse-future-xamarin-forms-3-0/)
* WebServer * WebBrowser * Database * Management Software (for organizing stuff) * ... 
UWP is recommended and for most programs just fine. I don't think they will update WPF to comply with the XAMLStandard.
XAML is so much nicer to write in though!
[removed]
Wouldn't every WPF app be a "XAML app"?
I don't know how you can say UWP is recommended when it doesn't run on anything earlier than Win10, AFAIK.
I wrote a disk benchmarking tool and thought it was a really interesting project. I learned a lot about multithreading and the TPL, as well as disk IO, making things thread safe, queuing and the producer/consumer pattern etc.
Upvote for webserver. I had tremendous fun coding a one during my studies - even though we were forced to use Java. You'll get intimately familiar with threads, blocking vs non-blocking, efficient (de) serialization of byte streams and so on. A lot of great topics which will teach you very useful skills. Plus, you'll have an excuse to focus a lot on performance, which is just plain fun. :)
In C# there are three _types_ off classes. Classes, sealed classes, and abstract classes. An abstract class cannot be instantiated. It is like an interface with implementation. It can only ever be inherited, and the inherited class can be instantiated. If a function or a constructor asks for an abstract class, you can send it any class that inherits that abstract class instead. (this is true for any inherited class. If class B inherits class A, you can pass class B to a function that asks for A. The reverse is not true) A class is a class. A sealed class cannot be inherited. So when coding it will be defined as public sealed class ConcreteClass : Abstract Class {} This is not used to often (off the top of my head, I can't think of a good reason), because it sort of breaks _sOlid_. You can get a class from anywhere, Nuget, a dll from a friend, or code from github, and as long as the class has not been _marked_ as sealed, you can inherit from it. Sometimes whoever published the Nuget package will also give you an interface. In visual studio select the class name and press F12. You won't see the actual code, but you will see a signature for the class. You can see if this class inherits any abstract classed or interfaces. You can then write your own class on that interface. Or just write your own class, inherit the nuget class (if it isn't sealed, which you will also see when pressing F12). You then reference your new class when you _new_ it, and where you need the new parameters, and everything inbetween the new, and where the new parameters are used. Because you can pass inherited classes as though they are the base class, you don't need to update all your other code. It will treat it as though it is the old class
Why aren't interpolated strings just compiled to the same IL as concat with '+'.
If the array (or any enumeration) can be very large I will use a SemaphoreSlim in SomeAsyncTaskMethod. 
String interpolation is transformed at compile time to invoke an equivalent string.Format call. [String.Format](https://msdn.microsoft.com/en-us/library/system.string.format.aspx) isn't the same thing as [String.Concat](https://msdn.microsoft.com/en-us/library/system.string.concat.aspx) &gt; So, if you have iterations, or building big strings, make sure you don’t use the “good looking” String Interpolation syntax. If comparing different methods, the author should mention what functionality you'll lose. [Here is a better write-up from 2010](http://geekswithblogs.net/BlackRabbitCoder/archive/2010/05/10/c-string-compares-and-concatenations.aspx) that explains the differences, when each is appropriate, and why StringBuilder isn't always the top performer.
The test is comparing multiple string concats to the same number of interpolations. Yet, a single interpolation (or string.Format) is typically used as an alternative to multiple concats in real world code. Interpolated: $"the {thing} is found at ({x}, {y})." Formatted: String.Format("the {0} is found at ({1}, {2}).", thing, x, y) Concatenated: "the " + thing + " is found at(" + x + ", " + y + ")." Concatenation will likely still be faster since it won't need logic to parse the format string.
&gt; why StringBuilder isn't always the top performer. What that article shows is that in ANY case where you don't know the size of the strings you are concatenating, you should probably use StringBuilder. If he had used a larger number of concatenations, slightly larger strings, or reused the StringBuilder, then the test would have quickly went upside down. His example is very contrived.
It is the time to rename XAML to something different. Maybe even change format from XML to JSON or YAML. Now simple search gives me results for WPF, WP7, WP8, Windows 8/8.1 and UWP. With XAML standard it will be just one more fork. Maybe it is an evil plan to beat google search? 
I think you're asking how to get user info from an injection attack? If you start with your query code, it's pretty easy. &gt; "SELECT username FROM users WHERE username = 'username' AND password = '#password';" Here's the attack: username = '; select concat(username, '|', password) from users order by username offset &lt;RowCount&gt; rows fetch next 1 rows only-- Increment rowCount to fetch the next username/password combo
Because you can do things like this with string interpolation: string UrlEncode(FormattableString urlFormat) { var parameters = urlFormat.GetArguments() .Select(x =&gt; Uri.EscapeDataString(FormattableString.Invariant($"{x}"))) .ToArray(); return string.Format(urlFormat.Format, parameters); } var bar = "one two"; var baz = "$!#%"; var url = UrlEncode($"http://foo.com/{bar}/{baz}"); which would result in `http://foo.com/one%20two/%24%21%23%25`
Yeah as celluj34 said there was a rare issue that was picked up and fixed in 4.6.1. Personally I go with the latest framework that any potential clients will have. For Azure clients that's the latest version of the 4.x framework or .NET Core. For others it can be the out of box version of .NET 4.5. In your case I think it's probably safest to stick with 4.5.2. In most cases there isn't anything critical that cannot be done by .NET 4.5.x, although you might notice differences in performance. (especially between 4.5 and 4.5.1 where the warmup time in IIS can be minutes instead of seconds) Also if you're looking to look more into this for other units of work - there is also 4.7 but it's a bit too new for most people to have so it isn't a really good idea to target it at the moment. There is also .NET Standard and .NET Core however if you're not confident enough you'd probably stay away from it for a little bit as the tooling has only just gotten to the stage where I'd recommend new developers use it. (although there are big changes coming up that might change the tooling again!) 
A database is a good idea! You could make a simple key-value database, or something as complicated as SQLite.
Windows 10 already has a huge install base, and if you want to be able to spread your app across the whole Win10 ecosystem later on, you can easily do that. Windows 7 and 8.1 are going out of support in the near future, i wouldn't keep them in mind if I didnt have to.
I cannot put my finger on it but this test does not look good and it definitely does not represent the way that I would use string interpolation. If StringBuilder implementation is not completely dumb then it must allocate memory in blocks which means that after each block allocation adding one character is extremely cheap operation. Other two methods are allocating new strings in each iteration. I would not be surprised to learn it even causes garbage collector run. StringBuilder would allocate memory for 100'000 characters max. Other methods would require memory for 100'000 * 100'000 / 2 = 5 BILLION ! 
Tell that to enterprise. It's Win7 kicking and screaming until they are left with no choice. We would be at Windows 12 by the time they get onto 10.
[@id_num's latest tweet](http://i.imgur.com/vHphJNK.jpg) [@id_num on Twitter](https://twitter.com/id_num) - ^i ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
Cool! I still don't understand why anyone would want to limit inheritance, but I'll look for interfaces
Start with contextMenuStrip from the toolbox. Then you'll have to bind it to you form, which you can find under properties. You can also have multiple contextMenuStrips and bind a unique one to each object within the form, like pictureBoxes or panels.
We have done so, for us it improved our perf by about 2% in some places. In others it was not measurable. The simple fact of it is it probably doesn't matter how you do this at all (interpolated vs format vs individual concat calls vs a list of small strings and a single concat call vs StringBuilder.AppendFormat). The correct answer is to choose a good algorithm for the problem first and then profile. Micro-optimizations around strings should be the final step. This is especially true when your inner loop is dealing with repeated concat/format calls in the 1-5 argument range where if an optimization causes you to use a params array, it is generally not an optimization at all. 
I'm doing a lot of fun time SQL generation that can't be cached, so it may be useful to me after I eliminate some other unnecessary memory allocations.
Neat.
I'm just learning WPF right now for some Windows 7 desktop apps for work (making my life easier). Should I be learning something else?
...but doesn't work on Mac or Linux or iPhone or Android or Windows phone or Xbox or ps4 or kiosks or Nintendo Switch or Chrome or Firefox or Opera or... 
&gt; Micro-optimizations around strings should be the final step. Yes and no. Obsessing over StringBuilder vs. concat/format/interp too early or religiously using only StringBuilder is a bad micro-optimization. However, realizing that strings can be expensive and put a lot of pressure on the GC is a good thing. Some people treat strings as if they were as cheap as ints and floats. Especially people from a scripting language background. They're not value types! They're class types with syntactic sugar and a little extra magic (interning). Don't concat unnecessarily, whether with StringBuilder or not.
please join https://www.meetup.com/LA-NET-Meetup/ -- for free .NET workshops+classes. 
and UWP? 
As someone learning all this, Googling a problem with XAML does indeed give all sorts of various results depending on how old the article/post was. Can be a pain. 
I'm curious about the overhead of instantiating a new StringBuilder instance. It may not be much but I don't think it's an accurate use case to only instantiate it once and then perform 100000 operations with it. I think the cost of creating the StringBuilder should be included in the recorded time
That doesn't make OP wrong. If it's 4,000ms vs 2,000ms, it's 4,000ms vs 2,000ms. It wasn't a benchmark about writing to disk. OP isn't questioning which looks nicer or if string interpolation sucks. It was simply which use performs better on its own. OP never said it sucks
Why? I don't live anywhere near LA. And there's not even a single upcoming event.
This is a typical example of a shit benchmark. Use a proper framework and see if the results hold.
Oh man I would love to have that. Do you know of a project like this that already exists? 
In your example concat is only about 50% faster, so I guess interpolated might actually be just as fast in some cases.
Ideally, we would write our code to behave with collections of objects, rather than directly with a repository or DataContext. That ultimately gives you the flexibility of not been tied into a specific tech, and allowing more freedom for testing. However, EF has grown a lot over the years and does allow you to create some decent testing scenarios without needing to attach to an actual database. So, a wrapping IRepository pattern isn't needed per se, it just protects you from lock in, if that is a concern as you control that interface. 
Removed: Spam.
I jumped on this post expecting to be able to say don't blindly use string builder... But you guys seem to have it all under control... Carry on.
&gt; FormattableString TIL!
Doesn't matter in this case but I ran some comparisons a few weeks ago and it turns out string interpolation is thousands of times slower than string.Format. You're right to use it here but when performance is more important interpolation isn't always the right choice
You are correct, I completely forgot about that. From my personal experience though, a lot of the optimizations are done JIT instead of at compile time for whatever reason
A Mac is a "toaster". Got it. I'll carry on writing my cross-platform apps. You carry on doing what you do.
Great points everyone. I learned a lot from the conversations here. I also updated the post with some of the points you guys called out. I will also try to use a proper benchmark and publish more accurate result soon.
Yes, of course, why would you learn something which is going to die? Tho, I guess it's better learning WPF than COBOL.
Well, the first step is to figure out what your function signature should be. The input is a string, so that's easy: ???? PermuteAsterisks(string input); But what should it return? There can be multiple string outputs, so we need some sort of collection or enumerator. Might as well use the base interface: IEnumerable&lt;string&gt; PermuteAsterisks(string input); Now all you have to do is write a function body that conforms to these types. (To be continued...)
Your class has no public static methods, and in your first screenshot you did not create an instance of your class. Everything is working as intended. I'd suggest you do read the C# Yellow Book (http://www.csharpcourse.com/). It's free and it will teach you the basics of C#.
The `Evalutate` methods are instance methods, not static methods. So you need to create a new `OpenSimplexNoise` object to use those methods.
They're instance methods, not static. You need to create a new instance of the class in order to invoke them: var myOpenSimplexNoise = new OpenSimplex.OpenSimplexNoise(seed); myOpenSimplexNoise.Evaluate(myX, myY); 
Separate question, since you're a front end developer: how would you solve this in JavaScript?
In the inductive case, we know our `input` has some character at the beginning, and the rest of the string can be pushed off to a recursive call to `PermuteAsterisks`. Let's get some variables in here to make that happen: char first = input[0]; string rest = input.Substring(1); Now we can decide what to do based on the value of `first`: if (first == `*`) { return '0' + PermuteAsterisks(rest); return '1' + PermuteAsterisks(rest); } else { return first + PermuteAsterisks(rest); } Well, we're close, but we have that "can't convert `string` to `IEnumerable&lt;string&gt;`" problem again, plus now it's complaining about the opposite direction too!
ah, thanks for the explanation. I missed that bit in my studies, but I guess I learned it the hard way. now I just need to figure out how to use that output. This is my first time using someone else's code(and someone else who knows things I don't), so I don't quite know what to look for. thanks for the help!
I'm writing desktop apps for Windows 7 What is a better choice?
Thanks for the help, I got it figured out thanks to you guys. The root of the problem is that it wasn't actually my class at all! I didn't know what to look for in someone else's code to be able to help my own with it! I've tried, and as much listening to teachers, tutors, and writers that I have done over the last four years has helped, I was barely able to remember the syntax, let alone why it was a certain way. working from the bottom up didn't seem to help, and there wasn't much information for me to infer the implications of, because of the focus in implementing it, instead of focusing on its uses. But I was able to get to the point of making a console application to generate, process, filter, and display ascii heightmap in just three days by just sitting down, doing it and troubleshooting problems. I think this kind of learning is very much more effective for me. Thanks for the suggestion though, and next time I have a tough issue that's probably my fault, I'll refer to it first!
A markup/typesetting renderer. You could make your own markup language or implement something that already exists, like LaTeX, HTML, Markdown, etc. depending on how detailed and difficult you want it to be. Having something like that which would easily render a markup resource in a wpf control would be really nice.
nice idea. I'd pay someone to do that. 
I have not seen anything similar yet. 
Well, it depend. Did you ever learn programming before? How far are you already into WPF? How far are you into C#? Why did you want to learn WPF in particular? The list can go on and on. But I guess you could take some [sort of survey](http://choosing-a-language.techboss.co) about what you want to learn.
I've written a bunch of programs in c# WinForms before and read online that I should use WPF instead. (Those articles were probably old) I've been using it for about a month. I like it despite the binding being a little confusing compared to WinForms. I'm getting a hang of it. The survey said I should learn c#. From what time learned is that if I am writing desktop apps on something older than windows 10, I should stick with WPF. I don't think I would benefit at all transitioning to a web based app. 
 i'm looking to read this from a web page, so i don't have any control for the web site.
one problem you are having is your terminology is a bit mixed up. that's not a "strong value" of a "class", it's a child element of a span. i have no clue what scraping library you're using, but look into iterating over the span's child elements. 
 This is some of the code i have for scraping. HtmlElementCollection allelements = _webBrowser.Document.All; foreach (HtmlElement webpageelement in allelements) { if ((webpageelement.GetAttribute("Strong") == "4")) { }
Simple answer: Find the * positions and store them in a list. Count them (n) Count from 0 to 2^n -1, representing as a binary string. Substitute each back in at the positions in the list. 
Thank you!
haha so true so true. *starts so sob*
touche.
There is a better answer further down. But anything that has an opening and closing tag is an element. So you are looking at the wrong thing. 
Indeed, no need recursion at all.
I totally agree with this. People often write cross platform apps for no good reason and it ends up being slightly shitty on 4 platforms vs great on 1
Thats what I am doing, and it is kind of where I got my code from. I am looking for ideas as to why such code would not work while Console.WriteLine does.
Its never null, and its acting like there is a deadlock. What is confusing me is why directly writing the return in console inside the task works, while returning the string from the task to write later to console does not. Would not a deadlock block both?
I tried event of selected change and I code I put on it is listbox1.selectedindex= listbox2.selectedindex;
Looks fine to me. Try using the debugger and make sure that the values are changing and the events are firing as you expect them to.
Also the comment "its acting like a deadlock" is probably the smoking gun that the issue is in DoJob.
Yes. Since a switch case is merely a result, the operation can be performed at case evaluation. The down side is the number of case evaluations is a direct coefficient of evaluation time. That is to say, the the operation is particularly complex, it's better to compute once rather than on every case.
`Task&lt;string&gt;.Factory.StartNew(() =&gt; {return dojob(test); })` you aren't assigning the return value of StartNew to anything. var doJobTask = Task&lt;string&gt;.Factory.StartNew(() =&gt; {return dojob(test); }) var doJobResult = Task.Result; Task.Factory.StartNew returns a task. This is documented on the MSDN article I linked: // Return a value type with a lambda expression Task&lt;int&gt; task1 = Task&lt;int&gt;.Factory.StartNew(() =&gt; 1); int i = task1.Result; Without seeing actual code, I have to assume you're using it exactly as it's written, and it's wrong as written. The reason why the first one with Console.WriteLine works is because the task itself is invoking Console.WriteLine.
Okay I'll start working in Visual Studio. Our instructor has us working in notepad. 
Just switched it over to switch statements.. a lot easier. Thanks. 
Wow that's a terrible way to learn code. MS offers a number of free options for schools and personal use.
Ouch.
We are using the Developer Command Prompt for VS2013 but only utilizing notepad to code. 
Yeah we are only to use what we have learned so far and have to comment each line explaining why we are doing what we are.
[Relevant XKCD](https://www.xkcd.com/221/).
[Image](https://imgs.xkcd.com/comics/random_number.png) [Mobile](https://m.xkcd.com/221/) **Title:** Random Number **Title-text:** RFC 1149\.5 specifies 4 as the standard IEEE\-vetted random number\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/221#Explanation) **Stats:** This comic has been referenced 719 times, representing 0.4539% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_dhvjd79)
It's a bit how schools for years banned calculators so you'd have to do calculations manually. Also like using Pascal to tech programming when it's just not used at all anymore in industry. Totally impractical in the real world where people use, like tools!
**Your education provides you a solid foundation upon which you can build further knowledge.** It does not teach you everything you need to know in this business - that would be impossible in a meaningful time frame, especially considering how vast and different the kind of jobs are. Stop bothering about this and continue to learn. Apply for jobs, learn from interviews, ideally have some side projects for now (really doesn't matter what).
In this industry experience in the job is far and beyond more important than what you can learn in school, you just need that piece of paper to get you into the first job. If you feel you should know more, feel free to develop personal projects that push you and keep those projects as a portfolio of reference to show in an interview. but relax because when you do get your first job, everything you already know will become redundant after a short while. 
If there was any kind of thread synchronization required between the calling thread and the body of `dojob` (which, for the sake of discussion, I'll assume is the same for both `dojob()` and `dojob(test)`) then you would see exactly this. The first code is executing `Console.WriteLine` on a different thread than the calling thread. Once the `Task` is started, execution on the outer thread is continued and whatever synchronization primitives that are in use are likely released, allowing `dojob` to work. But in your second example, where I assume you're calling `.Result` (which is bad, so don't do that!) then you force the outer thread to wait for the task to complete before execution can continue. If the outer thread is holding a lock that is required by `dojob`, then it will never move past this since it is, by definition, a deadlock. What you should really be doing is: * Don't use `.Result` or `.Wait()` on a `Task`. Just don't. If you absolutely must, then you have to be aware of the potential for failures just like this. * Instead, either write synchronous code (since that is basically when you've created here but with the added overhead of spinning up tasks) or move to using some kind of continuation, whether it's with the first-gen `ContinueWith` syntax or by using `async`/`await`
[Relevant Dilbert](http://resources.infosecinstitute.com/wp-content/uploads/121411_1611_SecureRando1.png)
I have been working for 2 years soon and I don't feel ready
A really good experience for me was building an Enity Component System Framework from scratch and then building something small with it. 
Automate your life, it's a fairly broad problem. Will allow you to switch subjects every few weeks.
I expect that you will have an easier time if you didn't use the type system on a per item basis because you can't add `Item` types unless you do code generation.. A more maintainable and less restrictive way would be using your `Item` class and adding properties like `Category` and `Name`. If you don't do this you can easily get 100s of classes for every specific `Item`. Increasing compile time and code complexity while the gain is low. Edit: &gt; The big issue is here is sorting suppliers by the type of T. I want to get go through the list of Requests, get its type, find a matching type of supplier from the list, and process the request. If this is something you need to do a lot (like multiple times a frame) then a `Dictionary&lt;TCategory, IEnumerable&lt;TSupplier&gt;&gt;` gives excellent performance where TCategory could be `Flower` and TSupplier would be `Supplier&lt;T&gt;`. Say you got the `Request` from an event. You could do a quick lookup on the category and then get all the suppliers that could send the item. 
&gt; feel like I don't know shit I've been a professional software engineer for over 30 years, and sometimes I feel like that too, so don't worry! It's a massive field with a huge amount of different technologies and languages, so it's impossible to know it all. Once you have the basics of programming down, the key skill to have is the ability to look things up.
Not even that as it is, without variance a `Supplier&lt;Flower&gt;` is not a `Supplier&lt;Item&gt;`. Of course, *everything* inherits from `System.Object` so you can technically stick them in a list together, but you can't interact with them in a meaningful, type-safe way.
It's a good learning experience with C# if you use the type system but I wouldn't recommend it if this is a project you develop with other people and/or for a longer period of time.
Only if you are doing it from an async method.
Tasks are perfectly usable without async/await. After all, they existed before async/await.
You may well never get over your impostor syndrome but you can work through it. I'm self taught with a bachelors degree in an unrelated field. For my first 2 jobs out of school, I programmed to automate my work. By the end of that 2nd job I was coding full time. When I got my first actual programming job there were many days the first month that I came home literally in tears about how over my head I was. After a few months I found my sea legs and eventually began to thrive. I've been doing this long enough now (15 years) that I don't feel unqualified. I still feel like the dumbest person in the room though. Some days it makes me work harder to keep up, some days it's depressing to always feel in last place. Impostor syndrome is insidious in that we think, "I know about impostor syndrome but with me it's *true*."
20 years here. Same. 
Ok, true, they aren't the same collection. But you can still put flowers in Supplier&lt;Item&gt; and then do type checking but thats the kind of stuff I'm trying to avoid. 
&gt;But you can still put flowers in Supplier&lt;Item&gt; Without covariance, you cannot cast `Supplier&lt;Flower&gt;` to `Supplier&lt;Item&gt;`. And the interfaces you posted are not and cannot be made variant. You're not going to get around doing some manual type checking and casting here.
Sounds good. To lend a bit of a hand, look to download what's called the "Community" or "Express" editions of whatever version of VS you plan to use. Those are 100% free, possibly just requiring you to create an account with Microsoft. They're nearly full featured versions of Visual Studio minus a few bells and whistles, but for schoolwork it's more than sufficient. From there you'll want to find resources on how to debug with Visual Studio. The biggest item you'll want to learn first is how to set and use break points, which allow your code to be "paused" at certain points in processing, which then allows you to "step through" your code line-by-line to figure out what's going on. You can hover over variables and collections to see what's currently stored in them as well. Coupled with cool features like Intelisense and snippets for automatically completing parts of the code for you, it should also help you code faster. Unfortunately if this causes any issues with your professor, you can try to tell him that no one codes the way he's having you code (literally anyone doing .Net here will back that up), but in the end he gets to call the shots. I don't know how your classroom is set up or how tests/exams will go, but bear in mind you may not be able to use VS on those, and while it may suck your instructor absolutely has the power to tell you what you can and cannot do/use for his tests/exams.
I attempted to use await, it caused a dead lock to. I have since rewritten the majority of the code and have gotten past the issue. It seems the dead lock was caused by one object, but only the task was accessing it.
&gt;lambdas expression selecting the value where the position is '0'. No, the lambda *captures* the `value` variable itself, not just its current value when the lambda is created. When the loop increments `value`, the next iteration of the enumerator will use the updated value.
HAH! get used to that feeling you will spend your entire career that way. The most important skill to learn as a developer is the ability to teach yourself new things. Your degree is only a small foundation on which to build on. Your very lucky if you already know a good bit of C# and coming into this job market don't worry to much about being able to get a job because things a really good for .Net Developers right now! You mentioned you like website development. I'd suggest learning .Net Core/Web Api 2/ and any SPA (React, Ang1, Ang2, Aurelia if your a hipster). Good Luck!
&gt; I'm learning C# at work so I can move from front end development to full stack. What does C# have to do with front-end vs full stack? C# could be front-end to middle tier. Or are you mistaking C# with the .NET framework? If you want to be full stack and you already do front-end, you could learn other things like middle tier, back-end ( DB ), etc. &gt; I'd just like a point in the correct direction of how I should go about solving this problem. What have you tried so far? In a simplistic case, this seems like a simple "loop within a loop" (nested-loop) problem. Have you tried anything? If you tried something and post your code that would make me more willing to help.
Can't remember much of what I was taught in college, fuck that was some confusing shit. Much easier to learn by doing, in my opinion. 
You aren't fluent in a dozen languages. If you think you are, you aren't fluent in any. It takes years to be truly "fluent" in any significant language + libraries/frameworks/etc. Not only that it takes time to keep up to date with a language. 
Develop some habits. I say develop them because for most of us it takes a conscious, continual effort. * Maintain a planner. I'm talking, a physical, dead-tree planner. I keep two: one for work and one for everything else, because I like Franklin Covey for business/time management-heavy needs and I like my bullet-journal for keeping track of my day-to-day life. * set aside time for learning something new **every single day.** start with 15 minutes. An hour is better, though. * get a hobby that lets you hang out with other geeks. This is important to your well-being and personal balance. They don't have to be programmers. They just need to be other nerds and geeks. * Code something fun. That means something different to each of us, but make sure that you constantly have a fun coding project that you are actively working on, that's just for fun; something that makes you remember why you like doing it. This alone will make you continue to hone your skills, because you'll get to a point where you need to learn new things to make your project do what you want. * Learn git, if you haven't already. Learn to commit well. Learn to bisect your commits. Learn to use git hooks to create an automated build pipeline for ALL THE THINGS. Learn to merge, learn to squash. If you comprehend git, you are way more hireable than the next guy, because even if you screw something up, you do it in a way that doesn't screw everyone else up. * Learn other languages. Every language has a virtue. Learning those virtues helps you code better. * read blogs. Lots and lots of blogs. Find a few that speak to your coding soul. Phil Haack's blog is a good one, for instance. This keeps your finger on the pulse of the industry. It also satisfies the "learn something new every day" bullet. No one knows enough, and most of us are in Schrodinger's box, constantly in a state of both not knowing enough and knowing too much. Just get out there and do things. When you're busy doing things, you don't have time to worry about whether you *can* do them, because you're too busy figuring out *how* you can do them. 
^ This.
Best advice ever.
I'm pretty sure everyone feels that way when the graduate. The important thing is to keep learning and never be afraid of asking questions.
Unity and C# is am incredibly nice combo, I second that as well.
Ran another test using enchmarkdotnet.org and published the result [here!](https://koukia.ca/string-interpolation-vs-string-format-string-concat-and-string-builder-performance-benchmarks-c1dad38032a) Though the test is different than the original one, this new test is a test to compare string interpolation with string builder, string concat to build small strings with few variable arguments in them. based on the environment I use, seems like Interpolation loses to Concat and Format, but wins the String Builder! 
Good stuff. This looks like the best port of Readline I've seen so far.
Since there is Console.WriteLine in there it can't be a GUI app (at least not on Windows), so I don't see how .Result would trigger a deadlock in general, since console apps don't have synchronisation contexts normally.
I'm going to allow this because it may be relevant to the heavy discussion [last time](https://www.reddit.com/r/csharp/comments/6cckob/c_string_interpolation_performance_test/), but I suggest you read up on Reddit's [self-promotion guidelines](https://www.reddit.com/wiki/selfpromotion) and try to take a more active role participating on content other than your own.
1. You can have more than 2 benchmarks in a single class. 2. To get the most out of StringBuilder you would ideally be reusing instances when they are known to be small. 3. your test cases do not produce the same string 4. `string.Format(...)` and `$"..."` compile to exactly the same thing when the expression is in a string context. There is no point to test both. compacted code and cache implementation: public class StringBuilderVsStringInterpolation { private readonly string data1; private readonly string data2; private readonly string data3; private readonly string[] arrdata; public StringBuilderVsStringInterpolation() { data1 = Guid.NewGuid().ToString(); data2 = Guid.NewGuid().ToString(); data3 = Guid.NewGuid().ToString(); arrdata = new[] { "test format", data1, ", ", data2, ", ", data3}; } [Benchmark] public string StringConcat() =&gt; "test format" + data1 + ", " + data2 + ", " + data3; [Benchmark] public string StringConcat2() =&gt; string.Concat(arrdata); [Benchmark] public string StringBuilder() =&gt; new StringBuilder().Append("test format").Append(data1).Append(", ").Append(data2).Append(", ").Append(data3).ToString(); [Benchmark] public string StringBuilderCached() =&gt; StringBuilderCache.GetStringAndRelease(StringBuilderCache.Acquire().Append("test format").Append(data1).Append(", ").Append(data2).Append(", ").Append(data3)); [Benchmark] public string StringInterpolation() =&gt; ($"test format{data1}, {data2}, {data3}"); } internal static class StringBuilderCache { private const int MAX_BUILDER_SIZE = 260; private const int DEFAULT_CAPACITY = 16; [ThreadStatic] private static StringBuilder t_cachedInstance; public static StringBuilder Acquire(int capacity = DEFAULT_CAPACITY) { if (capacity &lt;= MAX_BUILDER_SIZE) { var sb = t_cachedInstance; if (sb != null) { // Avoid stringbuilder block fragmentation by getting a new StringBuilder // when the requested size is larger than the current capacity if (capacity &lt;= sb.Capacity) { t_cachedInstance = null; sb.Clear(); return sb; } } } return new StringBuilder(capacity); } public static StringBuilder Acquire(string value) { var sb = Acquire(Math.Max(value.Length, DEFAULT_CAPACITY)); sb.Append(value); return sb; } public static void Release(StringBuilder sb) { if (sb.Capacity &lt;= MAX_BUILDER_SIZE) { t_cachedInstance = sb; } } public static string GetStringAndRelease(StringBuilder sb) { var result = sb.ToString(); Release(sb); return result; } } results on my machine: Method | Median | StdDev | -------------------- |------------ |---------- | StringConcat | 105.9454 ns | 3.0630 ns | StringConcat2 | 93.1596 ns | 5.3751 ns | StringBuilder | 206.9042 ns | 4.7358 ns | StringBuilderCached | 91.6278 ns | 2.4529 ns | StringInterpolation | 195.1592 ns | 8.0290 ns |
I'm not sure I like the EF Core pattern of "check if seed data exists on startup and create it if it doesn't exist." And yes, this is an [officially suggested pattern](https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/complex-data-model) for EF Core, even though MS wouldn't be caught dead suggesting it for EF 6. Search that page for "Seed the Database with Test Data" if you don't believe me.
Thanks, yes it is related to the previous discussions on that post.
Yea strongly agreed that this code really smells. That may be kind of a 'magician trick' but in no way it should be encouraged. Comparing to traditional for-loops, it gains nothing in term of readability, performance or succinctness; plus it offers you free cans of worm!
By default, Reflection metadata is not automatically emitted by the Bridge.NET compiler. The metadata can be included by adding the [Reflectable] attribute to the class. Deck: https://deck.net/b338f140b54c7845167046b5f29aaa4e This default functionality should be reviewed by the Bridge team.
What's wrong is proxy and search result to explain my problem ??? 
I said plz any my native language isn't English I'm still learning I didn't cross any rules is proxy and search link nothing wrong on it I expect readers helps lbecause if I was know others help I well not come here to ask .
Deaktop apps are pretty dead, generally. Most people want their apps to also run on phones and tablets, and that is where the big push for the web is coming from. 
I disagree--the advice to avoid calling `Wait()` or `Result` whenever possible is a fundamental part of asynchronous programming with the TPL. Saying that the fact that it's a console application makes it irrelevant and that all tasks will execute on thread pool threads are sweeping generalizations that are provably false. While it's true that if it truly is a console application then it won't require the same kind of thread-affine programming model that a Winforms/WPF or ASP.NET application would, it's trivial to think of an example where thread synchronization primitives are still in use for other reasons (such as, perhaps, synchronization for resource access). Likewise, a task will execute on a threadpool thread if both... * the task is started through a `TaskFactory` (`Task.Run`, `TaskFactory.StartNew`, etc.) * the default task scheduler is used and the task is not specified as long-running Other cases that are just as common as CPU-bound examples above are things like IO completions (like network streams, database operations, file operations, etc.) which will execute on IO completion threads, or even structures like `TaskCompletionSource` that give the model more of an event-driven execution style. The entire point of the TPL is to enable the developer to abstract away these implementation details and write code that is *asynchronous*. Calling `Wait()` and `Result` *in general* work against this premise by introducing synchronous waits into otherwise asynchronous code. That said, a couple of examples of real use cases for `.Wait()` and `Result` would be... * When using something like `Task.WhenAll` to execute multiple async tasks simultaneously. If the return types are heterogeneous, you'll need to hang on to the original `Task` object and call `.Result`. But in this case the call is not actually going to wait on anything since the task is complete. * At the root of something like a console application. Generally a console application that makes use of async functions should have something along the lines of an `async Task MainAsync(object[] args)` and the `void Main()` should really just consist of `MainAsync(args).Wait();` so that the rest of the development can use the async model. I'm not saying that there is no use for those artifacts, nor am I saying that these two examples are the only legitimate ones. But I am saying that generally if you're calling them outside of those cases, you *probably* need to refactor.
&gt; Since there is Console.WriteLine in there it can't be a GUI app Sure it can. It just writes to Stdout, no issues what so ever.
Can you give us some code or at least the error when you try to compile your app?
That's awesome! You should do a breakdown of the hardware as well, I know I'd appreciate it. Maybe comparisons to commercial setups?
Stdout is not associated with anything (visible) on Windows for GUI apps. It doesn't show up on the console even if you start the program from the console.
Why reinventing [SafeHandles](https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.safehandle\(v=vs.110\).aspx)?
There's so much wrong with this I don't even know where to start.
&gt; There's so much wrong with this I don't even know where to start. Would appreciate if you can give few hints. We are all here to learn after all :)
The code isn't really bad. The issues are rather that it might be difficult for someone to understand what's happening without knowing the immediate/deferred execution of LINQ, and that variables aren't describing what they are for. The solution itself is pretty good
I'm not sure if I understand the logic behind this. As far as I can tell, the whole ref counting thing doesn't matter, because the ref count always starts at 1 and can only ever be decreased by disposing a `Handle&lt;T&gt;`, which implies that it was previously increased. So it can never actually reach 0 and cause a dispose. Your test also assumes that the underlying object is disposed by finalizing the `SharedHandle&lt;T&gt;`, so what is the `Handle&lt;T&gt;` even for?
¿Has colgado tus practicas de universidad aquí? ;) Joder, me hubieran venido bien hace una década.
I'm not saying that ref counting is unnecessary, just that in this implementation I don't see how `m_refCounter == 0` would ever be true.
&gt; Yes i'm scraping a website. :D Re-read your own post and tell me how we were supposed to guess that?
I don't think it's that bizarre in principle to have reference counted IDisposables. Not everything can be wrapped in a `using` statement (e.g. I want to open a file stream for a longer period of time, and it escapes local scope by being assigned to a field) and you could have multiple references to the same disposable object. If you only want the object to be disposed after everything is done using it, then reference counting seems like an obvious attempt. It's not really that different from `delete` on a pointer, right? Sure, you're not freeing memory, but you're releasing *something*.
Great news -- years from now when you and your coworkers are exchanging horror stories, you're going to have an outstanding one.
Is there any chance the old devs who worked on it could point you in the right direction to get it running on your machine? There might be a configuration guide hanging around somewhere. Or perhaps contact a customer that is experiencing bugs and find out how they have it set up or configured? I'd hope that the customer who wants it fixed would be willing to cooperate with you.
what source control DID thry use? perforce? tfsc?
I hate to say this, but it sounds like they hired you in a failing position. If you can't even set up a development environment or a working image you can't do any work. I hate to say it but it sounds like you were set up as a fall guy. I don't know anyone that can take a 'legacy' system fix the bugs and deploy it in under a month. Maybe if they had someone to teach you, but it seems you may be the fall guy. Management will say, well we hired this guy to fix everything and he lied to us about his skills. I hope that isn't the case.
The code you found can be simplified. You don't need to pre-populate a multi-dimensional array. You can keep a running total of the diagonal sums as you parse the array values from the input. int leftDiagonalSum = 0; int rightDiagonalSum = 0; int size = int.Parse(Console.ReadLine()); for(int i = 0; i &lt; size; i++) { int[] input = Console.ReadLine().Split(' ').Select(int.Parse).ToArray(); leftDiagonalSum += input[i]; rightDiagonalSum += input[input.Length - 1 - i]; } Console.WriteLine(Math.Abs(leftDiagonalSum - rightDiagonalSum)); 
That's what I am thinking too. If there was some learning path, code on version control and documentation, everything would have been easier. They know my skills and my capabilities, the issue is I didn't expect a such non professional working environment of the previous devs.
;))
You have access to the previous versions, even though you say they used folders for them, so... git init a new repo. Commit each version sequentially until you are done. Then fork and start a new branch for your own work. Study the platform they were using and their dependencies. Use online search / stackoverflow to debug your errors until you have a working development version. Compare your version with the live version from the client to make sure you know what's different so you don't deploy anything you aren't sure about. Use Git or any other system to have versioning of the deployed versions, and to be able to revert if needed. For each new bug / feature create a dedicated branch and keep track of it's changes etc.
This company needs a consulting group, and source control(!!!), not just one beginner. No disrespect intended. At the very least try and set up some form of version control, and if you do get the job done through their barriers of bullshit, milk all the knowledge and money you can and get out quickly. Your english is good.
What is your definition of "better"? If you want a more condensed version of what you already have, you could use: return String.Concat(Product.Where(item =&gt; item.Type == type).Select(item =&gt; $"Name: {item.Name}Type: {item.Type}"); (Note I left the formatting of the string as-is. You may want to consider including comma separators between "Name" and "Type", or newlines between each entry.) But if you wanted a more direct/purposeful lookup, you could manage a `Dictionary&lt;string, List&lt;CGI.Product&gt;&gt;` for example. But yeah, it'll help if you give us an idea of what kind of areas you're looking to improve in. EDIT: Even so, I wouldn't do that in a one liner; can be hard to mentally parse. This might be easier: var matchingProducts = Product.Where(item =&gt; item.Type == type); return String.Concat(matchingProducts.Select(item =&gt; $"Name: {item.Name}Type: {item.Type}"); EDITx2: Replaced `String.Join` with `String.Concat` because I'm a dumdum. Could use it with newline separators though: `String.Join(Environment.NewLine, Products.Where(blahblahblah)...);`
I would suggest you document all the external factors (e.g., the lack of version history, documentation, working environment) impeding the work and report it to your management/boss in writing and dated. Regardless of your skillset/experience, these issues would likely be insurmountable even for seasoned developers. They may try to paint you as a fall guy, but this might help your case.
Take it one step at a time. Google each error when trying to run the program. I bet you just need to setup SQL server properly, if you can't even get it to run. Did you set the website up in SQL server? eg, point to the solution? Otherwise, no offense to you, but they need a more experienced dev to either do this for you, or to show you the way.
The biggest thing you need to be doing, if you haven't already, is DOCUMENT EVERYTHING. Hold on to every e-mail from anyone who's involved in the matter, get e-mailed responses to questions when needed, and back up everything if possible. You need to cover your ass on everything you possibly can, so if they try to blame you for any shortcomings that are actually the fault of others, you can prove otherwise. I'm not trying to scare you or anything, but you really do need to take any steps necessary to guard yourself against their incompetence. Having everything in writing and tied to their e-mail address means if they say one thing and you can prove otherwise with an e-mail that came directly from them, it really reduces their position to argue against you. The more you take steps to cover your ass if things go south, the better. If push comes to shove and you're removed/exited, I wouldn't view it as the end of the world. Explained calmly and rationally to a hiring manager who "gets it", I can't think of anyone rational who would agree the situation you walked into was in any way your fault. It sounds like they thought they could hire just about anyone to fix it, and went cheap (no offense intended). Now it's gonna bite them in the ass.
Thank you all for the help. The reason that i'm asking this is because i wanted to do this with some of the language features that C# has to offer. I will try all of your implementations.
Yeah, this won't work until you get a local version working. It doesn't matter if it's due to configuration issues or anything, the process is the same. First and foremost, [get yourself one of these](https://www.webstaurantstore.com/west-bend-58030r-30-cup-1-2-gallon-aluminum-light-duty-coffee-urn/53958030R.html?utm_source=Google&amp;utm_medium=cpc&amp;utm_campaign=GoogleShopping&amp;gclid=CjwKEAjwu4_JBRDpgs2RwsCbt1MSJABOY8an9yP9OdBcmiQYAAhXxaejrxUOfjzl7Fpfpmfyd8O3DxoCGJ3w_wcB). You'll thank me later. Now, how badly do you want to pull this off? How badly does management want to? I hope it's shitloads, because you're going to be putting in a lot of overtime until this gets fixed. The process is simple. 1.) Attempt to build 2.) Build errors? Go to 5 3.) Build successful? Attempt to run it 4.) No errors? Go to 6, otherwise continue 5.) Take error message, Google error message, find responsible section of sauce, fix bug. Go to 1 6.) Congratulations, you have a working local deployment. 
/u/PredaPops is correct. The manager knows they are screwed and you were hired to take the fall. They will dump this all on you then fire you. Quit now. No half decent hiring manager is going care that you only stayed a couple weeks, if they ask your response is "They misrepresented the role, the state the project was in, and their timelines." Staying only 2 weeks backs up that statement and shows you have a backbone. Its a lot more difficult to say that if you are there more than a few weeks. When they ask what you did while you were there, you can say, "They didn't have any source control, so I got them setup on git while I was there". 
Another suggestion I have is if you are familiar with Unit &amp; Functional Testing I would start looking down this route. I have found it makes it easier to isolate the issues into smaller pieces preventing you from getting overwhelmed with all of the other code which surrounds the problem. 
Saving for later
&gt; They know my skills and my capabilities &gt; I am a beginner at this programming language... Beginner at programming &gt; the two developers maintaining the code for this... got better opportunities and left. &gt; Contact the previous developers... One of them (the main) hardly ever answers. I don't think this place set you up to fail. It sounds like they don't properly value and therefore compensate their developers. I think you're in over your head. Sounds like even with version control and some documentation you would still be in over your head. Just the fact that you didn't ascertain that before accepting the job says so, and there shouldn't be anything so complicated about setting up a running local environment that you can't plod through it and sort it out.
Dirty little secret of the industry - many smaller shops are like this. * XCopy deployment. * Version control via folder copying (SuperApp_201401, SuperApp_ForSteve, SuperApp_Release.95, etc) 
The whole point to unit testing is to make sure your code does what you think it does. You can approach it from several angles - the simplest being using your test code to drive the main code so that you can step through it in the debugger without everything else getting in the way. When to write a test is the subject of some debate. Some of the criteria I use is: * Does it add value * Is the main code going to be used by other developers in unpredictable ways * Does the organization have a mandate for *x*% code coverage by tests A mnemonic that helps in designing tests is "AAA" - Arrange, Act, Assert. Which corresponds to setting up the test conditions, executing the code under test, then checking that the results match what you expected. You can do unit tests without interfaces, base classes, dependency injection, and so on. But having those things makes it easier. Get a test running and passing, then refactor your code to add those things (if needed). This is another mnemonic that helps in testing - "Red Green Refactor". Which means your tests are initially red (failing) until you write code to make them pass (they become green). Then you refactor to make the code clean and understandable. HTH. 
I think you're treating every tool as a hammer. IDisposable can be fiddled with to reference count, and all sorts of other things, but then you have a hammer based solution for something that needed a wrench (fancy weird shaped hammer). You get away from the original intent of IDisposable which also makes it harder work for anyone approaching the code for the first time. 
One thing I like about local functions is that they have a much more limited scope. If you have a class with 5 private methods they could all be calling each other. If you have a small helper method that is only used by one of the other methods, then a local function makes it really obvious that "this helper function is only used by this method". Having said that they haven't quite made their way into any production code I've written yet haha.
A *unit test* tests a unit of code in isolation. It is distinct from an *integration test*, which tests a whole system, or multiple parts of a system operating together. Most people discussing unit testing are probably talking in terms of *automated* testing, in which tests are built as a program and run, often as part of the build processes, to verify that the tested code meets known requirements. This may or may not involve actual unit tests (or it may involve integration testing). Automated testing of this sort exists to codify stated requirements and to verify that the code still meets them. Interfaces are useful for unit tests because code that is accessed strictly by interfaces is much easier to swap out implementations with specific, deterministic behavior. This also tends to save time, by swapping out, e. g., database access with in-memory operations configured by the programmer. You could try checking out *Test-Driven Development* by Kent Beck. I think I picked up my opinions by practical experience, though.
I will give that book a shot. Thank you for your reply. I think I have much more to learn as a baseline to fully understand what I am after.
I will research those mnemonics, see if i can wrap my head around whats going on. Can you clarify "Using your test code to drive the main code"? I am not sure I fully understand that statement. But as far as my general questions, Thank you. I am more or less looking to ensure I am doing everything right since I am 100% self taught, I feel like this points me in a better direction.
The thing to remember about tests is they're not to make sure your code is readable, they're to confirm two things: 1. The code works, under a variety of scenarios, including edge cases and bad data 2. The code doesn't get broken when you or another developer needs to make changes to it. The latter is arguably the most important. We don't always remember all the context and edge cases we were considering when we wrote some code, and unit tests enforce the handling of those cases the next time you make changes. If you make a change and a test starts failing, it's a strong indicator you've introduced an unexpected regression. Also when you find and fix a bug, you should add a new test to lock in the fix. That way the same bug can't be reintroduced without a test failing.
So that if I want to create a unit test around it I can use the assembly-level attribute InternalsVisibleTo https://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.internalsvisibletoattribute(v=vs.110).aspx 
Removed: Rule 4. You'll have to dive in and make an attempt. If you run into issues, then post the relevant code that you have and explain what is/isn't working. Converting from an `int` to a `string` is very simple (just `string myString = myInt.ToString();`), but I suspect you're saying the biggest issue is how do you convert from `10` to `"X"` or `3` to `"III"` (for example). I suspect that a general purpose converter for any arbitrary number is outside the scope of what is expected of you. Start by doing some hard-coded conversions of the numbers from, say, 1 to 20 using `if/elseif/else` or `switch` cases. Then if you need to solve a more general case, maybe you can see some patterns or get some ideas from that point.
Something I haven't see an answer to yet: are local functions allocated when their containing function is called?
If it's a particularly complex piece of logic, or critical to one or more of the publicly visible methods, then I probably want to test it in isolation to make sure it works correctly. So .. depends on how important it is.
Ah, So i would be testing the method as a whole, not its individual parts? That makes a ton more sense as that was not readily apparent when it came up in video tutorials.
No, nothing is allocated for a local function unless it is converted to a delegate that needs closure over referenced locals. Otherwise, there is just compiler stack magic.
A local function is just a function, it's no more a delegate than it would be if it were a non-local function.
The intent is to deal with any kind of unmanaged resource the GC can't deal with appropriately, plus transitively all objects that keep references to such resources. That's very broad. I haven't ever personally wanted to reference count my disposables, but that doesn't mean a valid use case cannot exist.
Thanks.
Yeah exactly. You should test whole units like methods or classes. I recommend using Nunit for C#. It's a pretty good library and supported by all the major IDEs. You organize your tests into a class called a fixture. I make one fixture class for each class I'm testing. Then you can can make test cases as methods in the class that Nunit runs for you. Each test case may have multiple assertions (checks for failures) but you should try to only test one unit in that test case. Someone else talked about the great pattern of arrange, act, assert. In the case of a POST endpoint test case, you would: * Create a valid object * Make the post request with an http client * Verify the status code is correct or even the returned body In that same test case you could test for error responses too: * Create invalid object * Make post request * Verify the status code is 400 or whatever you expect on an error
As far as I read, most sources say that this should always point to the parent class (even in lambda functions), but somehow this is not the case. Am I missing something here? Is there any documentation on this issue?
You need to explain all this to your boss. It no likely that you can do it. The customer needs to be told asap. If you wait till the deadline its all going to bite you in the ass.
Are those happening in the same context? Is ReferenceTransform a property with strange and interesting set behavior? Because I tested with this: using System; using System.Collections.Generic; using System.Linq; namespace ConsoleApp2 { internal class PathNode { public object ReferenceTransform { get; set; } } internal class Program { private static void Main(string[] args) { var list = InitList(); var o = new Program(); o.DoStuffLoop(list); AssertAllNotNull(list); o.DoStuffMethod(list); AssertAllNotNull(list); Console.ReadKey(); } private static void AssertAllNotNull(List&lt;PathNode&gt; list) { if (list.Any(x =&gt; x.ReferenceTransform == null)) { Console.WriteLine("Failed"); return; } Console.WriteLine("Passed"); } private static List&lt;PathNode&gt; InitList() =&gt; new List&lt;PathNode&gt; {new PathNode()}; private void DoStuffLoop(List&lt;PathNode&gt; nodes) { foreach (var n in nodes) { n.ReferenceTransform = this; } } private void DoStuffMethod(List&lt;PathNode&gt; nodes) =&gt; nodes.ForEach(n =&gt; n.ReferenceTransform = this); } } and it looks like everything is behaving as expected.