Good point.
[Bundles](http://www.mono-project.com/Guide:Running_Mono_Applications#Bundles) in Mono appears to do what you want. However, it is Mono and not the Microsoft runtime.
Yeah I was looking into it, and most versions of windows comes with some version of the framework on it. I must brush up on my c#, since that's what a lot of companies are looking for.
I disagree. People should know what the computer is really doing with their code before going to high-level languages and forgetting about all of it. Now I am not saying that OP should make a huge program in C, but maybe program a couple of data structures / etc to know what is really going on with pointers etc. Also, inheritance / polymorphism is not something a new programmer should even think about yet. All it does to fresh blood is muddy the waters and destroy any chances at good program design.
Stick with the latest version. C# 5.0 is actually easier and more powerful than C# 2.0 because of the new features.
127.0.0.1 is the internal IP address to connect to yourself. If you want to connect to some external server you should use the external IP address of that server.
All NGen does is the ahead of time compilation and generates a native image which can be used to start the application from cache instead of JIT on every start. You still need .net installed to run it though. Your other example is interesting though, I haven't heard of that before.
This! First learn the language C# then you can start poking around in the latest version of .net
LINQ is more than just a replacement for SQL - you can use it on IEnumerables, XML, etc.
PHP as a language contains a lot of programming errors. They released the newest version with tons of failing unit-tests.
The survey does not make any sense (the questions are very hard to understand) and half the questions are broken in the latest google chrome.
That looks horrible. 
Why?
ok. I don't no where to start. there are several things to comment on. the URLs you're trying to hit on the webserver. test them in a remote web browser. if you get an error there then it's your php code. a 404 is a page not found. can be the same as a file not found. second, turn off multi-select on your listbox. listboxes have a change index event. on that event for-loop the selected items, (should be 1 item). download the item in question. feed the file into your viewer (or whatever you're using to show your files).
I agree, mainly because it's trying to do too much in a single course. Teaching basic programming concepts, OOP principles, *and* game development and logic all in a single course is a recipe for disaster. If it were broken up into 3 sequential courses, with the third course attacking the game development, it would have a much greater likelihood for success, in my opinion.
This looks like it's teaching using XNA, which Microsoft has pretty much killed. No one should be sing this as a tutorial. Instead, Unity tutorials would be a good idea.
How far can you go with games development without first learning how to program? 
Sorry, that was a bit rude. The thing is XNA is widely regarded as dead, and future releases are either limited or none. This course seems to use XNA extensively and teaching a dying technology to students is setting them up for failure. Unity is mentioned as if it's just somewhere that c# could be used, but it should be the highlight of the course. It is considered the best option for indie developers. Learning the basics of C# is important and that will be good, but they should be learning it in a context that will remain useful. A large part of learning to program for games isn't just understanding the backbone of the language, as most languages are similar, but understanding how to do specific things in a specific engine and becoming comfortable with the development environment and workflow. Most of the things in the Course Syllabus that are very game oriented are somewhat trivial in other engines, and would take a fraction of the time to explain. So basically, XNA. 
XNA isnt dead. Get your facts straight, its just not being maintained anymore.
Not to mention that MonoGame, which *is* being actively developed and maintained, is meant to be a 1 for 1 drop-in replacement for XNA. The assemblies are all named the same and aim to produce identical results with the same code. Last I checked, the one major remaining shortfall is the lack of an implementation of XNA's content pipeline. EDIT: Also, developing in Unity is nothing like developing in XNA.
I understand. But where would I start? I've asked this question before on reddit, saying should I use a course designed for absolute beginners, but deals with python.After learning that, would I learn c# or should I just start with c#? They all said start with c#, but I'm having trouble finding a resource for c# that's designed for a rock-bottom beginner. 
games development is one of the harder things in professional programming.
It was more of a rhetorical question, in question to the title. 
I guess dead is a matter of perspective. By being not supported and not provided with future releases of Studio I think of that as dead, in the same way that LINQ to SQL is dead, ASMX services are dead, and VB6 is dead. All those technologies still work, but would you teach a newcomer to that topic on a technology that the industry simply isn't using?
The "industry" is still using XNA and its not like its going to vanish over night like people seem to think. Its still a viable tool for professional game development and learning the basics. Not to mention Monogame picking it up as well, I would say that XNA is a free agent now, the horizons are broader than ever if your willing to see the silver lining.
Interesting. I was going to implement this myself but then stalled a bit from lack of interest. Glad to see somebody was able to finish it. I'll definitely take a look!
You have the point, but I think XNA isn't as dead as someone can say. We still have MonoGame, the open implementation of XNA APIs. It was used for FEZ, Bastion and mush more games. XNA as a technology still has a future, but not Microsoft maintained future.
It depends on where you want to start. To me, the most important thing to learn about programming is software engineering. However, this is difficult to learn (at least for me) the theory without using it in practice. 
No programming background needed for course, but game development needs it. I added that to the title because sometimes courses assume some previous programming experience. At the course students will learn the basics of C# and OOP. You can read that in course description on Coursera.
I see a bunch of variables that are declared but never used in this code. Are they for future use?
Looks nice. From your example, it's very easy to follow and I'm sure easy to implement. I might need to find a use for this (say, a game that uses reddit posts to generate levels).
Well done, you even made messaging and moderator utility..
Awesome! I'm definitely gonna play around with this a little :) Thanks for your work!
Nice, thank you. I think I'll give it a try some time.
Yea me too, it's not really fun to do :(
Looks great. Will sign up later today. XNA &amp; Monogame looks perfect for a project I want to tackle.
Could you list the input you gave it, what came out the other end, and what you expected?
It seemed to work for me given that the * and soSearchOption is correct and there are no case-differences between the filename and pattern: var file1 = new File() { CreationTime = new DateTime(2000, 01, 01), Name = "TestFile1" }; var file2 = new File() { CreationTime = new DateTime(1990, 01, 01), Name = "TestFile2Banana" }; var files = (new File[] { file1, file2 }).AsEnumerable(); var pattern = new string[] { "Banana", "Apple", "Orange" }; var result = from f in files where pattern.Any(p =&gt; f.Name.Contains(p)) &amp;&amp; f.CreationTime &lt; DateTime.Now select f; // result only contains file2 Console.Read(); BTW: Any reason you have two where-clauses instead of &amp;&amp;
I'll adjust the code to replace my second **Where** with **&amp;&amp;** and see if that doesn't resolve my problem.
How ?
Pastebin.com or hastebin.com please. Trying to follow along on a tablet and the formatting is garbled
Nitpicking: What you want is most likely .EndsWith rather than .Contains. Or maybe better Path.GetExtension(). C:\the.only.copy.of.my.old.grandmothers.signed.billion.dollar.will.pdf .. and then there is the issue of case sensitivity.
Probably a good idea. I've made that change.
Hey, didn't you do some work on 0x10^C tools/utilities too? I remember you. Looks nice, I'll definitely give it a shot at some point. EDIT: I just submitted a pull request for RedditException.cs. It didn't inherit from `System.Exception` before which might become an issue once you try and throw it.
To do what? As far as low level programming: To build most web apps? No. To do most of the stuff that you might do in Visual Studio? No. To do embedded programming working with singleboards type computers? Maybe. To interact with microcontrollers? I think so. To program FPGA's? Yes. I don't think that you'll be programming FPGA's in C# though, more like in C or openCL. The idea of [abstracted programming](http://en.wikipedia.org/wiki/Abstraction_\(computer_science\)) is to put layers between you and the low level code to make it easier for you to program most applications. Unless you're doing something where you need to be really efficient -- like writing drivers for hardware or doing embedded stuff on very low power hardware, I don't see you needing to understand much low level programming in order to make a good living today. Memory management? When you start building applications that do a lot, that handle a lot of transactions or operations, or parallel processing (or that have to be ultra-snappy, I think) then you would want to. I think that by the time you get to that point though, you'll know it. Can you benefit from understanding those things? Sure. I think it all depends on what you're doing and you'll have to provide more detail to answer that.
FYI, I know this researcher and think it's great that he's reaching out to developers to get real feedback so he can make better tools. There is very little reward in academia for him doing so, he's just doing it because it's the right thing to do! Please consider taking his survey, as it will make academic research more relevant, which ultimately leads to better tools for all of us.
If you're really interested in gaining a deep understanding of C#, the book "C# in Depth" by Jon Skeet takes you from C# 2.0 to C# 5.0. http://csharpindepth.com/ http://www.manning.com/skeet3/ Chapter 1 is free here: http://www.manning.com/skeet3/CSiD3E_MEAP_ch1.pdf
Yeah, I did some 0x10c stuff, like [organic](https://github.com/SirCmpwn/organic) and [tomato](https://github.com/SirCmpwn/Tomato).
http://codeduitest.com/coded-ui-test-automation-books-discover-cuit-step-by-step/
Take posts from subreddit, parse the body.. use the data to do whatever?
Alright, yeah. Sorry. By the way, this probably overall looks like crap. I'm a first year college student working towards an Associate's. private void btnConvert_Click(object sender, EventArgs e) { string sensorType; string conversion; string fullFrame; string fullFrameSelection; string apsc; string apscSelection; string lensIndex; int fullFrameMin; int fullFrameMax; double apscMin; double apscMax; int minimum; int maximum; sensorType = cmbSensor.Text + ":"; lensIndex = cmbSensor.Items.ToString(); minimum = Convert.ToInt32(txtLensMinimum.Text); maximum = Convert.ToInt32(txtLensMaximum.Text); fullFrameMin = minimum; fullFrameMax = maximum; apscMin = minimum * 1.5; apscMax = maximum * 1.5; fullFrameSelection = cmbSensor.Items[0].ToString(); apscSelection = cmbSensor.Items[1].ToString(); fullFrame = fullFrameMin.ToString() + "mm - " + fullFrameMax.ToString() + "mm"; apsc = apscMin.ToString() + "mm - " + apscMax.ToString() + "mm"; fullFrameSelection = fullFrame; apscSelection = apsc; conversion = sensorType + fullFrameSelection + apscSelection; txtConvert.Text = conversion; }
OK, I see what you mean. You essentially want to drive your output depending on what the combo box has selected. So for example instead of conversion = sensorType + fullFrameSelection + apscSelection; you could have if (cmbSensor.SelectedItem.ToString() == "Full Frame") { // or whatever text you have in there conversion = sensorType + fullFrameSelection; } else { conversion = sensorType + apscSelection; } It's quite possible I've typo'd something there but hopefully you get the drift? You could avoid using so many variables - e.g. you could just have a min and max which are set to a converted value only if the user selects APSC etc.
Awesome thank you! My class hasn't gone over if statements yet so I haven't been sure how to use them correctly. I figured it had something to do with them. If I have more than just two items in my list though do I just do a bunch of if statements concerning each of the selections though or?...
Welp I figured it all out using if statements. I'll probably learn about switch statements sometime in class which is good because I'm sure if I try it now I'll fudge something up. I made a post in /r/photography about my program if you want to look at it: http://www.reddit.com/r/photography/comments/1lntta/i_wrote_a_simple_program_that_converts_lens_sizes/
No, I think they mean how would you use the English language to generate levels for a game? Or, using reddit as storage space? Lol.
You could do any sort of (simple) quantitative analysis to generate numbers. (Number of comments, total number of upvotes, http links, ...) Then you can use those numbers directly or to seed a random number generator. If there's data, then you can build things procedurally from it. This has me thinking now, but I'm not sure how it could be made fun or interactive with reddit. 
Posted 2 years ago by Alex Ford (edited 2 years ago)
Looking over the tutorial it is still relevant. Not much had changed in the basics of LINQ in the past two years.
Why does the background colour keep changing? Really distracting. I thought I accidentally nudged my monitor cable when everything turned pink.
Try and see if this AviFile wrapper doesn't do the trick: [A Simple C# Wrapper for the AviFile Library](http://www.codeproject.com/Articles/7388/A-Simple-C-Wrapper-for-the-AviFile-Library). 
Enumerate the distinct commenters and spawn one zombie for each one that has negative karma. To increase the difficulty, change the source from Reddit to YouTube.
If you just need the number of the frame in which the event ocurrs it becomes simple math. You know the frames per second, you most likely know the time stamp of the frame. From there you multiply the total seconds from start by your fps and you have the frame number. Edit: you want to make sure you handle fractions of a second in your calculation as well
Thank goodness I'm not going crazy. Every time it would change, i would be like "Wait, wasn't the background just &lt;insert color here&gt;?"
Well thank you :) I am working on a new version of the site that will look a little more modern and I will leave the color changer on the cutting room floor.
Hahaha okay okay I changed it. I thought it was fun but apparently I'm the only one :P. You guys aren't the first to complain. Tangent: What do you think about the site's look and feel without the color changing?
I hope it's better then the Python course I took earlier this year. It was honestly a joke. Granted I didn't stay around long enough to really figure out if it was a joke or not, but first impressions and all. The guys teaching it had made a library that pretty much took care of all the work. Basically it felt like taking an auto repair course and being taught how to look up auto repair shops on Google. Felt cheated. Anywho, signed up. Looking forward to it.
Great read, thanks!
But that's where all my stuff is!
I think knowing the principles behind Linq is important, but any time I come across someone's code who is passing Func's around I almost immediately try to refactor it. Lambda's/linq = great, hardcoded delegates and Func's = messy
How else would you write an extension method that accepts a lambda? You have to accept some kind of predicate, whether it's an old-school delegate or a new-school one (`Func&lt;in T, out T&gt;`). You can't use lambdas (anonyous methods) without them. Have you looked at [a normal LINQ extension's intellisense?](http://i.imgur.com/SAR7dx5.png)
Besides the color changing another thing to consider is changing the main body font. Monospaced fonts are really great for code, but not so great for trying to read blocks of text. Try a more traditional font such as Helvetica. 
Done. Tell me what you think. Feel free to give any other feedback as well. I really appreciate it.
I decided to open your site up in chrome and just quickly change some of the CSS, to try improve readability. I took some screenshots which can be found in this [imgur galler](http://imgur.com/a/vm7vC) Some of the changes: -Increased the size of your main navigation links, and made them bold -Changed the main body font from Consolas to Helvetica -Increased the line height of the body text to 1.5 (Kept the code block line-height to 1) -I also changed the background color of the code blocks to a dark grey from black (I found the black was just a tiny bit harsh)
Done again. I implemented all your changes except I'm not so sure I liked the code quite so gray. I made it #111111 which seems to be a little better to me. Maybe it's just my monitors. Better?
I've detected a hexadecimal color code in your comment. Please allow me to provide visual representation. [#111111](http://color.re/111111.png) *** ^^Don't ^^want ^^me ^^replying ^^on ^^your ^^comments ^^again? ^^Respond ^^to ^^this ^^comment ^^with: ^^'colorcodebot ^^leave ^^me ^^alone' ^^If ^^your ^^monitor ^^is ^^not ^^calibrated ^^correctly, ^^the ^^visual ^^representation ^^of ^^color ^^codes ^^can ^^be ^^off
I was curious if anyone had interest in contributing. It's very basic at the moment (you can draw rectangles and ellipses). Mostly an educational project for me to learn about DX and more about C# and programming in general. I'm looking to keep it open source for use by anyone.
I think that dark gray you put is just fine. I just find that pure black is just a little bit jarring for backgrounds with text, so usually like to go something lighter. Also make sure your code block line-height is about 1. I think you changed your entire text line-height to about 1.5 which puts a bit more space between the lines of code than there needs to be.
Is that not just the dark theme?
One option is to dive into the depths of the visual studio options and set up this theme yourself.
Right. The simple grey background would be fine by me.
Hey there, try the Ragnarok theme: http://studiostyl.es/schemes/ragnarok-grey I love it, my boss thinks I'm nuts, but it's much easier to read.
[I explicitly set code blocks to line-height: 1](http://i.imgur.com/zBClCoK.png). I'm not quite sure why they look so spaced out though. Edit: Nevermind. For some reason applying it to `&lt;code&gt;` tags didn't do it but applying the rule to the surrounding `&lt;pre&gt;` tag did the trick. I also didn't realize my "Hire Me!" page wasn't working. It is now. Thank you for the feedback.
That's the one I use. I'm tired of having VS burned into the back of my skull.
I like dark but not too colorful themes, so I use a visual studio theme that was taken from vim: [inkpot theme](http://studiostyl.es/schemes/inkpot) There is also a modified version from 4 days ago that looks more like what you want: [inkpot modified](http://studiostyl.es/schemes/inkpot-modified) [Screenshot](http://i.imgur.com/9TW8kTk.png)
That's sexy.
[zenburn](http://studiostyl.es/schemes/zenburn-2012) is one of the more popular dark editor/IDE themes.
You should also get ReSharper. Saves you a huge amount of time.
Yikes hot pink?? Edit: Wow I was just trying to point out how hard that was to read because of the severe contrast with everything else. I've got nothing against pink otherwise, chill out.
I really like the dark theme that came with update 1 in VS 2012. Reminds me a lot of the old dark Delphi themes.
Thanks for the links atticusalien.
&gt;but any time I come across someone's code who is passing Func's around I almost immediately try to refactor it Why? &gt; Lambda's/linq = great, hardcoded delegates and Func's = messy There are reasons for hardcoded delegates (not sure what other kind of delegates there are) as well as Func/Actions. There are times where you need to pass in more code than would be suitable in a lambda or you would want to pass the Func/Action to more than one method, using a lambda would just require you to rewrite that same code more than once.
I'm very secure with myself. And it reads easy.
I went ahead and created one that roughly matches. If anyone else is interested: http://studiostyl.es/schemes/alchemy
huh? Wow thanks for the downvote lol. I thought it was a bad choice because of the huge amount of contrast and it burning my eyes. The yellow is pretty bad too but its not used very much. The dark blue !important is really bad too, didn't even notice it there until I saw it for the 3rd time.
[Switch?](http://msdn.microsoft.com/en-us/library/06tc147t%28v=vs.90%29.aspx) If/Else? [Ternary operator](http://msdn.microsoft.com/en-us/library/ty67wk28.aspx)?
I'm trying themes every now and then but i always find myself to reset back to VS default. Some color combinations make me sick...
Just fyi, I didn't downvote you, so there must be some disagreeable people watching this thread.
 switch (a==b){ case true: ... case false: ... } ?
&gt; I use a Son of Obsidian derivative. I went back and forth between Coding Instinct and Son of Obsidian for a while, but finally settled on SoO. I just set the background a bit darker to bring the contrast up a notch. 
Um... I can't tell if I'm being especially well trolled, or you're just confused as to what pattern matching means in this context. Think about it this way: you cannot trivially replace all if/else with switch statements. An if/else-if/else could require nested switch statements, or another method to evaluate the machine state into a well-known enum. Try expressing if (a == null) return null; else if (b == null) return string.Empty; else return DateTime.Now; with switch statements. You can do it, but it would run exactly counter to providing a simpler way to deal with these cases.
&gt;Try expressing &gt; if (a == null) return null; &gt; else if (b == null) return string.Empty; &gt; else return DateTime.Now; I dunno. It looks really well-expressed as it is right now.
No. I'm being serious. Is there any reason your `match` isn't just `if`? public class Fib { public int ForN(int x) { if (x &lt; 0) throw new Exception("undefined operation"); if ((x == 1) || (x == 0)) return x; return this.ForN(x-1) + this.ForN(x-2); } }
&gt;No. I'm being serious. Is there any reason your `match` isn't just `if`? Well, because it's just an example to illustrate how it would be used, dude. What did you imagine is going on, here? That I'm trying to better write Fibonacci and goddamn it, me can't make pretty! So, I propose a whole new language feature so I can implement it, but if I had just spent a little while longer, I might have been able to figure it out using ifs?? Also, I realize it is a matter of preference, but I think my example is a lot easier to read than the equivalent thing written with ifs, even at this level.
I feel that way about the 2012 Dark theme. I really want to like it and use it, but something about the Light theme plays nicer with my eyes
[LINQ 101 Samples](http://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b) is my cheat sheet.
LINQ reduces boilerplate code considerably and makes it much easier to read 
You could add JustDecompile too, while it's made by a company that sells components, the software is free: http://www.telerik.com/products/decompiler.aspx I personally only use it if ILSpy craps out on me on an assembly though. 
#
I was wondering as to why you used SharpDX and not SlimDX, but it seems that SlimDX has died. Also SharpDX looks a lot more feature-complete. I think you should split out the Windows info in your core class into a seperate concern. Also, why do you dispose everything in StartDraw()?... edit: Don't prefix classes with the namespace they belong to. CSDXCore is named CSDX.CSDXCore.
this is exactly how ILNumerics / ILView is working: you specify a plain data struct (scene graph) and the drivers are rendering it on every specific output (Winforms, Bitmap, canvas, ...). The only difference to XAML/WPF: the scene is a scene graph, defined by C# code. 
Don't describe when the function is called, rather describe what it does. /// &lt;summary&gt; /// Starts the controller's self destruct mechanism. /// &lt;/summary&gt; private void btnStart_Click(object sender, EventArgs e) { throw new NotImplementedException(); }
I'm sorry but comments ALWAYS have to be red!
You're totally correct, my inheritance question was more in general though, unrelated to the previous event one, but yeah, that's the general structure I encounter a lot. I never really found the Gets or sets the &lt;property name&gt; useful. I mean, it doesn't tell me anything about what the property is for or how it is used. 
I remember trying GhostDoc a while ago. I can't quite recall again why I didn't use it more but I thought it generated a lot of automatic but very pointless comments like Gets the &lt;property&gt; and other automatic comments that makes it look like everything is properly documented but in reality is only fluff that makes it even harder to see what the more important things are. Correct me if I'm wrong though, it's been years since I tried it out and I have difficulty recalling my experience with it. I'll check it out again nonetheless, judging from the positive comments I'm probably wrong about it.
Don't hold back. Tell us how you really feel.
I always like to follow my grandmother's advice: if you don't have anything nice to say, keep your mouth shut. In particular, don't repeat information which is already visible from the API. If that means there's nothing useful to say, say nothing. I hate seeing a comment like "Constructor which initialises a Foo object." Thanks! I had already seen that!
&gt; "Event handler for when the Start button is clicked." That really only repeats information from the method name "OnStartButtonClicked".
Would this have been "Interactive Programming in Python?"
Maybe you need to install [Web Essentials](http://vswebessentials.com/) ?
That was the first thing I tried, but installing Web Essentials didn't seem to help. Then, I realized I hadn't installed ReSharper yet. ReSharper brought the Intellisense back, so I'm happy. Can't remember, but I thought VS could do CSS Intellisense for Web Forms projects natively. I know you need ReSharper to get it to work on an MVC project, but maybe I'm just forgetting and you need it for both types of projects if you want intellisense for your css classes.
I don't use resharper and do use web essentials... don't know about CSS on the aspx page, but intellisense works on CSS files. You should be using a separate stylesheet anyways, but that has nothing to do with anything. 
Glad to hear it. We're looking for more contributors. Introduce yourself and the developers will spot you.
I disagree, the accessors should make it plenty clear on their own. I don't like comments that add nothing to what you can already see by reading the property signature, otherwise the same information is just stated twice. I suppose it also depends who is reading the comments, a contributor that helps with the project will need to know why it is there and what implications it has if it wasn't or if it was changed, while a 3rd party developer using that code only needs to use it in their own application. I'm still not sure for which audience I should write my comments.
Although, ideally, the function should be named in such a way that what it does is immediately obvious.
Intellisense works on CSS files with or without Web Essentials as far as I know. We were talking about auto-completing class and id names via Intellisense knowing what I have defined in my external style sheets. For instance, now that I have ReSharper installed again, on the front end, I can type &lt;div class=" and I get a list of all of my CSS styles to choose from. Indispensable when you have hundreds of styles spread across multiple stylesheets.
Yes, well. Often what the programmer deems self-evident at the time may seem cryptic for a third party.
I have literally just started using yield, even though I've known about it for a while. I've always thought "why do I need this? I don't get the point." Then it clicked. Yield is friggin' AWESOME!
Intellisense also works within Razor pages (cshtml)
Yeah.. I think that is all resharper
To answer your question, "Is there any work to get pattern matching (which already exists in F#) into C#?": The answer is http://functionalcsharp.codeplex.com/ It's not pretty. It's not concise. It shoehorns a feature into C# that doesn't belong there. C# does not have pattern matching. And there is no reason to add this weird annotation syntax when the if statement does the exact same thing. If you want to learn C# and then ignore core language features, you are shooting yourself in the foot. You will write code that only you can maintain, and that will baffle future C# coders. There is no benefit to anyone if you write code like that.
Thank you for posting this. I also add whatever extra information is needed to the documentation of a class constructor (on top of the standard "initializes a new instance of the XYZ class") if the constructor it does more things or should be used in certain cases. Good XML comments help **a lot** when people try to use your code. Nobody should be required to read the source of a method that he's calling just to understand what it does (and besides you don't always have access to the source code). 
I just realized I omitted that but yes, I do put that information in the &lt;remarks&gt; section as well so it does not pollute the intellisense (I think I am the only one around here in my company who also provides the &lt;example&gt; section for a sample on how to use a component when useful, but I digress). Been posting from my phone on a tiny textbox, I lost that detail. Thank you for pointing that out.
What you're saying is wrong. It misrepresents what I'm calling for, it misrepresents the spirit/history of c#, and it is misinformed in general. I award you no points, and may god have mercy on your soul.
hey, have you had any success creating a shell window with ssh.net?i've been toying around with it lately. I can create the connection, and execute hard coded commands. But id really like to get a interactive shell going. Ive had a look on the discussion boards but it was to no avail. Any help appreciated!
Hm yes you're right, I never really noticed that. I just made a read only, write only and both read/write and there's no visual difference. I thought the icons were different but probably had it confused with static/non static and public/private/protected. So yeah I can see how it might be useful.
Unfortunately, I kind of gave up on that. Back when I was experimenting, I read that you basically need to do end-of-line detection to know when it's "safe" to send a new command.
&gt; You can never, ever OVER-communicate with a consumer who can't see your code. The problem is that it feels like a lot of copy pasting existing and that somewhat rubs me the wrong way. I mean, I get that if you look at a single method in the documentation it should explain everything and not reference some other comment where the consumer has to go comment hunting to get the full details, but that would mean that for each overridden method I have to copy the base comment and then add the extended functionality I do. I'm not saying omitting that is bad or lazy but I have seen so much bad code at work I automatically raise red flags in my head if I copy more than 2-3 lines in the code editor and paste them somewhere else (I'm verrrrry wary on copy pasting to the point where it feels counterintuitive).
If you're only repeating what is visible from the signature, you're just adding useless noise. You should be able to trust the signature -- it's supposed to be a descriptive name. If the function does more than the name implies, it should be refactored.* I encourage you to read the book 'Clean Code'. The author makes this exact point, and he has a few things to say about professionalism as well. * One of te worst things I've seen is a getter that also updated a registry value.
Not really insightful, other people have probably said this better, but... For one thing, the documentation it provides contains literally no additional information above the name of the method and variables. This should be obvious from an information-theoretic point of view! ;) Take their example: http://visualstudiogallery.msdn.microsoft.com/46A20578-F0D5-4B1E-B55D-F001A6345748/showImage/70294 Imagine that as a developer you want to know what that method does, and you've gone off to read docs that tell you DeterminePageBufferSize "determines the size of the page buffer". At least if there were no documentation at all, then you wouldn't have wasted time reading it! Yes, you're meant to flesh out the comments, and it does the scaffolding for you, but most projects I've seen it used it would have been better if it was never there at all. Useless XML comments are also really crufty in a codebase. Anything that GhostDoc generates can easily be inferred from the name by any developer reading the code. Some people claim it's a force for good because it forces you to have sane method names, but if you're writing sane method names *because* GhostDoc can use them then you're doing it for the wrong reasons. If you're only using it for scaffolding purposes, something like Resharper will automatically complete most of the XML-doc block if you're lazy, and it won't have useless information in it that tempts you to leave it as is. e.g., typing '///' before a method with a "value" parameter generates: /// &lt;summary&gt; /// /// &lt;/summary&gt; /// &lt;param name="value"&gt;&lt;/param&gt; The most useful thing that XML documentation can contain is things that can't be handled by an automatic documentor - gotchas, strange edge cases, etc.
I disagree, if I comment all of my functions (Event if they are obvious) it encourages people to only read the comments. I would prefer people who are using things I wrote to understand how the entire function works. For instance, I write a function (side note: I try to not write functions that are longer than a page long) and comment it perfectly. Someone else comes along and fixes a bug, subtly changing the way the function works. If they don't update the comment, then the next person who tries to use it might have a problem. I'd rather encourage clear, concise, well named, well spaced and indented code then force people to write comments like "Gets or sets the blah blah blah" over every property. Its just not needed. That said, complicated stuff gets comments, stuff that isn't obvious gets comments. A lot of the time that becomes one line things inside the function, not a header for the function. Also, if the user cant see or change the code, obviously documentation is important and should be maintained.
Ouch, a getter that updates the registry? That's insane. Getters, setters, and constructors should do the minimum possible. I believe its MS standards to return as fast as possible from those, and put long running (Database or file access, long init process, etc) initialization/get/set code in specifically named methods.
You can use the [GetCurrentDirectory() static method](http://msdn.microsoft.com/en-us/library/system.io.directory.getcurrentdirectory.aspx) that is on the Directory class.
That did it! Thanks for a quick response!
I wouldnt use Directory.GetCurrentDirectory() or Environment.CurrentDirectory (one calls the other) as these can *change* for all kinds of reasons and may not give the directory your app was launched from. Instead use something like [Application.ExecutablePath](http://msdn.microsoft.com/en-us/library/system.windows.forms.application.executablepath.aspx) or [Application.StartupPath](http://msdn.microsoft.com/en-us/library/system.windows.forms.application.startuppath.aspx)
the CurrentDirectory is the current working directory and things like file dialogs and shortcut settings can change it. I also believe its system wide and other applications can change it.
You can start a process from one directory with a different "working" directory. It's even an option for shortcuts. The ExecutablePath above is good, but more generically you can ask an assembly where it is. Assembly.GetAssembly(typeof(SomeTypeInYourAssembly).Location
My rule is to document the *why* rather than the *what*. The code itself explains what is occurring, however it doesn't explain why it needs to occur.
ok cool. Thanks for the reply anyway. I posted a thread on the subject so hopefully somebody can help
Depends on what sort of work the company you're trying to get on with is doing. For a web app company, ASP.NET MVC and Web API are really popular right now. If they do more data crunching I'd want to demonstrate things like reflection and the TPL. And then for desktop apps I'd demonstrate WPF or really try to wow someone with a Metro app.
For an entry level person I'd be happy if you could show me some basic OO &amp; logic skills. You'd be surprised the number of applicants who can't even do that but think they will be successful at a programming job.
Yes this. Language doesn't matter, can you think logically. Someone who knows that exponential time loops with database access in them is something to be avoided, is much better than someone who can show off the latest Linq skills. 
A lot of employers are looking for entry level people who know the basics of C# and how to use them to build CRUD applications (also, you need to have basic database skills). You don't have to know a lot of the OOP stuff to do that and it's not much different than writing procedural stuff at that level. Also, can you interact with people? Move beyond the entry level and employers are looking for more.
You can use something like this to get the directory of the main C# module: string exe = System.Reflection.Assembly.GetExecutingAssembly().GetModules()[0].FullyQualifiedName; string path = System.IO.Path.GetDirectoryName(exe); 
Though if someone were showing off their Linq to SQL skills, the looped database calls would be inadvertently avoided.
This looks like winforms. Which doesn't have model representations from what I remember. Wpf would have that. But winforms you would need to have an object cache and event bindings for model changes. Not the quickest or most simple to implement. Many apps still have shit logic like this.
One great way to find this out is to look at job listings, which list what tech / areas of experience employers want along with C#. Here's an example search: http://www.indeed.com/jobs?q=C%23&amp;l=Mountain+View%2C+CA
Good call on the namespace thing. This project is in the very very preliminary stages. Things will get moved around. It does probably make sense to keep the Core class as a sort of static wrapper to access the rest of the library. The Dispose calls in StartDraw were just me following an example from SharpDX. My understanding is that RenderLoop.Run will just continue running until the application quits. Like I've said, I'm not super familiar with DirectX, so if there's a better way of doing this, I'd like to hear it. It probably makes sense at the least to implement IDisposable and put all those Dispose calls in a separate Dispose method. Thanks for the tips
Can you code? Good, you have half of it. The other half is soft skills - communicating well, not being annoying during your interview, demonstrating effort.
Most people here would love to tell you how important bubble sort and oop knowledge is but the sad reality is that most people here are doing CRUD screens. Thats it. Your probably going to be given a business layer that hides all of the actual data calls that depends on DTO entity layer. With that said I would brush up on your Javascript, json, jquery as it relates to c#. Fuck Ajax and it's silly issues. I always purk right up in an interview when I hear a candidate talk about hitting a google REST service to combine in their asp.net app. In the current enviroment you could probably just be able to spell asp.net and get a gig. 
Best answer so far
Get to know MVC, Web API and NHibernate. Anything else related like JavaScript, jQuery, html, css are good too.
I've been looking and interviewing for one of these positions for the last two weeks, lol :-)
Best of luck too you! I hope you find something you love to do.
Personally I think understanding how to leverage the framework version is more important than the tech. 3.5-4.0 probably the most ubiquitous in my experience. The tech is sort of pointless i.e. edmx's behavior in 3.5 compared to 4.0. MS will obsolete things with every release. So knowing what is available and what is deprecated is probably more important.
Also be aware of possible Exceptions thrown when using Parse and consider using TryParse.
Have you considered that code is generally write-once, read-often? When you see a function being called, you don't normally see the comment. That said, there's an `&lt;inheritdoc/&gt;` directive.
Add some knowledge about ORM and unit testing and your technical skills should be more than fine. 
Thank you everyone! This was a homework assignment that had me stumped for the past few hours. 
Create a task with Task Parallel Library + Lambda . http://msdn.microsoft.com/en-us/library/dd537609.aspx
Just don't do it.
sorry wow so metro such framework wow
Also, most of the timers will launch the tick function in "random" thread so you can't necessarily update UI in it. So use DispatcherTimer that will only tick in UI thread (and will not if UI is busy, so take care). This depends on what widget set you're coding in.
Also the sheer number of "Senior" level programmers that don't know OO design is astounding.
The ones that make them money.
This is my issue right now. I have 3 positions (senior) on my team alone that I haven't been able to fill for several months. People will call themselves "senior" developers because they have memorized the C# reference. But they know nothing of OO design, separation of concerns, SQL, basic logic... I get a lot of applicants that have come straight from India and have textbook definitions of everything memorized, but I get an uneasy feeling they've never touched a computer...
in my experience, it's actually been the ones that save them money.
touche
I wrote up an example of what I think it is you are trying to do. https://dl.dropboxusercontent.com/u/38808905/TimerExample.zip
Build a SharePoint site, show some basic workflow, collaboration tools, custom web parts etc. Show you can connect to a SQL DB using BCS and build some lists with custom filtering, sorting etc. SharePoint is the technology you want to demonstrate capability with as it'll pay far far better, but C# is the skillset you'll need to do it.
Console applications are especially vulnerable to this. Working directory is where you currently have the console navigated to, not the exe location. I created a simple console app with the following two lines to show, called DirTest.exe, located on C:\ Console.WriteLine("Current Directory: {0}", Environment.CurrentDirectory); Console.WriteLine("Executing Assembly Directory: {0}", System.Reflection.Assembly.GetExecutingAssembly().Location.ToString()); [Output](http://i.imgur.com/kKFKnx3.png) 
Down you go.
As someone working at a company trying to hirer a c#/mvc4 web developer, not having another job and know what c# and mvc means. Or at least able to fake that you know it.
Data and a web
Do you mean desktop CRUD applications (Winforms or WPF?), or web apps, and if so, ASP Webforms, or ASP MVC?
Do you need to know reflection in order to crunch data?
I don't care what it is, it must show that you had a problem / requirement and solved it yourself. This means you are motivated. I have superstar developers that can show you how you *should* have solved it, but *passion*? That's a rare thing.
Perfect example: How would you make an application for a parking garage. You have to know how many cars are in the garage, what types of cars can fit in each spot, how many spots are left, etc. etc.. This is a perfect example of how you can ask someone in OO terms to build an app. What classes would you make? What base classes would you use? Ex: Base Class of Cars (Compact, SUV)... etc. Just throwing an idea out there. Like you said, some experienced developers cant even begin to describe how they would approach this.
&gt;The code itself explains what is occurring Maybe to you, but it's not guaranteed to be that way for others.
&gt; One of te worst things I've seen is a getter that also updated a registry value. Holy shit, I have written some pretty terrible code in my life, but shit... I mean *shit* 
&gt; I believe its MS standards to return as fast as possible from those I believe that's everyone's standard from those. When I do var x = object.SomeProperty ?? DefaultProperty; I don't expect SomeProperty to go update the registry 
Most of the work around here (that I'm looking at) is in .Net Web Forms, with just a bit of movement towards MVC. I'm in a state government/university area though, so not much cutting edge stuff going on. I just interviewed for a position converting everything from VB6 and classic ASP running against Access over to C#.Net running against SQL Server. I think they may want to go with MVC but they're not sure yet. On the other hand, I saw one job for Ruby on Rails!
Learn TFS and some of the VS environment tricks. Being a developer is much more than coding.
There is a lot of other code missing from this. It also looks like it has been decompiled, since there are weird variable names like Label_0667. That would explain why it is such a mess. Lines 14-62 are for getting the active window of the game, and copying the rendered frame. Lines 63-96 are for diffing between the last rendered frame and the current one, and saving the differences to a mask. Lines 97-129 go back over the mask, and look like they find the "best" movement or something. Lines 130-198 move the mouse to the best movement and autofires the gun.
Good answer. My thought is to learn MVC - web has much broader reach than desktop, and MVC is a better fit to the web than WebForms. But if employers are asking for WebForms, that's what answers the actual question.
Assuming your ServiceClass is a 'class' and not a 'struct' you should be able to pass it to your child form on construction. Ie: var child = new StopwatchForm(m_serviceObject); child.Show(this); So you will need a new constructor for your child form that accepts the parameter. public StopwatchForm(ServiceObject service) { m_serviceObject = service; } As for periodic updates, use a Windows.Forms.Timer (you can drag it from the toolbox in the designer) to update the textbox. Dont forget to stop the timer before closing the form.
How.. does one memorize it all? Aren't there like 10,000 classes in the .NET framework?
Honestly, I have no idea. I don't think they have all classes memorized; most of the questions I ask revolve around the core language constructs. But, it's weird that somebody can give me a word-for-word definition of something such as a multicast delegate, but have no idea where they're used, or the WHY you would choose an interface or an abstract. We also get a lot of fraudulent phone interviews, where the phone interviewee is not the person that shows up for an in-person interview. 
Not necessarily. It's just another topic that can be uses to demonstrate proficiency with the language.
Hi Ram, you should probably credit the authors you use in your works. Changing the word "You" to "We" is direct copy pasta. See Apress Beginning ASP .NET MVC 4 page 5.
Thanks, I ended up going the DateTime.Now route, works very nice.
learned that. I had stuff running in the background, had to end up killing the app because it didn't kill correctly
Web Projects are from the devil.
Web Apps came after Website projects. Visual Studio can convert a website project to a web app project. 
I missed that. I wil do that. Thanks
Having been drafted in to rescue a clusterfuck of a VB.Net Web Project, I concur. 
You would be most welcome if you wanted to help us bring live tv support to MB. It's very high on our wish list. We would do it exactly as you are now, using next pvr as a back-end (although it would be modular to support other back ends in the future). I opened a dialogue with their developers a couple months ago: http://forums.gbpvr.com/showthread.php?54259-Media-Browser-Integration I also started researching their api. I can share that information. Let me know if you'd like to proceed further and we can take this to our developer forum. Thanks.
Have you tried Project Euler?
I have done the first ~60 or so last year - those become more about algorithms and mathematical properties than in depth programming to learn a language. Awesome suggestion though!
A natural language processing library would be good.
Location and salary range?
Make a small game in Unity?
Write a program to generate random, but correct, populated sudoku grids (see http://en.wikipedia.org/wiki/Sudoku). Not quite as trivial as you'd first think.
I've always wanted to make a physics engine.. it's pretty straight-forward. Choose a system (I recommend classical physics, because fuck that can actually be understood by normal people), implement the simplest algorithms and work from there. You'll learn physics too, which is pretty cool There are many possibilities here, event driven simulations, object collisions, so many things to do :)
Code the reddit-porn-downloader (or the reddit-aww-downloader, if you want to have it SFW). It should do something like this: * Scan the first page of /r/gonewild * Read all the names of the users * Download all pictures that those users ever posted in a separate folder. * Don't overwrite and add new pictures to existing folder **Now, why should you do this?** The obvious reason: You will have more porn at the end as at the beginning. **And the coding reason?** This little program will teach you a lot of the basics: * Accessing the web * ~~Parsing of text~~ String operations (RegEx is a nice way to do this) * Basic System-IO * Classes can be used (A class for a user, containing the url to the profile, a list with all direct links to the pictures and a download function) * You will have quick and useful results, while you can add more and more to the program (config file + configurator, previews, multithreading for parallel downloading, better UI, using the reddit API, etc.)
I'd be up for testing purposes. I like testing.
You might like to look into [Rosalind](http://rosalind.info). It is a similar set up but the problems are based around bioinformatics.
You could also try some of the unimplemented tasks at rosettacode.org: http://rosettacode.org/wiki/Reports:Tasks_not_implemented_in_C_sharp That's one of my favorite ways to brush up or learn a new language, and it's a lot better than Project Euler for actual coding tasks.
Actually might try this as a learning project (in Python for me!). Thanks for the suggestion and more detailed breakdown. (SFW version of course!) 
Well the simple solution is using a Dictionary&lt;String, String&gt; (Song -&gt; filename). A more robust solution is to create a custom data structure of "Artist, Title, Album, etc. Filename". Then use LINQ to pull them out. dicSongs.Where(s =&gt; s.Value.Artist == "Some Artist").ToArray(); *EDIT* Code, because I like coding: public class Track { public String Artist {get;set;} public String Album {get;set;} public String Title {get;set;} public int TrackNumber {get;set;} public String Filepath {get;set;} /** Fields added as needed **/ } public IEnumerable&lt;Track&gt; Tracks {get;set;} To get all of an artist (and sort by album then track #): Tracks.Where(t =&gt; t.Artist == "Some Artist).OrderBy(t =&gt; t.Album).ThenBy(t =&gt; t.TrackNumber).ToArray(); To get all songs from a couple artists: Tracks.Where(t =&gt; new String{"Some Artist", "Some Other Artist"}.Contains(t.Artist)).ToArray(); Etc.
This sounds kinda fun actually - thanks for the suggestion!
No webservice, but they're working on an API (according to their twitter) and there are plugins that make use of the site (Enhanced Steam, for example).
If you're "crunching data", reflection is something you're going to want to use minimally, if at all.
What do you mean by not having another job? Like, not doing side jobs or not being currently employed?
Why not generate completed sudoku grids and then work backwards, removing non-essential numbers? 
I didn't mean ready-to-play grids; I meant completed ones. It seems trivial at first but isn't as easy as one might imagine. 
When I've conducted programming interviews (especially for entry or mid level positions) I would ask candidates to give me all the unique words in a sentence. You'd be surprised at the number of people who cannot do it, or don't know how to approach such a problem. When I went on programming interviews, the amount of times I was asked about the specifics of garbage collection was *astounding*. The last interview I had, the job I currently hold, my answer was, "I know the internal workings of the GC, and I can tell them to you, but honestly, whenever I've seen it invoked in the real world, it was always a mistake, and always done because of a glaring problem elsewhere in the codebase."
My bad. It would still be fun to make ones that are incomplete.
Did you even ask if the OP is 18? Come on you know minors can't go on that page!
We're looking for a contractor that we'd eventually hire full-time if they show they're talented/good fit. We've had 3 guys accept our position, only for the thursday or friday before they were scheduled to start to inform us that they were taking another job.
Yea, I usually don't even bother following up with contract-to-hire positions unless there's a set number of days before conversion and I'm confident I'd rock it. When I do take them, I'm open to FTE offers up until the day I sign a W4. I imagine most people are that way.
An excellent book on Object Oriented Programming is [The Object Oriented Thought Process.](http://www.amazon.com/The-Object-Oriented-Thought-Process-Edition/dp/0672330164). You don't need the latest edition, OOP doesn't really change much at all, if at all. And the examples are in Java. But you really should know how to describe encapsulation, abstraction, inheritance &amp; polymorphism. If you can show how these are done in C#, that would be great.
No no no. Do not under any circumstance attempt to memorize the .NET framework. Anyone who tries it should be diagnosed as clinically insane. Remember: it's not what you do, it's how you do it. What RumShark emphasized is about *how* you do it: OOP, separation of concerns especially so. OK, OK, SQL and basic logic can go under what you do.
I spent some time a couple of years ago working on a music player as a side project. I parsed my iTunes library.xml to get a initial list of track, album, artist and genre, and used this to populate a SQLite database. If you do this you can then use LINQ-to-SQL to dynamically search/load details as required, i.e. just like the iTunes search bar. As you've discovered it's expensive in time and memory to load everything on start-up. I was dealing with 50K+ tracks and just loading everything consumed &gt;100MB of memory. SQLite is tiny, free, fast and consists of a single &lt;250KB DLL, so it's easy to include it and ship it as part of your app. I'll see if I can dig up the project and stick it on GitHub/Codeplex. 
Hello. Just starting to pick up c# and I will take your advice! Thank you! Anymore good advice for rookies?
&gt;x64 edit and continue &gt;Managed return value inspection These will probably cut debugging chores in half, just have to wait for it to penetrate actual work places.
Hey an Eric Lippert blog that I can actually understand!
Yup, those are amaaazing. No more useless mock-code to inspect returns and f5 spam.
Word of warning to anyone planning to upgrade. The RC cannot connect to TFS 2008 servers for some reason. Upgraded this morning and it just can't see the server at all and when I try to add it in the connect section nothing happens, just silently fails. I'm assuming it's a bug and will be remedied soon-ish as there is no announcement about it support for TFS 2008 in VS 2013 being dropped. Mostly it's just a pain as I have to downgrade again now until a patch is released. Few people in the comments also encountering this issue: http://blogs.msdn.com/b/somasegar/archive/2013/09/09/announcing-the-visual-studio-2013-release-candidate.aspx
Hey thank you! Threading does sound good for this, I will look further in threading, since I haven't really gone that deep in that particular subject. But you're right, it would speed things up drastically. 
BackgroundWorker: http://msdn.microsoft.com/en-us/library/cc221403(v=vs.95).aspx LINQ AsParallel Extension: http://www.dotnetperls.com/asparallel http://msdn.microsoft.com/en-us/library/system.linq.parallelenumerable.asparallel.aspx Tutorial on Entity Framework Code-First modeling: http://weblogs.asp.net/scottgu/archive/2010/07/16/code-first-development-with-entity-framework-4.aspx
this gives me hope. honestly. I guess I just need to churn out some projects. I'm far from a guru, probably not even experienced in a sense, but if employers are struggling to find people who understand the basics and can think logically then it's somewhat pleasing. 
Thank you! :)
No problem
You guys are really helpful! Thanks a lot for the help!!
I know the feeling. I learned plain old Basic as a kid and moved up from there, got a piece of paper that said I was a programmer, got my first job and have been learning every since. C# is language but all alone it won't make anything useful by itself. That's where and IDE comes in, libraries, packages, frameworks. There it gets juicy and interesting (and complex). That's where with the basics of knowing the language you have to learn a framework so you can make a program that you can interact with on the web. Know if you are handling data you probably need to store it. You have many databases (SQL or not) to choose from, learn to use, learn a new language (i.e. SQL). Communicating directly to a database can be a chore so eventually you'll want a framework to ease that. Complexity climbs and it gets very interesting. And there's still business logic to implement. Oddly enough, 98% of the real world stuff is very basic as algorithms go unless you are making games or scientific stuff. Putting it all together smoothly is the ultimate goal. Now this may sound scary but you don't need to go off the beaten path unless you want to and Microsoft provides quite a few of these frameworks as standard (i.e. ASP.Net MVC, Entity Framework). There is guidance out there to help you. As in most jobs, if you apply having done something you can show off, you'll probably be in a good starting position. If I had no projects in my resume, had the will and the time I would do the following: 1. Buy a well reviewed book about C# 2. Buy a well reviewed book about ASP.Net MVC (if you want to do web apps, otherwise WPF for Windows apps) 3. Buy a well reviewed book about SQL 4. Start reading like crazy while doing the tutorials, running and messing with the samples from the books 5. Start your own project. It doesn't needs to be super fancy but most businesses need to saves forms (manage inventory?), list/search that data, do some reports on it (number of blah blah per country). You can start simple and add stuff as you learn as a test bed. 6. Make sure you keep making that project better as you learn from your mistakes. 7. Put it in a source control system, you won't be working alone in most companies. "Git" is in fashion and GitHub.com is free for public projects little your open source project plus I'll make it easier to show off. Know you don't need to learn C#, keep an eye on job postings to see what technologies are really in demand. For example VB is really falling out of favor to C# so I'd rather learn an altogether different platform. As salaries go, they vary wildly from company to company depending on the sector they are in. The technology you chose also has an impact on the average salary depending on demand. If I where you, I would first learn and start programming. The job can be a ton of fun but it can also be very, very stressful so it's not all fun and games. When choosing a starting job, getting somewhere where you'll be properly managed so you can learn fast would be my priority. Get used to learning because it's at least 10% of the job. I love that, but some people can't handle the landscape changing as fast as it does.
Found this on SO: http://stackoverflow.com/questions/472282/show-console-in-windows-application http://stackoverflow.com/questions/277771/how-to-run-a-winform-from-console-application
[This channel9 series](http://channel9.msdn.com/Series/C-Sharp-Fundamentals-Development-for-Absolute-Beginners) is an excellent place to start, and [StackOverflow](http://stackoverflow.com/) is a good place to ask (or search for) any questions you have along the way. edit: I feel I should mention that I am not a seasoned programmer by any means, but I was in the same situation as you very recently. After spending many hours working through various other books and video series', these are the two resources that helped me the most. I highly recommend checking them out. 
If you are running stuff in parallel, yes, it will be a problem. Use instances instead, it'll be easier.
Id have to change it in a bunch of places, which is doable, but is there a way to adjust the current implementation?
Why does it need to be static? Make it instanced instead. Or make a single static function that takes in all the parameters at once, and doesnt used shared data. IE you could make it instanced, but have a static helper function that creates a new instance, sets the parameters, etc.
I agree. This particular implementation needs to be changed to use instances, and I will be doing that. I kind of new it, but I wanted to know if there is more to static classes or if there is an approach that I do not know of. And it seems that if I changed the three static methods into one static method that took in all the parameters would that be parallel safe? [This is also a good read on the topic which includes your point on testing as well](http://stackoverflow.com/questions/241339/when-to-use-static-classes-in-c-sharp) 
This is what I was wondering. Chances are that if you're writing too many static functions then you're writing procedural code rather than object oriented code.
The single static function still wouldnt be thread safe if it uses shared data (other static variables / resources). If everything is local to the function then it would be. Or if the shared data is read only usually thats OK.
I tried reading the book that this guy wrote (which he recommends as a more in-depth guide to his lectures for this course) a week or two ago. I really hated the format, but the idea is tempting enough that I'm willing to see if his lectures are any better. Signed up, thanks!
Of you're worried about threads changing the shared variables at the same time use the "volatile" keyword. But as people say, use instance classes.
Nope! Only music we have here is keyboard clicks, coffee sips, and frustration.
The best copy/paste tip is the Edit &gt;&gt; Paste Special menu. "Paste JSON as Classes" and "Paste XML as Classes" do exactly what they say.
Immutable instances if possible. You definitely don't have to worry about race conditions if you're using immutable types.
Just a note, procedural code isnt inherently bad code, but it usually is when its randomly placed in a given OO application
This sounds like a great observation (I'm a relative noob to OOP). Do you know any other similarly pithy guidelines-to-go-by for noobs to go by to avoid this or to think about when to write instanced vs static? Is this something a patterns book would help in learning?
That is awesome. Here, have an upvote good sir
I know this is a week old, but please give us a hint on what course it was. I don't want to waste any valuable free time on something like that. Thanks!
I've learned that resharper alone does not do that. If you have other extensions installed in VS it really gets slow. Try to disable other add-ins like VSCommands and Productivity Power tools. Especially if you don't have a Solid State Drive.
Thanks. As I said the better implemenation is with a regular class and I will be changing it, but another question about the static class just to understand it more. So the static class is in a seperate project that is included as a dll in the asp.net project. Now my question is doesnt the asp.net worker process create a new thread for each incoming request? and what is the scope of the shared static variable in this case, is it the same for all threads. for example imagine we have a static class with an int as a shared variable. a method that increments the int. we call this method when a user clicks one event on the aspx page, then we call it again either from another page or even the same button. is the value now incremented twice? also, is the static variable reset at some point like at application recycle? 
Thanks for the thread, I've learned some things from reading it.
Try powershell for automation scripts.
You can start a debug web server in a ASP.NET project like you would any other C# project. If you're like me and live in Unixland, run `xsp` in the directory of stuff.
IIS Express! http://www.iis.net/learn/extensions/introduction-to-iis-express/iis-express-overview
The OP doesn't know how to setup IIS (no offense OP, we've all been there at one time) and you want to send him over to PowerShell. Sheesh.
Powershell is cake. IIS gives me fits.
Thank you for the reply. I remember looking at that very course and adding it to my "consider this when I have time" list, but it sounds like I'm not really the target audience. Still, I do appreciate that things like this are created and provided to everyone at no cost.
It would be great to contribute to this project. I like MediaBrowser more then XBMC for the moment, because the it's more difficult to control all your content. And you Always need to update to the same versions on al your machines to get it working with the mysql database... So i would love to help with the support for next-pvr. The only thing, we can already make some contact. But i leave on saturday on vacation. Leave Belgium for 2 weeks, first time to America :) I probably have some access in the hotel, so i can react when possible on mails, forum posts ..... 
I apologize for the incredibly late response. I figured out what the issue was. I wasn't including the report ID as the first byte of my feature report I was writing to the device. After digging through the USB HID Class specifications document I realized that was what was missing from the device's documentation. 
From your description, I'm not sure how much space need. It sounds like about 5GB (50KB * 100K object) per user. And it sounds like you have multiple users, so is this a web app, or desktop application? Where is the data located? One local disk or centralized somehow? Why do you only need such a small subset of data? 
Unless you want to deal with ORM then I would stay away from databases. If you just want get an object based on an id then an object store should be good enough. 
A good control for this would be a Label. If you want the little X, you'll have to build a custom control with a label and a little X image/text/etc. For labels: List&lt;String&gt; Tags = new List&lt;String&gt;(); foreach(var tag in Tags) { var label = new Label() { Text = tag }; this.Controls.Add(label); } (That may have a couple syntax issues, didn't feel like validating the code in an IDE) *EDIT* Also, bind to MoustButtonDown (LEFT) and you can put in something like Tags.Remove(sender.Text). Add a plain ol text box that when you hit "add" Tags.Add(txtNewTag.Text);
Seems like they could all fit your usage scenario. I would lean towards an sqlite solution, personally, just because databases is something I am familiar with. There is no doubt that it is designed to solve the exact kind of problem you are facing. It is a tried and tested technology and there is always something to be said for that.
Sounds great. Can I have your email address? We'll get you added to the dev forum. Thanks.
based on his criteria PowerShell seems more appropriate then visual studio. he wants to go to a directory open up a file and execute an automation script that is exactly what power shell is for. 
http://ravendb.net/docs/server/deployment/embedded
I would go with sqlite as well, given it's history of reliability. 
I'd recommend SQLite over SQL Compact &amp; SQL Express. SQL Compact is a pretty poor DB, the fact that MS is kicking it to the kerb tell's you all you need to know about it. Compared with SQL Express, SQLite has a similar, if not better, feature set, plus it consists of a single DLL, so there are fewer dependency issues.
I won't disagree with you. I used it a couple of times in apps, the performance was not great with SQL compact. I use all the time, it works well for me on small scale. but SQL express requires an install.
I actually don't use any of the existing snippets. I create my own and use it like a template. It doesn't help with short commands but long repeating patterns.
Take a look at VS2013. There will not longer be a "Web Forms" or "MVC" debate. Either can have both techniques starting in VS2013.
Seriously? I haven't even looked at VS2012!
Also, I just spent 15 minutes trying to add line-breaks to this so that it wasn't formatted so ugly but nothing worked. If anyone knows how to do this I'd like to know...
## 
Where exactly do you see SQL CE being kicked to the curb? Admittedly I've never used it but my understanding they do nothing but improve it. Version 4 now supports concurrent connections making it perfect for web environments as well. I don't know about SQL Lite but SQL CE is supported by all the M$ tooling as well as Entity Framework. It would most definitely be my default choice as someone who has used SQL Server for 10 years.
For an MVC project I worked on we basically did your 'a/b/c' combination, with the addition of dumping route names from razor into the javascript in order to make some ajax calls. I didn't have a huge problem with it, but it did get kind of annoying having to go dig up the view file just to see how certain scripts were being initialized.
First - apologies, doing this from my phone. Not sure this will fully answer the question, but IMO - there are two problems at hand: 1) streamline the resources so you have a more efficient page load 2) limit the page-specific javascript so you're not bogging down pages with unneeded wire-ups on event handlers. Am I close? The way I handle (1) is to leverage a combination of Master/Layout pages in my solution and to use Script Bundles. I can elaborate if you want. Handling (2) is a combination of using @sections in the Master/Layout page and page specific jscript on the child page *and* by falling back to traditional javascript in the old school early binding style rather than the late-bound frameworks. For a single button that processes an ajax request, for example, I don't think there's anything wrong with the old onclick="function () " method. When you process for classes of characters, fall back on binding late. I love these types of discussions. Since I'm on my phone I'm going to quit now. Hopefully this will generate some discussion and I might learn something new. 
Go get it. My preview license expires in 4 months!
Can you recommend a good ORM for an embedded sqlite db?
Please know that there is a fundamental difference between the Current Working Directory and the Application Directory and of its importance: http://blogs.msdn.com/b/oldnewthing/archive/2013/08/02/10438842.aspx The most pleasant way to acquire the Application Directory is, as em4z mentioned, AppDomain.CurrentDomain.BaseDirectory.
What's the performance of your JS loader look like when compared against Bundles? We have script loader like that that we wrote for our internal framework at work, and bundles blows it out of the water, so we're switching soon.
Dapper or Massive are good choices.
Wow I'll have to check that out, always used a site to create a base class
It's pretty good. What I do is create a unique name out of the names of the current js files that shall be combined. Then I write that combined file to disc. The actual HTML ouput will look for that file on disc. If a file has been written to disc, I just skip combining and minifying. 
.Net is a development framework that drives many languages (C#, F#, VB.net, etc). Client applications (desktop apps) are hosted in the .Net virtual machine CLR. ASP is a slightly older framework for building web apps with server side code. ASP.Net is the ASP framework but using .Net. Asp stands for Active Server Pages (so the server is providing data and computation for the web app). So ASP.Net is basically the .Net for web.
So .NET programmer = someone that know one of the languages that is used by it? And also - what is LINQ?
Think of .NET as the platform that sits on top of the language of C#. .NET is a library of functions and a framework for using C#. The two go hand and hand and you can't really code in C# without using .NET. LINQ stands for Language Integrated Querying. And it is a way to query and manipulate data easily within your application. It is kind of like a sub language within C# for sorting, refining, manipulating, and generally dealing with data of any kind. You can use it to query and manipulate data from any database that you have a connector for, a dictionary in memory, JSON data, XML, etc.
LINQ is an extension built into .Net 3.5 and later. I think it stands for language integrated query, could be wrong but it's not important. It allows for SQL like syntax and performs operations on enumerated data types. It also builds in CPU apparent parallel operations. There are different flavors of LINQ: LINQ to SQL (builds SQL database queries for you but is slightly limited in functionality, I.e. .ToString() throws an error), LINQ to Entities which provides full functionality for entity framework collections and I think there's another but they all blend together after awhile. A .Net developer is one who works in one or more .Net languages. I am primarily a C# dev but work with ASP.Net and VB.Net all the time. If you want to get into desktop apps, look for tutorials on WPF; web apps look for MVC.
.Net programmer, as he explained, is someone who uses a language which compiles down to the CLR (Common Language Runtime...essentially interpreted bytecode that is similar to what Java compiles down to). .Net programmers include, but are not limited to, programmers who use the C#, F#, VB.NET, IronRuby, IronPython, and ASP.NET languages (any or all). Since the abstract code written ultimately doesn't matter -&gt; the code will compile down to CLR code, any programmer can write in his or her own preferred 'tongue' for a project / module, and any other programmer can use that project / module in a solution / project of their own. It is possible to have someone write code in IronRuby, and someone else write a front-end in VB.NET, with another person writing a server component in C#, and have all of these parts work together / link together, without any of the programmers knowing the others' languages. LINQ is...well, an attempt bring SQL like capabilities to the Object-Oriented world, so you can do things natively with in memory objects that would normally require writing custom classes or putting the data into a database first before returning a result...
So, after reading your answers I guess my learning way should go like: Learning C# to a decent level (advanced OOP?) -&gt; learning LINQ -&gt; learning WPF or ASP.NET with MVC. What do you think about this "plan"? Also, I found something called WCF (Windows Communication Foundation). What is is used to? I assume, that I can use C# with it?
Another way to do the LINQ query is to use the extension methods: var hardCoverBookList = booklist.Where( b =&gt; b.HasHardCover ); Does the same thing, looks a bit different.
Use c# to make little console applications. Once you feel comfortable you can start to use the features of ASP.net to build web applications that use the MVC pattern.
.Net is the framework providing .Net languages with things like collections, file IO, networking, security libraries, etc.. C#, VB.Net, F# are languages that can use the .Net framework. ASP.Net is the web component of the .Net framework. The is a difference between knowing C# (the language) and knowing .Net (the framework) and then ASP (the web part of the framework.) LINQ for instance added new features to both the language and the framework.
Right. I didn't want to get into lambda expressions for a beginner. :-) Note that you can also mix and match. Var x = (from y in list select y).Take(20); Takes first 20 items in a list. 
FYI that syntax is called fluent expressions. In case someone out there cared :-) 
Wcf is for web services, honestly haven't done much in it. Start with console applications then throw in LINQ, if you can get into entity framework I definitely recommend it.
Can you say something more about Entity Framework? 
No Dapper is pretty bare bones. The main focus of Dapper is [performance]( https://code.google.com/p/dapper-dot-net/). It is magnitudes faster than EF and is nearly as fast as hand mapped code. I prefer to use stored procedures for data access, but it does come at the cost of more code.
For more on LINQ: http://msdn.microsoft.com/en-us/library/bb308959.aspx
Between jumping from console applications to WPF/MVC learning, or is there anything that I should learn before?
In no particular order, this is what I found I needed past basic C# knowledge: * Generics * LINQ * Design Patterns (Singleton / Factory etc) * Extension Methods * Delegates (Basically function pointers in c++) Probably some others that don't come to mind right now.
This list is awesome. I actually used generics last night to write a CSV score sheet. Looking at delegates now. I am feeling more and more comfortable, but I realize I have a lot to learn. Thank you, anything else you think of is apreciated.
WCF is pretty much dead now. WebAPI and REST are the preferred way to send data between systems. Ignore WCF for now.
You're probably right about the other paradigms being best for HTTP distribution. But WCF should be superior for integrating IPC and distributed processing.
I'm going to do some tests and I'll hopefully get back to you guys soon. Thanks for the responses. Not one of them was worthless -- I think I like this sub-reddit ;-)
Looks like this might help: http://stackoverflow.com/questions/2987439/can-i-use-the-task-parallel-library-in-a-net-3-5-project Is there any reason you can't upgrade to 4?
i work in a corporate office where everyone is running windows xp and .net 3.5 and access to windows update is blocked im guessing to ensure everyone is running the same setup. my computer has .net 4.5 but i have to target my applications to 3.5 so my coworkers can use them. it sucks ass.
haha yeah. ^i ^^don't ^^^even ^^^^know ^^^^what ^^^^asynchronous ^^^^programming ^^^^is ^^^^at ^^^^all ^^^^please ^^^^enlighten ^^^^meeeeeeee....
Synchronous programming is where you rely on the order of instructions to be executed one after another, like what is written in the program. If you tell the computer to do A, B, C it will do A, B, C in the order you specify. Asynchronous programming is where you leave it up to the computer how these instructions are ordered. You ask for them all to be run, and the computer runs them in some arbitrary order, often at the same time. The hard part comes in when A, B and C share some information, say, some value of data stored in memory. If A, B or C depend on the value to be consistent, you need to take special care that the tasks don't interfere with each other when run at the same time. Solving this problem is typically what is meant when talking about asynchronous programming.
**Sample code:** class Foo(): def Bar(self): # do stuff return x **Synchronous code:** When I call Foo.Bar() my code stops running and I wait for Foo.Bar to give me an answer. **Asynchronous code:** When i call Foo.Bar() my code keeps running and eventually Foo.Bar will return an answer to me, most likely through what is known as a callback (a function I give to Foo) in the mindset of "when Bar is done, call this function in my code so I can get 'x' from you." Asynchronous code is good when you don't want to wait on the code you are calling to finish. This is useful in situations where the called code could take a long time to finish. While it is being worked on in the background the rest of the program can go on and keep doing something else useful.
Looks like fun, but probably only useful if you have lots of friends who are also software developers...
I discovered Knockout.js a couple of months ago and I really like it. You get very structured and clean javascript, where you can actually for once not fumble around in the dark. They main features for me is the ability to use view models, where you can define different actions (like a click event) and then append this to your UI. For example, in your view model define a couple of properties, and sort of a click event. Then in your UI, write something linke &lt;button data-bind="click: myEvent"&gt;. Also, getting your data to your UI is equally simple, just define the data-bind (&lt;span data-bind="text: myProperty"&gt;). Check it out! [Knockout.js](http://knockoutjs.com/index.html)
How could you even make the statement 'everything .NET programmers know about xxx is wrong"? What's with titles like this in the programming world? Just say what it is..
Exactly. Not only is this presumptuous, it is just plain wrong.
Thought exactly the same thing, ridiculous at best. Just because I don't have a PHD in asynchronous programing doesn't mean I'm a complete idiot.
It's like everything this guy knows about making titles to things is wrong.
*Apologies I have apparently posted an awful link. The discussion below is valuable, however, so please keep this comment visible.
Can't you fill a dataset using a SQL query or stored proc? Maybe I've been doing things wrong but I've never run into this issue of having to loop through a dataset. I just make sure my query brings back what I need.
... that's very old indeed. 2004? Holy shit dude. 9 years old? One of the hardest parts of learning programming is that there's so much old information lying about. Try to look at the dates of posting. Today many of us use Ninject, Entity Framework (EF) and LINQ. Inline SQL is almost abolished, LINQ to SQL was a failure and noone uses those things anymore. As for OP, you should look into Entity Framework to begin with, then LINQ. Anything else is pretty much deprecated as far as .NET goes. Ninject is later used to improve DRY (dont repeat yourself) principles when you use multiple projects with the same database methods. I'm saying inline SQL is almost abolished because it still has some uses, especially when you do some certain things which EF is a tad slow for. But it's really nothing to invest time in now, if you're a beginner..
I'm not sure how much his recent version has but my old programming 101 lecturer, Rob Miles, releases all of his C# course notes each year as a PDF (he gets copies printed and bound for his students). When I was at uni it was called the Yellow book (had a yellow cover), but in recent years its been pink, I think. The latest versions are uploaded here: http://www.csharpcourse.com I can't recommend his work enough. He's a fantastic guy, too
.NET is an API that gives you access to your computers resources (like screen - you can create windows, show buttons, lists, etc, allow user to interact and all, speakers - play songs, play audio captions, etc, system hardware - like graphic cards, usb devices, serial devices etc). In the past (Win32 days) you had to use either C,C++ or Visual Basic to do this sort of thing. With .NET you can do the same thing with any .NET compatiable language (ex. C#, F#, VB, managed C++, etc) Languages that support .NET are called 'managed languages'. 
&gt; Today many of us use Ninject, Entity Framework (EF) and LINQ. Inline SQL is almost abolished The frameworks are a great abstraction and timesavers once you understand how SQL works. But, IMO, if you really want to learn SQL development you shouldn't ignore that those frameworks use parameterized SQL statements as their brick and mortar. Learn at least the basic low level stuff, then move on to the abstraction frameworks.
I have an understanding of how SQL works. I am just struggling to find relevant information on how to best develop SQL databases using C#. Everything I find is either above my level, poorly written, or old. EF looks good. I suppose for GUI I should look into SL5?
You don't necessarily develop databases using C# (but you can - with "code first"), you'll usually do it with the SQL Management Studio which is installed when you setup SQL Server 2012 (for example). You then connect to your server with EF and it generates abstract classes of your database so you can interact with them through LINQ, which is an abstract query-language in C# which is translated to SQL.
At some point we must let go of the lowest techs and move towards greater abstraction and efficiency, but I agree with that SQL is something one must learn as it is now.
Look into dataannotations.
Ohh, I understand that. You generate the database using SQL management studio and then you develop software to read, write, and modify the data in the database based on your requirements. I understand SELECT * FROM table WHERE condition I have a low-level understanding of Join (I get a little confused on Inner vs outer) but I realize that it basically says these two columns tell you that these two rows from different tables are referencing the same object. It's not the concept I am struggling with it's the actual coding where I need help. Now, GUI development I have NO CLUE where to start. I was looking at WinForms, but that seems like old technology. So I was going to look into Silverlight. But I am open to suggestions.
What you're thinking of when talking about winforms is a thick client. Something you run on your OS, such as Windows. It's not really modern to do thick clients anymore, as people wants to access things through mobile phones, different operating systems etc. The solution to this is to create a website which all platforms can interact with. So, you're probably looking at learning web development. It's what I did anyway. The web-platform in .NET is called ASP.NET and there are 2 different paths to do it: WebForms and MVC. Go MVC and forget everything about WebForms. There's a lot of crappy information out there where people advice you to go WebForms, but for the love of god don't do it. As for the GUI part, if you want to go web, you're then looking at HTML and CSS and Javascript. http://www.asp.net/mvc
&gt; CRUD A database with an interface you mean. :P 
Silverlight is dead. It was MS's answer to flash and for the most part it's not worth pursuing. For desktop applications, I'd recommend WPF or look into Windows Store Apps (if you've got windows 8). For WPF www.wpftutorial.net A bit old but still good www.drwpf.com
Also, thanks! I'm ok if it's manually ran, I just want to be able to tell the difference. If it's not manually ran, you need to select the input file. I want it, if auto ran, to automatically select the last file
thanks! I shall do that
No need to reinvent the wheel, you can use the built in validation features: http://msdn.microsoft.com/en-us/library/ms229603.aspx
You can tell if it's running from a scheduled task by checking [Environment.UserInteractive](http://msdn.microsoft.com/en-us/library/system.environment.userinteractive.aspx)
Ahh I didn't mean a database table. A 'table' in lua is what they call their arrays but they're more like a list of key value pairs. So for example, I wanted to select from the array where the key was a certain constraint.
&gt; At some point we must let go of the lowest techs and move towards greater abstraction and efficiency Can't say I agree with that. It's still important to know what's going on underneath these abstractions. Not always, but throwing away that knowledge entirely is not wise.
It's a bit of a stretch to say thick clients "aren't really modern." Native apps are better than Web apps almost all the time (and I'm including mobile here although you can't make a mobile Winforms app). The experience is better when you have a choice. Plus if you just design a Web app that works well on your desktop it's gonna be miserable to use on mobiel devices anyway.
Why is this reposted? It's the same as last time, but you don't have the comments stating the flaws in the benchmarks. EDIT: I was incorrect, this isn't a repost, it's just very similar to his method invocation post which had questionable benchmark methods, decisions, and results which you can see from the comments in the post. It's also not entirely unfair to label this blogspam. http://www.reddit.com/r/csharp/comments/1kxoef/performance_comparison_of_code_invocation_methods/ Best part was that it was apparently justified to include cached reflection after MethodInfo binding, but a far faster method, compiled expression trees was only benchmarked including the compilation on every pass. Anybody can make some mistakes and they're easily corrected, but instead of just fixing the blog post to include proper benchmarks (on a topic which I find interesting no less), he just argued that his benchmarks were fine. If you actually put out good information and accepted constructive criticism, I would be upvoting these links across the board. But the way your blog post is written, you're misleading people by presenting faster methods as slower and I can't abide that. 
Well, I will say, as a beginning developer this sounds very interesting. However, I think the way to get this going is to have a working concept. 
&gt;...I think the way to get this going is to have a working concept. See the link in my comment. I actually forgot to add a link to the site.
I can't open the link from work, but I will look at it when I get home.
Cool...if you have any questions just post back to this thread and I'll try to be timely in responding to you.
Here is the exact code used by [percentagecalculator.net](http://percentagecalculator.net/) (with credit to Jari Jokinen): What is **a** % of **b**? totalValue = a / 100 * b; **a** is what percent of **b**? totalValue = a / b * 100; What is the percentage increase/decrease from **a** to **b**? totalValue = (b - a) / a * 100; I hope that this was what you need.
Its just blatant self promotion.
can someone point me to the original post? im curious to read more.
If you actually read the post, it's not reposted. It's object instantiation, not method invocation.
think thats the same article...
isn't this exactly what key-value stores are built for? http://en.m.wikipedia.org/wiki/NoSQL
Have some access in the hotel. 😊 Send something to svenvdb100"you now the at" "Google Gmail".com. Soms spam filter. 😊 When You sens something to This mailadres i send You My other mailadres... But i don't want to post It here for spam reasons.....
I believe that the first thing to understand is that async/await does not make your methods automatically asynchronous, but it is just a convenience that the compiler offers to write asynchronous code that is easier to read. To run code asynchronously you still have to use threads or better yet (as the other poster suggested) the Task Parallel Library. I felt like I had to point this out because it is not immediately clear what is in the bulk of your MainFunction: do you call some framework method that returns Task? If that is the case, when you do await on that method, that code will run on a separate thread and then resume afterwards on the same synchronization context from where it was called (in your case the UI thread). The example that TheHumbleRandomer posted is a perfect way to achieve what you want to do, but is also a good example of where using async/await would make the code easier to read (and possibly maintain). 
Crap. This is why I hate programming sometimes.. you think you might finally be a competent programmer and somebody throws something out there that you've never even heard of, much less know how to use.
there's hundreds of thousands of tutorials on google
There is no end to knowledge, no reason to get down on yourself for that. I've been a .NET developer for 10 years now and there are tons of things I don't know or never heard about, it hasn't stopped me from being successful in my career.
It might be easy to make the individual changes. But is const correctness important enough? That means forcing people to rewrite their existing software just for the new compiler. I haven't had a great many problems using mutable lists. It is pretty nasty though.
You may or may not like [this](http://stackoverflow.com/questions/9033/hidden-features-of-c); hidden features of c#, though most are not really hidden, just not that popularly known.
I'd say correctness is very important. There is no reason to implement an interface if you're not going to support the operations. If some API gives me an IList then I expect I should be able to mutate it. If the existing people want to make use of the new immutable collections then they should either use the wrapper the author mentioned or fix their code so it too is correct. 
This post is kind of bogus.... While the patterns suggested are well defined and great. There is no reason the add function shouldn't exist. The expectation would be to destroy the old collection and create a new one with the added element, and that's the implementation. Strings are immutable. "Hello" + " " + "World" compiles. Because they're Immutable it is expected that the three input strings are now eligible for destruction and a new string object has been created to hold "Hello World". Should the + operator overload in String throw a not supported exception? Anyway, I'm not saying it's ever a good idea to call the Add() function on an immutable colleciton, but if you know enough about programming and your domain that you seek an Immutable Collection, you probably know the implications of calling immutableCollection.Add
From what I understand you should remove the async keyword from the MainFunction method and actually make it return a Task. For example: private Task&lt;string&gt; MainFunction () { return Task.Factory.StartNew&lt;string&gt;(() =&gt; { // do work here return "hello world!"; }); } This way, the await in the button click event handler will actually wait for the async operation to complete before resuming execution.
i hate to be bitter, but seriously if i google "learn jquery", "learn javascript" or "learn c# mvc", the top results are excellent tutorials or stack overflow questions asking the exact same thing, all with great responses. The most important skill a programmer can have is knowing how to find information, if i could teach every programmer who uses an even semi popular language one thing, it would be how to use google.
Take a look at dotNetNuke I think it has a forum module.
The fundamental problem here started with .NET 1.0 and wasn't fixed in 2.0. By then it was pretty daunting to change it. That problem was that there was not enough granularity in the collection interfaces at first. * IEnumerable was the only read-only interface * There was no "read-only" IDictionary, for instance * IList had this[index] defined (should have been a separate IVector interface) This led to code all over the place just using IList and IDictionary everywhere, even when they didn't need the ability to modify the collection.
why? google serves up information orders of magnitude faster, with the same level of detail. the only reason to use a book is if the information is unavailible
&gt; If some API gives me an IList then I expect I should be able to mutate it. That's because you wrongly assume IList is always mutable. While I agree with the fact that since pretty much everybody makes that assumption, ILists are *de facto* always mutable, I don't like the "we're all doing it wrong so you should adapt to us" reaction.
I know you are looking for books but I have two web-based suggestions. 1. NerdDinner for learning MVC -- [MVC 1 eBook](http://aspnetmvcbook.s3.amazonaws.com/aspnetmvc-nerdinner_v1.pdf) and [MVC 2 eBook](http://content.wrox.com/wroxfiles/aspnetmvc-nerdinner_v2.pdf) There is no MVC 3 book, but the MVC 3 version of the site is on [CodePlex](http://nerddinner.codeplex.com/). 2. [Codecademy](http://www.codecademy.com/learn) for jQuery &amp; JavaScript, I would suggest doing JavaScript before jQuery so you have a good foundation before getting functional. 
Fuck you man. Learning from a book is perfectly legitimate and he's entitled to ask the question. If you want to take an a-z/ ground up approach to learning something a book is an excellent choice as it provides structure and builds on previous content. IMO it better than searching high and low on the Internet for 100s of amateur "answer to question" based posts, that are not even peer reviewed. Google is excellent if you want an answer to a specific issue or topic, but I think a book can provide an excellent learning experience for someone wanting to approach the subject as a whole. Don't be a prick.
But if it's not mutable why does it have methods that suggest I can mutate it (add). If IList was just the materialized view of IEnumerable and we had a separate interface for mutating a list then that would be better.
Because the designers (wrongly?) decided that only one interface was needed for this kind of collection. The Stream class also has methods that can throw with bools to check if they will (Read, Write, Seek).
I'd be interested to see what they'd come up with if given a clean slate.
I totally recommend buying a hardcopy, because you will be referencing it a lot during your first forays into MVC. But, you can get started and view the books first to see which you might like to buy here: http://it-ebooks.info/ there are TONS of books here covering all the topics you want and more!
The post is to do with collection *interfaces*, not what your seem to think it is about, just collections. They're talking about problems where you implement a mutable interface, IList&lt;T&gt; for an immutable collection ReadOnlyList&lt;T&gt;. In the case the read-only list gets the Add method from IList&lt;T&gt;, which is absurd because it does not make sense to "Add" to a read-only List, so it throws an exception. Instead of this pattern where you have an IList&lt;T&gt; that may not be mutable they're suggesting that we have another interface to represent those cases. Something like IReadOnlyList&lt;T&gt; and IList&lt;T&gt; : IReadOnlyList&lt;T&gt;. I'd probably suggest the name IReadableList&lt;T&gt; but then you'd probably want to have IWritableList&lt;T&gt; instead of just IList&lt;T&gt;.
yeah because it's not like full guides and detailed explanations don't exist on the internet or anything. there's no reason to use a book for something like learning to program.
You can also try Volante (http://blog.kowalczyk.info/software/volante/database.html), which is BSD licensed, small and similar in spirit to NDatabase.
I think it would have been more honest to link to: http://www.reddit.com/r/csharp/comments/1kxoef/performance_comparison_of_code_invocation_methods/ Where there are some fairly valid criticisms of the benchmarks.
I'm not sure I understand this. What's the benefit of using a tuple instead of parameters? Maybe this works in F# better, but I can only imagine tuple-everything would make it much harder to actually use a library in C#, or maybe intellisense would have to support decomposing a tuple in order to provide documentation... There are already a lot of places in .Net where a tuple-like struct is used. One of the common ones is the System.Drawing namespaces, where methods often take things like a Rectangle or Point (or you can pass in the values directly and skip the struct). C# and VB.Net also have the benefit of anonymous types, though those are strictly more limited than tuples, they allow some of the same types of behavior.
This is an old podcast from 2012 and is about using async with web programming. The main point actually is that you probably shouldn't use asynchronous programming in a web application, not that people is using it in a wrong way. (Like the bad sensationalistic title of this link says.) I have done couple of MVC apps and like the podcast says, it rarely seems like it would be useful to parallelize tasks in these kinds of applications.
Picking .Net as the name of a development framework that covers a whole bunch of non-network API's and a few network ones, during the time where the internet was exploding in use and people were getting used to .com, .org and .net as web adresses, was a pretty big marketing blunder.
*Jon* Skeet
Oh wow. I ranted about this exact same thing many many times... I think I just utilize a lot more profanity than Jon.
Indeed, my horrible bad. My own name is John and it just seems to fly off my fingertips that way . . .
I "tend" to use the as/is operators when I am not certain what the type actually is. I typically cast when I fully expect a type, and if an exception happens then there is clearly something wrong with the logic and I would want it blow up.
You have a few options (none of which have been compiled): 1) You could add another if check for the newline (not compiled)... if (!string.IsNullOrEmpty(DRAline) &amp;&amp; !DRAline.Contains(Environment.NewLine)) 2) Just replace the NewLines: var DRAline = DRAReader.ReadLine().Replace("\r\n", ""); 3) Look in to https://github.com/JoshClose/CsvHelper library. It probably handles a lot of the heavy lifting for you already. 
Don't use split for csv files. "Last name, First name" is valid as far as a csv file, and splitting on that will create two invalid cells. Use the TextFieldParser which handles all that. using System; using Microsoft.VisualBasic.FileIO; class Program { static void Main() { using (TextFieldParser parser = new TextFieldParser("C:\\csv.txt")) { parser.Delimiters = new string[] { "," }; while (true) { string[] parts = parser.ReadFields(); if (parts == null) { break; } Console.WriteLine("{0} field(s)", parts.Length); } } } }
Sorry if this is dense as I am just getting started in Programming really. But that looks like it is using a Visual Basic library and I am programming in C#. Am I able to use this code or is there a TextFieldParser in C# that can use? 
Thanks for the response. #'s 1 and 2 turned out not to work out. Still getting that exception. I will read more into #3. 
That's just the name of the namespace. Also it's easy to tell that this code is not VB as it includes curly braces. VB uses stuff like if...end if 
Jon Skeet can force as to throw exceptions.
It would be very helpful to see your XAML or a clearer explanation of what you want. Here's what I understand you want: [click for image](http://i.imgur.com/BUWr12A.png) (I'm using culture info to bind to because it was easy databinding accessible right in .net) Am I following you right? Here's the code for copy &amp; paste should you want it. &lt;Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:global="clr-namespace:System.Globalization;assembly=mscorlib" xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase" xmlns:dat="clr-namespace:System.Windows.Data;assembly=PresentationFramework"&gt; &lt;Page.Resources&gt; &lt;ObjectDataProvider x:Key="data" ObjectType="{x:Type global:CultureInfo}" MethodName="GetCultures"&gt; &lt;ObjectDataProvider.MethodParameters&gt; &lt;global:CultureTypes&gt;AllCultures&lt;/global:CultureTypes&gt; &lt;/ObjectDataProvider.MethodParameters&gt; &lt;/ObjectDataProvider&gt; &lt;CollectionViewSource x:Key="cvsMusic" Source="{StaticResource data}"&gt; &lt;CollectionViewSource.SortDescriptions&gt; &lt;scm:SortDescription PropertyName="IetfLanguageTag"/&gt; &lt;/CollectionViewSource.SortDescriptions&gt; &lt;/CollectionViewSource&gt; &lt;/Page.Resources&gt; &lt;Grid&gt; &lt;ListView Margin="20" ItemsSource="{Binding Source={StaticResource cvsMusic}}"&gt; &lt;ListView.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;Grid Margin="10,5"&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition/&gt; &lt;RowDefinition/&gt; &lt;/Grid.RowDefinitions&gt; &lt;TextBlock Grid.Row="0" FontSize="14" Text="{Binding Path=DisplayName}"/&gt; &lt;TextBlock Grid.Row="1" FontSize="13" Foreground="#999" Text="{Binding Path=TwoLetterISOLanguageName}"/&gt; &lt;/Grid&gt; &lt;/DataTemplate&gt; &lt;/ListView.ItemTemplate&gt; &lt;/ListView&gt; &lt;/Grid&gt; &lt;/Page&gt;
Set Copy Local = True in the properties of the applicable references. The assemblies will then be copied to your bin directory on build and you shouldn't have to worry about installing that framework on every PC.
It worked! Thanks!
Yes. That's a good possibility. There are a couple of researchers working on "selective undo" and "backtracking" support in IDEs. Here is one of my colleague's work: http://www.cs.cmu.edu/~yyoon1/software.html 5 to 10 years from now, you might see some of that research make it to your editor :)
You can also pack them into the exe using ILmerge or something like .net reactor. 
Check the Event Log.
This is probably against the licensing terms for the various assemblies. Not that it matters for personal projects but is something to watch out for.
I love that thread. I've learnt so much from it. I go back to it every now and then and have another read through it and there's often another trick I overlooked earlier or just hadn't needed up to that point.
I used the "`as` with a null check" approach heavily in a GUI app I wrote a while back because WPF (or maybe it was Forms?) had a tendency to throw certain events before the controls that were throwing those events had actually been created. I don't remember the specifics of it, but the sender was either coming through as null or as some empty `Object`. So I had this pattern all over the damn place: void HandleUsingAs(object sender, EventArgs e) { Button button = sender as Button; if (button == null) return; button.Text = "Clicked"; } 
Yup definitely something to be aware of. Thanks for pointing that out. 
&gt; Help: My C# Application does work on other computers. Well, if it does work, then you should be fine. If it doesn't work, then you have a problem.
This is exactly what I was talking about, sorry for the bad question.. ;) Thank you very much!
Not sure how efficient this will be with a large file, but if you first read in the entire file, then split by "\r\n", you'll have each row in its own string you can then split by ",": string csvText = File.ReadAllText(path); string[] csvRows = csvText.Split(new string[] { "\r\n" }, StringSplitOptions.None); foreach (var row in csvRows) { string[] cells = row.Split(','); } Edit* While this will solve your current problem, you'll run into more issues if you come across more complex csv files. See here: http://secretgeek.net/csv_trouble.asp
Ah great, glad to help! 
What does the program do?
Why would you do that ? The history becomes useless or forces you to rebase everything before commiting, which is longer than doint it manually.
Do you have a global exception handler that displays any exception that is taking down the app as an error message? 
Nicely put on all points! 
A bit of offtopic, but hungarian notation? Really?
Except that in their case that means their application doesn't work at all, because the Windowing system they were using was passing null for some reason.
[That's not mine, baby!](http://i.imgur.com/BZaUcv2.png) I literally just copied and pasted the code from the knowledge base article. I just checked my link. Apparently it wasn't working. It's working now though.
or they would be calling that method manually from another method.
 string.Contains() is my first guess. Pretty sure there are easier ways that someone with more knowledge can help
You could possibly use String.Split() to parse out the words in the sentence, depending on the exact requirements. If you have a list of important words it might be possible to just scan the result of the Split method for those words.
http://msdn.microsoft.com/en-us/library/b873y76a.aspx The String.Split method is what you're looking for. It takes in an array of separating characters (in your case, it might just be spaces and punctuation) and returns a string array with all of the parts. After that, you'll have to dig through the array and cross-reference it with a list of known commands (without knowing the specifics of what you're trying to do).
Use String.Contains() insteed. [We dont care here.](http://stackoverflow.com/questions/7074/whats-the-difference-between-string-and-string).
I like the solution found [here](http://stackoverflow.com/questions/4987873/how-to-find-if-a-string-contains-any-items-of-an-list-of-strings) for working with strings. If the commands are coming from audio (and you are doing speech-to-text), I would use the [Grammar class](http://msdn.microsoft.com/en-us/library/system.speech.recognition.grammar.aspx) for this. This is part of the speech recognition libs. I used it to build my home automation system. It has an event called [SpeechRecognized](http://msdn.microsoft.com/en-us/library/system.speech.recognition.grammar.speechrecognized.aspx) as well which occurs when the command has been identified by the Grammar object. You can handle that command in the SpeechRecognized event handler. 
You can definitely do something like this, but there's a lot of flexibility in the way you go about it. Are you looking to speak the "tell me the weather for tomorrow" command to the machine? In that case, I would use the System.Speech.Recognition namespace to build a grammar and apply it to to the speech recognizer. Your grammar will consist of all of the phrases that you'd expect to speak to the machine (I think you should be able to use wildcards, as well). This will greatly improve recognition and then you will be able to pick the command up from the listener and pass it to your logic for weather lookup and speech. Here is a simple example that might help get you started: http://studentguru.gr/b/jupiter/archive/2010/02/01/speech-recognition-with-c-dictation-and-custom-grammar.aspx 
I'm actually using an android phone for voice detection then sending the voice results to the computer via udp as a string. It gets filtered into the program as a "command" in plain text. So i think the speech recognized route is a no-go. I am using the android device because I have found that the voice recognition on my phone is a lot better than the built in recognition in Windows.
Yeah I've noticed it's not very good either. I wish the Dragon NaturallySpeaking API was more affordable.
So if the string is "tell me the weather for tomorrow" how could I get it to get both commands involved? It needs to first identify it needs the weather then identify that I need tomorrow's forecast.
 // str is your string string str = "tell me the weather for tomorrow"; if (str.Contains("weather")) { // there is a "weather" in str if (str.Contains("tomorrow")) { // there is a "tomorrow"" in str // do some stuff here } } String's method Contains takes an argument and return a bool. This bool is true if the string contains the argument.
This may very well work out perfectly. Thank you.
Ah, alright. FWIW, windows speech recognition isn't bad with a good grammar, but that's moot now anyways. So are you doing the speech to text on the android device, or are you generating text (by typing or string building) on the device and then sending it via UDP?
Get the apress book for professional c# 5. It has some legacy info for older .net code but includes all the new features that make programming easier. 
you are welcome. thank /u/miroppb too :)
Gotcha. The solution of processing the string on the PC seems to be the best option. You're going to have to tokenize the string. That is to say, do the string split and capture key words and the nearby data and act on it. I'd still recommend you look into a grammar for the voice recognition on the android device so that you have a solid idea of what to expect on your PC. Otherwise you'll be dealing with loads of edge cases due to minor differences in the captured speech that a grammar could weed out. But yeah, tokenizing when you receive the strings from the phone and then acting based on the content seems to be the way to go. 
If you want to remove a string from string, I recommand to use [String.Replace()](http://msdn.microsoft.com/en-us/library/fk49wtc1.aspx) string str = "say goodbye caroline"; str = str.Replace("say", String.Empty); You look like a new developer. You should start with tuto or lesson. [Check this](http://channel9.msdn.com/Series/C-Sharp-Fundamentals-Development-for-Absolute-Beginners).
&gt;Curlybrace with no space if (height &lt; MIN_HEIGHT){ What kind of monster does this?
My same question. I make all my code readable. It'll take more lines, but when I go back it makes more me sense. 
Unfortunately, no.
How I do it: Tab Curlybrace with one space Constant name is all caps with underscore Condition with no space Arguments definition with no space if(x == y) { do_stuff(); } 
Are you writing C# like that? Are you writing all member names with lowercase and underscore?
Yeah. I bound underscore to the ` key so it's easier to type as well.
Like // if we happen to be in VS, don't fight it static void Foo (int i) { if (i ==80085) { Console.WriteLine("boobs"); } else { Console.WriteLine("no boobs"); } }
I was hoping to see how many people don't use curly braces at all with conditionals if (true) // Do something My boss does this and I can't stand it. I always add braces when I encounter it because it's so hard for me to read otherwise.
Resharper? 
Is &gt; ==80085 a typo?
Heh, I do this sometimes. In all honesty, it depends on the complexity of the execution statement. It's not that different than using ternary operators which also tend to fall on a single line.
I find lack of braces to not be a problem at all if there's a blank line at the end (sometimes before too). I used to always use braces for my if statements, but have grown to prefer this style.
Yeah, I use ternary operators a lot. And more often than not I've written lines of them that ended up confusing the hell out of me later. Or my ridiculous lambda expressions. I try too hard to save lines sometimes.
It's interesting that the Mono style guide supports your boss on single-line conditionals: http://www.mono-project.com/Coding_Guidelines This Microsoft style guide doesn't seem to have an opinion, and the page even has both versions: http://msdn.microsoft.com/en-us/library/vstudio/ff926074.aspx 
Is the "Space vs Tab" statistic accurate for the example they post? Their example of space shows: public string GetSomething() { return something; } Which to me is weird; like is it that popular to use _one_ space? Or is it also erroneously counting "spaces as tabs" where it inserts 4 space characters like this: public string GetSomething() { // use tab for indentation return something; } I honestly think I'd have a hard time dealing with only 1 space of indentation; I feel like the paragraphs would start to blur together. Do 80% of developers really do this? Almost any code sample/usage I see online or in books have the larger indents, not tiny single-space ones.
So far the only place I put curly braces on the same line is for [object and collection initializers](http://msdn.microsoft.com/en-us/library/vstudio/bb384062.aspx). It helps me associate the additional lines as part of the instantiated object/collection rather than be implicitly pulled in the direction to thinking it's a separate code block. (but even then, I still park a space between the object constructor call and the curly brace.) 
I don't mind this too much. But if you want to see something that will _really grind your gears:_ if (someCondition) // Do something else { // Do something // else that takes up // several lines } Or vice-versa: if (someCondition) { // Do something // that takes up // several lines } else // Do something else Or if you like to watch the world burn: if (someCondition) // Do something else if (someOtherCondition) { // Do something // else that takes up // several lines } else if (yetAnotherCondition) // Do yet another thing else if (yetOneMoreCondition) { // Do something // else that takes up // several lines } else // Do something else This blows my mind when I see it. If you want to do single-line conditionals (or even loops for that matter), go ahead if it's concise and readable, like simple forks in logic. But if you gotta put more than one line in one part of that conditional, you better as hell put braces in the other parts as well or so help me God I'll post a comment on Reddit. EDIT: Mind you, this is even formatted with nice boolean variables for the conditions; I've seen similar code blocks where the `if` part of the condition checks _multiple_ conditions spanning multiple lines: if (someVar &gt; 0 &amp;&amp; someOtherVar != null &amp;&amp; (someOtherVar.Prop == "asdf" || someOtherVar.IsOverride())) // Do something else if (someVar &lt; -1 &amp;&amp; holyShite()) { // Do something // else that takes up // several lines }
How is that even possible? Does Visual Studio allow to disable auto formatting, or are some devs just using other editors?
And suddenly, I feel better about my boss's coding style!
Yeah, I couldn't find an option in the Visual Studio formatting to produce this. My guess is maybe it's possible in some of the other C# editors (MonoDevelop, Eclipse, or using non-editors like notepad with other programs like Unity3D)
yeah
&gt; Does Visual Studio allow to disable auto formatting Yep! A lot can be done with [ReSharper](http://jetbrains.com/resharper/) also.
Yeah, it seems like people actually do that! I'm impressed, it's a hard rule to follow.
Yah, part of me likes the "neatness" of having each piece of code on one line. To me, it's a little easier to look at the code that way.
That is what it's talking about. Nobody (I hope) actually presses space four times for each indentation level.
My point was their stat is misleading since VS replaces tabs with spaces. Probably because C# wasn't the only language they analyzed. 
If it's a single execution call in a block, I find the curlies to be more of a hinderance than just doing: if (someBool) doSomething(); as opposed to if (someBool) { doSomething(); }
What's the difference between a block statement and a conditional statement in this survey? 
I will do that for single line statements, but I prefer to always have braces, because many times I have to refactor pieces of code and add the braces anyways.
The mono style rules are insane and at odds with any other C# code I've seen.
The only thing that grinds my gears about that is Allman.
You can tweak a lot of formatting preferences under Tools-&gt;Options-&gt;Text Editor-&gt;C#-&gt;Formatting.
I always newline the curly. if (height &lt; MIN_HEIGHT) { do_stuff(); }
We are really just looking at Visual studio defaults. 
I'm pretty sure you can.. Off the top of my head... Tools-&gt;Options-&gt;Text Editor-&gt;C#-&gt;Formatting I'm checking this tomorrow for accuracy!
I blame the default Visual Studio settings...
Visual Studio has no option to insert tabs?
CTRL-K + D - all day.
It does, it's just not the default.
I'm not touching the tabs vs spaces argument. What I do want to know is, do people really not always use all caps for constants? How else do you differentiate from a public field? Maybe I'm dating myself, but that was basic 101 stuff.
~~Curly brace on a new line is not the default.~~ Edit: I can't seem to remember VS behaviors when I'm away from my PC :P
...for c# it is...?
It is for me. 
We are having the same issue. What approach do you take to weed out these candidates? A coding exercise or something?
I don't know if I really have an effective means of doing so. I've found I have actually started asking fewer technical questions. I will ask a couple of pretty basic definition questions and hope I get an answer back that is in their own words and not a memorized MSDN entry. The most important for me are the logic, or "debugging" type questions that are not necessarily specific to the language. If "x" is performing slowly, what are things I could check? in what order should I look into those? There's not necessarily a right or wrong answer. Like soullessworderdrone said above, I want the how you think and why, with the emphasis on the why. The downsides are this takes time, and I don't know how effective it is on a quantifiable level.
ok, i can give you a push. the button labeled click has a click event. if you double click it in the design mode, it should make the method for you. the text boxes have .Text properties which will hold the values your putting in up front. so like Textbox1.Text and Textbox2.Text would be where you get your numbers being inputted. you would be adding new listitems to your listbox based on some math your doing on the .Text properties. Let me know if you need more of a push in certain places. Also, let me know how much of this you can translate to actual code.
Thank you for commenting! For example the thing I don't know is how to make it look like: (2+3)² (2+3)³ (2+3)⁴ In the listBox if you put "2" in TextBox1 and "3" in TextBox2 
I'm not sure it's possible to put superscript in a listbox. You might be able to do it in a Rich Text Box but my searches on superscripts in a listbox doesn't result in much. EDIT: You could display it like (2+3)^2, (2+3)^3, (2+3)^4, etc. EDIT2: Wow, Reddit turns the ^ into the superscript for you. HAHA! In that case, "(2+3) [^] 2" without the brackets. EDIT3: F'it. I hope you get the idea. Put the numbers in the parens, then the up arrow, then the exponent. I will now go and learn how to use reddit reply boxes.
Interesting nobody suggested Regex.. I think Regex is a good way to parameterize your commands using capture groups text = "tell me the weather for tomorrow" text = "tell me the weather for Saturday" text = "tell me the price for Netflix" pattern = "tell\sme\s\the{\w+}\sfor(\w+)" // Instantiate the regular expression object. Regex r = new Regex(pat, RegexOptions.IgnoreCase); // Match the regular expression pattern against a text string. Match m = r.Match(text); while(m.Success){ String cmd = m.Groups[0].ToString(); String arg = m.Groups[1].ToString(); switch(cmd){ case "weather": return getWeather(arg ); case "price": return getPrice(arg); } } http://msdn.microsoft.com/en-us/library/twcw2f1c.aspx 
Awesome. Thanks for the reply. Now I know!
Thank you very much
you are probably reading the assignment too literally. If your numbers were 1 and 2, the list box should probably read: 9 27 81 not (1+2)^2 (1+2)^3 and so on.
It's possible that I read it too literally...
Still searching, it looks like I need some control over Kerning, which would be so much easier were I allowed to use WPF. :(
you can use unicode to get superscript (run charmap and search for 'super' to find the characters and codes): char[] superscript = new char[] { '⁰', '¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹' }; Then you can combine them together to get double/triple/etc digit numbers: string example = "(2 + 3)" + superscript[1] + superscript[5]; -&gt; "(2 + 3)¹⁵" Bonus help: ~~Use modulus (% operator) to build the power,~~ and string.Format(...) to build the output string. EDIT: Don't use modulus, it would be a waste in this case
Included: * Minecraft server * Minecraft client * Anvil world editing * Minecraft physics emulation * Terrain generation * Block/item interaction logic simulation Supports Minecraft 1.6.4 and Minecraft 13w38c, as well as Minecraft Classic. It also has a general purpose networking library for both modern and classic protocols, which enables some cool projects like [SMProxy](https://github.com/SirCmpwn/SMProxy) and [RetroCraft](https://github.com/SirCmpwn/RetroCraft). This project has an IRC channel, too! [#craft.net on irc.freenode.net](http://webchat.freenode.net/?channels=craft.net&amp;uio=d4)
Why is this actually important? It's WinForms, so there's almost certainly no easy answer. You should probably let it go and work on something more important.
I didn't know that, it looks exciting Thanks!
&gt;While you must still have a Mac on your local network in order to compile and deploy the code :(
"Current installed libraries" Do you mean an old version of Craft.Net? The answer is probably "no", there are likely breaking changes. You can probably fix them within 10, 15 minutes.
Ok, thanks.
Well even if that worked, which still wouldn't let me compensate for the auto inner padding, transparency in this case has to work over multiple controls. In winforms, transparency is fake, buffering whatever is set to the object parent (usually, your form). If you had a big long label over two different pictureboxes, they would each be obscured by the "transparent" background. Easy workaround? Override the on paint background event with nothing. It just never draws a background. 
First reddit, now Minecraft. You've been busy.
I'm always [busy](https://github.com/SirCmpwn).
Wow. Nice work.
At some point you have to show your stakeholders the limitations of the tool you were told to use. "I can do it right and it will look good, or I can do what you said and it will look like shit"
It will sooner come to compromise (my current iteration is overriding the onpaint and then using textrenderer to draw new text where I want it, which is great but still not pixel perfect) than switching tools because of time limitations. Alternately they could pad the text on the controller end of things. It's a matter of making the one tool visually match up with output on the other end. Worst comes to worst on my end, I'll render the text to bitmap, read pixels 1 by one, column by column, until I hit a pixel and then offset by that amount. Regardless, there's ALWAYS something that can be done to work around limitations of the tools.
English is not a regular language. You cannot parse English sentences with regexes. If you are limited to sentences that follow an exact format you have to wonder why the user would want to repeat it instead of just providing the keywords each time.
You say those other frameworks are too much of a pain, but why are you ignoring MEF?
I've said it before and I'll say it again: Rob Miles (an old lecturer of mine) releases all of his programming 101 notes and a book called 'Yellow C# book' for free every year. Each new CompSci student at my old university gets a copy of the book, he creates a PDF of it and uploads it to http://www.csharpcourse.com for anyone to download. I'd highly recommend it to anyone, even if it just ends up as reference material
Thanks!
I've always found I learn things best when I pick a few little fun projects and then just work out how to do it with google. There's endless people on here and other forums you can ask questions, or have your code reviewed (this becomes important as you get better). So... set a goal like a simple blogging engine. Start with "hello world", then "hello world" where the text is stored in a data base of some sort. Then write the engine to enter data into the database. It also helps if you know where you're wanting to end up. My example is a great start if you want to work in corporates. If you want to program games - then pick something more visual.
Rob Miles was not one of my lecturers but I have been to a lecture by him and it was ace. I wish he was one of my lecturers.
Hi couldn't load the url server was timing out so can't comment on api your pricesgroup class has two inner classes but no instances of them. You may need public class pricesgroup { [JsonProperty("current ")] public current Current {get;set;} [JsonProperty("previous ")] public previous Previous {get;set;} ..... As to the dictionary. It may be simpler to load as an array 1st and convert to a dictionary after. I don't use Json.Net just microsofts build in one. Also does Json.Net need an attribute for the class itself? edit formatting Good luck 
He is a top guy, always has time for people, too. His gatherings for undergrads at the University of Hull are the stuff of legend. As a friend of mine would say, "he's a top shagger" 
I learned via the Channel 9 videos. Then I moved on to the Windows 8 and Windows Phone videos (I have a few apps in both) and I am working on ASP.NET now. Everyone always said to pick up a fun little project and just build it, but even a "blank" visual studio project can be overwhelming at times.
Language doesn't matter if you are just starting out. You need to first focus on the fundamental principles of programming. If you want to learn to become a good developer, don't put the cart before the horse.
This is my suggestion [C# 5.0 In a Nutshell](http://www.amazon.com/gp/product/1449320104/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1449320104&amp;linkCode=as2&amp;tag=menuorle-20"&gt;C# 5.0 in a Nutshell: The Definitive Reference&lt;/a&gt;&lt;img src="http://ir-na.amazon-adsystem.com/e/ir?t=menuorle-20&amp;l=as2&amp;o=1&amp;a=1449320104)
I find this site very helpful for quick simple examples of commonly needed snippets. http://www.dotnetperls.com/ 
Hull Represent. 
OK, now do XCB or xlib. I want to write a linux window manager using mono.
In that case, what's the intended use case of the client library? Writing bots? Downloading a server's world file? Logging the chat? (And *can* you play from the console?)
This is by no means a complete list, but something I have used at my last few jobs to train folk who are coming into C#. Starter: * Rob Miles "Yellow Book" * [MSDN/Bob Tabor Videos \(Probably the easiest\)](http://channel9.msdn.com/Series/C-Sharp-Fundamentals-Development-for-Absolute-Beginners/Series-Introduction-01) * Pluralsight (Costs money, and a bit dry, but tons and tons of good material) * Wibit.net ( I say wibit, but it should be noted they assume you go through all their languages, with C# being the last, so unless you want 40 hours of general programming/c/c++/Java before starting C#, you should do their other vids or at least do the other two series. They go over the CLR and a few other features the others won't touch.) Intermediate: * C# Unleashed &amp; C# in a nutshell * And a few small projects of your choice (I recommend a basic ticketing system, a character sheet maker for a table top rpg like Patherfinder or D&amp;D, and whatever else along those lines). * ADO.net, LINQ, and WCF (some very commonly used and very important frameworks from MS) Advance: * C# In Depth * Effective C# (and More Effective C#) * CLR via C# * AOP, Dependency Injection in .Net, and MetaProgramming in C# Some Entity Framework (Julia Lerman has books and vids on PluralSight Language Agnostics (this area is usually somewhere between late intermediate and advance, but CC2 can be started sooner): Starter: * Code Complete 2 * Pragmatic Programmer * Passionate Programmer (More career focused it feels, can be skipped. But it is easy to read and short) Mid: * Code Reading * Clean Code Complex: * Mythical Man Month * SICP (in Scheme, but still very good) * Test Driven Development Stack overflow, Reddit.com, even /g/ are all good resources for questions (with the last being more a place to read in how people do things or getting called names) Overall your goal will be to steadily practice. Much like a real language the best way to learn is bit by bit (no pun intended) and to steadily grow a little each day. Do **ALL** the examples, you can't learn code by just watching or reading. Sit at your computer and type. Lastly, don't force your way through it. Make you understand how it works and why. If you can replicate something without knowing how to modify the results without breaking it or explaining it in a simple manner, you don't understand it. Your goal should be to understand concepts Bad link, but I'm at work: http://www.loadingartist.com/extras-files/wall_followyourdreams.png EDIT: Fixed a book name mistake EDIT2: Gold? Thanks!
Any of the above. And, you can plug it into a rendering engine if you want to. Yes, you can play from the console with it.
I graduated back in '08, but yes
What a nice guy.. mad respect
Who on earth uses space instead of tab for indenting? Monsters!
Hmm, not a bad idea. I'll think about it.
&gt; C# Via the CLR Hate to nitpick, but it's actally [CLR via C#](http://shop.oreilly.com/product/0790145353665.do). Excellent book though - I recommend this one a lot.
If you want to learn to program a tutorial is a tough way to retain information and actually learn anything but they do serve as great references and examples. To learn anything you have to engage your brain more than just doing a tutorial. Did you ever notice that if your a passenger in a ride to someplace you had never been and two weeks later you have to go back to the same place you need directions again? If you drive you only need directions once because the first time you drive somewhere you brain is in engaged in what your dong. Doing a tutorial is like being a passanger in a car. Try this go to elance and find a project. You don't have to whore yourself out and bid on it. Find a project with good requirements and build it. You will learn three things. (1) How to program. (2) How to solve problems. (3) How to Google everything which is probably the most important. You think you know how to use Google? Just wait. 
Don't worry. Every time I tell someone they should start with C or C++, I always get shut down by the online programming community also. I think it's important to know how queues, linked lists, dual-linked lists, etc work and when you would want to use each. A lot of tutorials will skip from using arrays to lists without explaining why, which leads to a lot of code I later have to go back and clean up when developers use them in live projects.
 wow so much framework quite same so much boat wow much universities wow such library such doing so text master book so tutorials wow such know wow such better much suggestions 
Couldn't you use an image?
In winforms, images won't have 'transparent' backgrounds over multiple controls. Can't override the onpaintbackground either. Tried that.
I see. I suppose there's also a reason you can't change the font/font size on the label.
I learned by reading *Learning C# 3.0* last year, although it's obviously a bit out of date.
Eat a bag of dicks.
Just out of curiosity why start with such an old book when there are tons of free more up to date resources available?
On your machine :P Jokes aside you should learn by practicing. A good resource is as good as any reference material can be but making a project which is real and addresses a real end-user requirement (yours, in this case) will teach you more from experience than any content *about* the experience of others. Good luck.
The core of the language is still the same and the material is well-presented and has good exercises. When I first picked up the book I didn't really have much appreciation for OO programming at all and I found it really valuable in grasping the concepts. I'd like to see the book updated for sure though. That said, I have unlimited access to Safari books anyway and I may have been slightly swayed by my positive experience with *Learning Perl*.
It is sad. I've hired developers who can't even write a bubble sort (damn Array.Sort).
i feel like it's not even about starting with c/c++, it's about learning problem solving.
Jobject provides a generic structure to walk the data similar to the way the Microsoft xml components work. You can use linq queries and all. It is best practice to use domain objects for your data when creating an app but that is up to you really.
By that, are you asking how a data source would be created and modified? I am not sure of your level of comfort with databinding yet but as a beginner I would first suggest using the window's code-behind C# file. In that class, to databind the grid to something you need a public property that implements `get` and `set`. ex: public ObservableCollection&lt;YourMusicClass&gt; MusicList { get; set; } `ObservableCollection&lt;T&gt;` is a generic list that supports UI notification of when the collection is changed (an item is added, removed, or replaced). This ensures your UI automatically stays up to date without you having to work for it. The `T` is the class type you have created. I would hazard a guess that it looks something like the following. public class Song { public string Name { get; set; } public int Filesize { get; set; } public string Filepath { get; set; } public bool? IsLiked { get; set; } public Artist Artist { get; set; } public Album Album { get; set; } } Please note that any POCO value that will change outside of the constructor will need to implement `INotifyPropertyChanged` for the UI to reflect that change. Have I answered your question or just made things worse? :)
My friend recently went through the same thing as you. Just learning WPF, it can be jarring to figure out how things work. If you're looking for a databinding fundamentals tutorial, MSDN delivers pretty well actually! Try this: http://msdn.microsoft.com/en-us/library/ms752347.aspx I am happy to field questions sent to my inbox. I've been using XAML-based languages professional for 7 years now, so I would *hope* I can help.
This could prove to be extremely useful. Thanks for the find! 
Hey man! I think I got it to work. Check this code: [pastebin](http://pastebin.com/zwBLED1c) *Edit: Updated the link, removed the JsonProperty-stuff, that's not needed.
GIVE ME GIVE ME GIVE ME. this could be very useful.
It was TOTALLY useful for the (hateful) project I was dealing with at work - totally easy to get and get moving too. Nuget. Then get to work :-)
I bought a copy of MonoDroid from Xamarin for Android development. I really like it for F# development. Well worth the money. &gt; He said something about the new version of C# with nice async type things. If you want async then you might like F# too. It is had more async for longer compared to C#. 
Is F# easier than Haskell?
So, you'll need some comparison logic regardless. The if statements would work, but I think it would get very complex very fast. Given your specific requirements, a better way to do this might be to use regular expressions. The RE can try to match on a command word (weather) and then single out the time, which would be "tomorrow" in the given case. 
Azure
Last I looked the prices weren't that reasonable. 
App Harbor. 
This is still an early work in progress but I developed this tt file for exactly this purpose. It generate a strongly typed class based on the column names and datatypes of an excel table. It then generates a method to parse the table and populate a collection of the generated class. https://github.com/beachandbytes/T4ExcelTemplate/
Yes
If you can get your employer to get you an msdn subscription, you can get an Azure membership with $100/month credit. I'm not sure if that was a limited time offer, but I was able to get that with my subscription. 
Can you provide a link to that? 
microsoft.com/bizspark
Godaddy will host it 
I use Winhost. Not very configurable, but they get the job done cheap. http://www.winhost.com/ Azure will always be the best place though.
I just switched from WinHost.com to SmarterASP.net. I'm loving it. Everything is better.
Nice, they seem interesting. How are the configuration options for the servers?
I'd make sure it handles Excel's 1900/1904 date systems first before usage in a production environment. I was burned on this using a commercial product this week when reading an excel sheet created on a mac. See: [link](http://support.microsoft.com/kb/180162) 
I use [Arvixe](http://www.arvixe.com). They are inexpensive ($8/mo) and don't cap bandwidth (they even let you stream video if you want). I haven't had any issues and their support is great (I emailed them because my email wasn't working but it was my fault for switching the domain to another host)
Those that downvoted the above comment, why? I host on Godaddy. Is there something I don't know about them?
Pay-As-You-Go is your only option until you start spending hundreds of $$ a month.
Depends on what you need. If you need performance then Azure or even Amazon EC2. Just regular stuff check out myhosting.com, they have pretty good deals on Windows VPS
There is also [EPPlus](http://epplus.codeplex.com/) which I've been using on and off for a couple of years.
It came out as them being pro SOPA/PIPA, so they got a lot of heat for that. That and something about the CEO shooting an elephant caused people to dislike them.
can we get some more context? What exactly are you trying to do? What would Method1 do? What do you mean by NextClass?
I'm not sure of what you mean, but maybe it's something like this: [Code](http://pastebin.com/CYWHdi54) About the nested methods thing, you can't nest methods. However, a method can return an object, Ex. the ToString() function returns a String, so you can do "Dog".ToString().ToString().ToString() if you want to.
Yes but you pay for the best. Good quality service and Support.
It's called method chaining and is used when you want a fluent interface. Google it and you'll find plenty of good links.
appharbor is really easy, and there are a lot of possible configurations availiable. Spend 15 minutes, and your site is live :)
If you have a reliable internet connection, get a raspberry pi and host the website &amp; webservice with mono. Power cost in negligible and you have the fun of having your own server to play with
Ok - I'm going to preface this with the statement that I've never used Entity Framework, so I'm just explaining how I would approach it regardless of that. If it were me, I would probably just use the property to cascade it down to the children: private bool _isEnabled; public List&lt;App&gt; Apps { get; set: } public List&lt;Role&gt; Roles { get; set; } public bool IsEnabled { get { return _isEnabled; } set { _isEnabled = value; Apps.ForEach(a=&gt;a.IsEnabled = value); Roles.ForEach(r=&gt;r.IsEnabled = value); } } ... in the App and Role class, I'd have a similar thing to set WorkAssignment's IsEnabled properties, if that is applicable. You can easily do the same with SetEnabled if you want, just move that same logic to the method. public void SetEnabled(bool isEnabled) { IsEnabled = isEnabled; Apps.ForEach(a=&gt;a.IsEnabled = isEnabled); Roles.ForEach(r=&gt;r.IsEnabled = isEnabled); } A few other ways to do the same would be for the App / Roles / WorkAssignment classes to hold a reference to their parents and not actually have an "IsEnabled" property at all, but just reference the value of their parent, or to use events to bubble the value around. But I don't know if that works with Entity Framework. Sorry. P.s. thanks!
Used to register domains with godaddy. I stopped liking them before it was cool because if that :p Support was horrendous, bye bye. (this was years ago so it may be better in that respect now)
It is probably in your data if everything else is identical.
Would you mind elaborating? Because the same property is able to be called from another view. And the problematic view calls every other property correctly, just not the @designation variable I described [here](http://www.reddit.com/r/csharp/comments/1n983j/mvc3_rookie_question_xposted_from/ccgi5lz).
Ah, that does look to be the case. Bummer.
&gt; Is ServerStack good? Do you mean ServiceStack? http://www.servicestack.net/
Yep, me too, mines almost exactly the same, except I concert the unix timecode to datetime type Thanks for posting :)
you're calling the partial view from your main views with: @Html.Partial("~/views/controls/Grid.cshtml", new CommunityGrid { Communities = Model.Communities, Designations = Model.Designations }) however, you haven't showed us how the Model for the originating views is being set by their controllers, well setting is obvious, more specifically you haven't showed us what it is using as the data to set to the views as the Model. Have you confirmed it has the proper data? I agree with TrikkyMakk, it is probably your data. Your Model probably lacks a sufficient Designations on your originating views. 
Ah ye, didn't bother about that. No problem. Good job getting it working!
Do these look like the right files? There's Designations.cs which starts: using System; using System.Collections.Generic; using System.Linq; using System.Text; namespace OurCompany.Core { public class Designations { ... And there's Community.cs that starts like this: using System; using System.Collections.Generic; using System.Linq; using System.Text; using OurCompany.Core.Domain.Companies; using OurCompany.Core.Domain.Directories; using OurCompany.Core.Domain.Divisions; using OurCompany.Core.Domain.Masterplans; namespace OurCompany.Core.Domain.Communities { public class Community { ... There's CommunityGrid.cs which starts: using System; using System.Collections.Generic; using System.Linq; using System.Web; using OurCompany.Core; using OurCompany.Mvc.ViewModels.Directories; namespace OurCompany.Mvc.ViewModels { public class CommunityGrid { ... Are those the right files? What do you need from them?
Yes! printfn "Hello world!" 
Sounds like your in a bit over your head honestly, but what you need to do is walk through it from start to finish, and here is what I mean by that. First off in your controller there will be two ActionResults that call the initial views, in both cases the model will be instantiated in those calls. What I would do is put a breakpoint in the controller where it calls either of the views, and then step through them and the models that they are building. If both of your views use the exact same logic then the most likely culprit will be here, one of the controllers or models is probably not passing something to the view that the partial view needs to pull both properties. If that is not the case then there is probably something you are missing in one of the views that is called, in which case I'd suggest going through and comparing them line by line. But overall, use breakpoints! Stepping through with breakpoints is one reason why debugging C# is so much easier then JavaScript for instance.
those look like your models. you need to look at your controllers.
Put a break point in your view (maybe on a @{if(true){}) at the beginning the problem view and and examine the model properties. If both views are working identically then the data is probably not getting in to the view model the way you think it is.
DirectoriesController.cs: using System; using System.Collections.Generic; using System.Data; using System.Linq; using System.Web; using System.Web.Mvc; using System.Web.Routing; using System.Web.UI; using Dapper; using OurCompany.Core; using OurCompany.Core.Domain.Directories; using OurCompany.Mvc.Infrastructure; using OurCompany.Mvc.Repositories; using OurCompany.Mvc.ViewModels; using OurCompany.Mvc.ViewModels.Directories.Builders; using Directory = OurCompany.Mvc.ViewModels.Directory; using MvcMiniProfiler; namespace OurCompany.Mvc.Controllers { /// &lt;summary&gt; /// Handles orchestrating all directory related features. There is some /// legacy code smell still here, due to the current iteration, but it can /// safely be removed over time. /// &lt;/summary&gt; public class DirectoriesController : OurCompanyController { /// &lt;summary&gt; /// Database access to directories /// &lt;/summary&gt; private readonly DirectoriesRepository _repository; /// &lt;summary&gt; /// Configure appropriate actors for the directories controller to function /// &lt;/summary&gt; public DirectoriesController() { _repository = new DirectoriesRepository(); } // snipped a bunch of "list all entries" and "list entries by zip" /// &lt;summary&gt; /// Renders a list of active communities for a given directory and home /// designation type. /// &lt;/summary&gt; /// &lt;param name="directory"&gt;Directory&lt;/param&gt; /// &lt;param name="designation"&gt;Designation&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; [RefreshCacheOn(Signal = "refresh", Route = "directories_designations")] [OutputCache(Duration = 3600, VaryByParam = "directory;designation;profiler;refresh")] public ActionResult Designations(string directory, string designation) { // fetch active communities based on directory and home designation type var viewModel = _repository.Designations(directory, designation); // send view to client return View(viewModel); }
Set up a common interface that you apply to all levels in the chain which establishes: 1. the common fields that you want to be able to update en masse 2. a common way to store the child objects(if any) under any given object 3. a common method for applying a function to the current object and all its children. So something like this: public interface MassUpdateable { bool isEnabled {get;set;} string name {get; set;} List&lt;MassUpdateable&gt; childObjects {get; set;} } static void ApplyFuncToThisObjAndAllChildren(MassUpdateable obj, Action&lt;MassUpdateable&gt; methodToApply) { methodToApply(obj); foreach(var child in obj.childObjects) { methodToApply(child); } } public class Papa : MassUpdateable { public bool isEnabled {get;set;} public string name {get; set;} public List&lt;MassUpdateable&gt; childObjects {get; set;} public Papa() { name = "Papa"; childObjects = new List&lt;MassUpdateable&gt;(); } } public class Kid : MassUpdateable { public bool isEnabled {get;set;} public string name {get; set;} public List&lt;MassUpdateable&gt; childObjects {get; set;} static int orderNum; public Kid() { name = "Kid" + orderNum++; childObjects = new List&lt;MassUpdateable&gt;(); } } void Main() { Papa pops = new Papa(); pops.childObjects.Add(new Kid()); pops.childObjects.Add(new Kid()); ApplyFuncToThisObjAndAllChildren(pops, s=&gt; Console.WriteLine(s.name)); }
Controversy over owner hunting elephants
But to actually do things with.
Yes
Meh.. been here too long to care about karma over content.
ServiceStack is amazing. Highly, highly recommended. Demis Bellot (the author) is very active on Twitter, Stack Overflow and Google Groups answering questions and there is a pretty solid community around the project now. One thing to note however, is that starting with v4.0 they are moving to an AGPL license. It doesn't change much (IMO) but it's similar to how JetBrains or Xamarin operate. There will be your standard community edition, which will be free and then there will be an additional tier for enterprise/commercial uses.
I think you're close here - though it's not entirely obvious to me what OP is trying to do yet. Some points to ponder: * Entities are created as partial classes, so you can extend them very easily. Just create a class of the same name in the same namespace and they will merge automatically. * You probably don't want to add a property as noted above like this - it should be a database column if it is needed. In that event, this property will already be defined, and you would need to inherit off the entity to make the property functionality work - also not preferable, imo. * My preference would be the SetEnabled method. Given the data structure, it would look something like this: Enabled = value; //If this is a row in AppGroup foreach (var app in Apps) { App.Enabled = value; //likewise foreach (var assignment in app.WorkAssignments) assignment.Enabled = value; } This way you can simply call: context.AppGroup.First(ag =&gt; ag.Id == 42).SetEnabled(true); Edit: If you call this on an instance that you've already fetched, know you'll have to either still be in the same context or transfer that instance to a new context. And you'll need to save the context after the call.
isn't this called currying?
The IDesign coding standards recommend Pascal-cased constants, which I tend to follow. Intellisense will flag assignment to a constant long before compilation, so it's no big deal.
I made a quick example to demonstrate. Basically, you need to return the objects instance in each method. I should mention, this is not typically done in C#, but it still works. class Program { static void Main(string[] args) { Animal cat = new Animal(); cat.Walk().Eat(); Console.ReadKey(); } } public class Animal { public Animal Walk() { Console.WriteLine("I am walking"); return this; } public Animal Eat() { Console.WriteLine("I am eating, yumm"); return this; } }
No. [Currying](http://en.wikipedia.org/wiki/Currying) is different. Currying is a mathematical equivalence that is trivial in some functional languages, and doable in C#. Where you have, e.g. a function with 2 parameters, and you specify just one of them to get a function of one parameter, based on the idea that x = f(a,b) can be turned into x= f(a)(b), if f(a) returns a function that captures a and requires b. In C# with generics: public Func&lt;T, R&gt; CurryEg&lt;T, R&gt;(Func&lt;T, T, R&gt; funcIn, T a) { return b =&gt; funcIn(a, b); } Func&lt;int, int, int&gt; adder = (x, y) =&gt; x + y; Func&lt;int, int&gt; addOne = CurryEg(adder, 1); 
The methods aren't actually "nested" inside the last one, they are *chained* one after the other. It's called method chaining. See also, Fluent API, [fluent interface](http://stackoverflow.com/questions/10157982/designing-fluent-interface-methods), [builder pattern](http://stackoverflow.com/questions/328496/when-would-you-use-the-builder-pattern). This isn't a bad approach, it can be quite useful in some circumstances - e.g. when building up a piece of data or when talking to an API, as the names suggest. But it's not best in all circumstances.
To take it a step further, instead of returning the object as the class' datatype (Animal), you can return it as an interface that the class implements. This lets you create fluent interfaces with grammar - rules you want to enforce. For example, you can't call the "Walk" or "Eat" method until after you've called the "WakeUp" method.
Yes! I wrote a bespoke business rules engine with graphical DSL in 3 months using F# earlier this year. Totalled about 10kLOC. Is maintained by people who had no prior F# (or FP) experience. Our client is extremely happy with the results. 
I use a Tuple when I want to return more than one value (say, a state and territory code combination) from a method, but don't necessarily want to make another class or struct since it will only be used once. An anonymous type isn't appropriate here since you can't use it as a return parameter.
oh those .net guys are such rascals
1 up
Explains why they made their poster so small.
It truly is a better language. Too bad the rest of the .net ecosystem is such a shitshow.
Thank you. Lots of reading to do...
What he wants to do is this: interface AnInterface{int id{get;set;}} class Class1:AnInterface { public int id {get;set;}} class Class2 : AnInterface { public int id { get; set; } } class Program { static void Main(string[] args) { List&lt;Class1&gt; list1 = new List&lt;Class1&gt; { new Class1(), new Class1(), new Class1(), new Class1(), }; List&lt;Class2&gt; list2 = new List&lt;Class2&gt; { new Class2(), new Class2(), new Class2(), new Class2(), new Class2(), }; Action&lt;AnInterface&gt; action = (i) =&gt; { i.id = 1; }; action.Run(list1).Run(list2); } } public static class Extensions { public static Action&lt;T&gt; Run&lt;T&gt;(this Action&lt;T&gt; do_this, IEnumerable&lt;T&gt; on_these) { foreach (var item in on_these) do_this(item); return do_this; } } Except in the way he has structured the data which could be more ad - hoc. But he should probably set up a "composite pattern" hierarchical structure like the one /u/Pandalicious gave. Or if he is using entity, do it with linq queries, and the extension working on IQueryable. But from the way jquery does this you don't return the function and reapply it, but select a linear list from the DOM / graph, and run operations on it, or change the selection.
What exactly about the .NET ecosystem is such a shitshow? Could you please give some contrasting examples?
Vb.net
While there are ways to get around these problems, here's some things off the top of my head: **For general-purpose use, C# is a windows-only thing.** While mono exists, there are simpler alternatives to C# that are extremely appealing. C# does not stand a chance against Java because Mono is a bandaid. Education needs to be cross-platform, so C++/Java shine there. Mono is not an option for education because it adds a totally unnecessary layer of complexity. CS Students of today are the developers of tomorrow. **For web-end use, ASP.net is either more expensive or more complex** You can host an ASP.NET project on IIS (more expensive) or you can run Mono on top of Linux (more complex). To a non-tech-savvy individual, LAMP (cheap, simple) can be much simpler and is much more often supported/automated. As a result, C# does not currently see as much use for server-side code in the domain of web development. **The common tools for C# cost money, the common tools for Java are free** Eclipse/Netbeans are extremely popular, free cross-platform IDEs that can have plugins enhance their functionality (and yes, I'm aware that there are paid alternatives such as IntelliJ IDEA). Visual Studio Express does not support extensions besides controls/templates. MonoDevelop does not have as large an extension-base as Visual Studio, nor does it see as much widespread use. The expected development environment for a C# developer is most often a paid version of Visual Studio, which is not cross platform. I believe that C# is better than Java as a language. I do not believe its landscape is better than that of Java. If you want C# winning over Java for general use cases, then you need it to be easier and better to use than Java for general use cases. Neither is the case at the moment. C# has bandaids that make many things possible (especially cross-platformness) but the bandaids make it more complex and less appealing.
Actually it's quite common to run C# mono web applications on Linux. ASP.net is open source and it was like the first thing useful on mono. Mono is production ready. It had Microsoft contribute towards it to bring it up to speed. Projects like xamarim and unity are pretty cool and used everyday. Microsoft does provide a free version of visual studios and you can still use whatever IDE you want. The stand alone compilers/ debuggers are all free. A lot of the tools have been ported from C# to java but i will agree the ecosystem isn't as advance although still very useable. 
- Many universities have deals with Microsoft for access to all its tooling - Tell that to the legion of .NET consultants working on Fortune 500 companies - It feels so good to earn money with the work the others do for free, besides Visual Studio Express is also free and the license allows for commercial development. 
&gt; Actually it's quite common to run C# mono web applications on Linux. ASP.net is open source and it was like the first thing useful on mono. ASP.NET works on mono; that's not debatable. ASP.NET is either more expensive (Windows Server) or more complex (Mono on Linux) than working with an automatically-setup LAMP stack. &gt; Mono is production ready. It had Microsoft contribute towards it to bring it up to speed. Projects like xamarim and unity are pretty cool and used everyday. Java is production ready too, and sees more widespread use. Xamarin and Unity are cool, and Mono is production ready. The Java equivalents are also cool. Even if C# were equivalent to its competitors in this realm (That's a whole other wall of text I'm not interested in writing), my argument would be that it would need to be _BETTER_ than its competitors to take over. &gt; Microsoft does provide a free version of visual studios and you can still use whatever IDE you want. The stand alone compilers/ debuggers are all free. Most software developers would expect the paid variant of Visual Studio that supports extensions. The standalone compiler works, but alone is useless for most developers.
**Many universities have deals with Microsoft for access to all its tooling** I love DreamSpark, and it's a great initiative by Microsoft. Most MacOS users (read: A large part of the college student demographic) aren't going to install Windows (even in parallel) and teachers are aware of that. **Tell that to the legion of .NET consultants working on Fortune 500 companies** I haven't argued that it can't be done. I've simply argued that there are often better options for organizations, and that if such options are actually visible, they'll be taken. So far I've seen arguments that C# can do just as much as its competitors. Clearly that's the case; C# sees common use in the wild. If you want C# to be more relevant in the world, then it needs to be BETTER than its competitors. If C#'s competitors have more presence in a certain domain, then there's little reason to work in C# over its competitors for that domain. **It feels so good to earn money with the work the others do for free, besides Visual Studio Express is also free and the license allows for commercial development.** Visual Studio Express is free and limited. A developer would expect a paid version of Visual Studio that supports more than just template extensions. If you're looking for free software, there are better alternatives to visual studio express edition, especially if plugins are of any value to you. Lots of server-side code is written in C#, that's not debatable. There's a reason why C# isn't huge compared to Java in some places (I hate Java), but going "lol java sux c# rox" or "but there are bandaids to fix that!" isn't going to improve the landscape. To add to my above post: If you're developing software for other people to use, do you really want your end users going through the complexity of installing mono to get things working? Once again, there are ways to go around everything, and they work, but that doesn't make them good.
&gt; To add to my above post: If you're developing software for other people to use, do you really want your end users going through the complexity of installing mono to get things working? That is why we only use .NET for Windows only projects. For multi-platform software we use Java/C++. 
&gt; So it's not only a windows thing, it it? According to this page, somebody is running mono on a cluster. If you want to run .NET code in a cluster, run it on a Windows cluster, or a cloud service. &gt; More expensive, yes, rarely done, no. Currently ASP.NET have marketshare of about 20%. One in five is not "rare". The post was reworded, likely at the same time that you were writing your response. That being said, just because something can be done doesn't mean that there are alternatives (which, imo are often better) that should be pursued. &gt; &gt; Education needs to be cross platform so C++/Java will always be more common for introductory courses than C#/VB &gt; Yes and? If you want your language to do well in the real world, at a large scope (as opposed to the smaller scope that languages such as Erlang are amazing at), then education sort of does matter. &gt; &gt; Java tools for commercial development is free, C#'s tools aren't. &gt; Aren't MonoDevelop and SharpDevelop free tools for commercial use? &gt; Hardly a "Shitshow". I didn't write the original post that mentions the landscape being a "shitshow". There definitely are issues that hurt C# overall, though. I did mention that MonoDevelop (and SharpDevelop) do work in one of my above replies. Just because something works doesn't mean that it is a better option than its alternatives.
You can talk about what you like/dislike about either product but to pit one over the other is counter-productive without first knowing the requirements of the project. 
&gt; Windows Server is not cheap. Windows server web edition is free and seems to work great for everything.
... Which I'm aware of. I've had uses for both cases. The common business owner wouldn't be aware of the differences between either, and my point is that they wouldn't care. A business owner would look at cost and complexity. I feel I've clearly outlined that in a general case, C# really doesn't do well there. Go google for VPS/Shared Hosting and act as if you're a business owner that doesn't specialize in this domain - I think that'll make my point more clear. For medium-large businesses, I've clearly stated that there are arguments for using the software on both sides, and that "I believe in using the right language for the right job". 
Oh, I see! thanks for the explanation.
I don't know how much you get paid per hour but the cost of Windows Server over Linux is hardly considered a factor. and lets be honest, they're both pretty easy to use if you know what you're doing. I'm not in the business of making small websites, so I'll just take your word for it. 
&gt; A business owner would look at cost and complexity. I feel I've clearly outlined that in a general case, C# really doesn't do well there. Cost is only marginally higher in certain cases (very large sites). Complexity is absolutely not higher. I'm not even sure how you're measuring that. And don't forget that C# with MS tooling is one of the most productive environments for web apps, windows apps, and now even mobile apps (xamarin). The ability to pump out polished products at incredible speed is unmatched in the java or c/c++ world. What business owner wouldn't care about development time? 
Sure. The DSL lets the non-developer business user control the live system from their desktop. They get a (WPF) GUI client application with a few tabs. The first tab tells them the schema for the data coming in. The second tab displays editable "rules". The third tab displays editable test inputs and outputs. The "rules" are a sequence of (ML-style) `match` expressions in this kind of format: arg0 arg1 arg2 ident patt0 patt1 patt2 expr0 patt3 patt4 patt5 expr1 You can edit the shape (number of arguments, match cases etc.) using the mouse. All of the patterns and expressions are expressed as graphically as possible, e.g. a pattern over a value of the type `A|B|C` is expressed as a combobox containing just A, B and C. This prevents the user from inserting incorrect information as much as possible. Any other errors are caught by a static checker that runs in real time. Execution flows through each `match` expression in turn. Variables can be replaced but there is no mutation, i.e. the language is purely functional. There are no loops or recursion either. The GUI provides load and save of rules with version control maintained on a local server. A rule set is compiled before it is uploaded to the live server, which uses an interpreter to execute the rules. Consequently, the behaviour of the live system can be updated by a business user in real-time. F# is ideal for basically all of this because this is metaprogramming. The whole solution is only 10kLOC. 
&gt;I'm not getting paid to do write my opinion I meant how much you're getting paid per hour to develop software. If you're charging $100 per person per hour to write software then $20 extra a month for a Windows VPS isn't that big of a deal. However if you're creating small websites and your requirement is a low cost server, then it could sway your decision to use a Linux VPS instead. If your project requirements say an average person of the street should be able to configure the webserver, then yes it's an issue and it would reflect in what platform you want to choose for that project. At the end of the day, all projects have different goals they have to meet which is why there's no point in saying language X is better than Y for all small projects. You're more than welcome to mention a project you've done in the past and why that language/tools did or didn't mean your requirements. but to talk generally and say 'all small projects should use language X because it's cheap', is fucking retarded. /thread 
You're going completely the right way about not blocking your UI thread. Don't give up, threading is hard to grok! The await keyword causes all following statements within the calling method to be compiled as a continuation: they will be executed only when the awaited method is completed. So in this case, your WriteLine of the result will only happen when the task has completed. And yes, repeated clicking of the button will create multiple tasks. There's no guarantee as to the execution/completion order here so you can't say whether Server A or B will return first. You might want to consider disabling the button and re-enabling after the await. Other topics I'd suggest researching are task cancellation and exception handling (how to handle exceptions thrown within the context of a task).
I was going for a "for" cycle, something like: for int i &gt;= 10 &amp;&amp; &lt;= 50; i++ But it already gave me some errors.
u need start block with { and end with } for (int i = 10; i &gt;= 10 &amp;&amp; i &lt;= 50; i++) **{** if(i%2==0) Console.WriteLine(i+" "+Math.Sqrt(i)); **}** Console.ReadLine(); 
PracFu represent!
Why would you not just do i += 2 as I did and then you don't need if (i % 2 == 0) You're just doing extra work and making it more complicated than it needs to be.
yes but in my code u can start range with not even value but w/e u are right ;d
Yeah, tell that to our 8 figure that runs two critical production apps on Mono 3.2 on CentOS 6.4. These generalizations are shit.
For extra fun using Linq, you could also do it one line: Enumerable.Range(10,41).Where(i =&gt; i % 2 == 0).Select(i =&gt; Math.Sqrt(i)).ToList().ForEach(i =&gt; Console.WriteLine(i));
At least in Europe you seldom have in-house development nowadays. Most companies have small IT departments, with development being done via consulting companies. On my company we do all types of development, depending on what the customers ask for, and many do ask for .NET. Others do ask for something else.
No clue why you got downvoted, this is nice (just fix .Range to be from 10-50
Excellent, thank you :) That's essentially what I'm going for. It's bizarre, the system I've inherited has something similar, but without a ui. The comical thing is, it mixes a load of UI related stuff into their custom xml schema, so they've sort of accidently reinvented xaml. 
I would be nice if you could have replied to my post instead of editing your post, as it makes it difficult to have useful discussion.
DotNetBar has a wizard form you can implement in your program, if that's what you are looking for. If not, than I didn't understand your question sry.
&gt;CS Students of today are the developers of tomorrow. Seriously what schools are you going to where CS students learn the skills necessary to become developers?
There is a [.net wizard control](http://msdn.microsoft.com/en-us/library/w7dyf6b5.aspx)
Seriously. The goal of a good CS program is to learn the theories of programming, not specific languages. That's why many schools use made up languages, so that you focus on the theory, not the language. Sorry if this sounds arrogant but I went to one of the top 2 (it rotates) CS programs in the US and our languages were manufactured and named after landmarks on campus.
Which version of Server, i.e. 2008/2012 etc. are you talking about? Thanks!
You can use wix installer which comes with a basic wizard template and also allows you to make custom views. I've also created wizards using frames in wpf. 
I would like to go back to the company with the results. I will do this once I have 1000 poll answers. Thank you very much for your time. 
I always imagine java developers as the messy room type of people, and c# developers as the slick guys in suits. I don't know why.
Yes, it was stitched together from different angles. I tried zooming in on the original image and it was unreadable. There was a shot from another angle that was readable, but it didn't include the JavaOne banner. 
Many questions seem completely irrelevant to knowledge of C# or NetSuite. When was the last time you, or anyone you know, had to check whether a number is prime or not? Why would you care about all SOAP headers since a) libraries abstract that and b) a quick Google search gives the answer? Why are there 5 points for the first question when the answer is extremely simple? What problem do you often solve that looks even remotely like the change counting problem? Also, the formatting is terrible. If this is the first "official" impression you're going to have on the job applicants, make it perfect.
In my opinion it's pretty bad if it's aim is to determine the expertise of a .NET programmer. The math section tells me absolutely nothing about a prospective employee's ability as a .NET developer. Maybe if the questions are relevant to the hiring company it's worth including, but as a general purpose test they're pointless. The software section isn't bad but question 4 is pretty ambiguous at first glance. Presumably it relates to the underlined parameter, and is asking about extension methods but I've no idea what answer they're looking for with "where can it be used" - "on an reference to an object of the parameter's type" presumably? Question 6 is terrible, there isn't enough information to say what the most import technical area of consideration is, a-d are all more important than e, but ranking them beyond that requires much more information about the existing code base, the company, the software, the developers involved, time, cost, etc, etc. The code section is okay. Question 1 is perhaps the best one in the whole test and would at least tell me something about the candidate as a .NET developer. I think question 2 is asking to do the outputting using breadth-first or depth-first (in which case I'd use those terms) another good question, gives the potential for the candidate to display some understanding of iteration over recursion. 3 &amp;4 are good SQL questions. The code on question number 5 is terrible, never mind whether it's reliable.
If i were you, i would google "linq to xml".
Here is an article that meshes the stream reading technique you have with linq to XML. http://blogs.msdn.com/b/xmlteam/archive/2007/03/24/streaming-with-linq-to-xml-part-2.aspx
I would seriously consider walking out if an interviewer handed this to me.
If I were you I'd try deserializing to an object. Or linq like others have said. 
It's not the worst quiz I've seen, but it could be a lot better. The maths section was awful. If an applicant could answer all the questions in that section perfectly, I would know little more about them that I could use to base a hiring decision on. The code questions were a mixed bunch and actually suggest the author is a bit old school (being polite). So you've got questions about regression tests but not unit tests or integration tests or anything that might fall into TDD/BDD. You then have a question where rectangle derives from IShape, and square derives from rectangle. The problem seems to be that the draw method isn't virtual and the square implementation doesn't use override or new. BUT more important is that it seems to be the classic example of a violation of Liskov Substitution Principle (of the SOLID principles), although the author if confronted in a carpark could argue that they haven't specified the height/width properties that exist in the examples that show it's a violation... So I'm guessing he/she doesn't know about SOLID. If they knew TDD they would at least have heard of it I thought. The threading example is a mess. I mean it's unpleasant code, but looks like it might have some extra unexpected side effects I'm not sure the author understands. To be fair I've only glanced over it, but besides the field that gets used, there seems to be issues with accidental variable capture among others. I find the use of extern throughout the exam quite concerning. Are we supposed to pick up on that, or is it just a side effect? The one that really annoyed me though was the "Which of these five things is the most important thing to concentrate on when porting out web app?" question. That is very much up for discussion, and there is no correct answer outside of your specific app in its specific environment. So it feels like the author is looking for someone who supports their perspective regardless of its veracity. So specific things that would improve it. More questions with shorter answers. Avoid essay answers, and getting people to hand write a load of code is a pain in the neck. Create an exam that filters out the terrible candidates then go face to face (or phone to face) with a selection. Avoid trying to catch out the person taking the exam. Avoid asking questions which would make any competent developer ask "Why the hell are they asking this??". Give X questions, preferably multiple choice. You can then get an agent or assistant to mark them. I can usually get a feel for a developer's level of skill within five minutes of starting a telephone interview, and yes I have cut them off after that time (politely) if they weren't going to cut it. I reckon that's quicker than someone could accurately mark that exam. 
If I were you, I would google wolframalpha api.
I will check it out - thanks!
I tried this but just couldn't get it working. Maybe I'm doing something wrong. The example I found used it in a console and since I am going to be using it with a windows forms application I tried to convert it but it just threw exceptions and forced the application to close.
You can use XmlDocument and XPath: var cli = new WebClient() string stringContainingXml = cli.DownloadString(wolfram_xml); XmlDocument doc = new XmlDocument(); doc.LoadXml(stringContainingXml); // Get the specific node XmlNode badNode = doc.SelectSingleNode("//pod[@title='Results']/subpod/plaintext") // original code with mispelling XmlNode node = doc.SelectSingleNode("//pod[@title='Result']/subpod/plaintext") // correct spelling, use this Console.WriteLine(node.InnerText); There isn't any error handling in the above, but it should be a good enough start for you. Using XPath will allow you to turn all of that code into a few lines of code and easily select the proper node. EDIT: Originally I had this as iterating over all nodes, but I realized the OP wanted just the "Results" node, so I modified my code. EDIT 2: Fixed a misspelling on the title which would lead to a null reference error but I'm leaving the original as "badNode" so that children comments make sense. 
The way I have done this in the past is to use a single windows form and then multiple user controls. The windows form maintains state while each phase of the wizard will have a different user control that can be displayed when the user gets to that stage.
[Avalon Wizard Library](http://avalonwizard.codeplex.com/)
Did you try googling for an XNA tutorial? There are a bunch of good ones.
There's probably something already baked for you to use in the net. However, I can share what I remember from my vb6 days :) Make a huge form. Put all wizard steps in separate frames, in a matrix-like layout (n x m rows), copying the first frame to keep the size of the sub-pages the same. Resize the form just to show the first frame, aka wizard step / page. Programmatically move the prev/next page on top of the current frame. Done!
 It's best for you to ask you teacher. Discuss it with him/her so you could get more difficult assignments or assigments for later in the course. XNA is a great starting point for 3D and 2D so I suggest looking into that. Edit: There is a Tile Engine tutorial series using XNA on youtube somewhere may be dated so you would need to figure our some changes made in XNA but its still a valuable source. Link: http://youtube.com/playlist?list=PL0A865073DA96A7DA
XNA is a dead technology. I would avoid it. Check out unity3D as it's the leading game engine that allows for scripting in C#. If you do want help with unity feel free to ask me or check out the unity3D sub. 
Dear lord somebody up at the BCL team needs to make that clearer. Are you sure it's "starting from 10, go 41 numbers" and not "starting from 10, go to 50"?
&gt;video-game programming (what I'd like to do after college) If someone says this starting out I strongly encourage them to reconsider programming.
Considering I actually ran the code I wrote and it was correct, yes, I'm certain. Also, a quick look online confirms: http://msdn.microsoft.com/en-us/library/system.linq.enumerable.range.aspx
Dear *lord* that is a misnomer... but I'm having a more difficult time coming up with a better name for it... Maybe .From(int, int)?
&gt;It's a technology I have been fascinated with since I first played Duck Hunt when I was 4 or 5. &gt;I don't think software programming is as satisfying as programming a game that can change and form for the people that play it. Thank-you for confirming my opinion.
I've been a pro game programmer for a decade. Games are, by far, the most difficult kind of software to program. They will demand everything from you. They are also, by far, the most fun to code. If you really want to jump ahead, follow the same assignments schedule as your C# class, but do everything in C++. Look for "Thinking in C++" by Bruce Eckel to get you started.
Firstly: pay attention to the text based games you are working on. They may not have flashy graphics, but they are trying to teach you a) the basics of programming and b) the basics of making a game. All the programming skill in the world is useless if you don't understand how to make a balanced, solid game. Second: I recommend not focusing on making a game engine. Very few games that you know and love start from scratch. If you want to finish the year off with anything resembling a 3d game you have to get used to using a toolbox. Stand on the shoulders of giants and all that. XNA is being discontinued, but is still a good place to start (a lot of good tutorials including video tutorials). Unity is NOT being discontinued but requires a bit more understanding of game engines and programming in general. Thirdly: really consider what you are going after. "Making games" is like "building skyscrapers". It involves a huge array of disciplines that each take an enormous amount of dedication to become competent in, let alone master. If you want to program in the video game industry, become the best programmer you can. Not the best C# programmer. The best programmer. C# is a fine place to start but you have to know what parts are generalizable to other languages. If you are interested in why games are fun, start learning about game design. Not video game design. Game design. Try to make your own version of magic or some other tcg. It shows you how difficult it is to design a game in general. The common thread is that every aspect of making a video game is its own discipline with a breadth of knowledge that extends well beyond the world of video games. Games are interesting and provide a different setting for many of these skills but step 1 is to be EXCELLENT at the thing that you love. 
I'm not "*being an asshole*" about it. I don't think you understand what programming involves. I think you -- and others who just want to go into programming to make video games -- see programming as a means to an end. A tool you have to get and put in your toolbox to actualize on your desire to make games. Programming is a field with too much depth and breadth to be considered in this way, and if you do consider programming in this way, I almost guarantee you that you'll be a shoddy programmer. &gt;I just can't see myself sitting down and programming a complicated piece of software and being satisfied with my work. Supports this. You don't appreciate or like programming -- or the idea of programming -- for its own sake, it's merely a means to an end. The decision to program is life-altering and, more importantly, -consuming. It's not like riding a bike -- something that you learn once and never forget. It's like owning a boat. It's very high maintenance, very expensive, and if you leave it and come back to it -- or don't do the necessary upkeep -- you'll come back and find that it's sunk and it's all useless. It's not the kind of thing that you can learn as a second choice, or because you have to go to achieve a certain goal -- i.e. making games. It's something you have to pick up and love for its own sake. And you don't have that. So do something else with your life. Don't be a second-rate programmer because you played Duck Hunt when you were 4.
&gt;Most MacOS users (read: A large part of the college student demographic) aren't going to install Windows (even in parallel) and teachers are aware of that. I'm not sure why this matters. &gt;Visual Studio Express is free and limited. It doesn't allow you to install Extensions; that's pretty much it. &gt;A developer would expect a paid version of Visual Studio that supports more than just template extensions. Why? I'm the only person actively working on my Company's C# codebase that isn't using Visual C# Express 2010. (I'm using Visual Studio 2013 Ultimate). Everybody else seems to get on just fine without Resharper. &gt;If you're looking for free software, there are better alternatives to visual studio express edition SharpDevelop, for .NET Development, would probably be better. Not used it in a while personally. &gt;especially if plugins are of any value to you. Aside from Resharper I'm not sure there are any plugins/extensions I would really want installed. I went made with Plugins in Visual Studio 2008 and I paid the price in a severely slow start-up time and performance issues. &gt;If you're developing software for other people to use, do you really want your end users going through the complexity of installing mono to get things working? Some Distributions of Linux come with Mono pre-installed. Installing it is pretty simple from the package manager. For Java most distributions come with Java 6 so you would need to install/update that JRE on those systems anyway, so you aren't really cutting out a necessary step. (not to mention with the package manager you can always add a requisite for Mono and let the package manager deal with it, that's what most software in repositories that use C# do, such as Banshee). 
Our codebase consists of 6 different programming languages. We have about a dozen developers and each of us knows at least two of them. Off the top of my head we have THEOS BASIC for the old codebase, C# for the new codebase, some Java stuff I wrote that is called by the C# Programs to work with Jasper Reports, THEOS EXEC language, NSIS Installer scripts, and PostGreSQL. Basically we are a company that develops code and we've managed to avoid duplicating code at anything but a small-scale so far. In fact, I would argue that anybody that thinks a company is going to care about code duplication hasn't actually dealt with or worked in one; once you get beyond our development team considerations of the code or how easy it is to work with disappear and the only question is whether it works and when we can release it.
There's nothing wrong with C#, it's just not a game industry standard, yet. Even in 5 years I don't think it will be. If you want to make games for PC, use anything! C# with XNA or Unity, flash with flixel, love2d, processing, cocos2d, sdl... the list is endless :) You will learn a ton about making games just by making them, in the language and for the platform of your choice. If you can't decide, just try making Pong in Unity. Then make Breakout. Then Tetris. :) That said, if your goal is to eventually program games professionally, you won't get hired if you don't know C++. So if game programming is something you REALLY want as future career, then, the sooner you dive into C++, the better.
Hmm... I think I see your point, but I think you're also thinking of "computer scientist." For starters: programming is very much a means to an end. Namely: shipping! You put your code out into the world to make money or help people or entertain them, or all three. That doesn't mean that you can't appreciate good code, or spend time on it. It just means you have to ship. And usually long before you get to do things like "refactor." :) The really good programmers I've worked with get this balancing act almost innately; the really second rate programmers, well... they're a lot like what you're describing... forever tweaking and making their code better, but never releasing anything... I think what you're saying through is that programming isn't glamorous. This is true. And, FWIW, pro game programmers nowdays have very little say in the creative decisions of the games they're working on. That's why we have Jon Blow and tons of others jumping ship from EAs / Ubi / whatever, and doing the indie thing. Modern-day game programmer life is, you get a spec, you implement it as quickly as you can (giving it flexibility where you think it'll need it), and then you wait and see what the focus groups say or the designer says or the LDs say or the producers say. You are very obvious about what you're putting in, and what you're working on day-by-day. You put in an easter egg unapproved by your producer, you're fired. You sit in on very few design meetings, and when you do get invited to one, it's to ensure that what the crazy designers want to do can actually be done given the current schedule / hardware specs / etc. The days when you can just, like, sit down one morning and think, "hey, I think I'm going to implement this new gameplay mode, cause that might be fun..." Those days are long gone, except at the highest tiers of the most programmer-run studios (Valve, etc.). So yeah, OP, if your dream full-time job is creating worlds from your own head, you want to go game designer, not game programmer. By and large, programming games isn't THAT different from programming, say, banking software... but if you love games, you (hopefully) get to work on making something you love, and even if you're not that into the specific game you're making, you're surrounded every day by really great artists, designers, and game developer people, instead of boring bankers... and, of course, you can point to a box on a shelf at Fry's and say "check it, I helped make that."
&gt;I think you're also thinking of "computer scientist." I'm definitely not thinking of "*computer scientist*". &gt;For starters: programming is very much a means to an end. Namely: shipping! You put your code out into the world to make money or help people or entertain them, or all three. I would maintain that people who learn programming solely to make money or help people are going to wind up as second-rate programmers. Programming is something that you should learn to do **because you love to do it for its own sake**, not because you want to use it as a tool to accomplish some grand design. As I said in my previous post: Programming is a field too broad and too deep to be learned simply as a means to an end. It is an incredibly high maintenance craft, and those who are in it just for the money become obsolete through their own neglect. It requires independent passion to be a good programmer. You can't be a good programmer if you learn to program because you want to make games, because you won't give your skill the time and attention it needs to take foot and grow, you'll be forever using it as simply a tool, and never spending time on developing it -- because it is not what you love. &gt;the really second rate programmers, well... they're a lot like what you're describing... forever tweaking and making their code better, but never releasing anything... Maybe you could point out exactly where I said this? In fact, if you **read my post** (gasp) you'll discover that I didn't actually talk about the **act** of programming **at all**. I talked about the **reasons you should choose programming as a career path**, which has **nothing** to do with how you do or do not program, how you do or do not tweak your programs, et cetera. My message was simple: You should become a programmer if you **love to program**, not because you **love to make games**, or **love to make line of business software**, but because you **love to program** because of its own intrinsic merits. If you love just one thing that you do with programming, you'll neglect the core skill of programming, and that's what breeds second-rate programmers. People who don't absorb and engage in the entire spectrum of programming, who don't bring experience and techniques from all areas, who don't develop their skill independently. People who learn to program for a certain reason, and don't step beyond that domain, do not and cannot grow the field, and are ultimately stymied in their growth as programmers.
XNA gets dropped (officially) in 2014, so for now it's at least on life support. Regardless of that, there's a lot of info available, and experience will always be experience. If you keep waiting for a better tech, you'll keep waiting forever. Unity is good though, don't get me wrong, I just object to your attitude. :) 
Any software can be beautiful. If you think only the end result matters, however, you aren't going to last long at all. You've got to be able to appreciate and feel satisfied for the intermediate problems you solve, because that's what you will be doing. It's a series of very small battles, each its own reward upon completion.
&gt; I'm not "being an asshole" about it. in my opinion, you are. the kid is in high school and is obviously showing signs of being pro-active and enthusiastic, and your comments have been anything but constructive. so, why bother commenting except to showcase your obviously superior experience? congrats. you've pointed out a high school student might not understand how things work in the so-called real world, but whether he does or not, why not help him with his questions instead of being a jackass? &gt; I don't think you understand what programming involves. I think you -- and others who just want to go into programming to make video games -- see programming as a means to an end. A tool you have to get and put in your toolbox to actualize on your desire to make games. i don't think you understand that not everyone wants to be a code monkey, computer scientist, or whatever else you think "programmers" should be. in fact, the programming and software engineering world has been totally worthless in making their technology a "means to an end". artists, designers, scientists, etc. are apparently required to hunker down in a basement running emacs on a linux box and do their job at the same time. tools like processing and labview are steps in the right direction of becoming a means to an end and making fantastic technology available to the non-programming elite and non-computer scientists, and i think tools like these are essential.
Ok well, read my comment in 2015 when everyone's using unity :p
this is great advice, in my opinion. it is much more constructive and on topic than the rude, high brow discouragement currently sitting at the top of the comments.
Thanks! That is actually why I decided to comment. There wasn't much good going on in that thread and there really is no use berating the kid when he is just trying to get a start.
&gt; If someone says this starting out I strongly encourage them to reconsider programming. if someone says this in a thread where a poster is asking for direction and help, i'd strongly encourage them to reconsider commenting or their lack of explanation and elaboration.
Oh, goodness. That's a logical fallacy right there! The majority isn't always right! Again, I'm not saying Unity is bad (I know it's good :)), just that taking a good step is more important than taking the best step when you have little or no experience anyway.
1. In school and only ever as a theoretical question, never offering any practical purpose. 2. I wouldn't, for this exact reason. That is one of the massive advantages of being a .net developer, comfortable tooling. Both asmx and WCF (now including Web API) keep you abstracted from SOAP, so you don't have to manually deal with SOAP headers or perform tasks like writing WSDL. 3. No idea 4. I've never programmed a vending machine, but with over 15 years of experience never had to code anything that resembles that problem. Perhaps I'm forgetting something, but no I doubt it. 5. I agree with you, and to add insult to injury I was told do the maths questions last because they are not that important to the hiring process. If they're not relevant then why have them on there at all. 
I agree completely with your analysis. I too found the SQL questions to be most pertinent. Furthermore, for the most part I treat .net implementations as either being version 2 or ANYTHING HIGHER. Since mostly where you can implement 3.5, there is an easy upgrade path to 4. So for this reason I don't look cherish the exact origin (date / version) of language features. Too be honest I don't know too many developers who could tell you if extension methods are part of .net 3 or 3.5. The problem is the test assumes you have memorized .net language "What's new" features, and somehow this makes you a better programmer. 
&gt;Games are, by far, the most difficult kind of software to program. What, exactly, qualifies you to make this statement? Do you have extensive experience in developing **every other kind of software**, from operating systems to Enterprise line of business software? &gt;Look for "Thinking in C++" by Bruce Eckel to get you started. You want to get someone started in C++ and you're going to suggest a book written/published **13 years ago** when C++98 was current? The language has changed a lot since then. Move semantics and **std::unique_ptr** would be sufficient to make me reconsider the way I teach the language.
&gt;Do you have extensive experience in developing every other kind of software, from operating systems to Enterprise line of business software? I do, yes. &gt;You want to get someone started in C++ and you're going to suggest a book written/published 13 years ago when C++98 was current? Yes. &gt;The language has changed a lot since then hahahahahahahahahaha 
&gt; Thank-you for confirming my opinion. what does this even mean? do you mean "... confirming my opinion as fact"? your opinion was confirmed as soon as you stated it because well, you know, that's just, uh, like your opinion man.
Why would you take a good step instead of the best step? Understanding the basics is great and there are other more low level places to do that than XNA. If he wants a head start on game design and specifically scripting with C#, then why wouldn't he start in Unity? Presumably when he's done school, XNA will be dropped. If he learns the interface/ins and outs of Unity now, that's the best head start he can get. I stick by my advice. 
my main contention with your comments is that you merely alluded to criticism rather than providing constructive criticism and/or elaborating on what you seem to feel are misguided intentions. with that said, you are making HUGE assumptions about this person's goals, intentions, and passions. nearly every statement is manufacturing an issue based upon an assumption that has been created and generalized from a very small and easily understood request. most of it could be categorized as you projecting your opinion and experience onto an entire industry. it's honestly not worth my time to respond on a point by point basis, as i highly disagree with many of your statements and some do not even make sense to me. furthermore, merely responding would require me to make my own assumptions about the original poster's intent, which is pointless to do and out of the scope of what was asked. thank you for elaborating on your position.
There are a lot of points that you have brought up which are excellent independent of this thread. I am a professional programmer and really love working with people that have passion for this field like I do. It is a rare and wonderful thing. Having said that, I don't understand what you are trying tell this high school kid. I mean, you said it yourself: &gt; He's not being pro-active and enthusiastic about programming, per se, he's being pro-active and enthusiastic about making games That is precisely right. And just like game programming is a very small subset of programming, game programming is also a very small subset of making games. This kid obviously really likes games. I am willing to bet that op doesn't quite know why yet (no offense :)). So what if he starts out in a game programming course in high school? It is a first step that starts getting into how games are made and breaking down a very broad topic into its constituent parts (albeit at a very course granularity and an emphasis on programming). Should we really be sitting here telling this kid that they are wasting their time because their motives aren't "pure" enough? You know as well as I that the very reason that the course exists is to get kids more interested in programming and computer science in the first place by dressing it with something that has mass appeal. Should we abandon the course because it isn't a "pure" programming course? They are in high school. Give them a chance to try stuff out and explore with encouragement and help. If they don't like it they have time to change course and the more they are exposed to, the better the odds they will find something they can be passionate about. I honestly mean no rudeness or offense. I would just hate to see some kid miss something great because they got scared out of it or discouraged.
I was just telling the guy you can host it there. Ive hosted many there over the years and they are affordable and reliable, to me. I just excepted more from this sub than downvotes for requested information.
Not that we WANT to mess about with Word (or any Office docs) from within an application. But, like a gun, you don't need to unless you really need to. This is the easiest, coolest way I have found (and Interop SUCKS).
DocX is great, IIRC it's basically a wrapper on Microsoft's "Office Open XML SDK" library. I used it in a business application for generating both Excel and Word, OOXML SDK is very very verbose, it's not something that you easily get into, if I could go back, I'd use DocX. And DocX has a better level of documentation, it was a mental hell generating docs, I'd have to create a 'template' in Word, then go off the .docx metadata in the file.
SharpDX is a better alternative for game engines.
It seems like the webhosting is down :/
I had a chat with the web hosting company and it's a large failure of their servers. I am sorry for this guys and as a temporary solution I can provide MD source file with the links - https://github.com/jakubgarfield/chodounsky.net/blob/master/content/posts/2013-09-30-weekly-digest-32.md
I've written against the .xslx Open Xml library, what a huge PITA. If I had it to do over again, I would have bought a commercial library - would have been faster + cheaper. 
I think if Notch had applied to, say, EA or Blizzard or Ubi, he wouldn't have immediately gotten hired, no. Not for a strict programming position, anyway. "Past hits" or portfolio doesn't matter that much. If you're applying for design, it matters more, but when going for a programming position, by far the most important qualities are your technical skills. Knowing c++ and having a portfolio full of fun games will put you above a candidate who's, say, straight C++ with no real prior game programming work. But having a really awesome list of fun flash games you've made, and no C++, won't put you ahead of someone who knows C++. Again, for a job programming AAA games at, say, EA or Ubi or Blizzard, anyway. Design roles are a different story, and there are smaller game shops, and mobile shops, for which C++ isn't nearly as strong a requirement. But for the big PC and console guys, it really is. 
Something should never change. Back in college, I was into game programming as well. I was scratching my head while trying to calculating the projectile of a cannon ball in a 3D environment. But my math wasn't good enough. Do they have API for this kind of things now a days?
I just use the OleDB driver. Makes it so much better as long as you don't have a lot of embedded objects.
No they are indeed not irrelevant at all. I think you for providing this sanity check. 
Sadly, there's no 64-bit version. [1] [1] There technically is, if you install the latest MS-Access. But its not distributable. 
C is important because you actually have to work with pointers and memory allocation. It's scary the number of Java developers who don't really appreciate how their objects are passed around between methods.
What the fuck. Get out of here.
I'd love to see improvements in the JIT, maybe SIMD support too! ...one can dream.
that's not something exclusive to c though, and a huge portion of the time no one needs to understand how to program with pointers or memory allocation because the GC is "good enough", an understanding of pass by reference vs pass by value would be enough
the method that is called is determined by the type of the variable, not the type of the instance. for example: D d = new D(); A a = d; B b = d; C c = d; variable 'a' is of type 'A', so it calls the method on 'A'. similarly, variable 'b' is of type 'B', so it calls the method on 'B'. 
the implementation of F() on B overrides the default virtual implementation on A. Declaring a method as "virtual" tells it that any class inheriting for this class can replace the virtual method with their own implementation. Your object is declared as type D. but your reference to it named "a" only wants the members belonging to type A (as you declared it as such). a.F() uses the implementation of F() from B because that implementation of B overrides the implementation on A. It does NOT use the implementation of F() on C/D because you are looking at the members of Type A, and C broke the override inheritance chain of F() by using the new keyword instead of override. this is a really weird example and I would be shocked/disgusted if you ever saw this in practice. but it does a good job showing how inheritance works with relation to the virtual/override and new keywords.
Do not worry. If you have experience and have worked with C++ and Java, you will have zero problems with C#. Syntax is easy and the libraries will come to you fast.
Books, Jon Skeet's is brilliant and easy to read. For Threading google albahari and ebook (I might have that misspelled, but it will get you there) which is about the best threading guide you'll find. Richter's CLR via C# is definitive and huge but worth reading. Then there's the stuff outside the core language. I'm assuming they are using at least v3.5 of .net. There are still people out there working on v2 projects believe it or not :/ So 3.5+ you have WCF, WF, WPF, ASP.NET webforms, ASP.NET MVC 2-4. WCF just get Juval Lowry's book. WF ignore unless you know you will use it. WPF is a UI technology, focus on MVVM (it's a pattern) books. If it's an older desktop app, it might be WinForms. ASP.NET comes in old and new, webforms is old and MVC is new. Current version of MVC is 4. Data access technologies are ADO.NET and associated with that EF (Entity Framework). EF also comes in a variety of flavours. Patterns and approaches have become important at last. Get to know SOLID principles if you don't already and how they apply to agile development. Even if your new team isn't agile, applying SOLID will help you. Silverlight is another technology which is like Adobe Flash. People compare it to WPF, but you are running in a totally different runtime, and not all language features/libraries exist. For general training sign up to PluralSight. It's cheap and has A LOT of courses on dot net subjects including all the above and more.
I recommend subscribing to Pluralsight.com and watching some of their C# videos. They are excellent.
I was confused by this for way longer than I should but not like OP was confused. I thought a.F() call should show "D.F" until I finally recognized the reimplementation of F() in class C. Class D is overriding class C reimplementation of F(). Nice little puzzle, maybe worth making interview candidates sweat over it. 
&gt;So what if he starts out in a game programming course in high school? I see no issue with that, but that's not the situation at hand. He's specifically eschewing other kinds of programming [here](http://www.reddit.com/r/csharp/comments/1neft0/im_deciding_to_get_ahead_of_my_classmates_in_c/cchw6po). This is not a good start to a career in programming. The odds are against you winding up in game programming -- that's a very small slice of what the industry is about.
Take a look at Linqpad and O2 Platform's REPL scripting environment They are great ways to test and learn the .Net Apis
That is some really unreadable code right there. Who codes like that? Was it on purpose? 
Btw I had a really sweet analogy for all this stuff involving a professional wrestler, and needing to tag in for an epic spin-kick and stuff. It was really educational. And then I accidentally navigated away and lost my progress. I just wanted to let you guys know I tried, I really did.
This is great news really. MS invested so much effort into language enhancements, it's nice to see them give the CLR some love too!
A snickering bastard codes like that.
Seriously.
On purpose. It's a question in a test.
Thank a lot. So lets say if class C won't have the new keyword but will override F(). when invoking a.F it will run the one on class C ?
So because D inherit from A eventually, i can say: A a = d; and 'a' will actually behave like class A and not D from now on.
While I don't disagree that a LAMP stack is probably cheaper and easier to setup than a full IIS-system or Mono-based LAMM, I would contest that Java is a better solution to the problem. Sure it works on LAMP and has free tools, but my Java experience is nothing but shitty contractors, bloated codebases, and endless trouble (and expense) with maintenance. If cost was a primary factor, I'd prefer to see a Python or Ruby implementation. It might be slower, but it'll be lean and easier to prototype and maintain. If performance and scalability are the critical factors, then why bicker over the cost? Go for the .NET option. Java seems to fit the niche of fast, free, and higher-level than C++. But I think many web project owners are severely overestimating their performance needs. 
I must say i don't agree with not wanting to. You can make some really cool business applications for it. I love office for this reason, its excellent for automation.
+1 for Resharper - a life-saver and very useful for learning little bits of syntactic sugar which you might not ordinarily stumble across.
Great tool! Thanks..
Is Ultimate Edition still a stunning $10,000 ? 
I wonder when we'll get an RT version. 
No love for those of us with 2010? :(
&gt; Visual Studio Ultimate 2012 with MSDN is for software development teams that want to take advantage of emerging technology trends. &gt; Starting at $3,611.65 
&gt; Thank you for your interest in the WebsiteSpark program ... the WebsiteSpark program will no longer be accepting new membership applications. They direct you to [WebMatrix](http://www.microsoft.com/web/) now, which has some free resources for devs.
&gt; http://www.microsoft.com/web/websitespark/ oh :( I didn't notice. There's always biz spark which I think you can get as a consultant, but not sure.
I've been playing around with the Release Candidate for VS 2013, got it via DreamSpark, and it looks quite good. They've integrated Team Foundation Server more now, tweaked the colour schemes of some icons so it's not all plain grey (like yellow highlights for folders for example) and also improved editing. There's also like an eclipse-style automatic bracket pairing thing, so if you type a left brace then it puts the right one afterwards, and from what I've heard there's also a picture-in-picture code preview thing for when you press F12 that you can expand to a full window, and a (reminiscent of) Sublime Text style scrollbar. It might be prohibitively expensive for some, but it's still very feature complete, and if you can't normally afford to pay for the full edition there's always the Express editions that do three quarters of what the full version does, just with less refactoring tools (amongst other feature drops.)
Can I get some condensed info of actually *useful* changes in 2013?
It's really only gotten better, 2012 with dark theme is very pleasant On another note, I don't know a single person who uses the start page
Only sympathy and the message to move with the times. I've already started a program to move all out clients from SQL Server 2008R2 to 2012 in time for Aug 2014 and the development team are all on VS2012 now.
I can't tell if you're kidding or not...
2012 has a blue theme as well that looks like 2010. 2013 has it as well, and more colors for icons
always free in russia
Hard to know what you consider useful. There's a lot of minor additions that are mostly bringing addons into the core product (Navigate To, Web Essentials stuff for LESS and TypeScript, etc.). There's a very slight perf improvement. The UI of the IDE was de-Metroed a tiny bit. I like it, but I get my copies through MSDN that I don't pay for so I'll always upgrade.
Actually, no.
Aww yeah thank you comp sci course
I've been playing with it for the past few weeks. I've been using it primarily with ASP MVC The biggest change to me is: * SignalR integration with debugging ASP.NET * Better Intellisense with HTML and other web editors * Better Team Explorer * Better handling of various DPI monitors If you have VS2012, its well worth the 100 dollars. Unfortunately, I have VS2010, so I'm better off buying the new user price, since there was no upgrade path to VS2012.
Isn't he already trying to move with the times, asking for some good price love for those with VS2010? Unlike any other version of Visual Studio, VS2010 -&gt; VS2012 had no upgrade pricing. I own a personal copy of VS2010, and am too upset there isn't an upgrade price from VS2010 -&gt; VS2013/VS2012. 
We'd like to move on with the times, which is why it sucks not having an upgrade path from 2010-&gt;2013
I think its the renewal cost. It's odd it has a massive upfront cost for the MSDN Universal subscription, but then the annual cost is about a third.
I thought he was asking for some sort of patching or general help while not upgrading. 
What about good old VS 6.0? Or the venerable 1.52? Edit: ok they didn't have a start page, but still...
For some reason the last line throws an exception when running the program. "Object reference not set to instance of an object" am I missing something?
Did you copy and paste my answer? If so, that is the reason. I mistyped and put "Results" instead of "Result" which means it is looking for a pod node that doesn't exist. I'll make an edit to my post.
I recently started using C#. I used RB Whitakers crash course as a starting point. Its a good introduction to the language. http://rbwhitaker.wikidot.com/c-sharp-tutorials 
That sucks. 
It's a great program that I take part in. Worth about 6-8k if you take it as the cost of an MSDN universal subscription for 3 years.
Dreamspark isn't limited to comp sci. The basic program is available to *all* students, regardless of their major or any courses they take. Dreamspark Premium, though, is only available to STEM departments. Premium includes client OSes, all editions of Visual Studio, and *some* Office programs.
x64 "Edit and Continue" sort of works- tho it still is wonky and less usable than x32 FWIW, I've found the general IDE to be much more of a memory pig and be more sluggish than VS2012
That foreach makes my eyes want to bleed.
WebApi 2 is the next iteration on the ASP.NET WebApi framework. Has some added features (Attribute Routing is included "out of the box", among other things). [WebApi 2 Overview (MSDN)](https://www.google.com/search?q=WebApi2&amp;rlz=1C1CHMO_enUS470US470&amp;oq=WebApi2&amp;aqs=chrome..69i57j0l5.1842j0j8&amp;sourceid=chrome&amp;espvd=210&amp;es_sm=93&amp;ie=UTF-8#es_sm=93&amp;q=WebApi+2)
I had a good laugh at this :)
Wasn't Java originally called "Oak?"
Stay far, far away from that cesspool ghetto of Office development. Just don't. It will eat your brain.
What is this all about?
It's the first one. @Ref is the same as Ref.
In namespace Ref. The '@' character is not used as part of the name; it's a lexical tool to distinguish identifier strings from keywords.
the code is barking at me
I've sometimes used `@this` for the first argument to an extension method, but normally I use `me`.
I use '@' a lot in views in MVC. You will pass HTML attributes as an anonymous type to a helper routine. for example new { @class = "blue-button" }
Oh yeah, I agree there are legitimate uses for '@'. When I meant use in real production I only meant the snippet of code that was posted.
I wonder if you the poster are connected to said extension in anyway? Hrm.
Thanks, Mr. Photo Explainer.
Given their username, I'd say that's pretty obvious. 
WOOOOSSHHHH
YES! Thank you. Still doing some stuff with C, and currently without a computer other than my Surface RT. As soon as I get a chance I will leave some feedback. Thanks for giving us this chance.
Awesome, thank you. Glad you are excited. It's a work in progress but I've gotten the basics of reading XML with XmlDocument class done and am working on XDocument tonight. My current job works heavily with XML and C# and I think that people don't realize how much it is actively used in the B2B space. I see all this "JSON is better" but the reality is that XML is here to stay for the near future (at least) so better learn how to handle it.
Thanks. Look forward to reading this.
Thank you, I have been working fairly heavily with C# and XML for the last couple months, but I don't think I am using it to it's fullest potential. Looking forward to reading this.
Thanks. Looking forward to read this too. Most the time i use xmlDocument and XPath syntax for XML processing. I'm eagered for may different approches. 
Thank you! We still use XML heavily with our APIs. I would agree many of the books only briefly touch on XML. I haven't read this, yet. But would be interested in knowing what changes are since .NET 2.0.
Linq to XML is really cool and I don't think your book would be very complete without discussing it.
I'm trying to learn C# now so I'm hoping that I can use this book to help me! Thanks! 
I'm planning on it! This is only about 10% done at this point but with leanpub getting a copy now means that you get all of the updates included
Just be aware that this is a work in progress but getting a copy now will get you all the updates at no cost
 Thank you good sir! Have a wonderful Sunday!
This might be controversial, but when I want do some meddling with XML, if I am doing something that is 'business logic heavy' by that I mean really re-munging it. I won't use Linq to Xml in C#. I'll use it in VB.Net. Ok, now before we start saying VB.Net is a *good* language or anything, I just really like the ability to blend the XML with the LINQ. Or 'Xml Literals' Like so: Dim xml = &lt;?xml version="1.0"?&gt; &lt;menu&gt; &lt;course name="appetizer"&gt; &lt;dish&gt;Shrimp Cocktail&lt;/dish&gt; &lt;dish&gt;Escargot&lt;/dish&gt; &lt;/course&gt; &lt;/menu&gt; Taken from: http://blogs.msdn.com/b/jimoneil/archive/2009/06/15/x-is-for-xml-literal.aspx#sthash.Rg2UXOkJ.dpuf I find this to be really handy when talking to systems which were written without having a clear set of model objects. Not to mention you can actually break in the Xml like so (same blog as source) &lt;course name="main"&gt; &lt;%= From m In menu _ Where m.Course = "main" _ Select &lt;dish&gt;&lt;%= m.Food %&gt;&lt;/dish&gt; _ %&gt; &lt;/course&gt; Now obviously, it is cleaner if you are just working against a model object, never even thinking about the XML letting the serialization magic do that. But this is a really powerful feature. .Net makes it so easy to mix and match languages, I have noticed a tendency for people to always just pick the C# tool. *if your only tool is a hammer, everything looks like a nail*. That said, as the C# team finally acquiesced to optional parameters, I can't think of any other VB.Net benefits.
Making diary program and about to use XML saving diaries so I'm also looking forward reading this more. Thanks!
I've thought about making the book .NET and XML but I decided against it. First I don't think XML literals are all that great when loading files. Second, I'm trying to gear towards enterprise development where switching languages could be verboten. I may make mention of this though jus because it is useful knowledge to have but I don't think I'll go beyond a mention.
Thanks for the free book. More resources are always awesome!
Thank you for this :) Very generous!
First thing I'd do is dump all your data to a SQL DB and drop Access. It's a bit of a nightmare in comparison. 
Thanks!
I originally typed "basically built in" but I wanted to keep it simple and let him know he wouldn't have to download any separate modules of any sorts as the SQL functions are as you so gracefully worded. Things that are not built into C# already can be intimidating to us newbies. 
First, the text file is a step dramatically backwards. Second, you can talk to an access database from c#. More than that, people are coming from a good place suggesting SQL server. I would use SQL server express,its free. That being said moving to a custom front end instead of access as your front end might be a good FIRST step. But if more than one site is using this I don't see how access could work. The issue, you have a very likely possibility of starting a huge project. As someone asked, do you have any programming experience?
The Microsoft sync framework works pretty well. The setup procedure is a little rough around the edges. I don't think it is compatible with access though. The only ORM that I know of that supports access is NHibernate. In that case you'd have to create your own system for handling transactions. EDIT: for some reason I thought you were trying to sync databases. If you are just trying to implement simple transaction tracking this is how I'd do it. Create a tracking table with the following fields: transactionid, userid, timestamp, action, tablename, entityid. In all of your routines that modify an entity, create a tracking entry. You may also want to create "graveyard tables" that mirror your entity tables, when you delete a record, copy it to the table's associated graveyard table before deleting. If you want to be able to roll back all actions, you might want to create records in the graveyard table for updates as well, with the associated transactionid as a foreign key. I would highly recommend using an ORM like NHibernate if you stick with access or Entity Framework if you go with a modern database system.
SQL Server Express is a good choice. But realize that Access probably also has all the forms &amp; UI, and you'd have to duplicate all that functionality too. This isn't a small project. 
I'm used to seeing the concepts of dynamic languages, dynamic typing and [dynamic programming](http://en.wikipedia.org/wiki/Dynamic_programming) separated. This article appears to conflate all these terms to mean dynamic typing.
Thanks for your comment. I had someone else mention that they interpreted the "Dynamic Programming" in the title to imply what you have linked on Wikipedia. I actually hadn't even considered dynamic algorithms when I came up with name for the posting and didn't realize it was going to be so misleading. Simply put, it was supposed to be about dynamic typing, dynamic languages, and being able to combine C# and Python to leverage both sides of it. Sorry about the misleading title! I'll pay closer attention going forward.
Wow, you can directly instantiate a python class from C#?? I've done work connecting C# code with C++ before, and it's a bit ...ugly.
Page 3: &lt;emptyElement\&gt;&lt;/emptyElement ??
That VB.NET feature is an interesting hack for multi-line strings (since VB.NET doesn't natively support them). Something like this (syntax may be a bit wrong): foo = &lt;![CDATA[ Hello world! This is a multi-line string ]]&gt;.Value; I've never seen anyone actually use it though. How often would you have hard-coded XML like that? And for the output, that XML rendering code is quite ugly and combines presentation with business logic (filtering where course = "main"). I can't think of many situations where you'd write XML manually instead of just serialising objects.
Annnd the exception handler isn't even necessary, really. For these examples I was having some fun playing around with making the Python code fail and just getting a feel for how exceptions work between the two. I left them in the code in hopes people would copy the source and try doing something similar. Big try/catch blocks around things usually make them 10x uglier, I do agree :( Thanks for the kind words!
I think you are in the right place. You have done some programming even if a little. If your a sys admin then you understand how computers work. I would download visual studio 2012 express for desktop. The express version splits itself up. The pay version is one product for all. It splits itself into web, windows 8 (store apps), desktop, and phone. I am not sure if you want to go the web route but right now you are using access as a desktop application so I suggested that. There are many resources out there for c#. You can always start with Microsoft's http://msdn.microsoft.com/en-us/vstudio/hh341490.aspx
I disagree about it making it trickier. In this case, the verbatim works well for the indentation as you don't need to concern yourself with C# indentation/syntax at the same time. Seems to me by manually managing indentation and carriage returns it's more likely you'll muck up the syntax. Only downside with the verbatims is you'd have to make the code left-aligned outside the C# indentation. But it would read exactly like a python script without having to mentally parse between C# and python syntax simultaneously: var script = @" class MyClass: def __init__(self): pass def go(self, input): print('From dynamic python: ' + input) return input "; But otherwise I agree, external source code files would be the way to go for anything but the most trivialized, or in this case, demonstrative purposes.
I took your advice and after some fiddling I got the Wolfram Alpha API to work in my windows forms application. However, I want to limit the information it gives me. Currently it gives all fields information. But I only particularly want the "results" field. The problem with this is that the API does not seem to know what the titles of the fields are. I set it to show the titles then text on separate lines in a readout and I get a blank for all titles of subpods. Do you know any way of distinguishing between subpods with the API? Edit: there is a bit of information I was able to sort out. I can get to the "Result" pod but not single out a particular subpod because none of them have titles.
If you want to do this: if(expression) { Do x } else if(expression { Do y } else { Do F } Then you're best bet is a switch statement http://msdn.microsoft.com/en-us/library/06tc147t(v=vs.90).aspx Does that answer your question?
This is correct. The switch statement achieves the same results as multiple *else if* statements but is easier to read and maintain.
It sounds like you're having difficulty with boolean logic. You should find plenty of help with that topic online, and it's not specific to C#. Once you've wrapped your head around AND, OR, and NOT, you'll be fine.
No worries, enjoy the book. Any feedback you can give is much appreciated. Also, enjoy your vacation!
Thanks! I'm just a C# beginner at the minute :P
Perhaps you could post what you're working on. If we could see the code you're working with then we'd be able to explain better. Don't worry if your code is crap. We all start there.
You should think about the criteria inside the paragraphs should either evaluate to true or false. if (myInteger &lt; 10){ //this section runs if the criteria evaluate to true. }else{ //this section runs if the criteria evaluate to false. } 
While this may be true, it's mostly irrelevant to the topic.
Switch is only good for a single piece of criteria. switch(animal) { case "Fox": DoTheFoxThing(); break; case "Hound": DoTheHoundThing(); break; case 1: DoSomethingelse(); } Things get a bit more complicated if you need to compare multiple elements with a conditional statement. In those cases switch might not be the best and wouldn't work if you need a statement like. If (Animal == "Fox" &amp;&amp; Name = "Henry") { DoHenryFoxStuff(); } else if (Animal == "Dog" &amp;&amp; Name = "Betty") { DoBettyDogStuff(); } else { DoOtherStuff(); } Generally I try to avoid using "else if" as it does tend to get convoluted rather quickly. Other commentators have pointed out that you should look into studying boolean logic and that is sound advise, don't worry so much about learning when to use which conditional statement until you have a firm grasp on the ANDs and ORs and precedence. 
Hence why its tagging along several comments deep on the correct answer OP was looking for.
If/Elses can be tricky when you get more complex. To add complexity usually comes in the form of adding OR (||) and ANDs (&amp;&amp;). You can string together a few of these, and it can be tricky, but there are a few simple rules. Lets start with OR string ans = "Y"; if(ans == "X" || ans == "Y") Resolves true, the parser reads "Y" == "X" and returns false, it see's the OR and continues to "Y" = "Y" and returns true. Leading to: if(false OR true) It passes. an OR requires only one statement to be true. Again similar: string ans = "Y"; if(ans == "Q" &amp;&amp; ans == "Y") When it's run it sees "Y" == "Q" followed by only &amp;&amp;. In this case, it's FALSE, and the compiler quits there. It doesnt continue on because AND requires everything to be true. ans == "Y" is never checked. If this was in reverse, it would return if(TRUE AND FALSE) and it would still be FALSE. Complexity can be added further by combining ANDS and ORs. This can get very confusing, so always watch your parentheses. bool IsReady = true; string ans = "Y"; if((IsReady &amp;&amp; ans == "X") || (ans == "Y")) Break this apart step by step, using parentheses to cordon off segements first (IsReady &amp;&amp; ans == "X") (note a boolean without an "=" means IsReady == true) (IsReady *is* true, but ans != "X" so this is false. The IF now looks like If((False) || (ans == "Y") Since there is an OR, it continues and finds: If((False) || (True)) Which falls through as true. Anything which fails to resolve to true on the If drops to the next available else if and continues through all else ifs until a true is matched. If there are no else ifs it falls to the catch-all Else. If there is no Else, the program continues on as normal. Anything that resolves to true, falls into that code segment and the If is finished, no else if or elses are parsed. 
Calling Dispose and ContinueWith explicitly is yucky.
I see a lot of people trying to explain more complex varieties, but it may be helpful for you to have the basics (what is going on) explained in plain english. You might already grasp this, but if not.. maybe this will help clear things up. With an "if" statement you're describing what you want to do if something is true. With an "if/else" statement it's the same except you're also describing what you want to do if it's not true. You can use comparison operators to do this "==, !=, &gt;, &lt;, etc.." and you can also chain them together if(x &gt; 5 &amp;&amp; x &lt; 10) .. you can read this out loud as "is x greater than 5 and less than 10, yes or no?". The "if/elseif/else" statement is only slightly more complicated. We use it when we want to do something when one thing is true (if), something else when another thing is true (else if), and something else if neither of them are true (else). if(x &gt; 5) { echo "it's bigger than 5!"; } else if(x &lt; 5) { echo "it's less than 5!"; } else { echo "it's 5!"; } You can have as many "else ifs" as you want, and the final "else" is optional as well. Like some have pointed out the "switch" statement is usually best when you have multiple things you want to check for. You can also put (nest) as many "if" "if/else" if/elseif" statements inside each other as you want. Like I said, you might already grasp all of this.. i just wanted to lay out the basics in (hopefully) understandable language if you were hazy on any of the basics of how these things work.
You need to find a new hobby. Programming is not for you if you have trouble with this.
Hard to tell what's going wrong based on your description but sounds like you haven't initialized something. Paste the code in question to http://pastebin.com/ and use C# syntax highlighting.
http://pastebin.com/HU6UuGnw There is the snipit of the code containing the two methods I was talking about.
Yeah, I hate to tag along here since it seems kind of negative, but if OP can't focus enough to read through mainstream texts and even in the book he has chosen is struggling with the most basic concepts maybe his time would be better spent elsewhere. Or at the least he needs to dedicate himself more to the task since short of some kind of learning disability he should be able to grasp these concepts by reading his book without reaching out for help.
Of course since you didn't init the vb bools in your c# code to something truthy you will be sulk()ing for a while.
In the end, everything between the left paren and the right paren needs to evaluate to a single true value. The other part to remember is that if you don't enclose the body of statements that you want to execute in braces (should the if evaluate to true) it will only execute the next statement.
This is a hot mess. You use some class level variable (guessing you didn't paste it in) called 'question' which you pass in to your method then proceed to use directly again ignoring your parameter. (is this null?) Hard to tell your intention there. Just add some exception handling and/or step through with a debugger. I would start by reading some basic programming texts/tutorials however to help you better understand what you are doing since it looks like you are hacking around a bit aimlessly thus far.
"question" is actually the same as input. I was using it to differentiate between it and "Input". even though they contain the same thing. Hence instead I had planned to simplify my several if statements into a single method Input_parse then it would parse the input string for keywords. which translate into commands.
I agree with AntiStrange. Starting with the basic concepts is the best. You can always build up to more complicated if else statements. 
I am actually working through a book at the moment. I learn best by doing and in this case I have learned a lot by just what i have done in this project.
Yeah, I agree. Your issue appears to have been related to your methods' accessibility level: http://msdn.microsoft.com/en-us/library/ms173121.aspx
Yup, this. This will definitely come across as condescending- but if you are getting confused by a basic boolean switch then programming is probably not in your future. The if/then/else block is possibly one of the most basic and universal programming constructs and really should be intuitive. With that said, if you are having trouble with conditionals you might want to start with a primer language like Logo or Karel. These are often used as a gentle introduction to programming constructs and control structures.
That last one: you're going to spend life running around screaming. 
I don't honestly think we will get one, but I'd like to see one. It could be great for getting more metro apps. I can imagine the RT version using Azure for compilation.
stuff like this: if (Alchemy == 0) { btnSellAlchemy.Enabled = false; } else { btnSellAlchemy.Enabled = true; } can be written like this: btnSellAlchemy.Enabled = !(Alchemy == 0) (Alchemy == 0) is going to return a bool, so you can simplify that bit by using it. I put the ! (means not) in front because i think that's what you're going for.
Thanks, will look into this.
Really is fun working on and you also found my weakness; methods. I seem to never be able to get them to work properly, that's the only reason they're in Button clicks. I thought about methods from the start but after I couldn't get them to work, I just said screw it and went with the code in the button clicks.
Yeah, I'm on vacation right now so I can't exactly watch any vids on 500mb of internet.
I'll probably use this instead of the stringbuilder, thanks.
Learning coding on vacation? You're a better man than I.
Updated
I have nothing else to do in all honesty. I'm here to see family and after you've seen everyone, being on a 3 month vacation is just ridiculous. Mums choice, y'know. Can't argue.
This would be better titled as *10 ways to play nicely with others in software* as it has little to do with .NET.
I got all excited, then read the article and realized I knew all those. A couple of my favorite tips that weren't there: double click to select a word, and Ctrl+backspace or Ctrl+del to remove words at a time. Also, the new quick find panel in VS2012 supports Perl Compat regex if you tick that box. 
I'm guilty of #10.. I'll occasionally forget what I did when I go to commit so I don't put an actual, legible commit message. *I'm working on that*
You'd probably want to write it like this instead: btnSellAlchemy.Enabled = Alchemy != 0; Writing it like !(Alchemy == 0) makes it look weird
I was just looking at that. ok, so in your ticker method you have a lot of math up front. You could take that whole thing and make a new method like this: private Decimal AddEverything() { return Convert.ToDecimal((Clicker * ClickerLPS) + (Worker * WorkerLPS) + (Yard * YardLPS) + (Mill * MillLPS) + (Forest * ForestLPS) + (Shipment * ShipmentLPS) + (Alchemy * AlchemyLPS) + (Portal * PortalLPS) + (Extractor * ExtractorLPS)); } then in the ticker you'd just have: LogsPerSecond = AddEverything(); now if you ever need to add all that stuff elsewhere, you just have to call the method to get the total. Maybe AddEverything isn't the best name for the method, call it whatever you want. Make sense?
also, you can highlight a section of code and right-click and in one of the sub menus will be 'extract method'. and it will let you name it. it's sort of a shortcut to do so, so you should understand the basics first.
Okay thanks, added it in.
It seems to not show the Clickers price, it just writes 0 and increments it by 1 everytime.
ok so the next level is passing a parameter. I'll give you a simple example. public string SayHi(string incomingString) { return String.Format("Hello {0}", incomingString); } in another method: SayHi("DeeBeeR"); or Label1.Text = SayHi("DeeBeer"); this is a super simple example, but it has all the pieces... 
Oops, typo. Edited.
I've used Visual Studio for like five years, and now you're telling me this exists. ,___,
Something to look into would be classes. You can create a base class for the clicker objects. Then you can create derived classes from the base. This way you can condense a lot of repeated code. It also will make expanding the game easier because if you want new clicker objects or a way to implement up grades you just need to derive a new class.
number 9 really gets me, i see this shit all the time. drives me nuts. everything else seems like common sense...
I was going to suggest this as well. It's much easier to read mentally when its "True" vs "Not False"
Updated the code so it's like this.
The fastest and best way to learn a new technology is to build a sample application. If the position is mostly doing web development using MVC for example go through the [Music Store tutorial](http://www.asp.net/mvc/tutorials/mvc-music-store)
What sort of applications does your company build, data driven applications, reactive websites? I think with a little more background we could point you in the right direction.
Your best chance is, given what the company does as a business, learn C# in a manner that what you learn will be applicable to what you will do for the company. It may be one thing to know generally how to program in C#, but you will be much more valuable with skills that apply to your companies general business. What do you test? What kind of software does the company use? What are other developers in the company working on? You would do well to try and talk to someone within the company to find out what your goals are. Having said that, if you've never programmed before, you definitely should look in to building a solid foundation in basic object oriented programming with C# (or any language, really, eventually it is all just syntactical nuance).
I'm really a solo-developer (both at home and at work). I'm also still learning my VCS (git) so I can look at what changes I made. My main issue is I'll walk away from a task and forget to commit what I did. Need to work on micro-commits :(
Why ever would someone want to do this? Logs typically contain sensitive info. 
My advice would be to not just rely on applying for the position. I would talk to your boss tomorrow and see if you can get involved / more involved in writing unit tests. You'll get to code on the job, and you'll get some practical experience with C#. You won't be 'designing' as such, but you'll be using C#, and I've yet to be somewhere that values testing, but has too few unit tests.
Because this is a popular model - something, something TWITTER something.
Sorry, I think I made assumptions since you already had a github account. :) I'm going to assume windows and I'll point you in the right direction, if you need some more in depth help, I can try and type up a full guide later on and/or pm at you. http://windows.github.com/ To download github for windows, it makes things pretty dang easy :) The site also has links for help on how to get started and making new repos and syncing as well. The 'get started' isn't amazingly helpful, but, it should still get you going in the right direction https://help.github.com/articles/getting-started-with-github-for-windows Followed by https://help.github.com/articles/synchronizing-repositories This will get you started with git and github anyways, and what that would allow you to do is other people can check out the entire repo, make changes and then submit pull requests back to you and stuff like that. It's a good habit to know something like git if in the future you have aspirations of being a developer. In the case of TreeLogger itself, it'd make it easier for people that wanted to show you how to implement certain things in a better way to do so, and they could submit pull requests and/or explanations and you could see how it works. :) Might be too much work, but, if not, give it a shot. I currently went and reconstructed the form by hand, (my forms so ugly and unloved :P) so that I could fiddle with showing some things I'd have done differently. :)
Real world applications: 1 / 10 Logging solutions that make me laugh: 10 / 10 Would log.
I have an idea - I dont know if you are prepared to travel, etc, but a great transitional job might be "AP/SDK tester" - You are still testing, but you are testing an SDK by sucessfully writing applications which use the SDK. This way, your testing background would be an asset.
You could set the twitter account as protected and only approved people could view your logs.
Hopefully that works better than Facebook's "protected" pages. 
See, this is the perfect example of what I dislike most about this and similar programming subreddits. These people (OPs) have access to professionals' opinions and they never respond to us trying to help them out. :(
ah well, I suppose that is the reason we are where we are and they are where they are... 
So, pretty short and sweet at this point. I would touch on using streams for reading/writing xml. Also, I've found uses for dumping sql data to xml and passing it to a CLR stored procedure. Once there you can create readers from the sqlxml objects. Might be a fun topic to hit.
Unless your intention is to shame users for incessantly failing to remember their password, or publicly shame yourself for allowing errors on your watch, this seems like a hilarious waste of code.
I'd love to see the current product! If you would be able to throw it up on Github (like nanenj suggested), that would be great!
This - getting info from the boss will help make sure OP starts off in a direction where the right skills are developed. 
If you're using Visual Studio, you can always set the project to an earlier version of .NET (right-click on project name &gt; Properties &gt; Application &gt; Target Framework). I can't say whether this functionality is also available in Visual Studio Express.
Yeah a lot of it should be obvious and yeah it's not all specific to .NET. But I enjoyed the article and plan to share it with others. It's a good site overall, the odd article that misses the mark but still lots of good content.
It seems my net has been throttled so I can't download the github repo :/
Company builds mostly web applications for banking, warehousing, logistics.
Would this be a case where you would just derive from the originating class?
Thanks for the feedback. I've started the writing XML with streams and if it isn't published now it will be in the next day or so. Thanks for the other tips, it is much appreciated.
Great news
If you want to email the code, I can throw it up on Github for you, and once you're back in a place where you can handle it better, I can transfer the repo back to you. Just an idea :)
Unsadly many of us are using Visual Studio 2012.
Given that this is a web product aiding in the development and maintenance of JavaScript, CSS, and HTML, it's not surprising that 2010 isn't included here. Those project types are technically more easily moved forward to newer toolsets. VS 2010 is useful when you're significantly invested in an older version of .NET, Silverlight, BizTalk, or another project type/template that you cannot easily upgrade to a modern version of VS. 
.NET 4 also allows for the development of JavaScript, CSS and HTML based applications, specially ASP.NET MVC ones. Not all business have the budgets to upgrade all the time.
Just started a new job to help with the backlog and (hopefully) make things better. Every project, I've had to deal with local references, installation dependencies (including outdated versions of AjaxControlToolkit and hotfix versions of Telerik controls), commented code and dead code including method arguments that go unused, assembly references instead of project references (and multiple versions of a project, good luck guessing which one you should use), and nearly all commit messages are un-helpful. It has taken me entire days to get my dev environment up and running on an application before I can even start looking at code. None of the projects had a solution file. Even though we are using TFS, we don't have a build server and everything is deployed manually. Sorry, this seemed like a good place to rant. :/ 
For me, namespaces work great for organizing a larger project heirarchy. For example, we've got cargo, cargo administration, flight, flight leg, passenger tickets, passenger ticket legs, passenger ticket fares (as well as many many other units). We could group them up into various namespaces, but it is much much easier to organize by heirarchy: Ticket Ticket.Cargo Ticket.Charters Ticket.Scheduled Now, we have the PassengerTicket class implemented across multiple projects, to facilitate the data and logic layer: Core.Ticket Core.Ticket.Cargo Core.Ticket.Charters Core.Ticket.Scheduled and Data.Ticket Data.Ticket.Cargo Data.Ticket.Charters Data.Ticket.Scheduled As you can see, it is much easier to navigate. Also, we have our folder organization match our namespace organization (as suggested by ReShaper). 
Fairly new to c# myself, but I think they're mostly meant to deter collisions in variable names for large projects or teams working on multiple projects that may share libraries.
All above - and namespace are also handy when developing API library - you place public classes and interfaces to one namespace and non-public to other (normally to namespace that is under public namespace). Namespaces are also useful in large projects where several developers are working on code - give each team or member own namespace and you instally know who to call if something is not working. 
So, I work in a shared hosting company and there are some cons to this. 1) There is no way to kill the paged out worker process within iis settings. If my iis config has 5000 sites and each site got paged out, the average paged our worker process still uses some physical memory, around 2 megs. I have 10,000 megs still running until the server reboots. Now, I could just write a script and query process start time and kill the process like that, but just proving a point. 2) You will need a large page file. Hell, DNN idle is around 160 megs. Multiple active dnn sites against 2000 app pools, you'd easily hit 400 gigs. I wish they would of benchmarked against a sas/sata drive and not ssd for the page file. Still a great feature. Combine memory limits, cpu throttling and now paged out worker process is a step in the right direction. Just like sql 2014 with disk io throttling :)
Alright, thanks. I think I'm slowly starting to get it. I guess I'm just having trouble seeing its usefulness because in C++ we were told to always name classes something unique so that they don't clash.
It might be a bit overkill for what you need, but I have used Quartz.Net for scheduling and it works great. Search for it on Nuget...there's a package for it.
Think of the filesystem. You have files, folders, and subfolders. Let's say you have two files named "Cars.txt", one is to list cars you want, the other is for cars you have. Inside a folder, you can't have two files named "Cars.txt", because how would the filesystem be able to differentiate them? So, what you might do is move them into subfolders. This way, you have "/Cars/Want.txt" and "/Cars/Have.txt", or you could go even deeper if you needed to and do something like "/Cars/Convertables/Want.txt" That's how it is in the context of programming. "Database" might be a completely reasonable class name, but it could very well not be the only class named Database, especially if you have a larger project, so you probably want to give it a namespace to avoid having it collide with potential other Database classes.
Exactly. And in a small project with you as the sole developer, that's easy to do. But let's say you've got a giant project you're working on with 50 other people. You create a DatabaseAccess class, work on it for a while...now you want to merge it into source control. You pull the latest changes, compile to be sure nothing broke and....shit. Bob made a class named 'DatabaseAccess' for a different part of the application. Now you have to pick a new name and rename all your references before you can commit. Could you name them 'FooDatabaseAccess' and 'BarDatabaseAccess' ? Well yeah, you could. But if they are in completely different parts of the application and will never be used at the same time, now you have to always type FooDatabaseAccess even when you're already in the class Foo. In C# you need to always name classes something unique so they don't class too.....but the advantage is that you now only have to do so *within the same namespace*. You don't have to worry about what your coworker is doing, or trying to import a 3rd-party .dll library and being unable to because you used the same class name as them. Also, let's say you just named you class DatabaseAccessor to get around the conflict with Bob's code. Well, now when someone editing either part of the application starts typing Database, both come up! Which one do you use? Gotta go figure that out. In addition, like already said....it keeps intellisense organized. If you type the letter S, you get all namespaces starting with S that it knows about, as well as classes starting with S in namespaces that you're using. Imaging if you didn't have this, and it listed every class it knew about! In huge projects this would really hurt usability. So yeah, in a small project, the whole thing will probably be in one namespace. So if you're just working on a quick hobby project, you'll probably just pick a single namespace that's the same as the name of your program and not worry about namespaces. But in a large project that needs defined hierarchy and relationships, you can't work without it.
Besides what the others have said I believe it helps organize your classes and other code. Also, it makes intellisense more manageable in some ways. If you follow the folder conventions it makes it easier to find stuff too.
I just like to think of namespaces as folders for my classes. You can't have the same filename in one folder twice, but you can have the same filename in two separate folders.
For what its worth, C++ has namespaces too. For exactly the same reason. http://www.cplusplus.com/doc/tutorial/namespaces/
I understand what you're getting at but this is where I don't understand the practicality... if two people make two different DatabaseAccess classes, isn't that an issue of poor planning instead? Wouldn't it just be cleaner to have one DatabaseAccess class already written that both people call instead of writing their own versions? These are the sorts of questions i'm asking myself while thinking about namespaces.
If one class can provide the functionality for both, then absolutely! But what if it can't? Lets say you have a front end launcher to a video game that shows you leaderboards and the in-game store. The player stats are probably on a different database server than the store. The methods that the DatabaseAccessClass needs to have for the store db are likely /completely/ different from the methods that you need to interact the with the stats db. So yeah, you could call one StoreDatabaseAccess and StatsDatabaseAccess.....but you don't need to see use the StatsDatabaseAccess class from the Store code, so why bother? Now let's scale this up to 50 different database access classes....get's nuts. By namespacing, you can even have the convention that all classes with database access methods will be called 'DatabaseAccess' and will live in the same namespace as the code they're providing access for. But as mentioned, this _isn't_ the only argument for namespaces. Is it easy to get around this by having the convention that database access classes will just be the class name followed by that text (e.g. StoreDatabaseAccess) ? Sure! But what if you have player stats and team stats (or something). Crap, StatsDatabaseAccess is taken. And there's still all of the OTHER benefits already mentioned, such as making Intellisense work better and not conflicting with 3rd party library code. It gives classes nicer names too. Also frees Microsoft to add things to C# without breaking your code - everything Microsoft writes will be in the System or Microsoft namespaces. So don't put your code there. If Microsoft decides to add a new class in the next version of C# that has the same name as a class you wrote that's used EVERYWHERE in your 1,000,000 line application (which would be bad design but I digress), you don't have to fix your code before upgrading and using the new features because their new class is in a namespace you aren't using.
That makes sense. Thank you so much for the help!!
C++ has namespaces... Have you ever seen using namespace std; or std::? Std is the namespace. These days, modern C++ programmers/programs use namespaces as extensively as C# and Java. Not only do they help avoid collisions, but they also encourage abstraction/encapsulation of structure or functionality. Simple example: GreatProgram and GreatProgram.Test. You don't want your testing code to be contained in your base code. Then you split them off into separate assemblies and don't release the test namespace.
&gt; name classes something unique so that they don't clash That's exactly what a namespace is. It just uses dots instead of underscores or camel case to separate "groups" of functionality. Namespaces disappear after you compile your code. The "class name" becomes a single string of the namespace and class name added together.
And this made it click. THANK YOU!
here is a simple example that works well in a Windows Forms application. Note this is naive and if your events take a while to execute and are bunched up too close to each other they won't execute "right on time." Links to the relevant class documentation: * [BackgroundWorker](http://msdn.microsoft.com/en-us/library/system.componentmodel.backgroundworker.aspx) * [DateTime](http://msdn.microsoft.com/en-us/library/system.datetime.aspx) // in class private BackgroundWorker clock = new BackgroundWorker() // in class constructor public Class() { clock.DoWork += Tick clock.WorkerSupportsCancellation = true } // method in class private void Tick(object sender, DoWorkEventArgs e) { while(!clock.CancellationPending) { var now = DateTime.Now foreach(var event in scheduledEvents) { if (DateTime.Compare(event.time, now) &gt;= 0) { event.Execute() } } } Thread.Sleep(1000) // 1 second resolution }
You could do as you suggest, but you need to have something running continuously to 'monitor' the system time, which sounds like a Windows Service to me. Google that (it's a VS project type, should be pretty straightforward). Also, see: http://stackoverflow.com/questions/11014070/c-system-timers-timer-run-every-min-in-sync-with-system-clock
Yeah his last example I think is a great one, it also applies to 3rd party libraries which are something even a small project might make good use of. For instance, in your example of a small game, let's say you have a class called Player. Your game is coming along nicely and you decide you want to add music to your game, well the easiest way might be to download a library that someone else wrote that gives you all kinds of useful functionality to load and play music in a game. But if that library had a class named Player (plausible for a music library) you'd be in a mess. With namespaces, however, you're fine, you can use whatever libraries you want without fear of such conflicts. This is an example of something that couldn't be fixed with better planning, too, since it's not like you work together with the person who wrote the library and can coordinate naming with them.
I've been developing full-time for &gt;10 years now, and a good part of that has been in VS. My team mates are the same, or more experienced... we're continually exchanging shortcuts when we do pair-programming/code reviews/etc. Multiple line selection is one that keeps blowing minds.. "wait, you can edit multiple lines at once?" eg &gt; private int Foo = 1; &gt; private int Bar = 2; &gt; private int Baz = 3; alt-shift select lets me select `private` on all three lines and replace it with public. eg: &gt; public int Foo = 1; &gt; public int Bar = 2; &gt; public int Baz = 3; Works in a bunch of things (notepad++, vs, etc) When you also use resharper (*highly* recommended) - the number of shortcuts goes waaay up. 
I've done this recently in a big production system: System.Threading.Timers: private Timer _checker; void SetTimer() { try { var due = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 21, 30, 0); var span = due.Subtract(DateTime.Now); while (span.TotalMilliseconds &lt; 0) { due = due.AddDays(1); span = due.Subtract(DateTime.Now); } Log.Info("...setting stock checker to check at {0:dd MMM yyyy HH:mm} (~{1} minutes)", due, Math.Round(span.TotalMinutes, 0)); _checker = new Timer(ob =&gt; CheckStocks(), null, (long)span.TotalMilliseconds, (long)Timeout.Infinite); } catch (Exception ex) { Log.Error(ex); } } ..this sets a timer to go off at 9:30PM. The "Finally" of the invoked method (CheckStocks()) then calls SetTimer() again.
Pieces of your app should be able to change without considerable changes to the whole. research solid principles: http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29 research a layered architecture: http://layersample.codeplex.com/ try this link for sqlite: http://brice-lambson.blogspot.com/2013/06/systemdatasqlite-on-entity-framework-6.html also, if you are in school, complete your assignments, but other than that do not write another line of code until you have checked out (at least read the chapters on writing classes and functions): Clean Code http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882 and Code Complete http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670
Yeah i wrote the whole thing based on the 3-layer architecture. So changing those lists to database won't affect the rest of the layers.
It helps for organisation, targeting different libraries and ambiguity between class names. 
 namespace Out { public struct @Out { public @Out @out(out @Out @out) { return @out.@out(out @out); } } } namespace @out { public class @out { @Out.Out @Out = new Out.Out(); public @out() { @Out.Out @out = @Out.@out(out this.@Out); } } } note I had to change @Out to a struct to avoid the uninitialized out parameter error.
 You write some code. Then I write some code we both call a class by the same name. Now both parts of the code have to work in the same program. Now have fun trying to integrate it ;)
Nicely put.
Missing the best one.. ctrl + shift and } to find the end of a block
 Ok lets scale it up. You put a team of 40+ developers in a room and see how you get on with "proper planning" 
I wouldn't call it lazy, more efficient. Im sure we all get pissed off when we watch someone do practically everything with the mouse.
I recommend learning by example and setting yourself a small project to make. Like a basic text editor. Sites like planet-source-code.com are good for just starting out.
Haha! Yeah or stabbing your wife while cooking the Sunday roast.
When i first started out with .net i was using VB, and C# developers would get rather shitty if they saw late binding in your code. Now i see it done all over the place. Its bad practice imo, if i don't know what type the object is my code is very wrong, otherwise it should be strongly typed at design time.
I got bored, so I decided to mess around with operator overloading. Most of the Pointer struct is arithmetic overloads so you can change the address. The real abuse is in the Set and Fetch regions.
Another beginner here, can you please explain what the echo does?
Arithmetic is equally guilty. Addition will increment by datatype size, so ptr + 1 will actually result in a 4 byte increment.
Its not taking the coupon. 
Try again. I set the end date too early, sorry about that. This coupon is good now 'til the end of the year.
oh sorry.. that was stolen from PHP. it's the same as 'print'. just sends text to the screen.
Personally id skip SQL altogether and go NoSQL like MongoDB, unless you have to use SQL. You'll be up in and running in minutes with MongoDB.
It points to a section of memory. References to classes are similar, but more limited in that you can't change what piece of memory the reference points at.
The memory store would be [different for each type](http://serayen.com/static-generic.png). When classes with generics are compiled, they end up as unique types.
Then move the memory store :P
Where/why would you use pointers?
You would use it if you need to have a piece of data to survive once the function that created it has exited. Another example can be seen with the [*ref* keyword](http://msdn.microsoft.com/en-us/library/14akc2c7.aspx) in C#. I don't really have the proper knowledge to give you a decent explanation, bit [this](http://en.wikipedia.org/wiki/Pointer_%28computer_programming%29) Wikipedia article gives a good overview.
It has a very real use - consider referencing a library written in a different language that has a member named after a word, that only happens to be a reserved keyword in the language you're invoking it from. Not that it's ever happened to me, but still.
This is coool :D
[Here's](https://github.com/DeeBeeR/TreeLoggerCSharp.git) the repo.
Merged. I'll work on the save system a bit more right now! I'll add a simple auto save feature in.
Do you want the debug screen working? I believe I've got it going as well, but would be replacing the text fields, with numeric up/down fields (like the page count control on your print dialog). Thoughts? Or perhaps we should move the discussion over to Github, to make it easier to follow? My fork does have the start of the debug screen, if you wanted to look at it.
Sure thing :) I'll post there now.
It seems I'm a bit stuck on how to get others to play this game that have no programming experience and VS or a compiler downloaded.
Trying CodePlex right now but can't seem to get it work right. I'll keep trying while waiting, if I get it I'll let you know.
Never mind, I've got it. It was ignoring the /bin/ folder completely.
You can use [SecureString](http://msdn.microsoft.com/fr-fr/library/system.security.securestring.aspx) for some extra protection against runtime attacks. But it's usually used more client side than server side.
I don't see how this is useful. You need to store the key and the initialization vector in the database in order to authenticate the user in the futur. This means anyone could decrypt the password easily with one row. I think it is wrong. I would recommend using hash method like [sha2](http://msdn.microsoft.com/en-us/library/system.security.cryptography.sha256.aspx) over encrypting method like Rijndael. You should read about [the difference between hashing and encrypting](http://stackoverflow.com/questions/4948322/fundamental-difference-between-hashing-and-encryption-algorithms). What you should do is, get the salt the same way, hash the password with the salt using SHA. Then, when you'll want to authenticate, get the salt, get the password and compare the hashed result. This way, no one mathematically can retrieve the original password from the database. Personally, I rather use the username and a hard coded string as the salt. This way I don't have to poke the database to retrieve it. But, having a "unique" salt per user is probably better. Hope I helped you! p.s. English isn't my mother tongue.
Here's a good reference. https://crackstation.net/hashing-security.htm
[English version](http://msdn.microsoft.com/en-us/library/system.security.securestring.aspx)