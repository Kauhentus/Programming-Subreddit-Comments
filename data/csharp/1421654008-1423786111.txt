Why do you instantiate an OracleCommand in the constructor? Also, what does your NUnit test actually test? If I were to change the behavior of the UploadBulkData method to ignore the bulkData paramter and just delete 3 rows from any database table, would the test still pass as written?
I tried your code in public MainWindow() in the MainWindow.xaml.cs But nothing has changed, so apparently that is not the right place for it.
Advice : Read Clean Code's section on test driven development.. basically don't write production code without first having a test for it. 
Hmm it does seem to have something to do with the fact that the data is being shown in a DataGrid. If i do a MessageBox.Show then the date is shown correctly.
Like someone above said, Unity would be pretty cool to demonstrate. You could ask for participation for the kids to choose variables - have a zombie chasing a character or something and show the effect of making the zombie faster or something. Show how easily you can modify something from a single line of code in a script. Maybe make a really simple game that the kids can try and modify for each other. Another 'cool' thing to show might be a phone app. You could even deploy the above game to a phone right before their eyes and pass the phone around.
Unless it's strictly ui related, doing something like this violates the principles of MVVM. That said, the MyPanel: Panel approach defined above is probably the easiest, provided you aren't following mvvm.
This would also be a nice project to take a look at: https://learn.adafruit.com/adalight-diy-ambient-tv-lighting/overview They already made some software (in the Processing language): https://github.com/adafruit/Adalight which could be easily rewritten in C# for much better performance. (Since they only get a refreshrate of 15 FPS.) (Also, when writing software, be careful not to reinvent the wheel. If it already exists and rolls, use that and just make it roll a bit better. Unless you're also using it to learn. Then please do rewrite the whole damn thing.)
&gt; This is a matter of fact, not of how you see it You're right. I was thinking of general purpose programming languages, SQL is a specialized one, according to the same first paragraph. My apologies. &gt; subjective: You forgot to quote the smiley at the end of the sentence :) I'll link to another of my answers where I try to be more accurate: [here] (http://www.reddit.com/r/csharp/comments/2sl7f6/is_there_such_thing_as_only_being_a_c_developer/cnt9qe0) . SQL *is* a critical skill in a lot of jobs, I strongly advise learning it both for its usefulness and for the sake of learning and its even somewhere on my résumé, even if this isn't the tech I like to use the most. I guess I (wrongly) interpreted the question as *what other general purpose language should I learn ?* instead of the broader *what skills should I learn ?*.
It's the initialized size of the array. It's an important distinction. int[] someArray = new int[10]; someArray[0] = 1; someArray[1] = 2; Console.WriteLine(someArray.Length); //prints 10 because that's what you declared it as 
Check this out: http://stackoverflow.com/questions/3630967/datetime-not-showing-with-currentculture-format-in-datagrid-listview
Any luck with these? http://msdn.microsoft.com/en-us/library/ms747393%28v=vs.110%29.aspx http://programming-pages.com/2012/01/22/dragging-shapes-with-the-mouse-in-wpf/
Ah, sorry, misread the code. My reading comprehension sucks on Monday mornings.
I think this might help: http://www.mono-project.com/ The best way would be to run Windows, but it's not your only option anymore. As for VS, I don't believe there is anyway to run it on OSX.
Yep. Then download Xamarin Studio. You could also code C# using vim, emacs or whatever, but since you're asking for VS, Xamarin could be a decent alternative.
This sub has really taken a nosedive
I see you post in a lot of /r/*circlejerk subs. Fuck off on back there you too cool for every one loser.
Only problem with unity is that i have to run these at school, and i don't have any kind of admin, we only have c# 2010 and python installed
You should probably install a virtual machine or use bootcamp.
so thats the thing I was missing. For each Array i want to send client side (in a service layer) I need a DTO for business-to-data and business-to-client Basically the way it works out in my head is this. Device Entity (25 properties) DeviceTotalDataDTO (5 properties) - located in the data project DeviceTotalClientDTO (5 properties) - located in the client project DeviceTotalBusinessDTO (5 properties) - located in the Business project 
Because, it's valuable learning the basics before you learn the more complex higher-level abstractions so that you are able to understand which tool is applicable to each problem. The .NET `List&lt;T&gt;`, for example, is backed by an array. If you did not understand arrays, how could you possible hope to understand how a `List&lt;T&gt;` resizes by creating a new, larger array and copying the contents across from the old one, and the performance implications of this behaviour.
Use Xamarin Studio or MonoDevelop.. or install Bootcamp (and optionally Parallels) to run Windows.
Note that at least in my experience, Xamarin studio doesn't provide very useful debugging information when using Razor.
I agree with you on this. I'm starting to think that most C# devs just don't use Reddit.
I run Visual Studio in a Parallels VM. It works (as far as I can tell) flawlessly. The main concern is that when something isn't working, everyone will assume it is because of your environment.
I regularly code C# on OSX using VS inside a VMWare Fusion container. Another alternative is boot camp to boot to a windows partition and install VS there.
Either use an array, or use a character count. I wouldn't worry too much about the semantics between the two, but in my opinion you would do well to use this opportunity to practise Count. Remember to start from 0. Edit: I knocked up a very simple program to demonstrate this. I'm drunk, I wrote it in Notepad++, and I'm out of practise, but the principle should work. I'm open to criticism. //Sample program to display telephone numbers in the US format string outputNumber(string numberInput) { if (numberInput.Length = 9) { // here is a quick test - is the country code included? If so, we put it inside the brackets return "(" + numberInput(0, 4) + ")" + numberInput(3, 3) + "-" + numberInput(6, 3); } else if (numberInput.Length = 8) { // here is an alternative method if a user does not include the country code return "(" + numberInput(0, 3) + ")" + numberInput(2, 3) + "-" + numberInput(5, 3); } else { // and here is the stupidity test return "Not a valid US telephone number"; } } // this is a safeholder method, should we decide to start using integers string padding(int numberOfLeadingZeros) { return ("0", numberOfLeadingZeros) } static void Main(string[] args) { Console.WriteLine("Enter your phone number"); string phoneNumber; phoneNumber = Console.ReadLine(); Console.WriteLine(outputNumber(phoneNumber)); } I forgot to include something to tell the program when to stop reading the user input. That part will likely be of more use to you when you start learning about forms.
what errors are you getting? maybe format the string first then add the Phoen number to it once its formatted? Check their example here: http://msdn.microsoft.com/en-us/library/0c899ak8%28v=vs.110%29.aspx 
Because arrays teach you about indexing and the general structure in any language. Get the concept right and lists are just an improvement in c#
You need to use a numerical value when formatting strings with #### int is too small for you so use long: string phone = Console.ReadLine(); long tmp; if (long.TryParse(phone, out tmp)) { string myString = string.Format("Blah:{0:(###) ###-####}", phone); Console.WriteLine(myString); } else { Console.WriteLine("Invalid input"); }
Change `phoneNumber` from `string` to `long` The `#` symbols works for numbers not strings.
Yes, there's a way. [What have you tried?](http://whathaveyoutried.com/)
This helped a lot, thanks
I'm reading this as you have 12 buttons. 6 of them will call out to method 1 and 6 will call out to method 2. 1. Create your two delegate methods that you'll map each button to. 2. Map 1st 6 buttons to method 1 3. Map 2nd 6 buttons to method 2 As simple of an example as possible: public partial class Form1 : Form { public Form1() { InitializeComponent(); button1.Click += button_Click_Method1; button2.Click += button_Click_Method1; button3.Click += button_Click_Method1; button4.Click += button_Click_Method1; button5.Click += button_Click_Method1; button6.Click += button_Click_Method1; button7.Click += button_Click_Method2; button8.Click += button_Click_Method2; button9.Click += button_Click_Method2; button10.Click += button_Click_Method2; button11.Click += button_Click_Method2; button12.Click += button_Click_Method2; } private void button_Click_Method1(object sender, EventArgs e) { //Do something here } private void button_Click_Method2(object sender, EventArgs e) { //Do something different here } }
That one did the trick, now it works, thanks a bunch.
ok I think I realise how this works but what is regex and is this doable without it?
 foreach (Button btn in this.Controls.OfType&lt;Button&gt;().Take(6)) { btn.Click += button_Click_Method1; } foreach (Button btn in this.Controls.OfType&lt;Button&gt;().Skip(6)) { btn.Click += button_Click_Method2; } //Or, use the tag property. foreach (Button btn in this.Controls.OfType&lt;Button&gt;()) { var value = btn.Tag ?? string.Empty; if (value.Equals("1")) { btn.Click += button_Click_Method1; } else { btn.Click += button_Click_Method2; } }
anyone?
`Regex` is a class in `System.Text.RegularExpressions`, it: &gt; ... represents the .NET Framework's regular expression engine. It can be used to quickly parse large amounts of text to find specific character patterns; to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection to generate a report. You can certainly format your string using any number of techniques but I'm not aware of any other one-liners that will do what you need.
tDES.Mode = md5.ComputeHash(utf8.GetBytes(plainText.text)); ^ is the problem, because you are trying to apply byte array to CipherMode which is really just a enumeration type and I don't recommend using Triple DES and MD5 since those are outdated and insecure algorithms for encryption. I would suggest using [this code](http://pastebin.com/hGsppKQ0) as an alternative.
I have to agree. Roles are for organizing permissions, not being permissions themselves. When you conflate the two it just becomes a mess.
Yup. I've always thought that was the missing piece in the out-of-the-box Identity framework. If they had added the notion of "role permission" it would have been handy. However, my understanding is that the team decided that was beyond the scope, and if someone needed finer control they should be using a claims-based model anyway. 
When I was wrestling with how to do this in a way I was happy with, I found one single stack overflow post where someone was in the process of coming to similar conclusions as me. We ended up with different implementations but the overall conclusions and reasoning were related. Here is that post: http://stackoverflow.com/questions/10708565/ifilterprovider-and-separation-of-concerns I am not aware of any open source projects that implement the method; I've put my solution in to production in several applications now, but they were all consulting gigs.
A stack overflow means that your function is calling itself forever (or essentially forever), for whatever reason. There's nothing wrong with what you're trying to do, but it requires being careful not to cause an infinite recursion loop. It looks like your logic could be simplified drastically by making `c` and `cc` an array or list. Then you can just do: if (cc[aimove]) { c[aimove]++; Drop(aimove); } else { AI(); } Also, if all the `cc` values are false, then you'd get an infinite recursion loop. So that's likely your problem.
On mobile so apologies for lack of formatting, but check out the Substring() method. Takes a starting value,x, and let's you cut off after so many digits,y. eg areaCode = phoneNumber.Substring (0,4). 
You are new to programming not just C#
Developing VS Extensions is an exercise in perseverance. It can be frustrating to try to figure out the differences between things like IWpfTextView, ITextView and IVsTextView. (Especially when there are no code samples and pretty terrible documentation) I'm always happy to see others out there grinding through these things, and especially happy when they document their work/struggles. :) I'm not very familiar with Lazy&lt;&gt;. Why'd you choose to use it for DTE, IServiceProvider and the RunningDocumentTable?
If you use both slashes like so: /r/javascript then Reddit will automatically linkify the subreddit for you.
Why not write addons instead? VS Extensions are being deprecated in VS 2015 and abandoned in VS2015+1.
Probably worth noting that everything you add as a claim in the access token is round-tripped to the server with every request. And even at a bare minimum (the Name claim) the token isn't small. Something to keep in mind if you're concerned about bandwidth. 
Good point. Didn't occur to me to mention that, but when I consider the likely target reader of a post like this, I should probably update the post. Thanks! :-)
Two question marks is the [null coalescing operator](http://msdn.microsoft.com/en-us/library/ms173224.aspx).
You need to reference the grid's cells. example: Update Finance$ set Budget='" + dataGridView1.Rows[RowIndex].Cells[BudgetCellIndex].Value + "', Transfers='" + dataGridView1.Rows[RowIndex].Cells[TransfersCellIndex].Value + "' where [Finance ID]= 1"; clear as mud?
You can refer to the cells by name.. Update Finance$ set Budget='" + dataGridView1.Rows[RowIndex].Cells["ColumnName"].Value + "', Transfers='" + dataGridView1.Rows[RowIndex].Cells["ColumnName"].Value + "' where [Finance ID]= 1";
I'm pretty sure OP is not worries about that atm... he's strugglin' to get data from a grid..
I have never heard this. Do you have a link? I know that [add-ins were deprecated in 2013 and the recommendation is to make a VSPackage](http://www.infoq.com/news/2013/11/VS-2013-Extensions).
Yeah, definitely try to do for (int i = 0; i &lt; ...) same thing with int j =... Also, if you could paste the error to us that would be helpful.
Well, Adafruit's software is completely open-source and not written in .NET. If you'd rewrite it in .NET, you're fine. You can redistribute open-source software as open-source software without a problem. If you designed your own hardware, you can sell the hardware, give away the software. Almost like Arduino does it (Arduino also shares the hardware schematics and board layout as open hardware).
and?
I want the user to be able to change the cells value in the table that he chooses to, then when he clicks update, it saves the writen values directly to the database
Check the link and see what they do? From your code we cannot see what it is or does, what the context is and whatnot, so we cannot answer this question for you, only you can. If you read that link or some information about recursion you will know where to break out of the function.
&gt;Additionally, it is not at all friendly to dependency injection. Err the reason it doesn't support DI is because the only way for attributes to support DI is to have a custom one with intimate knowledge of your DI container. You can't say [Authorize(Kernel.Get&lt;IAuthorizer&gt;())] because attributes can't contain anything but compile time known metadata. It is a 3 liner to create your own authorize attribute that inherits the existing one. The reason custom attributes seem more flexible is because *they are*. Nothing to do with this particular attribute. You have a lot of other valid points about permission structure, though.
Lovely, nice to see something like this in here! I think for the non-C/C++ users here, it might've been worth identifying *why* we must use 'unmangled' files. Also, I guess in another tutorial you might mention how to export functions with C linkage (or unmangle names), so that people can write their own native APIs. Either way, good job. I didn't ever think about extending from a native class, that's crazy, haha.
Things that consume web services are often quite gratifying. How about a weather reporting program that gets some data for an area in JSON or XML and presents it in different clients. eg start with a console app, then a winforms, then WPF, then an MVC website? http://openweathermap.org/api
Is your WSDL up to date? Make sure the property is actually part of the contract.
Parallels is supposedly better (testing it out now myself), but another free alternative to running a VM is VirtualBox by Oracle.
If you use something like Octopus Deploy you can have it update your web.config (or other file(s)) during deployment so your local machine can use localhost or w/e for development.
I evaluated Parallels and am a long-time user of Virtualbox, but I prefer Fusion for running windows in OSX. Feel free to use your preference, but in my evaluation, Fusion is the best choice.
Out of curiosity, what shortcomings did you find with Parallels versus Fusion, or how was Fusion superior to Parallels for what you were doing?
I only use var if the return type is something that would be needlessly complicated to declare ahead of time. Most of the time this is the results of Linq queries, or something similar. Using var for primitive datatypes is, in my opinion, bad practice.
&gt; So what do you guys think? FWIW, adding unnecessary type annotations is considered bad practice in F#. 
As the other poster said, i never use var if I don't have to say: var myFoo = new Foo(); Where you say, "the code will compile correctly," that's not entirely true. The compiler replaces var with an inferred datatype based on its initialized value and if you try to perform an operation not supported by that type, you will get a compiler error. If you're posting the value to a database, why isn't the field you're assigning to strongly typed? Assigning a var that is implicitly typed as a string to an int field will result in a compile time error. Like i said, no new = no var (for me), but to absolutely not use it? I'd rather not have to write Tuple&lt;Tuple&lt;string, string, string, List&lt;Tuple&lt;string, string, string&gt;&gt;&gt;, Tuple&lt;string, string, string, List&lt;Tuple&lt;string, string, string&gt;&gt;&gt;&gt; more times than are absolutely necessary.
This.. A boolean is a value type, all value types have the "Is...Specified" field generated. Of course as this is autogened code, I never understood why MS didn't set the corresponding "Is...Specified" field on the setter for the value type.
Somewhat better battery life (I ran down a typical office load in the VM and watched battery burn down) was a big factor. Another benefit is that fusion allows me to migrate the VM to other VMWare products (e.g. run the same VM on windows and OSX hosts). VMWare is also an option for [Vagrant](https://www.vagrantup.com/vmware), which is markedly better performance than virtualbox.
If the type is obvious from the declaration, use `var` to reduce redundancy: var items = new List&lt;Item&gt;(); var brush = new SolidBrush(Color.Black); var num = Convert.ToInt32(numString); var customer = new Customer() { ... }; var fullName = String.Concat(firstName, " ", lastName); It's particularly helpful when dealing with unwieldy names and constructs, consider: Dictionary&lt;ICustomerMappingKey, CustomerDetail&gt; customerMap = new Dictionary&lt;ICustomerMappingKey, CustomerDetail&gt;(); What value is added by specifying the type on both sides? I'm ambivalent about the use of `var` in cases like: var id = 1; var name = "Joe"; Using `var` also makes refactoring easier. In most cases, as in your example of an `id` set to `"1A"`, you're going to get an implicit conversion error from the compiler if you try to do anything with the variable. In cases where there's a database involved, that implicitly typed variable should be mapped to a *model* at some point, and there you'll see a compiler error.
.Tag is just a generic property that can be used for anything. Set the value in the button's properties. The ?? is a short cut for ternary (expression ? true : false)
For every one that is obvious there are many that aren't. It's a judgement call that has to be made in context, there's no rule that will always fit. 
 uint x = 0; ... if (x == /* some value */) { ... } Suppose I didn't write this code, and I'm reading through trying to figure out what it means. If var were used in place of uint, I would assume it was just an int. But having the unsigned type gives me a clue that this variable is used for something that shouldn't be negative. I guess that calling it a "bad practice" is a bit strong. You're right that there's usually little or no ambiguity, but I think that using primitives whenever possible is better than using var instead. It's mostly a personal preference, since the question did prompt for opinions :) Also, someone coming from a dynamically-typed language like JS might think that var can change type, but that's not how var works in C#. Using the primitives in this case would be a better guide.
I cut my programming teeth on C 30 years ago and love me some types. ` var` has a place but it always smells funny to me even through all of the lean, weakly typed years of BASIC, Perl, and JavsScript.... Personally, I tend to use `var`, only in a three cases: I'm stashing an intermediate result that I might want to re-use later...particularly with Linq and an IEnumerable result... var b = a.bunch.of.linqy.stuff; if ( b.contains ) { } IEnumerable&lt;othertype&gt; x = b.where(pred).select(othertype); I'm handwaving my way through something complicated that I might want to debug later. var b = a.bunch.of.linqy.stuff.where(pred); var c = b.groupby(...); // Debugging, what made it into B? IEnumerable&lt;othertype&gt; = c.join().select(othertype); I'm dealing with anonymous types in this scope. In a code review, I don't ding programmers for using `var` when it's not really needed. I *will* occasionally ask the programmer what she thinks the type is (when it's not patently obvious, as with `var b` above).
For anyone interested: var pi = 3.14; // double var pi = 3.14d; // double var pi = 3.14f; // float var pi = 3.14m; // decimal 
When you want to update controls you should consider using a System.Windows.Forms.Timer, because it executes on the UI-Thread. For further information https://msdn.microsoft.com/en-us/magazine/cc164015.aspx
&gt; The example above prints "Approved for premium insurance!". Looks like it prints **User is not old enough for premium insurance!**, to me, unless `user.Age` is unsigned. Honestly, if I were reviewing this code, the use of `var` would be the least of my concerns. ;)
I like it because then when things are being refactored it's less copy-paste of object names all over the place. And it keeps the code short. And (more often than not) you can tell what it is immediately. var name = "Bob"; // that's a string! var item = new StoreDetailsItem(); // that's a store details item! var widgets = GetWidgetsFromSource(); Ok, the last one you can't tell exactly, but that's OK, because the compiler will let you know if you do something wrong and intellisense will fill in the blanks.
Arduino is precisely the model I'm going for. I can't afford any real copyrights or patents, so I make everything open source and make money off the people willing to pay for the convenience of not assembling all the parts themselves.
On top of the problems already mentioned by others, you're allocating a new instance of the Random class every time through your function. You should think about having a single instance declared in your class, and use it every time.
Personally my rules is that it is OK if the actual type being inferred is either obvious or very complex. Which means primitive type declarations or return values from functions with an obvious type- eg CustomerStatement result = GetCustomerStatement(key); versus: var result = GetCustomerStatement(key) The latter is my preference. Complex linq results as well as assigning lambda's to local variables, I will use var as well. 
`user.Age` should *never* be unsigned unless there's a really, *really* good reason. That's a violation of the CLS. I understand your point but, in most cases when I've seen discussions about using `var` for primitives, the examples are contrived because, in practice, it almost never matters.
I still use it only when i can see the type DIRECTLY from the right side of the declaration. When your're not very familiar with the language the cases where you may consider the return type of a method "clear" may not be clear to somebody else.
I'd consider this is bad practice. If your're not familiar with the codebase you may dont know that CustomerStatement is an own class and so it's harder to read. 
&gt; I would tend to completely disagree with you, for what it's worth. It never makes sense for someone to be -4 years old Wouldn't it? How old was Abraham Lincoln in 1857? Depending on the application, a negative age may make sense. &gt; I would actually, genuinely choose user.Age to be a uint (or byte even, but I digress... To me that smells like premature optimization, and you know what Knuth has to say about that ...
&gt;If you're not familiar with the codebase you may not know that CustomerStatement is a class Adding the type doesn't tell you whether it is a class, struct, or enum, either, so not sure where what you are saying. 
Var is nice for readability into the flow of the current code. Once I see how the vars are used, I can get into the details of what they can do for me by mousing over them.
Did you set it as "1" or just 1. You can do either one you like, but I was accounting for a string type. You can just change it to use int's though. 
Added benefit of only needing to retype the type once when changing it. Ie: &lt;type&gt; a = new &lt;type&gt; () requires you to change &lt;type&gt; twice whereas var a = new &lt;type&gt;() Only requires it once.
I'm sorry, what is DI
They are also infinitely useful when you need to redactor some code. Without it you have code redundancy most of the time (you shouldn't have to declare type twice but that's what you are doing when you have int i = 0;
You hover over it and it gives you the type. Why are you so fond of redundancy in code?
&gt; Errr, well, choosing uint instead of int doesn't affect performance at all No, but choosing `byte` (which is what you said you'd use) is almost certainly premature and unnecessary optimization. Type inference is still strong typing.
I think he did that on purpose, to highlight the advantages to var. :)
On the contrary, byte says more about the range of expected ages than int. I'd only use int if I was worried about packing/alignment. Plus it saves a little space!
I set it as 1 but then i tried putting "a" in because i though it had something to do with that but "a" doesnt work either...
&gt; Err the reason it doesn't support DI is because the only way for attributes to support DI is to have a custom one with intimate knowledge of your DI container. You can't say [Authorize(Kernel.Get&lt;IAuthorizer&gt;())] because attributes can't contain anything but compile time known metadata. This is pretty much exactly what I meant when I said the AuthorizeAttribute isn't friendly to dependency injection. You could do ~~parameter~~ property injection, but the real issue is that the AuthorizeAttribue shouldn't *be* a filter; it should be used as metadata to construct a filter in a filter provider. Thus you shouldn't even need dependency injection in the AuthorizeAttribute. I don't see any reason to inherit the existing AuthorizeAttribute and I am suggesting not to do that. The existing AuthorizeAttribute is designed around embedded authorization logic, which is an abuse of an attribute, and completely unnecessary.
I love how much diversity of thought there is around var. And very few comments could be said to be "wrong."
Thank you. I really haven't learned interfaces yet...getting there, I'll consider it :) The eventual goal of the code is to send a path rather than a file name, iterating through all the .tif and .pdf files found therein, writing results to a CSV file. Also will look to producing a more detailed report by page within each file, writing out the dimensions of each page. I'm starting small and within my abilities, expanding on the concept bit by bit as I learn.
I would need to see some code, but I'm not sure why you need the switch/case statement. That said, this might be a better question for StackOverflow (better syntax highlighting for the code).
The old adage "programmers are lazy, and that's a good thing." Seems to apply here.
Yes they are static values. 
&gt; DocFile.cs, line 31/48/63: Your properties do way too much. Instead do this kind of stuff in extra methods, call these methods in the constructor and assign the value to the property. Like this the code is executed every time you call the property. And with public properties you have no control over how often they're called. To add to this, the Visual Studio debugger will call the property every time it updates the locals or watch list, so don't do anything in them that cause side effects. I ran into that while fiddling with a word generator that used a property to get the next word.
There's a preview tab plugin, that you probably had installed for ReSharper 8. I've just updated it for ReSharper 9. Head over to the extension manager and search for "preview".
I hope i never have to maintain the code of everyone in this thread.
&gt; There's no ambiguity. var x = obj.GetValue(typeof(this));
you could look into [predicate builder](http://www.albahari.com/nutshell/predicatebuilder.aspx) EDIT: url link
Great feedback, thank you. I'll adjust and report back. Thank you!
[/r/crypto discussion](http://www.reddit.com/r/crypto/comments/2t5b1q/backdoor_in_a_public_rsa_key/) [/r/netsec discussion](http://www.reddit.com/r/netsec/comments/2t4ll9/backdoor_in_a_public_rsa_key/)
&gt; DocData.cs, line 18: A hardcoded path, are you sure? The target file should be passed to the method. This is temporary as I build on the program. Eventually I'll be passing a root path and rather enumerating all the .tif and .pdf files under that path. This is a work in progress. I won't be hard coding any paths, ultimately.
Those are two different concepts that have nothing to do with each other. Your problem right now is that at _every_ location where you need to distinguish the file type you have a big switch construct. This is ugly, hard to extend and just bows up the code. The suggestion is to have an independent implementation per file type, so you never need to check this again.
That solved it. Thanks.
There's a lot going on here and latency is going to be a killer. If its an option, I would try to push the entire table to a temporary database on azure and then create a stored procedure with a cursor in it to perform your merge. Doing it with C# from your local site is certainly doable with a simple while(sqldatareader.read ()) {if(condition)insert to destination}
If this is a one time thing consider making a backup of your table and restoring it to a new table so you can do all your work in Sql. Otherwise, you can make a stored procedure to handle your insertion logic and call that from your c# application for every line you read. This could potentially take a very long time though
&gt;You could do parameter injection No, you can't. What I showed is the factory pattern--there is no way to do parameter injection with attributes.
I think i am going to try something like the while(sqldatareader.read()) The speed of the program is not that important to me, and i would like to make the solution in C# alone to get some experience with the language.
Well, I'm on my phone but you will be wanting to include sqlclient: https://msdn.microsoft.com/en-us/library/System.Data.SqlClient(v=vs.110).aspx You'll need 2 sqlconnections, one for your local, one for your remote. Open them once before you enter the business code, you don't want to be renegotiating the remote connection for every damn insert. You'll need a sqlcommand object for each connection object and a sqldatareader for your local one. You'll want some error handling on your remote insert in case of a timeout (speaking of which, you'll want to up the default 30 second time out on your remote command object). Its good practice to put error handling around all SQL access, you never know when an .executereader() is going to barf on a poorly formatted input or a field is going to return an unexpected value (usually a null). Logging is invaluable. Do it. If you want to get adventurous, you could spawn some worker threads, each with its own connection to the remote database. Concurrent jobs will reduce your time lost to latency. If you have any dramas, post here, I'll check back. ☺
This is not free as in gratis. If I have to give you personal information to get it. No thank you.
Agreed, it's been an enlightening discussion. 
It's not allowed by the compiler. You would have to do pointer trickery to read from an unassigned local variable.
String myName; myName = "John"; is fine too, when he has the namespace `System` imported. `string` is merely an alias for `System.String`.
You did not get an undefined variable error. What you did is perfectly legal. What you may have confused it with is the "the variable is assigned but value is never used" *warning* from the compiler. Which is what you would get if you did that, and never ever refer to *Myname* ever again. 
That's an intentionally obfuscated example--what does that have to do with clearly typed primitives, as in the examples above?
No, I saw that warning (not an error) and it's very easy to understand. My example in the OP doesn't represent well what I was doing in the code, there are missing parts.
Intentionally or not I've seen that. So var can be ambiguous. 
Okay, but, I don't understand what that has to do with: &gt; Using var for primitive datatypes is, in my opinion, bad practice.
Well sometimes it is bad practice. Sometimes it results in brevity. But it can be easily abused. It is not good or bad in the absolute. The thing of it is that the same could be said about goto 
&gt; they don't expose any sort of lightweight unit of concurrency This sounds like this guy is talking about C# 2.0 and older versions of java too. Both C# and java have this concept of Tasks for concurrency, not only threads. &gt; leads to a somewhat unpleasant programming model This is true for java, but C# has language level support using the async/await keywords, making async code practically transparent: //this is executed asynchronously var somedata = await SomeLongOperation(); //execution "resumes" here once the async call is finished. //this is executed asynchronously var someOtherData = await SomeOtherLongOperation(someData);
Ok, I've managed to get the chart working and it is populating with data from the database. The only thing is, I can only add two out of three of the 'value' fields to the chart. When adding a series, I only get the option to add Actual or Target as a Y value - i.e. I cannot select RollingAve as a Y value.
Dependency Injection. Basically you inject dependencies usually through the constructor. It allows for greatly reduced coupling in your code so it becomes far more maintainable and testable. But it means that you can't just follow your code top to bottom. Resharper makes navigating around your code much easier when you write your code in this fashion.
This was based off of Kirill Osenkov's fantastic [Reference Source](http://referencesource.microsoft.com/) project. It's available on GitHub at: https://github.com/CodeConnect/SourceBrowser Currently it only supports C# and VB .NET but we're looking at supporting other statically typed languages.
I'm surprised no one has said this, but since you left out the code in between, I'm guessing you declared your variable in a different scope than you are trying to use it in.
Yes, that means there is a _possible_ code path where the variable is not being assigned. Now, the compiler is very robust in determining that _theoretically_ it's possible to be unassigned, but it can't evaluate runtime logic that _logically_ might prevent it. Consider the following: bool isBoy = true; string name; if (isBoy) { name = "Bob"; } else if (!isBoy) { name = "Sarah"; } Console.WriteLine(name); Now, we, as humans, can evaluate this code and logically deduce that by the time we hit `Console.WriteLine(name);` that the `name` variable _will_ be assigned a value. However, the _compiler_ can't make that same deduction* and will result in the compile error. So perhaps somewhere in your code you _logically_ would have a value assigned at runtime, but at compile time that cannot be proved. ================== ^^* ^^well, ^^some ^^static ^^analysis ^^tools ^^probably ^^_could_ ^^deduce ^^this, ^^and ^^one ^^could ^^argue ^^that ^^the ^^compiler ^^_could_ ^^be ^^written ^^to ^^catch ^^this, ^^but ^^this ^^particular ^^case ^^is ^^pretty ^^trivial ^^and ^^contrived. ^^It ^^can ^^be ^^much ^^more ^^difficult ^^or ^^perhaps ^^impossible ^^to ^^algorithmically ^^prove ^^the ^^general ^^case ^^for ^^any ^^arbitrary ^^branching/algorithm ^^logic.
Aha! That's it. You got it. Thanks, that makes much more sense.
Is that because half will be var list = new List&lt;Stuff&gt;(); and half will be List&lt;Stuff&gt; list = new List&lt;Stuff&gt;();
Check out [bulk insert](https://efbulkinsert.codeplex.com/) for EF. I'm just spitballing here, but the code should be pretty simple. Something along the lines of: IEnumerable&lt;Record&gt; records; using (var ctx = new SqlContext()) { records = ctx.Records.Where(r =&gt; r.changedDateTime != null); } using (var ctx = new AzureContext()) { ctx.BulkInsert(records); ctx.SaveChanges(); } *Edit: I missed the bit about doing a merge. Should still be possible purely in C#, but as the other comments suggested, this is probably a case where you can stay purely in SQL and keep it simple.
Chinese uses UTF-16 so that should probably cover it.
It was suggested that rather than using an Enum I use an Interface in my fledgling code. The goal in mind is to perform a certain type of function based on one of two types of files, while completely ignoring all others, namely .tif and .pdf. So I had used an Enum in an attempt to encapsulate this concept. So (in part) I have the below: interface IFileType { string tif(); string pdf(); } and then: public class DocFile : IFileType I see how Interfaces kind of work like Properties. What I don't understand how is using an Interface will offer more concise elegance than what I had as an Enum. Keep in mind, the goal is if: Path.GetExtension(filename) == ".tif" then do *this*. If... Path.GetExtension(filename) == ".pdf" then do *this instead*. If anything else, do nothing. For example, returning the number of pages in a .tif is done differently than a .pdf. I could of course simply include that conditional decision each time I needed to, but of course the goal here is to do if the C# and OOP way. I'm not looking for someone to give me answers or write the code for me, but I'm kind of spinning my wheels here. I've look at these two resource examples in the hope some light would be shed. http://csharp.net-tutorials.com/classes/interfaces/ https://msdn.microsoft.com/en-us/library/aa288461(v=vs.71).aspx
Fibers, in Windows, are basically the same as threads from a high level perspective. Tasks are a promise to do work. They say nothing about how the work will be performed. The default way of executing non-async tasks is via a thread pool. One thread per CPU core is far more efficient than context switching, if you can avoid blocking operations. Also, it's pretty damn obvious that you are being paid to write that crap. If you want to promote something honestly, contact me. If it isn't complete garbage I'll hook you up.
Parse the xmldoc comments into something nice alongside the code view and I'm sold on it and will deploy it at my company. 
At first glance, this seems like something that is already built into .Net in form of [LINQ](http://en.wikipedia.org/wiki/Language_Integrated_Query).
That's utterly bonkers! And I love it!
I don't know enough about either language (yet) to make use of this but you've got to hand it to MS, they're doing some really cool stuff and embracing their community of coders.
ELI5: How can all those C# features be supported by javascript. Is it a similar process to [emscripten](https://github.com/kripken/emscripten)?
I'm curious as to how it compares to the Saltarelle Compiler? Looks like it's got better tooling support (source maps, debugging, better VS integration, etc), but what about the actual compilation and support for metadata libraries?
They are using build configuration as a hack. You choose either Debug, or Release.. or JavaScript. That does not fit.
Seems like their use of Roslyn can make their compilation quality much better than Saltarelle's. They're also generating source-maps which I don't think is possible in Saltarelle.
I agree, it would make more sense to have them as Debug (DLL), Release (DLL), Debug (JS), Release (JS) or something similar.
Their FAQ says they're "completing language features that exist in C# and are missing in JavaScript".
TIL, thanks
It would be interesting to see if this will have something that will build on Linux. I'm trying to write a cross-platform editor and still contemplating using WebKit or Awesomium as a front-end. But, TypeScript and I haven't quite found a common ground yet.
I prefer to code in C# over anything, but if i'm gonna write JavaScript, I'm gonna write JavaScript. How do you even go about using a js library or framework? 
Just to clarify, are you saying that all data from the moment i make the connection, poll for some data, and close it again, is all encrypted by default?
No one's suggesting that this should replace all javascript development. If it doesn't solve a problem you have, there's nothing wrong with ignoring it. As for using a js library, I don't see an obvious way to do it. I could be wrong though. I'm excited about the possibility of writing code in c# that could be consumed by other javascript code, so that particular issue wouldn't be a problem in that case.
Why?
I feel like the right way should be to automatically compile the JS fragments regardless of the build configuration.
Didn't copy it properly(hence the missing bracket). Thanks for the suggestions tho, it looks much cleaner this way.
TBH I wish unsigned mathematics operated in a `checked` manner by default, if only because 1) underflow is rarely a desired feature and 2) I'd guess that the average value of any integer in a program hovers around 0 (vs `int.MaxValue`), so you're more likely to encounter underflow with unsigned integers than underflow/overflow with signed integers. You can force it in C#, although it wouldn't help if you weren't aware `user.Age` was unsigned. checked { uint userAge = 21; Console.WriteLine(userAge); // Prints '21' var userAgeLess30 = userAge - 30; if (userAgeLess30 &lt; 0) Console.WriteLine("User is not old enough for premium insurance!"); else Console.WriteLine("Approved for premium insurance!"); } &gt; 21 &gt; OverflowException: Arithmetic operation resulted in an overflow. 
Because if you have c# you need to run in a browser, the duocode compiler can achieve that with less developer work than manually porting it. And it can be automated.
Both valid points, I hope all read! I LOVE VS COMMUNITY as a novice!!!
Looks like a great Roslyn based tool, bodes well for future applications. 
Makes no sense, JSON.NET has it's own API to support and the creator of this new library may not want to ensure compatibility with all that and people who want to use something lighter than JSON.NET might appreciate alternatives. Competition is good, if it makes JSON.NET improve, then you will win eventually, but open source doesn't mean "force other people to work for me for free".
Yeah, sorry about that, should've noted that i found the solution. All i did was add rects[i, j] = new System.Windows.Shapes.Rectangle(); to the second for loop.
Great! Feel free to pm me when you've updated your code if you want me to take a look
Yep, it's the same "index" that was declared inside the for loop, just as everyone has said. One thing that is really nice about Visual Studio, just like most IDEs is that it has syntax highlighting. Therefore, if you type a word and it doesn't highlight another color, you can rest assured that it's not a keyword or reserved word of any kind, including classes, structs, and interfaces that are available in the global namespace (either in the current namespace, or brought in by your 'using' statements at the top)
The two question marks is the null-coalescing operator, like filmund said. It can only be used with nullable types (meaning they can be set to null). Any class object is nullable, but for structs, they must be wrapped in the Nullable struct by declaring it like this: Nullable&lt;int&gt; myInt = null; or: int? myInt = null; // Shorthand for declaring a nullable type This allows struct objects to contain a null value when they normally can't. It also gives them two properties (using the same example as above): /* Boolean value that is false if the value stored is null, true otherwise */ bool hasValue = myInt.HasValue; /* The actual meaningful value of the object. Will throw an InvalidOperationException if the above property is false!!! */ int value = myInt.Value; If you already know all of this, I'm sorry, just thought I'd cover all my bases before I get to the point, the double question marks: var value = btn.Tag ?? String.Empty; That is short for: var value = btn.Tag != null ? btn.Tag : String.Empty; In the case of working with a nullable struct, consider this: int value = myInt ?? default(int); That is short for: int value = myInt.HasValue ? myInt.Value : default(int); Again, sorry if you know this already, I just got the urge to explain in detail. Feel free to ask questions if what I've posted is too confusing. But for more info, check out these links: [Nullable Types (MSDN)](https://msdn.microsoft.com/en-us/library/1t3y8s4s.aspx) [Ternary Operator (MSDN)](https://msdn.microsoft.com/en-us/library/ty67wk28.aspx) [Null-Coalescing Operator (MSDN)](https://msdn.microsoft.com/en-us/library/ms173224.aspx)
I'd suggest going forward passing in/returning IList&lt;T&gt; from your methods. Most methods you write won't care what type of list you have they just care that it is a list of some sort. Passing in IList&lt;T&gt; instead of concrete types means that the methods will work for any type of list.
Not necessarily. If you are an organization with +250 PCs or +$1 Million US Dollars in annual revenue you don't qualify. Many big organizations are legally subdivided into companies of that size and smaller. http://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx &gt;Who can use Visual Studio Community? &gt;A: Here’s how individual developers can use Visual Studio Community: &gt;Any individual developer can use Visual Studio Community to create their own free or paid apps. &gt;Here’s how Visual Studio Community can be used in organizations: &gt;An unlimited number of users within an organization can use Visual Studio Community for the following scenarios: in a classroom learning environment, for academic research, or for contributing to open source projects. &gt;For all other usage scenarios: In non-enterprise organizations, up to 5 users can use Visual Studio Community. &gt;In enterprise organizations (meaning those with &gt;250 PCs or &gt; $1 Million US Dollars in annual revenue), no use is permitted beyond the open source, academic research, and classroom learning environment scenarios described above. 
This is absolutely wrong in the context of wpf and mvvm. If you want data bindings to automatically update when the collection changes, you must expose it as an observable collection.
Yeah, i definitely get your point. I'm so used to data driven apps that i generally construct my observable collection in the getter. 
https://en.wikipedia.org/wiki/.NET_Compiler_Platform 
Another tip: There are many extensions that cancel the build automatically on the first error.
For more information: simply open each menu on the menu bar. A lot of things will show you what the shortcut is right next to the menu item
Ahh should have been more specific. Liked the tip about the EF, needs to look more into it perhaps for future projects, but its not bulk insert is not an option in most cases as i probably also needs to do allot of updates. The thing about keeping my code in C# that was directed towards the use SQL statement in the end.
Just don't expect it to stop a large, parallel build in its tracks any more than the Build-&gt;Cancel menu item. It can take a while.
I honestly think the biggest surprise was that you could cancel the build at all. More than one developer had simply resigned themselves to thinking it wasn't possible. 
I'm struggling with this idea as well. Could someone write a very simple example of how you would deal with this? Say if the Model had a List&lt;string&gt; Names {get; set; }. How would you handle this in the viewmodel so that in the view the user had the ability to add/delete/edit the names in a data grid?
I think you should get some help here: http://loganyoung.za.net/services/get-a-quote/ This guy looks really capable! I'm sure he can help you!
Your server name is `IP` and the database name is `db`? I'm not sure, but I don't recall a `DbContext` constructor that matches the signature you posted. Try this (leave out the second parameter): public TestEntities() : base("name=TestConn")
I think i have your answer, try long rather than int64. Int64 is a struct, not a primitive type. If i had to guess, ef can't map it.
I don't do Web but unless ef is literally reading the source code there is no difference between Int64 and long
I replaced the actual IP and db name with IP and db for the example. Removed the second parameter and it gave an ArgumentException error on that line: An exception of type 'System.ArgumentException' occurred in System.Data.Entity.dll but was not handled in user code Additional information: The specified named connection is either not found in the configuration, not intended to be used with the EntityClient provider, or not valid.
Okay. That's a start. How did you build your model? Was it Code First? Is this a single project or is it layered? Is your connection string in the startup project?
Except for one thing: Int64 is a reference type which means it's an object, not a primitive.
Haha, I actually have to limit the time I spent poking around since I usually end up changing all sorts of shit, hating the changes, and then changing them all back.
This would be nice if I could ever find the break key on my laptop.
Install the telnet client (it's one of the Windows features in add/remove programs), then telnet to it. If you don't see this in your terminal window, you have a networking problem. C:&gt; telnet smtp.gmail.com 587 Connected to gmail-smtp-msa.l.google.com. Escape character is '^]'. 
No.
Even after installing telnet client, it still didn't work and my network is fine. I have gone for mandrall api, works fine. 
After hours of searching, I managed to come across a blog post which pointed out an issue with the WPF Browser control. I ended up having to use the System.Windows.Controls.WebBrowser instead. The blog post is [here]( http://aravind-microsofttech.blogspot.com.au/2011/09/facebook-oauth-authentication-for-wpf.html)
I am not, "telnet" is not even a valid command on my cmd prompt 
You need to install telnet before you can use it. To install Telnet Client: 1. Click the Start button , click Control Panel, and then click Programs. 2. Under Programs and Features, click Turn Windows features on or off. ... 3.In the Windows Features dialog box, select the Telnet Client check box. 4.Click OK. 
Http://Stackoverflow.com
nah I don't like the stackoverflow community, they don't help a lot of the time, they are just rude.
I have a button that when you press it starts listening and the code above is what runs when the button is pressed 
Done. The response on command prompt shows no change though. 
In my experience, they are only "rude" when the question is irrelevant, easily googleable, or a repeat of a question that has been asked there a thousand times before. 
Near the very start of the class I have: SpeechRecognitionEngine sRecognize = new SpeechRecognitionEngine(); Also thanks for your fast responses 
Add the handler when you new up the object, see if the strange behavior continues. Or add the finally block to the try and remove the handler in it. The first option is probably the best, but you can try either
Happy to help
Looks like this only works with GitHub, not TFS Git right?
Yeap, that's right, for now we are only integrated with Github but we are planning to integrate with Bitbucket and TFS. Based on your MSFT experience, do you think that many ".NET" companies are using TFS Git?
Likely [this comment](http://www.reddit.com/r/csharp/comments/2tf3af/reddit_help_me_out_here_im_begging_you/cnylyan) that was picked up by the spam filter as a false-positive. I've reversed its removal.
Off the top of my head is you don't actually tell the minimax which step to take, or in other words, you don't provide the new gamestate for each call. I modified the recursion to check how deep it is (which should be only 8, since all the first step will left only 8 more position) and it goes to few thousands.
If I understand your question correctly, yes, you can configure how the outputted data is formatted: http://logging.apache.org/log4net/release/sdk/log4net.Layout.PatternLayout.html (EDIT: I'm not sure if this is the _best_ resource to use to configure it, but it should give you a start.)
What you need to do is setup break points in your program, so that you can see what happens at execution time. Once you're at an interesting place in your program you can step through it (F11) to figure out exactly what's happening by viewing the program's flow and your variables' values.
Two issues I see: 1) Your minimax method does not alternate player even though that was your intent. Laughably easy fix when you see it. Well, I laughed anyway. 2) GetGameSates(board, player), apart from missing a 't', does not return different game states. In fact, they're all identical. The following lines are part of the problem: *gameStates[p] = board; board[i, x] = tempSquare;* *gameStates[p]* and *board* both refer to the same array. That means when you change a value through one reference, it'll be changed in the other too. Check out the difference between Reference types and Value types for more info. If this is news to you, then I'd be double-checking your code because you've got lots of array handling in there. I hope the pain of this debugging experience leads you to start writing automated tests. Life's too short to be wasted stepping through a debugger - even one as nice as Visual Studio.
I'm not gonna help you getting kicked off school. Grow up.
..which is "Unicode" which OP claims they tried.
No, var doesn't work for lambda expressions (var x = y =&gt;... doesn't work), so not for them. Rather for anonymous types and because it's nice in general. I always use var.
I dare you to assign a lambda to a var-declared variable! :p. It doesn't work.
Who cares about CLS? If you stick to one or two CLI languages (C# and F#, say), CLS doesn't matter. 
Writing array[-2] is unrelated to the CLS as that would be a C# feature translated by the compiler. CLS concerns the IL level.
Dependencies declared at the top of your class obviously won't use var since var is only supported for variables, not fields. 
This submission has been removed because of the discussion of illegal activity.
&gt; I modified the code a little bit to try to get it to display 5 as the initial value and 15 in the Method for ChangeNumber You assigned 10. Did you mean to *add* 10? 5+10=15.
I private messaged you.
Why is ref considered bad practice? I've never heard of that before.
Anything you can do with the pattern, you should also be able to do with code behind. Mvvm is not for every project. 
Whilst you're correct in saying anything you can do with MVVM you can do in code behind, there are very few times when you want to use code-behind with WPF. The entire framework was built with MVVM in mind so it's far simpler to do most things if you embrace MVVM. Take the OP's list box problem for example - if you stop manually playing around with array indexes and bind to an ObservableCollection, things become far easier and you avoid the pitfalls of manually managing the SelectedItem property of the ListBox control. By using commands you also pull the logic of when things should be enabled into a single place, instead of splattering it all throughout your code. OP - I knocked together a quick example using MVVM which has a listbox that you can delete items from, that displays properties of those items when they're clicked, and has the buttons disabled if an item isn't selected. If you're serious about using WPF you really should look into MVVM - it's amazingly powerful once you get over the initial "wtf is going on" stage. Note that this example doesn't entirely represent how you'd actually implement this (i.e. using Dependency Injection instead of instantiating the ViewModel from within the view) but it's fine for demonstrative purposes. https://gist.github.com/anonymous/9aca86017e6b76410730
But mvvm is for WPF, so if you're going to use it properly, it's better to utilize the proper object design pattern.
the other goofy thing about ref is that it's hard to use without violating the single responsibility principle. for example, if: foo(ref b); mutates b, then why not write foo like: int new_b = foo(b); // does not mutate b? typically, it's because foo already returns something else, e.g.: object bar = foo(ref b); which means that foo does two things - returns an object, and mutates a parameter: a violation of the SRP.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Principle of least astonishment**](https://en.wikipedia.org/wiki/Principle%20of%20least%20astonishment): [](#sfw) --- &gt; &gt;The __principle of least astonishment__ (__POLA__) applies to [user interface](https://en.wikipedia.org/wiki/User_interface) and [software](https://en.wikipedia.org/wiki/Software_design) design, from the [ergonomics](https://en.wikipedia.org/wiki/Ergonomics) standpoint. It is alternatively referred to as the law or rule of least astonishment, or of least surprise. *"If a necessary feature has a high astonishment factor, it may be necessary to redesign the feature."* &gt; --- ^Interesting: [^User ^interface](https://en.wikipedia.org/wiki/User_interface) ^| [^User ^expectations](https://en.wikipedia.org/wiki/User_expectations) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+co0mqsg) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+co0mqsg)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
&gt; If tuple syntax became a bit sexier (hint-hint, look at F#) then we wouldn't have to deal with this. i don't think syntactic sexiness is really the issue here - f(n) returns a list (e.g. "find prime factors of n"), or f(n) returns an object with several named properties (e.g. { longestRepeatedSubstring : "foo", mostFrequentSubstring : "az" }) are fairly self-explanatory. but both of these examples of "returning two things at once" are really examples of returning a single, meaningful composite thing. can you think of an example where returning a tuple specifically (e.g. f(n) =&gt; [output1, output2]) is the clearest way for a function to behave?
Could try creating a view with an insert trigger. Not sure of the performance, but it would be a single sql bull copy operation.
Yes, there is a many-to-many relationship between the 2 primary tables.
Ugh, I know that pain. One option is to not use Identity columns. If you use a GUID primary key instead, then you can create all of the keys client side.
That's what I'm using now but it doesn't let you specify a directory like in [the control panel](http://www.sevenforums.com/attachments/general-discussion/60231d1379278251t-remove-folder-desktop-background-directory-capture.png).
Man, it's been a while since I've felt like such an idiot. I've spent a few hours now, reading and watching tutorials and pouring over the example you made me, but I'm having trouble grasping a thing about this. I kind of get the theory behind it (I think), but I'm not following at all how it's supposed to be turned into code, or how I'm even going to adapt mine to conform to it. The tutorials with code examples to copypaste keep giving me weird errors, or they don't tell me where the code is supposed to be pasted, or the video tutorials do some logic leaps and leave me in the dust. It's also a bit frustrating that I don't even know what the problem is behind not being able to change the selectedindex of the list in my code. :\ I'll try to look over this again tomorrow with a fresh mind. For now I'm too exhausted.
I agree; the only problem would be if you wanted some weird TryParseNullable thing where null is a 'valid' value (in which case you really do want an option type around a nullable, but again that's quite a contrived situation!)
How does this mingle with best practices? Would you recommend avoiding ref or is there a particular situation where ref should be used?
By default SqlBulkCopy doesn't fire triggers; would just have to make sure to pass the proper flag. 
Not necessarily; by default Sql Bulk Copy ignores constraints. So as long as you're careful on what you're inserting, you can keep the foreign keys on there. 
I've never seen an application of them that didn't seem hackey.
Yes I see... That was basically telling me to ask myself for help.. weird
The various TryParse and TryGetValue methods are good examples of where out makes sense.
Please don't call it "SRP". That means something very specific and will just lead to confusion down the road.
Interlocked operations wouldn't be possible without `ref`.
I find it amusing that you use TryParse as an example when the link you posted explicitly says that is an exception to the rule.
This is the approach I've taken in the past (albeit before sequences were introduced) and it's definitely the best way to do it. I can vouch for the performance too.
Gotta love it.
My first try binding a dropdownlist to another model in MVC... this is using ViewData[]... Trying to do ViewModel now
Bad article. Uses the old (and known to be changed) syntax for two features, and does not even mention it.
Isn't there a decoration to pick a selectlistitem from an entire class so he can still point to the array of his class and it'll pick the relevant property for usage in the ddl ?
Not sure. It sounds interesting. Let me know if you find any examples.
Actually this is one of the methods i was talking about, However i might have skipped it rather vaguely... TLS requires me to set up a CA and give out certificates to clients and server. This is why i wanted to avoid that, because i dont have any way of doing this automatically or atleast my current skillset doesn't allow it. (I'm open for suggestions though.) This is why i was exploring the other opportunities. I'm surprised that more people don't run into this issue with Databases. Keeping things encrypted in transit.
Instead of Tic-Tac-Toe, how about a nice game of Global Thermonuclear War? 
You have 2 options; 1) Save the file to a place that the user running the application has access to 2) Save the file info into a data file e.g. XML and use that if you don't need the actual contents.
The user's files can be anywhere, even if I save the list in the sandbox folders, I can't be moving user's files. I hear you about the data, and I really hate doing that as I need the file icon... which means creating a lot of excess data. Drat. Thank you kindly for the confirmation of what I thought i knew.
Well it took some doing and to fit this in to how I've structured everything, it's really ugly, but I've got it working :)
/r/programmerhumor
1. Also upload your solution and your project, so it's easy to compile and run. 2. Line 8: A namespace starting with an underscore is extremely uncommon. You probably did this because it's followed by a number. How about Game2048? 3. Line 10: Don't omit the visibility modifier (public, private) etc. 4. Line 12: Also don't omit the visibility modifier for methods. 5. Line 14: Remove empty lines at the beginning of a code block like this. 6. Line 15: Use `var` instead of **repeating** the class name. 7. Line 23-24: Remove empty lines at the end of code blocks (I'll omit this now..). 8. Line 28: General rule of thumb is *one class/delegate/enum/struct per file*. 9. Line 31 &amp; 33: Never have public fields. Use properties instead. 10. Line 37: 0 is the default value of an int. No need to assign it in the constructor. 11. Line 38: You can initialize the random already with the declaration of the field. 12. Line 39: Don't use [Magic Numbers](http://en.wikipedia.org/wiki/Magic_number_%28programming%29). Instead add constants (FIELD_WIDTH, FIELD_HEIGHT). 13. Line 40: This line does absolutely **nothing**. Remove it. 14. Line 41 &amp; 42: Why do you call spawn twice? Comments! Easily looks like a mistake. 15. Line 48: Again, prefer `var` over repeating the type. 16. Line 46: The whole method is very confusing.. Add comments. 17. Line 48: The length of variable names should be according to their lifetime. Something short like in a lambda can be a one character name, something mathematically common like `i` and `j` is okay too. But `t` should definitely get a better name. 18. Line 60: Don't have a return statement like this in the middle of the method. It's very easy to overlook. Instead negate the condition and wrap the rest of the method in a code block. 19. Line 65: Use the [Ternary Operator](https://msdn.microsoft.com/en-us/library/ty67wk28.aspx) instead. `outNum = random.Next(0, 2) == 0 ? 2 : 4;`. 20. Line 65: Again, magic numers. What does `2` stand for? And what `4`? 21. Line 69: A string parameter that is a direction? Better use an enum. 22. Line 71: All your switch cases are equal, except of the `moveTile` method call. Why not just move the `Spawn` and `Draw` method calls after the switch? 23. Line 74: Don't put a conditional check and a code block on one line like this. Split it up on multiple lines. It's easy to overlook code like this. 24. Line 71: Your switch has no default branch. Add a default branch that will throw an exception, in case an invalid direction is passed. 25. Line 74: `3`? Why? Again, magic numbers. If you'd perhaps have some magically `FIELD_HEIGHT`, you could write `FIELD_HEIGHT - 1`. Then it would also be safe to increase the field size, without having to touch a million places in code. 26. Line 96: This method is too big. Split it up. 27. Line 96: Those are horrible and just plain lazy parameter names. Use expressive names! What's `xy`? Or `s`? If you look a month later at this code you won't know it anymore. 28. Line 98: A switch on an int that can only be 0 or 1? You're clearly misusing the type here. An enum seems a better option. Also, no default branch again. And both methods share a lot of code. 29. Now I'm getting lazy (most stuff is repetition), so a few last things: You're mixing business (game) logic and representation logic. You'd have one class that is responsible for keeping track of the board and making movements. You'd have another class that uses this board and just prints it out to the UI (e.g. the console). This way, when you decide to add a GUI, you can keep the game logic and just have to add another class for representing this board on the GUI. 30. Look up unit tests **now**. The earlier you start, the better. Your future self will thank you for it. Test whether the board initialization works, if the movement works correctly, if the spawn algorithm works correctly, etc.
so say we get 20-30 different inhouse library assemblies built and start using them in dozens of projects and grow more in future, do you have any good ideas on when changes to libraries need to be made, how you do know which projects need to be updated? Is there any kind of dependency tool which can help us know a library has changed, thus the following projects need to be recompiled/tested/deployed/etc. thanks.
Why do you convert the ConsoleKeyInfo to a string before testing it? That doesn't seem necessary, you could just code the switch statement to compare using the ConsoleKey enumeration. Your way causes memory allocation every time something happens; in this case, it's not a big deal, but it's not a good habit to get into. Further, you should try to restrict the domain of your arguments as much as possible, and converting to a string is the exact opposite of that, since strings can be just about anything. Something to consider (this depends on your preferences, goals, program size, usages..) I would consider having `Move()` take in an enumeration that contains only the four supported operations. Your input parsing code should translate input into the appropriate enumeration value. Now, more of your code is operating on restricted input, which is a good thing. In main: game.Move(cki.Key.ToString()); And the definition: public void Move( string dir ) { switch( dir ) { case "RightArrow": for( int i = 0; i &lt; 4; i++ ) { moveTile( -1, 0, i, 0, 3 ); } Spawn(); Draw(); break; case "UpArrow": for( int i = 0; i &lt; 4; i++ ) { moveTile( 1, 1, i, 3, 0 ); } Spawn(); Draw(); break; case "LeftArrow": for( int i = 0; i &lt; 4; i++ ) { moveTile( 1, 0, i, 3, 0 ); } Spawn(); Draw(); break; case "DownArrow": for( int i = 0; i &lt; 4; i++ ) { moveTile( -1, 1, i, 0, 3 ); } Spawn(); Draw(); break; } } 
First thing I noticed.. It is just one file. Not a very good way to get a clear picture of your project structure. I always stick to the 1 class 1 file rule.
Second thing, readability. Your methods are a bit too long and could be split up with some nice explainatory names. But the worst thing to comprehend for me now are your variable names. m, n, s? No idea..
Ok, third thing, apart from the things already mentioned by others. Code duplication. With some few slight modifications you could get the line count down by extracting some code in the moveTile and the removeZero method.
I have just seen a lot of people go back and look at code that works and pretty much say "Thats not how I would have done it, so I am going to do it how I want it done", wouldn't this also be disruptive?
I've got the list populating, however, at this point, selection for adding/editing a record is problematic: Int64 companyid = Convert.ToInt64(model.Companies.Single(x =&gt; x.Selected).Value); User u = new User(); Company c = new Company(); u.Company = c.GetCompanyById(companyid); This errors because by the time this is used, the Companies value in the model (the SelectList) is empty so it seems to be losing something in the ajax post... That'd be my guess anyway
And fourth: You can write multiple things per comment. You can even edit comments if you need to add something later.
I guess I have dealt with too many dicks that think they are top dog at programming, that would rather hurt than help someone, one of the reasons I try not to ask for help from anyone anymore. Of course you want your code to be nice, commented, modular, fits in a box, readable and useable for the next 100 years as you learned in college. When something breaks in business, and it needs to be done now, management overlooks how it was fixed (sadly), as long as it was fixed. But this in itself leads to issues of spaghetti code and random patches that no one has any idea what is going on. The merit of OP is not overlooked, its good he is asking for a deep look into what he needs to work on.
Git is better than Subversion from my experience. I created a single project with the namespace "Company.Team.Infrastructure" and put all of the common stuff we use into it. I use project folders to separate each area (networking, caching, database, etc), and therefore each area has it's own namespace. I wouldn't create an assembly/library for each area as it's more overhead to maintain than one project IMO. With a single project, you don't have that headache with dependencies. 
Happy cake day! I may have worded it too strongly, but you explain it well, We do care how our code is implemented. We try our best to get it right the first time. My experience from " if it works, no one cares how you did it" comes from later on when you have to add something or fix something _NOW_ because is effecting sales. You really want to comb through and take an extra hour on it, but you don't have an hour. It is not the programmers choice to improve your company's status and profitability (in my experience), you are just the guy that does the thing that they do not understand. 
&gt; Line 39: Don't use Magic Numbers. Instead add constants (FIELD_WIDTH, FIELD_HEIGHT). Nitpicking: In C#, constants should use Pascal casing, e.g. FieldWidth, FieldHeight.
Single Responsibility Principle.. ;-)
I think ReSharper specifies Pascal case for constants. Not sure about StyleCop, which seems to enforce quite a few rules which are outdated or just downright weird.
Yes, absolutely, but that's a different question. Needlessly rewriting someone else's code is a big problem. Not taking care writing it the first time is also a big problem.
The entire file is under 250 lines. I think this is a reasonable structure.
I get where you're coming from, *but* ... Not asking for help from anyone? That's a really bad idea. &gt; When something breaks in business, and it needs to be done now, management overlooks how it was fixed (sadly), as long as it was fixed. That's a symptom of bad management, though. &gt; Of course you want your code to be nice, commented, modular, fits in a box, readable and useable for the next 100 years as you learned in college. Sure, you learn that you should do those things in college. You learn *why* you should do those things in the real world. In particular, if you work for an organization or team that does things the wrong way, it quickly becomes clear *why* the "code first, ask questions later" approach is (often) the worst possible way to go about things.
Oh I definitely know where you are coming from with that- managers, salespeople/support people don't really tolerate extra time being spent to "do it right" because as far as their concerned it's just delaying the delivery. So then they file an issue with it, so you tell them, "yeah, we'd like to refactor that segment of code to make more sense, so it might take a day or two" and get told "we'll deal with that later, just fix it". That isn't saying that is a bad attitude from their perspective- it's entirely reasonable, because customers don't really care how clean the code is since they'll typically never see it, but often don't make the connection that a bit of work up front to make the developers lives easier will save a lot of time an effort in adding new features and preventing bugs. 
Apparently everything. You did everything wrong. I kid of course, it looks pretty good for your first C# program. But honestly, is this *really* your first program?
Thank you very much that works:)
If using *var* makes something hard to read, it doesn't belong there.
What's C# with it's standard framework?
Thank you everyone for your constructive criticism. Reading through the advice you all have given me has all ready made me better with C#. Once I have time to completely run through my code with the advice given I know I will be better at C# but also programming in general. Again thank you.
Where my unit tests at
The general consensus that I've found is that if it's a "given" then you can use var (e.g. `var list = new List&lt;string&gt;();`, `var matching = myCollection.Where(s =&gt; s.Value == "1");`) If the type isn't "given", then explicitly type it (e.g. `List&lt;string&gt; matching = GetMatchingValues("1");`) 
Yea I thought about that issue, but since this he had those values controlled and coming through one of his functions, I assumed it would be safe enough for him to learn. I've broken enough enums to be wary.
@9: why that? Can you provide a resource for that? I always thought that properties are semantic elements that **enable** one to use fields at first and integrate more functionality later on without breaking the API.
I find that var is only appropriate when using a fully qualified namespace on the right hand side of the operand, and then typically when that namespace is a mouthful. Otherwise I personally like to see the class. As does my boss.
Its popularity and its 'cover-all-bases' (multi-paradigm) approach. That being said, I think there are better languages out there but they're niche, and therefore not worth investing time in. C# also has some nasty edge cases and stupid design decisions which annoy me a lot.
Dev tools
Impressive list. Personally, I don't mind `return` in the middle of functions, but that I've seen pros and cons for both.
I love extension methods and LINQ; I'm looking forward hopefully to the prospect of C++ allowing overloading of the member operator, allowing similar implementations with the same elegant syntax.
C# has a lot of the things I disliked Java for not having. Unsigned types, value types (structures), operator overloading, delegates, real generics (instead of type erasure). Windows GUI development was always a breeze, but that has more to do with the IDE than the language. The familiar form designer made it easy to transition from VB6.
Small FYI, you can wrap SmtpClient and MailMessage in a using block using (var smtpClient = new SmtpClient()) { using (var mailMessage = new MailMessage()) { // stuff } } Or you can stack using (var smtpClient = new SmtpClient()) using (var mailMessage = new MailMessage()) { // stuff } You can also initialize the object beforehand: var mailMessage = new MailMessage("sender@blah.com", "recipient@blah.com") { Body = "body", Subject = "test" }; using (mailMessage) { } I typically do something like this (logically, codewise I usually build my own objects so I can be a bit more flexible with our requirements): using (var smtpClient = new SmtpClient()) using (var mailMessage = new MailMessage()) { mailMessage.To.Add(new MailAddress("to")); mailMessage.From = new MailAddress("from")); mailMessage.Body = "body"; mailMessage.Subject = "Subject"; smtpClient.Host = "blah"; smtpClient.Port = 25; // blah blah smtpClient.Send(mailMessage); } Just an FYI on using ... **using** Not intended to be the ultimate answer. :)
I personally think the "never use public fields" is bullshit. If your property simply has a getter and setter for a private field with zero extra logic then there is no logical reason that I see to have that property. If you are only wanting to partially expose a field or have some logic you want for handling getting/setting then properties are fine. I personally only use properties when I really have to but I know a lot of people would disagree with that.
If they're global in a large solution (e.g. string/number constants used everywhere), they should probably be all caps. That's been really helpful.
If you use a public field and wish to add logic later on, it is much harder and requires a bigger refactor. It's practically impossible if building a library that is used by people other than you. Using Properties instead hides the implementation, and is a good habit to get into.
&gt;Line 46: The whole method is very confusing.. Add comments. In my opinion, if the code isn't readable and you think it needs comments, then that means the code needs re-factored to become readable. Would rather he/she change it to make the code more readable/understandable than to add comments. People maintain code, but they rarely maintain comments - usually make the comments obsolete later on.
I think that make sense when you're not going to be looking at it via VS IDE. Something like a review over the web as is happening now. If you're in the IDE, mousing over GetMatchingValues will give you the type the method will spit out. But if it will only ever live in the IDE, there is so much meta data there to help you, it's like people don't want to use it.
Thanks for sharing! That was very brave of you and will certainly help many others to learn reading this thread.
C# doesn't have a standard framework. C# is a grammar. .Net has a standard framework (class library). [Read this](http://www.reddit.com/r/dotnet/comments/2t5ozl/what_is_net/cnw8vgz)
Also if you ever want to expose those fields via an interface you just can't. You have to convert to properties.
&gt; Line 46: The whole method is very confusing.. Add comments. Or, better yet, refactor the method into separate methods that do specific things and give those methods good names. There's a few things in the list I take some exception to but, overall, good job.
Or even better: collection of your own DTO/POCO and then add a helper method that converts your DTO/POCO to a `List&lt;SelectListItem&gt;`. example usage: @MyHelperClass.ListOf&lt;MyModel&gt;((MyModel[])ViewBag.mydata); I saw Scott Allen do it something like this (not as generic though) in a video I saw while studying ASP.NET MVC.
If it makes it harder to read, then don't. The golden rule is never use it for built-in types (int, object, bool) including nullables. The only acceptable uses to me are situations like the following where the class name is already explicity shown and `var` begins to improve readability: var data = new Dictionary&lt;string, List&lt;int&gt;&gt;() 
Like I said, it makes it very easy to overlook. Your method should ideally just have one exit point. The exception are very short methods (e.g. 5 lines) or when you exit at the beginning of a method because some states are not given (and you don't want to throw an Exception).
This is absolutely true.
The problem with that trick is that you are still doing effectively a return, just wrapping it in a construct that is uncommon to most developers. It's a way of following the letter of the rule without refactoring or reorganizing the code. I'd rather see the code decomposed or reordered than something like that.
If you later want to add access logic to this field, then.. well.. You can't. It's impossible. You need to refactor it to access methods or properties. This takes a lot of work and it breaks downward compatibility, as the binary interface of your class changed. Extending the getter or setter of an auto-property doesn't do this. Also, using properties costs **nothing**. You also can't expose fields via interfaces.
And I learned this from painful mistakes in the real world. ;-) Chance is you should refactor the method if you think a return statement somewhere in the middle of the method is a good idea.
I disagree. A method should exit at the earliest convenient location. Early returns reduce nesting and mutations. If a code reviewer misses a return then it's hardly the fault of the developer.
It requires everyone using it to recompile, it can mess up reflection, and I am guessing that it also breaks anything that has gone through ngen.
The client had the old version without the logic underlying the datum; if they want to use the version with the logic they'll probably have to recompile anyway unless they're doing dynamic assembly loading. Points taken re reflection and ngen.
Do you need transactions with SQLite? I'm not saying that they are a bad thing, but it seems to me that they would be overkill for most scenarios where SQLite would be appropriate.
Absolutely. The name of SQLite is a bit of misnomer. The current project I'm using it for will require tolerance of local databases in excess of 10GB. I ended up going with it as it was showing the best performance of the solutions I tested. Ease of redistribution is also a huge benefit as it's serverless. In terms of websites, the selected answer here is as apt as it is amusing: https://stackoverflow.com/questions/54998/how-scalable-is-sqlite I think a lot of devs probably get a bad impression from it since the default settings are all but completely unusable. As in using the default settings vs very basic optimizations, like using transactions, result in a difference in speed by order of magnitudes.
Care to write an article on how to setup SQLite correctly?
A huge chunk of what I know about SQLite came from [this question](https://stackoverflow.com/questions/1711631/improve-insert-per-second-performance-of-sqlite). The author there goes from the default settings, getting a whopping 85 inserts per second, to more than 96,000 per second after applying a few pretty straight forward optimizations. If you do wish to pursue an article on it, I'm sure he'd be a far more appropriate and deserving writer than myself.
 public struct Foo { public int Value; } public unsafe void FooFunc() { Foo[] arr = new Foo[1024]; fixed(Foo* ptr = arr) { } } edit: the reason for this is that Arrays are garbage collected and may be moved by the garbage collector at any point. So you need to make sure that the GC does not move it while you are using a pointer to the array. You can also use System.Runtime.InteropServices.GCHandle for this. var handle = GCHandle.Alloc(arr, GCHandleType.Pinned); // Pinned is important or the object can be moved by the GC. var ptr = (IntPtr)handle; try { // Use ptr } finally { handle.Free(); } The try...finally is important.
I think "one exit point" originally meant, for example, that your return statement(s) should always return *to* the point where the function was called, not that there should be just one return statement. The rule is commonly misinterpreted because high-level languages make it difficult to jump out to some random instruction. Exceptions would be an exception to this, as well as continuation passing style.
No, it really means where your method terminates. Having multiple return statements makes it more difficult to follow the flow of the method. Also it indicates code smell.

I thought LocalDB could be used as an embedded database for an app. Should I instead use SQL Server Compact Edition for installing with the application?
By and large I agree with you. But I actually like the CONSTANTS_WITH_UNDERSCORES convention, because it denotes a constant (and not just a readonly).
You are right. Without it it would only keep the object from being collected.
I am currently doing x64 only due to my programs large ram requirements. But flipping back and forth is only 2 clicks away. Or "Any Cpu"
Same here. If I posted my "first" program it would be as pristine as my current knowledge would allow. However if I posted my *first* program I'm pretty sure a few of my fellow programmers would simply lay down in the corner and rock back and forth until they starved to death.
So I can install a 64 bit version of the database software on my laptop and the embedded database file will still work OK on a 32 bit computer? Should I use SQL Server Compact Edition or LocalDB (I've read LocalDB can be used as an embedded database but I've also read it can't be used that way).
What naming conventions? The Microsoft one? They don't say anything about constants.
They talk about static readonly fields, and they mention PascalCasing for most things. ALL_CAPS is never recommended in their guidelines. The .NET Core team also uses PascalCasing for constants ([source](https://github.com/dotnet/corefx/issues/509)).
I've never had to deal with this issue myself, but off the top of my head a work around might be to use the native windows API's as opposed to the built in .NET Framework registry features. Did you browse pinvoke.net? The [RegOpenKeyEx](http://www.pinvoke.net/default.aspx/advapi32.regopenkeyex) method seems like a promising place to start. Good luck!
 &gt; So I'm fairly convinced the vast, vast majority of objections are just aversion to something new and not borne of experience with actually doing it I agree, and I feel like I could make this argument for a lot of different code conventions/styles. People usually prefer what they're used to.
[Dead horse!](http://www.reddit.com/r/csharp/search?q=c%23+6&amp;sort=relevance&amp;t=all)
What do you mean, 'mark values as selected'?
well when the form is posted, all the values to do with the dropdownlists come back as null so either there's something very wrong with the model or the options for the dropdownlists aren't properly being selected... Here's my code in it's entirety: http://pastebin.com/a60aLEcL
http://stackoverflow.com/questions/19476530/html-dropdownlistfor-selected-value-not-being-set EDIT: Google is your most best friend.
Thanks for that. Going by that link it looks like I'll need to use SQL Server Compact Edition to make an embedded database file to be installed with a desktop app.
I hope you check out the comment tree started by /u/willie2's reply; I found it pretty convincing.
&gt; Who just replaces a direct dependency without recompiling? NuGet does.
Having said that, I've since looked at this: http://erikej.blogspot.sg/2011/01/comparison-of-sql-server-compact-4-and.html I see SQLite has a maximum database file size of 140TB while SQL Server Compact Edition has a maximum database file size of 4Gb. Although I'd have to wonder if SQLite has compatibility issues with C# compared to SQL Server Compact Edition.
Maybe I'm just weird or something, but I unconditionally recompile after changing or updating NuGet references in any way. I fully expect updating a NuGet reference to possibly change the meaning of my program, and that's a recompilin'.
Can't agree more. Adding either CodeRush or Resharper makes C# the most productive language ever. In many languages, something as simple as renaming a type, variable, function name is a risk - it may miss something. I have complete confidence that I can make massive changes, and, do to the strong type system used by .NET, I have 0 worries about a bug being introduced. 
Something that is very trendy right now is semantic versioning. If you change the binary compatibility this also means you need to change the minor version, instead of just changing the patch number.
Now I'm not a Sharepoint Developer but can't you just use the using {} keyword to have dispose automatically called when you don't need it? 
This might be more than you're looking for, [but there was a study done against Github on programming languages and code quality](http://webcache.googleusercontent.com/search?q=cache:0EticyDacHgJ:macbeth.cs.ucdavis.edu/lang_study.pdf+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=us). It compared features like weakly/strongly typed languages, object orientation, static/dynamic typing, managed/unmanaged memory, etc. The paper concludes that a strongly typed, strictly object oriented, static, managed layout is the best, and C# does all of these well. You will notice, having moved from Python/C++/Java, that you write cleaner code. Having .NET, Visual Studio, and IntelliSense at your disposal are also godsends. The only issue I have witnessed with C# is the cost of developing in this language, since you would have to purchase the full Visual Studio license to be able to fully leverage the tool.
You're right, you absolutely can. The issue is knowing which objects you need to utilize the Using() statement with. I know which to use it against now, but it's seems like something inevitably new developers will get wrong at some point.
Yep, that's what is supposed to happen. If you want to access he 64 bit registry you are supposed to run it as a 64 bit application. 
You go through all projects depending on your library, recompile them and publish new nuget packages? I sure as he'll don't. I just try to remain binary compatible at least on revision and minor versions. It might not be obvious if you work in smaller departments, but breaking binary compatibility can poss a lot of people off.
I think the issue is new dev's need to have it hammered in their heads that they **need** to read the documentation on the objects they are implementing, or at least if developing in Visual Studio see if the Dispose method is on that object. 
It looks like our organizations are set up pretty differently, so what I say here might not be terribly useful for you. But on my end, publishing a new NuGet package for a library isn't onerous at all; it happens after every checkin via CI. Client projects may update their NuGet references at their leisure (with some critical exceptions that are communicated explicitly by email), but when those references are updated, the client is recompiled (again, no biggie with CI). A key part of this is that transitive dependencies are rare! Who knows how that will change as adoption of NuGet improves throughout the org...
Ah well I'm much, much closer to this working than I was but now when I try to add the new user to the database, I get this... &gt; An entity object cannot be referenced by multiple instances of IEntityChangeTracker.
There's no way for me to know what going on here. Shot in the dark, make sure you're not using multiple DbContext's. 
Finding this academically interesting, is there a practical use for this? 
Your crud functionality would go into a repository, look up the repository pattern. The repository would then be injected into your controller so it could be used to perform crud operations.
If you plan to use the results of the query for further processing like you say, and don't care about uniqueness (since a list of lists wouldn't give you that) I would suggest looking at data flow: https://msdn.microsoft.com/en-us/library/hh228603%28v=vs.110%29.aspx It provides a convenient method of grouping common logic and controlling the parallelization of data processing.
That's pretty much how my controller is set up, but I leave the database work to wrappers that the model interacts with (controller interacts with the model) but I'm starting to understand better how the structure should work
It depends what you mean by uniqueness -- I do need every collection of events to contain all the events from one session, and no events from any other session. I just don't need to have those lists indexed or ordered in any particular way, because I'm going to process them all regardless. Thanks for the link, I'll read through that this afternoon!
It's hard for me to tell what's going on without seeing more, but the error is telling you that you have instantiated multiple DbContexts. You get the entity with one and are trying to add it to another one for update. It can't track the entity across separate contexts. I don't understand the wrapper thing you have going on. Probably should be doing this kind of work in the controller or service layer... check out implementing repository and unit of work patterns.
this this this! [The Repository Pattern](https://msdn.microsoft.com/en-us/library/ff649690.aspx) is what he's talking about.
Take a look at Jeff Palermo's [Onion Architecture](http://jeffreypalermo.com/blog/the-onion-architecture-part-1/). Generally, here's how we structure our solutions where I am (keeping in mind that this would be *significant* over-engineering for small projects): **Solution** * **Project**: Core (POCO models, interfaces) * **Project**: Infrastructure (EF fluent configuration and contexts, logging, etc.) * **Project**: Services (specific business logic implementations of generic DbContext methods; we use our own IDbContext here to facilitate IoC) * **Project**: API (WebAPI wrapper around services) * **Project**: UI (front-end, view models, etc.) All of the dependencies are then injected into the composition root (the UI application) with Unity.
Separation of concern, and to better organize your code, dbcontext is not the neatest thing and no sense cluttering your controller with that nonsense.
Separation of concerns.
Can you elaborate? From the [DbContext documentation](https://msdn.microsoft.com/en-us/library/system.data.entity.dbcontext%28v=vs.113%29.aspx): &gt;A DbContext instance represents a combination of the Unit Of Work and Repository patterns such that it can be used to query from a database and group together changes that will then be written back to the store as a unit. `DbContext` *is* a repository.
Mostly when copying data or during P/Invoke, I find. For example, if you want to copy an array of structs (e.g. an array of ints) to some other location in memory; or if you want to pass an array of structs to a C++ function. Here's an example from my open source game 'engine' (a WIP), where data must be pinned to copy it row-by-row in to memory-mapped GPU RAM: https://bitbucket.org/OphidianGames/losgap/src/default/Rendering/Resources/ResourceTypes/Texture2D.cs#cl-292 
Sorry I meant other versions of Windows such as XP, Vista and 7.
Separation of concerns. Here, all of the stuff that goes into supporting the DbContext (defining entities, DbSets and such) sits in the repository layer. That way the Repository layer is only concerned with implementing the repository, and the Business (logic) layer doesnt get cluttered with any of that cruft. It also makes it so that we can use multiple types of repositories without modifying business code. If I wanted to switch from SQL to NoSql, for example, or switch from EF to Dapper, I'd just define or update a few repository implementations and off I go. Business layer is completely unphased by it.
Uh, ok, there's some red flags with this. The static class is completely unnecessary. I'm not sure why you're bringing up reflection. Do you use stack overflow? 
I just discovered this. I wanted to check what DateTime.Today returned, specifically the time. Very simple and straight forward to use. Now I don't have to create a whole program to test something quick.
Nothing personal with the downvotes mate, but for windows platforms you have the .net framework which is in place for just this type of scenario. 
If you'll permit an off topic question, why would you need a sharded sql database; or to phrase it differently, why would you need more than one? Note I'm not trying to a peckerhead or anything, I just work with DBs a lot and I've never seen this before and am intrigued. Would it potentially be so you can have seperate but identical environments? Like a test, preprod and production environments?
Have you tried using [LINQPad](http://www.linqpad.net/)? It lets you whip off tiny scripts (expression, statements, or full program) along with other benefits (database connections, extension methods, saving/loading from your file system) It's not a REPL by definition, but I find it more useable than a REPL and with just as little overhead of a REPL.
As someone with a C# .net background who's now doing a side gig that involves netbeans as an IDE, it's refactor tool scares me. 
The terse generic syntax (and inference of generic types a la LINQ) means that libraries in C# can quickly start to look like domain specific languages. The reusability of C# code means you can avoid a lot of cluttered-looking code.
no client errors
So I wrote the below when I first read your comment and I totally misunderstood what you were getting at. The garbage collector never calls dispose, ever. It calls Finalize Also there is no guarantee when it will call Finalize. It could call it when the object goes out of scope, it could call it 100 years from now. As I state below just always use a using statement. Some official material on the subject [System.IDisposable](https://msdn.microsoft.com/en-us/library/system.idisposable.aspx) [Garbage Collection](https://msdn.microsoft.com/en-us/library/0xy59wtx.aspx) [Finalize](https://msdn.microsoft.com/en-us/library/system.object.finalize.aspx) ##Original Comment So the **using** statement automatically calls dispose when you exit it's scope. [Using Statement Documentation](https://msdn.microsoft.com/en-us/library/yh598w02.aspx) using(var foo = new Foo()) { foo.bar(); } is equivalent to: var foo = new Foo(); try { foo.bar(); }finally{ foo.dispose(); } It always calls dispose on anything that is in the using statement, in C# you can even have multiple using keywords together. So you can do using(var foo = new Foo()) using(var bar = new Bar()){ foo.bar(); bar.baz(); } which is equivalent to var foo = new Foo(); var bar = new Bar(); try { foo.bar(); bar.baz(); }finally{ foo.dispose(); bar.dispose(); } I should add that using the **using** statement is the recommended way of handling of dispose, it's the best practice. 
If WPF is the direction you want to go, then I'd recommend breaking into smaller pieces, tackling each one separately: 1. Build generic WPF controls that will render notes, staffs, bar lines, rests, accent marks, etc. Make it generic enough that you can come up with your own controller containers (not the right term, haven't done WPF in a long time) so that they will render the way you want. Pseudo code: &lt;song auto-wrap-lines="true" lines-per-page="10" time="4/4" cleff="treble,bass"&gt; &lt;measure&gt; &lt;note type="quarter" position="0" note="E4"&gt; &lt;note type="quarter" position="16" note="E4"&gt; &lt;note type="quarter" position="32 note="F4"&gt; &lt;note type="quarter" position="64" note="G4"&gt; &lt;/measure&gt; &lt;measure&gt; &lt;note type="quarter" position="0" note="G4"&gt; &lt;note type="quarter" position="16" note="F4"&gt; &lt;note type="quarter" position="32" note="E4"&gt; &lt;note type="quarter" position="64" note="D4"&gt; &lt;/measure&gt; &lt;measure&gt; &lt;note type="quarter" position="0" note="C4"&gt; &lt;note type="quarter" position="0" note="C4"&gt; &lt;note type="quarter" position="0" note="D4"&gt; &lt;note type="quarter" position="0" note="E4"&gt; &lt;/measure&gt; &lt;measure&gt; &lt;note type="quarter,dotted" position="0" note="E4"&gt; &lt;note type="eighth" position="24" note="D4"&gt; &lt;note type="half" position="32" note="D4"&gt; &lt;/measure&gt; &lt;/song&gt; I'd recommend reading up on the MIDI spec, and making the XML-markup as close to the MIDI standard as possible. This will make rendering MIDI -&gt; WPF much easier. 2. Create a module to parse the MIDI and populate a custom class/container that will store the note data. 3. Build the binding so that container with the notes can data-bind (or such) to the WPF controls. AKA: Write a method that will dump out the appropriate WPF tags that will render with your controls all the notes, etc. 4. Create a module to capture user interaction for editing the notes, etc. This will simply update the container data with the user edits. 4. Make the container that holds the notes serialize back to MIDI (for saving it to disk). Soon, .NET will work on ANY platform, natively. It will be a little more work, but your app could potentially render on Android/iOS/Linux/Mac and Windows.
There are [articles](https://msdn.microsoft.com/en-us/magazine/ee336028.aspx) out [there](http://www.codeproject.com/Articles/141617/WPF-Midi-Band) that [will](http://mark-dot-net.blogspot.com/2008/06/creating-piano-roll-control-in-wpf.html) give you [some](http://www.codeproject.com/Articles/6228/C-MIDI-Toolkit) sample [code](http://sourceforge.net/projects/midisheetmusic/?source=navbar) to [get](http://mark-dot-net.blogspot.com/2008/06/creating-piano-roll-in-wpf-part-3-data.html) started ...
I can easily believe .net getting native on more platforms, but has anyone talked about porting WPF?
Could be either a multiple choice technical test, or they will give you an hour to write something basic. Maybe some math algorithm to skip characters in a string, or a bank application where you make classes for different functions. I would maybe have that generality of what the company does, or if it's a consulting company, it could be a technical screen. Have you looked at glassdoor.com and see if anyone wrote anything about the company? Sometimes you can get feedback on interviewing for what you're applying for.
Given that WPF is a native part of .NET, I would assume that would be ported too, but I could be making an ass of u and me. ... looking at the MONO project, they say: &gt; At this point, we strongly suggest that users interested in WPF adopt Silverlight instead as it can now be used outside of the browser and offers a rich set of cross platform APIs and features. And also: &gt; Silverlight does not have all the capabilities of WPF, but both technologies are converging API-wise. So, in time, WPF and Silverlight may become almost one and the same, calling the same APIs. 
First question: are you using any form of ORM? Second question: are you trying to use any form of replication? &gt;If I were to choose SQLite would I encounter problems with code compatibility or would it be simple to use SQLite with C# code? It's very simple to use SQLite with C#. For simple ADO.Net stuff just pull down the x86/x64 package from nuget and go to town. SQLite can handle many-to-many relationships. We actually use databases well over a few gig at work without any real hiccups. We've moved away from SQLite as of late to sqlserver to take advantage of some more powerful stuff like stored procedures and merge replication. Here's a good faq on when to use SQLite: http://www.sqlite.org/whentouse.html 
Forgot to ask. you think there is gonna be a Database Connection in the test? 
I doubt it. They may ask about things like entity framework, etc. The job description should guide you. Good Luck!
thanks dude.
I'm not using an ORM and I don't know what replication is so I'm not using that (I'll google replication). Thanks for the link.
Not unless they have dramatically improved it since circa 2010.
It doesn't have anything to do with CI unless your organization's build server updates references automatically. This is the same issue as changing the return type of a method. It may only require a recompile but you cannot assume that everyone is always up to date on every library they depend on. What if JSON.NET changed a property into a field. If you then update JSON.NET MVC, Web API and a ton of other libraries would break and so would your application regardless if you recompile or not.
There must be some misunderstanding about what we're talking about re references, but it's probably not worth hashing out because I no longer think that exposing fields rather than properties is an idea worth more consideration.
Interesting that array segments are discussed with no mention of ArraySegment&lt;T&gt;
It usually depends on the context. Parameters, variables, and fields are usually "camelCase", means with a lower character first. Properties, methods, classes, enums, delegates, namesapces and pretty much everything else is named PascalCase.
 // Controller public class UserController : Controller { private readonly IUserContext _userContext; public UserController(IUserContext userContext) { _userContext = userContext; } public ActionResult User(int userId) { var user = _userContext.Users .FirstOrDefault(u =&gt; u.Id == userId) .Select(u =&gt; new UserViewModel { Name = u.FirstName + " " + u.LastName }); return View(user); } } Fixed that for you.
He mentioned `DbContext`, which is already a repository.
I don't know what to ask and very often I don't understand explanations given... Reddit lends itself better to such discussion anyway
Not willfully... I have a hard time "book learning". I learn much better by example and trial and error... This isn't understood/accepted on IRC... I feel like I'm magically supposed to understand what I'm being told there...
Nope. You're expected to think for yourself, not being spoonfed. :-) That's something you magically don't understand.
I've always used caps for constants, myself. A style carried over from using #defines in C++. :P
I gave you plenty of information already what you did wrong and gave you links to information on how to do it right/better.
I am still hoping for Option types.
I'm not familiar with Pattern Matching, can you provide some examples of how it's used? Is it similar to Regex but built into the language?
I used to believe this as well but my current employer uses it extensively. 99% of the time, you can easily tell what it is as others have mentioned. Since var is used in the local scope and methods are typically well specialized, its usually easy to derive its type. Some exceptions are numerical values...
In principle I think you're right about sharding by SessionID being less ideal, but I think it works in this particular instance because the vast majority of sessions will have few events (probably less than 10). If the app ever reaches the scale it's being designed for, heavy load will take the form of lots of sessions with few events each, not a few sessions with lots of events, so the load should still get distributed pretty fairly most of the time. In addition, this same database is being used to track whether a session is alive (based on how recently we've seen an event for that session). So if we allowed the events from a given session to be spread across different shards, then we'd have to aggregate data from multiple shards in order to figure out which sessions have expired, then query all the shards again to get the events from the expired sessions. When we shard by SessionID, we can just query each shard once to get its expired sessions and their events.
&gt;So in the above examples hd md and tl represent items in a list? Yes. hd and md would be single items of type T (let's say this list is generic) where as tl is a List&lt;T&gt;. Hd is traditionally used to signify the head of the list and tl is used to signify tail of the list. So for a concrete example, lets say we have a List&lt;int&gt; in a variable lst; List&lt;int&gt; lst = new List&lt;int&gt; {1,2,3,4} When we go to match this, it would hit the first pattern and we would have hd = 1, md = 2, tl = new List&lt;int&gt;{3,4} Now, the area where doSomethingWithMoreThan2Elements would have access to the locally scoped variables hd, md and tl. Our variable lst would look like: {1,2,3,4} because this is non-destructive to whatever structure you use. &gt;And what does :: signify is it just a way to specify the seperation of items in a list? You are correct, it is a separation in the list. &gt;I can see how useful this would be though. The beauty is that there is so much more too. Even a trivial example can be useful. We can use pattern matching to make a simple method that adds together all of the even numbers in a list public int AddEvenSums(List&lt;int&gt; lst) { return AddEvenSumsInside(lst,0); } private int AddEvenSumsInside(List&lt;int&gt; lst, int sum) { match lst with | hd :: tl where hd % 2 == 0 -&gt; AddEvenSumsInside(tl, sum+hd); | hd :: tl -&gt; AddEvenSumsInside(tl, sum); | hd where hd % 2 == 0 -&gt; return sum + hd; | _ -&gt; return sum; } The patterns are evaluated in the order that they appear. So we can put constraints using where at the top and then have a fall through in the case the constraint isn't met. There is also a wildcard that matches anything, which would have to be put at the end or else you'd never see the other cases. You can think of pattern matching as a more complex switch. 
I've never used it, but supposedly you can replicate (synchronize) data between SS CE and SQL Server using their APIs.
Yeah that's awesome, I think they should add that. Although I can just see the heads exploding now at my office if I were to ever use that. There is enough people that have a hard enough time with yield keyword, and lambdas.
Option becomes less important if the compiler generates null-tolerant patterns.
It was the first comment.
How would a native CLR construct be different than a type? I think they were talking about a language construct which wraps `ArraySegment&lt;T&gt;` to make it idiomatic to use in the language.
&gt;How would a native CLR construct be different than a type? The CLR construct will be more efficient since the CLR can express guarantees in native code that the C# type system cannot.
Cheers. I've spoken to a member of the dev team (I'm picking up the project), and have asked how they've done it in the past. Turns out there's a library they wrote some time ago that navigates this issue by using COM calls, so will be using that instead. Sorry I haven't had to work anything out!
Such as?
Maybe you could look into an open source TFS task -&gt; Outlook task integrator? If you have the time - hell the world needs this!
The C# type system largely *is* the CLR type system, and there are no guarantees that can be made in "native code" which aren't already there and exposed in C#. I'm not clear what specifically you are talking about.
The download page says my email is invalid when it isn't. 
[This](http://stackoverflow.com/questions/5282999/reading-csv-file-and-storing-values-into-an-array) seems to have several comprehensive solutions.
Thank you.
Ok, yeah I got it to work. Thank you. Will google more thoroughly next time =)
I think you need to get in the habit of exploring different projects and a lot of those are easy to find on github which matches your skill level.
Direct link: http://www.telerik.com/docs/default-source/whitepapers/developers-guide-dotnet.pdf?download=true
https://www.nuget.org/packages/CsvHelper/
The stream won't close unless you close or dispose it, nothing to do with passing it as a ref param. 
(not op) Never used tfs before but i might give it a shot. Just to be clear, you want to be able view your tfs tasks in outlooks tasks view, right?
I don't think you can pattern match on a null-tolerant type, can you?
I suppose you could survive using delegates, but it would be a pain doing away with closures. Unless they also can't figure out delegates...
For future reference: csv is Comma Separated Values, not Excel. Whatever you do, don't write your own parser!
And while we're at it. Excel is also not a database.
But I use it as a base for all my data...
What are contracts? 
I've been using this library lately, and it's been really easy to get running with.
I've used FileHelpers in the past. Really easy to setup. https://github.com/MarcosMeli/FileHelpers
I didn't think about salting, duh, I don't do much authentication stuff obviously. The right way to do it would be to query the user by email address only. If that doesn't return anything you throw/add an error and re-render. If it does return a user get their salt and hashed password (you should be using a different salt for each password and storing it with the user record), then make your call to the verify password method passing the salt, the password they entered, and their hashed password. The verify password method should hash the password they entered using their salt, then make the comparison. If they don't match, then throw/add an error and re-render.
How are you trying to get the color to match in the loop? What is your end goal exactly? I understand you are trying to match current color (Black) to (Red) but the only way for the two colors to match is to have the same **ARGB** values. Are you trying to get a average value? So you will have to do something in the for loop to modify these values. currentColor.A = Color2.A; //etc.... or simply currentColor = Color2;
Even more thoroughly than this? http://www.lmgtfy.com/?q=C%23+csv That's gonna be way too comprehensive
Nice tuto. One thing, it will better to put display name in resources file which properties name are entry.
Ah.. I was only using it so I could examine the cache anyway, so I'll just stop worrying about it. Thanks! 
&gt;Asp.net is a older technology that is being replaced by MVC. ASP.NET MVC does not replace ASP.NET, it is a part of ASP.NET. The name for the outdated technology to avoid in this case is "WebForms".
My benchmarks are showing my implementations of rjbwork's suggestion to be about 2x slower than my initial Parallel.ForEach thing (details in my latest reply to him, above). If you can point out what I'm doing wrong, or have any other suggestions, please fire away. :)
Using will make sure to call dispose on the object no matter how the execution leaves that scope - by continued execution, return statements, or exception. Also, using will null out the referenced variable too, so that the object can be reclaimed as soon as possible, for instance in a method that might run for a macroscopic amount of time. 
Yes, I'm going to start "using" it, It looks good. 
I think it's pretty good. Well done.
In the top right corner of the file window you have open, click and drag the button down to create a second view of the file that can be viewed independently of the original 
You've got a get that should be a function! Getters get values. They should never be used as a replacement for functions. Write a function to get your user don't use a property for it.
Well Mono should update their documentation, since Silverlight is all but dead now. &gt; In 2013, Microsoft announced that they had ceased development on Silverlight except for patches and bugfixes. Microsoft announced the end of life of Silverlight 5 in 2021. As of 2015, Chrome no longer supports Silverlight on OS X, and will completely remove support for the current version by April 2015 on all operating systems [Xwt](https://github.com/mono/xwt) would probably be your best bet for a cross-platform GUI right now. 
As someone who just started learning ASP.NET, why is it becoming outdated in comparison to ASP.NET MVC? And do you have a good book to recommend, by any chance? EDIT: Would it also be useful to just learn both WebForms and MVC variants? I am doing some research on ASP.NET MVC now but most of the discussions seem to lean towards WebForms still being extremely popular and will be so for quite a long time AND can coexist with MVC, but there is an undisputed belief that MVC is better than WebForms. I know this topic is extremely off-topic, sorry!
If your statement uses a?.b syntax, then yeah I guess that'd work. Though, Option types would allow you to handle the case differently when there's a null and when there's not. I suppose a case statement with a condition on null would work, but then the null tolerance isn't needed for the object you're matching on. I think null tolerance is a safety net against possible null references, whereas Option types clearly define existence in a non-null and type safe way.
Don't reinvent the wheel, especially not the way you have suggested. Splitting the line by comma won't work. If you have a value that should contain a comma then the value will be enclosed by quotation marks. There are a few other edge cases like this, lots of other people have built perfectly good csv parsers. Use one of them and don't add a half broken one to the mix.
Good resource. Thanks.
http://www.wpf-tutorial.com/list-controls/listbox-control/
I read "Professional ASP.NET MVC 3" about 3 years ago but it seems liek there is a [MVC 5 version out now](http://www.amazon.com/Professional-ASP-NET-MVC-Jon-Galloway/dp/1118794753/ref=sr_1_1?ie=UTF8&amp;qid=1422556815&amp;sr=8-1&amp;keywords=asp.net+mvc). To your question about why is asp.net webforms becoming outdata. While there are many reasons I think the biggest is that MVC as a design pattern works *really* well web appplication development. Webforms is a great technology but it tries to enforce a stateful design pattern on web development which can make development harder. Stateful design patterns are better for desktop applications where as stateless applications are better for web applications. Lastly with MVC works better with a lot of the javascript frameworks out there that webforms really struggled to ingrate well with but a lot has been improved to fix this. 
If you don't want to be helpful, don't say anything at all.
I'm such a bad....
Just a general guideline, if you are tempted to copy/paste some code and switch around the variables more than twice, refactor to code to it's own method. It would be a really good exercise for you to try to do that with this project
Sorry, I was thinking that $TerminalServicesProfilePath was an argument you were passing. I don't know that much about ADs but one thing I would try to check what would be different between the two environments (the one started by your c# app and the VBA script). Check things like $env:userName (maybe the webservice is running under another user which doesn't have priviledges?), other environment variables, local path? 
You can also Ctrl+Click in VS2013 up. Below that it just navigates to definition.
Are you providing any kind of data template to the listbox on how to render your collection of items? If not I think you're seeing the fallback behavior of just showing what comes out of the .ToString() method. The link does show an example of how to make a simple template. Otherwise, you would have to provide a ToString() implementation that trims to your liking.
Right, and all of that (except tail calls which aren't really something you access directly in C++ anyway) are not CLR features, but compiler features.
But if we coalesce null with Option.None at the level of the compiler, then there is effectively no difference. The compiler could even auto apply the `?.` when it does (explicit or implicit) null tolerant pattern matching.
Sorry to shoot back more questions, so what I read from my ASP.NET studies is that the "View State" is actually really beneficial as it allows controls to easily retain user input without a lot of workarounds. So do the negatives outweigh the positives? And you are saying webforms are starting to handle javascript frameworks now? This is interesting and yeah I've already started checking out those books. Hesitant to just jump in here since I already invested a lot into learning/practicing web forms and developed a large scale project based on ASP.NET webforms so I just really want as much information as I can get about it. I really want to be up to date on technology.
The second half of that quote isn't "tell him to go fishing".
Instead of using the Process API have you considered using the PowerShell Host API if you're just running PS scripts anyway?
-- (as others have said) If you're going to use a MS web technology, use MVC. -- Try the 'Microsoft.SqlServer.Smo' .Net library. It lets you do fun stuff like loop through table and column definitions in SQL and get information on them. That way you can skip reflection. -- Look into T4 templating. T4 ties in better with automatic model generation in MVC, but it can still be applicable here.
I'm testing this out now. Wasn't actually aware this existed. Thanks! EDIT: Well, it was certainly easier to work with than process.start, but it still won't run successfully. It's infuriating, because the powershell throws no such error when I run it on its own. The following exception occurred while retrieving the string representation for method "TerminalServicesProfilePath": "Object reference not set to an instance of an object."
"Tell him to go fishing" doesn't even make sense in the context of this discussion. If I just give him the answer (analogous to giving him the fish) then he doesn't learn how to find answers on his own (analogous to learning how to fish), so the next time he has a question (analogous to being hungry again) he won't know how to find the answer (analogous to knowing how to catch a fish). Telling him to google for the answer to his question is analogous to teaching him how to fish. His first thought when he gets stuck shouldn't be, "Where can I post my question so that somebody will tell me the answer?". It should be, "How can I find the answer to this question myself?" Have you even tried searching using the OPs question? You can't avoid finding the correct answer, there are tons and tons of results that provide it. Here, I'll even give you the fish: [Google search for Is there a way to view different parts of the same file side-by-side in Visual Studio?"](https://www.google.com/search?q=Is+there+a+way+to+view+different+parts+of+the+same+file+side-by-side+in+VisualStudio%3F&amp;oq=Is+there+a+way+to+view+different+parts+of+the+same+file+side-by-side+in+VisualStudio%3F&amp;aqs=chrome..69i57&amp;sourceid=chrome&amp;es_sm=122&amp;ie=UTF-8)
upon implicity converting your class to an int, in this line: int i = x; You've completely lost the reference to the x instance. This means, the variable i has no idea about your class whatsoever. How could it then be "converted back" to an instance of your class? what you're asking here makes no sense whatsoever, and that's why C# doesn't allow it. 
So I should override the base ToString method right?
Why would the GC try to collect something that's still referenced? Again, passing a ref param makes zero difference here. 
What everyone else has said. Picture this: var instance = new List&lt;int&gt;(); instance.Add(1); instance.Add(2); instance = new List&lt;int&gt;(); How would a compiler have any clue what you were trying to do? What you need to call is x.Value = 123; And then I think your code would work. There may be some scope here for using monads, however I'm not nearly au fait enough with them to tell you that for sure.
Well, first off, you can't overload the assignment operator (I'm not even sure if it's technically an "operator"). Secondly, C# and .NET in general tends to follow [a principle of least astonishment](http://programmers.stackexchange.com/questions/187457/what-is-the-principle-of-least-astonishment). _Everywhere_ else in the language the assignment _changes_ the reference (or value for structs); remapping this behaviour would likely be confusing. Unfortunately, I'm sure this isn't the answer you were hoping for. AFAIK there's no way to implement this behaviour short of some crazy IL-rewriting during/after compilation. You may have to be stuck with consumers of your API writing `x.Value = 123;` (Note that this too tends to violate the same principle as if the value is "invalid", nothing changes which is _weird_ for assigning to properties. But this is debatable depending on the context of your application/API it may be completely worthwhile and expected.)
Those compiler features need MISL support for being implemented.
Have you seen http://lmms.io ?
Maybe I don't really "get" this least-astonishment thing, but I don't really see how that would apply in this case: Wrapper&lt;int&gt; x; x = 35; // would cause a null-reference exception. x = new Wrapper&lt;int&gt;(); // Still works as expected, we get a "new" instance of the wrapper x = 35; // would simply change x.Value instead x = "a string"; // would cause a compile-time error. Personally, I'd be more astonished if I did x = 35; only to find that x was silently replaced by a new Wrapper instance. Obviously I wouldn't implement that, but still that's a perfectly valid construction in C#, unlike non-static cast/assignment operator overloading. I understand that assigning to a reference type without actually changing the reference could be considered confusing. But what if I turn my class into a struct? Still I have to replace the entire struct when casting to it.
Visual Studio Community edition?
Yes, does it make any difference? I can have Ultimate any time from DreamSpark
Why not just implement INotifyPropertyChanged?
Thank you. I'll check it out soon.
Not really, they are just types. If you decompile the C++/CLI assembly you can see how it just makes everything structs which are blittible to native, creates its own call frames and jumps to native code.
Firstly, I am going to guess this is an academic endeavor correct? Since [color pickers](https://www.nuget.org/packages?q=color+picker) are a fairly solved problem now. A text box converting the color value from hex is fine for starters. More advanced / elegant implementations would provide a palette to pick from as well as sliders to adjust either the ARGB values or the HSV values. Really nice ones allow for both. Both paint and paint.net show very functional examples of color pickers. For a larger drawing program its harder to say without knowing your ultimate goal and constraints. A very basic start to one way of laying out some pixels would be to have a large canvas then add borders every time the user clicks. There are some static methods on the canvas class where you give it the child in this case the border instance and value for what you are modifying. Ex.[ Canvas.SetLeft](https://msdn.microsoft.com/en-us/library/system.windows.controls.canvas.setleft%28v=vs.110%29.aspx)(borderObj, 25) will help position it on the x axis.
Yes it is an academic endeavor. Thanks for the info :)
You could build a WYSIWYG editor with AvalonEdit, though you may have to create a custom stylesheet for it to display your text correctly.
Why not try reading the tutorials like [this one](http://csharp.net-tutorials.com/) and then use [this](http://www.tutorialspoint.com/compile_csharp_online.php) to compile and execute to learn about the subject? You may have to make more time when possible, because C# is a big language to learn (not necessarily a bad thing either, it just more or less flexible to how businesses and developers want it to be.)
Ok, for all interested - I got it. Using [This](http://blogs.msdn.com/b/matt/archive/2009/09/28/converting-rtf-to-html.aspx) and [This](http://www.vbforums.com/showthread.php?719411-RESOLVED-TextRange-does-not-get-RTF-of-WPF-RichTextbox&amp;p=4400775&amp;viewfull=1#post4400775) I've managed to get RTF first and then convert this RTF to HTML code.
Yes I admit perhaps I could have got an answer by searching. Searching for the title [yielded the following](https://www.bing.com/search?setmkt=en-GB&amp;q=Is+there+a+way+to+view+different+parts+of+the+same+file+side-by-side+in+VisualStudio%3F) and I would have learned the Window -&gt; New Window -&gt; Drag side-by-side solution - but then I would never have used it ... primarily because it is kind of clunky and there is no keyboard shortcut as far as I can tell. However from people's posts I learnt about solutions which are similar to what I asked but better such as the split window icon in the top right - it also gives an insight into how people *actually* tackle this problem rather than the answer to my precise query. I realise we shouldn't do this all the time since we will have lots of lazy posts asking easily found answers which is more what searching or StackOverflow is for, Reddit though I kind of see more as a forum for discussion. I'm the only .NET dev in a team of iOS and Android developers and am self taught - it takes me ages to pick up VS and .NET best practices since I have to read about them from the web rather than having e.g. a discussion in the coffee room. Reddit is great forum for discussion and to find out what I don't know I don't know. 
Not a bad answer. If your code files are that big and unwieldy that you need to have the same file open twice to follow the logic flow then some re factoring is required!
There is a difference between being helpful and doing basic research that any programmer would be expected to do before posting a question online. This is the second of those.
I'll post you a sample.
I have created a test project, and yes what you say is true. But in my main project it does not hold true and I do not understand why. When I do this test project in my main project it just closes the stream after quite a bit of time and then I get "An unhandled exception of type 'System.ObjectDisposedException' occurred in mscorlib.dll Additional information: Cannot access a closed file." So I'm not sure what's causing it (I use threads, async in my main project) Same reader, different projects, different results. And no, I don't obviously close the file. EDIT: https://msdn.microsoft.com/en-us/library/system.io.binaryreader.binaryreader%28v=vs.110%29.aspx
You just need to read the docs on threading and locking, and do simple stuff like make sure the same connection isn't used across multiple threads. Take as much care as you would with anything else multi-threaded, and you shouldn't have a problem.
This sub is starting to feel more and more like a marketing dumping ground. 
Also, I like telerik and their products, but this one feels too early to be released. There aren't enough controls to justify it, really.
The binary reader goes out of scope of those classes but the underlying stream should stay open and has a reference.
&gt; make sure the same connection isn't used across multiple threads Did that and it still produced memory corruption errors. Highly unpleasant software.
[Google search results for your question](https://www.google.com/search?q=Is+there+a+way+to+view+different+parts+of+the+same+file+side-by-side+in+VisualStudio%3F&amp;oq=Is+there+a+way+to+view+different+parts+of+the+same+file+side-by-side+in+VisualStudio%3F&amp;aqs=chrome..69i57&amp;sourceid=chrome&amp;es_sm=122&amp;ie=UTF-8) reveals the split window icon solution in the 2nd result. I could understand if you had searched first, found the new window/drag solution and didn't like it, then came here looking for an alternative, but you put absolutely 0 effort in to solving your problem yourself before asking.
Seriously, you still don't understand what i needed?
The culture on Web.config is already en-us
[CultureInfo.CurrentCulture](https://msdn.microsoft.com/en-us/library/system.globalization.cultureinfo.currentculture%28v=vs.110%29.aspx), which is identical to CurrentThread.CurrentCulture: &gt; How a Thread's Culture Is Determined &gt; &gt; When a thread is started, its culture is initially determined as follows: &gt; &gt; * By retrieving the culture that is specified by the DefaultThreadCurrentCulture property in the application domain in which the thread is executing, if the property value is not null. &gt; &gt; * By calling the Windows GetUserDefaultLocaleName function. &gt; &gt;Note that if you set a specific culture that is different from the system-installed culture or the user's preferred culture, and your application starts multiple threads, the current culture of those threads will be the culture that is returned by the GetUserDefaultLocaleName function, unless you assign a culture to the DefaultThreadCurrentCulture property in the application domain in which the thread is executing. &gt; &gt;For more information about how the culture of a thread is determined, see the "Culture and threads" section in the CultureInfo reference page. So you need to set DefaultThreadCurrentCulture in the app domain before the thread starts, or find out how Win32 GetUserDefaultLocaleName works.
Your if statement is the same as if(true) because your statement of (email != "error") || (email != "na") is always true. If the email == "error" then (email != "na") will be true. There is no situation in your if statement where both sides will be false. An or operation basically means that if either side is true it will go into the if statement. The only time an or operation fails is if both sides are false which is not possible in your statement. Consider the following if( (i != 0) || (i != 1)) If i = 0 then you will get false || true which is true for an or operation if i = 1 then you will get true || false which is also true for an or operation There is no number you can set i to that will make that statement be false. The same is true for your if statement
&gt; This is a bit nuts. Where else in C# or .NET would you ever expect to see a NullReferenceException fire from assigning an int to a local variable? The only way I can conceive that this would happen is if an implicit operator threw the exception, but that's against Microsoft's guidelines. Point taken. I didn't know throwing exceptions from operators was actually disallowed (or at least, discouraged). And now that you mention it, I must say I haven't seen this happen before. &gt; Your other example: &gt;&gt; x = 35; // would simply change x.Value instead &gt; Naturally this is another place that would be astonishing as this simply can't happen in C#. The closest would be if x were actually a property, not a local variable. I realize this isn't much of an argument though ("It's astonishing because it's not allowed!") I didn't really think about using such a wrapper class as local variable (although I realize, my example did use it that way). If you put that in context, having other objects subscribe to an event handler tied to a local variable in some method seems like horrible design to me. And yeah, I see now how my idea would allow such a design. Anyway, I think I found a valid, or at least not-too-astonishing way to use this class, *with* the pretty syntax I was after: public class ClassWhereSomePropertyMustBeMonitored { private readonly UpdateNotifier&lt;int&gt; _property = new UpdateNotifier&lt;int&gt;(); public UpdateNotifier&lt;int&gt; ImportantProperty { get { return _property; } set { _property.Value = value.Value; } } } Having the setter only modify .Value might still be frowned upon, I guess. Maybe a more valid approach would be: public class ClassWhereSomePropertyMustBeMonitored { private readonly UpdateNotifier&lt;int&gt; _property = new UpdateNotifier&lt;int&gt;(); public UpdateNotifier&lt;int&gt; ImportantPropertyObject { get { return _property; } } public int ImportantProperty { get { return _property.Value; } set { _property.Value = value; } } } Though I think I like the first example better. In both cases the actual object is immutable anyway, and I still think it makes some sense to allow casting from int to the wrapper since the other way around is possible too. (plus this saves 3 lines of redundant code! XD)
1. Download a free copy of Visual Studio Express http://www.visualstudio.com/en-us/products/visual-studio-express-vs.aspx 2. Decide what kind of project you want to build. Web site, console app (command line), Windows app. If you are familiar with C/C++ then you are probably used to console apps. 3. Google "C# console app tutorial". Here is a command line app tutorial from Microsoft: https://msdn.microsoft.com/en-us/library/0wc2kk78(v=vs.90).aspx Hope that helps.
Not a bad suggestion, but I'd spend at least a little time doing the basics yourself to learn some basics of C#. Textreader.ReadLine and String.Split will do most of the real work. You can write this in just a few minutes with a few basic functions.
There are ways to keep that from being necessary, but there's also nothing wrong with passing strings. It let's you indicate when properties other than the property you're in has changed - dependent drop downs for example. Edit: in your case, just pass null
Mark is a great presenter.
It can happen. One thing to do here is try reversing the whole operation (apply a not / ! ). On this that would equal: if(email == "error" &amp;&amp; email == "na") Its much clearer that that is never true (and since this is reversed the original is always true).
Yup I wanna start coding but is there some type of tutorial or other stuff that could help me how to use built in ftns of language. etc 
Best option is to get a book, read it and experiment a lot. I'd recommend the Head's first book.
no, he is correct. He was demonstrating that if you apply a NOT to the whole operation, it does not make sense. (email != "error") || (email != "na") is equivalent to if(!(email == "error" &amp;&amp; email == "na")) After we rewrite it, it is obvious that it doesn't make sense.
I use that at work because Chromedriver/Selenium Webdriver has a limitation where it only captures the visible area of the screen. To get the entire page, I inject HTML2Canvas into the page. It returns a base64 encoded image that isn't that hard to convert. Unless there's an iframe on the page. HTML2Canvas can't do iframes.
Maybe write something like this ; string[] errorCodes = new string[] { "error", "na" }; string email = getEmail(id); if(!errorCodes.Contains(email)) { //Do your thing } If conditions like yours makes the code confusing. 
Do you have control the other website? What you're trying to do isn't too difficult if you can make an API on the server yourself, however if it's not and they don't have an API, then this is a very hard project to accomplish. If they have an API similar to reddit's JSON interface, it's much easier. Unfortunately, emulating a browser is much harder. There could be a lot of other things coming into play. Maybe the DisplayLogin() class accesses the server for some reason, and you need to manage that input/output... which might not even be possible depending on their security setup. The workaround is to use a WinForms or WPF app with a browser window inside... but if you don't want to do that... you're basically rewriting a text browser. Good luck!
Could you go into more detail on how to do this using wpf or winforms? I have wanted to figure out how to do that for a while and wouldn't be limited to creating it as a console application.
http://stackoverflow.com/questions/930807/c-sharp-login-to-website-via-program
Sounds to me you need to google up on C# web scraping, the WebClient classs, some basic info on post,get,cookies and the goold old browser-agent header (often needed). Good luck!
Yep, that's De Morgan's laws. http://en.m.wikipedia.org/wiki/De_Morgan's_laws I often use this when reasoning about logic statements
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**De Morgan's laws**](https://en.wikipedia.org/wiki/De%20Morgan's%20laws): [](#sfw) --- &gt; &gt;In [propositional logic](https://en.wikipedia.org/wiki/Propositional_calculus) and [boolean algebra](https://en.wikipedia.org/wiki/Boolean_algebra), __De Morgan's laws__ are a pair of transformation rules that are both [valid](https://en.wikipedia.org/wiki/Validity) [rules of inference](https://en.wikipedia.org/wiki/Rule_of_inference). The rules allow the expression of [conjunctions](https://en.wikipedia.org/wiki/Logical_conjunction) and [disjunctions](https://en.wikipedia.org/wiki/Logical_disjunction) purely in terms of each other via [negation](https://en.wikipedia.org/wiki/Logical_negation). &gt;The rules can be expressed in English as: &gt;&gt; &gt;The negation of a conjunction is the disjunction of the negations. The negation of a disjunction is the conjunction of the negations. &gt;or informally as: &gt;&gt; &gt;"___not (A and B)___" is the same as "___(not A) or (not B)___" &gt;and also, &gt;The rules can be expressed in [formal language](https://en.wikipedia.org/wiki/Formal_language) with two propositions *P* and *Q* as: &gt;&gt; &gt;and &gt;&gt; &gt;where: &gt; &gt;* ¬ is the negation operator (NOT) &gt;* is the conjunction operator (AND) &gt;* is the disjunction operator (OR) &gt;* ⇔ is a [metalogical](https://en.wikipedia.org/wiki/Metalogic) symbol meaning "can be replaced in a [logical proof](https://en.wikipedia.org/wiki/Formal_proof) with" &gt;Applications of the rules include simplification of logical [expressions](https://en.wikipedia.org/wiki/Expression_(computer_science\)) in [computer programs](https://en.wikipedia.org/wiki/Computer_program) and digital circuit designs. De Morgan's laws are an example of a more general concept of [mathematical duality](https://en.wikipedia.org/wiki/Duality_(mathematics\)). &gt;==== &gt;[**Image**](https://i.imgur.com/o8812B6.png) [^(i)](https://commons.wikimedia.org/wiki/File:Demorganlaws.svg) - *De Morgan's Laws represented with Venn diagrams* --- ^Interesting: [^Rule ^of ^replacement](https://en.wikipedia.org/wiki/Rule_of_replacement) ^| [^Intersection ^\(set ^theory)](https://en.wikipedia.org/wiki/Intersection_\(set_theory\)) ^| [^Negation ^normal ^form](https://en.wikipedia.org/wiki/Negation_normal_form) ^| [^Disjunctive ^normal ^form](https://en.wikipedia.org/wiki/Disjunctive_normal_form) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+co6uo9e) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+co6uo9e)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
You mean like a [List](https://msdn.microsoft.com/en-us/library/6sh2ey19.aspx)?
That looks like exactly what I need! Thank you so much!
There is an appendtext method on ricktextbox that appends text
Selenium web automation would probably be the best option.
You'll want to use [Selenium](http://www.seleniumhq.org/) or [WatiN](http://watin.org/) (I'm fairly sure WatiN is no longer actively developed, but there are still some reasons to use it, particularly if you need to attach your program to an already-open IE window). Both can be installed via Nuget. Check out my Selenium post [here](http://www.reddit.com/r/learnprogramming/comments/2sqdx3/vbnet_or_aspnet_autosign_in_website/cnzot42) and my WatiN post [here](http://www.reddit.com/r/learnprogramming/comments/2tpq8a/using_net_how_can_i_edit_an_html_form_input_text/co1dku3) covering similar topics. It's fairly simple as long as you've got a good handle on your target's DOM. Here's a quick example with Selenium: // First we click the element containing the link and the event // onclick="javascript:DisplayLogin()" // You may have to wait for the new elements to render // Then we find the form elements and fill them in // Then we click the "log in" button // Assume that the Chrome Driver is in the same directory // as your executable using (var chrome = new ChromeDriver(Environment.CurrentDirectory)) { var userName = "foo"; var password = "bar"; chrome.Url = "http://www.thesite.com"; chrome.Navigate(); chrome.FindElementByXPath("//*[title='Log In']").Click(); // Create a wait condition with a timeout of 30 seconds // Wait for an element with name='user' to be displayed var wait = new WebDriverWait(chrome, TimeSpan.FromSeconds(30)); wait.Until(ExpectedConditions.ElementIsVisible(By.Name("user"))); // Assumes that the login form contains the following elements: // &lt;input name="user"&gt; // &lt;input name="pass"&gt; // &lt;input type="submit" value="Submit"&gt; chrome.FindElementByName("user").SendKeys(userName); chrome.FindElementByName("pass").SendKeys(password); chrome.FindElementByXPath("//*[@value='Submit']").Click(); } Shoot me a message if you need help. Selenium can be a bit difficult to work with at first, but once you've got it, it's not difficult.
If the sites you're looking at have APIs (e.g., Reddit), it's very easy. If not, you can interact with the DOM via [Selenium](http://www.seleniumhq.org/) and [HtmlAgilityPack](https://www.nuget.org/packages/HtmlAgilityPack).
Yeah, HTML2Canvas is really cool, except that it cant capture iframes if present on a page
You cant append from another class. Thats what im asking.
There's also Dictionary if you want something more complex.
Thanks for the help I ended up making a static instance of my form.
While correct, it's probably not a good idea to assume that every programmer knows De Morgan's law.
Now that I am back at my computer, [here](https://msdn.microsoft.com/en-us/library/7y3x785f.aspx) is a great article from Microsoft on various collection types.
You can use reflection to get property names. It's not ideal, but until vNext (where we can use nameof(this)), you'll have to work around it.
He was demonstrating it, not assuming he knows it. &gt; One thing to do here is try reversing the whole operation
What was the machine test like?
Do you want to control the browser? It's doable but AFAIK only natively for IE and in my experience it's really flakey because you are using COM objects. This SO question might be useful. http://stackoverflow.com/questions/992436/controlling-ie-from-c I've released code for a customer that did this but beware while you are using the WebBrowser object IE can freeze up, so do what you need to do to the page quickly and then release it.
I really like http://up-for-grabs.net/
Thanks for your comments &amp; for motivating me to continue working on this! The contract, test cases, &amp; models (if any) are part of the question only. The answers must implement the contract in the question, so that same test cases are run for each solution.
You might be looking for https://stylecop.codeplex.com/
fxcop, stylecop are two. I would suggest playing around with resharper to learn somethings. 
It's just the way it is stored. It's stored as the decimal representation so if you try and add it to an integer it will add 50 instead. You could either do this. result += (holder - '0') * multiplier; Any char minus char 0 will convert it to the original integer. Or you could also convert it to a string then convert to an integer. The first is much cleaner. result += Convert.ToInt32(holder.ToString()) * multiplier;
Got it. I was previously doing: Convert.ToInt32(holder) thinking it will convert it to int and let me do the arithmetic. 
FxCop does not check code style.
Thanks for the replies, everyone.I've been looking into Selenium and the HTTP classes provided. Selenium seems like the easier way to do it.
I wrote a little proof of concept to do the same thing; it sets the desktop and the lockscreen using the same image. The main code you'd be interested in is here: https://github.com/DavidMoore/BingDailyPicture/blob/master/Code/BingDailyPicture/Services/LockScreenManager.cs
Put it on GitHub and boost about it. People will rip it apart and go into extreme detail as to why it sucks. It will be a great way to get a free code review though. 
You might want to check out Resharper by Jet Brains. One small part of that tool is a customizable linter. The rest of the tool includes really useful features like refactoring support and templating. I've used it for a few years and really like it.
"discrete"
I think this is a fantastic idea. I really like it and think it can get people to think about tests as "contracts". I think there's some real potential with this. (I also like the name of the site!)
Hi there, thanks for replying. I've read your code and it's pretty similar to mine, however mine doesn't work. I approached a bit differently as I download the image somewhere else and then store it on the filesystem. Only after I run the lockscreen code but doesn't work with the LockScreen.SetImageFileAsync. I've also tried with GPO policies which it works If I do it manually but can't get it to work via code :( the method I use is this, but doesn't do anything... it doesn't raise exceptions or errors. not quite sure if the StorageFolder works and get the file from the file system, I can't get to wrap my head around this async/await methods and how to troubleshoot them... if you have any tips/suggestions I'd appreciate :) static async void setLockScreen(string filename) { StorageFolder storageFolder = await StorageFolder.GetFolderFromPathAsync(Path.GetFullPath(filename)); StorageFile imageFile = await storageFolder.GetFileAsync(Path.GetFileName(filename)); if (imageFile != null) { try { await LockScreen.SetImageFileAsync(imageFile); writeLog("LockScreen.SetImageFileAsync called now with imageFile obj"); // Retrieve the lock screen image that was set IRandomAccessStream imageStream = LockScreen.GetImageStream(); if (imageStream == null) { writeLog("ERROR - Setting the lock screen image failed. Make sure your copy of Windows is activated."); Environment.Exit(108); } } catch (Exception) { writeLog("ERROR - Setting the lock screen image failed. Invalid image selected or error opening file"); Environment.Exit(109); } } }
FXCop isn't really for style guides, it's more for application design guides. If you're just looking for coding and consistency guides then I would use StyleCop. Resharper does a little bit of both and there's even a CLI you can use in your CI environment (https://www.jetbrains.com/resharper/features/command-line.html).
Check out this: https://msdn.microsoft.com/en-us/library/system.char.getnumericvalue(v=vs.110).aspx There's already a method that converts your char or even a specific char inside the string to a number it represents.
You could give https://www.airpair.com/ a try. I've never used it, so I don't know much details about the quality of the reviews you're going to get. If you can drop the discreteness requirement you should also try to publish it on gitbub or on http://codereview.stackexchange.com/
&gt; Live Streaming is not available in your country due to rights issues. Fuck that.
Oh my, I feel so silly. Thanks!
&gt; Any char minus char 0 will convert it to the original integer. Unless the character is 'Q' or '$', or absolutely any non-numeric character. Or if you're in a culture that uses non-Roman numerics. You should always use an appropriate method, e.g. `Convert.ToInt32`, rather than hackery that relies upon the underlying binary encoding of the character.
That blows.
What is a "code kata"?
Also, simply use Console.WriteLine.
Without knowing exactly what you're doing, something like this would work: var mylist = new List&lt;Tuple&lt;string, string, int&gt;&gt;(); var mytuple = new Tuple&lt;string, string, int&gt;("words ", " more words", 200); Mylist.Add(mytuple);
I definitely noticed that the LockScreen API is quirky, and like you, didn't get exceptions when it wasn't working. One thing you might try is set the platform target from Any CPU to x86 or x64 (depending on your machine) in the project properties as a test. If it's a concealed permission issue, you can also try running as administrator, and copying the app.manifest: https://github.com/DavidMoore/BingDailyPicture/blob/master/Code/BingDailyPicture/app.manifest
Came here to post tuples. Tuples are awesome, as long add you don't let them get away from you.
In short, a synthetic exercise that allows you to learn and fail in safety, while trying to solve some problems that you perhaps wouldn't normally try in your day-to-day work. A way to learn off a pair, a way to try new things, and a way to experiment with your skills. Basically "a coding puzzle, ideally done by two people at once" I've got a bigger piece on my blog about the value of code katas here: http://www.davidwhitney.co.uk/Blog/2014/11/05/code-dojos-as-a-learning-tool/
We're already using slack. I meant a way to collaborate editing on the project together, such as github or another way.
Also came here to post Tuple.
I'de say the learning curve from Winforms to WPf is pretty steep, atleast it was for me. WPF Is way more powerfull compared to Winforms. Atleast it is, if you're intent is write the WPF code yourself and not drag n drop. If you drag n drop the functionality is about the same in my opinion. but i woulden't recommend that.
If you only use that list inside the main method, a Tuple would be fine. But if that data is used anywhere else, I'd suggest creating a Book class. This would give you something like: public class Book { public int Id { get; set; } public string Title {get; set; } public string Author { get; set; } } public void Main(string[] args) { var book = new Book { Id = 1, Title = "title", Author = "author" } var library = new List&lt;Book&gt;(); library.Add(book); }
I am agree with your point, but from my point of view, it was pure simple for beginner level to understand very simple logic. If you talk about namespace, that could be very vast chapter and even I can give you 10 page ebook over explaining each and every concept of it. But i think there is some appreciation is required because whatever i read there, that was true about namespace. Rest is how you take it.
If people can't understand your point of view, it makes the analogy pointless.
In .NET 4.5 or later, you can use CallerMemberName. I do this: private void PropChanged([CallerMemberName]string propname = "") { PropertyChangedEventHandler del = PropertyChanged; if(del != null) del(this, new PropertyChangedEventArgs(propname)); } This allows me to do this.... public int Value { get { return m_Value; } set { m_Value = value; PropChanged(); } } and C# handles the string nonsense. More info: http://blog.amusedia.com/2013/06/inotifypropertychanged-implementation.html
in that case, an example could clarify: programmer: "i am thinking about an event, in the context of my application." compiler: "do you mean a MyApplication.ActivityStream.Event, i.e. an event in an user's activity stream? or a MyApplication.Diagnostics.Event, i.e. a system event like an unscheduled system shutdown that the devops folks want to know about?" programmer: "right! sorry about the ambiguity - i meant MyApplication.ActivityStream.Event"
I'll review it for free, giving you a small report and comment it out where I have stuff to say. I've been a developer for 8 years (professionally), mostly management stuff, little bit of game development, so I think I could help out.
The msdn articles on namespaces [here](https://msdn.microsoft.com/en-us/library/z2kcy19k.aspx) and [here](https://msdn.microsoft.com/en-us/library/dfb3cx8s.aspx) seems clearer and provide more detail. What added value is your tutorial providing over the information already on the internet? &gt;In this case, we will use alias directives. You defined the using statement in the code block for the alias but never it in the code. I was honestly looking all over the page for the next button to get to the rest of the tutorial. (The second msdn link above has a complete example.) Also, the [dotnetperls article](http://www.dotnetperls.com/using-alias) on aliases doesn't recommend them since they can create confusing code. 
"DiscrEEt" (I know, you are just quoting op)
*4. Use a web based application approach. Stop writing fat client code. 
1. Stop acting like web applications is a perfect solution to every problem.
Create an *instance* of any class and call methods on your *instance*.
What AngularBeginner said: Make a new class, for example public class Example{} Then from your main you can create an instance of it; var bla = new Example();
Just counting C# and razor html (not js) i'm around 3k, most of which is generated. But it's not done yet so can't tell. I guess i'll land somewhere near 5k?
You could do this with a loop or LINQ: DogDataArray.Where(dog =&gt; dog.Breed == "Shepherd") but a better solution would be to use a Dictionary&lt;string, DogData&gt; if you only need to find them by breed
define a class with non static members, create an instance of that class via var myObject = new Classname() and then you can call non static methods via myObject.MyMethod()
Thank you for your help!
The dictionary seems to be the perfect solution! thank you for your help.
That returns the first dog, not the array index. I know this is probably what he wants - but it's not what he asked for, so it should be mentioned.
I like it! I am a beginner, so this is right up my Silicon valley.
That doesn't return the index, it is filtering the array.
There is no need to keep iterating when you found your result.
Xamarin will save a lot of time with porting the business logic. After all the goal a lot of the time is to create a backend you "hook into" with the UI. Not having to port that portion of the app can be very time saving, even if you have deal with hooking it up separately to each platform's native UI.
I know but I assumed this is what OP wanted
I ended up doing what you suggested and everything is working perfectly. Thanks for your help.
C# has properties, and you don't need to .Equals() a string in .NET. In fact you shouldn't, in the case of null references.
There is a direct way to do this without linq. int index = Array.FindIndex(DogDataArray, dog =&gt; dog.Breed == "Shepherd");
Thank you for your help! I will probably use this line for the time being and then learn some of the other stuff people are replying with in this thread. I am learning through Unity so my learning progress is a lot slower than your typical junior programmer. I don't even know what linq is!
Thanks for the response. A quick google search for exiting for loops is showing that people recommend break when attempting to exit a loop so I feel a little conflicted. Would it be possible to instead increase the value of i to be the value of the array.Length? Apologies I'm not at my computer currently so I can't test this theory myself. My understanding would be that increasing i to the condition value would then exit the loop at the start of the next iteration? 
The only correct answer in this thread.
Thanks guys!
Thanks for the secondary input. Regarding wrapping the loop in a method is it correct to think that this would unnecessarily add to the call stack (albeit a small amount)? Would it be more efficient to use a break in this instance?
Reread OP...
Well... That's a pretty deep question, I'd say. At face value, it would add a single call to the stack. But, first of all, that is right up there on the list of micro-optimisations. Not negligible, mind you. However, perhaps more importantly is that the number of optimisations that can happen beneath you at that point makes it one of those things that you can only implement and measure, rather than have any educated guess at. For example, the JIT may inline the method anyway (see also: [AggressiveInlining](https://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.methodimploptions%28v=vs.110%29.aspx)). But, inlining the function may cause the outer method's instruction size to expand past the size of the L1 cache. Or perhaps all the variables wouldn't be able to be placed in registers. Or perhaps you subtly introduce a data dependency that forces excessive processor cache coherency, etc. etc. Bottom line, it's not worth worrying about. Just write code that seems the most direct to you. A lot of programmers (correctly!) warn against having 1000 line methods and spaghetti code with breaks and gotos everywhere. But it's just as easy to write spaghetti code by going too far in the opposite direction. :) Remember [*Keep It Simple, Stupid!*](http://en.wikipedia.org/wiki/KISS_principle)
Nice to see an example that one might actually deal with in the real world. 
Show me where op claims they're not doing what I've just asked you. 
Thank you. More to come on a weekly basis If you'd like to subscribe. 
Silicon* Silicone is a material used to make fake breasts and the like.
This is fantastic news! If I can develop in .NET on the pi I'll be a very happy man :D
This is a bit difficult but something that will help is [fiddler](http://www.telerik.com/download/fiddler). Install and fire up fiddler and then perform the actions that you need your program to do. Fiddler will track the requests and responses. You can then mimic them using the HttpWebRequest and HttpWebResponse classes. Also, in fiddler, pay attention to the cookies, urls, request type (get or post) and the headers. That's the basics of a request and response. 
Never used Selenium but I've built many a screen scrapper around HtmlAgilityPack and it rules, especially if you're familiar with working with XML in C#. HAP is a life saver. 
I think you are doing it wrong. If i understand correctly you want: 1/ Display a form (ChildForm) from another form (ParentForm) 2/ Do some operations within the ChildForm that result in a boolean. 3/ Do other operations in the ParentForm depending on the ChildForm result. Is that correct?
This is perfectly fine and clean... The famous MessageBox.Show(...) works the same way.
So sadly I can't find someone willing to tutor me on C# over skype, etc. Any ideas where I could find this?
What are you looking for? 
I can help if you like. I haven't done it before so I wouldn't want to enter into an official arrangement before we know it works. Send me a pm if you don't get any more concrete offers. . 
Cool, hope it solves your issue. It's odd that the linked code doesn't seem to match the documented method.
This is very smart on Microsofts part. They lose NOTHING by giving away Windows 10 to a relatively tiny group of people who would have just used Linux anyway, BUT those developers will develop skills in a programming language and toolset with limited portability. Less future linux developers. More future windows developers. This isn't generosity, this is incredibly intelligent investment in the future.
Thank you! This is what I needed. 
I wasn't on the team, who evaluated Xamarin, but I can tell their learnings. The application is a rendering engine written in C++ and the client which hosts this engine and provides some additional functionality on top of that. The goal was to target iOS, Android, Windows 8 and OSX. The C++ code relied on platform dependent services (media playback, logging, ...) The biggest problem was the lack of proper OSX support, the latest OSX APIs and 64 bit wasn't well supported. Cross compiling all the different parts was painful, took some time and then debugging into the C++ component was almost impossible. I'm not judging Xamarin, I think it's a really cool project and It might be worth looking into it later in the future.
What about writing Javascript or using a compile to Javascript language like Haxe, Typescript or Dart? Embedding a browser can be fairly simple. I've had good experiences using the Chromium Embed Framework.
Not full Windows10 desktop OS, just a very cut down kernel you can deploy cli style apps to: https://news.ycombinator.com/item?id=8983801
I highly recommend ReSharper if you dont already use a tool like that. I learned a ton of language features and best practices when I started using it. It only helps with the small stuff though.
Thanks for the reply. I have never really worked with hashmaps. But looking into hashmaps, I would assign each letter in the string a key and then match the keys? 
So following on that, what ideas do you have on what would make a good candidate for your key/value pair? Taking the string "ABCBA", if we're looking at the first letter "A", what key would you pick and what value would you store? Keep in mind that keys need to be unique, that is they can't contain duplicates (which is probably why hash map came to your mind in the first place). 
I would use a for loop and assign the indexes as their key and string array for the value
yes, it is.
Windows 10 for IoT devices? Still pretty interesting IMO.
Could be very, very possible if they port Minecraft over to Unity. For the record, I think they should.
Take a look at the HashSet class, specifically the return value of the Add method https://msdn.microsoft.com/en-us/library/bb359438%28v=vs.110%29.aspx
Eh, you have the express version, students get it for free through Dreamspark (JetBrains also offers all of their software for free to students, including ReSharper) and startups can get Bizspark. If you don't fall under any of those categories you probably can afford your own license
My solution in Python 3.x: from collections import OrderedDict s = "ABCBA" result = OrderedDict() for c in s: if c in result: result[c] += 1 else: result[c] = 1 print(result) &gt; OrderedDict([('A', 2), ('B', 2), ('C', 1)]) print([key for key, value in result.items() if value == 1]) &gt; ['C']
&gt; EDIT: Actually I think MessageBox is a static class which use WinForm (the actual message) as kinda of a wrapper, so in this case it wouldn't be the same thing! 
You haven't been paying attention to the .NET world lately, have you. 
Please don't mention http://extensionmethod.net/csharp. Most methods there are extremely and horrible crap. Like this one: http://extensionmethod.net/csharp/ienumerable-t/shuffle public static IEnumerable&lt;T&gt; Shuffle&lt;T&gt;(this Enumerable&lt;T&gt; list) { var r = new Random((int)DateTime.Now.Ticks); var shuffledList = list.Select(x =&gt; new { Number = r.Next(), Item = x }).OrderBy(x =&gt; x.Number).Select(x =&gt; x.Item); return shuffledList.ToList(); } 1. The usage of the `Random` constructor is stupid. The default constructor already uses Ticks. 2. The projection to the anonymous types is absolutely unnecessary and makes it slow. Simply order by `r.Next()`. 3. The `ToList()` at the end is not required. Or this: http://extensionmethod.net/csharp/type/isstring public static bool IsString(this Type type) { return type.Equals(typeof(string)); } What did that guy smoke? http://extensionmethod.net/csharp/type/isnull public static bool IsNull&lt;T&gt;(this T input) { var output = false; if(null == input) { output = true; } return output; } I.. I can't even comprehend. 1. Just fucking compare to `null`. 2. What is this temporary variable for? Why assign it like that? Just `return null == input;`. I could go on like this. The code you find there is good for a joke, nothing more.
Not all are bad http://extensionmethod.net/csharp/enum/toenum or http://extensionmethod.net/csharp/idatareader/getboolean-string-fieldname-getdatetime-string-fieldname-etc 
True, not all. But most. And there's no way to comment on them, or rank them, or report them.
I'm always interested in finding a decent utility that'll take my c# POCOs and give me the similar structure for javascript, to help ease my view model construction for knockout. I don't need something that'll convert actual code for me, just class construct. That said, I added my name to their email list. I used a "might be spam" email address I have, as I was dubious of their constant usage of "subscribe", I felt like I was being added to a mail spam farm, not signing up for a beta. A lot of words for, "we'll see." 
[Blackwasp](http://www.Blackwasp.co.uk) is the best I've seen.
Beautiful site, thanks for sharing
From what I've heard, Mono runs on Raspberry Pi, and MonoDevelop runs (glacially) as well. The new Pi should be fast enough that perhaps MonoDevelop wouldn't be painful to use. Is it insufficient for your needs? But, I wouldn't complain if Microsoft managed to optimize Visual Studio to run on hardware weaker than my Moto G -- that would be cool.
That article was disproved on another thread around here, with comments by an important Microsoft guy, and links to another article on the MS website. That Y Combinator article appears to just be some guy making stuff up. It may not be 100% of the x86 Win10, but it is supposed to still be far better than that article would have you believe.
[Wow](http://extensionmethod.net/csharp/string/encrypt-decrypt). I'm a little bit upset now.
True quality code: try { ... } finally { // no need for further processing } Clearly someone who knew what he was doing! Just one of many wrong things in this code, but clearly the icing on the top.
What you're saying about writing in a reduced form is true, but I think they're intentionally trying to avoid posting code like that. It's a different style of coding, not necessarily stupid or a joke. These functions provide anyone reading the snippets of code an ability to understand what is happening in a *readable form*, which is very important for code maintenance or learning. Look at the Random() constructor. If they didn't parameterize it, a reader not familiar with the Random class might not know that it seeds from the system clock by default. But that parameterized call and the default constructor will be converted by the runtime to the same code, so by writing it out the reader knows what's going on. 
http://referencesource.microsoft.com/
Ok, that's just atrocious. Never mind, I retract my previous comment. There are no quality controls in place for some of that code.
You are the perfect example
Wow, thanks for this one. 
I know it's a blog, but I often read the thoughts of [Mark Seeman](http://blog.ploeh.dk/) who literally wrote the book on Dependency Injection in .NET. He regularly writes about programming patterns in C# and F# that are timeless and the site has a huge archive of good insights. 
You're very welcome, this site helped me succeed in my first development job, I feel I owe it to the creator to share it whenever I can.
Make a homepage for a food-order-service. Editable by the owners with a nice interface. Modern stack and fully automated tested.
nullable types like int? are value types.
This page has been broken for me for a couple of months. (Chrome on Window, latest, etc..). Clicking on any individual sample takes me to a nearly blank page. I really *don't* want to download the whole example package either. It used to work, used to be nice for a quick "oh yeah, that's how GroupBy works..." Edit: works in IE after a warning pops up, but no thanks.
I am also a big fan of his blog, Jimmy Bogard's too: http://lostechies.com/
It's not a perfect solution, it cannot provide the best UX for the users, but it's one of the fastest way to get to the market. Then you can start thinking about going native.
Fixie is open-source: https://github.com/fixie. I wouldn't call it a product, nor do I think there's anything wrong with spreading the word about a good open-source project. Each to their own :)
Pick an open source project and find an item to fix on their issue list.
Perhaps I was a bit harsh in my choice of words. I was expecting some practical commentary or guidelines on writing good tests. There wasn't much there except the obvious "simple is better" and the rest was how awesome Fixie was in meeting his own personal ideals. Free or not, the biggest point of emphasis in that article was not in the title. I'm not judging Fixie, I'm saying that the article title misrepresented the real topic. It felt like they were promoting Pixie more than how to write good tests. 
&gt; str.GroupBy(c =&gt; c).First(g =&gt; g.Take(2).Count() == 1).Key would work too
Well, what appeals to you? Most of my GitHub projects may be a little more complicated than what you are expected, so I don't think they would be a good choice. But, it makes a difference if you are thinking games, back-end libraries, or the like. And are you aiming for an unknown project, a moderate, or a high-end one. There are advantages and drawbacks to all three of them when it involves getting started. If you have a package you like to already use, that's probably a good first step.
I like the direction microsoft is going. It's gonna be a huge help to mono dev team and will probably mean what we'll finally get really good .NET framework for linux. ^^^^Maybe ^^^^even ^^^^WPF ^^^^on ^^^^linux?
Its ARM not x86, and they mention Universal Apps - so it'll be WinRT or some variant thereof.
Oh man, thats the dream!
Have you ever considered developing apps for Windows or Windows Phone? Or maybe cross platform apps with Xamarin? You will learn a great skills and it's times more fun than developing enterprise systems IMHO.
&gt;I didn't "flat out" say anything. &gt; Stop writing fat client code. Look mate, look at the downvotes your post received and the subsequent replies that you're arguing with everyone about. Either you're wrong, your attitude is wrong or the rest of the world is wrong. Take your pick.
Check out this example on my blog. It uses GMAIL, but it defintely works. I've used it on a couple different websites. http://blog.tacosoup.com/sending-email-through-gmail-using-c-and-asp-net/ 
Well therein lies the problem. I coworker and I spent some time tinkering with some open source voice recognition libraries that worked locally. Microsoft's seemed to work the best, but there was no inexpensive hardware that could run the code. We are either stuck doing the detection server side, or using a weaker library. I've heard that Android has some local voice recognition capabilities. We'll probably look into that next.
Why not use Papercut for email testing? http://Papercut.codeplex.com 
Are you using Windows Forms? If so, have your login prompt be one form, and your other menu be another form. You could do: frmMenu mnu = new frmMenu(); menu.Show(); this.Close();
There is a reason why Google, Amazon, and Apple ship off most of their voice recognition to the cloud. 
From what I've understood, the biggest issue is that WPF is tightly couple with DirectX, so I don't expect it to happen anytime soon. But a man can dream!
There's really not much to Dictionaries. They're used just like a normal array except that you can use different object types for the index instead of only using ints. I guess you could compare them in that aspect to hash tables, except that Dictionary keys are not being hashed before accessing the value at some index in the array corresponding to the hash key.
After this I refuse to believe that the same company made xbone. 
zaph's link is better than anything I can show you, but a great place to start for any problem, aside from searching for resources online, is to sketch out the problem. [Here's what I drew](http://i.imgur.com/fy8B8uZ.png). You can orient the hexagons whichever way you want, but there are 2 configurations that exist. Mine shows one; zaph's link shows the other.
I'm guessing Cortana is a wrapper/extension around the already existing stuff then, too? Or is that separate?
my two cents it has to do with what is expected by the developer using it and hopefully can understand what is going on by the name of the property / function. For example, I have an object that has x and y. I have a property called radians. Now, when I say obj.Radians it gets directly from my float _radian variable. I also have a function called CalculateRadians() that takes the Atan of x &amp; y. If I called CalculateRadians every time you requested obj.Radians that would be somewhat misleading to the developer who is using the property. They may not expect you to calculate every single time you requested the variable. I know this isnt what you have in your code but I hope the concept I'm trying to convey seems valid to you. TL;DR - Name your stuff what it does so the developer isnt confused when they call it. That includes you. 
Ah, ok. Correct me if I'm misunderstanding you, but it shouldn't make a calculation for every call of the get accessor, or at least shouldn't if the developer doesn't expect it to do so?
Thanks!
Correct. It shouldnt call it because its a misleading name of the property. At that point you should just call it CalculateRadians, so the user knows that is exactly what you are doing every time. You are doing some magic under the hood. Choose the words for your methods and properties wisely as they will help you and help those who read your code understand it. :) 
&gt; From what I've understood, the biggest issue is that WPF is tightly couple with DirectX, so I don't expect it to happen anytime soon. I don't understand why that would be an issue. Windows Forms is extremely tightly bound to Win32 to the point that it actually exposes Win32 internals (ProcessMessage for example) but is mostly in a working state on Mono. WPF however exposes very, very little of Direct3D, if any at all.
you're right, that would shorten the method further. Just shared my method because I already got asked a few times how to solve this. Thanks for your feedback. :)
Perfect. Thanks!
Horrible.
Basically when I load the View, I'm just adding a new SelectList to my controller... ViewBag.RoleId = new SelectList(db.Roles, "RoleId", "RoleName", user.RoleId); My model contains a property for Role and for RoleId: public class User { public Role Role { get; set; } public int RoleId { get; set; } } The View builds the DropDownList like this: @Html.DropDownList("RoleId", String.Empty) @Html.ValidationMessageFor(model =&gt; model.RoleId) This pattern taken by example from the ASP.NET Music Store tutorial project.
As Java offers an even more suitable data structure named ``LinkedHashSet&lt;E&gt;``, which enables one to preserve the insertion order but also to add or remove elements in constant time (O(1)), it fits perfectly for solving the problem! The overall complexity remains O(n), as one can omit the lookup operation after the first traversal: public Character getFirstUniqueCharacter(String text) { Character result = '\0'; LinkedHashSet&lt;Character&gt; uniques = new LinkedHashSet&lt;&gt;(); LinkedHashSet&lt;Character&gt; multiples = new LinkedHashSet&lt;&gt;(); for (int i = 0; i &lt; text.length(); i++) { Character c = text.charAt(i); if (!multiples.contains(c)) { if (uniques.contains(c)) { multiples.add(c); uniques.remove(c); } else { uniques.add(c); } } } try { result = uniques.iterator().next(); } catch (NoSuchElementException ex) { } return result; } Of course one can discuss, whether it would be better to throw an exception if there are no uniques characters within the string. One short **remark**: Please think twice before you downvote! And if you do, please write the reason 😉
I'll check it out later, thank you. 
I figured it was a placeholder for a "Please select" item but... &gt; 'System.Web.Mvc.SelectList' does not contain a definition for 'InsertAtIndex' and no extension method 'InsertAtIndex' accepting a first argument of type 'System.Web.Mvc.SelectList' could be found (are you missing a using directive or an assembly reference?) No resolutions available via Right-click menu. 
The win32 api that powers WinForms has existed since at least VB5 (possibly before), and is well documented and understood in terms of behaviour, and even then it was no small feat when Mono ported it. Also don't forget that in that time Mono was actively supported by Novell. There's also a statement from Miguel indicating that it is not cost effective to invest time in it, and that alternatives such as GTK# exist (which I personally don't really like).
Derp, it's just Insert (0, ...)
You could try New Relic. The .NET agent profiles most popular frameworks right away without instrumenting your code. The pro trial should get you enough information.
You will have to look up "c# pinvoke" for how to use native c++ in c#.
Well then... I guess I will just be quiet. :) 
That's what I'm thinking, I can find the work around for Gmail but I'm still searching for the solution in live (Hotmail). 
In that case, if it were a derived property from two other properties, I don't think it would be a big deal to do the calculation in the getter. Since its not clear what setting that property would do, it should be a read only property. In general you don't want any side effects in your getter and you don't want either the getter or setter to do anything that takes longer than a dozen or so milliseconds. 
Honestly I didn't think of it that way, make the grid and the overlay a square grid over it, and use that to convert the square grid to a hex. Thanks!
Related, in regards to DateTime.Now being a property, http://stackoverflow.com/questions/5437972/why-is-datetime-now-a-property-and-not-a-method tl;dr much regret
I use Dot Net perls too
This might help - http://stackoverflow.com/questions/13689493/catching-exceptions-from-asynchronous-httpwebrequest-calls-in-a-task
Why are you putting the SelectList in the ViewBag?
A dozen or so milliseconds? That's quite a long time if you call it often-ish.
One of these days I'm just going to have to bite the bullet and implement WPF for *nix so people can stop complaining to me for mac support.
If only it was that simple :P
&gt; @Html.DropDownList("RoleId", String.Empty) You have an empty item because you're passing String.Empty as the [optionLabel](https://msdn.microsoft.com/en-us/library/dd504970%28v=vs.118%29.aspx) argument. 
That's because interop is a pain in the ass... not to implement, but to use on a production scale. It's the kind of thing that works great, but then every once in a while will decide to randomly throw a monkey wrench at your privates.
When you need to use C++ code from C# which isn't extern "C", then the easiest way is to write a small wrapper with C++/CLI (to avoid problems with C++'s name mangling of function names). Please don't forget that the result will be platform specific.
Using the approach with keeping track of the none unique characters so far, one can improve the python solution, using almost the same approach as the presented java variant: def first_unique_character_of(text): uniques = OrderedDict() muliples = set() for c in text: if c not in muliples: if c in uniques: uniques.pop(c) muliples.add(c) else: uniques[c] = c return next(iter(uniques), "")
Agreed, that feels a lot like an email gathering machine. I am intrigued by this though. I wonder if this is the direction we want to go in though, or is simply expanding razor a better way to accomplish this?
virtual academy and pluralsight. I don't know why, but I just hate the layout of dot net perls.
I actually should have said Direct3D (some people get very upset when you confuse them). Wine is unpredictable in performance at best, and I think nor Mono nor Microsoft would be comfortable building on top of it.
Spam your blog a little more please. Maybe then some one might give a shit.
Yeah I changed that and it's sorted the blank :)
I'm sorry that you're having such a bad day. You may find this link helpful. http://www.apa.org/topics/anger/control.aspx
So you're spammer and troll. Fuck the hell off, douche.
Your level of hostility is unhealthy. 
You mean you found it in [this thread](http://www.reddit.com/r/csharp/comments/2umooh/what_are_your_favorite_c_online_resources/) from yesterday?
&gt; I can't find resources with more advanced, real-world examples Feel free to take a gander at some of my code that I wrote for my open source 3D 'game engine' (WIP), here: https://bitbucket.org/OphidianGames/losgap/src/0f3a489d66ab1bba8ee68cf3cb8fb04aa09470b6/Rendering/NativeMethods.cs?at=default And some of the WindowFactory exports can be seen here, using the [EXPORT](https://bitbucket.org/OphidianGames/losgap/src/0f3a489d66ab1bba8ee68cf3cb8fb04aa09470b6/CoreNative/Macro.h?at=default#cl-56) macro: https://bitbucket.org/OphidianGames/losgap/src/0f3a489d66ab1bba8ee68cf3cb8fb04aa09470b6/RenderingNative/WindowFactory.cpp?at=default
Instead of HttpResponseMessage response = client.GetAsync(url).Result; you should be using HttpResponseMessage response = await client.GetAsync(url); Otherwise the exception happens in an execution context unrelated to the one your catch block is in. The compiler will ensure that exceptions thrown in awaited methods are raised in the right context.
Use WPF MVVM
(Thanks zaph34r!) The “offset” coordinate system used by EpikYummeh makes storage in a 2d array straightforward, if your maps are rectangular. The “axial”/“cube” coordinate system makes many hex algorithms (like distance, line drawing, neighbors, pixel to hex, rotation) easier, but storage is trickier. In the [map storage section](http://www.redblobgames.com/grids/hexagons/#map-storage) I show how to store maps in a 2d array if you use axial coordinates. The trick is to add or subtract something before indexing. For example if your coordinates are `(r,q)` then you might think you want to store it in `array[r][q]` but with axial coordinates you might use `array[r][q + r/2]` instead. You'd put that into your map class, so `Map.get(r,q)` would return `array[r][q + r/2]`. As long as you use the map class accessors, it should be ok. I need to expand that section to handle all the different cases but I hope the examples there give you some ideas.
The layout of this site is confusing. The indentation changes seemingly at random, and the headings all seem to have different formatting. I can't tell which headings are under which other headings, and the whole thing is inexplicably narrow.
Syntactically, C# and Java are basically one in the same. The difference, of course, is in the libraries you have available to use. The [MSDN C# Reference](https://msdn.microsoft.com/en-us/library/618ayhy6.aspx) can be very useful as it explains all of the syntax and provides a reference for class names, object types, and even covers [Generics](https://msdn.microsoft.com/en-us/library/ms379564%28v=vs.80%29.aspx), a powerful, type-safe productivity feature of C#.
I think the easiest way to do it would be to get a vector, using the initial position of the ball and where the player has released it from. You can then use that vector for the direction to shoot the ball, and it's magnitude as the size of the force/speed of the ball.
&gt; Syntactically, C# and Java are basically one *and* the same. I think you're overstating the case. They're similar, but they have dozens of significant differences. Extension methods, lambdas, anonymous types, properties, generic constraints, unified types ("primitives" as generic type params), event handler subscription, null coalescing, async, delegates, field initializers, and static constructors are probably the most significant differences I can think of now. Edit: enums and structs! How could I forget?!
What makes Bing a good search engine for C# information over Google? Edit: I'm genuinely curious. I'm not trying to be glib. I re-read what I wrote and was concerned it may be taken that way.
AFAIK that's purely a library difference, not a language difference, but it's still important to know about.
Maybe I'm nitpicking here but this kinda annoys me. When dragging a data source onto a form, the standard controls nicely line up with the property name. But this doesn't seem to happen for custom controls, even though my control has the same height as a standard combobox. Does anyone know how to get this alignment happen automatically? Also, who the hell thought it was a good idea to make the combobox one pixel taller than a textbox!?
I love that site. It is my go to site, so much that I'm pretty sure Google floats their links to the top for me. Actually really good for Java and VB.NET too.
Honestly I wouldn't recommend using BackgroundWorker these days. Use regular TPL stuff and you can chain continuations or use async/await to do things in a much more elegant fashion.
This site is always on the first page when you google something. It's practically impossible to miss it
Right? It's a throwback to the 90s. 
I personally like DotNetPerls. These should get you started: [Dictionaries](http://www.dotnetperls.com/dictionary) [Lambdas](http://www.dotnetperls.com/lambda)
In comparing searches I've found that Bing returns better, more relevant results than Google does when searching for C#-related queries. Just my experience; to each their own. Bing also rewards for searches so I might as well use it anyways.
Only if you're from the US &lt;.&lt;
Well I'm from the US so I get the reward points. If you don't live in the US and prefer Google, then use that.
I've not been able to find the answer for a question I've been having about the CoreCLR. Does this mean, that our C# applications will be able to run on Mac and Linux in a years time? Edit: I think what I'm looking for is the general effects it will have. What does this mean to me? (Assuming I'm a C# developer)
You're totally right and I also generally think it's silly to argue about a few CPU instructions. My point is merely about thinking through the use case can help tell you where to amortize your costs. It just happens that this specific example probably isn't something that matters much in practice.
Keep in mind that memory is also expensive. The more calculated fields you cache, the larger tour object is and the fewer instances you can fit into memory. Microsoft's guidance is to reduce object size unless you see a specific performance problem. (But not at the cost of increasing memory allocations.)
&gt; Also, who the hell thought it was a good idea to make the combobox one pixel taller than a textbox!? That pretty much sums up WinForms. It should be avoided if at all possible...
Why? Just get a C# book. You'll swiftly read through the pages with the stuff you know already, but you will stumble over the one or other thing that's different.
I was just expressing my annoyance about not being able to receive them.
This is the correct answer.
im kind of lost, where do i have to insert that piece of code?
Thank you, nice description that clarifies it for me. I'll definitely read this book.
http://www.pluralsight.com/courses/csharp-fundamentals
You're uisng `int.Parse(..)`. This throws an Exception when the input is not a number. Your input is the result from the method call `Console.ReadLine()`, so whatever the user enters. An exception that is not caught will terminate your program, you called this a "crash". Instead of `int.Parse(..)` you need to use `int.TryParse(..)`. This will return a value whether the result was a number or not, and stores the result in another variable. The MSDN (the documentation) has even examples on this.
This is really an elegant solution and - with the ``Take(2)``-trick - quite efficient. (Should be O(n) if I get it right)
It is spanish not french. (I know nobody care)
``HashSet`` alone does not lead to a solution!
You might find it easier to do this using an outlook macro rather than C#. It can be done in C# but you will find it harder.
Thanks for the answer, but it didn't change much. Still just get *"A task was canceled."* .. Any other thoughts? public async Task&lt;string&gt; GetRequestWithHttpClient(string url) { try { HttpClient client = new HttpClient(); client.Timeout = TimeSpan.FromMilliseconds(5000); HttpResponseMessage response = await client.GetAsync(url); response.EnsureSuccessStatusCode(); return await response.Content.ReadAsStringAsync(); } catch (Exception e) { throw e; } }
If you know exactly what version of Outlook you're using you could reference the Microsoft.Outlook.Interop library (and it's associated dependencies) and work through the COM object model to do this. You have to start by the Outllok.Application object and from there just look through the available methods/properties to drill into what you want. https://msdn.microsoft.com/en-us/library/bb652780.aspx You can also write a VBA macro to do quick testing and then translate into the object model with ease. Good luck!
You're rethrowing the exception* inside your catch block... what are you expecting to happen? Where does the debugger take you? *** ^(* btw, if you want to rethrow the exception you should be using 'throw;' not 'throw e;')
I've currently got it coded to look in the Documents folder, including the subfolders. I'm not using EF.
I'm just trying to display the correct exception when using a url that timeouts when making a get request. The debugger jumps to the catch right after the response timeouts. 
Alright then lets do some debugging. If you open the properties page for your 'My Documents' folder, do how long does it take to run, and how many files total does it find? That properties page should be performing nearly the same thing your program is doing and will give you a good idea for the best case running time. It's also good that you're using the second example, because that first example effectively has a memory leak - it holds on to its file arrays as it recurses through children directories, after it's already finished printing the files. That means it won't release the arrays or strings associated with those variables until the subchild walk completes. Back to the Stack&lt;T&gt; example, the code near the bottom that reads the file info for each file: System.IO.FileInfo fi = new System.IO.FileInfo(file); Console.WriteLine("{0}: {1}, {2}", fi.Name, fi.Length, fi.CreationTime); That will slow down enumeration; it does take time to read out each file's metadata. Still, 40k should take a couple minutes max, not 80.
Honest advice: Don't code tired.
Here's the demo re-written to use DirectoryInfo instead of strings, and DirectoryInfo.EnumerateDirectories() and DirectoryInfo.EnumerateFiles() instead of GetFiles and GetDirectories. From here you should be able to modify it to look for files with a certain extension pretty easily. Do note that this will only work in .Net 4.0, since that was the first version that had the EnumerateDirectories and EnumerateFiles methods. public class StackBasedIteration { static void Main( string[] args ) { // Specify the starting folder on the command line, or in // Visual Studio in the Project &gt; Properties &gt; Debug pane. TraverseTree(args[0] ); Console.WriteLine( "Press any key" ); Console.ReadKey(); } public static void TraverseTree( string root ) { // Data structure to hold names of subfolders to be // examined for files. Stack&lt;DirectoryInfo&gt; dirs = new Stack&lt;DirectoryInfo&gt;( 20 ); if ( !System.IO.Directory.Exists( root ) ) { throw new ArgumentException(); } dirs.Push( new DirectoryInfo( root ) ); while ( dirs.Count &gt; 0 ) { DirectoryInfo currentDir = dirs.Pop(); IEnumerable&lt;DirectoryInfo&gt; subDirs; try { subDirs = currentDir.EnumerateDirectories(); } // An UnauthorizedAccessException exception will be thrown if we do not have // discovery permission on a folder or file. It may or may not be acceptable // to ignore the exception and continue enumerating the remaining files and // folders. It is also possible (but unlikely) that a DirectoryNotFound exception // will be raised. This will happen if currentDir has been deleted by // another application or thread after our call to Directory.Exists. The // choice of which exceptions to catch depends entirely on the specific task // you are intending to perform and also on how much you know with certainty // about the systems on which this code will run. catch ( UnauthorizedAccessException e ) { Console.WriteLine( e.Message ); continue; } catch ( System.IO.DirectoryNotFoundException e ) { Console.WriteLine( e.Message ); continue; } IEnumerable&lt;FileInfo&gt; files = null; try { files = currentDir.EnumerateFiles(); } catch ( UnauthorizedAccessException e ) { Console.WriteLine( e.Message ); continue; } catch ( System.IO.DirectoryNotFoundException e ) { Console.WriteLine( e.Message ); continue; } // Perform the required action on each file here. // Modify this block to perform your required task. foreach ( FileInfo file in files ) { try { // Perform whatever action is required in your scenario. Console.WriteLine( "{0}: {1}, {2}", file.Name, file.Length, file.CreationTime ); } catch ( System.IO.FileNotFoundException e ) { // If file was deleted by a separate application // or thread since the call to TraverseTree() // then just continue. Console.WriteLine( e.Message ); continue; } } // Push the subdirectories onto the stack for traversal. // This could also be done before handing the files. foreach ( DirectoryInfo dir in subDirs ) { dirs.Push( dir ); } } } }
That's good info to know; so it does make sense that we're doing something needlessly slow if a similar task can finish in 2 minutes.
and a good one. I am french and I code in english.
IO operations using the framework's methods are known to be heavy, and not very efficient with large operations. Check out this post https://designingefficientsoftware.wordpress.com/2011/03/03/efficient-file-io-from-csharp/ They talk directly with the windows runtime to perform file operations. 
It's the `Null-propagating operator`, not the `Null-conditional operator`.
I don't trust that guys results at all. Instead of using the High Performance Counter via something like Stopwatch, he uses the system clock via DateTime.Now - which typically has 15 ms resolution on multicore machines, and can drift depending on system clock synchronization. The HPC is very precise, usually down to nanoseconds, and very stable; it's only good for measuring the passage of time, which is just exactly what we need. The system clock can change arbitrarily, isn't very precise, and isn't very stable hence the need for NTP synchronization. Also, I don't see any attempt to mitigate file caching behavior, which means that his benchmarks are erratic, and thus useless. Also, the .Net streams et al also talk directly with the 'Windows Runtime' (win32). [Go see for yourself](http://referencesource.microsoft.com/). How else would they implement file IO?
I'll take that as yout rescinding of your comments regarding access to local hardware. ;)
Well, when you make wildly mistaken conclusions like that, it's no wonder you're so obtuse. You do whatever makes you happy.
I actually wrote a small program to enumerate and hash a bunch of files at one point. There were around 1 million files in the system I was checking and the performance was solid (to enumerate and hash some of the files). My source code is pretty similar to the MSDN examples but you're free to take a look at what I wrote: https://github.com/mlh758/Office-Projects/blob/master/WPF%20Directory%20Comparison/WPF%20Directory%20Comparison/Execution%20Behavior.cs Bear in mind I'm still just a CS student, so I've probably done some silly things in there. Looking at the code, I could have probably found a better way to skip files from the filter. It was able to parse through ~1 million files in ~60,000 directories in around 7 minutes. This performance was nearly identical to a similar Python program I wrote to perform the same task. Threading the tasks only gave me a performance boost when I was needlessly hashing a bunch of files so I think this is largely IO bound.
Parse Xml from a file or Web service such as weather forecast or stock markets. Look into XDocument if you do. You'll learn LINQ, XML parsing, using Web services. You'll get some good experience with that.
I don't actually see `EnumerateFiles` being faster for the use-case of enumerating *all* the files. My understanding is that `EnumerateFiles` essentially builds a lazy iterator pattern around the native `FindFirstFile`and `FindNextFile` APIs. This gives you improved performance if you're likely to drop out before iterating the entire list (e.g. searching for a file with particular data in it) but won't give you any improvement if you iterate the entire thing anyway. Following on from that, it would make sense if `GetFiles` performed better for a number of reasons: * Less/shorter seeks on a mechanical disk, if you read every file. With `GetFiles` you read the FS table a bunch of times, *then* read the files a bunch of times. With `EnumerateFiles` you'd potentially jump back and forth more often, depending on how much caching is done. * Less calls, and less validation logic to be executed. * Better cache locality (you're not moving up and down the stack). * Better memory management - `GetFiles` can presume you've got more to come and pre-allocate arrays. I don't know if it does, but it could. Essentially, `GetFiles` is *designed* for OP's requirements - enumerating every single file in a directory. On the other hand, `EnumerateFiles` has to support different use-cases, which means it may not perform as well. That all being said, my money is on a logic bug in OP's code, e.g. re-iterating the directory for every file.
Visual Studio Community should have one built in, I think. https://msdn.microsoft.com/en-us/library/ms182372.aspx
From what I've learned you're actually creating the FileInfo objects twice. Once internally by GetFiles() which then just throws away everything except the path and again later on with System.IO.FileInfo fi = new System.IO.FileInfo(file); I've used 2 solutions for speeding this up so far: 1. When **scanning complete drives** I've used the MFT which is definitely the fastest for just the paths/file names. This only works on NTFS drives and requires admin privileges! You're basically parsing the file system at a lower level. I think this is the one: https://mftscanner.codeplex.com/SourceControl/latest#USNJournal/NtfsUsnJournal.cs 2. Use the FindFirstFile / FindNextFile API functions. That way you can actually keep the FileInfo objects the first time around. It can also be used to support long file paths (complete path &gt; 260 chars or whatever the limit is) by using "\\\\?\\" as a prefix. Edit: Obviously these solutions are a bit more complex than just GetFiles(), but that's the trade off when you want to speed it up. From what I remember FindFirstFile will also help speed up scanning of network drives. Edit 2: Don't do something like a foreach with "Console.WriteLine(filepath)" for debugging! Just the printing to the output window will slow things down!
Setting the Timeout property on an HttpClient does trigger a TaskCanceledException, unfortunately, NOT a WebException. If you aren't manually canceling your task anywhere you can be assume that the TaskCanceledException is the timeout. If you are canceling the task elsewhere, you can do something like this where cts.Token is your TaskCancelationSource catch(TaskCanceledException ex) { if(ex.CancellationToken == cts.Token) { // a real cancellation, triggered by the caller } else { // a web request timeout } }
Sounds good.
Very straightforward series. Thank you - I've shared this.
Looks pretty nice, but it would be interesting to see how hard it would be do to more custom controls (and if it ever gets ported over to Gtk# :P).
http://www.microsoftvirtualacademy.com/training-courses/c-fundamentals-for-absolute-beginners is good. If that's too easy, try http://www.microsoftvirtualacademy.com/training-courses/developer-training-with-programming-in-c
Excellent thank you, I'm gonna work through one of these soon. I've found Virtual Academy to be very useful, though there's quite a lot there. Can sometimes be hard to find the relevant tutorials. 
Might as well ask for OS X while we're at it. :)
Get a subscription to Pluralsight, and dedicate an hour or two a night to use it. It's like $30/month, and if that seems at all expensive -- then know that a decent knowledge of the stuff on there can give you one of the best careers available, at the moment. 
I tried using .Where() before but I was getting "System.Linq.Enumerable.WhereArrayIterator&lt;string&gt;" Also tried using .Where() inside .Count()...
`x == "(m)"` returns a bool, just like `x.Contains("(m)")` or `x.EndsWith("(m)")`, but that's kind of the idea of it. a lambda is basically a shortcut so you can create a method to pass to another method. In your code, x =&gt; x.Contains("(m)") is basically the same as making a new method private bool TestString(string x) { return x.Contains("(m)"); } .Count() runs through every value in your array and plugs the value in for x. If it returns true, it adds it to the counter. We could write our own Count method using the TestString method we wrote above like so: public int Count(string[] arr) { int count = 0; foreach (var x in arr) { if (TestString(x)) { count++; } } return count; } The big difference is, that instead of taking an argument containing the array to work with, .Count() works directly on the array, and instead of using a predefined function to determine whether or not to include an element, it takes one as an argument! Now .Where() is very similar to .Count(). You call it exactly the same way so `singers.Where(x =&gt; x.Contains("(m)"))` will work just fine with .Where(). The big difference is what it returns. .Count() obviously just counts up the elements, but .Where() filters your array down to only the elements that evaluate to true, then returns them as a special enumerable type. The easiest way for you to deal with it in your original code would be to run .ToArray() on the result from .Where() like so: string[] singers = { "Beyonce (f)", "David Bowie (m)", "Elvis Costello (m)", "Madonna (f)", "Elton John (m)", "Charles Aznavour (m)" }; var maleSingers = singers.Where(x =&gt; x.Contains("(m)")); string[] maleArr = maleSingers.ToArray(); This puts it back in a nice simple string array for you to work with, or you can skip that step and work with the result in place.
This would be great as a nuget package.
Bob Tabors' C# for Absolute beginners is fantastic. He explains most of the basics for C# and also basics of OOP. If you're looking for more advanced stuff, like making an app for a phone. he also has a video series on this. Windows phone development for beginners, or something like that. Check him out on Channel9.com c# tutorial: http://channel9.msdn.com/series/C-Fundamentals-for-Absolute-Beginners/01 WinPhone Tutorial: http://channel9.msdn.com/Series/Windows-Phone-8-Development-for-Absolute-Beginners edit: Seems there's a Windows phone 8.1 tutorial aswell. http://channel9.msdn.com/Series/Windows-Phone-8-1-Development-for-Absolute-Beginners
Yeah, I've heard C# is similar which is reassuring since I'm pretty good w/ Java so it's always nice to hear that wasn't just a false assumption. Thanks for the suggestion :) I luckily have a VS2013 pro copy through my College which is nice. (Though admittedly I haven't much of an idea of the more complicated features haha)
Ooooh that looks perfect! I'm definitely going to make use of that WP8.1 tutorial. Thanks for the links :D
No need, Count works directly. singers.Count(x =&gt; x.Contains...
No problem. I've recently taken up C# myself and found Bob Tabor's series very helpful.
+1 for WinForms.
Can confirm. I was in the Desert of Despair for 7 months until I forgot most things and had to restart. Now I'm on the mountain, and I'm ready to go downhill again.
I would use this as an opportunity to use Linq. First add a using at the top of your file: using System.Linq; And your code is then one line: return string.Join("/", filepath.Skip(3));
Thanks, C#'s foreach makes more sense now. 
I'd really like an Android port.
whoops. Sorry. that should be words not filepath. Two lines: string[] words = filepath.Split('\\'); return string.Join("/", words.Skip(3));
A charming well rounded individual here!
That didn't work, here's what I came up with: public static string ConvertFilepath(string filepath) { string rgxpattern = @"\\"; string rgxreplacement = "/"; Regex rgx = new Regex(rgxpattern); string url = rgx.Replace(filepath, rgxreplacement); string opsurl = "http://www.mysite.com/Documents/"; docurl = docurl + string.Join("", url.Skip(3)); docurl = rgx.Replace(docurl, rgxreplacement); return docurl; } It feels dirty, but it works. I'll have to find a way to shorten that a bit as I learn.
How to get better at C#? Use it. Work on side projects, learn new technologies, always try to improve yourself, learn from others. How to approach the C# questions? If you know it, great! Answer it. You don't know? No big deal. The important point is how you approach the "not knowing". Do you just say "I don't know"? Meh.. Bad. You should rather say how you would approach the problem, how you'd start to find the answers to the question that you don't know.
Thanks for responding. I really want to get better at C#
What type of questions are you having issues with? C# coding examples? Syntax or language questions? How you would solve xyz type problems? 
Mainly syntax and problem questions. I've also had one guy ask me to create a whole design pattern of the application that the company that im working for made. When it was a junior development interview. Im trying to get better at learning these questions by doing books as my C# has gotten bit rubbish after working with my company. I don't really get to code in C# mainly front end languages like javascript and xaml. Any tips would be appreciated.
What was wrong with using string.Join() like mentioned above? What didn't work? I would greatly prefer that over a regex, but that's just me. Something like this should get you what you want, I believe: public static Uri GetUriFromPath(string filePath) { Uri result = null; var parts = filePath.Split('\'); //split using whatever slash the file path is using - also could be configurable to handle both types of paths var relativeUrl = string.Join("/", parts.Skip(3)); //join the filepath parts into a relative url (skipping the first three for some reason) try { var baseUri = new Uri("http://www.mysite.com"); //construct a base uri using whatever web path you want - should probably create this as a private class memeber, especially if you will be using it elsewhere, otherwise at least make the string configurable instead of hard-coded uri = new Uri(baseUri, relativeUrl); //construct a Uri from the baseUri and the parsed file path parts } catch (Exception ex) //catch specific errors and implement proper handling { result = null; //null the result if we encountered an error } return result; } You may have to play with it a little, as I didn't try to run it at all, but that should get you close. By using the URI Class, you gain some basic validation on the URL you are trying to create. Both the [Uri Class](https://msdn.microsoft.com/en-us/library/System.Uri) and the [Path Class](https://msdn.microsoft.com/en-us/library/system.io.path%28v=vs.110%29.aspx) can be very helpful. *edit: my syntax skills are not the same without Intellisense* 
I'm interested to see how many developers agree and how many disagree with this.
Your best bet is probably to post on stackoverflow
thanks I tried that yesterday, just just rolling the dice w this.. I've been trying to get this working for a couple days now
And they want to hear you think out loud. They want to hear you lean on your experience and ask questions. Finding out what you know is important. Finding out if you know what you don't know is also important.
First off: using using using using. HttpWebResponse, System.IO.Stream, System.IO.MemoryStream should all be inside using blocks. After that, it looks decent. I'm wondering if you're getting an invalid response from the report server. That would put non-file data into your response and cause the file to be corrupt. I'd recommend running Fiddler and watching what happens when you hit this code. It will tell you what response codes are sent back and what the response body looks like (especially useful if the server is returning error data). EDIT: Here's some changes: -- You weren't actually using "myWebClient" for anything, just creating it and ignoring it, so I pulled it out. -- Set up usings -- Set up the read part to read everything in one go, and use a binary reader since the URL is supposedly returning a file -- Added response status check prior to reading the file try { var pdf = new byte[0]; var reportRoot = ConfigurationManager.AppSettings[ "ReportServerURL" ]; var reportUser = ConfigurationManager.AppSettings[ "ReportServerUser" ]; var reportPass = ConfigurationManager.AppSettings[ "ReportServerPass" ]; var formatUrl = "{0}/Pages/Folder.aspx?ItemPath=%2fDev+Reports%2f404a5+Participant+Notice_TD?planid={1}&amp;rs:Command=Render&amp;rs:Format=PDF"; var url = string.Format( formatUrl, reportRoot, txt404a5.Text ); var request = HttpWebRequest.Create( url ) as HttpWebRequest; request.Credentials = new NetworkCredential( reportUser, reportPass ); request.Timeout = TimeSpan.FromMinutes( 10 ).Milliseconds; using( var response = request.GetResponse() as HttpWebResponse) using( var reader = new BinaryReader( response.GetResponseStream() ) ) { if( response.StatusCode == HttpStatusCode.OK ) { pdf = reader.ReadBytes( ( int )response.ContentLength ); } else { throw new WebException("Unable to get file data. Response code: " + (int)response.StatusCode); } }; //Send the report to the browser Response.ContentType = "application/pdf"; Response.AddHeader( "Content-disposition", "attachment; filename=SummaryOfPlanExpenses.pdf" ); Response.BinaryWrite( pdf ); Response.End(); } catch( WebException webEx ) { test.Text = webEx.ToString(); }
Learn the fundamentals. Set C# aside for a moment and learn about object oriented programming. Take an afternoon and read the wikipedia page, and follow links/explore it. Pay special attention to Polymorphism and Inheritance. http://en.wikipedia.org/wiki/Object-oriented_programming 
There are always little things we take for granted though. Granted it's a novice example but when I was in college way back when doing c++ I was given an external library to use and was completely clueless as to how to actually do that. Given that it's so straight forward it's taken for granted but that long ago I was hopeless finding any kind of resource that showed me how to do it.
.Count( ... ) returns the number of items in the collection that match the expression inside. The expression you used is x =&gt; x == "(m)" Let's tweak the expression to make more sense in the context. name =&gt; name == "(m") Basically you said "Give me all singers whose name IS EXACTLY "(m)". There are none. If you change the expression to name =&gt; name.EndsWith("(m)") Then you are changing your statement to say "Give me the count of all singers whose names END WITH "(m)". Which will give you what you're looking for.
&gt;This isn't stack overflow. Fuck off. This also isn't your kingdom - you don't get to decide what is good content and what is not...so fuck off to you! Seriously though, why be such a dick when all he was looking for was some help on an unfamiliar (to him) language? 
Maybe it's true for eventual "rock star" programmers. I programmed out of necessity. It helped that it was the late 90s. I only learned what I need to do the task and as the tasks got more complex I woke up one day a programmer. Granted, I couldn't make it through CS and opted for BIS. SQL was easier than trig and I actually use it daily. I knew I wasn't going to be programming device drivers when I barely got through trig so I switched majors. I probably passed that class with a 69.4444445 rounded up. The only advice I can give is to not be afraid to break things. I formatted my old 486/win95 box so many times. My wife hated me but I learned a lot. I just wanted it to be faster. Years later I don't even install virus protection. The successful person is the one that makes all the mistakes and unfortunately that also includes my personal life. I find that less successful people are really afraid of breaking things, including emotional situations. I say jump in the fire, get burned. Why not? It is better to do programming than to learn it.
Well said. I've been developing professionally for seven years and am still growing rapidly. I look back three months and usually can find an even more elegant solution than my best at the time.
Most likely neither. If you can't reason about a simple operation in your head, it shouldn't be in code. If you **have** to implement operator overloading (as an alternative to being shot or something), then I would say that it should return the custom type, since it is the more complex of the two.
it's hard to say and it depends. Imagine you have a class that deals measurements. lets assume this class has a converting method. from metric to standard and then back. now lets assume that the class can add two lengths regardless of their type. liek... 1foot plus 30cm. Like i said, it depends on what you are dealing with. In your example I would expect CustomType to be returned. I wouldn't expect an add() method to also convert types... but, maybe that is what you inteded. 
Since I'm making a custom number type (fixed point numbers) I have to implement operator overloading. One more question, should the order of the types matter, or should it always return the same type and casts should be used to get the other type? For example, should *CustomType + int* and *int + CustomType* both return *CustomType* (in that case to get an int, you should do *(int)CustomType + int*) or should the first one return *CustomType* and the second one *int*?
Saying things like "based on my experiance with... I would expect... but since I'm not sure I would look for a concrete answer in... and if I could not find one in there, I would ask...." - even if you have no idea it shows you know how/where to find the answer. You will constantly be running into things you don't know. Showing that you know that msdn or stackoverflow exist puts you at an advantage over someone who just says "I don't know".
Then leave? No need to act like a baby and spam the sub with assholeishness.
I'm not sure I agree that Now should be a method. Properties values are certainly allowed to change between invocations, and properties should not have side effects. DateTime.Now meets both of these. Is there some other constraint that I'm not thinking of that all properties should be held to that DateTime.Now violates?
Return the largest type that does not end in loss of information. edit: remember that you can provide explicit casting operators as well.
That was very informative. About stream-to-stream copying, do you have any idea how would [`Stream.CopyTo(Stream)`](https://msdn.microsoft.com/en-us/library/dd782932%28v=vs.110%29.aspx) fare in this case (e.g. copying one file stream to another)? 
Ohhh alright, that explains a lot... :) But yeah, definitely seems that unless you need to squeeze out the last bit of that IO performance, using multithreading with `BlockingCollection` seems like a bit of an overkill over simple `CopyTo`.
Sure, *you* might be able to. However, I am not experienced enough in WPF to do it as quickly as you might be able to and neither is my team. That doesn't make us shitty programmers, there just hasn't been a strong enough business need for us to spend time ramping up on WPF when winforms gets the job done. Honestly, I spend my training time on asp.net MVC.
&gt; winforms gets the job done In 6x the amount of time and code. Nice. I'm sure your team is very effective. And no winforms doesn't "get the job done" if you need anything different from the horrible user experience obtainable from the default controls. See [this video](http://www.dnrtv.com/default.aspx?showNum=115) for a vast number of UX improvements that WPF enables that are totally impossible on winforms.
&gt; I didn't want to be spending all this time learning this for nothing! *Learning is never waste. Except if you're learning winforms.* Seriously, the XAML + Databinding approach is much more useful than the dumbed-down, VB6 like winforms experience where you will "drag and drop" stuff into a "designer" and then use "code behind" to operate that. On a fundamental level, the declarative markup approach of WPF is also used on Web, Android, QT, JavaFX and practically all modern UI frameworks. What you learn by learning WPF surely isn't "for nothing". 
The bullet points are fraking you. Add extra line feeds
That did it. Thanks
I understand the concern. I had the luxury of about 1-2 months to learn WPF. The learning curve is massive but now that I understand it I love it and am way more productive with it. Of course I had the luxury of time. The good news is that a lot of the overall concepts you learn in MVC translate to WPF
BTW, the mentality of *"this is an internal app, therefore f!ck anyone who uses it, let them suffer this horrible UX we created because we don't give a f!ck"* is abundant in places like oracle. I endured 1 year of that, and ended up in the hospital with a severe stress condition. If you do internal applications, then the employees of your company are your end users, you should try to avoid casualties by doing proper UX. Of course you can do proper UX on winforms, but your lack of interest for it indicates that your apps are totally shitty, and your users suffer them instead of using them. That makes your product shitty regardless if it "gets the job done".
My go to answer is Google and hack for 15-20 minutes, then get help.
You can try something like this: string givenText = ... // your string int number; bool result = int.TryParse(givenText, out number); if (!result) number = 0; Basically *TryParse()* method will return *true* if it is possible to parse text to number, *false* if not.
Thanks. I'm running it now. I'll see if I can make sense of it when it finishes.
AFAIK TryParse will set the output to 0 if it fails anyway. https://msdn.microsoft.com/en-us/library/f02979c7(v=vs.110).aspx
Yep, I didn't check. Just wrote what I remembered. IMHO the returned value should be used to inform the User about wrong input.
Yes, that is one way of using it. Custom default value would be another option, say you have a webpage with a custom search that allows the user to set the number of items per page: int itemsPerPage; if(int.TryParse(inputString, out itemsPerPage)) { if(itemsPerPage &lt;= 0) itemsPerPage = MIN_ITEMS_PER_PAGE; else if(itemsPerPage &gt; MAX_ITEMS_PER_PAGE) itemsPerPage = MAX_ITEMS_PER_PAGE; } else { itemsPerPage = DEFAULT_ITEMS_PER_PAGE; InformUser("Invalid number given, using default value."); //This is not a method in C#, on a webpage you would probably want it to //display a JS alert. }
LOL. No it's not "clean" in any way. Clean is when you're able to really separate your business logic from the UI, as in MVVM. Now *that* is clean. winforms is as clean as my grandma's ass.
Do you know any 3D game tutorials? 2D is definately good, but I've already made a 2D game before.
I apologize I should have made it more clear the input is several lines a string of 30 lines of whats below. This is a lot of other stuff not just process msg that just happens to be what I grabbed. I have a program that is tailing the logs of another program. It is looking for certain lines. I had an issue where I wouldn't get a whole line. I would get half a line and this caused some issue. I wanted to validate that I have a whole line of the log file. The code I am using is below. using (StreamReader reader = new StreamReader(new FileStream(EMSLogPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))) { //start at the end of the file long lastMaxOffset = reader.BaseStream.Length; try { while (true) { System.Threading.Thread.Sleep(1000); //if the file size has not changed, idle if (reader.BaseStream.Length == lastMaxOffset) continue; //seek to the last max offset reader.BaseStream.Seek(lastMaxOffset, SeekOrigin.Begin); //read out of the file until the EOF string line = ""; while ((line = reader.ReadLine()) != null) { ThreadInfo threadInfo = new ThreadInfo(); threadInfo.LogLine = line; ThreadPool.QueueUserWorkItem(new WaitCallback(ProcessFile), threadInfo); } //update the last max offset lastMaxOffset = reader.BaseStream.Position; } } due to how the logs get out put I might only get half a line of logs. like so. [2015-02-07 11:16:13] INFO ThreadID:3696 [CModuleMgr::Run] timer e Below is a prime example of why I want to split on the '[Visibility.CXMPPThread:3988]' Some lines in the log are spread out I can't just split based on new line '/r/n'. If I can split based on the Visibility section then I get multi line logs as one line which is perfect. Right now I am just doing reader.readline which means I can't properly process the Curl Response or any line that is spread out. INPUT 3696 [CModuleMgr::Run] timer expired [Visibility.CModuleMgr:351] [2015-02-07 11:16:13] DEBUG ThreadID:3712 [XMPPThread::Log] Curl: http response header for ID:1 HTTP/1.1 200 OK Date: Sat, 07 Feb 2015 16:15:42 GMT Content-Length: 51 Content-Type: text/xml; charset=utf-8 Access-Control-Allow-Origin: * Access-Control-Allow-Headers: Content-Type [Visibility.CXMPPThread:3991] [2015-02-07 11:16:13] DEBUG ThreadID:3712 [XMPPThread::Log] BOSH: http response length:51 data: &lt;body xmlns='http://jabber.org/protocol/httpbind'/&gt; [Visibility.CXMPPThread:3988] [2015-02-07 11:16:13] DEBUG ThreadID:3712 [XMPPThread::Log] BOSH: (ID:1) Total open http request after receiving current http response:0 [Visibility.CXMPPThread:3988] [2015-02-07 11:16:13] DEBUG ThreadID:3712 [XMPPThread::Log] BOSH: (ID:0) Total open http request after sending current request:1 [Visibility.CXMPPThread:3988] [2015-02-07 11:16:13] DEBUG ThreadID:3712 [XMPPThread::Log] BOSH: Sent idle request successfully [Visibility.CXMPPThread:3988] [2015-02-07 11:16:19] INFO ThreadID:3696 [CModuleMgr::Run] tim OUTPUT Line1 [2015-02-07 11:16:13] DEBUG ThreadID:3712 [XMPPThread::Log] Curl: http response header for ID:1 HTTP/1.1 200 OK Date: Sat, 07 Feb 2015 16:15:42 GMT Content-Length: 51 Content-Type: text/xml; charset=utf-8 Access-Control-Allow-Origin: * Access-Control-Allow-Headers: Content-Type [Visibility.CXMPPThread:3991] Line2 [2015-02-07 11:16:13] DEBUG ThreadID:3712 [XMPPThread::Log] BOSH: http response length:51 data: &lt;body xmlns='http://jabber.org/protocol/httpbind'/&gt; [Visibility.CXMPPThread:3988] etc The out I want is everything between the date '[2015-02-07 11:16:13]' and the ending '[Visibility.CXMPPThread:3988]' including those as well. I would lose the first and last line in my example and set my LastMaxOffset to be the end of the last FULL line.
I posted a much longer response to /u/tapedeckninja I want the whole line between '[2015-02-07 11:16:13]' and '[Visibility.CXMPPThread:3988]' including those.
I'm not familiar with GridView, but maybe DataGrid? 
To install package on every project on solution run Install-package multiple times via the output of Get-Project
From MSDN GridView(RT) and DataGrid (WPF) are very similar ItemsControls that have the same properties. Additionally, what I have found is that unless you need the full power of the data grid (sorting, filtering, etc), you can get away with using a templated ListView/Box to look and behave like a DataGrid.
I think you might be mis-understanding. A solution level Nuget package is already a thing. I'm using it. If you make a Nuget package with only a tools directory (no lib or content) it can be installed directly into the solution, either from command line or from the package manager. It doesn't install into any specific project. It adds a .nuget folder and packages.config file directly to the solution root, and any tools included (like powershell scripts and modules or executables) are then available in the package manager console. No, it doesn't add anything to the actual code of the projects. That isn't the goal here. These are build assist tools. I have things like: * Update-Version which accepts a project as a parameter and updates and builds all projects at that point of the build tree up * Publish-WebClient with builds and publishes to NuGet the web client, it's interface project, and the project that generates test data for it * Rename-Project which changes the name of a project on the file system, corrects all references to that project, changes it in source control, and changes all tasks associated with it in TFS So, don't think of it like a Project level nuget package, which adds code for use by the project. This is solution level, which adds utilities for use by the developer.
I agree entirely. I often have to use multiple sources to learn a single concept because some presenters immediately go into the details and hypothetical before ensuring a base understanding. Moreso than syntax or process, I think patience separates developers from other fields. 
i think you're solving the wrong problem - you generally want to validate your inputs before you operate on them. if you are using WPF or MVC, you can use [data annotations to validate inputs](https://www.google.com/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;es_th=1&amp;ie=UTF-8#q=dataannotations%20validation&amp;es_th=1). if you are just writing a console app to mess around, you can do a: static void Main(string[] args) { List&lt;int&gt; thingsToAdd; try { thingsToAdd = args.Select(s =&gt; Int32.parse(s)).ToList(); } catch { Console.WriteLine("Please provide numbers only."); return; } } this is more clear to the user than having a calculator in which 5 + 2pac == 5
if you declare the variable outside of the if statement, you can still set the value once you're inside the if statement. Then it will still exist after the if. Is this what you're wanting?
var number = string.IsNullOrEmpty(input) ? 0 : Int.Parse(input); Or int number; int.TryParse(input, out number); The second one will set 0 for any invalid input 
string output = myIntInput.ToString().Replace("0", " ");
I know you are using integers because traditionally Sudoku puzzles use numbers, but remember that the numbers could just as easily be ducks or squirrels or whatever. You are worried about them being unique in any given square or line, an enum or even a char would suit you just as well.
You can't look at it in a vacuum. Profiler information is **relative to the rest of the code**, which just means that this call is one of the more expensive ones in your code. **Something** has to be #1, and a database hit is often going to be it. "something like transactions instead" is far, far too ambiguous. Do you have performance problems in the first place? If the code runs acceptably, **leave it alone**. There's no point in premature optimization. Without seeing any of the other code, or the database, it's impossible to even answer whether this can be sped up without a hardware change.
As being also an Android developer and knowing you're just joking, it's not even that ridiculous. Google's support library for backwards compatible material design components is awful. It barely contains any components. If you want to make a proper UI while not being stuck to just Android 5.0, you have to use tons of external libraries for it. EDIT: typo
It's very common for a database request to be the slowest step. If it really bothers you look into async programming and/or different caching strategies. 
Edit : the below does nothing with your sql server product Try running it with nolock and see how the query times change (not sample%), you should be able to get better performance and keep the same consistency provided you don't have transactions being rolled back often.
Some good advice in the other replies, but: - No, a transaction will not speed it up. [A transaction is very helpful to turn several writes into an "atomic" operation](http://www.sqlteam.com/article/introduction-to-transactions) (at a performance cost), but you don't even say if this is a read or a write SQL operation. If it's very complex SQL then there may be ways to rewrite it for better performance, but then there may not be. If it's a simple read, then check how is it using the DB's indexes. - You don't say anything about why you consider it slow. Is load on the webserver high? Or are there lots of records in the database? Is there other load on the database? Which of these factors cause execution time to get larger? How long is the round-trip time for a request from a browser? Is this on production hardware or of similar spec? Have a look at [Latency numbers every programmer should know](https://gist.github.com/hellerbarde/2843375). This is why accessing a database is often a large percentage of execution time - it's a "Round trip within same datacenter" at best and is always outperformed by a few lines of code.
You want a nullable int. It does everything you are asking for. 
Of course, but increasing the efficiency of that slowest point doesn't make it premature. Here is Knuth's full quote on premature optimization: &gt; There is no doubt that the grail of efficiency leads to abuse. Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%. **A good programmer will not be lulled into complacency by such reasoning, he will be wise to look carefully at the critical code; but only after that code has been identified**. It is often a mistake to make a priori judgments about what parts of a program are really critical, since the universal experience of programmers who have been using measurement tools has been that their intuitive guesses fail. After working with such tools for seven years, I've become convinced that all compilers written from now on should be designed to provide all programmers with feedback indicating what parts of their programs are costing the most; indeed, this feedback should be supplied automatically unless it has been specificly turned off. -- &gt; then - guess what - something else is now the "slowest part". You should have kept your original response unedited. Instead you managed to turn a reasonable response into a show of superiority.
You know with the Syncfusion community license you could use theirs (if you qualify that is). It's going to be much better than the vanilla grid as far as built in features goes.
As I mentioned in a previous comment: &gt; Oh, and "I'm too lazy to properly learn to use WPF" is not a valid reason, BTW. And it's not a matter of "like" or "dislike", it's a matter of technical efficiency. WPF allows you to write clean, properly separated code, while winforms requires stupid code behind. winforms does not allow customization. It does not have enhanced DataBinding capabilities, it does not have a built in animation framework, it does not provide hardware acceleration, it does not have anything like the WPF ItemsControl/UI virtualization. It does not support styling or theming, it does not have anything similar to WPF's Data Templating, it basically doesn't support anything, other than dragging and dropping in the designer and disgusting code behind, no different from VB6. winforms is inferior, regardless of "like" or "dislike". People claiming otherwise are totally deluded.
It wouldn't. Although if the output needs to be XML I would try XML serialization like alkrun said above. Also check this out http://www.json.org/xml.html
Thanks. That looks like the one thing I was missing. 
Not sure how much control you have over the project but my solution would be to replace the pictures with a GamePiece class that references both x and o images, a value property (boolean, true for o and false for x) and a CurrentImage property or function that would return the image that matches the state of the current value. That way you can bind the currentimage property in your UI and use the value property for your logic.
Nolock? With SS Compact Edition?
Xml serializer may be the way to go, it's a headache on its own sometimes just trying to get a class to serialize in a certain way. I'd often end up with a helper using stringbuilder or Linq XDocument to build it because of constraints. I much prefer the json option like others have said but I know you don't usually get to choose. 
Right. And the first step is to research the problem and determine what options are available in the specific context rather than just jumping into optimizing the database call. That's what the quote means by premature micro optimizations.
3rd result in google http://www.csharp-examples.net/iformatprovider-numbers/
Thanks! I'll look into it!
There's only so many winning states. I'd probably just store those and compare.
For web sites, I'd use [SgmlReader](https://github.com/MindTouch/SGMLReader), also available as [NuGet package](https://www.nuget.org/packages/SgmlReader/). This is IMHO a much better solution than using regular expressions.
I haven't updated the tests yet. My wife gave birth a few weeks ago, so I'm slow to get back into things. No Reflection at all, so you should be good to integrate with Unity. There's no dependency on .Net 4.5 - I just happened to use it for the project. I can release a .Net 3.5-compatible version if you like?
Best answer by far. I had to use it and tested the parsers performance and it is really better.
[Here's my code for that.](https://github.com/andreburto/Tic-Tac-Toe/blob/master/tictactoe/GameState.cs) Mind you I wrote that right after learning about List&lt;T&gt; so at the time I was all about List&lt;T&gt;.
I think you are going down the wrong road. I use invariant culture when I don't want the user's culture to be part of the equation.
I think you're right, pretty much all of the examples I've found are setting the culture to a specific one. I might omit it from the app until i do some more research. The desktop version seems to do fine without it.
Make your properties public. Most serializers only work on public properties by default. You may also have to make your classes public, as some serializers have trouble with that as well.
This is a real shot in the dark. Some libraries have the same named objects. Are you sure you have the right referenced library?
I am a regular of the /r/cpp and they have a separate subreddit call cpp_questions (or something like that), which allows the main subreddit to be for more "serious" posts and releases whilst the questions subreddit is more newbie friendly.
There's a Visual Studio command line app to generate a class from an XML schema or well-formed instance. Xsd.exe https://msdn.microsoft.com/en-us/library/5s2x1sy7%28v=vs.110%29.aspx
I've not seen this before, but I'd try to exit it. If that fails, kill the process. Try again.
I did a web search and didn't see an obvious answer. I don't know if there is a good subreddit for this, but there is the MSDN forum for Building Windows Store apps: https://social.msdn.microsoft.com/Forums/windowsapps/en-US/home?forum=winappswithcsharp 
Exit seemed to fix it, thanks. 
The benefit of JSON over XML is that JSON has a much simpler syntax, and maps a little better to object-oriented languages (it's stripped-down JavaScript objects and arrays). But be pragmatic: if you have to talk to existing software that with works in XML, you will probably be better off using XML than trying to change the existing software to use JSON. So, if you're defining a new serialization format, please consider using JSON instead of XML. But if you're stuck dealing with existing components that need XML, then just use XML.
 if(cell.Value == 0) Console.Write(" "); else Console.Write((char)(cell.Value + '0')); If you would prefer to avoid the branching you could make a lookup table. readonly char[] glyphs = new [] {' ','1','2','3','4','5','6','7','8','9'}; Console.Write(glyphs[cell.Value]);
Do you mean to tell us you've asked for help before turning it off and on again?
From my understanding of it, that's almost the exact opposite of what InvariantCulture does. Invariant - not variant - doesn't change. From that link I posted : &gt;Invariant culture is a special type of culture which is culture-insensitive. You should use this culture when you need culture-independent results There are other options for CultureInfo 
I would check out [PluralSight](http://www.pluralsight.com/), it has a lot of excellent .Net videos. I've found them to be much more useful than the MVA ones.
I see GetResponseStream but not GetResponse. Is that typo or are you really looking for GetResponse?
You definitely shouldn't be creating view instances in your view models. You should look into data templating. You can create a DataTemplate with a DataType of your view model. If you have the content of a ContentPresenter bound to the view model then WPF will resolve the right view based on the data type. Then you can change views on the fly just by setting appropriate view models. If you post up what you have at the moment (use a gist or something if it's long) then we can probably give some more concrete advice. Edit. Added the gist below to demonstrate to another poster, but this is the sort of thing I mean. https://gist.github.com/anonymous/bc97ffdcbec699a07cac
Ah yeah I was just looking at my own code and figured it was significant that I coded my own template selector, but in my case I did it to check the inheritance chain of the types as well. Sorry you just need to make sure you use the DataType attribute and the default DataTemplateSelector will do just fine for a basic use case.
OK, I suppose that's possible. But not likely in the context of the original vague question though. The performance cost of transactions is usually borne by others who are locked out of reading the same data. At least that's what we see when load is high. I suspect that this doesn't apply to OP either.
Both return decimal.
Prism was very refreshing coming from MVC land
Do you mean that a method defined in a class might not be available when used in different platform? Please see the image attached https://i.imgur.com/8MW5crE.jpg
..Or making sure it's plugged in? For shame!
Thank you, that worked. 
Agreed.
This is great until you hit build 65535 and you can't compile your project! [Large revision numbers in AssemblyVersionAttribute](http://stackoverflow.com/a/1188376/895309)
Finally got an invitation for the beta. I'll let you know once I get a chance to play around with it more.
Hi thanks for reply. But if you see the code explained in MSDN page for GetResponsStream you will see that this method is implemented upon the Response from server. Cant see how to implement "response" in Silverlight Platform or other !
Seems like its no way possible. Found exact same problem here http://bit.ly/1ESKnAj I hate those async :-(
Yes looking for GetResponse. Please have a look at image https://i.imgur.com/8MW5crE.jpg 
Commenting to backup the JSON suggestion. Unless XML output is a hard requirement for your project, I'd *strongly* recommend using JSON instead. JSON provides a simpler syntax and has a simpler parsing process. You can easily serialize/deserialize JSON data with [Json.net](http://www.newtonsoft.com/json) and build your data model easily with tools like [json2sharp](http://json2csharp.com/). I can back this suggestion up with experience. I was tasked with building an ops app that needed an scalable configuration of my choice. For whatever reason, I was set on using XML, so I wrote my own XML parser. Long story short, it was a nightmare. I had another opportunity to write an app in a similar context, so I used JSON as I described above -- and it took a small fraction of the work to get it running. It worked so well, I went back and retrofitted the first app's config functionality with JSON. Of course, I'm nowhere near a Senior Developer level , so if anyone else has a few choice words about my choice, by all means, scald me. EDIT: Weird wording in a few places. EDIT1: When I said scald me, I meant with corrective words and educational rebukes, not downvotes. Oh well.
In my opinion, exceptions should be for when "exceptional" things happen. A user typing in a wrong password is definitely not exceptional, so I would use a returned status. Exceptions have too much overhead to be used for control flow.
Cool. Thanks for the tip. But async sucks:(
You should return an error status (like `LoginResult.PasswordIncorrect`) for invalid logins, and throw exceptions when an authority check fails (e.g. when `UpdateCredentials()` was called but the user previously failed to login), because that's an exception that should never happen!
So you use enum Status for passing control flaw information up the stack? This is what I usually use as well. Recently someone introduced a pattern of exception control flow. You basically re-assured the same feelings I had. Thank you
Using exceptions for flow control is like using the guard rails to drive.
This is such a great analogy!
Well like someone else here already said, exceptions are basically an application's way of saying "Oh shit, something fucked up! Unless someone was expecting this and ready to deal with it (e.g. catch block), we'd better quit!". That's how you should look at them, imo. Throwing exceptions has a large performance overhead, too.
You know, events and listeners is a pattern I do not use often. I should do some more work with these to locate some usages. 
That's good advice regarding T4 templates. I haven't had to make a lookup table for _enums_ before, but I'll keep that in mind if I ever do. In the specific case I referenced, the lookups were actually based on `string` keys which were determined at run-time, so compile-time templates weren't viable. In general, I agree: if your lookups can be generated and validated at compile time, do it! If you can't, if you can generate them once at runtime initialization (so your application fails fast and you immediately find the problem in development), that's a decent fallback too.
I'm pretty sure ReSharper can be configured for at least 80% of their standards. But, there is probably a few things like line spacing that it doesn't quite handle yet.
Jared Parsons, who was principal in coding this program, is the author of VsVim - an extension that brings Vim to Visual Studio. If anyone is in a position to implement this as an extension, it's him haha. In fact, he has already been assigned to an [issue](https://github.com/dotnet/codeformatter/issues/13) on this subject. Hopefully we'll see this soon!
Well, the division operator is '/', the same as in any C-style language... What exactly are you having trouble with?
is this for a homework assignment? For starters here are a couple of thoughts: 1. Why declare so many ints, especially when you can reuse them 2. I would recommend using TryParse instead of Parse 3. Consider using a float, decimal, or double. Otherwise you may have some division issues
Last time i checked, gtk has some problems on mac. There are Xamarin.Forms, but they are for mobile platforms...i guess? Also Eto,Forms (https://github.com/picoe/Eto), i've heard some good things about it, but it's more of a wrapper as it targets specific toolkits on each platform. There is also https://github.com/ddobrev/QtSharp, although i have no idea how complete it is. The project looks alive at least. Still since Qt is probably the only true cross-platform GUI toolkit bar JavaFx (which is jvm bound and requires oracle jvm and so on...), i've been musing on somewhat funny and probably stupid idea of using Qt through P/Invoke. Sure it would require a good amount of work: have to program frontend in c++, carefully expose interfaces to use from c# side, but in the absence of options, who knows? Would like to hear about good options myself: so far i've decided to stick with Windows only, so gui problem is not a biggie while i am implementing core stuff, but the perspective isn't so clear.
Thanks! Eto looks good. I'll probably use that and see how it goes. It prevents me from having to worry about native libraries, which is nice. 
I would look into loops, to decide which one, ask yourself how you know when the user has finished entering numbers. This could be done in quite a few ways. I would also strongly recommend the tryparse. 
hehe, I see what you did there. I would also maybe suggest using String.Format in this loop, to add each typed number to the outputted string at the end
Anyone try it? I was curious how it handles naming standards across class attributes and methods. Will it touch those?
But I don't like braces on their own line...
Can I use this tool to make VS stop removing my fucking assignment alignments? If not, anyone know of any tools to do it for me (other than [Code alignment](https://visualstudiogallery.msdn.microsoft.com/7179e851-a263-44b7-a177-1d31e33c84fd))?
Well then, msdn is WRONG :-P
I can believe it, Microsoft has a lot of developers and a lot of teams. I'm in the R# camp in general, though I wished they had a CLI version that I could use on Linux/Mono. This has potential for that, but I still haven't found a universal tool for formatting yet.
&gt; I would assume that the Length is already an int. Don't assume it. **Check it.** Go with the cursor over `BaseStream` and press F1 to open the documentation.
&gt; Next how long is this BaseStream and what is this BaseStream? Thanks in advance! You would have to check. Not all streams support Length. One example would be [NetworkStream](https://msdn.microsoft.com/en-us/library/system.net.sockets.networkstream.length%28v=vs.110%29.aspx) which throws a `NotSupportedException` if you call `.Length` on it. edit: `.BaseStream` is the `Stream` instance the `BinaryReader`was constructed with. For example: using(var fileStream = new FileStream("C:\\test.bin")) using(var binaryReader = new BinaryReader(fileStream)) { Assert.That(binaryReader.BaseStream, Is.SameAs(fileStream)); }
The direct answer to your question has already been given by the other posters, but I would like to digress into you case a little further. You see, what you are trying to do is stuff MVVM into the default implementation of WPF and while it is fully possible (binding commands to your buttons/menuitems, switching current viewmodel in you main windows view model) there is an easier approach. That approach is using a MVVM framework, that will do a lot of the heavy lifting for you. There are a number of different frameworks available, the one I have used the most (and will use to demonstrate the answer to your question) is [Microsoft's Prism](https://msdn.microsoft.com/en-us/library/ff648465.aspx). In this, you can declare "Regions" in you main view (example: a toolbar region, side panel region and main content region). Now, you can have the framework navigate a region to a specific view. The framework will figure out (not entirely, you have to specify a lot up front) how to switch the view, and load it auto magically, and use the appropriate view model. Definitely worth a look. But do note, there are other MVVM frameworks available. Also, Prism allows you to do way more fancy stuff, such as loading "Modules" at runtime, but you might not want/need that.
May be because I didn't used it. But looking at code of async it looks much complicated. 
This is a tough one and can't be answered easily. You should first profile your application, and see how much processor and memory it requires. I'm not familiar with the Google cloud services, but coming from an Azure aspect it's most of the time good to start with an as little machine as possible. Make sure you're getting statistics on the load of each machine, then run some load tests (means using a service that will fire a LOT of requests). This should give you an indication on how much pressure the machine can take. What is really important is that you make sure your application can **scale-out**. This means your application runs stateless, each request can be handled on it's own. This way you can just spin up another server when the load gets too heavy. You can also automate this process, that more servers boot up on times your application is heavily accessed (e.g. Amazon does this for winter, because people buy A LOT more in winter).
I use to agree with that view so passionately. Now my most recent job has flipped my views and I prefer 'Egyptian' brackets.
&gt;It's a style thing and is purely subjective Not true. This isn't like the difference between tabs vs spaces. There is a functional difference between putting them inside or outside, and it can lead to some very sneaky bugs if you're expecting one or the other. 
Applied for the beta on the 22th of january. Got accepted yesterday(09/02). Didn't had time to check it out yet but will take a look at it in the weekend.
There are ways to have a stateful server. You either make sure the state is accessible in a shared location, or you make sure all requests are always routed to the same server. But the definitely best approach is to let the client keep the state and make the webservice calls all stateless.
Yes, this is a horrible practice. A method that changes 7 different parameters does too much. Depending on the use case you can either return an object, or manipulate the object passed as a reference directly.
You mean StyleCop. It still has this one on by default.
You might also be able to bundle a PostgresQL or MySQL installer with your app's installer, and script a headless (i.e., no user interaction required) or streamlined installation of the DB server while installing your app. EDIT: Forgot to mention, unless this program is going to be dealing with a lot of data, SQLite will probably be your best bet.
As /u/AngularBeginner said: Yes, that's bad practice. I would make an object that is returned by the method. Or (if you don't want to make an object for just one purpose, or just want to obfuscate the method parameters) pass in a lambda that takes those ref/out as parameters. ex: // definition public bool DoSomething( Action&lt;int, string, int, int&gt; operation ) { var age = 3; var name = "Larry"; var code = 500; var id = 1161; operation( id, name, age, code ); return true; } // implementation var isSuccessful = DoSomething( (id, name, age, code) =&gt; { myObject.Id = id; myObject.Name = name; myObject.Age = age; myObject.Code = code; }); The second option is only a good choice under a select few circumstances, I don't recommend it.
Run the database in the cloud, charge a subscription fee for write privileges to relevant tables. Profit.
Not extremely sneaky but something like this could happen: using System.Windows.Forms; namespace MyApplication { using System.Threading; class Program { static void Main(string[] args) { Timer timer = new Timer(); } } } Now if the file is big or whatever you may not see that the System.Windows.Forms.Timer you might be expecting got replaced by the System.Threading.Timer.
Making assumptions is one of the single *worst* things you can do when working in software development, whether it be as a developer, tester, project manager, etc. Always question preconceptions. Always verify the answers -- even those given to you by official documentation.
SQLite seems to be exactly what I'm looking for! I just need to be able to have a record for each object (asset) that contains basic info about it, and had the ability to be updated and "checked in/out". Thanks!
Huh. I like that example. Thanks! 
I agree with the others here. I have had these arguments countless times with other developers on many teams. :) Exceptions should be used for *exceptional* situations only. There are many other ways to handle flow control - for example, you mentioned using statuses. Exceptions also carry a performance overhead. I also would never raise exceptions in an API. You don't know what the consumer is using - they may not even be in an environment that supports structured exception handling. In your example, I would think of it this way. An invalid password is a common scenario. That's pretty much the polar opposite of an exceptional scenario. I hope this helps!
I'm still learning OOP/C# and honestly I just don't understand ref and out. For example, why does TryParse need to be used with out? I mean, what's so special about passing it a variable? Every other method can accept a variable without needing out...
Have you looked into [Cordova](https://cordova.apache.org/) yet? Microsoft is adding the tooling for it to Visual Studio as an [extension](http://www.visualstudio.com/en-us/explore/cordova-vs.aspx). I've been playing with it locally and was able to deploy to my Android tablet via USB and like it so far.
I'd suggest trying out QtSharp. They're bindings generated by CppSharp, Xamarin/mono's p/invoke and c++/cli bindings generator. They're still not production quality, but it wouldn't hurt to start stress-testing them.
There's a `Parse` that does not take an `out` parameter. That would show you why `TryParse` needs to be used with `out`. Basically, when you parse something and fail, there needs to be some way to signal that you've failed and also give you the result of the parse (which means you must return two things). By returning true or false with `TryParse`, it gives you the ability to use it fairly conveniently as a condition in an if statement while also giving you the result of the parse from the `out` parameter. The regular `Parse` method chooses to throw an exception on failure as it's method of signaling a failed parse, which can be appropriate when you expect that what you're passing in will parse correctly or, if it fails to parse, the only place you can handle the failed parse is fairly high up in your call hierarchy.
It looks like it, although I can't vouch for it beyond pointing at the [repo](https://github.com/apache/cordova-blackberry)
Maybe WASAPI ( https://msdn.microsoft.com/en-us/library/windows/desktop/dd371455(v=vs.85).aspx) could work. I'm not sure, though. It's late, and I'm too tired to look into it more.
I was talking to a bloke at Campus London yesterday about a framework called PhoneGap. Not sure what it's about cos I'm a Xamarin gentlemen, but might be worth a look. 
The "dev team" for this project is pretty much me and one other guy doing 90% of the development. We've both done unmanaged C++ before, and he's done some CLI, though we both prefer C#. Beyond that we have a couple casual contributors who haven't done anything unmanaged / "unsafe" before.
I'm currently reading Head First C# by O'reilly and it's been alright so far. However as you delve deeper into the book, get the example code you are given ready as a few things have been changed that are different from what is written in the book.
I normally re-wrote the code in c#, yes it's slower but not noticeable. In the past I've written unsafe code to increase performance but it's really not something you want to be doing. I'd prefer .dll + dll import.
My rule of thumb is "how maintainable is it going to be when I finally die of a stress induced heart attack and/or stroke?" Most C# devs have never dealt with unsafe blocks/raw pointers. Nor is it easy stuff to pick up if you haven't dealt with something like C++ before. At the same time, not that many C++/CLI devs walking around locally here but plenty of C++ devs. So if you're just creating wrappers in C++/CLI, it's usually not that hard for a C++ dev to pick up the CLI bits. So I would lean towards the C++ route.
Sounds like he's doing it for interop reasons more than performance, though.
&gt; 1\. Which of the following string() method are used to compare two strings with each other? Firstly, what is a `string() method`? Is it refering to the _static_ methods on the `String` _class_? I'm not sure since the possible answers are a mix of _both_ instance and static methods. Secondly, the answer: &gt; a) CopyTo() &gt; b) Copy() &gt; c) Compare() &gt; d) CompareTo() &gt; &gt; Answer: b &gt; &gt; Explanation: Create a new string by copying one string to another. What? Copying? What happened to comparison? ------------ &gt; 2\. Choose the base class for string() method : What? What does that even mean? Base class for the `string()` _method_? Well... uhhh maybe it's referring to the fact that it inherits from `System.Object`? Let's see the answers: &gt; a) System.Array &gt; b) System.char &gt; c) System.String &gt; d) None of the mentioned Ummm... none of the mentioned? &gt; Answer: c &gt; Explanation: String is an alias for the predefined “System.string” class from which most of the string() methods are derived. Oh. Ok. We're talking about the alias between `string` and `System.String`. How did I possibly miss that from the question? And the association between the two is _definitely_ not about being a "base class". ------------- &gt; 3\. What is output of for following set of code: &gt; static void Main(string[] args) &gt; { &gt; string s1 = " Cshr "; &gt; string s2 = s1.Insert(3 , " a "); &gt; string s3 = s2.Insert(5 , " p "); &gt; for (int i = 0;i &lt; s3.Length; i++) &gt; Console.WriteLine(s3[i]); &gt; Console.ReadLine(); &gt; } &gt; a) Cshar &gt; b) CsharP &gt; c) Csharp &gt; d) Cshrap &gt; &gt; Answer: c &gt; Explanation: Insertion of character ‘a’ at postion ’3′ using insert() which returns a new string with a substring inserted at a specified location. &gt; Output: Csharp Well, first off, none of those answers are correct. A combination of using `Console.WriteLine` _and_ the fact that the strings literals are surrounded by spaces produces: C s a p h r Even _if_ it used `Console.Write` instead, the output is ` Cs a p hr ` because of the spaces. The answer isn't all that good either. First off, it's not `insert()`, it's `Insert()` (upper camel case). Secondly, it misses a potentially good point about re-counting for the second insertion ("5") as it's working against a new string been modified by inserting "a" at position 3.(That is, newbies might think you should use "4" to insert into the original "Cshr" string not recognizing that we're really inserting into "Cshar" now. The answer kind of touches on this but is not clear. -------------------- &gt; 4\. Which of the following statement is correct about a string in C#.NET? &gt; a) The System.Array class is used to represent a string &gt; b) A string has a zero-based index &gt; c) A number cannot be represented in the form of a string &gt; d) A string is mutable because it can be modified once it has been created &gt; Answer: b &gt; Explanation: None. Horray, it finally got the right answer for its question and... explanation: none? **None**? Way to miss a great opportunity to explain the concept of zero-based indexing (vs one-based indexing) and how it affects the way you work with the various `string` methods or accessing the `char` indexer on it. This could be helpful for users coming from other languages where strings are one-indexed. ------------ Then I noticed the scrollbar. **55** of these questions/answers. Oi, I don't have the energy to go through them all and I have no faith that many of them are correct. Just for fun, decided to check the last question for accuracy: _compiler error._
Now *this* is why I read comments before articles usually! Thanks for saving me the trouble.
So about number 4: Answer D is also true. Strings technically are mutable in C#. Code: string str = "Test"; Console.WriteLine(str); fixed ( char* strPtr = str ) { strPtr[2] = 'r'; } Console.WriteLine(str); Output: Test Tert There are also a few errors: 1. Number 1's answer is incorrect. 1. Number 3's is also incorrect; the correct answer is `" Cs a p hr "`. 1. Number 7 claims there is a `strcmp()` method; there's not. 2. Number 10 claims that `TrimStart()` trims whitespace from the end of a string. 3. Number 11 claims the `String` class contains an `equals()` method, not an `Equals()` method. It's the other way round. 4. Number 14; `Trim()` does not work as explained. 5. Number 22 claims the `String` class is under the `System.Text` namespace; it's in fact under `System`. 6. Number 27's answer is, in fact, B; there are no spaces in any of the strings, and concatenation doesn't add them. 7. Number 43's explanation is wrong, I believe. I think it'll end up failing when it tries to cast the `StringBuilder` to a `String`. 8. Number 48. Well, for a start it won't compile. Even if it did, the answer would be A, because concatenation does not remove spaces. 9. Number 49 doesn't even have the correct answer as a selection. In addition, the code is sometimes hard to read due to bad indenting and no brackets for the `for`statements, and several of them are repeated. I'm letting them off for number 4, because it's kinda obscure, and should not be done. 
It looks like StorageFile has a few OpenSuchAndSuch methods for reading the file stream. You could use a StreamReader to read the stream into a byte array, then base64 encode it to a string. 
Wtf? This is a mess of incorrect babble. 
http://www.native-instruments.com/forum/threads/soundflower-equivlent-for-pc.220520/
[React Native](http://jlongster.com/First-Impressions-using-React-Native) from Facebook looks promising but it's not out yet.
Create the WriteableBitmap object and then use SetSourceAsync: https://msdn.microsoft.com/en-us/library/windows/apps/dn263229.aspx
&gt; FutureAccessList This looks VERY promising. Thank you!!!!!
Thank you for your time. Turns out FutureAccessList will get me what I need.
dont forget to tag the build with the version number too!
Your program: is it a WinForms or a WPF application?
Perhaps the better solution is that they shouldn't be doing non-trivial non-ui work in the UI thread. That is: Doing some kind of processing? Spin off a task or thread. Don't do it on the UI thread.
Sorry for the late reply. No, to be fully trusted you do not need a code signing licence. Starting in .NET 4.0, by default, anything run from the local machine or network runs in full trust. Regarding LoadFrom, yes, if you are loaded in LoadFrom, native images will not be loaded. For those most part, however, most assemblies do not get loaded in the LoadFrom context (the entire Framework is almost always loaded in the Load context). 
I didn't like it! Perhaps I had "too much" experience in other languages, so that the book was too tedious for me. But overall I disliked the most, that they chose to use GUIs for everything! Why not write a CLI Tool first? Why there must be a GUI? If you start learning C# and you are not familiar with the obeserver pattern, you wont understand events - which is crucial to understand how the GUI is working. On top of that a beginner gets lost in concurrency; it is imho far better to start wird linar running programs. And the worst: The book does imho not motivate one to separate GUI and domain logic! So overall it was not a book for me. I liked the [Yellow Book](http://www.robmiles.com/c-yellow-book/) much more, as the author starts with simple examples and demonstrates how to improve them throughout the book. And he does not interrupt learning process with GUI overhead!
It is possible to cast an **instance** of the *extended* class to the extended class. It is however **not** possible to cast an instance of the base class to the extended. // This is possible BaseClass baseObj = new ExtendedClass(); // Creating instance of extended and implicit up-cast it to base ExtendedClass extendedObj = (ExtendedClass)baseObj; // Down-cast of the reference stored in "baseObj" to the extended obj. // This is not possible BaseClase baseObj = new BaseClass(); ExtendeClass extendedObj = (ExtendedClass)baseObj; The second example does not work, because the instance simply is no extended class.
You cannot cast a parent class to its children. The reason is, that children classes, or extended classes, as you call them, usually provide more functionality than their parent/base counterpart. It means that the base class has less information than its extended classes, and a cast is not allowed when you don't have all the required information. You wouldn't have this problem the other way around, because if you have too much information, you can just cut out the excess. Now, as to how you can solve your problem. What I would do is include a constructor in the ExtendedClass that takes a BaseClass parameter. In the constructor, disassemble the Base Class and assign its variable values to the ExtendedClass' ones. If the ExtendedClass has more variables than the BaseClass, those can be also supplied in the constructor. Example: class BaseClass { public int A{get;set;} } class ExtendedClass{ public int B{get;set} public ExtendedClass(BaseClass baseObj, int b){ this.A = baseObj.A; this.B = b; } BaseClass baseObj = ....; ExtendedClass extendedObj = new ExtendedClass(baseObj, 2);
well my first thought was to pass it in to a constructor, and do it ExtendedClass extendedObj = new ExtendedClass(baseObj); but an example overloading the cast that you have would be cool too. so... does this help? https://msdn.microsoft.com/en-us/library/85w54y0a(v=VS.100).aspx you still create a constructor that passes in the base class and properly converts it, and then in your extendedclass... public static explicit operator ExtendedClass(BaseClass b) // explicit byte to digit conversion operator { ExtendedClass ec = new ExtendedClass(b); // explicit conversion return ec; }
This is horrible and you should burn for this. Really, don't ever do this, don't ever suggest this.
Thanks Sadly, in my case, base class is actually a basic interface that all other classes implement. So, i don't really know what BaseClass will be, or what properties/methods it'll have. So manually writing a (copy)constructor is not an option. Furthermore, the project i'm working on does casting to a BaseClass, so simply having an original BaseClass object as a property doesn't work. I need a way to 'slip in' a base class with an additional property (from the extended class).
yeah, thanks mate i'm aware of the problem, was just wondering if there's a way to do it in c#.
Unfortunately (fortunately?) you can't define custom explicit/implicit conversion operators to or from base classes. If `ExtendedClass` inherited from `BaseClass`, this explicit operator would not compile.
Can you give a bit more information? Why do you need to do this? What you are asking is not possible but maybe there is a different solution for your problem
I solved the problem by overriding protected member *OnWriteStartHeader* and adding *WriteEndElement* call at the end of the OnWriteHeaderContects method. protected override void OnWriteStartHeader(XmlDictionaryWriter writer, MessageVersion messageVersion) { writer.WriteStartElement(CUSTOM_HEADER_PREFIX, CUSTOM_HEADER_NAME, CUSTOM_HEADER_NAMESPACE); } And the result is as I expected : &lt;s:Header&gt; &lt;headerv1:responseMessageList xmlns:headerv1="http://somedomain.com/Header/Schema/V1"&gt; &lt;message&gt; &lt;type&gt;WARNING&lt;/type&gt; &lt;code&gt;MSG0004&lt;/code&gt; &lt;messageText&gt;Data not found.&lt;/messageText&gt; &lt;/message&gt; &lt;/headerv1:responseMessageList&gt; &lt;/s:Header&gt; 
&gt; Why don't you know what class it will be? It almost sounds like you want to extend the class at runtime? I simply don't know what type of the object my code will have to handle. This is part of the bigger project. &gt;Why don't you just bake in the functionality you need to the base class? See above. I can't change any of the base classes/interfaces &gt;Can you explain what you're actually trying to achieve by doing this? I'm not convinced this is the right way to do things, but without knowing why you're trying to do it this way it's hard to tell you the right thing to do. I've modified a part of the project i'm working on. One of the methods internally uses a delegate that whose arguments are *(Base b, object value)*. First argument is of type *Base*, but in reality it will be of type *BaseClassN* (not know which exactly). Second argument can't be changed, aswell as the method or the delegate it uses. Basically, i'm a code monkey, given a concrete problem, without any means to change anything but fix the problem). Now, in my case, i somehow need to send 3 arguments: *(Base a, Base b, object value)*. Without changing anything...
Could you use jquery to send the html back to a controller action as a parameter via an ajax call?
From your description it should be interface IBase { } class BassClass1 : IBase { } class BassClassN : IBase { } class ExtendedClass : BassClassN {public int B { get; set; } } // not IBase ExtendedClass extendedClass = new ExtendedClass(); BassClassN baseClassN = (BassClassN)extendedClass; IBase extendedClassInterface = (IBase)(extendedClass); IBase baseClassNInterface = (IBase)(baseClassN); At some point in your code, you will be creating an instance of ExtendedClass and passing that around. You would use IBase as the parameter to functions. If you need to call specific properties then you would do this private void ProcessUnknown(IBase unknownBase) { if (unknownBase is ExtendedClass) { ExtendedClass extendedClass = (ExtendedClass)unknownBase; extendedClass.B = 1; } }
http://en.wikipedia.org/wiki/SQL_Server_Compact Written by Microsoft for this purpose. Seen it used and it works well. Be warned that its not too tricky to crack open the database as a user digging in the files unless you add a password.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**SQL Server Compact**](https://en.wikipedia.org/wiki/SQL%20Server%20Compact): [](#sfw) --- &gt;__Microsoft SQL Server Compact__ (__SQL CE__) is a compact [relational database](https://en.wikipedia.org/wiki/Relational_database) produced by [Microsoft](https://en.wikipedia.org/wiki/Microsoft) for applications that run on mobile devices and desktops. Prior to the introduction of the desktop platform, it was known as *SQL Server for Windows CE* and *SQL Server Mobile Edition*. The latest release is the SQL Server Compact 4.0 supporting [.NET Framework 4.0](https://en.wikipedia.org/wiki/.NET_Framework), and dropping support for [Windows Mobile](https://en.wikipedia.org/wiki/Windows_Mobile) in this release. It includes both 32-bit and 64-bit native support. SQL CE targets occasionally connected applications and applications with an embedded database. It is free to download and redistribute. An [ODBC](https://en.wikipedia.org/wiki/Open_Database_Connectivity) driver for SQL CE does not exist, nor is one planned. Native applications may use SQL CE via [OLE DB](https://en.wikipedia.org/wiki/OLE_DB). &gt;==== &gt;[**Image**](https://i.imgur.com/gQ5J449.png) [^(i)](https://commons.wikimedia.org/wiki/File:Sql-server-ce-4-logo.png) - *SQL Server Compact 4.0 Logo* --- ^Interesting: [^Microsoft ^Sync ^Framework](https://en.wikipedia.org/wiki/Microsoft_Sync_Framework) ^| [^Comparison ^of ^relational ^database ^management ^systems](https://en.wikipedia.org/wiki/Comparison_of_relational_database_management_systems) ^| [^Embedded ^database](https://en.wikipedia.org/wiki/Embedded_database) ^| [^DatabaseObjects](https://en.wikipedia.org/wiki/DatabaseObjects) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cojb9h9) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cojb9h9)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
 var myIntegers = new List&lt;int&gt;(); //use a list instead of 5 variables while (myIntegers.Count &lt; 5) //if the list has less than 5 ints then ask for input { int toAdd = -1; if (int.TryParse(Console.ReadLine(), out toAdd)) //use tryparse as an invalid int will cause your program to break { myIntegers.Add(toAdd); } else { Console.WriteLine("Please enter valid integer"); } } var average = myIntegers.Average(); //theres already a function built into List&lt;int&gt; that works! Warning - have not actually run this code but I assume it might work. Let me know if you have any questions :)
Hook into the keyup event? Then check the inputs are valid and if they are update the output.
lol. i wasn't even going to until i saw it on the msdn site. why is it horrible?
XML is a little better for deserializing strongly-typed objects since it carries the object type name with it. Ex: &lt;basket attr1=""&gt; &lt;items&gt; &lt;orange size="10"/&gt; &lt;banana length="25"/&gt; &lt;grape count="15"/&gt; &lt;/items&gt; &lt;/basket&gt; vs { "items": [ { "size": 10 }, { "length": 25}, { "count": 15} ] } Deserializing with JSON you'd have to do some custom funnery to figure out what the different types in the items list are, XML carries that in itself.
The example on MSDN is different. There you return a completely different type (and a value type). But with your example one would assume a simple down cast, but in fact gets a **new** instance. That's absolutely not what one would expect when looking at the code.
I just copied the code and changed the class names... its doing exactly what the example is saying. that said, i agree that you wouldn't want to create a new instance. and given that you cant actually do this with an inherited class, i guess i would just do it in the constructor and pass the values through. 
It's similar to using `String.Format`; if you could have bad user input there, then you can have bad user input with interpolation. Or perhaps I'm misunderstanding; perhaps you're referring to the programmer making typos in the string? It wasn't clear in the article, but IIRC, interpolated strings are checked at compile time and Roslyn/Visual Studio support full intellisense and syntax highlighting of variables used in interpolated strings.
Thanks, your help has been invaluable. I somehow had a mental block with making that last step but I've managed to remove that blurring of the two layers that was there before!