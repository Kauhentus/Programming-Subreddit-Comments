&gt; That's pretty huge. Disagree. Compared to what? Yes, you have to re-link and re-compile. It is a breaking change. As far as breaking changes go, it's about as minor as you can get. "Pretty huge" would be actually changing the shape of the api surface, for example. A field to property change likely doesn't even require any consuming client code changes (though it could). Only simply a re-link and re-compile.
Is it dotnet tho? I see dotnet and core nowhere on the page.
I'm a big fan of Jetbrain's dotTrace as an easy to use &amp; interpret profiler. For more advanced scenarios, PerfView is very powerful, but it's also got a much steeper learning curve.
Advanced only relative to Udemy's other, previous C# courses, I would say.
&gt;VSCode is great but getting the full benefits of writing C# and all the tooling built-in just isn‚Äôt possible in VSCode. &amp;#x200B; It is? All you need is the C# extension and the unit test extension installed and you're good to go. &amp;#x200B; I'm not telling you what editor to use, just answering your question about caveats with dotnet development on non-windows machines.
&gt; Inversion of Control I would not call this an advanced, or even really intermediate, topic.
Also, it tends to mess up your stack traces. I've worked on a project (CQRS web backend, underneath MVC) where all incoming calls were routed through a dispatcher. Dispatcher would look at the incoming request (say, SaveFileRequest) and use reflection to find the right handler (SaveFileRequest -&gt; SaveFile -&gt; SaveFileHandler) and then use reflection to call a method that's guaranteed to exist by convention, SaveFileHandler.Invoke(args). Because of this, any exceptions in the log start at the handler, and you lose the original calling context. It also means that your intellisense won't see that it's called by the dispatcher, so it's harder to navigate the code in VS and see all references, which makes it harder to learn the project. Can you do it? Sure! Should you? Maybe not. Depends on the specific circumstances whether the reflection is necessary. Worth also noting that if(obj is SomeType) is technically reflection, too, so there's certainly common, best practice uses.
Thread-safe, perhaps. `async` is pretty dang easy. There's some depth to understand under the covers, but not a whole lot imo. Or at least I would say async isn't advanced until you start aggressively trying to eliminate async state machines and allocations, when you get into task completion sources, for example.
Are you retarded?
You‚Äôre right, but my response was in a way saying that a senior isn‚Äôt just about knowing language specifics. Being a senior means you can apply them well.
I use it on Mac, Windows and Linux daily. Strong on all 3, embrace it!
I appreciate the input but I‚Äôm more concerned about what Windows vs. macOS **both on a Mac** might offer when using Visual Studio. Using VSCode requires a bit more configuration that a plugin if you want the compiler to operate in a similar fashion to VS, at least in my experience, such as setting up a build task. It also doesn‚Äôt have the built-in starter templates that VS has. I‚Äôve also noticed the compile time is slower, at least in Windows, in VSCode vs VS. This maybe just my experience but I‚Äôm not surprised considering VSCode is an Electron app and VS is native.
Because, against common interpretation, C# can be incredibly fast. Incredibly fast. Yesterday I wrote a lightweight spinlock as `Threading.SpinLock` is actually more of a hybrid lock, and the generated assembly for it is the exact same as C and only 1 instruction better than perfect
Is that a problem, if i don't want to pay for pdf's? Some normal ebbok reader compatible format, or the paperback is okay.
Much appreciated. I have a stack of reading material left to dig into haha, so I'll be in for quite a ride. Just wanted to see if anyone could just throw out a list of things to watch out for while reading and you delivered, thank you!
They have albeit really slowly - the ‚Äústandard‚Äù across frameworks used to be 10. Definitely slower than the arms-race.
On their site &gt; NET Core applications Good! &gt; but it's also got a much steeper learning curve So what I'm trying to figure out is what part of my function is slow OR if it's 'slow' because it's waiting on memory. The last profiler I tried said this function used 33% of the time and then everything else used no more than 10milliseconds so it looked like the app was idle 50+% of the time. Will either of those profilers make it clear if it's slow because of memory? The array is 18K and google says my L1 cache for one core is 32K so I'm wondering why it appears to be idle. From what I can tell nothing is slow in my function except one line that is calling functions using a function pointer in an array
Why are you writing foreach **x** in fruits and NOT USE X in the function body. That's a hint of what went wrong
One hint on readability. Just because you can squeeze something in on line, it doesn't mean you should.
I'd argue that being a senior programmer is less about knowledge of the language and more about knowledge of design and architecture concepts. A senior dev should be able to be dropped into any other language and not lose much value. You should not only know how to properly code, but also properly run a team of developers (eg. be a scrum master if you're a scrum team). You should be constantly looking for ways to improve processes and code quality, peer reviewing your teammate's code and enforcing coding standards (and setting a coding standard if you don't have one). In short, a senior developer is one who is thinking about the next quarter, not the next requirement/project. They look at the big picture and ensure they and their team are coding not only the right things but in the right manner. Also, I wouldn't consider ANY of the topics Udemy listed as advanced. With the exception of await/async, I'd use any/all of those topics in an interview with an intern. I wouldn't expect them to be proficient with all of them, but I'd expect them to be familiar with them... especially LINQ, Nullable types and Generics.
If you want to open a SQLite database from .NET you can use [System.Data.SQLite](https://system.data.sqlite.org/index.html/doc/trunk/www/index.wiki) which is an ADO .NET provider for SQLite
That‚Äôs a great topic, but a little more than advanced. Should first learn how things work &amp; then question how things work.
A lot of responses seem to involve what I‚Äôd call non-advanced topics. SOLID - not advanced Design patterns - nope I mean to be a senior dev; you need to know patterns in general. But understand why they are good. It‚Äôs not good enough to just go; I‚Äôve used patterns so the code must be good. Also be able to recognise patterns even if the terminology is different. Real advanced topics are knowing low level garbage collection information; structures of objects in memory. Understanding cache coherence; multi-threading at the low level etc.
What do you mean the generated assembly? As far as I know, c# is compiled to IL which is JIT compiled by the CLR at runtime. Maybe there are compiler flags you can set to create object code?
The JIT creates machine code, yes. You can dump this machine code into assembly using sharplab.io or, as I do, using a debug version of coreclr and setting the correct flags
Oh, interesting, thanks
:eyeroll: Don't click that. [Actual Humble Bundle Link](https://www.humblebundle.com/books/microsoft-and-dot-net-books?utm_source=share&amp;utm_medium=ios_app)
You also get the books in .epub format in Humble Bundles.
"Design Patterns" are like grandma 's recipe [https://youtu.be/e4MT\_OguDKg?t=42](https://youtu.be/e4MT_OguDKg?t=42) .
&gt; You are concatenating a string and an object. You want to print the value of the object This overload of `Console.WriteLine` will work much like `string.Format`.
If you want to make solid foundation the best is to demonstrate with all examples. When I switched from C++ to C# I picked up [Essential C#](https://www.amazon.com/Essential-7-0-Addison-Wesley-Microsoft-Technology/dp/1509303588) and start doing each example. I would type in the code and run it. You can do 2-3 example a day. The book has example for each concepts and it's big enough to understand the concepts and can be done within 15-20 minutes time slots. I found few good thing about this: 1) You get familiar with C# style 2)Learn about available libraries &amp;#x200B; For example: One of the code base I was working with lot of path were build using contacting string with "\\" char. However, C# has Path.Combine that can easily be used. It makes code more readable.
Joe Albahari gave a pretty interesting [talk](https://youtu.be/z8DY5DndmxI) on this a while ago.
Ah shit bruh sorry mayne
Check out "out". That is your problem, because you are passing something in, instead of it coming out of your function. That is my short phone answer. üòÅ
You haven't mentioned what the problem is. Why is 'z' an 'out' parameter?
What's it doing? Does it compile?
i shouldnt have made the screenshot with the "out" being thre, ignore "out"
a local or parameter named x cannot b e decalredin this scope.......
It's very subjective but I'd say if you follow SOLID the rest is matter of experience. Difference between Good and Bad dev isn't how much they know by heart but rather is the end result a vomit pile of spaghetti code that is unmaintainable or a simple clean structure that even an idiot can understand down the line?
Ah. You already have x getting passed in. Change your for loop variable to something else you don't already have. Like "a".
For(int a =0; a !=y; a++) If you want to use x, use it like this: For(int a =x; a !=y; a++)
Might wanna slap `[MethodImpl(MethodImplOptions.AggressiveInlining)]` if we're going for performance gains.
wtf? thats fucked up....shouldnt we use the arguments we give, inide the function itself??
Yes, but you have to create a variable to use in your for loop to be the counter. You can't create a second variable with the same name as one that is already created.
so how do i then connect for example "x" to "a", if it cant be the same letter then i have assign them to each other right?
You'll need to write some p/invoke bindings for the API, if they don't already exist.
Correct: For(int a = x; a!=y; a++) You declare a as an int, then assign/instantiate the value of x.
Where's the question?
All three elements in a for loop are optional. The statement could simply be: for(;x != y; x++) { Console.WriteLine(z); }
That works also.
I'll say this much, with memoization you can often eliminate the majority of the performance issues. For example, we use reflection to map events to a class's methods based on attributes. The initial routing is slow, but all future routing is compiled expressions and cached for future use.
Someone rooted and close minded to the general advancement of solutions with influence in an organization is generally toxic. This person could be a 4 year lead or in your case, a guy with 28 years experience. If this truly is the case in an org the best thing to do is just run. You won‚Äôt change their mind and clearly they will have far more pull than you. Just because an individual has a ton of experience doesn‚Äôt mean they will be rigid with their solutions. They may be thinking about a lot more aspects than you may not be looking into. This can definitely separate different levels in the tech org.
The chances your app is waiting on memory - very low. The chance that your app is waiting on _another thread to finish_ are pretty high. With basic cpu instrumentation like most Core apps support (VS profiler for example) you need to keep in mind it could be idle sitting for another thread to open up (another thread is doing work, find it) or it could be an async task like a database or http request or file i/o which won't cause CPU cycles if its async. If you can't isolate what is waiting, you need to profile other things like your database or http requests. If it's memory, you'll know because your machine will be above 90% memory usage which shouldn't happen. 80% is the normal cap, and anything above tends to be swapping in and out of the page file, aka stage i/o.
https://graphics.stanford.edu/~seander/bithacks.html
https://graphics.stanford.edu/~seander/bithacks.html
is it possible to do .Net framework on Linux/Rider?
I bought the package up to $8 being stingy. Now I‚Äôm kicking myself. Anyone wants to depart with Microsoft teams and xml for beginners from the upper tier package?
can you do .Net framework on a Mac?
can you do .Net framework on a Mac?
https://github.com/ZacharyPatten/Towel My library has generic mathematics, symbolic mathematics, multidimensional sorting (my omnitree data structure), etc. Some of it would probably be considered advanced. Like how you can use generic types, runtime compilation, and delegates to break type safeness in C#. Anyone who doesn't know how to use delegates is not advanced in my opinion. :P Function pointers are probably the most useful type in any language, not just C#. So if you don't have a solid understanding of delegates... Then start learning them. :)
I have a problem similar to this. I have one of those worlds like minecraft where the player creates their own world as they go along. So I *have* to be able to use the file and directory classes.
What if you add an abstract property in GenericItem?
A huge amount of my current place's source code uses reflection and it gets confusing as shit sometimes.
Neither is particularly good for distinguishing between computation and memory latency (although PerfView can, more or less, it's a rather more advanced profiling task). But that's not actually what you need, anyway - whether it's CPU or memory will look the same in pretty much any profiler, it won't look like it's idle. dotTrace can't tell you why your app is idle, but it *does* account for blocking time by default - if your code calls a function that spends a second "idle" waiting for reading a file from disk, it will show you that `File.Read` took one second. This is one of the reasons I think it is a very easy to use profiler; it provides easy to understand latency measurements out of the box (and it's easy to switch it to CPU time only when that's actually what you need). PerfView on the other hand can tell you *exactly* why your app is idle - you can follow wait chains across processes, you can see the impact of kernel drivers, the disk latency, etc. etc. etc. The downside of having *so much* available is that you have to pick out which parts are important for your scenario, and that can take a lot of work sometimes.
To read bit number `x` from byte `b` ```csharp byte result = ( b &gt;&gt; x ) &amp; 1; ``` ================================================================== To read bits number `x`, `y` and `z` from byte `b` ```csharp byte result = b &amp; ( ( 1 &lt;&lt; x ) | ( 1 &lt;&lt; y ) | ( 1 &lt;&lt; z ) ); ``` ================================================================== To read bits number `x`, `y` and `z` from byte `b` aligned to lowest bit ```csharp byte result = ( b &amp; ( ( 1 &lt;&lt; x ) | ( 1 &lt;&lt; y ) | ( 1 &lt;&lt; z ) ) ) &gt;&gt; ( min of x, y and z ); ``` ================================================================== To set bit number `x` in byte `b` ```csharp b |= 1 &lt;&lt; x; ``` ================================================================== To set bits `x`, `y` and `z` in byte `b` ```csharp b |= ( 1 &lt;&lt; x ) | ( 1 &lt;&lt; y ) | ( 1 &lt;&lt; z ); ``` ================================================================== To clear bit number `x` in byte `b` ```csharp b &amp;= ~ ( 1 &lt;&lt; x ); ``` ================================================================== To set bits `x`, `y` and `z` in byte `b` ```csharp b &amp;= ~ ( ( 1 &lt;&lt; x ) | ( 1 &lt;&lt; y ) | ( 1 &lt;&lt; z ) ); ``` ================================================================== To toggle bit number `x` in byte `b` ```csharp b ^= 1 &lt;&lt; x; ``` ================================================================== To toggle bits `x`, `y` and `z` in byte `b` ```csharp b ^= ( 1 &lt;&lt; x ) | ( 1 &lt;&lt; y ) | ( 1 &lt;&lt; z ); ``` ================================================================== To replace bit number `x` in byte `b` with `i` ```csharp b = ( b &amp; ~ ( 1 &lt;&lt; x ) ) | ( i &lt;&lt; x ); ``` ================================================================== To replace bits `x`, `y` and `z` in byte `b` with `new` ```csharp byte mask = ( 1 &lt;&lt; x ) | ( 1 &lt;&lt; y ) | ( 1 &lt;&lt; z ); b = ( b &amp; ~ mask ) | ( new &amp; mask ); ```
&gt; If it's memory, you'll know because your machine will be above 80% memory usage which shouldn't usually happen. 80% is the normal cap, and anything above tends to be swapping in and out of the page file, aka storage i/o. I meant waiting for RAM to load up. They say L1 memory is very fast while L3 is pretty slow and no cache is very slow. I have no idea how to optimize this function. I need hints. It's a state machine. All it's doing is accessing an array, looking at specific bits then doing something with the next value (usually a compare or a jump). Then repeats. Just a million times. I reran it 1K times so results will be more stable
your best bet might be grabbing the sdl2 bindings and reading up on sdl2 tutorials. if you search c# sdl2 github you will find the bindings. drawing to a framebuffer isn‚Äôt really done anymore in the modern gpu era.
Vue
Can you provide a reason why I should use Vue over the others?
I assume you mean .NET 4.x? No, that is Windows only. You can only use Mono or .NET Core on Linux. Rider can be used on Windows to do 4.x, Mono, and Core.
If the point is building up C# skills, probably best to focus on Razor. If it's just general .NET web developer skills, I would use just vanilla javascript. It's most important to learn fundamentals before you move on to learning frameworks
I guess my purpose is to mainly build up my .Net framework skills as well as staying on top of modern web dev frameworks
Keys is a collection containing keys in the fruits dictionary (what is being written to the console). For what you are trying to do you would want to change to: foreach(var fruit in fruits.Keys) { Console.WriteLine($"these are the keys: {fruit}"); }
I understand. Now I suspect it's actually my code and not memory. Here's what it is in a nutshell. Essentially lots of bitwise operations and if statements. int pos=0; while(true) { var a = machine[pos] | (machine[pos+1]&lt;&lt;8) if(a &amp; 0x8000) { pos = machine[pos+2] | (machine[pos+3]&lt;&lt;8) continue; } else { var pos2 = pos+2; while(true) { if(machine[pos2] == a) { pos = something; break; } else{ pos2+=5; } } } }
If you want to learn web development in general, I would suggest you write an [ASP.NET](https://ASP.NET) Core API and a ReactJS front end that uses the API. Razor is a good skill to have if you're developing an [ASP.NET](https://ASP.NET) Core app, but it's pretty limited in terms of building interactive web sites.
Absolutely
Most startups are moving away from server side rendering. React is currently the most popular js framework. Not saying any choice is wrong, each tool has its use, but might as well go with what's being used.
You‚Äôre passing a value into an out parameter. You‚Äôre also defining a local variable with the same name as a parameter.
This right there! Right on!
&gt; I am making an tool that will grab all saved emails and passwords from Chrome For what purpose?
Technically you need mono for .net framework on Mac. .net core itself runs natively. A little confusing I know. Think of .net framework and .net core as parallel universes with .net core being the newer, more supported flavor and by now it is extremely .net framework compatible
I would probably refactor out some of the inheritance to use interfaces instead. For your main question, I don't think that Item should inherit ItemType, but rather have an ItemType property, which could be an enum or class with an ID property. Then you could use ItemType ID as your dictionary key.
In addition to sharing a library, OP wants to be able to run migrations using core tooling when he's using core and framework tooling when he's using framework for the same net standard ef core library. As far as I'm aware that's not possible because the tooling in dotnet core is for ef core and the tooling in framework is for EF 6. So yes, OP can create a net standard library for EF core and use it in framework, but migrations can only be run in EF core.
In my little experience the concept of IoC, DI,... is very easy but to use it correctly is the hardest part. There is a very steep learning curve to it which can only be "mastered" over a long time.
How is machine defined and are there any other threads accessing it at the same time? If not, it just looks like you've got a long running operation rather than the implementation being inefficient. Some jobs just take time.
My way of thinking was something like this: GenericItem -&gt; ItemType -&gt; Item \~ -&gt; Weapon -&gt; Sword \~ -&gt; Weapon -&gt; Lance \~ -&gt; Scroll -&gt; SimpleScroll &amp;#x200B; GenericItem have ID, name, InventorySlotRequirements and imagePath properties. ItemType (for weapon) has minDamage, maxDamage and player requirements like min stats or class/subclass. Item would be the actual item. &amp;#x200B; A player could use a red or orange sword, but since they both were swords, they would increment sword proficiency. But on Equipment a weapon could be used, be it sword, lance, bow, etc. I could have a list of proficiencies for all kind of weapons, but i wanted to be able to add new weapons without having to change player class, and to use Item as a primary key in dictionary i would need to create a new Item. (or at least that is how much i know about dictionaries)
That title made me die inside a little.
I did not know about that, thanks for that link. That has me pretty much convinced to switch to `string` all the time. I imagine it would be a rare issue but I'm sure that's exactly why avoiding `String` is a good idea!
Go with ReactJS. React is gaining popularity while Angular is losing popularity. I would recommend against Razor, because using ReactJS will force you to build a proper API with things like JSON Web Tokens which in my opinion is a more valuable skill than traditional cookie based authentication / razor views in 2019.
Dipique:IDieable{ Void Die(bool inside, double degree){ If(inside){ If(degree &gt; .2){ This.dispose(); }else{ This.cancellationToken = true; } } } } See? It‚Äôs fun!
Found a solution for the problem (i think) that i believe is what you sugested? About interfaces, shouldn't they be used if all the sub classes had the same methods?
Maybe split it for now... make it headless for starters and that will buy you time to decide on your front-end.
&gt; I'm even impressed of how good .NET Core actually is .Net's always been impressive, and really solid. It gets some hate, being from Microsoft, but it's been a top tier platform since day one and it's progressed more rapidly than some other similar platforms (:cough: java). And they got to spend 15 years on full Framework along with the various frameworks that popped up (mono, xamarin, .net micro), and then start fresh in a lot of ways with .Net Core, with open source and cross-platform in primary focus.
Disclaimer: I'm in mobile and won't bother trying to decipher hundreds of lines of code on a tiny screen. If I understand your question right, you have a player at a certain square on the board and you have the result of a die roll. You want to move the player to the appropriate square based on that die roll. Are you storing each player's state? This is a requirement - if you're not storing a player's state then your program has no idea where a player is. So, assuming you are storing the state (which should obviously include the square each player is on) it should be a simple matter of updating the player's position by adding the result of the die roll to the player's current position. E.g. if they're on square 11 and they roll a 4, they're now on square 15. Rather than a wall of code, are you able to explain in a few sentences what you've tried and what result it produces?
We normalize *everything* to `/` on the way in, and then only environment-specific, path using service implementations have to worry about swapping back to `\` for Windows. We don't actually run on Linux, but we had to solve the problem mixing local and cloud storage.
Run dotTrace and see what it tells you. (Probably that you're spending all your time throwing/catching IndexOutOfRange exceptions)
Its not about performance. The advantage is your sanity, and making it so other programmers don‚Äôt hate working with your code. When you make something public, you are saying this variable is supposed to be used outside of this class. Marking something as private means that only that class needs to use this variable. It is really important to make classes as private as possible, because when anything can change anything, then anything can break anything, and the program becomes a mess.
You want to expose as little as possible not necessarily for performance but for consistency in design and usage. For example, you might have an instance of Employee that has a Salary, but the object calling for the Salary value doesn‚Äôt need to know how it‚Äôs calculated or be able to change the way you are calculating it, just the value. Check out more about [encapsulation](https://en.wikipedia.org/wiki/Information_hiding) and [access modifiers in c#](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/access-modifiers) to get a better idea.
I have only one point: if you want to use enums you should think: can enum value have a functionality? For example, Sword enum value? Some methods? Some data? If it's so, then use classes instead of enums. I think key in a dictionary should be comparable or to implement hash value for itself, so any class satisfying those constraints can be a key in a dictionary - you don't need to limit yourself with enums.
Yes, I discovered the hard way that paths must be normalized on the way in :) &gt; have to worry about swapping back to \ for Windows Except you don't have to do it if you're only going to use it to manipulate the actual files (Windows syscalls treat both `\` and `/` as path separators). Only the damned Path class might care &gt;: BTW, do you know about a better NuGet replacement for the built-in Path class? Another thing that burned me was that `Path.Join` of relative, followed by absolute path (e.g. `a\b\c` followed by `c:\d\e\f\z.txt`) gives a weird mashup as a result...
I've been wondering about this too. I'm working in visual studio / c# and I've just been making everything public so that I can reach it with unit tests, but I feel like I shouldn't be doing that, and I just don't know.
I think a couple of examples might be easiest to demonstrate this. Let's say you have a variable levelName that stores the name of the level you're working with. You internally set the value of levelName to "Level 1" when you create the level. You have a trigger system that stores events and the name of the level they're supposed to happen on. But because it's public there's other code that comes through and changes it to "Level 10." Suddenly that trigger never fires because the user is on the "wrong" level. That might be a really hard bug to find. If that variable was private (and more importantly readonly) then it could only be set by the constructor. If anything tried to change it you'd get a compile error rather than a random runtime bug. Compiler bugs are simple to spot and impossible to ignore since the game just won't compile until they're fixed. As another example let's say you have a variable named weaponName that holds the character's weapon name. You realize later that you need to overhaul the weapon system and while you keep the variable you completely change the usage of it. If that variable is private you're fine. Nothing else could possibly be using it. But if it's public now there could be other parts of the code using that variable incorrectly. Finding and fixing all of those references gets tricky and can lead to really subtle bugs. To fix this you'd have a method (with a descriptive name like GetWeaponName()) that the rest of the code uses. Want to change how weapon name lookup works? You can do that without changing any of the calling code. Want to check to make sure the weapon name isn't null? Rather than do that from every single piece of code that accesses that variable just call the method and put the validation in there. One check instead of hundreds. TL;DR - it's mostly about making the code less brittle and much easier to change and maintain.
That‚Äôs very thorough. Thanks! I‚Äôll definitely keep those things in mind
You can use existing NET FX dlls in NET Core 3.0 - eg. WPF with syncfusion and some other stuff that uses P/Invoke Code from a few decades ago
r/titlegore
Try inserting an await before the savechanges call.
I did something pretty cool with reflection yesterday that really blew my mind. I built a base model class, and a bunch of other classes that inherit from it. And then built a base repository class that takes in a generic type parameter, and all the model classes have their own repository that inherits from it and sets what T is. So polymorphism. But then the next requirement I have to get working is the ability to export each database table to an Excel spreadsheet. So I added another method to the base class to polymorphically generate an Excel file. I used reflection to get a list of properties for each class, and used that to generate the columns for Excel. Okay, but the properties have names like IpAddress and I'd rather it be IP Address. And I'd like to exclude certain properties from each class. And maybe be able to specify the order some way. So I created a custom attribute with two properties. Name and order. So now I can use reflection to pull a list of properties. And then add .where() and filter out properties where my custom attribute hasn't been defined. And then .orderby() and sort by the order field. And when generating the header row, if I define a name it will override the property name with the custom name. Reflection can do some really amazing things. It's pretty mind blowing.
Not .NET framework, but Mono works fine on Mac. It should be binary compatible but there's always some lib which depends on Windows.
Maybe not with basic stuff like linq queries, but knowing how to build a method with a lambda parameter to make the method extremely flexible and powerful. Like, knowing how to actually utilize it to do really powerful things.
Maybe this helps: Beginners have often trouble getting things to work, so they focus on making things possible. Once you are a little more experienced it becomes much more important to make mistakes impossible. If you look at it like that it should become obvious that the private modifier helps you keep others and "future you" from accessing things that you shouldn't be accessing. It's basically a way to document the intended way to use your code that the compiler understands so it can help you find places where you didn't stick to your intentions.
 `await ThreadRepository.InsertThread(currentThread).ConfigureAwait(false);` &amp;#x200B; yup tried that, still throws `"New transaction is not allowed because there are other threads running in the session."`
Unit tests are considered 1st class citizens and a method can be made public if a unit test needs access to it. My suggestion is to make internal if you can, that way it isn't exposed to unnecessarily as part of your public API. Also, you normally want to avoid testing private methods since your tests should only care about the exposed public method behavior.
Right bevor the saving in the loop
Use AddRange, or move SaveChanges out of the loop.
... awesome, I will apply these changes. Thanks
I find that a large portion of problems and also advantages seemingly arising from something being public/private are actually problems with trying to maintain state between calls. So in order to keep things simple and as maintainable as possible, I try to avoid maintaining state, and instead I try to have functions that take everything they need as input, and return anything they change as output. That way I don‚Äôt need ‚Äùglobal‚Äù variables and I don‚Äôt need to worry about visibility. Also testing is quite a lot easier.
Very interesting, Fist of all it would be nice if you had a landing page so people like me who are interested on your project could subscribe to a mailing list (or to the social bomber bulk whatsapp messaging :P), so that later we can be notified once the project becomes available. Second,a one feature that i think it would be interesting for social media marketing, is to write/create a post once but publish to multiple social media platforms. This would avoid the work of copy and pasting from here to there or even logging on multiple platforms to post the same thing. The user can have the social medial profile previously associated to his Social Bomber account and when he wants to publish something he can select all the social medial accounts we wants to publish to eg. Facebook, Twitter, Instagram, Wordpress etc. Of course this can be challenging because depending on the content and post size it might need to handled differently depending on the platform of destination. For example twitter has max a character limit, instagram facebook and wordpress have its own characteristics, but none de less i think it would be a killer social marketing feature By the way, which stack are you using to build it? are you accepting contributions?
yup i had considered those options (and they do work) but that means it only updates the db once the list is processed, i'm trying to find a "real time" solution, so each thread appears in the db as soon as it's processed. It's a purely academic exercise but i'm sure i'd find a real world application for a similar solution at some point
Razor is what you're looking for with C#
You could try instantiating a new instance of the data context?
You want to dynamically get all the case values?
Yes, actually.
I have seen pdf as format at the bundle page
maybe you could use an enum?
One real life example. Im junior, creating message queue consumer service. Not simple but fun taks. After days of testing i figure out that our test server is ok with 10-75 consumers at a time. I make config where you define the value, i load it in a constrictor i even have admin config so i check that the range is between 10-75 and i make the variable public. All is fine until another junior dev gets to use it, sees the public property, knows that on production we have couple of thousands of consumer, wants messages to be processed faster puts in there 1000... Booom, test server blows up, takes me 3 extra days to find a hardcoded value of 1k. Whish i made it private.
You could get the cases with Roslyn, but I imagine you want something simpler. Instead you can refactor your code with a method lookup table. This is a paradigm in which your commands are stored in a key value data structure. A delegate is a C# that allows you to add a pointer to a method into that data structure. All methods have to share the same inputs and output format. delegate void Operation(); Dictionary&lt;string, Operation&gt; commands = new Dictionary&lt;...&gt;(); commands["say"] = SayFunc; commands["commands"] = TellCommands // Lookup commands[user_input](); // Print Console.WriteLine(commands.Keys);
Interesting, very promising. However, im a bit confused; Your project is based on ExtCore also but seems like Base and Extcore have exactly the same objective. Both are framework to build apps using a plugin-based architecture and one is built on top of the other? Am i missing something? By the way, I always had interest in implementing software modules using a plugin architecture, unfortunately there seems to be limited resources, are there any resources you can share that helped you get started??.
Have you been thinking about using all the options in an array. var caseOptions = [‚Äûstart‚Äù, ‚Äûstop‚Äù]; Check if exists func const checkIfExists = (item) =&gt; caseOptions.indexOf(item) &gt; -1; Switch func ...{ If (checkIfExists(option)) { switch(option) ... } }
Sorry, I forgot to tell you it's a Windows Form App, not a console app.
Thank you, I'm gonna use that version. Thanks everyone for help :)
 public async void InsertThread(Threads thread) { _dbContext.Threads.Add(thread); await _chanContext.SaveChangesAsync(); } Why did you define this function as `async void` and not `async Task`? You're also using two different context variables here.. it's not clear if you've made a typo or if that's intentional, and if so what it is you're really doing.
!thanks
so why does it work without the first x not being there? thats weird
The downside to your solution is that now your code states that for example an instance of the Sword class could be of the Lance WeaponType. If you want to tie the weapon type enum value to a given class you can create a property without a backing field, like &amp;#x200B; interface IWeapon { WeaponType Type {get;} } class Sword { WeaponType Type { get {return WeaponType.Sword;} } }
There is a simple rule in object oriented programming: Make everything private over which you would lose control if you made it public. Methods and properties can be public, but fields not so much. That is the reason why Unity has the [SerializeField] attribute that allows you to tell the serializer that you want a variable to be assigned with a stored value. Since everything that happens with the serializer is done outside of C#, you do not need to give access to the field at all. I suggest, you should step away from Unity and just look at C# as a language that has nothing to do with being a scripting interface for game engines. Learn the language and it's aspects before going back into Unity. It helped me a lot. Unity itself has so many things that need to be considered when writing code and the least one you want to have is not knowing about all major aspects of the scripting language.
How would you get to the next level if it‚Äôs readonly? Sorry if I‚Äôm missing something, I‚Äôm also a new C# user.
Obviously they can't appear in the database unless you call SaveChanges. If you want some balanced approach you may batch a certain number of threads before saving changes.
Looks like you have an active connection to the database upstream and you‚Äôre spooling records out of the database, making changes and then spooling them back in. Entity framework is designed for short running database queries (e.g in crud operations) not spooling like this. It expects you to pull the data into memory (or stream it to the ui) operate on it and save it back. If you like using Entity framework and performance is not a huge concern changes you might consider are using ToList() to execute the upstream query into memory so you don‚Äôt have the threading problem or savechanges after the whole thing executes. If this is part of a long running batch job, consider breaking it up onto smaller chunks and running the whole thing as a single stateless repeatable function which you could deploy as a function app. If this is effectively a stream of data and real time performance is a super big deal then consider the IDataReader to stream data out, the SqlBulkCopy class to write data and the new DataFlow blocks for your threading inbetween. If all that bulk copy stuff sounds like too much work then I‚Äôd argue performance is not such a big deal then.
Methinks that‚Äôs your interpretation of their requirement. OP wants to (and can) run efcore tooling in both .net framework and .net core. Your additional requirement to include EF6 appears to be yours, not theirs. If you check out the rest of the threads you will see they got it working, no EF6 wanted.
There‚Äôs quite a lot of strong views here around which front end framework you should be using when realistically you should be tackling the backend first. The front end should be interchangeable whereas your backend is the most important aspect here. Concentrate on the APIs, the data layer and the authentication and then play around with different front ends to see which you prefer. I work in Angular but I wouldn‚Äôt say it‚Äôs the best framework to get started with. As someone else has mentioned, if it‚Äôs your first dip into a proper development project then you should really get used to vanilla js so you understand the fundamentals otherwise you‚Äôll just be copying code with no clue why it‚Äôs working and you‚Äôll learn nothing that way
It's not a performance thing. It's a maintenance thing. It's like scope. Keep the smallest scope possible. Making everything public is like making all variables member variables (instead of local). You will see why you don't use public for most methods/variables once you start doing larger scale oop
As to the cross-platform Desktop UI, I'd opt for using Electron + [Blazor.NET](https://blazor.net). The latter should be ready for prime around the same time .NET Core 3.0 is released. Here's a [great NDC presentation on Blazor.NET](https://www.youtube.com/watch?v=0RfUPr0KrSM&amp;feature=youtu.be) and here are [some of their Electron examples](https://github.com/aspnet/AspLabs/tree/master/src/ComponentsElectron).
You should (already do?) know that Chrome under Windows stores passwords encrypted using the DPAPI. A dump of that file will give you the emails, but passwords will be encrypted binary data. &amp;#x200B; It would be better to tell us what you want to actually achieve. If you want to scrape passwords you aren't supposed to have ... don't ask here. If you're trying to restore your own passwords, there's probably a better way to do it. If something else... what?
I may have misinterpreted the requirements, but the point was never about EF6, the point is that migrations are not portable. You can't use EF 6 migrations with core tooling and you can't use core migrations with framework tooling.
How many threads do you have? How long does it take to add all the threads? Surely addrange then save will be faster then add save for each.
Or just learn oop. It's not specific to C#. Public/private us like member/local scope.
Your assignments are the wrong way round I. constructor. Therefore never assigned to.
man, why does everything have to be in the right place in C#...
true, there are, however, specific things about C# that are relevant to know when working with the language. This goes beyond scope, so I suggested learning the language and not just OOP.
Well in any language that would of failed just silently in some making it hard to debug your programs.
ok thanks man!
I agree. I'm just saying that it's more general to programming as a whole and not just a language.
I have used all 3 in production projects and I love React. We are currently in the process of converting a Razor based site to React and the amount of code we are able to get rid of is astounding. I don't know if the Razor site was just written poorly, but the React pages are MUUUCH faster even tho they use the same back end.
I am happy to take feedback on the Fody licensing model: &amp;#x200B; \* raise an issue here [https://github.com/Fody/Home](https://github.com/Fody/Home) or submit a pull request here [https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md](https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md) \* happy to get on a call and discuss it in person, ping me on twitter [https://twitter.com/SimonCropp](https://twitter.com/SimonCropp) or email me [simon.cropp@gmail.com](mailto:simon.cropp@gmail.com) &amp;#x200B; Some history: i spent 4 years of maintaining Fody (prob a min of 5 hours a week, hard to tell really), it became clear that IL manipulation was an approach that many people wanted to take advantage of, but very few of those were comfortable to learn IL enough to contribute. I took a 6 month break to see if anyone would step up to help maintain Fody. No one did. there were just more "please fix this" and "why is this not fixed" issues. So it was either find a way that i could justify the time required, or close down the project. I tried to get sponsorship, which was not successful, so i resorted to a "token payment" model. And we are talking 3$ a month here, i chose an amount that i figured was insignificant in the scope of how much time i figured Fody was saving people. &amp;#x200B; Yes i am currently making some money out of fody. Note that the amount it is still less than minimum wage. &amp;#x200B; It should also be noted that Fody is MIT. i am more than happy for anyone to fork Fody and start a competing, and free, project.
For loops are basically just a block of code that can be iterated. A for loop is defined by an initializer, conditional, and iterator. None of which a compulsory I.e for(;;) { Console.WriteLine(z); }
For loops are basically just a block of code that can be iterated. A for loop is defined by an initializer, conditional, and iterator. None of which are compulsory I.e for(;;) { Console.WriteLine(z); } The above defines an infinite for loop!
I am happy to take feedback on the Fody licensing model: &amp;#x200B; \* raise an issue here [https://github.com/Fody/Home](https://github.com/Fody/Home) or submit a pull request here [https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md](https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md) \* happy to get on a call and discuss it in person, ping me on twitter [https://twitter.com/SimonCropp](https://twitter.com/SimonCropp) or email me [simon.cropp@gmail.com](mailto:simon.cropp@gmail.com) &amp;#x200B; Some history: i spent 4 years of maintaining Fody (prob a min of 5 hours a week, hard to tell really), it became clear that IL manipulation was an approach that many people wanted to take advantage of, but very few of those were comfortable to learn IL enough to contribute. I took a 6 month break to see if anyone would step up to help maintain Fody. No one did. there were just more "please fix this" and "why is this not fixed" issues. So it was either find a way that i could justify the time required, or close down the project. I tried to get sponsorship, which was not successful, so i resorted to a "token payment" model. And we are talking 3$ a month here, i chose an amount that i figured was insignificant in the scope of how much time i figured Fody was saving people. &amp;#x200B; Yes i am currently making some money out of fody. Note that the amount it is still less than minimum wage. &amp;#x200B; It should also be noted that Fody is MIT. i am more than happy for anyone to fork Fody and start a competing, and free, project.
I am happy to take feedback on the Fody licensing model: &amp;#x200B; \* raise an issue here [https://github.com/Fody/Home](https://github.com/Fody/Home) or submit a pull request here [https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md](https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md) \* happy to get on a call and discuss it in person, ping me on twitter [https://twitter.com/SimonCropp](https://twitter.com/SimonCropp) or email me [simon.cropp@gmail.com](mailto:simon.cropp@gmail.com) &amp;#x200B; Some history: i spent 4 years of maintaining Fody (prob a min of 5 hours a week, hard to tell really), it became clear that IL manipulation was an approach that many people wanted to take advantage of, but very few of those were comfortable to learn IL enough to contribute. I took a 6 month break to see if anyone would step up to help maintain Fody. No one did. there were just more "please fix this" and "why is this not fixed" issues. So it was either find a way that i could justify the time required, or close down the project. I tried to get sponsorship, which was not successful, so i resorted to a "token payment" model. And we are talking 3$ a month here, i chose an amount that i figured was insignificant in the scope of how much time i figured Fody was saving people. &amp;#x200B; Yes i am currently making some money out of fody. Note that the amount it is still less than minimum wage. &amp;#x200B; It should also be noted that Fody is MIT. i am more than happy for anyone to fork Fody and start a competing, and free, project.
Model is stupid and backwards? I don‚Äôt think so, it‚Äôs innovative and a way to look for solutions to a problem you have obviously no idea about: maintaining a succesful OSS project long term.
This might be one of those internet discussions that never end, but I think you might be confusing efcore with core and EF6 with framework. You can use efcore and migrate using. .net framework project as your target. I do it all the time.
Nothing is being thrown or caught.
Put the code in GitHub and show what you've tried. &amp;#x200B; Also, why are all the school help questions posted 2 hours before the exam/cut off? Plan ahead people.
It takes 20milliseconds to run through on a 10k file. It's expected to handle up to a 100mb file. I guess 3.5minutes for 100mb is pretty fair. I was just wondering why it was slow since I was aiming for 1mb&gt;per second.
Are you seriously asking people to do the work for you? Is that the kind of person you want to be in your future job (I assume you are doing that curriculum in order to get a job)? Like someone already commented, show us what you got, and then maybe we can point to you what could be improved. You said you didn't have time to study. I find it hard to believe as it is not that complicated to find maybe 30 min or 1h every day to do something, but I am not in your shoes, you might have good reasons. But in that case, how about asking to pass the exam at a later date? I'm sure they (whoever they are) will be able to understand.
it doesn‚Äôt matter that much, its just a code organization tool. when doing personal projects that are small you can just make everything public unless you want to practice.
&gt; * raise an issue here https://github.com/Fody/Home or submit a pull request here https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md Yeah, no. I'm not a patreon.
a lot of resharper features are part of visual studio for a while now. what features did you actually use?
May I recommend CodeRush? It's only $50 and is well worth it. See also Roslynator, ViasFora, OzCode, and CodeMaid.
Clutters your API. If you make every little thing you do available for me to access then it would be confusing to me what is relevant to know about and what I should ignore to use your code. Also I could then accidental change things that make your logic stop working. I'd basically decide not to use your code, cause it would be a mess.
First attempt showed me nothing, Just said this function is slow which I already knew. Doesn't point to any lines. Trying the other options now
Because it's not a mind reader and a general purpose computer can be told to do anything the language was designed to do in any order it was designed to do it in. It's not C#'s fault you didn't understand LValues and RValues. Given int a = 100; The variable "a" is both an LValue and an RValue and can, when necessary, appear on both the left and right side of the assignment. The constant value, "100‚Äù is only an RValue and so can only appear on the right side. In your case, both the input parameters to your constructor and the properties of the class are LValues and RValues. It's valid to use them in either order and the choice of which to use is up to you. You used them backwards from the obvious intent (which is to assign the input to the property), so when the compiler finished looking for problems with your code, it found that in the constructor, the parameters and properties are either assigned to and never used or used but never assigned to. The warnings and errors generated at compile time are not there to make your life miserable. They're there to help prevent common (and sometimes uncommon) mistakes.
&gt;Clutters your API. If you make every little thing you do available for me to access then it would be confusing to me what is relevant to know about and what I should ignore to use your code properly. &gt; &gt;Also I could then accidentally change variable values that make your logic stop working. &gt; &gt;I'd basically decide not to use your code, because it would be a mess.
Currently all of your Items will be cast to GenericItem in the InventoryRecord object so they will all have the same methods anyway, unless you‚Äôre casting them to their true type to access their unique methods which is going to get really messy. I would use an interface that is your contract for everything an item can be/do and use that instead of an abstract class.
Thanks for the videos, I just subscribed. I write php and JavaScript all day for work and I'm trying to get into c\#/unity. Can anyone suggest anymore medium level tutorials?
Okay so so I first have all of my two players faces at zero, so spaceP1 = 0 and spaceP2 = 0 Once a player rolls a die, that variable increases by the number rolled and, in theory, they should move that many spaces. However the issue I'm running into is how to actually move that many spaces
Well, i'm using: 1. Searching on Ctrl+N; 2. code suggestions and hints (simplify LINQ queries, "expression is always true", "move to resource" etc); 3. importing references for pasted code; 4. detecting methods not used by anyone; 5. default implementations for many common interfaces (not sure if it is Resharper feature); 6. formatting/cleaning of highlighted code. I'm pretty sure that there are more features that i actually use but they are not so obvious. &amp;#x200B; Well, CodeLenses is much more usable in VS2019 Community version (finally you can see method usages again, not only in Professional version), but it looks like that i need a few plugins to cover my needs here and there.
so how can i help to address your concerns? is 3$ a month too much? would you prefer it wasnt MIT and u needed to install a license to use it? &amp;#x200B; Do you want to hop on a call and discuss it? or email me ?
Not OP but I don't understand. Is the error caused because OP has initialised variables in the class before the constructor?
This reeks of scam. They appear to be Word documents (suspicious from the start) When you click them they are actually zip files (red alert)
&gt; but knowing how to build a method with a lambda parameter to make the method extremely flexible and powerful like dynamically created linq that translates to sql with many search criteria?
I tried replacing it and even though VS+plugins can help, there were still some features that were missing for me. 1. Formatting. I like that ReSharper automatically breaks line at 140 chars (or whatever I configure it to). I like that it also lets me chop chained method calls on new lines, while automatically indenting them. I also like that ReSharper can automatically trim whitespace from EOL which can accidentally appear when copy-pasting something. 2. In ReSharper I can F2 on a type name and it would also rename the file it was declared in. In case the type name and file name are mismatched, it also offered a quick-fix to rename the file. 3. ReSharper can suggest members in IntelliSense from namespaces that are not yet declared in `using`. Very convenient with LINQ and really anywhere else. Closest VS can do is automatically add a `using` statement, but you need to type out the member name blindly yourself and the quick-fix only works on the same line. 4. Null reference warning when passing a value that was returned by a [CanBeNull] method into another method as [NotNull] parameter, e.g. `Path.Combine(Path.GetDirectoryName(path), "asd")` 5. Resharper can adjust namespaces on an entire project or folder. Useful when you move files around and want to fix namespaces everywhere.
For sure that: https://visualstudio.microsoft.com/pl/services/intellicode/
&gt; Beginners have often trouble getting things to work, so they focus on making things possible. Once you are a little more experienced it becomes much more important to make mistakes impossible. I really like the way you put it. It reminds me of my journey.
Use ``Dictionary&lt;string, Action&gt;``
wtf?
Do it yourself.
e.g stealing data
I will try it (since 50$ is miles better than 300$/year), thanks for suggestion.
[https://opencollective.com/discover](https://opencollective.com/discover) Discover how OSS projects make money without attempting to hinder OSS itself using license incompatible footnotes like Fody does.
Equivalent features in vanilla VS2019: 1. Ctrl + T 2. There are amny suggestions in the Ctrl + . menu although it may not have *everything* 3. Ctrl + . =&gt; "Import using statements" 4. CodeLens 5. Ctrl + . =&gt; "Implement Interface" 6. There are some cleanup tols available but again it might not do everything ReSharper does but it also has suggestions that ReSharper doesn't have I uninstalled ReSharper on my work computer a few months back because opening our large solutions had me sitting there for minutes at a time writing for everything to load up. It will take some effort to learn the new flow (like any changes to your dev tools), but I find my self not really missing ReSharper.
#3 is the biggest shock for me whenever I go back to vanilla vs.
2: Vanilla VS: Renane the file and it will ask if you want to rename all instances of the class. Use ctrl-r-r if you have more than one class in the file
4 is a part of C#8
Yeah, you can contribute to Fody using opencollective if you like that website [https://opencollective.com/fody](https://opencollective.com/fody) Your attitude towards OSS maintainers is what hinder OSS. You should think about that for a minute. \&gt; license incompatible footnotes Fake news. Go read the MIT license, it doesn't say anything about support.
Syntax? It‚Äôs a javascript, sorry my fault, but it‚Äôs almost the same in csharp
Not to sound like a dick, but: &gt; Rule 4- Request-for-help posts should be made with effort It's seriously time to start getting familiar with the debugger. Even if not understanding the warning, you could step through and watch as variables don't get the value you expect on the assignment lines, and then go review assignment in C#.
Presumably, that example would be for a Level type, not something like a GameState type.
Try IntelliSense Extender: https://marketplace.visualstudio.com/items?itemName=Dreamescaper.IntelliSenseExtender
* CodeMaid: https://marketplace.visualstudio.com/items?itemName=SteveCadwallader.CodeMaid * Roslynator 2019: https://marketplace.visualstudio.com/items?itemName=josefpihrt.Roslynator2019
Cool, so you've got state. What does it mean to "move that many spaces?" Are you talking about updating the screen to show the new position?
Exactly. If a 3 is rolled, the player should move 3 spaces. And if the player is on space 8, for example, and rolls a 3, the player should move 2 spaces to the right and one up
Unfortunately C#8 is not released yet, so this is not a solution. Also, are they planning to migrate BCL to include nullable attributes as well?
I honestly see no point in using Resharper. Tried it in 2014 and it was only slowing things down even with SSD. Plus the price is too high given the features it provides which renders it worthless. I was using VS 2013 and it was enough. I remember Resharper points out code smells - you really need that? LOL. I actually code with SOLID and other principles in mind to avoid code smells and an extra plugin for me is an overkill.
What if the file was renamed from outside of VS or if I clicked "no" on that dialog for whatever reason?
Reading it again I misunderstood OP. I thought he wanted to be able to have a shared library that would allow you to run migrations from either framework tooling or from dotnet core tooling. That's not possible. You can use a net standard library for EF core, but it's still going to be core migrations.
I don't understand.. how are you paying 300/year? Renewals are under $100 for the ultimate edition.
I always disliked resharper. A huge resouce hog., espscially on bitlocked drives. It never offered me sonething visual studio didnt have that i wanted.
For developers who aren't geniuses (vast majority of the population), they don't automatically just know how to write perfect code.
How are you displaying the player position? Is this a console program? It's important to distinguish between "state" (which is just information) and how you display things. If you're already updating state then what's left is to update the display. How you do that will depend on how you're displaying things in the first place, but let's use the example of doing this in a console program. In the console you're likely just showing the board and pieces as text, maybe "drawing" the board using different characters. If you want that display to change, you'll need to output the hoard over again (using, e.g. `Console.Write` calls). It would probably look better if you cleared the screen first (I'll leave it to you as an exercise to find out how to do this, but it can be done using `Console`) and then re-printed the board. The key to programming is being able to break down a behaviour into what it means in low-level steps. As humans we understand "move a piece 4 spaces" but a computer doesn't have that concept. What the computer does understand are things like "the piece has a property called 'position' and its value needs to increase by 4." They also understand "print these characters to the screen based on other known values, such as the pieces' positions." It ain't easy, but once you can break things down into concepts that can be represented in code, the rest gets almost trivial.
I'll be on a PC later today and I can take a closer look at your code.
It is in Monogame, which is what we are using for school. I try to break everything down into concepts, and it helps, however drawing it confuses me so much because we I output the coordinates for a player (after they roll the die) it just becomes (0, 693). It's original position was (33, 734)
Okay. Thank you so much.
Well, yeah. But knowing how to make one yourself vs knowing how to use one.
Aaaaahh, ok! These are helpful details. Debugging is a learned skill ;) So you're getting one result (0, 693) but are expecting a something else. Do you know what value you _should_ be getting?
Yes they are.
No-one really writes perfect code. Devs on day 1 will be able to figure out what a certain Resharper suggestion implies you think? Devs on day 1 will spend all day learning hotkeys of Resharper, and they'll face problems when working without it. IMO with VS2019 you don't really need Resharper.
Unity games are scripted in C#. I have no experience writing games, but that might be a place to start. There are tons of tutorials and they have an asset store (with free stuff) which let's you easily import pre-made models and textures [click](https://unity.com/)
Not being very experienced with diagramming my software architectures, I found it quite easy to follow the \[C4 model\](https://c4model.com/) and come up with high-level and easy to understand as well as more detailed and technical visualizations of a given system. A level 1/2 diagram should easily be understood by non-technical people, maybe supplemented with additional diagrams showing the general context of the system (e. g. including interactions with the other IT system) or the flow of key features.
I'm not familiar with Monogame, but from looking over the code, I wonder if the problem is in the \`GetPoint()\` method. &amp;#x200B; It looks like you're setting a new player position, but without taking the current position into account. (It's hard to say because there seem to be a lot of global (or at least class-level) variables that are hard to track). Either way, that's most likely your issue: calculating a new space without taking the current space into account. Does that make sense?
Yes, that makes sense. I need to take into account the current space. One moment, I'll edit the post
i wouldnt suggest unity because youll need a lots of time figuring out how unity works before you can focus on Csharp and the project itself. As OP said graphics are not important so it should be fine placing images on a Windows Form and animate them with a timer or algorithm etc
Throw hypothetical edge cases at it all you like, for 90% of the times you need to rename a class+file, it will work
For analyzers I'm loving sonarlint
There are tutorials for creating simple games in Unity on youtube. Unity uses VS, so it might satisfy that requirement (although since Unity has it's own editor for object placement and such, that might step over that boundary). If not Unity, you could maybe try Xamarin. I've never used it before, but I think it is now included as a project template in VS.
I find it interesting that you would rather play 500 ‚Ç¨ for PostSharp than $36 a year for Fody. There is this odd thing that people seem to feel open source isn't valuable, and shouldn't be paid for. &amp;#x200B; There an interesting podcast episode on this going very very wrong. [https://www.gimletmedia.com/reply-all/the-founder#episode-player](https://www.gimletmedia.com/reply-all/the-founder#episode-player)
I may have to ask my teacher tomorrow if using Unity is allowed for this project. Some classmates chose more basic videogames such as tic-tac-toe, as example, and these type of games can be run within a Window App Form with lot of coding
in the final solution, there will be no Sword class, just Weapon class. Sword will only be a Weapon class with WeaponType set to WeaponType.Sword.
I agree. Unity is probably not the best way to go in this situation. One of my first projects with Win forms was Tic tac toe. The next was connect four. Later I developed frogger. Relatively good starter games to create.
&gt; tooling budget _* Laughs in startup_
Also it lets you change the implementation later without the caller knowing anything is different. That‚Äôs the main reason.
2B: Regex replace \s+$ with nothing. Becoming fluent with regex is massively helpful.
The Inventory will only serve as a storage. Different items will only use their unique methods if they are placed in the Equipment, where they are cast to their original class. &amp;#x200B; However, i will study interfaces, probably i'm not understanding the solution because of the limited knowledge on them...
The Resharper attributes are also more of a hack that becomes useless if you share your code with someone not using Resharper. It is extra annoying running into this wisth open source project.
Not quite as fun, but: -Use StyleCop.Analyzers -Enable Code Analysis I end up using the ‚Äúfix this for me‚Äù options from these two a lot. You‚Äôll definitely not get anywhere near full ReSharper experience though.
For the moment, I can confirm that this has to be all done within Visual Studio resources, using Windows App Form, mostly. I will ask my teacher for more details later
How do you cast them as their original class? Which like a massive if statement?
What are the specific things? Interfaces?
Also with private methods you can change the implementation and the caller will never know
The solution I came up with only works in this particular instance. I've made a simple SQL view that returns next identity of the table. As someone else mentioned, this will only work if nobody else enters data between our fetch, modify and save.
* What is allocated on the stack and what on the heap * How you prevent or create memory leaks * How function pointers are implemented * Why you should not use foreach if you can prevent it * How and when the garbage collector works * How string comparison works and why you can and should use faster ways to store data than strings * How interaction between managed and unmanage code works in the .Net world * How you can use attributes * How the reflection works and when to use it * How multithreading works and you keep it safe * How you can use enumerations as bit-flags and some more Unity-like topics: * When you should use coroutines in Unity (same topic like the foreach thing) * How the Unity serialization works * How the user interface of the Unity Editor works * How the communication between UnityEngine.dll and the managed scripting-libraries is set up and how you can make the best of it performance-wise * What the lifecycle of objects in Unity looks like There are reasons why a lot of professional devs laugh about Unity because most of their users do not even know what happens under the hood, which results and bad code and bad games. A game engine is a tool you need to learn and master.
Replace resharper AND visual studio with just Rider. It‚Äôs what visual studio should have been now.
In the Weapon slot in the Equipment i will only check if the item is a ItemType.Weapon. And so on. Is this such a bad idea?
Is it List&lt;Expression&lt;Func&lt;T, bool&gt; and then you just apply it foreach (var predicate in list) { datasource.Where(predicate); } datasource.ToList(); // or any other kind of materialization?
Hmmm I guess not. I suppose if you don‚Äôt want to implement everything on every item you will have to cast at some point anyways. You could do something like all common Item functionality could be IItem, and weapon functionality could be IWeapon. So a weapon item would implement both interfaces. Then in your weapon slot you could do: If (item is IWeapon weapon) Which would return true and expose it if item implements IWeapon and is not null. Then you wouldn‚Äôt need to check some ItemType enum.
I struggled with this at first too. But you really should look at unit tests as a way to test overall outcome/behavior vs implementation. Think about a supermarket. You don‚Äôt care how the milk gets there, just that it‚Äôs on the shelf when you are in the store. In TDD you would stand up your test to verify a specific requirement of the code (public), then write all your implementation (private) to achieve that outcome.
.net core on Amazon (AWS) is supported well. All AWS SDK libraries have first class support, there are Amazon machine images (AMIs) with Amazon linux and .net core 2 pre-installed. Amazon Lambdas also support .net core 2. So no problems running .net core services on Amazon Linux on AWS.
/r/learnmachinelearning/
It's because you're using async void, like /u/quentech said. You're not awaiting anything from the method you're calling and hitting the next loop iteration, trying to use the context while it's still in use from the other task.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [Looking for the terms to google or libraries for live streaming functionality, details inside.](https://www.reddit.com/r/dotnet/comments/bd4fn4/looking_for_the_terms_to_google_or_libraries_for/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Im really looking for something which can do nr. 1. :(
If you have a .edu email, you can use all of Jetbrains' products for free with a student license.
You can also use a dictionary from string to delegate and use .Keys to get all the options
I've tried Codemaid + Roslynator, but like /u/Tyrrrz said it's just not the same. My solution has been to move to Rider on Windows (I already use it on Linux @ home) as it has all Resharper features built-in.
Whatever way you want to use it. One of C#'s greatest strengths is its flexibility. The main thing is being aware of all the tools at your disposal, and using them to solve problems.
IntelliCode seems great (just installed the preview) but it doesn't replace anything in ReSharper, does it?
Will either of those add types not currently included in my usings to intellisense? That's my biggest problem with vanilla VS.
Try to do WPF, Forms, UWP, EF6, WCF on Rider.
Yes, but if you want to get values (options) from outside, an array will be better (more efficient). Btw your solution is very good and clean.
How difficult it is is going to depend on your experience level, so it's hard to say with any accuracy how hard it is going to be for you. I'd argue that the suggestions for Unity or Xamarin are overthinking this task. Most basic 2-D style games are perfectly capable of being implemented even within Windows Forms and GDI+, and complicating it with additional frameworks, software, libraries, etc clouds the very concepts that your task is aiming to teach you. At this point your considerations are supposed to be about determining how you can solve a problem, not determining what software you should use to solve the problem. One way to think about it is to break up the process into "milestones". You start with something more managable and built onto it from there. Then you can look at the work for each milestone, and idetify parts you may have trouble in, parts you think you can do fairly easily, etc. And thjen tackle them one at a time. For example, a first milestone might be to have the "game" basically just allow you to have a box "jump" in place when you press a key. Then you add a capability to have obstacles come in from the side of the screen, determined by data structures in the game. Then you need to be able to tell if they touch the box, to see if the game has been lost. Then you can have some obstacles such that your box considers the top of those obstacles a "floor" and so on. To me, this should be doable within your listed time frame. And you could always switch it up a bit and have different gameplay to simplify the task. Maybe collision detection of spikes or boxes coming on-screen gives you trouble, For example, so you could switch it up for something that seems easier, such as having to jump over "cracks" (lines) in the ground that move in from the right.
added a few fixes today that I found while using it
Typically you'd construct a new object that represents the next level. You can then ditch anything specific to the previous level.
My previous job had a single team member using it. It drove me nuts. He just went out and bought it on his own dime afaik, and our code base was just littered with resharper crap that only he benefitted from.
Backpacking on this topic, but the one feature I always miss whenever I suspend resharper for being a resource hog is the unit test runner. Any good alternatives out there?
Typically you'll also have a number of classes that are internal that you're doing the work with. You can use [InternalsVisibleTo](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.internalsvisibletoattribute?view=netframework-4.7.2) to expose those to your tests. That way you're not making them public but you're still testing them. But as brolohim mentioned it's really about testing your public interface.
resharper is nice but you can actually do without those extra sauce, Vs2019 is also quite powerful maybe not as powerful as resharper yet.
Intellisense Extender does that.
Not wrong there. But if rider fits the mold of the project, it‚Äôs a far better experience.
If I was okay with using regex for the slightest formatting operations, I wouldn't be using Visual Studio.
They are not hypothetical, they are actual cases where VS proved ineffective. Renaming files to rename types is also backwards logic, what if I renamed the type from another file? With ReSharper I can rename a type used anywhere and it will update all its usages and also rename the file itself.
When Rider gets UWP debugging, I‚Äôll probably ditch Visual Studio as much as possible. Working on a three platform Xamarin solution and UWP debugging is the only thing holding me back. Rider on the Mac is awesome for debugging iOS Xamarin and the Android tools are better on both Windows and Mac.
All BCL types and members are automatically decorated with ReSharper attributes so it provides quite a lot of value straight away. You don't have to do it for your own members if you don't want to.
Just today i started using roslynator and IntellisenseExtender - after a few hours of work i have not missed any resharper feature
Most of the brats here haven't contributed a line of code to open source, they act as though they own open source maintainers. They prefer to pay hundreds of dollars to closed source solutions that pay a few dollars to an open source maintainer to help them make a living üòí
Or you can go to humble bundle directly
why is this post being downvoted. the truth is bitter
Thanks!
Thanks for your question, @imkizidor. You're right, Base is an additional layer to the plugin-based framework ExtCore that relies on [ASP.NET](https://ASP.NET) Core application parts concept. When we discovered ExtCore we thought that we wanted to develop something not too heavy but that will be useful for any web application, the rights and administration management, at least. &amp;#x200B; Be aware that while it's interesting to study the application parts feature, .NET Core 3.0 will rewrite most of the code related to the dynamic dll loading, so ExtCore will evolve and we think that the plugin-based frameworks will have more features then.
Yep, Code Lens on VS enterprise, has a lot of good features, better to pay for that and have others use community. More and more they keep adding features in VS.
Have you tried opening a file from Solution Explorer to the right?
Try rebuilding the solution
Lens are also in Community now :-)
Yeah, I wasn't sure how many features it has from it, but VS just gets better and better. Code purists really like resharper, but it matters less and less for group development now
No, that's not thread safe. Foo is readonly, but it's members aren't. But readonly doesn't really have anything to do with it. While one thread is getting and writing the value of \_foo.X, another thread might be setting the value. In other words, more than one thread is allowed to manipulate X or Y. This is usually handled by locking. I could explain it all here, but I think it's better that you just read from a good source. [Here's a nice, comprehensive intro to threading.](http://www.albahari.com/threading/) Note that, while it useful to know and understand, creating threads like this directly is considered legacy, and the tutorial will tell you as much. Tasks and the [TPL library](https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/task-parallel-library-tpl) is how we do parallel programming these days.
The kther guy whi dislikes reaharper gor downvoted to. I knew i would be, thia sub is fanatical about reaharper. Its weird how people get about products
Just double click "Form1.cs" in the Solution Explorer on the right side of the screen
Can you explain it a bit more? In your solution explorer is already a solution with a project. Is there missing something? Or is there a file missing in your project? If there is a file missing you can try to use the button "Show All Files" in the solution explorer toolbar and then add the file to the project. If nothing works you can unload the project from the solution with a rightclick on the project and then edit the csproj file to check the file paths.
No, it's not threadsafe since they can all be modifying the `Foo` object you initialize on the `MyClass` object. `readonly` only stops the `foo` property from being re-assigned. You can make the strings on `Foo` `readonly` and it should be at that point. Here are some suggested edits: public class MyClass { public readonly Foo Foo { get; } public MyClass(Foo foo) =&gt; Foo = foo; public void Do() { } } public class Foo { public readonly string X; public reaodnly string Y; Foo(string x, string y) =&gt; (X, Y) = (x, y); public override string ToString() =&gt; $"{Foo.X} {Foo.Y}" }
Yup, that's a typo, _chanContext is the actual name but i must have defaulted to _dbcontext when typing it out here.
Or you can go directly to apress's github page and download them all for free. [https://github.com/Apress?utf8=%E2%9C%93&amp;q=&amp;type=&amp;language=c%23](https://github.com/Apress?utf8=%E2%9C%93&amp;q=&amp;type=&amp;language=c%23)
Thanks for feedback, I'll try changing the return type when I get back home
It is thread safe if the thing it holds is 1. is immutable (e.g. ImmutableArray) 2. is thread safe (e.g. ConcurrentDictionary) 3. is a struct \#3 is tricky. Every time you read a struct from a read only field, it makes a "defensive copy" so you cannot accidentally alter it.
I'm not sourcing data from the database. Basically I'm making an api call to return a list of threads (in this instance, roughly 150), each thread can contain a variable number of posts that i then do some processing on and am then trying to log each post after it's been processed and then insert each thread once all posts in that thread have been processed. &amp;#x200B; It's not really a performance issue as this is a curiosity project so i'm just figuring out how to do things. I am going to try changing the return type to Task and see where that gets me (obviously i need to get a better handle on async and context management)
You can cache the keys in an array too, and then return. It was more the convenience of the code where you can easily check if the option is valid and directly execute the function corresponding to each option. If you talk true performance than two arrays will be more efficient up to like a hundred or so options, but I think code wise it isn‚Äôt as elegant.
A readonly struct requires all its members to be readonly.
Yeah, it stays the same
I don‚Äôt know what project is missing from your solution, but you can right click the solution in solution explorer and add existing project. You will want to select the csproj file of the missing project.
Thank you my dude, working all good now
Issue is now fixed
What was it? I‚Äôm interested now &gt;.&lt;
True, but that's something else entirely. A struct does not need to be read-only to place it in a `readonly` field. (Though it may remove the need for defensive copies.) Likewise, a readonly struct can be placed in a non-readonly field.
To avoid any confusion here, there is a difference between a readonly struct, and a field of a struct that is readonly. private readonly _point = new Point(0,0); vs public readonly struct Point { }
The fact that this topic pops up every two weeks is fatiguing also.
Gotcha - I forgot that structs are value types since I never use them.
I was told to double click form1.cs on the right side and it opened fine :)
I agree with you but the main question was about switch/case. If we use dictionary (optionName-&gt;deleg) the switch/case will be unnecessary.
My side-project is an Alexa implementation in .NET called Voice in a Can. The core is a NetStandard library that does all the Alexa stuff, and then platform-specific implementations of low-level audio, HTTP/2, alarms, etc. I've used Xamarin to create apps for most platforms. I've used Xamarin Forms for the UI on some platforms, and native UI on others. So far I've released versions for: * WatchOS (app store) [https://youtu.be/QFpGAFRJkaw](https://youtu.be/QFpGAFRJkaw) * iOS (app store) * MacOS (beta) [https://youtu.be/vRY4tDlkMNI](https://youtu.be/vRY4tDlkMNI) * WearOS (beta) * Tizen (app store) [https://youtu.be/btglaOtzQzQ](https://youtu.be/btglaOtzQzQ) [https://voiceinacan.com/](https://voiceinacan.com/) Damian
Try install ReSharper eap version, it will work on latest visual studio
Also appears as if your print screen button is broken.
I mean yes, which is a good thing, because there is more duplication and is easy to mess up. Having to repeat the options twice can lead to mismatches, and while an enum can fix that, it doesn‚Äôt feel as clean
While you can, having something like XNA or MonoGame makes it much easier by setting up all of the input and drawing and game loop for you. I do agree that Unity is overkill though.
Got it! Thanks for the code suggestion as well!
Makes sense! So for ensure thread safety, I should also mark as `readonly` the `Foo` class properties. &amp;#x200B; Thanks for the resource shared!
The error from the compiler should have indicated the line where the error occurred.
Every time I install Resharper, my IDE grinds to a screeching halt.
No, they shouldn't be marked readonly, like I said it has nothing to do with this. We usually `lock` on objects. So Foo would look like public class Foo { private object _lock = new object(); private string x; public string X { get { lock(_lock) { return x; } } set { lock(_lock) { x = value; } } } } As you see, thread-safety quickly makes the code a lot more complex and it's not something you should worry about for now as you're learning. I see you're using fields instead of properties, which gives me the impression that you have more fundamentals to get comfortable with.
The compiler will tell you where this has occurred, and you are probably missing a semi colon on the line before, like "expected ; on line 144", then it's likely on 143 or 144.
It‚Äôs in the Error List pane. If you don‚Äôt see that you can add it through View/Error List
There should be a red dot in the scroll bar at the point of the syntax error.
Can you not double click the error in the error list? that should take you to the offending line.
It is not so much about marking them readonly as the fact that they will never change. If something never changes it is in fact thread safe. By marking the fields of Foo and the _foo field itself as readonly you know that they are never changed (well technically there are some ways to change the value but in practice you can assume they are not). Readonly serves more as a marker when you look at the code.
Buy a .edu email address from Ebay and sign up for the free student version
At least for the white space problem imho there are plugins that seem to work better than what resharper does.
Doesn't editorconfig do most of that? And is cross-platform/cross-editor. [https://editorconfig.org/](https://editorconfig.org/)
3 should be default on vs. Once you see it you can't unsee it. Unfortunately yeah, ReSharper is still king. Nothing comes close. I tried.
By committing fraud, yes...
Fibbing about being actively enrolled in school is pretty serious. I've been evading the internet police for a while, and I'm constantly living in fear.
Encouraging to hear. I love resharper and fear im going to be a worse programmer without it, therefore when I finally get around to installing vs2019 im going to do my best to configure vannila VS and add extensions as I realize the features I can't live without, then see if I can get used to living without resharper. Sometimes I wonder why MS didn't just buy jetbrains at some point, but then I wonder if jetbrains would have as good products as it does if MS had bought them... I imagine the latter.
I‚Äôm on my phone, couldn‚Äôt be bothered to switch to pc üòÇ
You are running Visual Studio on your phone? Man that has to be a world record!
If they were already paying for Resharper, they're almost certainly working on a commercial project :)
`=` is for assignment, `==` is for comparison.
Well that was simple. Ill delete the post
Generate the link and store with the timestamp. After your timeout expires delete the entry. On your Serverside check the link and redirect to the stream
Not sure why you tagged this as specific to Unity, does it implement \`String\` itself? Is \`StringBuilder\` any faster than using interpolation / concatenation?
Definitely not specific to Unity, this is about C# in general but the example was created with Unity mainly because my channel is about making games. String Builder is faster but not meant for small concatenation interactions, it is faster when dealing with thousands of interactions. This articles explains it well [link](https://docs.microsoft.com/en-us/dotnet/api/system.text.stringbuilder?view=netframework-4.7.2)
Reference assignment is atomic. You gain almost nothing here, for a huge cost. It also doesn't solve real thread safety issue: Foo.X += "a" Is just as unsafe with your proposed locking as without. Generally you keep classes thread unsafe unless they directly deal with multiple threads. The same way most of .NET framework is not designed to be thread safe.
Got your point! Check this below: public class MyClass { private readonly Foo _foo; public MyClass(Foo foo) { _foo = foo; } private string GetFooFormatted() { return $"{_foo.X},{_foo.Y}"; } public void Do() { /*Creates multiple threads where each thread calls GetFooFormatted method*/ } } public class Foo { private string _x; private string _y; public string X { get { return _x; } } public string Y { get { return _y; } } public Foo(string x, string y) { _x = x; _y = y; } } So by declaring a `Foo` constructor that sets `_x` and `_y` fields, I'm exposing their values through `X` and `Y` properties (only defined the getter for both properties)... this means that I don't need to lock both properties when reading their values. Please, correct me if my previous explanation is erroneous.
&gt; If something never changes it is in fact thread safe Yes, I think the same!
Yeah I don't want to pretend to be an authority on the matter which is why I provided the link.
You can definitely use typeof as a primary key if you want.
If Jetbrains were serious about licensing, they wouldn't only rely on a .edu verification email for students.
How is this not just free, MIT licensed even, but paid support? What‚Äôs wrong with that?
Only if you're not actually a student.
Ah! In that case I have another suggestion. My second guess is that this code is inside an AsParallel or something that is causing threading. Entity framework is not thread safe. For this reason it‚Äôs better to create a new dbcontext every time inside your loop. The overhead is not as bad as it seems since EF does connection looking under the hood. If creating a new dbconext every time makes you squeamish then consider trying to pipeline the database work into a single thread. Once again, the dataflow blocks are very interesting to use in this context, you can use them to massively parallelise the coy intensive work and then funnel the data updates into a single thread.
https://github.com/Alikont/EFCorePlayground/tree/master/EFCoreOptimizationHints
But if ``Foo`` was e.g int, then it'd be thread safe?
I like this list. I was chatting with a guy who works on the VS team in Redmond and they're actively looking for feedback on ways they can improve vanilla VS to reduce dependencies on ReSharper. If you're interested, I'm sure they'd like to hear from you!
I think the reason it's downvoted is rather straightforward - it's not true.
The code suggestions can also be configured based on your preferences. If you don't like VS telling you to turn every if/else assignment into a ternary, for example, you can turn off that suggestion.
No, I suggest you read the tutorial about threading I linked. If you worry about thread safety and write code with this mentality before you know how threading works, then you're just greasing your lawnmower in preparation for a nascar race. Waste of time.
I mean especially in .NET Core, where projects come bare-boned. Its been very uncomfortable since I left my last job where I had a Re# license.
What's a good replacement for their unit test runner?
So you're trying to pick all the `UnitPrice`? var prices = from product in products select UnitPrice;
Here is the list. productList = new List&lt;Product&gt; { new Product { ProductID = 1, ProductName = "Chai", Category = "Beverages", UnitPrice = 18.0000M, UnitsInStock = 39 }, new Product { ProductID = 2, ProductName = "Chang", Category = "Beverages", UnitPrice = 19.0000M, UnitsInStock = 17 }, new Product { ProductID = 3, ProductName = "Aniseed Syrup", Category = "Condiments", UnitPrice = 10.0000M, UnitsInStock = 13 }, new Product { ProductID = 4, ProductName = "Chef Anton's Cajun Seasoning", Category = "Condiments", UnitPrice = 22.0000M, UnitsInStock = 53 }, new Product { ProductID = 5, ProductName = "Chef Anton's Gumbo Mix", Category = "Condiments", UnitPrice = 21.3500M, UnitsInStock = 0 }, new Product { ProductID = 6, ProductName = "Grandma's Boysenberry Spread", Category = "Condiments", UnitPrice = 25.0000M, UnitsInStock = 120 }, new Product { ProductID = 7, ProductName = "Uncle Bob's Organic Dried Pears", Category = "Produce", UnitPrice = 30.0000M, UnitsInStock = 15 }, new Product { ProductID = 8, ProductName = "Northwoods Cranberry Sauce", Category = "Condiments", UnitPrice = 40.0000M, UnitsInStock = 6 }, new Product { ProductID = 9, ProductName = "Mishi Kobe Niku", Category = "Meat/Poultry", UnitPrice = 97.0000M, UnitsInStock = 29 }, new Product { ProductID = 10, ProductName = "Ikura", Category = "Seafood", UnitPrice = 31.0000M, UnitsInStock = 31 }, new Product { ProductID = 11, ProductName = "Queso Cabrales", Category = "Dairy Products", UnitPrice = 21.0000M, UnitsInStock = 22 }, new Product { ProductID = 12, ProductName = "Queso Manchego La Pastora", Category = "Dairy Products", UnitPrice = 38.0000M, UnitsInStock = 86 }, new Product { ProductID = 13, ProductName = "Konbu", Category = "Seafood", UnitPrice = 6.0000M, UnitsInStock = 24 }, new Product { ProductID = 14, ProductName = "Tofu", Category = "Produce", UnitPrice = 23.2500M, UnitsInStock = 35 }, new Product { ProductID = 15, ProductName = "Genen Shouyu", Category = "Condiments", UnitPrice = 15.5000M, UnitsInStock = 39 }, new Product { ProductID = 16, ProductName = "Pavlova", Category = "Confections", UnitPrice = 17.4500M, UnitsInStock = 29 }, new Product { ProductID = 17, ProductName = "Alice Mutton", Category = "Meat/Poultry", UnitPrice = 39.0000M, UnitsInStock = 0 }, new Product { ProductID = 18, ProductName = "Carnarvon Tigers", Category = "Seafood", UnitPrice = 62.5000M, UnitsInStock = 42 }, new Product { ProductID = 19, ProductName = "Teatime Chocolate Biscuits", Category = "Confections", UnitPrice = 9.2000M, UnitsInStock = 25 }, new Product { ProductID = 20, ProductName = "Sir Rodney's Marmalade", Category = "Confections", UnitPrice = 81.0000M, UnitsInStock = 40 }, new Product { ProductID = 21, ProductName = "Sir Rodney's Scones", Category = "Confections", UnitPrice = 10.0000M, UnitsInStock = 3 }, new Product { ProductID = 22, ProductName = "Gustaf's Kn√§ckebr√∂d", Category = "Grains/Cereals", UnitPrice = 21.0000M, UnitsInStock = 104 }, new Product { ProductID = 23, ProductName = "Tunnbr√∂d", Category = "Grains/Cereals", UnitPrice = 9.0000M, UnitsInStock = 61 }, new Product { ProductID = 24, ProductName = "Guaran√° Fant√°stica", Category = "Beverages", UnitPrice = 4.5000M, UnitsInStock = 20 }, new Product { ProductID = 25, ProductName = "NuNuCa Nu√ü-Nougat-Creme", Category = "Confections", UnitPrice = 14.0000M, UnitsInStock = 76 }, new Product { ProductID = 26, ProductName = "Gumb√§r Gummib√§rchen", Category = "Confections", UnitPrice = 31.2300M, UnitsInStock = 15 }, new Product { ProductID = 27, ProductName = "Schoggi Schokolade", Category = "Confections", UnitPrice = 43.9000M, UnitsInStock = 49 }, new Product { ProductID = 28, ProductName = "R√∂ssle Sauerkraut", Category = "Produce", UnitPrice = 45.6000M, UnitsInStock = 26 }, new Product { ProductID = 29, ProductName = "Th√ºringer Rostbratwurst", Category = "Meat/Poultry", UnitPrice = 123.7900M, UnitsInStock = 0 }, new Product { ProductID = 30, ProductName = "Nord-Ost Matjeshering", Category = "Seafood", UnitPrice = 25.8900M, UnitsInStock = 10 }, new Product { ProductID = 31, ProductName = "Gorgonzola Telino", Category = "Dairy Products", UnitPrice = 12.5000M, UnitsInStock = 0 }, new Product { ProductID = 32, ProductName = "Mascarpone Fabioli", Category = "Dairy Products", UnitPrice = 32.0000M, UnitsInStock = 9 }, new Product { ProductID = 33, ProductName = "Geitost", Category = "Dairy Products", UnitPrice = 2.5000M, UnitsInStock = 112 }, new Product { ProductID = 34, ProductName = "Sasquatch Ale", Category = "Beverages", UnitPrice = 14.0000M, UnitsInStock = 111 }, new Product { ProductID = 35, ProductName = "Steeleye Stout", Category = "Beverages", UnitPrice = 18.0000M, UnitsInStock = 20 }, new Product { ProductID = 36, ProductName = "Inlagd Sill", Category = "Seafood", UnitPrice = 19.0000M, UnitsInStock = 112 }, new Product { ProductID = 37, ProductName = "Gravad lax", Category = "Seafood", UnitPrice = 26.0000M, UnitsInStock = 11 }, new Product { ProductID = 38, ProductName = "C√¥te de Blaye", Category = "Beverages", UnitPrice = 263.5000M, UnitsInStock = 17 }, new Product { ProductID = 39, ProductName = "Chartreuse verte", Category = "Beverages", UnitPrice = 18.0000M, UnitsInStock = 69 }, new Product { ProductID = 40, ProductName = "Boston Crab Meat", Category = "Seafood", UnitPrice = 18.4000M, UnitsInStock = 123 }, new Product { ProductID = 41, ProductName = "Jack's New England Clam Chowder", Category = "Seafood", UnitPrice = 9.6500M, UnitsInStock = 85 } }; I need to pull all of the UnitPrice into a new List.
If you worry about thread safety and write code with this at the front of your mind before you know how threading works, then you're just greasing your lawnmower in preparation for a nascar race. Waste of time.
&gt; If you worry about thread safety and write code with this mentality before I don't, yet :P Ok, that confuses me &gt;The problem is that one thread can be evaluating the if statement right as the other thread is executing the WriteLine statement ‚Äî before it‚Äôs had a chance to **set** done to true. If no thread is able to change that value, then what's the risk? https://stackoverflow.com/questions/8286222/is-a-readonly-field-in-c-sharp-thread-safe https://stackoverflow.com/questions/13354949/is-readonly-variable-thread-safe
See my edit, should do what you're looking for.
Yeah I answered to quickly. My point was setting a field to readonly isn't some panacea. I don't want to give the impression that the readonly keyword somehow has anything to do with it as it would be such an oversimplified answer.
&gt;I don't want to give the impression that the readonly keyword somehow has anything to do with it That's very reasonable
Did a ninja edit too.
&gt; Is `StringBuilder` any faster than using interpolation / concatenation? It depends on what exactly you're doing. If you're concatenating strings in a loop, then `StringBuilder` is almost always the better choice, because it does not create garbage string on every iteration. And as I understand it, garbage is more of a problem for games, because they're effectively soft realtime and so GC pauses are an issue.
In C# 7(?) you can simplify this to public class Foo { public string X { get; } public string Y { get; } public Foo(string x, string y) { X = x; Y = y; } }
Does VS 2019 community have an equivalent of the ReSharper File Structure window?
They should buy a copy of resharper, print the features list, and get to work.
I tried Rider and felt like it was a bit slow overall. Maybe I should revisit
The lock in your example is completely ineffective. I'd even say it's an anti pattern to put a lock in your getter and setter like that. Whoever is calling myX = Foo.X and Foo.X = "blah" still has to deal with race conditions which occur right after and right before the lock is called.
Doesn't the XmlDocument object have a load-from-file method? If memory serves it does.
I did, but it got exponentially worse from there. Now it's completely unacceptable
Yes, by using the XmlREader Class. It provides provides fast, noncached, forward-only access to XML data. https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmlreader?view=netframework-4.7.2
Any editorconfig or prettier can do this.
Removed: Spam. Please review and follow the [Guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion) This is your [second, and last warning](https://www.reddit.com/r/csharp/comments/bbwzjg/procedural_level_generator_algorithm_with_c_see/ekmbsct/) before facing a temp-ban.
So far this is the best endorsement for the Qml.Net.
Use "StringBuilder.Append(line)" instead of "temp += line" ?
Yeah, just [`XmlDocument.Load(string filename)`](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.load?view=netframework-4.7.2#System_Xml_XmlDocument_Load_System_String_). Even beyond that though, this line reading the (assumed) file content: string temp = ""; while ((line = sr.ReadLine()) != null) { temp += line; } sr.Close(); is gonna be slow for a 7 million line file. Assuming this is from a file, even just a `File.ReadAllText` will be faster even if it could be skipped by feeding the stream directly into the `Load` method via [`Load(Stream inStream)`](https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.load?view=netframework-4.7.2#System_Xml_XmlDocument_Load_System_IO_Stream_).
Good point. I just want to clarify your point further though because I think people here might be confusing thread safety with immutability. Thread safety would mean that you can't get into an inconsistent state in a multithreaded environment. The extreme example of that would be that the state never changes, ie it's immutable. However, if you don't have business rules which tie the values of X and Y together then OPs example *could* be considered thread safe. If they are tied together, (eg, street name and postal code), and you don't want to end up in a state where you can have one old value and one new one, then you can make it immutable, as you did in your example. Thats probably the better approach but it wouldn't be the only way to make it thread safe. You could also change the accessors to private set, and add a method (eg SetAddress) which takes the two parameters and only assigns them under a common lock shared with the getters of those properties. That would be an example which is mutable but thread safe, because the internal state is guaranteed to be consistent.
At that point, I feel you might as well use a struct with a class accessor
Me too. I honestly don't know what the point of intellisense is if they expect you to remember the exact name of the function/class you are using if its not imported with `using` yet
Hmmm... Personally, I wouldn't do that. https://samrueby.com/2016/09/05/when-should-you-use-a-struct-instead-of-a-class/
Works, thanks. Still takes a long time to open the json file in browser / visual studio. :D
In solution explorer, you can expand the file nodes and see contents. There are additional context menu items you can press for navigation that you may find useful. Not a 1:1 equivalent, but it's likely the closest you're looking for.
That‚Äôs what I thought. It‚Äôs amazing to me that VS doesn‚Äôt have this built in. File Structure view is an indispensable part of my work flow
This is the only reasonable way forward. Chances are you'll likely run into an out of memory exception using the method OP is using. With a file that large, you can't read it all into memory, which is what OP is doing. Not only does it take a bunch of time and memory to read the file itself, it's also the time for the XmlDocument to parse the whole file as well. After that querying the XmlDocument will also be incredibly slow. OP should take a look at SAX vs DOM parsers - https://stackoverflow.com/questions/6828703/what-is-the-difference-between-sax-and-dom
The other suggestions are very good for XML, so consider this more of a side-point: use a `StringBuilder` instead of a temporary string. For a couple of string concatenations you would be fine, but you're doing this *7 million times*; changing `StringBuilder`alone should vastly improve the efficiency (though whether it's faster or just much more memory efficient I'm not sure offhand -- I've never really done any performance tests myself on it). That said, /u/Prima13's answer is better for your overall problem.
Maybe try disabling the syntax highlighting/handling for json files.
As promised, [here is my bad code](https://www.reddit.com/r/csharp/comments/bdaaf4/just_sharing_my_recent_discovery_on_performance) responsible of this big performance issue
The point is that usually the namespace is imported. For members, it doesn't even need to be.
Usually isn't good enough IMO. For those times when its not, I have to go in my own source tree or documentation somewhere to find the name of the class I want to use. Resharper does this perfectly, there is no reason it can't be built into VS.
I agree with all that. But intellisense can still be very helpful as it is.
What do you mean? VS has integrated test runner and real-time test runner
None.
Exceptions should never be used for logic. Inside your getter you should be checking the size of your array and if the requested index is outside, then return 0
There was another extension I'd seen (thanks for the link to this one), but my gripe is that these are extensions. It likely means friction in getting them added to a base install and configured properly (I've worked places where installs were locked down). Prettier coming down as a dependency and being able to run it from the command line is really nice.
If the remind bot didn't get you here you go. Still 15hr to buy
Yeah but not nearly as nice as the one that comes with Resharper.
Yes that's what I've learnt last Friday, I never knew catching an exception was so costly
That. Doing a `+=` operation on a string is usually the sign of a code smell. IMHO the designers of string should never had allowed the `+ operator` on string and forces developer to use `string.Concat` instead. That way the potential issue is more apparent. I stopped counting the number of times I had to tell a developer complaining about performance that it was because they were concatenating big strings.
Catching an exception is not very costly in release builds with no debugger attached. It does had a bit of overall, but not a lot. When you compared the two versions (with and without exception), did you do it in a debug build with a debugger attached?
I wonder if, instead of sitting in a \`while\` loop reading lines, if it would be faster to do the following: &amp;#x200B; 1. Ask the filesystem how big the file is 2. Create a buffer of that size 3. Read the entire file in at once with saomething like \`ReadToEnd()\` using the created buffer to store the result 4. Load the XML from the buffer &amp;#x200B; Might be worth looking into ...
To be clear, what I'm describing is built into VS.
Also don't += a string, use a StringBuilder. Doesn't really apply here since this is XML and there's already good libraries for that, but a general tip.
Why would you want to go Xml -&gt; JSON -&gt; database? Why not skip the json part?
I think you meant "medior" not "mediocre" ^^
Seems weird. Why not from XML straight to the database?
I expect a medior (about 5 years experience) to be confident with everything explained in Jon Skeet's "C# in depth" book. Either they had read the book (which I recommend), or they have discovered most of those topics by themselves. I don't expect them to be expert on those subjects, but they should be aware of the few subtleties that are covered by that book. At the very least.
Note for your future questions: don't use a title like "I have a question". Chose a title that reflect what the problem is. And describe the problem, including what you were trying to achieve. Don't just paste the code.
This is well documented across most languages (there are a few where exceptions are cheap)
Yes, I understand. Sorry i wasn‚Äôt clear- it differs substantially from the file structure view in resharper. One of the main ways is it opens the file structure window corresponding to the code window you are looking at. Allows the cursor in the file structure window to track the code window cursor and vice versa, etc
What is a better way dealing exceptions in logic?
Other suggestions are better; but if you want to read a whole file to a string, use ReadToEnd rather than lots of ReadLines string temp = sr.ReadToEnd();
Oh god, I'm so glad I'm not the only one! :-)
Removed: Spam. Please review and follow the [Guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion)
Ah sorry, i only really meant the maximum line length. Visual Studio didnt seem to enforce this when i last checked..
What about max line length? Visual Studio didnt do anything with it last time i checked.
Thanks. We used to be a Windows/WPF shop, but Windows was killing us for various reasons. We moved to Linux, but I wanted to stay in the .NET/.NET Core world. Actually, the biggest drive for Qml.Net might have been my hate for Python. It was either Qt/Python, or Qt/.NET.
Out of curiosity, why doesn't the +operator just call the string.Concat?
It probably does. It's just not obvious to an inexperienced programmer what the + operator is doing.
The main feature I have not found a replacement for is automatically inserting (); at the end when using intellisense to select a function. There is a plugin called TAB Auto something, but it does not work the exact same way. Anyone knows a solution for that?
Hum I didn't know that catching an exception was not very costly in Release build. Actually, what you say points me to another problem. we separate many components into Nuget packages and I recently brought SourceLink with all our component. Currently I use \`Debug\` as build configuration in order for SourceLink to properly work but I read on internet that so difference between Debug and Release was about 10-20%. So since then I keep in my mind to modify all our build pipelines so that the debug version is pushed to the Source Server but the Release version to generate our Nuget Packages. So in fact the code I was running from my Nuget package was using the Debug configuration. &amp;#x200B; However sorry I didn't compare debug and release execution before I fix this issue. I'm a bit late on my sprint now and have no time to waste. &amp;#x200B; Thanks for your answer
I never came across that piece of information and probably many other beginner and intermediate developers as well. I thought that was worth sharing especially with this example of generating an Excel file.
Instead of catching an Exception that you're expecting you should try to avoid any exception from happening. Catch only the ones that you're NOT expecting
I think that you misunderstood. `string.Concat` doesn't solve any performance problems. He just thinks it would explicitly say "think about adding up strings before doing it".
Could be a document DB or a json data type.
Exactly-the + operator is generally one that's cheap. For string, it's very costly.
I fully expect OP to come back tomorrow and ask for a "quick way to read 7 million lines of JSON code" lol
Exceptions are for exceptional cases.
What kind of db is it?
Well, I'm using EFC memory provider, but now I think I should initialize it in test, instead of ctor. Anyway it works fine
To ensure that each test has its own unique entities simply and fast ;)
Yes much better said than I did
or a \`JsonTextWriter\` for that matter.
Ah ok thanks for explaining. That makes way more sense.
Thank you I will check it out later!
very nice! visitor pattern!I love this solution. I will test the code too and share your repostiory.
It‚Äôs easy! first take the json and convert it to xml üòÇ
Under $100? We're paying ‚Ç¨597 ($675) annually for 1 ultimate and 2 standard licenses.
i recommend also to use some sort of parallelize reads if it's viable
I know right, who knows what they‚Äôll bring to the App Store next!
Please don't ever do this, specially for files that are 7 million lines long! Every time you do `temp += line;` you're creating a new string. Use a StringBuilder instead. https://docs.microsoft.com/en-us/dotnet/api/system.string?view=netframework-4.7.2#immutability-and-the-stringbuilder-class
‚ÄúVery‚Äù is pretty relative. It‚Äôs O(n). In many cases it won‚Äôt matter.
If you're doing it inside a loop like OP, it's very costly. Adding integers inside a loop is not costly.
But it‚Äôs obvious what Concat does?
yeah put it straight into a database and read the data from there instead of huge xml files from now on
thanks I'll give this a look
Another better example for #1 is String, probably.
Op, keep in mind that string concatenation is creating a new string every time. [More information here](https://docs.microsoft.com/en-us/dotnet/api/system.string?view=netframework-4.7.2#immutability-and-the-stringbuilder-class) As for solving the problem, the XmlDocument class should help
it's not so much the speed but if i'm processing 150 threads and it fails halfway through, the next time i run i'd have to process the whole lot again. I'm trying to avoid this by logging them as they're processed, so in the event of a failure, i only have to process the ones not logged
I've moved past that error by wrapping the save in a using statement, so i don't think it was the return type
Sure. It‚Äôs relative, as I said. Even though it‚Äôs technically costly it may not matter anyway, depending on circumstances. That said, I‚Äôd always use StringBuilder as well.
What the others said, that's a rather large xml file to hold in memory. But, if you still wish to do that. Just use `doc.Load( filename )`, no need to read the file by hand. Or, if you still need to read it as a string first, just use `File.ReadAllText`.
I'd go with WPF. Why use web stuff when you don't have to.
That's outdated. There are several blig posts, even from the guy that wrote the string.concat and "+" code, stating that since .net 3.5 "+" is the way to go. Before .net 3.5 you were right. After 3.5 "+" is vastly superior since when coee optimization starts in compile time, "+" will be rewritten to use concat, array.join or even make direct full strings when possible. And thus always uses the best method.
A bit more. And it is more characters to type which gives more time to think what you are doing.
I think you missed my point.
See if you can answer those questions: [https://blog.adamfurmanek.pl/2019/02/16/net-internals-cookbook-part-0/](https://blog.adamfurmanek.pl/2019/02/16/net-internals-cookbook-part-0/)
Debug build means no optimizations, no method inlining, etc. On top of that, the JIT is allowed to generate different code when it detects that a debugger is attached (probably even in release builds). For that reason, unless you need to debug the startup of your application, it is better to attach the debugger later (but you might lose the ability to set breakpoints everywhere if the code is optimized).
Ye, i thought it was about string.concat vs "+" instead of "concatenate strings" vs StringBuilder
First I suggest you ask those questions in the sub of Unity. Second I'd say you didn't look much : a search for "delay unity" returned [this](https://docs.unity3d.com/ScriptReference/WaitForSeconds.html)
Pretty sure you'd have to set up an entire text canvas system first. It's quite difficult. Make sure you keep some of these systems when you make new games and such. Good luck
I think there is a bulk import XML function. I wouldn't convert it to a Json
&gt; Catching an exception is not very costly in release builds with no debugger attached. It does add a bit of overhead, but not a lot. Tho it does cost. A quick benchmark with two tests cases (one always throwing, one always preventing the throw) results in: | Method | Mean | Error | StdDev | Median | |----------------- |---------------:|-----------:|-----------:|---------------:| | WithException | 18,126.5900 ns | 32.1394 ns | 30.0633 ns | 18,120.1111 ns | | WithoutException | 0.2690 ns | 0.0780 ns | 0.1325 ns | 0.3639 ns |
Did I say throwing vs not throwing? I think to remember I wrote "catching an exception", not "throwing an exception". ^^ That said, it all depends on how many statements are inside the `try` block. At the extreme, if you try is empty (or just doing one addition), then, of course, the version without "try-catch" will be infinitely faster than the version with one. But real-world scenario, if the work being done inside the `try` block is significant, the exception handling part (throwing and catching) overhead is not that high.
To your defence, my comment could have been better written.
Hi, thanks four comment. My project is a simple windows forms app. The idea is Iam trying to make sure that all the tasks are working them I can move it into web. or maybe someone else well. Yes As you said, in the project you can add accounts and then you just select the account and do whatever you want. till now you can post to one place at a time, but I prepared the application in a way it can accept multiple social media targets. The landing page is a good idea, but really I don't have a lot of time of this. since my main work is in e-learning. I will make the source code available soon when I finish the project, so anyone can take ideas or code snippets. thank you again.
Because 20 years ago we had a LOT more Interop and a lot less memory than we have today (and in VBScript ASP it was by far the most common reason for issues) ? It is certainly still best practice as memory leaks (the result of leaving unmanaged objects laying around in your appdomain) will eventually cause even the best apps to have to shut down OR in our new containerised world to exceed the constraints of your container. It's still pretty common for large web apps to have a 'daily restart' specifically because of these sorts of issues. HttpClient is really the exception to the rule of 'use for the shortest time possible and close early' due to the nature of how Http connections function IRL. Chrome and SMSS are desktop apps...they're likely closed every day so memory leaks are less of an issue.
&gt; Chrome and SMSS are desktop apps...they're likely closed every day so memory leaks are less of an issue. What I was getting at is that we don't open a new one when we're opening a new website or database. They're vehicles to allow us to do the things we need to do just the same as HttpClient is.
Yes especially since xml and json do not map 1 to 1. How will you handle stuff like xml attributes?
Code doesn't exists without context. The programmer decides the context. For example, if you have a game and the piece of code is the code that makes your character jump. You have to check for all possible ways when a character can't jump before starting the animation. "Hm, he is crouched, he can't jump there" isn't an exception. Its logical in the context the programmer defined. Not getting the memory from to load the jump animation is an exception. But should you really load the animation in this function, having the error appear there than somewhere else? The "correct way" of exception handling/context creating is part of the larger code design/best practise. You want to control where and when exceptions might appear. You construct your codebase around those contexts and assumptions. You usually start first to fully understand what exception handling is with your language of choice, here C#/.net [https://dzone.com/articles/c-exception-handling-best-practices](https://dzone.com/articles/c-exception-handling-best-practices) Then you follow some logical rules, I like this collection even its a bit dated [https://www.codeproject.com/Articles/9538/Exception-Handling-Best-Practices-in-NET](https://www.codeproject.com/Articles/9538/Exception-Handling-Best-Practices-in-NET) After some time in the coding treches, you finally learn that there are even more aggressive steps you can do for your codebases. Thats not for everybody, but I know people in the security industries that life by some of these rules [https://en.wikipedia.org/wiki/Defensive\_programming](https://en.wikipedia.org/wiki/Defensive_programming)
Well that's every piece of code. Unless your primary function is to write code rather than fulfill the function of the app you're building. It *is* still important to constrain the lifecycle of components to reduce memory use unless you have a special case (like asynchronous access in HttpClient...which backs onto the unmanaged http.sys). CAN your app work without every closing &amp;/ disposing anything...yes but probably not for very long (unless they're all managed components 'all the way down' so can be GC'd correctly in a normal sweep). It's just good practice to dispose correctly in the correct scope for your use-case. But yes with a few exceptions...but you need to understand WHY they're exceptions and not the rule..hence all the docs say to dispose as early as possible (to help the GC free they resources they use).
Suggestion: make the "Range" of text, which is supposed to be colored programmable &amp;#x200B; Eg. CsharpHighlighter.Highlight(rtb, offset, length)
Things have been changing a lot recently.. Check this [HttpClientFactory](https://www.talkingdotnet.com/3-ways-to-use-httpclientfactory-in-asp-net-core-2-1/) and [DbContext Injection](https://hackernoon.com/asp-net-core-how-to-use-dependency-injection-in-entity-framework-core-4388fc5c148b). Those are the new recommend way to handle injection on these specific cases. It's way easier than handling on your own, and way more optimized than putting everything inside the using block.
I too found it out the hard way, and after that it seems like common sense. &amp;#x200B; Good job for posting this and starting a good conversation.
It sounds like your experiences are very different from mine as I don't think we're generally programmed that way. Deallocating resources that we've allocated is a completely different thing to making the most efficient use of those resources once we have them. Connection pools are a good example of the latter. Having a pooled connection doesn't mean that (assuming they implement it) their `Dispose` function does not get called. Just because something supports `IDisposable` does not mean you have to use it in a using block. It's up to you to make appropriate use of that object and then clean it up when necessary.
sure, im going to add a fix later too, then I can add this. currently my biggest problem is the scrollbar, if you edit text thats below the scrolled view, the scrollbar will jump around. Im also thinking about a auto-indent feature :) thanks for the input
My understanding is that StringBuilder is ultimately more efficient with large numbers of concatenation because it is only ever instatiated once, while each string concatenation requires instantiating a new string object (so 7 million small objects instatiated vs 1 larger object). Has that been handled using the .Concat() method?
Hehe :)
1. You can have the XML document directly create and consume it's own `StreamReader` with with `doc.Load(filename);` 2. If you must read the file into a local variable you can just load the entire file at once with `string temp = File.ReadAllText(filename);` 3. If you must read line-by-line you are better using a `StringBuilder` with the `.AppendLine()` method.
He does not say that R# does not work with VS2019, he does not have a license for the new subscription model, and are therefore stuck on an old version of resharper.
Ah ok, so you're speaking on behalf of a business, so resharper is more expensive. Like I said, businesses can afford tooling at at the $300 price point. And if they are looking to save money, unfortunately they are sorely looking in the wrong places by recommending impacting their engineer's productivity and long term maintainability of their solution over ~1% (hopefully less) of an engineer's salary in tooling. If you want the accountant to manage assets, transactions and liabilities for a million dollar business, you don't give them a pad and paper and say "just do it right." You give them the right software and training for the job. Software development is no different.
First off, I would caution you that DbContext is really not thread-safe **at all**, and holding a single instance in a situation like a Controller where you can potentially have multiple queries/commands executing at the same time will cause problems. Best practice is to new-up a DbContext for each request and dispose it at the end of the request to avoid these kinds of shenanigans. There really isn't a huge amount of overhead in creating a new DbContext, so you should probably be creating more, not less. HttpClient is the rare exception to the rule that if you allocate something you should also clean it up. And the problem with HttpClient isn't a problem with its Dispose implementation *per se*, but the underlying OS resources with their own semantics and life-cycles. Treating all IDisposables differently because of problems with HttpClient is backwards. Instead, you should try to do what IDisposable wants (clean things up, as soon as possible) and make a single special case for HttpClient.
As other have said, it's in the error list. You can double click the error to take you to the line.
Sorry, I was the one who replied, but I'm not OP. Didn't know personal licenses were that much cheaper. Good to know!
&gt; I read this article about HttpClient Unfortunately, `HttpClient` has a weird design that's not at all representative of how `IDisposable` should be used. &gt;using an HttpClient in a using block inefficiently creates and holds open a new port on the target system for each instance of the HttpClient thats connecting. This created some problems for the author because it resulted in enormous amounts of resources being used. &gt; &gt;The fix was to create a single static HttpClient on application level and then use that HttpClient exclusively throughout the app. Right. That's more or less true of `HttpClient`. However, generally speaking, when a class implements `IDisposable`, disposing of its objects (at an appropriate time) is something you _should_ do. &gt;I've adopted similar practices as this fix in my work with Entity Framework where I now prefer to create a new DbContext instance for each Controller rather than using a new instance every time I need to connect to the db. This is not a good idea for several reasons, including: * your controller action should be largely self-contained: it represents the lifecycle of a response to a request. * this may be different for other database engines, but SQL Server via ADO.NET (which is what Entity Framework uses behind the scenes) will do connection pooling for you. If you close connections a lot, it won't matter because it'll intelligently decide whether to _truly_ close those connections. But if you leave connections that you're actually done using open, you're starving it of resources and preventing it from proper cleanup. * as others have mentioned, there are threading concerns here as well. &gt;I get that for resource management, having the DbContext or HttpClient and associated resources disposed of makes sense to release that memory, `IDisposable` is _not_ generally speaking about garbage collection and therefore not about memory. A database connection implements `IDisposable` _not_ to release memory, but to safely close connections to the server: tell the server you're logging out, finish any open transactions or other unfinished business, and eventually close the TCP socket. Getting memory back is a side effect, not the main intent. &gt;Release your memory effectively in the using block but you suffer due to opening multiple connections to whatever resource you're accessing (effectively nullifying the benefit of the released memory, unless I'm mistaken), or Connection pooling takes care of this. Don't try to outsmart it. &gt;When I'm working on databases, I don't have individual executables of SSMS open connected to each particular database that I'm working on. SSMS will in fact open multiple connections to the server, and pool those.
The problem is that n is continually growing in this case, so overall, building a string this way is quadratic in the number of lines in the file, both in CPU time and in memory allocated. Reading a huge file this way is going to cause insane GC pressure by the later iterations. True, it's fine in many cases, but this is the exact case where it's a terrible idea.
My understanding is that Dispose was originally intended for things that represent resources on the C++/OS side, but that distinction got lost at some point. You might look at this and say "but HttpClient handles sockets, which *are* a system resource" to which I'll reply "HttpClient is the manager for [C# sockets](https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.socket?view=netframework-4.7.2), it's not a socket itself"
&gt; Best practice is to new-up a DbContext for each request and dispose it at the end of the request to avoid these kinds of shenanigans. This is correct. Every time I try to work around this I run into trouble.
For exceptions specifically, the bigger factor is that the debugger hooks its own exception handler, intercepting every single exception thrown and deciding whether or not it should break or pass it on the application exception handler.
StringBuilder, oddly enough, might not the right answer here. The reason is that it often makes a copy of the content, not just pointers. The total number of bytes read and written to ram when using sb will be significant. The most efficient way to concat large numbers of strings is string.Join. If you want to skip Join's copy of the pointers you pass it, I have a gust on my github that shows how to do it by hand using unsafe code. https://gist.github.com/antiduh/426a4d22ab2449601842 I might recommend saving an array or lines of a large number, and concatenation in batches.
Yes, in this case it‚Äôs definitely not a good idea (although for small files it probably doesn‚Äôt matter in practice).
I couldn't wait to find a way to get rid of my addictive dependency on Resharper. &amp;#x200B; I just switched to CodeMaid, Roslynator, Intellisense Extender. &amp;#x200B; One thing that I didn't see anyone mention here is that Resharper QUICKLY resolves and removes unnecessary references in a project. This is one of the things I love the most about it, that and Linq awesome support and conversion. I've search before for something that does the same, stuff that existed gave me a miserable experience and I gave up, anything new or recommended these days to take care of that cleanup? If I resolve that I'll delete resharper.
Side question: Why does everyone shit on Java all the time? Is it because it's just trendy, sort of like everyone "hating" Nickelback?
Cool! Thanks!
In 99.9% of all cases, what others have said is what you need to do. In the event that you are getting a throng of compiler errors out of no where, you should consider restarting VS. Some times (rarely, though), VS's intellisense goes bonkers and starts falsely reporting errors. It is never just a single error, or even a few -- it is like the intellisense got shifted a bit or two and becomes out of sync with the source code, causing it to interpret all the code incorrectly and thus producing hundreds of errors.
Sure, you could create a simple WPF or Console app using a sqlite db (instead of relying on excel or other formats) to maintain the data and actions. Based on what you've stated, it doesn't sound overly difficult, but it's a bit too broad to really guide a definitive direction.
I was always taught to dispose of all the things. Even the ones that are supposedly disposed of by GC when it falls out of scope. The one place I remember this being drilled into me especially was with DB Connectors due to the implicit security risk of leaving the object exposed in memory for longer than necessary. "Create your object, run your query, store your results, and ditch the object" that's what I was always taught. Things may be different now, but old habits die hard.
It should be pointed out that when you use the readonly property syntax like this: public string Foo { get; } ... you can only set its value during initialization of the instance. This means you can only set its value in a constructor *or* as part of the property's declaration like this: public string Foo { get; } = "Snafu"; Basically, you can't set its value through any other member of the class like methods or other properties. A lot of people think the above is equivalent to this: public string Foo { get; private set; } ... but they don't have the same behavior.
Console.writeline(‚Äú{0} {1} {2}‚Äù,variable,variable,variable) should work
My $0.02: At this point, it's easy to shit on Java because of Oracle. There was a point in time where Java was great. It was open-source and actively developed. Some will argue that it was going downhill before Oracle acquired it, but there's been little to no development of the language since the acquisition. It has stagnated and become relegated to the realm of entrenched corporate IT while other languages (C#, Go, Python, etc.) have continued to innovate. Again, this is just my opinion, so feel free to disregard if you disagree.
thanks bro
is mizukiro your real name? wha tdoes it mean
Console.WriteLine("{0}, {1}, {2}", PAtrick. age, patrick.height, patrick.name);
No problemo üëçüèª
Nah its just some old online persona of mine.
Because Java devs often act superior to everyone else around them, so they're repaid in-kind.
Thank you, we have the facility to use SQL web edition. In a nutshell a clients membership will expire on a given date some are set to auto-renew which we recieve an email for and I update the spreadsheet. Some are done manually, but still update the spreadsheet, the spreadsheet is merely just an overview and sense check that nobodies membership expires when it should. &amp;#x200B; Therefore a program which identifies the clients who expire in the next 14 days say, and a simple option to renew by (x amount of years). Also a notification if one has expired, and facility to add new clients/ or remove exisiting who have chosen to expire their membership. &amp;#x200B; I know I want to do more than this, but the other features I want to add will be similar therefore a similar concept will be applied I assume.
Or: Console.writeline($‚Äú{patrik.age} {patrik.height} {patrik.name}‚Äù); With string interpolation
Output is the same but yours is more readable. I never really used that way of formatting it. Guess ill start to do it more often :)
All objects should be alive for their *scope*. Some objects have a scope within the life-cycle of a class instance. Some objects have a scope within a single function. And some objects live with the Program. Easy fix: Make your HttpClient a `public static` on the Program class. It lives and dies with your program, and your program only needs one for everything to use. Sometimes an "evil" global variable *is* the answer, and the people who tell you otherwise can be safely dismissed as clueless academic nitwits.
Try something like this: &amp;#x200B; `private void button3_Click(object sender, RibbonControlEventArgs e)` `{` `Outlook.Inspector inspector = e.Context as Outlook.Inspector;` `if (inspector != null)` `{` `MailItem mi = inspector.CurrentItem;` `if (mi != null)` `{` `mi.Subject = "Secure";` `}` `}` `}`
Making the lifecycle of the HttpClient equal to the lifecycle of the application doesn't mean it has to be a global variable. You can just instantiate it in the program class and pass it to your application classes through their constructors. By using a static variable you are creating a dependency on your Program class in each place where you need to use HTTP
the easiest would be to create your json as such [{xmlcontent=¬´ your original encoded xml string here ¬ª, ...] See if you‚Äôre willing to put in some effort it maps just fine!
&gt; Unfortunately, HttpClient has a weird design that's not at all representative of how IDisposable should be used. This
Oh, no! A dependency! On something that has to be present anyway! (/s, in case you couldn't tell...) I don't get it. You have to have Program there anyway. Program is the foundation of what you're building. It gets loaded first, and it stays loaded until execution completes. You're already depending on it. Why not depend on it *some more*? If you're writing a generalized library, yeah, of course you wouldn't do this. But for an application, there's *absolutely* no reason not to. I don't get it. There's being smart about avoiding concrete dependencies, and then there's being *too* smart about it... I just don't get it.
Requires your project to support C# 6+, so may not be usable in all projects.
Unfortunately programmers of garbage collected languages often end up programming as if all resources can be managed like memory. Non memory resources often need different strategies; and so one way is the disposable pattern. In my opinion it‚Äôs better to hold resources for the least amount of time; however underlying these resources can be other forms of management; factories, pools etc Which can manage the life cycles appropriately for each resource. Nearly all the application code, can just worry about acquiring and releasing the resource handle, with a small amount dealing with the complicated stuff.
For all of those who decided to -1 my comment: yes catching an exception is the part that actually causes performance loss, not throwing. Especially when accessing the stack trace. To back-up my claim: https://mattwarren.org/2016/12/20/Why-Exceptions-should-be-Exceptional/
In fact. Some implementations explicitly don't do anything. See: MemoryStream Moreover, I agree with your conclusion. All IDisposable does is provide a hook to release external resources. It's not a prescriptive "always call this ASAP." Compiler warnings and tools that report undisposed resources are simply telling about something that could be, not something that is. I think, though, this is hinting at a larger problem in our practice. Too many people rely on rote solutions that may be little better than copy/paste. That the OP asked the question is a good start, but having a slower, more verification oriented approach would have saved them (and others, and yes, myself) a lot of pain. Between managers pushing deadlines, a myopic need to be "right" or attain mastery, and having something one can use to shout "you're doing it wrong" to those newer than you, makes this kind of constant rediscovery almost constant. I've been in a few places that loudly bad mouth research or what they call academic implementations. If you push for ignorance, that's exactly what you'll get.
I'm pretty much sure they meant that it's cleaner to write your classes to use dependency injection and receive a reference to a shared resource, rather than have them all directly reference a specific static object. If that's the case, I agree with shawnz. Having a Program class with an `HttpClient` member that you then pass into classes via the constructor makes things much easier if you need to refactor, or if you want to share code with another project (even if it's in the same solution), and it makes testing significantly easier too (since you don't have to instantiate `Program` to test dependent classes. Having a reference trickle down through injection is almost always a better choice than making every class rely on your entry point for globals.
HttpClient is a stand out bad one, but to get more in line with your example I'll talk about `DbConnection` from forever ago when I worked with low-level ADO .NET. It obviously represents a database connection. Obviously the workflow is you `Open()`, do some things, then `Close()` it. The `Close()` method is more or less the same as `Dispose()`, and the type implements `IDisposable`. If you're using a connection in the context of only one method, it makes logical sense to tie its lifetime to that method, especially if the method is called infrequently. But in larger apps, it's likely you'll be opening and closing dozens of connections if you use method scope for them. That's inefficient. This is really similar to the `HttpClient` problem. Anyway, in most programs, it was common to scope the connection to a *type*, so you'd open a connection once, be able to do a lot of operations, then only close that connection when you were done. In other programs, it could be scoped to the *application* since you planned on doing so much DB work it never made sense to close it. *But all of this was irrelevant*. Behind the scenes, most ADO drivers implemented connection pooling. This meant when you said "close a connection", they'd instead flush any pending operations and instead return the connection to a waiting pool. Then, when you asked for a new connection, they'd hand you that one. This way you save a lot of "open the connection" overhead. So when you try to keep your connection open, you're complicating your program (by pushing `IDisposable` up to the class) for no real benefit. That's how HttpClient went wrong. It's not actually a disposable type, and if you treat it like one you cause issues. This goes against natural coding idioms C# developers have learned. It's a pit of failure. So it's not bad *in principle* to promote the lifetime of a disposable type, but you MUST know that it expects you to do this. This is part of why I think the Dispose pattern is a fairly bad contract. You MUST know implementation details to understand if you *should* promote an object's lifetime.
If you need to separate it out of the entry point (for example, in a library), you can always just make a static Globals class. It's roughly eleventy hojillion times simpler than dicking around with DI for something so simple as a *globally* shared object reference.
While you're right that the implementation doesn't always do anything with the Dispose method, I'd argue that you should be calling it when you're done, regardless of what the underlying implementation does. &amp;#x200B; As a real-world example, I knew a co-worker who wrote code that did not call close() on connections to HBase (this was in a Java application) because he knew that the underlying implementation of the connection objects didn't do anything. &amp;#x200B; Then we swapped out our implementation for managing HBase connections across our applications and his application started hemorrhaging memory to the point of causing OutOfMemoryErrors and putting strain on HBase. &amp;#x200B; Ultimately, you should honor the contract specified, in this instance, the interfaces. You shouldn't have to out-smart the implementation (and, if you do, then there's something suspect with the implementation and that should probably be addressed).
 public class Thingy{ private HttpClient _client; public Thingy(HttpClient client) { _client = client; } } It's really not that much work. I've definitely done it the way you describe for small projects, but when there's a team it can become an issue.
You're not wrong that you shouldn't have to out smart the implementation, but I don't think that's always possible. For instance, the `HttpClient` issue is totally due to how Windows manages closing sockets at an OS level. .NET has the implementation it should have. Something out of its control is the bad actor and having additional code to force-kill the socket in the OS would be a hack and not a fix. So, you need to step back, outside of just the code, and see what's really going on. That should be your deciding factor of correctness.
Very fair point. Perhaps lifecycle responsibility is the critical bit, then? Your application should manage the lifecycle of objects intended for singleton use, but your methods should manage the lifecycle of the objects created to execute requests using that client.
I'm thinking full-on DI framework stuff... Just passing things into a constructor... that's not bad. Then again, I like to keep my constructors clean and parameterless as much as possible.
My guess is that OP will try to use a tool to import the json (which will try to load the entire json into memory anyways)
Umm so you‚Äôre just placing the entire xml string as one json property?
Start small, dream big!
Thank you I tried what you put but I keep getting and error for e.context error says ribboncontroleventargs does not contain a definition for context and no extent method context
Just pick whatever drive letter your HDD is mapped to during the installation process. Don't fully understand why it makes a difference though
Entity framework is a wrapper around ado.net that makes interacting with dbs a bit easier in some aspects. Ef uses pocos as entities and you can manipulate the entities to change data in the database. If you already have a database you generally do dB first and scaffold in the schema, which generates all the model classes. For a brand new project you could go either way.
First, I have to confess that I clicked OK on the image... Second, you'll never get anything to line up perfectly unless you use a non-proportional font (Courier or whatever). And that will look pretty unprofessional. You can try to do it using spaces, but you're never going to get it perfect. Message boxes aren't designed for complicated messages like this. If you want complete control over layout you have to use a custom modal form.
I feel debugging is lacking on Rider. For example, I could not find a way to recover from an already occurred exception at runtime.
ok, I guess I'll go ahead and do that, thanks.
If they are like a couple of my clients, it's because one department insists on exporting their product database to XML, but another department insists on using Mongo to store the exported product data for the website. ¬Ø\_(„ÉÑ)_/¬Ø
You dropped this \ *** ^^&amp;#32;To&amp;#32;prevent&amp;#32;anymore&amp;#32;lost&amp;#32;limbs&amp;#32;throughout&amp;#32;Reddit,&amp;#32;correctly&amp;#32;escape&amp;#32;the&amp;#32;arms&amp;#32;and&amp;#32;shoulders&amp;#32;by&amp;#32;typing&amp;#32;the&amp;#32;shrug&amp;#32;as&amp;#32;`¬Ø\\\_(„ÉÑ)_/¬Ø`&amp;#32;or&amp;#32;`¬Ø\\\_(„ÉÑ)\_/¬Ø` [^^Click&amp;#32;here&amp;#32;to&amp;#32;see&amp;#32;why&amp;#32;this&amp;#32;is&amp;#32;necessary](https://np.reddit.com/r/OutOfTheLoop/comments/3fbrg3/is_there_a_reason_why_the_arm_is_always_missing/ctn5gbf/)
Because Java is superior and they are salty
good bot
Wrap this in a StackPanel and set the VerticalAlignment to be on the left. Or maybe it's Text alignment in WPF I can't remember what it's called
Simple string concat, while not super proper in larger cases, is Console.WriteLine(‚ÄúAge: ‚Äú + age + ‚Äú
Imo, it is mostly because at this point C# is clearly a better language.
Honestly I haven‚Äôt check the log with much attention, but it is clear that you are doing a cross site request, *maybe* your Identity cookies are missing the SameSite directive [(see here for more information)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie). [SameSite for Edge](https://www.google.com/amp/s/blogs.windows.com/msedgedev/2018/05/17/samesite-cookies-microsoft-edge-internet-explorer/amp/) looks like it is supported.
The easiest route is to use a monospace font, an alternative is to use tabs to align the colons.
Your application classes DON'T normally depend on the Program class. You could normally extract those application classes into seperate libraries without changing their code. But if you depend on global vars in your Program class, then you can't do that. Yes, technically the application classes "depend" on the Program class in order to together form a complete piece of software, but that's not what I mean by "dependency", I am talking about the coupling between the code in the classes.
You are looking for priority queue. Preferably an async/threadsafe one that you can use consumer-producer pattern with.
DI frameworks exist specifically to solve that issue of big constructor signatures. DI as a concept doesn't need any frameworks, but if you don't use a framework then you will have the issue of having to pass stuff around explicitly everywhere.
I think Task Parallel Library Dataflow could run on top of a thread-safe bag and then pick httprequest tasks from there as they get added. It's a bit tricky to use but its great for queue-like behaviour where data is still coming in as you're processing it. Maybe bufferblock -&gt; actionblock?
good bot
So EF is just a set of syntaxes?
we've set our same site policy to none, which by my understanding is the lowest possible level. in the log, the signin-oidc response cookies do have samesite: lax in them, but the edge ones do not, which could explain the issue. The problem there is that I don't know why there would be a difference in how the cookies are sent to the browser
Not really on topic, but you might want to look up naming conventions. You should probably define class names and properties in Pascal case (Human, Age, Height, Name, OtherExample), while using camel case for instances (patrik, otherExample). It will work either way, but it looks more professional, improves readability and makes collaboration easier.
&gt; Treating all IDisposables differently because of problems with HttpClient is backwards. Precisely. HttpClient is the odd man out, and probably shouldn't have implemented IDisposable in the first place, given all the guidance and FxCop checks that complain "always dispose your disposables". In essence, HttpClient is over-simplified and abstracts away from the way unmanaged resources are actually being used in a way that doesn't make it obvious what the proper usage pattern should be. The HTTP protocol operates over TCP. In addition to the TCP overhead, most things should be using SSL nowadays, and that has its own setup and initialization. TCP ports are a limited resource with a very high limit. Establishing an HTTP connection with a server is "cheap" in the context of a utility script or even a desktop program for an end user, but it is expensive, in the context of a low-latency, high-volume server. HttpClient is abstracted in a way that makes it appear cheap, which is fine for a desktop application where the user is not going to visibly notice 100ms of latency added to a progress bar and you're only opening &lt; 100 connections to different servers. HttpClient should have been *less* abstracted, and should have made the connection pooling aspect something you explicitly had to deal with. Desktop apps could have a convenience method to make opening a connection easy, and server programmers could be told "don't use the convenience method."
&gt; In fact. Some implementations explicitly don't do anything. See: MemoryStream Well, the terrible object hierarchy of streams in DotNet is a 1.0 sin that has been discussed many times.
I dig it so much I have a real project named FunctionApp4, https://github.com/mslot/FunctionApp4. It is a "what can I do in new SDK for Azure Functions", but still. I choose the name deliberately. Like Cloud 9. Just more amateur.
File.ReadLines. This method reads lines on demand.
Java started life as a language that was hostile to developers (the anti-C++, which was a loaded shotgun pointed at your foot). The language philosophy seemed to be "if you can't program the way we think is best, you shouldn't be able to do anything at all." The standard library forced you into design patterns for simple things, often for nonsensical ideas like being able to swap out your XML parser implementation via config without changing your code. It was not an entirely incorrect philosophy, but it was a *pain in the ass*, especially back then when IDEs weren't nearly as good and build systems were not really suitable for Java. Imagine the hell of coding all day and then having your build break with miles and miles of stack traces because * you fixed the typo on a class name * the class name no longer matched the file name (that's an error, in Java) * other things in the build were using the previous successful build's output with the previous class name (thanks, CLASSPATH!) * therefore, things that should have failed to compile did not and the error messages (miles and miles of stack traces) pointed at the place where they attempted to link, not where the actual error was. Compounding this feeling of hostility, it was not at all unfair to say that Java was invented with the primary purpose of helping Sun Microsystems sell SPARC servers and a consortium of tech giants like Sun and IBM to sell overpriced App Servers to run Enterprise Java Beans, all of which were of dubious actual usefulness compared to the enormous license fees and cost of sending your developers to multiple conferences in different parts of the country and shit.
Well, that's fun: *another* wrinkle to dealing with IEEE floating-point numbers.
Abandon the use of msgbox create a window/control and a launcher (a command can keep it simple). Then you can style your message popup anyway you want.
I missed it :'(
Your boss is kind of an idiot ;) I just looked at a tiny little WinForms app I wrote recently (just a quick and dirty thing for in-house use). The bin/Release folder is 16 MB.
4 mb is tiny as fuck.
Well, if your compilation forces to include all your related assemblies in exe. Or if your .exe include all resources files inside (icons, images, bitmaps, language, etc). Then, thats it's an acceptable size. Include related files it's a managment decision. A lot of little files increase component/resources reusability, but a monolitic exe increases deployability.
At this point, I'd be happy to just get our javascript down to 4MB
If the title is to be believed, it uses the MessageBox API, so adding some layout like a StackPanel isn't an option. (Don't use MessageBox beyond completely trivial stuff.)
That's tiny, many installers for programs are over 100MB and probably still compressed so he shouldn't be concerned
Here is a list of popular built-in Visual Studio features that may be helpful: [https://docs.microsoft.com/visualstudio/ide/csharp-developer-productivity](https://docs.microsoft.com/visualstudio/ide/csharp-developer-productivity) * You can still use the ReSharper keyboard bindings you are used to * Ctrl+t navigation allows navigating to any file, type, member, or symbol * Code styles can be enforced with an editorconfig and one-click code cleanup * Code fixes and refactorings are available through Alt+Enter * There are several free extensions for additional code inspections * [Roslynator](https://marketplace.visualstudio.com/items?itemName=josefpihrt.Roslynator2017) * [SonarLint for Visual Studio](https://marketplace.visualstudio.com/items?itemName=SonarSource.SonarLintforVisualStudio2017) * [StyleCopAnalyzers](https://www.nuget.org/packages/stylecop.analyzers/) * [CodeCracker](https://www.nuget.org/packages/codecracker.CSharp/) * [Intellicode](http://aka.ms/intellicode) \- smarter suggestions from ml model trained over open source GitHub repos.
I have a single, code-only (no large binary resources) dll that's nearly 3MB. Granted, it's a lot of repetitive, template generated code. My bin folder's over 100MB (no self-contained framework, just my apps and referenced nugets etc.).
Does he live in the 80s? 4MB is tiny...
Sure, they can message me
My WPF .Net 4.5 app is a single exe bundled with everything and weighs in at 6.7 MB. No concerns here about size. If anything I feel like that's smaller than most other apps that have less functionality.
so, is mono just a runtime? or are there other differences? If i develop on mono, am i guaranteed that it will work on windows without mono?
You can control the minimum number of spaces with string formatting. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated
ok, thanks!
It really depends what your environment constraints are. 50kB might be too big in some cases. 1GB might be small in others.
This type of mangling is called "variable-width font" FYI.
All you need now is for it drop a 4x1 into the wrong place and you're basically done :) &amp;#x200B; I've a real soft spot for these things. The first proper C library I wrote was a DOS windowing library. Lots of ANSI stuff, mouse support, modals, menus. Dragable, resizable, *\*breaks into song\**
This page is 8mb and I have ads disabled.
Since when did C# start allowing implicit narrowing conversions between number types?
[commited a new version](https://github.com/zeroKilo/CSharpSyntaxHighlighter/commit/58d4994b8ebfcc6ae9e25ba2688d5328d891ac58), this now has start and end for "apply" as optional parameter (example [here](https://i.imgur.com/CSZEMJ9.png)), it fixes the scrolling bug and I added an autoindent feature that you can call over ctrl + I in the example program (example [here](https://i.imgur.com/9pyl3Ws.png)) greetz
Is this a recent change? [Implicit narrowing conversions used to be illegal in C#](https://stackoverflow.com/questions/53129195/c-implicitly-convert-double-to-float).
[commited a new version](https://github.com/zeroKilo/CSharpSyntaxHighlighter/commit/58d4994b8ebfcc6ae9e25ba2688d5328d891ac58), this now has start and end for "apply" as optional parameter (example [here](https://i.imgur.com/CSZEMJ9.png)), it fixes the scrolling bug and I added an autoindent feature that you can call over ctrl + I in the example program (example [here](https://i.imgur.com/9pyl3Ws.png)) greetz
This sounds more like a bug than anything else, particularly since according to the bug report, the values are identical in a Debug build.
Personally, I would go with a grid if you want the colons to line up. Three columns: one right-aligned, one for the colon, and one left-aligned. I'd prefer that over the `StackPanel` for what the OP is describing. Though as /u/chucker23n pointed out, I don't know if this is possible in a standard WPF `MessageBox`.
Shit, why dont‚Äôcha just break into my house?
Clickonce can create file associations for an app. https://docs.microsoft.com/en-us/visualstudio/deployment/how-to-create-file-associations-for-a-clickonce-application?view=vs-2015
Your TLS is misconfigured.
 Sorry, I don't believe he just came up and said 4MB was too big without giving any sort of reason. Either you're leaving out details (like you have 2GB of dependencies and other files are getting too big), or he gave a reason you're not telling us. &amp;#x200B; No "boss" would know enough about constraints to think 4MB is too much without having a reason.
Wow this brings back memories. About 22 years ago, my first game was a CLI tetris game in Basic (QBasic or something I think). &amp;#x200B; I didn't know anything about computer science and all my variables had 1 letter 'c' for cell and 's' for shape and so on. Eventually, I ran out of letters and named something "box". Seemed such a waste to type 3 letters each time. Anyway, good luck with the game! It's actually a very interesting programming challenge
Yeah, but that post history kind of fits: the boss has built their convictions in the early 2000s and not adjusted / evolved their views since. C# 2.0 was once new. 4 MB was once large for an app.
I can pick locks :)
Regardless, it's never a good idea to attack your boss on social media. All the guy has to do is accidentally leave reddit logged on once, and his boss could find his posts. Anonymity is great until it isn't.
And you made windows that you can break now
 A boss in a tech field, even disregarding apparently not updating for the past almost 20 years, still thinks 4mb is a lot? That doesn't sound fishy at all? Unless he's been in a cryochamber and has never opened a computer since, I don't believe that for a second. &amp;#x200B; It just sounds like the OP doesn't like his boss and is trying to get validation.
I see where you‚Äôre coming from, but I think ‚Äúattack‚Äù is a stretch for what‚Äôs going on. These are valid questions.
Yep. Disable(\*pane ... etc :)
Holy crap. Impressive. I don't even know where you'd begin to do something like this. So great job :) on both your project and destroying my self esteem lol
You're right, "attack" was too strong a word. But it depends on how sensitive the boss is. Some people don't like to be questioned at all, and being questioned on social media can be even worse because it's so public (even if no names are mentioned). I can occasionally be an asshole on reddit and sometimes I post things I regret. But one line I have never crossed is to criticize anybody I work with. I'm a programmer so everybody I work with is also on the PC all the time. The odds are very good that at least some people I work with have seen my posts even if they don't know who I am (and vise versa).
 It's a model to interface between your code and the database. Instead of manually writing queries through ado.net or dapper (so... SELECT \* FROM some\_table WHERE ID = 1), you can do something like SomeTable.FirstOrDefault(x =&gt; x.ID == 1) in C#. Entity Framework gives you the advantage of creating sql scripts while using C#, and keeping type constraints on your database. &amp;#x200B; Take for instance of a schema of \`SomeTable ( SomeColumn )\`. If you write manual SQL (so SELECT SomeColumn FROM SomeTable), but then realize that you named it wrong (or literally any reason to change a column like type), you will get compile time errors up front of all the places that column was used, instead of getting a runtime exception later. &amp;#x200B; It just makes SQL easier for C# developers, basically.
Java was too far ahead of its time: Too bloated for developers from the 90s, but not modern enough for developers from the 2010s. But by 90s standards, it was space age, and by 2010s standards, it is light and robust.
I'll just drop this here. https://github.com/migueldeicaza/gui.cs
Why would you this
It was super easy actually, I call lies, I just had to use a board game tutorial to find the script.
I'm so glad that I don't need to deal with that any more. There was a time when I needed to optimize bond yield calculations and any difference was considered a failure. It was a right pain in the ass.
Hm, interesting. I'm currently working on a pretty similar project (although with different focus points). Might have to rename some classes and methods to avoid making it look like a ripoff.
Attack on my boss? No. Looking for validation, that ***I'm*** not going crazy? For sure! Thank you everyone.
I'm such a noob, ok, how do you use a monospace font? I tried fontfamily="consolas" and fontfamily="courier" in the window xaml, and nothing changed.
What would you use if not WPF MessageBox, winforms messagebox, or something completely different?
What are your thoughts on making the game compliant with the Tetris guidelines? https://tetris.fandom.com/wiki/Tetris_Guideline
You could always create a custom window and launch that. You don't have to go through `MessageBox.Show()` or whatnot. For what you're looking to do, that might be the better way to go. You could style it and lay it out however you want. The standard windows `MessageBox` is really more for alerts and the like, not for formatted information display.
Yeah, there was a heavy dose of sarcasm and humour in that comment.
This looks like something I'd like to have in my app: [https://stackoverflow.com/questions/7888231/efficiently-display-text-on-image-in-wpf](https://stackoverflow.com/questions/7888231/efficiently-display-text-on-image-in-wpf) (first answer with the text on the frosty looking background over the image), but no matter what I do visual studio gives errors when I add it to the .xaml, would you know how to do that? Here is my .xaml: `&lt;Window x:Class="JRGSlideShowWPF.MainWindow"` `xmlns="`[`http://schemas.microsoft.com/winfx/2006/xaml/presentation`](http://schemas.microsoft.com/winfx/2006/xaml/presentation)`"` `xmlns:x="`[`http://schemas.microsoft.com/winfx/2006/xaml`](http://schemas.microsoft.com/winfx/2006/xaml)`"` `xmlns:d="`[`http://schemas.microsoft.com/expression/blend/2008`](http://schemas.microsoft.com/expression/blend/2008)`"` `xmlns:mc="`[`http://schemas.openxmlformats.org/markup-compatibility/2006`](http://schemas.openxmlformats.org/markup-compatibility/2006)`"` `xmlns:local="clr-namespace:JRGSlideShowWPF"` `xmlns:integration="clr-namespace:System.Windows.Forms.Integration;assembly=WindowsFormsIntegration"` `mc:Ignorable="d"` `AllowsTransparency="True"` `Title="JRG's SlideShow WPF v1.0" Height="360" Width="640" MouseWheel="MouseWheel2" Background="Black"` `Icon="cd.ico" Loaded="Window_Loaded" ShowInTaskbar="False" WindowStyle="None" KeyDown="Window_KeyDown"` `MouseLeftButtonUp="OnMouseLeftButtonUp" MouseLeftButtonDown="OnMouseLeftButtonDown" MouseMove="OnMouseMove" WindowStartupLocation="Manual"` `FontFamily="Courier"` `&gt;` &amp;#x200B; &amp;#x200B; &amp;#x200B; `&lt;WindowChrome.WindowChrome&gt;` `&lt;WindowChrome` `CaptionHeight="1"` `CornerRadius ="0"` `ResizeBorderThickness="4"` `GlassFrameThickness="0"&gt;` `&lt;/WindowChrome&gt;` `&lt;/WindowChrome.WindowChrome&gt;` &amp;#x200B; `&lt;Grid Name="Grid1" Background="Black" &gt;` `&lt;Image Height="auto" Margin="0,0,0,0" Width="auto" Name="ImageControl" RenderOptions.BitmapScalingMode="HighQuality" Stretch="Uniform"/&gt;` `&lt;TextBlock Name="TextBlockControl" Text="test" Width="auto" Height="auto" Margin="10,0,0,0" Foreground="Red" Visibility="Visible" &gt;` `&lt;/TextBlock&gt;` `&lt;ProgressBar Name="progressBar" HorizontalAlignment="Left" Height="10" Margin="10,20,0,0" VerticalAlignment="Top" Width="100" Minimum="0" Maximum="100" Visibility="Hidden"/&gt;` &amp;#x200B; `&lt;Grid.ContextMenu&gt;` `&lt;ContextMenu&gt;` `&lt;MenuItem Header="Pause" Click="ContextMenuPause"/&gt;` `&lt;MenuItem Header="Play" Click="ContextMenuPlay"/&gt;` `&lt;MenuItem Header="Next" Click="ContextMenuNext"/&gt;` `&lt;MenuItem Header="Previous" Click="ContextMenuPrev"/&gt;` `&lt;MenuItem Header="Delete" Click="ContextMenuDelete"/&gt;` `&lt;MenuItem Header="Copy and Delete" Click="ContextMenuCopyDelete"/&gt;` `&lt;MenuItem Header="Open Folder" Click="ContextMenuOpenFolder"/&gt;` `&lt;MenuItem Header="Change Timer" Click="ContextMenuChangeTimer"/&gt;` `&lt;MenuItem Header="Full Screen Toggle" Click="ContextMenuFullScreen"/&gt;` `&lt;MenuItem Header="Randomize" Click="CheckedRandomize" IsCheckable="true" Name="ContextMenuCheckBox"/&gt;` `&lt;MenuItem Header="Benchmark" Click="Benchmark_Click"/&gt;` `&lt;MenuItem Header="Image Info" Click="ImageInfo_Click"/&gt;` `&lt;MenuItem Header="Exit" Click="ContextMenuExit"/&gt;` `&lt;/ContextMenu&gt;` `&lt;/Grid.ContextMenu&gt;` `&lt;/Grid&gt;` `&lt;/Window&gt;`
I mean... it really depends. I'm seeing a lot of answers here that it's super small, but I have *super basic* windows form app that rolls out under 300KB.
I'm going through this now on a graphic implementation which adheres to the standards, great little project!
The best error-handling is the sort that detects the conditions that would create the error and deals with them before the error occurs. It can be difficult-to-impossible for this sort of thing to be *perfect*, so you still have to deal with catching and handling actual exceptions, but it's usually faster and cleaner to, e. g., check that the file exists before trying to open it than to open it and catch the FileNotFoundException that gets thrown.
Since strings are immutable, I would avoid doing concat the way you are doing. It would be more efficient to have a list of string and add them in the loop, then simply calling .Join() on it. Or make use of the StringBuilder clasz.
What version of [ASP.NET](https://ASP.NET) MVC is the [sales.somedomain.com](https://sales.somedomain.com) site using? Is it hosted on IIS? A few days ago I had a similar issue involving a [ASP.NET](https://ASP.NET) MVC 5 client hosted on IIS that was using a IS4 login.
A `StringBuilder` does have to reallocate its backing array (similar to a `List&lt;T&gt;`), but it does so in a smart way, keeping the amortized cost to O(1).
`listener.GetContext()` should block until you hit it. This will naturally make the main thread unresponsive. Are you hitting it (i.e. opening a browser to http://localhost:1234/)?
Internet points
What a collosal waste of time
Yes. When I send the request though, nothing happens because the program immediately becomes unresponsive. There is no additional code running btw.
I actually started the same project with a completely different approach lol, yours looks much better
&gt;The HTTP protocol operates over TCP this is not strictly true. http is a content protocol. tcp is a transport protocol. different layers of the stack. &gt; TCP ports are a limited resource with a very high limit. Es on windows there are something like 15000 ports available for outgoing connections that are recycled 4 minutes after close. that may sound like a lot but it doesnt take much to bring it down if you don't handle your connections properly if you have a high volume workload. back on topic: i agree, httpclient is just a bad design. it is correct to give programmers the control to do what they need to, but it is very not obvious what the correct thing to do is. Almost should have been a "YouDoItForMeHttpClient" and a "LetMeDoItMyselfHttpClient".
well, if you throw an exception it has to be caught otherwise your program will crash. i would say that catching and throwing exceptions are the same thing in this context.
which is god awful imo. some programs are terribly written in the core, and have exceptions all over the place. slows debugging to a crawl even with "i don't care about these" settings on.
Clearly this was a long time ago, so no worries if you cant remember, but for some reason I'm really curious: how did you go about making a 2d grid from cells? Did you just know that every x number of cells was a row/column, or did you use some other method? This made me remember real first programming (outside of small scripts I'd write/steal) done in Game Maker in my early high school / late middle school days (~10 years ago). I remember using their physics engine to make my Tetris clone (in their drag and drop editor), as there was no way I was going to come up with modeling that at the time, which I find now absolutely hilarious. Thanks for making me remember this. It took me a bit to break some of the bad habit hacks I learned from fudging with that program, lol.
You're doing a DSL using reflection. Which will be very difficult for those who come after you to add things. obviously you're making it work and that's the most important part, but if you really want to make something flexible and reusable you could make an interpreter of sorts that gets "instructions" from some definition file. You could have table/column mappings, renames, orderings, etc defined there instead of code. Then use your tool for any table, any columns!
also fields are often referenced as strings. `nameof` wont save you here, because private members are never in scope except in the original source. verry fragile.
Why did you waste your time to make that comment?
"Using String or string is a stylistic choice, based on which way you prefer things to be interpreted." "No it is not stylistic, because they can be interpreted differently!" "Yeah... that's the choice."
Do you have permission to listen on 1234?
I think so. I tried other ports and it straight up told me as an error.
To express my opinion. Why did you waste yours to respond to me if you don't like what I had to say?
Honestly, most languages are at this point. However, there is one thing I desperately want from Java, actual anonymous objects. `new { /* bag of crap */ }` is great and all, but I want to easily do something like: new ISomeInterface { public void FooBar() {} } Without having to jump through hoops, work with conversions, or do compiler tricks to have it work.
I don't understand people like you and I was hoping to get some insight.
Really need more context here. Why has he expressed the concern? Are you publishing this to thousands or millions of clients and bandwidth costs could add up maybe.
.net core 2.1. It is hosted in a linux docker container
After writing some powershell _scripts_ to interface with our software through our .NET SDK, I decided it would be a lot easier to both make, and use _cmdlets_ so I watched a Pluralsight course on building cmdlets and proceeded to write a dozen or so commands to do various things like adding cameras to the software (surveillance video management software), managing roles/users and acl's, device groups and so on. One challenge I ran into was using the WriteProgress PSCmdlet method from another thread. I originally wanted to pass a IProgress&lt;int&gt; into a long running method defined in a helper class, and use the delegate to call WriteProgress in order to have a nice progress bar experience in PS. But when PS started crashing I discovered you have to update progress from the right context similar to the way GUI elements must be updated from the UI thread. But there doesn't seem to be a way to capture the context in a cmdlet in order to marshal the progress updates to the right thread. So I ended up using a BlockingCollection&lt;int&gt; and my long running process calls Report on an IProgress&lt;int&gt; which has a delegate which adds the int to the blocking collection. I'm doing a collection.GetConsumingEnumerable and then doing my WriteProgress calls from the foreach loop there. And my long running thread calls CompleteAdding in the finally block in order to "unblock" the method and return. I'm used to having to marshal calls to the UI context in WPF/Winforms. It was really annoying being forced to come up with another way to do it without simply invoking on the right thread, but it was also fun and rewarding working it out and finally seeing a smooth progress bar experience.
Padding with spaces works only on a monospaced font.
No more than 100 or so clients. Nothing major.. no limit on bandwidth.
You should check out the Fody nugets.. some are pretty slick.
If you‚Äôre using [Xamarin.TestCloudAgent](https://www.nuget.org/packages/Xamarin.TestCloud.Agent/), make sure to remove it from the release build. It uses private APIs to allow automated UITesting. #if DEBUG Xamarin.Calabash.Start(); #endif
For practice
I didn't know these existed, but yeah I'll do that
Hi, I'm somewhat of a beginner to C#, having messed around in console and not much else. What did you use to make this? I want to make something visual, but I dont even know how to approach doing something like that.
You might want to show some code if you want some help with it.
Sounds like you stored a date as a string, instead of a DateTime.
&gt; HttpClient should have been less abstracted, and should have made the connection pooling aspect something you explicitly had to deal with. I don‚Äôt think so. `SqlConnection`, a decade older than `HttpClient`, does pooling under the hood and has no problem with `IDisposable` (it lies about Dispose always actually closing the connection). That seems to be the right approach to me: you *signal* no longer needing a resource, and the internals handle what that *really* means.
As best as I can tell, it‚Äôs development has sped up again in recent years, so this criticism doesn‚Äôt seem valid. It‚Äôs arguably fallen behind C#, but it‚Äôs now trying to catch up.
another suggestion would be: reduce newing up `StringBuilder` and reuse them ( call `.Clear()` ) since you're not doing things concurrently, you should be fine reusing a single `StringBuilder` throughout an `Apply();` &amp;#x200B; for the future: Make `SyntaxHighlighter` an abstract base class and `CSSyntaxHighlighter` inherit from it. encapsulating the RTF creation process and Apply, aswell as the `FindAllComments`, FindAllXXX `CSSyntaxHighlighter` would be overriding the FindAllComments. `SyntaxHighlighter` should also have the ability to use different colors depending on the implementation. E.g. `protected virtual Color GetTokenColor(TokenType type) { return Colors.Black }`
I‚Äôve never been a fan of ReSharper, but I‚Äôve always been envious of the unit test runner. Visual Studio has improved quite a lot with ‚Äúlive test discovery‚Äù and a couple of years other improvements, but it still lags in usability and features. NCrunch is very nice, but pretty expensive for my needs. I used to like using the NUnit2 GUI runner, but that‚Äôs not available for NUnit3. I very often use the NUnit console runner these days and it suits me pretty well, but I‚Äôve not found a decent GUI runner for a reasonable price/free.
All ports lower than 1025 (eg. 1-1024) need special permissions. (eg. run as Administrator)
you still have to catch the FileNotFoundException or whatever, because even though a file might be there, something could have an exclusive lock on it (greetings to my friend Defender/Avast/AnyOtherAntiVirus) &amp;#x200B; I recommend Eric Lippert's post on https://blogs.msdn.microsoft.com/ericlippert/2008/09/10/vexing-exceptions/
That page does not mention the names of the Tetriminos. :-(
I'm not sure about EF Core, but in the regular EF you would want to do: . OrderBy (s =&gt; s.Name) . ThenBy (s =&gt; s.Date)
Read their licensing FAQ first though: https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md
I started by making it resize the console, and showing a message when using Mono, as I'm developing on Linux. Then, I made a string array with placeholders for score and other things. That array is printed every second. And that's where I'm now
It does, their names are I, O, T, S, Z, J and L. That Reddit post a little while back about them having actually names was fake.
It was fake? Aww... That makes me sad. But also a reminder to always cross-check everything before babbling on..
Seems someone did something like it from last year https://github.com/alsiola/DeclarativeConsoleMenu
Side issue: use a `StringBuilder`. You are killing your perf by concatenating so many strings.
Probably stupid idea: have you tried turning off HTTP/2 ?
I would use SMO: [https://docs.microsoft.com/en-us/dotnet/api/microsoft.sqlserver.management.smo.table?view=sql-smo-140.17283.0](https://docs.microsoft.com/en-us/dotnet/api/microsoft.sqlserver.management.smo.table?view=sql-smo-140.17283.0) General read on working with SMO: [https://docs.microsoft.com/en-us/sql/relational-databases/server-management-objects-smo/sql-server-management-objects-smo-programming-guide?view=sql-server-2017](https://docs.microsoft.com/en-us/sql/relational-databases/server-management-objects-smo/sql-server-management-objects-smo-programming-guide?view=sql-server-2017)
Question, doesn't AddDbContext work against the thread safety concern with a scoped TContext service added?
Showing a message when using mono? Why are you not using .Net core to do this?!
Interesting idea.
In case you might be interested... I use T4 to generate multidimensional sorting data structures (SPTs) in my project here: https://github.com/ZacharyPatten/Towel
I meant to show a message that tells the player to resize the window
https://github.com/ZacharyPatten/Towel Generic mathemetics, symbolic mathematics, generic data structures, typed measurement mathematics, extension methods... I'm just working on a framework to add a lot of code that people have been begging for in C# for years. :)
Why? Why not using EF instead?
I think Haxe language is capable of the exact thing you're doing, if I understood right. From this page ( https://github.com/HaxeFoundation/haxe ) it says : Haxe allows you to compile for the following targets: JavaScript C++ C# Java Lua PHP Python 3 HashLink NekoVM Flash (SWF Bytecode) ActionScript 3 And its own interpreter
Ummm... don‚Äôt quite a few languages trans-compile to other languages. Pretty sure loads of languages can be converted to javascript (including Kotlin). The original C++ was converted to C, before it took off on its own. What exactly do u mean by virtual?
Virtual meaning it doesnt "exist" as a language, its sole purpose is to convert to other languages
Okay.
Hey guys I'm a c# software dev, have been working for a large international shipping company for about 5 years. I have quit my job and would like to try working on some small to medium sized remote assignment, to get a feel of it and see if it is something i like. I have spend most of my time working on c# backend, stuff and sql, i do know some js but i prefer working with c#. PM me if you have something that might be of interest : )
Thanks
You wither have to use SMO as detailed elsewhere, or use the following... var tsql = ‚ÄúSELECT * FROM [&lt;TABLENAME&gt;] WHERE (1=0)‚Äù; var cmd = cn.CreateCommand(); cmd.CommandText = tsql; cmd.CommandType = CommandType.Text; var reader = cmd.ExecuteReader(CommandBehavior.SchemaOnly); If (reader.Read()) .... You can inspect the details now. This is all from memory and posted via iphone. Hopefully you get the gist of how to do it.
Sorry to burst your bubble, but no language "exists", the point of every language (except for first generation languages) is to be "converted" to other languages. The type of language you describe is called a "transpiled language", and there are quite a few. Most of them transpile into one other language only though, like TypeScript, CoffeeScript etc., so Haxe is indeed the notable exception. Nim started out as such a language as well, but later they decided to limit the number of target languages.
To what end?
Yes that is true, my mistake
Basic language stuff, writing, reading, variables, operations etc.
Thanks, will give it a look!
Thank you a lot! I guess since I don't want to use a query I will have to stick to SMO.
&gt; A boss in a tech field, even disregarding apparently not updating his programming knowledge for almost 20 years, that still does code reviews, still thinks 4mb is a lot? I'd argue engineers-turned-managers who overestimate their technical competence and have a penchant for micromanagement aren't unheard of. &gt;It just sounds like the OP doesn't like his boss and is trying to get validation. Also quite possible, yes.
What does EF have to do with this? I need to operate on the tables dynamically
Well done dude, keep at it
Thanks
Please provide some more context. &gt;I have come up with a Virtual High Level language called RADev Was this an assignment at school? &gt; this is not compiled or interpreted directly, it is instead converted to any other existing programming language and compiles natively in that language, It sounds like it is interpreted and then transpiled? &gt;currently there is one implementation, called IronRADev, which converts RADev code into compilable c# code, you can see it at: https://github.com/danielandastro/RaDev-Base I can see some code, but I'm not really seeing any examples. What does RADev's syntax look like? What features does it have?
Awesome. It may not change the world, but we all started somewhere. If you run into a major issue, make sure you persist and find a solution, that's the best way to strengthen your coding chops.
Not an assignment Yes, it is interpreted, converted to the language syntax and executed through the tools of the language, eg the MCS, which I used I have included some examples on the IronRADev branch, that will soon merge with master when I iron out a few bugs, no pun intended
No issues yet aside from a strange bug in the print and printl items
That does not make the language "virtual". Different languages and their implementations use quite different ways of making them work, and all of them (including yours) are real programming languages.
Don‚Äôt let it keep u down tho. Language design can be a fun pass time. Just look into tokenisation and BNF.
Yeah, the 'Item Engine' needs a complete rewrite
This might not be the most useful project but thumbs up for trying something like this !
Thanks
I think the question is: is there any reason why I would want to use your language, instead of one of the many existing languages? Or are you just making it to learn, or for fun? Those are still valid reasons to do this, but I think it helps to be clear about that.
Yes, scoped is the default behavior. But you can pass out parameters to change the life time. Check the docs for more info on it [AddDbContext doc](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.entityframeworkservicecollectionextensions.adddbcontext?view=efcore-2.1)
It's for fun, and can be used as both a learning tool, and a rapid app development tool, when it gets big
I'm going to keep looking, but I'm having trouble figuring out how to do so. The current stack is a .net core 2.1 service running in a linux docker container in an azure kubernetes service. I did not see anything useful in any of the azure settings, nor have I found a quick answer in code. Any ideas?
Not on Windows. But all ports need HTTP.sys permissions on Windows.
I made a Pacman clone in 2 weeks from scratch in 2 weeks at the end of my bachelor so in 5 weeks there should be no problem.
If you are doing it to learn, you should have a purpose in mind, otherwise what are you learning? - what will make it 'rapid' to use to develop apps?
EF is for programmers way of managing persistence. You said you dont want to use sql to get table names, but what you are doing is not programming if you "need operate on tables dynamically", that is data based manipulation. With EF you operate on classes and objects, not tables of database. without knowing why or what is the purpose of the need to operate on the tables dynamically then any/all approaches are equivalently good/bad as any other approach, so using or not using sql is of no functional consequence.
I have no idea what you are saying. Data based manipulations is not programming? And you don't have any idea of the project that I'm working on ye you seem to know what is of functional consequence and not. In the world of business software things are not always black and white and you can almost never follow any paradigm to an extreme.
As a learning tool, It's easier to write code, and you can use it to see the same code in multiple languages, as for rapid development, it's faster to use and is far more readable than some Lang's, *cough* python
https://mva.microsoft.com/en-us/training-courses/c-fundamentals-for-absolute-beginners-16169?l=Lvld4EQIC_2706218949
Thank you :)
Put in a readme to the repo, most people aren‚Äôt gonna read anything else.
There is one, but I have to improve it and furnish it with more details
I went through that series myself and found it really helpful to get me started. After you've done that have a look at w3resources at they have a massive C# section
"And you don't have any idea of the project that I'm working on" , yes I do not know of the reasons of you are trying to achieve, that is why I asked. What you are asking is in my experience what the lack knowledge causes people to use, if you need to just get something finished quickly then only you know what is needed, what I suggested was from experience and knowledge of time wasted with similar paths. My first question was Why? why this is needed? I haven't met any programmer who used EF and needed to resort to similar methods that is being asked. I assumed the aim was to learn better methods in conjunction with just getting it done. Data based manipulations is not programming? no, hence the term database developers and programmers. Asking this question in CSharp subreddit makes the paradigm to be dictated by EF, otherwise Dotnet or SQLServer forum should be where that non EF answers are suitable answers.
If you have the source of the DLL, why not just put the source into the project? If not, the devs of the library don't want people to look into their code
You should put a hello world or something in the readme.
I write open source general purpose low-level frameworks, and I currently have the mentality of never using "private". Instead of private, I use internal for everything that would otherwise be private. This keeps things relatively clean for noobs to my framework, but if advanced users need to access internal definitions, they can download the source code and add their libraries as an "internalsvisibleto" attribute so they can access internal definitions without using reflection. This is not an ideal solution, because it is painful for these advanced users to upgrade the code. Every time I push and update, they will have to redownload the latest source and re-add the internals visible to attribute... But it at least makes it possible. There is probably a better pattern out there for this kind of thing, but I'm not currently aware of it.
Yeah will do
Just use VS Community 2019.
Game developer here, and I disagree. I use tons of simple public fields in static classes to store some "common" data. And the reason for fields (not properties) is that if the compiler choses, the property will not be inlined and I will have some performance loss. A simple field is just a simple read command, and due to being static it can be stored on the stack. &amp;#x200B; This is more like a use-case scenario, and we are all better having more options.
Sorry for the late reply, but thank you so much for that link. &amp;#x200B; I've got some diagrams of the system, but couldn't find a resource as helpful as that. Thank you for your time!
Agreed. VS Code is nice and it‚Äôs certainly getting some amazing updates but nothing beats the niceness of a full IDE like Visual Studio.
What are you gaining by harassing a person who finished a project? How is it helping you finish your projects? Don't discourage people with dirty hands. Being done is good. Doing things is good. They don't have to have a purpose other than "it made me happy".
Visual Studio 2017 Pro.
This thread is why people don't like software developers and why people quit. Excited person: "Hey, I just finished a project, it's pretty neat, isn't it?" /r/csharp: "Muuuuuh. It doesn't fill these niches. You didn't create a user story that grips me personally. You'll never sell it, nobody will ever use it. It's terrible. Delete your account. Next time follow this template and if it can't at least duplicate what I do in Perl don't bother. Beard must be this long to continue."
Im using VS2017 Enterprise. Pro would be good enough though
lol - I'm hardly 'harassing' him... no need to be so sensitive. If he didn't want feedback on the endeavour, why would he post it to reddit? Just pointing out if your doing something as a learning exercise it's useful to have an idea of what you are trying to learn. Saying stuff like 'when it gets big' and ' its faster to use and is far more readable than some Lang' suggests he has some misconceptions about how programming languages work, which if I had I would find useful to be pointed out so I could correct them (i.e. **learning**)
Game Maker... Nice. I always had an aversion from game studios, but I guess Unity3D really proved that wrong. I had a terrible way to draw the cells. Each character was a cell, so everything was much taller than wider. ‚ï¨ ‚ï¨‚ï¨ ‚ï¨
VS2019 Professional at work and VS2017 Community at home (haven't upgraded to 2019 yet).
VSCode at home on Linux. VS Pro 2019 at work Have colleagues that use Jetbrains Rider. Advice? Try them all out and pick one, no harm in that
At home Rider or Atom because I run Linux. At work, Visual Studio 2017 plus ReSharper because I'm required to use Windows. Mostly, I pick them for the keyboard shortcuts.
If you can afford it, and you hop from OS to OS, use Rider. Rider is my go-to these days. It is a lot better than VS. It's quicker, parses csproj files properly, etc. I highly recommend it.
Sounds like your projecting a bit :( poor guy
VS Professional 2017 (at work) and VS 2019 Community (home)
[I found only this](https://azure.microsoft.com/en-us/blog/announcing-http-2-support-in-azure-app-service/?cdn=disable), although I‚Äôm not entirely sure that it applies to you. Anyway you are probably using a reverse proxy with Kestrel to host your website so you should look on the configuration of your reverse proxy server of choice
&gt; The Haxe cross-compiler, a state-of-the-art, lightning-speed compiler for many targets I have to ask... what does it mean by lightning fast?
Visual Studio for Mac
You can do that with a `dynamic ExpandoObject` :-D. I agree, though, that it would be nice to have the ability to add behavior to anonymous types instead of just data. I *think* F# has the ability but I might be completely mistaken.
&gt; I use tons of simple public fields in static classes to store some "common" data. And the reason for fields (not properties) is that if the compiler choses, the property will not be inlined and I will have some performance loss. A simple field is just a simple read command, and due to being static it can be stored on the stack. I don't quite follow. &gt; simple public fields in static classes If it's static, why does storage matter at all? It'll be minuscule. Your argument makes more sense if you have a _lot_ of instances. A struct representing a vector, for example. &gt; And the reason for fields (not properties) is that if the compiler choses, the property will not be inlined and I will have some performance loss. Right, there are scenarios in which a property is inlined (whereas a field will obviously always be 'inlined', as there's no method calls in the first place). &gt; and due to being static it can be stored on the stack. I don't follow you here. [Static members will almost inevitably end up on the heap.](https://jonskeet.uk/csharp/memory.html) (A different runtime might behave differently, though.) _Value types_ are (typically) on the stack. But that's the case regardless of whether they are accessed through a property or a field.
But the important part is "if you can afford it" tho.
No-ones saying that buddy. Half the people are simply asking why, the rest are asking what the long term goal of the project is. Language design, while difficult, isn‚Äôt so rare that when someone starts it we have to automatically be invested and supportive. Some people are informing OP of other projects from which he could learn and improve. I don‚Äôt know who you‚Äôve been working with, but in my experience Programmers value actual reasoning above simply peoples feelings. If I feel your writing something wrongly, I‚Äôll call u out on it, we‚Äôll debate on the ramifications and ideally ‚ë† of us would walk away with a new perspective we will carry on to all future projects. Letting. Someone do something badly is simply repeating history. For example, OPs language is a simply word by word token parser, which is fine, but for more complex tasks he should really invest in creating a tokeniser operating on a character by character basis.
Sooo.... Mono?
VS Code on linux, VS studio at work
C# devs are superior to everyone else, what fools! (purposely being ironic)
These can be adjusted, at least in Rider and in R#
&gt; What are you gaining by harassing a person who finished a project? Have you looked at the github? Finished might be a bit of an overstatement. This looks like a fun tutorial for parsing strings and displaying console output, and I give credit that OP is learning how to manipulate strings, split strings and parse stuff. This is far from a virtual language, let alone a "rapid app development tool" (Whatever that means)
try out also the "c# programming yellow book" by Rob Miles you can find the free pdf online. It covers all the basics and it's really well written, by far one of the better ways to start learning C#
**Yes** on windows. Trying to use the HttpListener-Class and listen to a port lower than 1025 leads to an `Access Denied` exception. Works fine if you run the same application as administrator. &amp;#x200B; Atleast on Windows 10.
Im not really big fan of books but I will definitely read this one. Thanks
VS Code on linux ar home, also on windows at work.
Or just "transpiler" if you're lazy with your character usage. :D that's what we usually call our source transform projects, anyways. Worth noting that C# itself goes through a transpile step into MSIL.
If you're using GetSchema("Tables") could you not just use GetSchema("Columns") and filter by tableName? &amp;#x200B; [https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlconnection.getschema?view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlconnection.getschema?view=netframework-4.7.2)
It's pretty reasonable, and if you're a student you can get it for free I believe.
If we pat people on the back for writing nonsense code we'll get even more rubbish code into the world. We want to criticise and chastise people for their code - then they will learn to do it better or give up, reducing the amount of crap code. What if this guy gets a job as a developer and writes a DSL using string parsing huh? git --take-out-back-and-shoot Noone writes a ""programming language"" for fun (in the purest sense of the word) randomly, they do it because they want to learn about computers. He'd be better reading about ASTs and lexers/parsers and we, as the experienced members of the community, should guide him towards that instead of fostering delusions of grandeur
VS Pro 2019 and Rider at work. At home VS Community 2019 and Rider. Sometimes VS code.
You can as a student, yes.
VS2019Pro for legacy software and complicated debugging scenarios (a lot of which are at least new csproj format and built with dotnet), VSCode for a quick text editor with good syntax highlighting (including log files!), and lately Rider for multiple interoperating processes for debugging. Main benefit of Rider is the built-in API query tools.
How I see it: The pros of Rider are: * multiplatform * great refactoring support * lots of useful features (like local history, contexts, built in code cleanup, etc) * similar to all the other JetBrains IDEs so if you want to switch language you don't have to learn new IDE * pretty neat developer experience in my opinion cons: * paid (but... if you're a student it's free, if you're a professional... you can buy it, it's reasonably priced) * catching up in some aspects (code coverage coming in version 2019.1, profiling on Linux - ??). [bear in mind that to my knowledge VS Community has no code coverage support, so that's an added benefit for Rider] VS: pros: * free in Community version * it's de facto standard IDE (this seems to be slowly changing though) in .NET so lots of tutorials * gets the job done cons: * Windows only! (MacOS version is a rebranding of Xamarin Studio and I've met with mixed opinions about it) * sluggish at times * catching up in refactoring department but not yet there - you'll need to supplement it with stuff like ReSharper / addons like CodeMaid, Roslynator and whatnot In general if you're at the beginning of the road don't waste too much time thinking about IDE :) You'll be fine with either and you can always switch. As for VSCode it's kinda nice but I found its .NET support a bit unreliable. It's pretty popular nevertheless. My preference is Rider as an IDE &amp; VSCode ocassionally for quick browsing of projects and I rely a lot on terminal.
Yep. Given a choice and how long I've used R#, I consider application based on how much they deviate from R#. :D I use \`Control-E, Control-F\` way too often. :) Plus I like chained shortcuts (I'm an Emacs user too).
Rider by Jetbrains.
Because the library has nothing to do with Unity itself, and it's also being used in a .Net Core application. I definitely don't want to put the source into the Unity project.
What are the benefits to rider over vs studio?
As for .NET the main players are Rider, Visual Studio &amp; VSCode - how I see it: The pros of Rider are: * multiplatform * great refactoring support * lots of useful features (like local history, contexts, built in code cleanup, etc) * similar to all the other JetBrains IDEs so if you want to switch language you don't have to learn new IDE * pretty neat developer experience in my opinion cons: * paid (but... if you're a student it's free, if you're a professional... you can buy it, it's reasonably priced) * catching up in some aspects (code coverage coming in version 2019.1, profiling on Linux - ??). [bear in mind that to my knowledge VS Community has no code coverage support, so that's an added benefit for Rider] VS: pros: * free in Community version * it's de facto standard IDE (this seems to be slowly changing though) in .NET so lots of tutorials * gets the job done cons: * Windows only! (MacOS version is a rebranding of Xamarin Studio and I've met with mixed opinions about it) * sluggish at times * catching up in refactoring department but not yet there - you'll need to supplement it with stuff like ReSharper / addons like CodeMaid, Roslynator and whatnot VSCode - it's not an IDE. it's a very extensible text editor. Not listing it here similar to VS &amp; Rider because I found using its C# support to be rather a hassle but maybe they'll improve it. OmniSharp plugin crashes a lot &amp; adds some bloat directories to projects. Maybe it's just mine configuration but C# extension is not getting the best reviews on extension marketplace either. Well, it's lightweight which is very cool and it's a fine editor for other languages as well. In general if you're at the beginning of the road don't waste too much time thinking about IDE :) You'll be fine with either and you can always switch. My preference is Rider as an IDE &amp; VSCode ocassionally for quick browsing of projects and I rely a lot on terminal. It's good to get at least acquainted with Visual Studio as that's what you get to work when hired in a lot of companies.
There are so many subtle, hidden questions and subtle misunderstandings in your post (as well as the one by the person who advocates a single HttpClient across the application). Grab a copy of \_Dependency Injection in .NET\_ and start reading. &amp;#x200B; Regarding HttpClient, the issue with external resources is [socket/port exhaustion](https://stackoverflow.com/questions/11569441/how-do-i-prevent-socket-port-exhaustion), as well as developers not "RTFM". The documentation on Microsoft Docs says for [System.Net.Http.HttpClient](https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=netframework-4.7.2#remarks) says: &amp;#x200B; &gt; [HttpClient](https://docs.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=netframework-4.7.2) is intended to be instantiated once and re-used throughout the life of an application. Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads. This will result in SocketException errors. &amp;#x200B; I have submitted a pull request to GitHub Microsoft dotnet-api-docs to make this crystal clear: [https://github.com/dotnet/dotnet-api-docs/pull/2315](https://github.com/dotnet/dotnet-api-docs/pull/2315)
Visual Studio Community 2019 on Windows 10 with Docker on Hyper-V. Amazing experience.
Jetbrains Rider most of the time, VS for the times Rider doesn't play nice (everyone else at my work uses VS).
Code and studio at the same time. I write the Js front-end in code and backend in studio.
I use a mixture of both since they excel in different areas: &amp;#x200B; **VSCode** * JS/TS development (especially for Angular/React/Vue projects) * Clean UI (not as cluttered) * Better git integration (especially with gitlens extension) * Less magic (doesn't hide non project files, builds and tasks run simple terminal commands that you configure) * Debugging starts quickly and seems to have less overhead * Easier to use with CLI tooling (e.g. create-react-app, ng, npm, node, tsc, eslint, dotnet, etc...) * Installs quickly and configuration is portable between machines or shareable with projects &amp;#x200B; **Visual Studio** * Better C# refactoring options * Debugger is much stronger (includes perf tools and can use complex breakpoints and inspectors) * Gets preview support first (for .net core and C# features) * More magic (gives you UI options to set MSBuild properties on items and UI editors for project settings and tools...so many tools). * Broad project support that VSCode lacks ( Unity, Xamarin, WPF, WinForms, WebForms, and many many more) &amp;#x200B; If I'm just sitting down to write some features for an [ASP.NET](https://ASP.NET) Core project, I'll usually reach for VSCode. I tend to use VS more when I'm working on legacy projects, debugging something complex, or when I want to work on more than a couple projects at a time...or when there are interesting things available in preview (like Razor/Blazor components right now).
vs studio lol &amp;#x200B; In all seriousness, JetBrains Rider is good if you don't want to use Visual Studio. It's paid, though, so I recommend Visual Studio Community otherwise, or just the paid version of VS if you want that.
A lot lighter. Noticably faster. Nice npm integration/module/intellesense. Built in resharper. Really, it's a lot of little things.
It's not the internals that handle what that really means, it's the connection string. The internals simply interpret the connection string configuration \_and\_ the signal. Overall, excellent point, though.
You can't reopen a closed form. As long as you don't hold any references to the closed forms, the garbage collector will free up the memory used by them.
Are we talking win forms or web forms? Have you considered WPF and MVVM?
Spacemacs
Visual Studio &amp; Visual Studio for Mac.
No literals pls, especially XML. A dictionary literal that looks like JSON (ala Python) would alright I suppose. As for with, I'm not familiar with VB so I'd have to see an example. I'm imagining it like F#'s `with` though, not sure how accurate that is.
Well, performance which is the most important is super bad there.
I‚Äôve never had any performance issues that weren‚Äôt at least partially caused by plugins (ReSharper, OzCode, etc.)
i use vscode but it cant compare to the power of visual studio. sometimes vscode cant detect an error in views especially when it has to do with the model namespace.
Even clicking to open file is always slow. Entire VS seems like it calculates some things on every action, which they dont need. VS code opens my 200 projects solution instantly because its just files. Nothing more.
I've started to use Jetbrains Rider and completely fallen in love with it. Give the free trial a whirl.
Visual Studio 2017 for regular .NET Core development, VS Code for C# scripts (because VS does not support those).
Seconded, I find it much more usable and clear to use than VS.
That's really weird. Haven't once ran into those kinds of problems with VS.
VS Mac
If you're working as an individual. If OP is at a company, they may need to purchase VS Pro (and would benefit quite a lot from the MSDN access).
no, dotnetcore and mono are different
VS Community is more than enough.
At home: vs code, at work: studio 2017/2019 and occasionally vs code when its small
&gt; Rider by Jetbrains i need to get that on my linux box
what platform are we using? winforms,wpf,uwp ?
Love it, I use it 100% of the time now.
I would argue that C# isn't transpiled to MSIL, because the transformation from C# source into MSIL involves strong compiler analysis and optimisation stages, and generates MSIL bytecode directly. Language transpilers generally don't do this - they perform source-to-source transformations, with minimal analysis/transformation.
Yep! our team is slowly switching over to rider, i love it. I use material theme addon/atom dark/with VS dark syntax highlighting. Its like a better dark themed VS to me
Create the forms as you need it. The first option will be a constant amount of memory usage regardless of the amount of memory required... the second option will only use the memory required. Besides, it'll start getting weird if you try to cordinate everything to work with a single instance of each form and you suddenly decide that this form or that form should be allowed to create multiple instances.
Create a stored procedure on the server that returns the column names in an SP call.
The best part is I don't need a machine with 32GB of RAM just to open projects!
I think your argument is valid, and I think there's strong arguments either way and the difference isn't well codified. I usually think of transpilation as something that can be bidirectional, versus something that compiles down into binary form and loses all higher level structure (such as var names.) The domain language to C++ transpiler I work on does include validation logic, though I'm trying to change that (for separation of concerns) so I suppose it fits more with my interpretation in legacy form but more with your definition in best practices. For purposes here I wanted to include it to highlight the MSIL stage for the OP, to illustrate how common these sorts of transformations are, and how broadly these skills apply. :) I never had to take a compilers course or similar, so I'm playing catch-up professionally with lexing and parsing. This is good experience to have!
All JetBrains products are free for non-commericial use if you have a .edu email
Free for non-commercial use only.
The license is for non-commercial use only.
You don't need 32 GB of ram to open and debug huge Solutions.
PhpStorm
You have to execute a query... that's the only way to communicate with an sql server... &amp;#x200B; Exec sp_columns @table_name='&lt;NameofTable&gt;', @table_owner='&lt;schema&gt;'
For vscode? Idk I seem to have better performance in vscode than I do in vs, but it might be because of all the plug-ins I have installed. What I love about VS, especially for C#, is the features and tools it gives me. I use VS for c# and pycharm for python, mostly everything else is vscode, which I also love for opening random files and whatnot.
Don't have a lot of experience with intranoot connections but one thing I noticed, which may not be of use, but shouldn't while(this.serverCancellationToken.IsCancellationRequested) be while(!this.serverCancellationToken.IsCancellationRequested) Since you (usually) want to a loop to run while a token isn't cancelled, aka is alive? Sorry if it doesn't help, good luck with your code!
Really?
Good catch, it's retyping mistake! I've fixed it now.
They say it compiles very fast
Along with turning off other optimizations, the C# compiler and the JIT intentionally extend local variable lifetime to improve the debugger inspect/watch experience. This can sometimes lead to unexpected GC behavior differences between debug and release builds.
How does it compare to VS or VS Code?
Winforms
&gt;I'm using winforms, i considered wpf but I have not moved there yet.
Ohh then it's my fault that the garbage collector does not free the memory cause i'm keep holding references to the form, that make sense, i had not noticed, sorry. Thanks for the info!
I'll just quickly re-register my domain name... And done üòÜ
Ah memories. Updating autoexec.bat path variables manually to point to java so I could compile my program (written in notepad) through command line. 100 lines of errors listed on compiling, hitting the max compilation errors. Making stick figures in... can't even remember the name - pre-swift. 1998 was a jungle.
Maybe the problem is on your side. Vs community is as fast as rider. In fact for me, rider takes at least ten seconds to start. Too much. I still prefer rider though.
I can see the criticism in general, but I‚Äôm not sure it applies in this case. The project is presented without examples and without an explanation of its background. Why was it created? What can you do with it? The answers provided by OP make that a little clearer. There‚Äôs a branch (i.e., not master) that includes examples.
Wait, is this a thing? I can create my own .edu email address given I buy a domain?
What do you consider a large solution? I work on an MMO partially in C**#** partially in C**++**. Counting the .cs and .cpp lines (skipping the headers), I get Matching lines: 1751417 Matching files: 5890 Total files searched: 6091 VS 2019 loads in 5 seconds, and works very quickly. It uses around 2 gigs of ram. I regularly open the same solution 4 or 5 times to debug servery things. Now, I know there are bigger projects than this one, but not many.
Windows: VS Community Linux at home: VSC Linux on the go: Dear god... Emacs
btw for whatever reason reddit doesnt do the real markdown for code with three tildes ``` so you have to indent the all the lines by four spacees
For completeness sake, there is also `Console.Write`which doesn't add a new line after the output. Console.Write(p.Age); Console.Write(p.Height); Console.Write(p.Name); Console.Write("\n\r"); //output: 20185patrik It's bad in this case because it removes spaces unless you add them yourself, whereas the string interpolation makes nice spacing easy, but it may be good to know about.
Its not really LOC or number of files that hurts VS - its solutions with hundreds of projects. I work with one that has over 500 for example. Turn Resharper on and youre in a world of shit.
No. EDUs are controlled, you can't buy one at will. Hence why I'm a COM.
Looks better than Java (to me), has touples, easy to make a game with it in Unity, VS fully supports it and.. well.. thats all I can think of right now.
I agree, I have worked with Java too some, and enjoy C# more.
I found the exe in the Debug folder and ran it as an administrator, and it still froze immediately. Is this what you meant?
A good reason to keep projects low then. Obv thats not always possible. Luckily we only have 100ish projects. Theyve apparently worked on that part of the editor in 2019. I noticed its doing a lot of things in the background now that I think were foreground before.
Is there an easy way to do this? From what I found on the subject, it seems complicated.
With the technologies of the time (2003-2005) when I chose my path I wouldn't be a developer if not for C# and .NET. I might be stupid but only .NET came naturally, everything else seemed either confusing (MFC with C++) or annoying (Java other C++). Lisp seemed cool but no jobs for it. With C# and .NET everything clicked. The syntax was clear, naming was meaningful and there was no obvious bullshit (I'm looking at you Java's Integer vs int absurdity). I now refuse to take a job where the main language is anything inferior to C# (of the fairly popular languages I consider only F# and Rust superior). It is not professional behavior but I know I would be super annoyed working with something that does not make sense like I am annoyed with the 10-20% JS/TS work I have to do on web projects.
Those are things we look for in Junior developers.
This might actually be something that will work. Great find! Thank you!
But it runs on Java and requires the JVM to always be running. That probably bothers me more than it should.
Broaden your error trap to catch all exceptions not just HTTP exceptions. Try adding a timeout value if available. Run this method in a background or async thread to avoid blocking the main thread and see what happens. Worst case, spin up WireShark and verify your packets are being sent/received in the proper format. Hope this helps.
ReSharper will decompile dll's to let you browse to source implementations. You can "go to implementation" for most anything and it just works.
It's like you can't tell though. I was shocked to find out it is developed with Swing.
&gt; That probably bothers me more than it should Spot on. You are still miles away from the bloat of visual studio.
I‚Äôve been using VS2017 on my laptop with 8GB RAM and never ran into problems... (i don‚Äôt have resharper though maybe that‚Äôs why)
dotnet development compared to java/android was a huge breath of fresh air.
Where are you from?
A) this isn‚Äôt a ‚Äúleak‚Äù. It‚Äôs intentional behavior to help debugging B) tracking a single connection in the garbage collector like this really isn‚Äôt worth the time
Great points, and there is definitely scope for transpilers to do analysis, optimisations, transformations, and etc on the source level. Of course by the same token, you're also saying Java is a transpiled language. I really enjoy writing compilers, and I'm lucky to be able to do so in my job!
It's not just you. Some types of file are very slow to open in VS for me too.
hi, well I had to rewrite my class from a static class to a normal one, so you have to instantiate it now, because cant have a static class implementing an abstract one. thanks for the tip with the stringbuilder, I do so, with the colors, well you have to define them in the beginning of the rtf, so I need to know all colors beforehand, also its pretty much hardcoded what types of tokens there are, so I made a public color list that you can edit, as a compromise. keyword list is now public too. dunno, hope that helps, have a nice day [commit](https://github.com/zeroKilo/CSharpSyntaxHighlighter/commit/c04159a11b6a9d3284fe70d917f847f400c1ba9a)
I've been doing web development with C# &amp; .NET for almost 2 years now. I switched from NodeJs when I moved to a new company. I was really nervous about coming to a .NET shop. It wasn't cool and it wasn't sexy and I felt like I was selling out to Microsoft. It was boring. But, after ramping up for a few months, I was a convert. C# is a really nice language to work with. It's fast, it's battle-tested and definitely not boring. Secondly, the .NET Framework is great. There is a huge learning curve, and the surface area is immense, but once you get over the hump you can become an extremely productive developer. .NET has solutions for just about any type of system you want to create. These solutions abstract away a lot of the nitty gritty which allows you to quickly build a production-grade system. After two years, I'm still loving C# &amp; .NET. I've (mostly) gotten over my feeling of selling out and can't wait for all the new .NET products that are in the pipeline.
C# is so much better than Java it is not even comparable. C# has... - delegates - var keyword - type assumption on generic method calls - alias for types - linq expressions for runtime compilation - local functions - variable declarations in out parameters and if statements Those are all features that C# has that I don't believe Java has. Surely there are more than that (just came up with that list from experience in 5 minutes). And these are only features of the language itself, not even the libraries that exist or how you can call F# or VB code or how you can make C++/CLI apps... Delegates alone are an absolute MUST for me. Delegates are IMO the most useful types in programming. They allow you to write truly generic and reusable code. Just look at my side project here: https://github.com/ZacharyPatten/Towel With delegates (and other techniques), I was able to write generic mathematics, generic path finding, generic data sorting structures, and more. Most of that cannot be done in Java (if you were able to accomplish it in Java it would most likely be incredibly slow since the language doesn't have delegates yet). Java sucks... :P
I've only recently ended up working with our transpiler, but I've been enjoying it immensely. It hurts my head and I'm appreciative of that. :D Unfortunately it's in F# which I have no prior experience, so it's had a learning curve while learning the lexer and parser package simultaneously!
Kind of curious about this. Can you maybe check what happens if you replace the foreach by it‚Äòs sugar freeish version: https://wouterdekort.com/2013/10/28/desugaring-foreach/
This is some great insight. I do feel productive in C# and everything I want to build from a web perspective .NET can build it, but I had that slight feeling of selling out to MS (though I‚Äôm not an MS hater by an means). Thanks for the input!
&gt; Many libraries are designed to only work with properties, not fields. So things won't work as expected. For example, you may find issues when using bindings with public fields.
VS Code has almost all the features I need for developent of a .net core application. Debugging is a bit hit or miss sometimes. At work if I need a little extra in my project I then will use Monodevelop. Ideally I would like a Visual Studio Pro installed but I currently don't do enough .net development for my employer to justify it.
It's every bit as good as VS except it'll also run on Linux. I will say that I miss VSVim because IdeaVim is a pale shadow in comparison.
I'll take running Java and the JVM over Electron and Google Chrome
It‚Äòs however interesting that using a for loop reality doesn‚Äòt collide with expectation.
You can just call them compilers as well. Transpiler is superfluous term. A compiler translates a programming language into another be it x86 machine code or batch script.
This is one of those yes* answers. There are many conditions in which mono is more than a runtime, as well as many conditions where developing on mono will result in an app that does not run on Windows. That out of the way, it's possible and common to say, use Visual Studio Mac to target a .NET Framework console app, which is really using mono and is 1:1 compatible both at project and binary level with native Windows .NET Framework
&gt; criticise and chastise Ooh. Can I come by and chastise you for your code?! I really hope that was just a lazy word choice.... &gt; verb: &gt; rebuke or reprimand severely. "he chastised his colleagues for their laziness" &gt; synonyms: scold, upbraid, berate, reprimand, reprove, rebuke, admonish, chide, censure, castigate, lambaste, lecture, criticize, pull up, take to task, haul over the coals, bring to book;
Anecdotally, I don‚Äôt think that renaming a class and being prompted to also rename a file has ever been a feature of Visual Studio. If it has been, I‚Äôve never seen it. I have seen the inverse, where renaming the file prompts you to rename the class, but for me it‚Äôs always been inconsistent to show up in the past.
If I want to use SSDT, VS 2017. If I don't, VS 2019 or Rider, depending ont he day.
If you were able to accomplish that, how would you ever refer to the object. If "London" is only known at run-time, it wouldn't be possible to write code that refers to the variable \`London\`. There's probably a way to accomplish what you want. But the way you're asking now doesn't really make sense.
In my experience it only prompts for a rename if the File and class had the same name prior to renaming the file.
Oh.. yeah.. haha sorry I didn't even think about that I've been pulling my hair out at this project for a while.
That's typically because of the 167 extensions some developers like to install.
Sublime Text or Vim? I run most code from terminal and don't like it when my IDE takes six years to boot up. By the time Visual Studio was done running, I had a CS degree and linux subsystem for windows was out (try this)
Vim all the way. It just gets things done.
We spotted that there was an issue because Connection objects are quite large. Their internal buffers can be 50-200mb depending on how fast the program is able to parse information out of them. We made some major space/performance trade-offs in it as it's responsible for grabbing and processing streamed events from a profiling library. I'd say it's a leak because the garbage collector never actually collects it in debug. We moved our emptying of the buffers to the dispose anyway, but it was an interesting thing to come across, I just assumed C# would reset the inner-loop instance value even if it promotes it to help with debugging.
There's so much overlap that most of what you learn in either can be used in the other.
Interesting, I had no idea it'd do it without defaulting the value on exit. Good to know there's a legit reason for it.
Because of the SNI requirement you mean? If so, then that's on purpose.
You can accomplish what you want to do using a [Dictionary](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.dictionary-2?view=netframework-4.7.2): Dictionary&lt;string, City&gt; cities = new Dictionary&lt;string, City&gt;(); // assuming that "City" is // your class for cities // Create a city called London cities["London"] = new City(name: "London", population: 123456, country: "UK"); // Get the city called London var population = cities["London"].population // I don't recommend getting a value from a // dictionary like this, but this is for // simplicity's sake
You mean your $0.05, Nickleback LOVER.
I believe we are, which is one of the pieces I have zero knowledge of, unfortunately. I'll review the documents of the contractor who set this up and see if I can find anything. TY
I use Rider on Debian, and VS2019 on Win10. I use Rider because I could get a consistent experience when switching OS', but actually I'm contemplating trying C# plugins for Code. I don't use a lot of ReSharper features anymore as so many are baked into VS or VS Code.
Resharper supports this as part of its class rename refactoring. But that's an external tool.
But why can I see the source files when an exception is throw? Isn't visual studio doing just that then?
Make sure you have 'Full Solution Analysis' disabled &amp;#x200B; Options --&gt; Text Editor -&gt; C# --&gt; Advanced --&gt; Analysis
JetBrains‚Äô Rider. Their platform is the best, and besides, student license. May as well take advantage.
Or any dozen of school related email organization names. My school email isn‚Äôt a .edu, but I still get the student license.
Not using it
Better than VS (in my opinion), and obviously blows VSCode out of the water, as VSCode is more text editor than fully fledged IDE
Never tried resharper, but on my 16GB/R5 2600 machine, VS usually hangs every two characters or line returns, which is just awful when you want to work.
I started in C# with the .Net Compact Framework v1 when it was in beta (around 2001). At the time I was doing Delphi but had moved to a team that was doing was demo/show work and they wanted to get some stuff on some of the handheld devices of the time. Since then I've commercially worked with every version of .Net until .Net Core 3 years ago when, for personal reasons, I started a career break. I'm considering getting back into the field again but am having massive problems motivating myself to get up to speed with the latest that .Net/C# has to offer. Fundamentally I think I've hit C# fatigue; I've been struggling for the last year to find enthusiasm to work with it again. Whereas I'm finding node infinitely more fun to work with.
I'm using Firefox and AT&amp;T on Android Pie. [https://i.imgur.com/ylnSurj.png](https://i.imgur.com/ylnSurj.png)
Not sure why this post was downvoted; there are licensing restrictions on the free version.
VS 2017 Pro at work and community at home (Basically same from feature standpoint). Thinking about switching to VS code.
Your problem is that the debugger isn't listening except when the runtime invokes it (during an exception event, usually, and only then because the CLR sees that you have debugging symbols available [those .pdb files]). If you want full interactive debugging (set an arbitratry breakpoint and step into, etc), you'll need to attach your C# project to the host process (Unity). That workflow would be: Load your library project in VS, Run your Unity app, In the VS menu: Debug -&gt; Attach to process..., find the host process for your app/game and select it. As long as your C# assembly is built with debugging symbols emitted (which is sounds like you're already doing), then you should be able to hit any breakpoint you wish, observer locals, and even alter execution via the immediate window, etc. This isn't unique to unity, its how you'd debug any app that uses your assembly but that you aren't executing the host in a debug context. The most common example is IIS, where devs attach to W3Wp.exe to debug their web apps.
I'm surprised... And you're not using other VS extensions that might cause this? I never experience this on my HP ZBook i5-8gb...
No kidding? TIL.
Start with Core. Core 3.0 will release [this fall-ish](https://www.youtube.com/watch?v=WmDXgO0f-MQ&amp;t=48m17s) and will include the Windows UI bits that are currently exclusive to Framework. And newer, better things (including some C# language features) are/will be exclusive to Core. It's true that they're super similar and the skills will transfer... But starting new projects in Framework is a bad idea - moving a project from one to the other down the road can be tedious, so why bother ?
Ah, good point. I have ReSharper on every VS install.
When I was first learning how to code I was introduced to a few different languages (Javascript, C++, Python), and it wasn't until I tried C# (specifically with XNA) that programming actually started to make sense. I later was introduced to Java and Objective-C, but neither came anywhere close to being as intuitive and clean as C#. The more I use C# and understand it the more I like using it. At every turn it just seems like C# hits the nail right on the head in terms of providing features that are powerful, but not confusing. Of course C# isn't perfect, it has its warts, but there are very few. It is easily the best C-style language to date.
Learn the Rider IDE and you‚Äôll know the entire JetBrains platform. Rider for ASP, WebStorm for front end. Very similar IDE‚Äôs but specialized. Great ecosystem.
While it does bother me too, it‚Äôs nothing compared to electron.
C# scripts?
I thought I saw Kendra Havin's video on new productivity features in VS 2019 and this was one of them
Interestingly, one can sync folder and namespace https://devblogs.microsoft.com/dotnet/visual-studio-2019-net-productivity-2/
Yes, the CLR (common language runtime for .NET) knows the full source map of your DLL via the debugging symbols that you emit on build. See my other answer for more detail, but TL:DR you need the actual VS Debugger running and observing to get full interactive debugging all the time. Resharper wont help, its not a source navigation thing, its having the debugger running in process with your assembly.
I'm curious: why do you prefer Atom over VS Code?
I'll second that. I wouldn't touch framework at this point if I didn't have to. If you're going to get saddled with legacy application support, you could very well run into .net framework, but going forward, framework is dead. There are a lot of similarities between framework and core, but there are a good number of things that are quite different.
Yep. Mine is @schoolname.com, and works. No need for approval, so I guess that domain was already approved manually?
I like .net, but I haven't really chosen to "specialize" in it. I'm pretty flexible about languages. I will learn whatever I need to. Still though, I think C# is a good language, and VS is a good IDE.
I 'think' you can do that with something like ExpandoObject: https://docs.microsoft.com/en-us/dotnet/api/system.dynamic.expandoobject?view=netframework-4.7.2
Oh, I think there was a misunderstanding! I'm already attaching visual studio to Unity - that's how visual studio is catching the exceptions in the first place. I can debug the Unity project and the .dll project fine. The problem I have is that I can't navigate to the .dll source files without an exception being thrown in them. When I right click on a type that is declared in the .dll and go to the implementation, it goes to the meta information ([one](https://i.imgur.com/zxrdyiK.png), [two](https://i.imgur.com/OP5Y9ow.png)). However, if an exception or breakpoint is caught in, say AddObject(), it will actually show the source file - not just the meta information. While I have that file open, I can add breakpoints and they will be caught. However, once I close the file that is opened by visual studio, I cannot get back to it - only the meta file! So I know that there is someway visual studio can read the source files in the .dll, and you can add breakpoints inside them despite being in Unity, but I can't open the files themselves without an exception being throw. Hopefully this makes sense.
I wrote my first lines of C# shortly after being hired by Microsoft, the *why* here should be self-evident ;) I was a Linux/C++ guy beforehand, but I quickly grew to love the language and the platform, simply due to how productive it made me. I loved (and still do) C++ because it was "pure" in a way that there was no magic, every built-int type from `std` you could in theory implement yourself, even if it made the language standard convoluted and incomprehensible to anyone not sitting on the panel. C#/.NET made me realize that there is a lot to be gained in terms of simplicity (and in turn usability and productivity) by introducing just a tiny bit of magic in the important places without having to go full Javascript.
After having the definition of a compiler beaten into my head in a college class, one of my big pet peeves is the word "transpiler."
Java and C# are pretty much the premier OOP languages, and C# is way better than Java. I'm stuck doing Java right now and it just feels like a language that refuses to evolve. On the other hand, C# often feels like it's on the bleeding edge (for OOP).
Calling F# or Rust superior to C# is an odd comparison, they're each for wildly different applications.
Ahh, makes sense, I thought you were invoking the debugger from that weird "Debgub with Visual Studio" window that pops up for CLR hosted apps. It sounds like your actual problem then is that symbols aren't being loaded correctly. You can alter your project to emit them to a specific location and try explicitly loading them from that spot. I am led to believe that Unity has a VS extension that makes this easier (A set of debugging tooling specifically for Unity, its seems). Do you have the VS tools for unity installed?
The JIT is responsible for generating the reachability metadata used by the GC to determine if locals can be collected early, but the JIT only has the IL to go on which doesn't have any concept of sub-method level scope. At least I suspect that's the main reason this happens, I'm not familiar enough with the internals to say for sure. For what it's worth, this is an unspecified implementation detail anyway and [the spec even explicitly mentions this scenario](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/basic-concepts#automatic-memory-management): &gt;For instance, if a local variable that is in scope is the only existing reference to an object, but that local variable is never referred to in any possible continuation of execution from the current execution point in the procedure, the garbage collector may (but is not required to) treat the object as no longer in use. Really, the GC is theoretically allowed to do whatever it wants as long as it doesn't collect anything *too* early, though in practice it tends to be at least somewhat predictable of course.
Microsoft is my ultimate goal, I really hope to get a summer 2020 internship with them. Any tips with Microsoft? I haven't started C# yet because I have some vigorous classes at the moment and have trouble focusing on more than one subject.
I dunno. Debugging seems lacking. For example, I don't think there's a way to recover from an unhandled exception. In Visual Studio you can just move the next instruction pointer, but in Rider that does not work for this case.
Who knows how they do it.
There's only a 32 bit client for Visual Studio, so it can't use more than 4GB RAM.
.NET Framework is now in kind of a maintenance mode. So don't use it for any new projects.
A lot more mundane than most of these, I've been working on a slide show. I wrote it for several reasons. Xnview, the built in Windows one, and a few others I tried all lacked 1 or more of: stop monitor from sleeping, can delete displayed image, speed. Where as Xnview can scroll through my picture collection at about 1-3 pictures per second, mine can do 400 pictures in 9 seconds. Most probably don't care about slide show speed, but it slow picture displaying feels clumsy and annoying to me. It doesn't have a lot of complex features or visuals, but it's just exactly what I want out of a slide show. It's at [https://github.com/JamesG269/JRGSlideShowWPF](https://github.com/JamesG269/JRGSlideShowWPF) \- It's my first usable C# program, and only about 1,000 lines of code, would love comments or suggestions on to improve it or my coding. I think it's pretty optimal, I've tried many different methods of doing the various things the program does, timing them, and choosing the fastest and what not, but my day job is not programming, it's just a hobby for me.
Couldn‚Äôt tell ya. Honestly, I‚Äôve never needed/used much in the way of debugging.
I work on a MIS solution with hundreds and hundreds of projects ( a lot of legacy code that's being cleaned up) and resharper kills VS 2019 to the point I can't use it. ( 32gb, ram i7 1tb M2 ssd so a decent machine)
VS Code is my favorite editor ever. I use the built in terminal to run all of my cmlets and it‚Äôs lightweight. The drawback is of course the lack of inherent implementation of Nuget packages. In which case I would go with VS 2019
On that point my machine at work was recently upgraded to 32gb ram and its unreal. I can have 5 different solutions open, all with resharper, plus Firefox eating 2 gigs, and an Android emulator eating another 2 gigs and it all runs like a dream.
Yes but since ‚Äödata is stored‚Äò during runtime (at least most data). You‚Äòd need to create the type at runtime as you are referring to the data. That can be done via Reflection. The problem is just that referencing any member of the type, an instance of the type or the type itself only using Reflection. I don‚Äòt see real use cases here but if you know one one could do it. Actually there is one use case as this is how Newtonsoft JsonSerializer deserializes into `dynamic`.
True but I like the general direction of more static and strong typing. In addition they feel like languages with very few bad design decisions although I don't have real world experience with them so I am not in a position to judge.
What would F# be for? I use it for the same things as C# when I can. I cannot when colleagues have to work on the code: most of them do not understand F# unfortunately.
I wonder how anyone can feel like .NET has a huge learning curve after dealing with the wild west of the JavaScript ecosystem.
Have had to deal with some legacy javascript ui framework where the author hid and reused the same dialogs and forms over and over. Not creating new instances eventually became a big source of bugs. Often the forms weren't properly reset after use, and dragged with it some state or style. Or event handlers returned and fired events while the dialog was still hidden, or the model had changed. And if you sometime later have to show two instances of the same form, you would need to rewrite anyway, and those hours you spent on properly resetting and fixing bugs would be wasted. A lot easier to maintain if you can just destroy the instance and rerun the constructor properly.
For me it's mostly been because there's a lot of .Net jobs where I live. Never really loved C#, it's good but never really felt excited to be using it. .Net Core is really good though and looks like Microsoft is on the whole going in the right direction with it. It seems the Microsoft ecosystem is very healthy right now which makes it interesting enough to stick with.
You will only need to know the specifics of .NET Framework if you are working with old or windows-specific code. Focus on .NET Core and it'll be easy to pick up .NET Framework specifics if you ever need to. Core is clearly and officially where the future is.
So you are developing software using a language that is not officially supported by your company and that future devs will have a hard time to maintain, only because it's your favorite one?
It is supported and I try to use it for specific modules I know will be looked at by colleagues who known F#. Not the point though: why would it be for a different purpose than C#?
The better way to do this would be to use a dictionary of objects: &amp;#x200B; DataStore\["London"\] = LondonCityVariable;
I am from Denmark, all my major projects are commercial so i do not have any code. I have worked on implementing IndentityServer3 accompanied by some middleware for handling user data and i have worked with different domains in the shipping space, warehousing, wind industry, purchase orders and freight booking ( I am not looking for a job in the industry i mainly want to write c# if possible ). I can share more details of my work in PM, this is the main tech i have worked with: C#, T-SQL, WebAPI, Owin, Owin Middelware, IdentityServer3, EF6, Dapper, Mediator, Caching, OpenId Connect, OAuth, Asp.net Mvc, AngularJS
Where there's clear advantages to it's strengths which would be immutability and powerful type system. This might help in highly concurrent systems or in cases where program correctness is particularly important.
F# is for when you want a more formally functional language than C#. As for actual applications, I hear it's very good for service-based architectures - I am not good enough at functional programming to know why or how. I'm also not sure how it stacks up against other functional programming languages, just that it appears to be at least good enough to satisfy .NET devs. I honestly think the main thing holding back F# adoption is the fact that C# has included enough of the functional paradigm to make F# superfluous for all but the most rigid and pure functional developers.
Forget that the full framework exists. Think of .NET Core as the new version and of .NET Framework as the old version. .NET Framework will power apps in production for decades but it is one of the things that you should choose to learn on demand if you ever get to work on a project that requires it. Now you might want to learn some Win Forms as it allows you to do GUI programming for Windows with .NET in a really easy way that uses OOP concepts in practice in quite straight-forward way (as opposed to WPF which is more powerful but much more complex and is not a good example of OOP) but Win Forms will be available with .NET Core 3.0 in half a year (and you can even use the preview today). Assuming you spend some time learning the language, the data structures and a couple of algorithms as you should you can fill your time with console applications while .NET Core 3 ships
VS 2017
No, stock, base-installed VS, right from the VS updater.
Well, put some examples. Hello world, FizzBuzz or whatever.
Hi guys, i am software engineer focused primarily on the .net platforms, but also write golang and node.js. I have worked for two startups and a company which i resign from to form my own starup. I love building enterprise softwares.
Ctrl+R R Also renames variables and even comments if you want to. Makes my life infinitely easier.
Come join us at r/compilers!
Because Unity doesn't support python : /
Yeah, I totally get where you're coming from, someone coming from .NET to NodeJS will face the same type of learning curve. I think the major differences between the Node ecosystem and the .NET ecosystem is that you don't have to use the JS ecosystem if you don't want. I can roll my own (horrible) web server in like 10 lines of code and no framework. As a beginner, I think it *feels* more productive, and you can gradually ramp up with more complex frameworks. After learning in that environment, I was a little overwhelmed coming over to .NET where the stack is pretty opinionated. Especially when you want to make a simple website and you open up VS and have to choose from WebForms/Mvc/Razor Pages/Web Api/Blazor, etc... If you don't already know about the pros/cons of these frameworks and how they interact it can be pretty frustrating. Once you're over the initial hump though, it becomes so much better.
F# is procedural where C# is object oriented. The pendulum seems to be swinging toward devs favoring procedural programming, lately. That might just be blog hype, though. F# is heavily influenced by Python syntax, where C# is heavily influenced by C++ and Java. Honestly, I see F# mostly as a better alternative to Powershell scripts. I cannot think of any reason not to use a c# script instead, although F# definitely has its disciples.
Same boat as you except I spent way too much time reading about these kinds of things than actually working with them. So basically framework is only getting one last update I think? Then Microsoft will be shifting their focus to .net core. So basically .net core is the future, .net framework will definitely still see a lot of continued use, but this likely to be in older software that was already using it. The .net core backend is also a lot faster than framework. That's about all I know off the top of my head. Also the cross platform part is a good thing. Especially if you get into webdev. Linux servers are way cheaper and more common. Kestrel is also veryyyy good. While asp.net core is not the fastest backend it's hands down the fastest out of all the popular backends, and about on with par golang which is a lot less popular (though golang does use a lot less resources and usually demands higher pay, it has a lot fewer jobs afaik, I plan on learning both either way). Short answer though, they're so similar IN use that it won't matter. Most differences are under the hood, things that won't affect you so dw about it and just choose whatever. If you're just starting out, and do have a choice choose core for the future or .net framework if you want to maintain older core but for the most part it doesn't really matter anyways.
Isn't this just a superset that transpires into other language(s) rather than a "virtual high level language". We already have enough overcomplicated and unnecessary terminology as it is.. Either way, check it out haxe, it's a similar concept. Transpiles into other languages for native cross platform VERY well
I started at my current company, which I'm actually leaving this week, writing Delphi a few years ago. Delphi is Object Pascal in case you're like "WTF is Delphi?" (I certainly said that at least). After getting my feet wet, I was given a project of my own (it's a really small company), and started out writing it in Delphi. I don't remember exactly what the motivation was, but I ultimately approached my boss about using a more modern language to write the application. He handed me the reigns on technology to explore as I wished for a couple weeks. My requirements were that I needed to be able to do multithreading, networking, and ultimately involve a web UI into the application. It all boiled down to Java and C#. Personally, I found the C# ecosystem to be much better than Java, and things like LINQ were incredibly attractive after tinkering around with them and not seeing an immediate competitor to Java that was just as good. I finally decided on C#, my boss bought me a pro license of of VS2017 and the rest is history. Since then, I've become a huge fan of C#, and I've flat out told recruiters to hit the road when they see if I'm interested in a Java position. I see where microsoft is taking the language and I'm impressed. .Net Core is faster, it's completely open-source (hell, you can go online and look at their implementation of internal libraries like [System.IO](https://System.IO) if you want), and they seem to be doing things that Java should be doing to keep up. I now market myself as a .Net developer and I'm startnig a new job next week working exclusively in the language.
It works and lang feels great.
Is there a certain chunk of code (or an example) that you could share with us that displays why F# is (arguably) better than C#? I ask because I tried to learn ML at one point a few years ago. I found it interesting, but it never tickled my fancy. So I never bothered to try F#.
There's ``var`` in Java.
Good to know. I wasn't sure if they had added that yet
Nope. The port number doesn't matter. What matters are HTTP.sys permissions. Set by urlacl.
User the urlacl commandline
Which seems totally appropriate for a student.
Is this your question, OP? lol
... and it was closed as a duplicate. Wouldn't be SO otherwise ...
Multi-threading by any chance? If so, don‚Äôt use list (or lock it)
Surprised the duplicate wasn't marked as duplicate of a duplicate of a duplicate and now you are on a question about how to import an XLS into Google Sheets via Apps Script which is closed as being off topic.
Comparing to the other question, this does look like a duplicate. The older question even mentions the fact that the error doesn't occur every time, which hints at the race condition described by the newer question's answer.
Well it was actually a duplicate what are they supposed to do about it?
almost all of my experience has been with Mocrosoft technologies. I went to school before the WWW and learned c/c++. My first job was actually in delphi (borland) and then a bit in VB. The day c# (created by delphi guy) was anounced with .net i fell in love. The RAD (rapid application development) tools with a strong c like language. Microsoft was dev company first and has always been good in that area. But as far as areas of experrtise, I did what was interesting. &amp;#x200B; I've done everythign from gas station pumps to web sites. This include point of slae machines, hand held computers (before smart phones), phones, hand held scanners, desktop software, Weather sensing devices, car engines and more. (currently moving to games). &amp;#x200B; But doing all that, my favorite language hands down is C#. I love its features and love everythign new they do with it. i used to have to choose base don project between C# or C, sometimes c++ but now c# does desktop, web, phones, games, iot, i mean just about anything so i am very happy. the only other language i wish i used more is F#.
That's your problem
Yes. I ran into it tonight when doing production support.
VS still has more debugging features (although Rider is catching up) and obviously plays better with other MS services, like publishing straight to Azure. That said, I still prefer Rider for its better threading (VS always seems to lock up the UI thread on me, but I have no numbers to support that) and overall snappiness. On the odd occasion that I have to open VS these days (e.g. to work on an RDL file) it feels heavy and sluggish. On a more subjective note, I also prefer the look and feel of Rider.
Crap content on reddit. Op doesnt take the effort to put two straight sentences together to describe the situation.
Yea, I'm surprised that it didn't popup as a duplicate as I was typing the question.
Only vs code is electron. Visual Studio is wpf.
Some good information from others, some bad. I'll address what you said. .NET Core is cross-platform, but it's doing it a disservice to make it all about that. .NET Core is a reboot of the .NET Framework in a sense. I'd strongly recommend that you use .NET Core unless it doesn't have something you need. For instance, I'm primarily a desktop developer (front and back-end). I can start looking at migrating to Core once 3.0 is released, because WPF is brought forward. I've already done new Web service work in Core. That said, you're going to be fine if you need to choose the .NET Framework. It'll be around for a long, long time.
Could you post the code here?
Good question. If the person asking the question agrees that it is a duplicate, shouldn't SO merge them together? As it stands, sometimes the "closed as duplicate" questions actually have the better answer.
its extremely long.. but will do it in a minute
While you're right, sometimes it is better more often than not it's a stupid simple question where the original answer is as complete as it needs to be. I believe questions aren't merged because it would fuck up external links and be hard to deal with in situations where the question was wrongfully closed. But I got to say I don't know the official reasons!
For me it‚Äôs the most beautiful language in existence. Paired with visual studio and stuff like linq and nuget I don‚Äôt see myself using anything else in the future for personal projects
here is the code:(mostly) public void play(){ while(true){ switch(nextTurnId){ case -1: //do something return; case 0: //another thing if (case) break; elae return etc.... } }
posted
In a switch statement I'd rather use break than return. You should try it. And if you can provide more of your code we may help.
i usually use break only, but here im in a while loop, for cases that i need to return back to the head of the switch, return is in case you finish a turn (its a playTurn function)
Without the actual code, we can only really guess. My guess is that you're not hitting any `return` or `break` statements, so you have an infinite loop.
I'm with this guy.
Because when it came out it was that, Delphi, c++, vb6, or Java. C# easily ports from c++, so I went c#.
i know, buts its a 300 line function, wont post that here, if u want i can send a link to the file. i thought so as well, but if i try to access the second (or any other) case, it works perfectly
here's the file: https://drive.google.com/file/d/1KigTi1WnDJMICA6ag1pgTWlBsQuRq-U3/view?usp=drivesdk
To return to the head of loop I think you should use continue, and I'am just gessing here. You can paste your code here [https://pastebin.com/](https://pastebin.com/) and share the link with us so we can see clearly the code.
didnt think about that..
F# is a functional language where C# is Object Oriented. Most apps are built using an OOP language and functional languages in the context of .NET would be for machine learning and other special app functionality out of the main layout. You could imagine this being the same parallel relationship as HTML and CSS or JavaScript, C# writes the body and F# is the special sprinkles to do low level functional manipulation.
I can't understand the point of your code beacause it's yours but I think by break you mean getting out of the case statement only and not ending the loop and by return getting out of the function right ?
yeah exactly
Just so you know, you're definitely not the only one. Most of my team has moved over to vscode due to VS slowness. VS is a lot better than having omnisharp running in vs code but it's just too slow right now with our current environment.
I've been programming on my own for about 10 years, with some freelance on the side lately. I started from VB.NET but quickly moved to C# once I realized that I wanted to learn C++, or what back then I saw as the gold standard. As I grew more experienced I toyed with a whole lot of languages and paradigms, but I still find myself coming back to .NET for its ecosystem. And now that nuget is so well integrated, dependency management is a breeze. It's actually rare for me to physically reference a DLL anymore. In the end I don't use C# for something specialized, but it's my catch all for most tasks that can't be solved efficiently with a Python script or whatever. When you compare it to Java, it has always been a few steps ahead in my opinion, especially in terms of having a cleaner syntax and introducing new features more often. Java used to be more mature, but I'm not so sure anymore.
Not just links, but also allows Google to direct more traffic to the correct answers. The more questions there are that link to a correct answer, the more likely people are to find one of the duplicates with a search query.
I've got a 3rd gen i7 dual core processor (old and slow) with 8gb of ram, I can run 4+ instances of vs2017 no issues. Not sure what you are doing in the background but something isn't right with what you're doing Running vscode can hog memory, sometimes the processor goes haywire for no reason and I have to restart it. Slack, postman, etc all have noticeable effects on my machine, but not VS
Have to have the project open in Visual Studio then you can.
I can't find the problem in **case -1:** But to be sure how about you evaluate if nextTurnId is -1 in a normal if statement before the switch statement. Try it and we will see what will happen. &amp;#x200B; Also if you can share the callstack or any debugging info
tried what u said, and also im setting nextTurnId to -1 a single line before the call to the function(for test) and i dont have any stacktrace.. its unity
After more searching I found that when you return from your PlayTurn() function the program should terminate since the func is called on Start and there is no main loop.
OP, it looks like the question was answered pretty clearly in that link. I've run into this myself. Is there anything I can clarify? Are you uncertain on how to resolve it?
To elaborate on /u/Tired_asleep's answer. `List&lt;T&gt;` is a) not thread-safe and b) dynamically resized as needed. If you are adding items from multiple threads, you will eventually run into a race condition where the internal capacity is in the process of resizing, thinks it has extra capacity, but that capacity hasn't been allocated yet. They could have done it the other way (allocating the memory before incrementing the internal capacity integer), but that would just change the nature of the race condition, not the fact that it was there. Instead of an index out of range exception, multiple threads would see insufficient capacity at the same time and each allocate a new array. In truly unfortunate situations, this could really explode memory. The next obvious question is "why isn't there a thread-safe `List&lt;T&gt;`". The answer is, that's actually pretty complicated and basically impossible to do in a performant way for all the ways people would want to use a `ConcurrentList&lt;T&gt;`. For example, it's impossible to make this without a race condition: // clist is a fictional ConcurrentList&lt;T&gt; clist[5] = new Person(); clist[5].GivenName = "John"; clist[5].FamilyName = "Doe";
The problem is you're making something at design time based on knowledge you will only have at run time. You might want to consider creating something more generic. Instead of an object called "London", perhaps you have an object called City with a property called Name. City city = GetData(); if(city.Name = "London") ... Make sense for your scenario?
I realize that lots of people already gave you their answer on multithreading and whatnot, but why are you trying to re-instantiate \`TestList\` on every pass? If you check the capacity of the list on each pass, you can see the problem happens when the list's backing array is downsized.
As others have mentioned, List&lt;T&gt; is not thread safe. Use ConcurrentBag&lt;T&gt; if you need a thread safe list-like collection, or simply lock your list any time you need to access it.
Technically .NET Core is stewarded by the .NET Foundation, a non profit org that is separate from Microsoft, though Microsoft members do make up some of the board members.
The race in your example is with an item being stored in the list, not the list itself. That problem is fairly trivially solved by making members of the list immutable, or by using locks on the individual list members. Not to say that the latter option is a good idea, but it would solve the problem in your example.
There's also reader-writer locking, which may be a better option if you know at design time that the majority of operations on the shared resource (the list) will be readers.