Is it possible to use mono/csharp for shell scripting on a Mac? I have the mono framework and Visual Studio for Mac. Thanks.
I couldn't agree more... I'm currently using Visual Studio for Mac and Xamarin.Forms 
I forgot to mention I'm on a Mac, I'm currently using Visual Studio for Mac and Xamarin.Forms but I couldn't find `pash` in the mono framework.
Does Visual Studio for Mac or mono framework come with powershell? 
Thanks so much!
I'll look into it, thanks.
Thanks.
Thanks.
Thanks. 
I want to print out all of the numbers that I get if the boat is greater than 3500 
I'll take a look into it, thanks.
It looks like you've taken a particular way of doing things (OOP, particularly inheritance) and are trying to figure out how to shoehorn a system into it which may not be appropriate for such a pattern. Try looking at the problem first rather than the solution first. If you aren't interested in the actual problem solving part of this but are simply interested in finding out what does and does not work well through experimentation then this might be useful but otherwise I'd say you are going down the wrong path. 
 // In the terminal it says Unhandled Expception System.ArgugmentNullException: Value cannot be null Parameter name: String at System.Number.StringToNumber(String str, NumberStyles options, NumberBuffer&amp; number, NumberFormatInfo info, Boolean parseDecimal) at System.Number.ParseInt32(String s, NumberStyles style, NumberFormatInfo info) at System.Int32.Parse(String s) at ProgramAssign.Program.Report() in C:\thePrgram: line 82 at at ProgramAssign.Program.Main(String[] args) in C:\thePrgram: line 74 // Line 74 i called the method
PowerShell.
I use fish shell. It's incredibly awesome. 
"Code smell" isn't a hard and fast rule. Get/set properties are fine for objects that are nothing but Data Transfer Objects with no business logic in them. Properties that are isolated from eachother are one thing. Properties that are interdependent, where you must set them in a particular order or if you set one you have to update another, are an indication that you didn't properly encapsulate the change of state into the object itself. 
pash is old and busted. [PowerShell Core](https://github.com/powershell/powershell/) is the new hotness, and is officially supported by Microsoft across Windows, Linux, and Mac OS.
Dude, Powershell with vscode is fucking rad. Have you given it a serious try?
Powershell requires a fuckton less boilerplate than C# and is chock full of time-saving conveniences. It seems to me that you haven't spent enough time getting to know it.
It is. I felt like LinqPad paid for itself in the first week.
&gt; Powershell requires a fuckton less boilerplate than C# How do you figure? Using scriptcs hello world is as simple as using System; Console.WriteLine( "hello, world" ); I suppose `Write-Host "hello, world"` could be considered a fuckton less code if one's definition of fuckton is liberal enough. F# is even simpler: `printfn "hello, world"`, you don't even need `open System`. &gt; and is chock full of time-saving conveniences. Do you have any examples? I'm genuinely asking because ... &gt; It seems to me that you haven't spent enough time getting to know it. ... you are correct, I use just F# because it's easier for me. Tried PoSh a few times and I never saw the point.
It should be pretty easy for you to get an entry level job. I wish I would have went with a CS degree instead of CIS, but it was still easy to find a job as a developer. Just practice your interview questions.
I already have an entry level job and have been a junior software engineer for 3 years. I'm looking to move on to more middle developer jobs. 
Really depends on where you want to go. I have a CIS degree and that actually got me ahead of other developers, because i had a lot more 'business' knowledge than an average developer. Try consulting companies who focus on enterprises.
[Inheritance?](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/inheritance)
3 years exp will outweigh the details of your qualifications in my experience. Go for it! I would suggest looking for a strong senior team to learn under, if you can afford to be picky.
Also interfaces can inherit from other interfaces, so a ILongsword could also be of type ISword and IItem
&gt; Let's say we have an object called Item. There would be subtypes for different items in the format Item.Sword.SteelSword, Item.Sword.TemperedSword, Item.Potion, etc. Bad idea. You are going to have an infinite number of subtypes, which is not going to be tenable over the long run. It's better to just have one type with a set of properties that describe what it can do. Custom functionality can be added with delegates. var x = new Item("HealingPotion); x.WhenUsedOnSelf = (person, dice)=&gt; { person.HP += dice.D6(); };
You should use such patterns like Builder and AbstractFactory. So as it is said above. I will advise to you using reflection mechanism after correct implementation of patterns. 
Thank you very much. 
Charge for the app.
&gt; Recently I put out two games, The Chaotic Workshop and Space Esc8bit, which both have with a free ad supported version. 
&gt; tostring() doing tons of immutable string allocations instead of using string builder Can you explain this? I use a lot of ToString() and want to better myself.
Thanks! I haven't done an actual post on install issues yet, I've written up a word document for work, I may need to convert it to a blog post though.
Well, I did only say I only *hope* it's useful. Could you please send me the links to the educational resources you're talking about?
Start with the **.NET Framework Design Guidelines**, preferably the book version.
I'm not great at explaining things but this sums it up pretty well. www.codeproject.com/Articles/1194964/The-Difference-Between-String-and-StringBuilder-in Enjoy.
Thanks for pointing that out. 
Honestly, those are just status messages and can probably be removed or only displayed while debugging. The naming conventions are a bit funky. But it could be probably be cleaned up. I'd say he should keep working on it.
I see, I'll keep that in mind, thanks. 
Thanks, lol. You are right, the ToString() bits were for debugging and I didn't need them anymore, so I removed them. 
I'd hide them behind a setting like ShowDebugMessages if they might be useful to someone using your framework.
https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking The site is down right now, but it’s a very good guide. Libyojimbo is made by a guy named Glen fielder who worked on the networking of famous triple A titles and now works on s library to enable triple A development. https://gafferongames.com https://github.com/networkprotocol/yojimbo
Thanks man, I appreciate it.
If an app has an opt-out setting that is unchecked by default, will the ad company still pay the developer? It's true that devs need to eat, but it's also true that ads are tacky. Free software like Foxit and Open Office don't show ads. Free games on Steam generally don't. Apple restricts the practice. I'm wondering if this issue is unique to Android apps and websites, and at least with websites we have adblockers.
I've added some documentation and quick start guide to the wiki https://github.com/Tyrrrz/Onova/wiki
Tell me if it helps.
I've added some documentation to the [wiki](https://github.com/Tyrrrz/Onova/wiki), please tell me if you'd like to see info on some specific topics
Most job listings that even mention a degree will usually say "Or equivalent experience". Your degree generally only serves to get you in the door at your first job. If you stay there a decent amount of time (i.e. you're not a job hopper that leaves after 12-18 months) that's what the next job will be looking for. 
Nice, it looks much better now. :-) What will happen if some file is in use and it can't be removed on update? (I assume old version is removed on update, am I right?)
You know zero about monetization for mobile games.
1. Ctrl K,D to fix indentation and spacing 2. Wrap the file stream and stream reader in "using" clauses and remove the manual stream close 3. Change BoatInfo to boatInfo 4. Now that your code looks sharp, developers will find it more pleasant to troubleshoot.
Oh boy, wait until you find out what those "free" apps are doing with your private data...
Your workplace sounds very beautiful.
The updater will wait until the application exits to make sure that it doesn't lock the files, but if some external process also locks them then it may cause an issue. Old version is not removed per se, the files are just overwritten -- that is to prevent deleting some user files or something else important.
But you've got to be doing a lot of ToString before you'll notice it. Use a profiler if you're worried.
I found [this](https://sourceforge.net/projects/espeak/) which has a commandline version, and a shared library, though I don't know if that would work with C#.
If you've been a programmer, your degree means very little. I've worked with English majors, chemical engineers, classical studies, and more than a few closely associated degrees like IT, CIS, CE, and such. Even a few with no college degree at all. Hell, the best programmers I've worked with were self taught. The field is quite the meritocracy. If you can answer the questions and do the programming, who cares what your degree is in? Sure, things like degree and certs matter when you are going for your first job, but after that, all the interviews I've been part of focuses on the abilities and real world experience rather than the largely academic and rarely directly applicable classroom skills. I've never asked someone with job experience about their college program nor have I been asked about mine after my first job. Adding a coding camp or training course for the particular area of development you'd like to pursue can't hurt.
I think you are looking for a trigger event. Not sure how to do it exactly since over never done it. 
Tried CoreRt recently. It compiled a native exe (sld2 game) on windows just fine, even though it's still in alpha. 
Create some key interfaces (IItem, IContainer, etc) for the bottom 2-3 levels of the implementation. A couple of bases like WeaponBase or SwordBase and then your distinct implementations. If possible try and make things as data driven as possible so you can just provide data to add new types of items. 
Read “Head First Design Patterns”. I can’t recommend this enough. You’ll learn them inside and out by relating them to real life (non-tech) topics. 
Did something get cut off on your second paste? You're trying to assign the value of NameBoxPage2.Text as... nothing??? That won't compile because you need to assign something and there's no semicolon.
Yeah I did do that It doesn’t find the the class I just forgot to save it. After = I go to put data.textbame or whatever and data doesn’t come up as an auto fill so it doesn’t connect
It looks like you're storing the name and other properties in a GlobalValue class; why not pull them from there?
4. Create a page 1 that has three textboxes. Each textbox should utilize a unique input scope keyboard, one for a name (text), one for a phone number(number) and one for an email address(email). The page should also contain three buttons:, one called global, a second called query string and a third called application. Create a second page that contains similar three textboxes and a return to page1 button. On the first page the global button should pass the data to the second page using a global class, the second button should pass the data using the Navigate method (use OnNavaigatedTo) and the third should use a variable created in the app.xaml.cs application class. This is the assignment verbatim 
What you have is a dictionary of items with named keys. If you are going to use inheritance then you would need an abstract base class called Item with concrete classes that represent the actual types you want. This is how every type in C# is based on the type Object. If you look at Unitys code you will also see that all the types are based on a Engine.Object. Also if the pattern you want is to have an Item type you should look into scriptable objects. Define the basics and then you can create subtypes in the GUI. ScriptableObjects are similar to monobehaviour but are not components that can be attached to a game object. The factory pattern mentioned would also work well here.
Aha, something I have a background in! This all depends on what you are using. But of course it's 100% possible, some ways are more efficient than others. You may want to rethink how you're trying to achieve this affect and consider you're going to be extending the panel control itself. Are you trying to do this in WinForms or WPF? Btw, Visual Studio uses WPF for drawing it's UI. But WinForms is completely capable of doing these things, it just takes a little more effort. Let me know which UI type you are working with and I'll point you in the right direction.
Neat! (Shameless plug of my C# Networking Tutorial Series &lt;/related-content&gt;)[https://16bpp.net/tutorials/csharp-networking/]
OK, so to get the data back from your global class, you'd just do the assignment the reverse of the way you did it on MainPage: NameBoxPage2.Text = GlobalValue.name; and so on for the other two fields. I'm not familiar enough with UWP to know what to do about a Navigate method, but the app.xaml.cs would function similarly to the global class, except I think it would be something like NameBoxPage2.Text = Application.Current.name; and you'd need to define the name property in app.xaml.cs. 
BinaryFormatter is slow (even slower than Newtonsoft's serializer believe it or not), I would definitely consider moving to Protobuf. Also expose an async version of your methods. Don't use strings, instead for identifying things like packet types use byte or words that compare against constants. Also consider using TCP. Unless you really know what you're doing and are hurting for performance, UDP is a bad idea. Popular multiplayer games like World of Warcraft manage with TCP just fine. C# has a wonderful TcpClient and TcpServer for this. Overrall as a learning project, very awesome! Networking is very hard to program, so anything beyond simple client/server communication (like chat programs) is very impressive.
I suspect your issue is with *value type* semantics. You think you are invoking a mutable operation on an instance, but in actuality you are invoking the method on a copy of that instance. Mutable structs are bad, and this is one of the reasons why.
This is very nice! Give me a week though
From what you have posted it sounds like it would be a million times easier to do what I want in WPF, but for educational purposes I'd like to figure this out in WinForms if it's reasonable to do. Just to be clear, I have a custom panel control that inherits from RichTextBox and overrides the onPaint method, that's how I'm drawing the initial border. The problem I'm having is that I have a RichTextBox and a Button stored inside of the panel. In the mouse enter event of the panel I want the panel background to change from dim grey to blue. This works fine but only when my mouse first enters the panel. As soon as the mouse enters the textbox or button which are within the panel, the mouse leave event on the panel fires. What I want is to prevent the mouse leave event of the panel from firing when the mouse is still within the panel but is positioned over the child controls. What should I be trying to override in the onPaint method to prevent this? Thanks again.
I usually go with C# scripts (dotnet core to run on linux) because they don't require as much work on my end. Reading and parsing files among other file management, POST/GETing stuff either as a file or string, managing and running processes, etc are really easy to do C#.
Many ways to do this, and it really depends upon what more you want to do and how the rest of your design is going to work. Others have pointed out ways to do it with inheritance. I'll provide another option: composition with enums. enum ItemType { Sword, Potion, ect... } And have your Item class have a property with using ItemType. You can check like: if (usedItem.Type == ItemType.Sword) { CutRope(); } I wouldn't go another layer if doing it this way, personally. "SteelSword", "TemperedSword", "BluePotion" would be the actual names or another identifier for the item. Just another option to consider.
Im halfway in currently. It’s really good and easy to read actually 
https://chsakell.com/2015/02/15/asp-net-mvc-solution-architecture-best-practices/ This is pretty good for scalable mvc applications withrepository pattern, unit of work, and IOC. I use this pattern but simplified it quite a bit for my purposes. Takes a bit to understand.
Yes that’s a very good source, however what you should try to take from it is learning how to identify the situations that requires the application of a design pattern. That is most difficult part and the true skill. Learn how to identify code blocks and situations that can be made more simple and easier to understand by the application of a design pattern. Try and identify what design pattern solves what generic problem. As the design patterns is domain agnostic they solve a generic problem. Learning what generic problem is solved by what design pattern is the real skill. 
I agree, it's important to avoid "if all you have is a hammer, everything looks like a nail". I've worked on a project that had a developer on it who proudly displayed the Gamma et.al. Design Pattern book on his desk... But apparently the only thing he understood was the Singleton pattern. So the entire project was just singletons, some up to 2500 lines of code... :|
Dimitri is the best dude out there: https://www.udemy.com/design-patterns-csharp-dotnet/ Watched and read tons of videos and articles... and Dimitri deserves all the respect !
Most importantly don’t get bogged down by the dogma of any given pattern. They’re just ideas for approaches to problems that won’t line up with your set of criteria. You need to build a solution for that criteria, not implement a pattern perfectly.
This guy androids
Check out ServUO. Open source C# Ultima Online server emulator that I helped work on ages ago. Has some pretty useful networking framework already built. Never worked on a client, but there are a few open source clients floating around that will connect if the server is setup properly. 
*Beep boop* I am a bot that sniffs out spammers, and this smells like spam. At least 100.0% out of the 17 submissions from /u/yoyogirl140 appear to be for Udemy affiliate links. Don't let spam take over Reddit! Throw it out! *Bee bop*
Good bot! 
https://ericlippert.com/2015/04/27/wizards-and-warriors-part-one/ 
Sorry not sure if you understand. My question was asking how you go about changing objects properties if you are already treating them as immutable (which is what the original comment sort of said, that changing properties is a code smell). I already have functions that change properties... Setters... But the original comment said it was a code smell so I wondered how they went about updating objects like users in a CRUD app. 
Aren't all the examples in java?
I like your answer, PowerShell is good. But as the OP already has Python experience, wouldn't be surprised if you don't know PowerShell its easier to just stick with Python scripts/terminal's.
Same here. Education is important for entry level when no experience is there. But experience is far more important than degrees. Focus on experience and knowledge. Too many of us have been burned by hiring people with good certifications but still can't seem to understand basic programming concepts when put outside of the classroom.
Is there any reason you can't use asp.net Identity users and roles? For instance, you could include the following in web.config: https://pastebin.com/fg3RFgVC &amp;nbsp; Note the role under `&lt;authorization&gt; &lt;allow roles="Administrator" /&gt;`. Now you would be able to create a role titled 'Administrator', assign it to you Membership profile, then you would only be able to view elmah.axd if you are logged into the site or service *and* have the 'Administrator' role assigned to your account.
What about the case that I change my dll name and want to delete it on update. Is there an option to remove everything and make clean update? 
Having never used C# in a professional or team envirornment I'd love to know what sort of code styling should be fixed. Looking at OP's code I can pick up a few things: - Questionable file organization (multiple classes in a single source file) - Class names with mixed Pascal and snake case - [`KNet.cs 73`] Trivial else statements (`if (condition) { DoSomething(); return true; } else { return false; }`) - Inconsistent formatting of if/else statements, some with nested if/else if/else blocks - [`KNet.cs 373`] Passing strings as identifiers (like "INTERNAL_FREE-RELIABLE" or "CMD_Login"), instead of having these as constants or enums - [`KNet.cs 300`] Somewhat useless helper methods like `Shutdown()` which just sets a global variable to true. - [`KNet.cs 179`] Long methods with multiple nested block statements that should probably be broken up into separate methods. - [`KNet.cs 133`] Public fields that should probably use accessors to sanitize input. - [`KNet.cs 18`] Naming a List `packetQueue`. - [`KNet.cs 16`] Unnecessarily initializing an object as`null`? (I've seen this done else where and I'm not sure if there's a benefit to doing so --- maybe because you expect the object to be null sometimes?). - [`KNet.cs 334`] Unnecessary `break` statement. Not sure if this is what u were referencing to as style that would need work.
Thanks for the info! However, the reason I'm using strings for packet identification is for easy extensibility. Also from what I've read, it sounded like TCP was the last thing you would want to use for a game... but I understand what you're saying and I think I'll switch for convienience.
It will be left hanging there. I want to avoid deleting files on the off chance that the user puts the application in their c:/Windows folder or something less idiotic but equally dangerous.
Look into the concept of composition, this is what most modern game engines use for items. A quick summary is basically you just have a class called Item. You then build this class into whatever you need using objects that represent attributes and behaviors. So you would have attribute classes called Sword, Tempered, Potion, etc. Then you build up your Tempered Sword item by adding the Sword and Tempered attributes to the Item class. At that point you would just need to run a HasAttribute("AttributeName") method to find out if the Item is a sword or a potion or whatever.
The official guidelines are [here](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/choosing-between-class-and-struct): &gt; AVOID defining a struct unless the type has all of the following characteristics: &gt; 1) It logically represents a single value, similar to primitive types (int, double, etc.). &gt; 2) It has an instance size under 16 bytes. &gt; 3) It is immutable. &gt; 4) It will not have to be boxed frequently. The general real life guideline is this: Don't use structs. It's used at times to eek out performance in critical/core areas, and should only be done when you know you need it and you've got benchmarks showing it's a good benefit.
This is how we use elmah. We require our devs to login to the server to see the exceptions but it still uses Identity 2.0.
I beg to differ on the job hopping aspect. When i first graduated i only did contract work to expose my self to as much variations of business development from the companies i worked at. I did this for about 6 years and was very detrimental to the level of experience i gained from working on enterprise development. OP, my resume is literally 8 pages long right now and yes the earlier on experience doesnt matter because tech is moving really fast these days.
Wish I could help mate, but I am still learning as you are :D good luck!
Thank you for taking the time I appreciate it.
https://static1.squarespace.com/static/5019271be4b0807297e8f404/t/5824ad58f7e0ab31fc216843/1478798685347/CSharp+Book+2016+Rob+Miles+8.2.pdf
Well here is something at least. Not sure if will help? https://static1.squarespace.com/static/5019271be4b0807297e8f404/t/5824ad58f7e0ab31fc216843/1478798685347/CSharp+Book+2016+Rob+Miles+8.2.pdf
Take a look at StackExchange.Exceptional. It solves the same problem but is a little easier to set up and works better with modern .NET applications.
Oh hmmm, must be java I was thinking about 🤨
I'm not familiar with UWP navigation but maybe [this](https://docs.microsoft.com/en-us/windows/uwp/design/basics/navigate-between-two-pages#3-pass-information-between-pages) will help?
Are they seriously teaching universal windows apps? Wow
I do use them, but this is Web API, not MVC. How am I going to pass my bearer token when accessing the Elmah endpoint? Elmah won't know that I am logged in. 
Another thing to remember is to not give yourself a hard time on interview performance. You will never be at your very best under that pressure and that pressure doesn't really exist in a workplace. All you have to do in an interview is be a little better than the other handful of people going for the role. You would be suprised how low that bar may seem at times. Interviews are poor representations of ability usually!
xmi is the namespace of the attribute. You'll need to either specify that namespace and reference it in your XPath (some examples here: https://msdn.microsoft.com/en-us/library/6k4x060d(v=vs.110).aspx) or look at all attributes and match on name like @*[name()='attr'] but then you risk matching attributes of the same name in different namespaces...
Thanks, will try!
Rob miles - yellow book is a great starting point. You can find it here http://www.csharpcourse.com 
Thank you Will have a read through it
To be pedantic, `xmi` is not the namespace itself but just a shortcut for a namespace defined elsewhere in the document. It doesn't matter if it's `xmi:` or `foo:` or `bar:`, what matters is what namespace the prefix is referring to.
To me, this book was really boring. I really struggled to force myself to read it. 
I find Udemy courses to be much more engaging than Pluralsight. Pick one that combines C# with something that interests you. There's a few that teach you C# while developing a simple video game.
Depending on your experience level, I really enjoyed the book C# In Depth. I was already a developer and had a tiny bit of c# under my belt at the time that I read it. If you're looking for something tangible, Xamarin apps are fun. There are plenty of samples and you can deploy it to your phone.
Xamarin and Android development in general interests me so it might go for this approach thanks.
I'd start by getting Visual Studio set up. Start and finish the course available from SoloLearn. Then start developing simple apps and try making them more an more functional and feature rich. You learn the most from acctually codeing... Doesnt matter what you read. You gotta do it. Make a calulator, make a converter. Make a notepad. Make a image viewer. Or if you have a big idea for an app. Start by making little componets of that app work seprately. Then try to make them work together. Big thing is, to learn, you gotta do. However, Read lots and lots. Especially the boring stuff (Soon things connect and make sense) try to understand the different parts and the technologies available for the things you wanna do. C# is a huge language to an epic level. So you can get caught up in shit you'll never use. Take it one step at a time. Reading books is helpful. However you won't take or retain much from it until you understand the core concepts of OOP really well. I'd recommend focusing on understanding those core concepts first, because they will help you in learning any other language as well. Which you will do at some point for something. C# is awesome though. You can develop for pretty much anything with C#. 
That's what I did, that giant one, I forget the name. Learned a lot!
Get a free visual studio account. When you create a new account you’ll get like 90 free days of Pluralsight. I find that to be the best learning tool. 
What I personally have done is used the links on this sub’s sidebar. There are so many Microsoft libraries to study from, its insane. You can very easily get scatterbrained and worry about what book is best (I did that). Best thing for me was using MSDN (linked in side bar) and got rolling. With my new area of focus, I nearly have my windows form app finished! Good luck!
When I read the title, I thought you meant "Learning C# from Scratch (scratch.mit.edu)"
Like first boot ever on a brand new installation?
Please keep that default interface implementations shit out of my language.
Like I said last time this came up, I think traits are a good idea, but I'm not a fan of this particular implementation. Actually, since that last thread, I took to the proposal discussion on github to [raise some concerns](https://github.com/dotnet/csharplang/issues/288#issuecomment-373970284).
&gt;higher-kinded polymorphism. You've caught my curiosity.. What is this? 
Noooooooooooo
I took a lot in from the free series by Bob Tabor on Microsoft’s DevU. C# programming for the complete beginner or something like that. I’ve seen almost all of the videos at least 5 times for that beginner course. Going to start the next one soon. Doing little challenges on codewars helps too.
&gt; We have abstract classes and they work fine. But we don't have traits, and we don't have multiple inheritance.
It's mentioned [here](https://github.com/dotnet/roslyn/issues/2212). AIUI, basically you're defining generic types that don't get resolved immediately.
Match on local-name() in most cases. You'll test for "attr" instead of "xmi:attr"
What happens when you have 2 different interfaces with the same method signatures and both have default implementations? 
Am I missing something, I can't think of a single use case this actually addresses or fixes?
Or you decide to add a default interface method and my class which implements your interface already has that method signature. 
No no no no! This doesn’t help me write better code. Please no!
that one is okay. If you have a body on the class, it replaces the default automatically.
The last example goes into this. Because you have to cast back to the interface there is no issue (Although limits it's usability a little). 
It feels like c# has rapidly evolved the last few years since going open source. It now feels like it's trying to continue to evolve but has ran out of good ideas. I fear for its future when it becomes "everything to everybody" which seems to be the current direction. I bet we end up with c++ and different shops have to determine what features they allow to be used because so many bad ideas (like this) end up in the language
Extending an existing interface without breaking code that relies on it. There are currently workarounds (use a common abstract base, confine all new contracts to an interface that extends the original interface, type-sniffing extension methods, etc) which come with their own problems and degrees of clunkiness. It has been hoped that this could provide binary compatibility as well as source compatibility.
¿but why tho?
It's becoming a hoarding language. fill in every last space with function even if doesn't feel natural because we can. 
This is why Java implemented them when they added stream support to all of the collections API. It allowed them to avoid breaking backwards compatibility. 
Multiple inheritance is a horrible trap. We simply do not need it.
The language was designed without multiple inheritance for a reason, if it's really needed use interface inheritance and composition.
Not advocating for it, just giving reasons why a compromise might be needed.
There are a number of methods on the string class that can help. https://msdn.microsoft.com/en-us/library/system.string(v=vs.110).aspx Start with `IndexOf` and `Remove` and go from there. Pay attention to the fact that it only returns the first instance and then think about words like "cookie" and the letter "o". `Replace` is an interesting command to look at too. You should learn `while` loops if you haven't already. 
Some good info Thanks From the beginner course i finished (pluralsight - scott allen / gradebooks) learned some useful stuff like code snippets. Can comfortably use IF statements and switch case. I believe i could create a calculator now, though coding wouldn't be the best. But like you said, can improve it as you get better. I have: Visual Studio Enterprise 2017 Unity 
I want macro support in c#. That would allow us to have multiple base types applied as a class without all the insanity that true multi inheritance causes that no one needs. We need macros. 
Having worked with them in the past, C++ obviously, it really stood out to me that here’s a bit of code that wasn’t easily tracked back to what it was doing. If this was added I’d hope that the IDE has better support for it.
Fall 2018. You can preorder now.
Thank you so much!! Very well explained I really appreciate it 
I have never used the replace command I needed that. I'm a little confused on the part where you type string.empty
 &gt;The general idea is that this will now allow you to do some sort of multiple inheritance of behaviour/methods (Which was previously unavailable in C#). Uh, what class Program { static void Main(string[] args) { FooBar fooBar = new FooBar(); Console.WriteLine(((Foo)fooBar).Hello()); Console.WriteLine(((Bar)fooBar).Hello()); } } interface Foo { string Hello(); } interface Bar { string Hello(); } public class FooBar : Foo, Bar { string Foo.Hello() { return "Foo"; } string Bar.Hello() { return "Bar"; } }
I agree. It feels wrong because it feels like all modern programming languages (c#, java, python, c++) are converging into common syntax and paradigm.
I would like this. We have it in Swift, it’s really great.
Java and C#, when facing the same problem (adding behavior based on the interface), came up with different solutions. In C# it was extension methods (which made LINQ possible), and in Java it was default interface implementation (which made the Java 8 Streams API possible). It seems weird to me that C# is bringing Java's solution when that problem was solved already.
I don't want to be the poor soul trying to debug someone else's code containing 144 macros named `a`, `b`, `c` etc containing the entire business logic of the app.
It's going to happen, and there is nothing you can do to prevent it.
I don't fucking care what dumb programmers do. Fire them. Don't hire them. 
Understanding a language may take some months. Understanding programming and the many available patterns may take longer. I think there are a lot of good books on C#. I can only recommend you a German one, from "Rheinwerk Verlag". Don't know the actual title. You will find a lot of ressources online for learning c#. You will learn the most from trying stuff out and fixing the stuff you wrote. Have fun and good luck with learning coding :)
Books. Youtube videos often aren't cohesive, so if possible o would recommend buying a textbook regarding what you want to learn
https://youtu.be/PJhMjXPiQXM
Have you seen macros in other languages than cpp, e. g. Haxe , rust? 
You are right because it will be abused as a hack to add behaviour to something that will do more than one thing. I your class needs to do so much that you really need multiple inheritance then you might as well break that class down because it is doing more than one thing. 
%APPDATA%
Thank you sooo much! That worked perfectly!
Do you have any recommendations? I thought about buying the "for dummies" one but people said it wasn't a good choice when I researched it.
Like the sharp yellow book is a good starting point
TBH the guide to C#, Microsoft provides, isn't bad at all. You should look into it: https://docs.microsoft.com/en-us/dotnet/csharp/index
Android is(maybe was?) based on Java though. 
We don't want multiple inheritance. Keep that shite in other languages.
Micorosft Virtual Academy: https://mva.microsoft.com/ Lot's of stuff. Free stuff.
The variables in a struct should be in top to bottom order in memory. So if you do a ReadInt32 on the pointer you will get the first variable. In this case the vKey. If you want to get the time it should be easy. A DWORD is just a unsigned int32, thats why ReadInt32 will work. If you know that a DWORD takes up 4 bytes (32 bit = 4 bytes) you can calculate the offset you need to read the variables from the struct DWORD vkCode; - Offset: 0 DWORD scanCode; - Offset: 4 DWORD flags; - Offset: 8 DWORD time; - Offset: 12 int time = Marshal.ReadInt32(lParam + 12); I didn't test it but this should give you a idea
The very quick answer - the key code is the first field of the structure; that means a pointer to the structure is also a pointer to the key code (because they both start at the same memory location). If you wanted to access the other fields, you would have to add an offset to the pointer, or Marshal the whole structure and have C# handle the field offsets for you.
This is a quite common programming exercise and there are many ways to implement it. The main part of the task is to iterate over a multidimensional array. This means for example two nested loops. The outer loop iterates over the rows while the inner one iterates over the columns for example. During each Iteration you increment either the sum of the current row, column and the total array. I'd create three objects outside of the loops: a variable containing the sum of all numbers and two Arrays of numbers (one for rows, one for columns) whereas each index contains the sum of column/row at given index in your multidimensional array. 
Thank you for your reaction. They gave us an installation tutorial for MSSQL Server so yes, it´s a MSSQL database. Honestly I don´t have any knowledge so far. So I wouldn´t know how to start. Do I first make the interface or the code, or do I do this simultaneously? At the moment I don't know where to start. Anyway, I will definitely be using your tips and the code you provided, thankyou
Quick disclaimer up-front: everything below is my personal opinion, not absolute fact. Learning how to program can be challenging. Learning how to program while at the same time learning another framework such as Unity3D (or Graphical User Interfaces for example) is way, way more challenging. The reason for that is because you already need to be comfortable with the basics of a programming language to meaningfully utilize these frameworks. What I mean by that is that something like Unity3D has a lot of different areas (classes, methods) where the code of your program/game interacts with the code of the framework. Not fully understanding how this interaction actually works might set you up for a very frustrating learning experience. That is why I always recommend to people who start learning to program to learn the basics in a console application. It's not sexy, it's possibly not an area you'll want to stick with in the end, but it does take out a vast amount of *fluff* that you really don't want in the beginning. Yes, you still need to learn how to interact with the console. But for most of the early stuff that is limited to one class and two or three methods. This means that you can focus on the actual concepts like variables, methods, classes and so on instead. Once you understand the basics, you will almost certainly find that the transition to Unity3D will be easier. Not easy, because Unity3D is a complex piece of software, but easier. The time you invested by learning the core concepts of programming in a console will now pay off. You can now focus on learning the framework. You'll understand why things work the way they do. And that is crucial. I always tell people that it is easy to follow a fifteen step tutorial to do a particular thing. But if you don't know why it works that way, you won't have the tools to take that tutorial and adapt it to your own, perhaps slightly different problem. As pointed out by others, there are some good links in the sidebar. If you prefer reading I too would recommend the C# Yellow Book. If you prefer video, the C# Fundamentals video linked in the sidebar might be a good first step. Bottomline: start of with the basics. Yes, it will take some time. But consider it an investment towards your actual goal: creating games in Unity3D. I strongly believe that taking this route will ultimately more rewarding.
Assuming SQL Server DB... https://stackoverflow.com/questions/9348148/proper-way-to-make-a-connection-and-query-to-a-sql-server-express-database here's another link on connection strings if it's not a SQL Express DB... https://www.connectionstrings.com/
IIRC, the proposal cites interop with Java as a reason for this.
thanks!! 
You could try Mosh Hamenadi on Udemy
I spent months trying to struggle through it. I tried doing the unity tutorials and quit 3 times because I was copying without comprehension. On my forth try I kept pushing through to the third tutorial project and then a lot of stuff just clicked. You will have days where you spend 8 hours trying to figure out why your code isn't working just to find out you need a () at the end of a line or something is capitalized that shouldn't be, etc. You will have days where you try and rotate a object using degrees instead of radians. Or get stuck trying to wrap your head around quaternions. Or try the UI system and completely miss all the short cuts Unity built in for you. My point is it happens. Comprehension of C# syntax can be learned but it's like learning a new grammer system where typos and misuse of punctuation are not allowed ever. 
Not saying it is the correct way but I do something like this to get the value of an XML element, sorry if the formatting messes up: private void Form1_Load(object sender, EventArgs e) { XmlTextReader reader = new XmlTextReader("Config/SaveData.xml"); int NOTD; string currentElement = ""; while (reader.Read()) { if (reader.NodeType == XmlNodeType.Element) { //Stores the name of the XML element for use below. currentElement = reader.Name; } if (reader.NodeType == XmlNodeType.Text) { //We will try find the NumberOfDucuments Element and return its value if (currentElement == "NumberOfDucuments") { NOTD = Convert.ToInt32(reader.Value); } } } button2.Enabled = false; }
Oh and ignore this if it is deliberate but you would normally spell it 'documents' not 'ducuments'!
Programming is hard. Assuming that you can immediately pick something up and write something as complex as a videogame is naive at best. Personally, I can't remember a time when I didn't sort of know how computers worked and must have wrote my first line of code back in primary school (age 8). Seeing something move by the fact of my instructions it a fire that hasn't stopped burning almost 40 years later. And I have never stopped learning new languages and methods. This is a big part of a developers career, so if you struggle then maybe this is not for you. If you're young (ie not out of your teens), then that's fair enough, just keep at it as it is tough, but if it does click, you'll find it one of the most rewarding careers to be in. And being in demand means that you'll probably not need to worry about the future.. If it doesn't click, then just move on, its probably not your thing. If you still want to be involved with games go into design, network administration, marketing, the industry has lots of ways in.
It comes down the diamond problem and managing that. Python has multiple inheritance and I use it sparingly, pretty much only when it's less of a hassle than composition (which typically only happens when someone else has used multiple inheritance). The way python deals with it is using linearization on the base classes. The drawback there is the order in which you declare your parents is now important. For example if I have class A, B and C with both B and C inheriting from A I can do: C, B, A or B, C, A as an ordering on my multiply inherited class but I can't put A anywhere other than the tail position, that's an error. The ordering of B and C also affects how super resolves methods. Unlike languages that have single inheritance, super in Python means "call the next class in the method resolution order (mro)". So for a class D with parents C, B, A will call C then B then A with super (assuming each parent also calls super). But switching B and C affects this. Going further, let's say we have class E inheriting from B. If we have D (C, B) and then F (D, E) the mro now looks like F, D, C, E, B, A. Knowing this is handy because you intercept a call higher up the mro if you really need to (which only occurs when you're dealing with multiple inheritance) but it can lead to weird or unexpected behavior if you don't know about it. So yeah, MI is very much a footgun. If you can manage to use it properly, you'll probably blow someone else's foot off. 
You'll want to take a good look at the anser /u/dacopo gave you (and my reply to him), but I'll explain real quick why the code you posted here didn't work as expected. When you go through the while loop, it's going to read a node. Each node has a node type. For the starting element that is `Element`, for the end element that is `EndElement` and for the text inbetween the two it is `Text`. The `Element` and `EndElement` nodes will also set the `Name` property of the current node. This property is not set when the node is a text node, though the `Value` property is. So what happens when your code reaches the `NumberOfDucuments` starting element is that it enters the if-statement. It then reads the next node (the text node) and correctly finds and parses the value. It then goes back to the beginning of the while loop and comes across the `NumberOfDucuments` end element. That too has the name property set so it will once again enter the while loop. And this is where it breaks down. You then call `Read()` again and it will read the next node. Depending on how the rest of the xml file looks like, this will likely be a new starting element. This will have a new name, but no value set. So when it then tries to read the value a second time it will crash with the exception you showed. You can easily test this by seting a breakpoint on the `int.Parse()` line. You'll see that it gets hit twice.
I think the preprocessor _could_ get a little stronger. Like [Swift's `if #available()`](https://www.bignerdranch.com/blog/hi-im-available/), for example. It would be nice if, instead of relying on hardcoded symbols, the compiler could figure out whether references of a certain version (or at all) are available. So, instead of having to hardcode this: #if DOTNET45ORNEWER // simple implementation #else // fallback you could dynamically do something like: #ifref SSystem.Core &gt;= 4.5 // simple implementation #else // fallback Or: #!ifexists System.String.IsNullOrWhitespace // implement this ourselves if below .NET 4.0 This would also make it easier, for example, to share code between ASP.NET and Xamarin projects. I'm making the syntax up, of course. [Here's](https://github.com/dotnet/csharplang/issues/1182) a similar proposal. I certainly _don't_ want the mess in C of full-fledged dynamically-generated code with lots of `\\` escaping. Virtually impossible to statically analyze, let alone grasp as a human being. But some more powerful compiler directives would be nice.
Interesting, Thank You for the info and the info in your other comment! I assume this applies both when reading an XML file and reading a string containing XML?
Children never have focus. That's why they made Adderall for them and beer for dad /s
&gt; but of course you cannot override extension methods to provide an implementation that is specific to a particular type. I'm a bit confused by this. It sounds like you're saying providing overloads where the `this` parameter is a more specific type than `IEnumerable&lt;T&gt;` isn't possible, which is untrue. Extension methods follow the same "best-fit" overload resolution rules as any other method.
Events bubble up so parents SHOULD see child GotFocus events unless they are handled lower down or the parent control lacks its own GotFocus event. In the case of the parent lacking "focus" I think you want to tie to the GotFocus/OnBlur events on the individual controls and have those events bubble up to the parent controls through your own ChildGotFocus event.
http://norvig.com/21-days.html
The even better way is this: ``` if (reader.NodeType == XmlNodeType.Element &amp;&amp; reader.Name == "NumberOfDocuments") { NOTD = reader.ReadContentAsInt(); } ``` 
FWIW: the [default interface methods proposal](https://github.com/dotnet/csharplang/blob/master/proposals/default-interface-methods.md) answers a lot of the questions people are asking here about *why*.
I read xml into datasets then use linq against tables. Find it much easier for these types of things.
no don't mention angular please 
You should check the [proposal](https://github.com/dotnet/csharplang/blob/master/proposals/default-interface-methods.md) for some business about the "most specific override" to see how they're addressing that problem. It looks like the idea is to force conflicts to be explicitly resolved.
There's also the 'Enter' event, have you tried that? Blur and Focus should normally work regardless if you use mouse or tab.
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/using-structs Now forget everything you just read.
I have very mixed feelings about this one. It's going to engender a lot of confusion among junior-to-intermediate developers about interfaces and abstract classes. It introduces non-virtual methods to interfaces, which is going to be a real headache when some twit decides to make their interface's public surface sealed. It also seems like it may be killing the [shapes/extension everywhere](https://github.com/dotnet/csharplang/issues/164), which doesn't seem very active.
Yeah, it seems to be the only reason that makes sense. Anything else is actually solved with other techniques, but when you gotta interop, you gotta interop.
I'm not sure what “type sniffing” in extension methods actually means.
&gt; we don't have multiple inheritance Composition over inheritance, (pretty much) always! 
Of course if List.Select exists, then if you have `List&lt;int&gt; xs` then xs.Select() is going to invoke List.Select. However if you have `IEnumerable&lt;int&gt; ys = xs` then ys.Select() is going to invoke Enumerable.Select (or some other extension method on IEnumerable). In the LINQ usage scenario, the vast majority of the time the compile-time type of the receiver is going to be IEnumerable&lt;T&gt;. Hence why the code for Enumerable.Select looks like this: https://referencesource.microsoft.com/#system.core/System/Linq/Enumerable.cs,38
C# structs can have methods. They're functionally identical to classes with the exception of inheritance.
I am. If it doesn't support speech, are there any alternatives?
*laughs in **pihole** and extensive blocklists*
Code that doesn't works (nothing received, but no errors thrown either): SocketAsyncEventArgs socketEventArgs = new SocketAsyncEventArgs(); socketEventArgs.BufferList = buffer.data; socketEventArgs.Completed += HandleSend; socketEventArgs.RemoteEndPoint = stunServerEndpoint; bool isAsync = socket.SendToAsync(socketEventArgs); if (!isAsync) HandleSend(this, socketEventArgs); Code that does work but that prevents my socket from receiving from multiple endpoints: socket.Connect(stunServerEndpoint); socket.Send(buffer.data); What I'd really like to do, but unfortunately there is no method defined for: socket.SendTo(buffer.data);
Don't be so certain. They removed primary constructors from the spec.
I think that the implementation proposed is necessary to support interoperability with other languages. In Xamarin there are classes and interfaces that provide interop layers to interact with android systems. The gist as I understand it is: 1. .net app inherits from XamarinBaseClass to get some functionality 2. .net app implements interface IXamarinFeature to support some api 3. android updates interface At that point Xamarin is stuck. Modifying the IXamarinFeature interface is a breaking change requiring source changes in every case. This proposal allows a significant percent of such changes that have already happened (usually adding parameters to methods) to not require Xamarin to make breaking changes. We can argue for or against DIM as loud as we want, but it comes down to the fact that there are real problems for .net libraries that abstract other languages which have the ability that interfaces can change without breaking the downstream code and a solution is needed at the language and CLR levels to fix it in order for .net to perform as a first class citizen in those environments.
&gt; send a list of buffers over a socket So you want to send multiple strings in a row, but have the receiving end get them separately? If so, you've hit the classic problem of "why aren't TCP sockets message-oriented?" It's because they send a stream of bytes, not messages. If you want to send messages, you need to tell the receiving end how long each message is, typically as the first few bytes, so that it knows how to split the incoming stream up and turn them back into messages. The receiving end will know to read the first 2 bytes, convert it to an int, and thus know how many additional bytes to read. Or -- use predefined message sizes. For example: declare that all messages will be 2000 bytes. You'll be sending a lot of excess 0x00 bytes much of the time, but there's no need to create a message wrapper containing the length (and maybe type of message). 
This is a udp socket sending udp packets so I'm pretty sure it's already message oriented. I'm trying to send the list of array segments all as one message.
Because I need the lowest latency and overhead possible and it's ok if I drop some packets. Also it's required by the protocol that I'm implementing. I'm relaying data that itself being sent on udp so it just makes sense to keep it as udp.
C# structs are value types as well.
Seems sensible!
I was reading the code here: https://referencesource.microsoft.com/#System/net/System/Net/Sockets/Socket.cs,8315 And it really looks like it would work with multiple buffers. I can't see why it's not. &gt;I would send each item in your list separately then. This is not an option for me, the server is not my code and it's expect it all as one message. &gt;Your alternative is to create a wrapper object with your buffer list and the lengths of each item, serialize it to a byte array. Yeah, I can copy it all to a byte array and be good-to-go but that's exactly what I'm trying to avoid.
The ability for interfaces to change without having to modify the source of every implementation is needed for .NET to be a successful choice in environments where the underlying system assumes it is the case (specifically Android). Some language feature proposals (primary constructors, records, readonly var, LINQ query syntax, async, object init, tuples) exist to make the language more productive or easier to use. Others (dynamic, generics, ref like types, ref methods) exist to enable new capabilities in the language. The first set don't always happen or get delayed before they do, but the second are inevitable. DIM is going to happen. 
I dont know really, u have to search the net. 
Do events bubble up or propagate down? I've never actually bothered to check the order of execution of events involving the control heirarchy but it always seemed to me that it propagated downward (i.e clicking on a textbox that is a child control of a panel that is a child control of a user control, the order of execution would be: Form -&gt; user control -&gt; panel -&gt; textbox). Is this not correct?
A composite object (like a class) which is always allocated in-place (on the stack, or inline with the heap-allocated object which owns it), so never needs to invoke allocation or garbage collection. This feature imposes several restrictions (they have to be default-constructable, can't contain recursive references, and usually have to be copied to be passed around), but the performance gains of avoiding so much dynamic allocation and garbage generation make them invaluable for realtime work.
Others have identified what structs are, I will add when you should use a struct in C#: Basically never. It's used at times to eek out performance in critical/core areas, and should only be done when you know you need it and you've got benchmarks showing it's a good benefit. The official guidelines are [here](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/choosing-between-class-and-struct): &gt; CONSIDER defining a struct instead of a class if instances of the type are small and commonly short-lived or are commonly embedded in other objects. &gt; AVOID defining a struct unless the type has all of the following characteristics: &gt; 1) It logically represents a single value, similar to primitive types (int, double, etc.). &gt; 2) It has an instance size under 16 bytes. &gt; 3) It is immutable. &gt; 4) It will not have to be boxed frequently.
Excuse my noobishness but..what that does mean for me? Are you saying SendToAsync should actually be working and I'm just doing it wrong (totally believable). Or maybe the issue is that I'm on .NET 3.5 and it's using that old sendto instead of the new WSASendTo? (I'm trying to find the 3.5 reference source right now but no luck so far) 
What setup project are you using? WiX?
&gt;Are you saying SendToAsync should actually be working That would be my assumption, yes. &gt;Or maybe the issue is that I'm on .NET 3.5 and it's using that old sendto instead of the new WSASendTo? I was just explaining why some `Socket` methods support multiple buffers but others do not. There's nothing you can do about this part of the problem.
Damn. That's a shame. I've had trouble finding any good options for calling a Python method in a C# .NET Core project. I guess I might be able to run a python script through Terminal, although it's not optimal.
All types have interfaces and, consequently, specify one or more contracts. An interface type is one way of defining a contract that may be implemented by multiple concrete types, but it's not the *only* way. Some approaches can maintain at least source compatibility, now, like adding a non-abstract method to an abstract class--you don't *have* to break downstream code to add new capabilities to an existing type, right now, as long as you can define those capabilities. What this feature enables is the ability to do this directly from the interface type, instead of requiring an abstract class as an intermediary. This should ease maintenance by requiring fewer additional types, resolving at least some situations that would currently require composition due to needing behavior from multiple abstract parents, and reducing code duplication in similar situations.
Why are you grumbling about people who are presumably just trying to help?
Be careful, a "struct" is a very different thing in C# and C++. In C++, "structs" are a holdover from C syntax. They are a way to define data types like classes, but unlike classes they can't contain functions and don't have features like inheritance or polymorphism. One neat feature is you can easily predict how they're laid out in memory, so lots of C(++) developers do clever things with them. In C#, "structs" are designed as a performance enhancement that confuses the Hell out of developers at all experience levels since they get covered by books as if they're something that is commonly used. They can have methods, but can't participate in inheritance or polymorphism. The main differences between classes and structs are: * Structs are *value types*, which means every assignment or use as a parameter causes .NET to make a full copy of the object and pass that. Entire sections of books can be written on the ups and downs of that approach. * Structs are allocated differently than classes, which matters if you're working on a very high-performance application and already know a lot about how the Garbage Collector works. * Structs should almost never be used, because the cases where they do more harm than good are numerous. You have to read a lot to understand when it's better to use a struct than a class, and 99% of the time even when you are correct that it can enhance performance the difference might be negligible.
Are you using EF?
stop being a noob and take good advice where you can get it
Structs are great for returning immutable results from methods that are likely to stay stack only. It's less common now that deconstruction and ValueTuples are a thing, but this is a good use case. You may argue that it's a micro-optimisation, but it's an easy scenario to recognise and the benefit is basically free.
Thanks for your help everyone but I think I've solved this mystery. I had it in my head that I was using .NET 3.5, but I'm not, I'm working with Unity so it's Mono's .NET 3.5 equivalent. I just had a look through the Mono source code and it..leaves a lot to be desired. It looks like in the latest version they've at least added an error that says "Mono doesn't support using BufferList at this point." I haven't looked through the old source yet but I imagine it's very similar, just without that helpful error message. I guess this is just the cost of cross-platform support. Now that I'm looking at the right code maybe I can find a work around. Thanks everyone who helped out. I think I'm a bit less lost now than when I started. Cheers.
Eh in C++ structs are just another name for classes except there's only one differrnce between the two. Member fields in structs have default public access while in classes private. They can have methods and inheritance etc. To use which is much to personal preferences and situations. 
&gt; It's used at times to eek out performance in critical/core areas, and should only be done when you know you need it and you've got benchmarks showing it's a good benefit.
Whats a goat? Sorry I am really novice and don't really understand half of what you told me. 
I don't know about WiX. I used the default setup project that comes with the following package for Visual Studio: https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.MicrosoftVisualStudio2017InstallerProjects 
A struct is (basically) a complex value container. So, you might define a Color color; and set the values color.r = 123; color.g = 111; color.b = 3; and later use that color somewhere var box = MakeABox(color); In general, you would only use a struct when you want a complex object, and it's going to be used as a value type and not a reference type. Which is not "never," but when you need it, you'll know you need it. Structs are a sort of halfway point between values and class objects. You're better off using classes in most cases from a practical coding perspective. So learn what a struct is. Play with them and learn their limitations. Then stop using them until you know you **need** to use them. It's not that you can't use them. It's that the "sweet spot" where they actually improve performance is narrow, and in most cases it makes a lot more sense to use a class.
You might not want to take things so personally. The devs on my team are highly critical of all code during reviews. We attack bad code like vultures. It's always about the code and never about the person who wrote it. We learn a ton from one another during those reviews. That person gave you a good tip. You should thank them. 
More like an uncaught LowCaffinationException Take you dataset (List&lt;T&gt; or Array) and apply a .OrderByDesc LINQ query (var zed = foo.OrderByDesc(n =&gt; n.rank)) then use FindIndex to get the position and add 1 to that. Caffination levels riding. Hope that makes more sense. /s &gt; Sorry I am really novice and don't really understand half of what you told me. That is the different between a Jedi and a padawan. /s heavy in the /s
Are those questions you plan to give to a candidate, or questions you've been given as a candidate, or questions you think you might get as a candidate? 
Removed: Rule 5.
Why is this a web app? The ViewModel stuff doesn't seem relevant to the purpose. A class library or maybe console app seems more appropriate.
Here's how to do the palindrome one witheout doing loops : string f = "Able was I ere I saw Elba"; string g = string.Join("", f.Reverse().ToArray()); Assert.True(string.Compare(g,f, StringComparison.InvariantCultureIgnoreCase) == 0);
It is not a web app, is a net core app and it runs like a ConsoleApp in every os that has .net core sdk installed. you can also run this in your linux or mac os x.
My bad.
Also, you don't need an else there; throwing an exception will prevent the rest of the function from executing anyway.
How common is it to you Fody Weavers or Caliburn Micro?
I spoke to Mads personally face to face about Shapes / extensions. Im 95% certain it will occur in c# because of Mads. I'm guessing it probably won't ship until 8.4 or 9.0 thought. 
Do you need to join? Isn't their a constructor that takes a char[? 
Good point, updated it.
Do palindromes traditionally care about spaces and/or punctuation?
A C++ struct is just a class that has public access for its members by default. That’s it. In a way, it’s kind of nothing special. A C# struct is very different to a C# class. It has by-value semantics instead of by-reference. This means you don’t hold references (pointers) to structs like you do with classes, you simply hold the actual bytes of the struct, and every time you pass a struct into a method or assign it to a variable, a copy of all the bytes in the struct is made. Because of how it works under the hood, you can’t declare virtual methods in C# structs (although you can override methods from System.ValueType). 
I would go to udemy.com and do the unity gamedev course with Ben Tristem. You learn Unity and C# at the same time whilst making games. Skip the books if you're anything like me.
You should ask him about his experiences with the Freenode C# channel. He has quite a history there.
As an interviewee, of course I appreciate things like this. Practice is always great. But as an interviewer, these things are the worst. Any widely referenced set of questions become completely unusable in an interview, since you never know if you're testing the candidate's skills or memory/study habits. Are **you** looking for jobs, or looking for talent?
Check out leetcode.com
You could simulate it using `IDisposable` and a `using` statement. The cleaner approach, in most cases, would be to.. just call the method. Be explicit.
I looked at the Udemy.com courses, but sadly, part of the reason why I haven't is due to money. I feel like I shouldn't spend money unless I know for a fact that I will be dedicating on spending time on doing this. 
also, considering how `Duration` isn't an argument to the method, I don't think `ArgumentException` is a good exception there
I'm currently 28, almost 29. I have almost always wanted to do some game design, even if it's not something I make money with. I've heard it's like learning a new language, and it's always difficult learning a new language. It's not as if nothing at all clicks, as I watch videos some of it makes sense, but other stuff just eludes me. I think it's the fact that I can't remember what does what easily like how some commands follow some rules, and others follow other rules. I feel like once I start doing some actual coding and practice it might work better for me as I know I do better with on hands stuff learning.
For the whole console thing, I did watch a few videos about using the console, and making a numbers game as well as a dungeon game via the console as they explained what was happening the entire time. I understood what was going on, but had some issues with remembering what was going on. The way the person explained it was good, but they kept going "There is a better way of doing this, and I'll show you." then proceeding to delete everything and rewrite it, and did it a couple of times. I like it until they started doing that making hard to follow.
People who can't contribute to the answer of the problem, either because they're unable to or because they're too lazy to bother will often resort to being pedantic about a tangent just to make themselves feel smarter and that they're contributing. The only advice is to keep an eye out for those types, they're super common in every subject, on every thing, and when you spot them ignore them, they will only derail the conversation. They just enjoy throwing monkey wrenches into the gear works of conversations.
Because the important packets get a confirmation so I can resend them if necessary. The unimportant packets are streaming game data like the position and velocity of units and whatnot. If an update gets lost it's no big deal because more are always coming. Basically there's a whole partial-reliability layer built on top of this thing I'm working on that will deal with that as it needs to.
Events bubble up, but IIRC only through controls that support the event and only if the event is not cancelled in the interim. the call stack/program flow is the downward messaging most of the time.
&gt; I just actually wish they'd throw away the claim that DII supports traits and concentrate on the support for interoperability with other platforms. I'd agree with this. I think simply removing the talk about traits from the proposal would help in getting it accepted by the community at large.
Thanks for the in depth explanation! I did try /u/dacopo answere and it seems to work fine!
“Official guidelines” apply to the common denominator, but certainly not to every situation. Structs have their uses. I’ve been using them more lately. 
But that's not very efficient, isn't it? I would do something like that: int i = (word.Length % 2 == 0) ? (word.Length / 2) : Math.Floor(word.Length / 2); int l = word.Length - 1; for (int j = 0; j &lt; i; j++) { if (word[j] != word[wl - j]) { return false; } } return true; Please correct me if I'm wrong, but I think you would save half the time, and space..
&gt;First, don't be naughty :) What I first thought when I saw this: What?...Ohhhhhh, duh. I mentioned that this code was from a key logger. Although a key logger is part of the functionality I'm looking for, I was more concerned with having an event handler fire for any key event. C#, to the absolute best that I can tell, does not have this functionality and caused me to look elsewhere. My first programming language was Java, where I tried for something similar. They make it nice and easy handling key events, but too bad Unity doesn't run on Java. Also, thanks for the explanation.
Yeah, that makes sense. Thanks.
When I first saw the object type of IntPtr, it was one hell of a concept to wrap my head around with no background information. This makes sense though. Thank you.
When you divide two integers, the result is an integer. Using floating point math isn't appropriate. The usual optimum solution compares characters at the ends and moves toward the middle until the indexes meet or cross.
Man, that would be nice to have.
Not in this case. If it's over 16 bytes or will be boxed frequently, you're losing any performance you thought you'd gain and are in fact hurting it. Mutable structs are evil, because as a value type the changes don't stick as one would typically expect, thus hurting readability and easily creates bugs that are nothing but headaches later on. Stop it. If you don't have a very concrete reason for needing them or don't have the benchmarks for it, stay away.
Lets say your wordlength is odd, then the division would be x.5. I only assured that the comparison only goes to the x-th char of the word.
3 / 2 = 1 in C#.
It just compares the first char with the last, then the second with the second last, and so on. Is it that hard to read?
Okay.. the more you know ;) I just typed that here in the browser, not tested..
No problem. Maybe OP can put that at the top of his interview questions....
 You are updating the same i variable every time you go in. The thread isn't executed until you call threads[i].Start below it. When you start to execute, you have now assigned the same variable on all the threads to 10, so all of them will have that same value. Save off the variable before passing it in. for (int i = 0; i &lt; numberOfComputers; i++) { int currentIndex = i; computerThreads[currentIndex] = new ComputerThread(computers[currentIndex], token); threads[currentIndex] = new Thread(() =&gt; {computerThreads[currentIndex].LookToUseToken(computers, currentIndex, random);}); //Action&lt;Computer[], int, Random&gt; a = computerThreads[i].LookToUseToken; //threads[i] = new Thread(() =&gt; { // try // { // a(computers, i, random); // } // catch (Exception e) // { // Console.WriteLine(e.Message); // Console.WriteLine(i); // Console.WriteLine(Thread.CurrentThread.Name); // } //}); threads[currentIndex].Name = currentIndex.ToString(); }
https://jeremybytes.blogspot.de/2015/03/lambda-expressions-captured-variables.html
Oh god
Is SSRS configured with the proper authentication and is an SPN setup for the server? https://docs.microsoft.com/en-us/sql/reporting-services/security/configure-windows-authentication-on-the-report-server
On https://www.bettercoder.io you have not just questions, but you can also predict questions by job ad, search by tag, experience level, fulltext, you can make your own lists of questions, generate questions randomly from your pool, make them as favourite... Did I miss something?
Yes, at a glance, compared to the code to which you replied.
Oooooh, I see. Thank you very much! :)
Great article. Thank you very much! :D
As an interviewer, I avoid these kinds of standard algorithm questions entirely. At least in their direct form. The main thing I want to find out in a technical interview is how the person _thinks_. I find it very effective to describe a problem to them in a non-technical way and let them talk me through and / or whiteboard everything from refining my intentionally-vague requirements through to design and implementation.
as far as I can tell yes, the problem I'm having is figuring out how to pass credentials. This post illustrates my problem well, but I feel like there has to be an easier way. https://www.joelverhagen.com/blog/2014/11/more-control-in-httpclient-redirects/
I think the *point* of these questions is to determine how adequate a candidate is at programming/problem solving... Not how adequate they are at memorizing the answer to a problem and regurgitating it. 
&gt;But as an interviewer, these things are the worst. Any widely referenced set of questions become completely unusable in an interview, since you never know if you're testing the candidate's skills or memory/study habits. If you hire the wrong person because you used interview questions you found online, I'd say that you got the candidate you deserved.
But OP is asking us to put our own questions online, which I will not do for risk of rendering them useless. 
&gt; Structs can be initialized without using their constructor(s). ...which also guarantees than an instance of a struct is never `null` as just declaring one without calling a constructor instantiates one with no values set on it.
If your car breaks down from engine trouble, are you going to be glad for someone to come stop to tell you your tires are low?
I mean I never said my code was perfect just that whether I use “Duration” on the exception or nameof has nothing whatsoever to do with the issue I raised in the first place. Also what difference does nameof make since it’ll just output “Duration” anyway?
Thanks, I will surely be checking this out.
&gt; Do not weep, do not wax indignant, understand. I’m not trying to be rude or some kind of asshole. Try to see it from my perspective. I present an issue that is actually preventing my website from running at all. Your suggestion to use nameof instead of a so-called “magic string” while certainly advisable and definitely good practice isn’t really any cause for concern at that point. So it’s not that I’m ungrateful or don’t appreciate your input; just that the suggestion doesn’t address anything that is anywhere close to being a cause for concern for me. 
You're better off randomizing how the answers are submitted. Keep the buttons the same, just process their inputs differently. 
Don't have a RadioRightAnswer, just do RadioA, RadioB, RadioC. Randomly choose which one will be correct, and assign the correct answer text to that button's `.Text` property. 
Im gonna look up how to do that tomorrow! Thanks for the advice
I am sorry but these questions don't seem to apply just to C# only. IMHO, the title might be more suitable if renamed to "Interview Questions implemented in C#". For "C# Interview Questions", one'd expect a list of C# language related questions. E.g.) 1. What's the difference between an anonymous function and a lambda expression? 2. How do you declare an event in C#? etc.
IDE refactoring tools will pick up on `nameof(Duration)`. if you made it a string literal and then later renamed the symbol, it would not rename that
What is WinPE?
Unless you're working on something like games in which you need to have tight control over allocation and the garbage collector, then you'll use structs a lot.
The largest group of complaints seems to "multiple inheritance is evil", followed by "I don't see the point" and (in distant third) concerns about the size and complexity of the language. I'm mainly worried about the problems for, say, unit testing if stuff like this is legal public interface INonVirtual { protected string ConnectionString&lt;T&gt; { get; } sealed void ExecuteQuery() { using (var conn = new SqlConnection(ConnectionString)) { using (var cmd = new SqlCommand("StoredProc", conn) { CommandType = CommandType.StoredProcedure, }) { conn.Open(); cmd.ExecuteNonQuery(); } } // or whatever. The point is that the interface now contains a method we cannot replace for any reason. } } because there's no way to override or reabstract a sealed method. Best we could do is hide it with new, but that's going to run into the problem that references to the interface type will still use the interface method instead of our not-quite-replacement.
Take the = out
https://stackoverflow.com/questions/5826649/returning-a-file-to-view-download-in-asp-net-mvc Or https://stackoverflow.com/questions/26038856/how-to-return-a-file-filecontentresult-in-asp-net-webapi 
Avoiding allocation is very common and standard practice when writing C# for games. C# libraries designed for games are usually built with "no allocation" as a requirement. It may not be an issue for UI and services, but games need to be architected with this in mind from day one. Refactoring out allocations can be a nightmare.
It’s funny because everyone says the same thing about every other part in C#. Don’t use this! Don’t use that! Well how about you shut up? How do you expect anyone to learn anything if everyone keeps saying don’t use that, use this? Where is that persons end goal if they are constantly being ridiculed for their design choices? You didn’t answer the OP’s question, but instead tried forcing him away. If C# was a food then there would be millions of flavors. Choose YOUR flavor and enjoy it while letting others do the same.
I think your use case is not optimal. As per Microsoft, Windows PE is not a general-purpose operating system. It may not be used for any purpose other than deployment and recovery ( https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/winpe-intro ) 
Yes, lol
That's the most complex way to do it. Can't you just use String.Trim() to get rid of spaces then reverse the string and if it's the same then it's a palindrome? 
thanks it has worked 
thanks it has worked
No they don't, is being told you should avoid structs that big of a deal to you? Looks like you get upset easily being informed of something. Sure, you could learn the hard way that using mutable structs are evil, or you're hurting performance by using them carelessly, or you could listen to others on best practices and more, why they exist. That is what these threads are for, learning. When and why to use structs is an important part of understanding structs.
Avoiding allocation again, can be done many ways. If you think just using structs everywhere is a solution... well, reread the part about the worst of both worlds. People writing performance critical code tend to understand benchmarking, re-read my first post. I've been in game development a long time. Even a decade ago on Java, gc was less of a problem than people made it out to be. Stop being prematurely afraid of it.
Read the first sentence of my first post. Then read the last sentence of my reply to you. I specifically, as well, identified the use for them, and quoted the individual guidelines for the conditions they should match. You get really upset at things you apparently can't bother to read critically. 
Specific examples *facepalm*
And running Doom.
I read perfectly clear. I’m not going to argue this anymore, it’s now gotten pointless. Have a good day.
”ref” is a thing, btw. There's multiple ways to avoid allocation, but if you're trying to avoid allocation and you ”basically never" use structs then you're doing something very wrong. I've been brought in to fix a lot of slow C# code, and it's almost always an overactive GC and one of the simplest solution is converting small classes into structs, and adding a few refs.
Sure you did, which is why it had no relation to what I said, really. It was pointless from your very first post, where all you had to offer was strawman arguments and ad hominems, and that never changed unfortunately. 
[removed]
But you're still sitting with a car with a broken engine that you don't know how to fix. The tires issue is nice to know about, but you have a bigger issue to deal with first.
Slow down with the LINQ. I don't think the program specification calls for anything dynamic. It specifically says the rank should be entered. This is just a class with two properties (a float and an int) that need to be entered, and potentially bounds checked. LINQ seems way out of scope for the challenge level of the assignment (understand basic inheritance and setting class property / field values) You'll overload the poor guy early!
Enter a [Game Jam](https://itch.io/jams). You'll fail (lolz), but you will learn a whole lot when you concentrate on a game for that week/day. Don't make excuses to yourself if it proves difficult to start, you don't need a designer, you don't need an audio guy, just plough on with all your worth on a simple premise like copying the first level of Super Mario Brothers, or the first map on Doom. This will learn you valuable lessons in coding, namely "just doing enough". This lesson then leads you toward a iterative approach in game development, which is what its all about. 
wut
My 2 cents: It's a cool idea, but it's still highly a experimental project targeting a not-finished platform yet (webassembly) so I wouldn't dare betting anything on it yet. I love the idea and I wish it all the best, but I think the current hype around it is at best overly optimistic and at worst outright dangerous. There's been plenty of attempts of making this type of idea work before and most of them has been at best decent. Now, you might argue that almost all has targeted [source language -&gt; javascript] instead of [source language -&gt; wasm] and this means that blazor is an entirely new beast, and you would be right. However this does not speak in blazors favor, since this means that blazor has less history to look back on and learn from and thus the team behind it will probably make _more_ design mistakes because of this. This is in no way a criticism or vote of no confidence of the team or the project, it's just an observation that they have less past things to learn from. (And of course, with design mistakes comes either eventual breaking changes, or living with old crap forever.) I would not recommend anyone to plan for using this in production anytime soon. Javascript aint going anywhere, and even when this is released in a somewhat "stable" format I would still be very careful about introducing it. There are plenty of good options available and production ready _today_ if you do not want to use javascript. For example if you want to write your code in a .NET language, the Fable (http://fable.io/) project is awesome, stable and is used successfully in production in a lot of places, has a very active community and is built on a ton of previous experience from compiling [source lang -&gt; javascript], and in my opinion it's a much safer bet than blazor _currently_ (which may change in the future depending on how the blazor project and webassembly in general progresses). As said, Im not saying that Blazor sucks and you shouldnt use it ever. Im saying that you should be careful to not hype yourself up too much on an early version of a compiler targeting an early not-really-stable target, even if it has the official microsoft blessing. :) 
Continue execution? If not, then what are you hoping to do?
Note that this is a “bug” in C#, which was fixed for foreach some versions ago, but deliberately left alone for for loops. Fear of regressing existing code, perhaps, but I honestly don’t understand why they don’t fix it.
my computer crashes and my application automatically went into break mode. clicked continue, and my program doesnt appear but it continues to run. ps. i am new to Visual Studio/ C#.
&gt; targeting a not-finished platform yet (webassembly) Why is WASM not finished? &gt;this means that blazor is an entirely new beast, and you would be right Why is transpiling to Javascript (readable or not) different from compiling to WASM?
How do you like my multiplication table? https://dotnetfiddle.net/DUEyW9
Try any of the following to stop debugging. * hit the stop button (red square) on the toolbar * hit Shift + F5 * Select *Stop Debugging* from the *Debug* menu. Note that this should stop your program, so you'll have to restart your debugging session in that case.
&gt; Why is WASM not finished? Yea, sorry, Im wrong here. According to webassembly.org WASM is no longer in "browser preview" since March 2017 so I'm way off here and a year behind on my data. With that said, I think it's still pretty safe to say that what is out in the browsers is still pretty new and still missing a good amount of stuff that will be added later. &gt; Why is transpiling to Javascript (readable or not) different from compiling to WASM? Because javascript is not WASM? WASM is a pretty different beast compared to javascript with a different VM. A transpiler transpiling C# to javascript would look different from a transpiler transpiling C# to erlang because you would emit different code to take advantage of different things in the target language/vm/environment. Javascript is a known target where there is a lot of experience out there in what is a "good" target to transpile to (both code-wise but also VM-wise) since people have been doing this for years and years and years with different source languages and there's a ton of people out there that knows the ins and outs of what works well on a javascript VM and what works bad. For WASM there's just less experience out there so far since it's only been out of browser preview for a year. And also, given the pretty large and extensive feature list of Post-MVP stuff that WASM have on its homepage it's certainly not impossible that the stuff that works well on a WASM VM today may not work as well in a year or two when we start seeing a lot of these things arriving in browsers. As said again, Im not saying that WASM is bad. I'm not saying that you shouldnt be transpiling to WASM. (Tbh, quite the opposite, I want to see WASM as the default target to transpile to) I'm saying that when writing code for work and/or planning out which direction to take your companys development in in the future blazor and WASM is still very young and may both be going through several iterations before ending up in a stable state, so they're great techs to keep an eye on but be careful of introducing them too early into your production code. Basically: think and evaluate risks before leaping on something new and cool, as with _any_ new technology really.
there was no error message, but the program wont add or edit the input into the access database
It looks pretty cool. I watched the next ~10 minutes of this: https://www.youtube.com/watch?v=MiLAE6HMr10&amp;feature=youtu.be&amp;t=31m45s Seems to work pretty well. I'd be interested in adding some Blazor pages into an existing MVC/Web API site, so I'll probably look into that soon. 
Redirecting to elmah.axd still didn't authenticate me, but I didn't expect it to. It's alright though. I've decided to point to the same DB in debug and release mode, so when I want to view the Elmah page, I'm just going to debug the app instead of connecting to the production version.
Structs in C++ and C# are different. In C# they are value types, which affects memory allocation; but in C++ they are just classes with public members by default.
EF has a wizard when you use it that helps you with these steps. 
I think you answer your own question about what the point is when you mention angular2. I think its easy to see that angular2 was pushed mainly because of its large backer and right now you are basically saying the same about blazor (it will be invested in because it furthers microsofts goal of getting everyone on azure etc). Let me ask you this, imagine that this project did not have microsofts backing and was made by a relatively unknown oss dev? Would you feel the same way about it as you do now? Of course it can be great as a learning experience etc, Im not saying anything different. Even though you seem to think that I want to spread FUD about blazor that is not my intention, Im not the anti-blazor/wasm person you seem to think I am. The reason Im saying the "obvious" thing ("dont put experimental things in production and dont expect all experimental things to eventually become stable") is because I feel that right now the hype around blazor is pretty much the same as the hype was around angular2. And thats not a good thing neither for the project itself nor for the people who wants to use it. What Im trying to say is "be careful and dont bet your car on this", not "it sucks dont use it". Its crap that I have to say it, but Ive seen and heard plenty of people talking about this as if it was already stable and production-ready...which says something about the dev community at large. I even had a dev at my company suggest using blazor instead of javascript in production. So yes, that is the point. You and I may know to be careful and it may be obvious to us, but sadly its far from obvious to everyone out there.
as for why the doubts about wasm, Ive already admitted that I was wrong about it still being in preview - I could edit my original post to reflect that but then I feel like Id be altering the history of this discussion which just looks bad :p
There's always [msdn](https://docs.microsoft.com/en-us/aspnet/web-api/overview/advanced/calling-a-web-api-from-a-net-client)
If you remove the Microsoft logo and .net runtime support, you have the Emscripten WASM compiler. Which, personally I'm stoked about WASM in general, so, yes I would feel the same way. I think the rest of the discussion is fighting over common ground. I realize that it's frustrating to have to be the one to pull the reigns, especially on ridiculous stuff like putting alpha frameworks into production, but I've found it's easier to maintain expectations when you can demonstrate enthusiasm. I'm pretty passionate about what's in the works with WASM in general, and what the technology has the potential to offer. Don't use it in production right now, that's just crazy talk.
Yea, I think we are probably pretty much on the same page. Im also pretty stoked over WASM and Ive been that for many years now (the day I can finally get rid of all crappy JS it will be free beers for everyone). I'm just slowly turning into that grumpy lead dev who is forced to tell people that they cant switch every single framework in production to the new shiny thing that was released yesterday just because someone said it was awesome on youtube/twitter/reddit, maybe I should go out and get some sun and fresh air for a while instead and I might cheer up. ;)
Stepping away for a break never hurts :) It's a natural instinct to look for an easy cure for frustrations. Everyone wants to invent the flux capacitor, no one wants to hook up the DeLorean to the clock tower. 
I was really impressed with Visual Studio integration out of the gate. Though the feature set is limited, editing a Blazor template is a much better experience than editing React/Vue. Can't wait for live reloading. JavaScript interop is going to be crucial in the early stages. That's what makes [fable.io](http://fable.io) so appealing -- you get to (easily) use all the awesome stuff that already exists. Until it can handle *any* browser interaction, Blazor is going to have to allow us to use existing JS libraries.
I would not wait to start working with a language until you feel you have all the best practices under your belt. That seems like cargo cult programming. Just get out there, write some code, and learn from some of your mistakes.
Yes, I should have been a little more explicit--you really need to write a method that returns elmah.axd as text, rather than an actual redirect. Glad you came up with a workaround, though!
Right, thanks, I see what you mean. I don't have any experience with .axd files, and couldn't find where it was stored, and I'm still not really sure how that page works. Apparently it's a generated file.
I will admit I am getting a bit "beyond confused" with where we are headed with WebASM, and I've been a .Net developer since beta in 2000. I have no problem with it conceptually, but I am failing to see where it is going to *lead us* in general. It seems to enable almost a internet-based runtime that will allow native desktop applications running on any given platform in any given language. That's certainly interesting but when "view source" becomes a binary string, and there are no UI standards ... it's not quite Java or Silverlight but at the same time it's actually more than that. If I thought the current front-end landscape of JavaScript frameworks was daunting on the surface, this is surfacing something else entirely.
Yes, each error logged by Elmah is stored as an individual xml file in the app_data directory of your project (Elmah will create this folder on app startup if it doesn’t exist). It then simply reads the xml files and generates pages based on the data contained within. It’s worth mentioning that when the number of files in the app_data folder start to reach the 10 to 100s of thousands, Elmah suffers from severe slow downs on read and write that can cripple your application, so be sure to manually clear it occasionally.
Bad abstraction in a particular framework shouldn't dictate the design of the language.
I feel it's a strong take on web assembly from microsoft. I am used to programming in c# (coprporate environement) and js with npm/webpack, but blazor make the "one language" solution thing look very tempting. I am eager to see where it goes. 
I feel it's a strong take on web assembly from microsoft. I am used to programming in c# (coprporate environement) and js with npm/webpack, but blazor make the "one language" solution thing look very tempting. I am eager to see where it goes. 
I think this may answer your question: https://stackoverflow.com/questions/7211571/interface-instantiation-vs-class-instantiation
You don't instantiate an IEnumerable. You instantiate a class that implements IEnumerable. For example, you can do this: IEnumerable e = new List&lt;int&gt;(); The generic form is preferable, though: IEnumerable&lt;int&gt; e = new List&lt;int&gt;(); Note that IEnumerable and IEnumerable&lt;T&gt; are not the same interface. IEnumerable&lt;T&gt; derives from IEnumerable (every IEnumerable&lt;T&gt; is an IEnumerable, but not vice-versa). The generic form is in System.Collection.Generic.
Ahhh, thank you. I think I’m getting this now. Also, I didn’t know that you lose functionality when you define the type as an interface to only be the implementation.
What type is the base IEnumerable (non generic) and how can you have an interface that inherits from another interface?
Type type of "IEnumerable" is "System.IEnumerable", and yes: interfaces can inherit from other interfaces.. it just means the inheriting object must implement all methods from both.
I'd prefer if (a == null) throw new ArgumentNullException(nameof(a)); over if (a == null) { throw new ArgumentNullException(nameof(a)); } But I think your decision of hiring someone or not based on their formatting style is ridiculous. Even more so considering they'd probably have to conform to the team code style anyway.
I'm sorry, which of the guidelines does DateTime break?
Removed: Rule 3, spam.
https://www.reddit.com/r/csharp/comments/87imqg/help_me_understand_asyncawait_a_little_better/ Does this thread on StackOverflow help? The basic idea for async / await is that they are keywords that set up threading code for you. You could do it manually, but why not do it with less code? Foreach loops are maybe a good example. You can achieve the same thing with iterators, but writing a foreach statement is typically quicker and requires less code. You sacrifice some control you have with the manual way, but often you don't need that functionality. 
There are two types of long-running processes: those with high CPU, and those with low CPU. If you've got high CPU, you can run that work on another thread so that you don't block the UI. If you use Task.Run, you can await the result. e.g. await Task.Run(...) This executes some work on a thread pool thread, and the calling thread will wait asynchronously for it to complete. This means the calling thread can wait without being blocked, like it would be if you spawned a thread and called Thread.Join(). When waiting asynchronously, the thread is free to process other things, like the UI, and responding to button clicks. If you call the above Task.Run code on the UI thread, you can still process events, and the UI can still be redrawn, whilst waiting for the result. Alternatively, if you have a low CPU workload that takes some time, typically due to the disk(s), you can await things without involving more threads. There's no need for new threads in this type of workload because the CPU is chilling, but dealing with the disk can still take some time, and whilst waiting for that, the calling thread is blocked. When you await disk operations, like reading a file, the calling thread is free to do other stuff and is notified when the disk is ready. It has the potential to be single-threaded. Awaitables return Tasks, so you can only await something that returns Task or Task&lt;T&gt;. 
You seemed to have pasted the link back to this thread, instead of one to StackOverflow
Oops, thanks!
Well, the UI is still very much HTML. And view source has been dead for a while for the most part due to minifiers, transpilers, etc. You can't really get a look at the javascript on any major site any more.
"Ref" is a thing. And the primary reason you'd want to use it, is if you were breaking the guidelines. I'm not sure how it magically deals with what I said. You don't seem to actually be dealing with anything I Say, at all. I don't give you much credence in your claims. Not only do I not trust you're just brought in to fix a lot of slow code, I don't for a second trust you to give me an honest interpretation of what must be done. Especially with what you've said, doesn't make sense. Overactive GC doesn't just happen. It tends to be an indication of an algorithm problem especially around collections. As such, because structs aren't free, you didn't fix the problem. You switch everything to structs? Suddenly you have a memory problem. If the class doesn't follow the guidelines like about size, you didn't improve performance, you made it worse. In fact, short lived small objects would be a generation 0 gc. And generation 0 gc is incredibly fast and unlikely to be an actual culprit. Giving you the benefit of the doubt, an assuming you really do this all the time, I'd presume you do this thinking it's getting you better performance, then fix the actual issue plaguing the system and conflate the two. You seem to have a huge resilience to benchmarking. But if you are brought in to fix a lot of slow code, that's the very first thing you should do. And if you had the benchmarks... well, here comes the question, are you even bothering to read what I'm saying, much less understand it?
I want to chime in here, because my job is to train people who have no experience of programming. I run a two-week course, followed by gap of a few weeks, followed by a 3-week course, which introduces my students to the basics of programming. In those 3 weeks, people who have never done any programming before will understand a good portion of what I teach them, but will still struggle to put much of it into practice. What I then tell my students to do is to practice, practice, practice, every day. At the end of a year-long apprenticeship, those who have practiced regularly are usually pretty good programmers (but the learning certainly doesn't stop after a year-long apprenticeship - I've been programming, on and off, for over 30 years, and I'm still learning). The ones who do nothing other than what I teach them in the classroom over those 3 weeks will still not be able to put most of the theory into practice. So when you say you're lost after a week and a half - I say I'm not at all surprised, I'd expect you to still be very much learning the basics, and I'd encourage you to make sure you're not trying to run before you can walk. Good luck!
There have been a ton of improvements to the framework since this talk as well. It's been really cool to watch this turn into a hobby GitHub repo on Steve Sanderson's account with PR's that lasted for weeks without response from him to a fully fledged, backed by Microsoft repo. I haven't toyed around with it since they added in the JavaScript rendering engine late last year, because it was way too rough and low level for me to sit down and understand. I've been meaning to revisit it to see if they have cleaned it up at all.
Are you honestly asserting that ref is only used if you're breaking the rules? And not once did I say anything against benchmarking or profiling. Your assertion that structs should never be used in C# has turned into ad hominem attacks, so I'm out. Have a nice day.
Have you tried any of the converters Google spits out, when you search for this? What problems did you run into?
"Primary reason"... Yes, it's the primary reason. If your object isn't big or mutable (both against the guidelines), what other reason would you use ref? How is it even relevant to the conversation otherwise? As I just said, you aren't bothering to actually read what I put. &gt; And not once did I say anything against benchmarking or profiling. But you keep ignoring it, and how I specifically highlight if you got the benchmarks and find struct is valuable, well, struct away. Which brings us to this strawman, proving you aren't reading what I say: &gt; Your assertion that structs should never be used in C# There was an adjective attached to "never" in my first post that changes the meaning behind it. If that a big enough clue, I immediately talked about when structs are valuable to use, and then I gave the guidelines that should be followed when using them. So... you haven't been reading what I said, nor dealing with them. You weren't ever "in" to begin with.
SharpDevelop is named on multiple SO Threads for converting full projects from VB fo C#. Tried that out yet?
Maybe you’re being crawled in an attempt to use exploits based on the successful URL? The bot is making http requests and when it gets a 200 response it knows what platform the site is built on, it then moves into trying platform-specific exploits I noticed that a lot when watching over Joomla sites years ago. The bots would crawl for components / plugins that didn’t exist or call random URLs via a query string when the site had been configured to always hide them.
Classes implement interfaces.
You don't really *lose* functionality. This is what polymorphism is all about, really. When you use polymorphism, you are, in essence, saying "these are the only members of that object I care about". For example, if you write a method that takes an `object`, you are telling consumers of that method that the method only needs the members of type `object`. Unless you cast that object to something else, you'll only be able to see the methods GetHashCode, ToString, GetType and Equals. When your method takes an interface like IEnumerable, you are basically saying "I don't care how the object implements IEnumerable, it just needs to implement it" and "I am only going to use the members that belong to the IEnumerable type". &amp;nbsp; At this point, it gets you into ideas like loose and tight coupling. Methods, constructors and properties that take interfaces or abstract classes as parameters allows for looser coupling and introduces the idea of "coding to a contract". As long as objects abide by your contract by implementing the interface you need, you achieve loose coupling and aids in writing self-documenting code. The goal is to achieve code *modularity*, where swapping out entire modules become easy. Couple polymorphism with IoC and dependency injection and you are banging on all cylinders. This loose coupling also allows for an easier time writing unit tests. In fact, if your coupling is too tight, writing a unit test becomes impossible and you end up writing an integration test.
Someone's knocking at the door to see if you left it unlocked. At previous jobs, we had to block entire countries because they were taking up so much bandwidth &amp; CPU with the constant attempts to get in. 
As a side not, you should (almost) never use IEnumerable. Instead use IEnumerable&lt;T&gt; where T is the type in your list. Even IEnumerable&lt;object&gt; is better than IEnumerable in the vast majority of cases.
Do you know what time and space complexity is?
I occasionally found that taking the assemblies from VB.NET, open them up in DotPeek/Reflector, export them as C#, then use R# to reformat everything gives a decent *starting* point for fixing things manually.
Done this at a similar scale. vb6-c# and vb.net c#. We farmed it out to a consultant who helped a small internal team. It was surprisingly painless, I suspect due to their domain knowledge, so definitely hire that in. 
you don't need to do any division. you can also strip out all non-alphanumeric characters to be sure. bool IsPalindrome(string x) { if (string.IsNullOrWhiteSpace(x)) { return true; } var cleaned = new string(x.Where(char.IsLetterOrDigit).ToArray()).ToLower(); var j = cleaned.Length - 1; for (var i = 0; i &lt; j; ++i, --j) { if (cleaned[i] != cleaned[j]) { return false; } } return true; }
Uh, i = i+1; and i = i++; are very different operations under the hood. In the first case, you are adding 1 to i, then assigning the result back to i. The compiler can easily optimize this into an increment instruction. Which is why you see this: 02D0047D inc dword ptr [ebp-40h] In the later case, `i = i++`, you are using the postfix `++` operator. This will store the previous value for i before incrementing, then return it. Then you do an assignment, (redundant I might add and gives you the wrong value) static void Main(string[] args) { int i = 0; i = i + 1; int x = 0; x = x++; Console.WriteLine($"i: {i}, x: {x}"); } will give you `i: 1, x: 0` since you don't care about the original x value, the more accurate comparison would be static void Main(string[] args) { int i = 0; i = i + 1; int x = 0; ++x; Console.WriteLine($"i: {i}, x: {x}"); } which then gives the following in the disassembly: int i = 0; 02DB047D xor edx,edx 02DB047F mov dword ptr [ebp-40h],edx i = i + 1; 02DB0482 inc dword ptr [ebp-40h] int x = 0; 02DB0485 xor edx,edx 02DB0487 mov dword ptr [ebp-44h],edx ++x; 02DB048A inc dword ptr [ebp-44h] i.e. the resulting instructions are identical. 
Does this help? https://stackoverflow.com/questions/36893433/save-response-as-file 
I try to build stuff i will use. Started with some file management scripts running on a schedule then started sending myself and coworkers a daily quote. That started off a text file, then moved to a local sqlite DB and then put it on a server and finally built a mobile app in xamarin using c #. There's a few projects on GitHub that I would suggest but I'm on your phone. I'm only interested in them because I use those projects, to my first point. I hope that helps.
Break down the strings to word then check them? Doesn't really take that much time to
I know this doesn't directly soflve your problem but VB.NET assemblies can interop with C# assemblies as they both produce the same bytecode. You could start by building new components in C# and leverage your existing VB code.
&gt; And at that point, what is the "point" of the browser at all? Same thing it is today, a cross-platform application execution engine specializing in safely running code delivered through the network. It's simply gaining support for languages beyond javascript.
Thank you for your response! A year ago I tried making an app, and now it's on the play store! https://play.google.com/store/apps/details?id=uk.stephenbrown.voiceapptest Not the greatest design skills back then :( I like the idea of file management scripts, I'll try making one!
ah yes, that sounds nice. Didn't know that the part with --j worked.
2 million lines of VB.NET? That's an very large amount. I'd strongly recommend *against* automated tools at that scale; that generated code is written by robots rarely understandable. I'd start by questioning if such a drastic move is necessary. There's plenty of skilled VB.NET developers still and it's still an actively maintained language. I've dealt with team migrations from VB.NET on the scale of tens-of-thousands of lines of code, and in those situations our go-to solution was to build a suite of integration tests around the product and then completely rewrite it in C#, maintaining the ability to pass the integration tests. That way we can put well thought out solutions in place while ensuring that we're not changing system behavior. 
Assuming your dataset isn't large enough to kill a user's browser, https://www.datatables.net/ is a pretty easy plug-n-play way to throw natural table features on there. It's not the prettiest, but it's enough to get going. 
Check out http://up-for-grabs.net/#/ Also I found that the more I used open source libraries, I would find things I thought would improve it, I talked to the teams usually via a git hub issue and a few times they agreed and just said submit a PR. This is how I ended up contributing to the SignalR library which I was pretty proud of. 
While I am just kinda of re-hashing other comments. I do want to know if there is any practicality of doing: i = i++; VS i++; Because I cannot think of a situation where I would ever use the first one.
Woah that's awesome! Thank you for sharing, definitely will use this :) 
So in effect, Console.WriteLine is slowing the function down. Makes sense, doing a System.Threading.Thread.Sleep(1000) makes the code start breaking again. 
Bingo.
Why not just have the O/S be able to run WebASM ... that makes the browser redundant. 
2 million lines? That suggests to me that the code is of a very poor quality. Step 1 is to do extensive dead code analysis. Go through every module and delete anything that isn't actually being used. Step 2 is to review the project structure. Break it down into small projects that are tightly coupled internally. Step 3 is to restrict accessibility levels as much as possible. Make sure nothing is marked `public` unless it absolutely has to be. The better job you did in step 2, the more you can lock down in step 3. Step 4 is another round of dead code removal. With most of the code marked as `private`, you are likely to find even more code that can be removed. Step 5. Look for unnecessary things to remove such as interfaces that only have one implementation or abstract classes without only one subclass. I've seen projects dramatically increase their code size and maintenance burden by over-used interfaces. Step 6. Dead code removal again. Really? Yes. Because you will have a lot of methods that aren't actually used, but exist solely to satisfy the interface contract. Step 7 is when to start converting each small project into C# one by one. Honestly this is probably a waste of time as there is rarely a reason to not mix C# and VB projects. But since that's your goal, this is the time to start doing it. **** I need to warn you against skipping steps. Lots of people are going to tell you to just right in with the C# conversion. That's a recipe for a lot of wasted effort. You'll find yourself converting and testing code that is not only unused, but may have never worked in the first place. It's like moving. You don't start by packing all of your trash along with your clothes and dishes. Discard the trash first.
Thanks, I'll check those out. 
&gt; Why not just have the O/S be able to run WebASM Why not just have the O/S be able to run HTML/CSS/JS? 
You're welcome. BTW I forgot to mention, some C# database drivers ([such as Oracle's](https://stackoverflow.com/questions/29016698/can-the-oracle-managed-driver-use-async-wait-properly)) will expose async methods that aren't really async and will block your thread (and thus the GUI's event loop). So if you're doing async DB calls, and its still locking up your GUI, that might be why.
ASM is there for a reason.
&gt; You don't really lose functionality. This statement comes with a huge asterisk. Going from a `List&lt;T&gt;` to an `IEnumerable&lt;T&gt;`, you lose the `Count` property. Granted, you could say that comes from the `IList&lt;T&gt;` interface, but I think it's still something to be aware of.
Javascript gets JIT'd to ASM by the browser. Do you have the same problems with python because it's interpreted? What about Java where all code goes through a big fat runtime in order to get executed? My point is that HTML is code. CSS is code. Javascript is code. The browser is already an incredibly sophisticated execution engine for code. It's not that different from a JVM. Nobody is troubled by the idea that the JVM runs multiple programming languages, so what's so different about a browser?
Egyptian Hieroglyphics are code. What isn't "code"? It's getting twisted in an interesting way. 
IMO, take all Console.Writeline's out of the class to keep separation of concerns and call Console.WriteLine(circle.countArea()) in Main.
IEnumerable is just an interface, and an interface is a contract promise that any class that inherits that interface will promise to implement it's methods. When a concrete class implements an interface it's signing a contract for as long as it inherits that interface. Some other collection types also ultimately end up inheriting IEnumerable, such as IList&lt;T&gt; which inherits ICollection&lt;T&gt; which inherits IEnumerable&lt;T&gt; Interfaces allow you to follow the dependency inversion principle of the SOLID set of principles. Meaning I would expect a constructor for example to take IEnumerable&lt;string&gt; rather than List&lt;string&gt; for example. This aids unit testing and mocking 
But the funny thing here is that the console does respond to my sendkey command, just not when its asking for a password.
Burn it down and start again. 
WTF! xor is exclusive or, the guys knows nothing!
He also mixes up the operands order for the `mov` statement. &gt; The next instruction is mov, and in this case it simply moves the contents of a double word sized pointer into a register. Its actually the other way around. The compiler is using `xor` to zero out a register, then its moving that register value into the memory location.
As an aside, a benefit of using an IEnumerable as a parameter to a method is generalisation. If the underlying type is a list or an array, then param.Count() will call array. Length or list.Count. There are also pitfalls. If the IEnumerable is not in memory (its underlying type is not a concrete memory block like a list or array) then Count() or ToArray() or ToList() will go through the entire collection. This has performance implications if your IEnumerable count is huge. 
This makes everything a lot more clear! Thanks
&gt; Look for unnecessary things to remove such as interfaces that only have one implementation or abstract classes without only one subclass I typically have a few 'extra' interfaces in my projects that some would call superfluous, but I agree wholeheartedly here. At 2M lines of code, this is officially 'mature code' if not 'legacy' - if those interfaces were needed for new features, they would have been used in multiple places by now. This is very good advice.
I guess it is a matter of symantecs, really. In one sense, you do lose functionality because the interface doesn't have a member. In another sense, functionality is only hidden. In yet another sense, you only see the functionality you need. I think all of those equate to the same meaning, but "losing functionality" doesn't seem as accurate because using an interface, IMHO, should imply "this is all I care about". Interfaces are, in a sense, functionality filters. In my mind, saying that we "lose functionality" is like saying that spending money is to "rack up opportunity costs" or that painting is "defining what isn't pictured".
Could be a bad guy running a vulnerability scan. Trying to work out what frameworks infrastructure etc you are using.
I believe when an interface 'inherits from other interfaces' this is called 'extending', and when a class 'inherits' an interface this is actually called 'implementing'. You may already know this and are just using the language OP used. 
Do you have to use DataContractSerializer or can you use XmlSerializer? This might help... https://stackoverflow.com/questions/13704752/deserialize-xml-to-object-using-dynamic
My favourite project was an app that went through all the betting pages on oddschecker.com, which is a sports betting website that showed you the odds all the other betting websites were offering for different sports events. The project would first start on the homepage and then find all links, then follow all those links and get more and more links until it had found pretty much all the current events with odds shown. Then for all those pages it would analyse the odds being given by all the different betting sites to see if it was possible to lay on 2 or more results for a guaranteed profit. I tested it by creating accounts on all the main betting sites and starting off with £100 pot. I kept going and going until I got to about £400 over the course of about 3 weeks. Then a few of the betting sites banned me and others reduced my maximum stake. They reserve the right to ban you for any reason they see fit. I guess they had software which analysed the sorts of bets I was making and classed it as odd behaviour. For instance one night I would be betting on NHL odd/even goals, then I would be betting on a Chinese youth tennis match at 3AM. I had to call it quits but I am pretty proud of it. I look at it now and wince a bit at the monolithic classes I made and my inefficient attempts at asynchronous code in Windows Forms (didn't even know about async/await at that point) . But ultimately it worked and it worked well. I showed the project to the head of R&amp;D at the company I work for and a couple of months later I got my dream of being a professional developer, so that was the real amazing thing that happened.
I tried doing something like that, however I never figured out how to precisely parse data. Say if my website had : &lt;p&gt;evolveiscool&lt;/p&gt;, I would try to do something like Var _client = new WebClient Using (_client) { var uri = Download(websiteadress) } Some suggested HMTL agility pack, except I have no idea what child's and nodes are. I could use regex to rip out the &lt;p&gt; and so on, but it's really Innificiant and causes problems
I like to think of it like this: await cuts your method into two methods ... the part after the await is basically an asynchronous callback. The thread that called await is not blocked waiting for the result of whatever you're doing in there.
gods. Reading this after I was thinking to myself that it sounds like fun. I am actually that weird type of coder that likes to refactor old code and make it gooder.
Just how many different solutions and projects are you seeing? I'm assuming it's not one big giant project with a million lines of code.
Forget regex to parse html, htmlagilitypack is the way to go.
Yea, I don't want to be obsessive about "at least two implementations per interface". But on the other hand, I'm currently on a project where every class, even simple DTOs, have a matching interface. And many of them have several interfaces.
Same here. I love seeing huge files shrink. Especially when I have a good set of refactoring tools.
Here is some better code: class Program { static void Main(string[] args) { ValueHolder.Initialize(); int fromAdder; int count = 0; var fromSafe = Test&lt;SafeAdder&gt;(); do { fromAdder = Test&lt;Adder&gt;(); count++; } while (fromAdder == fromSafe); Console.WriteLine("Not an infinite loop!"); Console.WriteLine("Iterations: {0}", count); Console.WriteLine("Adder: {0}", fromAdder); Console.WriteLine("SafeAdder: {0}", fromSafe); Console.WriteLine("Expected: {0}", 10 * ValueHolder.Values.Sum()); Console.Read(); } private static int Test&lt;T&gt;() where T : IDoTransactions, new() { Thread[] threads = new Thread[10]; T dep = new T(); for (int i = 0; i &lt; 10; i++) { Thread t = new Thread(dep.DoTransactions); threads[i] = t; } foreach (var thread in threads) { thread.Start(); } foreach (var thread in threads) { thread.Join(); } return dep.Value; } } public static class ValueHolder { public static int[] Values; public static void Initialize() { var l = new List&lt;int&gt;(); var r = new Random(0); for (var i = 0; i &lt; 1000; i++) { l.Add(r.Next(1, 100) - 50); } Values = l.ToArray(); } } class Adder : IDoTransactions { private void Change(int amount) { Value += amount; } public int Value { get; private set; } public void DoTransactions() { var l = ValueHolder.Values; foreach (var i in l) { Change(i); } } } class SafeAdder : IDoTransactions { readonly object _lock = new object(); private void Change(int amount) { lock (_lock) { Value += amount; } } public int Value { get; private set; } public void DoTransactions() { var l = ValueHolder.Values; foreach (var i in l) { Change(i); } } } internal interface IDoTransactions { void DoTransactions(); int Value { get; } } The only difference between the two classes here are the lock statement (and technically the lock field). Consistently this only needs one iteration for me to output something like: Not an infinite loop! Iterations: 1 Adder: -1712 SafeAdder: -7590 Expected: -7590 (the value from Adder is different every time) The reason this fails is because sometimes a thread is reading a stale value from the `Value` property as another thread has already updated it with a new value if you don't have the lock.
One [good] language. /s
If you want to get a real grip on Async/Await this book is the one to read: Async in C# 5.0 https://www.amazon.co.uk/dp/1449337163/ref=cm_sw_r_cp_api_MlSUAb9XBDZDH It’s concise, short and very well written. I recommend it to all my team members.
No offense mate but I think you couldn't be more wrong. JavaScript is by far the most popular language being used today, and has been for the past 6 years: https://insights.stackoverflow.com/survey/2018/#technology-programming-scripting-and-markup-languages Personally I'm more interested in using the best tool for the job than having a one solution fits all approach. 
 interface IFigure { double Area {get;} double Perimeter {get;} } class Circle : IFigure { //Do circle stuff here } public void Main() { IEnumerable&lt;IFigure&gt; figures = GetFigures(); foreach(var figure in figures) { Console.WriteLine(figure.WriteLine(figure.Area)); Console.WriteLine(figure.WriteLine(figure.Perimeter)); } } private static List&lt;IFigure&gt; GetFigures() { //Build a collection of figures here. } Implementation left to the student. Feel free to ask questions if this doesn't make sense.
No. This most certainly does not compile, even with just an eye test There's a declaration of a variable in one method that's attempted to be used in another, but variables aren't global like that.
Thing is that you are not using the best tool for the job. Just the most common. 
Nah man. Don't start with extension methods and LINQ, if the absolute basics of OO are not thoroughly cemented and clear. This will just end in drama and multiple enumerations of Enumerables 😆.
Think of all those innocent CPU cycles that are being burned... 😭
Probably some random hacker/botnet. All of my sites get hit for PHP admin pages, probably another known vulnerability.
`Console.WriteLine(area);` won't work in `printArea` because there is no variable called `area` in scope there. You can instead call `Console.WriteLine(countArea());` since `countArea` returns the area it computes.
I can only think of one class of objects that should always have their own interface... data repositories. The second implementation will be a sample data source in your testing projects. 
If you want to stop debugging but not your program, there should be a "Detach All" option on the Debug menu which stops the debugger only.
No love for Nunit tests?
By this line of reasoning we could also state: The most popular music the best music. JS is wildly successful because it has been just about the only thing enabling client side programming for web applications without plugins. It is a workable solution. I had my fair share of JS and PHP back in the day and it was a glorious experience that allowed me to get shit done. You know, way back then when table layouts were cool and later, when the first JS-animation and Ajax stuff was bleeding edge and we had to CSS float all the things. And when we finally had JQuery and usable MVC frameworks for PHP the world was good. I didn't hate it. I mean I didn't know better. Then I went into C#/WinForms and felt like an idiot and everything felt so unwieldy and slow. But that is the process of learning. And once you know clean OO, TDD, develop good style and use sharp tools... you don't want to remember if it was strlen() or str_len() in PHP and working without a strong type system feels unnatural and unwieldy. To be honest: I still don't hate JS. And I don't get why people are talking down to JS users that much. But I guess this is where we come full circle. Jazz players also think their music is superior to popular chart breakers. In the end I guess it is a matter of taste and more choices for client side development can only be a good thing.
NUnit and MSTest are brothers from a different mother. NUnit is better maintained though. Both suffer from a large amount of verbosity. XUnit has a terse api, but it isn't as structured. My favorite is Machine.Specification. It makes heavy use of lambdas, but the tests are terse but still structured. It's an outlier and it's not seeing as much maintenance. 
Has it been updated? Last time I touched it it was woefully out of date. I used xunit for a while but have been using MSTest recently. As its matured it has become much more capable and does not suffer from all the issues it used to. 
Very true. My current boss loves to refactor too. We call him Mr. Refactorman, but it's mostly because he'll refactor code you've not even finished writing, without checking that everything he's changed even works. Very frustrating. He'll regularly do this on a weekend, then send me an email sunday night, leaving me dreading the morning. Sure enough, I log in and I have to spend hours figuring what got broken. Even more fun is when he refactors something that seems to work but now has caused a weird issue somewhere else that he ends up logging as a bug for me to fix! It's harder to automate testing that kind of thing but it's not so bad for auto controller tests at least.
I used to be an NUnit fan but when I looked at the project a few years ago it seemed to be languishing (maybe it moved in that time and I missed it). I see 3.0 on git seems to have a lot of love, might check it out. 
I prefer NUnit due to its more fleshed out TextContext compared to MsTest. There just seems to be a lot lacking from MsTest that I find in NUnit. I like to publish results from unit/integration tests to a database so being able to track assertions/errors/test state in the TestContext is a requirement.
As a enterprise web architect that started life as a systems programmer up against the metal, I'm beyond stoked that Blazor and every other implementation of webassembly is getting serious, meaningful effort behind it. It was going to take the efforts of all the main browser makers to get something like this out of the wishful thinking category, and we finally have that buy in. Google is no less fired up about getting Rust and Go in mix, and I'm sure Mozilla and Apple have their own implementations well under way. The world has put so many shades of lipstick on the javascript pig over the years that people have begun to believe its not just a stinky ass pig. Its only ever been good enough because there was no other option. And people found ways to make it suck slightly less, but only slightly. I cant wait to reject my first pull request because it has a javascript include. What a time to be alive.
Does WinPE have DirectX? If not WPF might fall back to some pretty inperformant drawing mechanisms...
I don't know if this impacts load perf. But it was the first thing I could think of.
Or going through a bunch of code and seeing a bunch of low hanging fruit. I did some small part of fixing a free version of an mmporg a few years ago. In the main UI thread (on the server side. we didn't have the client side code), whoever had set it up was doing an uppercase conversion of a command inside of a switch statement. This is fine, except he'd done it on each and every case statement. After I fixed that goof, the guy in charge told me that the game was able to handle a bunch more concurrent players. I don't remember the count though but it was at least 20% more. It's a lot of fun turning a 600 line method into 3 60 line methods. 
What are you using to render HTML to PDF?
Popular ≠ Good
Ever class already has an interface or two. You declare it by marking members as `public` or `protected`. Take some time to read the .NET Framework Design Guidlines. They spend a lot of time talking about the overuse of interfaces in C++/COM and why they intentionally didn't do that in .NET.
It feels like Vuejs single file components but with more convention over configuration (and of course, the Razor syntax). Most of the things that normally require boilerplate are pretty terse so far. Most of this is probably because there are no real options or alternatives yet. The project looks too raw to use for anything commercial, but I'll be watching it closely through May; the developers have stated they *may* reassess the commitment to the project in *May* (i.e. they may decide they are working towards a supported production release at that point). To be comparable with the alternatives it will need live browser reloading, a smaller runtime footprint, better VS Code support (maybe an extension) component libraries to wrap some UI frameworks (Material Design or Bootstrap), possibly scoped CSS/SCSS, a way to use SignalR or Websockets and to catch up on a couple years of community support and libraries. I feel excited for it if it gets picked up as a production product and I'll probably use it in some toy projects before then. It might even bring some people over to C# and .NET from other communities. Its a hell of a time to be a .NET dev ;)
You got it right on point. That must be the problem. Thanks
My favorite is "inline and delete". I'm cool with 3 functions, 60 lines each. But I'm not going to tolerate 60 functions, 3 lines each.
NP. Glad I could help :)
Or anything you want to unit test... Unless there is another way?
I use MSTest, but only for basically marking the tests I want to run with attributes. Otherwise I use a combination of the CodeRush TestRunner and FluentAssertions. So by and large, the choice of test type is irrelevant for me.
They all suck for integration tests, so I honestly don't care which one my client picks.
We use xunit. Easy to run in visual studio, vs code and from command line, which helps with CI/CD pipelines. It's parallelized and passing data is super easy. Check out fluent assertions as well it's awesome.
This guy refactors. 
I can't wait until Blazor is ready. Razor is limited since it is only server-side and I don't want to write Javascript by hand or ditch Razor entirely and use Angular, React or Vue. I want a client-side UI that is integrated with ASP.NET MVC like Razor is.
Anything? That sounds like you are over-using mocks in your tests. While they do have their place, you should focus on writing tests that are either naturally isolated or test against real dependencies. 
ya i had to figure it out, its pretty confusing but i'll try to explain simple. you use linq statements to go through the data and say like all the data you want is inbetween the &lt;table&gt; &lt;/table&gt; html var tableQuery = (from table in doc.DocumentNode.selectNodes("//table").cast&lt;HtmlNode&gt;() the nodes are just saying its like an html element i guess, (code continued) from row in table.selectedNodes("tr").Cast&lt;htmlNode&gt;() now we are saying we want the specific rows that are defined by "tr" which is &lt;tr&gt;&lt;/tr&gt; then you just select row).ToList(); so alltogether var tableQuery = ( from table in Doc.DocumentNode.SelectNodes("//table").Cast&lt;HtmlNode&gt;() from row in table.SelectNodes("tr").Cast&lt;HtmlNode&gt;() select row).ToList(); foreach (var row in tableQuery) HtmlNodeCollection thing = row.selectNodes("td"); then you can even go deaper and say, grab a href out of the the table's cell &lt;td&gt;&lt;/td&gt; var url = thing[1].selectNodes("a"); saying get the &lt;a href="blah"&gt;&lt;/a&gt; string _url = url[0].attributes["href"].Value; I may not have described it correctly as i just had to figure this out for a project. but hope that helps? best thing to do is open up a website and viewelements with chrome and test it as you make it. You will eventually get something 
That would drive me crazy.
I got asked in an interview many years ago - "How many lines should a method have?" I answered "About a screen-full". They didn't like that answer - I think they were expecting an actual number. 
xUnit seems to be winning the war, since even Microsoft is using them in new tutorials. I have my own solution for most testing aspects, so I only need the method attributes, which means I can use pretty much anything equally. As such, I've just been using MSTest, but I might switch to xUnit.
While you’re sitting there waiting for your engine to get fixed, inflate the tires.
So you can multi-target a new-style .csproj test project the same way (`&lt;TargetFrameworks&gt;` instead of `&lt;TargetFramework&gt;`). Apparently at one point the VS2017 test runner was only running tests from one of the target frameworks... I'm not sure if that's still the case (I haven't tried, but [this issue](https://github.com/Microsoft/vstest/issues/624) is still open and so is [this](https://developercommunity.visualstudio.com/content/problem/150864/running-tests-in-a-csproj-with-multiple-targetfram.html), so probably), and the console runner should work anyway. However, one notable highly related thing that you can't quite do (yet?) is unit test different target framework versions of the underlying library in a coherent way (or at least not nicely, and not guaranteed to work for all combinations you might want). And believe me, I've tried... [here's](https://stackoverflow.com/q/44477840/1083771) the StackOverflow question I posted about this one, and [here's](https://github.com/Microsoft/vstest/issues/1013) the GitHub enhancement request I opened about it.
The main use case for async/await is I/O: anything going out of process, accessing disk, or hitting the network is a good candidate for async/await. The purpose of this is to not block the UI thread in a GUI app waiting for a response, and to allow any number of other things to happen in a server-side app. Secondarily, there are other computation-intensive scenarios that might end up blocking a thread, such as serializing a large object graph. Factoring out this code and marking it async will allow the framework internals to handle thread management while your app will remain responsive. In rarer cases, the Task library offers a superset of functionalit, and allows for finer control.
xUnit with Shouldly for fluent assertions.
&gt; I honestly don’t understand why they don’t fix it. `foreach` is highly structured. To oversimplify a little, this code: foreach (int myVar in thing) { // your code } used to turn into something like: int myVar; using (var enumerator = thing.GetEnumerator()) { while (enumerator.MoveNext()) { myVar = enumerator.Current; // your code } } they changed it so that it now turns into something like: using (var enumerator = thing.GetEnumerator()) { while (enumerator.MoveNext()) { int myVar = enumerator.Current; // your code } } Now think about a `for` loop... it's a lot less structured, so there's a lot more freedom. Like, you can totally do: int i; for (i = 0; i &lt; len; i++) { // your code } // do more stuff with i Again, oversimplifying a little, that turns into: int i; i = 0; while (i &lt; len) { // your code i++; } How should this be fixed? What about this one? for (int i = 0, j = arr.Length - 1; i &lt; j; i++, j--) { (arr[i], arr[j]) = (arr[j], arr[i]); } Also see [Jon Skeet's insight on this topic](https://stackoverflow.com/a/16264354/1083771)... he probably does a better job explaining it than I did, but I'd already typed that all out before I realized that somebody's probably been down this road before, and I don't want to delete my own version for some reason.
Just to throw a curveball here and say that starting with C# 8 interfaces will be able to have implementations too. It’s on the official C# site....
Something like that, searching google for the page shows a lot of what appear to be entrances to backend portals for back-office type stuff. Most seem to be based in the asiapac region. Its likely a common product that has a known vulnerability and apparently poor robots.txt by default.
What is the back end? SOAP?
Refreshing the console is expensive. Try running your program and pipe the output to file and you will see how much refreshing the console costs you in perf: Echo time Run.exe Echo time Run.exe &gt; out.txt Echo time 
Because it's a good too that everyone has to be able to remotely connect. What would you use instead to connect to a remote application?
Thanks alot. This is the kind of answer I was looking for.
To be honest: I had a quick look at your favorite Machine.Specification (which I didn't know about) and don't see anything to prove the *terse* argument! The simplest test requires me to write at least *three* lambda expressions? How is this terse or elegant? With NUnit I just need *one* Assert clause, for a minimalistic "can create object" test. OK in real life most of the time there is more. But you still don't have so much NUnit related syntax in your test. Almost only Attribute(s) to tag your test and perhaps to produce test data and some constraints bundled in *one* assert clause. Imho easier to grasp than writing test API related stuff for all three phases of AAA. The rest of your test consists only of vanilla C# - besides some mocking lib probably like NSubstitute. But I will give your proposed lib a chance and play with it. Might be that I didn't see the good yet. (the name is still a long no go imho 😁) 
Interfaces cannot extend a class because that would require the interface to be capable of having state.
Create a sub-app in MVC and slowly port .aspx pages to MVC Controllers, and run side-by-side with feature-toggle switches via config (or) db.
By default Visual Studio installation has xUnit and MStest project types and integration so I just asked about them.
xUnit and MStest look very similar. It is as if somebody cloned one framework and renamed attributes and assertions just because. I wonder if there are there any significant advantages of one framework vs another.
Nope. And I'm not quite annoyed enough to create my own, but I'm getting close.
I think the textbook answer (i.e. blogger favorite) is "no more than seven", but honestly I have no interest in working with someone who thinks that way. In my opinion the correct answer is: It doesn't matter so long as the API is well designed and the function is understandable. 
If you don't want to wait, you can get this on manning: https://www.manning.com/books/c-sharp-in-depth-fourth-edition
Tdd is a good aproach for work like this. First rewrite the unit tests. 
I would appreciate that 😉 
If you don't already have it, create a model / domain project and then assure all of your business logic is out of the website. Even the cleanest project will have some bleed so fix that first. Then do what stun said, that sounds like fun.
Good point
Depends on how big the project is and how complicated each page is. Unless your clients are happy with a reskin you will have to maintain look and feel. So if you are are dead set on doing this, I advise the following: 1. Create an MVC branch. 2. Delete the entire site on the branch. 3. Rewrite the entire site on the branch. Avoid changing backend logic. That can be done later. 4. Put new site through intensive QA. 5. In the meantime there will be lots of changesets to master. I advise merging these changsets into MVC branch. Keep pace here to avoid a massive merge at the end. 6. At this point MVC branch is effectively your new master. You can either merge it into master (first deleting the entire site from master) or you can treat MVC branch as your new master. In case it wasn't obvious, I seriously discourage incremental change if the project is large. Keeping the pages consistent in look and feel is a nightmare. One of my senior colleagues started porting one of our very large products to MVC and gave up after a concerted effort. I will edit this post with his insights when I get to work.
With Xunit (and specifically Integration tests) what we've done is we have a "ApplicationDBFixture" which is then added to the test class as interface marking with `: IClassFixture&lt;ApplicationDBFixture&gt;`. Then the constructor of the test class can take ApplicationDBFixture as a parameter and we store that. The Fixture can be then used to access configuration/databases (and specifically the fixture build database schema and runs the needed sql scripts to populate it; it also does the decision on which DB instance to use to run the tests). 
A 4.0 is in the making. Also I love the built-in Assert system. 
How nice it must be to know everything...
And how does this fixture hold those connection informations? Does it read a config file at a given location? Can you provide thos infos via a command line parameter, that you can apply to the runner? If everything is hard wired you will have a hard time to run such tests on dfferent machines...
We did something like this at work, and it went well. We just created a folder inside our project that contained all our new MVC work. Gradually ripped out the old code and ported it over. 
Pacts?
For us that stuff is hardcoded for now (we use mssql localdb with a project specific database name; that DB is drop/created for each fixture creation), but we'll need to make it so that we can pick up the connection details from somewhere else (probably environment variables, but maybe it will be a config.json that will contain Environment.machinename and connection to use).
This is what helped me understand it in the beginning too. It might make more sense to front end developers too. 
See it like this: every time you await an async method, the framework slaps its contents into a state machine with some particular attributes (like a .Result or the possibility to check its state or the possibility to attach continuations), and calls you back when it's done, handling the continuation on the same context or one of the caller (see Configureawait()).
Ok it seems that if i use https://archive.codeplex.com/?p=inputsimulator, instead of SendKeys that will work. So will properly use that instead. 
Sounds boring but create a library of math functions. Figuring out how each equation should be used and learn math. Youll kill two birds with one stone.
Thanks for the guide!
I not sure, but you can try `success: function (data) { windows.location=url }`
You also lose mutability and indexed access. 
it sounds like a massive waste to convert it. as i understand it, VB.net and c# both convert to the same output in the end. probably not worth it unless you have a really really really good reason.
Maintainability. VB.NET is a dying language if you look at current adoption and trends
Depends on the question. Without that I can only guess that the interviewer probably wanted to see your approach to creating the algorithm.
I had 25 years of experience as a programmer before I started with C#. And my specialty is design and implementation of large scale software systems...
That makes sense now :) still a massive project to do when you've only recently worked with C#
That's really useful thanks :) will try it out when I get home!
that worked! :)
sorry that was just mistranslation. The program was written in polish :) promień is radius.
ok, so assigning value to area variable was pointless. 
The whole point of these types of interview questions is to: find out what they really want, and then tailor a solution to meet their needs, AND justify for your solution. LINQ is a good/bad solution........but it depends on what you are trying to solve. 
 var result = list.OrderBy(x =&gt; x.shouldHaveSaidNoMethodSyntax); No? var result = (from item in list where item.ShouldHaveSaidNoLinq select item).ToString();
Thanks for your answer! 1. My first question is, how is it possible that you can declare fields in interface? I am used to interfaces in Java where interfaces can only contain empty methods. 2. Second question is, why there are only {get;} properties? Is it because we calculate those values inside Circle class and don't assign them manually? 
Well, with NUnit, you would have 2 to 3 methods with attributes. So 3 lambdas is less verbose and its easy to figure out what is setup (Context), what is the thing tested (Because) and what is being checked (It). Also, if you derive from WithSubject you get your object being tested and associated mock objects created for you. I've converted 100 line NUnit tests to 20 line mspec tests before.
Right now I'm finishing exactly a conversion from VB.NET to C#. I went through the whole Google ordeal of finding an automated tool for the job. The one I ended up using was Instant C#. The conversion/issues rate is good and it has a free version with a few caveats (only 200 lines of code at a time, etc.) but the full version can convert full VB projects. Hope this helps and good luck with the conversion.
Every project is different, start with that knowledge. My team has been working on converting the site for our product line incrementally for some time now. Work on your foundation stuff early, setup a good consistent structure for your JavaScript and an object/model library. You can build a new business layer on top of your existing if your forms are logic heavy. To me, incremental has been better because we can do beta testing with clients and make the change less painful for our stakeholders.
I use a library called Aspose. I use the total.NET package. 
I'll re-look at this later today when I am sober haha. 
Did that. no dice. 
This is good if your company has the budget to wait on selling the new version/staff not creating new features to aid sales. Otherwise this approach will take too much technical debt. We did this recently and it's an on going project to update the existing project as we go. Do as others have said, create the mac structure in your exisitng project and slowly rewrote pages and their code behind logic in to controllers, updating links to go to the new urls. It will be much better for you to juggle updating to latest tech and keeping the business happy for having resource to do new work as well.
I'm going to try that thanks!
I wouldn't have thought of this, seems like the best idea. Thank you
Best of luck!
throw new Exception("Exactly!");
+1 for FluentAssertions. Other unit test mainstays should be NBuilder and FakeItEasy.
He also says you can't use the disassembly window in release builds.
The ‘&lt;typename&gt; &lt;membername&gt; {get;}’ syntax is for an [get accessor](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/get). It is paired with set. It is syntax that maps to a method, so is legal in an interface. Yes. The client doesn’t tell the object what those values are, they are computer based on the other properties of the object. To accomplish this you can either make the body of the get statement return a private member variable, called a backing field, or compute it each time the class is asked. Or a combination of both. I would probably use an [auto-implemented private setter](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties) that you set during construction time. 
In this day and age I get more concerned when an interviewee *can't* use LINQ. I'd rather it be their go-to, tired of seeing people write the same (buggy) boilerplate over and over doing simple maps / filters / folds. In our shop we encourage heavy use of it, even applying it to our own types. (In that vein it's important to us that you not only know how to use it, but also how to write it / apply it to types you've created.) In this particular context it's hard to say exactly what's going on, not clear on the situation or what you mean by "not happy" - but I have to say that nearly all of the scenarios I can think of would make me uninterested in taking the job.
What's your overall programming background and experience level?
Once you are familiar with the basics, read 'C# in depth' of John Skeet.
Did he say why? If he was unhappy because you used e.g. linear searches where an associative container (e.g. HashSet) could have been used, then there you are, performance.
My .02 is that if you can explain what each linq statement is actually doing behind the scenes, and why it is the same as writing your own implementation, then you're okay, if not, then I think you need to get a little more knowledge about linq (see john skeets edulinq series), I feel its appropriate to answer with linq, but you have to know the why just as much as the how
A lot of it is experience. If you feel you know enough to start, start. Then review and if possible have someone peer review it. Then remake your prototype better and cleaner. Then keep learning... there's kind of no off button with that part.
&gt; In this day and age I get more concerned when an interviewee can't use LINQ Meh, I feel like if you're a competent programmer, even if you'd never seen it, it's not a hard concept to grasp. My guess is, the interviewer was just a poor communicator, maybe he/she was a programmer with poor communication skills (never) and was probably looking for an answer showing the candidate understood what was actually going on with the linq, as opposed to the fact they could write it. Or The linq written was god awful, which is a warning sign in itself. But I'm going to go with option one, unless OP can post what their answer was. 
I have done some semester projects for bachelor degree in Electrical Engineering. Graphene simulation in Matlab for thesis, a stopwatch with Atmega32 in C, some python scripts for things I wanted to make (e.g mouse movement control script with opencv, a compass in android with sl4a) etc. 
You can convert VB.net but you end up with code that is ugly and probably completely un-maintainable. It would easier, and saner, to do a like for like re-write of the code based on what the app does.
Yes, I'd agree on the "grasping" - same is true for most anything (new language, new framework, etc.) I don't think you can fully discount fluency and familiarity, though.
Cool. Didn't know about Nbuilder and FakeItEasy. We use Moq and AutoFixture.
I see. So if you've got a little bit of programming exposure, learning C# - the language itself - shouldn't be overwhelming. The thing that stands out to me is... &gt; to be able to work on big projects as soon as possible. Knowing how best to work on large projects is more an exercise in experience, organization, and abstraction - more so than knowing details of any one programming language. Biggest mistake I see new-ish programmers make is treating "big projects" like one really long "small project." Jump in and start typing away, it quickly becomes poorly organized, with super long classes and methods, lots of copy/paste, etc. Ugly and messy, hard to follow, huge pain in the ass to maintain. IMO best thing to do when getting into something big is to *not* dive into slinging code. Take a minute to figure out what the layout and organization of everything will be - an abstract architecture or topology. Then you can rough out what your classes or interfaces might be, and finally drill down to the specifics of what all the code is going to do at the "nuts and bolts" level. It's something we all get better at over time. Often by the first time you get through doing a substantial project, by the end of it you say to yourself, "I could have laid this out a lot better...!" :) Every subsequent iteration becomes better and better.
https://xunit.github.io/docs/why-did-we-build-xunit-1.0.html
Some languages add to the ambiguity. Both Java and Javascript use "extends" when a derived class inherits from a base ("class Y extends X").
&gt;Implementing a function reveals more about your skills than just calling it. Then they should specifically ask for that. I'm going to respond to a question the way I'd tackle a problem in real life. And often that'd mean using LINQ. I had an interview question once that asked to convert a string to int without using int.Parse() or any other standard functions. Essentially I had to build int.Parse() myself. If he had simply asked me to parse an in, I'd have told him int.Parse(). Any other answer would have been superfluous IMO.
So starting a prototype big-ish project with careful design decision seems like a good idea. May be I should invest some time on learning MVC , MVVM patterns along with the language? 
Exactly. 
It could be. If the interviewer was trying to see if you understood how to build a data structure or algorithm *yourself* vs just using a library, then you did not demonstrate that you actually know how the library works. This fundamental knowledge can be important, because sometimes the built in functions are not ideal or suitable for all problems. Sometimes you may have to roll your own sort, or heap. A reasonable approach in these interview situations is to say "here is the quick way you can solve the problem with LINQ, but do you want to see how to do it from first principles?" That demonstrates that you have deep understanding of fundamentals as well as practical experience with C# and Linq. It is also possible that the particular thing you solved with Linq would work but would have very bad performance. Linq does have overhead, sometimes small, sometimes very large. 
Linq provides abstractions around the underlying data structures and algorithms the interviewer probably wanted to test your knowledge on. Everyone can use LINQ without having to worry about the sorting algorithm's implementation for OrderBy, or whether the underlying list is a linked list or array, or how to find an item in the middle of a list. It's not that your solutions weren't valid, but I think the interviewer wanted to get a grasp of your understanding out *how* data structures are built, how algorithm efficiency works (Big O notation) and how to identify inefficiencies in the code you write. Also, what happens if you *don't* have Visual Studio and C# and therefore no LINQ? Could you solve the same problems in a language universal way if you had to do them in JavaScript, for example? And have them be just as efficient as their LINQ counterparts? Hardening your data structures and algorithm skills is *always* a good thing and will make you a more robust programmer across the board.
When it is appropriate, you can sometimes swap in linq-style helper functions to get the same performance as an imperative loop. If you are working with arrays or List and don't need lazy evaluation for instance: https://github.com/jackmott/LinqFaster 
I think it is more that utilizing Linq doesn't display your ability to create the algorithms that you utilized linq for... for example, I got an interview question once where it asked me to reverse the string... obviously I could have used the reverse method of the string class... but they weren't asking if I know how to call the reverse string method, they were asking if I knew how to implement the reverse string method. In production code they certainly wouldn't have expected me to write a proprietary version of reverse string. 
thanks :) I'll take a look
There are obviously problems to which LINQ is not a good solution, and the interview should provide at least some insight on how the candidate would deal with such problems. But explaining those problems takes a while, or solving them requires cleverness or specialized knowledge in addition to raw technical expertise, because if they weren't complex problems then LINQ would be a good fit. It would be easier for everyone to just go with a simpler problem and ask for a non-LINQ solution. For instance, "given an array of integers, return the integer that appears the most often" is easily stated, doesn't require some obscure knowledge about algorithms, and can be solved in three LINQ function calls. But for an interview, it's a lot more interesting to do it by hand. I wonder if the best interview question would be "Implement `Select`, `Where` and `GroupBy`". At least there's no ambiguity about whether LINQ is allowed :-)
Patterns are a good thing to be aware of, for sure. More than just things involving a UI though (MVVM for example). The book, "Head First Design Patterns" is a good one. There's two dimensions to this - there's the dimension of building an application with UI interaction (learning MVVM), and then there's the dimension of how you design the architecture to do the heavy lifting work behind the UI. You could try to learn those both at once, or separate them out and dabble in one at a time.
Which part sucks? 
I much prefer AutoFixture and NSubstitute, it has a much simpler API with less of the boilerplate.
Thanks for the great suggestions. I'll keep the software architecture and design pattern aspects in mind. :)
I agree, but *if* the query is concise. And people who are worried about performance (For example in a video game) can always bypass Linq anyway. So it's useful to have.
It would really depend. Ideally, the interviewer should either have said they wanted a solution that didn't use/rely on LINQ, or asked for such a solution after seeing the one you produced, assuming that's what they were after.
&gt; For us that stuff is hardcoded for now Ok. For me it's a no go. &gt; ... but we'll need to make it so that we can pick up the connection details from somewhere else (probably environment variables, but maybe it will be a config.json ... Exactly what I need in order to handle those tests properly. But: Even a config file isn't a valid solution, as the path to the file needs to be either hardcoded :-( So you just shift the problem towards another aspect, but the core problem stays the same: How to inject some sort of *context* data into a runner. My goal is always, that I can build a solution *completly* without any additional manual actions besides checking it out of version control on a naked system with only the needed development tools installed. So how to prevent such a config file from being overridden and comitted by the changes of a dev on his local machine? If it relies not in the source repo, you must create / copy it manually after the checkout. If it is, you will always have local changes on your dev machine, if the data is different.
You say you are grateful but you don't act like it. You say you understand why it's good practice, but you display above you do not by asking what difference does it make.
No, see my answer [here]( https://www.reddit.com/r/csharp/comments/87n5i7/mstest_vs_xunit_tests_projects_in_2018/dwf67a0/).
MVC
Run a profiler.
I agree. To me, if you know X is a faster way of doing something than Y and X can be reasonably implemented relative to Y, why wouldn't you just do X to begin with? I think a lot of people get caught up with the whole "premature optimization is evil" thing, but I'd rather be in the habit of doing something the *right* way to *begin with* as it makes me a better and more efficient programmer. &amp;nbsp; One example is using properties vs fields. I see people who will use a private field when a private property would have been better (unless that field is backing a property or you really are trying to squeeze out every ounce of performance). There are reasons to use fields, even public ones, but 99.9% of the time, using a property is better. Why not just get in the habit of using a property? &amp;nbsp; Another good example is not using curly braces on single-line blocks like this: if (someCondition) DoStuff(); The fact C# allows that annoys me.
They're all similar, even across languages. The methodology behind testing remains the same, and frameworks only tweak the details. xUnit has some distinct advantages over MSTest in that it feels more natural using the constructor/IDisposable to setup and teardown, and the [Theory] tag makes it easy to test multiple sets of data.
Interviewer here. Show me Linq and propose to explain how to do it without and when to use it or not. You will have my love.
No. LINQ should be your primary method of doing most things, unless you have a good reason to choose something else. Your interviewer is an idiot, and if they didn't want a LINQ-based, probably best-practice answer, they should've specified that you had to reinvent the wheel because reasons.
Probably little, he usually has outlandish opinions on a number of to everyone else, normal practice.
Back in the day I used to ask folks to re implement standard C string library functions as interview questions. (strlen, strcmp, etc) The point of this was to see if they grasped basic pointer manipulations, loops, etc- I would not have wanted to see another library/language construct that trivially solved the issue. And, FWIW, A depressing amount of applicants (even newly minted CS grads) couldn't do it.
set the header Content-Disposition property. that's exactly what its for: &gt;In a regular HTTP response, the Content-Disposition response header is a header indicating if the content is expected to be displayed inline in the browser, that is, as a Web page or as part of a Web page, or as an attachment, that is downloaded and saved locally. the save dialog part will depend on the browser/user settings. if the user has the browser set to auto-download files to /Downloads/ folder, that's what will happen.
What was the question? If the question was "tell me if the list contains items named 'foo'" and you answered with return myList.Count(x =&gt; x.Name == 'foo') &gt; 0; then I'd be unhappy too because that forces enumeration of the whole list. You missed an opportunity for `Any`. I've seen variations on that mistake many times in code. Bonus points: point out something else that is suspect in that code. Bonus Bonus points: point out another way to accomplish this without full traversal but still using Linq. Some people also get cranky over using the methods vs query syntax, but you can't really anticipate what someone's preference for a stylistic choice will be. If the interviewer asked "how would you solve x", the LINQ is fair. If they wanted you to write an algorithm for that, they should say so either up front or acknowledge that they asked the question at too high of a level and just ask you to implement the code w/out LINQ. Some interviewers have a hard time seeing the world beyond their little cubicle. Don't fret over it, missing one question should not disqualify you for a job unless you had an epic bad answer. Solving a problem with valid LINQ shouldn't be considered an epic fail. I had an interviewer get grumpy with me because I disputed that a variation on hashtable he was asking me to solve could be done in "truly" constant time. I told him I couldn't solve what he was asking and was curious as to what the solution was. He told me, I then explained to him why it wasn't constant time and that I had considered that solution and instantly rejected it as a result. He then saw the issue and agreed he had a flawed question, just no other candidate had ever called it out.
If you can explain the implications of using a LINQ expression with respect to its complexity class (time and space), then I think your approach is not only just good, but exemplary.
&gt;I'd rather be in the habit of doing something the right way to begin with The problem with this perspective is that it's extremely difficult to determine ahead of time what 'right' is for any given situation. We very rarely have choices between right and wrong; most of our choices are between 'better for this concern' and 'better for that concern'. 
&gt; this means that blazor is an entirely new beast, and you would be right. However this does not speak in blazors favor, since this means that blazor has less history to look back on and learn from Well, sure, it's not really breaking new technological ground. Sun did it with applets, Adobe did it with Flash. What everyone's excited about is that this is a web **standard** -- not just Sun or Adobe's product. Everyone's on board. And that's what's making it take off.
Oh, it absolutely does that to me. The other person in the company knows it too. But pretty much any job has some kind of boss that makes you crazy one way or another. This one isn't so bad, and it's pretty much great except for that. And it does make the code base very robust.
If it works out to 60 functions at 3 lines each, rather than 3 functions at 200, so be it. But yeah there usually is a balance where the entire code ends up as small as possible while being as legible as possible.
For integration tests, I really need to be able to support multiple failed asserts. Not just stop at the first failure. Well actually, do I sometimes need to stop at a failure. But other times I need to collect all of the failures. For example, if I'm running the "save and read back customer record" test, I need to know that it actually saved all 8 fields. If the test result says "field 1 wasn't returned" that's different than "fields 1 thru 8 were not returned" when looking for the cause. More failure types are also necessary. I need to distinguish between "failed to run test, database not accessible" and "test failed, database returned an error". (MSTest kinda-sorta offers this with Assert.Inconclusive, but that's not enough.) Maybe an option to make messages on asserts mandatory. Yes, they are a pain in the ass to write. But they are necessary when you are writing use case tests. (XUnit is particularly bad because it doesn't allow you to write messages in many of the asserts.) 
I would advise against reading books when starting out. I'll get to why that's the case in a moment. You best start with the official Microsoft docs . The C# has a small section on the basics of the language. Type the examples on Visual studio and get a feel for how things work. You might run into a few things you wouldn't otherwise if you just read through the examples. This includes errors and simple bugs that you should get comfortable with. After you go through the basics, go through the getting started examples that teach you how to write a coherent program with all the basic blocks. Type these ones out too. The typing part is more important than you think. You could read any book cover to cover and after a few days, you would probably know what a term means but the rest of its details will fade away because you would have not had a chance to use it. You could read up on the internals of LINQ but does not mean shit if you don't get to use it right when you are starting out. This is one of the reasons why you should avoid books when starting out. The official docs for most languages give you enough info to get your hands dirty. And this is what we exactly need in the beginning. Working knowledge ! Now you've done all this. What next ? Start a project that is non trivial. Split it into phases. Step out of your comfort zone a teeny weeny bit with every phase. Now get C# in a nutshell if you are serious about C#. If you are not, I suggest exploring the docs further. C# is a wonderful language. Remember to have fun while you're at it. Posted from phone so can't find the appropriate links to the docs. You'll have to search around a bit :)
VB.NET is still growing overall and will probably be with us for a long time. While it has fallen out of favor in professional circles, Microsoft reports that it is still going strong with an order of magnitude more users than F#. So while it's not actually "dying", I would agree that it is easier to find C# developers.
Nunit 3.x
It is about using the right tool for the job and there are many instances where one tool is *objectively* better than another tool for a specific job. Changing the requirements of the job may or may not change the conclusion of which tool is best. &amp;nbsp; The difficulty on deciding which tool to use is sometimes caused by our own ignorance of all of the available tools. The difficulty can also come from our human-limited foresight, but that's actually related to our ignorance -- if we knew *all* the facts about a job, we could, in the vast majority of scenarios, determine which tool is *objectively* better than the other. &amp;nbsp; For example, when I first started my professional career, I basically wrote some code that re-invented data binding for winform controls. I didn't know these things already existed and I can tell you that the custom data binding I created is hellish from a maintenance perspective and that the .NET-provided data binding is far superior. &amp;nbsp; As yet another example, I've seen an MVC webapp that was created to accomplish what Web Api accomplishes -- none of the generated front-end of that webapp will ever be used. In fact, when hosting that web app in IIS and navigating to it via your browser, all you get is a page with the heart ("&lt;3") symbol. The creator of that web app admitted he didn't know about WebApi at the time. Sure, an MVC webapp basically *is* a WebApi with a front-end, but it would have been objectively better to have used WebApi. &amp;nbsp; Very few things are ultimately subjective. While questions like "which language is better" usually results in subjective answers, if we knew all the pros/cons of a language *and* all the details, future and present, of a specific job or domain, we *could* reach an objective answer. Subjectivity only comes into play if we can't know those details which, again, stems from our collective ignorance.
Just to pile on, I feel that learning the language is probably the simplest part. Learning the ecosystem of the .NET environment just as important, IMO. Every development ecosystem has various tools, conventions, and idioms. However, it is a moving target. Try to keep up and good luck!
This may or may not help depending on your situation... but c# and vb.net assemblies work well with each other... if only need the functionality you can include the vb.net project as a reference in a c# solution and still have access to all the objects/methods/etc. 
I would recommend: https://www.amazon.com/C-7-0-Nutshell-Definitive-Reference/dp/1491987650 Fantastic book for pros.
It's the premature optimization problem. Most projects I've worked on, the slowness comes from 3-10 slow functions or database calls etc. And that usually accounts for like 90% of the speed. If you can say for sure you've eliminated all of these major slow parts of your system and your system is still slow I'd look into these things, but until then it's better to have clear concise code
New edition is coming out soon and is half off if you order today. You'll get the physical book when it comes out and access to the chapters that are done now online. https://www.manning.com/dotd
I've used a list of messages before with a test that needed to check something on whole bunch of classes. Instead of asserts, I would check the condition and add to the list of messages. At the end of the test, I would assert that the list of messages was empty. &gt;Maybe an option to make messages on asserts mandatory. I worked with people who insisted they weren't needed but I think they are good to have. There is a real challenge to make them meaningful. 
I find the XmlSerializer is considerably more limited than the DataContractSerializer. For example, for it to even function, it requires "attributes" or "decorations". On a massive code-base that consists of thousands of objects that may or may not be serialized, that's not an option.
&gt; There is a real challenge to make them meaningful. That is true. I often struggle with it, but not using them is even worse.
What was the question, and did the interviewer say why he didn't like that you used Linq?
&gt; The interviewer is not looking for a correct solution, they are looking for information about your skills. Implementing a function reveals more about your skills than just calling it. A *good* interviewer is thinking like this. There are very few good interviewers. 
Not to mention that Linq can get very confusing, very quickly. If you have a large code-base that has a large number of (ever-changing) developers working in it, I would argue that code clarity trumps "concise" every time. 
No, you can just write a Xamarin app. Visual Studio Community is also free of charge for personal use and small companies if you plan on using it do develop the Xamarin app.
No, you can just go with [VS 2017 Community](https://www.visualstudio.com/downloads/) and choose to install Xamarin, for a personal project it's free.
There are many ways to skin a cat... but Linq is not one of them. Not hired
No.
Do you have any evidence that it's **accumulated milliseconds** causing the slowness?
We're hiring people to reverse strings and implement fizzBuzz, please apply! Must have 8 years reversing strings in highly distributed computing environments
Use XmlSerializer for serialization/deserialization. For checking whether or not the xml object has a certain property, you can always load the xml file in `XmlDocument` and use XPath to quickly determine if a specific element exists.
I often thought that the real reason they thought messages shouldn't be needed was related to it being hard to make good ones... We didn't get along very well, they thought ExpectedException was a GoodThing(tm) whle I thought it was better to just use try catch and Assert.Fail(&lt;message&gt;) 
not with that attitude
 I have not yet managed to acquire the source code of every program I have ever used. But certainly I have seen code bases where slowness was a result of accumulated small losses. 
If you look at Google Trends along with the recent stackoverflow survey of most hated languages you get a whole different picture compared to what Microsoft says. 
I find it weird that the example defines a PositiveInteger class when we already have a type for it: uint.
Yes that's fine. Entity Framework is the easiest way to do it and works with SQL Server by default. You can take a database first approach, or a code-first approach. I've never done the code first approach but I think it's what most people do. With database first, you create the database tables and Entity Framework generates the models based on that.
It's completely free since Microsoft acquired Xamarin, but you do need a VS Enterprise license to use Xamarin Profiler. And as someone else said, an OSX device is required for debugging and building iOS apps. You can do it remotely by connecting VS to your OSX device if you have an Enterprise license.
Microsoft did mention that they were surprised about the stackoverflow survey as it didn't match their own metrics gathered from Visual Studio users. Also note that the number of people using VB.NET according to that survey exceed Objective-C, Swift, Go, and Scala for both web and desktop developers. https://insights.stackoverflow.com/survey/2017#technologies-and-occupations
Very nice to have more (and seemingly better) options for crypto, thanks a lot!!
Its a big lsnguage that is used a lot because of massive amounts of legacy. But as the survey and Google trend shows people are abandoning it rather than adopting it. They even hate it. The picture becomes clearer if you look at the stack overflow survey for hated languages and look at the top. Vba, VB.NET and vb6. It's the language that people don't want anymore. It's outdated and verbose. It's not modern . I defenetly don't hate visual basic but I think it has had its place in history and it is time for it to die. 
I am a linux guy, who took a .NET 4.5.2 application and it is not a dockerized .NET core 2.0 application. It is a fantastically fun project. I now know powershell (I really like the concept that powershell pipes objects, not strings). After 2 years of working on it I have concluded that Windows still sucks, but it is getting better.
It's not modern? Looking at features alone, it's far more modern that Python, Go, or Java. It's outdated and verbose? Have you seen the abominable C-style syntax that C# still clings to? Break statements, dangling ifs, mandatory line terminators. While the C# team has done wonders over the years, from a language design standpoint the core syntax they inherited is a mess. Your opinion is clearly based on confusing VB6 with modern VB.NET. Why else would you mention a language from over 21 years ago in the same breath? *** According to Microsoft, VB is far more popular among new programmers than C#. They don't necessarily stay with VB, but it is seen as a good first language. And that alone is enough to justify its continued existence. 
`IEnumerable` is an abstraction. Let's walk into another abstraction, then see how it helps us understand IEnumerable. A "fruit pie" is any pie that has a fruit filling. It might be a pie cooked in a pan, or it might be a "hand pie" which is more like a Pop-Tart. So if I ask you to buy me a "fruit pie", there are hundreds of different kinds of pie you could buy to satisfy my request. If you bring me a cherry pie, it'd be weird if I got mad because I wanted an apple pie instead. Thus, "fruit pie" is sort of like an interface, in that it's a very abstract concept. It's "a thing with a crust surrounding some kind of fruit filling". Good interfaces are designed to be described like that. "A thing that does something". `IEnumerable` represents "a thing that can be enumerated". More specifically, it represents "a thing that returns an `IEnumerator`", and `IEnumerator` is "a thing that can be used to get every item from an `IEnumerable`". This is the "fruit pie". List&lt;int&gt; is a very concrete type. It's an indexable collection of ints that can also be enumerated. List&lt;int&gt; implements IEnumerable&lt;int&gt;, and also IEnumerable. It's an "apple hand pie". `ReadOnlyCollection&lt;int&gt;` is also an indexable collection of `int`s that can be enumerated. So it also implements `IEnumerable&lt;int&gt;` and `IEnumerable`. It's an "apple pan pie". So if I ask for an `IEnumerable&lt;int&gt;`, I don't know if you give me a `List&lt;int&gt;` or a `ReadOnlyCollection&lt;int&gt;`. I didn't ask for an apple pie, or a cherry pie, or even a hand pie. I asked for "a fruit pie". So I don't care if what I get is an apple hand pie or an apple pan pie. You don't instantiate `IEnumerable&lt;T&gt;`, you ask for it. When you instantiate things, you have to be specific. I can't bake "a fruit pie". I have to pick the crust and filling before I can start baking. So if I want to actually create a new enumerable collection, I usually use an array or a `List&lt;T&gt;`. But if I'm writing a method that will take a collection and do things with it, I have some choices. So that's really it. It's a tool for abstracting the concept "a collection of things". If you use it when you ask for a collection of things, it's easier for people to use your code. When you create things, you have a specific idea in mind, but those concrete types tend to implement `IEnumerable&lt;T&gt;`. 
You are referring back to Microsoft all the time. They are of course biased in this. Have a look at Google Trends and the dreaded languages in the SO survey. They are not biased. How can you explain those poor results without refering to what Microsoft says. 
Did you know you can see the exact SQL query that LINQ creates in the debug console?
I implemented something similar to a point cloud viewer using a graphics library for my dissertation a few years ago. The code probably isn’t the best as I was learning, but I could send you the code if you like?
That's just the B.O. coming off the bloggers who are afraid of anything more complicated than a tiny unit test with a single assert.
Microsoft is reporting facts gathered automatically from most Visual Studio users. There are X number of people using language Y. The Stackoverflow survey is reporting self-reported feelings from one specific subset. I like X and don't like Y. 
Looks quite interesting
No, this is coming from me having to look at some convoluted test method and then finding out that author of that KFC bucket was me.
Nr 1: it's feelings that makes developers hate language X and strive to use language Y Nr 2: how do you explain the falling trend in Google Trends? Bonus: http://redditmetrics.com/r/visualbasic#compare=Csharp have a look at the Rank tab 
I'd say that, from the perspective of an interview, if they were upset with you for using LINQ then they weren't asking the right question.
Why do you use Open/Seal instead of familiar and immediately understandable Decrypt/encrypt?
You don't need to use Entity Framework but it is the easiest by far. Personally, I like using a query-first extension, but that's expiremental. Dapper is a good micro-orm if you'd prefer that. These are raw SQL approaches. You can do a code-first approach with entity framework which is a pretty good option, just tweak some of the settings for stuff you don't need.
1) It's a fine way. 2) Only if it fits the requirements and makes your life easier. 3) If you are using EF you can do it either way.
uint can store a value of 0, but the PositiveInteger class restricts it to be _strictly_ positive: if (value &lt; 1) throw new ArgumentException("value has to be positive", nameof(value));
The `[Theory]` is something that I use heavily when doing tests for calculation methods (take inputs, give a result). Definitely one of my favorite features. Hard part about theories is keeping your data set organized and easy to read (auto-format is your enemy, as are tabs). I'll sometimes create a separate "MemberData" object.
I am not certain I understand the requirements... you said that the main goal is to serialize an object into XML data... Do you control the implementation details of the "certain object"? can you use attributes? https://docs.microsoft.com/en-us/dotnet/standard/serialization/controlling-xml-serialization-using-attributes Can you store the data as type object and use a generic function to specify the type you want to cast it to? //Not as robust as it can be. T GetDataAs&lt;T&gt;(String key){ return Convert.ChangeType(_mydatacontainer[key], typeof(T));} 
If the DB connection fails, then every test that touches the database is going to fail too. 
Pacts.io
yes please. :D I need some place to get started. 
What kind of animation? 2d? 3d? You want to make some kind of animation system that saves out to one of the video formats? 
I’m replying to the integration testing part or thought I was. Service contracts save a lot of hassle in http based service testing. 
I don't quite see the segue into the curly braces discussion but anyway... Depending on readability and complexity, I prefer: if (someCondition) DoStuff(); Never use if (someCondition) DoStuff; Because it's very easy to accidentally write, without noticing: if (someCondition) DoStuff(); DoAnotherThing(); // always executes should've used {} Personally, I really like the idea behind Ruby's syntax on it, thought it's not that big a deal, and I'm not in a position to use Ruby atm: DoStuff if(someCondition); 
Linq isn't only used for Linq to sql, in fact Linq to sql is deprecated. 
You can write anything you want against the DirectX APIs, if you cant get unity to work the way you want then you go lower.
Good point, I didn't realize it.
When users check the checkbox in form2, save the result (i.e. set some property to true) then have the main form check if said property is true or not.
"Is using the most appropriate tool to solve the problem in the simplest way, a bad approach?" The answer to that is always "no". Ergo, if using LINQ gives the simplest solution, use it. (By "simplest" I mean "fewest lines of code"/"most readable".) If the interviewer wants you to implement Min/Max/Avg/Sum etc. manually in order to test basic problem-solving, as opposed to knowledge of language features, that's fine - as long as they make this clear to you, and as long as you make it clear to them that whatever code you write will be neither simpler nor faster than LINQ.
Do you use MongoDB? It's web-scale.
Yea, basically looking for some sort of system that saves out to video. I'd like to try both 2D and 3D, though if I had to go with one Id go with 2D. I'm hoping I wouldn't have to make it myself so I'm searching rn.
Has it changed since [this Microsoft document?](https://docs.microsoft.com/en-us/dotnet/framework/wcf/samples/xmlserializer-sample)
Not being able to test all frameworks in a single solution makes things difficult. What other options do I have other than multiple project? 
Why do you need a non-generic Answer class? Just make the base class generic.
You link to [Encrypting Data](https://docs.microsoft.com/en-us/dotnet/standard/security/encrypting-data) and mention that its cipher of choice is unauthenticated AES in CBC mode. The recommendation I've seen is to follow the new DataProtection methods [here](https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/implementation/index) which by default uses AES-256-CBC for confidentiality and HMACSHA256 for authenticity from [here](https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/configuration/default-settings#default-algorithms) How does this compare to what you've linked?
I agree somewhat. I definitely think performance is more and more not getting the attention it deserves. People advocate for not optimizing too early or not micro optimizing and then complain because everything is slow as balls. You *dont* want to optimize too early but many things you just *know* how to easily write it better the first time without sacrificing much time or effort. And you use a profiler when you *arent sure* or to measure things afterward. Im not sure if you are advocating for *not* using LINQ for performance reasons, but as a programmer who works primarily on business server software, performance issues have almost always been database (or similar IO) related, or algorithm issues such as not pre-processing data (searching a list in a loop rather than pre-building a dictionary for example). With more critical paths, such as in a game I developed, I did forgo foreach iterators and certain LINQ operators to prevent overhead and such.
You don't need a generic Answer class to contstrain what type of question can be associated with each answer, you could also accomplish that with strongly typed constructors. public abstract class Answer { private readonly Question _question; public Question Question =&gt; _question; protected Answer(Question question) =&gt; _question = question; } public class SingleAnswer : Answer { private readonly Choice _choice; public Choice Choice =&gt; _choice; public SingleAnswer(SingleOptionQuestion question, Choice choice) : base(question) =&gt; _choice = choice; } public class MultiAnswer : Answer { private readonly IEnumerable&lt;Choice&gt; _choices; public IEnumerable&lt;Choice&gt; Choices =&gt; _choices; public MultiAnswer(MultiAnswerQuestion question, params Choice[] choices) : base(question) =&gt; _choices = choices; } public class OpenAnswer : Answer { private readonly OpenChoice _choice; public OpenChoice Choice =&gt; _choice; public OpenAnswer(OpenQuestion question, OpenChoice choice) : base(question) =&gt; _choice = choice; }
Do you need to store all the answers in the same collection? If not, why have a non-generic base class at all?
I try to limit the non-curly brace usage to guard clauses and such. I agree. I think premature optimization is often thrown around when often its not "premature". You *know* that otherwise it would be slow and design things accordingly. You can definitely way overengineer these things and I think the less experienced programmers would be prone to this so for them its better to optimize after when its a problem. The problem is at that point it could be too late.
&gt; Bouncy Castle is sometimes recommended, but it’s even more horrible choice than the standard library and should be avoided. That's a pretty unqualified statement with no rationale. Kind of makes me mistrust everything else in the article. 
 public class Generic&lt;TProp&gt; { public TProp Prop { get; } } public static class Demo { private Func&lt;Generic&lt;TProp &gt;, TProp &gt; Delegate = (genericObject) =&gt; genericObject.Prop; public int Main&lt;TProp&gt;(TProp prop) { var genericToRetrieveFrom = new Generic&lt;TProp&gt;() { Prop = prop }; var retrievedProp = Delegate(genericToRetrieveFrom); Console.WriteLine(retrievedProp.ToString()); // outputs whatever prop is } } There's nothing different about accessing a property on an instantiation of a generic class when compared to accessing a property on an instantiation of a non-generic class.
In my opinion nothing beats hands on experience and learning as you go. You definitely want to learn patterns, best practices, etc., but just reading about them is not going to be the most effective, and you can fall into bad habits of conforming to patterns that are unnecessary or overly complicated. I think finding small projects or ideas that interest you to develop are key, constantly researching how to do what you want to do, how to do it right, and how to make it better. Being interested in it is key, not just samples from a textbook. This could be as simple as automating certain tasks, making a web scraper, developing a game, etc. Having another like minded individual to collaborate with, or multiple people, is also extremely useful.
I really like your teaching style. Thank you
Hi, I work in Azure, and we need Linux experts. We want to sell our services to all developers, not just the ones accustomed to the Microsoft ecosystem. There's been a push recently to move from technologies that only work on Windows (C#/.NET Framework) to technologies that can be developed and deployed on any platform (C#/.NET Core, JavaScript, etc.). Many teams are going out of their way to try to find engineers with Linux experience.
Try it yourself. I've written data classes with no attributes that serialized and deserialized just fine. I even wrote an extension class for easily serializing/deserializing classes. The only issue I've ever ran into was serializing dictionaries as far as I can remember.
I like bouncy castle. I don't see why any developer would dislike a widely used, and thus safe, security library. Maybe it could be written better in some areas but no large project should take on that liability imo.
This. If the interviewer wants you to not use something, they should say so, or at least go 'Let's pretend you don't have that'. This is a fun way to see if someone can write a recursive function. Or at least if they know that recursion is a thing. 
No it's not. I need something for .NET Core, and neither wpfMath nor CSharpMath are compatible.
1. When people ask that question they generally want someone to speak with experience using the library in question. There are many reasons for this including not wanting to be stuck with a dead or useless project that by happenstance is high in the search rankings. 2. The first result is the StackOverflow question: "I wanna know that what's the best command-line tool for compiling a TeX document ? "
Yes, the most work you will have is learning the differences in deployments and the powershell cmdlets. Though being on Azure does not necessarily mean you must use C#. They can host any kind of app platform you like. Some of their more advanced features may require .NET only but not often. 
THANK YOU. Lowering GC Pressure is one of the biggest things one can do to enhance performance of an application. Doubly so when considering scenarios like ASP.NET, as GC will have an impact on ALL requests being processed, not just the one that triggered the GC with whatever call is made. 
May be related to this being built on top of libsodium. I believe that is the terminology used in that library for those operations.
You recreate it by hand.
/u/grauenwolf has some great points. Mostly. His advice is good, probably on top of mine. All of that said, I've done this by doing the following: - Have DEBUG assemblies compiled with no optimization flags, etc. - Run Telerik JustDecompile. - Have that save the assembly as a C# Project - Open that up - Remove any references to Microsoft.VisualBasic and it's children/associates. - Fix everything that blew up from removing said references. Sometimes refactoring the VB will make this step cleaner, sometimes it will just get worse, especially if you inadvertently use more things that wind up relying on those removed dependencies. For example, `IIf` Doesn't compile down to `conditionTrue ? a : b'. It's a method call. You'll see things like that littered through the de/re-compiled code. Enumerators can get especially ugly. - This is why I said 'Probably' in regards to /u/grauenwolf's suggestions. 
Are you referring to rendering to web or something you can use in natively in UWP?
This may be it: https://helpx.adobe.com/illustrator/using/css-extraction.html
Neither. Really the ideal would be something like [wpfMath](https://github.com/ForNeVeR/wpf-math) but for [Avalonia](http://avaloniaui.net/) (the WPF-like GUI package I'm using), but because Avalonia is in beta and it has basically no "third-party" support, something that can render me a bitmap would be good enough. I suppose an alternative could work as long as it obeys these requirements: 1. It needs to work in Avalonia (the easiest way of doing this is generating a `byte[]`, or even better, an `IntPtr` bitmap) 2. It needs to be cross-platform 3. It needs to work with .NET Core 2 (also working with .NET Framework 4.6 would be nice, but not required) 4. It needs to be really really fast. 5. It can't require any additional runtimes to be installed outside of .NET runtimes, and it can't require internet access.
Was OP talking about a website or a WinForms/WPF app?
I assume so, they asked about recreating a form.
Those people are too busy appending another 200 if-statements to their code because they haven't quite got the hang of loops yet to be hanging out on Reddit. Btw that wasn't a joke, I'm looking at it right now. 
Having a non-generic base class keeps the option open. As my code is written currently, it does use collections storing non-generic Answers. This sort of defeats the purpose of avoiding casts tho.
for the video saving this SO question might have some useful info: https://stackoverflow.com/questions/4068414/how-to-capture-screen-to-be-video-using-c-sharp-net you might be able to use that in conjunction with unity, or monogame 
This seems backwards. I'd think you'd want questions, with answers. Or even say, a Dictionary of questions with answers as the values. It's hard to know what exactly you want accomplished, but I'd try my hardest to not have a public getter. Like a question can verify if the answer is correct, stuff like that. But, if it comes down to it, and you really need it like that (I have at times), hiding it with 'new' is probably your best bet.
&gt; DI is a lot deeper than you're thinking. It's an entirely different way of doing architecture. It's making things configurable by passing arguments... 
If you guys are able to work this out, this would be awesome. For something like encryption, it's better to fewer but well designed libraries than to have multiple libraries that might be missing pieces.
Cool. I'll contact the author. I started from Bouncy Castle as a basis but then de-Java-ised it, added a bunch of different, more advanced primitives, and generally made it a lot easier to use (and added my big value-added feature set, the packaging format system). I also optimised the living hell out of it, with non-managed data copying and some SIMD support.
I don't reject LINQ answers by default. But the problems I usually ask to solve bring you to go through the sequence more than once. In those cases LINQ allows you to give a correct answer but not a performant one. E.g. given an array containing an even amount of numbers, calculate the maximum distance between an item and its opposite (the element occupying the same position in the reversed array).
Because some operations go beyond encryption and decryption. Those terms are specific, but insufficient to express the circumstances of the operation. Consider any authenticated encryption scenario, for instance.
&gt; Note that you can have a readonly property without a backing field, like so: &gt;public OpenChoice Choice { get; } Wow I had no idea. I'm going to go refactor everything I've ever written.
But I have no webservice I want to test. It is more about database accesses. 
Read this- https://www.quora.com/Can-you-write-a-program-for-adding-10-numbers/answer/Konstantin-Tretyakov?share=5bd14b74&amp;srid=hJC54
Iteration, but yeah.
It was more like "in the process of designing a major project when management did another drive-by and told us that they were negotiating a big deal with Microsoft who would like to see is using their tech in house instead of Java (which we'd planned to use) so they wanted us to switch. To C#'s credit, we looked at it, decided that it would meet our needs, and I've stuck with it ever since instead of going back to Java (where I made my money for over a decade) so clearly it was okay... Once you know 10 or 15 languages it doesn't matter much what you write it in anyway most of the time, you need to design a good data model and then the hard part is done. I've only seen two languages that really made a difference and they're not available any more anyway.
I'm still new to .NET (coming from a JVM background). Are you saying there's no way to configure the GC to be multi-threaded? One thing the JVM GC is known for is the ability to tune it so much, from selecting different GC algorithms (several, if not most of which are multi-threaded) to specifying the generational GC spaces and so on.
It is multithreaded. There's just a lot of garbage generated with things such as linq
How's it with pgp encryption when compared with something like Secure Blackbox?
So I totally didn't read your post and instantly ended up at your build scripts. Is there not a common external build system for. NET? For c/cpp I know the standard is pretty much cmake.
You might not need generics here at all or even a distinction between Answer and Question. Again this goes back to thinking about the use of the questions and answers rather than designing your hierarchy without that guidance. As an example of this, your Answer contains the Question, which means if you wanted to display the questions you would have to iterate over the answers and access the question within. This is a bit arse about tit. So logically I'd put the answer in the question. What information about the question do you think the answer needs to know? Think about your application, I assume it will ask questions, let the user answer questions and grade correct answers. In this scenario, the Answer that you have is not the answer given by the user, but information about a) what is correct and b) what to display to the user. So again, the user is really interacting with the Question not the Answer directly. 'grade correct answers' doesn't mean create an Answer object, it means ask a question whether the user's selected options match the question's answer's selected options. 
C# has a lot of nonstandard terminology (e.g. because LINQ naming reflects SQL-like conventions). I've had a lot more success hand-waving and using map/filter/groupby/reduce and other handwavy things where such language is more universal. At minimum, it's helpful to be able to go "oh, I can also do this in Python with list comprehensions or JavaScript with some find and replace". Beyond that? I've never had an interviewer unhappy with me using LINQ, but I've always offered to explain to interviewers 1) the complexity of LINQ's internals (with potential optimizations and pitfalls) and 2) how I would implement code without LINQ.
I feel you can have clarity with large codebases and functional transformations by following normal best practices - e.g. still breaking things into separate functions or extracting variables where possible. C# even makes things really easy with extension methods. The problem isn't LINQ - it's that you have a bigass linq query. If you were to unroll that bigass linq query to procedural code, 99% of the time you're going to have EVEN MORE terrifying code. So the problem is that you have to refactor your code to make it easier to reason about.
Chiming in with [my mocking framework NMockito](https://github.com/the-dargon-project/dargon/tree/master/framework/src/NMockito) for comparison: I approach this as follows: class MyTestClass : NMockitoInstance { [Mock] IThing testObj; [Test] public void MyTestName() { Expect(testObj.Equals(Any&lt;IThing&gt;()), Once()).ThenReturn(true); AssertTrue(testObj.Equals(null)); VerifyExpectationsAndNoMoreInteractions(); } } This works by creating a Dynamic Proxy with Castle.Core and intercepting calls to methods like .Equals (but depends on everything being virtual). I like that this simplifies assertions (you shouldn't be testing, then asserting equality with true - this this loses information about why the assertion failed. Especially once you want to check equality [AssertEquals("asdf", x) vs AssertTrue("asdf" == x)]. Using Verify is fine, but using Expect the way I have makes it so you don't have to repeat Verify for every mock train you do. Expect is essentially Verify + adding to a list of expectations which are invoked at VEANMI. This also makes out params really easy to work with: Expect(value =&gt; dict.TryGetValue(1, out value)).ThenReturn(true).SetOuts(123);
No, no the solutions that Google provided to me used extra libraries (downloadable), this was the reason that I did not use them.
I'd probably reduce `Answer` to an interface type, rename `Answer&lt;T&gt;` to `AbstractAnswer&lt;T&gt;`, and implement the interface explicitly on the abstract generic. I agree with u/serentilla, however, that it stands a good chance of being a backwards relationship. 
Sorry, but this could be anything. Something falsely wired up with your Button, a wrong connectionstring or something you missed with the construction of your database object. Do you get an exception? Too much missing information.
No I do not get any exception, the only thing that I get is "Waiting for response from the sever." That's all . My button is simply done by adding new button from toolbox, and double clicking on it to make OnClick class. That's all. The button definitely works. Connection works too, if I create for loops, then it will insert the same data til' termination. ;(
best thing I've read in months x'D
Most of the linq garbage generated is gen0 - while you may be creating pressure, you're not really paying for the garbage itself. Might be specific to my shop's setup but we tend to not keep things around a long time - not many things stored in long-term, so the amount of garbage generated isn't so big a deal. (Heavy on immutable things, more likely to replace than to mutate)
https://msdn.microsoft.com/en-us/library/y740d9d3.aspx
XD 
I would argue that proper linq / higher-order function mastery enables more opportunities for bug-free algorithmic optimization, rendering the micro-optimizations mostly moot. Also, pick the right tool for the job - if the software is so sensitive to performance, should it be written in C# in the first place?
Highcharts!
You need to reduce the file size in transmission or at rest or both?
It depends on how much are they invested in the MS stack. I would say the MS approach is (or was) very different than the classic NIX or Linux stack. Even if this has changed I recommend taking a look at : PowerShell, MSSQL and learn some stuff about .net core apps, packaging, nuget, assemblies and perhaps a bit of C# lang
Open/Seal are much more commonly used as names when implementing AEAD ciphers. Here are some examples other than libsodium: [cipher.AEAD](https://golang.org/pkg/crypto/cipher/#AEAD) and [ring::aead](https://briansmith.org/rustdoc/ring/aead/index.html).
Both Miscreant and Noise have very specific goals. Miscreant by design implements only misuse resistant ciphers, so adding anything else would go against that. Noise on the other hand implements the Noise Protocol Framework exactly as described in the [specification](https://noiseprotocol.org/). Again, there is nothing else that you can add to the library without violating the spec. However, if you want to move your library forward, I would be happy to give you any advice you need.
AES-256-CBC with HMACSHA256 is much better choice, but these articles you linked apply only to ASP.NET Core. And even though CBC/HMAC can be used securely, modern symmetric cryptography is moving away from doing encryption and authentication separately to using authenticated encryption modes such as AESGCM or ChaChaPoly.
Excellent article. It did help me in my path to understand immutable usage.
I took 70-483 last year, so it's a little hazy but you should know how to use ADO.NET (connections, commands, etc.) and some basic Entity Framework. That should do it.
Both! preferably, in which case the app should convert Markup files to HTML each time they are presented to the user, although I can enable caching of the converted files and track the cache size so it won't grow indefinitely.
HTML is already extremely compressable with gzip. I wouldn't worry about doing all the extra work of converting on the server side and converting back on the client side, unless you already have setup proper compression and are still not reaching your desired filesize. 
I would be interested in seeing how this compares with a ReaderWriterLockSlim.
Could you just zip / compress the existing HTML files? This would be much easier and straight forward to implement rather then converting the documents back and forth. 
As others said: go for gzip. No matter what you will try to do gzip will do most likely much better.
Ha, that's funny. Cake seems to be a very popular choice. I've been considering switching to it, mainly for it to be cross-platform. I just did everything by hand for now as it was easiest.
Yeah but how much more memory is this using, and how much more garbage collection? Also the Subscribe is not thread safe and how to you unsubscribe? I fail to see how this would be better than using ReaderWriterLockSlim or a similar mechanism, but I do like the idea of immutable memory to be sure.
 if you don't get an exception and nothing happens in the database you might have your debugger just set to ignore certain Exceptions/warnings. add a try catch block for all exceptions, log or MessageBox it ?
Do you mean compressing all files in one zip or rather one zip file per page?
Powershell != Windows my dude... And why would one feature of one shell make or break an operating system? Some people prefer fish shell over bash for example. It's just another tool in the arsenal. Btw you can run powershell on Unix if you want.
Go for it, I'm very open to braggi... I mean, chatting about of frameworks to each other. So I came up with the basic concept behind the mocking around 2 years ago. And when .NET Core 2.0 was on the horizon, I decided it was time to put it to paper. I didn't check how other mocking frameworks were doing it until after I got the basics down, didn't want them to distort my design that I wanted to create... Which proved to be unnecessary. Everybody I looked at is using CastleProxy. I don't. I create everything from scratch, generating my dynamic objects through IL generation. And because I control that process, it enabled my design to be stringent and very compact. According to my code coverage, it's roughly 700 lines of code and a dozen classes. I like your idea of getting your expectations in the assert code. I'm going to stea... borrow the concept by utilizing toString() for my Fakes, and you can simply provide the Fake into the details of my Asserter tool, as in: Tools.Asserter.Is(true, fake.Dummy.Equals(null), fake); Something like that. It won't be as all-encompassing and automatic as your solution, but it'll work. I can't really tie my Asserter to my Fakes. It has use outside of it, particularly in handling value equality automatically. I do think your solution is ingenuitive, but I think it comes at a cost of flexibility. I do find a lot of developers don't make use of subclasses when testing so it's mostly open field to use in frameworks, but hilariously enough, I do. Which means, as I understand it, I'd have to limit my design options to use your framework. Although obviously, I'm not your target audience to begin with, since, well, I have my own framework to use. It does look like I can cook up my own instance of NMockitoCoreImpl and do everything manually, though, but that brings us to an issue I try to avoid: &gt; Expect(value =&gt; dict.TryGetValue(1, out value)).ThenReturn(true).SetOuts(123); &gt; But for methods that return void, this alternative syntax is needed: &gt; Expect(() =&gt; o.X()).ThenThrow&lt;InvalidOperationException&gt;(); One of the things about my framework is consistency. My setup method takes a delegate, and it takes a behavior. Returns type X? Provide a Behavior&lt;X&gt;. Void? Provide a Behavior&lt;VoidType&gt;. There is no difference between returns and callbacks. If you want a behavior that is more complicated than just a return, you basically create a method how you'd normally do it with Behavior.Set(delegate). I don't believe I support "out" yet, actually. Will have to look into it. Basically, I avoided Fluent in favor of a more immutable design. I don't particularly like Fluent, and I didn't need it. And for the same reason, I am going to remove behavior [C]. Even though nobody talked about it, sometimes you just need to get your thoughts out there to make a decision. I don't want superfluous options to do something just because it might reduce a little redundancy, I want a framework that is precise to use.
Everything into one zip file will give you the most compression. If that takes too long to unzip on the client side, it might make since to zip the logical components together. Say you have two manuals, each would be zipped so the time it takes to unzip them is minimized.
Programming is rooted in math, so when in doubt search for the math concept with your chosen language attached [like so](https://www.google.com/search?q=c%23+inequality&amp;oq=C%23+inequalit&amp;aqs=chrome.2.69i57j69i58j0l4.3984j1j7&amp;sourceid=chrome&amp;ie=UTF-8)
Well you could use Math.Max and provide a 0 in the options, or you could do as you yourself suggest and put an if in the property, it depends on if you need to display the original property value after 
You are looking for [relational operators](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/)
You can put logic in your set operation to ensure the side length is greater than 0. What you want that logic to do is up to you. Alternativly, you could mark the set as private and call it from a public method in the class that returns information about the operation to the caller
Since you only have 1 thread adding, couldn't you simply remove the lock in `Search`? How does it compare to this implementation: class UserRepository { private readonly object _lock = new object(); private ImmutableDictionary&lt;string, User&gt; _users = ImmutableDictionary&lt;string, User&gt;.Empty; public void Add(User user) { lock (_lock) { _users = _users.Remove(user.Name).Add(user.Name, user); } } public IReadOnlyCollection&lt;User&gt; Search(string criteria) { _users.Values.Where(u =&gt; u.Name.Contains(criteria)).ToList(); } } (using nuget package System.Collections.Immutable)
It wouldn't matter, extracting some software generated CSS is only one small part of rebuilding the whole. I shudder to think what Adobe generated CSS would look like.
Could you show me how to put if in this case in property? 
Fully agree. I’m just commenting on how it could be done. I’d never for a second even think that it’s a good idea. 
Since you didn't *object* to the console app idea, how about a little shell scripting? https://tex.stackexchange.com/questions/260748/convert-tex-file-into-png-without-imagemagick/260760#260760 System.Diagnostics.Process directly into a couple of latex commands, then wait for file output on disk, read into memory, clean up, celebrate? If you wanted to get really fancy, you could create your own local "latex (web) server" using .NET Core that wrapped the process.
 private double _side; public double side { get { return _side; } set { if (value &gt; 0) _side = value; } } See: https://msdn.microsoft.com/en-us/library/x9fsa0sw(v=vs.120).aspx
The DevExpress toolkit has some very thorough offerings in this space.
If you only set a value for a property if it is higher than zero, you are hiding a logical error. It would be better to expose this by throwing an exception: class MyClass { private double _SideLength = 1.0; public double SideLength { get { return _SideLength; } set { if (value &lt;= 0) { throw new ArgumentOutOfRangeException("The length of the sides must be greater than zero."); } _SideLength = value; //never reached if exception is thrown } } }
There exists a C++ library that I could just extern in if I wanted to read/write to disk. However, I'm gonna be updating the equation as the user types (with multiple keystrokes per second) so I'd rather not need to perform constant I/O.
Yeah, a collection of objects that implements iqueryable.
I think you can do this without [this library](https://github.com/paulyoder/LinqToExcel) but it may help. 
Go to Liza at HR to sign the contract and fetch your badge!
Answer contains information about an individual Survey result, there are no correct or incorrect answers. Questions have Choices, and together they describe the layout of a Survey. A Survey has Questions, a Question has Choices, and an Answer holds information about how a participant answered a question. A Response is passed Answers and puts them into a Dictionary&lt;Question, Answer&gt;: public Response(IEnumerable&lt;Answer&gt; answers) { _answersByQuestion = answers.ToDictionary(s =&gt; s.Question); }
worksheetfunction.Find() seems like exactly what i need but i have troubles getting it to work. Cannot get it referenced. Does this work with VS 2013 and Office 2007 (Excel 12.0 Object Library)
Hey thank you all for replying sorry for the delay, I actually went down the rabbit hole and I am trying to understand dependency in jection now since several of you brought it up
&gt; DoAnotherThing(); I don't encounter that issue because I'm continually entering ^k^c (format code) in Visual Studio, which would shift the DoAnotherThing() to the left, making the error obvious.
Can you clarify? What you have now I think _will_ work so long as `data[name]` returns an `object` type.
That's correct. As long as the container and all dependencies are setup correctly, whatever DI container you're using will always either new up an instance of that repo or use a single instance, depending on how you set it up. This makes it really easy to, for whatever reason, switch out your repo implementation quickly. All you need to do is specify the new type to be associated with the interface. 
Yea and no. Yes. If you only ever have one implementation of IEFRepo. No. if you have more than one you will have to have logic (in what is called a DepencyScopeResolver) to help you define what the scope of the interface should be. 
The interop libraries are a bit fiddly and i can't experiment myself atm. things that might help: range objects also have a find and the documentation actually has some implementation examples: https://msdn.microsoft.com/en-us/library/e4x1k99a.aspx if you get that one to work you can try if worksheetfunction.find behaves the same way. 
Could you define/elaborate on this " As long as the container and all dependencies are setup correctly, whatever DI container " ? What do you mean by container/DI container and all dependencies? So basically if I had another class that implemented Irepo, I can just do this. " services.AddTransient&lt;IRepo, SecondRepo&gt; " and it will not instantiate that class where ever IRepo is found? 
You don't need to constrain T for this method: `where T : new()` Other than that it's impossible to know without seeing the documentation or implementation of `SomeClass`.
That's what I thought as well. Even if it is, I know a lot of places that still use it so it is kind of a moot point.
Do you have any ability to modify SomeClass? Does SomeClass implement IList&lt;T&gt;, or does it have its own index implementation? What you really need is SomeClass&lt;T&gt; with public T this[string name] as its indexer method.
I've used it in some hobby gamedev projects I've done on the side. Previously I had worked on the HOF for the fsharp core libraries for arrays to speed them up, and made an SIMD version of the Array functions (https://github.com/fsprojects/SIMDArray) and figured I could do the same for C# 
\^k\^c I assume, needed to escape (\\) the \^, although I believe that's `Comment Selection` and it's \^k\^f for `Format Selection`? I actually use vim mode so format selection is mapped to `=` in command mode (like it is in vim on command line). Anyway, personally I write the code, then worry about re-formatting when I'm cleaning up, so I could see missing the `DoAnotherThing()` not running based on the condition getting in my way while I'm trying to get a solution working. However, the main reason I either use curly braces or put it on one line is because I want to help whoever comes along next, whether or not that's me.
I use the first case. And that's just like we do in our project.
IEFRepo are you referring to the interface in my example Irepo? or EFRepo? Since Irepo would be the interface, and EFrepo would just be class that implements it. And if we where to implement another Irepo I could just hot swap it out right? ..wait unless you mean there's a way if I have multiple classes that implement Irepo then that means I can set up logic where in certain situations in my controller I can have EFRepo instantiated and other situations have a different Irepo implemented class Instantiated? 
Sorry. On my phone and had a hard time reading. IRepo can have multiple implementations and yes according to DI principles you should be able to have different vales for it depending on the SCOPE of what you need to do in that scope. It's an advanced topic within DI but have a look online for DepencyScopeResolver of your container. Webapi has a default DI resolver which you can override. 
Thanks for your response after much trial and error, these are the result that finally got everything working for me: 1. Created a new .NetStandard Class Library 2. Used the MsTest v2 Test Adapters (i tried using the old TestFramework that resharper kept recommending Microsoft.VisualStudio.TestPlatform.TestFramework however R# test runner would always say "Test Inconclusive: Test Cases not found errors" and would only run 1 framework) &gt; &lt;PropertyGroup&gt; &gt; &lt;TargetFrameworks&gt;net471;net461&lt;/TargetFrameworks&gt; &gt; &lt;IsPackable&gt;false&lt;/IsPackable&gt; &gt; &lt;/PropertyGroup&gt; &gt; &gt; &lt;ItemGroup&gt; &gt; &lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.6.0" /&gt; &gt; &lt;PackageReference Include="MSTest.TestAdapter" Version="1.2.0" /&gt; &gt; &lt;PackageReference Include="MSTest.TestFramework" Version="1.2.0" /&gt; &gt; &lt;/ItemGroup&gt; 3. R# test runner now runs both targeted frameworks - piece of cake! Visual Studio Test Runner does NOT run in each targeted framework
Everything in English, except maybe comments, depending on who will be reading my code. 
Ok I think I am beginning to understand better, and when you say container you are referring to the class that will be constructing THE Repo? or in your example the container class of IBar would be Foo? 
WorksheetFunction.Find() probably isn't what you want. It's equivalent to string.IndexOf() in C#. ActiveSheet.Cells.Find() will look for matches on the worksheet. It returns the Excel.Range object of the matching cell. If no match is found, it returns null. 
To send an email you obviously need access to the SMTP server. So does Outlook. Having access to the server means through SMTP. Not like you have to log in. 
The container just manages the mappings of interfaces to concretions and manages creation of objects . In my example the container is implied. 
I may have worded something wrong. I'm fairly new to this so I apologize for the confusion. I was attempting to use a method shown in the first answer here: https://stackoverflow.com/questions/9201239/send-e-mail-via-smtp-using-c-sharp A coworker in IT uses this exact process and it works fine. However, there is apparently a lock down (somewhere, I don't know details) on what virtual machines could be accessed this way. There's a chance I could be added, but it sounds like it would be a process, so in the meantime I was trying to create a backup plan.
You can use a service like mailgun
You got the error stating "input string was not in correct format" because the value you entered couldn't be parsed as a Double. Immediately after that an exception was thrown (your error). For users, this is definitely not a great user experience. This will result in your program crashing or you website not rendering. Inevitably someone else will enter bad data, so as a programmer you try and anticipate that. This is where boolvar will come into play. You can determine if the user entered bad data, because the value of boolvar will be false. Ideally, you then use that information to prompt the user to enter a valid value. 
Usually english only
*All* my projects are massive. I've created new programming languages. Built systems that handle hundreds of millions of new records per day. Created software to manage all the medical records in an insurance company. Employers don't want to pay six figures for someone to write tiny little utilities. 
So in this case I could do an if statement. If boolvar = false, I could print a line asking to enter an integer. Otherwise do calculation?
You mean, even the class name?
The bool tells you whether or not the parsing was successful.
Zip compresses each file independently, so there is not much difference between single or many archives. You can easily extract a single file from a large archive. I'd go for a single archive because less slack space will be wasted on the disk. Your description is valid for other archive formats like 7z or tar.gz, these require to uncompress all files stored before the one you are looking for.
https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/property &gt; **X AVOID** throwing exceptions from property getters. &gt; Property getters should be simple operations and should not have any preconditions. If a getter can throw an exception, it should probably be redesigned to be a method. But eh, everything's made up and the points don't matter so do whatever makes sense for your uses.
If you can pay for a product, I use [aspose cells](https://products.aspose.com/cells/net) for stuff like this..
Yeah, exactly. 
_Getters_ should not throw. Setters throwing is perfectly kosher. 
TryParse simply returns s boolean whether the parsing succeeded or not, while Parse alone will throw an exception if it cannot be parsed. Usually, it better style to work with booleans, rather than try/catch every parse - you can wrap that TryParse into the if, so that you have a alternative code, if the parse fails: &gt; if(!Int.TryParse(string, out int)) { int = defaultValue}
Somtimes even righting output strings in other languages can make the code confusing. I prefer english only for variables and output for users depending on their request.
I think this is what you're after: invocationSettings.ErrorActionPreference &lt;- Nullable ActionPreference.Continue
To echo this. Gmail is very simple to set up within your application or website. I have been using it on a couple of projects for a while now.
Some services such as Mailgun have an HTTP API for sending email.
There is nothing wrong with having a thread idling...
Just code everything in English.
oops I thought this was /r/fsharp invocationSettings.ErrorActionPreference = ActionPreference.Continue; If that doesn't work, it would help to see the code you have so far.
I’ve had success using the Xamarin Live app on iOS. Pairs with Visual Studio.
there does not seem to be an invocationSettings. I tried scriptInvoker.ErrorActionPreference = ActionPreference.Continue; runspace.ErrorActionPreference = ActionPreference.Continue; System.Management.Automation.ErrorActionPreference = ActionPreference.Continue; but neither of them worked. I am using the code here: https://github.com/PowerShellEmpire/PowerTools/blob/master/PowerPick/SharpPick/Program.cs
Yes.
[TryParse](https://msdn.microsoft.com/en-us/library/994c0zb1\(v=vs.110\).aspx) usage is as follows: double parseResult; if(double.TryParse(stringToParse, out parseResult){ //Parse worked, and parseResult has a use-able value in it } else{ //Parse failed, parseResult does not have a use-able value in it } This is preferable because exceptions are (relatively) expensive, so you don't want them in tight processing loops. They are generally fine in human interface code however. The [parse functions](https://msdn.microsoft.com/en-us/library/fd84bdyt\(v=vs.110\).aspx) are used as follows: try { double parseResult = double.Parse(stringToParse); //parseResult is populated } catch(FormatException e) { //Not a number, handle it } catch(ArgumentNullException e) { //No string, handle it } catch(OverflowException e) { //Number too big, handle it } If you don't need the detailed error reporting use TryParse it's faster and communicates success simply. If you want to get finer granularity of why you failed and don't mind the overhead of exceptions being in your code flow use Parse.
I'll take a look to how decompress one file from C#. Thanks for pointing that out.
Thanks so much.
I was referring to throwing from *setters*, not getters.
I'm not sure what's so confusing here, but... You have an [auto-implemented property](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties) named `ErrorActionPreference` that is a [`System.Nullable`](https://docs.microsoft.com/en-us/dotnet/api/system.nullable-1?view=netframework-4.7.1) struct that wraps an [`System.Management.Automation.ActionPreference`](https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.actionpreference?view=powershellsdk-1.1.0) enum value. `set`ting a System.Nullable is completely transparent... you assign it as if it were the type it's wrapping. However, if you want to `get` its value and use it for something, you need to check if it [`.HasValue`](https://docs.microsoft.com/en-us/dotnet/api/system.nullable-1.hasvalue?view=netframework-4.7.1) before getting said [`.Value`](https://docs.microsoft.com/en-us/dotnet/api/system.nullable-1.value?view=netframework-4.7.1). As an aside, using a `?` after a type is shorthand for a `Nullable&lt;T&gt;` wrapping that type. i.e. `int?` is really a `Nullable&lt;Int32&gt;`
When I see code in another language everything is in that language, there's not a mixture of English in there. If you're going to do it, go all the way.
&gt; Because it's a good too that everyone has to be able to remotely connect. You realize that is another pointless abstraction at the point WebASM gets us to? The browser itself can run "behind the scenes" and you can run your apps (what were formally known as programs) on iOS, Windows, Mac, Linux, Build WebASM into the OS and you have zero need for a browser, other than allow you to type in a destination. And that can be achieved with far less with JavaScript, CSS, rendering engines, history, cookies, ECMAScript, etc is all pulled out. It might as well be a textbox in the OS.
I'm using that; best one I've been able to find
You'll need to add names to your anonymous types. The only reason I know you want to compare ct to ca.catch_type is because I'm a human reading variables with sensible names - the compiler doesn't have a clue.
Yeah you're totally right- I misread the guidelines completely
Every time you loop through your while statement, your Inputs object is be reinitialized.
Yea figured that out. I guess I was assuming it would have just went off of the order. I.e ccatid was defined first and catch target id was defined first so they were paired. 
In your config you can specify a [specified pick up directory](https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/network/specifiedpickupdirectory-element-network-settings) in the mail section. This will create a mail message on the local harddrive (provided your program has write access). Then when your ready to go to production your IT people only need to alter the config with the SMTP server details. Or better yet use a service to pick up the messages to deliver at any time. Either way test your message handling as a reason for change and interface the entire operation. 
Sorry for the slow reply! You might want to look at look at Python.net. It is active, and AFAIK can use all the standard python modules (and 3rd party?). It also allows the CLR namespaces to be treated as pseudo python packages. https://github.com/pythonnet/pythonnet 
I'm English, and I once had the displeasure of trying to fix a bug in some VB6 program that was written entirely in Italian. Basically impossible, our company had to fly over two Italians to deal with it. It's kind of okay if it's code that's only going to be used internally and your company is based in Spain, but the reality is, you don't know where the code or the company will go in future. You might grow and have overseas offices. The company might get bought out. The code could be open sourced. Because we can't predict the future, it should be in the most accessible language possible from the start. I'd say English, but I'm biased because I'm not multilingual.
How can I prevent that but still have a loop? can I offload the values to a secondary variable in the class? 
Move your Inputs object two lines up, so that it exists in the method, can be called, but isn't reinitialized everytime the loop runs.
omg thank you. im so stupid I cant believe I didnt realise it was the while loop. I spent about an hour trying to figure out why it wouldnt work then gave up.
&gt; the main reason I either use curly braces or put it on one line is because I want to help whoever comes along next, whether or not that's me. You're a good/smart guy. :)
SomeClass is JsonData from LitJson. It keeps telling me it can't cast JsonData to T.
SomeClass is JsonData from LitJson. It keeps telling me it can't cast JsonData to T.
Most programming languages already use english, most APIs, libraries and documentations are written in english, so why make a mess? Write the code in english and keep a good documentation. It's always worth it in the long run, and doesn't really hinder you in the short run, assuming you're not really bad at english. I come from a non-english speaking country. My company makes software for a lot of different companies, local and foreign, and we've been coding everything in english for a long while now. At this point it makes me cringe when I run into some really legacy code or DB which was not written fully in english. Generally: Code in english, add comments/documentation at least in your language, with english version whenever possible. 
I have some code that uses MAPI to send messages. https://www.codeproject.com/Articles/17561/Programmatically-adding-attachments-to-emails-in-C
Yeah yeah, I know...I'm working on it....haha
I've used sendgrid.com in the past. Works well from anywhere, and has both smtp support and a rest api. 
Yeah, it's a bit of a quirk of casting a generic type to another concrete type. To get around it, cast to, `object` first, then to `T`: (T)(Object)SomeClass[data] I don't know what the return type/value of `SomeClass[data]` is though. He could blow up on you at run time if the return type doesn't match `T`.
It told me that "cannot cast from source type to destination type". I can't seem to find anything regarding generics and this error though.
I write in Spanish too, i use the Obten for methods and Es for booleans. According to a professor at the uni i study, you should avoid speaking in third person when writing methods (So don't write Obtener)
&gt; Would a method be `GetProducto()` or `ObtenerProducto()`? No, it would be a property.
I second MailGun. Great service and their free tier is quite generous.
Try EPPlus. Interop is a terrible way to do anything in batch because sooner or later, it's going to pop up a dialogue for nobody to answer.
Yeah, that's actually what you're supposed to do. There's no such thing as "asynchronous and avoiding threads"
We use this in our company. Costs a little bit, but extremely functional and customizable. 
What type does data[name] return, before you try to cast it
Agreed cells is their flagship and it shows. My only gripe is their other libraries do a lot, but tend to be slow in comparison to other vendors. 
Returns back another SomeClass. In the actual code, SomeClass is JsonData from LitJson.
I use Greek for variables because I do science and I am Greek. Everything else English though. C# allows for α, β, γ ... which is awesome for a language.
Everything in English.
devexpress is owesome. and not only for that. worth an investment. 
While you are waiting for the real solution (access to SMTP servers), you could use [MailDev](https://github.com/djfarrelly/MailDev) which is a "mock" SMTP server with a web interface to access all the emails it receives.
Yeah, I liked this one a lot. It was the best at dealing with weird shit and being easy to use.
SomeClass is a third-party class my team is using. It holds data that I want to access. I can manually cast it to bool or a int or a string. But then I'd make a bunch of functions based on what return type I want.
If you intend for anyone else to use your code then you shouldn't do that.
A few years ago I had to deal with an entire codebase written in a yet unknown to me Cyrillic language. It was not pleasant.
No es necesario escribir en inglés como te dicen la mayoría, supongo que lo dicen porque su lengua natal es el inglés. Escribe como a ti y a tus compañeros (si es que trabajas en equipo) les parezca mas claro. Yo trato de no mezclar idiomas en nombres de métodos, ObtenerPersona() o GetPerson(), pero no mezclado, no se ve bien. Yo solo escribiría en inglés si la API fuese a usarla mucha gente fuera de tu país.
I've used SendGrid for all my web apps so far. It's well documented and gets the job done. You can get a trial account that allows 100 emails to be a sent a day for free. Unfortunately, anything more than comes with a price. 
^ this is the real answer
&gt; except maybe comments You've come this far. Document in English as well.
What are you overloading T with?
Write clever one-liners, get "clever" results.
Overloading? As in what am I using for T? Just the standard datatypes. Byte, int, bool, string.
I'm outside at the moment. I'll PM you my discord then when I get back home we can have a crack at it. Thank you.
After looking into this more, there is no way to make this generic. LitJson does not allow any way to cast it to a more generic type and then cast it to the types it supports. The best way is to just directly cast the type, as built into the library there is no compile time guarantee that JsonData is any specific type there can't be any generics in this fashion. If possible I would try to persuade your team to use a more mature Json library like Json.Net
Ah. That's a shame. Thank you for looking into this. I'll try pitching using Unity's JsonUtility or Json.Net as you suggested. Thanks again.
It is a feature that tips the scale to Windows, it doesn’t make or break anything :-) As for “can run it on UNIX” - bleh. The huge value is the structured (not text file as with UNIX shell) view of the system. I didn’t look, but doubt that someone went far with that.
When I said I am avoiding threads, what that means is that I would explicitly like to avoid starting new threads. Rather, I would prefer using the task manager, and having it handled on the shared thread pool. Also, if you're going to quote people, please do so accurately, so as to not take things out of context and misconstrue the matter. 
This may be of use to you, however. ```IJsonWrapper wrapper = data; wrapper.GetBoolean();```
It looks like you can do it like this: https://gist.github.com/whoo24/5506804#file-jsontoobject-cs
The real solution here is to remove the set for the property and instead take the side length in the conductor. After all, you can't have a square with a side length of zero, which is exactly what you said in your title but if someone does `new Square();` that's exactly the side length their square will start with. The constructor might look something like this: public Square(double sideLength) { if (!(sideLength &gt; 0)) throw new ArgumentOutOfRangeException(nameof(sideLength), sideLength, "Value must be greater than zero"); this.side = sideLength; } If someone has to be able to change the square length after the square has been constructed you should make the set private and move that logic that's in the constructor into a method, then expose that method publicly and call it `public SetSideLength(double sideLength)` and call that method from your constructor. Also, your public property should start with a capital letter because that's the C# convention.
What about CS degrees taught in non-English speaking countries? I guess they would call an array an "array" instead of using translations that the IDE/compiler would then need to deal with, but when they conceptualise and speak about them do they insert the English words into their, say, Spanish sentences? "Yo tengo un array de string.."? I've always wondered. 
Now imagine if you lived in a cyrillic country. Horrendous. I usually name my classes/methods/variables the same way I would in English. Class MojProizvod, int IzracunajZbroj(), int djelitelj. Although I use Croatian names if I'm coding for my pet projects, any code that goes out (github etc), I refactor the names to English.
This isn't always the best choice, depending on the context. Worked for a social security office. As you can imagine, their rules amd regulations have been used for **decades** before IT got involved. We needed to retain entity names (in Dutch) to keep our developers' sanity. This way, an office worker and a developer were talking about the same entities. If we had used English in conversation, the office workers couldn't understand us because of their imperfect mastery of English (plus, some translations increase ambiguity betseen two very similar options e.g. "citizen" and "civilian"). If we had used English in code, but Dutch in conversation, the developers would struggle with translating everything on the fly (including the already complex explanation they would get from the customer), and you'd still end up with liguistical ambiguities. Keeping the Dutch terminology was the best option. It ensured that the only challenge we were facing was that of writing business logic, as opposed to being hindered by trying to translate a predominantly non English speaking department's nomenclature which would end up confusing everyone during the development stage.
This made me laugh and I saw you had a downvote, so have an upvote :)
Ideally, you want to use english for many reasons, but my top ones are: First, not have a mess with different languages combined (Spanish for your classes, English for framework methods) Second, seeking help in places like stackoverflow will usually require you to translate your code to english to ease other users to understand your code. 
I wouldn't recommend outlooks smtp .. They disable the their accounts way too much if you plug it in to an app to send system messages. Login info etc .. they pick it up as either a robot or spam. Source: experience on a live app had to abandon Outlook and use sparkpost
Man, i just started coding but i gotta say, your code is very lengthy, would that be easier to use Case or properties to make this code cleaner?
I've recently had to work on a project where I had to go back to VS 2010. I love being able to define a property in its declaration.
in spanish we say "arreglo" for arrays, but as you've said we say something like "tengo un arreglo de strings" that's because if we translate string directly to spanish it's "cuerda" the correct way to translate string is "cadena" (chain in english) so "cuerda" and "hilos" (threads) may be confused so that's why we use spanglish when we talk using this kind of terms 
I love the synergy between reflection and code generation, especially using `Expression`. It increases the power of the type system by letting you hide away the type-unsafe bits in a tiny black box with a type-safe interface, and still retains the same performance as normal C#. I've written an entire parser generation system on that basis, for instance, and it's really comfortable to have a compile-time guarantee that your grammar and AST are type-safe. 
Then those tools are wrong for that job. You have to take into account your language, language of target audience of the source code and stuff. I dont think its a smart idea to target notepad audience and drop all the advenced features, because then you could go even further by saying that some people might not know or use some programming language, so why dont we just write everything in binary.
The fastest way to read through an Excel file is [`DocumentFormat.OpenXML`](https://www.nuget.org/packages/DocumentFormat.OpenXml/), which exposes a SAX parser to iterate through the contents of a sheet. For something as simple as searching for a value, it should run as fast as you can unzip a file from disk. 
By themselves they do absolutely nothing. They're just "meta-information" attached (to whatever the attribute is added to). But during runtime you can make use of this attached meta-information. You can look for the presence of an attribute and access the member (properties, methods, etc).
Metadata for reflection
I believe when he said Outlook he meant the application, not the online email service. Which is a consumer product and obviously not meant for email automation. 
With a few exceptions (there are a couple that are potentially used as hints for the compiler/JIT, like ConditionalAttribute or MethodImplAttribute), they're just information. You can write code that does stuff like reflect over the assembly, pull out all the types that tagged with your attribute of choice and do stuff off that, but, by themselves, most attributes do absolutely nothing. You should probably check your docs to find out what the ones you're seeing are for.
So can they modify objects in any way? Surely they wouldn't be used so much if they didn't do anything, right?
They just attach data to functions or classes. You can write other code which then reads this data in the right context using System.Reflection. 
$"" is string.format, expression body and linq. I just love those
I've only used them once, but they were pretty cool - getter and setters (errr, *adder and removers*) for events. https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/events/how-to-implement-custom-event-accessors
One version higher but ‘out var’ really scratches an itch for me.
I found a way to do this with the PowerShell class and got it working! Thanks for pointing me in the right direction! 
Can't believe no one has mentioned yield return yet. Awesome for lazy loading and simplifying custom enumerations. 
I’m a precompiler, does that count?
That depends on whether your precompilation has to deal with operator precedence.
I usually encapsulate segments of a larger expression to avoid having to keep it straight. 
Apart from everything else already mentioned by the others sometimes they are for static code analyzers. e.g: [NotNull] and [CanBeNull] for ReSharper
They're meta, but get really powerfull with aspect oriented programming frameworks - I don't recommend using those without a VERY good reason.
They decorate class members with data, allowing runtime refelction to meta information about said classes. They are used extensively the following areas; * Dependency Injection * Validation * Aspect Oriented Programming * Serialization &amp; Data Contracts
I'm in love with [expression-bodied members](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members).
An attribute allows you to attach additional behaviour to properties or methods. For example, you may add a [Serializable] attribute to a class for JSON serialisation. You could then add a [NonSerialized] attribute to a property within that class to signify that it is to be ignored when converting to JSON.
Don't forget the very useful `[Obsolete]` attribute that flags code and APIs when newer code should be used.
System.Numerics (SIMD) Spant&lt;T&gt; System.CodeDom.Compiler (compile C# source code at runtime) F# using static 
You can read up on them on [Dot Net Perls](https://www.dotnetperls.com/attribute).
And the lesser known [debugger attributes](https://docs.microsoft.com/en-us/dotnet/framework/debug-trace-profile/enhancing-debugging-with-the-debugger-display-attributes) 
Intermediate C# developer here... can you expand on this a bit?
The world runs on English. International discourse is conducted in English, international business and trade is conducted in English, standard communication between aircraft and ships is conducted in English, and software development is performed in English, the majority of the internet is written in English. Like it or not English is the language of the modern and interconnected world. English speakers don't *need* to learn any other language if it's not for fun or if it's not to immerse themselves locally.
You're using the Visual Studio Windows Forms Designer I guess? That one sets all controls to private so you can't access them. To work around that you need to find the file that initializes your form2 (should be form2.designer.cs or something) and change your CheckBox to public. Then you can use form2.checkBox.Checked or so to see whether it is checked or not. You have to repeat that procedure every time you change something in the Forms Designer though. It's one of the reasons I stopped using it many years ago.
About which one ? $string is almost the same as string.format(string, params) but shorter and more readable. It's something pretty much unique to c# irc. You just use it as $"my string goes {here}" with {here} being an atribute/funct/whatever. Expression body is a way to represent function that only return/assign one thing. I stead of doing "stuff(string stuf) { this.stuff = stuf; }" you can go with "stuff(string stuf) =&gt; this.stuff = stuf;". This one is more about personal preference than the others. And lastly, linq. It just works. It's beautiful, sexy and wonderful. If that was legal, i would probably marry it.
How haven't I answer that. Writing getter/setter is a pain in the ass in any other language now
When I'm writing in Java &amp; Hack, those things eat up like, 20% of my time.
I use attributes a lot... perhaps too much. Can be really useful though, and the performance hit isn't so bad if attributes are only read on init.
Think tags/labels of information. You have to use reflection to see which attributes a class/method has. That's literally all an attribute can do. The logic from querying a class/method's attributes using reflection is where all the fancy stuff comes in. 
The "don't do anything" idea, is like, from a straight forward "how does this code, method, class work.. How does the code run/function" well, from the typical way we look at code, the decoration does not matter. It's not like an if statement, or a "public" modifier. Decoration does not matter syntactically (although of course there are proper forms, shit still gotta be compiled) Decorations are like clothes. We could all be running around naked doing our jobs, buying groceries. Or we could ask be wearing only black t-shirts turtle neck Steve Jobs style. Imagine every one of us is wearing the identical outfits. That's vanillia c#. But imagine *some* very few people walking around the grocery store wear pink shirts. And some people are wearing fancy hats. Some people wear pink shirts and fancy hats. Some people have watches some people don't. That's it there's only a few decorations in this hypothetical universe that is all the Fashions there are. Fancy hat, pink shirt, watch So, using a namespace called reflection, I can do amazing things like say quote magical dotnet run time, please produce a list for me of every single person in this grocery store who has a pink shirt. Then I can make assumptions or otherwise perform actions on this group of people. All the pink shirts come line up over here because I would like to give each one of you a bag of apples. I don't know what the analogy is breaking down. But kind of not because each pink shirt has a tag with washing instructions. And even though everyone is wearing a pink shirt, they're washing instructions, or really any arbitrary information stored on the tag, can be read. So I can say remind me of all the pink shirt at individuals, I would like to read the tags. Those tags being like The Meta information the are attributes in store. What's safe if they're wearing a watch is binary either wear the watch or they don't wear the watch. But shirts have other information like size. Small, medium, large Maybe that analogy helps, I don't know. But systems have really come to lean on this meta information, because it's so useful, to such an extent that it becomes built-in parts of the framework. I'm very used to asp.Net where every call to a web server is a method on a class, simple. "when client wants X, server you do Y" and I write a bunch of code and that is the 95% I typically care of them. But there's additional important necessary meta information specific to the http protocol. Is it a POST method or a GET method. Both of those have their conventions but result the "same" thing X request yields Y behavior and/or response. So the magic that is the existing framework used those meta information to make any determination at needs. This might be like instructions to the grocery store clerks that people with watches are to be greeted as madam and people without watches are to be greeted as sir. The relationship between watches and instructions is up to the framework, the rules of the grocery store. We might also have rules that people without watches require Security checks and there's a guard out front who deals with non watch people with extra caution. But if you have a watch just slide on in heck will give you a 25% discount. But we can change the rules of the grocery store pretty easy without needing to have people redecorate themselves. And conversely it's easy for people to indicate their desired treatment by just changing shirt color. The best part about this system is that many systems can operate on the same classes in piece of code. Your framework can have a bunch of tags for decoration and my framework and have a bunch of tags a decoration and they don't have to be the same. And we can invent all sorts of arbitrary sets of decorations so that the same people can go from a grocery store to a bookstore where we care about the shoes you're wearing in the color of your pants and if your belt is fabulous or trendy Maybe the grocery store is asp.net and the bookstore is whatever your Bluetooth framework is? Well hope that's help somewhat I had fun writing it. I'm going to go wear a watch. Have a good day! 
It was the first one - thanks! I had no idea.... And yes LINQ is the shiznit
you need to download a bluetooth driver most likely
A bit more of a VS thing but i like pasting JSON as classes. Changed my life
&gt; By themselves they do absolutely nothing. Well that's not *entirely* true. For the majority it is, but for instance SerializableAttribute is read by the compiler and causes it to emit a bit in the metadata for the type (marking it serialisable). I don't know if there are others that work in a similar way, but several are also read by the JIT compiler and runtime in general.
I've only used `[DebuggerDisplay()]` before. Thanks for the link.
I think this works private T GetObject&lt;T&gt; (JsonData data, string name, T defval) { if (data.Keys.Contains(name)) { string jsonString = JsonMapper.ToJson(data[name]); return (T)Convert.ChangeType(jsonString, typeof(T)); } return defval; }
*facepalm* Is this for r/NotKenM or something?
Here's a sneak peek of /r/NotKenM using the [top posts](https://np.reddit.com/r/NotKenM/top/?sort=top&amp;t=year) of the year! \#1: [Not KenM on kidnapping.](https://i.redd.it/67hcmfcfp4101.jpg) | [97 comments](https://np.reddit.com/r/NotKenM/comments/7gr4j7/not_kenm_on_kidnapping/) \#2: [NotKenM but actually Ken B](https://i.redd.it/a6cxes5utw901.jpg) | [96 comments](https://np.reddit.com/r/NotKenM/comments/7q7pjb/notkenm_but_actually_ken_b/) \#3: [Think of the children....](https://i.redd.it/rh4tpv3ekz2z.jpg) | [74 comments](https://np.reddit.com/r/NotKenM/comments/6gkkpv/think_of_the_children/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Yield return. I didn't think of it as less well known until a coworker had to ask me about a function that returned an IEnumerable using yield return: he wanted to know why I didn't just put everything into a list and then return the list. We only use that function in a foreach loop; his method would have used more code to produce something that would start enumerating around the time the yield return method finished enumerating.
I love yield return. I just wish everyone else was onboard. I didn't think of it as a less well known feature until a coworker had to ask me about a function that returned an IEnumerable using yield return: he wanted to know why I didn't just put everything into a list and then return the list. We only use that function in a foreach loop; his method would have used more code to produce something that would start enumerating around the time the yield return method finished enumerating.
Wow! Thanks!
 Span&lt;int&gt; arr = stackalloc int[10]; This has helped with performance a lot, because it avoids allocating a heap object.
Oh hell yeah. Now if I could just get the Jenkins admin to configure CI to build with a version of msbuild that supports the new syntax, life would be complete.
Is f# a c# feature?
Honestly, I've mostly forgotten about it since the invention of LINQ. Once in a while I use it, but its very rare.
Kindof. The fact that interop between .NET languages is easy means you can use the right language for the job.
Definitely generics and lambda expressions. 
No, it is a very lousy and bad idea. For bad or worse, the semantic meaning of `static` is at very least shared between C, C++, Objective-C, Java, C#, F# and D. Even if the semantic is not 1:1 among all those languages, the idea of sharing data, or being something that persists between calls is common to all of them. So lets not break the meaning of 46 years of using `static` in C derived languages.
&gt; This useage is so ambiguous that it makes this the most often incorrect answer on CS exams at colleges everywhere. If students are getting the `static` keyword usage incorrect in _exams_, then they have bigger problems. It's a fairly fundamental and simple keyword that is usually learned and used early on. &gt; Why does C# employ such an ambiguous and misleading terminology? As the other posted, `static` is a common term in computer science. You'll find it in C/C++ and Java. This is important because C# was designed to be easily accessible and familiar to existing C++ and Java developers. &gt; shared Probably a bad idea. "Sharing" happens across the board. You can be sharing variables/data between classes. Sharing information between applications. There's a concept of "shared memory". All in all, there is no ambiguity for `static`. Even the term itself dates back to C (and maybe earlier?) where it denoted "statically allocated memory" rather than "automatically/dynamically allocated memory". You're welcome to suggest anything you want to Torgersen. I don't think though he'll agree with your idea.
1. No, it shouldn’t be changed. The benefit for clarity of expression has to be weighed against the amount of code the change will break. 2. It costs you little to make this proposal on the C# github and get all the feedback about the idea that you could possibly want.
A dictionary definition: &gt; pertaining to or characterized by a fixed or stationary condition Makes plenty sense in context. It's fixed to the class, not to instances. I don't think you've really talked to many about this, if you truly haven't heard a single person contradict you. &gt; "Shared" would've been a more descriptive and less ambiguous way to go about this. Probably one of the worse ways to go about this, because it conflicts with scope. "private shared X" Doesn't make immediate sense, now does it? How is it shared if it's private? At the end of it, you have to know the context behind what it means to be "shared", just like you have to know the context behind what it means to be "static". And IMO, static is easily the better choice between the two because it is in fact, less ambiguous than "shared". And we definitely should not introduce "shared" as an option. Consistency is good, having half the time shared and the other half static is a distraction at best.
This feature is called string interpolation. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated
I realy like the null coalescing operator. It‘s perfect to be used in lazy loading scenarios. Like: public User AppUser =&gt; _appUsr ?? (_appUsr = GetUser()); In combination with the null propagating operator, it‘s also a great way to provide fallback values. public DateTime LastAction =&gt; AppUser?.LastAction ?? DateTime.Now;
Best summed up answer I’ve ever seen.
I have been programming in .Net for 9 years and I still don't know.
Math is done with Greek letters, quit being such a brainlet.
Thank you so much! That was exactly what I was expecting! I have also found very good tutorial about properties here: https://www.youtube.com/watch?v=gvQziNULkdY
Never used the others, myself, as I have been blissfully shielded from front-end UI work for the last few years. ...and I'm too lazy to look that up in the documentation, right now.
No idea what either of those are but im going to use classes and start using Its and floats 
No idea what either of those are but im going to use classes and start using Ints and floats 
&gt; It's something pretty much unique to c# irc. Not really. There are [numerous other languages](https://en.wikipedia.org/wiki/String_interpolation#Examples) with string interpolation features. C# is actually kind of a late-comer to this particular party.
I was looking to see if anyone brought up how the keyword static relates to memory allocation :-D
Throw as an expression e.g. this.field = field ?? throw new ArgumentNullException(nameof(field));
kinda
I just wrote a bit of heavily Expression-based code for the first time and it really is incredibly powerful. Made writing a fluent interface for a mini-API I was writing for the team into a really fascinating experience. 
2 and 3 on your list are definitely ones I need to make sure I’m up to speed on. 
These aren’t really lesser known right? They’ve both been around for absolutely years. 
The other way around ;) Most of C#'s "headline" features were in F# first.
OP asked for well and lesser well known. Both are indeed well known and around since long time, but I still like them more than other newer features. Lesser known feature I like : Workflow Foundation 
I meant the way c# handles it with $"". Not the String inerpolation as a whole
Take a look at PostSharp for a glimpse of the real potential of attributes in C# code: http://doc.postsharp.net/
When I was a C# newbie I saw the simple "metadata" explanation time and again and it took me years before I really saw good examples. Here's what it means. In general, you can make your own attribute and apply it to anything you want. It won't do anything at all. The compiler does some work to note that the attribute is applied to the thing, but that's it. ("A thing" in this sense can be an assembly, class, method, or parameter. You can make attributes that are valid for one, some, or all of those things.) For them to "do" something, other code has to run that uses reflection to dig through your assembly and look for the attributes. Then it "does its thing" based on the attributes. This is super abstract, so let's talk about some attributes that have concrete examples. `SerializableAttribute` is one of them. Types that want to participate in .NET binary serialization have to be marked with it. It means you're making a promise that they will follow certain rules. It manifests in a few ways: * If you try to use `BinaryFormatter` to serialize/deserialize a type, it will first check if the class has been marked with `SerializableAttribute`. If not, it will refuse to proceed. * The compiler itself is aware of some of the promises and, if it notices a type is marked with the attribute, it can tell you at compile-time you broke the promise. (I'm not super familiar with exact examples.) `EditorBrowsableAttribute` is another. You use this to indicate to IDEs how you want a type or method to show up in Intellisense. When the IDE loads a referenced assembly and starts building the data structures it uses for Intellisense, it looks for this attribute and will omit things if your attribute tells it to. More complicated uses of attributes include tools that run as part of your build process, this is really cool. They can do things like auto-implement tracing and logging for you. The way they work is they define some attributes you use to mark things you want to have the auto-implementation. After your assembly is compiled, it's fed to a secondary tool that examines the assembly, finds marked members, and injects new IL for the tracing and logging. So that's why they're kind of confusing. Most attributes don't do anything on their own. They are like little post-it notes stuck to parts of your code for other tools to find and interpret.
&gt;which version of a GetHashCode() is correct &gt;actually they're both wrong
For specifically using dollar strings for string interpolation, perhaps. But a fairly trivial language-specific bit of syntax is kind of an odd thing to proclaim as being first to. Why should I care they invented dollar strings specifically?
No real reason to care I agree, I find it neat and more readable, that's all
You can use expressions to get the semantics of the code and compile it at runtime. For example in Entity Framework you write ` var blogs = db.Blogs .Where(b =&gt; b.Rating &gt; 3) .OrderBy(b =&gt; b.Url) .ToList();` and those expressions get merged and will be converted to SQL statement.
In the end i managed to solve my problem using Range.Find() function. Thanks for all your help guys.
Interop maybe not be the best way but is does the job for me. Thanks though.
I run the search only once (per program run), but its searching several different values in different sheets. And speed IS important. I dont want to wait several minutes for an app to check if some values exists in an excel file. Interop Range.Find() method does the job for me. 
Tbh I prefer initializing a property in the constructor. It makes me think less. Sometimes you need those properties to initialize something else and then you have think about when `SomeConstant` will be set.
I think this is not something to be proud of. Probabky you shouldn't write such code in production apps UT you are using this feature for example when subbing things in nsubstitute and probably in other mocking frameworks. For example when you write foo.Stub(s =&gt; s.Bar(null, 42)) Have you ever wondered how the underlying code knows that it should mock method`Bar` and do not invoke it? 
Yea I was going to throw this out there too. Love the type (and inherent null) checking, along with the inline declaration. 
It can also be used for validation and business flow.
I love abusing IEnumerator for fake asynchronous code. This may just be my Unity background talking. 
Oh man. The days when C# didn't have interpolated strings. I was so jealous of PHP, Ruby, etc. Only thing I wish `$""` could do was templating / localization. Because it's done on the compiler end, you can't dynamically show different strings depending on the language, unlike with `string.Format`.
&gt;Can I say async/await and async/await? [Sure!](https://twitter.com/ignasi35/status/845339657474859008?lang=en)
I don't know if proj4 had c# bindings but it is a de facto standard lib in c++. You may want to check out ArcGIS.
I was reading the getting started guide and it mentions using the "dotnet install -i" command to install the .NET Core templates. When I run it in VS2017 command prompt, I get: dotnet install -i whatever No executable found matching command "dotnet-install" Any idea why? I have .NET Core and Standard installed, latest VS2017 update (as of today), etc. Never done much with Core though, so it could definitely be my own ignorance... Side note, it seems to just use anything I use for the first argument and try to execute it with a "dotnet-" prefix: dotnet hoopitydoopity -i whatever No executable found matching command "dotnet-hoopitydoopity"
Haha, first I was like ”wow! Has this finally happened?!”, then the disappointment came :(
I think this may be my favorite feature, maybe only challenged by LINQ. I only started to use it when I read about how it works, and to be fair, it isn’t *that* complex. I have migrated away from almost all my callbacks and manual threading when I do c#. I have sometimes even scrapped timers in favor of a while loop with an await’ed sleep. Super weird, but really, if you learned programming from scratch, I think the sequential logic of async / await makes much more sense. Also, error handling is sooo much easier, exceptions are the pragmatic programmer’s primary error tool, regardless what my pure f# brain says and to be able to “pretend” that the following works just like any non-async code is beautiful: try { foreach (var user in users) { await user.DoSomethingAsync(); } } catch (Exception e) { Console.WriteLine(“something went wrong”); } 
Given the English language keywords, you should certainly use English with common words, e.g. verb prefixes of your method names such as `Get`, `Fetch`, `Submit`, `Write`, `Run`, etc. With nouns, I find that it gets trickier. If your software is for a non-native-English country and relies on a lot of domain knowledge, those words may not even properly map 1:1 at all from your language to English. I've found this to be painfully true with accounting software. It simply isn't possible to find unambiguous English equivalent terms. And even when it is, you're just making the code harder to read for others. (Consider a scenario where the customer calls with a native-language term, and you're trying to debug the code, but now you're needlessly tasked with the additional burden of first having to guess how the developer translated this into English!) So, IMHO: * simple, common language: absolutely in English * libraries that don't have much domain knowledge / are primarily for developers: English * domain-specific code: consider that going native may be easier for everyone involved
How did I not know this?! This will change my life for the better.
Which is done through reflection.
I mean WHY can’t we write public int Foo { get; set; notify; } ?! I get that mixing the language syntax with the framework is not the best thing, but come on, we got async / await with Task.
Yup. This is exactly the sort of thing I ran into. at the end of the day, I believe your examples `DeleteBurgerrecht` and `GetListOfMeerderjarigePersonen` sum up my experience: do use English terms that are commonly used in programming, but don't use English where the native domain language offers the more specific terms.
We're programming in German because there are terms in our domain that have no English term unless you describe it instead of just naming it. But for verbs (think about getters in Java) we still use getGermanNoun to keep the semantic and support tooling which expects such convention
8 years for me. I know some of the words, google knows others, and bob, the guy who sat behind me in algebra 9 years ago, knows the rest.
One of wpfMath rendering examples shows console app that can create png. Maybe it does not need WPF for everything? 
Lemme see that AST
I love iterators and *cannot wait* for async iterators.
In my experience, few developers take the time to fully understand async/a wait. The complexity I'm referring to are the abstractions the keywords cover, and how not understanding them can come around and bite you in the arse. Successfully _using_ the keywords is incredibly easy, but it's just as easy, if not more so, to use them incorrectly. In my experience. 
[BlockingCollection](https://docs.microsoft.com/en-us/dotnet/standard/collections/thread-safe/blockingcollection-overview) really makes pipeline and worker thread implementations a lot easier.
It's on Wikipedia so , there.
Escuzzi....what is this JSON paste to class you speak of? Native to VS?
 true. but actually even better is their support. that makes a huge difference. the library is very very complete and you may tackle a problem wrong. their response time is within a few hours. I am not working for them. just reporting my own experience. 
Glad you liked it, I wasn't sure how far off the deep end I was as I was writing it. Since I responded there's a lot of other great answers and some featuring code so I think maybe you might have heard the answer already. Essentially, yes, they can be used for grouping objects. And sometimes we use them to identify a group. But sometimes, just like a survey of who in North America is wearing a watch, just because you can group things that way doesn't mean that's what you're interested in. One of my favorite obscure ones built into dotnet is [DebuggerStepThrough] (https://msdn.microsoft.com/en-us/library/system.diagnostics.debuggerstepthroughattribute.aspx?PHPSESSID=tn8k5...) which instructs the debugger to step through that method while debugging, kinda hiding it hiding it from existence. Why would you ever want to do this? Because you can. Is all. The question of why and what you would use attributes for is hard to put a finger on, because they are designed to be a generic extension point for anything and everything you might ever want to do that isn't code It's like the language designers said "well I don't want to be adding a million new keywords or language features or etc every year when somebody's got done new clever idea.. How can we let people sorta have a generic hook into the not just the runtime, but compile time, features." so attributes are there for you to invent reasons to use them, and it's actually just ridiculously easy to define your own attribute and just start using it. I think the best way to get a sense of how their used is to watch how they're being used in the wild and see what others have done with them. Keeping in mind that the "how" it does it could be insanely complicated proprietary details. Attributes are like the tiny tip of the iceberg. They are the way you leverage someone else is insanely complicated code. Like debugger step through, it's easy to decorate a method, you understand what it's going to do, you have no idea how the debugger works. So it's an easy way to let consumers of your api hook into various mandatory or optional types. 
Look in paste special, paste json as classes
It renders it with Windows (platform-specific) drawing libraries and creates a snapshot of that.
If you don't mind licensing hell you can convert it with [ArcGIS](https://developers.arcgis.com/net/). The specific methods you will need are [GeometryEngine.Project](https://developers.arcgis.com/net/latest/wpf/api-reference//html/M_Esri_ArcGISRuntime_Geometry_GeometryEngine_Project.htm).
I think OP means [this](https://marketplace.visualstudio.com/items?itemName=quicktype.quicktype).
Good point. Their support is extremely thorough.
In case you don't actually care about the column names, in c# you can use reader\[0\] or reader\[1\] the same way you use reader\["columnName"\]. In case you are executing an update command, you can use ExecuteNonQuery command and it returns the number of rows updated.
&gt;We only use that function in a foreach loop; his method would have used more code to produce something that would start enumerating around the time the yield return method finished enumerating. I have no cut-and-dry answer about which is definitely $100% faster than the other based on what you've said. Ideally, though, the competitor would probably have the return type be the `List&lt;T&gt;` since that helps the JIT inline parts of the consumer loop, which can in turn open up other optimizations. Of course, rarely if ever will the `List&lt;T&gt;` approach offer a big enough absolute advantage to be worth seriously considering if there's no reasonable expectation for this to ever be "hot". Anyway, if the producer and consumer are both CPU-bound code and the count is shortish such that you're not wasting too much time resizing arrays or evicting too much of the beginning from too many caches and your peak memory usage will not be crazy, and if nothing actually *needs* to be returned to the next level out until the whole loop is done, then the "build `List&lt;T&gt;` first, process after" version has some advantages: 1. Better CPU cache usage (you're doing fewer unique "things" at any part of the process), so you have more room for data in the cache. The smaller code size (as in, smaller assembly code, not smaller C#) and lower rate of stack frame shenanigans (I expect) probably help too. 2. Faster looping on the other side, especially if the variable can be typed as `List&lt;T&gt;` (but even if you have to play the pointer-chasing game, `MoveNext()` is comparatively going to be much faster than the `yield return` state machine, and at least it's typed as `List&lt;T&gt;` on the producer side). Then again, if you're making a list of a few million elements or pausing for I/O, or if you have some value in surfacing partial results as the processing advances, then returning a lazy sequence is going to be speed-competitive. Just thought it would be fun to bring this up, since it seems like such an obvious thing: "why write more code that waits until the whole sequence is ready before processing any of it, when you could write less code to process the sequence as it's produced?".
For the most part they are just syntax sugar for a static method but damn it's some nice sugar. Looking forward to seeing where C# 8 goes with 'extension everything' and a more concrete way to organise things.
I would rather say it's hinting with metadata for reflection, as this implies that it has an actual usage. Like entity framework using it to get hints on how to store data in a SQL database
thanks, i forgot about this site. My only issue is i end up looking at a project and getting lost. i was hoping someone who is working on a small open source project was looking around and would be happy to get some help.
Maybe you should find a project that actively helps new contributors by tagging issues as "beginner friendly", similar to what the rust repository does
mmm, only 1 of the projects on up for grabs is tagged as beginner friendly. And this bugs me anyway, i should be able to walk up to a large project, look at the issues posted and get to work. I have a bachelor degree but it means nothing....
No. A bachelor's means that you could walk up to a large project and eventually understand enough to add to it. Experience lets you contribute to large projects faster. Who told you that a bachelor's degree removed the need for ramp-up time on different projects?
no one, it's just a 3 year full time degree i though that would give me more understanding. I haven't been able to walk up to any project that wasn't my own and contribute yet. it's been a year since i graduated, i swapped to c# from Java so bit of time there but i feel useless. I need to do something that says to myself and employers that I am worth highering! Atm the only thing i could think of is expanding my chat server with xamerin so it can go cross-platform since everyone wants but i could do the same thing expanding it with ASP.NET since browsers are cross platform too. I have a sub to pluralsight, I learned c# from there, so I have access to great learning material.
Pick a project, invest time in learning the coding style, patterns, framework etc. until you get to the point where you can make useful contributions. That's how you make yourself look good to potential hirers, anything else is just looking for shortcuts and excuses.
The bachelor's gives you the tools to ramp up, but it is each projects responsibility to ensure that new contributors have a place to start. That level of triaging is really difficult for a lot of project. Additionally, I'm not entirely sure how focused the major of Information Technology is on software development compared to system administration. Are you in another country? Ah, post history says Australia, so it might be different. In the US, the perception is that a degree in IT == sys admin. Have you been to /r/cscareerquestions or /r/cscareerquestionsEU ? The first can help you troubleshoot your resume in the resume thread. There are so many different things that can can go wrong with a resume and application strategy. What do LinkedIn and Indeed say in terms of demand? Have you talked to any 3rd party recruiters? How are your interview skills? Nobody expects a beginner to have all the answers; only an idiot would put the future of their business solely in the hands of one junior developer. It's okay to feel like you're not totally ready, that's imposter syndrome talking.
But how many existing non-toy projects did you work on while getting your degree? It's a skill to learn like any other but this one is rarely talked about as it's a infrequent thing for most developers. One good way to get introduced to a project is to look at its tests and/or docs if it has any. This will let you know how the software is supposed to used. If the project doesn't have these things then you can consider writing them as a way to learn how the project works.
Might be because I just did this but custom attributes for properties are pretty sweet.
Ha I didn't know about using static until a few days ago. I wrote a static class and couldn't access it until VS suggested "using static" I had no idea that was a thing
&gt; I should be able to walk up to a large project, look at the issues posted and get to work. Imo this is unrealistic. You've missed out the step of investing time required to get your head around the codebase. That step never goes away, and the larger the project, the more time that step takes. 
One approach: take a look at one of your personal projects, and consider a feature that you haven’t added yet because it seems too large and complex to tackle quickly or on your own. Then find an open source library that provides that feature or something close to it. Work on integrating that library into your project and you’re bound to trip across issues, or areas that need improvement. That’s when you step in and contribute to the project. 
Attributes! There are several useful attributes that you can use: `[DebuggerDisplay]` to configure how a debugger displays an object `[DebuggerStepThrough]` to instruct a debugger to step over a particular bit of code `[Obsolete]` to mark a method or class as no longer used, without actually removing it `[InternalsVisibleTo]` to allow other assemblies to access internal members on the current assembly `[Flags]` to mark an enumeration as a bit field, allowing bitwise operations (and/or/xor/etc) `[Conditional]` to only permit a `void` method to run if the condition is set (like `#if CONDITION`) `[PrincipalPermission]` to demand that the executing principle has a specified role (like Administrator) --- On the topic of lesser known features of C# are the interesting, although _extremely_ obscure attribute targets. Common in P/Invoke (specifically the `[return: MarshalAs]` attribute), there are a number of different targets that you can use, such as `assembly`, `module`, `field`, `event`, `method`, `param`, `property`, `return`, `type`. These targets mirror the `AttributeTargets` enum used in the `[Attribute]` attribute. They are used to instruct the compiler exactly which element you are targetting with an attribute. An example of this is: using System; using System.Reflection; [assembly: AssemblyTitleAttribute("Production assembly 4")] [module: CLSCompliant(true)] namespace Whatever { } Obviously, you would be _very_ hard pressed to spot these targets in the wild outside of P/Invoke calls and the AssemblyInfo class.
&gt; In the US, the perception is that a degree in IT == sys admin. Its the same in Australia. That said, looking at various comp-sci and IT degrees, some universities blend one with the other. Overall the idea of any comp-sci degree is you should come out understanding principals of programming, problem solving and best practice, and the ability to understand paradigms, such that see a new language in a paradigm you understand should not throw you into confusion, because its just converting syntax to structure logic. 
Why does the weapon need to know which unit is carrying it in which slot at all? 
Huh, that's a really good question. It may only need to know whether it has a home or not, which is far easier to implement than knowing where it is. I'll have to think through the rules of the game to make sure that doesn't mess with me down the line, but at first glance I think you may be onto something. Hypothetically, if it did, is there a better way to do it? 
http://www.infirmary-integrated.com/ Something I’ve been working on for a while, it’s small enough that you could pick up without too much trouble but complex enough to be of value maybe? If you’re interested, let me know. Since I’ve been developing it solo, I don’t really post issues or a roadmap lol. 
When coding on your own projects and learning new languages or programming for the first time don’t try to focus on best practices and how things should be done, just do stuff. But a general rule when it comes to coding is keep it simple and then make it even simpler. Complexity comes from the system you build and not the code you write. Regarding your problem more specifically watch out for circular dependencies, sound like you are running in to a design where objects depend on objects that have them as dependencies. You will get in to issues where it is hard to create and pass stuff around. 
Yeah, that's why I had indicated that the *perception* was that IT is sysadmin, which will affect their marketability as an application developer. The problem is that an IT degree might not actually teach you those same concepts, as the curriculum might be totally different. 
Why does it need to know if it has a home? 
A friend of mine is working on Wyam.io No clue if he needs help but I know he's alone on it. 