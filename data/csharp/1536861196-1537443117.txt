That’s the VS way. 
You're right I think that Microsoft should work on a new open source framework like wpf instead of focus on UWP.
From the docs: &gt;because the clock has finite resolution, using the parameterless constructor to create different Random objects in close succession creates random number generators that produce identical sequences of random numbers. Have you tried instantiating a single static Random object and using that everywhere rather than creating a new Random object every time you create a new object that needs random values? &gt;I just want to know why .NET Core and .NET framework works differently The short (but useless) answer is that they're written with different code. If you want to refer to the actual source, the Framework version is here: https://referencesource.microsoft.com/#mscorlib/system/random.cs,bb77e610694e64ca and the Core version is here: https://github.com/dotnet/corefx/blob/a10890f4ffe0fadf090c922578ba0e606ebdd16c/src/Common/src/CoreLib/System/Random.cs &gt;and which one I should work with. If your employer or the project you're working on is already written in .Net Framework, use that. Otherwise, use Core. Prefer Core when you can; it's the newer version and will likely see longer support.
just for funs, i did exactly this. and it worked fine. can you verify that your query is actually returning values?
I put my hope in Blazor, developing web app with c# would be awesome considering that asp.net core can manage the server side!!
what .net framework you are on? 
&gt;touch apps which, well, are no really that popular on the Microsoft platform(s). Unless you have a surface.
ITT: people thinking UWP is just an UI framework instead of a modernized Win32.
I totally agree with you looping through nodes and doing manual lifting like this is messy! Have a look into LINQ to XML - a much more modern and clean way to be working with XML in C#. Just a random example on Stack Overflow: https://stackoverflow.com/questions/8756888/linq-to-xml-where-clause
Think of statics as Globally available methods. Example. &amp;#x200B; Debug.Print("Here we is..."); .Print is a static. I never instantiated an instance of the class Debug. it was immediately available. you could use statics to create an instance of that class (in java this help with creating context - but lets not get into that...) [https://pastebin.com/Xh38H2hr](https://pastebin.com/Xh38H2hr) &amp;#x200B; Take a gander at this tiny class. You can use Statics to also create an instance of a class. &amp;#x200B;
&gt; UWP apps are handicapped by the appx deployment model. Nobody, in either the enterprise or regular home user camp, wants that. I disagree with that. The appx deployment model is a really good thing. What sucks is that appx was tied to the Windows Store. I use the past tense because they are eliminating that restriction.
Or even just a laptop. I often use the touch features.
UWP seems designed to be Microsofts answer to making development easy for their own IoT platforms... IE Xbox, Surface, Windows 10, Windows TV. IMO the success of the UWP platform relies on the market penetration of future Windows products. I think there is a lot of potential as IoT devices become more and more prevalent, UWP could be the edge Microsoft needs. But I'm not ultra confident... If the Windows Phone still existed I think things would look a lot brighter. 
What about Pivot instead of tab control?
That's fine if I'm on a phone or tablet, but totally inappropriate for the desktop. There are certain things you expect from a tab control such as being able to see all of the tabs at the same time and the way keyboard shortcuts work.
Why wouldn't you be able to see all the pivots? You can change the size. You can also use Navigation View Top Menu. 
appx hasn't been restricted to the MS Store since November 2015.
&gt; FileSystemWatcher this is an abomination of code though. beware.
&gt; Some of the code is old though When you do notice that kind of things on docs.microsoft.com (effectively the new MSDN), consider leaving feedback about it. It creates a GitHub issue, telling the docs team where they should focus when updating code. (And if you want, you can even submit a Pull Request to fix it yourself.)
If you run out of room for the tabs, they just start another row. Pivots run off either edge of the screen so that you can swipe left/right to get to them.
Well yea. Your company could have a private store or someone could clue you in on the hidden "developer mode" settings. But that wasn't exactly accessible to the common user.
No incentive to build UWP with a dead phone.
It hasn't needed the developer switch since November 2015.
The First Book I read on C# was [C# Yellow Book](http://www.robmiles.com/journal/2016/10/25/c-yellow-book-2016-cheese-edition-now-available), which might be too basic for you I can't tell. But I can't recommend it enough! It is free, the Author is great, and he gives a good introduction to C# Fundamentals! &amp;#x200B; The Yellow Book is not a comprehensive resource on all the language features. The books you discuss seem to be aimed more at intermediate C# developers who are looking to go deeper into the language. My suggestion is to check out the Yellow Book (Nothing to lose its free!). Skip chapters you already understand, or ditch it entirely for one of the books you mentioned if its too easy. &amp;#x200B;
Sweet, good idea! A lot of it is old winforms related things or even ADO.NET stuff
UWP is going to stay. But it will grow at a snail's pace. **LOB Apps:** * IT Departments needed training on Windows 10 deployment and UWP app deployment. $$$ with no benefits, since current WPF/WinForms apps already work just fine on Windows 10. * Developers familiar with WPF/UWP had a wide variety of familiar tools to use with WPF/WinForms app. For UWP, they'd need to start fresh with no benefits, since LOB apps didn't really make use of the new UWP APIs and the existing developers needed to learn a completely new app model/framework. * Microsoft didn't ship some *very important* controls used widely by LOB apps, and the UI was generally not suitable for data intensive apps until very recently. * Lots of (irrational, IMO) negative press from important people in the industry, like Tim Sweeney Consumer apps: * Windows Store adoption was slow, since the Windows 8 days. It still has not recovered from the past decisions made by MS in the WP7/Windows 8 era. * A lot of the apps were ported from Android/iOS/HTML5 and did not work very well or use UWP APIs efficiently. * Most companies would rather use Electron than develop a UWP app while developing native apps for Android and iOS. * Developer account not free while publishing your WPF/WinForms apps on GitHub Pages takes 5 minutes. People don't download *.appx files like *.exe or *.msi Relevant news articles: * https://www.infoq.com/news/2018/08/UWP-LOB-Win10 
What? I guess I've been doing it all wrong for years then... Jokes aside, the emulator works just fine on AMD.
Umm. UWP also runs on Windows 10, and is the only way to deploy to one of the few relevant PC app stores.
WPF/WinForms/Whatever also runs on Windows 7. In addition UWP IS NOT the only way to deploy on the Windows Store. It accepts Win32 apps just fine.
Excellent post. Thanks.
I'm super excited for it. I hate null guarding. But does that mean all classes have to have a default value now like structs?
&gt;Sharp-develop How are all professors like this lol? It's not hard to keep up with IDE's. But anyway, if it's for a class it's probably .net framework - but outside of gui development and asp.net, there are very VERY little differences to you as a developer between the two, so you should be able to get away with either - but if you have to submit projects he might not be able to run your code / open your project (you don't use sln's in .net core like they are required with framework, for instance)
This \^ specifically [https://www.nuget.org/packages/System.Data.SQLite.Core](https://www.nuget.org/packages/System.Data.SQLite.Core) &lt; that one, do not get the others, they download 1000 other nuget packages you don't actually need.
Why's that?
as I recall its just not very well built. For example when I was messing around with it, two events would fire, and I only wanted one, and specifically coded/followed the API so that only one should fire. So I had to built in a "toggle" to handle that.
Yeah that's what I use and it is dope, just write a nice disposable repo implementation around it and you will have a serious tool in your hands. 
UWP is doing so well they had to spend significant time and effort making a framework that can port WPF and WinForms apps, which are 10-15 years old apiece, to it. Nobody significant is writing UWP because nobody wants to be Windows-only in a world where everyone uses iOS/Android devices. Windows is "what people use at work". Devices like Surface are good arguments for getting Windows back to "what I use at home", but they came after consumers had already dismissed Windows 8 as "that scary touchscreen Windows". I have many VB6/.NET client developer friends and they are complaining that their routine gigs are starting to decline them because they want to use Android or iOS devices. UWP is doing so well Microsoft has ported almost every product they sell to MacOS/Linux. Visual Studio. SQL Server. Office. I halfway expect to hear them announce IIS for Linux soon. They also purchased Xamarin, which promises by the end of the year you can write an app that works on iOS/Android/Linux/Mac and they can add it to their "look, people use UWP" numbers. Take my words with a cynical, bitter grain of salt. I invested heavily in WPF when it was new. I poured my heart into Silverlight. It was all killed, and I lost a job because of it. I ran to Xamarin to try and get away and they followed me. Now I'm changing to a .NET Core team that writes servers. That's how much faith I have in UWP.
By not exposing 100% APIs you might need from Win32 in certain applications for example. Usually in complex desktop software you will always find a couple of P/Invoke declarations. http://www.pinvoke.net/ Naturally in many use cases you might find in NuGet some library where someone already tackled the P/Invoke declarations one might need. 
Well you're right, how was your experience with Xamarin?
Ok... just to make sure that we agree on all the concepts: A database is typically where you store information for an application or some sort. That application could be built with C# or any other programming language. Interaction with your database is typically done by using SQL, though alternatives is out there as well. You can write a lot of different code to extract data and present it how you want from the database. A data warehouse is typically connected to multiple databases. It imports data from each database and rearrange it for different usage scenarios. I would highly recommend that you use one of the many standard solutions that are out there for your data warehouse purposes. You typically start using data warehouses when your data gets so large that queries cannot execute on your database or if you have data from multiple systems that you need to match together. Be aware that your database can probably perform with several 10’s or even 100 of millions of rows before a data warehouse becomes necessary but that is pretty case specific. A program like tableu, Microsoft powerBI etc. can be connected directly to your data warehouse or database to help visualize data and bring insights. 
Xamarin comes with heavy caveats. Do not make me post full opinions. I've been a Xamarin Forms dev for 5 years, I've seen it come a very long way. But every time I have to walk off the Candy Land Happy Path, I end up in a Hellscape of "only one blog article on the entire internet suggests this can be done, and he complained it was really hard". If you're trying to write "a simple WinForms app" you can probably find a way to make it work. The things that work best and easiest in Xamarin Forms are things that would also be really easy to implement as web applications. When it comes to applying polish like animations or Material Design, you have to delve into enough platform specifics you start to wonder if you're really benefiting. If you want to write cross-platform client applications, there's Electron, React Native, etc. All of my hobby work is in HTML/JS now. I don't intend to use a Microsoft client framework again for several years, unless I get a very generous offer. I can't come up with a good reason why one would choose XF over those.
To further this static methods make things untestable via unit tests.
Class is the definition. Object is an instance of a class. No big deal, but I thought I would mention it. Took me a while to understand that
I work with UWP all day long. "Not ready for prime time" is being kind. It feel exactly like when you first worked with the data grid in VB6. About every third thought was "Really? It doesn't do "X" right out of the box" and then you went and bought a third party grid. Except for this, there is nowhere to go. You just have to wait and hope. 
 The best by far is dnSpy. Even if it's obfuscated/packed, it can do the job: [https://github.com/0xd4d/dnSpy](https://github.com/0xd4d/dnSpy) just compile and run it, you don't even have to decompile it to source, you can in-replace the code and just save the assembly.
[https://news.microsoft.com/2018/06/04/microsoft-to-acquire-github-for-7-5-billion/](https://news.microsoft.com/2018/06/04/microsoft-to-acquire-github-for-7-5-billion/)
I was just referring to UWP. But I didn't know that about the MS store, neat!
I think it's a fallback to when Visual Studio wasn't as free as it is now. Even a couple years ago my professors were a bit behind the times. 
I looked at UWP to replace WPF as our primary tools UI. It's actually a lot nicer than WPF in many ways. Then I ran into the compatability issues with many 3rd party DLLs we use. Did they ever address that? 🤔
UWP and the MS Store are doing fine. See here. https://np.reddit.com/r/Surface/comments/9b8flo/whats_the_first_thing_you_did_when_you_bought/e51yw9j/
&gt; UWP also runs on Windows 10 And on Xbox One and IoT devices. 
Probably not. It's just missing a **lot** of stuff. For example, if the normal version of some standard object had 50 properties and 15 overloads, UWP might be missing 3/4 of them, which is fine until you need one. More specifically, it has a ton of various flavors of data structures. While the full .net runtime will happily convert between pretty much all of them if you talk to it nicely, conversions in UWP are painful and often involve loops. It's not a deal breaker, but it's more like "You already had this. Why did you have to leave it out?"
Pro C# is one of the only programming books I have read from cover to cover. The other is the C# Yellow Book someone else mentioned. The yellow book is a good starter and then Pro expands from there. It also goes into improvements to the language from version to version. 
And games. 
2. You can use `Span&lt;T&gt;` on .NET Framework now by referencing the [`System.Memory`](https://www.nuget.org/packages/System.Memory/) NuGet; its just not integrated with methods in the base class library (`Stream` etc) [.NET Standard 2.1](https://github.com/dotnet/standard/tree/master/docs/planning/netstandard-2.1) looks to have `Span&lt;T&gt;` support in the BCL.
Maybe make your own interim return type that can expose memory blocks larger than `Int32.MaxValue`; but allow users to create spans using that object that index in to certain start points of the memory. This way you can expose the entire length of memory and also allow people to use spans. You could also provide a method that returns an enumeration of spans that cover the entire length of memory. Complicates your API though of course and may not be worth it.
RE: Context `Span&lt;T&gt;` is a stack only type and you can't use it with `async` store it in a class or on the heap. As you are looking to use `IDisposable` you might want to use `Memory&lt;T&gt;`; which you can use with `async`, store it in class or on the heap. (e.g. all the async apis in the BCL take `Memory&lt;T&gt;` rather than `Span&lt;T&gt;`) `Memory&lt;T&gt;` creates `Span&lt;T&gt;`s for when you need to perform operations on the data. As you are looking at native backed memory and disposal you may want to look at the related types and perhaps `MemoryManager&lt;T&gt;` * Memory&lt;T&gt; is the basic type that represents a contiguous buffer. This type is a struct, which means that developers cannot subclass it and override the implementation. The basic implementation of the type is aware of contigious memory buffers backed by T[] and System.String (in the case of ReadOnlyMemory&lt;char&gt;). * IMemoryOwner&lt;T&gt; is the interface that controls the lifetime of Memory&lt;T&gt; instances. The interface implementation how to create and destroy these instances. Instances of this interface are returned by MemoryPool&lt;T&gt;.Rent. * MemoryManager&lt;T&gt; is the abstract base class used to replace the implementation of Memory&lt;T&gt;. This class is used to extend the knowledge of types that Memory&lt;T&gt; knows about; e.g., to allow Memory&lt;T&gt; to be backed by a SafeHandle. **This type is intended for advanced scenarios; most developers will not need to use it.** Some guidelines which haven't made it into the mainline docs yet: [`Memory&lt;T&gt; usage guidelines`](https://gist.github.com/GrabYourPitchforks/4c3e1935fd4d9fa2831dbfcab35dffc6) (also covers `Span&lt;T&gt;`) [`Memory&lt;T&gt; API documentation and samples`](https://gist.github.com/GrabYourPitchforks/8efb15abbd90bc5b128f64981766e834)
&gt; Span&lt;T&gt; into .NET Standard * [Span will be a part of .NET Standard 2.1](https://github.com/dotnet/standard/tree/master/docs/planning/netstandard-2.1) and it will be implemented by .NET Core in the future. [We do not know if .NET 4.8 will support netstandard21 or Span yet.](https://github.com/dotnet/standard/issues/859). Rich Lander said in a [MSDN comment](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/#comment-554635): &gt; Span is included in .NET Core 2.1. We explored including Span in .NET Framework 4.8 and decided against it due to compatibility concerns for existing applications. You can get access to Span and additional related types in the System.Memory Nuget package which enables some of the scenarios that are enabled on .NET Core. About the Span API - I think you should open a GitHub issue at [dotnet/corefx](https://github.com/dotnet/corefx/issues) and get a reply from someone working on these APIs rather than Reddit. 
I would say, don't worry about it right now. Non-constant static members are not common enough to put a lot of resources into figuring them out. When you see them in practice they will make much more sense than what the book is making them out to be. So my suggestion would be move on, and ignore them for now. As you learn more they will become easier to understand.
1. Note `Span&lt;T&gt;` can go above 2GB; it just can't go above 2,147,483,648 elements (as `T` can be larger than 1 byte) For read only data there is `ReadOnlySequence&lt;T&gt;`; which is a chain of `ReadOnlyMemory&lt;T&gt;`s which produce `ReadOnlySpan&lt;T&gt;`s; and you're `ReadOnlyMemory&lt;T&gt;` can be backed by `MemoryManager&lt;T&gt;` as mentioned in [Re: Context](https://www.reddit.com/r/csharp/comments/9fnfxy/issues_with_spant/e5xza48/) to enable you to go above 2Bn elements. Don't think there are any good docs on it atm, [there are tests](https://github.com/dotnet/corefx/tree/master/src/System.Memory/tests/ReadOnlyBuffer) and ASP.NET Core and Kestrel use it
If you've time, just go native by learning iOS dev with Swift and Android dev with Java or Kotlin. I was forced to learn native years ago cuz cross platform didn't exist. The struggle starting out was real but once you breach that stronghold, you'll be set.
Does Winforms still being highly popular make WPF a failure? The answer is no. Typically legacy apps won't switch over very quickly, especially when the previous API is still very good. Considering UWP is highly similar to WPF it is going to take even longer. The idea behind a lot of the support Microsoft has thrown towards the old APIs is to get developers on board with using the latest Microsoft technology making the switch over to something like UWP easier.
hahah ;D
HoloLens is not VR.
I think the UWP applications are on par with Progressive Web Apps. You would choose to do a UWP under Xamarin when the app you're working on might require access to hardware components or hardware acceleration. There's no need to use UWP when all you're doing is pulling news feeds and displaying in a grid or etc things that you can do in a web app.
I support your book hunt. Nothing like a few named sticky notes marking interesting sections for quick reference. Sometimes I dont even know the name of the syntax, library or pattern I'm looking for but a quick glance at my sticky marks reveals all.
ReadOnlySequence is a type designed to represent such sequences of memory blocks. 
Cool, so you're telling me I own the entire MS windows source code.
Ah, nice.
are you serious ? do you know what a search engine is ?
You're wrong. It's actually built on win32 to an extent and it's total trash in both implementation and consumption
Look here: https://docs.microsoft.com/en-us/dotnet/core/tutorials/using-with-xplat-cli
Is this a Core question? The dotnet CLI is your answer then. On .Net framework you'd use things like csc.exe and msbuild. There are many full fledged build tools such as CakeBuild and Psake. These are the equivalents to make in Linux systems.
Assuming you have windows SDK/visual studio, CSC can be used for simple programs. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/command-line-building-with-csc-exe If you have a project/solution in visual studio, msbuild can used to build specific targets, projects https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-reference
Thank you. &amp;#x200B;
Uh, you realize Powershell is cross-platform now, right? Psake should work on Linux and macOS.
Wow! This is amazing! And it's been this way since a while now. Thanks for letting me know. I feel so stupid right now.
(I'm developing .net apps since 2002 and windows apps since 1996) With UWP I have the feeling it's a solution looking for a problem. Sure, for MS it's a solution to have 1 app able to run on multiple platforms, but for the average user (including LoB app users), this isn't a requirement at all. It's understandable they want to consolidate the APIs they have and modernize the underlying win32 api, but frankly... you have to wonder why. The set of APIs is so massive, changing it will take a long time, in which other new things come along and you get the same result as what win32 is today: a massive API that has grown over time and the newer parts look different from the older/oldest parts. Win32 has been complex since forever for the people who are new to it and easy to grok for the people who know how it works. .NET in general has helped a lot to abstract away a lot of complexities and personally MS should invest in that and not in UWP. It's also a bit of a 'windows team vs. .net team' thing. The windows team, which owns .net full, wants to move their stuff to uwp, also because of the store, and the .net team which owns .net core, simply wants to move their api ahead, despite what the windows team wants. This leads to things like .net core 3.0 which will support windows forms/wpf, clearly a move to bring LoB app dev to a faster moving platform than .net full. IMHO a good thing, as the windows team doesn't give a shit anymore about wpf nor windows forms. With UWP I still have to see the 'incentive that makes me switch' from MS, it's a lot of hoopla and cheese moving and 'new things that are cool' but aren't matching what I need every day to build my software. This isn't new btw, Microsoft has done this since forever and I think this is also one of the reasons people are reluctant to move to UWP: it isn't a technology which solves the problems of all the other frameworks, it's just a new / different way to do things without being better than the stuff it tries to replace, and within the MS ecosystem that's a clear sign of a technology that will never make it, despite it's technical aspects. 
Part of the problem of UWP is people like you who have been told "it's for dead phones lol", not realizing it's the most advanced software API there is.
UWP Framework is a wrapper for COM calls right? Care to expand on those critiques?
What? Future market penetration... It's not like they've already got 700 million active users. 
Yeah, using static methods leads to consequences such as difficulty in unit tests, violation of SRP, tight coupling and other issues. The cause of using static methods is usually a poor understanding of OOP. This happens in two groups of coders: 1. Coders who are absolute Beginners/Newbies. 2. Coders with procedural programming background. Stop writing static methods wont make a good programmer instantly, but it is a rather important step at least. 
As a follow-up, this appears to be a VS bug ( [https://i.imgur.com/km1EsYT.png](https://i.imgur.com/km1EsYT.png) ) with their Tools for Unity addon. **Even with an empty scene, VS freezes when attaching Unity.** Sometimes it works, sometimes it does not. *The worst.* I submitted a bug report and found a special email for this to send a log dump to. This happened after I refreshed Windows. I tried reinstalling VS, but alas, nada. Until then, ugh... I may have to use MonoDevelop to step through. Gross.
i do not know how to use "debug" mode, but there are no real "errors" except for the fact that my else statement is written out no matter their answer of their age.....
As /u/[uzbekibekibekistan](https://www.reddit.com/user/uzbekibekibekistan) already said, looks like an indentation problem. Add curly braces ({ and }) where they should be. Also try to use \`b &gt;= 19\` instead of \`b &gt; 18\` (and for the following checks aswell). That makes the code more readable.
&gt; Chrome and Firefox still don't have UWP apps - they tried WinRT 5 years ago with Windows 8 and never looked at it again. Worth noting that Firefox and Chrome stand nothing to gain currently by porting to UWP, as Microsoft will continue to treat them as second-class citizens by banning any browser engine that's not EdgeHTML from the Windows Store.(Before someone brings this up, they do allow Electron apps but don't/won't allow other actual browsers using Chromium or other engines) &gt; Main adopters of VR (games) do not have anything to do with UWP (with it just being another "target" for Unity) and other game engines aren't very keen on adopting UWP Unreal Engine also supports UWP as a target despite Tim Sweeney's hatred of it.
Alright thanks alot! 
What would be your expected output? Urls don't have a concept of arrays. There are several ways how you could encode arrays in URLs.
Ahahhaha. It cracks me up when Linux people make suggestions on how to improve some tech stack problem. It's always about the worst compromise (fuck your modern security features and OS integration, let's go back to 25 years ago), superficial compatibility (WPF is "the best" because it can run on Windows XP) and open-source, the magic word that has saved the software world! (hint: OOS is as bad when it comes to security and worse when it comes to coherence.)
hmm Not sure how I should do that, any examples?
Are you on a domain network? If so you'll need to pass the domain in the UserName property. I.e. UserName = "&lt;DOMAIN&gt;\\administrator"
The windows subsystem for linux might help here. It doesnt include everything but you can run shell scripts on windows and even apt-get stuff
Set the environment variable in the context where your executable or library is started? Why do you need this?
To add, there is no sub things as an instance of an interface. Instances are always of concrete classes. 
https://www.youtube.com/watch?v=rmsIZUuBoQs
I had this issue the other way around, so you might want to take a look at `LoadFrom`. My problem was and went ~4years ago so might not even be an issue anymore. My case: https://stackoverflow.com/q/22969955/20195
MSBuild (part of visual studio including the free community version)
You could try Vscode! https://code.visualstudio.com/docs/other/unity
I hear ya, I'm talking about the future. I think we've seen a decline in consumer level product popularity of Microsoft products over the past decade. Windows phone arguably died because there were no apps, and I think the surface is suffering similar issues. 
I think you're replying to the wrong guy lol
It's not. It's an abstraction with its own runtime framework, allowing you to run it on ARM and x86 architectures (win32 can only run on x86)
The gist you posted is using mcs, the Mono csharp compiler, to compile a single file to a dll. Mono pre-dates .NET Core and used to be the only way to run .NET programs on linux, but it is also available for windows. I'm not sure what the status of the project is now that .net core is out; my guess is that it will eventually die if it hasn't already been abandoned. Your options are 1. Install mono for windows. 2. Change mcs to csc in order to get it running on Windows. I'm not sure if you would need to fiddle with the arguments at all. 3. Switch from mono to .net core, which has cross platform tools, and re-write the script to use 'dotnet build' instead of mcs. At a minimum you will need to create a project file to do this.
&gt; Microsoft will continue to treat them as second-class citizens by banning any browser engine that's not EdgeHTML from the Windows Store. But they could let users download an *.appx .. I don't think Microsoft could ban that usage without significant backlash or fines. &gt; Unreal Engine also supports UWP as a target I have seen Unity games published on store but rarely any UE4 games. Also, Windows MR apps are effectively locked to Unity because UE4 doesn't support it directly (unless you use SteamVR target). 
&gt; You could try Vscode! I actually use it for JS, HTML, CSS etc -- web stuff. It's actually pretty great! But .... I didn't think it supports stepping through - does it? I'll have to check that out again :) it's surely better than Mono if I can step through. 
I haven't personally used it, but Unity themselves created an extension for stepthrough debugging: https://marketplace.visualstudio.com/items?itemName=Unity.unity-debug
Windows supports 3 runtimes (.NET Framework, .NET Core and Mono) while Linux supports 2 of those (.NET Core and Mono). To compile C# programs on Linux and Windows, you can use the `[dotnet CLI](https://docs.microsoft.com/en-us/dotnet/core/tools/?tabs=netcore2x )`. 
Huh, is that so. I recall the first release of windows 8 on arm, and only UWP apps ran on it. Good to see they responded to the criticism!
The 2nd and 3rd „if“ should be „else if“. Otherwise he will always step into the else statement if the 3rd if condition is false. 
Wow, you may be my savior here until (if....) a VS patch comes out!
You don't get... * WithEvents * XML Literals * Parameterized properties (except the default property) * Aggregate syntax with LINQ (in fact, most C# developers rarely if ever use the LINQ syntax) * The ability to reference me/this in property/field initializers Here are some of the new things that you will get with C# 7. https://www.infoq.com/articles/Patterns-Practices-CSharp-7
What do you mean by "... most C# developers rarely if ever use the LINQ syntax "?
Why? Use the GUI
LINQ Syntax var sorted = (from x in list order by x.Name select x).ToList Non-LINQ (a.k.a. lambda syntax, dot syntax, functional syntax var sorted = list.OrderBy( x =&gt; x.Name).ToList(); 
I would argue that " C# developers find the LINQ syntax to be more cumbersome" is probably anecdotal at best. That being said, yes, LINQ syntax is icky, at least to me. Grouping with extension methods isn't really bad, actually. JOINS though, ugh, that is the one time i will break down and use the LINQ syntax, as much as I personally do not care for it.
Popularity declining? That implies that Microsoft was more popular at some point in the past. They've been "bad" since the 1980's. No, WP died because Microsoft was incompetent and Google ran a successful anti-Microsoft campaign (look it up). Surface is not suffering similar issues, because Surfaces are not iPads, they're suffering they're own kind of issues: lack of quality control, permanent beta software, etc..
XP is deprecated and no longer supported, besides being a dinosaur with tacked on security features. I wish you the best of luck against crypto-ransomware.
Relevant, but probably not very helpful: https://social.msdn.microsoft.com/Forums/en-US/d2c13f50-57af-483d-a23f-d5169a6d4d7a/infinite-loop-in-serializationdeserialization-not-sure-which?forum=csharplanguage
I'm not being mean, I saying you've been fed misinformation. Case in point, you didn't even know the Windows Store works in .... Windows, and not just a dead phone OS.
Most significant change? You will have less suicide thoughts. 
I liked Jon Skeet C# In Depth book, a new version is coming out soon. It was a good read. &amp;#x200B;
You don't need "WithEvents" to get events ;)
Yeah, I like to carry around my customers in a bus without brakes too.
Thanks for the info!
There was just a thread the other day (I think /r/dotnet) where a guy said the former was Method syntax I think and the latter was Action sysntax? I'll have to double check but it made sense. I definitely prefer the latter. 
It took WPF a long time to surpass winforms in usage. And that was only a different ui framework, this is a different underlying set of APIs too. It's not going anywhere though. 
[The official names are "query syntax" and "method syntax".](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/query-syntax-and-method-syntax-in-linq)
Thank you.
True, but it does make it a lot easier if you are frequently updating properties with bound events. Back when I was doing Silverlight a lot I ran into countless bugs where people did things like forget to remove event handlers.
Performing checks such as those are pointless - you have no guarantee that the permissions won't change between the check and attempting to open the file (or, indeed that the file will even still exist, or that no-one pulled the network cable out). So with your colleague's approach, expensive checks need to be made AND exceptions have to be expected and handled. 
Yeah this was mostly a temporary solution, mock up I also have to update all my stuff, the tests are gonna be fixed, also the dotnetcore was my only for sight, for cross platform, the rest I'll fix soon, the commandlist is going into a wiki soon also
I find the extensions methods easy to read for joins. But remembering how to write them? Fuck that, I'll write it in LINQ and let R# convert it (for consistency and because once I see it, it's easy to change the extensions methods even with joins)
Right. They're both LINQ.
Those are **both** LINQ. One is Lambda Syntax,. The other is Query Syntax. I'm pretty sure I failed a job interview because the **interviewer** didn't understand that they are both LINQ.
I know there's a problem whenever I hear a situation where someone is adamant that something is always one way. Exceptions aren't always bad to let happen. You should prevent exceptions when possible except when they're truly exceptional. A good example is a FileNotFoundException. It's an easy one to check compared to most exceptions, so why not do it any time there's a file operation? In most cases you will, but what if that file is integral to the application -- it's not something tied to user input or interaction (maybe an application maintained repository). That is truly an exceptional condition. Can the user code in scope know how to handle that? It probably shouldn't know how. Chances are your application is in an inoperable state and needs to come down.
That's true. But in C# you must manually add and remove the event handlers. Thing _that; public Thing That { get; set { if (_that != null) { _that.Event1 -= That_Event1; _that.Event2 -= That_Event2; _that.Event3 -= That_Event3; } _that = Value; if (_that != null) { _that.Event1 += That_Event1; _that.Event2 += That_Event2; _that.Event3 += That_Event3; } }} Lots of places for copy-and-paste bugs to hide. 
I didn't say LINQ, I said "LINQ syntax".
That's exactly what i told him, but being a junior, you got no right whatsoever to question the seniors. &amp;#x200B; Even if you need to provide better logs, you can still pull all the neccessery information *after* an exception was thrown.
In ASP.NET, yes. In normal VB you still need `Handles That.Event1` in the method signature.
P.S. There's no real auto-wiring in VB. Even implementing interfaces requires you to be explicit. Though it does have some nice side-effects like changing names. Public Sub Close() Implements IDisposable.Dispose Though I have to admit, this is the ONLY example I can think of where it makes sense to change a name between the public interface and a secondary interface. 
I have fixed all the tests, in terms of results and positives, and improved the core library
P.S. According to the Framework Design Guidelines, what you are really supposed to do is create a strongly named class so that you can safely add new methods to it later if need be. public EnnemyPatternList EnnemyPatterns { get; } = new EnnemyPatternList(); But I'm strict about this unless I'm creating a library that is being published on NuGet.
It will feel closer to java.. Net is. Net. Events are in all. Net languages. What you get added thoughis that c# can access unmanaged code. C# can pass pointers if you ever need to, vb cannot. (you may never use this) more documentation is on c#. 
Eric Lippert wrote a nice article on when to catch and when to prevent exceptions: https://blogs.msdn.microsoft.com/ericlippert/2008/09/10/vexing-exceptions/ Eric was a principal developer at MS on the C# design and compiler teams, so I tend to have some faith in what he says!
Doh, I was confusing it with "Handles" :)
&gt;The way you can put classes inside the classes to make everything all fit together like puzzle pieces and functions for fucking everything to simplify shit. mmmmm, inheritance
u github bro? I'd love to check it out
might want to check this out [https://github.com/Thraka/SadConsole](https://github.com/Thraka/SadConsole)
whoa cool!
That's an awesome read. Gonna forward this to my colleagues 👍
Wrong, so very wrong. VB has had the ability to access unmanaged code since the 90's. It's built into the language syntax. Declare Sub MessageBeep Lib "User" (ByVal N As Integer) And of course you can use pointers. That's a requirement for working with unmanaged libraries. *** What you don't get is C#'s `unsafe` context and the ability to manipulate pointers to managed objects.
Only at compile time. At run time it's just an illusion so old code will continue to work as expected.
VB6 and vb.net are NOT the same thing. Also "the ability to manipulate pointers to managed objects" is what I mean when I say USE pointers. So I stand by the statement that vb can't use pointers.
JSON is just a string. You need to get Newtonsoft.JSON easiest way would be add all the strings to a List and then call var result = JsonConvert.SerializeObject(list) and return the result string.
They don't seem to be as dedicated to timing big releases to Build as they were in the past.
Too many people that just program because it's their job. I don't think anyone at my work ever programmed anything just for fun. 
Haha, I read this and thought "console-style JRPG" and then went, well, that's ambitious just to get into C#. :)
I'm like OP. I used to try and make games, but realized I lack the artistic skills and aesthetic sense necessary. Working on a MUD RPG could be fun for a while.
That's incorrect. Linq is the framework query and object are just different syntaxes it supports. 
Again, you can work with pointers to unmanaged objects using the Marshal class. And really, there's not much you can do with pointers to managed objects anyways. I can't remember the last time I saw someone use an `unsafe` block were I couldn't accomplish the exact same thing without it.
&gt; We use the term language-integrated query to indicate that query is an integrated feature of the developer's primary programming languages (for example, Visual C#, Visual Basic). Language-integrated query allows query expressions to benefit from the rich metadata, compile-time syntax checking, static typing and IntelliSense that was previously available only to imperative code. Language-integrated query also allows a single general purpose declarative query facility to be applied to all in-memory information, not just information from external sources. Microsoft, 2007
Stop right now, you’re having far too much fun!!!
As a kid, I tried programming text adventure games. I could not program very well, so I just tried to program each separate room independently instead of creating something more like an engine, lol. Same for trying to program a chess game. A friend of my brothers was a very good chess player at the time, and I was trying to program every possible move into the board. Hahaha, hey I was about 10 and this was on the Commodore 64. Lots of fun. I programmed some stuff in Turbo Pascal at age 14, using a Turbo Pascal unit (I think they were called) that I bought called RADU, which allowed you to write doors for dial-up BBS's. I actually sold that a couple of times under a Shareware license! I still have the binaries, but lost the source code (which, if I recall correctly, was one big file of 2000+ lines of code, lol). Now, decades later, I've lost a lot of my innocence and develop web applications in C# for money... 
Composition over inheritance is the way to go.
This - I enjoyed programming 30 years ago - now it's just a pain in the ass thing I do to make money. BBS's were also hella fun, ran one for years.
I've always struggled to get into any projects for fun outside of work. But I've moved into a house with solar panels, and I've fitted Hive heating, so I'm starting to write code to monitor things into a house and I'm actually really enthusiastic about it for the first time!! 
I still enjoy it, but I'm lucky in that they give me a lot of freedom. I can still try my own thing in order to solve a problem. But then again, I've been lamenting (and applauding at the same time) the fact that you can use any Framework, Google any problem, look anything up on Stackoverflow and you're three-quarters there to your solution. When we were kids, we had to come up with our *own* solutions, get off my lawn. :) (Not true, of course, since I used this RADU library I mentioned that abstracted away a lot of painful interaction with Remote Access, the most popular BBS software at the time.) I also wanted to run my own BBS and at one point took over my parent's phone line for one hour a day by hooking it up to the modem. Not many people called in. :) Memories... 
&gt; When we were kids, we had to come up with our own solutions, get off my lawn. When we were kids we'd have killed for resources like we have today. It's like how we were healthier because we walked and biked everywhere, but I wouldn't let my kid out of my sight nowadays.
Wasn't that actually referring to nested classes?.... Inheritance is rather different, no?
Of course! It's this feeling of, "hey, damn. I could do this and this with it!" I made some dumb shit for the iPhone when the App Store just came out, because it was new and interesting. The idea that you could make something and then carry it around with you on your phone was awesome (and then I made some money, too, lol). I bought a Oculus Go this year. I never wrote anything graphics-related, but it did create new ideas in my head. Now I want to get into Unity3D! Not everyone has these thoughts and ideas. It takes a special kind of idiot to want to make stuff happen like this. :) 
i did not know what that was but i am getting myself an account
I worked on a multiplayer console game when I started to learn about TCP and UDP. Pretty fun and a bit more satisfying. [Gameplay](https://youtu.be/6dH5czM6QGg)
Link when you get it up? Please. 
I think that's what the whole fizz buzz thing was about; people who learned google-fu instead of practical problem solving made tolerable maintenance programmers but can't program out of a wet paper bag in the real world. Back 'in the day' those guys just weaseled their way into systems architect or data management positions, where their lack of technical knowledge was seen as an asset.
 I've worked for almost 12 years now, and still love doing my personal projects. It depends on the person and how passionate you are about something, and especially if you have people just as passionate about it you're with. My close co-worker friends all love programming outside of work too so we constantly talk about new cool things or new methods of writing code, etc. We all work on eachothers projects and everything, it makes it a ton of fun, even after how long we've all been doing it for. &amp;#x200B; Not everyone is the same, you do you, if you are excited about it, just don't let that flame die :) same with anything else, it's nothing to be worried about
amen
That text could easily apply to the `.Where` extension method, the `IQueryable` interface etc. All were new in the 4.5 release. None of them require the `select` syntax.
These days I can't by one hour without turning to Google-fu myself, of course. And I dare say that most devs today are like that. And it's not wrong! There's too much to remember, and Google-fu is faster and more accurate! But the understanding part, the history, the experience... am I getting old? 
It's anecdotal, but I went from [VB.NET](https://VB.NET) to C# and if your experience is like mine, you'll get more job offers and earn more money (by a small but noticable margin) and you might work on fewer legacy projects. Other than that, you will find it easier to dig into framework code, online code samples and contribute to open source .NET projects (since most of the ecosystem is C# based). Otherwise, the language syntax differences take a couple weeks to get used to. I found it a pleasant transition with few downsides, myself. I think the only thing I missed was that the switch statements in [VB.NET](https://VB.NET) felt more expressive.
Have you thought of trying out Unity next perhaps? It's a great way to have a lot of fun learning C# and make a complex game in no time. You can get right down low and do the stuff you're doing here as well if you wanted (though the text components allow you to use rich-text coloring to simplify things). It's all cross platform automatically for you too, and C# 7.2 support as of 2018.3
No. There was never a 4.5 version of C#. This was in C# 3.
I'd move away from xml to SQL. If you have to just use the management studio to edit the data.
Git (the system under git hub) isn't terribly intuitive (probably more so if you used other tools before). But spending the half hour or so on youtube videos to learn the basics are well worth it.
2018.3 does 7.2 now? My, how the turns have tabled.
This is amazing, and you've inspired me more. &amp;#x200B; Thank you!
Sorry, `IQueryable` and co were in the 3.5 release of the framework. That doesn't change the point though: That text doesn't mention `from .. select`, and the fact that it says "syntax" does not imply that either.
If you stuck with GitHub I can help you set it up. 
But you said you enjoy C#. It lets you code everything in C#. It's really not hard to get into and offers so much more to you than Game Maker does. There's no reason to restrict yourself to one engine, especially one that's purely 2D.
Yep. Even uses new Roslyn incremental compiler if you want to.
Sounds like fun. Enjoy it
This is source control. it's how you manage source code in teams and track changes in the real world (also here it can be a sharing mechanism). The benefits for you really are it being a backup, and as well if you make some changes and totally mess up you can revert to a previous commit. It might sound like a lot but honestly it's easy stuff and you'll be thankful for learning. Anyways this should take 5-10 mins and you're done: - Sign up to github - Create a new repository - Follow the instructions it gives you to push your code to the new repository. - Link us to your github account and we'll be able to see it! 
Ooooh, that could change bit for me. Working on a game that needs live compilation of code.
Using the `System.Reflection` namespace. `Type.FromName().GetMethod()`, etc.
https://docs.microsoft.com/en-us/dotnet/api/system.type.gettype https://docs.microsoft.com/en-us/dotnet/api/system.type.getmethod
that is cool, would it work in linux with Mono ? 
Yeah. It runs on monogame. Which is cross platform. 
I write code out side of work for game related stuff mostly. Or my small blog.. but thats mroe mark up. I made it in Razor Pages like a pleb, its pretty cool.
I miss with statements from VB but otherwise i love c#
&gt; I'm just excited to be programming again. I envy you, my friend. I spend all my day programming for others (at work), it consumes all my energy and I simply don't have the will to program for fun again, and god knows how much I love to hack around and mess with news apis/algorithms/languages/frameworks.
By any chance did this developer used to be a Java Developer? I ask because Java used Checked Exceptions for a lot of stuff, meaning that if your code didn't catch exceptions that methods were defined as potentially throwing, your code wouldn't compile.
This used to be a thing in old xBase languages. You could say x = "myfunction()" y = &amp;x and it would do the function. You'll have to use reflection in C# like chucker23n said above.
I made a roguelike in C# once and used sqlite3 for the database. It worked out great!
Awesome ok :) So you have that under your belt. Was just worried you missed out on SQL.
Core and react so it's pretty good by comparison hah. Although I do maintain a legacy VB web forms app. It is the devil.
&gt; Eirenarch said UWP was only for phones, I never said such thing.
oops. [Another](https://discord.gg/ceC3Fry)
what version of Visual Studio 2017 are you using? 15.8.4 is the latest
JSON is for data. You could set for instance the damage, explosion radius, and travel speed in JSON. The logic should happen in your actual application code, you shouldn't be serializing method names, they have no use to go between the server/client.
By reading the docs?
Well I think a large part of it is people get into the industry for the wrong reasons: money, and fear of not having a job in 20 years. That leads to people who do a job from fear, without passion or interest, and those kinds inevitably take every shortcut they can get their hands on. Just look at what happened with Indian tech outsourcing, and 15 years later a generation of homegrown devs make their bread by fixing what copy &amp; paste coding did industry-wide.
100% agree. First you cannot check for everything and second as you said even after a check things can change. So you need an exception handling anyway and in the end you're just doing things twice and blow up your code. 
Those are static methods. No one is telling OP to use `myStr.GetType()`
A very similar but infinitely more secure option is to create an interface for spells (e.g. `ISpell`) and then look for types implementing that interface, by the name of the class. This assumes you don't have two spells with the same name, but you probably shouldn't do that.
Make a nuget package of a class library that does all the configuration you want. The dependencies on that package could be serilog and mssqlserver, etc. Then reference that nuget package in all your projects to configure them. The other option is to move all configuration into a config file and just load the config file. See [Serilog-Settings-Configuration](https://github.com/serilog/serilog-settings-configuration)
Version control is one of the greatest tools a programmer can have, learn it ASAP
Nested classes and Inheritance are different
"It's pretty cool" says enough to me. :) 
That's a bleak vision of current times and probably the future. On the bright side, they'll probably need good guys to navigate that horrible legacy code, but hopefully it won't be me! 
The syntax is great. It's easy to read and flows well.
Yep! So this might be a bit too much detail, but essentially this is the system I'm going for: Spells have an id, name, description, and useMethod. useMethed is a delegate that takes a caster and an array of targets. Characters have a list of skills they know. As they use a skill, it gains experience and levels up. So the characters have a list of skill ids and levels. The end goal is to make an abstracted interface where I could so something like: &gt;**if** (HaveSkill(skillId)) **then** UseSkill(user, targets) Originally I though "Make 'Skill' an abstract class, and have Characters contain a list of Skills." But that seems like a lot of overhead, for every character to have an instance of these skills. Plus, what if I wanted to reference a skill in something that's not a Character? I'd want a list of all skills in the game available in one place. So then I made a 'SkillData' class, which actually contains the id, name, ect. for a skill, and contained them all in a Singleton called 'SkillDatabase'. Then characters have a list of 'Skill' classes which just holds an id and a level.
You're dead on. At the last, I'd pass the exception to a log file.
Yes it is! It's also very fun to learn. Being able to code something like a button to do so much blows my mind. 
The only possible explanation I can come up with is that your coworker does this so he can set a breakpoint on the throw. It doesn't make any difference to the control flow.
https://stackoverflow.com/questions/2728640/what-does-throw-by-itself-do
Looking at your code it looks like certain numbers won't trigger. For instance if it equals 12 it will be neither less than 12 or greater than 12 so that won't trigger. Same with 25, 99, and 100.
Are you sure IoC is configured the same way in both cases? Have you tried removing the cast and inspecting the type of the returned instance in both cases?
Yeah, not only is Mono used by Unity but also CryEngine, and all of the Xamarin targets.
I'm working on a angular + Java/Spring app but the guy who is in the cube in front of me got stuck with an app that's ASP, VBScript and Java applets. 
Congratulations. C# is a pretty easy language to learn as there are a lot of great resources out there and a lot of good communities. It's also a very good language to learn as you'll find a lot of good career opportunities if you decide that you want to do it full time. It sounds as if you have a lot of enthusiasm for this, which will help you a lot going forward, and should really shine through should you ever sit down in front of an interviewer. Good luck for the future!
Thank you. That might work. I'm new so I didn't even know about streamwriter
that's awesome! as you become more familiar with the language i recommend to start looking into the Object Oriented concepts and then applying that to your programs(If you haven't already)
I'll take a look at it. The more I learn the better. I appreciate everyone helping me out too. It's hard when you are self teaching 
It's such a well written language. I don't know if I would've gotten as easily otherwise. 
Hi Jared! :) Consider my opinion on that very re-evaluated then, haha. Thanks for the clarification. I've edited the post. Always appreciate the great work you guys do, btw. 
Nice one. I have a similar project. I measure the humidity in my humidor with an arduino, Push it to a Firebase DB and than display it at a Monitor in the kitchen (with some other data like the family calendar, Todo list and the children schedule for the next day). It’s so much fun so many different technologies working together. And it’s a great showcase for guests :-)
It’s super fun to do it for your own. But it’s a whole lot different to do it for money. Basically you have to deal with much different stuff like requirements, quality, a really big legacy code base.... it’s mostly not fun but work as every other job. But if you are fine with it: go for your dreams. 
Wait a second: var lastElement = intArray[^1]; var lastElement = intArray[^ArraySize]; But 1 != ArraySize. So how does this work?
I am not into unity. does it more than graphic support? Is it any use for, let’s say, text adventures?
I'm glad you enjoy it, people usually don't believe me when I tell them I enjoy C# more than the other languages I've used. It's just comfortable and reliable, I really enjoy working with it too. 
Ugh, yeah. Good spot. I fucked that up badly (copy/paste error). I've edited the post but here's the actual (correct) example too: With exclusive: const int ArraySize = 10; public static void Main() { var intArray = new[ArraySize] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }; var arraySubrange = intArray[0..ArraySize]; arraySubrange = intArray[0..^0]; // Same result } With inclusive: const int ArraySize = 10; public static void Main() { var intArray = new[ArraySize] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }; var arraySubrange = intArray[0..ArraySize-1]; arraySubrange = intArray[0..^1]; // Same result }
The trick is to make it different than what you do at work. I was stuck making asp.net web app front-ends to an AS/400 minicomputer. Not that much fun. Getting into robotics helped keep it fresh because I had to use a very primitive language called BasicStamp (compared to c#) and all of a sudden time and physics became things I had to consider when I wrote my code. Nowadays you can use C and an Arduino but its still a great way to code in a fresh environment... unless you build robots all day :)
By four-dimensional angle... What do you mean? Pitch/Yaw/Roll are generally measurements of *rotation*. I'm not sure what the fourth dimensional scalar would be. Do you mean Quaternions? Also not sure what you mean by 'converting' it in to a 4D vector, what do you mean?
First of all you should format your post, it’s a mess to read through. When asking for help, posting the whole code and saying nothing works won’t really get you anywhere. Are you expecting us to write it for you? There are plenty of resources and tutorials to help you. If you come across a specific problem, people will be happy to help. There are also free assets on the store to use as templates or reference. Finally, if this is your senior project, what is it supposed to show? Programming skills? Art? Design skills? Having strangers on the Internet do it for you isn’t really something you can put in a portfolio...
Uh, what are you talking about? Javascript IS a programming language, so it's here to stay in the survey. HTML, CSS, SQL however are not supposed to stay in the survey. 
Yeah that's very true! I'm a C# developer full time at work, so when I've tried to write other web apps at home it doesn't feel fun. I'm doing this stuff in Python, which I don't know very well so it's more of a learning experience again, and I'm actually enjoying it far more!
I guess it kind of the same logic as auto properties. Sure you could use a field but if you want to change it later you'll wish you had just stuck an auto property in. Along that same line I guess you could be reserving the catch for logging or more specific catches before it or something later. But tbh that is a super flimsy argument as wrapping in a try catch isn't a breaking change like field to property. Really you shouldn't catch an exception unless you plan to act on it. But he's not actually catching it so that's out aswell. I guess you could say it's a place holder that needs to be changed later. If I was you add a // TODO implement proper handling anytime you see it.
What are the odds that you are replying to the same pedantic interviewer? I have a small desire to know which company this was, i.e. where to avoid.
Create a class for each spell and give it an id. Then you can just lookup by the id. Or you could create a dictionary of int to func and use that to lookup the function. 
Grats! Next step; Malbolge.
Don't mix up c# language and dotnet
I started with VB, an extremely pleasant experience for me. It was incredibly easy to learn. Moving onto C# wasn't difficult at all and now I know I have in my hands one of the most powerful language of the decade. Microsoft really did it this time, especially considering how good Visual Studio is.
&gt; It's also a very good language to learn as you'll find a lot of good career opportunities A thousand times this. I found the job I wanted as a full time C# developer before even getting my bachelor's degree. Also, once you're a professionist, it's incredibly easy to learn more and more as you go, but I think this is common to all languages. &amp;#x200B;
I'm in a similar position, I do know basic HTML so I have a little "code understanding", but yeah I tried python as everyone suggested it but I couldn't really wrap my head around it. C# tho is coming so naturally, and I'm at a point I can read others work and understand it, which is really helpful in my learning process. I'm glad you have a little project to build and "learn as you go" ( that how I learn best as well :) ) But here are some handy links just incase you find them useful. https://codingbat.com/java This one isn't c#, but what it is, is a great list of code "challenges". For example the first was to create a scheduler that would check the day of week, and print out whether it was a weekend or booked holiday if you can sleep in or not. I learned a ton researching how to make that one lol. This might be a nice temp diversion from your game. https://www.homeandlearn.co.uk/csharp/csharp.html Just an amazing resource and tutorial site. https://www.dofactory.com/reference/visual-studio-shortcuts Lots of VS shortcuts and tips. I know focusing on code seems ideal, but spending a ln hour or two to really get to know visual studio will make life so much easier, and it also makes a lot of what you read on stack easier to follow. 
I was just going to say this, if game development is something OP is into C# and unity is the right way to go. Tons of tutorials out there too.
I have - the same object is returned. In both cases it's the "same" container... it returns the "same" object.
Care to elaborate on that? :0
That's actually funny because, I had a similar experience with back end. It just wasn't working for me. 
Thank you very much! I'll take a look at it. 
I will take a look into "the 'unity, '" thanks. 
They did. I have used their tutorials a whole lot too. They have set up a great start into the language. 
Thank you! I'll definitely take a look at those. Wow I appreciate it. 
C# is a language whereas .NET is a runtime which C# and other .NET languages like F# and VB execute on.
Sure thing! I was just spitballing
U/kaisinel - could you?
All the stuff you can do with c# is because of dotnet. Those libraries in combination with visual studio make it that easy to create windows guis, work with different datatypes bx doing stuff like bla.bla2(). C# itself is just a language which syntax is pretty similar to c++ and java.
Hey, I actually have a discord community for people who would like to learn c# or share their knowledge with others. We strive to help as much as we can to everyone and our goal is to be nice and make everyone a little bit better at what they do :) Here is the invite link: [https://discord.gg/vWE4Pc9](https://discord.gg/vWE4Pc9)
&gt;https://discord.gg/vWE4Pc9 &amp;#x200B;
Your love of it will probably never change. I've now gone on to learn standard C, Java, and Python. Nothing is better than C#.
I generally agree, but I do think it’s starting to get a little crowded and overloaded. 
With Unity and Xamarin you can do amazing cross platform programs with a single code base! I love it!
If you ever happen to want to ease your way back into html and front end work, give ASP.NET a look. That way you'll be able to apply your c# backend to a front end, which imo would be a nice transition. Plus I wouldn't be surprised if your school goes into it at some point as my program did in two different classes when I was there. 
Thing is that they haven't changed the way you index an array, but instead added a index overload for the new `Range` type. So `^1` creates a `Range` - `-1` would be ambiguous because it is a valid integer so the compiler would use the normal integer indexer. And because you could create your own integer indexer `-1` is perfect vaild
I'll admit I feel a little spoiled =) 
I should have been more clear on my post. I figured they went hand in hand. 
It really is. I will always recommend c# to beginners now. 
The ecosystem was what brought me to C#, I learned it on my own and them sought a job in .Net, so sort of backwards from how everyone does it. I was a Coldfusion guy for about 10 years just because the company I worked for used it. I had CF and Java under my belt, and after significantly (6 months) trying Ruby, Python, Node/Express, and C# I settled on C#. I was looking for a new home base with CF being a dying language and this is where I found it. The other big item people don't talk about is how nice it is to have a language that is so we'll paired with it's OS. Are you sort of locked into Windows a bit? Sure you are, but you also have the advantage of having far fewer headaches. I'm working in VB at the moment but that's very close, though I'd love to make the transition over. 
I both agree and disagree. On one hand, this is really confusing for new people and it might confuse people even more without a long beginner friendly tutorial. However, I do believe it's important to understand the difference between C# the language, the compiler, the CIL, the CLR, dotnet framework, dotnet standard, dotnet core, and visual studio. Each of these things have really important steps in a long toolchain, and having an understanding of what each piece does, why, and when is an important part of growth. And also, while I understand your statement in principle, it actually adds to the confusion because even your quip is wrong. C# has existed for a decade without the .NET Framework in the form of Mono, and now dotnet core. 
I believe it will. C# has nearly every feature baked into it somewhere, so you can try just about anything. Anonymous functions, lambdas, events, precompiler directives, reflection, LINQ is a favorite, there's a great ORM (Entity Framework) built in, compile-time typing with "dynamic", pretty much whatever shenanigans you want to do can be done. One of my favorite tricks is compiling DLLs and using them in Classic ASP to extend it's functionality into things that were never possible, so even when maintaining old code I can inject new features when I need to. Most recently I added .NET's timezone conversion with daylight savings to maintain a legacy ASP Classic app. Not too shabby. 
That's how I felt. Javascript was the first I tried, I got it but I didn't if that makes sense. It's probably like you said It didn't click for me until c#
They have so much built in and I probably only hit like 1/8th of it coding yesterday. It's so well done and makes me want to use other languages. 
Most likely different, then.
i'm the artist. i'm doing all the art. I don't know anything about coding. 
Or even a regular array if you use a non-zero lower bound. (Which is very, very, very rare but could happen with some crust old code converted from VB 6.)
But that isn’t true. C# is used in .NET (Framework), .NET Core, and Mono (and off-shoot Mono implementations like Unity) and you can’t easily move code from one to the other without targeting .NET Standard. C# has 3 different runtime implementations and 2? library targets. Saying there is no difference between the two isn’t really correct.
I must be missing something... will have to dig deeper I guess lol
Perfect. In that case, download assets/projects/templates or follow tutorials to get mechanics working and just show the art. Don’t try and solve coding issues. Just get ready made assets, those are abundant. 
Is there a site I can go to to help understand each piece? 
You are the one overcomplicating things. C# works completely fine without .NET and many programmers are using it this way. I'm thinking about Mono and .NET Micro Frameworks. I'm sure there are others. .NET Framework is completely fine without C#. In fact there are some niche applications where F# is better suited. It is wise to remove the unnecessary details from the line of work, but it's not a bad thing to understand underlying concepts of the environment we are working with. Understanding the difference between the language and the framework is probably one of the very most fundamental things. If you've never had to deal with .NET issues then I don't really believe in this *I've been working with C# for 17 years* thing. Damn, I'm using it profesionally for 4 years and I've already found myself stuck in .NET implementation details multiple times. I'm talking about problems not linked with any programming language at all.
I'm not too concerned about default interface implementations being useless, because won't "extension everything" be able to pick up the slack? E.g defined an extension property on your interface type and have it carried over to concrete types?
Alright. Believe what you want. I’m gonna get back to coding and put reddit on mute for a bit. Peace.
Yea, sure.
I’d be interested in seeing your test code.
&gt; Vb, F#, and C# Don't forget vbs and powershell
That's pretty normal, JavaScript is pretty complex.
Java was my first language and C# was one of my first as well. Both C# and Java are great first languages.
It could be useful for debugging as the throw; can be used as a breakpoint, and using it this way won't affect the overall control flow. Interestingly I feel the opposite regarding the definition of the Exception instance references in the catch clause. I've always rather felt that it was a "code smell" to be missing it, and means that the handler is incomplete because I personally don't think you can adequately handle an Exception knowing only the Exception class 90% of the time. Handlers which do are making assumptions about the Exception. For example a catch for NpgsqlException that doesn't use the Exception instance is going to be making assumptions about what query caused the error, what the query error was, and how ot can be handled. But that handling is not going to work if that wasn't the error. Instead the handling should be ensuring that the case that is expected is the one that occurred, and that requires inspecting the Exception instance.
C# is my favorite language. The syntax is flawless and the default classes in .NET make some difficult tasks in other languages (ex: c++) insanely easy without installing huge libraries. Tons of public resources to learn from and unlimited capabilities.
&gt; .NET has 3 different languages you can use with it Yeah, you're missing quite a lot of languages that can be compiled to CIL. https://en.wikipedia.org/wiki/List_of_CLI_languages
I'm just glad all the regular dev jobs have a better alternative to Java.
The trade-off is that it actually adds readability and reduces verboseness.
&gt; JavaScript is pretty complex I'd say it's especially easy to make mistakes and not particularly easy to track down those mistakes.
&gt; If you know those then the language does not matter. The platform, however, does matter. Understanding complexity is essential to not make egregious mistakes, but those are broad strokes. It's not too difficult to figure out you wrote an O(n!) algo on a big N and it's causing you problems. The thorny problems arise from the platform - base class libraries, OS, web servers, etc.
*i'm wrong, better not admit it and just play it cool*
 class Program { static void Main(string[] args) { Profile(LoadCharByChar, "Reading a savegame character by character"); Profile(LoadAllAtOnce, "Reading a savegame all at once"); #if DEBUG Console.WriteLine("Press any key..."); Console.ReadKey(); #endif } static void Profile(Action a, string desc) { Stopwatch swatch = new Stopwatch(); swatch.Start(); a(); swatch.Stop(); Console.WriteLine(desc + " took " + swatch.Elapsed); } static void LoadCharByChar() { var sr = new StreamReader("Quickstart_1.gam"); int colons = 0; while (!sr.EndOfStream) { var c = sr.Read(); if (c == ':') colons++; } Console.WriteLine($"found {colons} colons"); } static void LoadAllAtOnce() { var txt = File.ReadAllText("Quickstart_1.gam"); Console.WriteLine($"found {txt.Count(c =&gt; c == ':')} colons"); } }
Just a few megabytes; there's no way it's being paged.
Not paged to disk, but you may be paying for being paged from main RAM to the CPU's cache. If I recall correctly, the typical cache is only 4K. With your fast version, I'm thinking that you never touch main RAM at all. 
Take a look at StackOverflow.com and note how people format their questions. Also, ask the question there. Post much less of the stack trace, really just the first line or so, and post your code in the simplest form you can to still reproduce the same error result. 
Those aren’t quite fair tests though: LoadAllAtOnce loads the file into a string then iterates the string to find occurrences of a colon, while LoadCharByChar just iterates characters in the file stream looking for occurrences of a colon. Those aren’t testing two implementations of the same behavior. It’s like saying “an avocado is more rough than an apple.” Well, yeah, but you wouldn’t want to compare those behaviors. If you’re just trying to find the fastest way to search for occurrences of a character in a file, you’d never want to load the whole thing _ignoring its content_ and *then* search for the data. A slightly more fair (but still entirely predictable and unsurprising result) would be loading char by char, appending each char to a `StringBuilder` object, so that at the end of both methods you’d have the whole string in memory, and a count of colons. 
It's wrong comparing present to the past. You may make the argument that we're a little "spoiled" but that's just wrong, in the past, as example, things were so easy for web(from what I see from old versions of websites) as websites were just badly colored divs and links, people clearly didn't care with the design so their work was much easier than now which became highly complicated with all these Javascript frameworks, CSS's annoying inconsistence that make you wish you never started developing in your life so since things started becoming harder, these websites like stackoverflow and stuff started appearing as developing community clearly started glowing and there were much more problems with programming. What I want to say is that no one is spoiled, either in present or past as the level of developing suited the environment and as the level of developing became higher, the environment became richer as well. Correct me if I'm wrong, please.
I think what I'm probably going to do is spend a little amount of time every day going through front end, while my focus is on C#. Yea I'm not sure what exactly my program goes through, but it does have front end in their. But it's not classes where you build stuff.
Yea that's where I'm starting. Then probably heading to pluralsight next!
This really has to do with the type of reader you are using. Any forward only reader is going to be fast. If you don't need the whole file use forward only and stop reading when you have what you need.
Ages ago I wrote one of those text-based adventure/RPG games based on how MUDs work (eg you can move between rooms, see what was in the room, take stuff, drop things, etc). This was with Visual Basic 6 though. For some reason as soon as I got it so that it "worked" I didn't actually make anything with it. It had a rather involved engine beneath it where various attributes were all handled through "compiled" expressions. For example a Character in the game had their attributes calculated together based on their own attributes as well as the attributes of their equipment, all of which themselves could interact with those base stats. So for example a shield could have a defense value that is twice what the character's is or it could have a deflection rate that is doubled if you are using a specific dagger, because the attributes were actually expressions that were evaluated by the Expression Evaluator I had already written. Despite this, all you could actually do was move around to different rooms, fart to create Stinky Fart Men (In my defense, I was 16...), and fight them: Player name is BC_Programming &gt;fart The stinky fart man appears. &gt;kill stinky fart man You stab the Stinky Fart man for 33 damage. the Stinky Fart man is DEAD. you gain 500 exp. &gt;fart The stinky fart man appears. &gt;kill stinky fart man The stinky fart man evades your attack. The stinky fart man disarms you with his odour You dropped your Steel dagger! You hit the Stinky Fart man for 18 damage. The Stinky Fart man accidentally smelled himself and took 8 damage the Stinky Fart man is DEAD. you gain 500 exp. &gt; 
I've used that for similar reasons. So you might be right. Sometimes there are weird situations where a framework eats an exception so Visual studio will not show me it happend. That's really annoying when stepping through with a debugger as I can't see what just happend. So I use this kind of try-catch so the debugger will step into the catch-block where I can inspect the exception. The extra variable `ex` is useful for inspecting the exception in the debugger right in the editor window rather then using the locals window. It's not nice that is goes unused but it does help debugging and I can't `throw ex` because that would destroy the callstack.
c# simply is the best language for me, even more with dotnet Core now :)
I've been using it since the beta days. I doubt I've even hit 1/8th ;) it's huge!
[removed]
I honestly do not understand why we need new syntax for array slices. A simple extension method would be sufficient. 
What would that method look like to you? Are you talking about the "`3.To(6)`" option that some people have suggested on github? Or something more standard like `intArray.Range(3, 6)`? Personally I think the new syntax will prove to be quite powerful, especially now that I understand it won't be limited to only compile-time constants. I just don't like the idea of `[^1]` being the last element rather than `[^0]`, etc.
It's not a _community_ when the platform is harmful to their users, like Discord is. Coercing people into being put in danger is hardly an incentive for a community. You can form an actual community using any alternatives based on Free Software, like stuff using Matrix such as Riot if you're into stuff similar to the general UX guidelines of that other thing.
I really hate the slicing operators. These should be methods. I hate to see additional operators if they are not well-known math operations with corresponding symbols and we already have those. I think it is far easier to read words which form something similar to a sentence than counting dots and deciphering symbols.
Try reading the file in chunks of different sizes.
Wish there was one for python lol
He worked on Delphi, Turbo Pascal, and J++ too. The man is a legend
...we don't talk about J++.
Oracle might come knocking on my door if I mention it 3 times.
C# is truly a joy to learn on.
With the advent of .NET Core, that OS lockin is becoming smaller by the day! It's truly a wonderful ecosystem to create in.
For one linq will be slower than a loop. Reading the entire string into memory obviously has overheads. But more importantly your are iterating the data twice in the second method. Once into a string and then char by char using linq.
`LoadCharByChar` doesn't *really* read the file character by character, `StreamReader` internally buffers a couple of kilobytes.
I'm guessing here, but he probably wants to know the coordinates relating to that angle on the 4D unit hypershpere. Except that isn't quite possible: an n-dimensional rotation can only be represented in an n+1-dimensional Euclidean coordinate system (with a unit-sphere coordinate or a line equation).
What is the thrown exception ?
I didn’t say spoiled because I wasn’t trying to make a post with a negative connotation. It is much easier now to start programming with C#, it is a nice language with lots of online resources. I started programming with C++ and my only resources were books. Making something half as useful was easily 10x harder. I feel lucky to be programming in the current world today with nice languages and helpful online resources. All I’m saying is that you can feel lucky too if you want.
How is the new syntax more powerful than intArray.Slice(3, 6)?
I was in a code review recently where someone called out the use of ternaries because they didn't know about them and that we should gear for the most junior members of a team. I think it's great that C# is pretty verbose by default, but sometimes it goes too far in people not learning features.
I know I work at a great company because my coworkers also geek out about how spoiled we all are in our toolchain. The software practically writes itself for us!
Some notes when benchmarking: - The OS is going to cache your file between calls, so it's hard to compare the IO code. - You're including JIT compilation time in your timing. - You should use multiple runs and make the first run of each not be included in the timing.
I love C#, and also love how TypeScript is so much like it but can run in a web app, like with Angular. Was blown away and delighted using inheritance and generics, and VS Code rocks with both and other languages
Oh yeah it got answered sorry for breaking the rules 😭
Yes c# being complex of a language but the build, dependency, idea set c# apart
Visual Studio really does make every other IDE feel like a toy.
Don't forget about Mono, the O.G. cross platform .NET runtime.
Sounds like you've got it pretty well. Nice work.
Mono is stupidly useful but definitely has a steeper learning curve.
Are you sure? This was a topic I struggled with badly last semster so I want to be 100% right with it
&gt; 1) We are sending by reference, two double values, v1 and v2 to the Method known as Average. No, all values in C# are passed by-value; unless the `ref`, `in`, or `out` modifiers are specified. This is a pedantic but *important* thing to know. Most types in C# are 'reference types' (classes), such as `string`; but even then when you call `someString()` you are passing a **copy of the reference** to string1 and string2. I understand this is confusing but if you were passing-by-reference you would be passing *a reference to those references*. Some types are known as 'value types' (structs); `double` is one such type. In this case, you are passing a **copy of the value** instead of a copy of the reference. In short, pass-by-reference is passing a *reference to your variable* whereas pass-by-value is passing a *copy of your variable*. In almost all cases in C# you are passing-by-value; it's just that that *value* could be a reference (which it often is). I try not to get too pedantic on learners and it's okay if you don't understand this fully right now or what I wrote is confusing. I just think it's important to at least point out faulty thinking in order to help long-term. 2) v1 and v2, properly matching the parameter list in the method signature both in terms of type and order in the sequence, are accepted, and they are then given the names d1 and d2. Mostly correct, but I would write that as "a copy of v1 and v2 are used in `Average()`, with the names d1 and d2". 3 and 4 are correct. 5 is pretty much there too; but again I would just word this as something like "the value returned by `Average()` is copied in to `averageValue`". 6 is pretty much correct. Hope that helps. Feel free to ask follow-up questions. Otherwise it's all 
Yes, the only nit to pick is passing by reference vs by value. By default, C# passes by value. You can test this by modifying d1 within the Average method and then checking the value of v1 in the Main method after Average executes. Had a reference been passed in, v1 would hold whatever value you assigned to d1. A gotcha is that you can pass reference *types* by value and then manipulate that instance's members within the called method and those changes persist. I'll edit in an example shortly.
Yeah I don't think there's any good reason for a dev to not know ternary statements. 
I can almost guarantee that there is if you look hard enough. 
Have you already tried [http://instant-eyedropper.com/](http://instant-eyedropper.com/) ?
Well you can always get an idea by the RGB values themselves of course - the higher the R, G, and B values, the more of those particular hues you'd get. There's a number of tools for this, most of the ones I've seen are used for web development, however. &amp;#x200B; I'm also color-blind, and I've found that using complimentary color wheels is very helpful when selecting colors for UI purposes and whatnot. So, I know what you mean by "cheating," although I consider it to be making up for a potential handicap that others have no idea exists. &amp;#x200B; For selecting a color... Spy++ does a good job of giving window properties (any object you can select, actually). I found this for you: [https://docs.microsoft.com/en-us/visualstudio/debugger/introducing-spy-increment?view=vs-2017](https://docs.microsoft.com/en-us/visualstudio/debugger/introducing-spy-increment?view=vs-2017) &amp;#x200B; Once you have the color, getting a name for it might happen here: [http://chir.ag/projects/name-that-color/](http://chir.ag/projects/name-that-color/) &amp;#x200B; I hope this helps, fellow colorblind friend! :) &amp;#x200B;
I don't know if you're looking for code that will do this at runtime, or just a tool. Here is a website that I think is pretty good with colors: https://www.colorhexa.com/ For example if you search this random hex code I typed, #ff3299 it tells you that it's "vivid pink" among lots of other useful information. This other website seems more exactly what you're looking for: https://www.color-blindness.com/color-name-hue/ For the same hex code, it calls it "wild strawberry." The js library it uses says &gt; The color names in this list were found via Wikipedia, Crayola, and Color-Name Dictionaries like Resene.
I really like the new syntax. Having used C# for the last 15 years, I've always hated how much carefulness is involved with substrings (and half the time pluging the array size inside the function). 
Sorry I didn't understand too much of that ELI5? 
Pixie is what you're looking for, extremely lightweight/portable and has hotkeys for copying the hex color.
[removed]
Well I suppose it's just terser. Technically you don't need even the standard array indexing syntax right? You could always use `_myList.ElementAt(3)` (ignoring perf differences) instead of `_myList[3]` but when dealing with multiple calls or nested collections I think it will quickly add up. And I think a lot of what we do as developers is work with collections.
I just take a screenshot and use MSPaint. I know, I know, high class tools right there.
[Name that Color](http://chir.ag/projects/name-that-color/#512888) is an online tool that does pretty much exactly what you're asking for. Although it might actually be too specific for your needs. Another alternative is that you look at colors in the HSV or HSL space. They're both closer to how most people think of colors than RGB does.
ShareX has a fuck ton of development tools in it. [Here's a screenshot of some of them](http://u.zeaga.me/x613Kgcd_2.png) (That I used ShareX to take)
Ahhh OK thanks
Woah, isn't Chirag the guy who made one of the first Falling Sand games? That's awesome. I haven't visited his site in over 10 years.
I used to have an Eyedropper / Colordropper Chrome extension to let me lift colors off of web pages.
I use ColorPix, [https://colorpix.jaleco.com/](https://colorpix.jaleco.com/)
I’m looking at list and the getEnumerator() method just returns “new Enumerator(this)”, but I don’t see a definition of the Enumerator class anywhere.
Don't know any really but I know what too I'm building Tuesday night, thanks!
I finally understand this now, thank you. So, all an ienumerable does is expose the getenumerator method. The getEnumerator method returns a class that Ienumerator is implemented with. Internally the class returned by getEnumerator just returns a collection type of whatever was originally created (list in this example), and the class is named Enumerator with the actual implementation that holds state for deferred execution. Basically, a count and a current item of whatever collection you’re dealing with. Hooray! I feel much better that I have a more complete picture now. I don’t like using code that I don’t understand, no matter how trivial.
More specifically I should say Enumerator is a ‘struct’ in this example.
Surprised that no one has mentioned [paint.net] (http://getpaint.net/) (free). Can download from their website or from the Microsoft Store (small charge). Basically MS Paint on steroids. Has an eye dropper tool and a color wheel for RGB/etc.
AutoIt (Windows) comes with a standalone tool, au3info, that includes color under the cursor (and a magnifier with crosshairs to help pick).
 Inter illos clarissimo iracundus incendit ignem
For windows use : Colorcop
Don't think of them as operators (they aren't). Think of `1..5` as syntax for an object literal, no different from `25L` or `false`. I believe they plan to call it a `Range` type. The rest of the story comes from implementing operator overloads for the indexer (this already exists) for that particular `Range` type in addition to the `int` overload. I hear you on the syntax for the Range literal, but I guess it could be worse. They could have implemented the [full breadth](https://stackoverflow.com/a/7958408/564755) of Haskell's range expressions!
A lot of stuff can be made terser with custom syntax, but that's not a reason to special case each and every use case, especially if this only saves 6 keystrokes. Special syntax is a tradeoff between ease of use and ease of learning. It is often very hard to google, and the IDE doesn't tell you shit. Just try to figure out the ternary operator without prior knowledge. 
Do you just need a tool (like the others already suggested) or do you want to code such a thing yourself?
Two points: * Constants.cs: In c#, you generally ise [enums](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/enum) instead of constants. It gives you type safety, and constants are, well, meant to be constant, like Math.PI and stuff like that. If DEFAULT_SCRIPT or DEFAULT_SOURCE change, all clients have to recompile, because constants get inlined. * C# has terse syntax for getters and setters. The whole Pair class with more than 65 LOC can be reduced to: public class Pair { public string Word {get;set;} public string Script {get;set;} public string Inverse {get;set;} public bool Bidirectional {get;set;} } * Use the appropriate equals overloads (``x.Equals(y, StringComparison.OrdinalIgnoreCase)``) for case insensitivity instead of x.ToLower().Equals(y). [here](https://github.com/sirkris/ELIZA.NET/blob/master/src/ELIZA.NET/ScriptHandler.cs#L69) it's probably not a big deal, but ToLower() can be problematic in certain locales, where ``x.ToLowerCase().ToUpperCase() != x``, and on top of that, it needlessly allocates a new string. * I'm curious about the Json.Net problem mentioned [here](https://github.com/sirkris/ELIZA.NET/blob/master/src/ELIZA.NET/ScriptHandler.cs#L132). Since JSON is very easy to parse, but incredibly difficult to write by hand, I'm inclined to think that this is not a json.net bug. 
I'm pretty sure they're the same. The MonoDevelop Github page says it's what is used to build "Visual Studio for Mac," and that issues for Mac's Visual Studio should be filed on the MonoDevelop Github page.
ColorPic has been my go-to tool for years. Don't know how it compares but it's been a real pleasure to use http://www.iconico.com/colorpic/
I'm not too familiar with EF, but is your Organization object having other queries ran for each returned result (eg N+1 queries for each result returned)? &amp;#x200B; You may want to turn on verbose query logging in EF however that is possible, to confirm no other queries are occurring.
Sum?
Can you be more specific on the problem?
Yeah sorry, so your purchasing five items You ask the user for the price of each item then you subtotal the cost of these items and multiply the sales tax (0.06) then add subtotal to taxes and get the total then display all that. My question is about storing the user input values to the items. So if there is another way to do this: Double item1; Double item2; Double item3;.... up to 5 Console.writeline(“what is the price of item one?”) Item1 = double.parse(console.readline()); ... up to the five items. Is there a way to do this without having variables item1-5 without an array?
Huh, that's odd. I can't reproduce the problem with the newest version on nuget, it parses just fine. It's really weird because properly escaping a backslash is pretty fundamental for a json parser. 
Addition.
Either your trolling or you don’t understand what I’m asking here
You could do something like double subtotal = 0; for (int i = 0; i &lt; 5; i++) { if (double.TryParse(Console.ReadLine(), out double d)) subtotal += d; else return 1;//cant be parsed } 
[Plus](https://www.mathsisfun.com/data/cumulative-tables-graphs.html)
So you’re trolling.. cool thanks
But I never claimed that the array indexing syntax is more powerful than a method indexing syntax. I can of course defend the array indexing syntax but it won't be on the grounds that it is more powerful.
I'd start building a toy app. Linq with anonymous types/lambdas is good but mostly when calling a database.
I write scientific desktop software as well and we recently switched our styling to the Google material design, maybe worth a try checking it out. MaterialDesignInXAML you can use for wpf applications. 
I'm not exactly sure what you mean by that. This is my code: var jsonFile = @"c:\users\thomas laimer\desktop\doctor.json"; var json = File.ReadAllText(jsonFile); dynamic result = Newtonsoft.Json.JsonConvert.DeserializeObject(json); Console.WriteLine(result.keywords.dreamed.rules[0].decomposition); And it runs just fine and prints ``(.*)i \w* dreamed(.+)`` as expected. 
Linq threading asyn stuff
Technically it isn't, but there's a reason that the non-generic version of it is named `ArrayList`.
1) if you aren't going to modify the records you are pulling out, always use .AsNoTracking() as the first thing in the chain after the table. That is a significant performance boost 2) You are reading the entire record for each record that matches. Narrow it down with a .Select(...) statement to just the columns you actually need to use for another significant performance boost (the greater the number of columns and volume of raw data in this columns the slower the query will be) 3) Put an index on the Name column of there isn't one already
I work for a medium-sized company. We aren't even allowed to touch our phones except during break times. With the internet I can finish one project using VBA in a day, but right now I get to finish one in three weeks. It can get really frustrating cause I can just stack overflow the errors but I can't do because of the policy.
Try a real (but simple) project. Try to read in some values - shuffle them - output. Write a small program to test reaction times. Write a program that guesses a number you think about by asking you questions like "is it greater than 12" ... "is it smaller than 34" Long story short - solve simple but real problems and learn stuff you need to solve them.
Oh I see, but in yours you're deserializing it to a generic JObject, whereas what I'm trying to do is deserialize to a set of custom objects (in this case, we're deserializing it to List&lt;Keyword&gt;). Try changing it to that and see if you still get the error then. And thanks for your help btw. =)
Perhaps using a dictionary. If not an array or List, this might be what I would choose. Heres an example. (Very much an example, will not compile on its own!) // Dictionary to store the items and the costs private Dictionary&lt;string, int&gt; items = new Dictionary&lt;string, int&gt;() { { "Item Name 0", 0 }, { "Item Name 1", 0 }, { "Item Name 2", 0 }, { "Item Name 3", 0 }, { "Item Name 4", 0 }, }; // Within method asking for input, probably 'Main' // for a console application foreach(var item in items) { bool isValidInput = false; float result = 0f; while(isValidInput == false) { // Could use an interpolated string here Console.WriteLine("How much have you spent on '" + item.Key + "'"); // Get user input and parse it to the correct data type, float probably string input = Console.ReadLine(); isValidInput = float.TryParse(text1, out result); if(isValidInput == true) { // Set the parsed input to the current value in the dictionary items[item.Key] = result; } else { // Tell the user they entered incorrect details. // At which point the loop will ask for input again from the user, hopefully correct this time Console.WriteLine("[ERROR] Incorrect input from user. Please input a correct float"); Console.WriteLine("-----------------------------------------------------------------") } } }
If you just need the subtotal, tax and total, then there's no need to store the price of each item, just the culumative subtotal.
Yeah, but it's not for arrays. Some values are numerical and some are not. 
Um, can't you call it like this: var num = 0; if (Int32.TryParse(row[i]col[i], out num) { // It is a number } else { // It isn't a number } Obviously you might need to wrap it in your loop
Take a screen shot then use the eyedropper tool on a graphics editing program like gimp or photoshop to select the colors high want from the screenshot. Once the color is selected you can view it's rgb and hex code values
You should have a good screen capture tool setup anyways such as Greenshot. Take a screenshot and open in mspaint or Paint.Net. 
I use Meazure. http://www.cthing.com/Meazure.asp
Just curious, which country is this? Never encountered anything like that
I never liked to learn a new language through books. Or learn all available concepts. I always learn programming languages while doing something. Grab a application idea which would be helpful for you. Mine was years ago a C# MP3 Desktop Player done with WPF. My MP3 Player was done this way: 1. Take a sample wpf application and try to understand it (for example from a "Get started" tutorial) 2. Take a feature you need in your application (for example "audio playback") 3. Search how to implement this feature and try to understand the samples and integrate it in your application 4. Refactor you current application with the new concepts you learned in step 3 5. Repeat step 2-5 until you are finished At the end you will know the most common concepts of a programming language.
There's a good chance my boss might find me here so I'm just gonna say I'm from a Southeast Asian country.
Okay, thanks :-) well there is always C# 7.0 in a Nutshell
/r/dailyprogrammer
Simple WinForms
You have a few options. The first, as already noted, is to attempt a TryParse. Another would be to use a regular expression. This isn't terribly performant, but wont be subject to overflows if you're given some bad data. You could also loop over the characters in each string array and use char.IsDigit() method. Probably better to use that in a LINQ expression for compactness. Something like: var isNumber = !string.IsNullOrWhitespace(testString) &amp;&amp; testString.All(char.IsDigit); I'm sure there are plenty of other ways to skin this cat. I encourage you to try multiple solutions and determine which one performs the best, which one is the most readable, etc.
If you're working on .net and on Mac, full VS is better.
Both have thier advantages. If I can get vs is my preferred. Otherwise vs code.
The top three IDE's for C# on macOS are: * Visual Studio for Mac - This is evolved from Xamarin studio and MonoDevelop, and with that heritage as you would expect it works best for app development, both on the Mac and cross-platform. Works with either Mono or .NET core. If you want to do Xamarin development, the best choice on mac in my opinion. * Visual Studio code - This is a small light cross-platform programming text editor by Microsoft. Works very nicely with .NET core - I've never attempted to use it with mono. Works very nicely for web development. * Rider from JetBrains - Cross platform IDE, developed from one of the leaders in IDE development. I haven't actually used this one, but IntelliJ is great which they also developed. I imagine this one would be well worth a look for web-dev if you want more of a full IDE than VS Code is. If you want to develop for Windows, you probably still want to run a VM and run Visual Studio for Windows in it - a lot of the Windows GUI functionality is only available under Visual Studio proper and a Windows environment. Personally, having done exactly what you're thinking of in the past, in future I would make my life easier and pick a good high-end Windows laptop for .NET development. But that should give you an idea what your options are if you still want an Apple laptop.
If you are running against an SQL Server, have you tried SqlFunctions.PatIndex? [https://docs.microsoft.com/en-us/dotnet/api/system.data.objects.sqlclient.sqlfunctions.patindex?redirectedfrom=MSDN&amp;view=netframework-4.7.2#System\_Data\_Objects\_SqlClient\_SqlFunctions\_PatIndex\_System\_String\_System\_String\_](https://docs.microsoft.com/en-us/dotnet/api/system.data.objects.sqlclient.sqlfunctions.patindex?redirectedfrom=MSDN&amp;view=netframework-4.7.2#System_Data_Objects_SqlClient_SqlFunctions_PatIndex_System_String_System_String_) &amp;#x200B; You'd use it like: &amp;#x200B; return context.Organizations.Where(org=&gt;SqlFunctions.PatIndex("some text", org.Name)).ToList(); &amp;#x200B; That should do a like against the database and be faster. I'd also recommend Jothay's tip of .AsNoTracking() 
Any particular reason you chose to use the registry vs. just storing all of your settings in ProgramData or the user's roaming profile location on the file system? The registry doesn't translate to other platforms. Also, the ScriptHandler could be refactored a bit to provide better separation of concerns, and to capitalize on the Single Responsibility Principle. If you want to have multiple sources for your configuration, consider implementing each source in it's own class, abstracted behind an interface. This allows you to pass the implementation into the ScriptHandler, so that if you need a new source in the future you don't need to add a new constant and modify the ScriptHandler class to support the new behavior. It also would make your design more testable. "Open for extension, closed for modification". Check out SOLID. Also, building a JSON string is not very efficient vs. just using a JObject directly. Example: jObj["GenericResponse"] = "Read from wherever you want". Much more readable and maintainable, IMO. Instead of doing s.ToLower().Equals("whatever"), use the overload that takes a StringComparsion enum value, such as StringComparison.OrdinalIgnoreCase. Just a couple of things I noticed right off the bat. Cool project! 
Wtf dude just store the sum of all prices as you dont need the individual prices
Just taking a look through, I see a few compiler warnings about some ToString() methods. You'll probably want those to override object's ToString().
Thanks for suggestion
\#3 is completely irrelevant. An index isn't going to do anything on this LIKE query with a wildcard at the beginning of the match string. \#2 &amp; \#3 aren't incorrect, but aren't going to amount to 2.5x speed up unless these 55K rows have oodles of large columns on them that don't need to be selected.
There’s also official IDE supported by Microsoft - ‘Visual Studio for Mac’ + .Net Core (Windows/Mac/Linux). Available on MS pages, free to download and install.
If you're new to programming, data structures and algorithms
without knowing the SQL that's generated it's hard to say what's going on. But a dumb question - is this consistently happening or does it only happen on the first query? If it's the first query you are seeing the perf hit as EF generates all the magic behind the scenes.
It's pretty important that the range be inclusive-begin exclusive-end. So, an empty range is `0..0`. How would you represent an empty range with an inclusive-end? `0..-1` ? Having an exclusive-end makes many many operations really simple. The entire range would then be `0..^0` or `0..Length`. When processing fixed width chunks, you simply add the chunk size: `i..i+n`. Having an inclusive-end would result in `i..i+n-1`.
Not sure if this is the root problem, but the doctor.json file is not valid for the types your trying to deserialize to. For the Reassembly type your trying to deserialize to `List&lt;string&gt;` but the json is: `"[\"Why do you think I $2?\",\"You like to think I $2 - don't you?\", ...]"` You'll need: `["Why do you think I $2?","You like to think I $2 - don't you?", ...]`
In chrome, add a color property and set it to any valid value (or inspect any existing item with a color value) Select the color value, putting it in edit mode. Use the eyedropper to select your pixel 
Upvote for pointing out the SRP violation. I'll take it a step further and recommend the library should have an entry point that accepts the already-loaded scripts/config. The actual IO should be the responsibility of the executable, not the library.
I think this a good argument for the range operator being exclusive-end. Like I said in the post, it's not black-and-white and you certainly make a good case here. Frankly, if it wasn't for the hat operator, I'd agree that the range operator *should* be exclusive-end. But I just can't get past the fact that things like `myArray.Reverse().ToArray()[0]` not being the same as `myArray[^0]`. &gt; With this foundation, I think ^0 should be Length; ^n should be Length - n. The entire range would then be 0..^0 or 0..Length. So, the last letter would be ^1..^0 (or just ^1). If the range operator was inclusive-end, the entire range would *still* be `0..^0` (assuming the hat operator started at 0 instead of 1 as well). Not `0..-1`. That being said I think what you wrote about fixed-width chunks etc. is very compelling so I've added a link to your comment in my blog. 
Just be aware there is no official UI library for NET core. 
Hi I would recommend thinking about how you're going to structure this a bit better. My assumption is that you want to store details for more than one "Archer". If so you probably want a place to store multiple Archers so you can lookup details about a specific one? As far as your code goes, I would recommend: **A) removing the Create() function and instead calling a custom constructor for the class:** `public Archer (int id, int hp, float speed, float attack, float defense, float range)` `{` `Id = id;` `Hp = hp;` `Speed = speed;` `Attack = attack;` `Defense = defense;` `Range = range;` `}` **B) make the Archer class "public":** `namespace Units` `{` `public class Archer` `{` &amp;#x200B; **C) Make a list of archers to store the archers in (global variable?)** `public static List&lt;Archer&gt; Archers = new List&lt;Archer&gt;();` &amp;#x200B; **D) switch on the input (or just use if/else)** `switch (input)` `{` `case "create: Archer"` `{` `Archers.Add(new Archer())` `break;` `}` `case "property: Archer 1"` `{` `int archerId = 0;` `Int.TryParse(input.Substring(input.LastIndexOf(' ')), archerId);` `Archer archer = Archers.Find(x =&gt;` [`x.Id`](https://x.Id) `== archerIndex);` `DisplayProperties(archer);` `break` `}` `}` *//NOTE: DisplayProperties is a function that takes in an Archer object and displays the properties of that archer.* *//This is probably better than having all your string formatting within the archer object itself.* *//Also you may want to implement some better way of searching via the archers Id.* &amp;#x200B; **E) Look into string interpolation for your properties (it's a lot neater):** `string str = $"Health {Hp}\n";` &amp;#x200B; &amp;#x200B; \##**This is just how I would look at it, it may not be the best answer.##**
There is no way to not touch RAM; cache coherency is maintained. Besides, IO is buffered internally. 
It does make exception stack traces worse, since it sets the current frame to the rethrow point. 
What sql is your ef generating? Also add AsNoTracking as the first call that will boost performance.
No just sum the numbers as you read them in. Then calculate tax and total at the end.
&gt; we aren't allowed to have internet connection What? I can't even begin to imagine how inefficient I would become without the internet. It's such a huge time saver to have google find the answer to anything you need to know. Also life without stackoverflow would be sad.
[https://github.com/naudio/NAudio](https://github.com/naudio/NAudio) &amp;#x200B; This is a library that gives you a lot of control over the audio. It might be worth playing around with it to see if it'll allow you to read the waveform and/or spectrum of the audio it's playing. I played with the library a bit and it only took me a couple of minutes to set up channels and such and play a couple of audio files. I didn't need anything more than that but I know it's very capable. 
can't you just change the behavior by a XAML code
That funny, I use MaterialDesignInXAML for my applications also. I like the look of the controls, but I've always felt the color schemes in MD were too bold and cheesy looking. 
Thanks! Your link led me to this which is what I was searching for and more: [http://chir.ag/projects/name-that-color/#6195ED](http://chir.ag/projects/name-that-color/#6195ED)
"most advanced software API" that doesn't support things like torrent in background and crashes just by navigate the app or simply launching it.
I looked at the repository real quick and got weird feeling. It is clear that author comes to c# from some other language. Sometimes it feels a bit like an old Java, other times like C/C++. Here my observations: * Binaries in repository. Why? Add only source code and solution file. There are even pdb files in that repository. That is really unnecessary. * There is some kind of registry install. Very very weird. Why should I install anything at all? I want to run the app from command line or visual studio. * Readme file says "copy dll and add reference to the project". This is pure C. approach. Very outdated. You should create one C# solution with multiple projects and all necessary project and nuget references. Then app could be started by a single mouse click. * App appears to save data to registry. That is super-weird. Just write data to a local file. * Source code is not very c#-like. Consts as somebody mentioned are not needed. Get, Set methods should be replaced with properties. That would save a lot of space. * Some string checks could be simplified. For example string.IsNullOrEmpty and string.IsNullOrWhiteSpace could save a few lines here and there. * Finally why not make it a .net core console app that would run on all platforms? &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
It gives hex codes but doesn't name the color so it really doesn't do me any good. For instance, I have no idea what RBG values make something brownish in color.
Hi thanks for your reply , actually i meant with sql query the query i wrote in sql management studio to check the difference between ef and sql MS , and yes the query like that wouldn't execute i just wrote from the editor here and i mixed up between the condition i remember i wrote for stored procedure i wrote in SQL,MS which and the condition for the plain query last Yes i wrote the queries and checked it it's execute Note : i tried to create a stored procedure and called from EF it's work well in SQL MS "Just like the plain query" but for some reason i get always the exception "Stored procedure XXX couldn't found" when I call it from EF , that's another story , and now i just would to know the Performance Hit reason , will check your suggestions tomorrow when i get my hand on the work PC , Thanks
for every query actually , maybe you're right and EF have to do it's magic again and again every time because our call to the Database Included in a using clause ?!! Not sure actually ! but well check the generated SQL query tomorrow and update the post , thanks 
No have No index on the searching column , and I Indicate in the post same query performed using SQL MS take no more than 2 sec,
Fairly simply question. What comes after c? Of course, d. But nobody wants **the** _d_. Let's skip it. E is the next one. But since it's a vocal we skip it - the word _**vo**cal_ starts with the same syllable as the word _**vo**mit_. Now we're finally there. F. F#. That's the answer to your question. Get into functional programming. But if you learn functional programming, nothing comes over Elixir. Since every life needs an elixir to gain it's power from.
Nah, the ef magic should only happen on the first call to entity framework when an app starts. Something that would definitely help is downloading a profiler like DotTrace to really see where the perf issue is.
The problem is with the Argument thing you told me about. It gets the directory of the exe and not where it was opened from
Ah yes. Good point. Tbh you might have convinced me that the range operator really should stay exclusive. I think it's just the way it interacts with the hat operator that irks me. That `[^1]` still feels off-putting, I guess. But I might do a follow up retrospective post in a couple of weeks when the dust has settled.
Use the [-out parameter](https://docs.microsoft.com/de-de/dotnet/csharp/language-reference/compiler-options/command-line-building-with-csc-exe)
.Contains("some text") is actually like '%some text%' rather than your comparison query. Contains and therefore a like with %s on both ends causes a scan over the field rather than an index (assuming there is one on the field). This causes the performance issue you're seeing from what I can tell.
Yes, macs come at a premium, but the build quality is high and there's something to be said for the "just works" aspect. You definitely will not have the same easy experience with a hackintosh. Not to mention hackintosh's are wonky at times, and you can't legally deploy anything to the mac ecosystem using them should you choose to do so at some point. C# development on unix-based OSes like mac os x is just as easy as it is in Windows thanks to .net core. Stop spreading FUD
What are you talking about? My torrent client is a UWP app (Torrex Pro). And it does something amazing you didn't even though was possible: it can still work while the computer is suspended :D (if you have active sleep enabled). That's what I mean with advanced software API.
These people clearly never had to deal with plain MFC to be comparing win32 with UWP.
Oh man, that's exactly how I started learning GUI programming back in the early 2000s. Back then I was blown away by how everything just worked and how "easy" it was have a Windows program up and running with little effort. Now I look back and cringe at the spaguetti code and lack of separation of concerns.
&gt;It seems to be working, however values of columns seems to be randomized The data in your array should be row1 col1, row2 col2, row n col n and you should get an exception when row count exceeds column count. you have the same counter variable for rows and columns =)
[http://www.pegtop.net/pmeter/](http://www.pegtop.net/pmeter/)
I certainly understand the desire to maintain the association between `^0` and the last element. It just seems to "cost" too much.
That's a limitation of the free version. You're wrong. 
I have the pro version -_- 
No, rethrowing with `throw;` does not replace the stack trace. Only `throw ex;` does.
&gt; If you really want to do full stack c# development you're just going to cause yourself more pain if you have a Mac. In what way? I've used a Mac before. The university I went too showed a preference for Macs, at least in the degree I was in.
If you're developing open source or in a group of 5 or less developers I think VS on Mac and VS on Windows are both free. VSCode obviously is free no matter what. 
If you want to develop GUI apps for Windows in WinForms or in WPF then you'll need Visual Studio for Windows. Visual Studio for Mac won't develop those apps. Visual Studio for Windows should run fine in a VM with Windows though so you have options. Parallels seems to work well. 
I know OP asked for feedback, but someone I don't think they were after. code review focuses on technical details...
Tbh, I haven't tried it. Now I will! Thank you for the heads up!
For 1. Search up the "factory pattern", general gist is you could create a "UnitFactory" that can create archers with a "CreateArcher" function that iterates an id and returns a new archer. As others have said, all those basic settings for a unit should be set in a [constructor](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/constructors). example: `public class UnitFactory {` `private int counter = 0;` &amp;#x200B; `public Archer CreateArcher(){` `counter ++;` `return new Archer(counter, hp, damage etc. etc.);` `}` `}` then you can user `archerFactory.CreateArcher();` to create an archer with a unique ID and your default values. for 2 There's no reason why both of these classes can't live in the same namespace but if you need to use a class in a different namespace you need to first import it. Notice you have a `using System;` at the top of your file? that's telling c# you want to use things in the System namespace, you could include `using Units;` to access the units namespace from outside of it. I would recommend grabbing a better editor like vs code with C# plugins that will import other namespaces automatically, just save a lot of hassle. M[ake sure to read about namespaces](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/namespaces/) too. &amp;#x200B; for 3 you can define what's called a [property](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties) in your unit. `public int Hp {get; set;}` that way you can call `myArcher.Hp -= 5;` &amp;#x200B; The correct thing to do otherwise would be have something like `public void UpgradeHp(){}` that way you can call `myArcher.UpgradeHp();`
Yet. Stay tuned for .NET Core 3.0. 
Recursion isn't really important. Definitely recommend C# in depth by Jon Skeet and CLR via C# by Jeffrey Richter. 
Maybe. But if it is really that easy, then why has MS just released a tab control?
https://stackoverflow.com/questions/11616304/entity-framework-code-first-and-full-text-search
Don't tell me it "just works" with all the stupid dongles etc. Apple is more of a fashion statement than a productivity tool. What does a company use in their IT department in a .net c# shop? Yeah then thats what you should use.
Start making simple programs or games you want to make and learn by doing.
Just a heads up, i have a dual boot set up for OSX and Windows. Dont even bother trying to code anything but swift on OSX. Use bootcamp to be able to dual boot to windows on your mac. The user experience is much better on windows, but you get the build quality of the mac (And you still get mac when you dont want to code!)
Isn't that what they're doing with Xamarin? Can't you already make cross platform apps, at least between Windows and Mac with a few mobile platforms in there? I mean, there might be some changes in xaml but the underlying C# code should be mostly the same. I don't know, I don't have a Mac to develop on anymore. I plan on getting one soon but I'm with you, the Windows platform (even in a VM) is a better bet for development since the Visual Studio code base there has a longer history and more eyes on it. 
Black program for USG or a defense / DOE contractor? If not then run cause that’s ridiculous. Anyway you will not learn very well in this situation so I’d advise looking elsewhere also. There’s a lot more to know than just the syntax and APIs.
If I recall it’s because you use an IEnumerable to say that you can enumerate over a collection of something and IEnumerators describe how you enumerate over that collection. So like do you use the IEnumerator to say “I will enumerate over this and skip every other one” but for IEnumerable you say “I know I can enumerate over this but that’s it.” 
This [StackOverflow post](https://stackoverflow.com/a/619636) describes it in the simplest terms: &gt; An **IEnumerator** is a thing that can enumerate: it has the Current property and the MoveNext and Reset methods (which in .NET code you probably won't call explicitly, though you could). &gt; An **IEnumerable** is a thing that can be enumerated...which simply means that it has a GetEnumerator method that returns an IEnumerator. The key here is that you could, if for some reason you wanted, implement a custom enumerator that does something nonstandard. For example: enumerating a collection by skipping to every n^th object in the collection. It's a rare-to-never chance that you'll need to implement a custom enumerator. The most likely candidate is if you wanted to create your own collection type, and even then you're probably reinventing the wheel for little to no reason when one of the generic collections does the job just fine.
Replace the EnterpriseFizzBuzz word "Enumerate", with the easier english "Count". ICountable, ICounter
&gt; Apple is more of a fashion statement than a productivity tool. The world is full of intelligent people completing important work on macs. You prefer something else, so what. OP asked about IDEs on OSX, not how much better your golden flip-screen Asus with magic pen would be for the job. Although it *does* look rather stylish. https://i.imgur.com/SkjZ5Vr.jpg 
This is brilliant. But just how many spatulas do you have? 
I actually don't own any spatulas. 
Yeah, it can get really frustrating at times.
Have you worked this out yet? It was late where I am when I received your reply.
Additionally, you can have methods that `GetReverseEnumerator()` or `GetRandomEnumerator()`, etc. `IEnumerable.GetEnumerator()` returns the *default* enumerator, but that doesn't mean that's the only one.
Yeah, in most places where you might use recursion as a beginner it isn't even faster, maybe just a bit cleaner at best. Don't worry about it for now. Just think of some cool things you could make in a console. A super basic text based RPG or something. Work on that, then move up from there. You can make slide puzzles or kaleidoscopes using crazy println() statements and loops. Just get comfy with the basics and it will start to become easier to plan things out.
This is a standardized .net [iterator pattern](https://en.wikipedia.org/wiki/Iterator_pattern) In simple words we separate algorithm for sequential collection access from data structure. 
I don't think I've ever seen that done anywhere. It would be rather inconvenient since you can't use an `IEnumerator` in a `foreach` or LINQ expression. Framework types usually expose another `IEnumerable` for this purpose, e.g. `BlockingCollection&lt;T&gt;.GetConsumingEnumerable()` or `Dictionary&lt;,&gt;.Keys` and `.Values`
Normally I do this manually in Visio. The auto-generated ones don't understand how the tables are related in a logical fashion, they only know the mechanical links via FK constraints. But if you want SSMS, https://www.mssqltips.com/sqlservertip/1816/getting-started-with-sql-server-database-diagrams/
FYI , you don't really need to implement IEmumerable, if you just create a get enumerable method, results will be the same ;)
I disagree. You're not an imposter, you merely have 0 spatulas. 
Where do you go when you want to buy name-brand spatulas at a fraction of the cost? # SPATULA CITY!
IEnumerable has to provide an object that you use to access the elements one at a time (basically something that keeps track of your position in the IEnumerable). That object is the IEnumerator.
&gt; Any particular reason you chose to use the registry vs. just storing all of your settings in ProgramData or the user's roaming profile location on the file system? The registry doesn't translate to other platforms. The registry is just an optional feature. You can also have it load from a JSON file or an API endpoint. I did it this way on purpose, so that it can be integrated into just about any kind of application/workflow. If someone decides to build a Windows-only application that runs ELIZA, I figured not having to lug a script file around could prove convenient. The idea would be to have your application's installer call the registry install method (it's callable from the library; the .exe isn't needed) so that the JSON script no longer has to be kept around. You think I should have it default to a JSON file instead of the registry? &gt; Also, building a JSON string is not very efficient vs. just using a JObject directly. Example: jObj["GenericResponse"] = "Read from wherever you want". Much more readable and maintainable, IMO. Derp, I didn't even think of that. I originally wrote this in PHP and later ported it to C#, so I guess some of those design patterns lingered.
Not yet, I am currently working on another problem &amp;#x200B;
Heh it's ok, this is good for me. I come from a somewhat diverse programming background so my C#-specific design patterns could use some tightening up. I'll be releasing a 1.10 version of the library based on the feedback received here at some point.
&gt; It is clear that author comes to c# from some other language. Sometimes it feels a bit like an old Java, other times like C/C++. Here my observations: Good eye. My background includes a variety of languages, including those you mentioned. It also might help you to know that I originally wrote this library in PHP, then subsequently ported it to C#. &gt; There is some kind of registry install. Very very weird. Why should I install anything at all? I want to run the app from command line or visual studio. I added this as an optional feature purely for convenience. The use case I imagined was an installed Windows application that makes use of the library. Rather than having to keep a JSON file around, I wanted to give the developer the option to have their installer call the methods to store the JSON data in the registry so the file can be disposed of with the other installer temp files. I am beginning to second-guess making it the default option, though. &gt; Readme file says "copy dll and add reference to the project". This is pure C. approach. Very outdated. Yeah you're right. Old habits. &gt; You should create one C# solution with multiple projects That's already how it's setup. &gt; and all necessary project and nuget references. Then app could be started by a single mouse click. I'll look into that. &gt; Source code is not very c#-like. Consts as somebody mentioned are not needed. Get, Set methods should be replaced with properties. That would save a lot of space. Yeah I'm going to refactor that in the next release. &gt; Some string checks could be simplified. For example string.IsNullOrEmpty and string.IsNullOrWhiteSpace could save a few lines here and there. That's very good to know, thanks! &gt; Finally why not make it a .net core console app that would run on all platforms? I made it a .dll library so that it could be incorporated into any .NET application (console or GUI). It could be built into such an app. The EXE files included were mostly just intended as basic examples (except for RunTests, which is useful if you're planning to modify the ELIZA script or write your own). 
well they forget to include a folder selector dialog for WPF and refuses to do so till today, i am not serprised here i am just saying you probably can change it with from xaml more easily than in Windows Forms 
Rename it to Creating Mmorpg in Unity - and go on with your adventure. To be a tutor you have to have some knowledge on the subject. And you certainly have none
These are great questions, and I can tell as I worked on projects without builds tests and having shitty management - you don't wont that in your life.
Is it not a chmod problem? Do you launch your ps on admin mode? 
It sort of depends what you are doing, but think about calling on an IEnumerable: ‘’’ filtered = list.Select(x=&gt; x.id).Where(id =&gt; id &gt; 5) newList = filtered.ToList() ‘’’ You would get back an IEnumerable, but it would not actually enumerate until you started enumerating in a foreach or .ToList etc. Which is why you might consider it lazy. You don’t actually start doing anything till you attempt to iterate through the IEnumerable. The above example is therefore equivalent to ‘’’ sliced = list.Select(x=&gt; x.id) filtered = sliced.Where(id =&gt; I’d &gt; 5) newList = filtered.ToList() ‘’’ And then you iterated over filtered. Essentially no actual selecting or filtering is done until you finally enumerate. IQueryable is the same idea, but it has the added benefit that the implementor of IQueryable can do some crazy stuff with the LINQ parse tree that is built and then provided, like generate SQL or something. 
I disagree that an IEnumerable should ever be enumerated multiple times. IEnumerable can easily maintain state, or could be a generator function, or could consume data as it is enumerated. In this example it makes sense for a list because that implements IList and has other guarantees, but I highly discourage ever iterating multiple times over an object which all you know is that it is an IEnumerable. Resharper even has an explicit warning for such occasions. 
* https://docs.microsoft.com/en-us/dotnet/framework/winforms/ * https://docs.microsoft.com/en-us/dotnet/framework/winforms/controls/index * https://docs.microsoft.com/en-us/dotnet/framework/winforms/advanced/graphics-overview-windows-forms * https://docs.microsoft.com/en-us/dotnet/framework/winforms/windows-forms-data-binding
Could it simply be an issue with the working directory?
About the explaining recursion with fibonacci numbers, this video from Fun Fun Function is very nice (specially the first minutes :D) [https://www.youtube.com/watch?v=k7-N8R0-KY4&amp;t=92s](https://www.youtube.com/watch?v=k7-N8R0-KY4&amp;t=92s) (I know, he explains it in JS but the priciple is the same in C#) As u/anonymousbjj already said, recursion is not important, because we loops in C#, but it's for some cases a nice to have techinque.
Thanks a lot, after following your comment. I made a class library and was able to add the Logging project in other apis. However, could you please shed some light on why to pack it as a nuget package when we can use it as dll as well? Any advantages versus a dll? Over the head I can think of easy retrieval and version control as one. Any other?
My guess is you're using Process.Start()? Does it throw an exception? Does Window's Event Viewer show anything that could be of help?
I think, if you learn C# to create games you want to use Unity3D, correct? Stop learning the concepts of the language through books! My suggestion to keep motivated and learn C# to create games: 1) Create a small console text adventure (take a get started tutorial for a console app, try to understand it, add features to the game - if you dont know how, search for it, understand it, repeat) 2) Use Unity3D to create a small text adventure (you will learn the basic concepts of the engine, steps to do this like in 1) 3) Take a simple Unity3D tutorial which you like and try to follow it 4) Repeat to create games through tutorials or on your own If in this process a C# language concept is unclear, search for it and try to understand it! This way you are creating something during the process of learning and you should keep motivated. 
This is more of an argument against LINQ than anything!
Still only for Windows though. WPF / WinForms will not be available on linux/iOS.
How so? And what would be the alternative?
In the field I work in (games), creating heap allocations that need to be GC'd at runtime is a big no-no that has to be kept to a minimum. So writing code like "list.Select(...).Where(...).OrderBy(...);", which creates 4 allocations on every single usage is unacceptable vs just writing your for-loops manually which doesn't create any, especially if it's code that runs every frame.
The spaguetti code was standard at the time, but the separation of concerns is what really got me. It's noy even about reusability of classes, it's about knowing where to look when something breaks.
Ahh of course! I have a horrible habit of just assuming an IEnumerable is effectively just going to become a list because that's it's most common use. Completely forgetting it could ofcourse be anything implementing that interface, doing something explicit with the underlying data it contains when it's iterated before eventually returning back a new List object. &amp;#x200B; So the deferred execution in this instance is the fact the "Numerate" or "Count" method hasn't been called yet to actually do something with what the list will contain. Is this right?
`thisElement.y = (thisElement.index % columnWidth) * rowHeight`
[You don't need `Reset()`.](https://sharplab.io/#v2:C4LgbgpgTglgZgTwD4AEBMACAwgWAFADe+GJGKALBgLIAUAogHYCuAttAIYBGANhBhMzZQuvAJTFSRPKRkY4AeygR2AYwAWGGjAbAMMPQ36COPCKIwEMAXwkkbee/nQZGrE73xSZKAMwvjwsCKGADiEMCuQuxBUDTmALwAfBjM3NwA3PiOeM6RHDGetmR+nPLy3NTykAByEAAewHEYSXLs3ADOEJnSpL4GulhMUEo6zckADN1WQA)
i did and it's not supported on mobile was the answer from my experience the OS think it's a music app 
C# in a Nutshell
OK, no problems. I may be misunderstanding what you are trying to do here, but I've taken my best guess at it from your description above. Please correct me if I've made an incorrect assumption. The issue that you have, is that you can't pass a collection or array into the TryParse function. This makes sense if you think about it, as the function is doing two things: 1. Attempting to parse the string into either an integer or double 2. Returning a boolean that indicates whether it was successful or not So basically, for your problem, you are going to have to process each cell individually. This is actually pretty straight-forward. You can access the value of a single cell with something similar to the following: dataGridView1.Rows[index].Cells[index].Value.ToString() So, you just need to iterate through the rows and columns (cells). I don't know enough about your use-case, but lets assume that you know that all of the data that you want to check is in the second column. As the index is zero-based, you know that `.Cells[index]` part should actually be `.Cells[1]`. This means you then only need to iterate through the rows, extract the value and see whether it's a number or not. You can do this quite simply with the following code: var result = 0D; // Initialise result as a double with the value zero // Loop through all of the rows in the data grid for (var row = 0; row &lt; dataGridView1.Rows.Count; row++) { // Get the value for the row var value = dataGridView1.Rows[row].Cells[1].Value.ToString(); // Attempt to parse it as a double if (double.TryParse(value, out result)) { // It is a number } else { // It is not a number } } So, I made the assumption that you knew which column the data was in. If you don't know the column, you can just add a second nested for loop that uses `dataGridView1.Columns.Count` to iterate through the columns. Does this make sense?
Kinda yes, however before this problem I need to solve another one. That is to convert elements from datagrid into array. &amp;#x200B; Here is how I am doing this right now: public string\[\]readData() { int getSize() { return dataGridView1.Rows.Count; } int getSizeColumn() { return dataGridView1.Columns.Count; } value = new string\[getSizeColumn()\]; try { for(int i = 0; i &lt; dataGridView1.Columns.Count; i++) { &amp;#x200B; value\[i\] = dataGridView1.Rows\[1\].Cells\[i\].Value.ToString(); } } catch (Exception ex) { &amp;#x200B; [MessageBox.Show](https://MessageBox.Show)(ex.Message); } return value; }
Wait, you want to run a background torrent client on mobile? Not saying that you shouldn't, nor that the OS shouldn't support it, but the reason WP has great battery life is because it doesn't left background apps do whatever the hell they want to burn your battery. Torrex Pro works just fine on my laptop and desktop. &amp;#x200B;
Just FYI, we're a .NET shop and half our devs use MacBooks. As do a ton of devs at Microsoft. 
Data is imported from excel file. I had written method to calculate Euclidean Distance. It two uses single-dimensional double arrays. One of them is user inputed data another, while another is data from datagrid file. &amp;#x200B; |Ignore A|Ignore B |Ignore C| |:-|:-|:-| |Value A1|Value B1|Value C1| |Value A2|Value B2|Value C2| &amp;#x200B;
I would also like to know
So, if I understand you right, you could just do the following: var results = new List&lt;string&gt;(); for (int i = 0; i &lt; dataGridView1.Columns.Count; i++) { results.Add(dataGridView1.Rows[1].Cells[i].Value.ToString()); } return results.ToArray(); But this will only give you an array with Value A1, A2 and A3. If you also want A2, B2 and B3 you can just change it to this: var results = new List&lt;string&gt;(); for (var row = 1; row &lt; dataGridView1.Rows.Count; row++) { for (int i = 0; i &lt; dataGridView1.Columns.Count; i++) { results.Add(dataGridView1.Rows[1].Cells[i].Value.ToString()); } } return results.ToArray(); Note that the row index starts at 1 so that it skips the header row. Also note that I've used a List instead of an array to start with. This is because Lists can be appended to, so you don't need to pre-compute the size (although it wouldn't be hard to calculate it). The List type contains an extension method that allows it to be converted to an array.
I was very clear that I run the app on mobile and with that we came back to square zero the most advanced API can't figure that out unless it have a giant labtop battery I use utorrent on android and still have a great battery life lasting more than a day it's user to user thing
Do you by any chance have to interfaces named ISomething ? Maybe in different namespaces
Just a note about “returning a list. I would rarely return a List from my IEnumerable. The `yield` keyword makes it so easy to defer execution. Lots of examples in my enumerate extension library [here](https://github.com/thesoftwarejedi/Torian.Common/blob/master/Source/Extensions/Enumerables.cs). 
It’s actually pretty common to have custom enumerators to implement functionality lacking from the core framework. [examples](https://github.com/thesoftwarejedi/Torian.Common/blob/master/Source/Extensions/Enumerables.cs)
Unrelated, but why are you taking these exams? Just curious.
Glad I don't work in games then, the linq approach looks so much nicer :P
Yes, I’m running my PS as admin.
Could be, but the exe lives in a sub directory of %ProgramFiles% and it won’t run when I launch my script as SYSTEM.
except when it is
Not that I know of - but even so - both cases are using the same service container configuration anyways. The only difference is I either (a) call the offending method explicitly or (b) allow the owning service (of the method) to call the method. In both cases the same service provider is used... Thanks for the help!
that's not an OS feature or a good Phone battery that just comes from the fact you can't do sh!t with it and yeah my same year released android phone last me longer than my lumia 640xl sooooo
Tried your second suggestion, however it seems that values are in loop method.
Can you give an example for when it is?
My second suggestion had a typo. The line: results.Add(dataGridView1.Rows[1].Cells[i].Value.ToString()); Should have read: results.Add(dataGridView1.Rows[row].Cells[i].Value.ToString());
big refactoring jobs boilerplate 
Now I need every element to convert into ASCII code
Whatever is the latest nutshell book by O'Reilly is probably the best reference. I'd look at their beginning/learning series if you're just getting into the language as the nutshell books are very reference book rather than introduction and learning book.
A certain number of certifications are required for companies to become Microsoft Partners. Plus, they show you the gaps in your knowledge
Ok, what does your dbgview say? No exception thrown or error displayed? 
Yeah I basically know that. Now I need multiple arrays and convert them to double arrays
I need List of Arrays. Cause there would be multiple arrays arr1, arr2, arr3.... and convert each data array to ASCII code
That's where you can use something like `double.TryParse` if you don't know whether the value will definitely contain a double or not. If you know for sure it will be a double, you could just use `Convert.ToDouble` or `double.Parse`.
This. This is exactly how I started and landed my first programming job! Start small but real. Look into good practices for coding so you don't develop bad habits with it (like having a messy Main() in a console app).
What about: &gt;foreach (var i in 0..10) { Console.WriteLine(string.Join(",", (0..i).Select(j =&gt; i \* j))); } Does it print all the numbers from 0 to 10? Or from 0 to 9? What about: &gt; foreach (var i in DayOfWeek.Sunday..DayOfWeek.Saturday) { Console.WriteLine(string.Join(",", (0..i).Select(j =&gt; i \* j))); } Is it possible, or will it be possible? Something like enum ranges? In this case, I think ranges should be left and right inclusive.
I write single classes that implement both interfaces. Works well.
My boss often mentions how much he dislikes C# and openly prefers SQL over anything (which fine, people have their preferences). Though, he's never talked about (even when asked) programs he's made just for fun. As if it wasn't for an interest, but instead for the pay- which saddens me. I absolutely love programming and do a lot of it in my free time just for the hell of it. I never really considered doing it for the money (even though I know I'm being under-paid). I love to see the spark in others' eyes when they write their first working program that isn't just "Hello World!". This post warms my binary heart.
OK, already solved. Problem was my own stupidity....
 Enumerable.Empty&lt;Spatula&gt;()
Collections don't *implement* enumerators, instead they *provide* enumerators, via the interface IEnumerable.: `public interface IEnumerable { IEnumerator GetEnumerator(); }` By defining a single method retuning an enumerator, IEnumerable provides flexibility in that the iteration logic can be farmed off to another class. Moreover, it means that several consumers can enumerate the collection at once without interfering with each other. IEnumerable can be thought of as “IEnumeratorProvider,” and it is the most basic interface that collection classes implement. &amp;#x200B;
When I have a lot of some stuff to do. Stuff like making an analytics api for our games at work, for example. My typing speed definitely becomes a bottleneck.
Yes. And if you ever hear the term "duck-typing", this is what it refers to.
True. 
Is MSDN access not a viable solution?
You've crafted an argument against LOC as a measure and dressed it up using a meaningless tangential argument. You offered: * LOC is a measure (bad one) * The need for more verbose higher level languages * The archaic 80 chars a line. * An example of bad verbose code * An example of better concise code * Developers "on average" create n lines of code per day * n is within reach of crappy typists. So what you delivered is a critique of LOC, which as you rightly point out has already been shot down decades since. You added that better code may be shorter, but used a contrived, even facile example. You used an average LOC per developer which is as meaningless as the LOC metric we already identified was useless. So typing speed doesn't alter you argument. It's no different if you trade a 30wpm typist with a 120wpm typist. If you see that as a victory, you can leave out all the WPM stuff and you have the exact same article people wrote decades ago about why LOC is bad. I'm doubly annoyed because I have a broken arm right now, so I am typing about 15wpm. What I lose is fluidity of thought. It's like a stutter or hiccups, or a keyboard with 10 iffy keys that stick, you can't emit smoothly. Fluid thought is valuable, just like any fluid communication. You didn't touch on this, nor on things like pair programming where not having to peck out letters is more efficient. You didn't touch on any other form of communication either. No documentation, presentations, etc. 
It's ok, imposter syndrome can be rough but I'm sure you are a great spatula.
`for` uses a simple count in an `int` usually. (Yes, you can do stupid tricks with it, no that's not the point here.) To get an item from a collection this way, the collection has to be indexed. For the simplest collections (Array and List&lt;T&gt;, which is just a wrapper around T[]), this is a simple object-sized offset from the starting pointer. Good old C-style. For some other indexed collections, the index getter might be doing god-knows-what behind the scenes. So it's possible for a `for` loop to trigger bad behavior. But most of the time, it's much lighter-weight than `foreach`. `foreach` asks the object after the `in` to run `GetEnumerator()`, then uses that `IEnumerator` to `MoveNext()` through all of the items in the collection. This overhead is *always* present. It never gets better than this. If you're writing web apps or boring business software, by all means, use `foreach`. If you're doing high-performance code, though, you'll want to use `for` as much as possible in its place.
Yes, it's too basic for me. But it's a good suggestion for someone beginning in C#. I saw this name come out really often during my search.
Nobody owns me!
Yeah, yeah, this is bait for "but exams are overrated and no one cares and you can learn without the exam and [...] " but I'll bite anyway. 1. Be careful with these tests, you might *actually learn something!* 2. Some companies will pay for it. 3. Cost is very low. ROI is good. ~$200 total for a book and the exam itself. 1-3 tests gets you a certification. 4. It brings structure to your learning. 5. It may force you to learn something you'd otherwise not be exposed to or be turned off from before leaping over a mental hurdle. 
hmmm these good points OK!
Yeah, absolutely. I recently was in a sling and the same thing happened to me. If typing speed and speed of fluid thought mean nothing, then I wouldn't have written macros for common boilerplate. These effects are doubled if you're peer programming. Now we have **two** people waiting for one to finish typing **PotentiallyTooLongVariableNames**. Sure, maybe the effect is not *huge*, but there is an effect. Factor this into communication, as you mention, and it becomes even worse. IMing with someone? Waiting forever for a slow typist to finish their two-sentence response before you can continue? Sorry, that's bottle-necking productivity.
I type ~120 WPM on average according to [10 fast fingers](www.10fastfingers.com). The average seems to be ~45 WPM. I almost type 3 times faster than the average. If we assume two people that are identical in every way except for typing speed (one types at 120, the other 45), the one typing at 120 will be more productive. The real question is *how much more productive* is a fast typer compared to a slow typer in our daily programming lives? I don't just write code -- I write emails, task comments, product documents, etc. A truly off the cuff guess (and this is truly off the cuff) is that, in a given week, I **might** have about an hour or two manhours available to me that a 45WPM typer would not have assuming the afforementioned identical characteristics. The difference is a non-zero number. Realistically, a 45WPM typer might be quicker to think of a solution to a given problem. However, they would be even *more* productive if they weren't typing with 2 fingers.
When making class library you can target .net standard 2. Such lib is callable from .net framework 4.7.? and .net core. Basically the same lib can be used on windows, macos and linux without any changes. Win32 references would have to go however. One more observation: I have not seen any usages of "var". Look it up. Saves a ton of time. Instead of this: foreach (KeyValuePair&lt;int, List&lt;Pair&gt;&gt; pairs in SanitizePairs().Reverse()) You could have just this: foreach (var pairs in SanitizePairs().Reverse()) 
I work with a guy that lost his left arm to cancer. He probably can't type 27cpm for a full workday. He checks in a lot of poorly formatted code. It makes maintenance a problem sometimes. More code amplifies maintenance costs. LOC isn't a (good) measure of productivity. It's a measure of LOE needed to maintain or change a codebase in the future, directly affecting future productivity. So stop bloating your code. If you can make an 8-line POCO, do it. Don't bloat it with that immutability crap. It's not needed 99.9% of the time. For that 0.01%, go ahead and add it, but otherwise, just don't.
What would you recommend in a scenario where you want the count of an IEnumerable (for logging) before another operation that then enumerates the IEnumerable again for a different purpose? In this hypothetical, I'm avoiding ToList to ensure I don't force the whole collection into memory. 
I think it's one of reasons why C# is popular and very well-recieved from developers. VS basically allows you to do anything even if it's not related to .NET
That solution applies to .net (not .net CORE) projects ? 
Interfaces and a 3rd library project can help here. When loading a class/struct/etc the for wants to walk through all static type references recursively even if it won't use that type during runtime. This is esp troublesome with publicly exposed methods and properties if you use your custom type either as a parameter for a method or return type. 1. Create interfaces 2. Create shared project X for shared intetfaces. 3. Make both project use x instead of eacho other 4. Make life easier by using dependency injection so you can push your implementations run rime
Removed: Rule 4.
Detailed emails that are basically white papers in Outlook. Typing up meeting notes as another dev drones on an on about nothing, but you *know* some innocuous detail in there is going to be an incredibly important detail in two months. Catching up on 5 years worth of documentation on how to use your system. You know. Everyday stuff.
I'm in a somewhat similar situation. I took the 70-483 exam late 2017 and have been looking at taking the 70-486 next. It looks like the test has been refreshed but there doesn't appear to be any new official books available. 
This mostly seems like an argument for fast-tracking record types in C#.
I don't use .NET Framework often, so I don't know the best solution for it. Last time I needed ILLink like behavior, I used [ILMerge](https://github.com/dotnet/ILMerge). [IL-Repack](https://github.com/gluck/il-repack) also another option that seems to be a bit more modern. 
Yes, I played with ILMerge before thinking it can be a solution but dependencies should be manually speficied for that. Thanks for the other suggestions though could be useful if we migrate to .net core &amp;#x200B;
I think ILLink.Tasks package still works with projects that target .NET Framework. Maybe give it a try?
We have a three hundred line JS library that creates 50 classes programmatically at runtime. If it was a different language I'd have to write all 50 classes individually and any changes would require changing each of them. 
I used [this](https://github.com/emerbrito/ILMerge-MSBuild-Task) specifically when I was using .NET Framework. It requires no external steps except for installing the packages (IIRC). 
This is duck typing and I wish c# supported it as a real feature.
Poorly formatted? Curious, what language? VS settings and auto-formats my C# and JS code. Wonder if he could auto-format his code, most editors can nowadays. &amp;#x200B;
Thank you! It works! I use the following command now: &gt;:!csc -out:%&lt;.exe % To run, I use : &gt;:!%&lt; &amp;#x200B;
I'm not sure if this applies specifically to your case but [this article about Transitive Dependencies](https://www.erikheemskerk.nl/transitive-nuget-dependencies-net-core-got-your-back/) is good.
Yup, my company pays for the exams, because it ultimately behifits them too
Mostly being silly, but I suppose in fairness I do spend as much of my work day involved in things like that as I do programming. Indeed, the faster I type the more time I can devote to programming. 
Addressing both you and /u/TriptychButWith8Bits, who wrote: &gt; You didn't touch on any other form of communication either. No documentation, presentations, etc. --- &gt; Factor this into communication, as you mention, and it becomes even worse. IMing with someone? Waiting forever for a slow typist to finish their two-sentence response before you can continue? Sorry, that's bottle-necking productivity. The article is clearly about one and only one form of communication: Programming. It's even in the title, and it doesn't stray from it. They talk about source code and give examples - with code. We are clearly not talking about other forms of text or communication. Arguments about instant messaging may or may not have any weight for programming, it's simply something different.
LOL In 99.9% cases immutability would prevent mistakes rookies make with mutability.
The modulus operator will be your friend in a lot of these fundamental math operations. Easy way to count in certain intervals (by 2, by 5, etc.) and seeing whether or not a number is even or odd. &amp;#x200B; I highly recommend looking up some examples once you finish your assignment. Really going to open your eyes a bit and help you I believe. Good luck!
&gt; You added that better code may be shorter, but used a contrived, even facile example Mark's example is not contrived at all - that is a very real use case for functional/ddd type programming. Immutable types are important and C# support is poor at the moment (records will help a ton). His point is that a mutable type with reference equality is not better than an immutable type with value equality because it has 10x less code. The immutable type has many benefits and saying that it is 'too much code' to write is an invalid argument. He starts his piece with "The code that I suggest is too verbose. It involves too much typing" and goes on to show that his code might be more verbose but it is *better* than the alternative, shorter code. Mark is the wrong guy to follow if you aren't into functional programming, so I don't believe arguing mutable vs immutable applies here. He is just stating that short code != good code in all cases. &gt; I have a broken arm right now He does address this by saying, "Unless you're disabled in some way, you can type fast enough to be a productive programmer." I am sorry about your arm though!
&gt; Don't bloat it with that immutability crap. It's not needed 99.9% of the time I'm a big functional fan so it pains me to see this. There are so many issues due to mutability that can be easily avoided with an immutable mindset.
At work, I'm the sum of my work. I would not hire me if I couldn't fulfil those other functions. Artificially limiting the scope of an argument is something that will rile logical philosophers. 
We've seen an uptick in PC sales lately including premium devices. We're very likely in a small, but important, growth cycle for one major reason: Windows 7 support for enterprise ends in 1.5 years. With XP gone and 7's ending coming soon we'll see a much bigger push for Windows 10 (it's already happening, see last quarters numbers from IDC, etc.). What happens _after_ 2020 is something else. 
immuntability can be added pretty easily with some new code completions. create a constructor with the goods you want. get the code completion junk to show up and say "initialize readonly property" or something to that effect. works pretty well. 
yea, i want immutable record types badly. automatic equality, automatic hashes, etc.
Automatic most-of-the-boilerplate-Seeman-has-typed-here, basically.
Yes, that is correct. Actual filtering will not occur until some enumeration is performed on the enumerable.
You could keep a running counter as you iterate over the IEnumerable, but you should not expect an IEnumerable to always produce the same results after iteration. If you want a more flexible interface you could always use IList or others which provide better guarantees about the underlying data structure. 
Hey, thanks, the arm is improving, I still double type letters and skip them annoyingly. The example is contrived because they follow different paradigms. The former is strictly DTO, the latter has elements of other patterns. He's got a mix of immutability with multifunction entities. The example of a reservation doesn't strike me as a good example of the stream like processing that might be useful in a functional environment. It would, in reality, be a persisted DTO, more like the original but with an ID. Why did the original not include an Id and version btw? would have made the hash and equal code shorter and queries quicker. Just think about the frequency of updates. A functional paradigm makes no sense here. I don't argue against long code, I argue against bad code and bad arguments. It's common to extrapolate a conclusion from the premise, but in this case it's interpolation. The argument that LOC is irrelevant means longer code can be better than short code and vicce versa. The important bit being LOC is irrelevant. I get what he's saying, it's just a weird mish-mash of arguments, examples and patterns that aren't coherent or relevant. LOC is a bad measure, then he bases his estimate on how much the average developer writes in LOC. You can't dismiss a metric and the use it to support something later. This is not an advanced tutorial, so the examples need to make sense or be annotated. I don't think the guy is without talent, I wouldn't have commented if that were the case, but this is not good work. Take the criticism, remember I'm just like you and focus on the big message.Which is actually "Focus". Be impressed, that took about 30 minutes to write! I'm breaking a leg next time. 
... wait. Do you know how to count?
This is also why functions like Select or Where can be lazy, because they utilize the yield keyword to defer execution until the next element is requested upon iteration. If Select or Where just performed their operation and returned a list they would not be lazy, they would produce intermediate lists and just return the IEnumerable interface for those lists.
Functional programming requires too much trust. The very nature of it is "do X to Y and get result Z". Of course there will be problems with mutability when you do operations *to* data externally. This is the core tenet of OO. Nothing is trusted. Nothing happens without "permission". Unless something is declared as public, external operations can't alter an object's state without that object having the ability to validate the process and the resulting object state. Controlling mutability at the class definition level is just one tool in that toolbox, and it's not even the best one for most situations. Interfaces are (or, rather, guarantee) functions. Objects are data. You don't get to operate on data with a function, you ask the data to perform the function *on itself* for you, and provide you with the result. This *may* alter the object's state, but that's not up to you to decide. (Unless it's an object you're designing, then you should absolutely consider mutability, but probably at a more granular level than the class definition.) Overall, immutability violates KISS for most things. (Some things, like strings would violate KISS without immutability, though.)
Ehh, strong typing sucks. I have weak fingers.
Scott Hanselman's been working on minimal container deployments. Perhaps some of what he's doing to remove unneeded references could be adapted to your situation. He's trimming self-contained .Net Core deployments, though, so it might be a stretch. One reason those references cannot simply be removed is that they could be accessed through reflection.
depends on if the library is being shared across one solution in one repository or multiple repositories and multiple solutions. If the later you will want to use a nuget package hosted locally to distribute it and version appropriately. If its just one solution in one repo then having it as a referenced project is fine.
It’s really fun to work with. At one point I had to build a QueryProvider for a class which represented some collection of type T, but underlying that class everything was held in a DataTable... don’t ask. It was very interesting learning how to parse the tree that was built and modifying the code dynamically to perform Select, Where, etc on a DataTable and then finally producing a result in type T. The whole time the user of the class thought everything was some collection of type T, so all their LINQ operations functioned as expected. Some really cool stuff you can do with it!
One thing that the article forgot to mention: more code means bigger chance of a bug creeping in.
IDK, sometimes I feel like I make a lot of thpos.
I was going to write a bit more, but the "thpos" typo was too perfect.
Wait, people compose emails and documentation at typing speed? All this time I just thought my coworkers sucked at English...
CLR via C#
The *compiler* only includes references that are accessed in code. It’s *msbuild* and similar that will add all references you specify, whether or not they are used. If they aren’t, they won’t make it into the assembly. 
Well, at runtime, it only load assemblies accessed by called code, so you can always not ship the ones you know won’t be needed. 
This is a tad bit off-topic, but I looked at your linked extension library and I have a question about your ForEach-type methods. I never thought about writing a ForEach extension method for IEnumerables, but it seems so obvious now. Can you explain the difference between ForEachChained and ForEachImmediate and why one would ever use ForEachImmediate over ForEachChained?
\&gt; Detailed emails that are basically white papers in Outlook. Your bottleneck may be unnecessary emails.
Indeed! One bottleneck is definitely in part the fact that I have to PM my own projects while at the same time having a PM who wants to constantly be informed of how I'm managing myself!
Came to suggest modulus...and you beat me to it.
Came to suggest modulus...and you beat me to it.
I got my MCP, MCSA and MSCD like a month ago (got my first two on the same day, MCSD on the next available appointment). Been working in ASP.NET, Core lately. I don't know about the UWP path, but the MVC/Azure path was quite tough. I did not read any exam references or books prior, only had field knowledge, which these exams really seem to test, not lexical knowledge. But I felt the MVC exam was all about knowong the gist of the old *and* the new MVC frameworks (5 and Core), and Azure was all about knowing how to solve things with Azure services, kinda broad. If you feel confident in your previous works, I advise you just take the MCSA exam which you feel is closer to your field. I don't believe in the exam ref books either, even if they are updated. The questions are not public, and the books are openly stating they are not your standard exam material, like in high schools or unis. I think you're better off looking deeper at the topics which you feel less confident in, but only real field work will get you a pass. You don't need to retake the exam to get your MCSA, but you can check the official MCP portal and the exam portal for more info. 3 exams (on the given path) gets you to App Builder MCSD. Good luck! 
A simple 2D game takes less effort than a text adventure in Unity, IMO. 
Nope. Makes it all the way through the app. Doesn’t bomb, just doesn’t launch the other exe unless I step through it in debug mode.
This is clearly an article about programming. You have a point but the article doesn’t intend to address it
The article is about resistance Mark experiences when giving programming advice. He is recommending immutable code and functional patterns and some disregard the advice, saying it is too long or takes too long to type. Your points are fine but they don’t really apply to what he is trying to say. 
I had fixed the problem, your answer kinda gave me a clue
Even a text adventure in Unity is some sort of a 2D game ;)
Well, I started reading C# 7.1 and .NET Core 2.0 - Modern Cross-Platform Development by Mark Price a month ago, and it has been amazing so far. I've learned a lot about the language. I also complimented the book with the official documentation. 
&gt;we aren't allowed to have internet connection in our work computers This is the worst thing you can do to a programmer. Internet access if vital for development and learning. 
Yes those are separate architectural concerns. Your library should be platform and host agnostic as much as possible. In each hosting scenario (console exe, web service, windows service, mobile app) the host will have a unique notion of how to load config and persist settings.
By default arguments are passed by value. What exactly is passed depends on the type of the thing you are passing. With value types is quite clear you take the value not the instance (so essentially a copy) and pass that. With reference types you do the same thing but remember a variable of a reference type is just that it's a reference and that is really just a memory address ('a pointer' would describe it well, if that wasn't such a ubiquitous word in the world programming) to where the object lives. So you pass a copy of that value which is an address of where the object lives. 
My favourite article on this by the ever amazing Job Skeet http://jonskeet.uk/csharp/parameters.html
Aha, that's new. I thought I had an eureka moment just finding out GetEnumerator was necessary but I didn't realize that it doesn't have to be of type IEnumerator.
I miss ShareX now that I'm on MacOS. I'm using Lightshot but it's nowhere near as featured as ShareX.
`if`
Making fun of people with disabilities is cool.
That's a massive code smell. Why do these have to be generated at runtime?
It's JavaScript, everything happens at runtime.
Nested loops are the only example we'll ever need to explain why we have two interfaces.
Havent worked with SSMS for awhile, but a year or two ago I was using Redgates SQL toolbelt and SSMS tools pack, very highly recommend both. Had nice formatting capabilities but the biggest for me was the search and better / working intellisense.
&gt; Unless you're disabled in some way, you can type fast enough to be a productive programmer. So disabled persons cannot be productive programmers in Mark Seemann's world. Got it. &amp;#x200B; I've worked with a number of people with physical challenges who were insanely talented. One guy who was blind. One who had one arm destroyed in an accident. One guy who was probably 2 1/2 feet tall, but had to move around in a tank of a motorized wheel chair because his arms and legs were contorted and I still don't know how he managed to type at all. &amp;#x200B; And for what it's worth, nothing he's got in that article is anything that a language built to work in such a way couldn't handle through code constructs. More typing means more errors. &amp;#x200B; Also, what's the GC impact if you really are making changes to those objects frequently? It's not often I worry about GC, but occasionally it's a real thing to worry about.
As vague a reply as the post itself :D 
I wouldn't say there is a *direct* correlation between bugs and the size of code.. but as a rule of thumb you might be right.
So, let me get this right. If I think about get and set as methods (which they are) then an interface would look like this. *normal: Public interface iTest { Count { get; set;} } How does the compiler know what the method names are called? A get and a set would look like this depending on the context it is used... object.Count(); *written as methods: public interface iTest { void Count(); void Count(); } Do you see what I’m saying now?
`do if` then
Is this a core app? If so, are you using the core CLI to launch it? 
I wonder if it's been so long that everyone here has forgotten the elephant in the room; EF 6. - As others mentioned, `.AsNoTracking()` is your friend here. The penalty in EF6 for Tracking can be pretty substantial, and for read-only queries should always be applied. - Also, The first time you do ANY query against an EF6 context there will be a penalty as all sorts of horrifying things are done via an over-engineered .Net DLL that is over 5MB. In the case of XML based setup, it's reading the XML and doing things with it. In the case of code first, *it's **first** must take your code annotations to generate the XML, then does all the terrible things*. Oh, and unless it has finally been fixed, this penalty gets worse (non-linearly!) the larger your model gets. - There's also a penalty for the first time you run a *specific* query, but that's pretty standard as far as ORMs go. tl;dr - Use `AsNoTracking`, Put some warmup code in your app (i.e. if it's a web app, have a thread spin off a simple `context.Organizations.Take(1).ToList();` that gets thrown away in your App_Start.) and start learning EF Core, Linq2DB and/or Dapper.
Quick somebody should create a fork please
Removed: Rule 3.
Doesn't sound like a great way to garner community support. "We ignored your issues. We are going to close them as we don't really know if they are fixed or not but that's okay. If they still impact you open another. "
Author here. It definitely sucks. We dropped the ball on this repo. We want to get back in control of it, but going through 500 issues (many of which are years old and any context for them is long gone) didn’t seem like the best use of limited resources. The goal here is that the people who are still stuck with a problem can give us a quick heads-up and we can start investigating the issue. For a lot of these, the issue has been open for years so we don’t have any of the original context anymore (versions are significantly out of date, etc.) and the first thing we need to know is “do you still need help?” I’m definitely interested if you have thoughts on how we can manage this better! Or even just make it sting a little less :(.
It was a bit of a trailblazer, which definitely made it a little bit of an outsider too :). SignalR was one of the first bits of open-source work we did on GitHub, and one of the first pieces of [ASP.NET](https://ASP.NET) we \_started\_ as an Open-Source project (rather than being open-sourced later). Glad to hear you are enjoying it! &amp;#x200B; Disclaimer: I am the author of the post
We have cases where the user hits an endpoint that kicks off asynchronous processes on other services. We use signalr as a way to notify when those processes have completed.
In case you've never heard of it, COMEFROM is a jump declared at the destination of the jump instead of the source. Or in other words, a sneaky version of GOTO. https://en.wikipedia.org/wiki/COMEFROM
Nice
Thanks for the link Im sure it will help.
&gt; One more observation: I have not seen any usages of "var". I'm familiar with it. Not using it is just a personal preference of mine. I was always taught that it's better to explicitly specify your variable types whenever possible (with the obvious exceptions of PHP and JavaScript, of course). Is there any reason why var is actually preferable in C#, aside from the obvious convenience factor? &gt; When making class library you can target .net standard 2. Such lib is callable from .net framework 4.7.? and .net core. In VS, I can do that by tweaking the project properties, right? &gt; Win32 references would have to go however. The only Win32 reference is being used for the registry feature. You think anyone would mind if I gutted the script handler so that it just requires a JSON string as input and let the calling application worry about data retrieval? Someone else in this thread suggested that and it would enable me to remove the Win32 ref. 
I'm no slow typist, but I do tend to type out a paragraph of run on sentences, then rewrite it all as two or three coherent sentences. Mostly it's spent removing redundant points and circular logic, as I'm doing too many things at once to properly articulate a response while trying to cut out of another task at a point I can pick back up at coherently.
But key switches come in all different weights! Take tour of r/mechanicalkeyboards and fall face first into the rabbit hole your joke uncovered.
You're right, of course. As I mentioned earlier, I originally wrote this in PHP and subsequently ported it to C#. In the former, bundling helper functions/classes for making things like I/O more convenient is a very common design pattern that I guess I just took for granted here. Ok you've convinced me. I'll strip that stuff out in the next release.
We use it primarily in this way: User A and user B both have Client X's record open. If/when user A updates that record, user B's page receives a message via signalR, retrieves and then displays the updated information. Much more efficient than having the clients constantly polling for changes.
Furthering this, with the ridiculous world of mechanical keyboards you can literally have any ridiculous layout you can imagine made into a reality. Given that there's fully programmable, open source firmware one could be made with several function layers and macros, theoretically you could even have foot pedals for modifiers or layer switchting. Unless you're working for an agency with a strict no outside equipment rule that would not consider a custom keyboard reasonable accommodation under the AWDA, there's really a plethora of options possible assuming you have someone who can assemble it and can afford parts/labor. Of course, that's assuming a preexisting solution doesn't already work well enough for someone depending on their particular needs. That's not to mention other possibilities, like eye tracking and a touch screen keyboard with a Swype style input. However, that gets a bit more complicated, and is beyond my realm of knowledge, so I can't really comment on what other useful options exist.
The TypeScript team will likely follow the same approach soon. They completely lost track of the issues in their repository.
I use it for near-instant client/server communication. Like, 20ms or less. Makes for crazy-responsive UI. Paging in a grid is as fast as Excel, for example. &amp;#x200B; Or for a web-based email client, notifications are pushed to the client to let them know when there are new items to retrieve.
It would require at least partial rewrite. It is difficult to explain in a few lines but if you really want to go C# route then take a look at unit tests. Maybe read a book. It took me several years to really "get" unit testing. Now it saves me daily.
Is your column nvarchar or varchar? EF will query it as nvarchar by default which will cause it to have to convert the columns and makes the queries super slow... Ran into that the other day. So make sure your column type is nvarchar
A live issue board for machines on the shop floor. Engineers get push notifications as soon as issues are reported, users get notifications when the issues are fixed.
Well if people have a mini-mind melt anytime someone mentions goo I hardly believe they'll do anything except the fingers-in-the-ear-while-going-'la la la la la la'-totally-adult-edition move. &amp;#x200B; I stopped caring a while back and will out of my way now to, not advocate 'goto' because I've never needed to use it, nor have I really even done it for my own amusement, but instead mention how dumb it is that we bitch about it at all. I used to do it too, but my path went from: &amp;#x200B; 1. 01/30/85 - Born 2. 01/30/91 - First Computer. The awesome and criminally overlooked 'Apple II **GS**' (the gs stood fro graphics and sound, my dude. Check it out) which has AppleSoft Basic 3. 01/30/93 - I whine enough to get a PC so I can play Volfenschhtine 3d. Before I see it in action it actually seems like a step back, and CGA/EGA and even earl y VGA games were. The Appe II GS was used as a dev kit for the SNES, IIRC so despite it seeming natural (and even WAS 100% back compatible) you're relaly doing a disservice to yourself by tinking of the GS as merely one of the green screened Apple II's you had ii school. Actually, it'd be likehinking that a debut year I7 processor was equivilent to a 2018 one. (i.e. it would definitely seem thtat way, but you'd be completely wrong. 4. 
Create a table with a year column: employeeID year daysEntitlement daysUsed During 2018, the 2019 row can be populated and holidays can be booked without touching the 2018 row.
&gt; In Depth can get really dense Hard to understand, for me at least, and has a lot of "information" that I could care less about, which IMO is *only* of historic interest.
Great for any realtime notifications. It's very cool. 
If you have sheet (`ISheet sheet`) you can get single row and next get list of cells in this row: `IRow headerRow = sheet.GetRow(zeroBasedRowNumber);` `List&lt;ICell&gt; cellsInRow = headerRow.Select(cell =&gt; cell).ToList();` Or you can get all cells in sheet: `IEnumerable&lt;IRow&gt; rows = Enumerable.Range(0, sheet.LastRowNum).Select(sheet.GetRow);` `List&lt;List&lt;ICell&gt;&gt; cellsInRows = rows.Select(row =&gt; row.Select(cell =&gt; cell).ToList()).ToList();` Watch out for NULLs. As I remember in NPOI if cell or row is empty in runtime ICell/IRow object is null (some .Where(x =&gt; x != null) may be required). And if you want cell value as string you can use DataFormatter: `DataFormatter dataFormatter = new DataFormatter();` `string stringValueOfCell = dataFormatter.FormatCellValue(someICellObject);`
That's fair enough, but it's like another post I critiqued a while ago that would have been quite a nice treatment of the subject if they had stayed on point. I recognised the fluent chainable Reservation code, but it's a weird choice of example, as noted before. Just the missing UID makes it icky. And you know he didn't mention "functional" once. I shouldn't have guess I need to read his back catalog with out better sign posting. I have now read the article he links to at the top which does take the reader through an imperitive to functional refactoring, but How am I supposed to link the two? I may have comments on that one too, but it is focused and was published in '15 where a lot of people were newly exposed to functional idioms, so it shoes he's "functional" (pun intended) He seems to have support, and I take that as a sign that people find value in his posts. This one though, with a rewrite to give it focus (away from equating typing speed with verbose code, and producing examples which are at least idiomatically similar (and include a unique booking reference) AND doesn't clain LOC is useless before using to define how much the "average" deveoper types in a day, ...) I'll leave him alone now. I only rip on posts by people with apparent talent who brazenly "phone it in". If I had him marked down as a spam poster or absolute beginner I'd just ignore it. 
It doesn't provide any insight into programming. Even the two examples follow different idioms so can't be compared. I've made about four posts on this thread which address all my problems with it, so no need to repeat them here. Perhaps I'll rewrite it and see if everyone things it's any clearer.
At my previous company we used it heavily for showing realtime stock prices. Each tick came through via SignalR.
I've been dedicating several hours after work to learn C#, so far it's been super fun and can't wait to begin on a small project, probably some small incremental game. The language is really logical (not everything though) and visual studio is great at pointing out errors before it becomes a great hurdle.
You'll also want a table that records the actual start and end date, and a reason. For example sick days don't always count as holidays. Also be careful of holidays that span the year, i.e 23rd dec - 5th of Jan. Finally consider 2018 for a business will usually follow a financial year. So instead of just year, add the actual start and end date of the year. A year could be end of march to end of march. Technically we usually do just have the year, but it will map to a table containing the year's start and end. Oh also remember leap years. Should be automatic, but I've seen that messed up in real systems :/
I'm not sure what else it could be, but when I make the grid largerbit has noticable lag when updating- and bi, it isn't yodate inside of Update() but when a key is pressed. That being said,, if I make the grid something like 300 by 150, it has a noticable amount of lag. Thing is, it's not doing just this code, it has a bunch of for loops and other nested stuff that it's also doing. 
I was thiniing I would eventually have to get into matrices because I do want to store multiple values besides 0 and 1, and give them properties depending. I will definitely look into all this, thanks!
Allowing all blocks to have a `finally` seems like a more straightforward solution, syntactically. I don't see the big deal, though.
Well that's interesting then. I know you can't do much without my code, and I didn't really plan on pasting it all either. And like I said, once it gets a value it does other stuff on it which is more iterations of stuff. What someone else said (putting values into a matrix) I will have to do eventually regardless, so I'm going to try that out. And considering my code isn't very long/complex, and the larger I make the grid the laggier it gets, I figure there's something I can do to make it lag less. Thank you for your help!
You can use `DateTimeOffset.ParseExact` to parse custom date time strings, but I don't think you can make it understand the timezone part. So you'll probably have to use string manipulation (regex) to split the date time from the TZ/offset, parse the latter manually and then adjust the parsed date.
This would work for the first part. The stuff in parentheses you will have to deal with manually. var date = DateTime.ParseExact(a, @"ddd MMM dd yyyy HH:mm:ss G\MTzzz";
Pushes for windows applications.
Stuff changes, new kids join the siblinghood and they do a mix of shitty and great things. As an industry we're notoriously bad at both not re-inventing the wheel and at not treating it like the best next thing (MVC and Functional being two of billions. So these kids have ideas but no experience and often anachronistic mentors. Can you imagine, 20 years ago, designing a system which, for millions of users, sends each word to a server just to check its spelling? Back then I was genuinely concerned about bandwidth, so it would have made me queasy just to think about it. And stuff isn't getting worse because of developers, it's crappy product managers who get a bonus based on delivering under cost and as soon as possible. Add to that shitty sales people who promise the undeliverable. The web means get can get v0.01 instantly, this causes a rapid feedback and for popular products overload. Some of your examples were a bit weird. Gmail frequently opens huge emails for me almost instantly, and our build takes 4 minutes from commit to packaged for deployment including running approx 10k tests. It took us a while to achieve that and we didn't do it by throwing hardware at it. I don't want to write a dozen pages, I've a broken arm and this helps me practice typing one handed. I will say that you as so right about the nascent IoT, it's shit and will be shit for a while, and Amazon get more returns of crappy hardware from me than is reasonable. That said, the choice of electronic crap is now huge compared to what we had 20+ years ago. Final thing. Cars are running no where near their max. First they're tuned to last, you can replace a few bits and double its performance. Even consumer cars are improving annually. The Ford Fiesta ST went from about 190bhp from a 4 cylinder 1.6 to a 200bhp 3 cylinder 1.5. That is remarkable progress. 
We are concerned for the issues you mentioned but so far it has been reliable in testing. One instance of our service has been up for weeks now and SqlTableDependency is working fine.
Thanks I will look at it!
There are some really cool use cases for it in highly interactive web sites.
Have you checked what's going on with the Unity Profiler?
What does this mean? Again, new to all of this.
I don't understand your question but what about using dynamic?
Basically I'm trying to set the text of a label to an object's name if that object is not null. I've never used dynamics, can you provide an example?
You can do lblname.Text = thing?.Name; However, it will be semantically different. `lblname.Text` will be set to `null` if `thing` is null, rather than retaining it's previous value.
https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-conditional-operators
Your code seems to be fine, what is the problem?
Not really concerned about retaining values and anyway, `lblname.Text` being null would just resolve to `string.Empty`
Problem is I'm lazy and can't be bothered to write an if statement for every value I need to check. The null-conditional operator (?.) looks like it works well enough. Seems like this is exactly what this operator is meant to be used for anyway.
Yeah or maybe you can change your code and only update the label when it needs to be updated using events.
Well the only time I'm updating it is when I'm setting the value on page load. Outside of that I don't even care about it so this is the only time I'm setting the value for the label's text.
(Disclaimer: I did a lot of spoj challenges) Don't interview people with these kind of puzzle exercises. Don't do this. Just don't. I mean, why ask an interviewee a question from sites like spoj? If the person manages to finish the puzzle, what does that tell you? Nothing. It doesn't tell you if the person is good in the work they have to do at the job. It only tells you the person is good at solving these kind of puzzles. Instead, you have to do more work yourself: create a typical exercise based on the actual **work** the person has to do at the job. Give that to them and ask questions regarding how they'd handle such a case. It's not important if they succeed immediately, it's important to monitor whether the person has the right train of thought and skills to handle the case at hand. Being able to solve a puzzle/challenge is just silly: it often depends on being able to remember a given algorithm (yeah yeah, you're not looking for such a site, but 'challenges' are always depending on them) and if you're not able to, you're failing as brute forcing these challenges is never going to work. Just don't do it. Instead do more work yourself: create a case representing real work for the job. I walk out an interview immediately if they'd present me these kind of stupid puzzles. And you might laugh or think I'm an idiot for doing so, but face it: why would I want to work at a company who doesn't understand how to properly vet their candidates and still thinks forcing interviewees to do puzzles will result in the proper candidate? Your loss. So do yourself and the people you're going to interview a favor: don't do this. OK? Good.
As long as people get notified, you could close all issues over a certain age with an "Obsolete" status. Just make sure that the notification they get clearly says to re-open the same issue if they still have it. It needs to be clear that you are asking for help with triage and not just abandoning them. Its hard to guess why the ball was dropped ;) 
Currently on mobile, but what about Lbname.Text = thing ?? Thing.Name : Default.Name
We have a couple of these... http://simpsons.wikia.com/wiki/The_Homer
The best cert is a computer science degree. Don't fall for any of those trap degrees like IT, Bachelor of ARTS of computer science (who came up with that one). If the degree isn't listed at a standard university, it's suspiciously not a good one.
And if it doesn't, your PC will probably melt from the heat generated from reading and updating a label's text /s I'm all for optimizing one's code, but it's 2018 - performance hit is negligible here and (extremely subjective opinion warning) readability is improved.
Try NUnit Here is an example for exception checking Assert.That( () =&gt; _errorLogger.Log(errorMessage), Throws.Exception.TypeOf&lt;ArgumentNullException&gt;() );
How would it do that? A null string is not the same as an empty string. 
I don't know but the label text values are resolving to empty strings where the objects are null.
There's `String.IsNullOrEmpty()` to hell you maybe. Of course depending on what you're trying to achieve and if `null` has a significant value in your code. 
The `Control.Text` property setter does it automatically for convenience.
Eech. Can't say I like that. 
I am very interested in implementing something like this in my own projects! Do you by any chance know of any literature showcasing as to how such a feature could be architected?
Spatulacity: a metric of an object's similarity to a spatula. 
With xunit, Assert.Throws&lt;&gt; can assign the casted result to a variable. I can then use that to access the exception to verify properties on it. var exception = Assert.Throws&lt;ArgumentNullException&gt;(() =&gt; sut.MyMethod(null)); Assert.Equal("value", exception.ParamName); 
Not entirely sure if it meets your requirements, but I think it'd be worth checking out: r/dailyprogrammer &amp;#x200B;
Why check either specifically? if a ==1 or b==2, an exception will be thrown. Check that known bad cases throw an exception and known good scenarios do not. Your second exception will never be hit if the first is thrown. The point of exceptions is to stop execution and propagate the error up to something that can deal with it. Your second case will only reach the second exception if a != 1. That's a language feature. So don't try and assert every line does what you coded it to do.Test the method returns the correct result, which where " a ==1 or b ==2" it throws an exception 
Couldn't agree more. One issue I often see is people asking for help on forums and the answers are insane yet accepted. I see the same accepted answers that use frameworks to do something that the native language can do with ease. 
Just a nit, functional programming is not a new concept in computer science :)
How exactly would you like the control to display null strings then?
Then your answer is even simpler: as soon as you get asked a puzzle like question or an algorithm oriented bs question, just ask a question in return, namely: "That's fine, I guess, but I'd rather do an exercise about the work I have to do, so I can see whether the work actually fits me and my interests too. I'll learn whether I actually like the work I have to do and you'll learn I'm fit for the job. Win win!". If they can't do that, walk out and go elsewhere as they don't deserve you. 
&gt; As an industry we're notoriously bad at both not re-inventing the wheel and at not treating it like the best next thing (MVC and Functional being two of billions. The point I was making was that MVC (1973) and Functional programming (can't remember, it was predated by lambda calculus in the '30's) are things that seem to get "reinvented" every few years. I could have been clearer, it's not my finest sentence ever :)
Removed: Rule 3.
Removed: Rule 3.
Not the same. Dynamic resolves at runtime. Duck typing is still compile time. A good example of a working implementation is c++ templates.
https://github.com/dotnet/csharplang/blob/master/proposals/null-coalescing-assignment.md
Gotcha!
Fluent Assertions has Action act = () =&gt; subject.Foo(null); act.Should().Throw&lt;ArgumentNullException&gt;() .And.ParamName.Should().Be("message"); https://fluentassertions.com/documentation/#exceptions
Look... I get that you disagree with the feature. Does that necessitate coming down to /r/csharp to mock it in hopes of tainting people's perception of the feature without understanding what it does? I believe that kind of behavior is more appropriate for /r/programmingcirclejerk.
Suggestion 1: for big arrays the order of rows/columns becomes significant (moving data in/out of cpu cache), try this: for (int y = 0; y &lt; height; y++) { for (int x = 0; x &lt; width; x++) { Suggestion 2: run your code through a profiler, it will tell you exactly where the time is being guessing. My fav: https://www.red-gate.com/products/dotnet-development/ants-performance-profiler/
I'm not sure what/who you are referring to. /u/grauenwolf regularly posts links to new, interesting, and also controversial PRs. 
Labeling the feature "COMEFROM" as part of the Reddit headline (when it's not part of the GitHub headline)... and then posting on the referenced issue with a comment making the same point... This thread is not meant to inform; it's meant to sway readers.
Here's an example curtesy of TheBuzzSaw. var resource = new Resource(); defer resource.Close(); var widget = new Widget(resource); defer widget.DropResources(); var oldValue = widget.Value; defer widget.Value = oldValue; widget.Value = 9; widget.DoStuff(); And here it is again with line numbers so you see how lines are executed top to bottom, then bottom to top. 1: var resource = new Resource(); 8: defer resource.Close(); 2: var widget = new Widget(resource); 7: defer widget.DropResources(); 3: var oldValue = widget.Value; 6: defer widget.Value = oldValue; 4: widget.Value = 9; 5: widget.DoStuff(); 
Wow. A project that I might actually want to contribute to. &amp;#x200B; I am extremely passionate about build/release automation
Given my background in C++, I'm perfectly fine with this kind of deterministic cleanup, and C++ destructors are arguably "worse" as they are not even specified in the functions they end up running in. They just happen. I understand that the C# culture is slightly different and wants more of the behavior spelled out.
Well yes, my attitude regarding this feature is "ha ha, look at this ridiculous proposal". I don't deny that. Unlike my journalistic writing, I don't have to be neutral here.
Try Shouldly. 
A couple of ways. First, you can do this: lblName.Text = (thing != null) ? thing : lblName.Text; Or you could write an extension method inside an extension class: public static ControlExtensions { public static void TrySetText(this Control control, string text) { if (text != null) { control.Text = text; } } } Usage: lblName.TrySetText(thing); Hope this helps. 
I was referring to the aspect of having to look elsewhere to find what code ran, not these specific examples. There is a class (can't remember if it made it into `std` or not) that takes a lambda that people use to simulate `defer`. Deffered resetValue([&amp;]() { widget.set_value(old_value); }); // or something
Lol i almost went the arts way a years ago because I could have graduated a semester early. And my last semester would have only been a "final senior" project. (think like 25 credits of Arts shit before I switched to Comp Sci)
And I'm not trying to strip you of your opinion or suggest you have to feel one way or another. I'm just put off by the outward presentation to others who see it in their feed. Like, have your opinion in the comments. =/
I actually find the argument that putting the code for cleaning up the resource adjacent to the code declaring it to be reasonably appealing, personally. Where I dislike it is that scope is implicit and kind of ambiguous as a result. Maybe a modified `using` statement would make more sense: using (var resource = new Resource() defer resource.Close()) using (var widget = new Widget(resource) defer widget.DropResources()) using (var oldValue = widget.Value defer widget.Value = oldValue) { widget.Value = 9; widget.DoStuff(); } which at least seems to be reasonable clear about what it does, and could be generalized back to existing syntax without too much work, and would neatly replace stuff like the `Disposable.Create()` thing mentioned elsewhere in the discussion.
More important differences are that it will force evaluation of ` `lblName.Text`in the event that either `thing` or it's `Name` property are null, which is not *quite* the same as what u/lcyduh's code sample does. But, I had a pretty slow start to the morning.
Well, you have a few choices. The choice I like to make in my project is "do not use null as a valid value ever". That means you don't declare things without assigning them some default value. It takes a lot of discipline, but if you do it, then you can stop writing null checks. If you combine this with unit testing and high code coverage, you find out within 5 minutes of writing some code whether you forgot to give it a default value. Another choice is to aggressively check for it early. That means every method looks like: void DoSomething(Thing thing) { if (thing == null) { throw new ArgumentNullException(...); } // Continue, confident it's not null. } This takes work, but means with any reasonable test coverage you find out fast if you screwed up. Another choice along that line you can take is to use an "optional" type. These are like using Nullable&lt;T&gt; for reference types. An Option&lt;T&gt; can either have a value T or no value None. Unlike Nullable&lt;T&gt;, these types force you to always specify what you want to do for either case. So I might use our Option type in your example like: thing.Match( (v) =&gt; lblname.Text = v.Name, () =&gt; Log("Expected a thing with a name at ???") ); It takes some getting used to, and there are certainly times where None is an acceptable value, but I make far fewer errors when I HAVE to consider both cases every time I use the value. Other than that, people are covering what you can do. There are some syntax sugars with the `?.` and `??` operators that help you a little, but overall your code is harder to manage when you *expect* null to be a possible value. It's more or less as messy as if you decided to store all `int`s as `strings`: you can be *somewhat* certain that `int.Parse()` will always work, but it's more responsible to always handle the case if it fails. One thing is true across every technique for dealing with null: if you don't have a reasonable automated test suite with reasonable coverage, no technique will stop you from shipping accidental errors. The only way to realize you've failed to consider a case is to make sure that case is exercised and does what you expect. 
#Value of course!
used it for live notifications and a dedicated chat room on one project, used it for online gameplay on other. it's kind of amazing.
Very neat! I have almost completed a side project that utilizes a json configuration file to handle the Task steps (with types, parameters, timeouts, etc.) whereas FlubuCore uses Fluent API. My project is intended to be bundled with an off-site deployment to execute server-side tasks. It too can handle powershell, C#, cmd, SQL, etc. I love the use of the Fluent API with FlubuCore - I will probably poke around more later and definitely consider contributing. Nice work!
&gt;not trying to strip you of your opinion or suggest you have to feel one way or another. While it may not be your intent, to me, it feels like that is what you are trying to do.
Flubu is around longer than cake☺ From around 2009. But until recently it was used privet by our firm. 
&gt; If you see this closing brace, you still have to scroll up True, but that's supposed to be boilerplate cleanup stuff that you don't need to think about. It doesn't hide business logic. 
Wow this is a whole lot of new. Thank you for this, I'll take a look for sure!
I had zero working experience when I passed the 70-483. I did read C# in a nutshell and did programming exercises, before a job interview for .NET developer. Then had another two months of training (from experienced programmers). What you will not learn are programming patterns, like inversion of control, unit testing, and how to apply those correctly. This you will learn on the job. Although you can have coworkers that don't know anything about those either, then well... Search for a better job or learn this yourself, there are blogs and talks by some good programmers out there. Hanselman, Fowler, Allen, Skeet. You can also take a look at some open source projects, especially [asp.net](https://asp.net) core, besides using it you can also look at the code and discussions. But with zero working experience, you can get a certificate by just studying.
Well, yes, I'm trying to change minds as part of the broader discourse, but I'm simply asking that his opinion not be so blatantly injected into the title of this thread.
If all else fails, you run the method, catch the exception yourself, and check the property as needed: const string expectedMessage = "a is wrong"; try { Foo.Metod(1, 3); Assert.Fail("Exception should have been thrown"); } catch (ArgumentException e) when (e.Message == expectedMessage) { return; } catch (Exception e) { Assert.Fail($"Expected an {nameof(ArgumentException)} with \"{expectedMessage}\" as the message. Received {e}"); } 
Shouldly has both ShouldThrow&lt;T&gt; and ShouldThrowAsync&lt;T&gt;, returning T or Task&lt;T&gt;. So after the check you can do more checks on the exception that was thrown.
I guess I'm confused then. Are you OK with this? using (var importantAction = new OnDispose(() =&gt; widget.Value = oldValue)) { ... } The vibe on GitHub from you (and now others) seems to be that `Dispose` is there to help you, and there really aren't many rules on what can or should be there.
I don't like that style of code, but I do admit that I have done similar stuff in the past.
So trying to summarise what you wrote. You suggest separating the interfaces implemented by a class into two explicit sets: traditional and ones that follow the new recommendations. Is that basically right? I know there's more detail, but just trying to get the gist of it. I'm split on the proposal. Selfishly I anticipate having to unravel someone else's abuse of the new features. It reminds me of overthought inheritance models that always ended up biting everyone who touched them. Parts of it seem directly useful to me, other's seem to have legitimate (legitimate sounding, I didn't understand the Java API compatibility as I don't Java) uses, so I'm broadly supportive. mtc. 
I've gone all the way and created an `ActionStack` class specifically for pushing deferred actions into, but I eventually backed away due to all the delegates involved and performance impacts of having all my local variables lifted into the delegate. And it's kind of ugly.
I am really glad to hear that you found it interesting. &amp;#x200B; Contributions would be really welcome while Flubu is quite mature it is actually around from 2009 but it was privately used only by our firm. So the down part of this project (from my point of view) is that it's community is not very big. We are also looking for new team members so if you (or any other) would be serious in particpating in this project you would be welcome. &amp;#x200B; &amp;#x200B;
Thank you as I mentioned in a comment above contributions and new team members would be really welcome. If u think that some features from your project could be integrated to FlubuCore or viceversa I would be happy to discuss it with you 
A lot of this reminds me of the shapes proposal; especially the way your proposed defaults "type" would essentially fill-in missing methods in a semi-duck-typed fashion (although iirc shapes took it further). Anyway... Personally I would rather not have to declare a class as using default implementations at all (i.e. I would like it to be automatic).
The group everyone does have access. That was asking the things I tried
Ah ok, hmmm, I'll have to think about it, it took me a couple of reads to get the majority of the cases described in the linked proposal. Their examples are short an numerous :) The do discuss using a constant in System.Runtime.CompilerServices to coordinate functionality availability between the compiler and runtime. The distinct between the two I feel is important. Fingers crossed it works out. I imagine I'll avoid quite large parts of it at least initially. I can't see if they allow truly static interfaces for static classes, or just static methods on instantiable classes. I assume the latter. I'm just waffling now though :) 
My point has nothing to really do with yours. I'm not against the project in anyway. 
Thank you guys! As I said I'm a beginner in C# I try to learn more just it's difficult to find the proper sources. Anyway, thanks for the useful comments!
We have a messaging app and when the server receives a message or update for the channel you are in, it updates the view to show the new unread message. We also send notifications to all users that are following that channel that a new message has arrived. It's worked great for us, so far. 
It's ok, it will be a while for the next gen 2.
&gt; Selfishly I anticipate having to unravel someone else's abuse of the new features. Maybe I'm projecting, but I would guess that's a common concern. C# is a nice, clean, easy to read language. I just hope it stays that way.
 We'll have to get our mentor sticks out ;p
&gt;ICounter Funny, I was just talking tonight to my girlfriend how many spatulas my mom broke on my ass and had to switch to a hairbrush. I can't count how many. They are not enumerable.
Is the site configured to use the App Pool Identity for anonymous authentication? If not you need to grant permissions to the IUSR account.
int divisor = 7; var lineInput = Console.Readline(); int numberToCheck = int.parse(lineInput); if(numberToCheck % divisor == 0) { Console.WriteLine($"{numberToCheck} is divisable by {divisor}"); } else { Console.WriteLine($"{numberToCheck} is NOT divisable by {divisor}"); }
As a previous peoples said. You are getting Row\[n\] and Col\[n\] So when your iterator is say 3 (the number of counting!) you are getting row\[3\] Col\[3\] if you want to make this code harder to read nest another loop for(int i = 0; i&lt; rows.Count(); i++ ) { &amp;#x200B; for(int x = 0; x&lt; row\[i\].Columns.Count(); x++) { meh(); } }
Hello sorry took long enough to respond, I didnt see it in my notification. &amp;#x200B; Im not fond in networks and I do not know if ours is domain, but I'm just connecting it via the `cmd` and typing this `\\192.168.1.xx` &amp;#x200B; although I tried what you said that I need to pass the domain in the UserName but the network is insisting that I still have a wrong username or password.
Well one thing I see is line 23 that is not the symbol for subtraction. 
Good catch! I figured the, "double" issues I had to change it to Convert.ToDouble. but the ending on line 25 is still stumping me.
Hey quick peice of advice, use pastebin 
try reversing the ) and the “. 
https://pastebin.com/g1hh8ret
Do you have a closing curly brace for the main method, the one that is paired with the one on line 7?
C# is case sensitive. In your pastebin use a capital P when calling Process()
I left out some curlies on the bottom that one is for the main(string)
https://pastebin.com/ds9vehkG This is where I'm at now, it still is red underlined (line 47). :(
https://pastebin.com/aVua1C7P
I tried that but the... input.Split(","); it doesn't like that's inside the ()
This particular iteration: Unknown LINQ expression of type 'Block' I've had it reject it because I called Invoke, because I called Compile, etc etc Really just looking for a place to start on this one.
string.Split() accepts different parameter in .NetFramework vs .NetCore: * .Net Framework: string[] numbers = input.Split(','); * .Net Core: string[] numbers = input.Split(","); 
I sort of spliced your code with mine, I used all the stuff you changed, but put in my comma section. Thanks so much! This is awesome! Made a little calculator!
In the end I just went with this, it seemed to work out in the end. haha Thank you again for your help! https://pastebin.com/J51z3FgF
Exactly. I do not understand the whole "drill potential hires on algorithms" thing. Memorizing a bunch of algorithms does not show competence or coding skills. I hate reading stuff like "I applied for a web dev job. Had to white board bubble sort" So pointless.
Displaying is fine - that should absolutely have an empty string. However, I take issue with the fact that the null is seemingly converted to an empty string that the user can access. 
I'm fairly sure SignalR is a key component to Blazors Server Side Rendering feature which is going to bring a new level of productivity to line of business app devs. I can't express enough how transformative SignalR will be on our industry productivity and also end user experience. You all have done an amazing job with this tool.
You can't have Block expression in most LINQ providers. Get rid of the block (inline all operations) and you'll get a step closer. Block doesn't fly in any SQL dialect I know of, so providers generally don't support it.
Hi there, In a command prompt, pass the command “whoami” this will tell you your correct domain/username
`Dictionary&lt;K, V&gt;`
Try adding a DataTrigger to the style &amp;#x200B; `&lt;Style.Triggers&gt;` `&lt;DataTrigger Binding="{Binding IsDirty}" Value="True"&gt;` `&lt;Setter Property="Background" Value="Red"/&gt;` `&lt;/DataTrigger&gt;` `&lt;/Style.Triggers&gt;`
Oh, wow a dictionary is perfect! I'll just store a dictionary within a dictionary. Thank you so much!
WPF with Dapper.NET.
There are other questions that need to be answered before you can make your choice. Can your app be Web based? Do you actually need an application that has other features or is it just a data management tool? If you can't make a Web app then you've got several choices for desktop applications such as Winforms or Wpf, Wpf being the newer of the two but that doesn't mean Winforms is obselete, the .Net dev team have recently updated some Winforms controls in 4.8. If you don't need any other features and it's purley for managing data then you could consider using pre-built tools that already exist, especially if it's for someone technical, you could connect an access database to a sql database and manage it that way or even a excel workbook. Alternatively there is SQL server management studio which would allow you to update data, there are plenty of other tools for doing this too. And finally my recommendation would be to going for something web based using a front end developed using a UI framework such as angular, vue or reactjs and possibly even knockout although I don't like that one (you can also try just basic html/css/Javascript/jquery if your not comfortable learning one of those frameworks) . In terms of backend I'd recommend using .Net core and hanging a REST api off of it for communication with your UI. Now, talking with the database you could use Entity Framework code first which would give you a very speedy development experience, if your more comfortable building the database and tables yourself then use something like Dapper for communicating with the database. 
I know this doesn't hit all your bullet points, but for refreshing my C# skills, I found the daily programmer reddit group to be invaluable. https://www.reddit.com/r/dailyprogrammer/. They have coding exercises for different levels and someone will have a solution in C#. I learned some very useful LINQ expressions by doing them. 
Some kind of structured query language.
https://docs.unity3d.com/Manual/Profiler.html &gt; The Unity Profiler Window helps you to optimize your game. It reports for you how much time is spent in the various areas of your game. For example, it can report the percentage of time spent rendering , animating or in your game logic.
We did but as the polling method scaled enough we didn’t bother to change it. We’re now nearly at capacity with the current method so we’re considering moving to a message bus like rabbitmq 
The linked zip file contains the PDFs below. *CLR via C#* is *not* in the zip file. *CSharp Notes For Professionals.pdf * is almost 800 pages. From a quick browse, it looks very good. It has a detailed table of contents with links to the content, and the content has "View demo" hyperlinks to running code on dotnetfiddle.net. I found this information from the books About interesting: &gt; Please feel free to share this PDF with anyone for free, latest version of this book can be downloaded from: https://goalkicker.com/CSharpBook &gt; This C# Notes for Professionals book is compiled from Stack Overﬂow Documentation, the content is written by the beautiful people at Stack Overﬂow. Text content is released under Creative Commons BY-SA, see credits at the end of this book whom contributed to the various chapters. Images may be copyright of their respective owners unless otherwise speciﬁed Presumably the other books are also free to share. Algorithms Notes For Professionals.pdf Android Notes For Professionals.pdf Angular2 Notes For Professionals.pdf AngularJS Notes For Professionals.pdf Bash Notes For Professionals.pdf C Notes For Professionals.pdf CPlusPlus Notes For Professionals.pdf CSharp Notes For Professionals.pdf CSS Notes For Professionals.pdf DotNETFramework Notes For Professionals.pdf EntityFramework Notes For Professionals.pdf ExcelVBA Notes For Professionals.pdf Git Notes For Professionals.pdf Haskell Notes For Professionals.pdf Hibernate Notes For Professionals.pdf HTML5 Notes For Professionals.pdf HTML5Canvas Notes For Professionals.pdf iOS Notes For Professionals.pdf Java Notes For Professionals.pdf JavaEE Notes For Professionals.pdf JavaScript Notes For Professionals.pdf jQuery Notes For Professionals.pdf Kotlin Notes For Professionals.pdf LaTeX Notes For Professionals.pdf Linux Notes For Professionals.pdf MATLAB Notes For Professionals.pdf Microsoft SQLServer Notes For Professionals.pdf MongoDB Notes For Professionals.pdf MySQL Notes For Professionals.pdf NodeJS Notes For Professionals.pdf ObjectiveC Notes For Professionals.pdf OracleDatabase Notes For Professionals.pdf Perl Notes For Professionals.pdf PHP Notes For Professionals.pdf PostgreSQL Notes For Professionals.pdf PowerShell Notes For Professionals.pdf Python Notes For Professionals.pdf R Notes For Professionals.pdf ReactJS Notes For Professionals.pdf ReactNative Notes For Professionals.pdf Ruby Notes For Professionals.pdf RubyOnRails Notes For Professionals.pdf SpringFramework Notes For Professionals.pdf SQL Notes For Professionals.pdf Swift Notes For Professionals.pdf TypeScript Notes For Professionals.pdf VBA Notes For Professionals.pdf VisualBasic_NET Notes For Professionals.pdf XamarinForms Notes For Professionals.pdf 
Hello there, I messaged you! 
Eww
Can’t say I’m a fan of that, but it’s shorter at least. 
Read up on parsers, there are some very good resources as this is something done all over the place (compilers for instance). There are probably some libraries you can use
A Windows client app without a server component has a lot of security issues you have to consider too.
items[0].Dictionary["Value"] should do it.
I don't need the 'Value', I need the Dictionary within the List to pull the "title" from the second field of the List. This has to be expandable as well as there will be a lot of items.
Store the coordinates in a set. Something like the following: public void function() { List&lt;Tuple&lt;int, int&gt;&gt; CurrentGeneration = new List&lt;Tuple&lt;int, int&gt;&gt;(); while (CurrentGeneration.Length &gt; 0) { List&lt;Tuple&lt;int, int&gt;&gt; NextGeneration = new List&lt;Tuple&lt;int, int&gt;&gt;(); foreach (Tuple&lt;int, int&gt; Point in CurrentGeneration) { List&lt;Tuple&lt;int, int&gt;&gt; Tmp = GetAllNeighboringNonOnePoints(Point); foreach (Tuple&lt;int, int&gt; NextGenPoint in Tmp) { NextGeneration.Add(NextGenPoint); } } CurrentGeneration = NextGeneration; } }
Roslyn, the newsh compiler from MS supports this and more.People use it to do things like refactoring one bt of code into another. https://tomassetti.me/getting-started-with-roslyn-transforming-c-code/ 
Sorry, I missed that the code you were parsing was C, so removed my comment.
Don't EVER use goto again! it's basically the devil! &gt; 1 - Don't know how to create different instance of units. It's called a constructor. You create objects with constructors. If you want to be able to set the ID from outside the class, that should be a parameter to the constructor. If you want the object to automatically get it's own unique ID, you pass no ID argument to the constructor and do the following: public class Unit { private static NextId = 0; public int ID { get; private set; } public Unit() { ID = NextId; NextId++; } } For multithreading, this should have a lock, but I think you're sequential right now, so it doesn't matter. &gt; Don't know how to properly reach a method/variable from a different namespace. With import on the top and with correct access modifiers. The modifier "public" should do the trick. &gt; Don't know how to modify the properties later Do something with static, and then create the new Units by copying from the static "initialization"-fields into the objects own properties. private static int PowerLevelInit; public int PowerLevel { get; private set; } public Unit() { PowerLevel = PowerLevelInit; } Or have another class that initalizes Units for you: public class UnitFactory { private int PowerLevelInit; public Unit GetNewUnit() { return new Unit(PowerLevelInit); } } People discourage the use of static, but since you are learning, it's certainly good to learn how static works.
Haven’t ever used anything to know. But there are so many resources with C# and .Net that you probably will be able to find something that suits you with very little effort. 
This won't be possible as you are 'creating' the dictionary before the Item is 'created'. Or more specifically there is no reference that the dictionary can use to reference the not-yet-created Parent Item. &amp;#x200B; Where are you getting "title" from? I would suggest adding the items individually and reusing title. void BuildItemDatabase ( ) { items = new List &lt; Item &gt; (); //add them one at a time items.Add(new Item ( 1,"title", "description", "flavorText", new Dictionary &lt; string, float &gt; { {"Power", 12f}, {"Durability", 150f}, {"Speed", 2.6f}, {"RecoveryTime", 0.875f}, {"Value", CalculateValue ( "title" )}, }) ); } &amp;#x200B;
The problem is that the variable Process might not get assigned. You have a few "if" conditions that assign the Process variable, but if none of the conditions are true, then the Process variable will not be assigned. For example, what would happen if the user entered a question mark as input on line 38. The program would fail because Process would never get assigned. You should probably validate the input in a loop and continue to ask the user to enter an operator until it matches +-*/, then use an if else structure that always assigns some value to Process. Try to make it work, if you still have trouble let me know and I'll send you the correct answer. 
Why would web based have worse security? Browsers have vulnerabilities, but they get patched quickly, as they are some of the most battle tested software in existence (outside of kernels and compilers). In the server model all of your credentials and data are passed through industry standard end-to-end encryption (TLS / HTTPS) and you can avoid storing retrievable passwords entirely if you desire (i.e. only storing one-way hashes of passwords). If all they are doing is updating simple CRUD items...wouldn't an off-the-shelf CMS be a better fit for them?
It's no longer enough to merely GitHub and pray it'll be enough, employers want to get an insight into the way you think. You need to blog. And what better way to blog and portfolio than to create your own CMS? Build your blog, note everything you struggled with, how you overcame the problems, and then write blog posts about the process. Here's a really good jumping off point. https://www.codeproject.com/Articles/1072781/ASP-NET-MVC-Build-Your-Custom-Blog-Engine-CMS-Part I guarantee you'll learn more from the real world issues you face than you will contributing a few lines of code on random repos you care nothing about. Employers also love the insight into your personality they get from a blog, far more than the tidbits they get from a 2 page resume.
Building something for a nonprofit is a great way to build your resume. You will have a portfolio which will get your foot in the door. It's always easier to learn a language if you actually have to apply it to real world projects. Good luck.
Perhaps I'm not understanding - not sure why you don't calculate before you populate.
Thanks!
Scrolled down for this. Take my upvote fellow close personal friend of Al!
Freelancer always has jobs with like 20 bids and a super low budget. Never worth it
I'm so looking forward to C# 8 for nullable reference types where you have to declare a nullable string as `string? foo`. Assuming that you opt-in to that new feature. Less of this nonsense.
As a style point, you should be using one of the other constructors for that exception (e.g. `ArgumentException(String, String)`). `if (a == 1) throw new ArgumentException(nameof(a), $"{a} is wrong");` Then there are ways in xUnit/NUnit to capture the exception within the test and examine it.
It has nothing to do with the XML or key, it has to do with the fact that the return type of `ConvertFrom` is `object`.
It does, you just have to cast it.
I suggest Entity Framework. 
&gt; I don't need the 'Value', I need the Dictionary within the List to pull the "title" What is "title?" Is this supposed to be one of the dictionary keys? &gt; from the second field of the List. I'm not sure what you're talking about here. A List&lt;T&gt; is a collection of items, and you only put one in there. Do you mean the second key-value pair in the dictionary? 
Look into `ConvertFrom` implementation in `TypeConverter` [https://referencesource.microsoft.com/#System/compmod/system/componentmodel/TypeConverter.cs,a42f43ee4b238380,references](https://referencesource.microsoft.com/#System/compmod/system/componentmodel/TypeConverter.cs,a42f43ee4b238380,references) and in `KeyConverter` [https://referencesource.microsoft.com/#WindowsBase/Base/System/Windows/Input/KeyConverter.cs,d1a8a659791b24a4,references](https://referencesource.microsoft.com/#WindowsBase/Base/System/Windows/Input/KeyConverter.cs,d1a8a659791b24a4,references) I don't know, why they use objects everywhere... But it looks like this method only returns Key (or throw exception), so you can do some simple pattern matching: `switch (kCon.ConvertFrom(keyString))` `{` `case Key thisKey:` `...` `default:` `throw new ...` `}` &amp;#x200B;
Create a constructor in Item that takes the integer, title, description, flavorTest, power, durability, speed, and recoveryTime values as parameters.
I'd focus on test automation itself first, like [F.I.R.S.T Principles of Unit Testing](https://github.com/ghsukumar/SFDC_Best_Practices/wiki/F.I.R.S.T-Principles-of-Unit-Testing), integration tests vs. unit tests; best practices of good unit tests, TDD, code coverage, positive, negative, edge tests etc. Modern frameworks like NUnit, nCrunch, MSTest, Moq etc. How to integrate CI into a given build server infrastructure. How create unit testable code/design. How S.O.L.I.D., IoC, DI help with that etc. How to refactor old ugly code into unit testable one. But if you apply for such a position, it all should be well known for you. Although I usually incline to force developers create unit tests for the functionality they develop, no hire a separate dev. to clean up after them. Except it is an additional resource to add even more unit tests to what devs create to test all the boundaries and ranges. Sometimes automation tests dev. can be a good reviewer of the unit tests devs created during code reviews/pull request reviews. 
Check out the [OpenRA project on GitHub](https://github.com/openra/openra) ([openra.net](https://openra.net))! You can [hop on to IRC](http://webchat.freenode.net/?channels=openra) to get straight into the development conversations. 
It's probably more secure to have it as a web app, because a desktop app could be copied and distributed etc. and must containt DB access credentials on each copy. That's not secure.
Twilio
As much as I'd like to offer a solution if you don't want to dedicate a person to reach out for each issue there isn't much to suggest. I am glad you are willing to improve the process considering Azure is now actually selling signalr as a service. 
Great point. Thank you very much.
I use twilio too, has a c# sample code ready to use
Nice, thank you, I'll check them out.
I'm a bit meh (don't care on most of the changes), I do REALLY like "Implicitly Scoped \`using\` Statements" a lot. The verbatim string interpolation is the only one I'm not a fan of, yeah making it easier to do $@ or @$ is nice, I guess, does make inconsistent looking code, but not sure if that really matters to most people.
From my experience most questions are related either to programming language (or a platform - .NET Framework in your case) or other tools and instruments that particular team uses, or to the basic concepts of testing - like black/white/gray box, types of testing (like moving by a scale of scope: unit, integration, system etc), testing workflow (what should you do when you find a particular bug in a particular system - create work item in a tracker, attach all the data available, you got the point). Also thats what I ask people at interviews for QA Automation engineer position, regardless of a seniority.
Note that `&amp;&amp;=` and `||=` aren't in C# 8.0 at this point. `?? =`, on the other hand, is. 
&gt; One criticism of this proposal is that it isn’t compatible with some statements such as `goto`. Madlad
If you want a complex application with a great design, use WPF. If your application is Not important then you can use winforms
I put in a request that the automatic formatter standardizes the order so it looks consistent. So far they seem to like that addition to the proposal.
`yield` (iterators) work fine here and with exceptions in general. Iterators have what is called deffered execution. Which means it will only running each state of the iterator once the data is needed. That means calling `GetByNameYield(a, b)` won't throw an exception until it is iterated. call `GetByNameYield(a, b).ToList()` and it will throw just like `GetByNameList(a, b)` would.
Are there any "automatic code fixes" in C#? As in something that just happens when I press Save rather than something I have to manually trigger.
Yep, you can use an .editorconfig file to configure your rules and set VS to automatically reformat code on Ctrl+K+D and file save! I recently started using it and works like a charm. 
The body of a method containing a `yield` will be executed only when (and every time) an `IEnumerator` is created and its `MoveNext()` is first called. This is fundamental to the nature of `yield return` methods. The exception will be thrown correctly, but only once you actually enumerate the return value, not as soon as you call `GetByNameYield()`. One work around for validation and error is to split the `yield` part into another method, e.g. public IEnumerable&lt;int&gt; Count(int max) { if (max &lt; 0) throw new ArgumentOutOfRangeException(); return CountInternal(max); } private IEnumerable&lt;int&gt; CountInternal(int max) { for (int i = 0; i &lt;= max; i++) yield return i; } So when you call `Count(-1)` you'll immediately get an exception and not just when you enumerate it. However, in your case this is unfortunately not so easy due to the `using` statement must reside in the same method as the `yield`. It would still be possible to make it work so the exception is thrown immediately, but it would require some very ugly code to make disposing and multiple enumeration work correctly at the same time.
As far as I'm concerned, any developer who isn't using "Format on Save" should be rapped across the knuckles with a yard stick. But that's not the same as actually fixing minor compiler errors.
It's useful on rare occasions. Mostly for dealing with retry logic (which some people fake using overly complicated loops).
If you can send an email, you can almost always send a text. Most carriers have special email addresses that will be received by the recipient as a text message. For example, for AT&amp;T you can send an email to "[phone number]@text.att.net" to send a text to the indicated phone number (assuming that number is an AT&amp;T number.) Of course, in order to use this method you'll either need to require that the user knows the special email address that their carrier uses, or you'll need to build a big list of those addresses and require the user to at left specify their cell carrier.
&amp;&amp;= worries me a bit. Seems that would make bugs near impossible to find. 
&gt;but user shouldn't be trusted. there are rare though perfectly valid uses for it in hand-written code. more importantly it could be useful in programmatically generated code (not IL but C#) that is not meant to be modified by a human. 
 using System; using System.Threading; namespace UNUILauncher { class Program { static void Main(string[] args) { string exeName = "notepad.exe"; try { RunAs.ProcessAsUser.Launch(exeName); Thread.Sleep(3000); } catch { log.LogMessageToFile(logFile, "Failed to launch " + exeName); } } } } &amp;#x200B;
Could you elaborate?
Implicit or one-line namespace declarations would be nice. Similar to the using.
If I've followed it correctly it's operating exactly as it is supposed to. 'System' (admin privs) isn't a normal user account so it shouldn't work. It should only work when ran from userspace.
I'm not saying that someone couldn't use it. In my opinion, these rare occasions are called bad design.
Would you say yield is still the right tool for the job and to just do the ToList() option above, or because there needs to be exception handling I should just go with creating the list inside the method?
Great answer, thank you. Calling ToList() worked great and your explanation made sense why it was happening.
 switch (n) { case 1: cost += 25; break; case 2: cost += 25; goto case 1; case 3: cost += 50; goto case 1; default: Console.WriteLine("Invalid selection."); break; } https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/goto
A bit of a stretch, but maybe if something like this is left in your code `if (someCondition &amp;&amp; /*todo: nameThisStateVariable*/ = readNext() )` `{` `}` &amp;#x200B;
I break out of N-nested loops with it occasionally.
I get it. There are simple cases where other constructions adds not necessary complexity. I guess I'm traumatized by one project which ended up by rewriting whole thing. 
Extract to method and return by condition. 
&gt; I don't know, why they use objects everywhere TypeConverter predates generics, and I imagine since it was baked into the WinForms designer/componentmodel thing there wasn't a significant amount of third-party developer use that would demand a new, modern API for converters.
How would that work?!
Like the Java package?
Ah. Got it. That would be reformatting hell as the indentation of every file would change when used. I can feel the merge pain now. 
breaking out of nested loops is faster with a goto than checking an additional bool inside every loop
Personally I only ever have one namespace per .cs file. So it wouldn't bother me to see a `namespace MyAwesomeCpy.SoftwareMcAwesome;` before all type declarations instead of wrapping all in brackets. 
i would not want to check for an additional variable every loop if i have a O(n\^2 or n\^3) runtime. a goto to a break\_loop label behind the nested loops is so much more readable
It may be worth trying to run the code while impersonating the user account you want it to run under. https://stackoverflow.com/questions/125341/how-do-you-do-impersonation-in-net
Still missing a `if (obj is not MyType typedObj)`
There's this proposal: https://github.com/dotnet/csharplang/issues/137 I wouldn't mind even making it optional and having it be defined implicitly as "Default project namespace" + folder path. 
/u/TwoTinyTrees
That seems like a lot of a stretch.
Thanks for the reply. So, taking system out of the equation, why would it not work when running as administrator? I’m using the exact same account, just elevating one which surprisingly doesn’t work.
Yeah, exactly. This cannot be enforced as fas as I know, as it is opt-in by enabling the automatic fixes in VS. Otherwise the options only appear as what you've configured them in .editorconfig (suggestion, warning, or even compile errors). It is great to enforce a specific set of conventions across your cosebase.
AFAIK the automatic formatter in VS CTRL K + D just does white space changes though, right? or are you talking about the lightbulb like formatting
Are you not using the return value anywhere? Whenever you iterate through the results in the `yield` case it will still throw - just not necessarily on the same line of code where you call `GetByNameYield()`. For example, this will throw immediately: foreach(var user in GetByNameYield(account, name)) { //... } If you can't iterate immediately you have options too, as long as you don't mind the AD query potentially being executed twice (when no error happens): var users = GetByNameYield(account, name); users.GetEnumerator().MoveNext(); or var users = GetByNameYield(account, name); users.FirstOrDefault(); If you can't run it twice and can't accept deferring the exception to the point you iterate over it, your only other option is to use the List method and pull it into memory all at once.
Hi, thanks for the reply. I want App B to launch for every logged on user. This includes the account I am using to test. When I launch App A as a normal user, App B launches. When I elevate using the same account, App B will not run even though App A processes through. That link has good ideas for impersonation, but I won’t have the username and password in my scaled deployment for all users.
When you run as administrator you're taking it out of userspace and elevating it to system. Run as admin never gets run as the user, always as system.
Yes please. That would cover the vast majority of my projects.
Completely agree, I've been waiting for this. "if (!(obj is MyType typedObj))" feels to clunky, and arguably hurts readability.
Also, so easy to miss the `!`. Maybe the operator should be `isnot`. Resolution of the variable should be in the same scope. Or are we headed towards too many operators?
Fundamentally (or maybe philosophically), I don't think so. Each operator has explicit usage and meaning, even in the case of overloading. VB has something like "isnot", IIRC - I know, it's VB, but obviously it makes sense in the context of a language that has similar uses. Although, I could see people pronouncing it "I snot" because reasons.
Makes sense, I could see it.
I question the usefulness of `&amp;&amp;=` and `||=` in C# (as opposed to how they're typically used in say, Ruby). I think I can count the number of times I've needed to use something like `a = a &amp;&amp; b`. Although maybe there's some common use case I'm not aware of.
&gt; I've worked with a number of people with physical challenges who were insanely talented. So people without physical challenges cannot be insanely talented in otwkme's world. Got it.
One of the common arguments for it is more something like \`a = reallyLongThingA() &amp;&amp; reallyLongThingB() &amp;&amp; await reallyLongThingC()\`. Basically a formatting tool.
Good point. I can't really think of any concerns with an operator like that, I was just trying to provide an example of what baubaugo might have meant.
I think he means that you can return from nested loops with return keyword. If you extract it to a method you can return anywhere inside nested loop like this. ``` bool Foo() { for (int i = 0; i &lt; 10; i++) { for (int j = 0; j &lt; 10; j++) { if (j == 5 &amp;&amp; i == 7) { return true; } } } return false; } ```
The proposal in github or mine? Because if it's mine it would cover *all* my projects. :)
Just today, I was writing: var anyDirty = false; foreach (var graph in _graphs) { graph.ProcessDirtyNodes(); anyDirty = anyDirty || graph.HasDirtyNodes; } A minor cosmetic convenience, but I'll take it.
Check out r/cscareers
I’ve used Trumpia (web service) and found it to be pretty good. 
Just for the sake of legibility, the compiler would just read the sequence as \`!(x is T y)\` when encountering \`(x is not T y)\` or \`(x isnot T y)\`. Perhaps some Grand Guru of Coding would mean that branching on a negation isn't the way to go? I don't know, but often, I have branching a condition \_not\_ satisfied. Anyways, my €0.02
You need to call BeginReceive again in your in your ReceiveCallback, so that the callback can be invoked again on the next packet. That is why you only see the first packet.
Just find a 3 month internship and you won't need a GitHub or a blog or any of these other inane suggestions.
Ctrl+K, Ctrl+D can be customized in Tools - Options - Text Editor - C# - Code Style - Formatting
Also doesn't need to loop through the entire list, if a match is found.
Both of you are changing the behavior. Maybe ProcessDirtyNodes has to be called for all graphs?
Because you are supposed to hate goto and do additional work to avoid it.
KeyConverter wasn't implemented until .net 3.0 [https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.keyconverter?view=netframework-3.0](https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.keyconverter?view=netframework-3.0) long after generics was introduced. TypeConverter was before, but they didn't have to implement it using that, they chose not to make a generic typeconverter to be used for new conversions, so I still question that decision.
 TypeConverter was introduced in .net 1, sure, but KeyConverter wasn't added until .net 3: [https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.keyconverter?view=netframework-3.0](https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.keyconverter?view=netframework-3.0) They could have chosen to write a generictypeconverter, and implement keyconverter using that, so I still question that decision.
&gt; If your application is Not important What? 
- Winforms or WPF. - Linq2DB for sql access. 
&gt;&gt; In a modest proposal called verbatim interpolated string, the syntax will be extended to accept @$". This will be interpreted exactly the same as interpolated verbatim strings ($@"), so you’ll never again have to worry about getting it backwards. I never used verbatim interpolated strings but this seems so minor. Maybe I don't see whats annoying here, but I'd rather have 1 correct order for consistency
&gt; CTRL K + D just does white space changes though The newest release has been improved and now does lots of code cleaning. It's no longer just white space.
&gt; csv parser Why reinvent the wheel? https://joshclose.github.io/CsvHelper/
Unity? Not free but it can shift a lot of bit + cross platform. Monegame should be easy to benchmark.Draw 50000 lines, fiddle with shading/psttren, etc each frame and animate. rotate and offset. Then measure the fps. 
What is your question? Im confused by your post.
Because you can't demonstrate something about code without code. You missed the point. I'm not recommending that you use this code in production. I'm recommending that you look at it to understand a practical use of `goto` in a domain most programmers understand. The same kind of problems probably also exist in specific business domains where there is no corresponding 3rd party library. Those are just harder to explain.
Within class methods, there's an implicit 'this'. public void SetFirstName(string name) { firstName = name; } is equivalent to public void SetFirstName(string name) { this.firstName = name; } So when you create an instantiation of the Student class (a Student object) and call the SetFirstName method on that object, the object's firstname member is modified. public void Main() { var myStudent = new Student(); // firstname and lastname are null myStudent.SetFirstName("bob"); Console.WriteLine(myStudent.firstName); // outputs bob } Are any parts of this still confusing?
using on ref structs, what am I missing here, seems ref structs wouldn't implement anything that would lend itself to being disponsed of.
MonoGame seems like it would suit your purpose and I've played around with it pretty extensively in the past (though I never player around with the low-level stuff like shaders). You'd have to make a prototype and see if the performance is adequate though I think it will be. "Proper" game engines like Unity will come with a lot of overhead that you won't need and I am not sure if you'll be breaking any TOS with those proper engines by using free editions for a company product, internal or not. You'd have to loot at each engine's TOS to see.
huh cool. thanks pcjer.
I was thinking of a scenario where you have something like (bool &amp;&amp; bool &amp;&amp;= bool || bool).. but in looking at it closer, maybe it's not a big deal... My thinking was that it would be false going into the condition but true coming out, and not be able to determine why logic did what it did. 
* ASP.NET Core MVC web app hosted via IIS for **internal** company use. * SQL Server for your RDBMS. * Entity Framework for your ORM. I saw your comment about security concerns. There are way more security concerns for desktop applications than web applications because a lot of security is handled out of the box with web apps when using Windows Server + IIS + SQL Server + Windows Auth (if available) or even an AWS or Azure cloud stack. Also, you'll find that deploying an update to a single web server is significantly easier than deploying an update to each client machine.
3D is in long future, possibly 3rd or later iteration of project (5+ years) - 2d is enough for now. Even shaders aren't needed - simple texture switch is enough to signal a change on map. Any advice you have about MonoGame?
I fail to understand this. Are you referring to a case where you want to place the labels in front of the loops? It seems to me that in order to emulate break label with goto you only need to place the label directly after the closing brace of the loop you want to break out of and to emulate continue label you simply place the label directly before the closing brace of the loop you want to continue. Not sure if I'm missing something...
If HasDirtyNodes is a simple property then you could just use &amp;=. Of course that will always evaluate the right hand side so not exactly the same thing.
Not sure I undeerstood your comment. I begin to talk a little bit about SP2016 Just as an intro. And then everything in the article is about SP2019. Only in the end, I talk about SharePoint Online. Hope I helped to clarify... 
Yours. 
Probably never gonna happen either because case insensitive is meaningless without knowing which language/culture to use. They want you to explicitly indicate it, even if it is just Ordinal.
Yeah that is kind of a cop out. Many languages do it by default, define an option, or provide a dedicated operator. Rarely have I ever needed a case sensitive comparison. The language should offer an operator so it doesn’t take an ugly method call. It almost feels like they’re avoiding it for spite. 
I'm referring to a case where you would want to trigger a `break` or a `continue` for a specific loop when you're not within the body of that loop. Here's an utterly contrived example written in D: https://wandbox.org/permlink/zjKOOLx7w8KrDUfV `if` statements within the innermost nested loop (denoted by the `third` label) will trigger a `break` or `continue` for the outer loops (`first` or `second`). As it is in C# currently, that code is not possible because you cannot trigger a `continue` on the outermost loop (line 15) from line 24, which is within the body of the innermost loop (line 21). Here's a slightly more practical example that searches a 2D array of random numbers for a specific number using nested `foreach` loops: https://wandbox.org/permlink/kbclF6Bge3lMxodF The second example _could_ be written using a `goto` that jumps to a label after the closing brace of the first loop as you say, but that's about as complicated as things get in C# while keeping the code clean and conscise. Java and D let you have many loops nested arbitrarily deep and allow you to `break` or `continue` any of them at any time from anywhere within the nest only by using labels. To do the same in C# with nothing but `goto` and some boolean flags would be impractical at best.
Like it or not, the .NET team is really sensitive to globalization issues. That's why using ToUpper/ToLower without the culture parameter is a warning under FXCop.
Images are easy. They're supported directly by the image control. PDFs and docs need their respective viewers. 
Thank you bro, can u advice any specific trusted viewer? 
I use an extension method named ```EqualsCI``` to handle string comparison. public static bool EqualsCI(this string str1, string str2) { return String.Equals(str1, str2, StringComparison.OrdinalIgnoreCase); }
Lol asking someone to clarify and get a downvote? K.
its a hack to avoid a goto though. contrary to popular belief gotos are evil if you use them in the right context
Xamarin and ASP.NET MVC are two different technology stacks...
Someone apparently downvoted all the replies to this.
I have something similar I use for `Contains`. case doesn't matter and you can have a ton of values to check against: public static bool Contains(this string source, StringComparison comp, params string[] values) { foreach (string enumString in values) { if (source?.IndexOf(enumString, comp) != -1) { return true; } } return false; } Usage: string pets = "cat, dog, fish"; bool isCat = pets.Contains(StringComparison.OrdinalIgnoreCase, "cAt", "kitten", "t-rex", "somethingElse"); // returns true because cAt is in there 
Technical aspects? Easy. Barely worth taking about. Twilio is fantastic. Legalities are the real pain. Especially in some areas where law and industry standards aren't aligned. I worked closely with our lawyer during the design process and I recommend you do the same.
Do NOT use async void. If an exception occurs you will completely lose the exception context and will be left in limbo. Find another alternative or use an mvvm library that handles async events for you.
I have seen in multiple places, people suggest that using async void is ok in the one instance of event handlers..
_graphs.ForEach(graph =&gt; graph.ProcessDirtyNodes());
No
Lol - fast, yes, but don't show newbies that code: it simultaneously encourages so many bad habits. It does demonstrate `goto` well, though, so well made.
So what is the difference between your code and this - https://dotnetfiddle.net/Widget/tsd748
Either one is fine. You probably don't need both, since they will cover mostly the same topics. But if you want to take both, my suggestion is to start with the Scott Allen course and flip through the other one to see if there's something that hasn't been covered by Scott. 
A parser like this, is an ideal example of using goto. Kudos, your use of code allows your function to be formatted like the grammar of CSV. Potentially a recursive descent parser may be as readable, but I can't comment on performance.
In most situations with nested loops it's cleaner to use a separate method and use return to exit the nested loop.
The "easiest" I can imagine quick is using wpf and the printing provided by the .Net framework itself. I think its called Reachframework. You can use the Flowdocument of wpf and print it. On win10 windows provides a direct print to PDF, older platforms still should be able to print it to the Microsoft document format XPS. This is a option for you without any third party code. 
[NFop]https://sourceforge.net/projects/nfop/). .Net implementation of the [Apache FOP PDF](https://en.wikipedia.org/wiki/Apache_FOP_(Formatting_Objects_Processor))
As both others have said, having Xamarin projects won't show any competancy in [asp.net](https://asp.net), outside of possible architecture patterns, which isn't much. Both technologies are just C# so there is nothing special there, it's the environment (mobile vs web) that's the big difference.
I'm leaning more towards on Scott because he has more courses and I feel it would have better overlap for continuous learning. If I find I'm having trouble learning the fundamentals, I'd do Bobs course to fill any missing gaps. Thanks for the reply!
I learned through Bob Tabor and I'd recommend him even if he wasn't free. He took me from clueless to employable in about 3 months. 
I get that. I am just trying to figure out if it is at all possible to build out a MVC app. I know I have to run the migrations and everything through the terminal, just when I do that I am getting an error for no connection string. I can’t seem to figure out how to access the appsettings.json file.
 As long as you're choosing [Asp.net](https://Asp.net) Core Web API/Web App, yes, you should have an appsettings.json in the root of your directory. You're positive you're not choosing a mono based [asp.net](https://asp.net) project?
Wow that's great. Did you have a degree?
Nope. Just a GED.
Damn that's neat. Congratz. I'm just starting out though and have a lot of subjects to tackle unfortunately. Doubt I'd get a job in three months lol. Still think I'm gonna take advantage of free Pluralsight and see how it goes.
Why you want to learn C# instead of Javascript if you're just starting out ? the JS open source ecosystem is much bigger and there is way more jobs etc JS is more cutting edge and all the innovations happen mostly with JS first etc you can code Js in the backend now with Node, React can build mobile apps too etc xamarin isn't popular 
Their are a few reasons why. But I heard good things with C# and that it would be more friendly to learn than java. I'm doing the C# track in my program. Later on I think working on a horror indie game as a hobby would be neat. I hear once you know one of these, it's very easy to learn the other.
 Run as admin does not run in kernel space. System would make it so there is no UI, this is reserved for drivers and services. Admin is a security group, it is not a user. When you log into windows, you get a token that identifies you. With UAC turned on, the token you are given is all of your information, just without saying you're a member of the Admin group. If you say run as admin, you get the same token, just with the information of the admin group if you are a member, or prompted to give it the login token for a user who is. There are 5 levels of security, as per here: [https://msdn.microsoft.com/en-us/library/bb625963.aspx](https://msdn.microsoft.com/en-us/library/bb625963.aspx) running a program starts as medium security in UAC, running as admin only promotes it to high. Table 7 would be the most explanatory from what I posted. &amp;#x200B; You are 100% running in user space. If run as admin ran in kernel space, a crash would crash your system -- that would be catastrophic.
Plenty of jobs in C#. What you write is typically written by people with no to little real experience in C#. Personally I tried to switch to Javascript, but the pain of developing in an untyped language was more than I could bear.
Good point in the second case you mention. The first I am talking about SP2016 as an intro and it is as intended, but in the second case it should be already available in SharePoint Online. I edited the article a few times and I was almost sure that I wrote SharePoint Online but thanks for the remark, I will correct it. 
Not at all.
TypeScript for you sir!
If you go on LinkedIn and search for development internships I promise you you will find lots of them. Seriously, this stuff is one Google search away. Don't take my word for it. Make your resume look good and be good at the fundamentals and give it a shot. I promise you any sort of software development experience with a company will look better than anything else, and more often than not they're paid too.
What about `is!`? 
Using punctuation would be hard to read. Imagine having to distinguish between `is!` and `is` in dense code. 
You can use RDLC templates (Visual Studio Report Designer) and LocalReport to render your report to pdf/word/excel: [https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/bb558708(v%3dvs.120)](https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/bb558708(v%3dvs.120)), [https://code.msdn.microsoft.com/RDLC-Report-in-C-b106fc20](https://code.msdn.microsoft.com/RDLC-Report-in-C-b106fc20) As i remember, you will not create beautiful report (or at least at low cost) but you can rapidly develop small reports. &amp;#x200B; Workflow looks like this: using (var localReport = new LocalReport()) { localReport.ReportEmbeddedResource = "FullNamespace.ToEmbeddedResource.ReportTemplate.rdlc"; // or localReport.ReportPath = "./CopiedyToOutput/ReportTemaplte.rdlc" // Add some parameters var parameter= new ReportParameter("parameterName", "parameterValue"); report.SetParameters(new[] { parameter }); // Add some data sources report.DataSources.Add(new ReportDataSource("MyDataSource", new List&lt;MyDataSourceModel&gt;())); // Render var byteViewer = report.Render("Pdf"); // or "Excel" or "Word" using (FileStream newFile = new FileStream("myReport.pdf", FileMode.Create)) { newFile.Write(byteViewer, 0, byteViewer.Length); newFile.Flush(); newFile.Close(); } } &amp;#x200B;
Same could be said for `obj.Prop` versus `obj.?Prop`, couldn't it? But that's idiomatic C#.
Isn't it `?.` ? And with syntax colouring the names around the Elvis operator distinguish themselves more than is! would from isnot
Whoops, you're right. So much for writing code on my phone. And I think if the whole `is!` would be colored blue like keyword, it would stand out just as well. But that's just personal taste. 
I have never been seen writing code on my pone over SSH into Emacs. Never 
You need an ORM. 
Don't kill my goto
FYI, “class method” mostly means what C# calls static method. The ones that get `this` passed are called instance methods. 
Turn on stylecop and treat warnings as errors. See how many people don't opt-in after that.
Changes made. " The previous release, SharePoint 2016, has brought us several major improvements over its predecessor " just to clarify I am talking about SP2016 as an intro. " The major difference between SharePoint 2019 and its predecessor is that it will include some of the major UI improvements already available in SharePoint Online" Thanks for the feedback.
So I need a ORM + a working MySql Server? Looks like it doesn't work without MySql Server and every user has to install and run a local MySql server.
OK, if you're familiar with JavaScript, it's the equivalent of asking if you can show competence with ReactJS by building an application using jQuery. They share a language and that's pretty much it.
A broken mysql server wont help you :D Developers should have their own local server, you could quickly deploy them with wsl or docker. The application, when running on user machines shouldn't interact with a mysql server in a shared environment but with a service to control the data manipulation. If you want local database use sqlite or similar, could also use an ORM for that. 
In addition, if all you want is SQL script transformation then i suppose some simple Regex would give you that. 
Try the axmls (I did the frst time I created a Xamarin project, I didn't realise you could use Xamarin Forms with XAML), and then when you do another project try XAML, so you get a feel for that as well. Other advice would be to use some MVVM framework, if you are creating UI in each project (a la axml) MvvmCross is very nice. For Xam Forms, there are a few nice ones (I like FreshMvvm). For my latest few projects I have been using ReactiveUI (that is quite a mind shift though, but if you are interesting in looking at reactive programing (a la Observables) you might really like it)
As alternative you might also check Kotlin, which is similar to C# in features.
sqlite is a good hint. I just googled and see that there are multiple "MySql script to sqllite" converter out there.
Other advice (personal prefernce): If you are using Xamarin (in any form) check out AppCenter.ms You can add it to your project, and it makes distribution a lot easier (even if just to your owen phone when you don't want a debug build, or to a friend), it also gives you loggs and crash reports.
If I would write a parser I probably start with regex, too. But I was hoping that someone else wrote such transformation script so I don't have too. :-)
Learning js is alone is not enough now days, you need to be able to interact with the back end as well, so starting with c# is a good choice. It is much easier to learn js once you know c#. In my personal opinion Scott Allan's courses tend to be a little dry and put you to sleep, so you can sit thru that then you can start with his courses.
If you prefer C# over java, you could try Kotlin - it feels like C# 9 with lots of features, syntactic sugars and so on, while still using all the the native APIs. My personal experience with Xamarin was that it works for simpler CRUD apps, but when you step outside of that, it gets in the way.
Thanks everyone... i am defo gonna be checking out Kotlin - i remember reading about it becoming a first class language for Android a while ago, and made a mental note to check it out, but forgot :)
I’ve been using Xamarin for a few years now, predominantly Forms but with a fair bunch of custom stuff for each platform. I rarely use the emulators as I’ve found them to be slow and to be honest I think it’s better to use an actual device, you get a better feel for the actual speed and touch capabilities that aren’t quite so obvious. For CI I use Microsoft’s App center which allows automatic build on checkin to our vsts/ vso/azure devops git repo or whatever ms refers to it by these days. App center is actually a dream for building because it signs and automatically releases to chrome store and iTunes connect as part of the CI process, something I absolutely hated doing manually. With regards to stability, most problems I found can be solved by cleaning out the /bin and /obj folders, closing VS and rebuilding. I have found it’s best to stay at least 2-6 weeks behind the latest Xam framework (which seems to update weekly) because they always have bugs. I’m not entirely sure Xam is the best way forward for new projects as React Native and a couple of other native transpiled solutions sound like they’re easier to use.
Removed: Rule 4.
If you're at all serious about getting your testing environment up and running you need to look into something like Nox Player. It emulates Android workout issues, and as a bonus it uses your computer hardware for hardware acceleration. It seems almost as fast as a physical device and doesn't have the dependencies that the official implementations have. It's been my go to for years https://www.bignox.com
I'm pretty sure if you google "pdf viewer" you'll find something.
Yes looks really good. I think I am gona contribute to it aswell.
I have to agree. Coming from a WinForms background (more recently - 3 years or so - MVC etc...), Xamarin through VS feels like it's in an Alpha type state. Extremely buggy (I had to re-install it 4 times before I could get the designer to work). I've tried on and off with it for a few years now; it doesn't appear to have got any better, but given the fact that I'm developing Alexa apps and need an accompanying Android App, I'm going to have to persevere and just get used to the higher blood pressure. It's a shame, because I can see how it could be so very good; it's just let down by the buggyness and completely unintuitive interface. 
I'd start with Bob's Foundations course. I jumped into Scott Allen's courses when I first started learning C# and while they were informative, I couldn't help but feel like something was missing - I struggled w/ how certain parts of the code worked, why the syntax was the way it was, and found myself floundering. Then I found Bob's Foundations course and then all the dots began to connect - it was like one massive, continuous AHA moment. He takes the time to really explain what is going on with the code, how it should be used and so on. I then retook Scott Allen's courses to learn on the intermediate concepts and was able to keep up.