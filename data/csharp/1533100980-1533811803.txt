As other have mentioned, because you haven't formatted the code to be able to draw a vertical line from the opening brace to the closing brace, this: &gt; private DataTable GetDerpData() &gt; { &gt; var tempTable = new DataTable(); &gt; using (var connection = new SqlConnection()) &gt; { &gt; using (SqlCommand command = connection.CreateCommand()) &gt; { &gt; command.CommandText = "select * from dbo.[DerpTable]"; &gt; &gt; using (var adapter = new SqlDataAdapter(command)) &gt; { &gt; adapter.Fill(tempTable); &gt; } &gt; } &gt; } &gt; &gt; return tempTable; &gt; } does not look as good as this: &gt; private DataTable GetDerpData() &gt; { &gt; var tempTable = new DataTable(); &gt; &gt; using (var connection = new SqlConnection()) &gt; { &gt; using (SqlCommand command = connection.CreateCommand()) &gt; { &gt; command.CommandText = "select * from dbo.[DerpTable]"; &gt; &gt; using (var adapter = new SqlDataAdapter(command)) &gt; { &gt; adapter.Fill(tempTable); &gt; } &gt; } &gt; } &gt; return tempTable; &gt; }
Then why doesn't .NET Reference Source use Allman? https://github.com/Microsoft/referencesource/blob/master/System.Numerics/System/Numerics/Complex.cs
a) don't inherit everything. Inherit where logic dictates it and you will actually make good use of it. E.g. a chair leg is not a child of chair, it is a member (chair has 4 legs). You will see a lot of bad tutorials telling you otherwise. An office chair can but does not have to inherit from chair, to give a positive example. b) it's always better to have a lot of tiny or seemingly useless classes than blowing up a central class beyond the point of no return c) check out interfaces and use them. they might seem tedious and obsolete at first, but really help you understand what you're doing while doing it. d) use a standard styleguide (and some extension to autoformat/check)
I really like this article. I think mocking is dead-end methodology. Either write the code in a way that doesn't require any dependencies. Or use fakes instead of mocks.
Mono uses K&amp;R. I don’t dig it, but it’s prbably not worth arguing over.
Yea? I always thought this was a bit overkill to be concerned about. (Var)
There’s 5 ways to do something in C# and 2 are correct.
Why? I use var almost everywhere I can, and it has not caused any problems. On the other hand, I find that it makes the code easier to read, as the type of a variable is not usually all that interesting.
You are a good person.
That's it. The big idea is that instead of manipulating the Window through code behind, which uses control semantics, you have a view and a viewmodel (and the viewmodel you can connect it to whatever you want, to a controller, to a model…). You connect the view to the viewmodel through DataContext property of the view. And there are many ways of binding them. Ideally, the View should be agnostic of the exact type of the viewmodel, but should be coupled to an interface of the ViewModel. And the ViewModel should be completely unaware even of the existence of a view. And what is the magic that makes all of this possible? The data binding engine of WPF. You want to update a property of the view model when a property of a control changes? you bind it in OneWayToSource mode You want to update a property of a control in the view when you change a property in the ViewModel? you bind it, and in the viewModel you use the INotifyPropertyChanged interface The types in the view and in the viewmodel properties are different? you create ValueConverter. You want to present a complex object that is in the ViewModel? You template it in the View. So manipulating the ViewModel, instead of using control semantics, use more business semantics. Makes things cleaner, more testable, more decoupled. MVVM is a game changer. Has a little learning curve, but pays off tenfold.
If you have multiple usings, just don't add blocks. And if you add a method to create a command with command text set it will be even more readable: private DataTable GetDerpData() { var tempTable = new DataTable(); using (var connection = new SqlConnection()) using (SqlCommand command = CreateCommand(connection, "select * from dbo.[DerpTable]")) using (var adapter = new SqlDataAdapter(command)) { adapter.Fill(tempTable); } return tempTable; }
Using var is a problem if you don't name your variables properly, which you should. There was a study on that as well, that people can get code better/faster if you use long names. The idea was that you only need to store this one thing in your short term memory and not also the mapping. (defaultCompanyName vs. cn or something)
To be honest when its chained using statements, i don't use braces. The separate CommandText is mainly because I also use parameterized statements a lot CreateCommand is a method of the SqlConnection class btw
Fakes, Mocks, Stubs, Test doubles... There are so many terms that are used in different ways, so it's really annoying to me, if someone relies on one term in an article title instead of describing the meaning he has in mind. Like the word *Unicode* is abused by so many people and organizations (hey Microsoft - hate you for that one really!), the word *mock* is really problematic. Besides the meaning of "a fake component that enables one to detect calls" it is often used as a synonym for almost *all* test related fake components. Lots of libraries uses the word *mock* as part of their names (like powermock), even though they provide much more than creating and validating Mocks. Besides that I agree that most of your tests should not rely on verifying the call of a specific method. This should be a rare used feature, which is almost always only used for some sort of testing a command. 
While I prefer Allman as well, I would say: use whatever your team/project already uses.
* No Factories and providers. Use `YourClass.Parse` or `YourClass.CreateFrom(data)` do not create `YourClassFactory`. * Use Interfaces, but do NOT overuse them. no need for `class myClass: IFirstMetod, ISecondMethod, IThirdMethod, IFourthMethod` * Use properties... No more `getThisVariable()`
My opinion is that you should only use var if it’s obvious from the RHS what the type is. Contrived example: ``` // obvious var customer = service.GetCustomer(123); // is response updated Customer, bool, something else? var response = service.UpdateCustomer(customer); ``` I also don’t buy the “hover over it in visual studio” as you can sometimes be outside of vs, which is where the problem arises. E.g. reading code for reviewing a PR in GitHub or quickly opening a cs file in Sublime text.
&gt;the package manager will take note of newer versions, and by following semantic versioning, can (more or less) determine whether those newer versions are compatible. This is not only useful, but can also be critical in cases of security holes. Thanks, made me realize, it have to do some reading on 'semantic versioning' :-). 
Even if you don't write tests first, write code assuming you will write tests. The different approaches to testing and how code is written for them are probably similar for C#/C++/Java
Just a nitpick, formulating it as things "not not to do" is confusing, it would be better to say "things to do".
You aren't going to beat Rider on Mac, so this won't apply as much. In any case, here's an example. Open up an ASP.NET WebForms project in Visual Studio (Windows), pop open one of your ASPX pages and drop in `&lt;asp:TextBox ID="MyTestBox" runat="server" /&gt;`. It'll go ahead and add the control to the designer partial to be accessed from code behind. Rider won't. You're going to need to drop a `protected TextBox MyTestBox;` field in your code behind if you want to access it there. You're going to need to know that's a thing that happens, and why. If you understand how the binding works it's not a big deal. If you're used to Visual Studio doing it for you, you're going to be completely lost as to why the control you definitely just created isn't accessible in your `Page_Load` method. Visual Studio is going to do a lot of things subtly and magically for you without you noticing it's happening. Most of the time this is great, but when something goes wrong you're suddenly forced to learn `too many things`. Rider isn't quite so subtle or magic. If you want to do a thing VS did magically you need to know what it is and do it yourself. All that said, my last experience with Visual Studio for Mac was a strong reminder of working with Visual Studio 2008, and I don't need to be reminded of that. If you're on macOS or Linux go with Rider.
I initially didn't use double negatives, but the post was asking about things NOT to do, so I added them (when there were like only 2 bullet points). Removed them now, thanks
That wouldn't answer the question ..
the length of my variable/method/ect names has been relatively directly proportionate to my years of experience programming (without being overly ridiculous). Also probably due to size/scope of projects increasing. Its easy to remember stuff in one or two files, but when you're up do dozens/hundreds, more descriptive names are way more helpful. To the var point, I typically only use it when the type is explicitly stated on the value side of the assignment (pretty sure theres a fancy term for that that's slipping my mind at 2am lol).
&gt; No Factories I am going to disagree with a blanket rule of "no factories, ever". Factories were way way overused in java back in the day, and there was a deserved backlash. However factories solve a particular problem, and if you have the problem, you want a factory. They can also be lightweight: `Func&lt;T&gt;` is a factory for objects of type `T`. Unlike static methods, they can be injected, which is useful to testing and DI.
ReferenceSource uses all of the bracing styles - even those nobody asked for. [Line 287-304 e.g.](https://github.com/Microsoft/referencesource/blob/master/System.Numerics/System/Numerics/Complex.cs#L287)
Totally agree with length vs. years of work. Especially now with Resharper there is no more reason to not put what it does and what it actually is all in the name. You're not even saving key strokes. As for var, Microsoft really pushes that. (https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions) It is weird at first but ones you get used to it code becomes much less cluttered. Also in most cases it's redundant anyway. (Customer customer = new Customer() vs var customer = new Customer()... The type should be in the name anyway) Oh yeah, but I think we actually agree there too. The only exception is when you can't define the type on the value side.
Don't use friend assemblies. Don't even look up what it is. 
How I see it is that the type doesn't matter for local variables. All that matters is the input and the output of the method, and those can't be "var"-ed (in C#). All one should need to properly review a method is the method's signature(s). If I were editing the file directly in an editor without intellisense, knowing the type could help me. At which point I might as well go back to hungarian notation variable naming.
Martin Fowler’s definitions seem to be the most widely used: https://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs
Interface per behaviour, not interface per method 
I should have phrased it it better: it is the most common definition that makes a distinction between the terms. The most common definition overal indeed seems to be to use the terms interchangeably, resulting in the mess that let to this discussion.
Been programming in .Net for a little over a decade and I have to say - this is a great list to get anyone started in my opinion. 
You don't need to know SemVer to use NPM or package managers (I'd say most people don't), but SemVer is generally regarded as "industry standard", and is good to learn anyways.
Sounds good. I also wrote some of the AMF stack myself a while ago. I was able to receive the "onMetadata" and audio/video after that. I was able to simulate rtmpdump, but I kind of lost interest after that. 
I would probably use something like this on the controller/action: `[Authorize(Policy = "Subscriptions")]`
Albahari is an absolute champ. Truly a guy who knows his stuff.
I enclose single statements within their own scope. Makes extending the scope easier afterwards, should it be the case. And for me it's a little bit easier to read.
Well, that was fantastic. Thanks for sharing. 
Could it be as simple as increasing the command timeout value? I've had to do that for some long running SQL queries.
Utterly, utterly brilliant. Its only when you have struggled with the same inter-process problem, and solved it using pipes which are slow, that you truly appreciate how superb this solution is from a raw performance perspective.
I am not going to increase the request timeout to hours. Besides, the user needs to have a response that his request is in process. 
Ok, so, let's take a real life example. I have a desktop app with only one form. It is more a utility desktop app. Connects to a db, makes some transformation and sends an e-mail. Enterprise bussines logic but nothing with the company core. It is the perfect app to assign to a trainne to understand how we program and make it step by step, it uses EF and WPF and nothing more. Lets say it has over 1500 lines. So you say that in the name of testability (remember, I didn't say nothing about maintainable code) I should add a dependency container, a testing framewok and an automated build and testing solution, no?
whenever I write C# without VS, I fall back into C trappings; K&amp;R bracing (with `} else {`!) with upper case constants
Why not? What happens when there's a bug in your business logic or a SQL injection (granted you're using ef but you get the idea)? How will you verify it doesn't happen again? Trainees should most definitely be writing tests and testable code. If they don't learn early, when will they?
Well written Java looks pretty much identical to C# aside from the class libraries having a different API. There is nothing wrong with the language nowadays.
Using var is great if your naming is clear and consistent all the time. In a large codebase contributed to by 10s or 100s of developers, this is often not the case, at least in my experience. I don't want to hover over every single variable to see it's type and I don't always have visual studio open to help me out. There are plenty of reasonable examples by other posters where the type can be inferred through naming, and sure, those are great. But more often than not, I find the code harder to understand if everything is a var and the type is not obvious. Sure, it may look nice and be easy to read, but *comprehending* suffers when you don't know what types you're dealing with.
I'd say its less about ease of modifying and more about auto merging cleanly. A failed auto merge is a huge waste of time when it happens, and has no value. 
[removed]
You can merge conceptually linked using blocks with no negatives as well: using (var connection = new SqlConnection(connectionString)) using (var command = new SqlCommand(sql, connection)) { .... }
&gt;the point is it shouldn't matter as long as the codebase is consistent -ly tabs.
&gt; Use Visual Studio on Windows to learn If you can afford ReSharper get it. It will teach you a lot. Honestly worth every penny.
Vs code 
Sometimes, when you right click, the selected item isn't the item that the context menu is over.
Also • Learn to use async functions • Parallelizing code is really easy using Threads and Tasks
My knowledge in this area is very limited but have you looked into NAudio for audio capture and playback? You also might want to consider a topic-based pub/sub pattern for your server code. Further, you should consider just using TCP for managing **state** (like sending notifications that a call started/ended, who is currently talking, etc.) and then use **UDP** for the actual audio stream. To reiterate, I am not knowledgeable in this area so it would behoove you to verify what I am saying before doing any of it :-P Hope this helps in some way.
They want you to tell them how you will test this program. Test every aspect of it. Btw: Why didn't you use the "prt sc"-button?
This is only true if x can be implicitly casted as a bool. While that’s going to be the case pretty often, there’s still a use case for x == true if x is a Nullable&lt;bool&gt;, for example. Yes, you can use .GetValueOrDefault() to accomplish something similar but IMO in that case == true is easier to read. But you’re right that it’s redundant and makes things harder to read for implicit bool types.
That is an awesome tip! Unfortunately there doesn't seem to be a setting for my specific use-case.
First time I post in here, I'm doing in .Net Standard a library to manage CSVs; I do it in my free time so I've not being able to put time on it in the last few weeks :( Anyone is welcome to contribute or give me some advice if there is something that you don't like. here is the code: [https://github.com/ElectNewt/CSVWorker](https://github.com/ElectNewt/CSVWorker) My idea is finish it and start to either contribute in other people code or start a new one. 
Short answer: https://api.reddit.com/ https://msdn.microsoft.com/en-us/library/system.net.http.httpclient(v=vs.118).aspx Each site may have its own programmatic API. Of course, you can always make http requests to normal pages, but a lot of them are built with JavaScript, which makes it difficult or impossible to get the info you need programmatically that way. Long answer: https://tools.ietf.org/html/rfc7231 (and dozens of other relevant RFCs)
Learn both, they work well together if you want to do web development at some point. But yeah for games you can do a lot more with C#. Plus its a fun language!
I come from an MVC background but even I was scouring the code, not finding `Form1`, and going “WTF??”. Good call on realizing that the file name had been changed without the class name being similarly altered. Or vice versa. I was getting close, but not quite reaching it.
JavaScript and C# are very similar, however, JavaScript doesn't have classes, which are going to be very prevalent in your C# code for any games. You're better off learning C# along with Unity for games, but if you end up not going deep into the game programming, C# is a very popular language in the business world for web, console apps, and GUI apps... so it's not going to be a waste to learn.
Completely agree, and from my home town too! His book and website on threading are basically industry standards.
Long running cpu intensive processes like should always offload it to another process altogether. You might use QueueBackgroundWorkItem for smaller tasks like sending an e-mail in the background etc. But not for an hour(s) long task. Doing cpu intensive work using your web app (in IIS) will use threads that should be responding to Http requests. This means scalability / availability of your app will be destroyed. Under high loads, this could literally make your web app inaccessible. Also, using QueueBackgroundWorkItem will prevent IIS from recycling / restarting your app if there is a long running task still working. Not good if you need to redeploy or fix prod issues etc. Doing this in a separate process altogether can prevent this - so your long running task can still run even if your web app needs to restart etc. Hangfire was mentioned - good option. You can always just put that logic into another process (via an exe or an separate internal api dedicated to this type of processing) and trigger it via your Http request. From the user's perspective it'll be a few milliseconds. Once that's done processing (hours later), it can issue a flag somewhere (in a database for example) marking that specific task as completed. Then your web app can poll that flag to tell the user if it's done or still pending in your UI or even via E-mail etc.
I guess i will start learning it. Thank you for the information :)
There is a dotnet library for accessing the reddit api here: https://github.com/CrustyJew/RedditSharp
&gt;but a lot of them are built with JavaScript, which makes it difficult or impossible to get the info you need programmatically that way. Definitely not impossible. You just need to use a headless (or not) browser to accomplish this. Most people use a comination of Selenium, and PhantomJS or Chrome.
[JavaScript does have classes.](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)
After some search i found this [https://www.codeproject.com/Articles/139216/A-Simple-Technique-for-Data-binding-to-the-Positio](https://www.codeproject.com/Articles/139216/A-Simple-Technique-for-Data-binding-to-the-Positio) I think that the only problem i will have is to make the position change with windows resize and it keep a same relative position i will keep trying but if you have any hint please advice :) In general what i'm trying to do is having a picture as a background and it will uniformly resize with the windows size and i want to add labels with numbers in it (the numbers are easy) and they should cover a specific part of the photo i managed to do that but the problem is when the window resize the picture will also resize but the label i added is no longer covering the same part i covered before resizing thank you 
Understandable. Just a thought. Good luck! Post back when you have a solution... Would be good to know how it plays out.
99% of sites that are built in javascript are accessing an API to get the actual data, Javascript is almost always presentational in nature.
Why do you say this? I get a lot of usage out of friend assemblies for exposing internal structures to unit tests.
Huh, TIL.
I like this article and agree with so much. However... I don’t get this assumption that we can just isolate our entire domain from having to retrieve anything. I can imagine many cases where domain logic would require something to be retrieved and then the logic to continue. What am I missing here? Are they replacing that by assuming a messaging layer will take care of it? I can’t see how it would work without something to decouple the domain.
* Most .NET shops use VS for development. * Newbie and veteran programmers alike are more likely to start with VS when learning C# and will therefore be more accustomed to the default styles. * Visual Studio comes with default automatic styling settings, most of which match the styling in the MSDN docs. * Deviating from the default styling guidelines means that you are literally *choosing a different style* that many "anti-C#-styling" people (like yourself) claim to not be that important to begin with. * If one values code consistency then deviating from the default automatic styling settings also means that these settings should also be synchronized for the entire dev team * As to brace styles specifically, the Allman style is far easier to read due to whitespace (consider a word doc -- is it easier to read single or double-spaced paragraph?), has more practical benefit than KR, and is the VS default. For practical benefits, you can easily see at a glance which open brace is paired with a closing brace. Further, by following the practice of all scopes having braces, you reduce some of the issues that may arise from automatic merges as well as making it easier for future maintainers to add more code within the scope. All said, *when in Rome do as the Romans do*, but if the team customized the styles in VS, you are going to need to synchronize those settings. 
Why can't they use a commercial and established VoIP solution? I'm not really experienced in this field, but IIRC, for major voice applications: * Encode mic input to a low latency codec like Opus and perform some basic processing steps (to help reduce noise) * Use UDP as transport, and configure QoS to avoid dropped packets instead of using TCP (which will require higher latency and bandwidth) * Decode mic input to PCM and play using a low latency, modern API like WASAPI * Do all of the above while handling the logic for reconnection, latency/bandwidth problems, etc. (i.e, build your own protocol) 
And don't forget [LINQPad](https://www.linqpad.net/). I mostly use it as a way to work out snippets of C# now but it's a whole lot richer than that.
[https://www.youtube.com/watch?v=EZ05e7EMOLM](https://www.youtube.com/watch?v=EZ05e7EMOLM) If you have an hour or so give that a watch. My issue with that statement is nearly every article you come across online throws out that same reasoning. Now a unit test implementation is technically a real implementation but you're not implementing the interface, you're mocking it! You (usually) end up with horrifically fragile unit tests that are riddled with implementation details. I see so very little value in these. In fact, I'd argue if mocking is your reason for interfaces, you're doing them wrong. I think that this might be why a lot of "greenfield" projects try and start out all TDD and Unit Testable but sort of fall to the wayside over time. They realize they've created a maintenance hell. There are still obviously good uses for mocking; sometimes there are areas of code you don't want to run like IO boundaries. I think you can sort of gate these away though. Another thing is if you have a method like - void Method() { return interface.Method().Select(x =&gt; Transform(x)); } maybe rewrite to ``` void Method(IEnumerable&lt;X&gt; items) { return items.Select(x =&gt; Transform(x)); } ``` Obviously not great examples but the first requires mocking something and thus you're going to end up with implementation details in that test. The second though, is a little easier to test. You can easily just pass a list through to that method and it's much easier to test against. Obviously you'd still need interface.Method() somewhere else potentially, but that individual "unit of code" is much easier to test. If you've gotten this far down (thanks for listening to e waffle); I'm kind of exploring this at the moment because I think most developers are misusing interfaces and their usage in development stinks to me. I'm very probably wrong, but I'm still exploring.
Shout out to PuppeteerSharp for headless Chrome: https://github.com/kblok/puppeteer-sharp
Do you use Rider because of your OS too or something else?
Why did you make that a field and not a property?
&gt; Also, using QueueBackgroundWorkItem will prevent IIS from recycling / restarting your app if there is a long running task still working. I don't believe that is accurate. If I recall correctly, ASP.Net will wait up to 90 seconds by default (the minimum of HttpRuntimeSection.ShutdownTimeout and processModel shutdownTimeLimit) and then it will continue to unload the AppDomain, killing your background process at an indeterminate position.
Don't run long running background processes inside an ASP.Net application. Period.
This might be a nightmare to deal with in AutoMapper as I am slowly realizing.
In that case what is the option to use? Creating WCF service which runs the task?
I like using enums for constant strings like that: [Authorize(Policy = nameof(MyApplicationPolicy.Subscriptions))]
I use it for one off database jobs that are too complex for a plain SQL statement, and for code interview type tasks.
WCF is long since abandoned. I wouldn't do anything new in it. Plus if you run it under IIS you're just back where you started. You need a process that can receive messages and does not run under IIS - which leaves you with a multitude of choices. If you host on Azure WebJobs might be quick and easy, otherwise you want an app running as a daemon, which still leaves you with choices like implementing a Windows Service or not, and how to communicate between processes.
* if the abstract type is literally just an autoprop and attribute, just make it an interface and implement it as needed. Creating a whole type for that is a lot of messing around unless there's literally no other option. * if the abstract type contains both properties and behavior, create an interface for the shared pieces, and use composition to delegate the implementation in implementing classes. Unless you have a compelling reason, there's probably not much point in injecting the delegated type into the implementing class, so you could probably just build it in the concrete type's constructor and roll from there. public interface IEntity { int Id {get; set;} } public interface IAuditable { DateTime CreatedOn { get; set; } /* ... */ } public class Auditable : IAuditable { public DateTime CreatedOn { get; set; } /* ... */ } public class CarViewModel : CarBaseViewModel, IAuditable { private readonly Auditable _auditable; public DateTime CreatedOn { get =&gt; _auditable.CreatedOn = value; set =&gt; _auditable.CreatedOn; } // ... public CarViewModel() { _auditable = new Auditable(); } } public class CarUpdateViewModel:CarBaseViewModel, IEntity { public int Id { get; set; } // remainder of class goes here You'd be stuck repeating the business of delegating to an instance or implementing state, but it's about as clean is it's going to get in C#. You may be able to get a better result when C# 8 hits with it's default interface implementation stuff, but you may also not like what that does to your interface types, so YMMV.
Assuming I am understating your issue correctly, as it looks like i have had the same type of "AuditableEntity" class. I just make that the base of the base classes. So in your example CarBaseViewModel needs to have a base of AuditableEntity. Make since? Other than that you are SOL unless you use an interface.
is it functionally critical that the class doesn't have the property at all? You could always override the property and return null on the getter.
Yeah, that's true. I haven't dug into the latest EF to see if they support something like NHibernate's "components" where it maps columns from the same table into a subobject (the canonical example would be an Address object that you might have associated with many different entities in your system).
I eventually reached this conclusion and ended up with an interface. At the end of the day, repeating myself a bit led to drastically less complicated mapping and validation code.
A class that derives from another class can be treated like that class. For example: an apple, a type of fruit, can be treated like a fruit. 
Could also use extension methods for IAuditable or IEntity to accommodate default behavior. Only drawback is you're limited to properties that are available on the interface. If that's an issue then just abstract out the needed properties into yet another interface. You know the old saying, "all problems in CS can be solved by another layer of indirection/abstraction" :-) . HTH! `public static class Extensions {` `public static int IncrementId(this IEntity entity) {` `return entity.Id + 1;` `}` `}` 
Definitely learn C#. (I also recommend SQL.) Game development won't pay your bills. Boring business software development will make you a *very* comfortable living. And to counteract the un-sexy-ness of it, getting good at boring business software development *will* get you into contact with important people in business and government, even if you never intended to. Consider it your craft, and you'll never go hungry.
I think it should be there. If I'm not mistaken, you want that chained methods will break after every single invocation? That's possible by setting "Wrap chained method calls" to "chop if long or multiline". 
I agree Json.Net is not great and I am not sure why it caught on so hard. Anyways to your problem most likely you are encountering a problem with TypeNameHandling setting being different between your server and client. Your client is expecting a Type property that is generated by the TypeNameHandling setting adding something to your json. While your server has the setting off making it so that no type is added. The thing is some types easily serialize to json without the TypeNameHandling setting on but when it comes to deserialize it fails because it can't figure out what type it is. Also my understanding is that the default setting for TypeNameHandling was changed between some versions of Json.Net. I can't remember what it changed to but at some point I think the default setting was on and now it defaults to off. Its possible your server has a version where the default setting is off and the client has a version where it expects it to be on. Either way ensure that your TypeNameHandling setting is set manually on both sides and that they match. That should potentially fix your problem. That said beware!! of the TypeNameHandling setting it causes a huge security issue. https://www.bleepingcomputer.com/news/security/severe-deserialization-issues-also-affect-net-not-just-java/ See remarks: https://www.newtonsoft.com/json/help/html/P_Newtonsoft_Json_JsonSerializerSettings_TypeNameHandling.htm Allowing unauthorized code to be run on the system that deserializes the json. It should be set to none which is the default now. That said some object models can't be deserialized without the type property which looks like what your running into. So use at your own risk!
What would you recommend instead of Json.Net
I think that's what they were saying. That it isn't impossible to get data from a javascript heavy page because it will have an API anyway, so just use that :) 
Nothing. Json.Net is baked into Asp.net as the default json serializer. As such you kind of have to use it. Sure there are faster serializers out there that maybe work better but at the end of the day Json.Net is so ingrained in all the frameworks/libraries out there that choosing a different framework is a losing battle. You would send so much time swapping out Json.Net with the new serializer and getting everything working that it wouldn't be worth it. Then you will run into a library that was expecting some setting or functionality that appears in Json.Net but not in your replacement and you would have to create an adapter. Json.Net won the war and its too late to give it up so better just to think about how to make it better.
I can't find your /StartRant tag. 
&gt; I agree Json.Net is not great and I am not sure why it caught on so hard. Because the alternatives were far worse.
So anyone willing to shed some light on what is a better alternative to JSON.NET? Not implying there isn’t any, I’m legitimately curious. 
Really I find that hard to believe. Can you give me a reason why for instance the [Jil](https://github.com/kevin-montrose/Jil) library is worse then Json.net
Do those have the customization abilities json.net does? Anything is simple when you control end to end, but start ingesting other people's data and you quickly run into lots of oddities and json.net is extensible enough to handle pretty much anything in a reasonably straightforward manner.
&gt; the worst kind of "JavaDocs" XML extract "The ParseJsonToBytes method will parse Json to bytes" crap I hate this. The worst is when tools auto-generate that sort of "documentation". /// Saves the file public void SaveFile() { } Thanks for wasting my time!
[https://www.linkedin.com/pulse/most-powerful-serializer-unity-odin-now-open-source-sune-thorsen](https://www.linkedin.com/pulse/most-powerful-serializer-unity-odin-now-open-source-sune-thorsen)
If I had a monitor that was 3,000 pixels tall, then and only then will I move to Allman brace style. Until then I will continue to labour under limited vertical pixel room, and stick with K&amp;R bracing. I want to see as much code on my screen as possible without actually needing an electron microscope to read it.
Don't worry. Just install Resharper and hit alt+enter.
SOLID principles, or any rule of thumb for that matter, can be taken too far. It's important to be able to see when you shouldn't use it.
Great talk, I like at 47:00 where he talks about fast serializing and all he does is create a list of the most common types and just binary write the typecode and object. Sometimes good enough is good enough.
Yea that's pretty much in line with what I said about IO boundaries. I'm a little jumpy on this though because people throw interfaces around for any old logic and it's absolute overkill.
system.xml.serialisation java.xml.parsers ¯\\\_(ツ)\_/¯ 
I'm finding it hard to take this post seriously I'm afraid. I'm seeing a lot of ranting but nothing concrete. Having worked with JSON.Net and not experienced any of the issues you suggest, I'd be more inclined to suggest that you're using it wrong. The Nuget package has been downloaded almost 140 million times and if it really had the issues you describe, there's no way it would be this popular. 
It is but it looks like it's only breaking _after_ the first invocation.
You are forgetting to take their relative age into account. Json.NET is 8 years older than Jil and 11 years old than Utf8Json. Back when the Json.NET project started, it was the only half decent and freely available JSON parser in the .NET world. By ~2008 it was the de facto standard.
This isn't really true. ASP.NET Core is much better at switching out the library. Even the official benchmarks are using a different library.
Too many people these days rely on inheritance when instead they should be using [composition](https://en.wikipedia.org/wiki/Composition_over_inheritance). Try it.
I run into the version compatibility issues all the time. But that's not json.net thing, it's a C sharp thing this library keeps falling over Yes, everybody else decides to import a different version of it.
...mmmm yes, but linq is very slow. rule of thumb: use linq until you profile and find that is the bottleneck. 
You made me wander into the redesign to enable it. I will not forget this transgression. But now, as far as I can tell, there's an /r/csharp general chat.
merging using blocks ftw. usually when you're dealing with streams, you start with the raw bytes. then the decompression. then the text reader. compact usings make that obvious. i wish there was a way to forbid access to previous using variables though, I've definitely made the mistake of reading from the wrong stream. 
mother of god... the inconsistency. 
i have hard errors if there are no braces. i dont want stupid scope bugs because i wanted to save some lines. 
Oh, neat! And my condolences, I hate that redesign too~
unit tests is what it is for. but even then... maybe do it a different way. internalsvisibleto is generally a code smell. 
&gt; We have several apps. Over the years each has evolved with different teams, some use 3rd party libraries and everyone uses Json.NET. But every version hates every other version. This can be within versions (i.e. 8) and with different platforms (i.e. portable in 8 vs CLR 4.5 in 8). Those are contrived examples. I've experimented with versions from 6 through 11. They're all a nightmare. The whole point of JSON serialization is the interoperability and the "universal" nature of it. You can literally see what you're serializing and deserializing. The tools used by your teams should matter. &gt; I have no idea what the bloody thing is doing. JSON.NET is an open source library and you can file an issue on [GitHub](https://github.com/JamesNK/Newtonsoft.Json), if you can't understand the documentation or feel that you've found a bug, instead of posting pointless rants here. &gt; FA useful debugging info You can immediately examine the JSON produced by the serializer and object to which JSON was deserialized. Should take a few minutes to figure out what is wrong. Why are you so frustrated by something so simple? &gt; I control both in this instance You can control JSON serialization/deserialization using your own [`JsonConverter`](https://www.newtonsoft.com/json/help/html/CustomJsonConverter.htm) and [`ISerializationBinder`](https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Serialization_ISerializationBinder.htm). If you used them, then you would not have run into this problem. &gt; I have no idea what the bloody thing is doing. I hate the documentation, it's the worst kind of "JavaDocs" XML extract "The ParseJsonToBytes method will parse Json to bytes" crap and I'm just tired of it (Also contrived, but if you think about it, there's no information in there about encoding, for example, or whether those bytes are a list, an array, a Memory... ). You can type a rant about the hypothetical `ParseJsonToBytes` method but not link to a concrete example of what you're ranting about? 
I'll imply there isn't any. I've run into the exact same mess this guy has, and it does happen even with the best intentions, but then you try to roll your own a bit and it just gets _worse_ so you suck it up and deal with json.net( aka newtonsoft.json ) and get over it.
"What is string interning?"
That and the home-made memory mapped pipes too. Knowing when and where to draw the line in your design is an incredibly useful skill.
I'm using the redesign, how do I access this chatroom?
I would agree that C# is the way to go with Unity. More online support and more performance. 
Oh yes I hate this too. In fact I once got a book about c# where the entire text appears to have been auto generated. There's actually a guy who has written a program to do this; last heard he had more than 700 books to his name and has made a lot of money. The book was absolutely useless though.
Well, not everybody has the luxury of just throwing programmers at a problem either. I am thinking of the job where I learned C#, where I (the boss) would spend 3 days arguing with management that we should throw an hour of programmer time at an important problem, but if I needed to run 10 instances of the software in parallel (which happened) I could do so without blinking, if the servers weren't available (and they usually were but not always) I could just tell the staff "hey everybody please run an instance of the software on the production database and just put the window in the background until it exits", and this was occasionally more expedient than getting management to approve the programmer time to make the program more efficient. I know what you're saying, and I don't disagree, I just find that fixing the problem instead of just using linq is not a case that tends to come up often in the business world. Something I learned in college is, when programming, optimize for the scarcest resource. In most cases these days that's programmer time.
I haven't experienced these issues with JSON.Net so I don't really have any complaints. At the same time ServiceStack.Text is an good alternative if you really want to switch it up.
At this point, avoiding dependency version conflicts with whatever version xyz SDK/runtime uses is almost a good enough reason to try something else. 
Care to provide a testcase to demonstrate your problem, or are you just wanting to rant and have everyone give you a pat you on the back and say "there there"? I've had issues with JSON.NET for sure, and DLL version incompatibility has always been a pain in the arse with .NET when you're using a lot of third party libraries. I've never, however, had issues parsing JSON produced by JSON.NET, with JSON.NET - assuming the contracts on both sides match. Even cross major versions. 
Mind the [license terms on ServiceStack.Text](https://github.com/ServiceStack/ServiceStack.Text/blob/master/license.txt), however. 
The thing is, it's an easy fix if you know the trick. There are a couple hidden settings that take care off all the nonsense without assembly redirects.
I always wanted to write a book. What is that software called?
&gt;careerspressadvertisebloghelpthe reddit appreddit goldreddit gifts For simple cases: [https://www.nuget.org/stats/packages/System.Json?groupby=Version](https://www.nuget.org/stats/packages/System.Json?groupby=Version)
I don't know. A qucik google should be able to find the name of the guy though. I don't think his software is for sale. He developed his own special software to examine official documentation and then write "books" from it. I think it used stochastic analysis and markov chains.Then once the "book" was generated he would scan it for errors, clean it up a little etc then "publish" it. Only the books were absolutely useless. Things like this: Load() quick explanation: Loads item in question Detailed explanation: When this function is called at runtime it will load the item named in argument 1 I got through the first chapter before realising I'd been had. Sadly it was from an author who once wrote a very good book I'd learned a lot from about the way c# handles memory and virtual memory and paging; he'd then branched out and become a "publisher" who publisher books by other authors; only this one turned out to be fake. Perhaps he didn't realise; or perhaps he was just a figurehead by then. http://www.extremetech.com/extreme/143382-programmer-creates-800000-books-algorithmically-starts-selling-them-on-amazon Here's an example of someone else doing it but they appear to have good motives; the guy I got pissed off at auto-geerated useless boks and THEN pretended they had human authors. (in fact the book I bought had two pretend authors!) I wouldn't have minded if the book had been useful (and wouldn't have even known) but it was the most useless computer book I have ever read. 
Agree, at some point you will want to add something extra in there if only for debug. Just put the {} in to start.. Also, if using VS it will auto place them for you You done even need to use {} keys.
huh?
Wow. US patent US7266767B2. Guy could sue Microsoft, Adobe, every web browser developer and maybe even standard libraries that format strings. Instead he creates such great books as The 2007-2012 World Outlook for Wood Toilet Seats for only $795 at Amazon. My sarcasm meter just exploded. 
It's wonderful isn;t it? Remember that game where you had to find words that existed exactly once on a google search? People could buy "unique" books and then pay him never to sell another copy... For example you might have the world's only edition of "dogs that were known to have thee legs" or "beetles that have recogisable geometric shapes on their backs"
Yeah, I had to handle JSON that had this json: { "product": { "offers": "This is an offer" } } and { "product": { "offers": [ { "id": 1, "price": 55.6 }, "This is another offer" ] } } Took a bit of digging, but json.net allowed me to parse and normalize these.
It's actually not difficult to write your own if you only need basic functionalities, or there are plenty of high quality open source ones on GitHub. The only third party libraries I use in my projects are open source - having the source code is the best way to get around DLL hell.
I'm not familiar with your exact scenario, however... If you await a method that returns a Task, execution of that method (with the await in it) WILL NOT continue until that task (the one returned from the method you are awaiting) is completed. Otherwise you would get a runtime issue with your check of result.Succeeded; if you haven't awaited your method call the result variable would be of type Task&lt;T&gt; (where T is the type of object you want to work with that has the Succeeded property) which does not have a Succeeded property I don't think. So your await must be working. To confirm this do a type check of the result variable (result.GetType()) and log it to somewhere you can read it (Console?) That means you don't need to debug to confirm. Im positive you will see that the type of result is not Task&lt;T&gt; but infact 'T'. This means that your issue is probably not with Async/Await but with the result of the authentication or whatever it is that method does Lastly if this just practice stuff, stick it up on GitHub and we can clone it and try it out.
Hi Kirides, But what if I want to check if a user have access to a specific subscription or not ?
&gt; Remember that game where you had to find words that existed exactly once on a google search? (googledonks I think....) It's called [Googlewhack](https://en.wikipedia.org/wiki/Googlewhack)
**[Googlewhack](https://en.wikipedia.org/wiki/Googlewhack)** &gt;A Googlewhack is a contest for finding a Google search query consisting of exactly two words without quotation marks that returns exactly one hit. A Googlewhack must consist of two actual words found in a dictionary. A Googlewhack is considered legitimate if both of the searched-for words appear in the result page. For example, typing an asterisk (*) into the Google Search Bar turns up no results. ***** ^[About](https://www.reddit.com/user/ultimatewikibot/comments/90r969/about) ^| ^[Leave](https://reddit.com/message/compose?to=ultimatewikibot&amp;subject=Blacklist&amp;message=Me) ^[me](https://reddit.com/message/compose?to=ultimatewikibot&amp;subject=Blacklist&amp;message=Me) ^[alone](https://reddit.com/message/compose?to=ultimatewikibot&amp;subject=Blacklist&amp;message=Me) 
This really is the real pain. If you bring in something like azure storage package it brings in JSON.net v10 or something, if I have another package using JSON.net v6 or something I have to now do binding redirect hacks to change everything to use v10, knowing full well that there's been 4 major versions of breaking change. I also don't think this is really a csharp thing, this is just how nuget packages get structured. If there was a Microsoft abrastractions package for JSON serialization that only had the bare minimum interfaces exposing just Serialize/Deserialize that all JSOn serializers implemented(json.net, servicestack, JIL, etc) then these versions would never need to change in other libraries and the implementation version comes back to the app to have a single point defining what version to use
Might as well create another REST API to handle that.. 
Does `Task.WhenAll()` even do anything without any parameters being provided? 
Yes, I had a dabble with this setting yesterday, but didn't try all the permutations, I think it's going to be my attack vector for today, it was just so infuriating. The setting is never actively set in code, so it feels like either the default is different, or the code that decides what "auto" means is different. I'm going to hack at the json logging too, see if that gives me any info, but the docs were pretty unhelpful.
You can omit it if you add the (bit ranty) attribute to the header.
It really is right? Years ago a colleague refactored a ridiculously big class, by adding a comment exactly like the above for each of its 10 billion methods and properties. Took him weeks :/
I dont completely understand your scenario but from the error it looks like your library is targeting .net framework and you're trying to use it in a .net core app and this is causing issues. Either that or you have some assembly binding issues
There's nothing wrong with the async/await as far as I can see. The \`await Task.WhenAll()\` is doing nothing, you should remove it. I'd breakpoint the result.Succeeded check and look at the Errors property to see why it's failing to create your user.
This is actually a design and code organization flaw for all parties. Not removing unused dependencies, not splitting code by dependency, installing the same packages others you depend, on depend on. There are ways to avoid this and it starts with package and code organization. Developers need to start separating their types into their packages, similar to what the TS community does.
&gt; Why can't they use a commercial and established VoIP solution? Keeping costs low I guess... Its not my job to ask the boss why he's not doing it this way or that. Everything you've said about the technicalities here sounds good but I just have no idea how to do any of it :/
&gt; sounds good but I just have no idea how to do any of it :/ That's because making VoIP applications from scratch is not a simple job. Not as simple as using `TcpClient` and `TcpListener` as least. Even multibillion dollar companies like Skype don't get it right sometimes. So asking a single developer to developer a VoIP solution is really a bad idea. Besides, I'm not sure if the maintenance costs later will be worth it. There are plenty of open source alternatives to Skype, why not use them (since they are free and actively maintained by trusted developed) - https://opensource.com/alternatives/skype Anyway, there are examples on GitHub for every step that I've mentioned (WASAPI Input, Opus encoding, UDP connection logic, Opus decoding, WASAPI Output), you just have to glue them and make sure everything works. 
If your subscription model isn't dynamically generated you can try something like `Permissions.Subscription.MyServicePro` Where `Permissions` and `Subscription` is a static class containing all the constants / `public static readonly string ...`
In which case the original post doesn't neither. They are - their and my formulation - completely equivalent. I wouldn't expect that anyone can see that, but this is sub for programmers...
Thank you about great answer :)
!RemindMe 1h
Using some online tools like a JSON viewer might help OP to understand the structure in the api, example tool: http://jsonviewer.stack.hu/
How does it compare to Unity?
I might be missing something but your userManager field is never set to a value? So won't it be null?
[i](https://github.com/agracio/edge-js)t uses a fork of edge [https://github.com/agracio/edge-js](https://github.com/agracio/edge-js) * Support for .NET Core 1.0.1 - 2.x on Windows/Linux/macOS. The dll is: &lt;TargetFramework&gt;netcoreapp2.0&lt;/TargetFramework&gt;
I'm guessing you've slimmed this down for the post and you are injecting your \` UserManager \`, right? 
My subscriptions are getting generated dynamically.
Have you set the .net core environment flag? You need to set EDGE_USE_CORECLR=1 in order to use .net core. 
Yeah, I have to side with the people that say you're probably using it wrong... &gt; there's no information in there about encoding, for example, or whether those bytes are a list, an array, a Memory Uh, that's not how JSON works. If you want information about encoding you should put it in there or, how it's usually done, put that information in the HTTP headers or whatever container you're putting the JSON in (or provide metadata in another way). Same goes for "bytes are a list, an array, a Memory". JSON doesn't have a **concept** of list, array, "a memory" (whatever that may be). If you want that information included, YOU should include it in the JSON. [This](https://www.json.org/) is **all** JSON is, the rest is up to you (and Json.Net goes a **long** way in helping you out with a lot of stuff but, again, then you have to use it correctly).
So you only know the subscription that is needed when the user tries to access the endpoint? In the worst case, you can implement this manually in each endpoint that needs it. Or create a custom authorization handler that verifies stuff by Request Context and user scopes
That's no-way a Json.net issue. Most likely both machines are configured with a different culture. And most likely you're using `.ToString()` somewhere. Json.Net, by default, [serializes dates](https://www.newtonsoft.com/json/help/html/DatesInJSON.htm) in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format, no matter the culture. So you're 99.9999% likely to use it wrong.
Introducing a new developer late into a project can be a real pain. They would need to learn how you have written and structured your code and try to match. If you are doing things a certain way they need to know why and how. It may end up costing you time. It's no different than hiring a new junior dev, someone has to stop working and get them caught up. It can be a false economy. 
1. dependency versioning conflicts are a thing everywhere. with Json.NET everyone basically binding redirects to the highest versioned dependency and there are typically no problems because the APIs used to do typical serialization/deserialization have been the same for years.. 2. type name handling you don't seem to understand its purpose? why the serializer doesn't need type info but the deserializer does. well its because the serializer already has the type info, or can get it, from the object. because the object its serialize is already instantiated. a simple GetType() will get the runtime type, and this is only done if TypeNameHandling is enabled to include the type information in the Json. The entire reason for including the type name in the Json is if at deserialization time, you don't know the type of object you are deserializing. usually do you, because the endpoint (method) already has parameter type information. which is how ASP.NET does it for you. but at times the data is polymorphic and you need the right type instantiated and populated. that's why the deserializer may need type information. to deserialize T car = JsonConvert.DeserialzeObject&lt;Car&gt;(json) where the json has type information saying its really a ToyotaCar, and the json has that extra ToyotaCar information..etc
&gt; Its not my job to ask the boss why he's not doing it this way or that. Yes it is. He's paying YOU to do YOUR job. YOUR job is to solve problems. If he's trying to cram a square peg in a round hole and you notice this and/or know of a better solution then it's YOUR job to tell him there are better ways. Man I *hate* [Not-My-Job'ers](https://www.reddit.com/r/NotMyJob/). Can you tell?
Terrific news! Good luck to the team.
You could maybe use triggers to cascade the delete as well. A big problem with EF is that people forget about the database. It's awesome for basic CRUD stuff but at the end of the day there's still a database behind it :P
Triggers are harder to debug, and are often forgotten. But definitely an option
And that's why everyone should be using shared projects. DLL hell disappears!
Artists gotta eat
Mmmmh... sounds interesting but for more than one parameter how would you write that ?
Why do you dislike the redesign?
Yeah, you're right. I saw it in a blog post somewhere, threw it in there, and it forced something, at least til this morning. Definitely one of those things that I just tried super late at night and went with cause it seemed to work. I updated the OP as well.
User/pass combos that weren't working worked when I ran it in debug. I have services.Configure&lt;IdentityOptions&gt;(options =&gt; { options.Password.RequireDigit = true; options.Password.RequiredLength = 8; options.Password.RequireNonAlphanumeric = true; }); in my startup.cs, in addition to whatever the defaults are I was testing user/passes such as Testuser1/Testuser1! Testuser2/Testuser2! etc They'd work in debug but not otherwise. Either way, seems to be working properly today, and I updated the OP 
&gt; result.GetType() Microsoft.AspNetCore.Identity.IdentityResult You're right, which makes sense. I edited the OP and replied to some other comments. Either I mistyped the test user/passes 30 times in a row, there's something going on with my system when trying to use awaits without rebooting/reopening VS, or the most likely answer that I'm missing something simple (though I'm at a complete loss what that is).
sorry, yep, added the ctor to the OP
It's == in the if otherwise your assigning it the value 0
Oh right. And if statements are bool. I thought it looked a bit off. Still learning though. Thanks for the heads up
No worries. Pretty sure you would get a build error anyway.
Honestly, just through it in a compiler with the correction and it worked lmao. 
It’s about where Unity was 3 years ago. No shader graph editor, but it does have nested prefabs. No Vuforia/AR support that I can see. Unity also outputs to far more platforms.
Except it has native C# 7 support, uses the latest .net framework (.net core coming soon) and doesn't rely on a c++ application to host the .net scripts. It desperately needs some shader work, for sure, and a few other missing features. But architecture-wise, it is far more competent.
I'd switch to Xenko if they had something similar to Unity's ECS and better shader support. From what I could see, there's bound to be a lot less overhead in some areas.
Yeah i really like the new unity ECS, and i've been prototyping my own game on Xenko using a very similar architecture. I won't get the massive parallel performance boost like in Unity, but the ECS architecture makes it super easy to write reusable code.
(Assuming you're using Windows Forms...) In the designer, double-click on a radio button. It will create a "Check Changed" event handler that gets called when that radio button is either checked or unchecked. In the event handler, you can check whether the Credit Card button is checked, and then set the Enabled property of the credit card controls. Not sure how far into your learning you are, so if there's anything here you don't understand, feel free to come back and ask for more info.
Thank you! I was thinking of abstracting the entities so the team has lots of reusable method calls to the database. Like if there is a Student, then creating a method to get his mark for a test, as an example. I've been reading online that additional abstraction isn't a good idea. Do you have any input on it seeing as you've used Entity Framework before?
Back when I was a technical editor for programming books I caught someone doing that BS. Their "book" was 90% function signatures from the .NET framework.
Look up "assembly binding redirect".
Yep that's the kind of thing I'm talking about. I said 700 books; but that was 15 years ago in Australia. Turns out one guy's now up to 800,000 books.
&gt;EDGE\_USE\_CORECLR No - didn't see anything about that in the edge.js docs.And still cant find about it - where should it be set?Build flag or should be set on runtime? 
IRC IRC IRC
One perspective is to ask them what they think your worth. You've contributed a lot to the company and saved them and made them a lot of money, be upfront with them that you want this job. And you have dedicated yourself to the place. And they should make sure that they are seeing your value. I've dealt with things where companies don't see the value, I've been in positions where I've saved millions for a company for them to then offer 5K in a new position. Tell them that no matter what you want this company to succeed, money isn't everything and it doesn't always need to be immediate. Ie say maybe if they can't offer more money, maybe stock, maybe more benefits. But put it in a way that you have put a lot into this company and will continue to do so. But that since your putting all of your effort into it, you'd like to have some more ownership/return on your investment. And not that it has to be immediate.
You can do it as part of the node server start or set it at runtime before require. [Edge Js ReadMe Hello World](https://github.com/agracio/edge-js#how-to-c-hello-world) You can also set it at runtime as per the quick start sample: [Edge JS QuickStart](https://github.com/agracio/edge-js-quick-start/blob/master/main.js#L8) 
Yes, I’m using Windows forms. I’ll try that out. Thanks 
Thank you, I’ll give that a shot. I’m not by my computer at the moment so I’ll play around with that later on and come back if I have any other issues. Thanks again. 
https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html
Or you could open source it and still make profits off it (while asking the contributors to adhere to a permissive license like MIT). 
Unfortunately this opened another can of worms and even more cryptic errors. Is Edge.js only designed for dll-s that use the "public async Task&lt;object&gt;" approach?
I guess that just enforces the point of not doing it this way ;) Thanks for correcting me :)
Hangfire does support persisting tasks. But I agree, just putting it in another process altogether is best.
The main tip I can think of is make sure you do all your work on branches. And try not to work on the same files as each other to reduce merge conflicts.
Yeah, I have ruled with an iron... rule? as much as possible on this, but we still have legacy stuff, external teams, 3rd party stuff, We struggle on :) 
Yes, I was looking into this today :/
Just use the enabled property of the controls to be true or false when the click event occurs.
No, I get entirely the reasoning behind the type info. I've used this library for years, I know how to bend it to my will: Normally... That was a bit catty, but seriously, we know this library pretty well after n years of working with it, but every now and again we get one of these weird versioning issues where two framework versions will produce slightly different results within the same product version. There are breaking changes in, I think, every version since 6. Funnily enough, it was only at 6 that he promised to "Only make breaking changes in major versions" :) This is rather the point though. Json.net is at one point serialising a shared type and in this case excluding any type information. This is absolutely fine for this type. However, in a separate test it emits type information only for System.String. This also makes sense as a security thing. I can't produce a Jon Skeet style small but functional example of it not working, it relies on the nuances of something very very nuanced indeed. Where we're getting stuck is that both work in their own little worlds within worlds, but where those worlds collide it's going tits up. I'll figure it out, I wasn't in the office today, so tomorrow there will be war :)
No, you missed the point of my example. I gave a hypothetical method that converts json to bytes. It was supposed to be hypothetical, the point was that the output, the "bytes" was, in this example, undocumented. Are they ordered, compressed, part of an arraypool and so on. I understand how json works, I largely understand how json.net works, what I don't understand is this specific problem. 
Oh I love that one :) We had a similar issue with dates a long time ago (We're global, bloody timezones and regional formatting). This one is that it's choosing to label two strings with a type (System.String) in one and not the other. The question here is what constitutes "one" or "the other", because currently it's inconsistent. I'll prod at it tomorrow :)
It's painfully true, partly because of the over use of json. On the plus side it's not fucking XML. Don't get me wrong, json is fine, and we use some of the funky parsing options in Json.NET on stuff we consume from outside the organisation, but this situation I'm battling is its overuse as a defacto and arbitrary format for serialising ANY message between ALL internal services. It's just nuts. 
Removed: Rule 4. 1. Methods are synonymous with "functions" or "routines". Same as [Lua functions](https://www.lua.org/pil/6.html) and [PHP functions.](https://www.w3schools.com/php/php_functions.asp) 2. Void just means a method returns nothing, as opposed to returning a value. This is the same as using just `end` in a Lua function (without the `return`). In PHP, it inferred it simply by whether or not you'd include a `return $variable;` line. In C#, you have to be explicit that you are not returning anything, _or_ you are returning something (and its type). 3. Class is the same a [PHP class](http://php.net/manual/en/language.oop5.php). They define the _type_ of an object. So you can create a `Calculator` _class_, or an `Animal` class, or a `Person` class. Each class can define properties and methods that are related to that class. For example, a `Person` class might have a `Name` property, or a `Talk()` method. 4. Namespaces are a way of grouping related classes, and they're used in conjunction with the [`using` directive.](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-directive). For example, you might define a `Person` class, but when you put it into a namespace like `haytur.MyProject.Person`, then that class can be referred to using the full name `haytur.MyProject.Person`, or you include a `using` directive at the top of your file (`using haytur.MyProject;`) and then in your code file you can just use the short name `Person` on its own. Beyond that, there are learning materials on the sidebar, and you can also check out /r/learncsharp and /r/learnprogramming.
I'm currently working on a capital gains calculator for cryptocurrency traders using .NET Core and deployed using kubernetes. Website: r/https://www.cryptotrader.tax
&gt; Except it has native C# 7 support Coming in the next version of Unity (2018.3)
Will it be able to do async/await, though, among other things?
I actually decided to go for UnityScript but just the fact there isnt really online support and it is used less than C#, it can be a little bit of a problem
What do you mean by " Boring business software development " ?
Depends on the project size. If the project is big enough so that you can split it into independent-ish chunks then define an interface or set of interfaces for each chunk, and make each person implement their interface. Afterwards, mush everything together, test it, document every issue you ran into, and split issue among yourselves to work on. Dependency injection and friends will help greatly, if you guys already learned it. MVP might be a good architecture pattern for WinForms, I feel. If the project is kinda small, I'd personally just pick the most productive person on the team, and let them create a simple, barely functional, app prototype. Afterwards, you can define tasks/stories for each missing or malfunctioning piece of functionality, split the tasks, collaborate as usual in iterations. While the chosen person works on an app prototype, you can handle the bureaucracy: flesh out your user stories, come up with good test cases, predict some caveats or potential issues, research potentially useful technology, and so on. Also, purely personal preference, which a lot of people will disagree with, so take it with a grain of salt. Don't use EF. Try something else, like Dapper. You are learning ADO.NET after all. As far as database migrations go, you can use quick and dirty "drop-recreate-seed" approach, where any change to the data schema would require other collaborators to re-run a SQL script, which drops everything in the database, re-creates new schema, and seeds it with test data. Until your application "goes to production" this is a perfectly viable way of handling data definition changes.
Awesome. Thanks man. Ill try tomorrow when im at my machine.
You're replying to the wrong guy, but boring is just that; opposite of sexy. It may not do anything that turns heads, but it does something that automates work and therefore reduces cost overhead. Creating an electronic enrollment application to remove the cost and problems of paper overhead, filing, legal storage requirements, headcount to do those things, etc, is nothing you'd win a Nobel in mathematics for, or particularly impress anyone who isn't involved directly with the process, but you are solving problems and making someone money, which translates into job security.
No clue. "compute" at least - One would assume the others as well.
I just saw that. Did you download that library or was it already in vs?
https://docs.microsoft.com/en-us/sql/reporting-services/create-deploy-and-manage-mobile-and-paginated-reports?view=sql-server-2014 
Plus 1 for this. Excellent library
Here's the underlying foundation of what you're running into: There are two competing standards for secure file transfer: FTPS (FTP over SSL) and SFTP (SSH File Transfer Protocol). These are fundamentally different, completely incompatible protocols, from how the connection is established to the actual commands that are sent over the wire. The built-in \`FtpWebRequest\` *only supports FTPS*. In order to use an SFTP connection through code, you need to use a third-party library.
Considered a code smell by some, and a fluent API by others.
No. Fluent API is alright when it's something akin the builder pattern, but not like this.
Two choices. 1) Event handling, 2) Data binding. Here's a quick example the Checkbox on the left controls the Textbox on the left, the Checkbox on the right controls the textbox on the right. The left uses events, the right uses databinding. using System; using System.Collections.Generic; using System.ComponentModel; using [System.Data](https://System.Data); using System.Drawing; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows.Forms; namespace WindowsFormsApplication1 { public class Form1 : Form { private System.Windows.Forms.TextBox EventTB; private System.Windows.Forms.TextBox DataboundTB; private System.Windows.Forms.CheckBox eventCB; private System.Windows.Forms.CheckBox databoundCB; public Form1() { InitializeComponent(); EventTB.Enabled = false; this.eventCB.CheckedChanged += new System.EventHandler(this.eventCB\_CheckedChanged); DataboundTB.DataBindings.Add(new Binding("Enabled", databoundCB, "Checked")); } private void eventCB\_CheckedChanged(object sender, EventArgs e) { EventTB.Enabled = ((CheckBox)sender).Checked; } private System.ComponentModel.IContainer components = null; /// &lt;summary&gt; /// Clean up any resources being used. /// &lt;/summary&gt; /// &lt;param name="disposing"&gt;true if managed resources should be disposed; otherwise, false.&lt;/param&gt; protected override void Dispose(bool disposing) { if (disposing &amp;&amp; (components != null)) { components.Dispose(); } base.Dispose(disposing); } \#region Windows Form Designer generated code /// &lt;summary&gt; /// Required method for Designer support - do not modify /// the contents of this method with the code editor. /// &lt;/summary&gt; private void InitializeComponent() { this.EventTB = new System.Windows.Forms.TextBox(); this.DataboundTB = new System.Windows.Forms.TextBox(); this.eventCB = new System.Windows.Forms.CheckBox(); this.databoundCB = new System.Windows.Forms.CheckBox(); this.SuspendLayout(); // // EventTB // this.EventTB.Location = new System.Drawing.Point(73, 192); [this.EventTB.Name](https://this.EventTB.Name) = "EventTB"; this.EventTB.Size = new System.Drawing.Size(100, 20); this.EventTB.TabIndex = 0; // // DataboundTB // this.DataboundTB.Location = new System.Drawing.Point(321, 192); [this.DataboundTB.Name](https://this.DataboundTB.Name) = "DataboundTB"; this.DataboundTB.Size = new System.Drawing.Size(100, 20); this.DataboundTB.TabIndex = 1; // // eventCB // this.eventCB.AutoSize = true; this.eventCB.Location = new System.Drawing.Point(73, 77); [this.eventCB.Name](https://this.eventCB.Name) = "eventCB"; this.eventCB.Size = new System.Drawing.Size(80, 17); this.eventCB.TabIndex = 2; this.eventCB.Text = "checkBox1"; this.eventCB.UseVisualStyleBackColor = true; // // databoundCB // this.databoundCB.AutoSize = true; this.databoundCB.Location = new System.Drawing.Point(321, 77); [this.databoundCB.Name](https://this.databoundCB.Name) = "databoundCB"; this.databoundCB.Size = new System.Drawing.Size(80, 17); this.databoundCB.TabIndex = 3; this.databoundCB.Text = "checkBox1"; this.databoundCB.UseVisualStyleBackColor = true; // // Form1 // this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F); this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font; this.ClientSize = new System.Drawing.Size(657, 338); this.Controls.Add(this.databoundCB); this.Controls.Add(this.eventCB); this.Controls.Add(this.DataboundTB); this.Controls.Add(this.EventTB); [this.Name](https://this.Name) = "Form1"; this.Text = "Form1"; this.ResumeLayout(false); this.PerformLayout(); } \#endregion } }
Thanks for all your help!
Bad choice, since we are sun setting the support for it. It was announced a year ago, and will happen in the near future. The effect will be that your code won’t run anymore. It’s not too late to switch over 🙂
Persisting tasks doesn't mean your task can be killed at any moment without leaving a mess of whatever it was working on. Usually you have to very carefully code your process to be able to handle unexpected shutdowns gracefully.
I just pull my data into a model (generally with EF and linq) then just do report.SetDataSource(collection)
I do believe it comes as a nuget package - but from the looks of it, it’s now called ssh.net as others are mentioning, also available on nuget. [ssh.net](https://www.nuget.org/packages/SSH.NET/) 
The sooner you dump crystal the better. I wrote my own reporting library and creating reports is so easy now. It was a bit of investment up front (not as much as uoud think) but overall its been a huge time saver. Getting on a bus but more details if you ask.
You can already do async / await, it's just not recommended. There is to much over-head to tasks for a game engine to use efficiently. They are implementing a new custom awaiter specifically to address this issue - but there hasn't been any new news about it.
Eh, I would say JavaScript has objects. Classes in JavaScript define a structure for an object, but instantiations of those classes are not bound to that structure. You can create an instance of a class, but then replace any method on that object, or add new methods.
Just because it's mutable doesn't make it not a class. You're incorrect with your terminology.
My company uses Stimusoft. I picked it because it has a html5 report designer.
I will be honest, reporting services is very slow and innefective on large report needs, when we talk 1M. Records forward
It's not the same concept as a class in statically typed object-oriented languages. It's called a class, but it does not function like a class does in C#, Java or C++.
That hasn't been my experience. Have you profiled the reports to see where the time is being spent? I wouldn't be surprised if the issue is in your queries rather than in the report designer.
Not a reporting service per say, but if you just need to generate pdfs this could work. I wrote a website for a private company that originally had me creating xlsx quotes for services. Right before the deadline they switched it up and wanted pdfs, so I used PdfSharp (I believe) to convert an xlsx to a pdf. You could format the report as csv or xlsx including images and whatnot and convert to pdf. Needless to say, this isnt a very good solution, but if you want a free alternative and don't generate a lot of reports this will work.
it looks really complicated or is it just me D:? btw it is pay right?
They stole most of their ideas from Crystal Reports (and other similar tools). If you know Crystal, you'd pick up SSRS really quickly. Honestly, most report-building tools are pretty much the same. There's only so many ways you can do this stuff. And as far as I know it's included with most versions of SQL Server. I don't know what the licensing cost is for distribution, but it should be included in any SQL Server distribution license. I'm no expert on the tool; I've mostly used Crystal. But it's an alternative for you to look into.
&gt;Stimusoft is it pay?
Yeah I wish it was free. It's been a part of our product for 5 years now.
Check `result.Errors` when it isn't successful; might give insight?
That's a profiling JIT I believe it's called. Yes I think it does do some but not to the extent that the JVM does, which is unfortunate, as C# *should* have better performance if it were JITted the same way (because, for example, methods are non-virtual by default, and of course, monomorphised generics)
Also [WinSCP .NET assemblies](https://winscp.net/eng/downloads.php)
[wkhtmltopdf](https://wkhtmltopdf.org/) is a free alternative, though not as good as prince.
I have no idea what you are trying to say. Can you post the code and the error message.
wkhtmltopdf is about as good as PhantomJs's PDF ability. It's good enough for screen capture but is hugely inadiquate if you want control over headers, footers, page margins, paper size, and orientation not to mention loads of other things that come in handy when trying to produce appealing paper documents.
I use it because, on a well designed database, it allows me to explore relationships without having to write joins or anything if the sorts. So much faster!
That optimization is on the .NET wish list, but I don't recall where it falls on their roadmap.
Used this last week. It's amazing
You could and **should** use field-backed properties and in this case you can control what values get assigned to the backing fields in the respective `set` statements: private string _height; public string Height { get =&gt; _height; set =&gt; _height = value ?? “Unknown”; } However if the string “Unknown” is, typically a UI concerned so it should be handled as close to the UI as possible, that is whenever you’re displaying the `Height` instead of where you’re setting it. For example: Console.WriteLine( ”Height: {0}”, string.IsNullOrWhitespace(person.Height) ? “unknown” : person.Height) This type of approach allows you better control over how you display the values and doesn’t not tie your object to magic strings (see Magic Values Anti-pattern).
Windows Service is probably your best bet, but as far as communication you have a lot of options. Named pipes, TCP/sockets, HttpListener (just don't use IIS), etc.
Or, after a second thought, maybe someone has already created a panel like the one you need. Like this one. https://www.newventuresoftware.com/blog/relative-position-panel
I started learning Unity when I was 14 (~3 years ago) and it was by far the easiest way to learn programming for me, using C#. Keep in mind, Unity currently uses an old verion of C#/.NET framework, and even if you know can make pretty decent games in Unity using C#, you'll need to make a website or two in ASP.NET Core and Entity Framework Core to learn key C# concepts. 
If you don't mind transforming it into a CSV file, then DATA LOAD INFILE is probably the fastest way https://dev.mysql.com/doc/refman/8.0/en/load-data.html
If there is 1 thing Microsoft is good at, it's documentation. That and VS
Can confirm, work for healthcare company that uses the MS stack
Does it Unreal Engine with C#? 
Is this feature available in. NET Framework? 
- Imagine a computer with two CPUs, or with one CPU that has two cores (these two situations are identical from a programmer's point of view) - Imagine that each CPU is running one program. That means you can have two programs running together - But what if the user tries run more than two programs? The operating system is now in charge of telling each CPU which program to run. And it will very regularly tell the CPU to stop running this program, and start running that program instead, so that every program gets a good chance to run. That is multi-processing. But we haven't started on threads yet - Everything we've discussed so far has been about different programs. - But what if a singe program wants to do two different things at once - perhaps it wants to print a document, and still allow user input while the document is printing? - Well, that's what a **thread** is - one thread will do the printing, while the other will be updating the document - Again, the operating system decided which threads run on which CPU, and the operating system is in charge of making sure every thread gets to run at the same time. This is all quite straightforward - but actually, writing programs that use more than one thread can get complicated very quickly. The problems arise because each thread can be stopped at any time. So perhaps a thread is doing a calculation - then, half way through the calculation, it gets stopped, and another thread starts. The new thread changes one of the variables used in the calculation. When the original thread re-starts, it's now looking at different values to what it had at the start of the calculation, and that might well mess up the whole of the calculation. **Thread-safe** means that something is safe to use in a program that has more than one thread, because it has safeguards in place to prevent these problems. Of course, this can happen even without threads stopping and starting, because two threads can run simultaneously on two different CPUs or two different cores. And it might be worth throwing in here that a lot of modern programming is asynchronous (more than one thing happening at once) but not multi-threaded. Take our printing example - most of the time taken to print a document is actually spent waiting for the printer. So modern programming tends to use just one thread, and says that when the printer is busy, the **task** that's doing the printing will give way, and the thread that was running that task can now run another task.
Yes all your surface apis need to have the signature `public async Task&lt;object&gt; MyMethod(dynamic input)`. 
Yeah sorry for not replying to the wrong person,i was pretty tired. Yeah i see now thanks.
I am thinking to actually first learn the "Native??" C#(what i mean by that is the normal C#, not the C# used for Unity) and then actually start learning the C# for Unity. I think they are a little bit different, this is why i might go for the basic C# and then.
I haven't started yet. But for sure i will go with C#.
Learning Unity is a bit more about plain simple logic while "plain" C# frameworks are about knowing what to do/use. I think Unity is a great starting point to build basic logical skills required for programming. 
Woudn't be better if i know the C#'s basics? And after i know a decent amount of the basics to start with Unity. I feel like if i start straight with Unity i will have to watch in YT for everything and it will be really hard.
It is a rats nest of a topic to talk about, but most benchmarks show C# (with .NET Core) having better performance than standard Java now, so I'd be interested to see what kind of difference a strong profiling JIT would make.
https://joshclose.github.io/CsvHelper/
No and never will be. Why would it?
Why wouldn't it?
Long term roadmap is to replace .NET Framework with .NET Core. Hence why the major feature on .NET Core 3.0's roadmap is to support Windows Forms and WPF on Windows.
Thanks guys!!! You kick ass. I was able to program this perfectibility with [SSH.net](https://SSH.net). Love this sub!!!!
thank you I was able to do this!
Yes, just got it!! its awesome!
Not a fan of auto mapper
Wow, really? I keep hearing about how hard it would be to do WPF in core because it relies so heavily on DirectX. Where can I see the roadmap?
Without looking closely at the problem, just be aware floats are very wierd. They are not 100% accurate. For example on my system, 1/3.0f = 0.333333343 Typically with floats you don't check for equals. You check a range. For example instead of `if (1/3.0f == 0.333333333333333) {` `// wont happen` `}` you check for a range: `if (1/3.0f &gt;= 0.3333 &amp;&amp; 1/3.0f &lt;= 0.3334) {` `// close enough` `}`
There's an entire website dedicated to this problem: https://floating-point-gui.de/
The answer is very, very easy: Because the If statement gets evaluated as true. Display or check the values with a debugging tool you most likely miss-calculated something somewhere. The problem is ALWAYS with the data. I can see that you are trying to check floats with equal operator: never do that. Floats are a tricky thing in software development: you could never know when they are actually the same. Every number in the memory get stored as a binary number. With whole numbers (like ints) it isn't a problem. However, many decimal fractions cannot be write down as the whole fraction in binary. For example: the decimal 0.2 in binary is an infinite fraction. 0.2 + 0.2 != 0.4 Well, sometimes. Sometimes it will be true. The more operation you do with float numbers the less accurate they become. If you want to check two float number always do a "bigger" or "smaller" compassion. If you want to check if they are "equal" then check if their difference is smaller than your accepted value. Try to write a small application, where you add 0.2 to your number, and display its value. From time to time, you will get something like this: 0.4000000000001 - and when this happens your float equality check will fall. And if you use the above number in just one multiplication you will NEVER get a whole number again. If you really really need to do an equality check, do this way: Math.abs(float0 - float1) &lt; sigma. If the difference is smaller than sigma (it is up to your application), you can treat them as equal. However, please note: the above still can cause issues if you do a LOT of operation with your float values. Float values should be normalized from time to time if you want to do an equality check.
The first version produces a more useful stack trace. If `GetSomeStringAsync` throws an exception, `GetSomeText` will not appear in the stack trace in the second example.
Removed: Rule 3, Rule 4.
I just make some small programs whenever I have time, so I haven't really worked in good work ethics. The divisions are there to only have 1 decimal place. What data type should I use to avoid these floating point errors or whatever it's called? 
What data type should I use instead? Or is there a better way to compare floats?
Thanks! Is there another data type that does not have these small fraction errors?
OriginalFoo does not implement the IDestFoo interface. . . 
‘long’ definitely. BTW some time formats have the date part as the integer, and time as the decimals.
Thanks, this works great!
&gt; I keep hearing about how hard it would be to do WPF in core because it relies so heavily on DirectX. The hard part would be to make WPF run on Linux or macOS. But that's not the plan, at least not for .Net Core 3.0.
The [guidance from Stephen Cleary](https://blog.stephencleary.com/2016/12/eliding-async-await.html) is *not* to elide async/await as it could cause sneaky issues.
And if you refactor this as a method you won't have to write this down again and again :)
&gt; It is less efficient, however. Yeah, but the efficiency difference is negligible.
Actually, he specifies in his guidelines and examples that straight pass-through methods are acceptable situations to omit the async/await. &gt; **Recommended Guidelines** &gt; I suggest following these guidelines: &gt; 1. Do not elide by default. Use the async and await for natural, easy-to-read code. &gt; 2. Do consider eliding when the method is just a passthrough or overload. &gt; &gt; *Examples* &gt; &gt; // Simple passthrough to next layer: elide. &gt; Task&lt;string&gt; PassthroughAsync(int x) =&gt; _service.PassthroughAsync(x);
**Do not elide by default.** That seems like the overarching theme of the article to me, and #2 seems like an exceptional case. 
No, but there are other methods like [ProfileOptimization](https://msdn.microsoft.com/en-us/library/system.runtime.profileoptimization(v=vs.110\).aspx).
What is a native int, and how does it differ from an int32, an int64, or an IntPtr? I can't find anything that usefully describes native ints, other that the fact that they seem to be a feature of the IL type system for some reason that might have something to do with working with pointers. I'm confused because, ultimately, everything is just an integer that's either signed or unsigned, and is some specific length.
A native int is the same size as the word size of the current application. This is the same Same as `IntPtr`
You will need 2 apps - the service (id suggesting using TopShelf from nuget to make the service stupidly easy to implement), and an app for the UI You will then need to do some kind of ipc (inter process communication) between the 2 so they can communicate. Off the top of my head, methods for ipc include 1. Using named pipes 2. Using TCP sockets 3. Using the filesystem (ie, service dumps file somewhere, app finds it and responds) however, it seems to me that if its got a UI element and must be run all the time anyway, you dont really need the service
You may need two executables: * Service that would run in the background as a SYSTEM user * UI app that would connect to that background service. It could minimize to the tray and start when user logs in. 
TL;DR: Native integers are what you get when `int` and `IntPtr` have a baby. You'll usually know it when you need them. ------------ A native integer is the same size as the word size of the process, similar to `IntPtr`. (IE: It is 32-bits or 64-bits depending on how/where the application is built/started.) The important difference between an `IntPtr` and a native integer is that a native integer is slightly more user-friendly to work with. It provides all the operators you'd expect and implicit conversions to/from other numeric types. EG: `IntPtr x = 100;` doesn't work, but `nint x = 100;` does. It's definitely one of those things where you'll know it if you need it, and you usually don't. The only times you *really* need it are certain interop scenarios (EG: anything involving `size_t`) and some performance-related scenarios. [There is a discussion about adding support for native integers to C# proper on the csharplang repo](https://github.com/dotnet/csharplang/issues/435). Additionally, [the LDM notes on native integers](https://github.com/dotnet/csharplang/blob/master/meetings/2017/LDM-2017-05-26.md#native-ints) are a good place to read more about the feature.
for comparison of floats,doubles, and decimals, i cast to a truncated string and compare the string. Something like (float).ToString("#.00") == (float).ToString("#.00").
Yes, but #2 applies to the OP's request.
I've been working on a .NET library that calculates location based solar/lunar data and converts coordinate formats. I originally put it up in case anyone needed it as I had used it for another project. Since putting it up I've gotten a lot of feedback/help and the library has grown (to my surprise). It's been used in power savings applications, flight planning tools, WX station grouping projects and astronomical observation projects. The goal was to make a mutable object that could handle conversions and calculations with minimal code. For example. When a property changes, everything updates (conversions, celestial times). For example: //Seattle Coordinates on 5-Jun-2018 @ 1010 (UTC) Coordinate c = new Coordinate(47.6062, -122.3321, new DateTime(2018,6,5,10,10,0)); Now if I need to get the Moon Rise, or DMS or UTM version at that location. Console.WriteLine(c.CelestialInfo.MoonRise); Console.WriteLine(c); Console.WriteLine(c.UTM); That's it! TL:DR - Don't spend hours learning trig math if you need to calculate location based sun/moon times or convert coordinate formats in .NET [Project Site](https://github.com/Tronald/CoordinateSharp) [Website](https://coordinatesharp.com/) \- for capabilities demo [Nuget Package](https://www.nuget.org/packages/CoordinateSharp)
Wouldnt the first method just return a string object? I mean it's possible that it could still return a Task but the creator of the method would kind of have to go out of their way to write more obtuse code. The second method would have to return a Task&lt;Task&lt;string&gt;&gt;. 
Does it also seem to you like the method in the OP meets the criteria for the exceptional case?
Basically: "Double for accuracy, float for speed."
Seconded. WinSCP (both the EXE and the API) is a must-have tool for the toolbox.
Thanks! I figured that I would need a service to ensure that the app runs to continuously check a property in WMI, but then the UI is only presented when that property is detected. Am I thinking about it incorrectly?
Thanks for the reply! I was imagining that the background service would simply call the second exe when needed. Am I thinking about it incorrectly?
Thanks a lot! I made a game based on money using floats... I quickly learnt the it was a bad idea. 
Yes, but when arguing blogdoctrine, it's important to ignore that.
I’m mainly a Java programmer, so the usual convention in Java to measure duration during runtime is to store and compare milliseconds. But I suppose in C#/.NET you’d either DataTime objects or ticks (as long/Int64). For general education it could be useful to know about [UNIX time](https://en.m.wikipedia.org/wiki/Unix_time), although it isn’t used as such in .NET.
Give me a useful stack trace over a little extra performance any day.
&gt;&gt; It is less efficient, however. &gt; &gt;Yeah, but the efficiency difference is negligible. Exactly. Measurable in milliseconds with 1000's of calls on half-descent hardware. Not even worth worrying about unless it's *Amazon* (etc) *level* of transactions-per-second.
Yeah, now that I look at OP's code again it does look like #2 applies.
Yeah, now that I look at OP's code again it does look like #2 applies.
What if no user is logged in? Services can and often are set to run at windows boot. I didn't think it was possible to kick off a GUI app in a different users session, but this blog post seems to disagree with me https://blogs.msdn.microsoft.com/winsdk/2009/07/14/launching-an-interactive-process-from-windows-service-in-windows-vista-and-later/
The only rule that has no exceptions is this one. :)
If `GetSomeStringAsync` was to do some IO (perhaps grabbing the `string` from a db or fileSystem) then the second example will block a thread while performing the IO - since you aren't asking to perform that specific piece `async`. Otherwise, it's just a matter of being consistent most likely?
There is logic in the code that ensures it only runs if a user is logged on.
.NET Core and .NET Framework are implementations of the .NET Standard and are mostly the same, especially at a beginner level. You shouldn't really have problems writing and executing the exact same lines of code (unless the course includes Windows-only frameworks like WPF, WinForms, EF6 and the like). New features (usually performance related) are now implemented in .NET Core first, then added to the .NET Standard, after which .NET Framework and Mono take their time to implement and support it. However, Visual Studio is miles ahead of alternatives (for *learning purposes*), because it does a lot of things for you that other IDEs simply don't. I tried VS Code and I prefer VS. Maybe it has changed since then, but I'm on Windows (working on small projects), so VS seems like a no brainer. You might want to try [JetBrains Rider](https://www.jetbrains.com/rider/) - it is supposed to be more of an IDE than a text editor - but it isn't free for most people so I just prefer using VS. I believe that JetBrains offers free student licenses like Microsoft did for VS 2012/13 but I'm not sure if Rider is a part of that program. 
The second example isn't blocking a thread...
Thanks for the info, those are some great examples. You're right, some of these values really are treated just like integers (the thread affinity mask, for example), but Windows chose to use a type that changes size depending on the address width of the platform. Thus, native-sized integers would be a great way of talking to these APIs. &gt; &gt; Part of me is wondering if people are trying to perform pinvoke, but with a C++ way of thinking, instead of thinking like C# does, leading them to think they need nints when they might not. &gt; &gt; Not sure what you mean by "a C++ way of thinking". I was just speculating; there are a lot of different ways of writing pinvoke code, and I've seen some pretty bad takes - in several cases, it was written by folks with an extensive Win32 and C++ background, who decided to use patterns commonly found in those systems, instead of embracing the conventions, patterns, and facilities in C# / .Net. Not using SafeHandle, for instance. In this case, my remark does not apply. 
Yeah, it seems a bit like that! ... Manifestation of the Fast, Cheap, Good... pick two...thingy...
I think I shall choose, Cheap &amp; Good :) Fast can be slow...
I said it could, depends what that method is doing under the covers (IO vs CPU basically)
In the second example GetSomeText calls async method GetSomeStringAsync and that one almost immediately returns unfinished task. Then that task is returned to the caller of GetSomeText. Where's blocking the thread?
You're right -sorry ;) I was thinking something like this for some reason: `public async Task&lt;string&gt; GetSomeText(int id)` `{` `return _service.GetSomeStringAsync(id);` `}` But you're correct, the caller will get a Task that can be awaited. Thanks for correcting me!
If it's unit tests, this is usually done with fakes/mocks. If you mean actually doing DI with integration tests, that's a different subject. Going off of actual unit tests, here's Moq, the most used mocking framework: [https://github.com/moq/moq4](https://github.com/moq/moq4) and it's pretty east to learn and use. If not, do you have any specific questions about it?
You are not convincing me that a regular GUI app isn't the way forward :)
For me this is about consistency the same reason you had to come here and ask is the same reason I don’t use method #2 even while perfectly valid. 
I think it's called the iron triangle. And that is pretty much what is happening. You could do it faster but quality may suffer. 
Are your properties the same name between the classes? If not, then you need to tell them which property maps to which.
You can use [Task.Run](https://Task.Run) to force the async code to execute on a background threadpool thread instead of the UI thread. You could also do: await Task.Yield().ConfigureAwait(false). 
its not the fastest loading page ever, but considering what it is, damn is this thing aweosome or not.
Task.run will create a new thread. This adds overhead and should be reserved for work you are certain is highly CPU bound in an otherwise async stack. Most of the details are a google search away if you want more lengthy answers. ex. https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html 
For one-liner passthrough methods like this, the difference in the stack trace does not matter much, and may even be clearer. If an exception is passed through the method, there is only one line it could have fun from. Some more from \[Stephen Cleary\]([https://blog.stephencleary.com/2016/12/eliding-async-await.html](https://blog.stephencleary.com/2016/12/eliding-async-await.html)). \&gt; Do *consider* eliding when the method is** jus**t a passthrough or overload. Example: public async Task FooAsync() { await OneAsync(); } public async Task OneAsync() { await TwoAsync(); } public async Task TwoAsync() { await ThreeAsync(); } public async Task ThreeAsync() { throw new Exception("From ThreeAsync"); await Task.Delay(1000); } public Task Foo() { return One(); } public Task One() { return Two(); } public Task Two() { return Three(); } public Task Three() { throw new Exception("From Three"); return Task.Delay(1000); } try { Console.WriteLine("FOO ASYNC"); await FooAsync(); } catch(Exception e) { Console.WriteLine(e.StackTrace); } try { Console.WriteLine("FOO"); await Foo(); } catch(Exception e) { Console.WriteLine(e.StackTrace); } Output: CS0162: Unreachable code detected CS0162: Unreachable code detected FOO ASYNC at Program.&lt;ThreeAsync&gt;d__4.MoveNext() in :line 15 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter.GetResult() at Program.&lt;TwoAsync&gt;d__3.MoveNext() in :line 11 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter.GetResult() at Program.&lt;OneAsync&gt;d__2.MoveNext() in :line 7 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter.GetResult() at Program.&lt;FooAsync&gt;d__1.MoveNext() in :line 3 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter.GetResult() at Program.&lt;&lt;Initialize&gt;&gt;d__0.MoveNext() in :line 44 FOO at Program.Three() in :line 36 at Program.Two() in :line 31 at Program.One() in :line 26 at Program.Foo() in :line 21 at Program.&lt;&lt;Initialize&gt;&gt;d__0.MoveNext() in :line 54
&gt; Page unresponsive Doesn't load at all.
Aside from the free version of SSRS you could just take the XML generated from the data and apply an XSLT template to the data to generate the report. I actually do this for emails as it makes it really easy to configure with out writing code.
it took 1 minute for me, this is no ordinary webpage.
`Task.Run` around an async method allows the async method to be tied to the thread context (no other part of the thread can use the context because it's blocked) of the thread pulled from a thread pool (it's pointless in a single-threaded application, btw) to handle the async call. This is _usually_ only done when a developer is forced to perform async work synchronously. The pattern is called "sync over async" and should generally be avoided. However, when this cannot be avoided, `Task.Run` is the [safest way to block a thread doing async work](https://stackoverflow.com/questions/44814404/in-the-context-of-asp-net-why-doesnt-task-run-result-deadlock-when-callin). The second example is the standard was of calling async methods and should be used through an application.
Someday maybe it wouldn't matter which of those you wrote... https://github.com/dotnet/roslyn/issues/1981 https://github.com/dotnet/roslyn/issues/10449 and https://github.com/dotnet/roslyn/issues/15491
Not worth the wait then.
This is an extremely magical and extraordinary comment. Not only you recognized you were wrong, you also apologized. Very rare on the internet. Are you Canadian?
Interesting - I have never seen `Task.Yield`. It seems `Task.Yield` is used to force a method to complete asynchronously, which would allow you to hold onto a Task to essentially "defer" that execution until a later time; this seems useful only if you're trying to avoid blocking a thread at certain points when synchronous work is required. When is this practical?
&gt;Have you profiled the reports to see where the time is being spent? [https://xkcd.com/303/](Maybe...)
What I still struggle with is that somewhere down the chain someone has to create a Task in order for the async/await pattern to work, or am I wrong? So in DoSomethingAsync it is either returning a Task&lt;T&gt; that it has spun up, or it is itself awaiting another async method. For that additional async method the same principle applies. Am I wrong, or is there some way of of using async await where you don't eventually spin up a Task for some long running action? 
You're not wrong, Walter, you're just an asshole.
I'm not quite sure what your question is. Yes, `DoSomethingAsync` must return a `Task` (or another awaitable type like `ValueTask`) if it can be awaited. That doesn't mean that the method is 100% async, however. For example, a somewhat common pitfall: async Task&lt;string&gt; GetDataAsync() { using (var reader = new StreamReader(@"\\SlowNetworkShare\data.txt")) return reader.ReadToEndAsync(); } `ReadToEndAsync` is async and won't block, but before that the `StreamReader` constructor is executed synchronously and can block the caller of `GetDataAsync()` if opening the file takes a long time for whatever reason. And of course it's also possible to write methods that return a task but aren't at all async: Task Foo() { Thread.Sleep(2000); return Task.FromResult(true); } 
Ok thanks. So my misunderstanding is that a Task necessarily occurs on another thread, when it might not? I think my problem is that I misunderstand Task, and how Task.Run differs.
Yes, they are. Sorry, I messed up the example.
I don't think it has to. It's creating a new DestFoo which does implement the interface.
I assumed it has to do with either the list of interface? Wouldn't it automatically try to convert the object if they're different types?
Thanks. I will read up on it more. 
I’m not talking about the lists, I’m talking about the properties in originalfoo and Idestfoo. 
No response in Chrome in Android?
It's very easy to forget to manually map a new property if it's done by hand. At least with auto mapper if the property names match it will just work
Your example does not evoke the issue because you're throwing the exceptions before the awaits, so they're synchronous and you get a normal stack trace. This is the issue: public Task Foo() { return One(); } public Task One() { return Two(); } public Task Two() { return ThreeAsync(); } public async Task ThreeAsync() { await Task.Delay(1000); throw new Exception("From Three"); } Resulting stack trace: at Program.&lt;ThreeAsync&gt;d__7.MoveNext() in :line 37 --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter.GetResult() at Program.&lt;&lt;Initialize&gt;&gt;d__0.MoveNext() in :line 54 If `ThreeAsync()` is called from more than one location, you have no clue where the error came from.
&gt;It seems to me that Task.Run() is just redundant here and both pieces have identical behavior. Am I wrong? The behavior _can_ be the same, but doesn't have to be. `await Task.Run(() =&gt; _service.DoSomethingAsync());` will run the task on a separate thread (note that it does _not_ follow that if you do `Task.Run` ten times, you end up with ten threads, because the TPL will use pooling to avoid creating too much overhead from thread creation). `await _service.DoSomethingAsync();` _might_ internally run on a separate thread (after all, `DoSomethingAsync` _itself_ could call `Task.Run`!), or it might not. As a result, the authors may have been correct to use different calls depending on the method. As a basic rule of thumb, * if the work being performed is primarily CPU-bound, use Task.Run. These days, CPUs have multiple cores, so you'll be able to scale it that way. * but if it's I/O-bound (including networking), don't do that. All adding threads will do is add overhead. [Maybe this video helps](https://channel9.msdn.com/Series/Three-Essential-Tips-for-Async/Tip-2-Distinguish-CPU-Bound-work-from-IO-bound-work)
&gt; When is this practical? I had a long example written up, but this is probably better: https://stackoverflow.com/questions/22645024/when-would-i-use-task-yield TL;DR: An `async` method runs *synchronously* up to the first `await`. If you have long synchronous work to do before calling out to your first real async await, putting `await Task.Yield()` before it will avoid blocking callers while you do your synchronous stuff. You could do the same thing with `await Task.FromResult(0)`, but `Task.Yield()` is probably optimized for the scenario.
&gt; Task.run will create a new thread. Nitpick: Will pull a thread off the ThreadPool.
Right, should've said "run on another thread."
My understanding is Task.Run makes the whole method run asynchronously, instead of just the awaited parts.
Thanks for the reply and breaking it down, I guess the question is what exactly is one thread when it's working? Like in the example of having only 1 processor with just a singular core. Is a method call one thread and every calculation in it? if we "await" that will it just know where we left off last while it works on a different method call?
I started C# a few months ago, so I'm still learning. My personal side project that I'm working on/learning with is a .NET Core web-based ERP suite aimed towards small businesses for managing inventory, payroll, ordering, lead/sales management, warehousing, logistics, etc. My inspiration for this project is SAP software, which works really well (except it's insanely expensive and super complicated to use). I'd like to make something with the same functionality, but cheap/free for small businesses. Eventually I plan to open source it once I have a functional beta, and hopefully get some contributors to help fix my inevitable bugs and mistakes (since I'm still a beginner). Long term, I hope to be able to add physical hardware integration like barcode scanners and cash registers, and maybe even scan guns like they have at department stores. Additionally, I'd like the program to have payment and shipping integration with services like PayPal/Square and UPS/USPS/FedEx. It's a HUGE undertaking, especially for one person (and a beginner, at that), but I just keep telling myself "It's just data. Get it into the database, show it back to the user, and that's it", and that thought process has worked pretty well so far. 
it is a heavy weight web assemply, open on desktop and preferably on mozila or ms edge.
Because the main project is made on unity, and I already have the functional c++ code but only works with images readed from a file, not bytes directly from texture buffer (insert facepalm here)
This
Uno Platform developer here, this is due to multiple factors: \- WebAssembly support is pretty new in browsers there are still glitches, Chrome is slower ([https://bugs.chromium.org/p/v8/issues/detail?id=7838#c7](https://bugs.chromium.org/p/v8/issues/detail?id=7838#c7)) than others and make sure you run Chrome 68, Firefox is the fastest. \- Mono is running in the interpreted mode which is about 50x slower ([https://twitter.com/jlaban/status/1025221288103694336](https://twitter.com/jlaban/status/1025221288103694336)) than it should be when AOT will be available ([https://github.com/mono/mono/issues/9825](https://github.com/mono/mono/issues/9825)). \- The CDN may not have been primed in your region, try a reload once the first one is done, your local cache will kick-in. Also, you can test the performance of your browser using this app: [http://raytracerbenchmark-wasm.platform.uno/](http://raytracerbenchmark-wasm.platform.uno/)
Here are the wonderful coders who have posted projects or provided explanations that have helped me - the code below is customized by me but not created by me - full disclosure: dmihailescu [https://www.codeproject.com/Articles/21492/Monitoring-desktop-windows-from-a-Windows-service](https://www.codeproject.com/Articles/21492/Monitoring-desktop-windows-from-a-Windows-service) Pero Matić [https://www.codeproject.com/Articles/35773/Subverting-Vista-UAC-in-Both-32-and-64-bit-Archite](https://www.codeproject.com/Articles/35773/Subverting-Vista-UAC-in-Both-32-and-64-bit-Archite) I am working on kind of the same thing at the moment. You need your service to allow interaction with the desktop. Then you need to get the process token of something running as the logged on user, The extract the user token from that process. Duplicate the taken, then impersonate it by creating an impersonation context. Then, as the impersonated user, you need to open a WinSta instance, and from that, open the user;s desktop. THEN you can do things on\\with the user's desktop normally nor allowed, like showing dialogs or running apps interactively. So, find a process of something running as the user - Explorer can work, so can WinLogon: Process\[\] plst = Process.GetProcessesByName("explorer"); while (plst.Length == 0) { Thread.Sleep(Convert.ToInt32(\_interval.TotalMilliseconds)); plst = Process.GetProcessesByName("explorer"); } Get that process' token: int openProcessTokenResult = NativeMethods.OpenProcessToken(plst\[0\].Handle, TokenPrivilege.TOKEN\_ALL\_ACCESS, ref hToken); Get the user token from the process token: bool duplicateTokenExResult = NativeMethods.DuplicateTokenEx(hToken, Constants.GENERIC\_ALL\_ACCESS, ref securityAttributes, (int)SECURITY\_IMPERSONATION\_LEVEL.SecurityIdentification, (int)TOKEN\_TYPE.TokenPrimary, ref \_userTokenHandle); If that is successful, before you do impersonation, get some basic handles: \_hSaveWinSta = NativeMethods.GetProcessWindowStation(); \_hSaveDesktop = NativeMethods.GetThreadDesktop(NativeMethods.GetCurrentThreadId()); Now create your impersonation context: windowsIdentity = new WindowsIdentity(\_userTokenHandle); windowsImpersonationContext = windowsIdentity.Impersonate(); using (windowsImpersonationContext) { \_hWinSta = NativeMethods.OpenWindowStation("WinSta0", false, Constants.MAXIMUM\_ALLOWED); NativeMethods.SetProcessWindowStation(\_hWinSta); //int DF\_ALLOWOTHERACCOUNTHOOK = 0x0001; \_hDesktop = NativeMethods.OpenDesktop("Default", 0, true, Constants.MAXIMUM\_ALLOWED); bool setThreadDesktopResult = false; if (\_hDesktop == [IntPtr.Zero](https://IntPtr.Zero)) { NativeMethods.SetProcessWindowStation(\_hSaveWinSta); NativeMethods.CloseWindowStation(\_hWinSta); } else { setThreadDesktopResult = NativeMethods.SetThreadDesktop(\_hDesktop); } } Then, when done, become yourself again: NativeMethods.RevertToSelf(); You can also use many of the api calls in\\for WTS - look to the 2nd project I posted above for that. I wish you the best success! :)
I've used it in WPF with two-way bindings. I had a UI element that would update the view model with a new value, where the view model inspects the value and tweaks it, with the expectation was the UI element receives the tweak and updates. That didn't work (I suspect the UI element ignores change notifications when the UI itself is changing it). Workaround was to `await Task.Yield()` and then tweak the value. The await returns to the UI element and it finishes updating the view model, then the task immediately gets scheduled and the view model updates the UI element with the tweaked value. 
Ah, so if they were the same, this should map?
I get a blue page with a centered icon and then Firefox crashes if I open dev tools and play around.
Interesting, thanks for the example.
Also, check this sample out: [https://code.msdn.microsoft.com/CSCreateProcessAsUserFromSe-b682134e](https://code.msdn.microsoft.com/CSCreateProcessAsUserFromSe-b682134e) You definitely CAN do interactive stuff from a service, you just need to make sure a user actually IS logged on (if one is not, there IS no Desktop (handle 0) or GUI on which you can show any dialogs.
So save the texture buffer as an image? 
It's slow because: * The size of the page is 16.38MB. Abnormally high for any web app. * The host server is not using HTTP/2 * The host server does not have CDN set up properly (no excuse for static content). * The page loading requires a whopping 118 requests in total. 
My guess would be the original author wasn't going for sympathy. They just typed until the red squiggles were gone. Or maybe it was originally synchronous and they refactored just by slapping async on the signatures. 
Fair points for the first load! A few things: \- This app contains lots of non-visible code samples and those were not linked out; this pushes up the binaries size. \- It is not served as https yet (still setting this up) and HTTP/2 may not be enabled as a result \- It's behind an azure CDN, (azureedge.net) so I'm not sure how you see that it's not setup properly \- The number of binaries is large, because the app is many nuget dependencies (e.g. [http://raytracerbenchmark-wasm.platform.uno/](http://raytracerbenchmark-wasm.platform.uno/) "only" downloads 55 files). All this is temporary though, as the AOT mode of the mono runtime will change this, though how is not yet known. I'm using the "app" term and not web app because at this size, it's more of an app than a webapp. Wasm is probably going to blur the definition of what an (web)app is. Thanks for the observations!
uchar is not a C++ type.
So I assume you are calling the C++-methods/functions from C# via a [DllImport](https://msdn.microsoft.com/en-us/library/system.runtime.interopservices.dllimportattribute(v=vs.110).aspx#Examples)? If so, then a solution might by \`Marshal.Copy\` or alternatively using \`unsafe\`-keyword, but with your description I'm not sure what you're trying to archive.
HA! As a matter of fact I am! That's funny. Just last week'ish a dev from Europe commented about my large beard and said "very Canadian." Anyways, my comments were done end of day Friday, after a mentally exhausting day - plus this being a long weekend... That probably explains why I was trolling on reddit anyways! Thanks for the again correction! Gotta love it.
Here's you get the address to array data in C# void Foo() { var data = new byte[50]; var gch = System.Runtime.InteropServices.GCHandle.Alloc(data, System.Runtime.InteropServices.GCHandleType.Pinned); var ptr = System.Runtime.InteropServices.GCHandle.ToIntPtr(gch); SomeCFunction((long)ptr); gch.Free(); } Then in your C function cast it to the pointer type you need: void SomeCFunction(long ptr_long) { auto ptr = (unsigned char *)ptr_long; auto first_byte = *ptr; }
Start here. :) https://blog.stephencleary.com/2012/02/async-and-await.html
Eek, that is slow.. Math.abs(a-b) &lt; small_delta is much faster..
&gt; It's behind an azure CDN, (azureedge.net) so I'm not sure how you see that it's not setup properly 1KB image took 700ms for me to load. Try CloudFlare maybe? 
Just a heads up that you can't ConfigureAwait(false) Task.Yield.
It depends. If you are running under a UI thread or an ASP.NET Request thread, the first will let it run in a threadpool without capturing the context while the second will wait for the context to be capture. If it's running under the threadpool context (the default for inside Task.Run), then they do the same thing, the first just has more overhead.
Removed: Rule 7.
Yes, it's asynchronous from the perspective of the function calling Task.Run.
Unfortunately this is a massive topic that can get very complex. My suggestion is to just google as much as you can about it, it took me a long time to fully wrap my head around it. The most simple way to summary is it though is that it makes it possible for at least 2 sections of your programming code to run at what appears to be the same time.
4 to 5 uS on average for two string castings vs around .9 to 1 uS with an abs compare to less then tolerance on 3.6g I7. So you're correct sir, if it's continuous real time there are a few extra clock cycles being eaten up. Rarely do i use these types of comparisons using floating point logic which is inherently slower, but when i do it's always on a poll timer or user interaction, not continuous and i like the quick and dirty easy to read shit. If it is continuous and speed is what i'm after I don't use floating point types at all and just post process into a floating type if the output is required. 
Wow! Thanks for the thorough reply! I will play around with this after the weekend and keep you posted, but either way I really appreciate the great explanation. Totally makes sense!
Almost unresponsive and the only thing that would lead was "uniform grid" which isn't exactly impressive. What are they trying to sell is on and why is it the slowest web app that doesn't crash I've ever seen?
A thread is a usually a method, yes, but of course that method can then call other methods. There’s a very simple example of how to start a thread [in this tutorial](https://www.infoworld.com/article/3035134/application-development/how-to-work-with-threads-in-c.html). I’m not sure what you mean by "await" a thread. In C# the await keyword is used with Tasks, not Threads (a Task *can* be a thread, but doesn’t have to be). If you’re talking about the C# keyword, then yes, it automatically knows where it left off. If you have a Thread object, rather than a Task object, you don’t await that thread, you Join it. This causes your thread to stop running until the other thread ends.
The practical use I can think of `Task.Yield()` off the top of my head is if you have some sort of a pipeline where you have to yield the control to the next middleware I guess `Task.Yield()` can come in handy.
Can you please elaborate more on that? What's the reason and what would happen if you do `ConfigureAwait(false)` ?
&gt;In my opinion, Array.Length and any other collection size should be a native integers, but that ship sailed back in 2002. (As opposed to the separate Length and LongLength we have today.) And beyond that, today we're actually paying a (pretty small) performance penalty for indexing arrays with 32-bit ints in 64-bit processes; the JIT has to maintain the 32-bit semantics (e.g. overflow) but the pointer math is 64-bit, so it has to emit extra instructions to convert the size. (It is theoretically possible for it to optimize away this penalty in most of the common cases, but it does not do so at present)
Is float really faster than double? For physics calculations I wouldn't use float, you want more accuracy for that. If you want to process more, use a bigger cluster.
That link loads unacceptably slow too. When running it does nothing, just shows "Starting test". That's just plain silly.
Note that you can use the equivalent .Epsilon const field for the delta value: Single.Epsilon for floats: https://msdn.microsoft.com/en-us/library/system.single.epsilon(v=vs.110).aspx Double.Epsilon fot doubles: https://msdn.microsoft.com/en-us/library/system.double.epsilon(v=vs.110).aspx 
Sounds like you should use the [dispatcher](https://msdn.microsoft.com/en-us/library/cc647500(v=vs.110).aspx) to queue changes to the UI/in the UI thread, though.
Awaiting a task returned by FromResult will just be a no-op. Await inserts code that first checks if the task is already completed and in that case does nothing. 
Have you considered SWIG? Its a bit tricky to set up. It worked for me. All it takes is a lot of time to fiddle with it to get it to work, and once its working, its ultra reliable and robust.
Just a normal winforms app.
Well, the two concrete classes have the same property names. Objects are created from the mapping, but they're 'proxy' classes. I assume that is because it's trying to map to the interface, but I have no idea why as I have this: cfg.CreateMap&lt;ValueConditionModel, ICondition&gt;().As&lt;ValueCondition&gt;(); cfg.CreateMap&lt;ValueConditionModel, ValueCondition&gt;(); Shouldn't the As make it so, when I try to map ValueConditionModel to ICondition, it creates a ValueCondition instead of trying to map directly to the interface?
Tried it on FireFox on Win10, worked fine. Its definitely x50 slower than its supposed to be. It does show a lot of promise.
I know, I just want to resume unsigned char* 
Okay.
Using a byte[] on signature is possible, but Unity gives me an IntPtr using texture.GetNativeIntPtr() (or something like that), and at this moment I didn't find any method that gives me the buffer of the image (EncodeToPNG and EncodeToJPG gave me the byte array but isn't what I need because are the encoded bytes looks like weird "tv bubbles", it's not the original image and EncodeToBMP doesn't exist)
Thanks I will try that!
glad you said this, someone noted above "await" always creates a new thread but that's not always the case. The nice part about not using [Task.Run](https://Task.Run) is you leave it up to the compiler how to handle it, versus using [Task.Run](https://Task.Run), which might take a performance hit creating a new thread that could potentially be unnecessary.
Thata exactly how its mapped
I don't yet know why, but I think 64-bit has fixed it.
Are you sure you have both Ids in the HasKey call for your mapping entity? And are you sure you're not adding multiple identical mappings?
I suppose you want to use System.Drawing.Bitmap(), but Unity does not support this. So I think you can use Texture2D.GetPixels32(). You might find this links helpful: https://stackoverflow.com/questions/21512259/fast-copy-of-color32-array-to-byte-array https://forum.unity.com/threads/convert-texture2d-to-opencvsharp-to-mat-and-vice-versa.524872/ 
I've never seen a need to use .As() in a .CreateMap(), and I'm pretty sure you don't need it here either. Off the top of my head (without testing): cfg.CreateMap&lt;OriginalParent, DestParent&gt;(); cfg.CreateMap&lt;OriginalFoo, IDestFoo&gt;(); cfg.CreateMap&lt;OriginalFoo, DestFoo&gt;() .IncludeBase&lt;OriginalFoo, IDestFoo&gt;(); 
Generate a guid for the I'd if you can or use an incrementing integer.
Thanks for the help! I'll check all your advices and publish here the feedback in another comment
When working with EF, it's best to assume that the ORM is the one doing something stupid until proven otherwise. You should never feel bad about asking "WTF is it doing this time?".
Do you need the mapping entity, or can you configure the join directly between the two tables? By configuring the two tables into a direct many to many relationship, you might eliminate one of your problems. It's something like "has many with many has mapping". 
Reddit uses 4-space indents for code blocks, not triple backticks
The Free should definitely be in a finally block
Task.Yield doesn't return an object that has that method. It literally won't compile. https://github.com/dotnet/corefx/issues/23898
Good point.
Nothing would happen because it doesn't compile. `ConfigureAwait` is a method of `Task`, but `Task.Yield()` returns a `YieldAwaitable` and not a `Task`.
&gt;Unity gives me an IntPtr using texture.GetNativeIntPtr() Well, there is your problem: You want to get the data from a Texture2D. /u/vlad-z's answer is correct in this case, use GetPixel32() or some other function. That is what would work. Textures are stored on the graphics-card, not your system memory, so getting the data from them can be a bit tricky. While GPU-memory can be addressable, it doesn't mean that you can actually \*read\* from it. In fact in DirectX you need to specify if you ever want to read from / write to a texture when you create it, because it means it's gonna be trated differently.
The answer in the MSDN blog and below seems to tell you how to launch the 2nd exe (the winforms one) from a service. However, unless the service is doing something else (ie logging etc), then i dont see the point in the service. All you will end up with is the service monitoring whatever you are monitoring, then triggering the UI if the user is logged in. Why cant you just have a normal winforms app, and hide the main window (window.Visible = false), and have a timer to check the status of whatever you are monitoring, which calls a event handler that makes the window visible again?
So this turned out to be the problem, when using a random number generator it didn't guarantee that there wouldn't be duplicate entries, so I did check for duplicates and everything adds to the database normally! :) 
Why are you generating random numbers for ids?
Thanks, I like this guy's humour :)
Cool story bro
Because I am just populating my database with random data using EF core so I can practice doing some stuff with it, I don't need it to be logically correct, so in my exercise I had to populate a Car object with Parts collection and I wasn't choosing the Parts logically, just getting random ids from the values in the Parts table
And if you decide to rename the property on one side, it will silently start failing, which is much, much worse. You would need a unit test testing every property of the mapping, and by then you have lost the entire advantage.
You don't have to repeat mapping logic because you are not using AutoMapper. You can place your own mappers where you like.
Great.... whatever this is!?
We are just sharing the development pipelines (todos) for RepoDb.
I mean it looks interesting for sure, link in the main post with some context or links would have been great :)
&gt;Also, you can test the performance of your browser using this app: http://raytracerbenchmark-wasm.platform.uno/ Seems broken in Safari. Other mono-wasm/Blazor stuff runs fine for me; this one just does nothing when hitting Start Test.
Really if anyone lives near lehigh pa.. and would like to help work on the project let me know..
If reddit only had intellisense it could have caught my mistake for me.
Could this be improved by running .NET in a worker? Right now, the UI is freezing pretty badly, often hanging up the whole browser's UI on my PC. It seems that Edge isn't good at handling heavy apps despite the wasm performance benefits, compared to Chrome.
&gt;Could this be improved by having the .NET runtime run in a worker? Not sure what you mean. Blazor can run right in your browser using mono-wasm, or the actual runtime can work server-side and stream the results back to the client (running in JS) using WebSockets.
AFAIK EF Core still requires that you have a join entity for many to many, unfortunately. 
DevExpress has great reporting and dashboarding .Net components
https://github.com/aspnet/Blazor/issues/862
Ah, yes. That’ll help with responsiveness, but not with actual execution performance.
Use guids for that or let the database generate them
As much as possible, I try to use command line tools. Git history is one example. Searching for strings and class names is usually done with powershell for me. Visual studio is great when I need it, but I otherwise minimize my contact time with it. 
It's enough for Console apps or ASP.NET Core apps, which is mainly what .NET Core was designed for. If you haven't found this already, check out [this](https://code.visualstudio.com/docs/languages/csharp) page and get started with the tutorial already.
Left side: code Right side (split into top and bottom): Top (tabs): Solution Explorer, Team Explorer, Properties, other random windows Bottom: Task Runner Explorer 
[https://jackmott.github.io/programming/tools/editor/ide/visual/studio/2016/07/11/decruft-visual-studio.html](https://jackmott.github.io/programming/tools/editor/ide/visual/studio/2016/07/11/decruft-visual-studio.html)
So this is going to be a lazy answer, but it's late and I have faith in you. I would look into LINQ's GroupBy method. Group by the dictionary values. Count the groups. Pick a random int. Get that group. Something to that effect seems to make sense. 
I'm using a tv as a monitor; it's 40 inches wide. I'm running a resolution of 1920x1080. I find this is pretty much pefect for visual studio for me. To split VS into two pieces, I drag any tab from the top (you youw, the tabs that show each file you are working on) into the middle of the screen and vs automatically reparitiions itself so you have a window on the left and a window on the right. As it happens they are each almost perfectly square. I do at least half of all my work this way. Lots of visible columns, plenty of visible width. Those two code panes are all I have open. I have everything else close, including solution explorer. I love working like this and found it makes me much more productive when I'm looking at old code in the left pane and writing new, amended code in the right pane (and I *always* do it in that order - that way I always know whether I am in the old code or the new code automatically without having to think.) 
Set the zoom level to 70 %. It takes a bit to get used to it, but it's so much better, you see so much more code.
Good tools for wrong job do not a good result make
Covering of the ReSharper tab made me laugh a little.
Would be nice for you to export your window layout for others to use, its kinda nice. Something like [this](https://blogs.msdn.microsoft.com/zainnab/2010/09/18/export-your-window-layouts/) should do the trick.
I put together a little sample for you, using the suggestion from /u/rigatron1 to use Linq's Group By function: using System; using System.Collections.Generic; using System.Linq; public class Program { public static void Main() { Random r = new Random(); Dictionary&lt;int, string&gt; test = new Dictionary&lt;int, string&gt; { {1, "test 1"}, {2, "test 2"}, {3, "test 2"}, {4, "test 3"} }; var groups = from keyValPair in test group keyValPair by keyValPair.Value into valueWithKeys select new {valueWithKeys.Key, Value = valueWithKeys.ToArray()[r.Next(valueWithKeys.Count())]}; foreach (var valueWithKey in groups) { Console.WriteLine(valueWithKey.Key + " has a key of " + valueWithKey.Value.Key); } } }
The problem is when your code base is organized such that you can't do everything from a single visual studio instance, using other tools is sometimes more effective. Why shun from using powershell when it effectively solves a problem that is not easily solved from your ide? I also use ILSpy for my own nuget dependencies (that my team published) to avoid a bunch of context switching between tools, projects, and repository. 
I know only about the propagating multi-git-repo dumbfuckery that somewhat prevents doing everything from same VS instance. Even then you can mostly work-around that by using an external solution to combine stuff. Builds will be "funny" but most reference/usage stuff will work relatively well (which is my most used cross-repo activity anyway). In my experience PS has been the shittiest scripting thing of all, probably mostly because of the cmd.exe roots. Escapement handling, quote handling.. it's just ugh. gimme bash+perl and my cmdline requirements are done. The other point is that if you're doing very much with powershell, it means you have way too much automatably processable code, which kinda means it's just a generic of something else and probably should be such.
The things I do with powershell are exploratory sorts of things, such as finding class names as strings (searching for error messages and such). It's something I could probably automate, but don't see a need to automate simple for enumeration and pattern searching. I try to automate the things that I can, but the things I'm referring to in this thread aren't things I'd see a need to automate. 
So instead of Ctrl+Shift+F and having results in a window with clickable lines you rather write that on commandline and then copy-paste the filenames around? OK.
Both. I just want to know how can I accomplish my task. Don’t pay attention to my database structure I just need an idea how I can book my working times With a calendar, or how I can Extrakt the times from The calendar
Is that VS2017 Enterprise, or are they adding minimap to other versions in the preview? So petty but I would *love* minimap in VS Community. 
Removed: Rule 4.
[This](https://imgur.com/a/RzKJYLU) is how I have mine, I tend to try to keep everything minimised to their side. I would love to be able to hover over the tabs to have them expand 
What pane are you referring to? It’s enterprise 2017 preview.
40 inch at 1080p? How far away from the screen do you sit? That's bonkers...
I'd pass the cancellation token all the way through the code, not just to your sleeping task. Another way would be to use a timer, which wouldn't have built in support for worker tasks that are in flight, but would at least have support for canceling future tasks. You can solve the in flight cancellation thing fairly easily doing what you've already done. Why do you actually need to design your component this way? You'd normally want to kick off work items using some kind of activation message. Think about how the thread pool receives and completes work items. Is it possible to supplant what is essentially a call to sleep with an activation message?
I would use a timer. Timer fires Execute task Dispose Repeat To cancel, disable the timer. 
Would you have it launch on login? How would I ensure that app always runs? What if a user with admin rights kills the process?
I think you approach is fine, I use a very similar pattern quite often. For background components, I usually make Start and Stop method async as well, so the start can do initialization (which can potentially throw), before starting the background task and the stop triggers the CTS, then awaits the background task so I ensure everything is closed. I don't really bother with IDisposable.
I love organized and sometimes multimonitor views of Visual Studio. Over the last 18 years of my life I’ve worked with the IDE. I’ve gotten so excited about new window layouts and such and have also tried to share. What I’ve found is that the window layout is so person, project, and company specific that there is no “magic” window layout. For instance, while I’m sure the layout you show works great for you, it’s horrible for me. I need source control explorer as a main window for sure, and have little use for unit test and debugging windows. 
I can think of one way involving thermite...
Removed: Rule 2, Rule 3, Rule 4.
So you're basically writing a cache refresh worker? What're you making your cache invalidation rules? Is it a timeout event, or something more sophisticated? If it's just a timestamp, there's a fairly straight forward way to do this on the cache itself using a semaphore. Generally, I use this as a mechanism for reasoning about how a complex system works: different sub-systems collaborate with each other to perform the functions of the system as a whole. Crossing those boundaries is something I call "activation," because it fundamentally means passing a message from one part of the system to another, which ultimately results in an either synchronous or asynchronous worker kicking off. Boundaries of your system can be any of several things: namespaces, threads, processes, systems, data centers, etc. You can define many boundaries for what constitutes a demarcation point in your system. Consider how the thread pool works: 1. Passing a worker function to the thread pool, along with any user data that should be part of the background worker task 2. The task, and it's data, being inserted into a work queue 3. (Eventually) the work item starting (coming off of a queue to an available thread) Steps 1 &amp; 2 are the setup, and 3 is the point where the real activation occurs, because this is where the work item actually _starts_. This entire process is - as far as your code can see - asynchronous, and can be thought of more or less the same way as an HTTP request or a Redis cache query would work. The first two steps are preparation of the request message, instantiation of any constituent resources used in making the request, and transmission of the request to the recipient. The recipient is then "activated" in it's environment, performs the work, etc. Going back to your original problem, if we use the definition I've provided for what activation means, the thing that you're trying to figure out is how to activate your refresh logic. That can be any of a few ways: signaling an event (such as an AutoResetEvent), acquiring a semaphore, as two examples. Ideally, you'd want this to be deterministic, so that you can show that it is working properly (via tests). With the proper abstractions in your code, you can write unit tests that demonstrate this entire thing is correctly implemented. This is possible to do using things like timers, but it's horrendously more difficult than something more like the following: ```C# // Assume these have been assigned. private Func&lt;F, bool&gt; _refreshRequired; private Func&lt;F, CancellationToken, Task&lt;IEnumerable&lt;T&gt;&gt; _refreshWorkerFactory; private SemaphoreSlim _semaphore = new SemaphoreSlim(1); public async Task&lt;IEnumerable&lt;T&gt;&gt; GetAsync&lt;T, F&gt;(F query, CancellationToken cancellationToken) { if (_refreshRequired(query)) { // Throws OperationCancelledException on failure _semaphore.WaitAsync(cancellationToken); // We've got the semaphore, but should check to see if refresh is still // required. This is similar to double-checked locking. if (_refreshRequired(query)) { var items = await _refreshWorkerFactory(query, cancellationToken).ConfigureAwait(false); UpdateCache(items); return items; } } return LoadFromCache(query); } ``` With proper interfaces, you can mock out _most_ of this behavior, and then write unit tests that show what happens in pretty much all cases (including errors during initial priming/reload). This help at all? 
I'm using community Edition with minimap. The setting is called scrollbar size I iirc. 
That's a pro tip if ever there were one. I like using powershell nonetheless for other things too, like inventory on my real systems, rest calls, Git commands. It's got enough native functionality that I can do a lot without needing more than powershell and vs open at the same time, which I like. 
Holy cow, thank you! I've Google'd a few times and never had luck. Text Editor &gt; Scroll Bars and under Behavior change Use Bar Mode to Use Map Mode.
I know this is random, but my love for Powershell w/ VS is great. You can fire off scripts inside the VS console window. 1. In Visual Studio =&gt; `Tools` =&gt; `External Tools` 2. Select Button `Add` Title: `Execute Your-Script-Name In Output Window` Command: `C:\windows\system32\windowspowershell\v1.0\powershell.exe` Arguments: `-ExecutionPolicy Bypass -file "$(SolutionDir)Scripts\Your-Script-Name.ps1"` Initial Directory: `$(SolutionDir)` 3. Tick Box `Use Output Window` =&gt; `Apply` =&gt; `OK`
Might be worth looking at [https://www.hangfire.io/](https://www.hangfire.io/).
So here's something I deal with daily. I'm working on a big project, say 2 months of work. It's changed a bunch of files. Hey I need to go review three things junior guys have committed. Can't change my branch because I have uncommitted files. I've been burned three times by trying to "stash" this changes via vs. I now just have two repos. One for my work and one for code review. Thurs I have to open two instances
Eh. I'd try to work out why stash doesn't work for you (quite likely the build dependencies get broken with binaries and version increases). If that's not possible, just commit and amend for the later changes. You should **not** have two months of file changes hanging at any time. If you hate multiple simple changes, just squash your branch come merge/rebase time. We use the online TFS so the code review functionality comes out of the box. I also use SmartGit which also lets me see compounded changes from branches without having them checked out.
I think my data is more non-structured? Should I use something different from SQL, then?
You said some data is _related_ to other data. And also that you need conflicts automatically handled. SQL does both of these very well.
Thank you for the responses so far! It's a shame that this is the case, at least for me. However, I'm researching about even more options and alternatives such as vim. It's a difficult answer to get because it's code editor vs IDE. I also lack the knowledge about this topic as a whole. But I won't give up.
You shouldn't be running it on a spearate thread. Avoid `Task.Run` and just don't await the Task until right at the end. Then everything is just looks like normal synchronous c# and as a bonus you don't have a thread hanging around doing nothing while you call `Task.Delay`
Does related mean referenced? Isn't it true columns shouldn't store lists but references to other lists? For example, let's say I have this object - class Event { public string Name { get; } public string Description { get; } public List&lt;Event&gt; Branches { get; } } Would Branches have to be its own table? 
For hot tasks in the default threadpool context, it's going to do the same thing as Task.Run and isn't going to use up an extra thread while awaiting either way. I personally use Task.Run to make it explicit that it's going to be running on a background thread, especially since you may hit unexpected issues if you aren't on the default threadpool context.
This is overengineered. Just use timer to start sync code on a separate thread (using [Task.Run](https://Task.Run) for example)
I think you meant to put that release outside the "if (_refreshRequired(query))" scope to avoid deadlocks. Also it's advised to avoid double checked locking in C#.
Would you mind showing me a source confirming that?
Off the top of my head: 1. Are there multiple threads running that could be changing the variables behind the scenes? 2. Is the property setter/getter for `.Enabled` doing funky things other than straight up assigning/returning the backing field value? 3. Is there a conditional breakpoint that is _assigning_ a boolean value rather than comparing? 4. Try outputting the values in someway rather than through the debugger, use a separate local variable other than `cu` (sanity check!) 5. Clean+rebuild the solution, close/open Visual Studio, reboot the computer. 6. Have more beer and come back to it tomorrow.
No to the first three. Kudos for the speed of reply. I'll try #6 and get to #4 and #5 after.
Event would be a table with an ID column. Branch would be another table just storing the relations between events. A cross reference table.
It is possible to control the naming of elements at runtime with the `XmlAttributeOverrides` class. Its API is somewhat bothersome, however. You could automatically generate those attribute overrides either based on custom attributes or, if possible, based on a naming scheme.
I agree, this does seem possible.
[Debugger Output](https://imgur.com/NpCSRux). Not shown, the results of the WriteLine, but it agrees.
[Am sure](https://www.reddit.com/r/csharp/comments/94tz41/im_a_few_beers_in_at_the_beach_and_have_forgotten/e3nr52o/). Side story: one of my prouder moments was finding a bug in VS6.0, where if you hovered over the ++ operator, it would actually apply it to the variable, changing behavior as you observed. Not the case here.
lol :) /bow
What’s the type of retest enabled? Can you show the setter and getter for it?
There isn't a custom one, it's a standard RadioButton.
If that doesn't work, start stripping away code and try to produce a [Minimal, Complete, and Verifiable example](https://stackoverflow.com/help/mcve) that others can look at and hopefully reproduce.
I don't think I can minimize it. This is a recent change in longstanding stable code, so in theory it should be easy to narrow down. Being very large, the form itself isn't so easy. I've already checked for things like code implementing the EnabledChanged event to second-guess the outcome. I do know at which exact button-press it happens, which would theoretically be helpful, but I haven't converted that into a solution yet.
Can you skip the `cu` usage and just hard code a `true` assignment? Also, are you using any third party libraries or frameworks to manage your UI? It wouldn't be the first time they behaved unexpectedly: https://www.devexpress.com/Support/Center/Question/Details/Q429998/setting-simplebutton-enabled-false-does-not-work-the-first-time
REDDIT SILVER FOR THIS GUY! THAT WAS IT! I remit to you 100% of the royalties I earned while writing this code. Please send your bank account info to proceed.
[SOLVED!](https://www.reddit.com/r/csharp/comments/94tz41/im_a_few_beers_in_at_the_beach_and_have_forgotten/e3nsjbb/)!!! With thanks to /u/Kapps!
If it's a recent change, you could sift through the diffs and see if anything relevant changed. Also, another radical option of you aren't getting anywhere is do a fresh checkout of the source code to an earlier, working version. Then update 1 (or a few) revision at a time until the issue reoccurs. That might help you nail down the offending change.
#3 has bitten me more often than I'd like to admit.... Good to point out it!
**Thank you,** very much, However i just realized that I was wrong originally. Sorry for wasting your time earlier. I must have misunderstood how dictionaries work by confusing the value for the key itself, as at run time i get an error: `" An element with the same key already exists in the dictionary."` Which now presents a different issue to solve. (not sure if i should make a new post) **CONCEPTUALLY:** I need to have similar shaped 3d objects have the same key. **EXAMPLE:** Cup- Red, Cup-yellow,Cup-Blue etc are Cups and have the same key as a Cup, I then would like to create several cups using a loop, randomly selecting Red or Yellow or Blue on each increment of the loop. Following this analogy, I have a dictionary with a definition for a Cup-red and get the error above essentially trying to establish Cup-yellow. As the Key Cup is used by Cup-Red. I need all Cups to share a key as i will a Cup for every color in the spectrum for example as a option and I don't want repeat myself and code by having a definition for each color I select as an option for a Cup. How would i go about approaching this? Thanks again.
Heh, no worries. It's an interesting one because if you do it in the designer, the control actually shows up as being enabled still. I assume there's a line that checks if you're in design mode and doesn't return false just because the parent does.
I am kinda torn on this one. Usually the background task will yield to the threadpool on first await anyway, so Task.Run is code smell, bit on the other hand it's an easy way to ensure that it will yield immediately and as you said, make it explicit, without any real drawback.
Any database tech can solve this for you. I recommend a relational database like SQL server express or postgresql. You can use a document database but given your other comments it is certainly relational data. 
I don't think it's relational data? If a lot of objects have local lists, as they aren't used anywhere else, wouldn't that be good for nosql? It just seems like all the examples for nosql are like my data structures.
If both your dbContext and your repositories is registered as scoped, you will get the same instance. This might help understand: [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.1#lifetime-and-registration-options](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.1#lifetime-and-registration-options), [https://joonasw.net/view/aspnet-core-di-deep-dive](https://joonasw.net/view/aspnet-core-di-deep-dive) and [https://stackoverflow.com/questions/37507691/entity-framework-core-service-default-lifetime](https://stackoverflow.com/questions/37507691/entity-framework-core-service-default-lifetime)
Will you have more shapes than just cups? If so, a dictionary where the key is the shape name, and the value is a List&lt;colour&gt; might do it. With dictionaries, think of the key being a thing you want to look up, and the value being what you find when you look it up. So here, you look up “cup”, and what you find is a list of cups (or colours of cups).
Yes. If it was just for me I'd go to shell:startup and drop. Shortcut there. If it was for distribution I'd make an MSI that did likewise. A user with admin rights can kill any process including services. I can't think of a decent way to prevent this apart from the slightly virusy way of having 2 processes mutually ensuring that the other is running. I might be miles wide of the mark here since I'm not that clear what u are trying 5o do. Writing a service is definitely an educational endeavour whatever you are up to so I'd recommend it on that basis (underlining my previous suggestion to look at top shelf). You will learn about guiless apps and most likely multi user issues in Windows API which is a good thing IMHO :)
In my experience, relational is good for most of what NoSql is good at, and much more, which is a boon when you start needing relational stuff that's impossible using nosql
I don't know, but that other comment you made looks perfectly relational to me. You'll have to make that assessment yourself. 
&gt;You'll have to make that assessment yourself. I obviously can't do that, haha.
That's what I kind of ended up doing as well, this just reinforces to me why it's important to understand the differences between transient transient/scoped/singleton. So for this Middle table B I have a create method tied into my A data access class.
Yep you're right. Good catch.
 public void pushtoArray() { List&lt;String&gt; agentArray = new List&lt;String&gt;(); TextBox doc = Application.OpenForms["UI"].Controls["textBox3"] as TextBox; foreach(var s in doc.Text.Split(',')) { agentArray.Add(s); } }
I am not familiar with guids, maybe I should look into that
Thank you, this is helping. The answer is yes, i will be having more than Cups. To give you more insight with brevity: Here is the exact setup I have in video format (cut to the relevant time) for clarity: [https://www.youtube.com/watch?v=skpBLciVkR8&amp;feature=youtu.be&amp;t=4m13s](https://www.youtube.com/watch?v=skpBLciVkR8&amp;feature=youtu.be&amp;t=4m13s) AND Here is the relevant code: public List&lt;GameObject&gt; dungeonShapes; private Dictionary&lt;char,GameObject&gt; dungeonGameObjects = new Dictionary&lt;char,GameObject&gt;(); void Start () { LoadDungeonCharacterMappings (); InstantiateDungeonPieces (); } private void LoadDungeonCharacterMappings() { foreach (GameObject dungeonShape in dungeonShapes) { char gameObjectCharacter = dungeonShape.GetComponent&lt;DungeonCharacterMapping&gt; ().characterMapping; dungeonGameObjects.Add (gameObjectCharacter, dungeonShape); } } private void InstantiateDungeonPieces() { for (int r = 1; r &lt; mapGenerator.mapRows-1; r++) { for (int c = 1; c &lt; mapGenerator.mapColumns - 1; c++) { char ch = mapGenerator.map [r, c]; if (!dungeonGameObjects.ContainsKey(ch) ) { continue; } else { GameObject dungeonGameObject = dungeonGameObjects[ch]; // I NEVER GET HERE BECAUSE ERROR ABOVE Instantiate (dungeonGameObject, new Vector3 (r * 12, 0, c * 12), dungeonGameObject.transform.rotation); } } } } The pseudocode I grasp : 1) LoadDungeonCharacterMappings (); loop with logic to randomly select a one keypair per duplicate. will 2) Be run inside InstantiateDungeonPieces(); loop to allow for random selection of a keypair on each iteration of the InstantiateDungeonPieces(); loop. I have a feeling this solution may be more CPU intensive than a professionals approach, I also am struggling with writing the syntax for the pseudocode logic. You have been amazing, thanks again, Any feedback here is appreciated.Best.
Git actually has a command just for this! The `git-bisect`. You just find a commit or tag where it works, then it starts doing a binary search, checking out commits in between. Check out the part "Binary Search" in the handbook: https://git-scm.com/book/en/v2/Git-Tools-Debugging-with-Git#binary_search
Hey, I have a bit of experience in that problem space, how much experience in the field do you have, or do you have someone that works in inventoryish spaces as an SME to work with? I’m setting off on a similar vein but more narrowly scoped, a materials management system for hospitals or other medical facilities that need to track inventory and move it around. 
A List resizes to fit your data, allocating new string[]s internally as needed. string[] has a fixed size, determined on allocation.
So, initializing an empty string[] would be considered bad practice, yeah?
assuming agentArray is declared as a member of the class, instead of string[] agentArray = new string[] {}; it would be just agentArray = new string[] {}; The former creates a new variable in the context of the method and ignores the member variable If you're using the given code it could be something like public void pushtoArray() { List&lt;String&gt; tempAgentArray = new List&lt;String&gt;(); TextBox doc = Application.OpenForms["UI"].Controls["textBox3"] as TextBox; foreach(var s in doc.Text.Split(',')) { tempAgentArray .Add(s); } agentArray = tempAgentArray.ToArray(); } or maybe using System.Linq... public void pushtoArray() { TextBox doc = Application.OpenForms["UI"].Controls["textBox3"] as TextBox; agentArray = doc.Text.Split(',').ToArray(); }
Two extremely helpful answers in a row - thank you! I'll try implementing this general idea once I'm back at my computer tomorrow. That tempAgentArray.toArray is very clever, and may be what I was missing. I'll let you know - thanks again!
Wait, we’re not supposed to use upper case constants?
Arrays use a precise amount of memory whereas List will try to allocate more memory than you need so that it can handle your inserts without constantly reallocating. So it depends on your priorities.
looking at this https://msdn.microsoft.com/en-us/library/b873y76a(v=vs.110).aspx again, it appears that Split() actually outputs an array in the first place, so you can just go with just agentArray = doc.Text.Split(','); without any need for the loop or linq
&gt; Also, I'm afraid I'm not quite sure how to store this back into the class - I haven't used List objects yet, so I'm not very familiar with how to use them in any capacity. The easier way would to just have a: return agentArray; at the end of the function but, in my opinion, it really depends on what you're doing with the data. If you plan on reusing the functionality with other text boxes, I would personally try something like this: using System.Linq; using System.Collections.Generic; public class UIFormatter { public UIFormatter() { } public static List&lt;String&gt; SplitTextBoxData(TextBox textBox, char delimiter) { return textBox.Text.Split(delimiter).ToList&lt;String&gt;(); } } And whenever you need to use it (such as your example), you could do something like: List&lt;String&gt; splitData = UIFormatter.SplitTextBoxData(textbox3, ',');
Probably a bit nitpicky, but I'd suggest following the [C# Conventions and Naming Guidelines](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/general-naming-conventions) instead of directly converting *.js to *.cs function by function. 
Agreed, although really it sounds like any database could achieve what he wants, including a NoSQL or even a memdb like Redis.
Clients &lt;--- REST API --- &gt; ASP.NET Core &lt; --- ORM or Driver --- &gt; Database Choice of database depends on you - I think this will work with both relational (ORM being EF Core) and non relational (MongoDB, CosmosDB, LiteDB, etc.) Clients &lt; --- SignalR ---&gt; ASP.NET Core to notify of updates to data, and concurrency issues/conflicts. 
Yes. So does Javascript's `string.split` ¯\\_(ツ)_/¯ 
That's a pretty bold statement.
One foot. 
I can’t watch the video at the moment, but based on your code sample, I’d say dungeonGameObjects should be a `Dictionary&lt;char, List&lt;GameObject&gt;&gt;` Inside your foreach loop, you’ll do something like this (I’m on mobile, so this may have some errors in it): if(!dungeonGameObjects.ContainsKey(gameObjectCharacter)) { dungeonGameObjects.Add(gameObjectCharacter, new List&lt;GameObject&gt;); } // Now the character is in the dictionary, and has a list associated with it dungeonGameObjects[gameObjectCharacter].Add(dungeonShape); Finally, in your nested for loops, inside the “else” section, instead of `dungeonGameObjects[ch]`, you’ll need to do `dungeonGameObjects[ch][r]`, where “r” is a random number that is less than `dungeonGameObjects[ch].Count`. The sample code I gave you yesterday shows how to make that random number. TL;DR - you have a character, you use that character to look up a list of GameObjects, then you choose one of those at random. As a bonus, I’d also look into using an “enum” instead of a “char” as the dictionary key.
Cool. Then you should be good :) 
PostgreSQL is lightweight. For non-advanced jobs, it will do the same job. If you get the layering right, then you can swap databases in the future without a huge amount of work.
Dapper is faster than EF Core, but EF Core is probably more futureproof. *DISCLAIMER: I've been playing with Dapper for a few weeks on a side project.
My company has been foing this exact setup since 2015, except we used mono instead of .Net core. It worked very well, and I think we had like one bug where it was the ecosystem's fault. There are many advantages, but of course the big disadvantage is that you're not executing in the same envrionment you're developing. The second biggest is that the setup *can* be slightly more complicated. So basically: It works very well for us, and I can recommend it.
is it really? i have seen tests by the guy who wrote the lastest book on entity framework core and it seems like dapper is not faster at all, especially in normal production scenarios
Thanks! And yes, the development vs production environment issue is something I'm considering as well. I think I will try out both working directing on Windows with VS Community along with also trying it out on OSX with VS Code or Rider. Appreciate the tips.
I may not understand that last bit, but can't you just take the output of the split and assign it to the array variable as I think it spits out an array itself. If the push is actually a push, you could just reverse it afterwards by using either LINQ or maybe an array.reverse
Since it's already solved I'll give you an interesting insight: "cu" means literally the hole in our butts in portuguese
Safari is broken in the current stables releases for iOS/macOS. Will be fixed in the next releases. Also, when it works, this test is *very* long, takes about 50s to finish on a recent machine.
https://stackoverflow.com/questions/13018189/what-does-m-variable-prefix-mean
It's not new. That was MS official naming convention before .NET when we were still writing C++. I don't think it's recommented anymore for C#. 
I never prefix my private fields with m_ simply because it makes me need more keystrokes whenever I want to do anything with it - I'm by no means a professional programmer though, this is just my humble opinion
SME is an abbreviation for subject-matter-expert, in this case it would be someone who manages or works in daily the types of things that are being modeled in the applications. For a more concrete example, a SME that I would want to have access to would be a director of material management at a local hospital so I could get feedback on workflow concepts and scans of product barcodes. I’ve written a number of applications for embedded Honeywell and Motorola scanners, they’re a really annoying platform to work with, and to top it off they almost exclusively run WinCE 5.5/6.5 which limits you to the 3.5 version of the compact framework. I haven’t had access to the hardware in some time though, it may be possible to compile the .net core framework for those platforms, if that is the case then it would open some interest g possibilities. 
Definitely worth an upvote!
All you need to know is: don't do it.
Best practice imo is just this.myField. Underscores are nice when you never want disambiguation around fields and parameters, however the this pointer accomplishes the same. 
Have you gone through the official docs at [https://docs.microsoft.com/en-us/aspnet/core/security/?view=aspnetcore-2.1](https://docs.microsoft.com/en-us/aspnet/core/security/?view=aspnetcore-2.1)? Those seem to be the most up to date resources. I always start with those and then supplement with articles once I have an idea about what I'm looking for. If you do a "dotnet new razor --auth Individual" it will set up a basic site with Identity set up. That alone really helped me to see how a basic set up worked. One thing the official docs do not go over (I may have missed it) is creating users and roles. For that I just did a search for "aspnetcore 2.1 Identity create users and roles" and figured it out from examples. Luckily it's pretty simple and even older resources give an idea on how to do it in the most recent version. It also took me quite a long time to figure out that in 2.1 all the UI was moved to a library. I don't think that's explained in the docs well if at all but there is a blog post about it when 2.1 was released.
\&gt; new ha ha ha hahahahhahahahaha tee hee ha. no
It's an old practice, going back to at least the 1990s. Microsoft dropped it sometime in the early '00s.
In C#, data can move from point to point (as GC wishes). First, you should wrap your `byte[]` in `fixed` block to pevent this (this must be in an unsafe block): `fixed(byte* ptr = byteArray)` Now in ptr you have to pointer to the byte array, and inside the fixed block, it won't move to anywhere else. After that, IntPtr is not a good idea. The JIT can compile your code to both x86 or x64 based on the computer, while the C++ code will always remain the same. This means your IntPtr can switch between 4 or 8 bytes length depending on the compuer your code runs on, while your interop call expects a fixed size regardless of architecture. If your C++ code is x86, then use `uint`, if it is x64 then use `ulong`: `uint ptrData = (uint)ptr` this ensures that you pass the data with correct size to the C++ code. Now that you have the pointer, you can interop your C++: public static extern void DoWhatever(uint arrayPointer); //x86 c++ code public static extern void DoWhatever(ulong arrayPointer); //x64 c++ code unsafe void YourMethod() { byte[] yourArray = new byte[60000]; fixed(byte* ptr = yourArray) { uint rawPtr = (uint)ptr; //x86 c++ code ulong rawPtr = (ulong)ptr; //x64 c++ code DoWhatever(rawPtr); } } Since we are working with pointers, it doesn't really matters if your C++ method has a parameter of `unsigned char*`, `unsigned int*` or `int*` all of them will have the same size. At the interop calls, you only have to take care of the size of the parameters. This was the "plain" solution, if I know right (correct me if not) C# allows an attribute for Interop calls that lets you pass arrays to the native (c++) code (creates the pointer for you automatically).
&gt;doesn't rely on a c++ application to host the .net scripts There is a reason Unity runs on C++, to squeeze out as much computing capacity as possible.
Not good idea for games, as they has too much overhead (just as Enumerators). For async stuff, Unity has the Job system, where you can add "dependencies" so it is ensured that Y job will only run if X job finished.
Probably personal preference. Some people just declare private variables like this _variable. I personally just make the private member like this variable and the public member Variable. 
Not true. It doesn't matter if someone does it or not. If that's what helps them recognize a private vs a public variable then it's fine. 
Don't do it.
It's a personal preference. The *majority* C# style seems to be `_` instead of `m_`, but fighting over this is one of the biggest wastes of time in programming. When entering a new project/joining a new team, do what the existing code already does. When starting a new one, pick a convention and never break it. That's the rule that actually matters here. To me the *bigger* problem is the reason we use fields at all: we don't have enough auto-property syntax to cause the compiler to synthesize a backing field, so you have to do SOMETHING with those backing fields. *Sometimes*, that backing field ends up looking like an obvious local variable/parameter, such as in a constructor: private string firstName; public string FirstName { get { return firstName; } set { firstName = value; RaisePropertyChanged(); } } public Person(string firstName) // OH NO This is one of the places where C# feels a million years old. In some other languages, fields ARE properties, and change notification is automatic or a keyword. This is the 99% argument for prefixing fields, and will be at least partially addressed by some future C# feature that will synthesize properties based on constructors. Except that one won't generate INotifyPropertyChanged either so it'll be *yet another* new property syntax sugar you can't use for a big chunk of types. Sigh. Some would argue the REAL problem is English only has two cases. I think these are better points around the problem: * It is rare that a local variable or parameter name clashes with an intended field name. * It is not rare enough that you won't see it at least once on any significantly-sized project, so you need a rule for what to do. * It is more important that you do the same thing inside a codebase than that the conventions you adopt are widely accepted. To that end, I think these rules work: * "Fields have a prefix". This works and doesn't increase cognitive load if you follow the convention. * "Use a different local variable name". Bad names work best in the narrowest possible scope. Honestly I don't think about it a lot. I've been doing professional C# for 15 years and all of my teams have used `_thisNotation`, and we all have agreed fields need to stick out. If I joined a team tomorrow that didn't, fighting for a change would be the last thing on my mind. 
The key word there is "them". Since it hasn't been a standard convention in well over a decade, to others it may seem useless and repetitive.
I see it as useless and repetitive, but as far as programming goes it doesn't matter what you call it.
I have read almost all of the official documentation. It's like 1800 pages long. They have four separate sections that talk about security/authentication (each for different types). It definitely helped to read, but there's a ton of unanswered questions (more likely answered but i lack the skill to interpret). I'm really just trying to set up 2 roles, Admin and basic. Should that not be possible with the default UI? Or will I have to override the identity library to do that? The goal is to give admins access to making changes to certain views that basic users will only have read access to. Sorry its remedial, but dang I'm struggling. Thank you again for the advice.
Yea, I very much remember it from college days of c++
&gt;Safari is broken in the current stables releases for iOS/macOS. Will be fixed in the next releases. This is not a stable release, which is why I specified that other Blazor stuff does run. There isn't a crash, nor is there noticeable CPU usage; it simply doesn't appear to react to clicking the Start Test button at all. 
If you want to reduce INotifyPropertyChanged boilerplate code, you might find [Fody/PropertyChanged](https://github.com/Fody/PropertyChanged) interesting. The code you wrote could be replaced by this: public string FirstName { get; set; }
standards as i've seen: _privateVariable - within scope of the class PropertyVariable / PublicVariable localVariable - within scope of a method Makes it understood at a glance the scope of the variable you're using. And as is true for all programming preferences, this way is the only correct way and all other ways are terminally incorrect, sinful, and an abomination.
I'd say the choice between dapper and ef core comes down to how close to sql you want to work. All dapper does is map your returned data to an object. It removes a load of boilerplate, does so very well and as such is extremely quick. It does nothing really complex so I don't agree with other comments saying that ef core is more future proof. Personally I prefer dapper, as I like having more control over the sql, and I prefer the simplicity of knowing 'this is the sql that is running, and I just get my standard object back. No frills, or any gotchaes'. 
I love Postgres. It's a fantastic database to work with and it has a ton of great features. While it's cross platform, it's performance on Windows is lacking compared to running in Linux, which is very good. I don't see anything wrong with your plan, so move on forward. Good luck.
It was used back when people didn't have IDEs to highlight if a variable was private/public/static etc, doesn't have any use today.
Microsoft did not drop it. This notation is actively used in the .NET Core repositories ([corefx](https://github.com/dotnet/corefx/blob/master/src/System.Console/src/System/Console.cs), [coreclr](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Variant.cs), [corert](https://github.com/dotnet/corert/blob/master/src/ILCompiler.Compiler/src/Compiler/AnalysisBasedMetadataManager.cs), [roslyn](https://github.com/dotnet/roslyn/blob/master/src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/CSharpLocalAndMethod.cs), [cli](https://github.com/dotnet/cli/blob/master/src/Microsoft.DotNet.Cli.Utils/Env.cs)) itself do not enforce that rule for private or internal fields. And the official [coding guidelines document for .NET Core](https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md ) even has an example using underscores in private fields. 
&gt; It's not recommented anymore for C#. See [my comment](https://www.reddit.com/r/csharp/comments/950s3l/prefixing_private_fields_with_m/e3p42w2/) - this is not true. .NET Core repositories ([corefx](https://github.com/dotnet/corefx/blob/master/src/System.Console/src/System/Console.cs), [coreclr](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Variant.cs), [corert](https://github.com/dotnet/corert/blob/master/src/ILCompiler.Compiler/src/Compiler/AnalysisBasedMetadataManager.cs), [roslyn](https://github.com/dotnet/roslyn/blob/master/src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/CSharpLocalAndMethod.cs), [cli](https://github.com/dotnet/cli/blob/master/src/Microsoft.DotNet.Cli.Utils/Env.cs)) itself do not enforce that rule for private or internal fields. And the official [coding guidelines document for .NET Core](https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md ) even has an example using underscores in private fields. 
The Roslyn GitHub also has a discussion [#1](https://github.com/dotnet/roslyn/issues/22884), [#2](https://github.com/dotnet/roslyn/issues/26992) and it's pretty clear that underscores are still allowed (and preferred over `this.field`) for now. 
&gt; we don't have enough auto-property syntax to cause the compiler to synthesize a backing field, so you have to do SOMETHING with those backing fields. There is a proposal to add a `field` keyword to the language that would effectively fix this issue: [csharplang#140](https://github.com/dotnet/csharplang/issues/140). There's also [csharplang#133](https://github.com/dotnet/csharplang/issues/133), which seeks to allow fields scoped to specific properties. Unfortunately, discussion on both issues has died down and neither has attracted significant attention from the language design committee.
If by some devs you mean the .NET Foundation members (including Microsoft, Xamarin, Mono, etc.) then yes, they use it. This notation is actively used in the .NET Core repositories ([corefx](https://github.com/dotnet/corefx/blob/master/src/System.Console/src/System/Console.cs), [coreclr](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/src/System/Variant.cs), [corert](https://github.com/dotnet/corert/blob/master/src/ILCompiler.Compiler/src/Compiler/AnalysisBasedMetadataManager.cs), [roslyn](https://github.com/dotnet/roslyn/blob/master/src/ExpressionEvaluator/CSharp/Source/ExpressionCompiler/CSharpLocalAndMethod.cs), [cli](https://github.com/dotnet/cli/blob/master/src/Microsoft.DotNet.Cli.Utils/Env.cs)). And the official [coding guidelines document for .NET Core](https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md ) even has an example using underscores in private fields. The Roslyn GitHub also has had a discussion on this, [#1](https://github.com/dotnet/roslyn/issues/22884), [#2](https://github.com/dotnet/roslyn/issues/26992) and it's pretty clear that underscores are still allowed (and preferred over `this.field`) for now. 
The coding guidelines you cite only mentions an `m_` prefix as a example of a difference from the standard therein described, and only one of the files you cited contains members named using that style (i. e. the `m_` prefix). Their convention, for something like the last 20 years, has been to prefer `_varname` to `m_varname`.
This is in my opinion the worst possible convention. If you need to name your private fields differently from variables use just _ . I prefer to use simple camelCase but lately I just dropped private fields completely and use private properties mainly because private string Name { get; } is no longer than private readonly string name; and it is easier to switch to public property if you need to.
A basic little video game [https://itch.io/game/summary/287157](https://itch.io/game/summary/287157) testing the engine for a larger little video game.
Absolutely correct that consistency within a codebase is more important than consistency with generally accepted stylings. Those stylings are opinions, while internal consistency is objective and measurable.
My understanding is that "m_" is a C++ convention that came about because leading underscores can cause problems in C++. The best practice in C++ is to never begin your identifiers with a single underscore. The reason for this relates to the fact that C++ name mangling also adds leading underscores to names; also, in various cases names starting with a single underscore are reserved. Beginning your names with "m_" gets around this problem since now your name begins with a letter. Since C# doesn't have this issue, you can just omit the "m".
Preferred by them, not by me :) 
Always! 
I use *m_PascalCase* for fields, *PascalCase* for anything public and *camelCase* for locals/parameters. My reason is that I do not want to have fields cluttering up my intellisense. Nothing more annoying than having locals and fields mixed.
Unless you plan to take advantage of some special feature of a NoSQL Database you can use SQL server. If you have a license to SQL you can store the unstructured data in a single column. Depending on what version you have XML or JSON. One maybe best over another. For example the newer version of SQL you can query the JSON column if needed. Depending on the data too, you could even get really fancy and store the data in a column store which does a really good job at compressing the data. Since it is importation to sync the data you should add a column for a hash of the data and a date time stamp of the last change.
You are arguing an extremely minor and pedantic point that is mostly a non sequitur. It's neither necessary nor productive to respond to every comment that might be construed as disagreeing with you.
The official Microsoft C# naming guidelines specifically do not mention private fields. I think it might be "too hot to touch". Or they are only concerned with how your application looks "from the outside".
From what I heard PostgreSQL has become a very capable database server with many advanced features. Look into "Marten" if you like the idea of a document storage layer between your code and the database.
It'd be great if they added some new syntax, especially syntax that generates common boilerplate like that from `INotifyPropertyChanged`. The `_` symbol could be used to refer to the backing field like this: public string Name { get { return _; } set { _ = value; //do other stuff } } ...though that may conflict with using `_` as a discard for async calls. Some syntax suggestion for a property that implements the common pattern for `INotifyPropertyChanged`: public notifying string Name { get; set; } I was hoping that they'd introduce some syntax sugar for the new `Record` declarations to cover databinding scenarios but it doesn't look like they will, at least not when records first hit general consumption.
The only time I consistently use hungarian notation are for GUI controls (i.e `txtUserName`). In this way, it allows me to also have a UserName property without conflict. Other than those cases, I would *allow* myself to use hungarian for dynamic types but I haven't come across a scenario where simply naming the variable appropriately isn't sufficient and would require me to prefix a type.
You are wrong on pretty much all of those points. This isn't Hungarian notation. Hungarian notation deals with indicating what the variable is used for. A classic example is using `colPrice` and `rowPrice` to refer the to spreadsheet column/row that stores a price. (A common anti-pattern incorrectly called Hungarian notation is to prefix `i` for integer, `s` for string, but that doesn't match this either.) It was never an official naming convention. At not least since I started programming in the 1990's. Microsoft neither recommends nor not recommends it.
StyleCop is largely crap. It also does shit like force you to put imports inside namespaces. FXCop enforced the real rule, which has already been explained. 
Hell no. FXCop, which is now built in, is great. But StyleCop was just plain stupid.
&gt; This is in my opinion the worst possible convention. If you need to name your private fields differently from variables use just _ . What if I want to distinguish between member, static, thread-local, and async fields?
I've always assumed this doesn't work in Xamarin but I'm going to give it a look this week.
It's a personal preference issue, and the guidelines don't say anything. That means there are a lot of people who really care about their own preference and get really upset about it. Sometimes they grow up and realize "arguing about this practice doesn't help you ship correct code".
From the wikipedia entry for [Hungarian notation](https://en.wikipedia.org/wiki/Hungarian_notation): &gt; "The notation is sometimes extended in C++ to include the scope of a variable, optionally separated by an underscore." &gt; &gt; "m_nWheels : member of a structure/class, integer" From [Microsoft's article on Hungarian notation](https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-6.0/aa260976\(v=vs.60\)), reprinted in 1999: &gt; Long, long ago in the early days of DOS, Microsoft's Chief Architect Dr. Charles Simonyi introduced an identifier naming convention that adds a prefix to the identifier name to indicate the functional type of the identifier. &gt; &gt; "This system became widely used inside Microsoft. It came to be known as "Hungarian notation" because the prefixes make the variable names look a bit as though they're written in some non-English language and because Simonyi is originally from Hungary." From Microsoft's [Coding style conventions](https://docs.microsoft.com/en-gb/windows/desktop/Stg/coding-style-conventions): &gt; m_ Data member of a class &gt; m_pszMyString A pointer to a string that is a data member of a class. From Microsoft's [.NET General naming conventions](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/general-naming-conventions): &gt; "DO NOT use Hungarian notation." 
I don't see why you'll want that but if you do leave normal members to be the default (i.e. the simplest convention) and prefix the rest. BTW what is an async field?
After tens or installs over the years defaults rule. In the beginning it was very important to have solution explorer on the left and editor on the right with other windows in their respective very important positions. All fonts had to be exactly "as desired" with all colors tweaked for maximum performance. However, after tweaking studio for N-th time I just gave up and now I am fine with anything. Solution explorer on the left? Fine. On the right? Fine. I no longer spend my time on initial setup and just adjust things only when I need them. 
An async-local field is like a thread-local field. It looks like a static field to one async call chain but is completely separate from any other async call chain. You most commonly use it the same way we would use a thread-local. But unlike a thread local, this will travel with the async function as it jumps from one thread to the next. Personally I use it for logging. I can shove a unique web request id into an async local, then reference it whenever I write to the log. https://msdn.microsoft.com/en-us/library/dn906268(v=vs.110).aspx If you used "ambient transactions", I would assume that you'd want async-local involved as well.
Ah cool. Looks more useful than thread locals in today's async environment.
Yep. I don't really use thread local anymore because it's useless when mixed with async. 
Windows is very old, for an OS that is still being used anyway. There have been a number of conventions at Microsoft over the years. Hungarian notation was very much an official convention at Microsoft in the Win16 (Windows 3.x) days. Most of us learned the Windows SDK from the Petzold book which used it everywhere. One of the reasons it took Hungarian so long to die is because so many influential people at Microsoft adopted it during this period, and published books read by people like me who copied it. `col` and `row` aren't classic Hungarian prefixes, at least in the context of Windows programming. You see things like `lpcstr` which is a long pointer to a constant string and `hwnd` which is a window handle.
As with most style questions, there is no correct answer. When in doubt, just follow what the other people in your company are doing.
I think it's pretty misleading to say that Javascript and C# are "very similar". One is very classic OO. The other has prototypal inheritance and OO is weirdly optional. They are pretty far apart in many aspects. And the areas where they share concepts, the implementation is just so different.
Well, it finally worked! This is my final code for everyone who have this problem on the future: C# CODE: On file.cs private IEnumerator SendTexture() {
While things like `hwnd` were standardized, the spreadsheet example was used to explain how you were supposed to extend it for application specific concerns. As for "never an official naming convention", I'm referring to the practice of using `m_` and `s_`. 
I've been poking through the .NET Core codebase. It's chaos in there! Some are prefixed with _ others not. Some files use tabs. Tabs! others 4 spaces. I'm sure I found one with 2 spaces. Hanselman did a blog about it which annoyed me a bit. His argument was "Working code is more important than style". I'd say a consistent style reduces congnitive dissonance/disturbance which will contribute to better software. 
Are the last two defined in the declaration, or by usage?
I've stopped before to refactor to a consistent style. It's mostly automated. One of the things that bothers me when people don't follow our convention is that Resharper will change the alert icon from green to orange. Sounds tiny, but that thing is crazy useful especially with the red/orange/green marks in the scroll bar. Otherwise I do like your advice. Be sensible, be kind, be humble.
Interesting. I didn't know that.
"Refactor to a consistent style" is not the same kind of change as "Refactor to a different style". If your codebase has an inconsistency, you need to get it to a consistent state. If you already have a consistent state, deciding to change conventions means you're procrastinating the real work.
&gt; I'd say a consistent style reduces congnitive dissonance/disturbance which will contribute to better software. You're not wrong, but Hanselman's point overrides. Stylistically proper code that doesn't work is never better than ugly code that does, and reality means that we are sometimes forced to choose between meeting the deadline with ugly code that does what it's supposed to do, and missing it with properly formatted code that still does what it's supposed to do.
&gt; Some files use tabs. Tabs! others 4 spaces. I'm sure I found one with 2 spaces. I find that to be inexcusable. It's not hard to turn on "format on save" so that that kind of thing is automatically handled for you. That's part of the reason I hated StyleCop. WTF do so many people love a tool that forces us to manually do the job of an auto-formatter?
Microsoft's .NET General naming conventions have nothing to do with it. Those are rules for **public** APIs, not what you call private fields or local variables.
Lol so true :)
Very true, but stylistically consistent code that works is superior to stylistically chaotic code. I get the time pressure thing, but where schedules are that tight I think the project has other problems (Been there, left :) )
What matters for style guides most is consistency. I'm not a fan of "m_" but if it's consistent across the entire solution then it's not hurting anything.
Thanks for the correction.
EF Core eliminated a lot of the power to deal with complex situations that classic EF had. So while performance may be better (I haven't tested it myself), you will be fighting against it a lot more (this I have experienced).
If you are talking about data, EF caching is only there to deal with EF issues like lazy loading. Since the cache only lasts as long as the data context, and the data context is short lived, it's not really an effective caching strategy. And while I don't know about EF Core, classic EF had a stupid slow materializer. My database requests were CPU bound, literally spending more time waiting for EF than waiting for the database itself.
You can allow Identity to use EF Core while the rest of the application uses something more sensible. That's what I'm doing (until I get around to writing my own storage provider for Identity).
&gt; EF Core is probably more futureproof They've already had one major breaking change between 1.x and 2.0 that caused them to rewrite all of the database providers. I don't exactly trust them to not do that again, especially since EF Core doesn't implement all of the basic features of an ORM such as stored procs yet.
Try Tortuga Chain as your ORM, you may be pleasantly surprised. Of course I'm biased, being one of the developers, but it has Dapper-like performance, removes a lot of the boiler plate needed for CRUD operations. https://github.com/docevaad/Chain
Only two open instances? Jeez. And here I thought I was a piker. I have a database solution (SSDT), a web service (old-school asmx web app), a web-app plugin solution with 20 projects of partial web apps, a data shred/import windows service solution, and a data export scheduler windows service solution. Each of those uses its own instance of VS2015. I also have an SSRS report template project and a couple of WebApi2 sites with JS front-ends that use VS2012. I have an old DACPAC-style database solution with two schemas and some command line utilities that require VS2010. And I have an old WinMo compact framework 3.5 app that requires VS2008. I don't generally have them all open at once, but it's not uncommon for me to have 4-6 of them open.
[http://www.worldwidewords.org/articles/people.htm](http://www.worldwidewords.org/articles/people.htm) \&gt; " This began to be questioned in Victorian times, and the pseudo-rule grew up that the plural of person is **persons** when a specific, countable number of individuals is meant, but that** peopl**e should be used when the number is large or indefinite. " A list is indefinite, so it's people.
I meant two simply on the same repo. I'm usually at 3 or 4
From the wikipedia entry for [Naming Guidelines](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines): &gt; Although adopting these naming conventions as general code development guidelines would result in more consistent naming throughout your code, you are required only to apply them to APIs that are publicly exposed They still recommend it for non public. It's just actually required for public facing.
if you are using lazy loading in ef core you are not doing it right. ef core is really fast, i have had no issues whatsoever on speed. 
I agree, this does not seem possible.
 Which rule do you find impossible to not apply to both public and private? [Capitalization Conventions](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions) states you should use both camel and pascal case, and to only use pascal for the public API. Camel case would then be for parameters, and private fields.
Tfw a machine learning algorithm is smarter than you.
I'd use .net Core. I have 2 producton web apps(core) running on 2 ubuntu boxes. As for IDE it depends on work I user Rider i think its good, it supports Xamarin too. I think VS code is great and will only get better. Omnisharp(plugin) for VS code to run c# and just the .netcore packages for linux and you should be set to go. 
This looks fantastic and doesn't look complicated. Exactly what I need. Thank you!
I'll agree with you on the first point. As for speed, I still hate the access patterns that EF encourages. For example, forcing you to do a read before each update. Or materializing fat object graphs when what we usually need are updatable projections. That's why I created my own ORM. I could live with the EF classic performance hit, but not the way it tap-danced over my database.
You're welcome. I use it most often to generate HTML emails, as it gives me the ability to run simple presentation logic to decide whether a piece of HTML should be shown based on whether a value is provided. The syntax is simple enough where a front-end developer can go in and make updates.
What do you want to do? .NET Core is the future, but it's currently limited web applications. Use Mono if you want to create mobile apps with Xamarin. As for IDE, I've found VS Code to be a really nice experience once properly configured. ([If you'd like to see an example, try out this example Vue/.NET project i made and let VS Code install recommended extensions](https://github.com/phil-harmoniq/vue-template)) Other than that I've heard Rider is pretty good.
Plus, it's free and broadly supported!
On the other side, if you like writing LINQ and staying db vendor agnostic, EF Core can make that a reality. The integration with Expression Trees is underrated (compile your SQL from abstract syntax).
.NET Standard for SQL Server and PostgreSQL. .NET Framework adds SQLite and Access.
Just so we're clear, I'm also against `_` and adding syntax for `INotifyPropertyChanged`. I'm just linking the relevant proposals. &gt;While it would be convenient, I think that ties the language too closely to a specific set of libraries. Yup, this is one of my favorite lesser known things about C#. The list of types the compiler is even aware of [is really really short](https://github.com/dotnet/roslyn/blob/cce4ee978062a05f9b12d7dc47e586f99e83e4f0/src/Compilers/Core/Portable/WellKnownTypes.cs) and it makes relatively few assumptions about how they look. It also tolerates them missing pretty well, it only screams when they're required. (EG: you use tuple syntax without `ValueTuple` defined.) (For example, [here's my own, tiny core library](https://i.imgur.com/E1EnnKL.png) from a project I'm currently working on. Note the lack of `Int16`, `Int64`, and many other types you'd normally expect from the core library.)
Four monitors? I thought I was pushing it having three on the go. I've got a Surface with Mini DP which I kinda want to hook loads of monitors up to one afternoon but none of our work monitors support daisy chaining DP. Anyway, I have code left, Solution Explorer right pinned, Find Results/Output/Errors/Task List bottom auto hide, Cloud Explorer left auto hide. Keep number of open tabs to a minimum. I find it works alright but yeah I'm planning on switching to some bigger monitors soon.
Our tool *do* the heavy lifting of code formatting. The problem is enforcing the same settings across multiple people and years.
We use mono at my company and it works well but there are definitely quirks to work around (mostly on osx though). We are moving towards .net core, and it feels like a step up. As long as you're not depending on any libraries that are not ported to .net core.
So an array would be persons?
I'm looking to learn console and web apps in .NET. So from the comments above, Mono will work fine, but .Net Core seems to be the "Step up?"
I'm looking to learn .NET. Should the learning experience be pretty similar? Workflow, etc?
 Hmm, depends, I'm not quite sure how that would work. On the front, it's a defined amount, however, it could definitely be a different amount. Take `private void Foo(Person[] persons)` `{` `// do something` `}` is it persons or people? It's an array, so it's defined, but we have no idea how many and you can pass in constant amounts. What about something like `Person[] persons = new Person[5];` `persons = new Person[298484];` I hate English, so I don't have a good answer to this :)
&gt; In general, though, I'd rather the language have this feature. It's been discussed, but there's no consensus on a spec.
Rider and visual studio mostly follow the same philosophy. Main disadvantage with learning in rider is probably that most tutorials will assume visual studio. Main advantage with learning in rider is code hinting. Can help you get used to linq etc. Don't trust the hints blindly though. :)
See this MSDN: https://msdn.microsoft.com/en-us/library/system.data.entity.design.pluralizationservices.pluralizationservice.createservice(v=vs.110).aspx
I don't think you understood what I meant. I'm saying individuals should use any formatting they personally prefer so that you do not need to enforce the same setting across multiple people and years. So if someone prefers tabs when they load the project up on their machine they see tabs, but if another person who prefers spaces loads it up on their machine they see spaces. Then the source code uses whatever formatting rules the project lead decided to use, but that is irrelevant to individual developers because they see the formatting style they prefer. 
It's an intern at m$ watching you type live and providing suggestions. 
They used coding and algorithms
get asp.net core if that's your usecase. It's not going to be harder..its just new(in age) and if your learning then its all going to be new.. Just like i wouldn't hand you a c# 1.0 book being more than a decade old..
It's using [Humanizr](http://humanizr.net/) to pluralize if the type inherits from IEnumerable etc. The code for it is [here](https://github.com/dotnet/roslyn/blob/14aed138a01c448143b9acf0fe77a662e3dfe2f4/src/Features/CSharp/Portable/Completion/CompletionProviders/DeclarationNameCompletionProvider.NameGenerator.cs).
You meant e.g., not i.e. _i.e._, or _id est_, literal _that is_, is for when there is one, usually obvious, conclusion. Example: it was the colour of clear summer skies **i.e.** blue. _e.g._, or _exempli gratia_, literal _for example_, is for when there are many possible examples. Example: Taking on great responsibility can invoke many emotions **e.g.** anxiety, excitement, happiness, dread, fear, etc.
Is this the easiest way to do syncing? Or would replication be more applicable? The database will be used by about four people in-house. All users will have the entire database on their client, and there will be a central server with the same data. Once a user changes someone, that change will push to all the other clients. I don't think I need conflict resolution because the users will be coordinated on what they're working on. User a might be using something user b created, but they won't be editing, say, a textbox at the same time. Because this is a data editor, this is being built alongside the actual product, I was trying to find something simple. Thanks a lot for your help.
Let's use SQL to hack their database!
Yeah eg and ie, the sort of things you learn in 2nd Grade English 😁
Since I haven't seen anyone post it yet, Microsoft SQL server 2017 actually runs on Linux. There is a docker container that's super easy to use if you want to demo it.
Are you sure about that? Because I am 99.99999% sure that Jestar342 is not a bot. --- ^(I am a neural network being trained to detect spammers | Summon me with !isbot &lt;username&gt; |) ^(r/ spambotdetector |) [^(Optout)](https://www.reddit.com/message/compose?to=whynotcollegeboard&amp;subject=!optout&amp;message=!optout) ^(|) [^(Original Github)](https://github.com/SM-Wistful/BotDetection-Algorithm)
I get it. I really do: I work in a code base where files have inconsistent indentation, inconsistent line endings, inconsistently applied naming conventions, and other formatting problems. But: project leads change, machines and tools still have to be individually configured, and there's always going to be a *lot* of room for individuals to introduce inconsistencies either accidentally or through pigheaded stubbornness. If you can automate the task to the point that it can be performed by the machine, you'll just move the problem somewhere else, because the problem is *people*. I don't know of *any* place that manages the sort of automated code refactoring you're suggesting (specifically: I don't know of any place that automatically *renames symbols* on check-in--whitespace usage is a different issue), and I suspect the matter is almost insoluble in the rare situations here it might actually matter (or that it matters in the cases where it *does* for reasons that are basically unrelated, like methods and types that are just too damned big). A better thing to investigate would be ways to force the sorts of metadata people are trying to encode in variable names to be part of accessing that value at the language level. That might mean requiring all instance members to be accessed through `this`, every time, or creating an explicit context to be passed to threads or `Task`s, or whatever. It's probably not automatically renaming symbols on the fly to match the consumer's preferred format.
Thank you for the quality response! TIL!
Good robot
I’ll get to work on the GUI interface using Visual Basic
I've been writing c# for what seems like a long time, and I've never heard of "async local". My first few google searches haven't provided any obvious clues what it means. What is it?
Yeah, in either case, it's also just more likely that people who are querying that database are going to likely assume "people". Although, I could see a development team that might standardize there naming convention to always pluralize by simply adding an `s` or `es`, even when it's improper. Perhaps because there is some system in place in code that utilizes this convention, or to reduce human error or misconceptions or are ambiguous like: Single | Valid Plural Form| Invalid ---|---|---- moose | **moose**| mooses octopus| **octopuses** | octopi formula | **formulae** *or* **formulas**| - matrix |**matrices** *or* **matrixes** | - 
Latest commit is in 2017, is it dead ?
So that's why Bing has been slower lately.
That's good to know about the software limitations of the scan guns, I hadn't even thought about that (although I do recall my IT guy saying something about Windows CE or some old version on our 20+ year old guns). I'd be curious to see if .Net core can run on older versions of scan gun software. Also thanks for explaining the SME thing, I have a meeting set up tomorrow with a local shop owner who's my inspiration Fort his whole project. Hopefully he can shed some insight on what to shoot for and what shop owners want :) 
I guess with 4 people, you don't really need to worry about concurrency or caching. IIRC, Azure App Service had the capability to sync a server site datababse with a client side database. I'm not suggesting you to use Azure, though. You can host the whole thing in-house/offline or build something based on their code. Source code for .NET Client: https://github.com/Azure/azure-mobile-apps-net-client/tree/master/src/Microsoft.Azure.Mobile.Client/Table/Sync Source code for .NET Server : https://github.com/Azure/azure-mobile-apps-net-server 
This is exactly what .NET Core/ASP.NET Core/EF Core were made for, I don't know why you're complaining lol. 
Honeywell has some newer models in their Dolphin line that run an outdated version of android instead of an outdated version of .netCF, if I remember correctly so does Moto. As to getting core compiling on them, it really depends on their cpu types, unfortunately I don’t recall the specs off the top of my head, but if you’re interested more than just “huh, that would be neat” I’ll dig a little deeper. 
The *variable* would be `people` because the length of the array that the variable represents is not fixed, as you pointed out. The array as a const or static value would be persons because the variable could not change, thus its length is fixed and known and the "people" are countable. Oh boy was that pedantic. 
Yea, took me forever to figure that out. I don't know why they had to completely redo the UI when it exposes the same basic functionality.
The prefix m_ is more of a c++ thing but you see it in c# code bases from time to time. 
This was true a long time ago and is now used only due to this tradition, unless you are on really old tool chain. 
And you have table-valued functions that don't break the optimizer.
I can also make it DB agnostic by writing ANSI SQL. Or by using other ORMs that expose things that EF doesn't while still maintaining portability. For example, EF Core doesn't have an upsert or table-valued function support, things that Chain handle easily.
I love how I'm fucking getting down voted even though what I'm saying is entirely true. I happen to be a developer and I see nothing wrong with someone naming their variables like that. The guys on my team don't do it anymore, but the guys who were before us did. I've never had a problem with identifying variables that were written that way. If you're really going to bitch and moan about how someone names their objects then you need to get a damn life. You want to assume someone isn't a good developer when you're complaining about someone putting an m somewhere. I would hate to see what's wrong with your application then.
never knew this. Thank you.
Also explains when I tried to write pen and intellisense suggested penises.
They're likely using some of Bing's natural language processing API to find plural words for specific object names. 
This man aggregates.
For SQL Server on Linux only the Express version is actually free I believe. I still use it. The Express version is good enough for my needs and I haven't run into any limitations for my small sites. Also I'm used to SQL Server management and maintenance. 
On Windows you can also use WSL and run aspnetcore within a Linux environment. 
Mono is great, but .NET Core is where it's at for modern cross-platform C#. I've got ASP .NET Core websites and a game in .NET Core running fully cross-platform. My dev environment is 100% Linux as well, using the CLI interface and VSCode. I would definitely focus on Core, it is the future of the framework and where Microsoft is focusing all the new cool features. ASP .NET Core is great and I highly recommend it.
I've been migrating all my web apps to aspnetcore and MSSQL from WebForms, MVC, Rails, PHP and even ClassicASP(!) and ColdFusion(!!) You can use SQL Server Express on Linux. If your requirements fit within the Express version it's a nice option if you are used to SQL Server. Otherwise I'm always reading that PostgreSQL works well with aspnetcore and EF. My Rails sites use PostgreSQL so I've been trying it out and so far it's been good. I haven't really gotten too deep with it yet but it's good enough where I'm considering it over SQL Server for my next project. I also host all my sites on Linux and haven't run into any issues related to aspnetcore. I dare say it's actually been a more pleasant experience than hosting on IIS even though I have been using IIS and its siblings since it first came out 20 years ago. I use EF Core. I don't know Dapper well enough to make a comparison there. I say go for it. From my experience aspnetcore runs well on both Windows and Linux so if you run into issues you can switch. As for SQL Server and PostgreSQL I don't know enough yet, but they seem pretty easy to swap as well.
Oh wow, that's awesome. Will definitely look into this.
If you are making console and web sites I'd go with dotnetcore and aspnetcore. I like Visual Studio Code. Get the C# and GitLens (if you use git) extensions. If you use SQL Server there is also an mssql server extension by Microsoft.
I currently test inside a VM but I'll definitely look into WSL too. Thanks!
That's great to hear and makes me feel better to invest my time in this. Thanks!
Yeah, I definitely did consider SQL Server, but the long term costs frighten me. Especially with how complex the licensing seems to get. I even thought of just sticking to Azure, but since this is more of a personal project for now, I figure I would try to keep costs as low as possible for now. But thanks for the info.
Oh wow! I appreciate your comment here :) Will definitely check it out!
Thanks! Reading this makes me feel better about spending more time going towards .NET Core. Much appreciated.
TechEmpower benchmark's made by Microsoft for ASP.NET Core use PostgreSQL and Linux. If I was creating a hosted personal project today, that is probably what I would plan to host with (Linux and PostgreSQL). The distinction between EF Core and Dapper is less clear. They are useful for different reasons. You might want to use both at the same time in some projects. If you make use of repository interfaces, then you can usually mix both approaches where they make sense. Entity Framework is good for modeling reusable, common entities in your application and Dapper is great for one-off queries and performance sensitive data access.
Microsoft .NET Core Libraries (CoreFX) coding style uses `_` prefix. [https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md](https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md)
Not true that there are no guidelines for CoreFX, coding style for CodeFX uses underscore `_` [https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md](https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md) 
Mostly pre-defined naming conventions. If you type `UdpClient` it will auto-suggest: `udpClient`, `client` and `udp`. If you type `List&lt;UdpClient&gt;` it will suggest `udpClients`, `clients` and `udps`. and so on with plural versions.
I edited my main comment, .NET Core repo has this guideline: &gt; We use _camelCase for internal and private fields and use readonly where possible. Prefix internal and private instance fields with _, static fields with s_ and thread static fields with t_. When used on static fields, readonly should come after static (e.g. static readonly not readonly static). Public fields should be used sparingly and should use PascalCasing with no prefix when used. Apart from `this.camelCase`, .NET Core's rule seems appropriate for more complex projects. 
You shouldn't use WebClient any more! Use HttpClient instead. WebClient has been kinda deprecated since .NET Framework 4.6.1
According to .NET Core coding guidelines: &gt; We use _camelCase for internal and private fields and use readonly where possible. Prefix internal and private instance fields with _, static fields with s_ and thread static fields with t_. When used on static fields, readonly should come after static (e.g. static readonly not readonly static). Public fields should be used sparingly and should use PascalCasing with no prefix when used. Don't know why you are being downvoted. 
`s_` and `t_` are still official notations [According to .NET Core repo contributor coding guidelines](https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md): &gt; We use _camelCase for internal and private fields and use readonly where possible. Prefix internal and private instance fields with _, static fields with s_ and thread static fields with t_. When used on static fields, readonly should come after static (e.g. static readonly not readonly static). Public fields should be used sparingly and should use PascalCasing with no prefix when used.
Mono, .NET Core and .NET Framework are implementations of [.NET Standard 2.0](https://docs.microsoft.com/en-us/dotnet/standard/net-standard) . Mono and .NET Core share different goals: * .NET Core is mainly a complement to ASP.NET Core and its main focus would be to provide the best performance for ASP.NET Core based apps (and all apps in general). * Mono was the OG open source .NET Framework that had the goal to be cross platform so it supports obscure architectures like PowerPC and obscure platforms like watchOS or PS Vita. So cross platform projects like Unity and Xamarin, which need to support as many platforms as possible, use Mono. While server projects require high performance run on .NET Core. .NET Core also gets the new high performance APIs first. 
Actually came here to comment this. Since OP is referring to Xamarin, mono would work very well as most of the newer versions of just about any dependency has been ported to .net standard. 
I would not object to that.
Interesting. 
Meditative exercises? Anger management classes?
OP sure has a penchant for old libraries and technologies. His post history is all about AngularJs! RIP.
Try to port stuff you made from Java to C#. Google stuff you don’t know, and then you’ll know it, I think the biggest difference in C# compared to Java is delegate methods and types, but that’s not a essential to learn right away
Awesome! Much appreciated :)
You learn latin abbreviations when your 7 years old? You must be super smart. On my planet 7 year olds are mastering bike riding and can probably talk your ear off about their favorite dinosaur or animal, or whatever they're into, but they're still working out the 1/3 of our language that doesn't follow all the rules they just spent the last year learning. They are only just being taught the concept that words have "jobs". Noun/Verb/Adjective is cutting edge for these little people. I hope i'm completely missing your sarcasm, in which case, i'll woosh myself out.
I'd highly recommend PluralSight. They have a 10 day free trial. This is a good starting point: https://www.pluralsight.com/paths/csharp Anything by Scott Allen: https://odetocode.com/ https://app.pluralsight.com/profile/author/scott-allen Is usually great. Stick with C#. When you get to grips with you'll see it's a more evolved OO language than Java, IMO (properties, async/await, LINQ, and generics (with proper type inference)). 
https://nerdparadise.com/programming/csharpforjavadevs
[https://learnxinyminutes.com/docs/csharp/](https://learnxinyminutes.com/docs/csharp/) If you just want syntax use this site.
We need to teach it gollum's style of pluralization. List&lt;Hobbit&gt; nastyHobbitses\_myPrecious
LINQ [SelectMany](https://msdn.microsoft.com/en-us/library/bb534336(v=vs.110).aspx) seems to be what you want. `doc.SelectMany(e =&gt; e.Split(",")).AsArray();`
I ran a programming team through our transition from Java to C#. Our employer required we be programming Java one day and C# the next with no downtime. Nobody knew any C#. Study how iterators work. Ultimately, you can iterate over anything that is a subclass of iEnumerable. Also study how LINQ works, it'll let you access data with very little code without writing so many iterators. Study the basic types. Beyond that, just start writing code. Use the above knowledge, but otherwise pretend you're writing Java. When you hit something the compiler doesn't like, there will be some equivalent in C#, google it to find out what it is. 
Thank you so much for this response. Also, holy cow Blazor looks fantastic! This really helped me out and also gave me a ton of great reading material. You're the best!
Removed: Rule 7.
For anyone curious Microsoft have an "[experimental](https://docs.microsoft.com/en-us/visualstudio/intellicode/intellicode-visual-studio)" AI driven IntelliSense [extension](https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.VSIntelliCode) 
It's not replication and storing the unstructured data in a single column per row is an suggestion based on your question about mongo. The model is in the column so there is no difference between a change in the model or data. I know of no product that would give the tight integrations as you mentioned. I don't know why you would do this anyway given the ability to move data over the internet. This maybe something that would do a better job at automating it: https://ampliapps.com/sqlite-sync/ Still though, it sounds like you want an application that is off-line, but not really off line? Or are you really trying to notify users of changes from other users?
Hi Kirides, Thank you very much for your responses. Can you give me an example of using request context in a custom authorization filter ? Thank, Anuj
No they're not. They use stemming iirc to provide plural suggestions to names. It is likely the exact same thing that they use for entity framework (when you create a table "Person" usually it would create a db table called "Persons" or "People" inside the database when using EF migrations). There is a way you can interact with it directly to find the would-be table names, i've done it before, but can't for the life how to do it.
What major differences are you finding between Java and C#? I used to do Java and found transitioning to C# pretty smooth but I made that change around .NET 1.1 when both languages were simpler. Obviously all of the libraries were different which was challenging, but what else is causing you problems? There are very few places where you will *need* to use LINQ, lambdas, or unsafe so just ignore the stuff you don't get until you are ready for it. Maybe consider setting your project to .NET 2.0 or something to familiarize yourself with the features there then learn the new features of each release as you update it. 
The syntax of C# is mostly the same as Java, what in particular is bothering you? Any time you learn a new language there is a long period of being bad at it, because you are used to something else. You just deal with it and keep going.
I stared with Java and then I discovered C# and never looked back. I am assuming your biggest frustrations are rooted in the fact that you are used to Java (obviously) and you haven't quite mentally "mapped" everything from Java to C#. Learning C# is actually really easy but the hard part is learning what is available in the .NET framework (including standard and core) as well as all of the popular technologies available on NuGet. I suppose me saying that is splitting hairs because, besides for a few environments, the vast majority of C# codebases are coupled with .NET. Honestly, just find something you've done in Java and reimplement it in C#. Start simple and then progressively get more complex. If you need help with specifics, I am available and you can always post here of course.
This explains ActionFilters pretty well: https://www.codeproject.com/Articles/1203453/ASP-NET-Core-MVC-Filters They can be used to not execute a method, if you want to.
There's no way visual studio is relying on web connectivity for an integral feature like that.
This is what I'd do. An IEnumerable implies that it may have unevaluated logic that will run every time it is iterated over, which is why you'll often see ToList() after an IEnumerable is returned from a method. IList would clear things up.
There shouldn't be *significant* overhead in going from `List&lt;T&gt;` to `IEnumerable&lt;T&gt;`, just the cost of interface method lookups vs class method lookups. `Enumerable.ToList()`, when called on a `List&lt;T&gt;`, will create a copy of the original list. It may make more sense to have A return a type that B, C, D can assume is already reified, like ICollection&lt;MyObj&gt;.
Or `IReadOnlyCollection&lt;T&gt;`.
Woosh
Is it integral though? It's a nice to have but not essential. They also don't need to be querying the web constantly to do it. Basically when you load a new assembly or create a new class name, they load possible names one time and store in a cache. Though as someone else explained it might be another piece of tech. But this is certainly a feasible way to implement this. 
Interesting! I'd be interested in reading about how that works. 
If it fits the code you could instead use a yield return one by one of the objects that were otherwise going to be in the list.
&gt; Is it integral though? Intellisense, and all it's on-going permutations, was/is the flagship feature that originally set VS apart from all the other IDE's when it first came out. I'd argue it's the cornerstone of the product's success, and therefore would also argue that it most definitely is an integral feature. That said, there's plenty of devs that work offline (from time to time) that implementing this as web call would be silly at best.
True, cuz if you name your variables in a different language, you'll always get: "non-english word" + "s"
That's fair. Intellisense wouldn't make sense as an online feature. I just saw this as intellisense+ which would give top recommendations based on stuff parsed from github or parameter makes based on class names. I can actually ask the devs if we're truly interested in how this feature works. 
This should be higher up, really. If you are creating a list from something and returning that, you're better off yield returning. The consumer of that will be much better off as a result.
Especially considering you can now use `stackalloc` within a managed context now with it doing something like `ReadOnlySpan&lt;byte&gt; myChars = stackalloc byte[] { 1, 2, 3, 4 };`. It would be interesting to see just how much you can optimize everything. Unfortunately, I work on very little professionally that requires that level of performance optimization. I find it interesting, but at the end of the day premature optimization is still bad.
Or `IReadOnlyList&lt;T&gt;`. Although the using those interfaces assumes that callers aren’t evil ;)
I use dotnet core with the Rider IDE
Just started using moq in dotnet core, it's amazing
I had a somewhat similar question here, https://old.reddit.com/r/csharp/comments/94zm5c/should_i_not_use_postgresql_and_run_my_app_linux/ And the consensus is that .Net Core on Linux is very good. And using Postgres is also well supported. As for me, I am developing on Windows at the moment, using Visual Studio Community. However, if I was on Linux of OSX, I would start with Visual Studio Code with the C# extension.
``yield return`` is overlooked way too often.
You could always name your private fields something like, "_m_if_you_are_accessing_this_via_reflection_I_hate_you".
We could reuse the "internal" keyword. set { internal = value; } 
If you don't need to mask the list as an ienumerable to keep dude from changing it, it's fine to return a concrete class. I often accept an interface and return a concrete class unless I'm song something nonstandard or don't want the collection mutated
I don't think so... well I agree something is wrong with the types but I dont think it was a desperate attempt to make things compile. Returning a straight List would have been easier and more sensible here but I think its a case of someone trying to hard to use interfaces. [https://stackoverflow.com/questions/383947/what-does-it-mean-to-program-to-an-interface](https://stackoverflow.com/questions/383947/what-does-it-mean-to-program-to-an-interface)
Some of the older stuff was probably ported from the WFC.
There are three factors I look at when choosing between `IEnumerable` and some variant of `List` as a return type:: 1. Visibility. Is this code going to be consumed by many people, e.g. in a public NuGet package? If yes, you definitely want to stick with `IEnumerable` to allow for internal changes at a later stage that won't affect the API. In contrast, if you know that both the methods are private or effectively private (i.e. both are completely under your control), then you don't really have to worry about the API, since you control it completely. 2. Correctness. Is the method or property returning `List`, simply wrapping an internal collection? Then callers will be able to change that collection by mutating that return value, which you definitely don't want. You might instead want to loop over the internal collection and `yield return` its items, which would then suggest `IEnumerable` as the most logical return type. 3. Performance. If the method in question is doing heavy lifting, and calling methods might not need all of that work, using `yield return` and `IEnumerable` can make a significant difference. In the same vein, defining a method as returning a `List`, then calling `ToList` on a heavyweight operation simply to satisfy the return type constraint, makes little sense. Finally, don't assume that what callers are doing is necessarily correct. Shoving data into a `List` is the go-to for many devs because "they might need to mutate it", but does that even happen in your case? Or are they only iterating over it, in which case having the called method return `IEnumerable` would work just as well?
If you're going to build up a List&lt;T&gt; with Add(T) calls why wouldn't you just let them build the list with Add(T) calls? Then the List&lt;T&gt; reference gets to stay local to the calling function.
&gt; I have no input on whether or not Angular is a great addition with ASP.NET Core. Would like to hear some other views on the topic though. I don't mean to be rude, but you are thinking about it backwards. The first question is "Should this be a website or a web application?". If its a web application, then Angular is the current default. And ASP.NET Core is an option for it's backend. It's no better or worse than any other backend as far as the UI guys are concerned. **** If you are building a "web site", then Angular or any other SPA framework is a bad idea. Which means then you can choose between MVC and Razor Pages. (I have no personal opinion other than to say MVC is more 'professional' and RP is more 'quick-and-dirty'.) 
That's how I tend to shame poor uses of Hungarian notation when faced with a particularly stubborn student. I'll offer them examples like: int this_is_a_thirty_two_bit_signed_integer_numberOfApples; string this_is_an_array_of_bytes_that_should_be_decoded_via_Utf_16_to_represent_a_string_firstName; 
Truth be told, I'm not sure where I have it backwards. Unless you were referring to OP with asking "Should this be a website or a web application." I just never used Angular so I had nothing to say about it haha. 
When you said "whether or not Angular is a great addition with ASP.NET Core". In my experience, you always choose Angular first (if using it at all), then decide which backend to add to it. This is coming from a consulting background. Internal IT shops may work differently.
Ahh, I see. To be fair, I thought about picking up Angular. For this application though, my team wants me to just use [asp.net](https://asp.net) core mvc. The application is an internal tool for another department. I'll take your advice though, I'll pick it up for my next project.
my 2 cents: Razor pages are currently unweildly. MVC with Razor Engine in .NET Core feels great though. One of the guys on my team likes Angular, but I hate it. Not because it's terrible, it's fine, but it's a cancer, slowly spreading throughout the ui code and making things annoying because it doesn't integrate, it takes over.
It is probably a smell. Each of the collection types *means* something, but `.ToList()` on its own is not a smell. Let's talk about what the words mean. `IEnumerable&lt;T&gt;` is a very loose collection contract. It tells you it has more than one thing, and it provides a way to enumerate all of them. It does NOT promise many things. It doesn't promise you can index those. It doesn't promise the order is the same every time you enumerate. It doesn't promise any particular order at all. You ask for an `IEnumerable&lt;T&gt;` parameter if all you want to do is look at a bunch of items. `IList&lt;T&gt;` is a more specific collection contract. It tells you it has more than one thing, guarantees they are in a specific order, allows you to insert or remove at any position, and allows you to use indexing to get elements at a specific position. An `IList&lt;T&gt;` can do everything an `IEnumerable&lt;T&gt;` can, but because of the extra promises it is more efficient at some things, and it can do things `IEnumerable&lt;T&gt;` can't. For example, `Skip()` is a good LINQ query to show off the differences. If you have an IEnumerable, it has to be implemented like this: IEnumerable&lt;T&gt; Skip(int amount) { var enumerator = this.GetEnumerator() for (int i = 0; i &lt; amount; i++) { if (!enumerator.Next()) { break; } } while (enumerator.Next()) { yield return enumerator.Current; } } All it can do is work over the items in the enumerable using the enumerator. So against an `IEnumerable&lt;T&gt;`, the best `Skip()` can do is a full iteration of the enumerable. But if you have an `IList&lt;T&gt;`, you can optimize: IEnumerable&lt;T&gt; Skip(int amount) { if (this is IList&lt;T&gt; list) { for (int i = amount - 1; i++; i &lt; list.Count()) { yield return list[i]; } } else { // ... IEnumerable&lt;T&gt; case } } Since the `IList&lt;T&gt;` allows indexing, we can skip a lot of items instantly without having to iterate. This happens to be how a lot of LINQ operators are written. For example, I believe `ToList()` would probably look something like this: IList&lt;T&gt; ToList() { if (this is IList&lt;T&gt; list) { return list; } else { return new List&lt;T&gt;(this); } } If the thing is already a list, it returns itself and you don't pay a lot. If it's not a list, you have to pay the price of some new allocations and an iteration. In general, I'd say: 1. **DO** return `IEnumerable&lt;T&gt;` if you expect your internal representation of the collection will change and something more specific like `IList&lt;T&gt;` won't always be available. 2. **DO NOT** return `IEnumerable&lt;T&gt;` if you expect for the caller to use indexing, insertion, removal, etc. on the collection. 3. **DO NOT** take `IEnumerable&lt;T&gt;` as a parameter if you require indexing, insertion, removal, etc. on the collection. When designing an API for other people to consume, it's too hard to predict how (1) or (2) applies. When designing an API for yourself, it's fine to go ahead and make the presumption that you'll always want an `IList&lt;T&gt;`. 
They never explained e.g. and i.e. to me in 2nd grade. I only started using them around 5th grade after seeing them in books. I didn't know when to use e.g. vs i.e. until high school or maybe after.
&gt; Microsoft gave a new recommended approach... which was using Razor Pages No, Microsoft did not recommend using Razor Pages over MVC.
[https://docs.microsoft.com/en-us/aspnet/core/tutorials/?view=aspnetcore-2.1](https://docs.microsoft.com/en-us/aspnet/core/tutorials/?view=aspnetcore-2.1)
No better way to truly appreciate C# than by using Java first, after all.
I do this for email generation using XSLT. Documentation is all over the internet for it.
The interface might be correct but the implementation is bad. They don't know what they are doing and don't understand how the .NET collections work.
It liked Java so much it made its own better version. 
If it is just internal type conversion, then casts should be fine, but anything else, you need to be careful of deferred execution. Here is an example. public class Foo { public string a { get; set; } } class Program { static IEnumerable&lt;Foo&gt; DoSomething(IEnumerable&lt;string&gt; dictionary) { return dictionary.Select(str =&gt; { return new Foo() { a = str }; }).ToList(); // This ToList is the one to play with } static void Main(string[] args) { List&lt;string&gt; strings = new List&lt;string&gt;(); strings.Add("foo"); strings.Add("foo"); var list = DoSomething(strings); foreach (var f in list) { f.a = "bar"; } PrintIt(list); } static void PrintIt(IEnumerable&lt;Foo&gt; foos) { foreach (var f in foos) { Console.WriteLine(f.a); } } } The code above will print “bar” twice. However, if you remove the `ToList()`, the code would print “foo” twice. If you have `ToList()`, the `Select` method will resolve once, and the two for-loops will iterate over the same List in memory. Without doing `ToList()`, the `Select` method will resolve TWICE in the course if this code, 1st time when you loop through it and assign `f.a = "bar"`, and then 2nd time when PrintIt loops through it. In DoSomething(), because the lambda passed to the Select method instantiates Foo object for every item in parameter dictionary, a whole new set of Foo objects get instantiated each time the `IEnumerable&lt;T&gt;` is iterated upon. The 1st `foreach` gets one set of `Foo` objects and successfully sets `f.a = "bar"`. The 2nd `foreach` in `PrintIt` gets the other set of `Foo` objects whose a property has the initial value "bar".
TIL
I did not know about that and like it. This is almost exactly what I wanted
This approach my be the most object oriented way, but also the one with the most code behind it. I feel like I can drop some off the OO to keep the footprint more compact
The guideline I've always followed is that functions should accept the most general type possible (i.e. usually IEnumerable&lt;T&gt;) and return the most specific type possible (i.e. List&lt;T&gt;). Then the caller doesn't need to worry too much about creating a new data structure, and if the returned type is already what they're looking for, it doesn't need to have any further conversion. Returning an interface doesn't usually make sense, since a more specific type has to be created to implement that interface anyway.
Can be risky if used on results from a LINQ query on EF objects, db connection/transaction could suddenly time out. I've had to rewrite in several instances that initially yielded.
https://enterprisecraftsmanship.com/2017/05/24/ienumerable-vs-ireadonlylist/
&gt;For example, I believe ToList() would probably look something like this: &gt; &gt;IList&lt;T&gt; ToList() { if (this is IList&lt;T&gt; list) { return list; } else { //... } } It definitely doesn't do that - it will always make a new List even if the IEnumerable is already actually a List, otherwise you could accidentally corrupt the private state of objects that return IEnumerables. The one optimisation that I imagine that it does make is check for ICollection&lt;T&gt; that has a Count property and preallocate the returned List to the correct length to avoid having to reallocate as it populates it.
IIRC they also have a Python and JavaScriot course. Now if they would only get off their asses and make some asp.net courses on edx.org. Shoot, they seem to have everything else
I believe that. They have a ton of Azure courses on edx.org
Just adding to this: Do not take take an `IEnumerable&lt;T&gt;` as a parameter also if you plan to enumerate multiple times over it, otherwise you will fall into the "Multiple Enumeration of IEnumerable" problem. It can cause nasty bugs and wrong behaviors in your code. Dummy example but.. I see it a lot: [https://i.imgur.com/530uRNU.png](https://i.imgur.com/530uRNU.png)
Isn't Java where the concept of ILC came from?
Can still return an \`IReadOnlyCollection\` or? 
Also, knowing M$: [Embrace, Extend, Extinguish](https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish).
Solution Explorer collapsed on the right gdamnit.
Of course they do. First semester at every university CS course should be Java. It's like using wrist and ankle weights - when you get rid of them, suddenly everything's better! 
Windows only libraries are now available in .NET Core via the [Windows Compatibility Pack](https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/).
That phrasing also works for VB.NET
There 3 Azure exams for the MCSD app builder certification... Ooook 
Yep.. here's the corefx impl https://github.com/dotnet/corefx/blob/16625287b450bc623fe46683f0ff27da1ab5ad47/src/System.Linq/src/System/Linq/ToCollection.cs#L22
yeah it preallocates and copies it over if it's an `ICollection` [source on ToList](https://github.com/Microsoft/referencesource/blob/60a4f8b853f60a424e36c7bf60f9b5b5f1973ed1/System.Core/System/Linq/Enumerable.cs#L947) [source on new List](https://github.com/Microsoft/referencesource/blob/60a4f8b853f60a424e36c7bf60f9b5b5f1973ed1/mscorlib/system/collections/generic/list.cs#L79)
AFAIK there is no way to have 1 object that implements ISerializable support two different forms of serialization. Yes you can control the serialization via attributes so you don't have two drastically different classes that are tedious to map, but it still necessitates two classes. Trying to do this with just one class either will require a lot of manual mapping code or some reflection/runtime intersection craziness tasty will result in far more complex and less maintainable code than an additional class that just had properties as attributes on it. More code isn't that much of an issue of that code has minimal complexity and maintenence requirements.
&gt; For example, I believe ToList() would probably look something like this: It doesn't. It actually looks like this: https://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,947
Ireadonlylist and collection are good ways to go
Interfaces ensure you only expose what is necessary and keep coupling to a minimum returning interfaces is not a bad thing 
Someone may have mentioned this but returning IEnumerable tells the caller (not including casting, unless you use yield, and reflection) that they can't add or remove items. If you returned the list object they could add or remove items breaking any encapsulation. Calling ToList gives you the functionality of List&lt;T&gt; without exposing the orinigal list object 
I use `IsolatedRazor` for generating e-mails based on Razor templates. It’s nice to have IDE integration with a strongly typed model, custom functions, and the like. It’s also a bit slow and buggy.
ToList does indeed make a new copy. B() and C() can just return A(), so that's two ToList calls removed. In D() you can cast C() as List&lt;MyObject&gt; to avoid using ToList. All that said, I would use List instead of IEnumerable for simplicity, unless other IEnumerable types need to be catered for, which they don't in this example. 
This is so insidious and easy to do. I got burned by one that hid in our codebase for months this year.
Visual Basic is so rarely used and unknown to many but schools love it when teaching Computer Programming Majors.
You could try Rider. I used it for a while and was okay. Not VS bit still good enough. About returning a select.. yeah sure. But tbh I had a hard time trying to remember the last time I had to so this. Would probably materialize the query as well. 
&gt;I don't know why you would do this anyway given the ability to move data over the internet. Maybe we're misunderstanding each other? I wanted to have each client have a local database, and have a central database as well. The users could work offline, but when they connect to the database it would both push what they've done and pull from what others clients have done. I'm pretty sure this is syncing? The past day I've been using entity framework, SQL server 2017, and I was going to use [this](https://github.com/Mimetis/Dotmim.Sync) for syncing. Do you suggest that for what I'm trying to do? I wanted to do replication where they could work offline, but if they were connected it would auto-update every change (like google docs), but it seems like is more complicated, and syncing seems more than enough for only four people. 
They copied the documentation from a Java site.
I'm pretty sure they have a elementary C# course and a Typescipt one as well. The Python course is part of their data science program, the JavaScript is part of their front end development program. It would be nice if they had some intermediate and advanced c# courses. Their data structures and algorithms course is horrible
Java is a much better learning language than C#, as it lacks a lot of "nice to haves" that C# developers take for granted, and requires extra decision making around particular constructs that are good lessons for developers to learn. I'd say javascript over typescript, as it's probably a good idea to have familiarity with javascript in order to properly develop using typescript, with the knowledge that your typescript is compiled down to javascript anyway, and debugging within the browser requires an understanding of javascript.
&gt; First semester at every university CS course should be Java ? I am not an experienced programming teacher. I am not even a teacher. However this is an odd prescription. I don't get what you would learn with Java apart from Java. If you want weights use Assembler, and learn the abstraction the CPU presents. 
Almost certainly it's because they don't want people to have access to the actual list, because then it could be modified without the class's knowledge.
They're becoming supportive of everything because they're pushing everyone to azure. 
I don't understand why they need to work off line.
They’re just trying to make a buck, right?
https://acronyms.thefreedictionary.com/ILC Three letter acronyms are great for this...
Intermediate Language Code
the npgsql provider for ef core is very good too, and very actively developed. 
They say the quickest way to make an atheist is to have them read the Bible. The quickest way to make a C# developer is to have them use Java.
If you’re drinking at the beach and coding, you’re doing everything wrong.
It’s all great until the student wants to know how to instantiate a list with a default set of items...
My school started the Comp Sci students in Python first for the extreme basics, like variables, loops, conditionals, basic data structures, basic search/sort algorithms. The latter two were probably most easily taught in Python due to the dynamic structure, and avoiding teaching generics or templates. Moved into Java afterwards for Object Oriented and GUIs using JavaFX. Then into C for operating system stuff. Then you branch into other stuff and languages, like abstract and theoretical (build your own grammar!) or networking, work with a List dialect in one, MIPPS assembly in another. The Software Engineering students started with Ruby on Rails, iirc. 
IReadOnlyCollection is also fine for this if you wish to support indexing :)
I actually think VB.NET gets a bad rep. Sure it's not my favourite language and I tend to go C# but it's mostly compiling down to the same IL code. Then I sort of think things like the `Like` keyword and online date declarations are kinda neat and cleaner than C#. Really as well if you want all the latest language features, F# is where most of them start before making their way into C#. Some of the C#7 features have been in F# for half a decade or more. Now X# on the other hand.. 
Java9 helps greatly with this through List.of(), and future versions will add even more convenient syntax.
Yeah but this is stuff C# has had for a loooong time. And not even a method call like that, just simply inside the constructor.
IL would be the correct abbreviation there. Check out IR, [Intermediate Representation](https://en.wikipedia.org/wiki/Intermediate_representation) Think Java was pretty interesting with their JVM byte code, but probably not the first Intermediate Language in the programming world. Hopefully someone can correct me, or provide better answers later.
Typescript doesn't replace JavaScript
&gt; First semester at every university CS course should be Java. IMO CS courses are for teaching Computer Science, not software development. Some of the best CS books don't even have "code examples". None of the volumes of "Art of Computer Programming" even have code snippets, beyond an agreed upon psuedocode described earlier in the first volume. Even beyond that, languages like Scheme and Haskell tend to provide a better platform for learning computer science concepts. 
Just fanboys here? C# might be the better language, but Java is *good* enough and the ecosystem is more mature! You have the JSR that establish *common* APIs, you have a transparent process of evolving them and finally on the language level the JEP. Think about what the .NET universe has to offer in comparison? Java is used as official language for the biggest mobile platform - C# only for Windows phones, which are just niche products nowadays. Java has started to accelerate its evolution since Java 8 after a *dark age* of moratorium after the oracle capturing. So it isn't so far behind C# anymore at a language level. (but it probably won't catch or overtake C# to be fair) There is one truth when it comes to technologies: the good the the evil of the better! So even if C# as a language is better than Java, the latter is simply good enough to stig with. Besides the pure language decisions you have to consider the whole ecosystem, where the Java has a much broader and deeper weight in the busines world than .NET. Microsoft would imho definitely *prefer* to ignore Java, but they can't anymore! So if you think a language alone will convince people to change their dev tools tack, then please dream on! 😈 BTW: C# isn't the holy grail either if it comes to languages - there are many languages out there that offer lots of brilliant methodologies. There isn't just C# or Java. 
I talked about *officially* supported by the platform vendor. You have to read carefully. Of course I can use almost every language I want to develop any GUI on any platform (a little exaggerating) - but then you have to rely on 3rd party frameworks. The word *official* often makes the difference for *deciders*, which often and sadly are none tech people. 
Xamarin is officially supported, hell, it's owned by Microsoft lol 
And Xamarin is the vendor of Android? Hell you don't have to convince me! 
Hi Kirides, Thanks you very much for your guidance :)
Tested VisualStudio as is, and Coderush, what a speed improvement on both of them. but.. got back to R#, mainly because my muscle memory is tuned to R#.. Would be nice if both VS and Coderush could have some predefined keybinding-schemes to choose from, to easier switch tools. 
VB .NET was the first "proper" language I learned and I really think it helped me get a good foothold into .NET. I started learning C# not long after and though it felt much more difficult it was good to have prior knowledge of the core concepts of .NET. 
Official enough for [this](https://en.wikipedia.org/wiki/Oracle_America,_Inc._v._Google,_Inc.) lawsuit lmao 
Official enough for [this](https://en.wikipedia.org/wiki/Oracle_America,_Inc._v._Google,_Inc.) lawsuit lmao 
VB.NET is totally fine if you skip all the VB6 legacy bullshit that's still there
You do not have to watch the movie on mute. It creates a new movie/episode/clip which is only muted for a few seconds when swearing occurs, or any word you'd like muted in the clip. Try it out, I got creative yesterday. It's "Moran" and since this is meant for people who wants to remove swearing from their movies, I added an asterix where necessary.
Case statements in VB.Net are cool too. 
Microsoft also bought companies with code bases written in Java, so in fact many Microsoft devs work with Java code. 
Yes, sorry I get confused sometimes.
&gt; Java is a much better learning language than C#, as it lacks a lot of "nice to haves" that C# developers take for granted, and requires extra decision making around particular constructs that are good lessons for developers to learn. Wouldn't this be an argument for C/C++ over anything else? If your idea is to dive as deep as possible off the bat then people should be learning the lowest level language reasonable. But the current teaching model is to get people writing code that works as fast as possible. That's why Python is such a good teaching language. You can get people writing working, not-entirely-trivial code within an hour and teach the majority of the language in a week's course. That's because a lot of important CS concepts and design patterns are abstracted away.
Possibly a similar issue happened to me just yesterday. Normally right clicking on a file in Visual Studio allows me to select "commit" (It appears as a context menu item) But instead NO git options were showing. I rebooted my computer ... and git was fine again. 
MS organizes free Azure 'classes' around my area. No credentials or background checks. And you get a pretty classy free lunch.
That's weird. neither this post, https://github.com/rds1983/StbSharp or https://github.com/nothings/stb answers my first and very basic question: what is "stb"? What does it do and why should I care.
" The stb libraries are a collection of single-file header-file libraries for C/C++ in the public domain, primarily aimed at game developers. They are designed to be easy to integrate, easy to use, and easy to release. Some libraries are bread-and-butter (image file loading), some are deeply esoteric (level generation). " [https://stb.handmade.network/](https://stb.handmade.network/)
Those wrist and ankle weights feel very light when talking with my bank account advisor.
That's pretty cool. My area is just the opposite as no one even uses it. I wouldn't mind learning it but there is no reason to.
[But why?](https://giphy.com/gifs/why-ryan-reynolds-1M9fmo1WAFVK0)
What is the usecase? You don't get the benefits of using a native library or the code maintainability/language features of C#
Looks like a set of functions for doing random things with 3D graphics and image manipulation. From the FAQ at [https://github.com/nothings/stb](https://github.com/nothings/stb) &gt;Why "stb"? Is this something to do with Set-Top Boxes? &gt; &gt;No, they are just the initials for my name, Sean T. Barrett. This was not chosen out of egomania, but as a moderately sane way of namespacing the filenames and source function names.
Journalism / writing style criticism: the third sentence gets to the primary point. [Don't bury the lede](https://en.wiktionary.org/wiki/bury_the_lede).
I'd say 'C# in a nutshell', that's how got started. But you also need to know about architecture, SOLID principles, OWASP, and more. Basically, create something, do a project, try to recreate something. Good luck!
Thanks! I'll have a look.
It is typical when doing these kinds of C ports or wrappers to remove the function prefix, such as " stbi\_\_ " since C# has name spaces that make it not necessary.
I am reminded of the guy who tattooed, on his arm, the verse from Leviticus that says it's wrong to be Gay. That the previous verse in Leviticus admonishes, with equal fervor, against getting tattoos. 
StbSharp allows to do following: * Load images in png, bmp, gif, jpg, psd and tga formats * Write images in bmp, tga, png, jpg and hdr formats * Resize images * Decode DXT * Bake fonts in TTF format * Decode music in ogg vorbis format I'll update the initial post with this list. Thanks!
Good point. Thanks!
Part of the draw of the original stb collection was that you could integrate the functionality just by copy/pasting the individual file you need into your project, more-or-less without fear. Do you have a similar goal with this one?
Well, almost. Official way of adding StbSharp to the project is through ordinary referencing. It's described here: [https://github.com/rds1983/StbSharp/wiki/Adding-Reference-to-StbSharp](https://github.com/rds1983/StbSharp/wiki/Adding-Reference-to-StbSharp) However, it is also quite easy to simply include source code of required libraries. I.e. if you need stb\_image.h, then you need to include StbImage.cs, StbImage.Generated.cs and CRuntime.cs. Also Image.cs and ImageReader.cs are worthy of being included as they provided nice convinient wrappers.
[https://www.reddit.com/r/dotnet/comments/95jugx/site\_master\_issues\_16892\_cannot\_fetch\_or\_push/e3tnru0](https://www.reddit.com/r/dotnet/comments/95jugx/site_master_issues_16892_cannot_fetch_or_push/e3tnru0)
Had the same issue yesterday. After updating to \[GCM 1.17\]([https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.17.0](https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.17.0)) it started working again.
Had the same issue yesterday. After updating to \[GCM 1.17\]([https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.17.0](https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.17.0)) it started working again.
Had the same issue yesterday. After updating to [GCM 1.17](https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.17.0) it started working again.
I'm not the person you replied to. I want to emphasize the S.O.L.I.D principles. While they are principles and not absolutes, it is incredibly useful to understand the common object-oriented programming problems that the principles solve or help mitigate. People will often disagree about the details when applying principles to specific contexts but they are still worth applying where possible. As an addendum to what /u/t500yo suggested, I would also council you to look up C# coding conventions as well like capitalization rules and naming conventions for classes, methods, properties, fields, variables, parameters, interfaces, etc. For example, many Java programmers will use **camelCase** for methods (i.e getString) but, by convention, C# uses **PascalCase** for methods (i.e GetString).
Are you talking about J++? Or J#? /s... in case it wasn't obvious.
add to this - if you have to describe something as famous, it ain't famous
What does Stb mean?
I, like many, came to C# knowing Java. I tried J# out of curiosity. It reminded me of the times I tried Vegemite and cuttlefish flavored chips out of curiosity.
Vegemite: The closest thing to a shit-sandwich that you can eat without actually eating a real shit-sandwich. Yup, that about sums up J#. I'd liken J++ to the same, but I feel it deserves its own special ring of hell instead.
Don't care about the lib, but would like to see how it compares to the original in terms of performance
Maybe the hmac implementation you're using isn't deterministic
Yes, multiple runs have always given me the same output hash. I added a basic version of my implementation to the post and you can see for yourself if I'm missing something.
&gt; 8k stars ... Isn't enough to be called famous? IDK, how many of those are from C# coders? Also, [relevant XKCD explains how often people hear about "famous" things for the first time](https://xkcd.com/1053/).
What does "bake fonts in ttf format" mean?
Become a VB.Net expert, then the transition to C# will be easy.
The hash in the example C# code isn't the hash of the string, it's the hash of a bytearray of the UTF8 encoding of the message string. Take a look at https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding for some examples of working with UTF8 encoding of strings.
This is Visual Studio Code, not Visual Studio. It's a code editor, not a full blown IDE. It does not support a way to create new C# projects. You could either install Visual Studio, or create a new project using the dotnet CLI: https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-new?tabs=netcore21
&gt; You have the JSR that establish common APIs Portable class libraries have been doing it from a long time, and [.NET Standard](https://github.com/dotnet/standard) has superseded PCLs since the last few years. Everything is discussed on GitHub, and a lot of the API changes in the future *will* be by community request. &gt; you have a transparent process of evolving them [.NET Core](https://github.com/dotnet/corefx) has been leading this new process of evolving/adding new APIs, and there are hundreds of issues suggesting and discussing new APIs, all out in the open. After these APIs are introduced to .NET Core, they are introduced to .NET Standard and soon Mono/.NET Framework. Both Mono and .NET Framework are sharing a LOT of code now that .NET Core is OSS - it is not too difficult to port these APIs to other .NET runtimes. &gt; finally on the language level the JEP All C# language features are now discussed publicly in the [csharplang](https://github.com/dotnet/csharplang/) GitHub Repository and the community is quite a bit more involved in the process now. Now tell me where JSR and JEPs are discussed? Mailing lists? Google groups? C# has completely beaten Java in the community/transparency regard for now. &gt; Java is used as official language for the biggest mobile platform - C# only for Windows phones, which are just niche products nowadays. C# is the official language for Windows (includes UWP, WPF, WinForms, etc.), ASP.NET, Unity and much more. Windows alone runs on over a billion device, with cross platform frameworks like Xamarin and Unity covering almost every modern platform. C# has the potential to dominate the web in a few years thanks to WebAssembly and the PWA hype. Mono can make C# run in web browsers, and [Blazor](https://github.com/aspnet/Blazor ) is built on it, with satisfactory performance despite running 50x slower than possible. &gt; Java has started to accelerate its evolution since Java 8 after a dark age of moratorium after the oracle capturing. So it isn't so far behind C# anymore at a language level. (but it probably won't catch or overtake C# to be fair) That is true. But I can go to the .NET GitHub repositories (csharplang/corefx/coreclr/corert/mono/roslyn) GitHub and comment on a proposal for C#, or even propose a new API. It's just so much easier to use GitHub, that C#/.NET will have a much higher growth rate in terms of features. I opened my first issue in corefx only a few months after I started properly learning C#. &gt; Microsoft would imho definitely prefer to ignore Java, but they can't anymore! So if you think a language alone will convince people to change their dev tools tack, then please dream on! Microsoft can't ignore any language. Doesn't mean that it's doing so due to Java. It's because Azure wants to maximize the number of customers so they have to support every language as good as C#. 
Hahaha thank you!
It's the initials of the guy who wrote the library. Not very user friendly, is it?
If you install the expected extensions it has intellisense, refactoring tools, break-point debugging, syntax highlighting, code error highlighting, namespace importing, and acceptable git integration with diff and merge tools and tools for provisioning and managing Azure resources. It might not be comparable to VS, but I'm pretty sure it counts as an IDE when you have the extensions installed.
Ah, right.
I presume it is to do with taking a ttf font, and baking it into an image resource to be used by the game. You could then display text and it would look up the baked representation of the characters in the text in the given font, and display it. 
Currently preparing for the Programming in C# exam (70-483), it's not easy. Make sure to have a few years of experience before thinking of becoming an MCSD. 
What country are you from?
The UK
[https://visualstudio.microsoft.com/vs/community/](https://visualstudio.microsoft.com/vs/community/) This will help you.
Why would you learn obsolete language instead of learning awesome C#?
Also have a look at the Reference Source website. https://referencesource.microsoft.com I find this quiet useful if I don't understand something how something works. Just remember, there is a lot of old code in there, which means written in a terrible way (no SOLID principles, no generics, etc).
Thanks, that's exactly what it means. I hope I used correct words. Maybe I shouldda wrote "bake fonts in ttf format **to a bitmap**" for this phrase to be more self-explanatory.
Well, I wrote a [test app](https://github.com/rds1983/StbSharp/blob/master/Testing/StbSharp.Tests/Program.cs) that asynchronously processes \~800 images of different formats. It loads every image multiple times, saves it in all possible formats and encodes it as DXT. And it does above sentence first with StbSharp, then with the original stb that is accessed through C++/CLI. Then results from StbSharp and the original stb are compared byte-wise. Also the test app watches how much time did it take in total for each operation and reports that time. So, here's its on the image loading: 13 -- Total StbSharp Loading From Stream Time: 33402 ms 13 -- Total Stb.Native Loading From Stream Time: 25995 ms So StbSharp is about 33% slower than the original stb.
Not even going to consider this until the major component vendors add support for it.
Guids should be fine. They serialize to strings using json.net / newtonsoft.json.
component vendors as in UI components like devexpress and telerik?
Yup. They understand the implications of this far more than I ever will (And have access to and the ear of the MSFT architects and strategy folks) If they make the jump I'll believe that this is the direction that the platform is headed.
Isn't WinForms now dead?
No, it carries on. There's a ton of legacy stuff out there and MS still invest a bit in it.
That's why they threw them a bone with uwp isles
Depending on the accuracy you need for the game you could use Thread.Sleep or Task.Delay. Would need a simple example of how you're trying to use a timer to give you an actual example. 
Oh look, the portability analyzer uses the default forms icon
What isn't working and which have you tried?
++
idea of an IT apprenticeship is weird. anyways, cheerio or whatever they say on that side of the pond
Wait does that mean WPF in Linux?
There is a metric asston of legacy WinForms code in the enterprise and fair amount of new WinForms development being done. IMHO- the only reason they are even considering Core WinForms is that they want to consolidate the framework down to just Core and knew the would never get large Enterprises on board if they did not support WinForms.
I think Java provides a good balance with letting the user learn OO principles without letting memory management get in the way. I'm a bit biased as my learning pathway involved Pascal --&gt; Java -&gt; C --&gt; C++ --&gt; C#, and I feel like it was a good direction, I'm also a bit resentful that the degree I have no longer requires the C/C++ papers like it used to so new grads in my city don't necessarily have the experience with C++ that's helpful around here (not so much required, but useful). Don't get me wrong, I love working in C#, it's what I do the majority of the time at work, and when I have to move onto a Java project I find myself cringing at some of the boilerplate code that I have to do in order to do the same things that I'm used to in Java. Although now that i'm writing this I'm thinking you're probably right, if we teach our students C# they are probably more likely to enjoy themselves which means they will probably stick to it more so than banging their heads against the wall using something that isn't a great language to begin with.
And it's not uncommon for non-desktop devs (fx webdevs) to throw a quick winforms app togther, usually some backend maintenance utility. Even with my (limited) knowledge of WPF, I'd still opt for winforms if it can meet the requirements.
Don't feel bad! The problem with WPF is that everyone's knowledge is limited of it. I've worked in a lot of technologies in my life, and I really think it's among the objectively hardest.
Looks fine. Ship it. 
No, both WPF and WinForms are only slated to be supported on Windows 
It does not. This is just for .Net Core on Windows.
There is avalonia if you'd like to develop XAML and C# applications on Linux and Mac 
not anymore 
I've been developing a REST API framework to set up basic CRUD APIs on top of Entity Framework. [https://github.com/connellw/Firestorm](https://github.com/connellw/Firestorm) A bit of an experiment that got out of hand, but it's fun to work on!
The answer is in the docs you linked: write a `IReferenceResolver`.
I've tried it but IMO it still needs a lot of work, especially the designer/text editor. 
Dude, come on, two years on, you still don't support literally reason number one I use an ORM. [https://github.com/docevaad/Chain/issues/44](https://github.com/docevaad/Chain/issues/44)
I've found the StyleCop analyser for VS2017 to be very helpful and detecting bad coding conventions (eg. capitalisation rules and so on). After a while it just becomes second nature to use them, but while learning it will be big help (I started learning C# about 3 weeks ago). The analyser can be installed through NuGet.
There is a way to load objects without actually running the constructor. This might then enable you to query the method signatures. https://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatterservices.getuninitializedobject.aspx Stack Overflow about it: https://stackoverflow.com/questions/296584/create-object-instance-without-invoking-constructor 
Ah, you're correct. Thanks a lot.
Whats the point of migrating to .NET Core then... I mean I know why but it seems kinda pointless, unless .NET Framework will be freezed at 4.7 and its just core from now on
It's "harder" because everyone keeps saying it's harder. It's a selffulling prophecy these days. Wpf isn't inherently harder then Winforms. You can practically set everything up in WPF with click handlers as you would in Winforms.
By web address do you mean the HttpRequest.URL? If so you can create a strongly typed class for this or to make it easier just store it a session variable.
&gt; Wpf isn't inherently harder then Winforms. You can practically set everything up in WPF with click handlers as you would in Winforms. I mean, sure. But when I say that WPF is hard, I'm really saying utilizing the MVVM pattern to achieve the objectives that Microsoft intended WPF to achieve. The number of frameworks and the lack of consensus on best practices by the supposed authorities even this many years into its existence makes it hard to deny that.
I started with WinForms, I loved that. Than I switched to WPF to learn something new. I didnt like that complexity and I worked with that as with WinForms (no MVVM). Then I worked with Angular. Then I tried again WPF and now I love MVVM :D.
I'm actually a huge advocate of MVVM. But I just think it's one of those things that's good because it's hard - it forces you to figure out how to maintain correct separation of concerns.
WinForms is just a managed OO wrapper around Win32. It's basically MFC all over again, but in .Net-land. As long as Win32 exists, WinForms will be there.
From the sound of it, it's probably the response body. Make an HTTP request, get a response back, then read the body content out of it. Back in the day, it would be pretty easy (though a bit verbose) with HttpWebRequest and HttpWebResponse, but I haven't done anything like that in years, so I don't know what hot new re-invention of the wheel the kids are using these days.
Look into HttpClient and it's GetStringAsync method. Should give you what you want. If you're new to C# you'll need to read up on Async/Await and also have a good about using HttpClient properly as there are some gotchas with it
Except that specs and requirements for apps change over time, and using Winforms instantly limits what you can (realistically) do due to how it was built and what you have available. In WPF you get: * UI Virtualisation for free, it's a single property you need to change, some controls have it on by default. * Have fun styling controls in Winforms, definitely not impossible, but nowhere near as easy as with WPF * Extensive binding support and various mechanisms of easily converting data from one type to another, purely for the UI. * Free filtering and sorting support * Extensive mechanisms to template/style your data to look a given way, and you can even switch how it looks depending on what data is inside a given type. And no, you do not need to use MVVM to use it. "I won't need any of this for my simple app", I hear you say. Well, I don't need aircon in the winter either, but it sure is nice to have when a heatwave rolls by in the summer. Would you not like free air conditioning? So I don't know for a new app why you would handicap yourself to Winforms, when WPF can do exactly the same, and more if you need it. I strongly recommend that the next time you need a "throwaway" app, you try to write it in WPF. Do it exactly as you would do it in Winforms, just in WPF, don't spend time trying it writing MVVM, just use event handlers on clicks. You'll find out it's exactly the same as writing a Winforms app, in more or less the same amount of time. Next time you need to change something, take 5 minutes to look at the XAML it produces. Another time try to add a simple style to template a button in the app, so on and so on. Winforms (and WPF) won't be around for ever, and come hell and high water, the future will be some form of XAML based successor to UWP and WPF. Might as well get your feet wet before it happens.
I found a way using WebClient. Any issues with this: WebClient client = new WebClient(); string myResults = client.DownloadString("https://mywebaddress");
Seems good to me and if it works that's usually the most important thing 
This will never happen. Just like webforms will never die. There is support for it but all the new cutting edge features always end up in core first. The ability to have these cutting edge features in winforms and WPF is why support for them in .net core is happening. Killing off the full framework will just make a lot of the userbase bitter towards MS and possibly look to migrate to a different ecosystem... away from azure where MS makes loads of money.
I'm embarrassed to say that I don't understand this at all. Somehow though, I'm confident the answer is, 'no'
I just get a blank spreadsheet... Also Excel? Really?
It’s harder to debug. The form designer is harder to use and runtime exception are hard to decript.
I think /u/RoundService is trying to reinvent json? RoundService, does that sound familiar? Did you start with a web background? I'm guessing a bit. Try to explain what you're trying to achieve and not how you're trying to achieve it.
I suspect you want something like a discriminated union (i.e. an object that can contain a value of exactly one of multiple types), but it would help, a lot, to have some idea what problem you're really trying to solve with this.
&gt; There's not much reason to use WPF if you aren't doing that. That's the problem I have with WPF, because I agree with everything you said 100%. I'm not much of a UI developer (don't we all say this) but I still need to attach things to buttons once in a while. I don't need any models or patterns, just something simple I can whip up to present a proof of concept. WinForms is great for that. I start with Program and Form1 and I can just drop a few things on there and go. WPF feels like it wants everything to be a rich application. I understand WPF will let me do what I want but it feels so much heavier than in WinForms. Now I am quite fond of MVVM when done well and, in that respect, WPF is actually a hell of a good platform. It's just not always needed. Sometimes you just need WinForms. Just like we use to say, "Yeah, it sucks, but sometimes you just need MFC." 
Maybe use Mono.Cecil to parse the assembly. It’ll also be much quicker than loading it, for reflection only or otherwise. 
1) Don't do this in the classes themselves - sometimes its best to put logic in the same class sometimes its better to do it in another class that will operate on the passed instances. I think given the complexity here, the latter is the better option. `MyTypeSerializer` for example. 2) Do you really need the Base64 encoded string? Could you instead *always* serialize to JSON, and then on that special case convert the JSON to Base 64? 3) Why do you have a mix of Base 64 and JSON? I think you should stick to one. 4) I don't think you need `ISerializable` for this, and I think you will just be better off using either the in-built XML serialization technology or use JSON.NET instead.
Are you using contains()? If so, couldn't you simply use //*[@class="classNameA"]? If not, how about using ends-with()?
Piggy backing off the discrimated union suggestion, I think that would solve what you want. Make a base abstract class that requires an implentation for keys and getting a hash code. Override gethashcode to call that implementation. Have the derived types have the list or dictionary that you need
I find the casting perfectly serviceable, just that I wouldn't do all the casts at the start: I would try cast to list, then do null check, then proceed as necessary, to avoid unnecessary casts. You could create an object class (eg JSONObject) that encapsulates the casting logic, but I consider this approach unnecessary obfuscation considering that the graph navigation algorithm you describe is unlikely to be more than a few lines of code. You can indeed write an equivalent algorithm in any other language, using appropriate syntax and structures (Dictionary and List are dotNET-specific). Others in this thread have asked for an example where such an algorithm would be useful, and I happen to have one we recently implemented. Our product serialises a very complicated object (nested objects and lists, several levels deep) into XML. Before serializing the object, we need to scour undesirable characters from all strings in the object, and we found that subclassing the XmlWriter did not do all we needed. So we had a choice: scour each string while building the object, calling string.Scour for like 40 strings (and possibly missing some), or write a tree search in like 10 lines. We used reflection to figure out if the current node was a class type, list or primitive.
It’s hard to tell what he is asking but either way if he is looking for the requesting URL he can get that via HttpRequest.Url in any C# web application at the controller level. 
1. Independently, faster updated runtime 2. Ability to embed runtime into application, making it self-contained and launching it on system that don't have latest .net installed. 3. Ability to use linker or .net native in the future (still in development, but I'm looking forward to it) 
OT, but are there are other .NET things that are only supported on Windows? I've installed Mono and plan to try and learn how the other half lives, just for curiosity and because it seems like some good design patterns have come out of that environment. Also, people in this thread are complaining about MVVC being hard - isn't it just a variation on MV*-whatever, like Rails MVC?
We use Telerik and it's not much better. Part of it is of course complexity of WPF. I always think back to early Winforms with Infragistics controls, somehow we struggled less.
This, I am getting a load type error when calling getType. Anyone done Metadata loading with IMetadataImporter? I can seem to find an example.
ScriptSharp compiles to JS and spits out a DLL which you can use as a reference in other projects. I think it is spitting out some methods and constructors without an implementation for overloading in JS where you're coming are not required to pass all the parameters when calling a function. The omitted arguments are treated as undefined.
I'm mostly a WinForm user, but I've been hugely happy with DevEx's stuff and have been a customer for over a decade. Ton of value in their stuff for what it costs 
&gt; I strongly recommend that the next time you need a "throwaway" app, you try to write it in WPF. Do it exactly as you would do it in Winforms, just in WPF, don't spend time trying it writing MVVM, just use event handlers on clicks. You'll find out it's exactly the same as writing a Winforms app, in more or less the same amount of time. Next time you need to change something, take 5 minutes to look at the XAML it produces. Another time try to add a simple style to template a button in the app, so on and so on. Great advice. This helps keep up to date and try new things, and little throwaways and utils are perfect for experimenting with.
My company started a huge internal application just last year with WinForms. Why? Who knows.
Just to through it out there, I have been using [Marten](http://jasperfx.github.io/marten/) with Postgres and it is pretty awesome. 
WebClient is all good, except it only uses Get. If you need other Http methods, then you should use HttpWebRequest. For example: https://stackoverflow.com/questions/17415709/how-to-use-get-method-with-webclient-request
My company recently went through this, and we are going through our own internal developer training. We had a Java dev learn C#, and a C# dev learn Java. The neat thing was we made them teach each other about each platform. Highlights Nuget / maven LINQ / Streams C# Extension Methods / nothing Nullable / Optional&lt;T&gt; Various useful C# nuget packages and Maven artifacts for certain types of tasks. Not sure if you are going to use Entity Framework, that is its own beast. I think generally OOP is going to be the same in both languages. I personally prefer C# over Java, and the Java dev did too; he really enjoyed learning C#. I think you'll like what you can do in C#. Good Luck
Be aware that this is **Windows only**. It's not cross-platform.
Start with https://docs.microsoft.com/en-us/dotnet/csharp/
It's also the default WPF app icon.
Awesome! For some reason you can also bleep out references to Christianity. I want to watch a thoughtful movie about a priest having a crisis of faith with this. Viewers will have the impression that the movie is about an entirely different subject.
What is driving your desire to switch to core? 
What I hate about WPF is that it can fail silently if your binding is wrong.
Compared to Java/Kotlin/Scala the syntax of C# properties continues to haunt me how it's evolved over time, without clear consistency. I'd rather write all my getters / setters manually compared to that, except properties seem so ingrained into everything C#.
Basiclly i made a game where i am using 2 random numbers and there is x + y and you need to type how much is x + y. But you can go as much as you want (ofc if you fail you will lose), but i need a timer for like 1 minute and when the timer expires, the game ends.
Basiclly i made a game where i am using 2 random numbers and there is x + y and you need to type how much is x + y. But you can go as much as you want (ofc if you fail you will lose), but i need a timer for like 1 minute and when the timer expires, the game ends.
Base64 is fine if he's serialising a binary type, i.e. an array of bytes, but it would be bad for a a complex type for sure.
I think /u/SuperImaginativeName is mostly right. ISerializable is a bit of a throwback to a simpler (more complex?) time. It still has value in some cases, but generally we avoid polluting the types with hints about how to convert it. You can use base64 in JSON, it's good for binary simple types, like an array of bytes. It's not sensible to serialise complex types to base64 and then add that as a payload of a JSON serialised type. All types can be considered complex of simple. The simple ones are mostly value types, int, byte, char, double, datetime and then there are a few which are on the edge, i.e. string and array. All complex types are defined as sets of these basic types. So on that basis, ever complex type can be represented as test showing the relationship of its basic types. JSON doesn't have type information, so {"values"=["a","b","c"]} is an array called values. In C# this same structure is used to represent lists, hashsets and arrays, so you either need to include some extra type information, or infer it by giving the serialiser the type (through a generic paramater perhaps). It can then look up what type values is and figure out how to get the three values into it from there. Then you've got nested types, derived types and private variables. How about readonly properties that you can only set at construction time? This is a problem when you try to de-serialise the json back into an object. You might not want that now, but it will bite you later. So this what /u/SuperImaginativeName is saying. That's a complicated set of functionality, so each of your classes is either going to have a lot of duplicated code, or have access to a helper that will sort it out for it. Both are bad ideas architecturally. It would be simpler to use something like JSON.NET and instead of doing myObject.ToString you could either just call JsonConvert.Convert(myObject) or perhaps more to your liking, define an extension method on type object which will allow you to do myObject.ToJson(). This will then, theoretically work for all objects.
All strings in C# are UTF 16. Also, this is valid C#: using ಠ_ಠ = System; using ಠ‿‿ಠ = System.Math; public class Program { public static void Main() { ಠ_ಠ.Console.WriteLine(ಠ‿‿ಠ.Pow(2,3)); } } 
&gt; Is there more depth to WPF? Absolutely. WPF has a huge amount of additional concepts you need to familiarize yourself with, such as Styles, Templates, Bindings (sure, WinForms theoretically has DataBindings, but in practice, you’ll be doing the events dance), and Triggers. It also has quite poor support for refactorings and analyzers. Basic stuff like “suggest a property I can bind to” only works in limited situations, and runtime support for binding diagnostics is also quite rough. Stuff like “expand this property from an attribute to a full child element” doesn’t exist, which is hard to understand given how pervasive similar refactorings are in C#. You *could* write an app in WPF structured more like WinForms (no bindings, lots of code behind, tight coupling, …), but at that point, you lose a lot of benefits, and it’ll be doubly painful because that path is barely supported (it’s not exactly what you’ll find in tutorials). I think Microsoft may have overengineered this one. Meanwhile, Web dev got a lot better. An opportunity squandered. WPF’s concepts mostly don’t map to WinForms, nor to Web development (yes, I know bindings are becoming common in web dev), nor in other disciplines. Couple that with how poorly WPF launched (first Vista-only, then XP-also, but now none of Vista’s built-in apps even used WPF at all, and over a decade later, basically the only Microsoft app that uses it is VS, which end users never get to see), and getting into WPF suddenly feels very unmotivating. Who believes in it? Microsoft sure doesn’t seem to.
Could you share the frameworks for converting string to UTF8. Very cool program btw. I had no idea that was possible 
https://lmgtfy.com/?q=unicode+.net 
Try courses on Udemy. They're pretty cheap and great to learn the basics. Has a range of topics, not just C# or programming related.
You can check ‘== null’ on any Object that might be null, either in a conditional statement or with a ‘?’ Operator in C#6. Also try / catch is another way. But more broadly if something shouldn’t be null in the first place you’re better off leaving the error in so you’ll actually know when something is broken. 
Thank you, I’ll try a course, any you recommend? :)
Thank you! This will be useful :)
Removed: Rule 4.
Ever heard of Json.net ? 