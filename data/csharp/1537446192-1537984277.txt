Never had an issue.
No.
I will definitely check that out. Problem is the IT sector in my state is only small and I can't move interstate right now... it's complicated...
I've only been focusing on iOS development so there's probably a difference but I do agree with the fact that there's a few hoops you have to jump through to really get everything going. I personally don't have that big of an issue with it, and I only cared about getting the app to run on my device because I've never had a computer that was strong enough to support the emulators. I was able to get it connected to my Mac and get the signed provisions and all that, and it took the better half of a day to figure everything out, but once you get a stable set up you should be good to go from there. 
It's not just you, I tried for so long to get it to work reliably and never got there, I eventually have up and just went back to Android studio, I'd rather be making progress than fighting and pulling my hair out and not making any progress
Why not [Direct2D](https://docs.microsoft.com/en-us/windows/desktop/direct2d/direct2d-portal) ?
I find it with DuckDuckGo just fine. Have you tried to define your searches more?
Thank u Edward san
Shame about the Win7 compatibility requirement, [Win2D](https://microsoft.github.io/Win2D/html/Introduction.htm) would be perfect for this use, but unfortunately it's UWP only.
you mean [these](https://devu.com/courses/cs-inheritance-fundamentals)
this specific example doesn't make any sense. if it's not `MyType` you cant assign it to `typedObj`. And i think this is the reason, we won't see this. `is` is a pattern matching operator, it matches the shape of an object. not would just be a synonym for `!`. even though I can see the charm of it, I don't think it would improve the language 
But `typedObj` is still there in the else branch for the current matching, isn't it?
That's his site now. I took his course back when it was learnvisualstudio.com. I don't see the specific course I took. It was over 40+ hours long and you worked through console applications. 
Nice, damn good job. For myself I took the traditional route and got a BS in Comp. Sci. with a minor in Math and got a job a couple months after grad. A few questions if you don't mind. Did you have any programming experience or exposure to programming prior to learning through Tabor? When you got hired, did you have some sort of portfolio of code you've authored and, if so, what was in your portfolio? Finally, do you feel you lacked (or still lack) certain domains of knowledge since you didn't go the traditional route?
[PDFsharp](http://www.pdfsharp.net/) maybe? It's free, even for commercial use.
&gt; simultaneously encourages so many bad habits Could you name one of them?
To me, don't go cross platform unless absolutely necessary. Years ago I was forced to learn native (Android with Java &amp; iOS with Swift) when cross platform wasn't big. So glad my hand was forced because the dev experience was great, albeit very slow. Ask yourself if having a better dev experience is worth costing your time?
Only works if `_graphs` is a list, and it's functionally different, since it unconditionally applies `ProcessDirtyNodes()` on all graphs.
You shouldn't be downvoted for expressing your opinion or stating things you believe to be true that others believe to be false, even when the things stated amount to "JS &gt; C#" on the C# subreddit. Sorry for that. With that said, I do disagree with some of what you said. .NET is now open source and the community is growing at an unprecedented rate. Sure, it isn't as big as the JS community yet but C# is one of the fastest growing communities and is catching up. JS has such a large community because of its market share in front-end web development. Furthermore, I don't feel you can claim that innovations happen mostly with JS but I'd listen to your counter-argument fairly if you provide a sound argument with sources. Additionally, I believe C# would be a better language to start in if for no other reason than its strong typing. Typescript would be a better compromise between JS and C#. C# codebases are primarily developed within the Visual Studio IDE which is a *very* comfortable IDE to work in for beginners (by design). Of course, this is opinion based but I'd have a hard time believing I am wrong on this part.
I dev xamarin on a macbook pro running windows 10 on parallels. I love it. I do native apps as well as Xamarin.Forms, and it's really great to work with. It has some cons but ultimately it's pretty amazing what Xamarin has been able to pull of with Mono, so most of the cons are outshined by the benefits of the framework. I would suggest you dev with a modern Windows machine or Mac machine. It's not really supported to use it on Linux (tho possible). I think a lot of the frustrations you had were because you weren't deving with the right hardware. You need hyper-V due to the very nature of simulating another OS on your machine. 
well looking on his site his courses are split between different with topics with 100-250usd cost at the end learning advanced c# with his site should end up around 300-750usd at least quite a difference
They are moving docs to a new location though. Don't many MSDN docs have a banner up top saying they are no longer being updated?
You're not wrong. Visual Studio seems to be become a mess in itself lately. After the latest update, it's becoming unusable, which is a shame as it used to be excellent. However, Xamarin in VS must still be in Alpha or something. Crashes, odd errors, the designer simply going jet-black randomly etc... it feels really "amateurish" for want of a better word.
No. It's awful. I've just spent the last 2 hours trying to convert a json array into a SimpleListItem2. I have about 400 lines of code so far, and not getting anywhere. It seems ridiculously complex to simply have a list on the phone - something thousands of apps have. Couple that with the fact, that every 1/5 times VS gives a random error when trying to deploy to the emulator and the fact that your phone is only recognised once a day (don't unplug it FFS! - that'll add another hour), it's easy to come to the conclusion that it's not really ready for human consumption. It's still in alpha - and we're the alpha testers. 
I was under the impression that Type machine was scoped to the scope in which it's contained and not the branch only. Regardless on legibility only it could just be syntactic sugar. 
[This]https://github.com/dmitrykolchev/d2dsharp/tree/master/D2DSharp looks promising. I will take a look. I guess it's like MonoGame but with less abstractions.
A lot of additional controls (activex) wouldn't be too happy about UWP so that's another reason why I need WinForms as "base".
WinForms is fastest way to build desktop app and with some tweaks it can look great. WPF is horrible for beginners and it's slower than winforms on low end pc. Of course, it's great to learn MVC pattern and you can create really fancy apps but someone who never did desktop development should begin with winforms.
I don't know what `SiteSorterYX` is, but basicaly what that does is: var sorter = new SiteSorterYX(); return sites .OrderBy(x =&gt; sorter.MaybeThisWillHaveAMethodYouCanUse(x)) .ToArray(); To ellaborate, it is a very purly written method; - that loops through an array, and adds each item of the array to a list. - Sorts the list (using `SiteSorterXY`) - Loops through the list, adding items back into array. I would start by looking into `SiteSorterYX` and checking if you can use it as I mentioned above, you might be able to replace it with something like: sites.OrderBy(x =&gt; x.State).ThenBy(x =&gt; x.Name) I have no idea what the `Site` object looks like or how it is ordered, so that is pure speculation. XY could be ordering by distance along some sort of plane. If you do need to keep `SiteSorterYX ` as it is then maybe try private void QSort(Site[] sites) // Method, so I chaged it to Pascal Case { var sorted = sites.ToList(); .Sort(new SiteSorterYX()); sites = sorted.ToArray(); } 
ClickOnce works great in corporate environment... Never had any major problems with it.
&gt; Finally, do you feel you lacked (or still lack) certain domains of knowledge since you didn't go the traditional route? I eventually finished an undergrad in Computer and Information Science in 2016. The only two classes I haven't taken that I feel I need to are Discrete Math and DS&amp;A. I'm actually taking them next spring to complete [this](http://ccse.kennesaw.edu/cs/programs/cert-csf.php) program.
Try going from https://docs.microsoft.com/en-us/dotnet/api/
So do your homework for you?
Oh, maybe. I'm noticing now that when I hit various msdn.microsoft.com pages it's redirecting automatically to the equivalent docs.microsoft.com.
Thanks for the opinions.. since i am doing this for fun, ive uninstalled Xarmian from Visual Studio (which aside from this issue is far and away my fave IDE ever), and am re-installing the official Android Studio, and am planning to learn Kotlin... I can deal with awkwardness in setting up, what I cant deal with (especially when learning a new tech) is random breakage which means i never know if its me or the SDK causing issues...
SiteSorterXY is a class that implement IComparer. The only method in it, is compare which sort the Site by Y then X. As I said, a Site object contains only a public Point object and a public Int (there is no method except a constructor which has no parameters and only create a new Point). And the Point only contains two public Double for the coordinates and a SetPoint method which has two parameters and set the coordinates's values.
i dont know code for mode and median ok 
That distinction makes sense, thanks for pointing it out.
I'd go for the 3 language fundamentals courses, then basic language features, then principles, then best practices. For the rest (web framework, runtime, async, and perf), you probably want to have some familiarity with using the language first and then take them if you think they apply to what you're doing. 
&gt; My personal experience with Xamarin was that it works for simpler CRUD apps, but when you step outside of that, it gets in the way. My experience with literally every crossplatform framework out there. At some point it just stops being worth it. Native is the bulletproof way to go, I think.
I mean, look at how insanely popular and vibrant r/Xamarin is!
I have the same opinion as you, but because I don't know completely how C# works, I was not totally sure about that. I think that I'll just assume that's some old code, and when I'll include this algorithm in my project, I'll rewrite it correctly.
What other cross-platform frameworks have you used? I have multiple ionic/nativescript apps running and I have never had a problem with either of those, and flutter seems to be amazing as well, at least from what I've tested.
&gt; Why not just call the sort method where this method is called ? Easy. The person who wrote this code doesn't know what the heck he's doing. You are 100% correct that this should be reduced to private void qsort ( Site[] sites ) { sites.Sort ( new SiteSorterYX () ); } 
You missed the point. The `Array.Sort` method does an in-place sort. This makes it much more efficient than the LINQ version, which has to copy a bunch of data back and forth. Manually copying the list to a temp array defeats the purpose.
That was my point - it's not wrangling with lowest level API but it's not already wrapped in Game and other classes. Thing is, empty MonoGame project is quite empty - it's easy enough to remove game features to cut down overhead and you still end up with some nicely wrapped things like Camera, input and so on. But i will take a look at this API.
 sites = sorted.ToArray(); That's not going to do anything because `sites` is not a `ref` parameter.
aren't evil?
That's exactly what I just found ! 
I just found my solution ! This qSort method can be reduce to a simple line : Array.Sort(sites, new SiteSorterYX ); If you look at the sources, all the code seem's really old and need a refactor. Thank you everyone, we can close the topic.
Didn't look at your code, but Dot Net Perls has always been a good resource for plain English explanations of the basics: https://www.dotnetperls.com/jagged-array 
I haven't tried, but usually it's better to do things the way the language intended them, rather than forcing another idiom on it.
well anyway i found that it had to initialize the array &gt;&gt; arrays[i] = new Int16[elementsperArray[i]];
Well arent they assuming this is for web dev or any area needs js? for example if you wanted to do a game js wouldnt be an option... also I think you might want to learn C++ since there seems to be more actual job offering and much more variety of companies where you can work, including the ones which work with hardware
I think I got confused with the inline out arguments, like `if (Int32.TryParse(maybeNotAnInt, out int val)) { ... }`
So your Android layout is wrong to begin with and you start bitching about Xamarin/Microsoft instead? Cool, go use Android Studio so we don't have to see your posts again. 
Do you recommend Angular and .NET CORE as backend?
That just checks whether the source starts with any of your values, it doesn't check equality. It also had weird null behaviour: if source is null and one of the values is null it will return false. 
`Array.Sort` is a static method unlike `List&lt;T&gt;.Sort`.
What technology should I use if I decide to make a web application instead?
Ok sounds good thanks.
Might just start with Bobs course then.
That's not the case. I switched to a i7 16gb machine with 512 GB Samsung 560 drive. It runs hyper v like nothing I've seen before. Android studio runs lovely on it, it's just zarmian which manages to snatch defeat out of the jaws of victory. Visual studio proper runs like a dream (targeting .net 46 and .net core). All other apps are instant and work perfectly.
I do a lot of dev with xamarin, and while I do have a hiccup every now and then, it generally works just fine. 
Use whichever one has the look you want. I use MaterialDesignInXaml and I can't say enough good things about it. It's an amazing library in looks and function and it actually fixes some annoyances with some of the native WPF controls (editing cells in a DataGrid, for instance.) &amp;#x200B; Having said that, there is a steep learning curve for getting comfortable with WPF in general. Adding a UI library will not change that, but it also will not make it *more* difficult.
Alright, thanks alot!
I'd go with Material Design - it's extremely easy to use and simple to get started with. My experience with MahApps is mainly trying to fight against its global styles that it applies when you use its subclass of Window.
Thank you for your reply! Yes, I know there is quite a learning curve for WPF, but, I'm not going to use it right away, for now a basic UI i could put togheter in vanilla WPF will work, I'm gathering info for the future ;). Problem is I like the looks of both :D
If the layout was wrong it's because the designer made it wrong. I dragged the listview to the panel. If it doesn't work as expected it deserves to be bitched about. The fact that a simple listview needs about 400 lines of code then still won't show, the documentation being out of date, referencing options that no longer exist, along with the designer randomly going black until you restart it, coupled with the fact that every 5th time it wont deploy to a phone or emulator just isn't good enough. We paid 1500 quid and expected the software to work. It doesn't. That deserves bitching about. I'm warning others that are having the same problem should they find this post by Google.
Thanks! Yeah as of now I'm swaying more in the favor of Material Design since I also saw it recommended in another post.
So you started clicking on random buttons expecting it to work. The visual editor is there as an aid on seeing how your UIs will look, however you still NEED to know how Android layout works (and not just layout, but activities, lifecycle, etc) before trying to tackle a mobile app. I see this loads of times from web/desktop devs, coming all happy to mobile and then bitching when nothing goes their way. Mobile development is a beast of its own, and you need a solid base to get anything non-trivial going on - even with modern devices packing octa-core CPUs, you still need to understand how things work under the hood. And sometimes they aren't intuitive at all, and this isn't the fault of Xamarin - it's only a thin wrapper over the native platforms. And no, you didn't pay a penny for Xamarin, since it's free. Did you pay for [Xamarin University](https://university.xamarin.com/welcome) instead?
yes T\_T
Would this work if sites isn't passed-by-reference? Aren't parameters pass-by-value by default?
I've always wondered; how do I discover those pack uris to add the themes? So far I've only seen them listed in documentation or tutorials, but is there a way to do reflection on the assembly for these things?
Tabor uses web forms, and Allen has you write a console app, I’ve done both, if I was starting from square 0 i’d say Allen’s C# basics course first. Allen’s courses aren’t as easy to follow one to the other (like knowing where to go next) imo, but I like that his C# class is in a vacuum so you don’t stress about other things you don’t need know yet.
No classes are passed by reference by default. That's why they are called reference types :) value types are passed by value by default.
VS is another reason why I'm learning C#. If it's more user friendly, it should help when starting out!
Ok. I'll try xamarin forms again. I hear rather hoping to be able to use my C# experience, but hey ho.
Unfortunately no - I am a long time c#/.net dev and the company I work for invested significantly in Xamarin only to abandon it for full native. There is not one reason either, but an amalgamation of issues that make Xamarin's potential plus sides not worth the cost of its minuses. 
Another option is to use local Razor with a WebView. https://docs.microsoft.com/en-us/xamarin/cross-platform/platform/razor-html-templates/ Has anyone had any issues with this? From my current experience it is pretty awesome, especially when coming from more of a web background. The two-way binding of being able to call C# from javascript is awesome.
It's a shame we can't write the logic on c# and reference it from a Noddy java ui / iOS ui / wear ui
&gt;all the innovations happen mostly with JS first etc you can code Js in the backend now all the innovations happen mostly with JS first etc you can code Js in the backend *now* &gt;
I've uninstalled that shit and installed android studio .
If you doing absolute basics i’d say your better off with Allen because the environment tabor does it is webforms and requires you to learn some about that, but i’d say after the basics move on the tabor or team treehouse 
.Core team even removed InvariantCultureIgnoreCase at one point https://github.com/dotnet/corefx/issues/9801 "Almost always" isn't always. 
Extension methods on interfaces is an entirely intentional part of the C# language; that's how Linq is implemented, after all.
&gt;If you mean defining *only* extension methods and no instance methods for a class, I don't see what you'd get out of it. &amp;#x200B; Not exclusively using extension methods, but primarily so. I'll still implement ToString() and ToJson() (I don't rely on JSON.NET for complicated object serialization) methods as instance methods. For example, I regularly create DTOs in a shared project that have separate methods for client side vs. server side. For example [obj.Save](https://obj.Save)() on the server side means put it in the database. On the client side [obj.Save](https://obj.Save)() means send it to the server. If I write the DTO and add extension methods in the client/server projects to do what I want, I can have the save feel on both without having to create a "ServerObject" class and a "ClientObject" class that inherits from the parent DTO Class.
You keep saying "Xarmian," but it's "Xamarin."
Xamarin Forms *is* C#, it's just that instead of having to deal with how layout/plaform features/etc work in both Android and iOS, you have a layer of XAML on top of it. It makes it more accessible for first-time mobile developers at the expense of hiding how everything works natively. Also don't get discouraged so quickly, I can assure you that, if you come from the MS stack, the Java/Swift approach is way worse. Give Xamarin University a try if you still have difficulties - you can start with the free self guided courses if you don't feel like paying for it.
&gt; I regularly create DTOs in a shared project that have separate methods for client side vs. server side. Then they should be different classes; it's not great to couple client and server DTOs anyway (though it matters less when you serve the client every time and thus don't have to worry about version drift between client and server). &gt;If I write the DTO and add extension methods in the client/server projects to do what I want, I can have the save feel on both without having to create a "ServerObject" class and a "ClientObject" class that inherits from the parent DTO Class. But extension methods are based on namespace, not assembly, so one instance of someone putting the wrong namespace in a using statement and your client will be trying to save directly to the database, or your server will be sending to itself (and then probably hitting the same code path in an infinite loop). Having code that looks like it's using exactly the same classes and exactly the same methods that does different things depending on what part of the code base its in is an impressively sadistic way to cause people to write bugs that seem like valid code. &gt;For example obj.Save() on the server side means put it in the database. On the client side obj.Save() means send it to the server. I see no benefit to giving two methods on the same class that do different things the same name. Method names that are long and descriptive make it much easier to understand what is happening in the code.
Their is a pretty neat track on pluralsight someone gave me to do that sounds good for learning a bunch of areas in C#. My #1 issue is just starting honestly so I need to stick with something. It's just tough when I have to catch up in math, taking classes.
I get bored after working on the same projects or products for too long (more than 18 months). You might prefer working in a consulting role where your project will naturally change every so often and you will have to learn new technology and/or a new problem domain. Another possibility is that you are not feeling challenged as a developer. If that is the case, you could explore options to increase your responsibilities i.e. become a tech lead, architect, manager and so on.
Interesting.
I don't think that's a good idea really. Just call it SendToServer. Save is crazy ambiguous. And as the other commenter pointed out the wrong namespaces will mess you up.
If you were using VB that wouldn't matter. /* ducks */ Good catch though, I'll update the example.
I've been a developer for about 30 years. About 7 years into my career, I had my first burn-out. I took a month off and drove all over Colorado. I came back somewhat recharged, or at least willing to get back into it. Ten or so years later I had a major burn out. I sold or gave away everything I owned and drove all around the US, living out of my car. I did that for about 6 months before coming back and starting again. It happens. The days when somebody would do the same job for his whole live then retire with a gold watch are gone. Expect to change careers (or at least move sideways in your career) a few times.
Haha your right. But it's still broke.
For me, it comes in cycles. I have over 20 years experience professionally and have felt this way several times. You don't need passion to do your work, you just need motivation not to lose your job. You are not defined by your job, and I hope that you can embrace that. Our industry is dynamic, and new discoveries are made each day. New techniques are proposed and have to be evaluated. Our jobs require us to continuously improve our skills to remain relevant. Talk to your employer to see if they have an education plan. See if you can get a Pluralsite license and learn something new. I just discovered Python, and really found enjoyment in learning it. Angular, not so much...but it is required for my job so I slogged through it.
It was really a terrible example I provided. What I was really after is to go against OOP principles of keeping data and logic together. I appreciate you taking the time to reply.
Burnout is a very real thing. After 6 years of professional development on top of 6 years of personal programming as a hobby, I just one day up and left my job. Best decision of my life. I make less money as a teacher now but no day is the same in teaching. And just when I think I have seen it all, some random thing catches me off guard. Life is good.
I'm sure there is a convoluted way to discover and use them dynamically at runtime, but I can't imagine why one would want to do that (if that is what you are asking). Having to merge the library's resource dictionaries may seem awkward to you when learning WPF, but once you get used to how the propagation of Styles work in WPF it makes perfect sense to do it like this.
Ah. Ok. I hadn't realised that. Well that's good news (to me). I'll definitely give that a go tomorrow. I'm also working on Alexa apps...with the backend being a mix of dot net core and python. That works really well. It's just the android part of the system that I've started to struggle with.
The variable `sites` is a pointer to the array. The function call `sites.Sort` modifies the array, so the changes can be seen outside of the function. ******** Now consider this counter-example. private void qsort ( Site[] sites ) { sites = sites.OrderBy( ... ).ToArray(); } In this version, the pointer `sites` itself is altered. Which means it is no longer associated with the original array that can be seen outside of the function.
I second this. I've been programming for 20 years and twice now have had massive burnout which lead to me just taking a year off to enjoy life. Usually a few months in I get over it and start getting a creative itch, which leads me to learning new things and ultimately getting the desire to find work once again. Although most of my burnout has been instigated by management (or lack thereof).
You're a professional. Call it a sabbatical!
I've been a programmer for about your time length. Now for the past 6 months im obsessed with sketching landscapes and learning about the late 1800s and early 1900s. interests just change However I'd much rather earn my pay programming than anything else tbh
i feel ya. my advice: get into financial independence then make your money and get out and then find something that fills your soul.
What helped me was getting more involved with the projects I'm on. Now I have full technical control over the projects and can experiment freely witg newer technology. I haven't yet made any major mistakes by trying or even forcing something new, but probably someday I will. In spite of this, I always try to challenge myself mentally as much as possible to keep myself motivated. My next major project is gonna use the experimental Blazor because of this, only because I feel very passionate about its success. 
No, I just want to discover what exists from the assembly itself instead of having to bookmark and look up documentation online. Repeatedly.
Routine is routine, your routine is to be the modern day equivalent of a wizard all the same that doesn't mean it's not still JUST a routine and humans grow bored of routine.
To be fair, part of the reason for that (iirc) is because Xamarin registered that sub and made it private in order to drive people to their official forums. It's only been re-opened very recently, quite a while after Microsoft took them over.
1. When I was 6 years in I was on my 3rd job. I changed jobs every 3 years or so. Basically, I ran out of things to learn and then it was time to go. 2. Join a community group. There is probably a developer group that meets monthly in your town. Go to it. Give a talk from time to time. Teach what you know, even if it is boring to you, it might be helpful to someone else. 3. Get a hobby that forces you to learn something new. Really geek out on it. I did woodworking for a while, baking, painting, fencing, astronomy, etc. Re-challenge your brain.
It's great that you've been passionate about your job, but passion's not a reliable motivator. Almost nobody is genuinely passionate about a job they've done for years, and most jobs aren't callings, just ... work. And that's OK, particularly if you're not actually unhappy with your employer, manager, coworkers, or work. If you're really just *bored*, you can do a couple of things: 1. The most obvious thing is find another job, maybe even in the same company. This is most likely a temporary sort of solution, because the job's probably not the issue. But, if you don't mind changing positions every so many years, this might be the way to go. 2. Find new things to do in your current position. Maybe talk with your manager about finding ways for you to grow as a developer to your team's benefit, whether it's picking up new technical skills, domain knowledge, soft skills, etc. It may be that there's an opportunity for promotion that you could take advantage of. Maybe there are common problems or tasks that you could automate or wrap into a reusable library. Maybe there's a skills gap you could fill by learning some new things, or some knowledge you could spread around to newer members of your team. 3. Learn to let the job be the job, and live your life outside the office. There are worse positions to be in that "motivated by money". This is also probably a better question for something like r/cscareerquestions. It's far from being specific to C#. It's really not even specific to programming.
Programming for money is fine. Don't let the internet crowd tell you otherwise. Most people in the world work jobs they are not passionate about and that's fine.
Sadly no. I was forever trying to get an emulator to work. And its was only when I bought a pixel2 that I got it to connect to my phone consistantly. Xamarin pushes Forms, but I like to use Xamarin Android, all the fixes seem to be around Forms. 
Have you ever looked at the API of a library? Object explorer, or maybe done some reflection to find classes that derives from the one in front of you? You know, just to find out what's available? I personally find that quite useful.
18 months is pretty much my timeframe for getting bored with a project. I worked at some outsourcing companies and while they have shitty reputation compared to product companies it certainly helps that products are changing even if they are in a bad shape.
Is there a way to discover those pack uris to add the themes? So far I've only seen them listed in documentation or tutorials, but is there a way to do reflection on the assembly for these things?
Commercially, as in being paid for the stuff, Xamarin (also MonoTouch/Monodroid in the days of old), Titanium and Cordova. Outside of work - React Native. I also looked at Ionic and Onsen at some point, branded both as slug-fest abominations and never ever even considered using hybrid app frameworks for anything ever again. If it works for you - it works for you, I'd rather stick to the old way of writing everything twice. Maybe use a transpiler for my business logic, like HAXE, whenever they decide to add full Swift or ObjC support.
&gt; all the fixes seem to be around Forms Because Forms are the most broken.
Well, ackshually...
Fair enough. I would prefer an interface personally. Better for di and testing then extension methods.
Was in the same boat, had a burnout 5 years ago, that shit is no joke. I now do a course every year, either paid by my employer or myself. I learn something new and get a diploma every year, project management, data protection, specific work related skills I haven't dealth with etc... Man it really breaks the monotony. I look for night classes that aren't too expensive but are accredited. Good for the auld CV too.
This will only run `ProcessDirtyNodes` up until the first graph that still has dirty nodes, so the other graphs will be unprocessed.
Anyone live in Boise here?
I use Bing and its unironically pretty decent for code snippets and stuff like this: https://www.bing.com/search?q=read+all+llines+frmo+file
Try these—and, trust me, she'll like them, too. https://www.gnc.com/hardcore-supplements/452308.html?productId=13251525
The only thing I'm complaining about is that the pack uris available are only documented on their site. Let's assume I have their dll downloaded already and I take a ride to my cabin. I want to design some user interface while listening to the birds chirping. How would I go about putting a pack uri in my app resource dictionary? I do not have internet connection at my cabin.
This is how I feel as well. I did the whole, looking for purpose or passion thing in my career for quite a number of years after I first began professionally programming. After many ups and downs - from super huge corporations, to smaller startups to game development, I realized that it's all fundamentally _work_. And it doesn't make me feel great all the time. Sometimes it's a blast. But it can be a downright drag sometimes. And that's ok. Once I realized that it's ultimately a means to an end, that made me feel much more content. When you can acknowledge that the job is really there to facilitate what _actually_ makes you happy and fulfilled, most jobs can become surprisingly pleasant. Find something you're good at; where you can provide good value, and rock it. Then, use that to live a life that makes you happy.
Any reason you haven't started your own software and stayed in employment?
You drove around Colorado? I'm assuming you did more than just drive around because how I am imagining it, I don't see how that would help my sanity :P
&gt;having to manually delete the bin and obj folder Why do you have to manually delete the bin and obj folder?
Drove around, camped, hiked, rode my mountain bike. Just decompressed and did nothing for days. 
I've been developing software for 30 years and C# since beta, so 17 years give or take. Burn out is a very real thing, and I advise you to be very careful with it. It took me into the ground, where almost everything collapsed around me. It doesn't have to be that way. My advice is to spend time with good friends and family if possible, to reinforce those relationships outside of work. It is important and will give you good outlets when you aren't working. Don't let the job pressure you into working insane hours, constantly pulling all-nighters, being on call, or having to come in at 3 AM to fix some crazy issue. I don't know if this is your situation but avoid it. It it's rare, that is fine, but if it is a regular thing, something is wrong. If your job is boring and you are just there to pay the bills, it is what it is. Switching jobs can be a scary proposition and you may end up in an even worse situation. The grass isn't always greener. But that is a decision you'll have to make for yourself. I know people who were content to stay at a job because it was "easy" and paid well. I myself felt I was no longer advancing in my career (sort of a maintenance mode) and sent out resumes. It was a good call in my case, as I entered a new environment, with new coworkers and new ideas and it was refreshing. The pay bump was nice too.
This seems to be an American only problem. Life in Japan is stay in your career. If you leave, at all, you'll not get a job other than a part time job pretty much ever again.
Probably drove around Colorado in a big circle.
There are a lot of good answers in here about switching jobs or even careers. What worked for me is constantly pushing myself to get better. Not learning new frameworks or languages but learning how to write good, clean code. Learning good patterns. Learning architectural patterns. Learning functional paradigms. Stuff that is completely reusable in any and all languages. That way you're doing something new and possibly exciting on every project even if you're using the same languages and libraries all the time. Started for me around year 6 and I'm now in year 14 and still feel good about it. There is a lifetimes worth of things to learn and as you do it, you'll pull up the skills of those around you and that can be infectious too. Make the job challenging and it will stay interesting.
I believe we all get there at some point and more often than many others think. That is pretty normal. Get back to something else, stay away from your computer, give yourself some time and you will feel like coding again. If you don’t, just change your field if you can. Just don’t think that you are not the only one. 
speaking as a former code warrior but now a project manager.... how are we useless - what should we do differently?
This sums up my life exactly. I started this job 1 year ago and had to learn ASP Classic. Yep I learned it in 2017, willingly. I have never had a "fun" programming job, I didn't Coldfusion before this for a decade. The thing is, these non-sexy programming jobs are the ones that know they need to pay to retain, and they do it in my opinion. I'd learn COBOL tomorrow if someone needed me to. The trick to it is take time off here and there before you burn out so badly. A motorcycle is great for this. 
&gt; If a method is static it can only be called by virtue of its Class, followed by Method name. Yes. You always access static methods via the class that they're defined in. &amp;#x200B; &gt; In the context of non-static methods (is the term instance method interchangeable?) Yes, these are called instance methods. &amp;#x200B; &gt; the syntax is instead object (instance of the class I guess, hence the name?) followed by method name An instance of your object will invoke that function. &amp;#x200B; &gt; The only way NSM can callthe SM, is via an object......? No. Within the scope of a static method, you cannot make use of any instance methods defined in that class. In this context there is no instance of the object. &amp;#x200B; &gt; If I am correct about #3, namely, a NSM can call a SM successfully, does that mean then that when the SM is called by the NSM, we would then utilise the syntax of Class.MethodName? Correct. You always access static methods via the class that they're defined in. &amp;#x200B; &gt; I have noticed some variables have an underscore \_ prefixed Yes, this is a convention for private variables. Classes that inherit from this class know nothing about these private variables. &amp;#x200B; &gt; What about inheritance then? There are other access modifiers that you can use. In this case `protected` will allow inheriting classes to 'know' about these instance variables.
Underscore prefixed variables usually help indicate private members. Look to see where they're defined. Look, as helpful and cool as static methods are, if you really want to do OO, you'll avoid static classes, methods, and properties altogether. It's a breach of encapsulation. So the deal with static is that you can call it from anywhere. That's not OOP. The regular way to call things is to new-up an instance of that class as an object, then call the methods. You can do that from static methods, so there's the workaround you were probably looking for.
Change jobs. Change technologies. Maybe a JavaScript bootcamp?
Static methods belong to the Type and are therefore called through the Type. MyClass.StaticMethod(); Instance methods also technically belong to the Type, but it's easier to logically think of them as belonging to the specific instance. They are invoked on an instance of the Type. myClassInstance.InstanceMethod(); The reason you might be confused in #3 is probably because of *scope*. Static methods, assuming you have access to the Type, have a global scope. Therefore they are easily invokable. There is, however, nothing preventing static methods from calling instance methods. Take for example: static int Sum(params MyClass[] args) { int total = 0; foreach(MyClass c in args) total += c.GetSize(); return total; }
Congratulations, you're well on your way to becoming a professional. When you hate it, that's when you've arrived.
You appear to be getting older. 
I came here to post the same point as your #2. I'm just over 6 years into my career as a games programmer, primarily using Unity3d and C#. Tbh, I get pretty bored of Unity c# code. It's just not challenging enough. I talk to my manager all the time about career development, and the paths I can take to further my career. We have a set meeting about it once a month, and talk about it frequently between those meetings. I discovered I like contributing to creative design, such as game design and marketing. So for the last few years I've been involved in those meetings and decisions (perks of being on a small development team), and it means I get to split my time between run-of-the-mill programming work and challenging design tasks and research. Though, if my interests were different I could have taken a different path and started working towards management or something. You don't necessarily need to change companies to challenge yourself and become more interested in your work. But if your current company doesn't have options for career progression you should probably find a new job. Other perks you could seek are options to take courses to learn new skills, or time dedicated to independent study. We have one "Personal Development Day" a month where we can study/build whatever we want, I've heard of other companies that dedicate the last hour of every day to the same thing. 
I'm Vietnamese software engineer. I have 4 years experience working with latest framework/language like Dotnet, Dotnet core, C#, Angular, Sitecore CMS and so on. I'm looking for a remotely job or a visa sponsor job.
For example, I love mayo on my burger.
I did not realize this feature existed because I used the wrong one and assumed the language didn't support them used together. That's why I think this proposal is good.
You make a good point. I don't know if you can trivially discover what dictionaries to merge without external knowledge, at least with MaterialDesignInXaml. It would be easy enough for the developer to provide that through the API itself, of course, but I get the feeling that your complaint is more about how this shouldn't be an issue in the first place rather than with this individual API. If this API was just a set of new or differently named controls rather than template replacements you wouldn't have to merge any dictionaries, but that is not how it was designed. 
There are burgers that don't have mayo on them? I'm not sure that could even be considered a hamburger.
Consider changing employer, programming language, and the main topic you are programming about. For me it is always a challenge to learn new things and get better at it. 
Oh right
I concur. 
&gt; C++ &gt; More jobs Hahaha, no.
I would say that entity framework is the go here. Consider going with. Net core there is lightweight version of EF. 
New technologies always reignite my passion (if I ever have lost it). Things such a the newish .net core framework and latest mvc has me super excited. Even try implementing technologies you've never used before... SignalR, firebase etc. Find someone else that loves development and have in depth conversations about it that one's always fun, even if it turns into a useful heated debate 
Conferences and new technologies help. Or you could be ready for something completely different... somewhat. Like going up the ladder to project management or sideways to a different field.
I found xamiran to be awful too.. I tried it out on two occasions.(for hours) separately(months apart fresh installs).. the first time it was trash and I tried the second time after it was on dot net rocks and they where bumming it up.. my machine is i5 16gb 500ssd .. errors running stock example programs .. An absolute eon building to a device or external Mac.. I'm genuinely surprised that you didn't get downvoted for mentioning xamiran in an anyway bad way. I too only downloaded it to use c# on mobile, the reality is it's not fit for purpose unless you want many headaches. My recommendation is to try out expo yes it's (react native)JavaScript (the arch nemesis of the of a lot if this sub going on and on about blazor) .. **you can get started in your browser in 30 seconds with real-time updates.. try it out [expo.io](https://expo.io)**
Javascipt? Do you want to kill him?
People are saying that there is this new technology called Xarmian
It's been the same case for me as well. I've been working on the same project for 3 years now. Nothing challenging. Start learning a new framework or try creating one (if you are capable of): I thought of learning a new framework ([ASP.NET](https://ASP.NET) CORE) and then I started exploring the areas in [ASP.NET](https://ASP.NET) Core framework. Though you start learning you'll certainly feel lazy. Start a blog and write what you've learnt. **Don't want to explain to the world what you've learnt?** Well, create a side project of your choice in the new technology that you are learning right now. Build the site. Deploy it. Start campaigning. That should make you visible to the world. You either get hired by someone or your pockets will be filled with money by your app that you've created. &amp;#x200B; &amp;#x200B;
Your eyes are full of hate 41. That's good. Hate keeps a man alive. It gives him strength https://www.youtube.com/watch?v=Jaqufq_2LBo
Hi. Really sorry to bug you, but do you know where I can find Xamarin Forms? I've googled, gone to MS website etc...and it all points at downloading Visual Studio with the Xamarin plugin, rather than a stand-alone version.
Are you me? I could have written that word-for-word.
Thanks for the input. Unfortunately WearOS is my primary target for this, and the watch doesnt really have a viable browser experience... 
Im using the latest version of VS2017 and its far from a mess. Its a wonderful usable fast stable environment with every tool I could possibly need baked right in..
I assume you're being sarcastic?
Think back to when you were a programmer. It’s those things. 
When I was going over, The Cork and Kerry Mountains....
7 years of .net. Started learning python and datascience from Berkley (on edx.com) and started playing with Kotlin and Erlang.
It comes with the regular Xamarin installation. When creating a new project with Visual Studio, select the "Cross-platform" family and the you will be able to select the "Mobile App (Xamarin.Forms)" template. 
Cheers. Saw that after I posted. Sadly, it's starting to seem just as unstable. The Viewer keeps crashing, and/or just going black randomly etc... I'm starting to think I'm in a parallel universe where I'm only imagining that smartphones exist and in reality, it's not actually possible to write anything for them at all.
&gt; When I was going over, The Cork and Kerry Mountains.... I met with Captain Farrell....
I've never had a project manager that's every really done anything - in over 30 years. I'm working on a project currently that's implementing a system from a third-party, and we're having to deal with a middle man company to interface our software with theirs. I get replies to emails 3-4 weeks later, if I'm lucky - in the meantime, I'm stuck twiddling my thumbs. These are easy questions; things like "let me know the dev's IP address and I'll get our chaps to allow it through the firewall to the test API server...." I'm currently on my 5th week of chasing that one. Project is supposed to be live in a fortnight (started last November). We've barely been able to start at our end, mainly because nobody here knows what's going on. Useless, in this instance, would be too kind.
To be fair, sometimes Xamarin tends to be really picky with your current setup - you can have an almost flawless experience with the UI previewer or you can have it horribly unstable. I can't help you further with this; I know there is a fair share of users complaining of this exact same issue but I haven't experienced it in my current machine. If you still need to, try giving native development a go. But I have to warn you - if you come from .NET's fairy land (mainly WPF and its godsend MVVM), you will find Android's MVP and iOS's MVC really lacking and backwards. There is nothing equivalent to bindings, you have to manage lots of state changes by yourself, etc. 
Yeah. I get that. I think I'm just going to throw the towel in. I could get things working with J2ME all those years ago; java is a pain in the arse, but at least it did what you tell it. I can get rudimentary apps made with Android Studio (and before that with Eclipse). It wasn't fun, but it worked. I've tried re-installing VS and Xamarin plugins, tried it on another machine (my laptop). I get the same issues. I don't think mobile dev is for me. Just for the record, my background is Z80/68k asm, then onto C/C++, then from there to VB3 through 6, then dot net beta, then through all versions of dot net - then MVC etc...and MS stack, mixed with python, Perl, PHP etc... I've not yet found anything quite as infuriating as trying to get simple apps working on Android through VS/Xamarin. It's a shame. It looks like it could be really good. 
Yeah, software development has gotten exponentially complex in the last 10-20 years. There are so many tools, SDKs, etc. now that being a solo dev is way more complicated than before. And I'm with you on the Android side, it's getting better with the latest versions but still you have 3 or 4 APIs for doing the same thing (like taking a picture), and you have to go around guessing which one is the "correct" - the official docs may explain how to use one approach in depth but at the same time warn you that it is deprecated and you should use a different approach that is more lacking in documentation. Crazy. Have you tried Flutter? You may have a bit more luck with it - the downside being that you have to program in Dart.
I hanker for the days of programming in assembler. That's the other thing I've found. The docs. You step through the examples, and then it says something like "Go to Settings, click on [this], then [that] and then you can set the [something] to [something]. Only [this] and [that] are not where they say they are, so you stumble around for an hour trying to find it, only to find it was taken out and the docs not updated. I'm finding that a lot. I'm still trying to populate a simple list with 2-3 properties...I've not succeeded over three days. Something is wrong when that's the case for a seasoned dev. I haven't tried Flutter/Dart - in fact, this is the first time I've ever heard of either. However, I think, this is the last day of trying. If I can't get a fricking list populated by lunchtime, then I'm never looking at mobile dev again. 
His money he was counting 
For your msbuild script, you need /p:Configuration=Release. 
I first produced my pistol...
Extension methods? Static helpers? There's plenty of uses for static in an OO world, there is no reason to 100% avoid them, just make sure the reason you're using them is correct 
OOP doesn't state to keep logic and data together though. A very common practice is MVVM(s) where you have models, services, then view models. Your models can inherit from each other however they need, your services can inherit however they need to fill inherited models, and your view models just consume that through an interface. Nothing says to keep that logic together :)
I've never used it myself but you could use local functions so you don't have to pass anything. Way they are implemented they probably don't do any allocations in this case. I personally feel that there are some rare cases you need a goto but usually it means your method is doing too much and you should put that code in separate method because it makes code more maintainable and readable. ``` bool Foo(int x, int y) { bool Loop() { for (int i = 0; i &lt; 10; i++) { for (int j = 0; j &lt; 10; j++) { if (j == x &amp;&amp; i == y) { return true; } } } return false; } return Loop(); } ```
Tried that, it doesn't put pdb for the referenced solution projects, but still adds pdb for the nu-get referenced DLLs.
Fair warning: my experience is more with EF6 than the current EFCore. &gt; No example I find has a primary key noted as such. By convention, EF will treat any property named ID (or &lt;type&gt;ID) as a primary key which is probably why you don't see it explicitly marked as such in examples. Also, if you're looking at examples using fluent api (which it seems you may be), it overrides data annotations. You can use both, but there's a precedence order: fluent -&gt; annotations -&gt; default conventions &gt;I almost never see this ModelBuilder in the blog/post examples You man not need to touch it for general use. It (and the fluent api) are aimed at more granular control over model generation than the more 'default' codefirst approach. &gt;Do I have to do public int PersonId and right below it do public Person Person? Does order matter when referencing things or is that simply something that's common to keep code cleaner? With code first you don't really *need* to wire up FK relationships. Having a complex type (or collection thereof) as a property will wire up a one-to-one (or one-to-many) FK relationship without you defining it explicitly. It's recommended that you do so anyway, but a FK will be defined into the EF model for your type/s if you don't. &gt;I have trouble trusting black magic without understanding the mechanics I know what you mean, but EF is... big. Learning all the ins and outs is a process. It's probably worth making sure you understand the gotchas, but getting your hands dirty with it is definitely a step in learning (or at least I find it to be so). Hope that answers a couple questions. 
For documentation about methods and types, just select the method/type in visual studio and press F1. No searching necessary.
Look into ASP.Net or .net Core MVC for this. Developing a web app for this type of thing is exactly what it's good at. For data access you could use EF as mentioned in the other comment here, or use Dapper, or go without an ORM. Depends on how complicated your dataset is and how many data models you'll need. 
Sorry what?
I would go with a .net core MVC\Webapi SPA using Vue. Personally I'm a big fan of Service Stack but it requires a license although it is worth it as they have templates for this and a great ecosystem . For the data layer use a micro orm like dapper , ormlite, npoco or anyone other. 
The service stack license is pretty expensive, if you don't need to run in .netstandard or core, you can get away using Service Stack V3 which is still opensource. 
I'd definitely recommend figuring out what the parse error is for release mode, as you'll definitely want to publish in release mode for the compiler optimizations. If you can't get all this to work it's also possible for you to just delete pdb files in your build script. Sometimes dumb solutions are okay. 
For desktop app, WPF. Linq2db is a fast library for db access, it is faster than EF. 
"Ground-up rewrite" is a bit extreme unless you're using WinForms or something. They're allegedly adding WinForms in .Net Core 3.0 anyway.
Check the publish profile to see what it has in LastUsedBuildConfiguration
Man, I don't know what to tell you. I love being a developer, I really do. I get a kick out of making something fast that my users love. But I only do it if I get paid. I haven't worked on a personal project in _years_. I realized I'd rather play games than write them (as much as it was a dream of mine to make games, it's long and hard and there's little chance of a meaningful payout, even emotionally). I realized I'd rather play with my kids than shoo them out of the room. I realized I'd rather hang out with my wife rather than ignore her in favor of writing more code. I really do enjoy my job, but at this point, I do it for the green. One-hundred-percent. I've made it my job, my career, but it's not my _life_.
Some sort if "missing ',' character" but it is strange as I can publish in release within VS, just not from Command Line...
ASP.OLD. I'll never be able to see it as anything else now, it just makes too much sense. Ol'VB ASP.OLD .OLD Framework
Screw WCF, give us a cross platform destop UI toolkit already. PS : Please don't bother telling me about Avalonia and whatnot... 
WPF* not winforms
I love WCF and I hope they do port it. It is incredibly useful and easy to get going with it (assuming you aren't needing to do any "fancy" stuff). WebApi does take away some of WCF's marketshare but, IMHO, there are still some things that WCF does better at the moment like Publisher-Subscriber, chat servers, and even game servers.
I prefer how Core/Standard projects work, how Nuget works, and a lot of other things. That and Core is a great companion for Docker. This seems like a step in the right direction to me. 
It would just be flattened ground beef on a bun if it doesn't have mayo.
Does that mean we'll finally have a good cross platform UI framework? DOES THIS MEAN THE DEATH OF ELECTRON?!
From your text it sounds like you have two motivations. First, the giant class is hard to work on and second you want to be able to switch environments? For the first it sounds like you just want to move stuff around, create an interface/facade and have it interact with, what will essentially be the original code? For the second it would be helpful to know why changing the connection string isn't already possible. Can you expand on that? So the first one, don't feel compelled to "fix" it unless you are frequently changing or fixing those methods. I spent a couple of days recently refactoring a 10k loc class :/ into a 6k loc class by refactoring all the duplicate code out into methods everything shared, but my motivation was that the entire class has to die as it is dependent on a technology only the Inca remember. The second, as mentioned, need to know why this isn't already possible. Bonus points: Don't worry about what the next developer thinks. No developer inherits code and doesn't immediately say "WTF is this shit?" 
I've thought about teaching programming. It might be something I do later in my career. I've only been professionally programming for 3 years but both jobs I've had have atrocious codebases and seem to care very little about doing it the "right" way and care more about doing it the "fastest" way. I'd *loooove* to work in a codebase where I can disagree with someone about architectural design decisions or general software design -- instead, I seem to find myself arguing for the ability to *implement* SOME kind of identifiable architecture or arguing against the usage of **global, mutable static classes**, for example. Proper respect and understanding for SOLID programming principles is also a major point of contention between myself and "the business".
Is there a source link from MS? I missed it.
Blog says *all but confirmed* but I would like to see where this is coming from. This sort of stuff can influence where new projects go and no one will sign off on doing it one way due to what seems like evidence-less rumours
aww
WTH? I thought the whole point of Core was being cross-platform!
Yes, but the GUI stuff is not ready for cross-platform yet. It will probably change in a future release.
[There's nothing alleged about that.](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/)
I fucking wish 
I understand the terminology is confusing, but please, don't call .Net Framework ".Net standard". That's an [entirely different thing](https://docs.microsoft.com/en-us/dotnet/standard/net-standard).
That's netstandard, basically. Core shares a lot of code between platforms but can still contain OS-specific features that aren't availble if you target standard
I was so excited with MS acquired Xamarin back in early 2016. Here it is more than 2 years later, though, and still no cross-platform GUI for desktop. Makes me think it's not a serious goal for them, of they only bought Xamarin just to kill it (to continue trying to force everyone to Windows).
I think they will be Window specific packages rather than being built into the framework itself.
Is this code called in a loop? Is there a specific reason why it needs to be made more efficient? It's readable as it is now. Code readability is important. You could possibly combine some cases but that would just make each "if" check more complicated and harder to read. Sometimes a long sequence of "if" statements is the best option if it reflects how you think about the problem. And, just as important, if it means you will still be able to read the code 2 years from now. I suggest replacing the hard-coded numbers with constants, though. If you can create meaningfully-named constants, that is. It seems like 54 and 55 are magic numbers of some kind.
So I have a Factory class that handles my connection string for the various data storage techniques. Is it the best solution? Probably not, but it keeps the knowledge where the knowledge belongs by letting the DAL remain unaware of where exactly it is getting information. The first is the most frustrating. With such a large class it becomes difficult to find exactly what I want. I get the original motivation of creating a single class so that they did not have to remember if the Progressive Billing was under Class X, Y, or Z. They just created a single class in the Service Constructor and knew that all PreSales capabilities are there. I almost need something like a directory, but really that mindset breaks down because I already need to know the method I am searching. So I pass my IDbConnection to a directory then call for the "NewRevision" method and it passes back to me the concrete class to call. Then someone can move the method around and none of the calling functions care because they get the correct result.
Obviously you write the GUI part from scratch /s
Yea about 2 loops deep. No specific reason other than length. I'm not losing performance or anything. The way I wrote it is very understandable. The numbers come from a table and vary by each instance. And they will never change. Is the reason for making them into constants to all easier change for the future or another reason? 
If you rethink of the problem in terms of 1. Each measurement greater or less than 54 2. Comparison of dim1's measurement vs. dim2. You may be able to simplify the comparisons a bit. var value = ""; var dimDepth = 55; var dimDepth2 = 30; var dimWidth = 55; var dimWidth2 = 30; // Pre-calculate which measurements are above 54 var aboveDim1 = 0; // both width and depth var aboveDim2 = 0; // both width and depth var aboveWidth = 0; // width of both dim1 and dim2 var aboveDepth = 0; // depth of both dim1 and dim2 if (dimDepth &gt;= 55) { aboveDim1++; aboveDepth++; } if (dimDepth2 &gt;= 55) { aboveDim2++; aboveDepth++; } if (dimWidth &gt;= 55) { aboveDim1++; aboveWidth++; } if (dimWidth2 &gt;= 55) { aboveDim2++; aboveWidth++; } // only one of the four measurements is above 54 if (aboveDepth + aboveWidth == 1) { value = "JTR/OW/OE"; } // either both widths are above 54 or both depths, but not all 4 else if((aboveWidth == 2 &amp;&amp; aboveDepth == 0) || (aboveWidth == 0 &amp;&amp; aboveDepth == 2)) { value = "JTR/OW/BE"; } // either both dim1 measurements above 54 or both dim2, but not all 4 else if((aboveDim1 == 2 &amp;&amp; aboveDim2 == 0) || (aboveDim1 == 0 &amp;&amp; aboveDim2 == 2)) { value = "JTR/BW/OE"; } // all 4 measurements above 54 else if(aboveDepth == 2 &amp;&amp; aboveWidth == 2) { value = "JTR/BW/BE"; } Console.WriteLine(value);
&gt; Also, if you're looking at examples using fluent api (which it seems you may be), it overrides data annotations. You can use both, but there's a precedence order: fluent -&gt; annotations -&gt; default conventions Neat! I'm kind of all over the map. I'm unsure what's "normal". &gt; With code first you don't really need to wire up FK relationships It seems like if I have an AssignedPersonID and a CreatedByPersonID -- having the PersonID at the end is what tells it where to go, right? Previously I was doing CreatedBy_PersonId but I'm not sure EF will parse it correctly or if there will be troubles down the road. &gt; I know what you mean, but EF is... big. Learning all the ins and outs is a process. It's probably worth making sure you understand the gotchas, but getting your hands dirty with it is definitely a step in learning (or at least I find it to be so). I'm medically retired. I have all the time in the world. Just trying to keep busy with an app that I would have liked to have had when I worked IT because the other apps were either stupidly expensive, horribly outdated, or had a *terrible* UI. &gt; Hope that answers a couple questions. You helped, thank you!
That's pretty cool -- it seems like ModelBuilder is quite the powerful tool.
So I do not buy the whole "spoiled millenial" thing very much. However, there is one aspect to it that has some truth I'd say. And it is this idea that a college degree = Immediately in my dream job! And like - that rarely happens. It does happen. But rarely. Part of coding is getting into those dirty positions, seeing how the real world codes and how god awful most systems are. And then you interact with bosses, managers, people not qualified to do software some reason involved in helping create it, etc., and it gives you some very good gritty "real world" experience. It teaches you how to navigate less than perfect code structures. It teaches you what DOES NOT work EVER. It shows you just how barely functioning so many software packages are...functioning being the keyword. It is frustrating, annoying, unless you are a coder no one truly gets the job that is in your lap and so a simple "well that's what we hired you to do" is about all you can expect for encouragement. It ultimately makes you a more flexible coder and it helps you spot bullshit and bullshitters later in your career. So you don't get to brainstorm and be renowned for your creativity? Yeah. Welcome to your early career. If you hang in there you will move up and find positions that are better assuming you are qualified. Now to answer your actual question - how I got into teaching. I started as a substitute. I am married to someone who makes a great living. We also live in a city that has a very nice wage/living expenses. So when I quit programming we felt it but we could make it. I did substitution for a year and just so happened to land a long term position in the subject I want to teach. Keep in mind I have wanted to be a teacher my whole life but I was convinced by others not to pursue it because "you are smart, you can make more money!" So I listened. And I have no regrets, but I never let go wanting to teach high school math. Just my thing. So I got a lot of great experience and I felt comfortable messing up as a substitute and then was eventually asked to apply to the district and came in as a first year teacher and got certified over the school year. You can skip the substitute step and go straight into first year teaching but man - first year is brutal. It is a type of stress you have probably never known. And though it is not the worst stress, it is just a constant barrage of micro-stresses all day. Every day. For the entire job. But man that is part of the excitement. So anywho yeah that is how I did it. I make about half what I used to make but god damn I am about 10 times happier if I could actually quantify it. 
Easier change for the future and also readability. Right now you know what 54 and 55 mean. But will you still remember what they mean 2 years from now? Will somebody else who has to maintain your code know what they mean? Turning them into constants only works if you can come up with a meaningful name though. Just changing 55 into "VALUE1" or something like that is pointless. But if you changed 54 to MIN_DEPTH and 55 to MAX_DEPTH then it would be more readable (in my opinion). There are no absolute rules in programming, but "try to use constants for magic numbers" is a pretty good rule to follow as much as you can. Personally, I find your code very readable. There are useful comments and you're not trying to be "tricky". If you were to shorten the code by being tricky, you would sacrifice readability. That being said, if you can shorten the code by eliminating duplication or creating a helper function that might make it even more readable. I didn't look at it in enough depth to see how possible that is. So I'm not saying "it's perfect" but I am saying it's probably good enough. Code that's readable, that does what it needs to do, and that performs adequately is code that you can leave alone for now and move on to something else that needs doing. You don't need to obsess endlessly over everything :) Maybe down the road you might have a brilliant insight about a way to improve it. Or just have some spare time to tinker.
The article literally says you don't have to and that Framework is likely outlive your app. 
Same thought here. I'll start my desktop development in core only after 3.0 when I get WPF and WinForms. And then probably not for a bit since it takes ages to get a new VS here at work. 
I disagree. I’d still start projects in the framework. There’s too many libraries unfinished and not enough kinks worked out imo. If you don’t need the cross platform/container stuff then what’s the rush moving over?
Right? I know they want to get everyone over to .NET Core and Desktop is the last hurdle, but damn I hope after 3.0 they start some kind of cross-platform initiative for desktop UI.
I typically will write the long if statement as normal, then each thing I do within the individual code blocks gets put into a appropriately named method. if(x==1) { UpdateCustomerLastLoggedInDate() } Terrible example but it shows what I mean 
Electron is your friend.
Misleading title, nice way of spreading false claims and panic in benefit of .net core of course. Try making an honest article clearly stating it's your own opinion instead of being misleading.
Maybe not "now", but you should wait for the release of .NET Core 3.0, which will include support for WPF and WinForms.
The desktop stuff will be Windows only. But there is a Mono version of WinForms that could be ported to .NET Core, in theory. 
...and then you realize that you need that one COM component and have to abandon the conversion. 
Ah ok, no a factory is fine, exactly as you say :) There are a few other options for breaking down the size of the class. First, use partial classes, so just have Presales.Kitties.cs and Presales.Puppies.cs, you can then group the together in the ide. The benefit is there's no refactoring risk, t's the same code. Regions are hateful, but are a quick tool especially when you know the collapse all key shortcut. There are also tools which help. I use Resharper, although apparently a lot of its features are now in VS2017. Productivity PowerTools is a free MS extension (also has features in VS2017)). Igt's best function is turning the scroll bar into a code map. When you do Ctrl+F, it shows all the places it found "kitties" on that map. You can do that sort of "directory" look up, but it's actually a pain to maintain the mappings. A related technique is DI (dependency injection) where you register an interface against it's concrete implementation. That actually sounds like what you're asking acctually now I thknk about it. Takr a look at [this](https://simpleinjector.readthedocs.io/en/latest/quickstart.html) and see if it relates. 
You are offering C# programmer to learn Javascript as a way to get from the low point? I tried to learn Javascript while I was feeling real good and every time it f-ed me up to the state of total despair and disappointment in the future of humanity. 
Honestly, I would recommend learning JavaScript and using Android studio, or JavaScript and using React Native. The latter I've had more success with. Xamarin was hell from start to finish and the documentation was a pain. Finding out just how many ineficiencies existed in it made me immediately oppose it when suggesting app development to people. Frankly, whenever I learn JavaScript more, my app will be rewritten and moved to React Native. I love C#, but Xamarin was more of a chore than a beneficial framework.
Yes if your aim isn’t to target both Android and iOS go for kotlin it’s easier and probably faster to get up and running. Xamarin has a wonderful language C# bundled with tons of cryptic error messages. Doesn’t worth your time if you don’t share code between platforms.
You're right about the number. They're easily lost in a table someone else or even myself wouldnt REALLY know where they are from. Thanks so much for the explanation. I prefer this thinking as well. But I like to get ideas on making it more efficient. Again, thanks 
Yep, fuck it. Gonna look into kotlin/java and see what seems best for my needs Thanks for the input
That's a great idea about using else. Because I'm checking every single one rather than just jumping out of it. 
Nope. They're actually investing pretty heavily into desktop applications.
Thank you there is much to think about here while I wrap my hands and head around this. I am working to get tests into place to create a safety net while I try to clean this up so that I can move forward with confidence. 
Actuate (OpenText)
You can use [Pigeonholing](https://en.wikipedia.org/wiki/Pigeonholing). Basically, use each condition to discriminate possibilities. A very simple example of pigeonholing: if (x &gt; 55) { //do stuff } else { //due to pigeonholing, we know that x must be &lt;= 54 to even get to this point } I might have over-complicated the solution below but I'd rather use enums than hard-coded string values. I don't know what the "JTR/*/*" strings are so I didn't put them into an enum but I created a `PressureClass` enum for ""Smacna ±2 W.G.". At any rate, the 'real' magic is in the `GetTieRodValue()` method. I identified the differences between the JTR's and systematically discriminated all possibilities until I had a result (i.e pigeonholing). The comments explain my logic. using System; using System.Collections.Generic; using System.ComponentModel; using System.Linq; class Program { static void Main(string[] args) { var pClass = PressureClass.Smacna_2WG; var tieRodValue = pClass.GetTieRodValue(55, 56, 32, 54); Console.WriteLine($"TieRodValue: {tieRodValue}"); Console.ReadKey(true); } } public enum PressureClass { [Description("Smacna ±2 W.G.")] Smacna_2WG, //other pressure classes here } public static class PressureClassExtensions { public static string GetTieRodValue(this PressureClass pressureClass, int dimDepth, int dimWidth, int dimDepth2, int dimWidth2) { if (pressureClass == PressureClass.Smacna_2WG) { var dimensions = new List&lt;int&gt;() { dimDepth, dimWidth, dimDepth2, dimWidth2 }; var dimensionsGreaterThan54 = dimensions.Where(x =&gt; x &gt; 54).Count(); //nothing is valid if no dimensions are greater than 54 or if there are exactly 3 dimensions greater than 54 if (dimensionsGreaterThan54 == 0 || dimensionsGreaterThan54 == 3) { throw new InvalidOperationException("Something was invalid blah blah"); //or you can return null if it suits the program //or return an acceptable default value } //JTR/OW/OE //Since JTR/OW/OE only allows for one dimension to be greater than 54 and other JTR's (or whatever they are called) //allow for multiple dimensions greater than 54, we just need to check to see if only one dimension was greater than 54 if (dimensionsGreaterThan54 == 1) { return "JTR/OW/OE"; } //if we get to here, we know that there are at least 2 or more dimensions greater than 54. //JTR/BW/BE requires all 4 to be greater than 54 so we can check for that here. if (dimensionsGreaterThan54 == 4) { return "JTR/BW/BE"; } //if we get to here, we know that there are only TWO dimensions greater than 54 but //we don't have enough information to discriminate between JTR/OW/BE and JTR/BW/OE yet. //For JTR/BW/OE, we know that the dimensions with a single 'pair' must be in the same range such that //its depth AND its width is greater than 54. This is different than JTR/OW/BE so we can use that //information to discriminate. if ((dimDepth &gt; 54 &amp;&amp; dimWidth &gt; 54) || (dimDepth2 &gt; 54 &amp;&amp; dimWidth2 &gt; 54)) { return "JTR/BW/OE"; } //the only possibility at this point is JTR/OW/BE return "JTR/OW/BE"; } //handle more pressure classes here return null; } } I hope this helps you in some way. 
I think the idea is that you'd use UWP which is the modern way of developing your desktop apps which does support core. 
Check if the assembly is actually referenced by the project that that .cs file is in. The package may have been installed for the solution, but not actually referenced. Expand the references node in your Solution Explorer and check for that assembly; if it's missing, add it to the project references.
I would definitely reduce it, but not simply for the purpose of reducing code. The length and encumbrance of the code is more so an indication that it could be better. It may be in your case that this is just fine -- for example, if your rules aren't going to ever change nor are new ones going to be added. You should think about separating your rules if that's not necessarily the case. The benefit of separating your rules is that your code is now a lot more maintainable. You could also go the extra step of defining the rules in a database or configuration file. That allows the rules to change without you needing to recompile. Here's something that I put together quickly. You can flesh it out and make it more robust. struct CheckItem { public CheckItem(int depth, …) { … } public int Depth; public int Width; public int Depth2; public int Width2; } struct Rule { public Rule(int depthLow, ...) { ... } public int DepthLow; public int DepthHigh; public int WidthLow; public int WidthHigh; public int Depth2Low; public int Depth2High; public int Width2Low; public int Width2High; } These are your types that we're going to work with. Next we define a dictionary containing the rules for each tierod value. static Dictionary&lt;string, Rule[]&gt; rules = new Dictionary&lt;string, Rule[]&gt;() { { "JTR/OW/OE", new Rule[] { new Rule(55, int.MaxValue, 0, 54, 0, 54, 0, 54), new Rule(0, 54, 55, int.MaxValue, 0, 54, 0, 54), new Rule(0, 54, 0, 54, 55, int.MaxValue, 0, 54), new Rule(0, 54, 0, 54, 0, 54, 55, int.MaxValue) } }, { "JTR/OW/BE", new Rule[] { new Rule(0, 54, 55, int.MaxValue, 0, 54, 55, int.MaxValue), new Rule(55, int.MaxValue, 0, 54, 55, int.MaxValue, 0, 54) } }, { "JTR/BW/OE", new Rule[] { new Rule(55, int.MaxValue, 55, int.MaxValue, 0, 54, 0, 54), new Rule(0, 54, 0, 54, 55, int.MaxValue, 55, int.MaxValue) } }, { "JTR/BW/BE", new Rule[] { new Rule(55, int.MaxValue, 55, int.MaxValue, 55, int.MaxValue, 55, int.MaxValue) } } }; Finally, we get into the code that does the actual work of determining our tierod value. I put this in a console application, but you can adapt the logic to anywhere. static void Main(string[] args) { var check = new CheckItem(27, 55, 19, 55); var tierod = GetTieRod(check); Console.WriteLine("Result = {0}", tierod); } static string GetTieRod(CheckItem item) =&gt; rules.FirstOrDefault(kp =&gt; kp.Value.Any(r =&gt; RuleMatches(item, r))).Key; static bool RuleMatches(CheckItem item, Rule rule) =&gt; (item.Depth &gt;= rule.DepthLow &amp;&amp; item.Depth &lt;= rule.DepthHigh) &amp;&amp; (item.Width &gt;= rule.WidthLow &amp;&amp; item.Width &lt;= rule.WidthHigh) &amp;&amp; (item.Depth2 &gt;= rule.Depth2Low &amp;&amp; item.Depth2 &lt;= rule.Depth2High) &amp;&amp; (item.Width2 &gt;= rule.Width2Low &amp;&amp; item.Width2 &lt;= rule.Width2High); I hope you find this useful, but if not I hope you find it at least interesting.
I've never heard of Service Stack before, what do they offer that you don't get out of the box? StackExchange.Redis is already built in, we have [Json.Net](https://Json.Net), and I see nothing that there "web framework" supports that wouldn't take 5 minutes to write. What am I missing?
Disagree. Web and desktop should be the same from the beginning. Web is evolving to even get things like ThreeJS, WebGL, which means even software like CADs are possible, while desktop regresses (things like WPF returning for net core 3 and not even cross platform like rest of the runtime, where everybody thought that that waiting period is for getting WPF to cross platform). If web and desktop would get their marriage in like 2000, IT would be in way better shape today.
For one it can generate a typescript library (or iOS/android/etc) for your entire API structure amongst other benefits you get with a complete package. The autoquery functionality is awesome. You can even decouple the API endpoints with an mq server. The virtual file system allows for easily hosting views in a cloud provider like azure storage or AWS. Cross platform. Amongst other things. 
I was like you until a few months ago. Gave JavaScript another go recently and boy. The world has changed. JavaScript is a juggernaut, and can be a lot of fun. ES6 fixes a lot of quirks. There is so much innovation, new tools all the time, it feels like a beehive and is very energizing. It can be very refreshing for the mind to learn something new. JavaScript, react, redux made me excited about developing again.
I was paying attention. But things like WPF should be from beginning of net core. Its one of the reasons for Electron popularity. 
Checkout ServiceStack.
There is Xamarin Forms...
:o
I think not porting `System.Windows` namespaces can be excused. :)
Check out Bridge.NET. It is the only way that I can deal with javascript without going insane.
`System.OS2` namespace, anyone?
\# ASCII.
You can at least us partial keyword to split up the file into logical sections.
At that point it's time for beers.
I may move to the partial classes as both you have /u/TriptychButWith8Bits suggested. Before this thread I never thought about using them beyond the break-up used in WinForms. It may get around the block of new commands caused by several subsections. public class PoaService : BusinessServiceBase, IPoaService { private POA_rules _rules; private UserAccounts _accountDAL; private PoaForm _formDAL; private Financial _financialDAL; private Sales _salesDAL; private Customer _customerDAL; private AfterSales _aftermarketDAL; private Comments _commentsDAL; public PoaService() { _rules = new POA_rules(); _accountDAL = new UserAccounts(); _formDAL = new PoaForm(); _financialDAL = new Financial(); _salesDAL = new Sales(); _customerDAL = new Customer(); _aftermarketDAL = new AfterSales(); _commentsDAL = new Comments(); } public PoaService(ArmorServices_DAL.IDbConnectionFactory factory) { _rules = new POA_rules(factory); _accountDAL = new UserAccounts(factory); _formDAL = new PoaForm(factory); _financialDAL = new Financial(factory); _salesDAL = new Sales(factory); _customerDAL = new Customer(factory); _aftermarketDAL = new AfterSales(factory); _commentsDAL = new Comments(factory); } 
Java and C# are super similar syntactically anyway. Most of your C# knowledge will translate directly to Java anyway.
And we will call it: ASGUI.
https://github.com/migueldeicaza/gui.cs
Xamarian ASCII Forms will solve this deficiency.
It's... it's *beautiful*. Takes me back to the halcyon days of 1986.
You don't... and it's a fucking shame.
As someone just pointed out, there is a [beautiful cross-platform GUI](https://github.com/migueldeicaza/gui.cs) solution already available.
[it already exists.. Qt!](https://www.qt.io/) 
[removed]
Sounds good. Take a look at the simple injector link I included as it will cut that code in half and help with your testing :)
They should drop winforms and stick with wpf for cross platform. Wpf is fantastic
&gt; DEATH OF ELECTRON TIL Qt doesnt exist.
Yes ServiceStack is easy to use if making REST services. Unfortunately the service we have is not a REST service, and it cannot use JSON. &amp;#x200B; But at that point, if I am going to make REST service, I might as well just use WebAPI, it's just as easy to use these days.
Muh C++ though Muh I cant into modern smart pointers
Would rather have an official statement from a talking head via blog or video than just a subordinate employee that isnt the lead
Not at all. https://wiki.qt.io/Language\_Bindings
Well the strength of WCF is that it can have multiple network interfaces to a single business domain. That is it's downfall too - because of all the complexity of the framework around that. With WebAPI, you are mainly making REST services, and, to be honest, a lot of public web APIs use REST these days, so no need to muck it down with service contracts, encoders and inspectors, obtuse and poorly documented binding syntax. When you say "do something 'fancy' " - I mean WCF was designed for us to, supposedly, do all sort of "fancy" network-based services, as long as you knew how to do it. Unfortunately, once you dig into that part, it's will make you rip out your hair. It's is fancy and also completely over-architected, IMNSHO.
link didnt work
It might be a wrong Language version and / or newer features used (e.g. Debug has 7.1 specified, but release is on "latest major, e.g. 7.0)
Not to be rude, but I mean come on.... do at least a bit of searching https://www.bing.com/videos/search?q=debug+in+C%23+visual+studio
GUIs/TUIs are banned! Only console apps that act on streams of text are allowed from now on. ####We're Linux Now
The third sentence of the post says it's not confirmed.
A few suggestions: * Use [GitHub Gists](https://gist.github.com/) instead of Pastebin. * Use [`var` keyword](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/var) instead of specifying the type every time. * Use [breakpoints for debugging.](https://docs.microsoft.com/en-us/visualstudio/debugger/using-breakpoints?view=vs-2017) * Read the [documentation](https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.socket?view=netframework-4.7.2#security) for the Socket class. The remarks section says: "When you are finished sending and receiving data, use the Shutdown method to disable the Socket. After calling Shutdown, call the Close method to release all resources associated with the Socket. " 
Do you need help with the concept of debugging or just how to do it in VS?
The Xamarin purchase seems like it was more for mobile
Who uses powershell on Linux?! 
There is a difference between encountering build bugs and emulator issues, and not being able to create a simple ListView. If you are creating a ListView in Xamarin.Native you create it the same way you would create it using the iOS or Android APIs. If you are using Xamarin.Forms you create it the same way you would create it for WPF or UWP. None of those require 400 lines of code.
People that have their build scripts that were going from windows to Linux are the only people I know of, and I think that's why they did it in the first place haha, other than that I have no idea
Removed: Rule 4.
My company uses webforms still, don't forget about us haha :(
Nearly all libraries that work in .net framework work in .net core, even if it doesn't have a target for it, and they have an analyzer that will tell if it works before you go to use it. Unless you're writing a desktop application (which as everyone else is pointing out will change in .net core 3.0), there is no reason to use regular framework.
Oh, wow. That's pretty cool. I need to get this integrated into Unity.
Maybe someone should start a converter from WPF to QML, with this it would be possible to easily have cross-platform UI based on QT.
No, because I am drunk 
Happy Friday my dude
Thanks bro you too!
Just as a side note it is bad practice to have public surfacing Tuples in C# code (especially for libraries) You could do a IList&lt;T&gt; SelectDetailsAsTuple(Expression&lt;Func&lt;T&gt;&gt; selector) =&gt; xxx.Select(selector).ToList(); IList&lt;(name, description)&gt; NameAndDesc() =&gt; return SelectDetailsAsTuple (x =&gt; (x.name, x.desc)); 
Your code is functional as compact as you can make it. Every function retrieves different data that serve different purposes. Probably best to keep them separated. On another note: you should return either `IEnumerable&lt;T&gt;`, `Collection&lt;T&gt;` or `ReadOnlyCollection&lt;T&gt;` instead of `IList&lt;T&gt;`. In this case, I'm guessing you don't want users of your API to change the results so use `ReadOnlyCollection&lt;T&gt;`. Source: https://stackoverflow.com/a/1077916/1277156
[removed]
The web stack is awful. JS was never intended for large projects, and writing HTML and CSS is like writing an SVG file by hand. 
&gt; I thought the whole point of Core was being cross-platform! No it is not the whole point of Core.
Do you happen to know if EF6 on Core will be Windows-only?
Shameless plug - https://sietch.net/ViewNewsItem.aspx?NewsItemID=271
The web gets features but it still sucks. You can be feature rich and totally suck.
What is wrong with Avalonia?
I don't have any experience with IronOCR, but I can say that the recognition in Tesseract 4 (currently beta) is excellent. You should be able to use a wrapper, but the command line interface is easy enough to use in any case. [Wrapper](https://github.com/charlesw/tesseract/tree/feature/321-Tesseract-4) (branch for 4.0) and [language data](https://github.com/tesseract-ocr/tessdata_fast). Or use the [CLI](https://github.com/tesseract-ocr/tesseract/wiki/Command-Line-Usage) with the latest [Windows build](https://digi.bib.uni-mannheim.de/tesseract/).
An important question - How do you communicate with unmanaged C/C++ code environments? CLI - the wrong answer to the right question? 
Stop spreading the cancer.
Yeah i was gonna mention tesseract (v3) but it's output was straight up garbage Iron OCR did well Thanks for the v4 idea! ill try it out!
First fix your comments or don't write them. &amp;#x200B; Second I think your number line is messed up: because you're &gt;= 55 and &lt;= 54 the number 54.5 your dimTieRod.Value will never get any value set. &amp;#x200B; You can probably simplify your logic if you understand your problem space better. And I could help more if I understood more. My thoughts reading the code: I skim the file. What the heck are you doing? Oh this must classify something into groups. I wonder what those things are. A quick search/google for "Smacna ±2 W.G." seems to reveal that you're trying to write something for HVAC? This is ducting? You have 4 different strings "JTR/OW/OE" "JTR/OW/BE" "JTR/BW/OE" "JTR/BW/BE" Lets google those. Hum I can't find anything out about them. They're all JTR so you could move that out. What is OW vs BW? What is OE vs BE? What does " //2 Inch Pressure Class " mean? Is this 2 lbs per inch\^2 class from some HVAC policy setter? Or is it something else? Our 4 things are a 2 widths and 2 depths in every place we care about. Widths and depths go together. I bet these are really two things that both have a with and a depth. I'm going to call this new thing a box. &amp;#x200B; Okay what if I have a list of rectangles. The list will have two box in it. Oh I know a box can be small, medium, or large. &amp;#x200B; |small|both 54| |:-|:-| |medium|one is 54 one is 55| |large|both 55| &amp;#x200B; Now we can count our box sizes. |small|medium|large|label| |:-|:-|:-|:-| |1|1|| "JTR/OW/OE"| ||2|| "JTR/OW/BE" | ||1|1| "JTR/BW/OE" | |||2| "JTR/BW/BE" | |2|||You don't have a value for this but it would seem you may need this. | &amp;#x200B; I think this could be better. Let's trying coding it and seeing: [https://pastebin.com/Mciu849t](https://pastebin.com/Mciu849t) &amp;#x200B; Yes we may need a new box class (or struct). You could use Tuple&lt;int,int&gt; instead but I find every time I have a class or struct is better. 
Instead of bringing the web to the desktop (Electron), how about we bring the desktop to the web (WebAssembly) to speed up performance critical parts.
And it requires a crapton of boiler plate to get anywhere (unless you invest a lot in building reusable bits to remove the boilerplate) and still becomes its own skills whereas WebAPI is the same set of skills as you need for MVC. &amp;#x200B; Functionally, WCF is better. But in every way that matters for most of us most of the time, it sucks. So I'd hope they reimagine WCF instead of just porting it.
There is this tool I used once in a hackathon called electron I think it was. Front end website In a container that can be ran as a desktop app. What about a windows service though? Should that be a .net core?
Maybe the easy answer to the right question. All you need is to set up a sort of pipe and you can communicate your objects essentially directly. The alternative is to deconstruct or serialize them at one end and reconstruct or deserialize them at the other end. Direct communication is much faster.
WCF takes a trivial amount of code to get started. It just looks like a lot because the examples are bad.
I see no reason to think that they'll make a cross platform version of EF6. 
Is it easy to "parse" the header or, even better, is the field at a constant index in the file (like the first four bytes of Java's class files are always `0xCAFEBABE`)? I think the best approach will be to keep a hold on the FileStream behind the BinaryReader. If you know the exact index of the field, simply seek in the FileStream to that index and read the value. If not, you can use a *second* BinaryReader (with the [constructor that takes a bool](https://docs.microsoft.com/en-us/dotnet/api/system.io.binaryreader.-ctor?view=netframework-4.7.2#System_IO_BinaryReader__ctor_System_IO_Stream_System_Text_Encoding_System_Boolean_) set to true) to parse out the appropriate header section, then dispose that BinaryReader. Since you set the constructor to true, it will leave the FileStream open. Then call `fileStream.Seek(0, System.IO.SeekOrigin.Begin)` to reset the stream. Now you have the type field parsed out and you can create your old BinaryReader using that filestream. If the field is just a single byte identifier you can create a dictionary of delegates to map the correct behavior. See the below psuedocode: void Main() { var parserMapping = new Dictionary&lt;byte, Action&lt;BinaryReader&gt;&gt;(); parserMapping.Add(128, Int32Parser); parserMapping.Add(32, FloatParser); var fs = File.Open("myfile.bin"); byte fieldId = 0; using(var headerParser = new BinaryReader(fs, Encoding.UTF8, true)) { // parse out the header, blah blah blah fieldId = 128; } fs.Seek(0, SeekOrigin.Begin); Action&lt;BinaryReader&gt; parseAction; if(parserMapping.TryGetValue(fieldId, out parseAction)) { var reader = new BinaryReader(fs); parseAction(reader); } } void Int32Parser(BinaryReader b) { // do something with int32 } void FloatParser(BinaryReader b) { // do something with float }
This may be what I need. I have no problem loading the header into a struct using the interop marshaling namespace since it has a fixed size and is well defined. It’s just the actual data that makes up the file. Imagine if I was reading a bitmap file, and the header was marshaled fine, but the bytes making up the image after the header could all be floats, or all ints, or all bools. The only way you know the type of the data is from a field in the header, which could be 1 for int, 2 for float, 3 for bool, etc. Is what you’re describing above the approach one could take for instantiating an appropriate binaryreader for the image data without a clunky if statement? I am not a programmer, so many concepts are foreign to me, but it sounds like I need to look into delegates?
Yes the approach above should work fine. The CS theory behind "getting rid of the clunky if statement" is called "[polymorphism](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/polymorphism)", if you wanted to do additional research there, and the delegate approach I mentioned is one of a few ways to do it. I'm not too familiar with marshalling file data into a struct, but assuming you have that covered it should be very easy to pick up where the header leaves off by seeking to the correct index in the file (since you say it has a fixed size, you can replace the seek call above with `fs.Seek(byteSizeOfHeader, SeekOrigin.Begin);` - any binary reader created on that filestream will then be able to immediately start reading ints, floats, etc. from the data portion of the file. By using the dictionary, it acts as a kind of "switch statement" or "if chain" (but in many fewer lines of code), returning [a delegate](http://www.tutorialsteacher.com/csharp/csharp-func-delegate) (aka a function reference) that knows whether to parse ints, floats, etc. because it's mapped to the header ID field.
Yeah I have the stream checking to see if it has reached the end of the header, and if it hasn’t, then it seeks to it. I’ve seen the word polymorphism thrown around a lot - nice to hear a human explain it! Besides the delegate and polymorphism, is there anything else you would suggest I look into for reading data that doesn’t have a consistent type? Matlab’s eval() function has spoiled me, so I am terribly ignorant when it comes to this level of technical knowledge.
I really hope that their .NET framework support (patches, OS support, tools) is going to run at least 20 years. I have been working on project that has been running at least 6 years and our customers are likely going to use our end product at least 20 years (and we are going to support them by adding new features and making changes). 
&gt; It is time for us all to make the switch. &gt; Everyone who’s supporting an 18 year old code base knows the answer! It’s time for a ground up re-write! Tell to that to my previous employer whose solution to keep up with new technology is to build a newer .Net Framework based GUI over a 30+ year old code base of C/C++ modules. The point is, switching to another technology stack is difficult because there's a heavy investment of money and time on an old code base. A mature, dependable and heavily tested code base can outlive frameworks. The article is sensationalist and short sighted.
If only.
Just to be really pedantic, Winforms isn't really being "added" to dotnet core 3.0, rather MS are developing an addon library that has support for dotnet core 3.0. The Winforms library will still only work on Windows.
&gt; It's not an opinion Well, it's not fact - So what do you call it?
Yes I ended up trying it out a few months ago and it worked very well but yes was uwp only. I think they were trying to make the apis available to more though when I was researching it back then.
Quick question: is it still fantastic if you can't afford to buy 3rd party controls?
lmao
You can buy 3rd party controls?
Not sure if being sarcastic, but yes, telerik ui is one of them. Otherwise, have you ever missed the controls that come packaged with winforms?
One reason to do it is that unlike the GUI libraries it is relatively easy.
Even if that's true, they are too invested in their bi-annual rewrite to consider it. If anyone is going to port EF6, it will be a third party.
Fixed
I use it in a new project actually. It's the least resistance path to implementing DB access layer in C# (efcore) and using it from C++ without jumping through hoops like COM. Yes, it's kind of a weird extension to C++, but is an extremely practical solution to the problem.
This issue covers some discussion on C++ interop support in Core: https://github.com/dotnet/coreclr/issues/659
Why the fk you got downvoted wtf?? 
Good luck! and please let me know how it went. Are there any good resources available online?
You should add a readme with some explanation and screenshots
I rewrote your code. Some caveats, this pattern is good in some cases, but becomes a pita in others. I just wanted to put it out there in case you've not seen the technique. I created a dummy object that represents the return from all the repo calls. It will actually work even if it were returning half a dozen diffferent types, I was just lazy. I've put my new invocation at the start of each method and left your old version under a comment ```//OLD VERSION```. Finallly check out ```GetHotels``` as it has a different signature and I show how to handle that there. public interface IRepo { List&lt;FakeResult&gt; GetActiveIssues(string hotelCode); List&lt;FakeResult&gt; GetActiveLocations(string hotelCode); List&lt;FakeResult&gt; GetActiveStaff(string hotelCode); List&lt;FakeResult&gt; GetComplaintCategories(string hotelCode); List&lt;FakeResult&gt; GetHotels(); List&lt;FakeResult&gt; GetPriorities(string hotelCode); } public class FakeResult { public string Code { get; set; } public string Description { get; set; } public string Email { get; set; } public string FirstName { get; set; } public string FullName { get; set; } public string LastName { get; set; } public int Level { get; set; } public string Name { get; set; } public string ShortCode { get; set; } public string ShortName { get; set; } } public class GetInfoService { private readonly IRepo _repo; public GetInfoService(IRepo repo) { _repo = repo; } public List&lt;(string shortName, string name)&gt; GetComplaintTypes(string hotelCode) { return ShortVersion(hotelCode, _repo.GetComplaintCategories, res =&gt; res.Select(cc =&gt; (cc.ShortName, cc.FullName)).ToList()); // OLD VERSION var result = _repo.GetComplaintCategories(hotelCode); return result .Select(cc =&gt; (cc.ShortName, cc.FullName)) .ToList(); } public List&lt;(string shortCode, string name)&gt; GetHotels() { //Note, parameter "name" is never used. Second GetHotels doesn't have a parameter so we wrap it in a lambda. return ShortVersion(null, h=&gt;_repo.GetHotels(), res =&gt; res.Select(h =&gt; (h.ShortCode, h.Name)).ToList()); // OLD VERSION var results = _repo.GetHotels(); return results .Select(h =&gt; (h.ShortCode, h.Name)) .ToList(); } public List&lt;(string code, string description)&gt; GetIssues(string hotelCode) { return ShortVersion(hotelCode, _repo.GetActiveIssues, res =&gt; res.Select(i =&gt; (i.Code, i.Description)).ToList()); // OLD VERSION var results = _repo.GetActiveIssues(hotelCode); return results .Select(i =&gt; (i.Code, i.Description)) .ToList(); } public List&lt;(string code, string description)&gt; GetLocations(string hotelCode) { return ShortVersion(hotelCode, _repo.GetActiveLocations, res =&gt; res.Select(l =&gt; (l.Code, l.Description)).ToList()); // OLD VERSION var results = _repo.GetActiveLocations(hotelCode); return results .Select(l =&gt; (l.Code, l.Description)) .ToList(); } public List&lt;(int level, string name)&gt; GetPriorities(string hotelCode) { return ShortVersion(hotelCode, _repo.GetPriorities, res =&gt; res.Select(p =&gt; (p.Level, p.Name)).ToList()); // OLD VERSION var results = _repo.GetPriorities(hotelCode); return results .Select(p =&gt; (p.Level, p.Name)) .ToList(); } public List&lt;(string code, string name)&gt; GetStaffWithEmail(string hotelCode) { return ShortVersion(hotelCode, _repo.GetActiveStaff, res =&gt; res.Where(s =&gt; s.Email.StartsWith("dajmt")) .Select(s =&gt; (s.Code, $"{s.FirstName} {s.LastName}")).ToList()); // OLD VERSION var results = _repo.GetActiveStaff(hotelCode); return results .Where(s =&gt; s.Email.StartsWith("dajmt")) .Select(s =&gt; (s.Code, $"{s.FirstName} {s.LastName}")) .ToList(); } public List&lt;(T1, T2)&gt; ShortVersion&lt;T1, T2&gt;(string hotelCode, Func&lt;string, List&lt;FakeResult&gt;&gt; fromRepo, Func&lt;List&lt;FakeResult&gt;, List&lt;(T1, T2)&gt;&gt; clause) { return clause(fromRepo(hotelCode)); } public IRepo GetRepo() { throw new NotImplementedException(); } }
Here is just the short version: public class GGetInfoService { private readonly IRRepo _repo; public GGetInfoService(IRRepo repo) { _repo = repo; } public List&lt;(string shortName, string name)&gt; GetComplaintTypes(string hotelCode) { return ShortVersion(hotelCode, _repo.GetComplaintCategories, res =&gt; res.Select(cc =&gt; (cc.ShortName, cc.FullName)).ToList()); } public List&lt;(string shortCode, string name)&gt; GetHotels() { //Note, parameter "name" is never used. Second GetHotels doesn't have a parameter so we wrap it in a lambda. return ShortVersion(null, h=&gt;_repo.GetHotels(), res =&gt; res.Select(h =&gt; (h.ShortCode, h.Name)).ToList()); } public List&lt;(string code, string description)&gt; GetIssues(string hotelCode) { return ShortVersion(hotelCode, _repo.GetActiveIssues, res =&gt; res.Select(i =&gt; (i.Code, i.Description)).ToList()); } public List&lt;(string code, string description)&gt; GetLocations(string hotelCode) { return ShortVersion(hotelCode, _repo.GetActiveLocations, res =&gt; res.Select(l =&gt; (l.Code, l.Description)).ToList()); } public List&lt;(int level, string name)&gt; GetPriorities(string hotelCode) { return ShortVersion(hotelCode, _repo.GetPriorities, res =&gt; res.Select(p =&gt; (p.Level, p.Name)).ToList()); } public List&lt;(string code, string name)&gt; GetStaffWithEmail(string hotelCode) { return ShortVersion(hotelCode, _repo.GetActiveStaff, res =&gt; res.Where(s =&gt; s.Email.StartsWith("dajmt")) .Select(s =&gt; (s.Code, $"{s.FirstName} {s.LastName}")).ToList()); } public List&lt;(T1, T2)&gt; ShortVersion&lt;T1, T2&gt;(string hotelCode, Func&lt;string, List&lt;FFakeResult&gt;&gt; fromRepo, Func&lt;List&lt;FFakeResult&gt;, List&lt;(T1, T2)&gt;&gt; clause) { return clause(fromRepo(hotelCode)); } }
You can access it from .NET Framework and .NET Core, I think. Not sure about .NET Standard. "Full access to Windows 10 APIs" is apparently coming with .NET Core 3, although I don't know what that exactly means. 
my work got me the official book, and theres a bunch of test exams you can do. I'll see how it goes
Thanks!
Qt costs at min. 460$ a month. For the majority of non enterprise and non GPL developers Qt does not exist. Correct.
Whats wrong with Avalonia? I just head of it and it sounds great.
Looks like you’re having a blast. Do you mind if I submit a pull request which simplifies a lot of your methods in Utility? There are framework functions and language features you probably aren’t aware of; happy to teach!
Try to write meaningful commits messages. "Change" doesn't say anything about what's changed.
I think you've generally got it, but keep your layers of abstraction in mind. You don't want your application to know any details about the repository implementation, and that means the service nor the app should know anything about the connection, and certainly not when to clean it up. To solve this, your repositories should be creating connections when they need to query some data, and then the connection should be closed and released back to the pool. Sharing a connection for the lifetime of your service or application is not recommended. Connection pooling exists for this reason. Also, if you find that you always need to make those two calls to both repositories and you don't want to open/close two connections each time, then you should think about combining the repositories to better model your data access patterns. Using an IoC container would help you a bit here, although I'm not sure if you are running inside of asp.net/core or what. I would stay away from making anything static here as that makes things harder to test when you want to test the code that uses your service interface. Also, read the SOLID principles and about clean/onion architectures. These patterns exist to help deal with dependencies and layering in your application to conform to SOLID principles, and to also help you deal with change if your requirements evolve.
Good point regarding the using statements, I completely missed the idea of separated concerns there. Regarding DI, I normally use something like Ninject to handle this in my Web API projects as an example, but I still have a problem of not knowing how to dispose of the connection afterwards. Regarding the service layer, I'm not saying it should either, and it's not something I care too much about either as long as its consistent and testable. 
&gt; I'm a bit ashamed to still have problems such as this(some of which I've found help for by asking here). You're doing great, man. It is a process. You recognize the problem and are asking questions. I work with tons of devs, some with decades of experience, who write horrendous code with no respect for any kind of design patterns or awareness that they are even doing anything wrong. The clean architecture and others are sometimes hard to get your head around but they really exist to solve a lot of the problems you see in large code bases with dependencies that have gone awry. I think you've got it. Best of luck!
You've answered OP's question, so you have my upvote for that. However - I question the wisdom of doing this. I find OP's code far, far easier to read than yours. I think the real answer for OP is that the original code is fine - and I think your code only goes to prove that point.
You'll have to approve his request.
The headaches that layouts in winforms cause is well worth the cost of lost UI elements, but I don't miss them anyways
 As I see it, in general a project manager is meant to take some of the heat off you by organizing the money, fixing your issues "resolving impediments" and preventing the stakeholders from asking you constantly about "when will it be ready". Its also about procuring servers and making sure you have a devops person on your team, etc I agree that your example is a pretty severe... Have project managers failed you on these tasks for 30 years, or are these the wrong tasks/not helpful?
No. Absolutely that. They've just never really done them. 
int == System.Int32 and `float` == System.Single 
If they share logic: It's fine. If you really have distinct logic and branch depending on the sender-control, then it's really bad practice. Don't have a shared event handler for the sake of only having a single event handler.
Ohhh im starting to see the appear of this it keeps a really good record if you do your notes right eh. i like!
oohk
It adds complexity to your event handler that is not needed. Instead of having clean code, one handler for each distinct event, you create a huge god-method.
Sorry of my life at work. Ffs. 
Got it. Thank you!
Your observations are insightful - you've identified some of the problems you run into when building out a complex service layer: * How to make testable services * How to call ServiceB from ServiceA and ServiceC from ServiceB * How to share connections between instances of all services. &gt; The other is to implement IDisposable on the service and the repositories, where the service makes sure to dispose the repositories. This is correct - especially when using Entity Framework (you should consider EF!). There are other things you need to consider as well: How do you make your services multi-transport - your service may call the database directly or be a wrapper that makes a REST or WCF call. How do you make your services multi-platform - your service may contain logic that is specific to MSSQL or MySQL or Postgress or something else. How do you mix and match all the above without writing additional layers to piece them all together again. If you design your service layer correctly you can achieve all the above with a tiny bit of help from your DI container (i.e. Autofac). For example, say you want to inject `ICustomerService` into your application. If the user has LAN connectivity to your database server you want `ICustomerService` to execute a SQL command directly against your database. If the user only has web connectivity you want to make an API over the Internet. Your implementation to make a web API call looks like this: public class CustomerService : ICustomerService { public List&lt;Customer&gt; GetCustomers() { string json = httpClient.Get(url); List&lt;Customer&gt; customers = Deserialize&lt;List&lt;Customer&gt;&gt;(json); return customers; } } Your implementation that directly calls your database looks like this: public class CustomerService : ICustomerService { public List&lt;Customer&gt; GetCustomers() { List&lt;Customer&gt; customers = DbContext.Customers.Where(x =&gt; x.IsActive); return customers; } } Your presentation class - probably a ViewModel or web page - may look like this: public class PresentCustomers { private ICustomerService _customerService; public PresentCustomers(ICustomerService customerService) { _customerService = customerService; } private void DisplayCustomers() { // This could make a web api call or read directly from the db. You don't know or care: List&lt;Customer&gt; customers = _customerService.GetCustomers(); } } In the code above a utility needs to determine if the user has LAN connectivity when your application boots. When the presentation class (web page or WinForm or ViewModel) requests an implementation of `ICustomerService` that same utility can help the DI container return the correct implementation of `ICustomerService` based on the users LAN connectivity. There is a utility that provides a pattern for this kind of flexibility - it is called AdaptiveClient. [AdaptiveClient](https://github.com/leaderanalytics/adaptiveclient) is a simple utility that allows you to build out multi-transport, multi-platform services. It also provides a facade which makes it trivial to call any service from any other. AdaptiveClient is built on top of Autofac which does all the heavy lifting. AdaptiveClient provides a utility to help register your implementations so you don't have to deal with Autofac complexities. AdaptiveClient also provides utilities for EntityFramework that allow you to easily create drop-and-recreate integration tests and well as apply migrations when your application boots. [You can get a fully functional demo here](https://github.com/leaderanalytics/AdaptiveClient.EntityFramework.Zamagon).
No. I fact that is what the “sender” argument is for in the event handler. So you can tell which of the many controls you have wired to the same handler is the one which actually generated it. 
&gt; I used to do this, but I got concerned about the cost of opening and closing connections, because a lot of my work has to do with something making millions of lookups. You're missing a common concept found when dealing with database code - that of a scope. Other posters are correct that your code that actually submits queries to the database should open a connection for only the minimal amount of time needed - right before the query, and closing it right after. However, nearly every application will need to perform multiple SQL statements inside a single connection - a transaction around multiple DML statements is the most common scenario, but if you are "making millions of lookups" in a single spot of code, you would likely want to do that explicitly all within a single connection. This is about Entity Framework 6 specifically, but it's one of the best single articles I've seen detailing connection scopes and you can apply the ambient scope technique to anything. Keep in mind, if you do adapt his code that .Net Core is a bit different and you'll probably want to use `AsyncLocal&lt;&gt;` instead of `CallContext`. &gt; Regarding IOC I do normally use Ninject in my Web API projects Rule of thumb is that IoC performance shouldn't matter, but I'll just say from experience Ninject can be slow enough to matter. Some types of registrations are very slow to resolve. A last note, I'd say that your repositories have forced upon you an unnatural separation. Your Properties and Owners aren't as separate as your repositories make them out to be. Is this an anemic domain, where you just made every DB table have a repository for no particular reason other than just because? Is Property an Aggregate Root or a DTO? Why doesn't your PropertyRepository return the Owners that the Property owns when you retrieve a Property? Can it even do that, and if not why not? I don't mean to offend, but this feels a bit like applying a by-the-book architecture just because it's a way of doing things that showed up in a lot of articles in overly simplistic examples, and not because it fit the needs of the rest of the application.
So what I'm doing is fine? Is that not considered God object? 
Take time to review the merge before you approve it so you can learn a bit more about git.
I would say if these are related functionalities, like several buttons in a toolbar, it’s totally fine. They are logically similar. I would, however, not try to group unrelated things. 
Thank you. I would love to try consulting but it sounds so intimidating. I feel like you have to be some sort of mvp or someone with years and years of experience. 
You'll want to start extracting logic into smaller methods to make your code more manageable. The Parser class is one example that needs to be reviewed.
Thank you. The thought of taking a break like that is really enticing. The van-life for year sounds nice.
Well, it was a Honda Civic so not quite as enticing :)
you mentioned int, int32 and then single, float as if they are separate 
1. Separate subject from body with a blank line 2. Limit the subject line to 50 characters 3. Capitalize the subject line 4. Do not end the subject line with a period 5. Use the imperative mood in the subject line 6. Wrap the body at 72 characters 7. Use the body to explain what and why vs. how Are the 7 rules of how to write good git messages. https://chris.beams.io/posts/git-commit/ (Not my blog) Also a good thing to think of when doing commits is doing small things, so if you do a bug fix, commit it. If you add a new feature commit it (maybe several times if it makes sense), if you tweak values, commit it. It makes a good history, and if you fix something and realize a bit later you broke it you can then go back in the commit history to see what it looked like when it worked.
You mean int16, int32, int64, single, and double? It’s right in the post. They’re not the same, if that’s what you’re asking. If you look them up you’ll be able to see the difference. You can PM me if you have questions about the specific types in the .NET framework.
When it comes to IDisposable, I feel like there are two paths that you can go. 1. Automate everything with DI containers that dispose everything at the end of a request/scope. 2. Use a `using` block and never share. In your case, I'd wrap every repository operation in a using block. public class PropertyRepository { public Property FindById(string id) { using (var conn = new SqlConnection("...")) { conn.Open(); // Do your SQL queries/commands here } } } Of course, that code desperately need a helper like: public IDbConnection OpenConnection() { var conn = new SqlConnection("..."); conn.Open(); return conn; } Which I would probably put in its own service: public interface IDatabase { IDbConnection OpenConnection(); } Opening and closing/disposing the SqlConnection object is actually very cheap and not the same as real network connections. There is a connection pool behind it. A more general suggestion would be to look at "feature slicing" or "vertical slicing". It's an alternative way of thinking about your architecture and structure, where you organise code by feature instead of layer. I think it can help you steer away from situations where you're shoe-horning code into certain generic patterns. You might, for example, find that the Property Finding feature doesn't really need a PropertyService, a PropertyRepository and an OwnerRepository, that it shares with everything else in your program, but instead it needs a PropertyFinder class that handles everything related to this operation - and only this operation. 
That's a great article. It's a little depressing but very realistic. Boring code is real.
It's not great. `List.ForEach` is less idiomatic than using a `for` or `foreach` loop, and it's less efficient--it requires a closure be allocated for the delegate argument it needs. In this case, it's worse, because you're also creating a list from the results of `string.Split()` *just* to iterate it--which you can do just fine, directly.
I was curious about the lack of ForEach on other containers than List and came upon a stackoverflow post saying that's a remnant of an old design and later down the line C# designers decided to avoid extensions like ForEach which can have side effects. Also I think compiler can do better optimizations around for and foreach loops so it might be best to not use that.
For something as simple as the example you give, it's fine but in general I would stay well away from using \`ForEach\`
Yes, the `sender` argument is used to identify the object that triggered the event, but using one event handler to group multiple pieces of functionality (like you suggest in your other comment) is insane. *Never* do that.
Well, but on the other hand shorter code &gt; non-existent performance difference 
Its an excellent idea. Using the DRY principle. (Don't repeat yourself). You might then be able to pass the functionality across into a method in a class and get it off the form as well. Or at least a dedicated method in the Form class to get the code out from under the button click. Keep your event click code as small. 
The 'non-existent' performance difference is highly dependent on context. And, it's not actually shorter. Invoking `ForEach()` vs a `foreach` loop saves a few characters or keypresses (mostly whitespace, too, which the editor will insert for you), which you've probably thrown away by calling `Enumerable.ToList()`. The longer I look at this, the less I like it, in fact. What you've actually written does this: var s = "a b c d e f g h"; var splitS = s.Split(' '); var listS = new List(splitS); Action&lt;char&gt; writeLine = c =&gt; Console.WriteLine(c); foreach (var c in listS) { writeLine(c); } If the actual alternative looks like var letters = new [] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', }; // or even var letters = "abcdefgh"; foreach (var c in letters) { Console.WriteLine(c); } I'd probably flunk it in code review just for being pointlessly baroque and roundabout. That's not a *guarantee* (because, again, context may be important), but this has to do a lot of work to justify those gyrations. All of this ignores that `List.ForEach()` is, arguably, kind of gross all on its own and is not often preferable to simple loop.
If you "do something" in the ForEach, it's a void contract (breaking scope), because you're causing a side effect (or worse, doing nothing). The only other scenario I can think of is that you filter, pipe or transform the data, thus you'd be better off using the appropriate Linq extension methods. Also, calling ToList().ForEach(...) actually creates an enumerator, iterates the source IEnumerable, allocates another array of size N for the List (doubles. the allocation if the initial size was not big enough), and creates the enumerator and enumerates the new list AGAIN. Using the foreach loop does not allocate another List, and has a chance to break or yield return, so yeah, it is not an "ok" practice. It's only acceptable if you already have a List (not any other IEnumerable), any other scenario is more or less invalid. 
&gt; It's only acceptable if you already have a List (not any other IEnumerable), any other scenario is more or less invalid. Sounds reasonable
I’m stuck. When I run it in a virtual tablet and click the button it pulls this up. Anyone have any ideas?
 If sender.ToLower() == "Update" ...
Don't do that. If they use the same code it's fine and you can use the sender variable to figure out which control sent it. But if not don't do it. Each method should do one thing and it's name should reflect that e.g. DoneButton_Clicked it's very obvious what is happening there. It's better to have lots of small methods than one big one.
I never used Xamarin so maybe this is a stupid answer but looking at the [docs](https://docs.microsoft.com/en-us/dotnet/api/xamarin.forms.navigationpage.pushasync?view=xamarin-forms) for the NavigationPage class, can't you just do something like: new NavigationPage(/*your arguments*/).PushAsync() ? Or maybe get your MainNavigation page (like the one you are creating in the Welcome_Clicked callback) and call pushAsync() on that.
I’ll give it a try. I’m taking a class for it right now so I don’t know much 
death by a thousand cuts &amp;#x200B;
Since there's a capital in your string, that expression will never be true.
Just took a quick look, there's a bug in the default Main implementation. change the int[]ar declaration to something like this int[] ar = Console.ReadLine().Trim().Split(' ').Select(x =&gt;Int32.Parse(x)).ToArray(); 
Modularisation is better, cleaner and simpler to understand, easier to maintain, improve and expand. 
awesome! You're correct. The Main implementation had a bug.
I'm fairly junior as a dev, but one thing I'm learning is you have to find a balance between readability and simplicity. If I have to spend hours trying to figure out what code is doing, it could probably have been done better. 
there should like the github equivilient of twitch plays where everyone can merge to origin
i would add this to gitignore [https://github.com/basinx/Garlos1/blob/master/Garlos/Output-Debug.txt](https://github.com/basinx/Garlos1/blob/master/Garlos/Output-Debug.txt)
I hackerrank it all the time for fun in c#. My advice, don't ever use linq if you want to pass the hardest tests. Performance sucks.
It looks like the Trim() made all the difference. Not OP, but I tested the original but added Trim() and it passed: int[] ar = Array.ConvertAll(Console.ReadLine().Trim().Split(' '), arTemp =&gt; Convert.ToInt32(arTemp));
&gt; however I often spent more time parsing input and adjusting output than solving the actual exercise Sounds like 95% of all time I spend at every programming job I've ever had.
That was the joke... guessing by the votes im guessing most people missed it.
Oh come on, thats where this is heading. Lets give it to him and wait for someone else to say its an horrible idea.
https://www.take-a-screenshot.org/
FYI - a common approach to this type of algorithm problem is to use a HashSet, because they're fast. In this one it probably doesn't matter, but if you get more time-sensitive challenges, a HashSet can make a big difference. public int SockMerchant(int n, int[] ar) { var count = 0; var hash = new HashSet&lt;int&gt;(); foreach (int a in ar) { if (!hash.Add(a)) { count++; hash.Remove(a); } } return count; } 
thanks!
No, it just made you look dumb.
I don’t think you understood me. Grouping related operations into a single handler is not *insane*. Dramatic much?
Um, ok? I know how to take a screen shot dude. This was a picture of my monitor 
Why would you prefer using your phone if you know how to take a proper screenshot? I thought people use their phones if they don't know how-to. I might learn something here.
It's only shorter if you can use a method group (like you did with `Console.WriteLine`). If you need to use lambda, I would actually call it longer, because of the need to call `ToList()`.
Not sure. I personally practice with Leetcode. I've used Codility and now HR for interviews.
Yeah, I guess I'm not totally up to speed on the delegate/closure distinction. It still has to create the delegate object, but it doesn't have to create a closure, per se.
I don't think you can make a general statement like that. If you know how some of the LINQ works under the hood, you can always write something that will perform, or know immediately that LINQ will be expensive, depending on the use case. 
There is not enough alcohol in the world to justify this lol.
Read the whole quote. He was talking about micro-optimizations, not this.
I do Code Wars with C#. It helps with maintaining one's skills.
I’m reasonably sure `reader.GetString(x)` is closer to “cast column x to string” them it is to “column x ToString()” which I think is what you expected. If the type of column 0 is int, you probably want `reader.GetInt32(0).ToString(“n”)` 
I might depend on the complexity of the stuff in the lambda and how much it changes the state of variables outside - simple examples might be optimised to simple IL but the compiler might have to create a closure for more complex uses.
Dont get me wrong, I love linq. I spent quite a bit of time working on optimizing linq queries at work and you can improve a lot if you know some tricks but never better or at par with tight for loop. HackeRank has some questions/tests designed to weed out non code that is not optimized for speed. They score you on it. My Linq never passes their performance tests.
alright so that solved the issue but now i'm thinking i did the whole thing wrong. I want to return a whole row at an object and add those objects to a list, not each column to a list. any help doing this would be great as its my first time attempting this and not really sure where to go from here.
Well, I was also joking because it's clearly not a serious bit of code. We both ought to be downvoted for not contributing to discussion, but Reddit is too fickle for that.
That's great. I guess one last question. How do i handle it if one of those values is sometimes null? when i did the above on my third line code is null because a code doesn't exist yet.
That works. When i googled it i couldn't find anything that worked for me but this helps. Thanks!
Also, if there is a C# discord, I would love to join.
Change Console.WriteLine to x =&gt; Console.WriteLine(x) and see what happens.
Probably the best example I can point you to on this is from the Head First design patterns book which these days can be found [on Github.](https://github.com/kanastasov/Advanced-Java-Programming--First-Semeste-/blob/master/Design%20Patterns%20For%20Dummies%20%26%20HeadFirst/head%20first%20design%20patterns%20-%20ora%202004.pdf) The first chapter describes a scenario where you learn to use composition over inheritance when it comes to a Duck simulator program. Yes, it's a bit silly, but it does a fantastic job of laying things out and explaining them in a way that is very relatable. Also don't worry about the fact that it takes like 30 pages to explain. Lots of diagrams and pictures so that you're not staring at walls of text everywhere and it goes quick. &amp;#x200B; Hope it helps.
Yup, in same position. Have came across a few bugs. I do mine if Rider then copy and paste. What time zone you in? 
thanks for the tips i'll try to some of that.
Hmm im going to have to think about that presentation thing. Do you have any examples? 
so smaller methods like the other guy said eh?
Thanks. What about naming for these Dtos?
Let's look at a real world example. What is a vehicle? A vehicle is an object that moves from point A to point B. In order to do this it is composed of engines, wheels, transmissions, and other necessary objects. Then you have trucks that inherit from vehicle because they are composed of everything a vehicle is composed of, but it has extra functionality that a vehicle does not so it is also composed of a bed. Then you have a brand that guarantees that all vehicles made by this brand will implement certain features. To go a little more in depth on composition. In this example you do not want to define the engine within vehicle. Different vehicles can have different engines with different capabilities. So instead of defining the engine within the class vehicle, and forcing all cars, trucks, motorcycles, and dune buggies to use the same engine, you use composition to add an appropriate engine to the vehicle so you can do something like this: Vehicle vehicle = new Truck { Engine = new Hemi() }; This does a few things. The biggest is separation of concerns. The vehicle shouldn't be concerned with how an engine works. It should only be concerned that it has an engine. It also means that if you have two sub-classes that need the same component, but a third sub-class that does not your inheritance model does not force the third sub-class to have unused functionality that it does not want or need. In general, you want to avoid deep inheritance hierarchies. If you have gone more than 3 deep you are probably going too deep. This is what composition helps us to avoid. There area a couple ways of going about composition. There is the more concrete way, as in my example, where you define which components the object is going to be made of (just like in your example). Then there is also a more abstract way where you just have a list of components that can be added to a base object, and you can essentially derive new classes at runtime by adding different components. This second way is what you often find in game engines like Unity. It is this kind of functionality that allows Borderlands to claim it has millions of unique guns in its games. 
To some degree, but that's not it. For example, in your program.cs there's a bunch of if statements. That could probably be a switch statement. And for every different condition, you could have a method with a meaningful name that describes its intent. Whenever you find yourself writing code that follows a similar pattern to what you've already written or that does something similar to what another block of code does, that's usually a good candidate for a method, or sometimes break it out into a new class. Each method should be for _one_ behaviour (disregarding logging or whatever), each class should be for _one_ type of thing. Also your variable naming should be meaningful. Your classes contain a bunch of public fields. Typically you'd make this private and have public properties to access them, if they're accessible outside the class, ie from other classes. 
This. My general rules are use ienumerable until right before you need the value or to avoid multiple enumeration. 
I dislike ForEach as a rule.
Most people believe that functional syntax should be used when the code has no side effects and imperative syntax should be used for side effects.
Sorry for the spacing, Mobile problems 
Check out this link: https://stackoverflow.com/questions/10113244/why-use-icollection-and-not-ienumerable-or-listt-on-many-many-one-many-relatio The biggest benefit to things like ICollection or IEnumerable is lazy loading. If you were to make that a LIST.... then when you query for a grade, you would need to ALSO query for **every** student in that grade. With it being ICollection, you do lazy loading. You query for the grade, and you defer the query for Students until you need it. Suppose you're looking for any grade that contains a student weighing between 120 and 190 pounds, and you use the below query. school.grades.Where(grade =&gt; grade.Students.Where(student.Weight &gt; 120 &amp;&amp; student.Weight &lt; 190)); If you use a List, what is happening here, is.... - First, it queries the One:Many "School_Grades" table, to get a list of GradeIDs that belong to that school. Something along the lines of "Select * From Grades Where SchoolID == school.ID" - Since it's using a List, it also MUST enumerate and populate the Grade objects. Something along the lines of "Select * From Grades where GradeID == grade.ID" (Note, it has to do this for *ALL* grades in that school, even if it doesn't contain the student. - So now, it queries the "Grade" table to fill in the rest of the details about the Grade object. - One of those details, is Students. Since that's a List, it must ALSO enumerate the Students. - So, now it queries the Students table, to find all students in that Grade. Something along the lines of "Select * From Students where Student.GradeID == grade.GradeID - Then, and only then, does it actually compare the weights to see which grades satisfy the conditions. So, you have now queried, and loaded into memory, every single Grade in a school, and every single Student in that grade. Let's suppose that there are 4 grades in that school, and 2,000 students in each grade. You have just queried (and loaded into memory) 8,000 students. ----- Using ICollection, it looks like this: - First, it queries the One:Many "School_Grades" table, to get a list of GradeIDs that belong to that school. "Select * From Grades where SchoolID == school.ID" - Next, it iterates **ONE AT A TIME** through each of these GradeIDs. It temporarily stores that grade's information. - for each grade, it iterates **ONE AT A TIME** through each of the Students in that table. As soon as it finds *a single student* that matches the given conditions, the iteration of the students stops, and it returns true. - Now, we pop back to the "Grades.Grades" iteration. Since the "Students.Where" returned true, then the Grades.Where will return that grade, and move on to the next. So, assuming there are 4 grades in the school, and 2,000 students in each grade, you executed a minimum of four grade queries, and four student queries. And, a maximum of of 4 grade queries, and 2000 student queries. If 75% of your students meet the criteria, you're likely going to meet the criteria very quickly. You don't need to query for every single student. ----- TL;DR: Lazy execution.
Sure but at work I'm paid to do it.
I would recommend getting a copy of clean code. It will help you recognise what great code is, and cover 2/4 points you mentioned. Source control is a yes, keeping all of your scripts in source control will help you, the obvious choice is learning git. A fun way is to use something like this: https://learngitbranching.js.org/ TDD is a nice to have rather than a must IMO, but I'd say the 2 things above will give you more value for the time spent. Good luck &amp; keep learning! 
Just remember, with databases, you generally want to defer execution as long as possible, and query as little as possible. Another simple improvement is something like this..... Let's suppose you want to find the first teacher that does NOT have a class in third period, because you need another teacher to perform cafeteria monitor duties. var teachers_available_for_extra_assignment = school.Teachers.First(teacher =&gt; teacher.Classes.Any(class =&gt; class.PeriodNumber == 3) == false); What this does is.... - Lazily load a collection of teachers in the school (school.Teachers) - Iterate through each teacher... (school.Teachers.First) - Lazily load a collection of classes for that teacher (teacher.Classes) - Iterate through each class... (teacher.Classes.Any) - As soon as a single class meets the condition (class.PeriodNumber == 3), the "Any" function returns 'true' and stops iterating. - The "true" result is now tested to see if it's false (since we want a teacher WITHOUT a class in period 3) - As soon as a single teacher meets the condition (having no classes in period 3), the "First" function returns that teacher object, and stops iterating. So, if the first teacher in the database is available for this assignment, then we query only one teacher. Of course, if *no* teachers are available, then we have to query every teacher .... but not every class for every teacher.
Thanks! Any other tips? The more data, the better!
I wouldn't say that, but I agree one should learn the platform itself, and not expect knowledge of c# and .net to replace that. I've seen c# devs become efficient at xamarin much faster than they would have learning a new language at the same time as learning a new sdk. a lot of a xamarin apps code isn't even different than it would be on windows or the web, business logic is often fully shared, it's mostly the ui stuff that takes a lot of effort. 
Please refer to the StackOverflow entry, as I constantly update it with attempts and new findings.
Clean Code is a good lecture, but don't take it to serious. Some of the "rules" are a bit over the top. Read it and adopt what works for you :)
LOC and arbitrarily short variables don't affect the score negatively?
Lippert said bytes aren't numbers they're bit patterns. byte a = 128; byte b = 127; int c = a - b; will work.
We go with, for example: CreateGroupDto - &gt; Group - &gt; InsertGroupSqlModel
Regardless of platform, language, size (codebase or team), I would say that things like testability and reproduceability are important. Thinking in those terms should lead to a better product, better code and better interaction between both people and systems. They can be achieved in several different ways but key things are source control, automated tests and builds, work item tracking.
A nybble of course.
Dyng dyng dyng!
[Nibble](https://en.wikipedia.org/wiki/Nibble).
Learn the concepts before learning the implementations. An idea that you have to solve a problem, you should be able to translate that across programming languages with some minor googling on syntax. If you strictly learn a language than you will have difficulty translating your solutions to other languages at some future job. &amp;#x200B; Also, get a good fundamental understanding of SQL. It will make many tasks much easier and any full stack jobs will typically have some SQL element to them. &amp;#x200B; Regex is a good addition to the tool box as well.
&gt; An idea that you have to solve a problem, you should be able to translate that across programming languages with some minor googling on syntax. If you strictly learn a language than you will have difficulty translating your solutions to other languages at some future job. I have experience with a couple of languages, C++, PHP, and *puke* Java. I am best at C# though. I am pretty good at extending concepts. The *technical* aspect isn't a concern for me, I'm mostly concerned about the procedural/best business practice sort of thing. &gt; Also, get a good fundamental understanding of SQL. It will make many tasks much easier and any full stack jobs will typically have some SQL element to them. I have a fundamental understanding. Not as much as a DBA, but I can work through your most common SQL stuff. &gt; Regex is a good addition to the tool box as well. I have a good familiarity with regex. I can't write ones [like these](https://stackoverflow.com/questions/800813/what-is-the-most-difficult-challenging-regular-expression-you-have-ever-written), but I can definately do what I need to do.
It looks like you aren't setting it to be the content of anything. "WindowName.Content = Card" as the last line will get you started.
Write documentation for your code. If you write a big application it will help you and others understand what you did and if you write small applications, it will help you categorize and sort them by functionality and also explain what they do. Also, source control should be a default thing to do. Visual Studio can automatically create git repositories for your solutions which is quite neat.
Clean Code was mentioned. I'll second it. But the chapter on short functions is too extreme. Yes, keep them to a reasonable length, but if your entire function ends up being one line of code.... it most likely does not need to be it's own function. Get in the habit of planning before typing. I use pen and paper. You might prefer a white board. Whatever works. Even on small projects, it will save a lot of headaches and changes later. You recoup the time spent times 10. And that's a minimum. 
Thanks for the insight. &gt; One thing to realize: PowerShell is essentially a command line interface to the .NET Framework. A lot of the functionality is calling .NET Framework Library functions. This should make transition to C# easier. Once you get C# transition to Java should be a breeze, and you can go to Visual Basic too because its syntactical sugar for the most part. I'm actually going about this the other way. I have been using c# for years, and it's helped me transition to powershell (I have to use that at work) easier! And when powershell just can't cut it, I make a DLL in c# and call that in powershell. Also, I hope to never have to code Java ever in my life. It's probably quit a job before doing Java. visual basic isn't as bad, but I'd rather not. 
Thanks. I took the example straight from msdn, and even then my requirements in this case are lower than what they presented solutions for.
What was over the top for you
By reading [this](https://www.amazon.com/Dependency-Injection-NET-Mark-Seemann/dp/1935182501) book. Just look at the Amazon reviews.
The most important of those 7 I would say 5 &amp; 7 are the most important closely followed by 2. That way you have short and to the point messages explaining what you did in each commit
 Can I know why you’ve decided to use C#? My choice would always be choosing some online software that offers easy PDF to Word like Total PDF Converter which also offers a free trial as well. [https://www.coolutils.com/TotalPDFConverter](https://www.coolutils.com/TotalPDFConverter) Ive been using multiple softwares but always end up loasing color and attributes so maybe see if this works for you.
&gt; Get in the habit of planning before typing. I use pen and paper. You might prefer a white board. Whatever works. Even on small projects, it will save a lot of headaches and changes later. You recoup the time spent times 10. And that's a minimum. Oh yeah, absolutely. So many times I write some code, and then discover a different case, which makes me rewrite tons of code :( Not enough time planning and diagramming the whole damn thing.
You're right, it seems it's syntactic sugar. I'll leave it up for future reference.
The thing that improved me the most as a developer was our team's code review process (a.k.a comedy central roast of u/JonGinty's code). I figure it's trickier if you don't work in a team of developers, but my advice (aside from all the other things people are posting in this thread which is all good advice) is to find someone who you think is a better dev than you, and study the things they do, and if possible ask them for feedback / criticism of your code. All of the devs I know personally (which admittedly isn't aaaall that many) absolutely love giving tips to anybody who shows a genuine interest in learning about programming (just look at this subreddit haha). Anyway, best of luck, you've got the right attitude to do well and you're asking the right questions :)
Not add a SJW CoC to the project repo would be a start.
FWIW, I did some experimentation with u/svick's link, yesterday. Changing it to `x =&gt; Console.WriteLine(x)` should cause it to create a closure, instead of just a delegate. Either their settings are a little weird, or the compiler is not very smart about how it does that stuff.
Write code, make mistakes, learn new patterns and practices, learn from your mistakes. Repeat forever, in any order. What I mean is, don't be afraid to try new things or approaches to a problem; if your attempt succeeded you have learnt something, if it fails you have also learnt something. 
Should it? No outside variables are captured, I don't think there should be a closure. I've tried experimenting with it too, but even though it works on mobile, it's not too convenient. Changing it to explicitly state the method (overload) call supposedly instantiates the same Action delegate as far as I recognized (IL is not my native language :)). 
Tried Code Wars and aside from the silly nomenclature they use I can never create an account because the Create Account always returns 5xx.
It's the anonymous delegate object that is instantiated, in the first there is no need to instantiate it because the Console.WriteLine delegate is passed by reference in place of the anonymous lambda. No closure is used in either example. If you reference an outside variable in the lambda (```y``` in my example above), you'll see it's gonna get passed to the anonymous object - that would be the closure. I'm relieved, I thought at first I misunderstood something, but this is exactly what I was talking about above. Whew, dodged a bullet :) 
Here is a simple example: `var game = new Game();` `var presenter = new Presenter();` &amp;#x200B; `while (`[`game.Play`](https://game.Play)`)` `{` `game.Update();` `presenter.Update(game);` `}`
I would also include Clean Architecture to go along with Clean Code. 
Work on someone else's code base. Especially one touched by many many people. Something big enough to be difficult to work navigate. You'll see new patterns, new approaches, get a feel of what's good and what's annoying about it. You'll see the *need* for some patterns which you otherwise wouldn't understand if you worked on a smaller project. You'll learn first hand the value of good comments, documentation, tracing, testing, etc. 
I would disagree with the one line thing when a method name can better represent what is happening than the actual syntax, or if the method name is significantly shorter to type.
I always wondered why coding sites have such names as CodeWars and Leetcode. It is like they were named by 14 year olds.
It's been a while so I may be misremembering but I personally thought some of the guidelines for things like number of lines of code per method were a bit stringent. He used surveying and studies to come up with optimal targets for metrics like that, and I think they're great in an academic sense, but in reality I think you need to keep your particular project in mind before designing everything for the enterprise.
Right. Gonna have to do some reading on this stuff, then. Clearly, I don't understand it even half as well as I thought.
Whether or not that’s a good idea, in my opinion, depends on how complex the one-liner is and how often it’s used. It’s not always a good idea, but if the one-liner has some complex logic and it’s reused in other places, it’s definitely often worth putting in a function.
Personally, I only know one *real* developer - my wife. She's a PHP web developer, so she does things a bit different than I would in a C# application. But, I agree, code review is probably a good idea... and will generate some extra work for me (i.e., they'll tell me a bunch of stuff to do, which takes work to fix)
SJW = Social Justice Warrior... CoC? 
!RemindMe 15 hours
I will be messaging you on [**2018-09-24 05:53:35 UTC**](http://www.wolframalpha.com/input/?i=2018-09-24 05:53:35 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/csharp/comments/9i6who/how_to_improve_at_software_development/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/csharp/comments/9i6who/how_to_improve_at_software_development/]%0A%0ARemindMe! 15 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Unfortunately true. Byte/SByte is considered a bit pattern, not a UIn8/Int8. Which sucks. I had a good use one time for UInt8 but byte didn't behave as expected. I don't remember the details, just that I came to the same conclusions, and disappointment, as you did.
It has 16 bit also (aka: short, ushort) but that's as low as it goes.
Not the examples in the book.... But as I said, just dont take it to serious and take what works for you.
Operators are not defined for 16 bit or 8 bit types. 
Located in NYC, so EDT.
&gt;Then there is also a more abstract way where you just have a list of components that can be added to a base object, and you can essentially derive new classes at runtime by adding different components. I'd change the wording on this to make it more clear that you're not actually using inheritance here. 
Even relatively simple things are fine for putting in a method of you want to make your code expressive. thing.Status == ThingClass.Closed Vs. thing.IsClosed()
Code of Conduct. See here https://medium.com/culture-null/how-sjws-infiltrated-the-open-source-community-21001e7059ef
If the name is going to be remarkably better then, OK I guess. But that's rarely the case. The syntax and method names chosen by the language designers are usually pretty clear. 
https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/short The issue of literals is an academic difference since they're implicitly converted for you. Operators are a bit trickier because they do exist, they just don't work the way you expect. EG: the + operator in Int16 is a real operator, but it outputs Int32 &gt; The following assignment statement produces a compilation error because the arithmetic expression on the right-hand side of the assignment operator evaluates to int by default. short x = 5, y = 12; short z = x + y; // Compiler error CS0266: no conversion from int to short
I'm sure it's covered in the books mentioned, but NEVER USE MAGIC VALUES. If you ever write a string or numerical value into a piece of logic, it's wrong. It should be either a const, enum, or static readonly value. Put a wrapper around complex logic. I have some features in my current project that have to talk to an Oracle system via a web service. For some reason, there aren't multiple methods to call, but instead you give it an operation code, and that's how you differentiate between add, edit, and delete. What I've done, though, is create my web service client such that it hides those details and configures the model for you, so if you're calling it from business logic, you just say client.Add(commandModel), and it will project into the right class and set up the operation code for you. That allows my outside code to be expressive rather than descriptive. The fine details of what happens in a web service call are hidden in the client, and calling it is extremely easy both to use and understand, even though the web service itself is confusing and annoying. 
Try the same with byte, and see for yourself. The error is exactly the same. CLI only has arithmetic operations defined for 32bit+ types and when you try to use these operators, the compiler "widens" the types to Int32 and then narrows then when you want to store the result as the type (by an explicit cast). More information on Page 317 of the [ECMA-335 specification](https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf). 
A get only property would be better suited for this one. 
Yeah a property would be better here, but any kind of logic at all is fine to stuff in a method so that you can say *what* it is doing rather than *how* to do it.
Now the question is, should you :p
Most likely the least thing you’ll need from List&lt;&gt; collection.
No. It's pretty simple. The algorithm, needs pass all tests under the time limit. If you do not pass all the tests, you get a lower score. I guess a recruiter might later judge the style of your submission but I bet they'll be looking at the top scorer first.
A nybble is a 6-bit value (from the old Apple Disk ][ days). 4 bits is a nibble. 
“You know how to get to Carnegie Hall, don’t you?”
Probably. But its cool that the tuple shorthand exists. I like syntactic sugar!
Probably not!
CleanCoder.Net for Uncle Bob's(Bob Martin) blog, which also links to all of his books, videos, katas, and other tutorials. The one thing I see most people disagree with is the fact that he advises a 4-10 line per method rule. Basically stating that if your method is over 10 lines, it can likely be refactored down into something more simplistic. In other words if you have 5 lines of code in a method that does something with document processing and they're all pretty conjunctive, say like OCRing a document, so you'd open the document, read the document, parse the document, etc... he is stating that if you have something like that inside of a method that also does business logic, say with the data it parsed. Then you can likely take the document processing aspects of that code and break it down into a method specifically titled DocumentProcessing or some such. Given that, you just do what works for you in that aspect, I go for readability, and in my opinion a 10 line method that points to 10 other methods specific to their separate functions, vs 80 lines of functional and business logic code, I'll go for the 10 line refactored method any day. Also, I tend to believe that the smaller methods come with practicing TDD, another thing that Bob Martin is adamant about that a lot of developers do not practice. TDD is Test Driven Development, it essentially boils down to starting with tests before you even have a line of code written. The purpose of this is that if you write your tests first, you derive the logic needed to process your requirements, which then you can refactor those out into their proper domain/logic objects and from that you gain covering tests as well as your business logic that is needed. Added benefits aside from 80-90% tested code coverage, is that your design becomes a bit more simplistic and you save yourself time and you learn to estimate the time needed for a project a lot better. Simplistic design is derived from refactoring and writing only the code that is needed. A lot of people who do not test tend to try to design first. They start with a grand design, and realize part way through the project that that design doesn't work and they then need to alter it to fit and meet deadlines. It's not to say that you shouldn't have some idea about a design. All the while, they haven't even thought of their tests, or maybe assume their test cases / use cases can serve as all the coverage they'll need. They get themselves into messes and create bugs that may not be realized until after the application is in production. You learn to estimate projects better because now you know how long you'll need to cover testing. A lot of developers estimate projects based on what it takes to write the code, but they never consider the time needed to test either. A good rule of thumb is consider the time you need to code, then double that time for testing. If you practice TDD, you'll learn how to estimate your code a lot better because you'll have a process of already testing and then writing that code, so then all you'll need to consider is regression testing time, which can also be automated.
Refactor til you drop was too much IMO.
Patterns
This is an interesting project . I'll look at this for scrubbing production PHI data before moving to a pre prod environment. 
&gt;What's wrong with that? Nothing. For the most part, CoC is a good thing. It allows more contributors to feel comfortable.
I have to comment on this again. You could make Satan blush. 
Hmm that first one is kind of tricky because my WordMatch is a boolean that says true if what is typed contains any (partial) or all of the word. I would almost have to transpose the same logic to within the wordmatch and have it return full words to use a switch, unless you know a different way that works? I spent last night copying my Creature Editor code and changing it a bit for Item Editor and you make me think theres probably a way I could make like a base Editor class that has the basic functions like Name, Description, Next, Last and make it inheritable to the specific ones or something. That'd be a good challenge because there'd be some tricks to it like making the top level list generic somehow and the savers. There's probably plenty of other less specific spots where I could turn stuff in to methods where that I can look out for too. So.. what's like the reason for private fields? Just less chance of an unexpected outside change from breaking your program because with your public methods you can control how they changed better?
Hmmm i'll have to think about that. Might be something to try on my next project. As it stands this game isn't really like.. alive like old MUD's used to be, where it updates on its own over time. It sort of goes step by step with the players commands and such. Questions and answers are tied very much to how the game will update a lot of the time.
WPF
Maybe... but I have such a sour taste in my mouth from all of the college "courses" I've had to do for Java. How many fucking times do I need to put in 1000 lines of comments for a 5 line function? Maybe I don't hate Java, but it brings back so many bad memories. What I would write (because we had to make such inane functions) [and, written in C# style, because I hate Java] int GetMaximumOfTwoIntegers(int a, int b) { if(a &gt; b) return a; return b; } What I would be expected to write.... /********************************************************************\ | Function Name: GetMaximumOfTwoIntegers | | | | Description: This function compares two integers, and returns the | | maximum value of the two | | | | Parameter: a; integer; The first number to compare | | Parameter: b; integer; The second number to compare | | | | Return: integer; the maximum number of the two input variables | | | \********************************************************************/ //Begin function 'GetMaximumOfTwoIntegers' int GetMaximumOfTwoIntegers(int a, int b) { //Compare input variable 'a' to 'b'. if(a &gt; b) { //If 'a' is greater than 'b' return a; //Return 'a' } else { //Otherwise, 'b' is greater than (or equal to) 'a' return b; //Return 'b' } } //End function 'GetMaximumOfTwoIntegers' Fuck Java. Fuck College. Fuck that shit.
Those are attributes. https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmlelement.attributes
XPath
I would expect that function to return whether or not the thing is closed, not setting the thing to closed.
Thanks, I ended up fixing it using the following: var docElement = doc.GetElementsByTagName("temperature"); Console.WriteLine(docElement\[0\].Attributes\[0\].Value); In the program I'm writing I don't anticipate there ever being multiple nodes of the same name but I'll keep this in mind in case I ever encounter this elsewhere. I'll plan on giving XPath a look but is there anything disadvantageous about doing it the way that I did?
With a little practice, xpath is a life saver. It's also easier to understand code using xpath than using arbitrary array indexes. When working with xml I always make an effort to use serialization so that I can use the xml serialization built-in to .NET to do the work for me. Then I don't have to bother with parsing it manually and can move on to the more interesting bits of the project. Serialization seems hard at first, but the basics are really easy to get started with and becomes a huge time saver (and bug minimizer) later on.
The intellisense will help, oh wait ...
Most people don’t know or care about volatile because the x86 memory model is so strong that you mostly don’t have to. ARM (and most others) on the other hand,,
Well if you’re looking to improve as a software developer I would advise you let go of those hang ups.
Ugh, just trying to remember contra- vs. covariance (i.e., which is which) drives me crazy whenever it comes up in conversation (or in practical application). There are quite a few things like that - the differences between [Task.Run](https://Task.Run)() and Task.Factory.StartNew(), for example...
Expression Trees.
Perhaps. I'm not a career software developer though... I'd like to write better code for my personal projects, but the comment police have no jurisdiction over my personal projects!
Build something simple. Evaluate and comment what you did and why. Then find some open source code and see how others did it and how, google they why and compare. Ask questions and review. Basically question everything, if something works but you're not sure why? Find out. That was you'll learn the exceptions when that way will not work, be it a load capacity, file size limitations, unexpected vulnerabilities to injection attacks, etc. You'll never be on top of the game, because it's always changing. That's a good thing IMO.
I see no reason why not, unless you need something that doesn't exist in core. If you're self-hosting a web api, I'd say go for it. 
There are also some desk jobs that are out there which might be similar. In my last role I had a ton of different small projects and Greenfield stuff which kind of made it a bit like contracting without the stress of finding working etc.
Your second "Java" example is something I'd tell a junior developer to stop doing. Comments are for humans. They're literature, and you need to write for your audience, which should be yourself and other developers. You wouldn't see a medical report explaining what red blood cells are- you shouldn't have a comment explaining what a return statement does. CS 101 coding style is over-formalized in order to make it clear the student has a correct mental model of how the code works. As an example, check out [this random file] (https://github.com/JodaOrg/joda-time/blob/master/src/main/java/org/joda/time/DateTimeZone.java) from an open-source Java library. It has a good amount of Javadoc on the public methods (a necessity for a publicly consumable API) and a few key private methods, but comments in the body of the methods are only used to call out larger concepts and aid in reading the code.
https://github.com/kamranahmedse/developer-roadmap Probably check out the "DevOps" branch.
You may be interested in the `CompilerServices.Unsafe` Nuget package which contains a bunch of helper methods for otherwise illegal reference/pointer operations.
Regex syntax *cries*
Yeah, I'm a DevOps guy. I'll take a look at that page. Thanks.
Yeah, I believe in self-commenting code. Javadoc, or the xmldoc for C#, I fully believe in as well. That's not to comment tho, that's for documentation. It just serves both purposes.
Added a comment but wanted to bring to your attention, x:Load cannot be used on the root element in the page. Your example code looks like this is the case but I'm unsure. It needs to be one level deeper. x:Bind to realize it should work just fine given the MVVM pattern suggested using INotifyPropertyChanged
Sweet, I'll have a look at that. I'm coming to C# from Rust, where you're just sort of expected to use `unsafe` code sometimes. That seems to be a lot less common in C#, unsafe is more esoteric here.
Best practices wise I would push more towards learning SOLID principles for OOP. This also fits in nicely with coupling between modules. Clean code that another commenter added is good to have read as a frame of reference. One big thing as well is that a method should be doing only one thing. I have seen it numerous times in current and previous code bases where one method is handling many tasks. It just makes understanding, trouble shooting, and unit testing that much more difficult. In C# specifically, I woukd focus on use cases for extensions. They are a powerful tool for extending classes, but they are easily abused.
Especially when used as equivalent of .StartsWith / Contains / EndsWith... 
lmao
My general rule is to not use the slowest possible interface, IEnumerable, unless that's the only one which fits the situation.
Definitely. When companies tried to be like Google because that is the global standard they forget that they don't have the money and scope that Google has. Be vigilant when you code to not overdo work [YAGNI](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it)
The intellisense isn't bad now, and Blend is pretty good. Unfortunately I'm a shite designer so it doesn't really matter how good the tools are.
Look at ```Span```. It's a safe way to do some memory stuff. StringBuilder is mutable because it's just a list of strings you append until you resolve it to a single string. You can pin objects which is useful for interop with non managed languages. That's a few pointers (yay pun) 
I have to flip between C#, JavaScript, ES6, JSX, Swift, and Kotlin a lot. What takes me a moment to remember? 1. Declaring a variable! Is it var, let, val, const, etc, 2. For loops and the syntax difference between them, worse with functional approaches. For, Foreach, for in, map, select, etc
I must be near 15 years with .NET and I still have to Google the DateTime ToString format options.
switch gets me every time. I hardly use the thing. Task.Parallel too.
Regex has always come so naturally to me....I hold on to that whenever applying for jobs and start to feel out of my element 
I did something similar a while back, almost 2 years ago now. If I recall correctly, if you want full functionality across all primitives, you'll need to PInvoke (or C++/CLI wrapper) some of the [Interlocked functions](https://docs.microsoft.com/en-us/windows/desktop/api/winnt/nf-winnt-interlockedincrement64) that C# Interlocked doesn't expose. Another fun project with Interlocked is creating lock free single reader writer collections (queue, stack, etc) that are thread safe. The performance gains are pretty substantial over .NET's multiple reader multiple writer concurrent collections.
I don't come across problems where regex is needed very often, so I end up having to re-learn it every few years to solve one problem. Then I promptly forget it again.
Normally when I need to build a windows service I use a 4.5 or 4.6 console application and topshelf to turn it into a service. 
Just a general recommendation - if you can, use the System.Xml.Linq classes (XDocument, XElement, etc.). The syntax is much more intuitive and generally easy to use, including cases like yours. I seem to recall that it's also more performant, but I could be mistaken there. The code you posted could easily be changed to use these classes - literally in a matter of minutes. 
It wasn't until blend you could f12 to bindings and get intelligence for converters
Pretty much all the suffixes you can add to [format strings](https://docs.microsoft.com/en-us/dotnet/standard/base-types/composite-formatting?view=netframework-4.7.2). Have to look them up and run examples in the interactive window each and every time I want to use one.
To be honest, I can treat all unmanaged primitives of 64-bits-or-fewer as a `*(long*) &amp;val` (i.e. reintrerpret as long) and use the `Interlocked` functions that are exposed for Int64s. Anything bigger than that requires a different approach anyway. As for the collections; at some point I really want to do a blog post deep-diving in to how a recent concurrent key-value storage collection MS research released is faster than ConcurrentDict. 
I still get confused by async/await. Sometimes `await MyFuncAsync();` executes on the same thread and I get really confused.
[ReSharper can help you with that](https://blog.jetbrains.com/dotnet/2013/07/02/code-completion-improvements-in-resharper-8/) by showing the options in IntelliSense.
`public static implicit operator X` is indeed a lot of keywords to make sure they are written right. And it does not help that the syntax for e.g. `public static X operator +` is different.
[Unless you have a `TaskScheduler`. Or use an async lambda.](https://blog.stephencleary.com/2013/08/startnew-is-dangerous.html)
Delegates
It's by design. Managed languages are all about abstracting away memory management. You'll see it im performance critical situations. For the large part though it's encouraged to avoid it. 
I used ReSharper for years but stopped about 12 months ago because Roslyn was just as good for most of my use cases and the performance impact was really significant.
That's the kind of thing that is pointless to memorize because it is easy to look up. the only format you should bother remembering is UTC. 
Why only UTC?
Yes, but can it hold twelve times its weight in liquid?
Dashboard, where the server is pushing out updates.
Yes! Good use case im doing the same. Have you started compressing your data yet?
UTC isn't a format. I'm guessing you meant ISO-8601?
That must be like performing magic tricks at parties!
Haven't been able to implement that feature yet.
Make sure to grab the early access [second edition](https://www.manning.com/books/dependency-injection-in-dot-net-second-edition) which will currently include the first edition anyway.
Where the colons go for genetic class decleration that multi inherits in c#.
Wrong. Would you like to have a Nazi author your CoC?
Can you please post the form as well? It is hard to grasp what you are doing on the UI. Is the intent that the user will enter 5 numbers in the text box named tempInput and then you will show the output in the textbox userOutput? Before using ConvertTo.Int32 make sure that the input is not null or empty. That can cause the error you mentioned. Also, you did not initialize the array, temps, with a length. The for loop won't go anywhere because the temps.Length will be 0 based on code in the screenshot.
Sure it is! &amp;#x200B; [https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings) &amp;#x200B; &gt; "u"Universal sortable date/time pattern. &gt; &gt;More information: [The Universal Sortable ("u") Format Specifier](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings#UniversalSortable).With a [DateTime](https://docs.microsoft.com/en-us/dotnet/api/system.datetime) value: 2009-06-15T13:45:30 -&gt; 2009-06-15 13:45:30Z &amp;#x200B; [https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings#UniversalSortable](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings#UniversalSortable)
My bias is showing. As a systems programmer, I am accustomed to thinking of dates in the UTC format because it removes the common mistake of assuming everyone using your app is in the same time zone. We always use UTC in SQL and in logging and only convert to the locale in a UI app. 
Parsing XML documents. 
UTC is something else though, they just both happen to have the word universal in them.
First of all, you need to parse the text you get from the TextBox and ensure that it is type int. If you don't, you'll throw an error. Next, you might want to only use NumericUpDown boxes if you don't want to bother with parsing and limit the minimum and maximum entered values. You create an array with no size, you only created an instance of it. You need to add a size to your array or use lists arrays if you don't know the size of the array you will want to work with.
It’s paid. Free version has some limitations.
Data is compressed as gz by web server. For load testing I built a small app that updates database every 100 ms and the results were satisfactory. Can you please tell me about the tool that you have discovered?
Just a kindly reminder: something being open source doesn’t mean it has to be free of charge. It just means that its code is open to public but can still require you to pay for the necessary licenses to use it. 
Right on, I used gzip in my Hub (compressed all the JSON, I don't think the built in compression for IIS was compressing the JSON at all because this data is wrapped within the Websocket protocol? I'd have to check with Fiddler/Wireshark again to make sure). Ended up using a javascript library on the client to decompress afterwards. &amp;#x200B; The load testing tool is called QBurst.SignalR.LoadSimulator (r/https://github.com/QBurst/signalr-load-simulator). &amp;#x200B; I thought it was useful to change a few things in this project: inside of QBurst.SignalR.LoadSimulator... you can force the connection to be websockets (or SSE etc) LoadSimulator Project - SignalRConnection.cs:90 connection.Start(new WebSocketTransport()).Wait(); &amp;#x200B; Client - Program.cs The instance.Init can be used to call back a test function if you want to see your data. It's pretty straight forward, put in the target, hub, method, parameters. &amp;#x200B; instance.Init("[http://localhost:60528/](http://localhost:60528/)", "dashboard", "requestDashboardInfo", null); &amp;#x200B; or you can use the init with the callback: &amp;#x200B; Action&lt;dynamic&gt; AnalyzeResults = (obj) =&gt; { Console.WriteLine("Returned= " + obj); } instance.Init("r/http://localhost:3535/", "dashboard", "requestDashboardInfo", null, "broadcastMessage", AnalyzeResults); &amp;#x200B; Remember... this load test program works way better standalone and in release mode (it will make way more connections this way). Don't forget to install performance counters for SignalR to be able to review performance as you're doing the load testing. Also! Note that Client versions of IIS (Windows 7 / Windows 10) wont perform will with websockets.. You'll have to use Windows Server (preferably) or IIS Express (don't know how to run without VS attached) to load test this application. &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
I would love to do all of that, but I'm still learning how to work with everything. I'm still in school for this stuff, but because my teacher won't get back to me, I'm forced to try and figure this out from reading this book, Google, or YouTube. I'll do some more research on it tonight and see what those numeric up/down boxes are, because there is technically a limit but I wasn't sure if they wanted me to use an if statement or not. The class isn't very beginner friendly unfortunately. But thanks for helping. I really do appreciate it. I added the array size but it's still throwing that error, so I guess I'm going to have to parse the line like you said.
Yeah I finally set the array size to 5. I meant to do that before the picture but I forgot. But yes, you're correct. All I'm doing is trying to set it so the user only enters 5 numerioc values and it adds them to the array to loop for the output... if that makes sense.
R# is a hog
It's paid. If that's an issue, WebAPI provides pretty much the same functionality for free.
Here is how I would sort of implement something like this: https://imgur.com/a/wucDcKe I don't know how much you know and this is something I personally wouldn't do but as a learning exercise to kind of learn how things operate, it's a start. I want you to try and figure out how my code works and then tell me how it works. Then I'll explain it and let you know where you might be off.
One thing to check, I only see one textbox on your form. You may be trying to improperly convert tempOutput.Text to an int if there is no value there, or if it is not a convertible string. 
For the lab assignment, does it specifically say to use an array? This adding dynamically seems like it would naturally be a list over an array. However [here's one way to do it as an array](https://www.ideone.com/ZkrByJ)
The array hasn’t been initialized, so the length will be 0
It depends on the type of job you are looking for. Unity, VR/AR, and Xamarin could all fall under game dev jobs. ASP webforms obviously would be web dev, so the last two (core and WPF) are for desktop dev. IMO you'll have the most opportunities with WinForms or WPF, as there are a lot more C# positions for developing desktop software. I'd say your second best bet behind that would be webforms
Regex: the thing I always say I'm gonna sit down and learn but never do because most of the time I can Google what I need.
&gt; WebAPI provides pretty much the same functionality for free. Or nowadays better ASP.NET Core.
A few pointers. - Start by thinking about the steps of your problem + solution logically, independent of any code. The code comes afterward and is simply the expression of those logical steps in computer language. - [Judging by your comment](https://www.reddit.com/r/csharp/comments/9idppx/i_just_cant_understand_how_to_work_with_arrays_on/e6j4kym/), users will be inputting the numbers one-by-one individually. You will need to output those numbers **once** 5 have been entered? - Logically we'll need: 1) a counter to track how many numbers have been input, 2) a place to store numbers that have been input, and 3) to check when 5 have been entered. Computer language complicates this a little bit, and we'll end up with logical steps exceeding 3. Logically, your button click handler should be doing this. 1) check if input string is null or empty. 2) check if input string is numeric. 3) parse input string into Int32 format. 4) store value into array at counter position. 5) increment counter (with modulus 5 operator). 6) check if counter equals zero, if so, output your array.
It might be clear what it is doing, but not why you are doing it.
Oh wow. Thank you for all your great work. The project I am building with SignalR will hopefully change people's lives. 
It's easiest to treat the body of the method after the await as a continuation method for the task you're awaiting. Makes variable capture and method flow make more sense when reasoning around await.
We drank the Service Stack koolaide about 3-4 years ago. The Message based pattern is great to build with, but I very much regret going down that road. Made the jump before webapi 2 came out. We've tried a few APM tools like Stackify, Dynatrace, and eventually settled on NewRelic after using Stackify for a while. None of them work very well with Service Stack. They may be very far ahead of where we stopped renewing our license (at 4.5.6). But it got cost prohibitive as our team grew. In addition none of our new hires hard even heard of it. We're slowly unwinding ourselves from. Service Stack and moving to aspnet core.
Convert.ToInt32 should return 0 on null. It returns FormatException if the string is not a number.
Going back and forth between ES6 and C# gets me a lot. I try to do fancy things in C# that are ES6 only. Also ES5 vs ES6, sometimes I have to do things the ES5 way, that trips me up too.
I have to look at my last project that used them every ..damn..time. 
I always confuse how arrays are defined because my first c-like language was Java, and I very rarely use something as primitive as an array anymore. And now I'm going to look it up again.. sigh.
If you have a valid way to handle a non-parsable value then use tryparse. Otherwise it should throw an exception so use parse. User inputted values should always use tryparse and use the else case to notify the user that the value is invalid. 
It's based on your need. If you need the integer to throw exception instead of just silent parsing use **Convert.ToInt32()** otherwise use **Int32.TryParse()** 
To add to this, you *could* use Convert with a catch block in the same situations as TryParse but performance would be much worse. Convert.ToInt32(string) is basically just a wrapper around Int32.Parse(string) that handles null values gracefully (returning them as 0).
Your away has a length of 0? Maybe you should use list
Switch gets me in every language. I understand how they work, but can never ever remember the syntax. 
I mean, it's just a vim emulator for Visual Studio. When I tried it, I didn't find it particularly different from vim itself (there are a few small differences), but you're not going to be productive with it unless you can already use vim, obviously. If I'm reading your question right, it sounds like you're having trouble using vim's built in shortcuts - maybe try something like vimtutor to get the hang of the controls.
Streams
Yes. I find it difficult to use the vsvim on Visual Studio. I think this online interactive tutorial is good [https://www.openvim.com/](https://www.openvim.com/)
Throwing exceptions is horribly expensive, if you're calling it a lot and performance is a factor, and if you expect the conversion to fail regularly-ish, TryParse is the way to go.
So did you get it working? 
That's close to my use case since the conversion would happen within a loop while parsing an external file. 
The advantage of Convert.ToInt32() is that it'll throw an exception *for you*, but that gets defeated (imo) by the fact it gracefully eats null strings. I always use Int32.TryParse(), typically like this. if(!Int32.TryParse(str, out i)) //throw
I must be missing something. Where is the first parameter (n) used? 
I don't agree with the other posts so far. I don't like Convert functions in general and avoid them unless there's no simple alternative; generally, the Convert functions try to be too smart and this is no exception. In this case, ToInt32 will happily convert null into 0 and continue, which is the wrong decision more often than not. Trying to parse null is not a good practice and usually indicates a bug (and if it doesn't indicate a bug, I'd call it poor design, personally) so throwing on null is usually preferable. In addition, most built-in functions throw when you try to do something to null so it's also an inconsistency, which can easily be missed or misunderstood in testing or code review (I'd actually forgotten about this until I googled the function to remind myself why I didn't like it). Thankfully, you don't need to use Convert at all for parsing ints. I'd use either int.Parse if I want a built-in exception on failure or int.TryParse if I want to handle the failure explicitly (such as include the actual string value in the exception message). And I'd explicitly handle null as a separate case.
regexr.com :) you are welcome. You don't have to learn it all at once - use the site as scratchpad to get the proper one (with tips).
There's a huge amount to learn but you're on the right track so keep it up. Also there are plenty of books out there that can explain concepts and techniques in the right order and much better than any of us can in comments on reddit. Keep practicing and learning and asking questions. 
Even printed [this table](https://blog.stephencleary.com/2014/02/synchronous-and-asynchronous-delegate.html) and keep it as a reference on my desk at work.
Task.Run(someAction);that’s exactly equivalent to: Task.Factory.StartNew(someAction, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default); &amp;#x200B; [Source](https://blogs.msdn.microsoft.com/pfxteam/2011/10/24/task-run-vs-task-factory-startnew/)
Um, what about `Int32.Parse`? I don't see any reason to use `Convert.ToInt32()`.
Switch is pretty much the only thing that I think is designed stupidly in C#, just to be closer to C++: * Why do you have to explicitely break even though fall-through cases aren't allowed anyway? * Why can you declare a variable in one case and then use in another? * Why aren't cases scoped by default?
I like this cheat sheet: http://sheet.shiar.nl/vi/ It's for vim, so some stuff may not work in vsvim.
Did you include the right code? I only took a quick glance and didn't run anything, but nothing here looks recursive. It calls `Iterative`, which calls `NestedLoop`, which calls `Initialize` once, then for each loop, calls `Print` once per loop... and that's really it. No recursion. Regarding the condition you quote, it totally depends on what you input for the two inputs. But the whole thing looks super buggy. `loops[currentposition]` is *always* initially 2. So unless you enter something less than 2 for "number of iterations", you won't go into the loop. And that's weird because you're resetting the value of `loops[currentposition]` to 1... and then going to the previous position and decrementing that? I can't honestly guess as to what you're trying to do, but strongly suspect you aren't doing what you intend to do. Because the end result of running this is simply to set `loops` to `1` for every value and print its state for each cycle... but only if you entered a value for "number of iterations" that's less than 2. It's all very arbitrary to me.
Changes: * Migrated to .NET Core 2.1. * Added project to NuGet. * Removed excess binaries. * Removed registry stuff and file handling. * Refactored structure classes to eliminate Java-like getters/setters. * Better string comparisons. * Eliminated constants. * Fixed DOCTOR script JSON and removed workarounds. * Various minor bugfixes and tweaks. What do you think? Source Code: https://github.com/sirkris/ELIZA.NET 
&gt; A modern .NET linked library implementation of the classic ELIZA chatbot.
Previous thread: https://www.reddit.com/r/csharp/comments/9g91gu/just_released_a_c_dll_implementation_of_the
&gt; What matters is that we've received an invalid input. Which is precisely what `int.Parse` will tell you.
For parsing strings, use int.Parse. For converting objects, use Convert.ToInt32. It’s right in their signatures.
It's the length of the array, from the Hackerrank problem, but it's not used. I think they develop the algorithm problems in C, and then rewrite them in other languages. So a lot of their challenges will have the length of an array as an input parameter, even though you don't need that in C#.
Gets easier to wrap your head around if you start using LINQ and lambda everywhere.
You can fall through explicitly: switch(num) { case 1: goto case 3; case 2: goto case 3; case 3: //do something break; case 4: //do something else break; default: break; } 
Then definitely go with the TryParse. An exception, as its name suggests, should be used when something really exceptional happens - converting tons of number should go with the TryParse and use it's returning boolean value to check if the conversion was successful or not. Throwing an exception is a very resource heavy operation, it NEVER should be a normal way to handle something. An Exception only should be thrown when the normal flow of the application is broken or when you are using libraries where you have no control over the flow itself, for example: during net connection, file streaming, where an error during the operation could happen which makes impossible to recover and continue the operation. Converting a number shouldn't be such a case. 
I do know that about Exceptions. I wonder though why it seems to me, a complete amateur, that Exception control flow is a flavour favourite of some. 
It's also precisely what TryParse tells me, with the added benefit that I can propagate it to my handler as a single exception type with the relevant context information attached.
Well, this is a mystery for many of us. I saw codes (in production!!) where the "return" from a method was handled by try-catch... I think many people simply don't learn the current way to solve problems and this perverse "solutions" stuck because they know no better solution. From a first glance it does work - after all, if you would follow the "throw an exception when the Int.Parse fails" it would give you the same result: your file gets processed. But it would use much more memory and processing time to achieve the same. If you don't learn the correct way, it would result in a bloated, horrible, hard-to-manage code. (and a possible programminghorror entry when someone finds it)
Do you make them a lot? I used to love them, until junior developers started joining the team and more often than not being really confided about how something wasn't throwing a compiler error. There's nothing that points to the implicit operator, they just had to know where to look; or ask a senior dev. Now we just prefer explicit mapping operations. 
Not that I doubted your comment, but I was curious to measure it. I slapped together [a very basic benchmark](https://gist.github.com/Ippo343/b1770ab6aeb43e796791bea88f6be844) comparing the four possible cases, meaning both methods when the output is good or bad. These are the results on my system, run in Release witout the debugger. Convert.ToInt32 (happy case): 0.0001 ms Convert.ToInt32 (bad case): 0.0523 ms int.TryParse (happy case): 0 ms int.TryParse (bad case): 0 ms So yeah, I'd say your remark about the performance of exceptions is well justified :)
Uh, dude. Desktop market is dying everyday. 
\&gt; true + true + true = 3 \&gt; \[Object object\] \&gt; undefined \&gt; false + false = 0 \&gt; "string" + 5 = "string5" \&gt; 0 == "0" = true \&gt; 0 == \[\] = true \&gt; "0" == \[\] = false \&gt; "9" - 1 = 8 Wow, very "modern" .../s
That's like 80% of "not supporting it"
Depends on your needs... If you program is not performance critical and will not contains hundreads of these, then its ok you you like it. &amp;#x200B; If your program is performance critical or will contains hundreads of these, then definetely no. There is an unnecessary array initalization and List initalization, which will spread GC garbage.
&gt; Code smells (There is an expanded list in Marin Fowler's Refactoring book) I actually have that book! &gt; Algorithmic Complexity Yeah, my latest Powershell venture made me *need* to learn about that. Turns out, sometimes naive implementations are REALLY slow. &gt; Also, if you can't already, learn to touch type. I always wish I could type faster. I don't type "proper", but I can touch type, pretty quickly. While holding a conversation with someone, and looking them in the eyes.
You're right, it's not recursive. OP, recursion can be an elegant solution to "some" problems, but it has risks. Each time you recurse you use up another bit of finite memory we called the stack. This is going to be confusing because there's an alternative approach which uses a **S**tack [Here's an old but seemingly accurate example of both](https://haacked.com/archive/2007/03/04/Replacing_Recursion_With_a_Stack.aspx/) Basically recursion simply means a method that calls itself. 
Convert actually calls ```Int32.Parse``` which is why there are exceptions and thus the slight overhead. ```Convert.ToInt32``` has overloads for things other than strings. So it can take a DateTime and convert it to an Int32 for example.
Make sure you run the test in release and outside of a debugger. I had someone do it in a debut in the office and it was doing about 1k executions per second, in release it was 100x faster
[This](https://youtu.be/CzgDxdwTJds?t=34m31s) video should explain the differences nicely. If you don't understand Tasks or async in c# I suggest you watch the whole video, it's very good.
The (imo) best application of composition is with an entity component system. You declare a `List&lt;IComponent&gt;` inside all `entity` classes. The `entity` class is basically a handle to a list of components. You don't have to change the `entity` class to add behavior, just add another component that does its own thing. It works best when you already have an API to talk to so every component can interact with this API only. Game Engines use this a lot because there are many global systems: Physics, Sound, Networking, UI, etc... and every `entity` tends to combine features of the API together. You could create every object manually by creating a new Entity and adding components but it can be useful to have a working base object for something you need to create often. For example. Say you're building a new UI framework. A button would need to responds to mouse clicks and be visible on a window. A window can contain a number of `IEntity` that have at least a `PositionComponent` and `SizeComponent` so that something can be made visible on the window: public class Button : IEntity // IEntity has the IComponent list. { private ReadOnlyCollection&lt;IComponent&gt; components; public Button(string label, Position position, Size size) { // Components can require another component. A mouseclick component would want to know its position and size so that it can pass this information to the mouse input system. components = new ReadOnlyCollection( new PositionComponent(this, position), new SizeComponent(this, size), // new SizeColorComponent(this, Color.Red), // This component might be an optional requirement for the window, defaults to some color. new MouseClickComponent(this), new TextComponent(this, label) ); this.InitializeComponents(); // Calls initialize on all components to verify that all dependencies are met. Should throw an exception if dependencies aren't met. } public void Execute() // implemented from IEntity. { // foreach component call Execute() } } Then inside the window class, you get all the entities that match the dependencies required for your window. If an object of type `button` was added to the window then it should match *but* remember that you can also manually declare a button through components without creating a `button` class.
Yes, I mentioned that in my comment but it's probably better to stress it. The same code in Debug with the debugger attached runs longer than I cared to wait.
You're allowing the caller to decide if it should be awaited. Without the await you are actually cause less overhead of the async/await. Great shit video from [Microsoft](https://channel9.msdn.com/Shows/On-NET/Brandon-Minnick-asyncawait-best-practices)
Just check if the player is below the ground by using some vector checks. 
Thank you. This is the perfect answer to what I was asking. Funny thing I use OnCollisionEnter and I guessed OnCollisionExit which is the direct opposite would do the trick but I felt guessing isn't really the way to go if you want to learn programming so I decided to ask. Sorry I didn't specify all those when asking, this is the first time I'm seeking help on a forum so that slipped my mind. Thanks again 
My general rule is to not use general rules. Wait, shit.
you can move up and down by more than one line at a time, just tap a number first. But more so than that, if you get good with VIM you almost always navigate via some other means, like a search, or jumping to the matching closing brace/paren etc. &amp;#x200B; &amp;#x200B;
https://stackoverflow.com/questions/9519414/whats-the-difference-between-task-start-wait-and-async-await
I used it. It actually worked. Now maybe I'll try other suggestions to see which works best.
The 2nd point is a really good one. I'll try it too
`await` **if-and-only-if** you need the async result to be used immediately. Otherwise, return the `Task`, and allowing the calling code to decide when to `await` it.
How do you know int.TryParse wasn't optimized away by the compiler. I'm not familiar with C# compilers, is there a way to control optimization?
As an extension to the other replies here, is that for example in ASP.NET (all) returning a Task in a Controller means the framework will do the awaiting, thus any Exceptions you get will be outside of the visible (and debuggable!) user code scope. Also, when returning a Task directly, scoping and closures come into play. If returning a Task from within a using block for example, the caller either will or may not await it, breaking the scope and disposing the object in the using block. In 99% of the cases it is more fortunate to use async-await instead of returning the resulting Task, but there are some exceptions. 
But you can defer awaiting still, whether the method called is async or not. You can await any Task, async is just syntactic sugar. ``` var task = DoSomethingAsync(); // do something else here... await task; ``` If you meant using async inside the DoSomethingAsync method above, then it should really not be an iff, as it should be considered on a case-by-case basis. Many times you shouldn't let the caller decide, for example in the case of asynchronous operations on DbContext, as those cannot overlap (on the same instance) even though they are asynchronous. 
Ditto on all this. To add, using `Parse`/`TryParse` shows better intent. `Convert` is a "mixed bag of static utility functions", the `Int32` class handles signed 32 bit integers, so `int.Parse` and `int.TryParse` "is in the correct bag". If I had my will, the `Convert` class would be obsoleted in favor more narrow classes, e.g. `Convert.ToBase64String` &amp;rarr; `Base64.FromString`. 
[Yes, you can use an Attribute to tell the compile to not optimize a specific method](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.methodimploptions?view=netframework-4.7.2#System_Runtime_CompilerServices_MethodImplOptions_NoOptimization). Use like: [MethodImpl(MethodImplOptions.NoOptimization)] public void DoNotOptimizeThisMethod() { }
Change string to the type of model you want. Also, remove the string concatenation from the Post's body and only WriteLine the input. Take a look at the concept of model binding. 
You are right, that is indeed a possibility that I'm not controlling here, and I should have thought about that. I am not familiar enough to be certain, either. However, I checked the disassembly output of the release build and it contains this: for (int i = 0; i &lt; Ntests; i++) 00F80648 xor esi,esi 00F8064A call 6E6E7FF0 00F8064F push eax 00F80650 lea eax,[ebp-28h] 00F80653 push eax 00F80654 mov ecx,dword ptr ds:[3C52304h] 00F8065A mov edx,7 00F8065F call 6E6E8BA0 00F80664 inc esi 00F80665 cmp esi,2710h 00F8066B jl 00F8064A 00F8066D mov ecx,edi 00F8066F call 798F57F0 00F80674 push edx 00F80675 push eax 00F80676 push 0 00F80678 push 2710h 00F8067D call 6F79DAA0 00F80682 mov esi,eax 00F80684 mov edi,edx Console.WriteLine("int.TryParse (happy case): " + ((double)elapsed / Ntests)); I see it contains 4 `call` instructions: I believe it means that the call has been inlined but not optimized away. Unfortunatley I can't understand the disassembly output enough to know for sure. Maybe someone else can confirm / disprove it?
Ctrl+F goes down a page, Ctrl + B goes up a page. Ctrl+D goes down 1/2 a page, Ctrl + U goes up 1/2 a page.
If you don't want to watch a video, this article explains it pretty well. There are a few pitfalls to watch out for if you do return the task instead of awaiting it, like how you handle exceptions and `using` blocks.
I haven't touched Unity since a few years, but I think having your game over logic in OnCollisionExit (by checking if the Object that exited the collision was your ground plane) will be better than checking for a value every frame or at fixed intervals. 
[New release with fixes]( )
[New release with fixes](http://reddit.com/r/csharp/comments/9ig4qj/just_released_elizanet_110_foss_with_the_changes/) What do you think?
[New release with fixes](http://reddit.com/r/csharp/comments/9ig4qj/just_released_elizanet_110_foss_with_the_changes/) What do you think?
If you have a string to parse, use try parse, if you have who-know-what, convert it.
[New release with fixes](http://reddit.com/r/csharp/comments/9ig4qj/just_released_elizanet_110_foss_with_the_changes/) What do you think?
[New release with fixes](http://reddit.com/r/csharp/comments/9ig4qj/just_released_elizanet_110_foss_with_the_changes/) What do you think?
* Co- and contravariance on interfaces. If nothing else, I can never remember which is which. The keywords chosen are pretty smart, though. Don't need it very often. * Logical operator binding generally trips me up. I always wind up having to verify whether `a &amp;&amp; b || c` is `(a &amp;&amp; b) || c` or `a &amp;&amp; (b || c)`. I take some small comfort in the knowledge that every time I have ever seen logical operators chained like that without parentheses, it turned out to be a bug. * Format strings. Rarely use anything but the most basic ones, really. * Almost anything around concurrent processing, whether with Threads or Tasks. It's potentially complicated *and* I don't do enough of it to run into and solve pitfalls. * Anything UI. I just never touch it.
I'm impressed! &amp;#x200B; A few things; this is like you said, HVAC principles. And yea i do work for a mechanical contractor. And yes I do use C# to support our fabrication shop and Revit users. Something to note though, this isn't something written with the Revit API. This is with the Fabrication API. Which is a database that programs like Revit and CAMduct use. &amp;#x200B; Anyways, Good catch on the decimal value. You are absolutely correct, however that size, are far as duct sizing goes, is non-existent. Programmatically(?) I should handle it, but its just not something that would ever be made, so it isn't a concern of mine. &amp;#x200B; "Smacna ±2 W.G." is a reference to my database. These are pressure classes for duct. Pressure classes are what the engineer uses to predict the amount of physically pressure that would occur on the duct during usage. A duct the size of 20x20 in a 2" pressure class vs a 10" pressure class would be constructed differently since the perceived pressure on the duct would be much higher. Two things change with higher pressure classes. Metal gauge and Internal Stiffeners and/or Supports. The gauge is just the thickness of the metal used to construct the duct. Internal Stiffeners are metal rods that get put into the duct to give it support. There are two types of Internal Stiffeners. Joint Tie Rods and Center Tie Rods. Joint Tie Rod (JTR) go at the end of either side of the duct while Center Tie Rods (CTR) go in the center. &amp;#x200B; Which brings me to my acronyms. These are unique to our company btw. We just shorted everything so it fits on our labels. In my example I'm looking for JTR and then I specify where it needs to go. Because if it does indeed need them I need to tell them where. So here he you have what follows the JTR. &amp;#x200B; One Way (OW), Both Ways (BW) or One End (OE), Both Ends (BE). &amp;#x200B; I like the format of your code a lot and I may rewrite what I have with this in mind. But let me show you why it wouldn't exactly work. The table you had "Small" listed without a label. This is correct. It doesn't have to get a label at all. I'm only looking at stuff 55 or larger. BUT, I still need to look at every dimension. &amp;#x200B; Here's a real life example of 5 different pieces of duct that fall into each category. 1. 55" x 55" x 55" x 55" = Joint Tie Rod - Both Ends + Both Ways 2. 55" x 55" x **54"** x **54"** = Joint Tie Rod - One End + Both Ways 3. 55" x **54"** x 55" x **54"** = Joint Tie Rod - Both Ends + One Way 4. 55" x 55" x 55" x **54"** = Joint Tie Rod - One End + One Way 5. **54"** x **54"** x **54"** x **54"** = Nothing So you can see whats going on now. &amp;#x200B; Look at number 4 for a second and this is why the program started to grow so fast. &amp;#x200B; Number 4 in itself has 4 possibilities: **54"** x 55" x 55" x 55" 55" x **54"** x 55" x 55" 55" x 55" x **54"** x 55" 55" x 55" x 55" x **54"** &amp;#x200B; These all fall under - Joint Tie Rod - One End + One Way &amp;#x200B; Keep in mind this is only one type of duct in one type of pressure class. &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B; &amp;#x200B;
yeah sorry I mixed the names, I saw how the recursion one was done but I dont get the iterative condition on the post
I just copied the same code as they have here.. https://imgur.com/a/VOe3dY9
I don't see how that adds any benefit. If I call GetCustomer it is because I need a collection of Customers. Now. If I dont await the result than I just push the await requirement to all my callers. Task async pattern (TAP) provides the best of both worlds: public async Task&lt;Customer&gt; GetCustomer() { return await _db.GetCustomer(); } public async Task&lt;Product&gt; GetProducts() { return await _db.Products(); } public async Task GetSomeDataAsync() { // Get some Customers List&lt;Customer&gt; customers = await GetCustomer(); // then get some Products List&lt;Product&gt; products = await GetProducts(); // Get Customers and Products in parallel Task t1 = GetCustomer(); Task t2 = GetProducts(); await task.WhenAll(t1,t2); List&lt;Customer&gt; customers2 = t1.Result; List&lt;Product&gt; products2 = t2.Result; }
If you're desparate to hire someone and can't find any asp mvc devs, showing that were able to pick up xamarin quickly from. scratch and be production (needlre evidence than just saying it), then yes, it's better than nothing. if you really want to show you're competent with asp mvc, then learn it and do something with it. 
The key thing about recursion is knowing when to stop. You need to have a condition which is checked, and that tells you to start returning, and this unwinding the program call stack. Without this you will quickly get an out of memory error when your call stack (and all it's frames) use up the available memory. So write your termination check first. 
Gotcha, my bad for not understanding :)
well Yeah I know doing it with a condition is the best choice, but in this case I need to understand this code because as I see it the innner while loop doesnt get executed if it is higher than numberofIterations, but somehow it executes??
That's what comments are for.
Well it's missing quite a few lines between the for statement and the Console.WriteLine call. If I decompile the benchmark to IL, between those same lines I see 4 call instructions: * call bool [mscorlib]System.Int32::TryParse(string, int32&amp;) * callvirt instance int64 [System]System.Diagnostics.Stopwatch::get_ElapsedMilliseconds() * call string [mscorlib]System.String::Concat(object, object) * call void [mscorlib]System.Console::WriteLine(string)
Download vim, and run the interactive tutorial. That is a good start. Vim is small size and easy to install so you might as well have it installed. You will notice some features are missing from VSVim. So sometimes I just open the file in Vim and do the more complicated stuff there (like macros are a bit fidgy with VsVim).
My issue with that is that Exceptions are supposed to be exactly that. Not a means to control flow. :)
They are both incredibly similar, with most of what missing residing in System.Windows, and the rest quickly being added to .NET Core. If you learn WPF &amp; WinForms, they will be added to .NET Core, hopefully in a year or two. I also figure that it is better to use Core unless specifically developing Windows-only apps, and even then...
I don't see the two, at least superficially, being all that different from each other. I believe the plan is for Core to eventually catch up to Framework and then it would make sense to retire development on Framework &amp; allow an easy way (automatic?) for existing apps to retarget to .NET Core.
I hope that, at a certain point, Framework is retired &amp; Core is focused on. They could have a way for existing assemblies to automatically retarget to .NET Core, and add OS-specific namespaces (they'd have to keep around System.Windows at least). NOBODY wants to break existing Framework apps. It's a good thing WPF &amp; WinForms are planned for Core, so apps using those GUI frameworks won't break.
You should use [this](https://github.com/dotnet/BenchmarkDotNet) if you want to benchmark correctly in .Net
Guessing isn't certainly the best approach. I recommend learning how to work with script references and documentation, they're invaluable resource for discovering what kind of functions/API's some solution offers and what do they do. For example here's the reference for MonoBehaviour, which has information on the OnCollisionExit function, among many others: https://docs.unity3d.com/ScriptReference/MonoBehaviour.html
If you use [BenchmarkDotNet](https://benchmarkdotnet.org/), it will make your benchmarks more accurate (e.g. your code does not perform warmup) and actually easier to write (you don't have to deal with `Stopwatch` yourself).
 public async Task&lt;Customer&gt; GetCustomer() { return await _db.GetCustomer(); } is basically the same as public Task&lt;Customer&gt; GetCustomer() { return _db.GetCustomer(); } except that the first unwraps and wraps the `Customer` result back up in a new `Task&lt;Customer&gt;` allocation (and has a hundred or so more instructions wrapped up in the state machine). The specific pattern here is known as a "Tail await" (analogous to a "tail call"). Basically usage of the `async/await` keywords force the creation of a state machine which has observable side effects and performance implications (and thus the compiler doesn't optimize it away; there may be hope for a language change to specifically permit this though). Refactoring to this pattern and then removing the keywords is a technique currently employed by people to improve performance in async heavy code. There are perf improvements to be had: #### Tail call clean up async Task MethodAsync() { // ... some code await OtherMethodAsync(); } becomes Task MethodAsync() { // ... some code return OtherMethodAsync(); } #### Like-wise single tail await async Task MethodAsync() { if (condition) { return; } else if (othercondition) { await OtherMethodAsync(); } else { await AnotherMethodAsync(); } } becomes Task MethodAsync() { if (condition) { return Task.CompletedTask; } else if (othercondition) { return OtherMethodAsync(); } else { return AnotherMethodAsync(); } } #### Mid async async Task MethodAsync() { if (condition) { return; } await OtherMethodAsync(); // some code } splits at first non completed task into async awaiting function Task MethodAsync() { if (condition) { return Task.CompletedTask; } var task = OtherMethodAsync(); if (task.Status != TaskStatus.RanToCompletion) { return MethodAsyncAwaited(task); } MethodAsyncRemainder(); } async Task MethodAsyncAwaited(Task task) { await task; MethodAsyncRemainder(); } void MethodAsyncRemainder() { // some code }
No it's not. Open source means it is both on the internet and free to use and redistribute. https://opensource.org/osd-annotated What you are referring to is usually referred to as "source-available", e.g. Unreal Engine.
Thanks, any good reading suggestions on the topic?
By definition maybe, by practice no. Almost all for-profit companies “sell” products which are open source and I’m yet to hear anyone referring to it as “source available”. There might be a free/community version though. 
That looks powerful, I'll check it out!
I have always like using the old enterprise Action/Executor pattern to organize feature code while making commodities key integrations. This is where strong interface use can be extremely helpful.
All of these are fairly easy wins if you have a profiler that identifies hot paths that include async state machines being run on tasks that are usually completed.
Source code for Convert.ToInt32: public static int Convert.ToInt32(string value) { if (value == null) return 0; return int.Parse(value, CultureInfo.CurrentCulture); } Source code for Int32.Parse: public static int Int32.Parse(string s) { if (s == null) ThrowHelper.ThrowArgumentNullException(ExceptionArgument.s); return Number.ParseInt32(s, NumberStyles.Integer, NumberFormatInfo.CurrentInfo); } 
Yes, but give me a while, Visual Studio doesn't appear to work with something on this laptop, probably DisplayFusion.
Ummm.. I thought fall-through cases were allowed? switch(num) { case 1: case 2: //do something break; } In the above, the logic for `case 2` is ran if `num == 1 || num == 2`. Am I mixing up VB.NET and C#?
Not my article. This was written a decade ago.
Well yea, when you can handle the parsing error in place `TryParse` is almost always better than throwing an exception. (I can see some obscure case where you want to know why it didn't parse.) 
What you showed is legal, but you cannot implicitly fall through if you had added a statement in the "case 1:" scope. You would have to use a goto at that point to jump to case 2.
Thanks a lot. Looks like you have really done some work with SignalR. I will show your comment to my superior and this will help us a lot.
Hey no problem. Been working on it all last week, a little this weekend. Most the info I learned was shared with me, so I figured I'd share it with you. 
Boolean takes 1 byte
that's cool. I'm not a c# developer, but that's a very practical attribute
I got around this by creating a global array variable, and then when the use inputs, it added to the array. I then cleared the array with another button (just set it back to the default value or something). 
The `bool` type takes up one byte, there aren't any sub-byte types. You can pack multiple boolean values into the bits of a byte or larger integer by using bitwise arithmetic (`BitArray` does this), however then you are likely trading space for speed due to the additional arithmetic required for each lookup. Either way, this sounds like an absolutely inconsequential amount of memory. I generally wouldn't worry about long lived memory consumption until you get into the tens or hundreds of megabytes, and even then it depends on the use case (single user app vs. server etc.). How long it takes to load depends completely on how you load it. As a stream of bytes from a file I would expect it to be basically instantaneous.
Be cautious with sbyte (the 8 bit int type in C#), since it's signed (-128 to 127, not 0 to 255). &gt;If a boolean takes 1 bit Actually a bool[] takes 1 byte per bool value. You might try a BitArray to store them more compactly. &gt;Second question is if this is a feasible thing to load at the start of a level and how would I go about estimating the speed required to load it. ( the array would only be read by column when loaded) &gt;3.251 KB. This is essentially nothing on modern platforms, and users with a SSD probably won't even notice a delay when loading data this small. That said, it's probably better just to try it out than to try to guesstimate how much of an impact it will have on your gameplay.
Ah, I see the difference. Thanks for the clarification.
&gt; Rust, where you're just sort of expected to use unsafe code sometimes I find this ironic when, as far as I understand, Rust has an emphasis on doing safe and efficient memory manipulation.
Yeah, it is. But *someone* needs to write the `Vec` implementation (Basically a List), and you can't really do that in pure safe code with no garbage collector unless you have a lower level list class which is just part of the language itself. You're meant to hide the unsafe code and provide a fully safe interface to them.
**Extremely** bad advice without being more specific. Arbitrary example that shows why this is bad: using (var context = new Context()) { // I don't need the result immediately, so just return the Task. return context.DoStuffAsync(); } And now the context is disposed while the task is still running.
Fair enough. When I was looking for a job in the UK a few months ago there were almost no desktop jobs and it was all asp.net I ended up switching to a Web development role because of it.
I only say that because when I was job hunting in the UK of month ago there were hardly any desktop jobs. Everyone seemed to want mvc. But that was likely selection bias for my area.
I agree with all your points. On the xamarin front what I understand is its great for internal enterprise apps but not great for much else.
Code should be self commenting. Comments should be avoided.
I'm assuming this could also just apply to code organization and the underlying pattern of "repository" or something could still be used 
&gt; (-128 to 127, not 0 to 255) *icky flashback to Java days* I'm super glad byte is unsigned-by-default in C# (i.e. `byte` &amp; `sbyte` rather than `byte` &amp; `ubyte`) in C#. It's a switch from the regular u- prefixing but a welcome one IMO.
Unfortunately they decided to call the type System.Byte instead of System.UInt8 
What if I want to convert a string to an int?
\&gt; so I'd be interested to see if you could point this into a byte array, and then have full control over what object something is, and it's fields. &amp;#x200B; [http://mattwarren.org/2016/09/14/Subverting-.NET-Type-Safety-with-System.Runtime.CompilerServices.Unsafe/](http://mattwarren.org/2016/09/14/Subverting-.NET-Type-Safety-with-System.Runtime.CompilerServices.Unsafe/) provides a good look at what is theoretically possibly. But you shouldn't actually ever do it. Trying to alter the type of an object is just too unsafe to seriously consider (and I say this as someone who has detoured .NET functions a number of times, which means I'm comfortable with overwriting jitted assembly code). If you need to read or mutate private fields, there are better ways that are much safer &amp; more reliable (Reflection, or compiled DynamicMethods). &amp;#x200B; &amp;#x200B;
You're in the right, IMO. Unity devs are c++ people, who generally believe in allowing the dev to do whatever they want, even if its dumb and breaks stuff. C# people generally want only one right way to do something. C# structs should be immutable in the ECS case.
&gt; Task.Run() and Task.Factory.StartNew() It's my understanding that you should always use Task.Run() unless you're doing something very technical and need the options that Task.Factory.StartNew provides.
I've been thinking about this recently at my job. The solution is big enough that finding things by navigating the file system is not practical so everything is searched for, God help you if it's not named how you'd expect
Mutable structs are allowed. Part of that is historical, but we use them extensively in finance. You're a much more experienced Unity programmer than me, but I would ask you to consider how mutable structs can be used safely and then formulate an argument. Why is the Job system at risk because of mutable structs? Why does it work currently, if at all? These are the questions you need to answer to make your case. Once you answer those questions I think you'll rethink your case, and that's perfectly fine. I spend oodles of time being wrong and having to learn stuff to rectify that. As mentioned we use them in finance a lot. Long story and I've got a broken arm so I'm sort of at my limit for typing today :( Best answer I can give right now is, yes they're fine and you should ask exactly what the use case is and why they're not risky for that use case. Also ask when they shouldn't be used. Don't force an argument. People will explain (actually gamdev.stackexchange are/were dicks, but generally people will help). Some of the new optimisations are based on immutability with specific limitations, but remember these are optional and forcing a universal rule rarely has the effect you expect. 
PowerShell's Select-String cmdlet can search rather large files super-fast with regex, or literal text. Very easy way to filter out relevant files, assuming the format is some sort of text. Helped me immensely fetching relevant xml files in seconds despite being hundreds of megabytes each.
Torrent apps use peer 2 peer protocol. You could search for that Sure, there is already a library that implements the protocol Hope it helps
I made a not too simple architecture that uses a lot of inversion to separate concerns by features. Each feature has its own project, and only the Wireup knows all the features, the features only know abstractions and models that are shared, so they can be communicated with over their abstractions (interfaces). The simple 3-layer (DAL, BLL, Web) structure is extended with the Core which hosts abstractions, and all BLL features are separated to their own projects. 
I wrote my own game engine a couple of years ago. Before that I used to help improve performance of bespoke sonar/DSP algorithms for the defence industry. A lot of the rules that good C# programmers follow can-and-must be broken when writing high-performance stuff (actually that's true for any language, really). Mutable structs, when used with care, can allow you to circumvent unnecessary copying.
I might start by explaining that, to convert a string to an int, we probably want to parse it, first.
Yeah, I don't usually use tuples. I find that if I am, I often want to make a class/struct instead. Sometimes, I do want to use tuples, and its just because I need a list of "things", with specific types, for a one-off thing, used only in one spot in my code.
 try { return int.Parse(str); } catch (Exception e) { throw new MyPersonalParseException("parser's clogged", e); } I guess. I don't see a lot of value in TryParse()'ing if you're going to puke up an exception, anyway, since you're throwing away all the information about *why* it failed to parse.
Just wanted to second this. The JS community is vibrant, and the core language itself is actually quite good. 
Maybe try taking a turn in management at the human side of things. After a couple decades of programming I was completely burnt and moved into a full management role. Didn’t code for a few months. Then I started tinkering at home. Slowly rediscovered my love for it. 
Hey /u/Fizixman, I found the guy we keep banning
Your example of the async call inside the \`using\` would crash right away, and **easily discovered during development**. My comment was written as a rule-of-thumb for 90% of the time. I don't agree with your claim that it is extremely bad advice. Nobody would run their code without running their code once in the real world. &amp;#x200B; Like yugabe commented below, I was referring to using the awaitable result within the same \`async-await\` method that is specific to the class containing that method. public async CalculateSomethingAsync() { var result = await GetFromApiCall(); var calculatedResult = CalculateSomething( result ); return calculatedResult; } &amp;#x200B;
Immutable structs require copying all the data on the slightest change.
&gt; First question is, am I missing anything in my calculations? A bit, yes. Objects have a header that contains the syncblock and typehandle. That's 8 to 16 bytes of overhead depending on 32 or 64 bit words. Additionally, your fields, a boolean (1 byte) and a byte (based on your 8 bits mention) don't naturally align with word boundaries. The compiler will pad the size of your Beat object to 12 or 24 bytes so it aligns with address boundaries. Furthermore, at the very least one pointer needs to exist for the object not to get garbage collected. That's another 4 or 8 bytes. Arrays have a similar header, but are larger than regular objects. For simplicity, and because it's largely negligible (your jagged array holding 7 arrays = 8 arrays = ~100 bytes of overhead with 32 bit words), we'll ignore this. 
Yeah, not me kiddo. :)
With their ECS, Unity gets &amp; passes entity component data by value. A compromise would be to suggest (or enforce) that component data fields are pointers.
I started learning WPF and it felt pretty overwhelming, considering I was completely new to anything related to programming, nevermind .NET But now ASP.NET seems pretty daunting in itself and I'm putting off starting to learn it - do you think it would've been easier to first have gone with ASP.NET and moved onto WPF?
You *can*, but this always brings up complaints about "`goto` considered harmful".
Sounds like the person that wrote the article doesn't understand basic cohesion and coupling, let alone anything else to do with systems architecture.
It's your turn to ban them this time; I did it the last two times.
Your code example, catching the inner exception, is probably technically best practice. If you capture the input string you can easily discern what the parsing failure is though, you're not *really* throwing it away. If you really needed to know the specific reason (null, format, overflow), simple string analysis is probably cheaper than allowing parse to throw, catching, wrapping, and rethrowing. I guess it's just personal preference and habit. I just find the TryParse method cleaner and faster. The same functionality with two lines of code at the site.
&gt; torrent-like Torrent-like apps are a bit advanced and use a DHT (specifically, [Kademlia](https://en.wikipedia.org/wiki/Kademlia)), [PEX](https://en.wikipedia.org/wiki/Peer_exchange ) and [trackers](https://en.wikipedia.org/wiki/BitTorrent_tracker) (before DHT was a thing) for peer discovery but you honestly don't want to deal with BitTorrent or a similar P2P protocol- it is not an easy feat and you don't have libraries for everything, especially in C#. &gt; Every device would have an app running in background and would send some data This is a very easy task, and there are tons of applications that already do that. &gt; How one app can discover IP adress of the others? This is a bit problematic. For a local network, you have uPnP and mDNS/Bonjour to discover other devices and it's pretty easy. But over the internet, you usually need a centralized way to do it. In BitTorrent, the initial node for the DHT is discovered via the *.torrent file, or from the tracker (if it's not a trackerless torrent). Unless you have experience in creating your own P2P software, I'd highly recommend starting out with a centralized server that maintains a list of all the peers (you can do that with a simple *.json file on a GitHub repository - if you want a free "server"). 
Agreed. If you don't abstract your storage model, you deserve a whipping. However, within the web project, I think it's a good idea to keep the views with the controllers and viewmodels. I can get behind component organization on that level.
Even there, you should use a Dictionary or Enum. Don't use magic values or lists. 
A lot of the UI should restrict what is entered. But it depends if its desktop or web, anyone can craft a form and enter in letters in a number field and cause exceptions/errors however for all my desktop apps UI validation makes a lot of these never happen (WinForms related and stuff)
I have to disagree with much of the sentiment here. I've used Xamarin and find it easy to use and very good at writing apps for both iOS and Android -- natively. I've been using Xamarin when it was called MonoTouch and MonoAndroid -- well before Xamarin Forms. The tooling is excellent and have greatly improved over time especially now that it is integrated into Visual Studio. As a C# developer Xamarin is very easy to get up to speed and to use to develop mobile applications. 
Your original paste bin doesn't have this case in it. The cases getting "JTR/OW/OE" one way one end are 55 54 54 54 54 55 54 54 54 54 55 54 54 54 54 55 All of these would have gotten 1 small and 1 medium which gets the "JTR/OW/OE" string. The new case 55" x 55" x 55" x **54"** would be 1 large and 1 medium I not sure what this should have gotten from the original and I didn't handle it in mine. What are all of the cases? I made assumptions while I wrote my version, I don't think the system I came up with matches what is needed. What are the 4 dimensions? If we draw a picture of it? 
I'm talking things like this: //Returns the fibonacci sequence, up to maxItems long //Return value is an iterator for Tuple&lt;int,int&gt; // where Item1 is the index in the series // and Item2 is the value of that item IEnumerable&lt;Tuple&lt;int,int&gt;&gt; Fibonacci(int maxItems) { int a = 0, b = 1, c = 0; yield return new Tuple&lt;int,int&gt;(0, 1); yield return new Tuple&lt;int,int&gt;(1, 1); for (int maxItems = 2; maxItems &lt; len; maxItems++) { c= a + b; yield return new Tuple&lt;int,int&gt;(maxItems, c); a= b; b= c; } } It's not worth the overhead of creating a new class or struct to just return two integers. As long as the caller of the function understands what "Item1" and "Item2" are, its a nice simple easy way to do it. Yes, in this particular use-case, an array would work, since I know the size in advance, and it has an integral index..... But, my point is that sometimes, it's a short, one-use thing, that isn't re-used anywhere else, and its not worth the time/effort of a class/struct, when I can just use a tuple.
It's very simple. Organizing by feature puts all the relevant files in one place. In a quick glance, you can immediately see everything involved in the feature by what's in the folder. And as you discovered, the tradeoff is you lose your precious project decoupling
that's what Doctor Who would say...
He/she's a smart guy/woman. I'd give him/her? the stamp of approval ;)
This code shows the difference between async/sync call stack when stack depth is MaxDepth. The intent is that the difference between the runtimes will represent the overhead of async task wrapping. It's not scientific hopefully its close. Suggestions for improvement are welcome. class Program { static void Main(string[] args) { int loopCount = 10000; TestHarness testHarness = new TestHarness(); int result = 0; Stopwatch s1 = Stopwatch.StartNew(); for (int i = 0; i &lt; loopCount; i++) result = testHarness.AsyncTest(0).Result; s1.Stop(); Stopwatch s2 = Stopwatch.StartNew(); for (int i = 0; i &lt; loopCount; i++) result = testHarness.Test(0); s2.Stop(); Console.WriteLine($"AsyncTest: {s1.ElapsedMilliseconds}"); Console.WriteLine($"Test: {s2.ElapsedMilliseconds}"); Console.ReadKey(); } } public class TestHarness { private const int MaxDepth = 200; public async Task&lt;int&gt; AsyncTest(int i) { if (++i &lt; MaxDepth) return await AsyncTest(i); return await Task.FromResult(i); } public int Test(int i) { if (++i &lt; MaxDepth) return Test(i); return i; } }
 You're still copying the entire struct as it's not passed by reference in Unity, which is the only place you would get unnecessary copying (it's getting copied whether you tell it explicitly to or not). I do wish C# had javascripts object spread operator that would make this cleaner, that would be super nice to have with the new Records that are coming, but ya, I highly disagree with Unity on this one.
I think in general there will always be a war between two camps on the topic of immutability vs. mutability. This is because for all the wisdom we acquire, very few programmers are willing to admit "there are more contexts than my problem domain and I am, in fact, a big fish in a very small pond". It is true that mutable types are more performant. To change an immutable type, you have to allocate space and copy the unchanged information. No matter how minuscule, that is overhead above just changing a single value. You can mitigate it by, say, making smaller structs, but it's always there. It is true that immutable types make it easier to say your code is predictable. This is especially true if any form of concurrency is involved. There is a very formal programming paradigm that lets you prove your code doesn't have certain classes of errors if and only if you work with immutable data. But it is true that some people need or want performance more than they want safety. It is also true that some systems need safety even at the cost of performance. So it's not earth-shattering to point at a high-performance requirement and note immutable types add enough overhead to make your functionality not feasible. Game developers have 16ms to update their game state *and* render a frame. If immutable types add 1ms of overhead, that's an entire library of games that won't run smoothly until a new generation of CPUs release. So they reach for solutions that don't use immutable types. And they tend to have a lot of problems managing concurrency. But they run at a framerate their customers find acceptable, and hell if people can buy Bethesda games it's clear you can ship with some errors. But it is folly to try and extend it to other cases. Unity developers don't have the same constraints as, say, client developers. If you're writing financial software, you probably value mathematically provable data integrity even if it means you lose a second here or there to overhead. Nobody's going to cheer for your fast calculations if you can't prove they're right. 
Haha. I can see it now. **Visual Studio's Battle Grounds:** One-hundred C# devs pitted against one another in a last-man-standing fight to the death. Who would win?
Honestly put your efforts toward getting some kind of certification. Programming is sometging that can be totally self taught, but it puts you at a disadvantage with someone who has a formal education. If I'm hiring for a junior position and there is 5 applicants, 4 of who went through school I'm going to be calling hem about the interview first. You might be really bright but I know what I am getting with the other applicants
It's not throwing exceptions that's expensive, it's catching and dealing with them. It'd be nice to have some built in error handling that wasn't exception based but richer than bools, e.g. maybe, or better either. But from experience, implementing these isn't that much fun in a language that doesn't support sum types. Though the newer matching stuff on switch gets part way there. 
Sorry I've been working on it all day. No I still can't get it to work. no matter what I do. Seriously starting to think I can't learn this stuff in the time the teacher wants me to. I'm just getting so frustrated over it all, and now the assignment is late anyways.
Yeah, sorry. I probably should have mentioned that. I actually set the label to visible = false so I could set it to appear when the numbers were entered. 
Sorry I'm still so new to all of this. Just started like 3 weeks ago. Maybe I should already know a bunch of this stuff, but my teacher doesn't exactly make it easy on me. I'm trying to understand the best I can. &gt; An empty label has an string.Empty value and will cause Convert.ToInt32 to throw an System.FormatException: Input string was not in a correct format. exception. This is the EXACT problem I'm having but I'm unsure how to fix it. If I don't set it as an int32, decimal, or double how exactly do I output the numbers to begin with? Also should I loop with the tempInput.Text instead? Why would I do that? My book says otherwise, so it's interesting that so many are going against the book I'm supposed to study from. :/ 
I don't know how to use a list. I'm not even sure my class has got to that point yet. It's all moving so very fast I can't keep up. I guess that's something else to consider looking into.
When you say global array value, do you mean outside the buttons and stuff? That's what I originally had it as and it still threw errors at me as soon as I clicked the done button.
Is this code you're writing right now, or is this just a throwaway example? There are several things I would do differently, but I'm not sure if this is something that needs critique.
No I don't believe it does. It just says that it needs users to store values between -30 to 130, and whenever the user enters a value that's a higher number, it says "getting warmer", if they enter a number below the highest value it says "getting colder" and then it says something along the lines of "it's mixed" if you're in between. Strange I know. But that's my assignment. Also I have to make it throw custom errors and let the users know when they're entering incorrect numbers. Hoenstly it's probably super simple to people who have been doing this, but coming from someone who's only been doing C# for three weeks, it's really really hard.
Waste able to look at your code until now-- Seems to me you're going about it pretty much the right way. Although, I wouldn't use `Convert.Int32()` . Try using `int userInput = Int32.Parse(tempInput.Text);` instead. I'm guessing `userOutput` is "label 1" ? `Int32` cannot convert "label" to a number. Instead try making it something like int[] temps = new int[5]; int x; private void DoneButton_Click(object sender, EventArgs e) { int userInput = Int32.Parse(tempInput.Text.Trim()); int userOutput; for (x = 0; x &lt; 5; x++) { userOutput = temps[x]; } &amp;#x200B;
Sorry, I know there's probably a million different things I'm forgetting. The course is so fast paced that it's always something else that makes me forget the last thing I learned. I'm still uunfamiliar with things like Parse and Lists. I'm trying to think as logically as possible about it, but it's still really tough. Maybe it's just me though. Idk. I'm trying not to get disheartened by it. Just gotta keep trying the best I can. But thanks for the tips though. It's definitely helped me understand a better way of approching this. It's hard for me to take the tasks at hand from paper, to logical thinking, to programming it. 
Disagree. Some self-taught programmers such as myself will have public repositories which can prove to employers what they can do. Formal education doesn't mean anything. I've seen people come from University and fail to do fizzbuzz...
This fails to note that you have to check the return value of TryParse. 
Really? I'm in the US in a medium sized city (metro of a million) and every job search for C# is for WinForms or WPF. Have yet to see one for game dev or mobile, but I do see a fair amount for web devs. But again, I never wanted to do web development with C#, I always had a focus on desktop applications, so I was never looking to hard for the web positions. 
Only if you actually care whether or not there was an error. `out` parameters must be set to *something* before the method returns, and the various `TryParse()` methods generally use whatever the default value is for their type. Which is a windy way of saying I've seen an unfortunate amount of code like (ugh) int.TryParse(someString, out foo); return foo;
Nobody you say? Boy, do I have a bunch of programmers to show you...
The entire error message would be helpful, but I’m guessing you’re trying to output the contents of the array into the text property of label1? You’ll need to parse that into a string; something like String output = string.empty; Foreach( var outputInt in temp) { output =+ $”{ouputInt.ToString()} ”; Label1.text = output; I normally wouldn’t use string interpolation (the $ sign) in an example, because it’s syntactic sugar (the compiler compiles it into a more basic syntax, and it’s Breyer to know that syntax first before using syntactic sugar), but I’m on mobile. Let me know if you need clarification.
My suspicion is that this author is used to working on projects that are organized and patterned off of the Anemic Domain Model. Throughout my career before running a team of my own, I had the fortune to do massive projects in both the Anemic Domain Model and via Domain Driven Design. My hunch for the author comes from my observations in dealing with ADM. Typically a side effect of ADM can be that domain logic gets spread around everywhere. To the authors credit, I could get behind a purely file based organization methodology around features, but in no way would I ever put all of the constituent layers in one project. I think you could achieve infrastructure abstraction and loose service coupling while still having feature organization across multiple libraries. I’m tempted to build a small to medium project with just this type of organizational methodology to see how the rubber meets the road. Where I suspect this will fall down is that most companies anymore are simply putting CRUD over rest with minimalistic business rules. I’d be curious to see how this organizational style scales for a complex domains such as healthcare. 
As a development team manager working for a mid-sized company, I can tell you we have no plans to migrate to Core. It's not because we're not interested in it, it's just that our organization is heavily invested in the Windows Server platform and there's very little juice for the squeeze to make the move. There just isn't a reason for us to switch to Core right now. And I doubt that our opinion will shift much in the next 3-5 years. There are tons of companies just like ours. We will experiment with it but there's almost no chance we'll be moving all of our stuff over. To call the framework the next COBOL is a bit of an exaggeration.
Good to know that companies are not willing to give up .net framework yet. However, the issue is **Microsoft itself** is giving up on .net framework and focus on .net core. If the company that create the framework itself is switching focus to another technogloy (.net core), then the future of .net framework seems worrisome to me. I mean I can tell most people who choose .net because they want a more stable career...Microsoft is definitely screwing us up on that.
.net core is the future, but the two platforms are so closely related that refusing to learn .net framework doesn’t make sense. the knowledge carries over in large part.
There is almost no difference in the programming knowledge you need for frame vs core so it doesn't matter at all. &amp;#x200B; &amp;#x200B;
Honestly, you're overreacting. The focus on .net core is a play to pull in the Linux crowd. For so long MS has been all about generating revenue through windows licensing, but they are moving away from that. The focus now is Azure and that is where they want people. The more stuff they can have running on Azure, the happier they will be. Just look at [project native](https://natick.research.microsoft.com/) where they are putting server farms in lakes and oceans. You don't do something like that unless you think there is some serious money to be made. Like it or not, a large number of things run on Linux. Supporting and doing what you can to be considered a good place to house such things goes a long way in the world. I believe MS has realized that and now they are doing everything they can to get people to stop thinking of them as Windows only. Thus the huge push for .net core right now. 
.NET core web services
Core is just like framework with a whole bunch of missing pieces, and it's portable. It's like trading in a 1,000 piece Craftsman SAE tool set in a rolling box for a really good 20 piece SAE/Metric socket set and a 4-way screwdriver.
Rsync?
Haven’t ran into too many issues with the library or guides conflicting. There something specific you are seeing? Also the project has a discord channel you could join and ask questions in. The channel is really active and the primary contributors are often in there. 
I wouldn't worry about it. The .NET Framework runtime isn't going anywhere soon. Heck, MS still patches MFC in the VC++ runtime and no one has used MFC since '96 (cough cough sorry something stuck in my throat).
I'll be honest, the more I work in this industry, the more I feel like software is overengineered for no good reason. I've sorta come to despise three layered architecture for this reason. This article is closer to how I prefer laying projects out now. I'm having to do a lot of refactoring and I'm just reducing these solutions to as few projects as possible, flatter folder structures and more sensible namespaces, flat abstractions if at all, composition rather than inheritance. Don't write abstractions around other abstractions, like 90% of the repository patterns I see are abstractions over Entity Framework, which is itself a superior repository/unit of work. Granted I'm doing a lot more backend than frontend, but the point still stands. Very lightweight message consumers, publishers, and APIs. Folders with everything relevant to a given feature. I'm a lot more concerned about how data moves though the entire business process rather than trying to desperately adhere to abstractions. And my code has started to look a lot cleaner and more comprehensible because of it.
If you send me the code i might be able to help
One of the maintainers here - absolutely, the Discord channel is the way to go. 
. Net core will take some time to catch on in the job market. It's not really practical for most companies to migrate to Core just yet, especially being new, you do the want to be an early adopter if you've got an established product. There's plenty of places using .net core already but they're likely just not hiring as many as the big established companies. Same thing happened when MVC came out and the majority were still on webforms, but 5 years time many of companies will have died or migrated and some of the new companies now will be big and hiring a bunch of devs
We have .Net Core apps in production. We would never bother to list .Net Core specifically in a job ad. You're reading this entirely wrong.
If I planned my career based on trends I saw on job boards I'd still be working the help desk downstairs because I would have tried to constantly change my skillset to meet a target that was never really there in the first place. Many job descriptions are either woefully out of date or copy/pasted from Indeed by HR. I'd say roughly 20-30% of job postings were actually written by people who knew what they were talking about within the last year.
First of all, you're comparing the job listings that list a language to the job listings that list a framework, and second of all you're expecting the people who write job listings to even have an idea what the difference between .net framework and .net core are lmao
That's unnecessary panic without any real context. 1. The city where the job search was done matters. Ex. How many .NET jobs do you really expect to find in Stubenville, OH vs in Seattle, WA? 2. Don't read into the posting too deeply -- you don't know who in the org posted it. You're assuming the recruiter or hiring manager specifically called out .NET Core. I've had a recruiter say this, word for word, "So you've programmed in C Pound?" They were referring to C# as C Pound... And there are *people code daily in C#* who **still don't know** the difference between .NET Framework, .NET Core and .NET Standard. Don't read into the posting too deeply. 3. .NET core is still a new product. Adoption will take time. Remember that the full .NET Framework came out more than **15 years ago**. 4. .NET Core is the future. MS is actively developing it at breakneck speed. Their entire strategy is pointed toward the cloud. .NET Core, Powershell Core (runs on Linux and Mac now), SQL Server Linux, etc. 5. MS will still support the .NET Framework because people will still use it. Look at the cmd.exe. That's been around since the 80s and MS *still* supports and is updating it in the next release. Why? Because people still use it.
The fact that this has to be explained is saddening
Exactly.
.net core has a huge advantage when building micro-services on AWS for example. It is unbelievably well supported by Amazon and runs on Linux which is cheaper than windows VMs. I was surprised to learn that AWS Lambdas had .net core 2.1 support in less than a month after release. That is some seriously quick move. Amazon must know something.
I imagine it varies a lot. I've been putting it off for years. But actually switching to Web has been great fun.
I can see it now... vast fields of folders with nothing other than story numbers for names. 
Seems the equivalent would be a dll for each feature 
&gt; Are mutable structs more performant to use? No, but neither are immutable structs more performant than mutable structs - at least not in mainline compiler/jit. Mono/unity may treat them differently and in more complex scenarios `initonly` might make difference (can't find scenario for it though), but if it did make significant difference I'm sure unity devs would take advantage of them. Readonly structs are still passed by value unless told otherwise: https://sharplab.io/#v2:EYLgHgbALANALiAhgZwLYB8ACAGABJgRgG4BYAKHMwGZdk4AnAVwGM5cBZRuRYAGwFMAygxZxyAb3K5p+GgEsAdm3b9UwfvWJSZ1XIuWr19AEykyM2XqUdDGqmYC+5SjTpNWuAEr9EAEwD2CrwAnipqGsLuYmSS5jo09D4BQcFWBuGaZha6iX6BIWk2Gaba0jlJ+an6RUb25E4UZOV5KbQiHt4tIZGiEqWWuckF1WFGWnFlCRWtI7YmWfG4g5WFo3aOzk00hBD4xrgAwrixFgAO9HIAbohw/PgEuyNcPAIHiLy8ABSc3HxC7WxEPQAOYASmO/WyAHZcEDgQA6NbzfoNM4Xa63e6PaydIahOZvD6fXGVJE9Dxw8EnGQASEwMLhiLmJQmuFRMnOVxudx2hRJKUJX353QBsJBVP6dIZIKZxQW0nZ0n6ul5mCgHE+EtZFmu9FwqC4uAAvLgFPwAO4cZ5/clwTXyiy4XVLfyoY2mi1eaYhMkA+2QmTO+j+d1my3C4K2/3amQB6Q/F78QWfA1wUEOiwRpHJ4OodNxr1dYI5/z51kNBxAA= To pass them by reference, no matter whether mutable or immutable you must use `in` or `ref`: https://sharplab.io/#v2:EYLgHgbALANALiAhgZwLYB8ACAGABJgRgG4BYAKHMwGZdk4AnAVwGM5cBZRuRYAGwFMAygxZxyAb3K5p+GgEsAdm3b9UwfvWJSZ1XIuWr19AEykyM2XqUdDGqmYC+5SjTpNWuAEr9EAEwD2CrwAnipqGsLuYmSS5jo09D4BQcFWBuGaZha6iX6BIWk2Gaba0jlJ+an6RUb25E4UZOV5KbQiHt4tIZGiEqWWuckF1WFGWnFlCRWtI7YmWfG4g5WFo3aOzk00hBD4xrgAwrixFgAO9HIAbohw/PgEuyNcPAIHiLy8ABSKHM98Qu02Ih6ABzACUx362QA7LhgSCAHRreb9BpnC7XW73R7WTpDUJzN4fb4KLzTELInoeeEQk4yACQmFh8KRcxKE1waJk5yuNzuO0KeMqRK+PyFKSpQNBtP6jOZoNZxQW0i50n6ugFmCgHE+Mo5Fmu9FwqC4uAAvLgFPwAO6/bj/SW65UWXCGpb+VDmy02sldAkZR1g50G4Hur1W23i7qAp1QmRx6Sce2vd5fE1wIMJ3345Eiz70D2Z/UyKPBPMFosWBoOIA= People discourage use of mutable structs because you often get results you don't expect (unless you are a c# wizard in which case you use the tool you need) - I'd recommend reading https://blogs.msdn.microsoft.com/ericlippert/2008/05/14/mutating-readonly-structs/ .
Fun fact: `bool` takes four bytes for local variables. And in structs it might cause additional padding.
Console rpg is always good. Teaches you project structure and oo stuff. But find something that will actually be helpful to you. Like a program that takes a folder of mp3 files and rearranges them to some structure e.g. artist\album folders. Then let the user specify the structure using macros e.g. [artist]\[year]\[album] etc. Was a good learning experience for me. Or create a text file searcher. Then add other formats.
Ah ok, Could I also ask what could be wrong with the jQuerry AJax post code that I provided, when I try the post method with Postman I get a status 200 ok. But when I try it with the actual frontend ajax post I get error. 
On serverless platforms, the .NET cold start time is the worst out of all languages currently, even Java does better. .NET Core 2.1 has tiered compilation, ReadyToRun/Crossgen and a lot of possible optimizations, but I don't think Lambda is suited for them yet. 
What error are you getting? I think I had this a few weeks ago and solved it by returning json rather than an empty bodied response.
Unity could just do that behind the scene with their ILCPP for all we know. This behavior is actually possible now with pure c# using the ref return on struct. My custom ecs framework actually rest entirely on this to remove unnecessary copy. Immutability is not a target. It has its use and can prevent some coding error but if you want performance (and I believe a game need some) you should probably try to embrace our mutable savior.
I fixed it now, Ye I believe that was the problem, I also made a class named Cars cars with all the inputs and made that as the input variable for the function public IHttpActionResult Post(Car car) ... Thanks for the help!
Throwaway example. I actually just lifted the meat of it from another page, I added the ienumerable stuff. 
Brackeyes is a YouTube channel that has everything you want I think, he has many tutorials for unity where he also explains c# from zero basically
Yeah I've seen his channel but he hasn't got many tutorials on C#, he has just like 15 videos. Are those enough to jump into Unity or should I start with something more detalied?
I think the best is trying to do easy stuff and learn while you do and google the things you don’t know how to do. It’s funnier than watching tutorials without doing anything.
We have hired two people to work with [ASP.NET](https://ASP.NET) Core 2.1 this year, but our job listing said we were looking for people with experience in 'ASP and VB'. I was irate when I found out about our job listing.
The article never suggests to put all your code in one project. It's just an introductory look at thinking about structuring your apps differently. The next step would be to look at building (a) microservices per features (as the article suggests) or (b) using something like Bob Martin's "clean architecture" pattern (which is actually exactly the pattern in the article - though never mentioned). But you are correct - thinking in this way tears down some assumptions (such as that developers should be siloed into a specific infrastructural layer). What if they were siloed into product/business features rather than technical features? You would get developers who would be more well rounded in their overall experience and who understand the business way better. So ultimately, it's a different way of running your business (if the concept is taken all the way through). This is what many of the large companies are finding work better - small product centric teams.
For large legacy .NET Framework enterprise system they usually took advantage of all the .NET Framework plumbing, including use of app domains, COM/Native interop, and they are usually pinned to dozens or hundreds of third party dependencies (e.g. UI libraries, database drivers, customer integration libraries, apis and sdks), many of which will never now be updated to .NET Core. Systems like that are often mired in bureaucratic decision making, and have development and support teams allocated to new features and new customers for years, meaning that they never take time to upgrade dependencies. Instead, when a product like that gets old and hard to maintain (or when sales lag), they usually sell off the company to a VC which will use the customer list with their other purchased companies to cross sell the customer list over the next number of years, while they wind down development on the main product and let the dev, support, and sales teams go.
That sounds like what I've been missing. Thanks.
^The linked tweet was tweeted by [@ExpectoIO](https://twitter.com/ExpectoIO) on Sep 25, 2018 12:33:32 UTC (2 Retweets | 7 Favorites) ------------------------------------------------- New for C\#: Statistically sound way of testing execution time is faster. Accurately resolves small differences. Can be used in all testing frameworks, just NuGet Expecto. \#csharp \#dotnet \#fsharp [Attached photo](https://pbs.twimg.com/media/Dn8KEJEW0AAcvlg.jpg:orig) | [imgur Mirror](https://i.imgur.com/xdDWvAk.jpg) ------------------------------------------------- ^^• Beep boop I'm a bot • Find out more about me at /r/tweettranscriberbot/ •
No problem glad you got it sorted.
OMFG!
It keeps on running the functions until one is proven to be faster (to 99.99% confidence using Welch t-test: [http://anthonylloyd.github.io/blog/2016/05/20/performance-testing](http://anthonylloyd.github.io/blog/2016/05/20/performance-testing)). This means you don't need to set any parameters and it will be very fast if the difference is obvious. It can take a long time if the difference is very small, but at least it's able to resolve it. It's very useful when you are making small performance tweaks to code. BenchmarkDotNet decides on the number of runs based on a target error or number of runs. It's not good at being able to work out if one thing is faster than another if they are close. You basically have to look at the number of standard deviations difference and guess or display the Welch statistic and keep rerunning changing the parameter until the statistic is good enough.
From a precursory view this looks more oriented towards azure and software deployment, design, and less about software development. 
You may have a gold star. Great explanation and I'll be investigating it as soon as I'm back at work (had surgery) :) 
Well, considering it's Microsoft I don't think anyone could be too surprised about that.
For many experienced devs today, that sort is what we need to "Learn". 
If this is homework, then I would have tried to help him fix his issue without too much changes. If this is work related, then I would have told him to completely refactor this logic because this is a really bad design and will not be maintainable on the long run. Why did you had to assume my intentions?
I recommend LearnOpenGL.Com The GL Namespace is a pretty direct wrapper of all the c graphics calls so most of the time, when you see glxyz in an opengl tutorial you usually just need to change it to GL.xyz for openTk. 
Ms has been releasing documentation and guidelines on general software development for ~25 years already.
Actually, I'm always curious what Unity is doing under the covers. I know they have some 'magic' methods &amp; some other things, which always makes me cautious about extending things.
I appreciate TUIs as much as anyone, but in most situations where one is appropriate it probably makes more sense to use PDCurses.
Thanks for the reply. It's a Microsoft SQL Server on prem and it lives on windows. This is where the service will be deployed. No containers no nothing... as simple as it gets. .Net Core sounds interesting.
Can you explain your reason for wanting to do this? Is it a readability thing? Bold fonts are actually harder to read than normal fonts. If it's a readability thing, you could consider zooming in instead. In the bottom right of any editor window in Visual Studio (2017 anyway, not sure about other versions) there is a control that lets you control the size of the text. It defaults to 100% but you could try setting it to 120% instead. Or 150% if 120 isn't big enough. It's a text box so you can enter any value you want, or pick from one of the pre-defined options.
&gt; message framing, keepalives etc. Does your microcontroller support a HTTP stack? It's not the best for storage/performance, but it worked for me when I wanted to read sensors using an 8bit Arduino. 
It's finally happening. It's **finally happening**.
I don't understand what the values of your returned dictionaries are supposed to be. Would it be better to return an `ISet&lt;string/PropertyInfo/MethodInfo&gt;`?
Well, it's really just a personal preference thing. I've also been asked this questions by other people. Personally for me though, it's much easier to read and write when it's all bold. It just feels more comfortable and cozy. Given that I spend a big chunk of time staring at VS, this is important for me. Of course it's may not be the same for other people. Zooming in works fine, but it does not look as good as when the fonts are bold. I just wish there was an easier way to do it, instead of going through 100 items 1 by 1 in order to achieve the bold font in the editor.
What is the advantage of this over defining common interfaces?
Why, yes. Yes it would. :)
When they don't implement the same interfaces, they are created dynamically, you want to check for like static or const members, etc.
I never even paid attention to that option. Time to inflict Comic Sans on all my coworkers who fail to lock their machine.
I Learned basic c# last year. What's changing, this year I will learn java but I would like to know the differences since I made a project in webforms. Net with backoffice c#
[BEAUTIFUL.](https://imgur.com/h9DPsKA)
The first way is a bad idea. `async/await` is a pit of failure, and you have to understand a lot to use it without hurting yourself. It's sort of a bad idea. Let's talk about it. Tasks represent a promise. They promise they will do a thing and give you a way to do other things when that thing finishes. You can synchronously figure out if a Task is done with its work, but more often you tell the Task "do this when you finish" via the `ContinueWith()` method. So the second example is very straightforward. It promises to start the work associated with a thing, then return a Task object. The caller might want to wait until it finishes, run some other things after, or whatever. It's free to do what it wants. The first example is sort of sneaky. `async` gets rewritten by the compiler when it is encountered. So it ends up getting rewritten to look something like this: public Task&lt;Customer&gt; GetCustomer() { var customer = null; var childTask = _db.GetCustomer(); return childTask.ContinueWith((c) =&gt; { customer = c; return customer; }; } So `async` really means "Wrap everything after the `await` in a task and return that task when the line is reached." In this case, since all you are doing is returning a value, you added a lot of overhead for no real reason. The caller still has to decide what to do when that returned task finishes. It's important to know that `await` captures the current context. That matters if you are on the UI thread. This is where you most frequently see `async/await`. If you are not on the UI thread or you don't care about the UI thread, you have to do extra work to avoid capturing the context. Especially in chains of `async/await`, it's possible to deadlock if you don't observe this. I do not like this aspect of the `async/await` functionality. If you were writing this code, and assuming you had a reason to wrap `GetCustomer()`, you would write it the second way. If the caller is in UI or some other place where they care about the context, the calling code would look like: async void WhenFetchCustomerIsClicked(...) { var customer = await GetCustomer(); UpdateUi(customer); } This is usually very bad. Because the Task API is a pit of failure, `async void` is very dangerous. If it's used improperly, your program can get confusing. But event handlers MUST be `void`, so C# had to relent and allow `async void`. So never, ever, ever write an `async void` method unless it's an event handler. This is another reason `async/await` makes the most sense at the UI layer of your app. That will get rewritten like this: void WhenFetchCustomerIsClicked(...) { var t = GetCustomer(); t.ContinueWith((c) =&gt; { UpdateUi(c); }, TaskScheduler.FromCurrentSynchronizationContext()); } See how the `ContinueWith()` uses a `TaskScheduler`? That tells the Task API you think you are on the UI thread, and you would like for that continuation to also run on the UI thread. For reasons, if you are any thread other than the UI thread, the synchronization context doesn't matter. So using `async/await` when you don't know for certain you are or will be on the UI thread introduces context captures that you don't want. This leads to it usually being a good idea to add `.ConfigureAwait(false)` to practically every Task you create. That tells the Task API you don't want to capture context for this task's continuations. I really don't like the Task API. I prefer using the Reactive Extensions for .NET when I need to coordinate asynchronous things these days. There are fewer pitfalls, and you don't have to remember as many gotchas. 
This is like searching for whether you know C# 5 jobs vs C# 6 jobs. makes no difference.
With regard to cmd.exe, it technically came to be as part of Windows NT in the early 90's, although it was backwards compatible with MSDOS's COMMAND.COM.
Hahahah
What you are describing is sort of like a concept I see people describe as "shapes". Dynamic languages like JS or Ruby operate like this. JS doesn't care much about if two objects have an inheritance hierarchy. It cares if they have the same properties of compatible types. (It honestly doesn't even care about that, but your code does.) So if I know a JS library wants an object that has a `name` and `salary` property, it's easy for me to make objects it can consume without defining a class. It's key to "duck typing", which was all the rage for a few years. C# does not have this notion, and trying to introduce it from a library perspective is going to introduce a lot of overhead. The `dynamic` type sort of allows you to get it via late binding, but overall there's not a good way to talk C# into treating two objects with similar interfaces as the same unless they actually have an inheritance/interface relationship. Anything you write is going to introduce overhead. You'd end up wanting to wrap the two types in something that then uses Reflection to invoke the appropriate property gets/sets or method calls. The code to decide if two types can even be "compatible" in this fashion is similar: you'd use Reflection to compare the two types. (Duck typing exists somewhat in .NET. For example, a type doesn't have to implement `IEnumerable` to be compatible with a `foreach` loop. The compiler will also accept a type that has a `GetEnumerator()` method that returns an `IEnumerator`. This was mostly done for backwards compatibility at the time, there's not a good reason why new code would lean on this instead of implementing `IEnumerable`.) So sure, it's possible. But in C# it is more idiomatic and definitely more performant to define an interface that describes the API you want and have types implement that instead. I don't think you shouldn't try it. You'll probably learn some things along the way! But I also don't think you should base production code on it.
So, its cross platform except for when it isn't?
.NET Core: * A subset of the libraries found in the full .NET Framework (this will improve over time) * Better performance, and slated to get even more performance enhancements * No access to COM, which limits its usefulness for interacting with other Windows applications (e.g. Word, Excel) and non-.NET libraries 
Today they demoed a Telerik control running on WPF on .NET Core 3.0. I guess you have no reason to not consider it now ;) 
Yup, it seems to definitely be the direction MSFT is moving. Did the folks giving the demo comment on how much they needed to change to do the port? 
You can see the demo for yourself at [this](https://www.microsoft.com/en-us/ignite) link (On demand -&gt; .NET overview and roadmap -&gt; Timestamp 46:50) They said that the control didn't require any changes itself. 
**Why** WinForms?! You had **one job**, to shoot this dead horse!!! 😂😂😂😂😂
WinForms is still being actively developed. The framework is "done" in the sense that we aren't going to see major new functionality, but it continues to get things like High DPI updates.
var input = Console.In.ReadLine()
Hmmm.. Lots more to learn have I.! 
Ah, thank you for the correction!
;
The .Core framework is cross platform, but not all libraries are required to be. Its up to the library developer whether they support all platforms or not. 
Ethernet
WinForms is still widely used and likely will be for years to come. They are moving it over to Core is all.
&gt;It's finally happening What exactly is happening?
Why move it to core if it's not going to be cross platform? I feel like that defeats the purpose.
Console.Readline apparently is an alias for Console.In.Readline. So yes, they would do the same thing.
Neat :D
To format code properly on Reddit: - Have an empty line between text and code. - Indent every line by 4 spaces.
I got mad one day about it and then I wrote static class (for our internal lib) full of B.S. like const string DateFormat = "something" and so on. Of course I'll forget I did that in few weeks...
.Net core 3.0. People are excited because it includes support for WPF and Winforms on windows. I'm not sure it is that big of a deal, but clearly some people here have been waiting.
Custom events and delegates. Every time I need them I google "dotnetperls events". Every. Time.
If I read it correctly, you can basically deploy the runtime with the app, so you don't have to force users to install the newest dotnet framework if you want to target it. Also, windows updates will not cause changes to your app if they release a new dotnet framework.
This isn't how `String.Format()` works. But you really made it hard for us to figure out. Pay attention to /u/AngularBeginner's post for tips on that note. Anyway, there are two ways to interpolate Strings in C#. The old, more flexible way involves `String.Format()`. When you use this method, your format destinations have to be numbers, starting at 0, must be sequential (though they can repeat), and you must provide one argument per format specifier. So you might: string message = string.Format("Hello, {0}, how are you today?", name); string connectionString = string.Format("SERVER={0};DATABASE={1};", server, database); The new, more convenient way is to use interpolated strings, `$""`. When you do this, the format specifiers can be 'any expression'. So you might: string message = $"Hello, {name}, how are you?"; string connectionString = $"SERVER={server};DATABASE={database}"; You cannot mix and match. If you try to use variable names instead of numbers with `String.Format()`, it will throw an exception because you broke its rules. Also: you should REALLY learn about database query parameters. Do NOT use `String.Format()` or string interpolation to build SQL queries. EVER. Why? Think about what hapens if I type this for my username: '; DROP TABLE wp_users; -- This is a "SQL Injection Attack" and it is the first thing attackers will try. In case it's not clear, it turns your query into: SELECT * FROM wp_users WHERE user_login=''; DROP TABLE wp_users; --' and ... When you use query parameters, the SQL library you are using escapes input strings so the above malicious string would end up looking for a user named "'; DROP TABLE wp_users; --", which is harmless. Even if this is just a homework assignment, you should use parameters. 
Me too. :) I'm much more versed with http than plain tcp, and tcp sockets I guess DO have keep alive but it's not quite the same as what I am used to. It's great for like web sockets because real-time, e.g. signalR, chat clients, and so on, but I'm not sure what your requirements are.
Honestly I never thought I would figure regex out until I found those. Theres such a huge difference between reading about functionality, and watching the highlights move in real time as you type. I actually started to understand/remember regex syntax once I started using those, and I'm actually half way decent at it now. I still break them out every time I have a tough problem though &amp;#x200B;
I think some people are thinking they're getting cross platform GUI.
The real purpose is that with these technologies in Core, it will be much more feasible to move over legacy code bases. Therefore they can now put .NET Framework on life support and invest only on Core going forward.
I feel really dumb for this, but I always use parenthesis for ANYTHING I have doubt about. Ill write math like &amp;#x200B; a = ((((B + C) + D) + E) + F) &amp;#x200B; &amp;#x200B; because every time it comes up I think to myself "Is today the day you want to learn that? No? Parenthesis it is. &amp;#x200B; Obviously with addition it doesn't matter, but the point remains.
Step 1 - Get UI running on core / Windows Step 2 - Identify what’s needed for xplat Step 3 - ??? Step 4 - Prifit from xplat ui
A lot of that work has been done for GDI/WinForms years ago. I'm not sure what WPF requires though, they haven't decided which parts they will open source..
At ignite they announced that .NET framework will not be "killed". It's basically an ultra-stable .NET Framework that is installed and updated on 2 billion PCs while .NET Core will remain something that the developer can ship their own version of. 
Behold my nest of gotos, mortal.
The same apps running on .NET Core run faster without the developer even doing anything to make it so. At the Ignite 2018 demo, they demoed an app that did a task (of iterating through a folder) - which came down to 0.36s in .NET Core down from 1.2s with .NET Framework. 
&gt; No access to COM On Windows, Core supports COM interop. That's how WPF and WinForms are working - any runtime that doesn't support it will fail to run these apps. 
I think some may think they're getting it right away, I think most sensible people who would be excited about this (such as myself) would think that we should get it down the line very shortly from another pipeline. [The Xamarin project has this blog post back from May that hints at this future](https://blog.xamarin.com/glimpse-future-xamarin-forms-3-0/). This announcement is just another piece of the puzzle.
I'd suggest System.Net.Sockets or DotNetty. System.Net.Sockets has a more documentation around it, but [DotNetty has some workable examples](https://github.com/Azure/DotNetty/issues/184). System.Net.Sockets will probably be easier to stand up, but DotNetty makes it easier to handle things like framing via the pipeline architecture.
Keyword is "reflection". 1. Get all types from an assembly 2. Get all fields from each type 3. Check if field is constant and has the attribute 4. Get value of field and perform your validation 
butwhy.jpg Putting attributes on a `const` seems weird to me, unless they're required for some really bad reflection voodoo. Maybe it's just my fears of how the compiler will inline the data... I'll also throw out there that attributes should only be used for *compile time* constant data. IOW, If I ever wanted to decide to also check the file for `"House 2"` I'd have to do a recompile, versus having a set of strings in some sort of collection of `stringsToLookup`. Also throwing out as a question to possibly help you better... Are you trying to check the CODE'S correctness? or Runtime input correctness?
https://github.com/dotnet/corefx/issues/8654 
Thanks
Might happen soon, won't expect it in the next 6 months though. https://github.com/dotnet/wcf/issues/2695 
I've dealt with the worst-case scenario of Exceptions as flow control. Exceptions as Flow Control, With Catch/Finally blocks that handle state depending on exceptions. DONT BE THAT GUY!
Alternatively, you could use CodeGen to generate a C# partial class and the JSON file from the same source.
I added the (Windows only) thing to the title to explicitly make it clear. The .NET blog post (first link in my post) and the [reddit discussion for it](https://www.reddit.com/r/csharp/comments/8hoi74/net_core_3_and_support_for_windows_desktop/) for it had a lot of confused comments as to why GDI+, DirectX and COM weren't implemented on macOS and Linux. Anyway - GDI+ has been ported to Linux by Mono years ago and it is still in active development (on GitHub) - if Microsoft introduces appropropriate package structure and open sources the relevant parts - WinForms (or a fork of it) on .NET Core on Linux might be a reality by next year. 
&gt; The first scenario is what happens when a method returns a Task. The process has been kicked off, you get to decide what to do with it, how to wait for it, how to handle errors, etc. As you no doubt guessed, the second scenario is what happens when the task is awaited prior to returning. There are scenarios when both behaviors may be desirable. That didn't really describe `async`, and the differences you described are barely there, if at all. When we `var hotPocketAsynd = hpSupplier.GetMeAHotPocketAsync(); Me.Eat(await hotPocketAsync);`, The error handling likely has not moved at ALL. If I'm for some ungodly reason sending the task INSTEAD, I may have the advantage of having the error handler inside my `Eat` Method, but... It just feels WRONG, unless you have a reason to be passing Tasks around like that. I suppose I have a LITTLE more choice on how to wait for it with a straight `Task`. At least some of that is by advantage of not having to work around every one of `async`'s pitfalls.
Stupid question since I've never done Unity... What if I'm passing the struct by `ref`?
There's an open source implementation of GDI+ .. maybe you can look into their implementation https://github.com/mono/libgdiplus/tree/master/src 
Mutable structs can be more performant. I'll admit that I am not one to say HOW. (WARNING: I've never written a game, much less in unity, and I've never used `Span&lt;T&gt;`) But an example of where Mutable structs MAY be useful to me would be where stat modifiers were shared between certain NPCs. I could have a Mutable struct (say, `Span&lt;int&gt;`) with my percentage modifiers shared across all NPCs, and because it's a mutable struct that reads shared memory, I just have to write to the main one.
Not a stupid question, and that's more to do with C# than Unity, but yes, passing a struct by ref or in will pass a reference of your struct down instead of copying the entire object. Accessing it will however be slowed down, as it has to be de-referenced, and one of the main reasons it has structs how they do is because it can align memory to make your data structure be in L1 (or L2) cache efficiently, so less cache misses. If you do references, who knows where that pointer got assigned. One of the main points of components is they are assigned an ID in order to get performance gains, passing by ref will remove said gains.
&gt; Classes are pointer-based and are used for asynchronous and parallel programming all the time; I would think immutable structs would be even harder to deal with during concurrent access since you can only lock on a version of the struct, not a single, unchanging reference. When you say 'lock on a version of the struct' you are correct, but the precise answer is that (at least last I knew) if you called `lock(myStruct)`, it's actually going to wind up being `lock((object)myStruct)` and thus will be locking against the newly created boxed object. IOW it's a worthless lock.
60 hours? Do you code MVC at home, or unreasonable managers?
Do you code MVC at home? Or just unreasonable managers?
&gt; winform apps using the traditional winform projects This is an alpha preview. There will be a public preview by the end of this year and it will be available for everybody in 2019. Designers for WinForms or WPF do not work yet with this preview. The preview currently uses new templates (using the new csproj format) that target .NET Core 3.0. Expect new templates for WinForms and WPF apps that target .NET Core 3.0 in VS whenever .NET Core 3.0 will be released. Existing WPF and WinForms templates that target .NET Framework will not change, but for new apps they should not be used (once .NET Core 3.0 is out). So in the future, the WPF template name *might* change to "WPF (.NET Framework)" and the new template *might* be named "WPF (.NET Core)" - that's upto MS and VS. &gt; Or do we make something like a Xamarin App, or an ASP.Net app which can run like a Windows forms app via a standalone exe? I have no idea what you are talking about. I also think you are misinformed about what Xamarin/ASP.NET are. 
Why can't you just serialize the JSON file to a C# object as use that instead of const? 
So according to this article. Should not the reply from the controller be `300`? Because from the service layer I am just returning the Task that I get from Repo. And only awaiting at Controller level. ``` private readonly IService _service; public ValuesController(IService service) { _service = service; } [HttpGet("{id}")] public async Task&lt;ActionResult&lt;int&gt;&gt; Get(int id) { try { return await _service.GetCount(); } catch (Exception ex) { return 300; } } ``` ``` public class Service : IService { private readonly IRespository _repo; public Service(IRespository repo) { _repo = repo; } public Task&lt;int&gt; GetCount() { try { return _repo.GetCount(); //will throw exception } catch (Exception ex) { return Task.FromResult(400); } } } ```
As other have alluded to, it sounds like you need to take a step back and consider the problem you're trying to solve. If you need string constants (set at compile time) to match fields from a JSON file that's available at run time, then you probably just want to read the JSON file in and use those fields in place of your const strings.
How well do you understand classes?
Not the best I’ve only been learning for about a few weeks now I’ve just been stuck on this program for a little while 
I do have some knowledge of classes though 
I'd recommend YouTube videos about classes, that's how I best learned them. The terms "class" and "object" make sense when you understand that all objects are part of a class, and a class could be looked at as a "classification". Easiest example I could give, mittens is an object that is part of the housecat class, which is a subclass of the cat class. Mittens alone is nothing more than a name for something, but with the class, it now has the personality (properties) and actions (methods) of a housecat, while also having the inherited personality and actions of a cat. So in your instance, you have an "O shape", the name of your object, which is part of the class "circle". Circle has the properties of circumference, radius, and diameter. Through this, it could also have methods for things like volume, surface area, etc, which simply return based on the assigned properties of said object. Assigning a circle could take an input for simply radius and automatically calculate the other properties, and then just be called upon as methods in code.
Thank you for your help! 
Not a problem my dude. Keep at it. I started my first programming job yesterday after spending 9 months in a training program. There's demand out there, and it's entirely worth the effort
That's May 2017, not May 2018. I also don't see any hints, and XAML Standard has been a flop show (nobody from MS wants to maintain it) 
They haven't announced it officially yet (and I don't see any hints of it), and I don't see a x-plat UI with WPF anytime soon. WinForms depends on GDI, which has been ported to x-plat by Mono. But for WPF, the support is currently tied to DirectX (as far as I understand) and another layer of abstraction will be required to switch to a cross platform graphics library. Heck, WPF is not even using Direct2D and updating it to use Direct2D would require even more man-hours (or months) of work. Avalonia on the other hand, is built from the ground up to be cross platform and support these platform abstractions. .NET Core is a ground up rewrite of .NET with platform abstractions inbuilt. MS didn't make existing .NET Framework apps work on .NET Core as-is. 
Startup life.
Classes have constructors, member variables and methods. The formula to calculate the volume of a sphere and the formula to calculate the volume both rely on the same single variable. Consider a constructor which takes this variable and stores it. Then consider the two methods you need to implement using this value.
Oh, we do it with VC++ redist even in .NET 4.x In giant enterprise environments, for desktop deployment, it's either waiting for vendor to "certify" their software for some runtime or waiting for IT to "certify" some new library/runtime. By the time things get into production, it is a usually out-of-date by tech standard. 
AFAIK version 4.8 will be the last one. They are calling the framework done but in a sense it is the same as saying it is dead. I mean technically something like webforms is not dead but how many new projects are built with it? If .NET core meets all your requirements when why would anyone choose the old framework. I agree that core is still rough around the edges but it seems like the future
Fair enough. What are you doing?
You must be thinking about pre-1.0 .net core.
nah no one does desktop anymore
Please don't! Something like really standard x-platform XAML and iOS and Android support would be nice. Big user numbers are on mobile. Porting entire UI to Linux just makes no sense. 
1. That is a constant, not a variable. 2. Constants don't exist after compilation anymore. Their value is just copied "in-place" to wherever it is used. That's why `public` constants in libraries are generally a bad idea. 3. You want a `readonly` field instead.
.NET Core is more than just "cross platform".
&gt; hich is why .NET Framework will get features **a lot more slowly** compared to .NET Core Until the point where it is so slow that it is nearly never. That is what "killed" means in this context. &gt; so I think it might go on to an infinite servicing cycle or something And this also means "killed" in this context.
&gt;multi-tier JIT compilation Really hoping this opens the door to bridging the gap with JVM.
&gt; that we should get it down the line very shortly from another pipeline. I doubt that **very** much.
WCF != WPF.
No one is actually saying it will be killed, what they mean is that it will no longer support major updates beyond fixes/optimizations. Microsoft is famous for long term support, even of VB6. No one is thinking they will kill .NET Framework unless they are seriously out of touch with what Microsoft does.
It was pushed as cross-platform until recently.
It is 147% faster with fortunes. Unbelievable.
No one said it was pushed "only" as cross platform, just that it was a major part of .net core.
"Welch's *t*\-test remains robust for skewed distributions and large sample sizes." see [https://en.wikipedia.org/wiki/Welch%27s\_t-test](https://en.wikipedia.org/wiki/Welch%27s_t-test). The high confidence level used put it into this category. There could be a long tail but it is more often down to erroneous results that should be filtered out. It is interesting and should be flagged and investigated though. I can imagine a process with some long tail locking issue. In practice it is robust enough to be run in unit testing reliably on multiple machines and configs.
Why not If(obj==null) ?
Well, 1. `obj is null` is a pattern check, so if the object is assigned, then it's null 2. `obj == null` is an equality check so there might've been an overloaded operator which handles nulls differently (that's what Unity does with fake nulls) 3. `ReferenceEquals(obj, null)` does what the name says, it just checks if the reference both objects point to are the same That being said, I wouldn't necessarily say there's a best one, it comes down to context and readability, so you should probably use `is null` or `== null` for readability. Since pattern matching has no good negative checks (yet), I personally would use `obj == null` and `obj != null` just to stay readable and consistent
Well, the first one probably won't compile as "null" isn't a type. so scratch that one away. &amp;#x200B; [https://stackoverflow.com/a/12465992/959013](https://stackoverflow.com/a/12465992/959013) There is a stack overflow answer here that argues that ReferenceEquals will never use an overloaded equality operator so might be technically safer? But very nearly everyone will use == or != over ReferenceEquals. 
This stands out: .Net Core App Bundler - precompiled, elimination of unused IL, single exe deployment. So is this the long promised AOT native compilation model?
if calling a method on myObject just use myObject?.DoStuffAsNotNull()
On one of the latest c# videos from MS they clearly told us that they prefer `is null.` 
&gt; IHttpActionResult hmm ok, but shouldn't response for a post be `created` or something alike? Also this didn't solve it, I mean it still returns status 200 OK but I believe I've done something wrong on the jQuerry code
Do you have any proof of that?
https://channel9.msdn.com/Blogs/Seth-Juarez/A-Preview-of-C-8-with-Mads-Torgersen I think it was there.
it's C# section... not JS :p
Good point :D 
What is multi tier jit compilation, and why would I want this? (I'm asking for a friend..)
It is basically a combination of 3 tools, I think: * [Microsoft.Packaging.Tools.Trimming](https://github.com/dotnet/standard/blob/master/Microsoft.Packaging.Tools.Trimming/docs/trimming.md ) * [IL Linker](https://github.com/dotnet/announcements/issues/30) * [CrossGen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) So it's like CoreRT but with a different "pipeline". 
http://mattwarren.org/2017/12/15/How-does-.NET-JIT-a-method-and-Tiered-Compilation/
.NET Core has 2 modes, FDD (Framework Dependent Deployment) and SCD (Self Contained Deployment). If you want minor bug fixes and want to share the runtime, use SCD. It will require the .NET Core runtime installed on the PC (~90MB setup) but your app sizes are reduced to a few KBs. If you don't want Windows Update or other apps to conflict with your runtime, use self-contained deployment. ~13MB or so minimum for a fully optimized hello world app (vs 5KB for FCD). You enjoy the benefits of SCD - * Faster startup time, because IL can be linked, and then the linked DLLs can be precompiled. * Isolated runtime (any form of DLL hell is not possible) * Better performance, because .NET Core release cycle is a lot faster than .NET Framework release cycle and you can choose to opt-in to these new (but not ultra-stable) features by SCD (or you can ask your user to install a new .NET Core runtime ;))
.NET Standard APIs will remain to evolve, but .NET Framework might not implement them. The latest Core APIs will be added to netstandard2.2. 
Entirety of .NET Core is cross platform. .NET Core consists of Corefx (mscorlib) and CoreCLR. It can invoke DirectX APIs running on Windows, but not on *nix. Similarly, it can invoke *nix APIs running on *nix, but not on Windows. It is still 100% cross platform. It's not .NET Core's fault that DirectX can't be implemented on *nix. Windows Forms and WPF are not a part of .NET Core *yet*. They have not decided which parts will go open source yet. 
Also to get the people using desktop to migrate to .NET Core to give a reason for desktop tool and library providers a reason to support .NET Core.
Did you read the entire article, think about how it works, and implement the parts that use a `SqlParameter` object? My crystal ball is dusty, so I cannot see the code on your screen. My guess is you skimmed the article, decided it was too long, read my post, checked your documentation, and decided all you had to do was update your SQL and it would work by magic. Programming *is* magic, and the code is your spell. You have to get it right. To use SQL parameters, first you have to change your SQL query. But then, you have to create `SQLParameter` objects so the spell knows how to replace the parameters. The tutorial shows you (mostly) how. If it's using `SqlParameter`, your library probably uses `MySqlParameter`. ADO .NET is a little clunky like that because we didn't realize how bad the API was in 2003.
At runtime the CLR needs to convert the bytecode to machine code. The more optimized this is, the slower the startup time of the program. Tiered compilation creates unoptimized compiled code to get you going then creates a much more optimized version later when it has time to do it in the background. With the JVM, it can even do runtime analysis to determine special optimizations for certain code pathways.
One of the biggest take away from this conference is the desktop app portion of .Net Core 3.0. Developers stuck in an old version of framework will be able to migrate to the newest 3.0 Core. Even WinForms will be supported in this migration. From the demo at Ignite, I witnessed the speaker use DevExpress within Core 3.0 so this will be exciting for all us stuck in legacy hell
I haven't used this in a while but doesn't '?' do the same thing? If(myobj?) 
I would look at HTML Agility Pack, it does great parsing, will fill void tags, fix malformed HTML and will emit XML valid HTML. Some of the things you are doing it doesn't do by default but could be added rather easily. Also HAP has an extremely fast HTML parsing engine.
Blazor started as client side. Server side was added later. 
Is this for university? I helped a friend recently with an identical assignment (except it was Java).
`is null` is preferred. See [this](http://sharkman.asuscomm.com/blog/is-null-versus-null-in-c/) blog post for the reasoning behind it. 
`is null` is recommended over ReferenceEquals() and it is just as readable as ` == null`. So TL;DR, use `is null`. 
`is null` is equivalent to `ReferenceEquals()`and is preferred over it because it is more readable and explicit. `== null` can be overloaded and it might not return the same result as ReferenceEquals and therefore not recommended over `is null`
Fair point! I can move over to this easy enough :)
Since you're dealing with a Sphere and not an Ellipsoid you only have to think about a single size variable so your methods can use very simple mathematical formulas. &amp;#x200B; class Sphere { public double Size { get; set; } public double Volume { get =&gt; GetVolume(); set =&gt; SetVolume(value); } public double Surface { get =&gt; GetSurface(); set =&gt; SetSurface(value); } } Start here and implement those functions.
Https is not new to 2.1, it was there in 2.0 to support kestrel without a proxy in front of it.
That is used to cancel an operation of the object is null. myObj?.do() Do will not be called it myObj is null.
Ahh ok 
there is nothing more readable about !(obj is null) compared to obj != null which in my opinion disqualifies obj is null by association
Do you want to playback on Windows, or macOS and Linux too? 
Preferably all of them, but I can only test and use Windows and Linux.
I would get a new font that is bold by design and then change the font used in VS. Or do you want to change the GUI font as well and not just text editor?
I will try your first suggestion. I don't really care for the GUI font, but maybe bolding intellisence would be nice, if possible at all. 
We all know that == is not the same as Reference Equals but you are making an assumption here that most code does NOT want the behavior to change if == is overloaded. In my opinion most code wants to change behavior in this case.
OP's post specifically uses ReferenceEquals. In this context, == is different behavior to what OP wants. Besides.. the existence of [CA1046](https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1046-do-not-overload-operator-equals-on-reference-types?view=vs-2017) means that MS does not want us to change the behavior *most* of the times anyway. 
Technically, the first. `if (myObject != null)` is probably Good Enough in the vast majority of situations, though, and may be more idiomatic (because `*x* is null` is relatively new syntax). You run the risk of somebody doing something boneheaded by overloading `!=` to return true on a null comparison, but I can't think of any place that has come up, in practice, except comparisons against `System.Nullable&lt;T&gt;`, where is still does the right thing.
Agreed about the OP post. On the other hand CA1046 means that Microsoft DOES want the behavior to change most of the time. Otherwise there would not be a guideline not to overload. We would be using ReferenceEquals all the time and there would be no need for this guideline.
And you just send them [here](https://news.ycombinator.com/item?id=11056434).
Most haven’t read Dijkstra, they’re unlikely to somebody else’s opinion of their opinion of Dijkstra’s opinion on goto.
Removed: Rule 3.
 It will return objects you would expect to be null, such as fields exposed to the editor, as being not null, as that's why they overrode it. It was later implemented to also include wrapper classes that were disposed of in C++, but the C# wrapper still remains, it would tell you it is null, as for all intensive purposes, it is. I don't see why that would ever be a problem, and how that would be confusing. If you look at the object, it tells you the underlying layers have been disposed.
https://blogs.unity3d.com/2014/05/16/custom-operator-should-we-keep-it/ Even Unity has publicly said that they would not overload == if they could redesign their API. 
Yes. But they did. So you should be using it. Or you are wrong.
Modern C# features like null conditional operators and null coalescing operators use ReferenceEquals. If I am wrong, then apparently nobody should use C#7 because these features don't respect `==` 
Or `null==obj` to avoid issues with overloaded equality operators.
I saw this bullet point, but I don't know what it means. The closest thing I've heard of is the linux tool that displays random sentences from fortune cookies.
&gt; so it might work in core? Mono != .NET Core. The sources indicate that it's a VS2010 solution so it's definitely incompatible (Core didn't even exist back then - it was FX4.0 era). The other project is compiled for .NETFX 4.6.1, which also makes it incompatible with Core.
You can use VLC forum.videolan.org/viewtopic.php?t=144807
I don't think there's an easy way to do this in a cross-platform way, but you could always try messing with PlaySound (pinvoke): [https://www.pinvoke.net/default.aspx/winmm.playsound](https://www.pinvoke.net/default.aspx/winmm.playsound) A (maybe) relevant example using WinForms: [https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/interop/how-to-use-platform-invoke-to-play-a-wave-file.md](https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/interop/how-to-use-platform-invoke-to-play-a-wave-file.md)