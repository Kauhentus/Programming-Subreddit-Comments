If you want to make games, make games. Make them on paper and play them with your friends, sketch stuff out. Use gaming engines that make life easier. Don't try to make everything from scratch. If you want to code, code. You can \*mainly\* ignore how c# actually works and just do unity. If that's the case, i reccommend you try out the unity tutorials or get your hands on a copy of [GameMaker](https://www.yoyogames.com/studio) or on [RPG Maker](http://www.rpgmakerweb.com/) 
so you're saying I don't need to learn C# to utilize unity?
I can't find anything in C#, but here is one that is developed in VB.NET. It would at least give you a starting point to reference. http://www.sourcecodester.com/visual-basic-net/hotel-reservation-system-vbnet.html
Someone's ability with a language doesn't bear any relationship to which compiler you use. If you actually mean what development environment, then VS is as good as any.
For D3 I just hit their web site. For SVG I use the Mozilla Developer Network (this should be a goto reference): https://developer.mozilla.org/en-US/docs/Web/SVG My current favorite books on javascript: * Eloquent Javascript * Javascript the Good Parts. * JQuery In Action 
is there a free version lol?
Visual Studio Express is free.
&gt;Visual Studio Express products provide a free development environment to develop applications for the latest platforms. Free. You can trial higher versions.
You need to sign up, but it's free to use.
Let me preface this by apologizing for being snarky. That doesn't help anybody reach mutual understanding on the Internet. Console apps are a special case from most contexts that async/await is used - the default behavior in this case is to re-enter on any thread from the thread pool. This is because Console apps have no special thread context that everybody shares. This solves the deadlocking problem as well so you can wait on an asynchronous activity to block your executable from exiting prematurely. I think your example in the MSDN documentation doesn't show what you think it does. This is modifying some TextBox UI element. All modifications to a UI element must be done on the UI thread, otherwise your program will crash. What happens here is that. 1. CallingMethodAsync is called from some event handler - somewhere on the UI thread. 2. CallingMethodAsync calls CalledMethodAsync, which then returns when hitting the Task.Delay 3. CallingMethodAsync completes - the call stack completely unwinds. 4. After Task.Delay has completed, the continuation of CalledMethodAsync is scheduled on the same thread (the UI Thread). Regardless of whether there's an await or not, the continuation will always be scheduled on the UI thread if it was originated from the UI thread in the context of a GUI application. For more information, check out this post. Skip down to the "Context" situation. http://blog.stephencleary.com/2012/02/async-and-await.html In ASP.NET and GUI apps you HAVE to generally re-enter on the same thread, or at least a thread that has the requisite context. In GUI apps that means you must re-enter on the UI thread if you make modifications to the UI. So the default behavior is to do just that. For ASP.NET, as I just learned, it actually can re-enter on any thread, but it has to be a request handling thread. There are generally 2 request handling threads per core if I understand correctly. For the Console, the same "context" is available from any thread, because there is no context. However, regardless of whether you include an await or not, the continuation will be scheduled to continue in whichever CONTEXT you initiate it from. This means exactly 1 thread for UI apps, a few threads for ASP.NET, and any thread for Console apps. Not awaiting doesn't automatically ensure the continuation of the function is scheduled on another thread. It still needs to grab the original context unless ConfigureAwait(false) is applied. The reason it is generally a bad idea to not await a Task is not because the continuation gets scheduled on another thread, but that you will not receive the result of it and your program's flow of execution is more complicated.
It's free. It won't allow you to install 3rd party software (extensions) in it and it is missing a few templates, but basically everything else is free. And the template thing really isn't much a problem with the internet there to help you figure out how to create a Windows service in VS etc. The only reason I convinced my boss to get me a paid for copy of VS is because I wanted to be able to use ReSharper.
Was going to post this. I use VS2013 on Win7 and Win8 and it works the same in both.
Thanks for the comment. Something I should have mentioned... Our current DB provider (Pervasive, not very popular) doesn't have a decent (or working) EF provider. Thankfully, mysql is in the near future. Your second point is where I've leaned towards before. To extend that thought, how many "other" methods before it becomes the wrong way to do it? I can think of about 5 different scenarios that would all have different joins and fields, for this entity alone. Not to mention the other entities that need to join to it.
You're overthinking the repository. It should only be handling your CRUD operations and mapping data onto objects. Build your Get/Add/Update/Remove around your most common case(s) and let your business logic layer handle associating the different chunks of data together for the edge cases.
I was bothered by the many IFs and the general code duplication. Adding or changing a discount is not easy and error prone. That's why I wanted to do it better and refactored it: [https://github.com/cBashTN/DiscountRefactoringDemo/blob/master/DiscountDemo/Program.cs](https://github.com/cBashTN/DiscountRefactoringDemo/blob/master/DiscountDemo/Program.cs ) My idea was to: - have code that is better readable - make a change f.i. adding a new discount very easy - DRY - avoid if statments Please ask if you have questions about it! And thanks for the fun refactoring task. :-)
http://en.wikiversity.org/wiki/Exam_98-361:_Software_Development_Fundamentals http://www.microsoftvirtualacademy.com/training-courses/software-development-fundamentals Those two may help.
But in my case, I DID know better, so it was idiocy. Just not thinking. I get your point though. 
My local library had this [book](http://smile.amazon.com/Introduction-Game-Design-Prototyping-Development/dp/0321933168/ref=sr_1_fkmr0_1?ie=UTF8&amp;qid=1412034129&amp;sr=8-1-fkmr0&amp;keywords=intro+to+game+design+and+development+unity+3d). I'm using it, its pretty good.
Even without ReSharper, intellisense is an absolutely amazing tool for exploring API's and unfamiliar code. That said, i also &lt;3 my R#
Of course, but you get that for free :). I use resharper for fast refactoring.
Oh really is that new? I could've sworn when i first tried VS intellisense want included.
You can't find ASP.NET hosting providers? http://www.microsoft.com/web/hosting/home
Use stored procedures. Learn how to retrieve the data using complicated queries. To me your problem is that you try to do all the querying from asp .net instead of using the dbms (mysql, mssql, etc). I have a simple example using the mvp architecture on my github i don't know if this can also help you a little bit; it's more focused in the web server side than the database side. https://github.com/mtzaldo/waTodo If you have a question let me know.
Most of the web is Linux. C#/.NET is the big exception. That said there are plenty great ones out there. Another poster linked to the Microsoft list, but I can recommend both appharbor and azure for hosting asp.net sites, and azure for everything.
Also, consider using Mono - it's quite good. We use it for our production servers.
Check out the CQRS (Command/Query Responsibility Segregation) pattern. The basic idea is that you use different objects and queries to read and display data than you do to change and write it. I recently used an approximation of it in a new project that required a highly normalized domain specific knowledge-based Sql Server database. I used the Dapper micro-ORM for mediating between database queries/commands and objects that represent the result rows/parameters to the commands. It allows you to embrace the impedance mismatch between databases and application without trying to abstract it away or hide it behind heavy ORMs and DSLs. SQL is the greatest DSL we have!
I think you really should take a step back and determine what features you really need. Do you really care if an entire row comes back when you need just one field? You may have many columns, but how many rows can you fit in a standard 4KB packet? You may find your concern is unnecessary. In the case of EF, it will cache those records as long as the context is alive anyway. Something else to consider is to use the ORM for crud and create some composite entities that are populated by custom repositories they have your custom queries. These should be read only entities. If they really need to be editable you should be returning the full object anyway. Don't be afraid to do dynamic SQL. By that I mean a static select/from strings and add in the columns for the where clause as needed. Cache those queries with a hash if you think it's too much overhead to regenerate them all the time. Be sure to use parameterized queries, you should always anyway, because if using SQL server you get plan caching on the SQL server side.
Thanks, I'll look into that! Do you have any resources on hand that you found particularly helpful?
The tables and joins are big enough that returning the entire row (sometimes over 200 fields) is a significant impact, especially for the "budget" database we're using (Pervasive PSQL -- as mentioned in another post, MySQL migration is in the works and hopefully expected by year's end).
MySQL? Any reason for not going to PostgreSQL?
I'm not sure I fully agree with this. SPs vs app-layer queries have been a debate for a while from my research, but most reputable sites I read agree that technology at this point in time is sufficient enough that app-layer queries are about just as fast. And if I moved these queries into stored procedures, now I have a whole other layer to manage with my queries, with less ability to reuse code.
Don't use async void methods, except for event handlers.
MVC is great for server side programming. Sites and services both work really well.
&gt; Create separate methods for different queries. This would be my recommendation as anything calling the methods does not need to know about how your data store is implemented. Then the data store could use either an micro-ORM, ORM, or raw SQL or any mix of them. In your case I would suggest a mix of SQL and a micro-ORM like Dapper or my favorite, PetaPoco. You can use base classes and some general utility classes and methods to reduce the amount of code duplication. Be very cautious of over-architecture, you'll only end up making your system harder to work with as you attempt to do it the "right way".
Next time consider posting to StackOverflow instead. Better format for question / answer
We are using mono to run the same code we run on Azure for remote servers in the field.
Unfortunately CQRS usually is talked about with Domain Driven Design and something called "EventSourcing" which is not useful for a lot of use cases, as they talk about storing all past events that led to the current state, so articles on strictly CQRS/DDD are hard to find. http://www.cqrs.nu/ seems to show a good bit of stuff. http://masak.org/carl/ddd-cqrs-wiki/faq is also pretty decent, but they talk a lot about event sourcing as well. EDIT: Also, you do not necessarily need to store all events in an event log to do event sourcing, as applications are inherently event driven, application actions can be considered events. It's a bit nebulous.
You have Azure and asp.net hosting providers.
Euh... SVG is not a bad idea, table (with css or otherwise) either, from there it's mostly graphic design, that's where you'll lose time. This is supposed to be manipulated with a mouse/touch, that's where you'll lose time, too. Probably a good idea to check out the offering of major component vendors, telerik to name but one.
Yeah, abstract classes, properties, list of class objects, object initializer, OrderBy from LINQ, null coalescing operator, ... that would freak me out as a beginner. See it as tools that you begin to learn. You might learn some of them later on and can see the usage in this program which features you know. - Naming: [In the .NET Design guideline](http://msdn.microsoft.com/en-us/library/vstudio/ms229042\(v=vs.110\).aspx) you see the naming standard. But as others say here: Don't piss of your professor. Naming IS important outside of the university. I use tools (Resharper, Stylecop,..) to ensure a convention. That's how you can maintain code and work in a team. - If you find time have a look at "Clean Code" from Robert Martin. - You can download my solution from github and see that there is a test project, too, which I needed to ensure that the correct discount was choosen.
Check out OpenCV and it's C# wrapper EmguCV. I've used EmguCV extensively for image processing, specifically chroma keying and it can be used with either video or static bitmaps. It's very, very powerful. http://opencv.org/ I've used ImageMagick quite a lot too but that's just for bitmaps. There's a .NET wrapper for that too: https://magick.codeplex.com/
MVC and AppHarbor/Azure are a perfect combination for this.
Everyone's mentioning ASP, but you didn't say Web server. You can utilize the System.Net and System.Web namespaces to do all kinds of server things, it doesn't have to just be ASP
That's basically it. It would (probably, depending on your overall architecture) be the same repository since they're closely related objects. It is not as fast and running one query to get everything, but if you create your request objects right and use sane logic when putting it all together the performance loss is usually negligible and since your logic will only be doing this for edge cases, it won't often be called. The overall gain is code clarity and centralization which makes the inevitable modifications easier in the future. Ex: At work we have a repository call that returns a set of orders (filtered on criteria in the request) and we have a repository call that returns a set of users. The business logic gets the set of orders then gets the IDs of the users that created those orders and uses them to pull a set of users, then associates them together. // business logic method public IEnumerable&lt;Order&gt; GetDetailedOrders( OrderRequest request ) { // [validate parameters here] // get the orders filtered based on the request var orders = _orderRepository.GetOrders( request ); var userIds = orders.Select( o =&gt; o.CreatorUserId ); // only get the users that have created orders in our result set var userRequest = new UserRequest { UserIds = userIds, IsActive = true }; var users = _userRepository.GetUsers( userRequest ); // associated the users and orders foreach(var order in orders) { order.CreatedBy = users.SingleOrDefault( u =&gt; u.UserId == order.CreatorUserId ); } return orders; } It's a little contrived since your repository can also do the association, but the example fits if you want to associate related inventory items, or sub-groups, or whatever you need. The important thing again is that your most common cases are handled by pretty much a straight shot -- let the repository build out your most commonly used data models in detail and then your business logic is pretty much only doing validation and/or logging, probably not much data manipulation. The edge cases, where only a few reports or views need the odd data detail, let any data addition/filtering that you need be handled by your business logic.
We see a lot more support for MySQL, more developer talent, etc. We're specifically looking at the MariaDB fork which has clustering solution.
Ah, okay. Thanks for the input. My case is actually day-to-day application functions rather than reporting, but I see what you're getting at with creating complex queries on the DP side.
Simple answer - yes!
Yeah ofcourse, search for visual studio express and get the desktop version :)
I don't see a link to the library. Please double check your post.
I forgot to put text inside the brackets so it was invisible thanks! ;)
The emulators for Phone 8.x use Hyper-V, which is only available in Windows 8+. Honestly? Just install Windows 8.1, put on Stardock's [ModernMix](http://www.stardock.com/products/modernmix/) and [Start8](http://www.stardock.com/products/start8/), and you're back to looking at a Windows 7 like UI.
1. How to google to know everything about c#. 2. How to use stackoverflow to know everything about c# 3. How to go to a library and look up c# books to know everything about c#. 4. How to go to a book store and look up c# books to know everything about c#. 5. How to browse reddit to learn everything about c# (this part I see you are learning). 
**What did you measure?** You say you have 6 queries there somewhere. Which one takes how much time, on your load? Measure. Use a profiler. Did I say "measure"? Well, do that.
Some ideas: * avoid it (rule 0 of optimization: cheat, do no work at all) * cache result (s) * optimize the DB for it
Ok, how do I do that?
the same way you called DoStuff(), just with some numbers for the parameters... int result = AddNumbers(1, 2); Console.WriteLine(result.ToString());
This program is going to start in the "Main" function, which is the one that looks like static void Main(string[] args) in your code. Inside Main, you have: DoStuff(); This statement says to call a function called DoStuff. You can tell it's a function call because of the parentheses on the end - DoStuff takes no arguments, so you don't have to pass anything. Your DoStuff function is doing: Console.WriteLine("I'm Confused :("); and then waiting on your input. If you wanted to call AddNumbers, you'd want something like int result = AddNumbers(1, 1); This would create a variable called "result" which would contain whatever the function AddNumbers returns. AddNumbers is taking two parameters (which is what int number1, int number2 is about) and adding them together. You'll see that it will only return the result of the addition if the total is greater than 10. Otherwise, it is going to return 0. So in this example, result = AddNumbers(1, 1) would set the "result" value to 0. You could print the value of result instead of the "I'm confused" message by adding a line in Main like: Console.WriteLine(result);
http://pastebin.com/2Ajxin48 This is what I have now, but now there is no program box
Okay you're doing something called recursion- a method that calls itself. In your example from you aren't performing any logic before calling it (on line 17) , so this program will break (i'm guessing it throws a stack overflow exception) after a few seconds. I get the impression you aren't understanding how to pass parameters into a console app. Before you get into any logic at all, play around with Console.WriteLine(); in *just* the Main() method - this may require some googling on your behalf. 
yeah, i did that... Hello world and all
See /u/cornsnack's comment - your AddNumbers function is calling itself. See how the first line of AddNumbers says: int result = AddNumbers(1,2); It shouldn't be doing that. The original line there was probably correct: int result = num1 + num2; You also put your Console.WriteLine and Console.ReadLine calls at the end of AddNumbers when they should be in Main. You cannot have any extra code in the same scope after a "return" statement. Delete the two lines at the end of AddNumbers and move them into Main. I'd also recommend you head over to /r/learnprogramming since the kinds of things you're trying to do are fundamental programming concepts, not anything C#-specific.
oh :( the tutorial i am reading is for C# so that's why i posted here
You're fine, I'm just letting you know there is an entire subreddit dedicated to teaching people how to program, which it seems like you could benefit from :).
i tried but no one seems to be home :( I got this far and the only problem is 0 never shows up: http://pastebin.com/qwvcLhAi
Like I said, those Console calls need to be in the Main() method, not AddNumbers. http://pastebin.com/FJMvN0hh
Can you still create windows store apps though?
ITT: People who assume server means "web server". Developing for a server is not much different from desktop programming. Most of the time server side stuff runs as a Windows service (or Daemon if your using Mono on your server).
You could use the null-coalescing operator: http://msdn.microsoft.com/en-GB/library/ms173224.aspx e.g. ADUserExtensionAttribute5 = lowerLdap.Properties["extensionAttribute5"].Value ?? "";
+1 to your school/college/uni whatever for using WPF! Damn that's cool.
But that is just syntactic sugar, compiles to the same code I believe.
It looks a whole lot cleaner though.
Do you have the opportunity to change the names of things? If so, I would suggest you put the ADUserExtensionAttributes into an array or list or something and then handle these assignments in a for loop, like this: for(int i = 5; i &lt;= 8; i++) { ADUserExtensionAttributes[i] = (lowerLdap.Properties["extensionAttribute" + i.ToString()].Value ?? "").ToString(); }
Wow, this is great advice. Thanks for that. I'm still having a tough time getting comfortable with lambdas. I think this'll help.
Im just really confused right now. A lot of the things I figured I would want to do with C# like compartmentalizing the site and having C# parse text files and update the content without having to search through all the code every time can already be done in Joomla, etc. I was about to spend the next month or two learning C# and bringing my CSS up to speed but now I'm seeing Joomla and these other CMS' and I don't see the point. All the animations and things I was learning to do with jQuery can be easily done in Joomla with no programming experience. Only problem is, I don't know a lick of PHP. Which I assume may come in handy, but I cant figure out why I'd need to know that either.
Apache. But nothing really.
It has a full debugger, although for the things I'm typically working on I generally don't utilize it (e.g. theme tweaks for an externally hosted Wordpress site).
you have to change the form class in your project to inherent from the metro form class not system.windows.forms.form
Also try /r/samplesize :)
I have a month-old baby at home. VERY.
You will have an incredibly hard time with unity if you don't know at least the basics of c# and OOP. I'd for sure start there because it's far easier than jumping into game development. Meanwhile you can learn unity. There are a ton of things to learn w/out ever even touching code. 
How are the game examples in that book? Have you made it that far?
agree with this guy here. You wouldn't be advancing to java.. you'd be using it because you were forced to. C++ aint so bad, but if you have a specific reason to use some library that is C++ only you can still do it in c#!!! 
I haven't had the time lately to work through it but from what I've read it is very in depth. 
Alternatively, initialize a collection with all the attribute names you want to check, then use LINQ or a foreach.
I'd recommend looking into nUnit for your testing framework and Moq for mocks. I read 'The Art of Unit Testing' by Roy Osherove as a starting point. Whilst overly verbose in later chapters, the early chapters are pure gold for learning unit testing. Moq can seem mind bending at first so it's important to understand lambda syntax and the basics of Funcs/Actions and to a limited extent expressions.
I will give you advice that helped me most when I researched the same question. Just start using one. In the beginning there is not that much difference and by the time you will be needing advanced features. Switch would not be hard. And Roy Osherove book is great. Also he has alot of presentations on youtube. 
ASP.NET vNext is favouring xUnit over MSTest and nUnit.
I find [JustMock](http://www.telerik.com/products/mocking.aspx) to be easy to get started with, I find the code is more intuitive and it comes with lots amount of examples.
There isn't a big difference between nUnit and MSTest. Each framework has slightly different features but basically does the same job in the same way. Moq will change the way you write code. Moq only works for abstractions which forces dependencies of the object/code under test to be interfaces or abstract classes. This makes the objects testable. Which in turn leads on to dependency injection. I'd recommend looking at unit testing and mocking in isolation before looking at dependency injection if you haven't encountered it before. It can be quite overwhelming learning it all at once. Trying to write tests without a dependency injection framework will make it more obvious the job that it's trying to solve. Focus initially at getting really good at writing small, self-contained, fast executing tests using Moq for isolating the code under test. A strict unit test shouldn't call any external code directly, it should be mocked. This (strictly) should include databases, web services and the file system. Taking a pragmatic view, the file system and databases can be unavoidable without jumping through some pretty big hoops. It's important to bend best practice to what makes sense. None of the dogma is set in stone. It's a bit of a rabbit hole, but if you dive deep and embrace it all it's a fantastic, eye-opening journey.
Totally unrelated, but I used to use Ninject too, but only until I discovered MEF. I really recommend it.
I like JustMock too but I have to use the Lite version because money. It's easy enough to build wrappers around static classes like ConfigurationManager.
I'll second JustMock - simply because the OP is already using Ninject, and JustMock is built on top of Ninject, so the OP will already be familiar with many of the concepts.
Could not agree more with this guy. This industry has changed so radically in the last decade its important to stay current on innovations like moq
No reason you can't have more than one. Your test coverage is an investment that will pay you dividends as the app ages
One thing to keep in mind is that Moq is fantastic, but it's not a cure-all and can lead to "over-objecting". It seems to me that, more often than not, instantiable objects are used for everything when mocking is introduced. I believe this more to be a team misunderstanding of the point of mocking, but it is something I notice. I've found that Mocking is essential to use in distilled areas, where all your data flows to and from. The rest can really just be mostly static methods. Taking a ["StackExchangian"](http://highscalability.com/blog/2014/7/21/stackoverflow-update-560m-pageviews-a-month-25-servers-and-i.html) approach to development, limiting interfaces and instantiable objects, and writing in a [functional](http://gamasutra.com/view/news/169296/Indepth_Functional_programming_in_C.php) style has lead to better programs for my workplace. I love Moq, but I like to hold off on using it unless dependency injection is actually the best approach.
I've just done this analysis for my own team. No time to read? Here's my breakdown: [Unit Test Framework Comparison](http://imgur.com/cWnDLQy) [Mocking Framework Comparison](http://imgur.com/WbCl32L) We decided on: MSTest because it's super simple to tie into MSBuild and is much better now (really) FakeItEasy for mocking because it's powerful and free. (and Roy Ohserove author of Art of Unit Testing gives it a [full-throated endorsement](http://osherove.com/blog/2012/6/27/the-future-of-isolation-frameworks-and-how-moq-isnt-it-for-n.html). If you can afford it TypeMock is the bomb. It allows for mocking/faking of statics and non-virtual methods, has super simple syntax, and was easiest for us to use in a proof of concept. Edit: Formatting.
Yes I did thank you
Just to add to the good suggestion of using Moq, I also use [Fluent Assertions](https://github.com/dennisdoomen/fluentassertions). Combined with Moq, these two libraries are handling _all_ of my assertion calls and it's great.
So to further complicate... What conventions/best practices are around returning less-than-complete objects? In this case you have order details. If I have GetOrderSummary, and still return a collection of Orders, I don't like that some of the linked objects won't be populated. Assuming no ORM for lazy loading, of course.
I accidentaly 4 GB of rar files is this bad?
So I had this Idea today and thought I'd check here what you folks think about it. I'm open to any suggestions/criticisms, etc. And before anyone asks: Yes, the name is a reference to my username. ^^A ^^partner ^^for ^^making ^^it ^^would ^^be ^^nice ^^too.
This is a very pragmatic approach that I strongly second and have been tending towards after experiencing instance bloat in the past. I've found that it should be applied with care however as every static reference creates a tightly coupled unit. As long as the unit is a single functional area and has a single responsibility this design strategy will lead to performant and testable code. If done improperly it would be a better strategy to move to automated system level testing. A unit test covering a large set of functionality will be difficult to write, even more difficult to maintain and slow to execute. Static references are the code equivalent of superglue. Some things work well stuck together. Some things really don't!
I raise you a 4 year old who has just started school, a 2 year old who screams all day, and a pregnant wife
I'd recommend using a separate assertion framework, like Shouldly or FluentAssertions. As far as test frameworks, I guess NUnit's broad adoption makes it worth recommending. It's easy to find examples and integrate with other tools. I'd prefer Xunit or MSpec, because I think they are conceptually better to work with, but NUnit might win being the path of least resistance. Stay away from MSTest, they're not even using it themselves. I like NSubstitute as a mocking framework. The fluent syntax for setup and verify makes your test code very clean and readable. FakeItEasy uses a similar syntax. Not crazy about the verbosity of Moq. Summary: NUnit, NSubstitute and Shouldly. Oh and you should really, really consider getting Resharper.
*The team that builds* ASP.NET vNext, is favouring xUnit. Just to clarify - I don't think it's some official Microsoft endorsement. Not that I wouldn't mind if they scrapped MSTest and moved on...
I've definitely been guilty of this in the past. I never used Moq for Dependency Injection however. That's probably going a bit too far and it's not what it's intended for. Using it to create a mock implementation of an abstraction for a given test case, or set of test cases can sometimes lead to a neat and elegant solution. The mock is defined alongside the test - you don't need to go hunting elsewhere. An additional benefit is that just enough is mocked for the tests to go green. The major downside is the often terse syntax. It's definitely true that Moq can be confusing unless readability is taken into careful consideration. When writing expressions using lambda syntax it's important to properly name the parameters. 'x' just doesn't cut it! You wouldn't call a local variable or function parameter 'x', so why a lambda parameter? Functions with a lot of arguments can also complicate setup statements. However, for value types and objects that have implemented equality It.Is&lt;&gt; or It.IsAny&lt;&gt; don't need to be used if all you need is basic equality. As with everything: cut through the dogma and do what feels right at the time. Make the solution to the problem of mocking your dependencies elegant, simple and above all readable. Moq isn't for everyone and shouldn't be used for everything, but it is a damn powerful tool.
With the NUnit adapter for Visual Studio, the integration is pretty good. We use ReSharper for our unit testing, which is of course fairly well integrated. But, a fair enough comparison. It looks like you got a pretty good analysis there.
What do you think the advantages are above alternatives like apache's thrift project https://thrift.apache.org/ I'm sure there are others but I've been looking for solutions like this. On the client side, often times you end up using tools like http://json2csharp.com/ with serialization libraries like jsonfx or protobufs. Orange you glad I didn't say bannana?
I hadn't heard of FakeItEasy before now. Just having a quick look at the docs the API looks far more friendly than Moq. I just might have to give this a try in my next project. It sounds like TypeMock has similar functionality to Visual Studio Fakes which I've used in the past to unit test a blob of tightly coupled code. It uses fakes and shims for the decoupling. Different terminology but doubtless the same principles. Trouble is that's only with Visual Studio Premium or above.
The mapping is passed all the way to the database. Your query will be the data that fills the DTO, no more.
Wut? You can attach stub items to EF, like this: var efEntity = new EFEntity { Id = dto.Id }; // attached as unmodified. context.Set&lt;EFEntity&gt;().Attach(efEntity); // changed data is changed AutoMapper.Mapper.Map(dto, efEntity); context.SaveChanges() For getting the dto out of EF you can't use mapper if you want to leave unneeded data out. context.Foobars.First().Select(e =&gt; new FoobarDTO { Id = e.Id, Foo = e.Foo ... }); 
Well, I don't know if it would have advantages over thrift... but it sure is easier to write it in one language imo (heck, you could even still extract the thrift style stuff with reflection...). You can share the data classes on the server and on the client (assuming they're both in C# ofc), so that's a plus. And writing a function to get the data with an http client is pretty much no work. json2csharp is ok, but it's not nice if you want to have all the names nicely formatted, private setters, documentation, etc. Then it's easier to just write it yourself, imo. I never heard of jsonfx or protobufs, I've only used Newtonsoft's JSON.NET
1 ex wife, 1 current Partner, 2 children, one 2 and the other 6 and no money. Also more work than I care to think about and a lot of traveling to clients.
Is TFS also acting as a continuous integration server, building and testing every time a commit happens? If you need a separate CI server, you will learn another reason why people hate MsTest - it was (maybe still is?) tied to having a Visual Studio license on the machine running it. Cruise Control/TeamCity got no beef with running MSBuild and running NUnit tests on them artifacts.
How is this different than ASP.NET WebApi? I mean, yes there's added complexity in WebApi, but that's because certain things like "I need to be able to run my API off a path other than the root of the webserver" are actually needed features.
Root refers to the root of the api, not necessarilly the root of the webserver. And it's different from ASP.NET WebApi, in that the paths would be automatically build from your classes, instead of you having to set the paths as strings and that you don't have to have methods for everything.
dang. you win.
I wasn't talking about article but your opening comment. Now that you pointed out that "going to db" part I'd like to see it in action as well. edit: the beef seems to be in: [EnableQuery] public IQueryable&lt;TDTO&gt; Get() { return _genericRepository.Project().To&lt;TDTO&gt;(); } But fuck me if I can find DBSet&lt;T&gt;.Project() anywhere.. And if the Mapper created Expression&lt;Func&lt;TEntity,TDTO&gt;&gt; is just right, then that's even plausible. 
why would you want to move on to java? c# is what the cool kids use. java is bloated and after visual studio, eclipse will make your eyes bleed. c++ is too low level for a lot of use cases and managing your own memory is a pain. i would stick with c# and learn a cool scripting language.
would you mind posting your solution?
General things about the "style"... The gotos are generally considered bad form. Some people consider them ok for bailing-out scenarios, when an error is detected to then goto the end of a function that does cleanup. But even then most people will just suggest never them use. Especially in a loop. This is the biggest thing. I've not actually seen a use of goto in an C# project I've worked on. I generally don't like exceptions for flow control, which is what doing those try catches around Comvert.ToInt16 feels like. Maybe make a IsNumeric(string) function, or use Int32.TryParse. The database class, has functions like "SearchCustomersByName", but it's strange to my eyes, because I'd expect it to return a result set. Instead it does console output. Maybe you can rename to OutputCustomersWithName. Or have it return a list, that is outputted outside the class. But this is a pedantic point. CreateCustomers could be called ReadInCustomers, or something. Local variables should be camelCase.
/u/Charlieg1, what sort of feedback are you looking for? There is a lot about this that would need to be changed to make it production ready code but it depends at what level the guys are studying. This code doesn't fit C# style and looks more like C, but that might be what they are teaching. /u/xutherogue1 has made some good comments and I would agree with no labels, not using exceptions for flow control, more functions/methods and not outputting directly to the console from the 'database'. Also I would suggest putting the code in multiple files if it isn't already (broken down by class). Also are they learning about LINQ or other .NET features?
I'm not sure if there's a free extension. I assume not because NCrunch is part of our standard developer setup at my company and assume it was chosen for specific reasons. I won't deny that it really helps to do it while you build it. Its a substantial amount of work that won't pay off until you have to make changes to the project.
Id stay it starts with proper Domain Driven Design. Your entites are basic container clases, your data access calls are wrapped in Repository classes (that have Interface definitions around them) and your business logic is driven in your Controller -&gt; Service layer. (Do I have that right?...) Interfacing out your repositories lets you create new repositories in your unit tests with Moq. this allows you during test setup to explicitly declare (and hard-code) ALL the data that the tests sees, from entity creation down to every single respository response. Then of course you can declare (hard code) all the expected data in your assertions. If you do that at the highest level (say, a controller call) then NCrunch gives you a whole whack of green dots all over your code. Anything bad happens and they go red. :) Sorry for whatever I just told you that you already knew.
Our UI layer is HTML5 / Javascript. We rely on Coded UI tests for its validation. There is also a tool for Javascript unit tests that is similar to Nunit and integrates with TFS. The Visual Studio / TFS integration tool is called Chutzpah and I think the tests are JUnit
I think you'll get better results with the coded ui tests. They make it so that your BAs only have to test the NEW stuff because the coded ui tests are handling all the regression. Presumably with your knockout stuff it had to have worked at some point. The only reason why it would have changed was cause of something ya did... Coded UIs should pick up that.
Raise. I told people I am in IT ONCE!!! The phone calls still come. /s
Hi /u/xutherogue1, I had no idea that the IsNumeric and Int32.TryParse functions existed. Now I do, thank you! So, if the string entered cannot be converted into an integer - how would I go back and ask the user to enter another number? I admit that I wasn't comfortable using goto and labels, but I wasn't entirely sure how to approach it so I kinda.. cheated I guess. What is a better (or generally) a good way to do flow control? Just a point in the right direction would be great. So instead of using: &gt; void SearchCustomersByName() I should use: &gt; List&lt;Customer&gt; SearchCustomersByName() I'll rename CreateCustomers to ReadInCustomers and I'll watch that camel case. I'm sorry. :( Thanks for all the great notes /u/xutherogue1
All the crap on that website crashed baconit :(
Hi /u/agua_moose, ANY sort of feedback! Anything that can help me improve and help them improve is great. By it feeling more like C and less like C#, is that because the program feels parallel and not OOP? What other functions and methods could I add? Just off the top of your head. (if you don't mind, sorry). I'll get on not outputting information to the console directly from the Database class. Thanks. As for the multiple files: It is in the project, it's just because I wanted to put the code into one script for Pastebin. They haven't learned anything from LINQ or .NET yet, I need to learn that as well. Any pointers, good tutorials or books? Thank you for all the help and useful comments, /u/agua_moose!
For input: uint count; do Console.WriteLine("Please enter the number of records."); while (!uint.TryParse(Console.ReadLine(), out count)); Finally a situation where a do-while loop can be used! O:
For the next time, please consider using gist.github.com. You can have multiple files in one, there's an edit history, commenting, and arguably the most important: No stupid ads that make it a pain on mobile :D
I think ReSharper is a great tool. All the developers I read about use it. I use Microsoft's [Productivity Power Tools 2013](http://visualstudiogallery.msdn.microsoft.com/d0d33361-18e2-46c0-8ff2-4adea1e34fef), an extension in Visual Studio, and it's amazing. It has most of the features described in this blog and it's free! I recommend you give it a try. Any tool that increases your productivity is worth it.
Aha, apologies /u/Banane9 I'll be sure to remember that next time. ;) edit: words
Bummer. These are more minor features imo though.
Considering how much time you spend in VS, it is worth spending money on tools that improve your productivity and NCrunch is most certainly worth the money. That being said, try http://continuoustests.com or https://codereflection.github.io/Giles/ for alternatives. 
Seems like it was too much work and not enough time for a minor feature. I would really like to see to see it in a feature release. Having to write less code is always a good thing.
Is it bad that I'm quite happy primary constructors won't be in the next release? I think that the "construction" scoping is really unintuitive. Traditional rules tell you that you can use arguments within the entire enclosed scope, but here they are limited to just constructors and class variable initialisation. It's a shame about declaration expressions, but at least it looks like C# 7 has some good stuff coming too.
I'm personally happy they were both removed. They both introduced scoping side-effects that would have made for some bizarre rules. Declaration Expressions would likely have required the allowance of local variable shadowing. There's over 100 mentions of the word "shadow" in the September 3 design discussion: https://roslyn.codeplex.com/discussions/565640
I would recommend running [StyleCop](https://stylecop.codeplex.com/) and [FxCop](http://www.microsoft.com/en-us/download/details.aspx?id=6544) on it, to see what it comes up with. Those are the best way to get "working" code to be idiomatic.
I'm disappointed in the declaration expressions. Sometimes I want to do a try parse to do a verification, but don't really care about the output. That would have saved a line of code so not a big impact I guess. The primary constructor thing seemed odd anyway.
It probably doesn't help that I'm running on two year old hardware ;). Good to hear that it works well on better machines. 
search, add, and delete.
octree perhaps?
oh yeah I forgot about those. Gonna go do some reading. Hopefully that will lead me on the right path. thanks
I use Structuremap, MsTest, RhinoMocks and have been very happy with that trio. This is covered in Pluralsight's n-tier development part 2 course.
Nothing stops you from making your own utility method wrapper that throws it away for you. public static bool CanParse(string input) { int throwAway; return Int32.TryParse(input, out throwAway); }
Well of course, but after a while it gets old having to add extension methods or drag an extension library into all my clients even if it this particular method is small.
You might want to try /r/compsci or /r/algorithms.
So, what replaces primary constructors?
Nothing, we continue constructing classes the way we always have.
Primary constructors are different. Take a peek at the example I provided at the top. There are parens on the class declaration and the variables within them become in scope for the rest of the class.
Ah, got it. It looked like a normal constructor to me at first.
I figured out the two y intercepts with simple math and subtracted them from each other, and if I was a negative number for the answer I multiplied it by negative one.
Something you should keep in mind: Exceptions should be exceptional. A faulty user input is by far something that can be expected. You need to handle that without exceptions, such as using the `TryParse` method.
There are plenty of examples in higher-level constructs. For example, if you modify the contents of a List while enumerating it, behavior is undefined. That's a property of the framework rather than the language, but at some point the line blurs. The reality is that C# devs *will* encounter undefined behavior; no property of a language can change that.
But in C# 6 you can add a Using &lt;StaticClass&gt; which allows you to write it only once, and use it as if it was a member of the class. So that can help somewhat.
For example given a trapezoid with the following points on the x-y grid: Point(0, 4), Point(4, 8), Point(0, 6), Point(2, 8). How did you your solution work on this problem?
The current behavior of modifying a list while enumerating is to throw an exception. It's been like that always, I think.
Prefer Int32.TryParse over Convert.ToInt16. If you really want Int16, use "short" instead of "int" in the variable declaration. Also, no need to set inputNumber to 0; that value will never be used and is not needed. Also, don't call Main from Main like that! That's rather horrible. Make a loop instead that stops when the input is correct (can use "break" to stop a loop from anywhere inside it). Also, don't use labels and goto! Write methods instead. The entire program is in a single method "Main" now; it should be split into several. Don't use goto!
You are mistaken. `Using &lt;StaticClass&gt;` just lets you drop the `Math.` part of `Math.Round(foo)`. There is a different Visual Basic feature that allows you to specify a list of using statements (called Import in VB) at the project level. That's why you never see `Imports System.Collections` in a VB file. 
That's what I meant. Bad wording.
Writing less code is a good thing but not always.
I'm glad they're cutting back on this, although I will potentially miss declaration expressions. Being both a C# and C++ programmer, and being terrified by the development of the new C++ standard always adding "MORE STUFF" to a language that already feels duct-taped in its organic growth, I *really* hope that this will not be the fate of C# as well. Right now, C# is an incredibly well-engineered language and some of the proposed new features would be great additions, but as the saying goes: You can always add things, but you can never remove them. Stepping back on the list of new features to take time to contemplate whether this is really the way to go is definitely a good thing. That said, I really hope that in C# development, removing language features will actually be possible due to the clearly defined distinct C# versions. Say, due to a new feature in C# 8.0, two others from C# 2.0 become obsolete and redundant: It would be great if they actually removed them in C# 8.0 while still supporting older C# versions in the same compiler to provide "explicit" backwards-compatibility. Languages should be able to evolve, not only grow.
Last time I checked, the top json serializers for C# were ServiceStack.Text https://servicestack.net/text and Jil https://github.com/kevin-montrose/Jil
Hmm, pretty sure I've seen [Json.NET](http://james.newtonking.com/json) be used in MS stuff too Alas, discussing json serializers isn't really the goal of this thread :P
I just got Essential C# 5.0 by Michaelis and Lippert. I'd say it's an incredible resource for a beginner (myself) and a very good language reference for anyone else. But I hear good things about C# In Depth by Jon Skeet as well.
It's different in that you don't need to specify the routing in attributes. I agree that it can be ambiguous, but assuming your logins can't start with a number, it's not. Also it was just so that the login property of the player wasn't redundant in the example :)
This is an _implementation detail_ of `List&lt;T&gt;` _specifically_. Most (perhaps all?) collections in the BCL implement the same or similar behaviour, but this is _not defined or required or implemented_ by the CLR. Nothing stops someone from implementing an `IEnumerable` (or more precisely, an `IEnumerator`) that does not check for collection changes. That said, if you really wanted to check this behaviour: var intList = new List&lt;int&gt;() { 1 }; foreach(var i in intList) intList.Add(2); EDIT: Just to further the point, if you were to use the same classes in a .NET compatible application but with a different language (VB, F#) the same behaviour would occur showing that it's not a _C#_ behaviour but an implementation detail. I do believe the `List&lt;T&gt;` behaviour _is defined_ in that it's documented, but the behaviour of an `IEnumerable` is not (it's an implementation detail of the class implementing `IEnumerable`.)
Damn son! You must hate having money and regular sleep patterns.
I know this sounds a bit like "science fiction" but I would like a "step execution engine" included with C#. Basically a way to execute code as a series of steps and have it fail on a step. Consider the following test case: 1. Step 1: Open the form 2. Step 2: Type your first name 3 Step 3 : Click the ok button Considering these are business logic cases, there is the potential for the step to fail. So for example opening the form might work, but when you try and type a value into the name text box, this might fail. In this case there is no need to continue with the remaining steps. There are tons of unit testing frameworks out there, and Microsoft also have their own which is decent too. So when it comes time to code just those basic 3 steps we end up with something like this try { var form = new myForm(); try { form.Open(); Assert.isTrue(form.IsOpen, "Form failed to open"); } catch { Assert.Fail("Technical error on step 1"); } try { form.Controls.FirstName.Value = "John Doe"; Assert.isTrue(form.Controls.FirstName.Value == "John Doe", "Could not enter name"); } catch { Assert.Fail("Technical error on step 2"); } try { form.Controls.OkButton.Click(); Assert.isFalse(form.IsOpen, "Form failed to close"); } catch { Assert.Fail("Technical error on step 3"); } } finally { form.close(); } As you can see, we've fallen into the trustworthy try / catch / finally scenario and nested ones too. This makes for robust code (example above is simplified) but it's not easy to read / write or maintain. But consider that the step number was manually provided. Meaning if the test definition is updated, then the code fail blocks descriptions need to be updated so they appear to be failing on the correct steps. Hence I really want a execute as step methodology included with C#. EDIT : also if you could teach me how to format code, I'll reformat this!
Thanks. I'll download them and have a go! 
Hi /u/cryo, I had to set inputNumber to 0 because otherwise MSVisual was arguing with me that it had no value and wouldn't let me debug. Okay, No calling main from main - Can I ask why? Not to be rude, I just like to understand how things work. I am working to split it into multiple methods as we speak, I'll post my revised version later and see if anyone has time to give me some more feedback. :) Thanks a lot!
To format code properly you need to add 4 spaces in front of each code line, and leave a blank line before and after the code.
C# In Depth is a great book by one of the most active developers in the C# community (check Jon Skeet's StackOverflow profile, the guy's like a wicked answering machine), however you may find it a bit overwhelming if you're not familiar with some basic-to-intermediate C# aspects (eg. LINQ, Anonymous Objects, Async/Await methods), since it really digs in the internals of the way the C# compiler works. "Essential C# 5.0" and "O'Reilly's C# 5.0 in a Nutshell", sometimes may be too verbal at some parts, but they cover pretty much everything that you'll encounter. If you feel that the book is going too slow, don't be afraid to skip stuff and speed the process up. Having worked previously with other languages like Java, Python, etc., you'll find yourself pretty comfortable with about 60-70% of the stuff you read. Of course nothing beats the benefits of what some real practice on the language will bring to you. [Pick a project](http://www.reddit.com/r/learnprogramming/comments/2a9ygh/1000_beginner_programming_projects_xpost/) and just open VS and begin structuring your application. Make mistakes, delete classes, test different databases, refactor names, find performance bottlenecks and tinker with the .NET framework and external libraries. No book will ever replace this experience.
I don't want any new features. We are already approaching a point where two capable and experienced C# developers can struggle to understand each other's code. Keep piling on the sugar and it will only get worse. I hope they will shift focus to hyper-optimizing the compilers and CLR. And more magic tools are always welcome.
Lambda syntax for the Tuple class. 
So basically some kind of DFA support for a business logic pipeline?
Switch statement fallthrough, please and thank you.
F*&amp;&amp;) Yeah!!
&gt;My personal one I'd like to see is type inference for return types: .... The return type would be inferred by whatever type the first return statement is. **Multiple return statements in the same method would of course have compatible return types.** No, just no.
This.
Great advice! I'm quite comfortable with Python but I think C# is kind of on a different level. It's much more demanding in its syntax and program structure. 
Something to support unit tests a bit nicer. So far tests have to work inside what's possible in C#'s type system and language (beit nested classes, method names without special characters or spaces, lambda expression usage to get references to members, use of attributes to mark test methods, validating event firing, organizing tests by method under test, distinguishing between overloaded methods, etc.) For a basic class: public class Foo { public Foo() { } public Foo(object someInput) { if (someInput == null) throw new ArgumentNullException("someInput"); } } For example, checking a constructor requires non-null inputs, this is what I have: namespace Reddit.CSharp.Foo_ { [TestClass] public class Constructor_someInput { [TestMethod] public void When_someInput_Is_Null__Throws_ArgumentNullException() { Object someInput = null; Action act = () =&gt; new Foo(someInput); act.ShouldThrow&lt;ArgumentNullException&gt;().And.ParamName.Should().Be("someInput"); } } } Few things of note here: The namespace doesn't match the folder structure; instead its has the name of the class under test. This (right now) is a workaround for my unit test runner (DotCover) to help me organize tests. Also notice the trailing underscore, this is to avoid conflicts in the test code between using the class under test and the namespace. Namespaces, in a testing context like this, really shouldn't have meaning. I have attributes on my class and method just to indicate what stuff I want to run. This might be a result, again, of the testing framework. They tend to have their own flavour of attribute. (FYI, I've tried several of them; I use MSTest purely for internal platform compatibility reasons but have no real beef with it. As you'll see, I use [Moq](https://github.com/Moq/moq4) and [FluentAssertions](https://github.com/dennisdoomen/fluentassertions) and don't really care about the unit test framework being used.) The class name `Constructor_someInput` denotes that I'm using the constructor overload with the `someInput` parameter name. The test name `When_someInput_Is_Null__Throws_ArgumentNullException` indicates that if a `null` reference is provided as the argument to `someInput`, the result should be a thrown `ArgumentNullException`. (Also note that I separate the inputs from the outputs by a double underscore) If I want to test multiple outcomes of a method, I have to duplicate my input names in my methods: [TestClass] public class ChangeValue_targetName_value : CostChangePropagator_TestBase { [TestMethod] public void When_targetName_Is_Not_Null_And_value_Is_GreaterThan_0__Updates_Value() { //some test } [TestMethod] public void When_targetName_Is_Not_Null_And_value_Is_GreaterThan_0__Raises_ValueChanged() { var foo = new Foo(); bool eventFired = false; foo.ValueChanged += () =&gt; eventFired = true; foo.ChangeValue("targetName", 1); eventFired.Should().BeTrue(); } } Here you can also see the bit of weirdness for validating an event fired. (I'll concede this might be a limitation of the unit testing framework; I do have to test under the Core-CLR where I do have some restrictions on what I can and cannot do.) I've tried rewriting this using nested classes so that the inputs are repeated using test initializers, but unfortunately the unit test runner doesn't support outputting the tests at this point using distinguishable names. (Again, perhaps more of an indication of limitations of the _test runner_, not C#) It'd also be nice if the compiler (or Visual Studio?) can emit warnings when tests no longer match classes. In that, if in the above example, I were to rename `someInput` to `input`, the test can detect that the local variable names I'm using and class method names I'm using no longer match the code under test. This to me is analogous to when your documentation/comments get out of sync from your code. And I could go on and on. This is just the start. I could probably write a blog web-series on this. Just a lot of little things piling up that makes writing, but more importantly _organizing_ the thousands of tests tedious. I don't know what the result should be, and this is almost certainly wishful thinking. But the C# designers did it before when they added [LINQ query syntax](http://msdn.microsoft.com/en-us/library/bb397676.aspx). It wasn't necessary, but it was useful. Perhaps they can add a new suite of keywords and organizational structures _purely_ for unit testing. It won't break existing unit testing frameworks, but perhaps such language features would _standardize_ and _simplify_ test structures in C#. As it stands now, there are just so many ways of doing it and _none of them are ideal_. I think fundamentally it's because C# wasn't designed to be a unit testing language. Maybe it isn't so much a change to the C# language as perhaps adding a new CLR compatible language? I don't know, enough rambling from me. :P
For your example, I would set up each step as Action&lt;&gt;, then add to a List&lt;Action&gt; and pass that list to a processor that executes each in sequence. Or Task&lt;&gt; might be better.
Why? You rarely need it and in cases where you need it you can easily achieve it with goto. It makes sense to have the behavior used less often have somewhat heavier syntax.
Due to the lack of unions in C#, this could be achived with using a struct struct Result { public string @String; public int? @Int; public object Stuff; } Result Foo() { // ..... } I do agree where I can't think of where this would actually be used, as the called would have to decide what to look for; making the calling code more difficult to read/maintain. 
Getting compile time references to type members without having to use reflection or Expression Trees at runtime: So right now, with reflection you might have PropertyInfo barProperty = typeof(Foo).GetProperty("Bar"); This sucks because there is no compile time safety. Rename/remove the "Bar" property and you're toast. Also sucks because it's evaluated at runtime and you need to put your own caching mechanism in place if you plan on running it often. Using Expression Trees you might have: PropertyInfo barProperty = SomeUtility&lt;Foo&gt;.GetProperty(f =&gt; f.Bar); This is a bit better since you have compile time safety sort of, but it's still pretty verbose and still evaluated at runtime. In this case, nothing stops you from botching your expression; perhaps `Bar` is a method or a field in which case this would likely throw some `InvalidTypeCast` exception at runtime or other equivalent failing behaviour. It might be nice if you had some syntax analogous to `typeof` to get at members: PropertyInfo barProperty = memberof(Foo.Bar); This could be checked at compile time that `Foo.Bar` is indeed a property. If it _must_ actually evaluate at runtime (for whatever CLR or corner case scenarios that need to be handled) it might have some intelligent caching (not unlike how the Dynamic Language Runtime does evaluation at runtime but has caching mechanisms) to optimize its speed for repeated calls.
Auto properties that implement `INotifyPropertyChanged`. I imagine this being done with an attribute like so: public class SomeViewModel : INotifyPropertyChaged { public event PropertyChangedEventHandler PropertyChanged; [Notify] public string SomeProperty { get; set; } //The way I do it now private string _anotherProperty; public string AnotherProperty { get { return _anotherProperty; } set { SetPropertyValue&lt;string&gt;(ref _anotherProperty, value, "AnotherProperty"); } } protected bool SetPropertyValue&lt;T&gt;(ref T privateVar, T value, string propertyName) { if(!EqualityComparer&lt;T&gt;.Default.Equals(privateVar, value)) { privateVare = value; if(PropertyChanged != null) PropertyChanged(this, new PropertyChangedEventArgs(propertyName)); return true; } return false; } } This would really cut out a lot of the needless bulk of view models.
I think you mean [Hiring] not [For Hire]
Like.... regular expressions? http://msdn.microsoft.com/en-us/library/hs600312(v=vs.110).aspx
No. Like [pattern matching](http://msdn.microsoft.com/en-us/library/dd547125.aspx) Syntactic support for Tuples would be nice too.
C# in a nutshell 5.0 is pretty good. 
any book by john sharp ? Are they good?
you get paid by number of sleepless nights you had :D
I completely agree that this would be awesome. I do think you'd be able to do this now with something like PostSharp. Have you looked into that?
goto !?
[Caliburn.Micro](http://caliburnmicro.com/) has something similar to what you're looking for. Just have your auto-prop then: NotifyOfPropertyChanged(() =&gt; autoProperty)
Each step usually translates to multiple lines of C# executable code, the "step" is essentially the entire try block. I'm looking for a way implement code like this : Steps { Step { } Success { } Failure { } } Cleanup {} However it would be possible to do a foreach (Step in Steps) using reflection. 
Exactly!
Call me lazy, but I wouldn't mind bringing over VB's WithEvents
That and discriminated unions combined would be very nice.
Yes. You didn't know C# could goto?
&gt; You didn't know C# could goto? I'm asking myself why _anyone_ would **need** to use goto these days. 
This is the sort of thing that should be done using an IL-rewriting attribute.
For switch statement fall-through? :) Also break/continue outer loop from an inner loop and a couple of others that would result in a worse code otherwise. And yes I do realize that you can do the loop thing with return more often than not but there are still cases where using goto results in cleaner code.
Oh, so you want to generate class code (either C# or IL-language) at runtime? EDIT: If so, which? Do you want to generate plain-text C# code that can be human-readable compiled later, or generate new types in raw IL to be loaded and executed at runtime?
First of all you want to install Visual Studio "14". Support for 2013 has been dropped. Then you best clone the Roslyn repository. There is a samples directory with plenty of samples inside. Then in 14 you create a new Roslyn project and start hacking. It's tough way, since there is not much documentation (yet), because Roslyn is still in development and went through heavy API changes.
Yeah I guess you never use break, continue, throw and return (except at the end of the method). I mean they are like a CD skipping :)
I would love to have something similar to F# option types in C#. Or a (!) not-null type to complement the (?) nullable. I know they said this would never happen, but I still want it. String! notNull; notNull = null; --compile-time error
&gt; I want to just spit out classes based on an input, mostly. Then you should also look at the project **RoslynDOM** from Kathleen. The Roslyn API is not really designed to *generate* code, so Kathleen wants to write a library that encapsulates Roslyn for code generation.
I would NOT recommend Head First C#. The book basically holds your hand as it walks you through exercises. It does have good information, I just personally dislike how it is presented. The labs/projects are fun, but the book doesn't really teach you how to approach one goal many ways. I can almost say I have learned more from stackoverflow and MSDN
That looks interesting but there's no way my employer is going to spring for a $500 per developer license. Their argument will be that we have a way to do this now so it's not worth the money just to save the developers some keystrokes. Don't bother telling me how dumb this attitude is, that's just the world I'm in right now.
Instead of running the program, Press the F10 button. This tells VS to start the debugger. Your program will load and you should see the first '{' highlighted in the Main() function. Pressing F10 again, will execute your program line by line. If the hightlighted line is on a function, press F11 (Step into), in order to step into that function. Hopefully this will help you understand how your program works.
This. Its way overdue.
The compiler doesn't seem to think so :P
Or use `public Tuple&lt;string, int&gt; Stuff() ...`?
Your boss's bonus/performance rating is related to how many dollars he avoids spending.
A cleanup of the old redundant non-generic collection classes designed for pre-.NET 2.0. In fact, clean up the entire framework to get rid of any old classes which have been superseded by their generic counterparts. The kludge code needed to go from lovely generic `IEnumerable&lt;&gt;` to `WhateverCollection` is frustrating. Oh, and switching on types without horrible ugly code.
If you need switch fall-through you're already using ugly code. I'd rather have prettier normal switch statements than prettier fall-throughs.
A switch statement that allows you to test expressions rather than having to write if..else if..else if
I'd like to see the ceremony of defining types everywhere cut down. The type-inference algorithm used in F# could be used here. For example, one of my "personal" utilities: public static bool HasAny&lt;T&gt; (this IEnumerable&lt;T&gt;target , Func&lt;T, bool&gt; predicate) where T : class { return target != null &amp;&amp; target.Any(predicate); } I mean holy shit, half of this thing is type definitions. That's needless ceremony.
Add ?? How about remove ;) var and goto would be on the top of my list.
Does it involve killing everyone in an organization who took your daughter? Because I know someone who has those particular set of skills. 
Seeing Nullable&lt;T&gt; opened up to anyone that wanted to use it and adding a bit more sugar would be nice. The compiler validating away more null checks so I don't have to bother with a .HasValue check in the cases where it's not possible would be even better-er.
The express license of PostSharp is for individuals not making commercial products so that's not an option. I will check out Fody though. Thanks for the heads up.
It's not really like that. We're a smallish company and the upper management just doesn't care to understand anything about what IT does. They're old guys that have been in our industry for decades and think the value of the company is centered on the sales people because they've got "contacts", without which, we wouldn't be able to sell anything, according to the highly paid sales people. They don't have any understanding that IT, our hardware, software and most importantly, our collective domain knowledge is the most valuable asset of this company. Mostly they see us as a giant expense that just keeps getting bigger. My boss is a good guy who at least somewhat understands why we want certain things. He just has a hard time convincing the people above him that they should give us more money without an immediately tangible and outwardly visible return on investment. This is hardly the only place I've worked with the same problems.
Don't forget, thanks to [CallerMemberName] attribute we can have nicer code too. private string _anotherProperty; public string AnotherProperty { get { return _anotherProperty; } set { SetPropertyValue&lt;string&gt;(ref _anotherProperty, value); } } protected bool SetPropertyValue&lt;T&gt;(ref T privateVar, T value, [CallerMemberName]string propertyName = null) { if (propertyName == null) throw new Exception("Someone compiled me with an out of date compiler, or did something even more irksome."); if(!EqualityComparer&lt;T&gt;.Default.Equals(privateVar, value)) { privateVare = value; if(PropertyChanged != null) PropertyChanged(this, new PropertyChangedEventArgs(propertyName)); return true; } return false; } Makes for less copy + paste errors, refactoring errors etc.
Something like this (*edited removed redundant code): class StepPrototype { class Result { public bool IsValid { get; private set; } public string Message { get; private set; } public Result(bool isValid, string message) { this.IsValid = IsValid; this.Message = message; } } class FormProxy { public void Open() { } public void Close() { } public string Name {get;set;} public bool IsOpen{get;set;} } private Result CreateResult(bool isValid, string message) { return new Result(isValid, message); } public void RunTest() { var form = new FormProxy(); var steps = new List&lt;Func&lt;Result&gt;&gt;(); steps.Add(() =&gt; { form.Open(); return CreateResult(form.IsOpen, "Form failed to open"); }); steps.Add(() =&gt; { form.Name = "John Doe"; return CreateResult(form.Name == "John Doe", "Could not enter name"); }); steps.Add(() =&gt; { form.Close(); return CreateResult(form.IsOpen == false, "Form failed to close"); }); int stepIndex = 1; foreach (var step in steps) { try { var result = step(); if (!result.IsValid) { Assert.Fail(result.Message); break; } stepIndex++; } catch { Assert.Fail("Technical error on step " + stepIndex); } } } }
I've started a series called [Learn Roslyn Now](http://joshvarty.wordpress.com/learn-roslyn-now/). It's still dealing solely with the Syntax and Workspace APIs, though. I'm going to move to Compilations and Semantics in the next few posts.
I believe that's how Python does it, not? They apparently have a feature called named tuples to help with this, it looks like (been a while since I did any Python)
If you're using C# 5 you can simplify this by private string _anotherProperty; public string AnotherProperty { get { return _anotherProperty; } set { SetPropertyValue&lt;string&gt;(ref _anotherProperty, value} } protected bool SetPropertyValue&lt;T&gt;(ref T privateVar, T value,[CallerMemberName] string propertyName = null) { if(!EqualityComparer&lt;T&gt;.Default.Equals(privateVar, value)) { privateVare = value; if(PropertyChanged != null) PropertyChanged(this, new PropertyChangedEventArgs(propertyName)); return true; } return false; }
If "capable and experienced" developers are struggling to understand current C#, what do you call a developer that can understand current C#?
That is true. Unfortunately a lot of the stuff I work on is stuck at .net 4.0 for a while.
What does that even mean?
You can have your var when you pry it from my cold dead hands.
Avoid == to compare strings, prefer String.Equals
/u/TheAnimus beat you by 11 minutes :P I forgot about this because all of the projects that I work on where I'm worried about INotifyPropertyChanged are on .net 4.0 or earlier. All of our newer stuff is web based and I haven't had to worry about that interface anywhere in that stuff.
Teething moths is disgusting, dude.
I said we are approaching that point, not that we're there already. Fortunately it's still possible to learn the language and then be done learning the language for a while. An example of friction that comes to mind is when one developer prefers LINQ syntax and another prefers the extension methods. Mentally switching between "dialects" comes at a cognitive cost with little benefit that I can see. The new dictionary initializer syntax will have a similar effect (although I do think the new syntax is cleaner). The property initializer syntax makes me nauseous, and I really don't look forward to debugging code that makes heavy use of static usings. 
He's just saying there are many ways of doing the same thing, two different programmers could both write the same code two completely different ways, both being completely correct. For a simple example, object initializers vs constructors. There are explicit scenarios where one or the other are appropriate, but there are many cases where it comes down to personal preference. It might not be harder to read what the code is doing but it might make it harder to infer the author's intent.
Understanding the language and understanding code that someone wrote in an unfamiliar dialect of the language are two different things. Look at Perl and C++ for pathological cases where it can take almost as long to get comfortable with someone else's obscure coding style (or worse - lack of style) as it took to learn the language itself. One of C#'s strengths has been that it's relatively easy to dive into a project and be productive. Every new "feature" chips away at that meta-feature.
Why on earth would you want to remove `var` ?
Yes. How much do you pay?
IMHO C# is nowhere near C++ in terms of approachability for some new code base. And that's a good thing. And further, new language syntax can sometimes actually make comprehension better. Look at auto-properties for example.
Extension properties
&gt;Why on earth would you want to remove var ? It leads to lazy programming . The inferred type is not always obvious from the code, and over use can lead to readability and maintainability issues.
&gt; Multiple inheritance Seconded. 
Okay, howcome?
True, I shouldn't say *every* feature chips away. I love the way the language has evolved so far up to 5.0. 
It's a tradeoff to help minimize changes when refactoring and making code less verbose.
https://stackoverflow.com/questions/1659097/why-would-you-use-string-equals-over/19102585#19102585
This is why askreddit requires you to provide your own answer as a comment. Good topic, but terrible idea.
Thanks! 
&gt; Multiple inheritance. It'd need rules to deal with the [diamond inheritance problem](http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem), but yeah I'd be all for this with checks in place. Maybe assign precedence values by order of listing? So for `class BottomChild : Parent1, Parent2 {}`, Parent2 overwrites any collisions with Parent1 (or vice versa, y'know, whatever), and classes closer to the bottom overwrite classes closer to the top. So, for instance, if you had something like this... /--System.Object--\ / \ Ancestor1 Ancestor2 / \ / \ Middle1 Middle2 Middle3 Middle4 \ / \ / Parent1 Parent2 \ / \--BottomChild--/ And both Ancestors had a method `foo()` that was overridden in the Middle classes but not the Parent classes (don't ask me why), Middle2 and Middle4 win over Middle1 and Middle3, respectively, then Parent2 (via Middle4) wins over Parent1 (via Middle2) Or straight-up require that any collision be resolved in BottomChild. I'm all for multiple class inheritance; don't get me wrong. But I can't imagine it being included without some sort of collision detection or safety process. ____ Edit: formatting is *hard* when on a library computer that doesn't into RES
I agree entirely. Language features should not be added "just because we can". They should be added *only* if it makes the code easier to read. (And in some, rare cases, easier to write).
Can you explain?
OK I get it now. 
No one really knows, that's what's scary
This could be relevant: [Order Preservation in PLINQ](http://msdn.microsoft.com/en-us/library/dd460677%28v=vs.110%29.aspx)
Linqpad
Came here to say this. Along with tail call optimization. 
&gt; I'm glad they're cutting back on this, although I will potentially miss declaration expressions. Just because they have a tight schedule and won't be done in time. Both features are still scheduled for C#7.
&gt; goto never results in cleaner code. Can I cheat? It does when programming C! 😉
That was super helpful, thank you!
Pattern-matching and null-propagating operator
One word: marcros
Not good enough for breakpoints during debug. 
You cannot use lamda syntax when debugging in the VS immediate window. 
Similar to this: I'd like to be able to use linq syntax in attributes. E.g. [ForeignKey(p =&gt; p.FooId)] public virtual MyFoo Foo { get; set; } Edit: fuck it cannot get it to multi line on my tablet.
Maybe you're looking for something like this https://github.com/Fody/PropertyChanged
Yeah never understood why I couldn't do this. Have to use IConvertable and write a comment.
A simple one: A generic type "where" clause constraint for enum. where T : enum That's not too hard, right? Can I have that one, please? Thank you in advance. I will name my next app after you. 
Static variable in a method. VisualBasic does it. You should too, C# creators. Just copy their code or something. I won't tell.
 Fun fact: python named tuples just call `eval` on a string definition of class with the given names as fields (iirc, inheriting tuple)
Better type deduction in generics: class Foo&lt;T&lt;U&gt;&gt; would be nice instead of: class Foo&lt;T, U&gt; (Where T is always type T&lt;U&gt;) 
It's a solved problem. I think Python's MRO algorithm is good enough although it may be difficult to implement a solution to parents (or grandparents) with different constructor signatures.
You can't do that if you're switching on built-in types. My example is Xamarin - storing settings on Android uses methods like StoreInt, StoreString, etc. This needs me to switch on type.
My favorite class definition ever ^^/s public class NamedList&lt;TConfig, TArg&gt; : NamedBase&lt;TConfig, NamedList&lt;TConfig, TArg&gt;, TArg&gt; where TConfig : class { internal NamedList(CliParser&lt;TConfig&gt; parser, IValueStoreDefinition store) : base(parser, store) { Consumes = new Consumes&lt;TConfig, NamedBase&lt;TConfig, NamedList&lt;TConfig, TArg&gt;, TArg&gt;, TArg&gt;(this); } public Consumes&lt;TConfig, NamedBase&lt;TConfig, NamedList&lt;TConfig, TArg&gt;, TArg&gt;, TArg&gt; Consumes { get; private set; } }
The reason you don't make recursive calls in this fashion (main from main) here is that each time, you're adding another call to the stack. Recursion shouldn't be used unless you eventually expect that recursion to stop so that each call can be popped off the stack If you do this enough, you'll end up with a stack overflow. This wouldn't end up happening in something this small but it's a bad habit to get into.
const-correctness
Better generic type parameter constraints with the `where` keyword. Namely allowing `enum` and numeric types so we can use operators inside the method body. public static class EnumExtensions { public static bool HasFlag&lt;T&gt;( this T _enum, T flag ) where T : enum { return ( _enum &amp; flag ) == flag; } } It drives me absolutely batty that C# doesn't have this, every time I have need of something like this is always makes me miss C++'s templates. Additionally, allowing non-boolean types in conditionals like `if`, `while`, and ternary would be nice. var foo = null; var bar = 0; var baz = 1; if( foo ) //false ... if( bar ) //false ... if( baz ) //true ...
A very naive implementation: IEnumerable&lt;string&gt; GetIPAddresses( int g1from = 0, int g1to = 255, int g2from = 0, int g2to = 255, int g3from = 0, int g3to = 255, int g4from = 0, int g4to = 255) { for (int i1 = g1from; i1 &lt; g1to; ++i1) for (int i2 = g1from; i2 &lt; g2to; ++i2) for (int i3 = g1from; i3 &lt; g3to; ++i3) for (int i4 = g1from; i4 &lt; g4to; ++i4) { yield return string.Format("{0}.{1}.{2}.{3}", i1, i2, i3, i4); } }
Readonly automatic properties: public string Name { get; readonly set; } 
How would that be different from the {get; private set;} we have now ?
`private set;` could be changed at any time within it's declaring class. `readonly set;` would be immutable.
Do you think the immediate window will phase out in favour of using Roslyn REPL debugging? 
re: Multiple inheritance: Mixin/trait system with linearization would be good enough IMO. I wouldn't mind ['borrowing' Scala's solution](http://docs.scala-lang.org/tutorials/tour/traits.html).
How is this not implemented yet
Good god my eyes
There's little substitute for an "immediate" execution of a line of code. 
 public class Out&lt;T&gt; { public static For&lt;T&gt;() { return new Helper&lt;T&gt;(); } public class Helper&lt;T&gt; { public T V; } } Usage: Int32.TryParse(input, out Out.For&lt;int&gt;()); I wish I could make it smaller, but that's been my solution for discarded out arguments.
Personally I would start by forgetting this pattern ever existed: bool TryDoThing(onThing, out returnThing) Becomes: var success, val = Int32.TryParse("42"); Sign me up.
Good that you mention it, this would definitely be a good usecase for this.
Thank you very much for letting me know about this! I thought you couldn't do char arithmetic in c#? I've tried before but it wouldn't compile. I am very glad to know that it can be done this way. I think the way I had tried to do it before was something like what you can do in java. char c = 19; //tab
Only problem with that, it's slow.and yes, we had one case where replacing that with hard coded property names earned us 400ms, which was critical.
In this vein, I would love to be able to return anonymous types from private methods. It'd make writing helper methods a lot less obnoxious.
What about ??
You can use Enum as the generic type constraint, so you can be sure you'll get AN enum, just not necessarily the one you want...
Indeed 
Which part of that do you need help with? This is not a subreddit where you post a problem and someone writes all the code for you.
Thanks again. I really appreciate you being so helpful. Pretty much all of my experience is on my own, so I don't really get to see other people's code or other ways to do things. I can't think you enough; very much appreciated!
pattern matching ,better syntax for tuples ,semicolon operator ,some kind of convenient syntax for currying and partial application 
Sure, no problem. Im mostly self taught myself, many people are.
You were effectively going to get this with the primary constructor stuff in C# 6 [that they just announced would not be included](https://roslyn.codeplex.com/discussions/568820): public class Foo(string name) { public string Name { get; } = name; }
How about you just change the way you test? No one forces you name your methods like that. How about "HandlesNullInputsCorrectly" or something like that?
Sorry, I meant ?.
The compiler knows the dependencies so there's no need to tell it that again. I wrote a DependsOnAttribute class to handle this as things are currently.
This might be neat. You typically accomplish this now by inheriting the type you want, but then you have to redeclare all the constructors, which is very annoying and can make refactoring more painful (if you're inheriting your own code and you change it).
Hmm... Right, I guess that's true. Of course, there are corner cases to think about (conditional, cyclical notifications?), but that seems nice. And it would definitely cut down the boilerplate, that's for sure.
Fantastic explanation.
How about... Host a WCF service directly in the Windows service for purposes of communication. Make the Windows service responsible for the scheduled execution, as well as the on-demand execution. Your web app can then call the WCF service that's part of your Windows Service to persist the scheduling data (or trigger on-demand execution). This makes where/how the schedule itself is stored pretty irrelevant. You're reading/writing it through the WCF service endpoint and it might as well be persisted as a serialized object array that's loaded from disk when it starts. Hopefully the WCF part answers your question about how to get the data back, but there are still various techniques. For example, you could use a bidirectional binding or even a combination of async start call and polling calls for status/results polling.
What? There's no lambda or lambda syntax there at all. Anyway, how is that better than this? var t = Tuple.Create(1, "a"); It seems worse, since you have to (redundantly) specify the types of the tuple elements.
That's how I roll Edit: I mean really... how am I supposed to explain this?
Thank you! Good to know.
You could do that, but then types and autocomplete go out the window... Not to mention the overhead of using dynamic.
Then C# 7 isn't going to help you either. :p
Elaborate? 
Can't deny that. I don't have any actual numbers of the overhead of using dynamic though. Is it that severe? (haven't used dynamic outside of trying it out)
if I had to have IEnumerable&lt;Tuple&lt;int,IEnumerable&lt;Tuple&lt;int,string&gt;&gt;&gt;&gt; declarations all over my code I'd just never used generics or collections or LINQ...
iirc, Task.WaitAll returns a task, so chain a Wait call on that. Edit: Nevermind, thinking of whenall
The overhead isn't nearly bad enough that you need to worry about it in the face of, say, a database query or a web service call, but if you have it in a loop where you're doing hundreds or more iterations, you will want to measure the impact. Or, you know, in this case, just create a private class, which you'd have to do anyway to negate the other downsides. :P
*things to happen at x time of day...
Thanks. I'll give it a try tomorrow to see the results.
Why not just compose and wrap while implementing 2 interfaces?
Oh what in the hell! These are the 2 syntactical features I was most excited about, and even have a big ole block of unavoidable code with a comment of "clean this up when C# 6 comes out"! I am super disappointed now...
It is a relevant, sound guideline.
We use BDDfy which let's us easily do business driven design and tests. You can even use it to create basic user requirements and create a html page (auto created) to have the PM sign off on before you begin coding. I'd also recommend using NSubstitute for mocking as it is very easy and very powerful. Ncrunch is a must as well for bdd or tdd. 
When you're seen as part of the problem space it's time to get another job.
Ok is that what &gt;&gt; does? 
The solution you posted in your edit will give an incorrect result. Your `Select((t, i) =&gt;...` depends on the order of the sequence due to the index param. The earliest you could make your sequence order independent is right before the summation call. This gives: var result = _names .AsParallel() .OrderBy(a =&gt; a) .Select((t, i) =&gt; GetNameNumberValue(t) * (i + 1)) .AsUnordered() .Sum(); I left the call to `AsOrdered()` out due to the following excerpt in /u/FizixMan's link. &gt; Note that PLINQ preserves the ordering of a sequence produced by order-imposing operators for the rest of the query. In other words, operators such as OrderBy and ThenBy are treated as if they were followed by a call to AsOrdered. Hopefully this has helped and good luck in your Project Euler endeavors. 
http://imgur.com/Sy2Zlo6
Oh, but I'm just talking about simple return type variance here: Not generics in this instance. E.g.: http://stackoverflow.com/questions/25817771/workaround-for-lack-of-return-type-covariance-when-overriding-virtual-methods
It depends on your current experience. Are you learning to program from scratch or do you already know another language? Anyway, try Microsoft's Virtual Academy. It's completely free, and broken up into courses for all levels. I think there might also be some generic programming stuff. I recommend a site called Brackeys. They have a Youtube channel with great videos, and I think they currently have a C# basics series running. The guy that does the videos is much better than the average online tutorial person. Dotnet Perls is a great site for some of the simple stuff explained very clearly. Stack Overflow is a great place to go for answers to common questions or when you're stuck with something. You can make a very simple Unity project without too much programming knowledge. Just don't try to make Halo 5 as your fist project. Start with really simple things like getting a sprite to follow the mouse around. There is a good platform game tutorial on the Unity site that will help you build in Unity. You can do it without knowing any programming (you can just blindly copy in the code) to get started.
Ohh, I thought you meant `List&lt;List&lt;? extends SomeType&gt;&gt;` covariance. Now that'd be a feature that would be nice, if it can be done in IL/the CLR.
Was just about to write exactly this! 
If someone could actually do this, they'd command, conservatively, a few thousand to a couple 10s of thousands of dollars considering your demands and non-disclosure of the specifics at all.
I think you're potentially* doubling your threads. IIRC t.Start() would begin a task. When you hit await you're essentially telling it to pause execution until it completes BUT what a lot of people fail to realize is this isn't like traditional blocking call. It for non synchronous behavior like downloading a file in the background. When it hits the await it creates* a new thread to do work, puts the current method/frame on the stack and returns to the calling method to continue work. When asynchronous work is done, it pulls the method back and continues execution of that method. The calling method has already continued on though meaning your Task.WaitAll is fufilled. As people mentioned async and tasks are different systems for different purposes and should be mixed with great care. The asterisks are because this is a simplification, since the whole purpose of these are to let the thread pool manage the threads and it may create a thread or use an existing thread.
I'll never understand why folks are ever happy putting Javascript as concatenated strings in the server, sent to the client. It's a programming language, not a string variable. Stop gimping your programming.
Thanks, I wasn't sure how the .Select handled the looping. This is frustrating though, the parallel completed in 65ms, while the series completed in 17. That just ain't right haha.
&gt;That just ain't right haha. I could be talking out my ass here but could it be that the scale of workload isn't great enough to overcome the overhead of parallelization? 
That's my guess. I've seen examples where PLINQ was used on 100,000 items and it was anywhere from 4-10x faster than serial. I thought 5,000 would be enough, but I think the fact that the only parallel part is the sum, PLINQ loses. When I was putting .AsUnordered too soon, PLINQ finished in 3ms (the fastest time with the correct answer that I got was 13ms using parallel sort and a for loop for the processing). Thank you for your input. It's been a great learning experience for me.
For example I would first get rid of goto, outside of a switch statement (even then its dubious). This is ok: switch (myVal) { case 1: // code return foo(myVal); case 2: // code break; case 3: // code goto case 1; } This is not: if (myVal == 1) { goto Exit; } // code Exit: return foo(myVal);
Might want to try NSubstitute and BDDfy. BDDfy works with any testing framework but let's you write business driven tests 
Array covariance.
This reminds me of the original Managed C++ (before C++ CLI). There was a bug where the C++ bool type wasn't compatible. So, if you were wrapping a C++ class to pass to C#, you had to use the WIN32 TRUE/FALSE int defines instead. If you returned a C++ bool, it would always be true. Good times!
Compiler generated code doesn't need to be affected. 
So allow goto's for compiler generated code but not user code? Asking for problems.
You can also use goto to break out of a nested loop.
Okay, I'm going to skip the sarcasm because you're young, but this is kind of a silly question. C# is a programming language similar to Java with roots in C++. C# is used frequently in business settings because it has incredible support from Microsoft and plenty of tools to make programming easier (you won't need those unless you're doing it professionally). Like MS05 said, you can do anything with C# that you can do in any other language. It handles garbage collection on its own which is a really nice upgrade from c++, and you don't have to worry about such things as buffer overflows and other nonsense that some of it's predecessors saddled on you. However, that means that you also have requisite performance issues when you try to start programming games and such (but that's been slowly getting better and less relevant as computers get faster).
I haven't used `goto` in C#, but that seems like a valid usage of `goto`. OP's example of a valid use of `goto` in a `switch` makes no sense to me. if case 3 is meant to be part of case 1, why not: (ignore my lack of curly braces, lazy) switch(val): case 1: case 3: return foo(val); case 2: // code break; 
Personally I hate optional parameters.
Well, anything can. Just look at Microsoft's products: About everything they ship is written in c#. Most of the Xbox one; all of Xbox live; Most of windows ect.. A refinement to your question might be which applications are best suited for different programming languages? 
Really? I'm curious to know your logic. Life was hell for database work previous to nullable types.
There's no fall-through, so you can use goto to replicate it: switch (val): case foo: DoThisSomeOfTheTime(val); goto default; default: DoThisAllOfTheTime(); break;
You don't need .NET 4.5, just the C# 5 compiler. Create the CallerXxx attributes in the right namespaces and it'll work. (example [here](http://stackoverflow.com/a/13382257))
According to the [language feature status page](https://roslyn.codeplex.com/wikipage?title=Language%20Feature%20Status), C# 6 will include get-only properties that can be set in the constructor, even though primary constructors are dropped.
Does XAML count? No? How about the weird Add() duck-typing for [IEnumerable initializers](http://msdn.microsoft.com/en-us/library/bb384062.aspx#sectionToggle2)? Replace it with something a bit more orthogonal. But *DON'T* just add even [MORE](http://msdn.microsoft.com/en-us/magazine/dn683793.aspx) ways to initialize a datatype! 
Does that only apply to case-default fall-through? Or case-case fall-through too?
I never understood the aversion to just writing a simple AJAX request to handle validation. It just feels clunky sending JS to execute from the Code Behind. Then again, it's an old technology - model-based validation with MVC is the way to go here.
You can go to another case, not just default: `goto case 2;`
var except when absolutely necessary; replace it with the Java approach for generics: IDictionary&lt;IList&lt;string&gt;, ISet&lt;int&gt;&gt; someCrazyDict = new Dictionary&lt;&gt;(); That's valid Java code (except those types don't exist in Java).
Object. Because I'm an anarcistic bastard :P
Why you want me to write twice that I have a dictionary?
But they're **really** useful with immutable data structures!
Why would you like to remove Xaml? What alternative would you propose?
&gt; IDictionary&lt;IList&lt;string&gt;, ISet&lt;int&gt;&gt; That's just ceremony bordering on clutter to me. Never has my ability to understand code been hindered by the use of var. Honestly, I'd say it goes the other way - explicitly declaring the types for everything just makes it harder to read.
I don't know if this counts as adding a feature or removing one (guess it depends on your point of view), but I would like to see POCO classes be immutable. I really love how [Kotlin does it](http://kotlinlang.org/docs/reference/data-classes.html), and I'd like to see such a limitation imposed on classes without any explicit functionality. And this is a personal thing, but I'd like to see nullable booleans removed. I understand that they're a convenient way to represent a tristate (yes, no, undecided), but strictly speaking a mathematical boolean can't just have an "undecided" value. I think that the root cause is really the shoehorning of everything into a relational database, which calls for nulls for things like booleans at times, but I honestly think an enumeration serves the purpose here better. It allows you to be more expressive, anyways.
It's hard to split the difference between XAML's deficiencies versus the way WPF uses it, but a few of my annoyances with it include but are not limited to the following: ridiculous verbosity; noticeably long loading time for complex layouts and bindings (order of 100ms); wildly unpredictable behavior with complex bindings, especially ones that bind to other bindings; raising property changes usually must be done on the UI thread, even if the work hasn't been completed yet (like with ObservableCollection manipulations); if you poke the wrong property outside of the UI thread it explodes (which is fair) EVEN THOUGH it knows who its dispatcher is and could have just dispatched it for me (which is mean); all the crazy subtle differences between a TemplateBinding and a Binding of RelativeSource TemplatedParent; and then oh my gosh doesn't get me started on how interaction behavior and visual style are inorexably tied together between the Style/ControlTemplate relationship; implicit style/template/themes interfering with explicit style/template/themes; the different requirements for the different types of Triggers for different layers of the element/style/template cake; the WPF designers have no idea what the word "semantic" means; UserControls can contain Content, unless the content has x:Named elements (wtf); PropertyPath has different, incompatible but similar-looking syntaxes depending on who is asking; documentation describes XAML as declarative but that is a fool's lie and it is as procedural as the code it compiles into: if you define attributes in the wrong order, layouts can get tripped up and take longer to render; why is it so hard to procedurally create Binding objects in code; Visual Studio doesn't like XAML either and frequently gets confused (or hang or display stack traces) generating previews; and just ultimately it's surprising when it works, and it's surprising when it doesn't work. Ugh. But the worst part about it: I have no idea what alternative would be better. Maybe HTML with really fancy controls? I don't know. UI stuff sucks. EDIT: Oh yeah, and there are (at least) [11 different ways](http://msdn.microsoft.com/en-us/library/ms743230\(v=vs.110\).aspx#sectionToggle3) to get a value for some XAML element's property. No further comment necessary. 
Careful, "any other" also includes brainfuck, befunge, etc. ;)
It was just an example. As I said, you can goto another specific case as opposed to the default case.
Oh, I did not. Thank you for passing that along, I do feel a bit better now.
C# is a multi purpose programming language so as long as you give it a compatible runtime and a good set of libraries you can get it to do just about anything. Some examples are: 1. Windows desktop appications with WPF 2. Apps for Windows 8+, Windows Phone, and the XBox One with WinRT 3. Web apps with ASP.NET MVC, WebForms, and others 4. RESTful HTTP services with Web API 5. "Real time" web apps with SignalR 6. Cross platform (desktop, mobile, and console) 3D games with Unity3D and MonoGame 7. Cross platform desktop and mobile apps with Xamarin and Mono 8. Electronic devices with Netduino 10. You can control toys like the Lego Mindstorms C# is not very good, however, for programs that require direct access to the hardware like operating systems and drivers.
Yea, just saying it's a bad example :P
\*gives you a blanket and chicken soup\* There, there, you'll feel better soon. Edit: Feel not be
What's wrong with it? I'm genuinley curious. I haven't used C# in a while and I can understand disdain for contravariance, but covariance seems useful to me.
what can you acchieve in brainfuck but not in C#?
Yeah I realise goto's are used everywhere in compiled code. I just think they encourage bad programming practices usually in uncompiled code, and make it harder to read.
Consider the following two isolated snippets of code: Car[] volvoDealership = new Volvo[10]; void Park(Car[] parkingLot, Toyota car) { // assume parkingLot is non-null, non-empty parkingLot[0] = car; } What does the first do? What does the second do? Would any reasonable person (a non-expert in C#) ever expect the second to fail? What if I changed the type of the second parameter to this: void Park(Car[] parkingLot, Car car) { parkingLot[0] = car; } Would any reasonable person expect *that* to fail?
Fucking up someone's brain in just a few symbols?
That's all good and well when you're doing greenfield development but would increase the cost to upgrade preexisting code. That would make it a bad business decision for Microsoft and companies that have longer application life cycles.
so in the first example, you would expect it to work as such: Car[] volvoDealership = new Volvo[10]; void Park(Car[] parkingLot, Toyota car) { // assume parkingLot is non-null, non-empty parkingLot[0] = (Car)car; } My question is, does the compiler do the work of boxing it with covariance? or is that delayed to when it's popped out of the array and used at a later time? 
Yeah, the streams are library design problems not language problems, but the streams need a pretty big refactoring. Mainly, they need to split readable, writeable, and seekable streams into interfaces instead of one common base class that is possible all or none of those.
Do you hate method overloading, too?
&gt;For example I would first get rid of goto, outside of a switch statement (even then its dubious). Anyone who says GOTO is evil has likely never given much thought to programming and just regurgitates what they read / what their professors yelled at them. There are dozens of language constructs with more danger than GOTO statements. For one, operator overloading.
I like reading the developer's intention: It says "I'm using the dictionary interface: I explicitly need this interface. The implementation I've chosen is a Dictionary". Call me pedantic or obsessive; that's fair. But it's my reasoning.
I can post the code upon request
Actually, method calls are call statements, not goto. There is a difference in MSIL and ASM. Call statements are returnable (via ret), jumps are not. Minor point and I understand that internally in the processor call is roughly just a push + jmp and ret is just a pop + jmp, but I figured I'd point it out.
That's not what I'm getting at. The default for a POCO class is mutability, and I don't think that's the way to go. For a POCO class, mutability should be explicitly specified, not the other way around. And yes, having nullable types is for dealing with data - but it's often used to represent a tristate, because the lack of having a value could still be meaningful. I feel that (a) having any kind of boolean lack a value is a bad implementation, and (b) using the nullity of a nullable to represent value is bad. I think the best course of action here is to remove the ability for a boolean to be null.
What parameters does the 2nd function have? If you can change the function then just add a parameter - public class Foo { public void Bar() { var arr= GetArray(); DoStuff(arr); } public int[] GetArray(){ return new int[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; } public void DoStuff(int[] values){ //do stuff! } }
You know, that's a good point. Honestly, I don't really like ability to make any value types nullable. That stems from what I feel is a poor representation of data in the first place (making *everything* fit into a relational schema).
It's unclear what you have a problem with, look into loops to iterate over the values and invoke the function per iteration or invoke the function once passing the reference to the array. Considering this is something pretty fundamental I doubt your code will be of any use
Just pass the array itself.
so which part would do that? sorry I am very new to this.
how do?
It will be to my grade. It's for a class.
Like I said before (and I believe you also said it in your original post) a nullable boolean should not be used for a tristate value. Anyone who is using it that way doesn't understand the point of a nullable type. How would we represent the *lack* of a value if nullable booleans were removed? Regardless of how some people might be tempted to misuse it, I still find the need to represent missing or uninitialized values. I feel like I'm still not understanding the value of immutable POCO classes. I assume you're talking specifically about container classes like entity/domain classes? Why is this such a big deal and what am I missing?
Like chemass illustrated. Slightly simplified version: int[] myArray = new int[] {1, 2, 3, 4, 5}; DoStuff(myArray) And function DoStuff looks like: public void DoStuff(int[] passedArray) { // Do stuff with passedArray here } 
It's useful for consuming APIs too.
Hey!! That's cheating!! :-p
Muahaha!
Thanks, you gave me a good laugh. 
Async await.
I agree with you that using var for everything is a bit lazy, but it is extremely useful at times when you have anonymous classes that don't have an explicit type. It's also much easier to write var and then have proper documentation instead of having a mess of typing on your variables. var someObject = new { prop1 = "asdf", prop2 = 3, prop3 = new List&lt;int&gt;() }; You can't explicitly assign a type for that, the compiler has to create a class to contain the anonymous type and then assign this new type to someObject. 
Unfortunately, though, it looks like the new Dictionary initializers are still in. I never really saw the benefit of it, especially with anonymous and dynamic types available.
Ha. Amazing. Wow. Thanks! :D
C# can you be used to write anything and everything. There are a lot of enterprise level software companies that write their code in C#. Any website with the extension '.aspx' is using the .NET framework which is the backbone of C# (and VB). It's really up to you to decide what the "end-goal" is. You'll have to come up with your own ideas of what kind of program you want to write and then you just need to sit down and take the time to do it. The more you write, the better you get and the better you get, the more you'll enjoy it.
See my other reply.
The event keyword, along with add/remove. It is a WinForms library feature codified in the language, where it is an attractive nuisance for many developers. I've seen lots of people assume that because events are baked into the language they must be appropriate for a usage other than simple WinForms event handlers. This leads to a lot of reference leaks or subtle race conditions, when developers use events in library or server code. WinForms control events could've been implemented without the language support at no great price, so I really think this should've never entered the language.
Still better than informs and html *shrugs*
I recommend you first make something in Excel and let people send it using the email feature in Excel. It'll get something usable out to the folks that need it ASAP. I'm not entirely sure you need anything beyond this, but it will buy you some time to learn how to program it in c#. If you're dead-set on creating an application for this, I encourage you to reanalyze the business problem rather than trying to recreate the same form you had before. Chances are that things have changed since that form was originally created and there are things you can do to improve it. However: Keep it simple. Don't get too ambitious and don't be a perfectionist. Identify the minimum functionality that will meet the business need and deliver it ASAP so you can see how well it works. Keep a list of planned features/enhancements and be ready to change it.
That is exactly the point of the volatile keyword, though. It is explicitly preventing optimizations. I disagree on lock. It is a good way to use monitors, and without it people would be less likely to use them correctly (since it guarantees that the monitor is exited properly). All the problems you cite have nothing to do with the keyword, but rather with people who don't understands the basics of synchronization. Locking on private variables has been an established idiom for a decade or more, so I'm surprised that anyone is having trouble with this.
MonoGame is really awesome.
so... what's better about public void Foo() { string optional1 = default1; string optional2 = default2; } public void Foo(string optional1) { string optional2 = default2; } public void Foo(string optional1, string optional2) { ... } vs. public void Foo(string optional1 = default1, string optional2 = default2) { ... } Forgive us the circle jerk for a minute and put forth an actual argument or at least describe your opinion as to why optional arguments are bad.
Raising an event with no listeners throws. Dumbest thing.
Strictly speaking integers don't have an undecided value either. Do you want to get rid of `int?` also?
You can't really do anything with any computer other than calculating. So if you don't see any purpose in calculating, then there's no reason. Nor is there any reason to use any computer. That's literally all they do.
Eliminate the need for **break;** after each (non fallthrough) case. It is redundant. If case statement has commands the selection should terminate after the commands, and if it is empty is should fall through to the next case.
This is a relatively simple program to make using WPF and databinding with a listbox or gridview to an ObservableCollection. I'm sure that sounds like jiberrish, but the bulk of the task is going to be either creating and maintaining a little DB with the icons and info for every item possible, pulling that info from the web to populate the db, or the PDF part. Honestly you could probably get someone on a freelance site to make this for very cheap. If you want to be the hero and do it yourself, I suggest starting in WPF and use something like SQLite. 
&gt; I recommend you first make something in Excel I agree. This is always a first go to. And if you don't have Excel, download the free [LibreOffice](http://www.libreoffice.org/) and use that spreadsheet.
Please don't claim circle jerk to cover up your ignorance. 
[C# OS](http://cosmos.codeplex.com/)
That sounds so Yoda. 'There is no be; only feel'
Annoying, yes. Dumb, no. What do you expect an object that is null and you call a method on to do? If you want to remove the boilerplate code everywhere, you can use something like: [DebuggerStepThrough] public static void SafeInvoke(this EventHandler handler, object sender, EventArgs args) { var ev = handler; if (ev != null) ev(sender, args); }
Feel you must, not be, young padawan.
Depending on how complex the data is, you could probably save it in the file name of the images too if they're saved "locally". Assuming it's on a network share where normal users have only read access, it could be updated with new products easily. But I might just be complicating things.
[We'll see how it goes.](http://cosmos.codeplex.com/)
&gt; But the worst part about it: I have no idea what alternative would be better. I feel the same thing. What frustrates me the most about WPF is how differently the layout for some things work depending on which container they are in. Also, how difficult it is to sometimes get it to be "as big as it can be". For XAML, the thing that bothers me most is how to get indentation looking right because xml attributes are the default way to do a lot of properties. 
They didn't have to expose it as a nullable delegate. They could have treated events as their own language construct just like VB did.
&gt; Well, anything can. Just look at Microsoft's products: About everything they ship is written in c#. Most of the Xbox one; all of Xbox live; Most of windows ect.. Don't be stupid. Where did you get that shit? Stop bullshitting. 99% of everything they write relating to Windows or Xbox is C++ with some C and Assembler.
They are the same downsides that we see inside WinForms.
Those same problems would be there if you replaced events with the observer pattern. 
I don't understand your argument. We can't push values onto the operation stack using C#, yet the C# compiler generates IL code with push statements. 
Also, only allowing a single statement per case condition. If you've got a bunch of code in a case-break block, it's highly likely that it should be refactored into a method.
Though I don't care about the age of the article, I otherwise with your in full. I don't understand why named and optional parameters are even being discussed in the same article. 
Ignorance? The OP clearly stated "FOR FUN", he didn't say write a dissertation defending your choice, after which the neckbeards of this circlejerk will judge whether or not to downvote you to oblivion. I'll know better than to participate ever again, and let this be a lesson to anyone else as well.
You're probably correct. If someone finds it hard to believe that most mainstream developers don't create their own immutable data structures then they are forever lost in their Utopian academic view of programming.
There is no way to pass the individual array values to another function, since although in theory C# supports a variable number of arguments to a function, it requires that you know in advance how many arguments there are and pass each value individually in code. En example of a function that that takes a variable number of arguments is the string.Format() function. Example: var formattedString = string.Format("Arg1: {0}, Arg2: {1}, Arg3: {2}", "Hello", "World", 42); Console.WriteLine(formattedString); would produce the output: Arg1: Hello, Arg2: World, Arg3: 42 The number of times you use the curly braces in the format string indicates how many arguments there should be in addition to the format string. But here we already knew that there would be three arguments. No more, no less. In an array we do not, since you can make them any length. So we can't use this trick to pass array values. What you can do instead is pass the array itself. An array is called a reference type. Essentially it is a pointer to the place in memory where the values are stored. This pointer is a single value that you can pass as an argument to a function. A function that takes an array of integers would look like this: int SumArrayOfIntegers(int[] values) { int sum = 0; foreach(int i in values) { sum += i; } return sum; } As you can see, nowhere do we say exactly what values are passed to the function, we only pass the reference to the values. A consequence of this is, that if we change the values in the array inside the function, the function caller will see the changed values after the function returns instead of the values that the was in the array before you called the function. (This is known as a side-effect, and is usually considered bad programming style, although it can be useful in some cases.) If inside the function you need to know exactly how big the array is, the array has the Length property that you can read to see how many elements are in the array.
&gt; What the keyword does is accomplished without additional syntax, and that syntax leads to problems. Well... Volatile actually has an overlooked use in C#: It emits an IL Volatile instruction, which indicates to the runtime that it should get the latest written value to the field, rather than just providing synchronization guarantees (e.g. memfences). &gt; There is the fact that the lock statement required adding a monitor to every single variable creating a performance overhead to the most common operation. I agree that adding the sync header to every object is a ridiculous design that they blindly copied from Java. It's so ridiculous that I wonder if there's something I don't understand about it. &gt; Any piece of code can lock on any variable. This can and does lead to deadlocks, especially if objects lock on a variable they do not own. That's also silly, but hopefully you're working with a good team that use dedicated objects just for locking. I don't agree that the lock statement itself should be taken away though.
That's what I meant by 'when absolutely necessary'; I could've been clearer, sorry. 
IReadOnlyDictionary&lt;K,V&gt; should be removed and replaced by IReadableDictionary&lt;K,V&gt;. IDictionary should inherit IReadableDictionary. It's almost certainly too late to make these changes, but I feel this is a pretty big blunder in C#'s BCL which can result in nonsensical code.
The += and -= operators call Delegate.Combine and Delegate.Remove, which aren't synchronized innately. The consequence of unsynchronized access is that adds or removes will be silently skipped. Also, events are just multicast delegates, so they maintain strong references to the object associated with the subscribing method. This leads to reference leaks if the event unsubscribe doesn't occur. The assumptions behind events are fine for WinForms (usually), since all control event hookup should be happening on the main thread (removing the synchronization problem), and the lifetime of controls and event handlers are usually equivalent (removing the unsubscription problem).
Yeah I'm confused by the down votes when everyone's defense of GOTO is "no one uses it anyway". I'm just trying to point out something I find off in a high level language. :)
That still doesn't solve the fact that it litters the MSDN docs. And like green_transistor says, a lot of people appear to just ignore those as long as it still works
Goto's great, but I'd love to have a feature like this: for (int i = 0; i &lt; 10; i++) { for (int n = 0; n &lt; 10; n++) { if (condition) { break break; /* exits loop n and i */ } } } Or maybe just `break 2;` or something like that. For such a common issue, I don't see why this hasn't been added to the language yet really. All it would really amount to is a goto _n_ loops out.
That isn't true for multithreaded code, so it is necessary.
I quite like how this works though..
Agreed. This basically adds 2 lines to every single event invocation.
I disagree. Events can be used for a good many things, though I think the implementation is clumsy. Having to work with events is such a huge pain in the ass and really clutters up any code around it.
To expand on your point about poor representation of data, bool? can be incredibly useful in three-state situations, so stuffing them into a bool would be poor representation. I can understand the hesitance towards nullable types as they do have a code smell about them, but they definitely have their place.
Ah, cool. Thanks! TIL
You can add a boolean to make it throw errors instead. My company has a code base from 1994, we make use of it a lot. 
Also, you could try not sounding like an asshole.
&gt; There really aren't applications written in assembler. Drivers that need specific instructions.
No offense but I'm not the only asshole here.
When I have a moment at work, I'll post a screenshot of the unit test runner. Having the tests like these lets me organize shared inputs and document/organize each side effect. Also, "HandlesNullInputsCorrectly" doesn't mean anything. What does "Correctly" mean? Does that mean if it's a `null` collection it's treated like an empty collection? `null` string is handled like an empty string? Are `null` inputs ignored/valid? Is it correct to throw an `ArgumentNullException`? Should it throw a `NullReferenceException`? My methods handles "NullInputsCorrectly" when the board is green; naming a test like that is redundant. The unit tests double as documentation. If I want to know the behaviour of Foo's constructor, I look at the test names. If a test fails, 90% of the time I know exactly why it's failed because the test inherently tells me why.
Or you can look at the implementation of the test and see what is deemed correct.
Assignment to a local variable is required if you're referencing the event from an object member, because the object member's value could change between the "if" and the invocation. However, in /u/XMR1's code the event has already been read from the member where it's stored and put into the local variable "handler", so the additional local variable "ev" is not required. /u/EscapeLizard's comment that "Once SafeInvoke is called, handler won't change from being not null to being null." is 100% correct in all multi-threaded situations.
I'd remove LINQ query syntax. All of the extension members of the Systen.Linq namespace are great, and I use them all the time, but I strongly dislike the syntax of "from n in numbers where n &lt; 5 select n". I far prefer "numbers.Where(n =&gt; n &lt; 5)" (and funnily, it's actually shorter in this example).
That is almost the point of the volatile keyword. The point of it is to prevent re-ordering of instructions in multi-threaded code. It creates a memory barrier. You only need one call to volatile in order to create a memory barrier. That simple add introduces three because of the keyword. And each volatile invocation requires all the logical CPUs to synchronize. That is painfully expensive. One can argue that manual memory management is the way to go, and all the buffer overflows, double frees, and so forth are because people who don't understand memory management. My point is a language construct that encourages you to shoot yourself in the foot is misguided. And lock is one that does that.
That's like saying we shouldn't name (and/or document) our methods nicely because we can just look at their implementation to discern what it should and shouldn't be doing. The test isn't just for me, it's for me 1 year in the future or for new developers coming on board.
To be fair, concurrency is much more widespread now than 20 years ago, and immutable data structures are a big help for writing safe concurrent code. I wouldn't consider the practices I adhered to in 1995 as appropriate today. 
The program is not conceptually very difficult, but the devil is in the details. As liflo suggested, a quick first step is to create an excel sheet and use some of its features ( like email etc ) If you really want to get it done ASAP, PM me. I could also show you how its done in so you could pick up some programming skills along the way - but defining the specific problem to be solved and coming up with good requirements would be key ( irrespective of who codes it up ) Also decide if you want it to be web-based or a stand-alone desktop program. 
Anyone had similar experiences?
The Volatile.* methods emit that IL instruction, which then compiles to the appropriate assembly instruction. Using a variable that is declared volatile often generates dozens of unneeded volatile synchronizations when in reality, a single call to Volatile.* will have the same effect on the runtime. &gt; It's so ridiculous that I wonder if there's something I don't understand about it. It is completely ridiculous. And it was pretty much straight lifted from Java. If you get the chance, ask Jeffrey Richter about it. He has a good story about it from when he worked on the C# language. &gt; That's also silly, but hopefully you're working with a good team that use dedicated objects just for locking. We are safe there; we have a check for that stuff in our automatic code reviewer. The problem comes from third parties who code against us. There is nothing stopping our customers from writing themselves into deadlocks that way, and then filing bogus tickets against us. And since the problems are multi-threading problems, they are a pain to debug, especially since most of them won't let us see their code. It is the first thing we check when we get a ticket that reports a hang, and it still takes a while to prove. &gt; I don't agree that the lock statement itself should be taken away though. If it could somehow be changed to reflect the correct usage pattern, then sure. But as it stands right now, it does far more harm than good. Both *lock* and *volatile* were stolen from Java when C# was playing catch-up, and the team writing it didn't really think about the implications of them (just like Java didn't think about it). But they are in now, and they need to be supported. The current team hates having to continue supporting them.
Really? I think that is one of the most useful language features. Why do you dislike it?
Monitoring on your servers would have saved you a lot of headache and given a heads up before it got out of control, and if nothing else given you some data to back yourself up if it was actually a flaw with Azure.
I'd have to say that I'm not surprised you didn't receive additional info. Having worked with their data centers for a while, I've had numerous problems with very little explanation as to why or how. Almost always, when we've had odd problems, the logs provide no help...
Well I afraid so. Can you please bring an example, here or in a blog? I think Azure needs to wake up!
I consider it a code smell. Every time I have seen it used it is to shoehorn some new stuff into something that wasn't designed well originally.
Me too. There is even a Code Analysis rule that says to not use them.
Just because they might be a big help it doesn't mean that most does it?
Shhh you're about to get strangled by the circle jerk in an opinion based thread.
Depends where you work and what type of software you write. 
Imo, the entire syntax around events is dumb. First, check if it's `null` before you call it, because otherwise it will throw. But then, even if it is `null`, you use a `+=` increment to subscribe to it. How does that make sense?? An `event` is really a special list of event handlers. Firing off a call to everything in a list should always be legal, even if the list is empty. The list couldn't be null, otherwise it wouldn't make sense to add to it. Except it is. And that's just dumb. 
Imo, it's abused by the BCL :P
That's sometimes true, but method overloading is the same thing in that case. No alternative but to add an optional parameter in one way or another if you can't break the source code and don't have access to all the code that calls that method because you've shipped the code to other people. 
I posted this in a different thread, but here's why you shouldn't hate on 'var' I agree with you that using var for everything is a bit lazy, but it is extremely useful at times when you have anonymous classes that don't have an explicit type. It's also much easier to write var and then have proper documentation instead of having a mess of typing on your variables. var someObject = new { prop1 = "asdf", prop2 = 3, prop3 = new List&lt;int&gt;() }; You can't explicitly assign a type for that, the compiler has to create a class to contain the anonymous type and then assign this new type to someObject. As for the goto statement. Removing that would break a large amount of iterator blocks that rely on the current state of the iteration block to go to the next case in the MoveNext() method's switch block. No more foreach() and no more yield return.
Ha! Never noticed this before. Hmm, both do a binary search so are O(log n) on retrieval. Interesting :)
Nope, most functions are only a few lines long and their names are typically short and sweet (because each individual function doesn't do much). Most classes are &lt;50 lines even with the necessary boiler plate. Again, it comes down to what the purpose of the unit tests are. If they're intended purely to do your tests and nothing else and test multiple things at once, then yeah, you can name it "HandlesNullInputsCorrectly". If you want your tests to test one thing, and one thing only, and serve as additional documentation, then you'll name them a different way. The long and the short of it is that it might be nice if there were some language features baked into C# to support TDD/BDD.
I purposefully used the word applications. I know the guy before you said "most of windows" but I was just toning down your 99%
Anonymous types and dynamic typing is something completely different. Dictionary initializers, although I initially thought they were kind of pointless due to list initializers, it does serve a purpose I think. A dictionary shouldn't be obligated to implement a Add method.
Thank you so much for the suggestion! My boss loves the excel sheet as a temporary solution. He still wants me to make the app though. The app, as I see I failed to mention (I was a little buzzed) was a web app hosted on one of our IIS servers. Anybody could access it without the need to launch a file. 
Everybody around here uses Microsoft Office but me. I hate it. I use LibreOffice every day. I love open source software and wouldn't have it any other way. You can bet that I'm going to be using LibreOffice. ;)
You are absolutely right. I also think that you shouldn't exclude a feature just because it *can* be abused. The compiler has to be able to trust the user a little bit.
There is a notable company that banned use of MS Office on site so Excel power users were finding that in order to actually do their jobs, they had to take their work home and work Excel and then export the spreadsheets that ended up with the correct values, but that were functionally broken back to LibreOffice. Wash, rinse, repeat, day-in, day-out until a higher-up finally had mercy on them and allowed them to use MS Office on Windows machines on-site.
If you are not married to having it integrated in the webapp I would look at google docs. They have a form builder thing. I've never used it, my brother (who knows no programming) does it a bit and says its pretty easy and gives you a fair amount if customization and flexibility.
LINQ query syntax is great for expressing things that can be difficult or tedious with the fluent syntax. Particularly, complicated joins are a LOT easier with the query syntax.
But what if all the old obsolete code just got put in a separate optional assembly?
I use queries for selects and method chains for everything else, I agree with you, but IMO queries are often more readable and easier to write when dealing with complex selects.
Whoa, are you me?
Yup, it's not sound from type system perspective and I even [Eric Lippert admits it's broken and was only added for C# 1.0 to be more similar to Java](http://blogs.msdn.com/b/ericlippert/archive/2007/10/17/covariance-and-contravariance-in-c-part-two-array-covariance.aspx)
That is a pretty reasonable candidate to extract into `Cross` or `CrossProduct` enumerable extension, which means you could use it like that: var range = Enumerable.Range(0, 10) foreach(var x in range.CrossProduct(range, (i, j) =&gt; new {i, j})) { ... } If tuples were less tedious to use from C#, that method could just return a `Tuple&lt;T1,T2&gt;` instead of taking a selector. Doesn't look too bad now :) Of course, the performance won't be as good as regular loops (unless you use [experimental libraries that rewrite your LINQ queries](http://nessos.github.io/LinqOptimizer/)), so that has to be taken into account.
I hear you but using the code languages on LibreOffice has a big learning curve compared to VBasic (although that has its own problems). If you start with LibreOffice it's probably easier.
[Blockscape](http://www.blockscape.com/v2/) is written in C# as well and is quite impressive.
If only things made that much sense. I shouldn't have been lazy with the name, it's actually `SortedList&lt;TKey, TValue&gt;`. It's an `IDictionary&lt;TKey, TValue&gt;` that is sorted by an arbitrary, comparable key. Bizarre, huh?
I feel like I'm the command line argument version of yourself. But the only way to know for sure is to ask you to ask me to ask you to ask me to ask you...
Yeah in the past you could say open source office software and MS Office were comparable... those days are gone. ESPECIALLY for excel. I wouldn't consider myself an excel power user at all but I find even Google Sheets pretty crippled compared to Excel.
There is no such thing as "obscurity" on the internet. You are not obscure, your public IP is exactly that, known and accessible, the entire public address range is being swept all the time. You must assume the environment is hostile, your only defence is lockdown, throttling, auth etc. You can see on the 13th there was a change in pattern that triggered roughly 100x ingress/egress. Personally - that would have been a warning. This may be your own work, it could be someone elses - that should have reminded you to protect the resources. Suspect someone/thing found you were running ES (pretty easy to discover - just a empty GET / returns ES metadata) then ran a bunch of different queries against you (~10x your normal ingress). You've seen search results in Google etc. that are just someone elses SERP on a webpage with an ad - this is how they create them. Reach for Occam's razor - your lack of defences put you at risk. Than blame Azure first, you should look closer to home and understand the nature of the hostile environment you are in. Put a proxy in-front of all resources that can log, block, and rate limit clients. The former is really important, ES default config sucks in this regard. Demand authentication for expensive resources such as ES, databases etc. Alert on any significant change in network traffic, disk IO, CPU etc. Spent a lot of time working on the web - last 20 years or so, and I own several hundred thousand machines in Azure and other places. I know all my public addresses are constantly pounded by thousands of different crawlers looking for scrapable data, vulnerabilities etc. They are spammers looking for data, google stuffers looking for landing page data, they are blog stuffers looking for post endpoints. The number and types of attacks is dizzying. As you found out, simple mistakes can cost enormous numbers. Not saying Azure, AWS etc are perfect, but in this instance I think you underestimated the nature of some clients on the web. 
Or maybe the syntax: OUTER: for (int i = 0; i &lt; 10; i++) { for (int n = 0; n &lt; 10; n++) { if (condition) { break OUTER; /* exits loop n and i */ } } } 
Why be surprised by this? Their information comes from outside of your box looking at external indicator counters such as VM CPU utilization, Network Adapter counters, Network switch counters etc. They have no insight inside of the box unless you're running the Azure Agent in Windows. Even that won't add much to the party than give some per process breakdown of the utilization. They don't know your apps - tbh I like it that way, but it does mean that you're 100% accountable for logging etc.
The problem is that an event is one thing, and the underlying delegate field is another. They just have the same access syntax in C#. The null-check and in general accessing with anything other than += and -= targets the field, while those two operators target the event add or remove methods (which are usually compiler generated).
The fact that there's no mention of pay means nobody should consider this.
I don't think your Vb.Net syntax is quite right there. 
i asked for help on one piece of the homework. I did the rest of it myself
I agree they do not have insights into what happens for your app; however, the logs they keep is very limited. I would very much doubt they even store the top 10 IPs by traffic which would be helpful in this case to see if one IP was hitting the box or if the IP was an internal Azure address. I've come to accept very weak answers to solutions with almost zero data to back it up.
I'd have to agree they do need to wake up and get a little more serious about it. Unfortunately, I'm not able to provide details or blog about it due to NDAs with the customer.
&gt;I would very much doubt they even store the top 10 IPs They keep none of your network traffic, its down to your app to retain that data. Agree this data is useful, just you are the guy that has to figure out collecting it. Some PaaS functions can have logging enabled, you can always call WAD, I always use Nginx in front of my HTTP endpoints for this exact reason, as well as applying per session throttling etc.
Whoops, my mistake. Thanks!
Have you looked into [extension methods](http://msdn.microsoft.com/en-us/library/bb383977.aspx)? They let you "add" methods to a class. It is how the Linq query methods are implemented. That way you can add the logic you need while platform writers can keep the abstraction they need. Also, System.String has a pretty good set of [Split](http://msdn.microsoft.com/en-us/library/system.string.split%28v=vs.110%29.aspx) and [Join](http://msdn.microsoft.com/en-us/library/system.string.join%28v=vs.110%29.aspx) methods. What is missing out of there?
But won't dictionary initializers translate into Add(k, v) calls in the same way collection initializers do?
The compiler generates IL from those constructs; your decompiler shows a lot of gotos, sure.
This really is not true. Technically event is exactly the same as the underlying delegate field. In fact the keyword event does not denote a special construct like get/set for properties or the parameter list for methods. event is just an access modifier like public, private and protected.
Why do you need this if you have goto?
No, just no! The query syntax is much better than the regular syntax. I actively go around the project and change the lambda versions to the more readable query syntax. Try expressing a query that uses let with lambda syntax and see what happens.
You might have to hope for Jon Skeet to magically appear and answer your question. Seems quite nuanced. I personally have no idea. 
You made a confusing question about a bug in your code and didn't get it solved in 1 day by SO and now you are saying the community doesn't care? Did you notice all the SO comments to your question: "What proof do you have that the above two statements are done in memory?" "Check out IntelliTrace to see what your EF querie s are doing " "I advice everyone to put this line in their DataContext constructor this.Database.Log = s =&gt; System.Diagnostics.Debug.WriteLine(s); Of course wrap it in #if DEBUG" To which you didn't respond at all? And just to highlight why your question is confusing: "So, I already know that code like this does everything in memory: SomeDbObject.SomeNavigationProperty.Where(x =&gt; x.IsSomeBool);" What do you even mean? Does everything in memory? Are you talking about the fact that you have not called ToList etc so the query has not materialized yet (gone to db)? Or is this some Linq query to an in memory object?
I really dont know what you're trying to achieve there... 
They're not wrong - you don't show any proof of what EF is doing, especially when exposing IQueryable&lt;&gt; from your entities (which may well be smarter than ICollection&lt;&gt;). You need to show that you know for a fact what is happening. I honestly can't remember if EF handles IQueryable&lt;&gt; navigation properties any better than the other types. This information may also be searchable online - you're not the first person to have this question. I'm also of the opinion that IQueryable&lt;&gt; is a poor abstraction. It's easy to write LINQ queries that work for EF but would fail in LINQ to Objects, for example, and this lack of universality to me means that the queries themselves are implementation details that should be abstracted away behind an internal data access layer, hiding EF from the rest of the application almost entirely. It causes you to write more code (especially making your own domain objects and copying their properties around - AutoMapper can help with this though), but it's easier to reason about, write unit tests for, and may improve other areas of the code by encouraging reuse (eg, if one day you need to add a new criteria when selecting from a table, you can just modify the data access layer and get helpful compiler errors rather than hunting down every place where some mutation of the query is used).
That may be true but this is surely not gotos problem. I have seen people break out of inner loops with flags and ifs and what not because they have heard that goto is bad and they thought they somehow improved the situation by introducing all that crappy code.
You do realize that goto is in the top 10 of most popular assembly instructions for any program do you? Every loop you write contains a goto when compiled.
So basically you think it is a problem that += and -= are not atomic? But they are not for integers and strings too.
I don't see how the removal of var would make developers write the interface they are using rather than the actual type.
anonymous method syntax which is totally unnecessary in the presence of lambdas. Also array covariance.
&gt; In fact the keyword event does not denote a special construct like get/set for properties or the parameter list for methods. `event` is very similar to the property syntax in what it actually does. edit: to clarify public event EventHandler foo; Generates the following code: private EventHandler foo; // Notice that the delegate itself is private. public void add_foo(EventHandler ev) { // Lots of stuff going on here. I don't bother to read all the IL since it's not important. } public void remove_foo(EventHandler ev) { // Ditto. } edit2: would like to clarify that event is **not** syntactic sugar as you cannot create events without using the event keyword since you can't create event metadata without witchcraft. 
It was just a joke...I wasn't being serious.
&gt; an see on the 13th there was a change in pattern that triggered roughly 100x ingress/egress. Personally - that would have been a warning. This may be your own work, it could be someone elses - that should have reminded you to protect the resources. Suspect someone/thing found you were running E The change of pattern is explainable by the application - don't bore you with the details. I know obscurity is not security. My sarcasm apparently did not show. 
Nah. Just use case 1: case 3: return foo(myval); case 2: break;
There is no need for goto: try { switch (val) { case foo: DoThisSomeOfTheTime(val); break; } } finally { DoThisAllOfTheTime(); } 
var usage expect in linq. It's overused and leads to lazy programming habits.
That is a stupid thing to say. You are correct in saying that calculating is all a computer really knows, but on an abstract level calculations aren't as present anymore.
They are only out for C#6. They will come with C#7.
Especially the `string` class is a good candidate for `sealed`. The compiler could not optimize nearly as efficient when a `string` can have subclasses.
Use Tupel&lt;&gt; in this case
I don't know if this is what you want, but you can use: \#warning "A Warning" \#error "An Error"
Yes I'm perfectly aware of that being an assembly programmer for a number of architectures myself. What makes you think I didn't know that? It's op that wants goto removed not me.
It is. Go ahead and try out out. Actually the C# syntax is less accurate since I left of the semicolons
Knowing that it is pretty obvious that it is OK for the compiler to use goto. Maybe I misunderstood your comment about what is allowed to the compiler.
As far as I know event does not generate any code of that kind unless you use the add and remove keywords. The event keyword simply restricts how the delegate can be accessed. While it is true that it adds metadata it does not add any functionality on top of a public delegate field.
&gt; IReadOnlyDictionary&lt;K,V&gt; should be removed and replaced by IReadableDictionary&lt;K,V&gt;. IDictionary should inherit IReadableDictionary. Can you elaborate a bit more on this? I'm learning C# and recently used a ReadOnlyDictionary (not the I version though, I'm still pretty confused between using the class and the interface).
I tested with ILSpy before I posted. It does.
Hmm that's strange. Probably they decided to do it for interoperability purposes with other languages that do not have event construct.
The tutorial you are reading is no good. I'd advise either looking at thenewboston's videos on YouTube or getting a good book - the Wrox Beginning Visual C# books are a good choice.
I'm fairly new at this myself, but my first thought was to use four byte-variables. Check for overflow and add each overflow to the next in line. Would that work?
Ah, you meant to post it in /r/funny?
What is inconsistent about the int example?
 var t = ("Hello", "World"); WriteLine(t[0] + " " + t[1]);
Because given `x = null + something`, sometimes `x == null` and sometimes `x != null`: int? i = null; i += 10; Console.WriteLine(i == null); // prints True string s = null; s += "abc"; Console.WriteLine(s == null); // prints False 
Why? It seems to me that the code is practically the same. The goto version is even more robust than double break because it will still be correct if for some reason one of a serious of loops is refactored away. Of course you could have break label; like Java but I do not see the difference with goto.
Because of the semantics of the + operator in the different cases. In both instances the behavior would be what I expect. We could argue that using the + operator for concatenation or for combining delegates is not a good thing to do but if we agree it is the semantics makes perfect sense.
For 8 years as professional programmer I have not seen an abuse of goto. Not once. On the other hand I have seen bad code due to fear of goto (flag variables for exiting from inner loops and similar mess). In theory you are right in practice nothing like what you describe happens.
Check out [Cosmos](http://cosmos.codeplex.com/). It's a kind of operating system toolkit for C#.
C# is not, by itself, a language that can be used to program an OS. It runs on top of the CLR and the .NET Framework, and needs a JIT compiler to be able to run (unless you use NGen). None of these things are present without the operating system. With that being said, it *is* possible to write an OS in mostly C# provided that you've done some scaffolding in another language. [Cosmos](http://cosmos.codeplex.com/) is one such project that seems to use a homemade IL-to-CPU compiler and a language called X# that reduces the need to hand-code assembly. Meanwhile, [Singularity](http://research.microsoft.com/en-us/projects/singularity/) is a Microsoft Research product centered around building a C# OS. Neither are production-ready, but they do have a lot of learning resources (Cosmos slightly moreso than Singularity). Good luck!
This is a well thought out and mature answer. I am at work, so I will check this out tonight, but does Cosmos have a walkthrough project format like pintos does in the learning resources? If not, maybe I should walk through pintos one more time and then do Cosmos. I want my understanding to be solid. 
Thank you! It looks like Cosmos has a few articles, but they may not be structured as far as I can tell. Pintos might be a better fit for you to learn the "how to make an OS" part before you learn "how to make an OS in C#".
There are two VB.NET features that would be nice to have in C#: * Project-level `using` namespace declarations. * The `with ... end with` construct. 
If you are writing code, as a software developer, it's definitely "present" to you.
Oh, that would be cool. You can do your example with an array, but I assume this would also (safely) allow heterogeneous types. var t = new [] { "Hello", "World" }; 
I am really disagreeing with you then. How is LINQ, XAML, etc considered calculations? Sure as hell you write a lot of calculations, too. But your point is just invalid
Even if you don't know that strings are represented using numbers, you can still do calculations with them, like `"asdf".Substring(1,2)` 
To be honest I didn't know C# had goto for a long while since first learning the language.
So what? You can also NOT do so!
What are you saying? If you don't know strings are stored using numbers, then you can't calculate a substring, using the built in api?
I have to admit I don't understand the problem. Navigation properties run as SQL statements for me instead of in memory. Example: from something in this.Repository.Get() where (something.SomeValue = "Y" || something.NavigationProperty.Any(n =&gt; n.SomeOtherValue = "Q") select something; So... some details would be helpful. Are your navigation properties defined as ICollection? Do you have lazy loading enabled or disabled? What's the full LINQ?
I've looked up it before posting this, but it's not trevial like system("CMDLine"), is this the only way though? to actually start a cmd.exe process just to execute my commands?
Technically it's JIT compiled, not interpreted.
You can also just do System.Diagnostics.Process.Start("CMDLineProgram" + "arguments"), but if you want to have control over whether or not that command line window is shown, or redirecting stdout/stderr and other things, you will have to do it like in the Stackoverflow post.
sersly all im saying is that not all operatiosn you do are obvious calculations. you have tons of stuff that is calculation and tons of stuff taht is not (superficially). you said all is calc that is wrong. Holy fk
Well it is not often that the best way to break out of an inner loop is goto or you need switch fallthrough but it happens sometimes. I think I have like 5 gotos written in my career.
Navigation properties are ICollection. Lazy loading is enabled. What do you mean by, "what is the full LINQ"? You mean, the query-like syntax?
k
Willing to write your own kernel is a different language?
The fact that all methods are non-virtual by default. There are few things worse than wanting to override a third-party API method and not being able to. I guess this is where extension methods come into play though... Also unit testing... if you want to enable mocking of concrete classes, you need to make everything virtual. Otherwise, everything has to be an interface, which I think is ugly in it's own right. Really not a big deal, but I'd still prefer virtual by default. 
http://stackoverflow.com/questions/1179532/how-do-i-pass-command-line-arguments-to-a-winforms-application
wireshark should fit the bill.
kinky bitshifts!
Is it worth upgrading to VS 14 CTP on my main system? I'm a hobbying developer and I don't want to set up an entire VM to play around with. So just wondering how stable / usable it is. Edit: Fixed version number.
And technically you're correct I stand corrected :)
Similar annoyingness due to backward compatibility... List&lt;T&gt; implements IReadOnlyList&lt;T&gt;, but IList&lt;T&gt; does not. :(
Blame the dev, not the feature. Vars are virtually required for anonymous types. My rule on var is that the type must be either anonymous, or easily determinable from the context. Good: var foo = new Dictionary&lt;string, Dictionary&lt;string, ComplexType1&lt;ComplexType2&gt;&gt;&gt;(); Bad: var bar = SomeMethodThatReturnsSomeUnknownType()
Well, there's good reason to be careful with them. If I recall correctly, values for optional parameters are compiled into the CALLER, so a public API can't change their default value without all consuming binaries being recompiled, which is a scary prospect.
Not as much experience as you but I haven't seen it either. Which is actually pretty interesting given many of those on our development team also still maintain our old codebase we are replacing with C#- and that is 30-year-old-BASIC so you can imagine how much goto there is. And despite that I've yet to see goto used poorly in the codebase. One of my issues with anti-goto is that often times the "well-structured" code is simply no easier to follow. Some control-flow just isn't flexible enough to do what you want, so you have to sort of "hack" it with things like the flag to break out of outer loops. Thus the attempt is not one of producing readable code but of simply producing code without goto on sort of an assumption that any code without it must be more readable. 
I'm running it in parallel with VS2013 on two machines and haven't noticed any issues working on ASP.NET MVC sites using VS2013 and vNext projects using the VS 14 CTP. I can't vouch for other project types though (e.g. XAML and Windows Store development are probably a bit more touchy). *Note: It may not be called VS 2014. They call it VS "14" because it's the 13th major version of Visual Studio and they usually skip "unlucky" 13s in version numbers. If you look in Program Files at your VS2013 install, it'll be in a Visual Studio 12.0 folder.*
Agreed. 
Community Technology Preview releases are not intended for production environment use. CTP releases are unsupported.
&gt; "this class MUST contain the following methods..." I think I know what you mean but at the same time, I already know that the BCL collections have X methods, they won't change. So I'm not really sure why I need to specify that... I'm a noob though so hey haha
&gt;I'd give anything to surround myself with people who know more than I do, and I'd be ecstatic to have the opportunity to continue to develop my skills at work. Say that, and show some basic knowledge of the language, and I have no doubt you'll be hired wherever you apply. Game development and Enterprise development differ in a few ways. Game development tends toward optimization, whereas Enterprise/Web dev tends toward design patterns. I've done some game dev on my own, but never worked in the industry. I've worked with several ex game devs, and they've said that it's fairly similar. You're just using a different set of frameworks, with different priorities. I wouldn't try to specialize too soon. Try to get some broad experience early on, and then focus on what you enjoy and excel at. On the upside, you also get to work fewer hours for more money!
One area that C# is pretty prevalent in (in the games industry) is tools development. Naughty dog (and a bunch of others) use Sony's Authoring Tools Framework (https://github.com/SonyWWS/ATF). If you really want to get into the games industry with C# this is probably your best bet for a wide variety of companies. ATF isn't the only reason I'm saying this, I know a lot of other companies that have been using home grown tools created in C#, and they usually have dedicated tools developers. More and more indie studios are relying on Unity as well, which has all of its scripting in C# as well.
&gt; Will WaitAll actually wait until the lamda inside my ContinueWith completes? It appears so. It will wait until each passed task has finished executing. `ContinueWith()` will return a **new** task, so you're not waiting on the task returned by `executeBatchAsync()` but on the task returned by `ContinueWith()`. It's also worth looking at `async` and `await`. Much easier and safer synax to use than `ContinueWith()`.
Technically correct... The best kind of correct :D
Well, for mc you can just look at the decompiled code :) There's even a server implementation in C# on github, by I'm not sure about the name atm. Just look at Minecraft projects in C# :D I don't know why your man-in-the-middling is so slow, could you share the code?
If anyone was curious, I tested a bunch of scenarios and posted the results. Go take a look at my answer if you are interested. Thanks!
There are other ways to exit inner loops. For example you can extract the loops in a method and use return. Interestingly enough the cargo-cult anti-goto people usually resort to the worse option with flags.
Hey thanks for the reply! Of the 1.5 years I've spent in Unity, almost all of that time has been spent working with 'editor' tools, like creating, editing, and viewing prefabs, as well as a large tile-map editor. Looks like I might be on somewhat of the right track. However, my goal isn't necessarily to break into the game dev industry (as-in, work for game studio). Rather, my goal is to learn enough about C#, the .Net framework, design patterns, good coding practices, and overall theory, to work on games independently. 
Could you add screenshots? I have no idea what exactly this is for?
Hi, and thanks for the reply! I'm glad to hear that enterprise development focuses on design patterns, because I believe that's one of the things I need to work on most. I can sit down, put my mind to work, and write anything I want, but designing a larger system is a challenge. I have trouble looking ahead to see the big picture. I'm also not trying to 'specialize', I just want to be smart about my position, and make sure that the work I'll be doing is applicable to my side-project. Is there any type of software that is comprised entirely of C#? If there's one thing I **would** like to specialize in, it would be C# in particular. Such an amazing language, with such a wonderful community and support structure. 
Installing a VM is not hard nor is it time consuming. You don't want to install this on a machine with an existing Visual Studio install. This is also pre-release software and isn't intended for day-to-day use.
Extending from that you could even use a temporary Action() variable initialized to a delegate, particularly if the loop is going to be using a number of local variables- easier to have the lambda close over them instead of having to manage out or byref parameters. What is readable obviously varies depending on exactly what the code is doing, What I disagree with myself is in the declaration some make (implicitly in their code in some respects) that code containing goto is never readable and any other alternative will be superior in all situations, which I don't think is entirely true.
elitepvpers.de has tutorials on exactly what you are trying to do
Any reason why the `equality` input parameter is a string of "=", "&lt;", or "&gt;" and not an `Enum`? I would also consider refactoring the other inputs/outputs into objects. For example, instead of returning an `int` ID for later removal, perhaps consider returning a `Constraint` object to represent this (maybe even with its own `RemoveConstraint` method). The other inputs for `UIElement firstProperty, String firstPropertyName` (and the `second` object) could be consolidated into a single object. Could probably even use generics and [Expression Trees](http://msdn.microsoft.com/en-us/library/bb397951.aspx) to strongly target the properties. So your API call might be: Constraint constraintID = AutoLayoutPanel.AddLayoutConstraint( firstElement.Target(e =&gt; e.FirstProperty), Comparison.GreaterThan, secondElement.Target(e =&gt; e.SecondProperty), 0.5, 2.0); constraintID.Remove(); Depending on how you manage the expressions, you might even have: Constraint constraintID = AutoLayoutPanel.AddLayoutConstraint( () =&gt; firstElement.FirstProperty, Comparison.GreaterThan, () =&gt; secondElement.SecondProperty, 0.5, 2.0); constraintID.Remove(); Finally, taking a _quick glance_ at your source code, I'm not too keen on the prefixing of your types with `Cl`; that's what the namespaces are for. (although your `ClDouble` might be acceptable just to avoid compile-time ambiguous references) EDIT: I may have misunderstood the "properties" here. If these are just strings of the set "Left, Center, Right", "Top", Middle", "Bottom", then they should probably be enums as well. Not sure how that affects the API suggestions I made; I thought you were targeting properties on the `UIElement` arguments.
I never tried it, but it may have been a "we're not responsible if it blows up" sort of thing.
Perhaps I can add a video showing its usefulness. Cassowary constraint based systems is what Apple uses on iOS and OSX for its layout system (as of iOS 7/Mavericks). It's generally faster than most (if not all) layout techniques (Grid, Stack, etc - with the exception of Canvas). It's also very robust in what you can express. Every control has the following properties; Left, Center, Right (horizontally) - Top, Middle, Bottom (vertically) and Width and Height. Any control can bind its layout to another control. If you have two buttons buttonA, and buttonB you can define as many relationships (or constraints) between the two. For example, if you wanted buttonB to be 10 pixels below button A but horizontally centered to it: panel.AddConstraint(buttonA, 'Center', buttonB, 'Center', 1, 0); // buttonA.Center = buttonB.Center * 1.0 + 0.0 panel.AddConstraint(buttonA, 'Top', buttonB, 'Bottom', 1, 10); // buttonA.Top = buttonB.Bottom * 1.0 + 10.0 All relationships are expressed as a y=m*x + c "slope form" equation. You can get fairly weird and complex with your layouts without nesting components (which is costly) or using overly restrictive grids, say you had a button that was vertically and horizontally centered and you wanted to add a checkbox to its left (while maintaining the button stays centered) with a 15 pixel margin: panel.AddConstraint(button, 'Center', panel, 'Center', 1, 0); panel.AddConstraint(button, 'Middle', panel, 'Middle', 1, 0); panel.AddConstraint(label, 'Right', button, 'Left', 1, 15); This may seem trivial but is very difficult to produce on most layout systems (including WPF), mostly because the best option you'd have is to use a canvas, but the layout doesn't stick once the window resizes. Or you can stack the label and button, but centering BOTH the label and button isn't what you want, just the button to be centered with the label to its left taking up the remaining space. You can learn more about Auto Layout / Constraint Based layout around the web. Javascript calls it "GSS" http://gridstylesheets.org/, Apple just calls it "Auto Layout". TL;DR: Auto layout is very fast and scalable due to cassowary layout solvers (iteratively solving linear systems of equations). It also is the most expressive layout framework available. 
How about wrapping that code in a method and using return instead?
It really isn't a stupid idea at all! There's many servers written in C# which act as a proxy/middleman between Client and Server to offer more features than the original game server does. One example would be Starbound, take a look at [this]( https://github.com/Mitch528/SharpStar). For minecraft look at [this]( https://github.com/SirCmpwn/SMProxy). I'm currently on mobile, if you want more info feel free to PM me and I'll send you more
Yea, in the example he gave me the "Center", etc. Strings made me think of an enum too.
All valid points,the constraint object isn't returned back simply because modifying elements of the constraints structure doesn't necessarily change/modify the constraint and I thought that might be a point of confusion. As far as enums, syntax sugars, adding attached properties, supporting easy-to-use XAML bindings, and finally maybe some convenience functions are all things i'd encourage anyone to make a pull request on github and enhance. 
Hey, thanks for the lengthy reply, was a pleasure to read. My game-plan already was to get a job doing some kind of entry-level application development. I'm okay with that. I'm just trying to see if there's anything I could be looking for, that would benefit me more. For example, I could find a job that has me writing C# 50% of the time, and then doing database/web stuff 50% of the time, or I could find a job that has me doing 80% C# stuff, and 20% design meetings / structure focus. Obviously the 2nd choice would be better (in my opinion). I'm just looking for anything industry-specific to help me key in on those jobs, as opposed to those where C# is only one of several tools. I need to try to refine my job hunt a bit. I'm trying to make sure I find the right one. Any ideas? Does this make sense? 
Guys come on, hes in middle school. This post deserves the NSFW tag now. 
From my experience (and im not saying all programming jobs are the same) it's been 30% design, 30% meetings to discuss design, 20% database and infrastructure and 20% programming. Personally I love designing new systems from ground up and producing a quality product that I (if not anyone else) can be proud of. You'll find that programming can be an art unto yourself. That is to say, you put so much effort into developing your code and producing something of good quality that no one else sees it. The number of times I've sweated over a project to get it right only to get 'yeah thats nice' from commercial teams makes me sad. So basically you need to have a thick skin to be a programmer, because you're producing someone elses vision for the most part. Savor the parts where you get to flex your creative muscle because they don't tend to come about that often. Because you're new it might be hard to decide what area you want to specialise in. For me, it's middleware and back end work. That is, APIs, Access Layers and Databases. I don't do much web or front end work. For you it might be different. As you progress you'll find different disciplines that may or might not like but make sure you try them all.
I see. I think I've finally found my answer. Ironically, the answer is "just start somewhere". Seems like most programming jobs are going to be a mix of a number of things. Seems like I should just get out there and try something, and see how it goes. I suppose I'm happier with this answer, than the alternative I was fishing for in my OP. The alternative would be "look for companies that do X or Y, and don't do Z", but this makes my search easier, since I can drop these criteria. Thanks again for your reply, and the time you took. 
I've been a professional programmer for about 8 years now, C# for about half of that. The biggest difference I find between experienced devs and junior devs is a much better understanding of programming patterns and perhaps more importantly anti-patterns. While I haven't worked in gaming myself, I work with several devs who used to work at a major gaming studio. They say the same thing. The patterns that you use, you use all the time in any enterprise or commercial level development. Certain patterns are a bit more common in gaming, others more common in enterprise but they're pretty much all useful at some time in any development. Most will point you to the classic Gang Of Four Design Patterns book as it is the definitive work on the subject but a lot of people find it quite hard to digest. I suggest Head First Design Patterns as a great book to help understand patterns and why/when you use them. Also I saw this free ebook posted on Reddit before (I think by the author himself) about design patterns specifically applied to games (http://gameprogrammingpatterns.com/). You'll see that the same patterns apply in gaming. It's also a very excellent design patterns book and you can't beat the price, although I disagree with his endorsement of Service Locator as a viable pattern ;) I know this doesn't apply directly to advice for which job to go after but my best advice is to try to get a job at a place that has a great reputation for a culture of advancing the skill sets of their developers. Attend some local dev community meetings in your area and you'll usually find a bunch of devs from the same few companies. Those are the ones that have the culture of improvement that you're looking for and have the staff that know more than you to teach you how to get better. Listen to them and work on your patterns and you'll be amazed at how fast you become a senior level dev.
Been a member there since I was a teen :)
Yeah, I currently use that.
Minecraft was just an example, I was more talking about the efficiency of the concept itself.
Hi, and thanks for your wonderful reply. I've actually been reading the book you linked. Its so well written, and has opened my eyes multiple types already. I'll be reading sequencing patterns today, in fact. I'm glad to hear that there is so much overlap between enterprise and game development. Very positive news for me. Also, your last paragraph gave me an idea. I'll do research online, regarding the 'programming culture' of the companies interested in hiring me. Finally some useful criteria for my search! Thanks again!
I work for a gov't contractor who just lost a bid, and is sending a handful of us to work for the prime. I'm very tired... of the bullshit.
Also [Space Engineers](http://www.spaceengineersgame.com/).
I gotta tell ya... I was a game developer for more than 20 years (both AAA and "indie") and honestly? Don't do it. Get a job that actually pays money!
Dude I get at least 2 hours of sleep every night. Sleep? Sleep is for pussies.
People, please don't feed this troll
Without code to review it's hard to say what the issue is, but I'd hazard to guess that your dumping / logging code or you socket listener code is blocking. In the first case, you'd have synchronous code that's doing the logging in the middle of each network read. The second case would occur if you are only using a single tcpserver object to do your socket listening. Other in incoming connections could be waiting to connect. The last possibility is that you are using multiple threads but that the need for frequent locking in your data structures ( ie a lock around each List.Add) are causing blocks. And if you are thinking to yourself " what this guy thinks I don't know how to write a efficient producer/consumer queue" then look into the SocketAsyncEvent related API. CSharps socket and tcp classes spend a lot of time marshaling data to windows native tcp/socket stack. 
To be honest, I don't quite understand why anybody would want to be a game developer, other than to instantiate their own visions. I have zero interest in helping somebody else bring their vision into the world. I mean, it could be fun, I'm sure I'd learn a lot, but that's not why I'm chasing the carrot. I'm sorry about your experience. I've heard some of the typical game-dev woes before, but is there any chance you'd care to share yours?
So you want to develop video games? https://www.youtube.com/watch?v=lGar7KC6Wiw
Thanks, I would've posted some but I've long since lost the project. I was thinking of remaking it all again.
Well, I'd help :)
`IDisposable` makes me feel uneasy. Not when I can use a using statement, but when one disposable contains another (do I dispose them both? Better check the implementation) or when a function returns a disposable. The caller could throw, so the caller's caller would never get around to using the disposable.
OK - sarcasm isn't really reflected in your diagnosis tho'. You're pointing at "bug" solution first when the most probable answer is far closer to home in being scraped.
Oh... no "woes" per se, just that if you like money it's the wrong industry! The only way I was able to live at all was trading stocks.
Well good! I don't make much now, so I'm used to it :D
Almost any job that says .net will likely be c#. You will probably also need to know basic html, and understand some things like Razor or Xaml that are used to describe ui elements. Look into MVC. Thats a framework that almost every place ive worked has used. 
No problem. Best of luck in your new career path. Hopefully you'll find development as interesting and rewarding as many of us professional developers do.
I didn't look at the code but did a quick search for DebuggerBrowsable and didn't find one. If you have calculated properties then you may want to do something like this: [DebuggerBrowsable(DebuggerBrowsableState.Never)] public virtual string someProperty { get { return string.Empty; } set { } } 
So, to be clear, you are possibly suggesting that if I have some property that is calculated, it may change the object's internal state if I access its value while debugging and so frustrate my attempts? Or?
Ya. In debug mode, if you have a calculate property and you even hover over it, the behavior in the calculated property runs. I built a software framework that runs entirely off of calculated properties and it was causing all sorts of funniness. Adding DebuggerBrowsableState.Never stopped a lot of "debugging errors" from happening.
Dunno, source code is there if you want to put together a XAML markup bindings (i'm not really familiar with XAML) and submit a pull request. I only have a specific code-based use for it :/.
Yep, this might be the solution. I had a similar problem days ago. I had a property that got created on first access, and whenever I hit a breakpoint in this class, the debugger evaluated the property's state, leading to unexpected behaviour.
Calculated properties do not seem like a good case for properties. http://ericlippert.com/2014/05/19/when-should-i-write-a-property/
You mean this is not a good idea: Get { If(backingField==null) backingField=new blabla(); Return backingField; } (Sorry for formatting, I'm on mobile) somehow the field got initialized in debug mode, but not in release. I still have no clue why. I changed quite a few things afterwards.
This is common pattern. But when this causes problem, then the constructor is probably the anti-pattern in your case and the true culprit.
Alright thanks!
Our framework is based on [mechanisms](http://www.erichosick.com/design/design-mechanisms-and-policies/). Mechanism best practices differ quite a bit from traditional OOP.
That's interesting, I never heard of that. But then one should also not be surprised by strange bugs cause by improper code. :-)
Looks like the MSDN has a tutorial on this: http://msdn.microsoft.com/en-GB/library/windows/apps/hh986968.aspx From the compile error I'd say you're putting your overrides in the wrong place.
Thing is, I have no breakpoints... or rather, it fails with or without breakpoints. And besides, I don't write properties with side effects - that path leads to madness.
Try this: Add a new page and select 'Basic Page' instead of blank. If you look in the code behind for this page you'll see how it's set up. You actually have: private void navigationHelper_LoadState(object sender, LoadStateEventArgs e) { } and a similar SaveState. And the NavigationHandler is explicitly implemented: public NavigationHelper NavigationHelper { get { return this.navigationHelper; } } That might give you some clues. Don't use the blank page template in 8.1 as the other page types automatically handle a lot of the navigation crap for you. Then again, I suppose learning from the blank page is more useful.
To add some more data, I have now tried it with both JIT64 (and JIT32), and the newer RyuJIT x64. I usually use RyuJIT. Same result, so its not a problem introduced by the newer jitter.
I didn't inspect the code very much, but I found that ["#if DEBUG" is used few times](https://github.com/zenith-nz/ObscurCore/search?utf8=%E2%9C%93&amp;q=%22%23if+DEBUG%22&amp;type=Code) . Therefore you could have your problems caused by the actual code differing between Debug and Release builds. Some algorithm then gets invalid data and produces an infinite loop. To test this out, try this: 1. Go to Project properties -&gt; Build, Set Configuration to Debug 2. Uncheck "Define DEBUG constant" 3. Repeat for all projects 4. Rebuild solution 5. Try to run tests If the tests run OK, then the problem is caused by what I said and you should check (and possibly get rid of) all "#if DEBUG".
I haven't looked at the code, but some ideas: 1. Use a mocking framework (the Microsoft Fakes library can do this) to inject known values, so your crypto stuff isn't causing problems. 2. Look for places where you might have numeric overflow. 
I'm glad it helped a bit :-)
Maybe its caused by the compiler optimizing away some method call because it seems to the compiler like it's doing nothing?
I'm not a big fan of precompiler in C#, so I don't know the syntax by heart, but [here](http://msdn.microsoft.com/en-us/library/4y6tbswk.aspx) they enclose the condition in brackets. Isn't it possible, that for some reason #if DEBUG &amp;&amp; ABCD gets evaluated the same as #if DEBUG unless it is written as #if (DEBUG &amp;&amp; ABCD) Maybe it is nothing, but if I had to find out which of these precompiler statements causes the trouble, I would change it to #if DEBUG01, #if DEBUG02 etc. and then started adding these precompiler constants one by one until I have reproduced the problem. It should be simple from there on.
Yeah, it does seem this way. See https://www.reddit.com/r/csharp/comments/2imrz2/heisenbug_infinite_loop_in_debug_perfect_in/cl3o6cb The condition is the same in both cases. Now I'm gonna see if I can make the behaviour disappear by doing some arithmetic (that will essentially amount to no-ops) before the call. This is the second case: http://pastebin.com/nkkxPejP
&gt; Multiple inheritance. Yeah I said it, big whoop, wanna fight about it? :P Java had a pretty elegant solution to this; [default implementations](http://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html). Although I generally don't see the point of multiple inheritance.
`using MyDateTime = DateTimeOffset`
You can use `struct`
This is hard to debug given the small amount of code you've posted. I've understood this to mean that you you've been able to add Form2 to your main form, which is an MDI container, but when you try to add Form2 to Form3, it doesn't work. Is IsMdiContainer set to true for Form3?
I'm not fond if the "like a sentence" approach to fluent interfaces. I think it is because I've been coding for a long time, but I'd rather have the `SetName` over `WithName` calls. Even after using a bunch of DSL-based fluents for IoCs and other containers, I really like it not to be English.
Why would you want to do this? It just hides meaning and makes the code harder to understand.
I'm going to preface this right now by saying that I don't think this is a good answer. I feel like I know a better one but can't recall it right now. There is a technology called .NET Remoting which essentially serializes interaction directly between .NET objects in different processes over some channel. Many people don't recommend it. Anyway, that gives you remote communication, so your problem of calling from Python becomes a local one. You could use OLE/COM for that. 
That still doesn't answer why though. What you're describing should not happen. Have you debugged to see what's happening in there? What is the value of Index? Does it hang in the call to Index our in CreateReportString? Or in Debug Print? What else is going on? 
In different timezone, currently 4am, will do tomorrow ;) (tired of debugging). If you are interested enough then the code is available :). 
xml
You could use ZeroMQ for the transport layer. There's an implementation for .NET called NetMQ. For your custom protocol, you could use msgpack or protobuf or just plain JSON.
I had this originally, the only problem is that if a list of commands reside in a controller of type, for instance, livingentitycontroller of type (livingentity) which inherits from movingentitycontroller (moviningentity). I want to be able to add movingentitycommands in to the livingentitycontroller and not only livingentitycontrollers. So I either need an interface with no generic (The generics themselves can contain a generic, which seems to be the problem) or multiple lists per superclass. 
The language is just a tool. More important are the patterns. This is a basic concept you have to accept. Most of the students don't.
 public class Window { public bool IsTransparent { get; private set; } public float Opacity { get; private set; } public void MakeOpaque() { this.IsTransparent = false; this.Opacity = 100; } public void MakeTransparent(float opacity) { this.IsTransparent = true; this.Opacity = opacity; } } Well, `IsTransparent` should really just be a get only property that checks the opacity...
CMS development
Thanks for responding. Using MsgPack over ZMQ is basically what I am doing right now, and it seems to work rather well. The question is, is there a way to make any existing, well-developed RPC technology to work with an external assembly whose source code I have no access to, without resorting to basically writing a wrapper around each assembly member? So before proceeding with my own library, I would like to make sure I'm not reinventing the wheel here. From what I've been told on StackOverflow [here](http://stackoverflow.com/questions/26258372/what-rpc-technology-can-i-use-to-call-a-compiled-assembly-rather-than-my-own-cl/), it seems that there is no such option and the answer to my question is either write my own RPC implementation or write wrappers around the API.
Thanks for responding. I would very much prefer not to touch OLE/COM, because for my purposes, it's just easier to work out my own simple RPC implementation. The transport layer is absolutely not a problem, ZMQ works fine for me, so Remoting seems to just create more overhead (it means I have to introduce yet another .NET component on the Python side if I understood you correctly). Making Python calls local does not solve the problem at hand as well. To elaborate a bit, my primary task is to make the external API workable from Python, not to make the whole thing distributed. I could eliminate messaging altogether, but it works nicely and effortlessly as a glue between Python and C#, so the ability to distribute the system is just gravy.
I have been using Xamarin for the past 3-4 months and C# for the past 2.5 years. I've also done an app in Java, although never Objective-C. In my experience, Xamarin is not worth it if you already know Objective-C. There are only two reasons I would use Xamarin, if your company or co-workers already know C# or the app is stupid simple. Every update of Xamarin Studio or any of the related SDKs has resulted in hours of development down the drain trying to resolve project references and fixing target frameworks. While I appreciate what the Xamarin team is trying to do, they spend far too much time trying to add features to Xamarin as opposed to polishing the existing features of Xamarin. That being said, I love C# and would be remiss if I didn't supply future readers with some resources: * To get Async to work with Xamarin, you need to include [Microsoft.Bcl.Async](http://blogs.msdn.com/b/bclteam/archive/2013/04/17/microsoft-bcl-async-is-now-stable.aspx) in your projects. [Here](http://msdn.microsoft.com/en-us/magazine/jj991977.aspx) is a great article about using the Async/Await library in C#. * If you're trying to learn LINQ, [LINQPad](http://www.linqpad.net/) is a great tool that will let you run queries and other C# statements right alongside any tutorials you can find. As of now it is only available on Windows. * As a .NET developer at a .NET shop, [Code Complete](http://www.cc2e.com/Default.aspx) should be your bible. I have one on my desk at work, in the bathroom at work and at home. It is about code construction in general but is published by Microsoft Press so many of the examples are given in C#. Heck even the website for it is in .NET. * If you want to get into Xamarin.Forms, [Xamarin.Forms.Labs](https://github.com/XForms/Xamarin-Forms-Labs) has some great extensions and is open source. The code is solid and even if you don't want to use it, is great for seeing some Xamarin.Forms examples.
&gt; The language is just a tool I understand that, especially after listening to [this](https://www.youtube.com/watch?v=rX0ItVEVjHc) man talk for a while. However, I just learned to use the hammer. I don't want to learn the saw yet, even though we use them both to build the house. Regardless, my current focus **is** patterns. Unfortunately, each pattern I read about solves some particular set of problems (as it should), but I'm having a hard time tying everything together. For example, a game might use a bunch of different design patterns (Command and Observer to send events around and handle UI stuff, Flyweight to help with performance, etc etc), but I can't help but feel like I'm missing the bigger picture. Any idea how or where I might find resources for managing entire projects? Edit: also, thanks for your reply!
Hi and thanks for the reply. I can google CMS and read about it on Wikipedia, but would you care to elaborate? Why CMS? Any particular application? 
It is just for illustration. He's trying to say that sometimes there are operations on a class that are higher level and are really compositions of the basic interface, so he puts them in as convenience methods. However, I'd be tempted to put them in as extension methods. The added benefit is that you can create these higher level operations for interfaces. 
Yea, I understand that it's for illustration, but not everyone might do, and there really could have been a better example.
What I did was I took a BasicPage and tore it up, leaving only the functionality I implemented. I mostly wanted the page because of the pre-established markup, but now I realize that the code behind originally there is *actually useful*. Thanks for the help! 
It might be a _micro-optimization_, but if `IsTransparent` is checked very frequently and often, meanwhile the `MakeTransparent` method is only called once or very rarely, it might be worthwhile to do the `opacity &lt; 100` check once when set rather than every single time you need to check it. But again, this is a micro-optimization; I would only suggest it be done if you have a _measured_ performance impact from it. But yeah, for the most part I agree with you. The less state the better. Fewer multi-threading issues as well.
Not sure about that. The function might be inlined by the JITter. Plus the property/function invocation exists for both versions. (assuming neither are inlined) EDIT: Just double-checked, yeah, property methods _are_ inlined. At runtime, short of reflection shenanigans, there shouldn't be any method invocation overhead.
I'm not familiar with your specific use case but I recognize the symptoms. You have entered genetic hell. You want to be able to call a bunch of methods on you T that you know exist but the compiler won't let you. So you start adding generic interfaces. Then you want to put your objects into a List of baseT and that doesn't work, so you add a non generic interface to your objects and before you know it you've created an explosion of classes and interfaces. Your options to escape include covariance and contra variance might help (it didn't help me) and ditching your generics and just using polymorphism. Blah is a StateManager not this StateManager operates on Blahs. Blah : StateManager versus StateManager&lt;T&gt; where T : Blah. When you get to the point where you need to use reflection to call a constructor on your T, remember me.
Ohh, totally forgot about inlining...
Well, you could maybe use a dynamic proxy like [Catle DynamicProxy](http://www.castleproject.org/projects/dynamicproxy/). Might help clear up some messiness. But I agree that this usage is very hackish and I would only use it for explorative testing. I'd bite the bullet and use a code generator to build a wrapper (because fuck doing it by hand).
the question isnt what can you do... but rather, "What do YOU WANT to DO?" Anything you can think up, can be done with just about any programming language, though some are more fit for certain tasks than others. I would kill to go back in time to your age and start learning to program then.... When i was your age our high school had a communications technology class where we learned to write basic HTML pages in notepad.... That class ended up just an easy way to get credits, no one learned a thing... I wish I would have learned C# or Python back then.... TL;DR You can get a great career where you wont ever have to worry about money again for the rest of your life, and make video games and get laid by quirky chicks with brains, and basically do whatever you want to do as long as you arent an ass to people. Also, at your age, you can skip having to have shitty jobs for several years of your life.... DO IT! 
I think the Head First books are better for people who are new to programming entirely.... I used head first when learining python, and it didnt teach me a ton, but it got me started. I just recently started using a head first book for C# and am feeling underwhelmed entirely, as most concepts ive gotten to so far are familiar from either python or powershell, but I think they do a good job of explaining things from multiple points of view / angles , and enjoy their style of displaying information (words, pictures, drawings, exercises, all mixed up, repeatedly)... I just dont think their books are advanced at all, but are definitely good for a start. I go to manning press for their "In Depth" and "In Action" books for deeper understanding after being introduced to the basics via something light and hand holding like head first. Plus Oreilly Press is well known for great programming publications, just keep in mind that Head First is their entry level series...
I think I found out how to do it. I need a layer of interfaces without any generic stuff between each layer of the MVC. I only use the generics now to make it easier for inheritance and subclassing. You are always supposed to code to interfaces anyway so I guess this is a good thing. C# inevitably makes me design better where in java with the same thing I could have gotten away with it, because of wild cards. But this makes my design muchhh cleaner, and with interfaces, much easier to replace 1 part of the MVC. 
The problem is that you set the totalCalc variable always to the value which is calculated in the loop. What you want to achieve is to add it up each loop. totalCalc = totalCalc + calculate here Or which is even shorter: totalCalc += calculate here A += B is the same as A = A + B
I really like how Fluent Interfaces make behaviours really discoverable. You don't need to check if you've set all the properties you need. You can enforce correct usage and guide the user through the process.
First, `while(true)` doesn't ever return anything (nor does any other loop). Second, C# is mostly whitespace independent. While it is common stylistically to put the `while` clause on the same line as the closing brace, it makes no difference to how the program executes.
Youre right, I didnt completely read the question. I just saw "Im interested in learning C#...." and jumped to throw in my 2 cents.
when will this begin?
Generally, there isn't a reason to have an abstract class implement your interface. Generally you should use interface as your "code contract". If you want/need to have some defaulted behavior, then use an abstract class but really you pick one or the other unless you have some rare need for both. In this specific case, your abstract class for command is just duplicating the same same signature you defined in your interface. So you should just use the interface and have your commands implement ICommand. Also in this specific case, you defined your interface as update(IEntity e, float delta) but then you try to implement it as update(T t, float delta). Even though you have the type restriction on the class, this won't work because of contravariance. You should implement it more like this: public interface IEntity {} public class SomeEntity : IEntity {} public interface ICommand&lt;in T&gt; where T : IEntity { void Update(T entity, float delta); bool IsFinished(); ICommand&lt;T&gt; OnFinished(); } public class SomeCommand : ICommand&lt;SomeEntity&gt; { public void Update(SomeEntity entity, float delta) { throw new NotImplementedException(); } public bool IsFinished() { throw new NotImplementedException(); } public ICommand&lt;SomeEntity&gt; OnFinished() { throw new NotImplementedException(); } } 
You can use SQLite on Windows Phone and in store apps too, afaik. I'm not sure how the sharing of it would work, but there's synchronized data folders for both, afaik. You might have to use Sky/One Drive or maybe try asking on MSDN :)
okay, thank you but i've already some problems with using the controls. The form look and feel has been changed since Form1 inherents MetroFramework.Forms.MetroForm, but the controls are listed under invisble controls: http://puu.sh/bWeMv/5deb8ffbc6.png
When you haven't decided on the data type yet. Last time I used it to my benefit was when we had an argument whether or not the ID of users should be int or Guid. So we started with int until we made the decision to use Guid instead. Doing that saved us a lot of time. After we made the decision, we just replaced all the instances of `CUserId` to `Guid` and we didn't have to rewrite a single line of code (Well, we had to add a factory for new guids to avoid fragmentation in the database, but that was simple and expected). At least that's an example of the `using` statement to act as a typedef.
"The Keynote is streaming live on October 8th at 9am ET."
&gt; /u/itzwarty[2] is on the right track in my opinion, though my preferred naming would be something along the line of IThing and IEditableThing (since almost everything is already readable and using that in naming seems less efficient to me) where "thing" is "collection", "list", "dictionary", etc. One of my side projects deals extensively with file trees, so we actually debated on this for the longest of time. I agree with your thoughts that IThing should be immutable, IEditableThing should be mutable if immutability is the norm in your development ecosystem. We eventually settled for IWritableNode and IReadableNode, where IWritableNode extends from IReadableNode. The alternative was to make IReadableNode and IWritableNode's members distinct, then have IThing implements IReadableNode and IWritableNode. 
Yep... working with SortedList right now. SortedList&lt;K, V&gt;. Values is an IList&lt;V&gt;. Interestingly enough, sortedlist.cs's ValueList class only implements IList&lt;TValue&gt;, ICollection.
They're not out - they're postponed for the next version :(
How have you approached mocking (especially w/ the BCL)? For example, with the Process class, I've wrapped instances with an IProcess proxy using [impromptu interface](https://github.com/ekonbenefits/impromptu-interface) and introduced a mockable proxy class for any static methods I need. This feels cumbersome.
Could you elaborate more on the use case? What do you mean by the desktop app compiling the database? You just want a shared database schema, or should the data be shared as well? If you want to share data, you should host a dedicated database somewhere, at first anyway. Having both apps with a local database then replicating/synchronising them is not a trivial task.
I personally dislike line wrapping in code (in all but extreme situations). It seems very legacy to me. I don't mind it in documentation so much, but only in the summary section. I'd definitely leave the parameter tags on one line. 
Will they be available for viewing after?
I think I made it sound a little bit more complicated then it is. I have a windows phone app that is parsing data out of a website. They don't have an API so I don't have a choice. It downloads the webpage and parses out the data then displays it. I want to write a desktop app that does all of that. That way the Phone app can just access the database and not run as slow sometimes. Ideally I could just import the database into the WP project in visual studio and start using it. My question is all the tutoirals I found online talk about .sdf files while my visual studio uses mdf files for databases. I am just confused how I go about adding a database to my VS desktop app and that is compatible with WP.
I hope so.. don't know. 
I made it more clear in a comment below. Basically the desktop app will make and fill out the database. Then I want to import it into my WP app and use that. I want to publish the WP app on the marketplace so the database has to be complete when imported into my WP project. I am just unsure how to create a database in the desktop program that can be used on the WP project.
A nice slideshare deck about "Why Java Sucks and C# Rocks" http://www.slideshare.net/jeffz/why-java-sucks-and-c-rocks-final
Well, as I said, you could use SQLite. Or, depending on what kind and how much data you could even use an XML file...
Generally I set my line length limit to be however wide a source file is when split in a single Visual Studio window, so it depends on resolution. Also if the XML doc line is long enough it needs to be wrapped then it goes on a separate line as do the tags, e.g. &lt;param name="foo"&gt; Does some stuff with foo and whatever &lt;/param&gt; Just because I think it looks better. The one exception is the summary tag which always follows the above rule because I think it makes it easier to read at a glance. Your eyes see 3 green lines and immediately goes to the middle one. Again, all just my personal preference. Most of my C# coding style is based on MSDN and other C# code I read when I was teaching myself oh-so-many years ago.
So when I have had to retrieve or send things via query strings in the URL I've used tools like var foo = Request.QueryString["bar"]; which gets whatever value they sent and then just adding whatever parameters you need to add in a Response.Redirect(). I'm using webforms so I have no idea if this helps at all but just thought I'd try to help. 
I agree one should program with the next guy in mind. For me 100 chars is the sweet spot to display two code files side by side on a 23" monitor.
This makes sense to me. I know it will drive me insane when code contains some params split and some in-lined, but I suppose one can't have it all :P
Personally I like to create new exception types for these situations. It gives you two benefits. The exception exactly matches the situation (e.g. UnexpectedNullValueException over just NotImplentedException). In addition you can pack these custom exceptions with information relevant to the situation to aid in quickly debugging.
This looks like what I was looking for. Thanks.
so the purpose of your code is just to run a method of some sort and then to return to whatever page the request came from? I think you'd have to redirect I don't know of another way.
throw NotSupportedException. Especially in switch statements on an enum, when you have the default: clause and it's an enum member you are not expecting.
&gt; so the purpose of your code is just to run a method of some sort and then to return to whatever page the request came from? Exactly. I'm not sure if this is an odd way of doing things, but to me it is.
If it can never happen, then NotSupportedException would seem to be the better choice. NotImplementedException is more of a "todo", i.e. it's not implemented but it should be at some point. See [this blog post](http://blogs.msdn.com/b/brada/archive/2004/07/29/201354.aspx) for example. I would tend to use a Trace.Assert or Trace.Fail (so that it fires in release builds too).
couldn't you just write a class and then hand that to your senior dev and then he could just run your method from whatever method he's doing? I can see the purpose being abstraction I think but I'm confused as to what is going on.
Here you go: http://pastebin.com/TjqTRVX8 You had a lot of repeated code and I cleaned up a lot of it. There is no validation in the user input so if you need that, you need to add it. The if statement you had was pointless so I got rid of that. As for your while loop, you didnt have anything inside the loop that would ask the user to continue with more calculations. As for the total, at the end of the loop, I set up a total variable which adds the current + the total each time the loop is ran and that displays when the loop is exited. You did not have this before. Any questions, just ask.
&gt; Trace.Assert Ah. Never use that. Thanks. It looks like it displays a message box when it asserts false, which is useful. But that do you typically do when the code is running without UI? Or if it's a console app? 
And this is going to be the differences between shops and preferences. I have 3 27" monitors, and my one employee has two @27 so wrap for me is around 175 chars (with solution explorer and the toolbox open), and with multiple monitors I never have two windows on the same monitor. 
There is a great Nuget package called CsvHelper. I wouldn't try to do this yourself, it's a lot more complicated than it seems. http://www.nuget.org/packages/CsvHelper
Second this, don't try to reinvent the wheel if you can at all avoid it. See: [So You Want To Write Your Own CSV code?](http://tburette.github.io/blog/2014/05/25/so-you-want-to-write-your-own-CSV-code/)
For me, anyway: NotSupported means "We're not going to do this." NotImplemented means "We intend on maybe doing this (or should), but just not now." 
I like this logic. I'm raise NotImplemented when parsing encoded urls and the url deviates from whats expected. So not that we aren't supporting it or that we intend to. more of a we want to handle this but didn't know we had to until now type of event
If they're all text fields surrounded by " " then it becomes easy to read a line, replace "," (quotes included) with tab or pipe then split on tab (or pipe). Is it pretty? No. Will it work. Very yes. Edit: noticed you actually had this later in your post. With one exception Split() only accepts Char not String, there's another way to do this but I can't remember right off. RegEx Split or something.
Agreed. There's also a the file helpers library that let's you load an array of complex types from a delimited file just by setting attributes. Very handy.
Use a library that knows how to deal with the CSV standard meaning it knows how to properly deal with delimiters with encapsulated data. [Or be like the guys over in webdev and just guess which delimiter isn't used in your data!](http://www.reddit.com/r/webdev/comments/2gt55t/ecommerce_client_wants_a_discount_for_uploading/ckmfx5j)
NotImplementedException is often used in TDD as a way to make your tests fail until you implement the full logic they are going to test. [Read Me](http://stackoverflow.com/questions/410719/why-does-notimplementedexception-exist)
&gt; Trace.Assert Ah. Never use that. Thanks. &gt; It looks like it displays a message box when it asserts false, which is useful. But that do you typically do when the code is running without UI? Or if it's a console app? You can attach your own listeners to the Trace and Debug classes and do whatever you want.
ArgumentNullException?
What about code contracts?
This series converges slowly so you probably do not want to use this method to calculate 100.000 digits of pi, answering this question in the image you posted is trivial if you understand loops and recognize the pattern in the sum given. This is by the way a very well documented subject, you can easily find information about this online if you try.
http://stackoverflow.com/questions/20678653/c-sharp-equivalent-of-python-slice-operation
Read up on LINQ. what you want is something like: list.Skip(10).Take(50)
If you're dealing strictly with a List&lt;T&gt;: var slice = myList.GetRange(0, 50); If you aren't dealing with a List&lt;T&gt;, but do have something that's an IEnumerable&lt;T&gt;: var slice = mySequence.Take(50); // Equivalent python: myList[:50] var slice2 = mySequence.Skip(5000).Take(50); // Equivalent python: myList[5000:5000+50] var slice3 = mySequence.Skip(2); // Equivalent python: myList[2:] When searching for stuff, keep in mind that certain keywords will take you places you aren't looking for. "Select" is a very specific thing that LINQ does in C#; it's a way to transform a list of some form into a list of another form using a specified function. What you're looking for here is "get a range of elements from a list c#", or something similar. **Edit:** Idiocy on my part w.r.t how list slicing worked with Python
for stuff that can never happen as a result of the logic, I have a WTFException (shamelessly 'borrowed' from the Android SDK) since that's precisely my reaction. 
It's not an issue of "I haven't implemented this branch"; it's an issue of "if I understand what I'm doing, this branch shouldn't happen". A NotImplementedException, to me, says "hey, you better add code here". An assertion failure, more fittingly in this case, says "what you thought you knew about what this code does is wrong". I use a custom exception type, called something like CodeUnreachableException (although I'm open to a better name).
You issue is that Gather is expecting a single parameter, a string, as input. When instantiated, Func&lt;string, string&gt; Gather; expects something like this: new MethodList { Gather = Caller(First) } where Caller is: string Caller(string input) { ... } You're attempting to assign a reference to a method which takes a Func&lt;T, T&gt; as input, and a second parameter. That doesn't match the signature of Gather. You'll need to either change the signature of Gather, or change how you end up reporting names. If you go the latter, avoid generics for now. Since you're dealing only with strings, making a generic function isn't necessary.
Is your intention to simply invoke method1 with the parameter first name, and then method2 with the parameter last? If so, then you only need a simple modification. List&lt;Func&lt;T&gt;&gt; methods = new LIst&lt;Func&lt;T&gt;&gt;(); You then wrap the functions in a calling method that will encapsulate the parameters. Func&lt;T&gt; CreateWrapper(Func&lt;T, T&gt; method, T parameter) { return () =&gt; { return method(parameter); }; } methods.Add(CreateWrapper(method1, first)); methods.Add(CreateWrapper(method2, last)); You can also arbitrary define as many parameters as you want by making different factory wrapper signatures, and then invoke them in the for loop like so: for(var invoker in methods) { var result = invoker(); // will return string from method1(first) or method2(last), respectively }
Ok, going backwards. Method1 and Method2 are Func&lt;string, string&gt;, so Caller must be Func&lt;Func&lt;string&gt;, string&gt;, so Gather, being assigned Caller, must be Func&lt;Func&lt;string&gt;, string&gt;. 
 Use Simon Plouffe's decimal digit extraction formula to calculate pi. http://arxiv.org/pdf/0912.0303.pdf The general formula shown below: &gt; &gt; ∞ n*2^n*(n!)^2 &gt; π + 3 = Σ ------------ &gt; n=1 (2*n)!
why not just set the minimum size of the form, and let the listview control scale automatically, by setting the appropriate properties?
Because the width of the ListView stays the same when the number of items exceeds the vertical limit and pops up a vertical scroll bar. This adjusts the headers to compensate for the scroll bar, and prevents a horizontal scroll bar. If not, it will overlap the last column of data.
Seriously...who downvoted this? No offense to OP, but yeah...why not switch to something a little more modern and save yourself the hassle?
People here in reddit seem to have an avid preference for obsolete, useless technology from 500 years ago. For example, I always get downvoted when I point that people should be using modern languages instead of java, and I get the same here about winforms... I guess there's a lot of +60 years old developers around who aren't willing to move on from their zones of comfort.
I would say handle `DataException`, which is base class of all EF exceptions, followed by `Exception` instead. 
&gt; There's still quite a few enterprise and LOB applications using WinForms doesn't make any sense. That's like saying people don't have a choice between `IEnumerable` based (pre-generics) stuff and `IEnumerable&lt;T&gt;`. Both are part of the .Net Framework and they interop pretty well, but one replaces the other, simply because it's technically superior and modern. Guess who replaces who between winforms and WPF?
Interop between WPF and WinForms does work pretty well, but that doesn't mean OP gets to use whatever he wants within an existing application. That's also not going in to the differences between WinForms and WPF UIs, although they can be made to look similar.
Large corporations tend to have many enterprise level applications that are in older languages. These applications are rarely rewritten due to the amount of development and retesting. New apps introduce greater risk. Devs would love to write in new frameworks.... Unfortunately their higher-ups don't allow it.
Because sometimes big kid jobs give you given requirements and have set limitations. That's why.
&gt; People here in reddit seem to have an avid preference for obsolete, useless technology from 500 years ago. People in the real world making real money with real businesses prefer not to change working applications for the sake of "modernizing" the UI framework. If there's no business need, it's not happening. FTFY When you graduate, you will realize that.
&gt; Fuck you grandpa. Considering I'm almost 30 and pull in close to six figs working on "outdated" .net enterprise applications along with asp.net mvc apps - you can call me all the names you want. Good day, child.
&gt; If you're fucking limited by retarded managers and other useless crap, then that's your problem. &gt; It doesn't change the fact that my fucking comment is FUCKING TRUE. &gt; NONE of this shit would be required if OP was using a decent UI framework. What the FUCK is wrong about that? You sound like a complete idiot. Please check yourself at the door. Have fun at your silly startup that tries to save the world by finding where you parked your car... Edit - deleted comment was from /u/agleiva 
I think you should keep piecing together code from the senior devs but then you should make notes to try to understand what the code does and, more importantly, try to understand why they do it that way. Then when you're working on things at home, try to do these things yourself. Also many professional devs genuinely enjoy what they do and enjoy sharing their knowledge when they have time so definitely ask them when you come across something you're stuck on. The best way to get better at most things is to surround yourself with people who are better at it than you. It forces you to elevate your game. Another thing that I think is a good way to go is doing code Katas or programming exercises. They may seem small and too simple to you but then you're missing the point of them. The purpose isn't to accomplish the goal of the exercise, it's to accomplish the goal of the exercise in the best way you know how. Do several of them then go back and try them again in a different way. Most are deceptively simple, but by the time you get to senior dev level when you look at one simple task you'll immediately see 15 ways to solve the problem and you'll be able to pick the best one for that situation. Just do a search for code katas, there are dozens of good sites dedicated to it. Also exercism.io is pretty cool. It lets you do simple tdd katas and then subject them to peer review where you can get done constructive criticism on your code. Good luck to you.
I would strongly recommend writing something from scratch in your own time, this will help you thinking about the problem in terms of code, it will also help you with getting a better understanding of the way the languages work.
21 year old here. WinForms is pretty far from obsolete. Yes, it's dated, but so is Classic VB and Visual FoxPro...which my company uses still. Comfort zone or not, sometimes you can't move forward to the "latest and greatest" right away, or even quickly; as several people here have already commented on.
&gt; Valid point. There is always a retarded manager demanding the use of useless obsolete technology. That's a pretty blunt statement considering quite a few applications still use WinForms for...everything. &gt;Right. winforms looks like my grandma's ass, while WPF looks however you want it to look by using theming / styling / templating. And you can't theme or style WinForms? It takes more work, absolutely. But WinForms was designed for a different period, just like WPF. To each their own, though. I still prefer WinForms right now because I'm comfortable with it. I do imagine at some point I'll become more familiar with WPF, but for now WinForms does exactly what I need it to do.
WPF isn't supported by Mono, but WinForms is.
He was given the Leibniz method in the assignment.
Looks pretty good... I have a few observations: * The [finalizer will have some performance](http://anasoft.wordpress.com/2007/06/17/more-about-gc-dispose-and-finalize/) implications...it is better to use the IDispose pattern * The 'this.' accessor is redundant * IMO the class name is bad.. it is too generic.. In this light, I have done some refactoring.. what do you think ? public class SelfAdjustingColumnListView : ListView, IDisposable { private readonly int _resizeColumn; public CustomListView(int columnToAutoSize = 0) { ClientSizeChanged += CustomListView_ClientSizeChanged; if (columnToAutoSize &gt;= 0) { _resizeColumn = columnToAutoSize; } else { throw new ArgumentOutOfRangeException("Auto size column must be greater than zero"); } } protected virtual void Dispose(bool disposing) { if (disposing) { ClientSizeChanged -= CustomListView_ClientSizeChanged; } } public void Dispose() { Dispose(true); GC.SuppressFinalize(this); } void CustomListView_ClientSizeChanged(object sender, EventArgs e) { if (Columns.Count &gt; 0 &amp;&amp; _resizeColumn &lt; Columns.Count) { int colWidths = GetTotalColumWidth(); int newColumnWidth = Columns[_resizeColumn].Width + (ClientSize.Width - colWidths); Columns[_resizeColumn].Width = newColumnWidth &lt; 0 ? 0 : newColumnWidth; } } private int GetTotalColumWidth() { // could be changed to use a linq query int totalColumnWidth = 0; for (int i = 0; i &lt; Columns.Count; i++) { totalColumnWidth += Columns[i].Width; } return totalColumnWidth; } } There could also be the case of if an invalid column index is provided, then the list view should act as a normal list view, and the exception in the constructor not be thrown?
What are you finding difficult to get to grips with? I'm a C# dev and I've been a developer for 15 years. I remember what it was like starting out.
Think of a personal project that would engage and interest you .... and do it! If you can't think of anything, start by looking at /r/dailyprogrammer for inspiration. Personally I'm working on a family tree application at the minute to teach myself more about Entity Framework. Doubt it will ever be used but it's interesting enough for me as I can use my own family as test data.
In general, avoid using ContinueWith entirely. Rewrite like this: public async Task StartGetAndEnd2(object sessionData) { await client.executeBatchAsync(....) //returns task ...; //doing some logging of details here } ContinueWith is the old, pre-async, way of doing it.
The full source for ES is on [github](https://github.com/EntitySpaces/EntitySpaces-CompleteSource) and includes the full documentation. Most of the other online resources have disappeared now. You can also find an online copy of the documentation [here](http://esdocs.pixeo.be/).
You need the version called Visual Studio for Windows. The 'Desktop' version does not allow you to create Windows phone apps. You can only create Win32/64 desktop apps with the desktop version.
Working now - this was my typical tunnel vision after being in front of the screen too long. Thanks!
I agree with this. There's nothing wrong with using other people's code as a reference point in work, especially when you have deadlines to meet. But the more you programme at home the more you'll begin to fully understand what you're doing. Don't worry about feeling in over your head; I've heard people say if you don't feel that way you aren't learning. Whilst I don't quite agree, it can be daunting the amount there is to learn. It sounds like you're doing fine, particularly if your company are happy with you but putting in time at home will help you improve.
Thank you so much. I did not notice this version at the time. So I need both installed as I do also mess about with desktop apps from the second edition of the book?
I don't know the book, but what you are saying sounds right. I have both the Web version and the Desktop version on my laptop, for instance.
Well one just focuses on Windows Form Applications which I was using 2010 express for. The other you need Blank App (XAML) as well as the above and later a Windows Phone App. Thanks again, I shall download the other version later. I cannot justify the expense of buying Pro as a hobbyist programmer and having it all under one roof. 
I am sorry but can you explain a little more what you mean by executing in the adder's thread? My understanding is that if the antecedent task is complete and I do a continuewith on it, it will run in a seperate thread but will start immediately. Your comment leads me to believe that it would block the thread that is doing the continuewith until the internalFunc is complete. My goal with this class is to create a couple of these and they should act almost as seperate task(thread) pipelines that I can add work to. At no point do I want the Add method to block while the _internalFunc is doing its thing. I had thought of having a single thread that loops forever over a blocking collection that I would add too. I thought that would be too much though since I could be creating a lot of these objects and didn't want a blocking collection for everyone of them. I had hoped this would allow me to asynchronously add work to a running task and get the output at each step. If continuewith doesn't start the task up again when called on an antecedent task that is complete that would be an issue though.
Thanks for the tips! I appreciate the feedback. Looks like I need to modify it just a bit. I was definitely planning on changing the name, just popped that in there temporarily.
This. I did this out of very minor necessity, it was more of: how would I do it? 
Task.ContinueWith defaults to TaskScheduler.Current when selecting the task scheduler to use. This means that it depends on the currently executing task whether the code will continue on the caller thread or on a background thread. 
Looks like you are duplicating TPL Dataflow. Check to see if that meets your needs before going too far down this route.
Spend time talking to the senior devs about the code you're copying. Ask them how they came to solution they choose. There's a lot of us that really enjoy helping people understand stuff. One of the best parts about programming is the "ah ha!" moments and those get fewer and farther between as you gain experience but it can be almost as good helping some one else reach those points. It's also a good practice to talk through programming strategies to keep yourself sharp. Sometimes talking to novices in particular will expose you to new ways of looking at the problem that you wouldn't otherwise think of. It's a good practice for every one involved. There are some people with inflated egos that who will see this kind of thing as beneath them. If you encounter this, find some one else, that person probably isn't as great as they think they are anyway.
The distinction is subtle, but I understand the need for the difference.
That's true. I hadn't thought of that. I do use NotImplemented often in interfaces for methods I haven't yet come around to implementing, but they're currently mocked in some way.
lol. brilliant
If one is willing to create a custom exception class, then this is by far the best choice as it succintely conveys the intent. However, imagine the embarrassment when QA tells you, "so we were able to reach some code that you claimed was unreachable. are you sure you know what you're doing?" to which you respond with, "well at the time that i wrote...." which is when they tune you out. QA knows how to tune out a programmer who is sounding defensive. At least with NotImplemented and NotSupported you can be all, "yeah, we'll have to implement that. write it up as a bug". Or better yet, "that scenario was never an explicit requirement. if you want us to support that, then we need a feature request", a response which makes project managers totes happy
Something to think about.
That is the plan since I can't use .net 4.5 I am forced to use something like this for now
I think I am following you. I ran some tests with the above code and tried the following execution path. Assuming the DoWork takes exactly 5 seconds to run using a Thread.Sleep I did two adds then waited 12 seconds. I check that the internalTask was at status RanToCompletion. Then called add two more times and printed out a done message. What I saw in my console output was Result1 - 5seconds Result2 - 10 seconds Done - 12 seconds Result3 -17 seconds Result4 - 22 seconds This would mean that the even though the internalTask was completed the subsequent adds and the associated ContinueWiths did not execute synchronously with the thread calling the add method. Instead they executed synchronously with the original internalTask which is what I wanted.
I've tried embarrassment-driven-development and I believe it hampered my growth as a programmer. I feel a lot better, and I think that my code is better, when I try not to associate my ego to the code that I write. If I make a mistake and someone finds it, then I would rather simply attend to the mistake and fix it than attend to who feels what about whom.
And, surprisingly, it is actually better than most third party libraries.
Tell them .net 4 won't be supported for very much longer. Microsoft wants everyone on 3.5sp1 or 4.5.current.
I use them. They are still developed, but they are available as an extension now: http://research.microsoft.com/en-us/projects/contracts/
I have been telling them but its the government so they move at a snail pace. I have heard they might release new guidelines at the end of the year so hopefully we can move up
If the "not supported by vendor" argument doesn't work I can't think of anything that would. Good luck.
Resharper, she say: * Make _internalFunc readonly * Simplify assigning to _internalTask with a ternary operator * Simplify Dispose() by eliminating the unnecessary block. Net result: public class AsyncWrapper&lt;TObject, TInput, TOutput&gt; : IDisposable where TObject : class { private readonly Func&lt;TInput, TOutput&gt; _internalFunc; private Task&lt;TOutput&gt; _internalTask; private bool _isFrozen; public TObject Item { get; private set; } public AsyncWrapper(TObject item, Func&lt;TInput, TOutput&gt; workFunction) { Item = item; _internalFunc = workFunction; _isFrozen = false; } public Task&lt;TOutput&gt; Add(TInput work) { if (!_isFrozen) { _internalTask = _internalTask == null ? Task.Factory.StartNew(() =&gt; _internalFunc(work)) : _internalTask.ContinueWith(t =&gt; _internalFunc(work)); } return _internalTask; } public void Dispose() { Dispose(true); GC.SuppressFinalize(this); } private void Dispose(bool disposing) { if (!disposing) return; _isFrozen = true; _internalTask.Wait(TimeSpan.FromSeconds(5)); _internalTask = null; Item = null; } } 
I'm one of those old fart developers. We use mvc 4 and entity framework on new stuff. We can't justify rewriting everything. You are going to be very unhappy in most professional environments if you are this rabid about winforms.
@OP You can use something similar to this numerator = -numerator; temp = numerator; temp = temp / denominator; sum = sum + temp; denominator = denominator + 2; Just, make sure you understand how it works. 
&gt;If you don't like it, fuck you, I don't give a fuck. I still get to use the latest and coolest technology while you're green in envy looking at how you're keeping all your retarded COBOL around. &gt;If you think that's not a viable business model, fuck you again. The company I'm working for is the fucking leader in it's target market You're just a bundle of professionalism, aren't you? Clearly, your buddy's company and mine have vastly different definitions of "industry leader". 
Awesome, thanks for showing me that subreddit!
Mainly I'm having a hard time developing a developer mindset. I am getting better in terms of what I know language-wise, but even though I know how to do stuff, I can never figure out what to use to solve problems/build projects. I liken it to knowing a decent amount of words and sentences in a foreign language, but having no idea *when* to use them correctly.
Yeah this is what I was doing before, but apparently I was asking enough questions that my boss and the senior dev sat down with me and (in a very friendly way) basically said I was causing the senior dev to lose focus and as a result, they were gonna set up two times per week where I can have one on one time with the senior dev. I try my best to make good use of this, but 95% of the questions I have aren't searchable online (stuff that pertains to proprietary code we've written, etc.). It's really slowed down my ability to learn my company's code I fear.
To be honest, either way is probably OK. If you've done things right your code will never be executed anyway!
Oh yeah, I definitely understand. It's one of those situations where it really sucks, but I agree with their decision, it'd be the decision I'd make if I were in their shoes. It's just causing a major slowdown for me in terms of learning our code, so I'm desperately trying to find a way to supplement it.
Ok, that makes sense.
Can I ask why you would have an exercise like this? Seems like an exercise doomed to create more and more work down the road. Excel will have problems with double quotes in the html as well as the fact that only 32767 characters can fit in a single cell which is a lot but not for some html files. Your only real solution to the formatting is going to be: 1) Make sure your cells never go over 32767 characters. 2) Surround each cell with double-quotes 3) Replace all double-quotes in the html with \" (but be aware that this counts as 2 characters and will show as \" in the field) 
I'm partial to the SQL method of distinguishing literal single quotes vs parsed, which is ' is parsed as SQL and '' is parsed as a literal.
You need another variable. You shouldn't be using purchase for both the input and the total number of cups ordered. There are other problems but start with that.
One quick error, the tax should equal 1.0775 because you want to add it to the price. I would also recommend getting rid of the first question and just use the second one in the while loop. Ask the question, do the math, loop The loop should look at coffeeOrder instead. Attempting to convert a string to a double will lead to an error. 
Can you use the Microsoft Async nuget packages?
It's for a class. She said to avoid for loops also, we have to use while.
ah, i just copy pasted it straight from his demo code x) thanks for the fix
All he's using the loop for is looping the question. How many cups ? &gt; 4 How many cups ? &gt; 5 total number of cups = 9 and total profit is a squintillion dollars
There's clearly no UI thread here. It's console, single threaded, and your weird hatred of while loops is probably just going to confuse a new programmer. And if you don't see why this code needs to be looped, you need to re-read the question he was tasked with solving.
I tried not to change your code too much. Here is how you would want to go about it. http://pastebin.com/dreLjVpm Edit: Sorry if there are errors, dont have VS on this pc so I was stuck with sublime text.
protip: http://ideone.com/ is freaking sweet.
/r/csharpmasterrace
Xamarin Documentation and the official Nadroid Documentation. C# + Xamarin isn't too different from Java + Android.
You should remember to always use the DECIMAL type when dealing with money, not double or float. If numbers must add up correctly or balance, use decimal. This includes any financial storage or calculations, scores, or other numbers that people might do by hand. If the exact value of numbers is not important, use double for speed. This includes graphics, physics or other physical sciences computations where there is already a "number of significant digits". Double's accuracy is only 16 decimal digits, and after just a few arithmetic ops, errors will quickly accumulate large enough to creep into the 15, 14, 13, etc. digits.
wow thank you! I bookmarked that. I have never seen this product on any site that I looked on about a C# CMS. Unfortunately I wont be able to use it on my primary host, but maybe I can develop some things on another host.
Here's how i'd do it: https://dotnetfiddle.net/BDEvLs
I prefer [Squirrel](https://github.com/squirrel/Squirrel.Windows) for this myself. 
I'll try anything that's simpler and more reliable that ClickOnce. What a cock-up that is. 
I'll have to take a look at that as well.
Will this work on files that you want to run as administrator? I seem to recall clickonce doesn't work with files that you need to run as administrator.
There's a whole subdiscipline called software architecture. That's where you're splashing around right now. Google for some resources on it.
Chrome's silent updates have caused me hours spent Debugging issues that came about as a change and not my code. Cors Auth change in 37 was the latest 
God that was frustrating and hilarious.
I have a dll that I use for every project I have that requires me to connect to my database. I can modify it to be generic for everyone to use so you can access database tables without needing to do this every time. All you should need to do is pass your connection string in to the constructor and call Execute (for inserts, updates, etc.) or ExecuteQuery (for selects) on the object. I can add scalar methods as well if necessary.
I would think the db needs to be in the same directory as the .cs file in which you wrote the above code, not the .sln file.
I found a solution online that said I needed to add the assembly dll but when I do that, I don't have the ce dlls. 
Not really sure what the ce connections are meant to do. My dll just uses SqlConnection.
SQLCeConnection is SQL Compact Edition. You are using full edition and need SQLConnection. 
Thanks. Your comment helped me figure it out. I just removed the ce. I'm not using the express edition so i didn't need the ce. 
Thanks. I got it. I found the ce was express edition specific. I imported the SQL libraries and removed the ce. It works fine. Now. 
If you're up for a next step you could try out entity framework!
For future note, having worked with SQL CE before: It sucks. SQL is great though. If you need a compact/portable database I would personally go SQLite over SQL CE.
Yeah. It seems much better. That's the next step in the video set. Its also what ill be learning in class. I was trying to get a head start by watching the videos before we hit that section of the course. 
Thanks for the suggestion. I will keep that in mind. I went with the full SQL installation because it was available to me, free, and I didn't know the differences when I started. 
It's good to learn the basics but Entity Framework is really easy imo
Yes that character difference was the very first thing I mentioned in my comment
Not on subject, but two interesting things about C#: 1. Verbatim string literals are useful when working with file-handling code. `"C:\\file.txt"` is equal to `@"C:\file.txt"` 2. Console output can be parameterised. `Console.WriteLine("A=" + a + ", B=" + b + ".");` is equal to `Console.WriteLine("A={0}, B={1}.", a, b);` Bonus feature: things like `DateTime` can be easily styled with the latter syntax (think `{0:yyyy-MM-dd}` to produce `2014-10-12`). `String.Format()` also works like this.
I haven't looked at the code but the fact that you put one thing into a database and pull something different out can be a number of things * The data type of the field in the database is causing the values to get mutated. Ex: Converting unicode to ASCII * Your method of reading and writing to the database are not compatible and the data is getting mutated * The data is coming out of the database fine, but writing it to excel is causing the characters to get mutated. Put a breakpoint and check the data before writing it to excel. This will narrow it down to either writing the excel or the database. Next look at the field inside the database. This will narrow it down if the data is being corrupted during the insert or after the retrieval. 
How exactly are you doing output to CSV?
String.Format() does the same thing but returns a string, I use it a lot.
http://wyday.com/wybuild/ is another alternative that I've come across, anyone got any experience using this? I was looking for an auto-update solution that could update Windows services.
That looks OK. Do you know how to set a break point, inspect values and step through the code? That's what I would be doing here
Can you show how you are creating/initialising the text writer?
Your post doesn't really explain your problem. Are you concerned about the apparent gap in the identities? A possible explanation is failed transactions. As a transaction begins, SQL Server increments the seed, and a rollback doesn't "free up" that seed value for reuse. So any timeouts, constraint violations etc can cause this. EDIT - you deleted your question. Doh :)
The way you describe is actually faster. And I agree that it is more readable as you don't have to jump back and forth to mentally match the tokens with the parameter values. However, we seem hold minority opinion on that one. 
Dude, I hope you're a student l, cause they get Pro for free through Dreamspark!
The very first thing you see on the msdn page for GetAwaiter is &gt;This method is intended for compiler use rather than for use in application code. The way you use a httpclient await is like this &gt;&gt; &gt; var client = new HttpClient(); &gt; var response = await client.GetStringAsync("http://www.whatever.com/thing"); // or GetAsync
You're not supposed to use TaskAwaiter. When you mark a method as async, you can use the await keyword with asynchronous methods. [I've modified your code and added comments.](http://pastebin.com/vVnJpU4U) Anyway, I'm not sure exactly why you're calling GetAsync in the first place since you don't seem to make use of it at all.
What's Splunk in a nutshell? I went to their website and they have dozens of areas.
Thanks!
Big data aggregator, indexer, and analytics/visualization tool. Basically a way to gather all your unstructured data into one place and query it using end user tools instead of raw code. It's sister project is Hunk, which allows Spunk to treat Hadoop as its file store/query engine.
Try something like this, although it may be overkill: http://stackoverflow.com/a/6166341
One thing to keep in mind is excel has weird unicode support, especially with csv. It tends to handle unicode inputs okay(ish) and handles unicode within xlsx files without too much trouble but it will not write unicode csv files, only windows-1252. Really, really stupid. libreoffice handles unicode much more gracefully. I'd try your same data in there to see if there are any differences. Might help narrow things down. One thing that really helps me in cases like this are some functions I created to represent strings in ascii-print friendly forms. Basically, anytime it finds a codepoint not in ascii it replaces it with /U+XXXX. Then strings can be printed to the screen or written to files without fear of the console or other tool mangling the data. I have fixed a lot of subtle bugs this way by realizing I was pushing unicode or windows-1252 into a tool expecting acsii or latin-1. Once I even found a trailing blank codepoint in some input that wasn't an ascii space, preventing my string equality from working. I would have had a nervous breakdown trying to figure that one out if I hadn't been able to just display the codepoints.
Okay, thanks a lot! I have almost decided to continue with my own tiny implementation of RPC, but it will be nice to compare many alternatives.
I am aware of that but no I'm not a student. Express covers my needs fine to be fair as I said, purely a hobby. 
Perhaps the database the api is interacting with has processes running intermittently locking up tables and slowing response time. Is it a consistent time delay?
I have found that this often causes latency issues when using httpclient http://stackoverflow.com/questions/11228324/new-httpclient-proxy-settings-issues Setting in the App.config file the use proxy to false shown here https://social.msdn.microsoft.com/Forums/en-US/54f3e697-cff6-4f40-b008-fc4a5478efe3/appconfig-and-proxy-settings?forum=netfxnetcom
Have you tried setting the proxy property to null http://stackoverflow.com/a/3603413 or... var httpClientHandler = new HttpClientHandler { Proxy = null, UseProxy = false }; var client = new HttpClient(httpClientHandler); 
[Discussion about this from yesterday](http://reddit.com/r/csharp/comments/2izigx/autoupdaternet_an_easy_to_use_alternative_to/)
Yes. Didn't work!
thanks!
Haven't looked at other articles yet, but perhaps getting into try-catch blocks when using async is a good next topic. Just an idea.
This is was actually simple to understand. Some articles can really get into some serious complexity.
I tried to deliberately keep it simple. I am working on a follow up that shows a similarly simple example of using async await to update the main UI thread. Should be posted tomorrow.
Sounds like a good idea. I'll add it to my list.
Your program was almost exactly what I needed. Going through my professor lecture notes, I just realized, I'm not suppose to do "do loops". I have to pay closer attention next time. 
Cool! Can you please enumerates situations you'd need to use Async Await in a web project like MVC 5 ?
If I were you I would focus on breaking down business requirements / processes into discrete chunks of logic. Forget about language syntax, dont even open a word editor... Get some sticky notes, or some notepads, and a pen.... Make class diagrams and flow charts breaking down your complex business requirements into simple objects with properties and methods to acomplish what you need done... It sounds like you arent having a problem translating specific functionality into syntactically correct code... but rather having trouble breaking the big picture down into little pictures, and essentially architecting the solution.... Remember, as a developer, your goal is to solve problems, not write code! writing code just happens to be how you solve problems, but identifying those problems and how to solve them is KEY to getting into the dev mindset.... atleast it has been for me, a administrative scripting guy who is learning csharp to try to move into a dev position as well! (not sure how relevant my opinion is to you, but i hope it helps)
"Quit staring at me, you've got those bug eyes." "Hey! sorry about the bug eyes thing, I'll be in my office."
The Task.Delay(1) somewhat bugs me. Isn't there a better option? Could you use Task.Run to run LongRunningOperation or is Task.Run considered bad practice? e:typo
Is the data something you want to archive or keep around for later use?
Why would you want to write this as a for loop? What are you iterating over? 
Any non numeric input will make your program crash...
this should work. for loops don't actually need any conditions to be valid syntax, and since the only thing you care about is the boolean (you don't need an iterator) you can just leave it a blank statement for(;!finished;){ } 
Came to ask this. This is a right tool for the job kinda situation. Using a for loop here is completely incorrect, if it's for an assignment, your professor wants to see if you can generate an unending numeric sequence (imo). For belongs in iterative situations. But, that said: for int response = 0; response != -1; response = 0
&gt; When you are converting from synchronous to asynchronous code, any method returning a type T becomes an async method returning Task, and any method returning void becomes an async method returning Task&lt;T&gt;. I think you have this mixed up sir. Shouldn't void be returned as a Task, and a returning function returns Task&lt;T&gt;?
Are you gonna us do ALL your homework?
&gt; I already had quite a bit of MVC experience but MVVM just seemed unnatural MVVM is the simplest thing I've seen in my life. In fact, I cannot even conceive writing a UI any other way. MVVM is just *"Simple, simple properties and INotifyPropertyChanged"*, as opposed to a bunch of horrible procedural code things like `this.TxtLastName.Text = person.LastName;`and endless chains of event-handling "code behind" type of bullshit you find in other paradigms, which produce tight coupled, UI dependent code that cannot be properly tested nor ported to other frameworks / platforms. All my UI logic code currently lives in .Net Portable Class Libraries, and I'm looking forward to use it in platforms like Xamarin.Forms. &gt; I was having to do weird workarounds to follow the MVVM design pattern with WPF Elaborate? Again, it's just `INotifyPropertyChanged` and `{Binding}`. I don't see a problem with that. &gt; I found the way to do bindings a little cumbersome Surely less cumbersome than previously mentioned procedural code? 1 binding is equivalent to 2 lines of code, since you need a View -&gt; Model and a Model -&gt; view if you're doing the pipework yourself. &gt; difficult to troubleshoot/debug XAML is declarative, and declarative code cannot be "debugged" in the traditional sense. you cannot "step thru" declarative XAML, just like you cannot "step thru" an XML .config file... the problem is your approach, not the framework. Also, binding errors are properly displayed in the Visual Studio output Window, and if you're looking for design time support / Intellisense, Visual Studio 2013 has Intellisense for XAML bindings, provided that you have specified a proper `d:DataContext` so it knows what type you're binding against. &gt; In general I just felt I had to rip the project through WPF instead of WPF helping to make the interface part easier That's because you're too used to winforms. Now, your questions: &gt; Does WPF have a generally steep learning curve? No. The problem is that most developers are used to a procedural, winforms-like approach and they try to fit this approach into WPF. In fact, I'd argue that winforms has a greater learning curve because many seemingly simple things (or things that *should* be simple in any decent UI framework) require horrible practices and hacks such as that "owner draw" shit, or force you to resort to P/Invoke in order to call underlying Windows APIs which should really be part of the framework instead. I started to learn WPF without a previous winforms background and it was super natural for me, all along the way. I can't conceive having to use a framework like winforms that basically does not let you do anything except the default stuff and does not have any features whatsoever. &gt; Does it sound like I'm doing something incorrectly and therefor struggling with getting to my goal? Yes. Basically everything. Forget all you think you know from archaic winforms and create your application as a series of classes implementing INotifyPropertyChanged with no UI at all, and THEN write the UI. It will become self-evident. &gt; Has WPF improved significantly in 2 years? No. WPF is stable and usable enough that no huge "features" are really needed. There is a list of small productivity improvements in my "WPF Wishlist" but that's all. &gt; Any suggestions for obvious things I may have missed? Many people completely miss the `ItemsControl`. It is one of the most powerful features of WPF. All items-based controls in WPF derive from it, from ComboBox to ListBox to Menu to TabControl to whatever items-based or "collection" like UI you need to create. I've done all sorts of things using it from breadcrumb bars to "tagging" controls (similar to when you tag a question in StackOverflow) to Diagram designers to Sudoku boards. Again, it's a really powerful concept. If you're doing any sort of game board, an ItemsControl (or even a ListBox) is definitely a good starting point. Note how this is mind-blowing if you think about what the ListBox can do in winforms. &gt; Are there any key decision points for going for WPF vs WinForms? Yes: - If you're willing to use deprecated technology, or if you're going to run your application in my grandma's 486 PC with DOS 5.0, then use winforms. - For modern applications, ease of development, extensibility, customizability, testability, and portability and reusability of your application logic and UI logic, use WPF. Basically, winforms is completely useless once you learn WPF. BTW, I have posted countless answers in SO to developers coming from winforms struggling with WPF... I suggest you search for whatever issues you're having and you'll surely find a proper "How to do this in WPF, the right way" type of answer there. Otherwise, please elaborate on what particular issues / difficulties you're facing and I can probably help.
I'd agree with that. I'm comfortable with WPF and have no wish to go back to Winforms. Prism is a whole different beast, and if you're trying to learn that at the same time you'll struggle. Just start with the basics. Check out a couple of basic articles on: Panels - http://www.codeproject.com/Articles/140613/WPF-Tutorial-Layout-Panels-Containers-Layout-Trans Data Binding - http://www.wpf-tutorial.com/data-binding/introduction/ Once you get the hang of it I find WPF much nicer to work with than Winforms. You have less hoops to jump through to do simple things. You will still find yourself having to search for more complex topics but with a decent grasp it gets easier to find. After that look into some simple MVVM tutorials. It's not so complicated in itself, just some implementations are more complex/abstract than others.
This piece could also use an explanation, it is not clear why those structures are used
I'd recommend Jon Skeets c# book, he really goes into the details of the new async features and how they work internally. 
Im an async noob but I'm guessing you would mainly use it when writing to the db. I see it a lot in the EF6 + Web API and MVC tutorials. 
Just as confused here. What's the delay do again? I think he just put that in there to simulate a file read or db write. 
I've actually found myself thinking about how I might implement something I see when I'm programming a lot lately. Like if I'm paying a game, I end up thinking a lot about how they do what they do. As for your write it out idea, I'm not sure I follow. Say I'm tasked with creating a web form that takes user input and sends it to a database, ads then on another part of the website that data is retrieved and displayed as a big list of info. How would you write that out with post its? Thanks for taking the time to reply. I actually really like learning from/with people near my level. Sometimes (especially learning your first language) the senior devs know it so well they can barely explain things to you without going over your head.
I've seen these sorts of offers from companies before. If you can't find anything else at all... eh, I guess you could take it but most of the developers that come out of my school have better options.
I think you might be going about this the wrong way. You can use things that are inherently undeterministic provided you do not rely on them in such a way that you need determinism when you may not have it. A dictionary is unordered in the way that there is no clear order to it. It's more a soup than it is a plated appetizer. You specify contents by their identifier, and there is no enumeration to be done on them. Basically, there's no concept of "next" when you have a current value in a dictionary. If you use dictionaries for their intended use (key-value storage) they're probably going to be fine. The big things you need to worry about are floats, which as you've learned can be non-deterministic (and that's not a C# issue, that's a silicon issue). The issues within C# that you need to worry about are assumptions. For example, dumping data into a list via multiple threads. The order will not be deterministic. Most multithreaded coded will probably be ripe for many many error checking and validation code. Confirm what you're passing is what you expect to pass. Network code is something you will probably have to do a lot of confirmation on. Drop a packet and don't realize it will hamper your operation consistency. I'm sure you already know to avoid anything random that might affect gameplay.
First, thank you for your extremely well thought out and thorough answer. Of course I have been using INotifyPropertyChanged. I don't have any code in front of me but I remember having a ViewModelBase class. Each of my ViewModels would derive from this and I believe IT implements INotifyPropertyChanged. The last time I _really_ worked with WPF was using VS2010 (I believe). I found it somewhat difficult not to debug XAML itself (the formatting/syntax) but rather trying to figure out "why doesn't this text box display the values I want it to". It almost always ended up being DataContext being set incorrectly. I dove pretty deep into creating my own controls (IE a control for the Blackjack Table, a control for a player's hand, etc) and I struggled with finding the proper way to do the data bindings that felt "right". To me, the data binding stuff was a little trial and error at times trying to figure out the right hierarchy between an object's datacontext, it's parents data context, etc. I don't remember IntelliSense being much help at the time and maybe VS2013 has greatly improved upon that. I think just that piece could go a long way toward simplifying the process. I remember having to have the MainWindow's DataContext be TableViewModel, each player's hand's DataContext being a property of TableViewModel which was another ViewModel, the controls being another object off of TableViewModel... Example: TableViewModel.DealerVM was a ViewModel with all the Dealer's options and state. The Dealer Control on the board would have a Binding=DealerVM... Maybe I'm doing it correctly but it didn't feel "elegant" and I just always felt like I was doing something incorrectly. I welcome any feedback you might have. Two years ago there weren't a whole lot of (what I felt were) high quality WPF tutorials and explaination. A lot of CodeProjects with little comments and "do it like this" with 20 lines of unexplained code. I would imagine the info out there has vastly improved.
Your definition of determinism is wrong. You are talking about "undefined behavior", not non-determinism.
&gt; remember having to have the MainWindow's DataContext be TableViewModel [...] The ViewModel is, in practice, a sort of *adapter* or *intermediate* between the View and the Model. This means that (while purists will disagree) you don't really *have to* create a ViewModel for *every* single little piece of information you want to display. Instead, you will *only* place a ViewModel between the UI and the Model when the interaction between these two is complex enough to justify the existence of an intermediate step, or *adapter*. This means that, in practice, your TableViewModel could contain a List&lt;Player&gt; rather than a List&lt;PlayerViewModel&gt;, where each instance is the model itself, rather than an "adapter" that wraps the model, see what I mean? This simplifies many scenarios and reduces unneeded (often over-engineered) structure. Apply this same concept in different scenarios and see how your overall code base becomes significantly smaller and simpler. Again, it's very difficult to talk about theoretical solutions to theoretical problems rather than something concrete. Feel free to post some code here or a question in StackOverflow and I'll be glad to help. 
This sounds like something where you might want another service or application crawl and parse the target website and then store the data in a database. Then just have your phone and desktop app pull from the database.
FP math in C# is not deterministic. From this SO: [link](http://stackoverflow.com/questions/14864238/coercing-floating-point-to-be-deterministic-in-net) The main issue appears to be that the CLR allows intermediate results to live in FPU registers that have higher precision than the type's native precision, leading to impredictably higher precision results. An MSDN article by CLR engineer David Notario explains the following: Note that with current spec, it’s still a language choice to give ‘predictability’. The language may insert conv.r4 or conv.r8 instructions after every FP operation to get a ‘predictable’ behavior. Obviously, this is really expensive, and different languages have different compromises. C#, for example, does nothing, if you want narrowing, you will have to insert (float) and (double) casts by hand. http://blogs.msdn.com/b/davidnotario/archive/2005/08/08/449092.aspx
Yes, is that not okay? I'm trying to get this question answered quickly. If that' not okay, I can remove this post.
I don't think I would ever sign a contract that stipulates that **I** have to pay **them** if I decide to exit my contract early. That sort of stuff is reserved for contracts between businesses with penalty clauses. I would never sign away personal accountability like that. *shrugs* Just my opinion.
I mainly agree with your post, except on one point: two ways data binding of a multiple items selection in a listbox is not, IMO, simple. No native way to bind a command on an event is cumbersome. That's when you need the workarounds.
Oh, I like third party and I have no problems with attached properties or whatever, but it is neither obvious or easy to grasp. In the case of event-command binding, I **do** see it as a workaround, and for multiple items binding, this is just a flaw in the framework. We use an extensive internal library at work, so all these corner cases are handled, but WPF is neither, IMO, a simple framework to grasp nor a complete one.
 int input = 0; for (i=input; i &lt;&gt; -1; i++) { input = ReadAndConvertLine(); } 
but i suppose it will eventually wrap around to -1 if u let it go long enough.
&gt; WPF is neither, IMO, a simple framework to grasp nor a complete one. Sure, nothing is perfect, or even near perfection, but seeing what's out there, WPF is *by far* the best UI framework in existence. by comparison, winforms, and most other stuff outside .Net such as java's Swing (which is basically a crappier winforms) look like they were designed by a cave man from the stone age. You're pointing at problems with selection DataBinding and event-to-command, while most other UI frameworks **don't even support** DataBinding or anything like Commands, and force you into a shitload of code to perform simple tasks... see my point?
It is one of the best frameworks I've used (The other one is Qt - I'm in love with the Qt codebase). However, being better than the concurrence is not good enough - I expect things to be inherently good :) So yes, I'll take WPF over winforms, gtk, swing, ... any day. But it's still far from perfection. Edit: I forgot to answer the question. Yes, I do see your point, and I think we globaly agree, I *just want more because it's frakin' 2014*.
100% right.
Not sure why this got downvoted. It's the right answer. It may be stupid code but it's a stupid question.
I was mentioning dictionaries being unordered simply because it was the only quirk I've come across that wasn't immediately obvious to me. I know now to use them properly, but I didn't know to look out for something like this: Dictionary&lt;int, int&gt; foo = new Dictionary&lt;int, int&gt;(); foo.Add(1, 2); foo.Add(2, 1); foreach (int bar in foo.Keys) { // doing things in "order", but apparently non-deterministic? } Luckily none of my game specific code does anything like this, but it's good to know that it is something I shouldn't do. I've stuck to dictionaries intended use-case. I've also stuck to single threading for all game stuff because tracking down race conditions with threads would drive me mad, and I haven't done any large multithreaded projects so it's a bit of a weak spot for me. All of the network packets are parsed by the main thread after passing all validation (to avoid side effects of changing the game state at the wrong time) All of the network code has been built up pretty well. I have built up ACKs, resends, checksums, all of the good stuff. The game will pause if it hasn't received a end of turn packet from one of the players, I've followed the [1500 archers](http://www.gamasutra.com/view/feature/131503/1500_archers_on_a_288_network_.php) model. All calls to random are seeded the same: I create a new random with a known seed and use the first call to next to avoid calling random.Next an unknown amount. 
Yeah that was surprising to me. Luckily I haven't relied on their order, but it was something I uncovered through googling "C# Dictionary determinism". I've been googling a lot of "C# &lt;blank&gt; determinism" to try to find any areas that could trip me up.
I had to look it up just to make sure, but it seems that undefined behavior could be a source of non-determinism? *In computer science, a deterministic algorithm is an algorithm which, given a particular input, will always produce the same output, with the underlying machine always passing through the same sequence of states.* I suppose if one computer always does something one way and another computer always does something another way, they both could be called "deterministic". Semantics aside, I need every computer to do the exact same thing in the exact same order. So I need to avoid anything that doesn't guarantee that it will always be the same. And I'm wondering if there are any classes or functions that may cause one computer to do something slightly different than another other than the obvious ones like DateTime.Now and (new Random()).Next() I've been researching each class I've been using, and thought I would ask the internet as well.
&gt; It's a little hacky, but if you need deterministic floating point operations you may want to mix in a little C++/CLI and compile with -fp:precise or -fp:strict. Luckily I don't really **need** floats. It wasn't too big of a hassle to remove every float calculation and switch to using fractions. &gt; What are you doing with dictionaries that require a specific order? Dictionary is a hashtable, so the iteration order is always non-deterministic. You can optionally use System.Collections.Specialized.OrderedDictionary if you need them sorted by insert order or System.Collections.Specialized.SortedDictionary if you want them sorted by the key, but these are both not as performance as the basic Dictionary. I wasn't relying on dictionary's order anywhere, I was just surprised to learn about it and know now to avoid it. &gt; You may want to review your choice of data structures or your use of them. This is the truth. I've been doing a lot of "C# &lt;class&gt; determinism" googling, and just basic "C# determinism" googling, as well as reviewing what each class actually guarantees. I thought a post might speed up the process a bit.
I used UDP because the game runs peer to peer, and most P2P stuff I read about was built on top of UDP, so I followed suite.
Yea, but that's usually stuff where people don't care about packet loss... If you're reimplementing TCP, you should just use that :D
This might send you on the right track. Might not. http://en.wikipedia.org/wiki/DLL_injection http://msdn.microsoft.com/en-us/library/windows/desktop/ms644990(v=vs.85).aspx
This is a typo. I fill fix it now.
The company probably is just assuring himself that the money they invest in you (tranings and stuff) are not going out the window. I think that it will be your first job. There is an idea that is used by big companies, that in the first year of the job, a junior programmer doesn't make any profit for a company, so they are covering their end, but the sum is kinda strange.
I thought it was pretty good. More than I'm making, at least, though I'm hourly. I guess how much it really is depends strongly on where you are though. I make more than I know what to do with so it get's saved up which is great, but making the same amount somewhere else I'd barely be able to pay rent or mortgages.
If you want to solve minesweeper, you don't need to attach to the process. You just need to get the window handle and send some mouse click messages to the window.
Dictionary&lt;K,V&gt; is a hashtable and as such is fundamentally non-ordered when iterating values. Not on intrinsic order of the values or order of insertion. Hashtables us an array as a backing store. They take the key you provide, call GetHashCode(), and turn that into an index into the array. So putting an item at myDict["foo"] is actually doing something like private string[] _itemsArray; private void _setItem(string key, string valueOfObj) { int index = key.GetHashCode() % this._itemsArray.Length; this._itemsArray[index] = valueOfObj; } private string _getItem(string key) { int index = key.GetHashCode() % this._itemsArray.Length; return this._itemsArray[index]; } This is how non-sorted dictionaries provide O(1) get/set access. They're cheating, essentially. A "pure" hashtable implementation *doesn't provide value iteration at all*. Also, a pure hashtable doesn't allow resizing. This example glosses over what to do with collisions when two different items provide the same value for GetHashCode(). The short answer is that _itemsArray would actually be an array of LinkedList&lt;KeyValuePair&lt;string,string&gt;&gt; and two items stored at the same index would both be stored in the list. First of all, you'll notice that there's no way to iterate the values in the order you added them. The order of items in the _itemsArray is determined by *the hash code*, which has nothing to do with the string order. One thing you may suspect is that there's no perfect hashing algorithm. To maintain O(1) performance, it requires an _itemsArray much larger than the number of items you're actually storing in the dictionary, or you'll have many values hashing to the same index. That means that iterating a Dictionary of size N is O(C*N), where C is a very big constant. Also, **like all of the .NET collections with an array as the backing store**, including List&lt;T&gt;, adding one more item than the size allows triggers an expensive resize operation. 1) A new backing array **double the previous size** is allocated 2) All items from the previous backing array are copied over to the new array. 3) The old backing array is eventually garbage collected. I can't stress how important it is to understand this for game development and .NET performance tuning in general. For one, this means that it's very important to set the size of your collections ahead of time rather than using the default, if you know the size. Go ahead and time the difference these two code snippets take Random rand = new Random(); List&lt;int&gt; smallList = new List&lt;int&gt;(); for (int i = 0; i &lt; 10000000; i++) { smallList.Add(rand.Next()); } vs Random rand = new Random(); List&lt;int&gt; bigList = new List&lt;int&gt;(10000000); for (int i = 0; i &lt; 10000000; i++) { bigList.Add(rand.Next()); } The smallList version will double in size several times and do an O(n) copy to a new array each time it doubles. Lots of memory wasted until the GC runs (don't be tempted to run it manually), lots of memory bandwidth and CPU wasted to copy from the old array to the new array. In a game, that's going to lag. Even in an office app reading from a big CSV file, that's going to lag. In the case of Dictionary&lt;K,V&gt;, it also means that after each resize operation, the order of iteration will probably change.
I have to agree with /u/Banane9 on this. We ran some UDP tests about a year ago to try and use it on our apps and we had to drop it. UDP doesn't guarantee that the packets will make it across the network. With TCP you should not have issues. 
Personally I would stay away, I've never worked for any dev company that's required I reimburse them If I leave, but then again I've never worked in the US.
How does your last example even compile? private static async Task&lt;string&gt; LongRunningOperation() { int counter; for (counter = 0; counter &lt; 50000; counter++) { Console.WriteLine(counter); } return "Counter = " + counter; } There's nothing awaited.
Yeah, usually it's the other way. There's a 12-month retention bonus if you stay.
"Because we have removed the line with the await keyword, the LongRunningMethod() now runs synchronously, so the counter will first count up to 50000 and then the code will go into the while loop." This was just illustrating the point that without an await, your code runs synchronously.
It seems like you might be relying on trust to ensure that all clients stay in sync with each other. This is a well studied subject in computer science. Basically you have a choice, you can trust that all the clients are doing what you expect or you can verify that they are somehow. The former makes sense when you have control of all the hardware and performance is important. In this case you don't have that control and there is only even be incentive to specifically not do the expected thing (eg. Cheating at your game). This might be fine if this just some little project but if you want to make this a serious application, you should probably rethink your approach. 
Read the MSDN documentation? If it's not documented that things are ordered, for instance (dictionaries) or not stable sorted (pretty much all sorting), then it's not. I wouldn't call this "undeterministic", though.
&gt; Yeah that was surprising to me. Well it shouldn't be! They are not documented to be iterable in order (in fact they are, if I remember correctly, *explicitly* documented to not have this property), so they aren't. Sorting isn't documented to be stable either, and isn't. This is completely standard. If you want ordered, use another data structure or order the keys yourself. That said, you'll almost surely get deterministic behavior on the same machine and even platform. Sorting did change between .NET 4.0 and 4.5, though.
Yes, undefined behavior can be a source of non-determinism if you expose it in your software. You shouldn't, of course :).
&gt; foreach (int bar in foo.Keys) &gt; { &gt; // doing things in "order", but apparently non-deterministic? &gt; } Hence, not in order. From the documentation: &gt; **The order of the keys in the Dictionary&lt;TKey, TValue&gt;.KeyCollection is unspecified,** but it is the same order as the associated values in the Dictionary&lt;TKey, TValue&gt;.ValueCollection returned by the Values property. Emphasis mine.
Relying on Task.Delay(1) to make sure the continuation carries on on a different thread, isn't wise. This is pretty much an implementation detail. To make sure something executes on a different thread, use Task.Run.
Yes, Task.Run is the proper way. The Delay will in practice almost guarentee that the continuation uses a new thread, but if the machine is heavily loaded, it might complete before the "await" kicks in, which causes it to continue executing synchronuously. Task.Run is the way to go.
Thanks for replies everyone. For the training part, they are not really spending any money on me, its not like theyre paying for any microsoft certification, they've been giving me previous client projects to work on. The company works like this, after 3 months of training, they say they will update my resume (with real &amp; fake experience), they will prepare me for interviews and when the company gets a project, they will send me there. After talking to other trainees, who already had signed the contract, I had made my decision to not sign it. But then again, what if I dont find another job? And will also miss out on the hands on training...
yeah that's a fair point. I have updated the article so the code that executes the LongRunningMethod is: public async Task DoStuff() { await Task.Run(() =&gt; { LongRunningOperation(); }); }
Those sites are going to be aimed towards Linux stack. C# is used more in the corporate world, so try Indeed.com 
I believe he want's to find the mines which would require him to attach and read memory first. Then yeah he'd just need to send mouseclicks if he then wanted the program to actually beat it.
If you don't have any professional contacts, look at recruiters for contract-to-perm and perm positions. It's been a few years since I went the website route, but Monster and Dice could be options if you dig for direct-hire positions. Also, think about some companies or lines of business you are interested in and check out their career pages.
I posted my resume on Dice.com, monster.com, and career-hunter.com (I think that last one is right...) I still get calls from recruiters and I've been employed for more than two years at my current company.
With your cursor inside the minesweeper window type "XYZZY" then press Shift-Enter and Enter. A white dot should appear in the upper-left corner of the screen. If it turns black, your cursor is resting on a mine.
(Just playing around, and quoting Ghostbusters, no offense intended)
http://www.codeproject.com/Articles/670373/Csharp-Read-Write-another-Process-Memory This has some pointers that may help you.
This is good. Also become involved with said group and make friends. At our local .NET group, each monthly meeting gives the floor a few minutes with "Who's looking for work?" and "Who needs devs?"
I've used linkedin with great success to get in touch with recruiters.
I posted code earlier forgetting I was using a very cool library: http://binarysharp.com/products/memorysharp/ save yourself ALOT of headaches and use that. It's literally 2 lines of code what you want to do with that library. The codeproject article above is a good article to read too so you understand what's going on.