If you run into null - there's a reason for it. You need to decide if that reason makes sense or not. Sometimes it makes sense to know something is "yes", "no" or "unset". If it doesn't make sense, then you let the exception happen. Even better, catch the exception yourself and throw a logical message that will tell you exactly where the problem *originated*. The earlier you detect it, the better. Never ever hide a null exception by wrapping it in a null check - unless you are absolutely sure this is the behavior you want. Doing it blindly just delays the problem to later on, when it is probably going to be even worse for you to fix (like bad data on the DB, bad numbers being calculated on a report, customers calling angrily about something, etc...)
I look forward to when we can default everything to being non-nullable by default...
Yes, I tried with `Json.Net`. Facing the same issue. I was able to get the simple elements that are out. But, couldn't get to access the `QuestionDefinitions`.
QuestionDefinitions values are not strings.
That's nice. But did you tried RestSharp? https://github.com/restsharp/RestSharp
This is a bold statement here. 
QuestionDetails properties are not lists.
You have to wait a little bit, C# 8 will introduce Nullable Reference Types. This will make almost all null reference exceptions history, once it's wide used. [https://msdn.microsoft.com/en-us/magazine/mt829270.aspx](https://msdn.microsoft.com/en-us/magazine/mt829270.aspx) [https://channel9.msdn.com/Blogs/Seth-Juarez/A-Preview-of-C-8-with-Mads-Torgersen](https://channel9.msdn.com/Blogs/Seth-Juarez/A-Preview-of-C-8-with-Mads-Torgersen)
Is Polly built inside. It would be nice to setup retries and circuit breaking. 
Thank you, I've checked them about before and I like them so far :)
Wow, I didnt know about that, thanks for the info, I'll go through these articles 
Agreed, and my opinion is to never return null, but instead return a Maybe&lt;T&gt; if I'm ever returning something that may be unset. 
Start with this (paste json as a class): https://dailydotnettips.com/did-you-know-you-can-automatically-create-classes-from-json-or-xml-in-visual-studio/ 
Hey man, this is cool and thanks for writing this. I know it's not easy to put your work out there for public scrutiny, so good job :D That said, I'm having a pretty hard time following along with this library. The documentation seems really sparse, and looking through the code I'm left with two questions: 1. Is the library supposed to take care of deserialization for you, or is it meant to hand over raw http response messages and let the consumer do that part? I seem sometimes you're returning dynamic (something I personally refuse to use in my code and reject code reviews for every time), sometimes you're passing around objects, etc... Instead of either working directly with the response, or making everything generic 2. I see your example returns a task, but it looks like many other things don't. Reading content, for example, should probably also return a task since it could be reading hundreds of megs from a stream. Is there a particular paradigm you're aiming for regarding when some things are async and when they're not? 
Dynamic is a very bad idea. It implies type safety and Intellisense support when there is none. It should only be used when there is no other way. In this scenario, I would much rather have strings, so I am constantly aware that I may be making unchecked errors when typing them.
https://learnxinyminutes.com/docs/csharp/
You don't have to use dynamic for your request / responses only for building the uri which would only be a string anyhow. [See RestClient casting](https://restclient.dalsoft.io/docs/casting/)
Well it's more that "analysis is required" you may have to ask if null makes sense for that specific field or not. It could be you missed something obvious, it could be a valid business scenario... If it is valid, then you need to allow it through validation and your business methods need to handle it (maybe they will default to some other value, maybe they store the null, maybe null means something specific). If it isn't valid, then you want to stop it as early as possible either by fixing it so that the null doesn't get sent in the first place or returning an appropriate validation error to whoever your caller is to fix the problem... Generally you want your API gateway to be in charge of cleaning up the data and only passing on valid values to your business code and database... Good luck :) It's always good to go a level deeper and think about what's really happening and why that null got there in the first place.
The dynamic was used for succinctness in the example. You don't have to use dynamic for your request / responses only for building the uri which would only be a string anyhow [See RestClient casting](https://restclient.dalsoft.io/docs/casting/) Not sure what is a bad idea, take a look at the examples below both return typed objects both could have typo's in the uri's. var client = new HttpClient(); client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json")); var response = await client.GetAsync("r/https://jsonplaceholder.typicode.com/users/1"); //I could have a typo here var user = response.Content.ReadAsAsync&lt;User&gt;(); //Type Safe Console.WriteLine(user.name); //Type Safe **VS.** dynamic client = new RestClient("r/https://jsonplaceholder.typicode.com"); var user = await client.Users(1).Get(); //I could have a typo here Console.WriteLine(user.name); //Type Safe **Don't see how a string is any safer** I'd write a unit test to be sure in either situation. Also my client will serialize the result faster, and RestClient is less code / easier to read.
Thank you! I will definitely try this
&gt; does this one do better than all the others? Right now it just looks like an equivalent but more risky option due to lower adoption (less support for problems available, and higher risk of project dieing --&gt; migration problems unless you bothered to add interfaces around everything). &gt; Also using dynamic just to make your code look superficially cleaner is a huge no. You're not getting any actual * This isn't just superficially cleaner, it's faster and with more complete functionality please spend a couple minutes reading the website * RestClient has newer commits than RestSharp * Only Uri creation is dynamic see previous comments * Adoption I haven't had certain people blog about my library sorry about that.
Did that. I tried again some approach with `Json.Net` and it worked. Thanks Though! :)
No but would be easy to add Polly if you needed to using a [Handler](https://restclient.dalsoft.io/docs/about-the-handler-pipeline/). RestClient already has [retry handler](https://restclient.dalsoft.io/docs/retrying-transient-errors/) that can make use of that works for most common cases
Thank you, I'll read through it :)
Hi really sorry your are finding the documentation hard to follow were you reading?[https://restclient.dalsoft.io/docs/quick-start-guide/](https://restclient.dalsoft.io/docs/quick-start-guide/) What can I add to make it easier? In answer to your questions 1. For accepting / returning json yes serialization and deserialization is completely handled for you. So is casting just cast the response and it will cast the response for you, no messy generics. You can even cast back to a HttpResponseMessage. 2. All actions verbs Get, Put, Post etc are Tasks. If you are returning larger responses (100MB) you should create a custom handler. This is because RestClient is primary for REST API's but can be used for anything with a handler, and you get the benefit of cleaner code. Let me know if there is anything I can do to help
Thanks will do, just in process of moving the documentation.
I know folks are being a little curt, but please respond to the questions in this thread as people consider an unanswered question as one that has no good answer. I'll be keeping an eye to see whether I should consider this library for use in the future.
Yes I have but can do better in 2018? ## RestSharp var client = new RestClient("http://example.com"); var request = new RestRequest("myresource/{id}", Method.POST); request.AddParameter("name", "value"); // adds to POST or URL querystring based on Method request.AddUrlSegment("id", "123"); // replaces matching token in request.Resource request.AddHeader("header", "value"); // execute the request IRestResponse response = client.Execute(request); var content = response.Content; // raw content as string // or automatically deserialize result RestResponse&lt;Person&gt; response2 = client.Execute&lt;Person&gt;(request); var name = response2.Data.Name; // async with deserialization var asyncHandle = client.ExecuteAsync&lt;Person&gt;(request, response =&gt; { Console.WriteLine(response.Data.Name); }); ## RestClient dynamic client = new RestClient("http://example.com"); var result = client .Headers(new { header="value" }) .MyResource(123) // dynamic haters no magic string substitution .Query(new { name = "value" }) .Post() var content = response.ToString(); // raw content as string HttpResponseMessage httpResponseMessage = result; // we can better here original HttpResponseMessage //Automatically deserialize result Person person = response; //No ugly generics Less cleaner code, and despite the comments just as type safe. 
Thanks will do, just in process of moving the documentation.
Done my best to answer everyone's questions.
Yes I have but can do better in 2018? ## RestSharp var client = new RestClient("http://example.com"); var request = new RestRequest("myresource/{id}", Method.POST); request.AddParameter("name", "value"); // adds to POST or URL querystring based on Method request.AddUrlSegment("id", "123"); // replaces matching token in request.Resource request.AddHeader("header", "value"); // execute the request IRestResponse response = client.Execute(request); var content = response.Content; // raw content as string // or automatically deserialize result RestResponse&lt;Person&gt; response2 = client.Execute&lt;Person&gt;(request); var name = response2.Data.Name; // async with deserialization var asyncHandle = client.ExecuteAsync&lt;Person&gt;(request, response =&gt; { Console.WriteLine(response.Data.Name); }); ## RestClient dynamic client = new RestClient("http://example.com"); var result = client .Headers(new { header="value" }) .MyResource(123) // dynamic haters no magic string substitution .Query(new { name = "value" }) .Post() var content = response.ToString(); // raw content as string HttpResponseMessage httpResponseMessage = result; // we can better here original HttpResponseMessage //Automatically deserialize result Person person = response; //No ugly generics Cleaner code, and despite the comments just as type safe. 
IMO, the first thing in the docs should be a comparison between this and Flurl. What I skimmed looks good, but it's not obvious to me what problem this solves.
People generally don't use dynamic at all. So the majority of C# developers aren't used to finding typos in normal code. Typos in strings are common so we're more inclined to look for them there. I.e. strings are more familiar. 
Wouldn't a simple test suite find any issues here, no matter what you do? If you take a look at my tests there is no way it would get through string or dynamic https://github.com/DalSoft/DalSoft.RestClient/tree/master/DalSoft.RestClient.Test.Integration I'm a full stack dev so work with JavaScript and Python just never been scared of using dynamic if it make the code more succinct. 
The problem is null itself. We don't have a good way to make sure you don't make that mistake that doesn't involve you having discipline. This is why modern languages are adopting Optionals as a feature. Ideal programming languages do not allow variables to be null, or don't allow you to use a variable without checking for null. C# is promising to get there with Nullable Reference Types, but we're still going to be burdened by interoperating with a ton of legacy code that can't be magically switched over to that status. Your best bet, without Nullable Reference Types, is to be very disciplined. Find an `Option&lt;T&gt;` type that suits you and use that instead. Those are like `Nullable&lt;T&gt;` but aren't burdened with "can only hold a struct". Further, good optional types do not let you ask for their value without providing BOTH what to do if there is a value and what to do if there isn't. Languages with Optional types built in can provide a lot of syntax sugars around that. So like, in Swift: if let times = int.Parse(userInput) { // Parse returns an optional int for (int i = 0; i &lt; times; i++) { //... } } else { // The parse failed //... } The current C# equivalent of that using an Option&lt;T&gt; type might look like: int.ParseOption(userInput).Match( (times) =&gt; { for (int i = 0; i &lt; times; i++) { //... } }, () =&gt; // failed ); The important part is having a compiler that says, "If this type CAN be null, you MUST do something to handle the null case." There are often shortcuts to say, "I don't want to do something in the null case". Some Optional implementations let you say, "Just give me the value and crash if it isn't set", but I don't like those. You can sort of get in that case with `Nullable&lt;T&gt;`: int? value = null; Console.WriteLine(value.Value); // Crashes! That's what makes "real optionals" nicer than Nullable&lt;T&gt;. You can't accidentally shoot yourself in the foot with them. I haven't looked at the Nullable Reference Types spec yet but I'm pretty sure they behave like Optionals. Last I checked, though, half the spec was "We'll figure this out late" so I wholeheartedly expect it'll get pushed out to 2019 in favor of some more syntaxes for auto-properties. 
I mean really if we are worried about typing `client.Users(1).Get()` wrong and typing `client.Users(1).Fet()` or something - I don't see how the world will end unless you are not writing tests. If dynamic is the barrier to adoption I can add a interface so that all the verbs are static methods. It would look like this: `client.Resource("users").Get(1)` This would completely remove dynamic keyword, it would still return a dynamic response but you can just [cast it directly](https://restclient.dalsoft.io/docs/casting/). But I really can't see people moving away from RestSharp thought I share a alternative that I have been using since 2015, in my opinion it's cleaner but everyone to there own.
For ASP.NET core the built in one works perfectly well. For cases where there is nothing and you need to pick something SimpleInjector works great.
An easy one to remember: returning an empty list is (almost) always better than returning null. I haven't yet written (or read) any code where an empty list was not the better option.
Sorry for the rather late explanation of my use case which might sound reasonable to you for doing what I am trying to do. Or not. Would like to hear why not if you disagree. The serializing is going to be a part of a 3D application which stores a JSON string for each 3D element in the model. The source and shape of this data can vary a lot as they can be coming from multiple other applications so I don't really want to get attached to any schema. That's the reason I found JSON useful as a pattern because it has structure but is pretty flexible, (and also my bias because I like it). Let's say there's a model of a chair-leg. The model and details for this leg exists in 3 different CAD applications * one has structural information about the chair like density of wood, grain direction etc as key-value pairs, where the values are primitives. eg: `{"density": 42, "density-unit": "gm/cm3", "vertical-grain": false, ...}` * one has rendering information about it like material texture, glossiness etc. If there's any texture-image I would like to base64 encode that and store it as an attribute with the format. eg: `[{"texture": {"data": "jw@6re8#...", filetype:"png"}, "IOR": 1.5}, {"texture": {"data": "ps&amp;j2ne...", filetype:"png"}, "IOR": 2.7}]` (It is a list of textures) * one has analysis results of doing finite element analysis on the chair. eg: `{"stress": [2, 4, 6, 8, 10], "warpage": [1, 1, 2, 3, 5]}` (The values and labels are just fillers) Now I want to combine this information coming from different sources into a single 3D file. The 3D application(Rhinoceros 3D) I am using allows me to attach metadata to each element in the model. I store this attached data as key-value pairs in a dictionary for each element. I have a small UI to show this attached data for each element when selected. It is convenient to view the primitive value type information in this small UI and that's why I am not base64 encoding the whole JSON string. If this JSON gets heavy and starts bloating the whole 3D file I might encode/compress the JSON later. For now I think raw JSON is more convenient. Another challenge on top of all this. The whole file with the 3D geometry information I serialize to JSON (using JSON.NET). This JSON can/should/hopefully be able to be read in a non-C# environment. The geometric data saved is pretty simple and I have successfully tested it to be regenerated in C#(in Rhino) &amp; JS(in threeJS). The reason for using `ISerializable` is because that's the only way I can be certain that some later value someone is trying to put in the dictionary can be saved as a base64 encoded string if not directly as a primitive. Sure they'd need the type information and the class definition later to deserialize it, but I don't think I can guarantee that. (If it's an image I can still regenerate it without type information). I am sure there are some assumptions I am making here which I am not even aware of, so trying to learn as much as I can. Sorry for the long post and thanks for your comments so far!
That is cool. Did not know about discriminated unions, but now I do. Somewhat. It sounds like a very useful pattern although I am not sure I can use it for this project due to other constraints. Found a good explaination and package to work with that [here](http://astreltsov.com/software-development/discriminated-unions-in-c-sharp-dot-net.html). The syntax adopted looks very similar to Javascript promises which are used everywhere in JS world. Just made a long explanation post to /u/SuperImaginativeName in the thread if you would like to check it out. Thanks for sharing discriminated unions! 
&gt;restricted to dotnet framework 2.0. Um, are you sure? That's from 2005. Is it possibly .NET _Runtime_ 2.0, in which case you can use a newer framework (at least 3.5)? That said, `System.Net.WebClient()` is decent enough.
Algebraic data types, in general, are neat, and I really wish that C# had some built in support for that sort of thing. Maybe if/when they get record types and pattern matching more sorted out.
&gt;.net framework 2.0 &gt;What are my best options in terms of libraries or APIs? http://opensource.indeedeng.io/api-documentation/
I guess my question is, is the microsoft one easy to plug into non Aspnet core projects. Considering most of out code is down in separate libraries.
You can easily in Core 2.1 using [generic host]( https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-2.1) Prior to that you can too but it's a bit more hacky.
I like it. From a quick peek it's a nice evolution of the more convoluted older API's. RestSharp is powerful, but you have to wrap it in yet another layer to get it into a friendly state. 90pc of web api calls should be possible with a couple of lines of wrapper code because they're all basically the same. We can say that now, this stuff isn't new and the use cases are pretty well understood.
Other C# HttpClient's var response = DoTheThing()&lt;Request&gt;(myrequest).AsThing&lt;TResponse&gt;(); vs RestClient Response response = DoTheThing(myrequest); IMO the second example is more readable, and despite some of the comments in this thread has the same type safety. I'm of course not against generics but take the `AsThing&lt;TResponse&gt;` it feels like a after thought.
I'm not sure what you're getting back so I'm struggling to contextualize. Are you getting back a response which *contains* the deserialized objects, or are you getting back a collection of the objects themselves? If it's a response, I would want: var response = client.Get&lt;User&gt;(1); //response type is Response&lt;User&gt; var results = response.Results; //results type is IList&lt;User&gt; And if I'm just getting a list of objects back directly without an object that contains errors or whatever, I would want: var results = client.Get&lt;User&gt;(1); //results type is IList&lt;User&gt; And I think that's super readable. 
Think I'm missing something: [Resource("https://jsonplaceholder.typicode.com/users/{id}")] public class User { ... } var result = client.Resource&lt;T&gt;().Get(1); // now look up some attribute see where we are going with this Vs User result = client.Users(1).Get(); // I know this performing a get against /User/1 and returning a user object. Maybe I'm wrong I find my approach easier to read. And think about it you are replacing an Attribute with a string with `Users(1).Get()` what the problem here? The attribute is no more type safe, I suppose you could do`[Resource("https://jsonplaceholder.typicode.com/users/{id:int}")]` but you still haven't solved the readability, you have to go else where to see what resource that code is calling. 
I was in the same boat trying to figure out typesafety a while ago with something quite similiar. What I ended up doing was using interfaces to get typesafety with method-names, parameters and return types. It works really well =) [Here's the code](https://github.com/davidtraff/MServices.V2) if you want to check it out.
Any of Mosh Hamedani's courses are great choices. 
I don't think I understand the difference between a bytearray of UTF8 encoding and a string (at least for JS). There aren't any relevant characters that change when I run a UTF8 encode/decode given this input string. This is still not giving me the expected hash output (this code can be copy/pasted into https://npm.runkit.com and run in browser): const crypto = require('crypto'); const hmac = crypto.createHmac('sha1','HuRrC8AScl/DGULoeZ4vCg=='); hmac.on('readable', () =&gt; { console.log(hmac.read().toString('base64')); }); var message = "/vrageremote/v1/server/ping\n" + "1441178398\n" + "Sun, 05 Aug 2018 19:39:18 GMT\n" hmac.update(message,"utf8"); hmac.end(); 
Spam
I suppose it all comes down to what problem you're trying to solve. I was basing my comment on the code you posted. I think this is a neat library and I'd probably use it for something small but I tend to prefer to just stick with the standard framework stuff unless the benefit I get from the library I'm consuming is significant enough to where I'd be willing to go and fix bugs in the library rather than just working around them.
I'm with you. I think it falls under the category of libraries that aren't ambitious enough in scope, so it feels like it might be less effort to just build the parts you need by hand rather than learning a new library and being dependent on it.
&gt; Even the SimpleInjector docs for ASP.NET Core integration say SI just builds object graphs but injects them via the MS DI. I don't think so. It basically replaces the whole thing with the option of having it run underneath to be able to resolve some of the magic stuff that is made to work with MS's solution.
Thank you! :)
&gt;Don't see how a string is any safer Unless I'm misunderstanding something: \` var response = await client.FetAsync("r/https://jsonplaceholder.typicode.com/users/1");\` would throw a compile time error. \` var user = await client.Users(1).Fet(); \` would not.
For me, I use the .net core one as standard, apart from when I want to be a bit fancier. We are avid users of ninject, named scopes, wheninjectedinto, proxy factories, which AFAIK you can't do as nicely/at all with the built in .net one. As always, it depends...
Sorry my point: var response = await client.GetAsync("r/https://jsonplaceholder.typicode.com/isers/1"); var response = await client.Isers(1).Get(); Both compile and have exactly the same issue that a test would find. Just because it complies doesn't mean it's right. 
I'm getting the exact same output from Python. Either there is something I'm misunderstanding about this, or the "known good" implementation isn't good. As far as I know, I'm the only one who's tried this (the API was released a few weeks ago and no one in the community is talking about it) As far as I understand, these scripting language hash functions only take strings as arguements and JS and Python don't distinguish between strings and UTF8 ByteArrays. Python version: import hmac from hashlib import sha1 message = "/vrageremote/v1/server/ping\n" + \ "1441178398\n" + \ "Sun, 05 Aug 2018 19:39:18 GMT\n" hashed = hmac.new("HuRrC8AScl/DGULoeZ4vCg==",message,sha1) a = hashed.digest().encode("base64") print a It's possible the example code is wrong or the implementation used by the devs is doesn't match this. I would appreciate someone who knows C# help me create the boilerplate I need to debug this code to see if my implementation is wrong or if the known-good is wrong.
See my response to your other comment, its ducked typed. dynamic client = new RestClient("http://jsonplaceholder.typicode.com"); var response = client.Get.Users.Get(); var responseMessage = response.HttpResponseMessage; //Or HttpResponseMessage responseMessage = response; IList&lt;User&gt; results = response; All would be typed as you would expect.
Personally Ninject/Castle Windsor however the ASP.NET core inbuilt one is fine. They all do, essentially, pretty much the same thing under the hood anyway :)
Mine is fastest without a doubt especially if you use IHttpClientFactory, you can google why using IHttpClientFactory is faster
If I remember correctly your desktop is not the same as a game because the game writes to direct x or open gl and this is not the same as windows. Maybe this helps: https://stackoverflow.com/questions/33690825/screenshot-directx-fullscreen-game
Why are you using fluent with your RestClient example but not RestSharp? https://github.com/restsharp/RestSharp/blob/develop/RestSharp/IRestRequest.cs IRestRequest AddParameter(string name, object value); 
I know my client is dwarfed by RestSharp but it's been around since 2015 the nuget package has been downloaded 24,563 granted nothing to the millions RestSharp has. 
In my defence: [Unit Testing](https://restclient.dalsoft.io/docs/unit-testing/) you don't need a load of pointless abstractions. [Handlers](https://restclient.dalsoft.io/docs/multipartformdatahandler/) look at multipartData that would be hard to build
Yes. The syntax is slimmer, and the `Like` operator, much like many parts of VB, is more like SQL syntax. `Where logRecord.Message Like "Login: ??z*"` `WHERE Message LIKE 'Login: __z%'`
I was taking it [from this](https://simpleinjector.readthedocs.io/en/latest/aspnetintegration.html) so you're probably ahead of me. That actually sounds like what I said, but in clear English instead of my random Internet spek :D It does the resolving and then defers the distribution to MS. 
Maybe&lt;T&gt; I think just swap null checks and NullReferenceExceptions with checking other things. For Maybe&lt;T&gt; you have to check HasValue or equivalent before you access it, otherwise it will (in most implementations) throw InvalidOperationException.
Always makes me think of Austin Powers. It is a pretty big nutshell......
Why is it better?
This is a pretty neat idea! Personally I prefer using RestEase when doing REST API calls, but I can see myself using this on small projects where I'm prototyping something quickly.
Unfortunately you can't do that. But you can make it look pretty by writing a method to check for you like this: string[] nummer = new string[10]; bool ArrayHasSpecifiedIndexes(IEnumerable arr, params int[] indexes){ bool containsIndexes = true; foreach (var index in indexes) { if (index &lt; 0 || index &gt; indexes.Length){ containsIndexes = false; } } return containsIndexes; } ArrayHasSpecifiedIndexes(nummer,0,1,2,3,4); // True ArrayHasSpecifiedIndexes(nummer,0,1,2); // True ArrayHasSpecifiedIndexes(nummer,20,1,2,3,4); //False
Thank you! Works like a charm.
You probably need to detect the window of the game. But i don't think it's a good idea because it will slow the game. Why would you do that ?
 You said; &gt; when its really suppose to run when all three of them are having an "X" Here is an example using [LINQ](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/). if (nummer.Take(3).All(s =&gt; s.Equals("X"))) { // do something } * `.Take(3)` means take the *first three* elements your array. * `.All(s =&gt; s.Equals("X"))` means all three elements need to equal X. You don't mention if you need to do a string comparison, so "X" or "x"? If you do, you can add a comparison like; `s.Equals("X", StringComparison.OrdinalIgnoreCase)` 
I know this seems like a dumb question byt does your DbContext inheriting from any external library? 
Sorry are you saying you don't test your F# code? It Compiles you got your syntax right that's all it means in C#, F# or Scala.
Thanks for the accusation but no I copied it from the homepage http://restsharp.org/ also the link you posted just 404's 
I do integration testing to check that other things are interacting properly with my code. But no, a strong typing system in a real functional language means testing is pretty pointless, the type system does almost all of it for you.
Yeah because if you use F# you are immune to human mistakes. A strong typing system in a real functional language makes us super human.
What are you talking about?
Another way of doing this is simply writing about 4-lines of code into the service and running it in console. Works great, serves the same purpose and has no overhead.
Plus it hasn’t been updated since 2013. 
Two alternatives stand out in my mind: \- You could use pragmas and build self-contained apps for each platform. That's really heavy-handed. \- Put all the platform-specific functionality behind interfaces, and have platform-specific implementations that you select in your composition root. This is the much cleaner approach, especially if you're using dependency injection.
The last update to that was (as it says in the article below all the tables and graphs) 04.03.2018. So not completely up-to-date, but close enough for me right now.
Would love to take a look but your link asks for a login and I don't want to. Isn't [Itch.io](https://Itch.io) accessible by the general public?
In my opinion, if you have to think about your DI framework then you are probably doing something wrong. It's only purpose is to pass service objects to controller classes. And if you built those service objects correctly, they are all thread-safe singletons. 
[removed]
Hey, thanks for your reply, I have had a quick look at the code you linked. 1. The actual table has around 80 entries, and the list correctly returns the expected number of objects. I have checked the query using DB Browser for SQLite to confirm this. 2. The table has the `Name` column set to Unique, Not Null, and Primary Key. 3. As for the last two, I feel like I may be using a different SQLite library as I have no access to the SQLiteDataReader Class. Going off the [Microsoft Xamarin SQLite page](https://docs.microsoft.com/en-us/xamarin/android/data-cloud/data-access/using-sqlite-orm) it recommends using sqlite-net-pcl
Sooo much faster than Ninject. I've been bitten by poor performance of Ninject's resolution more than a couple times. I disagree about using Microsoft's IoC, however. MS just doesn't have the best history with IoC. Maybe it'll be better from here forward, but most apps I've worked on used 3rd party IoC that stayed in place through multiple iterations from MS. It can depend on the project, but I don't want to have to worry about changing my IoC across my suite of projects a couple/few years down the line when we're moving to the latest MS web framework for some stuff and they've up and changed IoC again. I also know the warts and whatnot of several 3rd party IoC's, but MS's is so new that it doesn't seem like I've seen a whole lot of battle testing. Sure it's the default so lots of people are using it, but surely there are rough edges and I don't see many people talking about it - aside from the baked in behavioral but undocumented contract snafu.
&gt; if you built those service objects correctly, they are all thread-safe singletons This guy injects dependencies
I've been using [this solution](https://stackoverflow.com/questions/5116977/how-to-check-the-os-version-at-runtime-e-g-windows-or-linux-without-using-a-con) for a while. public static bool IsLinux { get { int p = (int) Environment.OSVersion.Platform; return (p == 4) || (p == 6) || (p == 128); } }
Care to elaborate on those 4 lines?
Doesn't connection.Query&lt;Game&gt;(query) already return a list? Any reason why you're using ToList() on it?
WebForms are only suitable for rapid application development. Which is to say, quickly throwing together a simple internal website where you are mostly just displaying data in grids. And even then, I would hesitate to recommend it for new development. 
Then what would you recommend to use? 
Razor pages for a PHP-like development experience. ASP.NET MVC (a.k.a. razor) for more professional web sites. Angular + ASP.NET for web applications using the SPA model. 
Write an interface. Write implementations with functionality for each OS. At run time, determine which implementation should be used.
I'm a kind of new to programming. Maybe you can help me out on what to learn? :) 
Thanks , Actually I am slowly converting my code to HttpClient. :) . 
WebForms is old as fuck and something you shouldn't touch with a 10 ft pole.
Is this the only query that produces strange results? Try just "SELECT * FROM Games" and see if it has the same result. SQLite really doesn't like changes in already created tables. It has caused all sorts of headaches for me in the past. Even if some browser shows that the table is fine, there could be cached data being used or something like that. Try dropping and repopulating the table. See if that has any effect. As a sidenote, start using nameof() instead of hard coding the table and column names. It might save a lot of time if you ever decide to change any of them and have to track them down in all your queries.
The returns in your foreach loops aren't hit if there's no element in your list to begin with.
THANKS!
So I had tried with a simpler query already, the same as you have suggested in fact, and the results were the same. All objects had default parameters. However, the mention of SQLite being finicky about changing tables made me wonder what the content would look like outside the browser. I exported the data to CSV and noted that the `IsParty` column was modified to all caps during this process, no idea why. So I removed the column and now everything is working. I am at a complete a complete loss as to why this column would be causing issues as it was plain text, and I can't find anything suggesting that `true` and `false` are keywords. I did however find that the recommendation is to use 0 and 1 for this purpose so I might try it like that and see how I go. Thanks for your help.
If you have hard time even reading your own code, then it's REALLY time to split it in parts (methods).
Also, why are you using a foreach with a body that has returns on every path? because that means you will only ever interact with the first element.
Imo this youtuber, Kudvenkat, has a really great way of explaining things so that anyone can understand it. [Kudvenkat youtube channel](https://www.youtube.com/watch?v=SXmVym6L8dw&amp;list=PLAC325451207E3105)
&gt; I mean this exception occurs very often Does it? If it does, chances are you've got some systematic bad practice in your programming. Just like learning how to debug, gotta really take a look at it and figure out why it's happening so often. Programming is a creative endeavor, everyone goes about it a little differently. I can't tell you what you're doing that's probably not best practice.
6 is OSX I believe
Wow it sums evrything i need, thank you!
I blant my prof from uni. He only thought us that. It was last year. What do you recommend?
ASP.NET Core. MVC and Razor.
I am a big fan of the concept behind Web Forms and a reasonable fan the implementation of these concepts in Web Forms itself but yes it is old and you should use something else for new development. It doesn't even matter if it is good or bad. What it matters is that it will be too expensive to hire someone to maintain the project, that you won't be able to use the latest tools, you will not be able to take advantage of the latest performance improvements and so on.
Have you tried using EF and the SQLite provider?
Good. We scan vericode and there were some vulnerabilities, but that was a year ago. The Microsoft Infrastructure library, which I thought came with Ninject was still at 1.0.0. Thanks for the update. 
https://stackoverflow.com/questions/38790802/determine-operating-system-in-net-core 
That was only used for Silverlight - Mono and I believe CoreCLR use the `Environment.Unix` item.
I only took a little more than a quick glance here but it looks like you are doing almost the same thing here 3 times. If your if statements all contain pretty much the same block of code then you need to split this up. Turn the part that is in the if statements into a method and make it so it can work for those 3 or 4 cases (If possible, maybe there is something i am not seeing here). Also, I am a fan of setting a variable up top to the default value to return then setting that value in loops and if statements, break where needed, then return it once at the end. By doing that instead of returning it every time like you are doing it gives you the opportunity to process that value if you ever need before returning. Also looks cleaner IMO.
Removed: Rule 4, (potentially) Rule 2. At minimum, you'd have to provide more information about what .NET platform you're using and how they're running in the background that produces the system tray icon in the first place.
Ok I made an account just for this, but even when I'm logged in your link still doesnt work. "We couldn't find your page" come on bruh I want to see your game
[https://eightvo.itch.io/lil-scrapper](https://eightvo.itch.io/lil-scrapper) sorry... I might have posted the wrong link earlier
Thanks, looks cool! Reminds me of pac-man
It's not necessarily about preventing the system tray icon from forming but hiding all the system tray icons that do form instead of trying to change the code within each application seperately.
Sums it all up nicely in a brief *1618* page document, holy shit.
thanks, I am trying to decide if I want to give the payer a weapon for a more zelda like feel or leave it with one for something more pac-man or chips challenge. 
ASP.NET MVC &amp; Web API (old) and ASP.NET Core (current). Introduction for ASP.NET Core [https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.1](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.1)
 &gt; I'm not much of a UI developer (don't we all say this) but I still need to attach things to buttons once in a while. I don't need any models or patterns, just something simple I can whip up to present a proof of concept. &gt; WinForms is great for that. I start with Program and Form1 and I can just drop a few things on there and go. Last time I checked, you could do that with WPF aswell. The only difference is that you create your UI in XAML, but you can put event handlers and application logic into your Window classes just fine and never bother looking at DataContext and the likes. And even then you still have the choice of using DataBinding or simply naming your components and accessing them like in WinForms. What am I missing here? Is it just the XAML part?
Mvc is more or less SPA-like if you use layouts properly.
Asp.net core + razor 
Wouldn't you need to compile for each platform separately? 
You can't blame your professor. It is your own job to keep up to date. As mentioned ASP.Net MVC with Razor. 
chips challenge was amazing! I would vote for that angle :) Of course, designing fun, challenging levels is probably even harder than doing the programming.
Your prof did malpractice on you. WebForms are trash. [ASP.NET](https://ASP.NET) MVC if you must but professional front-ends are mostly being done with something like React, Angular or Vue.
Note that "Razor" is the view engine used by both Razor Pages and ASP.NET MVC.
I would say that he can blame the professor until someone informs him that it is his duty to keep up to date. It took me a few months into my CSC degree to realize I needed an "extracuricular" education that only I could provide. My first CSC professor really, really sucked -- we only went over 4 chapters in our VB.NET book before he just told us to start working on our class project. This project had extremely simple requirements -- I imagine most of us in this subreddit could fulfill all requirements for that project in about 30 minutes in a Winforms app. I programmed tetris and he tried to give me a 60 because he didn't understand that he needed to use a higher version of VS (I used 2010, he used 2008) to open my solution. He thought I fucked something up so he gave me a 60.
Take the comments of it being old af with a grain of salt. Sure, Greenfield development is probably going to shy away from ASP.Net WebForms, but if you find a job doing Brownfield maintenance / new features, there is decent chances it'll have ASP.Net WebForms. Past three jobs I've had, including the current, all had some WebForms applications running around I had to work on or make improvements to. Is it Old? Yes. Is it still used a respectable amount, and thus you should know how to work with it? I'd say arguably yes there as well.
Single return is also much easier to debug, since the function can never return from an unexpected / wrong statement.
They are entirely different.
Could have been, I never used them.
NEO. 
Oh, so you want to disable the system tray in Windows altogether, even for other Windows services and third party programs?
Jesus Tittyfucking Christ, refactor it!
So far no one seems to have stated that you CAN use this for your C# projects. However, this is full code and like u/AngularBeginner said, it's not a full blown IDE. You can still create a form (I believe) , but you'll have to manually set the properties from within the joke yourself instead of from the IDE window. To start a C# file, you simple just click File &gt; New File , type in desired file name and save it as a ".cs" file. This will convert it to the C# file [type.](https://type.You) You will need to download the C# extension (the last icon on the left of the window) in order to get the intelliSense and syntax help. Although, the intelliSense isn't nearly as great as it is in the full Visual Studio. In order to run the program, you will have to compile it through the command line or any other code compiler for C#. This *is* usable. Just might not be what you're looking for? 
Entirely as in new code (e.g. EF vs EF Core)? Or conceptually different?
[Here](https://xkcd.com/2030/)
Does Core have `RuntimeInformation`?
https://epdf.tips/sockets-in-c-sharp-practical-guide-for-programmers.html I liked the book enough to buy it. It's a bit outdated, and didn't touch on the new 4.5 await stuff, but this will give you the core you need.
both
How does ninject work with Core? I dropped Ninject back in the day for Simple Injector because there was some annoying bug with disposing objects in WebApi controllers. For Core I never saw the need to replace the default IoC
This is awesome. Is there an equivalent to this that is a little more recent? I love reading these manuals cover to cover but I'm not sure if I need to dive too deep into the gopher protocol, and there doesn't seem to be much on HTTPS.
What should happen - should the task terminate immediately? Complete? In any case, when you spawn the thread (or better yet, use a Task), hand it a CancellationTokenSource and keep that ref around. In the service stop code, invoke the cancellation.
Yeah, that's true if you hit performance bottleneck with your DI which I have never seen in practice. On the other hand Ninject has the best API for registering services... However it has quite heavy configuration so I guess it loses in the end.
Not aware of that issue, can you share more, as that sounds interesting. We like it, we use it very extensively in old school .net We haven't seen many problems with it, we use a lot of the extra gubbins (wheninjectedinto etc) which (I think I said, can't remember?) I don't believe to be supported in Core DI We don't replace it as step one, but do it as and when is necessary. No need for tech for techs sake 
I googled it and found my own question - https://stackoverflow.com/questions/27312389/cant-get-ninject-to-dispose-object-in-request-scope However it seems like I got a solution to this one. Maybe it was another issue that made me drop it after that... I remember that the fact that MVC and WebAPI used different configuration and therefore scopes caused problems for projects where Ninject was supposed to instantiate and dispose services in request scope for both.
We had a weird issue with the ActivationContext (?) Which meant we needed to pass false at some point, very odd. 
I have handled this by creating an Interface in the primary assembly, then created a seperate library dll for each OS then link to the OS Specific lib at compile time.
Consider him informed 😉. But fair point 👍I automatically assumed when I started at uni that I had to learn a lot of the newer stuff at my own volition. 
Yeah if you take out the default way of handling events (through the viewstate and what have you), limit the use of some of the heavier controls, then it's not too bad.
SQLite doesn't support Booleans. You have to use Integer and convert it from Integer to Boolean in your code. That's why 0 and 1 was suggested.
If you're starting from scratch yeah, avoid webforms. That said, idiomatic, drag and drop, user controls, binding, repeaters, gridviews etc. are all TERRIBLE. However, if you just use it as a light weight tool to generate HTML, it isn't so bad. Actually RazorPages to me are essentially a more modern take on WebForms. They keep the logic/view in the same place in code. PageModels or whatever are essentially the same thing as the Page class in WebForms etc. Our extremely vast company intranet is a huge sprawling WebForms app, but honestly we haven't used server/user controls in forever and it's really pretty nice to work in. Yeah Razor syntax is a lot better and using MasterPages are a lot more cumbersome to work with than layouts/partials. Don't bother with controls, don't bother with eventing, use Page_Load as your main entry point and interrogate the Request object directly, or write some light abstractions around it and the code can be someone pleasant to work on. That said all our new apps are in MVC
ASP.NET Core with React
https://github.com/topics/blockchain?l=C%23 Good luck have fun.
I agree. I just cut and paste his code. I'll probably go update it to be more readable.
Whew let's get cracking: 1. your foreach loops might not be entered if the collection has no objects in it. Therefore any returns inside are not "guaranteed" to the compiler 2. If you do have elements in the collection, the fact that you are issuing a definite return on the first instance of the foreach loop means that it won't iterate over the entire collection. You'll simply return a "failed to match" string without looking at the entire collection. 3. Listen to ratherbealurker's refactoring advice.
Well the truth of this is because I hadn't figure out how to simply it yet. 10 minutes after I got the answer to the problem here I figure out how to simply it much more and ended up needing just one return for the whole thing in the end.
I did, you're right it really needed it. But my mind tends to solve the problem right in front of it before being able to rewrite it and make it better. i.e. make it once regardless of how crude than polish it.
OP this is true. I am currently maintaining 2 projects in web forms. Everything new going forward is .NET Core + Razor but Web Forms still plays a big part in my job. A lot of places will have web form pages internally
I maintain 2 web form projects at work and they are completely filled with everything you told OP to avoid in the tldr. I've never seen web forms without all that stuff, except repeaters (who the hell uses those anyway?!) And one of them has bootstrap 3, bootstrap 4 and some material design css library. Then a single page of Bulma. Kill me.
Are you putting a breakpoint on the query line? If so try to print the first rows data. If that's null/default then something has gone terribly wrong. Advice would be to not try to cast the query row to an object and interpret the row columns individually.
I made this a while back: https://16bpp.net/tutorials/csharp-networking/
Yeah I understood that it didn't support them, I just didn't expect having true/false as text to cause issues like this.
My breakpoint was on the line directly after what is shown here, so right after the query returned. All objects were retuning with their default values, but the list contained the correct number of objects. I have managed to resolve the issue by changing the IsParty column to use 1's and 0's instead of true/false. I understand that SQLite doesn't support boolean values, but I don't understand why having a text representation is causing the above behaviour, that is, completely preventing any of the data from being mapped to an object.
First you coding style is very far from C#. These will help https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md Second it's very bad to return value or error way you do. Method caller has no way of knowing if that function failed or not. If program should crash from invalid data then throw exception instead. If that method should just fail then use something similar to Dictionary's TryGetValue like this `bool TryGetInnerElementValue(InnerElement outerElement, string innerElement, ItemsItem item, out string value)`. If caller really needs to know about error message then use this `bool TryGetInnerElementValue(InnerElement outerElement, string innerElement, ItemsItem item, out string value, out string errorMessage)` Third you should minimize duplicate code if possible. Longer code will live, more it is likely that duplicate code will drift apart. Let's say you found a bug in one duplicate code and you fix it there, there is a chance you will forget to fix it to all of those duplicates. Fourth at least put every top if else block to seperate method and clearly naming what that method does. First one could be like GetRelatedCompanies or TryGetRelatedCompanies if you are using "TryGetValue" style. Fifth I don't know what you actually doing but having this much type casting plus conversion to and from string feels very bad to me. Overall this code feels very wrong in so many ways. Let's start from the beginning. `InnerElement outerElement` so InnerElement can be outerElement really? `if (outerElement == InnerElement.related_companies)` what is that suppose to do? Is InnerElement a struct or class, have you overridden `==` or what? If it's a class why are you comparing it to `InnerElement.related_companies` that means you compare them by reference and that would mean your `outerElement` also a singleton. If it is because you have overridden `==` operator, then please don't override `==`. Only override `==` if you have REALLY REALLY good reason for it. How about create enum type instead and use it like this `if (outerElement.Type == ElementType.RelatedCompany)`. Or maybe inherit new classes from base Element class and use pattern matching to `if (outerElement is RelatedCompanyElement as relatedCompanyElement)` I don't have time to go over all problems in your code but I googled little bit and found these links that looked like they could help you https://www.c-sharpcorner.com/article/important-tips-to-write-clean-code-in-visual-studio/ https://www.c-sharpcorner.com/article/writing-effective-c-sharp-code/ Maybe also browse some good C# code here https://github.com/dotnet/corefx to get a vibe how you should design your code. But I'm getting really sleepy and don't have time to read what I wrote, I hope my answer is readable :) It's 3am here and I have to go to sleep, good night! 
First your coding style is very far from C#. These will help https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/coding-style.md Second it's very bad to return value or error way you do. Method caller has no way of knowing if that function failed or not. If program should crash from invalid data then throw exception instead. If that method should just fail then use something similar to Dictionary's TryGetValue like this `bool TryGetInnerElementValue(InnerElement outerElement, string innerElement, ItemsItem item, out string value)`. If caller really needs to know about error message then use this `bool TryGetInnerElementValue(InnerElement outerElement, string innerElement, ItemsItem item, out string value, out string errorMessage)` Third you should minimize duplicate code if possible. Longer code will live, more it is likely that duplicate code will drift apart. Let's say you found a bug in one duplicate code and you fix it there, there is a chance you will forget to fix it to all of those duplicates. Fourth at least put every top if else block to seperate method and clearly naming what that method does. First one could be like GetRelatedCompanies or TryGetRelatedCompanies if you are using "TryGetValue" style. Fifth I don't know what you actually doing but having this much type casting plus conversion to and from string feels very bad to me. Overall this code feels very wrong in so many ways. Let's start from the beginning. `InnerElement outerElement` so InnerElement can be outerElement really? `if (outerElement == InnerElement.related_companies)` what is that suppose to do? Is InnerElement a struct or class, have you overridden `==` or what? If it's a class why are you comparing it to `InnerElement.related_companies` that means you compare them by reference and that would mean your `outerElement` also a singleton. If it is because you have overridden `==` operator, then please don't override `==`. Only override `==` if you have REALLY REALLY good reason for it. How about create enum type instead and use it like this `if (outerElement.Type == ElementType.RelatedCompany)`. Or maybe inherit new classes from base Element class and use pattern matching to `if (outerElement is RelatedCompanyElement as relatedCompanyElement)` I don't have time to go over all problems in your code but I googled little bit and found these links that looked like they could help you https://www.c-sharpcorner.com/article/important-tips-to-write-clean-code-in-visual-studio/ https://www.c-sharpcorner.com/article/writing-effective-c-sharp-code/ Maybe also browse some good C# code here https://github.com/dotnet/corefx to get a vibe how you should design your code. But I'm getting really sleepy and don't have time to read what I wrote, I hope my answer is readable :) It's 3am here and I have to go to sleep, good night! 
Why not both?
The [TCP RFC](https://tools.ietf.org/html/rfc793) isn't too long and pretty readable in my opinion.
I would have to check but this guide taught me a lot on how TCP/IP works.
btw I us vs2017
SQLite has its limitations, and you'll likely discover more the more you work with it. It's fast, portable, and runs on just about anything, so it's pretty much ubiquitous. I use it for my own applications, but I only make Windows applications, so I could just as easily use something else, but I like it, despite it's limitations.
Model-View-Controller.
You can get XNA to work with VS2017. Here are some instructions: https://gist.github.com/roy-t/2f089414078bf7218350e8c847951255
XNA is Microsoft's deprecated wrapper around directX for .net game development. It has been deprecated for years now. I would try to stay away from it as there are probably other libraries now that would be better suited. I remember making games with it back in 2012 and it was already on its way out.
Using raw threads in .NET is no longer recommended unless you know exactly what you're doing. I would considering using Task.Run or at least ThreadPool.QueueUserWorkItem if you can help it. As far as stopping threads, this is to be avoided at all costs (not sure if aborting threads is even supported in .NET?) because it creates undefined state if the the thread is aborted while manipulating objects. Use a CancellationToken, which you will need to query as part of the progress of your function running on the thread (you will also want to pass it to any other methods called inside it that support cancellation tokens). When you want the thread to be cancelled, just set the CancellationTokenSource to cancelled and your method will cleanly abort what it's doing (because you programmed it to do that).
I've never used none of them. I was looking for something to kill some bored time and Just decided to do it. I develop from time to time, for example in two months I didn't do anything. If you have any better idea of a librarly, its welcome haha.
Google for MonoGame. It's an open source project that keeps XNA alive and adds multi platform support. 
Sorry I should have been more clear. I need to get NLog working with Microsoft.Extensions.Logging in a .net 4.7.2 project that uses Autofac to inject the loggers.... The long story: We are slowly porting the application from 4.7.2 to .net core, in order to do so we are slowing updating all the projects to .net standard, then when they are all ported we will update the main site to core and it will all just magically work... My plan was to replace log4net with NLog and inject the loggers like I would if I was using .net core, like so: public MyClass(ILogger&lt;MyClass&gt; logger) But for the life of me I can't work out how to do so.
Register your ILogger as an instance and things should start working.
Sorry I am on my phone, so the this might not be 100% but this is how I make it work. var loggerFactory = new LoggerFactory(); loggerFactory.AddProvider(nlogProvider); //todo: nlog provider RegisterInstance(loggerFactory).As&lt;ILoggerFactory&gt;(); RegisterGeneric(typeof(Logger&lt;&gt;)).As(typeof(ILogger&lt;&gt;);
There is no one good answer. There are two extremes: * ifs everywhere * OS-dependent functions implemented in OS-specific classes. In this case one if at the start of the program would decide which set of classes to use. Just do what "feels" right. The least amount of work is usually the best if it does not kill clarity.
It's outdated for mono too. Mono and .NET Core both implement .NET Standard 2.0 which includes these APIs: &gt; `public static bool IsLinux() =&gt; RuntimeInformation.IsOSPlatform(OSPlatform.Linux);` &gt; `public static bool IsMono() =&gt; RuntimeInformation.FrameworkDescription.StartsWith("Mono");` 
It's highly unlikely that anybody will run their apps on such old runtimes. .NET Framework, Mono and .NET Core all implement .NET Standard 2.0 which has the `RuntimeInformation` API: `public static bool IsLinux() =&gt; RuntimeInformation.IsOSPlatform(OSPlatform.Linux);` `public static bool IsMono() =&gt; RuntimeInformation.FrameworkDescription.StartsWith("Mono `public static bool IsDesktopFramework() =&gt; RuntimeInformation.FrameworkDescription.StartsWith(".NET Framework");` `public static bool IsCoreCLR() =&gt; RuntimeInformation.FrameworkDescription.StartsWith(".NET Core");` 
"donet"... What's wrong with the plenty of resources available on the sidebar?
Check pluralsight and udemy for courses in .net core using react since you are more familiar with it already. Good luck! 
I didn't really know how to add the provider, so no need to say sorry, as you kind of completed the answer of what OP was asking ;) 
Thank you, you guys rule! I spent way too long stuck on that problem and just couldn't google fu my way out of it.
Thank you, bloody legend.
Thanks for the gold, happy i could help :)
I would start with the asp.net site if you have not already. https://www.asp.net/ The forum there is usually friendly to beginners. From there you can find the official docs: aspnetcore: https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.1 Coming from PHP then aspnetcore Razor Pages might be the easiest. Razor Pages are the easiest way to get something up an running in my opinion. If you are making a React frontend then aspnetcore WebAPI might be a good fit. There is also the older asp.net stuff (WebForms and MVC). Personally I wouldn't go with those unless there are particular reasons you must. asp.net (Classic ASP.net): https://docs.microsoft.com/en-us/aspnet/overview 
Using .GetValueOrDefault() should do it: https://stackoverflow.com/q/5995317/9905213
Thanks for the gold, it's my first ever! What I usually do, and did in this situation was head to GitHub and use the code search. If you search for things like "Autofac" "Microsoft.Extensions.Logging" "NLog" and filter by C# you can usually find some pretty good examples.
Do you want to change the return type of the method to be able to return nulls or do you always want to return an int?
This is probably warning you that your method has a return type of int but you are returning an int? 
The Autofac documentation has extension packages for thus and moreover has great documentation on how this is done. Strongly suggest checking it out. Also covers a whole bunch of other useful stuff!
Program to find leap year using if else in c++ r/https://youtu.be/TP6qD4AoCEg
Came here to say this. 
I would recomend changing method return type, but you can also just do a return (whatever int) as int?.
Yes.
Windows lets you hide them without code: https://windows.gadgethacks.com/how-to/hide-system-tray-icons-windows-10-0163381/ Or if you want to nuke the whole thing altogether: https://serverfault.com/questions/883986/gpo-to-always-hide-system-tray-icons-in-windows-10
Yeah, your not getting gold.
 int? Method() { int?[] numbers = new int?[4]; int? max = numbers[0]; return max; }
Change return type from int to int? 
Then what happened?
Monogame is a reimplementation of xna. That works cross platform.
You should just monogame.
Be very carefull before using.GetValueOrDefault(). It may be the case that the correct behaviour is to convert null to zero, or it might not be. In my experience, use of that method is a warning sign that there is a high risk of a bug. 
This can be handled with a splash of functional style; *Monads*. The type in question is called *Maybe*, which can return *None* or *Some*, but not *null*. I'm still learning the concept so I'm afraid I cannot explain it. But I can link further reading and maybe someone else can extend or correct me. https://www.pluralsight.com/tech-blog/maybe https://mikhail.io/2016/01/monads-explained-in-csharp/
Would it be a bad idea to check if its null and if not null cast it? I don't know if this is a good idea from a performance stand point, but imagine it would work.
It IS old as fuck, no grains of salt needed. IMO all greenfield development should avoid it at all costs. Does Web Forms still work? Sure, but so does VB6 and classic ASP and there are still plenty of brownfield VB6 and classic ASP apps out there (including where I work). Nobody in their right mind would recommend you start NEW development with either of them though. The only thing you should be doing with Web Forms is maintaining existing functionality or re-writing it in MVC/WebAPI/SPA
If your return type has to be non-null you have to decide what value you want nulls to be and use null-coalescing operator "??". return max ?? 0; //return 0 when max is null or just make the return type int?
I like SimpleInjector best mainly due to the ease of adding decorators. MS IoC is probably behind in features compared to most other containers. 
https://wildermuth.com/2017/12/20/Reverse-Engineering-Existing-Databases-in-Entity-Framework-Core-2
Thanks I'll look into this
If I understand correctly, the library doesn't know how to convert the strings "true" and "false" into Boolean values. Using integers to represent a bool is good, (that how languages define TRUE and FALSE anyway :))
Take a look at websocketsharp. It has https/http and we socket support. I use monolib to get it to work on .net 2.0.
Thanks! good point, not sure if I can edit the Title anymore though.
I don't know much of anything about Unity-the-game-dev-framework. That's not the usual declaration syntax for C#, though. Can you try a couple things? Standard c# declaration syntax for fields is `*type* *name* [= *expression*];`. I think you'd want to declare those like `float speed = 10;` or `KeyCode moveUp;`. `function` *might* be a reserve word, but methods are usually declared as `*return type* *method-name*([*arg-list*]) { *method-body* }`. Something like void Update() { if (Input.GetKey(moveUp)) { } else if (Input.GetKey(moveDown)) { } else { } } The directive you're trying to use is named `#pragma`, so you also need an `m` in there. I'm not sure that `strict` is a valid pragma for C#, though, and is probably unnecessary. WRT to `Input.GetKey()`, [it looks like the C# version of that takes `string` values *naming* the key](https://docs.unity3d.com/ScriptReference/Input.GetKey.html), so you might need to rewrite some things to take that into account.
#Pragma Strict is irrelevant. This is what the C# version looks like. https://pastebin.com/sgMxRPV0
&gt; not sure if aborting threads is even supported in .NET?) It is. Thread.Abort() https://msdn.microsoft.com/en-us/library/5b50fdsz(v=vs.110).aspx I can't use a link because MS use bloody brackets in their url &gt;_&lt;
`strict` is not a valid C# pragma. However, there is a feature flag `/feature:strict` for roslyn that will turn on some warnings/errors that are breaking changes from the original native compiler. 
I suggest that you learn Unity and C# using their [official tutorial](https://unity3d.com/learn/tutorials/topics/scripting/coding-unity-absolute-beginner) 
oh yeah I know what you mean. when I finish it I will have a look to see the differences and to implement something if I missed it haha.
https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/inheritance
[Maybe](http://lmgtfy.com/?q=C%23+Inheritance)
This script set worked in Unity! Thank you! I think the tutorials are just out of date and as Unity is contstantly being updated and changed, I think I was running an old script that wasn't designed for Mono/UnityC#. Thanks!
For future reference, just indent your code with 4 spaces and it'll be much more readable. Best way to do this is, copy/paste it all into sublime text, highlight all, press tab, copy/paste all back into Reddit.
That is not C#, rather the old UnityScript which was based on JavaScript. https://blogs.unity3d.com/2017/08/11/unityscripts-long-ride-off-into-the-sunset/
Yeah, I did check it. Do you think I should read the whole e-book, will it help?
So I found that but how the hell do i run it?
I think it’s a very good read to familiarize yourself, however, it doesn’t answer all your questions, particularly about roles and permissions. I’m not sure the best route to be honest, perhaps someone else can chime in. The way I see it, you could put roles or permissions in the bearer token, but this is not the recommended approach by the authors of identity server. You could have a dedicated service to check permissions, but then you’d be making an http request to a different microservice on every request, which is not ideal. You could store permissions in each microservice, but this seems very heavy. You could put your permission logic inside your api gateway - not sure about this approach either.
Once installed, you can right click on a project in VS2017 and you should see some new context menu options. One of them is reverse scaffold. Once you configure it and run it once, it will save a settings file in that project so that you can easily right click and regenerate your context / POCOs with just a few clicks.
Jesus, I was looking for like a command line thing I'd need to run. I'll look into it thanks!
No problem! It's basically a GUI wrapper around those commands. Good luck
I know this doesn't answer your question, but some words of advice: You've started writing some microservices and you're already coming up against having to potentially join them with a dependency. Unless this is just an exercise in learning, consider not separating them to that extent (but by all means, separate the code itself).
Old web forms me is trying to migrate to angular with a .net core API back end. Should be interesting
We don’t use Identity Server and all the built in authorization stuff; instead we use Microsoft’s JWT nuget to issue jwt tokens in identity microservice; we add all necessary info into it as claims; all other MSs simply use the same keys when authenticating users, this allows us to use the standard Authorize attribute. Re: roles - we didn’t go there as these are inflexible for us. We defined Permissions in claims as resource-level CRUD qualified claims. Roles then map to permissions and each time we write the token, we add them there. (And so users can create custom roles; and we can also assign permissions directly to users).
or asp net core with vue
I think you'll quite enjoy the change!
Are you familiar with JWT (Json Web Tokens)? I have built an API gateway that ties in a few microservices and the way I am handling authentication is through a JWT. The login/logout has no UI as it is just a POST with the credentials to be authenticated. Once authenticated I load up the user information into a new `ClaimsIdentity`. That then gets added to the payload of the JWT and I return the encoded JWT. That JWT then gets added as a header `Authorization: Bearer [token here]`. I then add a JwtBearer Authentication service in Startup.cs to any microservice that needs to have authentication. At this point I can use Roles in the microservices. In Startup.ConfigureServices( ) in any microservice requiring authentication services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme) .AddJwtBearer(options =&gt; { options.TokenValidationParameters = new TokenValidationParameters { ValidateIssuer = true, ValidateAudience = true, ValidateLifetime = true, ValidateIssuerSigningKey = true, ValidIssuer = Configuration["ValidIssuer"], ValidAudience = Configuration["ValidAudience"], IssuerSigningKey = new SymmetricSecurityKey( Encoding.UTF8.GetBytes(Configuration["TokenSecret"])) }; }); In AuthController.cs of Authentication Service using System.IdentityModel.Tokens.Jwt; using System.Security.Claims; using Microsoft.IdentityModel.Tokens; public IActionResult Login(string username, string password)(){ //Auth logic here ClaimsIdentity claims = new ClaimsIdentity(); claims.AddClaim(new Claim(ClaimTypes.Name, "User Name Here")); claims.AddClaim(new Claim(ClaimTypes.Role, "Role Here")); return Json(new { token = GenerateToken(claims, _configuration["ValidAudience"], _configuration["ValidIssuer"], _configuration["TokenSecret"]) }); } public static string GenerateToken(ClaimsIdentity claims, string audience, string issuer, string secret) { var tokenHandler = new JwtSecurityTokenHandler(); return tokenHandler.WriteToken( tokenHandler.CreateToken(new SecurityTokenDescriptor() { Audience = audience, Issuer = issuer, Subject = claims, SigningCredentials = new SigningCredentials( new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secret)), SecurityAlgorithms.HmacSha256), Expires = DateTime.Now.AddMinutes(60), NotBefore = DateTime.Now })); }
Both checking for null is "optional" (you can use the value even if it is null), using Option/Maybe type force you to check if value exists.
I’ve been working on a micro service project for the last 6 months, and we had an initial approach (still in place) as well as a planned approach to be implemented. Since the microservices are consumed by a single application, the initial approach has been to firewall the microservices and not authenticate. We just pass the UserID of the logged in user for authorization to specific resources. Since the microservices are not exposed to the internet this approach has worked thus far, but it is limited and carries overhead. The planned approach is to have an application gateway that will generate and validate JWTs. 
What? since day 1, properties can be defined like this: public sometype SomeProperty { get { return someField;} set { someField = value;} } Where is the inconsistency? Properties are getting better and better with syntactic sugar (what about java), but property syntactic is the same since day 1.
I hate how they named the new one Razor Pages, when there already exists Razor markup that I use with standard MVC 
i got about 1/2 way through a chips challenge clone many years ago. I should see if i can dig that up...
So here's a question you may or may not have the answer to. I'm just getting this working, but my eventual install will need to switch dbs based on a url. Think like site.com/client1 points to client1's database, but site.com/client2 points to client2's database. I'm trying to get one set of code running about a dozen sites. The only thing different is the db. Right now I have scripts that push my code changes to all the sites, but I'd like to get it in one spot. Any ideas?
Hmm I would probably configure API routes like client/{id}/resource but there may be a better way to do it. Maybe search for multitenant API / database architecture guidance for .NET Core
So they will be already configured as such. Basically site.com/JohnsSite, site.com/BobsSite I've been looking around at ways to change the connection string based on the url. Thanks for the help though. 
.net core has identity baked in, its pretty straightforward 
Yea that's where I was thinking of going, just curious on the migration aspect. I've read a couple things on it, was just hoping for some first hand experience pointers
Authentication and authorisation are crosscutting concerns and should not be a reason to shy away from microservices. The system simply needs to be architectured with this in mind by abstracting this behaviour so should the auth provider need to be changed then it's a trivial process. As an example using authorisation and WebAPI, this would mean either not using the authorisation attributes, or wrapping these with custom classes so the underlying attribute only need to be changed in one place rather than on every API controller.
I personally use app.quicktype.io to create the classes and then use Newtonsoft.Json to serialise/ deserialize 
JWTs are the way to go. There's nothing to manage other than a couple secrets. We keep our secrets in an Azure Keyvault so that they're encrypted at rest and can be easily rotated out when needed. They are essentially internal API keys.
I remember that I've seen scripts to migrate to identity 1 back in the day somewhere on codeplex. Scripts to migrate to identity 2 should also exist or at least you should be able to apply EF migrations. I even wrote my own scripts to migrate to Identity Core from identity 2 so it should be doable. If a small amount of data is important you can write the scripts yourself and ignore the less interesting tables. If you are in an environment where it is not acceptable to ask the users to reset their passwords you can implement a custom password hasher and use SHA1 for old accounts and delegate to the default hasher for new accounts and when the user changes/resets password. There were examples of that accompanying these scripts I talk about.
Yea I've been preaching towards a system that logs them in via the legacy model, then has them update, and then use the newer stuff. More work on my end but I feel like that's the route to head
Lol I wish. My support calls would go through the roof. My clientele aren't the most tech savvy people. Anything that is not the button I trained them to click means disaster
You'd better implement that custom hasher and not bother with prompts. You can let the old unsecure SHA hash stand or make it so upon login password is automatically rehashed to the more secure version.
VS with net core SDK 2.1 has very nice templates, but Vue is missing. I wouldnt recommend due to popularity, though.
you don't even need to have the secrets loaded to validate, only to generate. good way to go. cert auth is very good, but complicated. crls, cas... just a regular rsa key pair will buy you a lot internally. compromised? incur some downtime and change the keys (at that point, downtime is the least of your concerns anyway). 
I'm not aware of asp.net core identity functioning as an oauth or oidc server. Unless it's been added recently you need something like Identity Server 4 to help Angular talk to asp.net core identity.
&gt;There is a chance that a static constructor could be aborted. In rare cases, this might prevent instances of that class from being created in that application domain. &gt;The thread is not guaranteed to abort immediately, or at all. I'm amazed they even added this to begin with haha.
Okay, so the web applicatin has a login UI, when a user logs in the details are sent to an authentication service (Microservice) in a separate project where we check if the user exists (Do we do it using AspNetCore Identity?), if the user does not exist we return the user to the same login url on the . If not, the user is authenticated and a JWT is generated with claims related to the user. Or the web application with the login UI itself has the authentication service and AspNetCore Identity?
yikes
Haha, yeah, but it really is the nuclear option and not one to play with. I've only used it with a 3rd party API where, randomly it would just not return from one of its methods. So we had to monitor the threads status and age and abort them if they failed. It's actually cleaner to do it with spawned processes, but it was a bit o a hail mary move to be honest.
Try replacing the VirtualizingStackPanel with a UniformGrid: &lt;UniformGrid HorizontalAlignment="Stretch" Background="Purple" Rows="1"/&gt;
&gt; the web application with the login UI itself has the authentication service and AspNetCore Identity? You could do it this way, or you could have a separate authentication service that returns the JWT and you use that to sign the user in to your web project (take the JWT and decode web project side, then use the ClaimsIdentity to SignOnAsync). I think it depends on what makes sense for your project. For example, most of my projects will require Single-Sign On (using CAS) and since I have no user accounts to manage, having a separate authentication service doesn't particularly make sense. But I have a side project that will require user management and for that one I will have a separate authentication service so that I can place the user database behind an API that is only accessible from the web projects using firewalls, routing rules, etc in Azure. But that is a different rabbit hole entirely... &gt; pass the ValidIssuer, ValidAudience and TokenSecret in the appSettings.json You could, but that would end up placing your secret into source control. A better way would be to place the settings into the user secrets for local development and add them to your deployment process (through continuous integration or by adding them as environment variables on the server or by adding them manually in Application Settings in IIS/Azure portal). The thing I love most about core, is how many ways there are to do the same thing. 
I would suggest to research better next time. Delegates and Events were also an imitation. Delphi already had support for them. Regarding type-safe function pointers, they go all the way back to Algol. Nullable types already existed in Eiffel. Delphi, Eiffel and Common Lisp already had support for properties. Smalltalk collection categories already had a similar capability.
You can try [ZetExcel.com](https://ZetExcel.com) If you need Excel generation functionality for your .net application.
Very few things in programming languages have been new since the 70s or so.
update?
You can try [ZetExcel.com](https://ZetExcel.com) If you need Excel generation functionality for your .net application.
Should've done a better research indeed... Thanks for the corrections. I'm fixing all my errors right now and will give credit in the post.
Sorry fella, a lot of these are not innovations. Events and properties existed in VB6, Delegates are really just pointers to functions with some type safety bandages. /u/pjmlp has some other great examples. Delphi actually rocked (for a language with roots in Pascal) This is not to say C# is bad. True, blue skies thinking type innovation haven't really been the key to progress. Iteration, refinement, adaptation and adoption of other language's refinements have been the keys to progress. A lot of the languages we use today have their computer science roots reaching back to the 70's. The way we use them too. Agile came about in the late 90's, coalescing in around 2000, so basically 20 years ago. Remember MVC? 1973. That's 45 odd years ago. Functional programming? Someone might have to help me out with this one, but the maths came from the 1920's and the language features came about in the... 80's? Or 60's. Either way a very very long time ago. 
&gt; Functional programming? Someone might have to help me out with this one, but the maths came from the 1920's and the language features came about in the... 80's? Or 60's. The maths: [lambda calculus, 1930s](https://en.wikipedia.org/wiki/Lambda_calculus) The languages: [LISP in 1958-1960-ish](https://en.wikipedia.org/wiki/Lisp_(programming_language\)#History)
I built Mac software back in the early 90's in C++, the doc's were all Modular-2 iirc. The Mac used handles (pointers to pointers where the latter could be relocated (sound familar) ) extensively. It was the first time I saw that, but undoubtedly not the first time it was used.
The point of this post isn't really clear to me. If it is that early C# is largely a clone of Java but adapted to a more Windows-friendly environment, I don't think anyone would dispute that. Over time, though, the two have diverged. The post also seems to equate "innovation" with "invention". Virtually _nothing_ a shipping programming language does it an invention, since most of it exists previously in research prototypes. (Some of C#'s features were actually prototyped in languages like Cω and Spec#.) Languages also inspire each other. Many languages had string interpolation long before C# did. Several languages these days implement C#-like async/await. C# is a multi-paradigm language. It takes ideas from _many_ sources without being particularly dogmatic about it (unlike, say, Ruby).
C# is not meant to be innovative. The designers do not want to introduce untested language features. They carefully introduce features that have been proven to work in more experimental languages. F# comes to mind, which in turn burrowed heavily from other languages. 
Classes existed before C++. Smalltalk had an implementation as well. Attributes - This may be innovative or not. They used to be done using pragmas, which is a very old concept, but they were fixed to a compiler version. Generics - way before Java. These existed in Ada83 and did it better than C++, Java, or C# IMO. Static classes - What's to stop these from being implemented in C++? Nothing requires that a class has instance data. Implicitly typed local variables - I'm not sure who got it first. These started showing up in C++ before C++11, but after C++98. If you look at a language such as Ada (83, 95, etc...) that has everything except the kitchen sink, a lot of language concepts that are added to language today, were already implemented in earlier languages. An example of this is using named parameters and field names in structs. They eventually get added to newer specs for common languages, but were already present in a language spec'd in 1983.
I'd rather have #2 for a work focused language in today's climate of hundreds of languages.
I have *A Book on C*. It was one of my college textbooks. IMO, it wasn't as good as Deitel &amp; Deitel's *C - How To Program*. I wore the cover off of that one.
Looks kinda neat, but seems to be abandoned (hasn't been updated in over a year, and the website listed on github no longer exists).
&gt; Attributes - This may be innovative or not. They used to be done using pragmas, which is a very old concept, but they were fixed to a compiler version. Attributes are also stored in the compiled code, so they are more than just pragmas. I can't remember any other language that allows you to add metadata to the compiled code(though there is bound to be one that came before c#)
Fair enough.
Jeez! I used to do Delphi and I've never even thought about the fact that he was involved in both! No wonder c# feels familiar! 
&gt; C# is a multi-paradigm language. Yes, though OO is first among the paradigms here. C# is not an "OO purist" language at all though. But If you _really_ don't like the OO paradigm, then C# is not going to suit you. 
Quite true. If you expect a language like Haskell or F#, C# will bring you a world of pain. If you expect something like Java or _sort of_ like Swift*, you'll feel mostly at home in C#. *) With the one big difference that Swift is always native, whereas C# is typically not.
I started to learn programming with Pascal and later Delphi. So after some C++ experiments C# was like coming back home to me. Maybe it is not bleeding edge innovative, but who cares? It gives me an opportunity to write to apps to a huge amount of platforms while retaining and reusing my knowledge. And all this new multi-platform initiative expands the language's reach even more. And don't tell me that you haven't "imitated" (ctrl + c/ctrl + v) code from StackOverflow in your projects. ;)
I'll go with "no". My best guess at what will happen: G1.Clear(forGroundColor) will set the bitmap to the foreground color. The next line (G1.DrawImageUnscaledAndClipped) will draw the just-cleared solid forGroundColor over the top of the just-cleared image. Then, for each pixel in the image, c1 will be the color of forGroundColor, c2 will be the grayscale bitmap's color, and SetPixel will set that pixel to the c1 color (which is forGroundColor), with an alpha channel set to *BLARGH! YOU JUST STUCK A FLOAT INTO AN INT PARAMETER.* That's my guess. My recommendation is to create either a [ColorMatrix](https://msdn.microsoft.com/en-us/library/system.drawing.imaging.colormatrix%28v=vs.110%29.aspx) or a [ColorMap](https://msdn.microsoft.com/en-us/library/system.drawing.imaging.colormap%28v=vs.110%29.aspx) to do the adjustments for you. ColorMatrix is for when you want to tweak every color in an image by an amount relative to its current value. ColorMap is for when you want to find every pixel of a specific color and change it to a different specific color. ColorMatrix sounds more directly like what you're after, but ColorMap is *so* much easier, and you can fairly quickly make a loop that builds a ColorMap[] with 255 entries (the maximum number you'll need for a grayscale image). So it might be worth it to use ColorMap instead.
Give me tried and true for my business domain. If I want bleeding edge I would pick something based on it's *fun* or *interesting* factor. 
Ooo I never read that one. My first instinct is to go Amazon one, but there are probably other things I should focus my attention on. *goes to Amazon to buy C books* 
"Having a count" doesn't mean it's an array. In fact having a Length would be more likely to make it an array. Having a Count makes it more likely to be a List. Having a Count() (please don't ask) means it could be any old crap. Try putting .ToArray() at the end and see if that helps. You might need to import a namespace. I use a tool called Resharper so have literally no idea where anything lives in the framework these days. Oh that's easy it's in System.Collections.Generic, so using System.Collections.Generic; and you might be fine.
The last one
Avalonia isn't really ready for primetime. The documentation is garbage right now (often non-existent, vague, or wrong). It's worth keeping an eye on, though.
I'm glad someone remembers what Visual Basic had. People often dismiss it, but it was quite powerful. 
ManagementObjectCollection is not an array. It does have a `Count` property (which arrays, incidentally, do not), if that's what you're looking for. I'm not sure what you mean by "install these using another class" — what are you actually trying to do?
There's a `List.ToArray()` in that namespace, but ManagementObjectCollection isn't a list. `System.Linq` would work, though.
authorization and authentication should be separated. see this talk from the identityserver creators: https://www.youtube.com/watch?v=t34Cff0pBmA
It was astounding really. You had to know how to work it, but for enterprise UI stuff back then it was brilliant. I worked for various financial institutions that literally ran their organisations off it. Honestly I loved it. 
:) ICollection and IEnumerable. I didn't want to do one of my 40 page tutorials :) I have no middle ground apparently :)
&gt; If you really don't like the OO paradigm, then C# is not going to suit you. I don't know if I agree. You can disregard the entire OO aspect of C# and still have a useful language - just use static methods, DTO classes ("a struct you can put on the heap"), and go nuts. What's wrong with that? I can't find a reference, but I remember reading somewhere that StackOverflow used mostly static code for performance. They had some strong opinions stating they hated the idea of hiding their code behind interfaces for unit testing, and instead relied on integration testing. Again, I can't find a reference, nor examine exactly the extent of their static strategy, but it's food for thought.
Same here. Good times. Polymorphism through 'implements' was so powerful for the time.
Oh I won't even read them, I'll just flip through the pages in a nostalgic haze and then get on with current stuff :) I think though, that there's any book I'm still sufficiently fond of to recommend 20 years after I read it is a testament to its quality :)
You need to explain your problem a lot simpler if you want help. Maybe mock up something so we can give an opinion on it.
I don't hate webforms, but it is old. They should be teaching MVC by now.
They probably did it to leverage brand recognition of Razor. 
The general advice I can give on learning how to do UI is: * Keep it simple, neat, and clean * Let it breath. (Give it some white space) * Keep everything lined up, properly sized, and logically grouped. * Two fonts max, one Serif, one Sans Serif. * Don't try to get fancy, you'll probably suck at it. * Experiment. Experiment. Experiment. You only learn this by doing! Eventually you do kind of figure out what you're doing, but only because you played around and screwed up so many times. * TRUST YOUR USERS!!!! If they say something stinks, it stinks. 
White space good. Do you think someone read that and then, while drunk, decided Modern UI was the way to go? Delineate people, and stop trying to make touch happen. I've had touch enabled laptops for a decade now? And never once have I touched the screen unless I'm cleaning it. Back on topic, you give great advice. /u/wannabeIndLeader I'll add to the above: If you have any UI action, do it 500 times. If you get utterly hacked off by the 20th, 50th, 100th, etc you have a metric by which to measure your UI's irritation factor. Too often people put together a UI that works beautifully when you demo it once, but in use has users tearing their hair out. On that same note, any workflow that has n actions repeated in sequence every time is broken. If you need to do A, B, C and then D, you just need to do D. A, B, C should happen automatically. Because we're not Google, the users may need to do A, B or C independently, so give them that power. The code, architectural stuff, feels a bit like you're duplicating effort, but that might just be the way you describe it. Either way, it's actually not a problem. Get the UI working in a way that doesn't make the user's want to kill you, and then tidy the code. We separate our concerns (MVC, MVVM, MVP, and various other historical variations on the theme) because it allows us to codify the interaction logic, which is usually relatively stable (for some weird value of stable) and adjust the look and feel independently. 
ASP.NET MVC, probably running on .NET core is the current for applications with pages. Then you have SPA's (Single Page Applications (Like Gmail)) which will run in ASP.NET, but really you just want WebAPI 2 and SignalR (assuming you're sticking within the Microsoft stable). I still favour ASP.NET WebAPI for server stuff, possibly with SignalR (We're in a transitional stage and I don't know how the Core version is coming along) and Node with React or Vue for the client side. It separates the two aspects neatly. You will need to know Javascript or TypeScript to get anywhere really, so I prefer to embrace it on the client side, servered by Node, then have the client app communicate with the .NET server app (and the Node server too if necessary). You can also cut out the .NET bit altogether, but it's my core technology so for me that's a silly choice. Webforms is legacy. There will be a billion projects out there that rely on it, but if you're not looking to do maintenance work on old apps, avoid it.
Stupid point of order, but technically it's the "?." operator. I know, slap me :)
I learned it this way. Don't make a method async if it simply returns a task. 
Yes but it's not like consistent brace style, it has a direct impact on the performance and efficiency of the code. For high throughput applications, and we're not just talking algo trading/gaming applications, there's a fair bit of GC pressure invoking an async method as opposed to returning a task. I do get your point though, I probably wouldn't micro-optimise, but choose the more familiar option at first. I just don't want you to skip out on something that does have value once you start profiling.
Oh google Alhabaraaha, I can never spell his name, I'll find it... [This is well written, only 20 pages long and covers a heck of a lot of Threading from basics to some more complicated stuff](http://www.albahari.com/threading/) 
Null is basically "I don't know". If "IDK" is the best answer you can give, then that's the answer you give. It's up to your caller to figure out how to handle that answer. Now, if you're the caller and you get a null/IDK back from your callee, then it's *your* responsibility to figure out how to proceed without all of the answers you were looking for. I think we should create a C# class named `¯\\\_(ツ)_/¯` that can be used the same way DBNull is. 
Ok, and again... n00b when it comes to actual programming (I'm a scripting guy who is trying to convert :)). &gt;System.Ling would work, though. So, assuming I have a ManagementObjectCollection called 'col', would that be something like List&lt;ManagementObjectCollection&gt; mocl = col.ToList(); ?
Agile coaches teach mocking. It allows them to write short simple examples, get their fee and fuck off before the shit hits the fan. It appeals partly because it's a methodolgy with a start, middle and end. A process you can teach as repeatable, and it will give you results. So people who are taught this stuff come out of the training with a sense of pride and accomplishment. Honestly it reminds me of every other "you don't need expensive smart programmers, you just need this list of instructions and some monkeys" scheme of the past. Anyone remember CASE tools? I spend a lot of time deprogramming the people who come out of this type of training. /u/Bolitho I wrote a blog bit recently where I say straight up I'll be using mocks as an interchangeable term for mocks, stubs, test doubles, fakes. Most libraries roll the lot into a single type these days. If you want record/replay (I'm glad you don't) you use a Mock&lt;&gt;, but if you want stub that returns 1 regardless of what values are passed in, you use a Mock&lt;&gt;
VB predates Delphi but I don't know if events were part of the language from the very beginning.
ManagementObjectCollection implements IEnumerable so you can use System.Linq and call .ToArray(). https://msdn.microsoft.com/en-us/library/system.management.managementobjectcollection(v=vs.110).aspx using System.Linq; ... var managementObjectArray = managementObjectCollection.ToArray();
A crosscutting concern is some part of your system that cannot be cleanly delegated to a single layer of your architecture. For example, dependency injection is a CCC as your container is initialised at a very low level (typically the bottom level), but higher level layers in your architecture would require dependencies to be injected, and also may need to configure their own containers. These layers shouldn't force you into having to use one specific 'brand' of IoC container. It should simply use an abstraction and let you decide which container to use for the particular target environment. As an example of where this might be required: imagine you want to use your core business rules and application logic on a website AND a native mobile application. These may not support the same IoC containers and therefore you would need to use more than one. Since you're using an abstraction throughout your code, this is easy to do. Similarly, this may be the case for your authentication and authorisation module. You mention that Identity 4 is very famous, but that's a very short term view. What happens if there is a critical security flaw discovered and it's no longer in support (being patched), or you want to upgrade to 5 or 6 or 7 and the API has changed slightly, but enough to mean you need to update every one of your API controllers. Don't think short term, your future self (and teammates) will thank you.
I am pretty sure practically every feature in every industrial programming language since at minimum the mid-80s can be tracked to a predecessor. This predecessor will either be an ancient industrial language like C if the feature is considered common or a research language like Lisp, Haskell, Eifel, etc. The author may find out that to have any meaningful distinction between innovation and imitation a set of industrial languages should be defined and if a feature does not come from them but from the research languages it may be considered innovation in the sense that C# managed to bring the research to the industry which is often harder than the actual invention. 
The picture didn't get linked. Weird. let me try pasting it: +--------------------+ +-------------------------------------------+ +----------------------+ | CLIENT APPLICATION | | APP SERVER/API | | DATABASE SERVER | | | | | | | | +--------------+ | | +--------------+ +-------------+ | | +------------+ | | | | | | | | | | | | | | | | | PRESENTATION | | | | BUSINESS | | DATA ACCESS | | | | | | | | LAYER | | | | LAYER | | LAYER | | | | | | | | | +----&gt; | | +----&gt; | | +------&gt; | | | | | containing | | | | containing | | containing | | | | DATABASE | | | | | | | | | | | | | | | | | | PRESENTATION | &lt;----+ | BUSINESS | &lt;----+ | DATA ACCESS | &lt;------+ | | | | | LOGIC | | | | LOGIC | | LOGIC | | | | | | | | | | | | | | | | | | | | | +--------------+ | | +--------------+ +-------------+ | | +------------+ | | | | | | | +--------------------+ +-------------------------------------------+ +----------------------+ RUNS ON USER'S PC RUNS ON AN APPLICATION SERVER RUNS ON A DATABASE OR WEB SERVER SERVER
Thanks for your comment! So, it doesn't appear to allow me to use the contents of my s.Get() in the method. It says "Cannot convert from 'System.Management.ManagementObjectCollection' to 'object[]'". The class I have that I return the collection uses the following lines: // ConnectionOptions options = new ConnectionOptions(); ManagementScope theScope = new ManagementScope(@"\\.\ROOT\ccm\ClientSDK", options); ManagementClass mClass = new ManagementClass(theScope.Path.Path, "CCM_SoftwareUpdate", null); ManagementObjectSearcher s = new ManagementObjectSearcher("SELECT * FROM CCM_SOFTWAREUPDATE WHERE COMPLIANCESTATE=0 AND EVALUATIONSTATE &lt; 2"); mClass.Scope = s.Scope = theScope; ManagementObjectCollection col = s.Get(); return col; // This appears to work correctly, as I have a method in the class that, when I instantiate it, gives me a count which I have verified several ways is correct. So, later in the code I create the CCM_SoftwareUpdatesManager object and try to invoke the method (I see "InvokeMethod", not "Invoke"). // CheckPendingUpdates availableUpdates = new CheckPendingUpdates(); var updates = availableUpdates.GatherUpdates; ConnectionOptions options = new ConnectionOptions(); ManagementScope theScope = new ManagementScope(@"\\.\ROOT\ccm\ClientSDK", options); ManagementClass mClass = new ManagementClass(theScope.Path.Path, "CCM_SoftwareUpdatesManager", null); mClass.Scope = theScope; mClass.InvokeMethod("InstallUpdates", updates); // Any thoughts? I'm sure I'm missing something simple.
Closest I can see is: https://github.com/dotnet/corefx/issues/29308 which was related to port exhaustion. You aren't sending a close header or using HTTP/1.0 (which needs a keepalive header)
What logic are you using to check what ports are being used? TCP connections in some states that might be considered 'inactive' (especially CLOSE_WAIT) are still technically 'in use'. How are you choosing the port to use (or are you leaving that to the httpclient to decide)? &gt;I would still hit the issue once in around every 10 thousand calls using SendAsync. Is this once per minute? Once per day? Once per month? If your request rate is high, you're at higher risk of collisions during the process of freeing sockets after use. What logic are you using to check the active tcp connections and when are you doing so? Async code can introduce strange bugs, and if your sockets are being freed before the logging code can run after each issue, you may be seeing monitoring that doesn't accurately reflect the state of your application at the moment you think it does.
Says ManagementObjectCollection does not contain a definition for ToArray() unfortunately.
&gt; TCP connections in some states that might be considered 'inactive' (especially CLOSE_WAIT) are still technically 'in use'. Is that different from TIME_WAIT? because my count includes TIME_WAIT. &gt; How are you choosing the port to use (or are you leaving that to the httpclient to decide)? Leaving httpclient to decide I think. Is there a way to choose it oneself? Are there advantages to that? &gt; Is this once per minute? Once per day? Once per month? If your request rate is high, you're at higher risk of collisions during the process of freeing sockets after use. The request rate can be very high in my scenario. Somewhere around once per a few seconds to once per minute when active. Should that really make a difference though if I'm reusing the httpclient? If so, what's the alternative? &gt; Async code can introduce strange bugs, and if your sockets are being freed before the logging code can run after each issue, you may be seeing monitoring that doesn't accurately reflect the state of your application at the moment you think it does. Not sure if that would make a difference, because like I said I'm counting those in the TIME_WAIT state, which should be sticking around for several seconds afterwards. My log prints out within a second of the failure.
&gt; You aren't sending a close header or using HTTP/1.0 there's no call to request.ProtocolVersion in the code base, and I don't see any code to specifically set anything in the header.. 
Key for signing and validating JWT. From code perspective, JWT tokens simply represent claims
I don't think it could be resolved in many (most?) cases. Especially when you add generics to the mix.
I recently learned about this page that Microsoft has: https://docs.microsoft.com/en-us/windows/desktop/uxguide/designprinciples It contains a lot of info about interface design and common conventions. It may not be exactly what you're looking for, but I've found it helpful for knowing when to do certain things so that users find your program intuitive. 
This seems like it would make code much harder to read while not providing any benefits at all. I imagine it could make supporting overloading kind of a pain as well. Is there some specific advantage that might be gained from functionality like this?
You can actually get quite far with some boilerplate and no notable OO at all: using System; // and other usings using static ProgramFeatureX; // another function collection public static partial class Program { static void DoIt() { ... } } 
Agreed. The Point of C# is to *maximize productivity*. I don't care if the feature isn't an 'innovation', because to an extent (t/w: pcj fodder) a lot of new features can *feel* innovative when they are brought to a language that is already as rich as C#. 
I mean, you could probably do something terrible with the `global::` declaration and some other hackery...
So.... Is this an ASP.NET application? or a console application? Because ServicePointManager defaults are *very different* between, say, an IIS hosted process and a Console Application or windows service. In the latter cases, the default is **2**, however that number works slightly different for HTTPS (for reasons I don't feel like getting into.) SOOOOOOOooooooooooo if you have a console app or windows service you might want to try something like this in your service, before ANY rest calls are done (i.e. in your Main(), or perhaps in your DI Config method) : `System.Net.ServicePointManager.DefaultConnectionLimit = 12;` That's a pretty decent number for most use cases. `ServiceP
&gt; Is that different from TIME_WAIT? Yes. You should also be checking for LAST-ACK, FIN-WAIT-1, FIN-WAIT-2, and CLOSING. &gt;Is there a way to choose it oneself? Are there advantages to that? I don't know if there's a way to control it through httpclient. There may be advantages, but it's mostly just a way you could be asynchronously shooting yourself in the foot (in theory). Also, found an interesting Oracle article on some Windows settings that may be adjusted for more simultaneous connections: https://docs.oracle.com/cd/E26180_01/Search.94/ATGSearchAdmin/html/s1207adjustingtcpsettingsforheavyload01.html 
It's not an IIS application. That was another thing I was gonna try, but then when I a search for System.Net.ServicePointManager.DefaultConnectionLimit and there was already a setting for that set to 300. &gt;Additionally, you need to make sure that you are properly calling Dispose() or otherwise using-wrapping any HttpResponseMessage objects that come back from your SendAsync. Hmm I'll check that out when I get back to work and see if it makes a difference. 
By adding enough namespacing to separate function names from everything else, it's possible to loosen the restrictions on order and allow the function or operator to appear before, in-between or after parameters without adding more syntax. I find that many operations are better expressed as operators, @list push 42 etc. Changing the order of parameters doesn't seem as useful to me, and unique types is a pretty serious limitation. Finding problems to match solutions doesn't really work that well from my experience.
not really copy-pasta, but a lot of hard questions and ideas were pulled of StackOverflow answers. The key to being a good programmer, I think, is to be able to take someone else's solution and translate it successfully into your work.
A Cloud based Auth provider (e.x. Auth0) would be a good Example.
Have to leave a comment... On one hand, THE INFO GIVEN IS GREAT! I wish other developers on my team knew this info. On the other hand... If this is /r/csharp, some examples of each in the language would be nice. ;)
Well it would certainly be possible for the language designers to build a feature that works something like you describe, but a better question is *why* would you want it? Imagine having to refactor a large codebase and not knowing if all your method calls are going to work any more. I'd much rather stick with a deterministic way of ordering parameters.
Yea I agree. Of course it would be possible, but why would you want it to be? 
C# 4+ lets you specify parameters by name which allows you to supply them in any order. But matching by type alone has too many problems as others have mentioned.
Ooooooh man, I didn't realize this! It got me closer, I believe. I'm still getting errors, though, that my array is null for some reason. I declare it as null because it needs something (I believe), but then I'm using CopyTo to add to it... right? The error I receive is: Value cannot be null. Parameter name: array. I have to build and run it on another VM since I don't have the namespace locally, so I added a label and wrote to it to see what was going on. I see that it pulls in the correct number of updates (2, and I tested that worked by installing one manually and rerunning, which gave me 1). It breaks during the CopyTo. What am I doing wrong? Relevant code: CheckPendingUpdates availableUpdates = new CheckPendingUpdates(); ManagementObjectCollection updates = availableUpdates.GatherUpdates; ManagementBaseObject\[\] updateArray = null; lblInfo.Text = "Updates found:" + updates.Count + "\\r\\n"; lblInfo.Text += "Update array declared" + " - " + "\\r\\n"; ConnectionOptions options = new ConnectionOptions(); ManagementScope theScope = new ManagementScope(@"\\\\.\\ROOT\\ccm\\ClientSDK", options); ManagementClass mClass = new ManagementClass(theScope.Path.Path, "CCM\_SoftwareUpdatesManager", null); mClass.Scope = theScope; lblInfo.Text += "Creating array" + "\\r\\n"; // THIS IS WHERE IT BREAKS updates.CopyTo(updateArray,0); lblInfo.Text += "Array created" + "\\r\\n"; lblInfo.Text += "Now: " + updateArray.ToString(); lblInfo.Text += "\\r\\n" + "Trying to install updates...";
This was the bad update. https://blogs.msdn.microsoft.com/psssql/2018/07/26/july-10-2018-windows-updates-cause-sql-startup-issues-due-to-tcp-port-is-already-in-use-errors/
Yes Recursive is what I meant, my mistake. I've been tossing around a few ideas, and not sure how I could use group by to accomplish this, could you elaborate a little? 
I work for a contracting company that makes medical devices. I loved your idea and hacked it into my environment. Naturally, I included our trick as a little easter egg in our most recent glucose-meter. I wrote a method, called: makeFartNoise(Fart fart, int duration) It does pretty much what you'd expect. Even better, I called it in the program: makeFartNoise(20, Fart.Wet'nSmelly) The office loved it. When they asked me why I put it in our glucose meter AND used the wrong argument order to invoke it, I told em I thought it was a neat little trick. They agreed, and as a consequence its been adopted company wide. Now while debugging our programs we have to try and figure out if all our arguments are being used in the correct order, but we all agree it was well worth it. 
Is this a copypasta if not, it probably should be. 
Off the top of my head, maybe something like this: public List&lt;object&gt; Flatten(object node, List&lt;ExpandoObject&gt; result = new List&lt;ExpandoObject&gt;(), dynamic item = new System.Dynamic.ExpandoObject()) { foreach (var child in node.Value as IDictionary&lt;string, object&gt;) { var child = child.Key; if (node.Value.CheckObjectInterface&lt;IDictionary&lt;string, object&gt;&gt;()) { item.AAA = child.Key; //This needs work Flatten(node, result, item); } else { result.Add(item); } } return result; } Needs a way to name the properties on the Dynamic object at each level. If you know ahead of time the maximum number of levels and what they are then you could define your own class rather than use the dynamic object.
I think I get where you’re coming from with your thoughts. It seems like a clever solution but it likely is just taking away a lot of the power you get from using recursive equations. 
Interesting, that's a good lead, thanks.
You might want to do some reading about Partial methods as they are not like header files at all...
Look into some sort of background job processing System. Quartz, [OddJob](https://github.com/to11mtm/OddJob), or even Hangfire are good candidates so that you cant manage background tasks better. Because, aside from the risks involved with spawning threads this way, there's also the fact that any threads spawned by IIS are very much at it's whims as to when they live or die.
What line is the exception thrown on?
Another approach: use the AsType method of IEnumerable to conver to IEnumerable&lt;T&gt;, then use standard LINQ. https://stackoverflow.com/questions/3580885/c-sharp-accessing-management-objects-in-managementobjectcollection
&gt;It pukes on: &gt; &gt;mClass.InvokeMethod("InstallUpdates", updatesArray); &gt; &gt;That's where it gives me the "Unable to cast object of type 'System.Management.ManagementObject' to type 'System.Array'". Am I invoking the method incorrectly? When I compare it to my PS code, it looks like I'm correct as far as that is concerned, but it is invoked in a slightly different way there. Not used to working with WMI in C#.
Man, that got me so close! It runs without error, but doesn't trigger the install like I would expect. Thoughts? CheckPendingUpdates availableUpdates = new CheckPendingUpdates(); ManagementObjectCollection updates = availableUpdates.GatherUpdates; ConnectionOptions options = new ConnectionOptions(); ManagementScope theScope = new ManagementScope(@"\\\\.\\ROOT\\ccm\\ClientSDK", options); ManagementClass mClass = new ManagementClass(theScope.Path.Path, "CCM\_SoftwareUpdatesManager", null); mClass.Scope = theScope; ManagementObject\[\] mo = updates.OfType&lt;ManagementObject\[\]&gt;().FirstOrDefault(); mClass.InvokeMethod("InstallUpdates", mo);
hehe!
Try using .ToArray.
What is the signature of the InvokeMethod method? The signature is the line where the name is and all the parameters.
Sure, I use named arguments all the time.. I'd guess about 50/50 vs positional. Depends on the project and how many bubbles are in the lava lamp. But it also depends on the glucose meter readings. :P
Like I said: **I don't think this would be much use**... and for **unique** types only.. Not sub-classes of types. I can see it being handy for a quick project or library where the long-term doesn't matter much. Just so you don't have to DRY over all the code for multiple combinations of parameters. Please don't burn me at the stake over a random thought, lol!
Actually, I think it makes more sense to return the results instead of using a method parameter as the output. // Recursively test all of the collections static IEnumerable&lt;string[]&gt; TestCollection(IDictionary&lt;string, object&gt; collection, string[] keys) { var results = new List&lt;string[]&gt;(); // Iterate through each item in the collection foreach (var item in collection) { // Append this new key to the end of the current array var newKeys = keys.Concat(new[] {item.Key}).ToArray(); // If the object is the correct data type if (item.Value is IDictionary&lt;string, object&gt; itemCollection) { // Call this method recursively var nextResults = TestCollection(itemCollection, newKeys); results.AddRange(nextResults); } else results.Add(newKeys); } return results; } Then you can just store the results directly // Start at the root and empty set of keys var results = TestCollection(root, new string[0]); 
They were, but in the beginning components were written in native code (VBX), they only became fully exposed at language level when it became possible to write components based in COM in VB itself, version 5.0 (a bit lazy to check it properly).
Aeaazcv co ols
I get: Unable to cast object of type 'System.Management.ManagementObject' to type 'System.Array'.
This would never be a feature because it would cause a lot of breaking behavior. Let's say I have the following: `MyMethod(int a, double b, string c)` Later, somebody implementing my library overloads this method as such: `new MyMethod(string a, double b, int a)` The second is a perfectly valid override, and introducing it would break any compilation that relied on a feature that needed to guess the intention of both the original and new developer. This is especially troublesome given that the new override may have wildly different behavior from the original. There is, however, a feature that may be somewhat like what you describe within the CLR - just not in C#. F# has union types, and you could make your "smart" method by doing something like this: ```type MyWeirdType = MyStr of string | MyDub of double | MyInt of int let myFun (a: MyWeirdType, b: MyWeirdType, c: MyWeirdType) = // my impl here``` That being said, I'm still not convinced this would be a great thing to do (and I highly doubt you'd write F# code that looked like that).
So, I have it to a point where it runs through my code without error, but the method will not invoke. In my PowerShell script, I invoke using: // (Get-WMIObject -namespace root\\ccm\\clientSDK -class CCM\_SoftwareUpdatesManager -list).InstallUpdates($updates) // My C# code looks like: // ConnectionOptions options = new ConnectionOptions(); ManagementScope theScope = new ManagementScope(@"\\\\.\\ROOT\\ccm\\ClientSDK", options); ManagementClass mClass = new ManagementClass(theScope.Path.Path, "CCM\_SoftwareUpdatesManager", null); mClass.Scope = theScope; ManagementObject\[\] mo = col.OfType&lt;ManagementObject\[\]&gt;().FirstOrDefault(); mClass.InvokeMethod("InstallUpdates", mo); // ("col" is my collection of updates). This "runs" but does not invoke the install like my PS script does. HOWEVER, when I remove the "-list" from my PS script, it also does not invoke the method! So, I'm having difficulty determining why -list is needed in my script, and how to convert that to C#. Ideas?
Sorry, I kind of went a slightly different direction and it appears to work (almost). I have it to a point where it runs through my code without error, but the method will not invoke. In my PowerShell script, I invoke using: // (Get-WMIObject -namespace root\\ccm\\clientSDK -class CCM\_SoftwareUpdatesManager -list).InstallUpdates($updates) // My C# code looks like: // ConnectionOptions options = new ConnectionOptions(); ManagementScope theScope = new ManagementScope(@"\\\\.\\ROOT\\ccm\\ClientSDK", options); ManagementClass mClass = new ManagementClass(theScope.Path.Path, "CCM\_SoftwareUpdatesManager", null); mClass.Scope = theScope; ManagementObject\[\] mo = col.OfType&lt;ManagementObject\[\]&gt;().FirstOrDefault(); mClass.InvokeMethod("InstallUpdates", mo); // ("col" is my collection of updates). This "runs" but does not invoke the install like my PS script does. HOWEVER, when I remove the "-list" from my PS script, it also does not invoke the method! So, I'm having difficulty determining why -list is needed in my script, and how to convert that to C#. Ideas?
So, I have it to a point where it runs through my code without error, but the method will not invoke. In my PowerShell script, I invoke using: // (Get-WMIObject -namespace root\\ccm\\clientSDK -class CCM\_SoftwareUpdatesManager -list).InstallUpdates($updates) // My C# code looks like: // ConnectionOptions options = new ConnectionOptions(); ManagementScope theScope = new ManagementScope(@"\\\\.\\ROOT\\ccm\\ClientSDK", options); ManagementClass mClass = new ManagementClass(theScope.Path.Path, "CCM\_SoftwareUpdatesManager", null); mClass.Scope = theScope; ManagementObject\[\] mo = col.OfType&lt;ManagementObject\[\]&gt;().FirstOrDefault(); mClass.InvokeMethod("InstallUpdates", mo); // ("col" is my collection of updates). This "runs" but does not invoke the install like my PS script does. HOWEVER, when I remove the "-list" from my PS script, it also does not invoke the method! So, I'm having difficulty determining why -list is needed in my script, and how to convert that to C#. Ideas?
&gt; ManagementObject[] mo = col.OfType&lt;ManagementObject[]&gt;().FirstOrDefault(); Try ManagementObject[] mo = col.OfType&lt;ManagementObject&gt;().ToArray(); 
Tried that earlier and get "Unable to cast object of type 'System.Management.ManagementObject' to type 'System.Array'." In my PS script, I can successfully invoke it using: (Get-WmiObject -namespace root\ccm\clientSDK -class CCM_SoftwareUpdatesManager -list).InstallUpdates($myUpdates) For some reason, it fails when I remove -list, saying you can't call a method on a null-valued expression. If I put the -list there to enumerate the class properties, it works. I don't quite know why, but I'm wondering if it is relevant to why my code will run here but not actually install the updates.
Recursion isn't a particularly great approach. It's harder to understand in some situations and if it's recursing many times risks an out of memory error as the stack fills up. You can always refactor recursive functions into something that uses a Stack&lt;&gt; 
Why are twigs a subset of leaves? Also, stick usually refers to any branch or twig that's disconnected from the tree. This is why dogs like them :) I know that's unrelated to your question, but if it's coursework, someone might pick it up.
No parameterized constructors. Forms being static. So many things to dislike about VB6. vbNull, Null, Nothing, Empty. One based indexing. VBA.Collection. Arrays in general were a nightmare. Dim x As New CClass not being the same as Dim x As CClass Set x = New CClass() I don’t miss it at all
We are currently using the MetroUI Framework and it works pretty well
The cost-benefit ratio is simply too poor. Yes, it’s more convenient in some cases, but it would also break in so many ways. If all you want to pass is a bag of arguments, an increasingly common pattern is to have a parameter `options` which contains a special MySomethingOptions object with an empty constructor whose properties get initialized. myObject.Serialize(destFile, new SerializationOptions { EnableSorting = true, CrazyMode = SerializationCrazyMode.Maximum }); Here, it doesn’t matter which options I specify (assuming they have a sane default) and in what order.
WPF if you need to support multiple Windows versions, UWP if you can afford to be Windows 10 only.
I'd say WPF over UWP as Windows 7 still has a [market share of 41.23%](https://www.netmarketshare.com/operating-system-market-share.aspx?options=%7B%22filter%22%3A%7B%22%24and%22%3A%5B%7B%22deviceType%22%3A%7B%22%24in%22%3A%5B%22Desktop%2Flaptop%22%5D%7D%7D%5D%7D%2C%22dateLabel%22%3A%22Custom%22%2C%22attributes%22%3A%22share%22%2C%22group%22%3A%22platformVersion%22%2C%22sort%22%3A%7B%22share%22%3A-1%7D%2C%22id%22%3A%22platformsDesktopVersions%22%2C%22dateInterval%22%3A%22Monthly%22%2C%22dateStart%22%3A%222018-07%22%2C%22dateEnd%22%3A%222018-07%22%2C%22segments%22%3A%22-1000%22%7D). When .NET Core 3.0 comes out, you should be able to convert WinForms and WPF projects from .NET Framework to .NET Core.
Electron? 
Trending? Yes. Appropriate? Hell no.
&gt; And who are still using desktop applications besides corporations? Umh… I even buy desktop applications.
It completely differs from your intentions and goals. If you develop an desktop application for enterprise use knowing you will only encounter Windows everywhere, go with UWP. That's the future of C# desktop applications. If you don't know what you will encounter in terms of operating systems, you have to ask yourself this question: Is my team big enough so we can support different programming languages and different code bases for each os? If yes, then go with more "natural" languages for each OS. If no, you should really take a look at crossplatform approaches as Electron.js. it was used in different applications. Yes I know some people are against this framework because Yadda Yadda security and some other stuff. But security is nothing that gets inherited by a framework, but by style, decisions and approaches. So it comes down where to where ,our application needs to run in the end. Maybe it doesn't even need to be a standalone desktop application in the first place, but an cached web application with offline and online storage would even do the job. Without knowing for which kind of environment you are developing, it would be hard to suggest anything.
He's likely talking about [MetroFramework for WinForms](https://github.com/dennismagno/metroframework-modern-ui).
* Windows 10 only: UWP * Windows 7 and newer: WPF * Windows XP and newer: WinForms With Windows 10, UWP has a lot of features that make it more useful and powerful for desktop apps while supporting modern APIs that normal Win32 apps don't (GPS or Gaze, for example). See Adobe XD for an example of a UWP app that's made for desktops and convertibles in mind.
I can't say I have experienced the same, but I've usually been hired specifically for .NET roles. If this is an attitude you get during an interview, it might be worth looking elsewhere in my opinion. Most stellar engineers will respect other technologies and look very critically on their own from what I've experienced. 
I am a rockstar developer and I think .NET is great. There is nothing I like more after a tiring 3 hour gig in front of my thousands of adoring fans, than kicking back and working on my current .NET WPF project into the wee small hours.
&gt;And who are still using desktop applications besides corporations? Me. I _like_ not having terrible UI.
I doubt it. They want to move us towards UWP and Windows store
A lot of people are irrational against anything Microsoft. This made sense in the 90s when they were demonstrably trying to fuck everyone over, but two decades later it's just amusing that people prefer tech made by the likes of Google and Oracle over Microsoft regardless of any technical or legal reasons. Personally I wouldn't want to work for anyone who is going to judge my CV on 'oh this guy likes Visual Studio so he must be nuts', so I'm not really worried. On the other hand, I would also be suspicious of any engineer who has *only* experience with MS technologies (or only with JVM stuff, only Python, etc. for that matter).
If you experience terrible UI in a browser, then that's the fault of the designers, not of the tools. Anything that can be done on desktop, can be copied to a browser.
Yep, I know. It's why I wasnt rude. Just a simple no is all I thought.
Yea https://blog.xamarin.com/glimpse-future-xamarin-forms-3-0/
Still in beta i think but it is very promising
btw that post is more than a year ago :)
Xamarin.Forms has also MacOS and Linux as Targets. See https://github.com/xamarin/Xamarin.Forms/wiki/Platform-Support
&gt; &lt;UniformGrid HorizontalAlignment="Stretch" Background="Purple" Rows="1"/&gt; Sorry but it indicated me taht it can't work on a universal project :/
I've had a similar problem in the past with port exhaustion and calling dispose (or better yet a using block) fixed it for me. Good luck 🤞 
Ah, my bad. WPF has UniformGrid out of the box, but UWP needs a reference to the [Windows Community Toolkit](https://docs.microsoft.com/en-us/windows/communitytoolkit/). Here's how to use UniformGrid in UWP: https://docs.microsoft.com/en-us/windows/communitytoolkit/controls/uniformgrid
Me too. As a programmer I love supporting..... Wait you guessed it... Software development! 
They are right. .NET Core is not mature enough to save the day. 
WPF is worse in almost every way and windows only. Part of the reason web is where it is is being cross platform, you cant even compete as desktop without that. 
Wasn't arguing in favour of WPF, was arguing against using Electron. Telling someone on _the_ C# subreddit to use Javascript is bad enough, thinking Electron solves problems instead of creating them is almost as bad.
Sigh.. Hi, welcome to conversation. Please feel free to say something useful. 
This is my opinion. OP is asking for opinion. Sorry if it is incorrect. 
Compared to the many different forms with all the sugar?
Ok but it seem that the problem it's not the control. I tried to put buttons manualy and it s the same problem. I don't know why 
WPF MVVM for current desktop applications.
The reason that this is happening is because the StackPanel measures every child element with positive infinity as the constraint for the axis that it is stacking elements along. The child controls have to return how big they want to be (positive infinity is not a valid return from the [MeasureOverride](https://msdn.microsoft.com/en-us/library/system.windows.frameworkelement.measureoverride.aspx) in either axis) so they return the smallest size where everything will fit. They have no way of knowing how much space they really have to fill.
Since I bill myself as a polyglot rather than a single stack dev, I don’t really run into that, even though the bulk of my work experience is using (at least a bit) .net I know some people think anyone using .net is out of touch, and some people think anyone who does front end is not a real developer or that anyone who uses php is a moron (actually, that’s true :p) - thing is, the tech world is full of very opinionated people. When someone talks trash about something I usually ask them about it to see if their opinions are based on actually knowing anything about it or just because they’re parroting something they heard. That let’s me know how much consideration I should give their opinions. 
I know that, but I didn't know how it works when it in a itempanel. So I m obliged to create an uniformgrid ? Thanks for your fast answers
This discrimination does exist. They are just jealous they are using inferior stacks so they are trying to rationalize it.
To be fair I don't see what's wrong with segregation. They don't want me working for them but chances are I wouldn't like working there either so lets split and not work in the same company if we can avoid it.
It all comes down to the people you know I would say. I'm an ex-Microsoft employee and currently a freelance .NET developer. The companies I work for are enterprise organizations with thousands of employees and hundreds of developers. From my point of view, .NET/Microsoft developers are always well respected within the development communities having knowledge of a broad set of technologies. Ranging from Windows (-API), Web, Desktop, WCF etcetera .. I've been dealing with Microsoft technology for over 15 years and I truely do not recognize the picture you are painting. We like to tease each other about their tech .. but that is it. 
I'd actually agree that .NET Core is not mature enough in the 1.x days but 2.0 with the .NET Standard is fine for most projects.
As far as I know, this is the only way with a ListBox / ItemsControl (unless you want to write your own Panel).
Nothing. Nothing at all in C#. Microsoft can't make up its mind, neither should you. Windows Forms is abandoned, with the same "it's not recommended but we can't kill it" empty threat that VB6 has hanging over its head. Sure, sure, they're porting it to .NET Core. It's still Windows-only in a world that increasingly wants apps that can run widespread. WPF is even more abandoned, murdered in such a cold-blooded way almost every MS dev I know from the period became a Rails or Obj-C dev within 3 months. It was murdered so we could use Silverlight instead, which was way better oh wait, no, use HTML5 instead, this is way better oh wait no, we just invented Metro-- ah, sorry, "Modern Windows Applications, this is what you need to use until this time next year, welcome to UWP, the one, true interface that replaces all of them! It has been *more than 10 years* since it released and most people I meet only casually know "Is that the one with XAML?" Xamarin Forms has about 20 more years to go before it's useful for desktop apps, 40 if Microsoft tries really hard. We are in the "extinguish" phase of its lifetime until the next time MS feels Windows is in danger and has to hedge. I've been using it since 2013 and unless your goal is to write very simple apps like Minesweeper or "here's an electronic version of a form" you might end up really, really sad like me. It often feels, to me, like there are only maybe a dozen other Xamarin Forms developers in the world. Unfortunately my only other friend using it is in the middle of switching to Swift/Java because they got tired of dealing with it. I wish I worked for his company. I am cynical and hurt very badly by what MS did to me for WPF, but I stand behind these opinions. You can find jobs for any of these three techs, but they will not be exciting jobs. A handful of my friends stuck on WinForms or VB6 are beginning to complain it's harder to find new contracts, as their clients are starting to want to use forms on tablets. MS Surface came too late, they're all using cheap Androids. Most people who want to write Desktop apps are choosing a framework like Electron that lets them write an HTML/JS app. This will still work next year when MS abandons UWP for another new framework, and it will likely still work 10 years from now when some poor fool is maintaining it long after you left. Alternatively, write an ASP .NET MVC app. That will also be working just fine while Microsoft goes through its transition from "king" to "we can't give away Windows for free". Bonus: HTML/JS use the same markup/code separation concepts as WPF/Silverlight/Windows Phone/Metro/Modern Windows Applications/UWP. Learning one makes the other a lot more familiar. But if you bet on UWP, you're betting on a future where Windows is the only relevant stack.
A gaping hole in browsers support for all UI paradigms is the inability to support multiple monitors. You get some support with popups, but it's not really the same as native multi-window support in just about every desktop OS.
But it solves a lot. Like not requiring bloat like net framework or JRE, not worrying about what user has installed etc.
Do yourself a solid use Electron, or just write a web app. The moment you need cross platform support, you'll be glad you did.
Games are mostly desktop apps. And then there are adobe products, Notepad++ or Sublime, and some misc. desktop apps for work.
Games are out of scope, as they are not created with WPF or UPW. Notepad++ is free. Sublime is a good example, but profession specific. Adobe and Office products are other common ones. But really you could use VS Code. And there are tons of free alternatives to Adobe products. We are talking about common users here, not programmers or designers or video editors. Power users tend to buy tools for their work. But they are only a subset of all PC users. And the only common paid soft that most PCs have is Microsoft Office. We are talking about Windows ofc. Programs like Netflix are subscription based and you pay for subscription, not for a program. Antiviruses died with Windows 10. Common user don't need one anymore. There are free players, text readers, browsers, pdf viewers, mail clients (windows has one at least) etc. 
I think you already answered your own question. For some people it is OK to be a firefighter, but not for all. 
Are you just arguing that a person could, in theory, get away with not buying software? Because if so I don't think you'll find anyone to argue with.
I'm just arguing that the market for desktop applications is becoming narrow and very specific. And two categories of users you can sell desktop apps to are power users and corporations. 
If you can Increase your db instances on additional servers, any way you can throw more hardware on your server? 
Great points. 1) I will try ItextSharp and see if it gives any performance benefits. Files are written back to DB, so there may lie another point of optimization. 2) They all have data only related to them. It is salary calculation. Calculating them all and then generation reports based on this data is in plans. But it is very hard to do on current implementation. 3) Great suggestions. I will see if I can implement the queue somehow. Should be possible. Again thank you for your time. 
You better be sure that the whole business is running Win 10 before committing to it. There might even be another new-new thing before Win 7 is completely replaced. 
There is big long SQL procedure that processes each record. And it has some function calls in it. I doubt that I will be able to write it into on query and run it on array of IDs
Web development became more popular over the years. You could look into ASP.NET. Having experience with this will increase your chances of finding a job by a lot. However, if you're new and just interested in learning C# and OOP, I'd practice with Console applications, as you don't need to create a user interface with that. It lets you focus purely on code. You can find plenty of assignments online which can provide a nice challenge.
what is OOP?
There's an unofficial formula for software engineers that pretty much guarantees that you'll have a job: 1. One Object Oriented Language (c# is great, keep it up) 2. One Scripting Language (JavaScript is the most popular with tons of jobs out there) 3. One SQL Database (you can go with PostgreSQL or MySQL) 4. One NoSQL Database (MongoDB is a great choice here) HTML and CSS are something that every developer knows and it's comfortable with, doesn't matter if you work with it everyday or not. You did a good choice with C#. As you said, you can make games with Unity, although it's a bit wrong to get into programming by making games in my opinion. You can learn .NET Core if you want to make backends and APIs. You can learn Xamarin if you want to make mobile apps. C# is a big world and it has a ton of tooling that you can work with. Bonus tip: from time to time you can browse Github repositories that are "awesome-\*\*\*\*\*", where you put in the technology you're interested in, like: \- [https://github.com/quozd/awesome-dotnet](https://github.com/quozd/awesome-dotnet) \- [https://github.com/benoitjadinon/awesome-xamarin](https://github.com/benoitjadinon/awesome-xamarin) \- You get the point. These repos are lists of popular libraries, tools, frameworks and other stuff that works with the technology you're searching for.
Generally, you'd be better off not editing the Up method. Auto-generated code is usually better left alone. As for using ModelBuilder vs. Attributes, well strictly speaking that comes down to personal preference. I like having attributes, others like using ModelBuilder. Using attributes defines the database schema in the respective model classes, whereas ModelBuilder centralises the object-to-database mapping in one single method.
I was responding to your other assertion &gt; Anything related to UI that can be done on desktop, can be copied to a browser. If "anything" was possible, then Visual Studio Code wouldn't have an open issue for supporting multiple windows on multiple monitors. I've run into this request for every web app I've built that was intended to be the primary system someone spent their entire day in. 
I think if you'd said that, you wouldn't have gotten the downvotes. I agree with that statement. That said, OP said he was specifically looking for desktop development, which (to my mind) means he's either building something for himself or to perform a specific task at a company, meaning that he doesn't need to worry about things like how he will market a piece of software. As an aside: I miss WinForms so much. UI development, at least for PoC type things, was so damn easy. These days I write almost exclusively console apps and only write front-end apps if I absolutely have to.
I used it in the past to create and send some mail spam ugh.. I meant marketing materials. Great tool indeed. This app is a legacy one. I didn't write it from the beginning. So I try to fix what I can. But I can't rewrite it from scratch
I’m a big fan of attributes because it makes consumers of those entities aware of their ‘rules’. For example, if you have validation attributes (required, range, string length, etc) then when using the entities you don’t have to dig through DB schema or migration files to learn about those rules - it’s right there on the entity. 
People who use .NET usually don't have this point of view, it's normally "hardened vets" or "anti-ms" people who spew those statements and have never used the stack before, or did back in .net 1.0/1.1 and never used it again.
When they killed WPF (which I invested a ton of time mastering), it basically killed my faith in Microsoft for any long term commitment to anything. I felt pretty dumb for buying into the RIA BS that Silverlight was the future and WPF was a bloated relic, only for SL to be killed off in a few years.
I have fought nothing between 2.0 and 2.1. I did fight a couple of things in the preview releases though. Never touched 1.*
What does rockstar developer mean? Is this about salary?
At the end of the day, if I were struggling to find work, and all I saw were Java jobs, I'd make the switch pretty damn quickly. This is probably fairly regional as well.
With option 3: * You have to search your migration files or fire up SSMS to check what constraints a property has. * You have to not only edit Up(), but also Down() and make sure it's correct. * You can't remove and recreate migrations without losing your edits. Just stick with option 1 or 2. I Prefer 1.
This is one of those times where you have to ask the right question: Is it time to refactor this process to greatly improve the user experience of this, even if it takes weeks or months?
I already know the answer to that question: No. So it is mostly my initiative to make things a little bit better by tweaking the process here and there. And my opportunity to learn the right way to do it. It will help me in my future career.
What /u/yog-sothos said to be honest. But also some developers like to think of themselves as rockstars, insofar as they imagine they are the smartest guy in the room all the time, and that they are the key to the success of whatever endeavour they are taking part in. It describes me perfectly... :)
I believe that there are some things that you can only do in ModelCreated, but I would reserve it for those things exclusively.
I've heard rockstar/guru mostly in sarcastic contexts but I the bold font was messing with me. Thanks for the clarification
P
Chrome or any other desktop web browser. 
Do you pay money for them? Or you can make new browser and make money from it? Or you can build one for intranet of your company? 
I work for a company that is over a 100 years old. We have "Guru" as an official rank after Senior Specialist.
Electron not requiring bloat? My head just exploded.
When I came from Winforms to WPF MVVM, I felt the same as you. Fast forward a couple of years, and I'm pretty comfortable with MVVM. I use DevExpress at my job, and their MVVM Framework is really nice and easy to work with. 
All my OSes are also free. OSes are dead.
I had to use it occasionally and every time going back to MVVM was a major PITA. Just adding one field in UI was like 3-4 changes in different places and it was always the same steps, always manual and never forgiving. MVVM was unintentionally designed in a way that makes casual UI development impossible. Maybe it is one of the reasons why Windows desktop development is "dying".
Oh you sensitive soul.
It's not that difficult really: 1. Modify your XAML for your field and its binding. 2. Make any necessary change to your VM for that one field. I agree that it's not as fast as cranking out something like a Winform application, but it's not really that difficult. If you ever want to redesign your UI, you can do so without having to touch your business logic. Since there's no codebehind, you don't have to move code around, set Events back up, etc... My biggest gripe that I have, as far as WPF, is the designer sucks and is useless. So, any UI design I do 100% in XAML (I never use the designer for trying to drag and drop controls). Who knows, maybe I'm in the minority in liking MVVM. :) 
The whole company I worked for bought in to the Silverlight story
These people sound like they're stuck in the 90s. Microsoft rules.
Usually to offer a "default" Version that doesn't require someone who uses it to specify which generic arguments are needed.
I mean it embedds its bloat, instead of requiring it. It's not feasible to build anything without a framework nowadays, so at least better to pick one which doesn't throw annoyances at you. Also, CSS is the most powerful rendering engine ever, and anybody who thinks otherwise didn't even tap into it for anything more than some quick dirty adjustments. Things like this [https://codepen.io/mxbck/live/81020404c9d5fd873a717c4612c914dd](https://codepen.io/mxbck/live/81020404c9d5fd873a717c4612c914dd) done in things like WPF would take hundres of code lines more. 
Ignore them. Might as well argue with a football fan that their club is better/worse than another club. 
Would you rather have var iuser = new IdentityUser&lt;string, IdentityUserLogin, IdentityUserRole, IdentityUserClaim&gt;(); var cuser = new IdentityUser&lt;string, CustomUserLogin, CustomUserRole, CustomUserClaim&gt;(); or var iuser = new IdentityUser(); var cuser = new CustomUser(); ?
UWP is garbage don't touch it. Don't even download the SDK, we need to make it clear to Microsoft that UWP is not wanted. Use WPF. It's still the best way to make a desktop app in C#. The poster talking about Electron isn't too far off btw. Every desktop app I've built in the last 5-6 years eventually became a webservice. I didn't use JS though, I made WPF front ends that wrap a logic dll. Then just put that dll into an MCV project and made a new razorhtml frontend. btw, trending != appropriate The only appropriate desktop systemp, IMO, are WPF and Win32, neither of which is close to trending.
I agree, we recently had a consultant come in to help us with a project and all he did was bash Microsoft (we're a Microsoft shop) and lament about how everything should be written in Java because Microsoft is evil. He actually wanted us to drop our entire tech stack in favour of Java. Fucking Java! But he also didn't know *anything* about .net core, he had no idea .net runs on Linux, or that it was free (he kept going on about licensing costs), he knew literally nothing about Azure and what it offered. Just outrightly dismissed it because Microsoft.
&gt;In their heads, .NET programmers have this image of the 9to5er, barely computer literate corporate drones, who they consider to be unpaid Microsoft corporate shills. For over 20 years I've worked within the MS stack as a seemingly barely computer literate MS shill. I ran a business for over a decade, owned two houses, put kids through college and have enjoyed vacations, life and never had to worry about income. What a dystopian hell Microsoft has enslaved me into.
Dude have you looked for jobs? One job posting I saw at wanted a "C# engineer jedi" Fucking jedi. Unless someone put out a paid position ad on Stack Overflow "for the lulz"
&gt; Visual Studio Code wouldn't have an open issue for supporting multiple windows on multiple monitors. ??? I have multiple windows on different monitors right now. What's is the bug?
You should check out WiseJ it is pretty much winforms development but for the web.
Wouldn't worry about it. For one thing, there's not actually anything *wrong* with being a "9to5er". In fact, there's a *lot* to be said for having a life and interests outside of work. For another, if you're looking to work with .NET, nobody that matters going to be upset that you know .NET.
I just started in IT half a year ago and I’ve been working on a wpf project since then. When I was studying I thought “oh this designer stuff is so nice, can’t wait to use it for a real project”. Yeah no, after a week I gave up and do everything in xaml. I don’t think I ever touched a component in the designer.
Lmfao that caught me off guard. I've looked for plenty of offerings. But I do C++/control systems, I couldn't take someone serious that's looking for a jedi lol
A decade old... http://blogs.microsoft.co.il/shair/2008/07/28/how-to-create-sql-server-management-studio-addin/
Now hiring! C# CHARIZARD PROGRAMMER DON'T EVEN THINK ABOUT APPLYING UNLESS YOU'RE A FIRE STONE EVOLVED POKEMON LOL
Iirc they're treated like completely different classes, hence no naming collision. So having the non generic inherit from the generic allows you to create default implementations. This would be useful if you're using generics with the type passed in being used as a way of implementing strategy pattern or template method. 
This hasn't been my experience at all. I've worked full time for a few different companies and consulted for a few companies as well as interviewed for a dozen or so other companies. None of the people I ran into have discriminated against my C# experience. One company I've done a lot of work for primarily uses node.js, and they've come running to me a few different times because they picked up a client that needed .NET work done and they had no experience. I would consider my current company to be a very desirable place of employment. We're heavy users of C# and .NET, but not afraid to dabble in other tech if needed. Ignore those who poopoo your tech stack and avoid doing so to others. This is a sign of ignorance. The tech stack is far less important than the problem you're solving. 
.net core 3 isn't even out yet, and won't for like 6+ months... i don't see how that could be a modern trend
Downvoters, tell me why you like UWP! Don't just vote, comment!
They also wanted Zune to take off and that was actually a good product. 🤷
 Where are you guys still getting this? Visual Studio Code is one of the most talked about and locked editors, and it uses Electron, as does Discord, the most liked and used VOIP solution. I don't understand how this sub is still stuck in the past on just this one subject, Electron is fine (if you think something else is better, that's fine, but you can't talk down on something you clearly have not used). The start up times are pretty amazing, the final program size is small and you can create applications INCREDIBLY fast.
Not really sure if this is the kind of help you are looking for, but this is a good introduction to using Razor Pages. [https://www.youtube.com/watch?v=yyBijyCI5Sk](https://www.youtube.com/watch?v=yyBijyCI5Sk)
The designer is nice for quick one off tools. I find myself just adding UI in the codebehind for larger project though. Like, set up a couple panels/grids in XAML, and then populate them with controls on app start.
what... electron can be plugged to create however many windows you want, you could literally create them until your OS stops you, that is in no way a limitation of the software, VSC just doesn't support it... you can't say A happens because B, when A has nothing to do with B. Notice how your browser can rip as many tabs as you want to as many windows as you want, absolutely no problem.
 It's referring to the functionality like in visual studio where you can drag a tab out and create a whole new windows out of just that one file, instead of just doing side by side (not opening a new instance of visual studio code), which is not a limitation of any web technology, nor electron, nor even that big of an issue because you can just open multiple visual studio code's and they keep in sync. It's literally just that they didn't implement it in VSC. Honestly, this entire thread is cringe on what seems like people that are in one particular area of SD that doesn't touch what they're trying to talk about.
ok - thanks
Got it.
Ah! I actually use that feature a lot in real vs! That would be nice in vsc. Not sure if it's what you're talking about, but I am shocked to see people suggest UWP here. The fact that you have to deploy through the windows store completely kills every use case for me.
I've honestly never tried UWP, only WPF, so I can't comment on it
It's a first step [xkevinxpwndu](https://www.reddit.com/user/xkevinxpwndu)! Why so harsh?
I don't like the binding layer with observables and logic in getters and setters. Everything else about it is nice though. I use a mix of mvc and mvvm for o personal projects 
Why are you vaugeposting?
For the first point you can use the new [pattern matching](https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching#the-is-type-pattern-expression) from C# 7. if(e is MyCustomException myCustomException) { // use myCustomException }
Why blockchain? What's the point?
They always release a beta/release candidate build 2-4 months before the actual release. They might release one in a few months. How does it matter though? For the end user, there isn't much difference - the runtime will be .NET Core instead of .NET Framework, and that's it. The developer has to make sure that his business logic is in a .NET Standard library and that he isn't using any .NET Framework specific APIs. 
This!!! An example I use is that I have a class called Entity that is the base class for all database objects. Entity is just: public class Entity&lt;T&gt; { public T Id {get;set;} } Then there is the default: public class Entity : Entity&lt;int&gt; { } Makes it convenient in the child classes to not have to include &lt;T&gt; if I want the key to be an int, which is the most common case.
It can, but the context it needs to spin them up in is totally different than you'd usually use when you're peeling off other bits. This has been an open ticket in VSC for a while. 
it's perfect recruiter speak fucking evolve a charizard with a fire stone
Reported as spam
&gt; 20 more years to go before it's useful for desktop apps, 40 if Microsoft tries really hard. LOL
And Discord uses almost 10 times the RAM that a competing product like teamspeak uses. Same with VS Code, I really love it and its features/plugins, but I would love it way more if it wouldn't use 250mb RAM at startup with a single file open just because it depends on an entire browser in the background. I dont want a place where every desktop app I use needs a browser and 200 RAM plus only because some guy think Electron is the answer for everything and we should not use anything else.
your exception situation is kind of a code smell. if you only want to handle that specific type of exception then only catch that type of exception. blanket catching all exceptions is usually frowned upon as it masks problems with your code and can lead to other bugs that are difficult to track down and fix. rather than doing catch (Exception e) { if (e is MyCustomException blah) { // use blah.Whatever } } it'd be preferable for you to do the following if you can. catch (MyCustomException e) { // use e.Whatever } only exceptions of MyCustomException will be caught in the second code block and all other exceptions will bubble up as normal. --- you could probably write some analyzer for roslyn to throw a compiler error for your type map situation. but you're trying to do a runtime thing at compile time and i would just classify your typescript as a hack that just happens to do what you want. --- you should be able to have the second parameter of your attribute be of type `object` and i believe it should do what you want. xunit's built in data attributes all tend to take objects and they map to the correct parameter types of tests just fine.
We're trying to build a social skills network and have an initial focus on programming skills; one of them is C# and I just wanted to share this with the relevant community. Sorry if this is not the place for this kind of project, I really did not intend to spam or *vaugeposte*!
He changes the return type of MainMenu from void to bool. This means he can say "if this happens return true, otherwise return false. You can then use that to set a variable. But. And this might be where you're confused (I'm guessing). You don't have to set a variable to the value it returns. You can just say while(MainMenu()) { } Or what he's doing, shortened a bit: mainMenu = true; // this is a variable while(mainMenu) // while the variable above is true { mainMenu = MainMenu(); // set the variable to the return value of the method } I think the important bit is he changed the method from a void (does NOT return a value) to a bool, which DOES return a value). Make sense? If not, no worries, we can focus down until it makes sense :) 
For your second question about ensuring all enums have a case: See https://stackoverflow.com/questions/5932520/is-there-a-way-to-get-the-c-sharp-compiler-to-emit-an-error-if-a-switchenum-val
Yeah, I think so :) I ninja edited my post with my workings out.. Does this describe what's happening? The method has a built-in bool named after it by virtue of void having been replaced with bool, and there is a bool variable called "displayMenu". Then, whilst MainMenu is true it sets displayMenu's value to be equal to the value of MainMenu? Is that why there are () after MainMenu in my second quotation, to say that we're referencing the variable's data?
This kind of bias is sort of as old as the cosmos. Before .NET, it was applied to VB6 developers. If you are in an area where that bias is strong then yes, claiming to be a .NET expert can affect your ability to find jobs in that arena. On the flip side: people who are that willing to choose their stacks on superstition and bias are probably not very good employers. Speaking more reasonably, this is how I think it sits: MS makes tools and frameworks that are both expensive and focused on enterprise solutions. I'm not saying you can't get very far with the free things they distribute, but it is still true that they work the hardest to make things work if you're using VS, MSSQL, TFS, MSTest, IIS, Windows Server, etc. Or, in some cases, you just can't get their tech for free. The last I checked, my Xamarin license costs at least $500 per developer per year, and you're going to want R# which is another charge on top of that, etc. It's not cheap to use the Microsoft stack. They argue that, in return for the costs, they provide a smoother experience. That means a lot of people on shoestring budgets can't and don't consider Microsoft solutions. Big enterprises aren't on shoestring budgets. Smaller companies are. Big companies want support contracts and volume discounts. Smaller companies can't afford the luxury. So you tend to find the biggest supporters of the MS stack inside large enterprises. Big enterprises aren't known for efficiency. So the smaller companies using different tools tend to feel like the MS stack is the *cause* of that inefficiency. The whole "9 to 5er" thing is a toxic curse in this industry. Stay the Hell away from any employer who looks down on them. You have a right to have hobbies outside of work, want to have a family, etc. Now, some work environments demand more. Startups in particular aren't places that can support "a normal work week". But enterprises, with their large amounts of resources, are fine with setting deadlines that assume utilizations at 40 hours or less per week. (Most companies I've worked at felt it was more realistic to assume 36 or fewer, owing to context switches, meetings, etc.) Anyway, I'm already painting a pretty big divide here. Some smaller, leaner companies simply can't afford Microsoft's stack, and they'd flounder if all of their workers put their job behind other life goals. Larger, more mature companies can tolerate the expense in return for "it's easier to train and easier to find qualified candidates". Lots of MS tech (except the desktop apps, lately) haven't changed a lot in a long time. In that same amount of time I've seen the non-MS side change its mind about almost every aspect of its platform. Sometimes that's good, sometimes not. MS tends to lag behind the cutting edge of software engineering. They don't spin up a new language when a new paradigm arrives. They wait to see if it catches on, then they take the good parts and add them to their stack. So C# as a language feels a bit clunky compared to something new and sexy like Swift. But C# code from 15 years ago still compiles and runs without much fuss, whereas every version of Swift so far has had breaking changes. Small, lean companies that change day-to-day can weather this much better than large enterprises that might need their software to operate for 10+ years. Finally, experience matters. I have 15 years of professional C# experience. So even for tasks where other languages and environments might be a "better choice", I can be faster and more productive with C# than those languages. I have something like 1 year of experience with JS. So for any random task I still need to constantly ask the documentation to remind me which function does what, whereas in C# I can tell you, from memory, about dark corners even Microsoft might have forgotten. But, on the flip side, people looking for veterans of a 15-year-old technology don't sound as exciting as people who have a problem so unique they had to create a new programming language to solve it, do they? So, in short: Sometimes the Microsoft stack is more trouble than it's worth. It takes a lot of knowledge and experience to understand when those situations are. A lot of people are content to replace "knowledge and experience" with "superstition and hearsay". Don't work for them. And don't be them. It's just as easy to dismiss people who use, say, React Native as fad-chasers who have no sense of longevity. The more sensible developer *assumes* they're aware of their project's context and have chosen the tool that best fit both their experience level and needs. We need devs using those new tools. Some of them will fail, others will succeed. The ones that succeed inspire the features that make slower-to-respond things like the MS stack better. 
Sort of yes, that's a nice explanation. The method gets a variable named after it and you can set another variable to its value simply by assigning one to the other. var a = 1; // set a to 1 var b = a; // set b to a which is 1 var c = MethodThat(); // returns 2 setting c to 2; In reality under the hood, "stuff" happens, but your explanation is as good as it gets for understanding the effects, and that's what's important right now :)
If responsiveness is important, have a look at SignalR. We've been adding that to systems in production, and it's been amazing. The server can just push down a message later when it's done.
?
 Choose a library to get started, you can use something simple, such as mvvmlight, or something with more features but also more complex, like mvvmcross or prism. Most of them come with a guide showing how to use them, and you can probably just learn that way. A super helpful package most people don't know about is PropertyChanged.Fody. It will automatically add change detection on all properties on any page that implements INotifyPropertyChanged, removing a lot of boiler plate. The basic idea of mvvm: View: &lt;MyPage DataContext="{Binding Foo, Source={StaticResource MyContextLocator}}"&gt; &lt;Label Content={Binding MyProperty}" /&gt; &lt;/MyPage View-Model: class Foo : INotifyPropertyChanged { public string MyProperty { get; set; } } When MyProperty changes (will PropertyChanged.Fody, you have to manually set up RaisePropertyChanged(nameof(MyProperty)) otherwise), it will automatically update any view component bound to that field. That's the gist of it, but ya, just learn one of the frameworks, the rest should come with it. DI, and IoC are also core concepts to MVVM.
Xamarin has been free for everyone since MS acquired them in 2016 - [https://blog.xamarin.com/xamarin-for-all/](https://blog.xamarin.com/xamarin-for-all/)
Cool, thanks for your help :D
That's the 2016 messaging, I swear there is a reason we had to pay for an MSDN subscription. It could be a limitation on executable size, it could be "access to VS for Mac". The last time I tried to use Xamarin for Free was sometime in the last couple of years, and very quickly it complained I had exceeded the maximum size of an assembly. I can't find any clear messaging about if that was a before or after thing?
It's more that your title just says "we added c#" Who are you and what did you add c# to? Could've gone with a tad bit more helpful of a title is all I'm saying :)
OP, do you mind sharing your general location? I have a feeling that this varies widely by region.
Oh sorry I missed that
Can you make this sproc run and write its output into a cache table as data gets updated in the system? Or do these reports have to be a current snapshot all taken at the same time? Because if you can run a "side table" of cached, pre-chewed data and then just run a plain ol' select statement against it for reporting, that will speed things up immensely. I speak from experience on this one. I have a client who needed real-time, on-demand reports for a lot of different aspects of their data. Running the reports against the transactional database was causing huge performance issues, but at the same time, running against a synchronized copy (AlwaysOn, log-shipped, whatever) was unacceptable due to the update interval. (Making the interval longer made the reports inaccurate and making the interval shorter caused the same performance issues as before.) So we had to update our data manipulation sprocs to side-channel some of the data into report-caching tables within the main transactional database, then we had to modify many of the reports to dumb-select data from those side-channel tables. We also had to farm out all programmatic processing (formatting for exported files and such) to a separate server to prevent hitting the database server's disk I/O limits.
Eh, it's nitpicking. It never got a Ribbon control, never got any sugar for DPI awareness, and honestly the feeling I got in the trenches was a very firm "go to WPF ASAP". I listened, so did my employer at the time. We were very sorry within a couple of years.
thanks, seems like the syntax I was looking for. However why can't the compiler auto infer \`MyCustomException\` in this case? Surely if \`e is MyCustomException\` is true then inside that if block the \`Exception\` is guaranteed to be a \`MyCustomException\`, no ?
I have 5 files open in visual studio code: 480 MB, all are 100 lines or less I have 4 thousand+line files of code open in a huge VS solution of 300k LOC: 650 MB. Its wild man.
thanks, looks like it can be done at compile time in C# as well [https://blogs.msdn.microsoft.com/francesco/2014/09/12/how-to-use-cccheck-to-prove-no-case-is-forgotten/](https://blogs.msdn.microsoft.com/francesco/2014/09/12/how-to-use-cccheck-to-prove-no-case-is-forgotten/)
Not a downvoted but developing for UWP a few weeks ago, come back to the same tutorial and its changed, nothing works, shit wont run, yeah fuck man. I'll stick with WinForms until they rewrite Windows to remove WinForms 
To be fair, right after I posted that comment, I fired up VS2017 Community and it stabilized at about 215MB without a solution open. Then again, I routinely load solutions with anywhere from 10-80 projects in all versions of VS from 2008-2017 and they all take less than 900MB once they're loaded. I don't see it pushing past 1GB until I have a dozen or more files open or start a build.
we had some processes that just could not return quickly (due to absurd amounts of data) so we gave the user a feedback and sent the reports in an email. Basically it went about a minute and the failed over to a "this process is going to take a while, continue using the site and we will email the report to you when it's done" message. not great - but the customers accepted it as reality.
I've used Xamarin on both VS for Mac and VS Community just fine for the last year or so. Though that's just two separate app projects with a shared PCL library. Might be some of the nicer tools for Xamarin Forms or something? Yeah there's definitely ways they get enterprises to pay for the tooling, but it seems that the general trend is that they're opening up the tooling for free and charging for use of Azure instead (which is integrated fantastically into VS). Most of my C# use has been for tools written in WPF/Winforms. I've used a ton of GUI libraries/frameworks across a whole bunch of different languages and I've never seen anything rival the speed at which I can hack together a usable GUI in winforms.
DPI awareness missed the Windows 10 release and had to wait for the Anniversary Update (1607, IIRC). That means that *everything* has screwed-up, DIY, hacky DPI awareness except for UWP, and even then, *only* UWP targeting 1607 and later.
Offload the processing to a service and tell the user you'll email the results or make them available from a list of downloads somewhere on the site. You could use something like [Hangfire](https://www.hangfire.io/) to manage this. 
As much as I agree that Electron resource consumption is terrible, if a small team needs to build a fairly complex cross-platform GUI, what other feasible options exist? For my company's current project: * web is too limited for advanced users * web is required for casual users * must support mac and windows We can * build a js app targeting mac, windows, and web or * build a web app (we know js) * build a native windows wpf app (we know C#) * build a native macos obj-C app (we know nothing, most of our devs don't even own a mac) My company will go straight out of business before we finish option #2.
Because C# doesn't do flow analysis for type deduction. TypeScript does a lot of small checks here and there for a lot of special cases, where C# language design team decided to focus more on correctness than on usability 
Microsoft are way better to deal with than Apple. At least you can still use C# on a Mac through Xamarin. Apple coerces you into buying their lame computers if you want to develop for their platform. I had to borrow a family members old MacBook just so I could deploy and develop for an iOS app for work. It was bullshit, and the process was absolute nerve-wracking thanks to their utter garbage IDE known as Xcode. Xcode has to be one of the worst excuses for an IDE I’ve ever seen, and I had to use it to deploy the app. Having to use a dongle is nothing compared to the torture that is Xcode and iOS development. Thank god I just do web dev now.
I thought it was funny that it takes microsoft **double** the time if they try really hard. Was that an intentional joke or a typo? (if it was neither I'm probably just dumb)
250 megs, when the hell did this happen? I remember when I started using VS Code about 2 years ago it was running a cool 80 megs.
this should be a lesson that none of those things you mentioned as positives have any bearing on whether someone becomes an open-minded person or any good at their jobs. the fact that they don't even know how to critically evaluate a programming language should be your first clue not to believe anything they tell you. then you should start paying attention to what 'respected firms' hired these people and do everything you can to avoid working at them... they will continue to hire people like that. also, literally everything these people think about .NET, is what a typical .NET person thinks of Java. guess what a Java person thinks of open-source? haha. it's a viscous circle.
you can have multiple catch blocks. try { DoSomething(); } catch (MyCustomException e) { // use e.Whatever } catch (SomeOtherException e) { // use e.SomeOtherWhatever } if you really want to just catch all exceptions, i would just make sure you add `throw;` at the end to rethrow exceptions you don't handle explicitly. catch (Exception e) { if (e is MyCustomException blah) { // use blah.Whatever } else { throw; } } --- sure, there are all sorts of static analysis tools you can use. a roslyn analyzer would just be the latest way to make a custom one. --- being explicit on what types the attribute supports? if you needed to do something to the values before injecting them? the answer is the same as why you would ever want static typing in general, pretty much.
You will absolutely not go wrong learning C# as a first step. And if you want a next step, I would go with asp.net mvc and web api
I wrote in another comment, that it is the thing I would do if I was the creator of the app. Right now I have to modify most of the data entry points to cause recalculation. And store it in another table, so user doesn't see that. As the inserted data may be not enough to give correct numbers, and can ruin the data. And try not to break the app in the process) Precalculating report data as the data gets inserted into the system is a great solution to this problem. But too costly at this point. For now generation of PDF immediately after calculation is not mandatory. So I may try to offload those to some other task. And focus mainly on calculation for the each record. Any way to make the sproc eat items faster? Without modifying it too much.
Agreed. The culture of over work and long hours are fetishized. 
I don't really think the cost of going MS is that big of an issue as you paint it. It's anecdotal but I've worked for small businesses for over a decade (I'm currently at a place with 10 employees and only 2 developers including myself). All of them 100% on the MS stack, and never did any one of them had to cut corners (financially) on the tech/dev aspects of the business.
with c# 7 pattern matching you shouldn't even be doing this "if" statement inside of the exception block almost ever. Just use the new pattern matching stuff. E.g. ```catch (Exception ex) when (ex is MyCustomException || ex is MyCustomException2)``` This way you don't need to bother with rethrowing anything as the unmatched exceptions aren't caught
Code contracts are mostly a dead concept. They've been mostly replaced by roslyn code analyzers as far as Im aware.
First or default returns a null value if the item can't be found and no default value is set. So, this would mean that your ManagementObjectCollection does not contain any members of the type you are specifying, which looks like an array of ManagementObject. So, I would start by following your your Management Object Collection prior to calling InstallUpdates and looking to see why it doesn't contain any objects you expect it to contain. (I'm going to assume this is the Lazy&lt;T&gt; Property you're referring to, in which case, and that for some reason it's not being populated for some reason, so that would be the first thing I look at) You shouldn't need to do anything special to ensure this field is populated. That said, it Probably doesn't hurt to throw in a null check, [and/or access the property first as seen here](https://stackoverflow.com/questions/21474010/lazy-loading-not-making-a-call-to-the-function)
Looks like you’re working directly against that site’s terms of service. https://www.missingmoney.com/GeneralHelp/Help.cfm?Type=Service
Got hired by a RoR shop recently, and their entire interview process is language agnostic. Did everything in .Net core. First part of the in-person is having you pair with two devs who direct you to make changes to the code sample you submitted earlier in their process. Told them I'd be doing everything in C# and .Net Core and opened my MacBook Pro. "So is that like Mono or something?" Nope. It's .Net straight from Microsoft. "How's that work?" You download the SDK installer from Microsoft's site, install it, and off you go. Works from the command line and everything. It was pretty amusing. I don't say this to make fun of them in any way, just thought it was funny to blow the minds of a couple devs who didn't know you can do .Net natively on a Mac now.
I actually lived through a consultant-driven .net-to-java-rewrite. After 12 mo of failed deadlines and under lower than promised performance, the consultant and the entire project got turfed.
&gt; &gt; &gt; So I'd advise to be a little future-proof and go with UWP. As all corporate clients will be forced to move to Windows 10 by IT auditors. Hahahaha. In my company there are still lots of customers using XP. In fact one of the apps they have to use since it is mandated by the government won't run on anything newer than XP, and most of our customers don't know what is a virtual machine...
Tell that moron that Java is now owned by Oracle, who want to make interfaces copyrightable. Oh and now Java is paid if you want the Oracle JVM.
Sorry about that, wrote it as example of logic, I could've tweaked it but it showed what i was talking about so just left it as is. 
Yea I just sit and write code mostly for fun. I like exploring and test and debugging a lot. This is for instance an attempt to compile xml directly to a binary, and this specific part is graphing out the structure of the needed class to compile.
Adding on, IIRC the ordering of the catch clauses matters
Thanks for the info! I'm a C# newb, but have a strong scripting background. There are certainly aspects of coding I do not fully understand. So, when I read the article you sent, it is kind of a foreign language to me. I'm not sure how I would edit my code to call the method. &gt; So, I would start by following your your Management Object Collection prior to calling InstallUpdates Unfortunately, I don't have access to the class on the machine in which I am writing the code. However, I have added in a text box that I'm writing to, compiling the code, and running it on a VM. I see that the ManagementObjectCollection has a count of 2.
You should be able to get rid of a few lines by modifying the way you track the level. Rather than updating the variable, pass the updated value directly into the function call: Result.Add(new { value.Key, Level+1 }); This means you don't have to subtract 1 later on, which I think should allow you to eliminate one of the if statements. Treating "variables" as immutable is a common pattern in functional programming.
Removed: Rule 2.
Sex, drugs, and SOLID code, man.
You're talking about a 10+ minute runtime. Fire he report off, generate PDF output and email it to the user. 
Change the line ManagementObject[] mo = col.OfType&lt;ManagementObject[]&gt;().FirstOrDefault(); to ManagementObject[] mo = col.OfType&lt;ManagementObject&gt;().ToArray(); OfType is filtering the list of objects in col to the specified type, it's then passed to the ToArray() method to turn that enumeration of items into an array that can be used in the mClass.InvokeMethod() call.
I’ve looked into this before, and while it does seem to be technically possible, it doesn’t really seem supported at all with newer versions of ssms. All I could find were hacks to try to make it work and even those were difficult to find. 
Tech stacks are best evaluated based on what they're designed to accomplish, how well they accomplish it, and how long their existence appears to remain consistent with the future. And it usually takes a long time to look for the right information that's needed to even begin to make such a judgement call.
UWP is fantastic. Easy, performant and well designed. It has changed a lot over the last few years and is now better than WPF in almost every way.
This is a great answer.
I am pretty sure that exception filters was a feature of C# 6, and the `is` operator goes back to ... c# 1, maybe? 2.0, at least. The pattern matching `is` in C# 7 allows you to declare a variable of the matched type inline with the expression, as `ex is MyCustomException mce`. I don't *think* there are many cases where you'd want to use pattern matching in conjunction with multiple `catch` statements. Maybe if/when they extend the `catch` syntax. Instead, if you've got C# 7 to leverage, the simple thing to do would be to make your shared exception handler a local function and call it all the `catch` blocks that need to use it. If that's not your speed, a pattern-matching switch would do the trick, but that's never not going to be a bit smelly.
except for a very important one, deployment. UWP doesn't play nice with MSI or steam.
You can put UWP apps on steam actually. In fact UWP supports many methods of deployment.
That's good to hear. I'll give it another round of testing and see how it goes.
There is a better (IMHO) framework, it is called ReactiveUI. I've tried several framewors and the RxUI features are top notch.
I completely ported a very large project at work to .NET Core. It was made heaps simpler by the really awesome ability to load non-Standard DLLs. The only issue is errors that should be compile time issues are now runtime exceptions. I can’t speak too much to what the project was, but it was basically a data collection agent.
I implemented a corporate single sign on server with dot net core and IdentityServer4. My Devs have published a purchasing request tracker and salaried employee management tool. maintenance request, corporate intranet, and safety audit tracking to come soon. Looking back, I'm happy with how it's all come together, but there's been frustration at times. Not as many 3rd party resources out there yet as dot net framework of course. Hosting in IIS is more of a pain than one would expect.
spider bot framework
Change ManagementObject[] mo = col.OfType&lt;ManagementObject[]&gt;().FirstOrDefault(); to ManagementObject[] mo = col.OfType&lt;ManagementObject&gt;().ToArray(); 
There is something you are missing, XamForms can build Mac apps, Linux Apps, WPF apps and even Winforms apps (there is a project in GitHub).
When I do this, I see that mo contains 2 objects (which is great as there are 2 updates pending on the machine!). However, when I step through, it pukes on the invokeMethod with: System.InvalidCastException: 'Unable to cast object of type 'System.Management.ManagementObject' to type 'System.Array'.'
Just some basic business workflow stuff. Basically "here's a contract", "lawyer says ok", "tax says ok", "well then, sign it" kind of thing. Should have taken a couple of weeks, but the client got so caught up with design patterns that we spent months on it. I would literally spend an hour implementing and testing a feature, then another seven forcing it to fit their patterns.
Thanks! You got me in the right direction. Ultimately, this was what won it for me: `dotnet publish -c Release --framework netcoreapp2.0 --runtime osx-x64`
Our new inventory management api is core. Sadly the infrastructure team won't let us run it on linux because the entire team is apparently windows only. 
Curious, what kind of exceptions?
A code generator cli program so that I dont have to repeat writing same type of code at work and working on a gateway api in [ASP.NET](https://ASP.NET) Core hosted on linux.
Very large billing system that processes transactions and integrates them into our ERP systems. I am loving .NET core more than I ever thought. 
Launching a SAAS in a month or so built with .net core mvc/api and Vue. Spent the last few months working on it, on and off. .Net core make it a breeze to mix api controllers and mvc controllers securely in the same app. Love it.
Probably `PlatformNotSupportedException`, when the "cross-platform" turns out to be a lie.
So far I've written a couple things and tested then on Linux and Windows without a problem. Have you had any issues with it? There are some quirks, but the most negativity I've seen about .Net Core comes from people that haven't even tried it.
I eerily agree with that too much...
well, I retested it and it still has the same problem. No good way to deploy apps through group policy, no way to use opengl or vulkan, you still have to publish through the windows store ... pretty much worthless to me in this state.
&gt; SerializationCrazyMode :)
&gt; you still have to publish through the windows store No you don't. There are multiple ways to deploy UWP packages.
Our CRM software at work is purely in .NET Core. It's a *huge* project that is used by companies with 600k+ customers and it runs off some pretty low spec AWS hardware without much trouble. My only dislike is that the EntityFrameworkCore library for SqlServer has some bugs in it or features missing that exist in .NET. I'm currently building a membership site from scratch using it to try my hand at using EFCore with MySql and then learn how to deploy ASP.NET Core MVC projects onto a Linux VPS. It's fantastic though, definitely continue using it.
There are really not many, but they exist. And in those cases I think it would have been cleaner to just not support the API, instead of only supporting it on Windows. But yeah, they backpaddled on a lot of design decisions that would have resulted in a cleaner .NET Core to have improved portability support from .NET.
they all seem pretty terrible tbh. Why can't it just make an exe that you can distribute?
**Summary of Notable New Features in 15.8** * The installer now offers the option to download all files before starting installation. * We improved performance during project unload/reload and branch switching. * Solution load times can be improved by disabling automatic document restore. * We made significant test performance improvements while running large solutions with multiple test projects. * Visual Basic now provides you with a significant performance improvement. * Performance Profiling now offers the ability to pause/resume data collection and a new .NET Object Allocation Tracking tool has been added. * We made improvements to the CPU Usage tool for Performance Profiling. * We added new productivity features, such as code cleanup, invert-if refactoring, Go to Enclosing Block, Multi-Caret support, and new keyboard profiles. * You can choose your target instance when debugging extensions. * Launch the Snapshot Debugger directly from the publish summary page. * We introduced F# 4.5, a new language version that fully supports Span&lt;'T&gt; and contains significant improvements to stack traces for async code. * We improved performance and added new features in F# tools, such as Ctrl+Click to Go to Definition. * Enhancements to C++ toolset include improvements to the SSA optimizer and linker. * C++ cross-platform development additions include ClangFormat updates, and configuration templates in CMake and Open Folder for MinGW, Linux, and Windows. * Changes to C++ productivity include Template IntelliSense, Quick Info tooltips on macros, convert to constexpr lightbulbs, in-editor code analysis squiggles, and more. * C++ debugging improvements include Just My Code updates and new data breakpoints. * There are numerous JavaScript and TypeScript improvements and features. * You can now manage client-side libraries in your web projects. * We've added a new single project Docker container experience for ASP.NET Core web projects. * You can now customize the tag for a Docker image with the publish improvements made in this release. * Xamarin improvements include support for Xcode 9.4 and smarter Android incremental builds. * You can use Google's Android emulator side-by-side with Hyper-V on Windows 10 April 2018 Update. * We added a split-view editor for the Xamarin.Android designer. * The Xamarin.Forms Previewer now has toolbox support. * You can now use cross-language debugging with Python 3.7.0rc1. * The Migrate local Azure Function settings to Azure now displays new values. * With added support for Azure Functions, you now have a new target host in the Configure Continuous Delivery to Azure dialog. * Test Explorer summary pane improvement now provides more informative test status. * .NET Test Adapter Extensions: breaking change and deprecation. * We added native support for the Language Server Protocol. * You now have secrets support for ASP.NET .NET Framework projects. * Visual Studio now offers .NET Framework 4.7.2 development tools to supported platforms with 4.7.2 runtime included. * Async autoload packages are delayed until startup and solution load complete. * The Build Tools Visual Studio 2017 now support Workflow and includes the VSSDK. * Git and TFS status now updates properly for external file changes in .NET Core projects. * .NET Core SDK 2.1.400 is included.
There are also some frameworks (unity) that handle non generic classes better then generic. So it's quite common to inherit from a generic class with a non generic. 
**Top Issues Fixed in 15.8** * SSDT not present in Visual Studio Build Tools 2017. * Anaconda fails to uninstall during upgrade (Error 87). * Upgrade to 15.7 generates error: PackageId:Anaconda3.Exe.x64;PackageAction:Uninstall;ReturnCode:87;. * Visual Studio update generates UWP BuildError at MakePri 0x80073b0f and 0xdef00532 errors at my Solution. * VS 2017 has problems with the ASP.NET Core export template feature. * Test Explorer (SpecFlow tests): goes to the feature class file not the feature file. * Project template exported from a C++ project only contains a vcxproj and vcxproj.filters, no source or headers. * Bad codegen on x64. * Right-click context menu on a Solution Folder does nothing in Enterprise 15.8 Preview 2. * VS2017 doesn't remember screen position and size for use on 3 monitors. * UTF8-no-BOM causes diff window to display erroneous encoding warning. * Double-clicking a word only selects to the start of the word, not the entire word. * VS2015 and VS2017 create an empty Debug folder in the path defined by $(SolutionDir) despite both $(OutDir) and $(IntDir) using completely different settings. * If you create a MFC dialog-based project in Japanese environment with VS2017, editing the dialog will cause errors in the build. * Download Progress Text display on Visual Studio Installer. * Right click executable project in Solution Explorer -&gt; Debug -&gt; Start new instance picks random project from solution to start. * DEVENV Command line build fails with: This operation may only take place in the UI thread. * Find and replace remembers file types. * Error messages are unreadable in Package manager console because of font color and background color. * Visual Studio Community 2017 15.4.1 Web publish preview fails with not authorized.
The easiest way I've seen in C# to make sure you have all enum values covered is to set up a unit test for it. [Fact] public void AllValuesCovered() { var values = Enum.GetValues(typeof(TYPES)).Cast&lt;TYPES&gt;().ToArray(); var testData = new Dictionary&lt;TYPES, object&gt; { { TYPES.A, new MyData()}, }; var myClass = new MyClass(); foreach(var value in values) { myClass.myMethod(value, testData[value]); } } Make sure that your method only creates a class, but doesn't perform an operation (a factory method) so that this doesn't have side effects. When a new enum value is added if the method has not been updated to handle it, this test will fail and expose the problem.
those still require a certificate from ms + break the workflows my clients use + doesn't work on win 7 + no support for opengl. I appreciate the links, but it's legitimately terrible for everything I do.
does it interact with the web?
I have built cross-platform 2D drawing app with AvaloniaUI.
Then don't use it. We use it for all our clients and they love the experience. Fuck windows 7 at this point, we told all our clients that we were dropping vista and 7 support over a year ago now, and they all finished migrating about 10 months ago.
That's ok, I thought I'd point it out just in case it was coursework. It's a silly thing, but if it were I'd rather you got a higher grade :)
If you have some time, it might be interesting to see what results your applications get with this - https://blogs.msdn.microsoft.com/dotnet/2018/08/08/are-your-windows-forms-and-wpf-applications-ready-for-net-core-3-0/
Public facing API for our customers to access order, product and quality assurance data. We use our ERP as the "Identity Server" and JWT as authorization mechanism. Authorization is computed by associating the logged in customer with the order data. Makes for a few queries in the database but the API does not need to be high performant and we can absorb that with `IMemoryCache`.
I’ve mostly ran into issues where the API isn’t supported on Linux or where the API returns things that don’t make sense because the Linux implementation isn’t done. Process for example returns 0 for a bunch of things that would never be 0 on Windows.
I don't trust any "infrastructure team" that insists on only Windows. If you have an app that only runs on Windows sure that's fine but when there are clear benefits to using Linux in this case and still insist on Windows only then that to me is a red flag of their competence level.
We have an in-house programming language (it's a DSL designed for supply chain optimization). The original implementation was in .NET framework, but we have recently implemented a new interpreter for the language in .NET Core. This wasn't the main objective of the rewrite (although the ability to run on Linux is a nice improvement to hosting costs), rather it's a distributed interpreter that runs on several machines at once (to deal with very large datasets) and can interact with GPUs (to run the Deep Learning and Differentiable Programming parts), so we decided we might as well support .NET Standard from day one. 
I've ported my hobby-project from .NET Framework 4.5/NHibernate/MySQL to .NET Core/Entity Framework Core/SQLite last month. It's a CLI application for organizing my huge anime-collection that calculates the hash of a file, looks it up in an online database, grabs episode/series info, renames it accordingly and then adds it to my collection. It also generates the metadata file required by Kodi. Porting was relatively pain-free, at least as pain-free as changing three components all at once can get.
Yes and no. My next project was spending a couple months on the other side of the US documenting a legacy Windows Workflow application. (Then I lost the coin toss so I'm currently maintaining said application.) And really the business workflow clients were friendly people. Sure they were making me do weird ass shit, but they always asked me nicely. I almost felt bad for them because I knew they weren't getting their money's worth, but they had deep pockets so I gave them what they wanted.
That is so good, thank you for the explanation!
I hate to detract from all the awesomeness above, but da real MVP: * You can use Google's Android emulator side-by-side with Hyper-v on Windows 10 April 2018 Update. Woah what? This is news to me! 
Does this mean HAXM ? I believe that was the reason I had to disable H-V.
I sure hope so. I have to disable Hyper-V and Docker whenever I want to run our Android app in the Debugger/emulator. It's so bloody annoying! I could imagine that's even worse if you use Xamarin on a daily basis.
Does this mean WPF is going cross platform or are these Windows only extensions?
&gt; Anything related to UI that can be done on desktop, can be copied to a browser. It'll just be slow as molasses for no good reason.
I ported an in-house desktop licensing application to a locally accessible ASP.NET Core website that runs on our office server. I like using GNU/Linux at home, so .NET Core has prompted me to try to learn ASP.NET - so far I'm enjoying it.
Perfect , thank you so much
There plenty of enterprise and middle tier corporations that are Windows only.
 Is it a commercial/proprietary software? If not, then can I check it out on GitHub?
I wish Google would adopt .net/C#, but they seem to be creating their own ecosystem with flutter/Dart instead :(
&gt;&gt; heedlessly -&gt; misquoted, I said "headlessly" &gt; What would be the point of unit testing if you can't test your code inside the app container? Look up Continuous Integration and unit testing. That's where unit testing is done on a different machine somewhere else as we commit code. I have a TFS build server that can unit test everything except UWP apps because there is no GUI for the unit test app to run in. The whole concept of unit testing in UWP is broken and Microsoft has no fix for it because it's a bad design and Microsoft should feel bad. Unit testing in UWP has been mostly broken by itself, thanks to bugs in VS2017 that prevent mstest from working at all - granted that may have something to do with our applications (but we have a few, and unit testing is borked across the board). I'm still waiting for the patch that fixes it, but it's not coming. The only workaround is switching up our unit testing framework. I've had some success with xUnit but the UWP parts of xUnit are buggy. When unit testing does work for UWP, it's awkward - it pops open a new window, runs the tests, then closes the window. Why is it so tightly tied to the GUI? There are no UWP console apps, which to me, means there probably shouldn't be any UWP apps.
I have written at this point maybe 50 seperate projects in .net core my previous company was an early adopter since it coincided with a huge push to take care of technical debt. Almost everything ran in a linux docker environment. It was mostly API's run through an Api Management Gateway. We also some ETL programs as well that mostly deal with SFTP and a Call Flow engine for handling SIP calls. Core is simply awesome.
Microsoft virtual academy won't teach you much, for me it didn't help much really. The basic tutorials are too simple and others are more lile guidelines. Not bad though they show you what you might search for, but does not seem as te best step for you. Learning a language is cool, but base object oriented programming principles are way more important, a language syntax is easy to grasp once you start writting code with it. Google around and try to find as much information as you can in OOP. Then try to find simple example application and follow how they are made. Best way to learn is to start making something, at first find an interesting tutorial, for example, web development with C# and .Net and once you finish, try to expand with interesting features that the tutorial example did not have. Try to make things work, then after you've learned more, revisit your work and redo it better, this is calles refactoring. So anway, web development is probably the way to go, you'll learn something that has many jobs open, more than games depending on where you live. Where I'm from there is not a single gaming company so.. Furthermore, doing this will allow you to feel more comfortable writting code, so go for unity as well and see how easier it is to create something when you understand your code, rather than starting right away with game making tutorials. All in all, put time and effort in, if you want to become good. Check reddit for more topics on learning programming, there are many advices, links to good tutorials and so on. Good luck!
It messed up my SSDT. Cant deploy SSIS projects anymore... Every single time i've updated VS, I get issues with SSDT. 
Your idiotic comment is a red flag of your competence level.
I built an .NET Core API project that does nearly everything active directory does as well as tasks specific to my company that my help desk deals with on a daily basis. I also built a MVC Razor project that looks nice and calls the API so our help desk can work from their phones when on call. Next I am going port my last project to .NET Core. It's a command line application that takes all my companies sales data and pushes it to SalesForce.
Show me, Senpai!
No problem! I am bitter and cynical but it's because my heart hurts. I put 10 years of my life into WinForms, 4 or 5 years into WPF/Silverlight, and 5 years into Xamarin Forms. It hurts to see what being an MS dev today feels like compared to 2005.
We developed a kind of service app (not web service) which is polling data from db and pushes to kafka and logs to file execution. It should be running for very long time. We are pretty satisfied, for running it on linux
I don't know any particular good article. It didn't click for me until I did it. A lot. I'm going to write the article I wish I'd read. The property end of MVVM is the easiest to grok. It makes sense: if your ViewModel has a `Temperature` property, and you bind it to some thermometer control, you *expect* to see the thermometer change automatically if `Temperature` updates. Same with the other direction, if `Name` is bound to a `TextBox`, it isn't startling to find out the property is updated if the control changes. Where people fall on their faces and stumble is logic. Some of that is because WPF didn't have a 100% answer for this at launch and the community had to find answers. They found a lot of answers, iterated, and now it's hard to figure out which answers are "right". But every answer to, 'How does MVVM handle logic?' comes down to answering, 'How do I make logic look like a property?' The ideal case involves the scant few controls that actually use the Command pattern, like `Button`. It has a `Command` property that will be executed when clicked. If you bind that property to some `ICommand` property on the ViewModel, and that property has been configured to call some logic, there you go! The `Button`'s contract is "I will execute this when I am clicked". This is, in my opinion, the ideal way for controls to work in WPF. But of course, MS only implemented maybe 2 controls that do it that way. You'll see a type named `RelayCommand` mentioned a lot. MS didn't implement any helper `Command` types at first, and as far as I can tell there still aren't any in their frameworks. But someone made this type, a `Command` that uses lambdas, and it was really convenient. So most MVVM frameworks use one, and some MS templates come with an implementation. Attached Behaviors seem to be the "winner" among the other methods. It takes a while to get used to them. Seriously, I'm not ashamed to say it took me years. They sort of abuse WPF's Attached Property feature. Here's a quick crash course. A behavior is just a special kind of Command. It has some logic that can execute, and is expected to execute in response to some kind of event. The part that makes it special is it has an Attached Property, which is sort of like a static Dependency Property. The type of Attached Property doesn't really matter, it's usually `bool`. When the Attached Property is set, part of its change handler gets the object that is setting it. The behavior looks for a certain event on the object, and handles it. When the event is raised, the behavior executes its logic. So it's really just a fancy way to "make an event handler look like a property". I don't know any particular Behavior types that are common. By the time I started understanding them I'd jumped ship to Xamarin, and I ended up writing much more backend than frontend. It's all very conceptually simple, but to me it took a lot of "different thinking" to make it click. Write *a lot* of simple utilities, just simple things like bill spiltters or tax calculators. If you think a technique works, try it, and see how hard or easy it made it. The exercise I found enlightening is: &gt; For this UI task, I'm going to write a console app that does the same thing, with methods named things like "ButtonClick" I will call when I want to say "the user clicked a button. THEN, I will move that into a WPF project and try to use that console class as a VM. Those methods like ButtonClick are always what end up being the targets of Commands or Behaviors. Abstracting them this way means I can test complex UI interactions in the VM without having the UI. For example, here's the story of a test, and how it is expressed in the VM: 1. "User enters a name that contains a number" -&gt; "Set the `Name` property to "test1". 2. "User clicks the OK button." -&gt; "Execute the WhenOKIsClicked Command." 3. "An error message should be displayed." -&gt; "The `NameError` property should not be null, and have these values." Sometimes it feels convoluted. It feels more valuable on larger projects than smaller ones. That, I think, is the biggest valid complaint against MVVM: for very simple projects, you often write more code for the ceremony than actual logic. Since tutorials tend to be simple, it's really easy to feel like MVVM is more trouble than it's worth. I promise it's not, for sufficiently complex projects.
Why do you care about that? I mean isn't that entirely the infrastructure team's problem?
Mine is only collecting data by invoking rest API, so partially yes :-)
Quite interesting. I have some suggestions already. But I will look into it when I get home and then maybe PM or write as an issue to prevent false quick judgement. &gt; no documentation If it had a documentation, it would be the first project in my 7 years of practice to have one ;)
Thank you for sharing!
Those will be much welcomed changes too. I currently close VS17 before I change branches and re-open my project for that very reason. That's a small bump to my normal workflow. Having to disable Hyper-V so I could run the Android emulator and mess with my already volatile Docker for Windows installation has caused me to have to reformat my machine on several occasions because Docker wasn't very happy. While I agree with you, the Hyper-V thing has a special place in hell for me.
https://github.com/wieslawsoltes/Core2D
I recently created a "app health status" web API that hits various datastores to retrieve information concerning the dozens of applications on our system. E.g. Is App A running? What version of App B is deployed in production? How many transactions were processed by App C in the last 5 minutes, what percentage of them succeeded or failed? The team that owns said particular App would then put a frontend (usually Angular) on my API backend to display its app's status.
They made decisions that fit the expression "throwing out the baby with the bathwater". We had to build a micro-service in PHP because .Core doesn't have the crypto support required to interop with the old data. 
At my first fulltime job I wrote a middleware program that took item and bill of materials information and imported them into an ERP system. A few weeks back my old boss calls me up and asks if I can make some changes to the program and I said sure so I found the old source and made the changes as well as porting it to net core and it was super easy.
I see. That part should be on infrastructure team budget so they can calculate the price of training their people and implementing additional processes and compare it to the price of Windows licenses
That should change in Core3. They are adding WPF, Winforms and some other stuff.
Oh God. SSDT is and has always been a nightmare.
No, because they are dropping legacy .NET Framework API like WCF and Remoting, and some third party vendors are not porting their components to .NET Core for the time being. For example, one of our applications requires ODP.NET unmanaged driver features, which Oracle is not planning to port to .NET Core.
Your code doesn't show the declaration or the line where the exception is being thrown and isn't really . It's really hard to debug with the info you're giving us. Also, it would be better if you described what you actually want and what the WMI classes do (since it isn't what .NET developers work with everyday). WMI expects object[] which are supposed to be the parameters to the method. What does invoking `GetMethodParameters` with "InstallUpdates" as the argument return? 
The type parameter you're passing is an array of ManagementObject. col.OfType&lt;ManagementObject\[\]&gt; Instead, change it to: col.OfType&lt;ManagementObject&gt; // no brackets You'll have to change the definition of mo so it's not an array too. FirstOrDefault() only returns a single instance (if it exists, null otherwise). I'm not sure why you've coded it using arrays.
Suggestions are always welcome (even if there's already a big list of areas that need improvements). &gt;PM or write as an issue User registrations are disabled, so PM would be the way to go.
Where is the exception being thrown? What is the size of the file currently being read when the exception gets thrown? Strings have a max size and C# objects in general have a max size of 2GB unless you enable large objects with the GC. There might be some optimizations you can do as well with Span&lt;T&gt; and Memory&lt;T&gt; so you aren't copying strings everywhere but I am not sure that will solve the OOM exception.
Yeah I could make things a string[] instead of a list&lt;string&gt;, since that doesn't grow dynamically and is only assigned once. Not sure how much more efficient that is though. The data being stored in things is just a string that is between 2 and 50 characters long. Each file looks something like: 1000, 45, 66, car, house, cat 1001, 64, bike, 91982198, hockey 1002, kjsd,asdkj,asdjs,454353 1000, dad,sadsad,23432,asd and so on. Each file is pretty much the same, just with more or less data items to the right. PS. If you've got the day off work you should be outside enjoying the sunshine, not helping other people with their work! :D 
Maybe [this](https://serverfault.com/questions/575161/is-there-a-way-to-script-the-installation-of-system-center-configuration-manager) SO question has the answer you're looking for? 
There's no exception being thrown. The ram usage just grows and grows until it uses up all of the 32gb ram I've got, then the whole pc grinds to a halt. If I remove some of the files from the data directory (say I leave it with 60 files that add up to 3gb), it'll use up ~25gb ram and finish pretty quickly.
Oh weird so it's not in any order like int, string, int, bool or anything? Well you could take that first item before the first comma, 1000, 1001 and skim that off into an integer which would be much more efficient. If there is always an int or always a bool in other columns do that there too. Keeping it all strings is what is soaking up all the memory. In my program that does something similar I'm parsing a .xls and each line is being parsed into a "line" object. That's a POCO object that has fields like int, string, int, bool, int... Then I have a List&lt;line&gt; to collect all of my lines. After about 100 or so lines I manually call garbage collection to clean up the data I read from the file because it is coming in as a dynamic, so very inefficient. I could probably get away with calling GC less, but it's running on a fairly sensitive server so I just try to make it as good a neighbor as I can. Outside- don't worry I will be shortly, I'm supposed to be mowing a lawn. 
There's zero need for personal attacks in here. And as a matter of fact I tend toward agreeing with your ad hominem target. I've preached platform agnosticism for most of my 26 years in this industry. If all you have is a hammer, everything becomes a nail. And nevermind the fact that Linux is a very large percentage of the overall infrastructure out there, including most modern cloud services. Not knowing how to admin it pigeonholes you.
The tryparse trick, there's as idea... I've never tried but maybe you can do that and store them in a List&lt;var&gt; or something to make it more compact? I'm sure there a CS101 teacher out there reading this and screaming into their monitor but hey, it's an idea...
Whew! Where to start, I have build an ID generating library, a Xamarin Forms app, several APIs currently running on Linux, and a few other libraries that you csn check out on my GitHub profile [https://github.com/bolorundurowb?tab=repositories](https://github.com/bolorundurowb?tab=repositories)
Var is still typed I think, the type is just inferred from the contents. You know I've never really tested this though I should poke around at that... You know what no, this is how it starts! LMAO you're right, mowing lawn now.
pardon my french but fuck iis. iis is literally the worst. my condolences. 
what kind of patterns? like design patterns? 
From the start of my .Net Core journey, I used it mostly for small web/API development. I have a preference for Mac and/or Linux and I love C# so it was like a dream come true for me. Currently, I use it for two projects. One is a cross-platform Xamarin application with a backend implemented as a microservices. Second one is also microservices based but it uses ASP.Net Core MVC as a frontend (for now).
if you're using efcore I'd suggest postgres. the npgsql provider is much more complete than any driver for mysql. 
What exact code are you using to read each line from the file?
Technically they are "design patterns" because we're applying them consistently, just the wrong design patterns. For example, there's this weird thing called MediatR. It allows you to run commands through a pipeline, intercepting and augmenting the commands as needed. Which is ok, I guess, in the general sense. Where is gets stupid is when you try to use it with ASP.NET Core, which already has its own pipeline. So a good chunk of my code is just wiring up MediatR to ASP.NET controllers. Then to add more stupidity, the MediatR handlers don't actually handle anything. They call out to service classes (which could have been invoked directly from the controller). Or maybe not. Because if you forget to implement a MediatR handler it will gladly assume that was intentional and just drop your data on the floor. We need database access to validate updates before saving them. But instead of doing the validation in the service class, we have a separate set of MediatR handlers that get injected into the pipeline. This of course doubles the number of database calls. Attribute based validation for simple cases? No, we can't use something that's part of ASP.NET. Instead lets use a MediatR handlers to invoke a 3rd party "fluent validation" library that takes five times as much code to do the same thing. Don't want to couple EF to the project? No problem, we can use POCOs and EF Code first. No wait, even better. We can waste all day creating an interface for each and every DTO in a separate project. Who cares if we need to make an unsafe cast from ICustomer to CustomerEntity in the repository layer. Sure it means that we aren't really decoupled from the EF entities, but at least the interfaces make it look like we are. Once I was asked to rename ParseNullableBoolean to ConvertLegacyBooleanStringToNullableBoolean. (Actually that's a lie, the real name I was even longer. Like literally longer than the body of the function.) I had two copies, one in C# and one in T-SQL. They each got a different, ridiculously long name in the end.
What clear benefits? Windows is the only desktop OS with real backwards compatibility
I believe it should be player.IsInvincible = !player.IsInvincible. this will set is invincible to the opposite of whatever the current value is.
Sorry, I am a n00b and doing the best I can here. :) I thought the declaration was implied in my post above when I quoted you, but apparently here is where I'm at: ConnectionOptions options1 = new ConnectionOptions(); ManagementScope theScope1 = new ManagementScope(@"\\.\ROOT\ccm\ClientSDK", options1); ManagementClass mClass1 = new ManagementClass(theScope1.Path.Path, "CCM_SoftwareUpdate", null); ManagementObjectSearcher s = new ManagementObjectSearcher("SELECT * FROM CCM_SOFTWAREUPDATE WHERE COMPLIANCESTATE=0 AND EVALUATIONSTATE &lt; 2"); mClass1.Scope = s.Scope = theScope1; var col = s.Get(); var moArray = new ManagementBaseObject[2]; col.CopyTo(moArray, 0); That is when I go through the if/else and it fails. &gt;What does invoking GetMethodParameters with "InstallUpdates" as the argument return? When I run the following code, it shos as "System.Management.ManagementBaseObject". string methodParams = mClass.GetMethodParameters("InstallUpdates").ToString(); lblInfo.Text = methodParams; Again, thanks so much for your help here. I'm trying hard, but I've reached the end of my knowledge of C#. This is helping me grow! :) Let me know if you have any more thoughts.
Also, a List&lt;&gt; object cannot exceed 2GB as well. Are you *absolutely sure* your program is using up all 32GB? An OutOfMemoryException does not necessarily mean your program is using up all your memory -- it just means that all the memory allocated for *something* has been depleted. (i.e 2GB limit on a List&lt;&gt; object).
So I tried it and it doesn't seem to save anything over string[] - the subset still took 1gb of ram, which is the same as before. public object[] features is what I tried, and populating it with tryparse doubles, tryparse bool, else string. No improvement.
Ew, AD. If you'd like to have a conversation about why Linux security is better than Windows I'm all for it. 
Omg, you're a life saver dude! Thanks, I never thought about this!
Well, it initially falls on product management when gaining acceptance for a project. But in a cost accounting shop, the team that funds the project pays for licensing as well. 
So replace "only using Windows" with "only using Linux". My argument in favor of a single OS still stands. 
Nope. Platform agnosticism. I said it before and will keep saying it. 
The problem that you're having is that most collections in c# are backed by an array. And as you add items, the collections grow, and generally speaking they double (or some scale factor) that backing array. So you may be inadvertently asking the CLR to allocate a 2GB array, which i think it is going to barf on. A few things to try: 1) Don't use a List&lt;T&gt; for your allSetsOfThings. Use a linked list. This will eliminate the need for the massive backing array. 2) Use an array for your setOfThings.things property. Rather than .split(",").ToList(), do .split(",").ToArray(). With these you should reduce your memory consumption by a lot. If you wind up needing a hashset/dictionary, you'll need to find a linked implementation somewhere. Something like an avl tree or a red black tree.
Ok. Only other thing I can think of (front lawn done!) is to simplify the process. For example if you are reading the file into a database table, literally just read the first line off disk, then insert the row into table, then discard those 2 objects and read the 2nd row from the file and insert the 2nd row into the table and discard those 2 objects... It's a bit of a rewrite probably but it'll use next to no memory.
LMAFAO!!! Dude, you are a way better Googler than I am! This is EXACTLY what I'm looking for, and it works! Gold for you! Now, I'm going to read everything in that post and here, and try to build my knowledge. I really, really appreciate you taking the time friend!
Default if otherwise. Default is null for reference types and not null for Value types.
No problem and I believe it would be something along the lines of: string debugMessage = "Invincible: " + player.IsInvincible.ToString(); UI.ShowSubtitle(debugMessage, 1500 ); presuming that show subtitle takes in a string for the first variable.
Actually, just edited my post. [This post](https://serverfault.com/questions/575161/is-there-a-way-to-script-the-installation-of-system-center-configuration-manager) details exactly what I'm trying to do, and works! I don't have a full grasp on why yet, but I'll be reading this over and over. Thanks a bunch for taking the time to answer me!
Most of my work is API or data processing oriented. Fairly boring but all is either core or being ported to it now. My current side project involves AI and large amounts of government data... So still boring data processing for the most part but it's in core. My only real complaint is some of the tooling early on was fubar. I ran into cross platform issues early on also. But now they seem mostly fixed. To me it's kind of meh. .net standard on the other hand has been a godsend.
I ticked the exceptions in the Exceptions Settings windows after your advice. I still don't get any popups from Visual Studio but after letting the program exit/stepping through the remaining code I see the following in the Output window: The program '[5072] WMP Testing.exe: Program Trace' has exited with code 0 (0x0). The program '[5072] WMP Testing.exe' has exited with code -1073741819 (0xc0000005) 'Access violation'. 
Haha, [this](https://www.google.co.in/search?q=InvokeMethod(%22InstallUpdates%22) was exactly what I googled (copied from your code) and it was the second result. Thanks for the gold! 
If you need more in deep help, I'll be happy to take a look tomorrow when I'm at a computer. 
No problem and yeah that works to.
I have several ideas to make some money/products, to be honest. 
That's awesome. I would love to start building projects that share code between a Xamarin application and a .NET Core Web application. I have a few ideas. I think 3rd party libraries are definitely improving! I'm excited.
yeah... best I could find was extending their "VS Code" edition of SSMS which is sql server operation? studio? this: https://docs.microsoft.com/en-us/sql/sql-operations-studio/download?view=sql-server-2017 So I might try that out... or just wait. Oh well. 
yes but what you're likely to run into here is heap fragmentation. any array over about 80k is going to live on the loh. loh never gets compacted, etc. linked structures, while generally slower, never have this issue. and true, i forgot it wasn't an ienumerable. 
Remember installing sql server business intelligence tools? fuck that. at least SSDT is a move in the right direction
Or you could maybe make a logical argument instead. 
I have to do the same if I want to use VirtualPC.
Resume padding I suspect.
Yep that point is understood for sure. It’s always a struggle to find the middle ground between performance, maintainability and value. I work with people who tend to copy and paste my code for the majority of their work and it’s always in the back of my mind when I’m building. 
Dictionary isn't going to work with indexes like that. When i = 0, txtDict[i] is going to try to find txtDict["0"] in your dictionary, which contains no such key. You need to do something like: txtDict.ElementAt(i).Value 
That wasn't the issue at hand though. He clearly stated if you're bound to Windows, that's fine.
Yeah, under x64 and with the runtime flag &lt;gcAllowVeryLargeObjects enabled="true" /&gt; in App.config, you can allocate huge objects ;) Also, I never get an exception, but I can see that the ram usage goes off the charts on the profiler, and eventually bogs the whole computer down as it starts paging.
 using (StreamReader sr = new StreamReader(directory+"/" + filename)) { while ((currentLine = sr.ReadLine()) != null) { //Do stuff } } But I'm pretty sure that the problem lies with the huge/nested list object, not the file reading part of the code.
So I have been reading about both ColorMatrix and ColorMap.. they seem easy enough but apparently either I went wrong or they do not support UWP applications. is there a NuGet package that can be used as a shortcut? is there alternatives for UWP applications? I was thinking maybe I can start with a black-white image and replace the colors or start with a PNG and add a color overlay and a background..
Tell me more how a desktop OS relates to this obviously server workload
Can you explain what you mean by "non-Standard DLLs"?
The problem is that I'm not reading them into a database - I'm parsing/formatting the files to create yet another singe text file with all the data. I can't do a line at a time (well, I could, but it'd be very very slow and tedious) because each *key* occurs anywhere from 0-1000 (or more) times in *each* file. So I "final" version of the data for key 1001 is only complete after I've read ALL of the files and gathered ALL of the data from each file. Doing it line by line would mean reading through every single line of every single file (and then repeating it for the next key) for each of the 240k keys. /u/cat_in_the_wall made a comment suggesting linked lists instead of List&lt;T&gt;, so I will try that tomorrow. I'm back home already, so time to work on my own code for a bit instead of my work's. (And also head outside in the not-so-sunshine) :)
Yep exactly. Look at all the morons shitting on me and downvoting me for saying what I did as well. Morons.
Look at how you are reading the files off the disk.If you are using File.ReadAllLines() this has memory ramifications if they are large files. Much better to a use File.ReadLines() Also are you trying to do all your text files in parallel? That will also make your memory print much larger than if you did them individually
Oh yeah, right, thanks. And I know what invincible = !invincible does. I do also know that ! does the opposite. I'm progressing more, I also added a never wanted toggle script.
That's very kind of you, I will message you tomorrow if I am still struggling with it
Are your files on disk utf8 or utf16? 
assuming utf8
Yeah, the good part is *at least* if you learned one of the XAML frameworks, it's both: * Applicable to all of the other XAML frameworks. * Really similar to most other modern UI frameworks. I mean, HTML/JS is like XAML/C# without a built-in data binding feature, and most frameworks provide something like data binding. iOS/Mac dev has you treat Interface Builder like XAML and Swift/Obj-C have stuff *like* data binding. Android uses "I can't believe it's not XAML". So it's not the worst programming paradigm to have invested in, but my opinion about the future of "Windows desktop apps" is pretty grim. I've hung around a VB .NET forum for upwards of 10 years, and the vets there are considering early retirements because gigs are getting harder to find. Their clients want web/tablet apps.
Can't you just run them from a console host?
Honestly, it's just nice you look for the middle ground. Too often people just don't think. You also get a cookie :)
Windows only unfortunately.
I could. I'm not sure how well that works with multiple sites hosted on the same machine? I haven't strayed too far from our old methodology yet.
It is getting addictive now, isn't it? 😂
So you have about a 4x memory overhead on many small strings because when they get read in to the string datatype they are expanded to utf16 which is already 2x the size on disk... The first thing I would is make one pass over the files and build a list of all individual things: var things = new HashSet&lt;string&gt;(); foreach (var file in files) { using (var sr = new StreamReader(directory+"/" + filename)) { string currentLine; while ((currentLine = sr.ReadLine()) != null) { bool first = true; foreach(var thing in currentLine.Split(',')) { if(first) { first = false; continue; } things.Add(thing); } } } } then make that a dictionary and array pair: var allThings = things.ToArray(); var thingIndexes = new Dictionary&lt;string,int&gt;(allThings.Length); for (var i = 0; i &lt; allThings.Length; i++) { thingIndexes[allthings[i]] = i; } And see how much memory this takes... With those objects you can use datatypes like: public class something { public int label { get; set; } public List&lt;setOfThings&gt; allSetsOfThings { get; set; } } public class setOfThings { public int name { get; set; } //int.TryParse for that public int[] things { get; set; } } which should minimize your string overhead
I mean theres more to C# and .NET than Xamarin. Try out WinForms (for the old luls), WPF, and UWP. UWP is kind of a hot mess... any interest for web dev try out ASP MVC 5 or the "new stuff" ASP MVC Core 2
In a nutshell xamarin now supports hyper-v based android emulators from Google.. Visual Studio allows you to build and manage them. Based of my understanding as for the Hyper-v and Android emulator working together is that it is a windows os feature which been added recently with vs preview. I have been using it for the for a while without having to install Visual Studio 15.8 preview .. As I use Docker, win &amp; Linux vms, and build Andriod apps using Flutter, and Ionic.. Xamarin was something I did in the past but haven't used it recently. My option before was using a device for testing instead of an emulator. Disabling Hyper-v wasn't practical for me. Now there is no need... Thumbs up to Microsoft for making our life easier.. 
Here's an improvement, food for thought: var txtDict = new Dictionary&lt;Control, string&gt; { { TxtBoxCustomer, "name" }, { TxtBoxLocation, "location" }, { TxtBoxContact, "contact number" }, { TxtBoxAmount, "amount" }, { TxtBoxPump, "pump" }, { TxtBoxFuelGrade, "fuel grade" }, { TxtBox4Digits, "4 digits" }, { TxtBoxCarReg, "car reg" }, { PickerDate, "date" }, { PickerTime, "time" }, { ComboReason, "reason" } }; foreach (Control c in txtDict.Keys) { if (c is Textbox &amp;&amp; ((TextBox)c).Text == "") { MessageBox.Show(txtDict[c].Value); } }
Lead by example.
Are you using migrations? If so you can create the classes how you normally would (code first) then make a migration. It'll create the migration file, read the code it puts in the up() to make sure it's the same table as the one that already exists. If it's not you'll have to mess around with the poco class. You may have to change the types of your variables on the class. Additionally EF has annotations that look like this: `[Table("snakeCaseTableNameGoesHere")]` `public class NormalClassNameHere` It also has mapping classes you can use. There are some extra things the mapping classes can do that annotations can't but mostly they do the same thing in a more verbose way. One of the nice things mapping classes could let you do is not have any special Ef code in your POCO classes and still be able to change the table names or the type for a column in the DB. 
Actually I'm gonna open my own laptop up and try this right now! I'l let you know how I get on.
Holy F, I didn't realise that it COMPLETELY broke execution/debugging of SSIS packages inside visual studio. What the hell?! Please upvote this thread: [https://developercommunity.visualstudio.com/content/problem/311014/vs-158-ssdt-unable-to-execute-ssis-package.html](https://developercommunity.visualstudio.com/content/problem/311014/vs-158-ssdt-unable-to-execute-ssis-package.html) This is UNFATHOMABLE.
And what difference would that make ? You decided before you even started this discussion on preaching some kind of dogma. Linux security is a myth. This is by now accepted and understood fact in the industry. You can absolutely lock down a system but the same you can do with Windows (hello EMET was actually more usable than anything on Linux. This are not even my words. Ask the guy who wrote grsecurity.) Most corporate or startup systems run on some standard setup of an OS be it Windows,Ubuntu,RHEL or whatever. I bet the number of companies that is properly using things like selinux or grsec is so tiny that it almost makes a statistical error. 
Line should be: if (c is TextBox &amp;&amp; ((TextBox)c).Text == "") { MessageBox.Show(txtDict[c]); } TextBox instead of Textbox And .Value is not required.
&gt; their competence level It could be a monkey-water knee-jerk reaction to anything not Windows.
You could make those assumptions about what I'm thinking and be incorrect, or you could actually ask a question instead. First, show me where I said linux security is perfect. When you can't do that, you should realize what I actually said was it's better than AD. The reason for that is ldap is considerably more flexible and is supported by considerably more platforms and cloud services while AD is proprietary and Microsoft specific. Not to mention the corruptible database AD uses to store its configuration... Microsoft's jet database. Then, of course, it's LDAPs adherence to X.500 which means anything in the internet understands 
 Thanks for this very mature and well thought out post
Mind if I ask how this code is working? I'm seeing a bunch of things in this code that I've not come across yet.
You would think that would be the first thing I searched. Got lost in my own thoughts trying to figure it out! Thanks again!
^Blink ^once ^if ^you ^did ^it ^for ^the ^NSA.. ^^twice ^^if ^^not.. :P
Most likely yes.
We use SSDT pinned to version 12 in our CI pipeline for database tests. (12 shipped with VS2013) it has been a nightmare to deal with on build slaves since then without having to log into a machine and install by hand.
So the change is running Android devices inside of Hyper-V? Thanks for clearing this up! Hopefully they're useable from Android Studio.
Awesome
&gt;not sure how well that works with multiple sites hosted on the same machine i am sure you know what i'm going suggest now :D
Docker? I'd like to get there. 
"Access violation" sounds like the user running the program may not have access to the file path the movie is being played from. It would make sense for the D3D9 library to be the point of failure, since it needs direct filestream access to work its magic. (Though I'm a bit surprised you're not getting a Media Foundation error instead.) You might look into trying out Media Foundation via the MF.Net library (or something similar, there are several interop wrappers for Media Foundation) instead of the WMP control. It's a bit more tedious, but a lot more powerful. And when things break, you'll actually be able to handle it properly rather than just wrap it all in a try/catch/*pray*.
You don't want backwards compatibility on your server?
It's not much different than what you had. Instead of mapping the two structures by index, I use one dictionary to do both. The key is of type Control, which is a parent of all text boxes, combo boxes, etc. The value is the string you wish to show. Maybe the 'is' keyword is new to you. This just checks the type of the object, to make sure the type cast statement does not fail.
What's stopping you?
Removed: Rule 7, rediquette.
The main one I have seen is `TypeLoadException` (converting to Core and continuing to run on Windows). 
.NET Core 2 can attempt to load and run desktop framework dlls (as opposed to dlls targeting netstandard or netcoreapp). 
I made a D&amp;D combat tracker last fall with Xamarin Forms. It was quite a battle. First, I'm not a professional, so I had to learn a few design patterns like the service layer pattern, MVVM, dependency injection, and async/await. Second, the educational material on Xamarin is practically non-existent compared to anything else I've tried to do in C#. In reality, working with Xamarin was just way out of my league. I learned a lot, but I don't know if I'll ever use it again. Also, it seems like the web based xplat app solutions, like React Native and progressive web apps, are going to be the next big thing. If I decide to make an app again, I'll probably just learn JS and do a PWA or possibly just a regular single page web app.
An access violation means memory access violation, likely within D3D9.dll. 
[removed]
Time to back up and understand where you are. A razor Page is executed on the server, which produces html that is sent to the browser. So now you have html in the browser. Razor is out of the picture. You have a table with rows. To delete data you have to send data back to the server from that browser. You can do that with JavaScript (Ajax/webservice) call, or a post back (html form). Do you know how to make a web service endpoint in your controller? One that can be hit via JavaScript? When the call is made, with JavaScript (Jquery can do that no problem), you will get a call back once the delete is done. At that point, also using JavaScript, I will commonly tell the browser to refresh the page (reload using the same url). Using jquery you can call this by adding click handlers to links on the page. That will reinvoke the server and load new html for you. There are many more sophisticated ways of doing this, but that is a reliable way to get started.
You're a rediquette.
I had noticed the prefixes in the code, but since I've never made a mod for GTA I didn't know it used that. However finding solutions to problems is why we do code ;) A solution would be to add what is called a short-hand if else in the print code: MethodThatPrints($"Invincible: {player.IsInvincible ? "~g" : "~r"} {player.IsInvincible})"; As you can see there's a boolean 'question' followed by what is returned if the boolean is true and otherwise (what comes after the ':') is returned. So the check above means that if the player is invincible it should add the green prefix to the interpolated string, otherwise it adds the red prefix. You might need to escape the special characters like you did in your comment, but this should help. (Again, sorry for any format error, still on mobile :P)
Nothing lasts forever and you’ll surely be hopping tech stacks several times. Working with the cloud, modern OOP language, cross-platform UI kits - all build transferable skills.
Thanks for taking the time to write this. It helps. 
WPF can play videos in the media element https://www.wpf-tutorial.com/audio-video/playing-video/
Honest question - are there specifics about .NET core that you love more than the old .Net framework? I'm newer to .NET core and always looking for reasons to feel good about using it instead of the old framework.
If you work with SSIS a lot, you should be used to suffering by now. 
I am struggling to understand the whole of what you are asking,there are a lot of questions in there. Should you abandon HTML/CSS/JS? Well, what do you want to build? I use those 3 and C# (ASP.NET) to build websites. If you want to build websites stick with those 3. If you want to build games as you mentioned later in the post, those are not very helpful. Note however that lots of other things use JS. For example Node, mobile development with React Native or PhoneGap, all sorts of stuff. Can you make them in C# too? Of course. As far as resources - I used Pluralsight and MVA as well and those were great. In my case I also had 10 years experience as a developer so I'm also coming from a different background, but those should help a lot. Really it's like learning any other programming language: just sit down and code stuff. Solve problems. If you understand OOP it's pretty straightforward. 
if the columns are consistent, what about a DataTable?
I recommend using Redis for very large datasets that you’re still trying to fit in memory. It’s quite simple to set up, and I used it to solve the exact same issue at work in Java. In your current setup you’ll find that garbage collection takes a surprisingly long time as well, thanks to your gigs worth of Map.
You definitely don't want to use \`ElementAt\` here. The elements of the dictionary are going to be in some random order based on whatever the hash function does, and there's no reason it should match the order above.
Presumably you’d wind up losing a pointer of overhead for every node this way. Although this is still potentially smaller than your unused array capacity if it’s that large it will be slower to walk through as well.
I can't address everything you've brought up but just a few tips that might help you find your way: First off, C# is a FANTASTIC language. It's well designed, has excellent IDE tools, and runs cross platform thanks to dotnet core. Its Object Oriented, but also has lots of nice things from the Functional Programming world, like lambdas, LINQ, and now pattern matching with C# 7. Many "next-gen" languages look to C# as a source of inspiration (swift, dart, kotlin, ECMA-Script), so it's well worth studying. That being said, you'll need to understand HTML/CSS/JS, because unless you're writing client applications in WinForms or WPF (both are .NET), you'll probably be doing some ASP.NET, which serves up HTML pages. Like it or not, HTML is the lingua franka of the software world because almost every device has a browser that can render it. Its great for writing documents and basically sharing information. Its *not* so great at being an application platform the way its being used in modern web-apps, but it works! I wouldn't worry about making a bad move by learning one language over another, as long as you *DO LEARN SOMETHING*. Once you get to the core of any language, you'll know a lot of things that can be related to another language. In the end, they're all turned into machine code, so once they get to the bottom level there is a lot of similarities. If you're worried about what skills you'll need to get an internship then the *BEST* thing you can do is show up to your schools career fair and get in front of some recruiters. They'll tell you what they're looking for and what kind of tech-stack they use. Even if you feel like you're resume is weak, just show up and talk to them and show them your enthusiasm for having a career in the field. They'll be very excited to see someone with passion since that is the one thing they *can't* teach you after they hire you. Last piece of advice: don't give up. You're never going to understand everything, and even just getting the basics can potentially take a long time. Don't loose sight of why you first became interested in the field. Make sure to take time to appreciate what you've learned instead of all of the things you don't know. If you stay persistent and perform well consistently, you'll get a job. It may take longer that you'd hoped, but you'll get one. We're in a fortunate time where software developers are in high demand, so just keep at it!
You might also want to try the windows forms validation stuff. (assuming this is windows forms) This stack overflow question had code and links https://stackoverflow.com/questions/5435366/how-to-implement-control-validation-in-a-windows-forms-application
Yep, Unity continues to snowball, especially in mobile. There are far more games and apps made using it than you'd expect. Any serious Unity project uses C#
No. A broader skill set is always better. Focus on c# if it’s more interesting, but at least sort of keeping up with didn’t end work is good for your career. 
Basicially because I start school soon with a track in C#, and because I'll need to build stuff for the program, and so I could increase my chances of landing internships, I think focusing on C# is more crucial at this moment. Then I could just circle back. I'm just not sure how important going through HTML, CSS, JS first would be in comparison. Thanks for the info as well!
Thanks you, yea I'm open to relocation anyway, however I might also be moving to Seattle some time later this year or early next year. Or just Washington in general. My oldest brother loves it there so I'd be going with em.
I like you.
I don't think c# is superior to Java, I've just read most people enjoying it over Java which makes me think I should choose that track given my interest in making games as a hobby on my own time, as well as making it easier to learn if it's just more enjoyable to work with. Well because my situation with the school I'm going with being all online, and work at my own pace, I hope to finish it in less than 1.5 years, and that's tricky when the majority of people landing internships I'm guessing are in a CS program at some 4 year university. Although I heard of some people landing internships just fine with WGU. I'm thinking I should continue learning HTML in conjunction with C# for school might be the best route, instead of picking between front end or back end to start with. Game development isn't my focus actually, I just think working on an indie game on my own time would be something cool to do with unity. And yea I think focusing on C# is just a better option given I will need to know it for school. If knowing C# makes JS easier to learn, I think I will most definitely be better off learning HTML a little everyday with most of my focus being on school and learning C# and building stuff with it. So yea HTML with C#, focus on going through my classes, then circle back to CSS/JS to know a decent chunk of fullstack for future employers sounds good. Appreciate you taking the time to dissect my post thank you :) 
Thank you, persistence is indeed important! 
[https://docs.microsoft.com/EN-US/xamarin/xamarin-forms/app-fundamentals/data-binding/index](https://docs.microsoft.com/EN-US/xamarin/xamarin-forms/app-fundamentals/data-binding/index) They are explaining you clearly the actual problem &amp; why data binding is useful , it's good to start by reading this to understand what we'll use data binding for. So now you should understand that one of the best things about Bindings is they keep the UI in sync with the data in the view model ( code behind ). You'll use the interface INotifyPropertyChanged so that your View can search for the changes in the View model so it can update it self if the value is changed. I recommend you to do like me , to use a Generic Method to handle the PropertyChanged event so that you can pass any type of property as a parameter into the Generic Method : `protected virtual void OnPropertyChanged(string propertyName) { PropertyChangedEventHandler handler = PropertyChanged;` `if (handler != null) handler(this, new PropertyChangedEventArgs(propertyName)); }` `protected bool SetField&lt;T&gt;(ref T field, T value, string propertyName) { if (EqualityComparer&lt;T&gt;.Default.Equals(field, value)) return false; field = value; OnPropertyChanged(propertyName); return true; }` now you can define the properties like this , by implementing in the set method the SetField generic method so that no matter if your property is an int or a string or whatever , the View will be informed by changes occuring in the view model ;) `private string name;` `public string Name { get { return name; } set { SetField(ref name, value, "Name"); } }` The generic method SetField returns a `boolean` which returns false when the property actual value equals to the new value you set on the property and returns true when the property actual value is different then the new value set on the property &amp; then the code goes on to notify the property changed event. It may sound a bit overcomplicated ik but just get the concept&amp; understand it I don't think you have to understand each fking line , you can juste copy paste this shit and edit i as you want
I agree C# is better than Java. I used Java from '98 to '03 and when my manager forced me to try .NET I was very resistant but once I finished my first project in C# I never went back. Once Generics hit in 2.0 the deal was sealed.
I would use WPF for such applications, a lot more options are available for it. 
No reason to ditch what you already know - tons of demand for full stack devs out there.
Sure. You'll want to learn front end stuff eventually, but I worked at a job for four years writing code that I can almost guarantee you interacted with if you live in the US, and there was never one line of HTML, JavaScript, or CSS involved, because it was all server side coding that interfaced with apis. It was actually the most challenging work I'd ever done. So go ahead and focus on c#. There's a lot to learn and you are still getting the hang of programming in general. HTML is actually dead simple once you get the hang of it, as is basic SQL, and you'll likely need both in your career, but you don't have to learn them all today.
That's true and I don't plan to abandon it completely, just that I should shift focus on backend for school purposes. Full stack is the end goal really, but landing the first junior position or internship is the priority. Thanks!
That's the thing, I haven't heard of anyone not enjoying working with c# and all have reported positive experiences which I think is important when first learning. Keeps you consistent!
Quick questions: - Is setOfThings a class you defined, or a class from a third-party library? - Does setOfThings have event handlers? I ran into a surprise working with EWS Managed API's ItemId class. I figured an ItemId is just a unique ID and a change key, so it shouldn't take up more space than a simple string. Wrong. ItemId has events, and the hooks placed on them by the API were causing the Item objects to stick around too.
Should post salary range.
I would say, yes, lean C# but don’t stop learning front-end. Web development is really in demand these days and it will be a valueble skill. Development for the browser is really tied to a language (html, css, js) while C# in most contexts is replacable by another language so don’t tie to C# too much. Note that some important knowledge about programming about how to setup an application and write clean code applies to any programming language. Every time you learn a new language it becomes more easy to learn another language. But for now, learn C# + html, css, js and have fun!
All those at the same time? Wouldn't it be better to Focus on C# and HTML while going through school courses since I need to understand C# well to be prepared for the last few classes using C#? I could then circle back for css, and js. I just learn better when focusing on one thing at a time usually.
Well focussing on one thing at a time is always good, but you can switch like do one day of html css, js in a week. If you have an ASP.NET application you’re going to have both anyway.
Ok, sounds good. thanks a bunch!
Agreed. C# roles are at most 10% desktop and services, 90% webby. You’ll need to keep abreast of the current MVC stack used in the default visual studio projects, as that will be where the majority of projects will be built from. That includes the JS libraries used. That being said, .net core is having a good try at disrupting this, so there’s always options to focus on service or web once you’ve got a generalised spread of experience.
I found that [Lumia Imaging SDK](https://msdn.microsoft.com/en-us/library/mt598502.aspx) works with UWP applications and it has a [ColorSwapFilter Class](https://msdn.microsoft.com/en-us/library/lumia.imaging.artistic.colorswapfilter.aspx) that might be of use. But it is still not clear how to have a class with an input of Bitmapimage, old color, new color and an output of a new Bitmapimage that can be used ...
Cheers for explaining, what is &amp;&amp;?
Thanks I'l give this a go!
Don’t abandon the front end. If you work with MVC, you will need to know front-end development, and the more you know of it, the more useful you will be in building things like user interfaces (UI) and enhancing the user experience (UX). Even if you can’t design worth a damn, good HTML and CSS knowledge will allow you to *implement* a good design efficiency and effectively. However, the move to C#is a very good one. The front end is absolutely saturated with developers, which is hammering down wages for everyone except the top few percent. As such, focusing on the backend with C#/MVC5/MVC Core will be a most excellent choice. You can make yourself even more useful if you do a detour through database design (and especially being a DBA) as well as systems administration (knowing how to set up and run the servers on which a C# application will run). Good DevOps people are very hard to find, and if you have a strong core in C# with decent DBA/DevOps experience, you will be quite valuable.
I'm gonna give this a read, thanks!
One word... Blazor
DevOps does seem kinda interesting as something I could look into doing further down the line. I agree it does make one more valuable. Thanks!
Ohhh, yeah right, thanks. Although, I've canceled development on that mod, since I wanna add so many features and there won't be enough keys for them (and it would be so fk hard to remember all of them) so I'm now working on an in-game trainer, so anyways, I won't make it display if it's true or false, there will only be a checkbox. Thanks tho :)
Oh don’t you? Okay
Protip : because I like you to. Go onto meetup.com and attend your nearest. Net user group. Ask them the same question plus what their projects are. Attend it regularly. Insta job. 
So I just tried with a LinkedList instead of a List and my ram usage on the subset of data grew from 1gb back to 2gb. On stack overflow there's a post that gives more details, but does also mention the backing array using up blank space: &gt; LinkedList&lt;T&gt; is doubly linked. &gt;Internally, List&lt;T&gt; is backed by an array. This provides a very compact representation in &gt;memory. Conversely, LinkedList&lt;T&gt; involves additional memory to store the bidirectional links &gt;between successive elements. So the memory footprint of a LinkedList&lt;T&gt; will generally be larger &gt;than for List&lt;T&gt; (with the caveat that List&lt;T&gt; can have unused internal array elements to &gt;improve performance during append operations.) It seems LinkedLists are not going to help me in this situation. Next up: Trying to store the strings as utf8 instead of utf16!
enter inserts a newline, which is a character. If you have a Console.ReadKey(), or Console.ReadLine, hitting enter will cause it to evaluate that as a character, exiting. This is all they are referring to. You still hit enter when you're done putting in whatever input you want to type to put it onto the buffer.
Console.ReadLine or variants will block execution until your press enter and the continue with the next line of code. Once you get to the end of your main function I’m sure visual studio in debug mode inserts the familiar ‘press enter to exit program’. It’ll then wait for you to press enter. In release I think it’ll just exit the program. If you are entering values and not seeing any results then it might just be exiting. You can always and your own message and ReadLine() before the end of the main function. You can also just run your program manually from the command line, but that’s more tedious. Post some code and we’ll be able to help better.
No, you shouldn't. You should abandon C# and focus on HTML/JS/CSS. The reason is simple - I focus on C#. If you focus on C# too we will have to compete which will drive our salaries down. Please focus on HTML/JS/CSS so I can have less competition and be paid more. As a bonus you will increase the pool of front-end devs so when I need someone to do front-end for me I will be able to hire one cheaper because of the bigger pool.
Thanks for the suggestion!
Interdasting! 
you can write your UI in WPF which is the XML markup version of WinForms I guess. Aside from that [electron](https://electronjs.org/) might be worth a look at. You can build entire apps in html/css/javascript but I suppose you could have it load in an external website through ajax that you could write in [ASP.NET/C#](https://ASP.NET/C#) instead of html/css/js for all of it.
I found this code [Here ](https://stackoverflow.com/questions/38199867/uwp-apply-colorfilter-to-bitmapimage) which seems a little simpler. I patched this code here to change the RGB channels: &gt;if (streamLength &gt; 0) &gt; &gt;{ &gt; &gt;for (int i = 0; i &lt; streamLength; i += 4) &gt; &gt;{ &gt; &gt;if (byteArray\[i + 3\] != 0) &gt; &gt;{ &gt; &gt;int b = Convert.ToInt32(byteArray\[i\]); &gt; &gt;int g = Convert.ToInt32(byteArray\[i + 1\]); &gt; &gt;int r = Convert.ToInt32(byteArray\[i + 2\]); &gt; &gt; &gt; &gt;int rB = ((((b \* replaceBlack.B) / 255) + (((255 - b) \* replaceWhite.B) / 255)) / 2); &gt; &gt;int rG = ((((g \* replaceBlack.G) / 255) + (((255 - g) \* replaceWhite.G) / 255)) / 2); &gt; &gt;int rR = ((((r \* replaceBlack.R) / 255) + (((255 - r) \* replaceWhite.R) / 255)) / 2); &gt; &gt; &gt; &gt;byte blue = Convert.ToByte(rB); &gt; &gt;byte green = Convert.ToByte(rG); &gt; &gt;byte red = Convert.ToByte(rR); &gt; &gt; &gt; &gt;byteArray\[i\] = blue; // Blue &gt; &gt;byteArray\[i + 1\] = green; // Green &gt; &gt;byteArray\[i + 2\] = red; // Red &gt; &gt;} &gt; &gt;} &gt; &gt;} Now I am stuck somewhere new which is good... how do do I convert a WriteableBitmap to a Bitmapimage ?
Bob Tabors Microsoft classes are where I started. If you want to learn web, don’t stop learning front end. A good “project” that could land you an intern or a job would be a full Mvc site...could be a little more practical than a console game or something.
Mobile engineer in the C# sub? Xamarin?
Definitely learn both. I was the opposite of you at first; got out of school and knew C# pretty well and pretty much nothing about HTML/CSS/JS. After my first job and then seeing how many companies wanted a Dev for ASP.Net, you bet I had to end up learning front end anyways. So I feel like it’ll all come full circle. 
I'm assuming Weather is an enum and it's a bug that it accepts 0, pass an enum value to it instead.
&amp;&amp; is the And operator.
&gt; &gt; &gt; That's fine. I view C# as a superior language, although Java is more widely used (not that there's any shortages of jobs). That said, it ultimately doesn't matter one bit because the languages are super duper transferable. There's probably no two other widely used languages that is as easy to move between. Yup, that's why I love both of them. I learned Java first and then learned C# and I honestly go back and forth between which I prefer. They really are quite similar which works out great for me.
I would say that the MVA course is good for the basics of C#, but the breadth of the ecosystem around it requires several other tutorials to master. Good luck!
Not WinForms, but you can make a [UWP app with HTML + JS](https://docs.microsoft.com/en-us/windows/uwp/get-started/create-a-hello-world-app-js-uwp)
+1 on going to a local .NET User group. Everyone should go even if you aren't job seeking. There are lots of good discussion topics and networking to be done there. Most of them have doorprizes/giveaways at the end of each meeting.
Yeah :P
&gt; Rule 1 is not enforced in this thread Is Rule #34 enforced? If so, I've got some C# videos I'd like to share.
As a back-end C# dev working on web based stuff, I think its important to have a decent understanding of html, css, and javascript. Even if you don't create new front end stuff, its good to be able to reuse what other have made.
So you are not actually looking for a C# dev but for a JS dev who does Ionic?
If you dig into the history of HTML and its origins, it was intended as a markup language for text based documents. If you compare HTML with something like XAML you can see that XAML was intended to be used to build applications. Ofcourse, HTML5 is much better suited for app development, and the state of the art in JavaScript frameworks makes it easy to make a web app, but there are lots of work-arounds that need to be dealt with. I don't really have any alternatives, but I'm crossing my fingers that Web Assembly (WASM) will allow for web apps to be written in a static language like C#, and to directly render to the HTML5 Canvas (or WebGL) and avoid having to do much with the Document Object Model or with the JavaScript VM (although WASM runs in the JS VM, and the Canvas is part of the DOM). 
I'm up for some hot Linq action, pass it on!
Can you use a simpler approach, like catching the error if you exceed the rate limit and then block for some time? Or are there consequences other than a failed request? Another option might be figuring out the worst case ratio of wrapper to API calls and using that as your limit instead. What you're suggesting isn't a bad idea, but it's pretty complicated. 
Thanks friend
No, learn all of it, front-end and back.
Although I haven't specifically read the books that OP lists, I have read several other Manning publications and have been generally pleased with them. However, what I'd like to point out about Manning is something that I wish all other publishers did: If you buy the print edition of the book, you get the electronic versions for free. Yes, electronic versions, plural - they publish their books in PDF, Kindle, and their own web-based "live reader" versions and you can download any or all versions with proof of purchase of the print version. For computer books in particular where you're generally trying to follow along with sample code, it's invaluable to be able to have an e-copy of the book displayed on one monitor while you're coding on the other. Or, you can copy &amp; paste from the e-copy into your code without having to re-type or download everything. For leading-edge topics, they also have a program called the Manning Early Access Program (MEAP) whereby you can buy the book before it's published and have electronic access to the chapters as the author is writing them. Once complete, they'll send you the final print copy. I may sound like a Manning shill but I have no relation to them other than being a customer. I just like to promote good business practices when I see them.
I'm just going to second what he's saying, and add a few of my own thoughts. You don't have to abandon HTML/CSS/JS if you learn the ASP.NET MVC framework. Then you can use C# and all of those things. When you're learning C#, you can combine what you've already learned into something that has a real-world application. Just be sure you don't overwhelm yourself. School assignments come first. :)
I’m not sure about the scope of those MTA certificates. But assuming he has a general knowledge about the topic, he could be definitely candidate for some kind of trainee/associate position. If he is persistent, he will rise with those practical experiences. Good luck! 
Sadly I don't really know about WPF since at the uni we are being taught WinForms (not very surprising, right?) but I still managed to use it combined with /u/prajaybasu's advice using ElementHost. No seeking and pause/play function yet, but it works for now. So thank you for your comment! Also, I really should get into WPF.
I ended up using ElementHost combined with MediaElement as suggested above. Still, I might later change it to FFME (or just replace the entire WinForms app with WPF). Thank you very much for the advice!
It is haha.
There are 2 different positions. One is C# only. The other is C# and JS full-stack mobile dev.
Might try asking in /r/cscareerquestions as well.
&gt; That said, my experience with that was that it was rather buggy and it doesn't actually reuse as much code as you'd think I haven't had the buggy experience; but I think the code-reuse comes down to OS specific things; You have to do X the Google way for Android and then do it again the Apple way for iOS. You do have to think a lot more about where you code lives to get the most reuse out of it.
It's been a while since I've used it and I'm sure it's improved. Most of the issues I remember aren't with the framework/API, but rather the tooling was buggy. Especially the iOS side. 
Uh, I haven’t. Why would you NOT list a skill??
Speaks pretty much against that guy that he's unable to ignore such a bullshit advice from his tutor. List all your skills you have.
It's not that I wanted to learn it over any other language, I just thought it was a good starting point, but this was before I decided on getting my degree first where I'd be using a back end language (Java or C#) through some classes. Anyway, thanks!
Ok thanks! Thinking of doing HTML in Conjunction with C#, then circle back for the rest of front end.
Thanks!
Copy that!
This is the plan, and I agree, thank you!
I was slightly wondering that, if it's some form of ivory tower snobbery for what the rabble use on a day to day basis.
I don't list Java on my CV because I use __superior__ C#.
That's just as dumb.
Of course it's Ivory Tower elitism. It's incredibly common everywhere, and comes in so many flavors. The Flavors that matter are ones biased against Oracle, and to a lesser extent IBM. Oracle because they bleed dry anyone that tries to escape them. IBM because they're really not a company anymore, just a shell for contractors and researchers to hide behind while the rest of the organization makes money from mismanaging projects.
Agreed. I could understand not wanting to use Java after experiencing the loveliness of C#, but at least let the recruiters know you're not just a one trick pony
C# is the new VBA?
disclaimer: never made a hiring decision in my life, didn't know what an mta cert was before you asked. that out of the way: https://certnet.de/mta/ an mta certification seems rather broad given that table of contents. My guess: He'll probably want to work towards a more specialized cert in one of those areas since he's in his late 20s if he wants to work primarily in programming.
obvious joke. should I put a \s at the end of it for you?
&gt; Last I knew, they don’t have any formal packaging system, whereas we have DLLs/exes. As far as I know, JARs *are* the formal packaging system. Where they’re lacking is an established and universally accepted repository of packages in the veins of nuget.
&gt; Why would you NOT list a skill?? Either: 1. You don't *want* to be hired to do more of it. 2. It's not (at all) relevant to the job you're interviewing for. I struck Crystal Reports from my resumé because I'd had all I cared for from an early job. I don't list my ability to drive stick because it's not relevant to software development positions.
https://blog.expensify.com/2011/03/25/ceo-friday-why-we-dont-hire-net-programmers/
derp
to be fair, his user name does mark him as a n00b. .... .... YES - /S. (sheesh)
If you mean widely used and never gonna die... then yes.
That's the article I was thinking of as well. I'm wondering if his adviser was considering those types of shops when he gave that advice.
Wow, that must be the stupidest thing I've read all month.
I removed asp.net webforms from my resume because I'd get a handful of recruiters a week pitching jobs maintaining legacy apps. I really don't want to do that. 
I well the point here is it's pertaining to his field and can increase how valuable he is to a company. It was a skill that was relevant in this case. Obviously you're not going to put shit on there that's not relevant to the field.
FYI I'm still amazed VBA became so big. Don't take offense (I did learn original basic (like dos/commandline good old days) Pre windows and I know it very well. 
When I was just out of college I omitted COBOL from my resume despite having taken two semesters worth. It was 1998 and I really did not want to be put on a Y2K clean up job. I know that to this day there are very large, very profitable companies that pay lots of money for that skill so maybe I missed out in a certain sense. No regrets though. 
Even if C# was somehow frowned upon in general it makes 0 sense to omit it when you send your CV to a company which is doing C# development
Any reporting stuff, like CrystalReports (I don't know if it's still alive), just skip it. Don't list it and don't tell war stories about it even when very, very drunk. It's like sewer stench, once you get it, you'll get frantic calls eight years later "hey you solved that one thing..". Just no.
"Curriculum Vitae", a resume.
&gt; but that his tutor advised him not to put it on his CV because employers wouldn't be interested in it. Does his tutor wear a fedora and every now and then rants about how this year is the "year of the Linux desktop"? Yeah he needs to fire his tutor, perhaps see if he can get any money back. 
That was one of the dumbest articles I've read in my entire life, and that is definitely a company I will never look for work for. Wow, that was a painful read. How can you write so many negative points, and not give any example of what you're even talking about? I can't make a 1.7oz burger? What the fuck does that even mean?
I've noticed this before. Some teachers seem to have an aversion to anything Microsoft does because they're from a time where that was a legit standpoint if you were into open source. It's a bit outdated nowadays tho.
I have, aside from many more skills on the bottom of the list, intentionally of course, Java listed. I keep getting requests for Senior Java EE (or smiliar) positions. That’s a reason for me to remove this particular skill. (- it’s just not remotely related to any of my favourite languages)
It's bullshit advice for the specific case of C#, but I prune my resume of what I deem to be "not awesome" technologies: I know PHP but haven't worked with it in years and I sure don't want a job doing it. Same goes for Drupal and a handfull of other CMS systems. 
The gist of that article seemed to be that MS makes tools that allow you to do a great many things quickly and easily, but every now and then you hit a corner case where you can't use those same tools to solve the problem. Therefore, the MS tools are inferior... It's a bit like saying that if you're a back-hoe operator you're inferior since there are times that it is too big for a specific task and can't be used. Therefore you should stick with a shovel since that will always work no matter the situation. Yeah... F that. When the job is to move a 10 ton pile of dirt out of the way and you hand me a shovel my next move is going to be to hit you with it.
I'm starting a startup right now. We are working entirely in .NET
A lot of times they are also way out of practice and lean toward idealism rather than realism. Not every company hops on the hot language bandwagon. Plenty of companies still develop using older, solid technologies because it’s an internal app that needs to work and not just look pretty. Personally, I’d take good old fashioned .Net, C# and Ajax over Angular, Typescript, Rails, etc. Might not look like it’s cutting edge but it will work. 
That's even funnier as C# is on Linux too, now
Yeah, I think most of his points *against* .NET are in fact *in favor* of .NET. I had my fair share of "how can such easy thing be so difficult" moments, but definitely not only in .NET world.
I prune my resume of technologies that I don't want to ever work in again. I know VBScript. I know ASP Classic. I do *not* want any job where that would be required of me.
I actually did some googling and found lists of collections, some with descriptions. However, I wanted to get actual advice from people who use these instead of trying to put the more vague information I was finding. As it turns out, I suspected the Queue, and I guess I was right, so thanks!
It was a general question. There *are* specific reasons for not listing specific skills. They don't apply to the individual being discussed, but could to the rhetorical 'you'.
You misspelled VB6
Our app started with beta 8 of ASP. NER cora and since then we use the built-in. There were some issues when injecting enumerables aka all implementations of given interface which we use for some kind of plugins but this was fixed with v2. So far there was no need to use any 3rd party DI. Anyway it should be possible to do it anytime. No need decide when you are starting with the project
The DI that comes with ASP.NET Core is fairly primitive and only supports the bare minimum. If you ever want something like modules, facades or even simply named dependencies, then the basic DI will not help you anymore.
"If you can't perform, teach."
What an absolute cockwomble.
No problem. But btw do you want to iterate over the list and still have the list with all the elements or do you just need it once? Because if you need it afterwards a queue would be wrong because you have to remove one element to sccess the next one.
Well you want to keep resumes at a certain level...it’s valuable to include all major OOP languages you are proficient with, but not important to include small frameworks within that language because you’ll just clutter it up.
In my country companies that don't work with C# kind of have some "prejudice" on it. It's not like it's a bad skill or they will not interview you if you have C# in your cv, but they don't like MS even with this whole open source thing going on. The only one they accept from MS is Visual Studio Code. It's like most of the companies do not consider using C# because past Microsoft.
https://abstrusegoose.com/323
&gt; Speaks pretty much against that guy that he's unable to ignore such a bullshit advice from his tutor. I think this is harsh. How would a person, coming straight out of college, know this is bullshit and should ignore the advise of the likely few who's input they've heard from? I'm not suggesting that the tutor was correct (I totally agree that he's way off-base), but holding this as a mark *against* a green candidate simply because they followed a direction is as narrow-minded and biased against the candidate for no good reason. Now if they were to argue with and defend the tutor with an some kind of empty argument with the interviewer, THEN I'd round-file their resume straight away.
There was a lot of Drama related to that article and especially since the guy who wrote it had to hire .Net dev's a few months after. I read about this in a different Reddit thread a year or so ago.
Academia is so far removed from the real world, it's actually quite scary.
If you hire the guy, you might make a friendly call to someone at the school about how a candidate with the skills you were looking for had been advised not to put them on the CV.
Did you hire him?
If this was the guy's first programming job interview, I can't blame him for not knowing what to expect. Someone in a position of experience above you gives you advice about the "real world" that you know nothing about, what are you going to do?
The question is whether it was deliberately horrible advice.
just use a normal list&lt;string&gt; and iterate it with a foreach loop. Theres no need for something special.
I think that works for me. I need to add strings to this collection as I process them, and then go through them once to add to a printout. There's no reason for me to access them a second time. Thanks for the additional info!
I've definitely had language polemicists suggest crap like this, and I've had associates and jr. associates who have told me they were told the same thing. It's not always about C#. I had one told not to mention Javascript experience, because it would "look bad". Another friend was told not to mention Python. Obviously, this is totally crap advice, and it's coming from people with either no hiring experience or malicious intent.
The built in one is pretty simple. You may out grow it quite fast. But if you only need basic interface to service mapping it's fine.
You're welcome :)
Maybe his tutor wanted him to fail on this interview and thought that maybe this guy would pay him for more lessons. Otherwise it makes no sense. Why would anyone want to hide a skill while looking for job? 
Couldn't you just decline the jobs?
Same reason I removed Sharepoint from mine...
you can iterate through a List by index... instead of a `foreach` just do a regular `for` bounded on the length of the list. unless you really do have a huge amount of data, like say idk, 50,000 small strings from your first big string
I get this. My current position is using a gross WebForms based CMS. The project I'm developing ended up having to be separate from it because the CMS devs have incredibly poor and mismatching documentation, and the entire thing is so finicky to work with. They have their own weird version of Razor that puts the code inside HTML comment tags. It's pretty annoying, really. 
I removed SharePoint from my resume. 😶
It could also be the way the candidate interpreted what the tutor meant. I have heard some advice saying “don’t put x in your CV because they don’t care”. Then later on the same person will say it is because you should put y in it instead. For example if the context of the CV was built around Web, people would say don’t put C#, instead put JavaScript. (Yes, someone gave me this advice) I put both on mine. It doesn’t hurt if you know it and it is relevant to the position. 
C# was created around the year 2000 and the Mono project was started in 2001. Mono reached 1.0 in 2004 with C# 1.0 support. C# has been on Linux for almost as long as it has been on Windows. 
Those who can, do; those who can't, teach.
Ok in this case it's your choices to not show this skill because you don't want to. It's the same to me with Python,I don't really like Python so I don't want to show some knowledge I got on it.
As someone currently digging to install an above-ground pool (which is unfortunately at a slight incline) with a shovel...I feel personally attacked.
One of the industry guys I sent my CV to mentioned he just ignores lists of skills. So just literally a list of skills might not be the best idea, but listing it with places you've used it is going to be better then not listing it. 
I can, but why would I when I can just remove all future unwanted prospects? 
I don’t put Sitecore on mine... *shudders*
Tutor was anti microsoft probably.
All employers need to look at candidates retrospectively like this! 
Not the kind of job that I wanted and I didn't want to use SharePoint as a development platform the way 99% of companies are using it.
Probably just a fanatic anti Microsoft tutor then or some web dev Koolaid drinker. If you have a skill (and it is something you would be comfortable being associated with in public), put it on the CV if it is relevant. If you're a programmer and you know a language, put it there. I am surprised he actually listened to the tutor.
If you decline the jobs, you get 6 new recruiters in your inbox next week. If you *don't* decline the jobs, you get 6 new recruiters *and* followups from the last 6 in your inbox next week. It sucks either way.
StackOverflow's [2018 Developer Survey](https://insights.stackoverflow.com/survey/2018/#technology-programming-scripting-and-markup-languages) puts C# between Java and C++ in terms of popularity. Either his tutor has an axe to grind against Microsoft technologies, or is just ill-informed about industry practices. Can't think of any other reason to advise somebody to hide proficiency in a popular, well-supported programming language. Even if I were hiring for a team that worked in Java, C# would look good on the resume to me. I think experience with one translates pretty well into the other (different ecosystems, sure, but they're both OO languages with C-like syntax).
Oh, definitely. I would never tell someone not to list a skill because of my own prejudice; it's their career, not mine.
And 5 months later... https://blog.expensify.com/2011/08/30/expensify-hiring-a-net-programmer-seriously/
Hmm as someone who likes web forms I wonder how much above average pay I can go maintaining legacy web forms projects...
Because someone might ask you to write something in SharePoint
Ridiculous not to list it. Whatever. 
I'm *really* good with VBA. I got 1337 skills when it comes to automating Excel. Gained them over several years as a citizen developer at a corporation with a fairly standard IT policy (e.g. anyone outside the tech group were restricted in the applications they could run). I hate the language. I am absolutely not going to put it on a resume. I could be the best, the very best at VBA. I could be offered twice what I make now. I am not interested if it involves VBA.
Using Crystal Reports now, it works but I don't love it by any means. I have been able to do most things I have set out to do and I probably have created what would be some fairly complex reports. Crystal Reports was super painful to figure out and many report additions I have implemented always felt more like a hack/work around than a Crystal Report feature. I use sub reports, formulas, sum's, groups, suppression, crystal report viewer, direct print, export to PDF, 2D Barcodes, images, etc. I use it to create standard 8.5x11 and custom sized labels. If I had my own personal hell it would probably be creating custom labels and troubleshooting when they don't work (brother label printers). Are there any good alternative reporting programs?
I know youre young but generally people use common resources like faqs and sidebars for common questions Therefore please see side bar. I agree with the sidebars recommendations. 
Where are you located, I've got a potential job opportunity for you.
Pretty good. Really. It sounds like the 4 th circle of hell to me, but you be you, go make bank!
Seriously not a bad idea. The only downside is once that work dries up (if it does) your experience is years behind.
Yeah.. bur now it's *reallly* on Linux
Sorry I joined Reddit literally hours ago. Could you potentially link me a sidebar? Thanks for the feedback.
Being an open source project and not always on par, it could be argued that it was still mainly a Windows language. From. NET Core there is no argument left though.
https://old.reddit.com/r/csharp/comments/97wiih/any_advice_is_appreciated/e4bi13o/?context=3 Look to the right Idk if new site stule shows sidebars
FIFO vs LIFO 
Ahhh right. I see it now. Thanks a ton!
Unity has always been my goto 
I think the creators of crystal report saw a market that was filled with people who needed a reporting tool to hate and just went for it. They were later acquired by SAP who doubled down on the idea and made it 10 times worse. At least they are sticking to their guns and are now among the least favorite tools out there.
To 1: Yes you can use vscode for that. You will have to use the command line to build your app then. Some people (including me) still prefer visual studio 2017 for compiled languages like c#. VScode is just a text editor. (Great for web development) To 2: If you mean if it is relevant today than yes! ASP.NET Core certainly makes sense to learn. But I would not go ahead build a frontend with it. No razor cshtml or aspx. For the frontend I would always use a JavaScript or typeScript framework like angular. Razor just hasn't that much of a relevance I think, so I would worry about longtime support and development. (That being said trends seem to switch pretty fast in web dev)
Yes! I've working with sitecore for the past year and I know that if I put it on my CV I'll get calls. But man, what a complete piece of overpriced s#it. Would love to share some war stories
Don't do 3. 3 is a bad plan. If you're going to do it make sure your down matches perfectly. I prefer attributes where possible. It's particularly handy when you navigate to definition and can see them. Plus the model building method can quickly get huge and unmaintainable.
With a PowerShell port too!
Imagine having 5 parameters in your constructor. IRepo1, 2, 3, 4, 5. Depending on your application, you might need to only use 1 or 2 of the repos at a single point of time. Unfortunately, upon hitting the constructor of your class, the DI container will resolve every IRepo. Lazy&lt;IRepo1&gt; would basically be an object with a Value property. Value will resolve the type on the first get. I would give an example but I'm on my phone. Too much to type
&gt; Speaks pretty much against that guy that he's unable to ignore such a bullshit advice from his tutor. Can you blame him, though? He's never been in the job market before. You can't tell what advice is bullshit and what isn't until you have some experience.
Thanks for your reply! Yes, I was also worried a bit about [ASP.NET](https://ASP.NET)'s relevance in frontend (knowing that there are so many frameworks nowadays).
I concur. Learn Core for your API and then a front-end js framework to read data from it. Vue and React are my favourites currently but front end frameworks change with the seasons!
The way my resume is arranged, it's literally just 4 characters in a section where I list programming languages. ", C#"
Look at this bigshot that actually gets followups from recruiters.
Only add it if you can do it. If you leave out useful abilities, you are selling yourself short.
Leaving this here for completeness (I don't agree with it in general, but there's always people who fit): Those who can, do. Those who can't, teach. Those who can't teach, teach teachers.
It's definitely a regional and industry thing. I went to college near an urban area, was raised on java with an education oriented towards becoming some kind of bohemian startup app service developer like most of my classmates. Moved home to my more manufacturing-oriented hometown, job market is nothing but full Microsoft stack. I think a lot of it has to do with patterns of how the company started. From what I've seen in listings, fortune 500 companies that adopted computers into their core business models early tend to have a lot of legacy code in the old standards like C and Fortran for IBM systems. Then there are companies that start as startup software companies. These tend to use all of the languages with the goofy names and colorful logos deployed to linux. Then there are companies that existed for a while and didn't really need to immediately get into software as a core facet of its product. This is where I am. We just develop tools to use with Windows PC's. There was a wave of C++ applications in the late 80's through the 90's, then it shifted to .net after that started rolling out. I think if you are creating scientific calculations and financial infrastructure, it's unlikely you will see much newer than C++. If you are working on stuff the kids use to send pictures to each other, it's likely you are going to use java and a bunch of esoteric languages that are a bit embarassing to say aloud. If you are working in a cubicle making stuff for people in other cubicles, it's probably .net. I could be wrong, it's just what I see.
May I ask why you like WebForms? Do you like or prefer it over more modern frameworks such as MVC or Web API?
"I see here you have PHP. We have this 4 year old WordPress......"
Yeah, I think there's a lot of truth to that. Though it might also be the whole "we're awesome" college mindset vs the "oh wait, nevermind" realisation once you hit the job market. When you're coding for the sake of coding you can learn all these cool esoteric languages that have only existed for 6 months and whose author is also your friend's dog walker. But you hit the real world, and anyone who's hiring wants the reliable stuff that's been around for years, definitely works, and will probably still be relatively easy to find people who can support it in years to come.
you should be language agnostic if you are hiring a kid fresh out of college, especially if they have Java exp wrt c#
We're finding this too with a lot of the guy's we're interviewing. Been seeing people who got 1st class honours in their CS degree, but take 20 minutes to write a simple function that checks if two strings are anagrams of each other.
&gt; They have their own weird version of Razor that puts the code inside HTML comment tags. It's pretty annoying, really. Sitting here thinking, oh, that doesn't sound so bad. Sounds like ColdFusion or the old IIS VBScript. Then it finally dawned on me that it's not code inside of `&lt;% %&gt;`, it's inside of HTML `&lt;!-- --&gt;`. Good gods, it's past time for you to go job hunting.
The Mono compiler has never lagged really far behind with language features, it has mostly been an issue with libraries and frameworks. Also, while the compiler was always pretty fast to catch up with .Net. MonoDevelop, the primary IDE for Mono did always lag far behind with language support until Roslyn was released as open source. Mono has also been ahead of .Net in certain areas. Ahead-Of-Time compilation for C# is only now becoming a thing in .Net, while Mono has had it for a long time. The biggest reason C# has been mainly a Windows language is because it was created by Microsoft and most of the Linux community flat out rejected both C# and Mono because of that.
Looking for Junior C# Developers with Unity Experience and experience with networks or multiplayer games Pay up to 45k Central London PM me
Believe it or not, Crystal Reports was a breath of fresh air when I first started using it. I came R&amp;R Report writer and Quick reports in Delphi. After using Crystal Reports it was an amazing tool compared to the past.
&gt; It's a bit outdated nowadays tho. I'm still just cautiously optimistic. SQL Server in Linux, .NET Core, and VSCode are good signs. But there's also a side of Microsoft that wants to push UWP and Microsoft Store apps, or really expensive software and lock-in. And it's not been all that long since the SCO vs the world nonsense that Microsoft funded.
Sounds like your test is pretty far removed from the real world too
&gt; I think experience with one translates pretty well into the other It does. I went from Java/Spring to C#/MVC a few years back. Learned the basics of the syntax in a few weeks, took about a year to feel really productive. Add on another year or two (lots of books, videos, PluralSight) and I'm running slightly ahead of the office pack.
We're still seeing people. Though if we were going to turn this guy down, it wouldn't be because he didn't put C# on his CV
Stop using EF migrations and switch to something smarter like FluentMigrator. Gives you fluent syntax and the ability to just give up and run a SQL file that you embed in your project (after the DBAs write it and test it in a copy of the database). You can write your migrations defensively to only add column X or table Y if it doesn't yet exist. EF migrations are okay when doing greenfield development, but fall down once you start getting multiple developers in play and/or DBAs. Note: I dislike defensive migrations. They can fail silently. I only use them for performance indexes, or in cases where they are absolutely required.
Would you like to borrow my back-hoe?
I have 2 data sets and need to know if they contain the same items is reasonable though. Strings are just simple datasets for that problem.
Sun sponsored a lot of universities around the world. They gave them a ton of Sun workstations and servers, and basically pushed them to promote Java.
The important thing is that you survived the experience, and you're stronger for it. You're a brave soul. 
I was the first person on my team to learn C# and Asp.net. Everybody else was doing classic ASP. They finally decided to start learning Asp.net, in like 2016-2017. And I pushed them towards MVC. They ended up settling on webforms. To this day, I'm looking at them like WHAT ARE YOU DOING!? They just don't understand, webforms is going away, and it's a really bad idea to be learning it this late in the game.
&gt; 2. It's not (at all) relevant to the job you're interviewing for. 
Wait what? I think I still remember enough COBOL to pull in a couple hundy a year.
Some one found one of my old resume that listed 6+ years of labview development. Now that's what I'm stuck with after doing c# for a few years.
My favorite part that a commenter pointed out is that he compared .Net to the most successful food chain in the world.
Removed: Rule 4. As mentioned, there are learning resources in the sidebar, and you can also check out /r/learnprogramming and /r/learncsharp.
What's the alternative in 2018? I've gotten tossed into it for a new job and I'm wonder what people are using now instead.
That's from 2011, but even in 2011, it simply wasn't true. It's the typical "I don't understand it, but the 5 minutes I spent looking at it, most of which was reading articles from within my echo chamber, confirmed my preexisting bias" garbage.
Hah, not sure why anyone would suggest that. I've certainly recommended leaving tech off your resume if you're really not interested in working in it (I leave VB.NET off my resume for example), but if it's your main language? Seems dumb.
SQL Server Reporting Services if you are using MSSQL. Jasper reports for pretty much anything else. 
yeah, but if you are interviewing cs grads, asking them to do silly programming puzzles isn't very helpful
A Facebook recruiter told me to put ASP.NET instead of C#. She said that a lot of recruiters don't actually know what C# is and assume you're old-fashioned if you have it on your resume.
There are still plenty of Microsoft only shops, especially when dealing with Enterprise Applications. C# is the go to language there.
I've been programming in Microsoft's ecosystem my entire career (starting with MFC in the 90's, then moving on to WinForms, and finally WPF). I never made the jump to UWP, and so far there really has been no need for it.
I use ssrs at work and always wondered what the alternative was for non mssql, thanks for saving me a few minutes of searching. 
I would imagine the simple winforms style event model for one. It's one of the main reasons I liked it when I was using it, like 10+ years ago.
I have often wondered the same thing. We use SSRS and sometimes encounter an annoyance and think about looking for an alternative without trying real hard. It's sad to think this is as good as it gets.
Those who can teach those who can't.
Similarly, I had not tried my hand at UWP until earlier this year. If you have WPF experience you're in good hands. UWP XAML is only slightly different, and the new stuff actually makes sense. This was for a line of business Enterprise app that needed hardware barcode scanner support on desktop and mobile. Once Panasonic's crap documentation was sorted, it ran on desktop and mobile with almost zero extra effort.
I personally just can't get behind that anymore. I got into MVC for a bit, then made a hard right towards microservices and Web API and honestly couldn't stand having to support a legacy WebForms application. That said I'm working for a Rails shop now.
Okay. Hear me out here. I code C#, or did, for a number of years. There is something to the MS ecosystem which lends itself to staying in it, and only in it. When I speak to old colleagues their default DB is always SQL-server. And it seems that is just what they do. There are many good databases out there, SQL server requires a license (or if you don't have one your DB is limited), and for 99% of applications, mySQL or Postgres would suffice (and this is in .net, Postgres is always good enough) Every problem seems to be solved with .net. And I don't see that anywhere else. Except maybe Java shops. Deployment is always on IIS, there is no discussion, because that is what all the docs told them to use. Sure you find the odd guy who uses nginx to deploy .net core apps, but it seems rare. Also, since everything is baked in, it feels like innovation is stifled. If I use PHP, Python, Golang or almost any other language. People building web-frameworks with different strengths, always trying to push the boundaries of what can be done, and how. There might be some other web frameworks for .net, but people seem to just use the one provided. As an observation .net developers seem to be .net developers. Other developers are harder to box. They might use Python for this specific task. But there is a good chance they know 2 - 4 other languages as well. 
Can't speak for GP, but I read it as the opinion of Microsoft (re open source) was outdated.
then what was I using for C# on Linux a decade ago? 🤔
I can agree with the programming part because it shouldn’t be based on syntactic knowledge, but I would say problem solving is good to check still even if it is silly problems like these because you have to boil down the problem into what actually matters. Happens a lot in the real world when you get, say, a business analyst creating a bunch of stories for a sprint. You have to be able to know how to boil those request down into something you can code; otherwise you won’t know what you’re getting into and your estimates will probably be inaccurate. Like the example of the anagram, you can boil it down into simple components of two lists of chars, an iterating loop that compares the lists and a true or false return based on the rules of what an anagram is. The anagram is the business logic and the rest is how you would work in a feature related to that business logic. At an abstract level it’s not as unrealistic as it first looks.
I don’t have any languages in my resume. It’s just projects I worked on. 
My friend told his python professor he is currently learning c# and she laughed at him. I imagine it's the same people who type M$ when referring to Microsoft
Ugh. PowerBI all the way. SSRS is old and full of bullshit.
I'm not who you were asking, but I also like WinForms. I am typically a back end dev and anytime I've needed to make a few pages I just do webforms because its easy. I don't prefer them over anything but I don't hate them. They're easy to me That being said, I've recently moved to .net core and razor pages are really awesome. Everything new I make going forward will be razor
No, it is not web development. Winforms is a framework, to develop desktop apps. If you need to develop desktop apps using HTML/CSS/JS you need another tools. 
The only skill-related things you shouldn't list on your resume/CV are **1)** things you don't have experience with and **2)** things you don't ever want to work with again. 
No, rails is on its way out. It was the big thing before node.
My friends python professor laughed at him when he said he liked c#. I also said once in a twitch channel that I primarily use c# and multiple people replied with "lul c#, what is this 2004" then went on to talk about Linux. They didn't know what .net core was and when I explained it they said it's "just m$ trying to stay relevent and it won't work". People are ridiculous sometimes
This is just some idiot tutor giving advice when he shouldn't.
I chose to skip WPF/UWP in the hopes I won't have to learn it. I went from WinForms to ASP.NET and so far it's working out. Hopefully that won't come back to bite me
The nice thing about a queue is that it explicitly declares intent; it's the appropriate collection to use in this case.