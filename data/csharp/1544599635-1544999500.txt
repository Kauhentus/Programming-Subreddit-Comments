&gt;The endpoint is exclusive, i.e. element 4 is not included. 1..4 is actually a range expression I still think they messed up the syntax here. Shoulda used what I believe Swift does: `1..&lt;4` is a bit ugly, but makes it clear that your endpoint is _less than_ 4.
&gt; Nullable reference types are great (null being the billion-dollar mistake and all), but the problem is that people will rely on them, even though the analyzer isn't airtight, thus leading to nasty NullReferenceExceptions. Yes, there's a risk that people will be overly confident. But the analyzer will get better at this, and while individual people also will, people as a whole will not.
thanks bro ,i want to make sure of something . so i will build an app of type asp.net web api ,right ? also can you advice me any tutorial / course to get into this stuff of building apis using c# . thanks man \^\^
No, the C# spec (ECMA-334) section 12.7.9 clearly prohibits thinking about the language outside of regulated working hours, so this doesn't happen to .NET developers. You can find a comprehensive list of which languages are affected by this issue at https://en.wikipedia.org/wiki/List_of_programming_languages_that_programmers_think_about_after_work.
I've solved some interesting problems while in the shower.
I'm a .net dev and I do. I don't think it has anything to do with the technologies involved. It is more a state of the mind. I don't like to keep a problem/puzzle/issue (name it as you like) unresolved. Plus, it just happens that in some more relaxed environment (like playing with friends), the mind is less burdened and can sometimes make some unexpected connections. You should not be terrified. Unless you strongly and actively look for a bug solution outside of office time (which in that case would be a bit unhealthy), you should welcome any hints your mind is providing. A good reaction is not to right away start your IDE and work on it. Instead, grab a piece of paper, write your thoughts, maybe think about it for 10 min, write more and then go back to your normal activities. Next day at work, go through your notes. Happened to me a few times while hiking on the weekend. I did not have anything to write on at that time, and the next Monday I have no recollection of it. So now, I'm always bringing a A4 sheet of paper and a pen :)
Yep ... I have literally had the same dream about a particular bug with a old system I use to support, it often reoccoured in the same night.. So to answer the question yes I do sometimes bring it home. I also write code for fun.. not everyone understands but I'm chill with it and so is my (understanding) wife.
That sentence applies to most situations, but not to this one. The compiler cannot optimize data-stuctures into a better complexity class, it's always the programmer who has to choose the right data structure. Linked lists shouldn't be used, because they have a shitty memory complexity and because they're only good if you only add/remove elements at the start/end. But for these purposes, there are stacks and queues, which are probably implemented using linked lists anyway, so you don't have to use a more general linked list anywhere, except maybe in very special cases. However, implementing a linked list and a binary tree is something every serious programmer should have done at least once. If you're a good programmer, it won't take more than 15 minutes anyway.
Yep. I was having Christmas dinner in a rest home with an old friend and the other inmates. During dinner someone peed over the floor and it ended up pooling under my chair. I couldn't tell anyone about it so I mentally revised a programming problem I had. I managed to make it to the end
This.
Hi, thanks for reply. Could you provide an example?
Hi, thanks for reply. Could you provide an example?
All the time.
The amount of times I've been struggling all day to figure something out, leave work and the *second I step on the train* it clicks. That's the worst. 
This is what set me straight: https://www.infoq.com/articles/Succeeding-Dependency-Injection
Uncle Bob (Robert C Martin) thinks good programmers should do 40 hours a week of study outside of work. I am not a fan of his. Anyway, don't stress thinking about something. You're just using up spare processing cycles, or running it on a background task.
I'm not sure I like the extension methods that are supposed to find out if something is null. default(Array&lt;string&gt;).IsBlank(); That looks like it should be a null reference exception. 
Thanks for the answer, I updated the question to be more specific!
Unfortunately Unity doesn't implement this correctly, so if your using Unity's C#, you might encounter issues outside of working hours.
Try to put a breakpoint and debug. 
Already done... Found nothing
Can you put the code that is calling this `GetSatutProjet` method?
Like I said, I don't use it in any code whatsoever. It's a WCF Method. In order to see if it work, I use the debuger given with the project. And the debuger is not the problem, because all of my other methods work perfectly with it.
Yes; I do. Why? I want to improve.
Well, that method will never return a boolean value. A method with return type of `List&lt;string&gt;` can only ever return a `List&lt;string&gt;` or `null`. So, at whatever point the debugger is calling it, it must be doing something with the return value, and from that, producing a `boolean` value.
Always, can't resist an unsolved mystery :)
That's the problem. It gave me a True or a False, but in a string, for a weird reason. But like I said, the debugger is capable of doing the same thing with another method, so why not this one ?
How exactly is your debugger wired up? I'm not sure I follow... Are they unit tests... or...?
[https://imgur.com/a/wrDoxzY](https://imgur.com/a/wrDoxzY) There, a screenshot of the debuger. It launches when I start the project. As you can see, I got True and False.... I don't know why. [https://imgur.com/D0bfjYX](https://imgur.com/D0bfjYX) And there is the famous other method I talk about. It proves that the debuger is not the problem, because as you can see, it is capable of returning a list of string properly
OOOoooohhhh kaaaay... now I follow whats happening. gimme just a few...
Do you have the code for the method that is working properly?
Wait wtf
Yep. There : [https://pastebin.com/QPMhShw0](https://pastebin.com/QPMhShw0) &amp;#x200B;
My best guess is that your query is returning 2 records, and one record has the value of "True" in the column specified and the other has the value of "False" for that column. If you put a breakpoint on the line with `data.Add(rd["SOU_ETAT"] + "");` you should be able to dive into the `rd` object and see what exactly the query results are.
Fixed in Unity 2018. You can enable it in Unity 2017 by going to Player Settings, and changing the Scripting Runtime Version to: Experimental (.NET 4.6 Equivalent)
Or perhaps 1 and 0 (instead of True/False)
Does Uncle Bob plan on paying me for those 40 hours? 
Mhhh... I'm not able to see anything in the RD object. That's super weird
What the actual fuck now I only have one result, "False"
I got now left in my main project. Views and ViewResources along with images, styles. Then I also have models like panetype and toolsection, and helpers like Dockinghelper, rowstylehelper etc. In my viewmodels folder I got like CategoryViewModel.cs and CategoryViewModel.Commands.cs. What do you think about those? I've moved the models and accessors to SQL out to a DataAccess project. But some of the models in the DataAccess projects is also used in the viewmodels, should my models really be in the dataccess?
+1
Is someone messing around with the data in the table?
That's totaly impossible, because for now the database is stored locally on my pc
There are some bits and pieces scattered around, but no generalized and all-encompassing API. `System.Drawing.Image` exposes raw EXIF metadata, but doesn't automatically convert them to a readable form and requires reading the entire image into memory. I guess you could use the Shell COM API to get the same property descriptors that the Windows Explorer displays, but that would make you dependent on preinstalled format handlers. For many common formats such as old MS Office documents and PDFs, you'll probably either have to reconsider your stance on external libraries (or at least incorporating open source code) or write parsers yourself.
Thanks, it’s really starting to look that way. What a shame.
Walking away is an incredibly effective way to get a solution. It just ticks over in your brain. Taking a shower is also really good. If you can't walk away go dicuss it with someone. That works really well. Just hearing the problem out loud can be enough to trigger a eureka moment.
&gt;Method It cannot return a boolean value. Either null or \`List&lt;string&gt;\`. You have to debug this method in your WCF service to see what it's returning. Not the method that is calling this WCF service.
This is what I said in my op. This is what I do. And I got a boolean in a string for a weird reason
Does Uncle Bob plan on paying me for watching ~ab hour of his incredibly boring lectures?
For sure, like others have said being in the shower is great for solving problems. Your mind is elsewhere, all the noise is gone and your brain will just tick in the background and throw an answer at you.
If you **want** to leave work at work, that's absolutely fine. Nobody will expect you to continue working after you leave (unless it's a [black company](https://en.wikipedia.org/wiki/Black_company_(Japanese_term))). &amp;#x200B; Yes, I'm a .NET programmer and I think about code after work. No, I don't think it's a problem. I love code. I write it for fun in my spare time. But you don't have to. &amp;#x200B; And for all the people who figure out hard problems the moment you stop focusing on it - check out the concepts of focused and diffuse brain modes. The [Learning How To Learn MOOC](https://www.coursera.org/learn/learning-how-to-learn/) has a fantastic overview of this. Basically, when you focus on a problem, you can't make the loose, long distance conceptual connections needed to creatively solve a problem, but if you do something else you switch to diffuse mode which allows those connections to be made. You can actively \*trigger\* this switch to become better at creative problem solving. Go check out the MOOC.
Nope, when I am not at work, I do not think about work. If I catch myself doing it, I immediatly stop. But for personal projects, sure I often do.
&gt;SOU\_ETAT What does the column \` SOU\_ETAT \` in your database table contain, are those the true false values or 0 or 1's? 
This! So many times my brain will have a eureka moment when I’m just chilling out. The hard bit is remembering it....
With my instruction, normally, SOU_ETA should return 2 0 And nothing else
&gt; should my models really be in the dataccess? Why not? Sometimes I put them in a separate, lower level project. But only when they are complex enough to need their own set of tests. For simple projects they live with the DAL. 
Unfortunately when your passion is also your job then you do spend a lot of time solving problems outside of work. In my early career it wasn’t unheard of that I’d do my “day work” then go home and tool up on other aspects of programming. I did it because I enjoyed it. I’ve been doing this nearly 20 years now and I no longer have this stance simply because I suffer from burn out. I’m not saying there’s a right and wrong way to approach this but for me I never saw it as work when I was learning at home or solving other problems, I did it simply because I enjoyed it, it was my hobby. You may be an excellent programmer but one thing I will say is that you may be fed up of programming much sooner than other programmers who just enjoy it as a passion. It may simply be that you’re better suited as an architect and a manager than a programmer. I may be way off mark but that’s just my experience 
I do not know about the code calling your WCF service but but can you try to fiddle around a bit? For instance try changing the line data.Add(rd["SOU_ETAT"] + ""); to data.Add(rd["SOU_ETAT"]? 2:0 + ""); and tell me what output is
I dropped out of a PUBG match the moment I died, despite the rest of my squad being up, so I could RDP in and fix a function I’d banged my head against for almost an entire workday. I don’t know what triggered my epiphany, but I’m almost glad I died almost immediately after it hit me.
I got an error : Impossible to convert "object" type to "bool" Impossible to determine the condition, because there is no implicit conversion between int and string
I do enjoy coding my own projects outside works if I have free time cuz there is no deadlines. But the issue is, thinking about WORK related coding. For example, I may need to think about solving a coding problem of my current work project or else I may not be able to deliver my work on time and meet deadline. 
Rookie work. My biggest accomplishment so far hit me when I was drinking beer in a pub, around 10 on a Thursday morning. I wish I could say this was a joke.
My last workplace had a table football table and some chess boards for this. If you were stuck on something for a while, just go and take your mind off it and when you get back you will be looking at it differently.
That’s a different thing then if it’s pressure related That’s more bad culture than thinking about issues outside of work I’ve heard horror stories of people sleeping under desks to finish projects on time, that’s simply bad management As a programmer I’ve always been well compensated for working so I’ve never had issue with taking work home but I think the minute management start imposing stupid deadlines and apply stress and pressure because they over promise a client then put that pressure on you then it’s time to re-evaluate who you work for It’s just another way to kill passion and to start hating your job when this happens too often
Got it, please revert the code to original statement. Put a breakpoint on line `data.Add(rd["SOU_ETAT"] + "");` and point on rd and it'll tell you about all the properties contained within rd. Try it and let me know what you get
No, I'm married and my spouse gives me enough problems and interruptions to distract me from any prolonged logical thinking. 
And there you have it : https://imgur.com/a/nyHdHi8
This is why programmers drink a lot of coffee. It causes forced natural bathroom breaks. Great for problem solving.
I used visual studio team services to CI/CD our internal nuget packages for a while. It won't update their project automatically but it will keep the private nuget feed up to date. I wasn't a big fan of it because it took an annoying amount of time waiting for the nuget feed to update and then VS would sometimes shit itself restoring the nuget package until I restarted it. Its great if its things that don't really change frequently. 
Really? After work and sleep there are only 70 hours left in a week. If you add in an average commute, that is even fewer. Add in time for eating and you are left with not much at all to fit this additional 40 hours per month in. Are you sure it wasn't 40 hours per month? That just seems a bit too much.
I believe this what I used to build my department's internal Nuget: https://docs.microsoft.com/en-us/nuget/hosting-packages/nuget-server The .nuspec file controls all the versioning and informational stuff, so all I do is update the code, increment the version, and commit. Bamboo kicks off an automated build that uses the AssemblyInfo stuff and the existing nuspec file to create a new package. Then Bamboo uploads it to the Nuget Server remotely, and ✔. That's a very brief overview, but I hope that helps.
Are you using the NinjectBootstrapper for the startup? Do you have your services and/or repositories in a seperate project or all in 1 project?
How dare you make me read documentation haha. Fair to say I know more about base class member access now.
These don't get updated frequently, although there will be a short spate of updates I would think once the external people upload their models, and then after that rather infrequently.
Excellent. Thank you. I have no idea what half of that means, but am finding our now! That sounds exactly like what we need.
You can use IsEmpty method - it throws exception if some collection is null. `default(Array&lt;string&gt;).IsEmpty();` \- in this case it will throw exception. You can get more info about this methods in ruby here [https://salayhin.wordpress.com/2013/11/05/understanding-nil-empty-blank-present-in-ruby-on-rails/](https://salayhin.wordpress.com/2013/11/05/understanding-nil-empty-blank-present-in-ruby-on-rails/)
Are you not allowed to use binary third party libraries or any at all? If you can use the source of open source libraries in your project (for security, code review, etc.) Then just include them in your solution and just reference the project. I had to do something similar for a State department.
That would work, but I don’t know if any libraries out there. My GoogleFu has been pretty shotty lately.
Awesome response, also you could use it for ranges such as 5...Count which I could see myself using lots.
This example will do what you need for images: https://docs.microsoft.com/en-us/dotnet/framework/winforms/advanced/how-to-read-image-metadata
I tried that, but there is an issue with the code. I don’t want to load the picture into memory first, I need the data without loading the picture. Windows Explorer is able to do this when viewing file properties. Because there are cases where images can be almost 30mb which can halt the process, threading might solve this but metadata extraction will be far more faster.
This post has info on skipping loading the entire image into memory and info on open source libraries: https://stackoverflow.com/questions/7128034/exif-library-for-net-4-0-framework
Sweet! Literally just complained about loading images into memory.
Nope, Once my work laptop is shut down all work related thoughts are shut down too. I do however code in my spare time and I think about that a lot, Currently learning x86 so it's keeping me busy :)
Yeah lol didn't mean to post that as a separate comment
No worries man. Thank you, checking it out!
I would add the array.lenght property can be used in a range without need to add -1!
Np! Let me know if you need any more help.
Will do! Thank you so damn much, if this works you literally just helped me out with the core of this project.
No. Anything that ends up on your client's machine should be considered public, nonsecret information. Secure your application in another way. 
Me too. This is the place to get the best ideas 
Most libraries I've used (I've not used any Google APIs) provide a way to call an initialise function or something similar that passes in the API key. I think it's also a bad idea setting the environment variable as that's also easy to see, but you could constantly end up overwriting the users custom key if they happen to be a developer. If recommend taking a look through the API reference to try and find another way to initialise the library instead of setting an environment variable. Once you've found it you can hardcore the API key as a string or use an embedded resource file.
He was the co writer of the Agile Manifesto. Any things possible from a cult leader. 
I think its a natural part of how your brain works for it to continue thinking about a problem in its spare time. Sometimes it's annoying (at least for my family) because I glaze over and am only half there, but sometimes the solution you have been trying to figure out all day comes to you in those down times when you aren't in front of a screen. That said kids are a great distraction, they are unrelenting and will drag you back you reality.
We used the software called Artifactory. It supports nugets, docker, npm and tons of other packaging systems. I was a developer/user, not an IT, but I think it was quite expensive. You can also buy it as a service so you don't have to tale care of the hw, sw of the server. Myget.org provides this service. For a build server VS (now Azure DevOps) is a good choice. It has a private nuget server as well
Thank you. We're in the process of moving to Azure, so that's definitely something I'll look into.
Np at all! hope it does!
There is nothing wrong with keeping work at work. I don't know why there seems to be an expectation that programmers should write or think about code in their free time. Do it only if it's enjoyable to you.
I got my services in a separate project, does it has something to say? public MainViewModel(CategoryViewModel categoryViewModel , ICategoryAccessor categoryAccessor ) { _categoryViewModel = categoryViewModel ; _categoryAccessor = categoryAccessor ; public partial class App : Application { public App() { this.InitializeComponent(); } private void Application_Startup(object sender, StartupEventArgs e) { var nj = new StandardKernel(new CompositionModule()); MainWindow mw = new MainWindow(); mw.DataContext = nj.Get&lt;MainViewModel&gt;(); mw.Show(); //this.InitializeComponent(); }
Awesome I found it! TranslationModel model = TranslationModel.ServiceDefault; String apiKey = "khjkljHKgdADLAddsdsa2134fakeKeykhALdkADSHJLADS"; TranslationClient client = TranslationClient.CreateFromApiKey(apiKey, model); I think I will set it as an embedded resource, that way I can share the source with friends but add the resource file to .gitignore. Thanks for the help 
An abstract class can contain methods and data. An abstract method cannot contain code. You are correct. 
Are you saying the caption/subtitle is correct? I’m asking because I thought it was wrong. Abstract class can contain data and code.
This is some next level.
It is only to be shared internally within my company of &lt;10 ppl. I also set some restrictions on the API key so it can only be used for the specific Translate API, and I have set a cap on translations provided. How would this typically be done if I was distributing the Program to 100+ users? &amp;#x200B; Thanks for the help!
Egh... If you wanted to be pedantic, you *could* say that since you can't create an instance of an abstract class, only a non-abstract *descendant* of an abstract class, the caption is *technically* correct... but I'm with you, the caption is incorrect.
He recently wrote a blog post about how agile failed at what they set out to do with it, that it was a tool for developers to have more control but that has been misused a lot. If you look at the actual agile manifesto it is just 12 principles to keep in mind while working, not having daily stand ups and grooming sessions and story points and all that other junk. Here are the original 12 principles, they seem quite reasonable to me [http://agilemanifesto.org/principles.html](http://agilemanifesto.org/principles.html)
&gt; An abstract method cannot contain code. the word "method" is they important part here, abstract *classes* can have not-abstract *methods*, which obviously would contain code
Think that might be a bit of a reach lol
Remember that any file share can be a nuget repository. I don't know if that fits your situation but it's a fast solution for small teams. Just put all nupkg files into a single folder and reference it in your nuget config files
If your stance on Open-source has changed, ImageMagick and ExifTool should let you do forensics on pictures. 
It’s not that I object to it, it’s just project requirements unfortunately. I can still strip snippets though. It just comes down to licensing and footprint.
Timpi is correct. The caption is wrong. Your initial thoughts are also correct. The site seems to have gotten abstract classes confused with interfaces. 
Hi. Thanks. Yes, we did have it set up on a file share a little while ago. We now need external access for contractors, plus an "auto-build" etc...
God knows I try not to.
Looks like it even has IAsyncDisposable too :)
Yes, if your service is in an other project you need to load also in Ninject. If you have services in a separate project you bind need those components in your kernel. var nj = new Kernel(): nj.Load(“project.*.dll”); Place a breakpoint in your module to make sure your module your module is picked up by Ninject. 
Create the client app separately, call data from the web api. That's the gist of it
I also was solving the advent of code problem which required linked lists but I implemented it myself from scratch, it was faster than reading the api. I think you are somewhat wrong by saying &gt; So if all you need to do is insert elements into a collection List is a better option. This is true if you insert at the end of the list. If you would try doing inserts at random indices you should see that dynamic array (List&lt;T&gt;) would start to struggle.
Love this answer. 
If you're moving to Azure, you could look into Azure DevOps. It's basically TFS (Team Foundation Server) but in the cloud. It has built-in support for CI/CD, Nuget Packages etc... IIRC you get 5 users for free.
I usually solve the hardest problems in my free time, then I only implement them when I'm back at work.
Greed but for a reason of my own. Interfaces are a symptom of not being able to implement multiple inheritance. I don't understand why we have multiple inheritance via interfaces now. If you're going to add it, do it properly via abstract classes.
I often go home and continue where I left off at work. I also code for fun in my spare time.
I think it’s probably close to impossible to avoid for most of us in here ;)
If it's a project that I like, sure. But with my current employer, I clock in and clock out. Fuck them. Fuck their work
Generally not. Once in a while, if it's a particularly interesting problem, but I try not to give my employer any more of free time than they pay me for.
Non stop thinking about it. During crunch times I even dream code. 
I like what I do, therefore I don't feel a need to zone out of it, as a natural problem solver, it haunts me, I usually find answers while in the toilet, however I sometimes dream about solving something with code, waking up with it or going to bed with it.. If you are invested into what you do, that's part of it. So what actually bothers you I can't understand?
Classes can contain state, and then you end up with the diamond of death problem. Interfaces don't pose this issue, because interfaces can not contain state.
Example of abstract class containing code and data: https://referencesource.microsoft.com/#System.Xml/System/Xml/Dom/XmlNode.cs
Yes, all the bloody time! I think it's fairly common, it depends - for me it's usually the shower, some of the people I've worked with say it's when they're walking the dog or sitting on the toilet, but either way your brain will mull things over pretty much whether you want to or not.
Because MI via interfaces is actually likely a syntactic sugar feature. It just means that any classes that implement that interface effectively have any default implementations copy+pasted into their own class, rather than the implementations being part of a separate class that is inherited from.
The best way to do it is to inject a factory for each type of child view model you intend to create. Then you can use that factory when you need new instances. However if you were only ever going to create one instance, then you might consider injecting the child view model itself. You don't have to inject interfaces for DI. IFactory&lt;MyChildViewModel&gt; childFactory
When you're staring down a brick wall and can't see a way through it, around it, over it, or under it... it's good to try a different *perspective*. 
But that way of working would be perfectly possible with abstract classes, I don't see the difference.
If you've been developing for some time then you obviously should have enough experience to quickly get started with C#. Basic concepts are the same accross most programming languages, and coming from C should really make C# seem like a breeze to work with. However, there's also the seperate skillset required to develop a game. I'm guessing that you're looking to use Unity, so you will also have to learn Unity. How hard is it? That's a terribly difficult question to answer. But like I said above, if you're an experienced programmer, then it really shouldn't be that hard. It would obviously still require a lot of work.
You only have one base Class and instead of inherit a base Class from a another base Class to prevent to have multiple implementations of the same Interface you can have the implementation in the Interface. I hope this is understandable. 
The design here seems to indicate that ranges should avoid allocating new lists: https://github.com/terrajobst/designs/blob/27a6b1c7df08ae42baa2d5f13bcd9d0e259b47e2/accepted/system-range/system-range.md
It wouldn't be the same thing in an OO sense. In a strict OO sense this is more like composition than inheritance. The reason for doing it this way is it requires zero library, runtime or CLR/bytecode level changes - it's purely a compiler level feature.
Abstract classes come with problems regarding allocation of storage underlying, e. g., properties. The default interface implementation feature does not allow for a default implementation to include storage, which must always be allocated as part of the implementing class or struct. Using abstract classes, instead, would mean resolving the diamond problem for protected fields, where interface members can be shuffled over to explicit implementations without inventing new syntax. I'm given to understand that this eases some interop details on Android. Ovre the longer term, it may also make it possible to extend interfaces without breaking binary compatibility with older versions, which is a boon for library writers and maintainers (though, in practice, I don't think this buys much for the vast majority of developers, it *was* cited as being valuable to people inside Microsoft). All of this has been discussed, *ad nauseum*, here and on the C# github. It might benefit you to do some searching and read some of those past discussions.
I understand, I didn't fully consider the diamond of death problem related to state and to be honest I'm still not sure why there is a difference with methods though, I think you the same diamond problem, but apparently that was resolved. 
With methods they make use of explicit interface implementation. A feature a lot of people tend to forget.
Yes. And sometimes I figure stuff out right before I fall asleep. I dont think its stressful. Solving problems is the part of the job I like. To me, work is all the politics, meetings, daily grind, etc. The lame stuff. 
A common way to avoid taking work home is to get a hobby, even moonlighting works. You learn to switch modes. And your brain still solves stuff in the background without you consciously thinking about it, which is amazing.
I do this a lot. It helps sometimes.
This is great advice. 
Thanks for taking the time to explain this, I think it's the best answer I've gotten. My takeaway is that it's just a pragmatic approach because they solved the diamond problem somewhat. I still think it's a weird way.
Well I would say I am the same as yourself (tries to avoid anything work related outside of work hours) but sometimes you will be stuck on a problem and your brain will randomly come up with the way to solve it...brains are funny that way but last weekend I was at a Christmas market having a good time drinking funny tasting beers and consuming my body weight in candy floss and I suddenly resolved a problem I have been having for a week! Got out my phone made notes for future me to reference and got back to having fun... dont be too scared of it! Embrace it :)
 https://imgur.com/gallery/AVOAqxr
Wpf: xaml, code behind, viewmodels service: business logic Contracts - interfaces(i.e of dataaccess) , models Dataaccess: DB access classes WPF depends on: all the other 3 Service depends on: Contracts Data access depends on: Contracts Contracts depends on nothing In the past I tried also to decouple the wpf stuff from the rest and have a 5th project for integration, but it ended up to complicated and went with the WPF project as the main project 
I'm not sure why you were down voted, but your `Where()` approach also needs a `using System.Linq;` which is the whole reason `Contains()` could not be found. &amp;#x200B; Also, instead of using `Where().Count() &gt; 0` it would be better to just write `Any()`. It is easier to read/understand and can end traversing the array when the match is found, whereas your `Where().Count()` would iterate the whole array regardless of the match being the first or last element. &amp;#x200B; I know that premature optimization is never good and performance would not matter when using an array with three elements, but I think using `Any()` is already worth it for readability alone.
Just because someone is thinking about work outside of work doesn't mean they're working outside of work. &amp;#x200B; I don't have any coworkers that feel pressured to continue thinking about work once they get home. But sometimes, you have a particularly interesting puzzle you're trying to solve. It's not different than when you're thinking about what will happen next in a good book you're reading or a good show you're watching, or considering what to do different to do better in that game you like. The difference is that the puzzle is programming. &amp;#x200B; If you don't want to think about work outside of office hours, that's fine, you don't have to. But maybe, if you get an enjoyable enough job, you'll occasionally have a puzzle that's so mind bending that you just can't put it down.
I don't think it's *ideal*, but I don't know if there is a better solution to the problems they're actually trying to solve with it. I need to review the feature, actually, because the last version of it that I read came with a lot of hairy business around adding things like non-virtual members into interfaces that would make mocking or stubbing those sorts of things a huge pain.
if(index &gt; Length - 1) return null; else return data[index]; 
Think you want something like : if(index &gt; Length -1) { return null; } else { return data\[index\]; }
What course will you recommend on udemy?
you are amazing thank you :) 
awesome, thank you a lot 
Sorry can't really recommend anything regarding Unity. I learned it mostly by doing. But that's because I already had a very solid background in working with C#, so I could easily get by with the Unity documentation.
I would think the real question would be who doesn't? Not only do I think about it after work, when I'm really sick with a very high fever, the universe becomes code. It's horrible. Difficult to explain, but when I have a fever, my brain is filled with a coding problem, and it will contain a ridiculous requirement such as filling carts with clothes that must be dropped off at a warehouse, and I'm frantically writing the code to get the drop off to synch up with the pickup... I'm right now spending my vacation thinking through how we will do a data fix on the ramifications of a bug that made it into the system during a deployment a day before my vacation started. So I ask, does anyone NOT think about your code when you are home? I assumed everyone does, and those who don't like the idea become dishwashers or baristas. Working conditions may suck, but your home time is all yours. 
Removed: Rule 4. There's a few frameworks out there, but the go-to de facto standard is Unity. They have a slew of great learning resources available at https://unity3d.com/learn
``` x = condition ? a : b; ``` This is called a ternary operator, available in most C-style languages. It roughly expands to: ``` if (condition) { x = a; } else { x = b; } ``` It's a nice way to condense long statements into shorter expressions, which make it work well with lambdas.
You know, there might be better ways to phrase this when talking to a literal 14 year old.
I sometimes dream solutions to my coding issues and will wake up in the middle of the night thinking about code. 
It was nice when I had a lot of datapoints and needed the duration between an "on" until hitting an "off" point.
As someone who's maintained an interface with 40 different implementations owned by a dozen different product teams, it confuses me that people keep thinking this feature is about multiple inheritance. It's about solving a major pain point of interfaces for large software project. It just happens to look like MI if you squint at it.
It's a problem for me because I will start thinking and stop listening to the wife and later on I'll get yelled at because I have no idea what she's talking about.
Beats thinking about things at work. ^(/s but not really)
&gt; `Queue&lt;T&gt;` is implemented as a circular array, and therefore is unacceptable due to resizing. Resizing of array-based collections requires allocating a new array and copying everything over, which is not terrible if you do it once, but really sucks if you do it over-and-over on your way to millions of items. Eh? `Queue&lt;T&gt;` capacity doubles each time it needs to automatically resize its array, so even if you start at the default capacity and fill it up to 2 million, it only grows like 20 times, and only the last few growth spurts are likely to take any meaningful amount of time. If it matters that this happens "over-and-over" (except, 20ish times), then for most workloads, I'd probably try initializing it with a pessimistic capacity right away... if that pessimistic capacity means LOH allocation and I'm not just making one of these queues, then I'd consider pooling `Queue&lt;T&gt;` instances so that the internal arrays don't fragment the LOH too much. Using `LinkedList&lt;T&gt;` is, of course, likely to have benefits, especially if the queue is being consumed very slowly, but it also gives the GC more objects to track that, in these use cases, would typically make it to Gen2 and die on a regular basis, which bothers me more than potentially 20ish array copies over the lifetime of an application.
I just never stop working..
At uni I woke up at 3am with the solution to an issue I had on my assignment. I couldn't get back to sleep as it was running round my head until I booted my machine and made the fix.
I try not to, but if the clock strikes 5 and I'm in the middle of solving something, it may come with me on the subway.
The C#-team already knows about the holes in the analyzer (better than I) and they give the example of arrays of reference-types. I'm all for warning about nulls, don't get me wrong, but I am worried that an incomplete checker is worse than no checker at all in some respects, because it gives people a false sense of security. If there's no compiler-check for null, people at least know to expect it as an input, but if there's a compiler-check that works, say, 80% of the time, some people will just blindly rely on it, not check manually for nulls, and will then be surprised at the odd exception. It'd probably be better to be overly strict and have false positives which could be circumvented with something like casts, because that'd at least force programmers to think about whether null can really occur in some place. Automatic null-checker does improve existing code, but it's not really feasible to build a new application from the ground up "without" nulls, trusting that any bugs in that area will be caught by the compiler.
1. Install vuecli and create your vue app with `vue ui` 2. Create asp .Net MVC application with controllers for your server side calls and create your server side controller actions. 3. Call your server side application using the fetch api in javascript to interact with your web service. https://cli.vuejs.org/guide/ https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-2.2 https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch 
Pooping, always pooping
I used to work at a company that was very inflexible about working hours to such an extreme that the office administrator checked presence at 9am every day. Needless to say, I paid this back by stopping all work at 5.30pm sharp, even putting my computer to sleep whilst halfway through a line of code. It set a habit of thinking about work matters only when I want to and not to let them creep into my thoughts when I am at home. 
I think about my code after hours and in most of my free time. Though that's because I truly love what I do. I would stop the moment it became a distraction from family duties however, now that both my kids have started wanting to build programs on their computers I don't think it will be in the way.
Thinking? Crap half the time I am home I am logged in to the VPN working. Its not as bad at my current job, but at my last job I never really left work. Even at parties I was A) on call and B) thinking about the overload of work I had to do. 
On which platform did you learnt C#
Tell me about it. You can also simulate shapes with structs that implement interfaces. In Haskell, a typeclass (which is a bit like an interface whose implementation is separate from a data-definition) is, in the background, an implicit, additional parameter which is a dictionary of the typeclass's methods. You can do this in C# too: public interface INumeric&lt;TImplementor, TInstance&gt; where TImplementor : Numeric&lt;TImplementor, TInstance&gt; { TInstance Add(TInstance x, TInstance y); ... } public struct IntNumeric : INumeric&lt;IntNumeric, int&gt; { int Add(int x, int y); } //Usage //Variant 1: Create the dictionary in the method, but you have to specify the type annotation public TInstance Sum&lt;TImplementor, TInstance&gt;(IEnumerable&lt;TInstance&gt; xs) where TImplementor : INumeric&lt;TImplementor, TInstance&gt; { //This is permissible because IntNumeric is a struct which can be initialized from null. var dict = (TImplementor)null; return xs.Aggregate((x,y) =&gt; dict.Add(x,y)); } var sum = Sum&lt;IntNumeric, int&gt;(new int[] { 1, 2, 3}); //Variant 2: Pass the dictionary explicitly. public TInstance Sum&lt;TImplementor, TInstance&gt;(TImplementor dict, IEnumerable&lt;TInstance&gt; xs) where TImplementor : INumeric&lt;TImplementor, TInstance&gt; { return xs.Aggregate((x,y) =&gt; dict.Add(x,y)); } An additional benefits of using structs here is that you can have methods which don't use the this-pointer on classes without a parameterless constructors, which C# doesn't allow. Suppose you had an interface for non-empty containers and wanted to implement that in the "regular" way: public interface INonEmpty&lt;T&gt; : IEnumerable&lt;T&gt; { INonEmpty&lt;T&gt; Single(T x); INonEmpty&lt;T&gt; Append(INonEmpty&lt;T&gt; x); (T, IEnumerable&lt;T&gt;) GetElem(); } public class NonEmptyList&lt;T&gt; : INonEmpty&lt;T&gt; { private readonly List&lt;T&gt; list; private NonEmptyList(IEnumerable&lt;T&gt; xs) { list = new List&lt;T&gt;(xs); } public INonEmpty&lt;T&gt; Single(T x) =&gt; new NonEmptyList&lt;T&gt;(new List&lt;T&gt; { x }); public INonEmpty&lt;T&gt; Append(INonEmpty&lt;T&gt; x) =&gt; new NonEmptyList(list.Concat(y)); public (T, IEnumerable&lt;T&gt;) GetElem =&gt; (list[0], list.Skip(1)); } public INonEmptyContainer&lt;T&gt; ConcatWithDefault&lt;T&gt;(T @default, IEnumerable&lt;INonEmptyContainer&lt;T&gt;&gt; xs) { //Case 1 if (!xs.Any()) return ???.Single(@default); //Case 2 else return xs.Aggregate((x,y) =&gt; x.Append(y)) } Concat is not a problem, but Single should also be callable without having a value of type INonEmpty at hand. If you had a regular class implementing it, however, this isn't possibly, because interfaces don't let you specify static methods. I've worked around this in a project in a truly evil way by hand-rolling IL which replaces the callvirt of Single (the regular method-call) with call (a static method-call), and having the implementors pinky-promise not to use the this-pointer in Single.
Do you definitely know that the shapes-proposal was shot down, by the way?
My subconscious is always processing problems. I very often discover solutions to things whilst not actively working on them. I've never been employed (I'm quite well qualified, so it's currently my choice), but this is something I've always thought strange with the whole being paid by the hour thing. If I'm working on something, it's always in my mind.
👏👏👏 This is really great when trying to communicate to the user why the mean old DB didn't want to accept his duplicate primary key, or invalid foreign key, or column that violated some check constraint, and to tell him what exactly the problematic columns &amp; values were. I just wish I had known about this before I wrote the logic to regex-parse DB error messages.
I'm a web developer for backend C# applications.
Yes. I love programming so I don't mind it, but I try not to bring it home. Lately I haven't had this issue though. Now the only time I do is at 3AM when I'm sleeping. I dream of a solution and it usually works. It's odd because I usually forget my dreams quickly, but when it's solving an issue I always remember and usually implement it first thing in the morning.
I actually start thinking about them before work, halfway through my morning workout routine.
&gt; Abstract your dependencies &gt; &gt;Abstracting your software from these dependencies will mitigate this risk as you are not tied to using the systems provided from a specific vendor. Your abstraction should allow you to swap out your vendor and make it easier for you to change how your software interacts with these vendors without breaking your application. That's great in theory and all and I get the motivation for that, but does this mean, in practice, that I should write my own ORM facade, in case Entity Framework is no longer around in 10 years? My own logging facade? A facade for the IOC framework, the numerical library, the graph library, SMTP, GUI-framework, event-bus, API generation, authentication, etc.? The danger of this is twofold: 1. For any decent-sized library, you'll spend inordinate effort writing interfaces and wrappers that nobody will understand and which will be inferior in usability and features to the original library; 2. your facade will have an implicit dependency on the concrete library anyway because you bake into the interfaces certain capabilities offered by the library, which another library might not offer. The implicit assumption of abstracting a dependency is that there is something to abstract to, namely an industry standard, which is not the case. It'd be great if ORM, say, were a solved problem and there existed a dozen interfaces which every framework out there implemented, but this is not the case. Overzealous abstraction here will only lead to you creating *Bill-from-floor-3's ORM Standard that he created 3 years ago, don't worry, you'll get the hang of it in no-time*™ .
/r/WikipediaPagesYouFellFor
I’ve solved many a problem sitting alone at a bar. Something about the beer and the solitude 
I don't know about the LINQ-syntax, but you can use Enumerable.GroupBy as a regular function. There's also [Enumerable.GroupJoin](https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.groupjoin?view=netframework-4.7.2#System_Linq_Enumerable_GroupJoin__4_System_Collections_Generic_IEnumerable___0__System_Collections_Generic_IEnumerable___1__System_Func___0___2__System_Func___1___2__System_Func___0_System_Collections_Generic_IEnumerable___1____3__System_Collections_Generic_IEqualityComparer___2__), which looks pretty much like what you want: //Returns a list of anonymous types, each of which contains the person and the person's events. var query = _db.Persons .GroupJoin( _db.Events, p =&gt; p.PersonID, e =&gt; e.PersonID, (p, events) =&gt; new { Person = p, Events = events }); &amp;#x200B;
I did, until I started this new job 4 months ago. I absolutely hate the work, and am working on getting a different job.
Did you get a good grade on your homework?
I don’t conform.
I was just making a joke, but thank you for this informative response. 
It turns out there have been more than one, and though several have been shot down [this one](https://github.com/dotnet/csharplang/issues/164) is actually still being considered (albeit with extremely limited updates over the past 20 months)- since it comes straight from Mads there's at least some real support.
Ooooh yeah. I wonder how many of us, exhausted and tired, lay down for the night only to immediately figure out the solution to the problem and think "god damn it"? I've gotten back up a few times to author the solution lol.
Overly-questionable code. By that, I mean over-use of the ternary and null-coalesce operators to write one-liners. var final = foo ?? bar?.baz ? fubar?.really : snafu?.yes;
Uncle Bob's book ends with a list of code smells that is fairly extensive and useful. But I find that the longer a list is (even 10 things), the harder it is to remember them all. Therefore, I try to reduce it down to a few behaviors that I try to maintain that gets me most of the way there. * Don't use Ctrl+C. If I want to use Ctrl+C to copy some code so I can paste it, I probably should use Ctrl+X to refactor instead. * If the method is longer than a page, refactor. If an interface is longer than a page, refactor. Any class longer than a page should implement an interface. * Use a style bot, like StyleCop, to keep your code formatting consistent. A lot of things on your list are things I beat into my developers when they first join the team. Magic numbers, commented code, inconsistent naming, and bad exception handling are all things that just never get submitted.
&gt; Classes can contain state, and then you end up with the diamond of death problem. It's an imagined problem, in the first iteration no worse than method signature clash when deriving the same method from two interfaces -- you must disambiguate explicitly. This is what C++ also defaults to. In the second iteration, it should be possible to "merge" duplicated base class. C++ solves this with virtual inheritance but it's somewhat inelegant as virtual has to be applied just below the potentially duplicated class. Should be possible to find a more elegant solution for C#.
 * Violation of SRP. * Not understanding the D in SOLID (or probably any of SOLID) - people have some fucking weird ideas around DI sometimes. Such as using the service locator anti pattern, passing the whole container around, property injection (which relates to your encapsulation point) etc. &gt; Bad exceptions handling So much this. I've seen a lot of "exception flow programming" where in places exceptions were being used in place of simple conditional checks. Another related point - abusing exceptions into some kind of success/failure result. You should use an actual `Result` type to encode such information - stop being lazy and passing exceptions around everywhere. (e.g. https://enterprisecraftsmanship.com/2015/03/20/functional-c-handling-failures-input-errors/). Functional languages like F# have this built in by default *and it's fucking amazing. * 
Bugs no but if I'm dissecting a new technology I'll likely be thinking about solutions to something.
Sloppy formatting is by far the most common offender, in my experience. The SQL generated by the SSRS visual tools is *horrendous* and there's a guy I work with that copy/pastes it everywhere. I put up with it, though, because he's a good developer and he only has one arm (he lost his left arm to cancer). So it's important to realize that sometimes it's not due to laziness when a dev creates some sloppy code. And a little patience, understanding, and kindness go a long way toward making things better. I just clean up the code the next time I have to work with it. Sure, it takes a few minutes (and the lack of a SQL formatter in VS is *stupid*), but it's not that big of a deal.
No. I barely even think of them during work.
Those skills don't really match the title or sub, that is to say, this doesn't look like a c# job.
I totally agree with you here and I think what I have said was possibly miss understood. What I mean by introducing a layer of abstraction is to ensure that your code business domain isn't depend on a single implementation. For example, when implementing our crud operations, our core domain will be using interfaces/abstractions. A separate layer (repository layer) will be implementing those interfaces for a specific vendor (SQL/Azure Storage/etc). So now you want to change your vendor, all you have to is replace your repository layer with the new vendor implementation and your core business domain is not touched.
Or try explaining the problem to a rubber duck. 
There's no such thing as over commenting. When I have to come back 16 months later to a piece of code I wrote I prefer to not spend a couple hours trying to relearn what I did. Plus it makes spinning up Jr developers much quicker. Most 'self documenting' code I've seen is self documenting to only the author and for only a few weeks after it was written.
And if you feel dumb talking to a rubber duck, a stuffed bear with sunglasses is obviously cool, and therefore worth talking to.
its not homework :) its an assignment that Im working on, seen this code online while doing research and couldn't make it work as an If statement :) 
No I don't but that does not stop the little bastard in my head from harassing me with ideas while I'm out trying to have dinner or barreling down the highway. 
I thought this question was pertaining to C#, not COBOL.
But... it basically is an if statement. &lt;boolean&gt; ? &lt;true&gt; : &lt;false&gt;
Rather use JavaScript like the rest of the world than tie myself into another Telerik product. Everything of theirs I've tried has had terrible help pages, flaky support, and short-sighted design decisions causing nothing but headaches. 
&gt; Unused code This one is the strangest to me - Visual Studio is basically screaming at you with the warnings, I don't understand how my colleagues accept it. The tool is literally telling them their code needs fixing, and it's so easy to just click on it and remove the line.
He's trying to teach you about loops. Much of modern software development is basically playing with legos: plug in some components and wire them together and it just works. Most of the basic problems (like finding the min element in a list) are already solved and have a built-in function. But if you want to understand the basics behind how those built-in functions work, you have to go to a lower level and do things like looping through lists to find the smallest and biggest element. That's where he's coming from. If you go on to a career in software, most of the time you're just going to use the built-in functions. But every once in a while there's not going to be a pre-made piece you can just plug in, and that's when the lower-level concepts are useful. (I say "lower level" but of course this is still pretty high level stuff. Wait until you get to assembly language, if they even teach that kind of thing any more).
I can understand where he is coming from, ill see what im able to do and will keep this post updated, thanks for explaining 
All the time. One of my most interesting times when I had the flu and was running a 102 degree temperature. Woke up in the middle of the night and told my wife on how to fix it. 
I end up thinking about it a lot. I usually come home, pack myself a bowl of pot, and that takes care of it. Removes my focus from work or else I'd probably never relax. That and booze
Mine tends to hit me right after I've laid down to sleep for the night. Just in time to make me fear that I'll forget it if I don't get up and right down notes or implement it immediately.
If he's a decent teacher, whatever he has taught you recently should apply directly to this question. That means a "for" loop or a "while" loop or something similar. I totally get where you're coming from: if there's already a function that does what you need it to do, you should use it. And outside of school, that's the right approach almost all the time. But in school, the purpose of the assignment is to get you to apply the concepts you're currently learning about. So you understand those concepts. 90% of the assignments you get in school, in a real programming job you'd just use an existing library function for, or Google the solution and paste somebody else's solution. But the purpose of school is to get you to understand the WHY of it, not just the HOW of it :) Basically you're learning how to build a car by smelting iron even though when you get a job in a car factory you'll just be welding pre-built parts together. But at least you'll understand where those parts came from and how they were made. (Both of my parents were teachers so I can't help but get all lecture-y about this stuff). 
Service Locator isn't an anti pattern? It's how most IoC container work unless it has build processes such as how dart works. And you do pass the whole container around... that's the point of an IoC container (unless you mean to individual classes/methods as a dependency instead of passing hard dependencies). I do agree that you should never use property/method injection, however.
 Then you haven't worked with a good developer before. Code should be self documenting, if it's not to others, you need to work to improve your code, not document more.
lol this is in line with my experience with Lynda 
Sometime a problem lingers in my head. Most of the time I leave work stuff at work
I often have very weird abstract dreams and then it all clicks together. Like cerebral digestion.
Maybe I'll need it later!
Damn, what does it look like then, I keep getting requirements from Kforce and everyone keeps trashing the descriptions
How many lines would a page contain?
 var query = from person in _db.Persons join @event in _db.Events on person.PersonID equals @event.PersonID into pe select new PersonEventViewModel { PersonName = Person.Name, PersonEvents = pe.ToList() }; &amp;#x200B;
Thanks for the reply! You put me on the right track!
This is pretty much what I needed. Had to do some googling to figure out how to combine it with some where clauses, but I'm set! Thanks!
`join .... into x` is the linq syntax. from person in _db.Persons join event in _db.Events on person.PersonID equals event.PersonID into events select new { person, events }; 
Recently I've been going on StackOverflow and thinking about other people's problems.
I have had to figure out to stop myself from doing this. If I get a good idea, I'll start mentally outlining how to do it in the office the next day and not be able to fall asleep for a couple hours. Then I will be so tired the next day I won't feel like putting in the work. 
What was the memory leak issue?
I had a dream about solving a bug in my uni project. Woke up, tried the fix, worked great. Peak efficiency.
It's in the first chapter or so on one of his books, probably clean coder. I can't stand the man. I've seen him live at a work thing and there's just something that's a little too aggressive and mean about him. He knows stuff, so I respect his knowledge, I just dislike him as a person.
I remember spending an entire day writing unit tests for this old piece of software. It was really arduous. Then I woke up. Needless to say I didn't feel the least bit rested.
/r/SubredditsYouFellFor
You pay yourself with a sense of pride and accomplishment for unlocking different ~~heroes~~ job options. He is a bit nuts though. I think he wants an army of coders to rise up and follow him into some weird battle. 
This is not a Telerik Product though. It's about an upcoming ASP.NET Core Feature
Instead of that, email the idea to yourself, and then go to bed. It's a way of 'releasing it', so to speak. 
Some of my best stuff comes to me while I’m on the toilet...
&gt; There's no such thing as over commenting How many of us have seen something like the following in our code bases? // loop through i until you get to count for (int i = 0; i &lt; count; i++) { // increment j by i j += i; } 
You can do something like this. Not exactly the same, but I have used it before: ``` void wl(string s) =&gt; System.Console.WriteLine(s); wl("something here"); // more code wl($"something else here with {x}"); ``` At least shorten the method name. WriteLine is overloaded though, and this only uses one of those overloads, but I generally always output strings, so no biggie.
The default interface methods feature does not introduce multiple inheritance. Multiple inheritance already exists in C# interfaces. The discussion of MI in the C# design is about dealing with the fact that MI exists, not about it being a design goal.
Try the [Poor Man's TSQL Formatter](http://architectshack.com/PoorMansTSqlFormatter.ashx) extention for VS and SSMS. It's a sanity-saver.
However having inline output seems it might be suspect. Different platform may have different ways of dealing without, and what if you are writing an app that does not have a stdout?
I'm having trouble locating the specific Github issue I was referencing, but things like IDisposable/unmanaged/marshalled objects came up as potentially creating dangling references, and the threat of multiple inheritance was a solid no-go. The proposal by Mads I posted elsewhere suggests implementing this without creating a runtime object, which should circumvent such issues. It wasn't so much that it's not possible to do without GC problems, as the specific proposals would likely have required a CLR change rather than a Roslyn change which isn't really within the scope of a C# compiler proposal. The current proposal essentially aims to add shapes without introducing multiple inheritance- there are limitations to this approach, but would create far fewer headaches.
Yeah no mention of C# except the title: "Strong experience with C, C , Boost, Pro C, OOAD and multi-tier software architecture" C and C# are not the same programming language, FYI
 * You're not allowed to post job listings here See rule 1. * This is not a C# position and the salary stated will not get you the person you are looking for. I'm guessing you can't tell us who the client is because we'll all laugh.
In my experience from working in the industry for ~6 years and also from teaching various undergraduate and graduate computer science courses at the university, the people who are overly vigilant about coding style are compensating for being subpar programmers (the analytical part of programming that is). I think it's a form of self-defense mechanism. A self-confident programmer having trouble reading code may have an easier time concluding that the code is badly written rather than accepting his/hers own incompetence.
I'll be downvoted but self documented code it is not enough. Obviously commenting each code line is really bad, but not comments at bad too.
I don't actively think about coding problems, but often solutions will come to me when I'm doing something completely unrelated.
I think it depends on context. In 95% of scenarios, no comments should be needed, but that does not mean that there should be no comments. For instance, documentation on public apis, it helps third parties a ton. But there are also cases to where you really should comment. I had to write an incredibly complex algorithm for word wrapping for PDF's (because those are unreasonably impossible to work with for some reason) that had to calculate size based on the font type and size, and know when to break columns to wrap on the report. Yes, I documented nearly every line to walk step by step what the method is doing, because it wasn't intuitive. &amp;#x200B; I didn't say you should never document, but code should be self documenting in nearly all scenarios.
its approximately double a half-page standard visual studio installation on win10 @ 1080p gives me 54 lines I have ~210 columns. I don't strictly adhere to python's 80 character limit, but I do try to keep my columns less than 90 or so, which allows me to vertically split the editor and still have room for the sol'n explorer. I don't typically base my class/method design on lines/cols though, this is just kind of a side note
Not consciously, but subconsciously it's not something you can choose to turn off or on. The answer comes when its ready. Be ready.
One comment, all of the blue icons turns the icon into VSCode, and Dracula turns it into VSCode - Preview. I love the colors but the icons changing to those colors makes it look like a different product :)
Maybe to a degree, but there is a lot of this in semi-old codebase I'm working in. No, it doesn't at all keep me from doing my job or reading the code, but it looks like shit: class MyClass { public int MyProperty { get; set; } public string MyOtherProp { get ; set; } public MyClass( int incominginteger , string incomingstring) { MyProperty = incominginteger; MyOtherProp = incomingstring; } public void DoStuff() { stuff(); } } weird spacing, unnecessary newlines, no camelCasing it works, and I can use it, but why? I'm assuming there used to be something on that newline for instance, but was removed. Whoever removed it probably just didn't fully remove it because they got sidetracked after testing and just committed as is. Idk. 
Hey, you need to toss in an escape `\\` backslash before the last parenthesis in your "black company" link. e.g. `([black company](http://foo.bar/tao)\)`
I wouldn't suggest that this be a language feature. It would be a feature of the IDE. It would of course also be an optional feature. I.e., by default, send output to the console. But if you want inline output, for certain applications, that can be turned on.
It haunts me. 
Yes... Every Dev, front or back does... If they don't, Then they have no passion for the project or for the challenges presented in every project. Which is the "best way" to solve the problems. It gets real instense on deadline so you have to have it solved or be stuck thinking about how to solve in your head. Sleeping, eating, don't matter. If you don't Have passion for it, then DO Not Do This! Its not worth the Money! Bc of the Constant Depression it will bring if you're not up for it. Don't Teach Children Math as a School Teacher if you Hate Math and Children! 
Too many nested conditional statements. if(something){ if(somethingElse){ if(anotherSomethingElse){ } } }
I go to sleep wondering about how to solve a particular issue, then all through the night as I toss and turn, I become partially awake convinced I have the answer. By morning it's completely solved and working properly. Then as I get out of bed my head clears and I realize that not only has there been no actual changes made to my code because I was asleep, the proposed "solution" makes no sense at all. And then 2 seconds after realizing that, I can't remember any of it at all.
I see this type of stuff a lot in HTML which seems silly to me. &lt;!-- Start of Head Tag --&gt; &lt;head&gt; ... &lt;/head&gt; &lt;!-- End of Head Tag --&gt; 
OH I finally understand what you are asking, not an inline expression for output, actually showing output in the program where the output code is executed. Interesting. Not sure the utility or how hard that is, but interesting nonetheless.
which one? are you using viewmodel first or view first bavigation?
I really wish VS had a way you could mark testing assemblies. We discovered we had a decent amount of dead code that VS wasn't marking as unused because it had test cases. We have to maintain two solutions, one with tests and one without and periodically check to see if we have unused code using the solution without test assemblies. 
In that case I think that the comment should explainf why are you doing a loop.
I love [EditorConfig](https://editorconfig.org/) and Visual Studio's code cleanup feature for this.
Yup, exactly. :-) Yeah, this would require support at the IDE level.
&gt; That's great in theory and all and I get the motivation for that, but does this mean, in practice, that I should write my own ORM facade, in case Entity Framework is no longer around in 10 years? My own logging facade? A facade for the IOC framework, the numerical library, the graph library, SMTP, GUI-framework, event-bus, API generation, authentication, etc.? How long have you been developing, and what's the longest lived project you've worked on? Go back 10 years and see what was around for ORM's, logging, IoC, graph libraries, event buses, authentication.. and see how incredibly different and out of date they are from what we commonly use today. It's easy to shit on abstracting ORMs. In a lot of apps, DB access is completely pervasive where half the system or more is interacting with the DB. And there's a lot of ways to attempt to abstract DB access poorly. This kind of talk of just use EF everywhere is only even coming up lately because of how competent and well developed EF is compared to pretty much every other .Net non-micro ORM. Even with that in mind, who's to say what we'll be doing in 10 years. Guess what we didn't have any of 10 years ago? Async/await. Now I'm not saying wrap everything, everywhere. But if you don't consider and employ abstraction and compartmentalization you're going to have a pile of hot garbage in 10 years and be talking about doing The Big Rewrite. That includes ORMs, IoC, logging, event buses, web frameworks, you name it. If you're scattering references to Ninject, NLog, AspNetCore, etc. all over your code base, you are not creating maintainable software.
I really thought that link was going to point to List_of_programming_languages.
During University I woke up at 3 am after a night of wargaming (chit-based), xtrek, and MUDs and suddenly understood pointers. I was excited about this revelation - my room mate far less since he had early class the following day.
Me, not \*while\* pooping, but usually right after.
My suggestion is to use the vue cli to create your app inside of the .net api project. You can have it server the html file from dist or build, and boom you have a frontend. I'm doing basically the same thing with React right now.
Isn't testing what the multiple test frameworks are for?
Pure quality post mate!
It's basic recruiting stuff my dude, they don't want us to go directly and cut them out. I could care less who the client is, I could care less if its a funny client that makes you laugh. 
Consistently formatted code reduces errors. If everything is consistent then many types of bugs are easier to identify. For example, if member fields either have an _ or this. In front of them, then self assignment errors (which are normally just warnings) stick out. It also reduce the cognitive load when reasoning about code. There is no more "Is that a member or local variable" questions in your head. Code is your workspace, and organized workspaces have less errors. You can directly link formatted code to 5S principles which have been shown to reduce errors. https://en.wikipedia.org/wiki/5S_%28methodology%29 
and i may not be allowed, but I did, and found someone despite this description being god awful, 
I upvoted you. My only regret is that I can do it only once. Comment the hell out of that code. Tell me about the business process that the code is handling and who made the decision about why it should work that way. Tell me the the WHY behind it. Tell me what it used to do before you changed it. Tell me what might be the repercussions of the change just in case they do actually happen. Don't make me guess about anything. If a couple lines of your explanation can prevent me from breaking it in a future change, you're doing it right. Sure, you can argue that the code ought to be clear enough to explain it but sometimes it can't be. Most times it won't be. That's the reality of working on a team where any number of hands (some senior and some not so senior) will have touched it before you got there.
Good for you. It's always better to look at the outcome rather than the consequences. 
I work with good agents all the time. You are not one of them. Use the subs that accept job postings, don't shit over here. Ok? 
IFAIK, there is no driver for MySQL delivered with .NET You need to download and install it first [https://dev.mysql.com/downloads/connector/net/8.0.html](https://dev.mysql.com/downloads/connector/net/8.0.html) &amp;#x200B;
https://dev.mysql.com/doc/visual-studio/en/visual-studio-install.html
Ah, thank you much! 
Follow up question then, can I run the database off a flash drive? I’m just starting the database unit, so excuse my lack of knowledge 
There is an open source driver that is supposedly better then the one offered by Oracle. https://github.com/mysql-net/MySqlConnector
Reformatting code is like highlighting paper text. It's a good way to think about it. Given code like that to review I would actually ~~make it better~~ change it. Think about what that variable means, and give it a good name. You don't have to check in your changes. 
That is a bad comment. It's not just the amount of comment that is bad, it's the quality.
I've come to love the Maybe&lt;T&gt; monad, but I don't care for their example Result&lt;T&gt; implementation. A mutable inner value isn't very functional, and neither is having a public accessor for it. Instead of an Action delegate, let the OnSuccess method (which they don't bother to define) receive an Action&lt;T&gt; or Func&lt;T, TOut&gt; delegate, and return Result or Result&lt;TOut&gt; accordingly.
I care
Often rather than commenting on the code would be better if you fixed it. I agree that purpose is not always obvious and can need comments.
Short answer: probably around 50. Long answer: the fuzzy definition of a page is actually part of the metric. If I'm showing code on a powerpoint, then a 'page' is a lot smaller. The point of the page has less to do with an exact line count and a lot more to do with the cognitive load associated with how many things the human mind can juggle at once. If I can see all the things, I can more easily group them together mentally. But as soon as part of it exists only in my head and not on the page in front of me, I start to lose track of it. On a related note, I advocate for not keeping more apps open on your desktop than what you can reasonably see at once. For my two monitor setup, that's about 7 windows. Any more than that and I can't track it all anymore. Likewise, any more than 5 tabs in a browser or code editor is probably too many.
I’m not sure if I get what you’re saying. I haven’t mentioned it anywhere, but the icons in the file explorer shown in the various screenshots are Field Lights Monochromatic (Minimalistic). You can get it by downloading the Field Lights theme (which is a great theme by the way).
at work someone submitted a PR with 9 nested if statements. The horror..
https://gist.github.com/vkhorikov/7852c7606f27c52bc288
Sometimes with lambdas you don't need to have a variable at all. Variable names can communicate.
Without installing MySQL on the computer your app is running on? It's possible, but it's not straight forward at all. You probably don't want to go there. For something like that you'd probably lean towards SQLite.
All the time. I'm almost always thinking about how I could optimise my code and how I will solve a particular bug or problem.
I agree with you, but I think a pure C# crowd might have a hard time understanding it. My hobby work's been in TypeScript lately. I liked vanilla JS but the type annotations helped me handle things as complexity increased. But for all the good TS does me, there are holes in its type engine. The big holes seem very similar to what C#'s having to do in order to maintain backwards compatibility: * If you consume a third-party library that doesn't publish type annotations for TypeScript, you are on the hook for validating the data structures you get. * If your TypeScript stuff will be called by non-TypeScript consumers, nothing is forcing them to obey your type annotations. In the former case, you can provide your own type annotations, but it's not completely safe unless you also validate at the boundaries. If they aren't publishing type annotations, you might be surprised when a type changes between versions. In the latter case, you have to judiciously validate your inputs. In short, at your application boundaries, you have to pretend TypeScript doesn't exist and still write all the boilerplate validation you adopted it to avoid. I think this is what the next few years of C# with nullable reference types will be like. Internally, you will get good analysis and it will help you avoid bad practices around null (that sensible C# developers have already worked around via `Option` types and whatnot.) But at your system boundaries, it will pay off to make 'redundant" null checks, more so if you're publishing an API you intend for libraries that do not use nullable reference types to consume. The problem is too many well-meaning experts are going to advertise this as "solving null problems", assuming that listeners understand "solving" is a relative term. But novices and journeymen are going to take this statement at face value and assume they never have to make null checks again. It's going to bite them. More and more I wish we'd just make a new language with all the cool modern features people want. I think C#'s stuffing is starting to show through the seams.
Then you can just go \[5..\]
I frequently do think about work related problems off the clock. I don't always have some grand realization pop into my head, but sometimes when I take a break from a problem I find that I may think about it a different way later on. I don't immediately log in to my pc remotely and implement it, I just make note of it and work on it the next day. If you don't want to think about work then by all means you don't have to, especially if the work just stresses you out. However, if it's more of a principle thing for you I'd advise that you reconsider it. If you find yourself in a moment where a problem you were working on earlier in the day comes up let your mind explore it again.
Having been a programmer 15+ years proper formatting is a matter of principle. I take pride in my code (if not, one should probably get another job). My co-workers do get to put up with me spotting a missing space from across the room, but hey, whatcha gonna do.
I'd still disagree. Comments are needed only when you want to convey your reasoning (e.g. workaround weird bug). When it comes to what code do, just follow clean code advice and split the method. What is more readable: method() { // Get a request var request = this.pullFromService(); request.something = this.pullFromAnotherService() this.actuallyUseVariableService(a) } or this... method() { var a= this.prepareRequest() this.actuallyUseVariableService(a) } prepareRequest() { var request = this.pullFromService(); request.something = this.pullFromAnotherService() return request; } When we haven't had IDE that would allow us to hop through code, small methods could be a burden. Nowdays, not only you have self-documenting code (And you don't have to care about specifics until you actually want to learn them), you can also pinpoint where exactly something is happening (so the bug is with request, and all of the code containing request is here...)
This has happened to me for all technologies I work with. Often, the solution comes to me when I'm not actually thinking about the problem, almost like my brain figured it out in the background and then waited until the moment I next started considering it to give me the answer. I'd love to see some research on this because it's a pretty common phenomenon by the sound of it. 
I barely think about my code AT work. 
Oh no, a compiler warning. Don't worry, we can just comment the whole file in case we need to revert later.
Ctrl+C, Ctrl+V, Ctrl+V master race ;)
VS can only conservatively detect unused code. 
I don't agree. Well designed and written code doesn't need comment. It speaks itself. You should comment only public API or when you do some kind of hack and you need justify WHY you do that. Don't comment WHAT you are doing, never.
Telerik is now a .NET Foundation sponsor, so they are blogging about it. It makes sense since they made their name making component libraries on top of WebForms and MVC. It's pretty obvious that if it takes off, they plan to make control libraries for Blazor too.
True, this syntax sugar is sometimes overused and causes one-line expression hard to read and understand.
I'm not sure, I guess view model first? Because the mainviewmodel is delegating all the view models to the different areas in my main view
I agree. When you follow the rules and principles after some time you are not able to write ugly code. It is impossible. This is what distinguishes professionals from others.
Yes, but its against my will. More of an anxiety issue aha. 
It doesn't appear to have any way to return which field caused the exception (for example in case of a MaxLengthExceeded error). 
I always say to less experienced developers - working code is not enough. It should be readable, maintainable, easy to change etc. This snippet looks like garbage even it works.
Yep. I'm a C#/Java/javascript/SQL/blah blah blah developer and i often solve some issues during the most unconnected situations. One of the most consistent times something has clicked for me or I've had a "Eureka" moment is when I'm out running. I guess the exercise clears what's left of my mind 😁
No matter how much you believe your code makes sense to you, today doesn't mean it will make sense to someone else or to you a year later. In my experience the people I see harp the most on self documenting code waste more time maintaining their own code than the ones that liberally comment. It's not that these people don't write self documenting or write bad code, it's that the code is augmented with extra information that makes the next stranger that gets to maintain its job that much easier. This is why I comment why I'm doing what I'm doing and what are the corner cases I've experienced or expect may come about in the future but don't have the luxury of time to address today. That being said commenting for commenting sake is a waste of time for everyone involved, but there can never be too much good comments. I don't understand why people make a point of pride about how few comments they have in their code. That's a person I don't want to work with. 
All the time, but not because it's work that needs to be done. I see it as a challenge that needs to be solved!
The problem is you need to update the comment when you change things. Especially long comments max be out dated. But it is true. Many people who say they write clean code, still dont use good naming
Sometimes using Service Locator is necessary - when framework you are using create instance of your class and you don't have possibility to indicate that should use your IoC container. &amp;#x200B; Property injection is useful for logging, because object often can live without logger. This is for what property injection is used - for OPTIONAL dependencies.
When do you think it will be Production ready?
Ah, thank you!
I recommend using a micro orm like Dapper. https://dapper-tutorial.net/
If its not from Oracle its probably [better than Oracle.](https://news.ycombinator.com/item?id=18442941)
Boom, roasted. But seriously, my house is a circus of 2 dogs, 4 kittens (2 fosters), and an SO who talks on the phone while watching TV. Critical thinking time is a gift not worth wasting.
University teaching is part of the problem. My teacher teached bad coding styles.
Service locator (bad) public class Foo{ private readonly IBar _bar; public Foo(IServiceCollection services) { _bar = services.GetRequiredService&lt;IBar&gt;(); } } Constructor injection (good) public class Foo{ private readonly IBar _bar; public Foo(IBar bar) { _bar = bar; } } Passing each individual interface into the constructor is the correct way to do things. The DI container does ultimately provide the IBar instance but the actual container should only ever be referenced in the composition root and helper methods specifically for building the container.
I don't think a page is a good measurement. Not only because it changes per each developer's environment, but mostly because it highlights the wrong incentive. We don't keep methods small in order to keep them fitting on your monitor. We keep them small in order to aid simplicity, testability, reusability, and a whole host of other reasons. Also, you mention 50 lines elsewhere. To me ast least, that's a _huge_ method. I look very skeptically at anything beyond 30 lines.
I would definitely say look skeptically at methods between 25-50 lines. 
&gt; any more than 5 tabs in a browser or code editor is probably too many. Is that per browser window? So its okay that I have 10 Chrome processes up with about 8 tabs each right?
Can you give an example of this? Do you mean like database sharding or something like that? On concurrency, do you mean with transactions?
&gt;Any class longer than a page should implement an interface. I agree with all except that. Why we need introduce interface right away? I think interfaces have other purposes - polymorphism and abstractions. I think we should introduce interfaces in that case only when code will be on various levels of abstraction because it violates Dependency Inversion Principle.
Maybe it’s not passion it’s just not challenging enough 
You may think that code is well written and it may make sense at the time- but I've worked on A LOT of other peoples code, everyone thinks that their code is well written and makes sense. The truth is: I mostly don't understand what people are doing or why they are doing it on first glance- and it makes my job a whole lot harder easier if there are comments to figure it all out.
&gt; Use a style bot, like StyleCop, to keep your code formatting consistent. Having a little code Nazi telling you what to do is probably the single best thing i've done to keep a consistent codebase. little tip, chuck treat warnings as errors into your csproj. &lt;TreatWarningsAsErrors&gt;true&lt;/TreatWarningsAsErrors&gt; Warnings are easy to ignore but as soon as things aren't compiling you're forced to go write your documentation and clean things up. 
When requirements change I have to update requirements document to keep it current. When I make an API change I have to update the Wiki and triple slash to reflect those changes. When my UI changes I might have to update the help document to keep it up to date. When I make a code change to address a bug my unit tests must be updated. Why would comments be any different? It's not neccesarily that others write bad code, it's that we all see things a little different. What makes perfect sense to us doesn't necessarily translate to the next person. And as your familiarity with the code base evaporates over the next year because you're supporting 8 different applications, a well placed comment imparting knowledge, or what you thought was stating the obvious a year ago, can save the next person (or you) hours or days to track something down or understand why some external API your stuck with works in a counter intuitive way.
As an aside... the entire .NET Framework is available to look at online. So for this particular instance you can look at how the Max() and Min() functions are declared [here.](https://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs) As a matter of practice and learning though I would advise against it before attempting your own solution first but its a good tool to keep at hand for the future.
&gt; comment the whole file Too much comments 
It's a part of DNC 3.0. I think they said they're aiming to these it during Q1 2019.
A "page" is basically "how much can conceptually fit in the average programmer's equivalent of RAM, not HD", so it differs by programming language. More terse languages naturally pack more into fewer lines of code, so a "page" in Kotlin is likewise smaller than a "page" in Java. A bunch of code with single-letter variable names is going to be more terse and harder to conceptualize than with long variable names, so keep it shorter.
That has not much to do with you work ;p ;p
As programmers, we are naturally geared toward problem solving. I don't know a single programmer that DOESN'T continuously think of potential solutions outside of office hours.
Wow
This rule isn't about coding style, but OOP design. A very big code smell in OOP design is a web of tightly coupled objects. That's bad. Think of the UNIX philosophy. A lot of small tools that do their job well, that you can use together to do bigger jobs. If you are *consuming* a class and it's got a billion knobs and buttons, it's complicated to use and provides too much opportunity to cut the fuel without turning off the ignition. If you're consuming a small interface that happens to be implemented by a complex class, then 1) You have a smaller profile to work with, and less chance to twiddle knobs you shouldn't be able to see. 2) Any changes that require changing the interface make it obvious which consumers it's going to affect and how you're increasing coupling between your objects.
Yes and no. If it's a bad bug, yeah, I'll get consumed. But I distract myself from work minutiae by working on other projects.
I like WarningsAsErrors on the build server (including buddy builds), but leaving it off locally.
In process database: SQlite, Access. Databases are treated like normal files. The database code runs inside your application. Out of process or server: PostgreSQL, MySQL, SQL Server, etc. The database is a separate program that your program talks to. Requires a lot of setup. 
Still need a connector a.k.a. database driver. 
ServiceLocator with passing the container around is an anti-pattern in an app where you could be setting everything up at the composition root, such as web apps. ServiceLocator has its uses in long-running apps where the registrations may actually change due to changing conditions, or you're using a dynamic loading / plugin model.
&gt;Avoid building monoliths I think this is not good advice because "it depends". Sometimes well designed and structured modular monolith is better than service/microservice based architecture which is distributed system. It depends on context. See [https://www.thoughtworks.com/radar/techniques](https://www.thoughtworks.com/radar/techniques) point 23 - "Microservice envy" &amp;#x200B;
&gt; There's no such thing as over commenting. Comments easily get out of sync with the code. Thus, comments are a liability that you must update as your code changes. Obviously, there's a proper balance. I don't believe in 100% self-documenting code, but clear code beats concise code with comments every time.
&gt;No matter how much you believe your code makes sense to you, today doesn't mean it will make sense to someone else or to you a year later. That is what code review is for. If the code doesn't make sense to reviewer you will be asked to change it. You either enhance the code to the point where it is understandable or you will add comment if you are not able make the code more understandable. No need to just add comment by default. &gt;but there can never be too much good comments. This is kinda starting to resemble circular logic. One property of good comment is it is not too long otherwise it will make it more tiresome to read all the text without any additional value. &gt;I don't understand why people make a point of pride about how few comments they have in their code. That's a person I don't want to work with. It is good to aim for low amount of comments, but you have to strive to make the comment unnecessary not plainly avoid it. Not writing comment just out of the pride is bad, but so is not trying to make the comment unnecessary. 
"Why" is always good to comment, as that doesn't change. "How" comments can get out of sync with the comments, and misleading comments are worse than no comments. 
This is what I do. Occasionally, I collect my stacks of notes on copy paper and put them in a binder. Sometimes it's fun to look back through older notes to see where my mind was at years ago and cringe. 
As someone who's dealt with the latter in this statement over the last couple days, There's a right way and a wrong way to do a service locator. But, if possible, a Decorator is a preferred approach. &gt; Property injection is useful for logging, because object often can live without logger. This is for what property injection is used - for OPTIONAL dependencies. I have to both agree and disagree there. Agreed that property injection *can* be useful for optional dependencies, but... Almost every logging framework out there would make this a moot point.
It takes a context switch to adapt to a new coding style. I can do it, but I shouldn't have to. Multiple coding styles in the same file just wastes cognitive time that I could be using to understand the design and logic, rather than visually parsing it. The One True Coding Style is *whatever the codebase uses consistently*. We have tools, nowadays, that make maintaining a consistent coding style practically zero effort.
My mom is an artist. She always said "don't be an artist unless you have no choice." I have the same kind of obsession about programming and maths. The best programmers program compulsively, whether they're in front of a computer or not.
I've yet to see a consensus on truly good SQL formatting. I work with people who *prefer* formatting where a 3-column insert on a script requires 10 lines (brace, variables, more braces, variables, brace) I like to put comments on Pull requests for formatting issues. First couple times it results in 'approve with suggestions', after that I wait for the change before I approve.
My bar for a comment is, "Am I doing something stupid here because of a weird bug or business rule?" If the answer is no, but someone can't understand it, I have failed at my job and rewrite for clarity. &gt; Many people who say they write clean code, still dont use good naming Guilty.
God.... But have you ever really spent a good amount of time with an Oracle DB? I'll admit I was shielded from the licensing costs, but once you got over the fact `IDENTITY` didn't exist and Numbers were evil and everything was a cursor... Yeah, I still like it more than MSSQL.
I literally once scribbled down a solution on a tissue with, I think, a marker. Barely readable, but it worked.
One reason why I don’t wish to work for huge corporations because I imagine legacy stuff and conditions like this. No fun. 
Anything that doesn't introduce eight bajillion hanging indents while it puts next-item keywords at the end of lines would be a good start, honestly. SELECT {stuff} FROM {somewhere} JOIN {somewhere else} ON {condition} WHERE {condition} AND {condition} That's my usual format. Compare to SSMS's usual format: SELECT {stuff} FROM {somewhere} INNER JOIN {somewhere else} ON {condition} WHERE {condition with unnecessary parentheses} AND {another condition with unnecessary parentheses} AND {a hidden condition you didn't even set in the editor that it decided to clutter your query with anyway} Yeah, I rage about it every time I have to clean it up.
Which rule? DIP? I know it is OOP and what you described is abstraction. I agree with that. But I don't agree with statement "Any class longer than a page should implement an interface. " because interface should be introduced with purpose. I have seen codebases where every class implemented some interface - it doesn't make any sense. If you have big class you can split it to smaller set of classes without interfaces because you don't always need abstraction.
Comparing to [Optional](https://github.com/nlkl/Optional), I like that you can't wrap `null` and have `HasValue` return true. I still don't like that you can call `Value` directly though.
Not sure whether we are on the same page. I take issue with: INSERT INTO {sometable} ( {col1}, {col2}, {col3} ) VALUES ( {valOrParam1}, {valOrParam2}, {valOrParam3} ) Because 9/10 times you could fit all the cols/valparams on one line and it would be *more* readable.
&gt; because interface should be introduced with purpose Absolutely. I don't think it's really a rule. I would phrase it more like "should consider implementing an interface, if it's a public class." Everything "public" is a liability, in a sense. "This is a knob you can twist." Interfaces are one way of saying, "these are the only knobs and buttons you should be pushing."
ViewModel first navigation occurs in ViewModel code, for example, open a view from the ViewModel. Generally, you need a ViewLocator for VM first navigation. I ask you because if you are using VM first, your view locator will need to find the views.
Ehhhhhh.... Shapes/Traits will have a hard time gaining traction. Don Syme (he is to F# as Anders is to C#) [is not a fan of traits/shapes, at least not as has been proposed thus far](https://github.com/fsharp/fslang-suggestions/issues/679#issuecomment-399411192). And since those features are typically found in languages closer to F#... well... here we are. You can do shape-like things even in older versions of C#, but there's still a bit of boilerplate. Less so than pre-default-interface java, at least.
Wasn’t it Alan Turing that figured out a problem while out for a run? My professor mentioned it once
My gut says this was a huge backwards compatibility thing. Either an internal subsystem or a vital set of customers had terribly un-fixable issues around this change. The tin-foil-hat-self says it's a platform that doesn't exist under NetStandard.
Surely there's a way to ignore projects for solution analysis?
Looking at my own one-year-old notes already gives me facepalms. I don't have the courage to look further back.
The issue really isn't a comment being super long or alternatively super short. The truth is a lot of developers don't comment effectively. Code should be self documenting, but sometimes it needs comments to back that up. Knowing when and how to effectively comment is a hard skill. Writing comments every other line of code with crap like "initially this varible" isn't that helpful. 
This is why I would have reworded, there is no such thing as a comment that is too long. There is a thing as a very ineffective comment. 
Was he publicly flogged 9 times?
I like the idea but the implementation is lacking: * Inheriting context from a custom type is a poor idea in general, because it prevents from using existing systems like [asp.net](https://asp.net) identity * I believe, it's possible to inject an exception handler using custom implementation of \`IStateManager\` that overrides \`SaveChanges\` / \`SaveChangesAsync\` or just implement a custom provider factory that wraps the underlying \`DbConnection\`(this would work even with EF 6). * Directly specifying exception type prevents from switching db using configuration only(rare case but still) * Implementing a custom provider factory would solve this * Only \`SaveChanges\` is overridden \`SaveChangesAsync\` is left unmodified
I mean it all depends really. Honestly at no point can you really completely abstract away everything. It's all about making it easier to switch, not making it completely plug in and play all the time. 
For a small, rarely changing query I agree with you. When the lists of columns are large I find the stacked list easier to match up the column name with the value/param, easier to add columns on to, and easier to dynamically generate / format with regex (as you don't need to think about name length vs where to put the line break).
I don't want to think about work outside of office hours but I still do it a lot just because I can't easily control it. Sometimes I'll even jump on the computer and do some unpaid work just so I can stop thinking about it.
Saving this to try it out. This looks interesting. :) A side note: I really wish github (git) projects would provide code examples *in the readme.md* file so I can quickly look at examples. :(
They never leave my head
Given the response, most people must never ever change their interfaces or use them to interact externally... Either that or never stay with the projects long enough to see it happen. 
An IoC container is literally a service locator internally. People do not seem to be grasping that. If it's an anti pattern, IoC containers wouldn't wrap the concept. 
I disagree this is very clean and easy to see where any mistake could be made. 
No. An IoC container is literally the Service Locator pattern. People do not seem to understand how things like autofac works. When you tell autofac to build a dependency, it has already mapped all other dependencies in a mapping that it can retrieve to return the instance of your object. That is the service locator pattern. It is not an anti pattern unless you abuse it in like I said, passing it to actual classes and methods instead of passing the dependency and allowing the IoC container to get the concrete dependency for you.
we use sonarqube, and it labels these as brain overload.
You can pretty much eliminate all style bots now that VS 2017 and almost all other major ides support the editorconfig file. 
I would remove `Too much comments` from the list. It is opinionated and can't be based on a metric applicable everywhere. It pretty much depends on projects, people, and specific case: some complicated algorithms better have comments, while "captain obvious" comments should be avoided. An the other hand, you can easily define maximum nesting for `Too many conditional statements` and maximum number of lines for `Too big classes/methods` that would work in almost every situation.
Or worse, negative if's. if(!something) { /* 100 lines of code */ } else { return null; }
Newbie here. Please, what's the title of Uncle Bob's book? 
This is one of the things that ReSharper really improved in my code. ReSharper aggressively suggests refactoring to reduce nesting, and it's made me more mindful in my day-to-day coding.
Yep, I totally agree. `Any()` would be better in this case of my `Where().Count()`. 
What is the solution to this logic?
I never knew this was a "bad" thing. Why is it bad?
For head it doesn't make sense, but it does make a lot of sense for many HTML tags to help you keep tracks of where you are in the DOM when editing. Something like: &lt;div class="sidebar"&gt; &lt;!-- Enough things that you need a scroll down in your editor --&gt; &lt;/div&gt; &lt;!-- End of sidebar --&gt; So when you have to add something to the bottom of the sidebar, you can put it in the right layer of the DOM.
"Clean Code" &amp;#x200B; It's written with Java in mind, but most if it still applies. Given the title of this post, I thought it applied.
I use NuGet.Server as well. We use TeamCity to do our builds and it copies the .nupkg files in the NuGet.Server directory.
You could group multiple clauses together like if(thisThing &amp;&amp; thatThing){ // do this } Or, depending on the situation, you could do things like return early. if(!thisThing) return null; Or if you're in a loop you could do things like loop(){ if(!thisThing) continue; // more code }
Again, it's a rule of thumb. For super simple classes, I don't mind using the real thing in tests. But for larger classes, I usually want to break a class away from its dependencies so I can test that it works correctly on its own, independent of the things its using. In order to do that, the thing it uses needs to implement an interface. &amp;#x200B; Another point here is about managing complexity. If the class more than a page, then making an interface can help you (and other developers) conceptualize what parts of it need to be public. It then encourages you to more loosely couple your things. And, if the interface becomes more than a page, it tells you that the class is likely responsible for too much, and needs to be broken down. &amp;#x200B; It doesn't apply in all cases. But just like when I see a long method, if I see a long class with no interface, it gives me pause. It's an easy thing to remember that can help me design better software in the long run.
This would be better: if(something) { return null; } /* 100 lines of code */ Or hell, if(something) return null; /* 100 lines of code */
Clean Code. https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship-ebook/dp/B001GSTOAM 
Thanks! I'll go get a copy and read it!
The sentence right above mentions that I usually limit myself to 7 windows. That's usually one chat app, one internet browser, one IDE/text editor, one command prompt/git prompt, one source control explorer, one windows explorer. I'll occasionally have more than one text editor or more than one browser, organizing more tabs into multiple sets. But my puny brain can't usually track more things than that at a time. &amp;#x200B; If you often find yourself actively working with 80 different web pages at the same time, I question if you could make better use of bookmarks.
That is the kind of that that can be fixed in about 2 seconds by running an automatic formatter (like the one built into Visual Studio or CodeMaid). I have Visual Studio configured to do this every time I save. You can even fail builds if the project's style is being broken. Those formatting issues aren't the kind of things to obsess over because you can automate all of them away.
The human brain doesn’t naturally make comparisons based on negatives. So your basically telling it: if not something than do something. E.g Read this and see which one is easier to compute mentally: If kid isn’t 5, give presents, else give party. If kid is 5 give party, else give presents. That being said I typically break this rule with string is null or empty checks since I don’t care to add the extra two lines and might not necessarily need to return out of the method. 
Ctrl-C is fine. Premature abstraction is only slightly behind premature optimization as an evil. The rule of 3 is a good guideline. https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)
Yup, and what's worse, it appears I think about it sleeping too, as several times I have woken up in the middle of the night thinking about it. Funny enough I usually wake up with a solution or a good part of one, which is probably due to overthinking it when I am awake.
In a focused way? No. That means no pulling up the code base, opening up an IDE, or reading/creating issues after work hours. Non-work hours are for rest and recuperation. Spend it away from your job. It doesn't mean that I might not turn the problem over and inside-out in my head while doing something else. At that point it's a mental puzzle and maybe I come up with a bright flash of inspiration. (Half the time, those are actually fizzles that don't pan out. But it works sometimes.)
It is usually a sign of other issues such as poor class design or property use, but is also typically coupled with return statements that could be done upfront to reduce nesting.
This is why I preferred the term 'page' to a specific number. Each developers cognitive limit is going to be different, and its going to be different also depending on the language and familiarity with that language. I agree that most 50 line methods are too large. Usually there's some reusable bit in there that gets refactored out the next time I reach for Ctrl+C. But occasionally, I'll have a bunch of configuration in a constructor, and I'll think "yeah, this is actually all pretty simple and straightforward, and there's not a bunch of nesting. Someone else coming and reading this would probably get it just fine." There's always a balance between too long of methods and too many small methods // too many layers of abstraction. Especially when writing test methods, I err on the side of less abstraction, longer methods, so I don't have to bounce all over the place to see what's going on. Basically, I don't disagree with you. If I find a natural place in my mind where I think of something as a series of high level steps, each step consisting of additional lower level steps, I of course use multiple methods for that. But I don't beat myself up or spend a bunch of time trying to shorten a method when I can already easily fit the entire thing in my mind conceptually.
Try writing it down. When my sister-in-law perished in an accident, I had a lot of trouble sleeping the first night. What about this? What about that? Got up, jotted down all my questions, and went to sleep.
Rider might be better at that, I'd have to look later. It has some code analysis features (via Resharper mostly) that VS lacks. Or just periodically delete the Test projects from the solution, run the analysis, and reset your working copy.
As it should...one coder's uninitialized variable is another's mistakenly thinking they are reusing an existing one.
It varies, sometimes reversing if blocks to reduce nesting makes the code harder to reach. Especially if there's a visual flow going on with if/else statements or the code is too cluttered and the early return would get lost in visual noise.
We usually do the 2nd approach, with all the early return statements at the top of the method and then one return at the bottom of the method. 
As a general rule-of-thumb, you should either return from a method right at the start (early returns because some condition wasn't met, or you're handling a trivial case) or once at the end of the method (returning the answer). In that particular example the "else" is handling a trivial case (`something` is true) so an early exit from the method is warranted. On a related note, returns in the middle of the method are generally bad. Do it right up top, or once at the end. Otherwise, refactor. (There's a rare case where the entire method is a set of if/returns or switch/case/return, but those methods are unusual.) It also lets you move those 100 lines of code one indent position to the left, making the method flatter (nesting often makes it harder to understand because you have to track braces).
I organize my workspaces by function (communications, github, CI/CD/testing windows, research, IDE, source control, misc). My browser windows end up organized that way as well (one on each workspace). How busy my tab set gets depends on how many things I'm tracking at the same time (usually one window per "thing"). Tabli (for Chrome) is useful for jumping around. If it's a day where nobody is bothering me, I might only have one tab open (the github issue).
I laughed at some of these honestly.
&gt; There's no such thing as over commenting. There is definitely the possibility of over commenting. It's another thing that you have to maintain in conjunction with the real code. It can get out of sync or out of date, so it has a maintenance cost. (And I do a lot of comments.) Good method/variable names will eliminate a lot of the trivial comments. The best comments are those that explain why a particular approach was used. Something not obvious from reading the code. Or when you're doing something clever on purpose that someone might muck with out of ignorance. 
Ew, `1..4` means 1 to 3? That's definitely screwed up.
It just happens. You will be struggling with a problem, go home and then it will just hit you. I use my phone to take notes.
Or could be replaced in some cases by a switch case statement.
It's hard to tell if the author has a poor grasp of what they're talking about or are just bad at explaining it. The first point may be true if you squint and assume they're talking about `IQueryable` or referring to an efficient use of man-hours, but the example is using the term "list" and seems to be talking about performance, and LINQ to Objects is less performant (if much more convenient) than manual loops. The second point sounds like the author doesn't actually understand the difference between `var` and `dynamic`. 
You'll want to work closer with your mentor on this one because there are multiple ways to do what you want. But here is a general idea of the 2 ways spoken about above: 1. Put your business logic in React. When you need data from the Web API, use Axios to call it, and use Reqct to bind that data to your page. 2. Put your business logic in C# (Controllers/Services). Then instead of calling the other API directly from Axios, you call your controller instead, which may call the other WebAPI. Only do this one if it makes sense in your application (third party API, other server side logic needed). I'm pretty sure the mentor is expecting you to do one, but I would speak to them to gain clarity 
This is pretty bad. Lots of misleading or downright wrong advice.
IDisposable is another huge offender. I’m not trying to flame anyone, but the author is marketing themself as an expert and seems to not understand the “mistakes” threat they’ve written about. The fact the article appears on Upwork, I feel gives it more credibility than it deserves.
Probably a case of fixing a complex problem and I have a ton of unused and commented it code that I'm using as references during this long ass problem solving session And then leaving it after...
Definitely have this. xunit 2 is one that really weighed on me that I haven't been able to figure out how to code properly for
Ima look into that, Im just getting some errors converting " char to char\[\] " for some reason, Is char\[\] just a char array Couse then That would make alot of sense.
Thank you, I thought like you. If i follow the second way, so this will like MVC right? And the View will be replaced by React, right?
I think if you use the [ExcludeFromCodeCoverage] attribute on your test classes it'll figure it out. The amount of dead code at my workplace is sad, but I'm unsure how to use analysis to find it all. Wonder if Sonar would find it.
Yes. You could just use your controllers as an API but I would stick with what your mentor is expecting. Good luck!
Yeah... so losing an arm to cancer is more of an exception than the norm where I'm from.... 
##### 2. Using “var” Needlessly When You Know the Data Type &gt; In many instances, you don’t always know the result, and “var” helps you to avoid errors from your code if a null or a data type that you weren’t expecting is returned. Anonymous return types are almost never used anymore, value tuples have pretty much completely superceded them. I *assume* that's what he's talking about, anyway. &gt; However, you should still define a data type if you do know what it will be. This helps with readability, so other coders can work with your code and maintain it without struggling to understand logic and output. Wrong. The algorithm is a lot more important than the data types. Types actually often get in the way of reading code, especially with complex generic parameters or meaningless interface names. For example, `var commandDispatcher = _someRoot.GetDispatcher(requestContext); var response = await commandDispatcher.ExecuteRequestAsync(myParameters); if (response.User != requestContext.User) Log.Warn("Requesting user is not authed.")` is a lot easier to read and understand at a glance than `IContextAwareCommandDispatcher commandDispatcher = _someRoot.GetDispatcher(requestContext); TypedCommandResponse&lt;User&gt; response = await commandDispatcher.ExecuteRequestAsync(myParameters); if (response.User != requestContext.User) Log.Warn("Requesting user is not authed.")`. ##### 3. Using Public Class Variables Instead of Properties A much more widespread and irritating mistake is people thinking they're encapsulating because they write `{ get; set; }` on the end of every field. Would be better to talk about that rather than essentially just advocating for "turn everything in to a property". ##### 6. Using Generic Try-Catch Exceptions Yes, but it's not really about 'efficiency', it's about not swallowing errors unrelated to the operation you're performing and/or not trying to handle errors you're not equipped to handle at that point in the code. ##### 7. Wrapping Entire Methods in One Try-Catch Block I mean, it depends? Sometimes if one part of the operation fails you just want to skip trying the rest of it. Try/catching a certain part implies you can sensibly continue with the rest of the method even after an error. ---- Anyway, yeah, this is one level above blogspam and you can probably ignore it. Personally I use `var` everywhere these days. Only time I don't is when I want to declare a variable of a type that is different from the one returned by the rhs expression. If you want some return-fire material for your boss you can send him this blogpost by Eric Lippert (ex-C#-compiler-dev): https://blogs.msdn.microsoft.com/ericlippert/2011/04/20/uses-and-misuses-of-implicit-typing/
Last time I searched our code base the most indented line was 13 or 15 tabs. 
LINQ is also more difficult to read for a newbie 
&gt;13 or 15 tabs. ??? 
That just marks code so it doesn’t count towards untested code in coverage reports. The issue I have is that the production code might not use some method anymore, but it still has tests that use it. VS doesn’t know those are tests so it still thinks the code is used.
13/15 deep in scope. So you might have a namespace, a class, a method, and then 10-12 brackets within that method
Exactly
Doesn't unloading the test project fix this?
The anti-pattern only applies when the ServiceLocator is hiding the dependency. ctor(IDependency dependency){} vs ctor() { ServiceLocator.Resolve(IDependency) } The second is considered an anti-pattern because not all dependencies are known about at the time of construction by the caller. 
Yes...But we have a large solution, 60 assemblies, half of them tests. Unloading is a PITA and I can’t automate that. Ideally this would be part of CI build.
I don't think about it, but my brain is usually working on stuff in the background. When things get quiet (drive home, sitting on the can, making lunch for tomorrow) sometimes a solution will hit me. Usually, I send a note to myself about what I thought about. I just slack my "me" channel, or send an email or whatever, from my phone. It's really no big deal, but the funny thing is, it makes going to work the next day more fun. I'm eager to put my idea into effect.
I don’t think people realize the maintenance cost of code. Every line of code costs you time and this money. Any refactoring effort will be larger when half of it is unused. Any time I change code to fix or add a feature I always review surrounding code to see if i can remove any. 
Unit testing greatly benefits from thorough use of interfaces. 
TL;DR not a single point made here is correct. 1. Completely wrong. It has nothing to do with efficiency. `where` keyword does exactly the same as `if (customer.State == "FL")`. And actually the LINQ version is slightly less efficient since it has to instantiate two iterators: one for the `where` statement and one for the sum. And remember that the LINQ code is just a syntax sugar and is equivalent to ```csharp var balanceSum = CustomerList.Where(x =&gt; x.State == "FL").Sum(); ``` 2. Possible confusion between implicit type, dynamic and anonymous types. 3. No such thing as "public class variables". Those are called "fields", either instance fields or static fields. 4. Not disposing doesn't necessarily create memory leaks. That's because the semantic and usages of Dispose has been greatly augmented because of the `using` statement. It is good practice to do it anyway. 5. `""` is actually slightly faster than `string.Empty` (interned const string vs. static readonly). But I agree that for readability `string.Empty` is better. 6. Nothing to do with efficiency. 7. Opinionated. Differ from case to case. 8. Depends if the strings are literals are constructed at runtime. 9. "Always" is dangerous here. There are some cases when you don't want (shouldn't be allowed) to log user inputs (privacy or security concerns being two). 10. Has nothing to do is that article.
If it's just straight up columns, then yeah, I agree with you. Put it on two lines (one for the INSERT and one for the VALUES). But the moment you start putting calculations into that select list, it can be far more readable to break that out onto separate lines.
That last one seems common for anyone who hasn't used `var`. They instantly think it means dynamically typed rather than just being a timesaver since the type is already implied on the other side of the `=`.
It never ends.
Got sacked for that once - the idea of course they kept.
Yep, also tough to tell if you have unused web services - or code that is only called by unused web services.
The last project I worked on I deleted 50% of it. The current one so far about %30. It is bonkers.
I think if you really like problem solving and coding, its easy to slip into after hours. I think of little else outside of my cpu most day.
Search nuget package manager for the mysql driver. Look at how to use the "using" statement when talking to the dB server so that everything gets disposed nicely. 
The latter would violate our code style and get your commit rejected from a merge. _All_ brackets are mandatory. Everywhere. Always. No buts.
There is no such thing as self documenting code, because code can only ever tell you what, it can never tell you why. Why is what you really need to do. 
Our style is that either it has to be on the same line if it's just a single statement, or enclosed by brackets. Prevents accidentally putting code outside a conditional, yet conserves vertical space.
&gt;If the method is longer than a page, refactor. While I agree in concept, we've tried using this as a hard rule and reverted to a more simple but subjective "break up a function if it's too complex", because we found that code can be extremely simple to understand, yet be longer than a page. For example, a function with few conditionals can be relatively large, yet easy to understand, since it's largely linear. We just use SonarQube and have it flag overly complex methods.
Best to be combined:-)
That’s what’s git for. Commented code is full of errors, because the other code around changes and it isn’t covered by tests. There is no reason to have commented out tests when the feature your working on is finished (should be the case in a code review)
Try splitting that line up and testing each part. e.g.: var section = Configuration.GetSection("AppSettings:Token"); var sectionValue = section.Value; var bytes = Encoding.ASCII.GetBytes(sectionValue);
How do I get my code formatted like that? I’ll certainly try your suggestion. I’ve tried all I could think of.
&gt;That’s what’s git for. thatsthejoke.jpg
It's fine, people are being too nitpicky. I usually go with whichever form sounds best if you were to say it aloud. 
How to boost your venture with cross-platform [mobile app development](https://www.fluper.com/mobile-app-development) tools? Visit Here: [https://www.fluper.com/cross-platform-application-development](https://www.fluper.com/cross-platform-application-development)
I have seen to many people doing exactly that. :-/
Why are you using GetSection? You are trying to get a single value by specific key. Try GetValue instead.
I don't think there is a way to find that from the exception
Hope this helps. startup.cs services .AddAuthentication(options =&gt; { options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme; options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme; }) .AddJwtBearer(options =&gt; { // Turning off for dev mode, needs to be ON for production options.RequireHttpsMetadata = false; options.SaveToken = true; options.TokenValidationParameters = new TokenValidationParameters() { // The signing key must match! RequireSignedTokens = true, ValidateIssuerSigningKey = true, IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration["Tokens:Key"])), // Validate the JWT Issuer (iss) claim ValidateIssuer = true, ValidIssuer = Configuration["Tokens:Issuer"], // Validate the JWT Audience (aud) claim ValidateAudience = true, ValidAudience = Configuration["Tokens:Audience"], // Validate the token expiry ValidateLifetime = true, RequireExpirationTime = true, // If you want to allow a certain amount of clock drift, set that here: ClockSkew = TimeSpan.Zero }; }); services .AddCors(options =&gt; { options.AddPolicy("Whatever", bldr =&gt; bldr .WithOrigins(Configuration["Tokens:Audience"]) .AllowAnyHeader() .AllowAnyMethod() ); }); appsettings.json "Tokens": { "Key": "supersecretsigningkeytext", "Issuer": "https://localhost:XXX", // api app "Audience": "http://localhost:XXX" // client app }
Hope this helps. This works for .net core 2.2 if anyone is interested as well. startup.cs // START - Make sure this is in the startup constructor public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } // END // In the ConfigureServices method now... services .AddAuthentication(options =&gt; { options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme; options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme; }) .AddJwtBearer(options =&gt; { // Turning off for dev mode, needs to be ON for production options.RequireHttpsMetadata = false; options.SaveToken = true; options.TokenValidationParameters = new TokenValidationParameters() { // The signing key must match! RequireSignedTokens = true, ValidateIssuerSigningKey = true, IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration["Tokens:Key"])), // Validate the JWT Issuer (iss) claim ValidateIssuer = true, ValidIssuer = Configuration["Tokens:Issuer"], // Validate the JWT Audience (aud) claim ValidateAudience = true, ValidAudience = Configuration["Tokens:Audience"], // Validate the token expiry ValidateLifetime = true, RequireExpirationTime = true, // If you want to allow a certain amount of clock drift, set that here: ClockSkew = TimeSpan.Zero }; }); services .AddCors(options =&gt; { options.AddPolicy("Whatever", bldr =&gt; bldr .WithOrigins(Configuration["Tokens:Audience"]) .AllowAnyHeader() .AllowAnyMethod() ); }); appsettings.json "Tokens": { "Key": "supersecretsigningkeytext", "Issuer": "https://localhost:XXX", // api app "Audience": "http://localhost:XXX" // client app }
Just indent it 4 spaces.
/r/raerth/comments/cw70q/reddit_comment_formatting/
Do yourself a favor and use Postgres.
This is an advanced level project. You will find it to be a challenge. For serial I/O look here: [https://docs.microsoft.com/en-us/dotnet/api/system.io.ports.serialport?view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.io.ports.serialport?view=netframework-4.7.2) There are many different databases you could use. For a fairly standard and free one you could look at MySQL Community Edition. There are a couple of ways to do the UI. I've been a backend/server guy for years so that's outside my area of expertise. &amp;#x200B;
I'll figure this out for $20k.
Which I have agreed with many times :). I personally feel the term anti pattern is being thrown around way to often lately. Can a pattern be abused? Sure, that does not make it an anti pattern, or else nearly every pattern is an anti pattern
Thanks for the suggestions! There is already an issue about your first point and I will add another way to avoid having to implement from custom dbcontext. As for custom IStateManager or DbProviderFactory can you tell me how can I inject a custom implementation? Also, what do you mean by `Directly specifying exception type` ?
That's true, but even if an automatic refactor doesn't help, it's still an indication that \_something\_ could do with a rethink.
Work for a .NET outfit with SQL Server. No stress, easy job, all the £££
I think that: var orderDetailsList = new List&lt;OrderDetails&gt;(); is correct. For example: var orderDetailsList = new List&lt;OrderDetails&gt;(); foreach(var order in orders) { var orderDetails = new OrderDetails(order); orderDetailsList.Add(orderDetails); }
I use a large font size in my IDE, so I only get 29 lines to work with.
This used to be considered bad practice.... 
There are rules, but at times for code clarity, they should be broken. &amp;#x200B; The catch is knowing when to break the rules.
`// Gets the user` `public User GetUser()` `{` `}`
* There is an argument that the second time you write it you don't really know the abstraction, so do it on the 3rd time you need to implement the same thing. Take it with a grain of salt, but its worth knowing. I see too many Junior developers abstract everything way too early because 'I will use this again' and we end up with complex messy code. * If an interface serves no purpose its just noise. * StyleCop has been around for 20 years or so, do it :) &amp;#x200B;
[user.Name](https://user.Name) &lt;-- is that their real full name, first name? is it an email address? (this happens), is it a pseudonym? Commenting has its purpose, it provides common ground. ON the other side of the coin adding a comment on a GetUser method that states // Gets the user needs to be deleted.
You are asking $ 20,000! 
Is it not just easier to use the keyboard shortcut to perform the build?
The bigger the project is, the worse this idea becomes. If you are building to spot syntax errors, rather update to VS2017 with the Roslyn compiler. 
\&gt; What I mean by introducing a layer of abstraction is to ensure that your code business domain isn't depend on a single implementation I try to accomplish that too, though I think that abstraction is just less feasible for frameworks than for libraries. If you have a library with a limited interface, then yes, I agree with you that you should try to encapsulate it, but if you have a framework that requires you to structure your code in a certain way... if you ask me, then you're SOL, with ORM being the best example I can think of, because it requires you to have entity-classes with a bunch of annotations, plus you get the DB-context for your queries. The repository-pattern is a partial solution to that, but you need to implement a lot to make it as good as LINQ, which offers async streaming, function-to-where-clause translation, joining, etc. If your repository is too bare-bones, you risk having people shoddily implementing SQL on top of it, with a huge, added inefficiency, and if it's really rich, then you'll either have a hell of a time implementing it for another ORM or - worse - you'll have non-documented feature disparity between various implementations, e.g. the new ORM throwing an exception because it doesn't support pagination.
Why the hell would anyone want this? Just press f5 if you want to build and it will save before building. 
Yes, it’s just an array of chars. What exactly would you like to do here? Converting an int to char array doesn’t seem that usual
&gt; At the time of writing, Razor Components is still called ServerSideBlazor in the related APIs. Could we keep that? Because at this point in time we have like 50 different types of "Razor" and frankly this ambiguity is just annoying.
Guys . am an open source background developer . in node js , there is a package and configuration to compile when ever u save . # This Save a lot of time . even in php laravel . there is the serve command which recompile when ever you save . 
I would tend to agree that \`\`\` decimal price = GetPriceInLocalCurrency(product); \`\`\` conveys more information when all you have is the code to read. But that benefit goes away when you use an IDE.
There's version control for that...
Maybe you have a reason for this "SystemFile" class later, but until then I would simply use System.IO.File.ReadAllText(e.FullPath). As for decoupling classes, I don't see a reason to do so in your case. Are you familiar with the practice in another programming language or is C# your first?
As this stands, you'd probably need an interface on SystemFile and FolderMonitor would need to take a factory method to build SystemFile objects returned as the interface type. If this is all the code, though, I don't really see the point.
All I can suggest is start simple... See if you can find a manual that can tell you the port settings, baud rate etc, and hopefully some indication of the protocol (i.e. does it just dump data out to the serial port or is it going to have some text interface where you make requests). Then write a simple console app, open the port, figure out how to get it to send you the data. Once you have that figured out (and by then you will know if the project is feasible) you can move on to visual side of things and data storage. If you are a beginner then this first stage shouldn't be too hard, but the latter parts will take more work. Good luck! 
Hmm you're right. It just removes the tests from the report. Some googling appears to show one way is just unloading test projects and running usage analysis that way. 
Neither JS nor PHP are compiled languages... 
Learn MEF
Don't forget Razor Pages!
Hi Abu, As @i12batree said, you should first look into just getting data from the HA-device (Hematology Analyzer). [https://docs.microsoft.com/en-us/dotnet/api/system.io.ports.serialport?view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.io.ports.serialport?view=netframework-4.7.2) (credit: *mcg42ray*) When you're able to dump this information to the console, then you could look further into how to make your program parse (understand the data). RS232 data will most likely be ASCII (regular text), so probably human readable (if not, you would need to lookup RS232 protocol specifications on the HA-device.) ***Lookup: Regex, string split etc to solve this*** After your program is able to understand the information that is sent from HA-device, you could then attempt to put this into a MySQL database (recommended). When you've been able to do this, you could look at how to present the data to the user. Which will be much easier for you after the data has been collected. Please ask me anything if it was hard to understand my answer!
Aye! Don't forget that they're CSHTML files just like the .NET Framework MVC files. The Framework pages *aren't* Razor pages though, they're just CSHTML files with Razor Syntax! Aagh.
If they're partial classes and the constructor signature is the same you can re-use the class-level variable, can't you?
I can... But it seem like it skips the second constructor when I run my code, it only runs the constructor from ViewModel.cs and not in the Viewmodel.commands.cs.
That article isn't very good. On mid or larger teams, using var is about minimizing code conflicts and merge errors when refactoring method, property, and field signatures. The readability factor is kind of a moot point, you should be using your IDE to see the type by hovering over var or over the expression that is giving you the result you are assigning to the variable. In reality, functions and expressions can return objects or values that can be implicitly cast or assigned as other types, so if you ***really*** want to know the type of a variable (or what it could be) you'll have to check the signature of your method or expression anyways. For example: `decimal someValue = 1;` You are assigning an integer that is implicit cast to the decimal. With interfaces (or inheritance) there is a similar implicit cast: `IEnumerable&lt;Customer&gt; customers = customerService.GetActiveCustomers();` Just because the variable is IEnumerable&lt;Customer&gt; doesn't mean that GetActiveCustomers is returning that. It could be returning a list, an array, or any of hundreds of other types that implement IEnumerable.
well i disagree on that . php is kind of a compile and interpreter langauge . and javascript is some how compiled language too . both of them are neither compiled or interpreter some how both. there is a along discussion why am saying that . Thank you for your replay bro . and i meant by my words above that in both languages you don't need to run some thing to make your changes work . you can configured them so that you don need to do it manually \^\^
You can never run two constructors for a single class instantiation. &amp;#x200B; What you can do: public class Test { public Test(ILog log) : this(log, string.Empty) { } public Test(ILog log, string param) { } } Now you can create an instance of test with either new Test(log) or with new Test(log, "some string")
Every language ever is compiled down to binary at one point in time - otherwise you couldn't get binary code to run on your CPU... Point is that neither of the languages have a mandatory compile step that generates binary/intermediate code. Why this matters is because if you, e.g. write c, a single header file change could lead to a hour long rebuild. In java, an enum change could lead to the same... Do you really want to get into a situation where a save takes a quarter second one day and 15 minutes the next?
I'm not 100% sure I understand your question, but partial classes don't have independent constructors per part. It's just a code organization feature, it doesn't change the behavior of the class or the rules for constructors.
Removed: Rule 4.
Either do what I-Warez suggests or just consolidate your code into one of the constructors (assuming the signature is the same).
Removed: Spam. Please review and follow the [guidelines for self-promotion on reddit.](https://www.reddit.com/wiki/selfpromotion)
If you're not stuck with MySQL you can get a free version of SQL Server, or use other relational databases such as SQLite or Postgres
i think you need a base class i.e. car(): vechile()
Write an Interface for SystemFile. Pass a Factory to FolderMonitor as a Constructor Parameter. public interface ISystemFile { void StreamContent(int refreshInterval); } public class FolderMonitor { private readonly Func&lt;string, ISystemFile&gt; _systemFileFactory; public FolderMonitor(Func&lt;string, ISystemFile&gt; systemFileFactory) { _systemFileFactory = systemFileFactory; } // ... }
Sad but true.... Too many Programmers don't care about warnings when there are thousands of them... If it compiles it's fair game.... Also no one ever deletes commented out code incase someone needs it... If I see it and it's a year old I delete!
&gt;: this(log, string.Empty) &amp;#x200B; What does this part do? : this(log, string.Empty) 
lol whos is giving me negative points , am not inventing this guys . Search for it . [php discussion](https://stackoverflow.com/questions/1514676/is-php-compiled-or-interpreted) [javascript discussion](https://softwareengineering.stackexchange.com/questions/138521/is-javascript-interpreted-by-design)
It forwards the log parameter from the constructor to the other constructor and supplies a default parameter for the required parameter of the constructor it is calling.
Have you looked at PluralSight? I think most of their courses are really good
why
I would like to not follow a course. I would like to do it myself, with trial and error and looking up specific things. I just need an idea for a side project, something that would make me learn these topics. &amp;#x200B;
A budgeting app is something I always attempt for learning new tech
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/dotnet] [Suggestion for side project to practice (and understand) .net core MVC?](https://www.reddit.com/r/dotnet/comments/a5tm6c/suggestion_for_side_project_to_practice_and/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
What's wrong with instantiating a SQLSettings to hold your settings? At some point the rubber needs to hit the road, right? `MyDataAccess.Settings = new SQLSettings() { ConnectionString = @"data source=...";}` That's fine for now, and should be fine if your application is running on your machine, etc. As your application grows you'll want to add more features to loading settings i.e. getting the settings from a configuration file, or loading the settings from a service. Based on your question, the goal is to learn/use WPF. Don't get bogged down in figuring how to secure your application's configuration settings until you need. Just my two cents. 
this is what I would do!
This is general rule. Of course there are exceptions but even complicated algorithm can be implemented with minimal number of comments. The worst thing is scenario when there is algorithm change and you have to change both code and comments. And comments cannot be compiled so sooner or later will be mismatch. This is why is better to focus on create self-documenting code.
I understand where you're coming from, but besides IncrediBuild I'm not aware of any extension that speeds up the building. And I doubt that one supports VS2013 (that version is **really** old). I don't think building on saving is feasible. I edit a lot and frequently save. If the compiler would always run, then the resources of the machine are not available for the tasks related to writing code (IntelliSense, syntax highlighting, etc). Instead you should try to consider improving your workflow where you don't always need to build and start the application. Code more, build and run less. Try adopting automated tests instead and utilize auto test-runner like VS Live Testing or NCrunch.
Something I did when learning .net core and mvc was to create a blog with user authentication and authorization. Sign in, make a blog post and return to the home screen to see a list of blog posts with a small preview. 
If you're not looking for some kind of course then the question of, "What to build," is mostly subjective and pretty much up to you. Just about any site you may have built prior to using some sort of MVC pattern can almost certainly be adapted to use the MVC pattern. If you're already familiar with ASP.NET MVC then picking up Web API shouldn't be terribly hard, as it pretty much just removes the V part of MVC and leaves that aspect up to the developer. You can have a Web API backend and an ASP.NET MVC frontend, or you can use Angular, React, Vue, or whatever strikes you fancy.
I would send some code but I’m currently on mobile. Initialize “int suma = 0;” before your for loop and put “suma = suma + i;” inside of your for loop. After your for loop you can write “console.log(suma);” and it should be the correct answer.
Make a chat room. Like they did when they dropped net core. 
You could use a counter inside the loop. But since *summa* is set to zero and *i* always will be 900, there no point.
You could get the string with the detailed error returned by the database.
Protip: Don't write code in Swedish, but in English. Specially if you're asking for help. (try reading code written in mandarin as variable names!) Also please post your assignment, because then it would be much easier to help you towards your goal.
That's a good idea actually, I'll keep that in mind.
Decoupling too much can create a maintenance nightmare also. There will always be a dependency on SOMETHING, sometimes it is minor enough to not care or decouple it.
And if you do it twice does it become an anti-anti pattern?
Agreed. In this case, my inclination is probably to consolidate the contents of SystemFile as a private method on FolderMonitor, unless there's something significant going on with these that isn't captured in the excerpts we've got.
I have actually been making a manager for tasks. Like quick assign to other users, track time used and things like that. As a side project its easy to create and there are lots of things to build on top of it.
You forgot one... * Duplication &amp;#x200B;
Is this what have in mind? Console.WriteLine("Skriv ett heltal:"); int inmatat = int.Parse(Console.ReadLine()); int summa = 0; for (int i = 0; i &lt;= 900; i = i + inmatat) { Console.WriteLine(i); Console.WriteLine(900 / inmatat + 900 % inmatat); summa = summa + i; } Console.WriteLine(summa);
I'll give two examples for how to do this, though these are definitely not the only two. First, slightly more "functional" is with a factory method delegate: &amp;#x200B; class FolderMonitor { private readonly IFactory&lt;string, SystemFile&gt; \_factory; public FolderMonitor(Func&lt;string, SystemFile&gt; factory) { \_factory = factory; } public static void StartMonitoring(string Folderpath) { var watcher = \_factory(Folderpath); watcher.Created += new FileSystemEventHandler(OnCreated); } } &amp;#x200B; Which you call like this: var monitor = new FolderMonitor(p =&gt; new SystemFile { Path = p, EnableRaisingEvents = true }); &amp;#x200B; This way decouples things without having to add a bunch of new classes and interfaces, but might not work well with a DI container. Second way would be to add something like this: &amp;#x200B; public interface ISystemFileFactory { SystemFile Create(string path); } &amp;#x200B; And then inject it into the monitor constructor and call it like this: &amp;#x200B; class FolderMonitor { private readonly ISystemFileFactory \_factory; public FolderMonitor(ISystemFileFactory factory) { \_factory = factory; } public static void StartMonitoring(string Folderpath) { var watcher = \_factory.Create(Folderpath); watcher.Created += new FileSystemEventHandler(OnCreated); } } &amp;#x200B; Both approaches are very similar, conceptually. One uses a method and the other and object, but it's the same idea. 
Paging is the process of writing RAM to HD so that's not the analogy I'd go with ;)
why you're using spaces before dots?
It's not a requirement of being a programmer. I know a lot of coders who work their nine-to-five and then turn off that part of their mind, not to think about it again until tomorrow morning when they log in. In fact, most coders I know do this and they work out just fine. I personally do tend to think about coding issues and problems in my "off" time, but I really enjoy it and I do open-source stuff in my free time. If you draw more of a line between your work and your hobbies, you probably won't have any issues.
The easy answer to the question is "because this is what Java does". For a while C# had extension methods and Java had default methods, and people argued about which was better (I think C#'s extension methods were more flexible, but it was obviously more verbose to need a second class with extension methods than to just stuff them into the interface directly). I do worry about some of the complexities of multiple inheritance and what the resolution rules will be when multiple interfaces define conflicting default implementations of methods with the same name, or how this feature is going to play with explicit implementations, especially in legacy code. I think there are going to be some "gotcha!" problems popping up that will sour the water a little bit.
Yes, learn a completely new framework to do the most basic abstraction. Or just learn interfaces.
You just proved my point you didn't write self documenting code. I don't understand what you're trying to get at with that one.
You're getting downvoted because you're muddling a lot of things, and being generally adversarial. Unless your directly writing opcodes for a very primitive CPU, every single language is 'technically' compiled, and every single language is also 'technically' interpreted after that. That makes the terms a little meaningless for exactness, but everyone generally understands what it means to be a 'compiled' language vs an 'interpreted' language. I'm going to throw out a super simple definition, and while I'm sure we could dice out 100 different exceptions, this is just a general understanding and agreement, not a binding definition, because again, technically every language is both compiled and interpreted. I wrote a program that you are running on your machine. You discover a bug, and I fix it. I now need to send you a new file with that fix. I send you the file, and you replace just that 1 file on your machine, and the bug is fixed. If the file I sent you was entirely printable ASCII characters, it's an interpreted language, otherwise it's a compiled language. In PHP, I will be sending you the source file. In C#, I will be compiling it on my machine, and sending you the .exe or .dll or whatever. To answer your question, C# takes longer to compile because it's a compiled language. You don't need to compile unless you're about to run. Anytime you compile, VS will save before compilation, so you could just choose "Build" to always save+compile. I'm also wondering how much time you would really be saving by waiting on compilation for every single save. Also, later versions of VS, like 2018, you can directly edit code and change execution paths while debugging. Another huge reason for downvotes is because you're asking an X Y problem, you're asking for the solution for X, but your workflow is probably really weird, and you shouldn't be doing X, you should be doing Y. Whatever you're doing, where you are losing large amounts of dev time to compiling c#, is probably something you shouldn't be doing.
Step 1. Acquire the book: “Dependency injection in .Net” Step 2. Read it. Step 3. Read it again, slowly, understand it. Step 4. Profit. 
Not sure why you are being downvoted -- MEF is amazing. It is kinda like WCF, though, in that it is relatively easy to "get up and running" but becomes complex when you start trying to do anything "fancy".
This. Unless you’re doing it as a requirement or an exercise, you’re introducing unnecessary complexity. 
I'd say your best bet is to upgrade your visual studio version. 2015+ uses Roslyn and builds your app in the background and I almost guarantee the extension utilizes that. 2013 writes the build to disk and as others have mentioned your latency on keypress will be abysmal if you end up getting what you propose working.
Easily one of the best and most useful software books ever written.
Oh I'm talking WEIRD, like "this cat needs to be perfecly smooth and spherical, but it needs to keep its limbs somehow. I shaved it and buttered it but those damn limbs..."
Wow. When I read this in my inbox I was wondering what on Earth I could've said that warranted such a random reply. Truly a r/nocontext moment.
I remember when I was first learning .NET one of the things I made was a simple web forum. It had topics that you could click on, that would bring you to discussions that your could reply to.
Because you hate your colleagues. 
Lol, that “php discussion” link literally states it’s an interpreted language, or when configured right, compiled at run time, so you wouldn’t need to compile ahead of time anyway. You gonna want to read the things you’re posting to prove your post.
You can't, not really. While you can eliminate compile time coupling through abstract layers, run time coupling still exists and that's the important one. 
I dunno. I like the idea in concept, but I think the proposal *really* moves interfaces away from what they were meant for. A couple of months ago, I [posted](https://www.reddit.com/r/csharp/comments/9gxtzc/proposed_changes_to_upcoming_interface_defaults/) my ideas for a change. Basically, create a new construct called an `interface default`.
Is there any way to use code contracts to get around compile time validation?
It is useful, but I don't think it helps OP in any way. That's my take on the downvotes.
Put all tests in test solution folder, unload the folder?
Are you sure you didn’t just have warnings hidden previously? Regardless, you can ignore this unless your application needs to handle edge cases well. Modern browsers no longer have performance issues with unqualified attribute selectors.
That's what we do, but that means we have maintain multiple solutions and it also means working this sort of check into a CI build is difficult. There are ways to get get around it, but if I could flag an assembly as a "testing" assembly that would be best.
For the CI build, use a dedicated build configuration that only builds prod code?
Funny, I'm actually making a personal finance app as a way to get deep into asp.net core and some of the nicer architectural patterns. I've realized just how much work can go into *properly* setting up a codebase architecture for a large application. I'm 2 months in (side project, so not constantly working on it) and don't even have a single endpoint yet. It's all been unit tests, model validations, architectural design (lots of pondering and reading as no one size fits all), and setting up clean and easy to use patterns that protect the developer from themselves. It's been a blast though.
Yeah, but like I said, you then have a maintenance issue. A dev would create a new project, but forget to add it to this other solution file, etc. There are work arounds, it would just be nice if, for example, I could specify the output type in the project settings to be "Test Library" so VS would then know that all the code in an assembly was meant for testing purposes and could do things like 1. Ignore it for dead code analysis 2. Ignore it or list it after production code when doing "find all references" or in the CodeLens window 3. Not count it toward references 
Paging is writing *a page of RAM* to HD. It's a metaphor for Virtual Memory taken from the idea of looking at a book, and the pages in RAM are the ones you are looking at. Turning the page is paging some RAM out to HD, then reading the next page back into RAM. Virtual Memory in modern OSes works a little differently, with writing and reading in advance.
The point of using abstractions like that is to separate the parts that change (or are likely to change) from the parts that don't, or don't change as often. For this, you might want to consider separating the parts that interact with the file system from the parts that interact with the console (separation of concerns) and manipulate both in some kind of orchestrator class that manages how the 2 interact with each other. 
&gt; when there are thousands of them That's the real problem. When there's just one or two warnings, you know something's wrong and go fix it. But when you have a legacy project warning you can't even browse, yet it "works fine", you don't find the motivation to get rid of them.
What ever your hobby is see if there is an api for it. I love Runescape, so i made a xp tracker forit using their [api](https://runescape.wiki/w/Application_programming_interface). A buddy loves hockey, he's making a ESPN live stats copy from this [api](https://gitlab.com/dword4/nhlapi/tree/master). There's all kinds of api's for almost anything now, just find one for something you are interested in or have a passion for and will make the project much more fun.
This just seems like level up life type stuff too. Build life skills with your technical skills. This just seems like a nonprofit waiting to happen. (Where you at FreeCodeCamp.com?)
Hey I love runescape too! Ive never used an api so maybe Ill dabble in that one :)
Another thing could also be If this is a shared project or there is a shared project higher up in the folder structure that has a .editorconfig file
Just plain not true. You are doing something else wrong. Microsoft (R) Roslyn C# Compiler version 2.10.0.0 Loading context from 'CSharpInteractive.rsp'. Type "#help" for more information. &gt; public class Parent . { . public string Data { get; protected set; } . } &gt; public class Child : Parent . { . public Child() : base() =&gt; Data = "Test"; . } &gt; Child child = new Child(); &gt; child.Data "Test" &gt;
Even with your important change (was it making "child" be declared as a "Parent" instance?), I don't see the issue. I'm sure whatever your problem is, it exists in the full code, but not in your snippet. Are you sure you're not making some virtual calls in the Parent constructor or something? 
Sweet! Always glad to find another scaper! The endpoints usually work for both Old School and Rs3. Also if you ever have any questions about the api or where to get stuff from it feel free to ask! My rsn is the same as my reddit username. I made a Xamarin Form's app a while back for Rs3 that tracked VOS, Player High Scores, and would look up the GE. So i know it decently well.
Solved: I figured out what was wrong. The class that held and instance to Parent was an EF object with a json serializing and deserializing property. In short, even though the object wasn't being saved to the EF data context, when it was being constructed, the serialize and deserialization methods has been called somehow. Once I set the json serialization settings to retain types everything was fine. 
I'll add *Head First Design Patterns*. It's like a *For Dummies* book for smart people who want to learn a complex topic.
Sweet, yeah Im more for osrs, but rs is rs eh :)
&gt;Like if I change title from the test function in ViewModel3, would it also change the title in the ViewModel1? Depends on how you have your dependency injection configured. If it's passing in an existing instance (which seems to be your goal) then yes. As to your main question, Property vs field just depends on use case. If you're only using it internally and there's no databinding or outside access required then just stick with a field - you can always add the property (and presumably with INPC) later. All that said, I'm not really understanding your use case. What kind of information is pertinent to only the view models (and not the model)? If you just want to pass some information between them consider using the Mediator pattern - it's a little more work but it avoids all that tight coupling
YES! Thank you. I understand now that i have to define the variable outside of the loop in order for it to work outside of it, but i can still redefine the value of the variable in the loop and it will be saved outside, thanks alot!
Todo list. It’s a classic. 
Wow it so cool
Definitely this (quite literally :)
100%
Or worse, nothing is actually decoupled, it's just hidden behind so many indirection layers that you can't understand the coupling. 
I really frickin curious what inmatat and summa mean. I'm guessing summa means count or total or something. I've got no idea about the other. Although, as a sidenote `i = i + inmatat` can probably be written as `i += inmatat` and `summa = summa + i` should probably be `summa += i` You might also have an order of operation problem with your `900 / inmatat + 900 % inmatat` but I can't really tell because I can't read swedish. lol
One thing that I do is keep my entity classes separate from my domain classes. That way EF screws with them and I map them into my domain classes. It may not be the best way to do it, and it certainly creates a lot more classes, but it also has made it significantly less of a problem. 
Find a fun/random API and make a small app that requires authentication. Try to do it with a minimum of auto generated code. I used the Chuck Norris jokes api, using VS Code, so it was created through the command line rather than the Visual studio GUI. Also used an empty template, so that there was no Mvc to begin with. Did kind of cheat and Use Ef core for the authentication. It was difficult and not that good, but I learnt so much more from doing it over a week than I did from months of going through books and videos.
Did you use the Identity package or did you make your own custom authentication/authorization system?
Inmatat means read basically and summa means sum
Well everyone wants to do this. Everyone already does. That's how you get intellisense. Designtime builds. It's just doesn't produce a progress bar but it still builds.
&gt;Yes, it’s just an array of chars. What exactly would you like to do here? Converting an int to char array doesn’t seem that usual Well Im trying to Be able to encrypt any type of file selected trough a open file dialog, Thats mainly it
No. Everything you said is incorrect. 
You didn't write your issue here. If you'd like help, narrow it down to a question to unblock. If you'd like someone to write your assignment, there are different subs for that
What in particular is incorrect?
standard constructor injection in MyDataProviderClass? Then inject its interface (ITalkToTheDatabase) into viewmodels? public class MyDataProviderClass:ITalkToTheDatabase { private IDataAccessSettings _daSettings; public Myclass(IDataAccessSettings daSettings) { _daSettings = daSettings; } ... } &amp;#x200B;
Not that book, its not a newbie book at all, its a design philosophy of programming that may look simple because it preaches small units of code, but it relies very deeply on program design. It will do you more harm than good. I would suggest the free Yellow Book (which is free) http://www.csharpcourse.com/ and Visual C# How to Program by P and H Deitel (dont get the $$$ university textbook version, go for the global edition from regular book suppliers)
&gt; which may one day become a supported product but isn't currently Blazor has moved from its own repo into the main AspNetCore repo! Seems like it is a serious effort. [https://github.com/aspnet/Blazor](https://github.com/aspnet/Blazor) [https://github.com/aspnet/AspNetCore/tree/master/src/Components](https://github.com/aspnet/AspNetCore/tree/master/src/Components) &amp;#x200B; &amp;#x200B;
Oh, i see your problem. You're using windows forms and it's 2018. 
I did not install CssLint ever. However, I share this project with a friend and we pass the code through to eachother. The CSS code in the image was pre-rendered while the project was made. So I didn't write it and nor did I change anything in the CSS file. The warnings wern't there the first few days the code was pre-rendered. It just showed up all of a sudden.
Removed: Rule 4. Please try to narrow down your issue and describe the problem more clearly.
 listTwo = listOne In Csharp, classes (like list) are called reference types. Because listOne and listTwo are “references” to lists, when you assign one to the other, you are essentially saying each list *variable* “references” the same list *instance* What you want is to create a new list which is *a copy* of listOne List&lt;string&gt; listTwo = new List&lt;string&gt;(listOne);
but the (listTwo = listOne;) still there, how is the final code from Start()?
There is Electron. Used by VSCode, Skype, etc. 
Ignoring the situations where you *have* to use var, here are my thoughts: var person = GetPerson(); //method name is self-documenting so we can infer what "person" is IOperationResult result = Execute(); //method name doesn't imply return type so we shouldn't use var here var myList = new List&lt;IMyObscenelyLargeInterfaceName&gt;(); //no need to be explicit about the type twice All of the above, though, needs to be taken into consideration concerning the larger context of the surrounding code. For example, if there is already a lot of "noise", then using `var`, *even in the situation where the right-side doesn't imply its return type*, should be OK since it reduces noise. At the very least, we should *all* agree that declaring the same type twice during an assignment should *always* be rectified with a var. The other scenarios are like your underwear -- it's up to you.
Not knowing how references work in C# is a very beginner question. We all started there, don't worry. However, I would suggest to first learn how to use the language before attempting to make a game (I assume you are using Unity from the look of your code). It is better to go step by step instead of throwing oneself into a big task on the get go. Read a book or follow some beginner tutorials and try to make a simple application to manipulates all the basics of the language you are trying to use: types, main keywords and statements. It should only take you from few hours (if you have prior knowledge with other languages) to a few days (if it is your first programming language). Then you can go back to your game project. Good luck and have fun!
Yeah that was a really bad example...
Possible to partition your table? Your batch job in each server can work on different partition that will not interfere each other
I think I was actually considering doing something like it, but this would include spreading the database out to two other nodes, and the application isn't really set up for that(most likely due to my below-mediocre abilities as a programmer).
MBrace is an excellent library for distributed processing. You should check it out: http://mbrace.io/
Everyone does not want to do this. Everyone does not already do this. That's not how you get intellisense. Static analysis gets you intellisense. https://en.m.wikipedia.org/wiki/Static_program_analysis
Maybe something even simpler? &amp;#x200B; If you have three workers, you just need three sets of rows to work on. Let's say your DB has 3,000,000 rows at job start. &amp;#x200B; Worker 1 takes rows 0 - 1,000,000 Worker 2 takes rows 1,000,001 - 2,000,000 Worker 3 takes rows 2,000,001 - end &amp;#x200B; If you just want to split the job up, you can just pass the row start/end in as command line params at runtime. Sure, the load won't be even and it won't be gentle to your DB server, but you can cut out the distributed nature of the problem - which may very well be worth it. &amp;#x200B;
I agree, this might be the simplest thing I do for now - and then I'll go beat myself up later over once again not having made the effort to learn how to do it properly. Time is sort of of the essence as this point though, so I appreciate the suggestion, and will probably move forward with it.
Because `List` is an object, and the variables `listOne` and `listTwo` store pointers to those objects. When you create a new `List` assigned to `listOne`, it makes `listOne` point to that new object. Then when you write `listTwo = listOne` you change `listTwo`'s pointer to point to the same `List` object as `listOne`. If you understand this concept, you will understand why this code does what it does: // Two new objects, each variable stores a pointer to each one. List&lt;string&gt; listOne = new List&lt;string&gt;(); List&lt;string&gt; listTwo = new List&lt;string&gt;(); listOne.add("apples"); listTwo.add("oranges"); // This makes both variables point to the List that contains "apples" // Also, the List object that contains "oranges" no longer has a reference, // so that List will be deleted when garbage collection comes around. listTwo = listOne; // This doesn't destroy the "apples" List, it just changes listOne's pointer to null (memory address of 0) listOne = null; // On the other hand, this will destroy the "apples" List because you're removing its last reference. listTwo = null;
Clif notes?
You didn’t duplicate the list. You just have one and both variables use it. This is a beginner concept and you would benefit from reading up about reference and value types. 
The other two answers are great. And just to list what this code does: (if this confuses you, just follow the other answers) 1. Creates two separate `List&lt;string&gt;`s in field initializations (`new List&lt;string&gt;()`) At this point, there are 2 fields and each have their own empty list. 2. Then, in `Start`, the code populates `listOne` with 2 values. `listTwo` is still an empty list. 3. But then it assigns `listOne` to `listTwo`. (`listTwo = listOne`) This means the names `listOne` and `listTwo` ***reference*** the same object (i.e. the list with 2 values) now. The other empty list (which was never used) is now garbage (because nothing points to/references that list.) You can think of this as two arrows that used to point to 2 separate things. Now you made both arrows point to the same one. So, the empty list (that was never used) is now trash because no arrow points to it. 4. At this point, you actually only have a single list and two ways to reference that same list. Both `listOne` and `listTwo` means you're accessing that single list with two values. So, in `Update`, removing something from `listTwo` removes it from `listOne` too because those field names both point to the same object.
The variables do not store pointers, they store references. That is not the same and should not be confused, since pointers are a thing in C#.
As many have already said this is due to how reference types work in csharp. Check out this piece by Jon Skeet http://jonskeet.uk/csharp/references.html hopefully it will give you a good understanding of what and why
I would say as often as possible. Using interfaces makes your unit testing infinitely easier as you can mock up implementations.
Does your class rely on the logic and result of some other object? Is the general purpose of this object specific yet the implementation is ambiguous? Let's say I have a property of type DateRange which has Start and End DateTime properties. How is the object getting those dates? Well, right now I'm locked to my own implementation. If I instead open my constructor up for an IDateRange object then anyone else can make a class that provides those dates, in different ways. Maybe one goes to the Properties.Settings and fetches the previously saved user dates, another stores it using IsolatedStorage or plain text files on the desktop.
What kind of files should I use interface?
You can use the following example: https://regex101.com/r/H4ohV5/1/
Might be easier to workout when not to make an interface If it is a data object with no/little logic on it then you don't need interface, though you could use interface to for immutability by hiding setters. If the class is never passed to anything that will be unit tested then you won't need interface on it - e.g. main program class One thing I miss from Java - methods are virtual by default, so mocking frameworks can override and you don't always need interfaces for dependency injection.
 System.Threading.Tasks.Parallel.ForEach(table.AsEnumerable(), row =&gt; { // calculate each row }); &amp;#x200B;
Thanks, bud! That seems to work on regex101, but in C# it results in a false when I match it. [http://prntscr.com/lutpdp](http://prntscr.com/lutpdp)
Try it with the brackets
Like this? Regex regex = new Regex(@"(CL\d{4}-\d{4})") Because that also results in a false. Thanks for the help btw.
Agree with this. Any tight coupling to concrete classes are extremely difficult to unit test. But also... it doesn't allow you to change the behaviour of a class when requirements change without modifying your original code. This in turn breaks the Open/Closed principal (the O of the SOLID principals). Open for extension Closed for modification To give working example of why this is bad... Imagine you have a logging class that is littered throughout all your various projects. Each project is instatiating a new concrete implementation of your logger class. Meaning that all your projects are tightly coupled to this one implementation of your logger solution. But what happens if one project's requirements change, and the logging requirements change? Say, you want to use google logging for this ONE project rather than your proprietary solution. This creates a problem for your team. One solution is to write a new class and change all of the references in your project to new implementation. But... what happens if you miss one? Thats possible. And how would you know? For a start, testing would be a nightmare. It would likely be too late when you do find out. Another solution maybe to alter the original class with an if statement. If this, use google. Else, use proprietary. But it should be clear this isn't a Clean solution. And to alter the behaviour of the logger class like this is to break the O/C principal. Can you really say that changing behaviour like this isn't introducing potential risk to ALL of your projects? Can you really retest of your projects? So how can we overcome this? The answer... use a logging interface, which is all your project's classes will know. Use DI in all your projects that will point it to the appropriate concrete implementation. It still means your project is dependent on the concrete class, but not all of your project's classes. Your dependencies are all managed in your DI container. So when you're always programming to an interface and faced with a behaviour change, the answer here is to simply write a new concrete class with your new google implementation and then just tweak your DI container in your One project to ensure this new concrete class is used instead. All it requires is just one line of code to be changed in this One project, rather than changing 10s or 100s. As for your other projects - they won't know any different. They're just adhering to your logger interface only, and DI will ensure they point to the original untouched implementation. No worries there. There are whole books on this subject that would describe the positives a million times better than I could. I'd recommend giving them a read. They will make you a better developer. And reading up on the SOLID principles is also well well worth your time. But for now, I hope this is helpful. 
Then there’s no need for any of that. You read bytes, you write bytes. Modify in between. 
If the processing doesn't involve bottleneck I/O back and it's slow because of calculations? Parallel.ForEach(table.AsEnumerable(), row =&gt; { // calculate each row here. });
Sorry, not too familiar with C# regex syntax, and don’t have access to a computer atm.
The short answer: In your case `listOne` and `listTwo` are just two labels to *the same list*.
this.Categories new ObservableCollection&lt;Category&gt;(await _categoryAccessor.GetCategoriessAsync()); In this line I'm doing a task task which retrieves the MarketGroups. Is this the correct way of writing it using dependency injection? the _categoryAccessor is from constructor injection. 
No problem, I appreciate the help.
In your printscreen you input "subject" as string. Don't you mean to use the same subject variable? So regex.Match(subject)?
Bloody hell, not sure why I didn't see that. Now it works. Thank you so much to you both!
Good explanation!
I disagree. Working on a game where code has a direct and relevant impact is such a great motivator. If I would have said to myself that I have to wait until I can start making games, I wouldn’t be where I am today. If you’re passionate about making games, keep working on making games, you’ll learn as you go.
You can use Hangfire library for this. The architecture could like like: 1. You should have exactly ONE process to get identifiers of unprocessed rows (status "ToProcess") and enqueue for each identifier the Hangfire job. Row with enqueued job should be marked status "Processing". This process will be Producer. It should be recurring task (CRON). 2. You should have one or more processes to get and process enqueued jobs. After processing you should mark this row as "IsProcessed". These processes are Consumers. Hangfire library will assure you that job will be processed only by one Consumer. This is simple architecture but based on your description should be enough. Of course there are many ways to do that. More sophisticated approach will be using some messaging system like RabbitMQ.
Not sure what you mean by what kind of files? Just a regular cs file, rather than declaring a class declare an interface. https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/interface
Considering coding your idea to success? Makes sense. Cross-platform developers can use this tool to build, test, connect, and eventually measure the functionality of the built app. Post some useful description which interests readers. The universal code concept applies here. 
Hey thank you, I believe this is a good suggestion, because I'm already using Parallel. So the primary issue was splitting up table into partitions that can be handled by several machines, which then each use Parallel for processing their share of the workload.
Arhh, cool, it sounds sort of like my idea of using an HTTP service. Afaik Hangfire is paid though? Another team in the building uses for running batch jobs in .NET Web Api, I believe, but I'll have to look more into it. I'm glad you stress that it should be exactly one queue, as I would be confused to how to make it work with several queues. : )
Variables of reference types store references to objects of said type. With listTwo = listOne, listTwo will now reference the exact same object at the exact same memory location that listOne does, which means that any change done through one of these two variables will affect the observed object by the other. 
There is free and paid version. For your requirements I think free will be definitely enough. I used free version in production on more advanced scenarios and it works. Yes, one queue. And one thing - you should have to assure that there is only ONE enqueuing process at the same time. Otherwise, you will end up with job duplicates. &amp;#x200B; &amp;#x200B; &amp;#x200B;
No. Fuck off.
I'm going to disagree with some of my fellow posters here. Interfaces are awesome, but they should only be used when they serve a purpose. With most DI frameworks you can register classes themselves as well as interfaces. Specifically for OPs questions, I would consider using interfaces at the points in my code where I need to mock something (e.g. a file system, a REST client, a database). In my (and my company's opinion), as a general rule for coding, interfaces should be used when you need to define a contract and have more than one implementation of that contract. You can then use DI to register the appropriate ones for their uses.
Can confirm this *theory*, no, **fact** rather. But this implies Coffee and not those kind of milky-drinks that a served with caffeine (at a 5/5 ratio or worse)
Take a notebook with you, i always carry a tiny notebook in my chest-pocket of my jacket. (Might save a life at some point *aswell*)
Doesn't fix the fact that most Unity-Devs dont use the newer syntax sugar or QoL improvements of the Language, because it *sometimes* adds GC-pressure (LINQ, TAP Async/Await) **or** their way *feels* faster. (Best unit of measure for performance /s)
Sorry for ranting, but this is why C# is such a bad environment for beginners. Three answers tell you to use factories and interfaces, one tells you to use a new framework, one tells you to read some book on another pattern, one tells you that it was simply impossible and only one notices that the real problem with your code is that you merged three classes into one. Just stick to basic object orientation rules like the single responsibilit principle and the coupling of FolderMonitor and SystemFile will vanish. What looks like two classes (SystemFile and FileMonitor) are in fact two classes and a global function. The static keyword on the OnCreated-method creates a global function that is associated with the FileMonitor class only by name (and by accessibility scope). In terms of lifetime it's a global function. So in order to resolve the dependency issue just create something like an Application class that creates the FileMonitor and fills in the event with one of its own methods. Right now your code says "I have a FileMonitor (and that implies that everything in that file is printed to the console)". What you want your code to say is "I have got an application. That application has a FileMonitor and it is able to create a SystemFile object from a file path. In my application the FileMonitor's Created-event is connected to creating a new SystemFile." So the real issue here isn't the dependency, it's that your code stated that every FileMonitor you will ever build will always create SystemFile objects for every new file it detects. But I doubt that that's what you want your FileMonitors to always do, it just happens to be what you want to happen in this one use case. Everything that is unique to this one application should be put in code in an Application class. Only the things that always apply to FileMonitors should go into the FileMonitor class. 
Thank you, worked perfectly! 
I'm familiar with other languages but not familiar with OOP principles and design patterns. I'm about to learn them. 
Sorry about that! I was just the kind of person who never leaves any comment on my code before and seems like I overdid it this time around! Definitely, keeping that in mind in the future! :)
Resharper for example has a setting called 'use var when evident'. This means that var is only suggested when you can quickly infer the type from the right side at a glance. "= GetPriceInLocalCurrency(product)" doesn't give you any information about the returned type, so it will suggest include the type. When writing "= new decimal(value)" on the other hand you know the type must be decimal so var is suggested instead.
I didn't click on the link. What is it *actually*?
r/cscareerquestions
Advertisement for their software.
No. Fuck off with your spam.
That and r/freelance
Spam.
Looks like an API for Word documents "ZETWORD - THE FASTEST ADVANCED WORD DOCUMENT PROCESSING API FOR .NET APPLICATIONS" No the perfect solution finder to all C# questions... SPAM SPAM SPAM SPAM...
&gt;One thing I miss from Java - methods are virtual by default, so mocking frameworks can override and you don't always need interfaces for dependency injection. I love C#, but working heavily in TDD I hate this so much. Pretty much every library is un-mockable without the heavy guns (paid library: Typemock). 
3 days old account, 3 spam posts about something they made
Assholes.
That looks like an example of constructor injection - see [Wiki entry](https://en.wikipedia.org/wiki/Dependency_injection) and works fine for up to three items injected. If you are doing more then I'd probably go for a factory type approach using Setter injection
I disagree with this wholeheartedly. Only using an interface when you need more than one implementation of some contract is just setting yourself up for the need to constantly refactor. Your code is not closed for modification. That is the code smell If you use interfaces regardless, when you inevitably do need an implementation that you perhaps did not see originally, you only need to EXTEND your existing code. This reduces refractors and chances for introducing new bugs. The only time I would not use an interface is SOMETIMES for a very very simple DTO or a front end model that is specific to some third party library. 
Precisely. This is good advice. Not the ridiculous comment saying a lot of interfaces is “code smell”.....
&gt; Liberally putting interfaces on all classes ... clutter. Strongly agree. Limit interfaces + DI to big chunks of functionality that have a reasonable chance of being changed he future, else they just clutter things up. I worked on an 12month 4person project where literally every class had interface + DI + mock. It was a total mess. The majority of the efforft didn’t go into providing functionality for the customer, rather it went into writing volumes of unnecessary code with spaghetti-like flexibility all on the unlikey chance that some of it might change in the future. Huge waste of time and money.
Search for Mark Seeman, he did 2 books on DI and his blog pretty much only talks about that. You may find the answer you are looking for in his writings.
&gt; interfaces should be used when you need to define a contract and have more than one implementation of that contract. For most things that are injected there is a contract and two implementations are needed: the actual implementation and the stubbed/mocked implementation - in C# I am going to specify the contract as an interface to allow mocking framework to create the second. However the rule sounds a little too dogmatic to me, e.g. I use interfaces is hide things needed in creating/internal processing of a class but shouldn't be used by other areas of code. E.g. if I read an object from a database table that has 10 columns, I may wish to make it appear immutable but I don't want to pass all 10 values into constructor as that gets messy - so instead I'd pass them to the properties' setters, but I return it as an interface that only has getters. I could achieve this several other ways, but this one always simplest/seems least effort. Having come from Java, yes there was a tendency to use interfaces everywhere and it was overkill (especially in Java everything virtual by default) but I am not sure I'd be overly worried, especially in C# (and similar)
Write clean code. Optimize as a last resort. But im guessing lots of jr developers will read your article and royally screw the pooch.
Performance is a feature dawg
&gt; "Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. **Yet we should not pass up our opportunities in that critical 3%.**"
&gt; Ostensibly done to make it “easier” in the unlikey chance that some of it might change in the future You don't need interfaces to make that mistake - I have dealt that sort of mess several times in my career and one of the worst didn't involve interfaces as all in PLSQL. Rule one - write for today as simply as you can, it is more likely to not be thrown away tomorrow when someone needs to change it to do something you hadn't anticipated (which will be 90% of changes)
if its CPU intensive work you can scale out horizontally. you can do this by creating batches and sending out the work to the workers. how you splice up the work depends on the work. (batch1=rows 1-1000, batch2=rows 1000-2000, etc). you may also want to get all the data by one worker and then batch up the data to process by workers etc... otherwise you are going n times to db instead of one time. again it depends on the size of the batches and such. actor model libraries may help do the distributed batch work (orleans or akka.net) as they have nice features/abstractions for distributed computing. you can do stuff like have actors that have responsibilities to get data and cache it for requests, others that do the processing, and others that consume all the data and do bulk inserts or something like that. to the client (the CLI) it just sends messages, and the actor framework abstracts away the distributed nature of your workers and does stuff like round robin or fan out and stuff like fault tolerance, state management, adding and destroying actors, etc.. if its work done in the DB (stored proc etc) scaling out won't help much because of locks. here is where writing the most efficient queries and using temp tables will help. also some dbs have parallel processing capabilities and such.. i'm not much of a db expert so can't help you there with specifics.
Try Toptal.com
I just used the packages that Microsoft uses. They have great documentation that you should just be able to copy paste into your app and it should work. Here is the MSDN doc (I think) for doing this. https://docs.microsoft.com/en-us/aspnet/core/security/?view=aspnetcore-2.1
Can you retry for upwork? That's what my friends and I use, and it's been great. I didn't have any luck with other sites. 
If you are the one editing the code, you can always make the member virtual yourself.
IN the second half of this talk, [TDD, Where Did It All Go Wrong](https://www.youtube.com/watch?v=EZ05e7EMOLM) (or more accurately, "How to do TDD right") there's an overview of Ports and Adapters architecture, which are basically the extension points you need to make interfaces for, and the places you need to inject things. i.e. you leave 'Ports' (which need something - Adapters - plugged into them) in all the places that are untestable 
Then you have lots of methods that are virtual without being overridden anywhere and that will likely confuse a developer following. If recall correctly there issues around constructors with parameters in mock frameworks - so you may need a special constructor for mocking. Specifying Interfaces seem much easier TBH.
you make interfaces when your unit testing framework doesn't include a better mocking system.
Not a fan of JavaScript or any of its bastard children.
You have to respond to the OPTIONS request with a 200 ok. You can use Application_BeginRequest in your global.asax to return status code 200 if the request.httpmethod == "OPTIONS"
Totally misspelled Stack Overflow
The async await in parallel code snippet looks a bit wrong. ~~He only waits one of the three tasks (edit: not evening using await Task.WhenAll), not all and in the end he blocks the thread again by calling .Result on all three tasks.~~ Edit: His code is just bad, better to explain by example: Correct way would be: var tasks = await Task.WhenAll(new [] {task1, task2, task3}) or depending on the returned types just var task1 = Method1Async() var task2 = Method2Async() var task3 = Method3Async() var res1 = await task1 var res2 = await task2 var res3 = await task3 
https://i.imgur.com/O3DHIA5.gif
Removed: Rule 3.
Assuming each row can be processed in any order, and in isolation, you could try a worker pattern solution, using something like RabbitMQ ([https://www.rabbitmq.com/tutorials/tutorial-two-dotnet.html](https://www.rabbitmq.com/tutorials/tutorial-two-dotnet.html)). You'd have one service pulling all eligible rows from the database and dropping them onto a queue configured with the worker pattern. You could then have as many consumers of the queue as you like, with RabbitMQ guaranteeing that only one would take a particular item off the queue. The consumers could have x items in process at any given time, based on cores etc of consumer host. So you could scale the number of consumers, and potentially scale the number of items in process per consumer too. &amp;#x200B; There would be an overhead introduced by the queuing and dequeuing, and serialisation and deserialisation, so you'd need to test to ensure throughput is actually increased, but it should be as you can in theory bring a limitless number of consumers into play and massively parallelise your throughput. Also, if processing each row includes any write back to origin database you will get contention there if you have a large number of consumers all attempting to write to the same table concurrently.
Hey, thanks, it sounds like a great solution. I think it was the same thing I was aiming at with my idea of creating an HTTP service, but a real queue seems a lot nicer. Another user in the comments also suggested simply using HangFire queues. Seems that either would be a great tool to learn. 
Static analysis works over the parser syntax tree. So you are correct. Building is significantly more complex than parsing alone and includes byte code generation, optimization, linking, tree shaking, etc.
It's design time builds. That's why you get warnings in the error list for msbuild warning produced in the aftertargets="corecompile" phase.
TL;DR - HTTP mocking library. &gt; WireMock allows you to set up a mock HTTP service at run-time with request matching and pre-set responses. If you need to write tests with any kind of micro-service or other HTTP dependencies, then WireMock is an invaluable tool for setting up fast and reliable mock responses. Looks pretty cool - should be handy with integration tests.
These situations are crying out for early exit, assuming you can use it in your scenario. 
I tend to agree. I feel like you should write easily understandable and well maintainable code. I do think developers should be aware of performance though. I think if you know the data will be large more than one loop should send off warning signs that a different approach might be needed. Generally I think profiling code at different stages is good to understand where the hot paths actually lie.
Porque no los dos meme Seriously though, authentication and authorization in ASP.NET Core 2 have so many layers to them as a learning exercise I highly recommend trying and incorporating all of the possibilities: - Windows Auth (if possible) - Custom with owned users - Custom with external users (think LDAP) - OAuth - FB/Google/etc - SSO Then try the various authorization mechanisms: - Attributes with roles, policies, or claims (I struggled with Win auth + claims so I [wrote a post](http://philipm.at/2018/aspnetcore_claims_with_windowsauthentication.html)) - Filters Etc. It’s a really good learning opportunity for I don’t think you’ll find a lot of apps without a user system.
Slow code in production is better than optimizing code in development. 
If you close the css file they’ll likely go away. Alternatively you can switch the drop-down in the Error window from “Build + Intellisense” to just “Build” and that’ll also make them go away.
Awesome! keep going!
Yea. Very strange example there. He isn’t waiting All the tasks. 
I will add that any public method that needs to be unit tested should also be part of the interface for when it is used as an external dependency for another class. Any public behavior should be able to be mocked out.
The problem with performance is data. A nice new site runs fast so then why does it big down after a year or two. Lots of data. Queries slow down. You start to panick. Cache this cache that. Shit is t refreshing anymore. Omg. Panic. Buy enterprise SQL license. Sooooi expensive. Hardly helped. Seen it to many times. CQRS is worth a read and a simple implementation will keep your FE snappy fast without panic. 
No. You cannot create indexers or properties as extension methods.
indexers are properties and you can't create extension properties, so no. i suppose you could do something like this if you really wanted: public class SomeType { public List&lt;string&gt; Elements { get; } public SomeType() { this.Elements = new List&lt;string&gt; { "one", "two" }; } } public class SomeTypeWrapper : SomeType { private readonly SomeType original; public SomeTypeWrapper(SomeType original) { this.original = original; } public string this[string i] =&gt; this.original.Elements.FirstOrDefault(e =&gt; e == i); } public static void Main(string[] args) { var wrapped = new SomeTypeWrapper(new SomeType()); Console.WriteLine(wrapped["one"]); Console.ReadKey(); }
Nice! Looks kinda like that small indie game... I think its called Mindcraft or something?
Ya lol it looks extremely similar... But I plan to add custom sounds and change the mechanics to make it my own!
Thanks for your replies. I figured I was out of luck when I looked into the syntax of overloading the \[\] operator and saw that it looked like a property.
Nice work! I'm also working on a 3D terrain gen. It's a really fun project, I'm on my third rewrite and have a pure ECS design. I started out with Penny De Byl's Minecraft clone tutorial. Keep it up and feel free to DM me if you want to chat about voxel world generation :)
Awesome sounds like fun! Good luck! And sure, anytime.
Note that the C# team has expressed interest in making extensions fad more versatile in the future, but this probably won’t make it for 8.0. https://github.com/dotnet/roslyn/issues/11159 There’s even a video showing this https://channel9.msdn.com/Blogs/Seth-Juarez/A-Preview-of-C-8-with-Mads-Torgersen#time=32m11s
Very cool! Keep at it
Don't do things in parallel just because you can. Stick to `async/await` unless you need to do things in parallel to reduce the latency of a single request. ThreadPool threads are a limited resource, and doing things in parallel means you're using threads that could be devoted to doing more requests in parallel. This will only show up under heavy load. And whatever you do, do *not* fire-and-forget by doing a `Task.Run()` and never waiting for it. Not in a high QPS situation, anyways. You'll end up exhausting the ThreadPool, but only under high load, and then everything will go to shit as simple tasks that normally take a few ms starting taking 30 seconds because they're waiting for a ThreadPool thread to become available. All threads that you spin up in a web service must finish faster than your new requests are coming in. Fire-and-forget that consumes a thread for longer than the average request just means that you'll eventually run out of threads if load stays high over a period of time.
Awesome! Nice work!
Ah nice! I love Skeet. Dude has been giving me c# advice without knowing it for years. StackOverflow is my home away from home (meaning when I'm at work ;) )
Thanks!
Thanks! I sure will.
anonveggy is correct that IntelliSense goes beyond static analysis and is called a design-time build in .NET parlance. OTOH, there’s a reason design-time builds are separate in the first place. Build on save is not practical.
When you say more than three items injected, do you mean more than three items injected in constructor?
Exactly! I gave ReSharper another try this month and I am so disappointed. Horrible performance even on High-end workstations. Rosylynator just works but I also like CodeMaid.
Looks very good! Just curious about two things, 1. Do you combine the cubes to create big chunks of meshes? Because your draw calls are very high. 2. Are you using/planning to use any of unity’s SRP templates (HDRP/LWRP) for your game? I am also making a game which has a similar graphics style to yours and currently I’m trying the LWRP because I want to use Shader Graph.
As far as I can tell this b1 is being initiated as a pointer to a1 so they are referencing the same memory location however I can't find how to make b1 its own variable with its own memory location
A work around I've found below. Can someone explain why this is necessary? Is there a way that I can simply assign the value of one object to be equal to another without creating a pointer between the two variables? `char[] b1 = new char[a1.Length];` `Array.Copy(a1, b1, a1.Length);` &amp;#x200B; Thanks
Arrays are reference types, so they will always be created as pointers to memory on the heap. To make b1 point to a separate but copied array, use something like a1.ToArray() to force a duplication of the original array that a1 points to.
Arrays are reference types. `a1` is a reference to an array instance, as is `b1`. `"I am confused".ToCharArray();` is the only code in your post that is creating an array instance. You are assigning the reference to that instance to `a1`, and then you are assigning the same reference to the same instance to `b1`. If you want `b1` to reference a different instance, you need to create a new array instance. &gt; Is there a way that I can simply assign the value of one object to be equal to another without creating a pointer between the two variables? Not in general, no. There's no reasonable default way this would work for reference types, so it's omitted from .Net. How you would copy a reference type's value is going to depend on the type itself. You've edited your post with one method to copy the value of the array. Another would be `var b1 = a1.ToArray();` If you're using a BCL type, you'll have to figure out an appropriate way to copy it. Some types have methods available, others you will have to create the copy yourself. Some types might not really be possible to copy (short of reflection). For your own types, you would implement your own way to copy the value. There is an `ICloneable` interface, but it is not generic and therefore of limited usefulness. You might just implement a Clone method, it's also common to see a constructor that takes another instance of the same type in order to create a copy.
&gt; When code is in production its making you money. Until your bad code starts causing down time. Clients love getting 503's because you exhausted your thread pool while they wait for 15 minutes+ for more VM's to spin up.
That would be an amazing problem to have. And if you’re on a project where you’ll get a 503 then the code is at the point to optimize. 
&gt; That would be an amazing problem to have. No, that would be an idiotic position to put yourself in, and I would let a developer go if they had that attitude towards production services. Downtime damages reputation, costs money directly, and loses clients. You can put your org out of business being cavalier like that.
What is reflection? 
ELI5 version: Its the code looking back in on itself.
Actually he is with the calling .Result on every task in the end (and blocking the thread thereby. But the Task.WaitAll is just meaningless there,
Hey man awesome work. I love voxels, and have spent time with them in Unity so I know the struggle can be real at times. What meshing algorithm are you using? Your vertex count looks a little high, and if you haven't yet you should check out greedy meshing.
Oxyplot is a great charting package for a free open source package. If performance is important to you I would highly suggest looking into lightning plots by Arction. It isn’t free but it is absurdly good at plotting complex things. Try out their demo, it’s impressive. 
But if you fire multiple async calls in parallel you won't waste threads from the thread pool. A single thread can fire multiple async calls.
You just left off the whole second half of my argument. A great problem to have is people using your product. When people are using it its time to optimize but spending time optimizing software that isn't even being used is a waste of time. 
.Net includes a number of classes and functions that can be used to inspect types and instances of types as well as call functions, properties, modify internal fields of instances dynamically. You can google .Net reflection and get some idea. It's broad and can get into dynamically compiling code. Not something you normally use much directly, but it can be a very powerful tool.
You could always assign a value to \_Bar when Qux or Quux or when any field/property \_Bar depends on change. You'd set \_Bar in the setters of any property that \_Bar's value depends on. It's a simple solution. &amp;#x200B; I don't like having to wire up propertychanged event code so I just use Fody.PropertyChanged. Using it, Bar would automatically update when any property that Bar's value depends on changes and all you have to do is add the \[ImplementPropertyChanged\] attribute to your class.
Two things. Checkout [Lazy&lt;T&gt;](https://docs.microsoft.com/en-us/dotnet/api/system.lazy-1?view=netframework-4.7.2) for lazy loading and I'd consider a decorator pattern for caching. 
This is where you have to say don't take it literally. When someone says not to optimize it usually means not to waste time for a meager performance improvement at the cost of code quality. But yes you should absolutely be thinking about common scenarios that come up, don't go making stupid loops or pulling more data out of a database than you need to. To put it more simply, don't do anything stupid just because "optimization can wait." &amp;#x200B; Simply organizing your awaits is a perfect example. var res1 = await Method1Async() var res2 = await Method2Async() var res3 = await Method3Async() vs var task1 = Method1Async() var task2 = Method2Async() var task3 = Method3Async() var res1 = await task1 var res2 = await task2 var res3 = await task3 The latter is noticeably faster at little cost to maintainability and time invested, a no brainer to do early.
Any particular reason you went with WinForms? 
Specifically, async != background. If you have public async Task StupidAsync() { Thread.Sleep(1000); await SomethingBackgroundAsync(); } public async Task DoStuff() { Console.Out.WriteLine("Start"); var t1 = StupidAsync(); var t2 = StupidAsync(); var t3 = StupidAsync(); Console.Out.WriteLine("Got here"); await t1; await t2; await t3; Console.Out.WriteLine("Done"); } then it will take 3 seconds between "Start" and "Got here", then however long it takes the latest of the SomethingBackgroundAsync() calls to finish in parallel. It runs the synchronous parts up to the first `await`. Now, if SomethingBackgroundAsync() is doing native I/O, then it won't consume 3 threads. If it is using Task.Run(), then it will.
It works on Linux and MacOS as well as Windows. 
Don't you have to use Xamarin Forms for that?
Nope.
Great article. Thanks! I guess in the end, the best solution is to use IDisposable? I heard somewhere that in ASP.NET core, when DI services go out of scope, they always have `IDisposable.Dispose()` called. Can anyone confirm?
How does winforms work on Linux and Mac with mono? 
I have not used that charting library before, but have you considered creating a test project and see if updating the resolution on zoom change have a big impact on performance? Down sampling is pretty standard when it comes to displaying data, even the oscilloscope display are usually sampled at very low resolution to give fast updates. First thing you have to do is to create an algorithm that takes in a resolution value, an array of data points, and an output of down sampled values. Next, for one zoom level, lower the resolution and see what's the lowest number of points you need to have a good enough graph to visualize your signal. Then turn up the resolution to find the highest resolution you can have without the chart rendering too slow. Somewhere between those two resolutions would be a good compromise. Then you rinse and repeat for each zoom level.
Uh... Like Winforms?
I've seen Lazy&lt;T&gt;, but it still leaves my core question, and has roughly the same amount of code I need to write to get the behavior I want. Can you elaborate on the decorator pattern for caching?
Doing an object per cube is going to absolutely kill your performance. There's a lot of "make Minecraft in Unity" tutorials showing how to make chunks. Chunks are very important for performance. You should ONLY draw the faces and vertexes on outside facing shapes.
Nice work! I think this game could become big!
That's true. Generally this means scoped and transitive services are disposed at the end of the request, and singleton services are disposed during server shutdown.
 char[] b1 = a1 This does not copy the contents of a1 into b1, but says that the contents of b1 exists at the same memory address as a1. So you end up with b1 and a1 being aliases for the same values. 
Thanks...
Is there a way to cloan a into a new memory address? 
I believe lazy is thread safe whereas your implementation isn't guaranteed to be
Neat
I am retrying for last 8 days but I get a generic response : We have reviewed your application to join, and regret to inform you that we are unable to accept your Upwork freelancer registration at this time. 
With the decorator pattern, you have to implementations of the same interface. The first is your "real" implementation. It does the work that you'd expect it to do. The second is you "decorator" and it will have a constructor that takes in the very interface it implements. Essentially the decorator implements the interface and passes the calls to the real implementation that was passed it, but it can do things before and after the call to the real implementation. Its useful for caching, logging, security, and auditing. Basically cross cutting concerns work quite well with a decorator because it splits the logic of the cross cutting concern from what's actually being done. In the case of caching, the decorator is responsible for maintaining the cache, invalidating the cache, and determining when a call should be served from the cache versus when a call to the real implementation should be made. See https://en.wikipedia.org/wiki/Decorator_pattern
Since your question is a bit vague (that is, I don't know how low level you're looking to work in), however I think you should look into the MonoGame framework. If you want lower level than that though then you'll likely want OpenGL with C# bindings or something similar.
Monogame is great, SFML.net, raylib-cs, some great choices 
How about GameMaker? I haven’t heard of Monogame or those other suggestions? 
Game maker is c#?
Here is an article I found which uses Unity3D and a barcode library - https://medium.com/@adrian.n/reading-and-generating-qr-codes-with-c-in-unity-3d-the-easy-way-a25e1d85ba51.
GameMaker is not C#. It uses its own scripting language called GML.
have a look at [https://docs.microsoft.com/en-us/xamarin/graphics-games/cocossharp/](https://docs.microsoft.com/en-us/xamarin/graphics-games/cocossharp/) if it is mostly 2d stuff. Since Monogame is basically a cross-platform "port" of XNA most of those tutorials can be directly applied when using Monogame btw.
Are you using DirectLine with Bot Framework to get some of the out of box Bot features?
Thank you. This is exactly what I have been looking for. 
Nope! Never heard of any of that, actually. I'm going to go look into it.
I must admit that I am a bit of a noob, but it seems like an observer pattern would be a clear cut solution here. If you set each of Qux, Quux, and Quuz to be subjects that each reference Bar as an observer object, you can trigger the update of bar from within the subject class.
Let's say you have a static function. If it is true that, for any set of arguments, calling the function with that particular set of arguments always yields the same result, we can say that this function is "pure". Now let's say you have an instance method. Instance methods can be pure, too, so long as you imagine "this" as an implicit argument to the method. Examples of impurity: a call to a function that touches a database, even given the same arguments from one call to the next, may return different results as the state of the database changes. Interacting with databases is impure. So is making an http request. Or anything that uses or checks the current time. Or anything that uses System.Random without pre-seeding it. Impurity complicates testing, because when the test runs, either you need to be sure that the functions' dependencies (e.g. the database/external site/time/RNG) are in the appropriate state for the test, or you need to use mocks to provide a controllable inputs to your impure functions to make it **look** as if those functions' dependencies are in repeatable states. And that's one way that interfaces really help- wrapping up sources of impurity so they can be mocked.
Welcome to r/godot :)
Someone mentioned MonoGame. Haven’t tested it too much but it’s great! It’s Unity without the editor.
A better question is: Why not Unity? There are legitimate reasons to not want to use Unity, but if you are asking about GameMaker I am curious why you'd use that instead of Unity.
monogame is a continuation of microsoft's old xna framework.
you could try to find a framework like: * monogame: http://www.monogame.net/ * duality: https://www.duality2d.net/ or just use a 2d graphics library like: * win2d: https://github.com/Microsoft/Win2D * wpf
I made small games from java and I don’t want to jump into Unity since it seems like it’s mainly drag and drop and don’t want to waste time learning how to use it. I thought that gamemaker was C# and more dependent on scripting, but I was wrong on that.
Unity definitely is not drag and drop unless you intentionally make it that way by using full assets and code from the Unity store.
MonoGame is what you're looking for I believe. It's an open source implementation of Microsoft's XNA that works on a variety of platforms. It's actively being developed and has been used in a number of successful (mostly indie) games. It's a pretty lightweight framework rather than an engine, but it sounds like that might be what you're looking for. This is a good place to start: [http://rbwhitaker.wikidot.com/monogame-tutorials](http://rbwhitaker.wikidot.com/monogame-tutorials), but the vast majority of XNA tutorials/books/videos will also apply to MonoGame with the exception of the content pipeline stuff. There's also a subreddit /r/monogame and an associated discord you can join if you're interested. 
It’s not “drag and drop”, at least try and learn it before writing it off 
Have a look at this: https://social.msdn.microsoft.com/Forums/vstudio/en-US/41229dc6-6171-453b-82bc-f742f629e4f1/richtextbox-resizing-adorner https://stackoverflow.com/questions/37788788/add-adorner-to-image-in-wpf-richtextbox-when-loaded
I think you have GameMaker and Unity swapped, because your descriptions for one exactly fit the other.
“Drag and drop”.... yeah that’s not at all how it is 
I think you might have had the engines mixed up. Gamemaker is mainly drag and drop and Unity used C# and is dependent on scripting.
Finding articles and code online is an extremely useful skill for a software engineer. Practice
Not sure the WPF recommendation is correct all the time. There are situations where either unloaded doesn’t fire or fires multiple times.
Nice catch! So in the example, the event registration is in the constructor and the deregistration is in Unloaded. This is \*almost\* always right. The object might be created and never Loaded. It also might be Loaded and Unloaded several times for the same instance. The correct way would be to register in the Loaded event and deregister in the Unloaded event. I'll update the article.
Thanks, glad you liked it. Don't know about the best solution though. I use all the different solution in different scenarios.
Essentially saying too many interfaces is a code smell. That's an interesting opinion. I respectfully disagree, because you're essentially saying the Dependancy Inversion principle from SOLID is a code smell. But interested to read it. I read in a book some time ago that the new (instatiating an objected) is a code smell as it indicates no interfaces. Different opinions I guess. A few thoughts... I think the idea that you "can always refactoring later" is a little dangerous. As without interfaces unit testing is difficult. You have to ask how can you be sure that refactoring isnt breaking something. You'd be likely dealing with a lot of technical debt if dealing with concrete classes. Managing depednancies is more difficult, something I discuss in my other comment. Also, using interfaces doesnt take much extra time during conception, but would take more time during refactoring. 
Nice.
So you are sticking to an older technology driven on a 9 year old platform even though it renders a bit odd? That's some sort of commitment to forms. Any particular reason for this? Else it seems odd to be that fast in rejecting other ideas.
There isn't really a good crossplatform UI framework, let alone one as usable as WinForms. Avalonia exists, but it's super Beta, WPF and UWP are Windows Only, Eto exists but I've never gotten far with it.
I must admit that I haven't worked with any of this myself, just found the rejections a bit hard and got curiouse. How about xamarin forms? That's the name I would associate with cross platform ui if I was asked. In the end I guess there isn't at right answer and as long as it works all is good, however the vibe I am getting from the other comments is that you would have more contributions from others if you tried some "newer" technology.
My experience with xamarin forms is it's a lot of work for not much payoff in comparison to just using WinForms... I'd go Xamarin if I was trying to get on Mobile Devices, but short of that it isn't required imo.
Great job. Did you make it from zero or edited Minecraft's code/added textures?
Interesting bot. I might make a few PRs to it and see what you think.
Nice one!
If I could use emoji right now, I'd give you a thumbs up.
Also, a small note - if you are indeed using unity3d, I would suggest downloading the latest version of this library from https://github.com/micjahn/ZXing.Net/releases Because it contains a couple of fixes to barcode rendering(one of them done by me). I imagine you'll need to also generate barcodes, not only read them. If you have any trouble doing so - contact me, I have used this library quite a bit in Unity.
Well for one integers can't be set to null so it makes sense it would ignore that. When you create the mapping a believe you can set specific actions for properties. But in my opinion this kinda defeats the point of auto mapper.
Yes - it is about keeping things simple to understand - When I was looking for sample coding standards for a project I came across [C# Coding Guidelines](https://csharpcodingguidelines.com/) which resonated with my experience (worth reading) - under [maintainability-guidelines](https://csharpcodingguidelines.com/maintainability-guidelines/) there is &gt; Don’t declare signatures with more than 3 parameters (AV1561) &gt; To keep constructors, methods, delegates and local functions small and focused, do not use more than three parameters. Do not use tuple parameters. Do not return tuples with more than two elements.
I've not done this in c# but there are a lot of options in JavaScript. Is that on the table?
I think the cubes are separate GameObjects. It would be better to look at ECS for something like this
I think [this](https://stackoverflow.com/a/1610140) is what you're searching for.
doesn't include anything to do with sound devices...
Nice to get the arguments out, as I said I don't JK now much about any of these as I haven't used them, but I feel I know more now.
hold on my bad wrong link let me get back to my pc real quick...
https://stackoverflow.com/questions/11768356/need-table-of-key-codes-for-android-and-presenter. 
1. You could use the `APPCOMMAND_MICROPHONE_VOLUME_MUTE` flag (see: \[app commands\]([https://docs.microsoft.com/en-us/windows/desktop/inputdev/wm-appcommand](https://docs.microsoft.com/en-us/windows/desktop/inputdev/wm-appcommand))) 2. You could use the **Windows Microphone Mute** Library (see: \[this\]([http://www.computercabal.com/2010/11/mute-microphone-from-c-on-windows.html](http://www.computercabal.com/2010/11/mute-microphone-from-c-on-windows.html))) 3. You could try \[this\]([https://www.codeproject.com/Articles/3094/Audio-Mixer-Functions-Demo](https://www.codeproject.com/Articles/3094/Audio-Mixer-Functions-Demo)) 4. A **C** example \[here\]([http://www.jcomeau.com/src/wavein/rec.c](http://www.jcomeau.com/src/wavein/rec.c)) - call it via **P/Invoke** 5. Use the Windows Mixer from **C#**: \[here\]([https://www.codeguru.com/csharp/csharp/cs\_graphics/sound/article.php/c10931/Windows-Mixer-Control-in-C.htm](https://www.codeguru.com/csharp/csharp/cs_graphics/sound/article.php/c10931/Windows-Mixer-Control-in-C.htm)) Also \[here\]([https://docs.microsoft.com/en-us/windows/desktop/cimwin32prov/win32-sounddevice](https://docs.microsoft.com/en-us/windows/desktop/cimwin32prov/win32-sounddevice)) is the API for the `SoundDevice` if you need to query information about SoundDevices.
This isn't csharp, but.. The nircmd command line utility supports doing this: http://www.nirsoft.net/utils/nircmd2.html#using i.e. I have a few different param options bound to keyboard macro keys to switch the primary audio output to one of 3 devices at the push of a key. This is fine for personal use, though if you're trying to make something distributable then it's probably worth the effort of staying in-process with the other apis mentioned.
Go away. You are STUPID and LAZY.
Do you want us to change your shitty little panties for you too? What is wrong with you people? Learn how to *learn* like the rest of us!
Thanks! This was actually designed in the unity gam engine, and was written in C#, not java. I watched a lot of tutorials to get to to work aswell.
ideally you would await Task.WhenAll(task1, task2, task3) and then use the Result() of each task for processing in your code
You should use JavaScript. The Discord .NET is not very good. 
Everytime I see "Blazor" I keep thinking of Dodgeball. *Blade. Lazer. Blazor.*
Array.Clone or Array.Copy Read the docs on them - there are subtle differences, plus one important caveat - they do a shallow copy, meaning they'll copy objects, but not objects contained in other objects (which is called a deep copy). You would have to code that yourself if you need that functionality.
There is. Web. Hint : Electron.
Remember you can always message out the key code too. Don't have to just find a list online. I've found it easier in the past to do this to get an idea of what something equals to for whilst I'm debugging etc 
Is there a defined best practice for this? I've read the preferred syntax is await for a completed task although personally i prefer to set a variable for readability, especially if i need to consume the value more than once. Alternatively you can just code away and only add the await when you actually start using the result rather than awaiting all at once. Although unless there's some IO in between 2 of the results i would prefer either of our solutions just for readabilities sake.
Thank you
If you have to compile additional generated files at runtime then you dont use compiled languages... Its all ugly hacks.
Thanks a lot. I never came across these links. However another (small) question emerged. The second link deals with the problem that when the application is loaded that the adorners are not visible (or do not exist). In the first answer he added these lines of code: var inline = this.rtbEditor.CaretPosition.GetAdjacentElement(LogicalDirection.Forward) as Inline; if (inline != null) { this.AddAdorner(inline.NextInline as InlineUIContainer); this.AddAdorner(inline.PreviousInline as InlineUIContainer); } He says that he has done this via the SelectionChanged event handler. How or where exactly do I add this SelectionChanged handler?....
Browser. Razor. Blazor
Thank you.
I didn't even think of that. Thanks!
But does it really. I thought the result there will be the Task. Because it wasn’t awaited 
I'd be interested in helping. Sent a pm!
I'm sure I'll get downvoted for a "stupid solution" haha! But if it works it ain't stupid! 
You might want to think of a different way of detecting someone confirming a username to be honest thoug
You might want to think of a different way of detecting someone confirming a username to be honest though. I'd probably create a bool method that takes your input.text and checks it. Then just check if the bool is true before allowing them to continue, Otherwise you might find people could get past your profanity check if they are using a different keycode you haven't thought of.. maybe.. haha it's hard to tell without seeing the workflow but you get the jist! :) 
Or just use input.textchanged event handler to check each time, disabling/enabling the "Next" button depending on outcome or something. 
What about electron?
It is definitely intriguing that I can run c# client side in the browser.. I haven't been following it too closely yet as I have limited time and I need to stay focused on other things, but how real is this becoming? Does it look like this will be mainstream and used?
This. Users could enter content not via the keyboard but by, say, copy-pasting.
I mean, we already had WebAssembly, so we can run pretty much any language that compiles to assembly/machine code in a browser.
I’ve enjoyed my limited time playing with it. It’s certainly supported and works on all major browsers. Performance is the problem, especially initial load. 
Nice post. With C# 7 you can replace the lambda handler with a *cleaner* local function.
Shouldn’t that be Brazor though?
You’re getting downvoted but you’re not wrong. The meaning of the word “compile” has definitely gotten blurred these days but formally defined, if you’re not outputting native machine code, you’re not really compiling. However, I’d urge you to see the usefulness of this, even if it’s not strictly compiled. Creating “machine code for the browser” means only good things across the board.
I don't mind JavaScript and typescript at all, but I have tons of code to do calculations in c# that I would rather not rewrite in JavaScript, but would be much better if executed client side. This is where I see the most benefit for me, personally.
Head first into wasm then. I'm an Angular/PHP developer, so whatever I need to do that need more processing power, I do on the backend. But then, just as I said, maybe there are some cases where you need to execute some calculations that leverage the client's processing power.
I have next to no experience with HTML/CSS/JS
I have another question. Do you have any idea how i can add spaces in my comment? Because this is not working for me: **Process.Start("shutdown", "/s /t 60 /c Shuting Down!");**
[Youtube without the crap](https://www.youtube.com/watch?time_continue=1&amp;v=xLtWgRzB2_g)
probably was considered, but it's rather close to another name that is... less appropriate for professional settings.
Any Blazor sites recommended visiting?
I tried to read what you suggested, but I couldn't find the factory example. Could you provide an example on factory when I use more than three parameters? I happen to use many of the interafaces to inject many times, but different how many of them I use in different settings in my project.
I'm not sure how this works, as described, if Bar has a public setter. If the value of Bar can simply be set, then it should not also depend on Qux and Quux - or at least you cannot know if it does or it doesn't. So, ignoring that for the moment, and just considering a read-only Bar variable that depends on Qux and Quux (and possibly others in the future), how about using a memoized method? So start by having a method in which all its dependencies are parameters: private Foo Bar =&gt; GetBar(Qux, Quux); private static Foo GetBar(string qux, string quux) { return new Foo(qux, quux); } Then memoize the GetBar method so that it caches the result and returns it next time the method is called with the same parameters. You could roll your own memoization, but there are libraries around that will do the job for you too.
To tell the framework version, open the solution in Visual Studio, then right-click the startup project (the one in bold) and choose Properties. The Build tab on the properties page should tell you the framework. Old fashioned web site projects did compile the code on the server. The newer web application projects were compiled and then published to the server. You can usually tell the difference by the presence of a BIN folder in the published output. 
&gt;If you have to compile additional generated files at runtime then you dont use compiled languages There's no hack here at all. What's being compiled is a separate DLL.
You can do that, then. Use Blazor as a starting point (you could use Mono-Wasm directly, but it would be more effort to get a website going), and you can run C# code in the browser. It's a different platform target and won't have all the same libraries available as, say, .NET Framework, but your calculations should work fine.
What if there isn't a solution available?
You don't have the source code available?
Then you likely have a 'Web Site' style project from the earlier days of webforms. You can still open them in VS, just via the 'Open Web Site' menu item, and new versions of VS (&gt; 2008) will create a new .sln file for you. It will likely start the project migration wizard thingy, and then youll be able to see its compilation targets (which, given this discription, will very likely be .net 1 or 2).
I have access to the source code but some of the websites don't have solutions for some reason. Others have multiple solutions. It doesn't make very much sense.
Thank you! That makes much more sense now. I had figured out that opening those as a "web site" worked best on accident, but I didn't really understand the reasoning behind it. Do you have any tips for fixing broken solution files for those that do have them? I've had issues with things like paths referencing network drives, not including all the files that people have added, etc.
https://gfycat.com/gifs/detail/JointHiddenHummingbird This is a friendly reminder that it's "by accident" and not "on accident". ***** ^(Downvote to 0 to delete this comment.)
Source? I know both very well, and can’t confirm.
Either edit the paths in the .sln file, or delete the unloaded asset from the solution/project and re-add it in Visual Studio.
How high-end are you talking about?
&gt;How can I tell which framework version (asp.net, and .net) a code base is using? If there's no other way to tell, web.config should have version based references.
&gt;What is the ASP.NET build process? This depends. Most Microsoft stack devs don't think of projects as 'ASP.NET', I almost never use that to describe a project actually. SO, what really matters are the trapping of the application. Webforms -vs- MVC -vs- SPA (Angular, React, pick a framwork). Webforms is its own animal, and Crusty is being generous in my opinion. That said, it compiles JIT, but it also allows for static compilation should you so choose. Check out: https://docs.microsoft.com/en-us/aspnet/web-forms/overview/older-versions-getting-started/deploying-web-site-projects/precompiling-your-website-cs MVC (web applications) have a 2 stage compilation paradigm, with the M &amp; C being precompiled into assemblies (dll's) and Views being JIT compiled (Razor allows for pretty dynamic DOM construction, so this is mostly just a dev quality of life type of decision, since you can live edit views at runtime and asp.net knows what to do). Regardelss, this is also configurable to be a 1 shot build, but with the tooling and ease of managing MVC apps in general, that change is usually reserved for production publish optimization instead of bug bashing.
Find the app pool in IIS, it'll have a framework version setting. Fastest way to do it.
Web sites are a different beast to desktop or service apps which stay in state. Websites have sessions and early [asp.net](https://asp.net) run a bit like old ASP and PHP pages, with combined front and backend scripts, run as interpreted. The .net version will be stored within the project file, it will boil down to 1, 3.5 or 4+. The reference may point to a framework location. If its 4+ then you're good, or rather its gonna be an easier time refactoring. You may have to use some degree of deduction based on the 3rd party reference dependencies. In terms of deprecated references, if the site runs somewhere, get a copy of the DLLs and run a decompiler on them. Once you know the methods, make an interface so you can inject the old reference into a new wrapper and point to the new wrapper in code. From that point, replace each of the methods individually and refactor out the old reference. See "Working effective with legacy code" by Michael Feathers You can write integration tests using Selenium for front end composition, and if you've done what I said in the previous paragraph, all your new dependant code will be testable using unit tests. The key thing is to only write tests for new code (and arguably for extremely volatile existing code as a stopgap). &amp;#x200B;
I saw on your cross post that your team doesn't use source control. Ok, that's dumb, but not unheard of. What I take exception with is where your team is connection to the live sites by ftp and editing files directly. That's not good at all. I'd be looking for a new job because you've obviously been tasked with this clusterfuck, you'll be the scapegoat when it does go to shit (and it will eventually)
&gt;How can I write tests for ASP.NET? There are a ton of popular unit test frameworks available for .net projects via your favorite package manager, and newer versions of VS have NUnit unit test templates available to add to your project as well. In addition, Application Insights is available for runtime telemetry, is very good at what it does, and is very customizable as well. You should have no problem starting a test bench project once you get your projects migrated to a modern version of the IDE. 
I'm actually just an intern see my post [here](https://old.reddit.com/r/cscareerquestions/comments/a53bn8/how_to_convince_my_team_to_adopt_source_control/) about the lack of source control. To be honest it's already gone to shit in my eyes, but my coworkers don't seem to care if it takes them 2 hours to change some text because nothing is documented or works. I'm not satisfied living that life so I've tasked myself (after talking with my manager about it) with figuring out how to wrangle this beast into something manageable. It's not a great experience but I'm actually kind of enjoying the challenge. 
&gt; get a copy of the DLLs and run a decompiler on them. Once you know the methods, make an interface so you can inject the old reference into a new wrapper and point to the new wrapper in code. I love this idea. I've been reading about Michael Feathers' techniques and this seems like a good way of applying them to the dependencies.
Thanks again for your help. Lots of good info here.
&gt;Do you have any tips for fixing broken solution files for those that do have them? I've had issues with things like paths referencing network drives, not including all the files that people have added, etc. That one is tougher since any number of odd things can end up in those between versions. One thing I always do (if the solution contains multiple projects) is check the project level dependencies to see if I can get one to build on its own, resolving build issues until I can get a build. Once I can, if there are still problems with the .sln file, you can just delete it and create another from scratch and import the projects (.csproj, .vbproj, etc) into a new solution and go from there. Really though, its so situational that you'd need to know whats breaking it.
Hello and thank you for your answer. I'm looking forward to develop my own custom graphing tool in case I really need it, but thank you again for your recommendation. 
That is a deep dark hole you are going down. I wish you luck and, on a personal note, hope you come up with something good and open source it :)
This is a good point though, regardless. IIS can get you to within a revision point (4.6.x) of telling you which framework version matters.
Hello! Thank you for your answer. &amp;#x200B; I've tried downsampling the signal, but the problem is that you cannot simply downsample a signal and hope for the plot to properly represent that signal. Let's say you're sampling the voltage waveform of a 50 Hz system at 10 kHz, then each period has a total of 1/50s = 0.02 = 200 samples. If you plot 1 out of 200 samples, then you'll plot a straight line. &amp;#x200B; I think the best approach to avoid this is to make, like you said, a function that gets an input array, an input resolution, and the output should be an array containing only the points that your canvas will be able to show. That is to say, if you have 500 points that will be drawn in the same pixel, then you only need to keep one of them to represent the signal as good as it gets in this resolution. &amp;#x200B; The question now is how to efficiently do it and how to draw it. As I see it, I have two choices: stick with Oxyplot and draw points preprocessing the signal with that algorithm or preprocess the signal with that alrogithm and then draw it with some library written by me. In the second case I would need advice about how to do it. Do you know some library to draw signals this way and still can have features like zoom in? Of course, I assume I would have to code it by myself too. &amp;#x200B; Thank you again! &amp;#x200B; &amp;#x200B;
Good on you for taking the initiative, you'll get to learn a bunch even if you don't accomplish everything you set out to get done. Being an intern probably means you don't have enough pull to change things like lack of source control or publishing from dev box to production, but its good enough to learn that these are bad practices that cause more work instead of less (the age old argument) and those kinds of dev shops inevitably end up with the clusterfuck of a code base that you see for yourself. File those things under 'shit I will never willing do to others' as you move forward in your career.
I admire your tenacity, but just remember that you can't teach old dogs new tricks, and even if you do manage the wrangle it together they'll not follow any of the best practices you attempt to put in place. I'll take a read through your other post. If you do manage to rebuild these projects into something more manageable, you'll have some nice resume filler. Best of luck
If it is truly a web site project you should be able to convert it to a web application. Right click on the project and see if you have that option. This will at at least make things have a build step where you can start to see some compilation bugs.
I'll have to try this out. I'd really like to have a real build step.
I’ll sell you my book on ASP.NET 2.0
I'm just going to see what happens if I manage to set up a reasonably modern deployment of one of the websites. I'm hoping that if I show how much easier it would make everyone's lives they might take some interest. To be totally fair I can tell that some of my coworkers are pretty fed up with the current system too. It just seems, like me, they aren't sure what they can do about it at this point.
Sorry should have checked, the Factory approach is probably more widely known in Java - and is often overused (and ridiculed for such) for little gain. But it is just another object that creates object and can do the setup - e.g. interface IMyClass { void DoWork(); } class MyClass: IMyClass { public Injected1 Injected1 {get;set;} public Injected2 Injected2 {get;set;} public Injected2 Injected2 {get;set;} public void DoWork(){ .... .... .... } } class MyClassFactory { MyClass Create(){ return new MyClass{ Injected1 = new Injected1(), Injected2 = new Injected2(), Injected2 = new Injected3() } } } An alternative is to pass in dependencies as structure or class - I often use an interface that creates dependencies (you may need to pass configuration information into factory to pass to constructors) interface IMyClassDependancies { Injected1 Injected1(); Injected2 Injected2(); Injected2 Injected2(); } class MyClass{ public MyClass(IMyClassDependancies depends) { Injected1 = depends.Injected1(); Injected2 = depends.Injected2(); Injected2 = depends.Injected3(); } public MyClass(Config cfg):this(new MyClassDependancies(cfg)){ } public Injected1 Injected1 {get;set;} public Injected2 Injected2 {get;set;} public Injected2 Injected2 {get;set;} public void DoWork(){ .... .... .... } } 
I feel like you're joking but getting an old ASP.NET 2 book might not be a bad idea.
My last two jobs have involved some legacy ASP.NET Webforms sites that were essentially on life support. Working with jaded developers can be a struggle, but I've had good luck with getting them on board once I had a working proof of concept for improvemnts. After wrting this up, some of these may be a little advanced, but hopefully they'll help give you some ideas of what's possible. &amp;#x200B; 1) The most imoportant thing before any sort of refactoring is using version control becasue there will be times where you've broken everything and you need to see what changes you've made. Git can give you the confidence to try something bold and, if it doesn't work, blow it away and start again. The great thing about a distributed version control sytem like git is that you can use it locally, and there are some sites, such as bitbucket, that will let you host free private repos as well. &amp;#x200B; 2) There's a good chance that unit tests will be difficult because the code you're dealing with is probably not very testable. While not a replacement for unit tests, I've had good luck writing automated full stack tests using Ruby, cucumber, and capybara ([https://github.com/teamcapybara/capybara](https://github.com/teamcapybara/capybara)). The nice thing about writing tests in something like cucumber is that, if done correctly, you have very descriptive output of what the test is trying to do and where it went wrong. It is a lot of new stuff to learn, however, but there are tons of other frameworks and language bindings to choose from. Searching for how to write Selenium (which capybara does under the hood) tests can be a good place to start. &amp;#x200B; Note: one of the frustrating things about Webforms is how it generates html IDs for elements such that adding other content to the page can change them, so selecting elements on the page by ID is usually not your best bet. &amp;#x200B; 3) Figure out a deployment solution. I've gone from "email a zip file to an admin" to "tell a slack bot to push a tagged release from github" and it has saved our team so much stress. We can easily test in a separate server and we can roll back changes very quickly. Microsoft makes a tool for pushing changes to IIS websites called msdeploy ([https://www.iis.net/downloads/microsoft/web-deploy](https://www.iis.net/downloads/microsoft/web-deploy)). Basically, we "package" a site with the msbuild command-line tool, which will take all the content and binaries defined in the csproj file and put it into a zip file. The msdeploy tool can then send this zip to the server and it will update files as necessary, including removing files which are no longer in the package. &amp;#x200B; 4) Only if you can get version control (at least locally) - there is a tool from JetBrains called Resharper which is a massive plugin for Visual Studio. It's not free, but I believe there is a time-limited demo. It can run all kinds of analysis on your code and even suggest fixes. It will do things like show you unreachable code, warn you about possible null references, show you how to simplify expressions, and modernize your code such as turning loops into linq expressions or replacing string.format with string interpolation. &amp;#x200B; Just try to stay positie and try not to step on any egos when you suggest improvements. I've worked with some stubborn devs, but there's usually a way to get them on board. There's so much you can learn doing this kind of stuff and it can be pretty rewarding to improve the environment for your team. Good luck!
The good news is that its never too late to fix it. The bad news is that its a lot of work to get it into a good state. Once they realize that the effort to fix the devops is less than the work required to maintain the mess, there will suddenly be more buy in. Laziness is the best motivator.
This is the direction that I'm working towards I hope. I know my team has plans to move to Azure sometime within the next couple of years so I've been working on ways to make the transition easy while adding in things like version control, automated deployment, etc. I've already set up a private repository on Azure DevOps that I've pushed the main website that I'm testing to. I think I'm close to having all the major issues ironed out that stand in the way of having it automatically release to an Azure VM. Its funny that you mention Ruby testing because I can't help but feel like my team would be so much better off having built these projects with Rails. The biggest issue I've noticed is that everyone just works however they feel like and having Rails generators keeping a little consistency would have been a godsend. That might not be a very popular opinion on this sub though.
I was wanting to do the projector thing, but the wife won't let me mount it and I don't have anything I can easily put up/take down over my table.
Thanks, it's been fun. I saw a game table someone made where they dropped a TV into it, and then made a cover for the table to make it look normal. I thought that would be cool to build this into. Then I could have the whole range of the table for epic battles.
If the caller is waiting on the result of your async method (or some caller further up the stack) with a blocking Wait() call or Result property access instead of awaiting, you could have a deadlock issue in an environment that started out on the single thread UI context, as your await call to the SQL command will try to transition back to that same thread that the caller is already occupying. &amp;#x200B; You can fix this by adding a call to ConfigureAwait like this: await command.ExecuteNonQueryAsync().ConfigureAwait(false); &amp;#x200B; This will tell the await that you are using to transition back to any available thread in the thread pool.
Correct. It's leaves out the output/innerloop publish stage. It still builds. And yes everyone wants it which is why there is first party support for things like dotnet watch which does exactly what OP may be asking for but doesn't seem to be able put a name on it. The other guy seemingly trying to roast him for not quite knowing what he's asking about on the other hand does seemingly have no idea wtf he's talking about and still proceeds to roast OP all the while not knowing a dime about msbuild, the csharp language targets and or the dotnet sdk. These things are complicated and it's not a crime to not know about these things... All the more reasons not to give newcomers a hard time about what barely amounts to semantics.
Solution files are mostly just a directory listing of projects that are "in" the solution along with build configurations. The .NET version info you are looking for will be inside the project files (if any exist). You could just create a new "solution" and then right click -&gt; Add Existing Project to build a new solution for your work. As for multiple solutions, those were often used in the past to build different software with shared libraries (this is before NuGet existed). One solution would build project A with libraries X, Y, and Z, and the second would build project B that reused Y and Z.
I've dealt with this before. We had an Asp.net website. IIS or IIS Express converts the .aspx pages into .cs files and then compiles it when you request the page. The best luck I've had in the past is creating a new Asp.net Web Application "web forms" project in Visual Studio. Make sure it runs when you hit F5 (launch in debugging) or CTRL-F5 (launch without debugging). After you know the fresh project works. Start adding in the simplest .aspx files you can from the other website. Try and get those simple pages to run by launching the site (CTRL-F5) and hitting those pages' urls. When the page attempts to load IIS Express will try and compile the aspx code. When it doesn't work it should give you a hopefully useful error message. Now begins the slow process of pulling in files from the other app and getting them to run. You probably want to add all the .dlls from the /bin/ folder from the wesite as references to your new project. Some of these .dlls are going to necessary to run. PM me if you have more questions. 
Honestly I think learning Ruby made me a better c# developer. It helped me understand how to break down problems in different ways and it definitely made me much more comfortable with linq and functional programming in general. I still use it a lot, just mostly for smaller things because I know the first time there’s a performance issue people will blame the language instead of whatever stupid thing I probably did.
Well I’m not joking, but you could likely find an old ASP.NET 2.0 book for cheap, or at your local library — libraries tend to be several years behind on language/framework books. If that doesn’t work, send me a PM!
#How can I tell which framework version (asp.net, and .net) a code base is using? Look at the .sln file (for the website project) and the .csproj files (for the libs). #What is the ASP.NET build process? Each page is a little assembly, compiled independently. Their dependencies are implicit and are discovered at build time. Not compatible with the new .csproj format, unfortunately. Under Build&gt;Configuration (last menu item), you can check/uncheck a box to precompile/not precompile the pages. You should not precompile for testing, but should precompile when evaluating pull requests and deploying. #From what I can tell the pages are only compiled when requested on the server. I've been having a hard time running these websites on my local machine as it seems to be pre-compiling the pages. This seems good as I've already discovered hundreds of errors in a single website... I'd just like to know a little bit more about how it works. Each page is a dynamically loaded assembly. You can choose to not precompile (which takes forever) in your build configuration. #Are there other forms of static analysis for older ASP.NET? You can do a validation build (precompile in your dev environment) to find the errors. #I figure if the compilation process has discovered this many bugs already maybe other tools exist that could easily find more. Fix your compiler errors, then do a regression test. #How can I manage deprecated dependencies? At some point you will have to make the decision to rewrite on Razor. #This is another big problem that I've been having. I can't seem to find documentation let alone a source for a lot of the dependencies. Download a decompiler. #How can I write tests for ASP.NET? The same way you write tests for anything else. Selenium for the front-end, MSTest for the backend. 
The library is a good idea! Thanks.
code behinds can be pulled out into stand alone classes for easier testing, this is also where you get the opportunity to pull business logic away from the UI. 
Make the "restartable" state a child property. public State State {get; private set;} public void Reset(){ State = new State(); OnPropertyChanged("State"); }
Sounds like you are confusing services and view-models. Generally speaking, a view-model is about the static of the view or views. Things like which tool windows are open, which records are selected, etc. Hanging off the view model are data models and services. The services, if correctly designed, are usually singletons. That is to say, you create them with the necessary connection strings, then reuse them as often as needed. (They could literally be singletons, rather than just having singleton semantics, but that makes DI and testing hard.)
I am not. ViewModels have state (like what is currently selected). The question is how to handle when a ViewModel needs to be cleared to its initial state. I do not have state in my services, so they don't need to be restarted.
That's good to hear.
You can also use reflection to loop through all of the public properties, setting them to their default values. Not as reliable as the child property, but it doesn't require changing all of your XAML binding expressions.
If you are using the Tortuga Anchor MVVM library, you can use the `ChangeTrackingModel` as your base class. Call `IChangeTracking.Accept()` to define your starting point. Then call `IRevertableChangeTracking.Revert()` to reset all of the properties back to that initial starting point.
Thanks! 
The company I work for is hiring a full-stack web developer. Ideal skills are C#, React, TypeScript and T-SQL. Based in Brisbane, Australia. If you’re interested I can pass on a resume. The position is permanent full-time.
are candidates outside Australia are welcome ?
I'm half intrigued because you've mentioned Australia but not considering applying, I'm just curious what salary range a job like this is offering in Brisbane 
Thanks. I also had the on a test project I was working on! I'd given up. Thanks!
This is definitely the answer. It should be asynchronous all the way. 
It’s not a remote role so no. Also the company is not very big so it doesn’t do any sort of relocation sponsorship. 
PM’d you the salary expectations. 
I work on an webforms app myself but I am the old grumpy developer who is responsible for a lot of the old legacy code. My tips is to brush up on your catalytic skills. That is, get better at communicating and empathize with other people. I couldn't care less if a junior dev were to look at my code base for a couple of hours and say that it's shit and we should rewrite it with react. I would say no, you go and google Chestertons fence and get back when you yourself has produced a decent amount of legacy code. But if you tell me about a small step we could do that would visibly improve our lives, go ahead and make us happier! On this topic, check out April Wensel and her compassionate coding talks. On her own recommendation, start with this. https://youtu.be/SJnVhkEx8Cs
Sounds like a deadlock as the other guy said. It's occurring because of how you are using the UI thread in your UWP app, and it's not occurring in a console app because there is no UI thread. You should read this: [https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html](https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html) or this: [https://blogs.msdn.microsoft.com/pfxteam/2011/01/13/await-and-ui-and-deadlocks-oh-my/](https://blogs.msdn.microsoft.com/pfxteam/2011/01/13/await-and-ui-and-deadlocks-oh-my/), or both.
Thanks that solved the problem.
np I can take care of myself with relocation as long as salary is fair to live in Australia 
Hey all! I just graduated high school with my senior years focusing on IT. I'm confident in C# with project examples being available on my portfolio: williambelcher.io .I'm just looking to get experience in software development and learn more good coding habits. Open to anything position and not necessarily looking to get paid. Thanks guys!
Why not in visual studio?
This is a website that prompts you to write code and then responds. It's more interactive.
Had simillar issue with async methods in xamarin but with HttpClient, fixed easily by running it on another thread, definitely not the most elegant solution but works good so far!
Great!
Just prepping you for the hours spent staring at code wondering why the hell it's not working...
Sounds like a job for wpf as the presentation layer. Personally I'd say shared xml is a bad idea. I'd throw up a Web api somewhere, and that can handle concurrency too (what happens if in your 5 sec scan delay you have two people update? One loses his changes.. Hence why you manage concurrency) 
This is quite the undertaking for someone with a "beginners" understanding of programming. You'll need probably sockets, WPF/Winforms/UWP, and probably a database instead of and xml file. Your requirements actually share a lot of needs with a chat application. AngelSix on youtube has a chat application WPF tutorial, which I will link when I get home.
Thanks both :-) Almost sounds like im in over my head, but none the less, the project will probably do something good for my skills :-) Btw, didnt mention that the computers run on a pretty secure and "locked" network. Application will have to run without installing, and the solution should preferrably be to share some kind of file on a network drive. But i'm curious to see, if the chat function will do the trick.
``` Console.WriteLine("The service is temporarily unavailable. We are working on it."); ``` Ta-dah~! Fixed!
https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.ieditableobject?view=netframework-4.7.2
WPF was only open-sourced *this* month, and is very deeply tied to Windows (DirectX) compositing system. Don't hold your breath. It may never even happen.
I just tried this and it worked... I'm using VS2017, created a Winforms project, used NuGet to get CefSharp.Winforms Added the code below and everything works... Which version of CefSharp are you using? `private ChromiumWebBrowser browser;` &amp;#x200B; `public void InitBrowser()` `{` `Cef.Initialize(new CefSettings());` `browser = new ChromiumWebBrowser("`[`www.google.com`](https://www.google.com)`");` `this.Controls.Add(browser);` `browser.Dock = DockStyle.Fill;` &amp;#x200B; `string htmlText = "&lt;html&gt;hello world- this my html&lt;/html&gt;";` &amp;#x200B; `browser.LoadHtml(htmlText);` `}` &amp;#x200B;
We probably use a different version since, in my case, ChromiumWebBrowser does not have any LoadHtml. It's not a personal project, so updating the it would be a pain
OK, I'm using the latest version from NuGet, 69.0.0. &amp;#x200B; I also tried WPF, a bit different coding but it works. What version of ChromiumWebBrowser do you use? &amp;#x200B;
That literally made me skratta
Is this something like freecodecamp?If it is,can you link me website?
It's the [interctive Introduction to C#](https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/intro-to-csharp/hello-world). 
I have Visual Studio installed but writing a simple "Hello World!" feels overwhelmingly hard when you need to set up classes and definitions just to get to the point where you can use the Console.WrtieLine command. I am getting into this stuff right now. But the basic things like this interactive tutorial make it pretty easy to make your first steps.
You don’t have to set all that up. It shells out a static program class with a main method. Just file, new, console project...
I'm sure that it will help a lot of projects/developers in providing a cross-platform alternative somehow, though.
None of that is accurate. Just make a new Console App project and it’s all automatically there as part of the template. 
[removed]
Visual Studio 2017 Community Edition comes with a C# Interactive Window where you can just type the code and press enter. Best way to practice and learn. 
Literally the only thing in main is Console.Writeline("Hello World!");
Open cmd type dotnet new &amp; dotnet run.
I don't know why Microsoft doesn't use things made by the community for this. They are always making such stupid little tools when they could benefit a lot from integrating with things that already exists. - try stackblitz (for a full online editor experience) - https://dotnetfiddle.net/ really useful for small and fast assertions
Ah yes, not adjusting code to fit the unit tests, but adjust the unit tests to fit the code.
Could also use VS Code 
Thanks for all those answers! Turns out I hadn't installed Visual Studio Community Edition, but just Visual Studio. And that does not have C# pre-installed, but only C++.
Thanks for all those answers! Turns out I hadn't installed Visual Studio Community Edition, but just Visual Studio. And that does not have C# pre-installed, but only C++. &amp;#x200B;
 Thanks for all those answers! Turns out I hadn't installed Visual Studio Community Edition, but just Visual Studio. And that does not have C# pre-installed, but only C++. 
That depends what workload you select when you install it. Select the .NET Desktop Development and you will have c#. It's not too late either, go to Start -&gt; type in "Visual Studio Installer" and Modify the install.
I hope it doesn't come across like I'm just the young guy complaining about the lack of *insert hot technology here*. I understand how most of the code has reached the state that it has. I can see years and years of work that have went into it. I'm sure that much of that time was under the pressure of deadlines meaning code migjt not have matched the original developers expectations. It's totally understandable, I've been trying to approach this situation with empathy as I feel many programmers would not. Just look at the amount of people who told me "just quit" or "break everything" in the other thread I linked to. I'm not interested in a major rewrite of anything. I know that would be a major waste of time. All that is to say that I think certain things are unforgivable. Things like a lack of source control and a proper deployment process have no excuse. It just so happens that as I'm studying how to transition our existing code to utilize these tools I'm discovering many many bugs and I'd like to figure out a better way of handling them in the future. I don't think that's very unreasonable.
Is there a reason you are going the route of a VM in azure? That can be pretty expensive compared to just app service instances.
Just trying to keep things simple for now. It would mimic the current deployment meaning less things to worry about.
I know you, you work for me. In fact I'm in charge of two of you, sigh. Actually it's a great response, shows creative thinking but I do have an programmer that solves problems this way.
Yes. Calling .Result on a not awaited task will block the thread.
its technically possible to fork WPF and make it compatible with openGL or whatever. But as it is its not possible, no.
Ok... Also, even if you did need to "set all that up", C# is an object oriented language, not an interpreted language. If you're gonna write C# you need to get used to and actually embrace "all that stuff" if you're ever gonna be good at it.
Removed: Rule 3, Rule 4. It's pretty vague what you have, especially without any code. My only thought I can think of is to create your own wrapper class around the object/schema provided by the API you're consuming. Read the API, construct your wrapper object and feed the API object into it.
Works for me. Are you really complaining that an online service went down for probably a handful of minutes?
It needs some detail and has a few errors. &gt; Span allocates the memory on the stack, Span doesn't allocate anything, it operates over a preallocated area. This can be on the stack or not. It's an abstraction layer that works with native memory too.
Yeah, eventually, but you can ignore a lot of it when you’re first starting. This is a “Hello world!” program, after all.
Are you using Safari? There is unfortunately a safari bug right now that we are trying to address, hopefully in the next week or so. As a workaround, can you try going to https://try.dot.net directly?
Perhaps you just need to factor out the stateful properties of your ViewModel (?). I use something like `IStateManager` to maintain properties of current user, permissions, config items, etc. This object is injected into my VMs.
[http://piccolo2d.org/](http://piccolo2d.org/)
Why not install Windows? Linux is good but you need Windows for VS (for desktop development).
why are viewmodels singletons? are you using a MVVM framework? I recommend ReactiveUI, it is great. for state (shared state) I use a redux implementation, all my viewmodels can access that shared state.
Start from scratch
Windows is an ad platform that plays games. It hardly passes for a modern operating system.
Use dotnet fiddle or rextester
His complain is acurrate. It's faster to open compilators online if you just want to check one, simple thing.
I was imagining something like: Click indicator, drop down choice between green, yellow, red, black. On click, overwrite XML line 1 column 1 with (1, 2, 3 or 4) Click button/arrow, drop down small text box, on [enter] or button click, overwrite XML line 1 column 2 with textbox text. Both indicators and textbox values fills from XML on 5 sec scans. Could it work?
Quite right. Treat the Python as pseudocode and rewrite.
The question is, why do you want to do it? Anything you can do with Python, you can do with C#.
My only suggestion is to make sure you know of all the options and prices. If you want to get buy in from colleagues and upper management, have cheaper options available.
Just learned a few things. WPF is another approach than windows forms, but more suited for my project. Also using a chat application as a foundation might be a good bed, as long as it has the information stored even with no instances of the application open. Using a database might be better for my project. Will have to see if i can make my project make a new database file, if the file somehow should be missing. I was hoping i could make a subtle dark themed layout for my side bar, WPF might be able to do that. Also i need to find out how to make a small button that looks like a LED, for the indicator.
Du förlorar nu mannen
In this release: - Task.SafeFireAndForget - IAsyncCommand - AsyncCommand - AsyncCommand&lt;T&gt;
For those situations, you need [LinqPad](https://www.linqpad.net/download.aspx).
You should have two sets of classes anyway - the core business domain ones and then the "internal" ones used by your data layer. It then becomes a matter of mapping your domain ones to the ones used in your data layer. You then avoid any crazy base class for the sake of an ID field etc.
Does this have any support for `ConfigureAwait(false)` that people often miss?
How do you integrate those into a tutorial page?
Looks like vredd.it has one process [you care about](https://i.imgur.com/zzSYddD.png) So the key would be to mimic that call. The form data is easy, its just: `url: https%3A%2F%2Fv.redd.it%2Fmppst6eqgf421` And the response is: `{"id":"mppst6eqgf421","conversion_time":1.39}` Which becomes: `https://vredd.it/files/mppst6eqgf421.mp4` I think you can see how it gets that link from the response object. So to mimic that I'd suggest setting up a `WebRequest` object and making `ajax_process.php` call yourself followed up by a call to the `files/{file}` endpoint. I'll gen up a code sample for you here in a minute... 
Awesome - looks exactly like what I need .
I've only scanned through, but the MVVM bits seem to cover captured contexts for continuation, so it seems to have been considered. 
There is or at least used to be a Python.Net. I've no idea if it's still around. I'd probably go with the others and say just rewrite it unless there are reams of it.
For NAT you can use this library https://github.com/lontivero/Open.NAT What interface are you binding to? can you provide your code. Also any reason for opting for UDP over TCP for this project?