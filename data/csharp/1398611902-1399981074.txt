Why wouldn't it be?
&gt; So for example, if it would receive the last message at 3pm, and then lose connection it would tell the bouncer that it wants everything since then, when reconnecting. &gt; &gt; Also maybe some support for push notifications a la "You missed x messages!". Explain? ZNC does this for disconnected clients already, unless you're describing something else. One thing I hate about ZNC is if you have multiple clients connected to the same network, and you start a conversation in private with someone *your* messages aren't relayed back to both clients. Other than that, I kinda like the idea of a C# bouncer for IRC. How would it be hosted? IIS shell? Console app running on WS? Windows Service?
Hmm, I'm not aware of ZNC supporting that, my client always gets spammed with the number of messages configured and I didn't see anything about it in the config panel. Tbh, I haven't thought about how it'd be run yet, but setting it up as console application should be trivial. Nice to hear that you like the idea :) It'd have plugin support too, of course.
I'd gladly help. Still learning C# while trying to develop something on my own. Maybe we can help each other out. 
Great to hear, git clone the source and see what you understand :) Also let me know your github username, for the collaborator list.
The short answer: the web installer is best and fastest option for a single install. The ISO is best and fastest (overall) when you want to install on multiple machines.
Yea, so far I haven't done any real software in them. I've just done classes in them, I haven't done much self taught programming and I'm finding it hard to find something that answers all my questions, like is String.Length() O(1) kind of question. If you would be able to direct me to something that has answers to those questions that would be great.
What specific pieces do you need help on?
AngularBeginner is assholish.
It is used to refer to the members of the class you're currently in. For example, your constructor parameters could also be called param1 and param2, so to resolve ambiguity you would *have to* use this. In your example it is not necessary.
"this" is a reference to the object in which you currently are. In your code example above, when you call that constructor, the constructor will be executing in the context of the newly created Sample. If you want to touch the attributes or methods of that particular Sample, you use "this". In this particular case, using "this" isn't necessary. However, it becomes important when resolving scope. For example, if the passed in parameters had been named param1 and param2, then you *have* to use this.param1 to explicitly state which param1 you're talking about. This link goes to the Java documentation on the same topic. It's basically identical to C#. http://docs.oracle.com/javase/tutorial/java/javaOO/thiskey.html
this is the current object you are in, the current instance in memory. If you create: var a = new Sample(x,y); var b = new Sample(m,n); Then the this in the constructor for a refers to a and the this in the constructor for b refers to b. It's mainly used for good coding readability, but also has some practical applications like if you have your params to a method are the same name/case as the internal variables. class sample { public int Value { get; set; } public sample ( int Value ) { this.Value = Value; } } Without the this in the constructor, Value = Value; Is ambiguous and bad coding practice. 
Resharper and other static code analysis tools would assert that the constructor parameter "Value' should have a lower case "v", and that the "this." is entirely unnecessary (it can [pretty much] always be omitted). C# 6 will do away with constructors that purely put parameters into fields and properties. Source: we develop software that contains hundreds of thousands of lines of code and our coding standard forbids the redundant use of "this."
I know, constructor inheritance might have been a better example but i just thought of it and the only other thing i could think of was abstraction which would only confuse him/her.
I don't have VS in front of me to try this, but looking at the documentation and SO, I think you should be calling `Open` from `objApp`. That is, instead of `var Workbook = Microsoft.Office.Interop.Excel.Application.Workbooks.Open(fileName);` try `var Workbook = objApp.Workbooks.Open(fileName);` As for general advice, do not "define variables globally so they can be used multiple times." As far as I can see, you don't even need the ones you define (besides `objApp`). Rename your variables to be more clear. Don't use `objApp`, use `excel` or `excelApp`. Don't use `fldg`, use `fileDialog` or `openFileDialog`. No real need to use `const` in a method (at least not here). And, I realize you're templating and getting things to work, but eventually you'll want to use multiple classes, methods, properties, etc. instead of throwing everything in `Main`.
I want to add that in your example 'this' isn't necessary. It would only be needed to distinguish the one that belongs to the class from the parameter variable if the names were the same. I think if you take the this out, what it is actually there for might make more sense. 
Thanks a lot. That makes so much sense that I need to call my old application to do this. As far as defining the variables is concerned I eventually want to put this into a box that chooses two buttons, and either of the buttons can use the same variables. I agree that I could be more clear with my variables. I'm being sloppy. I'm just taking code from the internet until I start to understand it a bit more. Thanks for the advice. I've yet to learn how to use multiple classes, methods, and properties, but it seems like that's the next thing I need to be looking into... Thanks again.
 this is a keyword that refers to the current class. In your example, "this" is only used to make it clearer what members are being accessed. Functionally, it is the same as this way: public Sample(string a_param1, Priority a_param2) { param1 = a_param1; param2 = a_param2; } "this" is used often, most times I've seen it as in your example, where it's just used to make it very clear that a member of the current class is being accessed. Here are some other uses: -- Constructor overloading -- internal class Sample { private string param1; private Priority param2; public Sample() { Priority = Priority.Low; } public Sample(string a_param1) : this() { param1 = a_param1; } } No matter which constructor is called, the Priority will be initialized to "Low" because the 2nd constructor calls the first through " : this()" -- Passing a self-reference -- // admittedly an extremely contrived example internal class Sample() { public string Value { get; private set; } public string GetValue() { return GetSampleValue(this); } } public string GetSampleValue(Sample sample) { return sample.Value; }
Wait, what's so bad about this. that you'd have a style guide explicitly forbid it?
&gt; I feel like I won't finish it without someone else on the Team, due to not being motivated. Motivation xD 
Good idea, in Visual Basic the synonym for "this" is "Me."
You're likely subscribing to either a text changed event or a key press event. You may want to try subscribing to a button click event. You could also try something like this: http://stackoverflow.com/a/1226740
Your code should not be incrementing the score each time. What you provided looks good, so I assume there's some mixup in variable storage. If you only want to call this method when they finish, though, you'll have to create an event for something other than the textbox update. 
While C# In Depth is good (although I think some of the praise is hype because Skeet is so big on SO), it's not a "my first C# book" kinda book either -- in fact, in the second and third editions he's even added a foreword saying just that.
If you use 'instance' or 'object' instead of 'class' in your first sentence then you are right on the money.
OTOH, Microsoft style is to use this. for all instance variables.
Nothing but you should probably be consistent in whether you use it or not.
Also disposing a memory stream doesn't really do anything (unlike other stream types). c.f. http://stackoverflow.com/a/234257/2441808
You can't; this is a job for a profiler which will show you what objects are being referenced and therefore are staying in scope.
Isn't RNGCryptoServiceProvider an IDispoable object? And if you want an int just use modulo division.
I never used to use it but I noticed I made some dumb mistakes that I wouldn't have if I were using it (like assigning an instance variable to a constructor parameter instead of the right way around) so I don't think it's a bad idea. We're talking about five characters here.
*Current object. 
Ok thank you for explaining. To be honest I'm not really sure how to self teach, my most recent course involved a lot of efficiency based learning and we were told to constantly think about the run time of our programs, so I guess I've just gotten in the habit. I know it's not going to make a real difference in the end program at my level, but might as well keep the habit. That said thanks for the book recommendation. 
Hm, the calculate class is supposed to be a method, but I'm still fumbling through figuring everything out. I tried putting "average" in the parenthesis of calculate, but it still wasn't working. I'm starting from the beginning again to try and figure out what I missed. The whole point of the assignment is to use overloaded methods, but I'm trying this first half done before figuring out the second part.
Yea, that
You're trying to assign a value to a type. There is no "Priority" field (stupid example names).
More like "but this is me"
That's correct :)
I don't know if you posted all your code, but you are missing the containing class; the static main method is your entry point to the program which will call the static calculate method. I agree, the 'average' variable probably makes more sense to be called 'total' or 'sum'. The compiler error is because 'average' is scoped to the main method and cannot be seen by the calculate method. You could either pass the summed value to the calculate method, or scope the variable as a static (or global) variable. public class program { static double total; static void Main(string[] args) { Random randomNumbers = new Random(); int d; for (int counter = 1; counter &lt;= 20; counter++) { d = randomNumbers.Next(1, 100); total+=d; } calculate(); } static void calculate(); { Console.WriteLine("The average of the 20 random numbers is " + (total /20)); }}
Pay attention to your `calculcate()` method: static void calculate(); { Console.WriteLine("The average of the 20 random numbers is " + (average /20)); } Especially at the end of the first line. You see the `;`? It's not supposed to be there. Also as the rising pheonix said, the variable `average` is not in scope in your method `calculcate()`. You should pass it as an argument. Also, not a technical error but a semantic one, your variable is named `average`, but it stores the `sum` of values. A huge difference.
I left out the containing class as it had my last name in it. It now says the "/" is an invalid token. I've somewhat started over, since I believe I have to have main call a random number generator to get the random numbers, but the assignment says the variables should all be declared in Main.
right, it's named average because it will be used to calculate an average later, but I agree it makes a big difference. The assignment says that I'll need four variables, so I've been trying to use exactly four (two of them are used for a part I haven't gotten to yet). I probably should just use more than the four, though.
The best way I can think of to do it would be something like this: string[] myString = new string[] {"1", "2", "string1", "3"}; int myInt; foreach (string temp in myString) { if (int.TryParse(temp, out myInt)) { //our current iteration is an int //do stuff with your ints here } else { //our current iteration is just a normal string //do stuff with our strings here } } You might be able to use an untyped arraylist or something, and typecast each item to the appropriate type, but then you would need to know what type of object each element was, or use the same TryParse method.
 var myArray = new object[] { 1, 2, "foo", 4 }; 
Regionizer 2.1 With Auto Commenting System is now released on CodePlex: regionizer.codeplex.com This video shows you how to: 1. Download and Install Regionizer 2. Download and register the comment dictionary 3. Customize the text of existing comments 4. Use RegEx Hero www.regexhero.com to create regular expressions to create your own comment items. Also the video lists information about a contest to help promote Regionizer. Last time I posted something here, I was criticized for how I coded (tough room). When I was a kid if someone gave you something you didn't like you said "Thank you" and threw it away. Hopefully you will like the Regionizer 2.1 Auto Commenting System, I think it is cooler than sliced bread.
2:13 // if the security object exists if (SecurityObject != null) 2:21 // Determine the action by the departmentID switch (departmentID) 2:26 // Iterate the collection of Customer objects foreach (Customer customer in customers) 2:34 // if the value for x is greater than 5 if (x &gt; 5) 2:42 // Create a new collection of 'Customer' objects. List&lt;Customer&gt; customers = new List&lt;Customer&gt;(); 2:51 // Create a new instance of a 'Customer' object. customer = new Customer(); 2:58 // if the value for isAutoCommentingCool is true if (isAutoCommentingCool) 3:06 // if the value for likeWritingCommentsByHand is false if (!likeWritingCommentsByHand) I stopped watching here, because it is absolutely clear what I want to say with the following: These comments are **useless**. The comments are exactly saying what happens in the next line. I don't need a comment to see that you're iterating the collection of customers, because **the next line shows already you're iterating the collection of customers**. I'd even say these comments are **harmful**, because they **bloat** the code **without giving additional information**. Comments should not explain **WHAT** the code is doing - I can see that by looking at the code -, they should explain **WHY** you're solving a problem the way you do it.
Regionizer C# Auto Commenting System is finally here. How much faster can you code if you do not have to write every comment by hand? The Regionizer Auto Commenting system uses regular expressions to match patterns of code. You can also create and register a custom comment dictionary which allows you to create your own comment items. Watch the YouTube video: https://www.youtube.com/watch?v=lB86fBS0fZg to learn more. 
Does this do anything besides writing pointless comments? // if the value of x is greater than 5 if (x &gt; 5) { } No one should need a comment to explain simple stuff like this.
Exactly! Like I said in my posting, I don't need a comment saying this because the next line already shows this.
Why making two postings for exactly the same thing? And apparently you only registered to advertise your project... Anyway, so I post my comment here too: 2:13 // if the security object exists if (SecurityObject != null) 2:21 // Determine the action by the departmentID switch (departmentID) 2:26 // Iterate the collection of Customer objects foreach (Customer customer in customers) 2:34 // if the value for x is greater than 5 if (x &gt; 5) 2:42 // Create a new collection of 'Customer' objects. List&lt;Customer&gt; customers = new List&lt;Customer&gt;(); 2:51 // Create a new instance of a 'Customer' object. customer = new Customer(); 2:58 // if the value for isAutoCommentingCool is true if (isAutoCommentingCool) 3:06 // if the value for likeWritingCommentsByHand is false if (!likeWritingCommentsByHand) I stopped watching here, because it is absolutely clear what I want to say with the following: These comments are **useless**. The comments are exactly saying what happens in the next line. I don't need a comment to see that you're iterating the collection of customers, because **the next line shows already you're iterating the collection of customers**. I'd even say these comments are **harmful**, because they **bloat** the code **without giving additional information**. Comments should not explain **WHAT** the code is doing - I can see that by looking at the code -, they should explain **WHY** you're solving a problem the way you do it.
You should be doing the second option, as far as I know. That's the methodology I use as well as, say, int/double/float/datetime.TryParse()
You should always be doing this: public static bool TryGetFooByCriteria(Criteria criteria, out Foo foo); The .NET frameworks methods are build like this and this is what a .NET developer would expect.
Thanks. Would this still hold true on a Reference Type?
It's called the TryParse pattern and is documented (poorly) here: http://msdn.microsoft.com/en-us/library/vstudio/ms229009%28v=vs.100%29.aspx Also you will notice that all Try-methods of the .NET framework are built like this. It is common to simply assign the default value of the type to the out parameter in case of an error.
That depends, but I would. It's consistent with the TryParse pattern.
Thanks again for your help! If I can keep piling on while I have you: :) Does that guideline apply to Reference Types and Value Types both? If it applies to Reference Types, and there is no notion of a default value, would `null` be correct? Also: Am I correct in understanding that the recommendation is to always have two functions (`TryGet` and `Get`), which are essentially duplicates except that one throws an exception and the other does not? That seems like an awful lot of extra code for what *could* be essentially the same outcome.
I don't know of any other idiom like this. Personally.. Let's take your example method: public static Foo GetFooByCriteria(Criteria criteria) Is it **expected** behaviour that a criteria is not found, or is it **exceptional** behaviour? Remember, **Exceptions should be exceptional**. If you expect it to happen, then don't use exceptions. If you expect it that a Foo could not be found, then just return `null` in those cases. Of course you should add this information as a comment. ;-)
Ok, thank you very much! I'll go with `GetFooByCriteria`. Thanks for the very fast responses too, it'll help me get to bed at a sane enough hour! How do you like Angular? :)
&gt; Ok, thank you very much! I'll go with GetFooByCriteria. Thanks for the very fast responses too, it'll help me get to bed at a sane enough hour! You're welcome. &gt; How do you like Angular? :) I hate it. I hate front-end development in general, but when you do a project all alone you have no choice.
You quit watching before you saw how to create comments, that even you would find useful. The idea is you can extend the commenting system, so if there is a comment that is worthy of your praise, then you can create it. You quit watching before you saw how to do that, or were you were too lazy to learn how to do something useful.
Good to know! I feel similarly about front-end. I'm much more at home on the back-end, but brand new to C#, so it's a bit like starting all over. Last week I had to implement some social sharing widgets and it reminded me what a mess front-end code can still be.
If you want to reply to me, then please also reply to my comment. If you want people to keep watching, then perhaps you should show some **real world examples** that people would really use, examples that actually **improve the code** instead of **decrease the quality**. My point is also, you hardly can automatically generate meaningful comments. The only meaningful comments you could create that I can think of are Post- and Pre-Conditions. Can your tool create XML documentation comments for methods, based on the following code? bool myMethod(int a, string b) { if (a == 0) throw new ArgumentException("Must be larger than 0", "a"); if (b == null) throw new ArgumentNullException("b"); // ... } bool myMethod(int a, string b) { Contracts.Require(a &gt; 0, "a must be larger than 0."); Contracts.Require(b != null, "b must not be null."); // ... } If so, please show an example for this.
And how to test the type: foreach(object obj in myArray) { if(obj is int) { DoSomethingWithInts((int)obj); } else if(obj is string) { DoSomethingWithStrings((string)obj); } else { // Unknown type. Panic. } } That being said, there's probably a better solution than a single array.
Since you've already gotten an answer, I'll just add this: Generally, you don't mix types that have nothing in common. What are you trying to do?
&gt; That being said, there's probably a better solution than a single array. Yes, it is *exceedingly* rare to need this unless you're doing reflection or something similar.
Yes, but I have to use a sum of different numbers in the second half of the program- shouldn't I keep the two terms different? Edit: I could just have sum and sum1, I suppose.
It is Microsoft that requires you to be an Admin, not me. I give up with this room, you are too tough of a crowd for me. I spend hundreds of hours writing something that might make the life of a programmer easier, I spend even more time making a video and then I give it away for free, with the code, I get slammed every time I do. And to those who think comments are useless, you must be students or you have never worked anywhere with strict coding standards. Half of the places I have worked, if you turn in code without comments, they will send it back as unfinished just as if you had left half of the code out. And my last point, I have had bosses that required comments so they could step through the code and read what was going on to verify business rules were enforced, even though that boss did not have knowledge of C# syntax.
I certainly agree that CLR via C# is not essential for C# developer jobs. I like to know more of what is going on and like it for that. 
calculate(double, double) is returning the new value, not updating anything passed into it. Later in your code when you call the method, you are not storing the returned value anywhere, so essentially you are doing nothing. Edit: Just realised you are doing an assignment on the same line, however the parameter is not a ref parameter, so it won't update the original value anyway.
Thank you, that's what I was missing!
I changed the part where I call calculate (double, double) to total = calculate(input, total) and now it's working like a charm. Thanks so much!
no problem, glad that fixed the problem!
You are right, it does not update the total value in main. That is because you input the total variable as a parameter, and double is a value type so the value of double is passed to the parameter. Changing the parameter in the called method will update the value of the parameter, not of the variable that was inputted (on the other hand, there are reference types, they will change the value of the variable on the calling side. To fix this problem for you, there are 2 approaches: 1) Use your return value 2) Use an out parameter As your code is right now, it returns the result of the addition of total and input: return total = input + total; Like I explained above, changing the total variable in this method is pointless, so change that to the following: return input + total; Next, use the total variable where you call your calculate method: total = calculate(input, total); The other approach is to slap the out keyword on you total variable and parameter, do note that this is frowned upon, out params are considered a bad practice by a lot of people (including me, so I will not supply the example code here).
Thanks so much. Every time I think I'm starting to get the hang of this, the next assignment knocks me on my ass again. Using the return value fixed it!
You are more than welcome. I hope you realise why and what you changed, that is the only way you will truly learn to write code, and understand what is going on. If not, speak out and I will elaborate. It might get intimidating but I will try my best to explain what happens. And don't worry about getting knocked on your ass, the assignments are designed to do just that, accept defeat and learn from your mistakes.
Just to chirp in, i humbly disagree. First, the framework has all sorts of warts, and treating it as dogma is not necessarily always a good idea. I grant you that consumers should recognize the bool TryGet(..., out result) pattern, but would still feel a little bit violated by the out parameter. Note that this may change with C# 6. The pattern I would prefer is returning null, and naming the method GetFooOrDefault() or just GetFoo(). If you are doing something legit (as opposed to homework assignment, hack or personal project) - go ahead, type up a FooResult with a Foo and HasFoo and return that. ;) 
You could try binding it to the Leave event. That way it will be called when the textbox loses focus
We already had exactly this subject. :-) http://www.reddit.com/r/csharp/comments/2462ld/naming_conventions_when_to_call_something_tryget/ch3yv13
See [ASP.NET Identity 2.0: Setting Up Account Validation and Two-Factor Authorization](http://typecastexception.com/post/2014/04/20/ASPNET-Identity-20-Setting-Up-Account-Validation-and-Two-Factor-Authorization.aspx)
Perhaps you might create an array of class objects containing both an integer value and a string value. As, I am assuming here, that you are just learning and would like to store custom string and int values in a single array which match or correspond to each other? For example public class TextNum { private string text {get;set;} private int num {get;set;} } Then fill your class object TextNum tn = new TextNum(); tn.Text = "String1"; tn.Num = 1; List&lt;TextNum&gt; list = new List&lt;TextNum&gt;(); list.Add(tn); Then you can use a foreach loop to iterate through them. Otherwise the lads have posted other solutions to your actual question. 
Well, there was that time someone said "javascript has its quirks".
http://www.billharlan.com/papers/A_Tirade_Against_the_Cult_of_Performance.html It's not bad to be aware of performance or to avoid obviously inefficient designs like quadruple-nested loops. But when you're at the point of wondering about the runtime of accessing built-in framework properties you're going too far. "Constantly think about the runtime of your program" is actually really bad advice for writing production software, especially for a beginner. The big problem is you'll guess wrong where the bottlenecks might be and end up writing hard-to-understand, buggy code for no good reason. In my opinion, rather than memorizing the syntax of yet another language, you'd probably be better served by trying to write some small programs for yourself that achieve something you'd like to do. I think that will do more to help you advance. If you really want to learn about efficiency, read about algorithms and data structures, which are language-independent.
Notice the tryget versions return a boolean indicating whether the item was found or not. For dictionaries this is important because you have the following scenarios: * false/null: item was not found * true/null: item was found but is null * true/not null: item was found Essentially a false returning means an exception would have been thrown but was caught.
The Random class produces a sequence of random values based from some seed. You're seeing less randomness now because you're resetting the seed every time around the loop using the system timer - and chances are a lot of the time it won't have advanced on to the next "tick" yet! You're best off initializing the Random generator at the start of your code (yes, you can use the time to seed it, or you'll get the same sequence of values every time), and then just pulling the next value out when needed. A couple of stylistic points: * variables should be declared in the smallest scope that use them; so randomNumber and input should be declared where they are used in the loops. * Your two "calculate" functions do wildly different things, and so shouldn't have the same name. * You have two logical sections to your code with no dependency between them: break them out into separate functions. 
Just use `default(T)` - it automatically provides a null for reference types and a default value for value types.
Note that since int is a struct (value type), this solution will use [boxing and unboxing](http://msdn.microsoft.com/en-us/library/yz2be5wk.aspx), which is an expensive operation. If its possible, you should try to avoid mixing different types into the same collection
Given how simple it is, and assuming that the input will always have the same format, I would avoid RegEx. It seems a bit overkill. What I would do is use the [String.Split](http://msdn.microsoft.com/en-us/library/tabh47cf%28v=vs.110%29.aspx) method to split it into separate lines on the new line characters. Then, for each line, split on the semi-colon. For the first, I would split on the forward slash, then parse them as a [Double](http://msdn.microsoft.com/en-us/library/system.double.aspx), then divide. The second, I think I would go for using a [Decimal](http://msdn.microsoft.com/en-us/library/system.decimal.aspx). The ISO you should use a [UInt32](http://msdn.microsoft.com/en-us/library/System.UInt32.aspx).
thanks
That sounds like sound advice. Thank you. I think I'm going to try that.
I don't know why you think that a RegEx is overkill. I think a RegEx is perfect for this. As opposed to a series of splits, substrings and hardcoded indexes, you get the benefit of being able to understand your code when you come back in six months.
On the whole, Regex is far more forgettable (i.e. cryptic) than C#. That said, its a moot point with appropriate commenting.
I think the TryGet pattern exists for non-nullable types, where by definition you cannot return null. The Try function will return the out variable as the default value of the object and a boolean telling you whether the output variable was parsed, or if that default value coming back is the default because the parse failed. If Foo is a struct, I would expect the function to be implemented as TryGet. If it is a class, I would expect only a Get, and null to be returned if a matching Foo is not found.
&gt; the framework has all sorts of warts System.Drawing.Point is a mutable struct... yeah.
I don't have the time to read through the comments and see if this has been answered already, but perhaps just to pile on another affirmation: public static bool TryGetFooByCriteria(Criteria criteria, out Foo foo); is correct. I would expect that the return value indicates if an exception would have been thrown. Only do this if 1) the method is expected to throw an exception often in some circumstances and 2) this will result in a noticeable slowdown due to exception handling. Using a Try...(out ...) method is useful in this circumstance to avoid 2).
Off the top of my head - a Get *method* is for cases where you can't get whatever it is from a simple accessor. That is, when your getter involves non-trivial logic or, somewhat less likely, has side effects of some sort - which it sort of shouldn't, at least not with that name. As /u/azurite_dragon says below, you wouldn't even use this if you have a nullable return type. Then, the TryBlah methods already in the .NET framework are typically there to support existing Blah methods that can throw exceptions, they're mostly only there so you won't have to write a whole try-catch block. Bottom line, I wouldn't really call it Try-anything in this context. Another tip: mind your verbs when creating methods/functions. You might want to call it different things depending on what you actually do. If it's a list, dictionary or something, Get is appropriate - in my mind, you only "get" something if it's quite easy - opinions will naturally vary. If you're actually creating something, "construct", maybe? (Avoid Build unless you're actually returning a Builder.)
You can have neither an instance, nor inherit from a `static class`
If you're using the extension method LINQ (.Select().Where()...), you can put breakpoints inside the lambdas by putting your keyboard cursor inside the statement and pressing F9. That gets you a way to look at individual values being iterated over.
That is pretty much what I was thinking. There's two issues I can see with that code though: The input's new line marker may not necessarily match Environment.NewLine. Environment.NewLine will return "\n" on Unix systems, and "\r\n" otherwise. The second is that there's no overload that just takes a String[], you'd need to supply the StringSplitOptions enum too. I would replace that line with this: string[] foo = inputString.Split( new [] {"\n", "\r\n"}, StringSplitOptions.RemoveEmptyEntries); I do think it would be better to store the key and value, too. That way, you can handle the order being changed when parsing.
Using a hash would give you absolutely no matches, unless two files are exactly the same and it's more likely to find a rather different file that has the same hash. You should use a library for finding similarity in images for what you're trying to do.
Without actually seeing any of your code (ie. your method), it will be rather hard to help you. You can remove individual items with the `Remove` method(s). There's also `Add` and `Insert` methods.
c# in depth http://www.amazon.com/Depth-3rd-Edition-Jon-Skeet/dp/161729134X
This is probably not good, but it seems to work: string[] lines; lines = ExifData.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries); foreach(string line in lines) { if ( line.Contains("Aperture") ) { float temp; try { string[] lineHalves; lineHalves = line.Split(new string[] { ":" }, StringSplitOptions.None); temp = float.Parse(lineHalves[1]); Aperture.Text = temp.ToString(); } catch { } }//end if contains "Aperture" if (line.Contains("ISO")) { float temp; try { string[] lineHalves; lineHalves = line.Split(new string[] { ":" }, StringSplitOptions.None); temp = float.Parse(lineHalves[1]); ISO.Text = temp.ToString(); } catch { } }//end if contains "ISO" if (line.Contains("NDFilter")) { float temp; try { string[] lineHalves; lineHalves = line.Split(new string[] { ":" }, StringSplitOptions.None); if (line.Contains("On")) { NDFilter.Text = "3"; } else { NDFilter.Text = "0"; } } catch { } }//end if contains "NDFilter" if (line.Contains("ExposureTime")) { float temp; try { string[] lineHalves; lineHalves = line.Split(new string[] { ":", "/" }, StringSplitOptions.None); DebugText.Text = lineHalves[2]; temp = float.Parse(lineHalves[1]) / float.Parse(lineHalves[2]); ExposureTime.Text = temp.ToString(); } catch { } }//end if contains "ExposureTime" }// end foreach line
I think the TryParse pattern is inappropriate for your secenario. TryParse has two use cases: * I know the input string is correct. int.Parse(s) * The input string might be bad. int.TryParse(s, out i) The first one throws an exception because you might be wrong. *** For your scenario, consider the IndexOf pattern. It returns the placeholder value -1 if it cannot find a value. Or the Find method from LINQ, which returns a null if no value was found.
Example: &gt; Return Value &gt; Type: T &gt; The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T. http://msdn.microsoft.com/query/dev12.query?appId=Dev12IDEF1&amp;l=EN-US&amp;k=k("System.Collections.Generic.List`1.Find");k(TargetFrameworkMoniker-.NETFramework,Version%3Dv4.5);k(DevLang-csharp)&amp;rd=true
Do you mean you're trying to find 2 images that are the same? Or duplicate files SHA may work for the latter, but I can nearly guarantee it'll be a bad bet because even as much as a resize will throw the hash off completely. If you want to do image comparison, I suggest looking at OpenCV, you can find samples that do just that, and AFAIK they have a C# port. As far as storage, I think you may be able to make a better decision once you see the structure and size of the converted image. If I remember correctly, opencv makes it a matrix like structure, and then you would persist the matrix and run one of the opencv algos for comparison. No matter how you look at it it will be a resource intensive operation. Depending on the algorithm and how you optimize it can run from minutes into dozens of hours if not days
That would work, but you have a lot of repeated code, and you shouldn't catch exceptions and do nothing with them. If you do code will fail silently and cause problems without you being able to find them easily. Also, there is the [TryParse()](http://msdn.microsoft.com/en-us/library/26sxas5t%28v=vs.110%29.aspx) function, which handles a failed parse. This, I think, would be better: string[] lines = ExifData.Split( new [] {"\n", "\r\n"}, StringSplitOptions.RemoveEmptyEntries ); foreach(string line in lines) { float temp, temp2; string[] lineHalves = line.Split( new string[] {":", "/"} StringOptions.None); if ( line.Contains("Aperture") ) { if ( float.TryParse(lineHalves[1], out temp ) { Aperture.Text = temp.ToString(); } }//end if contains "Aperture" if (line.Contains("ISO")) { if ( float.TryParse(lineHalves[1], out temp ) { ISO.Text = temp.ToString(); } }//end if contains "ISO" if (line.Contains("NDFilter")) { if (line.Contains("On")) { NDFilter.Text = "3"; } else { NDFilter.Text = "0"; } }// end if contains "NDFilter" if (line.Contains("ExposureTime")) { DebugText.Text = lineHalves[2]; if ( float.TryParse(lineHalves[1], out temp) &amp;&amp; float.TryParse(lineHalves[2], out temp2) &amp;&amp; lineHalves.Length == 3 ) { temp /= temp2; ExposureTime.Text = temp.ToString(); } }//end if contains "ExposureTime" }// end foreach line Given that you're not doing anything with the ISO and Aperture values as numbers, there's not really any reason to parse them.
Duplicate files. I know of two that are definitely duplicates in nearly every sense (slightly different names TF-950.jpg -&gt; tf-950.jpg), they are just in two different locations and I want to see if there are more like that.
Sorry, OP said a class with only static methods. You are correct if the class is marked as static.
To use words that you should be familiar with since you're learning in uni: It is a reference to the object which defines your current scope.
Good to know, thanks.
Sorry, I must've extrapolated that the class was static too... because it makes sense.
You are correct. It is an IDisposable object, so it could be wrapped in a "using" block. But it might be even better to move it to a class level static variable, since we don't really need to keep instantiating and disposing of it. So, this code would be an improvement on the original: public static class RandomNumber { static readonly RNGCryptoServiceProvider _generator = new RNGCryptoServiceProvider(); public static int Between(int minimumValue, int maximumValue) { byte[] randomNumber = new byte[1]; _generator.GetBytes(randomNumber); double asciiValueOfRandomCharacter = Convert.ToDouble(randomNumber[0]); // We are using Math.Max, and substracting 0.00000000001, // to ensure "multiplier" will always be between 0.0 and .99999999999 // Otherwise, it's possible for it to be "1", which causes problems in our rounding. double multiplier = Math.Max(0, (asciiValueOfRandomCharacter / 255d) - 0.00000000001d); // We need to add one to the range, to allow for the rounding done with Math.Floor int range = maximumValue - minimumValue + 1; double randomValueInRange = Math.Floor(multiplier * range); return (int)(minimumValue + randomValueInRange); } } Can you show how/where you'd use the modulo division? Maybe my coffee hasn't kicked in yet, but I'm missing where it would be advantageous here. **EDIT:** Also, does anyone know of a good substitute for RNGCryptoServiceProvider that can be used in Windows Store apps? It looks like it isn't available - I'm assuming because of crypto export laws. **EDIT:** Fixed the code to get a better distribution of numbers, gave some variables better names, and added some comments
What if you were trying to get a dictionary value for key "Foo", and it was present, but the value was null? The TryXYZ(out result) pattern does *not* gurantee that the result in the out parameter is not null when the function returns true. Nor does it guarantee that the out parameter is null when the function returns false.
Something a bit different from the other answers, to get your hands dirty with lovely linq :) http://dotnetfiddle.net/BBjNAq var kv = s.Split('\n').Select(l =&gt; l.Split(new char[]{':'}, 2)).ToDictionary(x =&gt; x[0], x =&gt; x[1].Trim()); double Aperture = Double.Parse(kv["Aperture"]); double ExposureTime = 1 / Double.Parse(kv["ExposureTime"].Split('/')[1]); // Assuming exposure is always 1/x int ISO = Int32.Parse(kv["ISO"]); bool NDFilter = (kv["NDFilter"] == "On"); The important part is `using System.Linq`.
This thread has been linked to from elsewhere on reddit. - [/r/webdevnews] [ASP.NET Identity 2.0: Setting Up Account Validation and Two-Factor Authorization \[/r/csharp\]](http://np.reddit.com/r/webdevnews/comments/247m5w/aspnet_identity_20_setting_up_account_validation/) *^I ^am ^a ^bot. ^Comments? ^Complaints? [^Message ^me ^here.](http://www.reddit.com/message/compose?to=%2Fr%2Fmeta_bot_mailbag) ^I ^don't ^read ^PMs!* 
Are you implementing the INotifiyPropertyChanged interface and firing it when you add/remove an item to/from the observable collection? Sorry if that was explained in the link, I'm on mobile and the page is taking awhile to load.
I've never seen Regex used in this manner before.
&gt; // Unknown type. Panic. Good documentation is so rare these days. Have an upvote.
If possible, I recommend using the excellent EPPlus library (available via nuget). It supports Linq and has a whole bunch of other stuff too.
I'm not sure I understand what you are trying to accomplish. Simplify your question and ask it again.
Agree about the out parameter. That's there in the framework I suspect because the standard Try methods are for value types. Reference types are already mutable when passed as an argument (although that kind of side effect is icky). The only other reason you might want an out there is to make sure the compiler reminds you to set it before returning from the method, but that's probably not applicable either if null is a valid value for your use case. 
Agree with this. Don't prematurely optimize, and don't worry about micro optimizations yet. And in the real world, we also have code profilers that will help pinpoint bottlenecks, so we can spend our time optimizing the code that has the biggest impact. 
You need a code example so we can see where you're caught up at.
Hi All, thank you for the helpful replies!!!
I think this is the correct answer. But somebody's downvoting every answer. No idea why.
Very true. You've caught me making the assumption whatever collection he's searching in does not allow a null element. It boils back down to the same argument, however. You use the TryGet pattern when the default value is a valid value in the collection. It it's not, skip the out parameter for brevity.
You think he will be able to understand a random RegEx implementation six months from now? I guess if he doesn't need to debug the RegEx otherwise he'll be back here asking another question. Further, he is trying to learn C#. Writing a string split function will help in that endeavor while a random RegEx implementation will not. I'm not against RegEx but for an individual who is clearly a new programmer a readable and understandable solution should be preferrable to the simplest solution for an advanced programmer.
https://xkcd.com/1171/
[Image](http://imgs.xkcd.com/comics/perl_problems.png) **Title:** Perl Problems **Title-text:** To generate #1 albums, 'jay --help' recommends the -z flag. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=1171#Explanation) **Stats:** This comic has been referenced 15 time(s), representing 0.0829% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcdcomic/)/[kerfuffle](http://www.reddit.com/r/self/comments/1xdwba/the_history_of_the_rxkcd_kerfuffle/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me)
As a general rule, I would recommend not keeping static references to crypto classes because the dispose is partly to zero out the memory associated with them for security. You may not care too much in your particular example. Anyway, sorry, mod isn't necessarily ideal in this case but I don't get why you convert to double, round, then cast to int... seems unnecessary to do so many operations like that? Depending on what you're doing, why don't you just use Random for Windows App store apps?
Do you have any code that you can show us? [ObservableCollections](http://msdn.microsoft.com/en-us/library/ms668604.aspx) should automatically update if you have OneWay binding on. The one exception might be if you are creating a new collection, you have have to force an update.
At least it's a value type.
When you bind the UI to your collection do you specify the mode?
INotifyPropertyChanged wouldn't help if OP is changing the contents of the collection, only if OP is changing the collection reference itself through the property. For binding to work with the collection the CollectionChanged event needs to be fired (which ObservableCollection does for free if your binding is setup correctly.)
Fun sponge bot. 
As somebody who is just starting C#, I am kind of scared, but fascinated at the same time. I don't really have any input on this situation because I don't know what the fuck im doing.
I missed that, too. That'll cause all sorts not chaos.
For me, I only use this to simulate a dice roll for a game, or to pick a random saying from an array - not for anything security related. If you've got some cleaner code to return a random integer between two values, I'd love to see it. I just know this gets me good random integers, with a fairly-close-to-equal distribution, using large sample sizes. So I've been happy with it and haven't tried improving it. I am using the Random class for Windows Store apps. But it annoys me to need to use two different algorithms to accomplish the same thing.
One link was for the video, one link was for the link to the open source project site. Of course I only registered to promote my open source projects. Advertise is something you do when you are trying to sell something to someone; I am giving applications away that have lots of really useful code in them, for free. I do make about $3 - $7 per month with 12 projects from my open source, but mostly I release programs that make what I do easier, or faster or both. And I am sorry I am not as cool as you for coming here to hang out. I have to get back to writing code; I have a day job, my own company to run in the mornings, evenings and weekends and two dogs and I try to run some, so my time is very limited. Thank you for documenting the time that each of the comments were shown in the video, I am not sure of reason for sarcasm about commenting. I started with the simplest of comments, I am sorry if writing a comment seems stupid to you, the places I have worked it was required. If you had an interest in learning how to customize Visual Studio using the EnvDTE , Regionizer is a great program to get started. I spent 4 years learning how to interact with the Visual Studio environment, and Regionizer will save anyone that wants to learn how to do that lots of time, so yes I am promoting that. If I offended you in some way because I did not come here to talk about C# with the cool people like you, than I am sorry.
Probably not an issue then, unless people are betting real money on your game. Anyway, what's wrong with something like this? var random = new Random(); return (int) random.Next(5, 70);
Yeah, sadly there's only the field param2 for it &gt;_&lt; I hate example names like this.
What about the [SlimDX](http://slimdx.org/) or [SharpDX](http://sharpdx.org/) implementations of Direct2D? *Edit to provide list:* * [Xna](http://www.microsoft.com/en-us/download/details.aspx?id=23714) * [MonoGame](http://www.monogame.net/) * [SlimDX](http://slimdx.org/) * [SharpDX](http://sharpdx.org/) * [Cocos2D](http://www.cocos2dxna.com/) * [WPF](http://msdn.microsoft.com/en-us/library/ms754130%28v=vs.110%29.aspx) /u/Fetze added: * [Duality](http://duality.fetzenet.de/) * [OpenTK](http://www.opentk.com/)
People create frameworks in C++ because there is(or, was) a strong need for good OO libraries for 2D stuff, in C# you have XNA as a standard already, so there is no strong need.
I haven't seen these, will check them out.
I've had some experience with both, and they are both quite capable if you understand how DirectX works. Also, if your focus isn't games but instead UI stuff, then [WPF](http://msdn.microsoft.com/en-us/library/ms754130%28v=vs.110%29.aspx) might be worth looking into as well, since it uses DirectX as its rendering engine.
The last released version of XNA was back in 2011, and Microsoft has already stated that it will cease support of that version entirely as of April 2014 with no intention to release any additional versions. If XNA is a standard, it certainly wont be for very long as C# moves forward and evolves (especially under Windows 8).
Just a thought, I'm fairly certain exiftool can output both JSON and XML. Either is a better choice than string scraping. 
There is [MonoGame](http://www.monogame.net), which is an open source implementation of XNA still under active development.
I think I might do this.
This is true, I forgot about MonoGame. It's been a while since I've looked at it so I did a quick search, and found [Cocos2D-XNA](http://www.cocos2dxna.com) (supported under MonoGame as well) which might be another 2D solution in reference to op's question.
Adding to this list: * [Duality](http://duality.fetzenet.de/) * [OpenTK](http://www.opentk.com/) To be fair, OpenTK, SlimDX and SharpDX are pretty low-level and act more as "multimedia API bindings" than as actual 2d frameworks, which usually include a more high level interface, so you don't need to do all the grunt work.
My best bet would be that your problem is somewhere else. I'm thinking in the direction of the designer generated code, did you add the form_load event yourself? Because if you did then changing anything in the designer will overwrite your (manual) change. Verify that you have the event coupled in the designer, and try debugging to see if you hit your different event.
I wouldn't really see XNA as a "standard". It's just a game development framework that happens to have been introduced by the same developer as most of C#.
Any reason you don't want to make a class with that structure? It would probably be easier to work with than the ArrayList directly. public class Answer { public int Question1 { get; set; } public int Question2 { get; set; } public int Question3 { get; set; } public int Question4 { get; set; } public int Question5 { get; set; } public string Comment { get; set; } } ... private Answer RawDataToAnswer(ArrayList rawData) { var answer = new Answer { Question1 = rawData[0], Question2 = rawData[1], Question3 = rawData[2], Question4 = rawData[3], Question5 = rawData[4], Comment = rawData[5], }; return answer; }
I may be mistaken, but I believe Microsoft is dropping WPF to move to an HTML/JS front end.
Thats not true, XAML the language WPF uses is available for Windows 8+ and Windows Phone, I even think it has more features then JS/HTML.
While I thank you for the effort of compiling this list weekly, what is all the ruby stuff doing in there? Kinda misses the point... I understand you want to give readers a 'broader perspective', but If I wanted RoR advice, I would have looked somewhere else. This feels like noise to me.
&gt;A diffuse fear that one day, my application will just stop to work, because WinForms is so deprecated it won't be supported even on Windows anymore. This will literally* never happen, WinForms is basically a managed wrapper for the old school way of displaying Windows that's used by thousands of old applications. Plus Microsoft loves them some backward compatibility. &gt;In average, how much work is it to port a completely custom WinForms Control to WPF? There's actually a WPF element called [WindowsFormsHost](http://msdn.microsoft.com/en-us/library/system.windows.forms.integration.windowsformshost(v=vs.110).aspx) for directly including old WinForms controls in WPF, so you could always host your user controls in that and port things as you feel like it. &gt;Painting I can't say I've looked into it, but I imagine it is pretty different since WPF has a larger focus on resolution-independent rendering. &gt;[...]be possible to recreate a WinForms application in WPF[...]Is there a template for something like this? If there is, it would be pretty hacky. WPF has a completely different layout model from WinForms, you can't use one or the other as a drop-in replacement. &gt;What is the single most important advantage of WPF over WinForms to you, and vice versa? Biggest advantage of WPF: It has a superior layout model, and supports dynamic layouts and resolution independence far better than WinForms. This also makes it harder to learn how to use if you're coming from a WinForms mindset. WPF is also rendered with accelerated graphics, which makes it possible to make things animated and pretty (as you've mentioned.) On the flip side: WinForms is certainly much easier to get things going with and is ^mostly supported on Mono (which is relevant if you want to run on non-Windows OSes later on.) WPF, on the other hand, has almost no support on Mono because it is a much larger framework and nobody has bothered to re-implement the API. &gt;I've googled a lot on WPF vs. WinForms but the results were quite ambiguous I would agree, I think that is mostly due to the fact that there are a *lot* of differences. My suggestion would be to follow some WPF tutorials from scratch (which will suck since you'll just be thinking about how easy it is for you to do in WinForms since you know it) and make some dummy applications so you get more familiar with its design. ^^^^*Not&amp;nbsp;the&amp;nbsp;heat&amp;nbsp;death&amp;nbsp;of&amp;nbsp;the&amp;nbsp;universe,&amp;nbsp;anyway...
As for your fear of deprecation, you can push that one from your mind. WinForms will be here for the next 20 years at least, and if I was a betting man I would bet WinForms outlasts WPF. The day they ship a Windows OS without the VB 6.0 runtimes is the day I'll worry about WinForms being deprecated. When it comes to investing the time to port your app, don't forget reason "C". It's good to learn new skills. After recently searching for a new job I can say people are definitely putting WPF in their skill requirement list, but I'm not 100% convinced they aren't just using it as a buzzword and you'll actually just be supporting their existing WinForms apps. 
Reddit's Markdown parser doesn't like URLs with parenthesis in them, here's your second link: &gt;[wpf winform host](http://msdn.microsoft.com/en-us/library/ms751761(v=vs.110\).aspx)
At work we're going to be going through the same process so I'll just throw in my opinions. I've been experimenting with WPF for a while now and feel I have a good enough grasp so we can convert out program. &gt;In average, how much work is it to port a completely custom WinForms Control to WPF? I'm not talking about composited UserControls, but completely custom behavior using OnXY method overrides. Do custom Painting and Input handling work similar? For us, converting from WinForm to WPF, will take too much time (to do it well), to justify doing it all in one go. The benefits of moving to WPF are quite clear with things like dramatically better databinding, UI customization, and great unit testing ability. The thing that will take the most time is transforming the code into MVVM in order to take full advantage of unit testing, and databinding. We've been doing any new things in WPF, and it saves a lot of times, but there is a huge learning curve when coming off of WinForms. &gt;Would it - in theory - be possible to recreate a WinForms application in WPF so the user doesn't even notice a difference both visually and handling-wise? Is there a template for something like this? In theory? I have to imagine so, customizing the UI is such a joy compared to WinForm, but it would take a lot of time. &gt; What is the single most important advantage of WPF over WinForms to you, and vice versa? Much better divisions of code with MVVM, allowing for very easy unit testing, and databinding. The only 'advantage' I see to WinForms is the standard Windows look and feel out of the box + just familiarity with it so it would be quicker to produce things until you learn WPF (I cannot stress how big of a difference it is initially).
The main thing you'll find different is that in order to do WPF properly, you need to adopt an MVVM (Model-View-ViewModel) design - which does mean re-engineering parts of your application. For example you'd never do: &lt;label x:name="Label1"&gt;&lt;/label&gt; Label1.Text = "Hello World!"; You'd do: &lt;label Text="{Binding LabelTextProperty}"&gt;&lt;/label&gt; LabelTextProperty = "Hello World!"; Your presentation is always isolated from your logic and everything is data driven. As far as XAML goes there is no custom 'painting', you just make your UserControls draw whatever using XAML primitives and put them together however you like. Something like a combo datebox would be fairly easy in WPF but a pain in WinForms. You'll want to read up on things like INotifyPropertyChanged and ObservableCollection&lt;T&gt; as well, they're pretty prevalent in MVVM/XAML
For my own experience I tend to use the guideline: If the user just wants a fast application with little gimmicks, and just wants to get the job done as fast as possible, then use WinForms. If a nice UI is also important (beware this question as it is very subjective to the person asked! :) Also, one note: do NOT host a WPF app under Citrix (or equivalent). That's like using a ferrari to plow through a field
They're not betting any money - virtual or real. They're only killing giant rats and spiders. The problem with the Random class is that it's nowhere near random. Putting the code you showed in a loop results in this: http://imgur.com/MdHeElM The exact same number is generated every time. I could move the instantiation of the Random object outside the loop, but the random number generation is still much more easily determined than with the RNGCryptoServiceProvider object. I could seed the random object with a date/time based value, to get a slightly more random sequence of numbers, but that's kind of cheesy to me. The RNGCryptoServiceProvider gives much more random results, and hasn't caused any performance problems for me. So, I'm going to keep using it until I can find something better.
I think this is what I might do. /u/filmund had an idea somewhat similar. I'm not familiar with doing anything like this, but there's always a good opportunity to learn.
+ This
thx
Haha just realized you are the same user. Can I create classes within the an if statement? The reason I ask is because I'm using file dialog to open the excel sheet to begin with and I"m building this entire thing inside of: if (fdlg.ShowDialog() == DialogResult.OK) 
Don't worry. [Typescript](http://www.typescriptlang.org/) works too.
When I switched from Winforms to WPF what I didn't realize was the huge learning curve with XAML. There are a ton of little things you just learn along the way. Using expression blend really helped, but it's still a steep curve at times. WPF is really set up for patterns like MVVM which is probably going to add to that curve significantly. I ended up writing my own little framework to avoid some of the bloated solutions like prism, which I think a lot of people end up doing, but if you don't have time, check out MVVM light or prism. After you're comfortable with all of that, it's actually the best thing ever. I will never go back to forms. Controls people charge big money for with forms are generally really simple to make from scratch in WPF or are freely available out there. When you get MVVM and binding down, mocking up a nice looking fully functional UI is super fast and you can make everything easily testable and reusable. Treat it as a learning experience. You're gaining a really valuable skill that will make your coding and designing life way easier for other projects. Start out with a pattern if you can. don't just jump in and start making single pages until you've got that set up with a mediator/message bus hooked up, commands, etc, because it's much easier to learn the right way than the wrong way, and when you find out it's the wrong way you'll be cursing WPF. Get the expression studio/blend trial if you don't have blend with recent VS. Good luck. 
Yep. But Silverlight for Windows Phone will probably last for another iteration or two at least. Too many things still can't be done using Universal XAML.
Yeah, they got that working just as everyone was moving away from desktop software.
I doubt the assembly will run in full trust, given it's from a network path? Wouldn't loadFromRemoteSources need to be enabled as well ?
http://blogs.msdn.com/b/dotnet/archive/2014/04/02/announcing-net-native-preview.aspx 
They've been using a native compiler for C# to target iOS for years.
Maybe it's just me, but I've found it to be dead simple (once a few base libraries were written).
I assume by code based you mean console apps versus WinForms or WPF. Basically, if you're writing in a .net language, you want to use Visual Studio if possible as it provides the best set of tools and the smoothest experience.
Yeah sorry. Console apps and small general programs like loops and functions. Do you know what application I would open in Visual Studio?
MVC it up. Cloudified web-applications FTW
You are right. At the moment, I'm switching stacks to ruby at work and it's very hard to keep my reading list separated. However, I'd like to stay in both worlds. Do you think one newsletter with multiple categories would be more beneficial? (.net, ruby, programming, etc) Or maybe creating two separate newsletters?
Do you know what the name of the compiler is? I know about Mono but I thought that was just another implementation of the .NET runtime.
[Using a form](http://stackoverflow.com/questions/5706369/how-to-set-a-custom-position-for-a-messagebox) [Moving the message box](http://www.codeproject.com/Tips/472294/Position-a-Windows-Forms-MessageBox-in-Csharp)
You won't run out of threads very fast, but you can run out of threads in the threadpool if you're creating tasks faster than they finish. For example, you have a simple web handler where you accept an incoming request, kick off an outgoing request to another webserver in the background, return to the client immediately, and never wait on the task for the background request. In light testing, this'll work fine. But under extended high load, you'll exhaust the threadpool, since it only grows at 2/sec. The symptoms of threadpool exhaustion are that Task.Factory.StartNew() (or Task.Run, etc.) start taking a progressively long time for things that should be quick. var outerSw = Stopwatch.StartNew(); var t = Task.Factory.StartNew( () =&gt; { var innerSw = Stopwatch.StartNew(); MakeOutgoingRequest(); innerSw.Stop(); Log("Outgoing request took {0}ms", sw.Elapsed.TotalMilliseconds); }); t.ContinueWith(() =&gt; { outerSw.Stop(); Log("Task took {0}ms to finish.", outerSw.Elapsed.TotalMilliseconds); } You'll see a big discrepancy between the inner and outer numbers when the threadpool is full, because it has to wait for another task to finish or the scheduler to inject more threads.
That is correct.
A response to the idea that the TDD world is cultlike, written by "Uncle Bob, 8th Light's Master Craftsman." 
If this is for something you're trying to make money on, and not just a fun project, then this is probably not a good idea. If it isn't, it could be.
Some people love it, I guess, but I don't really enjoy writing JS or CSS very much.
Open a new project, find and select Visual C# under Templates, and choose "Console Application." You should be greeted with a Program class and a Main method.
Customers probably doesn't exist under schema dbo. If this is a hosted database you probably don't have dbo access. Check the schema the customers table belongs to
MFC, WinForms, and WPF are still on Microsoft's list of recommended technologies. (Unlike Silverlight for the browser.)
Yes. So? Why does that make it a good idea to replace working code that probably took a long time to write and is in a still-supported framework?
I have a legit question. I have worked in government and enterprise level development for almost 10 years now and the best test coverage I've seen was maybe 50-60% and that was on a really well managed project. Yet I keep running into "TDD is the only way" people. What are other people seeing? What if TDD just isn't cost effective at a certain level and its cheaper to hire more testers and do manual testing. Where I work dev's are expensive and I feel it might be possible that the increased time to get high unit test coverage in an app would shoot costs and time to develop through the roof.
It is another implementation of the CLR, but they added a lot more stuff... Like AOT compilation. Of course this means you can't then run it on different platforms other than the one you compiled for.
The point of TDD is not regression tests, Its simple working design and documentation. I've seen it speed up development almost immediately by reducing the time spent rebuilding and reloading a web page to see if your code works. But encouraging simple design and changeability speeds things up in the longer term too. TDD makes badly designed code a pain generally, the idea is to recognise that pain and change the design to fix the root problem. Sadly this goes against the egotism of many devs, and they reject it as too hard/pointless/constraining Course You still need testers (although ideally you get them to write automated/manual specification tests before/with the dev work). 
Executables independent of the .NET runtime will be huge if ".NET Native" ever comes to Desktop. Having a dependency on a runtime that requires admin rights to install is really hard to justify outside of controlled corporate environments. In my opinion, that dependency is one of the main reasons that there are almost no high-profile open source desktop applications that are built on .NET. When you're competing with frictionless web apps, any obstacle that might prevent users from being able to instantly run your app after downloading it quickly becomes intolerable. In fact, I'd argue that for anything but the biggest applications, even an installer is unwarranted. Ideally, users should be able to download a single .exe with both the app and an embedded installer. The user clicks on the .exe and the app launches like normal. If the app is running for the first time then it offers the user the option of installing itself to Program Files &amp; the Start Menu; otherwise it defaults to running as a portable app. 
I definitely see the value in that, I've noticed some people write console apps to test some of their designs and in my mind unit tests hold more value.
One potential problem with compiling to native is that it can break any run-time specific bits you do. For instance Reflection needs to be handled carefully. A If you use Json.net or Dapper - they emit IL at runtime that is optimised for deserialising objects, without using reflection all the time (this is one reason they're very fast). AOT compilation can make that impossible or difficult.
There's also NGEN...
Wow this guy didn't get it, and used many logical fallacies and incorrect understanding of the message of the post to create this. I sure hope he hurts his jaw sucking a dick somewhere or something. 
Enumerable.Range takes a length (count) as its 2nd parameter. You are saying to use 90 numbers beginning at 10. For a range from 10 to 90 inclusive use Range(10,81)
Not sure I follow what you mean.
Winforms * The queries are constructed into a custom table adapter named: **personnel_By_ListRank** SQL for **personnel_By_ListRank** follows &gt; SELECT Personnel_Tbl.PersonnelID, Personnel_Tbl.LName, Personnel_Tbl.FName, Personnel_Tbl.Rank, &gt; Personnel_Tbl.Shift, Personnel_Tbl.StationAssignment, Personnel_Tbl.HireDate, Personnel_Tbl.BirthDate, &gt; Personnel_Tbl.Address, Personnel_Tbl.City, Personnel_Tbl.State, Personnel_Tbl.ZipCode, &gt; Personnel_Tbl.FullName, Personnel_Tbl.Phone1, Personnel_Tbl.Phone1_Desc, Personnel_Tbl.Phone2, &gt; Personnel_Tbl.Phone2_Desc, List_JobRanks.RnkColor, List_JobRanks.RnkOrder &gt; FROM Personnel_Tbl INNER JOIN List_JobRanks ON Personnel_Tbl.Rank = List_JobRanks.Rank &gt; ORDER BY List_JobRanks.RnkOrder, Personnel_Tbl.FullName Construction example follows: * Name of DataGridView: **Unassigned_dataVW** * Binding Source for **Unassigned_dataVW** is **unassignedBindingSource** * DataMember property for **unassignedBindingSource** is **Personnel_By_ListRank** * DataSource property for **unassignedBindingSource** is **aBC_ShiftDataSet** Do you understand the construction of my DataGridView now, or do you need more information?
I find the whole idea of tests being documentation hard to swallow. By definition,a unit test tests a single unit. I don't see how that can illuminate the broad, overarching design of something. 
You see, you're not really doing TDD yet, and you'll need to give our consultants another $50,000 to really start seeing the benefits. 
The default value of int is 0. The default of bool is false. The default of DateTime is DateTime.Minimum. You can see how some of these might cause problems. 
I would call it OrDefault if it can return default. 
same thing has bitten me in the past, i think it's a valid API bug
Saw this on channel 9 after build this year. First impression this is a very simple way to combine conditional compilation in code behind with xaml designer support. Bravo. As far as I know this is Microsoft's most epic hack around portable class libraries and I'm looking forward to seeing the community support for shared projects because my third party libraries aren't supported yet 😊 
Naming convention in C# is PascalCase. ***Please*** write `IsPalindrome` instead of `isPalindrome`.
I wish I could offer better news, but I only report what I believe to be true.
Firefox?
For our purposes I don't think it would be right to call a web browser a "desktop application", though technically it is.
Captcha's are evil. Do not do this.
That seems like a rather unsecure Generator, seeing That it just Outputs plain text, without any distortion other than italic.
The second argument is clearly [named count](http://i.imgur.com/Jozkf0P)...
You could always draw something additional to the string, like 2 or 3 lines with the DrawLine() Method of the graphics class. 
If you have suggestions, *please* post them.
do you mean windows only? i can't think of a high profile open source application that doesn't have a solid windows port (though i'm sure there are a few)
Aside from web browsers, name a few. But it has to be an actual application. No servers, dev tools, or other program that normal people don't have a use for.
i don't really know why you're ruling out dev tools but sure. gimp, blender, vlc, openoffice, xbmc, audacity (just off my start menu) and as you said pretty much any web/database server or dev tool all have a windows version. i don't really use any closed source programs at home except games, and at work it's only visual studio and outlook.
I would suggest to **not** link to a **404** page.
Goddammit phone D:
This time with the right link. If You have suggestions, *please* post them. :)
Check your links before posting them in the future. :-) Not that we post another 404 link. ;-)
Indeed, this is awful as an anti-bot measure, even a basic OCR would would be able to get through that.
do you mean regular expressions?
No, I mean Expressions, like lambda expressions. http://msdn.microsoft.com/en-us/library/system.linq.expressions.expression.aspx Not quite sure how you could see the talk of "resolve or default" and trees and think of regexes...
Awesome, thanks for sharing. 
It seems this is a disagreement over the interpretation of "range". I, /u/krad0n and /u/bobevans1 interpret it as "from x to y", whereas the API is "from x for y".
Well that's the thing, I don't think people are using desktop apps at all. I probably spend 90% of my non-development (so 'normal' peoeple) time on a computer just in a browser. 
Exactly what is this program supposed to do? Does it just tell me the range that a given function is a function?
A few: http://evengrounds.com/articles/accessible-alternatives-for-captcha http://accessibility.psu.edu/captcha https://econsultancy.com/blog/63144-six-alternatives-to-using-the-dreaded-captcha-images http://textcaptcha.com/
At this point, you've got a data structure which represents the data that's going to be inserted into the Excel spreadsheet. You've stopped caring about what the data means and how to manipulate it, and started caring about what the data looks like. In Excel, everything's a string. I'd argue that, since your data structure mirrors what's going to be written to the Excel sheet, and this means that the data structure should have an array of strings.
Thank you
You put in the variables, functions and tests You want and it will tell You at what Points / in what ranges the requirements of the test are met.
then i don't really know why you qualified it with "high profile *open source* applications" to begin with.
At least the framework seems to be consistent with itself. [String.Substring](http://msdn.microsoft.com/en-us/library/aka44szs%28v=vs.110%29.aspx) similarly takes a start index, then legnth/count.
I think this still requires the .NET runtime to be installed on the host machine. https://news.ycombinator.com/item?id=7522360
This is what I was getting at. I am wondering if there is any future in having C# compiled to executables that are independent of the .NET platform. For example, I can write a console application in Go or C, compile it targeting a windows or linux, and make it available as a download. Users can just execute the exe. I can't do that with C#. I can make a console application and target windows (obviously) but users will have to make sure that they have the same version of .NET installed. I suppose there's the same issue with Java. I know I could create an installer/MSI that makes sure .NET is installed, etc. etc. But that just seems like overkill.
Do you have a free microsoft TFS account yet, if not get one, or GIT. Once that is done I'll help by all means, I reccomend use SignalR for the realtime push "You have x missed messages" 
Subscribing. Will join also after work
The current version only supports Windows Store apps but, as stated in the FAQ linked below, future versions will support other project types and will not require the .NET framework on the target machine. http://msdn.microsoft.com/en-US/vstudio/dn642499.aspx This does not mean that the compiled app will magically be cross platform, just that it won't require the framework to be present. 
Maybe not ELI5, but... To start, an example: class Sample { private string m_member; public string GetMember() { return this.m_member; } public static string GetMemberOfInstance(Sample self) { return self.m_member; } // Note this one is NOT static! public string GetMemberOfOtherInstance(Sample self) { return self.m_member; } } In this example we have a "member function" called "GetMember" which means that there is a pointer/reference to an object of type "Sample" passed IMPLICITLY to the function call as the first argument. You may access this pointer via the 'this' keyword, omitting it is ok because the compiler will add it for you. We also have a "static function" called "GetMemberOfInstance" which accepts a pointer/reference to an object of type "Sample" passed EXPLICITLY to the function call as the first argument. Since it is defined in the 'Sample' class, it can access private members. Examine the pseudo-IL for these two methods: GetMember() ldarg.0 ldfld "m_member" ret GetMemberOfInstance() ldarg.0 ldfld "m_member" ret I think its not commonly thought of in this manner because its uncommon to do this in .Net with static functions (outside of Extension methods) and the general rule of thumb is that any non-virtual function which does not make use of the 'this' keyword can be made static. Edit: A clarifying look at 'GetMemberOfOtherInstance' Since this method is NOT static, it follows the rules of instance methods for invocation; it also has a 'this' pointer given to it. This changes the IL slightly since we aren't using the first argument anymore: GetMemberOfOtherInstance() ldarg.1 ldfld "m_member" ret It now has to load the second argument to the function (index 1) when accessing the field since 'this' occupies the first argument slot (index 0).
Why would you ever do this when it takes about 5 mins to set up reCaptcha???
 Enumerable.Range(1, 50).ToArray() Or manually: int[] MakeArray(int start, int count) { var res = new int[count]; for (var i = 0; i &lt; count; ++i) { res[i] = start + i; } return res; }
Remember, the start of this thread was about whether or not needing to install the .NET framework was hampering the popularity of .NET desktop applications to end users. My counter-argument is that end users in general aren't attracted to desktop applications; .NET, open source, or otherwise. With the notable exceptions of MS Office, various web browsers, and now arguably open office
Thanks for the info!!! This makes me happy.
There are all sorts of ways to make an array in C#. // Create an array with 50 entries and set all values to 69. int[] myArray = new int[50]; for (int i = 0; i &lt; 50; i++) { myArray[i] = 69; } You can also take advantage of Lists and convert them into arrays: // Accomplish the same thing as above by adding items to a list and using the ToArray() method. List&lt;int&gt; myList = new List&lt;int&gt;(); for (int i = 0; i &lt; 50; i++) { myList.Add(69); } int[] myArray = myList.ToArray(); If you have any questions about this feel free to ask. :)
Thank you for taking the time to look at this! I admit I am fairly new to C#, been learning it on my own. I will definitely look into your suggestions. I agree, bot.cs is a huge eyesore and should be reformatted.
As far as I can see all files you have a huge, I'm briefly looking through the module files. There you also have VERY deep nesting. One thing that I see over and over is this: ircbot.sendData("NOTICE", ...); ircbot.sendData("PRIVMSG", ...); ircBot.sendData("JOIN", ...); It would probably be much cleaner if you make separate methods for this. Then you can also have different amount of parameters. ircbot.sendNotice(nick, msg); ircbot.sendMessage(nick, msg); ircbot.joinChannel(channel); These methods could **internally** use the `sendData` method. It would be much nicer to read. Also I saw a few times this pattern: if (!Directory.Exists(ircbot.cur_dir + Path.DirectorySeparatorChar + "modules" + Path.DirectorySeparatorChar + "Response")) { Directory.CreateDirectory(ircbot.cur_dir + Path.DirectorySeparatorChar + "modules" + Path.DirectorySeparatorChar + "Response"); } I already mentioned that you can use `Path.Combine()` to create combined paths. If you have reoccuring code like this you can easily place it in a util class: public class DirectoryUtils { public void CreateDirectoryIfNotExists(string directory) { if (directory == null) throw new ArgumentNullException("directory"); if (!Directory.Exists(directory)) Directory.CreateDirectory(directory); } } Now, instead of the 5 lines above, you can simply write this: DirectoryUtils.CreateDirectoryIfNotExists(Path.Combine(ircbot.cur_dir, "modules", "Response")); Also consider putting each Module in it's own sub-directory and an own namespace. Then you are much more likely to create more files per module to increase readability.
Good idea. I feel also that the parse_data function within bot.cs can be better designed.
I have a way to make an array of buttons, but it's at my home computer. I'll post my solution when I can. I'd like to know a way to customize the layout of the buttons, because it currently fills from top to bottom, left to right. I'd like to be able to skip a positon.
I sometime write these as Enumerable.Range(10, 90-10) though you still need to remember this isn't inclusive.
And just so I'm not a dink [here's a link to aforge](http://www.aforgenet.com/framework/docs/) It's a really neat framework!
I read your first link and was blown away by the lack of understanding of captcha. It seems the author understands that captcha is a *Turing test* to measure humanity, but then goes on to list "alternatives" that are not Turing tests and do not solve the same problem. * Requiring a unique email is not an alternative. Bots have infinite emails. * asking questions like "2+2=?" is possibly the stupidest thing ever. This is easily parsed and answered by even the dumbest bot. * quiz questions like "the capital of California" are equally retarded. An automated Google search would do the trick. And unless you have infinite questions, a bot would just throw all your questions and answers into a database before proceeding to rape your web service at a hundred posts a second. So no, none of those are captcha alternatives. Please don't irresponsibly campaign against captcha without understanding the problem. * edit: sorry just read about the "I am not a bot" checkbox alternative which I believe takes the crown for the stupidest anti-captcha idea. I don't understand how anyone can believe that a bot would fill in an entire form automatically, including check ToS agreement boxes, but yet reach a checkbox that asks "are you a bot?" and suddenly give up and go away. It truly boggles my mind. 
I think storing the answer in plaintext in the session state is also pretty insecure. Captcha is a security tool. Much like cryptography, nless you really know what you're doing it's best not to roll your own because it will very likely be broken.
Maybe a Checkbox reading "I'm a bot" would be smarter, because at least some bots might just check all boxes :D Just a silly idea.
Proper naming conventions can mean the difference between employment and unemployment.
i'm new to csharp
yeah i'm not saying the documentation's wrong, just seems unintuitive. it's inconsistent with "for" keyword, but consistent with .substring so it goes both ways.
One of my side projects, a c# IRCBot which aims to be easy to use for anyone.
For me books can be tricky and the best source of up-to-date knowledge is from blogs and attending Microsoft conferences (you can watch most of videos from those :) ). You can get real life knowledge, whereas books can contain too much theory and be too time consuming.
Don't need this but thanks for actually giving us the links to your solution rather than just leaving the topic to die! Props bro!
Well I was on my mobile at first, so I didn't have the link ready. When I got back to my desktop, I figured it was the right thing to do :D
I'm experienced in C# and I had no idea what he was talking about either at first. It was a dick response on his part.
Why don't you look at ffmpeg's ffplay ? Also what platform are you targeting with this?
Your name and responses do not line up. Great advice.
Windows, and linux if I can get mono to cooperate. FFPlay is great (and in fact, if I were to write this in c++, it's what I would use for an example) but I *like* C#. There aren't any good implementations of avcodec for C#, and all the wrappers except for aforge are just for converting videos. I needed actual access to the frame as a bitmap, so I could write it to a surface. So now, I have an abstracted class where you give it a surface and a video file, and it spawns a thread with a timer that updates the surface texture with each new frame. Hopefully I'll be able to add sound to that too!
Have you never used Linq? They're all over it...
It's a documentation page. On my screen I have two ads (I dont run adblock) for a PDF viewer and goodyear tire. The download link for the framework (which is an exe) is here :http://aforge.googlecode.com/files/AForge.NET%20Framework-2.2.5.exe If you didn't want the installer, libraries are http://aforge.googlecode.com/files/AForge.NET%20Framework-2.2.5-%28libs%20only%29.zip and a zip is http://aforge.googlecode.com/files/AForge.NET%20Framework-2.2.5.zip The downloads page should have been: http://www.aforgenet.com/framework/downloads.html I have no intentions of causing people to download malware. I've personally installed this on my workstation and have been using it all day long.
Heh, someone else working on IRC stuff too. Welcome to the club.
As far as I know, the main benefit to await is that it transforms your code so that you can write your method in blocking style but not have to worry about actually blocking callers of your async method. But in the test case, I can't think of a compelling reason to not just block - you're not running the test cases themselves asynchronously, you're just calling asynchronous methods in the synchronous test cases. In other words, have you tried: IEditor editor = new Editor(); editor.LoadAsync().Wait();
Tests as documentation is a little spurious, I agree. But then again I like to think of them more as an 'executable assumptions' instead. What does the code under test do? The code under test does everything the tests say it does.
https://www.youtube.com/watch?v=o_F_v_ISeDk sonofabitch. This tutorial video works great.
If you're using .NET 4.5: async void OnClick(object sender, RoutedEventArgs e) { await Task.Delay(time); textBox.Text = "hello world"; } .NET &lt; 4.5: void OnClick(object sender, RoutedEventArgs e) { Task.Factory.StartNew(new Action(() =&gt; { Thread.Sleep(time); textBox.Dispatcher.Invoke(new Action(() =&gt; textBox.Text = "hello world")); }); }
Just posted a 'solution' to your problem but did not read the problem fully, whoops!
 public long reverseNumber(long input) { IEnumerable&lt;char&gt; reverseNumber = input.ToString().Reverse(); string palindrome = ""; foreach(char item in reverseNumber) { palindrome += item; } return Convert.ToInt64(palindrome); } Use a string builder. It's more than twice as fast or for simplicity use return long.Parse(string.Concat(input.ToString().Reverse())); or return long.Parse(new string(input.ToString().Reverse().ToArray()); but string builder is the fastest, surprisingly. 
Might not matter too much but the DispatcherTimer is not guaranteed to execute exactly on your time interval. It's only guaranteed not to execute before it.
 Decimal.TryParse(text, out decimal amount); return amount; Surely that would give an error for potentially not initalizing the variable. I thought that inline variable definition was inline to an `if` statement, which would suit this scenario perfectly. Can somebody clarify?
Well, assuming the tests are testing what they're supposed to. They aren't bad or anything but I see too much of "well the tests pass; no reason to bother trying to run it."
The above example works because the 2nd parameter of TryParse is an 'out' parameter, which doesn't require that the variable be initialized. If it was a 'ref' parameter (or just a regular by-value parameter) then presumably the above example wouldn't compile because 'amount' isn't initialized.
But the function is also not required to initialize the out parameter. Then you're returning a potentially uninitialized variable, which is illegal.
I agree.
I havent invested in the oppurtunity in really digging into any open source projects, yet, but I think its awesome you're creating a framework to do it in the way you'd want it done. If there is anything you could use a junior/intermediate level developer for, please send me a pm. 
When using out the function IS required to initialize the variable. 
Small note, Bitcoin refers to the currency as an entity ("I heard about Bitcoin on the news"), bitcoin (no caps) refers to an amount of it ("I own 2 bitcoins"). CamelCase isn't an official/standard spelling. Just trying to get the info out there :)
So does that method guarantee a value? Like a default 0?
Thank you, I asked that question when I first got started with Bitcoin, was it BitCoin or Bitcoin and never got a satisfactory answer. Thanks
It guarantees assignment ("guarantee a value" is a little confusing because obviously a value type will always have a value).
http://www.asp.net/aspnet/samples/aspnet-mvc
I highly recommend [NuGet Gallery](https://github.com/NuGet/NuGetGallery) as an ASP.NET MVC app worth studying. You need Visual Studio 2012 (not 2013) to build it because of the Azure stuff. Its all entity framework, and unlike sample MSFT apps, its not complex for the sake of being a "complete example" Its complex because its a real world app and needs to be complex.
Yes: "If the key is not found, then the value parameter gets the appropriate default value for the type TValue; for example, 0 (zero) for integer types, false for Boolean types, and null for reference types." http://msdn.microsoft.com/en-us/library/bb347013(v=vs.110).aspx
Yeah, _something_ will be assigned. But note for reference types, this "something" may be `null`. _Generally_ speaking, by convention, most `TryParse`-esque methods initialize `out` parameters to `default(T)` (so for value/enum types, it's their `0`-value, for reference types it's `null`) when the "Parse" part fails. This is _by convention_; you need to check the method's documentation/implementation to know what will be assigned to the `out` value; there's nothing in the C# spec requiring _what_ is assigned, just that _something_ is assigned. Also note even if you have previously assigned a value to that `out` parameter when calling the method, that the method implementation _cannot access that value_. From the compiler's perspective, the variable is treated as uninitialized and cannot read its current value. This leads to misconceptions (especially for the `TryParse` methods) that when the parse fails it maintains the existing value of the parameter as though it's a default value: decimal value = -1m; //default value? Decimal.TryParse("asdf", out value); //obviously a failed parse Console.WriteLine(value); //outputs 0, not -1; the "default value" was ignored
Yea, that was annoying if you ever wanted something like a Tuple class. You'd need to create a static Create (or similarly named) method to instantiate it without passing all the generic parameters.
Oh great thanks a lot. Do you have any idea why it won't show unless I reset the margins though?
Your idea of "sprinkles" is along the same lines of DevCoin: https://bitcointalk.org/index.php?topic=34586.0 Might as well use that if you plan on using crypto since that is already an established coin.
Exactly. Which I probably would remember if I could use anything higher than the 3.5 framework at work. :P
The closest thing to that is the multimedia timers, but those can only be accessed via the Win32 APIs as far as I know (although someone has quite possibly made a managed wrapper for them) - they're no good for long delays though, they're what you use if you want a timer that runs 44100 times/second very accurately. I had the fun exercise recently of writing a timer that would tick once per minute with millisecond accuracy, never accumulating error relative to the clock no matter how much time passed. That was interesting. If you want to absolutely guarantee execution in a given period of time you have to use a real time operating system, which Windows isn't.
Came here to post this. There's only a handful of legitimately solid ASP.NET MVC codebases out there and NuGet Gallery is one of them. Oh and I haven't had any issues running it through VS2013 fwiw.
Things might be different now. I submitted a patch a while back. It didn't like the version of the Azure SDK that Visual Studio 2013 had. I installed 2012 rather than fight it.
Great post from Unkle Bob!
Why? I'm a beginner with Angular, not with C# and software development in general. ;-)
To Kaz3work: I guess great minds think alike; I will look at your link when I get off work, I had never heard of Devcoin. I wasn't necessarily saying it had to be crypto gifts, but that is definitely one option. 
Don't do security yourself. Find a good package and use that. It's too easy to get wrong, and not worth the hassle.
https://www.destroyallsoftware.com/blog/2014/tdd-straw-men-and-rhetoric
SecureString, in my experience, isn't worth the hassle. Just too many places that *should* accept one, *don't*. 
I wish people would say "automated unit testing" when they're talking about automated unit testing and not TDD specifically.
The other day, when I posted his previous article, a lot of people came in here and denounced him. I'm curious to see if we get the same response here. 
Well not everyone has to agree with everything he says, but in programming world this guy deserves some respect...
It is definitely a pain. I like the concept, since reading memory is way too easy. 
&gt; it shouldn't an hard task. Have you any programming experience yourself? Or are you the 'idea man'.
Without seeing the container I couldn't tell you. If you want to paste the entire XAML before &amp; after somewhere I can have a look.
We, I'm generalizing here, get hit with a lot of requests in real life from people who have a great idea, that 'should be really easy' and 'shouldn't take too long', they'll pay us when it's complete, 'It'll be a game changer', etc. I'm not saying this is you, but I'm saying your request may sound a lot like these people's, it may come off like you're sounding like 'that guy'. If you don't get much assistance here, try /r/forhire with the same request. If you want to pm me your app requirements I'll give you a realistic estimate on how hard/long it should take someone.
I understand. It should be a little program, and that's why I included the "simple task" part, but as I have no experience, it could be really off. Thanks for input though!
Best of luck with it man.
Yea, security isn't easy. Let's not do it!
SecureString also encrypts the string, preventing someone from simply peeking into the memory. At least so the documents say. So by calling: Marshal.SecureStringToBSTR() You are decrypting the string to access the raw data, and that is where the attack possibility exists. Copying the data to an array creates another copy of the data, and until it is cleared and the BSTR is freed, the password is vulnerable. I don't understand why microsoft didn't include the ability to hash the string in some way without doing the decryption step. I'm less worried about the hash attack possibility, as I said I'm salting it, so a database of known hashes will be useless.
Of course it decrypts it - in order to use encrypted data you have to decrypt it, that's normal. The point is you have to decrypt it in a controlled way, and that is what SecureString affords. This is a much more secure situation than using System.String. If you want to be able to compute hashes on encrypted data then you need to build all of that yourself - or, really, find an abstraction that has already been built and tested. However, security is all about making a trade off with resources and sensitivity of data. For passwords on a secure system, decrypting to hash then zeroing is a very reasonable practice.
Ah, but the transport layer is native code, and while not immune to memory inspection attacks, is a lot harder to do than looking at the .net heap. And if you do want to protect the communications, you'll turn on TLS (assuming SQL Server 2008R2 or newer) http://www.mssqltips.com/sqlservertip/2104/extended-protection-available-in-sql-server-2008-r2/ 
Erm no they don't. First of all, the focus on TDD is using tests to drive the design of your code and not necessarily on the automated test aspect of it. The two things are actually orthogonal even though from a glance they look like they are done the same. Second of all if you rely on automated tests to catch all your bugs you are going to be in for a world of hurt. Just because you are writing quality code does not mean you did not accidentally put bugs in the system, and not all bugs are code related but process, workflow, and requirements related which TDD has no chance of catching. You need an impartial third party to test if you want to release a quality product (assuming this isn't a project and an actual product instead).
I don't think it has to be a third party accepting the product. The product team/ requester can fulfill that. The engineers themselves should worry about the edge cases. 
When you write code a lot of times you don't see things that are obvious to a third party because you are too focused on how you think you wrote it. You are also too deep in the technical details of what the code does and not as focused on what the code *doesn't do*. They will not catch many edge cases because of this. Even with quality coders and code reviews things get missed when you are looking in such fine detail at the code level. For instance, today I realized I was writing to streams backwards (stream A should have written to stream B but it was reversed). 2 code reviews and peer coding didn't catch it because it was working before but moving some things around accidentally reversed the logic and both of our minds weren't thinking to look for that. Likewise, product owners are focused very much on the stories they wrote and not the stories they didn't write. They have an invested stake in making sure their stories work as they described and their stories themselves make sense. Good quality assurance comes at it with impartiality. They don't care about the quality of code because quality code doesn't equal a working product. You could have the best code ever to run a facebook clone, but if your product is supposed to be a search engine it's a complete failure. Instead quality assurance can look at it from the perspective of an oblivious user who doesn't think they know how the system works. Let's take the example of your database having a string field that's 500 characters long. This database field has existed for eons and you are adding some new code that may write to this field among 20+ other fields and forget validation logic. You aren't going to realize you missed this because, well, you wrote the code and didn't think about it at that time. The product owner most likely isn't going to think about this case since i'ts an edge case and in their mind users are never going to enter 501 character strings for the field. Good QA on the other hand focuses on these types of details and will try to find any edge case they can think of and have the best chance of hitting it during their testing. The point of QA is to find things the engineers and product owners didn't think about. Everyone has a focus, and the focus engineering has and the focus that product owners have are *very* different focuses that don't make them the best for general testing.
I think if you are worried about the ad revenue payout of people visiting your open source project you are missing the point. Just put it on github so I don't have to deal with ads at all.
Your misspelling of 'uncle' led me to believe you were mocking his nickname.
thank you dude, much appreciated. have to say, i love c#, it's really brilliant, i was a classic asp, vba, vb6 and vb.net, sql guy, web and winforms and was required at work to switch to c# a few years back, i love it. i'm also new to reddit, it's quite it's own little culture in here.
Hi You don't need to parse the string here, the Text property of a Textbook control is already a string. If you want to check that the strings are not empty then just use (x != ""). 
 string tname = txtName.Text.Trim(); if (tname != "") { ... } 
[nopCommerce](http://www.nopcommerce.com/downloads.aspx) NopCommerce is open source and the latest versions are built with MVC5. It's quite a beast though owing to its ability to be customised.
How did you do that?
This is an international sub. Use English or gtfo. ^^Sorry ^^if ^^this ^^was ^^too ^^harsh.
Hmm, I'm pretty sure you get a method generated in the class that gets called when the app gets suspended. Leaves only stats gathering to you :)
Before downvoting, people should inquire: did OP intend this as amusing rather than enlightening? Because it is amusing. Like this: http://www.funnyordie.com/videos/fa1a1c8fb7/creationist-cosmos
Dude I'm stuck on 2.0 at work :(
The same text is rendered the same over and over. I build hashcodes for certain types of text and just compared hashcodes. It's also possible to use the Aforge library to do image matching inside of other images.
Or if you have to write a comment explaining intent...
&gt; In his example, TDD is supposed to answer in what ways is the code going to ring the bell, and not used for testing whether it's actually ringing the physical bell itself. I think most people who criticize unit testing and TDD miss this point entirely. 
I've been using Microsoft Office Document Imaging (MODI) on selected parts of tif images. It works... OK... public string PerformOCR(Rectangle rectangle) { if (rectangle.Width &lt;= 0 || rectangle.Height &lt;= 0) { return string.Empty; } if (Image == null) { return string.Empty; } OCRSelectionFilename = Path.GetTempPath() + Path.GetRandomFileName() + ".tif"; Debug.Print(OCRSelectionFilename); OCRSelectionRectangle = rectangle; var destRect = new Rectangle(0, 0, rectangle.Width, rectangle.Height); var bmp = new Bitmap(destRect.Width, destRect.Height); var gbmp = Graphics.FromImage(bmp); var brush = new System.Drawing.SolidBrush(System.Drawing.Color.White); gbmp.FillRectangle(brush, destRect); gbmp.DrawImage(Image, destRect, rectangle, GraphicsUnit.Pixel); gbmp.Dispose(); bmp.Save(OCRSelectionFilename, ImageFormat.Tiff); brush.Dispose(); gbmp.Dispose(); bmp.Dispose(); //INSTALL MODI for non-2003/7 Office via: //http://support.microsoft.com/kb/982760 string text; MODI.Document md = null; MODI.Image image = null; MODI.Layout layout = null; try { md = new MODI.Document(); md.Create(OCRSelectionFilename); md.OCR(MODI.MiLANGUAGES.miLANG_ENGLISH, true, true); image = (MODI.Image)md.Images[0]; layout = image.Layout; text = layout.Text.Trim(); } catch (System.Runtime.InteropServices.COMException ex) { MessageBox.Show("Unable to OCR requested image. Code: " + ex.ErrorCode); return string.Empty; } finally { if (md != null) { md.Close(false); Marshal.FinalReleaseComObject(md); if (image != null) { Marshal.FinalReleaseComObject(image); } if (layout != null) { Marshal.FinalReleaseComObject(layout); } md = null; } } GC.Collect(); GC.WaitForPendingFinalizers(); try { File.Delete(OCRSelectionFilename); OCRSelectionFilename = string.Empty; } catch (IOException) { //NOP } Invalidate(); Debug.Print(text + Environment.NewLine); return text; } 
Outside of the biggest projects, I'm not convinced that advertising on my OSS is particularly tasteful?
Here's where my go-to project architecture: -solution ---(projectName).Domain ---(projectName).Domain.Test ---(projectName).Persistence ---(projectName).UI It's domain driven (DDD). The domain layer has services with public methods that can be set up before UI is made. All business logic that can be here is here, along with calls to interfaces. Define the repository interfaces here and let the persistence layer implement them. This domain layer is essentially the entire application... and then you give it a UI. (of course once you finish a "unit" in the service classes of the domain, you can add UI so as to have immediate business value.) The process is somewhat like this: 1. Have an empty class in the domain called (whatever)Service.cs 2. Create a class in Domain.Test called (whatever)ServiceTest.cs 3. Write a test for a method that hasn't been made. (Let VS make create the method for you when it tells you that method doesn't exist. This lets you stay in the test class and not be bothered by creating the method manually. [using ctrl+.]) 4. Run the test(s). (obviously will fail.) 5. Write the method. 6. Run test again. (Repeat 5 &amp; 6 til all tests pass.) Then either add UI if necessary or move on to the next unit... Because of the app being so domain driven, when you unit test the public methods of the domain's services, you've covered a ton of your code already. Then maaaybe I'll consider testing persistence/UI. (prob not....) EDIT: i read the first half of your title and that's about it so it looks like maybe this is way off LOL 
Is it signed?
No it is not. I shall look into doing so. 
Same issues with tesseract with me. I could absolutely not get it trained.
Separation of concerns. I structure my applications into different projects in some variant of this: * [Application].Models * [Application].Logic * [Application].UI The code that "gets things done" all lives in the logic. Your UI just takes user input and calls that logic to make things happen. That way, if the UI needs to change (as in your case) the logic that makes the application do things stays consistent. Most often, the architecture I use is "repository pattern with n-tier architecture and dependency injection", so it ends up looking like: * Application.sln * -- Application.Models.csproj * -- Application.Contracts.csproj (interfaces for repositories and logic) * -- Application.Repositories.csproj * -- Application.Logic.csproj * -- Application.UI.csproj * -- Application.Test.Logic.csproj * -- Application.Test.UI.csproj
A good team will succeed despite methodologies, a bad team will fail in spite of using best methodologies and an expectational team will succeed despite bad management.
Did you post this to talk about it or what?
I have to disagree with you. If you're "doing it wrong" then it is hard to succeed. Conversely, "doing it right" makes it easy to succeed and much harder to fail. Bad management will prevent people from "doing it right" and make it difficult to succeed. "Doing it right" is more important than the mystical quality of a "good team". A team is only as good as their methodology. Cleverness can only take you so far. Suppose a team is asked to move a rock to the top of a hill. Bad teams will attempt to push the rock up the hill with their noses, because that's how they have always done it before. A "clever" team will invent faster methods of pushing with their noses. A good team will tell management that they can just pick up the rock and carry it to the top of the hill. Bad management will say they don't believe in carrying rocks and insist you keep up with the nose-pushing. 
You can just comment next to the literal value if you really need to. int x = 1000000; //1,000,000 Or if you need more declarations in one line: int x = 1000000 /*1,000,000*/ , y = 1220033 /*1,220,033*/ ; Or: int x = 1000000, y = 1220033; //1,000,000 | 1,220,033 Even if there is a way to do it, you would probably break your code for any other installation of visual studio. Commenting exists for a reason. I'm also still a complete beginner, so I could be wrong.
I was thinking that if the application and everything was signed it would work, but if you changed something in the configuration would cause the signature to become invalid. I don't think signing it is something you want to do if you're going to be making modifications to the distributed files later on.
What is doing it wrong or right? To me doing it right is delivering a reliable system that will help the customer achieve their objectives. You use methodologies, such as TDD, to help you deliver such a system. Blindly following a methodology doesn't mean you are doing it right, e.g. I recall a test where a method totally overridden for testing purposes was being test using a mock. - a totally irrelevant and useless test but still a test. Now if that was one of a suite of tests you can forgive as a bad day, but developer didn't seem to understand what was wrong. The code didn't do what it was meant to either, hence me finding the test. Most methodologies will work as long as understand them well (i.e. TDD isn't just unit tests) and when to add to it/ignore parts. Trouble is most people seem to take a bit and ignore some of the most important bits – e.g. how many projects using waterfall fail because insufficient resources were put into analysis upfront, forget to keep feedback to ensure heading for right target etc. or how many agile projects fail because people think it is a way of doing it cheaply and forget it requires a lot of effort on stakeholder part and just leave developers to do their thing without any analyst?. A good team is one that works together well and pulls the same direction and achieves more than a sum of the parts, a bad team is one full of individuals working alone and pulls multiple directions and is worth less than the individuals . Neither is mythical and I have worked in both types. If the manager wanting you to use your nose is sufficiently close to force you to do such, then they are part of the team and it is a bad team. If they are sufficiently distant then it is possible to re-direct their attention while you do what is required. My experience is usually the sort person you are describing is a micro-manager supervisor and always part of team (though it becomes a group of individuals not a team). 
This is terrible. You're writing some html and giving it a file name that ends with .xls which, by luck, does work sometimes. It would be much better to create documents for Excel using a library like [EPPlus](http://epplus.codeplex.com) which might be even easier than this method. The library produces a file which implements the [Office Open XML](http://en.wikipedia.org/wiki/Office_Open_XML) standard.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Office Open XML**](https://en.wikipedia.org/wiki/Office%20Open%20XML): [](#sfw) --- &gt; &gt;__Office Open XML__ (also informally known as __OOXML__ or __OpenXML__) is a [zipped](https://en.wikipedia.org/wiki/ZIP_(file_format\)), [XML](https://en.wikipedia.org/wiki/XML)-based [file format](https://en.wikipedia.org/wiki/File_format) developed by [Microsoft](https://en.wikipedia.org/wiki/Microsoft) for representing [spreadsheets](https://en.wikipedia.org/wiki/Spreadsheet), [charts](https://en.wikipedia.org/wiki/Chart), [presentations](https://en.wikipedia.org/wiki/Presentation) and [word processing](https://en.wikipedia.org/wiki/Word_processing) documents. The format was initially standardised by [Ecma](https://en.wikipedia.org/wiki/Ecma_International) (as ECMA-376) and, in later versions, by [ISO](https://en.wikipedia.org/wiki/International_Organization_for_Standardization) and [IEC](https://en.wikipedia.org/wiki/International_Electrotechnical_Commission) (as ISO/IEC 29500). &gt;Starting with [Microsoft Office 2007](https://en.wikipedia.org/wiki/Microsoft_Office_2007), the Office Open XML file formats have become the default target file format of [Microsoft Office](https://en.wikipedia.org/wiki/Microsoft_Office). [Microsoft Office 2010](https://en.wikipedia.org/wiki/Microsoft_Office_2010) provides read support for ECMA-376, read/write support for ISO/IEC 29500 Transitional, and read support for ISO/IEC 29500 Strict. [Microsoft Office 2013](https://en.wikipedia.org/wiki/Microsoft_Office_2013) additionally supports both reading and writing of ISO/IEC 29500 Strict. &gt; --- ^Interesting: [^OpenOffice.org ^XML](https://en.wikipedia.org/wiki/OpenOffice.org_XML) ^| [^List ^of ^software ^that ^supports ^Office ^Open ^XML](https://en.wikipedia.org/wiki/List_of_software_that_supports_Office_Open_XML) ^| [^Standardization ^of ^Office ^Open ^XML](https://en.wikipedia.org/wiki/Standardization_of_Office_Open_XML) ^| [^Office ^Open ^XML ^Converter](https://en.wikipedia.org/wiki/Office_Open_XML_Converter) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ch7zgi9) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ch7zgi9)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Not really. Consider the following C# code: int[] xs = new int[]{ 1,000,000 }; What would you expect the value of xs to be?
No but you can get it for free.
EPPlus is so easy to use, why would you NOT use it.
&gt; Enumerable.Range(1, 50).ToArray() +1 on this. Also, if OP doesn't really need an array, but rather just a general IEnumerable, leaving off the ToArray() would result in deferred execution of the enumerable (though I haven't checked if it's eager or lazy). That's moot if an actual array is needed though.
Or you can just do return (long.Parse(String.Concat(input.ToString().Reverse()))); There's some interesting analysis at [Geeks Wtih Blogs] (http://geekswithblogs.net/BlackRabbitCoder/archive/2010/05/10/c-string-compares-and-concatenations.aspx) on the relative values of string.Concat vs StringBuilder, but given the expected size of input, I'd certainly opt for the code clarity of concat over a loop and extra variables.
I tried using it. Had memory leak issues that I could not solve. Also involved having to distribute even more files with my application.
No, this is helpful and makes sense. I think I'm going to do a course on pluralsight for DDD and see how to best use it with windows phone, which is generally MVVM for the design pattern. I think that they will overlap well. Thanks a bunch! EDIT: DDD should have been TDD
I would expect the feature to treat the number as if it had no commas but I realize that that might cause problems for some declarations such as an array[1,2].
I have always had trouble with interopt classes. Especially in a load balanced infrastructure. Each one of the Servers had to have Office installed. Our help desk didn't enjoy buying 10 licenses for office (3x dev, stage, prod). I wound up finding the NPOI library. It's easy to use and saved us a good bit of money. 
[InfoPath](https://office.microsoft.com/en-us/infopath-help/design-a-form-template-for-offline-use-HA010211739.aspx) is what you are looking for.
&gt; I swear, the best way to figure that shit out is to edit a document, save it, look at it in Notepad. That's the best way to figure out everything.
I thought about infopath but this article made me concerned about it http://www.formotus.com/16643/blog-news/microsoft-announces-future-infopath
Sure! You'll have to tell us what you want from us though, otherwise I'm not sure if we can really give you help where you need it.
That's a pretty big learner program. You'll need to learn about retrieving HTTP streams, parsing HTML, using Google's API, and incorporating an HTML viewer. My advice would be to start simpler and work your way up to it. 
It has nothing to do with efficiency; .NET strings are [interned](http://en.wikipedia.org/wiki/String_interning). The key reasons to declare string constants are 1. You are giving the string a name that explains its significance 2. You are ensuring that every usage of a string that shares the same meaning also refers to the same sequence of characters. To elaborate on \#2, if you have two string literals in your code that happen to be the same sequence of characters, but for whatever reason, at least one of these literals must be changed... should the other change? If those literals were replaced by some meaningfully-named string constants, you could know the answer to this question more easily.
I recently used WebAPI 2.0, DevExtreme (phonejs), knockout (MVVM), and Google Analytics to achieve most of what you are looking for. It worked out well. Being a Single Page Application, along with the stateless design of using WebAPI, tombstoning, as you call it, is a breeze, since the client side CSS/JS/HTML is all locally cached on the client and using HTML5 localStorage for any transient state.
ABBYY recognition SDK supports popular programming languages and environments, like VB.NET and [C#](http://www.abbyy.com/promo/ocr_sdk/Csharp/).
Lol 
I agree with both of those reasons like I said (somewhat poorly probably). I'm not saying trying to imply that you didn't see I said this but instead I'm just re-iterating that those are great and valid reasons. Thanks for pointing them out as the MAIN reasons though. I mean, after doing this professionally I can not tell how nice IN PRACTICE it actually is to have: private const string DELIMITER = ","; so that when you need to change it later you only have to change it in one location and then, voila.. --- Okay, so I guess now that I've read your response and thought about it it makes me realize that what I really wanted to know is actually two separate but related things. One was purely about the efficiency behind the scenes and the other about the implications of the answer Regarding the later, I should have emphasized the fact that it was a rule given to us by the senior engineer and he (apparently) said that *EVERY* unique string should be a constant. This all sounds well and good but I don't see ANY project, including the .NET Framework source, doing this even partially. I'm fine with my source sticking out in a line-up but I just want to know that it's not for a negative, or even pointless reason. You might think I'm over thinking this but I really just want some realistic guidelines. The way I typically do it is if a string is used in more than one location (or I can foresee it) I will make it a const. Then, for strings that I end up going back and using them again where it WASN'T used multiple times I will then make it into one. So is that okay? =P (Also, thanks for reading, let alone replying, to this uber-long posts)
The video explains how to create a comment item, the first comment has the how to enter and prizes. The software has a $110 retail value, and the current cash fund is $3.75, it goes up $1 per day * * cheap prizes I know, but open source doesn't pay very well; 1,000,000 times zero = zero
Yep, it's probably bigger than you think, but that's no reason not to do it. Use small specific classes with smaller more specific methods. Name classes, methods, and variables with names that say EXACTLY what they do. If you are tempted to use AND, you are doing too much. For example LogInToSpecifiedPageAndGetURL &lt;- that class is too big, we can tell from the name. Unit tests can be a pain to learn/write but they ARE your friend. Errors are also your friend, let the program tell you when it's broken. Good luck!
ILMerge
As /u/Appathy pointed out, those comments are completely useless. Comments are for explaining complicated stuff, not to annotate every action your code performs. Also, what exactly do you use regions for? They can easily be a code smell.
Your described "typical" way of handling string constants is well on track. Keep at it, evolving it as you learn more. In my experience, the "every string has to be a constant" crowd are being harmfully dogmatic. That kind of hard-line application of a coding standard (and this goes well beyond string constants to include anything in a coding standard) more often than not has a key unintended effect of allowing code reviews to devolve into a brains-off activity where those involved spend their time focusing almost if not entirely on dogmatic application of rules like this instead of providing valuable commentary on algorithm, organization, unintended side-effects, security, better alternatives, etc. Everyone gets to chip in, easily I might add, on something wrong with the code but spends too little time on the things that would add more value. It fundamentally changes the way your brain performs review, even if you don't mean it to. And then there's what happens to the code... Beyond the effect on review, mentoring, learning, etc. I have seen this specific rule applied to the point where, even ignoring the lack of value-adding review, the code itself is seriously degraded by the application of the rule. - Constants numerous enough and in need of enough disambiguation that their names become so long that they obscure the logic in which they are used. - Constants with names shortened to avoid this problem, which then become confusingly named. - Constants, even when named appropriately, which are used just once and add minimal value but which, for reasons elsewhere in the coding standard, are placed elsewhere in the file, requiring window splitting and/or scrolling back and forth to make sense of a given piece of unfamiliar, or even familiar, code. Never mind when some subset of used constants are off in another file entirely. - Constants broken down into component parts, each in a constant, because "hey, we generate this XML element, so we need a constant for that, and we also parse it so we will concatenate a collection of constants together to build up an xpath statement" which cloud code and cause impedance mismatches with the technologies we are using. Same for table and column names in SQL statements, at some extreme points. - I have also seen rules which insisted that there only be one constant of a given value, except that in software there can easily be several cases of a given value where each have their own reason to change. They just _happened_ to have the same value at some point in time, the rule got applied, later the value needed to be changed for one case, and now there are a bunch of broken values elsewhere. (I have seen a painfully-expanded version of this problem in localization. Don't ever believe anyone who suggests you best localize a system by reusing the same localization resource everywhere that value appears.) The list goes on and on, and all this from the dogmatic application of just one rule from a coding standard. Coding standards need to be _interpreted_ like any piece of guidance. Same goes for software process, for technology selection, everything. In order to maximize benefit, these things must be applied with deference to _context_.
I can't stand them, they are no more readable as constants when you start getting into large "enterprise" products. A4Y_Responce28, wtf does that mean? The time they are a necessary evil is for globalization. Otherwise, I scrutinize their use, but not ban. I've been on 10s of projects, as a software consultant, where there's a static class named CONSTANTS with like 4000 strings in it, its awful.
Good luck on your project. I can recommend the [HTML Agility Pack](http://htmlagilitypack.codeplex.com/) for working with screen scraping - should help a ton.
FYI, .NET coding conventions say constants should be PascalCased, not in ALL_CAPS.
I see ViewModels as more data holders. And would create a controller for doing the speaking, since it's ok (in the generic sense¹) for a controller to call another controller. ¹ Your MVC implementation may vary
Take a look into .net reactor
Thanks!! I'm going to do this. I'm thinking of passing a reference to the Speak within an Application View Model class as I create the view models.
Happy to help. Good luck, and let me know if you have any questions.
Use a third method to call 1, then 2 with the value returned by 1?
Nope.
What? Why would you have a private variable if you don't interact with it in more than 1 method? You would make it local instead.
Aka. just a regular member variable. No reason to make it static. Usually you want state preserved on a per object basis, not for the entire class (global state leads to many issues) with a few exceptions of course. 
If the end user has .net installed the they have system.drawing installed - why are you trying to obfuscate it?
&gt; Blindly following a methodology doesn't mean you are doing it right I think it is possible to misunderstand a methodology and not understand the reasoning behind it. I've seen shops who claimed to be agile, but were merely trying to mimic agile without buying into the manifesto. That's why I say "doing it right" is more important than attitude or hard work. Demonstrable results speak louder than intent. You can call a team "good" but if they can't deliver, it doesn't matter what they call themselves. Truly good teams understand why they are good and can reproduce their success and can teach others to do the same. It's for this reason that practices like TDD have gained traction: because successful teams have demonstrated that these practices bring good results. If you continue to insist that "good" teams can succeed despite terrible practices, then you need a new definition for "good". I call them "lucky for now but doomed to fail later" teams. 
If the point is to keep state, then of course you should have it as private fields. But if you only put data in the fields temporarily during a sequence of method calls, it's a bad idea, prone to multithreading bugs and hard to read.
MVVM is related, but not the same beast as MVC.
if you are using a console application? (are you?) Then call a class as /u/smors suggests. Otherwise you can only call static functions/methods from a static method like main()
here is a scraper example from earlier http://www.reddit.com/r/csharp/comments/23w43s/ive_read_c_for_dummies_still_dont_get_it_is_there/ch18doe?context=3
This is right, but also, having to add a reference to system.drawing isn't really any inconvenience. There's something to be said for transparency.
Agreed. ServiceStack is an option too.
&gt; I think it is possible to misunderstand a methodology and not understand the reasoning behind it. Having lived though an organisation going for [ISO 9001 - Quality Asurance](http://en.wikipedia.org/wiki/ISO_9000) - definitely. I'd go further and say it is possible to not understand what a methodology is. What it isn't is a recipe for success, but is a good way of achieving a consistent approach and this brings chances of learning what works and what doesn't and adjusting what you do next time to make it work better. &gt; If you continue to insist that "good" teams can succeed despite terrible practices, then you need a new definition for "good". I call them "lucky for now but doomed to fail later" teams. I think you are misreading/misunderstanding what I wrote – it basically comes to a good team will understand the limitations of the methodology they use and adjust their practises to cover the issues. They will have good practises, they just may be forced to use a methodology that is less suited to their/project needs. A bad team even if using a methodology with no major limitations for their project will still likely fail. i.e. a good team would know that automated tests aren't going to confirm what a user would see, so have in place a set of manual tests to verify it. 
Just a few minor improvements: 1. You should declare the private field as readonly, so it cannot be assigned outside the constructor 2. You should check if the instance you get in the constructor is null before assigning, and throw an ArgumentNullException if that is the case 3. You should use a DI container to do the instantiation instead of creating instances yourself
Pass them by reference int Main() { int parameter; Method1( ref parameter ); Method2( ref parameter ); } Or put them into a class and pass the object (which is ref implicitly).
Commas are too important to be used like that
I don't understand the question, are you talking about: var v = do1(); do2(v); 
Came here to say this.
There are many many different ways to do this. I recommend a data grid with an observable collection bound to it. Add some custom objects that implement inotifypropertychanged in the collection and contain the data you want to display in each row. Just google each of those terms and you should be on the right path.
Can row in grid show multi line data? These rows respond to click events? also can I assign some extra info to each row? Edit: Thanks btw :)
When you're saving your item the data is being written out to the Inventory.txt file, but that information is never read back in to your ItemID list. The only time your lists are populated looks like during the form load. Is there a reason you are using a series of lists for each field of data? Does the assignment require using a listbox instead of something like a grid? I would declare a class type Item which consists of the properties ID, Description, OnHand, Needed, OnOrder. Then use a single list of Items. Otherwise you have to worry about keeping all the lists in sync. Instead of the add writing the data to the file it should add the entry to the List&lt;Item&gt; described above. Use the save to write the data in the list to the file.
Example Item class public class Item { public string ItemID; public string Description; public int OnHand; public int Needed; public bool Ordered; public Item(string aID, string aDesc, int aOnHand, int aNeeded, bool aOrdered) { ItemID = aID; Description = aDesc; OnHand = aOnHand; Needed = aNeeded; Ordered = aOrdered; } } declare the list as: List&lt;Item&gt; items = new List&lt;Item&gt;(); Example method to read file and return a list of Item objects. private List&lt;Item&gt; ReadInventoryFile(string aFilePath) { List&lt;Item&gt; items = new List&lt;Item&gt;(); if (File.Exists(aFilePath)) { List&lt;string&gt; inputLines = new List&lt;string&gt;(File.ReadAllLines(aFilePath)); foreach (string line in inputLines) { string[] s = line.Split(','); int oh = 0; int.TryParse(s[2], out oh); int n = 0; int.TryParse(s[3], out n); bool ordered = false; bool.TryParse(s[4], out ordered); items.Add(new Item(s[0], s[1], oh, n, ordered)); } } return items; } In the Form load event you can assign the items list like items = ReadInventoryFile("Inventory.txt"); Saving the file is similar to what you have except you can replace the entire file with what is in memory rather than trying to append or remove items from the file itself. private void WriteInventoryFile(string aFilePath) { using (var writer = File.CreateText(aFilePath)) { foreach (Item item in items) { string line = string.Format("{0},{1},{2},{3},{4}", item.ItemID, item.Description, item.OnHand, item.Needed, item.Ordered); writer.WriteLine(line); } writer.Close(); } } Don't forget in your code to check for exceptions. edit: Simplified example for reading the file and added writer which would be called by the save button's click event.
In what? A Web app? Winforms? WPF?
Win forms
I think you likely want a DataGridView: http://msdn.microsoft.com/en-us/library/vstudio/system.windows.forms.datagridview
The assignment requires you use a ListBox then? Does it also require these individual list objects for each field? It isn't how related data is stored in general so I wanted to be sure. If you check my example post below I edited it a little to simplify the reading example, and added the writer. It should be clear how to use the Item object to store all the related information for one item in one object. It should also show how you would use it in the Add button event using your text box entries to create a new Item object and add it to the items list. Is there anything that doesn't help you with in a direction?
I was thinking of putting the VMs ina class library so that porting to IOS and android would be easier, which I think an interface is good for, correct?
Hard to say. Models definitely. But view models are ostensibly models that store the state of the UI. So the question is are your UIs going to work the same? 
* [MSDN](http://msdn.microsoft.com/en-US/vstudio/hh341490.aspx) * [RB Whitaker's C# Tutorials](http://rbwhitaker.wikidot.com/c-sharp-tutorials) * [Stack Exchange](http://stackexchange.com/) * [Stack Overflow](http://stackoverflow.com/) * The side bar of this subreddit. -------------&gt; I've bought many programming books but I've never needed to buy one to start learning C#. There is plenty on the internet to get started. I highly suggest learning to research things on google as it will help greatly with your programming adventure. Always remember **K.I.S.S.** keep it simple stupid.
Sucks That the online judge Thing doesn't Support C# :(
Please, show your code where you applying values to Form1.user and Form1.sender.
Syncfusion have a number of free books on their site covering a number of dev areas including c# and .Net. http://www.syncfusion.com/resources/techportal/ebooks
I did not realize VS was such a pain in the ass to open. Guess I'm just good at it.
Try LINQPad 
It saves time not having to create a new solution with a new project every single time and then digging through 25 different solutions a week later (R.I.P. Visual Studio) to find something you previously coded.
ConsoleApplication7 where are you?
Why? They serve 2 entirely different purposes.
Could you expand on what the different use cases are? Given the title of the link, I had the same reaction as the poster above.
Linqpad is able to execute statements (whole programs, even), not just expressions. Its my go to when I have to quickly test a few lines of code.
Short answer: no.
your "main goal" of LINQPad is much narrower than it need be. I frequently use LINQPad to PoC something, or test the behavior of something I'm not sure about, often with no intention of writing any LINQ.
I completely disagree, I write fully fledged scripts in LinqPad, which sometimes don't even do any "Linq Queries" as in hitting databases or anything like that. I use ScriptCS more as a DSL for certain projects and programs, such as mmBot, a C#/.NET HuBot port.
could scriptcs be a replacement for php?
I'm pretty certain this is an English only sub. Lutfen sadece Ingilizce yaz :)
Ah hell, that's true. Still, great advice.
Can you give an example of what you're trying to do?
Really? This is one of the things I really don't like about .NET development. VS takes 20 seconds to start up, and each instance takes 500MB of memory. Just making a one line program means I have to make a solution and a project.
Are you referring to an if statement? For example, you have a ball. If the colour of that ball is red then drop it. If, however, the colour of that ball is not red then throw it. This is express like so... //Get the ball details, in an object Ball ball = GetBallDetails(); //check if the ball is red if (ball.colour.ToLower() == "red") { Drop(ball); } else { Throw(ball); } 
This is really cool. At last i can replace python with something decent. :)
You might very well be one of the first developers here to actually differentiate Scriptcs's purpose from LINQPad's. Have an upvote :).
I'll throw the whole project up on GitHub after work today. I know I was kinda lazy only posting the code for the send function. Edit: OK the code can be found here: https://github.com/DoobieDoctor5000/GMailer/tree/master/GMailTest/GMailTest
Thanks. I'll try that. This is what happens when I use code I don't understand. The entire MailMessage code is just a modified copypasta. Looks like I need to read up on SSL ports.
Ok thank you. I thought in order to use else the variable had to be the same, such as: ball(drop) } else { ball(throw) 
Here is the reference guide to if-else: http://msdn.microsoft.com/en-us/library/5011f09h.aspx Give it a read through, I think it explains it quite well! Best of luck with it.
No, it's more like branching paths, or a fork in the road. If a condition is met take this action, if the condition is not met (else) take that action. The actions in question can be anything you like, they don't have to relate to each other at all. 
&gt; Looks like I need to read up on SSL ports. I'd probably just read up on mail, and how mail servers work if you really want to. The long and short of it is that if you set the client to connect via SSL, and specify a port that isn't actually listening on SSL, (or the exact opposite), then you won't get a connection since the two sides of the connection are behaving differently. Really it's just a matter of setting the port, server, user, pass, etc the same way that you would setup any mail client (like Outlook). You can usually get these settings from each provider. 
And have a main method with test1()-55() commented out. I've been there, it's too dramatic. All i want is a script file that runs, and this is just that!
Thank you!
LINQPad can be used to write entire programs, big snippets or LINQ queries. It is by far not limited to LINQ queries. You can also execute LINQPad files, just like this "interpreter". I don't think you really used LINQPad.
To be honest, you're looking for a problem to make a solution for because clearing everything but 1 .cs file with static void Main() {} after/before work doesn't leave anything commented out.
You should check out LinqPad. It's perfect for this! (and for a lot more.)
LinqPad has the ability to run scripts outside of the IDE too
Maybe the *purpose* is different, but LinqPad can execute scripts just like that too - and a lot more.
Ben bu halıyı satın olmaz.
Or maybe we have a problem with the discrepancy between your title and your intentions. Perhaps "Write C# scripts for task automation without opening Visual Studio!" would have been better. I'm already doing so in a reactive fashion using mmBot. LINQPad is far better for what you've said in the title than ScriptCS is. In fact, all of my current ScriptCS scripts have started off as LINQPad scripts that i made minor changes to to get to work in ScriptCS after I had it functioning properly. 
[LINQPad has a CLI too.](http://www.linqpad.net/lprun.aspx) It doesn't have its own script-friendly grammar like scriptcs does, but is that a super big issue?
As a tutor for University level Computer Science courses, I have to agree with /u/quasifun. Tell us what you've done and we can push you in the right direction. Otherwise, you're just going to come back tomorrow with the same question in a different context.
Not sure if i follow. In my scrnario scratchpad became less usable over time because of interference between totally unrelated code. Think class Point and another Point that has a, i dont know, a name field extra. I dont wanna have that problem, so I add namespaces. Then the main method needs to be adjusted every time i fiddle with this scratchpad. Just useless work. Think python scripts in c#. Useful and isolated. Big improvement! 
Can you use a pop3 client? I've done something a little similar - a round robin email distributor to handle requests sent to a particular Outlook mailbox. It would download the message and attachments, create a new message and attach the attachments, prepend a header message, then send the email to the next in the round robin list. I used OpenPOP as my POP3 client. 
Thank you so much. I was really lost with the formatting. So this is basically the set up for unless (or when coming a cross one similar?): { } else { 
Can you link me the source code? I can't find it. 
Would you mind if I asked what the use case was for this and why you would need to do it this way? 
I'll explain it step by step: 1) Open your scratchpad solution with that single Program.cs 2) Select everything 3) Delete and type in class A { static void Main() { /* your code goes here*/ } } 4) Done
I too am interested in this, I'm in a similar situation but budget only allows for local (Florida) any suggestions?
once you know how the operator works, how does readability diminish? 
Was gonna suggest http://ideone.com/
Say what? "Whaaa! He used the word 'Get' in the URL!". That's the closest thing AngularBeginner has to a legitmate complaint. WCF REST supports standard features such as the four primary HTTP verbs and automatic content negotiation. The author just choose to demonstrate a simplistic case.
It "cleans up" simple if-else blocks that decide a value. int value; if (CheckThing()) { value = 10; } else { value = 20; } vs int value = CheckThing() ? 10 : 20; It also works nicely in function that has to return a single value based on some bool. You don't need to think of it as a huge thing that will replace everything you write. Think of it more like a foreach loop when compared to a for loop over an array. It's syntactic sugar for a specific common code sequence.
Thank you for your explanation. That is a very helpful way to think about this convention!
When commenting on the readability of the inline conditional operator, I was more speaking of readability from the point of view of someone who's better-versed in another language like C++ or Python. I can imagine them looking at string someString = ""; if (x &gt; 0) { someString = "foo"; } else { someString = "bar"; } and very easily recognizing what's going on there, whereas someString = (x &gt; 0) ? "foo" : "bar"; might not be so clearly-understood. Thank you for your input! This has been helpful. 
C/C++ has the same syntax for the ternary operator. Python also has it, but with a different syntax ( `someString = "foo" if x &gt; 0 else "bar"` ).
Ah, i actually want to keep my scripts sometimes. ;)
I use them constantly. As long as you don't go overboard with them they result in much more compact and readable code than the full if block- especially for things like function parameters and doing null checks. 
People who nest ternary statements should be shot.. otherwise, they can be pretty efficient.
It is awesome when you just need to do a quick check, and don't want to break up the code with a if else block, like if you has a message box, showing a quantity. You can add the s to the units if there is more than 1 quantity. But it really comes down to what you like best, I feel the same way about case statements, why would you ever want to use one when you can just use an if else block, but that is mostly a readability thing for me 
LINQPad: the gentleman's ConsoleApplication1/Program.cs
Somehow it still seems easier to just have a bunch of files that work as scripts. ;)
Really? You're going to do all that work to avoid downloading something?
Having come from Python, when I started developing professionally in an office environment 6 months ago I remember seeing my first inline conditional and going, "What the ever loving hell does that mean? *20 seconds on MSDN later* ... THAT IS AWESOME." It's one of those things where yes, it will confuse you the first time you see it, but if you have any sense you'll Google it, learn about it, and then use it where appropriate.
No, based on this question the poster needs to read up on winform basics... 
Did you not read the other comments posted hours before this one? Integrated LINQ to SQL is only one small part. You can choose between executing: * C# expression or a series of statements * VB expression or a series of statements * Entire C# program scrunched up into one file (multiple classes, methods, etc.) * raw SQL You can reference any DLL on your system and with one of the paid versions you can even pull in NuGet packages. When you execute snippets of code, you can switch tabs and inspect the actual IL that was compiled. It has a `Dump` extension method that nicely prints objects and their properties so you can easily inspect them. [You can render javascript](http://coffeeandgrit.com/blog/2013/04/14/linqpad-as-a-javascript-scratchpad/), because why the hell not. One of the things that I use it for, totally unrelated to LINQ or databases, is [scaffolding a webserver for writing canned responses to HTTP requests](http://blog.nem.ec/2013/12/20/quick-web-development-with-linqpad/).
Well then don't chain them- or at least don't chain them without parenthesis. You can abuse simple arithmetic operators in the same manner- don't do it. Just because something can be misused doesn't mean that it is generally disadvantageous. 
Stylistically, I break it up across lines. Still takes less real estate than braces with an else, and often easier to read. var result = (cat.tailLength &lt; 3) ? "manx" : "kitty"; 
I've probably written &lt;%= list.Count() &gt; 1 ? "s" : string.empty %&gt; about a billion times at this point.
Yes, I'm that ridiculous. Actually, it's pretty convenient for me since I just right click on the directory and select 'open VS 2010 command prompt here' and then I just use Vim to screw with the small programs. Often I do this to test little bits of code that I feel are too insignificant/distracting to slap into VS. IDK, I'm weird.
I can see that workflow working when you have vim installed, but I would wager that a large majority of C# devs that work using windows do not have it installed, which would make your workflow much more of a nuisance
It's not really a matter of features. The point is, years after WCF was released, Microsoft introduced Web API to make it easier to implement simple web APIs, you can do the same things in WCF but it's waaaaayyyy easier in Web API - give it a try, it's a joy to use. Source: I've implemented APIs in both.
[XNA](http://www.microsoft.com/en-us/download/details.aspx?id=23714) is now considered out of date. Microsoft has already dropped all support, and it only works in 32-bit and Direct3D 9 (and I think 10 for Windows). You can still use it, and it works well, but it has a number of limitations. An alternative would be [MonoGame](http://www.monogame.net/) which as I have heard is a Mono port of XNA. If you are unfamiliar with Mono, it is basically a open source and cross platform-er implementation of .NET. Think OpenJDK vs Oracle JRE. If you plan on looking into DirectX, you should either checkout out [SharpDX](http://sharpdx.org/) or [SlimDX](http://slimdx.org/). Both are DirectX wrappers, but I think SharpDX is intended to better cater to .NET developers where SlimDX is more or less just an automatically created wrapper library for DirectX. I may be wrong though as I have no experience with either. There is also another alternative, which is to use OpenGL. Presently the best wrapper for OpenGL in my opinion is [OpenTK](http://www.opentk.com/) which is pretty much up to date. It also supplies OpenAL and OpenCL support. If you need a working game engine I can recommend [Unity](http://unity3d.com/) as well. On a side note there is exciting work in progress over at Microsoft on a new Just-In-Time compiler with [support for CPU SIMD on vectors](http://blogs.msdn.com/b/clrcodegeneration/archive/2014/04/03/ryujit-ctp3-how-to-use-simd.aspx).
I really appreciate the response and it has given me a lot to think about. Also do you know of any good books that focus on game design in general?
For starting out, do yourself a favor and don't try using DirectX or OpenGL directly. They're confusing, tedious, and take a lot of work just to make a simple cube. I'd suggest trying Unity. It's free and cross-platform, and has a lot of great tutorials to get you making your own games fast. It has its own IDE, but the coding is usually done in C#.
&gt; I wanted to know if there are any good resources for learning game design http://gameprogrammingpatterns.com/ This book is really good, examples are mostly in javascript and c++, but you can understand the code and put it in C# (as I do). everything else is explained by Sarcastinator above
ОК, the "sender" is always null because you have local variable "string sender" that is hidden by parameter "object sender" in each method. You should rename your variable to something else. Also if you don't mind I have some refactoring: Why do you need to all that variables to be public static inside form? Make them private nonstatic and pass to Commands.Send() as method arguments. Add message box or some other stuff to identify if message sent. 
Learn unity3D. Don't bother with anything else. Nothing can compete with it when it comes to c# scripting for games. 
Thank you! As always it was right in front of me. I really do need to read up on WinForms. I didn't even know they all had a sender object. I renamed the variable "slender" lol. I do not mind the refactoring at all. I'm still pretty new to C#, and at times have trouble envisioning scope. I've found that using variables between classes requires me to declare them as public static. In what context would I use private variables as method arguments? I'm not sure what the syntax would be to determine if a message has been successfully sent. Another thing for me to read-up on. Thank you so much!
You could consider composition instead, but it of course depends a lot on your application: interface IMyComponent { void BaseMethod(); } class Child1 : IMyComponent { public void BaseMethod() { foo! } } class Child2 : IMyCompnent { public void BaseMethod() { bar! } } class CompundObject { public IMyComponent Component { get; private set;} public CompoundObject(IMyComponent component) { Component = component; } } void Main() { var item = new CompoundObject(new Child1()); } Maybe a poor example, but the idea is that composition doesn't constrain your design as much as inheritance does. You can still use a base class for the Child classes of course, but it will act more for convenience than to enforce a hierarchy.
 % csharp Mono C# Shell, type "help;" for help Enter statements below. csharp&gt;
I tend to, not really a fan of private variables. Only use I have for them is internal readonly services and objects that are constructed on initialisation.
I recommend you to read Troelsen's book "C# and the .Net Platform" it is very good for beginners, I began to learn C# with it
You can only ever use the type's methods as which the object currently is boxed. For Example if you have a List as IEnumerable, before you cast it to List, you won't be able to use (I)List methods like Add. You'll be limited to GetEnumerator and the extension methods (i.e. LINQ). So the only way to do this, is to add all the methods you need on both to the base class and cast I for unique ones.
It can be worth noting that MonoGame uses SharpDX for MS platforms and OpenTK for the others. MonoGame is at a resonable abstraction level while still being fairly close to the metal. Unless you really want to learn DirectX or OpenGL, which can be quite tedious if you are just starting out, I would recommend MonoGame (or Unity if you want to start out with a full blown and proven game engine).
Yes, but then I end up with methods I don't always need. And adding few more clients will make my base class too big.
If you don't have to have a different implementation every time, use virtual methods so you can provide a default. If you have too many different unique methods that *have* to be public, you should reconsider your inheritance line :P
Why is it that Unity has become so immensly populair nowadays. I read about it everywhere. Isn't it also an option to make a lingo game to see how stuff can work when making a game. It does not need be anything super fancy at start.
I would also suggest Unity. I have several friends who are coding with it and they love it. 
Because it's fucking awesome, you goddamn heathen.
"ternary" only refers to it having three arguments. It is only referred to the "ternary operator" because it happens to be the only one in the language.
If I get more than exactly one record back, the data is corrupt although, since I'm selecting on the PK value which is @@Identity, that shouldn't ever happen. My concern here is, if the LINQ query returns no rows. I'm not 100% sure but I think that would == null?
My thinking with this was "okay, get the record from the database", "got it", "yup", "okay, edit it". If the database comes back and says "wtf are you looking for? I've got nothing for you" then, to my understanding, this code will never throw an error... I do all the error handling in my .aspx.cs files so if the 2nd case I just mentioned happens, no exception means the success message will likely as not display, so the user's going to think things worked fine...
It sounds like you need to throw an exception here and handle it outside of your data layer. 
As /u/knightdiver mentioned, you're using `.FirstOrDefault()` which will return the first result from the query, or the default value for the type - in this case, whatever `product` is. Since `product` is a reference type, the default will be null. You can confirm this if you want by checking the value for `default(Product)` (I'm assuming class names here). You may want to try using `.First()` on the end of your LINQ query which will throw an exception if there is no 'first' item to return. If you're worried about your data returning more than one result, you can use `.Single()` (but this shouldn't happen due to PK constraints, as you've mentioned). Once this is in place, you could catch this exception somewhere and inform the user or do something else useful.
As others have said, in effect, Unity is the new *de facto* standard for 2D and 3D game development. It's free (well there's a pro version, but the free version will do everything you need), uses C#, does 2D and 3D really well (get NGUI for UI construction), and has effectively taken the place of Flash. For learning and using C# for games, this is clearly the way to go.
Game design or game programming? Two different things... There are a ton of really good Unity/C# game programming tutorials online (with some game design thrown in). For game design itself, "The Art of Game Design" by Jesse Schell is one of the best. "Game Design Workshop" by Tracy Fullerton is also really good.
That makes sense. Seems like it does an excellent job of decreasing clutter and making the code more visually-streamlined. Thank you for explaining this!
I agree with you! I just needed a justification for using it. :)
I've seen depedancy injection being used to inject strings for endpointnames in config. Or for a certain settings to be injected (Which where usualy strings) Thats a few simple examples where you should not use injection. Simply using an appsetting would be more efficient. And basically the place to set global settings. Oh, or a user control being registered in an IoC sothat a presenter could resolve that view from IoC. At the time unity was being used. I think you would know that outcome if you know unity, screens opened up pretty slowly because of the way unity resolves things. (Lots and LOTS and LOTSSS of overhead) Also always auto-using injection because "everyone is talking about it " is also not the way to go. Instead of blindly doing injection (For all patterns for that matter) you should ask yourself : If you need it and if it actually would help you in the near future. Trend in the IT is to overuse patterns for everything. Naturally saying this most people would not agree with me. Because patterns seem to be something that you can't go wrong by. Lots of devs want to show what they can do and make big fancy applications with lots of patterns. But results in overdesigned and overcomplicated code. Making not the application easier to maintain, but harder. Before using any pattern think: "Do I really need this?" . It gets forgotten plenty. Now I do expect not many developers to actually agree with me. Countless time people told me I just "Don't understand it at all" and other forms of argumentation that left me amazed. EDIT: You do not need depedancy injection to unit test. It could make it easier (Or harder) depending how you design your code. Modularity is indeed something that dependancy injection makes easy, if you need it it could help big time. 
Why would you want to use an abstract class in this situation? I do not see the added value. Could you elaborate? 
Well first of all unity is free to use. It is fairly simple to get into the basics, and moving a cube around on a plane shooting some spheres takes mere minutes. 
Well I certainly don't think you lack understanding of the topic. I don't want to dive too much into concrete examples because I don't understand the whole context of the situations you discussed in your post. In your example of injecting strings, I would argue that if the rest of the project is using Dependency Injection, you might as well just do it for everything, even if it's dumb, in order to maintain some consistency. The other developers must obviously be familiar and comfortable with it in a project like this. I still would like to stress that you really "can't go wrong" with Dependency Injection. What I mean by that is, DI without any IoC container has 0 overhead performance-wise, and it gives you the added benefit that you go back and add a container later if you deem it necessary in about 5 minutes. That's certainly not the case if you don't start your project with DI in mind. The way I see it, it's like using LESS instead of CSS in a project. At the start of a project I have no idea how complicated the styles will be (and most of the time I could get away with just using CSS), but if you start with LESS, you don't even have to think about it later on. The main reason I use DI is because I unit test, and I believe that it is next to impossible to make nice bite-sized tests without it. The only potential downside I could see to using DI in a project without necessity is that you get an ever-so-slight layer of misdirection that requires you to use F12 a bit more and navigate to the sources of things. Like I said, I mostly agree with your sentiment that overuse of patterns is a detriment to projects, but for my money, DI is the most fundamental and low-risk pattern one could ever use. Not only that, but you get a fantastic bang for your buck in unit testability. 
So because its easy its populair? Wheres the fun in that!
I think we're all in agreement then. ^__^ And yes, an IoC container is basically a necessity when it comes to DI. Autofac is my container of choice.
var product = db.products.FirstOrDefault(p =&gt; p.productid == id);
Checking for null is usually a code smell for me. If I'm really worried that something is going to be null, there should be a good reason for it. In this case, I think checking for null is "expecting the exceptional". First, since this is an Update method, you should assume that you will get back the product object you expect. If you don't, that should be "exceptional". Second, since the PK should be unique, finding more than one record should be "exceptional" because it is an indication that something has gone horribly wrong in the database. You should use .Single() and let EF and/or LINQ throw the appropriate exception if the unexpected occurs. How you handle the exception is up to you. You can catch it right away, and do something with like log it somewhere, or just let it bubble up to the calling method and let it catch any repository errors which it then knows to make the user retry to call for help. Or maybe both. Alternatively you could return a boolean to indicate success, while logging the exception. public bool Update() { var product = (from p in db.products where p.productid == id select p).Single(); // will throw exception if not found or more than one found // update the product return true; catch (EntityException ex) // be specific when possible { // log the exception, if desired throw; // rethrow the exception, if desired {or} return false; } } 
Can you be more specific about what relationship you're trying to model? It's impossible to advise you on a design pattern based just on the fact that you want a class to inherit another.
/me cocks shotgun
&gt; Checking for null is usually a code smell for me. This always depends on the usage case and if this is an expected error or an exceptional error. For example with a web API method that gets an ID passed on the URI it is an expected behaviour to get an invalid ID.
Exceptions should be for exceptional circumstances. If not having exactly one row returned is just that, then you can use .Single() - this is like .FirstOrDefault() except it will throw an exception if there isn't exactly one non null result.
Allow me to clarify, I'm looking into game programming and I was looking for books that discuss the structure of it like the game loop and other concepts. I will definitely take a look at "The Art of Game Design", seems like it has a lot of interesting content.
I agree, that's why I said "usually". Sometimes the use of null is appropriate. 
LINQPad is also for writing scripts. You can take a script that works in LINQPad C# Statements mode, and as long as it's not using something LINQPad gives you, like the DataContexts and .Dump() stuff, 99% of the time you can just throw it in a .csx file file and voila, you've got a ScriptCS script.
Yup , but can you like publish your games aswel without paying?
I love in-line if's ...but I only use them in reduction of lines and for simple uses. mainly inside loops. but if I need the code to be readable I will do if blocks.
All sub-types of Potion have a Strength associated with them, so I put in the base. It's a simple example, so there's only one property shared, but you could imagine a more complicated model where child classes share more properties and functions.
I have trouble taking your advice seriously for two reasons: 1) You have a catch without a try. 2) Try/Catch blocks are meant to be used for situations that can't be handled with normal control flow. Things like the the database being down, or getting kicked off the VPN. If your query worked and gracefully returned zero records, you can check that just fine with an if. No reason to introduce a try/catch, [which does have performance implications](https://msmvps.com/blogs/peterritchie/archive/2007/06/22/performance-implications-of-try-catch-finally.aspx)
SingleOrDefault exists too. 0 or 1 exist or it throws an exception. But, Single/SingleOrDefault use top(2) and are slightly less performant. I don't know if the query planning can realize that top(2) on a primary key is nonsense, but it still ends up having to generate a more complex query than it should.
I hate when I type things like this up, and then I go back to researching and found a solution. I was using form2.show(), when I should use form2.ShowDialog(). I am stupid.
In a company where there is resistance to a ticketing system, people email requests to a 'reporting' mail address, which the report team is supposed to pull requests out of. To even the workload, they decided to do it 'round robin' style, which Active Directory / Outlook doesn't support. It was easy enough to write a c# program to distribute the requests, and handling attachments was part of that program.
What you probably are after is to make the form modal; which (IIRC) you can do by calling .ShowDialog() rather than .Show() But really, if the messages are coming that quickly, why not collect all the paths together and just show one dialog? You can stick them in a listbox and have the user pick the correct one.
Ye thats why I am like it. Just inheritance for one auto property is not really all that neat to do. Complex maybe, but in the simple variant no.
Don't feel stupid, the WinForms library is a huge complicated thing. I've lost count of the times I've spent hours looking for how to do something, only to find it's only flag to set *when you know the name of the flag!!*
Thank You! This looks like the kind of book i was looking for, I will definitely pick this up when it releases.
You're absolutely right. In general I write code so that everything happens as intended. My first programs had no error handling in them at all... This is why I struggle with the error handling now. I figure at the very least, the software should be able to deal with anything that happens and thats what I'm trying to do here. I don't rightly know that the LINQ query could ever return null, but it seemed logical at the time. I just intended here to handle an exceptional situation where the value for the where clause "got lost" without breaking everything.
Thanks! I don't understand llambda expressions yet, but oddly enough, I know what this does...
All error handling happens on the .aspx.cs level. So if anything breaks on the data layer, it'll just go straight through to the ui and inform the user what went wrong.
I used to have Try/Catch blocks all over the damn place. I'm sure there wasn't one file that didn't have at least one of them... A friend then told me I can just put them on my event handlers in the ui and then it'll deal with the errors gracefully wherever the errors happen to occur. So I did that.
 var product = db.Products.Single(p =&gt; p.productId == id); If there is not exactly one record in the DB, this will cause an exception to be thrown. If there is only one record then it will assign it to 'product'
As long as you aren't charging money for your games, yes.
Either pass it around or make it an instance variable.
 var highestDistinct = myTraps .GroupBy(x =&gt; x.OID) // Group objects in myTraps by OID. Each group contains objects with a given OID, i.e. the duplicates. .Select(x =&gt; x // From each group .OrderByDescending(i =&gt; i.TrapID) // Order the objects in each group with highest TrapID first .First()); // And give me the object with the highest TrapID in the group Since the ordering and "first" is done within the select, one item will be returned for each OID group -- the one with the highest TrapID Also, all LINQ methods return IEnumerable so there's no way for it to return any other interface.
I use const when the value will (in all likelihood) never change and readonly when it will not change during the application's execution. That's my rule of thumb. It's probably flawed.
Another very similar alternative is [cs-script](http://www.csscript.net/) which has been around for longer and is pretty rock solid. It lets you have single-file C# scripts that you can run directly, kinda like python .py files. You can edit the scripts in visual studio if you want to (it has a shell extension that will build a fake temp solution around the file, so all the references and intellisense goodness still work) or you can edit them in notepad++, which has a plugin that gives you code completion and debugging support. I use it all the time for automating tasks on my desktop. I have really basic stuff like 'take the text in the clipboard and make it uppercase' or slightly more involved things like 'connect to this linux server, download a log file, and open a WPF textbox with the 20 latest log entries in descending order'. It's awesome. Removing the need to base everything around a heavyweight solution really opens C# up to being used for writing lots of little scripts, and C# turns out to be an awesome statically-typed scripting language in a field utterly dominated by dynamic typing. 
Glad it did. :-) If you need it as an array, just call highestDistinct.ToArray() like you did with the List. I used IEnumerable because that's the type that all those LINQ-y methods will return. You can use LINQ expressions on the return values of other LINQ expressions which is what makes it so powerful and easy to chain. You should only cast a LINQ expression to an array when you actually need it as an array for an operation that depends on using the index for something.
Why not just use the extension method Distinct() from System.Linq?
While I recommend getting a professional edition of visual studio if you're going to be doing a lot of development, you don't need it to use EPPlus. You can just download the library from here. http://epplus.codeplex.com/releases/view/89923 Also, convincing your manager to at least move to Visual Studio 2013 Express would probably be a good idea - that has NuGet built in.
Thanks for the explanation! Now that I understand it I was able to adjust my test data a bit to show that it's not exactly what I needed. If we were after the newest TrapID with that OID we'd be done, but it's the combination of NodeID and OID. The yellow highlight should have been left alone because the NodeID is unique but the red highlight should have been removed (and it was). http://i.imgur.com/TBhEPj4.png Now that I've seen some more LINQ-fu I think I can totally work through the rest of this. I shall ponder it while doing the dishes. ;)
Googling now. Thanks.
I was going to recommend that, but I'm not sure it fits his needs as he has to choose the element with the highest TrapID if there is a match.
All you need to do is change your group by to: .GroupBy(x =&gt; new { NodeID = x.NodeID, OID = x.OID}) You're creating an anonymous object with those two properties, and grouping where that anonymous object is the same. I can't 100% remember if you need to name the fields in the anonymous object or not, but it certainly doesn't hurt. 
Oops. Leaving out the try was a mistake due to editing in reddit instead of VS. I don't think that micro optimization in the compiler should be your first concern. Checking for null every single time _is a performance hit_ and breaks up the flow of the method. Part of my argument here is the philosophy that checking for null in this case is looking for an exceptional event so it should be treated as such. Personally, I don't like designing object methods that return null because it makes null an unexceptional occurrence, which then forces consumers to always check for null. http://blogs.msdn.com/b/ericlippert/archive/2009/05/14/null-is-not-empty.aspx 
That worked out perfectly. I'll have to tinker with that a bit to understand the anonymous object bit but for now I can keep going and this will go in my bag of tricks. =) Thanks! http://i.imgur.com/rAcPv8b.png
Private server I'm guessing?
Yeah, built it as a place for old guild mates to reconnect and have a few drunken nights together.
First off, don't put code directly inside your event handlers (e.g. button1_Click) but rather make C# classes with methods that do those things. It is a bit more work but it helps abstract the problem better. Once you get use to doing things with object graphs, you will be able to support multiple interfaces using the same code (not just WinForms for example), among other things. 
Perhaps the C# native compiler could help with that, as you won't need to rely on the framework being installed at all.
Thanks :) I'm not quite sure what you mean by 'it helps abstract the problem better', any chance you could explain? Definitely see your point about reuse-ability, will definitely change that.
Now on my to read list, thanks.
It'd help if we could see exactly what kind of data you're getting back. 
I have Pull request for you I optimised some code, I hope you will learn something ;)
&gt; This is part of it: ��Tet��8�"���N�Lh���+(1��B���9m; 
I can get you all of it but its pretty much that x20 
Perhaps it's gzipped? Look at the content-encoding response header.
yeah I checked the ContentEncoding of the response and its gzip. How can I decompress it?
well I'll figure it out(google an api for it). Thanks!
.net framework has system io compression gzipstream, if has no header to worry about 
Thanks mate, I installed it and just started reading everything it said, I've learnt a few things so far! I don't change anything until I understand WHY i need to change it.
Thanks! I'll check it out as soon as i can. 
It's a learning curve, to be sure, but they're powerful once you get into the swing of them. Linq with lambda expressions are really nice for managing collections within a single command statement, versus a giant for-each-condtional wrapper around the collection.
Maybe... The result needs to work as an extension running under visual studio 2005, so not sure if it is an option or not.
interino.fuskerino = interino.parserino(texboxerino1.texterino); 
It was just an example, I want server to do some things, not sure yet if it will be decryption 
Using a message queue (like ActiveMQ) allows you to send and receive messages to clients/brokers, without having to know if they're *there* or not yet. One client can be disconnected for a while. The power of coupling this with something like SignalR (web based sockets) is pretty nifty. Ignore SignalR if you're rolling your own app, but ActiveMQ and SignalR in a web environment is fun stuff.
Or, preferably, read [Code Complete](http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670) and don't waste your time with Uncle Bob.
There's very often no NEED to change it. Many times it is simply showing you something you could do to transform your code. The "turn this into LINQ" thing can be especially deceitful since it will sometimes generate extremely difficult to read code that is still functionally equivalent. It IS useful for learning about LINQ though, I almost always see what the transform will be, then turn it back if I can't understand it within about 5-10 seconds. Aggregate transforms are particularly nasty about this.
What's wrong with Uncle Bob, just out of curiosity? I haven't really read him but I know some folks swear by him/his books.
I'd like to just confirm to be sure that I understand some of the major use points, since I first learned async programming as using async and await. If you use a function with Task&lt;T&gt; in conjunction with async and await, your code will wait for the task to complete before continuing, almost as if it were written synchronously, e.g. public async void Main() { // do some stuff var thing = await DoSomeWorkButDontMoveAheadAsync(); // after the above line is done, do some stuff } But if I forgo using async and await, the task will run on a separate thread *and* continue in my code, like this: public void Main() { // do some stuff var thing1 = GetFirstThingFromWebServiceAsync(); var thing2 = GetSecondThingFromWebServiceAsync(); // do stuff while doing thing1 and thing2 // don't forget a good Dr. Seuss reference } Is this correct? EDIT: I just realized that this is a bad example b/c you can't effectively do anything with thing1 and thing2, but the point being that those methods will run at the same time.
Copy-pasting my own old comment: My issue with Clean Code is that mixes good advice with bad – and especially for a new(er) programmers, it is hard to realize what to follow, what to ignore and why. E.g. “method should do just one thing” – good, “and method should be really, really short” – unmaintainable spaghetti code (not direct quotes). Different chapters vary in quality a lot. Most of the book based on an anecdotal or personal evidence. What worked for Robert Martin (or the employee of his company writing that particular chapter) is served as universal, absolute truth, and not one-off solution. Compare it to Code Complete, where every claim is backed by scientific article or research. Also, his stance on comments just makes me want to scream at Uncle Bob, “The proper use of comments is to compensate for our failure to express yourself in code. Note that I used the word failure. I meant it. Comments are always failures.” No, they are not. There are bad comments, useless comments and so on… but there is nothing that makes understanding code and its purpose better than a good comment. Code Complete has a great chapter on commenting code – what to comment, why to comment, what not to comment, what types of comments are there etc. The code comments chapter in Clean Code is less than 20 pages, with one referenced source (Kerrigan and Plaughter, 1978). For me, Code Complete is and remains for the foreseeable future, the handbook for good and maintainable code, and programming practices. I really wish, though, that Steve McConnell would do an updated version of the book, as even the second edition is now 10 years old (gods, typing that made me feel old, too). Not that the basics of good code ever change, but the industry itself has changed a lot in ten years, and it would be nice if Code Complete would reflect that, as well. I think the popularity of Clean Code largely stems from the fact that it is so easy to read and offers deceptively simple recipes, whereas Code Complete is not easy to read and offers you not ready-bake recipes but ideas that the reader has to formulate into the practices themselves. However, as most of the programmers never read a book about programming after university, I guess that even Clean Code is better than nothing. But in the end, what do I know…
Using exceptions is the proper way to handle File / Directory issues. Checking with .Exists doesn't stop someone from deleting it as you are trying to read it. Ignore his advice about the .Exists checks. But don't take it from me, take it from Eric Lippert: http://ericlippert.com/2008/09/10/vexing-exceptions/
Depends if you want to be able to inform the user of progress. If it's a long running operation where you want to present the user with a progress bar, then it's slightly easier with a BackgroundWorker. Otherwise there's no real reason not to use a Task&lt;&gt;
For that type of thing you might just want to consider a simple WinForms timer control- the timer events are on the UI thread which will save you from having to write (or understand) an invoke wrapper.
I am partial to using IObservables, myself. Look at http://introtorx.com
You want the ?: operator. var a = 5; var b = (a == 5) ? "a is 5" : "a is not 5" So something like this: select new { EvaluationID = rg.Key, Score = ( r.score == r.CCQA_FormQuestion.ForceToZeroValue ) ? 0 : rg.Sum(r =&gt; r.Score * r.CCQA_FormQuestion.QuestionWeight) / rg.Sum(r =&gt; r.CCQA_FormQuestion.QuestionWeight)) } 
Are these new 2013 projects or upgraded from 2012? I would say if these are 2012 projects try to check out a branch into a fresh project. Only thing I can think of is maybe they switched git versions betwen 2012 &amp; 2013 and there are conflicts. I haven't had any issues on my projects though Also if you have custom workflows, I'd try those on a new project
right now I'd rather create my own app
Task, with long-running creation flag set.
That makes no sense. You'd ditch WCF so you can roll your own client-server communication? Might as well ditch using System.IO and roll your own file operations libraries. They're there for a reason.
seems like I wrote something I shouldnt... right now, I WANT to use WCF I'm just not sure if it's enough to create what I want
If you want it to look cleaner, making an extension method would be better.
WCF will allow you to communicate between say, client and server. It's the *communication* foundation. It abstracts a lot, so you can simply go "send this to that server". Whatever *this* is, you need to receive it, play with it, then store it. WCF is your "receive it" Your code is "play with it" ActiveMQ is your "store it" -- because storing it for a subscribed client (the intended destination) and the like -- you could just use SQLEXPRESS and write your own database and deal with the issues of which client got the message, insert/update/delete records and the like (or just chuck it in a MSMQ/ACtiveMQ queue). Ignore SignalR -- that's just candy for stuff like websites dealing with messaging. Like Facebook, when it beeps that you have a new message or someone just liked your post -- that's using websockets/signalr flavored code to notify the browser right away when something happened on the server. There are already abstracts (WCF, ActiveMQ for message brokering, or SQLEXpress/EF for code-first modeling, if you wish) -- might as well use them. They're not flavor-of-the-months that'll go away any time soon. They're built to take these menial tasks that everyone has to deal with -- and abstract them so you can build your app the way you want your app. There'd be significantly less developers around if everyone had to code their own file i/o, screen drawing algos, math functions, and the like. We have this abstracted libraries to take those menial, redundant tasks and use them.
that's the answer I was looking for, thank you very much
You could skip WCF even and just use the ActiveMQ .NET package. Install ActiveMQ (free) somewhere and the .NET code has all the examples you need for sending messages to the queue, getting them out, and the like. You just encrypt your whatever, drop it into the queue, and it'll appear for the consumer (your server or your other client). 
Thank you for your reply. I am getting an error that says 'r' does not exist in the current context. Not sure why as it is accessed in the Sum part of the query.
Ah. I quoted what you provided. Try... Score = ( rg.score == rg.CCQA_FormQuestion.ForceToZeroValue ) 
http://msdn.microsoft.com/en-us/library/dd997423%28v=vs.100%29.aspx Have a look at the article above. 
You can also just modify your request to not accept gzip if you don't need it and the response will come back in plain text.
Not trying to be mean by any stretch, but why would someone use this over Entity Frameworks and LINQ? 
The `GZipStream` of the .NET Framework before version **4.5** is bugged and should not be used.
WCF is not a suitable framework for REST apis. Please don't advise this.
Or NHibernate, or dapper, or or or or...
The problem is that Linq really covers your use cases, and does so with integrated syntax in C#. For example: public static Email GetEmail(int emailID) { return new StacDataContext().Emails.Single(e =&gt; e.ID == emailID); } That's all the code you need to grab a specific email from a database. The Linq to MSSQL system handles the creation of Email objects as well as the DataContext objects. It sounds like you haven't seen Linq yet, I really suggest you take a look at it. 
I'll be perfectly honest, I think this (and most attempts to generalize data access) misses the forest for the trees. The abstraction level belongs above the communication object. Different data stores are *different*. If you treat them all the same (generically) you end up with *none* of their individual benefits and *all* of their aggregate flaws. If you really *need* to back your application with MSSQL *or* MySQL, you need to look at the two and write your repository code to target the individual technologies. Copy and paste the majority of it, if necessary. Certainly, make sure that all of your data access is a simple unit of work behind an interface, not just mixed into your application randomly. If you do that, you'll find that it's less work to just deal with the individual technologies, rather than going down this route (or the ORM route in general). That's just my opinion, but... I have been doing this for many years, so it's probably worth something.
You can try Git Extensions, does not solve your problem but it's a fine got GUI.
Web API 2 is much easier, but there's nothing wrong with using WCF. http://msdn.microsoft.com/en-us/library/vstudio/bb412172(v=vs.100).aspx REST isn't an "API" anyhow. It's HTTP that's been around since the dawn of time, and it's an abstraction layer on top of normal HTTP verbs to perform easier models and controller typed persistence. I wasn't advising anything, either. If he wants to use REST or full blown WCF, it's his choice in terms of what suits his needs. REST Web API 2 is easier, WCF is ... what, older? XML and SOAP and yuck. The benefit is it isn't *just* HTTP - you can use UDP or TCP or the like with WCF. You also don't get duplex communication with REST. You also don't get service references with REST. Just because REST is the neatest next thing, doesn't mean it's the answer to everything :-/
WCF was designed with the concept in mind that you can use any arbitrary transport protocol. It can do this by abstracting away all these details, so you're having a hard time accessing the HTTP protocols features using WCF. This is why it is not suited for REST apis, which heavily rely on http (different verbs, accessing the http headers).
Is this all as stringly typed as you're making it look?
Right, right. Dude was just asking him how. I told him REST, WCF or MessageQueue -- I think I even finally told him to ditch the service part of it and use a queue directly.
OH SNAP!
You don't necessarily have to understand it fully to use it. Here is a simple example of the function you need. Skip straight to the answer. http://social.msdn.microsoft.com/Forums/vstudio/en-US/296f8e39-fa62-4540-942a-26a53da0896a/threading-invokerequired edit: Here is a good article showing multiple ways to achieve the above. http://www.codeproject.com/Articles/37642/Avoiding-InvokeRequired
&gt;Or am I duplicating work? The truth is that you are duplicating a ton of work done multiple times by multiple different teams of people. I'm sure it's a fun project, but using an existing, well-worn library is guaranteed to be safer and more powerful.
The data inputs and returns are. Internal to the library it uses the various objects for each db system. With that said, before anyone yells about sanitation all input is sanitized before it gets mapped to a query.
 System.DateTime.Now.ToString("yyyyMMddHHmmssFFF") + ".txt"
Oh. I will charitably describe what I'm seeing as a learning exercise for you and leave it at that.
Essentially it ceases to *be* a valid datetime object when you add text to it pre-conversion. 
Check out dapper as it does something you are doing and then some. Then checkout dapper rainbow and dapper contrib as they add more functionality on top of dapper. Then checkout how they can be made better as their authors acknowledge some downside to them as with everything, then see how you can improve upon them. But as the others are saying what you are doing has been done before. 
There are a lot of questions here. 1. I use Postal for emailing. Send an email using a view. Very MVCish and simple to use. http://aboutcode.net/postal/ 2. There are a lot of paid options here. One free one that I have used is PdfSharp. It is slightly complex but the site has some tutorials. http://www.pdfsharp.com/PDFsharp/ 3. MVC5 has built in tools for confirming/denying users. I don't know what method of authentication you are using but for FormsAuthentication there is a CreateUserAndAccount overload that includes a "requires confirmation" boolean. If this is set to true the user account will be created but not activated. You can manually activate the user from there or create an interface to approve/deny them. You could also switch to an invitation system and control the invites. There are a lot of options here. 6. This will also depend on what authentication you are using. Look up .NET roles. You can assign users to roles and specify exactly what views or controllers a user can see based on their role. You'll need to set up an interface to manage all of this and then add the proper attributes to each controller or method. 
I tried. I really tried.
I don't like how the Microsoft Git Provider does not allow me to do a rebase from the GUI. I have to constantly use either TortoiseGit or the command line to the point where I am only using the integrated provider as a visual indicator of what has changed.
Yes. The more solutions available by which to choose from, the better.
There is a reason there isn't a "one size fits all" DB library - the DBs are different. ORMs like EF, DevArt, and others try to adapt to this, and do it pretty well, but they still have limitations that vary between DB providers - and those are the culmination of thousands of hours of professional work. As others have said, you are kind of building a non-standardized version of LINQ to SQL. I encourage you to continue and learn from the experience, but I would not expect to release this as something that would be used by others.
What's new: * New APIs for ASP.NET apps. * Resizing in Windows Forms controls. * New workflow feature. * Profiling improvements. * Debugging improvements. * Event tracing changes. The 0.0.x updates are always so underwhelming but I suppose that's to be expected.
Think of the await keyword as saying "exit this method, and come back then this task is done". Doing it in Main() doesn't really make sense (and I don't think it's allowed). You also want to try to avoid making async void methods - if you have nothing to return, at least return a Task. If you wanted to await multiple tasks, your best bet is to await WhenAll. For example: public async Task&lt;ProcessedThing&gt; GetThingsFromWebServiceAsync() { var taskList = new List&lt;Task&lt;Thing&gt;&gt;(); taskList.Add(GetFirstThingFromWebServiceAsync()); taskList.Add(GetSecondThingFromWebServiceAsync()); await Task.WhenAll(taskList); var thing1 = taskList[0].Result; var thing2 = taskList[1].Result; // Do stuff with thing1 and thing2 to come up with processedThing return processedThing; } Whatever you want to occur while thing1 and thing2 are being collected should be in the calling method.
This is true. But I guess "Announcing the .NET Framework 4.5.2" sounds a lot more interesting than just, "Oh um, we've got some hotfixes for you and some other miscellaneous stuff if you're interested.."
DataGridView? http://msdn.microsoft.com/en-us/library/system.windows.forms.datagridview.aspx http://msdn.microsoft.com/en-us/library/vstudio/fbk67b6z(v=vs.100).aspx
The only thing I can possibly think of is an entire list view for each shift, and that's not very practical.
What about nullable types? I use int? storeCode a ton in my code. I sometimes have a drop down with an "ALL" option that passes a null and In my data layer I like to use something like this. Var SQL = "select * from table where 1=1" If(storeCode.HasValue){ Sql += " AND STORE = :storeCode" ParameterMap.add(":storeCode", storeCode.Value); } Is this ok? Code review time!!!
Thanks for sharing your application! I like it. Are you planning on sharing the source (github/other?)? 
Id like to. I'm still very new to this so I haven't figured out how to use github as of yet. That's next on my list after I fix the above mentioned issues. 
Ah, it's only about methods. Because you sometimes need three values. For example in my IRC library i got a `bool? IsNickServIdentified` for the User class. True, false, and null for if it wasn't checked yet.
Yeah - this problem is stumping me. The best solution I can think of is: 1. Query the database with a crosstab 2. Create a dynamic dataset in C# with the results 3. Dump the results to a DataGridView It won't be as pretty as what I've outlined above, but it'll give my users the totals they need. Thanks for your input, if you've got something better than the route I'm pursuing now, let me know.
I'd suggest the repository pattern for the DAO - this way your normal CRUD methods are written in one class which you can inherit into separate repositories for each table. It also allows you to add custom methods to specific tables too. I would also create a model project which stores the table in code format Example: public claass MyTable { public int Id {get;set;} public string MyField {get;set; } Use annotation to define the limitations of the field. public abstract class EntityRepositoryBase where T : class { public T Add(T entity) { //Add entity } /* CRUD here */ } If you're using DI you will probably want to create an interface too public interface IEntityRepositoryBase where T : class { T Add(T entity); // etc } For each table you create a repository public interface ITableNameRepository : IEntityRepositoryBase&lt;TableName&gt; { // Custom methods here for the table } public class TableNameRepository : EntityRepositoryBase&lt;TableName&gt;, ITableNameRepository { // Implement any custom methods defined within ITableNameReposiory } I would say all custom "queries" should appear on the table it reflects the most. You may also want to setup a ViewModel project to store more than one model public class MyAwesomeViewModel { public MyTable1 MyTable1 {get;set;} public MyTable2 MyTable2 {get;set;} } Hope this helps.
Very good point, I'll keep it in mind.
Interesting read, thanks for your help :)
That makes sense! I was kind of struggling with how to have concurrent async tasks running at the same time. This is super helpful, thanks!
OK - I just tried to run a crosstab (PIVOT) on my table and I must be doing something wrong with the syntax. Forgive me, but I'm old-school MS Access and still learning to do T-SQL. Here's what I currently have: &gt;SELECT Shift, StationAssignment, PersonnelID &gt;FROM Personnel_Tbl &gt;PIVOT (COUNT PersonnelID) FOR StationAssignment AS pvt; What am I doing wrong with my syntax? Thanks Much: Pavilion
I have seen multiple articles say that Tasks can do everything that BackgroundWorkers can do. Ill give it a shot and see what happens. Thanks all for the input! Basically I need the application to continuously update the textbox, until the "Get Readings" button is pressed. My thinking is that when that button is pressed, it will stop the task, collect and save the current reading, and then begin the continuous reading task again. How does that sound? 
I did have the case right in my code, but I am getting the same error. I went through and changed the names of a few things to make it more readable (less r's) join results in ( from resultItem in db.CCQA_EvaluationResults where resultItem.Score &gt; -1 group resultItem by resultItem.EvaluationID into rg select new { EvaluationID = rg.Key, Score = ( rg.Score == rg.CCQA_FormQuestion.ForceToZeroValue ) ? 0 : rg.Sum(r =&gt; r.Score * r.CCQA_FormQuestion.QuestionWeight) / rg.Sum(r =&gt; r.CCQA_FormQuestion.QuestionWeight) } ) on i.EvaluationID equals r.EvaluationID I am still getting the same error: CS1061: 'System.Linq.IGrouping&lt;int,CCQA_EvaluationResult&gt;' does not contain a definition for 'Score' and no extension method 'Score' accepting a first argument of type 'System.Linq.IGrouping&lt;int,CCQA_EvaluationResult&gt;' could be found (are you missing a using directive or an assembly reference?) I checked (just to make sure) and CCQA_EvaluationResult DOES have Score. The error here says the grouping does not have a definition of Score, but it should do, as it is a grouping of CCQA_Evaluation that does contain it. I really am sorry that I am not getting this. Your explanation above really did help me to understand though how the grouping et al means. Part of the problem I believe was that every variable in this section was 'r' and they had different contexts. 
You say you're relatively new to C#, is there a reason you're starting with Winforms rather than WPF? Winforms is a dying technology that's no longer being actively developed by Microsoft, save for bug fixes. In another comment TrolltasticLogic says "The only thing I can possibly think of is an entire list view for each shift, and that's not very practical." which is true in Winforms, but in WPF it's just a simple case of using [Data Templating](http://msdn.microsoft.com/en-us/library/ms742521.aspx). For developing data-driven applications Winforms really is a giant pain in the ass compared to WPF. Sure WPF takes a bit more time investment to learn initially but it's most certainly worth it. Make sure you look into MVVM if you do go down the WPF route, it's worth learning to use WPF properly from the start rather than falling into the "I'll just put everything in code-behind like in Winforms" trap.
Form1.cs :I Seriously though, that's a pretty good first app. I recommend hitting ctrl+e, d (that is, hold ctrl, tap e, release ctrl, tap d) to fix your bad indentation. 
Basically it depends on how you want to handle your catch statements. The advantage of having your own custom exceptions is you can catch them separately and execute separate pieces of code, see below. However if you just plan on handling all types of exceptions the same like dumping the message to a log file or message box, using a generic exception is fine. catch (UserNotFoundException ex) { //handle code for user's not found } catch (MultipleUsersFoundException ex) { //handle code for multiple users } catch (Exception ex) { //handle other badness } 
Says that Ctrl+e, d is not a combination. Anyways the main function of this app is that it does a custom update to league of legends. Edit, I got SSD trimming left to do and make it so that clearing the windows update cache doesnt error.
&gt; Checking for null every single time is a performance hit It's not a huge performance hit. It's a single IL instruction IIRC. &gt;Personally, I don't like designing object methods that return null because it makes null an unexceptional occurrence Depends on the situation. Null has significant meaning in certain situations (such as checking the database for information), so I wouldn't discredit null entirely. It's more expensive to try-catch an Exception than it is to do some safe checking. Exceptions are very expensive. :(
I thought it wouldn't work if you didn't have the right update?
 else {} You might want to leave that out completely.
Nevermind, I don't really know anything about custom updates :)
There are some DLL files embedded + an external installation of Nvidia CG, when you have both of this the program replaces the current game DLLs with the newer updated ones, results are a faster game launcher and client.
&gt; Even if you feel like the code you're writing is only for yourself and no one else is going to read it, it becomes infinitely easier to work when you put some effort into the structure of the code. One nice way I like to think about this is even if the code is only for yourself, the you of today and the you of 6 months down the road are going to be different people and you want "past-you" and "future-you" to work well together.
Good point, this is pretty much the "provider" layer we started using basically. But instead of working with "tables" we work we "domains" ( eg: authentication, stores, cms content, news). This is why I'm not sure, and also in a few cases, services just relay the call to the provider without any additional logic.
If you're doing something in a loop 1 million times, then checking for null 1 million times has a definite and fixed cost. Whereas only throwing an exception when you actually need is less costly in the long term with the added bonus of less clutter. Exceptions are more costly than checking for null, but if exceptions are occurring often, then something is wrong with your application. In this case, retrieving a record from the database that is assumed to exist should only cause an exception if there is something truly and catastrophically incorrect in the application or database. At that point, performance is no longer your primary concern. Null means "I don't know" and is not the equivalent of "nothing"; technically speaking it means "invalid reference". Databases have null values to represent a lack of data. Confusing the terms does not make for good design. 
&gt; You will have null references in your code Not if you design the code _you own_ to avoid the use of nulls, which is the point of the article. If everyone followed this same philosophy, null checking would be largely unnecessary.
There's a big difference between null (invalid reference) and a database null (no data). 
You've created a convention for what null means, but there's no guarantee that null represents what you think it does. It could mean that the object wasn't initialized properly or that there was a problem with the code that sets this value and it failed, leaving it in the unknown state. It might be better to have an enum value representing "true", "false", and "Not checked yet", and if a null occurs then you know that something is amiss instead of assuming that the thing hasn't been set yet. 
Its 'Ctrl-K, Ctrl-D' for me
Cannot emphasize this enough. When I was working on my CS minor I wrote some fun applications to help with a video game I played (editing colors of the virtual pets, etc.). Knowing how poorly I named things is enough to keep me from ever going back to that code.
No one is going to figure out how to install this. You need to make a no brainer setup. I think you should work on that. PS : You dont't have to release new version every day. And consider making your app "updatable".
Those ASP.NET API changes just might save some asses at work, though. I'm not going to complain.
You need League of Legends to get this to run, simply put it in the League of legends folder, bam! I already have a guy doing the installer for me in Lua, under the name of "LoLTweaks". I will see what i can do make it auto update.
Oh my yes. I looked at some stuff I wrote long ago and it was... bad. Real bad. I don't know what I was even trying to do in some places.
I started by trimming all the .cs files, so it is much more compact now, for the rest I will do that once i get some babybugs out of the way.
One thing to note: presumably `productid`/`userid` are primary keys in the DB, which would mean that the DB requires that only one record exists for a given id. It is therefore unnecessary to handle the case where multiple records are returned for a given id. It's good to think through the possible outcomes of your code and recognized potential errors, but it's also important to think through which errors are technically possible, but will never actually occur in practice.
try something usefull for your life (later) like....DB Connection?
I don't know if you've solved this yet, but I've converted it to a method chain if that's more readable for you: var data = db.CCQA_Evaluations.Join(db.CCQA_Forms, i =&gt; i.FormID, f =&gt; f.FormID, (i, f) =&gt; new {i, f}) .Join(db.empQueryViews, @t =&gt; i.AgentID, e =&gt; e.TechID, (@t, e) =&gt; new {@t, e}) .Join(db.CCQA_EvaluationResults.Where(r =&gt; r.Score &gt; -1) .GroupBy(r =&gt; r.EvaluationID) .Select(rg =&gt; new {EvaluationID = rg.Key, Score = rg.Sum(r =&gt; r.Score * r.CCQA_FormQuestion.QuestionWeight) / rg.Sum(r =&gt; r.CCQA_FormQuestion.QuestionWeight)}), @t =&gt; i.EvaluationID, r =&gt; r.EvaluationID, (@t, r) =&gt; new EvaluationItem { FormID = i.FormID, FormName = f.FormName, EvaluationID = i.EvaluationID, AgentID = i.AgentID, AgentName = e.fullname, Datestamp = i.Datestamp, EvaluationDate = i.EvaluationDate, Identifier = i.Identifier, Score = r.Score, AgentViewedDate = i.AgentViewedDate }); I apologize for the crappy variable names, that's what resharper came up with. You should be able to rename them without trouble. Let me know if this helps.
Can you expand on this because I don't see the distinction you are making. A variable with no reference is a variable with no data (not to be confused with default data values).
&gt;If you're doing something in a loop 1 million times, then checking for null 1 million times has a definite and fixed cost. Very true. It also has the added benefit to never throw an exception and potentially take the entire application down (usually). Which is very important as well. Yes, the caller can try-catch and report the exception, but what state is the application in now versus what it was in? But now we're getting into belief systems and personal preferences as to how certain issues are handled and whether or not null in certain instances are exceptional and should be treated as such. &gt;Null means "I don't know" and is not the equivalent of "nothing" nullis the absence of data. It can mean I don't know (in database sense at least) or it can mean, as you said, an invalid reference. However, databases and applications that utilize the database do have different definitions of "null". Databases don't have nulls come back for invalid references. That's something far worse usually (integrity check time!). But that's why .NET has DBNull versus null. 
http://blogs.msdn.com/b/ericlippert/archive/2009/05/14/null-is-not-empty.aspx "There is a semantic difference between “the collection of results is known to be empty” and “the collection of results could not even be determined in the first place”, and we want to allow you to preserve that distinction, not blur the line between them. By treating null as empty, we would diminish the value of being able to strongly distinguish between a missing or invalid collection and and present, valid, empty collection." A database null just represents a missing value in a column. A C# null represents an undefined state. It is not "nothing", it is more like "we have no way of knowing what this is". 
After helping you with like 50 % of the code in IRC already (yes, you did ask a lot) it is time for a code review: - Don't use names like `Form1`, give proper names. What is this form used for? - Don't check in **.user** files to the repository (like *LoLUpdater.csproj.user*). User files are **per user**. By adding them to the repository you force your personal user configuration upon everyone checking out the repository. - **Don't check in private keys to the repository (like *LoLUpdater.pfx*)!** Seriously, wtf? That's security 101. - Don't have everything in one source file, split it up into logical classes (*Form1.cs*). Large files are less maintainable, because there is so much code you can't overview all. By splitting up your code in separate classes you make the responsibility more clear. It also helps to test your code, as you can test single classes instead of a big chunk of mess. - Format your code properly. (Wtf, where are the spaces??) - Don't combine paths yourself, make use of `Path.Combine()` (Form1.cs, line 51). - Keep **constant** strings as **constants** (Form1.cs, line 79-82). This makes clear you're not modifying the string anyway. It is also handled differently in memory. - Explicitly use **access modifier** for your code (Form1.cs, line 79-82). Your code should be as expressive as possible, and by explicitly writing the access modifier you make clear what you want. Without one reading the code could think *"Did he just forget it? Was it intentionally?"*. - Don't use poor naming such as `service0` (Form1.cs, line 125). Make in the name already explicit what this service is used for. For example call it `wuauService` (if that makes sense, no idea what wuau is). - Give your controls proper names (Form1.cs, line 138). What is `checkBox3`? Is it for setting *Pando Network* stuff? Why not call it `EnablePandoNetworkStuff` instead? - Make use of *readonly* fields (Form1.cs, line 172). These `allServices` you could easily and more clean maintain as a readonly variable on top of the file. - Don't have more than one class per file (Form1.cs, line 353). Split them up in separate source files! No need to squash all in one, it makes both classes less maintainable. To be honest, I'm a bit disappointed. We teached you a lot of stuff better in IRC already. At last, a word of warning: **Be ready to get sued.** In *Form1.cs, line 108* I can see you keep **CCleaner.exe** as a resource and write it to disk when needed. Let me quote a part from the software license: &gt; - You may **NOT** resell, charge for, sub-license, rent, lease, loan or **distribute the Product without our prior written consent**. We reserve the right to withdraw any such consent (or part thereof) for any reason and without notice and to demand that you immediately cease any activity in respect of which permission is withdrawn. I highly doubt you have a written consent. I did not check the license of the other software you provide.
Only code those things that only you can code. - Dot net rocks podcast. You either need to be an expert on building entire worlds, or an expert on the world you built using the unity engine. The unity engine is already battle tested, it works. Build a small game in Unity, and see if the results are acceptable to you. If not, you will have to build the game engine from scratch.
Resharper doesn't work with visual studio express :-(
&gt; It also has the added benefit to never throw an exception and potentially take the entire application down (usually). I think a lot of programmers are "exception averse" because they think exceptions are scary things that can be difficult to predict and control. The knee-jerk reaction is to prevent them from occurring by doing null checking. The problem with this approach (in my humble opinion) is that it perhaps avoids the root cause(s) of the exception. Quite often this is due to poor OOP practices. It is much easier to treat missing data as null (and check for null) rather than make sure objects are always initialized and have valid values to represent missing information. Null is an easy shortcut to take, and the end result is to have to constantly check for null (or suffer an unexpected exception!). The side effects are cluttered code and hidden bugs. Back to the OP's situation, checking for null was one way of doing it, but since he didn't do anything when it was null, he realized he was creating a potential bug. What should happen when the database can't get the information required? Is there a mechanism for interrupting program flow to notify the caller that something is seriously wrong? Yup, that's what exceptions are for! 
You don't need to stop task, you can check for button press, collect and save current reading inside the task itself, then continue updating.
Please, I'm not a grammar nazi but after reading your beautifully constructed post I want to point out : &gt; We teached you a lot of stuff better in IRC already. "We had taught you lots of this stuff in IRC already" or something like that. Minor grammatical issue aside, this is a beautiful post and I'd love to be reviewed by someone like you. Your points are clear and concise, you make use of specific line numbers when appropriate. Love it. 
Thank you for your correction. :-) English is not my native language (which is not an excuse, but an explanation), so I often still make mistakes. People correcting me help me learn.
That's what it's all about :p
&gt; I think a lot of programmers are "exception averse" because they think exceptions are scary things that can be difficult to predict and control. Only if the programmer doesn't understand the cause! &gt;The side effects are cluttered code and hidden bugs. Code can definitely get really cluttered. &gt;since he didn't do anything when it was null, he realized he was creating a potential bug Absolutely. Your post is correct! Just offering my own input that may or may not be valuable / informative.
I actually have a question related to this code. Say I have 20 checkboxes, which, if enabled, allow for specific code to run when a button is pressed. Just like in this app. What's the best way to deal with all the checkboxes? Is there a better way than just running through a massive list of *if (checkBox.Checked)*?
This specially applies to LinQ, or anything else that relies on lambda expressions
Thanks for the feedback, changing as much as i can right now.
The only problems I have that I need shell for is when I get those particular messages. If I could stash and apply from the GUI, I would be golden. Unfortunately, sometimes files are in use that can't be unreferenced (Nuget packages, mostly) so I have to close VS to work around it.
Not at all! This is how you *learn*, and learning is a good thing. :)
Look into a ListView - it displays data in much the same way I think you are illustrating, letting you have "groups".
I use it to set all users' default password in our test DB.
I'm well aware of why we need all the different extension methods :) If you are interested in writing more validated code, you should look into .NET code contracts http://msdn.microsoft.com/en-us/library/dd264808(v=vs.110).aspx. The basic idea is that you do specify conditions similar to this in order to create higher quality software by actually stating conditions after actions are taken.
For my object construction I'm literally only assigning values that are passed in, so nothing should *ever* go wrong there. If it does, there's probably a bigger problem than a null property. Also null literally means "undefined" and before checking the status is "undefined". I'm also storing the DateTime when it was requested, so there's another indicator.
Sounds like you're using an old version of Mono, newer versions have System.Diagnostics.Tracing.
And you usually spend more time reading and analyzing code that actually writing. it
Glad you have implemented wss: The only websocket server library I have been happy with until now, is Alchemy, and even then I have modified it quite a bit. But no wss support. However I use the websocket proxy on nginx to do it.
If you're using WinForms, probably like OP's response to you: `CheckedListBox`. If you're on WPF, I suggest data binding them to their own properties. In the setters (and getters) (and if they're related that is) have them set a bit flag for that value. [Like this](https://github.com/GenesisRx/RxLauncher/blob/master/RxLauncher/ViewModels/ServerListViewModel.cs#L112,L150) (warning: unfinished project of mine). Conceptually, it works, but I never finished the code to actually try to see if they work.
No idea as far as the win32 builds of Mono are concerned, I'm only thinking about its potential to run on Linux.
From the beginning WSS was a "MUST HAVE" because the issues with proxies. It was actually quite easy to do.
I have a SuSe linux around, I will give it a try this weekend.
There's no benefit to use a Concurrent collection in a single threaded environment. There is additional overhead in the concurrent collection classes due to their thread-safe nature. EDIT: Even looking at the [reference](http://referencesource.microsoft.com/#System/sys/system/collections/concurrent/ConcurrentBag.cs#3d24e888d6089d06) source to the ConcurrentBag&lt;T&gt; class is insane. That's a lot of overhead for a single-threaded environment that's perfectly acceptable in a multi-threaded environment
I'll put it through it's paces and see what I can find. Mono is relatively straightforward to compile from source so I can run it against the latest-and-greatest. A cursory glance suggests that there shouldn't be anything major in the way.
Ended up implementing some implicit operators that turned out to be really useful in a generic environment. Not gonna lie, it was pretty cool to watch it work. :)
That is extremely cool. Do you have some quick examples or short snippets implementing these contracts?
From the article itself: &gt; If you have a test suite that you trust so much that you are willing to deploy the system based solely on those tests passing; He then admits right afterwards that's a *very* big if, but I don't see a problem with justified confidence in tests. That being said, I've been on a team where that confidence is terribly misplaced and watched it bite us in the ass over and over again. So I completely understand and totally sympathize with you on people relying on unreliable tests.
Ever since discovering their use in XLinq, I've been a fan of judiciously applied implicit cast operators. Like the article says, they work great for when you want to have a sort of strongly typed subset of another type. I also find them useful when you need to attach some momentary intelligence to an object, but you also want the user of the object to be able to discard that intelligence transparently. So long as you the object as a method argument or assign it to a property of the 'lower' type the compiler will happily chain in your operator overload automatically. Sadly it won't work with var very well and if the object you're wrapping up has methods you'll need to do a cast of some form in order to get at them.
I'd stick with the non-concurrent collections in single-threaded scenarios. Aside from the extra overhead and code noise you get when using the concurrent collections from a single thread, you also potentially clue in anyone reading the code that the collections you're dealing with will only ever be accessed from one thread at a time. Your generic analogy is good, but the reason it's not quite applicable is that outside of the uncommon case of heterogeneous collections, List&lt;T&gt; is better than ArrayList in every way. And even with heterogeneous collections List&lt;object&gt; is roughly interchangeable with an ArrayList, so there's no downside. But compare List&lt;T&gt; and any of the concurrent collections and you'll see that there's a wide enough gap to warrant both being useful.
Yes, but I just read you are not alone. In VS 2013, I get the Err Category=21 or something like that, but I solved it by using Tortoise GIT in Windows Explorer; it actually shows you the error. In my case (today) I had a SQL file (.sql) and it couldn't merge it; I didn't even need it in source control, so I added it to the Exclude Files, but Visual Studio 2013, told me nada. I hope they improve this soon, but Tortoise GIT was simple even for me, and I hate source control (because they are all designed from the ground up to not be programmer friendly) but am forced to use it. 
thank you for making this; it looks really very good
I'm not sure about putting a image button inside a text box, but you could put both in a panel or div together and achieving the same look with some css.
Ah yeah I forgot about that. You could check out CodeRush from devexpress. I have no idea if that works on express either. Two other tools are FXCop and StyieCop that are worth looking into. Here's the thing about "good code". Good code is sometimes bad code, and depends entirely on the application. Most developers have their own idea of what good code is, either when it comes to readability, style, patterns, or functionality. When I started off in c# coming from c/ c++ and was doing forms, I learned what good code was for forms. Then I switched to WPF and that was a whole new learning experience. Now I do game dev in Unity3D and that was again an entirely new learning curve for what good code is. A lot of Language usage opportunities suggested by Resharper are actually mostly bad for game performance for instance. Anyway what I'm saying is whatever your target platform or whether it's forms or WPF, or whatever, become proficient in that technology but don't get stuck in one way of doing things because you read it on a blog or reddit, or because Resharper told you so, because a it's always different. Edit: oh and also, learn WPF and XAML with some variation on the MVVM pattern. Learn data binding properties, commands, and ObservableCollection. It's really a billions times better than forms. 
Are you the kind of guy who grow his own food, rather than go to the (disgusted huff) *store*? And makes his own clothes? Then don't use Unity, because it would make your life waaaay too easy.
Did someone say IRC!? What server and channel?
Watch out for any Endian issues if your shifting bytes around. Mono opens the doors to ARM processors, such as the Raspberry Pi, and Android, which are BigEndian.
It's not clear from your post but do you know C#? If not, you may want to start there. http://channel9.msdn.com/Series/C-Fundamentals-for-Absolute-Beginners https://www.coursera.org/course/gameprogramming And yes, Unity is definitely worth it. 
I don't really have any quick examples D: it's mostly a better way to do assertion exceptions at run time and has a static analyzer that can detect fallacies in your contracts at compile time and throw them as errors (you still have to manually set up your expectations). Also, quick examples don't even look that great for something like this. You'd probably want to look at a huge validated system and stand in awe of the correctness in the face of the complexity. I may be stating the obvious, but code contracts are usually used with unit tests to bolster the system's correctness even further. You kind of need to grow this type of thing over a long period of time to see the value. Also, a discerning feature, if I recall, is that everything can be turned on and off at will as to not incur a penalty at release time (!). In short, it's REALLY well thought out and neat. 
How is you implementation different from XSockets.net? I have used their libraries before and they are quite nice. It also works with Mono.
I have a sample program that does exactly that. Shoot me a pm and I'll post it to github. Its actually pretty simple. Httpwebrequest. Get the stream. Read the stream. Parse with HTML agility pack. Output results. Extra tips: get down xpath... or regex basics, download fiddler or http live headers or firebug. If you need help I can walk you thru it just msg me. I'm learning too only 8 months in and that was one of my first projects. 
Thats actually a very nice idea. Thank you.
I...have dabbled in Java. I understand the syntax and what's going on. I just...have yet to really write my own full on program. So you think Unity would help me to conquer the learning curve? Alright. Thanks!
I like to take the hard way, yes.
Ok! Thank you.
Very cool. It sounded like it was something that needed to be built as an application grows, but there's a project we have a work that I think could benefit from this type of thing. Thanks!
You should post your code, including descriptions where the error is, what is happening and what you expect.
Thanks. That's quite alright, I'm a .NET veteran. :P Just looking for like-minded people.
using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Drawing; namespace FinalProject { public enum GrassState { Dormant, Growing, Grown } class Cell { //Fields public GrassState GrassSt; public Critter crCurrCritter; //Properties public GrassState Grass { get { return GrassSt; } } public Critter CurrCritter { get { return crCurrCritter; } } public Color CellColor { get { if (crCurrCritter == null) { switch (GrassSt) { case GrassState.Growing: return Color.LimeGreen; case GrassState.Dormant: return Color.Tan; case GrassState.Grown: return Color.Green; default: return Color.Blue; } } else if (crCurrCritter is Herbivore) return Color.Blue; else return Color.Red; } } public void vDevourGrass() { GrassSt = GrassState.Dormant; crCurrCritter = null; } public Cell() { GrassSt = GrassState.Grown; crCurrCritter = null; } public void vRemoveCritter() { crCurrCritter = null; } public void vInsertCritter(Critter crCritterType) { crCurrCritter = crCritterType; } public void vGrowGrass() { if (GrassSt == GrassState.Grown) GrassSt = GrassState.Grown; else if (GrassSt == GrassState.Growing) GrassSt = GrassState.Grown; else GrassSt = GrassState.Growing; } } } //I'm having a problem with vDevourGrass(). Another class is supposed to call it, while changing the colors of the grid. //The code for the class that calls it is listed below. using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Drawing; namespace FinalProject { abstract class Critter { //Fields protected int iEnergyLevel; //Properties public int EnergyLevel { get { return iEnergyLevel; } } public bool Alive { get { if (EnergyLevel == 0) return false; else return true; } } //Constructor public Critter(int iEngrLvl) { iEnergyLevel = iEngrLvl; } //Methods public abstract Critter crReproduce(); public abstract void vEat(Cell clCell); public abstract Point ptFindMove(Cell[,] aAllCells, int iRow, int iCol); } class Herbivore : Critter { //Constructor public Herbivore(int iEngrLvl) : base(iEngrLvl) { } //Override public override void vEat(Cell clCell) { if (clCell.CurrCritter == null) { if (clCell.Grass == GrassState.Grown) { iEnergyLevel += 3; clCell.vDevourGrass(); } else if (clCell.Grass == GrassState.Growing) { iEnergyLevel += 2; clCell.vDevourGrass(); } else iEnergyLevel = iEnergyLevel; } else { return; } } public override Critter crReproduce() { int iOffSpring = (iEnergyLevel + 1) / 2; iEnergyLevel = iEnergyLevel - iOffSpring; return new Herbivore(iOffSpring); } public override Point ptFindMove(Cell[,] aAllCells, int iRow, int iCol) { List&lt;Point&gt; Full = new List&lt;Point&gt;(); List&lt;Point&gt; Growing = new List&lt;Point&gt;(); List&lt;Point&gt; Dorm = new List&lt;Point&gt;(); for (int i = -1; i &lt;= 1; i++) { for (int j = -1; j &lt;= 1; j++) { if (iRow == 0 &amp;&amp; i == -1) ++i; if (iCol == 0 &amp;&amp; j == -1) ++j; if (i == 0 &amp;&amp; j == 0) { ++j; ++i; } //Ensure if in grid if (iCol + j &lt; 12 &amp;&amp; iRow + 1 &lt; 12) { //Check is cell is empty if (aAllCells[iCol + j, iRow + i].CurrCritter == null) { //Go through all 3 grass states if (aAllCells[iCol + j, iRow + i].Grass == GrassState.Grown) { //Put it in a list Point ptFull = new Point(iCol + j, iRow + i); Full.Add(ptFull); } else if (aAllCells[iCol + j, iRow + i].Grass == GrassState.Growing) { //Put it in a list Point ptGrow = new Point(iCol + j, iRow + i); Full.Add(ptGrow); } else { //Put it in a list Point ptDead = new Point(iCol + j, iRow + i); Full.Add(ptDead); } //Check each list //choose one place at random } else { } } } } Random rGenerator = new Random(); if (Full.Count &gt; 0) { int iPoint = rGenerator.Next(Full.Count); return Full[iPoint]; } else if (Growing.Count &gt; 0) { int iPoint = rGenerator.Next(Growing.Count); return Growing[iPoint]; } else if (Dorm.Count &gt; 0) { int iPoint = rGenerator.Next(Dorm.Count); return Growing[iPoint]; } else { Point ptOrigLoc = new Point(iRow, iCol); return ptOrigLoc; } } } class Predator : Critter { public Predator(int iEngrLvl) : base(iEngrLvl) { } //Override public override void vEat(Cell clCell) { if (clCell.CurrCritter != null &amp;&amp; clCell.CurrCritter is Herbivore) { int iGainEnergy = clCell.CurrCritter.EnergyLevel; clCell.vRemoveCritter(); iEnergyLevel = iEnergyLevel + iGainEnergy; } } public override Critter crReproduce() { int iOffSpring = (iEnergyLevel + 1) / 2; iEnergyLevel = iEnergyLevel - iOffSpring; return new Predator(iOffSpring); } public override Point ptFindMove(Cell[,] aAllCells, int iRow, int iCol) { List&lt;Point&gt; lstHerbs = new List&lt;Point&gt;(); List&lt;Point&gt; lstEmpty = new List&lt;Point&gt;(); for (int i = -1; i &lt;= 1; i++) { for (int j = -1; j &lt;= 1; j++) { if (iRow == 0 &amp;&amp; i &lt; iRow) ++i; if (iCol == 0 &amp;&amp; j &lt; iCol) ++j; if (i == 0 &amp;&amp; j == 0) { ++j; ++i; } //Insure it is within the grid if (iRow + i &lt; 12 &amp;&amp; iCol + j &lt; 12 ) { //check to see if cell is empty if (aAllCells[iCol + j, iRow + i].CurrCritter !=null &amp;&amp; aAllCells[iCol + j, iRow + i].CurrCritter is Herbivore) { Point ptFood = new Point(iCol + j, iRow + i); lstHerbs.Add(ptFood); } else if (aAllCells[iCol + j, iRow + i].CurrCritter == null) { Point ptEmpty = new Point(iCol + j, iRow + i); lstHerbs.Add(ptEmpty); } else { } } } } Random rGenerator = new Random(); if (lstHerbs.Count != 0) { int iPoint = rGenerator.Next(lstHerbs.Count); return lstHerbs[iPoint]; } else if (lstEmpty.Count != 0) { int iPoint = rGenerator.Next(lstEmpty.Count); return lstEmpty[iPoint]; } else { Point ptOrigLoc = new Point(iRow, iCol); return ptOrigLoc; } } } } 
Just listed. 
[Elasticsearch](http://elasticsearch.net) might be your solution. For .net [Nest](http://nest.azurewebsites.net) is a client.
Also, what problem do you have? Does it not compile, or do you get an exception?
It builds and runs fine, but its not executing the vDevourGrass Function. It seems that its not being called at all.
Null is the default value of reference types. Null is returned by a lot of .NET API's in many cases as well (such as StreamReader.ReadLine()). You *will* have nulls appearing in your code, so you *will* have to deal with it.
Thank you so much, i was totally blocked and now i achieved it, it took me 5 minutes and i spent at least 2 hours trying to get the image inside the textbox
I tried doing something in that but it wouldn't work for some reason. 
That's not very specific. The first thought I have is that you don't have the console app set as the startup project, so it would be trying to launch the GUI app instead.
Also, and this may blow your mind, but Concurrent collections don't guarantee that your code is threadsafe.
Oh that was the problem actually yeah. The console kept closing on me. Thanks a lot. 
Well, devourgrass is called from the eat method on herbivores, but I don't see that ever getting called, is code missing? Have you tried debugging? Because fixing your problem like this is kind of awkward.
Hard to see what the problem could be without the full project. Is the issue that the colour isn't changing on the UI? What type of interface do you have? Could it be that you're just not refreshing the screen after the GrassState is changed?
I just let my code maid do that...
At least in VS 2013, you can skip adding that and run the console app with Ctrl+F5. 
That would be a nice way of doing it. I hadn't considered it since I get all my game metrics from GameAnalytics Plugin for Unity. :) Thanks
Excuse me? I don't quite understand what you mean
LinqPad is probably what you need. It's somehow disguised as a Database query program using Linq, but let that fool you. It's actually a fully fledged C# scratchpad.
Ahh, I see.
same with any version of VS (at least since VS 08, which was the first I used). But it will also disable the debugger!
&gt; if (ball.colour.ToLower() == "red") No! Bad! if(ball.colour.Equals("red", StringComparison.OrdinalIgnoreCase)) or if("red".Equals(ball.colour, StringComparison.OrdinalIgnoreCase)) Which will eliminate any unnecessary NullReferenceExceptions.
Oh, right. I should have mentioned that.
Or you could simply type up the console app in any text editor, save it as a MyApp.cs file, then open a Visual Studio Command prompt and run the following: csc MyApp.cs and you'll get a MyApp.exe in the same directory. (This assumes you need no other assembly references, or the command line becomes slightly more complicated). A skeleton console app could be like this: using System; public static class Startup { public static void Main(string[] args) { Console.WriteLine("Hello, world"); } } 
Agreed. We use Elastic and though I haven't personally worked on the implementation, the performance is phenomenal.
They guarantee that the access to the collection itself won't blow up. If you access a non-concurrent collection from multiple threads, even this simple code can blow up: fooList.Add(52); Because internally, the List&lt;T&gt; code is checking an index and count property. A Concurrent collection protects against that. It does *not* magically protect you against your own bad logic. if (concurrentQueue.Count == 0) { ShowDialog("All done!"); ExitGracefully(); } That's not thread-safe. Something could be added to the queue after you check the count, but you'll exit anyways.
Thanks!
I'll take a look at this this afternoon, seems promising :)
Ahh! While in the shower this morning I was thinking about trying what you mentioned! I have seen some places declare the bool as volatile, would that be wise in this case? 
Elastisearch uses lucene under the covers... I wish there was more support of lucene.net, because frankly, it's awesome
Whenever I'm testing out code I just make a Console Application. I type "cw" + tab + tab and it creates Console.WriteLine() and it will show up in simple console when debugging
This is true. One of the downsides to using this pattern.
XSocket.NET is great, it was my first option when I gave up SignalR. XSocket.NET gives you WebSocket and Long Polling as fallback, it has message brokering using a MVC pattern, and they are developing a way of improving scale out by establishing relationships between servers. The problems is, I didn't want all that jazz. As I said before, I do not want Long Polling, because when scaling out, it becomes a problem. Long polling is request-response based, and a websocket is a persisten full duplex connection, they are very different things and in order to support both seamlessly, things like the SignalR backplane or the XSocket.NET relationships (better than backplane) needs to be done. That said, if your browser does not support WebSockets, and you are doing a modern web app, you will have bigger problems than that. I hate polyfills :D. I don't like message deserialization ... because maybe I just want to forward the bytes somewhere else. I had a queues based architecture, and I just wanted a websocket endpoint where clients connects and gets/sends messages. You can still archive that with XSocket.NET by disabling the things you don't like, but still looked like an overkill to me. I just wanted a WebSocket endpoint that encapsulates the protocol and message framing, and gives me separate stream-like objects with the messages. From that point, I will build my own thing. For example, I put an example about how to use WebSocketListener and Reactive Extensions to build a chat: https://github.com/vtortola/WebSocketListener/wiki/Chat-application-using-Reactive-Extennsions-(RX), showing how cohesive is to have a little component. Of course, if you read about XSocket.NET and looks like what you need, do not hesitate because it will save you lot of time. I believe Uffe has put a lot of love in that project.
&gt; major issue for business because of licensing cost I haven't done anything with servers myself, but for all I heard the licensing cost is small compared to the money spent on actually running the server.
&gt; switch (GrassSt) &gt; { &gt; case GrassState.Growing: &gt; return Color.LimeGreen; &gt; &gt; case GrassState.Dormant: &gt; return Color.Tan; &gt; &gt; case GrassState.Grown: &gt; return Color.Green; At a glance... should this not be switch (GrassSt) { case GrassSt.Growing: return Color.LimeGreen; case GrassSt.Dormant: return Color.Tan; case GrassSt.Grown: return Color.Green;
oh god your application needs some optimizations, that would make program run faster and read easier :/ I will look into this and maybe give pull request. Code is unmaintainable, please name your variables appropriately and put some comments on why you are doing this :) 
No, his version is correct.
Cool man, looking forward to what you can brew up. On it, check back in a few minutes. K you can check it out now
Can't tell your problem from that code, but why do you have a public get properties for public fields? O.o Also, style guidelines for C# don't include type prefixes for variables. And I would call the enum GrassStates since it lists the possible values.
Imagine that those servers are certified for Windows 2008 but not for Windows 2012, then probably somebody will raise a concern and will ask for new servers. You may go ahead by installing Windows 2012 on uncertified hardware, but that may mean put your ass in the bulleye if something goes wrong. As stupid as it sounds, I have seen this before.
That still falls under maintenance and not licensing though :P
As I see it, it is not maintenance, since the current hardware and operating system are working fine :D You may be right though, the thing is that monies have to be spent in an upgrade.
LinqPad is the way to go for very simple, scratch code. Super powerful, Super easy, and very reasonably priced.
&gt; create a new child task using the synchronization context of the UI If you will use Control.Invoke (for example resultTextBox.Invoke(action, value)) for Windows Forms - then that means UI update action will be executed on already existing UI thread and no child task would be created. This should be preferred way to interact with UI from another thread.
Holy crap, all this time... Literally years.
Too many people ignore the usefulness of unit tests as a code scratchpad. If you are in a situation where you are wondering how a chunk of your code is behaving, write a test for it! You not only get to check your assumptions and verify the correctness of your code but you can debug unit tests and review the specific code paths they check much easier than having to keep modifying a console app.
Fair enough
Console applications are good. You can also add a test library and run/debug functions individually.
How about test cases using a C# test project?
Well yeah. That is pretty obvious. The instant you access count, though, is guaranteed to be the number it returns. That doesn't mean the next line executed could change the Count. You need to do proper locking. Not sure if you were being silly or serious about the "blow your mind" part. It doesn't blow my mind. It's expected behavior. How could a class protect against external, poor logic? It can't. That's just all there is to it.
You know, it's a "more advanced" technique, but I actually use NUnit for the purpose of "seeing if it works". It's useful because usually "seeing if it works" is equivalent to "testing that it works", so I'm killing two birds with one stone.
Actually, I think GrassState is the correct name here: http://msdn.microsoft.com/en-us/library/4x252001(v=vs.71).aspx
Solar is lucene bases search app that you talk to via a rest api (pretty sure). Try checking that out
Not for free - you pay with your e-mail address. If it would be free they should just host it public.
Sorry perhaps i should have been more clear, the code is in this link http://hastebin.com/efilehujir.tex 
&gt; I'd love to be reviewed by someone like you. Feel free to post your code.
Bosses wouldn't like that, although I do have my one project (from a little over a year ago) on GitHub. https://github.com/FallenWyvern/SteamVoiceDriver I'm a hobbyist that was hired because I proved I could produce code that met the needs of the company. I've gotten much better since that time, but I'd still be interested in what you think.
This looks very interesting. The linked article doesn't seem to mention the fact that this library comes with a whole load of functions for drawing mathematical data too. The automatic parallelization sounds like a brilliant idea too. In terms of performance, it would be interesting to see how this library stacks up against the Yeppp! SIMD library.
&gt;Silly. :D It's hard to tell on the Internet ;_; &gt;Async/Await, Tasks, and Concurrent collections all make multi-threaded code easier -- but it's still hard. So very very true.
Your explanation is hard to follow - your description doesn't seem to match your example. Do you mean something like this? public abstract class ClassA { public object t; } public class ClassB&lt;T&gt; where T : ClassA { public ClassB(T obj) { obj.t = this; } }
Yes. But i want t to be ClassB&lt;T&gt; where T is the current derived type. So for ClassC : ClassA it would be ClassB&lt;ClassC&gt; t;. It doesn't necessary have to be a field (a method or property will suffice).
Can you give a more concrete example of what you're trying to do? It's difficult to follow with names like ClassA. There is an advanced technique you can use to get a derived type into the interface of a base class, but you should avoid it unless it's necessary. You might be able to get away with something far simpler if you explain what you're trying to accomplish in a clearer way.
Sorry for not being clear. I came up with a simple example: Let's say you have an abstract class called Animal. You also have abstract class Habitat&lt;T&gt; where T : Animal. We derived Animal and created Monkey. We also derived Habitat&lt;T = Monkey&gt; and created Jungle. Then we derived Animal and created Fish. We also derived Habitat&lt;T = Fish&gt; and created Ocean. So we have two animals Monkey and Fish and two generic types that contain each of them. I want all Animals to have a reference to their habitat so i could call Monkey.Habitat and it will return me an object of type Jungle (not Habitat&lt;Animal&gt; or something).
Thanks for the concrete example - I think I know what you're trying to do now. You can use a variant of the Curiously Recursive Template Pattern in order to sort of 'smuggle' the type information where you need it. Keep in mind that this only really works cleanly for a single level of inheritance and that these class definitions will have anyone else reading your code scratching their head for a while without some helpful comments! class Animal&lt;THabitat&gt; where THabitat : Habitat&lt;Animal&lt;THabitat&gt;&gt; { ... } class Habitat&lt;TAnimal&gt; where TAnimal : Animal&lt;Habitat&lt;TAnimal&gt;&gt; { ... } With these base classes, Monkey and Jungle look like this: class Monkey : Animal&lt;Jungle&gt; { ... } // Monkey is an Animal that lives in the Jungle class Jungle : Habitat&lt;Monkey&gt; { ... } // Jungle is a Habitat for a Monkey Inside Animal and Habitat you can use THabitat and TAnimal as stand-ins for the derived types.
Generics and inheritance don't usually mix well. I think that the solution should be as simple as declaring your derived collections generic as well. So Jungle will be a Habitat&lt;T&gt; where T : Monkey... I'm not in front of my computer but I believe it should work.
I use this. One down side is that the graphing part includes a GDI and OpenGL renderer. The OpenGL one has a lot of rendering issues because Intel won't implement their driver right.
Like this? I think this is the best you can do, since you *must* pass those generic parameters up the inheritance chain somehow (and C# doesn't allow multiple inheritance). using System; class A&lt;TB&gt; { public TB MyMethod() { return default(TB); } } abstract class B&lt;T&gt; : A&lt;T&gt; where T : A&lt;T&gt; { } class C : B&lt;C&gt; { } public class Test { public static void Main() { Console.WriteLine(typeof(C).GetMethod("MyMethod").ReturnType == typeof(C)); } }
Yea, that's why I think that services like Azure are going to grow :)
Hmm, just my preference then because it makes more sense to me when it's plural. But for that I follow the one of not prefixing private fields with _ :D
Does ILNumerics run on Mono, for Linux? I can't find any details on that on the site.
https://github.com/sacroiliac/genericPolymorphism Possible.... Highly unrecommended. Although I didn't use strictly abstract classes. Had to use Interfaces too.. I would highly recommend Resharper if you're planning on using this in any situation except for playing or testing, and wouldn't even recommend this in a business environment unless you had a serious business need and this was the **ONLY** solution.
I think it does but I don't use it with Mono.
Hello XVar: Your comments are intriguing. I wish I had all the time in the world to learn everything I want to learn. (sigh) The Winform application I'm working on now is really my first attempt at a full application (and it's a small one at that). After I finish with this application, your comments were interesting enough, that you've convinced me to try something in WPF.
CastSeven - thank you. I will definitely look into ListViews. If I can "group" data with a ListView, it may do the trick.
I couldn't get it running on 3.5 even though it is supposed to work. My goal was less straight Mono on linux than Unity's Mono, which I believe is limited to 3.5. I am disappoint as it offers some key functionality that would save me a buttload of time and effort.
If you just need fast calculations have a look at http://www.yeppp.info/ 
This example makes absolutely no sense. So Jungle can only contain Monkeys? No Lions? No Squids in Ocean? Fish don't live in Lakes, only Oceans? And why do you need the exact type of habitat from the animal? If all habitats are so different that you care what is returned, then why subclass them from Habitat at all? Might as well just have: class Monkey { Jungle Habitat; } class Fish { Ocean Habitat; } You need to re-think what you are really trying to achieve here and why. How do the animals need to interact with the habitat? If an animal requires specific properties from the habitat, than maybe you're looking for something like: interface Habitat { double Temperature { get; } } interface LandHabitat : Habitat { double Humidity { get; } } interface WaterHabitat : Habitat { bool IsSalty { get; } } abstract class Animal&lt;THabitat&gt; where THabitat : Habitat { THabitat Habitat { get; set; } abstract bool IsAlive { get; } } class Monkey : Animal&lt;LandHabitat&gt; { bool IsAlive { get { // I have no idea how monkeys work, not tested on a real monkey return Habitat.Temperature &lt; 50 &amp;&amp; Habitat.Humidity &gt; 10; } } } class SaltWaterFish : Animal&lt;WaterHabitat&gt; { bool IsAlive { get { // Again, I'm no fish expert, but at least the second half should be right return Habitat.Temperature &lt; 40 &amp;&amp; Habitat.IsSalty; } } } 
Thanks for example
Yeah, the example wasn't perfect, what i wanted to point out is that one animal can only have one habitat and that habitat may only contain one animal. When animals are created, they are assigned a habitat. So i wanted to write something in the Animal's code, so that it's derived classes could also work with derived generics of themselves.
Will try that
Thanks, this looks like what i need. I will try this. Edit: Yes, that was what i needed. The whole thing turned out to be pretty complex indeed, hopefully the comments i made will be useful later on.
Hi, this is Jonas – thank you for your interest in ILNumerics! ILNumerics requires .NET 4.0 at least. It runs with mono (x86), the visualizations require mono 2.6.10 and Windows.Forms as well as the System.Drawing assembly. For Linux, you may best start with the source distribution. It contains all the linux *.so binaries: http://ilnumerics.net/download-ilnumerics.html We don’t actively test on linux/mono. Support for x64 is experimental. **Please let us know any problems you may encounter: http://ilnumerics.net/mantis**
No problem. It was a fun little challenge. Hope it makes sense. 
WCF... game? Don't think I've ever seen those two words in the same sentence. I have never used WCF, but I am under the impression that it is designed to emphasize reliability over speed, where most games want the opposite.
Please open my eyes to another way of doing that. I don't really have any experience in programming. I'm making a poker game btw, I was thinking to make the server send some kind of a RoundStatus object to the client to process.
Ah, I was thinking of an FPS/RTS type game. Using WCF makes quite a bit more sense for a card game (although I still wouldn't). The alternative would be to simply serialize the necessary data and send it over a socket yourself. This would be about a million times easier and more straightforward than involving WCF.
OKay, I will have a look at sockets. Thank you :)
This is a pretty interesting article that might be more than a c sharp topic. At my job I have to do reviews, and I still don't know what to do. Though I have seen people who will do an impromptu meeting with the developers and the reviewers and they do the review there at someone's desk. 
You'll have lots of questions, don't ask them without taking a few minutes to try and find an answer yourself. The senior developers will want to help but they are busy too. When you go to ask, try to get what your asking straight in your head too, think about how you'd ask a question on stack overflow. Don't let that make you think asking for help is a bad thing at all, just think about what you're asking and how you're asking first.
And i tried what was proposed in the second link, but that gives me an error : "An unhandled exception of type 'System.UnauthorizedAccessException' occurred in System.Core.dll" Link to code -&gt; http://hastebin.com/coqopaquje.avrasm
I felt useless and slow at first, my boss later said he was amazed at how quickly I picked up on things. This feeling is probably a good motivator but just make sure it does not get you down, you are probably doing better than you think.
Just don't feel like you're too good to be there. Try to find out stuff on your own but don't be afraid to ask if you get stuck. 
Luckily that first sentence is followed by others that explain the point. 
Exactly. 
You've been doing freelance stuff for a few years, which means you've developed your own coding style and your own set of habits. Try to emulate the style and conform to the standards of the code you're going to be working in. Even if you don't agree with it, the tenured devs will appreciate it. 
Well, as always it depends what you're referring to. The language specification is a standard (Ecma and Iso), so as a general rule they can't go after anyone for implementing the specification. For aspects that are not part of a standard, the usual caveats of software patents apply. And, as always, if you have something you're actually worried about, consult an IP lawyer and not random people on the internet.
I agree, I manage and mentor some new devs when they join and while I am very patient with the ones who ask something every 2 seconds, after about 3 weeks of that I have to sit them down and again tell them to 'stop, think, google'. If that doesn't work, then drop me a mail with their list of questions and I'll pop over to them later to address them all. Sometimes writing them in a mail and explaining it to me is enough for them to grasp the problem and see it from another angle or generate better search terms for their problem, and I don't need to do anything. About 3 weeks is all I could spend on hand holding of that nature with devs of that kind without it effecting my own work. Luckily they are few and far between and after a month or too most devs are up to speed and I just stop by them once or twice a day and ask if I can help with anything.
[KeePass Password Safe v2](http://en.wikipedia.org/wiki/Keepass) is open source and written in C#.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Keepass**](https://en.wikipedia.org/wiki/Keepass): [](#sfw) --- &gt;__KeePass Password Safe__ is a [free](https://en.wikipedia.org/wiki/Free_software), [open source](https://en.wikipedia.org/wiki/Open_source), [cross-platform](https://en.wikipedia.org/wiki/Cross-platform) and light-weight [password management utility](https://en.wikipedia.org/wiki/Password_manager) for [Microsoft Windows](https://en.wikipedia.org/wiki/Microsoft_Windows), with unofficial ports for [Linux](https://en.wikipedia.org/wiki/Linux), [Mac OS X](https://en.wikipedia.org/wiki/OS_X), [iOS](https://en.wikipedia.org/wiki/IOS), [Android](https://en.wikipedia.org/wiki/Android_(operating_system\)), and [Windows Phone](https://en.wikipedia.org/wiki/Windows_Phone). KeePass stores all usernames, passwords, other fields, including free-form notes, in a securely encrypted database, protected by a single master password or key file. Unlike many other password management tools, by default the KeePass encrypted database is not stored in the cloud, but strictly locally, for added security. &gt; --- ^Interesting: [^KeePass](https://en.wikipedia.org/wiki/KeePass) ^| [^List ^of ^password ^managers](https://en.wikipedia.org/wiki/List_of_password_managers) ^| [^Password ^Safe](https://en.wikipedia.org/wiki/Password_Safe) ^| [^List ^of ^C ^Sharp ^software](https://en.wikipedia.org/wiki/List_of_C_Sharp_software) ^| [^Alphabetical ^list ^of ^filename ^extensions ^\(F–L)](https://en.wikipedia.org/wiki/Alphabetical_list_of_filename_extensions_\(F%E2%80%93L\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chesesk) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chesesk)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
It's good advice. Spending a few minutes thinking out loud about a problem usually helps you solve it on your own. It's called [Rubber Duck Problem Solving](http://blog.codinghorror.com/rubber-duck-problem-solving/). 
It's often more about the parts external to creating code, than the code. Source control. Processes. Deployments. Documentation. 
As far as I know, the case isn't over yet as they still got the "used for something good" (or something like that) to decide about. In terms of mono, Microsoft signed an agreement not to persecute them, afaik.
You're wrong. Nothing is worse than devs who throw up their hands and roll over and die when things get tough. All I ask from my devs is that they can explain to me their thought process, and what they tried. I'm not going to do your job for you, but I'm happy to help remove obstacles. There is a very fine line difference 
You are new. You will make mistakes. Don't make the same one twice. 
What I got from it was instead of just pestering them over and over, start by maybe seeing if you can figure it out yourself. If that doesn't work, make sure the question you are going to ask is clear, so they can help you efficiently. TL;DR Take a minute to see if you can answer it, if not, make sure it's a thought out question.
Remember that OP is NOT always a faggot.
I would recommend carrying around a paper note pad and take notes when talking to coworkers about work stuff. Always carry it with you. It makes you look busy and professional and actually comes in handy. Just do what you can to get along with everyone.
Unless they are completely lame they know you are green. Try to familiarize yourself with the stuff they assign you to work on. As long as you are doing everything you can to perform your job you will be fine. A good dev creates a thirst within to learn and better his kungfu.
&gt; Msft gave Xamarin its internal .NET test suite so that Xamarin could validate its implementation of the APIs using Microsoft's own tests. This is not something a company planing to sue would do, don't you think? That's good to know, thank you!
Lots of great advice already. Think. Ask questions. Show an interest in what others on your team are working on. Get familiar with your codebase by reading code, watching commits. Distinguish between objective criticism and subjective criticism (code complexity / performance vs. style / naming). Accept both kinds of criticism, but mull over the subjective stuff for awhile to see if it makes sense. If it doesn't, don't be afraid to ask for clarification. Be humble. Be confident. Go out of your way to engage your team; we software developers tend to be an introverted bunch. Buy everyone donuts on Friday. Have fun!
Microsoft published the [Open Specifications Promise](http://www.microsoft.com/openspecifications/en/us/programs/osp/default.aspx), which is a legally binding document. No ambiguity here.
Thanks! Is this different from the [Community Promise](http://www.microsoft.com/openspecifications/en/us/programs/community-promise/faq/default.aspx), which doesn't cover copyrights (3rd from the last Q&amp;A)?
I have no idea, and I'm afraid you'd need a lawyer to answer that. :-/
On the one hand, good on you for releasing your source. On the other, that code (and the code of your other projects) has several obvious and easy-to-fix problems... Here is my "5 minute code review". I only just barely scratched the surface with this... * You are including several files that you should not be: .suo, and .user files * Underscores in your assembly name / namespace? * Please stop using "frm" to prefix your forms. This is (sort of) hungarian notation, which itself is [widely frowned upon](http://en.wikipedia.org/wiki/Hungarian_notation#Notable_opinions). Even then, you're not doing hungarian properly as you are adding the prefix to a class - which is even more brain-addled than hungarian itself. * Form1.cs needs a better name * Resources.resx is superfluous * App.Config is superfluous * 6 unused references * use 'var' And I just did one file - Crypto.cs. I could do others... but perhaps this is a good starting point. * line 2,3,5 superfluous using directives * line 16 Rand field should be read-only * line 74-77 loop can be a string.Join * line 134-135 should be ? operator * line 155-159, 173-177 redundant catch 
When someone asks you a question, don't blow smoke and fumble about giving a half answer. People will realize and you'll look stupider than if you admit you don't have the answer. If you don't know, just say "I'll check on that and get back to you asap" or simply say you don't know. Nothing is more annoying than someone who won't admit they don't know something because of their stupid pride. Check you understand the common design patterns. In my (20 year) experience developers talk less in patterns than textbooks would have you believe, but they'll certainly come up. Make sure you're solid on methodologies (particularly Agile which has been flavor of the month for a while now - Scrum, Kanban and XP would be a good thing to read up on if you haven't done so before).
Never had that problem, but as a workaround you could try drawing I on the main part and then just moving it inside the tab using the source.
How would I go about that ? I've tried moving the xaml to be within the &lt;tabitem&gt; but that just threw errors, I tried moving it using the designer and it either jumped to the tab control (meaning it showed up on all 4 tabs) or just deleted the tab.
Are you trying to add data items to the tab view or add sub controls inside each tab? Also, don't try to edit WPF visually, just edit the code. Xaml is quite simple and straightforward. Trying to drag controls around to design things visually is an exercise in futility. Just type the Xaml by hand and only rely on the designer as feedback, don't ever try dragging things around, it's much harder than just typing. If you're trying to add data items without data binding, that also is not how to do WPF. Make sure any data items via data bindings. Manipulating WPF controls as if they are Winforms is technically possible but much much much harder than doing it via data binding, with a bit more learning curve. One learned it's so much easier. I can't stand Winforms, data bound WPF is much easier and faster to get working once you use it the "right" way and don't try forcing it.
What were the errors? Are you sure you copied everything into it and didn't forget any closing tags?
Did you try compiling it? Maybe it just didn't update.
Isn't this more of a password generator, and not a manager?
Whatever your ticketing system is (Jira, Bugzilla,...) you want to strictly follow process and have it rule everything that you do. You don't know this yet and the natural reaction is to hate any new system that "controls" your life. Once you submit, though, everything will be easier. So much easier. Don't resist.. That's it... Submit. Your it's wife now, Dave.
:p . what can i say. any way thanks for all these suggestions. I'll try em.
Save and backup your emails. Take good notes and back those up too. Also, develop a thick skin and be a good listener.
&gt;The senior developers will want to help &gt;Don't let that make you think asking for help is a bad thing at all
It should work. Are you running it as admin? Seems like your user has no access to read the file in that folder.
The other 50% of code was from C# channel on Quakenet :)
WinForms? WPF? GTK? Something else? What did YOU try already?
I disagree too. Ask questions, but just don't ask the same question twice. Remember as much as you can, so use the method(s) that have helped you do that most productively in the past, be it writing it down, typing it down, just remembering it, bullet points. Oh yeh, and don't ask the same question twice.
What the hell are you calling that needs to be done at 1 MHz? 
If this is your first development job, your manager and coworkers don't expect you to be immediately productive. They will however, expect expect you to learn, and to devote yourself to being a contributing member of the team as quickly as you can. Learn everything you can, this position sets the trajectory for the rest of your career. Good luck!
Sounds reasonable, thanks
Entity component system in a game engine. There are a lot of calls like Entity.Components.Get&lt;Renderer&gt;() which basically obtains a component from a dictionary, based on a type. I thought if storing reference to some of most used components would increase performance.
If you have performance issues, then don't try to **guess** where you could improve performance. **Use a profiler.**
Try not to take work home with you. It's tempting in the beginning to work 24/7 whether you're paid or not. Find a healthy balance.
Write some code that tests each approach. Iterate a few million times and use the Stopwatch class to find out how long each takes. Should take you less than 15 minutes to find out.
If you don't mind I'd like to offer another suggestion: use version control. Preferably git. Preferably github or bitbucket. If this project was on github I would contribute to it - ie make those code review changes into a pull request that you could easily merge if you so chose. P.S. Thank you for taking criticism well - many people would be offended to have random strangers critique their code!
You're absolutely right! I'm sorry, I totally misread the source code. I thought it's both times the same variable. :-) Thank you for this correction! I edited my response.
You have got some pretty good suggestions from other users overall. The only thing I want to add is: **please do not store the master password!** Even encrypted it is a bad security practice: you are much better off hashing it and storing the hash, which you can then compare to the hash of the password entered by the user. 
I haven't seen a decent C# profiler that isn't really expensive.
Yeah It wont compile.
*really expensive* is a really subjective thing.
Hundreds to thousands of dollars.
To a business it might be peanuts for what it can achieve sure, but to an individual its expensive.
Very weird.
Just keep working at the xaml. I wouldn't use the designer in a million years, it's MUCH slower than just typing out some xaml, but typing the xaml directly does have a bit of learning curve. That said, doing things like setting the data context, using control templates or data templates is much easier directly in xaml than via the designer. The nice thing about using xaml directly is you know exactly where you're working, since you can see what parent/outer xaml elements surround the position of where you're typing. It's much less clear with the designer, which I think is where you may have been running into trouble.
Java API copyright decision?
I wouldn't use a separate class for that. I'd probably have one class that does all the io and another that does all the text processing.
Having small classes it's not an issue, it is actually a good thing (refer to the **single responsibility** in the [SOLID design principles](http://www.davesquared.net/2009/01/introduction-to-solid-principles-of-oo.html)) However from what you described the class, even if with one method, would be specific as it will open a file, read from it and possibly many other things. It would be better to abstract these things into another class (or several) and make the header class use this functionality instead of baking it in.
I wouldn't be surprised if anything i'm doing is wrong as long as i was going to compare it to Carmack's engines. :D
No, i'm not using Unity. This is my own game engine i'm writing in spare time for fun.
Meh, I would split it into some private methods maybe, but multiple classes seems over the top. It might just be File.GetContents for his purpose.
You get the text box it came from in the sender argument. You can insert text at the position of the caret using `textbox.Selection` and then move the caret to the end of it by moving the selection start. This is for WPF, but probably winforms too.
Still pondering, bear with me. This reminds me a lot of database normalization/denormalization. It is very possible to go too far in one direction or another. I am not learning csharp to write full fledged retail software products (like say an accounting system) Programming is a tool for me to *get shit done*. I *get* OOP for the most part, I get the concepts but every time I sit down to actually apply it to real solution, I always end up thinking...why would I do this? Just write a function (a reusable function I might add).
Since it looks more of an an exercise for OP I think it would be good for him to learn some good design principles even if it is going to be overkill for a simple app. I'm definitely against over engineering as well.
Features of program: Console app executed from Windows Explorer *Send To* menu option (Uses *that* directory as the working directory). Prompts user for a resulting file name, but if none is given, generates its own unique file name and saves it to the same working directory. Reads in a plain text file as the header (pipe delimited list of field names) from a predefined location. Optionally provide a command line argument to specify name and location of header file. Read all *.txt files in folder, strip out unnecessary header in each file and combine all as one file, pre-appending header file at the top. Optionally read first line of file, compare to header as a basic validation step to make an educated guess text file is in fact one we want to combine. 
Thanks for advice, will look into it!
&gt; One of the things it needs to do is go grab a one line text file that represents the header of the resulting combined files. If you're doing this just for funsies, could you maybe get rid of the one line text file? Your program would then load and parse the "uncombined" files and determine what the one line text file would say. If those uncombined files are in different formats, you could create different classes to contain the parsed data. For example, if you have a directory of .mp3s and .jpgs you could have mp3 and jpg metadata classes (one for song, artist, etc and another for exif data). I think that might be a good exercise. 
Ah, so I see what you're doing now. You could create a parsing class to help a bit. The parsing class could require a validation or format string (the line you read in the single line text file). The parameter for the parser's constructor would require the format string. One of the methods of the parser could take a file name, and return all the parsed data from the file if the file has the correct format or some error if the file doesn't have the correct format. Here's an illustration: ///&lt;summary&gt; /// Parses files with the provided format string. ///&lt;/summary&gt; public class Parser { ///&lt;summary&gt; /// Constructor. ///&lt;/summary&gt; public Parser(string format) { //split the format string and put the results in Headers } ///&lt;summary&gt; /// Gets the expected headers of the files ///&lt;/summary&gt; public List&lt;string&gt; Headers {get; private set;} ///&lt;summary&gt; /// Attempts to load and parse the file if the file matches the validation string. ///&lt;/summary&gt; public List&lt;Dictionary&lt;string, string&gt;&gt; Parse(string filename) { //foreach line in the file: // verify the line has the right number of columns // create a new dictionary for the line that was read in // foreach header in Headers // dictionary[header] = the corresponding element in the line // add the dictionary to the list of dicitonaries //return the list of dictionaries } }
If you're calling render on millions of objects, perhaps consider using an octtree to cull them first.
Thank you sir
Ahh I see :)
Basically Oracle trying to sue Google for daring to use Java with Android.
The Single Responsible Principle simple takes the concept of avoiding "God Objects" and pushes it to ridiculous extremes. You would be hard pressed to find an example of it in the .NET Framework.
Then try recommending some guidelines that are actually good. For example, the .NET Framework Design Guidelines or Code Complete.
Yeah, you're right. If you're just in the door in your first dev job, anyone there is your senior. 
why make methods and classes at all? why not just put all the code into one big ol' Main() and call it a day? when you know the answer to this question, you'll have the answer to your original question.
Is it because it is an OOP language?
Dottrace?
I have managed to [make it work in Mono](https://github.com/vtortola/WebSocketListener/wiki/Mono-support). Take it a look if you have time! Cheers.
My boss who took C in college 30 years ago, likes to read the comments in plain English, even if he does not know C# syntax. I have worked in places that you can't turn in code without comments, that would send it back just as if you had left half of the functionality out. so the value is that you do not have to type. Also, many QA people are not C# coders, yet a comment gives them some idea of what is happening. And if you do not like the comment text that Regionizer provides, you can change it to anything you wish, it is extensible. I already code faster because of Regionizer; if you currently do not write comments in your code, you are not going to impress any clients or potential employers if they ask to see samples of your code. This I can tell you from experience, I have been hired because of my coding style against candidates with college degrees and similar experience. I write comments above every block or line of code, I guess it just a coding style, but when you write code that is read by thousands of people in sample projects, you learn to write code that is legible and comments that explain what the code does. Code without commenting is ugly to me.
http://en.wikipedia.org/wiki/Separation_of_concerns
Commenting is good, I don't think anyone disagree with you on that point. Just that, commenting is suppose to explain abstract details you may not see from simply reading the code. This can't possibly be automated. Wouldn't this program mean you are trying to comment for the sake of commenting and not for it's actual purpose which is to convey important detail to another human coder?
As you will learn later in your studies, you will find that separating the functionality and behavior of your different objects will help you maintain and update your code as your program grows.
Ok. So it is more of house-keeping. Thank you. I look forward to getting there in my studies; hahaha.
It is also open source, so if any programmers want to learn Visual Studio Extensibility or how to customize Visual Studio, I invested 4 years off an on of learning how to work the Microsoft Environment.DTE , and Regionizer would save them weeks of research. If you think comments are useless, you will have a have a hard time finding a job, I wouldn't hire you. My teachers in college wouldn't even accept code that wasn't commented it, so I really do not see why anyone could be against commented code. 
I never said you have to stop writing explanations for detailed blocks of code. But about 80% of the lines of code I write are duplicative. If I am writing a new method or a class I still write that out by hand, or if I fix a specific bug or work item to modify the code I write that out by hand. But every time I write a foreach loop, I want to say, iterate the collection of '[Object Type]' objects. If I need to further write a line that says "To update the order details for each order' I still write that. I think you are against something without see the benefit. I own the domain name for Sudo Sharp (www.sudosharp.com - not live, a play on words for pseudo code, but with Sudo Sharp I plan on doing the opposite, write a comment and the code will be generated. This would make a great programming language for kids or beginners because it could be super simple syntax. I find it useful, maybe someone else will, again it is free; my Aunt rest her sole used to give me a green sweater every Christmas, I said thank you and donated to good will because I wouldn't be caught dead wearing it, but I still said thank you. The source code is useful to learn the IDE, the other features of Regionizer are also useful, and the commenting saves me time and I now have 21 items in the dictionary, and it is all free. So throw it away like a green sweater if you do not want to use it, but to criticize what you have never used is closed minded to me. If you learn how to use it, and it writes one comment for you that you didn't have to type yourself, then to me a free tool that does that is worth every penny. 
So the dictionary lookup is 10 times slower but still fast enough that it doesn't matter. 
Relevant Reddit Post: http://www.reddit.com/r/csharp/comments/24605q/i_bet_you_code_faster_after_watching_this_video/
Give it up. I tried to explain it to him already... But he doesn't **want** to learn. Here we had this already big and wide: http://www.reddit.com/r/csharp/comments/24605q/i_bet_you_code_faster_after_watching_this_video/ He **really believes** comments like this serve a purpose: // Iterate the collection of Customer objects foreach (Customer customer in customers)
Seriously, you're hopeless. I explained it to you already in your last posting.. Comments that give no additional information about the code are **wasteful** and **harmless**. What you write in comments I can see in code already. The comment is simply a **duplication** of your code. Nothing more. Nothing useful. Just a waste. Just bloating the code, potentially hiding importing information. Your boss who took C in college 30 years ago is simply an idiot. If he can't understand the C# syntax, he has no obligation to read the source code. Why would he? He can't change anything anyway. Leave the responsibility to the appropriate people: The C# team leader. Back in the old days C was a lot more complicated than nowadays C#, simply because you had less syntactical sugar and the whole programming field was more new. You had to comment way more than you do in a language as such C#. He apparently fails to adapt. &gt; I have worked in places that you can't turn in code without comments, that would send it back just as if you had left half of the functionality out. so the value is that you do not have to type. No comments is bad. But comments that give no additional information or context also bad. Comments should explain **why** you're doing something the way you do, not **what** your code is doing. **I can see that by looking at the code within seconds.** But why did you write it like this? Why did you use this pattern or that pattern? This is something I can't see immediately, this is something you should write down. &gt; Also, many QA people are not C# coders, yet a comment gives them some idea of what is happening. Exactly. QA people are not C# coders. They don't have to look at the C# code. Their purpose is to test the quality of the software, not write or check the code. This is what the programmers are there for. QA people are there for ensuring the quality of the software is good, they should make sure there are no regressions happening. &gt; And if you do not like the comment text that Regionizer provides, you can change it to anything you wish, it is extensible. You can't sensible create proper comments automatically. In the last thread I even gave you a test on how you could at least make a bit useful comments (pre- and post-conditions of a method). But you completely ignored this.. Probably because your software can't fulfil this. &gt; I already code faster because of Regionizer; if you currently do not write comments in your code, you are not going to impress any clients or potential employers if they ask to see samples of your code. &gt; This I can tell you from experience, I have been hired because of my coding style against candidates with college degrees and similar experience. If I would see someone code like this... I'd simply not hire him. It really is as simple as that. And I can assure you, this is the common thing. &gt; I write comments above every block or line of code, I guess it just a coding style, but when you write code that is read by thousands of people in sample projects, you learn to write code that is legible and comments that explain what the code does. Again, you do not write comments that are legible. Here is my favourite example again: // Iterate the collection of Customer objects foreach (Customer customer in customers) This comment serves **no** purpose. I read the comment: You're telling me you're iterating over a collection of customer objects.. I read the code: I see you're iterating over a collection of customer objects. Fuck, I waste time by reading this twice! You waste time by writing this comment! &gt; Code without commenting is ugly to me. Code without commenting is ugly. Code with useless commenting is even more ugly.
This. KISS.
The patterns for designing frameworks are necessarily different from applications. 
&gt; All that said, commenting is good. But it has to provide value. Exactly what I've been trying to tell him already last time! Comments need to provide additional information that are not clear from the code itself.
Thanks
Are you using relative or absolute values? The designer also has a different border width than the actual window which is another reason for using relative values.
Depending on what it does it could be reduced to an extension method. I personally love them, especially with Linq.
Came here to say this; concur 100%. IMO, comments are for *why* you are doing something, not *what*, and, furthermore, even that is best served by refactoring into a named method, i.e., rather than comment a section of code // Reorder inventory if this order make it drop below the reorder level make a method ReorderIfBelowReorderLevel(item);
Ahh now that is exactly the problem, when i run the application as administrator it works like a charm.
[LINQ](http://en.wikipedia.org/wiki/Language_Integrated_Query) async/await? IDisposable?
Something as simple as multiple per file and partial classes, it seems so basic but I really miss those when using Java. Of course .Net has tons of other very useful in certain situation features, like LINQ and how the runtime is basically built around reflection. But partial and multi classes are just so simple yet you miss them so much in other languages.
Don't forget the null coalescing operator, `??`. Very few major languages have one, and it's incredibly useful. For those that don't know, `value = input ?? ""` is syntactic sugar for `value = (input == null) ? "" : input`. The next language release will also (supposedly) have the null coalescing dereference operator `?.`, which treats `var x = a?.b?.c;` as `var x = (a == null) ? null : ((a.b == null) ? null : a.b.c);`
I do a lot of web scraping and my god does LINQ make this so much easier. Sometimes an XPath query just isn't enough of is just way too complicated/ugly. LINQ allows me to be more general with the XPath queries, then I can get the specific node or piece of innerText that I need with a basic string comparison or RegEx.
Do you mean .NET or do you mean C#?
Adobe Acrobat, you can use the trial version
Pretty much the same thing these days.
Ruby has this too with `||=`, it's a really nice feature and I wish more languages had it.
The patterns one uses for designing a math library are, indeed, different from the patterns one employs for designing a distributed API, and shouldn't cross over. Good coding practices are good coding practices, but design patterns, by their very definition, are patterns for solving specific problems in specific situations. Standard libraries vs an application are probably the prime example of this.
The Pythonic representation is: `value = input or ""`
Hey jmazouri, I just realized a complication that might come up, and I'm not really sure about how to handle it. I can get around it for now, but I think I may want to fix this. Using EPPlus, I cannot open an excel file that is already open and "in use." Is there a way I can check to see if the file is open and close it so that the EPPlus can use it? I can tell the people running the code to make sure the file is saved and closed, but after a couple of days they may forget to do that. Any suggestions would be helpful. Thanks, Matt.
Do what makes the most sense to you now. Worry about refactoring later if you have to change this code a lot.
&gt; var x = a?.b?.c; This will be a godsend for XML traversals...
Gracias.
C# and .NET are very tightly connected. C# was created for .NET and is probably the best language for .NET applications.
Unfortunately, there's no _exact_ equivalent in LINQ; the `Concat` method there combines two _collections_; it doesn't allow you to directly add a _single item_ directly without it already being in an enumerable. You _can_ wrap your single object in an array (or use `Enumerable.Repeat(Y, 1)` instead): for (var obj in X.Concat(new [] {Y})) for (var obj in X.Concat(Enumerable.Repeat(Y, 1))) Both of which are pretty ugly/painful if you do it often. However, if you use the [MoreLinq](https://code.google.com/p/morelinq/) library, it has an extension method that gives you the same syntax: for (var obj in X.Concat(Y))
Thank you sir. I'll go with your first example, for now.
You can iterate over x.Union(y) if you want! 
Mainly re: C# - Came here to say LINQ - My life as a programmer of 30 years+ is now chock full of linq boners. Also ConcurrentDictionary, IQueryable (in general), FUNC, ACTION (delegates in general), observable (reactive), Json.net, async, and the entire feeling of efficient strongly typed code, are all pretty damn great. Generally after going through all the main languages, hating on Microsoft for years, I've got to admit - there's nothing quite like C# / .NET EDIT: EXTENSION METHODS + interfaces !! when done right.
I feel like an idiot for buying Visual Studio 2012 right before Visual Studio 2013 comes out.
Visual Studio's Intellisense. Actually, VS compatibility with .net in its entirety. It's expensive as all hell, but my God do you miss it when it's not there. When I say "the IDE" as the best feature people often start saying "yeah but you can get all that with X, Y, or Z with plugins", to which I respond "yeah, but the time you spend tinkering with your IDE is time that I can also spend tinkering with mine, except I'm tinkering with compiler optimizations. Also the out-of-the-box refactoring option is one of the most useful tools I've ever used while developing. The IDE is the first thing you see with .net, and it's just excellent and (as far as I'm concerned - but I'm yet to use Java) is just miles ahead of the competition. That's before you get to the debugger! I don't know if any of you have ever tried to debug PHP before...
Thank you. I'll do some more research on this. Have you personally used this tool?
Thank you. What would you recommend from personal experience? Have you worked with Adobe Acrobat before?
this will happen all the time now since they switched to a yearly schedule.
My experience with linq to sql has been pretty negative since it's mostly unnecessary (also we use an extremely powerful data model). And since LINQ has two different syntax styles, the one used in most SQL type examples is pretty darn ugly IMO. [Dynamic LINQ](https://dynamiclinq.codeplex.com/documentation) may help you get some things done as well. Example of the two styles, I prefer the first by miles. var title = entries.Where(e =&gt; e.Approved) .OrderBy(e =&gt; e.Rating).Select(e =&gt; e.Title) .FirstOrDefault(); var query = (from e in entries where e.Approved orderby e.Rating select e.Title).FirstOrDefault(); That said, LINQ to objects is extremely powerful. I use it for XML because I deal with them so often. Eg. This one line of code is fairly powerful. var candidates = element.Descendants().Attributes().Where(x =&gt; ValueMap.ContainsKey(x.Value));
Does the location of the compiled assemblies really matter for debugging? They still exist, they're just in-memory instead of on-disk.
I was glancing at a Ruby on Rails book and the section about setting up your development environment mentioned TextMate. That was where I put the book down and decided to ignore that language for now. VS ability to Find All References, Extract Method, or simply just Rename a variable, class, or namespace without breaking the entire project is nice.
I've not worked with Acrobat in years, but it's a one time creation tool that's not accessible from code (that I know of). I've worked with Active Reports (way back in COM), and DevExpress Xtra Reports (using currently). Xtra Reports is very good, and allows you to create very powerful reports in an application. You can then export them from the report viewer, or directly from code without any user interaction (to PDP, DOC, DOCX, HTML, XLS, XLSX, etc). All of the ones I mentioned have demos so you can download and try them. 
[This not nearly enough information to answer your question.](http://ericlippert.com/2014/03/05/how-to-debug-small-programs/)
As FizixMan suggested, foreach (var obj in X.Concat(new[] {Y})) is probably the most idiomatic way, and the one I would recommend. Here are two alternatives, just for instructional purposes. public static IEnumerable&lt;TSource&gt; Append&lt;TSource&gt;( this IEnumerable&lt;TSource&gt; sequence, TSource last ) { foreach (var element in sequence) { yield return element; } yield return last; } public static TSource[] Append&lt;TSource&gt;( this TSource[] array, TSource last ) { var length = array.Length; var result = new TSource[length + 1]; Array.Copy(array, result, length); result[length] = last; return result; } 
In the last screenshot, what is the value of responseFromApi? My guesses are - null or the empty string - invalid JSON - valid JSON that does not match your RootObject model Also, asampson's advice is good advice.
Having recently used Java, the big one for me is event handling. In Java you have to use the observer pattern (essentially using interfaces, objects that implement the interface and a function that accepts the interface to register the callback). It felt very cumbersome. One thing that would be nice to see in C# would be anonymous in-line classes. That's kind of how I got around eventing in Java.
Oh Visual Studio.. How I miss you while using Eclipse for Java at school.
Take it back to Best Buy, you should have a 30 day return policy and they will... oh wait. This isn't /r/tablets, /r/Surface or /r/gadgets... Sorry. Nevermind... 
Which is why I'm sad to see the `items.$key` isn't making into C#6 after all
Hi there. It seems you're sad. I can't tell if you're messing around or you're serious, but if you need someone to talk to, my master is always available for a chat. Either way, I hope you feel better soon! ^^Created ^^by ^^/u/laptopdude90 ^^V2.1
exactly?
You can make objects of anonymous type in C#, but unlike in Java, such objects cannot implement an interface.
can you use intellij idea? their ide is pretty decent (used it to make a couple android apps before android studio, which is based on it)
no they are valid ... until it goes to object..... ReponseFromApi it gets all the ticker details.... This is driving me crazy .... Stayed up for hours
What is the *actual value* of the string responseFromApi when you get this error? What are your definitions of TickerLtcEur and TickerBtcEur?
The ticker as a string form, with all the values of the ticker from the JSON, it could be the root object model or the ticker model which i'm posting right now TICKER ---------------------------------------------------------------------- using System; using System.Collections.Generic; using System.Linq; using System.Text; using Newtonsoft.Json; using System.IO; using System.Net; using System.Threading; namespace Crypto_Live { public abstract class Ticker { private decimal high; public decimal High { get { return high; } set { high = value; } } private decimal low; public decimal Low { get { return low; } set { low = value; } } private decimal avg; public decimal Avg { get { return avg; } set { avg = value; } } private decimal vol; public decimal Vol { get { return vol; } set { vol = value; } } private decimal vol_cur; public decimal Vol_cur { get { return vol_cur; } set { vol_cur = value; } } private decimal last; public decimal Last { get { return last; } set { last = value; } } private decimal buy; public decimal Buy { get { return buy; } set { buy = value; } } private decimal sell; public decimal Sell { get { return sell; } set { sell = value; } } private decimal updated; public decimal Updated { get { return updated; } set { updated = value; } } private string server_time; public string Server_time { get { return server_time; } set { server_time = value; } } public Ticker() { } public Ticker(decimal high, decimal low, decimal avg, decimal vol, decimal vol_cur,decimal last ,decimal buy, decimal sell, decimal updated,string server_time) { this.high = high; this.low = low; this.avg = avg; this.vol = vol; this.vol_cur = vol_cur; this.last = last; this.buy = buy; this.sell = sell; this.updated = updated; this.server_time = server_time; } } } -------------------------------------------------------------------- INHERITS FROM TICKER using System; using System.Collections.Generic; using System.Linq; using System.Text; using Newtonsoft.Json; using System.IO; using System.Net; using System.Threading; namespace Crypto_Live { public class TickerBtcEur:Ticker { private CryptoType type; public CryptoType Type { get { return type; } } public TickerBtcEur() { } public TickerBtcEur(CryptoType BtcEurTyp, decimal high, decimal low, decimal avg, decimal vol, decimal vol_cur, decimal last , decimal buy, decimal sell, decimal updated, string serverTime) : base (high,low,avg,vol,vol_cur,last,buy,sell,updated,serverTime) { this.type = BtcEurTyp; this.High = high; } public static RootObject DoRequest() { WebRequest request = WebRequest.Create("https://btc-e.com/api/2/btc_eur/ticker"); request.Credentials = CredentialCache.DefaultCredentials; HttpWebResponse response = (HttpWebResponse)request.GetResponse(); Console.WriteLine(response.StatusDescription); Stream dataStream = response.GetResponseStream(); StreamReader reader = new StreamReader(dataStream); string responseFromApi = reader.ReadToEnd(); RootObject obj = JsonConvert.DeserializeObject&lt;RootObject&gt;(responseFromApi); reader.Close(); dataStream.Close(); response.Close(); return obj; } -------------------------------------------------------------------- ROOTOB
ROOTOBJECT using System; using System.Collections.Generic; using System.Linq; using System.Text; using Newtonsoft.Json; using System.IO; using System.Net; using System.Threading; using Crypto_Live___; namespace Crypto_Live { public class RootObject { public TickerLtcEur l { get; set; } public TickerBtcEur b { get; set; } } }
I'm asking what the value of the variable responseFromApi is. For instance, in your first screenshot you can see the variable responseFromServer in the Locals window. In the Value column, it starts "{\"ticker\":{\"high\":322 This is the value of the variable responseFromServer. You need to look at the value of responseFromApi, and figure out why it is not being deserialized into a RootObject. Read over the example [here](http://james.newtonking.com/json/help/index.html?topic=html/DeserializeObject.htm). Do the field names in your JSON match the property names in your classes? Do the data types match? 
It's for speed from the sounds of it. So roslyn can keep compiling as you code.
yes they do .... Il take a look at the example you gave me.... Thanks for your help
bizspark. Get it free. 
It's not just for SQL... it's really for everything. Example: SomeObjectCollection.FirstOrDefault(x=&gt; x.id==123 &amp;&amp; x.InnerListOfSomething.Any(i=&gt;i.total&gt;3)); That's a pretty powerful thing to be able to do. Basically it allows you to query anything, even html from a scraped site: var title = html.Walk&lt;HtmlContainer&gt;().FirstOrDefault(x=&gt;x.Name == "title"); I was a bit frightened by the lambdas at first, eventually it just feels like home. re: Data I use the mongo C# driver, and have basically laid down my own framework on top of that.. to query I do things like this: var children = Threads.I.Where(x=&gt;x.ParentId == obid).OrderBy(x=&gt;x.UtcCreated).ToList(); (it knows the collection, the caching, and deserialises (if not in cache) objects, then populates any properties, syncronises any inner objects.. all in &lt;1ms for a collection with millions of rows..) I used to use LLBLGEN / SQL -&gt; I have never been happier.
I do both, as well as objective-c. Visual Studio is so far ahead of the java IDEs (eclipse is a joke, IntelliJ is great, but nowhere near VS) yes, Resharper makes it even better, but even without it, Microsoft's tooling is better. then there's the language and platform itself. It's obvious that Microsoft is investing a lot more to move c#/.Net/VS forward
I think this should get much more attention from /u/Short_Teeth so he actually learns something valuable and important.
The author of NodaTime would smash you for saying that the framework handles time well haha 