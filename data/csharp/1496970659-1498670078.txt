Thanks to all of you for your comments! As soon as I have a chance I'll change my code with your suggestions
Microsoft would prefer you didn't abstract it away and just use EF. However, people in the real world know that we may want to switch out our database stack, hence we use the Repository pattern.
Thank you for the comment again! :) I have checked a lot about async-await related resources! As you said, calling .Result on running task(or async task) will block current thread. About ConfigureAwait(false) is to gain performance. basically await captures current context for later execution, but by calling ConfigureAwait(false) it does not hold any conext and gain some performance!, so actually, the project will run even without them! I really impressed by this blog(which explains async-await in IL level) https://weblogs.asp.net/dixin/understanding-c-sharp-async-await-1-compilation Hope you enjoy this too! Maybe I missed some important things, will check resources you offered! Thank you again!
This is a solution for an abstract base class.
Start up the example identity provider and use that to test against. Like I said if you start up both the example identity provider and the example service provider you can monitor the communications between the two sites using something like fiddler. However you can also just test without any ssl at all which is how they have some examples configured. Try to get the bilateral communication working first then once you have saml working you can switch your focus to signing things.
Agreed, implement it in an abstract class then have everything else inherit from the abstract class. 
There's a proposal for exactly this to come in C# 8. For now anyway you can extend from the original interface, and implement the new one where you need this new method, or if you actually want a default implementation everywhere there's not much to be done: You can add an extension method on the interface instead but it won't be polymorhpic.
In what phase of development are you? From a philosophical point of view, an interface is a contract. Classes that implement an interface are signing the contract. You should not go and change the contract under them. Now if you are just starting your coding and realized that your contract wasn't as well defined as it should have been, then fine, change the interface. If you are 'maintaining' code, I would not change the interface, I would define a new interface and have the classes that you need to change implement that interface as well. Basically, don't chance all the code, just chance the code you need to change.
Use it all the time. Paid once a few years ago like 30 or something. Use it for adhoc SQL reports (exports nicely to excel) general SQL queries and also wrote tons of little scripts and saved them to do different reports or "fixes". Also use it to prototype stuff or nuget packages. It's very very powerful and most people probably don't use it's advanced features
Maybe they already inherit something else. 
Okay, how (if possible) would I start ```MyTaskAsync() ``` at the beginning of main? Sorry I don't know async very well. My assumption is I write ```Task myTask = MyTaskAsync()``` and then await myTask as necessary?
You're right. Me as a first time Twitter user I started following literally all the developers possible and it turned out to be totally noisy and I lost my interest in it. I came back after a while and unfollowed and muted most of them and I also do this ritual on and off. I also kept some people because of shit posts, flame wars and fun content (mostly on software development), which mostly sums up why I use twitter.
The crop completely encompasses what I'm talking about. It's not a code question anyway.
Async tasks aren't parallel, its still being executed on a single thread. If you want to kick off a task and then wait for it somewhere else, you have to wrap it in `var task = Task.Run(async () =&gt; await MyTaskAsync())`.
In order to get an really intuitive understanding of how all this works you should imagine the program flow as it is *actually* happening (after having been transformed by the compiler). I'll simplify it a tiny bit: - Every method that contains an `await` is split into two or more parts (part before the await and part after the await). - The first part of the async method is executed normally, in sync(!) just as if no async were involved at all. - Now the await is encountered and it will retreive the Task (basically the first await inside the method (MyAsyncMethod) will yield a task which gets instantly returned). Now we're back inside `Main()` and we have a task, and thanks to the compiler you're calling task.ContinueWith(...) on that returned task. To answer your question: Yes, your task gets called immediately and is awaited. When the Task.Delay fires its continuation (which is empty since its the last line in `MyTaskAsync`, but still) the task will complete (and by "the task" I mean the task that got returned from MyAsyncTask to Main). Now inside Main the task is complete as well and Main() executes its second part (The comment part "Do more stuff", which is also empty).
Yes, the way you wrote it is exactly correct. You would "start" the task like this `Task task = MyTaskAsync();` but you are not guaranteed that whatever you are calling won't still block you! If someone writes their code wrong, then you will get blocked anyway. This is not *supposed* to happen, but its possible when someone "below" you does stuff wrong. Ok let's take a step back though and work with the assumption that all the async code is correctly written and there is no nonsense anywhere like someone writing `Thread.Sleep(...)` instead of `await Task.Delay(...)`: By doing `Task task = MyTaskAsync();` your task is now "running", in your case that means the Task.Delay() has registered a timer that will fire as soon as its time is up to execute the continuation, but you are not awaiting it. You are merely saving the task (which may or may not be complete yet) into a variable. Now you can do more things, maybe start more Tasks, maybe do some blocking code... whatever. But later you might want to access the result of the task (in your case there is none, its just Task, not Task&lt;int&gt; or something...) or check if the task is finished (ie: the timer is done). Then you can still do `await task;` to wait for the remaining time. (Assuming you did some other things after starting the task and that took you 500ms, then you would obviously still wait the remaining 1500ms when calling `await task;`) There are many gotchas when doing things like that though! - If the work in your task is limited by how fast your CPU is, then your "total" time (if you were to measure that) wouldn't decrease. Unless of course your code can be executed in parallel and you have multiple cores in your CPU... that one should be obvious though. - Someone further down (a method you're calling) does not conform to the rules of async programming. For example a library you are calling could do File.ReadAllText instead of using an async version, then everything will block (in the best case) or you could even get dead-locks in the worstcase. 
Ah, you mean in the editor, not actually setting the color of an element.
That makes a lot of sense. Do you know if the 2nd half of the function after the await (the continuation, right?) executes on the same thread as executed the first half of the function, or if it happens on the ThreadPool thread that ran the task?
No, for the moment there are 6 levels of fatness. There uses to be 5
http://blog.stephencleary.com/2012/02/async-and-await.html
I knew that already but thanks, (I actually pointed main not being able to be async in the OP) 
Hmm, thanks for the 'gotcha" I'll try to remember that
This was a very good explanation, thank you.
Best Practices for async/await and understanding why they are Best Practices helps a lot: https://msdn.microsoft.com/en-us/magazine/jj991977.aspx?f=255&amp;MSPPError=-2147217396
Async all the way As mentioned here: https://msdn.microsoft.com/en-us/magazine/jj991977.aspx?f=255&amp;MSPPError=-2147217396
Here are my quick 2-cents: - In some cases you assign strings a value of `""` but in others you assign `string.Empty`. Is there a reason for this? If not, I would suggest only using `String.Empty`. - I would also name all class-level members to begin with a capital letter (ex. `pollKey` -&gt; `PollKey`). - I would create a constant called `MaxAnswers`, so: `public string[] answers = new string[MaxAnswers];` and `for (int i = 1; i &lt;= MaxAnswers; i++)` and `if (DataGridViewAnswers.Rows.Count &lt; MaxAnswers)` and `$"You cannot exceed {MaxAnswers} possible answers"`. - Instead of having 0 where you intend to check for no correct answer, replace it with a constant called something like `NoCorrectAnswer`. - `if (!correctAnswer.Equals(0))`: I would change to `if (CorrectAnswer != NoAnswer)` - You declare `public string duration`, but are you using it anywhere? - Why is `answers` public? If there is a good reason for it to be so, I'd have it be: `public string[] Answers { get; private set; } = new string[MaxAnswers];`
[Unless you set one](https://msdn.microsoft.com/en-us/library/system.threading.synchronizationcontext.setsynchronizationcontext(v=vs.110\).aspx). There are valid reasons for doing this such as maintaining a single thread connection to some external resource. It is actually possible to operate multiple different contexts in the same application. This is surely way more detail than most devs care about though. more background: https://msdn.microsoft.com/magazine/gg598924.aspx 
Removed: Rule 3, Rule 4. (IIRC, Unreal Engine is C++)
I just completed the async programming course on pluralsight. It was very enlightening. It covers the topic in general without async await and then shows how you can make the code better with async await. It also shows best practices like exception handling and when not to use those key words because of compiler overhead. 
then tell me that too
No experience here on the best way but if you had to you could manually replace characters giving you trouble to remove them before passing to your formatter. Phone numbers can be tricky due to international numbers etc but still easier than address nightmares 
I'm just not thrilled with the look of the masked text box.
instead of being rude you should answer politely when someone asks for little help. in fact asking a real person is better than reading a page on web about the stuff the person wants because the real person can explain in many different easy ways plus it will revise them their knowledge. apart from that you are here to discus about programming language not on my grammer.
You could always obtain the source code and tweak it to your hearts content... Microsoft has released the source code for the .net framework. I have seen some sites that host the source code as well. Not to mention just using a decompiler on the .net framework to view the raw source code.
&gt; Standard C# conventions would have all private fields be camel case, not Pascal case. You're right, but I think it should be mentioned that C# conventions recommend static public &amp; protected fields be in Pascal case. &gt; Don't use the uppercase String, use string. Always prefer C# types over the framework types. While I wouldn't declare a variable using the framework type, what would be the downside to using `String.Empty` to `string.empty`?
ok. so enum does listing with labeling them. right?
Similarly, calling .Result on a task will block. (To the surprise of my coworker) 
I hear Stephen Cleary breathes asynchronously.
 C# .NET Core 2.0.0-preview1-005977 "System.GC.Server": true 
Where did you find this term?
Sure, you can think of an enum as a list of numbers with labels applied to them.
If you really need to, you can marry sync to async, as long as you know what you're doing. Unsuprisingly, Stephen Cleary has our back here again: http://blog.stephencleary.com/2012/02/async-console-programs.html https://github.com/StephenCleary/AsyncEx/wiki/AsyncContext
SQL Express might be slightly overkill, I would recommend checking out Entity Framework as it allows you to stick with the .NET programming and not worry about the SQL. EF handles the the underlying database for you, but there are indeed pitfalls you need to learn about. Yes, there's gonna be a lot to learn, but that's the current state of things. I've learned a whole lot about MVVM for WPF and Prism, Entity Framework, LINQ and how to handle XML in various ways with different APIs and I still very much feel like a beginner.
SECTION | CONTENT :--|:-- Title | JeremyBytes - Task and Await in C# - Part 1: Consuming Asynchronous Methods Description | There's a lot of confusion about async/await, Task/TPL, and asynchronous and parallel programming in general. So let's start with the basics and look at how we can consume asynchronous methods using Task and then see how the "await" operator can makes things easier for us. In future videos, we’ll look at continuations, cancellation, and exception handling. To download the code and get additional information, visit http://www.jeremybytes.com/Downloads.aspx#Tasks Length | 0:18:23 **** ^(I am a bot, this is an auto-generated reply | )^[Info](https://www.reddit.com/u/video_descriptionbot) ^| ^[Feedback](https://www.reddit.com/message/compose/?to=video_descriptionbot&amp;subject=Feedback) ^| ^(Reply STOP to opt out permanently)
People have to learn sometime. My coworker just caught this in one of my reviews the other day and it surprised me too. Happy to know now.
Guess this is more of a .NET question than a C# one. Anyway, it should be safe, as long as you are sure to change only values and not names. I think you'll have to recycle the App Pool for the changes to take effect. (Saving a .resx on a live site may even make that happen automatically. Not sure.)
I'm sure this is an easy Google search. Here's the first result I found https://msdn.microsoft.com/en-us/library/ms165337.aspx
Or worse, deadlock - depending on the type of syncronization context being used.
And this as well. His blog is awesome. http://blog.stephencleary.com/2013/11/there-is-no-thread.html
Buy his book, it's great 
Can confirm 
[removed]
Just a comment to check your assumptions. If I was using your form I'd enter something like +61 7 1234 5678 as that's an Australian international number. Other countries are different. You might want to think about what happens when an international person has to enter their number.
That is the typical problem scenario of mixing async and sync methods. If `AsyncMethod()` is itself awaiting another task, it will then try to continue on the synchronization context it was started with. But that context is currently being blocked waiting for the `task.Result`, which in turn won't complete until the async method can continue, resulting in a deadlock. It will work fine if there is no synchronization context (e.g. a console application) or if the code in `AsyncMethod()` explicitly ignores it (`ConfigureAwait`), but by default this will break e.g. in a WinForms application. Also, `Task.Run()` doesn't work like that, you probably mean `Task.Start()`. But `Task.Start()` generally isn't needed either since the task you get from `AsyncMethod()` will already be started.
I am not sure if any of my suggestions will work, so my apologies in advance, but these are some of the things I can think of off the top of my head.. Permissions issue? Or is that file marked as hidden? (Right click in file explorer, properties) Is it set to not copy? Right click in solution explorer, properties, we use this for local web configs, we set them to 'do not copy' so we don't mess up the prod web configs Is the file definitely not on prod? Is the Tilda messing it up? Are you running visual studio as an administrator, because Microsoft :)
How is this compared to NATS? Which has multiple language bindings.
Thanks. yes, I need to work on my consistancy,
I don't know enough about the reporting tech to comment specifically on it. My only thought is to remove _everything_ unrelated to the reporting, including the submission button (have it load the report data on-load not on button submit). If that doesn't work, do the flip, make a new control/project and add one small bit at a time. Either this avoids the issue altogether (for reasons?) or you find the one last piece that causes the issue that might help narrow down your focus/investigation.
Have you determined where the loop occurs? Is `Page_Load` being called repeatedly? What does the network tab in the browser show?
Just a hunch here... but when you make the submit call it is reloading the page. In the Page_Load method you (essentially) are checking for IsPostBack == true then call BuildSql. BuildSql is updating the reportviewer control. That could be triggering a second postback, which then executes the BuildSql function, which updates the reportviewer, which then triggers a postback... and get a never ending loop To test this out, you could remove the control and the references in code to it. If that fixes the submit loop, add it back in and try [setting AsyncRendering to false](https://stackoverflow.com/questions/14826648/page-postback-twice-on-the-page-having-reportviewer) on the reportviewer. Or at the very least you will know where to look
That is probably the right track. Any reason to not display the parameter bar and do the querying and such from that inside the report itself?
I suppose it happens because you call SaveChanges in one _context and then looking for value in other which was created before saving.
I should add that I tried using the same context as well, but with the same result. I was advised that I should wrap my code in a using statement to properly dispose of the context after saving the changes.
Page_Load is being called repeatedly. When I tested for it, the !IsPostBBack gets called once, then the else part of the if statement gets called over and over and over and over and ... http://imgur.com/HJWPJDV and it just keeps going. I feel like this is what I'm fighting but not sure what to do with it: https://blogs.msdn.microsoft.com/brianhartman/2010/03/21/reports-never-stop-loading-with-vs-2010/
Seems quite likely that the issue stems from the report loading performing another postback, and your code updating the report viewer for *every* postback rather than just the one from the submit button. Basically the same as described in the article you found. Obvious solution would be to, well, not do that.
https://www.microsoft.com/en-us/learning/exam-70-483.aspx If you look under Skills measured, it should give you a pretty good idea what will be on it. 
&gt; What I gather from NATS is that it is cloud based message forwarding. Sachiel lets you embed it anywhere for handling messages being received or serializing them to be sent using your existing networking. No, that's one option. As you can see here: http://nats.io/download/
&gt; u see what you did wrong and understand why it was wrong. I go back on my code a lot. you see, the problem is, I work for this company that is still using ASP classic... the owner told me to NEVER write sub routines or functions for somethin I only use once. he said tthat to him is spaghettit code. I saide, Sir, you have a 1600 line for loop with 800 line if blocks in side of it, with 200 line do loops.. I mean, who are you telling their code is spagheit? anywho. thanks! -
Check this link for options: http://codethug.com/2016/02/19/Entity-Framework-Cache-Busting/
Will this be released on Nuget?
By the end of the day. 
&gt; the report loading performing another postback But why would it do that? And how do I make it stop.
&gt; *all* of them let you specify custom messages The whole point of this is *not having to do that*.
&gt; you make your code stop reinitializing the report after every postback. That gives me an idea.
I had created one instance of _context in the constructor and used it everywhere. However, I've now changed over to using local copies of a DbContext in each function that needs one, which seemed to solve the problem.
Removed: Rule 4, Rule 1.
Since ReSharper is involved, you could use the [InvokerParameterNameAttribute](https://www.jetbrains.com/help/resharper/Reference__Code_Annotation_Attributes.html#InvokerParameterNameAttribute) in your Guard method. Resharper's code issue analysis would pick up on the literal being wrong. Alternatively, Code Contract analysis would work here too. Both use analysis to validate correctness without retarding runtime performance.
You could try SendMessage/PostMessage (win API) Ive never tried interacting with Remote Desktop though. Seems more you likely would be better off deploying clients 
I think you have not read from the stream with tostring 
`string csvPath = myStream.ToString();` This doesn't make any sense; it'll be calling `.ToString()` on the file stream. If you want the file path, it's at `saveFileDialog1.FileName`. Regardless, at this point you already have the file stream to write with, so easiest way might be to use a `StreamWriter`: using (StreamWriter writer = new StreamWriter(myStream)) { writer.Write(csvFile.ToString()); } EDIT: If you like, you can also skip the `OpenFile` call and just use: File.WriteAllText(saveFileDialog1.FileName, csvFile.ToString());
Pretty sure the using statement was for older versions of EF
So I should use a new context any time I access the database?
You've got a few options here. First is WMI. You can use WQL to create a process remotely without relying on any external executable. Second is relying on your ability to send keystrokes to invoke msiexec and install the update package directly. If you check out the command line options, you can automate the installation in such a way where it won't require any graphical interaction. Third, Psexec. It's a bit heavier than the other two options, but easier to implement. It'll just be invoking "Psexec.exe -sid \\\\&lt;hostname&gt; C:\\Absolute\\Path\\to\\executable.exe &lt;arguments&gt;" from your program. Fourth, and... Please don't be upset, I'm legitimately curious. This is a systems administration problem that Microsoft solved with WSUS. Why not just implement a domain-wide update server? **EDIT**: Backslashes are hard. 
I've seen it already, it's way too vague. Building strings on an exam that tests for professional experience and expertise? Wayyyy too vague, gives off the impression they'll have you initializing strings saying "Hello world" and be done with it.
I can't tell from code, but the most illustrative thing to do would be be to compare the Fiddler traces of the working Python request with the failing C# request. Sidenote: You might find yourself interested in `DateTime.UtcNow`. This note on their API page might also be extremely relevant: &gt; Use the trailing slash on every request or your API Auth will fail. The URL listed is the exact URL needed to access Novaexchange by API. 
&gt; Sidenote: You might find yourself interested in DateTime.UtcNow. yeah :) that line belongs to a function that takes a `DateTime` variable and needs to convert it to UTC, i am just copying that here and filling the variable with the value that i passed in.
 var values = new List&lt;KeyValuePair&lt;string, string&gt;&gt;(); values.Add(new KeyValuePair&lt;string, string&gt;("apikey", ApiKey)); values.Add(new KeyValuePair&lt;string, string&gt;("signature", sig)); var content = new FormUrlEncodedContent(values); ..... var response = await client.PostAsync(url, content); still the same error :(
You only ever allocate one array, then you assign that array to each index in the list. That's why your results are all the same. To get the correct result, allocate an array each time you loop. I'd put in a code sample, but it isn't clear to me at all what the structure of `myList` is!
You're over writing the same array every loop. Before you loop j recreate newArray
what HTTP response code are you getting back from the server? also, are you making sure to add an extra "/" at the end? from their site: &gt;Use the trailing slash on every request or your API Auth will fail. edit: do what the other guy said. execute the python request, view it with fiddler or with something else, and compare it your c# request to see what the difference is.
it is a successful response, code 200. and i get a real reply json string telling me in the message field that `Auth failed`. the url i use is the same as their example and even i have added a trailing slash but still the same. have to work with fiddler, never used it before!
Just practice. 
If your transport is http, just use a webclient, set the content-type header to text/xml, a SOAPAction header to the appropriate namespace, and the body of the message to be the soap message xml. POST to the service endpoint.
GitHub, MSDN reference library, Listen to Bob, random tutorials/practices, fun projects with unique challenges... Reddit forums.
I've made a new routine to spend a minimum of 1 hour a week answering other people's stackoverflow questions. I've found this helps me validate my skills but also when I'm wrong I learn why and improve. Also it gives you small projects when trying help other people and debugging skills of breaking down their problem. 
I started a YouTube channel so I could explore new things and keep learning. It's gone well, the community it built helps encourage trying new things as well.
Why postasync and not sendmessage?
Well that would defeat the purpose of EF's caching. I think your original unit of work answer is better, and instead of "any time I access the database" it should be "for every unit of work" with unit of work possibly comprising of multiple queries/accesses/whatever. And/or he could just turn the caching mechanism completely off.
https://msdn.microsoft.com/en-us/library/1k20k614.aspx
1. Why is this in MongoDB at all? 2. Are you aware that you are using it incorrectly by trying to use a join rather than storing the tags as children of the `UnifiedPost` object? Unless you were specifically ordered to learn MongoDB by your employer, stop. Setup a normal database such as SQL Server or PostgreSQL and learn some SQL. 
&gt; Listen to Bob He asked what you are doing to 'improve' your skills, not make yourself worse. If you want to be better, ignore his garbage and read books like **Code Complete** and the **.NET Framework Design Guidelines** (2nd edition for both).
Why? That's like excusing a programmer for not learning how file I/O works. *** You are attempting to use MongoDB in a way which it wasn't intended to be used. That means you are going to be fighting with the tools every step of the way. So logically you've got two options: 1. If your goal is to learn MongoDB specifically, pick a problem that better fits it. 2. If your goal is to learn how to solve this problem using databases, pick a database that better fits it. If you don't know which to pick, go with #2. Knowing SQL will be useful for your entire career. Learning MongoDB only helps with MongoDB specifically, and even then companies are slowly switching to using SQL to query it and other NoSQL style databases. 
Thanks a lot!
It's a bit of both. A lot of people call them tutorials, but I'm not sure I agree. Most of the stuff is live coded for the first time during recording, most of my content is stuff I've never done before. That means it takes more time than most similar videos. The channel so far has been a lot of Game development based stuff mostly because it's more visual and people seem to like that more. The channel is [World of Zero](https://www.youtube.com/channel/UCJKLCjeujQj-d3JjsbVtkJw) and is still relatively new (about 8 months old). We've covered various ways to use the GPU including Fragment, Vertex and Geometry shaders and also done some simulation on the GPU using [Compute Shaders](https://www.youtube.com/edit?o=U&amp;video_id=4Wh8GRrz7WA). Played with acceleration structures including an Octree and Sparse Quadtree. Looked at UWP, [Xamarin](https://www.youtube.com/watch?v=NKNk1fNH_bs), [WPF](https://www.youtube.com/watch?v=O69Dt67UdMI) and a number of other tools as well. [Created a simple C# script to generate STL files that can be 3D printed](https://www.youtube.com/watch?v=M6nHIAK83vQ). [Used reflection to begin building an interactive tool for allowing live stream viewers to influence development](https://www.youtube.com/watch?v=J46gO0_u1zQ). [Created a simple ASP.NET Core service that connects via Serial Interface to an Arduino to control a NeoPixel Strip](https://www.youtube.com/playlist?list=PLEwYhelKHmij6oxm_10RV4wHhp_geEkMM). There are a lot more examples as well. What we make depends, most of what I do is taking a concept and then implementing a way of doing it. Sometimes it's an exploration of a technology or technique. The goal isn't necessarily to create a finished product. My favorite videos are the ones where I have some new idea I want to learn, something I've read or seen, and then I come up with some excuse to make it. There is a balance between implementation and theory that I'd like to find, I'm not there yet. Some things are projects "Voxel Terrain", "Grass Rendering" and "Data Cube" are all projects that have a number of different useful aspects to learn from. As a learning tool it's been great! It does take a massive amount of time (recording takes about an hour per video, but editing and maintaining the community takes a few more hours per video), however because of the pace I go at (ideally a video every weekday, though that hasn't been the case due to overhead at work) I am covering a ton of topics I wouldn't have gotten to earlier. I build something new ~30-45 minutes every day and then get to discuss the solution and better ways of doing it with the people that watch. I don't know, it isn't a style for everyone, but I've gotten a lot out of it! The biggest bonus I found from this is this isn't something you can do by yourself. It forces you to show your work, your thought process and your code and then get code reviewed by the world. I've had people suggest novel ways of solving things that I wouldn't have thought of, new technologies that would improve my workflow or just fork my source code and make it better! That back and forth is really powerful and I'd highly recommend a learning style that duplicates that somehow. Hope that helps.
Very insightful, and awesome to get some loyal fans and strong supporters. Being able to pursue new ideas and learn from experienced people just shows the power and influence we can all have on each other. Can't wait to see some of your work.
Alright, I ported it to MySQL + Entity Framework Code-First but that isn't what I want here. I don't want to use SQL-based DBs with everything I do. Aren't there any other alternatives?
I don't understand why you'd tell the OP to not use MongoDB at all? Why do you think a SQL DB would fit this problem better? 
I have had null checking plus other guards in my [Easy.Common](https://github.com/NimaAra/Easy.Common) project available on [NuGet](https://www.nuget.org/packages/Easy.Common/) Things you can do: `Ensure.NotNull(foo, "someVariable")` `Ensure.Equal(left, right, "Values must be equal")` `Ensure.Not(someBoolean, "The given condition is true")` `Ensure.Not&lt;Exception&gt;(someBoolean, "The given condition is true")` `Ensure.That&lt;Exception&gt;(someBoolean, "The given condition is false")` `Ensure.Exists(FileInfo, "File does not exist")` `Ensure.Exists(DirectoryInfo, "Directory does not exist")` Plus many more you can look at inside the [Ensure](https://github.com/NimaAra/Easy.Common/blob/master/Easy.Common/Ensure.cs) class.
Because with a relational database it's trivial and efficient to select rows based multiple criteria from structured data. MongoDB for this purpose will just make it hard for yourself needlessly. 
Unfortunately, I can't share this information, because of security reasons. Although, I can tell you exactly how that update is done, which could perhaps give you a better idea of the task I want to automate. Send me a private message if you'd like to. Also, thanks a bunch! 
Make more time to peruse dotnetperls.
Because NoSQL approaches work best as a document store. For example, I have an Invoice document that won't change in the future. That could be a good use case. The moment you try using relational approaches the whole thing falls apart. He isn't telling him not to learn MongoDB. He's working with OP's given example, saw OP trying to join data and is trying to give him a better solution to his problem. 
He's using joins. If you see a join, rather than a nested document in MongoDB style databases, then you probably have a design problem. 
For the last few years I've been chipping away at a high performance bidirectional DocX to HTML converter. I basically read a section of the current OpenXml spec (which changes all the time) and implement that particular feature. It's nothing crazy C#-wise, but it is making me a better programmer by getting into the nitty gritty of a fairly complex file specification.
Would you have any suggestions for a non-SQL yet still relational database, by any chance? ;)
Can't comment on Bob... But many of the worst coworker coders I've ever had seemed to worship the guy, so I've kinda steared clear. 
Pretending I code in a functional language. I played around with F# about 2-3 years ago and it was very eye opening. The chances of me ever getting paid to write F# for a living is very slim. So I code in c# and I pretend. I don't, or try not to, mutate my variables. It results in far better code I think. F# is like the indie band that mainstream C# is really into. Maybe go play with F# for a bit.. That's what I did to improve my C#, I guess. 
Writing a XAML replacement language
Why cant you simply get the WSDL for the soap service and generate a client? Alternatively, you might be after using REST instead...? SOAP manually is painful, its kind of why the world moved to REST to begin with. Calling SOAP is simple with tools, horrid without
Honestly, he has said things I strongly agree with. But overall his theories come across as extremist with no thought given towards the trade-offs in his designs. 
All of the answers provided so far are the same, and also correct.
Use an ORM such as Entity Framework and you don't have to write any SQL. 
Just use SQL and an ORM.
&gt; Edit: I'm thinking and, by extension, typing with shortcuts once again. ByI'd rather not use MySQL again I meant `I'd rather not use any SQL-based database". Then you are going to have a VERY bad time trying to build anything like what you are doing above. Key-Value systems, NOSQL, whatever, they have use cases. The problem in your OP isn't one of them.
You'll like https://github.com/louthy/language-ext then.
Pluralsight.
I would never let EF near one of my projects again. But career wise, it is vital to know it if you are a C# developer.
Do UWP apps have to be distributed through the Windows store? 
https://www.reddit.com/r/WPDev/comments/3qux2t/distribute_uwp_apps_outside_of_windows_store/ So, you can, but it's really not convenient, and limited.
WPF is the way to go for desktop applications if you also want to target older versions of Windows, if your focus is Windows 10 only, then UWP.
There is a 1 hour long Xamarin class from Mosh on Youtube. It's part of his Udemy 7 hour long course, but the free sample on Youtube will absolutely be enough to the simple app you want. Best of luck, man. 
&gt; I had assumed that when I was adding newArray to the list, it was creating a new copy of that array You might try reading this SO post: https://stackoverflow.com/questions/4347902/when-is-a-c-sharp-value-object-copied-and-when-is-its-reference-copied
Hey dude, I made a small project some time ago to try and create a small orm, for a client who didn't want to use any existing orm implementation. I used a linq like API but that was not the point. Anyway it was pure research since the client went with pure mongo queries and hired a mongo employee to optimize the queries, also the requirements changed so the global filter was not needed anymore. Anyhow, what I did was based on the idea of a global filter , which was getting composed with other queries and returned filtered results. What you might be interested is in the filter functionality. Again, this was more a concept than anything else, but maybe it helps you :) https://www.npmjs.com/package/green-tea Edit: Although this is in js, the queries generated are universal and work with most mongo drivers.
It depends on the use case. Wpf is better at more complicated apps, and you get more freedom​. It's however not across different platforms, but does support practically every Windows platform in use today. UWP is basically a slightly dumbed down version of WPF, so no matter which one you'd pick, it's not like it would take you a lot of time to be productive. And no, WPF isn't going away any time soon (and neither is Winforms sadly) since UWP does not fulfill the same use cases as wpf does. Until that changes, wpf is here to stay.
Windows Forms is the past but it's still around. Windows Presentation Foundation (WPF) is the present and will continue to work on older and newer versions of Windows (desktop version). WPF applications will continue to be treated as first-class programs. Universal Windows Platform (UWP) is not meant to supersede WPF but to supplement it. A developer targeting UWP will still use all that they learnt from WPF, its classes and XAML. UWP applications are expected to be distributed via Windows Store and need to cater to the lowest common denominator of devices in a sandbox environment.
Have you read the **.NET Framework Design Guidelines**? If not, pick up that book first. Get the actual book, not just the online summary. After that pretty much all of the Microsoft Press books linked to actual exams have been useful to me. That last one I read was for the first SQL Server exam. I learned much about the power of windowing functions.
WPF without question. WPF is much older and more stable that UWP and thus the documentation on it is of a much higher quality. And because of the way the CS book market works, you can get high quality, relevant books such as **Windows Presentation Foundation Unleashed** for $1.50 on Amazon. Ultimately you are going to want to learn UWP as well, but there's no need to rush it. Most of your WPF knowledge will transfer to UWP. And by the time you make the switch, UWP will hopefully be more stable and less restrictive than it is now.
To be honest, they're both similar enough to the point that once you've learned one, you'll be able to pick up the other pretty quickly. The main drawback of UWP is that you need to distribute via the windows store. So most of the time you'll be working with WPF (which is a shame because UWP has some neat stuff! Just wish it were portable...)
WinForms is *slightly* better than WPF in that it takes a lot less time to render the built-in controls because of GDI, but that quickly becomes nullified when you end up having to use a custom control to do a basic thing like data binding and styling. At the same time WPF still feels awkward when writing styles or templates because it puts such a huge emphasis on 'XAML as code' rather than 'XAML as markup'
I'm always looking to get out of my comfort zone. Learn new tech as soon as possible. If it is very difficult to understand, I'll persevere, I get there in the end. I'm also constantly looking at other programming languages, and how similar problems are solved in those languages. The Computer world moves very fast. Even faster if you are in a permanent employment bubble. If you don't stop and look around, you'll miss it. B) 
The api auth may be in the headers, not the body.
I did this friday night (after a few beers of course!) and this morning I am back in here doing some more coding and it is so much easier to read already just renaming some variables, and now I have done my best to implement Single Responsibility and Open Close principals. thanks! 
Looking at the way the signature is created, this post may prove useful. https://stackoverflow.com/questions/11790599/python-hmac-and-c-sharp-hmac 
I checked that book for 1.50$. it was published in 2006. Has wpf changed significantly since then?
You can find even more and cheaper books about MS Dos
What is there to learn ? Practically everything you see on xaml is just an object. Attached properties and events require a bit of knowledge how to hook up using just code. But everything else is literally just objects. But at the same time: Good luck with that if you have anything more complicated then a grid or a stack panel with a few items.
To make WPF actually work you need a MVVM framework which require s a bit of re-thinking of how you did a UI. And your right, although at times WPF could shine, I remember writing a apple style explorer control in a day which blew my mind away at how powerful WPF could be... Then you went to do some basic mods on a button and you need to reimplement the entire button from the ground floor.
You do not require an MVVM Framework to make WPF work... INotifyPropertyChanged and some good design is all you need.
XAML is why I never wrote any WPF. I like XML as a data transfer medium, but using it as code or page descriptor .... just feels wrong. 
Hi there. I'll have to read into that more. I'm really not a pro when it comes to programming, I still have two years before I finish my degree. :( But I thank you nonetheless for your suggestion, I'll try to understand and implement it!
If you are interested in this approach, the go-to text is Petzold's *Applications = Code + Markup*. http://www.charlespetzold.com/wpf/. The first half of the book uses C# code exclusively. Then he introduces the XAML syntax, but even in that case it is presented from the perspective of C# code generation. This is the way I learned WPF; it suited my preferred bottom-up style of learning.
thanks for your replies, I'll get back to you in a few days if I need anything else, since I won't have much time to do this until then
Related to this topic, how different is WUP? If you do a typical WPF MVVM app would you be able to use everything up to the view model on WUP? 
Class! thanks dude, this looks awesome! :)
&gt;Class! thanks dude, this looks awesome! VADER analyzed your comment and calculated a sentiment score of "dude!" 
Removed: Rule 2.
That's not so much a paradox. Millions of devs rely on this principle every day via VCS, all with very logical outcomes. Updating a repo to a past commit immediately brings you back in time, and henceforth you can design an alternate reality in the form of a branch. If you retrieve a class definition from it's past it will likely be broken by unnaturally removing it from it's historic context. However, a skillful dev might have designed with interfaces such that the class does not break and has managed all its external dependencies. For example, pretend you have an `IiPhone` interface inside your `Person2017` class. If you retrieve a `Person1800` class instance and pass it an `IiPhone` the person may not recognize it at all. However if you put it in the proper legacy context, i.e. ICommunication -&gt; ISpeech-&gt; IDistantSpeech, the person might have a decent general comprehension of the object. Have you seen Redux? It is essentially the principle of passing all code changes through a 'store' so that an application can rollback to any point in time.
Not OP, but one example is scanning social media for news regarding companies so you can trade stocks automatically. For example, let's say Trump tweets "Pepsi is very bad, soda causes diabetes and kills people. Everyone knows it." Sentiment analysis would help a stock trader sell or short Pepsi in that case.
F# and Rust. If you did C# for 5 or 10 years then just a day or two of F# will probably teach you more good habits than you picked up last year.
I change C# and .Net to match my coding preferences so I don't have to change.
Start with writing unit tests. Make sure you have a good grasp of what the code does and how it works. Write a proposal on changes you'd make and show it to your senior/boss. You want to make small changes in a class and slowly work your way outward. Chipping away at it is much easier than large changes. All projects get out of control. Its the small wrangling that prevents it from crumbling. As for the visualization, I don't know of any software that could help map out a code base. If you want to write your own, you'll have to parse the AST and feed it into dot.exe in graphviz (google spring-embedder algorithms and planar graphs if you are interested in the visualization part).
Is the repo public? Can we get a link?
Yeah that is kind of what I try to do but it seems like it will never end. I would really like a better grasp on the whole thing. I have been recently using dot, so I was considering using it. Could you elaborate on the Abstract Syntax Tree part? This is honestly the first time I hear the term...
You can do it project level instead of solution. Can also add and remove mamespaces to process too.
Good question. I'll answer for python to C# because that's all I did. I'm sure some of this will make sense going the other way too. Luckily in this case the logic was quite low-level if that makes sense. Lots of loops and string manipulation and some maths. Only one real class. Because of this I may not be able to give the best answer but here's an assortment of things that I found: -For the most part, loops and basic operations are really easy to transcribe across. Things like use .Count or .Length in C# vs len() in python. -The APIs for Math (math in python) and other system-level libraries are nearly identical. Occasionally I just had to check out the python docs to see exactly what a function was doing (eg. fabs()) -Be careful about how the collections are handled differently in python and C#. For example, dictionaries in C# will throw an exception if you try and add the same key twice. In python it just replaces it I believe. -In terms of overall architecture - in python it's 'more' normal to have variables or constants or even static methods just kind of lying around. In C# you of course have to bind them to a class. I found the easiest way to handle this transition was just to add some static 'Util' classes that contain the necessary code. For large projects you may want to look at completely revisiting the architecture. -LINQ is fantastic. It's faster than regex in almost all cases and anytime you come across some weird iterator stuff in python (I'm no expert in python so some of it looked quite foreign), you can *probably* do the same thing with linq! Hope that's helpful :D
Does good design = lets add view models? Then I 100% agree. Jokes aside, I have spent a lot of time working on MVP or roll-your-own binding on object models (or also called lets not do MVVM because its a small project)... In my experience you start to get a lot of code smells when you don't have view models. I am sure your mileage may vary.
Ah of course, typical 
&gt; You will also need Visual Studio 2012 or 2015, for compiling the .NET Framework versions of your library. Uhm...what? Why wouldn't you use VS2017 for that? VS2017 can target any .NET framework.
My 2 cents: I guess there is room for both approaches. DelegateCommand is fine for simply binding a command that is quite specific to a VM and won't be dignified as something separate. However, maybe you are able to design some ICommands that are quite universal to your application. What sense would it make to use DelegateCommand for that? What do you think?
I'll check it out, thanks!
Use tryparse instead: int result; bool parseSuccess=int.TryParse(Console.ReadLine(), out result);
Sorry, i'm not following... here is the plan: If the user enters a specific number i want "case1" to happen, If they enter any other number i want "case2" to happen but if they type a letter i want it to say that "You typed a letter, please type a number" for example Thank you so much!
&gt; IXmlDataSetService As smart as I like to think I am, I'm fucking lost. I have been beating my head for hours now. I still have no clue what the purpose of an interface is, nor can I get this to work. how do I pass the interface into the constructor? I have tried many different ways, searched, and I just don't get it. I guess working for a fucking company that is stuck in the dark ages (asp classic) has ruined me. I'm just frustgrated beyond belief right now. I should be able to figure this out, but I just cant :(
Removed: Rule 4. You already have a post on this issue and comments there helping you. Make an attempt.
Just curious, are you reading in some book or other resource for learning C# or are you more or less fully self-learning? Just to let you know, the use of "goto" is universally frowned upon by developers (it correlates with bad/buggy/unreadable code, google it for more details why). In this case, you can use a while-loop instead. Use a boolean variable to keep track of whether the program is finished or not.
I haven't touched delegate command yet. I'll have to play with that.
Agreed. Though it seems like the concept of a viewmodel breaks SRP, unless you're really verbose in the way you write your VM code? If you consider the VM's responsibility to be an interface between the view and the model, then from that abstract position maybe it's not a violation of SRP? OTOT if I have 2-3 buttons and a list/datagrid in one view, I really don't want all code handling them to be cluttering up my VM.
Sounds about right, if there are some universal behaviors, an ICommand definitely belongs in it's own. I haven't used delegatecommand yet, maybe that changes things a little. Either way it doesn't feel like there's a clear consensus that either method is "the right way". For tidiness and a bit of SRP I think I'll keep them separate like I've been doing.
If roslyn can provide it, then yeah use what you can. :)
You could upgrade your version of Visual Studio! (not to be a sarcastic dick, that's just probably the best route)
Thanks for the advice. However, I am not quite sure if using the Tls12 settings is a solution. I have tried another webpage with the same security settings that throwing the exception and it did not throw any exception.
Srp is basically meaningless. You can almost always take a method or class and define more than one responsibility for it. Instead, you should try to minimize the responsibility within the realm of reason. When you do this you are trading intra method complexity for inter method complexity, and you have to actually think about whether the trade off is worth it or not. 
I'm assuming the connection information above is the one negotiated by your browser, meaning it is the highest common factor of what the server offers and the client supports. However, there may still be differences in the less secure options that the two servers support, where one server is configured to require TLS 1.2 while the other is willing to use an older protocol or cipher suite. Upgrading to a less outdated framework would probably be preferable, but if that is not an option [there appears to be a way to enable TLS 1.2 in .NET 3.5](https://support.microsoft.com/en-us/help/3154520/support-for-tls-system-default-versions-included-in-the-.net-framework-3.5-on-windows-8.1-and-windows-server-2012-r2) which you could try.
thanks for the detailed answer. In Python, you ask for forgiveness rather than ask for permission, what's the pattern to do exception handling in C#?
[removed]
Installed VS 2017 and I still don't have the tls12 option. Tried to install .NET 4.5 but a prompted message told that it is already installed on the computer. So, what might be the reason I still can't get the `SecurityProtocolType.Tls12;` ?
Hey, I know it's late now but just wanted to let you know - I've had a cool little idea for a programming language I'd like to build for fun, but most of my time has been invested in .NET and I never thought I would be able to do it as there is little information about building compilers in C#. So I really appreciate this - you have inspired me to make it happen :D
Hey man, kan se du også er dansker, så tænkte jeg lige ville svare :D Problemet er, at når du prøver at konvertere noget, der ikke kan konverteres til en int32 (for eksempel et bogstav) får du en fejl/exception. Som nogle af de andre også har skrevet, skal du bruge den kommando, der hedder tryparse i stedet, eller pakke det ind i en try/catch. Det ville enten se sådan her ud: try { svar1 = Convert.ToInt32(Console.ReadLine()); } catch { Console.WriteLine("Den indtastede værdi er ugyldig"); } Eller, som u/Kidiri90 skriver, bruge en tryparse, som egentlig gør det samme i forhold til at fange fejlen. Håber det kan hjælpe :)
Goto is bad, because it allows code that is hard to follow. Imagine seeing code that is full of "Goto here" everywhere in the logic. Try to follow a simple loop... and you end up jumping around the entire code base following what it does. Equally, debugging can be hard because you get some line error, but that line is perfect. Now It's scanning every goto this line... and sometimes going several jumps back to realize a bad statement was called, or maybe something wasn't initialized/not null yet. Tldr: Don't use goto, it makes it harder to develop good software.
Convert.toInt32 ( string) throws an exception and without handling it. The program crashes. You can do 2 things, validate inputs and confidently push good inputs. Or... You can handle the exception. A 3rd way might be to avoid exceptions with a new method/design, like TryParse. But for learning we'll stick with these two. String allows any number of character inputs, and we enjoy full text in many places. But what if we need to limit it somehow? We can break a string down to its character representation, and then filter for our format needs. Like a for loop that asks, is this character allowed? If not, we can't use this input. Send error message to user, and try again. A more advanced way, might use regex and it's a good way to check for complex formats. It's useful to be familiar with it for input validation. Exceptions are useful, but generally we try to avoid them for obvious reasons. It causes crashes, and it takes extra work to catch appropriately. The Try Catch Finally is the normal way to handle this. try { myInt = convert.toInt32( Console.ReadLine () ); } catch ( Exception e ) { Console.WriteLine (e.message); } finally { Console.WriteLine ( "input: " ); } The Try lets us run code that might fail, and then we can use the catch statement (s) to handle the outcomes that failed. Note: multiple catches allowed and prioritize specifics ones at the top with general exceptions at the bottom. Finally is typically used for closing any open connections, saving/logging the attempt or errors. But this code always runs, regardless of a good or bad run of code.
Unless someone is going to pay you money for the cert, or getting / keeping a job depends upon having it, I'd just get started learning. There are some good resources on the sidebar. =&gt; 
Yeah, some of those Resharper recommendations are just atrocious. Sometimes, you really *do* just want a regular old for loop.
Currently searching for a tutorial abut learning linq any recommendations ? It's sounds like knowing when to use it is as important as knowing linq. Thanks 
I asked a coworker to take a look at a line of code that I was getting an error I'd never seen before. At the very top of my screen, visible by a line, is a good old fashioned for loop that was not at all related to the issue in question. Without a word she converts it to a foreach loop. Then she looks at me and says "sorry, foreach loops are faster....pet peeve." Then she does some wizardry that makes visual studio stop bitching but doesn't really solve my problem and then she walks away without saying anything more. Bitch. I needed the index. Thanks for nothing.
I like to think that my ViewModels "only" responsibility is to delegate work to Models, so I am not violating SRP. But I know that the SRP definition is much more complicated. Also if there is some universal behavior, I try to implement it in Model layer not in the ICommand. What if I want to reuse this "universal behavior" from console app? 
`for` loops are the right answer anytime you actually need the index. Like working with collections in MVC.
In short: * Keep your queries short. They are easier to debug. Also look at [OzCode](http://oz-code.com), which has a LINQ debugger that's really cool. * As part of keeping your queries short, you can continue more LINQ operations on the variables that you assigned the result of your previous queries to. * Gain a solid understanding of `IEnumerable` and `IQueryable`, and how deferred execution works. * Gain an understanding of different ways to enumerate `IEnumerable`s, like `.ToList()`, `foreach`, `.GetEnumerator()`, etc. * Avoid enumerating the same enumerable multiple times (most of the time). * Understand that LINQ queries are usually a bunch of loops on a data set, so try to be efficient about it; this is where performance is often lost. I'm not certain whether the compiler unrolls any of these loops to increase efficiency. * Don't do `bar.ToList().ForEach(o =&gt; { /* ... */ })`. I will hurt you. Learn why I will hurt you (hint: `foreach`). * Understand what the differences are between LINQ Fluent and LINQ Query Statements. * Gain some understanding of the purpose of "LINQ to Objects", "LINQ to XML," and "LINQ to SQL."
You can access the index with LINQ. var evens = numbers.Where((j, index) =&gt; (index % 2) == 0).ToList();
Have you checked out the reactive extensions library? I use it a lot, and I love linq, but my god. If I'm not careful enough these extensions turn my brain to mush.
[101 Linq examples](https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b)
Any time you want the performance of a for loop? If the collection is a heavily-used type, it likely has a struct iterator (e.g. `List&lt;T&gt;`), which is going to get boxed by LINQ. That, and the lambda has to get compiled and executed, which, depending on if you're including local variables, might require a new class get dynamically compiled (and that never gets garbage collected). I'm not saying that everyone should care--line-of-business application developers probably don't. But there are plenty of use cases for *for* in library code or high-performance applications.
I think he was talking about a Razer view where you'd be building controls per item in the collection, eg a grid. I'm not sure your suggestion is applicable in that scenario.
erm... why?
&gt; foreach loops are faster Except they're not. If it's an array, it compiles down to a for loop (so it's the same), but if it's anything else, then you get the IEnumerable overhead.
Nah I just look at the outlines in the description of the tests and then get to googling/youtubing/practicing. I don't really have a strategy; I just go when I feel ready. Wish I could be more help. Oh! Also Microsoft Virtual Academy is pretty solid.
Less code, cleaner code, less cognitive overhead, less ability to mess up your boundary conditions or do something dodgy with your index inside the loop. After using foreach loops, I'd never go back to writing for loops for simple IEnumerable iteration.
I use linq extension methods, but not the actual linq syntax found in that link. I think any linq language query can be converted to the extension methods, but I am not sure. Can the "let" statements and recursion be done without the linq syntax? 
Unfortunately the best equivalent for let would be a Select that selects a tuple containing the original value and the new value. numbers.Select(n =&gt; (number: n, sqrt: Math.Sqrt(n)) .Where(tuple =&gt; tuple.sqrt % 2 == 1) .Select(tuple =&gt; tuple.number); Did this on a phone so hopefully it's not all mangled.
Often (like, quite often) the speed isn't an issue. Looping over dozens or hundreds of things and doing simple operations is trivial for any modern machine. Making it 10ms faster isn't going to impact the user. And so the tradeoff (simpler syntax, less error-prone, etc) is usually worth it. When you run across a situation where saving 1ms on each time through a loop actually does matter, it usually becomes apparent pretty quickly.
I've been using linq since it came out and TIL you can do that, above. Thanks! 
I don't follow - what are the performance problems with using foreach and .Where() vs a for loop with continue? In both cases you'll need to iterate every element. You're still going to have to 'filter' in your for loop (with if/continue). As an example, I'm imagining we're talking about: for (var i = 0; i &lt; myList.Count; i++) { if (myList[i].BoolProperty == true) { DoSomething(myList[i]); } } vs var filteredList = myList.Where(e =&gt; e.BoolProperty == true); foreach (var element in filteredList) { DoSomething(element); } Also not sure what you mean by 'looks bad' - the second option looks a hell of a lot clearer to me!
Why would you use int instead of var? There's no semantic difference in the case of the for loop. I use var wherever possible unless I need to make the type explicit (personally I find it reduces cognitive overhead and makes refactoring simpler). I suppose in this case it really just comes down to consistency.
I am honestly more impressed with this piece of code than tracer algorithm.
An interface is a promise to do something. For example an interface called IDataService that could define a method called GetData which returns a dataset. Then you could have two classes called XmlDataService and SqlDataService that both implement IDataService. SqlDataService would get the data from a database and XmlDataService would read it from a file. But both of them would return the data in the same format, so the method using the service doesn't care what source is used. In this case a method called DoWork(IDataService data) would do work on the dataset and would accept and type the implements that interface. The classic example is animal. If animal is an interface it would have a method called speak. Both cats and dogs are animals so they would both implement animal. If animal.speak is called then it returns bark if a dog was passed in and returns meow if a cat was passed in. 
What's annoying is they are often not suggestions, but just options, yet people do it blindly anyways. Hence the Hammer instead of the Light Bulb icon.
Joins are super ugly when written in the extension method syntax 
Oh fair enough. var just tells the compiler to infer the type if possible - the compiled code will behave exactly the same as if you had declared the variable. (unlike the JavaScript 'var', which means the variable can be assigned any type). For example, this will not compile since there's no way the compiler can work out what type 'i' should be: var i; This will compile and 'i' will be declared as an int, since '0' is known to be an int: var i = 0; i = 1; The compiled code will function exactly as if you'd written: int i = 0; i = 1; This will not compile, since 'i' is an int and cannot be changed to a bool: var i = 0; i = true; After writing that up, I'm not sure why I didn't just point you to [the documentation](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/var).
They could have ended it with ToList.ForEach instead. :(
First, yours is a very simple example. Usually the readability arises when you have multiple collections that you need to iterate on in maybe slightly different ways. Or to access them out of order. If you just want to iterate over a collection, then by god use a foreach...that's what it's for. However, many people seem to blindly use foreach because it is what they are used to and think it's just always the most readable or only way to go. Maybe this is more on the developers than the construct, but when I see 2-3: if(conditional) { continue; // Or return Or break } in a single foreach loop I get a little miffed. I'll either move it a prefiltered list (like your example) or a regular for loop depending on what it's trying to do. Now, please correct me if I am mistaken, but the &lt;filteredList&gt; in your example will materialize at the beginning of the foreach loop. Thus, you iterated over the original collection and then iterated over the filtered collection. This usually doesn't matter in the least, but when your collections get larger or you need tighter timing for whatever reason it can be a problem. Also, since you are using linq, you are most likely getting an IEnumerable back and may need to .ToList() it or something else. I've seen a lot of badly designed classes/functions in which a majority of the processing is spent converting from an IEnumerable to a list and back several times for absolutely no reason other than to use the available constructs. Again, a lot of this has to do with how developers use these things and not the things themselves. In my eyes. Also, readability suffers if you are not as familiar with something. Since many C# developers never use for loops, even the simplest one is deemed to be poor. Which is just not the case. Now, on an ending note: I almost always use foreach and LINQ wherever I can. It is the better choice in the great majority of situations.
Reading through OP's comments on that thread ruined my day, damn. Good link though.
I believe that .NET is clever when it comes to IEnumerable vs IList, so when you do a myList.Where(...), it isn't actually iterating over the myList and returning results, it is merely returning an enumerator, which points to the original list, and when enumerated, will iterate through the list with the condition you defined. So in the first line of my example, the list will not be iterated at all, and there should only be a single traversal of the original list in my example. The point of calling .ToList() is that you are explicitly enumerating the IEnumerable and generating a new List from the results. If in my previous example, I had set myList to .Where(...).ToList() in the first line, a double enumeration would have occurred, since I would be first filtering the list into a new list, and then enumerating my new list in the foreach loop. It's subtle, but important to understand IMO. The reason you're likely seeing .ToList() scattered all over the place is likely because of other developers not understanding this distinction, and simply trying to make their code fit function parameters. There are however legitimate cases where you may want to force enumeration to take place with a .ToList() call. I agree that if you are doing something funky with your iteration instead of just incrementing i then you may well see some performance benefits using a for loop. Unless I know performance is going to be an issue however, I personally always prefer to go with the more readable and maintainable approach.
I mean I like to have my code clean of any suggestions/ options/ squiggly lines. A lot of times switching to LINQ syntax is more readable (as long as performance doesn't matter) so I like to keep the LINQ option on. I honestly am not a huge fan of having ugly ass comments/tags all over the place to disable the suggestions either so I find myself in a bit of a catch 22.
Value tuples are, but tuples are not.
The C# compiler just translates linq queries to method calls, so yes any linq query can be translated to equivalent method calls. Let bindings I think just expand to properties of anonymous objects? Check the C# spec if you want to know.
You can write that code with the old Tuples, it's just not pretty.
Not everything, no. Let can be approximated by Select(x=&gt;new {...}) or something similar, recursion isn't possible in method syntax (although you might conceivably be able to roll your own extension method?) Joins are also freaking annoying in method syntax.
Also `new {Number = n, Sqrt = Math.Sqrt(n)}` - possible, apparently, since C# 3?
Best advice I can give is to learn and implement SOLID principles as quickly as you possibly can. My first day programming in C# was learning Dependency Injection and Inversion of Control, and despite the headache-full first week, I cannot point at anything more beneficial in my starting career. 
I have a friend who uses something similar to gauge how well a given ad campaign is doing. Twitter is a godsend for advertising companies.
Yep, I've googled class naming patterns more than a couple of times. [I found this stackoverflow answer](https://stackoverflow.com/questions/1866794/naming-classes-how-to-avoid-calling-everything-a-whatevermanager), looks like handler might work well in this case. If you want to go overboard and waste a little corporate money, [you could always get your manager to order this for you.](https://www.amazon.com/dp/0321545613/?tag=stackoverfl08-20)
Effectively it mediates communication between the Model and the Controller (from an MVC perspective) and depending on specific use cases, can fall under the Model or Controller category. I was taught that this is sort of a ["Client"](http://whatis.techtarget.com/search/query?q=client) for the Model, and that's what I've been doing: "GithubClient", "DriveClient", "TwitterClient", "SQLClient" etc.
When I have done this in my own experience I have either used SomeAPI or I would use some shortened version of the name stripping out any specific naming scheme of the library, example instead of ID3D12Device2, I would use Device. I prefer this method so if I ever change the underlying library for some other one my naming scheme needn't change.
Same. You only run into problems with that syntax when it is per instance but honestly when I start doing that I'm typically doing something else stupid in my design so it rarely comes up
form
Making it a modifier/attribute of a property would significantly limit its use cases. The way it works in the proposal, you could do things like void ValidateSomething(string value) { var expensiveRegex = static cache new Regex("...", RegexOptions.Compiled); if (expensiveRegex.IsMatch(value)) { // ... } } Thread-safe by default is not something that is typically followed in the rest of the framework. Hell, even integers aren't entirely thread-safe. I wouldn't mind having a thread-safe *option*, although then it might get messy with the keywords.
I'm not the biggest fan of the name helper here either, but if that's the current standard convention where you work for classes like that I would stick with the convention. It's better to have many places with the same non-ideal naming convention, than to have inconsistent naming conventions. 
It's a wrapper, as you've said. But it's actually the adapter design pattern, from what I can tell. https://stackoverflow.com/questions/17731522/what-are-the-differences-between-the-decorator-and-adapter-patterns Design patterns are very useful for describing your intent, and so that other people know what the hell you're writing haha.
It may be the [facade pattern.](https://en.wikipedia.org/wiki/Facade_pattern) If you agree, then you'd call the call SomeApiFacade
yes, take a look at SelectMany
Extension syntax reads so much better in my opinion. I use it almost exclusively.
in my experience, .ForEach() is treated as a faux pas. Something about it breaking the paradigm of each extension returning a modified collection (.ForEach() returns null I believe).
Has anybody gone on to 4.7 I have a few projects on 4.6.1, but I don't know if it is worth upgrading them. Performance improvements are always welcome, so if there would be any benefit, I suppose the main question is "why not?" Without performance improvements, I guess my main question would be "why?" Any thoughts from anyone? 
Turn them into a Hint instead of a Suggestion. The squiggle is tiny, and you don't get bars over by the scrollbar. 
OMG. Why is that being done client-side? 
You could also call it a 'MySomeApiDecorator', if you declared the base method as virtual and then overriden it (see Decorator pattern) 
But then I won't find out when I've been dumb and done something like foreach(var e in list) { if e.Ok; yield return e; }
I really don't like the idea of adding a brand new keyword just for a fairly benign and somewhat rare use case.
Fucking hell guys, everyone is giving different design pattern names for this.
I think Joins with Method syntax is less readable compared to Query syntax. 
+1 for Pluralsight. Subscription can be kind of expensive depending on what tier you get, but IMO it's worth it. My company pays for it, so I'm lucky in that regard, but I would probably still pay for it if not. Also it's not just C# - there are a ton of other topics as well.
What is the purpose of your wrapper? Just calling it SomeAPIWrapper (or SomeAPIFacade or SomeAPIAdapter etc.) isn't really helpful. For example if you are logging the calls you might use SomeAPILoggingWrapper.
`lazy` is interesting. What if it were like this? public T Foo { cache get { ComputeExpensiveValue(); } } public T Foo { lazy get { ComputeExpensiveValue(); } } Or: public T Foo { get; } = cache ComputeExpensiveValue(); public T Foo { get; } = lazy ComputeExpensiveValue();
That very deceptive 6 lines turned into 60 when I formatted it! O_o Kudos to that second developer!
Instead of trying to fit the given (ugly) code into design pattern, I will try to tell which pattern definitely are *not* fitting: * It is in no way a decorator as it does not implement the same interface as the delegation class nor does it accept a parameter of such an interface in order to *decorate* it. * It is not an adapter, as it does not transform the API of the given class into another API. * It is not a facade, as it does not bundle or integrate different APIs into one. Imho this is no pattern at all! It's just simple delegation 😉 
The former's not really different from making it a property-level modifier for an expression-bodied property. The latter's not really different from what's in the proposal. I think that, the way this is proposed, it makes more sense as a modifier to the property, whereas throwing it into the rhs makes it look like a modifier to the type returned. YMMV.
Don't just know HOW to do things. Know WHY you're coding what you're coding. When you have true understanding, you'll have no need for rote memorization/code regurgitation. 
It's for logging and our own validation (used in test automation). So for example we can call on the method and at the same time provide the expected return status code. 
Not like I tried to win any code award with the example (simply wrote it to have an example). I would say the question is more about naming (API wrappers) and fitting a pattern usually makes it easier (or at least I think so). Even if it's a bit backward of course. Here is another question on the same subject: https://softwareengineering.stackexchange.com/questions/258090/design-pattern-name-for-an-api-wrapper-class
In the Time-Before-Design-Patterns-Had-Names (yes, there was such a time) we still used many of the patterns used today. While it's been helpful for them to have names when it comes to discussing design details, when it comes to how to use APIs as long as it's obvious (or at least well documented) how to use said API it doesn't really matter if it has a well known name. Follow a consistent style and naming convention and you'll be fine.
I'm not exactly sure if this is what you're asking but when I googled your exact question this was the first hit: https://stackoverflow.com/questions/4922129/how-do-i-convert-an-array-to-a-listobject-in-c 
i jsut added a comment in i want items to be a list but im having trouble converting it 
The proposed functionality wouldn't actually be "lazy" though. It could be used to implement lazily initialized properties, but public lazy T Foo =&gt; Compute(); wouldn't be any more (or less) deferred than public T Foo =&gt; Compute(); already is. It would be cached.
 var response = JsonConvert.DeserializeObject&lt;Response&gt;(content); IList&lt;Item&gt; itemsList = new List&lt;Item&gt;(response.Items);
&gt; When you use Data Annotations to validate models and an error is caught by the Controller, the ModelState is updated with the errors and a BadRequestObjectResult is immediately kicked back as the response. You can’t even debug the Controller directly, the execution of code never enters the method body. Does that mean that in ASP.NET Core you don't get to check the model state for validation errors like you do in ASP.NET Full?
How so? It is accurate and not even delivered in a harsh way
Stop using the word cache. Cache has an already accepted meaning in computer science. And the thread safe business just annoyed me. Do you really believe only 5pc of .net developers care about concurrency? That is insanely naive. 
I would try to avoid *Wrapper *Helper *Handler suffixes where possible. The important aspect of the class is not what it wraps, helps, or handles. It is the intent and nature of the wrapping, helping, or handling that is important to put in the class name. So if you are wrapping an SomeApi to automatically log actions while maintaining the ISomeApi interface, then call it LoggingSomeApi. Likewise for AuthenticatedSomeApi or FaultTolerantSomeApi, etc. If you allow each constructor to accept any ISomeApi as a parameter then, jamming logging, authentication, and fault tolerance into a single wrapper class, you can just make a Logging(Authenticated(FaultTolerant(SomeApi))) and consumers do not need to care about the number and type of wrappers.
Sure. Each LINQ query is done on some kind of Enumerable, which is effectively a data set for the purposes of this discussion. Every time you call a LINQ method, you're iterating over the previous resulting data set. Take this example. var numbers = new[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; var evenNumbersSquared = numbers.Where(num =&gt; num % 2 == 0).Select(num =&gt; num * num); Consider it's imperative equivalent. var numbers = new[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; var evenNumbers = new List&lt;int&gt;(); var evenNumbersSquared = new List&lt;int&gt;(); // .Where() equivalent foreach(var num in numbers) { if (num % 2 == 1) continue; evenNumbers.Add(num); } // .Select() equivalent foreach(var num in evenNumbers) { evenNumbersSquared.Add(num * num); } In effect, by using `.Where()` and then `.Select()`, you are utilizing two loops. Now, because `.Where()` filters a data set, `.Select()` enumerates a smaller data set, but it's still two loop. What I'm unsure about is whether the compiler will unroll these loops, meaning it's capable of "looking ahead" and making decisions about optimizations. The imperative equivalent can be written like this, and is more efficient. var numbers = new[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; var evenNumbersSquared = new List&lt;int&gt;(); foreach(var num in numbers) { // .Where() equivalent if (num % 2 == 1) continue; // .Select() equivalent evenNumbersSquared.Add(num * num); }
&gt;In that case the array is already an IEnumerable&lt;Item&gt;. Additionally, arrays are by default already implementations of the non-generic IList. Most methods (and probably what you're doing) want the generic version (in which case ToList would be the way to go, as stated above), but FYI.
He's ignorant as to what design patterns really are, but that's easily curable and no reason to be insulting. 
The `MySomeAPiWrapper` class sounds like something that I would use the `Service` prefix for. Example service classes from one of my projects and their dependencies: * AccountService --&gt; SqlClient * GameService --&gt; SqlClient * OptimizerService --&gt; OptimizerClient * TeamService --&gt; SqlClient 
Facades simplify existing interface(s). Proxies act as the interface to another object as to control their usage. E.g. Access is expensive or needs to be tracked. Adapters act as translators between classes. E.g. X and Y have incompatible interfaces, but Adapter A allows them to communicate, X -&gt; A -&gt; Y. Decorators take an existing instance and add functionality. E.g. class FileStream : IStream { /* ... */ } class NetworkStream : IStream { /* ... */ } class CipherStream : IStream { public CipherStream(IStream stream, ICipher cipher) { this.stream = stream; this.cipher = cipher; } public override byte[] Read() { var buffer = stream.Read(); return cipher.Decrypt(buffer); } } These are all different kinds of wrappers. The fact that no inheritance is going on anywhere might be why your example doesn't immediately belong to one of these categories. Because you aren't complying with the strict definition of any of these, I'd probably just call it a wrapper.
It's not a decorator at all, decorators have a more complex setup where you can "decorate" a base class multiple times with each layer changing some functionality, and then they let you call the topmost decorator as if it was the base component and have it go down the "stack" of decorators. At the very least you'd need an interface for a decorator component and a base component. OP just has a simple wrapper, no need to complicate it any more than that. 
That is our convention at work too. This would be an FooApiService responsible for calling a FooApiClient. The Client would deal with dumb FooDTOs (data transfer object) parameters just making the API call. The Service would be responsible for everything else, plus moving the data into/out of full fledged domain Foo objects.
I think there's a difference here in that we've changed the signature of the PostSomething() parameters because we want to work with our objects, not the remote APIs.
We generally label MySomeApiWrapper as FooApiService and SomeApi as FooApiClient. The Service could be correctly called a Repository, which we do name things as, if the API service is a collection of resources. I would also consider potentially consider the Service a Proxy, but would not name it as such unless it only had one defined role in managing access to the API: http://www.dofactory.com/net/proxy-design-pattern.
It depends on what your wrapper is doing. Yours appears to be doing more than one thing and is implemented a little oddly, making it not really fit any pattern as it is now. Like /u/Bolitho said it's just delegation the way it stands. Call it "Service" if you want. If it's validating, logging, and saving. But "Service" as it's used here is too general to really be a pattern. Above I mentioned that it could be considered similar to Mediator but I sure wouldn't name it that.
Other than naming conventions, that sounds exactly like what we do. For the "client" layer of things we have various names for it, but the idea is the same. I think the important thing is separating business logic from third-party API interaction.
I know everyone is giving there own answers but this is an awful lot like a simple ViewModel too. In MVVM the viewmodel will instantiate any API's, pull data from them, do any necessary data manipulation and then store it in bindable properties for presentation to the view (UI). Likewise, it will respond to any data changes entered in the view and use the API again to update the records on the back end. 
Just do File.OpenText And on the file reader you call ReadToEndAsync() That will not create a new thread or block the CPU. 
I dont care about your library. FileStream is implementing built-in OS async operations. And seems you are confusing FileStream with File. File is helper class for FileStream.
A: I said *near* (and the results seem to agree) B: yes, a hard disk drive is synchronous (in a literial sense but really, so is everything other than executing instructions with on separate threads), however, benchmarks don't lie. C: I in fact *do* know how async works, I couldn't have made a **fair and properly written** benchmark otherwise. D: Even if all of that was underminded, waiting it doesn't change the fact that you *could* do something else, as you said as such this is still better than waiting for blocking code.
After having a heart attack (and reading around the c# source) I can confirm that a: that there is no ```OpenTextWrite()``` and B: I checked for writing once again, but ```WriteToEndAsync()``` on StreamWriter won't work if you don't manually set up the underlying FileStream with a constructer that lets you set ```useAsync``` [ex this one](https://msdn.microsoft.com/en-us/library/7db28s3c\(v=vs.110\).aspx) it will still run synchronously. EDIT: just forgot to say, you never did say there was a File.OpenTextWrite() or anything like that.
Everyone's nearly write, to be quite accurate - it's an: #Adapter_Facade_Decorator_Wrapper_ServiceWrapper_ProxyWrapper_Client_ViewModel_Helper class. Or to simplify it, one could simply write the obvious: public class My_API_AFDWSwPwCVmH_Class{} Then you could easily use this self documenting code: My_API_AFDWSwPwCVmH_Class MyApiAFDWSwPwCVmHObject = new My_API_AFDWSwPwCVmH_Class(); Perhaps make it a Factory class too?..... Extra flexibility then.... MyApiAFDWSwPwCVmHFactoryObject
For anyone wondering what this is about, I posted this question on SO a while ago and some people replied with really nice answers: https://stackoverflow.com/questions/37041844/async-await-and-opening-a-filestream
I didn't see that post, thank you for sharing! Although it was a similar one that inspired me. Glad SO likes you :D
Cheers for taking the time to try and teach someone something mate and thanks for taking the time out of your day to contribute something to the community.
It's best to start with where the concept comes from. &gt; A pattern language is a method of describing good design practices or patterns of useful organization within a field of expertise. The term was coined by architect Christopher Alexander and popularized by his 1977 book A Pattern Language. -- https://en.wikipedia.org/wiki/Pattern_language It's actually a rather broad concept, but incredibly useful. The pattern language for say a website is going to be very different than the one for a desktop application or Windows Service, though they may share some specific design patterns. As to that definition, &gt; The language description – the vocabulary – is a collection of named, described solutions to problems in a field of interest. These are called design patterns. So, for example, the language for architecture describes items like: settlements, buildings, rooms, windows, latches, etc. In this case, "delegation" is the name of the design pattern. 
You could argue that .ToList() is more idiomatic. You'd need a `using System.Linq`
Hey, I know I'm late to the party here, but whatever you decide to call it, make sure you decouple yourself from the dependency. Your intent should be to abstract the logic of the API from the rest of your code. So if you call it MyAPIHelper, that's pretty useless.. it will just become a huge wrapper for an API. It would be better to make it represent the single thing you need it to do... Let's say it calls an API to let you retrieve/post comments. Then you could call it CommentsRepository or CommentsStore or whatever you want.. just imagine that whatever it is that stores/save these "comments" (or whatever it is) might change, and the rest of your code should not need to change if this happens, and your class name (or likely interface name) should still make sense. public interface CommentsRepository { ... } public class SomeAPICommentsRepository implements CommentsRepository {... } etc. 
OP, remember: Format code by having an empty line above and below it *and* indent *each* line by at least four spaces.
Thanks for a straightforward answer!
I would bet that 'improper' async (just sticking `File.WriteAllText()` in a `Task.Run()`) would beat both of your benchmarks. The benefits of true async usually don't show up under such small concurrent workloads, while the overhead (like all those `Task` allocations for every line/buffer) does. Another potential issue with real async IO without `Task.Run()` is that while the writing can be async, the opening of the file isn't. So accessing a file on something like a spun down HDD or a laggy UNC share can block for quite a while.
I'll have to test that, brb
So, while I am waiting for this benchmark to run, the thing I am most worried about is all the threads sitting blocked (3!) while waiting for their respective tasks to run... aaaaand I just realized I have to start over again with some .ConfigureAwait(false)
Threads aren't free, but they're not incredibly expensive either. Three threads won't even make the thread pool expand. Also, there is no synchronization context in console applications, so `ConfigureAwait` doesn't matter in your benchmark.
Hmm, Didn't know that (Rather, I didn't connect no synchronization context = useless ```ConfigureAwait```. Also, is there, is my library triggering unnecessary garbage collections?
Considering the OP/question, I figured it was best to avoid LINQ and the possible "it doesn't work"/"add using" fix.
It's important to remember when using Linq on a `IQueryable` that you are writing expressions and not logical operations. In order to translate to SQL the (SQL) Linq provider needs to interpret the expression and will do this by way of literal translating. If you set the expression to do multiple comparisons, the SQL will do multiple comparisons. If you condense to a single ternary operator, the SQL will do the same. There is very little optimisation, if any at all.
If these two objects implement the same interface then the wrapper would be called a decorator. Otherwise I believe it's a facade since you've simplified the api of the wrapped class. Also you should check out dependency injection [simpleinjector ](http://simpleinjector.readthedocs.io/en/latest/). Instead of using the new operator and manually wiring up your dependencies.
two quick tips for OSS adoption on .net 1) host it on github - anything else just raises questions 2) publish on Nuget - this is where we would search to add it to our projects.
This is probably what's happening but the query is not hitting indexes since the second is faster.
Not to say you shouldn't investigate why the outputs are different, but if the outputs are unexpected this might be an area worth considering just writing out the SQL. Linq to sql is great for simple tasks, but when you start getting into complex conditions the output starts becoming a little unpredictable.
Looks like the ternary operator is translated. Just tested the following in LINQPad: INFORMATION_SCHEMA.TABLES.Where (i =&gt; i.TABLE_SCHEMA=="dbo" ?i.TABLE_NAME.StartsWith("A") : i.TABLE_NAME.StartsWith("B")) And it generates: -- Region Parameters DECLARE @p0 NVarChar(1000) = 'dbo' DECLARE @p1 NVarChar(1000) = 'A%' DECLARE @p2 NVarChar(1000) = 'B%' -- EndRegion SELECT [t0].[TABLE_CATALOG], [t0].[TABLE_SCHEMA], [t0].[TABLE_NAME], [t0].[TABLE_TYPE] FROM [INFORMATION_SCHEMA].[TABLES] AS [t0] WHERE ( (CASE WHEN [t0].[TABLE_SCHEMA] = @p0 THEN (CASE WHEN [t0].[TABLE_NAME] LIKE @p1 THEN 1 WHEN NOT ([t0].[TABLE_NAME] LIKE @p1) THEN 0 ELSE NULL END) ELSE (CASE WHEN [t0].[TABLE_NAME] LIKE @p2 THEN 1 WHEN NOT ([t0].[TABLE_NAME] LIKE @p2) THEN 0 ELSE NULL END) END)) = 1 So check the generated SQL.
Start SSL is the cheapest, IIRC. Free even if you don't need time-stamping (does the certificate expire after a year? You normally need this for code signing). There has been some controversy after the company was bought by sold Chinese company, I don't know if that has been resolved.
&gt; you are writing expressions and not logical operations I don't see how those two are mutually exclusive. You're writing something that the compiler turns into an expression tree structure instead of direct code.
How long are you waiting? Because the TcpClient takes a while before it times out when the distant server is down. 
Thank you both! I changed the code to be like this: command.CreateCommand("tsserver") .Do(async (e) =&gt; { try { TcpClient TSClient = new TcpClient("xxx.xxx.xxx.xxx", 10011); if (TSClient.Connected) { await e.Channel.SendMessage("The Teamspeak server is: Online"); } } catch (SocketException ex) { Console.WriteLine(ex.Message); await e.Channel.SendMessage("The teamspeak server is: Offline"); } }); And the discord bot is responding as soon as I get the console message (ex). Thanks again!
Around 15 seconds. I wondered if there is a way of reducing that. Also, when checking another server, in the console it says: "No connection could be made because the target machine actively refused it"
&gt; but perhaps L2S optimizes it away (it has a lot of optimization passes). Whilst trying to benchmark the resultant SQL of some iterations of earlier queries, I ran into some scenarios where the inner select was slower than the entire query Eg (Hyper simplified version) : SELECT * FROM ( SELECT c FROM .... ) WHERE c &gt; 4 The "SELECT c FROM..." part was slower than if you ran the entire thing at once - I've yet to figure out how - LINQ can generated some weird looking SQL... 
I appreciate how simple you've kept the library. It seems like it could be a nice aid to those writing I/O-heavy code. There is, however, an implementation detail that could be potentially hurting performance and contributing to overhead. &amp;nbsp; The InternalWriteAllLinesAsync method is awaiting on each iteration. It's understandable you would want this behavior to prevent the lines of text from being written out of order, but that's an awful lot of context switching. It wouldn't surprise me to see something like this perform better: return Task.Run(() =&gt; { using (writer) { foreach (string line in contents) writer.WriteLine(line); } }); I don't have any numbers to back this up, but I suspect that you're losing a non-trivial amount of time to context switches. Have you tested this approach?
I apologize for not being clear. The line of code should probably read var response = JsonConvert.DeserializeObject&lt;Response&gt;(content); (i.e. name the response variable appropriately) then var items = response.Items.ToList(); or var items = new List&lt;Item&gt;(response.Items); 
&gt; so is everything other than executing instructions with on separate threads Not exactly.. https://en.wikipedia.org/wiki/Instruction-level_parallelism
is this product dead? still supported? why isn't it on the most common &amp; popular OSS source control center in the world?
I like the part where you were mean for no reason, fedora was thoroughly tipped in between every breath in this response. OP, if you read this. He isn't wrong about giving additional clarity in the question, but I think you were in the right direction of seeing an issue. 
&gt; I like the part where you were mean for no reason Oh, kinda like the part where OP decided they needed to throw in a rant to blame something else. Give a man a fish or teach a man to fish.. What are they going to do next time they run into a poorly performing query. Perhaps now they'll think a little more about what they need to consider to solve their issue. 
But .NET has been a practically unremovable part of Windows for at least a decade, and that's a good thing. So what exactly do you need a self contained application for?
I see... I could probably migrate to github. But would you explain why the platform (github vs bitbucket) is important (why would it raise questions about the product being dead / unsupported)? 
Hmm, well with large files and many iterations it seems I am doing something wrong because from slowest to fastest benchmarks ended up being (consistently) my implementation (\~50% as fast) &lt; ```Task.Run()``` (pretty close but still slower) &lt; sync. My guess for these results is: 1 the test is poor and I should be using many smaller files (in which case Task.Run() will probably become the fastest, followed by async and finally sync. 2: I'm not writing my library right, or I don't know the situations it is going to be useful in.
This is not correct. The "looking very fast" has to do with the query plan already being compiled and cached, as well as recent data being present in the cache. These things are not affected by the lifetime of the connection. 
You don't necessarily need to use a class / property to determine if your TS server is up are not, if you aren't able to connect, it's probably down right? This is actually how UDP Pings work. When you send off some UDP packets to a router or server, and receive an ICMP Unreachable back, you know there's something there - if you don't receive anything back then there's nothing up at that IP address! (or listening at least) 
I think both of you are thinking that I feel this way. I also created some opensource projects: https://www.nuget.org/packages/ApprovalTests/ I am simply reporting experiences. I big concern for people with OSS is how good it is and how long it will be around and supported. Part of that is how many other people are using it and how many others are contributing to it. But other factors are how many pieces conform to the 'normal' 
Ah that makes sense, thank you.
Feel free to like the comment from lloydjatkinson who pointed this out on the issue page!
This might actually be correct, but may depend on column types of MessageFolderId. The first query uses &amp;&amp; and ||, but translates to SQL 'AND' and 'OR', which have different semantics than C#. SQL evaluates both sides of AND and OR, while C# has short-circuit evaluation and will avoid evaluating the right-hand side of &amp;&amp; if the left-hand side is false, and similar with || when the left-hand side is true. Yet nothing is being evaluated in C#... so its all SQL semantics. However, when you use the conditional operator (ternary) in the second query, the generated SQL uses a CASE expression. This expression is going to have very different behavior than AND and OR in SQL. It's only going to evaluate the THEN clause for the first matching WHEN clause. Thus making the evaluation more like C#'s short circuit behavior. So what you think are equivalent expressions are only equivalent in C#, not SQL. So why does it matter? It can matter based on the column type of MessageFolderId and possibly whether there is an index. If the query engine is always needing to evaluate the full expression, the lack of an index or having a large data column may make a huge difference in execution speed. Based on the actual data being queried, the query with the conditional (CASE in SQL) may not need to do so much heavy lifting. 
Other way around, MockService is passed to the ViewModel.
Don't see the benefit of this tool, just makes it look like a circus, doesn't increase readability in my opinion
You can teach a man to fish without being a cunt about it.
For others... [Brilliant.](https://dotnetfiddle.net/mCNxAv)
I bet you'd get all the karma if you make a separate post.
 class ViewModel { ViewModel(IService service) { //set fields from service values? } //ViewModel fields } Like that?
Apologies but I'm not sure how else to put this. First and foremost, it will very likely be running in environments without .net. I also would like to add some complexity to the executable to make it more than trivial to decompile, and therefore rip off or patch my application. I understand this will happen anyway, but I think an effort should be to put would-be crackers off. 
If it's for logging then this most likely represents thr decorator design pattern.
Does anyone have experience with [Certum](https://en.sklep.certum.pl/)? They seem to charge only [28EUR per year to open source projects](https://en.sklep.certum.pl/data-safety/code-signing-certificates/open-source-code-signing-926.html), which I'd qualify for. What I don't understand is their talk of card readers and crypto cards: aren't Authenticode certificates just plain x509 certificates, and managed the same way as SSL ones?
IIRC (been a while) - There's a single flag within the certificate that authorizes it to be used to authenticate code. There's also a timestamp server address that allows the certificate to be valid even when the certificate that was used to sign the code has expired. Code signing is effectively perpetual. Also remember that Authenticode is a Microsoft technology, you need to make sure that the CA is authorized by MS (these CA are not the same ones used for SSL). This and the flag is why you cannot use SSL certificates to sign code. Are you sure you need your code to be signed? Most Open Source code doesn't need to be signed (it doesn't mean much to most people who know what Open Source software is). You could get away with signing the binary's (or their hashes) with your GPG/PGP key. This is what a lot of projects do.
I think you need a DataGridView control.
Not sure I understand exactly what you're asking. If you want to see if `hand` has an entry that matches some arbitrary criteria, you could use the LINQ `Any` method: if (hand.Any(handCard =&gt; handCard.Suit == x.Suit &amp;&amp; handCard.Value == x.Value)) { valid++; } EDIT: If you do checks like this often, you may want to look into overloading the various equality operators or overriding `Equals` or adding a simple `Matches(Card)` convenience method which does this work for you.
The idea here is to change the colors however you want. When you install it, it doesn't touch any colors, but you can change them the way you want, for example I use it just for extension methods and structs, anything more than that is gaudy.
Is this for Winforms, WPF, ASP.NET web forms, or ASP.NET MVC?
It would need to have been baked into the way the controls were made. Windows forms will take the current windows theme setting in controls which define their colorscheme the same, but in terms of chromifying the windows and forms, you're fairly limited. There are probably some solutions on codeplex/github that use the DWM (Aero style win7 theme) but they all generally have a bespoke skin. Best bet is to use a pre-rolled commercial solution. Complexity will probably be added with supporting the various windows platforms. For example: [ComponentOne](https://www.componentone.com/Studio/utilities/ThemesWinForms) [telerik](http://docs.telerik.com/devtools/winforms/themes/using-default-themes) [DevExpress](https://documentation.devexpress.com/#WindowsForms/CustomDocument2399) 
&gt;Windows 2000 is the only version that does not come with .NET installed. So that's what you're targeting? Check this out: https://blogs.msdn.microsoft.com/astebner/2007/03/14/mailbag-what-version-of-the-net-framework-is-included-in-what-version-of-the-os/ Note that many of these versions of Windows give the option to as to whether you install .net or whether you would like to remove it. In my case the environments these boxes are in will almost certainly - regardless of usability - have .net removed. I'm targeting every version of Windows I can get my hands to test if my app works. 
Why the fuck does someone remove .NET, it's an OS level component and is critical. Removing it will literally break parts of Windows. Just because you "can" remove it doesn't mean you should. Do you randomly remove COM or some drivers for the laughs too? You need to tell whoever is coming up with these ideas they need to stop thinking its 2005 still.
Why are you getting so irritated? I'm not trying to provoke anyone. If you can't or don't want to help I'd rather you not respond than take time out of your day to get angry about this. I appreciate your time, but please don't get irritated.
I probably do not understand what you are trying to do. But from what I think I understand, you would use a DataGridView control to show a grid of all of the data in your table. Columns might include first name, last name, company name, street address, city, state, and so on. You can use data binding to get the form to be populated automatically. You select the person you want by clicking or double-clicking on the row that you want. If that doesn't fit your need, please explain in more detail what you're trying to do. 
ComboBox itself doesn't do columns. You could try this approach: https://www.codeproject.com/Articles/3206/Multi-Column-ComboBox
Ok, if you were creating a sales order for a customer. The first thing you need to do when creating a sales order is tell it who the customer is. So on the order form, you will need to somehow put that information on the order and logically it would be some sort of a lookup. In c# it seems that the combobox is the common feature for this. It doesn't make sense to enter all the customer information every time if they are a repeat customer. This is were I get lost in C#. I don't know what the common practice is for this type of lookup. My really old programming environment (Topspeed Clarion) was really simple to do these things. Thanks for any further advice.
WHAT?
No, I am making a [UWP app that is meant for sideloading](https://github.com/Aftnet/LibretroRT), since Microsoft won't allow it in the store. As such, I need to sign the appx package to allow people to install it. Also, as a rule, I believe all binaries should be signed in this day and age: there have been multiple cases (Handbrake/Transmission to name just some of the biggest ones) of open source software being laced with malware and distributed *from the official websites*. Not signing one's binary releases puts users at greater risk - I personally am getting increasingly less willing to run unsigned binaries. GPG/PGP is a usability clusterfuck and not worth touching.
Check out the Clean Coders videos by Uncle Bob. They are kind of cheesy but they do an awesome job with the SOLID principles. https://cleancoders.com/videos/clean-code/solid-principles EDIT: Warning: Uncle Bob uses Java in these videos, not C#...but it really shouldn't matter.
I've had deployments delayed hours while I sit and restart builds over and over when they die with no explanation (even in verbose). I might run it 10 times and then the 11th will work with no change. I know the command line tools. One of these days I'll move it back into teamcity with the rest of our builds. I build the same solution in TC to publish some nuget packages to our private feed.. TC builds the solution 4-5x faster than AppVeyor too (just the build and test runs, apples to apples), and TC costs us less including the cost of the hardware we run it on (spread out over the length of time it lasts vs AppVeyors ongoing cost, if we had all our builds in AppVeyor it would cost much more). Just my experience.
I'll take a look at this. Thanks.
I think a colleague at work uses it. So it is useful for some people. Does not resonate with me though. I would even say it does (for me) exactly the opposite of what it supposed to.
I've got addicted to this kind of coloring by an extension called Supercharger, it colors constructors, methods etc, but it's premium. I think it always depends on what someone is used to, I also think that if we have small classes and methods, in other word we have SOLID code, these kinds of coloring can be superfluous, but coloring different kinds of methods really helped me skim large block of code faster.
one thing preventing us from using rider is the lack of package manager cnsole - all our build and test scripts run from there. not sure if that applies to you though
Not quite a Visual Studio replacements, but give [VS Code](https://code.visualstudio.com/docs/languages/csharp) a try - it even supports [debugging](https://code.visualstudio.com/docs/editor/debugging) (and funny enough supported OS X debugging before even Windows).
Removed: Spam. Enjoy the permanent ban.
What file is in use, can you be more specific? The excel spreadsheet? If so, doing the equivalent of VB GetObject("file.xlsx") should give you access to the currently open file. Is that not the case? (It's been a decade+ since I last did these things...) That said, if a user terminates a process forcibly, they should know strange things could happen, I do not quite understand what other expectation they have? As for "file in use", (generally speaking), your program should deal with that situation anyhow - so file is in use, if it can't open it, it should report that to the user and that's it. The program could try to find what process(es) keep the file open, but should mot try e.g. to terminate them forcibly. First, that is bad form and second, it is impossible in general case (e.g. can't terminate a process of another user, not without admin privileges, which really doesn't seem to be the case here.
You just have to add a public method called Equals to you Card class that has "override" in front of the definition. But in reality it is a bit more complex. There is a very thorough article about Equals on msdn: https://msdn.microsoft.com/en-us/library/bsc2ak47(v=vs.110).aspx
Isn't package manager console just a powershell window?
You get into a whole host of issues with using COM interop like you are when using the Excel interop. I would suggest looking at EPPlus: http://epplus.codeplex.com/ No child processes spawned, no hanging COM objects, etc.
The two big ones that are preventing me from giving it a fair shot as my primary IDE: 1. On Linux, still requires mono and msbuild to be installed in order to compile instead of the dotnet cli tooling. 2. As already mentioned, debugging is not available on Linux. I can't _wait_ until I'm able to give it a fair shot though. VS2015/17 have been driving me bonkers. To be able to still have the conveniences of ReSharper without the bloat or requirement for Windows will be amazing. edit: just saw a reply on one of the other posts that debugging is back. didn't realize a new EAP dropped yesterday! nice.
That is a very good read and I thank you for your input! 
Yeah i'm starting to realize that the more i fill this code lol, its my first time using the Excel interop. I was using the Excel Data Reader package which is incredibly useful and doesn't use the COM interop but my issue with that is it does not include any writing capabilities which is something i need to do. Are you familiar with EPPlus? Is it easy to use for read/writing? Thanks for your input, it is much appreciated!
Doesn't support Service Fabric, which is a deal breaker for me. Would have otherwise jumped all over it instead of sticking with VS in Parallels. 
with several extras that are specific to nuget and vs- you can ./ load scripts that are included in nuget and/or chocolatey. we load about 50 of them through there.
This is the correct answer. I'd really suggest implementing Equals, GetHashCode, the IEquatable&lt;T&gt; interface, and the == and != operators on your Card class/struct. This makes equality "just work" throughout C#.
Why did you decide not to use visual studio online for the build process? Just curious
Did you look into Change Data Capture? https://docs.microsoft.com/en-us/sql/relational-databases/track-changes/about-change-data-capture-sql-server It works, but there's a couple of gotchas 1. If you change the schema, you have to drop and re-add the change tables (there's a sproc to do this, but you'll have to save any existing change records yourself because the sproc will clear them) 2. There's a SQL Agent Job that posts the changes, so you have to wait for it to run before seeing the Change records (it's normally pretty quick though, but the delay exists). 3. It stores the before and after values for a row, but you'll have to write your own code to make it user-friendly (i.e. filter out the values that didn't change in the row) 
I can override operators such as ==?
Absolutely. Normally, I'd advise against overloading operators (people tend to abuse them), but for value-like types, == and != make a lot of sense (note that you always have to declare them both, you can't do one or the other). See the documentation here: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/overloadable-operators
Try eap 23. They fixed debuging and you do not need mono anymore.
Why do you consider it poorly written?
First if all, because they gloss over the important lessons about how to recognize design patterns and develop domain specific pattern languages. There is a little in the introduction, but not enough to even prove that the authors understand it. As for the patterns they do identify, well they're meaningless without context. You can't properly evaluate the tradeoffs involved without knowing the capabilities and limitations of the programming language being used. A pattern that works well in one language may be unnecessary in another and downright harmful in a third. 
Thanks for your helpful advice! Hoping you can provide some more :) I've worked in three asp.net shops over the past five years (using both c# and vb), and don't really feel like I've grown at all. Really, I've just accumulated very specific subsets of .net experience that helped me in my role, but none of it really translates to a strong mastery of c# or .net. Sob story aside, I've recently felt more motivated to work on a side project to help fill the gaps, and could really use some advice on where to start beyond just building some CRUD apps. Should I buy a book, and if so, which one would you recommend? I don't fancy doing intro tutorials because I know I already somewhat understand OOP and c# basics. As far as full stack mastery goes, should I work on filling my gaps of c# and .net knowledge side by side or should start with c# first? I don't know enough of the .net stack to know what path I should take to fill my gaps... any advice you can offer?
Don't really know wtf I'm doing. AMA. Also, if anyone wants some user flair, just ask. EDIT: Also, [Yoda conditions](https://brunocapuano.files.wordpress.com/2014/05/image_thumb3.png?w=456&amp;h=169) are best conditions, but I never use them in C# because I don't need to because I can't accidentally assign in the condition! Take that JavaScript! ^^^Unless ^^^it's ^^^a ^^^boolean.
We also have all our other builds in TeamCity and that works well for us. I don't like adding more tool chains and increasing everyone's cognitive load unless there's enough advantage.
uhhhh something something C# &gt; Java ? 
Only if you overload their operators. EDIT: public class CSharp { public static bool operator &gt;(CSharp daBest, Java lolJava) { return true; } public static bool operator &lt;(CSharp daBest, Java lolJava) { return false; } } public class Java { public static bool operator &gt;(Java daBest, CSharp copycat) { return true; } public static bool operator &lt;(Java daBest, CSharp copycat) { return false; } }
You forgot generics that work
DefaultBaseAbstractStrategyFactoryBuilder... Am i doing this right?
 public class Mod { public bool ApproveComment(Comment c) { if (c is ShitPostComment) { return true; } ModTools.Ban(c.User, reason: "Not shitpost!", duration: TimeSpan.FromDays(365)); return false; } }
Take a look at [AutoCompare](https://github.com/StevenGilligan/AutoCompare) I built this library with exactly that scenario in mind. You get a list of Differences with Name of the property, OldVal and NewVal. At a previous company we used AutoCompare to create an audit, we would simply save the result of the Compare in json since it's a very simple list. We'd do just a little bit of formatting when viewing the audit. Only admins and support people had access to the audit on the app so it didn't have to be super fancy but it worked really well. 
how high are you
About 20 stories. EDIT: 19 because we still don't like having a 13th floor. EDITx2: Ayyyy, off-by-one error!
I would have also accepted "yes".
Can I get "WebForms Master thanks to Expert Sex Change" as my flair?
Can I have "Working with SharePoint made me treasure life"
&gt;DefaultCompositeBaseAbstract**Facade**VisitorStrategyFactoryBuilderSingletonProviderAdaptor**ProxyObserver** I thought of a couple more...
Shoot, I always forget to wrap my `VisitorStrategyFactoryBuilder`'s in a Facade
but its much better marketing to say "You don't need visual studio anymore, buy our product instead."
I'm not surprised. You can see the Unix mentality all throughout VS Code.
Maybe you misread the sentence? It's not saying you couldn't build without VS in general. It's saying Rider couldn't.
Can i get C# Is The New Kotlin as my flare 
Can i get C# Is The New Kotlin as my flare 
Can i get C# Is The New Kotlin as my flare
Can I have 'C# run, run # run' as my flair?
Can I have "null" as my flair? 
Brings back memories: http://discuss.joelonsoftware.com/default.asp?joel.3.219431.12 
Did you debug to make sure the loops are executing? Also, you mentioned hour debug folder, the second snippet is pointed to a file on your desktop.
To test that the loops were executing i outputted the data into a text box on form1. This worked for each data type and i got a complete list. And yes for the second snippet I was checking the appropriate file. Thanks for reply
Your insert statement looks a little weird, like you used pluses instead of commas for the column delimiters
I tried to change the pluses to commas but then the OleDbCommand becomes invalid and underlined in red
* [MonoGame](http://www.monogame.net/) which is a framework. * [UnityEngine](https://unity3d.com/) a full game engine where you use C#. * [Xenko](http://xenko.com/) another C# game engine. * [SFML.Net](https://www.sfml-dev.org/download/sfml.net/) bindings for the popular C SFML library. Out of all these options, you will probably find the most resources (videos, tutorials) for Unity and MonoGame. I would suggest using Unity, as it will get you putting things on the screen faster.
They're releasing beta builds a few days after the windows release. There's a forum posts which has all the info [here](https://forum.unity3d.com/threads/unity-on-linux-release-notes-and-known-issues.350256/)
Awesome! Thank you!
Just this part? Altitude+Temperature+WindSpeed To Altitude,Temperature,WindSpeed It's all in a string, so unless you are changing the pluses used for concatenation, there shouldn't be an error. 
I use ValueTuple, but that has been available through NuGet for a while now, if .Net 4.7 was the only way to get that then it will be worth it. I guess I could get it on the server, then when I have time I can upgrade the framework of the main project, then whenever I work on one of the sub projects I can move it it over one by one. Like I said in my previous comment, the only thing I would be interested in is any built in performance improvements, even if small. I already have ValueTuple, and as far as I know there are no features like async/await or Linq that make moving to a new version very much worth it. 
From this I learned that the outputted SQL can be wildly different if allowed to do comparisons on its own, and in future will use the more optimized version where the result of the comparison is passed through instead. If you want something to play with, Google up parameter sniffing, and how adding &gt; \+ "" + Or &gt; \+ 0 + To the middle of a LINQ statement can make it run significantly faster :)
If you hover over the variable storing the query before .ToList()'ing it at a breakpoint, you can get the generated SQL from there as well. No need for LINQPad :)
Yes and no. It gives you the SQL, but it's parametrized and none of the parameters are part of it. Sometimes what value and what type those parameters are is important. LINQPad gives you a script you can copy and paste into MSSQL Manager and execute.
Most definitely. I started a WPF application in hoping to sell shortly.
If you dont want to roll your own solution, check out [Lidgren Network](https://github.com/lidgren/lidgren-network-gen3) . Essentially you can implement like AES as an addition to the already existing algorithms. For authentication I always favor token based authentication :)
I think it all depends on your level of abstraction. Not the best example, but imagine a XmlParser class. At one level of abstraction, it has a single responsibility: parse XML. At a lower level of abstraction - depending on implementation - it could have multiple responsibilities. If XmlParser reads an XML file from disk, validates it, and parses the contents then you could argue it has three clear responsibilities, perhaps more depending on what sub-tasks make up each of the above tasks. If a view model is getting complex enough (it should just be a model of the view state delegating most work to the model), you could consider a view model hierarchy. I can't think of any good and small examples right now, but if several properties in a view model are tightly coupled and conceptually separate from the rest of the view model then they could potentially be grouped into their own view model which the main view model has a reference to - promoting reusability, better unit testing*, and better adherence to SRP. * This won't make unit testing better, but it means if you were to write unit tests for the entire class then the tests would have a narrower scope and deal with less (or just one) concept.
One of the first things you should do if investigating SQL Server query performance is analyze the query plan. It would likely have been clear very quickly had you done so, or for others had you included more relevant information here. Everyone apparently wants to shit on me for saying that bluntly, yet not a single person here was able to lead you in the correct direction (beyond gather more info) with the information you provided. &gt; + "" + Or + 0 + But did you learn *why* adding this changes the performance? And if so, why not use something proper like a query hint or option to recompile? This is an ugly hack and may cease to have the same effect in the future.
I don't really want to roll out my own solution if someone else did it for me ;-) Will take a look to your answer, also to the WCF. I want to avoid 3rd party libraries if possible. 
Have you already thought about which security properties exactly you seek to achieve and what kinds of attacks you wish to protect against? Encryption for confidentiality and a MAC for authenticity are obvious and fairly easy to implement, but on their own will not prevent replay attacks, for example.
There are other self hosted options, I think NancyFX has dome of this as well. Could also look into WCF self hosting and setup restful endpoints. You have a few options for this kind of thing.
Well, it should run on Mono and should be portable also to mobile devices. Maybe I should have mentioned that before. Nancy sounds good
like what?
Removed: Rule 4. Please include the errors you're receiving. At first glance, I see you have two `else` blocks for your `if (position != -1`). You can't have that. Guessing from the code there, I suppose the `else boySearch.Text("");` is old code; try removing it.
Yeah buddy, I've fixed the two issues you've mentioned since. I reposted the thread. Sorry about that.
You're looking up the wrong list/variable. int position = boyNamesList.IndexOf(boyName.Text); Here, `boyNamesList` is your `StreamReader`. What you probably wanted was your `boynames` which is a `List&lt;string&gt;`. At minimum, I would suggest that you rename your variables to be `boyNamesStreamReader` and `boyNamesList`. Should be less confusing and less likely to accidentally reference the wrong one. Ideally, you'd move the reading/construction of the file to its own method and separate it from your UI concerns. That way your higher level logic might look like: List&lt;string&gt; boyNames = ReadNames(@"C:\NameSearch\BoyNames.txt"); List&lt;string&gt; girlNames = ReadNames(@"C:\NameSearch\GirlNames.txt"); int position = boyNames.IndexOf(boyName.Text); Much more readable/understandable, and you can reduce some of your code duplication reading the files. Also, if you don't care about the position of the name in the list and just want to check if it _exists_, you can use the `Contains` method instead: bool containsBoyName = boyNames.Contains(boyName.Text); if (containsBoyName)
EDIT: gosh I am a fucking moron, the only reason my program was not working, is because I had my UI elements set out of order, and I was inserting an argument into the wrong one.. Thank you so much for your help buddy! definitely helped me get this done much more effectively than I could've imagined.
1) no. I could give you more info but what kind of game are you making? Sure they have html games but webservers don't see to fit what you are saying.
This might be what you're looking for: https://msdn.microsoft.com/en-us/library/system.net.sockets.socket(v=vs.110).aspx
Removed: Rule 4. Please include the _full_ error message and associated line.
There are no errors?
At the time of posting you had complained of "invalid token" errors. Your current code has a `presentValue` method, but you don't call it or use it anywhere. 
Haven't looked into Rider yet. Does it have a XAML editor?
Read the .NET Framework Design Guidelines, 2nd Edition. It will explain the fundamental design patterns used in .NET.
C sharp in depth 
Yes! Ignore the other answer where they recommend that you jump in with ASP.NET MVC. You need to learn the language properly first, otherwise you'll end up writing crap code. C# in Depth is an excellent resource. It might also be worth shelling out for a Pluralsight subscription, or at least, taking advantage of the free trial. They have plenty of C# courses targetted at different levels. Those produced by Scott Allen are pretty good. For example: https://app.pluralsight.com/library/courses/c-sharp-fundamentals-with-visual-studio-2015/table-of-contents
This course for absolute beginners is a nice one tho. It will take 1-2 days from you, butt will give you some solid ground if you are fairly new to C#
&gt;My recommendations were based more on learning as you go kind of deal. Sorry mate, I didn't mean to come off as being harsh - I've just woken up and haven't had my coffee, so I'm still in grumpy mode. Learning as you go is, actually, a good option as at least it will keep you interested and you can see results much faster.
Get a pluralsight.com account for 6 months. 
How to program in C# - Beginner Course: http://www.youtube.com/playlist?list=PLPV2KyIb3jR6ZkG8gZwJYSjnXxmfPAl51 
OP, what you described looks very much like XY problem. You are probably trying to sovle problme X by using Y, and you ask here how to do Y. But Y might not even be a suitable solution for X, or there might be better alternatives. I would recommend to describe the whole problem in detail when you ask questions in the future, it clears a lot of confusion and makes helping you easier.
so , I am going to assume a few things since I don't have enough detail. You mention authentication and delivering of files. This sounds like a model similar to an mmo launcher. If I am reading between the lines correctly, you don't want the whole game this way but just the launcher. Can a webserver provide this functionality? yes. But I am going to throw a few things at you. The webserver is kind of like a hammer on a screw type of situation. 1) Most games, like an mmo, that provide updates constantly deliver these file sin a p2p manner. They do this because it drastically cuts down on time to download. 2) you also don't need all the overhead of a webserver or its restrictions. /u/Aaron64Lol was right in pointing you to sockets. You need something small and simple and the ability to use any port or protocol you want. 3) there is no benefit to using a webserver. You have to write more code to comply with http and you are writing a layer on top of a layer. Remember the web is an application on the internet. Why write your stuff on top of something else. I want to help you more but without specifics its really hard to say. This also might not be the best subreddit for this question. /r/gamedev will have solutions that our tailored to games and not enterprise. 
It actually starts at the basics and his writing style is absorbed so easily. New version out next year, but it's a brilliant book. It will work well as he's experienced too.
Get a developer essentials subscription from Microsoft (free) download everything, sign up for all the free training provided at places like PluralSight. Question: Why are you coming over to C#? It's a great language, I'm just being nosy as I tend to hear of people going the other way. That's primarily because I know them from C#, so those are the cases I hear of. And books C# in depth for the language and environment, from there really it's easier to just get stuck into coding.
Well, you're right. I should add more information. It should be a multiplayer game similar to Minecraft. It should be possible to host a server somewhere in the internet, but it should also be possible to start a local singleplayer game. But in singleplayer is also a client and a server process. If the client starts a game he downloads all kinds of media files like textures and audio files, but only if the files are not cached at the client. I'm planning to compress the textures and create a checksum. Before the client starts a download he compares his last checksum with the current on the server. As long as it is the same, no download is started. That's my plan. With p2p you mean something like BitTorrent?
ok, that helps steer the conversation a bit. Why are you trying to have the server deliver files? Only a launcher would be responsible for tasks like that. You never want your game server to also be a delivery method. These games are provided as a game, with all files intact. The multiplayer server is used to deliver messages back and forth.
The client is dumb. All informations about a game came from the server, including media files. If you connect to a different server you probably get totally different files. And the game server itself shouldn't deliver the media files. The web server is a separate process or task which enables a game hoster to use a separate server for media files. It doesn't has to be a web server, but it could make some things easier. A game hoster can use e.g. a shared server with Apache or Nginx to provide media files. That was my idea behind the web server
&gt; but it could make some things easier I think the opposite. Its easier to stream binary using or own solution and to pause and pickup where you left off. I get the feeling you feel like it's easier because you could drop a file in a folder have a client download it. But what happens if they only need half of it?
Ok, how could my own solution look like?
You get some pluralsight access as part of Visual Studio Essentials. https://azure.microsoft.com/en-gb/pricing/member-offers/vs-dev-essentials/ Also, the Virtual Academy from Microsoft is free and has some good content.
I do recommend reading https://www.amazon.com/TCP-IP-Sockets-Practical-Programmers/dp/0124660517/ref=sr_1_1?ie=UTF8&amp;qid=1497880479&amp;sr=8-1&amp;keywords=c%23+tcp%2Fip its a very short book and would help a lot. 
O_o k...
Fixed. Agreed and good feedback. I've seen many projects where the model and service folders are 20+ classes deep. When projects start to get that big, separation into class libraries is needed (Business, Util, DTO, EntityModels, etc). Trying to avoid that as they also get unorganized over time. Open for suggestions for a better structure.
Sorry for the stupid question: looked at the index and it covers async but no trace of Threads. Are Threads in there?
Start with `System.Net.Dns.GetHostEntry()` This makes some assumptions, but you'll be looking for something along the lines of `System.Net.Dns.GetHostEntry("www.google.com").AddressList.FirstOrDefault()?.MapToIPv4().ToString()`
To give you an idea of what I am trying to accomplish: I am trying to make a simple form app that inputs data into a database. All works fine except for the connection, for some reason that I was unable to find so far I can't connect using the localhost name \ instance as a data source. It works perfect with IP \ instance. So what i am trying to do now, is create a variable of the ip by finding the ip of the local host that the database runs on and create a variable data string. Is probable stupid but at the moment is the only thing I can think off.
Well it's a good thing you didn't include any of that relevant information in your question. /s 127.0.0.1 always refers to localhost. Your DB server might not be bound to all IP addresses on the machine. You of course didn't bother to mention what DB server or OS so there's little more to offer you. ipconfig on windows and ifconfig on linux can get you more information about the IP addresses configured on your machine. I think you might also be misusing the term "local host" which usually is "localhost" and refers to the computer something is running on, not "across the network". At this point I'm not really sure what you mean so the above is irrelevant if you're still talking about a computer "across the network". (and if you are, you're might be referring to the NetBIOS name which often can be resolved to an IP address through DNS as I showed further above.
Pretty sure this should do it! Dns.GetHostAddresses("workstationname")[0].ToString() or if you are looking for the ipv4 Dns.GetHostAddresses("workstationname")[0].MapToIPv4().ToString(); 
The purpose of the book is to fill the gap between a beginner's introduction and the language specification. IMO an experienced object oriented developer will do okay with C# 1.0. Read up on managed code and take on the evolution of C#, with this That was my thinking when recommending this resource. 
I can't understand what he's saying but going to attempt it like this. https://www.youtube.com/watch?v=yZaiQEBKAI4
[removed]
If it's non linear regression you could look at machine learning in Azure its built in.
I've never even heard of CPLEX but it's IBM so if that's not a bad sign I don't know what is. Have you had a look at this? https://www.mathdotnet.com/
And once you finished it, read [Jon Skeet's Edulinq Series](https://codeblog.jonskeet.uk/category/edulinq/) (OK, you may peek as you like). If you should feel the need for a more basic book, consider borrowing _Head First C#_ as it is written more like a textbook with exercises. But you want keep _C# in Depth_ which is kind of the reference.
If you can formulate your problem as a LP or MILP problem (in MPS format for example), then you can submit it to [NEOS](https://www.neos-server.org) to test the problem's performance and solve it using a sample of solvers. No need for purchases to test that stuff. Cplex and [Coin-OR's CBC](https://projects.coin-or.org/Cbc) are great for solving linear and milp problems. Thousands of hours have been invested in designing and optimizing these programs. They both have numerous extensions for other types of problems (check if you can find what you want on https://www.coin-or.org/projects/ ). It's a very high bar to beat. Cplex is definitely not cutting out the math guy, because how you formulate the problem is an essential part of how fast it's solved: Can you scale all the input correctly? diminish pre-solve time by using known properties? can you create a band structure to define your problem in a sparse format? Speed up solving time by providing a good initial valid solution? Pre-compute some properties that are expensive? Eliminate redundant variables and constraints? That's the task of a mathematician. If you have a very specific small application where you can take shortcuts because you know the problem's details and scope, you might be able to beat cplex and CBC, especially if you have a dense problem. We used have Fortran parallelized with OpenMP to solve dense linear problems with a known presolve to get a result faster than generalized solvers, but first we implemented the stuff with standard solvers to check the performance. That work was done by a mathematician and a computer scientist over a couple of years to eek out better performance. My gut feeling is that doing it in a high level language like C# is not going to beat existing solvers. If you want, you can define your problem in C#, for example google has a set of nice tools to help do that with their [Google OR tools package](https://developers.google.com/optimization/). I've used it to setup models. Then you write out the problem using their interface and call solvers. Now my experience with non-linear models in LP / Milp is mostly solving by linearizing and iterating till the solution converges, you'd have to describe your problem a bit more for me to give more help. But for non-linear problems, have you thought about dynamic programming to use as a solver? We use [DP Backward/Forward induction](https://en.m.wikipedia.org/wiki/Backward_induction) to optimize stochastic non-linear problems like Hydropowerplant scheduling and other energy assets. Finally, yes, you can probably do it, with enough time, but isn't your time better spent improving the process formulation than writing a solver?
Non-Mobile link: https://en.wikipedia.org/wiki/Backward_induction *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^81821
CPLEX was bought by IBM - not created by.It is actually very very good for a wide range of complex optimization problems as the top comment describes 
I use various website like codeproject.com dreamincode.net http://www.c-sharpcorner.com/technologies/csharp-programming And there various sites where you pay https://www.edx.org/course/programming-c-microsoft-dev204x-3 There are also book sites where you can download c# and many many other books, pdf, azw3 etc etc 
Sadly this pattern becomes less useful when you start extracting layers in a separate assembly. That being said the default MVC structure is out right stupid. A Controller should be in the same folder as its related views and viewmodels but if you try to do that the rolling will fight you. Best you can do is use areas.
If this code is copied verbatim from whatever you are making, the problem seems to be that you are trying to assign a value to svar without specifying what type it is. You can't just do that, unless you have instantiated it previously in your code. If that is the case, and even if it is not, use the Int32.TryParse method instead. It assigns your variable the "converted" value, and returns a Boolean indicating whether the operation was successful or not.
For arrays, the JITed code should only address the header and actual element you are accessing (+/- a few bytes for word alignment, but that shouldn't matter for longs). However, the OS manages memory as eponymous "pages" a few KiB in size, so if something is paged out it'll read the entire page at once. I'm not sure if I really understand what you're trying to do. So only the arrays with a non-zero value for their last element matter and the others are discarded? Where are these arrays coming from, the disk? Can you just read the final element first and check it before you read the entire array into memory? Also, this is not directly related to your question, but if you're XORing large amounts of data you'll want to take a look at the `System.Numerics.Vectors` package if you haven't already.
Have you set a breakpoint and inspected the strings you're getting? Are the events even being called? Does `SerialPort.ReadLine()` return?
&gt;Is cplex simply cutting out the need for a "math guy"? Or is there some computational power in there that I am unlikely to mimic on my own? As a C# guy (and not a math guy, at all) I'd say the latter. First, cplex seems to be written in C so I bet they have gone a LONG way optimizing that suite on an already low level language, and a .NET program wouldn't be able to compete against that in a fair way (mostly due to the GC, which can be mitigated, but you'd still have to rely on the JIT compiler which isn't guaranteed to emit the fastest assembly for a given program)
I'll second the recommendation for math.net Im a c# guy not a math guy and math. Net is helping my current project
Sorry, I don't quite follow. What code/change specifically are you referring to?
 public T Value { get { WasGot(this, _value); return _value; } set { _value = value; WasSet(this, _value); } } Uhhh, the value can't change. It's being passed by value, not reference. If it's a class, it will be passed by ref and holding the value locally will do nothing. If it's a struct/native type it will be passed by value (copied) to the function. The original code would work just fine.
Seems like there's the possibility of an infinite loop there.
This looks like the observer pattern without the word observer used anywhere.
Yeah I agree, its really good to start off with a text book and that one is the best one that I have read. Skip all the books that are for beginners and intermediates. If you know JavaScript and PHP then there's no need for you to go to through all of that. Most of the concepts from those languages carry through on to C#, the only thing you have to get used to is having to compile your code and maybe having to use an IDE for development. C# is a wonderful language to learn and now is the best time to learn it. ;)
I mean the tutorials on ASP.Net are pretty hand holding, you might wanna start there if that's your eventual direction. https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/introduction/getting-started Start by making a hour registration/Support/ticket application or something if you wanna help out quickly with your company
Nope. Threads aren't a C# language concept - this book is all about the language itself. CLR via C# covers more of the .NET framework and runtime sides of things, and that would be a better bet to learn about threading in C# (along with lots of other stuff)
You get null reference exceptions whenever you access Value since the events aren't initialized. You need to call them with `WasGot?.Invoke(this, _value)` or similar.
I think what you did here is called the observer pattern, it's a pretty neat implementation!
Thanks!
you might not have linked up the close button event. 
&gt; My app will be running in AWS so I have all its services available to me. What are these tasks doing? Otherwise you could look into turning the tasks into AWS Lambda functions, and just trigger/chain those. Then you could also try orchestrating all the tasks by using AWS Step Functions
The point is kind of tangential to yours, but... did you actually determine the built-in class as a bottleneck?
Have you looked at Hangfire? Don't know about it's ability on throughput but it's a nice add-on. Some good developer activity so you can ask your question there also. https://www.hangfire.io
The first thing I would do would be attaching debugger and looking at the state of the app when it should bexiting, but does not. There migth be some cleanup method, which is called right before closing the app, and it loops forever, or in some other waz prevents the app from exiting.
Depending on what kind of requirements your app actually have, you could combine quartz with rabbitmq or reddis (for some sort of queue). So what kind of jobs are we talking about? Do they have to wait for each other before continuing? are they reoccurring? etc etc
Hangfire doesn't try to have a resolution that high for schedule​ tasks (maximum resolution is 1 minute, but it's generally non-deterministic). Hangfire priorities job durability and system reliability over raw speed.
We wrote a scheduler that can very efficiently trigger on sub-second intervals (TimeSpan), DateTime or custom constraints. We used it to index ~20k files periodically using immutable sets to minimize locking. I can put the source on github if you like.
I think learnitfirst.com has a video course on SSRS. Disclaimer: I learned T-SQL through their courses.
Yeah, that's a future project my company need to do. Not looking forward to it. The XML format of the report seems straight-forward enough but I think the interfacing with the Reports DB will be the fun part.
If you're already using AWS, is it possible to simply run more instances of your app using fewer jobs? It might be better for scalability to decompose your processes to a parralellizable execution flow if it's at all possible. 
So you're saying that the data type of the unique Id is not known? But at run time you'll need to create an object with that type? Sounds like a job for factories and dependency injection. 
Bitarray is an optimization for size... What are you trying to accomplish?
I need filtering in my reports too
I used to work at a company that used SSRS and wrote a good many reports with it. We used SSRS 2008. To learn it I used plural sight which I personally liked. I found it easier to write a stores procedure and use that to generate my dataset vs writing the sql query and pasting it into the form. 
In the lowest depths of hell. Source: I work in SSRS
&gt; I don't see how you could practically accomplish this. If you're allowing any IO, a script could always do something like File.Move("totallysafe.jpg" "evil.exe"); I plan to do a sweep of the files as they are loaded. I think I would look for 'prohibited' or 'restricted' operations and check their parameters; if any of them are defining something that isn't acceptable, the plugin fails to load. This will get weird if they get tricky with constants (though the specification for plugins could specify chaining constants is not allowable). &gt; Does CS-Script actually have sandboxing capabilities? Safely prohibiting certain calls is challenging to say the least. The list of abusable types and method is going to be near endless. Good question. I only know the basics of CS-Script. I'd hope there are some things that just aren't allowed.
Well, I can't say for certain if this covers all your cases of "dynamic reflection" in your application, but a starting point might be a simple "find in files" search for terms like: * `.GetType()` * `Type.GetType(` * `System.Reflection` (See "EDITx2") * `typeof(` * `dynamic` Hopefully that should cover quite a few scenarios for you. There may be others that I'm not remembering off the top of my head that other people are welcome to comment/add. EDIT: While I can't guarantee you that any hits against these terms definitively indicates dynamic/unsafe reflection usage, it's at least probably a good indicator for you to check out more deeply. EDITx2: With regards to hits on `System.Reflection`, if it's a `using` directive (that is, `using System.Reflection;`) it means that there are likely various reflection types scattered in that class, such as `PropertyInfo` or `ConstructorInfo`. You'll have to scour files that contain `using System.Reflection` more heavily.
Just curiously, are the names statically defined? If so, would replacing that with `nameof` fix things?
Removed: Rule 3. You could check out the resources available at /r/buildapc. Regarding your requirements, they're a bit high-level here but it sounds like you wouldn't necessarily benefit from the slightly higher single-core performance of the i7. Depending on how much you multi-task or how many virtual machines you run, you may benefit from the extra threads available in a Ryzen 1600 or 1700+. If you don't do too much heavy multitasking while programming and don't run any/many VMs, then a Ryzen 5 is probably more than sufficient and you can put the extra money into something that might benefit you more, such as a higher capacity SSD.
The problem with prohibited operation is that it is hard to find them. There are a lot of ways of obscuring code that makes it harder for a scanner to pick it up. The only way I think you'd be able to stop some of that is sandbox a process. https://stackoverflow.com/questions/1357231/restrict-plugin-access-to-file-system-and-network-via-appdomain talks about doing that via AppDomains, though I'm not entirely sure how easily it is to host a CS-Script in an AppDomain.
Interesting. I'm going to have to do some investigation.
Thanks for the suggestions! I'll start out looking for those.
I guess in Unity there isn't a global rename function?
Tested several frameworks but they all only seem to connect the elements diagonally. Forgot to mention that it should base on WPF
Have you used Elmah before? It has been a great tool for me for things like this. Just make sure to get the Elmah MVC Nuget package if you are using MVC.
Is it a old code base?
I do something similar in a commercial application i develop, however i used the Roslyn framework to compile packages (which are essentially zip files with some extra meta data - have a look at the system.io.packaging namespace). Using Roslyn has advantages over something like CS-Script since it produces a standard assembly which you can then run in an isolated AppDomain, and can be used to Sandbox the script, this allows you to limit functionality like IO to prevent the user doing things you don't want. The downside of this however is that if you want your 'scripts' to interact with your application you need to build a proxy which is exposed to the script and which marshalls calls between the appdomains (look into system.runtime.remoting and marshallbyrefobject)
p.s. I don't know if you know about this but it can be pretty cool: public void SomeMethod(object someParameter) { if (someParameter == null) { // $ = Allows you to refer to code elements // (values, method calls, LINQ statements, conditionals, etc.) // as long as they are within brackets. // // @ = Interprets the string literally (no more worrying about invalid characters) // and you can do multi-line strings without a + operator. // // NOTE: @$ is not valid; you have to have $@, @, or $. throw new Exception($@"In {nameof(SomeMethod)}: parameter {nameof(someParameter)} cannot be null."); } } 
That is pretty cool!
ARGH.
That'd be nice; seems like there are a lot of complaints about Unity lagging behind in the C# department. I wasn't having much luck finding out what current version of Mono they're using for the newest versions. I did find this though: https://bitbucket.org/alexzzzz/unity-c-5.0-and-6.0-integration/src
As /u/FizixMan pointed out, currently (but maybe soon!) Unity doesn't support C# 6.0, including `nameof`. HOWEVER, there are apparently some plugins available: https://bitbucket.org/alexzzzz/unity-c-5.0-and-6.0-integration/src
In what scenario are you envisioning trying to save the same object model into two different databases with different primary key types and why?
You need to do diagrams and want it really easy for free? Try violet (com.horstmann.violet java pkg) 
A quick way to narrow down the issue would be to subscribe to the FormClosing event and setting a breakpoint. If the breakpoint never gets hit then it would appear that the UI thread is being blocked. If that is the case, then try putting any expensive/long running tasks on a different thread, just remember to dispatch back to the UI thread if the view needs updated from the task outcome.
Create a string extension called EmptyOrZero() is how I would handle this 
How many lines are in c2.dat? And how many items end up in the urlarray?
When you call File.ReadAllLines(), what is the length of each array? Also, put a generic try catch around that foreach loop and put a breakpoint in the catch just to see if anything gets caught that you aren't seeing.
Not sure if these would be what you're looking for, but they are practical (even though others have them covered already) and they cover various topics that could be good to get some exposure to. 1) Photo Gallery * Can be very simple * Can be made complex with image editing, e.g. contrast controls/different filters * If you go for effects then you can learn how some common image processing techniques are achieved (they are easier than they look once you get a bit of time with them!) * Good practice for good object oriented design, should likely have multiple components that can either be done messily or designed beautifully 2) Secure note storage * Can be a simple data store that reads off disk if the correct login is supplied * Can be made more complex, e.g. hashing passwords, multiple users, encrypted file (or a database) * Can once again be a good project for improving project architecture.
I've always wanted to create an open source version of followthatpage.com. There are a few technologies involved that would be good to learn.
If I had to guess, your GetResponse needs to be disposed (Ideally via a using statement.)
Agreed. The Default Connection limit for an endpoint in ServicePointManager is 2 connections for a console app... which makes sense that it's hanging 'after 3 lines'. You don't see this as often with Web-apps, since IIS has different values for connection limits.
Drink Mix App. Plug in the alcohol you have and it will make drink recipes. 
This looks like shit. Don't organize your stack just so files are closer in the solution explorer. Jesus. Separate your layers, don't muddy everything up in monolithic dll.
This is awesome, as I'm new to the world of creating my own packages do you know of any similar guides for .NET Framework? 
I'm actually very curious to see this!
COM is likely one of the better options on both ends here. I've never 'converted' an MFC App to run under C++/CLI, but I can't imagine it to be a pretty process. I'm lazy, but this tells you how to do similarly frightening things via VBA + C#. The VBA instructions probably aren't worth much, but the C# will be of help. https://msdn.microsoft.com/en-us/library/bb608604.aspx
Jon Skeet and Scott Allen have top-notch Pluralsight courses. There are plenty of other C# courses on Plurasight that are quite good. I switched from Java/PHP to C# about two years ago. Pluralsight was the primary resource I used, along with a few books.
So looking forward to the day when I can do all my development in macOS or Linux instead of having to babysit a Windows VM.
We use AppVeyor for our Azure deployments and for Github CI and it works well. We used to use TeamCity running in-house, but got tired of maintaining our own CI solution. Probably the biggest complaint for us as a company is that AppVeyor doesn't support v2 API key pull from the private Nuget feed on AV. We'd love to move away from MyGet which is extremely slow, but MyGet offers API keys for pulls from the feed.
never trust users. Never. They will find a way to screw it up. 
Not sure if you mean "app" as in a smartphone app, but I'm pretty sure there's a website like it. Don't know what it's named, should be easy to google.
I am somewhat familiar with the concepts of securing an api using jwt. Can someone with more knowledge explain what OWIN does different than jwt and when to use one over the other?
Owin and JWT are very different concepts, Owin is a standard that aims to decouple applications from their hosting, for ease of portability. This SO article is a great start: https://stackoverflow.com/questions/20524060/how-to-explain-katana-and-owin-in-simple-words-and-uses To compare JWT and Owin, Owin is the layer that would perform authentication, and JWT is a standard for a token format that Owin could digest and authenticate.
Would be awesome if you could put it on github. Sounds cool. 
Alright, in that case i would say either test out Fluentscheduler (not sure how well it will scale tho) or Hangfire (which also can use Redis, rabbitMQ etc for reliability). I've been working with quartz earlier, both in an on-premise and azure environments, and so far I can't really recommend it. It really feels...legacy (somehow), and on top of that it can also have issues with keeping track of jobs (as you already encountered). Another thing about Hangfire, it really got some great documentations.
If you use Discord, it might be fun for you to build a bot that can get stats from video games you play and display them in your channel. Or maybe a website that can do the same. [Discord.Net](https://github.com/RogueException/Discord.Net) is a good C# wrapper for the Discord API. I have personally used it recently and it works well. [SteamKit2](https://github.com/SteamRE/SteamKit) seems to be a good place to start working with the Steam web api. Though I haven't used it personally, it seems to be currently maintained.
Its nothing drastic. Just changing the reference to where my css is. No big deal^^. Im pretty new to web design, but i thought it would look good for a resume. Once i get everything set up i plan to add angular or jquery to my project. So far its just html5 and css3. Also been using SASS. Can generate alot off css with less typing.
#Don't. Use the database API properly, which is to say: use the mechanisms it provides to send parameters with your queries and let it handle its own escaping. If you start manually puzzling your queries together like it's early 2000's PHP, you're headed for a lot of trouble. There is absolutely no reason to not do this, no matter who you think will be using your application, no matter how you think it'll be used - just use the parameterization.
I have to agree. I mean, if it were much more complicated to do with parameters that would an argument, but it's pretty simple, arguably even simpler and more readable than with raw strings.
Problem of SSRS is it's very good for simple things, but doing anything more complicated then what they with the MSDN examples it's like walking into a pit full of snakes. The only thing you can do at that point is hope someone has gone through the pain, and put it on the internet.
You can try my library: Its not really maintained anymore though https://github.com/toomasz/CaliDiagram
How exactly are you doing the database interaction? Back in the bad old days, people would often write database queries with parameters like this: `myQuery = "SELECT FROM x WHERE Name = ' " + name + " '"` This is a downright terrible idea because it's begging for an SQL Injection attack. Then for a while, people started escaping (hopefully - far from a safe bet) their input. The problem is: text is freaking hard. Waterproof escaping is harder. An example of the proper way to do this and some more background info: https://stackoverflow.com/questions/7505808/why-do-we-always-prefer-using-parameters-in-sql-statements
I had the MVC 3 version of this book, and it helped immensely. When I decided to take the plunge into ASP.NET Core MVC, I picked up the latest copy of this book. Other than being based on project.json rather than the newer .csproj, it helped me discover the differences between the way I used to do MVC to the current way. This book supplemented with the [ASP.NET Core docs] (https://docs.microsoft.com/en-us/aspnet/core/) got me up to speed quickly.
If you have ".aspx" pages instead of ".cshtml" then you are not doing MVC. I would recommend starting over with a new MVC project.
Is this a one off optimization? How long would you expect software like Cplex to complete it? It doesn't too hard to put together some unoptimized code to do an optimization problem. If this would solve your problem with a few days of running that may be easier/cheaper. It all depends of course how complex the problem is and how often you will want to run the solver.
I found this repository. https://github.com/LogicalError/Graph it is was a very good starting point. It is pretty bare bones but free to use or modify. 
Well I mean there could be a multitude of reason it didn't show it, but not because it wouldn't be able to host a web forms site. Index may not have been set up as a default document for instance. But if you just started, MVC is kind of a hard concept to grasp for new coders. Can I ask what the purpose of your site is?
I second the photo gallery! Its a really fun project and as challenging as you want to make it. I have a 30%-finished material design based media center app that started out as a prettier version of windows file explorer. organizes huge collections of photos and videos and allows fluid playback of 20+ videos at once arrangeable and dockable in weird configurations for people with a bunch of screens, particularly vertical/4k monitors for edgeless playback. My machine can handle a few dozen videos at once without issue but i havent tested it on a basic configuration or standard laptop. It uses FFmpeg and some VLC plugin magic to generates a multi-video arrayed thumbnail (a 2x2, 3x3, 4x4, or 5x5 grid of the video chopped up and sampled along the duration of the video). When i get around to finishing it i wanna have its own taggable collections and metadata system. Yes it is specifically made to organize and view your excessive pornography collection lol. Its a surprisingly difficult undertaking depending on how crazy you wanna get with it. Heres a super super old version of it back when it was just a file explorer but its all i have on me at the moment: http://imgur.com/a/vTp6J
Yeah.. this seemed to be what I had come up with finally, but, I am getting a [InvalidCastException: Unable to cast object of type 'System.Collections.Generic.List`1 Sigh, I wish I was smarter at this...
Overkill for XElement etc., honestly.
No, I was saying there is "not really" much of a difference. Usually you can split it up into multiple files to keep it DRY. e.g. &lt;layout.cshtml&gt; &lt;navigation.cshtml /&gt; &lt;login.cshtml /&gt; &lt;{modelView}.cshtml /&gt; &lt;/layout.cshtml&gt;
Thanks for the suggestions! Great work on that project! Looks really cool! Is this a universal windows app?
Removed: Rule 4.
Absolutely agree. Even if the sql statement is entirely hard coded and the parameters are supplied from non-user data I still parameterize the query. There is absolutely no reason not too. 
Go to a bar?
Looks interesting. Which devices can you build the game for and how is the performance compared to something like Unity?
I am actually not in control of the consumer of the interface, I am merely providing it and forwarding the updated information on to another party. I will most likely just be providing an endpoint and a json structure for reference, and thats it. 
Desktop platforms only, official support currently being limited to Windows - it has been reported to run on Linux / MacOS, but we're currently lacking devs to do the real battle testing and maintenance on that side. There are no Duality vs. Unity performance benchmarks that I'm aware of, but we're trying to keep things reasonably efficient and so far performance hasn't been a big issue.
Can it secure the plaintext app secret my co-worker put into main?
Thanks for the explanation! So does that mean that .NET itself doesn't add any features? It's literally just for compilation? I am actually learning primarily for use in web dev. I currently know a few backend languages but every position I see advertised is for C#. My confusion over the whole ecosystem is what has put me off for so long.
Well, the .NET framework itself includes all the additional libraries/features, etc. [Image of .NET Framework Versions](https://en.wikipedia.org/wiki/File:DotNet.svg) .NET is the framework that contains the CLR (Common Language Runtime) which IIRC is the actual virtual machine that MSIL is executed against. But .NET is a full framework, it has many features/libraries/etc. to be used with .NET languages (such as C# or Visual Basic). I can't answer any more than this though because I'd be lying if I said I knew!
[This](https://docs.microsoft.com/en-us/dotnet/csharp/getting-started/introduction-to-the-csharp-language-and-the-net-framework) doc by Microsoft will be much more help than I can be. Gives a brief overview of C#'s relationship to .NET. (:
It all depends on your needs and who you'll be working with (if commercial). I've been working solely with C# and I know very little about the internals of .NET but I would consider myself an above average developer. If you run into certain problems you google them and you may just learn something about the framework if it's appropriate, otherwise if you're developing C#, learn C#! In most cases the language designers have abstracted away the underlying framework for our benefit. (:
Lambda starts to charge for time on top of the request allowance/pricing after 100ms if I recall correctly. RabbitMQ And/Or Akka.NET are my votes based on what's been said.
Glad I could help! If you ever have to get an actual Data stream from the response, remember that it has to be read (and should also be disposed!) before disposing the Response.
more like a wrapper around the observer pattern that benefits from being generic so you don't have to cast it each time. I love it, there's always room for more more ways to get rid of repetitive code. i would also post an example on github: INotifyPropertyChanged or whatever vs this.
I'm never quite sure why "modern" is so often suggested over "popular" Nancy is fun to learn, MVC is much more likely to get you a job - and OP asked about advancing their career. 5 seconds on SO jobs shows that most .Net roles nowadays are looking for MVC
hmm, thats actually an interesting idea I didn't consider. Do you have a specific use-case in mind? Most of these things, I wouldn't think you would want to configure on a per-route, or per-action basis.
The Mono API is a smaller subset of .net, but it will be enough to learn the basics.
There is an entire web page full of advice on how to get support. Personally I'd say go to the slack group. https://xamarinhelp.com/how-to-get-support-from-xamarin/ 
The ".NET framework" consists of two essentially separate things: 1. The CLR, which is analogous to Java's JVM, and 2. The .NET libraries, which are the standard libraries for C# Complicating things a bit is that the C# language is tied unusually deeply to (a small part of) the .NET libraries. For instance if you write an anonymous function in C#, it's converted behind the scenes into an instance of a .NET class. This is very different from something like C, which doesn't make calls to stdlib that you don't explicitly ask for. The full .NET library is Windows-only, but the .NET Core subset is cross-platform (and open-source, for some definition of the term).
Quite a few enterprise suites also implement their mobile apps in it.
It's under the mit license, which is the most open of all open source licences. 
If you're trying to sanitize database input to prevent SQL injections, use a parameterized query (as u/robhol and u/AngularBeginner both suggest). It's *easy*, and it's going to work better than anything you build yourself. var sql = "SELECT * FROM [Table] WHERE [Column] LIKE @Pattern"; using (var cmd = new SqlCommand(sql) { CommandType = CommandType.Text, }) using (cmd.Connection = new SqlConnection(connectionString)) { cmd.Parameters.AddWithValue("@Pattern", searchPattern); cmd.Connection.Open(); // ExecuteReader, fill a DataTable, whatever you're doing, really. } A regular expression may be a very simple way to do this, once you've learned about regular expressions. For instance, a function like string JustLetters(string s) =&gt; System.Text.RegularExpressions.Regex.Replace(s, "[^A-Za-z]", string.Empty); will remove every character in `s` that isn't a regular, English-language letter (by replacing them with an empty string). If you spend a little time reading up on character classes in regular expressions, you can probably build the expression you need pretty easily. Less simple, but without as steep a learning curve, would be some of the LINQ-based approaches suggested (e. g. comments by u/JakDrako and u/naspinski). I think these involve a larger amount maintenance overhead, but they don't require you to know about regular expressions. YMMV. If you need to *validate* input for some other reason, u/Bolitho makes a very cogent suggestion about using a type to manage that, but there are a lot of different ways to skin that cat.
Not true anymore. Hasn't been true for several years actually, not since .Net Core dropped. Mono is .Net Standard 1.6 compatible (same base feature set as .Net 4.6.2).
+/u/CompileBot C# using System; using System.Text.RegularExpressions; class Program { public static void Main() { Console.WriteLine(Regex.Replace("Why, is 42, the answer, to, life, the universe, and everything?", @"[^\w\s]", "")); } } 
.NET Core is fully open source and the future of the .NET platform in general. Probably better to go in that direction anyway.
While true, the worth is still debatable right now. The vast vast majority of jobs are purely old .NET and learning materials will be less plentiful for core (though still more than enough for what you need). Tbh I don't envy people new to .Net right now who have to make sense of everything that's happened with core in the last year or two.
If Xamarin wasn't popular we wouldn't have several HR companies looking for people with Xamarin skills, neither would they have so many enterprise logos on their users page.
How that? The definition of well defined *sets* is something you often do in programming. Like as almost often it is a good approach to require a certain valid object in order to proceed work. So at the edges (or often called *seams*) you must provide those valid objects. That would require certain kind of invariant checking. Typical well proven approach. Perhaps you could explain your doubts a little bit more elaborated? And what do you propose instead? 
You missed the AOT compilation to native code on Windows 8.x via MDIL and straight to native code on UWP with .NET Native.
If it's a strict whitelist, it might work. It should still be using the proper database APIs, however, and principially, not rely on any other part of the code performing the checking/escaping pertaining specifically to the database. Obviously, validation for the purposes of business logic is completely fine.
The architecture could be something event-driven, like lighttpd web server. I heard it can handle a lot of connections with ease, thus the analogy. Unless other responses satisfies your needs.
Mono does actually support winforms (not fully but usable), although there is no editor for it AFAIK
I'm really not understanding why people still want to use mono when .net core provides everything you need.
because mono can be used for designing forms and other ui elements since .NET winforms is windows only.
&gt; It should still be using the proper database APIs, however, and principially, not rely on any other part of the code performing the checking/escaping pertaining specifically to the database. This is always true, no matter where the input comes from.
thanks
I've recently been creating SSRS reports and think you should just try it out the box. Don't be afraid to see how much you can figure out, Create some test Data and see how far you get along with creating a report. Usually I've found that whatever you're having trouble doing people have had a similar issue before so you will find an example just googling the issue. The key think you want to learn are Groups, Expressions and Parameters / Variables and SubReports. This sounds like a huge amount to take on but just break it down task by task and find examples to help you wherever you're confused. People will moan about it being difficult but in my experience 99% of the frustrating issues are visual things, spacing and making the report appear exactly as you want it too. Good luck with learning SSRS!
&gt; Console.WriteLine(Regex.Replace("Why, is 42, the answer, to, life, the universe, and everything?", @"[^\w\s]", "")); Not equivalent, doesn't allow "-" and "."
There isn't a minimum amount you'd need, you can learn both together. C# is a language, ASP.NET is a framework that uses it. It probably helps to have a general understanding of an OOP language, at least. Source: I started out on C# by using ASP.NET knowing only the basics of OOP in Java. 
Cool! TIL
Didn't read up about it yet, what are the interesting improvements to 1.1? But thanks for the info :)
Thank you for the great response. The query is already parameterized actually. I'm new to all this, but is that considered protection because it limits the structure and type of data that the query can search for? Really, what I was trying to accomplish was limiting what could be entered in the first place, which I ended up doing with regular expressions like you and a few others have suggested. 
Bob Tabor has a great C# course on learnvisualstudio.net 
If it's just a simple CRUD application you probably more need to know basic Web principles than C#. E.g. how server-client apps work, some stuff about web servers and so on. And you absolutely need to know C# features like generics or LINQ or async/await cause it's very useful for the web. On the other hand, you probably don't need to care about how the garbage collector works or threading. 
looks good, let's see i've got some bugs to buy that!
Using parameterized queries protects you from SQL injection attacks by correctly sanitizing incoming text. Consider this: int DoSqlThing(string s) { var sql = "SELECT '" + s + "'"; using (var cmd = new SqlCommand(s) { CommandType = CommandType.Text, }) using (cmd.Connection = new SqlConnection(connectionString)) { cmd.Connection.Open(); return cmd.ExecuteScalar() as string; } } DoSqlThing("'foo'; DELETE FROM Table; '"); This attack is defeated if you build your query with parameters instead of string substitution: int DoSqlThing(string s) { var sql = "SELECT @Parameter"; using (var cmd = new SqlCommand(s) { CommandType = CommandType.Text, }) using (cmd.Connection = new SqlConnection(connectionString)) { cmd.Parameters.AddWithValue("@Parameter", s); cmd.Connection.Open(); return cmd.ExecuteScalar() as string; } } Or there's also the well-worn 'Little Bobby Tables' XKCD comic. It may also provide boosts to query performance (because a query plan for a parameterized query may be cached and reusable for multiple parameters, where one using string substitution may not), but that will be pretty variable from case to case and platform to platform. Parameterizing your SQL also handles a bunch of details about data type conversion and formatting that would otherwise be a huge headache.
Some excellent resources, which I will have to read thoroughly later as I have a meeting soon. But after a first glance, they both seem to be talking about web applications. I think there is a fundamental difference between WPF/WinForms and MVC/ASP.NET - and that is data binding. In WPF/WinForms, we can create two-way bindings with our model in a way that doesn't really work with web architecture. Because of this two-way binding, it seems (from my reading) that it's acceptable to keep a DbContext or similar around for the lifetime of the form/page - a difference from the per-request lifetime in a web app. And (unless there's something I missed from skim-reading your links) neither of your links address this scenario because they're focused on web applications. &gt; Your last solution seems to be considered bad practice though On that I'd agree. But if Form A keeps a DbContext around for its lifetime to enable data binding, and Form B's lifetime is a subset of Form A's lifetime, then is it acceptable for Form B to use Form A's DbContext? I don't know the answer to that - it seems to probably be No, but the explanation of keeping the lifetime of DbContext short doesn't seem to apply.
I stand corrected. That's better for me in Unity then.
There are many improvements but none you probably need to worry about if you're learning. See here: https://blogs.msdn.microsoft.com/webdev/2017/05/10/aspnet-2-preview-1/
None. I started programmed by learning asp.net and c# together without any prior knowledge of anything.
I knew nothing aside from generic HTML, and learned C# within the ASP.NET context. Now every time I come across a page written in classic ASP I just rewrite it in C#/ASP.NET.
Should have put in /s tag :p VB is such a pain.. :D
Take a peek also at .NET Standard and how that fits in w/ .NET Core (.NET Core is indeed the place to start now for linux/container dev, not Mon). .NET Standard underlies ALL of the .NET products, including the Xamarin Android and iOS implementations. https://blogs.msdn.microsoft.com/dotnet/2016/09/26/introducing-net-standard/ 
OP didn't say "I want to write the exact same application as C#, only double the amount of typing."
From what you've said, you probably have enough C# under your belt. Read this book: http://www.apress.com/us/book/9781484203989 I picked up version 1, 2, and 5 of this book and each version has been great. I imagine that the rev 6 (aka. ASP.NET Core MVC) of this book is equally as good. The author takes time to educate you on Unit Tests, Test Driven Design, Separation of Concerns, Dependency Injection, etc. They did switch authors somewhere in the middle. Or rather they added a 2nd author in the middle and then that author took over full time. (A hand off?) Anyway, it's a great book for getting up and running with ASP.NET MVC Core
If you want to live your life in the enterprise world, than that's fair. I specifically don't because I have and you don't get to do quite as much fun stuff.
Fair enough. Although knowing JavaScript/Node/go can get you entry level jobs starting at 100k, with more experienced folks making well into 180k. If that's not career advancement I'm not sure what is.
I agree with this, it's definitely helpful. This is what I was trying to get at when I mentioned OOP, but I couldn't think of the words. From memory though, the tutorials do a fair job of explaining MVC themselves - at least as much you need to use it here. It probably isn't a big deal to not know it going into them. 
I'm certainly not suggesting any of those three technologies are to be ignored or seen as negative: just that learning MVC can be a positive step - especially if you're already competent in WebForms/WinForms .NET development, in which case it's much less work for a lot of potential reward. It will also tend to introduce you to many of the concepts that are useful when developing with Node later
Shh don't tell them our secret
You should decouple your model and data context from your controller. In a typical MVC set up your controller reaches out to you Model(s) to get the data it needs for the view. Just so you understand, when I say Model I mean a class that is built for the purpose of retrieving data, not a ViewModel that holds the data passed to your view. Each of your Models should create a DataContext as needed, as it's usually not a good idea to leave these laying around. It should be easy enough to just connect to both databases from your Controller. There is literally nothing preventing you from doing that.
(☞ﾟヮﾟ)☞
I learned C# through him. Great instructor!
I used to interface quite a few things [(cargo-cult programming)](https://en.wikipedia.org/wiki/Cargo_cult_programming), but I've found that when there is no immediate use for the interface, there's usually no point. And 95% of the time I put an interface in thinking that it would be used to inject a different class implementation, it would never actually happen. In such cases, the "tight coupling" always existed anyway even with the interface; the interface usage just hid the coupling. Tight coupling itself isn't bad as long as it's in the places where it doesn't particularly matter. (So in my case, the 95% of times) So, off the top of my head, reasons to not use interfaces "everything", is that they become one more facet to manage in the code base. Changes to the API layer require the changes in two places. Often you might be hitting "Go to definition" just to jump to an interface; though in later versions of Visual Studio (and extensions) you can hit "Go to Implementation" instead. But it's one more level of indirection. Another reason is performance. If you have performance critical code, accessing interface members operates as a virtual call in the runtime. Some iterations can be slower, for example when working with `List&lt;T&gt;`. `List&lt;T&gt;` implements its own value-type iterator which has performance benefits, but if you type it against `IEnumerable&lt;T&gt;` those performance benefits are thrown out the window. If you're working with value-types, treating them as interfaces throws out the value-type benefits as they get boxed. But yeah, maybe you didn't mean it, but it's probably not a good idea to interface _everything_. I would suggest you just interface the things you would actually use the interface for. If you don't get benefit from the interface/indirection, then don't use it.
&gt; how best to refresh the data bound to the grid I would have a specific method whose responsibility is refreshing the grid's data (from a LINQ query against the context), based on filters/page number/etc - and when detail records are modified, trigger that method. A query directly on the entity (like dbContext.Products) will always be re-queried directly from the database (unless of course you just look at the .Local entities) - there are methods that short circuit this (like `.Find()` - which only hits the DB if the provided key doesn't exist locally yet)
I use interfaces where interfaces make sense for me that is mostly for providers so they can be swapped out any time. Authentication, Data, and Middle-Ware . I also build them for any 3rd party API or library. I don't use it when its my code talking to my code.
&gt; In a typical MVC set up your controller reaches out to you Model(s) to get the data it needs for the view Eh....that's entirely debatable. While "fat models" are one way of doing things (where the model itself is responsible for getting the necessary data), I think it makes *much* more sense for your model (as in the "M" in MVC) to be as dumb as possible -- more like the viewmodel you mentioned. &gt; Each of your Models should create a DataContext as needed, as it's usually not a good idea to leave these laying around Again, I don't like the idea of a model knowing *anything* about the context (or the backing datasource). I do agree that contexts need to be cleaned up. Generally, one context per request is all that is needed, and this can be accomplished in a way that allow the re-use of that context by utilizing some sort of dependency injection. Unity and the like all offer ways of spinning up objects with a "per request" lifetime. Generally, my structure looks like this: - **SomeProject.Site** - web project, contains models/views/controllers that are specific to the display layer of the application. Your controllers call the service layer (see second bullet) to fetch domain objects (see third bullet), and then uses those domain objects to build your MVC models and return a view. - **SomeProject.Services** - project containing classes that act as "services," but not necessarily in the traditional REST/webservice sense. These services are responsible for talking to your database(s) and using that data to construct domain objects. - **SomeProject.Domain** - project containing domain classes. Think of these as C# representations of your tables. This additional layer may seem like it's just another "models" layer, but by decoupling them from your MVC models, they don't need to be specific to the presentation layer (ex: a scheduled job, or command line app may need to interact with your db, and it would do so via these classes, not MVC models). For example, if you had a table `Products`, you would also have a `ProductService` class in SomeProject.Services. This `ProductService` would use an instance of your context (or contexts, in the case of multiple databases) to fetch products, and then build `ProductDomain` objects with that data. Your web project would then call into `ProductService` to get instances of `ProductDomain` which then would be used to build out the necessary MVC model for your view. 
For the basics, probably not. I've noticed some distinct differences in capabilities/features by platform in the networking side of things, but you're unlikely to encounter these until you get deep into them. Cheers and good luck!
Code to a contract: https://en.wikipedia.org/wiki/Design_by_contract If Interfaces help you get there, then do so. It certainly helps with Unit Testing as well. (mocking, stubbing, etc.) 
The real problem with vb is that historically vb6 programmers moved to vb.net... As a race vb6 programmers were generally utter, utter crap. 
I don't see why not.
Back then I used BinaryFormatter, since it was the same application both saving and reading the data. Didn't have to get fancy, and didn't know any better at the time. P/Invoke is useful primarily in situations where you don't have COM Bindings to do what you need. The only spot I can ever think where I used P/Invoke was for calling some window functions in/around Google Earth after they deprecated the COM API.
It's much easier to create mocks against an interface than a concrete class. Moq, for example, will only allow mocks on interfaces and virtual members iirc. So if you're stuck with concretions you may find yourself in a scenario where a unit or integration test becomes very hard to write. 
If I'm worried about things like modularity, I prefer base or abstract classes to interfaces for most actual logic (And, in many instances, even POCO type objects being passed between classes.) The advantage is you can version classes easier than interfaces. There's also some encapsulation advantages. Some people will decry "You can't inherit more than one class!" and yes that's the point. Yeah, you can run into situations where you really wish you could say that a single FizzBazz class does everything that both the Base Fizz, and Base Bazz class could do.... but that quite possibly means either your design was wrong and should be fixed, or you're just being lazy and about to start screwing up your design.
NSubstitute can mock classes, which is pretty nice. Sometimes things go wonky, but for the most part I've had a good time with it. Stops me from needlessly making interfaces for a single class.
[This](https://github.com/dotnet/roslyn/wiki/Getting-Started-C%23-Syntax-Analysis) should get you started.
&gt; Is there any reason to keep things tightly coupled and not use interfaces? Well, you can't maintain the illusion of an infinite injected chain of dependencies forever: you have to deal with concrete types *eventually*. Additionally, this business of 'programming to interfaces' isn't about interface types (like C#'s `interface` types, or a pure abstract class in C++), but about using only the exposed bits of the types you're given. I. e. If you're given an IFoo, don't cast it to a Bar, just because you know that the IFooProvider actually returns Bars under the hood, and Bar has something useful on it. Personally, I don't see a lot of need for interfaces wrapped around state types, like DTOs made entirely of auto properties without any particular interior logic. If you can stub up the object with its own constructor, you don't need to impersonate it. (An exception: the DTO in question comes from outside your assembly and there is no exposed constructor. In this case, it may be sensible to build a small proxy for the DTO with an interface that can be stubbed for testing--this doesn't require, say, Moq to get involved, though.) There's also usually not much need for interface types to split apart bits of your application that aren't themselves exposed to the outside world. These are implementation details, after all. An exception to this principle might be to define a contract for some generic boilerplate that is driven by details encapsulated by the internal type. &gt; It could be cause for security concerns, i.e. an easy unit test is an easy injection of malicious code. If dependency injection is a security concern, you're doing *something* wrong. Are you dynamically loading user-supplied assemblies? Maybe look into finding ways to sandbox that, if you can't just ... not do it.
Nah. One time, when commissioned to build a .NET wrapper for a C DLL, I dictated our API implement an interface. I tried organizing the classes we built and using other than public access modifiers like god intended but it quickly become a very difficult to maintain quagmire. We ended up scrapping the interface because several poorly executed updates caused one major program to explode. The problems came largely due to our own lack of experience in the matter admittedly. 
Proper OOP design uses a lot of interfaces, much like you're describing. However, I take **heavy** advantage of C#'s functional side; where interfaces are analogous to delegates. The nice thing here is that delegates are implicit: a Func&lt;int, int&gt; method argument doesn't need an explicit delegate because the compiler won't let you use a differently-signatured Func. You can also unit test functional code **super** easily by: * Having the computer generate your test cases in a combinatorial fashion. * Functions can easily be substituted out for dummies; rather than mocking. * Dependency injection, reflection, state machines and other large, difficult-to-test elements are much more avoidable in FP. FP does have downsides: mainly performance due to increased pressure on the GC, or simply that some algorithms can be more efficient in terms of state mutation. Overall, though, I highly recommend taking some pages from the book of FP -- and so does C#, or it wouldn't have Linq. 
Reasons not to use interfaces for everything: -Go to definition
Keep in mind that virtual methods take a performance hit, and making everything virtual probably doesn't accurately reflect intent. 
I inherited a legacy dinosaur written in classic ASP about 3 months ago. Despite all of my strenuous objections, I was basically told to "suck it up." Today I finished work on a new CRUD app in this environment. I'm glad to have something to show for my efforts but fuck me....it took me 3 months of work to do what several modern solutions could have enabled in 3 weeks. 
Reading through the comments here, I also feel a need to point out that Resharper can automatically pull a class's members up into an interface for almost no added effort. When I do use interfaces, I usually don't write them myself. 
Ahh, awesome. Thanks. :)
Unit tests are my big reason for interfaces even when I'll only have a single production implementation. You can swap out the interface for a mocked out implementation and still test the class in isolation. 
-Go to implementation
structs can implement interfaces, and if you ever cast it to/from that interface, it performs a boxing/unboxing operation. For example: struct Foo : IMyInterface { } Foo foo = new Foo(); IMyInterface boxedFoo = foo; //boxes Foo unboxedFoo = (Foo)boxedFoo; //unboxes
I'll give copying the source a try. Thanks!
Ctrl-F12
Maybe u can find some interesting things in here : http://www.dofactory.com/net/design-patterns
Plus if you forget to override it you end up using the real method which isn't good for unit testing if the operation does anything with io
I did Sitecore CMS work for a few years, recruiters don't really care. CMS work is mostly coding to APIs for that platform creating reusable forms and components. You are basically creating templates that users place on pages and populate with content. Being a c# shop you will probably still need to write backing services and database access. If I were you, I would put Umbraco and .NET on your resume. People will see what they want want in that. 
I'm having a hard time understanding your usage of interfaces as delegates. Would you mind posting a trivial example?
&gt; In such cases, the "tight coupling" always existed anyway even with the interface; the interface usage just hid the coupling. I had the same revelation a while ago. I am much less eager in my interface creation these days... lol.
The only time I don't use interfaces is when I have a static class due to developers expected use or previously accepted patterns in an area. But then internally I have everything implemented using interfaces. The most important thing is to understand SOLID design principles. 
I never interface anything. In my 28 year career as a programmer, I can't recall a single usage of interfaces. On rare occasions I do use abstract classes or (more often) subclasses, but only when the situation warrants. 
That'd be because it's the opposite :) Function delegates act as interfaces, which is to say they are contracts. For example: public delegate int MyDelegate (int i); specifies a contract for a function that accepts an int and returns an int. This function could do anything, and we have no idea what the actual implementation looks like. Much like an interface. In use it might look like: [Pure] public static string DoAThing( MyDelegate func ) =&gt; $"Here's a number: {func(2)}"; (I like the Pure attribute because then the compiler will warn you when you're being bad) You'll likely notice a few things here: 1. An actual interface allows you to bundle much more stuff together. 2. In a lot of cases, the named delegate would be pointless, because the compiler would prevent you from mismatching types and arities. Keep in mind that I meant delegates operate like interfaces in a pretty loose sense -- functional programming approaches problems very differently than OOP. OOP treats everything like a cohesive unit of mixed state and behavior, all the way up to your app root. (I personally think mixing state and behavior (especially as your default paradigm) is a massive anti-pattern) FP treats an app as a big hierarchy of actions, and you sort of just dump a bucket of state on top to let it trickle down. This is getting much longer than I expected, so I'll just add that C# is fundamentally OOP and functional, and to become a masterful C# dev, you must learn both sides. 
I recommend Visual Studio Code. It is small, fast (muuuuch faster than Atom), extensible, has a debugger, crossplatform, etc. Give it a try :)
The tl;dr from my side would be "anything that needs to be mocked gets an interface". Simply because mocking libraries have a much netter time mocking interfaces than classes. PS: reading a few other contributions here: what I for instance really hate is if people put interfaces on plain old DTOs ... simply because it is so damn pointless. A DTO does not have any logic it hides behind it's implementation, so if I need it as an input, I can simply create an instance the way I need it.
Honestly, you should probably use big daddy visual studio. It's what is going to be used by most tutorials and you don't have to learn how to manually handle projects and compilation and a ton of other little skills that you'd need to learn right away without an ide. I'd stay on the well trodden happy path as long as possible. It is easy to take for granted how good ms tooling is until you suffer through other ecosystems like javascript.
I put an interface in when I need to mock something for unit testing. That usually means I have interfaces on my configuration providers and the classes that directly handle network calls. The downside of an interface is that the method invocation becomes a virtual method invocation (in the IL) which is a performance hit. That performance hit is almost never a bottleneck though and I wouldn't try to optimize away from it without hard data indicating that it is an issue.
Like 10 or 12 kgs
You'll may find [this](http://blog.hovland.xyz/2017-04-22-stop-overusing-interfaces/) interesting
Hi am an Umbraco contractor, I only ever freelance for Umbraco projects. The reason I focus on one one element of .NET coding (Lets call it that, I'm not really trying to get into the semantics), is that 1. It means I can build up a profile and business contacts easier. Agencies, within my home city, have a better chance of knowing me, and I of knowing people they employ. Means I can cut out recruitment companies. 2. I would love to say, higher rates, unlike SiteCore, which the other poster does, Umbraco isn't currently commanding much of a premium. If it is, very small. 3. Its much easier to become an expert of an subject if you restrict the knowledge required. It means that interviews are much easier. In my line of work, I prefer being the only interviewee, and negotiate accordingly. 4. Umbraco claims to have a great community. As a member of it, I say its good, but as I don't hang out in others, I have no basis of comparison. The cons:- Yeah, it reduces your chance of returning to general C# development. I don't consider that a huge disadvantage, I would if Umbraco got harder to get jobs, jump to SiteCore or Kentico, or some other popular .NET CMS than return to general c# dev. If all .NET CMS were dying then yeah, at some point in the future I will need to reskill, but I suspect in this distant future, you would need to too. Right now, the market is growing, I don't see this tailing off at any point soon. Currently using CMSes as the content management system for mobile apps, takes up some of my work, so its not all about websites per-say. 
Easy to install (no installation) Write: instantly Already written as a console project. check out : https://dotnetfiddle.net Cons: no intellisense 
My company uses Ruby. Duck interfaces are a royal pain. I approach an unfamiliar part of a code-base where a duck interface is used, and then I can't find the right implementations to mock and test the code - I'll lose several hours trying to reconstruct the state to call a function. With a real interface you just have to search for implementations of it. It's a small amount of extra code, but you get a tremendous productivity boost, as a result. The one constant rule I've found in programming, is small short term wins (like implicit interfaces) are usually long term pain.
You're starting a new process (the shutdown) which then opens. That's the second window you see. If you don't want this, there's an overload for `Process.Start` that accepts some options, in which you can hide the process window.
Visual studio has this feature already, you don't need resharper for it. (Not a criticism, just noting that extracting an interface is available out of the box)
Why are you trying to unit test an integration component?
Guess you don't care about unit tests.
&gt; Just curious why you get multiple versions of the same book? Version 1 was for ASP.NET MVC 1.0, Ver 2 for MVC 2 (and was 20% thicker), ver 5 for MVC5, etc. The updates to the book covered not just changes to the Microsoft MVC framework, but to best practices. Back in 2010 everyone was using a certain DI/IoC library and Unit Testing framework, while a few years later everyone switched over to different libs/frameworks. Yeah, I prefer to read books over watching videos. Generally, yeah, I'd read cover-to-cover and then sometimes email the author. Lately, I've read "C# in Depth" by Jon Skeet. Though, I should add that this book is more of a theoretical (read: "behind the scenes") look at what goes on with C#. Still, I found it insightful.
Thank you so much! There is tons of interesting stuff to go through.
I'll try my best and go through it, but it sounds great and what I'm looking for. Thank you for the suggestion!
Use EntityFramework. It creates a bunch of classes that are a representation of your tables. You can then use LINQ or lambda to update. You'll have to look all this up but once you get the hang of it you'll never want to type in a SQL statement again. Also, it's all strongly typed meaning typos won't affect you anymore.
Awesome, this was a really helpful example to see, thank you.
Screw entity framework, get ORM lite, super easy api and none of the overhead. 
Removed: Rule 5. [Stay classy.](http://www.coachoflove.com/wp-content/uploads/2013/05/ron-burgundy-2.jpg)
And in C# 6: private void saveButton_Click(object sender, EventArgs e) { (CurrentView as ISaveable)?.Save(); } EDIT: To be fair, depending on the platform and project/business requirements, and industry or application types, polymorphism might not be terribly applicable or worthwhile. Or even the language(s) used it might not possible or there might be better/different alternatives.
It would be nice if sites like this did a better job of explaining WHEN and WHY you should use certain patterns instead of just defining them. If you use all of these patterns just because you know they exist, your codebase can easily become over-engineered and obnoxious. Understanding the tipping points on when it is "cost effective" to introduce these patterns is just as important as their definitions IMO.
Thread for the first episode: [Link](https://www.reddit.com/r/csharp/comments/6immet/getting_started_with_duality_game/).
More modern, yes, but it really depends on where you are as to whether or not it's used.
Apparently it's something like the ability to go 28 years as a programmer without understanding the use of the "or" comparitor. Or the ability to design a language without the "is one of" comparitor. (And for the record, I would have implemented what you showed with an abstract class, if I implemented it at all.) 
Relatively novice C# developer here, what is the purpose of those operator statements?
According to others in this comment thread, they help with error handeling
Neat trick.
How can you judge what kinds of tests are appropriate for my situation? Correct, you can't.
How? By the fact that you are talking about mocks. The vast majority of the time mocks are a code smell indicating that either there is an inverted dependency or an inappropriate test type.
Good info on this post, thanks.
x represents the object in List&lt;T&gt;, where T is your type. If it's a user-defined type, then it might look like this: public class MyType { public string Name { get; set; } } So, x would expose all of the public properties available in the class of x. Once here, you can compare your local value to the value in 'x.Name'. So now putting it all together, just substituting out the type for your user-defined type: string keyword = txtSearch.Text.Trim(); List&lt;MyType&gt; newList = yourListData.Where(x =&gt; x.Name.contains(keyword)).ToList(); gvGridView.DataSource = newList; gvGridView.DataBind(); 
Well since in my case I have a database linked via an entitydatasource to the grid view the keyword should be contained in the database right? 
 [this ](https://en.wikipedia.org/wiki/Interface_segregation_principle) to the max
How are you binding data to your gridview?
https://github.com/nopSolutions/nopCommerce you can check this great asp project
Ok, that's pretty straight forward then. You can create your text box with a button. And on the button submit event, do whatever validation you want on the text box, and then do something along the lines of var ds= ds.table.where(t =&gt; t.firstname == textbox.text); myGridView.DataSource = ds; myGridView.DataBind(); and that would rebind your grid view with the new data, filtered on textbox.text That's a super crude and simple example, so let me know if you have more specifics on what/how you're trying to filter. 
ISTR that you may be able to update through the DataTable, but it's likely to be a bit messy (because you probably need to keep it connected or something). I would probably just execute an UPDATE statement, for one record. If I had a bunch and needed to update and insert or delete them, I might use a MERGE (on SQL Srrver). At some point, this is going to be justification for a stored procedure, though.
Or just write the code to create and execute the command. Dragging in EF for a single update is bananas, unless you just want to learn about EF.
yea, something like that. You might want to use .contains instead of .equals, that would match like joh to john or ar to jared, because they contain the string.
I cloned a copy of TailBlazer to help me with best practices surrounding mvvm in WPF. https://github.com/RolandPheasant/TailBlazer
There are other examples, but let's go with the most obvious. Let's say I'm providing a Library. My library has various public classes with both virtual methods and Nonvirtual methods. These classes are fed into and used by other parts of the library; the virtual methods allow for additional behavior to be defined if desired. I want to add a new hook. I add the empty virtual to the base class, and this can then be called by the consumers of this sort of class in my library. And because that default behavior is defined in the base class, people who use my library don't have to care about implementing unless they want to use that feature. If I had this on interfaces and added it to my interface (i.e. without implementing on the class...) any developers consuming said interface will have to go back through their code, and at minimum stub the new methods that I added to each item that implements the interface. Sure, one could argue that my public classes would be inheriting that interface ANYWAY, so it's no big deal. But what if someone wrote their own implementation of my interface, and tries to recompile? If you'd like to see an example of this in real life, consider the difference between IDbCommand and DbCommand. The reasoning I just provided above is why IDbCommand lacks Async methods.
I still follow my same basic process of writing some basic implementation of my idea and then refactor and refactor as my idea comes to life. Like most others here I obviously do not create an interface for every class. Every line of code adds some amount of complexity to your application and you must be able to determine if the value is worth the complexity. This is relatively easy to answer for yourself but you are also deciding for the people who come after you so take it seriously.
You just described programming...
I would recommend this Pluralsight course that explains a lot of common design patterns and gives a demo for each one: https://app.pluralsight.com/library/courses/patterns-library/table-of-contents You can get a free 3-month Pluralsight subscription here: https://devopscube.com/pluralsight-free-subscription/
Check windows firewall. 
Always worth considering and is a problem I see a lot of: https://martinfowler.com/bliki/AnemicDomainModel.html
Oh wow I didn't realize c# had a pure attribute! Learn something new every day :)
did you happen to name your program shutdown? If so, I think Process.Start will find that shutdown.exe before finding the system's shutdown.exe.
Oh wow.. I definitely named it shutdown haha. That solved it, thanks! :)
Use network monitoring tool du jour to look at the network traffic. (e.g. Microsoft Network Monitor)
Ah, yes, that makes sense.
If you can't program any C languages yet, it would be good to go through the tutorials and understand how C# works before digging into game coding. I'm a Software Engineer of 2 years and it would be difficult for me to script a game out in a language that I don't know, because the syntax of the language itself lays the foundation for all of the APIs the game engine gives you on top of that foundation. Now, it is pretty boring to just read through lessons. I would recommend reading a couple lessons, then trying out what you know on programming puzzles, like the ones from https://projecteuler.net/
You need to learn two different things: C# itself and Unity's scripting API. The best C# developer won't be able to code for Unity without any knowledge of the Unity-specific stuff, and a Unity expert will get nowhere without knowing how to construct C# code. So, I'd recommend you start by learning C# to a beginner level (do some tutorials, get a book or two, etc.). Make sure you understand how to code the fundamentals. While learning C#, start playing with Unity. You can work through my Unity Pong tutorial to get a handle on how a Unity game is constructed: http://unity.grogansoft.com/complete-unity-pong-clone-tutorial-for-beginners/ The tutorial is very light on C# code (because it's for beginners). ------- From there it is just a matter of practice and experience. You don't need to be an expert at C# to work with Unity. The Yellow Book is a good source for getting familiar with the language. In Unity, you will mostly be dealing with Unity-specific stuff (graphics, physics, etc.) and core programming fundamentals (logic, etc.). 
- The debugger for multi-threaded code and tasks. - Visualizers for data structures - Conditional breakpoints with inteli-trace actions - Edit-and-continue (doesn't work in all cases though) - GPU debugging
well I'm actually in a hurry and i want to learn programming in 4 months. I'm a special person who grasps every computer thing at instance. btw idk how much time to other programmers take to learn the enough language.
I'd recommend checking pluralsight, it's really great when it comes to Microsoft technology stack. I haven't checked if they have trial period but if they do you will be able to check whether online course style of theirs match your learning. Edit: just noticed in another post that you can in fact get trial https://devopscube.com/pluralsight-free-subscription/
 Select block of code, ctrl+k, ctrl+f gives auto formatting and layout of code. Bad indents be gone. 
I'll tack on Ctrl+Q "Quick Launch" ... Kinda like Ctrl + , but for the IDE rather than your code. Great for hopping directly to a setting or menu item, etc. Should be hard to miss given it's right there in the title bar, but I've seen it go overlooked/ignored too.... Good stuff.
Ctrl + -, Ctrl + Shift + -, Navigate back and forth through the last places your cursor has been (really handy for "I've gone 6 Go To Definitions deep and lost my starting place" moments)
I'm a full stack developer, working in the .net ecosystem.
You mean **enumerable** ways heh^heh^^heh
Quick watch feature to open object's debugger view in new window. Useful if you need to work with lots of folding levels
Ctrl + k, ctrl + d does whole document
Use it a lot just wish you could open more than one at a time. 
Also great for debugging on a separate computer. I use the remote debugger tool on the target computer, then attach to process from my development battletop.
This will be kind of not "quick", maybe :) also want this window to be not primary for the application 
I just wish it wasn't modal-- if you're quick watching you can't step through
Pasting xml and json as classes. Huge time saver.
Don't underestimate the interactive window. That was the first thing I was going to suggest when I saw your post. It's amazing how many questions can be answered very quickly with that.
Not sure if it's vanilla, requires the Github extension, or if it only works with Git, but the Team Explorer has some convenient telltales along the bottom of the screen. [From right to left](http://i.imgur.com/hmBthrc.png), it'll tell you which branch you're working in, what repository you're looking at, how many changes you've made since your last commit, and how many commits you need to push to the remote.
Great for automatically adding the right "using" on a missing reference.
Or using your mouse keys!
ctrl + l will cut the current line.
Isn't that a ReSharper feature?
How do you do this??? I NEED THAT!!! Edit : http://www.c-sharpcorner.com/UploadFile/pranayamr/generate-class-from-json-xml-in-visual-studio/
Also check out the ReAttach extension, which makes your most recent processes available from an icon in the debug toolbar. It's a lot more convenient than digging through the entire process list.
crtl + F5 also, to run externally (no debugging, also a bit faster)
Ctrl + shift + F10, sets the arrow to the line where the cursor is. Saves a lot of dragging around.
1 month trial, 200 minutes of free video.
It is. Ctrl moves the view up or down one line without moving the cursor. 
Thanks. Much appreciated 
I wouldn't waste time learning old technologies and wouldn't expect an intern to know anything about them. 
Unless your goal is to practice making a bitarray from scratch, there are a number of implementations that are heavily optimized, including C#. You can check out [csharpewah](https://github.com/lemire/csharpewah/blob/master/README.md) as an example. That one allows the bit array to be compressed and able to do logical operations on the compressed array. That is very useful if your dataset is sparse. Another implementation that you could look at is Lucene and it's [various bitset implementations](https://github.com/apache/lucene-solr/tree/master/lucene/core/src/java/org/apache/lucene/util), at least one of which is meant to line up with OS page sizes. You would need to port to C#, but that's pretty easy. Last, to more directly answer your question, if you are accessing a particular offset of an array, then it will only load the memory immediately around it, not iterate over the whole thing. Accessing the last byte should be the same performance cost as accessing any other part. 
ctrl + shift + v to cycle through your last 20 clipboard entries
Box selection - press Alt while selecting with either the keyboard or the mouse. If you start typing afterwards you end up replacing/inserting on all of the lines simultaneously. So for example you can do shift-alt-down several times to make a zero width box across multiple lines and them start typing to insert the same text onto all of the lines.
How large is the video that you're trying to process? I ran into a similar error on my first attempt to process video, and the problem was because I was trying to load the entire video into RAM. If there's an option to dispose a frame after you've loaded it/stream read, that may help. I note that you haven't gotten to the part of the tutorial where you add "frame.Dispose( );" which would be the key piece for ensuring you're not eating up memory. If you don't get this error on a very small non-HD video, then this is likely your problem. You might also try googling the error "An unhandled exception of type 'System.AccessViolationException' occurred in Accord.Video.VFW.dll" as I got a couple matching issues with fixes. Looks like it could also be a issue with a dependent DLL. 
I use CodeMaid. It works well for what I need.
As unhelpful as grauenwolf is being he actually has a good point. For a good look into what I can only assume is his viewpoint see this short and insightful series http://enterprisecraftsmanship.com/2015/06/29/test-induced-design-damage-or-why-tdd-is-so-painful/ For a tldr; domain logic should be testable without any dependencies which requires no mocks, and things that have depencies should have minimal logic and be tested with integration tests requiring limited to no mocks using the actual implentations where possible. Edit: another related concept from an architectural level which helps is the onion architecture http://jeffreypalermo.com/blog/the-onion-architecture-part-1/
I don't believe so, but it may just be an exercise in doing that and then finding a c# to X converter to get the classes into the language you're looking for
Is there a "Go to everything" (Ctrl + T in ReSharper) ? Is there a "highlight current file in Solution Explorer" (also a ReSharper feature).
Ctrl tab to "alt tab" between recent/ open windows. Same as many other apps use internally like chrome. Add shift to go backwards
This is life-changing.
r/iamverysmart ?
I am interested in this as well. I've been studying C# in my free time for a few months now and feel comfortable using it (and have experience writing game mods in Lua) and want to branch out more into game devving. thanks in advance
There's nothing quite that comprehensive and "artist friendly". Programming requires you to at least put in some decent Googling effort generally. The [Unity Tutorials](https://unity3d.com/learn/tutorials) section has a lot of great simple (maybe over simplified) examples for a lot of game logic type stuff. You can also find a lot of great stuff in the Unity subreddit: https://www.reddit.com/r/Unity3D/search?q=flair%3Atutorial&amp;restrict_sr=on And [Unity Answers](http://answers.unity3d.com/index.html) and [Forum](https://forum.unity3d.com/) are ripe with answers to just about any question you could think to ask. But don't always look up your questions in regards to Unity, a lot of the time it's primarily just a C# functionality or design pattern you're after, so search for the basis of what you want to do in broad terms on Google when needed. Some other useful sites: https://unity3d.college/ http://www.alanzucconi.com/ http://www.tutorialspoint.com/csharp/
Resharper 😂
I just usually out the latter half of the file name with the extension to be honest. Then again I'm not sure I do ever use the filter for anything except files.. 
Need to provide links Bro 
The very first time I tried with a 1.2GB video, then I thought "maybe is too much" and tried with a few seconds chunk of the same video downsampled to 320x240: same error while in DirectShow there is no problem even with bigger files (but would like to process faster then the actual FPS). Now I checked "Enable native code debugging" and the error says: `Exception thrown at 0x100049AC (fmcodec.DLL) in WindowsFormsApplication6.exe: 0xC0000005: Access violation reading location 0x0663FDCF.` it depends by the AVI, because if I convert a small chunk with different encoders the error can be "Exception" or "fmcodec.dll". I suspect the problem is within the coded, will try out some google solutions.
Once you got the hang of the OOP paradigm and get accustomed to the Unity API, you should be able to do it without needing code examples. IMO, there is not a *right* way to code anything.
Game Programming Patterns isn't an intermediate book. It's really a rather trivial introduction to the most basic design patterns with no real depth or real use examples. https://en.wikipedia.org/wiki/Software_design_pattern is a much better resource, even for beginners. I've written about this before, but comments like 'I've never found a use for this pattern' after 5 pages explaining it, or a vague divergent discussion on how javascript uses prototypes so 'I guess they must be good for something', really. doesn't. help. ...heck, wikipedia even has code that actually compiles. 
Honestly, it's just spam.
http://rbwhitaker.wikidot.com/start
I think basic programming concepts would be a better start. Look into object oriented programming design patterns as a start. 
Sure thing. [Here you go](https://msdn.microsoft.com/en-us/library/dn194476.aspx).
[@val's latest tweet](http://i.imgur.com/LWQiUSv.jpg) [@val on Twitter](https://twitter.com/val) - ^i ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
"lol i am smart"
Upvote for a useful tip but I greatly enjoy codelens 
This is a very good link. I had a project in a CS class to program [a game in a group](https://github.com/sopra05/V3) and on the first look, I recognize a few patterns. So yeah /u/BlackWindZero, look at this.
**Unity doesn't teach you C# programming.** It teaches you how to work with its systems. If you want to learn good game programming outside of Unity you should use something else first. With Unity you are: - Tied to an old version of Mono with a bad GC. - Unity already has systems that are strongly tied to itself (component system, physics, editors). Which help you but don't learn you much programming that can be used outside of Unity. If it's purely about learning more code while making a game, go for a framework instead of an engine, like MonoGame. - You get the latest Mono version which is about just as powerful as the latest .NET Framework. - Most of the systems you get to program yourself which is a learning experience you can apply to other projects outside of Mono and Unity. - If you don't want to program something yourself you can use any existing C# code or a monogame extension. You're not tied to an asset store/Unity specific code. - ~~MonoGame supports a good many platforms but if you want to go mobile you need Xamarin which is expensive to license.~~ Edit: Typos Edit 2: [Xamarin is actually free now.](http://www.monogame.net/2015/12/16/develop-for-ios-and-android-for-free-happy-holidays/)
You don't need to restrict yourself to Windows if you want to use C#. You can use the [Mono Framework](http://www.mono-project.com/) or [.NET Core](https://www.microsoft.com/net/core/platform) to run C# applications on Linux or Mac. You can even use [Xamarin](https://www.xamarin.com/) to run C# apps on Android or iOS. If you really do want to switch, Java is most similar to C#. You could learn it rather easily, you would just need to get used to not having some of the nice features that C# provides, and dealing with poorer library support. Even if you stick with C# or Java as your main language, I would still highly recommend learning C++. It is far more difficult to program in that C#, but it teaches you a lot of lower level concepts and gives you appreciation for the higher level features that languages like C# provide, as well as an understanding of how they work.
I have been a developer for 13 years and a C# dev for the last 7 of those years. Last summer I got a new role working on an existing umbraco project and picked it up pretty quickly. I am not too worried about being pigeonholed into a particular role as it is still .net MVC but just a slightly different way of doing things. There is a lot of flexibility when it comes to umbraco, if you are just making a basic umbraco site then I would say it is going to be a bit boring, but there are other more complex parts you can use that will be a bit more interesting.
There is in fact Ctrl+T starting with VS2017. There's also a button to go to the currently open file in the Solution view.
Garbage collector. It basically cleans up unused memory to prevent memory leaks.
Getting code to work is the easy part. The problem is that the definition of "working" evolves over time and your code must be capable of adapting to changing requirements. 
I think you missed my point. I was suggesting that OP find out from his employer what technologies they use. I was letting them know that alot of places want both skills because they often have a need for both. I was not telling OP that he should just go learn a legacy technology for no reason. That being said, if someone said in an interview that they are proficient in MVC and that they learned WebForms in case their is a need to support some legacy code. I would think that, that dev know what they are doing, and that they know what is going on with .NET.
As far as web programming is concerned, the .NET Core MVC framework is the latest and greatest thing microsoft has given us. It's more flexible than the previous MVC frameworks since it can br run on any platform which also means you don't need to rely on IIS to run your website.
Removed: Rule 4. Reading/writing to text boxes is pretty simple and there are plenty of resources/tutorials out there on accessing them. You can access the TextBox content by using its [`.Text` property](https://msdn.microsoft.com/en-us/library/a19tt6sk%28v=vs.110%29.aspx). From there, you can iterate on each character using a `foreach` loop: foreach(char c in inputBox.Text) { string morseCode = morseConvert[c]; } Put the morse code strings together however you like and output them.
There are a couple of things wrong about your post so lets break it down: * Xamarin is free so not sure how its "expensive to license" * Unity is not tied to an old version of mono. Latest Unity supports mono 4.8 which was released in feb 2017. Granted its the beta version of unity 5.6. It also supports net 4.6 so its actually pretty good right now. The rest is pretty accurate but you have some major errors in your post. 
Removed: Rule 4. You need to make an attempt. Break the problem down into small parts: how to read text from a text box, how to write text to a text box, how to look up the morse code value from the dictionary, and how to combine the morse codes together. I've already got you started for a few of those points. So some searching, do some tutorials/exercises, make an attempt on the others parts. _When you have made your attempt_, and if you still have issues, feel free to post a question about those issues specifically and include the code you used to make that attempt.
Personally, I think it's best to learn the fundamentals of C# before any rookie considers diving into game development. I'm fairly new to C# myself (around 8 months), and I put at least 2-3 hours of study each day (this is no exaggeration) and only now would I feel okay to look into Unity. It may just be me and the end of the day...I'm still a rookie. From my experience, Id recommend that you swallow and stomach the fundamentals of C#, learn your IDE, learn some common design patterns, take on a framework and only then move onto Unity. If your a video learner, I'd recommend any Scott Allen course on Pluralsight. His C# fundamentals course was life changing to me and inspired me to move forward. If you enjoy reading, then take a look at Microsoft Visual C# Step by Step. Again, great resource although you may find it daunting at first if you have zero C# knowledge. Good luck! 
Hey buddy, I appreciate the help. I just posted one last thread where I attempted to be as descriptive as possible. I have already read the link you have sent me regarding dictionaries, aswell as 2 others. I am still not understanding how to output those into a textbox properly.
Checked the license and looks like I used an [old post](http://community.monogame.net/t/my-3-year-experience-with-monogame/1700/19) for my source. [It's free now.](http://www.monogame.net/2015/12/16/develop-for-ios-and-android-for-free-happy-holidays/) I apologize for the misinformation. I used the following to find the Mono version: http://answers.unity3d.com/questions/259448/how-to-determine-mono-version-of-unity-.html Type type = Type.GetType("Mono.Runtime"); if (type != null) { MethodInfo displayName = type.GetMethod("GetDisplayName", BindingFlags.NonPublic | BindingFlags.Static); if (displayName != null) Debug.Log(displayName.Invoke(null, null)); } Prints out: 2.0 (Visual Studio built mono) Edit: Tested on Unity 5.6.1f1
Hey, Within the foreach loop you are reassigning a new value to the morseCode variable each time, instead you want to append each character to the existing string. To do so, you could use the += operator: &gt;morseCode += morseConvert[c]; Once the foreach loop has finished, you want to output the complete string to the GUI. To do that, you'll just need to assign the value stored within morseCode variable to the Text property of the TextBox that you named outputBox. &gt;outputBox.Text = morseCode; 
A few things I notice right off the bat: * You're declaring your dictionary in your` convertButton_Click` event. You should just be declaring the object at the class level, not in that event. * You have a `convertInput` method, but you're not actually calling it anywhere. This method should be called in your button click event. * As someone else said, you need to concatenate onto the string each time. This would do that for you: foreach (char c in inputBox.Text) { morseCode += morseConvert[c]; } After these fixes, you can then output the string to some sort of label or textbox where you can see the resulting Morse Code. I also suggest you throw some error checking in there to practice. For example, if the textbox is empty, show some kind of error.
Thank you for your responses, I have made adjustments accordingly!
By class level, yes I mean out of the method that it is currently in, but you messed up a little bit. You need to include the whole declaration so it should look like: public partial class Form1 : Form { Dictionary&lt;char, string&gt; morseConvert = new Dictionary&lt;char, string&gt;() { {' ' , " "}, //space {',', "--..--"}, //comma //the rest here }
A project is just an assembly, well compiles into one. We would need to know what errors you're getting to help. There's very little information to work with in your post.
https://i.gyazo.com/50f9e19393ff35100fd360e0f63c60b6.png I tried going about it like this, but it does not seem to do the trick public partial class Form1 : Form { public string MorseCode { get { foreach (char c in inputBox.Text) { morseCode += morseConvert[c]; } } }
You're trying to use a property there. You don't need to do that. Just declare `string morseCode;` at the top of your class before the dictionary.
Maybe overkill depending on your application but perhaps just use mef and load each one as a plugin so u can add more as paid downloads or they can make their own even 
Yeah, as I mentioned in my first comment, now you will need to do some error checking. The `ToLower()` method may help you out! Good luck.
Thats because default is still mono 2.0. You can switch though. This thread details all the updates going in [https://forum.unity3d.com/threads/future-plans-for-the-mono-runtime-upgrade.464327/](https://forum.unity3d.com/threads/future-plans-for-the-mono-runtime-upgrade.464327/) 
Not sure what this language has to do with C#.
it was written in c#
It looks like you tried to copy some code you found and change a couple things. It's fine to use code samples as inspiration, but you should work on understanding what you are changing. For example, it looks like _idnumber used to be a decimal representing a retail price since IDNumber still lists it as a decimal so you will get an error there with the switch to string (which should be an int it seems). The instructions seem pretty clear so we will need to see a bit more effort than what you have shown to help with homework. 
Thing being is that i'm completely lost when it comes to what I should do for the remainder of the project, I did not find the directions clear at all, and that may be because I am not efficient with the material I am expected to utilize. Please elaborate as to what I should do in order to demonstrate "MORE EFFORT"?
I read an article in MSDN about this and came to the same conclusion Edit: yep it was this one 
One project is one assembly, though this seems like some arbitrary requirement. Each method could be implemented within a single class/method so I don't see the point. 
Or implementing an interface.
I found [these videos by Steve Bishop](https://www.youtube.com/playlist?list=PLYMOUCVo86jGwWoSoEkpgnCJ3IPXIQmIC) very useful for learning ASP.NET Core. I would definitely try to find out which version you will be using at your internship.
It would be interesting to see some more complex examples. Now it is just hard to see any advantages of using it.
Holy shit, mkay
Oh fuck not this guy again. Please check the guys last shitpost article to MSDN, the last time after it was revealed what a total whack job he is someone from Microsoft commented saying they would look into this. The guy is a serious PR disaster with serious paranoid, narcissistic, and delusional ideas. MSDN publishing his articles of absolute nonsense and terrible code (check his github...) is only fuelling his already massive ego. It is only a matter of time before he says something to drop MSDN Magazine or some other department in the shit. He's already claiming things like "if microsoft likes my ideas you should too". Furthermore, he's tinfoil hat crazy. Check his blog more, makes all sorts of claims about the CIA stealing his mail, and how he was given a nuclear bomb. /u/FizixMan please consider not allowing this nonsense, he needs help and more clicks only fuels his problems.
I was given an old access system (written in french) that used ftp to merge with other copies of the system to make it "live" about a year ago. I was told to support it. Can confirm that shit rolls down hill.
What you serialize into is arbitrary. That you can successfully deserialize and serialize the requests is your main issues.
Great, but that doesn't make it very relevant to this sub, I think.
Without any proof of your skills? They accepted you just like that?
Portfolio! If I were to hire candidates I wouldn't even bother with the degree check. Show me what you can do, prove it.
Github.
Linking to the github repo and saying, "Hey, I made this language in C#!" would be fine. Linking to that full article on the language with almost no real tie-ins with C# isn't ok.
Proof of experience is the best way really
Like everyone else here is saying, best way is through experience. When I've looked at hiring in the past, CS degrees were a + (because to me it was *hopefully* a sign that they learned some basics, but it didn't always prove true). The most telling sign was if they would be able to answer some technical questions and bonus for refering us to their GitHub page for samples of what they worked on (but this is a bonus not required, because people can't necessarily publish everything to github, I sure can't all of my work is private to the company I work for and I don't have time to be writing additional apps). So my advice would be trying to learn c#, write a few programs in your free time (doesn't have to be too complex, but maybe try to tackle some problems relavent to the type of programming you want to do). Eg if you want to do line of business apps, write a web app that handles some basic workflow, maybe something that could help you as an English teacher? If you want to do more backend type work, trying writing some apps that do data processing, get familiar with data storage (relational databases, no sql solutions, etc). And better yet, sign up for some free cloud services like AWS or Azure and get your stuff working there. I think getting the experience in your free time will give you the ability to get a better understanding that tests/certificates won't necessarily provide. 
The degree is needed to get past HR unfortunately. 
Most people don't want to look at a bunch of old code and just want to see your regular resume.
I don't either. When I first started I proved my knowledge by creating things that could be shown publicly. Develop something put it on github.
FTFY: Share the code (and comment an appropriate amount).
I am a psychology major with 2 years of experience making a pretty decent salary. The first job was the hardest to get. I looked for over 6 months and ended up getting a software dev/ desktop support gig that payed crap. It was garbage pay and a terrible job, but it was my lucky break. I like to credit that job to my sql server 2012 cert and my a+ cert, along with my knowledge of basic oop and data structures. But I admit there was a lot of luck involved in finding that job. I had no portfolio. Next 2 jobs required knowing my data structures and oop concept really well. As in answer almost every question they throw at youbfor a junior dev position. If you don't know the answer, make sure you learn it. Good luck.
There is a high chance that you are missing out on great talent by using a CS degree as an artificial entry barrier. 
There is. There's also a high chance that taking an already hired developer off real paying work to read through a GitHub portfolio of code they could very well have nicked or paid someone else to write is a pretty huge waste of time. Given that outside of California any code on your GitHub page probably at least potentially belongs to your employer and is being illegally distributed, so a lot of people don't have any, filtering based on GitHub is at least as stupid as filtering on a degree.
Github is worth a thousand words
Depends on the company I've found. I'm seeing more and more companies add "or equivalent experience" next to academic requirements in job postings. Very few companies these days require a degree, and most of those were for jobs that required academic training.
I think that's only true if you're applying for some massive organization and they have some archaic system for weeding out candidates. Every IT place I've worked at hired people with no degree. If you walk into my interview with either some existing experience, maybe a cert or two, or can prove to me in the interview you have a base level knowledge of coding, I'll probably give you a shot. 
I definitely think going the cert route will give you a bump up if you don't have a degree in CS. But, if you're a teacher, and you do already have a degree, even though it's not in a related field, if you could show me you understand the basics of coding, I'd at least give you an internship. Maybe look for one of those?
Look, I'm taking computer engineering, and I know a BUNCH of people studying CS or CompEng, and the vast majority of them are below average programmers. Hell, I probably wouldn't even call them programmers. And the best programmer I know (around my age) studied Economy. So... a diploma doesn't mean programming skills.
They will most likely have you write some sample code during the interview.
You can use work history as proof that you know C#. OP does not have a work history. I would consider someone with 3-6 months of good Github contributions to competitive with someone without a Github and a brand new CS degree w/o an internship in the job market.
Can you go a little more in depth about that "belongs to your employer" part. I'm from California but plan to eventually move out of the state. Is there something I should be watching out for?
'70-483: Programming in C#' would be a poor good choice. I have a bunch of certificates of that from the same 'series' (70-486 for example) And as you can see on the website, they're published October 12, 2012. A lot has changed in the last 5 years. I think those certificates are aimed at .NET Framework 4.0, when now we're at .NET Core 2.0 (Yes versioning is weird) Also the normal flow usually is: Get a CS degree; Get an entree level job and get some experience; Go get some certificates once you're becoming experienced with the languages and roll into a medior role... You can skip the whole 'CS degree' part and still try to find an entree level job - but a junior with no practical experience and some certificate is pretty pointless At most a certificate shows that you're motivated to learn
Type `&gt;of FileName` into the find bar to open files.
No this is bullshit. Unless you're doing something sketchy like writing side projects while at work, writing or testing them using company equipment, or it's very closely related to the work you do for the company you're very likely fine.
I graduated with a business degree and worked at an investment bank for 5 years before deciding to pursue software development. To prove to employers that I had the ability, I went back to school and completed all my Computer Science pre-requisite coursework and then completed a C#/.NET coding bootcamp. That was a huge risk: either take on $20k in loans to finish getting that piece of paper CS degree or take a chance on a bootcamp for $10k. I chose path two. Even after all that, I busted my butt for months freelancing by taking on cash jobs from Craigslist just to get actual paid experience under my belt. I put all my code on Github for the world to see. Six months later, a company took a chance by hiring me as a C#/.NET developer. It's where I've been the past 2 years. The path is long and rough but you'll get to your destination with one step at a time. 
&gt; and the person hired is usually one of the last people they interviewed. I bet they don't keep looking for their keys after they find them. Those savages.
In theory, if you don't have a condition in your contract, and your code is completely unrelated to your work, and if you absolutely didn't ever work on it in any way at work you're probably right. You probably do have an IP clause in your contract which may or may not be enforceable. Doesn't mean that you won't have to go to court though, or that you'll win. Even if you do win no one is going to employ you while you're fighting it and you'll lose anyway.
Not true. I'm able to work on any code outside of work that is FOSS, and I have even contributed back work from my company to FOSS with boss/lawyers permission. And I live in a very business friendly state.
Good luck if your employer decided to be vindictive.
We just hired a guy that didn't finish college. He had a really ugly resumé. But after a phone call, a guy who worked with the kid for 2 years told us that he was good. We tried him and after 2 or 3 days, I knew that he was exactly what we were looking for: he was able to solve about any problem he was facing. All the rest, I can teach him. He got the job even if we got some Phd guys applying for the same job offer. 
We hire based on your personal libraries and your stackoverflow contributions. We want people who can learn and solve problems on their own, school just helps some people get there. Either you are a star and I can see that you know how to help people and more importantly take the time to help others. Or you are a novice and ask the right kinds of questions, are not afraid to learn on your own time, and are not afraid to use things like public forums to solve your problems. All of those skills are what I'm looking for, programming is programming and *that* you can learn from those certifications.
Not true. It's just harder to get in the door as a junior.
Yeah but if you have enough skills a recruiter can get you past all those hurdles.
This seems to be an article about a product by people who are closely associated with the product. 
Thank you so much for the informative reply!
Removed: Rule 6.
My experience is that those companies are the ones who will be a nightmare to work for.
I don't know if it could be more clear; create an object with 4 properties and 3 different constructors. If it doesn't seem clear to you, I would suggest reading about constructors in C# 
Among internships and junior contract positions, it probably won't count against you.
For myself, I made projects and open sourced them on GitHub (BitBucket works great too, and has unlimited private repositories). I did that since I started coding, and it has gotten me two jobs (without going to university). So yeah, go make some stuff!
The [UWP Notifications sample](https://github.com/Microsoft/Windows-universal-samples/tree/master/Samples/Notifications) covers several scenarios for badges/toasts/live tiles. Is there some notification center feature you can't find an example app for? For your original question: JSON should be fine for serializing toast data. If you can't get the Newtonsoft package to work, [this sample](https://github.com/Microsoft/Windows-universal-samples/tree/master/Samples/Json) shows how to handle it using the Windows.Data.Json namespace. Feel free to PM me if you have any other questions! 
MVC. 
I just hired a Biology major as my new web developer. He has never touched LAMP but had a huge Github of MERN apps he had made after self-teaching himself to code. Started learning to code at end of 2015. In the 5 days he's been with us he's already accomplished a shitload more than the last web dev, who had a 2 year diploma in web design, had in months. Showing you can learn and backing it up is key. Proudly say "self-taught". Have a github that shows your early work and some extremely complex apps you made on your own. When I interviewed him he could back up every difficult question I hit him with. I expect at the end of the week he will have the front-end work done and then dig into the more complex backend shit later. I know I'm biased cause I come from an IT background. But if you want to prove you can code without a degree/diploma, code for yourself. Code complex, time-consuming, challenging apps. If you can back it up you'll find work. HR at my old company was leaning on reviewing personal work and hiring people with no formal education over those with degrees because too many people have them and can't backup their education with a lot of work on github.
How do you get started on upwork?
Costura Fody does not work on DLLs it can only embed to an exe. Though you found the tool you need already Libz works on producing a bundled DLL and embeds instead of merging. ILMerge and ILRepack(the open source version of ILMerge) both only do merging. So use the Libz tool to create bundled dlls that are only embedded. All that said your probably better off finding a different way to distribute your application like a self extracting package. Since you will eventually run into problems whether you merge or embed into a bundled dll.
Go to the website Create an account Create your profile Submit bids for jobs Get paid 
Which is fine. That's not make default state though.
Or get any wage that is liveable.
Yes: create a non-trivial or slightly non-trivial app in C# and track your progress in git on GitHub. Open a new repo, and each feature should be a PR against master. Essentially, show that even on a one-man project, you can perform all of the bells and whistles of software development practice while creating something that builds, is useful, has a test suite, etc. Then, use this when interviewing for Jr./entry level developer positions, etc.
 public gameObject Object; //Allows input of material colors in a set size of array; `gameObject` here needs to be capatilized: public GameObject Object; //Allows input of material colors in a set size of array; This line also looks suspect to me: Rend.gameObject = gameObject [index - 1]; //This sets the material color values inside the index I don't recall seeing an indexer like that in Unity on `GameObject`; you may need to fix or better port that. EDIT: I think there may be other issues; the code doesn't entirely match the comments. Maybe you should post the source code that you're porting.
This was the original script which actually works great in ARKit. using System.Collections; using System.Collections.Generic; using UnityEngine; public class CCButton : MonoBehaviour { public Material[] materials;//Allows input of material colors in a set size of array; public Renderer Rend; //What are we rendering? Input object(Sphere,Cylinder,...) to render. private int index = 1;//Initialize at 1, otherwise you have to press the ball twice to change colors at first. public void buttonPressed(){ if (materials.Length == 0)//If there are no materials nothing happens. return; index += 1;//When button is pressed down we increment up to the next index location if (index == materials.Length + 1)//When it reaches the end of the materials it starts over. index = 1; print (index);//used for debugging Rend.sharedMaterial = materials [index - 1]; //This sets the material color values inside the index } }
Might be firewall related. FTP uses port 21 for the connection and listing information but the actual file transfers can be on different ports (set by the server) which can explain sporadic connections. Try also changing the mode between active and passive
Ohhh. Maybe change `Material[]` to `GameObject[]`, and setup a bunch of game objects as children of your main object. Then you can enable/disable them on the fly. Otherwise, maybe you can setup multiple meshes and change them on (IIRC) `Rend.Mesh`. Ultimately, I don't think it's going to be quite as simple as swapping materials. Good news is that there's [plenty of discussion](https://www.google.ca/?gws_rd=ssl#q=Unity+swap+mesh) on how to achieve this in Unity. You might be best off not trying to adapt the material swapper in favour of using a dedicated mesh/gameobject swapper script instead.
Thanks for the info, and suggestions. I'll give it a shot tomorrow.
Tries to get us to do his homework for him, then barely responds to the comments at all when we try to point him to helpful materials. OP if you want to be a halfway decent engineer you won't get there by copy pasting stack overflow/Reddit to your degree. You need to put the work in and learn the material dawg.
I've seen far too many companies that put "or equivalent experience" then promptly ignore it.
Recruiters often get you a higher salary too, because they know the budget for the role and get paid based on what you get paid. They'll get every dollar they can for you.
**You're sending sql from the client?! If so**, I will not help you with that and I hope nobody does. What you need to do is to * prepare **data** that needs to be updated, * send that to the server, * write code on the server to update your db.
look to your right on the sidebar
Check out https://www.launchcode.org/
Send it over HTTPS. 
Sounds like homework. So I'll keep it vague enough you still have to write your own code. For loop -=2 String.format Edit: the -=2 is only one way to implement it, there are several others. Why is everyone using math and complicated paths? This could be done with a string format linq in one-two lines. 
Ok, here's my strategy. I've gone for a string only approach, since it appears you're using a homebrew 0-9 keypad button UI. First, have some base string that you'll append your numbers to: string rawInput = string.Empty; Just append 0-9 to that string depending which button is pressed. Now, to convert that string into the format you need: // Left pad the input with zeroes, such that it's a minimum of three characters long string formattedInput = rawInput.PadLeft(3, '0'); // insert the comma 2 characters from the end formattedInput = formattedInput.Insert(formattedInput.Length - 2, ","); Now, `formattedInput` should have the string in the format you want (I hope!). **EDIT:** I just thought up a *much* better way to do this. I'm assuming you want to get some sort of number or decimal out of this anyway, so try this instead: Start off with a `decimal` to hold your current input number: private decimal inputNumber = 0.00M; Every time a button is pushed, multiply the value of that input by 10, and add a hundredth of the button's number value. For example, for the number 7: private void btnSeven_Click(object sender, EventArgs e) { inputNumber *= 10; inputNumber += 0.07M; } Now, `inputNumber` is always the value of your input. In order to format that into the format that you want, use this: using System.Globalization; // ... NumberFormatInfo nfi = new NumberFormatInfo(); nfi.NumberDecimalSeparator = ","; string outputString = inputNumber.ToString(nfi); Now, `inputNumber` has been formatted into `outputString`, hopefully in the format you need. Note, you could use a `double` instead of a `decimal`, but `decimal` is nice because it's 128 bit fixed point. No floating point involved. **EDIT 2**: To delete the rightmost digit from the `inputNumber`, use this: inputNumber *= 100; inputNumber -= inputNumber % 10M; inputNumber /= 1000; I'm sure a math buff could come up with a way to simplify that though!
do you have to use string formatting? if not, you can just divide by 100 and work with that
Sidebar. /r/learnprogramming /r/learncsharp Derek Banas on YouTube Google Reddit Search for your question, it's been asked before 
Most of the suggestions here are really good ones, but very few mentioning how important it is to know someone. Yes, you should have a github account with some samples, you should be able to demonstrate problem solving skills in an interview, and all the other great ideas people are listing off, but what is really going to get your foot in the door is knowing someone who puts in a good word for you and hands your resume to the hiring manager. Since a lot of people get those initial contacts in school and you're skipping that part, I'd recommend going to meetups, conferences, bootcamps, etc. Plus, just being around people who are doing what you want to do can be a great source of inspiration. Source: Started my software career 15 years ago with no degree after meeting my boss playing MMORPGS. 
I think EF always requires a reference to update a record though. So It would always reduce down to a `SELECT WHERE` and then an `UPDATE`, instead of a single `UPDATE WHERE`.
I while I did study software development as part of my degree I can totally relate. Many if not almost all of the other students are not even worthy of being called programmers. Couldn't program their way out of a paper bag.
That won't necessarily work. Application firewalls regularly inspect https. More importantly, using https in no way prevents SQL injection attacks (which this suffers from).
In that case, you need to explain to the management why this is bad and they need to allocate a bigger budget to fix it. I absolutely agree with your firewall, what is being done is unacceptable, it's wide open to SQL injection. Edit: about your idea to encrypt stuff... no, forget it. Yes, there are ways to get some security like that, but your core problem is SQL injection.
Apart from what /u/AngularBeginner said, your new method already exists: HashSet&lt;T&gt; has a UnionWith method which does the same as your AddRange. 
Or just use String.Format instead of all that :p
Yeah I just realized that if OP is using ',' as the decimal separator, it's probably in his `CurrentCulture` on his OS anyway so no need for the `NumberFormatInfo` at all ¯\\\_(ツ)\_/¯ 1.23M.Format("0.00") Would probably produce "1,23" for them. At least the code for using the `decimal` is still good.
thats so weird I could have sworn I was getting an error when I tried it with .ToList()...
When asking for help about an error, **always** provide the **exact** error you're getting.
Echoing everyones sentiments, Do not carry on down the path you're on. The MSDN article will explain far more eloquently than I can. Please read it... https://msdn.microsoft.com/en-us/library/ff648339.aspx
I'm thinking it may be because I have windows 8 on my computer instead of windows 10 and the minimum platform version i can choose is windows 10? 
Thanks, I added that on and it worked. Hopefully my program goes smoother than installing the IDE :) 
The method you're suggesting is identical to giving the user of your application the same permissions on the database as your server side application (so, presumably owner rights or similar). If that sounds fine, then carry on and don't bother trying to hide it from the user (but do use HTTPS if you're going over the public internet). If not, do what everyone else is telling you :)
Publish an app on IOS/Android?
It's a bit difficult for me to believe it. I've never seen VS2017 not crashing after a while so that's an abstract concept for me. Still [Well... let's just say I didn't have much time to work on them.](http://imgur.com/a/osqO1) About ten minutes per session is the optimal "safe period". After that the crashes start happening. I don't recall installing any extensions or anything that could've led to this. And it's not like I can check it now, since I can't even open the damn window. I did install SQL Server Express with some Management Tools a few weeks back, though... what do you think, are these related?
Ok... first off, as other's have said; sending sql from the client is seriously the worst possible design on the planet short of just leaving the sql server open to the internet with no password. But, I do understand that you've inherited this project and it's not something you can fix at this point. So let's work on resolving the actual issue you asked about. What is your end goal? Preventing people from reading the sql being sent or simply prevent people from tampering with it? If you just want to prevent tampering you can use a shared secret hash to generate a 'security hash' of the data being sent. Basically when the user logs in you generate a random sha1 and assign it to the users row in the database as well as send it to the client -- we'll call this hash 'sshash'. When you want to send data to the server you take all the data you want to send and then append your 'sshash' and then sha1 that, lets call the result of this operation the 'ihash'. The resulting 'ihash' you send along with all your data, you never send your 'shash'. Once the server gets your request it pops the 'ihash' off the set and then generates it's own internal 'ihash' on the data you sent + the secret in your users row and compares that with the 'ihash' you sent. If the 'ihash' you sent and the 'ihash' the server generated match the server accepts the data otherwise it discards it (as the data has been tampered with) This is not foolproof by any means, but if use over https it will prevent random parties from just being able send requests to the server that get executed (without stealing your 'shash' when it's first sent) -- Once again, this is not an ideal situation and thus any solutions will be less then ideal. 
I did an uninstall and reinstall overnight a few days ago and it's still pretty much the same. I also tried repairing it beforehand. 
That's odd..whats your specs? Are you having any resource issues with other applications too?
You can do sentiment analysis with Azure Machine Learning https://docs.microsoft.com/en-us/azure/stream-analytics/stream-analytics-machine-learning-integration-tutorial As far as other tools, a quick Google search for "free sentiment analysis tools" brought up this recent link https://blog.hootsuite.com/social-media-sentiment-analysis-tools/
&gt;The new Visual Studio 2017 I'm not quite sure what you mean by "the new" Did your VS just get an update or are you running the preview version? 
This is usually the case. A lot of people don't realize just how heavy VS is. It's got a lot of features, and that comes with a big footprint. It doesn't run on toasters. 
https://sergey-tihon.github.io/Stanford.NLP.NET/StanfordCoreNLP.html Azure ML is probably easier to use, but this is an offline and free package using the Stanford NLP library. For the example C# code, you would add "sentiment" to the list of pipeline properties, like this: // Annotation pipeline configuration var props = new Properties(); props.setProperty("annotators", "tokenize, ssplit, pos, lemma, ner, parse, dcoref, sentiment");
Used VS2017 with UE4(using C++), I can confirm it is still very slow... the worse is when I attempt to go to definition.
I've used Intrinio before. A bunch of the basic stuff is free, but realtime values come with a cost I believe: https://intrinio.com/
I suggest looking into [HttpClient](https://msdn.microsoft.com/en-us/library/system.net.http.httpclient) and Intrinio's [IEX Real-Time Price Data Feed API](http://docs.intrinio.com/#iex-real-time-price-data-feed). It isn't free but it is cheap, depending on what you want to do with it. It looks like the Google Finance API has shutdown or is scheduled for shutdown.
I've very rarely had VS crash, though I did have a bizarre error with `crc.exe` failing (turned out moving an assignment from outside of a switch to inside a case fixed it).
If your VS is constantly crashy (far more than anyone else's appears to be)... Have you installed them side-by-side? How many versions do you have installed? It's possible some shared component is corrupt. Honestly, I would advise slicking your hard drive and installing Windows &amp; VS cleanly. 
the article linked at the end [is well worth checking out](http://aakinshin.net/blog/post/stephen-toub-benchmarks-part1/). it's essentially an ad for a .net-based product, but it has good information on benchmarking &amp; what is/isn't wrong with MS's post. 
Nobody's pointed this out yet, but you also don't have a correct constructor. Your class name is Employee, but your parameterless constructor is: &gt; // Constructor &gt; public CellPhone() &gt; { &gt; _name = ""; &gt; _department = ""; &gt; _position = ""; &gt; _idnumber = ""; &gt; }
You are not working hard enough if you haven't crashed VS once in a day.
I've been using VS2017 with 8GB RAM it has been really solid for me. I was expecting to have some issues using VS2017 with ASP.NET Core, but fortunately it has been solid as I said.
* What kind of projects are you loading? How large are they? Have you tried loading a smaller project? A brand-new project? * What plugins/extensions/add-ons are you loading? * What version of VS 2017 do you have installed? * What are your machine's specs? * What software do you have installed on the machine? Do you have anti-virus? Have you tried disabling it? * Have you performed a virus scan?
My only gripe and/or complaint is that it doesn't remember that I choose to see the properties in alphabetical order rather than in categories.
I don't know why you're being downvoted... does this mean I can write apps that will work on MacOS as well?
That's fucking hilarious. Will use this method from here on out.
Yes using either Mono or .NET core. You can not only write apps that are cross-platform but you can do that writing in your IDE (Rider) on a Mac, Linux, or Windows. All with one license.
Beautiful.
I havent had any crashes. But I've had to disable codelens to make intellisesne usable. It also is much slower than 2013 for pretty much everything for me. The partial load of projects is also terrible. If you f12 to a method in a unloaded project it will allow you to edit it yet wont build it.
&gt; Help -&gt; Send Feedback -&gt; Report a problem these buttons actually function in microsoft products?
Does your company have any special needs that an existing ticketing application doesn't already do? It seems kind of expensive to build an in-house application for handling helpdesk tickets. Have you explored existing helpdesk software?
We do, but I'm not allowed to talk about them publicly according to the Director of R&amp;D right beside me.
There's some open-source ones out there, so you could potentially extend them to meet your company's needs, rather than have to build a whole new application from scratch.
Is this a fresh install of the OS/IDE? I have had ALL versions of VS crash like mad once something gets corrupted. Sometimes for no reason at all. I find wiping my dev box and reinstalling the OS and dev tools once a year avoids this for the most part.
I can only speak for Visual Studio but we really look at feedback filed through the product to do product fixes and changes as needed. It helps a lot when the feedback contains the recorded information as well since those are crucial for performance and memory investigations. The new feedback tool in 2017 also allows replies to issues so in certain cases you can see developers like myself replying to your report either providing a workaround or asking more information.
I work with VS 2017 daily and haven't had any problems, it has just been a bit slow at times. What's your PC specs?
What version and build are you using? 
If your dependency injector is the bottleneck, you're doing it wrong.
Sure, but that is not the case. 
I use 2015 for production and 2017 to test and see what I'll be using in a year when it's ready.
 .Where(char.IsDigit || char.IsPunctuation) Edit: meant... .Where(c =&gt; c.IsDigit || c.IsPunctuation) My point was the LINQ Where predicate is a single binary operation. But yeah, you need the input parameter for the lambda. 
what u/pinano is indirectly saying is that if you have time to argue the merits of performance of your choice of D.I., you've solved world peace at your company,and it's raining campaign and /or diamonds every day when you walk in the door from the parking lot. I'm only 1/2 kidding btw -&gt; the perf is of so little consequence at this point that it's only an academic question in almost 100% of the cases, so you probably would need to run the numbers on your own. I stopped clocking this about 5 years ago - we've used Structure Map, AutoFact, Ninject, and Unity. Configuration differences aside, I didn't see any noticeable difference in the wild. If you run numbers, post them, I'm curious,but not enough to do the work myself :)
Sorry I was meant to post that, not sure how I did "chapterRaw.Value.Where(char.IsDigit) || (char.IsPunctuation);" lol But yea that one doesn't work either. It tells me || can't be applied to a method group.
Ah I see. So it would be impossible to accomplish what I want in a line statement?
Yes, /r/Windows10 is full of interactions with people from Microsoft.
I see. Thanks! 
Did you try the golden-fix-it standards? When you say wipe, do you mean a reinstall of VS or Windows? Could be a bad extension??? If you go to the Visual Studio Installer and then click on the 3 bars there is a repair option. chkdsk C: /F sfc /scannow DISM /Online /Cleanup-Image /RestoreHealth
In most cases, yes, the `ToList()` would be redundant. If there was some slow work in the `foreach` loop, then _in theory_ your `mylist`, if it's a deferred execution query, could run into issues _if_ it's in some corner case scenario where a slow deferred execution is bad. If it is deferred execution, and you have more than one `foreach` loop, then skipping the `.ToList()` will mean that the query will be re-run on each loop. Including the `ToList()` first forces the query to be resolved once, and only once, then the subsequent iterations are only operating on the resolved values. I imagine most likely that your scenario is fine that you can skip the `.ToList()` call. Similarly, it probably doesn't matter one way or the other for your scenario either.
Not at all. Sorry, I'm replying on mobile, so I keep going back to your post to try to put mine together. The second bullet point I was going to make turned out to be irrelevant after I reread your post. The linq I put in my last comment should do what you are trying to do. You could also look into regex, but I'm not sure there's a token for "all punctuation" so it might be kind of a pain.
chapterRaw.Value.Where(c =&gt; char.IsDigit(c) || char.IsPunctuation(c)); You can't compose method groups with ||. You can apply those methods and compose the result.
I always use regex as a lasort resort as I read it's very taxing. The method which this statement is in already has a few regex statements going on.
I don't think this is worded properly.. most of the time you want to use the type that is least restrictive as possible. For example, making a method take a List, Collection, or Enumerable... if all you need to do is iterate through the objects, you make it require IEnumerable 
Far cheaper (and millions of times safer) to use COTS. Your skill level is not up to this task and if they're so secretive that you can't even discuss business requirements here you're risking a massive hack and/or unauthorized data disclosure / data loss by trying to write your own. I'm not saying this to be a jerk, but as someone who is concerned for you and your company's financial wellbeing. 
I ran into something like this recently. I saw this, and without an understanding of why the person did it, changed it to foreach(var e in myList) {} which caused a corner case crash. So, if you're changing existing code, then be warned that you need to know why the person did what they did before changing it.
Why would you ever do that? You're making a copy of the whole list every time you call ToList(). Edit: I guess I'm a bit of an idiot; I assumed that the data structure `myList` was some sort of simple data structure, and hadn't considered something that has particularly high enumeration overhead or was remote like an EF object. Then again, the incredibly vague premise of the question isn't exactly helpful, but really, my mistake. Cheers all.
To add onto the other answers; you generally want to avoid storing value types like int and bool as reference types (object). Doing so results in what is called "boxing." I won't go into detail, as it isn't hugely important when you're starting out, but after a while, it's probably something you'll want to read up on. Good luck!
or any operation inside the enumerator that could change the original mylist
Depending on what `mylist` is, you may want to do something. For example, if `mylist` is an `IEnumberable&lt;Customer&gt;`, but it really contains a `List&lt;Customer&gt;`, then you'll get better performance by writing `foreach(var e in (List&lt;Customer&gt;)mylist)`. The reason for this is that `List&lt;T&gt;.GetEnumerator` gives you a special enumerator that avoid virtual method calls and memory allocations. `IEnumerable&lt;T&gt;.GetEnumerator` only offers the relatively slow, interface based enumerator. Of course this assumes that `mylist` will always be a `List&lt;Customer&gt;` or subclass thereof. ********* Note that all of this is academic for 99% of use cases. Unless you are dealing with large lists or a lot of memory pressure, you can ignore this comment.
I strongly disagree; calling `.ToList()` just moves where the race condition occurs. It is no more thread-safe than the code without out. If you care about multithreading, look at `ReadonlyCollection` or `ImmutableArray` as an alternative. (But not `ImmutableList`, that's stupid slow for most use cases.)
May be unrelated but as you mentioned the high RAM usage: My rather large project worked fine under VS2015 and then 2017. Had a few minor xaml editor crashes when double clicking buttons to go to the code, but that was fixed by MS weeks ago. BUT: One TINY window I use just with a text box and a close button (contains version info) suddenly crashed VS 2017. Took me a while to notice what was going on. For whatever reason the xaml editor had added 65535 lines of some closing tag with cf and lf to the textbox markup. I only noticed due to the position slider for the text window being so tiny. I had to use notepad++ to remove all the extra repetitive code and the cr lfs. Once I replaced the xaml in vs and saved it, all was good. The compiled exe was significantly smaller than before and the compile itself faster to boot. Just a thought this may have happened to you too. I have no clue what could have caused it, maybe some bug in a previous VS2017 version?
&gt; Whats with the downvotes? I didn't down vote you, but your answer seems rather flippant and lacking depth. Check out /u/grauenwolf or /u/FizixMan 's answers for more nuanced answers. 
Thanks, but I'm sort of surprised at the question - the entire premise doesn't make any sense to me. If you have some sort of enumerable list, and you want to execute a foreach loop over it, why even bother calling ToList() in the first place? Why is the poster even asking this question? Calling ToList() is going to make a copy of the original data structure, just wasting cpu and memory. Why is the question "why should you not call ToList" and not "why should you call ToList"? The entire premise makes no sense. 
The problem is that it depends entirely on what you're calling to list on, when you're calling it, and what you're doing afterwards. Depending what you're enumerating there could be huge performance penalties for not doing this. Your answer implies that this should never be done, which is a crock.
This totally depends what myList is. If it's an IQueryable coming from EF them calling ToList will evaluate the query and significantly increase performance. If it's a list or other standard collection then yes, it is redundant.
If the `mylist` is connected to database, then each time it's enumerated, there is a good chance the DB call will be made. If the database is on another machine, that will incur you: * context switch from your program to kernel (database driver does TCP/UDP networking) so you lose any runtime the scheduler has given you * network operation delay going there * database operation delay * network operation delay while the results are streamed * wait until kernel scheduler kicks you program back into action with network operation results For many operations this doesn't matter, but in general your performance is lost the second you touch network stack. So it does make sense to do `.ToList()` in specific case to be sure that all the needed objects are in-memory, especially when going through those multiple times.
Wow, mine isn't even 1/4th of that. I just started working on my project yesterday and didn't get that far with it because of the constant crashing. A few hours ago I uninstalled the VS17 Community and installed Enterprise instead. Seems to be working now and I have an Enterprice edition :D Not that I'm gonna be using all the features it offers but hey, it seems to be working!
I just finished installing VS17 Enterprise. Before I was using Community. It seems like this did the trick, not sure what exactly it was, though - reinstall in general or the Enterprise version is just working better.
That's pretty much what I was doing until 5 days ago, too. I just finished reinstalling VS17 (Enterprise ed. this time) and it seems to be working.
Maybe if you really know your application. I did that in one program where the asshats writing by data tier were usually, but not always, casting lists into IEnumerables. I never knew if a given call was going to hit the database or not. If `myList` is a `Collection&lt;Customer&gt;` or a `ReadOnlyCollection&lt;Customer&gt;` then the performance gain from using a `List` would be lost on creating said list.
I can totally believe that, which is kinda sad.
The first and foremost reason I can think of is that if "mylist" is intended to be modified in the loop, you NEED an intermediate list for that not to faceplant. Changing a collection *while* enumerating it is an error.
It's nice, but you have to be careful with some things like the "suppress useless using on save". It does not check for the code you have in (for example) a "#if !debug". So you can lose a "using" and when compiling from devenv with the flag "Release" you can be fooled by that. Hope i was clear!
I really, really, really rather not use anything from JetBrains again... I might need to since I just got [a new type of error](http://imgur.com/a/bAgcr) in VS but I'd rather not ;/
^(Hi, I'm a bot for linking direct images of albums with only 1 image) https://i.imgur.com/VT7RlRC.png ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[state_of_imgur](https://np.reddit.com/r/u_imguralbumbot/comments/6i1huv/imgur_has_gone_to_shit) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dji2sk3) 
Why?
The SQL statement string formatting primarily. Why is there so many double quotes? Most of them aren't needed. Put a break point after the statement has been build. Copy the value of the string from the quick watch window and dump it into SQL management studio or something and see if it runs and gives you data. 
Give it a try, it is huge difference compared to VS trust me
Yeah, apologies for the formatting as i said. The double quotes, as far as i know, is needed to escape double quotes in a verbatim string literal? I will try that, thanks. 
Does your SQL statement return anything when run in Management Studio? Also, if you're having problems getting your head around ADO try using a SQLDataAdapter instead, or even a [micro ORM](http://nugetmusthaves.com/Tag/micro-orm) like dapper or npoco
Yes. When I write the SQL query to the console and copy-paste and run it in mgmt-studio i get the expected results. Why is ADO, SQLDataAdapter or those Micro-ORM's better than the SqlDataReader?
This would work: var sString = "select fieldName from schema.TableName"; So most of the quotes aren't needed in the SQL string. 
This is blogspam, it's a reformulation of [this article](https://blogs.msdn.microsoft.com/dotnet/2017/06/07/performance-improvements-in-net-core/) but without the actual perf code/numbers. Useless.
One more thought: Have you tried deleting/renaming the ".vs" folder (exit out of VS first) in your solution folder?
If you're iterating it right away, don't call ToList(). If you're storing it for later (when the DB context is long gone) you need to call ToList() to force the query to execute. IIRC, some functions return IEnumerable, which can't be iterated twice like a list can.
&gt; Edit: sorry for the formatting, for some reason the first part will not compute Well, reading the "formatting help" we have: "Lines starting with four spaces are treated like code". So, prepend each code line with four spaces. Also, it's probably necessary to have an empty line above and below the code.
If it's already a list, you could modify it as you go by using a for loop, instead, but that's certainly one reason. I see it more often as a means of reifying an IEnumerable is or may be lazily generated.
You *can* modify a List&lt;T&gt; in a loop, but it needs to specifically coded to handle it. Generic helpers like foreach won't cut it. int i = 0; while(i &lt; list.Count) { var item = list[i]; bool remove = CheckNeedsRemoval(item); if (remove) list.Remove(item); else i++; }
&gt; the entire premise doesn't make any sense to me Oh yeah, totally. My sense was that the person asking the question was still new to C# or programming and looking at someone else's code.
Are you looking for AddRange? https://stackoverflow.com/questions/41039549/interface-icollection-and-addrange-c-net
Then I have bad news for you: C# only uses objects and no reference types (or at least it works differently here)
Assuming i can use the addrange to take the entries from one Queue and add them into another Queue, yes! Thank you! I just didn't want to have to iterate through the entire first queue to fill the second queue
You need to look at global hotkeys to capture them outside of your form
Queue Constructor (ICollection): Initializes a new instance of the Queue class that contains elements copied from the specified collection, has the same initial capacity as the number of elements copied, and uses the default growth factor. var queueReplica = new Queue(queue)
And note when I say it froze the program, it hung the UI thread. It's a multi-threaded application and the other threads continue doing what they were doing.
Exactly what i was looking for, thanks /u/Millkovic I knew it was a dumb question but now I'm better off for asking it!
The only real difference is that you have 2 handles to the same object. `picture.Source` and `source`
The question wasn't about a for loop, but yes - that would probably be better, as long as you make sure to compensate for the missing indices. Better yet, while we're at it; list = list.Where(...).ToList() - makes the intention clear right off the bat, is likely the most concise way in any case, and doesn't waste too much of anything.
I thought the clarification might be enlightening to OP, actually, mostly in that modifying a collection as it's being iterated through is only an issue when you're using a foreach loop or are otherwise using the collection's Enumerator. ETA: I would definitely agree that you should *not* modify a collection while you walk through it--the code is, inevitably, harder to understand than building a new collection, instead. If concision is the primary criteria, List&lt;T&gt; has a FindAll() method that takes a Predicate&lt;T&gt; and returns a new List&lt;T&gt;. I think LINQ approach is better for readability (probably not for performance, though).
I thought that the query was deferred until the query variable is iterated. When the IQueryable hits the foreach it will execute the query. Thus, ToList or foreach will have the same performance. Whoever gets called first executes the query. Not arguing just want to know if I got this wrong and if I did could you provide sources? Edit: remember we're talking EF here 
Newest preview and newest stable installed side by side. Not a single crash so far. On the other hand, some very short POCO classes take 5s to save.
Nope, only change. I will note it's .net 4.0 rather than targeting a newer .net (we have to deploy to thousands of computers if we do a .net update, and failures cause headaches so we don't update unless we NEED to) but... there we have it. 
Lets say you ask me for 1 million records. Would you rather: * A. Wait for me to find and send all one million to you. * B. Accept the first batch of one thousand and start working on that while I look for the other 999 thousand records. Calling `ToList` will give you (A), using `foreach` directly might give you (B).
Yes, however we're now running into something else that's weird and because of the nature of the job I won't be able to share more. We have a debug mode, it loads a text box onto the screen that's transparent so we can see what's going on in the background. While debug is on, the activity I described earlier happens. So old code causes the UI thread to freeze, while the new code the image is just white. So we turned debug off and the UI thread hangs regardless. It has the exact same ui freezing. Now, this again is our customer using an enormous image. When we resize it to a more reasonable size it's fine. It's just a really really weird bug. Oh and after changing the code to declare Source, it might not freeze but it DOES fill up memory over time. GC eventually kills large amounts of RAM so it never crashes but it's just another difference between them. This is the only time I've come across a change like this being such a big difference. 