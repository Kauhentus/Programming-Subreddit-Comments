Yeah, it would mean transforming and re-transforming multiple times. A wysiwyg editor running in the browser is a no brainier if based on HTML, the markdown version is gonna be a bit more complicated. What do you do in case of an email? Is it supporting markdown? And sometimes you just don't have control over the input and you will have to deal with HTML. For example I worked to an e-commerce solution for many years and it was very common to receive formatted product descriptions by the vendors, in HTML form.
You can check [asphostportal.com](https://asphostportal.com) plan. They are cost effective and reliable too.
To avoid tight coupling on method calls you should take dependencies on abstractions, but I suppose a game is a monolith so there is some requirement for in-process publish/subscribe, where in microservices we would just split the service. You could still use IObservable but I don't know if it really helps. Just make sure to use events sparingly and always remove event handlers as soon as you can, as these are the kind of invisible references that can prevent garbage collection. This may mean making things IDisposable.
byte is a ring in Z_255
&gt; A couple of issues that crop up: Indeed. Look at the mess that can crop up in C++ with unconstrained templates. They've struggled with concepts (i.e., constraints) for almost a decade now, and, AFAIK, it's still not quite finished.
C# has released a new major version about every 2 years. v8 is in Preview 2 currently. Your estimate is likely 3-4 years late.
Interesting, id like to see more articles on this
YES! You could transform hardware limitations into congruence classes, which I find cool as fuck. PS: I think you mean sbyte (0 - 255) instead of byte (-128 - 127), and also the recommanded notation is Z/256 or Z/256Z, because Z_256 could be confused with n-adic integers.
I think it would be easier to handle a string in js to dynamically re-set the image without a full page refresh.
Thanks for taking the time to reply. We try to break things down and I think we could still do better and make smaller modules but everything does have to be in a single project. Mostly our use of events is for core systems that our tools need to know about, is that tile loaded or has it just unloaded. We implement I disposable and clean up our events where ever possible. Thinking of looking at a messaging system which routes the calls rather than having a particular system take a reference and then subscribe to the event.
Mathematically I mean both, as they adhere to the same rules. sbyte is from -128 to 127 byte is from 0 to 255 Both just wrap around under addition (and subtraction) And yes Z/256 would be the right notion - been a while since University...
The s in sbyte is signed. Everything else is u (ushort, uint, ulong) for unsigned for some strange reason... :-)
Now I have seen everything, this looks interesting.
Man, Haskell seems really fascinating, I really want to learn it at one point but it has such a huge library of concepts that it feels intimidating.
love the idea!
Since you seem to know doxygen: My collaboration diagrams look the same as my class diagrams. They only show inheritance, not which classes theyre working with. Cant seem to find anything on google
Using the menu mnemonics is also using a shortcut ;-)
Ah yes my mistake, I keep confusing them with each other because of the s and u thing. Your first comment was actually correct.
AFAIK if you append/inject/add ``&lt;img src="url" /&gt;`` to DOM then it'll be rendered
If you compare to e.g. Swift, it seems that shapes is just an upgrade of interfaces. How come it's a separate concept? In Swift, protocols (their interfaces) can contain constructors and static members, including operators, and can be implemented by extension. Why invent a separate concept? Legacy compatibility?
It works!! But I don't really get it, could you please tell me, why it works? If i get it right, the int received is the size of the message that has come to the server? So as long as it's not a zero or less it displays the messages? I'm pretty lost. Sorry if it's being annoying, I'm just trying to wrap my head (?) around it.
Pretty neat, I like the idea. It would probably reach more people if it wasn't entirely built around C#. Just spitballing but I'd rather see each language as a possible deck with its own metagame. So that, for example, the "C# deck" has GC-oriented cards that recycle a lot of memory at the cost of tempo, while the "C deck" has cards that recycle a bit of memory each turn but consume very few ticks, and so on.
Assuming that everyone uses LINQ and EF is naive, and so is calling ADO “silly” It’s important to remember that there is no single best answer and you can’t just say that EF and LINQ are the “normal libraries”. To that end, instructing people to properly use parameterized sql statements is far more valuable than telling them to avoid ADO
Love the idea but this seems too specific and too complicated. Ditch the hero card concept and all .net specific references to make it accessible to larger audience. Stick to the core concept of allocating and clearing memory and balance it that way and add fancy features later
This is super important. Major programming language without http2 is just non starter
It's cool, but the last thing I want to do after work is think about work.
You can compact it even more by merging the condition and the reading of a line (`for(string line = null; null != (line = fileReader.ReadLine()); /*NOOP*/ )`) but IMO this hurts the readability of the code too much without providing any actual benefit.
Pretty much. Think of it in a database table mindset, or a spreadsheet that you would make. User Table 1: |unique ID|username|money| |:-|:-|:-| Items Table 2: |Unique ID|item name|item level| |:-|:-|:-| Login checks if username exists in table1, if it does, cool. User exists. If not, create new row. |unique ID|username|money| |:-|:-|:-| |12313|John Dizzo|69| Once logged in, player kills goblin, gets a wooden shield. Row goes into Items Table 2 if user picks it up. Table 2: |Unique id|item id|item name| |:-|:-|:-| |12313|111111|Wooden Shield| Inventory code: for each row in table 2 where Unique ID = Unique ID {bla bla bla, show item in inventory} Remember that not everything has to be hard coded, you should create items via DATA, not via code. you can even do this in a giant database table too. So, a loot table |monsterid|item id|item name| |:-|:-|:-| |8008315|111111|Wooden Shield|
Wow this makes so much more sense thank you. This also explains how games allow you to change your username freely. Actually pretty obvious now but I completely overlooked the unique Id implementation. This also sheds some light on how you’d manage equipping/un-equipping items. Only certain cells would be “active” and when a user changed gear, the new items are moved into the “active” slots, and the old ones are just moved into inventory, or inactive slots? Now would you want to have multiple tables for each user. So like a table for weapons, a table for armor, a table for materials, etc?
What specifically?
Having a table for materials and different equipment makes sense, as there would be different data tied to currency, equipment, materials. While a piece of equipment could be bought, you could have a cost column, but that wouldn't be relevant to a resource that is farmable only.
how does this make intent clear, or provide compile time checks?
Thank you so much. This really helps me to better see how a system like this would be implemented. I have to remind myself that there is rarely ever one perfect way to do something in programming. But some are more efficient than others. Also, I meant to post this in r/gamedev but thanks for answering anyway lol!
Isn't that the same issue with using `dynamic`, though?
&gt;Yes, and making pie using only bread is easily possible when all you want is to eat bread. Goddamnit. I sprayed drink everywhere after reading this.
Well, yes, exactly. You rolled your own solution that doesn't offer much of an advantage over using `dynamic`.
Definetly can have multiple tables! The way i do it is, if theres going to be multiple items in the same table, but not all of them fill the same columns, then they probably need a different table. |itemid|item name|strength required|hp restored| |:-|:-|:-|:-| |111|sword|30|| |222|potion||50| You can see how that could be split up into consumables/weapons etc? &amp;#x200B; It makes it easier, because one day you can say.. Fuck it, we're getting rid of all consumables and using spells instead. DROP TABLE CONSUMABLES CREATE TABLE SPELLS Much easier than having to export data, split up data, import data, etc etc. Also makes browsing data easier, and makes tables look nicer ;) Eww = |item id|bla|bla|blo|blu| |:-|:-|:-|:-|:-| |1|waa|||| |2||||weee| |3||22|eee333||
To strengthen this point too, having a seperate table for items purchasable makes it easier when it comes to things like different shops having different prices. |shop|itemid|price| |:-|:-|:-| |1|111|50k| |2|111|30k|
&gt; This also sheds some light on how you’d manage equipping/un-equipping items. Only certain cells would be “active” and when a user changed gear, the new items are moved into the “active” slots, and the old ones are just moved into inventory, or inactive slots? &amp;#x200B; You even gave me some ideas too haha! You could have a "storedin" column, to differentiate where an item is stored. 0 - equipped 1 - inventory 2 - bank &amp;#x200B; That way you have something to check against when a player tries to equip/interact with items. Adds some form of security layer i guess.
Haha, i always think this my self. The implementations are different with coding, game/software/website etc. But the actual methodolgy is what we sometimes need explaining, rather than the execution, which is around us everywhere haha! &amp;#x200B; I was in the exact same spot as you and couldn't get my head around a user/inventory/bank system till i stumbled across something similar in work haha.
Are those what we call a syladex?
Ehh, it was a fun experiment. I like doing those, because I come out the other end knowing a bit more about C# and/or .NET.
&gt; It’s important to remember that there is no single best answer It's equally important to think about the context going on here and read the OP's post. &gt; you can’t just say that EF and LINQ are the “normal libraries” Yes, yes I can. And they are if you are using .NET Core/Framework. &gt; To that end, instructing people to properly use parameterized sql statements is far more valuable than telling them to avoid ADO That's arguable. I feel like most people commenting here only say the title and commented before reading their body and their other comments to see more context.
Rust's type system is heavily inspired by Haskell and its offshoots.
r/learncsharp is a better place for this sort of question. The dimensions of an array are static, once it's created. You would need to create a new array with the dimensions needed and copy only the values you want to it.
While I agree that doing something a bit more generic would allow a wider audience, the fact that it reference some c# concept is really interesting. Maybe create a java / golang / python / JavaScript version? That would be a neat way of creating expansions or different versions of the same deck (with rules a bit different to reflect difference in language) Also, I would not ditch the hero cards. Lots of game these days implement them and they can add interesting changes in your playstyle
Fantastic!
Does this count as propoganda if a board member is posting links proclaiming himself a hero? &amp;#x200B; Just kidding, this is hillarious, and I love it.
Dude, Kickstart this and post on /r/boardgames.
Scott Allen should definitely be a hero!
I think your second and third points are what led to Rust's implementation being the way it is. As your third point suggests, Rust ended up with a separate trait for each operation. Taking the Add trait as an example: pub trait Add&lt;RHS = Self&gt; { type Output; fn add(self, rhs: RHS) -&gt; Self::Output; } This definition allows the output type to be defined by the implementation, so it's not fixed to `Self`. It also allows it to be generic over the type of the right hand side, though it defaults to the same type.
Oh, definitely. It’s good for a learning experience. Just not that great for production use. ;)
The docs for Receive are a bit dense, but this paragraph explains what's going on in this case[1]: &gt; If you are using a connection-oriented Socket, the Receive method will read as much data as is available, up to the size of the buffer. If the remote host shuts down the Socket connection with the Shutdown method, and all available data has been received, the Receive method will complete immediately and return zero bytes. So as long as a non-zero is returned from Receive, the client is still connected and can possibly send more data. If the client is still connected and there's no data to read, the default behavior of Receive is to block until data has arrived. [1] https://docs.microsoft.com/en-us/dotnet/api/system.net.sockets.socket.receive?view=netframework-4.8#System_Net_Sockets_Socket_Receive_System_Byte___
Nice, thank you sooo much... It now works every other time, but I'll hopefully solve that. Do You have any tips for networking with C#?
Here's an example buddy https://docs.oracle.com/cd/B28359_01/appdev.111/b28844/building_odp.htm#CEGCEFHJ Also use 'using' statements when connecting to the DB try not to leave the connection open When using string variables in a sql select statement you are leaving yourself open to SQL injection attacks. You might want to consider passing the string as a parameter to a store procedure on Oracle DB instead https://en.wikipedia.org/wiki/SQL_injection#Technical_implementations
You cannot delete anything from an array. You can only change the values.
He probably means generic list vs a specialized data structure, and thus it's a pretty bad advice.
Um... your one drive has a synced folder on your machine, correct? If so, just write the file to that local folder and let it be synced by onedrives code. Unless I'm missing something?
Exactly! I kind of understand how everything works but I don't see how it all ties together. Like, I think I could write a dictionary/table/list to store inventory, but getting it to interact with everything else is beyond me right now. It's the same for client/server communication. I understand the underlying concept, but I'm far from actually being able to implement it. &amp;#x200B; For now, I'm enjoying it though so no worries!
It would also help if I had different currencies as well I'd imagine? Like having the option to purchase with in game "gold" or actual dollars.
Yeah that looks messy! This is sort of in line with another question I was going to ask. I think I might be over using classes but I'm not sure. Say I have 5 tiers of missions. As you level up you can access higher tiers which drop more items/rss/etc but cost more rss/energy. As of now, I have a class for each tier but I have the feeling this isn't necessary. Organizing it like this has helped my amateur brain follow the logic but I have the feeling I'm over complicating it.
It depends a bit on what you're trying to accomplish. If you're looking to learn the concepts, my usual tip is to get a concrete example and then do a toy implementation using the least amount of library code as possible (read: use APIs that are closest to system calls), which you're already doing. After that, I'd probably poke around looking for socket-based examples (e.g., https://www.codeproject.com/Articles/10649/An-Introduction-to-Socket-Programming-in-NET-using) and get some ideas for moving forward. For MSDN resources, [this](https://docs.microsoft.com/en-us/dotnet/framework/network-programming/sockets) seems to be the best place to start for Sockets in particular. The See Also links seem to form an OKish tree to travel.
using System; using System.Collections.Generic; using System.IO; using System.Linq; using System.Reflection; using System.Text.RegularExpressions; using System.Xml; namespace DocumentationStandard { class Program { /// &lt;summary&gt;Test Generic Method Param 2&lt;/summary&gt; /// &lt;typeparam name="T"&gt;Generic1&lt;/typeparam&gt; /// &lt;param name="normalParam"&gt;Param1&lt;/param&gt; /// &lt;param name="normalParam2"&gt;Param2&lt;/param&gt; public void TestGenericMethod&lt;T&gt;(T normalParam, List&lt;T&gt; normalParam2) { } /// &lt;summary&gt;Test Generic Method Param 3&lt;/summary&gt; /// &lt;typeparam name="T"&gt;Generic1&lt;/typeparam&gt; /// &lt;param name="normalParam"&gt;Param1&lt;/param&gt; /// &lt;param name="normalParam2"&gt;Param2&lt;/param&gt; /// &lt;param name="normalParam3"&gt;Param3&lt;/param&gt; public void TestGenericMethod&lt;T&gt;(T normalParam, List&lt;T&gt; normalParam2, T[] normalParam3) { } /// &lt;summary&gt;Test Generic Method Param 4&lt;/summary&gt; /// &lt;typeparam name="T"&gt;Generic1&lt;/typeparam&gt; /// &lt;param name="normalParam"&gt;Param1&lt;/param&gt; /// &lt;param name="normalParam2"&gt;Param2&lt;/param&gt; /// &lt;param name="normalParam3"&gt;Param3&lt;/param&gt; /// &lt;param name="normalParam4"&gt;Param4&lt;/param&gt; public void TestGenericMethod&lt;T&gt;(T normalParam, List&lt;T&gt; normalParam2, T[] normalParam3, T[,] normalParam4) { } static void Main(string[] args) { Extensions.LoadXmlDocumentation(File.ReadAllText(PATHTOXML)); foreach (MethodInfo methodInfo in typeof(Program).GetMethods()) { Console.WriteLine(methodInfo.GetDocumentation()); } Console.ReadLine(); } } public static class Extensions { internal static Dictionary&lt;string, string&gt; loadedXmlDocumentation = new Dictionary&lt;string, string&gt;(); public static void LoadXmlDocumentation(string xmlDocumentation) { using (XmlReader xmlReader = XmlReader.Create(new StringReader(xmlDocumentation))) { while (xmlReader.Read()) { if (xmlReader.NodeType == XmlNodeType.Element &amp;&amp; xmlReader.Name == "member") { string raw_name = xmlReader["name"]; if (raw_name.Contains("`")) { raw_name = Regex.Replace(raw_name, @"\(.*\)", string.Empty); } loadedXmlDocumentation[raw_name] = xmlReader.ReadInnerXml(); } } } } public static string GetDocumentation(this Type type) { string key = "T:" + Regex.Replace(type.FullName, @"\[.*\]", string.Empty).Replace('+', '.'); loadedXmlDocumentation.TryGetValue(key, out string documentation); return documentation; } public static string GetDocumentation(this MethodInfo methodInfo) { string key; if (methodInfo.IsGenericMethod) { int genericParameterCounts = methodInfo.GetGenericArguments().Length; key = "M:" + Regex.Replace(methodInfo.DeclaringType.FullName, @"\[.*\]", string.Empty).Replace('+', '.') + "." + methodInfo.Name + (genericParameterCounts &gt; 0 ? "``" + genericParameterCounts : string.Empty); } else { ParameterInfo[] parameterInfos = methodInfo.GetParameters(); key = "M:" + Regex.Replace(methodInfo.DeclaringType.FullName, @"\[.*\]", string.Empty).Replace('+', '.') + "." + methodInfo.Name + (parameterInfos.Length &gt; 0 ? "(" + string.Join(",", parameterInfos.Select(x =&gt; x.ParameterType.ToString())) + ")" : string.Empty); } loadedXmlDocumentation.TryGetValue(key, out string documentation); return documentation; } } }
Or maybe use an ArrayList. It combines the properties of an array and a list in the sense that you can modify the contents, but still access the elements of it using an index
This code works for your test case. Sorry it isn't formatted... I had to make it on my phone.
I actually don't. The folder on onedrive is a few hundred GB and I don't want it to take up space on my SSD.
Wouldn't it be easier to declare an abstract method which runs some defined functions and returns a value, then instantiate the overloads? Would save a lot of typing and saves a lot of work adding and removing too, in a Bridge pattern.
just buy a big hdd man instead of jumping through all these hoops. or get proper cloud storage.
I'll pick up a copy and then put it right next to all of the c# books I never find time to read :)
&gt; but I think it's difficult to come up with a universal design that's worthy of being permanently codified in the language This has already happened in other languages though. There is history and established work in this area. (google "type classes") Agreed it's not easy to fit it into C# at this stage.
You should look into the shunting algorithm and converting from InFix to Reverse Polish Postfix.
With so many options how do you ever decide lmao
Yes abstract method can be used to force compliance, but abstract methods require inheritance, and you will never be able to make the primitive types inherit your abstract methods. Abstract methods do not help with this issue. They actually hurt the issue. For example, the MathNet Library (see their GitHub project) is using abstract methods to allow their "Matrix&lt;T&gt;" class to support both float and double types. However, this is NOT generic mathematics. It is a hack to make it look like they are performing generic mathematics. Look at MathNet's "LinearAlgebra" folder and you will see two nested folders "Single" and "Double" (as well as some others). They had to make custom implementations for EVERY type they want to support. This means they have hundreds of lines of duplicate code where the only difference is the data type (float/double). The reason MathNet had to do that is directly because they chose to use abstract methods. It was a poor choice. I will never be able to use "decimal" or "int" or "BigInteger" in their code without copying an pasting their entire Matrix class and implementing it for that type. Abstract methods are NOT the correct choice for generic mathematics. The correct choice is to use runtime compilation. Runtime compilation allows you to break type-safeness so you don't have to duplicate code.
I do believe Newtonsoft JSON can deserialize into a dictionary (or at least JObject that you can get a dictionary of the properties from). From there you can grab the dictionary entry for "name" and assign it to the Name property of the new instance of that "Parameter" class, and assign the dictionary you deserialized into the ExtraData property. &amp;#x200B; Or, again,with Newtonsoft, create a custom JsonConvert class and use that with deserialization methods, but that is a bit more of an in-depth topic.
Actually, I suppose this could also be implemented using a table. &amp;#x200B; |TIER|RSS 1 DROP|RSS 2 DROP|XP DROP|ENERGY DRAIN| |:-|:-|:-|:-|:-| |1|1|2|1,000|\-10| |2|2|4|2,000|\-20| |3|4|8|4,000|\-40| |4|8|16|16,000|\-80| |5|16|32|32,000|\-160| ||||||
`JsonExtensionDataAttribute` appears to do exactly what I want.
Indeed it is the first concept, as I am personally a .NET nerd. But I clearly see the possibility to create other languages editions, like Java or JavaScript edition. Merging decks from various editions is quite interesting though. The main motivation behind each edition to be separated is its completeness for each language community.
There will be! What do you think about creating a dedicated community here on Reddit, to follow changes?
Various languages editions is something definitely going in my mind. Each edition could have its own well-known heroes, well-known funny jokes and common puns.
Does it count as propaganda if a game author (me) will create a Hero card for himself?! ;)
Does it count as propaganda if a game author (me) will create a Hero card for himself?! ;)
Does it count as propaganda if a game author (me) will create a Hero card for himself?! ;)
Does it count as propaganda if a game author (me) will create a Hero card for himself?! ;)
Noted!
Including mine?;)
This is great. Update us when it's available!
Here is the code the creates the button and it looks like it creates it successfully in the report. var last = "&lt;input type='button' name='btnSubmit' id='btnSubmit' value='Create Bug' runat='server' onserverclick='Submit_Click'/&gt;"; Log.Log(Status.Info, $"Click to create bug: " + last);
Javascript code: &lt;scripts&gt; &lt;![CDATA[ document.getElementById('btnSubmit').click(); $("#btnSubmit").click(); $(‘#parentWithoutNodes’).prop("checked", true).click(); $(‘#test-count-setting &gt; div.modal-footer &gt; a’)[0].click(); ]]&gt; &lt;/scripts&gt;
especially yours :)
There should definitely be a TimeZone bug card that can only be fixed by playing the Jon Skeet hero card. Love your concept! Will follow this.
Button in dev console: &lt;input type="button" name="btnSubmit" id="btnSubmit" value="Create Bug" runat="server" onserverclick="Submit_Click"&gt;
And stack overflow cards should be considered trump.
That’d be cool, I haven’t created a community before though
Awesome!
Not just a referral link, it's a link to his blog which has a referral link on it.
I will create:)
Clean code is more than a resharper setting. Resharper can only do so much against bad design, unfortunately. I recommend code reviews if you want cleaner code.
List&lt;T&gt;. No one uses ArrayList since 2005.
I’ll send you something from my notes. But very quickly wanna share what I have started doing. There isn’t a magic bullet, because it’s subjective to your domain, team, etc.etc. Rather than making a decision of cleaning up code at random, I schedule 30-60 mins a week (that’s all I can afford) to go over recommendations from resharper analyze its usefulness, check online for pros and cons and make the change. Create a separate non-functional code cleanup PR, send for code reviews and do incremental code cleanup. Idea is to make an intentional effort towards code refactoring/ cleanup.
I've never used anything other than List&lt;T&gt; and I've never missed it.
The whole hero card thing makes it seem very much like it's aimed at a specific small group of people instead of just people interested in programming. It's almost cringy. If this was a generic programming concept teaching game, this would be awesome and a must purchase. In its current prototype state I wouldn't even consider it.
Here's an example: https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.formcollection?view=aspnetcore-2.0 it's for when you want specialized behavior.
[https://i.imgur.com/SnIwFtR.gif](https://i.imgur.com/SnIwFtR.gif)
Message me the directory plz
&gt; It would probably reach more people if it wasn't entirely built around C# The ones that don't use C# aren't people.
I got the code working for your test cases. All I had to do was some regex patterns on the "MethodInfo.ToString()". I will push the code to my project once I get the chance to clean it up. And you can check it out sometime in the future after I do. :) But generic parameters are not a deal breaker with my methodology. It is still easily possible. Yes the code from my blog post needed improvement (I already knew that). But the important thing is that the methodology works. And it does.
I was joking, fellower pcjer memester. Does the FormCollection class make it so you dont have to do [Bind] to prevent overposting? I've use Dictionaries and HashSets pretty often been a while since I used a stack or queue though. I think for a game I did one. also used a buffer queue class I made to keep some customers like most 5 recent actions tracked
well posting your code would help that inserts those items into the listView lets pretend you have a `var frolfCourses` of type `List&lt;string&gt;` that you are loading from your CSV file. you could just do a `frolfCourses.Distinct()` and that would be it.
Sorry, first time posting and wasnt sure how to post code. Just copy/paste or screen shot? Thanks.
copy your code into like notepad++, select it all, press tab once, then paste it this is to properly format it.
private void populateCourses() { lstCourseInfo.Items.Clear(); for (int i = 0; i &lt; \_courseManager.CourseList.Count; i++) { this.lstCourseInfo.Items.Add(\_courseManager.CourseList\[i\].CourseName); this.lstCourseInfo.Items\[this.lstCourseInfo.Items.Count - 1\].SubItems.Add(\_courseManager.CourseList\[i\].Location + ", IA"); } &amp;#x200B; }//End populateCourses
private void populateCourses() { lstCourseInfo.Items.Clear(); for (int i = 0; i &lt; \_courseManager.CourseList.Count; i++) { this.lstCourseInfo.Items.Add(\_courseManager.CourseList\[i\].CourseName); this.lstCourseInfo.Items\[this.lstCourseInfo.Items.Count - 1\].SubItems.Add(\_courseManager.CourseList\[i\].Location + ", IA"); } &amp;#x200B; }//End populateCourses
change &gt; `for (int i = 0; i &lt; \_courseManager.CourseList.Count; i++)` to for (int i = 0; i &lt; \_courseManager.CourseList.Distinct().Count; i++) assuming your courseList is of type `List&lt;T&gt;` or at least inherits `IEnumerable&lt;T&gt;`
Add your items from your CSV into a HashSet, which will ignore duplicates. Then, you can do an. OrderBy() before inserting to the ListView if order is important.
Thanks!
I have used ants trial, it was very good and easy to use, not cheap though. I have also used resharper's dotMemory while it is not as good is somewhat cheaper option. I got that one for free for my open source project after contacting them. I did not find visual studio's built in profiler to be as useful as I needed. I am sure it is good but the other tools had a much easier learning curve.
.Net Core will eventually supplant .NET framework
They will coexist for some time yet. Currently, they have different uses: https://devblogs.microsoft.com/cesardelatorre/net-core-1-0-net-framework-xamarin-the-whatand-when-to-use-it/#use-netcore
Looks cool will check out, thanks for posting
In the functional programming world, I get the feeling that Haskell fills that role. Adding features to it is the subject of many research projects.
Reading this might be of help: https://docs.microsoft.com/en-us/dotnet/standard/net-standard Basically, .NET Framework will remain as Windows focused. .NET Core is for all OS
&gt;I've never used a HashSet before, how does that work?
Hey Everyone, I'm new to the scene and just found this thread, but I wanted to share and see if anyone was interested in giving any constructive criticism. =D I have a few small side things I'm trying to wrap up, so that I can start on a bigger side project that I'm sure to share on here eventually. However for the time being I want to mention an open source Logger utility, a framework definition library to help with creating DALs, and a general "Utilities" project with a handful of "snippits" I've written over the years. &amp;#x200B; If anyone is interested in checking any of them out, you can find them here: [Logger](https://github.com/ProphetManX/ProphetsWay.Logger) [Base DAL Library](https://github.com/ProphetManX/ProphetsWay.BaseDataAccess) [Utilities Project](https://github.com/ProphetManX/ProphetsWay.Utilities) &amp;#x200B; Of all the projects, Logger is my most polished one. I have a few other projects out there, but they're not really ready for "sharing" just yet. Cheers!
It's similar to a list, except that it does not allow duplicates and does not maintain *any* specific order, not even the order in which the elements are added. It is also very fast to add elements to it and to perform set operations (UNION, INTERSECT, etc.) The Microsoft documentation is very good. Please always refer to it, especially the Remarks section for each page. That is where you get the most valuable pieces of information.
Thanks!
I don't see where to put my CC information
Here's the whole Azure DevOps series: https://www.youtube.com/playlist?list=PLlrxD0HtieHgaH7L8UwhPztKDsdZBGZsj
.NET Core -&gt; default for everything, especially new stuff. .NET Framework -&gt; old things and things depending on Windows-specific bits and legacy frameworks Mono -&gt; niche cases where .NET Core hasn't been ported or won't fit (e.g. I think Mono beat .NET Core to WebAsm)
As others mentioned, unless you have a specific reason, go with core, as it's what is meant to be the future of .net. Not saying that regular .net is going away any time soon, but core is the route to head for new stuff.
There's definitely a learning gap going from .NET to .NET Core, just a aheads up.
If the things like GUI would be implemented for all OSs for .Net Core then other one could be dropped.
I'm curious what you mean by this. I work in both .NET and .NET Core still aside from a very small set of libraries, I see very little difference (using .NET Core 2.0 and .NET Standard 2.0) The only big differences are in ASP.NET Core which is well... a new product, not an "upgrade" to ASP.NET and the lack of UI libraries (which is part of .NET Core 3.0).
It depends. If you are building a simple web application, e.g. web api, etc, then you may want to go with .NET Core. However, if you are building something more complex you may want to go .NET Framework. .NET Core is still in it's infancy and lacks certain functionality, and doesn't have as much of a contributing base for extensions, other third party compatible software, etc. Also, if you're used to .NET Framework, it's hard (at the moment) to make that jump to .NET Core. For now -- use what you're used to using.
One last thing. If you plan on developing software that needs to run cross-platform, that is a sign that you should use .NET Core.
Also, when creating a library, try if you can to make it for .NET Standard, which is a subset of all implementations of .NET (Core, Framework, Mono...). Only create .NET Core/Framework libraries when you really need something which is not part of .NET Standard... https://msdnshared.blob.core.windows.net/media/2016/09/dotnet-tomorrow.png
Good point!
Just out of interest, what do you mean? .net framework doesn't provide a gui for all OSs
I worked in .net framework for a long time and recently started working in .net core... they only thing I really found jarring was how references work.
I think it'd be cool if the bug cards were more interactive, maybe something like bugs that take affect if you have a certain combination of features. That could also be a mechanism to slow-down somebody that takes an early lead since more features would mean more potential bugs. You could fix the bugs by dropping the features or ... something ? Very neat concept though, would love a copy for our office.
Obviously it depends on your situation. If your output is an entire html email, then you aren't really inserting html into things so its kind of a different story. You're building the template rather than inserting into a template, which is kind of the opposite of normal. There are definitely times to whitelist html tags but it should usually be a last resort IMO
You forgot Xamarin and Unity.
I thought they used Mono?
How does missing cross-platform GUI on .Net Core prevent you from dropping .Net Framework? .Net Framework doesn't have that either. Almost everything .Net Framework can do, .Net Core 3.0 will be able to do too.
You mean how much simpler it is? Assembly rebinding, csproj reference, and packages.config all converted into a single csproj line of the dependency name and version.
I mean, when all or necessary Windows specific features would be written in some way in .NetCore then .Net Framework could become redundant. Let’s say we design desktop apps which has GUIs and running on other OSs.
Also isn’t Core intended to be cross-platform as to where standard .NET isn’t?
Access control your implementation, not your API, IMO. [Pipeline behaviors](https://github.com/jbogard/MediatR/wiki/Behaviors) seem to be a good place for this sort of thing.
You can make your own struct, to get rid of the year. It is maybe the best you can do. But I don't understand the problem with the weekly events? But you could also create a method to return the next time the event should run. It depends on the application.
Where are you creating and setting the array of dice?
It's created as a public variable in Dice, and filled in Main
You've set Dice.dice to an array of Die, but you haven't instantiated any Die objects so all elements in it will be null. In your for loop, before setting .Value, add dice[i] = new Die().
I think your array is empty. Dice.dice = new Die[6]; // You created the array but Dice.dice[0] up until Dice.dice[5] are null. After that line, do something like this: for (int i = 0; i &lt; 6; i++) { Dice.dice[i] = new Die(); }
Yep in the example `dice[i]` is null
u/hibypass You're right lmao. Thank you. One more thing though: When I do this, the main form doesn't open when debugging. No errors or exceptions either.
Either I didn't understand you, or everything you just said is wrong. .Net Core isn't in it's infancy. It's officially the go to framework for .net development. Since dotnet core 2.0 nearly every .NET Framework library works with .NET Core. It's also not that different than .NET Framework. I am not even sure what are the differences you are talking about - other than maybe, perhaps, the full dependency on Nuget or the inability to reference to a dll. Today, the only reason to develop new projects for .NET Framework is for desktop development or very specific cases where EF Core is not yet up to date with EF 6, and even that is going to change in a month when .NET Core 3.0 is released. I seriously see no reason why anyone would start a new project on .NET Framework, as it's going to become legacy very soon, and it won't receive any functional updates. I think that using .NET Core 3.0 preview makes more sense if you just can't do without those very specific things I just talked about.
Is the main method opening the form?
But he should put that distinct List into a variable. Otherwise if he has more items in it and you only distinct the list in the for parameters, he will have a count of maybe 2 but actually 10 items in the list. And then the use of CourseList[i] would pick a item which is actually a distinct.
No. I set a stop on the line below the for loop you told me to add, and the dice array isn't even getting filled with null. It seems to just break
Check what’s going on in the main class. I’m not sure why the Die class in inheriting from Main, however whenever you extend a class, the constructor of the parent class gets called after the constructor of the child class is called.
I defined the enum in Main. That's why I had Die extend it. I took away the extension on Die and just called the enum like normal, and now the form loads, but the for loop is still not filling the Die array. It's in the Main right under where I defined the Die array, and it's called on startup. I'm still getting the exception :/
Can you post the main class?
My vote is for command handler. The API can construct the request and pass it to the handler with the user info, and the command handler can determine if the user can do the check. My reason for this is that if you decide to stand up a different API, or implement some other background processing, you don't need to reimplement the user handling.
I'll edit the post
Yes. Be careful with your terminology. - "standard .NET" often means .NET Framework, which fits your observation - ".NET standard" is a library API spec which when judiciously used is very much cross platform
How do you build windows applications (.exe) with .net Core? I have been using .net framework and I do not understand about how will I make the switch to .net core.
Because it doesn't have GUI options for Windows either, for what I understand.
When dealing with future date/time, you need to ask a few questions specifically around "what does the user mean when they say 9:30am?". - Is that going to be 9:30am in whatever TZ the user happens to be on that day? - Should that be 9:30am in the geogrpahical location (IANA timezone) the event is taking place (i.e. the event is in Denver)? - Does the user expect DST (Daylight Saving Time) rules to apply, so it's 9:30am local? Or do they mean 9:30am in some UTC offset, ignoring any DST rules? In the case of "9:30am in Denver, because that's where the physical space is located". You'd want to store the starting local calendar date and the expected local time, plus the IANA TZ of "America/Denver". If they mean 9:30am in UTC-6 (ignoring DST), then you'd store that IANA TZ (there are IANA TZ strings for dealing with UTC offset "time zones"). If they mean 9:30am, wherever I happen to be at the time, then maybe store "null" in the IANA TZ location, or some value like "##LOCAL##". Misc notes: - [NodaTime](https://nodatime.org/) is the gold standard. You're going to be using LocalDate, LocalDateTime, ZonedDateTime and the TZDB which comes bundled with NodaTime. - Windows Time Zones are hot garbage, because they are often UTC offsets without any knowledge of when DST rules occur. Use the IANA timezone strings, because that's the standard. - DST rules change more often then we'd like. So you should store an "estimated UTC time" (DateTimeOffset) for every event occurrence and periodically recalculate it (from the source info) whenever the DST rules change (or you load a new version of the IANA TZDB data). - You can use DateTime with a Kind of Unspecified for storage purposes to represent local dates / times. Just have checks in the code that make sure nobody handed you a different "kind" by accident. - For events that occurred in the past, storing DateTimeOffset.UtcNow (or the UTC instant) in the database is best. Converting it to the user's preferred "local date/time" can be done in the UI layer (or as it leaves your API). Always store the past in UTC.
So when you had it extend Main, you were probably stuck in an infinite loop. Each time you said new Die(), it called the constructor of the Main class, which then created a new Die, doing so infinitely. I’ll try to think why you’re getting the exception after removing that inheritance.
You can build WPF and Winforms apps on .NET Core now I believe. You couldn’t in previous versions though.
If you're talking about the inheritance of Main in Die, I removed it. No dice, as they say
Not sure if you saw my edit. Can you post the Dice class?
I'd appreciate criticism here because I'm kinda drunk, but to me, .NETCore is basically Microsofts move to package [ADO.NET](https://ADO.NET) and [ASP.NET](https://ASP.NET) into a much more consumable format for the obvious market trend towards web development. The last half-a-decade-ish they've been building out razor and mvc (through Razor... which: cough BLAZOR \*boner\* cough), I think (again i'm drinking) this is where the criticisms that it doesn't jive well with more traditional desktop apps. The only way to really decide if you need the entire .NET framework (which I feel the need to explain for anyone not familiar is absolutely fucking massive and contains many things a huge majority of the modern web developer pool never uses). Another huge trend I've seen from Microsoft is building out their cloud platform, Azure. They have basically: download visual studio community, click through a wizard creating a .netcore web app, publish on your free azure account. This is really big to me, but this isn't a conversation about that necessarily. &amp;#x200B; one last thing in case anyone reads this: theres cheaper options than azure, but you get what you pay for in this instance i think. Its very scalable.
For the "repetition", that's a harder problem in some ways. You need a way to represent: - First Monday of the month. Or the 4th Wednesday. Or the last Thursday. - February 29th... Some tools use "cron" expressions for this (Hangfire), but cron expressions are not cure-alls. I'll have to dig around to see what might be out there that is based on top of NodaTime.
Try telling that to my employer.
I added it to the post
Remove the inheritance here as well.
It now works seamlessly with .NET Core. I have tested on all .NET Core 3 previews since the first one and they successfully load .NET Framework projects and .NET Standard projects in netcoreap3.0 with no binding conflicts. The file structure looks something like this: `.NET Core 3 Runtime ( .exe or other entry-point )` `-&gt; Loads a .NET Standard 2.x class library` `-&gt; Loads a .NET Framework class library 4.7.1` `-&gt; Loads a namespace from the Windows 10 UWP assemblies.` Didn't require any extra configuration steps for me and just worked out of the box each time.
As of last November... &gt; .NET Framework 4.8 will remain on .NET Standard 2.0 rather than implement .NET Standard 2.1
[.Net core application deployment](https://docs.microsoft.com/en-us/dotnet/core/deploying/) Sounds like you want to create a framework-dependent exectuable. The bigger question is if you are using stuff in .NET that was removed from .NET core.
I can understand people being confused by some of the new standard practices. The .NET Generic Host is a particular example I see often.
That's coming in 3.0, though (just for Windows).
I think i figured out my issue. One of my other classes is resetting the Die array. Thanks for all your help.
``` class InvItem {...} ``` Because you did not explicitly give this an accessibility, it is `internal` by default. However, you have a public class with a public method returning this type. C# does not allow you to return internal class from a public method on a public type. You likely want InvItem to be public.
Thank you. That fixed it, forgot to declare it.
What about building desktop apps like with WPF, is there some .net core option?
Over time .NET core is getting more of the Windows specific things that it lacks. Much better compatibility, including GUI (Winforms and WPF), are coming in .NET Core 3.0. In 2.0 we got the Windows compatibility library that gave us things like registry, etc. Like you mention, over time .NET Core will be the thing to use and it's where all the current development effort is going. .NET Framework will be around for quite a while yet though.
It’s coming to Core 3.0
Arrays are constant length. Either use a more appropriate data type like List that has .Remove(...) or create a new Array that is smaller with only the values you want in it.
Yeah, but I wouldn't call those "niche cases".
Cross-platform or just .net core for Windows?
Just Windows
You can think of Microsoft.Extensions.DependencyInjection as the default way to do DependencyInjection. If you need fancy stuff then you can look at other libraries like Autofac. If you are using Autofac with AspNetCore then you are using the adapter that inserts autofac into Microsoft.Extensions.DependencyInjection. That's because Microsoft.Extensions.DependencyInjection is built into AspNetCore.
Never said it wasn't impossible with your method. My complaint was that you are oversimplifying the solution and saying its complete.
Seeing how it’s a system function you’ll most likely have to Pinvoke some Windows assemblies. .NET has the capability of retrieving some system settings but as far as modifying them, you’ll have to dig through Windows API’s.
Seeing how it’s a system function you’ll most likely have to P/invoke some Windows assemblies. .NET has the capability of retrieving some system settings but as far as modifying them, you’ll have to dig through Windows API’s.
I believe CoreAudio is part of a Windows API, but if it can change application volume I haven't found out how.
It sounds like your staying in the same web context, I would inject a service into the command handler to help with the user authorization rules. In distributed systems I would typically include a user jwt token in sending the command (msmq, rabbit, etc allow setting headers when sending a message) and then validate the token and run authorization rules in the command handler.
Is there a subreddit where I can rant about C# usage?
Depending on the nature of the rant, /r/programmerhumor or /r/csharp
I would first check to see if it is deprecated. There is a library in .NET that retrieves system colors but has been deprecated for almost 10 years. WinSAT also no longer assessed D3D scores, another function deprecated. If you can’t get it working then setup a virtual machine with an earlier install and check it out, Windows has been changing quite a bit under the hood. And the changes are happening so fast that other programmers, even some of Microsofts own, simply can’t keep up.
That may be it. I wasn't sure since I thought that was the case with calls like IAudioSession but I later learned I just needed the right library. Right now you've given me a good lead with P/invoke, though, so I'm exploring this at the moment. I now know about SndVol32.exe, which seems promising so far.
.NET Core is 3 years old and tbh only after version 2.0 was it okay to develop real stuff on. So that is 1-2 years versus 17-18 years. So saying it is in its infancy isn't misleading. If you write all your libraries to .NET Standard 2 it doesn't matter whether your API project is intended for Full Fat .NET Framework or .NET core as everything else you have written is compatible in both. There are plenty of valid reasons why you want to develop for .NET full fat. Here is a few from the top of my head. * You are only targeting windows machines and can target framework versions included with Windows. * You don't want to have to distribute the runtime with you application (the runtime is at least 100mb, a lot of my apps are a few KB. * You are in a locked down environment. * You need Windows specific features (yes the windows compat package helps a lot but it isn't perfect). * You need to include third party libraries that haven't been ported to .NET core yet. * You have other projects that need to be ported to .NET core.
Are you calling the executable using command line arguments?
No, I read it's just in the System32 folder so I took a quick peek myself. I'm sad to see it just opens the usual volume mixer. I have no knowledge of how I could use an existing executable to do what I'm looking for.
.NET Core will \*\*eventually\*\* replace "Full Fat .NET". However you can mitigate dependency on a framework by using .NET standard in many of your class library projects instead of pointing to a particular framework version and then either Multi-target an assembly or port it to another in the future. I suggest you read this: [https://weblog.west-wind.com/posts/2016/Nov/23/NET-Standard-20-Making-Sense-of-NET-Again](https://weblog.west-wind.com/posts/2016/Nov/23/NET-Standard-20-Making-Sense-of-NET-Again) and this: [https://weblog.west-wind.com/posts/2017/Jun/22/MultiTargeting-and-Porting-a-NET-Library-to-NET-Core-20](https://weblog.west-wind.com/posts/2017/Jun/22/MultiTargeting-and-Porting-a-NET-Library-to-NET-Core-20)
Thank you!
That BindableBase link doesn't seem valid anymore..
It’s a native application. It’s using the API you’ll be wanting to use, so now you know it’s possible. As far as using the executable, you can’t, it’s just a GUI layer over an API, kind of like the now obsolete Windows Experience Index. Also, executables are not libraries. The only way you would be able to use an executable is by calling it with command line arguments. You can try a hacky solution just to get you up and running by seeing if there is a command in CMD and just pass the command line arguments. You’ll want to use System.Diagnostics for this and create a new process. It’s something I’ve never looked into, but worst case scenario you’ll have to search and loop through audio sources. Also, why not use Windows Management Instruction (WMI), it’s built for this type of stuff. IT administrators use WMI all the time for writing scripts and it’s easy to use. Microsoft even has a code generator application for WMI to save programmers time.
You may find [NAudio](https://github.com/naudio/NAudio) useful, though I don't have enough experience to answer your question offhand.
They are adding Windows Forms and WPF to .net core. They will still only run on windows but have serious speed increases and will be self contained. The development and files appear almost exactly the same.
They are adding forms and WPF to .net core 3. They run faster and are self contained. LINK: https://dzone.com/articles/wpf-and-winforms-will-run-on-net-core-3
You've explained a lot, thank you. It's a struggle to know what it and isn't possible (or at least good practice) since I'm mostly going off of [this](http://www.vbforums.com/showthread.php?645348-master-volume-windows-7) thread where they are mostly just talking about what the code does. I think at one point they mentioned they were controlling it by calling SndVol.exe, so either I misunderstood or they were using arguments as you described. I hadn't heard of WMI before. And to be honest, I'm hesitant to download new things if I don't think I'll use them for more than one specific application. It looks like a whole other tool I'd have to learn to use so I'll just keep it in a tab to read over every so often. Then again I might just be blind. That snippet of code I originally showed came with bigass classes that are way beyond me which define everything I need to use the two functions I thought were from some other library. I just copied and pasted the rest of it below the rest of my code and it all seems to work fine. I just need to play around with how I might be able to set the volume, but now that I have a working example of how to read all of the streams I think I'll be able to figure out the rest.
WMI code creator is just a single exe you download from Microsoft, and it’s all GUI based, has drop down menus. And that’s the fun of programming! But once you get it working, it always makes you smile.
Biggest thing holding a lot of us back are third party libraries that don’t target standard or core yet. Luckily, mono is surprisingly good, so most of those framework-only libraries work fine under the mono docker image (makes debugging tricky though, write/build/test on Windows, then deploy/test again on Linux)
Can mono load .NET standard libraries now? Last time I poked at it it could only do Framework.
It's missing too much for me. Autofac is my preferred. And I'm super annoyed about all the dumb libraries which can only be registered with extension methods. Kinda missing the point, dudes.
Unity I think is a hard fork of Mono and is missing a lot of modern .NET features like async.
https://docs.microsoft.com/en-us/dotnet/standard/net-standard says that Mono 5.4 supports .NET Standard 2.0
Oh cool, I might give it another look. (Although at this point I've just been using .net core on linux instead)
The only learning gap is converting your project solution to the newest version.
You should probably have some type of auth middleware and not allow a user to access the endpoint if they don't have permissions to modify
I get why, but it still upsets me that they did this.
You can register all of the stuff separately avoiding Extension Methods with MS DependencyInjection.
Thank you
Thank you
Thank you
Thank you
k
Look at how EarTrumpet does it. It's open source and on GitHub.
``dotnet publish -c release -r win-x64``
Exactly. EarTrumpet uses the CoreAudio interface to query the devices and get the active sessions. I looked through the code and sadly the logic is quite mixed with the application specific code but it does the job. For completeness, here is the link to github: [https://github.com/File-New-Project/EarTrumpet](https://github.com/File-New-Project/EarTrumpet)
&gt; Given many of the API additions in .NET Standard 2.1 require runtime changes in order to be meaningful, .NET Framework 4.8 will remain on .NET Standard 2.0 rather than implement .NET Standard 2.1. 2.1 was released after 4.8 was feature frozen, that's all.
&gt;You are only targeting windows machines and can target framework versions included with Windows. That's not a valid reason, .NET Framework isn't going to receive any functional updates. Just because you can target .NET Framework doesn't mean you should. &gt;You don't want to have to distribute the runtime with you application (the runtime is at least 100mb, a lot of my apps are a few KB. Valid point, although it's seems like a very petty reason. Anyway dotnet core will probably be installed on Windows by default. &gt;You need to include third party libraries that haven't been ported to .NET core yet. &gt;You have other projects that need to be ported to .NET core. You know you can use libraries that were built on .NET Framework for a .NET Core project? You certainly don't have to port them all at once. You will get a warning stating that it might cause issues, but the odds of you encountering a project that wasn't ported that doesn't work on a windows machine is virtually nonexistent, unless you are using very specific and uncommon windows things.
I don't use mediatr, so maybe I'm missing something, but when using Autofac what's stopping you from registering all handlers with a simple assembly scan?
aspnetcore is what you want to develop on. You'll be able to put your apps in a container registry and deploy from there.
Was trying to register them all via fetching by interface, haven't managed to achieve this unfortunately.
This is a good starting point I think: https://docs.microsoft.com/en-us/windows/desktop/api/audiopolicy/nn-audiopolicy-iaudiosessionmanager2 It uses GetSessionEnumerator and then GetSimpleAudioVolume (https://docs.microsoft.com/en-us/windows/desktop/api/audiopolicy/nf-audiopolicy-iaudiosessionmanager-getsimpleaudiovolume). This seems a good starting point from the EarTrumpet source: https://github.com/File-New-Project/EarTrumpet/blob/master/EarTrumpet/DataModel/WindowsAudio/Internal/AudioDeviceSessionCollection.cs
There is a package that does that and it uses .Net Core DI container under the hood, so you don't have to drag AutoFac only for this. It's called Scrutor and you can get it here https://github.com/khellang/Scrutor
Will investigate it. Thank you very much!
I can confirm that I have registered all mediatr handlers with one call.
You are welcome. Hope it will work well for your case.
Could you take the R value of the lightest and darkest shade of red, and use those as bounds in your check?
Your requirement doesn't seem precise enough. I've worked by curiosity with colors a while ago in C#, there are a bunch of formulas that exist to check various things between different colors. But I can't really tell what you want to do. Basically, you want to treat an input color like a number, and round it to the nearest looking color in a list? In which case, [StackOverflow](https://stackoverflow.com/questions/27374550/how-to-compare-color-object-and-get-closest-color-in-an-color) has the answer.
You could check the hue and set a threshold for each color.
I’m not certain on the implementation and if it actually works as expected but if my first thoughts have something that works it might be useful, If R&gt;G+B Pixel.isRed = true This would also eliminate grey colours, might be worth generating an image using these colours to show what colours will make it through, and you could add tweaks to alter the catchment area.
I wanted to be nice to pastebin and set it to last a month. It's a very known piece of code, you can google it.
It's a bit more complicated than that, unfortunately. For example, an R value between, say, 96 and 192, would yield a false positive for something that indeed has an R value of 128, but also for G and B, thus being an absolutely middlepoint grey. The issue with colours is they are subjective. In reality there are no colours (aside from the fact that indeed colours themselves don't exist, as they're just wavelengths interpreted by our brains). They're a manmade concept. If we take colour blindess into account, but also the fact that some animals have seven types of receptors (mantis shrimps), thus "seeing" colours we can't even imagine, the problem becomes more obvious. So "similarity" is in the eye of the beholder.
You want to load the picture into an int array so that each pixel is an int. Then you can use bitshifting to calculate the rgb values. You can find how to do this using google.
Sure, but the author will probably have his own acceptable definition of red and can parameterize accordingly. The G and B values will also have to be accounted for.
I'm currently in the process of finding ways to enforce coding conventions on the dev team I'm in. We made a list of what we want to do how, now it's on be to find a way to make VS/R# use the same rules for everyone. My plan is to put as many rules as possible into the .editorconfig file of our solution. Editorconfig has basic rules about spacing, indentation, this/static qualifications. But it also had the possibility of actually building your own rules for methods/fields/etc, depending on accessibility and all other modifiers. You can for example make async methods end in Async, or start with whatever you'd like. I had extreme difficulties to understand the semantics of that "language": if you need help, just ask. I can give you good examples.
Could you use a method more or less like the one below? public static class ColourUtils { public static bool IsRed(this Color color) { if (color.R &lt; 70) { return false; } if (color.G &gt; color.R / 3) { return false; } if (color.B &gt; color.R / 3) { return false; } return true; } } From a quick test it appears to only return true for values which I consider are red but you should change the numbers slightly if you would like it to be more general/strict.
This is correct answer. Say you want to identify all red pixels, forget about RGB and convert every pixel to HSV. Then just find thresholds for what you'd still consider "red enough" hue and possibly do something similar to saturation and value. Literally only few lines of code.
Nope, you can do async/await and use Netstandard 2.0 libs in Unity. One tricky thing is Reflectection when building for iOS, because it tries to find unused code and deletes that, but it might be used for reflection, so you have to explicitly tell it to keep certain types untouched with the link.xml file.
Take a look at this: https://github.com/AvaloniaUI/Avalonia
This works fine, thansk a lot!
You could use signalr instead. I have never done it, but I am pretty sure it supports node as a client language.
Your examples don't make sense to me. You can look at $"I have {qty} apples and I want to {verb} them". You can use {list[0].ToString()]} as well if that's what you have.
``` function interpolateString(quantity, verb) { return `I have ${quantity} apples. I want to ${verb} them!`; } interpolateString(3, “eat”); list = [7, “sell”] interpolateString(list[0], list[1]); ```
More low quality blogspam, plus it has nothing to do with Xamarin Forms. The [Polly repo](https://github.com/App-vNext/Polly/blob/master/README.md) is far more informative.
that's perfect, thanks
To the point where I just created a blog post and video about it: [https://damian.fyi/2019/04/27/not-even-worth-one-star-reacting-constructively-to-app-store-reviews/](https://damian.fyi/2019/04/27/not-even-worth-one-star-reacting-constructively-to-app-store-reviews/) &amp;#x200B; [https://youtu.be/qOiaGJMJkjc](https://youtu.be/qOiaGJMJkjc)
Thank you for saving me time reading the blog post :)
I don't see how that would help. Getting the RGB values is not an issue here.
are you wanting to improve performance? depending on what you are doing you could convert to hsv then only check hue, but if you have to convert the whole inage each time you get no net perf win. if you used an array you would get better perf then a list, and you could speed this up with simd i instructions and parallelism.
Nice SteamBot The best I've ever used advice
Sorry through this was r/JavaScript 😂
For those who prefer Reddit over newsletter, and would like to track progress - here is [/r/outofmemorygame](https://www.reddit.com/r/outofmemorygame/)
Not when it's internal and all they provide is the extension methods.
An interesting solution is to think about this as more of a vector problem then a color problem. If you think about it like a vector then you can essentially take the angle between the "red" you want to test for and the input color. If the angle between those two vectors is acute enough, then you've got a color that matches. This would allow you to test irrespective of other characteristics such as saturation. Unfortunately the standard .net math libraries don't have vector math in them, but there are a few out there that will allow you to do this.
Sounds like you want [String.Format](https://docs.microsoft.com/en-us/dotnet/api/system.string.format?view=netframework-4.8#Starting). You can specify individual parameters; var generatedApplesMessage = string.Format("I have {0} apples and I want to {1} them", "3", "eat"); // output: "I have 3 apples and I want to eat them" You can have an array of parameters; var generatedErrorMessage = string.Format("You have an error '{0}' on line {1} where you call '{2}'", new string[] { "object not set to instance of an object", "10", "GetObject()" }); // output: "You have an error 'object not set to instance of an object' on line 10 where you call 'GetObject()' Or you could wrap it in a function; public string GenerateMessage(string template, params string[] args) { return string.Format(template, args); }
Off topic, but if you were to put your code in Azure DevOps you could have different projects with their own projects. :)
Sounds like you want [String.Format](https://docs.microsoft.com/en-us/dotnet/api/system.string.format?view=netframework-4.8#Starting). You can specify individual parameters; var generatedApplesMessage = string.Format("I have {0} apples and I want to {1} them", "3", "eat"); // output: "I have 3 apples and I want to eat them" You can have an array of parameters; var generatedErrorMessage = string.Format("You have an error '{0}' on line {1} where you call '{2}'", new string[] { "object not set to instance of an object", "10", "GetObject()" }); // output: "You have an error 'object not set to instance of an object' on line 10 where you call 'GetObject()' Or you could wrap it in a method; public string GenerateMessage(string template, params object[] args) { return string.Format(template, args); } And call it like; var template = "This is a {0} template that takes {1} arguments"; var arguments = new object[] { "generic", 2 }; var generatedMessage = GenerateMessage(template, arguments); // output: "This is a generic template that takes 2 arguments"
c.GetHue() &lt; 60 || c.GetHue() &gt;= 300
https://github.com/qmlnet/qmlnet
.net framework wil exist for the Enterprise ( eg. SLA related applications). And won't dissapear, more bound to Windows ofc. .net core is for cross-platform applications, the community and will have a faster release cycle. The best things of .net will be merged to .net Framework also. Best thing is to move to. Net core in general. This seems to be the temporarily conclusion when reading all things on. Net blogs. .net Framework is not deprecated. It's like what happened a bit with WPF though. Everyone cried it was deprecated, but it was feature-complete and in maintenance mode. They recently ported it to .net core, which was a very hard job. I'm not saying. Net Framework is in maintenance mode fyi. I'm saying there is some lack in communication about it similar to WPF and I stand by my conclusion about it. Everyone is currently free to interpret it as they see fit for now.
Actually you have a [Vector struct](https://docs.microsoft.com/en-us/dotnet/api/system.windows.vector?view=netframework-4.8) in `System.Windows` and a [Vector class](https://docs.microsoft.com/en-us/dotnet/api/system.numerics.vector?view=netstandard-2.1) in `System.Numerics`.
Specifically, you want it to be some function of GetHue(), GetSaturation(), and GetBrightness(). You wouldn't want to only look at the hue, since you'd get false positives for some whites/blacks/greys that have an imperceptible red hue. [Visual explanation](https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/HSL_color_solid_cylinder_saturation_gray.png/800px-HSL_color_solid_cylinder_saturation_gray.png) [Interactive color picker](http://hslpicker.com)
&gt; This is correct answer. There's lots of correct answers. HuSL fans for example would say you're going to get a lot of incorrect correlations in the blue-green range, and miss a lot of them in orange-yellow
that's literally the same thing as he's currently doing, in a slightly different color model twist ending: RGB actually has slightly better color proximity than HSL, which is why you have things like HuSL and HSB
What makes this a better choice than Blazor?
Why create the GenerateMessage method? It has the same parameters as string.Format. I would simply use string.Format `` foreach (var value in [(3, "eat"), (4, "wash")]) string.Format("I have {0} apples and I want to {1} them", value.Item1, value.Item2); ``
&gt; That's not a valid reason, .NET Framework isn't going to receive any functional updates. Just because you can target .NET Framework doesn't mean you should. Yes it is. Your binary is smaller because you don't have to distribute the .NET runtime. This chap sums it up much better than me: https://weblog.west-wind.com/posts/2019/Apr/24/First-Steps-in-porting-Markdown-Monster-to-NET-Core-30#distribution I suggest you read that. It depends on your clients / audience and what you are intending on doing. Saying it isn't valid is incorrect. &gt; You know you can use libraries that were built on .NET Framework for a .NET Core project? You certainly don't have to port them all at once. You will get a warning stating that it might cause issues, but the odds of you encountering a project that wasn't ported that doesn't work on a windows machine is virtually nonexistent, unless you are using very specific and uncommon windows things. It really depends. Here is a list of things off the top of my head * PInvokes. * Hardcoded paths etc. * looks for Private members via reflection in the actual framework (yes people do this). These maybe *uncommon* but not *unheard* of. &gt; The rest of your points are vaild, and probably account for a very tiny number of cases. Yes I know they account for a small number of use cases. However those use cases do exist and should be considered.
Because of this comment he left; &gt; point is, my program needs to generate errormessages and these messages have blanks: string interpolateString(string errorMessageTemplate, args[]) If /u/Shrubberer gave us a little more context, we could help him more. I *assumed* he may want to generate different error messages with different templates so I show a simple way of doing that.
Which gives you more information about what your code is really doing - `string.Format` or `GenerateMessage`?
Blazor is an excellent choice. Check out our [Compare to Blazor](https://www.lesarde.com/compare-to-blazor) page. Frogui and Blazor have *very different* DNA. The primary differences is Blazor is a hypertext preprocessor (HTML + Blazor syntax) that requires developers also use a traditional client web stack (HTML, CSS, often JavaScript, likely a UI framework such as Bootstrap, likely CSS extensions such as Sass). Frogui is a does not need any of those. Additionally, Frogui has features common in XAML-based, iOS and Android frameworks.
Inquiring minds would like to know. Keep in mind, though, that Blazor may not be the best choice across the entire implementation envelope, and that other products (like this one) may be a superior choice under specific conditions. What is needed is careful analysis of those conditions recorded in a public manner so that developers can make (google) quick and definitive decisions without having to research the wheel all over again.
I'm not talking about comparing to the list... The only purpose of the list is to define what "red" is. HSL is built into .NET and maps a lot better to the question of "what is red".
C# doesn't require one file per class. So, probably not
I have had hard time reading and understanding Wiki on Polly repo (especially mixing policies together and executing some action). Could you recommend some different sources with examples?
hi i am quite new to coding in general and I want to know how some of the better coders in this com have learned to code. Take classes, learn onlines etc.
Is this kind of parenthesis style advised against by ms now?
Yes, Java has it nicer in that regard. I would love to have a global namespace declaration for files. It would immediately reduce nesting in almost all files. Instead we get a scope-wide using declaration, which I think will reduce maintainability..
No, there isn’t. You can always scroll the two characters (nobody uses more to indent, right?) to the right if the space is really that tight but with current machines it shouldn’t be a problem. Even with 720p screen 80 characters would fit fine at once.
Try F# as a gateway drug?
Given that most files only contain one namespace and one class each, both programming languages would benefit from allowing the following syntax: namespace foo; public class Bar; public static void Main(string[] args) { // do stuff } Kotlin has something like this so Java and C# could do it too.
What exactly do you mean by 'parenthesis style'?
Do you plan to support shell when it comes with 4.0?
I would understand that if the method didn't have an identical signature to string.Format. If you're looking to have cleaner code, this might be a better option: ` static string GenerateMessage(int numberOfApples, string verb) =&gt; $"you have {numberOfApples} and want to {verb} them"; `
How do they or will they (potentially) compare in performance? Currently blazor is kind of slow on the frontend, though in concept it should be very fast.
He might mean the bracing style with it being on the same line.
Good points. I will continue to update the Frogui section of the website to help developers make educated decisions about
Maybe! Would you please elaborate?
Thought he might: I just did both in the Java style because I'm a Java programmer interested in C#; also I think the Visual Studio default is \_stupid\_.
I’ve become much more used to the same-line style myself. I’m a .NET dev and liked the brace opening on the next line for readability, but all other languages I use place it on the same line so I just caved for consistency.
As I can see in GitHub it still uses MongoDB.Driver under the hood. Will this project have it's own linq translation mechanism or suffer the same bugs from official driver? Asking because linq bugs in official driver bother me the most :(
yes this uses driver linq. could you please direct me towards the bugs you've seen? I'm using this in a couple of large production apps and haven't come across any issues with the driver linq. thanks!
The one namespace I can get behind, but one class is unusual; at least what I'm working with. Also Enums can exist on the same level as classes. I would not like, if I had to put every Enum in their own file.
No use for constructors in select statement the one I can remember right away.
Both Blazor and Frogui use the same tool underneath, Mono for WebAssembly (MW), so can only run as fast as MW allows. MW currently interprets and does not compile, and is not efficient about selecting which assemblies to load, which results in slow load times and performance. But the Microsoft Xamarin is making good progress. Check out our Build on [Mono for WebAssembly](https://www.lesarde.com/monowasm) page for more information and status updates.
Hmm well I always have only one class or enum per file; it makes thinking about the directories and files easier and keeps the files uncluttered
It should only take one line to begin a class or function is my thinking and another to end it, which is what the Java approach achieves; and so I view it as a bit of a waste of a line. I guess a lot of C# devs stick with it because it's the Visual Studio default.
https://devblogs.microsoft.com/xamarin/xamarin-forms-4-0-preview/
&gt; &gt; twist ending: RGB actually has slightly better color proximity than HSL, &gt; &gt; HSL ... maps a lot better to the question of "what is red" than RGB. Color is like sorting: people think there's one better model, but when you get into the reeds, there's lots of models, and the ones we're taught to laugh at are oftentimes the right choices. (For example, your video cards and video games sort z-depth with bubble sort, because it can usually get the job done before other sorts have done their setup when the list is below ten elements.) In your choice of red, HSB and RGB are literally identical. For the question of color proximity, in the cool colors, HSL does a better job; in the warm colors, RGB does a better job. Human color labels show a strong bias towards the warm colors; we have tons of reds, yellows, oranges, browns, flesh tones, peaches, and so forth, and relatively few blues and cyans by comparison. RGB's accuracy for color proximity averaged over the full saturation spectrum is about 8% better than HSB's. There are far better choices than either. Both of these are things that were already out of date by the 1930s. For color proximity, a person should generally be using a perceptual model, not an energetic model. Energetic models like RGB and HSL have several crucial faults. 1. They should be in a log space, rather than the linear space that they're actually in. This over-values dark colors. 1. Because most of the colors we're talking about are made from multiple channels, this means primaries have a higher "gravity" than secondaries and tertiaries. 1. This is why HSL dominates in the cool colors - they're predominantly two-channel one-near-silent off-secondary colors, whereas the warm colors are predominantly three-channel tertiaries. Because we're talking about linear error signal over a cumulative log space, each channel adds failure, and so the heavier use of the third channel causes a loss. 1. Humans are far more sensitive to green channel, and somewhat more sensitive to red channel, but far less sensitive to blue channel. This is why CCDs have two green pixels to one red and blue (or one white pixel) - it better maps to what humans are actually sensitive to. A straight cumulative approach will wildly over-value blue differences, wildly under-value green differences, and get red sort of correct. All of these models are built into .NET, as well as several much better ones. That's beside the point; these models are about ten lines of code, and if the right choice is one that's not built into .NET, it's trivially easy to add. HSL actually does a fairly poor job of the topic in question, once you go get the math out and look. By example, [HSLuv](http://www.hsluv.org/) was developed specifically to address these things. Have a look
One type per file is pretty standard at the level I work at.
Ahh! Thanks for the heads-up. Short answer: yes. I am really happy to see this UI pattern formalized with Xamarin. This pattern has been something I have been thinking about for awhile and definitely will be in Frogui. It fits our concerted effort to steer developers away from the parts of the WPF (etc.) that can become a nightmare to maintain, such as data templates, towards more modern, easier to manage techniques.
Your interpolateString method already exists and is called string.Format.
The naming is a mess. I've been doing cross platform stuff with .NET for a while and I get confused.
For 99% of developers reading the code, `string.Format`, because they’ve seen and used it a million times and don’t need to go to the method definition to see what it does.
"an error" ... Good luck with that!
To compare color similarity, I would use Delta-E. Delta-E is a perceptual model where 1.0 is the minimum difference detectable by the eye. To compare hue only, I would convert to LCHab, normalize the LC components, and then Delta-E the two colors. You could also compare the H components directly, but this will not be as perceptually accurate. Then you've got a single knob to tweak: what is the maximum Delta-E you consider still "red". HSV sucks, don't use it.
I assume you mean the csproj file format? That new format can be used for .net framework as well.
I feel you. It took me a long time to grock their terminology. Really feels like it could have been named better
What is “assembly rebinding”?
Target_Marker**.transform.position** = new Vector3(target.transform.position.x, target.transform.position.y, target.transform.position.z); --- Although you can just as well directly say: **Target_Marker.transform.position = target.transform.position;** --- And you can also achieve the same with object hierarchy / parenting. If you make *Target_Marker* a child of *target*, then *Target_Marker* will be moved when *target* is moving.
While I don’t get confused anymore, it is a bit convoluted and potentially confusing.
...I feel every stupid for not thinking of that..of just adding in transform.position, thanks!
&gt; .NET Framework isn’t going to receive any functional updates. From when, now? 4.8 did include a few (for example, in WCF). &gt; Anyway dotnet core will probably be installed on Windows by default. Yeah *some* version of it, at least. But if the runtime and ABI don’t change too often, it can work. But then you’d need either thinning or separate downloads to avoid the size overhead.
&gt; I feel every stupid for not thinking of that Don't. Not asking questions is the real stupid. Keep talking about your code, you're welcome!
That’s obvious since .NET framework doesn’t support it in any way. So it’s not so much a sign as it is an absolute requirement :)
Granted, I'm sure you're right that there are better options. When you say HSL and RGB do a better job in cool/warm cases, what are you comparing exactly? My suggestion was do a upper+lower bound of H, S, and L to get an approximation of whether something is red. What's the equivalent function with RGB that you're comparing to?
This looks like a job for Deep Neural Nets!
I was actually amazed to find WPF in .Net Core, and Winforms as well. Do you have the same features as you do in the full .Net framework?
Yes, that's correct.
I thought so, yeah
Yea there is SignalR npm package. I recently used it, and it works great.
Or Uno Platform?
I would not compare colors by comparing their RGB values. As someone else mentioned, there is a similarity measure for the color difference (Delta-E). There is a neat library for computing Delta-E: https://github.com/tompazourek/Colourful#color-difference I would suggest to compute the Delta-E differences between all the shades of red you use to find/fine-tune the threshold applicable for your use-case.
It's in the app.config. It instructs your program to treat a dependency (dll) as if it were a different version. That way if one of your dependencies expects json.NET version 11.0.1 but you have 11.0.2 installed, it still works.
Yeah, we use it as well. It’s usually called “binding redirect”, it rebinding, so I was just checking if you were talking about the same thing, which seems to be the case :) (Note that it redirects *assembly* versions, where your json version examples are nuget versions.)
We use the decorator pattern for this. Your `UpdateAddressCommandHandler` which inherits from `ICommandHandler&lt;UpdateAddressCommand&gt;` will only be executed after the `UpdateAddressCommandSecurityValidator` succeeded. This class inherits from BaseCommandValidator and has an abstract IsAuthorized method that returns a boolean. What we did is create a generic SecurityCommandDecorator which has an instance of the BaseCommandValidator&lt;Command&gt; class and that calls the method. If it succeeds, it calls the next handler. Otherwise it throws. If you want a concrete example I can do it in 2 days
That does sound interesting and I would appreciate an example thank you for your time.
Okay, I think I may understand what you were saying. Are you referring to something like [this](https://en.wikipedia.org/wiki/Color_difference)? My point with suggesting HSL is that the original question is not a color difference question. Light pink and dark red are both defined as red but orange is not (despite being closer from a color difference point of view). The question is very closely tied to the definition of hue, and therefore HSL is a decent measurement (though I agree that HSLuv would be somewhat better).
I think once web assembly hits, that’s gonna shift a lot of devs away from JavaScript which was historically used for logic in the browser. JavaScript will be a thingof the past and all these schmucks that jumped on the JS train will regret it once they realize it’s a nightmare to maintain.
Update: Just downloaded VS2019 community and I must say I'm impressed. It's much faster than VS2017 and Rider. Opens in 2 seconds. Amazing. Of course, I'm using SSD.
That’s a huge “depends.” If Blazor can’t perform client-side on par with Angular or React, people will stay right where they are and keep on using JS
Yes, I know a bit about Uno and talk to their main developer from time to time! Uno and Frogui are similar in that they both are based on the Microsoft XAML family and built on Mono For WebAssembly. Uno specifically targets UWP compatibility, and Frogui takes the best 80% of WPF and UWP and modifies the API to leverage the power of modern browsers. For example, UWP's base graphic unit is the **double** and so is Uno's. The web has many graphic units so Frogui created the **Length** struct and uses it throughout. It has all access to all these units: **Em**, **Ex**, **Ch**, **Rem**, **Vw**, **Vh**, **Vmin**, **Vmax**, **Percent**, **Cm**, **Mm**, **In**, **Px**, **Pt** and **Pc**. It's one small example but shows a key philosophical difference: WebAssembly is not one of many destinations for Frogui, it is *the main destination*, allowing us the freedom to design an API that fully leverages the power of the browser. We are focusing on a single code base running natively everywhere via WebAssembly.
How is it nicer? In c# you have logical separation
You do not use partial?
The thing with JavaScript is that the experienced people that use it already know it's a nightmare to maintain and use it anyway because the break/fix cycle is shorter than with strongly typed languages and you can increment software faster. Programming languages are _tools_, and like all tools you should choose the right one for your needs and environment. Trying to turn this into a tribalistic "us vs. them" argument is like arguing cats vs. dogs or cars vs. trucks.
In compare to Java C# supports ``partial class``
Blazor feels like a massive hack. I would not be keen developing on that stack. As ugly as js/type-script is the flow is less hacky.
That’s not what I’m doing. Use whatever language you like. I’d rather use a language that’s better than JavaScript.
There’s no reason it can’t. It’s all still beta right now but I don’t see any reason why it can’t surpass the performance of JavaScript or angular/vue/react.
Trucks. Duh.
are they stored in a git repo? If so, Clone the git repo to a different directory and continue working. If not, what kind of source control are they stored in? Some Source Control Management tools like to lock their files to-read only unless you explicitly check them out.
Is it with only this project or can you reproduce it in a new project?
I assume you mean the companies that chose to use JS for everything because for developers it's just a programming language and you can always switch to another language as your primary if demand drops. &amp;#x200B; For companies, the problem is finding talented developers who are willing to work in a less desirable language and trying to eventually move away from it. Plenty of companies are stuck with legacy code and it will take a while until JS gets to that place.
Yea I’m talking about MEAN and other related stacks. Not just using vanilla js.
You can always bet on JavaScript. Its the only language that its totally safe to say it. And please confront reality, check what webassembly is and for what. For starters, Hello world in C in webassembly its 2300+ lines of code. Doing webassembly for UI is a horrible hacking just like java applets, silverlights and other abominations tried to do. Meanwhile I can maintain websites written in 1999, and their JS works without any change.
&gt;Trying to turn this into a tribalistic "us vs. them" argument is like arguing cats vs. dogs or cars vs. trucks. I want to agree, but people build applications mysteriously like the last one they built. It's not like every code base starts from the developers zenning out for a minute and having an agnostic discussion on what the best way is to build xyz. So the camps exist, inertia is a hell of a drug, man.
I share your hopes but (a) silverlight (b) wpf (c) xaml. Microsoft is batting 0/3 on the frontend.
This rang false for me. Lots of people refer to Node.js as simply "Node," but searching for "node" will get lots of unrelated hits. Searching instead for "node js" (without the period) yielded what I think is [a more believable result](https://trends.google.com/trends/explore?date=all&amp;q=.net%20core,asp.net%20core,node%20js). I'm happy to see that .NET Core popularity is rising-- I use it every day and I love it-- but I don't believe it's more popular than Node just yet.
How are they a miss on Xamarin? Microsoft didn’t create it. They bought it and have been constantly improving it. I haven’t tried flutter yet but out of all the others, Xamarin is probably the better one.
Finally! I was expecting something like this for a long time. I hope you success.
How is partial class relevant? It lets you spread a class's definition across multiple files; I didn't ask for that.
Colours are a fascinating subject. Because we can't describe a colour we have no idea if what we see is at all similar.
Thank you very much! What exactly were you expecting or wanting and how does Frogui measure up?
The namespace block is wholly unnecessary if the entire file is going to belong to that namespace; a single line of code, such as in Java, does the job. If you want a file with several different namespaces in it then be my guest... See my reply to your similar comment above regarding partials.
I know the source control (in tools, options, Source Control) settings is set to "Visual Studio Team Foundation Server". Tried putting it to none, and git. Still nothing. I have no idea if it is stored in a git repo tho..
I am able to create a new windows form and use that.
Removed: Spam.
C# supports partial class Which is reached by logical separation instead of physical (files) AFAIK.
That's just me searching for help, your welcome
What makes it feel like a massive hack? I haven't had a chance to dive deep into it yet, but it looks promising.
I've never wanted anything like partials in my Java code, so I don't suspect I'd want it in C# code either. In Java, I take it for granted that every directory maps to a package, and every file maps to a class; obviously sometimes you can have private classes and such in a single file, but usually this is not the case. In C# I would want to make the same assumption. I think it creates a clearer structured program.
Yep! Always data &gt; code haha! That way you can always develop new game logic for your data much easier than having data embedded in logic.
pulls a ton of libraries back and injects into them via webassembly doesn't it? I forget the specifics, I just remember watching a presentation and feeling a bit nauseous about it. The means of execution that javascript provides via native browser execution just feels cleaner.
Web Assembly has been supported in every major browser since 2017. Nobody uses it, and it's never going to save use from JavaScript.
 nuget restore path/to/solution.sln C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe /t:Rebuild /p:Configuration=Release path/to/solution.sln
the charts are wrong because they don't include nodejs as a search term. Still as a node and .net developer I have to believe there are some real JS fanboys in this thread . how people are going to complain about what .net pulls down in the background and how many lines of code in webassembly is beyond me when every time I do js apps the amount of dependencies scrolling up on my console window is enough to make me sea sick if I wasn't so used to it.
The question is: are they still paying you in 10 years fiddlin' around with npm, js and similar base tech? With Blazor, Microsoft *makes a bet* that someone will just edit some simple json fields and suddenly there is a well designed form to register to a newsletter. Its using the current version of angular, responsive in html 7 with javascript 10 and they never ever have to change that json file. Just update Blazor, your toolchain, whatever and the abstraction is taking care of. I'm coming myself from a time, where cloud didn't exists, extensions of hardware and licenses where month long processes Today we just spin up more DB cores, more proxy instances, and go home at 5 with a smile in our faces. The game is changing, and that will also happen to the frontends. Not for every company, project and site, but for many it will be a part of the cloud experience not to reinvent everything just because polling webservices was yesterdays party hat and todays its reactive everything that wants to run the show. The major selling point of web assembly is the insane amount of free CPU you get by distributing everything to the clients. The first amazon type kin of the streets that does this and shows double digits savings in cloud costs, the rest *has* to follow.
Exactly! What I might call red could be blue for someone else. However, since that's what that I've called it all my life, someone's blue is my red, as it's just relative. Obviously, this is an extreme case and purely speculative, but in a more down to earth scenario, I wouldn't be surprised if at the very least we perceive colours at different intensities.
It doesn't work as it starts giving errors regarding string concatenation etc throughout the project, same error as when I run the script I mentioned in post.
I was under the impression it was only in chrome.
 "D:\Project\MyProject.sln" (Rebuild target) (1) -&gt; "D:\Project\MyProject\MyProject.csproj" (Rebuild target) (2) -&gt; (CoreCompile target) -&gt; Builders\HL7HostBuilder.cs(24,39): error CS1056: Unexpected character '$' [D:\Project\MyProject\MyProject.csproj] Exceptions\MissingSettingException.cs(18,68): error CS1056: Unexpected character '$' [D:\Project\MyProject\MyProject.csproj] Exceptions\MissingSettingException.cs(18,68): error CS1525: Invalid expression term '' [D:\Project\MyProject\MyProject.csproj] Exceptions\MissingSettingException.cs(18,69): error CS1026: ) expected [D:\Project\MyProject\MyProject.csproj] Exceptions\MissingSettingException.cs(23,2): error CS1513: } expected [D:\Project\MyProject\MyProject.csproj] Extensions\StringExtensions.cs(16,64): error CS1002: ; expected [D:\Project\MyProject\MyProject.csproj] Extensions\StringExtensions.cs(16,86): error CS1519: Invalid token '(' in class, struct, or interface member declaration [D:\Project\MyProject\MyProject.csproj] Extensions\StringExtensions.cs(16,110): error CS1519: Invalid token '(' in class, struct, or interface member declaration [D:\Project\MyProject\MyProject.csproj] Extensions\StringExtensions.cs(16,116): error CS1001: Identifier expected [D:\Project\MyProject\MyProject.csproj] Extensions\StringExtensions.cs(16,116): error CS1519: Invalid token '1' in class, struct, or interface member declaration [D:\Project\MyProject\MyProject.csproj] Extensions\StringExtensions.cs(16,131): error CS1519: Invalid token ';' in class, struct, or interface member declaration [D:\Project\MyProject\MyProject.csproj] Extensions\TimeExtensions.cs(15,53): error CS1513: } expected [D:\Project\MyProject\MyProject.csproj] . . . 22 Warning(s) 150 Error(s)
[Nope! Firefox, Edge, and Safari (even on iOS (!!)) all have it too.](https://developer.mozilla.org/en-US/docs/WebAssembly#Browser_compatibility)
I'd also include dotnet core (it's what I use when I'm googling issues).
Even if web assembly is wildly successful, there are billions (maybe trillions) of lines of JS code in production systems today. I still see classic asp pages fairly often now, and that's been obsolete for about 20 years now, and there was a lot less web code back then. It's going to be a looooong time before JS starts to really fade
Interesting thanks.
What version of c#/solution/visual studio is it? Maybe all you need is to use newer msbuild? For vs 2019 it comes in "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe"
It sends a Mono run-time along with a couple dll's, about 1.8MB. Microsoft has been working on the Chromium project lately(Edge will be based on Chromium going forward), my guess is if they want to move forward with Blazor they'll probably just add a .NET run time to the browser.
Sure my point was only that there’s no real contender that can replace it except something like web assembly and now blazor. That’s all I was trying to say, we finally have an actual alternative. I know there use to be java in the browser or silverlight but using a language like c# to compile down to web assembly to do the client side functions that traditionally were done by JavaScript is still exciting in my eyes. I had no idea this opinion was so unpopular.
Those are all quite different things. WPF is used in a lot of modern Windows apps and Xamarin is the most widely adopted framework for cross-platform mobile development that I've seen
After using the CLI so much I instinctively type "dotnet" instead of ".NET". It carries over into my searches and I have to remember to alternate to cover my bases
If it was completely optional, sure why not. Personally I think it hamstrings you a bit if you want multiple classes in the same file, which i tend to favor for common enums and simple classes.
The project was built using VS 2017, with .Net Framework 4.6 and C# 6. We want to build it without using visual studio, is it possible?
Sure, just install build tools (with right level of framework) and use correct version of msbuild that comes with it. [https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2017](https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2017)
Or all the colours you see could be unique to you.
2 characters! 2! I need to sit down
I shall give it a try. Thank you so much for your response. Much appreciated.
Just what I was thinking. Blazor may never take off but other webassembly related technologies probably will. And it's also ridiculous to think that packaging tons of npm dependencies is somehow better than compiling your app + nuget. It's the same thing.
It may be possible to have a cloud only sync, which would allow you to *not* store the local copy and only have it online. https://www.quora.com/How-can-I-delete-Onedrive-files-from-a-computer-without-deleting-my-files-from-the-cloud
Do you know any good books/tutorials to get started with .NET Core? ( For total beginners )
My math is a little rusty, but I feel like `#include &lt;stdio.h&gt;` `int main(){` `printf("Hello World!\n");` `}` is less then 2300 lines of code. If you're talking about the support .js file that is spit out when the code is compiled, then that's totally misleading. That has more to do with the immaturity of the platform then the difficulty of writing code. Also, JS libraries break all the time. Sure, vanilla JS written in 1999 still works, but so does VB6. Should we also bet on VB6 for our server side code?
It's supported, but there's still a lot of work to be done. They are still hashing out standardized ABI's. Once that's done, they will have to decide on how to do the standard libraries. Right now, it's basically sending an entire run time with the web page, which is just not economical. Once you have standardized ABI's and a standard library, things will start getting really great
Blazor exists because of web assembly; it's a C# run time that is compiled to wasm that is sent with the web page. I agree it's exciting, and not trying to say your opinion is bad just that legacy code tends to hang around for a long time. I would be pretty happy if being a .NET developer meant that one could write full web apps in just C#; that would be awesome really.
Right, that’s all I’m saying. As someone who’s been developing professionally for a few years now in c# and asp.net mvc, I’m excited to be able to use nothing but c# one day. Sure there’s kinks with wasm, sure JavaScript has its place, but I still want to use c# as much as possible.
I have been *so* curious about C#. The syntax is just so different from what I'm used to though...
Blazor is running the MVC pipeline in the browsers Web Assembly instead of server side. This is like the new Win Forms for web utilising native Forms components but nothing like Web Forms. Very exciting. Will be following closely. As Web Assembly spec natures everything will work better and faster using Mono.
You’ve been so helpful thanks so much
Thanks. If there are any features you'd like to see please let me know!
It all depends on how you learn. If you learn best from text and videos, MS has some good [basics](https://docs.microsoft.com/en-us/dotnet/core/tutorials/) and some on [ASP.NET Core](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.2). Be wary of older guides. NET Core took a hard left with the switch from json-based project config (project.json) to XML-based (*.csproj) upon VS2017's release. A lot of older beginners tutorials reference the old style. If you learn best from doing, it might be worth it to just download the SDK, Visual Studio Code, and run `dotnet new` from a command line. [See what you can do](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-new?tabs=netcore21) and play around.
I'd go directly for the *always up-to-date* "microservice architecture" ebook from Microsoft. They have all on github and you learn everything from docker containerization, asp net core, rabbitMq to SignalR.
Js will be here forever just like php
To add to it. As your Dice is a class it is a reference based type, thus it is initialized with null by default. If dice were a struct, a value based type, it would be auto initialized with a value, in your case a dice struct value, with each member initialized with their respective defaults. Class vs. Struct can be more complex than this but that's the core idea.
You’re the hero I needed.
You cannot just use one source and draw a conclusion. Specially search terms trends since they are very touchy (do people search for "Node", "Node.js", "Node js", "Node javascript", "express"? + "node" as a meaning outside of IT). You have to combine multiple sources and trends and then maybe you will be able to start to draw a conclusion. I did the job for comparing React, Vue and Angular popularity: https://gist.github.com/tkrotoff/b1caa4c3a185629299ec234d2314e190 but it's way easier in this case cause these libraries use the same language and platform. Anyway, here a counter example with Stack Overflow that shows .NET Core popularity trend behind Node: https://insights.stackoverflow.com/trends?tags=.net%2C.net-core%2Casp.net-core%2Cnode.js%2Cexpress%2Casp.net-mvc https://i.ibb.co/gZ338H5/Stack-Overflow-Trends-2019.png It's difficult to find good numbers for framework popularity trends. It's already easier to compare languages and C# is declining while JS (+ TypeScript) and Python are rising. So it would be very surprising to see a framework rising significantly (.NET Core) while its platform (C#/.NET) is declining. - https://insights.stackoverflow.com/trends?tags=java%2Cpython%2Cc%23%2Cjavascript%2Cphp - https://insights.stackoverflow.com/survey/2018 - https://insights.stackoverflow.com/survey/2019 - https://octoverse.github.com/2017/ - https://octoverse.github.com/projects#languages - https://redmonk.com/sogrady/2019/03/20/language-rankings-1-19/ - https://redmonk.com/sogrady/2018/03/07/language-rankings-1-18/
https://webassembly.studio/ just have fun with ultra hacks and btw that argument was very weak. COBOL still works today too and there is no reason to start project in it. Yet they are tons for JS.
Xamarin is a turd. Ms can polish it as much as they like, it's still a turd
You can make the method accept am array as an argument and pass it on that way.
Then pull down less dependencies. NodeJS isn’t inherently dependent on NPM. Also, what’s the different between NPM and .NET Core? You just used the packages you need from both.
Awesome, I will try to check them all out and decide, thank you
Cool, I have been looking for something like this. Thanks
&gt; ASP.NET 🤢
Do you have a database project in your solution or just code first with migrations? If you have a DB project then I would just do a schema compare on the azure dB to generate the tables.
I dont actually have a database project in my solution. I'm using EFCore code first, so the tables should be generated at run time, as opposed to having the ecdx files or whatever they're called. Is this what you meant?
exactly so whats the crying about?
can u help me
That's cool. For my business I have a node server but I'm planning on moving to .net core this coming week mainly just to learn it. Should be fun. (I'm doing this on the side btw it's not a business requirement)
It's shockingly bad naming lol If you know nothing about .net and try to search it it's a hell of a thing to figure out what is what Like is asp.net core web API a thing still or is it just part of mvc now
Good question, that was kind of what I was asking you? What would make Blazor a better option over something like Angular or React? Trying to figure out what the hype is about
Don’t get me started on the whole release candidate vs version 1.0 namespacing madness.
I've worked with dotnet for many years and I honestly wish it would just go away. I find it to be complete rubbish. For one, most applications these days are deployed to PAAS environments like GCP or AWS. When you start paying for the resources you take up you start to see that dotnet makes no sense over node because it will eat up more of your computer resources and it's much harder to deploy dotnet code to PAAS environments than it is to deploy node or typescript code. You can also do a whole lot more with nodejs without all the Microsoft overhead that comes with dotnet. Additionally I dotnet is seen in many enterprise environments. I don't say this is a good thing because these environments are anti-innovation and they're the places that have been doing the same thing for years and don't want to change. This is one of the reasons I've given up dotnet development. In all I think dotnet is fine if you're building native windows apps, I also think there's quite a lot of merit to the language for game design (with unity of course) but as a general programming language or to be used in any kind of web development it's an absolute nightmare.
Ok, that’s code first, edmx is older dB first, there is a blend reverse engineered code first where you have a sql project and maintain the tables there, rather than decorate the entities. It could be an azure config issue, you could use visual studio to schema compare the local db to the azure db and then the scripts will be auto generated and run, as far as the table creation. Double check your connection strings, make sure you can connect to your azure dB with something like sql server management studio.
First off, paas hasn't beaten iaas. Secondly, paas is starting to standardize around containers - so it really doesn't matter which language you use from a deployment perspective. Lastly, I work for a fast growing startup and no, we don't ignore innovation - one of the reasons we love dot net is because it's constantly keeping up with the latest innovations while providing a consistent platform for day to day work.
"Crypto" means "cryptography", not "cryptocurrency".
&gt; Also, what’s the different between NPM and .NET Core? JS has a weak standard library and a culture towards very small libraries. .NET has a very large standard library. Thus, you end up with far fewer dependencies.
Given the "design" of JavaScript weak type system, there is no way I would put financial system or accounting business logic in it. I could use Typescript, but why not just use c#?
Not sure what you mean by “injects”. Blazor is Mono targeting WebAssembly + an SPA framework written in C#, with some JS interop where necessary. Once WASM can directly manipulate DOM, Blazor will be cleaner.
What is better? We use Xamarin for all of our cross platform mobile App development.
No it doesn't
Ok your argument for Kubernetes also doesn't make sense for dotnet. Dotnet is shit to run in containers because again it'll use up a shit load more resources, which doesn't fly well with Kubernetes. And how to you figure globally scallable services such as GCP are not better than running on-prem? There's a good reason most startups use things like GCP or AWS, it's much cheaper and more efficient. So the on-premise will almost completely vanish, without a doubt. If you had read my comment a little bit more carefully you would have realized that I was referring to the attitude around dotnet development in the enterprise environment, not in a startup environment. I've worked in many and they've all been the same. Most startups nowadays will opt to use languages like node/typescript, golang, or Python instead of dotnet because they're easier to get started with and they don't take much compute power to accomplish the same tasks.
aren't we back at silverlight then? A bunch of competing technologies where javascript wins again by default?
&gt; Not sure what you mean by “injects”. Sorry, I mean like runs code that only those libraries understand. It just feels like i'm running some sort of plugin and the interop layer feels iffy. Idk, I feel like much of it is a crutch to be able to use C# where the more sensible option is just not to use C#.
&gt; It just feels like i’m running some sort of plugin (like silverlight was before) It’s really just a slightly too large framework. Once they improve on dead code elimination and/or put some of it on a CDN, that’ll go away. &gt; the interop layer feels iffy This will require direct WASM DOM access, which will probably not come for years.
Vs code is my favorite. Any editor should work fine.
I wanna know who searched for dotnet core in 2004
I have back in the day. Most of the users were on the phone. Once MS abandoned the phone we abandoned the app. The app is a Mills game. A friend of mine with a weather app reports the same. Also while UWP is somewhat nicer as an API the UI is not as satisfying. This killed my motivation to port my other phone app to UWP. I simply don't want to make it faceless and boring with the new hamburger style
0 is 0.45 100 is 0.8 How many steps between 0 and 100? How many steps between 0.45 and 0.8? It is basic math, you can do it
Yeah. I currenly published two apps: 1. **Littledot** : A simplified DNS protection utility in one click. Mostly to avoid DNS Man-In-The-Middle attack usually done by your ISPs. 2. **Cafeine** : An app that leverages your offline anime experience. It's also my main place to do some experiment on new UWP features. You can check those two out in the store, anyway :) I've never made any income with this platform since one app must be free, and another one has pretty small potential customers. I also made some notes about my experience about UWP in my blog [here](https://kekekmacan.asia/post/3196403f10ade11a2e24f3ee0b6d3d5a).
If you are a complete beginner and visual learner, you may start with [this](https://www.youtube.com/user/kudvenkat/playlists). It's a great learning resource at zero cost!
You're welcome.
Because some people dislike JavaScript, so it allows people to use a language like c# in the browser. Right now we have no idea where Blazor will go, but right now the big advantage will be c# over JS (for people you prefer c#. I do, I'm just not trying to start a language war!)
I mean, it's only just gone from experimental to preview. Reserve judgment on jankiness until it reaches release! A lot can change in both Blazor and we assembly itself between now and whenever that is.
I thought it wasn't fully implemented yet? Because it can't interact fully with the Dom so requires a lot of interop to do so?
Dotnet core is far better at handling large volumes of requests. Read this article: raygun.com/blog/dotnet-vs-nodejs your 'dotnet uses more system resources' argument is false, dotnet does far more with the system resources available.
Try to use Nuke project, it’s beautiful for build .net CI/CD pipelines: https://nuke.build/
What do you mean? Whats wrong with visual studios text editor for creating cshtml files? Or by GUI do you mean 'drag and drop'?
"in almost all files". It would just not be applicable for code-generation related files (the valid use case for partials).
Nice structured code, but wouldn't pass my code review at work: \- missing null ref checks =&gt; exceptions (first qa test killed the app :-) ) \- possible improvements on 'if' nestings \- inconsinstent use of 'var' keyword. \- bad use of 'try catch' \- either use weak event handling or unbind eventhandlers in a deconstructor i could continue on improvements that should be made... BUT: also i have to give my full respect for the indeed awesome looking UI. the application looks clean and sexy...
I haven't had such a great experience with UWP. I am working on a Xamarin Forms app, and I have a much better time developing for Android and iOS. Outside of waiting for the Microsoft Store approval process, there is no way to distribute a UWP app for free without your testers adding your dev certificate to their trusted store, which is really annoying. This even applies to App Center. Some testers have even issues installing the beta version of my app from the Microsoft Store. App Center doesn't even let you distribute to the Microsoft Store. It does allow you to distribute to the Apple and Google stores though. Even if you were to build a UWP app through App Center, it would easily consume all of your free building time due to the .NET Native compiler being so ridiculously slow. Also, some things just don't work when compiled with .NET Native. I have personally run into this issue here: https://github.com/grpc/grpc/issues/18188. It seems like there is no way to tell when the .NET Native compiler butchers your compiled code, because it can cause issues at *runtime*.
Maybe someone searching for core features
WOW, you literally nailed it, cheers!
Maybe, I doubt it though
Fortunely or not languages changes and adopts (or people do). After crypto currencies being so popular I'm not 100% sure when somebody says "I'm doing crypto" what he actually does. If that person seems to be deeply into IT or theoretical CS then it's cryptography Otherwise probably cryptocurrencies.
Look carefully, the timeline suggests Node.js is being searched from **2009**, and the .NET Core is being searched from **2016**. So there's no 2004 at all. It's compared from the very beginning, from 2004, to have *a complete overview* of these technologies. None of them started its journey in 2004.
I'm saying there is a very slight spike around 2004 in dotnet core searches
Yeah, I was just being a bit snarky - I don't actually have a problem with people calling it "crypto" in general conversation. Having said that, this post is in a programming subreddit, so I contend that my original comment is spot on!
Blazor can be a better option in some cases because I can reuse existing c# models, logic and other libraries without first having to rewrite then in js.
Search for "inverse lerp"
I published a game on it yesterday. Getting unity and UWP to play nice was painful, but it's nice to have the game available on xbox
Hi, this one was highly recommended not long ago in another post: John Sharp Microsoft Visual C# Step by Step (Developer Reference) 9th Edition Hope that helps! Good luck
&gt;John Sharp Microsoft Visual C# Step by Step (Developer Reference) 9th Edition perfect, looks good.
Don't know why, as I'm not an SEO specialist. It might have some connection between the .NET framework as it was very much popular back then. .NET Core has the **.NET** keyword in its name, so very tiny glitches may take place.
Maybe
It's different because Silverlight required a lot of engineering from Microsoft's end to keep it working in the different browsers, while with Blazor the idea is the run time is apart of the browser in the same way that it is with javascript. I think if there was real competition in the browser, it might not be the case that javascript wins by default. Not specifically C#, but web assembly in general runs only 50% slower then desktop assembly. That opens the door to having pretty high quality rendering done inside the browser
Nice
Web assembly is an immature platform, it's still in it's infancy. Of course you would start a new project in JS today, but that doesn't mean that JS will always be the better choice once/if web assembly matures
It's all good if you're good with html and css. I am ok, but it's far easier and quicker to prototype something up in a gui first.
I published an app some years ago. I like UWP. The store app version submitting is far slower than Android, but, well, you don't submit a version per day. The developing stack is ok. I created this app in UWP because I had a Lumia 640XL (I was a big fan of WP), and that utility wasn't in the Windows Store. A year later, WP died, and I ported the app to Xamarin, to keep it in Windows 10 for PC, and also fro Android. It was (and still is) a nightmare, as the Xamarin Forms are far slower than the UWP app, and it isn't more than a list view with no more than 100 items... I'm actually maintaining the Xamarin version and the UWP version because I can't upload the Xamarin version to the WStore and still look at my users at the face... Well, Xamarin is a good framework, I admit it, but it is still... "Young", I think. So, about the original topic... I think UWP is a pretty good stack... But... It is only Windows 10 PC now I think (and Xbox, but I haven't tried it).
I'm going through Julie Lerman's pluralsight course as we speak to see if she highlights anything blatantly obvious that I could have missed. She set her data project to the start up, where as I had my web. That hasn't solved it, sadly. I see also she uses migrations, I wonder is this the thing you're referring to? I haven't touched migrations at all. I'm wondering if I create an initial migration is this what the database is missing. When you're talking about comparing database schema, the schema isn't created on azure, and it is on the local. There's no comparison really as it doesn't exist on azure, unfortunately.
Health left times 0.35 plus 45
Because C# is the same but doesnt work in browser and has weak ecosystem compared to npm.
It will always be like that. That's what you get by allowing any technology there. Everyone has to bring their own runtime, their memory management, everything. That's just being wasteful on people data way worse than using electron, at least that its justifiable.
Currently Blazor only supports client side rendering. But with .NET Core 3.0 coming server side rendering will be made possible. [Source](https://youtu.be/GI_9g9lZpik?t=1853) @lesarde\_frog, are there any limitations to writing c# functions in Frogui in comparison to Blazor?
I added the Django framework into the list and idk if its more popular than node.js but damn
Microsoft have previously said that Design View (i.e. a GUI) does not work well with Razor because of how much it depends on code execution to render, and the Design View does not execute code in the page. I think you might be out of luck.
Have you even tried? Kubernetes and dotnet core run great together... like... we do this in production today. Keep in mind an alpine dotnet core image is about 83MB... it's not exactly huge (and the whole 'images must be small' is more of an optimization than a rule). Also... if you care so much efficiency, why on earth are you talking about js? For example in the latest benchmarks, C# came within 70% of a \*c\* implementation and was in the top 6. node js appears to be 83rd with just 21% of the same performance!. Also, I love running in the cloud instead of on-prem... I never said otherwise? &gt; If you had read my comment a little bit more carefully you would have realized that I was referring to the attitude around dotnet development in the enterprise environment, not in a startup environment By making up bogus and random statements about cloud and dot net that make no sense? If an enterprise wants to write large, high overhead services (which is their prerogative), how on earth is nodejs going to make their life any easier? Again, you mention startups - except that I work for a startup, and we use C# all day long. Sure, node/typescipt, golang, python are all great options... but that doesn't mean that dotnet core isn't also a great option.
Then maybe you should read a comment before responding to it because my post doesn't say blazor is better based on dependencies but rather was responding to people who said it was inferior on essentially that basis. There is no hype. Thats just a subtle putdown with no basis. People are generally excited they are beginning to have more options. Why shouldn't they be excited in a charp subbreddit to have an option to use C#. Will you call it hype when people over on the flutter subreddit get excited when hummingbird hits and they can do web, apps and desktop with the same language? why shouldn't they be excited wihtout the putdoewn of "hype"? ( and isn't that put down attitude just JS "hype"?) &gt;What would make Blazor a better option over something like Angular or React? For a [asp.net](https://sp.net) / C# developer a lot. Besides the obvious same language on the back end it also has a very clean way of dealing with templating languages and front ui. From what I see its an extension of that razor syntax instead of having to ditch the templating language in favor of api and a front end only framework. Theres a blend there I find quite advantageous. I do find it funny you talk about using less dependencies in one post and then talk about react where you end up bringing in a bunch of packages with assorted dependencies (and yep I am a react developer too). I welcome all new options as in my opinion the front end JS field is a mess. Every developer I know spends more time and headaches on the front than the back . The tail is now wagging the dog.
What's your point? An application is like an iceberg, the part that lives in the browser is a fraction of the application. Yes, I might use JavaScript in the browser to do what browsers do best, but for the heavy lifting portion of my app, the part that's not being run in a browser. That's sitting on application servers, providing an API, interacting with databases and other third party services, providing actual business value. I can't see Blazor being used in any of our critical applications until it matures. I can see the benefit, but right now, I'd prefer to stick with Angular or React or hell, vanilla JavaScript. Give it a couple of years. I'm not sure how you mean the ecosystem is weak for c# in comparison. The dotnet framework will provide a bucket load of assemblies and functionality out of the box. Then there's nuget. Did you have a specific point?
Take an upvote because I have no idea why you were downvoted for that. I especially like being able to use my models with little to no fanfare.
&gt;or people you prefer c#. I do, I'm just not trying to start a language war!) Well since you won't I will :). what sane rational person does not like C# over JS? lol
My argument isn't centered around nodejs being innovative because it isn't. My experience is that every company I've worked for using dotnet is stuck in this enterprise rut of "we've been doing thing this way for n years and we aren't going to change". I've even been at a company where they were refactoring their codebase from dotnet standard to dotnet core, but they didn't change any of their horrible practices, so what's the point really? Things like that are inherently annoying. I haven't even suggested that they refactor any code to nodjes either. My argument is not nodejs over dotnet, my argument is simply anti-dotnet. Once dotnet core came out I was initially quite excited to, being a dotnet developer for so long, to try it on my Mac and Linux machines. While it works fine, I've noticed that things haven't really changed a whole lot. Let me explain this with a bit of context. My main focus, professionally has been development of back end and front end systems for web applications. My career has really been centred around developing/maintaining web applications (mainly for enterprises). All the enterprise environments I've been in are running only windows servers in an on premise environment. When I've been a part of big refactors from standard to core, they basically copy/paste old code and tweak it to run in core. Right off the bat this is super anti-innovation. One of the beautiful things about dotnet core is that it can run in docker and on Linux systems. But I haven't been at any place that has embraced that social attribute of dotnet core one bit. To touch on the subject of dotnet not having really changed much with dotnet core, what I'm trying to get at is that dotnet REALLY wants you to build a monolith. Which isn't always a bad thing, but if you ever wanted to not have a monolith you would have to do more work than you would with other languages like python, node, or go. When we're talking about what dotnet can do with the resources available, when we are deploying things to a containerized environment (and I've benchmarked this) dotnet core uses more memory and cpu power to perform the same tasks as python, go, or nodejs (a quick note, this is a restful API I tested so I benchmarked cpu usage, memory usage, and how quickly it responded to a request). In all cases dotnet was also slower to return a JSON payload than all the other languages. By at least a half a second to a second. If we want to talk about dotnet being able to handle more requests that also doesn't ring true because of what I said earlier. Dotnet really wants you to build a monolith, which means you're stuck scaling your service vertically which will cap you early. It's much harder distribute dotnet services than it is python, node, or go.
Read my comment below. I haven't been advocating node over dotnet core, though I could make the argument easily. C# will take less time to compute large quantities of data than nodejs sure, but it will take a lot longer to return a JSON payload to an API request with c# (at least half a second to a full second). If you want to talk about speed computing large quantities of data, go is 3-4x faster than c# and it won't take as long to return a JSON payload to an API request and it won't use as much of the memory or cpu, which is an important factor to consider when running in the cloud. If we want to talk about the cloud specifically, what language had the earliest adoption for Google cloud functions, lambda, azure functions, Google app engine, or elastic beanstalk? It was all node in the beginning and node is still a first class citizen in those environments. While dotnet can be deployed to most of those places now it doesn't have the support of node or Python or go. Basically it's a second class citizen of core cloud resources. At this juncture I feel as though I much clarify my position, you certainly don't have to run your code in these ways, but these are important examples.of where dotnet falls short or other languages i.e. node, python, and go. If any company is writing code with large overhead that means something is wrong with the codebase. In today's day and age why would we want to work in places that don't want to try to improve to not have large overhead while running code? Would you want to work in a place like that? Most likely not. Once more, I'll clarify. I'm not saying node will fix this issue, what I am saying is that writing code that can only run on big beefy machines in 2019 is just wrong.
Since when did dotnet core "want you to build a monolith"? That's entirely up to the developer. YOu can have 47 different web API's in one solution, all doing different things (microservice style). You can have 1 web API, monolith style. There is nothing dotnet core does that makes me feel like I have to build a monolith. I'm confused how your benchmarks for dotnet can differ so wildly to several others, where dotnet core is the clear winner in terms of speed. In terms of the web server itself, look at this set of results: [https://www.ageofascent.com/2019/02/04/asp-net-core-saturating-10gbe-at-7-million-requests-per-second/](https://www.ageofascent.com/2019/02/04/asp-net-core-saturating-10gbe-at-7-million-requests-per-second/) dotnet core is stupidly quick. Again, read the raygun article, where it shows the differences between memory usage (it mentions nodejs being \~1gb and dotnet core \~400mb. They also show other companies use cases where dotnet core increased their throughput by stupidly large amounts. Node JS will forever be held back by the fact it's interpreted and not compiled AOT. You seem to be entirely basing your opinion of a framework on how OTHER people use it, and not how it can be used. That's all anecdotal, and has absolutely 0 bearing on whether the framework is good or not. Bad developers exist, and if we just pick the bad developers to decide on whether a framework/language is good, none of them would be. I can 100% guarantee that there is far more bad javascript out there than bad c#/dotnet core. Because it's easy to write JS badly. Does that make JS a bad language? no.
I've published a few apps and games as a hobbyist in the past. The last thing I did was a game that I made primarily for Xbox, which was fun. It's pretty cool having a game on a console. Once Microsoft abandoned Windows Phone (and I switched to Android myself) I stopped making and supporting my apps.
That's like saying Java, C#, Python, Ruby, C++, and every other programming language are wasteful because C existed first and the runtime is included with the operating system. What you're saying makes even less sense, because Javascript is less performant or compact then C is. Web assembly run times can be significantly faster then Javascript. The main issue with web assembly now is they are still figuring out the ABI's; it looks like they might settle on CloudABI but never know until it's adopted by the browsers. Once an ABI is decided on, then we can start to see standard libraries for languages that target web assembly. Right now, all that exists is Emscripten, which has existed for a long time as an asm.js compiler, and now has the ability to compile wasm byte code. But, it has the issue where it creates a pretty large JS run time as well. That doesn't mean it will always be like this, it's just a proof of concept right now.
Another hint:. Take a look at the Celsius to Fahrenheit conversion: 0 - 100 to 32 - 212. You're trying to do the same thing - doing a simple linear transformation.
what you're saying is straight up wrong though. Like, objectively.
I have already sad that dotnet will compute large quantities of data faster than node. That's quite obvious. What it won't do is return that data as quickly in a JSON payload because dotnet was not made for Json so there is a very costly conversion step required. Additionally, there's more JavaScript code written than dotnet code. So no shit there will be more bad JavaScript because there's simply more projects using JavaScript than dotnet. That's kind of a bullshit statistic. There are 3.5 million active JavaScript repositories and a mere 50k active C# repositories. You want to talk about bad C# code, go to any enterprise using it, you'll see a lot of it, is just not public.
Where's your evidence?
&gt; `C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe` IIRC, this is not the latest and greatest version of MSBuild, and so you won't get the newest language features when running it this way. What CI/CD environment are you using? If you're self-hosting, and you don't want to install a full version of Visual Studio on it, then it looks like you can try just the "Build Tools for Visual Studio" from this page: https://visualstudio.microsoft.com/downloads/ &gt; `/t:Rebuild` Personally, with the newer MSBuild versions, I tend to run `/t:Restore;Rebuild` to eliminate an explicit NuGet step, but YMMV.
Let \[A,B\], \[C,D\] be intervals. Let x in \[A, B\], we want a function T(x), such that T(x) = y in \[C, D\] and the distance ratios are preserved(i. e. |x-A|/|x-B| == |y - C|/|y - D|). &amp;#x200B; &amp;#x200B; First we move x relative to the origin of the first interval. &amp;#x200B; Let x' = x - A. &amp;#x200B; Then we find the ratio, which we can call r, of the interval that is covered. The length of the interval is |B-A|, so the ratio is &amp;#x200B; Let r = x'/|B-A|. &amp;#x200B; Now we map this to our interval \[C, D\]. Since you want a linear affine map, we want the same ratio of the intervals length, so r. To find the length in \[C, D\] we multiply r by the length of the interval. &amp;#x200B; Let y' = r \* |D-C|. &amp;#x200B; Now we just need to move this to the origin of \[C, D\], so &amp;#x200B; Let y = C + y' &amp;#x200B; Putting it all together &amp;#x200B; AffineMap(x, A, B, C, D) = C + (D - C)(x - A) / (B - A)
Exactly, stackoverflow is more accurate since the data may be curated and it excludes search from non-programming related topics. Well, of course "questions/month" is not the perfect indicator of a language's popularity, but at the same time anything new is being searched of more than whet a lot of people already know.
Might be getting the Tarantino movie, depending on how you added it.
You have a month? As a C based language you can fall into most of the syntax. Dive in and build an simple ASP.Net Core MVC application that talks to a SQL data store, uses the built in dependency injection container, and has a small set of unit tests around it and make it public on Github. If you really want to impress and have time at the back end deploy it to Azure while you can get $200 in free credits to play with and 12 months access to SQL Azure. Demonstrate you can also write non-trivial SQL queries. I'd probably advise to not take on the additional load of a Javascript front end talking to a back end WebAPI, that's starting to push it for your time frame as that's two stacks to learn not just one. Just stick with MVC. [Start here](https://docs.microsoft.com/en-us/aspnet/core/mvc/overview?view=aspnetcore-2.2) Reading a book and doing some algorithms challenges so you can learn the syntax is not going to do anything to make you employable with no degree. You're looking for "prove it" Junior Developer roles where they are selecting for potential and unrefined talent. You need to target the job market doing the majority of .NET hiring (web applications), show that you can take a problem and turn it into something that works, that you understand how to develop across the full stack at some minimum level of proficiency, and that you're passionate enough to teach yourself how to build something tangible as the main strength of your resume.
No chance
I specifically said you shouldn't use bad code as a measure of a bad languages and SOMEHOW you've interpreted that as me saying javascipt is bad because it has bad code. Jesus christ, you can't argue with stupid.
Like... Are you on drugs? 0.5 to 1s to return a json message in dotnet core? What universe do you live in? I use Google, I regularly talk to thier product managers. For example, they're moving to Cloud Run - which uses docker can be used as a managed service or run on gke. C# is perfectly supported - heck we've helped iron out bugs! (Seriously, go look who is maintaining thier sdk, as a supposed .net developer you'll be surprised). How about this - open up vs, use the gcp template to create a dotnet core hello world and deploy to gke using the gcp vs plugin. In 30 minutes your entire world view will change for the better.
Like the benchmarks posted earlier?
idk dude, literally any benchmark made in the last year or two that includes asp.net core and node.js
Build something useful. Doesn't matter what it is, you can even copy something that already exists. Build a Twitter or Reddit clone, maybe. Look up what you don't know as you go.
In order to use the migrations during startup, there are a few things to note. There are two different methods, one using Database Migrate and one using Database EnsureCreated. The latter only runs once and is unable to be updated in the future. If you plan to continue making updates this way, you should use Migrate. Second, you should be configuring your database via appsettings. This way, you can change connection strings depending on the environment and keep your secrets outside of version control. Finally, the flow should go like this in Startup: ConfigureServices: `AddScoped&lt;YourDbContext&gt;(() =&gt; doYourConfig())` Configure: `ApplicationServices.CreateScope(scope =&gt; { context = scope.GetRequiredService&lt;YourDbContext&gt;(); context.Database.Migrate(); })` The most important thing to note in terms of dependency injection is that since your DbContext is scoped (and should always be), you have to create a scope for your services in order to use it. Ultimately I'd create a service that does this that I could call from Startup, to keep Startup clean.
I could have a hello would all created and deployed in 5 minutes.
I always build a Sudoku solver in a language I want to learn. Create a GUI interface and then create a solver. It’s difficult enough where you need to use some cool language features. In C# specifically it’s a good opportunity to understand the difference between a struct and a class because a SudokuElement is perfect as a struct. SudokuElement should only have value type properties. I.e. row, column, value.
So, go and set it up in 5mins and then you'll realize that deployment and request latency are nothing like you described. You'll be a better, smarter developer.
This book doesn't get recommended nearly enough. It's absolutely the best reference for C#.
But I don't want to place apostrophes in the correct place. :-(
I do t think you're hearing me. I think you're about right with dotnet taking Alf an hour to create and deploy a simple hello world application. If I used any other languages I talked about I could do the same in about 5. After swearing off dotnet and c# in general I branched out into golang, Python, and typescript. If we want to talk about processing speed golang has c# dead to rights, at about 3 or 4 times faster. If we want to talk about rapid development typescript and python are clear winners in that arena as well. Additionally, since c# doesn't return Json natively from an API endpoint there is a conversion step that takes a while which is not present in python, golang, and especially not typescript. Not to mention it much harder to model dynamic data with C# than it is typescript. So for my applications I have the benefit of being able to use the complete strength 9f each language to it's fullest without having to sacrifice development time.
I am hearing you. You have no idea what you're talking about and refuse to spend 5min educating yourself. Go ahead, I'll wait.
Build DSLs have a rich history of falling out of favor, becoming un-maintained and a burden to keeping projects up to date. They're super fun to deal with 5 years down the road.
Really? I've been working with dotnet the around 5 years before actually educating myself and making myself a far better developer. Starting to use other languages and practices broadened my horizons so much more than had I just stuck to dotnet. Perhaps you should attempt to broaden your horizons as well.
Except you've replaced your dotnet knowledge with trivially false Boogeyman stories. I've also played with a dozen languages. I like C#. There's nothing wrong with preferring different languages. However creating nonsense like that c# is a 'high overhead' language (?) that takes 0.5s to 1s to return a json object... that's closer to mental illness than expanded horizons. Go ahead. Setup net core in gke using the gcp tooling and templates. Prove to yourself that you know what you're talking about.
MSBuild is a some kind of DSL too, but very verbose and moody. And it changes from time to time without backward compatibility.
Best way to learn quickly, bar none: build something. Nothing is faster or more productive than actually getting down and dirty with a new language. I’m sure you’ve got a hobby project or two in your head, just write a prototype in C# and kill two birds with one stone!
Second that. One step further might be to look into which c# jobs you're interested in and pick a problem in a similar domain. Could work to show interest, could also backfire since it's easier to spot someone faking it when you know the domain better, so if you mess up, it'll be harder. Depends how good you are at interviewing and spinning things :) At the very least think of how you can talk about what you're doing in an interview, because they are going to ask about your c# experience, and this will be it.
I found working with C# much harder to accomplish goals with than other languages. I found it to be sluggish at best when talking about returning Jon objects, and I found the development practices around c# not to agree with getting actual work done.
That's fair enough. But 0.0006s is not 0.5s-1s. Go ahead, setup some net core in gke, I think you'll be surprised.
I've tried deploying dotnet core in gke and app engine, and I've been disappointed every time. My main cause of disappointment is largely due to the fact that I can deploy the same thing much more easily, faster, and cheaper with my stack. The main issue dotnet core tried to address was the fact that dotnet standard was so tightly coupled to Windows so you had to buy into the whole Windows environment to run it (which I suppose makes them more money). However, because it's taken Microsoft so long to get dotnet to deploy to more environments than just windows the tools around development and deployment are not as mature as tools for other languages and thus suffer. Like you said, you've even helped GCP iron out bugs around dotnet running in GKE, I've never had to do that because everything I've deployed has worked flawlessly every time.
We've had 0 gke dotnet core bugs - I was referring to sdk bugs - which I care more about resolution time than perfection (everything has issues). I'm interested, what exactly is different with deploying a net core container to gke than a nodejs container? What difference's are you noticing? I've used appengjneflex and gke, we see no difference. The dotnet core build tools are simple, effective and straight forward. It's literally a one line command 'dotnet build ...' or 'dotnet publish ...'. Running is also straight forward 'dotnet run' or 'dotnet exec'.
Be prepared also for some OO questions, as you probably need to maintain existing code. I nheritance, generics, method overloads, extension methods, LINQ. These concepts are heavily used in existing solutions.
It just takes practice once you get to know a good deal of the asp functions you will be fine.
Maybe make T a parameter to the MockSetup type, instead of to the methods? You wouldn't need to story `resultType` at all, then.
Maybe consider making the whole class generic? This way you'll be able to use T everywhere.
I'm curious, where is the line between trivial and non-trivial SQL queries?
&gt; And it changes from time to time without backward compatibility. Much less often than 3rd party tools. I have two apps at work I've dealt with for a decade. One, the considerably more complex solution, uses MSBuild. The only breaking changes we encountered in 10 years came when we introduced the first .Net Core (v1.1) application to the solution. The other, using psake, had breaking changes from 4.0 to 4.5, 4.5 to 4.6.1, 4.6.1 to 4.7. 4.7 to 4.7.2 wasn't breaking but still required updating. Through all of those updates in the other project, MSBuild just worked. Personally, my 25 years of developing for Windows has led me to stick to MSBuild and Powershell.
Sounds like you just don’t understand the platform. If you need to do basic apps without complex views (like a lot of business apps especially) it’s an easy tool to use for cross platform mobile development.
What does Winforms server side even mean ? Mind blowing.
F#. I'm so curious about *F#*.
What'd you find out?
You can make the generic type definition on the class level like this; public class MockSetup&lt;T&gt; { } This way, you will be able to declare generic properties and fields. public class MockSetup&lt;T&gt; { private T result; } You also can use the class-level type in your methods. public class MockSetup&lt;T&gt; { public void Create() { database.Setup(d =&gt; d.Query&lt;T&gt;("select * from xx")); } } By the way, what do you want to do with this class? Your API design seems a bit different to me. Maybe I can make a suggestion if I know a little bit about what you want to do.
dotnet core is not only a windows eco-system. You can’t more use only msbuild and powershell. On linux systems you should also support bash scripts. Or... Just use full power of tools like Nuke. And of course if think about backward compatibility you can freeze you tool version as long as you want, like you do when use msbuild.
I've tried some things, but I ended up trying to squeeze some more performance out of an audio compressor function I wrote and I forgot to dig deeper
dotnet core is not only a windows eco-system. You can’t more use only msbuild and powershell. On linux systems you should also support bash scripts. Or... Just use full power of tools like Nuke. And of course if think about backward compatibility you can freeze you tool version as long as you want, like you do when use msbuild.
Thanks that's not a bad idea. Basically I am trying to neaten up some unit tests and make them easier to write, read and debug. Some methods/stored procs have a lot of parameters, and they become a bit of a pain to write, since we want to validate every property of every parameter, and it gets worse when lists are involved. &amp;#x200B; e.g. something like this: `database.Setup(d =&gt; d.Query&lt;SomeResultsType&gt;("myStoredProc",` `It.Is&lt;DynamicParameters&gt;(p =&gt; p.Get&lt;string&gt;("@param1") == "some value"` `&amp;&amp; p.Get&lt;string&gt;("@param1") == "some value"` `&amp;&amp; p.Get&lt;string&gt;("@param2") == "some value"` `&amp;&amp; p.Get&lt;SomeList&gt;("@param4").Any(c =&gt; c.SomeProperty == "some value" &amp;&amp; c.SomeOtherProperty == "some value" &amp;&amp; c.SomeOtherOtherProperty == "some value")` `&amp;&amp; p.Get&lt;SomeList&gt;("@param4").Any(c =&gt; c.SomeProperty == "some value" &amp;&amp; c.SomeOtherProperty == "some value" &amp;&amp; c.SomeOtherOtherProperty == "some value")` `&amp;&amp; p.Get&lt;SomeList&gt;("@param4").Any(c =&gt; c.SomeProperty == "some value" &amp;&amp; c.SomeOtherProperty == "some value" &amp;&amp; c.SomeOtherOtherProperty == "some value")))` `.Returns(someResults);` So I've hopefully made something which is easier to write, read, and gives detailed error messages for when the call isn't correct. `MockDBBuilder.BuildMock("myStoredProc")` `.WithParameter("@param1", "some value")` `.WithParameter("@param2", "some value")` `.WithParameter("@param4", someList)` `.Returns&lt;SomeResultsType&gt;(someResults)` `. Create ();` With custom validation so it will tell you why the call has failed (procedure wasn't called, missing parameter, wrong value on @param1, etc. Moq by default only says "this method was not invoked" - which isn't very helpful sometimes.
At the level of OP? Left join, inner join, count with filter. Basically show up knowing how to do more than `SELECT * FROM TABLE`.
I think this could work for you https://stackoverflow.com/a/25770434
Could you provide some kind of Build Pipeline Demo? &amp;#x200B; Or is it just: sempack, with the corresponding --minor increase?
You increment the file, but unless you commit that increment to version control, won't it just push the same version over and over? What's the motivation to use this over GitVersion, which is, in my opinion, far more traceable/repeatable?
Hmm, I think I understand what you are trying to do now. I guess the solution I suggested above might apply to this situation too. You can make the static "MockDBBuilder" class of yours a generic one. You can use it like this then; MockDBBuilder&lt;SomeResultsType&gt;.BuildMock("myStoredProc").Returns(someResults).Create(); Hope it helps.
It would be &amp;#x200B; sempack -f TheCsProj.csproj &amp;#x200B; which will produce the .nupkg (defaulting to a nupkg folder unless over ridden via the output command from dotnet pack) with the build and revision numbers semantically adjusted, that needs to be uploaded into nuget, which you could do manually or scripted sempack -f TheCsProj.csproj --minor will do the same with the minor version bumped by one
It would push the same major and minor version, but the build and revision numbers would be semantically adjusted per build (build is number of days after 1-1-2000, and revision is the number of seconds since midnight / 2). I suggest a pipeline that pushes the changed csproj while uploading the nupkg. Further GitVersion uses the assembly info (which supported wildcards, and the csproj implementation no longer supports wildcards) to build, which .NET core doesn't have
Heh. Nice! My goto is a program called **R**and**L**and. Basically procedurally generated land. Its similar to your goto. Ive just never read about another person that had a goto program for new languages.
Can you expand on RandLand? What’s the goal?
You are incorrect GitVersion was updated to work with net core so its able to do the versioning even on the newer projects without assembly info files.
The goal varies. It flexes arrays, modifications to the data, drawing, lambdas/function pointers. So, Ill generate something with perlin noise. My newest is to generate multiple layers of perlin noise. The idea is similar to yours. Re(rererere.....)implement a project Ive implemented a bunch in a new language / framework etc.
Thanks for the heads-up; I mistakenly thought Blazor *already had* server side rendering. FYI, Frogui has had server side rendering almost since its inception; I viewed it as necessary to make the product in a timely way because it allowed full debugging. I do not know of any limitations -- methods or otherwise -- to the C# language in Frogui. Do you happen to have any examples or links to share?
A lot would say the CI that modifies the repo is a horrible practice to follow.
I think that's going to be my plan.
yeah, it's looking that way. All good, thanks.
Yes thanks. I got it all figured out.
I guess I’m trying to grasp purpose, I understand bias just from years of working with it.
I think i have already explain purpose of people being excited about Blazor so I guess you must be referring to language choice. Why should that be the one thing in life where people don't have a preference? Some languages I understand the right tool for the right job argument but outside of browser issues I can' t see where JS is the right tool for a job over c#. Thats another reason people are excited about not being limited to JS.
Yeah, so in the new Mortal Kombat you can farm ingame items with ai match making. The problem is that you have to press enter few times to get into the next fight :)
But there is no “build and revisions numbers” in semantic versioning, only in Windows versioning such as assembly. But those are just words and can be ignored. I let my assembly versions have semantic major.minor.patch.0 always.
&gt; IRC, this is not the latest and greatest version of MSBuild That’s a big understatement. This is old AF. &gt; with the newer MSBuild versions, I tend to run _/t:Restore;Rebuild_ to eliminate an explicit NuGet step That only works with sdk-style csproj files.
If you want to take full advantage of type inference, you can do something like this: public class MockSetup { public MockSetupWithResultType&lt;T&gt; SetResults&lt;T&gt;(T results) { ... } } public class MockSetupWithResultType&lt;T&gt; : MockSetup { public void Create() { ...d.Query&lt;T&gt;... } }
Hi there! So I have the EnsureCreated methods used mainly for testing, so they're probably not being called at all, and I have removed them from my Startup.cs. I'm trying to implement the code you have provided here, so I've got this in my ConfigureServices: ```` services.AddDbContext&lt;FFDbContext&gt;(options =&gt; options.UseSqlServer(Configuration.GetConnectionString("MyDbConnection"))); ```` After moving my connection string to appsettings.json, the publisher picked it up, so the publishing window now contains my DbContext and my database, so that's really good. However the tables are still not creating, I think this is because I'm missing the Migration statement you've mentioned above. I'm trying to implement the rest of it inside the configure method, but I'm not sure what you're referring to when you say `context` or `ApplicationServices`. Should I pass `IServiceProvider` or `IServiceCollection` into the Configure method, is that what you're referring to with that variable? Also, more importantly, thanks for your help.
So to reiterate, the `Database.Migrate` function checks once on every startup whether it needs to perform the same series of tasks that you perform during Publish when you check "Apply these migrations during publish" and click "Publish". So you should be seeing Web Publish logs related to "Running EF Core Migrations" when you click Publish. If you're not, those logs are where you should look for more information, and should be available in the Output Window under either Debug, Build, or Publish Outputs (toggled using the dropdown). It's possible your Publish is not set to the correct environment that your AppSettings are in -- you should double check _the connection string listed under "Apply These Migrations" checkbox_. Also, try connecting to the production server from Visual Studio to make sure it has the correct permissions by using SQL Server Object Explorer. To answer the question you asked, the "Scoped" context in terms of .net core web apps generally means within the "Scope of a request". However, during startup there is no request, so you need to manually create a scope. One does this by injecting a scope management service into the `Configure` parameters and manually creating the scope. In my previous response, `context` simply meant the result of getting the DbContext from the scope you created. I'll try to do multiline code but no promises it will work (I can never get it working in Reddit). During the ConfigureServices function, you add a bunch of service that you can then access during Dependency Injection from any of those services. You can also access those services from the Configure() function, but you don't have a "Scope", so we'll create one manually: public void ConfigureServices(IServiceProvider serviceProvider) { using (var scope = serviceProvider.CreateScope()) { // now you can pretend you're inside of a normal Request Scope (basically) var dbContext = scope.ServiceProvider.GetRequiredService&lt;FFDbContext&gt;(); dbContext.Database.Migrate(); } }
That still makes my point though. You've spent time during business hours not working on your core product to debug an issue because the sdk for the language you're using doesn't work properly. I have never once had to do that with my current stack. As I said, everything simply works. Since you've had these bugs with the sdk clearly everything does not work for you. And that's the point, so clearly dotnet does not have full support as you have already admitted to having sdk bugs, which slow down development time and take money out of your pocket, especially as a startup.
I've opened the web publish logs and the only thing that they have created is an EfMigrationsHistory table, within the Azure Db. I'm seeing this in VS2017 Object explorer and also SSMS, so the connection is working fine. The connection strings also match, because this table is being generated am I wrong in saying that it's hitting the database fine? In the build output window it attempted to add the database 3 times out of a possible 10 before succeeding. This may seem like a stupid question but I haven't ran the `dotnet ef migrations add InitialCreate` command, and have no migrations within my project, I didn't think this was necessary as it ran fine in development and generated all the tables, but I'm seeing some places that you need to generate a migrations folder for deployment? Thanks for your help, I'm pretty new to this so it's really helpful.
I would say focus on the web development part of C# and .NET like [ASP.NET](https://ASP.NET) MVC and ASP.NET CORE. Like focus on building simple apps and understanding the basics of how the pages are rendered, study a bit of MVC pattern which is very used not only on [ASP.NET](https://ASP.NET) but other languages as well. Also, try to integrate those apps with simple databases with Entity Framework, nothing fancy just a working project. &amp;#x200B; Take a look at microsoft documentation, they have great explanations about the frameworks. Also, if you can, take a look at this udemy course [ASP.NET MVC 5](https://www.udemy.com/the-complete-aspnet-mvc-5-course/) might help you understand how [ASP.NET](https://ASP.NET) MVC works. &amp;#x200B; Good luck!
Right. But we're working on cutting edge technology and believe that C# gives us tons of advantages in other areas. It's not like other languages have bug free libraries, our js frontend developers have tons of issues, our php WordPress... is well... Wordpress... And our c++ team also runs into issues (they're using two different compilers trying to find a set of commonly supported features). We tried Java for dataflow... And it was such a cluster we ended up reimplementing everything in c# to save time and resources. Fun fact, one of the biggest issues that comes up front an interop perspective is only our c# codebase supports case insensive Json - both Js and c teams use libraries that are case sensitive - major productivity killer when one of those issues pops up. Luckily, we can apply broad conventions easily with dotnet core and newtonsoft. Overall we're exceeding our business and technical goals and timelines - which is really what matters. You still haven't explained what exactly makes gke support so difficult for net core as opposed to any other language.
That namespace is for abstracting dependency injection, not replacing it. The point is for your application to not care about its DI container. Imagine one day you want to switch to Prism or DryIoC. You now need to rip out your DI logic and completely replace the registration system since each container has their own methods for registering types. This library abstracts the registration out, so if you switch containers you only need to replace a single class reference to what IServiceProvider adapter you are using. This namespace is supported by all major IoC containers and comes with a ready built adapter.
Look, you've spent more time arguing based on ignorance (e.g. the json serialization argument), why not put a few minutes into learning? [https://codelabs.developers.google.com/codelabs/cloud-kubernetes-aspnetcore/index.html?index=..%2F..index#0](https://codelabs.developers.google.com/codelabs/cloud-kubernetes-aspnetcore/index.html?index=..%2F..index#0) Google will show you everything you need to know to get started running dotnet core on gke. I'm not asking you to like dotnet core, or even use it. However, if you're willing to learn python, go, nodejs etc... why not spend an hour and make you you're at least \*educated\* in dotnet core? Oh, and before you ask, I did go through the golang tutorials earlier - because while I decided not to use it right now, I did want to be \*edcuated\* on it.
Yep! You have to run `dotnet ef migrations add YourMigrationName` though initial create might make sense for the first one
Horrible horrible
can confirm, we have microservices and produce many nuget files for shared api sdks and libraries, and we use gitversion with nuget build and nuget pack. Works like a champ.
In my Visual Studio 2017, it displays the class (which I find is typically is "good enough" as long as your classes are reasonably small).
What is your use case for this? Honestly I can't think of a time I ever needed that. Under what circumstances is knowing the method name for a reference important but you don't need to actually go on and change the method anyway? In fact.. I would posit that rather than getting an extension to hide it, maybe you should refactor your code so it isn't so necessary? It seems like maybe there's some code smell. Proper formatting should prevent missing the top of the method, and honestly your methods shouldn't be so long that that's a real risk anyway. And your classes should be narrowly focused enough that you can at least guess what method it is from the class name and the snippet provided in the find results. I could very well be wrong, so please give a little more detail so we can help properly
You've said that C# is completely and fully supported on the cloud. My argument is that is a second class citizen in comparison to go, node, and python. The fact that you had to spend business time working out bugs in their sdk proves my argument. I've never spent one second of time working out sdk bugs because the language I chose was not quite there yet. Another thing, what on Earth are you talking about case sensitive Json payloads not being supported in js? That's just patently untrue and if your just developers tell you that, fire them. I'm the many years I've been creating web apps.i have never once ran into this issue. I'm also quite sure you've already forgotten that I come from a dotnet background so I've spent years with C#, and I've spent years learning node (now with typescript), python, and golang. Oh btw, docker and Kubernetes are built with golang. Once more, my argument has never been node over c#, it's just been that c# is not as modern as other languages in the space, while Microsoft has tried to make it more modern by bringing it multi platform, it's still not up to snuff with other languages in the space. Why aren't more startups using dotnet? Why is it that every time I come into a company, the primary reason is to transition them from dotnet and c# to something else? You see I have many tools in my belt, I've studied data science and ML with python and tensorflow, I've built massively scallable web apis with node and typescript, I've built highly performant front end applications with angular (again typescript), and I've built large data ingestion and processing engines with golang. I've also deployed just as large and important applications with c#, but the big difference, was that my current stack has provided me with a much larger range of skills, I've been able to decrease my development time dramatically, and when it comes time to hook everything together it works absolutely flawlessly, like a tapestry of code. This is a level of freedom I simply never had with dotnet and at my last company moving them from dotnet standard to dotnet core, it's not something I really look forward to working with in the future.
Removed: Rule 4. You'll want to make an attempt first, and at the very least, include the platform you're programming against (e.g., WPF, MonoGame, Unity)
&gt; semantically adjusted per build (build is number of days after 1-1-2000, and revision is the number of seconds since midnight / 2 That’s not very semantic, is it. Build should be incremental by one, so that users can see how many releases they’re behind.
I'm trying to refactor code with methods that are well named but lots of class variables. They aren't in their methods because they're being called in Update in Unity, which means they run every frame (so the variables defined in the method would cause more garbage collection). It would be easier to look through the code if I could see where these variables are used and how it works before modifying things if I could see how many functions use them.
Visual studio enterprise does something like this already. Is that what you mean? [https://i.imgur.com/nmhI7go.png](https://i.imgur.com/nmhI7go.png)
I'd like to chime in that sometimes what's being done is a rename on a symbol used in a monolith where just refactoring the code is rarely worthwhile. To answer your second paragraph.
It looks like it kind of does, but you have to click or hover over each line to see the method? That would be easier but it still would be nice if the reference list just stated it so you could see what method 10 different lines are in at once. It would just speed things up, especially when it's code you haven't written or making sure a certain method doesn't use it.
That would get unwieldy when you have something referenced in more than a few places. If you're in one of the methods that is referenced, peek definition will do something like what you are describing, but from the method call, not the method definition.
Resharper has a "Find Usages" feature, that shows you exactly in what context something is used . You can download the 30 day trial and do it with that.
Hello, I do not really use this feature, but I know that in Visual Studio Code, the peek function gives you a list of all the files that reference a method or class. [https://code.visualstudio.com/docs/editor/editingevolved#\_peek](https://code.visualstudio.com/docs/editor/editingevolved#_peek)
Ah, I used to misunderstand that this is a rather useful **abstraction**. Thanks for the explanation! I tend to like .NET Core more and more every day.
Maybe consider using Rx for this. Sounds like it's exactly what you need.
`Dictionary&lt;Type, IEventHandler&gt;`?
This so much
I'm just trying to understand - by "semantic versioning" do you mean the automatically generated version number, when you had the following in the project file? ``` [assembly: AssemblyVersion("1.5.*")] ``` That's not really semantic versioning (https://semver.org/), is it? But I certainly see your point, I've been a fan of the way the version number's been generated for quite some time. As /u/silvenga below mentioned, having your CI modify the project/repo isn't good practice. The good thing is - you don't really need to modify the project anyway. You can easily set the version number during build! I'm using PowerShell, but this could be adapted to bash as well. In your `Project.csproj` append an optional build param to your version. If not provided, the version number will still be valid: &lt;PropertyGroup&gt; &lt;VersionPrefix&gt;2.1$(BuildRevision)&lt;/VersionPrefix&gt; &lt;/PropertyGroup&gt; In your `Build.ps1`, get the build and revision numbers, and set the build parameter value (prefixed with a `.`) $build = (New-TimeSpan '2000-1-1' (Get-Date)).Days $revision = [int]((New-TimeSpan (Get-Date).Date (Get-Date)).TotalSeconds / 2) dotnet build /p:BuildRevision=.$build.$revision The beauty of this, is that you can combine the "windows generated version" with semantic versioning, to get labeled versions: $build = (New-TimeSpan '2000-1-1' (Get-Date)).Days $revision = [int]((New-TimeSpan (Get-Date).Date (Get-Date)).TotalSeconds / 2) dotnet build --version-suffix beta2 /p:BuildRevision=.$build.$revision In your built assembly, this will generate the following: [assembly: AssemblyFileVersion("2.1.7058.19259")] [assembly: AssemblyVersion("2.1.7058.19259")] [assembly: AssemblyInformationalVersion("2.1.7058.19259-beta2")] If you're planning to release this as a NuGet package, this works as well! dotnet pack --version-suffix beta2 /p:BuildRevision=.$build.$revision In the nuget package generated, the version looks like this: &lt;version&gt;2.1.7058.19259-beta2&lt;/version&gt;
It's working! I thought it would have worked like local development where the local db is just generated through DbContext, I didn't realise the whole migrations thing was even a feature. Thanks for all your help.
Sounds like you are looking for a tool like NDepend
`Main()` needs to return either `int` or `void`, and take either an array of strings as an argument or nothing. You could add an overload, here, like `private static void Main(string[] args) =&gt; Main();` to solve the error you're asking about, but I don't understand why you'd want to return an array from `Main()` in the first place.
By declaring [a main method suitable for an entry point.](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/main-and-command-args/) You simply cannot return arbitrary types from the main method.
&gt; &lt;Version&gt;{MAJOR}.{MINOR}.{BUILD-VERSION}.{REVISION}&lt;/Version&gt; The third part is called "patch", not "build-version". A revision version is not part of SemVer. And there doesn't seem to be support for a prerelease version or build metadata.
Yes that‘s basically the switch. I can populate this once during IOC registration via reflection (and actually that is my current solution) but I loose all type safety. I didn‘t include this example as it requires more code and in the end still boils down to the switch solution just without type safety. I just thought there must be some fancy pattern that I don‘t know and treats this issue.
&gt;but I don't understand why you'd want to return an array from Main() in the first place. I plan to use the returned array in a powershell script, is there any better way to make this array return to a powershell script?
Another fancy solution btw is like the visitor pattern but without visiting by doing `((dynamic)this).Handle((dynamic)@event))` inside the generalized handler. Since dynamic will resolve to runtimetype it will call the automatic overload. Still not nice because of runtimebinderexceptions and performance.
In that case don’t make a console app. Make a class library and write a method suitable for your needs and then call it from PowerShell like this: `MyLib::MyMethod()`. This way you can create whatever you want with any input and output.
I've had identical issue recently. You have to make use of Type.GetMethod.MakeGeneric.
You might be creating problems that don't exist. Why not just create the array in PowerShell?
I'm not sure I understand what specifically you're looking for. How are you wishing to register the handlers instead, how do you wish to call the handlers, and where is your current approach lacking type safety?
I agree and only made worse in my case by a few gung-ho devs that tried to sell my employer on the change by building stuff on alpha and beta builds of Core... Yea, alpha and betas are not getting installed on a production server. Employer is fine with having newer tech, but not the absolute bleeding edge.
Well that certainly makes sense. Can you bust out your methods to be a bit shorter? That probably would help.
When I make it a class library in Visual Studio and hit the run button it [shows me the following error](https://i.stack.imgur.com/URSmm.png)
Personally, I think a refactor there probably would be worthwhile, but that's personal preference. Also, wouldn't refactor&gt;rename do that for you?
You can't run a class library directly. Make a [tester project](https://docs.microsoft.com/en-us/dotnet/core/tutorials/testing-library-with-visual-studio?tabs=csharp) or just use it directly from Powershell.
While this is probably true for simpler approaches, one of powershell's strengths is its near-seamless interop with the .NET ecosystem.
&gt;[Email] [varchar](50) NULL, If you think a varchar(50) is appropriate to use to store emails then just shut down your blog and don't write any more tech articles. Might think its harsh but if your that dumb that you would exclude a large percentage of legitimate emails from ever being stored because you don't understand what you are doing then you have no place writing any sort of blog post involving the topic. Unfortunately its detailed enough that to a less experienced person it may come across as good content but this code is not usable because of how restrictive the data length is. ISBN codes only go up to 13 digits so varchar(50) is also a poor choice.
One of the assets I bought on the Unity asset store has many methods that are 500+ lines so it would lol. It also has inception levels of states where a state sets a state which sets another and so on and just sets and stores the same thing 20 times across 20 classes each frame XD. It's inefficient enough that I'm just ripping out some of the logic and formulas and putting that into my own scripts. This also would have been super useful at my last job which had an even worse code base. Changing a variable like latitude in the simulation literally caused all calculations to happen 4 times, including recalculating the latitude that was just manually entered.
&gt;Why not just stay entirely in PowerShell I am using an API which is written in C#, now if I were to write all the code in powershell than how would I be able to re-write the following lines as powershell does not contain var keyword var connectionInfo = new ConnectionInfo(); var reader = new MetricReader(connectionInfo); var id = new MetricIdentifier("SPOProd", "PerfCounters", "\\ASP.NET\\Requests Current"); var dimensionFilters = new List&lt;DimensionFilter&gt;(); dimensionFilters.Add(DimensionFilter.CreateIncludeFilter("Instance"));
Great suggestion, thanks!
Maybe your code has a different deserialization method used? I'd check for XML vs JSON deserialization.
&gt; your that dumb
I figured it out. I had to add maxreceivedmessagesize=2000000 in web config. Now,i have no error but when i check the response only the last array value is being return. I think that instead of adding the response value its being overwritten. Any idea how to modify the service referenve code?
 #&lt;AddNamespace&gt; means you should write the entire namespace here $connectionInfo = [&lt;AddNamespace&gt;.ConnectionInfo]::new(); $reader = [&lt;AddNamespace&gt;.MetricReader]::new($connectionInfo); $id = [&lt;AddNamespace&gt;.MetricIdentifier]::new("SPOProd", "PerfCounters", "\\ASP.NET\\Requests Current"); $dimensionFilters = [System.Collections.Generic.List[&lt;AddNamespace&gt;.DimensionFilter]]::new(); $dimensionFilters.Add([&lt;AddNamespace&gt;.DimensionFilter]::CreateIncludeFilter("Instance"));
Eventhandler depend on strongly typed events `EventA`, `EventB`. If I work with `IEventHandler` and hence with `IDomainEvent` I need to cast to the strongly typed variant somewhere. This is what I meant with lack of type safety. In the switch pattern event and eventhandler types are as strictly coupled as it gets. I even have compile time type checks. But I can not just add another eventhandler to the service provider and it will do its job out of the box. Instead I also need to add the new handler to the switch. If I do the reflection approach I will lose all typesafety and may get runtime exceptions. Ideally I would like to register the message handler (and the new message) for my provider and out of the box my generic handler would be able to handle the new event via delegation to the new eventhandler. And all of this without casting and/or reflection. :D
JetBrains Rider does this. It displays: - Class.Method - The line - Line number - Project
While its true that the standard supports unicode, most existing systems do not. I also agree that 50 is a bad choice for length, it's also the default for SQL server... So if you get hung up on something that small, maybe you need to start looking at the forest instead of the dung beetle on the ground.
&gt;You've said that C# is completely and fully supported on the cloud. &gt; &gt;My argument is that is a second class citizen in comparison to go, node, and python. The fact that you had to spend business time working out bugs in their sdk proves my argument. I've never spent one second of time working out sdk bugs because the language I chose was not quite there yet. &amp;#x200B; Except this proves nothing beyond that you've not had bugs. Let's see if that's true across the board. [https://github.com/googleapis/google-api-go-client/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+i](https://github.com/googleapis/google-api-go-client/issues?utf8=%E2%9C%93&amp;q=is%3Aissue+i) [https://github.com/googleapis/google-cloud-node/issues?utf8=%E2%9C%93&amp;q=](https://github.com/googleapis/google-cloud-node/issues?utf8=%E2%9C%93&amp;q=) Oh shit, both on them have hundreds or thousands of issues over time. Just like C#. &amp;#x200B; &gt;Another thing, what on Earth are you talking about case sensitive Json payloads not being supported in js? That's just patently untrue and if your just developers tell you that, fire them. I'm the many years I've been creating web apps.i have never once ran into this issue. &amp;#x200B; And? You seemt to think JSON serialisation takes 0.5-1s in dotnet - stupid stuff happens all the time. I just find it intereting that you magically think useing js makes your code better at json - when it does depend on the frameworks, tools and patterns used as well. &amp;#x200B; &gt; I'm also quite sure you've already forgotten that I come from a dotnet background so I've spent years with C#, and I've spent years learning node (now with typescript), python, and golang. &amp;#x200B; Except that knowledge fails to show itself in this conversation. &amp;#x200B; &gt;Oh btw, docker and Kubernetes are built with golang. &amp;#x200B; Fanbloodytastic. This is the kind of statement that proves that knowlexdge and understanding are two different things. K8s is built on go, but k8s runs containers - so the fact it's built on go provides no meaningful differance to managed containers. &amp;#x200B; &gt;Once more, my argument has never been node over c#, it's just been that c# is not as modern as other languages in the space, while Microsoft has tried to make it more modern by bringing it multi platform, it's still not up to snuff with other languages in the space. &amp;#x200B; You've failed to bring 1 single provable issue with dotnet, and you've refused to read the most basic of bechmarks or follow the most basic of tutorials. &amp;#x200B; &gt;Why aren't more startups using dotnet? &amp;#x200B; We use dotnet and love it. What's the argument again? &gt; Why is it that every time I come into a company, the primary reason is to transition them from dotnet and c# to something else? &amp;#x200B; 1) Because that's your skillset? Why do I find companies that like dotnet? Because that's my skillset. 2) You are too ignorant to suggest moving to dotnet core. You could actually be doing your clients a disservice, but simply hold on to outdated myths to justify your position. You could prove me wrong at any time: [https://codelabs.developers.google.com/codelabs/cloud-kubernetes-aspnetcore/index.html?index=..%2F..index#0](https://codelabs.developers.google.com/codelabs/cloud-kubernetes-aspnetcore/index.html?index=..%2F..index#0) &amp;#x200B; &gt;You see I have many tools in my belt, I've studied data science and ML with python and tensorflow, I've built massively scallable web apis with node and typescript, I've built highly performant front end applications with angular (again typescript), and I've built large data ingestion and processing engines with golang. I've also deployed just as large and important applications with c#, but the big difference, was that my current stack has provided me with a much larger range of skills, I've been able to decrease my development time dramatically, and when it comes time to hook everything together it works absolutely flawlessly, like a tapestry of code. This is a level of freedom I simply never had with dotnet and at my last company moving them from dotnet standard to dotnet core, it's not something I really look forward to working with in the future. &amp;#x200B; Except we do the same with .net core. We have FEAPI's, Data-ingestion and processing, so on and so forth all built in net core. We love it because it's modern, highler perfomant and unified (so we can maximise the efficencies of a small development team). Ultimately just because you don't know how to use C#, doesn't mean that nobody else does. Find an actual problem with it (something that's real, demonstratable, not just a myth you've heard or invented), or admit to \*yourself\* you may be wrong. Again, nobody is asking you to like or use net core - but you owe it to yourself to at least be \*honest\* about it.
Your main method dispored earlier than reader.GetTimeSeriesAsync, may be this is problem too.
can you also help me in converting the following block of code: IQueryResultListV3 results = reader.GetTimeSeriesAsync( id, dimensionFilters, DateTime.UtcNow.AddMinutes(-5), DateTime.UtcNow, new[] { SamplingType.Sum }, new SelectionClauseV3(new PropertyDefinition(PropertyAggregationType.Average, SamplingType.Sum), 10, OrderBy.Descending), outputDimensionNames: new[] { "__Machine" }).Result; var temp0 = results.Results.SelectMany(x =&gt; x.DimensionList).Select(y =&gt; y.Value.ToString()).ToArray();
I mean, you also get runtime exceptions if you pass in unsupported event types to the switch. Pattern matching just comes down to casting syntax sugar. Only the visitor approach avoids that possibility. As long as you encapsulate the dictionary in a strongly typed generic wrapper I don't really see the practical difference in safety.
The max possible length of an email is 320 chars. This 'small' thing to get hung up on literally excludes over 3/4 of possible email addresses.
You just commented "great suggestion" on your own post.
&gt;Length Why not "SizeUnit" or "ScaleUnit" or "DisplayUnit" ? Length seems way to general imo
Since when are you taking business rules from blog posts?
No shit sdks have had issues, but I've never spent a second of my time having to debug or deal with a single one, unlike yourself. since JSON is native to js, yes it is much better at parsing and dealing with JSON objects than most languages, that should be basic logic. You are a single startup using dotnet. For every case like yours (which I have a hard time finding really) there are 100 using a similar stack to mine, so my question stands, why is your stack not used by many startups at all, and why is my stack so much more popular among developers in general? I'll be the first to admit that popularity doesn't necessarily make something right, but if you study developer trends you'll notice that developers will gravitate towards stack that allow them to save on costs, get up and running fast, and will be the most performant. To spell it out for you - developers don't use dotnet stack as much as they use stacks built on python, go, or node. Similarly, why are node, python, and go so prevalent at companies like Netflix, Uber, Google, Twitter, Ebay, Amazon, Facebook, and many others and there seems to be little to no use of dotnet anywhere there? Why aren't there more repositories being made with dotnet in github? The majority of developers don't just do things for no reason, so you really have to ask yourself why dotnet is not more popular if it's as great as you say it is. Again, I've worked with dotnet for many years. I know it well, and JSON data handling, which is really crucial today, is not one of its strong suits. Dotnet does not have a very good way of parsing JSON objects and this is well documented https://github.com/dotnet/announcements/issues/90. Microsoft is trying to make it better, which is commendable, but ultimately they're behind the curve and they always have been. That's honest.
Look up Rubber Duck Testing. May not immediately click for current time frame but a way of life.
Well, googling "C# Crypto" leads to pages of C# Cryptography using AES and other stuff. This makes precise googling with that title of yours to not be fruitful.
Lol, I like this one.
Do you think it makes sense sense to benchmark say 1% failure rate in 100,000 Jo s scenario to see if unwinding the call stack is expensive for end users who need fairly consistent pause time?
Lol. So, you haven't had a sdk issue... That is meaningless given that we know the sdk's have issues. As I said earlier, we're pushing the cutting edge - so we expect to see issues. Just because json comes from js does not mean js is best at it - that's a logical fallacy. Find proof of your claim, or realize this is another illogical rationalisation of your decisions. 0.0006s is not a problem in my world. Since you want to suddenly do some reading, read up on newtonsoft... and maybe give that gke tutorial a shot.
Thank you for the overview, definitely gonna make use of it. It's true I should rather engage in a project rather than pure learning, that won't prove anything.
Benchmarking is always useful. Exceptions are expensive, but one exception in 100,000 jobs is probably not going to make a difference. But... without a benchmark, it's all guesswork. By the way, most of the job queue implementations in the article (or even all of them) don't have native failure handling support. You'll have to implement this on your own so as not to kill the job queue when an exception occurs.
I think that's a really cool project - but I wonder what use it has in the real world? Parallax now comes built into iOS (not sure about Android), but it's based on the movement of the phone. Having it based on the movement of the mouse, which is what you seem to have done, strikes me as, well, a little bit odd. Or maybe I'm missing something?
That makes the whole thing smell of blogspam.
Nah, he probably wanted to comment to another comment, but doesn't know how to use Reddit.
Kevin Durant has been active in the tech industry
Dude why are you converting to production code to PowerShell if you don't understand it?
Oh no, someone left the default values when creating an example! The horror! The humanity! I haven't looked over the whole article, but if this is your only real complaint, you need to drink less caffeine.
it is needed to use the api
I think he meant to reply to the comment by u/therealcramCHEESUS that got downvoted below.
u/didinj, this is a pretty good article. I am working on a new side-project with Angular 7 and [ASP.NET](https://ASP.NET) Core, and this will make for a great starting point since I've not worked with Angular before. Like some others have mentioned though, you should use more industry-standard data types and widths for fields in the SQL, especially since a lot of folks are unaware of the potential issues.
What's up with the needlessly insulting and aggressive tone? If you took a constructive approach to this feedback your post would be totally fine, instead you look like a douchebag.
You can’t “run” libraries. You use them in other running applications or in powershell scripts. If you just build the app you should have .dll file in your bin folder, load it into powershell and call the methods. Once it’s ready you can build it in release mode and reuse it everywhere.
I like it, but within t looking at the result, I would have guessed tpl and Rx would win in large amount of jobs.
I would add a base abstract DomainHandler class that defines the following function : HandlerAppliesTo(IDomainEvent event) =&gt; event is TEvent Then register each Handler as the base IDomainEventHandler. Then in the IDomainEventCoordinator (or whatever you call it) inject an IEnumerable&lt;IDomainEventHandler&gt; and do: void HandleEvent(IDomainEvent event) =&gt; _eventHandlers.ForEach(handler =&gt; { if (handler.AppliesTo(event) handler.HandleEvent(event); } } On mobile, so.. Yknow.
Does hangfire allow recurring jobs at specific times though?
I do most of my work in Rider, it runs on Java, but has pretty good support for C# on the Linux side.
I heard VS Code is awesome.
There's really not much choice in the first place, so why don't you try them out and see which you like?
You're better off spending time to learn C# basics first.
Great question and suggestions! To expand my original answer, the Frogui **Length** struct is directly analogous to the CSS [&lt;length&gt;](https://developer.mozilla.org/en-US/docs/Web/CSS/length) datatype, so took its name as well. On a more general note, naming types has been very challenging and fun while creating Frogui since it involved fusing the WPF + UWP world with the web world. There are hundreds of type names. Input about the choice of type names is very much welcomed!
Removed: Rule 7.
Great read for a novice such as myself! Appreciate it :)
Adobe can track all link and button clicks automatically. You may need to add some attributes here and there to make the data useful.
I use rider, you can also use rider-eap (early access program) to get it free because you're testing it early, vsc also works but it's not really a full ide if you're just learning I would recommend rider, I don't know for sure but I would guess an eclipse version exists too
Again, you've spent business time debugging sdk issues for your language I have not. I've said that dotnet is a late comer to containerization, which is absolutely true, and thus it's going to be a little behind, which it is. And yes it does, it absolutely does. Here's the thing with newtonsoft, it's kind of a slug, not quite as much as other solutions (like DataContractSerializer) but it's also not the fastest solution. It also does some really dumb stuff, like getting itself into an infinite serialization loop (Look at the docs around SerializationSettings and ReferenceLoopHandling). JSON is not native to C# because C# was never designed with the intention to use JSON, it was always meant for XML. As the language evolved they tried to integrate JSON serialization and, of course, there were plenty of 3rd party libraries to handle it for you, but they don't do it as well as the language JSON is native to, that just makes sense.
The fact you think c# was designed for xml is highly laughable. Please, where in the c# spec is xml support defined? Please show me where go language spec defines Json? (Hint, blog.golang.org/json-and-go uses a package for json, not language support). Please, shown us an example of where go does meaningfully better Json serialization? Or is this another myth you invented to justify an irrational position? Sdk issues exist regardless of language... As proven by the very languages you use having sdk issues. The fact you've never encountered them is meaningless. TBH I'm not sure you'd even notice if you had experienced them - after all you've consistent failed to understand basic concepts like how json serialization is done and tend to gravitate to points that reinforce bias rather than exist in reality.
I think you simply have a difficult time refuting my points, which is why you're unable to do so.
Get the base64 string from xml https://stackoverflow.com/questions/17590182/how-to-get-the-xml-node-value-in-string/17590429 Decode to byte array https://stackoverflow.com/questions/6733845/c-sharp-convert-a-base64-byte Get an image from the byte array https://stackoverflow.com/questions/9173904/byte-array-to-image-conversion
I googled. File.WriteAllBytes(@"c:\yourfile", Convert.FromBase64String(yourBase64String));
Not all heroes wear capes.
Thank you so much! Do I just use the imageobject.save() function to save it to my drive or do I need to pass a tif specific argument?
Did you able to challenge the exam, How was that? I am looking forward to challenge the exam in coming months. Could you please share your learnings? Thanks
Probably need to specify a format, although I think it can be any format, not strictly the input format
I do have a hard time refuting your points! They are based on magical thinking! Take json and c#. You have failed to show that c# is bad at json, failed to show c# was built for xml, and failed to show that go is built for Json. Yet somehow I'm meany to disprove these positions that only exist in your head - largely due to a misunderstanding if how serialization works (hint it's usually done by libraries, not languages) and a failure of a actually having a tangible problem to point at. For example you point at the reference issue... But fail to show where that issue arises in day to day life or how go handles it better. Keep in mind, we handle many thousands of json messages a second and don't have any if the issues you seem to face. You know what they say about a tradesmen who blames his tools... tools that millions of others use just fine... To date we have disproved: Json takes 0.5 to 1s in .net. (0.0006s in benchmarks) .net has higher overhead (faster than node in benchmarks). Go has language support for Json (library is not language). Dotnet is difficult to deploy to k8s (gcp docs say otherwise) Donet sdk for gcp is buggy (they all have issues, and all are well supported) Do you have any provable points? Or would you like to spend 19mins getting familiar with something you clearly don't understand as well as you think you do?
Awesome! Thank you its working!
I don't see how the namespace declaration syntax affects partial classes at all. ``` namespace MyNamespace { public partial class MyPartialClass() { } } ``` ``` namespace MyNamespace; public partial class MyPartialClass() { } ``` If you are generating partial classes and putting them all in a single file, you may still prefer the first type. If C# added support for the latter as an alternative to the former, then it would not impact that use case either.
Ah interesting. That‘s kind of how newtonsoft converter are defined although I am not sure how delegation works under the hood. However something as generic serialization/deserialization handler delegation is actually kind of what I want to achieve so that sounds highly applicable.
More specifically, look at the [NodaTime.AnnualDate](https://nodatime.org/2.4.x/api/NodaTime.AnnualDate.html) data structure.
You can of course take this further, this is just an example of the pattern itself. Imagine: public class MyDomainEventHandlerCoordinator { private readonly IServiceProvider _serviceProvider; public MyDomainEventHandlerCoordinator(IServiceProvider serviceProvider) { _serviceProvider = serviceProvider; } public void HandleEvent&lt;TEvent&gt;() where TEvent : IDomainEvent, new() { var event = new TEvent(); var eventHandlers = _serviceProvider.GetService&lt;IDomainEventHandler&lt;TEvent&gt;&gt;(); if (eventHandlers.Any()) { eventHandlers.ForEach(handler =&gt; handler.HandleEvent(event)); } } }
Maybe HotJar ( https://www.hotjar.com/ ) - we've used it a bit in our environment.
You shouldn't hash passwords with HMACSHA512 because it isn't designed for that. You should use PBKDF2 via Microsoft.Extensions.Identity.Core 1. add nuget package `Microsoft.Extensions.Identity.Core` 2. update your user table to remove `Salt` column (it will be stored inside the password blob) and change `Password` to `varchar(128)` instead of `varbinary` (128 is unnecessarily long but whatever, you can play around if you care) 3. add `services.AddIdentityCore&lt;TblUser&gt;();` to `ConfigureServices` 4. change your `AuthRepository` class: public class AuthRepository : IAuthRepository { private readonly BookStoreContext _context; private readonly IPasswordHasher&lt;TblUser&gt; _passwordHasher; public AuthRepository(BookStoreContext context, IPasswordHasher&lt;TblUser&gt; passwordHasher) { _context = context; _passwordHasher = passwordHasher; } public async Task&lt;TblUser&gt; Login(string email, string password) { var user = await _context.TblUser.FirstOrDefaultAsync(x =&gt; x.Email == email); if (user == null) return null; var result = _passwordHasher.VerifyHashedPassword(user, user.Password, password); if (result == PasswordVerificationResult.SuccessRehashNeeded) { user.Password = _passwordHasher.HashPassword(user, password); await _context.SaveChangesAsync(); } if (result == PasswordVerificationResult.Failed) return null; return user; // auth successful } public async Task&lt;TblUser&gt; Register(TblUser user, string password) { user.Password = _passwordHasher.HashPassword(user, password); await _context.TblUser.AddAsync(user); await _context.SaveChangesAsync(); return user; } public async Task&lt;bool&gt; UserExists(string Username) { if (await _context.TblUser.AnyAsync(x =&gt; x.Email == Username)) return true; return false; } } Also if your controller action were to accept form post data instead of a json object and the login field was `username` and password was `password` and the response was a json object `{ "access_token": "..." }` then you would be implementing OAuth2's "password" flow (or at least faking it close enough that tools like Postman claiming to support it would be able to use an OAuth2 configuration).
So. This is a legit bug, and legit feedback. But your attitude is ridiculous -- how many different ways did you need to say "I found a bug in your code, therefore you're dumb"??? You literally restated the exact same critique three different ways. Also, finding one bug doesn't invalidate the rest of the content.
Max length is 254, btw. https://stackoverflow.com/questions/7717573/what-is-the-longest-possible-email-address You should probably shut down your reddit account and not write anymore posts.
VS Code on linux is pretty good. Works great with dotnet. However my code made it not work and it would only debug when I throw an exception... Happened on both windows and linux... So I'm programming on windows again :( I switch between both IDEs tho
I actually still haven't taken it, but I need to schedule it soon. If it helps, I can share with you my study process. Microsoft Virtual Academy (MVA) offers some free courses. * I started with "C# Fundamentals for Absolute Beginners" on MVA. * Then I made an Excel Spreadsheet of every topic covered in the exam (so I can check off topics as I go), as covered here https://www.microsoft.com/en-us/learning/exam-70-483.aspx * I used the official Exam 70-483 Reference Book to review topics and quiz myself with the review questions before I checked off topics on my spreadsheet. You can find the book for free here https://github.com/harryi3t/PDFs/blob/master/Exam%20Ref%2070-483%20Programming%20in%20C%23%2C%20Wouter%20de%20Kort%2C%20O%C2%B4Reilly%2C%202013.pdf * Then I reviewed everything again by completing the "Programming in C# Jump Start" Course on MVA, which is targeted specifically for the exam.
I do all of my C#.NET Core development in Windows with VS2017, even for my Linux running code. I do know that VSCode runs on Linux so that should be a viable option for you. [https://code.visualstudio.com/#alt-downloads](https://code.visualstudio.com/#alt-downloads)
We are developing an application that does exactly that and more! will be released under MITL once it’s finished. It’ll be ready for pre-release in 7 weeks, but I could share the core utility classes somewhat earlier.
Hey! Please see the .zip I uploaded here https://github.com/khellang/Scrutor/issues/68 You can see the `Decorator1CommandHandler` as the `SecurityCommandDecorator&lt;TCommand&gt;`. The `IDecorator1&lt;TCommand&gt;` could be an ICommandSecurityValidator&lt;TCommand&gt;` interface (with a `where TCommand : ICommand` clause) which holds the `Task&lt;bool&gt; IsAuthorized(TCommand command)` method. Then the `Addition1Decorator1CommandHandler` would be the `Addition1CommandSecurityValidator` which would then inherit from `ICommandSecurityValidator&lt;AdditionCommand&gt;` and thus have an `IsAuthorized` method. You can then use dependency injection to inject the things you need to check if the user is authorized to perform the command. In our case, the commandsecurityvalidators inherit from an abstract class `BaseCommandSecurityValidator&lt;TCommand&gt;` which contains an `IUSerContext` with info about the current user. Then, in the `SecurityCommandDecorator&lt;TCommand&gt;`'s `HandleAsync`, you'd call the `IsAuthorized(command)` of the `ICommandSecurityValidator&lt;TCommand&gt;` and then if the result is false, throw an exception or something. If true, just call the innerhandler. The endresult is that each commandhandler now also has a commandsecurityvalidator decorator which defines when a user is allowed to perform the command. ----- I would still recommend u/Enlogen answer because my workflow uses controllers which get the queryhandlers and commandhandlers injected. Yours use mediatR and thus could be more difficult to configure with the decorator pattern. I think the mentioned pipeline behaviors are the solution.
I use Heap Analytics and it's great. You don't have to add anything but the initial JS code to start. No manually adding event code to buttons. You can do it all retroactively too. It's great https://heap.io
OĆE KURAC
GA is fine for this. Use GTM and build a trigger that fires on tags and records either the link text/click url/etc.
I'm not sure what all you mean. Fuchsia is not just mobile, it's also a tablet and desktop OS, it will support all platforms. It is not a subset of unix, so it will take extra developmental work for .net core to work on it, but it should work just as current .net core does on Linux (desktop). Fuchsia is written in rust/c++/dart, so it's not having any extra hand holding for .net, if that's what you're asking
If my points were incorrect in any way shape or form you would easily be able to prove it, which you haven't been able to. You mentioned newtonsoft which I proved was worse than JSON parsers in go by the fact that you will never run into infinite serialization loops. Part of the issue was I never argued specifically for go serialization over newtonsoft serialization, it's something you latched onto and tried to argue, which you've also lost. It does not have the same issues (i.e. infinite serialization, which is right in the newtonsoft docs), which just a single example, and things I have personally dealt with, as have many others. The same issues are not present in python (which does support JSON natively), node/js/typescript, or golang libraries. C# does in fact have higher overhead and more resource utilization than node, that doesn't mean that node is faster than C#, but it does mean that in many scenarios node is so much more user friendly. For example what takes you 30 lines of code to accomplish would simply take 5 lines in node. This is one of the many reasons for Node's popularity. Microsoft doesn't often get things right, but with vscode and typescript they hit it dead on. With typescript you can now add a reliable type system and cross compilation to any version of node (es5,es6, etc.) Which means it does more for you without taking anything from you. None of that makes for a solid argument for node over c#, but that is a very simply reality. You're going to mention that C# is faster than node and stick on that point, which I'm not arguing. If I were I would tell you that Netflix, Google, Amazon, and even Microsoft have Node services that they use to handle massive amounts of data and they wouldn't do that for no reason.
&gt;Fuchsia is not just mobile I mean that discussions of Fuchsia are very often in context of mobile or made by mobile communities, because probably that's going to have biggest impact on them, and since I'm not really following mobilen then I don't know &gt;if that's what you're asking I wanted to promote some kind of dicsussion of what kind of impact can Fuchsia have on .NET Core, so probably there's not answer, but just thoughts :P
 It's mostly in context of mobile because the armadillo project is a lot more developed :) But yes, I don't see it being much of a difference outside of possible zircon being used as servers. Currently zircon is absolutely puny, and since the plans are to keep it that way, it might be great for containers making .net even better for microservices, but would add even more work for CoreRT. Would be nice if we could get golang sized containers using zircon with .net :). The startup times / size could mean .net would finally have a breakthrough in serverless architecture as well.
If you’re used to the full VS experience on windows why not stick to it and deploy on linux from windows when testing?
i prefer to dev on the machine the code will run on, i find it gives me less headaches
Did you even read the benchmarks earlier? The one where c# got significantly more requests per second than nodejs? You know, there for uses less resources per request ergo less overhead? Oh that's right, you didn't, because that would require opening your eyes. Did you bother to read go's docs? "Cyclic data structures are not supported; they will cause Marshal to go into an infinite loop." https://blog.golang.org/json-and-go So yes, go also faces infinite loop issues with serialization - because that's actually not even a language issue (unless you propose a language without the ability to have a cyclic data structure). Any rational developer would instantly realize this fact! Any other rediculous, easily disprovable claims you would like to make?
How does it work under the hood?
Could you post the code?
Something is corrupt. Quick fix, try it on a different machine, or build a VM and try it there. &amp;#x200B; If you're two weeks behind schedule, talk to the people who manage this stuff. It's a bit embarrassing, but knowing stuff up front beats not knowing stuff later. You're not being well managed and that's not your fault, but you can help fix the situation by managing them.
Look into SignalR. It's a very simple solution for multiple clients with a single server.
 [https://pastebin.com/3F9YpyKk](https://pastebin.com/3F9YpyKk) Here it is
That's pretty simple : on the server side, you keep an array of the connected sockets. You use threads (or maybe async ? Not familiar with this) to listen all sockets. A client send a message, the server receive and send it to all others clients. FIY, last time I did that I used a poolthread. That's an handy way to create many threads, and manage/close them.
Definitely will. Thanks :)
Yeah, but i have problems receiving the data on the server
Great question. I will add a diagram to the website showing the inner-workings. In the meantime: A big part of the magic takes place in **Mono for WebAssembly** which you can read our take about [here](https://www.lesarde.com/monowasm). In a nutshell, it enables true .NET Standard apps to run in browser, thanks to WebAssembly. .NET Standard *does not include UI* so that's what Frogui adds. The views you create are managed within your C# app, are piped through our visual tree optimizer, and finally output to the browser's DOM. I hope that answers your question and will happily elaborate if you'd like more information!
Thank you I am very curious about the UI part. Does your process looks something like react? Xaml =&gt; virtual dom =&gt; dom?
VSCode or Rider, probably.
Flights do not work well with my experience. I've had success with sideloading for testing, and publishing to the store for production.
Yes. You can schedule jobs using CRON syntax, as well as at intervals. See https://docs.hangfire.io/en/latest/background-methods/performing-recurrent-tasks.html
I think I am going to go to Google analytics route oh, and I have been looking at just using ga events. Do I need GTM? What's a trigger for tags exactly?
Google tag manager. If your buttons are just links to another page you can just count views where the referring page is the page with the buttons. If the buttons do other things you will want to set up a tag/trigger within gtm to capture the event. It's basically just a set of rules that when met record an event in Google analytics.
Awesome! Thanks.
So I could add classes to all the buttons I want to track and then GTM attached the handlers and records it?
There are definitely similarities...and differences. If you take a look at the Frogui \[element class hierarchy\]([https://www.lesarde.com/element-class-hierarchy](https://www.lesarde.com/element-class-hierarchy)) you will see something that resembles WPF elements much more than HTML elements. So in many cases there is no direct mapping of a Frogui element to an HTML element; a complex transformation and optimization takes place behind the scenes. This is significantly different from react, a framework that is designed to correspond directly to HTML. That said, similar to react there is a virtualized *visual tree* in Frogui that is directly manipulated by you, the developer. It's not a "Virtual DOM tree" because it in no way resembles the DOM (as noted above). Also like react, changes to the actual DOM are done in an optimized way to minimize DOM grinding. Please let me know if this doesn't completely satisfy your curiosity!
Did a quick search for Culture in my project directory (because "Culture is not supported." and "x86 is an invalid culture ") and I found it in the Resources.resx and AssemblyInfo.cs. Drop your project sources in to a text editor and check to see if there is anywhere culture may be getting assigned to x86.
I am not aware of .NET Core being on any mobile platform that ships an actual phone unless Samsung has is selling a Tizen phone somewhere
Have you read Reddit's rules on self promotion?
Thank you for your prompt reply.
It's enough I am curious about the high level architecture anyway sounds easier said than done. Ambitious project I hope you succeed :) one last question does frogui interoperate with external js/html?
Fuchsia will support Android Apps from the start -&gt; and with that Xamarin Apps (running on mono). All your code living in .NET Standard Libraries will work with it.
Not sure if you can track by class but yes thats the general idea.
Glad it helped. Regarding working with external js/html, in this release the **HtmlBlock** element was introduced to allow js/html to be injected *as-is* into the DOM. This helps with some scenarios but not all. There is a lot of legacy js/html code out there so adding features to allow developers to work with such assets is of paramount importance. Feel free to share any specific scenarios and I'll use that to drive the feature set.
Vs code
I'm not sure if something has changed recently but from my experience you have to write some additional code when tracking exit clicks (that's everything if you're using postbacks). When you send an event to GTM, it makes an XHR request to gtm which determines the "tag" to serve (which is just a script block). That script then needs to execute on the client which usually makes a separate XHR call to Google analytics to track the event. All this happens in parrell to your buttons default behavior, the chances of the event being logged before the page is destroyed is low. It's a race condition. So from memory you need to write some kind of wrapper to prevent default on the target links+buttons, then when event fires trigger the real action. GTM might ship with some kind of callback system to handle this. Obviously this will slow down your app. It might be better to prevent default and call the ga event tracking directly to reduce the number of async calls.
Save threading support until after you get your code working - you don't need threads to communicate on multiple sockets. Threads will complicate your code, and it's possible threads are overkill for your use case.
Looks quite fancy but might be a total overkill for my application. However I am quite sure I‘ve seen this namespace before. Need to look into whether that‘ll make things easier or not. I am a big fan of not reinventing the wheel but sometimes nuget packages come with quite some bulkiness. Especially sophisticated stuff as those almighty extensions. Thanks for the hint.
I think the MSBuild targets files have gotten mismatched or possibly corrupted. It's possible that could survive a visual studio re-install, because some of them are not part of VS, but MSBuild, .net SDK, or other possible sources. I'm not too sure how to go about trouble-shooting these kinds of issues. If I were faced with this kind of thing, I might opt to wipe the drive and re-build, certainly before two weeks had elapsed.
Show some code and I think you'll get some answers. Nobody wants to do your work for you.
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/
For SQL details, You have more way to adopt industry-standard. This article just the basic steps and for the beginner. Thanks anyway!
Edited, thanks!
Where are you going to college? I wish the intern pool we get people from had this type of instruction.
Okay, at least I will update as your advice for the source code on GitHub. Thanks!
Thanks for the suggestions. Edited.
Same. I never got exposed to interface in school.
Really? I'm in AP computer science in high school and we covered interfaces
I'm going to an online school called Grantham.
How to I do this with Microsoft Visual Studio?
So far my book talks about the interface in 3 paragraphs but doesn't give an example of how to make it.
waiting on you, corert, to finally actually ship so we can be native everywhere
I found this one on **Miguel Github .** [https://github.com/migueldeicaza/FuchsiaSharp](https://github.com/migueldeicaza/FuchsiaSharp) FuchsiaSharp This project is intended to allow .NET to access Fuchsia services and APIs. The components are licensed under the same terms as the underlying technology they are binding in Fuchsia. For example ZirconSharp is under the BSD license.
All I got was a basic VB.NET course that pretty much stopped at conditionals and loops and a SQL course that focused on Access. I pretty much had to learn everything on my own.
Sure thing. An interface is essentially a fully abstract class. You define an interface as a contract with the compiler to know that any class that implements it will have certain methods. Let's think of an example. Vehicles come in many shapes and sizes. A submarine is so different from a car that it does not make much sense to inherit from a single parent class. But both vehicles would implement a .Move() and .Steer() method. So you can guarantee that if an object is an IVehicle, you can use .Move() and .Steer() To implement an interface in C#: IVehicle { void Move(); void Steer(int turn); } class Car : IVehicle { void Move() { position.Advance(speed, dir); speed -= roadFriction; } void Steer(int n) { dir += n; } void ChangeTires() { ... } } And then you can call it like this: Vehicle vehicle = new Car(); vehicle.Steer(5); vehicle.Move();
That is surprising. I would expect any 100 level class to cover OOP fundamentals as a requirement
After the inheritance, type ", iCup" and visual studio should tell you what to do
you just need the runtime and sdk (compilers, etc..) to work on the kernel and everything else .net should thne run
It looks like you're confused about what an interface is. It's kind of like an abstract class. It forces a class to have specific things that the interface specifies. To have it in a class, type ", ICup" after the inheritance declaration, and right click it for visual studio to force the class to adhere to the interface.
If your you want to try with websockets instead of tcp there's a library called web socket sharp that's easy to use. You just need to set up a client listener thread to accept multiple clients. TcpListener.AcceptClient(). I'm pretty sure there's an async one as well.
Probably not something that’d actually be a great guide, but feel free to take a look at my open source project I’m working on with SignalR, might help you a little? https://github.com/ldtteam/chatchain
"Draw a UML diagram" does not mean "write some code"
The new [NavigationView](https://docs.microsoft.com/en-us/windows/uwp/design/controls-and-patterns/navigationview) offers a slightly more tab-like experience that works nicer with Mouse and Keyboard.
You need some method of listening to multiple clients at the same time. Threads are one way to do this. There are other ways, like socket select, async, SocketAsyncEventArgs, etc, but they aren't generally any simpler. Most of them require more detailed knowledge but give you higher performance when you have a lot of clients. I would get it working with threads before using anything else. Start with a loop that accepts connections, saves them to a list and create a thread for each accepted connection, then immediately continues the loop to accept the next connection. In each thread, read from the socket. When you get data, send it to all clients. This is just an echo server with threading added.
Microsoft will need to update JIT to run there.
I used vscode with dotnet core for a while but ended up switching back to Rider (still with dotnet core) because vscode refused after a while of use to actually display the output when I start debugging so I always would have to start the terminal to launch the .dll file
What the Fuchsia is that OS?
You create a new timer every time. So the old one fires and set it to true. While the new one will too. Have one time running all the time instead
And use start/stop on that one timer
Thanks, I will take a look once it's solved. thank you:)
So, how would you go in my case?
Ofcourse not. Its how you put something out. Console logging can be used as method of debugging or testing. Its just the beginning and there is a way bigger world.
Just two things I found of issue: 31 - string.IsNullOrEmpty(str); or for evaluating form contents, string.IsNullOrWhiteSpace(str) 34 - imploring to avoid recursion at all costs demonstrates a severe ignorance of recursion. It has its place, and it is a very good place to be when it is needed.
Would it be possible to make a method specifically for a timer and just send the value of time you want it to have when you call it?
A few that come to mind are console applications, like you have mentioned, applications that have a GUI, service applications that run in the background and web applications.
No, you can use C# to create full applications with a rich and modern UI. The C# you need to learn depends on what kind of app you want to make. Mobile? Web? Desktop? Game? They all build off of what you are learning now. However, you will find over time C# is often used in conjunction with a mark up language such as HTML (for web apps) and these markup languages are what’s used to define what the UI looks like and C# is used to define how the application behaves. Don’t be discouraged if you fine tutorials that use XAML, HTML, AXML, etc. most modern languages use markup to define their UI (why is a much larger topic). Good link with your learning!
Why not record the timestamp of the last command and ignore commands until it's at least 10 seconds old. No need for a timer. Simple if check.
You’re just starting out. I presume the tutorials are just showing you the fundamentals of the language. C# is a very powerful language and yes you can actually make a calculator with a proper GUI along with many other cool projects. Try looking at Windows Presentation Foundation (WPF) tutorials if you want to make GUI applications, there are plenty online.
Thanks for the reply! I taught myself HTML/CSS YEARS ago so it's good to know that I will be able to use that at some point. I'll have to relearn it since I never knew how to develop backend to actually make a site with it.
Are you using visual studio? Easiest way to play around with a GUI would be to create a Windows Forms project and drag some widgets on it.
Is making GUI/WPF stuff drastically different from C#, or does it just allow c# to be used in a different way? Sorry if that sounds stupid lol. I came to c# after learning html/css basics. And those two languages just make it easy to understand what can be done since they are very visual to me lol.
WPF usually uses an additional markup language called XAML, but when you have to bind functions to your UI you can use C#
No you are learning. None of the questions you are asking are stupid. C# development with a GUI will be pretty straightforward. Literally a GUI called Form.Design.cs will be like a drag and drop editor for buttons and text boxes etc. That'll call out to a file called Form.cs where each button calls a Method in that Form.cs class. That's a super basic example, but it's very intuitive after looking at a youtube tutorial for WPF GUI programming.
If you are using Windows you can download Visual Studio Community for free. It has easy starter templates, you can create a Web site in 5 minutes. If you have some other OS you can search för tutorials about ASP.NET Core MVC If you want to create a desktop application Windows is easier, search for WPF.
I am using visual studio. I will have a look at that after I finish up this tutorial I'm working on atm (it's 4 hours long). xD
I wouldn't say that it's such a drastical change but it's definitely different. As there was said above. Most of the UI is done using some kind of markup language like HTML or XML. However you can most of the times write the UI also in plain C# but using separate language for it is much more used. You would then use C# to connect to these elements you defined using let's say XML and will implement it's behaviour.
Apart from the console application, c# can be used to make UI applications (in visual studio), web applications, mobile applications and also games (using the unity engine).
For an initial attempt, I would probably follow something similar to Node.js's "event loop" architecture. Maintain a set of sockets and bind various events. Run your application in a loop, and respond to events as they occur. These events would include handling new connections, handling disconnects, reading socket data, etc. Your application life cycle would handle sending data between all connected sockets. You can do all this without threads, and C# provides a mechanism that will allow your application to continue unabated while it's also working on "data" tasks, like reading bytes; this mechanism is called `async` and is handled in .NET with `Task`. Interesting bit of trivia - this async mechanism, behind the scenes, is the same mechanism used in Node.js. Now, all that said, you can even do this without events and without tasks. Your application could simply loop on all connected sockets, poll sockets for their state, read data if there is data to be read, send data to other sockets, and continue in this fashion until you hit throughput limitations - this method will stall when there is a lot of data flying around, but it will work fine for smaller workloads.
In the most simplest terms, WPF is a subset of the .NET framework. You can use Visual Basic (VB) or C# to create WPF projects. So to answer your question, yes, using WPF allows you take advantage of C# whilst implementing a user interface. It is not drastically different, you’re just adding additional functionality to your project. WPF projects are primarily used for desktop applications. There are some great tutorials on YouTube that explain it a lot better than I can, I highly recommend you take a look at some of those. Furthermore if you’re interested in using HTML/CSS/JavaScript as a user interface/GUI for your project, I would highly recommend taking a look at ASP.NET MVC. These types of projects allow you to create websites with basic front end infrastructure and use C# (or VB) in the back end. I hope that answers your question.
That is console application. If you use Windows/Web form, you will be able to make a whole GUI.
You would have had to have relearnt everything other than the absolute fundamentals of HTML and CSS anyway, front end work changes every year. If it's just a personal pet project you can do it the oldschool way with plain javascript, but if your objective is to learn you should at a minimum be picking up a frontend framework like Vue / React / Angular. Vue is the newest flavour of the month, React, before that, and Angular before that. All are still highly active in the industry.
Check this out (just happened to be watching this before I read your post) https://youtu.be/0RfUPr0KrSM
Although console applications are not the most “fun looking” of what you can create in c# they are a under appreciated piece of magic! Most of the time you are taking a real world problem and may not even need w pretty gui! I find myself creating little console applications all the time, where I have no interest in making it attractive for the user(in most cases there isn’t even a user running it, it’s a scheduled task on a server, or a utility app for me/my team) I simply want to execute it, do some heavy lifting and then for it to close. Some of the things I have used console applications for recently: Query SQL, do some calculations on the results and send an email every 20 mins with the results, this is used for monitoring, the “GUI” for me is the email in my users inbox! Watch a directory for new XML files, upon finding one transform it to the schema I want and load it into SQL. Simple little 2-3hour integration utility which may run for 6 months, or may be thrown away in a week. No point wasting my time with w pretty gui! Console apps are fun! And there is something really nice about not having to worry about advanced stuff which comes with GUI applications like MVVM and even stuff like doing heavy lifting on the UI thread and locking it up the GUI. Do worry about how it looks, learn the language and it’s powerful features. Make mistakes, learn from them and do it again. Most of all have fun! C# is a good language to develop in!
My other app (I actually have two others but the one I have in mind) is a StarCraft II unit info app (I had plans to be much more but then MS killed the phone). Skipping the part where it is not very useful on the desktop I am still very proud how good it looks with the metro principles. I suck at design and I can't imagine achieving something that looks this great with the hamburger stuff. Maybe someday I will port especially if I can port to Android and iOS by sharing code but I have really lost motivation now. The NavigationView looks powerful but desktop centric.
This...UI is fun when you're starting but console apps let you focus on learning the language not the tools and problem solving. I've seen too many people want to jump straight to games, download unity and get stuck as soon as they're not following a tutorial. And they never learn any of the fundamentals.
[https://www.youtube.com/watch?v=Is1EHXFhEe4](https://www.youtube.com/watch?v=Is1EHXFhEe4)
&gt; Is this true for most of C#? Not at all. C# is a language, .NET is a wide framework, you can use it for many many things. Tutorials tends to stick to console screen because it is easy to understand mostly because it is linear, compared to GUI's message-event based invokings. &amp;#x200B; C# can be used for almost whatever you want, a few examples: * Console applications as you already know * Windows GUI applications (WinForms are part of the old .NET Framework and will be a new version for .NET Core 3, WPF is the "new generation WinForm" still part of the Framework itself, no external library required). * Games, Unity3D uses C# scripting layer, but you could even write your own engine too, if you use either Wrappers, or native interop with C libraries, like Vulkan. * Webpages, Web APIs with [ASP.NET](https://ASP.NET) WCF. Powerful tool, you could even merge HTTP with C# code just like you would do with PHP. * Windows Service * Your own framework &amp;#x200B; And of course, you there are many other tool, that even has a template in Visual Studio for C#. There are some folk who even made a bootable micro-kernel in C#.
I used "Pro C# 5.0 and the .NET 4.5 Framework 6th Ed" to teach myself C#. &amp;#x200B; I'm pretty sure there are [newer editions](https://www.amazon.com/Pro-NET-Core-Andrew-Troelsen/dp/1484230175) now, but the content will be mostly the same, specially at beginner levels.
Hmmm... So in the first paragraph, You mean like methods e.g. OnConnect() or DisconnectHandler()? In your second paragraph, I don't get the: &gt; Your application could simply loop on all connected sockets, poll sockets for their state, read data if there is data to be read, send data to other sockets, and continue in this fashion until you hit throughput limitations the ''could simply loop on all connected sockets, poll their states '' I'm sorry, i don't have a very good English so i don't get it.
Bob Tabor has a couple of great C# intro classes that utilize ASP.NET. You're basically building simple websites.
&gt; Hmmm... So in the first paragraph, You mean like methods e.g. OnConnect() or DisconnectHandler()? That could be part of it, yes. You might also have events for when you can read data from a socket. &gt; the "could simply loop on all connected sockets, poll their states" Essentially, you loop and do something similar to [poll](http://man7.org/linux/man-pages/man2/poll.2.html) to see if a socket is ready to have data read. If it is, you read the data and do something, then move onto the next socket and do the same thing. Your application workflow is essentially just doing: 1. Check socket n 2. Read data from n 3. Send data 4. Loop
I've just finished a new project using the Blazor 'Full Stack' option, which I think is new as part of VS2019's Net Core 3.0 Preview templates. As the name implies, it's client-side and server-side Blazor together, though to be honest it feels more like client-side, just with WebAPI functionality added out of the box. One new thing I've noticed is that server calls do not need to return `IActionResult`, they can just return the exact thing you need. For example: `public IEnumerable&lt;City&gt; GetCities` `{` `return db.Cities;` `}` Client-side you would call `/api/controller/GetCities` as normal. I don't think this is specific to Blazor though. &amp;#x200B; The main downside to client-side Blazor is that currently the website is 20MB, which is WAY TOO BIG, but the Blazor team claim this can and will be made vastly smaller in due course. The upside is that page logic and production time is all way faster to implement. The website I've just made was originally a React project. Each page of the React version had reams of code to do everything -- `fetch` calls, `array.map`, `array.filter` , etc etc, and ugly ternary operator cases, just to make sure the correct stuff rendered on the page. It took about a week to make. To compare, Blazor let me finish everything in about two days, with vastly less code and nice easy `if/else` statements and `try/catch` blocks nestled within the HTML mark-up. A huge bonus is this C# logic can now exist readily on the client side, and is the main reason for coding and production time being so greatly reduced. One other bonus is that you can share classes between the server and client side code project. In React, I had to make a Typescript duplicate of every class I was using. Blazor eliminates this need. I'm going to keep going with the client-side way of doing things, simply because that's what Blazor is advertised as being for. The idea for web development in the long run is to get as much stuff as possible happening on the client side.
[https://www.reddit.com/r/outofmemorygame/comments/bj0r0f/discussion\_types\_of\_the\_app/](https://www.reddit.com/r/outofmemorygame/comments/bj0r0f/discussion_types_of_the_app/) \- feel invited to the first discussion :)
You're exposing too much information given you have an NDA. That's not technically helpful, but I'd prefer you to remain contractually safe.
Thanks for your concern. Let's call it a lose NDA instead.
:)
Almost every Linux user uses the console as a calculator. Console apps are still very commonly used, what you are learning is far from useless. If you want a real world example, check out git.
&gt;Check socket n Check? Like if the socket has data to read?
There are various ways to insert information into already compiled executables, although I don't think there are any built-in solutions .NET. I've used Mono.Cecil in the past to insert resources into managed assemblies, which can then be read at run time just like any other resource. I don't remember the details, but I assume a quick search will bring up relevant code samples. I'm not familiar with its intricacies, but ClickOnce will probably be a little bit trickier since the packages are cryptographically signed and editing files should invalidate the signatures. I'm just spitballing, but you may have to use the MSBuild command line to (locally) "publish" the project after making the changes to generate a new valid package. You'd probably have to somehow ensure that the edited version is run at least once before it is updated from the centrally published source so it can persist its customized data somewhere.
 &gt;1. Check socket n &gt; &gt;2. Read data from n &gt; &gt;3. Send data &gt; &gt;4. Loop I do these, the main problem is that i receive data only from one client. The first to connect, to be precise.
Something Google are cooking to potentially replace Android
Reflection is powerful tool that allows you to use metadata of your code For example: Let's say you're overriding ``OnModelCreating`` method of your database context You want to apply many, many configurations like this one: builder .HasKey(bc =&gt; new { bc.SomeId, bc.Some2Id }); builder .HasOne(bc =&gt; bc.Some) .WithMany(b =&gt; b.SomeSome2) .HasForeignKey(bc =&gt; bc.SomeId); builder .HasOne(bc =&gt; bc.Some2) .WithMany(c =&gt; c.SomeSome2) .HasForeignKey(bc =&gt; bc.Some2Id); but you want to avoid houndreds of lines of code that would be hard to maintain You decide to separate configuration of every class to different files e.g ``SomeDatabaseConfiguration`` Ok, everything looks nice but now you gotta to perform something like that: ``builder.ApplyConfiguration(new SomeDatabaseConfiguration());`` on every your configuration - if there's 20 configurations, then you gotta do it 20 times. With reflection you can do something like that (code from SO) var typesToRegister = Assembly .GetExecutingAssembly() .GetTypes() .Where(t =&gt; t.GetInterfaces() .Any(gi =&gt; gi.IsGenericType &amp;&amp; gi.GetGenericTypeDefinition() == typeof(IEntityTypeConfiguration&lt;&gt;))) .ToList(); foreach (var type in typesToRegister) { dynamic configurationInstance = Activator.CreateInstance(type); builder.ApplyConfiguration(configurationInstance); }
No book. Online courses are better.
The same output can be outputted to form elements and other gui elements very easily. All you learn doing in command line you can do in GUI. Good luck, C# is damn amazing and very popular in the job market right now.
reflection allows you load/use types dynamically, simplest to grasp use case would be serialization. For example you can do a method that reads all string properties of ANY class and writes content to text file. You can use it to generate classes programatically. Best example would be auto proxy, you can write server part of software and then write auto proxy factory which implements the same interface client side. it's super interesting but definitely way too advenced for a rookie. I also doubt it will be of any use in unity so my advice would be to stay away from it for now
1) file can be uploaded to server - possible 2) server can execute command which will extract your data - possible 3) server can recompile sources - possible 4) server can return file to you - possible But I don't think it can be done "instantly" I mean guy uploads a file and then in some time in the future there'll appear link on his screen to that .exe.
Thank you kindly! It took me a while to understand the code but since I understood it at the end, maybe I understood reflection bit better!
I wanted to add to the other posts, about *why* you're learning about this "black commandline box". The answer is simple: it's because console applications contain nothing at all except for logic and control flow. And since near enough all programming is based on logic and control flow (what I mean by that is methods, if statements, loops, variables, etc), you need to learn those things first. If we taught graphical stuff from the start, there would be a whole load of stuff going on that's *not* logic, which would distract you from the learning the logic. So - learn the basics by using console applications. Once you've got console applications sorted then learn Windows Forms for an introduction to graphical stuff (Windows Forms is an easy way to get started with "desktop applications" - it's still used in the real world for simple applications although there are better things for more complex probgrams), and then you can decide whether to move on to web programming, or WPF, or Xamarin, or something else. But whatever you choose to use, you're always going to be making use of the fundamental programming techniques you learnt by doing console applications.
Your tutorial is showing you the basics of the basics. It's easier to see output in a console (The black box). Later on you'll go onto WinForm stuff (Actual calculator UI) and then onto WPF (Prettier calculator UI)
Thank you! I am, indeed, a rookie. As such what should I do to get better? I read the yellow book suggested in the reddit sidebar and made many exercies to practice along the way... But now? How does a programmer improve? Do I read the Microsoft references online? Are there other good books which introduce me to advanced topics? Can you give me a few resources to use?
The latest edition of Jon Skeet' s [C# in Depth](https://www.manning.com/books/c-sharp-in-depth-fourth-edition) has just been released. Highly recommended although it's not really a reference book.
 I'd go with windows forms first. WPF has some learnin curve to it unlike windows form which is really you should be able to figure how things work just by playing with the editor
The best way to improve is to just code. You will then encounter problems that you will need to solve that you won't find in any books or conferences, because there is just an infinite amount of them. Google and Stackoverflow will then be your friends to guide you on how to solve your problems. Just jump in your project idea and you will learn so much more than by trying to prepare yourself before coding. Good luck!
You are creating a new timer each time. Instead call new Timer only once. You check if the botTimer is null and if it is create a new instance by calling new Timer
You can put the information into the exe.config and bundle it together with the exe file.
"If the answer is reflection, the question is wrong". It's not strictly true, but it's a good way to think about it. In most day to day programming, you won't be using much reflection. In many cases, there is a better tool. Reflection allows meta programming. Or programming about your program. There are a few cases in games where it could come in handy. The most obvious is something like the unity inspector. The inspector uses reflection to see the various members of your class, and set initial values for them. I've seen a good UI set up for a construction game that used reflection to build the UI at runtime. It's also useful for loading code mods at runtime.
Learning design and layout and graphics is useful to learn but it will absolutely take a ton of time away from learning C# itself.
You can treat WPF like forms by staying in the designer. The only reason it looks different is because the xaml is open by default. Just close it.
Lots of useful stuff are just commandline tools. Tools for changing things in Windows and its services are just console apps. If you make a dotnet core app you use the dotnet.exe commandline app. I really do recommend you check out .NET Core tutorials as you will get familiar with how to use PowerShell and the usefulness of console apps.
Please learn WPF instead. I can't believe Forms is still being recommended. It's not just the technology itself, the way you learn how to write code in those apps is considered legacy.
I think you're in a good spot then. C#+HTML+CSS+JavaScript is a really good suite of languages to know. Keep an ear out for the phrase "progressive web apps" (PWAs), particularly next week.
WPF requires async and you have to work against interfaces. If your goal is to learn how to make a calculator that's a lot of prerequisites you need to wrap your head around for very little practical benefit. I wouldn't suggest going deep on WinForms, but it's fine as a tool for small applications and learning the basics of GUI development.
Is there anything major happening next week for progressive web apps?
You can use it, but keep in mind that reflection is slow, so doing it every frame slows down practically anything, it's much better suited for "loading screen" things.
It depends on your level of understanding of . Net framework. One book I would highly recommend once you have decent understanding of. Net framework is 'Clr via c#'.
I'm expecting MS and Google to push them a bit during their conferences. Right now Microsoft has [111 sessions](https://mybuild.techcommunity.microsoft.com/sessions?t=%257B%2522from%2522%253A%25222019-05-06T08%253A00%253A00-07%253A00%2522%252C%2522to%2522%253A%25222019-05-08T19%253A31%253A00-07%253A00%2522%257D&amp;q=Progressive%2520web%2520apps) tagged with "progressive web apps."
Agreed came looking for crypography. In context, this subreddit specifically, it means crypto-graphy not cyrpto-currency.
"WPF requires async" is a statement that demands examples because it doesn't make much sense by itself. There's absolutely nothing WPF introduces to a beginner learning C# that is more confusing than Forms. Drag-drop a Button, double-click the button to generate an eventhandler and get navigated to the code-behind. If the goal is to give them an easy introduction by hiding the XAML that's an option.
I second this solution, its efficient and concise :)
I stand corrected.
Honestly read the MSN docs about C#!
This seems like another one of those things Google creates to replace an existing product that it later abandons.
A lot of great answers here already, but wanted to add my personal/professional use case. I have used C# at work along with Javascript, CSS, HTML to build web applications. Mainly things like custom shopping carts for complex event registrations (conferences) and student tuition systems. This web side was first ASP.NET web forms, and now all MVC. So in general, very little command line box stuff. But recently I've started needing to do a lot of custom data migrations - pulling finance transactions from legacy SQL systems to backfill my new 'cloud apps' with data storage in AWS Dynamo DB. There's no use in making a pretty 'web site' for these boring (yet complex) data sync tasks. So they're all done in Console Apps - with a ton of Trace.WriteLines and logging. Then these run once to backfill my new application with years of history, and then on a timer via a windows schedule task. Sometimes when a small group of business users need to manage some data kept behind the scenes and I need a quick UI for a desktop (vs a full blown web app, which needs hosting and security) I'll do it as a Windows Form application. It's really nice to have the ability to clone working concepts and my skills between a number of formats.
The thing is quite a bit of the tooling has been improved relatively recently, so the people who weren't interested in WPF 10 years ago won't be aware that it's has become acceptable. Blend comes installed with Visual Studio so there's already free, dedicated WPF design software available.
If you want a calculator that looks like a calculator, you will have a build it. Its not going to magically appear as a calculator. It prints to command line (console) cause that's what you're telling the computer to do. Console.WriteLine.
All programs will have some terminal output for the most part. You’ve not created a UI. How’d you expect it would look like a calculator?
Not sure I would recommend this. It's a really interesting read, but it requires a lot of prerequisite knowledge about C# to understand a lot of things.
I am reading this now and it's great. For a complete beginner there are some things you'll need to google but it's pretty accessible. I also recommend the new edition of Clean Code. Examples are JavaScript but it's a great book.
A great book for reference is C# In A Nutshell
I think the most obvious case is serialization without having to write it yourself.
like BLAZORRRRR!!!! ^((sorry im so excited...))
&gt;How does a programmer improve? Practice practice practice. Keep learning, keep reflecting on your own code and knowledge, always be open to suggestions from others, try to understand their viewpoint/intention, don't just follow others advice/practice. Stuff like that. It's important to remember that software development is full of opinions stated as facts and different solutions to the same problem. There's rarely the one right solution, no matter how many people will try to tell you the opposite
Thanks for the nudge! While I rarely have a need to make a Windows app, doing so does feel a bit like access development vs 'real development' and likely closer to something like an Android app. Going to give it a try.
Maybe. We will see. The plan seems sound. They are creating the OS and cross platform app tooling based on Dart so they will amass native apps while devs build for iOS and Android.
The scheme they are talking about is what happens when you have an asterisk for your build number and no patch given. It's the default behavior for assemblyinfo since forever
For something security critical like remoting he hopefully hopefully hopefully is using code signing already, which makes everything more difficult already.
Hah, I just signed up for a blazor session. This seems pretty cool. 😊
Embedding resources like /u/tweq suggested is probably the best option. Another (probably easier) option would be to use something like a self-extracting and starting archive, which just wraps your executable and a configuration file.
Woah cool thanks. I'll keep an eye open for it. Progressive web app really looks like the future
Yes, I know, and it's a terrible default, and doesn't match the semver spec.
As the other two already said, the best way is just to code, but I'm going to give you some tips on what to focus on. First thing is, work on figuring out how to simplify your code so that it makes things more readable and obvious as to what is going on. This often means encapsulating a processes into a method with a descriptive name, or a group of methods into a class. Always try to split up your code into bite sized pieces. It often makes it easier to think of the logic of what is going on leading to fewer bugs and mistakes. Get familiar with common coding patterns such as chain of responsibility, and keep a look out for ways to use them. Using such patterns will often result in my first point happening. While you are learning them take note of situations that they are more commonly useful. For example, chain of responsibility is most often used for data validation or filtering of data. By remembering these common uses it'll be easier to spot situations the should be used in. With game design especially, focus on getting the right balance of inheritance and composition. When you are first learning it is all about inheritance, but as you get more experience you'll come across those who say only use composition. They are wrong, you want to use both, but finding that right balance can be difficult. Finally, don't be dogmatic. You should always use "pure" functions whenever possible, but don't be dogmatic about it. Usually the most straightforward approach is the best approach.
The reason I said something is because the context of your comment makes it appear like you are levying this criticism on the author.
To elaborate on this further, the reason you have two different languages is a concept called "separation of concerns". Although C# is an amazing language, it's not very good when it comes to defining UIs without massive amounts of code. XAML is the language used currently in Windows desktop programming and pairs with C# to provide a UI markup to C#'s logic. Much like HTML pairs with JavaScript to provide a UI for the JavaScript logic.
There are too many issues with Android now. Java/Android lawsuits are ongoing with Oracle. If they 'win' some time in the future, this will cost Google money to keep Java on the device. They will pass this costs to the devs, I'm sure about that. The minuscle control you have if you allow an app on an Android device is stunning. The whole system can't made really secure for a normal person. I'm practically monthly updating my Android phone because of so many fixes needed. When Google revealed that they got Bill Levinson, who basically was the department lead for Apples whole OS range for 15 years, it was clear that something serious is happening. Fuchsia is Googles bet to keep them ahead of the curve. Porting C# shouldn't be a big issue because they would like to have anything on it, *but* Java.
Theres a lot of information to sort through here so I apologize if I repeat anything. C# calls the command line box a Console Application! If you havent already, go get Visual Studio (VS). there is a free version for anyone with a Microsoft account, and it's so much better than trying to code in a Notepad or something. (I apologize if the working world hates VS, I only know what my college classes have let me use IDE wise.) VS handles syntax for you, and color codes variables and classes. When you create a C# file in VS, you have to choose the kind of file! If you select Console Application, everything is done in a command window like you mentioned. If you want to mess around with GUIs, you can create a C# file that's called a Windows Form. I think .NET is in parenthesis next to it. Regardless, VS will create the GUI for you, and you can literally drag and drop buttons, labels, list, etc into the GUI to create it, and VS will do all the coding for you to actually create them. You still have to code into them what they actually do. If you do this, there is no Console (black box) created, the windows form appears instead when you run the program.
Removed: Rule 4. Depending on the features used, some Unity tutorials can be adapted for other platforms. At minimum, you'll need to include the platform you're programming against (e.g., WPF, WinForms, MonoGame) as "using Visual Studio 2017" doesn't mean much here. Ideally, you'll want to make an attempt first and provide the code of it.
Reflection can be useful for providing plugins, so your main program might only provide the core functionality and your users can 'plugin' extended functionality at runtime. You can use reflection to discover plugins, validate that they meet certain requirements and dynamically invoke methods of the plugin. You don't need to know any specifics about the plugin other than the fact that it implements a specific interface (as defined by you). &amp;#x200B; For instance, I work on a product which has bastardised nuget to allow certain users to deploy nuget packages to a custom nuget server, the package is inspected and if it contains an implementation of our plugin interface then it is extracted, validated, indexed and made available for use in our front end.
We didn't cover the vital pillars of OOP in my university until the end of the 2000 series coding classes, (end of sophomore year for most) the "first" coding class was literally just flowcharts and I think thats absolutely stupid, but maybe I'm just not a visual learner.
Right now you're just learning how to write some simple commands to make sure you know how to use the words you're learning. Eventually you'll learn how to go beyond the console. Even people experienced with multiple languages still go back to console when learning a new one. If you're curious about how the code for the calculator's window is, I think there is actual code out there recreating it, but at this point I don't believe you'll understand much of it .
I'm not aware of this specific library, what does IronPython not support? &amp;#x200B; The IronPython engine allows you set the search paths, which is where it will look for any imports.
Check out info on MCV applications. VS has templates to create them. I'd highly recommend learning as much logic in the command like as possible. Getting caught up in front end will take you away from learning backend before you really have a good understanding if you jump over too quickly. [https://www.tutorialspoint.com/mvc\_framework/mvc\_framework\_introduction.htm](https://www.tutorialspoint.com/mvc_framework/mvc_framework_introduction.htm)
I also want to piggyback on the excellent answer in the parent. Most C# code that does something doesn't really need a UI at all. In the end you usually want a function that takes specific data, does work with it, and returns a result. We have to learn command-line or GUI frameworks at least a little so we can make sure we're getting what we want out of those functions, but the functions are the most important part! After you can reliably write those functions, you can move on to more advanced UI cases. You might be surprised to hear most applications with graphical interfaces today are written like 3 completely different applications: 1. The "logic" that does the "real" work. 2. The GUI that displays data. 3. "Glue" code that interacts between (1) and (2). For example, I bet your command-line calculator app worked like this: * Read a line of input from the user. * Read a second line of input from the user. * Convert the input to numbers and add them. * Display the result. This actually has all three of the above pieces! It breaks down like this: * Your UI for the first bits are "read two lines". If this was a GUI app, you'd have two text boxes (or in HTML, two `input` elements.) * The "logic", whether you implement it this way or not, is a function with definition `int Add(int left, int right)`. It adds two numbers and returns the result. * The "glue" in this case is noting you can only get input from the user in the form of a `string`, and in order to call `Add()` you have to convert those `string` values to `int` values. Every. Single. App. Is made of those three concepts. I feel like the "glue" is the hardest part to get right, and is usually the most complicated code in the system. You can easily test "logic" when it's separated. It's also really easy to design "UI" when you know what the data looks like. But how you choose to implement your "glue" can impact either of those two things, and you shouldn't let it. Glue is supposed to be ugly! Anyway, that's why you're starting with console apps. Setting up the UI and glue for even this simple calculator requires you to learn quite a few more concepts, since the two biggest UI frameworks for .NET require you to understand both Event-Driven Programming and/or Data Binding. You'll get there!
C# is just a programming language, much like JavaScript (ECMAScript). What the code does, what it can do and how is the output presented to the user largely depends on your platform and framework. However, C# is primarily used for end-user application, either desktop (.NET Framework / Mono) or web (ASP.NET), but it can also be used for game scripting (Unity) and mobile apps (Xamarin). It is in fact fairly rare to see a CLI application written in C# (I'm sure someone could argue about this and list a hundred of them), mainly because C# was largely designed with event-driven applications in mind, which is something you use the most when creating GUI applications.
Oh I wasn’t aware of that. I try to figure out how to set the imports. I’m fairly new to python and the lack of available interpolation functions in c# brought me here (and I got the feeling I will use python more and more in the future)
I can't read that and *not* frame it like a meme: "AHM AH FIRIN' MAH BLAZORRRR!"
Be aware that most tutorials start with the very basic basics. As a general purpose language, C# does everything from simple console apps to complex desktop apps, immensely powerful web apps, and beautiful games. There are tons of tutorials on each of these and if you have any specific question then this is the right subreddit to post them.
&gt; front end work changes every year.. Vue is the newest flavour of the month Vue has been out for 5 years and has had a steady level of interest according to google trends for over 2 years. HTML v5, also 5 years ago, and we're still on 5.x. CSS, aside from the additions of grid and flexbox, has also seen little significant change in the past 5 years as well.
Well, I deleted MSBuild directory as well but this also didn't work.
* You could compile the software when they (the customers) request the download -- this way, you'll know know what RDP information to include. This does mean, however, that you'll probably need to display some "loading" screen and then start the download once complete. Not necessarily complicated but it would take time. Also, you may only need to compile a "wrapper" that merely includes the exe and RDP data. As a side note, you can set up publishing profiles for specific customers that easily tailor the builds for the customer, though you'd have to manage those profiles as well. * Have the exe request the RDP data from a service that you own. The exe would need to know enough about the customer in order to know what RDP data to get (i.e the customer can login to the exe app which provides the credentials necessary to retrieve the RDP data). * Deploy the exe and data as two separate things and implement the UI in the exe to be able to import the RDP data. Customers would be expected to download both (the exe would update via clickonce thereafter) and then use the exe to import the data.
I've created a wrapper for [GraphQL.NET](https://GraphQL.NET) because there was no way I was going to create 3 x (however many models we have in our project), just to use GraphQL. &amp;#x200B; [https://github.com/Michannne/graphql-core](https://github.com/Michannne/graphql-core) &amp;#x200B; Has some other useful features like explicit joins, and being ables to seperate queries into different files
Or just use the new builder.ApplyConfigurationsFromAssembly() extension method in 2.2
Or use console.write and pipe it
So you have access to change the registry remotely? Why not deploy the program remotely as well? I wouldn't do custom builds though. Why not change their registry first and then send them the exe? Or maybe use a custom file extension. After installing the exe the user can just double click the configuration file once to 'import' it.
"Reflection" is the way in which we can turn the very code we write into *data*. Or you could say that "reflection" is how code can look at *itself* (like the reflection of a mirror). With reflection, I can look at a `Type` instance of a class and get collections of information about that class like a collection of properties, methods, and other members as well as attributes that the class was tagged with. Further, I can even invoke members on an instance of a class using reflection without having to write statically typed code. Reflection is extremely powerful but it is slow and can be easily abused. By using reflection, we are foregoing the protection of our compiler. For example, suppose I write some code that reflects on instances of `MyClass` to invoke the parameterless method `Run()`. If I later rename the method as `Execute()`, I'll have to *know* to also change the code using reflection since we have to use strings to specify specific members of a type, strings that things like compilers and intellisense won't assume are related to the name of members on a class. This means that you'll catch bugs in your reflection code only during runtime and not during compilation/build. At this point, you'd need to write unit tests specifically to catch these issues for you but this indirection isn't something we want for *most* scenarios.
Thank you so much. I'm a student working on my first ASP.Net Core webapp for a large school project. I'm working with a database of 20+ tables and applied the configurations line per line. This will greatly improve my code. :)
I checked the files you said and find out that I actually declared AssemblyCulture value as 'x86'. Fixed it to its default (which means empty) but this also didn't work.
The vast majority of .NET user interfaces nowadays is done with either HTML/CSS (web), WPF (desktop), or Unity (games), or has no UI at all (APIs and services etc) However, they add complexity, with more things to go wrong and more time needed to learn them - so as a learner, it's best to keep things as simple as possible initially while you learn C#, and then add the more complex UI stuff in later on
FYI : the current version of IronPython only supports Python 2.7.x - it looks like your library requires Python 3. &amp;#x200B; Support for v3 is in the works, but not ready yet - [https://github.com/IronLanguages/ironpython3](https://github.com/IronLanguages/ironpython3)
The tutorial is just teaching you the basics of C# so it's using the simplest interface, which is the good old command line. Once you've learnt the basics there are a couple of different directions you could take it in - Want to write games / 3D apps? Move on to learning Unity, which uses C# as its scripting language. Want to write Windows applications? Carry on using Visual Studio (I'm assuming that's what you're using now) and follow some WPF / Windows Forms tutorials. Want to write websites? Use Visual Studio and follow some ASP.NET tutorials.
Since you are taking a course I would recommend the latest version of C# in a Nutshell.
It's a bit weird but did you try just appending this information to the .exe file? Make sure it has a marker that you can find and then, during startup, you can just load up the file and look for this marker looking from the end of the file. Notes: 1. This is not secure at all so be careful with what you put in there. 2. It'll add some load on your system to do this as the file cannot be cached without extra work
I use the old version of signalR and probably time to look at updating soon, along with migration from AngularJS, your post has come in the same day that updating has just been bumped up the priority list. Long shot, but have you used signalR on azure, and if so can you explain the differences between running it in the core on an app service against using Azure’s own (looking quite expensive) signalR offering?
You have a lot of correct answers here already, but here's a simple way to think about this: **GUI = additional level of complexity = not good for absolute beginners** Truth be told, 95% of the interesting stuff has nothing to do with GUI anyway. It's a good practice to seperate what your app looks like from what it actually does. You could probably take your calculator code and wire it to some GUI with little to no changes.
MSBuild target files are widely disbursed. They're definitely not just confined to any particular MSBuild directory.
I recommend using the official documentation: [https://docs.microsoft.com/pt-br/dotnet/csharp/](https://docs.microsoft.com/pt-br/dotnet/csharp/)
You mean, redirect output?
&gt;That just by itself marks you as forever dumb and not worth talking to. Then don't do it. &gt;There are TODAY not yesterday still programs that do not run on IOS. No shit. You deserve the Nobel Prize. We know that. We are talking here about apps run trhough browser plugins. Now instead of talking about the past you want to talk about different apps that are completely irrelevant to the discussion (that is what killed Silverlight). &gt;Sans any real proof that it or anything on it was killed by one person ignoring its still very much around. It's still very much around as a graveyard. &gt;No we see that you are a dunce as to what facts even are. I thought I was not worth talking to? Why did you continue writing?
For instance, if I define a variable in C# as follows var temp= new ConnectionInfo(); where the definition of ConnectionInfo() is in a predefined .dll file/ So now even though I do no want to see any ouput from the above codeline, but it will show me something like this: &gt;UTC=[2019-04-30T15:43:43.195] Level=[Info] LogId=[ConnectionInfo] Tag=[Created] A new connection was created. Endpoint:, CertThumbprint:, CertStore:LocalMachine, TimeoutMs:100000 Now I do **NOT** want to see the above lines on the output screen, so is there any way to make c# not print the above
Okay thank you, I guess I have to find a different way to make my script run :(
I don't believe there is a way to prevent specific console write statements, but if you don't need any output from your application, from the cmd.exe you can enter: yourapp.exe &gt; NUL 2&gt;&amp;1 In powershell, you can enter: .\yourapp.exe &gt; $null Again, this will swallow up all output, so I'm not sure if this is what you're looking for.
You could a tool like [dnSpy](https://github.com/0xd4d/dnSpy) to disassemble the `.dll`, edit out the console output functions from the functions that you are calling, recompile and then use that edited `.dll`.
I think the Microsoft docs have a long way to go on documenting the new SignalR, as all the documentation seems a bit thin. There's just enough to get you going but nothing more than that. And still some weird things, HttpContext is always null outside a hub class (but within a request) even using the IHttpContextAccessor injected class, so any Authorization or anything that depends on your JWT tokens has to happen in your hub methods, and can't be handled in another DI class.
Checkout .NET Core if you haven’t already. You can build cross platform full web applications.
So, redirect output from stdout to null?
I've not used it in azure yet, but that is my next steps actually. So I'll make an update once I've done that.
thank you for the reply! It helps clear it up in my mind now. That question of "Is this used in the real world" was lingering in my mind when I was learning yesterday. Because ULTIMATELY I want to get into this field as a career veryyyyy far down the line lol. You mentioned moving on to web programming.. Does c# pertain to a lot of "Backend" web development? I learned HTML/CSS when I was around 15 for fun, but I could never really make cool websites since it was all frontend.. Just graphics and links to pages. Couldn't do anything fancy like logins or anything. Had to use some program called Wordpress.
Regarding HttpContext, if you take a look at the end of the backend part of the post it shows you how to send the JWT token to the SignalR middlewear. The part about using it in JavaScript and there being no guidence, that was the influence of my blog! I found a pretty good way in my option of using it and sharing it.
Thank you, this answers was very helpful!
eh, it is a predefined .dll file, I cant make chanes in dll I can only make changes in my .cs file
Neat! So, where's the source code and download?
Actually, you can if it’s not signed. But that’s beside the point. https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo.redirectstandardoutput?view=netframework-4.8
https://www.techprofree.com/2019/04/24/restaurant-management-system-with-source-code-free-download/
There are a few places in my codebase at work with a comment that says "Reflection bullshit here" - we end up using it more than most, but we always try to be careful about it. Well, then there's the entire team that works on a REST API hosting service that will dynamically spin up api endpoints based on the types it finds in DLLs that you give it...
Any video demo ?
Your Gmail id?
I remember working for a point of sale company. I loved working with different hardware. But it was mostly quick serve and the clients needs were challenging in a fun way. We had a gdi expert hired because the default button animation on an mfc fotm was too slow.
Here's an example where reflection is used for json serialization/deserialization. [https://www.newtonsoft.com/json/help/html/PropertyJsonIgnore.htm](https://www.newtonsoft.com/json/help/html/PropertyJsonIgnore.htm) Internally the serializer uses reflection to check if a property has the \[JsonIgnore\] attribute, if it does, then the serializer ignores that property.
This is in c# and its very easy to use and user friendly . you can need any help you may ask....
No, I was just reminiscing.
ok
C# can be used as a backend and front end. For example, you could have a C# web service that provides data for your front end that is written in Blazor, which uses C# to generate dynamic html. Essentially, almost anything you want to do can be done in C#.
post it to streamable and post it here
I think people are very confused and giving answers of mixed utility. It sounds like you are consuming a library given to you as a DLL file, and that library is doing its logging with `Console.WriteLine()`. That's interfering with the console application you're writing. Unfortunately I don't think there's a way to stop that. They *should have* been using other mechanisms like the Trace system to do their logging. They *should have* exposed a way for you to configure their logging. If they didn't, now you have a headache thanks to them. :/
What does "real world" mean in the context of this title? The code doesn't look production-ready to me, and the example doesn't appear to be a useful piece of software.
That is what I'm doing right now. The code base sucks, and there's time for features for customers but not fixing the code. Honestly I wonder at what point it will fail tremendously. But let's be honest it's partly my fault.
Depending on the complexity you could write a wrapper program around the dll, and call that from another program using system.diagnostics.
I'm pretty far from the world of desktop development but it looks like a nice case for some kind of message broker like kafka or rabbitmq that is transporting your data in json between main app and microservice written in python
The code snippet you point to is about reading the token from the URL and putting it in the right placein the context. I am talking about accessing the HttpContext in some of the logic that happens in methods called from a hub method. It should be accessible with IHttpContextAccessor but it's always null. We're going live soon with our migration to signalr core, just once I write a component in vue for it, the rest of the sites are done. I just found it irritating that there wasn't much out there on the topic yet so this post is changing that so thanks, it is appreciated.
Yep. There are two main ways of building web applications with C#. One way would be a "thick client", where most of the work is done in the web browser, using JavaScript, typically together with a framework like Angular or React. The server would do a relatively small amount of work, providing data and storing data. The server might then be written in C# using ASP.NET Web API. The other way would be a "thin client". Here, the server would do most of the work. The best way is to use ASP.NET MVC for the server, but you can also you ASP.NET Web Pages or Web Forms. Whichever of those three technologies you use on the server, the server would generate the HTML and send it to the web browser. Each time the user clicks on a link, a new request would be sent to the server, and the server would generate a new HTML page. There would be a very minimal amount of actual work done on the client, but if needed, JavaScript can be used to do a bit of light client-side processing, which would typically include validating data entered by the user. The other thing that needs to be mentioned in Blazor, which allows you to use C# for the client rather than JavaScript. It's a brand new technology, and I know nothing about it, but people who are working with it seem to think that it will be the next big thing. It's definitely one to watch.
I'm going to look into it, wonder how the performance will suffer from this since I want to offer a realtime interpolation in the C# GUI .. doesn't have to be extremely fast but showing 3-10 values a second that get interpolated by the python script would be nice. I had such a hard time to find (open source) interpolation functions in C# and thought doing such calculations could be a nice way to integrate python and it went well ... but I thought integrating the python script into C# would be easier \*sigh\*
Your method name example is why nameof() exists. Never use a string to reference a member, if you rename a member then nameof() will break at compile time.
&gt;I thought I was not worth talking to? Why did you continue writing? You occasionally swat at gnats that buzz around your ear - doesn't mean they interest you to have a conversation. You STILL have no life and arguing about silverlight? Get a girl or a job coding. scratch that . The first would require finding a woman whose mission in life is to be bored.
I'm curious how Fsharp's [MailboxProcessor](https://msdn.microsoft.com/en-us/visualfsharpdocs/conceptual/control.mailboxprocessor%5B'msg%5D-class-%5Bfsharp%5D) would stack up.
True but `nameof` may not be helpful in all possible cases. You need to know the member of a type you plan to reference via a string during design time in order to use it.
Ah ok! No problem, glad I could help!!
As in a real world example on how to use it. One of the things I couldn't find is how to correctly use it from a frontend point of view.
It obviously will add some delay and significantly increase app complexity, but if it is a pet project you can give it a try as both are pretty popular at least in a web development. Or you could rewrite that python lib in c#, publish it as nuget and make dotnet world a little better
Nice looking app. Now will you please update the text in the window title so I can sleep tonight?
Your posting history is quite... unique. Not doubting your educational intentions, but could you provide a video demonstrating this system?
Alternatively, put an api on the server, and on first run have your client enter a credential into the app, which then queries the api for their individual configuration as json/xml. Store that credential in the registry, and everybody can freely download updates. You can re-query your api every time the exe does, enabling server-centric config updates, too.
If you want a real live web example, this page is done completely with C# as backend, by me and others at my place of work. The frontend is a mix of razor pages (basically html, Javascript, CSS and C#) and some other Javascript frameworks. (It's also a cms in between, content management system, that's written in c# as well, for editors to create content without writing code). https://www.ncc.group/
Slightly related: Does C# have an equivalent to JavaFX? I've used JavaFX and I've used C# for web with html/css/javascript but was wondering if C# has something similar to JavaFX (used for desktop apps, not a markup language). If so that would be the easiest to learn, but probably not too useful down the road, but perfect for a calculator.
C/C++/Rust/Node and even JS examples (type 1+1 in your browser console) all do that. No need to learn how to make UI when you're doing the basics of programming
His post history is the funniest shit I've seen this month. Can't stop laughing.
Correct, which you would still need to do unless you are allowing loosely defined object that don't implement some contract. Classes that are expected to have a specifically named member should always use inheritance through interfaces or base classes.
I'm not sure asking for a video from this guy is a good idea....
Holy. Crap. Wtf is going on with this account lmao
Check out his taxi management system
&gt; educational intentions lol, have you looked at the code? Please, no one learn from it.
You got something against ripped yoga pants????
So uhhh... How did you get from ripped yoga pants to social media marketing to c# desktop application development, friend?
( ͡° ͜ʖ ͡°)
OMG xD
There's really not that much difference, C# just has direct language support for them. So you can do: `anObj.OnClick += (o,e) =&gt; handler;` Rather than `anObj.registerOnClickHandler((o,e)-&gt; handler);` &amp;#x200B; Because C# has a language way of doing things; you tend to get standardisation to that way - after all its in the language. Because Java doesn't, then people have to implement the event handling pattern themselves, which means you get lots of different implementations of that same concept.
Thank you for the code I really appreciate you taking the time to share.
So, many, typos. This code is... not very good. I'm not trying to be mean, but it's 100% pure spaghetti code. There is code duplication all over the place, references to UI elements are all "label1", "label2", "dataGridView1". Variables are all named in ways that would never work in a team environment, like create an Ledger object and calling it "l". The worst part by far is how the database works. I could go in depth but this needs some serious work, I know you put your intentions as this is a project to help students. But this would not be good for students to learn from.
Any random snippets from the code is enough to use as an example of how to not do things. Here is just a random one. private void ClearFields() { label3.Text = ""; label5.Text = ""; label19.Text = ""; label7.Text = ""; label9.Text = ""; label11.Text = ""; label23.Text = ""; label22.Text = ""; label20.Text = ""; label24.Text = ""; label25.Text=""; label26.Text = ""; label27.Text = ""; }
There are so many... All from 4 months ago. I think their last project may have been a video scraper...
Nah I’ve got a feeling it’s a fake
VS2012 ? Wtf
Do you at least know what version control system is?
Look up the ternary operator and see if that will help in your situation. :) Ternary works something like: `i % 2 == 0 ? helperA : helperB;` Where that reads similar to: If this statement is true, return value 1, else return value 2. I'm fairly certain they only work for assignment statements, so definitely read up on it before just tossing the code in your program.
Can't believe I missed the web.config configuration. Oh my lol.
This was a big issue for me at first. But at this point, **almost all packages I use have made .NET Core/Standard releases.** In fact, this has been true for me personally for at least a year now. May be worth taking a fresh look. For the odd package here or there that hasn't adapted, you could either (A) make a pull request for them, or (B) switch to another library. I've found that for those rare projects that haven't made a .NET Core/Standard release, they've been supplanted by alternatives in practically every way, except maybe the niche-iest of niche packages. There has also been improved inter-compatibility between targets/frameworks/platforms as new versions of each have been released, so migrating "full framework" projects has become easier and easier. Many library-level migration scenarios are trivial at this point.
I know... right? 😂☢️💀
Removed: Rule 7.
Removed: Rule 7, spam, possibly Rule 2. (Binary downloads)
that [post history] [de]escalated quickly
Omg Omg Omg.. NSFW
1. No 2. No idea. 3. Huh? 4. You mean HTTP verb? GET
You don't learn "other C#". That's misleading at best, and definitely incorrect. You are learning different parts of the .Net Framework and/or related ecosystem. The C# you use stays the same....
These are proprietary, multi-thousand dollar libraries. They are working on .Net Standard implementations, but they’re not production-ready
1. I haven't even heard of an IDriveable interface (it's definitely not in the usual C# libraries). If they're asking about whether you must derive *all* interfaces from that, unless it's some weird convention, then no. You can obviously make an entirely new interface that isn't derived from anything. 2. You're on r/csharp right now, so unless someone knows SQL here as well, your best bet is probably asking on r/SQL or r/learnSQL. 3. What do you mean by levels, access levels? (public/private/protected/internal) If so, then enums within classes can have any access modifier (`public`, `private`, `protected`, `internal`, `protected internal`, `private protected`, [explained here](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/accessibility-levels)), and outside classes they can be `public` or `internal` only. As for the HTTP action method, I haven't worked with HTTP or communication, so I sadly can't help there.
While technically true, this is a bit of a stretch. Blazor is still semi-experimental technology used by next to no-one. C# is mainly used as a back end, the main framework being [ASP.NET](https://ASP.NET) MVC.
I think the best way is to use a JSON file as an intermediary
For 3 I'm 99% sure the answer is no. That wouldn't even really make sense - you kind of need to provide what interval you're adding (seconds, ms, days, etc.)
Yes WinForms and WPF :) They will be ported to .Net Core 3.0
Wrap up the two different orderings into their own methods, and call the relevant method. The methods can then be descriptive about why they're ordered in such a way, making more readable code.
The dumb thing i..., a lot of these are just compiler tricks, so it's not like Oracle would have to do a lot of work to implement these in Java.
Thanks! I figured it's GET. The enumeration thing, the book just says that it CAN be defined on namespace and class. But the exam question is: what levels CAN'T it be defined on (which doesn't really make sense to me, but such is the question).
Thanks, I thought they might be more related, SQL and C# I mean since the course covers both. Guess it's just the course then. 3. By levels i mean ...I guess types in english? Like nameclass, classes. Those 2 are the levels Enumeration can be defined on. But the question is what it can't be. Which I assume is a terrible question, but still.
&gt; REST API hosting service that will dynamically spin up api endpoints based on the types it finds in DLLs that you give it... Are they making their own in-house solution to this or are they normal, sane people using MEF? Cause MEF ain't a bad choice. If it's not MEF or MAF I'm picturing them all wearing cowboy hats, cause that's wild.
Try running this: using System; public class Program { public static void Main() { Func(1337); } public static void Func(int i) { goto heyhey_label; fun_label: HelperA(); HelperB(); goto byebye_label; boring_label: HelperB(); HelperA(); goto byebye_label; heyhey_label: bool b = i % 2 == 0; switch (b) { case true: for (;;) { for (;;) { for (;;) { for (;;) { goto fun_label; } } } } case false: goto boring_label; } byebye_label: DoNothing(); } public static void DoNothing() { } public static void HelperA() { System.Console.Write("use if-else"); } public static void HelperB() { System.Console.Write("Please just "); } }
&gt; Java uses objects implementing interfaces for handling events unlike events and methods which are in csharp I don't understand this part. Delegates are objects.
You are technically correct, however I doubt someone learning hello world in a console app is going to understand the differences between language and framework nor does the distinction enhance my answer in a meaningful way for a beginner. But you got me, you are clearly the superior internet poster and authority on C#.
Now there's a repo that could use some love and support from the community.
If the library is writing to the Console instead of a TraceSource, you don't have access to the source code to fix it, and redirecting doesn't solve it then... don't use the .dll Make the people in charge fix it. Mark it as a bug.
Might be related to that dotless "i" (Turkish I guess?) you have in path (or in references/resources somewhere). Try moving project to directory without special characters (ASCII only, for example D:\Test), check out references if they contain special chars and check resources. Try building then.
Are you considering razor views to be backend?
Well, I can tell you where enums ***can*** be defined (in C#, that is): * Outside namespaces * Inside namespaces * Inside classes * Inside structs By this logic, they ***can't*** be defined: * Inside methods (unlike e.g. local methods) * Inside property bodies * In any other ridiculous places you might think of (such as lambda expressions) I hope I'm not forgetting anything. And I suppose you're taking some database/web backend-related class, because as far as I know, SQL and C# aren't really related. SQL is for managing databases, while C# is an object-oriented language (though also commonly used for website backends).
plz no goto!
Delegates are objects but they are not pure objects. What I mean is that you can't create a class that implements two different interfaces for two different types of events and then pass that to both of those. (if I understand things correctly)
I honestly have no idea about those distinctions. I agree with your general point that C# can be used for pretty much anything if you want to. I just wanted to add that SPAs, where the rendering is done on the client, are not typically rendered with C#. Sure, Blazor makes it possible, but it's very untypical. You will still need to learn JavaScript or TypeScript.
Why the sass? It's uncalled for. It's an important distinction that a new developer will need to learn eventually. Misleading them from the start to try and shelter them from questionable complexity will only make their path harder.
Pass what? Maybe it‘s my lack of Java knowledge but I don‘t get what you mean. You can add events to interfaces and then have to implement them. So one class can have events based on two different interfaces and hence also different event delegates. But I guess you‘re talking about something completely different?
others have explained it pretty well here. I'll give you my two cents here is an analogy might help you understand better: reflection == introspection. imagine an object is looking into a mirror, it can see its own properties. &amp;#x200B; let me give you a real life example that refection would come in handy: seems like you are into game dev, so I'm sure you've seem game engines. commercial game engines usually have built in visual editor. for example, Unity's property inspector that let's you edit an object's property directly in the editor. &amp;#x200B; now, imagine how would you implement something like that? how would you know what properties the object has? this is where reflection comes in. &amp;#x200B; it's definitely used less for core game logic, but reflection is almost essential for tooling and pipeline work
Some questions I got in mine were stuff like “what is an interface?” “When would you use an interface?” “Do you read any tech blogs or books?” Stuff along those lines.
Awesome library so glad bindings for c\# were added. Thanks for sharing!
Don't start with WPF. WinForms is still recommended because it's stupidly easy to start learning, and it's still used *everywhere* in industry with legacy applications. WPF is a wierd middle child between full XAML apps and winforms. I've played with it, but never seen it used *once* at a job in the wild.
It's not used in the wild cause you guys keep recommending a legacy tech instead of upgrading. WPF is already old, it's about damn time. The reason Winforms might seem easier is mostly ignorance. A lot of assumptions are made that you must write XAML by hand. And I've also heard sentiments that the auto-generated code is horrible. From my experience this is false. Save for a few minor examples, like the code generated for sampledata, the basic generated code from dragging and dropping controls in the designer and changing values in the Property view is the same code you'd be writing by hand. ​ Advanced features like templates and styles must be written by hand, but more often than not you can create copies of existing styles and then just tweak certain values. Again, this is more advanced - this wouldn't even be possible in Winforms. WPF is stupidly easy to start learning. You don't have to make it harder than it is.
Don't go nuts with them though, i remember the first time i learned about ternary and started nesting the bastards.. just don't A &lt; B ? X &gt; B ? C : D : E &lt; A ? Y : C;
goto, is this real life..?
Yeah, my work codebase has more than a few two layer ternaries and it makes me cringe.
He means a delegate is only one method with a certain signature that can only be bound to an event with the same signature while in Java you can create an object that inherits multiple interfaces and has many methods to subscribe to more than one event
Yep
Let me see about [hooking this bad boy up to AutoModerator...](https://www.reddit.com/r/Whatcouldgowrong/)
Just wanted to let you know that this did ***not*** give me the results I needed. While it did work (to an extent) in Debug, once I ran the code as a service under the SYSTEM account (session 0), the GetDisplays() method always returned an empty list (not seeing/retrieving any Virtual Displays).
Thank you! that was helpful. Tbh I don't know why we learned to make bases at all. It's a C# Desktop app course which lasts 2 months. We did C#, SQL and MVC. We also learned nothing cause the course is pretty bad. The questions are weird too. there's 120 of them and some are asking stuff like this "what can't you do?" when the book only mentions what you can do and nothing else.
Damn, good to know. Session 0 security stuff is always hard to get around. I wonder if you would get placed into a session that could access the graphic API's via something like "Allow services to interact with Desktop" on the service (questionable support I know). Either way, running as SYSTEM could give you the ability to launch a program in a logged in user's session.
You could try [Python.NET](https://github.com/pythonnet/pythonnet). I'm not sure if this library will work with it, but it's pretty common way to do Python interop in C#, so perhaps. There is also a possibility to do something like that: [Python from C#](https://medium.com/emoney-engineering/running-python-script-from-c-and-working-with-the-results-843e68d230e5).