In addition, use the Intermediate window while in debug mode or on a breakpoint to issue commands to help debug, rather than digging through Intellisense manually to view a variable's value and to evaluate expressions. You can use the Watch window for a more GUI-like approach but I prefer the Intermediate, especially now that it supports LINQ.
[removed]
Spend some time learning keyboard shortcuts. They make navigating and editing your code much easier.
In addition, there is no need to fill your code with console.log / console.write lines which you remove (or forget to remove) before committing: VS' breakpoints can output to console (without breaking, if needed) and you can insert conditions for when it should trigger. 
Pretty much, if you call the "C# Reference" section on MSDN a book. I only need it so I can lookup the API of different objects.
If you can't work it out from this code perhaps you should step away from classes until you have the basics nailed, look at the yellow book on the side bar.
Generally a bad idea to have it set to always get the latest version, for this exact reason. This applies to any package manager really, not just nuget.
This is something I've never really understood, and the JavaScript world definitely seems to be the worst offender: why the HELL would you ever configure your build process to always pull fresh copies of the same dependencies over and over, and even worse, always pull the newest version??? Builds must be repeatable. Having something change under the hood without your knowledge is by definition not repeatable. Now, the onus is still on you to keep your dependencies up to date, but that absolutely should **not** be an automated process, for exactly the reason you mention. I just don't understand the rationale behind doing that at all.
Learning by use is all you need! I've been using VS for over 5 years and 99% of my use is writing code in the editor, right-click "find usages", ctrl+F to search, and stepping through the debugger. Someday I'll figure out how to have my select case statements auto-generate over the enum but other than that, I can't seem to remember key shortcuts or other time-savers and I'd rather write code slow and deliberate anyway :)
You could try Dash, that's a documentation browser for offline use. There's also a Windows &amp; Linux version called Zeal if you're into it, but that's not as powerful as Dash.
Yeah, I also always go with the more active projects, but hey, you have to start somewhere. We've realized how much you can learn by creating your own open source library, so even if it doesn't prove useful in the long run, we're learning a lot. I'll have to take a look at GPRC. Maybe it fills our needs and have other benefits. I've been meaning to look into protobuf for our library. It already allows the user to supply their own serializer, so it might be possible to add protobuf support with a minimal effort. Thanks for the feedback! 
ahh ok so it currently is just adding to temp not clearing temp out after each line is read. it might be usefull i could try a comma seperated list instead of new lines and check for a comma then convert temp to an int. toss out the comma and continue.
Snippets (user-defined tab completion, basically) and the Debugger. There are a ton of built-in snippets for C# that help you blaze through code. I'm not so sure about what's built-in for Javascript since I've never used VS to write JS. Also, learn the conventions behind .Net based on the specific framework you're using (e.g. MVC vs. MVVM) to make sure all of your classes, files, folder hierarchies, and naming conventions match up with what the framework expects. If you're specializing in front-end, then you should already have an existing codebase to model any new code after. Invest a little effort into learning the conventions and VS will end up doing most of the legwork for you.
It's to pinpoint the exact cause of an error or a bit of code that doesn't work properly. You have to know what your code is supposed to do at each step and compare it to the output. Take a program you write and just step through the code, one line at a time. Make sure the variables change when they are supposed to change. Just watch it play out a few times. Change inputs to get different results to check the math going on. If an error pops up in a section, you can set it so the program starts at a particular line and stops at another so you won't have to debug from the start of the program.
try this, i use it in my app using (var sr = new StreamReader(path)) { string line; while ((line = sr.ReadLine()) != null) { Console.Writeline(line); } }
My hero. 
This is all I remember right now of my day to day usage as a student using primarily VS. Click a variable, then Ctrl r + ctrl e is auto property. Click a variable or method or probably anything, ctrl + r + r is rename all in scope which is super useful Click a variable or method being called/accessed, F12 is go to declaration, shift F12 is find all usage. With 1 or more lines selected ctrl + k + c is comment selection while ctrl + k + u is uncomment selection. I tie those to extra mouse buttons because I'm lazy. Thats the only thing I miss about my previous job using a Mac as comment/uncomment was command + / and it would just infer what to do. Saved me one mouse bind! Also everything about the debugger others have mentioned. Also downloading something like clipX for extra copy and paste stuff. Google it. I'd format nicer but I'm on mobile. 
not sure. I use it occasionally, but not often enough to think about it. I'd probably use plain FindInFiles to replace it if VS doesn't have an equivalent. I do most of my navigation with F12 and Shift F12.
Did you try using PLINQ?
I've been seriously thinking about getting ReSharper. Looks awesome.
In the web development world nothing is repeatable, so why should you worry about a build? Just saying that kills me inside.
In the firefighting world, everything is on fire. Why should we worry about water? What a completely nonsensical argument. Just because the rest of the web world isn't repeatable is no excuse for knowing EXACTLY what code you're publishing, which is impossible if you're always pulling the latest and greatest.
Will likely generate identical SQL, perhaps one costs a few more CPU cycles to process than the other. I'd advise to use whatever you think is most readable as it would be very strange for there to be a significant performance difference.
You're either subclassing from class A or subclassing from A.B which ends up like this: public class C:A.B { //set C.B functions } Just because you defined class B instead of class A it doesn't mean that if you subclass class C from class A that you also get class B. Defining a class inside of another class just modifies it's namespace, not how it operates.
It was a joke. I am fully aware of the value of repeatable builds.
okay, I am just going to have to go about this a different way. Thanks.
Interesting question, 'Where' in particular has optimizations for chaining 2 or more cases so it's basically the same thing. I personally think the 2 statements is a little cleaner and can format better with other statements. db.Table.Where(x =&gt; x.Foo == "Bar") .Where(x =&gt; x.Bar == "Foo") .Where(x =&gt; x.Date &gt; date) .Select(x =&gt; x.Name) .ToList(); 
Did you make sure the target machines have the save version of the net libraries? One thing that works for me when nothing else does is to add a logging function, and track what part of the program it's dying. This way you can figure out if the application is even successfully loading before ending.
I appreciate that you took the time to add to the discussion, funnily enough I was actually using Visual Studio, and for couldn't quite pin point where the issue lied. I will revisit this topic. Many thanks
As a C# dev, I'm interested to know what signals an good/experienced vs a bad/inexperienced dev.
This: http://www.visualmicro.com/page/User-Guide.aspx?doc=Working-With-Breakpoints-When-Hit.html
Willing to share some of your go to questions?
I prefer to use multiple where statements because it's less confusing when you want to mix and match positive and negative conditions and it's a little easier to read. But do whatever you like.
You also might want to do it that way if you have to deal with properties/methods not in the database. But I don't think this is really the scenario the OP is asking about.
Are you familiar with concepts like interfaces and abstract classes, and could explain why you might choose one or the other? Are you familiar with the data structures available in the .NET Framework and their performance characteristics (like, why would I use a HashSet instead of a List)? I mean I don't know about the OP but these are obvious ones to ask for C# IMO.
If your problem is really just syntax minutiae then I don't know if it even is going to matter in the interview but C# in Depth might be a decent refresher.
I would be shocked if anyone is writing C# programs today and not using Linq unless they have some insane performance requirements. And anyway most languages have or are acquiring similar functions (map, reduce, filter, etc.).
&gt; Always at least briefly consider what your LINQ query will likely break down to in SQL. Not good advice if you're writing Linq to Objects.
Yep to all.
the second one is substantively faster on collections. haven't measured it with sql.
I disagree. I think using &amp;&amp; instead of .Where makes is much easier to read because you don't have to think about what the statements are doing. db.Table.Where(x =&gt; x.Foo == "Bar" &amp;&amp; x.Bar == "Foo" &amp;&amp; x.Date &gt; date) .Select(x =&gt; x.Name) .ToList();
And if you do it the other way and then have to throw a few || in there you end up doing it both ways 
Yea ||s are a deal breaker for my way. Could be interesting if they introduced an Or method that you could chain after a Where clause kind of like OrderBy and ThenBy. But I think more people prefer &amp;&amp;.
And then the query comprehension syntax makes both options look like ancient hieroglyphs with its far superior readability.
Hey dude.. good blog post, was checking them out. Given your expertise in some areas I have interest in relation to C#, I was wondering if you could answer a question or point me in the right way. I am looking for ways to assemble x64 assembly in a remote process in C#. You can see how I do this using my Process.NET lib here for x32.. https://github.com/lolp1/Process.NET/tree/master/src/Process.NET/Assembly I simply pass an instance of the FASM.NET assembler here https://github.com/ZenLulz/Fasm.NET to the interface for x32 and off I go assembling code and executing it via remote threads. The issue is for x64 doing such a thing is not so easy. The only solution I have seen is using a proxy and another process to do the work. 
with linq, the chained wheres don't go through the whole list and evaluate until you try to do something or make a new list. then when it does go through, it already knows about both conditions and evaluates them at the same time.
I'm not the author of the article or the site, I just found it. It seems strange that the FASM.NET wrapper only allows for x86, and not X64. Surely it's just a case of running the 32 bit assembly (as in .NET assembly) in your 64 bit/AnyCPU assembly (as in .NET assembly)? However if there really is something weird that is preventing it from running in anything other than 32 bit I suppose the proxy idea and using another process might be an option. Looking through the FASM.NET C++ code though, it doesn't look like it would be a huge task to port all that code to C#, right? I mean, if it is purely a wrapper that internally is simply passing parameters to the FASM assembler then you can do that in any language. Plus writing the wrapper in C# would probably be more flexible for you. Have you looked at other assemblers too out of interest? NASM, YASM, GAS, etc.
Very nice! Is the root namespace for the project "Overlay.NET"? It's functionally trivial just seems like something that should be avoided as a period is the separator for sub namespaces.
Is it always possible to optimize? Because if there's side effects in the `Where` function (which is utterly awful, yes, but possible), then the two cases in the OP would be different (namely the side effects would occur in a different order). Although I suppose the compiler could at least identify the obvious cases of when there's no side effects, which are likely to be most common.
We're not testing _whether_ you know C#, since they'd have to have x years full time C# dev on the resume to get to the interview. But we try to focus on familiarity with newer language features (async/LINQ/lambdas). Even if new things aren't important it shows that they've been keeping themselves up to date on the latest and greatest. Some show up never having touched anything newer than .net 2.0, working for some ancient healthcare company. Means they also never touch code outside of their 9-to-5. Another red flag. We like people who teach themselves new things, try out new releases on day one, read code blogs, have side projects, or contribute to a github project. Edit: forgot to mention once we get a feel for the dev based on the above, the only white boarding problem we do is a very basic recursive tree problem. You'd be amazed how man CS grads miss this. But the ones who got it usually end up good hires. 
Hmm, no never heard of it. I doubt it would work on the xbox anyway. We are stuck with a framework halfway between the compact framework and halfway between the full one... Ill look into it.
Nothing wrong with that, though I'd change it before someone starts using it and then later hits you with the dreaded "breaks my workflow" bug report.
&gt; if they introduced an Or method Please no. How would you solve operator precedence this way?
I bought a 3yr old "broken" laptop for $50, cleaned it up and swapped the hdd out for an EVO 850. The little sucker flies now, and VS2015 doesn't stutter and die like it did when I picked it up. You'd be surprised how amazing 'old' computers become when you just give them a solid state drive. 
Yes? Why ?
I created a random one and it is all black, [here.](http://imgur.com/Jf5J7iZ) And can you elaborate a bit more on if the VM has connectivity to the internet and injecting the packages since I'm a bit new to this. Thanks! I changed the CPU and let it use my GPU and it fully loads now [Here](http://imgur.com/xXZvP5n)
Recursive tree? What kind of industry are you working in with C#?, because that kind of thing doesn't come up very often the places I have worked at.
That deferred evaluation gets me every time
I think your issue was the VM related issue that you solved by flipping your CPU and allowing it to use your GPU. In Visual Studio make sure you are using that VM as your run target, and give running the project a try with the VM already open as you have it now. Let me know if that works for you. EDIT: You can see if the VM is able to connect to the internet by opening the default browser in the android VM and viewing google.com as a basic test. The emulator should redirect the request from the VM to your default virtual switch, which will direct the traffic out your actual network interface for your PC and return the result back to the VM as though it was connected directly by a cellular connection.
If you search for courses from Jon Skeet on Pluralsight you will see that he has two other courses on the features in C# 5 and C# 6. You would not be missing any features of C# if you completed his courses.
No idea honestly, I've got a license for years.
A similar question has been asked by me on Stackoverflow before. You can take a look at the answer. http://stackoverflow.com/questions/19377449/performance-for-using-2-where-clauses-in-linq 
The double .Where() clauses will allocate another object, and, in LINQ-to-objects, perform another loop iteration. There would be a significant performance difference if this strategy were taken to extremes.
&gt; Recursive tree? Windows forms comes to mind. 
You're not reading it more than once, but for every character you're writing the entire result read so far. So should be seeing something like: &gt; H &gt; He &gt; Hel &gt; Hell &gt; Hello If you move the Console.Writeline to after the while {}, that'd take care of it ;)
If you are necessarily restricted to using Find, you can use the as or is operators to perform a safe cast: InputObjects.Find(x =&gt; x is InputButton &amp;&amp; ((InputButton) x).KeyCode == keycode); InputObjects.Find(x =&gt; { var button = x as InputButton; return x != null &amp;&amp; x.KeyCode == keycode; }); But, I think /u/frSlick is right, and using the LINQ methods is probably preferable.
the speed difference should be unnoticeable unless you are working with gigantic collections (a couple million entries). IMO you should always make code readable first and fast second. If your code is readable it will be easier for other programmers to get into your projects (extremely few real world projects are one person affairs) 
This should help https://msdn.microsoft.com/en-us/library/aa983722(v=vs.71).aspx
Thank you so much! This really helped.
I see. Thanks for explaining.
If you really want to make it readable (does depend a little bit on context): db.Table.Where(IsFooBar) ... static bool IsFooBar(this X x) =&gt; x.Foo == "Bar" &amp;&amp; x.Bar == "Foo";
That doesn't seem like an extremely ambitious filter for hiring? It more sounds like an "if you don't know this, instant fail" to me? Basic data structures like HashSet vs List should be something you learn as a freshman in uni, no? Presumably same with interfaces and abstract classes? I figure you should know all of that if you've done coding for an extended period of time?
You would think so, wouldn't you?
As per my other reply, no it doesn't. The where iterator combines predicates, it doesn't stack iterations.
Ah, cool. Does it also parse the expression trees and combine conditionals to one lamda so that it doesn't have to do multiple allocations? I suppose that would be a pretty extreme microoptimization anyway.
Cool, cool.
If you want to get into something new, try loading your app into the process with the WPF overlay by compiling and injecting my other project here https://github.com/lolp1/DomainWrapper and calling the export HostDomain with a path to your wpf overlay .exe 
Thanks!
It is creating an external window which you can render on that synchs its position with another window. Leading you to be able to draw anything you want inside another application.
I just installed Visual Studio again and I'll try your suggestions!
This looks awesome! Thanks for sharing!
Overall this looks like a very useful service, but I suggest updating your examples to use HTTPS - especially since you have examples for client-side Winforms sending possibly private data to an external server.
No, I posted the linq2objects source code from ms reference. The where iterator combines predicates.
While this looks very cool, I wonder how it compares to Exceptionless. 
i am also a beginner but reading this part: &gt; get user input or numbers and append them to the file and so on i think it is better to save your txt file in a proper format instead of some random string that you have to **parse**. for example you can make a custom class like this class MyNumber { public string UserName {get; set;} public in Number {get;set;} } then save that class using `System.Xml.Serialization.XmlSerializer` and read it with the same class and you can easily put it in a class of your choice. XmlSerializer ser = new XmlSerializer(typeof(List&lt;MyNumber&gt;)); using (StreamReader st = new StreamReader(myFilePath)) { myList = (List&lt;MyNumber&gt;)ser.Deserialize(st); } then you can easily work with myList like this: `myList[index].Number'
thanks! took a while building it :)
Thanks for the suggestion and the link! Right now I just compress everything (GZIP) and use HMAC to ensure that no one have modified or faked an upload. You definitely have a point. However, some users might use OTE for internal applications, so I don't want to force SSL. What do you think about a compromise where I'll do a check in the installation wizard and display a page that empathizes on the importance of https (if http is used)?
It's a question of Tuple&lt;int, bool&gt; Foo() { return Tuple.Create(42, true); } ... var result = Foo(); var x = result.Item1; var y = result.Item2; vs (int, bool) Foo() { return (42, true); } ... var (x, y) = Foo(); So basically sugar for a lot of boiler plate. Also, the tuples created this way are value types.
The old tuples would solve this problem as well. It's mostly just to be able to write much less code :)
Just got a new job as developer, here are some things that are more important than syntax: * Your thought process in writing code is important * Catching/handling nulls objects and empty strings * Security flaws i.e. sql injection or xss should be considered if required to write a sample app * Use of interface and how important it is for TDD * New features of C# you like and how you keep current For a quick theory refresher you can go to: http://www.c-sharpcorner.com/uploadfile/8ef97c/c-sharp-net-interview-questions-and-answers/
i am probaly going to get there in the end as i understand more of what i am doing but for now i prefer to sort of brute force my way into getting things to function so i can understand what is going on. in time yes i plan to try to get classes into my code and tidy it up make it cleaner and so on but as i understand whats going on with it. for now i am happy to just have everything tossed into my main class and working.
Nested classes do inherit the generic parameters of their enclosing class, though. This is a property of C# and not the CLR which allows whatever (including nested classes with other namespaces than their enclosing class, for maximum chaos) :).
&gt; var cloneName = instanceToCopy.Name + "_Clone"; I gave it a go but it hasn't changed the error I'm afraid. It is still seeing the cloned object as the same, either because Hibernate has some form of identical reference from them which I need to remove or because I need to force the cloned object to save itself with a new ID somehow. 
TL;DR: Change the ID of *instanceCopy* to 0. The ID was copied as well, so your *instanceCopy* also has ID 488. Now if you try to save the *instanceCopy* NHibernate detects that it has a ID, but there is already another instance associated with the session that has this ID.
Technically it makes **absolutely no difference**, **except** if you define more than one namespace in a file. When you import a namespace with using within a namespace it's only active within that namespace. And honestly, you shouldn't have more than one namespace per file, except for auto generated code (which should be exempt of any stylecop rules). Personally I have it outside of the namespace as well.
Yes and it have a good technical explanation. But I created this thread more as a discussion about the different styles. I don't think I have seen anyone actually use using statements inside the namespace (except for StyleCop when I checked their source code ;-)). So would be interesting to hear if anyone used the "inside"-style and if they think it's more readable.
We disable that rule. Style cop rules need to be selected for the style you want to enforce, otherwise you are just wasting people's time in looking at messages that really don't matter. When I see code with using in namespaces like that, it seems off and if it makes such a difference to your code, you probably have other, bigger problems!
Funky. I never had such a corner-case. Good one!
Outside, as that seems to be the usual convention. In the one case that seems to make a difference (based on info in u/FileLoadException's link), it strikes me as a code smell, and one that might be better solved by using a type alias. E. g. using Math = System.Math;
Looks like a job for WPF to me, yeah. And if you're doing WPF, I'd look into using the MVVM pattern. There are a few libraries that help a lot with this (http://caliburnmicro.com per example)
The reason enterprise software (and StyleCop) puts it inside is exactly the reason mentioned in the SO article, to minimize (admittedly rare) collisions. If VS defaulted to this, you'd never see it the "normal" way. I've seen it done both ways at Microsoft (disclosure: I'm a eng. @ MS).
I'd probably fail the whiteboard test, mainly because I haven't used recursive tree in a while and had to google too refresh my mind. Don't you think it's more worth while seeing how the solve problems? explain current problems? test the knowledge on what's on their CV? I hate whiteboards test like that because unless I'm using the current test within my last week or two I tend to forget about it. Mainly because I have so much going on in my head it goes to the back. Same applies to HashSet vs List. I know the difference and where to use each one, but ask me specifics on it and my answer would be. "I haven't had to use these in the past few weeks and therefore would have to do a quick google to find out the specifics." Does any other programmers out there suffer with regards to mental blocks? 
Sort of but the old tuples didn't have decomposition and was more of a pain to remember what the heck Item1 through ItemX was. The newer syntax eliminates those issues. Now you just have to worry about people labeling return values as Item1 through ItemX...
[jsonProperty2TitleCase!] (http://deepumi.com/jsonProperty2TitleCase) - convert camel case csharp json property to pascal case.
My side project is [Plex Requests .Net!](https://github.com/tidusjar/PlexRequests.Net) 
I had a similar reaction when first testing out StyleCop, but it's only jarring because it's not what you're used to - much like many of the stylecop rules. In the end, it didn't take long getting used to it and if it helps prevent an edge-case issue, I am fine with it. Whatever you do, whatever your preference, it doesn't actually matter as long as your codebase is consistent.
There's Awesome .NET https://dotnet.libhunt.com https://github.com/quozd/awesome-dotnet It seems to be what you're looking for
I can see where doing that might have utility in certain cases, but I prefer the using directives at the top of the file. I'd rather have the rule be one namespace per file and no classes with the same name as a using-alias in a file.
So you're allowing people to both put them inside and outside the namespace as they please?
My general advice is to avoid StyleCop entirely. The things it flags fall into these categories. * Stuff that is handled by the auto-formatter. (Turn it on using PowerTools) * Stuff that is handled by Code Analysis Rules * Stuff that is unnecessarily pedantic * Stuff that is StyleCop gets wrong (No, I'm not going to make fields look like local variables.) While I'm all for cranking up Compiler Warnings and Code Analysis to the max, I've never once seen a StyleCop configuration that was actually useful.
Uses Azure AD under the hood and looks a lot easier than what I had to build myself back when I was developing commercial SDKs for Windows desktop applications. Authenticode signing is essential for that, as it helps reduce the likelihood of being false-positively flagged by AV tools (supposedly, can't really confirm) and is often required by many IT departments so the origin and date of the DLL can be verified. 
This is an awesome way to look at things. C# is a lot looser with standards, but when I code in Java..it's rough. Companies will demand specific IDEs, bracket styles, etc. Frankly I reaaally hate how C# enterprise code looks. For some reason the _private_field thing bothers me a lot. The only thing I have to worry about in C# really is pascal case. I always default to camelcase.
1) Sockets 2) Even Mainline DHT needs a bootstrap server (router.bittorrent.com) Try FreeDNS if you want a testing environment. 
Read alot of example code. You will learn stuff you never thought of.
Ahh my bad! Assumed you just asked them to build a recursive tree. 
Fixed some bugs :)
Two options immediately come to mind: 1. Wrap your `Dictionary&lt;Tuple&lt;DateTime, int&gt;, Value&gt;` with another class and maintain two separate collections inside of it. One is the dictionary, another is say, a lookup table (maybe `Dictionary&lt;DateTime, List&lt;Value&gt;&gt;` or `Dictionary&lt;DateTime, HashSet&lt;Value&gt;&gt;`). By maintaining these two sets of collections, you can now easily query for all values matching the `DateTime` and ignoring the `int` component. You can also just maintain the second collection alongside the existing Dictionary, where ever it is. Do whatever is easiest for you. This has the benefit of fast lookup time, but requires additional overhead adding/removing/changing entries and possibly some significant code changes. 2. Iterate all the `Dictionary&lt;DateTime, int&gt;` entries and check the `DateTime` values manually. Something like `var valuesMatchingDateTime = myDictionary.Where(kvp =&gt; kvp.Key.DateTime == myDateTime).Select(kvp =&gt; kvp.Value).ToList();` Then you can average/sum/aggregate (whatever you wanted to do) on those values. (And combine in into the LINQ query above if you wanted to avoid the `.ToList()` part) This has the benefit of no code changes needed, and no overhead when adding/removing/changing entries, but is slower when querying the data. Depending on the number of entries you have, and how often you're adding/removing vs querying, you may want to choose one option or the other. If there aren't many entries in your listing, then performance should be a non-issue either way.
The coding style is a bit ancient (like 1.0 kind of ancient), but otherwise ok. Now days we'd make a `public string Name { get { return name; } }` property instead of `public string getName()`. In both cases we're assuming that the intention is that the name property is read only. If name were to be readable *and writable* then our property becomes `public string Name { get { return name; } set { name = value;} }`. We can then eliminate the `public Person(string nm)` constructor and instead initialize the person objects thusly: `Person p1 = new Person() { Name = "David" };` In any case, however, there is no 'better' way of instantiating both objects until you start getting into fancier things. If you just always need two Person objects named David and Mathew, however, this is how you do it. Also look up a modern C# code style guide. As I said, this example is a bit ancient and we've since standardized on ~~camel case~~ PascalCase.
In your example yes, there really isn't a better way. When things start getting more complex the idea of using the "new" key word can be considered code smell due to the lack of dependency injection. 
&gt; As I said, this example is a bit ancient and we've since standardized on camel case. For most stuff we use PascalCase, not camelCase.
This is the problem with being an older programmer: people invent names for things I know and I don't hear about them until someone corrects me on Reddit.
Note that switching the `Name` assignment to be set using the Object Initializer (`new Person() { Name = "David" }`) it implies that the `Name` property is _optional_. Whereas requiring it in the constructor implies that it is _required_. (Perhaps with null/empty checking)
Depending on the API, you should generally [never expose internals](https://msdn.microsoft.com/en-us/library/ff649391.aspx) of the functioning of you API through an exception. You client doesn't care that your INSERT statement got a PK violation in the database, and in many cases (e.g.: public APIs) they should *never* have access to that kind of information. You need to tell the caller that an error occurred, but you don't need to share the internal details of what went wrong. In some cases your error may contain useful information for the client that you will need to translate from the internal exception. In other cases, you will want to hide the internals entirely and just say 'bad things happened'. The consumers of your API may do their own logging. But you have no idea whether or not that's true. In particular, if you hide the internal details of your exception as discussed above, then you will need to log the exception locally in your service for troubleshooting purposes.
It will not trigger detection. 100's of apps hook d3d with no issue, some used by millions. To ban anything hooking into the d3d module, a module in their process that is not even theirs none the less, is never going to cause a ban in any reasonable anti-cheat. It would blanket millions of legitimate users. I am not positive why exclusive full-screen does not work atm actually. Will look into it. I always use fullscreen border less mode thing in every game, so never had that issue yet.
I misinterpreted your original question and thought you wanted to make a web application.
I'm currently below the beginner level of C# and I'm trying to better understand the purpose of get/set. I can see if I have multiple class references where names will change respectively. Otherwise the way I see it, Person() is just a redundant method why can't I just declare them explicitly?
What if my set method had more parameters? For instance: private void SetProperty1(string s, int a) { if(a == 0) { this.MyProperty1 = s + a.ToString(); } else { this.MyProperty1 = s; } }
That's ok.
I'll write something when I get home to the pc. About an hour.
Just make sure that you document that this normalizes nulls. Otherwise you could get some confused developers.
I strongly disagree with his claims. Yes, you should throw informative exceptions such as your UserNotFoundException. But you should also include the underlying details as an inner exception. Don't just discard it; that's useful information. The exception to this rule is sensitive information. You wouldn't want passwords to leak, for example.
Here's an article on API design with exceptions: https://www.infoq.com/articles/Exceptions-API-Design
Ok, so what you want to do is group by multiple properties then average the groups? var result = from pair in dict group pair by new {date = pair.Item1, num = pair.Item2, aggValue = theAggregateValue} into g select new {g.Key.date, g.Key.num, g.Key.aggValue, g.ToList().Average()}; // assuming the pair.Value is a number
In my defense, I only recently learned about the null coalescing operator, so I do kinda forget about it, sometimes, lol.
Not my intent to make you feel bad or anything, just spreading info!
Oh, I know! Didn't mean to sound like I was hurt, just a minor brain fart causing me to be forgetful, lol. Typically, I'm all over new, cool things like that.
Awesome. Never had a reason to use a bloom filter, but I'd love for a candidate to hit me with this in an interview.
Using a [TcpClient](https://msdn.microsoft.com/en-us/library/system.net.sockets.tcpclient\(v=vs.110\).aspx) or [UdpClient](https://msdn.microsoft.com/en-us/library/system.net.sockets.udpclient\(v=vs.110\).aspx) will be easier. They are built off of the Socket class in the System.Net.Sockets namespace.
PascalCase has been a thing for at least as long as you've been a programmer and certainly longer than Reddit has existed. You said the concept is a thing you know, so what do you call it if not PascalCase? 
While I did learn/write Pascal, I never head anyone call how variables/methods were named "PascalCase". It was just how you wrote Pascal. I didn't have a name for it. The only naming convention that I learned that had a name was Hungarian notation.
Yeah those options work well too, and yeah a nosql solution world require the connection string stored in a config file or environment variable, but it's less likely to change than the data you would stash in the nosql db
Mostly with me I find it's just names for things. Like suddenly I was talking with newer programmers and they bring up these things called design patterns. I never had proper names for them, but it sure makes it easier to talk about. I also suspect it's partly where I grew up and learned programming. I certainly wasn't in the heartland of the early CS communities, but at least I had access to Gopher? :D
The same way SQL does: AND has precedence over OR.
We use etcd, which is a distributed key-value store, accessible through a very simple REST interface. Consul is a similar piece of software. The benefit is that you can update config values on any machine, and all other machines update automatically. Granted, your app needs to be able to take advantage of that.
How does it secure the REST interface? embedded credentials?
No, I've interviewed hundreds of applicants over the years. Sure, on occasion, I've come across a few spoofers but it's extremely rare. I just choose to employ developers instead of a talking encyclopedia. 
Yeah, and what if I want to use parenthesis to override that? Once you try to implement all the operators using just extension methods, things get hairy.
The term PascalCase originates from Turbo Pascal... Just how old are you?
If you like studying other peoples code then codeplex.com or codeproject.com If you want to learn through books then http://freecomputerbooks.com/ I know of no equivalent to codecombat http://www.codeproject.com/Articles/4300/Quick-C HAve Fun
I understand all that, I think. My problem is that I do not understand why all that is better than just var p1="David"; var p2 ="Matthew"; or Console.WriteLine("David"); Console.WriteLine("Matthew'); 
Properties have been in C# always, AFAIR. 
It should be a get-only property to reflect the example. 
PascalCase for all properties, camelCase for method arguments and local variables, house rules for internal fields but be consistent, and don't expose public fields unless you have a good reason for doing so. Follow those conventions and most developers won't try to strangle you over the internet. Also if you see a different style in ancient legacy code that you no one fully understands, for the love of god don't try to fix it. Bad things.
I agree with only throwing ArgumentOutOfRangeException from code you write, but I don't agree that IndexOutOfRangeException is a design flaw. It's like ArgumentNullException vs NullReferenceException – arrays throw IndexOutOfRangeException and nothing else should.
If you think that the primary function of the program is to print out the names of two people, you have misunderstood the task.
You can try www.codehunt.com, I have not used it my self, but it looks kind of gamey. EDIT: There is also codingame.com, but I am not sure how good it is at teaching.
From the screen shot it doesn't look like it can handle UTF-8 with "signature" aka UTF-8 BOM, which is used a lot on Windows. Or it doesn't handle proper UTF-8, which would also be a problem.
I converted a bunch of files to UTF-8 and notepad++ shows them now as UTF-8-BOM. See also: http://stackoverflow.com/a/2223926/141243 
try these then http://csharpprogramminggames.com/ https://msdn.microsoft.com/en-us/library/bb975644(v=xnagamestudio.31).aspx http://www.foxebook.net/learning-c-programming-games/ http://www.foxebook.net/learning-c-by-developing-games-with-unity-3d-2nd-edition/ http://www.foxebook.net/learn-2d-game-development-with-c/ http://www.foxebook.net/pro-unity-game-development-with-c/
For ADHD http://addnaturalremedy.com/ https://medicinesnaturally.com/natural-remedy-for-add-adhd/ 
Thanks for sharing this!
No problem! I'm still learning a lot myself.
Mindless drone upvotes..
I'd love to help spread information about programming/Software engineering. I am a Dane with a passion for the C# language and software engineering in general. Though I am proficient in Web development, basic game development and a few other technologies. Write to me on reddit if you are interested :)
Sent you a pm. 
You've convinced me. I'll update the article accordingly.
Professional dev with 15+ years of experience. working with .net since 1.1 send me a pm, glad to help
/u/FizixMan I think this one's a candidate for deletion
Usually with APIs, you'll want to obfuscate internal exceptions from the public eye. A popular way of doing while still reporting info back to the client is to replace the actual exception message with an application code. In terms of specificity, an app code will tell the client the bare minimum information about the error, while the details are logged server-side. For example: - Unhandled exception occurs on the server - The details exception with stack trace is logged on the server - The response message returns 500 code with a body that includes "Application Code: 8000" which the client knows is simply a server side error. - A handled exception occurs on the server. For example, the client tried to POST against a resource that was currently being modified by another process. - The details of the exception is logged on the server - We don't want to expose exactly what the problem is, but we want the client to know that it's not a permanent problem. The response message returns a 409 CONFLICT with application code 8059 which the client knows means there was a server error, but it is recoverable and should try again in a moment. - A handled exception occurs on the server where the client tries to execute an operation but the server determined that the account was in an invalid state (e.g. user needs to pay his bill) - The details of the error are logged server-side - We don't want to say "pay your bill", but rather direct the user to review their account so, the response is a generic 400 response with application code 8112 where the client knows that it means there is something wrong with billing and should not try the request again until it is resolved. When I saw "the client knows," I mean that there is documentation somewhere that explains the codes. You can also include a message along with the response that can say as little or as much as you feel is appropriate. For example: STATUS 409 CONFLICT { "application_code" : 8059, "message" : "There was a problem processing your request. Please try again in a moment." } So really, you can use a combination of application codes and HTTP spec to handle the reporting of errors to the client. This will give you a uniform means to communicate an error while still allowing you to either provide details or obfuscate details based on the situation.
/u/Lakelet 
Indeed. The first part of what i said is correct, the second, not.
You could try codewars. It's not a game but you are presented with a lot of interesting problems to solve in various languages. You get points when you solve the katas which give you some perks. If you use this link I get some points too www.codewars.com/r/GQ5VZA ;-) 
Yeah, that's not very desirable. It least it needs to be explicit or, better yet, both options should be available. 
You really, *really*, **really** want to be using MVVM when you're using WPF. It's not just a good idea, it makes WPF work so much better and is so much easier than brute forcing it like this. Get rid of `public static DataGrid grid { get; set; }` and associated code. It's a good sign that you're doing something wrong in WPF. **Do not use Loaded events like this in WPF. It does not do what you think it does. It does not work like Winforms.** For your purposes, stick what's left of your initialization code from that event in your MainWindow constructor *under* the `InitializeComponent()` call. Now then, on to your xaml: &lt;DataGrid ItemsSource="{Binding SMCClientRecordList}"&gt; &lt;DataGrid.Columns&gt; &lt;DataGridTemplateColumn Header="Station"&gt; &lt;DataGridTemplateColumn.CellTemplate&gt; &lt;DataTemplate&gt; &lt;Border Background="{Binding BackgroundColor}"&gt; &lt;TextBlock Text="{Binding Station}" /&gt; &lt;/Border&gt; &lt;/DataTemplate&gt; &lt;/DataGridTemplateColumn.CellTemplate&gt; &lt;/DataGridTemplateColumn&gt; &lt;DataGridTemplateColumn Header="UserName"&gt; &lt;DataGridTemplateColumn.CellTemplate&gt; &lt;DataTemplate&gt; &lt;Border&gt; &lt;Border.Style&gt; &lt;Style TargetType="Border"&gt; &lt;Style.Triggers&gt; &lt;DataTrigger Binding="{Binding NeedsColor}" Value="True"&gt; &lt;Setter Property="Background" Value="{Binding BackgroundColor}" /&gt; &lt;/DataTrigger&gt; &lt;/Style.Triggers&gt; &lt;/Style&gt; &lt;/Border.Style&gt; &lt;TextBlock Text="{Binding Station}" /&gt; &lt;/Border&gt; &lt;/DataTemplate&gt; &lt;/DataGridTemplateColumn.CellTemplate&gt; &lt;/DataGridTemplateColumn&gt; &lt;DataGridTextColumn Header="EvtTime" Binding="{Binding EvtTime}" /&gt; &lt;DataGridTextColumn Header="LocCode" Binding="{Binding LocCode}" /&gt; &lt;/DataGrid.Columns&gt; &lt;/DataGrid&gt; Something like this should get you started. Please note that for this to work there must exist a public property in your MainWindow (since you don't have a proper ViewModel) that connects to your `SCMClient.record_list`. With the station example column, I've given you direct control of the cell background (as best as you can in a DataGrid). It depends on a property called `BackgroundColor` existing in the data backing a given row. I suggest strongly making a class that wraps your SCMClient records instead of using them directly as it makes things like this much easier to work with. (Also separation of concerns. See MVVM.) With the second column example I made it a little fancier. Instead of always having whatever colour is specified in `BackgroundColor` it will only show that colour if the value of the `NeedsColor` property for that item is true. Again wrappers make this easier to work with, but you can also do something similar with something called a `ValueConverter` instead of using the `NeedsColor` property. I'm covering a lot of ground here, but hopefully this is enough to point you in the right direction. There is a lot of material on StackOverflow on the common issues that you're likely to encounter doing this. My final piece of advice is this: *don't use DataGrids if at all humanly possible*. They sucked in Winforms. They continue to suck in WPF. They are full of caveats, gotchas and hidden behaviours. Some things just simply don't even work and I'm not holding my breath that they ever will. Learn how to make `DataTemplate`s and use pretty much anything else (like a `Listbox`).
Don't have any code at hand but it's usually done in xaml by writing a cell template that binds the background to a property with a typeconverter. The reason is that the cells are virtualized, in a large grid the invisible cells are only initialized when they are scrolled into the view.
The "Library flaws" chapter hilights nullreferenceexception and provides alternatives. The "Other library flaws" chapter just enumerates common problems but doesn't provide alternatives.
Yes, that bothers me too. But some problems don't have clear cut answers.
Define normal. C# has a lot of use cases and the recommended knowledge for each can be very different. EDIT: Some use cases of C# are Web programming - ASP.net Embedded programming Desktop programming - WinRT Desktop programming - Win32/Win64 Mobile programming, such as Xamarin 
What I meant was basically any other area, besides game development. The important part in my inquiry is the type of tutorial, and not specifically the specific content.
Thank you, sir. You worked hard on your responses and I appreciate it.
If you need more, I'm a desktop C# .NET developer. Something of a rare breed these days since the web guys get all the attention.
Unfortunately its not open source (i really wish i could but its for my company), but i am happy to answer questions on how i did particular things, or post code for a particular chart or control if people are interested!! This was my previous post on the old version of my app, its improved quite a bit since then. https://www.reddit.com/r/csharp/comments/3ggyfd/my_first_attempt_at_material_design_in_wpf_c/ Also i can post a video of the chart animations as well, i am using a custom animation framework that i wrote for advanced generative animations, including the ability to do skewed and staggered animations, bindable animations, condition executors, conditional animation, and a bunch more stuff. I hope to open source that library, since I think its pretty cool and i wrote it in my free time so no company issues there.
[removed]
To re-iterate what I said last time you posted: ho-ly-fuck that is absolutely sexy. Not only is it just completely DRIPPING with athletically pleasing design, it also looks very functional (a feat few people manage to achieve!) If this was an open-source framework I'd 100% use it in every application I could. Even if there was no need for charts/graphs, i'd find a reason to have some just so I could use your framework. You've got some serious talent bro, don't let it go to waste.
I recommend this book: https://www.amazon.com/Head-First-C-Jennifer-Greene/dp/1449343503 Although it's cutesy to a fault, the info is solid and understandable. Do not skip the exercises: actually do each one.
`B.UpdateB()` is a public static method running in a loop that executes over a set of `A` instances. So is `B.CreateB()`. I don't know what `UpdateB` is doing (the method here is empty) but `CreateB` is not creating a `B`. I think they are probably better as instance methods in `A` (or the property `A.B` should be a collection type on its own, something like `class BCollection:ICollection&lt;B&gt;`; use a backing list to proxy all interface methods to and move the logic from `CreateB` into the constructor there).
This is gorgeous. Are you using anything like http://materialdesigninxaml.net/ ? I'd be interested to see how you did your "title bar" design, with the menu and such.
I hear that. First time writing code was attempting Java. I prefer C# and Visual Studio layout. 
Basically, I need to load about 2000 images into a list when the program starts and I only need to do this once. I think universal Serializer is what I need thanks. 
Try problems on SPOJ and HackerRank and other websites to get some experience. Take a topic and search for it say like "C# Classes" and then look for You-Tube tutorials. There are a bunch of good ones out there. I found the tutorials from New Boston to be really good for learning basic C# principles. You can then program what they show in the tutorial, play around with it, and get familiar with the language of your choice. What I like is that I can replay the things 5000 times until I understand. If you are an English speaker, do not be put off by the tutorials by Indians. Their accent was difficult to get use to at first but with experience, it clears up. They have some of the best organized and most complete tutorials out there.
Fork &amp; improve. It was helpful to me as it is now.
&gt;I'd be interested to see how you did your "title bar" design I'm assuming a combination of time and tears.
Have my sympathy upvote.
In addition to what others have said, here are some random observations. If you were to do as RavynousHunter advises, and move the SetProperty1 logic to B's MyProperty1 setter, you could change this bit: var b = new B(); b.MyProperty = number; b.SetProperty1(str); to be more clear, thus: var b = new B { MyProperty = number; MyProperty1 = str; } You could even replace CreateB() with bit of linq: public static List&lt;B&gt; CreateB(int [] parameter, string str, int number) { return parameter.Select( p =&gt; new B { MyProperty = number; MyProperty1 = str; } ).ToList(); } 
I think it's important to note what enterprise apps *can* look like. In this world of fancy apps and websites, a lot of us still work in enterprise where typically apps look, well, completely crap. But it doesn't have to be what way. 
I feel you, desktop applications is getting rarer and rarer.
Nice!
Thanks a lot, that was really helpful.
Generally developing the 'shit' looking apps is quicker &amp; more functional in my experience. Especially when things get changed around so much initially and more features requested which could flaw your initial design.
How about a folder and/or repo in source control where you could commit the updates? You could also think sql database since most teams working on projects already have a sql database somewhere I think a key to success here is to offer all the options because different teams have different needs and/or policies. For example I would not mind redis one bit but would also be quite comfortable with a server and data going over the wire
Changing the color should be done with bindings in the XAML like iinlane says. But I think you can iterate through a grid with something like: foreach(DataRowView row in grid.Items) { for(int i = 0; i &lt; row.Row.ItemArray.Length; i++) { Console.WriteLine(row.Row[i]); } }
Not a tutorial but you can look at my [RPG game](https://github.com/LiamKenneth/MIM) made with C# It's hosted on github, just download the code and run the project requires C# 6 should work out of the box so you can run the game and look in the code to tinker around. I actually made the project to learn C# myself I find it's easier to learn by diving into a project than reading books etc. Good luck
&gt; Are you saying one method of my extension sharing data would be to use slack (messages only meant to be read by the extension and not necessarily human-readable)? Or, are you saying my extension could broadcast human-readable messages and interested users would just look at that? I would prefer both, to be honest. Obviously the messages should be parsed by the extension, but would be nice if they were easily human readable as well.
Ahh ok, yeah that makes sense. Time to read up on Slack APIs!
Sorry, I'm spamming you a little, one more question. I've created a public property inside my MainWindow class named 'SCMRecordList', and my DataGrid ItemsSrouce in XAML is "{Binding SCMRecordList}", but no data is moving into my table anymore, how do I insert rows now? 
Add me on Skype. I'd be happy to help go through this with you. Send me a PM
When you say no data is moving into your table do you mean that you get no rows or that you aren't getting anything after that first row? Do you have any binding errors in your debug window?
Can you show you me how you're initializing your list?
Well, at this point I've gone a different route, which looks like: http://pastebin.com/W1WQmswc (c#) and http://pastebin.com/WpQ4StTx (XAML) This was seemingly a shorter and less XAML-y answer. (I don't know XAML at all...) But it changes the color of the whole row instead of just the cell. But, to answer your question, it looked like this: public partial class MainWindow : Window { public List&lt;Record&gt; SCMRecordList = SCMServer.record_list 
Is there a reason you're determined to do this in WPF? I ask because you'd save yourself a lot of pain just doing it in Winforms where this sort of thing would actually work.
wow, that looks awesome. i was actually looking for something like this 2 days ago and the only thing that i found was OxyPlot but this looks a lot better. thanks.
I guess I can just switch back to Winforms. I just heard WPF was Winforms "but better".
How, in XAML, would I tell it to focus on the individual cell? I thought for sure that by calling "DataGridCell" I'd be referring to a specific cell... what a mess.
Alright, opening a new solution in VS right now. I've never used Winforms, so hopefully learning this will be easier.
If you look at the example I gave you, you'll notice that I embedded the style directly in the DataTemplate for the specific columns I wanted to be effected. That's one way of doing it. The way I'd "fix" what you had there is by giving your style an `x:Key` designation and then adding that to the style reference to the resources of the specific column(s) you want effected.
You could look at EarTrumpet source code and see how they did it. https://github.com/File-New-Project/EarTrumpet You could even grab their entire interop Library for your project.
&gt; I'm really loving your posts, btw - learn something new from each one. Thanks! 
This blog post really undersells the danger of doing this: 1. Changing the method table of types will cause GC heap corruption. You just happen to fall into a tiny, tiny corner case where swapping an int/float method table won't cause the runtime to AV, but 99.9% of other case where you start messing with method tables in managed code you are going to AV the runtime. 2. Modifying strings in place is a terrible idea. Strings are reference classes and changing their contents will break things that rely on them (such as Dictionary&lt;string,Foo&gt;), among tons of other problems. Also, you are dead wrong about "Provide a safer way of writing low-level unsafe code/Without this library you have to resort to fixed and pointer manipulation, which can be error prone". First of all, the risks are unchanged...this isn't safer than using fixed/pointer manipulation. All this does is make it take less code to do these things, not any safer. Second, your examples here **are** pointer manipulation, and you are ignoring the most important part of the "fixed" keyword: **You still have to pin objects if you touch them, via 'fixed' or pinned handles.** This library still requires you to use fixed and pinned handles properly. So let's change one of your examples to something seemingly innocuous: int* address = (int*)Unsafe.AsPointer(ref someObject.someField); int expected = 20; Unsafe.Write(address, expected); Assert.Equal(expected, value); Assert.Equal(expected, *address); Assert.Equal(expected, Unsafe.Read&lt;int&gt;(address)); This code will work *most* of the time. Until a GC comes along and compacts the heap between the first and third lines. I spend most of my time diagnosing failures in managed code for my job. It would make me super-sad if any of this code actually makes it into the wild. The inevitable failures that result from improper use of it are impossible to track down. =(
You'd have to extend Roslyn but it wouldn't be impossible.
I really like NSubstitute. It feels way more natural and expressive than weird syntax and excessive lambdas that Moq uses.
You mean commit a binary file (or whatever) whenever the user opens a document/moves the cursor etc. and listen for commits from other users? Guess that could be another option. Still requires users to configure the repo and connection details etc, but you're right they'll probably already have access (at least if they're using it for a git repo rather than a VSO one).
Not necessaraily, see here https://github.com/dotnet/corefxlab/blob/master/src/System.Slices/System/PtrUtils.cs#L45-L60 and https://github.com/dotnet/corefxlab/blob/master/src/System.Slices/re_write_il.cmd
Word of advice: Learn a bit more before you start with a full-fledged D&amp;D style RPG. Those things get real complicated real fast. Maybe focus on smaller projects (maybe on smaller parts of your bigger RPG game). For now, I can only advise you to keep learning. Focus on classes and inheritance.
For one thing, default arguments are a relatively new feature. Before they were added to the language, constructor overloads were the only option. If default arguments work for your case, then you should use them. They definitely require less code than multiple overloads. But as /u/elitefusion says, it's not uncommon to have a set of constructors with quite different parameters and the only way to do that is via overloads.
Yeah. A combination of live and historic data. So it needs to be real-time and static. 
Another good example is some math class dealing with points: public MyClass(Point p) : this(p.X, p.Y) { } public MyClass(float px, float py) { }
Why would you need inheritance to roll dice? All you need is a class with a `Random` object, and a function to roll XdY using that RNG, with X and Y being parameters to the function.
Thanks Dave. I will keep this on hand. I have to do some refactoring first. 
So you're suggesting something like this right? public class BCollection: ICollection&lt;B&gt; { public List&lt;B&gt; B {get; set;} public BCollection(parameters) { //create logic in here? } } And then Inside A class A { public int MyProperty { get; set; } public BCollection B { get; set; } } Thanks for sticking around and answering my questions by the way. I have a lot to learn. 
That is probably better. A common guideline about constructors is that they should be fast (so you should avoid stuff like db queries or exponential complexity algorithms in them), but at the same time you generally don't want to construct something that is implicitly in an invalid state. Here is a pretty good slide overview of general principles you should be following while programming. You might want to search the phrases in the slides to get more information: http://www.slideshare.net/clintedmonson/advanced-oop-laws-principles-idioms-presentation What I've read of the [Telerik book](http://www.introprogramming.info/) looks pretty good as well, particularly chapters 19-21 (the whole thing is online and there is a lecture video and slides for each chapter, though I warn you it is long). That in that BCollection class all the interface methods/properties would simply call the equivalent method/property on the list and you wouldn't expose the list itself: public class BCollection : ICollection&lt;B&gt; { readonly List&lt;B&gt; _b; public BCollection(...) { ... } public IEnumerable&lt;B&gt; GetEnumerator() =&gt; _b.GetEnumerator(); IEnumerable IEnumerable.GetEnumerator() =&gt; _b.GetEnumerator(); public B this[int index] { get { return _b[index]; } set { _b[index] = value; } } public bool Contains(B item) =&gt; _b.Contains(item); ... }
The vast majority of the time your chained constructors will involve compile time constants as well. So no real loss there.
Visual Basic VB had optional parameters and C# wanted to be different. Later they figured out what a horrible problem this was for COM interopt and changed the design. But even now a lot of .net literature is anti-optional parameters.
The main reason is that code was written before 2010 and optional parameters didn't exist, so they got around this by lots of overloads. &amp;nbsp; A drawback to optional parameters is that you can't do this void foo(int a, int b, int c = a - b) ... you will have to do this: void foo(int a, int b, int c) ... void foo(int a, int b) =&gt; foo(a, b, a - b);
Where is that Edit: Found it.
I'd love to see a video/gfy demo of this being used. I like the description of it but don't have anyone readily available to test it with. Also an option for using colors/letters instead of avatars would be cool.
mabye its my understanding that is lacking. if i make a new function/button, how do i send a stop command, to the ManagementEventWatcher, and stopping it? I guess i need to find the instance that i created somehow, and then stop it?
One thing you should keep in mind is that DI frameworks do not handle multiple ctors well. So I prefer having one and have some kind of factory to offer different ways of creating an object. As a well designed class needs the same values set in the end, one ctor is sufficient. Scala jas a concise mechanism: there is only one *primary* ctor and all the others are only allowed to call another ctor or the primary. So consequently the primary ctor will be always called, which ensures all needed setup for a working instance is done. The C++ FAQ has a good [example](https://isocpp.org/wiki/faq/ctors#named-ctor-idiom) for this topic: coordinates. They call factory methods *named ctors*
Put together a little demo gfy: https://gfycat.com/MindlessLegalCuttlefish
MSDN is what you need. https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx Or you can try to read https://www.amazon.com/CLR-via-4th-Developer-Reference/dp/0735667454
Optional arguments are a (relatively speaking; C# 4) new feature in C#. We didn't have the option for a long time. Overloading also lets you have disjoint arglists in your overloads, and simplifies the use of default values that aren't const-able.
If you have two constructors with disjoint arglists, unless one of them is the default constructor, they probably don't contain quite the same logic. One of them may be calculating some of the object's properties based on the supplied parameters, or something. (Consider some of the TextReader() overloads in the .Net platform, for instance.) If everything is an optional parameter on the same constructor, though, you not only have to still do those calculations or decomposition of objects to get what you need, you also have to detect which use case or use cases is covered by the supplied parameters. An invalid combination of arguments becomes a run-time error, instead of being a compile error, and you have some weird interaction between parameters that wouldn't exist if they were split into separate calls. public Class(object o1, object o2) { Property1 = o1; Property2 = o2; } // real talk: this would really be implemented as // public Class(CompositeObject co) : this(co.Property1, co.Property2) {} // unless the decomposition of CompositeObject was too complicated for that. public Class(CompositeObject co) { Property1 = co.Property1; Property2 = co.Property2; } vs public Class(object o1 = null, object o2 = null, CompositeObject co = null) { if (o1 != null &amp;&amp; o2 != null) { Property1 = o1; Property2 = o2; } else if (co != null) { Property1 = co.Property1; Property2 = co.Property2; } else { // run time error that could have been a compile error throw new ArgumentException("Invalid combination of arguments"); } } It may make a lot of sense to have a private constructor that is commonly called by your class's public constructors for common initialization logic, though.
I actually run into this frequently with MVC viewmodels. Different controller actions, with various args, create their VMs and supply DI objects to the constructor in unique ways. Ergo, it's more common than you think.
Java now has them as well. There seems to be a religious argument about using them though...
Thanks!!
I would strive for designs that *never* returns null! If there are subclasses that could not provide a proper return value, imho they should not be subclasses! If there is some process going on that could fail, better throw a proper exception! Last option would be an ``Optional&lt;T&gt;`` as return type of the interface to make the probable failure clear for clients.
That means that the default behavior is to `return null`. I would argue that the abstract class should implement what could be the general behavior if such a thing exists, which it does in this case.
I see your predicament. I would probably choose to make the method abstract then. I don't think there is any clear answer to this question, and the chosen solution is much more about coding style than anything else.
I tend to agree regarding returning null. There are, however, a number of other members in this base class that make the "null" implementers valid subclasses; even so, their purpose makes them valid too. `Optional&lt;T&gt;` would be interesting. Perfect use case for F#. ;)
You've more-or-less picked out the difference. Specifically, the parameter-less method allows subclasses to configure themselves however they see fit without constraints, e.g., loading all rows from a database, while the `WidgetInputParameter` overload constrains what the "widget" is configured with, e.g., let's say the parameter is a DateTime, so the "widget" loads database rows for the given day. The database examples are just that; a database may or may not actually be involved for any given "widget." I've been looking at the calling code, and there are actually two wildly branching code paths for calling either overload, so unfortunately I don't think we can get away with a sensible default input parameter. The widgets are too loosely defined to know what the might be.
If your method signature isn't a nullable you should never, ever return a null. It's breaking your contract.
Codefights has a c# option. 
For me it is the concept of keeping things simple and readable. 1: When you have a single constructor with multiple optional parameters, your constructor is going to be very large and filled with many if..then statements. This increases the complexity of your single constructor. Simple, single purpose methods are easier to read. 2: While the parameter list is named in the constructor, it is purely by position when calling. So you end up with calls like: new Thing(1, "stuff", null, "condition", null, 5000) and new Thing(10) and so on. Makes it harder to read.
The purpose of the article was not the compare libraries. As a matter of fact when it comes to validating arguments NSubstitute code is not that much better than Moq. I was just blown away by the stack trick itself.
If `return null;` is not an acceptable default behavior and you don't have a better default, mark the method `abstract` and let the downstream implementations take care of it as they (presumably) already do. If `return null` *is* an acceptable default ... return null. It's kind of gross, but we aren't going to know why that's (in)valid from here. Unless you are very early in the implementation, do not do this: public virtual WidgetData Initialize(WidgetInputParameter inputParam) { throw new NotImplementedException(); } If that's an acceptable default behavior, surely `abstract` would be, too. Throwing a `NotImplementedException` is a sign that the code involved is *incomplete* and shouldn't be happening in anything you've delivered as finished.
&gt; it is purely by position when calling. FWIW, C# got named parameters when it got optional parameters, at least in part because it simplified dealing with methods with lots of default parameters (because you can only omit default parameters if there aren't any positional args after with non-default values). IIRC, all positional-specified arguments have to occur first, in order, followed by named args in whatever order you like. So, if you have a signature like void Foo(object required, object option1 = null, bool option2 = false) you can default the second arg and specify the third like so: Foo(someValue, option2 : true); I don't really like to named arg passing, just because it's unconventional in C#, though, but this would *also* be valid: Foo(option2 : true, required : someValue, option1 : someOtherValue); which may cause some confusion, since we are used to assuming positional arg-passing.
Right click your project, go to "Add Reference" and locate "System.Windows", add the reference to your project.
This isn't really true. Expressiveness is a useful quality of a language, because it tends to track with solving a wider variety of problems, but programs are not art objects, and not all expressions of an algorithm are going to be equally good (if only they could be!). Constructor chaining and overloading can offer advantages over a single, massive constructor with optional arguments that solves all the use cases: * Chained constructors can isolate shared or repeated behavior, just like we do with classes and methods. Constructors are not an excuse for repeating code. * Constructor overloads can provide compile-time safety from inappropriate combinations of arguments, practically for free. Code you don't write is also bugs that can't exist, and errors prevented by the compiler are the cheapest and fastest to fix. Optional arguments also come with some tradeoffs elaborated on by u/cryo and u/CptCreosote. They're like publicly visible `const` fields that way. The truth is that a constructor is really just a kind of method for constructing an object. There's some extra work going on behind the scenes to allocate and initialize memory, but they're not conceptually distinct from a factory method of any other construction.
Interesting use of a private class too (from C# example). Thanks for the link.
I used to think I would learn all of that as a bright-eyed freshman in college in the early 2000's...right up until I saw we were learning on Solaris terminals using ANSI/ISO C... I feel like there are a lot of CS programs that neglect to provide students with at least a meaningful familiarization of major languages and frameworks. They hide behind this facade of teaching "a foundation for future learning" which is a bullshit way of saying they can't or won't delve into specifics, but in the end it churns out a lot of students pre-prepared with a case of Imposter Syndrome because they don't understand what the *do* actually know....or worse what they don't know.
So I'm actually modifying code that was originally built around TCPClient in System.Net.Sockets. However, TCPClient is not available in UWP. I am trying to rebuild it using StreamSocket because I saw on StackOverflow that it was supported in UWP. The Windows namespace error I am running into actually occurs whether or not I try to build the project for UWP, so I think it must be a Unity issue or a general issue with the files available on my computer. 
If you don't get someone here, give /r/programmingbuddies a shot. You can also have some discussions in the discord channel in the sidebar.
i can help. im a beginner too but i know alot of basic stuff. also took a c++ class so i do not some algorithm type stuff. whats the assignment? 
...and then the MonoGame port to WebGL...
If I am not mistaken Unity is limited to .NET 2.0 so you cannot use the UWP framework but only export to it.
/remindme 3 months
&gt; should never throw a NotImplementedException ... unless the exception includes a bug tracking number indicating when it will be implemented.
Thanks for the tip; this makes perfect sense.
Perhaps your overall design is not so good? Perhaps it violates the interface segregation principle or the separation of concern? Hard to guess with no more information 😉
Honestly if you signed up for a CS program hoping they teach you to become a great C# or Java developer I think you've wasted your money. The actual title says exactly what you are getting, it's not the goal to teach you the cool flavor of the week language or framework. That would quickly become outdated and useless and now there are code camps for that. I went to a research university for my CS degree, we learned the fundamentals of algorithms, data structures, programming styles and languages. We dove into language specific things where it made sense to the class. We looked at the Java HashSet because that was a data structure we were studying but we were also required to implement one ourselves. In my compilers class we looked at the differences of how google was compiling Java for the Dalvik VM vs how programs were being compiled for standard Java VM. You look at specific languages and frameworks for examples and use case scenarios. We used Hadoop because it was a free Map Reduce framework so that we could learn and study map reduce type of algorithms. That was really only in a class that was geared towards multi threaded / process development and we used map reduce as an example of that type of program not because the class was hadoop centered it as merely an example or use case. For my image processing class we used matlab and learned the specifics there only to make the development in matlab easier and not have to implement all the calculations by hand (I strictly mean matrix calculations not the actual algorithms for finding edges or matching objects). In machine learning we used python and python math framework to make matrix math quicker as well. Everything I learned I could take and apply anywhere without having to relearn things and get's you thinking about how to do things better. When talking with people I work with I can quickly notice the difference between me and someone who didn't have the same training or forgot all the knowledge when we tackle new things. My thought process normally goes to, this is how it is normally done or this is how something is done efficiently and then I google or look at the relevant API's to see if the language or framework already does it that way or has a built in data structure to accomplish the goal. The person from the code camp starts down the path of trying to figure out how to do something, which in my experience they normally find the first google result and blindly follow it even though the original question has nothing to do with our problem domain. Many times they waste their time implementing something where if they would have asked someone else they would have quickly been told that is wrong and won't work. Maybe it's because my education focused on critical thinking, maybe it's because my education taught me every basic concept used or maybe I was just born smarter with more capacity for critical thinking than my peers. I doubt that it's the third for every case. 
They are trying to but they first need to upgrade their IL2CPP part of the build stack. They are currently "researching" the upgrade the Mono Profile to .net 4.6. But i think this upgrade will not change anything about the System.Windows Namespace because of multiplatform reasons.
Yeah, no. As much of a cluster fuck as JavaScript is, it's not going anywhere. Every single attempt to replace it has failed, and that was before we had it everywhere.
Not necessarily. If you have a hardware accelerated GUI and can use a reasonable language you can build whatever GUI library you want.
Create a REST API that edits the file using a local account on the server. The local account logs in, makes the edit, logs out. It'll be transparent to the user.
Basically you're saying I should use a dummy account? Well, I thought about this some time. The problem is I'm not sure how Google protects accounts against hacking. Let's say I created the account in Germany, if someone from the US tries to log in it could be they automatically block access to the files till I approved it by sending me a mail.
No it's not a dummy account. The account is genuine. So users access your REST api with a command. The command gets passed to the server which logs into GDrive with it's own account and makes the edit on the users behalf. It's not hacking, it's a genuine account making a genuine edit on the users behalf
Please note that using this will **disable incremental compilation**. Your project will **always** be built again, even when nothing changed.
Well, seems like I made a pretty weak description of the location *where* the txt is stored... Actually I meant it's stored in gdrive itself, the API is implemented in my C# program and the user runs it on his own computer. Which means the best way is probably to use a throwaway (meant this by dummy) account defined in the code?
It'll always be logging in from the same location. The API will be doing that for you. The API is hosted on your server. As far as the GDrive is concerned the log in is happening from the same location every time.
By the time the click event fires the values of `i`, `j` will not be correct anymore. The good news is that you don't need to pass the indexes to the event handler at all because, before you overrode it, `sender` is the `Button` itself: lights[i,j].Click += light_OnOff; public void light_OnOff(object sender, EventArgs e) { var light = (Button)sender; light.BackColor = light.BackColor == Color.Yellow ? Color.Black : Color.Yellow; }
You're running into a common issue with using lambdas: variable capturing. Lambdas reference the used variables themselves, not just their values. This is actually a very handy feature, but can cause bugs when you don't expect it, especially in combination with loops. `(sender, args) =&gt; light_OnOff(lights, i, j); ` will use the values of `i` and `j` at the time the the event is raised, **not** at the time the delegate is created. In this case, after the loops have run their course `i` and `j` are both higher than the last indexes in the array. You can solve this by creating a local copy of the values within the loop: for (int i = 0; i &lt; lights.GetLength(1); i++) { for (int j = 0; j &lt; lights.GetLength(0); j++) { // ... int iCopy = i; int jCopy = j; lights[i, j].Click += (sender, args) =&gt; light_OnOff(lights, iCopy, jCopy); } } When `jCopy` and `iCopy` are declared **in** the body of the loop, they are considered unique for every iteration and every lambda holds a separate copy with the unchanged value assigned in that specific iteration. However, in this specific case centurijon's solution is simpler anyway.
Is this a new one or the one that has been posted multiple times already?
I'm actually kind of bugged that the C# compiler doesn't do this in cases where the enumeration is created and immediately reified, anyway.
This is just spectacular! 
Well it looks like they have an open source code base to start from, then. 
I think they may be doing a more general optimization of enumerators or something. They probably won't make use of this. 
&gt; why some people downvoted my question There are some rude people on here...
Same one it looks like.
Removed: It's already in the sidebar.
Is the example actually the generated output, or was it manually typed out? Because I don't see where the num2 variable comes from. num += num2 + 3;
I've been taking classes in c# for a couple semester, and just started android java. For me it would be c# since the tools for android java have caused me many frustrations.
 [LinqOptimizer](https://nessos.github.io/LinqOptimizer/) can do the same at runtime with the usage of Expression. It provides : * Lambda inlining * Loop fusion * Nested loop generation * Anonymous Types-Tuples elimination Specialized strategies and algorithms 
You can also consider using Nessos Streams, instead of Linq. Nessos does some good stuff. 
I'm presuming due to how this code works, it should be straightforward to leverage it into a generators package once that feature ultimately ships. It is difficult for me to say just how much I am looking forward to that feature.
Well normally a large suite of unit tests should lay to rest most of those worries- but I can't find any in the repo. Am I missing something obvious or are there none?
The "Usage" uses project.json, which is only used by VS Code. So really I have no idea if it works in Visual Studio, maybe? And if it does, how do I use it?
this. A lot of the time I end up just following java android tutorials. the implementations are so similar.
I think we did code ourselves into a corner a bit, but I've been aggressively refactoring related code the last couple weeks, so hopefully we're getting it ironed out. I'm about to revisit this particular area with a combination of the suggestions from this thread.
Yes it does, it requires the usage of an ienumerable extension to lift it into an expression. 
ditto. It also gets a little bit nasty when you have to deal with both .net strings and Java.Lang.String objects
Can I attach a debugger to this just fine?
I love C#, and encourage anyone to learn it. I think it really comes down to what you plan on doing with it, now, and in the future. Both languages are cross platform, and neither are hard to pick up. Actually, they are both very similar. The hardest part, I think, will be the actually Android portion of it. I always find UI to be the hard part. I think that if you 100% plan on sticking to Android dev, then Java would be the better option. Most tutorials and stuff will be in Java, using Android Studio. If you decide that you will eventually want to write web APIs, sites, and other forms of applications, then I say go C#.
You can integrate it as a build step for production only.
I posted this in /r/Typescript as well but thought it might be appreciated here as well. (Edit [/r/typescript post](https://www.reddit.com/r/typescript/comments/5349l4/generate_typescript_definitions_from_net_core/)) This is a project I recently started to generate typescript definition files from .NET classes. I decided to start the project because I was using TypeLite at work and wanted something similar for using in .net core projects. Most of the definition generation code has been lifted from TypeLite's sources I just wired it up to use it as a tools package in dotnet. Comments and Suggestions welcome!
Removed: Rule 4. Take a look at the Selenium library if you need to crawl multiple pages or interact with the page. Super easy to get setup and running (nuget) and the API is pretty simple too. Also maybe look at HTMLAgilityPack for parsing the page content.
No I don't think you understand. You get both. If I go make a blank windows 10 app or wpf app for instance I will get a .csproj of course. But I will also get (or can add) a project.json file. It's not a replacement for the csproj, its an additional item.
Whats the actual issue? It crashes when you open more than 1? Or something else? I have read your post multiple times and cannot work out what you mean by "trouble". I regularly have 3-15 instances of VS2015 open along with some VS 2012 and 2010 projects also. 
I won't be able to help much, I run it as is. I haven't had any use for any plugins, and I find the default key bindings pretty good. I would uninstall everything, see if you have the same problem, then if not, install your plugins slowly so you can spot any problem children. 
So from what I can make of it, there is no reason I should be avoiding multiple instances of visual studio. After the long long time I spent trying to diagnose what had happened the first few times I encountered sudden termination or settings unknowingly changing from under me, just left me with more questions than answers. So I kinda just stopped using more than 1 instance. There really arent any complaints in that. So,off the top of my head I don't have a recent example to share of what went wrong. But in another post I did explain just some of things that had me chasing my taill Say, I have assigned a settings backup file explicitly inside VS options. If I have many Visual Studios running, wouldn't it have conflict with which instance is getting the final honors? Do I have to be careful to identify my main instance and make sure I close it last?
I've been meaning to do exactly what you say. I did narrow it down to the problem extensions but along the way I just started avoiding multiple instances. But I really think that an absolutely fresh windows install and all would be heavenly, but thinking of all the effort to backup everything exactly and then reinstalling sooo many programs just gives me shivers, and I just slink back from it and find something new to read/watch/do on improving my knowledge of c#. I feel I know a lot but I just havent done much with it. Hence, why I thought I'd ask you guys before going through with it.
Seems like the obvious answer has been missed, just implement an abstract bool property indicating whether that function is supported. abstract bool SupportsXyz { get; } Throw a notsupportedexception if the function is called anyway. You'll find this behaviour on the Stream interface (CanSeek) 
Either it would say Visual Studio busy or it would say an extension failed. Firstly, I keep forgetting where the activity log file was located. So after I track that down, making sense of what happened is such a drag. And it's not even the freezes or the VS restarts that annoyed me. It was the whole experience and unknown/unintended consequences as I "summarized" here: https://www.reddit.com/r/csharp/comments/5350m1/i_always_have_trouble_running_2_instances_of/d7q2bg1
Hmm. No idea really. Try disabling plug ins and addons. Try clearing the cache files from your projects. Try repairing the install. Are you on the latest update?
Found the single line bubble sort in C++. It's as horrible as I remember. Never do this. Should be tagged NSFW it's so obscene: for(i=0,x=1;i&lt;arraysize,x&lt;arraysize;i++,x++){if(arry[i]&gt;arry[x]){arry[x]^=arry[i];arry[i]^=arry[x];arry[x]^=arry[i];}if(x&lt;(arraysize-1)){i--;}else{x=i+1;}}
Maybe I'm reading it wrong but it appears to work on IEnumerable, which is Linq to Objects not Linq to SQL. Linq to SQL is IQueryable. 
Also, compiled Java APKs tend to be significantly smaller than Xamarin apps. In my projects: C# has a much better standard library, so I need less dependencies. When I work with Java, I typically need libraries to make up for missing functionality. My Java apps end up about 1-2MB while my Xamarin apps range from 9-13 MB. Make sure the linker is enabled in Release builds, or your APK will swell to 37MB or more! :P 
I've never had incremental compilation anyway, I always get a message during build for every project that it's not supported or something like that.
Doh, you are of course correct. Thanks! The secret is spilled at https://github.com/antiufo/roslyn-linq-rewrite/blob/master/RoslynLinqRewrite/RoslynLinqRewrite/LinqRewriter.cs#L171, where it detects rewrite targets.
 var letters = Enumerable.Range(0, 26 * 26 * 26) .Select(x =&gt; new string(new char [] { // calculating all three characters at once. (char) ('A' + ((x / 26 / 26) % 26)), (char)('A' + ((x / 26) % 26)), (char)('A' + (x % 26)) })); var numbers = Enumerable.Range(0, 9999).Select(x =&gt; x.ToString("0000")); var plateNumbers = (from x in letters from y in numbers select $"{x} {y}"); foreach (var n in plateNumbers) { Console.WriteLine(n); } A `for` loop is perfectly fine, though. Lord knows we had to solve problems like this in languages without fancier looping constructs.
Oh, that is much more refined than my final Edit. I'm excited to try it when this finishes running. Writing every line, and i'm at WMC so it will be just a few more minutes.
"Introducing" is a misleading title, since this blog post is from 2014. It's a neat feature nevertheless.
To me, C# makes programming fun again. In my opinion, it's light years ahead of Java (LINQ, Task Parallel Library, React, lambdas, async/await) and with Oracle flubbing the leadership while MS goes open source, there's no better time to learn C#. I've built enterprise apps for iOS and Android with Xamarin.Forms, and it's worked great. The programmers get to hack on C# while the art/designers can tweak or hammer out the XAML. (Or you could do it all yourself.) And having worked on ASP.NET/MVC with C# for an enterprise web application compared to 5+ years of PHP in the past, it's great that you can basically do it all with one language (C#) and Visual Studio. Not to mention how easy it is to deploy to Azure.
ASCII, what is this, the 80s? Check out a Unicode chart :)
I think you should be able to use the `BitmapEx` class from here: http://www.codeproject.com/Tips/745914/NET-Bitmaps-with-Full-bit-Support
Removed: Rule 8. Not a nice tone here, and I don't think chiding them by suggesting they [implement the PNG specification](https://www.w3.org/TR/PNG/) is particularly constructive.
I'm sorry Core? Care to elaborate what it is?
Do data types, loops, recursion, arrays, conditional statements count as basic? Cuz that's all I really know. I realize I maybe a long way to actually developing apps but that's fine..
Sure! I actually only learned about it myself. Xamarin.Forms.Core is the truly cross-platform subset that works with Xamarin and all that. UI wise you are sorta limited, but you can build a mobile UI with it. Xamarin.IOS and Xmararin.Android are the more device-specific libs. With them you can actually do all your system calls and all that so you have full access to whatever sort of special graphics or sound or whatever else you want to do that may or may not exist on each platform. I believe these two also let you set things up with the native UI builder and all that so you can use some of the tools you already know if you are moving from, say Android Studio or Apple's designer to MSVS. So the business layer of your app can be built using Core, while you may need seperate projects for the UI's of each version of your app - unless the UI doesn't do much more than present some menu options to hit an API or something, in which case, just use Core for all of it and cross compile. Now, I believe you can compile down to an APK for Android right in MSVS, but I know compiling for iOS is only possible from an Apple computer running OSX. Bare this in mind when you are setting up your environment.
You probably want something like this: objects.AddRange(Enumerable.Range(1, 3).Select(x =&gt; new Object())); `Repeat` really just repeats the same object you give it. You want to build a new one at each step, so you have to use something like `Select`, where the method gets called for each element in the `IEnumerable`.
An option is to run it in a vm if your current visual studio doesn't like multi instances. 
That looks really great! Looks like it has some problems with the dark themes, though. I will have a look if it looks strange if I use it with the default MahApps (Metro, not Material) designs...
Haha, love it.
Or an EBCDIC chart if you are programming on an ancient IBM mainframe. (pronounced ebsedick) 
This is great and my response is kind of late. I will make that my next read and I don't mind that it is long because it can go a long way in improving the way I do things which will make me more efficient and save a lot of time. 
Fun fact: if you prepend your search with `?`, it'll force the omnibox to search Google instead of trying to access the URL. You can also press Control+E to start a Google search from anywhere in Chrome.
http://mikerowesoft.com ^^^ There's a slightly interesting court case about that one.
Just to clarify, the ? trick works in Edge too.
[Use quotes](http://lmgtfy.com/?q=%22system.windows.media%22)
I did notice though that nesting Loops would run quicker in writing the plate numbers faster than you example.
https://msdn.microsoft.com/en-us/library/ms171548(v=vs.110).aspx
I've stopped using NSA's botnet so this is good to know.
Windows Form Application
yes, sorry ;c
&gt; string val = "AAZ"; &gt; &gt; val[2]++; //now what does val equal? Just FWIW, this doesn't work in C#. Strings are immutable, and the character indexer on string is read-only.
This may even be a good time for one of those ancient `for` loops: for(var i = 0; i &lt; 3; i++) { objects.Add(new Object()); } Or if you're hardcoding the `3` rather than making it variable: var objects = new List&lt;object&gt; { new Object(), new Object(), new Object() }
Yeah, what you have there should be threadsafe for _writes_. (EDIT: Assuming there are no other private writers to the properties in the `Thing` class.) I don't know if you also want to have locking statements on your getters as well. If `ThreadedThingMethod()` is making alterations to your `Thing` values, you could potentially have other observers getting the `Thing`'s values in the middle of `ThreadedThingMethod()`'s execution. (Say it modified `value1`, but hasn't modified `value2` _yet_. Seems to me that the intent is to be able to set _both_ values simultaneously. In theory, readers could read incorrect combinations of values with what you have written.) IIRC, having a public/shared locking object can sometimes be a bit of a code smell or problematic in some cases because, _in theory_, some other piece of code could grab a lock on it and not release it. If it makes sense for your usage, perhaps the locking variable could be made `internal` instead of `public`? (Similarly, should `SetValue1` be `internal`?) Also, you can also ditch the `SetValue1` methods in favour of just putting the locking/reading/writing work in the `value1` properties themselves. 
In my experience Chrome is better at telling the difference between an address and a search than Firefox is when both are using a unified bar.
Don't know why you got downvoted; this is correct. By default, C# does _checked_ arithmetic at compile time and _unchecked_ arithmetic at runtime. The first two lines have the arithmetic as compile-time constants which would be evaluated/executed and the resultant values inserted directly into the compiled IL; they're compile-time arithmetic. The third line forces the arithmetic to be evaluated at runtime, so it isn't checked at compile time and overflows at runtime. EDIT: Here's a relevant passage from the C# specification. From https://msdn.microsoft.com/en-us/library/aa691349(v=vs.71).aspx &gt; For non-constant expressions (expressions that are evaluated at run-time) that are not enclosed by any checked or unchecked operators or statements, the default overflow checking context is unchecked unless external factors (such as compiler switches and execution environment configuration) call for checked evaluation. &gt; For constant expressions (expressions that can be fully evaluated at compile-time), the default overflow checking context is always checked. Unless a constant expression is explicitly placed in an unchecked context, overflows that occur during the compile-time evaluation of the expression always cause compile-time errors.
https://en.m.wikipedia.org/wiki/Microsoft_vs._MikeRoweSoft 
For the most part, people don't use datasets in C# anymore. We mostly use Object Models now and an object-relational mapping framework like Entity, NHibernate, or Linq-To-SQL (technically not an ORM but does most of the same work). The main reason for this switch is that we are able to directly get the data from the database into strongly-typed objects with no middle steps. They also provide a lot of useful utilities like lazy loading and built-in relational mapping. For example, say you have a Customer model class. The customer has an Orders property that is an Order model class. That Order class in turn has a Customer property. And you can fill these automatically from the database. To address your question on whether you should use the syntactic sugar over directly talking to the database, the answer is an emphatical **YES!!** The most important reason is the security built into them. These ORMs use parameters for everything so it protects you from SQL injection. Besides that though, I would say that convenience is the second most compelling reason. They have lots of built-in functionality that is useful. That's not to say they're perfect. Sometimes the SQL they write is horrendous. You can still run custom SQL though. The way you *should* accomplish this is to make stored procedures and call them from an ORM to put the results into a strongly-typed object.
See remarks http://msdn.microsoft.com/en-us/library/c5kehkcz(v=vs.80).aspx
Additionally to what /u/tweq said, please note that the first two lines **don't throw exceptions** - they're producing **compile time errors**. There's a huge difference.
Chrome
JSON is for data not logic.
This looks very cool. (But why GPLv3?)
which is kind-of funny, as they make use of a bunch of MIT licensed code.
It my actual aplication, its in a static class in another file.
Removed: Rule 4. Feel free to repost it, but make sure the code is properly formatted for display on reddit. (Prefix each line with 4 spaces, or select all the text and click the &lt;&gt; button in the editor UI) Also include _how_ the code isn't working the way you expect, and what is tripping you up.
&gt; GPL No. I'd rather use an MIT project, such as Bridge.NET
Removed: Rule 4. Make an attempt, and if you still have issues, post what code you have, what you tried, and how it isn't working. To help, try taking a look at the [`String.Contains` method](https://msdn.microsoft.com/en-us/library/dy85x1sa%28v=vs.110%29.aspx) and the [`String.Replace` method.](https://msdn.microsoft.com/en-us/library/fk49wtc1%28v=vs.110%29.aspx) Using those two along with a `while` loop you should be able to reduce all spaces down to single spaces.
yes. thats a good way to do it. use embedded resource and Assembly.GetExecutingAssembly().GetManifestResourceStream with the name of your file
I just relicensed it as Apache 2.0 after seeing feedback and considering it myself.
[Talking about this one.](http://i.imgur.com/S3mdhRU.png) No, I've extended an existing charting library. I've had some success using multiple UI threads and hosting them with HostVisual-Containers, however HostVisual doesn't allow further input.
I will be messaging you on [**2016-09-19 14:38:16 UTC**](http://www.wolframalpha.com/input/?i=2016-09-19 14:38:16 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/csharp/comments/52nic8/interactive_material_design_report_viewer/d7s8h9l) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/csharp/comments/52nic8/interactive_material_design_report_viewer/d7s8h9l]%0A%0ARemindMe! 18 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! d7s8hjs) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Cool thank you! :)
try combobox1.Text Edit: Ops I misunderstood the problem
That is not what I mean. https://drive.google.com/open?id=0ByLuVWEj5nixR29PMC1LaFRRczA In that photo when I change the font in the top right corner it will change the selection to the ComboBox.
Ah I understand.. that one is a bit complicated for me (im still pretty new to C#) 
well, if you click on the combo box (to change it), then the combo box will get selected... you will have to switch the focus back manually. to do this try adding the following to form's constructor right after InitializeComponent: comboBox1.DropDownClosed += (sender, e) =&gt; richTextBox1.Focus(); edit: `DropDownClosed` not `SelectedIndexChanged`
You will probably need to use the RichTextBox SelectionChanged event to keep track of the selection start and length yourself to apply the new font after it's selected. Something like this: private int _rtbSelectionStart; private int _rtbSelectionLength; private void richTextBox1_SelectionChanged(Object sender, EventArgs e) { _rtbSelectionStart = richTextBox1.SelectionStart; _rtbSelectionLength = richTextBox1.SelectionLength; } // in the combobox selection change event: richTextBox1.SelectionStart = _rtbSelectionStart; richTextBox1.SelectionLength = _rtbSelectionLength; richTextBox1.SelectionFont = new Font(combobox1.SelectedItem.ToString(), 11); 
How do you calculate string difference? Hamming distance? Edit distance? Something else?
Not being funny but how did you not understand the usecase here? It is clearly a file compare tool that OP is trying to build. I think the only difference is that they don't want to see line-by-line changes. Just a percentage difference.
The command line tool `diff` on Linux and `fc` on windows are the simplest way there is to compare two files (or other text streams for that matter). If the other libraries look like more than you need for your task, you probably only need those. **EDIT** [Found this](http://www.mathertel.de/Diff/DiffDoku.aspx), which is an interesting read and the resulting library looks very easy to use. 
Yeah, but how exactly do you define a percentage difference? This is not immediately well-defined.
Yes, if I want to make a settings change I always close all other visual studio instances. Make the settings change. Close this last visual studio instance. Then restart visual studio - optionally can check that your setting change worked. It definitely sucks.
Minor note, you are missing a "l" in the project description on GitHub.
I don't know if you realize it, but resx files are just XML. So if you search for "convert XML to JSON" you will get tons of results.
But if the interface is empty, why would you want to limit the extension methods to it? If the extension methods provide some useful functionality that is not dependent on any particular functionality defined by a class or interface, why not allow it to be used on `object`?
yeah, that's how it's called - the "functional" interface :D
Interesting solution for sure, and it would work well. During the interim since asking this question, however, a third Initialize method has been introduced that takes a different type parameter. So, it's clear to me that this base class is not architected correctly. I'm now exploring options to make a "generic" interface, whether it actually uses generics. I might be able to incorporate your suggestion too.
SQL Server as an option is in!
Slack as an option is in!
Too bad the UI for this tool is completely incomprehensible; I can't even get a grasp on what the tool is supposed to do. Hopefully the open source community can help here.
Hmm.. I hadn't thought of that, I always thought the query executed when you touched the first item if you didn't already convert it to a list.
Yup, good point, you'd need to handle deletions and space offsets. Emulating how humans read (and using that as a basis for code) definitely isn't simple. There's a couple of open source solutions for diff that OP could most likely draw on when building the methods to do the comparison - KDiff comes to mind immediately. My experience with doing similar has been limited to delimited data (HL7).
It is? Where? O_O.
Nope. Until you ToList() it, it's still just a query. If you have Intellisense (or whatever they call it now), you can watch EF make the individual queries when you debug through it.
Here is a screenshot: http://imgur.com/a/grQvc The library itself looks promising, it was just the first thing I noticed.
What you are looking for is called covariance. An excellent source to read up on it is: https://blogs.msdn.microsoft.com/csharpfaq/2010/02/16/covariance-and-contravariance-faq/ To achieve your desired behavior, you may want to consider using an interface rather than a base class. abstract class Fruit { public abstract string Name { get; } } class Apple : Fruit { public override string Name { get { return "Apple"; } } } class Orange : Fruit { public override string Name { get { return "Orange"; } } } interface IWrappedFruit&lt;out T&gt; where T : Fruit { T Value { get; set; } } class WrappedFruit&lt;T&gt; : IWrappedFruit&lt;T&gt; where T : Fruit { private T _wrapped; public T Value { get { return _wrapped; } set { _wrapped = value; } } } static void Main(string[] args) { Apple myApple = new Apple(); Orange myOrange = new Orange(); Fruit genericFruit = myApple; var wrappedApple = new WrappedFruit&lt;Apple&gt;(); IWrappedFruit&lt;Fruit&gt; wrappedFruit = wrappedApple as IWrappedFruit&lt;Fruit&gt;; var wrappedOrange = new WrappedFruit&lt;Orange&gt;(); wrappedFruit = wrappedOrange as IWrappedFruit&lt;Fruit&gt;; } The above is a modified version of this answer from stack overflow to match your case: http://stackoverflow.com/a/5979238
I think the interface declaration needs to be interface IWrappedFruit&lt;out T&gt; where T : Fruit
Where, how do I get to it? I've never seen one!
You anal son of a.. just kidding, will fix it in my next commit I end up doing, thanks. A side note of the library, it offers most of the functionality I want and abstracts it in such a way the user can go past my implementation if they have custom needs. It still does not pass a few test I want it to, so hopefully the test project gets up soon to kind of complete things.
I'm glad you got your problem figured out - but you shouldn't be calling SaveChanges within a for loop regardless. Call it outside of the loop, and save the changes all at once. Otherwise you're making multiple round trips to the database, locking and blocking resources for longer than is necessary, and cranky DBAs (like myself) will probably feel the need to punish you in some way/shape, or form. Even if you're on a localdb, your code will perform better if you don't do data access/manipulation from the DB in any sort of loop.
Consider two different versions of tackling this... First, you leave both strings as raw json. In this case, your question really has nothing to do with json. Rather, you're asking why two strings don't exactly match. Like others have said so far, if you're doing this you need to make sure that you're accounting for all the special characters, casing, and whitespace. Second, you cast the two piece of json to an object and perform object-level comparison on the two. This can help eliminate those weird serialization issues like inconsistent whitespacing but it has the extra overhead of casting to a concrete class (and possibly having to implement your own Comparator). I'm not telling you either of these methods are correct, I just wanted to give you a different perspective on deconstructing the problem that might give you some insight into deciding which solution is best for you.
It would require pulling teeth and not be 'small', but I once used ikvm.net to cross compile html unit as a .net library for some web automation. I think ikvm.net is part of mono still? I am listing this as an option, but I don't think I would suggest it except as a last resort.
so - in the editor it looks like this: [Imgur](http://i.imgur.com/hwpqZx7.png) But when I run it, it looks like this: [Imgur](http://i.imgur.com/0k4kD26.png) I want: [Imgur](http://i.imgur.com/4t1HZqm.png)
&gt; Call it outside of the loop, and save the changes all at once. If you have more than a handful of changes, that doesn't work either. If you wait too long to save your changes, the context gets slower and slower for even your non-database calls. What you end up having to do is save after every N changes, where N is a number that find experimentally. *** *Man, I really hate the fact that I know this about EF.* 
why would anyone bash you for that, especially when it comes to newtonsoft.json?
Any idea why the designer/preview would show so drastically different than at runtime? Can you post the XAML and any style sheets you're using? Try explicitly setting the `Width` property for one of the `TabItem` entries. I created a blank/default WPF project, and have the following XAML and it produces custom sized tab items just fine: &lt;Window x:Class="TabControlTest.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:TabControlTest" mc:Ignorable="d" Title="MainWindow" Height="350" Width="525"&gt; &lt;Grid&gt; &lt;TabControl x:Name="tabControl" Margin="0" TabStripPlacement="Left"&gt; &lt;TabItem Header="TabItem" Width="300"&gt; &lt;Grid /&gt; &lt;/TabItem&gt; &lt;TabItem Header="TabItem"&gt; &lt;Grid /&gt; &lt;/TabItem&gt; &lt;/TabControl&gt; &lt;/Grid&gt; &lt;/Window&gt; 
I know Dapper and Chain have it, but does EF support TVPs?
Thank you! That's perfect*! Exactly what I was trying to do - except for that missing right border... what is that? I don't even know how to fix it without getting crazy and trying to make the tabitem an image and even when I di that I think it was still gone.... (?)
You could use a Style with a Trigger, I'm on mobile but something like this. Disregard the question and look at the XAML: http://stackoverflow.com/questions/19644183/trigger-for-ismouseover-on-tabitem?answertab=oldest#tab-top The IsMouseOver Trigger should be something like &amp;lt;... Property= "FontStyle" Value= "Underline" /&gt; or whatever the appropriate Setter is.
What about [Phantom JS](https://learn2automate.wordpress.com/2015/12/18/headless-automation-using-c-phantomjs-and-nunit/)?
Instead of comparing the two files contents, compare their binary checksum instead. If they truely are the same they should have the same hash. Write the file away to a stream and do a MD5 check: using (var md5 = MD5.Create()) { using (var stream = File.OpenRead(fileName)) { md5CheckSum = BitConverter.ToString(md5.ComputeHash(stream)).Replace("-", "").ToLower(); } } If this returns a different result for each file, then they are different at the byte level, even if the contents appear the same. Check for trailing bytes etc.
This is comparing the files
I normally don't, just trying to fix this program that I inherited. I could move the save outside the loop but would require more of a re-design.
reactive trader should show how you can handle the streams of data from lots of sources. But it does not have any plots being drawn like you would want and there is a lot to learn before rx starts to make much sense. https://github.com/AdaptiveConsulting/ReactiveTrader
Sounds like you are wanting a data layer, which there is nothing wrong with. However your containers, (dto's poco's etc.) should not have the load functions in there. Create your container and make it just that, a container. Then have a class outside of that responsible for the filling and emptying of those containers. Even better, create an interface that will do the same operation on each container (your CRUD operations).
For my work, I've done something very similar. I take ble, UDP, serial ( depending) data, and graph it. At 100 hz-10+khz. I recommend scichart for this. It's great with mvvm, you can add to the live buffers from a background thread, etc. You can also set the visible FIFO to be x amount, and store all your data in a background object. Only downside is it's not free/cheap. But if it's for a company project, the license is per developer, so you can take it to any other application you do. 
Ah, I see. Thank you much!
He actually defines `duplicate_found` inside the `for` loop before the `if` statement, but it is still the same issue since there is a chance of the list having 0 items. 
https://github.com/dhamaniasad/HeadlessBrowsers 
Because it's assigned in the for loop, and the contents of the for loop don't count for the compiler's static analysis for this. For whatever it's worth, though, you could probably streamline that whole thing: if (InvokeRequired) { Invoke(new MethodInvoker(() =&gt; this.AddRecord(r))); return; } if (!record_list.Any(x =&gt; x.UserName == r.UserName))) { record_list.Add(r); } Or you could use a Dictionary instead of a List, and use ContainsKey() or something.
A `bool` can not ever be `null`. Unassigned is unassigned and is a build time error. You will never have the chance to see the value of an unassigned bool because the compiler won't let you get that far. Technically though, and this purely an implementation detail of the .net runtime and not at all part of the spec, a bool variable will false by default. This is because the .net runtime zero's out the memory it allocates for that variable before it lets you do anything with it.
Except, yes really. The previous `if` statement _ensures_ nothing when it comes to the `for` loop: //reports non-zero here if (record_list.Count &gt; 0) { //separate thread clears/alters the list or change the field/property reference making its count zero //the loop re-evalutes the list count, iterating from 0 to 0, so never iterating. for (int i = 0; i &lt; record_list.Count; i++) { EDIT: Technically, it doesn't have to be a separate thread. It could be an _evil_ property getter that alters or returns a different collection, or assuming that `record_list` is a custom class, it could be implementing an _evil_ `Count` property too.
Those might be good for you. Do you have an idea what the UDP data format is? Or are you defining it? I've become a fan of using newtonsoft json to convert small objects easily. But in straight c, json isn't as easy.
i don't think it supports mono very well
It is public, but non-static. You would need an instance of whatever class contains Check(). It has no arguments, so you do not need to pass it anything, and it returns nothing. 1. If your other method is in a completely different class or is static, you'll need a reference to an instance of whatever type Check() is in. Once you've got that, it's easy: instance.Check(); 2. If your other method is a non-static method in the same class or a child class, you can use the this instance implicitly: Check(); or explicitly: this.Check();
Sure thing. To keep things thread safe, I'm using the excellent ObservableImmutable class by Anthony Paul to store my last XX data points. I feed these data points into my OxyPlot graphs using the System.Threading.Timer to give the appearance of real-time data. You should be up and running fairly quickly with that setup. And a little personal advice from someone that has rolled their own graphing library: don't do it. It's more complicated than its worth, and someone else has already solved the problem you're trying to solve in a much better way. OxyPlot is great, and if that doesn't fit your needs, use one of the other many available libraries. Trust me ;-)
you can use [xamarin studio](https://www.xamarin.com/studio?utm_content=1544898743&amp;utm_term=xamarin%20studio&amp;utm_campaign=Xamarin+Studio+-+%5bProduct%5d+-+Search&amp;utm_source=&amp;utm_medium=) or [mono develop](http://www.monodevelop.com/) and use mono instead of .net 
It is public, but non-static. You would need an instance of whatever class contains Check(). It has no arguments, so you do not need to pass it anything, and it returns nothing. 1. If your other method is in a completely different class or is static, you'll need a reference to an instance of whatever type Check() is in. Once you've got that, it's easy: instance.Check(); 2. If your other method is a non-static method in the same class or a child class, you can use the this instance implicitly: Check(); or explicitly: this.Check(); Considering posting this question in r/learncsharp.
https://www.microsoft.com/net/core#macos and https://code.visualstudio.com/ ?
You could just implement equality members on your `Record` type, and then just do `record_list.Contains(r)`;
The name of the language is "C Sharp", like the musical note. We just tend to use a hash symbol because it's on the keyboard and looks similar enough to the sharp symbol (♯). You clearly know this as you're here (in a subreddit called /r/csharp). So you can stop with the silly names.
You can use Visual Studio Code editor along with .NET Core Framework to develop programs using C# on Mac/Linux. Also, frankly speaking, your jokes on *C(HashTag)* or *C pound sign* are extremely childish &amp; immature and not even remotely funny. Very low quality trolling.
https://msdn.microsoft.com/en-us/library/ms228388.aspx
check out the String.Split method. Here's a list of the methods associated with the string class. You may also need the trim method. https://msdn.microsoft.com/en-us/library/system.string_methods(v=vs.110).aspx
&gt; this.Invoke(new MethodInvoker(() =&gt; this.AddRecord(r))); My eyes. Are you sure you ACTUALLY need to do this? Why don't you just do `AddRecord(r);`?
Hm I've never encountered that. 
Thank you. That helped. I couldn't find that exact thing when looking on my own. 
Why does that require that invocation, though?
Dealing with bitmaps is probably the way you want to go for stuff like this. WPF is a lot more amenable to drawing a single bitmap every 100ms than trying to draw lots of individual visuals onto some sort of panel each time. The guy I mentioned who runs Scichart (which I see has been mentioned elsewhere in the thread too) does various tricks like that (and some getting deeper into DirectX itself) to get things working for his product. Rx sounds like a perfect solution for what you're trying to do before you get to the presentation layer though. I can highly recommend [Intro To Rx](http://www.introtorx.com/) if you want more about this technology.
So .... if (!record_list.Any(x =&gt; x.UserName == r.UserName)) { record_list.Add(r); } else { /* mangling r */ } Although, really, if you used a dictionary, this seems like it would be easier, based on your comment about replacing the old record in the case of duplicates. var record_list = new Dictionary&lt;string, Record&gt;(); // meanwhile if (record_list.ContainsKey(r.UserName)) { /* mangling r */ } // Dictionary&lt;K,V&gt; automatically adds the value with the supplied key, here record_list[r.UserName] = r; 
Isn't it false because it gets set to default(bool)?
It is probably unlikely, but in the rare event you need to process LOTS of strings in this manner (and by lots I mean roughly millions), you can do it faster and with fewer memory allocations using a combination of the IndexOf and Substring methods, rather than using the Split() method. for (int i = 0; i &lt; strings.Count; i++) { int loc = strings[i].IndexOf(" ? "); string first = strings[i].Substring(0, loc); string second = strings[i].Substring(loc + 3); // Do something with the two extracted strings here. } In general you shouldn't micro-optimize unless you know you have a performance bottleneck, so use whichever technique you find most natural. I personally prefer the IndexOf / Substring approach for this specific task where you only have a single delimiter and a pair of strings to extract, but again that might just be a matter of taste.
That's what the .net runtime currently does but that behavior is not part of the spec, it's just how they chose to implement the engine. It's not something you should rely on being true which is why the compiler calls it an error and not a warning. Maybe in the future or on a different platform the engine won't zero out the data when it allocates it, so whatever happened to be there before is what you've got until you explicitly set it to something else.
It's a tad bit different, but you can either use the Application API's provided by Microsoft or check via a registry entry in HKCU/SOFTWARE/Classes/AppX* See: https://github.com/AnvilOnline/AnvilLauncher/blob/feature/h5f/AnvilLauncher/Core/UniversalProcessLauncher.cs#L75
I'm not trying to imply that Resharper is bad. Back when I used it there were several code recommendations it made that weren't the best advice (e.g., replacing simple if-else's with ternary operators, IIRC). Many programmers love it, and I haven't used it since VS 2010, so any negatives I experienced are probably out of date.
That's C++?
Whoops. I thought I posted in the C++ sub. I had both open in separate tabs.
Is that true? Private class members can be uninitialized and do work. Only local variables give this error in my experience.
I see your edit, but [project templates](https://msdn.microsoft.com/en-us/library/ms247121.aspx) are what you want. Not only does it accomplish your goal, it can be packaged up in a VSIX extension for deployment. The extension can be installed manually or you can setup an [extension gallery](https://msdn.microsoft.com/en-us/library/hh266746.aspx) in Visual Studio that reads information from a special syndication feed to handle notifications of updates. 
k-1 is going to crash on the first iteration of your inner loop after i &gt; 0
I had this same brain fart after spending a lot of time away from C# doing node.js. In JavaScript, an initialized but unassigned variable will have a data type of "undefined", which will evaluate as false. It's generally not a good idea to do this, but it works. I sat there scratching my head when going back to C# while doing something similar to what you have above, until I remembered it doesn't work that way. I'm assuming Python is the same?
http://stackoverflow.com/questions/6485156/adding-strings-to-a-richtextbox-in-c-sharp ETA: This was the first hit for me googling 'c# richtextbox adding text', FWIW
I've done this several times for companies. Sorry if my approach isn't very exciting. :) I use a basic visual studio template to install the basic project structure. Then I install a special nuget package into the "main" project. This provides any powershell scripts I need to finish setup. Often one to install nuget packages in all the projects, massage the folder structure, or just provide any utilities. Ideally a visual studio template should be all you need, but unfortunately their template system sucks, and so I prefer to only use it for initial solution setup. 
I am about to release a high performance package for LiveCharts, in my tests I can plot millions in no time, in case you want to give it a try, I guess it will be online in no more than 2 days.
The variables that make the struct up have default values. BUT, a variable declaration such as: MyStruct myInstance; does not have a default value. However, that is an awesome idea. If I did: myInstance = new MyStruct(); That's just an instance with default values. To repro the error in the post above: struct MyStruct { int x; } static void Main(string[] args) { MyStruct test; Console.WriteLine(test.ToString()); }
&gt;The only thing that works is Xamarin.Forms.Android. So you can run an Android app ? Show me some screenshots of the errors you get. 
&gt; Let's take another example more complex, and say I've huge lists of object I want to parse, and if they answer to some conditions, I want to add them to another list/move them to a special folder/paint them in pink. One option is to use a collection class from System.Collections.Concurrent. In your case, a ConcurrentQueue fits nicely. The nice thing about Concurrent collections is that you don't need to think about locks. If locks are needed, they take care of that internally for you. 
The only remaining difference is the ahead of time compilation option in the enterprise option. It makes it harder to reverse engineer your app and provides small performance boost. 
Another option is to learn how to use TPL Dataflow. It is more complex than I can explain here, but briefly what you do is setup a series of steps and allow it to handle all of the threading. https://msdn.microsoft.com/en-us/library/hh228603(v=vs.110).aspx
[removed]
I will look at that. However, since locks are still applied, this doesn't really answer my concern : don't we lose the advantages of threading if we lock things? I don't dare to think about async/await when I see the flaws I've with TPL ;_; 
`AddRecord` would be recursive. The point is to dispatch the method to the UI thread worker if necessary.
&gt; don't we lose the advantages of threading if we lock things? When sharing memory between multiple threads, you *need* some kind of synchronization mechanism to get correct code, because some threads reading memory while another thread is writing to it, or two threads writing to the same memory at the same time leads to horrible bugs. Sometimes you don't need *locks* specifically, for instance [ConcurrentQueue](https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Collections/Concurrent/ConcurrentQueue.cs) uses CompareExchange instead of locks (one way to do lock-free synchronization). It's hard to get lock-free synchronization right though, so I wouldn't recommend trying it yourself. Use the standard collections provided in System.Collections.Concurrent if you can, and otherwise stick to locks. Of course locks do have a cost, but the idea is to only synchronize threads when they're manipulating shared memory, and hopefully they'll spend 95% of their time doing other work independently. So you're still getting almost double the work done in the same time.
In C# and Visual Basic class members are initialized to a default value. I don't think that is necessarily true for all classes in .NET, but C# and Visual Basic does it. Local variables have an undefined value until it is assigned.
Thank you soo much
Well, neither of those are relevant for fizzbuzz, really.
&gt; So basically when I lock the object, other threads have to wait. Other threads have to wait *when issuing the same lock* only, not in general. Locks should, of course, be a fine-grained as possible. The best is always to use (mostly) lock-free collections, like those from System.Collections.Concurrent, but they don't really compose well.
 using(ProjectWebsiteEntities context = new ProjectWebsiteEntities()) { List&lt;user&gt; userList = context.user.OrderBy(u =&gt; u.username).ToList(); } Note: most people would write... var userList = context.user.OrderBy(u =&gt; u.username).ToList(); 
very good article about concurrency in general. you should find a solution in there for your problem: http://www.albahari.com/threading/part5.aspx
The users entity implements IQueryable which is a derivative of IEnumerable so you can just make a function to return any object that implements those two interfaces. Also, your model shouldn't have db logic. userModel is should just be a data object nothing more. EF should be providing the entities you require since it 'knows' about the data model already. Google for EF repository pattern, that should clear things up, including your list issue.
Quite a few people missed the point of this question. OP wants to know how are threads beneficial if they have to wait for each other to work correctly. The thing is, if used correctly, threads work in parallel most of the time and have to wait for each other only when trying to use something they share. I will give you an example. Imagine people at laboratory doing some experiments. They have to write the result of every experiment into one book right after the experiment ended. Everybody does his own experiment, but if 2 or more people come to the book at the same time, only one of them can write the results into the book, the others have to wait until the first one finishes writing. Also if the supervisor comes to check the results, no one can write into the book. People can work on their experiments, but those who have finished will have to wait for supervisor to finish reading the results. That is one of possible ways of using the threads.
A Windows Service is fine. Before creating the actual service, create an assembly to do your donkey work. That is all the functions that your service will be doing. Once that is working (you can test it in a console or other construct app) you can then wrap the assembly in a service. And this will be as simple as constructing your assembly as you would with inside any other application. One thing to note about Windows Services though, they have specfic events that are fire when they start up/shut down. Also, a windows service still runs top to bottom like any other app, so it will stop when it reaches the bottom of the OnStart method. So you'll need to await for your service logic to end. Personally I use the TPL library to spin off my worker assembly onto another thread and use the task generated by TPL to monitor it's activity in loop that checks every second or so. Or simply await the task before exiting. The actual Windows Service wrapper code is dead simple in reality. You should concentrate on the code your service will be executing before actually implementing the service itself. Forgot to mention as /u/Mac_Attack18 said, you may have to have a Windows Forms/WPF app to act as a notifier in the system tray. Not sure if you can dd the Notifier control to a Windows Service, I've never done it.
Plain clear. However I must say I did understand the idea behind threading. I guess my real question was "how to ensure your lock won't block the whole threading concept"; which was mainly answered by "use collection.concurrent" and "be careful what you lock". Still upvoted your answer because it was a good example, easy to understand.
Take a look at the analogy posted by /u/nevarforevar. It really illustrates what you are dealing with. To identify what to lock you have to identify what resources depend on what condition. Maybe write a test with mocking data to assert if it runs correctly. There is never one easy solution with multithreading as every situation has different resources, conditions and functionality.
 currentAtom.SetPos(new Vector3(atoms2D[i - 1, k - 1].GetPos().X - 0.00104166667f, atoms2D[i-1, k-1].GetPos().Y - 0.00104166667f, 0)); This statement is whats known in the industry as a train wreck statement. Split this up and make it readable. Your nullreference will probably reveal itself if you tidy things up.
The BenchmarkDotNet stuff looks well made. Edit: There are many reasons to use a StringBuilder also that he misses just as a sidenote 1. StringBuilder produces many times less garbage than string.Concat, for tight loops and games written in C# (unity, monogame etc...) you would want to use StringBuilders. 2. You can clear a StringBuilder by calling Clear or setting the length to 0, this further reduces garbage and also makes the string builder win after only 4 strings.
Yeah that's a really good term for it haha I'm not exactly sure how I should tidy this up tbh, I guess I could make it go across a few lines maybe...
Oh ok, I see. Also, I've already found out that currentAtom was the one who was null, and that was null because atoms2D was null. So, I put a 2D atom array in the constructor arguments and used that instead of atoms2D, and it's working perfectly.
Nice. Are you using Unity? Looks like an interesting project.
I posted a bunch of screens of my trying to build and debug the project on the emulators. And what happens when i try to run them.
Can you just give me the over all problem you're trying to solve, as opposed to the solution you think you need? (no offense) And I don't need gold for helping. I mean, it's technically possible to call a function in another class, or page, but I'm wondering if there is an easier solution. 
No screenshots? :/
&gt; We have one int, named balance. Ok. We have one operation named withdraw. Ok. We lock withdraw to ensure no simultaneous withdraw can occur that would cause balance to go to less than 0. Ok. This is the naive approach, and requires locking because you are modifying shared state. BANKS DO NOT DO THIS. Instead, think in a more Functional Programming approach. Do not modify a shared value. Accumulate modifications, and compute the result at the end. With your parsing example, you would parse the list with multiple threads and *copy* matches to a new list in each thread. When all threads are finished, you combine the results of all separate threads into one new list of results. The original list is unmodified.
Thank you man you rock! Actually I just needed the animations, thanks :) In the gist two fields are missing. Content="{Binding Title}" Style="{StaticResource _t16pSubheadMed}" The first one should be a TemplateBinding and resource _t16pSubheadMed is missing.
I imagine you're looking for the ASP Button.PostBackUrl property. You don't activate a class method across classes so you need to actually go there.
https://gist.github.com/anonymous/9fbefe2529993a607a0725e711e788cd Heres my font style stuff Also Title points to a property in my FlexDocument class, i had to do it a bit differently. This style probably doesnt have much use for you since this is actually a listview, not a tabcontrol, so there is no header property or anything. Itd be pretty easy to rework it to be a tabcontrol, but youd have to do some tricks with multibinding because you cant use a uniformgrid as the items panel in a tab strip. If you cant figure it out i could try to rework it for you and post it!
This will almost certainly break unpredictably because the hash code doesn't match the equality logic.
I don't think GNU GPLv3 license restricts distribution to the Windows Store, of course it will be free and open-source.
Why not just use `collection.GroupBy(item =&gt; item.key % 2 == 0)`?
Yes, that is one of the setbacks of being still under-development. I haven't focused fully on UI as of yet. But I am working and you shall hear good-news very very soon! :) Thank you.
i am trying to group by a dynamic list of columns. so what i attempted to do was int[] Columns = {1,2,3} var query = table.AsEnumerable().GroupBy(g=&gt;Columns.Select(c=&gt;g[c]).ToArray()),new Comparer()). i had to use a comparer because other wise it just compares the arrays reference and i dont get a grouping. Using the IEqualityComparer this does work, I just think its a silly solution to have to use. It seems like i should just be able to use a lambda/func to specify to compare the object[] so i think it should be var query = table.AsEnumerable().GroupBy(g=&gt;Columns.Select(c=&gt;g[c]).ToArray()),(x,y) =&gt; x.SequenceEquals(y)).
Also this solution only works when i use the extension method. how can i use custom compare when doing from r in table.AsEnumerable() group r by ?
It's not pretty but it works now! Thanks tons sir. Gold has been given. And by it not being pretty I mean clicking the Button takes me to the custompage.aspx page (away from the page I was on) but it does execute the method I need it to. Good enough for me!
Might be a stupid solution, but maybe you can transform the array output to a unique string representation, say a comma-delimited list? Something like: var query = table.AsEnumerable().GroupBy(g=&gt; String.Join(",", Columns.Select(c=&gt;g[c]).ToArray()));
i tried that and it did succeed in grouping right however then i have to explode that string to get my values when i reference the key and that just seems inefficient to me. 
He's using [Topshelf](http://topshelf-project.com/), so none of that is a concern for the service. 
Thanks!
You're basically building a custom purpose web scraper. I'm not sure whose brilliant idea this is, but it's a bad one. Whatever tool you create is going to break every time MSDN changes their web site (which they do frequently).
I agree, and I said BenchmarkDotNet looks quite awesome. But he does say &gt;it tells us that there is little to no reason to use StringBuilder over string.Concat. I was just pointing out some aspects he missed encase someone reads it and assumes it was exhaustive.
Interesting project, but I wonder, how does it compare to Bridge.NET? And what are the reasons for people to use your SharpJS over existing C# to JS transpilers such as Bridge.NET? 
Is this an desktop app or a web app? I assume desktop since some of the issues are web related? You can build an XML or json base with your data that you pull based on situation. A simple winform design is probably best.
What about named pipes too?
I admire your ambition :)
Would it matter if the whole file was in a BinaryStream reader and not reading directly from the disk?
Would it matter if the whole file was in a BinaryStream reader and not reading directly from the disk?
I see others have explained your issue but, seeing as I'm already here, here's a spot of unsolicited (yet hopefully constructive!) code criticism. You don't have to declare your variables at the start of a method in C# - it's clearer to declare them as near to their first use as possible. In your case I'd put the declaration of `duplicate_found` just before the for loop. You also don't need to set it to false in every loop iteration; ... bool duplicate_found = false for (int i = 0; i &lt; record_list.Count; i++) { if (record_list[i].UserName == r.UserName) ... Also, you don't need the check for `(record_list.Count &gt; 0)` - if it is 0, then the for loop won't iterate, so `duplicate_found` will be false. i.e you method could be reduced to: public void AddRecord(Record r) { if (this.InvokeRequired) { this.Invoke(new MethodInvoker(() =&gt; this.AddRecord(r))); } else { bool duplicate_found = false for (int i = 0; i &lt; record_list.Count; i++) { if (record_list[i].UserName == r.UserName) { record_list[i] = r; duplicate_found = true; break; } } if (!duplicate_found) { record_list.Add(r); } } } And I'm not sure what you're doing here, and I'm not familiar with MethodInvoker, so maybe I'm missing something: if (this.InvokeRequired) { this.Invoke(new MethodInvoker(() =&gt; this.AddRecord(r))); } but isn't that infinitely recursive? If InvokeRequired is true then it will use MethodInvoker to call AddRecord, whereupon it will see that InvokeRequired is true, and use MethodInvoker to call AddRecord, whereupon it will see that InvokeRequired is true, and use MethodInvoker to call AddRecord ... etc. 
The [value read in by ReadInt64](http://referencesource.microsoft.com/#mscorlib/system/io/binaryreader.cs,372657b4516a6bea,references) isn't *simply* read in as 8 bytes from a buffer directly either. After the bytes are read in, there's some calculation overhead. 
Sorry I didn't mention this but the whole file was read into a BinaryStream object and I'm looping through that. The reason I would think it is faster is because ReadInt64 reads in 8 bytes at a time. My problem is I have no idea what is going on under the hood and that's what I'm looking for. It just seems that it would read 8 times faster because in my uneducated mind, I see it grabbing 8 bytes every loop cycle as opposed to 1.
Please can you give my parents access?! :D I will pay you ;)
What the hell?? I didn't know this reference material was out there. Holy flip.
Ah ha. Thanks a lot. I just figured there was some magic that let it grab 8 bytes in 1 "scoop" instead of 8 scoops. 
[Screenshot as gif](http://i.imgur.com/iFWyLYK.gifv)
Glad you like it! Please feel free to file an issue or send a PR for any features that BenchmarkDotNet doesn't have, but your custom testing framework does.
Oh, BenchmarkDotNet is very much a superset of mine, but I'll have to see if I can find it. It's about 4 years old.
"Unknown build error" i run into pretty often when just installing or upgrading a xamarin package. Usually resolves itself after restarting VS and bashing my head against the wall a few times. I can't imagine using an ARM image though.. x86 Atom_64 is most likely the one you want, once you do get running. 
Something like this? http://i.imgur.com/y1csPIr.gif This is a very simple version - using listbox click event. I check the value for the listbox1 selected item, then add the items to listbox2 based on a condition. 
Is there any valid reason you're not declaring a a 4KB buffer and calling Stream.Read() instead? Circumstances may change if you're just doing a copy or actually processing each byte.
A big point: Start splitting up your GUI code and your actually business logic. The parsing of the numbers from the textual representation in the GUI and the actual calculation should never be in the same method. It shouldn't even be in the same class.
Yeah, I'm just wanting to send a series of 64 bits at a time to the processor instead of a series of 1 byte variables. I was hoping this would increase performance by 8 times.
It is still reading 8 times the data... And would use 8 times the memory bandwidth each call, I don't know how anyone could expect something that is doing 8 times more work to take the same amount of time. Why would you expect reading one byte to take the same amount of time as reading 8 bytes?
I might have worded that in an ambiguous way. I was thinking that ReadInt64() was somehow able to pluck 8 bytes in the same amount of time that ReadByte() would pluck 1 byte. As I said, I have no idea what is going on under the hood. But yeah, I had in my head that ReadInt64() was 1 read and that ReadByte() was also 1 read so, from that assumption and not having any information to the engineering, you'd assume that it magically worked this way. Does that make sense?
Not really to be honest. Read(1000000) is still one read but you wouldn't expect that to take the same amount of time as reading a single byte. Even in C++ with no fancy code, just pulling 1 byte from memory into a register is going to be slower than pulling in a long (8 bytes) when done in a loop. It is reading 8 times the data and even though the logic of the code is the same amount of instructions (probably I haven't looked at the assembly) the memory bandwidth required is 8 times higher for one than the other. And since computers are mostly memory limited these days it makes sense that you could not get 8 times the performance out of read double. I do get how you could not think about it this hard and just assume it was faster, we all get funny assumptions from time to time.
This has happened to us all. 
It annoyed me at first, but when I thought about it, it made a lot of sense. What if I accidentally set my debug to Production and started working against that data? I like that I can't do that accidentally too easily.
I have several libraries that might help here. Package names are PerfCopy and BitManip, available via NuGet. They use 'unsafe' operations to effectively cast byte arrays into their appropriately sized primitive equivalents (e.g. `byte[64]` into `UInt64[8]`). They also have other highly optimized operations, like bulk rotation and endian-ness transforms (built for crypto work). 
Thanks for that. I installed it, but haven't managed to get it working just yet. Probably for the best.
It's a desktop app. I've thought of making it into a web based app eventually for easy updating. 
I've thought about using javascript. Based on some of the other replies I may be able to get away with a more simple implementation strictly in C# but your suggestions are excellent food for thought. Thank you!
Yeah np! It really comes down to whether you make it web based or some kind of desktop app. I assumed it would be web based. That was my fault.
Why convert it to GDI+ when DirectX is so much faster. Maybe go with WPF instead if you want simplicity. GDI+ is to ancient to go back to imo :P
Figured id upload for posterity, since it was a bit of a pain in the ass to find resources on the conversion math.
I made something very similar a while ago. I was surprised that HSLColors weren't already part of the standard library.
A class and no equals overload, and no sanity checks of input arguments.
I needed them to write a bunch of image filters, and I was just as shocked as you. At least we've got it figured out :)
Not all of it.
It is, yeah, it's all 2D. 
Wow, what kind of shitty attitude is this? I gave you tips on how to improve your code, and you call me a "nigga". Way to go /u/CCRed95.
[removed]
What's the main goal? Getting rid of the DX complexity? If you don't have to support older versions of Windows, [Win2D](https://blogs.msdn.microsoft.com/win2d/) is a new library from the people who made the old XNA. As for your actual question, I don't understand what you mean by "how to change it over"... 
You're going to have issues with your comparison too. Console.ReadLine returns a string which is not comparable to an int, i.e. 50. You need to convert the input to an int too. I suggest using int.TryParse to do the conversion.
Along with what the others are saying... "Age" is a string, but your treating it as an integer if(Age &gt; 50){ Try this int Age; Console.WriteLine("How old are you?"); if (int.TryParse(Console.ReadLine(), out Age)) { // Todo... }
The graphics object is the full canvas. The surface can be treated as bitmaps, which can then be drawn onto the main graphics object at the end. Most likely you will need a graphics object for each surface, backed by a bitmap. Each method that draws on a surface can be ported to draw into the individual graphics. Then at the end each bitmap produced by the individual methods can be drawn onto the "master" in the appropriate location. This is probably the easiest way to move it over, but may not have the best performance. Are you familiar with how GDI+/windows DCs work? Each Graphics represents a DC (device context) which is backed by a bitmap, screen, printer or whatever. So in this case you will just create graphics from bitmaps then merge them to the graphics backed by the screen.
Nice answer
If i remove it i get even more errors. 
Thanks! I'll give them a go if Visual Studio ever finishes updating! Arg..
Please *please* ident all your code lines by four spaces. Read the formatting help on reddit. 
Thank you guys! Got it to work. Gonna continue to learn more about C# now. 
take the print out of the class, you should be returning the result not have an extra method in there to printing out to the console. 
Just because probably. It isn't necessarily bad or wrong, and may have been faster performing. GDI+ has it's own set of issues, including limits on the canvas size and scaling isn't nearly as elegant. 
Hi there, I can relate to this a lot. First, hang in there, it's only hard because it's new. If you keep at it, it won't always be new :). I won't comment on your problem, others have that under control, I'll just give you a link to something that I was trying out, potential for your project I don't know, it was just an idea I had to cement what I'd read. On the back of my post I manged to get to a very kind person who really helped me understand the concept I was trying to get a grip on. [a helpful link] (https://www.reddit.com/r/codereview/comments/4yjlge/c_first_ever_class/). 
This handy extension will let you hit F12 on framework methods/properties/etc &amp; see the source: https://visualstudiogallery.msdn.microsoft.com/f89b27c5-7d7b-4059-adde-7ccc709fa86e Verruh nice.
Number 2 is a matter of opinion. There's no right/wrong there. Also the bottom brace lines up with the start of the line... You know either way.
For one, try keeping everything as int values for most of your logic, and then convert it to a string in one last statement at the end of the method. For your logic, first examine your gender radio buttons, and initialize a calorie limit variable based on the gender. Then examine whether the person is active or not active and then apply the appropriate reduction if not active. Then examine the age value. It will be a string in your current setup, so look into the "parse" methods in the Int32 class for converting the string to an int. Check if int age is over 55 and apply another reduction to the calorie limit if so. You should be able to redefine the age box to a number ticker (I forget what it would be called), which can be immediately read in as an int. Your final line in the method would then be: textBox1.Text = calorieLimit.ToString();
To add onto what I wrote. The way you described the scenarios was by trying to exhaustively enumerate all the possible scenarios, which would've been: * male / active / 50 or less * male / active / more than 50 * male / inactive / 50 or less * male / inactive / more than 50 * female / active / 50 or less * female / active / more than 50 * female / inactive / 50 or less * female / inactive / more than 50 So, as you see, it turns out there are, in fact, many scenarios to think about. Instead, the impact of each choice does not greatly impact the others, except the order, if I understood it correctly (that you first apply the -10%, if needed, then the -200, if needed). Try to think more about how you would perform the computation. Try doing it on paper for a few cases. See how, at each moment, you only look at one decision, and choose whether to modify the result or not. You will notice it follows the above implementation.
I wonder whether overflow checks partially cause this. https://msdn.microsoft.com/en-us/library/a569z7k8.aspx
You have 3 true/false questions basically, and each one is independent from the rest. Tip - Rename your radioButtons for readability, and force a default selection to avoid that "no radio buttons checked" issue. I would do something like... button_Click(object sender, EventArgs e) { int calorieLimit = 2000; //default female if (radioMale.checked) { calorieLimit += 500; } if (radioNotActive.checked) { calorieLimit *= .9; } if (overFifty()) { calorieLimit += -200; } label.Text = calorieLimit.ToString(); // Note: Label, not a textbox } // Method to keep if logic simple above public bool overFifty() { if (age &gt; 50) { return true; } return false; }
The only problem I saw was there is no clear way to customize jobs. When I follow the instructions and sample code, it doesn't actually output anything. 
Removed: Rule 4. Please make sure your code is properly formatted for Reddit. Also, please include what you have tried. The code you posted has no loop. Make an attempt with a loop and include the code used. Feel free to repost the question with the above included.
Removed: Rule 4. Feel free to repost the question with proper code Reddit formatting and code indentation.
I'll see what I can do.
I found TopShelf through a video series, I'm really interested by it, I feel like it short circuit's a lot of headaches to implementation.
Can you show your actual code? Player p1.Level=1; won't even compile.
Which is the same as calorieLimit = calorieLimit - 200; that also has a short form calorieLimit -= 200; which compared to... calorieLimit += -200;
An interesting and a potentially very difficult problem. There are Windows APIs that you can P/Invoke to read/write another process memory, for example: [ReadProcessMemory](https://msdn.microsoft.com/en-us/library/windows/desktop/ms680553\(v=vs.85\).aspx) and [WriteProcessMemory](https://msdn.microsoft.com/en-us/library/windows/desktop/ms681674\(v=vs.85\).aspx) but these APIs require an handle to the process that you want to read. [This Stack Overflow page has an example that you can follow](http://stackoverflow.com/questions/781716/c-search-a-byte-array-in-another-processs-memory) Anyway I would suggest to approach this problem using a native, more close to the metal, language (e.g: C++) despite it is completely feasible in C# it will be easier to use Windows API in C++ as they are written in the same language for the most part and you don't have adaptations to do. Have fun EDIT: Fixed formatting
Thank you so much.
&gt; Why? We can't see your actual code, so we can't tell. Nothing in the pseudo-code you posted shows us why. Trim down your code to the smallest example that exhibits the problem, post that, and we might be able to help. 
You can have an `if` without an `else`, but you can't have an `else` without a corresponding `if`. You can't have 1 `if` and 2 `else`. It's just like English (or whatever your native language might be). "**If** it's raining I'll take an umbrella **else** **if** it's sunny I'll take my sunglasses **else** I'll take nothing". if (itsRaining) { take("umbrella"); } else if (itsSunny) { take("sunglasses"); } else // it's neither raining or sunny { take("nothing"); } 
I need to grab the pointer using C# not Cheat Engine. I just use cheat engine to verify the addresses
I tried that, and it took several hours to process, so I wanted to make it in parallel to go faster. As it seems this is not more efficient, I'll try again in one single thread but that's... slow. (and yes I meant sensitive, english isn't my first language, thanks for the correction) 
ARGH. The only problem there is that it limits me to 200 pages per bulk export. I have to handle ALL of Microsoft.Office.Interop. :(
It seems to me that you wrote some kind of Outlook addin in C# to move things from one pst file to another. If that is true, then you are in deep shit. Outlook is a huge mess inside. Multithreading often makes things worse, because all the work with Outlook objects is always marshalled to the main (GUI) thread. Every object Outlook gives you is in reality a COM object wrapped in runtime-callable wrapper, and you have to take care and properly release every one of them after you finished working with them. After one of my colleagues left, I have been given care of C# addin for Outlook written by him and it has been a constan source of headaches ever since. Took me few months to learn all the things you have to avoid doing and all the things you have to do to make it stable. For example, just one unreleased COM object caused unexplainable behavior in a completely unrelated function. If all you need is move things from one pst to another, seriously consider other options. The first link provided by FizixMan seems to provide a nice solution for you, I don't know why did you dismiss it.
It is quite likely that (unless otherwise specified in the docs?) these COM interfaces simply do not support multithreading and may fail unpredictably when used that way.
Plot twist, /u/DoctorPrisme is /u/StoneTear
Because these links provides way to read mails, not to move them in any way, meaning they are totally useless? Also yes, I am in deep shit, and indeed it seems that multi threading doesn't work well with outlook. Which, I agree with you, is quite messy. Who decided to have folders that can contains folders, ffs. If you have any precise idea on to how I can easily create a folder (/store/whatever) that is a pst file named according to a mail.recipient and move into that said folder a copy of every mail I found adressed to that recipient... Don't keep it for yourself :D And don't hesitate to tell how I should release those Com object, quite new to that too.
you have a few options: 1) Provide a lambda with anonymous object 2) create an IEqualityComparer. tools like resharper help with this 3) override the equals and get hash code method of the class If you have a bunch of properties and this is not your default comparison, then I'd suggest the equality comparer
https://motherboard.vice.com/read/hillary-clinton-tech-guy-asked-reddit-for-email-advice
You might be more at home answering questions [here](https://www.reddit.com/r/cpp)
is german your first language? All the germans I know use sensible instead of sensitive. 
I don't know VBA, and don't really plan to learn that sh*t. However one of my colleagues tried, but he abandonned, I don't really know why. 
honestly my approach would be to find a tool that converts the pst into a pile of email files (maybe something like thunderbird or other open source email client can import the pst files) then sort and manage them as files (which lets you do the multi threaded bits) and then wrap them back up as pst files (if required)
Yes, but unfortunately the emails being sensitive, we are asked to develop a solution by ourselves :3 
All the solutions on StackOverflow I have tried. The method I am using is tested and has been working for my other projects. It's just somehow not working for this one. Any chance you might know a developer who knows both package?
If you read the whole stackoverflow post, you would see that they discuss reading data from pst files, not the mail contents. In fact, I don't see any access to the mail body in the code shown under the question. You could probably just take that code and paste your parsing logic inside the foreach loop in Main ad then just store mails that satisfy your conditions into new pst files. If you don't know the API, you can find complete reference [here](https://msdn.microsoft.com/en-us/library/ms268893.aspx) Com objects are released using Marshal.ReleaseComObject function. You need to call it on every object from Outlook namespace. Remember that dot notanion creates hidden COM objects too, so something like mailItem.Parent.DisplayName would create COM object for Parent object too, even if you don't assign it to variable or use it in any other way. The other approach is to set variables referencing Outlook objects to null and call GC.Collect() and GC.WaitForPendingFinalizers(); 
Downloading it right now. Thanks for the tip.
Thanks I'll have a look :)
Thanks
What about one of those programs on an air gapped computer? But worse comes to worse, if you know C++ Microsoft has a PST Sdk, I believe there was an effort to port it to .NET but I'm not sure if that ever took off. https://msdn.microsoft.com/en-us/library/office/gg615595(v=office.14).aspx https://msdn.microsoft.com/en-us/library/ff385210(v=office.12).aspx https://pstsdk.codeplex.com/
You should post this to /r/learncsharp instead.
Nope, this violates the new rules we have to prevent new user/blog spam/shit article spam. /u/FizixMan here is yet another one. Note how the user account is not even a day old, just like the last time!
yea, I'm 90% sure its some minor configuration issues but as I can't think of a way to fix it, the only thing I can think of is offering a bounty for someone to help fix it. Thanks for the help anyway
Haxm isnt required, it just improved performance (by an order of magnitude) Have you tried launching the AVD manager as administrator? Had that issue for a while, until it magically solved itself. Try downloading another image, I have some images that loads, some that doesn't.. others load with certain configurations.. If you load the emulator via the AVD tool, the log window should appear on the screen. VS is *usually* able to use the emulator loaded this way. 
Do a diff on the .csproj files of the working projects and the broken ones. Worst case scenario, make a working copy the functioning project and start modifying it, bit by bit, to be your "new" project.
It's been awhile since I used RestSharp so I can't recall the syntax. Have you tried inspecting the message you send with Fiddler? I would start there to see what is actually being sent.
Thanks &lt;3
&gt; I was hoping to make something really cool out of this, because if everything is made up of atoms, then you can have really specific and consistent physics and you can just do tons of cool stuff with this. That's provided I finish it though. Provided also that your implementation of physics at the atomic level is correct. 
If you are specifying text/xml why aren't you sending xml?
I tried just using text and didn't work as well, then i just tried that
&gt; frequently That's an understatement.
&gt; It's a one time tool Haha... Say that again 10 years from now.
It just says that I need to send the data in base64 on the body of the POST request. The data is something small in hex, like 0x12, 0xAB, 0x34 for Eqs0.
Yeah, I have some ideas but your description of how you want it to change us not very clear.
If this is for Unity3D, try searching around for "Unity lerp". For example: https://docs.unity3d.com/ScriptReference/Mathf.Lerp.html or: https://chicounity3d.wordpress.com/2014/05/23/how-to-lerp-like-a-pro/ 
Yeah, the thing is, I do have to cut it off somewhere, because I could go all the way down to electron physics, and then even lower etc. But I find below the atomic level, things can be more easily represented by normal variables.
I would use the Outlook Redemption library. I've used it pretty extensively, and although I haven't done much with PSTs this sound pretty easy. I would create a new pst store and copy the folder structure from the original PST. Then I would go through each folder and get the emails that matched whatever criteria you are using, mapitables would probably be the fastest. Then move these emails into the other PST in the proper folder. I work in the Legal Industry and sound like you are complying with a discovery request which I something I have dealt with before. Just to note almost all of the ediscovery software I've dealt with ends up extracting emails into msg/eml files out of the PST. 
So, do you want the number to change sequentially or randomly?
Or yknow you can always roll with F=ma and Newtonian physics like the rest of us fools
Use division. Or multiplication of fractions. You learned it in high school, probably.
Welcome to your tax dollars at work. Government pays government wages so you get the mediocre and the extremely patriotic. Some sectors of Government will pay for the talent but it's also a lot of folks who also can't get work else where.
Yeah, my original comment was less than useful, sorry about that. I know what the operator does, my astonishment was because of the unusual usage, doing addition of a negative number instead of a simple subtraction. Anyway, might sound acceptable in the example provided as a code style rule, but it sounds a bit contorted. In my mind less is more, I'd rather group the operations by the logic they perform using blank lines between groups of statements, than use addition of negative numbers. But as you said, it's all down to personal preference.
The `TabTip` process is likely to terminate right away when it notices another instance is already running. You can try checking if there's a way to bring the current running process to the front.
sounds like lerping: currentValue = startValue + (endValue - startValue) * (currentTime - startTime) / duration
Appreciate the help dude 
A few pointers: 1) Your code will always set "thom" since the equality of the image is tested by reference, not by value. You need to initialize the images in your constructor and save them as variables at the class level. 2) The image needs to be initialized to Kao, otherwise it will always hit the else loop. Again, it needs to be set to "Kao" instance you create in your constructor. 3) It will only rotate once Kao -&gt; Tim -&gt; Thom. After that it will always be Thom. 4) Tim and Thom have the same path, meaning they're the same image. 5) Save the images in an array or list, to make it easier to extend in the future. 6) If you want a true rotator, you should save an index and use modulus 3 to rotate between images with these two lines of code: index++; var selectedImage = _images[index%3];
https://channel9.msdn.com/Series/C-Fundamentals-for-Absolute-Beginners
I'm trying to do so that when it reaches the last picture it goes back to picture one (I got 9 in total) 
Well, you would have to check how many files were in the picture folder first (unless you always want to have 9..) Then you can just iterate over an array that has the images, which is the above length, with a modulus operation to wrap around. *Edit If you just want a really simple "image changer" you can just use [Directory.Getfiles](https://msdn.microsoft.com/en-us/library/ms143316.aspx) and get the length from there like this: Directory.GetFiles(path, "*", SearchOption.TopDirectoryOnly).Length; You then save that value and use it a bit like this (assuming all of your files are named exactly as in your top post of course) Image nextImage = Image.FromFile("Fotos/" + (variable here) +".jpg" ); The variable is the one you want to increment/decrement and check with a modulo operation (based on the above length you got) every time you switch to another image. 
Have you tried setting s breakpoint to see which statement is triggering the error? 
Managed to fix it. But thanks anyway guys! :)
Removed: Rule 4. In the future, remember to properly format/indent your code to be viewed in Reddit, and also include the full error message and stack trace rather than just the error code.
it has to be as simple as possible, it's only my second week in c#. i almost got it, I just can't find how to give my int a scope of 1 to 9 int count = 1; Image Kao = Image.FromFile("Fotos/9.jpg"); Image tim = Image.FromFile("Fotos/1.jpg" ); Image nextImage = Image.FromFile("Fotos/" + count + ".jpg"); pb1.SizeMode = PictureBoxSizeMode.StretchImage; if (pb1.Image == Kao) pb1.Image = tim; else pb1.Image = nextImage; int tel = count + 1;
There are magnitudes more developer positions than there are developers, and that ratio gets more unbalanced every month. Tell your company that you didn't pass, ask them to get someone who did to help you study for your next attempt. If they don't like that then put your resume on monster. You will have recruiters calling you in 15 minutes. 
I would strongly encourage you to post this also in /r/cscareerquestions; they'll probably have some good advice for you. I don't have too much time at the moment to say too much, but: &gt; solutions wouldn't often come to me straight away and I frequently find myself on Stackoverflow looking for solutions Perfectly normal and expected, especially for an entry level developer who has no real formal training. The fact that you can harvest StackOverflow for solutions and apply them is a _good thing_. In my opinion, if the company is requiring all developers to get MCSD certifications while on the job, it should be on the company's time. They should be setting aside time in the work schedule for training, paying for the materials, paying for your wages, and setting realistic goals and timelines for it. That's all well and dandy though, I know the real world isn't ideal. It's my experience though that small companies often have unrealistic expectations about how to develop software, how to train their developers, and how to manage time and developer resources.
I've been thinking about applying for another job for other reasons too, but the situation in my company seems very disorganised. Like the hilarious thing about the deadlines that were set for the developers to sit these MSCD exams is that some hipster guy from marketing (who hasn't programmed a line of code in his life) is the one who set the deadlines, and the head developer sort of went alone with it but he's not sitting them himself. He's probably afraid about what the CEO would think if he got a bad result (I wouldn't put this pass him honestly). The marketing guy just wants developers to sit it because he gets this fancy Microsoft jpeg logo on the company website to advertize. Honestly, though, I'm concerned about my very low grade and I think it would be good for me anyway outside my job or any future job to pass these exams. Not necessarily to put down on my resumé but to improve my coding skills. I know that C# is good to have and that VB is becoming increasingly redundant. 
This blog post touches on a similar Keyboard issue. [blog.mzikmund.com - Show Touch Keyboard](http://blog.mzikmund.com/2015/09/how-to-show-touch-keyboard-on-touch-interaction-with-wpf-textboxes/) In short, your code as you said works. However, the newer Windows 10 seems to have changes within the registry or otherwise disabled this feature from working like it use too. The article mentions doing a "Tablet Mode" which automatically pops-up the keyboard for input text. Inside of windows 10, their is also a setting to setup a pop-up keyboard for input fields like this. You might simply end up making your own custom Keyboard, which might be a fun predictable way to handle this.
if you can't trace that, i dunno man, maybe consider a different course. or at least look for a c# tutorial or something
Google "for-loops in C#". I am not trying to be snarky by asking you to Google by yourself, but it is a skill which you will need sooner or later. Read up on for-loops and come back to your code.
 int a, big, i; This is a shorthand way of declaring 3 ints, instead of having to write int a; int big; int i; There is then a for-loop, which begins at 0 and continues for as long as i is still less than 4 at the start of each loop. i will be incremented by 1 each loop iteration i = 0; i &lt; 4 ; i++ There is some code to ask the user for a number, which is then converted to an int from a string, because anything that is read in from the console window initially comes in as a string int.Parse(Console.ReadLine()); which is then assigned to the int a variable. I'm offering to help you at this point because it's not wrong to ask for help. In fact, it's better that you came for help instead of pretending to know how to understand this because many new concepts are built on top of previous concepts.
Thanks you so much! You are sure alot better than my teacher! But I have two more question for you: 1) What does i++ mean? 2) Just so I can understand it: Is the "for" command is a shorter version of "do" and "while"?
`i++` is a shorthand way to write `i = i+1`. The equivalent while loop for this code is: int i = 0; while (i &lt; 4) { // code i++; }
Removed: Rule 4. Feel free to repost it with more context, code, and explanation of what adverse behaviour you're experiencing and why you consider it weird.
For a teaching piece (and apparently really first basics) it's horribly commented. **This** is the place for the inane "declare a variable" comments if any.
Ah sorry. My apologies. 
Weird, I don't know how that code is meant to add a Next button to Visual Studio.
Thanks for the comment. To answer your question, I'm looking to mock up some sample data visualizations specifically as part of my business consulting practice. Fake customers, orders, products are great but real-world businesses often have a few more layers in each area where things get more complex (loss mitigation divisions, call center data with customer interactions, complex compensation structures, etc). I was just wondering if there's better datasets to work with than the typical stuff. If you have any links to the stuff you mentioned, I'd appreciate it!
I entirely agree. I am willing to learn new things, but those tests are well known for being rote memorization. I will memorize, but I won't do it for free.
Oh, I would definitely take advantage of it if the company were willing to stick by their promise of leaving me alone for two hours to study (as long as any query they had during that two hours wasn't urgent of course). 
Since you're using the Administrator account I'm not 100% sure that's the issue, but maybe the user doesn't have Remote Access permissions. This link might help: https://technet.microsoft.com/en-us/library/cc771551(v=ws.11).aspx
MVC :\^)
I think you misunderstood what "MVC" means. MVC was (at first) the idea of a decomposition in a Model (modeling your domain, data, ...), a View (displayed on the screen) and a Controller (keyboard, sensor, etc). This decomposition isn't accurate now as we don't interact with a program only with a controller but also on a graphical interface (the view), so we ended with the MVP (P for Presenter that is presenting data to the View, and the view can bring back data to the presenter) and MVVM (VM for View Model that is a "Presenter like", strongly linked with the View). So, MVC si kinda dead. Yes. BUT. Some Microsoft engineers working on the MS Web Framework (ASP.NET) thought that the web could be seen thought a MVC paradigm: The View as the displayed HTML and the Controller as the central point gathering user interactions (POST, GET, etc). It's the MVC pattern but as a user interface pattern. They ended up on creating the ASP.NET MVC framework (still in use in the new and funky ASP.NET Core). It's deeply integrated in those framework and even if you can use those framework with some other techs (as Angular, which is more close to MVVM than MVC), if you stick to the ASP.NET MVC framework itself, you will have to use MVC. tl;dr; there isn't any "real" choice if you're using ASP.NET MVC/Core: you will use the MVC pattern. 
First you'll want to chop off the extra past the last .25, you can do this with a modulo, or a floor(), then you can find out how many 0.25 increments there are in the total, lastly you can apply the fare: sumtrip = sumtrip - (sumtrip % 0.25); var increments = sumtrip/0.25; Fare = Fare + (increments * 2); or var increments = Floor(sumtrip/0.25) Fare = Fare + (increments * 2); In 1 line: Fare += (Floor(sumTrip/0.25)* 2);
It prompts for input from the user four times. Each time, it parses the input into a 32-bit integer. If that number is larger than the previous largest number (or zero, if no non-negative integers have been supplied), it remembers that value as `big`. Finally, it prints `big`. The last `ReadLine()` is to pause for the user to see that last print. Without that, the console window would close immediately if the app wasn't run from a command line shell. // LINQ-ified for funsies Func&lt;int&gt; promptForNumber = _ =&gt; { Console.WriteLine("get number"); return int.Parse(Console.ReadLine()); } Console.WriteLine($"the biggest number is {Enumerable.Range(0, 4).Select(promptForNumber).Max()}"); ETA: when in doubt with code, the thing to do (if possible) is step through in the debugger. Create a command line app, type that into Program.cs, and set a breakpoint at the start of the Main() method.
Even with using an administrator account, you need to run the exe with elevated privileges.
This is exactly what I thought. OK fair enough the teacher is bad, but this is pretty standard treatment in the industry and life in general. Asking a poster what i++ meant? Come on man, we have Google.. Self learning and research is a huge skill to master. 
Because throwing exceptions is expensive. The runtime needs to gather all kind of information for the exception (e.g. the stacktrace), create the exception instance, clean up the stack and call a special routine for bubbling the exception up.
Are you running it in debug mode? If so, that might be the main reason it seems slow. Try running it in release mode. &gt;I am utterly convinced that the cost of exceptions in the debugger is the cause of a lot of the myth about the general cost of exceptions. People assume that a similar cost is present when running outside the debugger when it just isn't. (It doesn't matter much whether you run a debug version of the code or not - it's whether a debugger is attached or not that matters.) This is made worse by the way that the first exception thrown under a debugger can take a few seconds (although I still haven't worked out why this happens - it doesn't seem to involve hard disk or CPU activity). I've seen developers claim that exceptions each take a second or two to be thrown - something that would render them much, much less useful. &gt;Note that it's not only exceptions which fall foul of this. The debugger disables lots of optimisations the JIT can normally make, including inlining (in at least some places). If you take too much notice of performance in the debugger without testing outside the debugger, you could easily end up making optimisations which only make a significant difference in the debugger, but which hurt your design and readability. http://yoda.arachsys.com/csharp/exceptions.html
&gt; until it is less than 4 (i &lt;4) **While** it is less than 4, not until. 
Please don't use Thread.Sleep. Either put this on a Timer or (in an async method) use await Task.Delay.
Looks really good man 
It is a work group for now
You're right, exceptions are expensive, and you should handle these scenarios by doing if/than checks rather than letting it hit exceptions. The usual guidance is that exceptions should be exceptional, i.e. result from program behaviors that you couldn't have reasonably foreseen or can't recover from. They should never be used for control flow. All things are relative of course. Numeric division is a fairly fast operation, usually a few instructions, while throwing an exception will take many times more than that. But if you're dealing with IO or UIs, an occasional exception will take a negligible amount of time relative to the underlying operation. The performance of exceptions is essentially never a problem, since in most cases they can be avoided (and when they're unavoidable, their performance cost is likely the least of your concerns).
If a WMI-script requires administrator privileges it must be run in elevated mode. There are only three ways to run a WMI-script in elevated mode: - run it locally from a command prompt started with Run as administrator - scheduled as a task with an administrator account (any account in the Administrators group) - use the built-in Administrator account, any other account in the local Administrators group won’t be run elevated. In theory you could also disable admin approval mode in the local security policy or set the LocalAccountTokenFilteringPolicy to disabled. https://msdn.microsoft.com/en-us/library/aa826699.aspx
Okay I'll try it with the built in admin account. This doesnt seem like it would be a very effective solution in a production environment. Maybe there is a better approach to what I am trying to accomplish. The end goal of this is an program that used WMI to scan the network and store hardware info about the hosts in SQL server express. I have a mobile app ive made that then allows you to view the info from the sql server on your phone. Perhaps I'm not using the right tech for this. It seems like a pain to have to enable all these services on each machine, kinda defeats the automation im going for. 
Well, though I don't know you circumstances I would solve this by installing a client management tool with the specifications you require.
Yeah in the production environment there is a domain. This is more of a learning exercise for me than something for work. Although if I get it working how I intend, I may install it at work just to test it. Just trying to apply the concepts and tech im learning to a real world scenario
Good catch. Semantic subtleties. I was trying to convey the generalization of a *for* control structure. initial state -&gt; modify state -&gt; terminating condition. 
&gt; // Safe conversion from text to int This construct is more to be used in the following way: ` if(int.TryParse(enteredText, out enteredNumber)) { // do something with *valid* value } ` You could then retry if a non int formattable value was entered. If some non integer string data was entered your code snipped would incorrectly assume it was 0 (`default(int)`) and give a wrong statement. But again the original code also has the bug that if only negative numbers were entered it would print 0 as the "biggest". 
What does the `.InnerException` report? I don't have experience with AutoFac, but this seems to be a circular reference to me. A chicken and the egg scenario: how can you construct an `Application` without a `Menu`; and in turn, how can you construct a `Menu` without an `Application`? Which comes first, the `Menu` or the `Application`? It would be impossible to instantiate these classes (short of some [tomfoolery](https://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatterservices.getuninitializedobject%28v=vs.110%29.aspx)).
I believe you'll have to change the design, more or less. Either: 1. change one class so that the dependency can be set after construction (via property injection rather than constructor injection). See the "Constructor/Property Dependencies" section here: http://docs.autofac.org/en/latest/advanced/circular-dependencies.html 2. extract the underlying dependency (that is, the actual methods/properties/objects of which they depend on) out from `Menu` and/or `Application` into a third class. `Application` and `Menu` would be dependant on this third class, but the third class is not cyclically dependant on them in turn. See: http://misko.hevery.com/2008/08/01/circular-dependency-in-constructors-and-dependency-injection/
everything is always on its way out in web dev and nobody knows what is best. embrace this truth. mvc is fine, even if it falls.out of favor your code will.keep.working.
This seems like the best solution if your are bent on using the built-in configuration files. Even if you were to roll your own configuration file, you still need a 'common' project so that your other projects don't need to be aware of the settings file schema, path, etc. 
Have you tried running the query against your local machine (ie 127.0.0.1)? At work in our domain environment WMI works just fine with how they have our Admin accounts setup, however RCP is disabled when users connect to VPN and WMI is unusable. The two options I had in front of me were use a third party tool like PSEXEC, which would easily do the trick or the harder route that I chose which was to create a remote service on the host which runs a script locally that outputs the WMI data to a text file and is read in from the file. 
Try asking on [/r/datasets](https://www.reddit.com/r/datasets)
I'm receiving a result similar to this: First Name: Bob Rather than this: First Name: Bob They look the same to me. Maybe you want to use Console.Write() which doesn't append a Carriage Return + LineFeed when asking the user to enter input? i.e. Console.Write("Please enter your firstname: "); reservation.FirstName = Console.ReadLine(); Console.WriteLine();
They haven't formatted their question for Reddit. Properly formatted, it reads: &gt; I'm receiving a result similar to this: &gt; First Name: &gt; Bob &gt; Rather than this: &gt; First Name: Bob
You pass the type `Application` as an argument to your `Menu` class. But that type is **not registered**. You only registered `IApplication`. Note that you call `As&lt;IApplication&gt;`. By default that means your registered type (`Application`) will only be registered under that alias type `IApplication`. If you **also** want it to register `Application`, then add a `AsSelf()` call into that method chain. And of course also the circular dependency that the others mentioned.
You can use the `ConfigurationBuilder` which can take in many types of config files like `json` or `ini` among many others You can simply have the json files inside the solution and refer to them from all the projects. Useful resources: - [ASP.NET CORE CONFIGURATION DOCS](https://docs.asp.net/en/latest/fundamentals/configuration.html) - [Telerik Dev Blog on ASP.NET Core Config](http://developer.telerik.com/featured/new-configuration-model-asp-net-core/) 
 // Some placeholders int biggestNumber = 0; int biggestNumberIndex = 0; // Iterate over Array and compare each element to the former biggestNumber. Store the value and the current index at biggestNumberIndex, if it's bigger than the former biggestNumber. for (int i = 0; i&lt; Array.GetLength(0); i++) { if (Array[i] &gt; biggestNumber) { biggestNumber = Array[i]; biggestNumberIndex = i; } } // A basic swap algorithm using a temporary variable int tmp = Array[Array.GetLength(0) - 1]; Array[Array.GetLength(0) - 1] = biggestNumber; Array[biggestNumberIndex] = tmp; This should do the work or show the concept. Sorry, btw, I'm writing on my phone while on my way to work. //Edit: Fixed crappy formatting.
&gt; Lookup break points. Didn't know about them for two years ... HOW Did you debug? o_O
&gt; HttpResponseMessage result = client.SendAsync(request).Result; Uh, that's probably doing something weird. You really shouldn't be calling `.Result` on an asynchronous method. Either use `await` or choose a non-async version of that call. I have no reason to believe that this is causing your problem, but would like to eliminate it.
You seem to be aware of it, but in case anyone reading your post hasn't seen it and is wondering why you don't dispose your HttpClient. https://www.infoq.com/news/2016/09/HttpClient
Avoid `sw.ElapsedMilliseconds` when benchmarking code. It can introduce misleading rounding errors. Use `Stopwatch.Elapsed.TotalMilliseconds` instead. Or better yet, use BenchmarkDotNet to get a really good picture of what's going on. https://perfdotnet.github.io/BenchmarkDotNet/
For what its worth I tested an HttpWebRequest as an alternative to this and found it to be about 250ms slower on average per request.
Yeah to check whether or not it is an int doesn't matter since the highest number is set to 0 at the beginning. so a NaN text would never surpass the highestNumber.
 // Do you have to keep it as an array? Lists are way easier to use :p // Set up the array int[] myArray = { 5, 6, 2, 283, 1, 7}; // Convert it to a list List&lt;int&gt; myList = myArray.ToList(); // Get the largest item int largestNumber = myList.OrderBy(x =&gt; x).Last(); // Remove it from wherever it was myList.Remove(largestNumber); // This will only remove the first one - Duplicates are fine :) // And re-add it to the end myList.Add(largestNumber); // Convert it back to an array since you wanted an array myArray = myList.ToArray(); // And display it to show it worked Console.WriteLine(string.Join(",", myArray)); // Outputs: 5,6,2,1,7,283 in this example // Just so it can be tested easier Console.ReadLine();
Make sure you test multiple HTTP calls, rather than just the first your program sends.
To be fair, if you're routinely throwing 1 exception per second, something is also probably wrong ;p
Well, something strange is certainly going on. I have web services in C# using HttpClient that have total response times under 10ms. Try with hard-coded IP address, maybe? Take DNS out of the picture.
Well that sucks, but it was a long shot. Have you tried using Fiddler to capture the traffic. They may expose a difference in the headers. Or at least let you see how much time is spent waiting for network I/O vs how much time was spent in your application.
This is part of the reason I don't like DI frameworks. If he had done his DI manually then he would have gotten a very obvious compiler error.
 string input = "Text number one ? Text number two"; // Remove the .Trim() if you want to include the spaces directly left and right of the ? string part1 = input.Split('?')[0].Trim(); string part2 = input.Split('?')[1].Trim(); Console.WriteLine(part1); Console.WriteLine(part2); Console.ReadLine();
If you were to do millions then you'd use a StringBuilder and not keep them as a string ;p
What a great idea, I actually never would have thought of this! Unfortunately, no performance change. I peak at around 679ms and as low as 535ms.
I'm glad you received some great explanations! On that note, I just want to say that I don't understand why all of these people said it's you not the teacher. The quality of this simple function is horrific. If that's the level he/she teaches you at, its no wonder you're struggling. * The only variable that needed to be declared in scope outside of the loop was "big" * big is a terrible variable name. These habits matter more than you think when it comes to actually finding work. * "i" should have been declared inside of the for loop, as is standard, so that it is not in-scope of any other for loops you may want to do within the function * "a" should be declared exactly where its needed, when the int is parsed * Parses the int but pays no attention to adding an integer and string literal in the WriteLine call Are any of these things absolute death? No. But this is not the OP's work were looking at here, its his teachers. The people who told all of us not to do these things. Kinda sad. Heart goes out to ye OP.
Maybe download ANTS from redgate and have it profile the code, including the .net library methods.
Removed: Rule 4.
 Console.WriteLine(Convert.ToInt32(null)); // 0 Console.ReadLine(); After learning about that, I now always use int.Parse...
I wish if/then statements worked in web.config's ;( It's a nightmare tracking 30 lines of config info across local, preprod, qa, prod ;(
Is this your first time programming? Serious question, just to find out.
Running the C# program as administrator is pretty simple: just add `&lt;requestedExecutionLevel level="requireAdministrator" uiAccess="false" /&gt;` to the application manifest, like [here](http://stackoverflow.com/a/2818776). Also, running Powershell as administrator is pretty simple, as well: You just need to add `[processname].Verb = "runas"`as shown [here](http://stackoverflow.com/a/19522491). Forcing it to run as admin without normally having access is something I haven't done before, but seems to have varying degrees of simplicity. If you know an admin account, it shouldn't be a problem, as described [here](http://stackoverflow.com/a/1313679). Otherwise, it's got to be something like [this](http://stackoverflow.com/a/2302793).
What is AutoFac giving you at this point, aside from a headache? How would you new up this dependency tree without a container? var app = new Application(new Menu(new Application ... If you can't new this up by hand, don't expect a DI container to be able to figure it out for you.
Well, I can't extract the mail, I must copy it elsewhere. And I mustn't just move them in ONE pst for all mails, I must copy each in a pst named as the recipient (so if multiple recipient, multiple mails and pst files). Currently running, but daaaaam'n slow.
Any reason not to use powershell, or is this part of a larger application? 
Isn't bubble sort generally O(n^(2))?
i think impersonation should work: https://www.nuget.org/packages/SimpleImpersonation/
Why don't you profile your code and check where the time is spent ? We could tell you a lot more then.
https://www.telerik.com/download/fiddler/fiddler4 this can intercept your HTTPS calls and let you figure out what's going on -- great tool
 //Rename an object and specify the domain controller and credentials directly public static void Rename(string server, string userName, string password, string objectDn, string newName) { DirectoryEntry child = new DirectoryEntry("LDAP://" + server + "/" + objectDn, userName, password); child.Rename("CN=" + newName); } From: http://www.codeproject.com/Articles/18102/Howto-Almost-Everything-In-Active-Directory-via-C#7
Traversal, removal, and insertion on a linked list are generally O(n), so they won't dominate the O(n^2) that is the bubble sort algorithm. Count the number of operations that occur per list element/loop iteration. That ought to give you enough answer to be sure.
In case of doubt check [BigOCheatSheet](http://bigocheatsheet.com/).
Someone needs to build an Operating System with this.
I've run into a similar problem, just seems like it's always slow when you do mass httpclient accesses - I almost expect to find a sleep(500) buried somewhere deep in the code because MS is trying to prevent people from web scraping efficiently. I'm curious if you've tried this with asp.net core?
Don't call powershell.exe. use system.managment.automation library, and create a powershell instance in .net.
Why do you need a library/container for this? Manual dependency injection and setting up your composition root yourself is far simpler, and easier to understand especially for someone that had never done Dependency Injection before. Mark Seeman has several articles on manual DI.
From personal experience: It was immensely popular when it came out but I haven't heard [Unity](https://www.nuget.org/packages/Unity/) mentioned in 5+ years. [Autofac](https://autofac.org/) has been what's used at the last 3-4 places I've been [Ninject](http://www.ninject.org/) gets a lot of talk and I like the parts I've seen, but I can't find any real reason to dig into it instead of Autofac. Autofac has a pretty solid documentation. I remember finding the Ninject documentation a bit thin and when I just tried to click on the training links, they're all 404ing so it's EXTRA-THIN right now. I'd say aim for Autofac, you won't regret it. 
There was an exchange between Rico Mariani and Jon Skeet about exceptions and performance back in 2006 that I thought was pretty cool to read through. I tried to put all the links together in this post if you're interested: [Bad Data, Try/Catch, and Slow Performance](https://buildplease.com/pages/slow-exceptions/) 
Sounds to me like you accidentally switched to Overstrike mode from Insert mode. Try pressing the "Ins" key again.
I bet this has nothing to do with visual studio but you pressed the `Insert` key on your keyboard. This happens because it is directly beneath the `Del` key. Press it again to have the normal functionality back. By the way, this "feature" works in every input box, e.g. MS Word
I thank you so much Sasken, it's not a big issue, it's just been annoying the shit out of me every time I try to put in spaces. Blessings of Charity to you kind sir. +10 Speechcraft for 1 hour
I feel a bit silly now not having known this now.
I'll be quite excited too see if this will simplify migrations to a newer version of the framework, or switching from framework to core. My team has several large applications we would like to move to core, but the lack of some apis makes this impossible, mail being a prime example.
This is what I thought they were trying to accomplish with the idea of .NET Core, but then by release time it was nearly as fragmented as before. This makes a ton of sense and really brings the initial .NET vision to life, finally. Excited to see this happen.
The only one I've use professionally has been Unity, *but* I don't think the sample size is representative. Autofac seems popular. NInject is/was popular. It really shouldn't matter, though. DI as a concept isn't very complicated, and you shouldn't wind up tied terribly hard to the specific container if you're doing things right, anyway.
 IApplication app = _container.Resolve&lt;IApplication&gt;(); Why? You know that app will always be an Application object. So why hurt performance by casting it to an interface? Granted the overhead will be small in this case, but it is a very bad habit. There is no reason to mention IApplication anywhere in this code. (And I'm willing to bet IApplication doesn't even meet the criteria for a well designed interface in the first place.)
Why? That sounds like a really stupid idea. 
He's not being mean, though I can see how it comes across like that. DI frameworks literally cannot do anything that you can't do by hand. So if you run into trouble, you need to resolve the dependencies by hand to verify your design. (And once you do that, go ahead and keep the manual code and throw away the DI framework. Because really, it's just a source of pain and blog posts.) 
 using(ProjectWebsiteEntities context = new ProjectWebsiteEntities()) { List&lt;user&gt; userList = context.user.OrderBy(u =&gt; u.username).ToList(); foreach(var user in useList) { // Do Stuff } }
I've just commented a call-stack with Time%. You can find it here :) http://imgur.com/8al0NCG
Here is a call stack from ANTS :) http://imgur.com/8al0NCG
I agree on Castle being the "canonical" (Unity has shown it's face alot more lately, meh). But I don't agree on the usage that you should be able to switch it out on the fly. Your DI is a framework element you can choose to leverage or not. I've certainly written lots of Castle specific scope/factories/installers, and I don't imagine would be trivial to port. It's the same with ORMs, just because you CAN switch your RDBMS, does not mean you should. It's another infrastructure element you can choose to utilize to varying degrees. And yes, sometimes solving stuff in the DB can be the right place. 
If you already know/have used Dependency Injection, then you should really use the one that you are the most familiar with and help the other person understand what you already know; though it does depend a little bit upon the scope of your project. The big three that I could think to recommend with when to use each: * Unity: Probably the absolutely most well documented DI container out there, it's a reasonable compromise between usability and performance. * AutoFac: It's well documented and is fairly competitive as far as performance is concerned. (Although the metrics I've seen on this are out of date at this point.) * StructureMap: It's what I use at my workplace. It has a lot of documentation, but going through it all is kind of a pain (I wish searching was better); But scanning is AWESOME. 
Wow, that is crap. 
I completely understand why WPF / Winforms are not part of the Core, due to cross platform compatibility, but are there going to be any libraries for building apps *across multiple platforms* that are not hosted by a browser?
Did you try making method async, returning a Task and await client.SendAsync().ConfigureAwait(false)? Assuming you can await further up the callstack and that you don't need the synchronization context... though 600ms is a ton. Plus async is likely to be slower as you're trading for more concurrency at the cost of latency. If you're a single process and not servicing a number of users and not sending batches of these don't do them async.
Are you sure you are sending exactly the same request like in C ? Did you check on the other side ? Maybe processing time is different on the server side? As you can see you only spend 28% of your time on doing real job of processing request and 72% waiting for results. Are you sure you are getting same results in C and C# from the server? Simple thing to do would be getting haproxy between both and measure time exactly spent from the beginning of request or you can use WireShark or any other similar tool. Then we would know for sure where the problem occurs.
Thank you MS. I hope this will end the code sharing hell that i am sitting in as a xamarin ios / android, webapi, wpf developer... 
Type this: O(n^(2))
Well, you can use Gtk with Mono, but I don't know if there are plans to port it to .NET Core.
TS.. &lt;3
I'm still running into issues with Core, API's being documented that just don't exist in 1.0.1 currently. Also issues from upgrading from 1.0.0 to 1.0.1 which were trivial to fix, but still issues none-the less. I'm excited to see everything finally get unified under one roof, because the fragmentation from Core to Xamarin to "full" .net framework has been annoying. (I write simultaneously for all 3) 
Autofac...on my fourth job in a row using it.
At least they didn't name it ".net one"
It isn't that either, it's a set of minimum requirements on .NET variants. 
One.Net?
I dunno I like my code to have hundreds of threads all throwing exceptions makes debugging more exciting ;)
I don't think it matters too much, it's the pattern that you are required to understand, the rest is just tooling. Once you have used one IOC Container, you can use them all.
How long before Xamerin is renamed to .NET Mobile?
These days, whatever platform I'm working on, I prefer persisting settings to JSON files. And Newtonsoft.Json has a .NET Standard 1.0 target and thus *should* work with .NET Core. Disclaimer: Haven't tested myself.
I grant you all those points, it's simply, being a small business and needing to cater for multiple platforms is a resource draining activity. It is good experience, however, and the current reality of the industry 
Can confirm, confused as fuck.
The point is you can serialize to your own classes, where you can add your own validation and structures. No need to parse XML, try to fetch elements based on string-literals and what not error-prone things System.Configuration requires you to do. You just declare the things you need, you let the class provide reasonable defaults, and write normal code to do validation. And you're ready to go. It's as simple as it gets, and IMO much less work than trying to work with the XML strait-jacket and frameworkyness of what is System.Configuration. I realize this is my opinion only, but I honestly don't consider this a great loss. Granted having to roll your own crypto is always a bad idea, but I don't think that applies to most people's configuration data. And if you're going to handle *sensitive and secure data* in a .NET config file anyway... You have to think it through all the way. In many cases I can bypass so called "encryption" used in .NET applications straight from Powershell: PS C:\&gt; [Reflection.Assembly]::LoadFile("C:\Program Files (x86)\SecureApp\EntryPoint.exe") PS C:\&gt; $x = new-object SecureApp.EntryPoint.ParsedConfig PS C:\&gt; $x.Password omgSuddenlyPlaintext # Challenge to reader: # Improve code to automatically detect the word "password" in any # class contained in the assembly. And if your security is that weak anyway... I'm not sure missing the official .NET APIs for transparent config-management is a big loss.
I really don't like using JSON for configuration. Also YAML just seems better every regard.
I haven't really looked into it too closely so don't know how it compares to rake but have you tried [psake](https://github.com/psake/psake)? It might help you overcome some of your issues and provide better integration with msbuild
there are multiple ways to achieve this. I prefer using datatemplates (first example in the article). this won't prevent you from using the ViewModelLocator - although i'm not a big fan of it. you just need to use it in your MainViewModel to resolve the viewmodels you offer in your navigation control instead of using it in xaml. 
Don't worry. I'm sure the next one will be called "ONE Core .NET". ^(one core to rule them all, and in the darkness bind them)
Yep. As someone learning the basics of .NET and studying C# this is confusing as hell. Now I'm not even sure if I should keep studying the .NET Framework or change to .NET Core.
O(n^(2)), sweet. Thanks.
Indeed. Value types often give problems, even to people that don't write their own. Especially when they are not immutable.
But why making it non-anonymous fixes it then? struct C { public List&lt;int&gt;.Enumerator E; } // can be a class as well static void Main(string[] args) { var list = new List&lt;int&gt;() { 1, 2, 3 }; var an = new C { E = list.GetEnumerator() }; while (an.E.MoveNext()) { Console.WriteLine(an.E.Current); } } // 1 2 3 Does it not get boxed in this case? What's the difference between anonymous and non-anonymous types in this context?
The important difference here is that your struct `C` contains a *field*, while anonymous types use *properties*.
He isn't missing the point, as a whole he's saying the point is wrong. Wiring up root composition manually works well in small projects, but in mid / large ones it will cause a ton of headache whenever you want to modify constructor parameters or refactor dependencies.
[SimpleInjector](https://simpleinjector.org/) is also worth a look. Great documentation and as the name suggests it's pretty simple. The registration code is simply container.Register&lt;IEmailClient, EmailClient&gt;(); and the nuget package does most of the initial setup.
God bless Jim Weirich.
With JetBrains now working on ProjectRider (their cross-platform C# IDE), we might see more of a push for this, possibly through Xamarin's app model or via UWP, so that Microsoft can port Visual Studio to Mac and Linux. One of the key things that's currently preventing this (I theorise) is that because VS uses WPF for its UI, Microsoft won't port it because that requires writing an entirely new front-end UI for the other platforms, which means that every update to/version of Visual Studio requires extra time being put in on other platforms when they'd rather write it once and publish it across all platforms (the term for this is 'technical debt', where a quick/easy implementation leads to longer/more difficult implementations in the future). The issue with this is that WPF runs in DirectX as it uses Direct2D to render, so having WPF on other platforms will be a pain, but it is possible as shown by Xamarin.Forms which has a similar idea but runs differently on the background. Again though, this can then lead to multiple fixes to different platforms.
[MaterialDesignInXamlToolkit Demo App](https://github.com/ButchersBoy/MaterialDesignInXamlToolkit/blob/master/MainDemo.Wpf/MainWindow.xaml) has a neat way of solving the problem
Basically reference assemblies to compile against.
You want to know about it if you are producing nuget packages.
I wouldn't expect most C# developers to know or use dependency injection. If you do know what it is, you first have to ask your self if you truly need it for this project.
The only reason why I want to use DI is for getting into BDD/TDD it IS required for writing these tests or at least can make using it much easier. (using a mock vs using Entity Framework directly manipulating the DB) 
The `MemoryCache` stores and tracks both values. I'm not sure if there are potential situations where they effectively can diverge, perhaps it's just a way to specify an absolute and relative limit if you don't know the system configuration of the machine your application is deployed on. The default value of `pollingInterval` is 2 minutes.
 * Write() = Leave cursor where the last character is. * WriteLine() = New Line, Carriage Return at the end. You can write Multiple Lines without writing the same method call repeatedly. Note: usually just use \n, but if it's not working \r\n usually works every time. This helps reduce and simplify the code for easy maintenance and review. Console.Write( "Welcome... blah blah blah" + "\r\n" + "Enter Data... blah blah blah" "\r\n" + "What's your First Name: " ); Here's an example of using a Loop and Data Validation. Bad data can lead to system crashes, and bugs later. Always validate inputs. Input loops help with end user experience. string input = ""; // Declared value and spaceholder for all input. bool isInputGood = false; // Did input pass checks // Loops until we have good input while(isInputGood == false){ // Waits for user input input = Console.ReadLine(); // Validate Input - Simple empty string check if(input != null &amp;&amp; input.Length != 0) isInputGood = true; } // Now we know our input is good. reservation.FirstName = input; I noticed you are trying to use a DateTime parser, but I feel like it was overkill for your program. I'd suggest a simpler method of asking for the Month and Day and simply saving that as a string or int. However, here's an example that allows a basic DateTime format for input. // Reset or CleanUp from last input code // string input = ""; // bool isInputGood = false; Console.Write( "Please enter date in format DD/MM/YYYY: \r\n" + "Check In:" ); while(isInputGood == false){ input = Console.ReadLine(); // Grab User Input // Try {} Catch {} Finally {} // Allows us to run "bad " code and handle it safely try { // InvariantInfo has a dependency, add this to top of file // using System.Globalization; DateTime.ParseExact( input, "dd/MM/yyyy", DateTimeFormatInfo.InvariantInfo ); isInputGood = true; } catch(Exception e) { Console.WriteLine("Wrong Format, please try again"); // TODO... Logging, or Output e.message()... e.ToString()... } // Note: String date = "27/09/2016" reservation.CheckIn = input;
That's some deep shit, yo. Where is it documented that anonymous types use properties?
Inject a object that creates the object you want, usually via your IOC container. Look up the factory pattern. 
[MSDN](https://msdn.microsoft.com/en-us/library/bb397696.aspx) :)
&gt; If I wasn't using dependency injection, I would make the method take a new Menu object, but I can't do that while using DI. Why can't you? Dependency injection means that pass in (inject) your arguements (dependencies).
His post says 'don't roll your own DI framework', not 'don't do manual DI'.
A factory is just an object that creates other objects. In the most trivial implementations, it's a substitute for a simple method, as earlier versions of Java didn't have first class functions. If you're using an IOC container, you already have such a factory: the container! If you're not, a very simple one can be created like so public class FooFactory { public Foo Create() =&gt; new Foo(); } but, I'd really recommend using a factory method in C#, unless you need to incorporate the builder pattern for some reason.
Generally it's something like this public interface IFooFactory { Foo CreateFoo(); void DestroyFoo(Foo foo); } With this implementation. (Depending on your IOC container it might be able to create a factory implementation for you. Castle Windsor can do that if you install the [TypedFactory Facility](https://github.com/castleproject/Windsor/blob/master/docs/typed-factory-facility-interface-based.md)). public class FooFactory : IFooFactory { private readonly IKernel _kernel; public Foo CreateFoo() { return _kernel.resolve&lt;foo&gt;(); } public void DestroyFoo(Foo foo) { _kernel.release(foo); } public FooFactory(IKernel kernel) { _kernel = kernel; } } Then you have your class that needs to make `Foo`s take an `IFooFactory` as a constructor argument, and wire up your IoC container to be able to create `FooFactory`s when an object asks for an `IFooFactory` (it should inject itself into the `IFooFactory`, so the `IKernel` part of this demo script should be replaced with whatever abstraction your IoC container lives behind), and away you go. Just be careful not to create a generic factory that can ask for anything out of the IoC container, that's an anti-pattern. The approach outlined above enables you to maintain strict control over what a consumer of your factory is able to produce. If you give a class the ability to create anything, you've just given away keys to the kingdom, so to speak. But in test you can inject a mock `FooFactory` that spits out a testable dependency. Another mechanism to accomplish this would be via FactoryMethod injection, where you create a `func&lt;Foo&gt;` property on your object and have your IoC container inject an implementation of that func that returns a `Foo` created by the IoC container when invoked. I think Autofac and Ninject users generally take that route, although you then have to perform null checks on the Func or have a safe null implementation. 
If you could pass the resolved menu 'without' dependency injection, you should still be able to pass it as an argument when you're using a container.
You would inject the factory into the component that needs an instance of whatever the factory is making. 
Passing the container itself is a bad idea, because you tend to wind up with your DI framework scattered hither and yon through your application. Speaking as somebody who's spent some time refactoring code that was written that way--classes taking dependency resolvers, which they passed to other classes down the chain, etc--it becomes a huge pain in the tuchus. If you don't need that level of disconnection, it's best to avoid it. But, you can pass a factory method, if that's really what you need. If, as it sounds, you need to use an int to resolve your menu, that might look something like this: public void ChangeMenu(Func&lt;int, Menu&gt; menuFactory) { /* stuff */ } ChangeMenu(i =&gt; new Menu(i)); or // arg-passing convention will vary depending on your container. ChangeMenu(i =&gt; _iocContainer.Resolve&lt;Menu&gt;(i)); But! this may be a lot of abstraction you don't need. IoC/DI is *just* passing your dependencies as arguments instead of creating or resolving them in your class or method. A container disconnects things so that you can create objects in a very generic sort of way. This is useful for building abstracted frameworks like, say, MVC, but it may be overkill for the more concrete system you're actually building.
As a general rule, nothing should be touching the IOC container after startup. If you are doing that then you aren't using "dependency injection". Rather, you are using "service locator", which is generally considered to be an anti-pattern. https://www.infoq.com/articles/Succeeding-Dependency-Injection
1. Generate number method isn't generating any numbers 2. Your print method is setting the array values right before printing so they will always be the same.
That's usually a bad idea. There in lies the path to Java J2EE programming. EDIT: Generally speaking, factory methods have several problems: * They are harder to find than normal constructors. (I've wasted lots of time trying to find the factory method that produces a given class.) * They are harder to reason about than normal constructors. A well written constructor only depends on its immediate inputs. A factory implies that there are secondary factors that were specified when the factory was created. * You still have to create the factory, so in the base case it doesn't actually save you any effort. * It is rare for a factory method to actually be capable of returning more than one type in production, but it gives the impression that is the case. * Factory methods often hide dependencies on global state. (Including, but not limited to, IOC containers.) *** There are times when factories make sense. For example, here is an ORM that accepts ADO.NET's `DbProviderFactory`, which in turn creates database specific connection and command objects. But here we're talking about very generic framework code, not something you would normally see in the application layer. https://github.com/docevaad/Chain/blob/master/Tortuga.Chain/Tortuga.Chain.Core.source/shared/GenericDbDataSource.cs
Not that I disagree with you (or agree), but usually it's great to provide a reasoning for statements one makes.
Fine, I updated my comment.
Ref Returns will help quite a bit with mutable interfaces: class Shape { public ref Rectange Size {get {return ref _size;}} //ref returns have an implied setter myShape.Size = new Rectangle(1, 2, 3, 4); myShape.Size.X = 5; Does the right thing in both cases. 
Yeah... still feels a bit low-level to have to do that :p. In general, I prefer avoiding mutable structs unless they are only used internally.
90% of our applications at work use Mef, it's simple and built straight into the NET framework. The other applications are slightly more complex and use `SimpleInjector`. Before that it was `Ninject`. But that was dog slow, like really REALLY slow (5+ mins) whereas `SimpleInjector` takes less than 2 seconds to do the exact same thing. Boggles the mind.
`finny` and `funny`
&gt; Avoid sw.ElapsedMilliseconds when benchmarking code. It can introduce misleading rounding errors. Use Stopwatch.Elapsed.TotalMilliseconds instead. Really? First time I have heard of that. How bad are the rounding errors? 
fixed it. It wasn't the problem however. i accidently put a ! infront of the string.
You are going to have a bad time. I would push back on this, and try to understand what problem you are actually trying to solve here.
It was one of your problems. Your code did not compile.
My bet these days is on SimpleInjector. I used Ninject previously but after issues with OWIN and Web API I switched to SimpleInjector. It seems like it is getting traction because of its superior performance and I am seeing it in other projects where I didn't choose it. However I think with .NET core most people will simply use the bundled DI.
If the string is null the `Contains` method is never called, and you get a `NullReferenceException` instead.
Stop using `Contains`, or read its documentation.
Removed: Rule 4. Be sure that all submissions which include code are properly formatted for reddit. In addition to the other answers, you may need to look into how to use the `else` clause effectively. This gives you a mutually exclusive gate that won't execute both pieces of code. By using two `if` statements, you can potentially enter both blocks of code if they both evaluate as `true`.
Way more readable than `indexOf ... &gt;= 0` and in most applications the marginal performance difference is unimportant.
r/learncsharp is probably a better outlet for this sort of question.
Only a single call to `ConfigureAwait`? Seems fishy. Also a lot of undocumented public code.
Innately being case sensitive is not a reason to not use it. Is it the best method for what OP wants? Maybe not. But I would disagree with just flat out blanket statements like "stop using it". It has its purpose. It's not the method's fault is people use it poorly. But yea, learning how to use the debugger the OP could've solved this one on his own.
Ha, don't feel bad; I still make that mistake from time to time. My finger slips over the key when using my numpad to navigate pages, and I hit the 0 and suddenly, I'm in Insert mode. ...Dunno *why* it even exists, anymore, to be totally honest; its not like it takes any extra time to use backspace and type to replace a character.
Hi. Thanks for pointing that out. Actually it is a huge mistake as it could result in deadlocks. ~~I will add ConfigureAwait to all the async method in my library right away. (As to why is it in only one method, I only tested that method in the UWP test app and all others in a console test app for fast results and I forgot to add them as it worked fine :P)~~ [Fixed!](https://github.com/prajjwaldimri/Genius.NET/commit/4122c4b79074fd5bcf8d09ed606d64c6ab256868) Also, I am currently documenting the library. It will be done ASAP. If you have any other queries or suggestions you can contact me via reddit or [Gitter](https://gitter.im/Genius-NET/Lobby) or create an issue on [Github](https://github.com/prajjwaldimri/Genius.NET)
DI is IoC, IoC is DI, but neither are containers or vice versa. All it means is that if class Foo is dependent on class Bar, an instance of Bar is passed in, instead of Foo creating its own Bar. This is IoC: public Foo(Bar b) { _barInstance = b; } This is not: public Foo() { _barInstance = new Bar(); } That's it. Containers aren't necessary for a lot of applications.
Right, but that wasn't my point. OP most likely wants == or similar, not substring testing.
Literally in the first sentence. Nice. Might have been helpful to link the first usage of "properties" to [Properties](https://msdn.microsoft.com/en-us/library/x9fsa0sw.aspx). I never knew this since I haven't run into any issues where the members being properties mattered. Good to know.
You've got that half right. In the pattern I've outlined above, you can only resolve objects of the type the factory is intended to produce. The bad idea is giving something the IoC container that might use it to resolve whatever it wants- that's the "service locator anti-pattern." What I've posted is a very standard approach to the question you've posed. 
Check out Owin. Or ASP.NET Core. The basic platforms don't care about the type of the data, they just pass it in to you (or whatever framework is built on top).
sw.ElapsedMilliseconds is an integer, so you lose fractional milliseconds. How bad that actually is of course depends on what you are timing, but from an API standpoint it was a stupid design.
In the System.IO.Port, The NewLine basically starts off as a string const = "\n"; Then it gets overridden later based on implementation. This allowed for a cleaner if statement in the newer code. The 3 platforms are more universal these days, but in earlier days... everyone had their own idea of how to handle this event. IBM even had their own special character to call, which really throws a curve ball at cross-platform anything. Mac used "\r" for instance, and Linux/unix was "\n", meanwhile DOS/WIndows was using "\r\n". It would be interesting to find out why these differences mattered, and why it's not more standard across all platforms by now. Some insight into why Windows is different than Linux here, [msdn.com/Forums... /Differences](https://social.msdn.microsoft.com/Forums/en-US/47af2197-26b4-4b9e-90e8-bfa9d5cd05b4/what-is-the-deference-between-r-n-and-rn-?forum=csharplanguage) Essentially boils down to Linux OS combines the Left Edge Operation with the New Line Feed command, while Windows enforced a Return to Left Edge and Move Down operation as distinct elements. This was back when being super efficient with space/memory was important, so this makes since. MAC just must have wanted to be the same but different than Unix or something... 
Statics are just as easy to test as nonstatic. Please stop spreading this falsehood. You can even have "virtual" statics by exposing a way to replace a Func&lt;&gt; where the Func uses your default implementation and a user can replace or combine your functionality to be different. Also string identifiers are always superior to numeric identifiers. The only reason to ever not use string identifiers is you're willing to couple your application to internals of your persistence store and you want to prevent a write error. 
&gt; ConfigureAwait This? https://msdn.microsoft.com/en-us/library/system.threading.tasks.task.configureawait%28v=vs.110%29.aspx I've never seen this before. Is this a thing that I should understand if I claim to know c#?
Similar to psake, [Invoke-Build](https://github.com/nightroman/Invoke-Build) provides "lazy builds" as [incremental tasks](https://github.com/nightroman/Invoke-Build/wiki/Incremental-Tasks) and [partial incrental tasks](https://github.com/nightroman/Invoke-Build/wiki/Partial-Incremental-Tasks).
Cool! I'll have to give it a try and see how it compares to what I've done (and the direction I'm going in) - it sounds like you've done some really nice work there.
Looks interesting, thanks
nice but i dont think genius works very well http://i.imgur.com/GZYB6Nm.png
&gt;&gt; Also string identifiers are always superior to numeric identifiers. &gt;[citation needed] Take a url shortener service. Strings allow you to use the url as an identifier Suppose you want to use a guid. If you store strings you can use guid.ToString() or guid.ToString("n"). Next instead of random identifiers. Let's say you have a system document. You could persist it as "system" instead of a random integer. Semantic keys with meaningful value are always superior to random/generated numbers 
That doesn't even compile.
Are we talking about Windows Forms or ASP.NET web forms or something?
If you're using multithreading, you may be running into issues with multiple threads accessing the variable at the same time. You will need to use the [lock statement](https://msdn.microsoft.com/en-us/library/c5kehkcz.aspx) around code that accesses variables that can also be accessed by other threads at the same time.
I don't know about superior but strings are flexible and more easy to manipulate instead of int, double etc.
xD, they need to work on their search algorithms.
It will happen mostly in UI threads and ASP.NET context. e.g. in below example, if you have one async method AMethod() which awaits another async method AsyncMethod() contained in it. AMethod() will return an uncompleted task till it completes the async task inside it, but the UI thread blocks the context. The AMethod is waiting for the context to be free and the UI thread is waiting for AMethod to complete. DeadLock public static async Task AMethod(){ var a = await AnotherClass.AsyncMethod();} 
To be frankly, I have no real knowledge on how 64-bit relates to performance. I was just wondering that CodeLens maybe needs plenty of memory to hold all the references and what not. Either way, I salute you for being so active on r/csharp :)
&gt; maybe needs plenty of memory to hold all the references and what not. It likely does. But then updating to 64-bit would not speed it up, it would allow to have more memory. And in most cases when this is required, the better option is not to increase the available memory, but instead improve the data structures so they require less memory. Especially with data structures that are held very often.
I know you've got your answers but you really need to read up on the basics. After 20 days that code shouldn't really be confusing. Not trying to be mean. If you don't master the basics you're gonna have a bad time.
LINQ is a productivity tool. It allows you to write complex code that selects and transforms objects in a functional manner. It works with virtually all objects, and has support for ORMs and is extremely robust in spite of it all. Expecting it to be micro-optimized in spite of all the challenges seems a tad unfair. And I'm honestly skeptical that any of these libraries are going to robust enough for production in all of the environments that are currently using C# 4.5. I'd be curious to see what folks like Mads Torgerson and Eric Lippert think of these efforts. If you need to worry about memory allocation and microseconds, there is a simple solution: don't use it. 
Who uses SSDT anyway? It's got to be a plot to push devs to get SSDT, giving them CodeLens as an incentive.
You only map them when you leave IQueryable and enter IEnumerable, like calling ToList() or similar. And after that point, they're just objects as any other, so I don't see how it being an IEnumerable that came from a database has any impact whether good or bad.
&gt;an object (or struct) - &gt;a value type instead of an object As far as I'm aware, structs are considered objects as well. At least that's the language used in the MSDN.
BenchmarkDotNet reports times per iteration. In [the repo](https://github.com/Grauenwolf/ForEachTimings/blob/master/ForEachTimings/ForEachTimings/ConstructBenchmarks.cs) linked in the article it's actually 100 * 1000 * 1000 items which sounds more fitting (but might also distort the results).
A quick google search shows you could use WMI to query the printers on the server https://msdn.microsoft.com/en-us/library/mt703458(v=vs.85).aspx Modifying some code example from the page: using System.Management; ... ManagementScope scope = new ManagementScope("\\\\PrintServer\\root\\cimv2"); scope.Connect(); ObjectQuery query = new ObjectQuery("SELECT * FROM Win32_Printer"); ManagementObjectSearcher searcher = new ManagementObjectSearcher(scope, query); 
This was a really interesting article, but it was difficult to read the code samples as they're all on one line. Same for the IL bits. Any chance they could be made multiline?
Oh wow, I don't know how that all got broken. I'll get it fixed ASAP. **FIXED** Thank you for bringing that to my attention. 
The exception you are getting is typically thrown by EF because of optimistic concurrency control via the `[Timestamp]` attribute. But, I don't see any of those on your entities. My guess, looking at the code, the update method is incorrect. EF has change tracking for all items that it pulls or inserts into the database. As such, the `updateTask` method is incorrect. Once you pull the task from the `internalQueue` you should just update it in place. Then call `dbAccess.SaveChanges()`. Now, this may only work once you have the EF wrapped version. Basically, you will notice that `dbAccess.Tasks.Add` will actually return a value. This will be the tracked entity, so if you add to your queue the above will work as expected. If you don't want to do that just have your update method query for the entity via `dbAccess.Tasks.Find` and just update the fields you want and then call `dbAccess.SaveChanges`.
Some of those features look pretty neat but I'm way more excited by the tentative plans for C#7+1 as per https://github.com/dotnet/roslyn/blob/master/docs/Language%20Feature%20Status.md Proper pattern matching, non-null refs and records!
You can use the "as" keyword and check for null. Or use LINQ OfType on that collection.
That's stupid. WPF is very advanced and specifically designed to have 3D and 2D graphics and animations. GDI is a piece of shit and its just awful you want to convert from DirectX to GDI. Your performance is going to be as slow as a Model T, and you'll hate yourself for the wasted effort to make it slower. Just use WPF which internally uses DirectX anyway so you will have great performance. You might also consider using SkiaSharp from Xamarin which is a C# wrapper over the graphics library used in Google Chrome. And no, you don't need Chrome installed its literally a library, and yes it runs on desktop and everything else. Please god no don't use gdi or gdi plus.
Every 'Control' has a .Enabled option, you can do this: foreach (Control c in Controls) { c.Enabled = true; }
I don't want to disable everything though, I want to disable all of the buttons. :P
A bit vague...and how about ownership?
If( c is Button ) C.enabled = false; However, you're really going to want to do a recursive listing of your controls. Your code won't pick up a button on a panel or as a child of anything else. Can't type it out on mobile. Google "c# recursively list controls." It's very very easy. 
This should work too: foreach (Button b in Controls) { b.Enabled = true; }
That looks super cool.
What kind of microphone are you using?
`int` is a value type. `parameter` is an boxed integer, and when you cast it to `int` you unbox it. Then you have a copy. That copy you increment. Wrap the value in a reference type.
Okay, so I've look at Wrapper principles, but it seems kind of complicated for my purpose. Is there no other way in WPF to easily increment a value? Cause normally I must also check if "maxPoints" has not been reached as a condition of CanExecute and change its value when incrementing/decrementing, so that shall make an awful lot of manipulation for something that seems pretty simple :( 
Use this: public class RelayCommand : ICommand { public RelayCommand(Action execute) : this(execute, () =&gt; true) { } public RelayCommand(Action execute, Func&lt;bool&gt; canExecute) { _execute = execute; _canExeute = canExecute; } private Action _execute; private Func&lt;bool&gt; _canExecute; public void Execute(object parameter) { _execute(); } public bool CanExecute(object parameter) { return _canExecute(); } public event EventHandler CanExecuteChanged; } And in your viewmodel: public ICommand IncrementAppearance { get; private set; } In the constructor of your view model: IncrementAppearance = new RelayCommand(() =&gt; appearance++); That should work.
Yeah, that's the problem I think : I don't have a viewModel. I'm still going on with the basics of WPF. I don't wanna sound rude or ungrateful, but I don't understand the code you provided, and I would rather understand it than just use it as it is, cause otherwise I might as well ask you to code for me :) What is "RelayCommand" ? is that a type of yours, or does it come from a library/native c# implementation? Is there a way to pass various arguments to your command? Cause as I said earlier, I've multiple rows to increment, and if I must create a command for each row then I might as well go with a basic click_event. 
If the reference type you are passing in as the command parameter is held in a variable inside your view model or window you would still have it. I think you should take some time to get very co for table with the basics of reference types, value types, the differences, and how you can use them. It will benefit you greatly.
I'm on my phone at the moment, but I'd be happy to do that when I get to the office.
I'd recommend going with MVVM Light to learn bindings. Why? Because WPF bare-bones has so many boilerplate that you'll be looking through walls of code without actually doing anything. Like implementing INotifyPropertyChanged, ICommand, Dependency Injection, ect. Just let a framework do that for you. Then learn the inner details (there are many details) otherwise you'll probably face many little things you forgot to do (unless you enjoy learning that way). You don't need a ViewModel. You can just use the class directly behind (code-behind) the view itself. A ViewModel is just a practice (MVVM-pattern) that WPF makes possible thanks to its bindings-feature. You need to bind the DataContext of your View (a property) to your code-behind though. Otherwise you can't do `Command="{Binding MyCommand}"`. You can bind the DataContext with: `DataContext="{Binding RelativeResource={RelativeResource Self}}"`. This'll bind the View to its .cs file. RelayCommand is a common name for a common implementation of ICommand that MVVM Light also provides. It's just executing an action (code) whenever the command is being triggered. Edit: **Example** **View** &lt;Window x:Class="TestingWithBindings.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:TestingWithBindings" mc:Ignorable="d" Title="MainWindow" Height="350" Width="525" DataContext="{Binding RelativeSource={RelativeSource Self}}"&gt; &lt;Grid&gt; &lt;Button Content="Click me!" Command="{Binding MyCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Self}}"&gt;&lt;/Button&gt; &lt;/Grid&gt; &lt;/Window&gt; **Code behind** using System; using System.Windows; using System.Windows.Input; namespace TestingWithBindings { /// &lt;summary&gt; /// Interaction logic for MainWindow.xaml /// &lt;/summary&gt; public partial class MainWindow : Window { public MainWindow() { InitializeComponent(); } public ICommand MyCommand =&gt; new DefaultCommandImpl(() =&gt; MessageBox.Show("Hello!")); public class DefaultCommandImpl : ICommand { public Action Action { get; set; } public DefaultCommandImpl(Action action) { Action = action; } public bool CanExecute(object parameter) { return true; } public void Execute(object parameter) { var button = parameter as Button; if (button != null) { button.Content = "I was just clicked!"; } Action?.Invoke(); } public event EventHandler CanExecuteChanged; } } } 
Unless you're gunning for a job that uses C, there's no reason to learn it first. At any rate, the first language is the hard one. Picking up a new one isn't too bad. 
Honestly, I'd learn C# before diving into C/C++. Don't get me wrong I love C# and use it most days at work but, C++ is like C# without the training wheels attached. As for learning C vs C++, if you are going to learn C++ make sure you are learning the C++11/14/17 (also called 'modern C++') standard instead of C++98. There are large changes in the language that really push it past the "C with classes" design orientation. The real question is what are you trying to learn. Programming in any C derived language is going to have lots of crossover in terms of design. If you want to get into more of a theory of programming I would recommend looking at [A Practical Theory of Programming](http://www.cs.toronto.edu/~hehner/aPToP/). I took his course years ago and it totally changed the way I thought of complex systems. **TL;DR;** If you are just starting learn C# first. Don't learn C and then think that helps you program in C++ since the language has greatly evolved from that design philosophy recently.
You need a view model. The view model is bound to the view and will reflect the values stored on the view model. The command will live in the view model and have a reference to the view model. Then if you increment the value on the view model via the command, the UI should update.
Does this class include a textbook that you were supposed to be reading and probably didn't?
Hi, thanks a lot for your help. I've been trying to do what you said, but I can't get it to work. If I understand you correctly, it's ok to resolve from the container as long as you use specific factories, right? I already have an IFactory that exisiting classes already implement, but its get method takes an int for an id. How would I query my container for a matching menu when the id for the menus hasn't even been created yet (seeing the container doesn't have menu instances, only their type registered)? I know your example is only an example, but I'm not sure what to pass, and how to make it work with my existing factory interface. My factory: class MenuFactory : IFactory&lt;Menu&gt; { private IContainer _container; public void Load() { throw new NotImplementedException(); } public Menu Get(int id) { throw new NotImplementedException(); } public MenuFactory(IContainer container) { _container = container; } }
SetPixel isn't a static method even though the object itself is static. Edit: more explanation
I have to wonder if this is the same as web forms, with all the good points and bad points of that tech stack
&gt;Any public static (Shared in Visual Basic) **members of this type** are thread safe. Any instance members are not guaranteed to be thread safe. This only means that static methods etc. of the `Bitmap` class are thread safe (which is really only `Bitmap.FromHIcon()`). Instance members of `Bitmap` do not magically become thread safe by storing a bitmap instance in a static field.
Ok, that makes sense, thanks. Looks like I'll have to either use locks or find a different way of doing things then. 
Hey, I checked the link you gave me and by modifying the example I got it somewhat working, except that the entries aren't being sorted. Here is the code I came up with. Do you see what could be the cause of the problem and how to fix it? class Player { public string Name { get; set; } public int LP { get; set; } } static void getChallenger() { var api = RiotApi.GetInstance("HERE IS MY API KEY"); //Asetetaan developer-avain var challengerLeague = api.GetChallengerLeague(Region.euw, Queue.RankedSolo5x5); for(int i = 0; i &lt; 200; i++) { var challengerSummoners = challengerLeague.Entries[i]; var challengerSummonersString = challengerSummoners.PlayerOrTeamName; var summonerLP = challengerLeague.Entries[i].LeaguePoints; Player[] players = { new Player { Name = challengerSummonersString, LP = summonerLP } }; IEnumerable&lt;Player&gt; query = players.OrderBy(player =&gt; player.LP); foreach (Player player in query) { Console.WriteLine("{0} - {1}",player.Name, player.LP); } } } Also, there are 200 players in the challenger tier, that's why a part of the codes is set to run 200 times.
The issue is already explained by the other answers. An easy and common fix that also fixes flickering is double buffering. Basically you have two canvas (Bitmaps in your case) and the worker would draw on one while the other one is displayed. When the worker finished drawing a new frame you just swap out the two bitmaps. 
If its a List&lt;T&gt; just use .OrderBy(). For example List&lt;MyObj&gt; list = getList(); List&lt;MyObj&gt;sortedByPoints=list.OrderBy(i=&gt; i.LeaguePoints); Where i is an 'instance' of MyObj, then just say order by what property. Theres also OrderByDescending() which does the same but just descending.
How does StringBuilder help here? This scenario is not building up a large string from many substrings, it's taking many existing strings (for instance, read from a file) and extracting substrings from them.
Thanks for the reply. I wasn't aware there is a free Service Plan on the Azure service.
Additionally, you may find some performance improvements by unlocking the bits of the Bitmap object: http://www.codeproject.com/Tips/240428/Work-with-bitmap-faster-with-Csharp
There is little point in using Commands if your going to do everything in code behind. Use events if that is the case. Then again don't put domain logic in your code behind. So use Commands and MVVM. :)
Assuming that your character class is the DataContext of the StackPanel you would need to have a public property named IncrementCommand that is of type IncrementCommand for this to work. because primitives are passed by value in c#, the only thing that it will do is to increment the value of param locally in the Execute(object) method. In order to have this work as you would expect you would want to create the RelayCommand type that u/AngularBegginner has graciously provided (and works about the same way as the DelegateCommand provided by the Microsoft.Practices.Prism library mentioned), create an instance of that RelayCommand in your character class (again assuming that the character class is the context at this point) that points to a method or lambda that increments appearance .. something like this in your character class should do the trick: public CharacterClassConstructor() { ... this.IncrementCommand = new RelayCommand(() =&gt; { this.appearance++; }) ... } public RelayCommand IncrementCommand { get; set; } (quick edit ... don't comment much and wasn't sure what the md for preformatted text was ... apparently not the same as bitbucket markdown :\)
Ye, my example isn't what you should be doing if you're serious. You can use it for testing the waters with WPF's bindings but I recommend following MVVM tutorials whenever someone feels himself ready.
Depends on the specifics of your menu class, but get would probably resolve from the container a new menu passing the id in as a parameter? 
I don't know the _best way_ how to fix this, but your call to `.WithParameter(new TypedParameter(typeof(IContainer), _container))` is eagerly evaluated before your `_container = builder.Build();` line, so `_container` is `null` at that moment. A dirty fix would be to change the parameter to `Func&lt;IContainer&gt;` and pass in a delegate that can be evaluated later in the constructor. For example: public MenuFactory(Func&lt;IContainer&gt; container) { _container = container(); } And your building code might change to include something like: .WithParameter(new TypedParameter(typeof(Func&lt;IContainer&gt;), () =&gt; _container)) Might need to do some other tweaks, but the point is to defer the `_container` evaluation until after it's instantiated/created. I have no idea if this is a good way of doing it, especially since I haven't used AutoFac, just some BS way I see you might do it off the top of my head.
It looks like `_container` was previously initialised to null and that null value is what has been passed in with the `WithParameter()` call. By the time you build the container later and assign that to `_container`, it's too late. If you actually need to resolve components from the container inside the factory, you probably want the factory constructor to take `IComponentContext`, and Autofac will fill that in itself - see [this answer](http://stackoverflow.com/a/4609510). I'd generally say that passing the entire context into a constructor is a last resort, though. If you need to do some more complex logic during construction that involves resolving components from the container, you can use [lambda expressions](http://docs.autofac.org/en/latest/register/registration.html#lambda-expression-components), for example. Autofac also a concept of [delegate factories](http://docs.autofac.org/en/latest/advanced/delegate-factories.html), but I haven't used them and I'm not sure if they'd be useful in your case.
Author could have called `.AssertConfigurationIsValid()` after configuration to validate mappings, no unit tests required. Author's solution now causes a dependency between the business model and the contracts (dto) that is unnecessary. DTOs should be as isolated as possible.
&gt; In most project there is a need to separate your business objects (entities) from the objects you send over the wire (dtos) or the objects you use to feed your MVC views (view models). Not really. That's a limitation of Entity Framework. If you stick to a traditional MVC style with real model classes instead of the EF entity/dto route, this problem goes away.
Agree with this...don't use WinForms. It's dated, legacy tech that makes it really easy to write really bad code. Learn to use WPF or UWP for desktop apps.
Can you elaborate? "Need" is probably too strong a word, but I prefer to keep those things separate because the solve different problems. I'd never send my business objects over the wire instead of a DTO, for instance, because the business object is free to change shape but the DTO isn't as flexible.
This is a pretty broad question. What kind of data? Where is it being saved? In what context and frequency is it being saved? What mechanism are you using for saving? (e.g., `BinaryFormatter`, `XmlSerializer`?) Generally speaking, it's usually beneficial to try and separate your data persistence (saving/loading) concerns from your application concerns. Have domain/data/class objects that are specific to your application layer that your application works against. This tends to give you flexibility to generate automated tests, save/load data from multiple sources, and provides some backward/forward compatibility options when it comes to your saved/persisted data. It also avoids leaky abstractions where your application classes have to be written with a particular style, or limitations, or clutter just to support your data persistence layer. For example, if you're serializaing with `XmlSerializer`, your class objects now need a parameterless constructor and public get/set properties; you may need to hide additional members you don't want saved, or have to bang your head against the wall getting nice human readable XML output while not sacrificing the code/API design you wish to have. If you separated your concerns, then your application classes could be written to be nicely immutable, or have any variety of properties and data structures on them, and kept clean from any extra XML attribute clutter. Another example is just what you're asking now: how do you deal with private members. If your data saving is intertwined with your application classes, then you might have trouble dealing with this. If you separate your concerns, then you probably don't care, or at the very least, it's much easier or trivial to resolve. So if you have some class `Foo`, you may have another supporting class like `SerializableFoo` that knows how to XML serialize. Then you might have some `FooSerializer` that knows how to convert (with typical C# code) to convert to/from `Foo` and `SerializableFoo`. When you save, you convert your `Foo` objects to `SerializableFoo` objects, then write them to your file (or database, or whatever). When you load, you read your `SerializableFoo` objects then convert them to `Foo` objects and toss them into your application.
You can go with different approaches. I prefer to use an interface that is implemented by classes that need to be saved. The interface has a method to save itself as Json or xml or w/e then done aggregator saves all the Json to file
It depends? An ideal division of responsibilities has a class responsible for abstracting the business of writing to the file, and lets the individual objects tell it *what* to write out. The simplest way to manage this is probably by way of an interface that each object implements with a method that takes the writer object as an argument. Something like: public interface ISaveableObject { public void Save(ObjectSaver saver); } public class ObjectSaver { public void WriteInt(int i) { /* omitted */ } /* and so forth */ public void Write(ISaveableObject o) =&gt; o.Save(this); } This is basically the visitor pattern. It will spread your saving logic out a bit (file writing would be in ObjectSaver, but the details of what gets saved will be spread through each saveable object in your solution), but it makes it easy to add or remove saveable objects from your data model. Now, if you don't actually care about the how the data is persisted to a file, it might be practical to use something like .Net's built-in object serialization. At the very least, that should save you the trouble of writing the code to read/write your files.
You are probably looking for DataContracts: namespace MyTypes { [DataContract] public class MyClass { [DataMember] public int MemberToSave { get { ... } set { ... } } } } Then with one line you can save and/or load to/from binary or XML.
&gt; As the complexity grows over time the architecture either forces changes down through the system to the data source or exposes attributes of one part of the system to others, because of the coupling. No, not at all. The pattern is in the article is to have client-specific DTOs and generic entities. What I'm saying is keep the client-specific DTOs and ditch the entities entirely. You won't be able to use heavy ORMs such as nHibernate or Entity Framework, but those were never really necessary. Micro ORMs such as Dapper and fluent ORMs such as Tortuga Chain are more than adequate when using a relational database. *** The sad thing about EF is that it doesn't work with NoSQL type databases, yet it operates almost entirely on object graphs as if it were backed by a key-value or document style database.
The pattern where objects know how to save themselves is commonly called the "[active record](https://en.wikipedia.org/wiki/Active_record_pattern)". It is generally out of favour. So in most code, the answer is "no, classes do not generally know how to persist themselves". Instead, you often have [Data Transfer Objects](https://en.wikipedia.org/wiki/Data_transfer_object) which have all the parts that you want to save, with no private state of consequence; along with a [repository](http://deviq.com/repository-pattern/) that can save them. Having said that, a lot depends: Are you saving to a relational db such as MS SQL server, a NoSQL store, or just a file? Is the object written as json, xml, text or a binary format? 
I've used AutoMapper pretty heavily for the past 5 years. AutoMapper's purpose is to reduce dumb lines of code. The only correct way to use AutoMapper is to use config validation. If you don't use config validation, you're going to have runtime errors. If you do use config validation, you are greatly reducing the value of AutoMapper because you have to explicitly ignore missing properties by writing dumb code. In really large projects, we run into code where we know AutoMapper is executing, but we can't quickly and easily find that code. We have to do ctrl + f "&lt;SomeType, AnotherType&gt;" to find the configuration we're looking for. A good software library abstracts hard problems away. AutoMapper takes a simple problem and makes it more complicated in the name of saving some lines of code. We now use plain copy constructors which are easy to use and understand. The compiler tells us when something is missing, we can navigate to the code with ctrl + click, there is zero startup overhead, and our project has one less dependency. 
I went ahead used what you said but still avoided the StringBuilder for while stress: string[] oldArray = textBox1.Text.Trim('\r').Split('\n'); textBox1.Clear(); int r = 0; for (int s = 0; s &lt; oldArray.Length; s++) { if (oldArray[s].Contains("&lt;br \\/&gt;")) { //if (int.TryParse(oldArray[s], out r)) //{ //if (r &gt; 0 &amp;&amp; r &lt; 2000) //{ oldArray[s] = "\n"; //} //} } //[s] + "\n"; } textBox1.Text = string.Join("\n", oldArray);
Correct me if i'm wrong, but if a property of one of the objects in the observable collection is changed the UI won't be updated. You would need BindingList for that, right? Observable collections only updates the UI if the collection is changed, i.e. something is added or removed?
WinForms is great as a beginner, but it mostly shines as a prototype or quick and easy solution. It just isn't designed for truly robust and great looking UI in today's world. Here's some quick links to get started with WPF and UWP. * [My first WPF](https://msdn.microsoft.com/en-us/library/ms752299\(v=vs.110\).aspx) * [Hello World UWP](https://msdn.microsoft.com/en-us/windows/uwp/get-started/create-a-hello-world-app-xaml-universal)
 using (var reader = new StringReader(textBox1.Text)) { var sb = new StringBuilder(); string line; while ((line = reader.ReadLine()) != null) { sb.AppendLine(line.Contains("mdm") ? string.Empty : line); } textBox1.Text = sb.ToString(); } &gt; I placed !Done! and in my code I used While(true) if (line != "!Done") and it went Foooorever =. If your last line was "!Done!" and you were checking for "!Done", you would have been tripped up by the extra exclamation point. There are other, more idiomatic ways to check that you've read everything in a TextReader, though.
Active Record is how I was taught in the early days of OOP (late-90's for me). The idea was that an object is the data, plus all the methods needed to operate on it - including loading/saving. This resulted in all that mostly-similar persistence code being scattered amongst every class. Huge waste of programming effort. We have moved on since then to the Repository pattern. 
Did that speed things up? (it should have made a major difference)
It's not a limitation of entity framework, it's a limitation of relational databases. Relational databases require normalized data structures and front ends generally require the opposite. If you're going to store non trivial data is a relational model you're going to end up with some form of data transformation regardless of which system you use to store that data and if you use a demoralized NoSQL repository you'll have a whole different batch of problems. That's not even counting systems with a more distributed architecture where you have components that need data but absolutely don't need to have any dependency on how you actually store it.
AutoMapper provides no value. It just creates complexity and buries it in nonobvious places. It angers me that Microsoft hasn't fixed mapping yet. Between the anonymous classes and object initializers there is 99% of what we need for sane mapping but you just can't glue it together properly 
call it immediately after all your mapping configurations. It'll throw an exception if anything mappings are missing, or properties are mismatched.
"Why am I mapping in the first place?" To eliminate the mass assignment vulnerability. To eliminate last in, wins. 
Care to elaborate on that last point?
Maybe a better question is when to use destructors vs. IDisposable?
I've only used them on a conversion project moving from VB. We had terminate() methods in a lot of objects which equate to a destructor. We use them to close db connections and maybe dereference global objects. I've never used them in any new code we've written though. Edit: conversion, not conversation
Yes it was done in less than a second, crazy fast, ty! I see what you mean when it is 'Re-drawing' the textbox which is a huge foot print redrawing the textbox 10,746 times.
The limitation I speak of is the one to one mapping between entities and tables, a requirement for heavy ORMs such as Entity Framework. Other data mappers such as Dapper rely on SQL to transform the data, eliminating the need for a separate entity to DTO conversion while still providing flexibility in how the data is presented.
the destructor runs just before the object is collected and freed by the garbage collector. Since GC collection is not deterministic, it could run well after the object went out of scope. so some logging in this function may help to know this.
I don't know if it was wasted effort. I think it made programming a lot faster. I still use it for cheap utility apps that I want done quickly. The problem I ran into is that you lose the ability to unit test.
They are really meant for to be used in cases where you have to free resources not managed by GC, mostly things managed by OS. In long running processes it would be critical to ensure release of those resources. A usual pattern would be to implement IDisposable to dispose such resources and also destructor do the same. This way in cases where object is not disposed properly due to a bug, destructor will take care of releasing those resources.
Anyone care to answer this? It would be interesting to know. 
Yep. Injecting anything into a class like that is tough. 
Hardly ever use one. The only time I can recall explicitly needing one was when I was holding onto some unmanaged resources (asynchronous socket I/O).
Use both. But only if you have unmanaged resources that would otherwise be impossible for the GC to clean up. Hopefully users of your code dispose your type, and your dispose function can suppress finalisation. But if not, as a safety belt, the finaliser can release the resources. In practice it's very rare that you need a finaliser. The GC has to do extra work for finalisable types, which comes with some cost.
I've used them to clean up DataContexts not totally sure if its necessary but makes me feel better. 
Additionally Dispose *are not* called by GC. So if you allocated outside of using() and forgot to dispose, then too bad.
Seems like a bad idea. You can create zombie objects by adding a destructor to a data context. This in turn adds extra GC cycles and puts stress on the finalizer queue.
More fun, C# 7 has "deconstructors". Needless to say, a destructor has nothing to do with a deconstructor.
Yep, we use this at work. It's amazing in helping us refactor old legacy applications and modernize them. Find the seam, squeeze in the experiment and you are good to go.
This is one of those things that endlessly switch every x years of so. We use repositories at work, but now there are murmurings of "Well this object should know how to save itself!". You just know in 5-6 years time the murmuring is going to be "Why does this object know how to save itself?!".
`AutoMapper` is great when used properly. But I have seen it add another layer of complication. In a few cases, I've seen it used map API types. You are going to have a bad time...
&gt; I've been dealing with AutoMapper (2.x -&gt; 5.1.1) upgrade nightmares. Yikes. This is why you upgrade your dependencies regularly. Going from 2.x to 3.x would have been hard enough. Never mind 3 major revisions.
Yeah, exactly my feelings and if you have not-so-senior devs on the team they mess things up and you have to deal with their AutoMapper issues. Proponents of AutoMapper will tell you that you need to study your tools and that is true but manual mapping does not require any learning.
Not going to happen any time soon. I wrote this blog engine as an exercise when I had an year of experience. Switching to another blog engine will require non-trivial amount of work. On the other hand at least this one is not terrible on mobile devices in the sense that it does not prevent zoom and all the features do work on all devices.
Huh?
Except that it looks bad and unreadable 
Deconstructors are special methods that let you write this: var aPoint = new Point(1, 2); //constructor var (x, y) = aPoint; //deconstructor
Even if it was not free, its cheap. I have a couple of sites hosted (small projects) and it costs me like $6 last month.
I don't see why you couldn't also use Scientist with code that touches the network. Let's say you're testing a new version of an API you're using for an outside service, you can have both the old and the new call in Scientist to test if the new API will work as advertised or not. If you're doing calls to internal APIs over the local network microservices style : In that case you should use Scientist on the receiving end and do the test in the API layer and it would be invisible from the caller's perspective. 
Oh, those
Neat little trick, though can't think of a use outside async functions in my code base.
All using dapper means is that you can choose to do the translation between your dto and your entities inside SQL instead of in code. You still perform that translation, you just may not have a POCO for your entity. You also have to make sure your eventual object doesn't depend on Dapper. There's no magic to dapper.
Unreadable? I'm on a Windows Phone 8 and I have no problem reading it. What are you using, a Blackberry from 2003?
Unless you call Dispose in your destructor...
I wasn't suggesting to NOT use WinForms, although I can see how might get that impression. WPF has its own set of problems, so it's certainly no panacea. I say use whatever you are comfortable with, but seek out the best practices for whatever you are using.
Because a client using your Dto doesn't need or want to know you use Dapper. They don't even have to know what Dapper is. That's the whole fucking point. As I said before. Dtos are for denormalization and dependency separation. With Dapper you denormalize in the query or can do that so you don't need to do have a class for your database structure, but you're still doing it. You still need to remove dependencies though. That still doesn't mean you need a mapper for Dapper, but it does mean you have to think about it in your design. Obviously if you're writing a really basic Crud app you don't really need to do either of those things, but having Dapper in a client app that doesn't access the database is sloppy design and bad programming.
Copy this quote down so you don't sound like an idiot next time. &gt; If your client and server use .NET, and you are using a shared data model library between them, and you can't use compiler constants to create two versions, and you have separate entities and DTOs as used in Entity Framework, and you can't use the InternalsVisibleTo attribute to restrict which applications have access to the entity classes, then placing the DTOs in an isolated library makes sense. You are talking about an incredibly specific scenario that, while reasonable, is something that the vast majority of us will never encounter. 
Official Reddit app on iphone 6s
Math.Cos takes the angle in radians, not degrees. You need to change the call to Math.Cos(Math.PI * angle / 180.0)
Which was my point.
Not to the actual datacontext. In classes that use it once they are finished calling dispose on the datacontext. For times when it cant be within a using statement.
Technically they're called finalizers (rather unfortunate that they chose to use the C++ destructor syntax), so I'll use that term. You should implement a finalizer only if you directly use unmanaged resources in your class. E.g. you did some call to a C API and it allocated memory and gave you a pointer to it, that you need to send back to the API later so it can deallocate the memory. You should implement IDisposable whenever you store references to objects that implement IDisposable. E.g. StreamReader implements IDisposable because it stores a reference to a Stream that it needs to dispose. You should also always implement IDisposable if you implemented a finalizer, because it allows for more reliable cleanup instead of waiting for the finalizer thread to get around to it *at some point, or never*. 
SuppressFinalize is there not to save memory, but to prevent the object being added to the finalizer queue so that you don't clean up the same thing twice. It can also save a bit of memory, sure, but that is not its primary purpose. Of course there is also no point calling SuppressFinalize on an object that doesn't have a finalizer.
You need to override the onpaint method and draw it there. Google for examples.
I don't care about the time and effort that went into writing it anymore. (Edit: I just realized you were talking about the article rather than the blog engine...) I mean it was important to me when I was a junior dev 9 years ago but I would happily scrap it these days for something out of the box because I don't need to prove to myself that I can write something that works on my own. The problem is that it will take a lot of time to migrate the content. The app probably uses some mobilizer library that breaks things. I check from time to time how it looks on iPhone, Android, Windows Phone and different browsers and even if something moves around I never had a problem with reading the content. The typography and colors suck but I simply do not have the skills to fix it especially if I am trying to keep the dark theme.
The immediate window or watches work, but for a ton of debugging improvements try [OzCode](http://www.oz-code.com/). It's become a close 2nd to ReSharper for me regarding must have extensions. Like Resharper, it costs money though, I'd check the trial (Or the [new EAP with better linq debugging](http://o.oz-code.com/LINQ_EAP)) to see if you like it :) PS: No, I am not affiliated with them, just a happy customer ;)
This is exactly what i am looking for! Also just noticed they have a rebate for students, for 25 dollars seems well worth it. 
Hadn't heard of them before, but it definitely looks interesting. Especially being able to search within collections.
Unmanaged resources ! 
That means nothing to me.
&gt; Master design patterns ~~and learn functional programming.~~ ftfy
Let's say you're using a native, unmanaged dll (ie. In c++) from c#,via dllimport This dll has a method allocating memory and returning a handle/id/pointer, and you need to use another method later with this value in order to free this memory.You can do that in the finalizer. It wouldn't be done automatically, as the gc has no idea what is going on in the unmanaged dll. 
I love ReSharper to be honest. Bought myself a subscription so I could use it at home.
An explanation perhaps?
You don't need to learn functional programming to land a job in C#, i mean you have to know some functional parts like lambdas, LINQ, but not whole functional approach, there are more important things.
He asks how to step up his C# game, and you're basically saying "learn F#".
You'dll be hard pressed to get somebody to run a binary for you. All kinds of security issues.
Change to release mode in the drop down box in the main window. But debug builds are also just fine. 
Destructors, which are actually finalizers in .NET, is something you almost never need to write or use. If you think you do, you probably don't anyway. For most programmers, just stay clear of them. 
I like it but I don't see much improvement of readability for the body text. I might try to apply the font see if it is somehow better.
Correct. It's purely advisory.
Well, the rules do say don't post any Malicious software, I did read them :p It's the source code in the readme too then again.. you gotta dl the zip to get the readme.. hm... 
While I realise that quoting yourself is somewhat narcissistic, I am going to copy/paste a response I gave to a [very similar question](https://www.reddit.com/r/csharp/comments/4xwliu/architecture_and_where_to_start/d6jk6l5) a couple of months ago, as I still think it's good advice: Okay so I don't know what your level is, so let me break it down - because you're asking a question that I once was trying to ask but couldn't find clear answers to. This comment is opinionated and some will disagree, but that's ok, it's a start. Go into it with an open mind, try to understand the bits and then decide for yourself. Step 1: Make sure you know what an [Interface](https://msdn.microsoft.com/en-us/library/ms173156.aspx) is. There's a plethora of stuff out there. If you know and use interfaces lots, great, move on to Step 2. If you vaguely know what an interface is for, but have never really used them then now's the time to learn. They will be your bread and butter for any kind of architecture, regardless of the patterns you use. Interfaces are almost required for any kind of abstraction (Again, this is an opinionated comment) and abstraction is the key to good, testable code. You'll want to start learning about the concept of [Inversion of Control](http://joelabrahamsson.com/inversion-of-control-an-introduction-with-examples-in-net/), which is all about flipping dependencies on their head (going from "my class needs to read data from a file, so it's dependant on file reading operations" to "My class processes data, I don't care where that data comes from as that's what the concrete implementation of the interface I'm using is for"). Step 2: Learn about [Unit testing](https://msdn.microsoft.com/en-us/library/ms182532.aspx). This can be a bit of a catch 22 because it's often hard to Unit test code that isn't well architected in the first place and that's basically what you're trying to achieve, but stick with it - you want to know how to write unit tests, why you write unit tests and what that means for your code. Understand that this is where interfaces come into it in a big way, your business logic shouldn't be dependant on lots of other classes that you can't test. For example, it's difficult to test a class that loads data from disk, does something with it, then outputs it (Either back to disk or to a database or something) because you spend so much time setting up your test that it almost seems not worth it. Get that far and you're on the right track. So at this stage, you should hopefully be at the point where you know you want to write good, easily testable code and you've got some of the theories, but probably don't know how to go about it. Good. Step 3: Start pulling apart your code into classes that aren't dependent on other classes, but instead rely on interfaces. In our example above, your class shouldn't be responsible for loading and saving the data it's working on - it should only be responsible for the business logic being applied to that data. Instead, you'll want 2 interfaces - one for getting the data and one for outputting the data. In the Database/ORM world this might even be the same class and is usually called a "Repository". The key here is to grasp things like what code is responsible for what. Your class will depend on an interface but not the concrete implementation of that interface - that is some other piece of code's responsibility. Eventually, you'll come to realise that your class now "depends" on an interface or two, but you still need to supply it with a concrete implementation. You'll start to veer off into things like [Constructor Injection](http://programmers.stackexchange.com/questions/177649/what-is-constructor-injection). Now you're ready for Step 4. Step 4: [Dependency Injection](http://stackoverflow.com/questions/14301389/why-does-one-use-dependency-injection). By this point you've got the idea that you break apart your code into relatively standalone bits. Your business logic is abstracted away enough that it only relies on interfaces that are implemented elsewhere. Your code is easily testable as you can [mock interfaces](http://stackoverflow.com/questions/5627371/how-do-you-use-moq-to-mock-a-simple-interface) very easily using any number of libraries, but you've come across a new problem: It's no longer a simple case of doing new MyClass();, you're having to new up all of your concrete classes and pass them into your business logic class. It seems like a faff and there must be a better way - there is and it's using a DI container, also known as an IoC container. By this stage, a lot of the terms I've thrown around should be cropping up more and more and you'll hopefully be getting to grips with them. Make no mistake, you can read the theory all day long on this stuff but it never really sinks in until you start actually doing it. It will seem longwinded and often "pointless" at first, it will seem like you're writing a lot of boilerplate code to get the same result, but the true benefit is that your code is modular, testable and robust. The time you spend writing interfaces and wiring up your DI container will be saved 10x over by the virtue of having much more stable code that's easier to debug and tested much more thoroughly than before. Step 5: Onions. By now you should have knowledge of the building blocks for your code - you should be able to write fairly modular, standalone code and now comes the bigger, harder question: How to put all that together? I highly recommend reading Jeffrey Palermo's series of posts on what he calls [the onion architecture](http://jeffreypalermo.com/blog/the-onion-architecture-part-1/). This is not a typical enterprise domain driven design pattern, but it's just as good (in my opinion), it's easier to get to grips with and has some serious benefits. You'll learn that you have a "core" project that houses all of your interface definitions and domain models. You'll see that intermediate layers can expand to separate logic while still being very testable. The top layer contains your DI container to wire up all of the lower layers together. You might need to read the posts 3 or 4 times and even then it might not sink in but stick with it - download his example project from BitBucket to see how it looks. As with before, the best way to learn is by doing. I hope that helps, good luck!
Also you mentioned you have a pluralsight account. They have a really good "[path](https://app.pluralsight.com/paths/skill/csharp)" for C# you can check out to figure out what your level is and what you need to learn next.
Relevant: https://msdn.microsoft.com/en-us/library/wx0123s5.aspx
I downloaded and decompiled the program. Nothing malicious as far as I can tell. Regardless, users should use their own judgment when downloading untrusted executables. /u/koalalord9999, in the future, you'll find it tends to be best to just post source code and not compiled binaries. You got your answer below: debug release is fine, it just adds some extra bits of code to support debugging. Feel free to switch it to release mode as instructed below.
I'm in the middle of my 30-day trial for OzCode, and I'm finding it extremely useful. I keep discovering new features as I need them. Last night I found out that it'll do a deep compare between two objects.
Bro do you even Monad? 
/r/dailyprogrammer
https://msdn.microsoft.com/en-us/library/system.threading.tasks.task(v=vs.110).aspx
Not having to override ToString() just for a better debugging experience is also awesome :D
Well, ReSharper is my #1 extension (actually everything JetBrains does, I also use IntelliJ and Webstorm :D)
Erm, you might be able to open up a socket in PHP and have is communicate with your C# app (also with a socket). Though if where your PHP app is hosted doesn't allow normal Sockets, it's possible you could use WebSockets between the two. If those don't work, then I'd recommend exposing some sort of REST-like API in your PHP application that the C# app can talk to, though it might require a lot more involvement to pull off.
any clarification for a total noob what the difference is?
Note that OzCode has a feature that will write the Conditional Breakpoint for you (http://o.oz-code.com/features#conditionalBreakpoints). Also, the OzCode Condition editor full supports intellisense)
I don't think it is hardware related, we have several dozen servers out there running our services, and this issue has occurred(albeit intermittently) on about half a dozen or so of them. 
do you think I would get a memory leak if I left the program running?
Some great answers already so I will just briefly add this. I have been reading through/marking technical tests for job applicants recently and the most common areas which catch people out seems to be delegates, especially relating to asynchronous programming. So I'd just recommend brushing up on them. General OO principals too are vital.
thanks the reason I have TWO and ONE_80 is i can't have magic numbers
Seconded. 
What are you actually asking about?
I would also look at network drivers. Make sure you are using WHQL certified ones. 
It's flat at just under 18MB. The graph is the current memory used, and not the rate of memory usage growth. It isn't growing! There is no leak.
Yes. If you highlight the statement you want to investigate, then press the shortcut for Quick Watch. The default is Shift + F9. It's awesome for exploring complex objects too.