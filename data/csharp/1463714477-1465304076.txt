shhh, nobody tell OP that it's a pretty obvious selectMany and that's a m-m-m-m-monadic operation. Heretical blasphemy!
So you guys like ridiculous linq statements? I recently had to debug this beast, it was taking over a minute to process 500 records. Good times. response.Data = new DrugSearchData() { DrugSearchResults = _drugs.Select(_drug =&gt; new DrugInfoLite() { CommonDosage = _ignorePackagesAndDosages ? null :new DosageInfoLite() { CommonDaysOfSupply = _drug.CommonDosage.CommonDaysOfSupply, CommonPackage = _drug.CommonDosage.HasPackages ? new PackageInfoLite() { CommonUserQuantity = _drug.CommonDosage.CommonPackage.CommonUserQuantity, PackageSizeUOM = _drug.CommonDosage.CommonPackage.PackageSizeUOM, PackageDisplayText = _drug.CommonDosage.CommonPackage.PackageDisplayText, PackageFullDisplayText = _drug.CommonDosage.CommonPackage.PackageFullDisplayText, PackageDescription = _drug.CommonDosage.CommonPackage.PackageDescription, PackageQuantity = _drug.CommonDosage.CommonPackage.PackageQuantity, IsCommonPackage = _drug.CommonDosage.CommonPackage.IsCommonPackage, PackageID = _drug.CommonDosage.CommonPackage.PackageID, CommonMetricQuantity = _drug.CommonDosage.CommonPackage.CommonMetricQuantity, PackageSize = _drug.CommonDosage.CommonPackage.PackageSize } : null, CommonUserQuantity = _drug.CommonDosage.CommonUserQuantity, CommonMetricQuantity = _drug.CommonDosage.CommonMetricQuantity, MetricStrength = _drug.CommonDosage.MetricStrength, StrengthUOM = _drug.CommonDosage.StrengthUOM, DosageForm = _drug.CommonDosage.DosageForm, DrugDosageID = _drug.CommonDosage.DrugDosageID, HasPackages = _drug.CommonDosage.HasPackages, IsCommonDosage = _drug.CommonDosage.IsCommonDosage, IsFormularyMailOrder = _drug.CommonDosage.IsFormularyMailOrder, LabelName = _drug.CommonDosage.LabelName, Packages = _drug.CommonDosage.HasPackages ? _drug.CommonDosage.Packages.Select(package =&gt; new PackageInfoLite() { CommonUserQuantity = package.CommonUserQuantity, PackageSizeUOM = package.PackageSizeUOM, PackageDisplayText = package.PackageDisplayText, PackageFullDisplayText = package.PackageFullDisplayText, PackageDescription = package.PackageDescription, PackageQuantity = package.PackageQuantity, IsCommonPackage = package.IsCommonPackage, PackageID = package.PackageID, CommonMetricQuantity = package.CommonMetricQuantity, PackageSize = package.PackageSize } ).ToArray() : null }, DrugId = _drug.DrugID, DrugName = _drug.DrugName, DrugTypeEnum = _drug.DrugTypeID, HasGenericOption = _drug.HasGenericDrug, IsMedicareDrug = _drug.IsMedicareDrug, IsCovered = !(String.IsNullOrWhiteSpace(_drug.FormularyTierDescription)), Dosages = _ignorePackagesAndDosages ? null: _drug.Dosages.Select(dosage =&gt; new DosageInfoLite() { CommonDaysOfSupply = dosage.CommonDaysOfSupply, CommonPackage = dosage.HasPackages ? new PackageInfoLite() { CommonUserQuantity = dosage.CommonPackage.CommonUserQuantity, PackageSizeUOM = dosage.CommonPackage.PackageSizeUOM, PackageDisplayText = dosage.CommonPackage.PackageDisplayText, PackageFullDisplayText = dosage.CommonPackage.PackageFullDisplayText, PackageDescription = dosage.CommonPackage.PackageDescription, PackageQuantity = dosage.CommonPackage.PackageQuantity, IsCommonPackage = dosage.CommonPackage.IsCommonPackage, PackageID = dosage.CommonPackage.PackageID, CommonMetricQuantity = dosage.CommonPackage.CommonMetricQuantity, PackageSize = dosage.CommonPackage.PackageSize } : null, CommonUserQuantity = dosage.CommonUserQuantity, CommonMetricQuantity = _drug.CommonDosage.CommonMetricQuantity, MetricStrength = dosage.MetricStrength, StrengthUOM = dosage.StrengthUOM, DosageForm = dosage.DosageForm, DrugDosageID = dosage.DrugDosageID, HasPackages = dosage.HasPackages, IsCommonDosage = dosage.IsCommonDosage, IsFormularyMailOrder = dosage.IsFormularyMailOrder, LabelName = dosage.LabelName, Packages = dosage.HasPackages ? dosage.Packages.Select(package =&gt; new PackageInfoLite() { CommonUserQuantity = package.CommonUserQuantity, PackageSizeUOM = package.PackageSizeUOM, PackageDisplayText = package.PackageDisplayText, PackageFullDisplayText = package.PackageFullDisplayText, PackageDescription = package.PackageDescription, PackageQuantity = package.PackageQuantity, IsCommonPackage = package.IsCommonPackage, PackageID = package.PackageID, CommonMetricQuantity = package.CommonMetricQuantity, PackageSize = package.PackageSize } ).ToArray() : null }).ToArray(), GenericDrug = !_ignorePackagesAndDosages &amp;&amp; _drug.HasGenericDrug ? new GenericDrugInfoLite() { CommonDosage = new DosageInfoLite() { CommonDaysOfSupply = _drug.GenericDrug.CommonDosage.CommonDaysOfSupply, CommonPackage = _drug.GenericDrug.CommonDosage.HasPackages ? new PackageInfoLite() { CommonUserQuantity = _drug.GenericDrug.CommonDosage.CommonPackage.CommonUserQuantity, PackageSizeUOM = _drug.GenericDrug.CommonDosage.CommonPackage.PackageSizeUOM, PackageDisplayText = _drug.GenericDrug.CommonDosage.CommonPackage.PackageDisplayText, PackageFullDisplayText = _drug.GenericDrug.CommonDosage.CommonPackage.PackageFullDisplayText, PackageDescription = _drug.GenericDrug.CommonDosage.CommonPackage.PackageDescription, PackageQuantity = _drug.GenericDrug.CommonDosage.CommonPackage.PackageQuantity, IsCommonPackage = _drug.GenericDrug.CommonDosage.CommonPackage.IsCommonPackage, PackageID = _drug.GenericDrug.CommonDosage.CommonPackage.PackageID, CommonMetricQuantity = _drug.GenericDrug.CommonDosage.CommonPackage.CommonMetricQuantity, PackageSize = _drug.GenericDrug.CommonDosage.CommonPackage.PackageSize } : null, CommonUserQuantity = _drug.GenericDrug.CommonDosage.CommonUserQuantity, CommonMetricQuantity = _drug.CommonDosage.CommonMetricQuantity, MetricStrength = _drug.GenericDrug.CommonDosage.MetricStrength, StrengthUOM = _drug.GenericDrug.CommonDosage.StrengthUOM, DosageForm = _drug.GenericDrug.CommonDosage.DosageForm, DrugDosageID = _drug.GenericDrug.CommonDosage.DrugDosageID, HasPackages = _drug.GenericDrug.CommonDosage.HasPackages, IsCommonDosage = _drug.GenericDrug.CommonDosage.IsCommonDosage, LabelName = _drug.GenericDrug.CommonDosage.LabelName, Packages = _drug.GenericDrug.CommonDosage.HasPackages ? _drug.GenericDrug.CommonDosage.Packages.Select(package =&gt; new PackageInfoLite() { CommonUserQuantity = package.CommonUserQuantity, PackageSizeUOM = package.PackageSizeUOM, PackageDisplayText = package.PackageDisplayText, PackageFullDisplayText = package.PackageFullDisplayText, PackageDescription = package.PackageDescription, PackageQuantity = package.PackageQuantity, IsCommonPackage = package.IsCommonPackage, PackageID = package.PackageID, CommonMetricQuantity = package.CommonMetricQuantity, PackageSize = package.PackageSize } ).ToArray() : null }, DrugId = _drug.GenericDrug.DrugID, DrugName = _drug.GenericDrug.DrugName, DrugTypeEnum = _drug.GenericDrug.DrugTypeID, IsMedicareDrug = _drug.GenericDrug.IsMedicareDrug, Dosages = _drug.GenericDrug.Dosages.Select(dosage =&gt; new DosageInfoLite() { CommonDaysOfSupply = dosage.CommonDaysOfSupply, CommonPackage = dosage.HasPackages ? new PackageInfoLite() { CommonUserQuantity = dosage.CommonPackage.CommonUserQuantity, PackageSizeUOM = dosage.CommonPackage.PackageSizeUOM, PackageDisplayText = dosage.CommonPackage.PackageDisplayText, PackageFullDisplayText = dosage.CommonPackage.PackageFullDisplayText, PackageDescription = dosage.CommonPackage.PackageDescription, PackageQuantity = dosage.CommonPackage.PackageQuantity, IsCommonPackage = dosage.CommonPackage.IsCommonPackage, PackageID = dosage.CommonPackage.PackageID, CommonMetricQuantity = dosage.CommonPackage.CommonMetricQuantity, PackageSize = dosage.CommonPackage.PackageSize } : null, CommonUserQuantity = dosage.CommonUserQuantity, CommonMetricQuantity = _drug.CommonDosage.CommonMetricQuantity, MetricStrength = dosage.MetricStrength, StrengthUOM = dosage.StrengthUOM, DosageForm = dosage.DosageForm, DrugDosageID = dosage.DrugDosageID, HasPackages = dosage.HasPackages, IsCommonDosage = dosage.IsCommonDosage, LabelName = dosage.LabelName, Packages = dosage.HasPackages ? dosage.Packages.Select(package =&gt; new PackageInfoLite() { CommonUserQuantity = package.CommonUserQuantity, PackageSizeUOM = package.PackageSizeUOM, PackageDisplayText = package.PackageDisplayText, PackageFullDisplayText = package.PackageFullDisplayText, PackageDescription = package.PackageDescription, PackageQuantity = package.PackageQuantity, IsCommonPackage = package.IsCommonPackage, PackageID = package.PackageID, CommonMetricQuantity = package.CommonMetricQuantity, PackageSize = package.PackageSize } ).ToArray() : null }).ToArray(), } : null } ).ToArray() };
This book is my bible right now. Easy to pick up, and easy to understand. They will explain things in the context of game application. The one thing I'm trying to get my head around right now is delegates and event handling. https://www.amazon.com/Beginning-Programming-MonoGame-T-Chamillard-ebook/dp/B018314OVI 
[removed]
[removed]
Yeah, another ShareX user! It's the best screen capture software I've ever used. And it's FOSS, so naturally I have to 100% recommend it to everyone. I even got my work to start using it instead of whatever it was they used before.
I agree that method syntax is nicest. Yeah, it has a few more symbols, but it's the most consistent with the rest of the language. It feels to me like the query syntax was an unnecessary addition. Although I'm biased because I've done a LOT of work with Scala. Actually, it's made me kinda annoyed with C# because: 1. C# goes against the conventions for the naming of functional methods. What C# calls `Select` most languages call `map`. What C# calls `Where` is usually `filter`. I dislike deviating from norms without a good reason for it. I don't consider "being like SQL" a good reason. SQL is pretty ugly. 2. C# can be so verbose sometimes. Eg, something like `employees.Select(e =&gt; e.Salary &gt; 5000)` would be written `employees.filter(_.salary &gt; 5000)` in Scala. This shorthand is fucking AMAZING. Seriously, it seems like every time I have to write functional code (which is very often) I wish I was writing it in Scala. It's even more prominent when you have something like `employees.Sort((e1, e2) =&gt; e1 &lt; e2)`, which Scala would write as `employees.sort(_ &lt; _)`. Yeah, I'm kinda a Scala fangirl.
That could be significantly shortened with a few well-placed extension methods.
Try haskell, you will love it :)
I never used it, but isn't that kinda the same like intellitrace?
If you are familiar with Linq then i suggest you to take a look at LinqToExcel (https://github.com/paulyoder/LinqToExcel) your code would look like something like this: var excelDocument = new ExcelQueryFactory(pathToExcelDoc); int Amount = Convert.ToInt32(Console.ReadLine()); var neededCells = excelDocument.WorksheetNoHeader(0).Take(Amount);
Why don't you use string interpolation which would look like: var sampletext = "Hello {0}, thank you for signing up for the Cancer Research {1}"; Console.WriteLine(string.Format(sampletext, FindDetails("arg2"), FindDetails("arg2")));
Here are a few random observations I made. You need to work on variable names. e.g. "CreateMealClass" - if it's a class that creates meals, then "MealCreator" would be a better choice, for example. And you have lists named in the singular (e.g. "meal_name"), where a plural ("meal_names") would make more sense, since it is a collection of multiple items. While on the topic of names, try to use a consistent naming style. Either choose [CamelCase](https://en.wikipedia.org/wiki/CamelCase) (which seems to be more of a standard in C#) or underscore_separated_words, but don't mix them. And the same for capitalising the first letter; be consistent. I like to use a leading capital letter for property names, and a leading lower case letter for local variables - that way you know exactly where to look for a variable's declaration. Everyone has their own standards, but the important thing is to be consistent. More comments! Meaningful variable, method and class names are a good start, but be kind to your future self and add comments explaining, for example, what a class is used for, how a method should be used, or what a chunk of code does (but also be sure to update comments when the code changes - if there's one thing worse than no comments it's incorrect comments). For example, I can see you have a method IntroFiles.setTextFiles(string budget) - but with just that info I don't have a clue what it's supposed to be doing. You also seem to be passing information between various parts of your program via text files. If that's to preserve information across program runs you might want to consider some singleton class for holding settings, which can write all your settings to a single file. If it's not for preserving information across subsequent runs of your program, you should be storing that information in variables instead and finding a better way to pass the information between the parts of your program where they're required. 
Just fuck my shit up.
Best solution; I didn't even know you could do that mate. Thanks.
Shameless advert.
It's the standard visual studio reformat
I used to think LINQ was harder to read than loops, but I just wasn't used to LINQ yet. Once you get it, it's a lot faster to read and write.
Too bad about the pricing structure.
That is a poor shortsighted decision. Your binary comp might not matter NOW because you rebuild everything every time TODAY. But projects tend to grow over time and it is reasonable to assume that eventually it will get large enough that build times become important (alternatively perhaps [chair jousting](https://xkcd.com/303/) is). If you have solution structure where project A depends on B which depends on C and you have deterministic builds, when C changes and doesn't break compatibility, B doesn't and you don't have to rebuild A. This immediately means the development loop (code-build-test-repeat) is shorter which means you and your coworkers get more work done. This effect may be compounded on your CI server because you can write your tests to depend on the determinism of the assemblies they are testing, which would mean none of such tests for A or B would need to run. Binary compatibility should matter to everyone (and so should determinism; fortunately MS agrees and is actively rectifying that).
[Image](http://imgs.xkcd.com/comics/compiling.png) [Mobile](https://m.xkcd.com/303/) **Title:** Compiling **Title-text:** 'Are you stealing those LCDs?' 'Yeah, but I'm doing it while my code compiles\.' [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/303#Explanation) **Stats:** This comic has been referenced 704 times, representing 0.6320% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_d3cs3wu)
Unfortunately I can't offer any solutions outside of reinstalling Visual Studio. I do feel your pain though; we've started to adopt the practice of creating a separate virtual machine containing Visual Studio and all relevant tooling for each project. Every time we went to maintain some code it was breaking in the ways you describe, either due to being run from a different dev's box or because the original dev had installed updates. VS tooling, especially the .NET Core stuff, is honestly out of control lately. 
I'm almost thinking of flipping to Python or something - I just need to create a simple REST CRUD thing - and wanted to use EF as well - it just doesn't seem possible. I don't think the install of VS is in question (although it might be, it's difficult to tell with the latest version). I just can't seem to find any walkthrough that works (I did find one, but the moment I wanted to use EF it because so overly convoluted that I gave up - like thousands of lines of code to do simple Read from an existing DB). Do MS not want us to use their products any more?
I don't think you're reading this right then. It's a website, with a password entered into the textbox. If not hashed on the client, where are you expecting the password to be hashed before the server hashes it? byte[] hash = PBKDF2(password, salt, PBKDF2_ITERATIONS, HASH_BYTE_SIZE);
Ok - there's just so much confusing information. Do I need to create an ASP.Net Web application, a class library, a WCF service library/application/service application/library etc...etc... I simply want a CRUD interface where people can send Json objects and get a response. All of the walkthroughs so far don't work, and the ones on Asp.net are for VS2013 - which don't appear to have the same options as I do in VS2015. Can someone point me in the right direction for creating what I need to create? 
ASP.Net Web application, then you can host it on IIS. Otherwise, you could use Owin and run it as a separate program (Backend.exe for example). I think it's called "Console Application". But it's a bit overkill.
I just want to expand on you comment and say that if you have a good foundation, taking a certification helps expand your viewpoint on application development. I remember reading the book for the MVC certification, and much of what I had learned from it, I was actually able to use it to improve my perspective on the "Big Picture" of application development. If there's no other reason to take a certification, it should be taken for yourself, to prove to yourself you knowledge and mastery of a topic. But it's important to not just take the certification, but explain why you took the certification and what were the most important things you learned when preparing for it, and how you were able to apply it in your projects going forward. Then it becomes worthwhile. Heck, I've taken an A+ certification, and can find ways to apply some of the stuff I've learned there to software development. :) 
I'm sure it was real hard to get this "exclusive interview" with some random guy who made a Unity game in 5 minutes. I've only skimmed it, but the article doesn't appear to contain any information relevant to C#, just backstory on this dev and political pandering.
Please don't spam your stuff--rule 5, man. This might also be better targeted over at r/learncsharp.
On the comparison, neither time machine or intellitrace are checked for monitoring javascript client side code. Are they working on this?
This is exactly my experience in VS2015.
Cheers for that - I get that far at least ;-) ...it's after that that it all falls apart.
After that it's just creating models and scaffolding controllers if you are doing simple CRUD. The project template should already contain EF and all the necessary references to do so. If not, something might be missing or corrupted in your VS installation? Are you doing code-first or database-first?
Which doesn't do line chopping
Oh, using beta software is sometimes iffy. If you need it up and running quickly, use the regular template I showed in the images. Otherwise, you are basically signing up to test software. Cheers!
Oops. Sorry for the mistaken identification. C Sharp mascot? Probably a curly brace on a line by itself :)
Is dual some oracle module or something?
Bloody hell! I had no idea it was beta. I simply googled it and followed the example at MSDN!
The setting that prompted this post was how it automagically breaks one long line in to multiple lines. Also, I don't like how it formats collection initializers, multiple LINQ calls. There's a number of things I feel like I have to go in and tweak and I can never remember the specifics so that leads me to delving in to SO posts about Resharper formatting. 
Is that sunburnt dilbert?
Before you do that you need to step back and reference EntityFramework 6.1.3 Which is the latest stable version of EF. The core code is bleeding edge and not stable at all right now. Well maybe be but its not ready for release. For WebAPI you need to use 2.2 again Asp.net core is RC only arm. Seems like your searched pushed you too far ahead for now. Pull it back and you'll be back in familiar territory. 
Well, for one, I read the former as "x not deleted", but the latter as "x deleted equals to..." what?!
Can you explain what you're trying to do in detail? Maybe we'll have a couple of great options for you. Right now I'm not really sure what you want. Are you trying to dump data between SQL Server and Access? You don't need C# for that. 
This looks like a pretty good article that, if you read it all, will give you a great understand of basic SQL Server usage. http://www.codeproject.com/Articles/4416/Beginners-guide-to-accessing-SQL-Server-through-C
Honestly, with that level of technological investment you shouldn't be using ASP.NET Core for now. Maybe in a year after RTM, but not now when MS is doing breaking changes even in RC's. Use previous ASP.NET and EF6, it has Code first and reasonably good WebApi.
So I might actually be able to help someone on the Internet for once! Preface = Reddit butchered my section and paragraph formatting, so this might get a little wall-of-texty, also my Markdown-fu is garbage. Backstory = At the very beginning of 2012, I created a fairly intricate set of InfoPath forms to allow a small group of people (&lt;100) to collaborate on various documents, and used SharePoint as the storage system. It was what we had to work with at the time, SharePoint integration was one of the requirements, and I was fresh out of college so I didn't know a fraction of what was available, or what I could use on the job. I'm in a fairly unique position as the sole in-house software developer. Fast forward to now = Over the last year, the system has been getting a bit big for SharePoint, so I took it on myself to start exploring creating a web application to do the same job, while simultaneously allowing for importing all our previous documents into the new system. I've created a .NET 4.5 solution (to upgrade to whatever version of .NET 4.x is currently in our change management process) with the following projects: GroupName.CodeName.Server.EntityFramework GroupName.CodeName.Server.WebApi GroupName.CodeName.Shared.Interfaces GroupName.CodeName.Shared.Model GroupName.CodeName.Client.Access GroupName.CodeName.Client.Console GroupName.CodeName.Server.Converter I am using Visual Studio 2012 (Professional, full install, up to Update 4, with SQL Server Data Tools) in a completely isolated, physically-disconnected-from-everything dev environment. The projects = GroupName.CodeName.Server.EntityFramework - This is a project that pulls in the Entity Framework 6.1.3 package, and the latest (as of two days ago) version of Automapper to make DTO transformations not awful. I used the nupkg command line tool to download the EF package, just "nupkg install EntityFramework" and airgapped the directory it downloaded to my development VM and put it in my local nupkg repo. From there, I just did "Install-Package -Source '&lt;localreponame&gt;' -Package 'GroupName.Server.EntityFramework' EntityFramework", and it completed the install. I think I had to manually create my DB context class, and then I began creating my code-first model in there. I'm using a localDB version of whatever SQL year SQL v12.0 is, because I haven't bothered pointing it at my SQL Server 2012 VM yet, but it seems to work fine so far. The source documents are fairly complex, so I had to create something that would batch import and covert my XML libraries into C# objects so that I could write them to the DB, and I wanted to keep the converted objects as domain specific/DTO objects, so no EF/anything specific data in them at all. More on that later. Within Server.EntityFramework, I created a set of static classes to do simple transformations from my DTO objects to objects that EF could handle and write to the database, and vice versa with reads. Additionally I created a static class that handles Read and Write operations to the database when given DTO objects. Basically the Server.EntityFramework project is the only code that involves DB I/O. GroupName.CodeName.Server.WebApi - For this, I am using whatever version of WebApi/MVC came with VS2012. Past the base VS2012 install w/Update 4, I don't remember having to install any additional pacakges. When I added the project, I went Add -&gt; New Project -&gt; Web -&gt; MVC4 (I think), then told it to create a simple WebApi project. From there, I added four API controllers with empty read/write methods. These methods call the DB I/O objects I created in Server.EntityFramework (so it references that project) and simply take XML from the client, deserialize it into the Shared.Model objects, then pass those deserialized objects to the DB I/O methods, which then transform the shared objects into EF-specific objects, which write to the database. GroupName.CodeName.Shared.Model - These are simple classes that have only value properties and collection-type properties, and contain no code. They are implementations of the interfaces I wrote in the Shared.Interfaces project. As such, they can be used by client and server components, without either knowing anything about the other. GroupName.CodeName.Shared.Interfaces - These are interfaces I wrote to model the domain-specific data. I originally intended to use concrete model classes, then have the EF specific classes inherit them, but I ran into a few issues a few weeks ago related to this. I don't remember what they were off the top of my head, but I switched to interfaces instead, and used them to implement the DTO classes and the EF classes. Because they share a common interface, the automapper config is trivial, and any changes to the underlying model can be performed in one place, then pushed forward by updating implementations. GroupName.CodeName.Client.Access - This is a simple context class that implements async R/W operations that can be used by any C# client application to communicate data back to the database. My goal was to have a single class that I could reference and use across multiple client programs, that would accept simple agnostic DTO objects that could be shared, and would read/write that information correctly from/to the APIs, with absolutely no knowledge of the underlying database implementation. GroupName.CodeName.Client.Console - This is a stub console application that takes my converted C# objects and sends them to the Client.Access library, to be written to the database. Really it's just a proof-of-concept type deal for the Client.Access context class. GroupName.CodeName.Server.Converter - This is a single console application that takes all my XML libraries, reads and deserializes them into C# objects (using the InfoPath-generated XML schema files), and converts them into the form I want using the Shared.Model classes. final words = I know this is a lengthy write-up, but I wanted to you understand the scope of what I'm trying to accomplish, and how I'm using EF and WebApi to accomplish it! At the moment, all the documents for one of our business divisions to work from client application to database, and can be written to and read from the database with perfect fidelity. In the last few days, I expanded the database to cover every possible document we use, and I was able to produce a single large XML that encompasses them all in a nice hierarchical manner. I put together some simplified webapi/client access context methods to handle it, but it complained about primary key violations because it evidently tries to add an object from one document and then re-add it again when it's reused in another document. I just ran into that today, but I'm not too worried about it. I will deal with it on Monday. Please feel free to ask me anything about the architecture or libraries, and I will try to answer as best as I can, unless that conflicts with the proprietary nature of our work. Additionally, I have not dealt with the following concerns, though I know they must be addressed eventually: * concurrent DB R/Ws, so that users won't accidentally clobber each other's data in concurrent writes * authentication -- specifically I want to incorporate ADFS authentication because I was extremely impressed with what I learned about it on a separate project * easy access -- I intend to create a single page application using AngularJS. For this one, I want to involve ASP.NET as LITTLE as possible. I'm shooting for pure HTML/JS/CSS As I hope this will help the OP, if anyone has any pointers or know any gotchas about the above, I would love to hear them! This is my first project of this scope, so I'm trying to make it as durable and maintainable as possible, but just little old me still has a lot to learn.
 Why don't you suggest it here instead? https://github.com/dotnet/roslyn/issues
Yes, Web API is a TON easier to configure. Wait, configure Web API? Is that a "thing"? :-P Tangled2 is right though, become an expert with Web API as it is the way things are moving and has uses intra-applicaton as well as system-to-system. Just familiarize yourself with WCF. 
I think your operators are broken. The difference is always 0. edit: Additionally, you'll get f*d over with mixing languages. C# is "english" and vast majority of libraries (including standard library) are in english. When you're writing your names in another languages you incur context switch and it breaks your thought, easily introducing unnecessary problems.
Well to compare fractional numbers you obviously need some kind of measure (one value instead of value pair). Raising both numbers to each others denomerators is the common method. You can then simply compare their numerators (and if they happen to be same then you can compare denomerators). Just like this: https://en.wikipedia.org/wiki/Fraction_(mathematics)#Comparing_fractions Essentially what would work would be something like this, adjusted for the direction of your operator (you can also add check for equal value but different denomenator). var ad = left.numerator * right.denomenator; var cb = left.denomenator * right.numerator; return ad &lt; cb; 
You still need to override tostring.
Somewhat related: love it when I try Googling "stack overflow" when looking for the exception and get pages of stackoverflow.com...
You can't. After a `StackOverflowException`, there literally isn't any room to execute more methods. The only way to work around this is to detect the failure from outside the application.
I'll tackle 3 for you. Put the entire thing in a while loop (while (true){...}) and any time you want the story to restart or user to reset, you can call "continue;" which will jump back to the top of the loop. User input to quit the game can call "break;" which will exit the loop.and execute whatever code happens after the loop.
How about you just have a class that has an "int[] myArray" and "int trueIndex" in it (or whatever type of collection and single of the type). Solves the issue?
&gt;Just fuck my shit up. .Insert(x.IndexOf('.'), " fam")
C# doesn't automatically know how to print a class you created. In order to have a meaningful print out, you have to tell your program how to. To do this, you can override the "ToString()" method. In this case, you would want something like: public string override ToString(){ return string.Format("{0}/{1}", teller, noemer); }
Try posting this in r/unity3d and include error messages.
As long as you're not using the standard library sorting/ordering features, you only need to implement those operators that you actually use in your code. So if you only use `&lt;` in sort, then you will only need that. I think standard library prefers you to use [IComparable&lt;T&gt; interface](https://msdn.microsoft.com/en-us/library/4d7sx9hd(v=vs.110\).aspx). I've not had to implement comparision operator for sorting in the 10 years I've done C#. The whole operator overloading is well underplayed in C# because you don't actually need it for anyhing serious. edit: Found from that link.. &gt; Notes to Implementers: &gt; &gt; Replace the type parameter of the IComparable&lt;T&gt; interface with the type that is implementing this interface. &gt; If you implement IComparable&lt;T&gt;, you should overload the op_GreaterThan, op_GreaterThanOrEqual, op_LessThan, and op_LessThanOrEqual operators to return values that are consistent with CompareTo. In addition, you should also implement IEquatable&lt;T&gt;. See the IEquatable&lt;T&gt; article for complete information. But honestly I've never needed to.
Of course you're correct. but the point of this program was to: count recursively as far as possible. and the way it used to go. right when it caught the overflow. it would return X counter. i think this was more my point: https://stackoverflow.com/questions/12340558/is-there-a-way-to-check-available-stack-size-before-recursive-call-c
Don't agree. VS2015 is rocking, go use it! Just remember to select the right templates.
There's a few things that you need to take heed of. Firstly, if your AAA class is only ever going to be a base class and should never be instantiated, mark it as abstract. Secondly, scope your variables properly. If your 'a' variable within your AAA class is only ever going to be accessed by a derived class, mark it as 'protected'. Thirdly, the reason why what you're trying is failing is because the 'x' variable is not declared anywhere within your AAA class. You have two choices: 1. Set the 'a' variable when you instantiate your BBB class and where there is a variable declared with a name of 'x' (in this case, in your static void Main class), i.e.: BBB bbb = new BBB() { a = x; }; 2. Set up constructors for your base class and your derived class that allow the a variable in your 'AAA' class to be set. Please see the following fiddle for more information: https://dotnetfiddle.net/K2UGDC
Just as a note, I find it cleaner to declare an abstract class' constructor protected since it won't ever be called by anything but a derived class.
For a simple address book have a look at SQLite. I would also recommend using valentina studio for setting up your db. Check out - https://mva.microsoft.com/ there are lots of tutorials on dealing with databases / c#. 
+1 for SQLite. You can use Dapper for a project like this. 
Isn't this why we have namespaces?
Namespaces in C# can only contain types, not variables or methods. It's kind of obnoxious.
Sure, you may have a point on that, but I feel that the discrepancy is small enough to overlook, mainly because of the second reason I like them, and that the !x.Disabled is harder to notice than x.Disabled == false
Your problem is less about inheritance than about *scope*, actually. This *should* work, but I haven't tested it: public AAA { public int a = Program.x; } public BBB : AAA { public int b = a; } public Program { public static int x = 10; public static void Main(string[] args) { var b = new BBB(); Console.WriteLine(b.b); } } or you could do this: public Program { public AAA { public int a = x; } public BBB : AAA { public int b = a; } public static int x = 10; public static void Main(string[] args) { var b = new BBB(); Console.WriteLine(b.b); } } There's a bunch of fiddly style criticisms to be made, here, but they're not particularly relevant to the question you've posed.
This. Don't use a crapload of third party libraries or programs to achieve something so simple.
What would be the point of such a program?
Try Entity Framework Code First with Migrations. More info: [here](https://msdn.microsoft.com/en-gb/data/jj193542.aspx) and [here](http://www.codeproject.com/Articles/683942/An-Absolute-Beginners-Tutorial-for-understanding-E).
Sounds like a school project or something similar 
Yeah but you could make Renderer a type with the CurrentFPS property and put it in the namespace Game.Statistics. Then you can access it by calling Game.Statistics.Renderer.CurrentFPS.
A great comparison. I've been thinking about migration from ASP.NET to Node.js. But after reading this I think I need to postpone it.
Thats what I'm looking for. I know if you use this tool, then this framework, then this pluggin, its the 'best'. But since I'm just starting out and not doing anything too complex I'll stick to the simple installs/builtins.
Which is fine as long as there's no reason for Game or Statistics have properties or persistent state.
Common, it's not my post:) Stop downvoting without commenting why you're doing that 
Maybe people are downvoting it because your post is just a link. You make a two comment response about your experience reading this link. Pulled from: /r/csharp/comments/3xn6sm/welcome_to_rcsharp_read_this_post_before/ &gt;/r/csharp is for technical discussion of the C# programming language, as well as associated tools, libraries, news, announcements, events, and software engineering practices. Does this article fit much of "technical discussion of the C# programming language"? That might also explain a bunch of the downvoting.
Well it's reddit, people are not using the voting system to actually filter out the bad things...they're just using it as a was of expressing their opinion (sadly)
You can change it later, and you can change individual keybinds anytime regardless. 
I decided to do some research recently to see what people's favorite shortcuts were. I've been trying to compile them into a "weekly shortcut" series, but it's hard to stay on the weekly post schedule. Check it out [here](http://buildplease.com/pages/sow-1/) if you're interested. ReSharper has some killer shortcuts, I'm finding that most people - when they rave about a keyboard shortcut - it's a ReSharper one. There are some real gems in there. I recently discovered [Ctrl+Shift+V](https://www.jetbrains.com/help/resharper/2016.1/Coding_Assistance__Multiple_Entries_Clipboard.html) - paste something from your clipboard history... pretty awesome.
Just an observation but why bother calling it CurrentFPS? Why not just FramesPerSecond or FPS? Will there be a PastFPS or a future FPS on the statistics class? What about other properties? Will they be prefixed with Current too?
Oh, that was just an example to show what I meant. It won't be called CurrentFPS.
If they are never used outside that class stick them *inside* the class.
Awesome! I really enjoyed that article. Thanks for that and yes i knew that one already :)
In virtually every scenario, it's good practice to keep the files at Class per File. If there are two classes you think should be in the same file, ask yourself: * Should these really just be in separate files but in a new folder together? * How directly tied are these classes, is one only used by the other? (put it inside the other class) * Am I just defining a staged class/interface where one part has generics and the other doesn't? I do this for work, it keeps most of my properties of a class tied to an interface that doesn't require typing out the Generic Types, and only use the Generics version when necessary.
I usually keep to one type per file. Exceptions made for small nested classes, or very tiny type declarations--enums and delegates, mainly.
Ctr-r-r. Rename/refactor Ctrl-alt-j. Go to current file in solution explorer Ctrl-enter view suggestions, enter.m, accept first selection Resharper is awesome 
Pretty much the entire team where I work HATES multiple classes in the same file. The only time Ive seen multiple classes in a file has been programmers that dont seem to understand what a namespace are. that being said, we have a rule at work which is you do one class per file always, all classes with functionality have interfaces (for testing purposes) if the interface is for only that one class it goes in the same file. If its an interface where multiple classes implement it, those classes end up in the same namespace along with the interface as a separate file.
Non deployment options would include web.config changes or database config and that is assuming you have all the code needed to run your roles. If you need the ability to add roles dynamically you can look into MEF, which would allow you to use a plugin based approach to update dependencies by dropping new libs into a bin file. What works best will be based off the frequency that new roles and update to users occur with the lower end being handled best via config and the higher frequency by Db or MEF. 
&gt; Javascript supports more kinds of OO relationships than C# does. That ceased to be true when dynamic typing and the DLR were introduced, now C# can support any OO relationship you want. Prototype inheritance is one of the first things people build when they first learn about DynamicObject. And once you master that, you can do things that JavaScript doesn't offer out of the box like multiple-inheritance. One of the tricks I used to use was implicitly mapping missing methods to stored procedure calls. 
&gt; Name one thing that can't be made asynchronous..? Begin/Commit Transaction. They are strangely missing from ADO.NET, even through they are potentially blocking calls.
&gt; However, ASP.NET processing model is more prone to context switching which implies additional CPU costs. Uh, no. Not if you are using async/await. Not only are you not paying for context switching, it has true multi-threading with per-thread, work stealing queues. 
&gt; As a pioneer Node.js proposed several approaches to asynchronous programming: Pioneer? C# has had callback style asynchronous programming since version 1. https://msdn.microsoft.com/en-us/library/system.iasyncresult(v=vs.71).aspx
Now forget you know about it, lest you create some horrible monster like /u/grauenwolf did.
Good. You can always do the entity framework / dapper thing later. I suggest you work with the the low level ado.net API first. That way you'll really learn how to interact with the db. It puts *you* in charge.
There are 2 reasons why I chose IntelliJ schema. Almost same schema is used in IntelliJ idea and this schema is more complete. In visual studio one you need to bind some of the useful things yourself.
Take a look at entity framework 6, and database-first. It will automatically create all classes to interact with SQL Server for you. Also, tool around with linqpad.
Then separate them out? I don't see the issue. I wouldn't expect `GameStatistics` to modify/set anything. It should just give me information.
Depends on the context. I usually split everything out into it's own files, except then I have a large complex object that has many child objects going down three-five levels deep. Then I do prefer everything to be in one file.
https://redd.it/4kials 
But it will sealed yourself in JB ecosystem, wont it?
With exceptions for private classes (those nested inside another class, and only used there), I always use one class per file. It makes finding them easier when looking at a directory full of .cs files Unlike a lot of people, I'll also go so far as to put enumerations in their own files. 
Private objects inside a class are fine, just remember if you end up with more than 2 or 3 private object definitions in your class that is a code smell and your class may be responsible for more than it should be doing.
As a counter-point, I'd suggest that you should use your tools in a way which avoids depending on a particular file layout. For example, don't navigate to code by scrolling around in Solution Explorer. Ctrl-comma opens a fast lookup panel, just start typing the class name you want and you'll jump straight there. Object Explorer provides a better view of an assembly's layout. You usually need to understand access modifiers and base classes in order to explore a new library efficiently. No developer should be writing large C# libraries in a single file...but you shouldn't tie your personal productivity to a particular file layout either. Use type-driven IDE tools instead of file-driven ones whenever possible. There's also a trade-off in OO principles here, since if developers always need to split files when they create any new types, they'll often tend to create fewer types, which leads to violations of core design principles. In an immature library (not yet ready for code review) I'd rather developers factor their classes correctly but have some of them temporarily in a single file than mess up their factoring. It is very easy to split classes into files in a clean-up pass, but far harder to rewrite a god class which has too many responsibilities. Functional languages don't adhere to this rule at all, since they typically are coded in terms of modules, which can contain many functions and record types. As C# steals more functional features it will become more common to see modules as a unit of organization rather than classes.
Sure, why not? It doesn't matter. It doesn't make your program better or worse and it won't make your code more or less readable. Having 17k line classes can be confusing, 17k line files with 170 classes in it can be confusing, having 170 classes in 170 files can be confusing. Personally, I kinda like grouping up classes in big files, because editor tabs and project views generally display around ten to thirty items on screen at once. To go to the code I use a quick-open (ctrl+, in VS) or just 'go to definition'
I believe that op is asking about a component/service that provides centralized settings. Such functionality was traditionaly provided by the now defunct [Configuration Application Block](https://msdn.microsoft.com/en-us/library/ff648130.aspx). I also find this question interesting since at work most of our services rely on a proprietary solution for syncing settings and policy changes to the individual nodes, whereas the rest periodically sync settings from a local Azure table store. The latter approach is a bit harder to maintain since there's no validation of keys/values and you need to modify each region's settings individually due to lack of global replication.
Thanks all for replying. And yes wpnizer, I was looking first for an existing solution but currently it seems we'll need to implement this on our own.
I'd recommend x-posting to /r/dotnet or even /r/azure since this isn't a csharp specific question.
do what makes sense. dont follow dogma.
This might be a bit of an advanced concept for you, however you could use a message bus / messaging service to handle this. This would allow you to publish a message to any recipients that are subscribed, and with the added bonus of the pages and main window not needing to know about each other. Obviously this is a different concept to what you would be used to, or have been using but is a more robust solution. You might also find for your particular needs and/or circumstances that this may be overkill, but is something to consider. If you need an example let me know and I'll throw one together.
Here is what we're doing at school: * l_ for local variables (so, pretty much every variable) * cls_ for class * cbx_ tbx_ lbl_ etc. for windows form elements (combobox, textbox, etc) * pName for parameters * c_ for class properties These are quite annoying because your code end up being prefixed everywhere, all over the place
In webBrowser1_Navigating, you don't set the proxy on the HttpWebRequest you're using to populate your browser control. 
After setting this up, you may have a few different problems to be fixed. Using your code as is, everything looks correct on the initial load. I get X_FORWARDED_FOR my IP address and REMOTE_ADDR is the proxy address. When I click the button I get an infinite loop, since WebBrowser1.DocumentStream= myResponse.GetResponseStream(); ends up firing webBrowser1.Navigating all over again. You look like you attempted to prevent this with if (e.Url.AbsolutePath != browserNavigationTxtBox.Text) but that will be never false in practice (since the AbsolutePath in your case will always be something at the end of URL like "/"). What you want instead is something like if (e.Url.AbsolutePath != "blank") since e.Url.AbsolutePath will **only** be blank when we're injecting the document (since the webBrowser control does not have any URL at all when that happens). Alright, so after all that, the infinite loop is gone. But oh no, the requests are not going through the proxy! This is because we never set the proxy when we make the WebRequest in webBrowser1_Navigating. If we pull down the code from above var myProxy = new WebProxy(proxyBox.Text); myRequest.Proxy = myProxy; and put it in webBrowser1_Navigating then the requests actually go through the proxy! Yay, now all that works! But if I put a different URL in the box, I don't go anywhere! This is because you are never changing the base URI that you're loading from, only appending the new AbsolutePath to it. I got around this by replacing currentUri = new Uri(currentUri, e.Url.AbsolutePath); with currentUri = e.Url; in webBrowser1_Navigating. Making all the changes above I got a little webbrowser control that appears to obey it's proxy and correctly change domains. The final code, in it's entirety: http://pastebin.com/L6CJveX1 
That's strange. Does the form load code work and the button doesn't? Or does neither set seem to use the proxy? If neither one of them works then I think it might be in the proxy. 
How'd you find it it sending the telemetries over? "Application Insights" is an Azure service, and MSFT uses it in VS to send usage and analytics about VS. But it's also something you can add to your Web projects. (I don't think Windows apps are supported yet.)
What happends is that I feed the app a proxy and the website, i press start and it doesnt use the proxy at all, wanna get on teamviewer and check it out ? 
Why not just use a log file and a utility like tail blazer to view it live. 
On prem apps are supported, if you were to create an on prem aspnet webapi project for example there's a check box to enable it in the project.
Check out microsoft.extensions.OptionsModel (might just be Options in new .netcore) to use dependency injection to get the settings into your controllers based on instance/tenant. You would need to create a model of your settings for this. 
This is how you know your professor likely has no industry experience :(
Why would you do this if you're already familliar with ASP.NET? Even more with .NET Core on the horizon? I can only speculate but I think the only reason for Node.js is that people already know JS from frontend development. There're so many more sane choices ... Kotlin, Go, maybe Rust, ...
Also declare them as private. 
Tools &gt; Options &gt; Projects and Solutions &gt; Track Active Item in Solution Explorer
I have no idea how can people compare this to ReSharper. Those are two completely different tools with completely different goals.
Unless you specifically changed it, Application Insights is created at the free tier, which allows you to collect a limited number of events per month. 
Heh, in all my years with VS I never knew about ctrl+comma, seems pretty fast too. Thanks!
What you also can do is to make static implicit operators from and to string on PhoneType and make it more comfortable. That way you can assign string values to PhoneType and vice versa. 
Indeed. But i do not like that option very much as is jumps around too much, manually going there with a shortcut is preferable for me. But i did use that option for a long time, and agree it should be on by default 
So [the first SO link on the search results](http://stackoverflow.com/questions/4273743/static-implicit-operator) explained a bit. There was also [this MSDN article on conversion operators](https://msdn.microsoft.com/en-us/library/85w54y0a.aspx) If I understand correctly, I could do summing like this: public class PhoneNumber { public static implicit operator PhoneNumber(string number) { return number; } } public class ViewModel { public string Number { get; set; } } public class SomeController : Controller { public ActionResult DoSomething(ViewModel model) { PhoneNumber Number = model.Number; Liaison Liaison = new Liaison { PhoneNumber = Number }; } } Have I got this right?
You have missed a bit ... Here is the complete implementation which I done for some testing purposes. If you don't understand some point, ask ... public class PhoneNumber { private string _phoneNumber; private static Regex phoneRegex = new Regex(@"^+?\(?\d+\)?[0-9\- ]+$"); private PhoneNumber(string value) { if (!phoneRegex.IsMatch(value)) throw new ArgumentOutOfRangeException(""); _phoneNumber = value; } /* this method allows you to do something like this string str = "123456"; PhoneNumber ph = str; it calls private constructor, which returns new PhoneNumber instance if string is valid. If not valid it raises exception */ public static implicit operator PhoneNumber(string value) { return new PhoneNumber(value); } /* this method allows you to do something like this string str = "123456"; PhoneNumber ph = str; string str1 = ph; // this will turn PhoneNumber into string back */ public static implicit operator string(PhoneNumber value) { return value._phoneNumber; } public override bool Equals(object obj) { var toCheck = obj as PhoneNumber; if (toCheck == null) return false; return ThrowOutSpecials(toCheck) == ThrowOutSpecials(this); } public override int GetHashCode() { return ThrowOutSpecials(this).GetHashCode(); } public override string ToString() { return _phoneNumber; } private static string ThrowOutSpecials(string value) { return value.Replace(" ", "").Replace("-", "").Replace("(", "").Replace(")", ""); } private static string ThrowOutSpecials(PhoneNumber value) { return ThrowOutSpecials(value._phoneNumber); } }
I don't think I've ever arrived at something so convoluted and complicated before. It should do everything I need it to though. I'm not sure if this is just terrible practice or if its okay or if it could be simplified even.
Never trust the client. Validation on the client side is just for UX purposes, you cannot trust it.
That seems like a poor reason. I can't think of a time I've ever needed to find all textboxes or anything similar, can you give a concrete example of a real life situation where that would be helpful?
Well hum... No idea It's just that you can "filter" results from the auto completion quicker It's not that useful
Why would I use this over Parallel.ForEach?
Don't forget about source control, folks. The fewer (and longer) files you have the more issues you'll have with merge conflicts. Also, if you start reusing a class that was previously embedded in another, and break it out into its own file: then you're going to obfuscate the history of that class. 
Ok, I can kind of see that, but the blog post does a really terrible job of explaining the theory and practical uses behind the pattern, and the given examples are really clunky. var pizzaMakerBlock = new TransformBlock&lt;Ingredients, Pizza&gt;( _ =&gt; Pizza.Make(_.Dough, _.Sauce, _.Toppings)); var deliveryBlock = new ActionBlock&lt;Pizza&gt;( async _ =&gt; await _.DeliverAsync(), new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = 20, // delivery guys }); pizzaMakerBlock.LinkTo( deliveryBlock, new DataflowLinkOptions { PropagateCompletion = true }); Oh, so I define the blocks separately, link them explicitly, and then never bother to actually execute them. If they want people to use their code then they need to make the definition of their blocks more fluent than that. Look at promise chaining in JavaScript for example, that's basically the same thing and way easier to declare and understand.
You don't need to start the blocks. Just start sending input into the top-level block with SendAsync() or something, and then call Complete() when there's no more data to process. Events like starting, completion, and cancellation, as well as exceptions, cascade through the rest of the pipeline if the blocks are properly linked up.
If the class is small and simple enough to embed entirely in another (yes this is a vaque qualification, oh well) then I argue - and I shall get flack for this - then you should not factor it out to be reused. Instead you should duplicate it. If you factor it out, you have now linked two possibly unrelated classes through this one, and you must consider the consequences to each when changing the shared class. 
I would guess that most of those tiny little classes are interstitial objects because - until very recently - c# didn't allow methods to have more than one return value in a topically named set. e.g. private MyResponseResult Send(Request request) ... vs private (string ReponseValue, int ResponseCode) Send(Request request) ... As we write newer code maybe some of those bullshit tiny classes can go away.
I've heard lots of good things about Autofac, we use Unity though and mostly do Asp.net web api 2 stuff. Core has built in DI or you can use your own as well.
This is what the entire, built-in, Debug class is for. You can do things like Debug.WriteLine(), then use any implementation of a TraceListener (of which there are many) to consume those Debug assertions. 
in addition to more complex use cases as pointed out by another redditor, i used it for a really elegant alternative for a classic producer-consumer problem. i didn't even need it for high throughput, but it was just perfect for this scenario and was realized with just ~10 lines of code. edit: just for reference, i used bufferBlock.post() to post new items to the queue, that was linked to an actionBlock.
I might have a play with Autofac, it's been around for a while, I remember it from the last time I looked at options which was... three or four years ago? I'm kinda curious about the abstraction they use to allow alternative providers in core. I mean I can look it up obviously but I'd need to get a sense of how it fits into MVC, etc to understand the design decisions they took. I might have a poke. I'm not desperate to ditch Unity to be honest. It's got its issues, but I know them, I'm in the happy green fields at the moment so I can make some more interesting choices though :)
Oh [here's a little round up circa 2015](https://cardinalcore.co.uk/2015/01/28/ioc-battle-in-2015-results-using-ninject-think-again/) which I missed first time around.
Dataflow is neat, but it tends to be rather "blocky" for writing code that is conceptually an async IEnumerable (if you are doing stuff in parallel+async; absolutely Dataflow is the way to go). Consider that conceptually I might want to write code that looks acts like this (I find it easy to hand write `IAsyncStateMachine` classes, ymmv): public IAsyncEnumerable&lt;Data&gt; Read(...) { using(var connection = new SqlConnection(...)) { // ... while(await reader.ReadAsync().ConfigureAwait(false)) { // ... yield return item; } } } used like: public async Task DoSomething() { //conceptually: //await foreach(var item in Read(...).WithConfiguration(false)) { Foo(item); } //as await-foreach doesn't exist in C#6 yet: //https://github.com/dotnet/roslyn/issues/261 //this simple live template for R# works: var e = Read(...).WithConfiguration(false).GetEnumerator(); try { while (await e.MoveNextAsync()) { var item = e.Current; Foo(item); } } finally { (e as IDisposable)?.Dispose(); } } With Dataflow I can do that, but I lose the C# primitive statements and/or my stack gets invaded with Dataflow library methods: public Task Read(..., ITargetBlock&lt;Data&gt; block) { using(var connection = new SqlConnection(...)) { // ... while(await reader.ReadAsync().ConfigureAwait(false)) { // ... await block.SendAsync(item).ConfigureAwait(false); } } } public Task DoSomething() { var block = new ActionBlock&lt;Data&gt;(Foo, ...); await Read(..., block); block.Complete(); await block.Completion; } This last bit stops looking like that good old foreach statement or a while loop going over my data (I am not complaining, the pattern does make sense; it just isn't how I would conceptualize the problem on a first run). The functional ideas that I might curry my monad down to act upon it at the deepest level of my code is something less discoverable than the obvious iterate over my data approach. Ultimately I suppose it comes down to looking at the problem with push vs pull semantics. --- some helper code here: https://gist.github.com/bbarry/9ae25647d65ad82bfe218125087677ea which I wrote while investigating a low-allocation version; the one we have internally uses a few different names for things because my original implementation called this process `AsyncEngineFactory` and is based directly on `AsyncTaskMethodBuilder&lt;bool&gt;` (I didn't make the pattern match from `Read()` to `MoveNext()` to come up with names based on the idea of enumeration).
Take the information you need for the view and pass that it in the controller. if you need an entire object that is fine. but i wouldn't pass an entire list back if its not needed. but i'd wait for someone to confirm
It's possible the `BufferBlock` is redundant before the `ActionBlock`: [Difference between DataflowBlockOptions.BoundedCapacity and BufferBlock&lt;T&gt;](http://stackoverflow.com/q/20887659/885318)
I love TPL Dataflow. Admittedly I don't use it for much, but when I need asynchronous consumer / producers it's a perfect fit. Mostly I use it for batching database writes. It is easy to tell it "write every N seconds or M records, whichever comes first". 
`BatchBlock` with a `System.Threading.Timer` invoking `TriggerBatch`?
Is this a web app?
Here you go: if (!logToFile &amp; !logToDatabase) return; s_ApplicationRunId = Guid.NewGuid(); m_LogDirectory = logDirectory; DataflowLinkOptions linkOptions = new DataflowLinkOptions { PropagateCompletion = true }; s_Dataflow = new TransformBlock&lt;PerformanceRecord, PerformanceRecord&gt;(record =&gt; Cleanup(record)); var batch = new BatchBlock&lt;PerformanceRecord&gt;(10000); s_Dataflow.LinkTo(batch); var timer = new Timer(state =&gt; batch.TriggerBatch()); timer.Change(TimeSpan.FromSeconds(60), TimeSpan.FromSeconds(60)); s_Dataflow.Completion.ContinueWith(t =&gt; { timer.Dispose(); batch.TriggerBatch(); batch.Complete(); }); var broadcast = new BroadcastBlock&lt;PerformanceRecord[]&gt;(a =&gt; a); batch.LinkTo(broadcast, linkOptions); if (logToDatabase) { s_DataSource = new SqlServerDataSource(connectionString); s_DataSource.TestConnection(); var databaseAction = new ActionBlock&lt;PerformanceRecord[]&gt;(a =&gt; SendToDatabase(a)); broadcast.LinkTo(databaseAction, linkOptions); } if (logToFile) { m_LogDirectory.Create(); NextLogFile(); var fileAction = new ActionBlock&lt;PerformanceRecord[]&gt;(a =&gt; SendToFile(a)); broadcast.LinkTo(fileAction, linkOptions); }
It's built in web forms
Yeah, I discovered the same thing, but couldn't be bothered to change the working code yet ;)
Not related to the error, but don't cast using `as` when you're not checking the result for null anyway. You'll just get a bad exception if it fails, instead of a precise exception. Use `(SerializationStore)serializationData`
It doesn't scale - use Apache Storm - same concept only you get to scale out.
In Azure you can run .NET on Apache Storm in HDInsight
Aw sheeit. It turns out that... **There is a VS2015 template for this very thing *included in the RC2 SDK*&amp;nbsp;** :-/ . This is not at all obvious - because, for some quite evidently poorly thought out reason, it has not actually been categorised into the &amp;nbsp;`Visual C#-&gt;Web-&gt;.NET Core`&amp;nbsp; project type group in Visual Studio's *New project* dialog with the other .NET Core project types, such as the familiar &amp;nbsp;`ASP.NET Core Web Application (.NET Core)`, which this newly discovered one derives from, along with &amp;nbsp`Class Library (.NET Core)`&amp;nbsp; and &amp;nbsp;`Console Application (.NET Core)`. It is called &amp;nbsp;`ASP.NET Core Web Application (.NET Framework)`, and can be found in the &amp;nbsp;`Visual C#-&gt;Web`&amp;nbsp; parent project type group. 
Or perhaps consider not using one ... http://firstclassthoughts.co.uk/Articles/Design/WhenIOCContainersBecomesAnAntiPattern.html
That is one example. I would not assume it accounts for most.
Autofac works well for us. Using it in WebApi/MVC
Your problem is that the class Brush is not serializable so the serializer skips the property background color.
We use MEF at work, and it works well enough. One application had trouble with MEF so we used Ninject for that. It worked fine for a while then around six months later Ninject was taking over five minutes to do it's thing. Spent one afternoon ripping out Ninject and replacing it with Simple Injector. The difference is crazy. What Ninject took at least five minutes to do, Simple Injector does in less than two seconds. Another thing I really like about Simple Injector is the documentation and how it handles errors. When switching out Ninject for Simple Injector we found that the application was blowing up on startup. But Simple Injector was clear about why. Pretty much said "Simple Injector does not support multiple constructors, please see https://simpleinjector.org/one-constructor for more information". After that it's been plain sailing. I've been keeping an eye on the start up times. Even as the application in question continues to grow and gain bloat, Simple Injector shows no Ninject-like problems.
Starting again with this PVS-Studio spam?
Phew. I could smell toast, but I think that was just Milton.
Putting it in a try catch does nothing, page won't even load. I know the db isn't out of sync because I use the exact same customer object on other pages and it works just fine.
I haven't thought about it too much. It's just one of the few profile pictures I have. The cup wan't intentional (and it's actually filled with tea)
Not sure if you've ever looked into Rx, but that particular thing sounds like an ideal use case for it. There's even an overload of the Buffer method that takes a timespan and number of items to do what you're after. Something along these sort of lines: public IDisposable DoBufferedWrite(IObservable&lt;Request&gt; requests) { return requests.Buffer(TimeSpan.FromSeconds(60), 10000) .Subscribe(async bufferedRecords =&gt; await WriteStuffToDatabaseAsync(bufferedRecords)); } 
Here's a video on the differences between TPL and Rx: https://channel9.msdn.com/Shows/Going+Deep/Stephen-Toub-Inside-TPL-Dataflow#time=08m10s In brief, Rx is for linear push-based workflows. Dataflow is for actor-based workflows where you want fine-grained control over buffering. Dataflow can do things like non-greedy joins across multiple sources. Also a later block can tell earlier blocks to wait and stop producing data while it tries to catch up. So from a high level they are similar, but once you get into the details they are for different scenarios. 
I think most problems are solvable by both Rx and TDF (and they also play well together) but they usually do fit one mindset better than the other. However, I do think TPL Dataflow has a much easier learning curve, though it could be because I haven't played with Rx enough.
Sure.. no problem.
When you run the app on your machine (in Visual Studio, right?), you're running it under *your* account, and in production, it's running under another account (probably a service account), right? If so (and that's the way it should be), there's obviously a difference in permissions between the two accounts.
Yes, the new Resharper + DotCover does it pretty nicely but not for free. http://www.continuoustests.com/ is free but you get what you pay for to some degree.
Good to hear. Navigating all the changes in the RCs has been maddening at times. 
If a try catch does nothing. Its unlikely to be that bit of code. Theres something more fundamental wrong with the page.
Yeah, I use Unity for most DI then MEF for composition/plugin stuff. It's funny, I remember ninject coming on the scene years ago and being quite impressed without actually using it in anger. Then nothing happened, and now everything I read is "It's goddamn slow" :)
&gt; Joe Rock's youtube channel Link: https://www.youtube.com/playlist?list=PLCuRg51-gw5VqYchUekCqxUS9hEZkDf6l
You can try msdn or the xamarin site. I think one has tutorials that you can follow. In case you didn't know Microsoft bought Xamarin and you can now write android apps using visual studio 2015 community edition. It's great for people like you who don't want to use java. And btw I don't mean xamarin university.
Haha what is your problem man?
Create new project. Add your code one or two files at a time. 
Still should be pointed out. Engineers should call bullshit. Its always your call.
That was 2013. Seems silly now. .net is free open source cross platform and fast. Ruby is still SLOW.
Tip from a Xamarin dev: don't use Forms. Even the guy in charge of Forms says it's only for simple apps. I learned Android and iOS in Java and Objective C before ever jumping into Xamarin. Because of that, I didn't need to do a whole lot of learning, and mostly just read the docs. Can't help you on the resource search beyond "read the docs." And avoid Forms. 
It is a library that is often overlooked. I was recently working a solution that loads JSON data from APIs, extracts some metrics from it and checks if it needs to update a related CRM record. But, it was loading data from hundreds of servers and needed to be tolerant of failures and retries. I finally remembered about TPL dataflow after some false starts and it worked really well. It is a library that is worth knowing about for sure. 
I know, I've spent the past 8 months transitioning a Forms app over using tons of custom renderers and various other patterns. My experience is that Forms has highly unpredictable behavior. On one phone a layout will render one way, on another it'll be different. Different OS versions can break things (like with the Android M ListView scrolling bug), and abstractions are constantly broken between iOS and Android like navbar buttons. Forms is alright if you want a basic app with buttons and text fields. If you're doing anything beyond that, I don't recommend it. With MVVMCross and good PCL design, you can share most of your code without Forms anyway. 
I ended up adding following in class constructor for each ObservableCollection I had. Addresses.CollectionChanged += (sender, eventArgs) =&gt; { NotifyPropertyChanged(nameof(Addresses)); }; I tried to look into circumstances upon which unsubscribing from events is required to prevent memory leaks, but it does not seem like this is one of these cases so cleanup shouldn't be required. Null check is not required because ObservableCollections are all initialized in Model class constructor. Thank you for your replies.
Channel 9. Microsoft have a whole thing on it now that they've bought Xamarin.
As others have said R# + DotCover can give you nCrunch like continuous testing. I personally find nCrunch to be miles better.
Sure, just create a key binding that runs all tests every time you hit semicolon. edit - you guys need to lighten up
Normally I would agree but Pluralsight is very poor in Xamarin Android tuition. 
Yup - use Serilog with Seq. Does exactly what you want it to. I use them; they're great 
Which one? My mom made a list.
You could get around that using a Tuple but its not ideal!
I bet she did bro.
as far as i've understood, you can use the native classes with xamarin.android - including the gui elements.
Serilog is a structural/semantic logger, and Seq is made by the same people - they work very well together consequently Glad I could help :) 
You might try this on /r/cscareerquestions too. EDIT: You didn't specify the kind of jobs you're looking for, but mobile is always big. Given the recent availability of Xamarin, you could try your hand at that, though it might have a slightly higher learning curve compared to an SQL-based CRUD application. Also, perhaps consider hosting your ASP.NET application with Azure to give you a bit more breadth. With luck, perhaps you can connect your mobile application with the same service for a more cohesive project.
Regarding the second point: You create an empty web project, and you are surprised that the stuff is missing? You explicitly asked for an empty project. A **lot** of people don't use jQuery validation and don't want it in their project. A **lot** of people don't use the bundling mechanism of ASP.NET MVC and don't want it in their project.
A fair point... However, when I create the project, it has no scripts at all. When I create a view, it automatically adds a load of scripts for me. It knows, at this point, that the view will include client-side validation, and it adds all kinds of scripts, but *not* including the one needed for client-side validation? I do take your point that not everyone wants this. But if it's adding scripts to my project, at a point where it *knows* I *do* want it, then why not add it? Like I said, it seems so unintuitive it makes me wonder if I've missed something.
Yeah it is really fragile in some ways. Data bindings with custom ViewCells are fucked on Android it seems and causes really weird and random behavior. Its forcing me to hand code a "ListView" as a StackLayout in a ScrollView. Really shitty. But I still think I saved time on the project overall. I'll definitely look into MVVMCross for my next project though.
I agree with AngularBeginner, but totally understand why you would have the impression of what it should handle automatically for the developer. It's great to see someone who is open to exercising empathy to a position against their own, bravo.
You can use the .ToLower() method on the entry before .Contains() `var entries = loggBok.Where(entry =&gt; entry.ToLower().Contains(keyword));`
You want a custom Contains method which searches case-insensitive. The entries in loggBok can be in their natural case and not lower case. Read the remarks section in this article: https://msdn.microsoft.com/en-us/library/dy85x1sa%28v=vs.110%29.aspx EDIT: I think it is kind of weird that the Contains-method does not have a parameter for the StringComparison-enum like the Equals-method have. EDIT2: You can use the IndexOf-method. It has a overload-parameter for the StringComparison-enum.
yes that one!we use it at work (not me personally) i've been told its pretty good except for modal popups which are a clusterfuck 
 var entries = loggBok.Where(entry =&gt; entry.IndexOf(keyword, StringComparison.InvariantCultureIgnoreCase) &gt; -1);
I suppose some of the answer will come from how you want the user to edit it and how much data in the list there actually is. I have generally only allowed users to edit a single row/cell at a time, then send an ajax request to an api endpoint (`JsonResponse`) which then updates the data and sends back a true/false. I think what everyone is trying to say is, *send as little data as possible/feasable*.
Yup. Works in both Xamarin.Android and Xamarin.Forms.
I'd say, focus on one (stack), and try to make the most of it in the time you have. If you sign up for dev essentials ^1 you get the tools and some azure credits. That way you can build anything you want and run it publicly as demo. Since you lean to backend stuff, I recommend making an api. It will learn you how to handle input all the way to a database and back. Afterwards its always an option to add a lob application on top of it. ^1 https://www.visualstudio.com/en-us/products/visual-studio-dev-essentials-vs.aspx 
I tend to only include the reference to views from the backend. Frontend users dont need to load the libraries for validation.
Android layouts are XML files and Xamarin uses the exact same XML as Android Studio. The api itself is also pretty much the same except for some minor C# adjustments.
Okay, so adding Debug.Log(eventHandlers.Count()) shows a value of 0 in the console. I just thought about the fact that I am using inheritance and I'm overriding my dictionary. That probably is my problem.
Nope, that statement isn't being called. I figured out what my problem is (see my question), now all I need is a solution :) 
Thanks :)
Never use the `new` keyword on method/field/property declarations. It's almost always code smell. You're not **overriding** the base implementation, you're declaring a **second** method/field/property, additionally to the one in the base class. But this does not mean the dictionary is not available anymore: If you're accessing the dictionary using the derived type, it will access your new one. If you cast it up to the base class (even when it's the same instance!) you will access the base class dictionary. The base class itself has no knowledge about the derived class, so it will always use it's own dictionary. These problems you don't have with **override**.
But I can't use override on a field. It'll give a compile error: field cannot override [edit] TIL that the new keyword doesn't override a field, but rather creates a new field 
How does "It know ... that the view will include client-side validation", the page might just be content? Also is it really that hard to put in 1 line of code to add the script?
True, I forgot that. If you need this case, then use a property. Personally I always just have private fields - never protected, internal or public. In that case I always use a property.
You can use the dictionary as it is. It has a field initializer so you don't need to call any constructors. Just delete the `new` property in your derived class(es) and use `Add()` for your elements in the ctor. e.g.: public class Button : InterfaceElement, IOnClick { public Button() { eventHandlers.Add(typeof(IOnClick).Name, typeof(OnClickHandler).Name); } }
`System.Security.Cryptography` contains modern algorithms that are regarded as secure, *assuming they are used correctly*. For basic symmetric (single key) encryption you generally want to go with [AES](https://msdn.microsoft.com/en-us/library/system.security.cryptography.aes.aspx). If you don't control the data storage, you probably want to verify not just confidentiality (can someone read this?) but also integrity/authenticity (has someone else messed with this?). `System.Security.Cryptography` doesn't offer any authenticated encryption scheme by default as far as I know, but you can verify data yourself with [HMACSHA256](https://msdn.microsoft.com/en-us/library/system.security.cryptography.hmacsha256%28v=vs.110%29.aspx) For random key and salt generation use [RNGCryptoServiceProvider](https://msdn.microsoft.com/en-us/library/system.security.cryptography.rngcryptoserviceprovider.aspx), or use the `GenerateKey()`/ `GenerateIV()` methods of the `Aes` (or algorithm of your choice) class. (Never use `System.Random` for this) For securely transforming passwords into encryption keys and IVs, .NET offers [PBKDF2](https://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes%28v=vs.110%29.aspx). For additional safety against hardware-accelerated brute forcing attacks, bcrypt or even scrypt may be desirable, but those are unfortunately not available within the framework itself. There are Nuget packages available for both, although I can't vouch for them. Obviously the encrypted data is only as safe as the key to it, so you'll have to think about how you handle that. [ProtectedData](https://msdn.microsoft.com/en-us/library/system.security.cryptography.protecteddata.aspx) may or may not come in handy depending on the design of your application.
You want your requests to be as small as possible and your server response time to be as fast as possible. So it's up to you to find a balance between what you send back to the controller and what database operations are performed. As for how to send a list back to the controller, as long as the html form elements have the same name attribute (and are compatible data types of course) an array will be created for you and passed as a parameter to your action method. I think it will automatically convert it to a list for you if you specify list as the parameter. Although, if it's a list of complex types, I'm not sure if it will work properly, since each object will have its own properties that need values.
Ok thanks for your reply, I found an example of how to encrypt using AES here http://www.gutgames.com/post/AES-Encryption-in-C.aspx In the example he uses a password, salt and initialVector values to encrypt with. I can ask the user for a password. But salt and initialvector, don't i have to have them as text somewhere in my code? I am planning to run my program on more than one machine, (+ Phone &amp; Tablet) And I control the data storage (My own FTP server I am thinking)
There's been a few articles recently demonstrating pretty poor Ninject performance. Personally, I'm a big fan of SimpleInjector, mostly for its setup simplicity, and very good performance.
In the XML files, yes. Code is slightly different obviously since youre writing the app in c# instead of Java but all tutorials and examples should be fairly easy to translate (mostly a matter of changing lowerCamelCase to CamelCase)
There is no way to turn this off. With the `@` you switch to code mode in Razor, where you have to enter code. The `@` sign is invalid in C# code like that. With `&lt;` or `&lt;text&gt;` you will enter markup mode again. I would consider it a poor design choice if they'd do it otherwise.
Possibly not current enough, but bugtracker.net is open source and has decent AD support.
Thanks these responses have been great. 
Maybe I'd be better off with a store search instead of a DropDownList
Yes
Is this not already catered for? public class Foo { public void SetBackground(OneOf&lt;string, ColorName, Color&gt; backgroundColor) { Color c = backgroundColor.Match( str =&gt; CssHelper.GetColorFromString(str), name =&gt; new Color(name), col =&gt; col ); _window.BackgroundColor = c; } } is this: public class Foo { public void SetBackground(string color) =&gt; _window.BackgroundColor = CssHelper.GetColourFrom(this.color); public void SetBackground(ColorName colorName) =&gt; _window.BackgroundColor = new Color(colorName); public void SetBackground(Color color) =&gt; _window.BackgroundColor = color; } and any of my colleagues caught returning something like a `OneOf&lt;T0, T1, T2, T3, T4, T5, T6, T7, T8&gt;` will get figuratively shot.
Ugh, just use F# already.
I think that's because 'value' is a poorly named variable for a boolean. It really should be something more like isValid or hasValue. Then I think it reads better without the bool comparison. 
No, it's fine to put validation and value correction in a setter. Just make sure you document the behavior it in the XML comments. For this particular case you could be using an unsigned integer (UInt32). Just keep in mind that if someone tries to do an unchecked cast of a negative int then you're going to overflow into a very large UInt32.
This doesn't seemed to be that much easier than Moq. https://github.com/Moq/moq4/wiki/Quickstart 
The same is true for NSubstitue! (My personal choice) Obviously many mocking frameworks have adopted C# abilities into similar API approaches. (Which is of course not bad at all!)
on one hand, stuff like this is essentially why we have setters and getters: we need to do something whenever this value is changed or retrieved. on the other hand, your example is pretty terrible. if you only want positive values, using an unsigned type would ensure that and also make your requirement explicit to users of your class. if you were just trying to illustrate general validation, most people would argue you should be informing the user on validation errors rather than hiding what valid values are for your property.
Ok so you say, replace PasswordDeriveBytes with Rfc2898DeriveBytes. But then how do i get the IV, since i am guessing i can't use the exact same code for that. And finally the salt, where would you store it? I am thinking in a file on the ftp server perhaps?
I'd bet you're right and that it's supposed to say "MVC5"... if the poster is well made, it was probably done by a graphic designer who isn't necessarily familiar with .Net terminology. 
&gt; Sorry if this doesn't make a lot sense Yes. I think answering these questions is helpful to a beginner: 1. What do you want to learn? 2. Why do you want to learn it? 3. What do you want to build with the thing you want to learn?
You use Rfc2898DeriveBytes like this const int iterations = 50000; const int saltSize = 32; string password = "..."; var deriveBytes = new Rfc2898DeriveBytes(password, saltSize, iterations); byte[] key = deriveBytes.GetBytes(32); // for 256 bit AES byte[] iv = deriveBytes.GetBytes(16); // for AES CBC byte[] salt = deriveBytes.Salt; // this is randomly generated, store this or the data is gone forever When decrypting you need to restore the original salt before deriving the key and IV: deriveBytes.Salt = ...; Note that more iterations means slower key derivation and thus slower brute forcing, but that affects you as much as the attacker. Well, actually it affects you worse because the attacker might have some multi-GPU hashing monster while you're working with a basic desktop or even mobile CPU. You may want to play around with this value to see what works for your use case. Where and how you store the salt is not so important. Not having it makes life harder for a potential attacker, but the true secret is the password and the derived key, so storing it with the encrypted data is fine.
Indeed, the only downside of SimpleInjector is that it doesn't have a lot of features that come with more complex DI frameworks. But if you just need something fast and simple, it's more than enough.
1. First things first, everything that is in that book. From basics to more advanced stuff. Nothing has a bigger focus at the moment 2. To know how to create windows applications and to use that in Unity 3. Applications and games
I'm not sure what you're proposing instead? Each call to `Rfc2898DeriveBytes.GetBytes` returns subsequent bytes of the generated stream, so they are different. And the salt is randomly generated anyway, obtaining it from `Rfc2898DeriveBytes.Salt` is just shorter than `RNGCryptoServiceProvider`.
Too often it feels like the more complex functionality offered is glossing over a design flaw in the consuming code base. So simple is a positive for me. Complexity is a four letter word in my lexicon (probably a hashing error...) 
Didn't know. TIL. Thanks.
Ok so now my code looks like this, better? (http://pastebin.com/U4Akiik4) I know that I am just saving the salt to a file, quick and dirty i will fix that later. Now back to the actual security question, how secure would my data now be? Lets assume that someone picks up my program, data file and salt file but not my password. Would it be possible to brute force the encryption given a bit of time? I am just trying to get an idea of what security level I have with this.
Moq is nice, but I've found that [NSubstitute](http://nsubstitute.github.io/) is just a tiny bit easier. Enough so that it makes a difference when writing many tests over a long time. Comparing Moq, NSubstitute, and FakeItEasy, I prefer NSubstitute but couldn't fault anyone for picking a different one.
sounds delicious
If you were speaking in terms of contract DTOs then sure. But if this were a domain class and this representing the actual domain object behavior, then this would be perfectly normal.
Depends on the strength of the password, and who the adversary is. According to a quick test with the popular GPU-accelerated cracking tool oclHashcat, my gaming PC can compute over 30,000 hashes/s of the above (PBKDF2-HMAC-SHA1 with 50,000 iterations). Of course an attacker might have (or rent) multiple machines with multiple GPUs each to accelerate that accordingly. oclHashcat is designed for recovering hashed passwords which doesn't directly translate to decrypting files, though. Cracking a long, complex password like this with brute force alone would still take a long time, but working through a dictionary of popular passwords would be very fast.
.Except() doesn't get enough love. 
Have to agree with /u/anamorphism and /u/grauenwolf here. Use a `uint` if you want to enforce positive numbers only, and then if you still need validation on setting, use `SetFoo()` to do that.
Not sure why developers plan on using products that aren't even RC yet tbh. Can you build production products with the current toolset? Is there something totally lacking right now that .net core fixes? Do you *need* .NET Core right now? I'm not just waiting for RC, I'm waiting for the dust to settle, for users to master it and then I'll start to learn it.
Security and encryption are hard and it is very easy to do it wrong and compromise both. As tweq stated System.Security.Cryptography contains modern algorithms that are regarded as secure, assuming they are used correctly. And thats the rub. If you are serious about this you should hire someone with a track record in this area to help design and implement it. Anyone can design an encryption they themselve can't break. Of course this also depend on the value of what you are encrypting, if its your music playlist go ahed and do it yourself but if it is high value trade secrets get some experience onboard.
No programmer should be boiled down to one language or set of tools. If it's oop in c# it's oop in Java. With small differences in syntax and ability. A language should be a tool not a way of life.
&gt; Did you even know there were so many ways to do this? I have some level of knowledge of about half of them. &gt; What do you, your peers, and libraries you are familiar with use? MS Code Contracts. &gt; Would you like to use a certain method but just haven't gotten around to using it or aren't allowed to? No &gt; Would you like to have language level support for contracts and/or null parameter checks in c# 8? If we're getting language level support, I'd rather put non-nullability in the type system than put it in a language-supported contract feature. &gt; Have you used any of these methods but found them to be too much of a headache to maintain? I mostly use option 2 and 3, and haven't found any maintenance problems. The Resharper annotation looks pretty bad, since it appears to potentially have identifiers inside a string literal(?) &gt; Do you have the mindset that failing fast is bad and units tests should tease out potential issues? Failing fast is good. The faster the better. Compile-time failure is the earliest possible failure. If that's not possible, then unit tests should indicate the problem.
Overload resolution is done at compile time. `OneOf&lt;&gt;.Match()` (presumably) resolves at run-time. That enables a class of algorithms that can't be handled by compile-time overload resolution.
I don't agree with that, rounding (usually from unit conversion) is too common in properties. Check against epsilon and I'll allow it ;).
Moq is fine, but I don't really like the ".Object" part of using it.
Why would they need service packs for an xcopy deployable runtime? Maybe version 1.1 instead?
Duuuude you're so behind the times! Do like the cool kids nowadays, run node.js v0.4 on your prod server and wonder why it's always crashing or deadlocking and then make a blog post on Medium about everything you learned by running node and being a total fucking failure for months on end and costing your company tens of thousands of dollar because you decided to use a product that was not ready! 
&gt; So I tried &gt; sudo apt-get install dotnet-dev-1.0.0-rc2-3002702 ...why? Have you tried installing the dependency it asks you to? sudo apt-get install dotnet-sharedframework-microsoft.netcore.app-1.0.0-rc2-3002702 If *that* doesn't work and doesn't give you a good explanation of why, I've heard `aptitude` does a better job of giving you details (it works the same way as apt-get) 
.NET core has been in RC for months now, it's just been an RV that's more if an alpha. 
Terrible article. You clearly haven't done your research. Try again later, maybe?
I have to say I agree with the author here. I got very excited when .NET core was announced and started doing a few POC way back when. Then things started to change. Breaking changes were introduced post RC and now I am not sure what we will get and when. Personally, I have stopped looking into .NET core for the time being and all our current projects are being done on 4.5.2 or some other technology when we need to deploy in Linux. The acquisition of Xamarin also seems to have thrown a spanner in the works. I am not sure where the whole MONO + .NET core is headed now. Will have to wait and watch I guess. I would love to see them get something out that can used to develop and deploy LOB application using web API, entity framework by End of year. I am still worried that a lot of external libraries we use will not be ported to .NET core in a timely fashion.
You don't convert, you have two separate GUI projects leveraging the same logic. I usually set up my projects with sub projects: iOS Android Core The idea is to keep as much in Core as you can. Presentation code is the only thing that should be super varied between platforms. Dependency injection is also a very useful tool when you need some different logic, but still want to share as much code as possible. 
Step 1) Look for `await`. Plenty of occurrences. Step 2) Look for `ConfigureAwait(false)`. Not a single occurrence. Please learn async and await. Code like this should really not depend on the synchronization context.
Read this https://github.com/aspnet/Home/issues/1381 I tried to accomplish exactly the same thing as you are trying to do now. It took me several tries and everything is documented there. The whole saga is in the comments.
OP this is the best response in this thread. Well said!
So how does this translate into how secure my program is? You say that your system can compute 30.000 hashes/s, so how meany seconds would it take to get the password, if lets say the password is 10 chars, "JnYuwrfpzm"
You would have to introduce reflection though and at that point we get into too complex to bother territory - there are better alternatives.
In the end the problem was not that I was using types in my Dictionary, but my misunderstanding of the new keyword for fields. I changed everything back to Dictionary&lt;Type, Type&gt; and it worked just as fine as any other dictionary.
IMO it is property instead of field exactly because it's setter and this roundtrip is not guaranteed.
So can we conclude that with this program, assuming that the person trying to break my encryption only has my encrypted datafile, and possible the salt file. The data should be quite safe?
There is some truth in this; as a _language_ it is broadly correct. But in terms of understanding the frameworks and available libraries, understanding the nuances of how the language works, etc, it isn't. If you've got 10 years of C# under your belt and you switch to Java, you won't be writing useful Java solutions anything like a Java pro (and vice-versa of course). 
You mean https://m.reddit.com/ ? Works GREAT for me.
Well then thanks a bunch for all your help.
Because you are putting all your eggs in one basket. There plenty of times you could use another language. What happens if Microsoft makes a bad decision? What .net use drops because Microsoft did something really stupid. They made windows 10, Windows vista and Windows 8 don't doubt them they can do it. So if you focus really hard and that's all you can do, what happens when everything moves on and its no longer in demand?
With a tons of shitty framework and boilerplate builder tool from outer space.
Get yourself a https://pluralsight.com subscription and look at database architecture and C# application development. Then take a look at SQLite (https://www.sqlite.org/); a portable, lightweight, single file database that can be sent around with your application. 
No but he's right, it's all open-source, if the decision is a bad one and you don't like it, you can fork it and do what you want. I get what you're saying, don't put all your eggs in one basket but that doesn't mean you can't develop exclusively in .net, it's not like most of what you'll do won't transfer to other fields. 
I'm talking about mind set. There is a difference between a exclusive.net mindset and a mindset that sees .net as a tool and sees other things as a tool that may be better in different situations. Also what if Microsoft decides to no longer open source it or any number of things that do not show up as fixable in code. Not every decision directly affects the code.
Yeah but imagine you're a .net developer and ~~Microsoft~~ the .net foundation makes some bad decisions that damages the ecosystem, you'll go where the ecosystem goes. Someone will fork it and if they fork it for the right reasons, people will use it. However, the same can be said for any platform, this isn't anything specific to .net. And it has happened, things have been forked and the original has died off (See: Almost anything Oracle touches).
Removed: Rule 6.
You're always going to have a bad time if you're mocking concrete types. You should be mocking an interface and setting up the behaviour of that interface that the class under test uses. That way you needn't worry about constructor arguments. The only constructor arguments necessary are on the class that's being tested (if there are any): //arrange: var mockedDependency = new Mock&lt;IDependency&gt;(); mockedDependency.Setup(m=&gt;m.Foo).Returns("Bar"); //act: var testClass = new TestClass(mockedDependency.Object); testClass.DoSomeMethodThatReliesOnFooProperty(); Mocking libraries tend to favour this pattern. And if you're going "full IOC" then you needn't worry about any constructor logic at all, just use an IOC container. I'm not saying that IOC is the only way, or that my example is by any means "the best", just that it seems that's the way a lot of people tend to be building stuff at the moment, hence why mocking platforms have evolved like this.
he obviously never done anything remotely serious and is totally ok with the "whenever, do whatever" mentality that ASP.NET core and most poorly run open source projects follow. 
No I'm saying skills are easy to transfer so don't just sell yourself short or root yourself. I'm not saying learn another framework just cause I'm saying be open to learning a new framework if needed. I've noticed that programming languages have been becoming a religion-like thing for a lot of people and I'm just saying as a reminder don't do that it's a very bad idea.
1. All the time (see: http://stackoverflow.com/a/12187583) 2. Indeed, there are many ways to skin a cat. 
&gt; You're always going to have a bad time if you're mocking *concrete types*. It's ok, you're among friends... you can just say DbContext. 
X-Post referenced from /r/dotnet by /u/Aaronontheweb [RC means something](https://www.reddit.com/r/dotnet/comments/4lb1us/rc_means_something/) ***** ^^I ^^am ^^a ^^bot ^^made ^^for ^^your ^^convenience ^^\(Especially ^^for ^^mobile ^^users). ^^P.S. ^^my ^^negative ^^comments ^^get ^^deleted. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
What /u/BirdFluLol said is what I've come to feel after a few years. If you're relying on dependency injection, you're going to end up with a lot of constructor parameters. Stubbing that out is hard and leads to long chains of setup code. The only solution is to hang an interface on any type that has constructor arguments. I get a lot of friction from team members over that. I also hear a lot of grumbles about how hard it is to mock types with a lot of constructor parameters. I did a huge solo project last year, and regretted every time I answered, "Should I make an interface for this?" with "No." It's a necessary evil if it's an evil at all. In production code, the long constructors are handled by a DI container. I've done a few projects where I didn't bother with a container, and the only place where the 'pain' was felt was in a startup bootstrapper. On the list of code I'd like to revisit and improve, it's very low.
Can you explain what you are trying to do? are you talking about database views?
&gt;have entity framework load the related entity when the main entity is loaded If you want this you usually need to do something like dbContext.Object1.Include(o =&gt; o.Object2) and it'll pull down the relationship.
yes. Multiple database views, but there is an implicit one to many relationship between them. 
In that case can you give me some lessons on how to turn open source into a money making exercise? :)
In the test code, you can use an AutoMocker to create the SUT, although long ctors might be a warning that the class has too many responsibilities and should be broken up a bit. For controllers it can be nice to rig up DI at the action level as the actions often have different dependencies which get jumbled together in the ctor.
&gt; Why the hell does it need more than one when you are first building the application? If your emphasis is on API design, especially for libraries that ship (e.g. Nuget), then you want to prove the design of your interfaces are correct. Otherwise you'll either end up with a lot of methods that throw `NotSupportedException` or, like COM, have interfaces named `IFoo`, `IFooEx`, `IFooEx2`, etc. Another API design issue is that abstract interfaces don't allow for internal methods. This severely limits your design options in a language like C# and may force you to make a lot of things public when they really shouldn't be. *** If, on the other hand, your emphasis is "Mock da world!", still don't create abstract interfaces up front. Also look into abstract base classes or overridable methods. Abstract interfaces have a use, but they should be carefully planned for and not just mindlessly applied by default. 
No, such a control is not included in the framework. If you're just looking for a mockup, just use a normal text box and add a picture box with the desired icon on top.
I see your point about library design, when you're publishing the library. But in the context of the quoted sentence, I don't understand what the response was. And I don't necessarily want to make this a conversation of inheritance vs composition, but I usually don't find abstract classes and virtual methods to add much value in this domain (providing services to consuming classes). If you have common behavior that is shared between services, like virtual methods on a parent class, then the segregation of those interfaces probably needs reexamining.
Yes it does...I've already had people approach me asking about training but I'm trying to figure how I can break the day job routine and take a step forward...
You can use an image or just draw it: &lt;Style x:Key="MagnifyIcon" BasedOn="{StaticResource BaseIcon}" TargetType="{x:Type Label}"&gt; &lt;Setter Property="Template"&gt; &lt;Setter.Value&gt; &lt;ControlTemplate TargetType="Label"&gt; &lt;Border x:Name="IconBorder" BorderBrush="{StaticResource ChromeBrush}"&gt; &lt;Viewbox&gt; &lt;Path Stretch="Uniform" Fill="{Binding ElementName=IconBorder, Path=BorderBrush}" Data="F1 M 17.516,14.004C 16.3747,16.46 13.8947,18.18 11.016,18.18C 8.13733,18.18 5.664,16.46 4.52667,14.004L 4.50667,14.004C 4.088,13.0933 3.852,12.0814 3.852,11.016C 3.852,7.06799 7.068,3.85199 11.016,3.85199C 14.964,3.85199 18.1933,7.06799 18.1933,11.016C 18.1933,12.0814 17.9573,13.0933 17.536,14.004M 26.796,21.252L 21.072,15.504C 21.2867,15.024 21.4573,14.5187 21.6053,14.004L 21.62,14.004C 21.892,13.056 22.044,12.056 22.044,11.016C 22.044,4.93066 17.0893,0 11.016,0C 4.944,0 0,4.93066 0,11.016C 0,12.0507 0.145333,13.0533 0.413333,14.004L 0.424,14.004C 1.73067,18.628 5.98133,22.032 11.016,22.032C 12.612,22.032 14.1373,21.684 15.516,21.06L 21.2533,26.796C 22.02,27.564 23.0293,27.948 24.0253,27.948C 25.0333,27.948 26.0413,27.576 26.796,26.808C 27.576,26.0387 27.948,25.032 27.948,24.024C 27.948,23.016 27.576,22.02 26.796,21.252 Z " /&gt; &lt;/Viewbox&gt; &lt;/Border&gt; &lt;/ControlTemplate&gt; &lt;/Setter.Value&gt; &lt;/Setter&gt; &lt;/Style&gt; &lt;!-- Base template --&gt; &lt;Style x:Key="BaseIcon" TargetType="{x:Type Label}"&gt; &lt;Setter Property="VerticalAlignment" Value="Center"/&gt; &lt;Setter Property="Margin" Value="2.5"&gt;&lt;/Setter&gt; &lt;/Style&gt;
Let's build a new framework!
Sign up to [Visual Studio Dev Essentials](https://www.visualstudio.com/en-us/products/visual-studio-dev-essentials-vs.aspx) and you get 6 month subscription to Pluralsight for free.
You can do this with EF fluent mapping. There is lots of documentation out there on fluent mapping but if you need help feel free to PM me. As /u/steckums said you will have to include it unless you have lazy loading turned on. If relying on lazy loading you need to access the related object before disposing of the context otherwise it wont load.
I find that's how it works out too, when I get to 3-4 parameters I start to notice there's room for another object that cuts it back down to 1 or 2. But it's still 100% more pain in the butt to stub out/mock a class with 1 constructor parameter than 0.
&gt; I cannot understand why you took such a high risk in the first place but losing and then asking if you should keep pouring money into the same bad bet is insane. You didn't read my post clearly then. I explicitly stated that I haven't done *anything* with .NET Core precisely for this reason. I want to be able to bet on it because it'd be huge, but I'm souring on that. &gt; Not really, no. It sounds like your personal desire for .NET Core to win big is clouding your judgement. Same as above.
I have worked in a few, you have my sympathy.
&gt; Often it is just missing a "settings" parameter object That is its own code smell, as the compiler is unable to tell you that you're missing a value on the settings object. Long constructors are definitely a code smell, but moving the long constructor to a settings parameter is just hiding the smell, not fixing the design problem. The underlying problem is a lack of separation of concerns, most likely.
That's a seam. Break your repository into data access thingy (whatever name floats your boat) and then a separate "anything interesting" class. No need for partial mocks (which are the spawn of satan) and you've got easily testable "interesting thing".
AutoMocker hides NREs and the like from your tests by auto-injecting dependencies. You want your tests to know how the class works, and so your tests should know how to construct the class under test without needing magic.
Almost every company claims they're agile and hardly any are. Agile is so last decade though, there's a whole post-agile movement you can not do now too ;) 
Digressing a little,I'm not 100% sure the tests should know how a class works - IMO they should be happy as long as the specification/requirement is met. I broadly agree with you though - AM shouldn't be necessary. It's better to break up a big class, or consolidate several dependencies behind a cohesive facade.
Do yourself a favour and write an API you can call that uses ASP.NET's identity packages with claims based authorisation (i.e. 'Can add record', 'Can create users'). Might seem like overkill now but when you come to write another application where you need authentication &amp; authorisation, you won't have to rewrite it.
That doesn't seem like overkill at all. Keeps things wrapped up nicely. Also keeps ASP.Net from having to be included and sprayed around the application.
Short....blimey no! But fair enough, my blunder. I just had a bad release at work and vented here. I'm all chilled now. I browse here and got all impulse-y. I'll throw in some brackets to calm it down :) { } ^ that was actually all genuinely typed without a single drop of sarcasm, just in case it seemed otherwise. The core stuff probably wound me up too. I'll go to sleep on a semi-colon ; Edit: To, two, too.
The thing I've learned is agile is about improvement. Not your cards, not points, not stories, but improvement. You're going to ship shitty code sometimes. You're gonna have to meet deadlines. That's unfortunately part of the job you cant control but what you can do is use agile in your team to improve what you can control. Improve your deployments. Improve your tests. Improve your framework. Find out why you were just "moving cards" this sprint and do small things to improve it. 
Have a look at Thinktecture's IdentityServer3 nuget package. It's a full OAuth2 / OpenIDConnect implementation - you can use a local user store but also fairly easily integrate to external authorities (i.e. social logins, ADFS, Azure AD, etc. etc.). It's a great open source framework, with some good tutorials on Pluralsight and documentation / support via GitHub.
When unit testing (and especially when TDD-ing), the specification and the implementation are very, very rarely far apart from one another - especially when talking about dependencies. Also if the class under test has dependencies that your test doesn't need to know about, that can be a big indicator that the class can be split.
When should this be called? Every async call for console apps?
I'd say, and of course this is generalities, you want to use your settings object to initialize factories and such, then pass the factories around. It's not just about breaking into smaller classes, it's about keeping initialization in one place and passing initialized dependencies around rather than passing settings around as either long parameter lists or settings objects.
If your code is tightly-coupled to the point where it is a problem, adding more interfaces won't fix the problem. If anything, it is just more cruft that needs to be removed before the actual decoupling process begins. The only purpose of interfaces is to add a level of indirection. That gives you the ability to add mocks, but if you have `A --&gt; B` then adding an `IB` interface just gives you `A --&gt; (B, IB)`. 
Generally speaking, I don't want to mock anything to begin with. I'd rather write an integration test than play with a mock and hope it matches the real objects behavior. 
Agreed
I love singing Scrum Fall to the tune of Skyfall.
That's typically seen as a step down in agile maturity, though...
PM's are waste. Tell 'em Craig Larman says so.
It's easy for developers to be agile, it's harder for management to be agile. At the end of the day your development process will always be analogous to how the company itself operates. If you want to truly be an agile shop then it *must* start at the top. Most companies don't see that and forget that agile methodologies are a management tool first, development tool second.
What new word should I be looking for. 
I keep hearing “Continuous Delivery” and DevOps lately.
Haha good point. I never thought of it that way, but it makes sense and I would probably enjoy it more too. I'll try to think of something. Thanks!
Maybe it is the standard, but it isn't how my company does it. - Sprints fail; that is fine as long as we learn. - Take on enough work so we can do the job right. - Definition of done includes testing, quality, and code reviews 
- Agile isn't a framework or a process it is a set of principles. Most people do Scrum, which is one approach to fulling the agile principles - Scrum like every other process: is hard to implement, harder to maintain, and isn't a magic pill you take to improve. I like to compare implementing scrum to working out. The end result of dedication to it is something you earn through blood, sweat, and tears. You can't buy it. You can't manufacture it. You can't make it appear over night. Most people fail at it. Most people hit the gym once or twice then hit the pizza or Ben &amp; Jerries. Now because of that I don't go around saying working out and eating right doesn't work. I realize that most people aren't dedicated enough to do it right. With Scrum the entire organization has the surround and support it. Bad business processes kill Scrum.
Fr-agile, is my preferred term.
I think custom WPF style templates are way out of OP's realm of knowledge.
You can make a decent looking searchbox in WinForms: just set the search button's `FlatStyle` to `Flat`, remove the border, and change the background color to the same color as the textbox. Or use a `PictureBox`. http://i.imgur.com/yEQkER4.png ----- What OP should actually do is use a mockup designer like [Pencil](http://pencil.evolus.vn/) or [Balsamiq](https://balsamiq.com/) which requires no VS or coding experience.
Heh, I was just trying to do something very similar to this yesterday and had to take a different approach in my case. But basically you can just treat them like tables in your configuration and set up navigation properties, but that means that you have to be able to define a PK/FK relationship between them in you EF configuration, just as you would for two tables. But if you one view does not logically "FK" to the PK of the other, then EF doesn't support it yet. In other words, it's not enough for them to simply share columns that you would join on in a raw query - they HAVE to have declared, complete key relationships. If they don't, then you need to write an EF query that manually joins them and projects into a custom (or anonymous) type. As for loading them at the same time, if they have a navigation property, then I'm pretty sure you can do the standard Include stuff - otherwise you're back to a custom query.
Waterfragile
Razor gives you fine grained control over the HTML, something that you can't really get when using WebForms as intended. The downside is that it takes longer to build simple websites. (Though its faster as the browser-side complexity increases.) 
Huh, I never used that template before. If you use New Project -&gt; Web -&gt; ASP.NET Web Application then you get a traditional C# web project. (Don't quote me on this, but I think you can even mix WebForms and Razors in it.) I don't know what this Razor 3 project template is for. EDIT: Oh, I remember what it's for. A "web site" is just a bunch of loose files that are only compiled at run time. It simulates classic ASP style programming and is very much not the MVC pattern. 
The bottom line is that in MVC there are magic layers in the control structure where modules and routing is wired up, but the actual HTML output is not tampered with, and it's clear what the browser is going to see and why. It's more to do, but it will let you do whatever you want and won't fight you over it. If webforms is working for you, and you sites aren't packed with Viewstate and ID hacks to make it work right, then there's no pressing need to switch; Microsoft isn't abandoning webforms any time soon. However, if you find yourself fighting the architecture or taking frequent trips to Microsoft Reference Source just to figure out why it's not doing what it's supposed to be doing, you might try giving MVC a chance. It's like putty in your hands.
Why do you consider them tightly coupled?
Pick a platform that interests you. Is it the web? Start to learn ASP.NET MVC and WebApi. Make a simple catalog application for some seller's products. When you are done, implement ordering functionality. Is it desktop? Start to learn WPF (WinForms is a bit outdated by now). Learn MVVM and data binding. Make a simple twitter client. You will learn a lot about communicating with 3rd party services and abstracting your logic away in services. Is it mobile? Start learning Xamarin or Windows Phone development. Make an application that allows you to put pin markers on the map and write some text on them. These are simple examples but if you are just getting started, you will learn a lot from them, as they resemble problems that we want to solve in real life.
On every await usage.
Sick burn mate! 😂😂😂
In my opinion it's the type of product that determines wether scrum or kanban is the prefered methodology. Scrum is for product development with defined deliverables and dead lines, whereas Kanban works for well for support and maintenance projects where the turnaround time depends on the type of deliverable and the scope is not well defined at the beginning.
That's my plan now :) 
Software craftsmanship might be a good starting place. Things like CD (Continuous Delivery), DevOps. Kanban and/or Lean as some examples of things that could be described within agile practices, but are widely adopted in the post-agile world. As usual, it's not anything that's particularly new, it's more to do with packaging it all up into a coherent whole and hopefully acknowledging what failed before. [This sort of thing](https://pragdave.me/blog/2014/03/04/time-to-kill-agile/) highlights some of reasoning, although not all of it. Largely it's an acknowledgement that you can "do" agile without "being" agile. It becomes a tick box exercise without delivering any tangible benefits to either the team or the business. 
My experience with MVC so far has been that it gives you all of the basic tools you would want to make a site. For basically free you get decent (but basic) implementations of routing, authentication, authorization, ORM and migrations (assuming EF can work for you), parameter and model mapping, templating, AOT style action interceptors (action filters), and standardized places in code to configure different aspects of your project. None of this is strictly necessary, but the biggest advantage is the saving of development time, especially across projects or with new developers to the team. An in-house server side system is going to take longer for a new developer to understand, and they can't just Google how to accomplish more advanced tasks like setting up action filters across all actions, or setting up per request dependency lifecycles.
I think it depends a lot on the sector you work in. At my job in telecoms, it's near impossible to get at a definition of done. The reality is also that people just expect you to fix the problem, without a clearly defined change request. That in itself makes it hard to define a product, break down stories into smaller tasks, stick with sprint tasks only, etc, ignoring technical debt, reasonable deadlines, the ability to do code review, etc.
Yeah this is the crux of the problem. If the domain you're working in lends itself well to iteration (solidly defined requirements, a patient and interactive customer, someone with enough time to be a product owner, the company's commitment to good software / good process, etc) then yes it's fine. All too often however I see people trying to shoehorn scrum/agile in where it doesn't have those conditions - and it fails utterly (and then worse, someone comes along and says "it's because you didn't follow the process closely enough!") I really wish engineers and managers could see agile the same way they see programming languages. You have to use the tool that's the best fit for the current problem / environment, and try your best to avoid dogma and hype. Scrum is the snake oil of the industry right now and "scrum coaches" are the salesmen. Not saying they never have a real success story, but their "everything is a process problem" approach to selling their services is just fundamentally dishonest (there are far more factors that go in to good engineering than just process). And the worst part is how management just eats this stuff up and then acts shocked when it doesn't work.
I see agile as everything you said plus one other important thing- don't wait until the end before you put the pieces together and test them. Continuous integration 
No. Do your own homework.
You don't consider EditorFor model binding?
1) Write some code to load in the encrypted questions. 2) Write more code to load in the answers. 3) Build a random list of questions. 4) Write some code to take input from the user. 5) Keep track. 6) Show a message. 7) Mix stuff up again. That's basically all you have to do.
Yea it is unfortunate. I spent most of my younger years in corporations trying to figure out how to fix the larger systemic problems and it boils down to culture for me. The only thing I've read that has helped understand culture was the book 'Change the Culture Change the Game'. I won't say its exhaustive/scientific, but it the only framework I have to understand how to create/change culture. It follows similar patterns to other business self-help books: lots of ideas supported by anecdotes. The "rag tag" line you quoted was meant to setup the next two sentences. Quoted alone it could be read as if I was saying "make do", but that wasn't what I really wanted to say and that is my fault. It was an attempt at highlighting that you can't have one good process (Scrum, etc.) have input from/depend on other bad processes' output. "Garbage in, garbage out". As far as Scrum working; its hard and I understand that for many it is a unicorn. I do it in my company now and it was a constant fight to get it to where we are now. We still have lots to work on and we aren't perfect. We were also largely failing at it for a time (1-1.5ish years) What really helped was that we went through a merger and the executives we gained over product management and engineering are some of brightest I've worked with. Once they set the tone, the rest of Scrum really started to settle in with the other business units. So many problems disappeared (date focusing dropped off, failed sprints were lessons, story quality improved from terrible to amazing, grooming works, etc.). That is my anecdote that culture has to come from the top.
that's just code generation. instead of you typing out `&lt;input type="text" value="blah" /&gt;` or whatever for each property in your model, the EditorFor function will use reflection and generate all of that html for you. binding is like binding in wpf. you can change a value in your model and have your view updated automatically, among other things.
https://channel9.msdn.com/Series/C-Fundamentals-for-Absolute-Beginners
You need an if statement comparing the user input with the accepted phrases. This is just a simplified example.... if (Rocket == "Hi Rocket" || Rocket == "Hello Rocket") { Console.WriteLine("Nice to meet you, " + name); } else { Console.Writeline("Hey! That's not my name!"); } The syntax you are using is for having different settings during debug or release....for example if you are in debug you want to hit your development database and if you are in release build you are hitting your production database.
That's not an if statement. https://msdn.microsoft.com/en-us/library/5011f09h.aspx Try the if statement like this ^
The way I did this for my own Console App that verifies input is that I used `goto`. Yeah I know it is blasphemy in today's world but it solves the trouble in a pinch. This is my code, which shows the basic idea: Console.WriteLine("How many sons do you have? (Please use numbers.)"); SonsInput: tempInput = Console.ReadLine(); if(int.TryParse(tempInput, out tempNumber)) { input.Sons = tempNumber; Console.WriteLine(string.Format("You have {0} sons.", input.Sons)); Console.WriteLine(" "); } else { Console.WriteLine("Please write a number."); goto SonsInput; } Edit: Please don't use `#if` .. it is completely needless for what you're doing. These lines starting with `#` are just instructions to the compiler and help with conditional compiling .. you don't need that.
A while loop is the best answer for a console app that needs a specific input. You really don't want to use goto, if for no other reason than to avoid other developers screaming at you. Here is an example: string input = Console.Readline(); while (input != "Hello Rocket" || input != "Hi Rocket") { Console.Writeline("That's not my name"); input = Console.Readline(); } edit: There is a famous computer science paper ["A Case Against The GOTO Statement"](https://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF) that gives the actual reasons not to do it.
I read that webforms is not going to be supported in ASP.Net Core. Has this changed?
I didnt think of that at the time I wrote this .. `goto` seemed more straightforward. also, the way I had structured that, I would've had a lot of nested `while` loops. `goto` keeps it readable, imo. It was a placeholder, at any rate. 
&gt; I do it in my company now and it was a constant fight to get it to where we are now. Good for you! Like I said, I don't think it's impossible, but it's outside of my control, like you said: &gt; culture has to come from the top 
Well, by definition anything web based is going to require a server round trip. It might be getting done with AJAX behind the scenes though. But no, be default, MVC razor binding requires a round trip to update the model. There are other things you can easily plug in though like KO which handle the AJAX calls though. 
No. Use `TaskExtensions.Unwrap`. https://msdn.microsoft.com/en-us/library/dd780917(v=vs.110).aspx
I'm not quite sure what you're looking for because there's no such thing as an "if loop", but you can escape a loop with the `break` statement.
If you're running it in a loop, put a bool outside the loop, set it default to true, if one of your if statements trigger set it to false. Make sure your if statements are formulated to see if the bool is true. //this bool is set outside the scope of your loop. if(1 == 1 &amp;&amp; someBoolean) { DoStuff(); someBoolean = false; } 
The simple solution is something like this. Just make sure that you always **break** when you want to exit the loop... or use **continue** if you want to skip the rest of the current iteration of the loop and start the next one while (true) { if (condition 1) { // do stuff here break; } else if (condition 2) { // do stuff here break; } } Just be careful because while(true) will force it into an infinite loop until you explicitly break out.
The best way to start a new project is to solve a problem. Find something in your life that can be solved with software and solve it.
Interesting... I almost always read/think of those as a single operation and the extra nesting makes any nesting around the statement harder to distinguish. I guess my reasoning is that it is never the nesting that I care about - it is what block my code is running in. I'd never look at the single line and miss that it is an if. And extra space and brackets make other code blocks more difficult to distinguish (if that makes any sense). I definitely see that being subjective though. Thanks for the insight! 
Depends on what type of learner you are, how much effort you put into it, and how much you want to learn. You could learn the basics and be able to build a simple app within a day or keep learning and be able to build an ASP.net website within a few weeks.
Don't worry mate, the way if-else works is that once that first condition is satisfied, it doesn't go to any further one. If-else is the same as saying if this, do one thing, if that do something else. You've already got your answer, you just need to actually think a little bit more closely about what a condition means. I apologize for not knowing C# (main reason I'm here) so this is generic: `if (a == 1) { pen = 15; } else { fifteen = "pen"; }` The else literally means any condition *but* a is equal to one. Does that make sense?
One of the biggest reasons for me to always add curly braces is to simply make the code more robust. When you omit the braces it's very easy to add a line of code which is supposed to be executed within the if-block, but is executed outside. This can easily happen with tools that perform automatic merges.
I know but my point was that you can choose to learn for a long time, and build all kinds of apps. You dont have to limit yourself 
Please stop, it hurts. You have no idea what you're talking about 
Personally, I use the curly braces just to keep the same style as when I do if/else statements. Just keeps consistent appearance and readability. However, in a handful of really short if clauses, I'll use the single line. Especially if I have it only hitting a method.
Text can often be significantly compressed, you could try gzipping the data. You could try your luck with a more compact serialization format such as protbuf, I'm sure there's a PHP lib for that as well. You could create incremental updates so that only changed data needs to be transmitted instead of the entire file.
That's a good solution, but I think I can use break instead.
Yeah, it works perfectly! Thanks!
From my experience, it doesn't seem to ignore them which is strange, but using break works. I know how the if else loop works, but thanks anyway!
ofc if you want to break the loop, if you want the loop to keep interating and maybe do other things this is a solution for that :)
Never used those, but as they are 'browser based' applications, I'm going to presume you want ASP.net
You want ASP.NET, which was the original C# web functionality that tried to make web development similar to desktop UIs, or ASP.NET MVC, which is more modern and analogous to Django or Ruby on Rails.
That's because you're using an "OR" - you're saying: if input doesn't equal "Hello Rocket" OR input doesn't equal "Hi Rocket". Do you see the issue? If you type "Hello Rocket" - that doesn't equal "Hi Rocket" so the check fails. If you type "Hi Rocket" then that doesn't equal "Hello Rocket" so it fails again. What you need is an AND so it checks them both: While(input != "Hello Rocket" &amp;&amp; input != "Hi Rocket") So there you're saying if the user doesn't type "Hello Rocket" AND they also don't type "Hi Rocket" - so in other words anything other than EITHER of these. Hope that makes sense....
I'm completely agreed for multi-line ifs, have you encountered a situation where this happened with a single line statement?
I'm gonna keep this thread saved for later too! Messing around I just got Rocket to offer to rename himself, and ask the user for a name. Lot of fun messing with this, I guess it's time to progress in the book!
Personally I'd throw braces in there. But I'd also say, pick a style tool and listen to it. If your whole team runs the same style tool, then you'll all quickly get used to it, and both read and write it naturally. Edit: No style tool I currently know of advocates option 1.
You could just put a break at the end of each case.
Oh I'm not talking about specifically MVC things to know, I'm looking that they might need to know about but would not learn about until working with other developers or at a new job. Like for example in no tutorials or example code I've downloaded have I seen anyone break up an MVC app into multiple projects (data, entities, repository, service, test, web, etc). The only reason I've seen this was because of a few very random projects I downloaded. I know why they designed it this way, but not sure if this is a common place thing to experience in the business world. Another example would be it seems like about 50% of the jobs I've seen or applied to require Azure experience as a major requirement. Up until about 2 weeks ago I just assumed Azure was just cloud based hosting but it turns out requires learning all sorts of additional technologies and concepts . These are just a few examples I can think of. But you know, stuff people wouldn't know they need to know about when taking on (or more specifically interviewing for) their first job involving C# that they might not have read or learned about.
Ah ok I got my terms mixed up between loop and conditional.
You on the right track. You learn more by trying and failing than just doing rote stuff. You might explore a String function next. The string function is string.Contains(). Reference: https://msdn.microsoft.com/en-us/library/dy85x1sa(v=vs.110).aspx So, you could check to see if the response contains the word 'Rocket' or 'rocket', instead of a whole phrase. That way your program is happy with "Hi Rocket" or "Hello Rocket" or "S'up Rocket" or anything (even "Shut up Rocket"). Since the variable receivedGreeting is a string, you can use the strings Contains method like this: receivedGreeting.Contains("Rocket"); Also, the reference takes you to Microsoft's documentation for C#. Nobody knows all of it. I've been at this for 25+ years, I still look up C# documentation on a daily basis. 
Here's an interesting post one of my colleagues released the other day https://jonhilton.net/2016/05/23/3-ways-to-keep-your-asp-net-mvc-controllers-thin/
Using Ajax to make requests to send and receive data to and from the controller. Tutorials are so simplistic they tend to show you only super simple pages with single flat records. The moment you want to do something interesting like filter a list based on the first controls selected value, you'll need to understand how to work with JavaScript types to c# (or whatever).
Ehm, first... Just call it MVC. Stop calling it ASP.NET, like, at all. Honest truth, I worked for years in ASP.NET then moved to SharePoint WebParts (the retarted cousin of ASP.NET). I was so frustrated when I left the SharePoint game... I retooled when I changed jobs and now I write code using EF6 and Web API 2.0 on the backend. And I use a JS binding framework on the frontend, throw in a little UI framework and some JQuery and its a pretty good patter. All that being said, the ASP in ASP.NET MVC means you're using controls... RUN LIKE HELL! controls are the devil
No, ASP.NET is tangential to GWT. If you want a C# equivalent, you must look at transpilers such as Bridge.NET .
Good to know. My plan is to start using Unity for some 2d games and applications but I figured it would be smarter to learn the language first independently of Unity.
&gt;Eh, kind of. It's majorly unfair to ask for "Azure" experience, because Azure is a huge platform for multiple technologies. Recruiters should try to be more specific. 2 of the contracts I have interviewed about where Azure experience was a major requirement they were migrating existing applications concepts to Azure services. I don't know much about Azure (way too much stuff to absorb ATM) but it seems like there are a ton of .net specific features you can utilize with azure (caching, queuing, etc.) which was why they were re-creating everything for an app that was only a year old. Basically they were rewriting their apps to take advantage of Azure. Maybe it's just because I'm in Seattle and end of year for Microsoft projects/divisions gearing up for their budges but I've been seeing so many jobs were Azure is a major requirement. It's too bad I'm too broke to pay for the services to play around with it. &gt;I hope you enjoy the official ASP.NET tutorials, as they're written by some friends of mine (Rick Anderson and Rachel Appel). I don't think I've seen their names around, but most of the time I'm so focused on the article and not who wrote it. Most of what I've read or watched has been great, but like everything in technology 90% of everything is easy to learn, research and find out about, and the last 10% takes up all your time and energy. For example services and repos I haven't found in any of the main tutorials, and in fact the only reason why I know about them is from learning about them in php Symfony2 lol. These are two examples of why I was looking for answers to my main question because they seem like things that are going to be commonly expected to be known about, yet... well not talked about in early or even mid level learning. 
Link requires signing in but depending on your code you could try using [codeshare](https://codeshare.io). As in if you can and want to put it outside of your version control.
4. Maybe 3.
very true, that was a bad example of what I was trying to illustrate.
Inline C# is generally code smell. It's not bad in and of itself, but a lot of it probably means you've got a problem. Generally speaking you should only be putting code in your view that is specifically related to displaying your content. Even in JS frameworks those is the general rule even if the entire code ends up in there when it actually runs in a browser. Using inline C# is not only an acceptable way of doing this it's in many cases the best way. Thing is though, if you have a lot of code controlling your view on as single page it's probably an indication that your design isn't as good as it should be.
It's probably the fastest way to do mutable grouping. Whether that's really what you need I can't say, depending on the use case maybe you'd be better off with a different design like a visitor pattern or something. For immutable collections, you could probably use the builtin `ToLookup()`. That only does the grouping when it's created though, so for a changing source it would have to be recreated all the time. Otherwise, if you really need this functionality that often, you could easily build a generic implementation based on a `Dictionary&lt;Type, List&lt;object&gt;&gt;` yourself. One thing to keep in mind is that a hash table won't support polymorphism the way `is T` does. `is T` will also return derived types and interfaces, while a naive hash table implementation would only return the exact type.
&gt; I'm really surprised there isn't a container type that is like what I described. That's because what you are doing is quite odd.
You're blocking the main thread, so the UI never gets redrawn and freezes until the method is completed. Use a [`Timer`](https://msdn.microsoft.com/en-us/library/system.windows.forms.timer%28v=vs.110%29.aspx) instead of `Thread.Sleep`.
When I try to add some of the .dlls by 'add reference' [this](http://i.imgur.com/GJSTSBL.png) error comes up. Which is probably why people told me to set the library up by adding to project. Do you know why?
FWIW in `foreach(FooType foo in objectList)` the `foo` will be `null` when item in list is not of `FooType`. ie. no exception is thrown there. edit: lies.
Nah, it'll throw an `InvalidCastException`.
https://www.reddit.com/r/reviewmycode
Further on this: If you use threading or tasks of any kind, you need to synchronise your UI updating logic (including updating objects that are used for databinding) to the UI thread. 
Is it being efficient though? You would be using more memory to store these lists, and you would be slower to insert.
Hmm. You're right. I distinctly remember we had an issue with this (we got nulls while iterating objects instead of whatever was expected there) and this behaviour was a completely unexpected one.
Much better idea, updated OP Thanks.
Thanks for the reply. Does it differ at all performance-wise?
I cross-posted there as well. Thanks for letting me know about it. I feel this is a good place to get some eyes on the code as well, so I'm going to leave the post here, too. If it's not allowed then feel free to let me know and I'll remove it.
Depends on your definition of efficiency. Lists, for instance, use arrays under the hood, which are fixed size Adding more items to the list beyond the size of the array causes it to resize which can be expensive. There are also issues with large array sizes - at certain points you cross thresholds that cause Out Of Memory exceptions, unless you enable certain GC options. So... perhaps what you think of as efficiency is not necessarily true for the .NET runtime.
objectList[N] as FooType will result in null, Casting will get typecast exceptions, but your example will probably result in a compiler exception, maybe. 
How you want to handle this is dependent on how you are using it. How are you loading it? What are you using it for? How long is it living? My initial reaction would be to sort it by type and then store the location of the first of each type. Read about data structures. 
A quick google of the error shows up this: http://stackoverflow.com/questions/3456758/a-reference-to-the-dll-could-not-be-added Seems to be your problem. The top answer will hopefully resolve it, but it's always worth reading the full thread to learn about the reasons and sorts of situations this can happen in :)
Having to add to *one* extra list vs. iterating through 100,000 elements each query? Like, I can't even begin to compare how much better that performance is. Adding to two lists is extremely fast compared to the latter.
I dont understand the need for such a huge list of objects to then be sorted by type. 
True. I just tested this. A list with 100,000 elements took up 5.3mb while 10 lists with 10,000 elements took up 5.8mb. Even so, I'd much rather trade .5mb for not having to *iterate through 100,000 elements each query*. :P And the size difference won't really change on the size of the object you're storing seeing you're essentially storing pointers to the object; not the actual data. 
Yes, but your use case is pretty specific. Most people dont need to traverse the collection searching for type, and if they did theyd implement their own collection.
The indentation of a second line helps you see that the code may take a different path at that point. This is more useful from a high level view, like if you're just skimming over the code without reading every line.
You could just create a structure that routes each incoming object its own sub-list based on its type. It seems like the index pattern might be something you'd want to look into: https://msdn.microsoft.com/en-us/library/dn589791.aspx
Just FWIW, there is also the LINQ extension function, OfType&lt;T&gt;(), that returns all the elements of the enumeration that are instances of T. So, var objects = new List&lt;object&gt; { DateTime.Now, new SqlCommand(), string.Empty }; objects.OfType&lt;string&gt;().ToList(); // List&lt;string&gt; containing just string.Empty objects.OfType&lt;DateTime&gt;().ToList(); // List&lt;DateTime&gt; containing just DateTime.Now objects.OfType&lt;SqlCommand&gt;().ToList(); This still require iterating over the entire collection, so may not be suitable for whatever it is you're doing. u/tweq's recommendation seems best based on your description, though.
Or just use async/await and Task.Delay.
Thanks! I was thinking about developing on my mac and running Windows on VM. What do you think about this approach ?
Could you provide links or examples on how to learn this?
Odd might not be the best word. It's uncommon. If you're storing objects of type Parent and only need to retrieve a specific subtype each time, a dictionary of collections is probably your best bet, as described above. I'd do &lt;Type, IEnumerable&lt;T&gt;&gt; instead of a List though
Why you did **not** use `HttpClient`? You had some specials need? Edit: Added the missing negation
I'm not /u/aGeordie, but I would say if you want to make your forms asynchronous, use [Ajax.BeginForm](https://msdn.microsoft.com/en-us/library/system.web.mvc.ajax.ajaxextensions.beginform\(v=vs.118\).aspx). If you want to asynchronously get/post data, use ASP.Net [Web API](http://www.asp.net/web-api) and something like jQuery.
Just google "Ajax to controller" :) As the other commenter said, would strongly recommend using jquery to make the request, it's a lot more concise and has multi browser support baked in.
I think when talking to other consumer focused developers the major talking point for AAD should be centered around it's support for OAuth allowing a single library (ADAL) and endpoint to be written allowing multiple common login providers (Google, Facebook, Microsoft, etc). The STS like behavior is more important to Enterprise devs
ToString offers the ability to do this: https://msdn.microsoft.com/en-us/library/fzeeb5cd(v=vs.110).aspx#Anchor_3
That's why I brought up IntercoolerJS it let's you eliminate the majority of all client side templating and let's you do it all with razor. The really interesting thing is you can send back html with script tags in it so you can trigger other actions. Just don't go over board with that or you won't have any idea what's doing what 
Wanting a specific subclass of a list of base classes **is** odd. Especially with that vast amount of data. I don't know your exact use case - it might be a good way to achieve what you want, it might not be. But it's definitely odd.
It allows for any type of IEnumerable to be used - List, array, whatever. More importantly, it provides a another experience when you use multithreading to process each. (If a foreach loop handles an enumerable built with yield returns, it would possibly speed up overall processing by utilizing more available resources) I don't think I'm describing it very well
You explained it well. Thanks for the info.
3 time.
Again, there's literally no other way to do this without iterating through every element. I'm not sure what you're trying to get here. Memory is extremely cheep compared to cpu cycles.
This appears to be Java, not C#. Either way: totalTextView.setText(Float.toString(total) + "%");
You can probably do something like that in a few weeks, but you should really start by boiling it down to smaller tasks and learning how to accomplish those. (If the first task you have is still too big or specific to find a useful answer, split it up some more, even if that means you wind up asking things like 'how do I declare an array in C#?') Having a defined task will make it a bit easier to get started.
Uh what? Foreach loops don't auto-parallelize things, and yield returns generate a regular IEnumerable implementation which is indistinguishable from a hand-written one (by behavior, anyway).
wow that's... insane I don't even think I'm advanced enough in c# to understand this
You can add folders to either the solution or an individual project. Right-click, select Add and look for something like "New Solution Folder" or "New Folder". Doing that doesn't necessarily create an actual folder in the file system, just in the "Solution Explorer" window in Visual Studio. You can create such a folder if you like and copy the DLLs into it if you like, then add them to the project/solution using Visual Studio. It depends on whether you want the DLLs to be "packaged" with your source code (and checked into whatever Version Control System you might be using) or not. As others have pointed out, only managed (i.e. .NET) dlls can be added to the project references. Also, I prefer to use NuGet if at all possible. If you add a NuGet package to you project the binaries will end up under a Packages folder and any references will be added automatically.
Actually, thinking it over, you were probably thinking about the fact that IEnumerables can be _lazy_ -- that is, when you begin to enumerate the sequence, all the values don't need to be available yet. This is useful for a couple of things: first, you can create infinite sequences without causing an infinite loop, because enumeration can terminate whenever the caller wishes. Second, it conserves memory by not forcing allocations for everything at once.
Wrong subreddit.
Removed: Rule 3. Maybe try /r/java instead?
So could this be used to make a UWA? Looking at the basic features you've got going, seems like it. Very exciting if so.
The error is 'program.verificationCheck:'not all code paths return a value
I am attempting to loop the logon 5 times if failed then force close (however I haven't added the 5 attempt limit yet).
Worked it out: http://pastebin.com/2JdVuN5r Thanks again!
Your button press blocks until it completes. Since it blocks, the GUI is frozen and nothing is updated. You need to starts a second thread either via the timer tick or creating your own method, that invokes label6 and updates it.
I'm trying to do this method but having a rough time figuring it out. I haven't learned anything with bools, but I understand a bool is a true or false statement, yes? Just not sure how to write this out. Wondering if I should continue in the book some more. I'm only 20 pages in after all.
A bool type can be true or false. A function can be defined to return a bool type, which means it returns true or false. So you could write a function that takes a string value as an argument, applies a test and the function returns true or false based on this test. The way you use the bool type is in branching. If(bool) {stuff} else {stuff} While(bool) {stuff} Do {stuff} until (bool) This will be the heart of your game logic. Where you see bool in the above statements, you must put an expression that resolves to a bool. A == 7 X &gt;= 15 Are explicit comparisons that resolve to a bool. Define a function: Bool myFunc(string arg) Call it like this If (myFunc(z)) {stuff} The stuff will happen if myFunc returns true, but it won't if it returns fales. Bools are the very heart of programming. 
Also make it a portable class library to make it available on other platforms :D
That's less work than it sounds - you can just make a new project in the solution and drag&amp;drop all the files from the original into it. Then close VS and rename the folder and edit the solution file. Will look at your code more in-depth tomorrow, too :)
HttpClient is a lot more compatible with today's REST style API communications protocols and favored over WebRequest for all of the various REST verb actions.
It would be pretty cool to string a couple of these together and essentially have a Jarvis
Yea i had the project private hahaha, removed the passwords...... but forgot to remove the email... hahahhahahaha thanks :P
F# is much more than just union types, though. If that's the only feature you need, and you're already familiar with C#, why change languages? Note that regular expressions and garbage collection are in a whole different level of complexity, and people using C++ nowadays are using them in a context where garbage collection may not be the best option (real time apps like games and such).
Thanks, I really appreciate it.
Here's some (not in order of complexity, just as I thought of them): * Generics (you've already got that one) * Generics restricted to certain types with the `where`keyword * Actions, Funcs, Expressions * Async/Await, Task Parallel Library, Concurrent Collections * Take a look at the IL (also called MSIL, CIL) that the compiler ultimately produces before being compiled to machine code. Maybe write something simple like a for loop in IL? You'll find it easier if you've used assembler before. * Design Patterns. Eg, Factory pattern. MVC, service layer/repository pattern. * Following on from design patterns, dependency injection/inversion of control (basically the same thing). * Interfaces (you have to use these for the above point) * Unit testing and mocking (again interfaces help here a lot) * Network programming. * Serialization/deserialization. * Creating, reading, manipulating XML. A couple of nice ideas: * A program to count all the words in a given piece of text and then displays how many times each word was used. Hint: Use `Dictionary&lt;string, int&gt;()` Bonus points if it allows the user to specify the file to read. (If using a console application read from args[] in the main method for this). * A program to download and weather forecasts, bonus points for automatically getting the users location based on IP address.
&gt;`genDocListView.Items.Add(genDocReader.GetString(0));` Passing a string to `Items.Add` creates a new item independently of `genDocTitleClmItem`.
I'd definitely not recommend using IEnumerable&lt;T&gt;, since it gives far too few guarantees. When storing things for later query, always use concrete types. In this case, use List&lt;T&gt;. There are several potential problems with a general IEnumerable&lt;T&gt;, among others that it can be lazy and might only support a single iteration. It's not to be used for these things.
You dont need a Constructor. You can initialize the lists right in in the field description like: private readonly IList&lt;Recipient&gt; Recipients = new List&lt;Recipient&gt;(); If you can define your fields as readonly. And try to use interfaces when possible. Its a good coding habit to develop. I would also suggest to define a lot of your string fields as "private const string". They never get changed so you should tell the developer right in the field description that these fields are constants. In the methods RecipientString() and BodyTextString() i would also use a StringBuilder to generate the string. If you dont use a StringBuilder for these operations you are basicly constantly allocating and discarding Strings wich can have a performance impact. One thing you can consider is keeping 3 seperate Lists To, Cc and Bcc recipient. And you fill these lists right in the AddRecipient Method. So you dont have the need to parse the Recipient with a where Select. You can try it out and use the solutions wich looks better to you. Besides that, great work. Keep it up!
https://help.github.com/articles/remove-sensitive-data/
Quote me on this: there is no way to query a list faster and use less cpu cycles than accessing an already made sub list. I would love to hear of something faster but I'm certain I won't. I would use the word 'impossible' but I'd rather not sound *too* sensational.
&gt;Have you also tested how much does it take to query the full list rather than the smaller lists? Why should I? It's not like I'm actually querying the smaller lists in the same sense that you query a spatial index; the lists are already made *before* query. I'm just returning them. So I'd assume the speed is the same as just returning any other kind of type - instant. &gt;Couple of extra things too: Linq has an extension method .OfType&lt;T&gt;() that only returns objects of type T in an enumerable. Right, but that still has to iterate through every element in the list. I do use it quite a lot on smaller lists though; it looks much better than having to use 'is' inside the foreach. &gt; Also in the code that you originally posted it would be better to use yield return instead of allocating a new list every time you need to enumerate objects of a specific type. You're probably right. I'll look into that, thanks.
Ahh, okay then :)
 var s = "This is a string"; foreach (char c in s) Console.Write((int)c + " "); Produces: 84 104 105 115 32 105 115 32 97 32 115 116 114 105 110 103 
Encoding.UTF8.GetBytes(string) will give you an array of Byte which you can iterate over. Conversely Encoding.UTF8.GetString(Byte[]) will give you a string for output.
I cant seem to get it on a portable class library, the `System.Securty.Cryptography`namespace is needed for OAuth, but isn't compatible. Any ideas?
Ok, I wrote the test. Feel free to find any optimizations/bugs. You could probably return a list without newing a new one up, and using dynamic is probably not necessary. Result: http://i.imgur.com/rkvWPQX.png Test: http://pastebin.com/tGLcnC1N I use SFML.System library for its Clock and Time classes witch is on NuGet if you care enough. I guess it isn't as big as difference as I thought it would be. Even so, I'd still like to stay as optimized as possible. And if I wrote a dynamic class that did this for me (using a dictionary&lt;Type, List&lt;&gt;&gt;) it wouldn't be that much of a hassle to implement. Thanks for helping me brainstorm. I find it fun and educational.
ModelBinding; There are a lot of tiny details to it that you just take for granted, but let you sometimes pull your hair out because you didnt know that specific thing. Latest example for me: http://www.martin-brennan.com/net-mvc-4-model-binding-null-on-post/
They are not deprecating it before RTM, though.
Maybe: https://github.com/AvaloniaUI/Avalonia
Well, MVC is giving you way more control, so I think you would do the same in a MVC project but with less effort. Also, its perfectly usable without any front-end library (but you would probably use at least some grid-system albeit installed via nuget). The razor views are really close to what gets rendered to the dom.
"my code doesn't work, please help" then sending the entire source with no errors or explanation, is probably one of the most infuriating things you can ask another programmer. Read this, it'll help you ask better questions: http://whathaveyoutried.com
You should probably post this under /r/Unity3D C# might be used to code unity, but as someone that knows most of the language spec, I still have no idea what is calling these parameter-less methods or using the public fields. The code is straightforward in what it does, but not what it is supposed to do...
Any word on performance/scalability of that webserver in .NET core? Is it a rebuilt Cassini? 
If you can only work on a well defined subset of ASCII characters, you should only allow those as input values; then you can safely rely on the byte value of the characters: The solution proposed from JakDrako just works, as the ``foreach`` statement implicitly calls [String.IEnumerable&lt;Char&gt;.GetEnumerator()](https://msdn.microsoft.com/de-de/library/bb341898.aspx), to enumerate over the string by a sequence of [Char](https://msdn.microsoft.com/de-de/library/system.char.aspx)-values (and therefor you get the same values for all characters within UTF-16 that are included in the ASCII-Encoding as in ASCII itsself) To ensure that only permitted characters are given as input, you could try to *encode* the given string with a custom, pedantic Encoder: var pedanticAsciiEncoder = Encoding.GetEncoding("ASCII", EncoderFallback.ExceptionFallback, DecoderFallback.ExceptionFallback); pedanticAsciiEncoder.GetBytes("This is a string"); &gt; {84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 115, 116, 114, 105, 110, 103} pedanticAsciiEncoder.GetBytes("\u2192 this will fail!"); // U2192: → (RIGHTWARDS ARROW) &gt; System.Text.EncoderFallbackException: Das Unicode-Zeichen \u2192 im Index 0 kann nicht in die angegebene Codepage übersetzt werden. bei System.Text.EncoderExceptionFallbackBuffer.Fallback(Char charUnknown, Int32 index) bei System.Text.EncoderFallbackBuffer.InternalFallback(Char ch, Char*&amp; chars) bei System.Text.ASCIIEncoding.GetByteCount(Char* chars, Int32 charCount, EncoderNLS encoder) bei System.Text.ASCIIEncoding.GetByteCount(String chars) bei System.Text.Encoding.GetBytes(String s) bei &lt;InteractiveExpressionClass&gt;.Host(Object&amp; $retval) bei Mono.CSharp.Evaluator.Evaluate(String input, Object&amp; result, Boolean&amp; result_set) bei CShell.ScriptingEngine.Evaluate(String input, String sourceFile) in c:\Users\Luke\Dev\GitHub\CShell\Src\CShellCore\ScriptingEngine.cs:Zeile 170. As you can see, the *coded character* \u2192 cannot be converted into ASCII-Encoding! If you are limited to ASCII letters, you can define them... var asciiLetters = new HashSet&lt;char&gt;(Enumerable.Range('A', 26).Select(c =&gt; (char)c) .Concat(Enumerable.Range('a', 26).Select(c =&gt; (char)c))) and then efficiently test each input character: s = "This is a string"; s.All(c =&gt; chars.Contains(c)) &gt; False (The spaces are not included right now, so the result is *false*) Only if the test is *true*, you will go on with your encrypting algo! 
shit sorry, completely slipped my mind. Pretty much, only the RedPressed bool changes when I press the four key. For some reason none of the other bools change when I press their associated keys. 
Removed: Rule 4. Consider asking again but include more information about what kind of projects you've worked on, what kind of C# skillset you have, what kind of project you're looking for, and maybe shore up your grammar. You said you searched many websites and GitHub a lot; what kind of projects did you find that didn't interest you? Including this information can help people know what kind of projects might be a good fit for you.
And this gets to the real discussion. Professionals doing gymnastics to work with code more in debt than the Greek government.
I think I can answer my own question here. IList is of course an *interface* and so IList&lt;Recipient&gt; is sorta like applying an interface of List type to Recipient, not unlike declaring a variable as a data type. While private readonly List&lt;Recipient&gt; works, using IList is more appropriate.
I decided to use XML Compression for that and it worked fine when I still had ~50mb of data in XML file. I was able to compress it to ~2mb or so so it was pretty managable, but now with the new data there's ~5.5mb after compression. That's a bit too much. I think I'll check JSON next, because it seems like it won't take that much space because the syntax is way simpler than XML. I assume that JSON can be gzipped easily and efficiently as well, right?
Thank you for that extensive reply. Good stuff for me to learn. &gt; private readonly IList&lt;Recipient&gt; Recipients = new List&lt;Recipient&gt;(); Would it be perhaps more succinctly to say we are creating an object and declaring with an interface of IList&lt;Recipient&gt;?
Your coworkers will probably do the most useful orientation for you. For example what versions of .net they are using and what subset of feautures they use. Desktop development is a lot different than server side service dev and web dev is different from non web dev. Obviously only your colleagues will be able to orient you. Ask for a list of stuff to get started on. Then find relevant docs and videos like Microsoft Virtual Academy.
thanks man, that makes everything a lot simpler and cleaner :) means alot
Yes. You can say you are creating an object that implements the interface IList&lt;Recipient&gt;. After the creation you dont have any more information on it than that it implements this interface. So all your code can only depend on this interface. You reduce your dependcy on one concrete class to just the interface.
they're returning to csproj
If I have to sell you on asp.net core I would start by saying its the future of C# web dev. Learn it or be stuck in the 90s.
I work remotely so I do not really meet my colleagues and they are kind of busy (also different timezone) and there is not much time to chat about "non work related" stuff anyway
This kind of thing is easily carried out via email. Please provide me with a list of technologies inside .net that are used or not used at YOURCOMPANY. Web Forms Y/N? ASP.NET MVC Y/N? WPF Y/N? WinForms Y/N? What third party libraries are standard? NEWTONSOFT JSON? OTHERS? What unit test framework is preferred? And so on. Email, friend. Use it. Microsoft Virtual Academy is also fantastic, go watch general talks there. The build 2016 talks on MSDN Channel 9 are fantastic. https://mva.microsoft.com/ https://channel9.msdn.com/events/build/2016 https://channel9.msdn.com/Events/Build/2016/B889 &lt;-- fabulous C# talk.
Hey thanks!
If you ever need to do one of those things you're not going to know how. What happens the first time you need to make a change to the way someone configured the container? 
People are going to stop pushing docker? It's only becoming more popular from what I'm seeing.
Docker is just another layer of unnecessary abstraction. 
So -4 because you have a pattern that you like vs. the fact that this article is mostly just advocating separation of concern to clean up the controllers?
Probably never. My major issue with Docker has always been security updates, you build a container and it doesn't get security updates unless you either A) schedule updates within the container, which defeats the point or B) constantly monitor base images and manually rebuild. Red Hat's OpenShift is the only Docker tooling I've found that adequately solves this, which is great - but I'm still not going to use Docker for everything (though with OpenShift it's a pretty nice isolation engine to provide a lightweight PaaS).
Unicode is not at all an encoding like ASCII, UTF-8, UTF-16, CP1252, ISO-8859-1, and so on! It is a concept. You can test a string for validity like this: s.All(char.IsLetterOrDigit) 
Pretty sure he was just suggesting a 4th way of simplifying Controllers after the 3 that were in the article.
I was sceptical at first too, but the story with distributed container services finally "clicked" - the fact that you can have a cluster of generic hosts with nothing preinstalled, and then just deploy your services there, packaged as Docker containers, is really a game-changer.
 If making concrete classes is really The Root of All Evil hat it's better to take that up with the moq developers, or if you don't yourself mock classes, then the post wasn't for you. Have you looked at Typemock? I've used it at a previous job and didn't like it because of it's humongous system footprint, BUT it sets itself apart from other mocking frameworks in that it allows mocking of concretes, and a whole pile of other things like statics, event handlers, privates, pretty much whatever you want. If as a contractor you find yourself maintaining ridiculous monolithic codebases and you're needing to implement hacky helpers like in your article, Typemock could really help out. Only problem could be it's licence cost, as you'll need to get that by whoever's paying you!
It would make sense in that situation but is seems that in many instances people are creating containers that do little to nothing that are never updated or properly configured. 
The Unicode "concept" (standard) defines a number of encodings such as UTF-8, UTF-16, UTF-32. These are commonly called unicode encodings.
You could try also asking on /r/Unity3D.
&gt; I don't know why you suddenly threw out the subitems and started creating multiple ListViewItems instead. Because it was not clear to me what Items and Subitems actually meant. Your post helped make it click into place, and the code below works. You have been a tremendous help, thanks a lot :-) while (genDocReader.Read()) { string abc = genDocReader.GetString(0); string def = genDocReader.GetString(1); ListViewItem genDocTitleClmItem = new ListViewItem(abc); genDocTitleClmItem.SubItems.Add(def); genDocListView.Items.Add(genDocTitleClmItem); }
What you get from above are the bytes that represent a **string** in C# above all. A string object is surely what you will get from most APIs as input values. So if you do not need to check something at the input or output layer, you will always strive torwards using strings and not plain bytes as parameter.
The second version will not even compile.
Is the site down?
MVC has no secrets. Just undocumented features. 
Well, you could write your own logic to save the relevant data in the database. Enumerate the `Points`, convert the brush color to a string, etc. `PointCollection` also has a `ToString()` and `Parse()` method. If you don't care that much about having a queryable database schema, you could also use [`XamlWriter`](https://msdn.microsoft.com/en-us/library/system.windows.markup.xamlwriter.aspx)/`XamlReader` to serialize objects (either the entire `Polygon`, or just the `PointCollection` and `Brush`) to XML and save that as strings in the database. 
Thanks, although frankly I'm unsure about what to do with the AppConfig variable once I have it. 
Sure, if you set up the required schema and entities, you can do whatever you want.
&gt; B) constantly monitor base images and manually rebuild. Not really an issue with automated builds, right?
Tineye.com has a commercial API for their reverse image search.
https://msdn.microsoft.com/en-us/library/system.windows.datatemplate.datatype.aspx#Anchor_1
Would it have broken rule three had he said "free C# programmer"?
This is not recommended, but if you put this: Application.DoEvents(); right after setting the label text, it will probably work.
Even in the .NET framework: System.Encoding.Unicode (which is UTF-16). 
I've seen quiet some fizz buzzez, but this one is hilarious. hired immediately. Extend it with an implementation of IEnumerable yielding endlessly to show yield and oo concepts for bonus.
At school, I would type the following into the MSDOS prompt on their IBM PCs and walk away: prompt Press Enter to continue... It still works in the Windows Command Prompt window. I almost forgot about that. Memory lane, strolling down...
This is so awesome, thank you for this.
What, like this? static IEnumerable&lt;ulong&gt; AllTheIntegers(ulong start = 0) { while (true) { unchecked { yield return start++; } } } var loopContents = new List&lt;Tuple&lt;Func&lt;ulong, bool&gt;, Action&lt;ulong&gt;&gt;&gt; { Tuple.Create&lt;Func&lt;ulong, bool&gt;, Action&lt;ulong&gt;&gt;(i =&gt; i % 15 == 0, i =&gt; Console.WriteLine("FizzBuzz")), Tuple.Create&lt;Func&lt;ulong, bool&gt;, Action&lt;ulong&gt;&gt;(i =&gt; i % 3 == 0, i =&gt; Console.WriteLine("Fizz")), Tuple.Create&lt;Func&lt;ulong, bool&gt;, Action&lt;ulong&gt;&gt;(i =&gt; i % 5 == 0, i =&gt; Console.WriteLine("Buzz")), Tuple.Create&lt;Func&lt;ulong, bool&gt;, Action&lt;ulong&gt;&gt;(i =&gt; true, i =&gt; Console.WriteLine(i)), }; foreach (var f in AllTheIntegers().Skip(1).Take(100).Select(i =&gt; new Action(() =&gt; loopContents.Select(t =&gt; new { p = t.Item1, f = t.Item2, i }).First(x =&gt; x.p(x.i)).f(i)))) { f(); } Adding the default branch the the dictionary eliminated the excuse for the ?. operator. Alas. Could be trivially made awful-er by making loopContents a literal in the middle of the LINQ chain, instead of an intermediate variable. I enjoy torturing LINQ for my personal amusement (and am flattered, but not looking to change jobs), but I wouldn't want to see this sort of abomination in code I was trying to maintain without a pretty good excuse.
 Console.OutputEncoding = Encoding.Unicode; var r = new Random(); l10: Console.Write((char)(9585 + r.Next(2))); goto l10; ---- Or less evil: Console.OutputEncoding = Encoding.Unicode; var r = new Random(); while(true) Console.Write((char)(9585 + r.Next(2)));
Does this list really need to be in memory at all times? If not you could use a document store to persist these various types in a flexible manner (IE: MongoDB). Otherwise tweq's response is the way to go. 
A quick Google search and I found this: [IncandescentAPI](http://incandescent.xyz/pricing/), however, they claim 15-20 second wait times for results. Personally I'd go with something like http://stackoverflow.com/questions/12997597/google-reverse-image-search-api
I use Xamarin (alpha build) on a Mac on a daily basis. Coupled with VS code, its a pretty decent combination. I'd start with a simple console based WebAPI self host and go from there.
Probably. I wouldn't classify the post as being directly related to C#; it's really about looking for work. Honestly, I should have removed it under Rule 1 too.
Try creating a dotnetfiddle and linking to that. This formatting is jacked
ORM is not going to help you much. You will be saving either strings or raw bytes. There is nothing in ORM that would help you with your specific problem.
 Random r = new Random(); FTFY.
Not something they teach you at school but something you probably learn to do while at school: how to Google the right terms to get the answer you need.
Being able to learn on their own.
In my opinion how to came up with good/practical class structures for the problem they want to solve. I've seen many examples of weird data structures that lead to horribly complex code bases which could have been enormously simplified by using better representations of the problem's domain
Of course you need a name for the **internal** representation within programming languages with a unicode aware datatype (like string in .NET, or string in Java or string in Python3, or...)! And of course the **internal** representation needs a concrete encoding, which is UTF-16 within .NET (and also in the JVM). This is more likly an *alias* for the chosen encoding - in theory it is possible to change the encoding without API breaks. Other languages like C++ (which does not offer an standardized unicode aware string datatype at all - one can put everything in ``std::string`` 😒) or [Rust](https://doc.rust-lang.org/book/strings.html) have chosen different concepts. But ``System.Encoding.Unicode`` is just a name within a well defined technology - one can clearly understand the meaning within this context. Instead when you talk about *unicode* as an encoding in general, it is clearly the wrong term! Last but not least you have to bring in the history of the JVM! The first drafts of unicode explicitly considered UTF-16 equal to unicode itself! And at the times Java was developed, that was the up to date *meaning* and *technology* all at once.
I'm not saying ORM is no-go. I'm saying ORM is not going to help you much in your specific case compared to plain SQL. The problems with getting the data from and to WPF objects is same in both.
TIL about Mutation Testing. I'm not only deficient in adequate unit tests and functional tests but I'm apparently now letting people down by not testing my tests. FML. 
they're a helpful bunch of dudes in there. particularly Scratch, who is an ornery old man I enjoy
That's funny. You can't even break out of it with a CTR-C either, you have to close the window. Huh.
Wrote my first program on a Commodore 64, a D&amp;D character generator. I didn't have a drive to save it though and eventually had to turn off the computer :(
How are you serializing them? Most serialization libraries have mechanisms to support such classes in some way. The ones in the framework like `BinaryFormatter` and `DataContractSerializer` won't call any constructors at all, or will use the `ISerializable` constructor pattern. Most of them can call private constructors, so even if a constructor is required it doesn't have to be publicly exposed.
Well, there is a way to create an object without calling its constructor: [GetUninitializedObject()](https://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatterservices.getuninitializedobject.aspx). General purpose serializers use techniques such as creating uninitialized objects like this and then using something called [reflection](https://msdn.microsoft.com/en-us/library/mt656691.aspx) to populate the fields manually. That being said, this is a method used to serve a general-purpose serializer/deserializer. You may prefer to be more explicit about your serialization; one example would be to make your serializable objects implement an interface that allows you to call `Serialize` and `Deserialize`. This way, for example, you can create 'blank' objects with a default constructor and then call `Deserialize()` on them, passing in the serialization context (e.g. the data the object would need to construct itself back from serialized state).
Good info, nice write up!
The idea of making writing an interface and building objects up from templates sounds neater than having some intermediary class like my DataItem. I think it's a bit outside of my scope of ability at the moment especially as I've never had to read about or use Reflection yet, but I'll keep this info in mind. Thanks a lot!
&gt; I think I'd skip AVL trees, unless you're bored. I think you should understand how AVL trees, RB trees and other balanced trees work on a theory level, for example: AVL tree: maintains a balance factor (left tree height - right tree height) of -1, 0 or 1 by rotating nodes that become unbalanced after additions and removals But I don't think it is important to know which case you want a LR rotation vs a LL or RR or RL... You should be able to write from memory several algorithms including insertion sort, quick sort, maybe merge sort or heap sort, binary search and tree traversals. 
Work through [Project Euler](https://projecteuler.net/)
I suspect the vast majority of programmers will never implement an AVL tree, and possibly never use one, outside a data structures class. Good to know they exist, I guess, but I think they're pretty skippable. Sorting algorithms are useful to study as a way to grasp analysis of algorithms, but I don't think I would expect any programmer not currently working with them to be able to write most of those algorithms from memory. God knows I couldn't, aside from probably a binary, bubble and probably insertion sort. 99% of the time, you'll write the comparison function, and let the framework figure out which algorithm to use, and that will be good enough.
&gt; I'm talking about basic stuff I wish people who came to work here knew which way around the OK and Cancel buttons are arranged in Windows. Its a personal peeve, but how can a developer not know that?
How to use StackOverflow and DuckDuckGo too.
Nah, Resharper isn't necessary at all. It certainly has some nice features and there were times when developing without it could be a chore, but many of them have since been integrated into VS 2015, and together with the free Refactoring Essentials extension it provides much of what the average user uses Resharper for. 
I use Log4Net frequently and in many projects, and I'm a big fan. I've also used MSEL Logging, but overall prefer Log4net (I find the setup to be somewhat simpler). There are likely other players in the space, but as far as I know, log4net is probably the most-used.
[Serilog](https://serilog.net) is another good option and one that we're currently moving most stuff over to
What are your main motivators to move to Serilog? Pros/Cons?
Damn I am old. I find resharper annoying at best. I tried it for a few days but always wound up on some goose chase in an unsolved forum post about performance issues. Plus I think I screwed up the templates trying to fix it manually lol. Do a lot of others use it because I dont' think anyone I have worked with does. They have at points but always discard it.
VS Code does have an extension system, but they work completely differently and are incompatible with VS-proper.
By write from memory here I don't mean be able to implement them picture perfect, rather simply to be able to write some gist like: void InsertSort(int[] array) { for(int i = 1; i &lt; array.Length; i++) var el = array[i]; var j = i-1; while(j&gt;=0 &amp;&amp; array[j]&gt;el) { array[j+1] = array[j]; j--; } array[j+1] = el; } } void QuickSort(int[] array, int low, int high) { if(high - low &lt; 2) { return; } var p = Partition(array, low, high); QuickSort(array, low, p); QuickSort(array, p+1, high); } int Partition(int[] array, int low, int high) { //any number of ways to partition the array into a low side and high side //return index p such that // low &lt;= i &lt;= p &lt;= j &lt;= high and // array[i] &lt;= array[p] &lt;= array[j] } Because if I was interviewing you, I might disguise these methods mildly and ask you about their complexity or ask you to provide one or more of them and then discuss various optimizations like: void HybridSort(int[] array) { QuickSortImpl(array, 0, array.Length); InsertSort(array); } void QuickSortImpl(int[] array, int low, int high) { while(high - low &gt; 10) { var p = Partition(array, low, high); QuickSortImpl(array, low, p); low = p+1; } } (I have specifically been asked as an interview question to provide insertion sort and then quick sort. Then we considered complexity of these, hand optimized out a tail call, switched to insert sort when the array gets small enough and discussed the complexity of the result. All this was done in a 30 minute phone interview with a collaborative google doc open.)
PluralSight has loads of tutorials, although requires a monthly fee. Sign up to [Visual Studio Dev Essentials](https://www.visualstudio.com/en-us/products/visual-studio-dev-essentials-vs.aspx) and you get 6 month subscription to Pluralsight for free.
I'm in the same boat as you-- starting up a big enterprise project and looking for logging frameworks. I'm traditionally an Enterprise Library guy but I'm very strongly considering recommending Serilog this time around. The difference is structured logging. Enterprise Library's Semantic Logging Application Block (SLAB) does this, but Serilog is newer and cleaner.
I've been using `XmlSerializer` for years and that's pretty much the way I do it. There's some real benefits to separating your data serialization concerns and your application domain/logic concerns: you can switch serialization mediums easily, you can tweak your serialization classes to match a particular schema without affecting your application logic, you don't have to make design concessions for your application objects (in this case, you don't have to sacrifice immutability), you can pick and choose what properties you serialize and how you do so, it also gives you some flexibility when handling data model changes/upgrades to future versions of your system (you can setup a process to read old files, or "upgrade" old content to newer content by parsing/changing/adding the data. For example, you used to have a `bool` to represent a state, but later refactored it to be an `enum`; your serialization routines can do the conversion of the old booleans to the equivalent enum value) That said, I do try to have a linked naming. For example, instead of `DataItem` here which sounds a bit generic and ambiguious, I'd probably have `SerializableCoord`.
That's encouraging, thanks for taking the time to lay out the benefits of this method. I'll definitely rename my class
https://msdn.microsoft.com/en-us/library/system.string.split%28v=vs.110%29.aspx or https://msdn.microsoft.com/en-us/library/hs600312%28v=vs.110%29.aspx https://msdn.microsoft.com/en-us/library/system.int32.tryparse%28v=vs.110%29.aspx
No problem! If you do it this way and find you need to switch to some other medium (performance, client needs, compatibility) or even support multiple serialization formats simultaneously, or just want to experiment with other serialization methods, it's super trivial to do since you've already separated your serialization mechanisms and your core application.
Ah, thanks for clarifying 
If you use the resulting line numbers to stock a HashSet&lt;int&gt;, you could probably use some LINQ to filter things out on the other end: var lineNumbers = ParseLineNumbers(text); foreach (var line in lines.Where((x, i) =&gt; lineNumbers.Contains(i))) { // do things } (A HashSet&lt;int&gt; because it's at least nominally faster for checking contents than a list would be.)
A big plus for log4net is the same configurations and ideas of it are used all over the place in log4j and the other languages it has been ported to.
I've never once had a ReSharper refactor option break code or change functionality...
Have you tried literally anything? I'm sure you weren't given this homework out of the blue.
Ive spent the past 2 hours, trying to do this. And no, we havent been told how to encrypt/decrypt. i have been watching Youtube Tuts, But none of the ones i saw had anything to do with files (just input text in a textbox and then encrypt/decrypt it)
Absolutely not! I used VS without R# for my first couple of years of .NET development and got a licence recently from work, I'm still not sure if I'm even a fan. There are a few cool features, but I've disabled a fair bit of its functionality and a lot of suggestions. VS is still a great IDE even without it.
Ok so you know how to encrypt/decrypt, now just look up how to read the contents of a file and write to a file.
This isn't really a step by step, is it? This is a snippet from your udemy course used as advertising. I was also expecting not working from a Microsoft project template as a lot of stuff is in it that you really don't need or want lots of the time.
I also wonder what NinjaTurtleMutation uses for its own mutation testing. I hope they don't just talk the talk.
It is not that it breaks them as in completely but renames stuff. Changes indents and other miscellaneous stuff. Working on multiple projects this is a big mess up because the resharper changes almost every line of code. So when you are trying to see what was actually changed between builds you might as well throw your hands up. Not to mention merging w. those who don't use it or have a different configuration.
No kidding. Where do these companies exist where they have business users and management who grace them with the time and resources to build out robust and elaborate testing frameworks?
I used to think that VS was mince without R#, but since my work arent going to pay for a copy I just configured VS to actu like it has most of the features I am used to having. I've almost mapped all the decent features of R# to my own keyboard short cuts. The only thing I miss from it is the Add Reference and Adjust namespaces.
I would personally replace "data structures" with "class structures". In C#, you'll spend a ton of time creating class hierarchies to properly model your data, and that's absolutely critical. But you'll never write a LinkedList. Which isn't to say you shouldn't know what a LinkedList is and some information about it; I'm merely saying that in the vast majority of cases someone asks you to solve a problem and your go-to response is to reinvent the wheel, you've done something seriously wrong. :)
I seem to remember that Convert.ToInt32() is not preferred in all cases, but for the life of me I can't remember why. :P So I would probably use: iKeyValue = (int)cTest;
Awesome!
Well. If I'm not completely nuts, my answer is: you can't. But you Can react on the users input and use some form of regex to define a mini-language for your users to use. Also: off the top of my head, you might be able to do some tricks with reflection, but I would not recommend it unless you're 100% sure you know what you are doing for a bunch of reasons (Google is a friend).
That's even better. I didn't know what a regex was until now lol
There's no built-in way ala JavaScript's [`eval()`](http://www.w3schools.com/jsref/jsref_eval.asp) method. There are some more complicated ways by using the compiler as a service but that's probably more trouble than what it's worth for your situation. Perhaps more applicable for you are some libraries that compile or interpret expressions that are similar to C# and execute them. [NCalc](https://ncalc.codeplex.com/) and [Flee](https://flee.codeplex.com/) are two that come to mind. With those, you can register variable names and values (in this case, "apples" and "oranges") so that when the user supplies their expression, you can lookup (or assign) what values those variables currently hold.
You might consider CodeDom http://www.codingvision.net/miscellaneous/c-compile-at-runtime Or integrating a scripting language like IronPython or one of managed Lua libraries. Another way could be to use an embedded browser control and pass the code as JS and get back the result.
How is one `while` less elegant than a label and `goto`?
You can use codedom, you can use roslyn, or you can write a quick parser and executor that uses reflection
3 time or 3 UTC time?
I prefer NLog because it's easier to setup and has better performance
He wanted a list of things one should know coming out of college or after their first year as a programmer. Those are mostly things I learned in 4 years of college or the first 12 months as a professional programmer thereafter. (Biggest difference being that my alma mater taught these things across a batch of languages: C++, Java, Scheme, C, Perl, and SQL were all things I picked up from coursework. As well as some stuff about networks and the web, file systems, databases, UML, and some UI/UX ruminations. I know they're using Haskell, now, instead of Scheme, though.) I've used big-O style analysis a bit on an informal basis to judge the relative cost of two different algorithms a few times. Not everyday, but it's definitely been a good tool to have in the toolbox the last 10-15 years. I don't know that it's useful to know, say, little-o or big-theta, etc, but just having a rough idea of the magnitude of the number of operations you're going to be executing is useful.
&gt; How is Log4Net the default? I can only speak from experience. When I talk to clients, Log4Net is the only one they've all heard of and had experience with. &gt; Hopefully Log4Net has diverged API-wise to take advantage of modern .NET strengths In my opinion, it hasn't. 
I think it's valuable to *have studied* algorithms. It provides a basis for analysing them down the road.
Maybe something like this: void Main() { var userFormula = "apples + oranges * bananas"; var userVars = new List&lt;string&gt; { "apples = 10", "oranges = 30", "bananas = 15" }; // extract values to dictionary var dic = new Dictionary&lt;string, string&gt;(); foreach (var uv in userVars) { var tokens = uv.Split('='); dic.Add(tokens[0].Trim(), tokens[1].Trim()); } // replace names in formula with values from dictionary var toks = userFormula.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries); for (int i = 0; i &lt; toks.Length; ++i) if (dic.ContainsKey(toks[i])) toks[i] = dic[toks[i]]; // rebuild the formula with the replaced values var userFormulaNew = String.Join(" ", toks); // cheat a bit and use the .Compute method of DataTable to do the final calculation var dt = new DataTable(); var result = dt.Compute(userFormulaNew, null); // print the results foreach (var kvp in dic) Console.WriteLine($"{kvp.Key} = {kvp.Value}"); Console.WriteLine($"{userFormula} = {result}"); } Prints: apples = 10 oranges = 30 bananas = 15 apples + oranges * bananas = 460
Give [this](https://discord.gg/0np62rq4o8FVOWCA) one a go.
Where is the data that you want to use to build your JSON coming from? If it's an object you're trying to serialize into JSON it's pretty simple with JSON.NET: https://dotnetfiddle.net/E0DjdX
That worked, thanks.
Basically, I'll have a web forms page where a user can enter some info into a text box. I'll probably use a regex and / or some sort of input checking to make sure it's acceptable input, then generate the JSON according to their spec. So I'll be getting this info from my users, they'll be passing it into my web app, then I'll be sending the JSON over to my vendor. Does this sound safe enough? My users aren't hackers, but i still have trust issues. Can I pass the variable sorta like how one does with SQL and parameters?
You could store those validated inputs in a model and then serialize that into your JSON.
Well this seems simple enough, thanks.
This doesn't answer your question, but I would highly advise learning MVVM (Model-View-ViewModel) along with WPF. I don't have any specific recommendations for learning the two together, but I know there is a lot out there.
I really might have over thought how to do this. Will test this out. TY. will update
I've also just moved from NLog to serilog. Besides a little nuget issue I'm very happy. I'm planning to store the logs in Elasticsearch (however, via FileBeats not the serilog sink). So structured logging is the obvious choice. I don't need logstash or grok filters at all.
Feed them into Elasticsearch without grok filters, which are needed to create structured json data from the typical "line"-log formats.
Yep that was it i can't believe i had like 14 lines of code for each button that did nothing that i wanted it to. Thank you
Totally ... use Json.NET (http://www.newtonsoft.com/json) or Jil. Probably Json.NET for your use case. In on project I'm using Jil as it's slightly faster, but normally you don't notice. Json.Net is kind of the gold-standard for .NET.
I have actually learned a bit on MVMM and am planning on using it. Thank you! The organization of MVMM is something I can definitely get behind. Thank you! 
It should login fine, ill have to check that out now :P I do know that if the user details are incorrect or 2 factor auth is enable it will throw a 403, i was aiming on catching that error today :) Glad you like it though haha
Why let them enter the information in an unstructured way in one text box? Setup proper form fields to take input to satisfy the requirements of your vendor, bind that to a model, process, serialize, send 
I like to use http://www.csscript.net/ for that. Here's how I use it: https://github.com/docevaad/Chain/blob/master/Tortuga.Chain/Tortuga.Chain.CompiledMaterializers.source/shared/CompiledMaterializers.cs
i do have arithmetic. i didnt show it cause there's no point. What i want to know is how much 1e308 of 1e308 of 1e308 is. 
What?
The code that I linked to doesn't implement arithmetic, that's what I'm talking about. "1e308 of 1e308 of 1e308" is not a value because "of" is not an operation. Do you mean 1e308 * 1e308 * 1e308? That's 1e924. (924 = 308 + 308 + 308.) You asked: "If anyone know a better way to code values greater than 1e308 please share." I don't think your method is going to work well, so I'm suggesting a different way of representing large numbers.
googlefoo is a skill that takes time. The right words, phrases etc. 
Somethign to be congnizant for most nosql DBs is that they are not ACID compliant, so any dependency on the certainty of the writes is something to consider. Yes, reddis can be used in this fashion, but probably not ideal. 
If you have an array of 10000 shorts, you could move 0-9 in each position and expand out to as large a number as you'd like. I only said short as it'll use less memory than an int but really a byte is probably a better option.
The maxValue of doubleChain.first is 1e308 doubleChain.second is 1e308 doubleChain.third is 1e308. doubleChain.second is 1 = 1e308 of first. doubleChain.third is 1 = 1e308 of second So what is the maximum value if I have 1e308 of doubleChain.third?
Yes, obviously 'of' is not an operation. If I knew what operation it was, I wouldn't be asking this question. It works pretty well, as far as I'm concerned. I'm making an Idle game, so number only gets really large, so precision(down to unit) doesn't really matter once you reach high numbers. What I'm trying to get is for my math to be accurate for the ending digits after e.
It sounds like you want more help with the math. "of" generally refers to multiplication (just as "is" is equality, "and" is addition, etc). So you are looking for 1.7e308 * 1.7e308 * 1.7e308 = 1.7 * 10^308 * 1.7 * 10^308 * 1.7 * 10^308 = 1.7 * 1.7 * 1.7 * 10^308 * 10^308 * 10^308 = 1.7^3 * 10^(308 + 308 + 308) = 4.913 * 10^924 = 4.913e924 But really, you don't want to do this. Use BigRational, like someone else mentioned. 
Thanks for explaining it. Unfortunately, I'm using .NET 3.5, so I can't use BigInteger or BigRational. 
&gt; Just create models and serialize them to JSON. Maybe. While I agree that stringbuilders are a bad idea, I often generate my JSON using JObject/JArray and the `dynamic` keyword.
&gt; I often generate my JSON using JObject/JArray and the dynamic keyword. Why? What are the advantages? The disadvantages are that the contract is not documented and performance is worse.
Considering what I tried to do here (mimmick the original comodore version as much as possible). of-course, normally you won't do that :)
Yes, you are correct. I've chosen the wrong word
Why HashSet and not array of int? Im controlling the text box for digits only, "," and "-" but I have the additional issue of "3,,,,4----,,,5". What would be the best way of solving this? I believe it is checking the last character in the string... 
A HashSet ensures that each integer can only be inserted once. This means that overlapping ranges or multiple occurences of the same number aren't a problem. Also, ~~it sorts the integers from lowest to highest when you're enumerating its values.~~ Just checked and I'm wrong, a HashSet is not necessarily sorted. Use a SortedSet instead if you actually want to ensure that your values are sorted lowest to highest. For invalid input you will have to do some validation: * In the for-loop, before doing anything else, check `if(string.IsNullOrWhiteSpace(str))` and if so, `continue;` * Once you have identified a range and split the string, check `if(range.Length == 2)` (meaning it has an upper and lower bound, nothing else) and `continue;` otherwise. * Use `int.TryParse()` to ensure you're actually parsing valid strings to integers. A good tutorial on this method can be found [here](http://www.dotnetperls.com/parse).
Found [this](http://web.archive.org/web/20130430190551/http://www.danrigsby.com/blog/index.php/2008/03/07/xmlserializer-vs-datacontractserializer-serialization-in-wcf/) blog post summing up Xmlserializer vs DataContractSerializer really useful.
I used BigInteger, but it doesn't work well for numbers greater than 1e10000. Computations takes too long to completion. around 1-3 seconds per compute. I'm making a idle game, so need to compute arithmetic within 1 frame (30-60 fps).
Thank you man, it worked
I don't think elegant means what you think it means
Am I reading this right? You have to change a registry key? Doesnt this require admin rights? The program shouldnt need to be installed or need admin rights.
No worries. Glad I could help.
Yes, but you don't need admin rights to change HKEY_CURRENT_USER. Another option is to use a different browser control that wraps WebKit or Gecko, they can be distributed with the app independently from the OS and tend to have better/more extensive APIs.
You have not one but **three** huge security problems demonstrated in your code. &gt;`SqlDataAdapter adp = new SqlDataAdapter("Select Count(*) From Login where Username='" + textBox1.Text + "' and Password ='" + textBox2.Text + "'", con);` 1) You are wide open to a SQL Injection attack. Use [Prepared Statements](http://stackoverflow.com/a/9241305/1324345) instead 2) You're apparently storing passwords in plain text. ----- &gt;`AttachDbFilename=C:\Users\marti\onedrive\dokument\visual studio 2015\Projects\Database Testurr\Database Testurr\Logindatabase.mdf` 3) Your login database is apparently being stored on public cloud storage with minimal security applied to it.
We use a [shunting yard algorithm](https://en.wikipedia.org/wiki/Shunting-yard_algorithm) to achieve this the product I work on.
This sounds interesting.
Thank you for your indepth information. I researched it parellel aswell. And found a little informationen on how to change it ( it's still not working but i'm on it ) I took the webkit into consideration. Alternatively I will open the standard browser ( there is for the most part no interaction inbetween the website ( apart from the initial call with a find ) and the application ). For anyone needing a little script to change it I found this. http://stackoverflow.com/questions/17922308/use-latest-version-of-ie-in-webbrowser-control
You could look at something along the lines of MEF or Managed Extensibility Framework. This is what is used for many of the visual studio add ins and extensions. 
In retrospect, I should really have included a bunch of other things, like exposure to assembly programming and processor design, manual memory allocation (malloc() and free(), etc), programming language design and interpretation, closures, continuations, continuation passing style, lambda calculus, and maybe a survey of compilers (parsing, lexing, etc). I also suspect that exposure to other programming languages (especially, other *styles* of programming language: C# is an imperative, object-oriented language with first-class functions and garbage collection in the family of Algol derivatives--a LISP or ML derivative might be a good thing to check out, as would C) is pretty valuable, just for the exposure to different ways of solving problems.
I'll check it out, thank you! 
syntax is correct, no period is needed.
Is it a managed (.net) dll or unmanaged? If it is managed you can use assembly.loadfrom (or load. I forget and it's been a few months since I've needed it).
You can also use a third-party [math parser](http://www.bestcode.com/html/math_parser_for_dot_net.html). If it's just for mathematical equations.
i thought he wanted to get the value of a variable in an object called apples as a numeric and add to the variable oranges, like an immediate compiler 
 string input = textBox2.Text; string[] numbers = input.Split(','); //HashSet&lt;int&gt; set = new HashSet&lt;int&gt;(); SortedSet&lt;int&gt; set = new SortedSet&lt;int&gt;(); foreach (string str in numbers) { if (string.IsNullOrWhiteSpace(str)) { if (str.Contains("-")) { string[] range = str.Split('-'); if (range.Length == 2) { int lower = int.Parse(range[0]); if (lower &lt; 1) { lower = 1; } int upper = int.Parse(range[1]); if (upper &gt; 65535) { upper = 65535; } for (int i = lower; i &lt;= upper; i++) { set.Add(i); } } } else { set.Add(int.Parse(str)); } } } foreach (int i in set) { Console.Write(i + ","); } I should not need "int.TryParse()" because I am allowing digits, "-". and "," in the text box. For compatability reasons, right now, any number that is below 1, gets rounded up to 1 and any number above 65536 get rounded to 65535. Im aware ushort exists but I rather limit it by code than by datatype.
Referenced assemblies are only loaded once a type contained in them is accessed. As long as they're not used, they won't be loaded and it doesn't matter if they're missing. If you structure your application in a way where the optional types are interacted with through base types/interfaces and only directly accessed in isolated types or methods, you can safely attempt to use referenced components and catch the `FileNotFoundException` in case the DLL is missing.
You could look into AutoFac and have it scan all assemblies in a directory and then do DI to get all instances of a class. Or you could implement the interface and have to concrete implementations be in the scanned dll.
Productivity Power Tools is handy as well. At work I have OzCode which is pretty neat, but I probably wouldn't pay for it for personal use.
I can think of two more edge cases that might lead to errors of the top of my head: * The input `"2-"` will lead to an error because the range "2-" will split into two substrings (hence passing the `Length == 2` check), but the second substring will be empty. Same goes for inputs like `"-"`, `"-1"` etc.. This is why I would suggest using `int.TryParse()`. * The input `"5-2"` will not add any numbers to the SortedSet because when the upper bound is lower than the lower bound, `i &lt;= upper` will never be true.
You could create a plugin framework for your application perhaps? https://msdn.microsoft.com/en-us/library/ms972962.aspx 
Use the fascade pattern and you can interchange whichever logging framework you like (with relative ease), trying many out until you settle with one you like. I personally use Log4net, but there's no specific reason for this. I just tried it one day, it satisfies my requirements and I haven't changed since. I was looking into nlog for a time.
I'm guessing the pattern matching construct is pre-compiled into an if -then-else using the "is" keyword. I cannot find any documentation to support this theory but I know a lot of the newer language (C# 3+) features are just that, simply syntactic sugar. I believe you can currently compile 7.0 features using roslyn. You could ildasm and compare the IL for both constructs. 
As I understand it, it's a shortcut for a pattern sort of like if (someObject is someType) { var x = (someType) someObject; // expressions using x } So, the big value (again, as I understand it, based on [this](https://www.reddit.com/r/csharp/comments/4ctoy7/exploring_pattern_matching_in_c/) and [this](https://www.reddit.com/r/csharp/comments/4hh6sj/pattern_matching_features_severely_cut_for_c7/)) right now is that it handles the cast and assignment to the local variable for you. That reduces the possibility of errors (e. g. checking for is TypeA, then casting to TypeB), and, hopefully, increases readability. So, it's not huge, but it does clean up something like this: if (obj is Foo) { DoFooThings((Foo) obj); } else if (obj is Bar) { DoBarThings((Bar) obj); } else if (obj is Baz) { DoBazThings((Baz) obj); } else { DoNormalThings(obj); } to something like if (obj is Foo f) { DoFooThings(f); } else if (obj is Bar b) { DoBarThings(b); } else if (obj is Baz z) { DoBazThings(z); } else { DoNormalThings(obj); } or switch (obj) { case Foo f: DoFooThings(f); break; case Bar b: DoBarThings(b); break; case Baz z: DoBazThings(z); break; case *: DoNormalThings(obj); break; } This isn't a *huge* improvement, which is why there was marked disappointment when the fancier pattern matching features were pulled. But, it's not *nothing*, either.
Sounds like what you are after is remote debugging? https://msdn.microsoft.com/en-us/library/y7f5zaaa.aspx
Awesome, ill check that out, thanks!!
Seems like that would work.
would this work as well? if (integer.Next(1, 6) == 2)
Never initialize a random method often - if you application runs this code fast enough, you could create the Random with the same seed (the Random will be initialized using the current time as a seed) - same seed will result a same random number. Initialize your Random in the constructor, where it will be created once. Then it will generate a random number :) 
This might work: var middleEnumerator = clientMiddleNames.GetEnumerator(); var lastEnumerator = clientLastNames.GetEnumerator(); var results = new List&lt;string&gt;(); foreach (var firstName in clientFirstNames) { // Advanced the other enumerators. middleEnumerator.MoveNext(); lastEnumerator.MoveNext(); // Combine them together into the new list. results.Add(string.Join(" ", firstName, middleEnumerator.Current, lastEnumerator.Current)); } return results.ToArray(); The biggest thing it avoids is the excessive list constructor, if you don't need it. I'm sure there might be further optimization, but that's just the initial one I thought of. That said, this is a good example of poor design. You have three lists that have to have the same length being passed in. It would be *much* better if you had a single object list (`Person`) with `FirstName`, `MiddleName`, and `LastName` properties. It is far safer to code, easier to comprehend, and doesn't require juggling like this.
Well, mathematically it works out. There are 5 potential numbers, and you're comparing to one eventuality, so that's a 1/5 = 20% probability. I think it's more idiomatic to do it like this: double desiredProbability = 0.20; return desiredProbability &lt; rng.NextDouble(); Random.NextDouble() returns a value that is 0.0 &lt;= n &lt; 1.0. So it's natural to express percentage probabilities by generating a random double and seeing if it's less than the desired probability. 20% of doubles between 0.0 and 1.0 are less than 0.20, so this still returns true 20% of the time. I'll reiterate what /u/SirButcher says. The documentation recommends only initializing one Random instance. It has some overhead, and it's not worth initializing multiple times. 
I'm missing the part when it explains how this solves any of the issues mentioned at the start of the article. Isn't the main complexity creating the scripts in the first place? EF migrations does a lot more than just run some scripts.
If the input collections aren't lists, the code has to create a new List&lt;T&gt;. That's at best an O(n) copy you'll do up to three times. And, at the end, that .ToArray() is redundant. Not to mention it's logically confusing to reuse a list named 'firstNames' to represent full names. If you have to work with IEnumerable&lt;T&gt;, and you don't know for sure if it'll always be List&lt;T&gt;, I'd expect it to be all-around better to use the enumerators on each collection directly. Here's a better attempt: public string[] BuildFullNameArray(IEnumerable&lt;string&gt; clientFirstNames, IEnumerable&lt;string&gt; clientMiddleNames, IEnumerable&lt;string&gt; clientLastNames) { var outputSize = clientFirstNames.Count(); var output = new string[outputSize]; using (var firstNamesEnumerator = clientFirstNames.GetEnumerator()) using (var middleNamesEnumerator = clientMiddleNames.GetEnumerator()) using (var lastNamesEnumerator = clientLastNames.GetEnumerator()) { int index = 0; while (firstNamesEnumerator.MoveNext() &amp;&amp; middleNamesEnumerator.MoveNext() &amp;&amp; lastNamesEnumerator.MoveNext()) { output[index] = (string.Format("{0} {1} {2}", firstNamesEnumerator.Current, middleNamesEnumerator.Current, lastNamesEnumerator.Current)); index++; } } return output; } Count() will be O(n) for many collections, but if the inputs have optimized it it'll be faster. The end result is not having to deal with the potential re-allocations of List&lt;T&gt; and final copy to an array. I'd wager this is all-around better than trying to cast to List&lt;T&gt; at the start, unless you know your inputs are almost always List&lt;T&gt;. 
Some of this might be overkill or not appropriate for your use case, YMMV // Choose a sensible default capacity if desired // Could use a normal static field if you're sure the method is never called concurrently private static readonly ThreadLocal&lt;List&lt;string&gt;&gt; TempNameList = new ThreadLocal&lt;List&lt;string&gt;&gt;(() =&gt; new List&lt;string&gt;(20)); public static string[] BuildFullNameArray2( IEnumerable&lt;string&gt; clientFirstNames, IEnumerable&lt;string&gt; clientMiddleNames, IEnumerable&lt;string&gt; clientLastNames) { int? count = (clientFirstNames as ICollection&lt;string&gt;)?.Count ?? (clientMiddleNames as ICollection&lt;string&gt;)?.Count ?? // this only makes sense if some of them might be collections and some might not (clientLastNames as ICollection&lt;string&gt;)?.Count; using (var firstEnumerator = clientFirstNames.GetEnumerator()) using (var middleEnumerator = clientMiddleNames.GetEnumerator()) using (var lastEnumerator = clientLastNames.GetEnumerator()) { if (count != null) { string[] results = new string[(int)count]; for (int i = 0; i &lt; count; i++) { if (!firstEnumerator.MoveNext() || !middleEnumerator.MoveNext() || !lastEnumerator.MoveNext()) throw new ArgumentException("IEnumerables are of different length"); // String.Format is slow, it needs to parse the format string first, and deal with arbitrary replacements and formats results[i] = firstEnumerator.Current + " " + middleEnumerator.Current + " " + lastEnumerator.Current; } return results; } else { List&lt;string&gt; results = TempNameList.Value; while (firstEnumerator.MoveNext()) { // technically this ignores cases where clientFirstNames is shorter, dunno if that matters if (!middleEnumerator.MoveNext() || !lastEnumerator.MoveNext()) throw new ArgumentException("IEnumerables are of different length"); results.Add(firstEnumerator.Current + " " + middleEnumerator.Current + " " + lastEnumerator.Current); } var array = results.ToArray(); results.Clear(); return array(); } } }
Try to use zip function https://msdn.microsoft.com/en-us/library/dd267698(v=vs.100).aspx . I am not sure if it will be faster but definitely will be more elegant :) EDIT: On another hand you can split arrays in chunks and run each chunk in separate thread.
They most likely won't heed your warnings. 
The style can also be located in app.xaml.
&gt; Random.NextDouble() returns a value between 0.0 and 1.0, inclusive Exclusive of 1.0 actually.
So it is. Apparently: &gt; The actual upper bound of the random number returned by this method is 0.99999999999999978 The methodology still holds up, it's probably not wise to try and implement a probability with an equality comparison against a double anyway.
IMO, part of the complexity comes from EF spitting out SQL. For it to work correctly all the time, you have to be able to predict what EF will spit out. That level of abstraction is what is creating the overhead. The whole concept of automagically mapping between objects and relational seems completely unnatural to me. Having an ORM implicitly dictates you have one true model. I just don't do that anymore in an application. Either way, I'm sure we won't agree on ORM's, but I find that with a small piece of code, which has little cost of ownership, you can get very far without having the overhead.
I don't agree that the complexity comes from creating the scripts. Adding and removing some columns, moving some data around is mostly what you do with a database migration. There are more complex situations to handle, but those aren't the main use case, and either way, a complex migration with EF is going to be even more complex. IMO, SQL is a very good DSL for that. I'd rather learn SQL and be able to do write it directly in a script than having to learn EF so I can trick into spitting out what is needed. EF code migrations are fine as long as things go as planned without you having to look at it, which in my experience is only for simple use cases. As soon as you have more complex migrations, you have to really know EF inside out to get it to do what you need. And that would mean you're using EF, maybe in some other application you're using nHibernate or another ORM. In general I just find that ORM are a leaky abstraction. You can't just 'forget' that you're dealing with relational data, even though it tries to make you think that.
I took a quick look through my company's main solution and here are some of our most common: * **[Bundle transformer.Less](http://bundletransformer.codeplex.com/)** * Good if you use ASP.NET bundles and LESS * **[Entity Framework](https://msdn.microsoft.com/en-us/data/ef)** * Needs no introduction * **[Lucene.Net](http://lucenenet.apache.org/)** * If you need to do searching * **[MaterialDesignThemes/MaterialDesingColors](https://github.com/ButchersBoy/MaterialDesignInXamlToolkit) * Great for making WPF apps look nice * **[Newtonsoft.Json](http://www.newtonsoft.com/json)** * A must for JSON serialization/deserialization * **[Nlog](http://nlog-project.org/)** * Log everything * **[Topshelf](https://github.com/Topshelf/Topshelf)** * Easy way to write Windows Services * **[Unity/Unity.Mvc](http://unity.codeplex.com/)** * Dependancy injection
`IDisposable` is part of the `IEnumerator&lt;T&gt;` contract and thus should be followed. In practice the typical enumerators for `List&lt;T&gt;` and so on and most custom implementations just have an empty `Dispose` method, but some implementations do use it, e.g. - `System.IO` related enumerators will dispose underlying file handles - Enumerators generated for `yield return` methods will dispose `IDisposable` objects used in the method which could be anything - LINQ uses it for some optimizations
Newtonsoft.json is basically a life saver. I would entrust my child to it.
Great list! I'd just like to add that NLog is my logging library of choice, but ANY good logging library is essential for any project, big or small. Never roll your own, never be tempted to "just" Console or File Write line to keep it simple, use a logging framework and concentrate on your app. 
I know. But I couldn't not put it out there. 
+1 for Topshelf. I write a lot of Windows services so it is a must have. Edit: Seriously though. I do a lot of background processing, file processing, tcp listening, scheduled tasks sort of things. Nothing has changed my workflow more than Topshelf. It completely changes how we debug and deliver.
Autofac NPOI 
autofac, simpleinjector, wiring it up by hand are all cool by me. none would be "must have" in my book
&gt; Nothing nunit3 or xunit provides is really that special. Parallel test execution. We have a huge suite of tests that would take upwards of 10 minutes to complete. One minute with xunit parallelization and I assume nunit 3 would show similar gains. I haven't used a built in test runner besides the console since TestDriven.net and currently rely on nCrunch or the R# runner depending on the project so I haven't really looked at their runners. Picking a testing library on their runner is like picking a testing library based on their assertions. Kinda throwing out something really good because of something that isn't it's main purpose.
For desktop (WPF, specifically): * Fody to package everything into a single .exe * MVVM Light * Log4Net * Material Design XAML Toolkit - my favorite WPF UI theme
You can split the tests across multiple assemblies for nearly the same end result. &gt;Picking a testing library on their runner is like picking a testing library based on their assertions. Kinda throwing out something really good because of something that isn't it's main purpose. I don't agree in the slightest. Literally the only thing that matters is the runner. 
If you're lucky and it's an independent text object rather than being baked into the underlying image, it should be doable. You can use iTextSharp to enumerate layers and content objects and remove the offending ones. You may want to attempt this manually with a PDF editing tool beforehand, though. As for legality, you may be violating ExpertPDF's license agreement (not that I've read it). Whether you care about that is up to you, I suppose.
Here's a [sample of one I just ran through his process](http://www.filedropper.com/-8587372565487187483)
You cannot restart a `Task`. You need to create a new one every time. Also, your design is very strange in general. `taskTrackAnime` might take up to 5 minutes to be canceled? And `taskMain` doesn't seem to ever be restarted in case it returns? I'm not really following whats going on there. This might be simplified and less error-prone using `async`/ `await` instead
taskMain, yea I actually noticed that a few minutes ago and fixed it haha. Ok I think I'll just scrap this and try asynchronous/await.
Precisely my thoughts as well. There's no way it can be that easily removed. Going to see if I have the budget to purchase it, hopefully that would remove the watermark.
It'll depend some on whether the enumerables are really reified or not. If they are, your solution is probably close enough for the differences to be negligible. If they're not, you're going to be slower than something making marginally smart use of yield return or something smartly using Enumerable.Zip() (as u/joojski observed). Your implementation also has a rather nasty side-effect: when clientFirstNames is a List of strings, your method is changing its contents. Edit: if the enumerable are reified, not *un*reified. Got turned around there.
Haha thanks, again I appreciate it.
How to change oil in a car and be able to write said directions down that make sense to someone that doesn't know how to.
It's a bad question. First, it's actually an implementation detail of the runtime; it can change and is not part of a C# specification. Secondly, you shouldn't really care about such implementation details. More info here: http://stackoverflow.com/questions/21562158/net-function-variables-stored-on-heap-or-stack-in-address-space Be sure to read all the comments in that StackOverflow post too.
I don't really see any problem with rolling your own solution if it works - it's not hard to get right. I have one I've been using for over 6 years (https://github.com/jdaigle/Horton), which is older than many. But regardless of your tool, there are two principals I continue to argue: 1) don't tie your database schema and migrations to any particular ORM or application framework and 2) don't use or try to abstract DDL SQL statements into yet-another DSL.
Well yeah I basically meant before I move to start learning xamarin.
Meh, no need to worry about logging at all until you actually want to use it. Just use your own interface throughout your app and plug in whatever you want later.
Dapper (I see no point in using EF unless you're doing code first which has been very rare in the corporate/enterprise world), Autofac, Automapper, and Newtonsoft.JSON are usually my go to on every project.
Just jump into WPF, learning it will be way more beneficial. You might see WinForms in the wild in companies maintaining legacy software but new projects typically don't use it (the only reason I can think of is making a quick prototype).
I don't think you will gain anything by working on windows forms, better to just jump to WPF instead. But you should know what WPF have a much steeper learning curve and you will scratch your head both one and twice over some XAML that just won't work. 
&gt; The whole concept of automagically mapping between objects and relational seems completely unnatural to me. But you have to make the transition from database table to object anyhow don't you? After you've queried your data, and you want your (object oriented I hope) code to do something with it, you have to convert it to an object... I don't understand how this is unnatural then (but I must admit that if I look among my colleagues, you're definitely not alone in your opinion. It's an ongoing battle)
&gt; •The input "2-" will lead to an error because the range "2-" will split into two substrings (hence passing the Length == 2 check), but the second substring will be empty. Same goes for inputs like "-", "-1" etc.. This is why I would suggest using int.TryParse(). Well, for this case, I could tryparse and if a exception is thrown, I just get the first part and add one (in your example of 2-, it would be converted to 2-3 automatically). &gt; The input "5-2" will not add any numbers to the SortedSet because when the upper bound is lower than the lower bound, i &lt;= upper will never be true. For this, if (lower &gt; upper) { int aux; aux = upper; upper = lower; lower = aux; } And fuck it. Not worth my time, IMO.
What does your code look like?
i don't have any specific code for it. I just have the form property acceptButton set to the send button and the dialogresult of the send button to ok. No code just Win Form property box.
Are you talking about when you're hitting the enter key on a form? If so, it sounds like your focus is still set on the other button. The standard behaviour is that the form's accept button will only fire if the currently focused control doesn't respond to an enter key (such as another button or a multi-line textbox with AcceptsReturn set to true). Edit, possible cludge if this is what you're experiencing: private void button1_Click(object sender, EventArgs e) { System.Diagnostics.Debug.WriteLine("Button1"); button2.Focus(); } 
What's wrong with English?
Looking for the Excel portion. Rest of the code works as intented (there is more code above and below this)
For real now or what xD
There's a difference between mapping an entire database schema into a complete object model and putting the result of a SQL query into an object. An ORM usually means your read and write model are the same, that's already something I don't do. I usually don't even have a true model. Writes are just done ad-hoc through commands/events and reads are directly parsed into readmodels to display on screen. While you can do that with an ORM, you'd need to configure it heavily to be able to do that. I wrote a series of articles about that, resulting in a sample app (https://www.kenneth-truyers.net/2014/11/20/simple-code-a-sample-app/) You can have a look at that to see exactly what I mean.
EDIT: I misunderstood the problem here. ~~Is this a WinForm application? If so, did you copy &amp; paste the button? Most likely when you copied the button it copied the event handler method of the original button. Check the Click event of the send button and make sure it's connected to the Send button event handler method (click the button in Design Mode, then look at the property window (the lightning bolt icon/Event tab), and look for what 'Click' is set to.~~
There is my solution: if (str.Contains("-")) { string[] range = str.Split('-'); if (range.Length == 2) { int lower; if (int.TryParse(range[0], out lower) == false) { range[0] = "1"; lower = int.Parse(range[0]); } else { lower = int.Parse(range[0]); } if (lower &lt; 1) { lower = 1; } int upper; if (int.TryParse(range[1], out upper) == false) { upper = lower + 1; } else { upper = int.Parse(range[1]); } if (upper &gt; 65535) { upper = 65535; } if (lower &gt; upper) { int aux; aux = upper; upper = lower; lower = aux; } for (int i = lower; i &lt;= upper; i++) { set.Add(i); } } }
Yes WinForm application. I did copy and paste this button. I will have to check this tomorrow. I fried my brain for the night. 
Even Microsofts recommends it: Random integer = new Random((int) DateTime.Now.Ticks &amp; 0x0000FFFF); You are not generating random numbers at all.
So... Where would I put the file name? I don't quite get what's going on right there...
So that will grab the folder that your exe is running in. You can then use Path.Combine to put your folder on the end... var basePath = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase); var tune = System.IO.Path.Combine(basePath, @"Sounds\DarudeSandstorm.wav"); 
Right, got it! Thank you!!
For something simpler, I've made [this](http://github.com/Banane9/SharpPlugins) a while ago :)
If you're not into MVVM yet and wish to be, you can pick up Orchestra.Shells.MahApps, which is a MahApps metro shell over the Catel MVVM framework.
I think this is really poor advice. Chances are you're not going to want to use logging until you actually need to trace through a log file - by which point it could already be too late. Getting into the habit of doing good logging from the beginning is just a good practice to have.
thanks man
The code does not work as intended. 1. 'textbox2.enabled=true' is an assignment not a comparison. Its value is always true. 2. This is a matter of style and clarity. 3. The same. 4. change the compiler options so you do get a warning. You shouldn't have changed your original question by removing the offending code. That is offending to the person who tries to help you. 
Is this an elaborate attempt at crowdsourcing your homework?
Are you daft? I told you I'm not a student. I'm just looking for source code. If you're in doubt about my honesty you can check out my post history. 
I have been using MahApps but I must say Material Design looks really sweet. 
Removed: Rule 4. I suppose technically, the post was made with effort, but certainly a lot of wasted effort to basically ask "do this vaguely described thing for me, kthxbai".
The issue is with "Select top (1) * From [CLIENTES$] ORDER BY id desc" not with anything else. As a matter of fact, I have no other code posted in OP.
I don't think I appropriately expressed my point which was, Development of the rest of the application should never be held up by service implementations. Use your own interface and then you don't depend on XYZ developer's logger implementation choice.
Thank you! These ideas are great! Do you have some resources for these subjects?
I can't say if it's one of the best, but I know that I get a lot of recruiters reaching out for .NET positions here in Cincinnati, OH, and occasionally even for positions up in Columbus.
I personally found this to be the biggest pro in the beginning. Resharper will show you things, that you didn't know were possible. After that honeymoon phase, it tends to be very useful to do tedious things like making sure it renames all variables, or renames related variables (like in a get/setter scenario where you use a private field).
Demand in Milwaukee is pretty good, and I love it here (been here my entire life). However, don't expect the crazy income levels that you see on the coasts...cost of living isn't high enough to justify that.
Here is what I was using as a reference: http://stackoverflow.com/questions/14387970/how-to-add-mouse-click-event-on-push-pins-in-bing-map-metro-app-using-c-sharp-an Looks like you are right. There's different versions of Bing Maps which was throwing me off. By any chance, would you know a way to make it work in WPF, or will I have to learn UWP now?
Removed: Rule 6.
&gt; I want to be able to declare some variable so that it will have to have a Type of B or C (if its A, B or C, thats fine too). If it "will have to have a Type of B or C" then saying "if it's A... that's fine too" is a contradiction. What design are you really going for? Would making A abstract solve this for you?
Kansas City checking in. I get hit up by headhunters all the time.
huh, I missed that. I had assumed Tapped was the only way to go forward. Thanks!
This is very clearly what he needs. However, implementing BigFloat is hard. The arithmetic itself isn't terribly hard (though harder than you might think), assuming you do something like store values in Int32 and then calculate with Int64 to avoid overflow. But converting to and from floating point representation gets pretty tricky, especially when the values are large. Without these conversions, just having the numbers isn't terribly useful.
I live in Lexington, KY and get hit up by Cinci recruiters daily.
Call me an idiot but why is this called *native*? I have been working with .NET since 2003, when I hear native I think C++.
I've found that the best way to keep your skills up is to make smallish apps in your spare time. I actually learned C# by taking an old VB To-Do List program I wrote and rewriting it in C#, and just doing something like that helped a lot.
Compile time safety aside, what about having some get/set that does the type checking?
[JSON Web Token](https://en.wikipedia.org/wiki/JSON_Web_Token) I think.
I find I often try and shoehorn queues and stacks in, but later realize that a list does everything I need. 90% of the data structures I use are lists, with sparing uses of dictionaries and hashtables.
I made this in linqpad, but here are a couple of solutions. However, I think the problem offers opportunity for a refactoring into a person class when you first retrieve the names. string[] fnames = {"Bob", "Jane", "Jill"}; string[] mNames = {"A", "B", "C"}; string[] lnames = {"Dole", "Janesson", "Jilliot"}; var result = fnames .Zip(mNames, (first, middle) =&gt; new string[] {first, middle}) // pair first and second .Zip(lnames, (firstMiddle, last) =&gt; new string[] {firstMiddle[0], firstMiddle[1], last}) // "pair" first, second, and third .Select(arr =&gt; string.Join(" ", arr.Where(a =&gt; !string.IsNullOrWhiteSpace(a)))); // all this zipping and array creating isn't very good and could be done with recursion and lists or some other more readable solution // OR // these are coming from somewhere. Can they be made into people objects when they are grabbed, before being passed into this method? class Person { /* ... */ public string FullName =&gt; string.Join(" ", new string[] {FirstName, MiddleName, LastName}.Where(name =&gt; !string.IsNullOrWhiteSpace(name))); } // I'm doing this in linqpad, so forgive the inline function // this is your function, though if you use a person class, you really wouldn't need it // this signature means "Create a function that takes an IEnumerable&lt;Person&gt; and returns // a string[] named BuildFullNameArray and name the parameter "source"". Func&lt;IEnumerable&lt;Person&gt;, string[]&gt; BuildFullNameArray = (source) =&gt; { source.Select(p =&gt; p.FullName).ToArray(); }; Edit: in terms of speed, the fastest way is to do what you did, but change your parameters from IEnumerable&lt;string&gt; to an IList&lt;string&gt;, which will allow lists and arrays to be passed in. It tells the consumer that it will evaluate the whole sequence and prevents you from having to consume the entire enumerations with .ToArray() But, really, we're talking about less than a ms in time difference in speed. Concern yourself more with readability.
Pls checkout this link http://stackoverflow.com/questions/4068414/how-to-capture-screen-to-be-video-using-c-sharp-net
Array is always my first thought; if its going to grow or shrink, i'll switch to a list. Like you, i've never found a need for a dictionary (but that may be because the dictionary in another language i use is very buggy). I don't think its built-in to c#, but a linked list can be very useful.
okay that worked. I can't put this into my code tho. This was for an assignment. but this is good for future reference. I think that if he sees that i at least tried to put the sendBtn set as the AcceptButton property that that will be good enough. None of that code that is in that solution we have gone over yet. Thank you for your time and help
i tried the answers there but didn't work
Strangely enough, I've never heard of Catel, and I was researching an MVVM framework for our next .NET WPF project. The ones that came up most often were MVVM Light, Caliburn.Micro and Prism. Now that I searched for Catel specifically, I did find more info about it, and it does seem heavier than Micro. How's the documentation for it? That's the only problem I have with Caliburn.Micro. Very sparse documentation - you end up having to scour stack overflow for answers to even most basic questions.
The documentation is correct at best; some pages aren't updated to the latest breaking version yet. But you can scour stackoverflow; that's the recommended way of asking Catel questions per its main developer, which usually answers quite fast. About the basics, I'd assume most of it is covered and up-to-date by the doc, but I started a while ago myself on an already existing and pretty messed up project. Which is another good point for Catel: it's pretty modular. You don't have to use everything to make it work. For example, the [Getting Started page](https://catelproject.atlassian.net/wiki/display/CTL/Getting+started+with+WPF) links to the [Model creation](https://catelproject.atlassian.net/wiki/display/CTL/Creating+the+models), which is something I haven't even looked at yet (well, now I did, but you get the idea :p). ------ edit: before considering Catel, you have to know it's going the full-async way as per its 4.0 version, which is something I wasn't used to and am still struggling to make work to this day.
Dictionaries and Hashsets are optimized for lookup, they're **O(1)** for a Lookup/Contains. In other words: use sets if you have a collection where you're retrieving specific keys/values, or you're seeing if items already exist in that collection. The downside of most set based collections is that they can have slower iterators, and the ordering tends to be random (items don't pop out in the same order they went in). List and Arrays are great for iterating. They maintain their order and they're fast to iterate through, but they're **O(N)** if you try to do a Contains, or if you're trying to do a lookup other than by Index.
I think it's too late for me now. Already committed a significant amount of time to learning and using Caliburn in one of smaller pilot projects. But if I end up running into brick walls with it, I'll definitely give Catel a try. I want something more feature-rich than MVVM Light, and not as heavy as Prism, which is why I went with Caliburn to begin with.
They're both nice, and you can mix both if you want. There's a mashup project in the Material Design XAML source code.
Tulsa, OK job postings are littered with .NET positions. Not sure how it compares to the rest of the country, but the demand seems high to me.
Agreed. Stack vs. heap is, by now, a trivia question. Good for party tricks. You know, when you're at a party populated entirely by C# programmers. As an aside, knowing implementation details and taking advantage of them can really screw you. I worked at Microsoft testing the Windows.Forms library a long time ago, back during the switch from .NET 1.1 -&gt; .NET 2.0. One of the things I had to test was backward compatibility. There was a popular code obfuscation application (whose name I can't remember) that used .NET 1.1's internal details (such as internal tables and structures) to obfuscate the MSIL that was generated. Well guess what? .NET 2.0 got rid of all of that. All of it -- poof! -- gone. The application was completely unusable in .NET 2.0 to the point where it couldn't even be tested. I have no idea what became of the company; I imagine they either had to rewrite everything from the ground up or fold. Implementation details are fun, but don't get too worked up by them. You run the risk of being too smart by half and when the rug is yanked out from under you you're completely up a creek. (I... think that's enough cliches for one sentence.)
I know this is off topic, and I apologize, but you did you get your class names preformatted? I can't figure it out with Reddit's markdown, and I prefer that particular method of formatting. I saw you can preformat code with four spaces, but I can't figure out how to do it inline.
Since development usually consists of displaying lists of data, it makes sense that you would use Lists and Arrays.
Thanks!
~~Three~~ Four of my "go to" dependencies for unit/other testing that haven't yet been mentioned are.. * Moq * FluentAssertions * MyTested.WebApi * CompareNETObjects
There are no 'must haves'. However, what *I* find useful for my projects are: log4net - lightweight logging. Json.Net - Json Parsing RestSharp - Handles calling rest services because I'm a lazy **** Telerik Controls (Web) - because fuck handling a lot of data manually Entity Framework 
https://msdn.microsoft.com/en-us/library/ty67wk28(v=vs.100).aspx (you have the syntax slightly wrong)
[Linked Lists very much exist in C#.](https://msdn.microsoft.com/en-us/library/he2s3bh7.aspx) Although I don't often use them because the interface (wisely, I suppose) abstracts away the internals. I much prefer the C++ std::linked_list implementation, because that's much more like what I'm used to working with.
var i = 30 / x - Random(0,30); First there is a less than ZERO change that x will evaluate to 0; and you might be a C# newbie but divide by 0 is fucking kryptonite to a CPU. You need to break those two statements up... var (no I don't mean fucking car..) j = x - Random(0,30); j = x == 0 ? 1 : x; // check it -- make sure not 0 var i = 30 / j; // I guess it's cool now. No herps... i = i &lt; 0 ? 0 : i; // what's wrong with little numbers they's numbers too...(pissssst... They ain't real) damnn.... 
OP - this is the correct answer. Ignore all others. Better still: public int Fn(int i)=&gt;(i&lt;0)?0:i;
Thanks... I'm becoming dyslexic 
Definitely `List` and `Dictionary` here. I use `HashSe` where I see we are only checking against a collection for uniqueness. Once saved five or so minutes because I switched a `List` out for a `HashSet`. Went down to about three seconds. Edit* Also shout out for the lovely `ConcurrentDictionary` too.
Create a class that has your variables and pass the instance of that class to the other form when you create it. From there you can set the variables then read them on the main form. 
I've literally never touched Resharper and honestly have pretty much no idea what it even is. As for paying for Visual Studio? You're...you're joking, right? MS offers a free version that does pretty much everything you need. I've done professional development on VS 2010 Express. Fancy tools aren't necessary.
How'd I miss that? I could get rid of a lot of casts in my code. Thankee!
What helps me a lot is just practicing with various bits of the Framework that catch my eye, like Reflection or parallelization. Occasionally, write something that combines the bits and bobs you've learned about into a larger whole. An idea off the top of my head would be something along the lines of an extensible character planner for a game.
I use ImmutableList&lt;&gt; but then I'm a big fan of immutable objects in general. I feel it cuts down on unintended side effects and bugs.
Thanks I already made the change and committed it.
I would suggest extracting the actual logic of pinging &amp; keeping track of average into a separate class. It's always better to create smaller, reusable and testable components. Similarly, the contents of the while loop in ThreadAction can be extracted to a separate method. Another nice thing would be to use CancellationToken with the thread. CancellationTokenSource source = new CancellationTokenSource(); Thread thread = new Thread(() =&gt; ThreadAction(), source.Token); source.Cancel(false); 
OMG such a detailed answer! Thank you! 
Same as on stackoverflow.com
I'd like to mention that C#s List, like Java's ArrayList, doesn't copy all elements to a new location on write. It actually prepares memory in powers of two, and, if you run over that limit, duplicates.
This is true for expanding the capacity of the list, but inserts and removals still have to move around subsequent items to maintain a continuous array.
I recently used [`BlockingCollection&lt;T&gt;`](https://msdn.microsoft.com/en-us/library/dd997371\(v=vs.110\).aspx ) in a service to improve its performance by going multithreaded.
They use bucket algorithms and aren't O(1) technically. They are between O(1) and O(n) due to hash collisions. Granted 98% of the time that's O(1), and 99.9999999999 it's less than 2. Just a random thing I thought I'd add
Search the latest way to do OnPropertyChanged using CallerMemberName. That way you no longer need to pass in the hardcover name of the property. Handy if you rename in the future.
Which is why you shouldn't use it when a stack or queue is required. It's not just about being explicit.
You can add an event to the workers that signals their completion. However, you have to correctly invoke updating the progress in the UI via `Control.Invoke` or `SynchronizationContext`. Using the `Task` library instead of raw threads makes this easier with methods like `Task.WhenAll()`, and `async`/`await` can take care of the synchronization.
B.Except(A). 
If you're using c# 6 you can replace that string concatenation with an interpolated string, like so: Debug.Log($"Aqueous Liquids: {Mathf.RoundToInt (newTemperate.AqueousLiquids)}");
Personally, I think debug statements are fine if they're messy. It's a damn debug statement, I haven't worked on a single codebase where they aren't a bit gross. If you want to keep things clear you could move it out in to a variable and use a #if DEBUG #endif clause.
Debug statements are vitally important. There are entire libraries devoted to producing debugging statements. this is especially the case because certain classes of bugs are difficult to track down using an interactive debugger. For example, multithreaded related bugs. Not to mention, the byte code generated by the compiler can be different depending on if it is run in the debugger.
Look into this class. It is designed for notifying the UI when work on a background thread or task is complete. https://msdn.microsoft.com/en-us/library/hh193692%28v=vs.110%29.aspx
The rule of thumb is to be as generic as you can for input parameters (IEnumerable&lt;T&gt; is great because it's the lowest common denominator) and as specific as you can when returning a value. IReadOnlyCollection&lt;T&gt; and IReadOnlyList&lt;T&gt; are good candidates if you are returning collections that are not supposed to be modified for example, as they both provide a Count property and also access by index in the case of IReadOnlyList&lt;T&gt;.
Why do you have parenthesis around Mathf.RoundToInt (newTemperate.AqueousLiquids) If you are worried about the number of parenthesis why include ones that are not needed?
You also can't attach a debugger to server 5 out of 302 to debug a problem that happened 20 minutes ago. Even with perfectly debuggable VS setups, log statements have their place.
Thanks. I was able to create and understand an example based on your response. Cheers!
I believe it is actually asymptotic analysis if you're looking at raw iterations and not the actual time for completion actually.
I'm just using the debugger right now to show the output of a procedural generation system. I'll replace the lines with GUI elements eventually
You, as the developer, manage the API key. Your users will not need to sign up for the weather API. Additionally, APIs don't really target languages so any RESTful API will suffice. **edit** fixed all kinds of swype keyboard errors..
well I plan to put the program up on github so people can do what they want. I could do yahoos query but would prefer something already made. that i could just grab into. 
&gt; I am posting for her, as of she is not part of the reddit community. You sign up and post, with optional account verification. What's "part of the reddit community"?
If by program up on github you mean you're making it open source, anyone working with it will be able to handle changing their api key. I plug in to an api for my software that requires a unique api key per install as they're different clients. It takes all of 2 minutes to get a new one and plug it in to that particular install
You might not need an API at all. You could find a website and then parse the HTML/XML. And use xdocument to search for the information. 
&gt; If I need to debug this with breakpoints, would it be hard for me to get what's going on? Quick shout out to OzCode which makes the situation you're talking about so much easier to debug.
FWIW... if you want a great explanation about Task and Aysnc [these videos](https://www.youtube.com/watch?v=0qiB3oW_nd8) are really great.
In what way would a plugin use a service that it knows nothing about?
Imagine if contracts were actual language features.
Don't do this. HTML does not necessarily conform to XML standards. If you have to deal with HTML, use the HTML Agility Pack with Fizzler. This gives you jQuery-like syntax. For weather, though, there are lots of free APIs to use. WeatherUnderground is free for a certain number of calls per day. I recommend saving that call yo some data store so that your application doesn't need to contact the API constantly.
Richmond, VA. If you moving here gets once less recruiter to call me then I'll buy you a beer. Bonus points: You can migrate up to DC where the demand is even higher or over to Norfolk and join the shops that feed on defense contracts. For my money Richmond is the sweet spot.
FluentAssertions looks fantastic. Thank you for this suggestion.
What's the benefit to this? I tried looking it up and got [this site](http://www.dotnetperls.com/string-interpolation) which seems to suggest concatenation performs better in C#.
[Relevant](https://www.nuget.org/packages/System.Collections.Immutable/)
Plugins referencing and using other plugins also sounds like a recipe for compatibility and stability problems down the line.
Kinda. Those guarantee the collection is immutable, but not the elements in the collection. So while useful, it prevents some static analysis scenarios.
You could use the weather.gov site's lookup. You pass it a latitude and longitude and it can return an xml file that you can parse. [Here's the search page.](http://forecast.weather.gov/MapClick.php?w0=t&amp;w1=td&amp;w2=hi&amp;w3=sfcwind&amp;w4=sky&amp;w5=pop&amp;w6=rh&amp;w7=rain&amp;w8=thunder&amp;AheadHour=0&amp;Submit=Submit&amp;&amp;FcstType=digital&amp;textField1=40.7142&amp;textField2=-74.0059&amp;site=all) In the upper right is an **XML** button that will give you the xml document. You can then just call the same link in your code. http://forecast.weather.gov/MapClick.php?lat=40.7142&amp;lon=-74.0059&amp;FcstType=digitalDWML
How hard is it to insure the T is immutable? (If this sounds snarky its not the intention as I'm genuinely asking)
Honestly, if this is better for you to learn, then all the more power to you. Go _dive deep_ with Java and Android. Learn what you can with good object oriented design and development, learn what you can about good mobile application design and development. When you're done and you feel like you have a good grasp of Java and Android, then switch back to Xamarin C# because you've already got 90% of your work/training/understanding done. The skills and concepts are _very transferable_; they are very much two sides of the same coin.
Impossible. There is nothing in .NET that expresses the concept. There is a `Pure` attribute that is close, but it isn't applied consistently and there isn't a way to say that a given T must have a particular attribute.
I have no idea why but: Random r = new Random(); int rInt = r.Next(0, 100); //low range to high range for(int i=0;i&lt;rInt;i++){ DoRandomThingy(); } 
Java and c# are so similar that once you understand one, you've done most of the work for learning the other very quickly. I'm still a pretty newb developer but I've found that after working with c# for a few months, I can look at a piece of Java code and for the most part make sense of what it's doing. My recommendation is, because you like Java, get really good at Java. Come back to C# when you're ready and by then, you won't need any tutorials, just a book for the syntax and you're ready to go!
Well out of all the posts so far Richmond and D.C. are the ones I'm thinking about the most. Thanks for the suggestions! Hopefully the .NET demand is big, I heard it was immensely in D.C. The idea of a river running through/beside the city is rather enticing too, as I'm really into water recreation. Thanks very much for the info!
I'm not sure how familiar you are with working with APIs but the key is for your application and not required by your users. You can try out [Open Weather API](http://openweathermap.org/api).
3 parens is not a problem. Nope.
&gt; Pick up an actual book that covers the subjects you're interested in. Books are the best way to learn the basics of the language, as these basics hardly change. Books provide the learning material in a structured manner and has more content than all those video tutorials. And in this case he use everything, without learning the foundation first.
just private int length. private int length { get { return length; } set...
Okay, I got out my laptop and I was right about the issue; first, let me explain it: When you try to set length to a value, your setter method is then AGAIN setting the value of length. In both your IF and your ELSE, you're still setting the value of length -- so this means that any time you try to set length, it will be stuck in a recursive loop forever because you gave it no way of breaking out of it. That's where this modified code comes in: private int _length; // private so classes outside of the class it is located in cannot change it and cannot bypass your setter method. public int Length // public so you can get the value of _length and use this setter method to give _length a value. { get { return _length; } // returns the value of _length; whatever _length is set to, Length will give you that value. set { int ParseVal; if (value &gt;= 1 &amp;&amp; value &lt;= 10 &amp;&amp; int.TryParse(Convert.ToString(value), out ParseVal)) { _length = Convert.ToInt32(value); // setter will not be called } else { Console.WriteLine("The value entered is invalid. Try again: "); Length = int.Parse(Console.ReadLine()); // setter will be called again and wait for input from user. } } } Look at the IF statement: _length is being set, which means the setter of Length will not be called. Length just returns _length, so setting _length will give you the value you want and when the user enters an invalid number, in the ELSE, the setter will be called over and over until they finally enter in a valid number.
Huh. I feel really dumb for not seeing that. So how do I access the value from the object using this technique? Object._length?
 class Program { static void Main(string[] args) { LengthClass LengthObject = new LengthClass(); LengthObject.Length = int.Parse(Console.ReadLine()); } This will start your whole process; if the user enters invalid information, Length will try to be set again from Console.ReadLine() in your setter method. If valid information is entered, _length will be set to that value and to get that value, you would just say int WhatIsMyLengthValue = LengthObject.Length;
I have used this one for technical interviews.
In addition to what BecauseImAwesomeDuh has said, I'd advise you re-think your design. You should really separate out your data model and your user interaction; having Write/ReadLine calls inside the setter is very poor practice. It would be much better to have your setter throw an exception if the validation fails, then whatever calls the setter can deal with the problem in its own way, by perhaps asking the user to re-enter it. For example: set { if ( value &gt;= 1 &amp;&amp; value &lt;= 10 ) { _length = value; } else { throw new ArgumentException("Length " + value + " is out of range; must be 1-10"); } 
Afaik Pure only applies to method, not state.
C# would definitely benefit from expressing and enforcing immutability. I actually think the C++ approach is superior to this though. Rather than specify a type as immutable, instances are declared immutable (in C++ it's called const). Methods are marked as being safe (or not) to call on immutable instances. This gives the flexibility to use mutable types in an immutable context.
I agree. I think the language could update cleanly, but existing code wouldn't be const compatible. I do wonder why C# does things at the type level that C++ does at the instance level. For example, C++ makes no distinction between class and struct wrt where allocation occurs. The consumer decides, not the type designer. Why would immutability be on the type, not the instance?
She doesn't know Reddit, or even how to use Reddit.
Those features are backwards compatible... If I recall correctly you can set the unity environment up so it gets compiled as C#6 but still runs on the old mono runtime.
Dictionaries don't guarantee order of iteration.
A lot depends on what you call C#, it's a very deep sea. The basics are probably do-able in less then a few hours. After all, syntax wise, most programming languages operate on the same basis with loops, variables, parameters, statements etc. But as I said, C# is a very deep sea. After the basics you have LINQ, Threading, Tasks, PLINQ, Interfaces, keywords and then the vast library that .NET provides you with for general tasks. I find that knowing what's available, is more important then knowing exactly how it works. If you don't remember, you can always look it up in a book (if it's a C# language feature) or look it up on MSDN/Google. Bookwise: It depends on how serious you are, and what depth you're looking for. I personally like the "Head First" series from O' Reilly. I haven't read the Head First C# book, but have read other books of the series: http://shop.oreilly.com/product/0636920027812.do That of course is an introductory course into C#. For more depth (and I mean like the full depth) I suggest "C# 6.0 in a Nutshell" http://shop.oreilly.com/product/0636920040323.do or "C# 5.0 in a Nutshell" (previous version of C#, but still relevant). But these are more reference books, then actual reading books. You can read them cover to cover, but it'll take some time, and you'll probably need to reread some parts several times, especially if you're new to C#. But as far as C# goes, it basically a Bible in my eyes.
If you value immutability and purity try F#
I did write [one](https://github.com/NattyNarwhal/Weather) with yr.no's XML API. You could also parse METAR as well.
Only catch if you expect some kind of exception AND have a specific way to handle that exception. Let all other exceptions get bubbled through to your main handler (if there is one)
Some people are different. Some can easily pick up on a internet like Reddit, and others can't. Some can be good at programming and creating, others not. People are different. And given the time span she had to make this assignment, would i not have used the time to teach her Reddit.
You didnt even read the video's section of the sidebar. [C# Fundamentals: Development for Absolute Beginners](https://channel9.msdn.com/Series/C-Sharp-Fundamentals-Development-for-Absolute-Beginners) is an awesome course. Go learn it. Also, Edx propose a great C# course with video support to learn ho to C#. I did it for fun. It was nice :)
My first reaction is "I just threw up in my mouth", but I know that this is not helpful. Could you post the whole program, so we can see what is going on?
You don't need to, an internal call is made to it automatically. See: http://stackoverflow.com/questions/6504407/is-there-a-need-to-do-a-iflog-isdebugenabled-check
There's https://developer.forecast.io/ Which someone has made a C# wrapper for: https://github.com/f0xy/forecast.io-csharp
I would use log4net's, serilog's, etc configurations for handling trace level. That way log4net could log debugs and serilog not lig debugs (example). You can use your DebugEnabled property (or a trace level based) for dynamically/programatically override/change trace level for all possible loggers (log4net, serilog, etc)
I would imagine that logging a message to a debugger wouldn't be a bottleneck. Therefore, readability should be the deciding factor.
Yes we did, we setup audio background permissions, but we could not make the NSURLSESSION to work, we got stuck in threre, we believe thats peobably whats mising, but dont know for sure, we used the audio streaming tutorial as a base but it uses a simple httpclient instead. 
It's tough to see what the over all goal is but if value is ever not an int, you're going to get an error because you're trying to compare it before you convert. This is pseudo but this is what I'd do. Int parseval If value == null or not int.tryparse(value.tostring, out personal) Return error If parseval &lt; 1 or parseval &gt; 10 Return error //If you made it here validation is good, do work I've found through the years that it's usually best to do all your validation first and if any of it fails, return some kind of error, whether that's the error string, an actual exception whatever. The reason I like this is because it keeps you away from if else's, which can get somewhat complicated fast, as a program grows Sorry, on mobile 
I feel like I used to do things like this (much worse, actually) a lot. However, I stopped doing it as much when two scenarios became more frequent. The first is when other people were reading my code more often. The second is when I had to read my own code after several months more often. It's a nuance, and you'll learn to find the sweet spot. It's really not worth worrying about much, because it will come naturally.
Only if you are content with a fixed-size stack. A linked-list approach would be preferable for a dynamic stack. Arrays still need reallocations, even if you are only appending.
Eh, it kinda is imo. Also look at LogFormat and friends
Same here, but with read only auto-properties the private field is no longer required.
Without support from the runtime and JIT compilers, that's no different from what we do manually.
grauenwolf will you publish the analyzers source code? Btw this error handling method makes awesome developer UX! ThrowMutableException(string copyMethod)
What analyzer? This is just an old speculative piece.
How did you declare the array? Is it a type you created? Try it with a list, does the problem still persist?
Are the values of the variables `Pikachu` and `Charmander` the same, too? What is the result of `ReferenceEquals(PokemonArray[0], PokemonArray[1])`? Edit: this would be a lot easier if you actually replied to the commets instead of making top level commets... My guess is that you screwed up your `Pokemon` class in some way that makes the constructor override all other instances' data, probably by making its fields `static`.
Without you sharing the actual code, there is no way to further help you. This way it's just guessing, which is pointless.
Doing things on type level rather than on usage level means that the design burden is shifted from the user to the library creator. .NET rightfully assumes that the average library writer is more competent than the average .NET dev so over quality improves and errors are prevented by employing this strategy.
If you do feel like learning C#, I highly recommend this tutorial series: https://www.youtube.com/playlist?list=PLAC325451207E3105 Starts from the very beginning, and everything is explained very well.
Interesting. The AttributeUsages are AttributeTargets.Class | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Event | AttributeTargets.Parameter | AttributeTargets.Delegate, so it seems to apply to functions rather than state (properties are the only wishy washy one here). It's a shame the compiler can't verify the programmer's assertion.
By the same token .NET brazenly assumed that the library writer always knows how the library user wants to arrange their objects in space and time, which is very rarely the case. 
100% this. And it is also why if you are going to reinvent the wheel rather than using Liblog you should expose a similar property so the callers of your wrapper can add a check where needed
&gt; which is very rarely the case. [citation needed] I think they've hit the right balance. Also this potentially only sacrifices performance and very rarely (if ever) correctness or design.
Well why not, I want to learn.
Well, if your only pursuit is academic then fine... learn away. I just meant that if you are working on something for a production product than you might spend your time toward better uses.
Well, sure, a linked list might be slightly more optimal, but the dynamic array expansion won't slow the average use down either.
Ooh, I like that. ~~Does it have a facility to either work with or convert between zip codes and coordinates?~~ (Look below your own comment, genius, its right there. Please, excuse me, as I am apparently blind.) Might use it as my first foray into working with WPF.
True, but one I don't have to type.
If you're using DI, you can always apply the [null object pattern](https://en.wikipedia.org/wiki/Null_Object_pattern#C.23) when logging is disabled.
If you're using log4net, there, you don't have to call IsDebugEnabled, *but* the JITter will optimize those calls out if the DEBUG level is filtered out, so it is a minor optimization. WRT NLog, I don't know.
I did calculate that wrong, BTW. I'll fix it if anyone is interested.
Exactly this. For example: public class FirstForm: Form { public void OnVote() { var second = new SecondForm(); second.MyFirstForm = this; second.ShowDialog(); } } public class SecondForm: Form { public FirstForm MyFirstForm {get; set;} } 
I've not worked with many different ORMs, so is there a more elegant solution? The most obvious options are: * This one, which issues a single, simple 'DELETE from X WHERE ID=Y' command to the database - however it will probably cause issues with cascading deletes and foreign keys * Loading an entity first, then deleting it * Issuing a raw SQL command through .ExecuteSqlCommand
Here's how Chain does it: //sync version dataSource.DeleteByKey("Customer", "A123").Execute(); //async version await dataSource.DeleteByKey("Customer", "A123").ExecuteAsync(); Why can't EF offer something like that instead of requiring all of this: using (var db = ...) { Dim cust As New Customer {CustId = "A123" }; db.Customers.Attach(cust); db.Customers.Remove(cust); db.SaveChanges(); } Hell, even raw SQL takes less code. Here is Dapper, using (var conn = ...) { conn.Execute("DELETE FROM Customer WHERE CustId = @CustId", new {CustId = "A123"}); } 
Same, only I use IList&lt;T&gt; and IDictionary&lt;T, U&gt;, except when I need List&lt;T&gt; methods like AddRange() etc 
It's intentional.
I'd only use interfaces for, well, interfaces, so for public methods and the like. Internally, there is no reason not to use List&lt;T&gt; etc. directly.
It's not amortized, they are O(1) average.
Ok, but I can't really respond to this unless you can substantiate why List&lt;T&gt; is preferable to an array in almost all circumstances. Another aspect of arrays is that sometimes you want to return them from some public class method and it wouldn't make sense for the caller to add or remove items afterward. If the caller *really* needs a list, there is an Array&lt;T&gt;.ToList&lt;T&gt;() method...
LLBLGen Pro has a similar system, you can simply delete entities directly on the DB using predicates and expressions. Updates as well btw, so you can update entities in bulk without fetching them first and also without having to use hardcoded sql/table/field names. 
Can you define "clunky"? Maybe give an example of how arrays are "clunkier" than List&lt;T&gt;?
Dude let it go? She in the middle of a project, so i went on reddit to gain help. Maybe i formulated myself badly. But whatever?
Yeah, but if you're stooping to that level, you might as well just be using Dapper and making everything better.
There is never a need, but there are times when it has no downside (you aren't changing the size of the array) and a small upside. Might as well use it then. 
Not a problem
I keep getting a 403 when trying to pull data from the site. Here's what I'm using: string URL = WeatherDataURL.Replace( "{LAT}", Loc.Latitude.ToString() ).Replace( "{LON}", Loc.Longitude.ToString() ); HttpWebResponse Response = ( HttpWebResponse ) ( ( ( HttpWebRequest ) WebRequest.Create( URL ) ).GetResponse() ); string ResponseText = new StreamReader( Response.GetResponseStream() ).ReadToEnd(); Where: private static readonly string WeatherDataURL = "https://forecast.weather.gov/MapClick.php?lat={LAT}&amp;lon={LON}&amp;FcstType=xml"; Any idea what's going wrong?
 VB.Net Debug.Log($"Function1:{foo.GetBar}, {z.GetX}") vs C# Debug.Log($"Function1:{foo.GetBar()}, {z.GetX()}"); Yeah so much shorter....
Everything is a hack, if you think about it.
You can also try with a library like this: https://github.com/loresoft/EntityFramework.Extended/
So do I, but even then there are things you could do within the full-blown ORM model that aren't so annoying.
Why don't you want to use either of them?
Change your https to http and see if that fixes it.
Tried that, as well, still gives me a 403. Only thing I can think of is to create a temporary browser object of some variety and try to pull the data from that...but, that sounds like a *really* nasty hack.
Want to keep light
Most of my companies codebase was written to support the 2.0/3.5 runtime and iirc System.Net.Http doesn't exist for 3.5.
Even if it is a bottleneck, the whole statement shouldn't be in the release compiled version. This should be written in such a way that the `Log` method is marked with `[Conditional("DEBUG")]` so that the whole statement gets skipped when compiled in release mode.
It doesn't get much lighter than using that is already built in to your dependencies. If you're worried about keeping your xaml clean you could use GridViewColumnCollection so you get something that looks like: &lt;Window.Resources&gt; &lt;DataTemplate x:Key="DateColumn"&gt; &lt;TextBlock Text="{Binding Path=Date}" /&gt; &lt;/DataTemplate&gt; &lt;GridViewColumnCollection x:Key="GridViewColumnCollection"&gt; &lt;GridViewColumn CellTemplate="{StaticResource DateColumn}" Header="Date" /&gt; &lt;/GridViewColumnCollection&gt; &lt;/Window.Resources&gt; &lt;Border&gt; &lt;GridViewHeaderRowPresenter Columns="{StaticResource GridViewColumnCollection}" /&gt; &lt;/Border&gt; &lt;ItemsControl&gt; &lt;ItemsControl.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;Grid&gt; &lt;GridViewRowPresenter Columns="{StaticResource GridViewColumnCollection"}/&gt; &lt;/Grid&gt; &lt;/DataTemplate&gt; &lt;/ItemsControl.ItemTemplate&gt; &lt;/ItemsControl&gt; Which looks messy for one column but adding another column means you only add another GridViewColumn to the GridViewColumnCollection.
Not sure how to do this. For example, I've got a command pattern. The command itself has the following properties and method (this is the interface): string[] Aliases { get; } string Name { get; } string ShortDescription { get; } string Description { get; } string Usage { get; } string UsageArgs { get; } string Example { get; } bool ConsoleCommand { get; } string[] Args { get; set; } bool Execute(); Some of the properties could be grouped (for example, name/descriptions/usage/usageargs/example are all used to generate the help system info) but it would just be unnecessary complexity to put them into their own object, then require that object as a "help data" property. I'm open to suggestions, though.
Would you liken this to how IronPython is integrated?
Ah a very good choice in that case.
IronPython generates native IL and uses some wrapper objects to let python work as native IL, whereas IronWren is more like Lua libraries for .net that can handle marshalling data between a C library and .net. Correct me if I'm wrong, Banane9.
Indeed.
Fail early yes, but that's not an example of "fail hard". If you want to see that, consider the pattern used by Code Contracts: public void SomeMethod(string arg) { if (arg == null) { System.Environment.Exit(CONTRACT_FAILED); } // Do stuff }
Might work if you're careful, but the moment you expose an argument of NonNullString, you run the risk of null instances of the wrapper type. (This seems like a good use for the Option Monad, which C# does not have, natively.)
This is, incidentally, the big problem with null values. Once you admit nulls, they tend to spread, and are pretty difficult to properly contain.
So running with this idea, it appears I can get there with a struct wrapping the string type. For example: public struct NonNullableString { private readonly string _value; public NonNullableString(string value) { _value = value; } public override string ToString() { return _value; } public static implicit operator NonNullableString(string value) { if (value == null) { return ""; } return new NonNullableString(value); } } This will force even a null string like this: NonNullableString foo = null; To actually be equal to an empty string. Optionally (and more realistically) you could just have it throw an error if they ever attempt to set it to null. Just gotta figure out how to get it to play with arrays now.
Yeah, I'm finding this out the hard way. Thing is, I never really thought about the idea of a "solution" for nulls until recently. Been programming for years, and I just figured they were an evil we had to live with. Never even looked into a "fix". 
I'm gonna need you to de-linq that. :D I've only been using C# for about 4 months.
I'll keep this on my mind. 
For me, I would be able to cease to worry about Null values anywhere that my interface is consumed.
It all depends on what kind of projects you're planning on doing. I generally default to [github](https://github.com) and [travis-ci](https://travis-ci.com/plans) for open source, non-contract, or other non-commercial things I do. For commercial work, I use the client's repo, or ask for them to pay for a private github or beanstalkapp.com account. I'll either leverage their CI tools or set up an instance of Jenkins somewhere. For private proprietary projects, I would most likely start out locally on one of my extra dev boxes and then migrate to a cloud-based service once the codebase matures or other devs start coming onto the project. Tl;dr: It depends. Start small/local and scale up.
1. Specify Form method on the view? 2. Sure that your TestID isn't null? 3. Maybe try to make a hidden input field like: &lt;input type="text" value="@Model..." class="hidden"... 
I'm trying to have an adult discussion on a pattern that MAY solve a long standing problem. Throwing a fit and being insulting is neither adult nor constructive.
Thanks for the reply. The TestId being passed in isn't null and the hidden input field worked. I have it like this: @using (Html.BeginForm("ProcessResults", "FormData", new { id = Model[0].TestID })) { &lt;input type="hidden" value="@Model[0].TestID" name="id" /&gt; &lt;input type="submit" value="Submit" class="submitResultsBtn"/&gt; } Not sure if that's the best way to do this? But thanks for the help. 
But why do *you* get to define what qualifies as a **bug** in *my* code? If having a null value or an empty string be treated equally is how the code is designed to work, how is it that *you* get to call that a bug? You're clearly fixated on your (and only your) "solution" and are not trying to have an actual discussion here.
It's fine to do it that way in my opinion, but others may disagree. Have you tried changing the form method?
On a second thought I'm not sure if this is possible without a field of some sorts, because data has to be stored somewhere until you make a request with the submit button. You could try storing data in the ViewData or Session object.
I did not insult anyone. I did not rage-delete. I deleted because you refused to listen to solid advises, and did not respond to the points made. I worked with enough bad code, and always try to help people improve their code, based on my experience and the experience of many many others gained in many years. Especially beginners (4 months of C#) need help, if they listen.
I did not "refused to listen to solid advises" I made my points as to why those "advises" may not be the most "solid". And I responded to each and every (and by every, I mean the *only*) point you made each time. Which people would be able to see if you hadn't rage-deleted. If anyone's coming off as an "expert beginner" here, it's you. Try to have an adult discussion. New patterns don't get discovered when people throw fits, take their ball, and go home every time someone suggests a new way of doing things. As I've said before, I've very likely been programming longer than you've been alive (basing this solely on your childish reactions over the span of less than 10 minutes). 4 months of C# does not mean 4 months of software development. 
Yes, it is real. While I personally think "fail hard" is a bad design pattern under most circumstances, there are people who think it is appropriate. This is why I think it is important to distinguish between "fail first", which I think most of us agree with, and "fail hard", which is debatable.
I think that I understand what you are trying to accomplish, but I've been doing C# since it was in beta and I haven't yet found a good solution.
How does the "&lt;form&gt;" tag render in the browser?
I recently learned that if I use Convert.ToString(something_that_might_be_null) that I don't get a null, I get an empty string. Using something_that_might_be_null.ToString() on the other hand will make something explode if not handled properly.
Nice. I've always used if(!string.IsNullOrEmpty(some_string) {doStuff();} 
Better to learn LINQ! It's easy to learn in an hour some evening. :)
For the future, you can get a better idea of what is happening by using a listener for your debugging. The one I use is called Fiddler. It will tell you if the data is being passed and not read, or not being passed. 
The default constructor of a struct is always public, and cannot be overridden. So, if NonNullString were a struct, instead, one could still do this: var t = new NonNullString(); `t` isn't null, but the string it wraps *is*, because the default constructor for structs initializes all the fields of the struct to the default value of their respective type.
Neat, so if I understand correctly, I could do something like: string some_string = dataGridView.Rows[0].Cells[1].Value?.ToString(); And if the datagridview cell is null, I won't get an exception, I will just get a null in my string?
Yes, it works by evaluating to `null` if the object is `null` or the result otherwise, and only evaluating the object once, unlike an `if`. It also works for arrays. Say you want a `null` in any part to coalesce to the value `"Error"` and that every operation has a chance of returning `null`: string some_string = dataGridView?.Rows?[0]?.Cells?[1]?.Value?.ToString() ?? "Error"; Now imagine writing that out otherwise. On a side note, that's why a non-null postcondition is very nice to have, especially before C# 6. In general, though, guaranteeing that something is non-null makes it easier to reason about the code.
I don't really think that is going to buy you a whole lot, unfortunately. int Foo(NonNullString n) { if (n.IsNull()) { /* error condition */ } // stuff } just isn't meaningfully better than int Foo(string s) { if (s == null) { /* error condition */ } // stuff } (And there's still stuff like `string.IsNullOrEmpty()` and the `??` and `?.` operators, depending on the particulars of your use case.) If you just want to be 100% the object's string properties aren't null, adding validation to the constructor and properties is a much easier solution than trying to circle around language's type system, however clunky it may seem.
Please look over my example again. "if (n.IsNull)" wouldn't be necessary at all in your method if it were caught at the interface, which is my entire point. 
Wow. That's a useful service, but the absolute worst possible way I think that XML could've been implemented. It maybe could've only been worse if they expressed the timestamps with individual &lt;day&gt;, &lt;Month&gt;, etc. lists.
well, just based on the information i'm kinda forming on the text highlighting, I think your method expects an instance of a Room type. You're passing it a classname, which is neither a type nor an instance. There's a few things you could do. If you really do not want to instantiate BasicRoom, then you could change your dictionary to accept 'Type' instead of 'Room', and you could pass typeof(BasicRoom) instead. Later, you could loop through your dictonary and use Activator to instantiate your Rooms. Keep in mind that this is reflective, and that comes with an efficiency price. Alternatively, you could alter your logic flow to just instantiate your rooms now and properly handle that later on. I recommend this approach, but I'm not sure exactly what your user stories are. 
A few options: - use a factory pattern and store the factories in the dictionary - make a dictionary of `Func&lt;Room&gt; ` or whatever your base type is and store lambdas like `() =&gt; new BasicRoom()` in the dictionary, then call it to create a room - make a dictionary of `Type`, store `typeof(BasicRoom)` etc. and use [`Activator.CreateInstance`](https://msdn.microsoft.com/en-us/library/wccyzw83.aspx)
Don't forget IronRuby
Well, thing is I am in fact storing the Room's own coordinates in a separate multid array. But the thing is, I need the x and y for generating the things inside that Room... The Multid array has a 5x5 grid. But the rooms are way larger than 1, the 5x5 is 1=1 room. But 1 room = 16x16 tiles
Probably not what you want to hear, but I would reconsider the architecture of your data. I'm not sure why you would need the X and Y for generating the contents of the room. The contents don't know anything about the room's location nor the contents of other rooms, they only need to know their location relative to the room they're in - or perhaps relative to sibling contents. Likewise, rooms don't need to know anything about other rooms. For example, if you need to draw your room on some interface, you would simply call house.Draw(), which loops through the rooms and calls Room.Draw(). Since the house knows where the rooms are, you can use those X and Y positions as offsets, but individual components of rooms don't need to know where they are in the respective house.
Still, there's no need to rub salt in the wound.
http://geekswithblogs.net/brians/archive/2008/06/14/122861.aspx
In both cases it will fast track once it knows the boolean statement will be true. So to answer your question, yes, it only evaluates as many terms as it must to determine true or false
This is not limited to "if". var someBoolean = true || false || methodWithBoolReturn(); Expressions are evaluated with short-circuiting in mind. An "if" statement simply takes an expression as an argument. That expression must reduce to a boolean value. 
It's useful in particular contexts. Database ORM queries are a good example. Especially ones where the model is kind of shitty and unchangeable. The basic issue is that scenarios where it's super useful generally indicate data model problems.
Just have a utility method that records some base time (say the first time it's accessed), and each subsequent time measures the time difference in seconds between "now" and that original "base time". Then just use the `DateTime.AddHours()` method to add those "seconds" as "hours". Left some superfluous variable assignments to help you understand. Of course, this isn't threadsafe, but I hope that won't be an issue for you. public static class FastDateTime { private static DateTime BaseTime; private static bool IsInitialized; public static DateTime FastNow { get { var currentTime = DateTime.Now; if (!IsInitialized) { BaseTime = currentTime; IsInitialized = true; } var timeDifference = currentTime - BaseTime; var secondsDifference = timeDifference.TotalSeconds; var hoursToFakeAdd = secondsDifference; var fakeFastDateTime = BaseTime.AddHours(hoursToFakeAdd); return fakeFastDateTime; } } } Sample usage: for (int i = 0; i &lt; 5; i++) { FastDateTime.FastNow.Dump(); Thread.Sleep(5000); } Each loop iteration outputs a time approximately 5 hours in the future every 5 seconds. EDIT: Also, learn to use the built-in methods and types of `DateTime`. Ditch all this funny business of calling `DateTime.Now.ToString()` and then calling `Convert.ToDateTime` on that string. Also avoid converting to string all the various components of that `DateTime`: just keep them as doubles or ints.
my question is that is there any other way i can implement another loop instead of a forloop and is my loop even right?
thanks i didn't know "|" and "&amp;" existed i have always seen/used them as "||" and "&amp;&amp;"
nvm i need the removeAt to prevent duplicates
Good point. I need to read better. 
That last one is my go to.
|| is the "boolean or" operator, whereas &amp;&amp; is the "boolean and" operator. They *only* work with boolean values, which allows them to do the short circuiting. There is an entire family of binary operators (|, &amp;, ^, &lt;&lt;, &gt;&gt;, |=, &amp;=, *et al* ), which function on numeric values (and historically, booleans - being 0 or 1 - are numeric values). The closer you get to the hardware, the more you come to love (or hate) this group.
If you have a computer you can access over SSH, you can set up a git "server". This computer could simply be a virtual machine with a bridged connection. 
OMG thanks a billion. What's a Dump method?
What do you think amortized means? Because based on that comment, one of us has misunderstood it. Might of course be me. :)
Oops, sorry. It's a utility method available in [LINQPad](http://www.linqpad.net/) (with which I wrote/tested the above code). In this particular case, it's pretty much equivalent to `Console.WriteLine`: for (int i = 0; i &lt; 5; i++) { Console.WriteLine(FastDateTime.FastNow); Thread.Sleep(5000); }
The last one will not randomize the items in a list, it will return a new randomize enumeration.
cards.OrderBy ( x =&gt; Guid.NewGuid())
Here's a class you can steal: https://github.com/docevaad/Anchor/blob/master/Tortuga.Anchor/Tortuga.Anchor.source/RandomExtended.cs It supports both choosing and picking items. (In statistics, picking removes it from the list. A coin toss is a choose, a card draw is a pick.)
I'd check out Visual Studio Online. It's free for the first five users with unlimited private repositories/team projects. The reason I suggest VSO is because it has git, build (including CI), and release management built-in, which is obviously a huge plus for someone who doesn't have any experience setting up a devops environment. The git part is pretty straight forward. You can of course make use of all the fun planning and work item tools, but that's optional. For builds you can either use their hosted build agents (you get a certain number of minutes free) or download the agent software to run on your own server or virtual machine or whatever for free. I use the self-hosted agents and they're pretty damn easy to set up. Even setting up the build definitions themselves are pretty easy with a lot of nice pre-packaged steps for things from building a solution file to publishing to NuGet or deploying to an Azure VM. It's a lot simpler than Ye Olde TFS XAML Builds. The release management stuff I have no experience with, though. It looks like it's about as easy to use as anything else in VSO. Side note: There's also a lot of extensions you can install to your account to add new features like hosting a NuGet package feed. There's also web hooks for things like Jenkins, I think, but I've never used any of that stuff
&gt; using(RNGCryptoServiceProvider provider = new RNGCryptoServiceProvider()) { // ... 
This will not shuffle the list. This will create a new shuffled enumeration. Also using `Guid.NewGuid()` as the order-key will result in a poorly shuffled enumeration.
My thoughts: * To improve code readability use an appropriate List initializer * Private methods generally don't get the _*** treatment, just private fields * The list of powers should be declared and maintained outside of any methods, perhaps later even in an entirely separate class which contains all your strings so they can be localized and maintained in one place rather than throughout your codebase * You should generally seed random with a unique int if there is any chance the code will be called in rapid succession -&gt; the default Random constructor uses a seed which is based on the system clock, which doesn't have enough fidelity to guarantee random numbers if called in rapid/tight loops * To improve code readability try to put constant numbers into variables with readable names -&gt; easier to change/maintain/extract them later * I avoid using for() loops as much as possible as they are terrible for readability Anyways, here is code that you can run as a console app: using System; using System.Collections.Generic; namespace RandomSuperPowers { internal class Program { private static readonly List&lt;string&gt; SuperPowers = new List&lt;string&gt; { "Super Strength", "Super Speed", "Body Armour", "Flight", "Fire Generation", "Weather Control" }; private static void Main(string[] args) { GenerateRandomPowers(); GenerateRandomPowers(); GenerateRandomPowers(); GenerateRandomPowers(); GenerateRandomPowers(); Console.ReadLine(); } private static void GenerateRandomPowers() { const int numberOfPowers = 3; var random = new Random(Guid.NewGuid().GetHashCode()); var availablePowers = new List&lt;string&gt;(SuperPowers); var chosenPowers = new List&lt;string&gt;(); while (chosenPowers.Count &lt; numberOfPowers) { var index = random.Next(availablePowers.Count); chosenPowers.Add(availablePowers[index]); availablePowers.RemoveAt(index); } foreach (var chosenPower in chosenPowers) { Console.WriteLine(chosenPower); } Console.WriteLine(); } } } 
Yes but in C# the single symbol variants are overloaded for booleans as well and implement complete evaluation semantics. I wouldn't recommend using them, though.
Can I make this loop infinite while some other pieces of code runs my plotting and arduino tasks simultaneously? Or should I make another program for it? I've been focusing on Arduino a lot latley which can not multitask it makes you consider such stuff. We use computers that has clock speed of gigahertz and they can also multitask. So is it ok to use FakeDateTime and everything else in one main function?
Definitely use a factory pattern. Google for more information. 
Basically, you could do this: var dictionary = new Dictionary&lt;RoomType, Func&lt;int, int, Room&gt;&gt;(); dictionary.Add(RoomType.Four, (x, y) =&gt; return new BasicRoom(x, y)); var factoryMethod = dictionary[RoomType.Four]; var room = factoryMethod(123, 456); Where `Func&lt;int, int, Room&gt;` describes a delegate method taking two `int` parameters and returning a `Room`, and `(x, y) =&gt; ...` is a lambda method matching that delegate signature.
Using linq, you could randomly sort the list then use the 'take' method. SuperpowerList.OrderBy (spl =&gt; Guid.NewGuid ()).Take (3);
I would use the Fisher-Yates shuffle algorithm: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle 
Likewise it bugs the shit out of me when even though it says `new ClassName` in the same line people refuse to use `var`
I'd advice against using your own custom string implementation for technical reasons (Such as not wanting it to be null) If you have resharper you could try using [[NotNull](https://www.jetbrains.com/help/resharper/2016.1/Reference__Code_Annotation_Attributes.html?origin=old_help#NotNullAttribute)] and [[CanBeNull](https://www.jetbrains.com/help/resharper/2016.1/Reference__Code_Annotation_Attributes.html?origin=old_help# ItemCanBeNullAttribute)] annotations. That way you will get warnings based on static analysis when you try to assign null values to things that should not be null.
That is what I meant when I mentioned booleans are historically numerics. I suppose I should be more explicit in the future.
Noticed the main post was updated. My gut feeling is that this is still a complicated and unidiomatic solution to the problem. A struct can't keep you from having null strings, it just wraps them up in something that will now throw an exception if you call `ToString()`. This seems like a violation of the principle of least surprise: why should reading a string I've been promised is not null produce an exception? A more comprehensive solution probably involves validating in the constructor (if the object is meant to be immutable) or using private backing fields and validating in the properties (if the object must be mutable). This might be implemented like so: // immutable object public string Property { get; } public ImmutableObject(string propValue) { if (propValue == null) { throw new ArgumentNullException(nameof(propValue)); } Property = propValue; } or // mutable object private static void ThrowIfNull(string s) { if (s == null) { throw new ArgumentNullException(nameof(s)); } } private string _backingField1; public string Property1 { get { return _backingField1; } set { ThrowIfNull(value); _backingField1 = value; } } private string _backingField2; public string Property2 { get { return _backingField2; } set { ThrowIfNull(value); _backingField2 = value; } } This isolates the exceptions to object initialization or property assignments, respectively, and won't produce them on *reads*. This *does* wind up feeling clunky. It would be *much* better if C# did not allow object references to be null by default, or at least had the option of non-nullable objects, or had any real means of capturing contracts on interface classes. Maybe in C# 8. I can also understand that you might not want to go this route, since it's the sort of solution that u/AngularBeginner suggested, and he's kind of a flaming jerk. This doesn't mean he's *wrong* about the correct solution. It just means he's kind of a jerk.