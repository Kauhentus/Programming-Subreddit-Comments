Isn't yahoo search bing behind the scenes? 
Handle Form.KeyPress and set Form.KeyPreview to true. [Straight from the Mothership.](https://docs.microsoft.com/en-us/dotnet/framework/winforms/how-to-handle-keyboard-input-at-the-form-level)
Removed: Rule 4. Try giving the info/samples here a shot: https://docs.microsoft.com/en-us/dotnet/framework/winforms/how-to-handle-keyboard-input-at-the-form-level Also, try making a minimal example with a new/blank WinForms project just to make sure it's not some other factor in your current project blocking it. If you still run into issues, feel free to post a question but include only the relevant code of your attempt.
I don't know.. is it? The thing is, when Chian first banned google I switched to yahoo, then that got banned as well and I switched to bing... But a couple of months ago I finally got a vpn and started using google again... So even if yahoo does use bing, when did that start? It's possible you're correct, but I wonder about the timeline...
I used to use RoslynPad, even talked with [Eli](https://github.com/aelij) about it at Build and wanted to contribute. Unfortunately I don't have time, and updates slowed down massively. There are some big "quality of life" things RoslynPad is missing (like debugging), and I finally paid for a LINQPad license. It was the video about IPC performance for debugging in LINQPad that made me switch ... interesting stuff, though now I can't find the video.
Oh God, who would want to write that by hand
I mean you only need to write that kind of boilerplate once and then it's a snippet forever. 
Do you know regular expressions? If not read up [IsDigit()](https://docs.microsoft.com/en-us/dotnet/api/system.char.isdigit?view=netframework-4.7.2) and do a string length check and then multiple IsDigit() checks.
I have never heard of IsDigit() thank you
Look I'll be straight with you.. this could be fixed by you simple reading and understanding what your code is doing. Google rubber duck debugging. There is no 'gotcha' here, just poor understanding of what your code is doing. You shouldn't even need the debugger to see where this is going wrong 
Pluralsight is a great recommendation, I'm fortunate that my subscription is paid for by my employer. If you're a book person I would look into safaribooksonline.com too. Having access to unlimited books online is pretty nice, and nearly every technical book I've been interested in I've been able to find there. I especially like books from the publisher Manning, such as the "&lt;technology name&gt; In Action" series. These books mostly available on safaribooksonline as well. Disclaimer: I'm not affiliated with any of the companies mentioned above
Just a tip when asking for help. Don't post pictures of code and always give the actual error message text you get including line numbers where appropriate. It makes everyone's life easier. 
Ooo I think I have something that can help here. I'm on my phone so can't give you the code very well but there is an overload for the LINQ Select method that takes a Func&lt;T,int&gt; where the int it gets passed is the current index. So use that overload and create an annoymous object comprising of the string and it's index. Then do the regex on the string and when you need the index you have it. If you want me to stick an example on just give me a shout 
Good you got it working :)
Big law firms usually give full time employees one conference trip a year.
My work pays for a corporate license for linqpad. It‚Äôs fantastic.
Does it work in vs code?
The tiny fee to buy LinqPad is absolutely worth it, many times over. It's cheap as hell, stop being so tight with your money and support the people who makes these tools.
Hundreds and thousands of man hours to port framework code to core? What have you done in framework that can't port across easily?
[Pushing C# to the limit - Joe Albahari](https://www.youtube.com/watch?v=mLX1sYVf-Xg)
IDK, I haven't used it professionally.
You can build 100% code share Xamarin solutions. Examples of other cross platform frameworks: Flutter, Ionic, Apache Cordova, Electron, to name a few.
Luckily we have .NET Core 3.0 support for WinForms coming.
It's a hell of a lot faster than Web Forms, that's for sure.
That's the one, thanks!
Ppl still use webforms?
Bite that bullet. The deserves a few bucks. 
You‚Äôre going to get downvoted to oblivion because people love rewriting code and having something cool and new to learn. But practically speaking, .NET core doesn‚Äôt really improve my life at all. It‚Äôs just a hassle dealing with the subtle differences. ü§∑üèª‚Äç‚ôÇÔ∏è
yep bought linqpad too; all the shit i blow money on... linqpad was worth it
There are many, many legacy enterprise sites that are platform locked to WebForms. 15 years of technical debt is a bitch. We all know it needs to go away but when you have a 1.5 million line codebase with half a billion dollars of revenue a year depending on it, the struggle is real.
If you're in the STL area we are holding a workshop in a couple of months
https://visualstudiomagazine.com/articles/2018/10/10/net-keynote.aspx?m=1 As I read from there: no new features in .net Full, only Patch releases. 
How do sites handle sandboxing of code typically?
Guys, don't forget: try.dot.net exists. MSDN has pushed for it a few times.
Can you email Satya Nadella your resume using smtpclient?
Uh. How do you handle times that occur twice on leap back days, or times that skip on leap forward? How does testing on 1/1/1900 12:00 am test this?
The other features besides the intellisense are worth it too. One of the easiest and fastest way to edit some database records. Write a quick linq query to filter the records to the ones you want then just edit the data. 
Gosh, thank you so much for taking the time. I'll review the more deeply.
Visual Studio is arguably the most powerful IDE on the planet. Why the heck would you not like to use it. I an scared to imagine what your experience will be with other IDE's. 
Didn't even know it :( I mean, I know the C# tutorial on MSDN have an interactive code interpreter, but I didn't know it's capable for general use instead of only for tutorial purposes. I only realized now that some MSDN example actually have links to run the code.
Hey OP, just wondering if you ended up buying the laptop? I'm considering atm. No USB-C is a bummer so wondering what your solution for that was if you connected to any hubs etc
Haha, yeah, go fuck with The Claw
Thanks ! I like this one... drives it home a bit more than other quotes i've seen: &gt; We will continue to update the .NET Framework, but you'll see it slowing down," Massi said, noting developers primarily will see new security protocols or critical Windows features they can take advantage of, along with bug fixes and other things that maintain a very high compatibility bar so things don't get broken.
1) Learn how the debugger works in visual studio. Stepping through the code will make solving your issue trivial 2) Create a function that is responsible for summing numbers, then create a unit test for that function. 3) There is a formula for summing numbers like this. Using the formula will make the program much more efficient because the for loop will not be required.
Some things when you type C# will give you the code editor with the example. I tried C# List and C# Dictionary. They both showed it. 
I dont have such edit box by your link (opera)
I don't think that uses .net framework? Doesn't it have it's own CLR? Look in the source.
It does not work as good . Search term relevancy and figuring out what you are after is key here , which with bing in a couple of terms i tried with is off the chart
I'm not sure what the correct form/code it is that you need, but I can see that you have nested methods. You can't do that in the version of C# that ships with Unity. You need to move the `DeductPoints` method out from inside the `Update` method: void Update() { } void DeductPoints(int DamageAmount) { GlobalScore.CurrentScore += 25; } That should solve the compiler error. Now, whether or not this behaves the way you intend or expect when you run the game is another issue entirely. Good luck!
What about international phone numbers?
Thank you. :)
You can manually set a scheduled windows task to run every 1 minute, but that's as low as it will go.
I didn't try reflection or any networking but I wonder to what extent they're still there?
ReSharper and OzCode.
Pluralsight has some good courses by &lt;Kevin Dockx&gt;. While Pluralsight is a subscription based platform they do have a free trial.
Same shit. It's .Net
My personal favorite: &gt; Per your feedback, we have moved the solution name information from the status bar control back to the top of the IDE.
The sum from 1 to 5 = 15 --&gt;(5 * 6)/2 = 15 Sum = (n * (n + 1))/2
Is it 64bit yet?
`dotnet format` looks great. I might look in to integrating this as part of our CI/checkin process at work.
As a developer I would have told everyone to get the hell out while they can... Then left.
This is a truly awful list, at least if the picture is supposed to be some sort of good learning path. There are things in there that will be looked down upon by skilled developers, like lazy loading. you don't need that if you know what you're doing. Azure, Signal R etc..these are very particular things that you only need to know if the situation requires it. Meaning many things on this list is stuff you shouldn't know by default, and only learn if you need it. What you need to know is the basics of SQL, not nosql. The basics of unittesting, not particular frameworks for it. The basics of design patterns, not singleton in particular. There are so many things wrong with this roadmap that it's pretty much useless
There is a console C Sharp compiler inside the Net.Framework folder too.
C# catching up with python/matlab style matrix functionality by the looks of it.
Hah, didn't know this, was pleasantly surprised that it supports autocomplete etc. Of course after I write my small play program I press F5 to run it as the idiot I am...
I find the use of `^` symbol to denote "from end" a bit confusing as it's used to mark the beginning of string in regular expressions. Python uses negative values to set the direction of the index which I find more intuitive.
Point is you don't use the .net framework. You claimed .net core would never replace the .net framework in embedded, when the example you supplied doesn't run even run the .net framework. 
Would you care to elaborate on that please? Is it better to explicitly define relationships than using something like this?
I didn't try, but I think it does. Check out this article: [https://dotnetcoretutorials.com/2018/12/08/getting-setup-with-net-core-3-preview-and-c-8/](https://dotnetcoretutorials.com/2018/12/08/getting-setup-with-net-core-3-preview-and-c-8/) , the part starting with " If you want to use C# 8 features in VS Code "
There were a lot of different syntax versions discussed on GitHub, you can check it out and add your suggestion if no already there ;)
Why the heck would it be? It makes no sense to add, and such a change would surely lead to massive amounts of bugs.
Repost: https://www.reddit.com/r/csharp/comments/apspcw/readonly_ref_variables_in_parameters_and_readonly/
&gt; Why the heck would it be? It makes no sense to add, Maybe so by 2037, Microsoft can finally get rid of the 32-bit subsystem?
Never going to happen with the amount of 32-bit business software out there.
I usually use DuckDuckGo. it doesn't filter/censor results (for copyright and stuff).
I've been using [.NET Fiddle](https://dotnetfiddle.net/). Supports autocomplete and remembers your previous documents. 
Yo, use 3 backticks (\`) for code blocks ``` This is code ``` Stack overflow is a better bet for this most likely.
im a begginer with this XD the thing is i dont know how to make the character stop when pressing down a key. I've tried with If( (Input.Getkeydown([Keycode.Space](https://Keycode.Space))) but it always has an error. I need to put a variable or something?
I dislike the query syntax since it feels so foreign to the rest of the language. I think it comes down to personal preference mostly.
The answer is: never.
I ended up going for the XPS 15 9570. I was flipping back and forth between them, but in the end just couldn't justify paying $300 more for a device that doesn't have a GPU. In retrospect, while the 15 is a great device, I've dealt with too many small issues (squeaky space bar, sound popping) that wouldn't be going on in the surface book, and very rarely make use of the GPU due to the fan noise and battery drain. I would likely be happy with a surface book 2, but they are both absolute beasts.
&gt;Backwards compatibility is a huge selling point of Windows. Sometimes, anyway. From the article: &gt;Deployment to Windows Mobile devices is no longer supported in Visual Studio 2019. Attempts to deploy to a Windows 10 Mobile device will result in an error saying "Deployment to Windows Mobile devices is not supported in Visual Studio 2019". If you need to continue working on an application for Windows 10 Mobile devices, continue to use Visual Studio 2017. Anyway, it's one thing to keep an old subsystem going for compat reasons. It's a whole other thing to have your thousands-of-dollars flagship IDE product rely on it. To answer OP's question, they keep adding satellite processes to workaround this legacy architecture choice.
This! I've been using it for my team to share some pretty simple samples. Only downside is it doesn't support newer features yet.
I would say that it is better to explicitly define your Schema, yes. Rather than obscure your definition beneath something dynamic like that. It is more conducive to being changed in the future should it ever need to be, and it is easier understood by another set of eyes looking in.
It makes every sense to add as they themselves also run into memory problems with large solutions and have to move more and more stuff out of the IDE into dedicated processes that are 64bit. 
Wow. The author of the post published the original. üò¨ I'll let this one up in case someone didn't see the original but if the consensus is that it needs to go down, I'll delete it personally. Thoughts?
What do you mean with '32bit subsystem' ? win32? As that's 64 bit.
When you want to do an "outer apply" clause.
I'm german and I though this was about a nacho bar I haven't slept enough
So you're formulating joins with .Join(), embedding the final projection into the last .Join() call? Or .GroupBy(), where the 'into' overload is crystal clear, right? Especially if that's the final projection. The written out query with query syntax is easier to read. 
For simple queries, I agree, personal preference. I find that when I teach this to apprentices, they pretty much all prefer query syntax at first, but then they adapt to method syntax and find that easier once they're more familiar with lambdas. I certainly prefer method syntax. But the author does make some good points, where method syntax is much less readable *in certain, specific cases*. And in those cases, I think query syntax is the obvious choice.
It‚Äôs really good for expressing some complicated queries in an easily readable and easily writable way. I deal with some really old and poorly thought out databases and the queries I have to write sometimes are crazy. Method syntax can be extra complex when building multiple joins, grouping, etc. The let keyword alone makes learning query syntax worthwhile 
Moving stuff out of the IDE to dedicated processes is the right approach and is the reason why the IDE itself doesn't has to be 64bit.
&gt; if you compare two string typed elements in a linq query, it produces a CompareString(a, b, false)=0 expression. This method is a Visual Basic method defined in Microsoft.VisualBasic.CompilerServices.Operators. However you have to check for that and add special code for that specific call, a clal which is completely unnecessary, remember we're talking expression trees. The article explains this point (it's #63). The TL;DR is that VB supports optional case-insensitive string literal comparison, which is implemented through the extra parameter to CompareString. &gt; I think of Option Compare Text as more a back-compat option but I get why it existed in the first place. There are a lot of contexts where you want string comparisons to be case-insensitive. &gt; In fact, most contexts where I use strings I want them case-insensitive. &gt; Essentially all contexts outside of passwords and encryption keys. But everywhere else I don‚Äôt want my typing a literal lazily to affect my results. Yes, I‚Äôm that monster who uses case-insensitive collation on SQL Server because I value my productivity. And if you consider that VB‚Äôs history includes not only VB6 but VBA for Office products like Excel and Access and VBScript for Windows and that one web browser that one time, ‚Ä¶ ain‚Äôt nobody got time for case-sensitivity. That said, I accept that .NET is a generally case-sensitive API and I don‚Äôt use Option Compare Text because it only affects the language. If there was an setting that affected all the .NET APIs too I‚Äôd flip that sucker on and never look back. 
I've found it's easy to use short syntax for pythons list comprehensions using Linq query syntax: from element in list where element.HasSomething select element.SomethingElse This does alot in a concise and readable (arguably) way.
If you're working on any decent sized solution, the constant out of memory errors would suggest otherwise. That they don't even try tells me that we're going to be stuck with more of these "lipstick on a pig" releases that don't tackle any real engineering issues.
It's a sign things aren't great. You'll run into this when you write an extension for VS: it has to be 32bit. If your extension itself requires 64bit, you therefore have to create a separate process. This sucks as you now have to do interprocess communication and be aware of the bit differences. It's not 'simple'. 
The Intellisense is pretty slow to pop up, at first I thought it wasn't supported. It would also be nice if there was some canned code samples provided that you could run. 
Aside from what other people have said, you should the feature reddit provides to format code better, like this for example: static void Main(string[] args) { Console.WriteLine("Insert a number"); int sumUpTo = int.Parse(Console.ReadLine()); int sum = 0; for (int i = 1; i &lt;= sumUpTo; i++) { sum = sum + i; } Console.WriteLine("The sum is " + sum); }
No, WoW64. (And since you mentioned it, Win32 being 64-bit is one of the many ways you can see what a design fuck-up this is.)
Personal preference just doesn't work if there is more than one developer (simultaneously or over time) working on the same code base. Also complex queries are much better readable using query syntax.
Not true at all. It comes in handy occasionally when writing complicated Entity Framework queries. Method syntax is definitely preferable, but there are queries that cannot be express through it, that can be expressed through query syntax.
If you care about performance, you would do raw SQL statements in that case.
I'm not sure lipstick on a pig is fair, though. They _are_ moving stuff out of process, bit by bit. Unfortunately, they also break plenty of stuff in the meantime.
&gt; Moving stuff out of the IDE to dedicated processes is the right approach "Right" as in terms of "a suitable compromise". Not right as in good for the long term. &gt;and is the reason why the IDE itself doesn't has to be 64bit. Why on earth would you believe this? Would you also the same if the main IDE were 16-bit? Would you also argue that 64-bit Windows should still ship with a _16_-bit subsystem?
Go watch Sebastian Lague's videos on Unity, all of his tutorials are in C# 
Here is how you do a sql select query [https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlcommand?view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlcommand?view=netframework-4.7.2) Here is what sqldependency does(not what you think it does) [https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqldependency?view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqldependency?view=netframework-4.7.2) Here is how to use sqldataAdapter [https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqldataadapter?view=netframework-4.7.2](https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqldataadapter?view=netframework-4.7.2) &amp;#x200B; Please read the doc's as they explain what ( SqlConnection, SqlCommand, SqlDependency) do. What your doing right now is metaphorically using a house to hammer in a nail, it doesn't work like that, not even close XD &amp;#x200B; Good luck learning
So I'm an Emacs guy. VS is a good IDE if you like that sort of thing. I was introduced to it as a student, and it always felt like I was just vaguely guiding some code along instead of really writing and understanding something. Plus, I use Linux at home, so I'd have to run a VM just to use it. Using a modular text editor lets me get closer to the code, and requires me to think about what goes into both the editor and the code I'm writing more than if I was using VS. I think VS is really the domain of people who have been programming for a few years. They know what everything is and how it works, and they just want to ship an app. I don't think it's good for learning, though, just because it abstracts so much from the user. It wasn't until recently I learned how to make a C# app without VS, for example. 
Again with the broad statements. Just because the query is difficult to define in code doesn't it has bad performance.
"Difficult" queries have no relevance. When you are doing joins, grouping or projections across tables with tens of millions of rows each, you do not rely on Entity Framework to automagically generate queries that make proper use of your indexes.
&gt; "Difficult" queries have no relevance. I literally said the reason to use query syntax was because of queries that were difficult to express. Who said anything about tables with tens of millions of rows? I certainly didn't. What on earth are you on about?
First off, your syntax is off You use if statements with the following syntax if (btnRoses.Checked == false) { MessageBox.Show("Please select a flower"); return; } if else(btnTulips.Checked == false) { MessageBox.Show("Please select a flower"); return; } if else(btnOrchid.Checked == false) { MessageBox.Show("Please select a flower"); return; } Second your logic is incorrect If any of the roses are not checked you will display a messagebox and exit the code block What I think your trying to achieve is in terms of logic is this: if(btnRoses.Checked == false &amp;&amp; btnTulips.Checked == false &amp;&amp; btnOrchid.Checked == false) { MessageBox.Show("Please select a flower"); return; } Meaning if all buttons are not checked, display a messagebox Thirdly you can make your if statements shorter and more readable by using the `!` operator before a boolean: if(!btnRoses.Checked &amp;&amp; !btnTulips.Checked &amp;&amp; !btnOrchid.Checked) { MessageBox.Show("Please select a flower"); return; } And lastly if you want you make this even more readable you can use the parent element in winforms like so: if(FlowersGroupBox //assuming all your buttons are grouped in a parent element .Controls //use the controls property to get the child elements collection .OfType&lt;RadioButton&gt;() //of type radiobutton in the list of child elements .All(r=&gt; !r.Checked)) //if all are not checked { MessageBox.Show("Please select a flower"); return; } Hope this helps. &amp;#x200B; &amp;#x200B;
That's basically my only preference. Joins in query syntax, everything else in methods.
There's nothing preventing from doing both. Moving stuff out of process also adds more inter-process overhead than whatever happens from recompiling in 64-bit and fixing the resulting issues. Yes, it will take time and effort away from "new feature development" but the amount of strife and lost productivity they've caused in developers for YEARS now massively outweighs whatever one-time bandaid-ripping pain they need to go through. If the Office team was able to turn that ancient codebase to 64-bit and gain benefits from it, there is zero reason why the DEVELOPMENT team can't engineer a DEVELOPMENT tool into 64-bit and gain all the benefits of it. That they never came out with any real technical reason to not do it since that hand-waving "we don't feel like it" blog post from 4 years ago is telling.
Does using `let yearsWorking = yearsWorking(person)` in the example you've provided locally on the `yearsWorking` invokation evaluate before executing the remainer of the SQL? 
Duplicate question. Lock thread
&gt; If the Office team was able to turn that ancient codebase to 64-bit and gain benefits from it I don't know about Office 2019, but Office 2016 _still_ hides the 64-bit option. They clearly still don't recommend it (but probably only for add-in reasons).
Yes! I've noticed this when trying to include things like string interpolation or value tuples. Strangely, the linting seems to accept the syntax, just not the compiler. 
Me too! But [.NET Fiddle](https://dotnetfiddle.net/), reloading the page with Ctrl-R or F5 does execute the code. 
Yes, it evaluates before the remainder. But, remember that LINQ is lazy, so nothing will evaluate until you use .ToList() or .ElementAt() or something like that.
Hence my question, I‚Äôm wondering if there is a way of applying C# business logic internally to an EF query that will locally evaluate after calling .FirstOrDefault() etc
Step down from your pedestal "king query" and read the article. I too never use query syntax but the author does point out some excellent examples of where it is much clearer then method syntax, especially with the let keyword. Making blanket statements is not useful here.
I'm not sure I understand the question. By calling .FirstOrDefault() the evaluation will start and you can change members inside yearsWorking() that will make it execute differently each time
Updated some code, needs more work, but getting closer to organized, and structured.. 
Excellent article. I myself like the method syntax but when searching for examples I find many people use the query syntax. I need to be better at translating between the two. I wish there was a tool similar to a regular expression generator that would assist you in building the proper method or query syntax. The closest I have found is LINQPad, but it doesn't assist you in building the syntax but rather is a small test environment where you can test the syntax.
&gt; This is for a homework assignment.
It was originally slated that the UI: no. Debugger slated to be out-of-process 64-bit. Unsure of status in Preview 3.
UI framework is a critical part of "runtime for desktop". So if you want to recommend one, I think you should also have an answer for that.
Given my experience with plugins bringing down devenvs, I am kind of sympatethic to the idea of external processes with IPC.
just for reference list.Where(e =&gt; e.HasSomething).Select(e =&gt; e.SomethingElse); While i would always put separate Methods on a new line list.Where(e =&gt; e.HasSomething) .Select(e =&gt; e.SomethingElse); doing the same in query syntax leads to more lines from element in list where element.HasSomething // quirk of placing options a little off select element.SomethingElse &amp;#x200B;
Right as in security and application stabilitiy.
I've heard a lot about ReSharper, and I do like JetBrains. How much does it have to set itself apart from a new versions of Visual Studio plus something like Roslynator? It seems like their features are just steadily being implemented by the VS team. 
oh absolutely, it works great in e.g. Rider for a lot of things. But you can't outsource everything to a separate process. 
Ah yes WoW64 is indeed a design mess. Gets me every time that I forget to set the registry key for my VS extension in that particular part of the registry ... Win32 is indeed not properly named, well it was in the time it was shipping ;) But that's life of working with software that lasts forever: everything and their brother depends on it after a while and changing it is simply not in the cards. (e.g. Kernel32.dll and user32.dll no way that's going to change)
If this isn't a link to a page that says "never", I have objections.
Joins and lets, that's pretty much all I use query syntax for.
There are some other frameworks but most of them require purchasing for any commercial usage. So the only one I have found is PDF Clown. Maybe it contains your required functions. [https://zetpdf.com/](https://zetpdf.com/)
You can call AsEnumerable() then continue your query
Ugh, for some reason they removed the experimental option to disable the compact title bar. Wish they would let me revert that change.
Hey, my advice not connected with question - please write names of members, methods, variables and other stuff only in English. This is global standard. Especially, if you search for the help in the internet. Writing in other language makes code harder to understand.
Is this a new formatter? If it‚Äôs as evolved as Prettier (or going to be) then that would be awesome. Running formatting on save with Prettier has really (literally?) transformed how at least I write JavaScript. Having something similar for C# would be great as well.
A: never, and if you ever use query syntax seek help immediately you unhinged maniac.
It looks beautiful (subjective ofc) until you have to wrap it to get Distinct() or any other extension that's not available through query syntax...
obviously where it is more readable. This is the reason why Microsoft offered 2 syntaxes.
I think ReSharper does it. I've never used it to convert to query syntax, but pretty sure I've used it to convert to chain methods.
Not the person you replied to, but I wanted to point out a few things that will help. `Strings` in C# are just `char[]` arrays, so you can iterate over a string like this: string input = "555-867-5309" // for-loop for (int i = 0; i &lt; input.Length; i++) { char c = input[i]; if (!Char.IsDigit(c) &amp;&amp; c != '-') { //handle invalid character } } // for-each-loop foreach (var c in input) { // omitted for brevity } Hope this helps.
That looks even better! :o
Indeed. Both forms have their pro's and con's depending on the situation.
What is your TargetFramework? Because if that's set to framework, you'll have trouble 
2.1
Have you set a runtime identifier in the csproj? Details: [click](https://docs.microsoft.com/en-us/dotnet/core/rid-catalog) 
I haven't! I've not had to do that before though. I can't actually find where to put it.
Ok. Found where to put it elsewhere. Getting the same errors though.
I'm assuming you're trying to build a framework independent deployment, which doesn't require .NET Core to be installed on the machine?
Not really. It's only ever going to run on the Ubuntu box. .NetCore is installed on there.
What if your code-first entities are ‚Äúautomagically‚Äù defining your indexes? Do you state your index specifically in your query to the database too? 
You can use [Sandcastle](https://github.com/EWSoftware/SHFB) to generate html or .chm files for XML documentation. The results are practically in the same layout that you'll find over at MSDN for .NET's docs (probably because Sandcastle was originally developed by Microsoft). Sandcastle is free. I think Doxygen is another help file builder but many of its features are behind paywalls whereas Sandcastle is free.
Ok. Something screwy was going on. I just re-installed the dotnet framework, and now it's working. Thank you for your time, truly appreciated.
The answer without reading the article? Always use method syntax.
This is correct. A little more info: https://codeblog.jonskeet.uk/2011/01/14/reimplementing-linq-to-objects-part-36-asenumerable/
You need an if statement in the update for that script that checks if the KeyDown.Enter was pressed, and in the off statement you need to set the velocity for the player to zero or something like that I think.
Try this build command before you publish. dotnet build YourSolutionFile.sln --configuration debug --runtime debian.9-x64 dotnet publish YourSolutionFile.sln --configuration debug --output /PathToDesiredPublishFolder
It does not support it. OmniSharp is what provides intellisense and it does not understand the syntax yet. Yes, you can load the files, and yes, you can use dotnet run in console like you could in any editor, but you will have tons of errors and not be allowed to debug start or enjoy not seeing errors everywhere :P
I don't think its good for any software engineer to talk in such absolutes. I notice that most junior developers somehow get concepts in their head that "any other way than X is **wrong** or **bad**". They tend to be very opinionated. I think as you mature in your development career, especially into team based leadership positions you will realize the answer to most questions becomes "it depends.". This is a good thing. Yes there are best practices, there are also bad practices. There are startups that whip up terrible code to get off the ground and end up being very successful. There are also big enterprises that have large projects come crumbling down because they over-engineered their micro-services architecture. Anyways /u/carrot_gg I am not personally attacking you, I am a senior engineer that has worked at several companies now and I read some of your comment history. Remember as you learn more and interact with your business, your customers, your team members, to keep an open mind and make choices that are best for everyone and try not to stick to broad or blanket rules. Just like with design patterns, you cant always apply a pattern to its letter everywhere. Sometimes you have to bend it to work best for you.
For anyone who doesn't want to watch the video regarding the change, long story short you need to use VS2019 Preview to do .NETCore 3 development.
Sure how do I run raw SQL on my \`List&lt;string&gt;\`?
Then you have objections. What would you suggest instead of \`let\`?
The first thing I do when starting a new Vue project is to get ESLint to work so that it auto formats and fixes my code. It saves me so much time. I never understood how valuable it was before I used it.
I think it's "SQL, the right way." If you deal with SQL, then the LINQ query syntax is basically a way smoother ride. Instead beginning the query by what you want, forcing you to twist and turn your query to conform to that statement.
And that's why you should pretty much never name something after the current tech available. Examples of more bad names are XMLHttpRequest and AJAX. Those aged terribly.
It's a bit chuggy so far. I'm sure it will work out ok in the end. We're doing Brexit in less time that MS have to finish VS19.
Yea it's not bad. Just annoying 
Joins are a fucking nightmare in method syntax. 
This is very well written but it seems like a lot of work! IMHO an easier way to achieve persistence ignorance is to let your dependency injection container do the work for you. Not only do you achieve persistence ignorance but you achieve transport ignorance as well. Than you can use a clean, simple, loosely coupled architecture such a n-tier. And you don't have to add layers or jump through hoops. When you restate the problem in terms of dependency injection you a.) offload your worries to the DI container, b.) add no additional complexity to your architecture. Here is how we can look at the problem: Say your controller needs an implementation of `IOrdersService`. Should you inject an implementation that writes to MSSQL server? Should you inject an implementation that writes to MySQL? What about an implementation that writes to neither but instead makes a Web API call? The answer is simpler than you might think - you DI container just needs to where to look to give you back the implementation you need (hint: your connection string). You can read more on this approach [here](https://github.com/leaderanalytics/AdaptiveClient) and get a working demo [here](https://github.com/leaderanalytics/AdaptiveClient.EntityFramework.Zamagon). 
I had a similar learning path. I liked VBA at the time because I wasn't a developer but I could do some really cool things with VBA. Now that I have learned c# and a few other languages I can't stand VB anymore.
with lazy loading you don't need joins
We can't have a serious discussion about async programming in C# until we have async constructors. Until then we can only talk about the best way to hack it.
Never! I've always felt comfortable using method syntax. 
Sometimes you need to join on things that don't come from the database. Earlier I left joined a list of entities to a range of numbers. Also, I noticed that using nested properties generates a series of nested SELECTs, while using joins generates actual JOINs.
I‚Äôd recommend FileHelpers.net. It can parse CSV files into POCOs and then you could map them to Entity Framework models and save them to a database. 
The PowerShell Import-Csv cmdlet *is parsing*, there's nothing native about it. Hundreds of lines of code.
I prefer query syntax, but never really use it because I work with multi-layer'd collections all the time, and I haven't been able to find the EF Core "Include()"/"ThenInclude()" functionality in the query syntax.
I've only dabbled so far, but some of our solutions are fing massive. So I'm always a bit nervous pre-release.
Nothing. I don't think let weighs up for it.
What breaks it? I believed VS just used the dotnet cli tool behind the scene.
They literally just decided not to have support for it in VS2017. That's what I'm getting out of it. Watch his other videos. It works and then when you follow it doesn't .
Hate query syntax because: It is totally redundant, you can do everything in method syntax. It introduces a new programming language to learn and maintain, one that doesn't work anywhere else. Method syntax keeps the query in whatever language you're already using.
If you don't have a reasonable alternative for `let`, then I have objections.
Alright, we can disagree on that. That's perfectly fine.
using (TextFieldParser parser = new TextFieldParser(@"c:\temp\test.csv")) { parser.TextFieldType = FieldType.Delimited; parser.SetDelimiters(","); while (!parser.EndOfData) { //Processing row string[] fields = parser.ReadFields(); foreach (string field in fields) { //TODO: Process field } } }
What's wrong with a static builder method?
I ducked around with this a little. You can do everything, including reflection. However, I think this is running in a container because it seems to resent its self when you destroy the environment.
Agreed. 
Difficult to use with dependency injection.
I thought this kind of question is what the subreddit was for. &amp;#x200B; What is this subreddit for then?
True, but if I could access the methods it uses, I wouldn't have to re-invent the wheel...
Thanks! Is that .NET native or do I have to download a library?
I‚Äôm getting insanely long build times on a .Net Core 2.1 project after this update...anyone else seeing that?
Just the other day I got a Web API running off my Raspberry Pi. I used the [dotnet-install.sh script off this site](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-install-script), ran the script, which did all the downloading and installing for me. Then I was able to build and run all the stuff I wrote. Sorry I'm at work right now or I'd provide more details (like making a symlink to the dotnet program). Also, when dotnet builds on Linux, it'll output the programs name without any extensions. If your folder name is "program", in the bin/Debug/netcore2.1/Platform/ folder, you're going to see a file named program. Chmod 755 it, and run it.
I think you are fine posting here. SO is also a good place, even just to search first 
What‚Äôs the story for vscode the sdk?
WHAT EXTENSION IS THIS
When you install .NETCore you get the CLI tools for it. So you want to learn how to use things like dotnet build, dotnet run, dotnet restore. All of those command line commands. You need to install the c# extension for the intellisense and the nuget extension to install packages 
So the sdk works fine, vs2017 just doesn‚Äôt recognize it?
So the sdk works fine, vs2017 just doesn‚Äôt recognize it?
Yea unfortunately.
For OpenGL, I would go ahead and check out OpenTK. https://github.com/opentk/opentk You can grab it from NuGet and get started. Its super low level, but it prevents a lot of the tedious code you'd have to write between the .NET and C layers.
&gt; there are queries that cannot be express through [method syntax], that can be expressed through query syntax. No there are not. The query syntax gets translated into linq methods by the complier. The query syntax is just a different format for chaining the methods used by the method syntax.
You are spot on mate! Read this earlier and just knew it would be something as simple as this. Thanks very much!
 You are spot on mate! Read this earlier and just knew it would be something as simple as this. Thanks very much! 
Thanks mate I appreciate the quick response. I'll take a look at this üòÅüòÅ
Ah. You don't need the `-r` flag when compiling for framework dependent deployments.
Microsoft.VisualBasic.FileIO.TextFieldParser is the native CSV parser for .net. it's not the fastest, but it is 100% compliant with the CSV standard.
Uh. Honestly, it sounds like some tool is messing up your system.
The beta has initial support (not sure about ranges). https://github.com/OmniSharp/omnisharp-vscode/releases/tag/v1.18.0-beta5
Ok
Not true at all for EF queries. The ability to use `let` in query syntax makes it possible to use queries that method syntax can't do.
i saw something very similar to this a day or two ago, i can't find the thread but the issue was either MalwareBytes or Windows Defender. Turned it off and it installed fine.
It's not built into .NET. PowerShell and VB have built in CSV support; C# does not. You could reference their libraries, but really, you should just reference a NuGet package like FileHelpers or https://joshclose.github.io/CsvHelper/.
Yes, Join method syntax is how you slowly die. Method syntax for everything else. Mainly because you can put things in any order you want.
Only if you could add your own syntax elements... F# has it, so maybe C# will get it some day as well.
&gt; The ability to use let in query syntax makes it possible to use queries that method syntax can't do. let is just .Select() creating an anonymous type. Given a string array named 'strings', var earlyBirdQuery = from sentence in strings let words = sentence.Split(' ') select words; compiles to the same IL instructions as var earlyBirdQuery = strings .Select(sentence =&gt; new { words = sentence.Split(' ') }) .Select(anon =&gt; anon.words);
TextFieldParser does this for you though - you'd have to do a lot of assembly references and convoluted code to execute powershell commands from C# Instead just add a reference to Microsoft.VisualBasic in your project and run the code. Remember that both C# and VB.NET creates .NET code, but can use the same libraries written in either.
Unholy
It's basically SQL though.
Lazy loading is an anti-pattern
If I had any gold, I would give it to you, thanks!
Thanks, I didn't know about TextFieldParser that will probably help alot. And no, I didn't want to run PS inside C#, that seems backwards to me. I know it is possible, but I understand it is not optimal. I was just looking for a .net interface that had similar (if not the same) functionality.
Is there a reason you have to use such an old version of Visual Studio?
Keep in mind that PowerShell does a lot of guesswork at what you want and gives you psobjects - and you don't have to care about variable types. In C# you must be explicit about what you want - so you must either have prepared a class of which you can turn each csv line into an instance, or you handle it like arbitrary data and put it in a System.Data.DataTable for further processing. There is the dynamic keyword but that's just asking for errors - you lose intellisense and any mistake you do is going to crash your application. In PowerShell you just get null written to the console.
Thank goodness, no.
That is really good to know, thanks!
Trying to save money.
You can use Visual Studio 2017 Community Edition for free: https://visualstudio.microsoft.com/vs/community/
It is in your best interest. You'll be able to get faster answers that people have spent a lot of time posting. That community is more suited for these types of questions. 
https://www.nuget.org/packages/FileHelpers/
Samples should be easy to find, but feel free to hit me up if you have any questions. Note that it won't be in .NET Core until v3.0 later this year. 
Starting to look better now! Just a couple of comments: - Use `ILogger`, not `SocketLogger`, also you should not need to pass the socket to your logger. The calls to the logger should only have the _responsibility_ of taking the message, not how it gets there. - How you've written the TemplateHandler, ask yourself a theoretical question: If a user came and asked "Hey can I have this as a Console Application Please" would your template handler support that without changes? At the moment the answer is "not really" because you are requiring the template handler to have knowledge of things outside of its control like the Socket. If your code smells like code that _could_ be in a library, then it should be written in a user-agnostic manner. Obviously there is still some clean up in terms of amount of indentation but I imagine you know that based of the gist I provided. Keep up the good work!
I did not know that, thanks!
Thank you again, for the valued input. I did that to the sockets as I figured i could centralize the code for sending responses to the client down from a 4 tier name to _logger.ClientLog(), I see you point now and think I will implement another separate interface for Client Response Handling, and remove SocketLogger altogether and instead of having a 3 tier name to get to server console window, I will then have both as 2 tier names. :) Doing my best to remove indentation where possible, indentation to me makes it more readable unfortunately.. :/
LINQ is not SQL dude
Just i thought ms would change. Asshole move to push a new product. We got vs enterprise. They want us to move to core but make us pay new licenses ? Im not even surprised.
There need to be a Join method. That's how it works internally. The query syntax is just a sugar around methods. There needs to be a `Where` method that accepts predicate so `where` query expression can work on this type. That's how some monad frameworks work https://github.com/louthy/csharp-monad 
Yea that's why at my job I'm gonna try to make space for the vs2019 preview and see what's up
Also if you want to kick them in the balls, take your application and whenever you make a change you move over to VS Code and use a dotnet build and run under the netcoreapp3 and the new configuration. Are you using winforms or wpf?
Sounds like an opportunity for Jetbrain‚Äôs Rider.
Vs code does not meet our rewuirements. We use wpf. In the process of thinking about moving to dotnet core. But i think we are gonna wait and see if they fuck it up as usual
Yea the reason I say to just build and run there is because of the new wpf and winforms features. I don't know how extensive it is yet.
Given that rider support NETCore3 preview.
Syntax.
tldr: `from _ in await this join __ in await value on null equals this where default as object is false orderby true descending select new bool { }`
Interesting! Could you explain how it distinguishes itself from other detouring libraries: - Detours / Moles from Microsoft - https://github.com/citronneur/detours.net - https://github.com/xcvd/Detours - EasyHook Etc?
&gt; Also complex queries are much better readable using query syntax. Not everyone agrees, but sure, if you get used to it, it‚Äôs generally clear enough.
Can't say I'm familiar with these libraries but looking at the documentation/source code they seem to work on passing delegates to functions in whereas my library works on passing a class type and a method name. Also, I'm not sure about [detours.net](https://detours.net) but detours doesn't have support for x64 hooks whereas mine does :)
I initially disliked query syntax as I thought it was just useless syntactic sugar, but after going away and using Scala for a while I learned to appreciate the power and cleanness of Select, SelectMany, Where etc, not just on enumerables but also anything else that can support those methods. Now I use query syntax frequently - it's much cleaner than method syntax, which becomes a mess of brackets, for something like the following: from i in Enumerable.Range(1,50) from j in Enumerable.Range(1,30) from k in Enumerable.Range(1,20) select (i,j,k) It's just annoying that in C# not many methods are supported by query syntax. F# has many more. Strangely, VB .NET also has more and also allows omiting the select statement at the end to automatically project anything, which is handy. The query syntax is also crippled by the incompatibility between anonymous types and named tuples.
What do the call stacks look like?
I haven't actually taken a look but I'd assume it looks like the original function is being called. I'll take a look for you later and edit the comment if needed.
You can put the query in a line
Yes you can totally learn C# just like any other language. I'd suggest looking at the sidebar to get started.
Yeah why not...also you can try qt framework..it's mostly written in c++ and it's cross-platform But if you do stuff only with windows maybe it's better to do just c#
I don't think I've ever heard of anything like this before or seen a need to do it. Could you explain why you would need to detour a function? Perhaps I misunderstand though. In my server application at work, using our own protocol for talking with embedded devices I have a way of routing requests to certain functions. Is this similar, or is it something else?
Yeah I guess I never really thought it through. Thanks
Huh? A new product? They are deploying a new version.
Interesting. Are you familiar with Prig? It is designed for "test indirections" rather than "managed function detouring". I believe your vobulary is rather uncommon and unique to your background. May I ask where you learned that phrase? &amp;#x200B; [https://github.com/urasandesu/Prig](https://github.com/urasandesu/Prig)
That was surprisingly insightful. I hadn't caught on to the importance of this feature when using nullable reference types.
I think memory allocation is a big part of the bottleneck here that Parallel.ForEach is not necessarily going to help with: We have a bunch of pixelated data that is being copied over from a ton of image files the users gave you. Within the loop, at the very least another string copy is taking place to produce part of the initializer for BarcodeImage, which means there could be a lot more string operations and thus copies going on underneath what we can see. The image itself also might be getting copied again as part of the formation of the BarcodeImage return object. We could have a lot of memory contention going on throughout this method call which the garbage collector is screwing up even more. I wouldn't be surprised if memory contention was still the biggest bottleneck after the improvements you made. I'd be curious to see how using ref parameters and Set&lt;T&gt; for your dataset may improve performance. One last thing...unless this was changed in the past few years, Parallel.ForEach does not guarantee that a concurrent operation will take place. It lets the runtime decide if there might be a performance benefit to using your parallel car. Sort of like how making an index does not guarantee a DB query will run faster, it just gives the engine moire possibilities to consider while it generates its execution plan.
I'll explain using my friend's example. They were using a third party library for some database operations and wanted to analyse the query string a certain function was using, edit it if necessary and then log the query string that was used. Since the query string was a private variable there wasn't an easy way to do this. To solve this they created their own function that took the same parameters and detoured the original function call (using my code) to the new function that they had just created. This way, the function they created received the query string as a parameter and they were able to analyse it within their function, perform the edits they wanted and do the logging all without having to make any actual changes to the source code of the third party library. &amp;#x200B; Another usage that I have personally used this for is to nop functions that I didn't want to be called. For instance, there was a library I was using that was doing some annoying logging that I had no way to deactivate (without editing the source code.) So I simply detoured that function to an empty function that way every time it was called, it detoured to my empty function and did nothing.
Didn't know the library existed thanks for sharing! In terms of my vocab, I do a lot of coding for security-related things (think malware analysis etc) and a lot of people in that field generally refer to it as function detouring. Had no idea it had a different name in the software dev field though so thanks for letting me know.
After searching for detours, I found that it is actually a quite common name, also used in Python. Have a look at this nice comparison feature matrix the Frida dev made that could be used as inspiration for creation a similar matrix for [detours.net](https://detours.net), Detours and Juno: [https://github.com/frida/frida/wiki/Comparison-of-function-hooking-libraries](https://github.com/frida/frida/wiki/Comparison-of-function-hooking-libraries)
Many thanks for your feedback.
What parts of those code samples can be a "snippet" that would be useful elsewhere though?
It feels like sql. You know where I like to write sql? In a database.
I almost never need to be in those cases though. I could see if you're using EF Core or something and you need to write a linq query that translates to sql, it would probably be better. But we use dapper so we just write sql.
why don't you just write sql?
Hi! Thank you for recommending my repository! It is thought to be as simple as possible, and at the same time, very robust and easy to implement improvements.
If you're writing complex queries in linq, fuck you.
Yes, makes sense. Prig internally uses the managed profiling API, and sinking profiling instructions into code is really no different from function detouring. The other common names I've seen for this in software development circles are "Invasive Software Composition" (based on a Ph.D. thesis of the same name - a great read!), and aspect-oriented programming. Although, these two terms really refer to more of the "Policy API" for describing "Mechanism API" of function detouring. In other words, someone might write a "weaver" like [PostSharp](https://www.postsharp.net/) or [Fody](https://github.com/Fody) In practice, because the .NET runtime doesn't have great support for weaving, we engineers tend to avoid it in production code since it screws up our stack traces.
why did you indent the middle line?
When do you ever write queries like that? Only for an ORM? If you're using an ORM, query syntax is literally built after sql queries so it makes sense. That's really the only place that you should be commonly using it though. Rarely anywhere else will you actually be joining stuff together
You can learn C# but remember that if you are developing a web application you will never get away from JS completely, you can however get some sanity back with TypeScript. 
what do you gain by adding that Application Layer?
The Application Layer is the gateway of the entire application, which can be a console application, a web api, etc. In addition, in this layer the steps to perform a certain task can be defined. It is responsible for creating the necessary domain and interacting with other services (external or not). 
Thanks! . I'll do my best to learn this one though the 'Good luck' on you seems to be a sarcastic one hahahaha
Ah. Well, you could always have a factory class.
I don't really use Yasnippet right. Once I have code broken down into standard boilerplate that I understand, I just save it without any hardcoded variables to my templating system, so I can just write it immediately and have the skeleton for an app. 
Why? I only use method syntax for simple cases. Query syntax is often more concise and easier to read for more complicated queries. I wonder if the people who don't like query syntax aren't comfortable with SQL.
SQL is for writing queries against datasets. Why does it matter if it's a database table or a list of objects. 
That work , that code works on the tutorial haha but for me it isn't working i don't even know why lmao xD
This is a poor reason. Query syntax improves readability for more complex queries.
Did you read the documentation? https://docs.microsoft.com/en-us/dotnet/standard/net-standard
Claiming to follow YAGNI, but having single-use interfaces all over.
This explains everything: [https://docs.microsoft.com/en-us/dotnet/standard/net-standard](https://docs.microsoft.com/en-us/dotnet/standard/net-standard) &amp;#x200B; and not quite... .NET Core 3.0 will bring GUI support. It's currently in a preview release.
The interfaces, in this case, are for dependency injection!
Add another one I've used -- [Harmony](https://github.com/pardeike/Harmony).
DI does not require the use of interfaces.
Thank you.
Thank you.
But in this way you will depend on an implementation, not an abstraction. You can have two types of interfaces, at least conceptually: one type is for dependency injection, and another type for creating contracts.
I'm too tired to explain you how this bullshit violated yagni... Too many people are idiotically following patterns without being clean, simple and practical.
\` encryptedPhrase.Replace\` replaces all characters in the string. &amp;#x200B; For for example zebra would become cebra, and then the eventually \` encryptedPhrase.Replace("c", "f")\` would run and it would become febra. You should replace each letter at a time rather than performing \`.Replace\` on the whole string each time. &amp;#x200B; &amp;#x200B; &amp;#x200B;
An example is you have an ILogService interface. In dependency injection you use a FileLogService class that implements the ILogService. But now you want to use a DatabaseLogService class that also implements ILogService. If you don't use the interface, you will have to swap all places that use the FileLogService class through the DatabaseLogService class. Using the interface, you will only trade where you register the dependency injection.
Okay. So for the individual letters not the full string?
I'm fully aware what it can be used for. But you are not using it that way. You're not having any need for that. You're not gonna need it.
It may or may not be, it depends. This project is just an example, not the perfect or final solution for all cases. And anyone who is interested can improve and change as desired.
Something like this: var str = encryptedPhrase.ToCharArray(); for(var i=0; i&lt;str.Length; i++) { switch(str[i]) { case: 'z': str[i] = 'c'; break; case: 'y': str[i] = 'b'; break; case: 'x': str[i] = 'a'; break; case: 'w': str[i] = 'z'; break; //.. } } encryptedPhrase = new string(str); &amp;#x200B;
That may work but the issue is I haven't learned arrays yet, so that why it is so difficukt
OK I have added the separations of TemplateHandler Console Logging and Server Response's, removing totally the need to pass in HttpListenerContext for function usage.. :D wooo, im actually starting to kind of get it... Again thank you so much for the samples, and kind nature. :)
&gt; .NET Core 3.0 will bring GUI support. It's currently in a preview release. note: Windows only.
For Iqueryable and complex queries I use the query sintax, why? because itbis easier to introduce extension methods not translated to sql query. For IEnumerable I use the method sintax.
Multiple statements per case looks messy in the new format. Is using switch with case still possible in the new C# version? 
Yes. Not sure I see the advantage of using this new form.
No worries at all! I love seeing new developers succeed and it always excites me to see people getting excited about what they‚Äôre learning. 
‚ÄúCode to an abstraction, not to an implementation‚Äù says my friend to me regarding your comment.
There is very much not DDD. There is no domain, no ubiquitous language and a ton of anemic models. CRUD is not DDD. 
The first preview (SDK 3.0.100-preview-009812) still works for me with VS2017.
Write code that serves a real purpose, not a hypothetical one, says.. who cares. There's a place for everything. Blindly adding code for abstractions solely for the sake of having abstractions is silly. If they serve a practical purpose, great. Otherwise YAGNI and remove the bloat.
If you are not looking to be a C# dev than you might as well learn F#. The difference in syntax will expand your programmer consciousness to new levels. It will also make learning other languages easier.
Yea they said preview 1 is fine
True. It is just extremely tedious writing all those classes. it amounts to another layer. Perhaps there is a DI container somewhere with that capability built in(?). I use Autofac which is pretty robust but I don't think it supports async construction.
Assholes. Pushing out cool free MIT licensed frameworks and asking corporations to pay for an optional extremely well designed IDE. Bastards! They even make it 100% free for open source!? Even worse!!!
We use WPF as well. .net Core 3 is promising. But just as WPF was super Rocky when it launched I'm not expecting WPF in .net core 3 to be without issues. Early adaptation is not exactly possible when you're enterprise.
I wouldn't close the reader until you finished reading the RSS feed, I imagine the feed is read as a stream, if you close the stream, it probably wouldn't read anything.
On the one hand, I'm glad C# continues to steal features from F#. On the other... doesn't anyone else think that IIFEs are kind of a language smell? Shouldn't there be a better way?
Thanks, ill try that
Love this command. It‚Äôs one of my secret weapons.
Thanks for the recommendation (F# looks scary), but I've already set my mind up for learning C#! It's not that I'm never going to be a C# dev, but I'll be learning it alongside Javascript while giving it a bit less priority (probably 25-35% of the total time I spend coding) so it will take a while to bring myself up to speed.
The problem was not the feed, When an object was added to the list, it is for some reason, nullified
Why do you consider them to be language smell? 
Very good article and very comprehensive. As he progressed I kept going "but you could just do" and bam next step covered that too.
What kind of solutions are you working with? We have a few solutions with around 60 projects and no issues yet, but I imagine there are bigger out there.
250+ projects and growing every day. We have some rather pedantic people - some projects have a single CS file in them, others have 1000+... it could be laid out better.
Joining together data pulled from two web service calls is a place I use the query syntax
It's still ok looking (to me) to join the data together and then use a .Distinct method call. I just wouldn't want to add more than one method call onto a query Linq operation
I wish more people read the article üòù He calls out a tool for translating between the two
You could... Click the link? It's a good article
The question is which of the two is more readable? I grok the query format instantly. I have to work at the method format more
Query syntax is great when you're getting data from multiple web services. Service a gives you companies. Service b gives you users. Join in query format is very clean there
This looks way less readable than the original.
I've never heard of this before. My immediate thought is that this could solve our issue of testing static classes. Only Fakes supports mocking those and we don't have the right license to use it. Heard of anyone using it to detour static class functions to a test double class? Any reason you know that wouldn't work?
the one piece of code that I would like most to replace is below, Can this code functionality be redone using composition? I don't have any idea's on this part,not sure if I should try to turn this code into a set of classes to accomplish foreach without me writing it out? for (int i = 1; i &lt; tempObject.Format.Length + 1; i++) { dt.Columns.Add(tempObject.Format[i - 1]); } int NumberOfRowsToAdd = tempObject.Content.Length / tempObject.Format.Length; for (int rows = 0; rows &lt; NumberOfRowsToAdd; rows++) { string[] array = new string[tempObject.Format.Length]; for (int columns = 0; columns &lt; tempObject.Format.Length; columns++) { array[columns] = tempObject.Content[rows, columns]; } object[] dr = dt.NewRow().ItemArray = array; dt.Rows.Add(dr); }
Sure (as others have mentioned), but honestly, you should probably separate that code anyways. It'll be easier to read, easier to test, and if you ever need to apply the business logic to data that comes from a source other than a database (cache, event bus, etc), it'll be easier to re-use.
I know, I did. I just didn't have time when I wrote the comment.
I agree. The query notation is just so different from the rest of the language. Besides, I find it way easier to understand how to extend the method notation with my own methods.
Honestly I don't have a yes/no answer that would satisfy me. The way I generally look at writing a piece of code is "Look for the responsibility" So, if we take your ExcelTemplate file as an example, you can see in the gist that I sent you that I separated out a lot of your code into their own functions. Each function was made because I felt the code naturally fit into a "responsibility" that could best be encapsulated by a name, in this case it's a function, but it could possibly be a class too. In my gist I can still see concerns that are duplicated, like [binFormatter.serialize](https://gist.github.com/ocbaker-fabric/1d4ddfa82443d6ece6a4397f42d50e57#file-code-cs-L137-L142) seems duplicated into 2 functions. That kind of smells like an individual responsibility of (in a wordy sense) "Serialize and save to list" _maybe_ that could be a function. I'm really struggling to see how I would irl turn the code you've posted in the code block and turn that into multiple classes. I'd much prefer functions but even then I'm not sure how many functions that fits into. To me, when I'm writing some code and I start getting a feeling that "This code has the possibility of not being unique to this function" I'll consider pulling it out into its own function. If when I'm writing code I think "This feels like code that could be reused by many parts of the code base (An example might be code to serialize Json can be used in many places), I might consider pulling it into its own class. Sorry that I don't have a direct answer for you, getting into the nitpicky parts starts becoming more and more about preference than standards you should 100% follow. Just keep in mind that the #1 reason to format code is maintainability and understandability. If whatever you cook up looks like magic but reads like Klingon then you might be doing it wrong.
https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/division-operator
Just, if you are not used to it. If you know this from functional languages, it is just beautiful. Furthermore the new switch is not here to "only" replace the old switch. It is sooo much more: https://blogs.msdn.microsoft.com/dotnet/2019/01/24/do-more-with-patterns-in-c-8-0/ 
Not only value initialization. It is also handy to deconstruct objects and more: https://blogs.msdn.microsoft.com/dotnet/2019/01/24/do-more-with-patterns-in-c-8-0/
Very informative! Learned something new today :-) +1
[https://marketplace.visualstudio.com/items?itemName=munyabe.ToggleComment](https://marketplace.visualstudio.com/items?itemName=munyabe.ToggleComment) &amp;#x200B; there you go
[removed]
Thank you! I figured it had something to do with the math
I haven't tested anything but to me it looks like the Func part it unnecessary and could just be replaced with `=&gt; () =&gt; { /* ...*/ }` Just a guess though
You need to buy licenses for this new version. To me its a new product if im buying a mew license
So weird that the default case is _ and not just the default keyword.
I've managed to successfully detour static functions as long as the function that you are detouring to is also static.
yandere dev could use a few of these
I am well aware of that, since /r/mrowa wrote exactly that &amp;#x200B; `from element in list where element.HasSomething select element.SomethingElse`
It's just a habit, i like to separate results from their filters, makes it easier for **me** to see *what* is returned.
The worries are in no way justified. In fact I'd say, programming for games is a lot harder than in a lot of other domains. You'll learn a lot of good optimization practices doing so. All the game developers I know are excellent coders who would have no trouble finding good jobs in other domains for much higher pay if they just didn't love making games so much.
That isn‚Äôt a meme. That‚Äôs just bad. 
Do what ever motivates you. Through be aware that what C# you learn for Unity may not be directly applicable to other scenarios, as programming Unity can be quite different to programming other things in C#. E.g. Unity handles null in a bit weird way for its game components, as C# here is used as a scripting language for their C++ game engine. &amp;#x200B; But if you are just looking to expand your horizon and feel that game dev might motivate you more, then go for it! check out /r/Unity3D aswell.
i wouldn't say they're a smell in themselves, but they do get used a lot when there's more suitable patterns like inheritance etc that could clean up the code a lot. so while "if (x &lt; 5)" is generally ok "if (blah == Enum.Value)" is often frowned upon.
thats the sole meaning of dank memes
They should actually be memes still. 
Then go learn about arrays! Unless this is a school assignment, then go ask your teacher.
The Func is necessary. A lambda expression has no type. You need to tell the compiler that it's a Func. But maybe it is only needed on the first one so the rest can be inferred, but I'm not sure.
yeah but a meme is everything you post on the internet. Those memes are like anti jokes, they are so not funny, that the dumbness of those jokes become funny (for some people at least). 
go away
Try Syncfusion [HTML to PDF converter for C#](https://www.syncfusion.com/pdf-framework/net/html-to-pdf), it also supports converting XML to PDF. Refer the KB for more information. &amp;#x200B; [https://www.syncfusion.com/kb/6194/how-to-convert-xml-to-pdf](https://www.syncfusion.com/kb/6194/how-to-convert-xml-to-pdf)
Imagine time saved on writing _ instead of default. What we'll do with that time? Probably I'll browse Reddit longer xD
Different
So what about `delegate()` maybe? The Func just brings so many brackets...
Damn, that's certainly motivating! I'm definitely up for that challenge since any real-time game would be much different from anything I've written up to this point. I'm not sure how advanced the course gets with time but the reviews are great and it apparently has a great learning curve especially after the first initial few sections, so there should be loads to learn! Thanks a lot, I'll definitely go this route!
Yeah but one will be a balls the other won't. 
Also its inportant to notice that Parallel can decide the number of parallelism depending on your hardware an CPU consumption in the moment the call is executed
If you want to stick to .NET technologies use SignalR. Don't bring nodejs or socketio into the equation, all can be achieved with .NET stuff. 
I‚Äôd normally be inclined to agree, but this isn‚Äôt supplanting the switch statement. That will still be a language feature. I think the use of IIFEs in switch expressions in this article was really contrived and not at all representative of how switch expressions are meant to be used. In reality, if you find yourself writing an IIFE in a switch expression, you probably need to drop back to a switch statement. I mean, for that matter, if you catch yourself trying to write an IIFE in C# at all, you have probably taken a wrong mental turn somewhere. They‚Äôre really not idiomatic C#.
Default is only for the default *case*- underscore can ignore any value, including components of tuples, expressions, and matchers on type that don‚Äôt need the value itself. True pattern matching is an extremely powerful feature, and seeing it in C# makes me want to come back to the language.
I think I'm good in the motivation department, just the fact it's an entirely new language for me takes care of that, since Javascript is the first and only programming language I've used up to this point. I'll keep those Unity-related quirks in mind while trying to learn as much of C# itself in the process as I can. I'll check the Unity's subreddit too, thanks for the advice!
Yeah. I like the look of the new switch, over all. Multiple viewings of the underscore in use, though, isn‚Äôt making me a fan. In anything, it‚Äôs making me like it less. Makes me think of Ruby or some other languages that confuse ‚Äúarcane symbols‚Äù for ‚Äúexpressiveness‚Äù.
In this syntax `default`would imply that it matches the default value of a type, while `_` will catch any value. As a contrived example, I might get some results from a data source and look at the `FirstOrDefault` value to see if it is good. If I get the default then that suggests no results were returned, which is a different scenario to a bad result; Result x = data.GetResults().FirstOrDefault(); switch(x) { case default(Result): // Match the case of an empty Results object return "No results found"; case good: // Match the result we are interested in return "Good result"; default: // Anything else is bad return "Bad result"; } In the new style; Result x = data.GetResults().FirstOrDefault(); return x switch { default(Result) =&gt; "No results found"; good =&gt; "Good result"; _ =&gt; "Bad result"; } You have to specify `default(T)`, with a naked `default` being an invalid pattern, so that should reduce the confusion slightly.
 (obj as int?) switch { 0 =&gt; ... // 0 literal null =&gt; ... // null literal default =&gt; ... // default case or default literal? };
I describe .NET Standard this way: it‚Äôs like a big ass versioned interface spec for the various framework/runtimes to implement so you can write code that will be compatible with certain versions of the different implementations. You target a specific .NET Standard version for the framework versions you want to target. Not scientific, but it works.
Well while sleeping I formulated a idea.. Sheet -&gt; Row -&gt; Cell Sheet Contains Collection of Rows that are really a Collection Cells with a count defined header length and values define in layout math. With a set of classes that grows in this fashion, I could pass in the template object and it would form into something similar to the data table object I am using to ferry the data around. 
For a simple multi-if statement replacement it looks pretty cool. But I have to say that the lambda one is just unreadable. It looks like line noise, back when we had analog modems. 
Are you using Forms or WPF
I always say this about obfuscated Perl too. Once you put in the *work* to lean to read it, you too know the beauty of *#&amp;#(@(#%%$(*reg#O%%&amp;#(#.
[This article in documentation can be useful](https://docs.microsoft.com/en-us/dotnet/standard/choosing-core-framework-server)
What is buttonname? From its name, it probably isn‚Äôt the actual button.
The examples that are using statement lambdas to mutate the switch expression to a switch statement are the sort of thing that should be telling the programmer to either use a regular, old switch statement or to just break the cases out to separate methods.
Not a whole lot the act of pressing two buttons at the same time will take just as long or longer than typing two to four characters with autocomplete. Our conscious brains are not good at multitasking.
I am using generic terms. I am saying I put the name of the button there.
WPF thank you for reminding me about that
I'm glad to see I'm not the only one who thinks this.
Why not create an appropriate keyword that actually expresses the purpose then?
The error message is saying that there is no method called "PerformClick" on the object called "button". Does the WPF button class offer a PerformClick method? Looks like the class you've shown here is in Windows Forms.
If you are looking to learn C# I would avoid Unity in general. I think learning through games is a great way, but Unity is very different from your typical C#. It also tends to lag behind, and doesn't use the most recent versions of C#. Between the two options presented you definitely should go for Mosh's courses. He is pretty good, and it will be more in line with what you will be doing.
If that's the case why don't you put 5% of your time writing a few little F# programs. I promise it will pay of in the long run.
&gt; default =&gt; ... // default case or default literal? Invalid syntax fortunately.
that is the issue. I am using WPF and this function is in Window forms! 
Yep. If your C# code starts to look like Lisp, you may be doing something wrong. 
To be more precise here, signalR is the way you do websockets in c#. 
An alternate solution, here, would probably be to create a static dictionary of string or enum values and funcs that would replace the switch. Initialization is reduced to a conditional expression var result = _staticDict.TryGetValue(operation, out var f) ? f(a, b) : throw new NotSupportedException(); which is probably a decent way to go if you have a bunch of operations and need to add or remove them on a regular basis (or data drive them or something).
Doesn't all the pattern matching stuff apply to the switch statement, as well? It's not just the new switch expression getting, e. g., object decomposition patterns.
Can you fix your NuGet package to add a package description? Nobody will be able to find your package on NuGet unless you add keywords like detours, detouring, test indirection, etc.
Aha, thank you, rereading my comment, I was a bit cryptic 
If I never have to see the words "Ben Shapiro Hamburger Helper" again in my life I'll die happy
OK, but the other question is: why are you trying to perform a button click within the event handler that a button was clicked (is this a different button?).
The example above is just my final attempt to get the function to work. This will be the actual function i will do next. private void Button\_click(object sender, RoutedEventArgs e) { //stuff } private void Keyup\_to\_button(object sender, RoutedEventArgs e) { if (argument) { buttonname.PerformClick(); } } I want the keyup event to trigger the button\_click event.
This is my rule of thumb too. Basically, method syntax by default, but if I'm joining then it's query syntax. 
Sometimes I'm aggregating data sets from two separate APIs. 
Pay for new licenses? Are you not using an MSDN subscription? It's like *half* the cost of a standalone VS-only license, and you get *all versions* of VS and a crap-ton of other stuff. I get it, it feels kinda "wrong" to rent software like that. But think of it more like paid access to an archive of new and old software, because that's really how it works. And better yet, one more step away from the hell that is license management.
Oh, haha, I just noticed that in the code :)
[Because they decided to use the one created for this purpose in C# 7?](https://blogs.msdn.microsoft.com/mazhou/2017/06/27/c-7-series-part-4-discards/) There is a lengthy discussion of the topic [on the GitHub issue](https://github.com/dotnet/roslyn/issues/14794).
Like others have stated, I originally started learning C# before I got started with Unity and Unity‚Äôs version of C# is bit different from the actual C# language itself. 
Except multithreading is *not* easy, and the post illustrates that by running into two common pitfalls. Just be aware that Parallel.ForEach is not a magic ‚Äúgo faster‚Äù button. 
Something like this should work: buttonname.RaiseEvent(new RoutedEventArgs(Button.ClickEvent));
I'm thrilled about this. The requirement for "break" bothers me so much that I always find myself trying to get around it somehow, or not using switch altogether. To me it's just clunky and graceless.
Just a few tips -- `string` instances are just `char[]` arrays. Also, `char` instances have an integer value. For a basic caesar implementation, let's assume you are dealing with ASCII-only character. [Use this char](http://www.asciitable.com/) as a reference. How does the chart help us? Well, A-Z characters are 65-90 and a-z characters are 97-122. If we wanted to apply a Caesar with an offset of 3, all we have to *basically* do is 1) find the value of the letter character 2) add 3 to that value and 3) cast the value to `char`. We also have to make sure the value "loops" back around the alphabet (Z goes to C, after all), so we can use the `modulus (%)` operator for that. Here is a simple static method that does what we need: public static string ToCaesarCipher(string input, int offset = 3) { if (string.IsNullOrWhiteSpace(input)) { return input; } char[] result = new char[input.Length]; for (int i = 0; i &lt; input.Length; i++) { char c = input[i]; if (!Char.IsLetter(c)) { result[i] = c; // if c isn't a letter, just keep the character as it is continue; } int caseOffset = (Char.IsUpper(c)) ? 65 : 97; int value = ((int)c) - caseOffset; value = ((value + offset) % 26) + caseOffset; result[i] = (char)value; } return new string(result); } Usage: string input = "AbCdZz"; string result = ToCaesarCipher(input); Console.WriteLine(result); //Output: //DeFgCc Hope this helps.
I would put the `//stuff` in a method, possibly in a ViewModel, depending on what it does. Example: private void Button_click(object sender, RoutedEventArgs e) { DoStuff(); } private void Keyup_to_button(object sender, RoutedEventArgs e) { if (argument) { DoStuff(); } } private void DoStuff(){ //stuff } 
I agree with you but we were at a bar and I showed him the comment just to piss him off. And after talking with him other times it seems like the only reason he creates an interface for every implementation is that you can‚Äôt mock out behavior with NSubstitute unless it‚Äôs an interface or some abstract class (so he told me).
I don't understand this obsession with terseness. There's no proven relationship between terseness of code and bug count / maintainability index / etc. And, if you know otherwise for your specific use case, there's always T4. This lambda switch looks like some C++ metaprogrammer neckbeard bullshit. Completely unreadable, and you can almost hear the "ackshhhuuuuallly" right in the code.
Everything new looks less readable compared to something you're used to. That's a non-point. Beginner programmers WILL have more problems with this new switch than the old one, just because the new one doesn't use "case," "break," or "default," words, which to a newbie offer valuable semantic clues about what's going on.
What I am saying is the decision to use \_ was a terrible decision. It doesn't matter if that decision was made in C# 7 or C# 8, it is bad practice to use symbols as keywords. The Github discussion was mostly just a debate between using two equally poor choices. 
I agree, I like terseness, but sometimes terseness results in less legible code. I don't think giving people the tools to be more terse is a bad thing though. It just comes down to educating people on when to and when not to use more terse syntax. I don't think we as an industry do a good job of teaching this.
I couldn‚Äôt wrap my head around the multithreading in C# so I found a lazy option for unordered multithreading. // generate task list List&lt;Task&gt; tasks = new List&lt;Task&gt;(); // add tasks to the list however works best tasks.Add(taskfunction(...)); ... yadayada add more tasks ... // Launch all the tasks in parallel await Task.WhenAll(tasks); The await will put them all in the thread pool and I just let it automatically handle the threads safely until it‚Äôs done. I get around ordering my unordered results by using Tuple lists and sorting on an index generated inside each task.
MSDN subscription is $799 a year with an additional cost for the first year. VS professional edition standalone license is $499. A new version of VS comes out about once every 2 years. Wouldn't that make MSDN 3.2 times more expensive? 
Classic case of testing-induced code bloat.
The problem is that on a typical dev team, there's always "that one guy" who dives into all the new features because he thinks using them makes him look like a better programmer, and then everyone else on the team either has to learn them as well, or refactor his garbage in his wake.
I understand this, and I do elsewhere in the triggers. However, I will be changing the what the buttons do based on another setting. . private void Button\_click(object sender, RoutedEventArgs e) { switch (profile) { case "1": Dostuff\_1() break; case"2": Dostuff\_2() break; } } . . Which i could do the same thing in the keyup event... i mostly was just frustrated as to why that function wasn't working. &amp;#x200B;
Thanks, again. I love this library.
This might sound stupid, but for a moment I was confused with "operation" variable in code sample, I thought it was a new keyword. Great article :)
That's really cool. So... when the time came to get budget approval to work on LINQ 2 SQL at Microsoft, how did you know how to pitch it? Do you remember the pitch? Obviously there were some problems with v1, but I recall your blog posts on how to implement a LINQ Provider really helping to get me on-board to doing more LINQ.
While I agree, that "that one guy" in this situation is a pain, I think your reasoning for why he is a problem is different than what you said. &gt; then everyone else on the team either has to learn the terse syntax / new language features too I would argue that all the team members *should* be learning the new language features. Keeping up with technology is sort of in the job description of a programmer. The real issue is more that he is creating unreadable code that is harder to maintain because it looks like a mess.
Why is it a non-point? He says "This looks way less readable than the original." - sure it does, if he is used to it. If he gets used to the new one, it won't be less readable than the original one. For you remaining comment: "case" is just verbose, "break" not necessary at all and the only literal which is somewhat helpful is "default". I don't think that a beginner will have problems, if he sees a "new" switch. But no need to argue about it. At the end it will come down to personal preference :)
A coworker described this as ‚ÄúC# is looking less and less human-readable‚Äù 
I guess it's because it's purely a workaround- it doesn't express an intent at either a business logic level or a computational level. It's just playing a game with the language itself so that the language's scoping rules do what you want.
Well, I mean I support writing code around testability so you lost me a bit there.
A meme is actually a common punch line that people can use to make jokes with a common understanding. Take the old rage comics. The fuck you panel can be put after any others and the punch line is understood. 
That's what I meant. It's code added **purely** for the sake of having unit-testable code. The added code adds no purpose to the business aspect of the application.
Well the purpose is to make it testable, and test coverage is a large value-add for applications where regressions are a big deal.
&gt;Everything new looks less readable compared to something you're used to. That's a non-point. &gt; &gt;Beginner programmers WILL have more problems with this new switch than the old one You make a statement then immediately make a point that contradicts that statement. If beginners find the new syntax less legible it is because it is less legible. Yes, we can train ourselves to parse it more quickly, but that doesn't change that it is objectively less legible. With that said, introducing syntax that is less legible is not necessarily bad. Ternary is less legible than if...else statement, but as long as you aren't chaining them together it is still a good addition to the language. I see this as mostly just ternary on steroids. So as long as it isn't abused it should be a good thing.
This is so unfunny it hurts!
`prices[0,0]` is the first column of the first row of `prices`. You need figure out to map the selected element of your combo box to indexes in your array to set `row` and `col`. You might be able to store a tuple of your indices on the items in the combo box and pull it back from the selected item, but you should start by checking the documentation on the control.
What are the types of row and column?
Step 1: learn how to create a screenshot :S
Screenshots suck. They still require you to transcribe any of the content if you want to actually use it. This is a place where it should be using just TEXT.
I have noticed there is a common misconception with a lot of people that think our high level code is for computers. It is not, if we were writing code for computers we would be writing in assembly. Computers cannot inherently understand our code without a translation. The code we write is for humans not computers.
Just curious, what are the reasons why you're starting learning WPF rather than UWP?
Yeah, I understand that. It's a pity that Microsoft Fakes is just for VS Enterprise. In functional languages you just pass around a bunch of functions, so that's easy to mock, but in C#... Yeah.
Int, think that‚Äôs the problem I just needed someone to point it out I‚Äôm new to this. This assignment is for my 100 level class
Did you seriously take a picture of your screen?
Yeah bro
Text is definitely ideal when dealing with code, but taking a picture of a screen is just monumentally ridiculous. 
Did you try int.Parse(val.ToString();
What's wrong with you?
It was faster and I got the same result so....
I can't imagine it was.
I do plan on learning UWP but we still run on Windows 7. We will be upgrading though before the end of the year.
Have you considered asking your instructor or TA for assistance?
Yeah I even had to look it up myself to believe it. My job right now has me writing Java and we can just use Mockito to mock out...basically whatever we want on whatever we wish. I couldn‚Äôt imagine writing double the code just because of the limitations (in my mind) of a mocking framework but hey, it is what it is.
Prepare to get roasted.
Nah I‚Äôm all good just gotta do a bunch of if statements that‚Äôs the only thing I couldn‚Äôt get thanks for your help 
Yeah I even had to look it up myself to believe it. My job right now has me writing Java and we can just use Mockito to mock out...basically whatever we want on whatever we wish. I couldn‚Äôt imagine writing double the code just because of the limitations (in my mind) of a mocking framework but hey, it is what it is. It‚Äôs nice because we only need to create interfaces if we *actually* need them. I like dotnet better than Java for many reasons but the Java ecosphere takes the cake on this one.
Literally dont care as long as I get my grade. Degree&gt;anonymous opinions 
holy shit dude, ctrl + k, ctrl + d
It's frowned upon in object oriented code. Not so much in functional code (although discriminated unions should be used for exhaustiveness in most cases).
I can‚Äôt go on reddit through the computer you racist fuck
...what
&gt; My job right now has me writing Java and we can just use Mockito to mock out...basically whatever we want on whatever we wish That is because in Java every method is virtual by default. In C# not. You could achieve the same in C# by making every public method virtual.
I think you are just missing some semicolons. At any rate, maybe give this tutorial a look over. [DotNetPerls](https://www.dotnetperls.com/2d) 
I‚Äôm on my schools network üôÑ
Row and col are int, but you want to assign to it decimal. You should use the same type. 
Got it now thanks for your help boss
what does that have to do with a visual studio keyboard shortcut?
 My bad I‚Äôm driving thought you were another person bitching about the screenshot and you sent the screenshot command 
Hm that‚Äôs interesting, I never looked into why that was actually the case.
I don't know what the reason for Java was, but for C# the reason to decide against virtual-default was performance. Only virtual methods need to go through the vtable at runtime (identify the method to call via the instance). Non-virtual methods can just be called, as there is no overridden method by inherited types.
Its not that bad and I have used that in the past when working with already async code. However if you have sync code you want to parallelize then you run into issues of the zombie that is async await infecting your entire code base (not a bad thing just probably not something you want to tackle on a legacy application). Parallel.ForEach abstracts away and is a sync method so works wonders to avoid that and send parts of the code parallel
I don't think working with computers is your calling. 
It worked before but after day it just bug like this i dont know why... Do you think i should write on Microsoft support ?
Not my major like I said 100 level class gen ed
Multithreading gets even more fun in IIS hosting. even "synchronous" code is really multi threaded and can run into gotchas if you're not careful. 
I can try that. I let you know if it helps :)
Exactly what I was about to comment 
The least you could do was indent them, you monster. Also, if you convert row and col to decimal, will your next line of code even work?
In a nutshell, * If you want to run a web on Linux the Core. * If you want to run a web on Windows Server or a desktop Application then Net Framework. * If you want to create cross-platform application (Windows and MacOS, and smartphone), then Mono (Xamarin and Unity3d) So, there are not 2 but 3 branches. 
What about any of that is racist? Maybe think before posting?
This is my second project I don‚Äôt know the proper formatting. If you know any good links I‚Äôll take a lot ya them. As for the bottom piece That‚Äôs not my code it‚Äôs skeleton of the tutorial that the teacher gave us to use. I‚Äôm using if statements still but the way we set it up is different 
Makes sense. Still, it would be gross to decorate every method in your C# app with virtual just so you can mock functionality out without interfaces.
To learn Unity is a beast on its own. 
LINQ 2 SQL didn't have a pitch initially. LINQ was the pitch. LINQ 2 SQL came along later as a need to have an ORM that used LINQ at launch of the language feature, and to help shape the discussion/design for the LINQ features.
tsk tsk. Microsoft is embracing Windows on ARM and it only works in 32bits mode. 
I'm just saying - you don't assert that something is "less readable" simply because it's new. Plenty of more valid reasons. I just worry that C# is turning very "Perl-esque" in terms of syntactic sugar. My take is, the surest way to guarantee failure is to try to make something all things to all people, and I see these functional language patterns attempting to do that to C#. 
You make it sound much to hard. Game code usually results in 1% of my runtime maximum. And on a basic level working with vectors is pretty easy. You dont need a fancy 3D model to write an inventory system for example. The only beastly thing about Unity is it's quirks. But getting stuck will not happen very often and can ofthen be resolved in a few minutes on DuckDuckGo etc.
They never did have support for it though. They stated so very clearly and even said that while you may get it to work in VS2017, it's not supported. It has been this way since 3.0 was even available.
I think it's a bit of a low blow still. It's going to end up forcing people to switch.
So you are paying for one license? Are you a solo contractor or something? A lot of this doesn't apply to you if that's the case. If you purchase 2 or more licenses, it's way easy to get them cheap. In fact, you could contact a reseller who has a Microsoft agreement and get Visual Studio Professional for like $14.99 a month.
You seem to not fully understand how visual studio licensing works or you're not aware of all the options. You'll be surprised how affordable it all is.
Visual Studio Code isn't good for most enterprise tool chains. Great for solo devs though.
Yea I was just using it at home. At work I just installed 2019 preview, but not for production development
You can use lists. http://csharp.net-informations.com/collection/list.htm
You'll want a data structure like an array or a list. A list is probably the easiest to use, [here](https://www.dotnetperls.com/list) is a very basic tutorial on using lists, try and work through that. I'd advise looking up tutorials (Perhaps on that same site) about loops, specifically while-loops, and trying to use that in your code. Reason for this advice being your usage of a 'goto' structure, which is for various reasons extremely discouraged. You avoid using a 'goto' in your code under almost all circumstances.
^(List&lt;string&gt; words = new List&lt;string&gt;();) ^(words.Add(Console.ReadLine());) For ease of use, I recommend lists. Why do you have a goto anyway?
I have no control over our purchasing dept but I know we have at least 7 standalone licenses and no msdn subscriptions. It is certainly not clear on https://visualstudio.microsoft.com/vs/pricing that a subscription is ever possibly cheaper than stand alone. We've requested subscriptions and have been declined several times.
Found some c++ source here https://github.com/MalwareTech/AppContainerSandbox
Removed: Rule 5.
&gt; I would argue that all the team members should be learning the new language features. Learning, yes. Applying just to make themselves look cool, no. 
A bit of COBOL?
&gt;words.Add(Console.ReadLine()); I don't know how to repeat things. haha. Do you know how to do it in another way?
But how did your boss know you were the right guy for the job? Did you just draw straws? I guess I'm trying to tease out how your boss recognized your expertise in building an ORM and were the right person to show off the insane power of LINQ v1/call-by-intention programming. 
Use a `while` loop. bool done = false; while(!done) { try... catch... } Then, instead of `if(answer == "yes") { goto make; } else { ...whatever... }`, use `done = answer != "yes"; if(!done) { ...whatever... }`. That will cause the loop to terminate any time they don't enter "yes".
 bool done = false; List&lt;string&gt; words = new List&lt;string&gt;(); while(!done) { Console.Write("Do you want to add another word? yes/no"); done = Console.ReadLine().ToUpper().Trim() == "NO"; if(!done) { words.Add(Console.ReadLine()); } } Continuing from where [TNMattH](https://www.reddit.com/user/TNMattH) left off, something like this I think. 
[https://imgur.com/LooSKTm](https://imgur.com/LooSKTm)
&gt; I have no control over our purchasing dept Man this is the truth. It's super tough to get people who don't know what to look at to do it for you and it's worse when they feel like you're telling them how to do their jobs. The struggle is real.
https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-conditional-operators
I heard Bruce Willis was also looking for the fifth element ...
Keep in mind the part before the question mark is a Boolean operation which if true returns the value to the right of the question mark, and if false the value to the right of the colon. You can add a comparison to see if it‚Äôs null. There‚Äôs also the ?? Syntax You can use which might accomplish what you are trying to do
Unfortunately not. The particular question mark usage you have here is "conditional operator" (often referred to as "ternary operator"): https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/conditional-operator The "null-conditional" operator you're looking for is here: https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-conditional-operators Dive in and give it another shot. Beyond that, this line is a bit funky: Program var1 = new Program(obj); Given `obj` is already a `Program` itself. Probably all you really need is: Program var1 = new Program(); Program var2 = null;
No. ? Is the Conditional Operator. You're looking for ?. operator. See more [here](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/)
If you'd try to compile this, then you would know the clear answer is **No**. This does not even compile.
Please use the proper names: - The conditional operator for `?:` (the only ternary operator in C#) - The colaesce operator for `??` Thank you.
thanks, this helped distinguish the difference
The power of /u/FizixMan strikes once again! I'm waiting for the next 1st April.
thanks, I've made some corrections with the code and edited the post
Yup, that's it. You got it. :)
&gt; will put them all in the thread pool Which will severely tank your performance in a high-volume webapp/service. 
Oh fuck. Forgot about that. You may have just saved it.
By the time I worked on it I already had the expertise. Mostly because I was already doing it or already done it. I had worked on similar projects already. One was a research-y variation of C# with queries built in, and had already built a few light ORMs that never became products (easy to pitch such ideas to management in SQL org because that's been a holy grail since forever), and designed an object query language. But it wasn't my manager or any manager I had to convince. I just had to convince Anders Hejlsberg that C# needed query integration and he convinced everyone else. How did I convince Anders? I showed him a cool demo. Though, I think I was just lucky that he was already thinking along the same lines at the time. Pro Tip: always have a demo. 
I'm not sure I understand anything you just said. You can type the same code in emacs as you do in vs. Its not like vs is another language providing even more abstraction.
Power BI. Just plug everything into that. Building and managing your own dashboards is a huge ball-ache. It‚Äôs got a bunch of neat widgets and connects to everything. 
... who is out there teaching people to use gotos?
Sure, you can, but part of what makes vs useful for people and why it's standard in many shops is because it does most of it for you. You can hand-write it, but vs doesn't expect you to. The thing is, I don't know how most of the autogenerated code works: I don't know how the XML UI works with the pregenerated C# code with the code I write. If I poked around long enough I could probably figure it out, but I'll be a better developer overall if I learn by doing all of it myself, or at least learn how to write it without vs holding my hand the entire time. 
This. Building dashboards in something heavyweight is not a way to go. Find something else that excels at sucking in data and viz it.
Please never ever use goto. Use a function instead. 
Should be banned from any tutorial. 
The error messages are very explanatory in this case, look at documentation on lambda signatures, not only are you calling for too many values, you're using a different variable in your math.
Okay, I guess I am treating it like a method. So I can only call for 1 value? How can I call the others? 
rnd.Next(1, 20);
Wow, that was a dumb mistake, thanks! &amp;#x200B;
You call rnd.Next(-19); If you think about it the error makes sense. What you want is rnd.Next(1,20);
If you do want to put this together yourself as a learning experience (otherwise, you‚Äôd be better off building on top of C# applications that already do much of what you‚Äôre looking for), you‚Äôll want to start by working with ASP.NET Core, as it‚Äôs both the framework into which Microsoft is pouring all of its resources, and you can build web applications that run on Windows, Linux, and/or MacOS‚ÄîIIS not required. You‚Äôre going to want learn ASP.NET Core, as well as a JavaScript frontend framework like React. Visual Studio comes with a Core/React template that would be a perfect place to start.
If this must be a custom web app, look into kendo ui or Telerik. Loads of good graphs that will help a lot.
Func&lt;int, int&gt; takes an int argument and returns an int so you could do something like Func&lt;int, int&gt; ExampleFunc = i =&gt; i*2; If you wanted to assign something like this: (double a, double b) =&gt; (val - 32) * (5 / 9); then you would have to define the Func like this: Func&lt;double, double, double&gt; ExampleFunc;
I think you are confusing the ide with the framework. Xaml isn't a feature of VS. You can write xaml using notepad if you really want to. You can write guis in C# with VS. Xaml is converted to code during the build process by whatever gui library you use, like WPF. For example, WPF's xaml loader will parse the xaml you write if you build with `dotnet publish`, even if you never touch VS. Don't conflate the IDE with the framework. Although they are designed to work well together they are completely different entities.
I changed a portion of it to: Func&lt;double, double&gt; FaToCe = a =&gt; (a - 32) * (5 / 9); double resultCe32 = FaToCe(32); double resultCe72 = FaToCe(72); double resultCe100 = FaToCe(100); and am getting as outputs (incorrect): 32 degrees fahrenheit to celcius result: 0 degrees 72 degrees fahrenheit to celcius result: 0 degrees 100 degrees fahrenheit to celcius result: 0 degrees I don't think it's my math...
I generally always use the method syntax, love how easy and intuitive it feels.
Since you already got the answer to you question I have a question on my own: What did you try to attempt to solve this issue **besides** posting on Reddit? Did you try to read the documentation on the method you used? Because the [documentation](https://docs.microsoft.com/en-us/dotnet/api/system.random.next?view=netframework-4.7.2#System_Random_Next_System_Int32_) clearly states the cause for the exception: &gt; `maxValue` is less than 0.
Power BI is definitely the way to go, except OP mentions they refresh their existing SSRS Report every minute. If I recall correctly, this tight of a refresh interval can‚Äôt really be done in a Power BI dashboard.
I did read it yes, i meant to have it be (1,20), but i used a dash instead of a comma, i just got back into programming 2 days ago, and have never used this language. The dash was supposed to indicate the range, and i forgot to think about negative integers 
Everyone makes them, especially when you're first starting out. I work in the industry and I did something just as dumb (forgetting to write FROM in a SQL query and staring at it for half a minute trying to figure out why it didn't work) today. 
You‚Äôre not going to get far without a place to host the web app, so that‚Äôs definitely one thing you‚Äôll need to figure out sooner rather than later. When I‚Äôve done similar projects in the past I built a very light.NET Core MVC app that uses a controller to query the database and pass the data to the view (the web page). The view displays the data and also has a JavaScript function on a 20 second timer to go back and query the same controller and pull up to date data.
thanks! it makes sense and it works now :)
It‚Äôs not a dash, it‚Äôs a minus. 1-20 equals -19.
Yes i realize that, it was just a dumb beginner mistake
Sorry, I don't think I'm being clear. I get that the framework, the IDE, and XAML are all distinct, and all three can be used independently of each other. The IDE, in an effort to speed the application creation process, generates much of the XAML for the user, which the compiler then parses into the GUI using whatever framework or library is being used. The IDE does an excellent job of this generation, but if I wanted, I could do it myself. My gripe is that in this creation process, I usually don't have to see the generated code, and as a result, I feel a disconnect between what I'm doing and what the IDE does for me, whereas when I write all of it myself, I understand what I'm writing better. Emacs is the vehicle by which I do it, it could be done in VS, VSCode, Atom, Vim, whatever, this is just how I like to write software. With the solution that someone else here gave me, I now know how to learn how to do all of it myself using .NET Core and C#, which for the aforementioned reasons I want to use it on my own terms. Let me know if that doesn't clarify anything. 
Point taken, I don‚Äôt develop web apps at this time.
I‚Äôll keep an eye out for it, thanks
That‚Äôs it. I like the look of PowerBi, we can‚Äôt use the cloud at work due to security concerns, and we have no PowerBi report server as of yet. But one of the main things we have on our dashboard is a ‚Äúlive‚Äù (well, 1min refresh) fleet tracker, so basically a flight arrivals/departures board. Now the data analyst lot at work don‚Äôt want to allow me to have PowerBi (probably as we don‚Äôt have an internal report server), and they also work a lot from data warehouses, and insist that live/short refreshes are totally out of the question. Well, we do already in SSRS that‚Äôs bundled with our software (And has a SQL backend). It‚Äôs a very quick query and has no load, we can‚Äôt have an arrivals board with a slow refresh, it‚Äôs simply not on! So PowerBi as cool as it looks isn‚Äôt suitable I guess.
I do want to learn, but ideally I just want to get it done! (I have plenty of more interesting C# stuff projects to try that interest me more). As I mention above in a comment; it‚Äôs kind of a live arrivals/departure board sort of thing; lots of airports manage it easily and the SQL query is simple....just need a way of displaying that information easily, and in a visually pleasing way.... Maybe C# isn‚Äôt the way to go here, maybe there‚Äôs better stuff out there? (Some client side code that runs direct from a browser?). I‚Äôm lost with web technologies as I‚Äôve done none! I could build it in C# and Winforms but it‚Äôs not the look I‚Äôm going for, and it‚Äôs missing all of the excellent GUI that a lot of the web dashboards seem to have. 
I could run it from within VS, ie, just hit run, it‚Äôll just run on one machine and be connected to a big 80‚Äù screen. It‚Äôd be much better of course if other networked computers could access it (not sure if VS IIS allows non local connections). There‚Äôs got to be an easy way to build this with the excellent GUIs/dashboards out there! 
Thank you for answer, My problem with JS is tooling and fast moving environment. I did some simple apps in React, then I learned Redux, next Context, after that everybody started to talk about hooks, some new fancy things, and I realized that I don't know how to program, I just only know some trendy framework and that is it! I applied for some internship(Javascript), and they send me some oop assignment, and I did not know how to do it, after that I decided to learn some mature programming language, and learn how to program, not some new fancy framework. Next thing will be backend. I thing that everybody who wants to learn programming must do that in some stable environment(c#, java, python, maybe php). My english is horrible, sorry :)
&gt; Now the data analyst lot at work don‚Äôt want to allow me to have PowerBi (probably as we don‚Äôt have an internal report server), and they also work a lot from data warehouses, and insist that live/short refreshes are totally out of the question. &gt; &gt; Well, we do already in SSRS that‚Äôs bundled with our software (And has a SQL backend). It‚Äôs a very quick query and has no load, we can‚Äôt have an arrivals board with a slow refresh, it‚Äôs simply not on! You say the data analysts believe short refresh times are out of the question, but you're already doing it in SSRS? Or are these separate data sources? As an aside, unless your threat model includes hiding your data from the U.S. government, Azure is probably better at securing your data than your company is (although I'm guessing that's not a battle you can fight with IT lol)
Same data source. I just don‚Äôt think they understand what it is we are trying to do (and they have no time to help us, only put up barriers!). It‚Äôs not that hard, simple SQL query that returns some fields and times etc, just need to put them in a nice ‚Äúlive‚Äù pretty front end. It doesn‚Äôt have to be web based, it could be WPF eight Telerik controls or something, but I can‚Äôt help but think there‚Äôs such a lot of nice web front ends/dashboards already out there, it shouldn‚Äôt be too hard to make a front end for some arrivals/departures. I‚Äôm just lost with what technology to use to do it, server side is a pain, client side web would be best. And due to IT policy the chances of distributing EXEs is very small. 
If you do it in dotnet core, you won't need to have IIS or anything... Just go to a command prompt, type in dotnet mywebapp.dll and boom, serving up the web app.
&gt; Reddit was designed for posting cat videos, not that type of technical discussion. Give this man a cigar. Reddit is a stream of effluence compared to SO.
Power bi is probably your best option as others have mentioned. Tableau is another option but is a bit pricy. Power bi comes with some office 365 subscriptions. I believe you can actually create and embed power bi dashboards and reports on another site.
I use kendo ui for all my dashboard needs with .net wrappers ‚Äî I second this (home grown healthcare enterprise app)
You need to understand basic binding first: Create a class called MainWindowViewModel that implements INotifyPropertyChanged. See below. Create a Customer class with string `Name` and int `ID` properties. In MainWindow Constructor add: `DataContext = new MainWindowViewModel();` In MainWindow xaml add a DataGrid and set `ItemsSource={Binding Customers}` You do not need to handle Loaded event. That should get you started. In the future: Factor out INotifyPropertyChanged to base class. Implement INotifyPropertyChanged on Customer class. Create BaseViewModel&lt;T&gt; which will contain ObservableCollection&lt;T&gt;. Populate ObservableCollection from db call. using System.Threading.Tasks; using System.Windows.Input; using System.ComponentModel; using System.Runtime.CompilerServices; public class MainWindowViewModel : INotifyPropertyChanged { private ObservableCollection&lt;Customer&gt; _Customers; public ObservableCollection&lt;Customer&gt; Customers { get =&gt; _Customers; set =&gt; SetProp(ref _Customers, value); } public MainWindowViewModel() { Customers = new ObservableCollection&lt;Customer&gt;(); Customers.Add(new Customer { Name = "Customer 1", ID = 1 }); Customers.Add(new Customer { Name = "Customer 2", ID = 2 }); Customers.Add(new Customer { Name = "Customer 3", ID = 3 }); } #region INotifyPropertyChanged implementation public event PropertyChangedEventHandler PropertyChanged; public void RaisePropertyChanged([CallerMemberNameAttribute] string propertyName = "") =&gt; PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName)); public void SetProp&lt;T&gt;(ref T prop, T value, [CallerMemberNameAttribute] string propertyName = "") { if (!Object.Equals(prop, value)) { prop = value; RaisePropertyChanged(propertyName); } } #endregion }
Depending on what you're up to, you may find an enum adorned with the FlagsAttribute useful.
thats interesting but what im looking for needs to be able to hold multiple states current information at one time. right now each derived class needs to have its own version of this despite a lot of the states being the same. I was hoping to have a struct(or something) in the base class that i could add states to in derived classes. private struct unitState { public bool canAttack; public bool imHit; public bool imStun; public bool imLaunch; public bool imKnocked; public bool imJuggled; public bool imGrabbed; public bool imGrabRelease; } private unitState myState;
We are a gold partner and have 25 MSDN subscriptions and 100 o365 licenses and pay 5k usd a year for it. Well worth the cost of being a partner. You need to look at the partner programs and go that route insteatof just looking at subscriptions.
I would take them all out of the struct and make each bool a private property of the base class (then adding child-specific states is easy). The base class would define a virtual method like State() that returns a dictionary of states. You could use an enum for the state names, which would be the dict keys. Children could override the State() method to return their state (leveraging base.State() to get the parent's state). OR Even simpler, just use a dict that gets populated by the parent's constructor. Each child's constructor can add its own states to it. Easy peasy. --- I would probably use the first option since it makes accessing and modifying the state within an object easier (no need to dig around in a dict just to update a bool).
Okay, well. You can't derive from a struct. So, you're probably SOL *that* way. The advantage of a bitmasked long (or ulong) would be that any given type derived from your base would be able to represent 64 independent states, and their children would only need to know about the ones they or their ancestors had defined. You could represent this with a Flags-decorated enum, but YMMV. But. Unless there's a strong reason to make the unitState something you can pass out of your object, it sounds like you really need to make all those flags part of the base type, directly, instead of dropping them onto a struct contained in the base class.
ok thats how it is right now actually. (protected bools as base properties) maybe im just trying to over complicate it but it seemed like it might be a bit cleaner especially if i wanted to reference a specific objects state somewhere else...although i cant think of a reason i would need to do that off the top of my head. thanks for your feedback.
yea i dont have a strong reason..i just figured if it was possible it would be a bit sexier code and then if i found out I DID need to pass out the data it would be easier. i guess ill just keep them as separate properties then. i just figured there was a better way since it looks kinda junky. 
It would probably be a good idea to mention how you plan to use this classes... for context. That being said, there are different ways you could do this. You could look at how chess engines store the piece information using bytes (kind of like FlagsAttribute) where each bit in the int or whatever represents a specific state value. For example, 0000 0001 could be false for everything except imGrabRelease. Although, this may be a little more complicated than you want to get into. The other way would be to have a base class, like you mentioned. public class Character { public bool canAttack {get;set;} public int HP {get;set;} // other stuff } public class NPC : Character { public List&lt;string&gt; Dialog {get;set;} } public class Player : Character { // properties } And then you could have something like: public int Attack(Character attacker, Character defender) { var atk = attacker.Attack.Value if(atk &gt; defender.AC) { defender.HP -= atk.Power; // or whatever you call the damage roll } } With this pattern you would have all common interactions manipulate the base class instead of having 1 Attack() method for Player and 1 Attack() method for NPC and 1 Attack() method for ...etc. So the above example uses straight inheritance to build your different character classes but you could also use an interface or an abstract class. I believe that the most important thing to keep in mind is the DRY principal (**D**on't **R**epeat **Y**ourself). I'm definitely not the best at explaining concepts to other devs (i'm working on it) but I hope this at least helps a little. 
yea the flags attribute thing is certainly interesting but my main goal is to make it easy to read and to reduce the amount of times I have to set up the 'state' variables for derived classes. I think you did a good job getting your recommendation across! thanks!
Hosting options; 1) put it in azure and ask for forgiveness instead of permission 2) RDP to your report server. Go to Turn Windows features on and off. Expand world wide web and select asp.net etc. Run it there. Again ask for forgiveness instead of permission, and ask for a new server afterwards
Exactly right - as a result I recently switched from Power BI to Google Data Studio since I can refresh the data source/poll every 30 seconds with it from a REST API. /u/sunshinedave, you may want to look into this. They have what are called 'connectors' which you can think of as adapters that can wire up your data source to their platform - many of which are specific to SQL/specific db's using SQL.
If you want to learn something fun, look into angular 7 and hosting a static website on an AWS S3 static site, after you get that learn how to use code deploy and code pipeline through AWS. Free 12 month trial through amazon. Most fun I‚Äôve had since I started professionally doing web development and mainly writing MVC applications.
You could always make a custom State class to handle all that, but it's probably overkill if all states are booleans. But, if you think you might need to do more than what a dictionary can handle then a custom class would fit the bill.
it lools beautiful... until the func part xD question: the funct type is necessary if I put the type in the parameters?
I agree that you aren't being clear... You don't like autocomplete?
Don't go around IT for stuff like this. Talk with your bosses and put in a business case detailing why you need a proper reporting tool instead. If the decisions your department makes relies on this data then it's worth it to not reinvent the wheel and to put in a system supported by IT and your vendors.
The symbol \`\_\` is extremely common in many other languages with pattern matching and other mechanisms to mean "ignore this value" or as a wildcard. This includes Rust, Go, F#, Scala, Erlang, Haskell, etc.... So it was common because of familiarity it will have to people that know other languages with the same concept. 
Those are all libraries for detouring *native* code. Harmony &amp; friends detour managed code, which is a fair bit harder (Windows apis get intentionally compiled with detourable function prologues, for one, it makes things much easier!)
Yes, but those are not C#.
Why not a dictionary? In the base class: protected readonly Dictionary&lt;string, bool&gt; settings = new Dictionary&lt;string, bool&gt; { ["someState"] = true, ["anotherState‚Äù] = false } Another class: settings.Add("mySetting", true);
[From the horse's mouth.](https://www.mono-project.com/docs/gui/)
Just a side note, if your from the UK Azure is on the governments preapproved fast track list meaning its already suitable for any gov contract as secure. Souce: its listed somewhere.. I steered a project to use parts of it instead of rackspace for gov project dealing with a tone of money. 
lol "excels"
I am indeed, interesting, many thanks! 
My vote would be Web API, because WCF is very similar to Web API and easier to learn if you understand Web API.
1) You can compare array accesses, creation of objects, or value type copy operations and will see that most of the time both are similarly performing. Maybe in total a slight head start for c++. However you can‚Äôt ask how a whole program performs because that‚Äôs typically much more dependent on the implementation than anything else. I‚Äôve just recently read that asp .net core webservers are some of the fastest ones. But if you and me would start to write a webserver together in c# it would be much slower.
Eh, I'd do the same way if I were you. Autocomplete is good, I like it. Mostly, I dislike the graphical GUI editor and the template system. 
Web API. WCF is already pretty dated
The list is called G-Cloud(shit name) 
i have an mssql, c# side project at home that retrieves securities prices from web sources and for a long time i just use sql management studio and at some point excel as my ‚Äúui‚Äù. i eventually managed to setup grafana on a raspberry pi. have a look - grafana‚Äôs pretty quick to setup, configure, and hookup to multiple data sources. 
can you explain this operator ?. 
You can put that switch-block inside the "DoStuff" method i proposed above.
He found it by using his sixth sense...
I actually found the c++ source too, but I didn't connect the dots with using PInvoke to use it! Thanks so much, this may be a solution at last. :-) I will post back if I get it to work.
[https://docs.microsoft.com/en-us/dotnet/framework/wcf/wcf-and-aspnet-web-api](https://docs.microsoft.com/en-us/dotnet/framework/wcf/wcf-and-aspnet-web-api)
lol "words"
1. Very small if any 2. If it doesn't need DirectX and It doesn't need direct access to hardware then C# because it's easier (for me at least) 3. I don't know. C++ has its irreplaceable place/position. As far as I know for serious games and softwares (anti-viruses, hardware drivers and kernel, memory optimizers, etc) C++ is the first (if not only) choice.
Web API for sure. WCF services are hard to configure and hard to consume. When something goes wrong, they are equally hard to debug. At my work, we are already breaking up WCF monolith to web API and service bus based micro services. 
You may be better of just using strings tbh. Then you can just do state = "jumping" and switch the state to determine actions.
Uhm, open source? It was not only about porting a framework. It was about Microsoft making their way into the world of OOS. Microsoft‚Äôs recent transition have had a great impact on both reputation and their stocks. However, and this is quite common with legacy stuff at Microsoft, .NET framework was way to messy and not something that Microsoft would make open source as it would have the opposite effect and ruin their reputation within the OOS community so the only way for them to transition was to make something new. Thanks to .NET core and Visual Studio Code, Microsoft is now the biggest OOS company and that‚Äôs something that certainly would not have happened if they just tried to clean up .NET framework and make it open source.
The official Microsoft documentation is a great place to start. It's full of useful tutorials and resources.
Can you please attach a link?
There is a directx wrapper (sharpdx I think it's called) I believe it offers similar speeds.
[mdn](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/)
I mean it is a dash. Arguing semantics helps no one. They already realised their mistake so I don't see how this comment is helpful.
If the object before is null it returns null otherwise it calls the expression after. So class?.ToString() If class is null it'll skip calling ToString and return null. If it's not null it'll call ToString and return that.
It started learning c# when I was 12 as my first proper language. It is rather beginner friendly. I say go for it.
The comment wasn‚Äôt directed at you, so don‚Äôt worry about it. In C# this character always has the semantic of minus, that‚Äôs not really an argument. 
It's else if not if else.
My fucking God. You just had to open a browser window and type in any freckin search engine: "Microsoft C# Documentation". **I'm sure you will never become good with C# if you want people to post links for whats there** Why the fuck did search engine been invented? For people to not ask for links. Ffs, stupid noob.
Sorry about that. I thought this community was a place where I could freely ask for help :)
Yes you can. But there's a way imho. Not to demand links. People here can guide you, rest is your own work.
Guys a total dick, wouldn't worry.
VSCode, u can search some course about how to program in C# in youtube.
I highly recommend a plural sight subscription. Many employers have a training budget, it might be worth asking your employer if you could get a subscription, and if that isn‚Äôt an option it‚Äôs worth paying for it yourself. It‚Äôs certainly cheaper than taking college classes on c# or anything technology related, and you are guaranteed to learn more.
For personal use, it‚Äôs $299/year, the price of a college textbook. https://www.pluralsight.com/pricing
1.) it depends, anywhere from the same speed to 5x slower for c#. SIMD intrinsics are coming in .NET core 3 that will narrow the gap a bit more. C#'s performance ceiling is high enough you should be able to build almost anything in it no problem though, short of bleeding edge 3d games. 2.) C# because of #3 3.) oh very much, C++ is bonkers now. I would turn to C or Rust over C++ normally
yeah I was gonna say, Microsoft built a special directx wrapper without the overhead you would normally get with C interop. 
Unlike what other comments are saying, it depends what you want to continue in. Both have their use cases for different scenarios. While WCF can be used for some scenarios that are shared with Web API, WCF excels in data transfer across multiple protocols, with easy configurability to go from one type to another (Named Pipe to TCP for instance). You say you are a WPF developer? In that case you might want to pick up the basics of WCF at least, since it flows well with desktop applications and other, more data heavy, WCF endpoints. If you would like to go more web focused, you're better off with Web API. Since it fits in well with the web trends.
We're in the same position. We've been using WCF for some time and I actually really like it but most people find it frustrating. We're moving more to Web Api and we're migrating to micro services in dotnet core. 
C# and Java are pretty similar, so you should find things relatively easy. I learned from Unity documentation so the MSDN should serve you well for general-purpose programming jobs
Web API, but then also pickup ServiceStack. Super easy to learn and expands your understanding.
Dont try and build this from scratch, start with something off the shelf and customise it. Dashboards have been around for ages now and there are some great tools &amp; tech to help build them. If the Microsoft options (SSRS / Power BI) are not cutting it, go look at what some of the other big players in the UI space are doing if you need ideas: https://www.infragistics.com/resources/sample-applications/windows-forms-cashflow-dashboard https://demos.telerik.com/reporting/dashboard
5
yea i have not looked into dictionaries to much as a data object. ill have to do that as this certainly look into them, what is the advantage of using them over something like a collection?
Do those really cost that much in the US? 
I know it isn‚Äôt what you are asking exactly but if you want to stay relevant in the industry (depending on industry) I‚Äôd suggest you look at graphql.
I recommend you to not use the integrated Webbrowser, but instead use selenium and a proper driver (chrome, gecko, whatever) There you can make the page wait until a certain frame/tag/id appears on the loaded page
Some of them do, yes :-(
It's literally not the same though.
Check that everything is happening at the right time. Look at your call stack when your code breaks on the exception.
Wow, I think one of the uni text books I bought costed close to the equivalent of $100 (here in Sweden, but an American book) but $300 sounds insane.
[https://imgur.com/gallery/TUjRG2y](https://imgur.com/gallery/TUjRG2y), this is the call stack, seems in order
Implementing anything has costs. Both monetary and man hours. They likely decided it wasn't worth the amount of work required.
Share your code.
Ill put it up on github
Did you try stepping through your code in debug mode?
Not quite since the cases would be different. On is based on which key and the other is based on which button.
Usually the $300 ones are more niche. Anyone going for a tough major has at least a couple of them from my experience. Most are in the 100-200 range new, still nuts! 
Dude you're wrong just stop it haha using web scraping in a commercial context can be completely illegal regardless of how often you do it. In fact scraping it once a day for a single page can. It depends on the website. If they pay for that data and you just grab it it doesn't matter how much you grab. It all depends on their licensing or tos. 
Now you are introducing factors that are still out of context, especially in ToS. OP is building this personal use. If a website is hosting data that says you can't even using the data personally then the website is internal and private. So please: &gt; just stop it haha
If you only ever want that one instance of DB, add a *readonly* modifier to the field. That way the compiler will tell you where you're reassigning it.
You're replacing the created dictionary yourself: https://github.com/danielandastro/SaveStates/blob/master/Server/DBEngine.cs#L42
Oh shit, I always have some grand problem, that is cause by a dumbass mistake, thank you for returning my sleep schedule 
Your db.json file is empty in that repo, and you're setting db to that file, which could potentially result in it being null. 
Yeah, a package as widely used as Newtonsoft should have an exception for that
Not necessarily. They may have to put that in there to use the data. The point is always check.
I believe the recommendation nowadays is to use EventHandler&lt;T&gt; instead of creating a custom delegate.
&gt; Not necessarily. They may have to put that in there to use the data. The point is always check. made you backtrack and delete this ^
Step into, line-by-line, and keep checking the value of DB in a watch, (or locals or autos or some debug window) as you go. See when it's being set to not null, and see when it's being set to null.
You can probably configure it to do something different here, there's a lot of settings.
Depends on what you are doing, Web API is great if you are just looking for web based only transactions. It makes for a very easy to do HTTP rest API. If you need flexibility in your layers (like different types of transports exposed) then WCF is what you want. There is a lot of mis-understanding about WCF and what its uses are in the general C# community mainly because a lot of devs get into how to use it and go cross-eyed at how to even set it up beyond the default SOAP/XML templates created by VS. Why are the default templates SOAP/XML? It was all the rage when it came out. WCF itself is an inter-process communication stack, it does not matter if that process is on the same machine or 1000 miles away. 
But still highly relevant. For internal API's or communication between trusted systems static typing is strongly preferred for the same reason static typing is preferred in C# versus JavaScript. 
Well done you win the Internet. I couldn't be bothered to carry on. But my point still stands always check the tos.
(„Å•Ôø£ ¬≥Ôø£)„Å•
This is probably the best response. It depends on what you are building. Also, it's not an either/or decision - you can use both WCF and Web API in the same application. Choose the right tool for the job. That said, I hate WCF due to it's configuration requirements and the difficulty in troubleshooting.
I think it s the good approach 
Resources wise the official Microsoft docs are a great place to start. Lots of tutorials etc.
Thanks a lot
System.Numerics Vector classes already use simd instructions
The age of a stack that is still in use says more about its flexibility and stability. The constant drive for the shiny new in tech is a bit of a fools game. You should understand what the stack is for and its supportability, not its age.
i knew someone would reply with that. i know. you can only access a tiny subset of available simd instructions with that. the full suite is coming in a more powerful but less convenient form in core 3.0
It's not really clear, from your readme.md, how to use or learn from this project.
Yep, I'm just saying go with Web API first
Thanks, I'll take a look at that. 
For WinForms use the designer. I've come across manual code and it is a nightmare to maintain. Wpf I always code by hand and WinForms always the designer.
I would not consider pointless abstractions as best practice. Having a single implementation of an interface is a smell borne if the desire to using an IoC container. I don't consider containers best practice, either. Entity Framework has its uses, but I would not choose it for any of my own codebases. I'd favour a lightweight solution such as dapper. &amp;#x200B; Your domain method on User 'Add' has a side effect of calling Login, which makes no sense to me and is not clear from the method's name. The domain object itself takes primitive types, which shows primitive obsession--again, not a best practice. &amp;#x200B; I'm afraid to say I would not point a junior developer towards this repo to learn best practices.
Plano, TX. The company I work for is looking to hire some full time c# developers. Experience with xamarin is a plus but not essential. We are also looking for Java developers with android experience.
If they talk about portability, no installs etc suggest something like sqlite.
Eh what the hell I'll put my hat in the ring since I'm starting to get interested in job hunting. Bachelor in Computer Engineering, graduated at 3.6 GPA. Been working professionally for 3 years this May. Started off at my company working in Delphi, occasionally doing some embedded development work in C++ on the LPCXpresso toolchain. I have since been given my own project where I have written a server application in C#, with a locally hosted web interface (made with Angular), that allows our embedded devices to connect. I'm being vague on purpose, if you want more info, DM me. Sorry for the wall of text. If you think want to learn more about me and my experience feel free to private message me.
I disagree with the insinuation that simply using primitive types indicates primitive obsession, but everything else is spot on.
Good explanations in the stack overflow answers (which point out this has nothing to do with ChangeType.) In short: be very careful about using multi-threaded code in static initializers. Actually doing much of anything in static initializers / constructors can be dangerous. For instance, doing anything that can throw (like doing I/O) can leave you in an unrecoverable state that requires restarting the process.
&gt; No Over-Engineering &gt; KISS Principle &gt; YAGNI Principle The very first thing I noticed is over layering. You have a context, repositories and a unit of work going on, but the unit of work is completely detached from your repositories and it's not giving you anything at all. &gt; Ubiquitous Language What domain do you work in where "UserService" is something business people say?
A single implementation of an interface can often not be a "single" implementation if used within unit tests with a framework like Moq. Which is where it can becomes quite valuable. If thats not the case though then there really is no point. Even if you want to use IoC you can usually register implementation types within IoC. I agree on Dapper over EF though. Im not a fan of EF. Ran into more hassles with it than it's solved. Though I havent used it in like 4 years so things may be different now
Actually its not at all similar the stack is entirely different, the default templates generated for SOAP/XML in VS tend to confuse people. 
You get those benefits by writing client libraries, regardless of the underlying system be that REST or message queues.
I'm a new-ish developer learning C# and I have single implementations of interfaces in my projects for mocking purposes in Moq, since I can't pay for a commercial solution like Rhino Mocks. Is that a bad thing?
Doing a lookup in a list is O(n) while a set or dictionary is O(1). So the lookup will always be better. Doing it against a list will required enumeration of the list for every item. So generally enumerating the ids to create a set should be more efficient. But this depends on the number of items as to whether it would be a noticeable difference.
I see a lot of people here passing comments on what‚Äôs wrong with it but not much in the way of making it right I‚Äôve been developing .net for 16 years and I must admit to no formal training, I‚Äôve always been a ‚Äúget it done‚Äù type of person I do follow patterns but not specifically by choice, just because it seems logical sometimes. If anyone has any repositories they recommend that they think follow good principles, let me know. I‚Äôve reached a point where all these buzzwords are becoming part of any interviewers tactics and I feel I need to get on board 
IQueryable is different because you aren't actually performing operations against data you are building a query.
Didn‚Äôt you just post and delete this same thing a few days ago when people criticized it?
Not at all. Sometimes its overkill for small projects but for anything else its probably a must. One good reason (at least IMO) is that it helps following the "composition over inheritance" rule and, like you said, it really helps with testing, especially if you are following TDD. For median to large projects it's probably a must since the hability to replace something with something else in the future is way more important. Rememter, the code is for us humans to understand and modify.
With Rust, C/C++ are no longer irreplaceable. I would stick with a higher level language such as C# for the majority of scenarios. For the low level scenarios like the ones mentioned where access to hardware is needed and garbage collection is not wanted, Rust should strongly be considered. Of course, C/C++ have a lot of inertia so there will be more libraries and examples for years to come still.
Thank you for the feedback! I'm trying to learn good habits now so I don't have to break bad ones later :)
net core is a runtime. net standard is set of apis which can be targeted by different runtimes. ie... a net core standard library could run on net core or net framework 
If you do TDD at the right boundary, then the need for testable interfaces goes away. You should yeah behaviour of your public API, not how you chose to implement the internals. Consider testing an HTTP API. You can test this via the TestServer package, aiming tests at the HTTP routes. For example, a get user by id test. If you have implemented your stack as controller-&gt;service-&gt;repository-&gt;database then you could test your behaviour by perhaps mocking the dB (or use the real one and create the user before the test) and verify the user comes back. This means you would use the real internals. You are now free to completely refactor your controller, service and repository, and have your tests remain green. This also means having IService for Service is pointless, and you are free to solve the problem a different way. 
Maybe something like this is along the lines of what you're thinking: public class ObjectState { public string State1 {get;set;} public string State2 {get;set;} } public class GameObject&lt;TState&gt; where TState : ObjectState { protected TState State {get;set;} public GameObjet(TState state) { State = state; state.State1 = "Initial"; } } public class EnemyState : ObjectState { public string State3 {get;set;} } public class EnemyObject : GameObject&lt;EnemyState&gt; { public EnemyObject(EnemyState state) : base(state) { state.State3 = "Final boss"; } }
IoC is not a pointless abstraction. It helps with testing. Testable code is inherently maintainable (not just because of the tests, but because it requires keeping things modular and classes decoupled). What's your strategy for unit testing if you don't use DI/IoC? . 
&gt; So the lookup will always be better. Incorrect. '1' can be larger than 'n' and often is when we're talking about searching a list versus a dictionary due to CPU cache locality. Thinking algorithmic complexity in terms of big O notation is the whole story is incredibly naive.
No. 
Nullable reference types by default. Fewer curly braces. More memory control options like span. Just my thoughts.
Unfortunately the best I can say is "it depends". If your class is defining BEHAVIOR, it should be just a class with no inheritance. But if your interface is defining a PATTERN or a PROTOCOL, then it's fine to have an interface with only one implementing class. In other words, what's more important? The method body, or the method signature?
&gt;Architecture with .NET Core 2.2, C#, ASP.NET Core, Entity Framework Core, Angular 7, Clean Code, SOLID, Code Analysis, Docker and others new technologies and best practices. (self.csharp) &gt;[..] &gt;No Over-Engineering Irony?
&gt;I see a lot of people here passing comments on what‚Äôs wrong with it but not much in the way of making it right Fewer buzzwords, more substance. Particularly in the practices: &gt;Clean Code &gt;[..] &gt;No Over-Engineering OK, great, but nobody _deliberately_ overengineers. Nobody _wants_ to write unclean code. _How_ are you accomplishing clean code? _How_ are you avoiding overengineering? For something with allegedly "no" overengineering, this sure has a _lot_ of components in its stack while at this point doing quite little. &gt;DRY Principle (Don't repeat yourself) &gt;[..] &gt;YAGNI Principle (You aren't gonna need it) These contradict each other. The trick isn't to apply DRY and YAGNI. It's to know when to use which.
Yes, he did. And that repository is honestly fairly bad.
This again..
Some good critic is shown here. But what I miss are pull requests how to make it better or even discuss alternatives there with code. I know every aspect depends on the situation of your current project (do I need Unit of work or is the ef context enough?). But maybe we can have a good example repo with alternative branches to really see the difference. 
I remember I've static files [working](https://github.com/marektoman/CefStaticFilesSample), but since it's from a year or more ago, do not ask for any details.
We disagree on what constitutes a unit. Kent Beck himself has said that the concept of unit testing has been malformed. A test per class is not unit testing. IoC is fine, of course. But injecting interfaces into every class is unnecessary. You are only doing it so they can be mocked, not because of polymorphism. See http://blog.ploeh.dk/2015/09/22/unit-testing-internals/
I wouldn‚Äôt call it clean... applying a shitload of design patterns just for the sake of ‚Äúfollowing‚Äù doesn‚Äôt really make the code base any better. 
In the industry, we call this programmer masturbation. 
No at everypoint. If anyone still uses 1,1 (and) your questions are irfy.
Why not just serialize to JSON and then replace the characters you need to replace?
Using Newtonsoft.Json to serialize the object ``` csharp string formatted = JsonConvert.SerializeObject(obj).Replace("\"", "%22"); ```
Because the data is tricky, there are alot of " in the string but i need to remove some of them and replace some with %22. I accidentally pasted the wrong "before formatted" string.
Thank you. I accidentally pasted the wrong "before formatted" string, see changes. I'll try Newtonsoft.Json
Curly braces are ok, it's standard of the market and it works. I agree with nullable. 
I don't hate them; I hardly see them. However, the question was retrospective. Looking at the C# I was writing at 1.0 and the C# now, I write fewer curly braces by far. Automatic properties, LINQ, bodyless expressions etc are all features that reduce curly braces and C# is cleaner for it.
REST lacks a descriptor, so every time we create a REST server, we should document it at full manually!. It's not funny. 
You can still mock from the actual class. The abstraction of an interface is almost always unnecessary. Repositories and factories are also almost always not necessary. They can be useful, but should not be the first thing you reach for. More boilerplate, more effort, more abstraction means coffee that is not expensive to maintain or refactor.
You can just as easily inherit from a class for testing as implement an interface. Or in many cases more easily.
It's not My questions. You may ask author, but reference up to 1.0 version it has to make it difficult response. 
Everything that's been replaced by generics would be removed, and the related things they can't actually do right to maintain backward compatibility would be fixed. You would be able to make immutable objects without 4x as much code as it should require. In general distancing itself from references as the primary way to deal with data, meaning creating better idioms and wider usage of value semantics. Making the dispose pattern not an abomination and adding scoped object lifetimes. Basically making deterministic destruction actually part of the language instead of a half assed tack on. 100s of terrible choices in the library would be fixed. The libs feel like they were made be 20 different teams that all hated each other. 
It's not necessarily a bad thing. That said, you could have a concrete runtime class and inherit or mock from that for your test instances. In my experience, most of the time single instance interfaces are cleaner with just the class and direct inheritance and kicking for testing. It's easier to follow and refactor. One exception had been to define interfaces in a separate dll project for use with WCF. In this case other developer groups would have a generated client with the base library, where the server implementation was separate. Most orgs don't need this, and this that do often don't code this way. Keep it simple (kiss) should prevail. Kiss/yagni etc are not demonstrated in this instance.
&gt; These contradict each other. Oo how? 
ok, version 0.2 restructured entire project. removed Dictionary for DataTable storage removed Dictionary for Serialized Template storage. removed all need for deserialization and serialization Of TemplateContainers. restructured TemplateContainer to only handle TemplateObjects Build TemplateObjectHandler to Handle actions on the New TemplateObject class Restructured much more code added extensions.. still more to do.. Reviews are always welcomed!! 
How do you manage CQRS? I'd look into mediatR library.
I'm not going to even look at it to be honest. Just by the buzzword splatter alone I can tell it's an overload of patterns for the sake of. I'm fine with DI, but prefer concrete implementations and inheriting for mocks and testing. It's easier in general. I love EF, but dapper is much easier in most cases. One of the projects in working on now is all access via SP by policy. But input and output are JSON with de/serialization from JSON.net with direct ADO client. I tend to favor using containers and npm/node scripts to orchestrate. The web client means it'll be there anyway and it's easier across platforms than many other options. I'm also not a fan of angular for similar reasons. It's just a big ball of mess and saying yagni/kiss applies here is a lie imho. There are a lot of places where these things are useful. Starting a boilerplate with them is very overkill.
The performance difference between a well written, real world C++ and C# application will be minimal. If you know your way around the GC and C#'s more advanced features, this also applies to "high performance" applications such as games.
IMHO It looks like a CV or resume of somebody that wants to impresses but it fails because it shows a lack of experience. Why?. Because it's not solving a business needs, i.e. **what this code does?** :-/ 
Agreed, although having to work with php regularly makes me so greatful for the relative consistency of C# libraries. 
I think it's a nice showcase of features and possible solutions. Just as an example, it's the first time I've seen the `Directory.Build.props` file: very cool. Or if I wanted to add Code Analysis to some existing project, this would be a pretty good place to look. The code is also very clear and easy to understand. Personally I am not so much for layering anymore. I prefer "feature slices" and self contained modules/services. I like the flexibility and agility of being able to create a little "micro architecture" tailored to, for example, the user registration flow. But it has its own downsides too. If I'd give you one advise, it would be to remove YAGNI from your description. By definition, a showcase project like this is not YAGNI, and it doesn't have to be. 
Nice post :) 
Regardless if it‚Äôs practicality, I appreciate the share. I‚Äôm always evaluating my design and lean on the experience of others. Junior or senior, there is always something to learn. If you don‚Äôt like it then don‚Äôt click it. 
&gt;Entity Framework has its uses, but I would not choose it for any of my own codebases. I'd favour a lightweight solution such as dapper. Why not both?
&gt;How are you avoiding overengineering? code review
If you create abstractions too early, you violate YAGNI. If it's too late to create them, you violate DRY.
This is a common question, and a brief search on the topic will return plenty of articles and opinions. Here's my $.02 - learn both. For reference, my background is development of commercial, data and visualization-intensive applications using both C# (up to 3.5) and C++/Qt (up to C++14) &amp;#x200B; &gt; **1)** How big is the gap of performance between a C# managed desktop program vs a C++ native QT Desktop program ? This is extremely task-dependent. As you're no doubt aware, the conventional wisdom is that unmanaged (C++) code will always out-perform managed code, and using default/out-of-the-box settings this is generally true for release-compiled code. One reason for this is that the C# runtime is providing a lot more "safety checks" and run-time features (e.g. garbage collection, reflection, bounds checking), which are generally not present in C++ release code. &amp;#x200B; If you are performing some operations such as copying or modifying very large amounts of on-box memory (e.g. convolution, image/signal processing, etc.) - C++ is likely to give you better results "out of the box". Alternatively, if you're processing a large number of DB records, you may find no difference (and your C# code has a good chance of being much smaller.) &amp;#x200B; That said: * C# can be optimized: C# has lots of mechanisms for optimizing code, including (at the extreme end) the ability to build "unsafe" portions, manually take control of memory management (pinning/unpinning memory), or even make calls out of the C# runtime into unmanaged code, if necessary. As somebody mentioned, there is a high-quality SharpDX binding to use DirectX from C#, so making a quality game in C# is definitely viable (remember Minecraft runs in Java!) &amp;#x200B; * C++/Qt implies using the Qt framework: Qt is a cross-platform framework, and if you are \*really\* writing for a cross-platform application, you will be using it not just for UI, but also for just about anything not available in the C++ standard library (or boost libraries). This would include things like DB access, graphics APIs, network IO, possibly even some fairly fundamental items like date/time and string handling. Targeting a cross-platform API does incur some performance cost compared to targeting OS native APIs (and performance will likely vary between platform targets.) &amp;#x200B; &gt; **2)** Do you prefer C# over C++ and why ? &amp;#x200B; This depends on what is needed, and what libraries I'm allowed to use. In general, the C# stack is a great starting place for just about anything, since even early versions of the BCL provide a great set of basic framework capabilities missing from the std (standard library) of C++ (e.g. logging, XML and JSON parsing, SQL support, COM interop, web frameworks and HTTP library, etc.) That said, 'modern' C++ versions (C++ 11 and up) have great expressive power, and combined with a few external libraries, can provide really compact and high-performance code. I've seen parts of software systems initially developed in C# (or Java) replaced with a "tighter" C++ components when throughput and performance become critical. &amp;#x200B; &gt; **3)** Do you feel C++ is becoming bloated with time or a bit of a mess ? (all new features C++14 17 20, template meta programming etc) &amp;#x200B; Yes and no. C++ started as a mess, really - since it was defined to be compatible with C (the first C++ compilers were front-ends to C compilers). Some "modern" C++ features are really great, as they can save a lot of boilerplate code (lambda expressions, range-based loops, improved 'auto' deductions) - some are promoting things into the corresponding std library that have been needed for some time (std::thread, std::chrono, std::shared\_ptr) - the kind of stuff you didn't need to worry about with C# because they were in the BCL/framework. Another class of new C++ features are focused on improving performance (move semantics, constexpr, template improvements), especially while retaining 'type-safety'. I'm not as up to speed on the offerings of the latest C# feature sets, but I am impressed with the fact that MS has finally "opened" the platform, is investing in making it more cross-platform, and continues to improve performance of both the JIT and the output code. &amp;#x200B; Here's a few other references of interest: * [Modern C++ vs Managed Code: Performance vs Productivity](https://www.infoq.com/news/2012/04/native_vs_jit) * [C++ performance vs. Java/C# (Stack Overflow)](https://stackoverflow.com/questions/145110/c-performance-vs-java-c) * [Head-to-head benchmark: C++ vs. .NET (Code Project)](https://www.codeproject.com/Articles/212856/Head-to-head-benchmark-Csharp-vs-NET) * [Modern Cpp Features](https://github.com/AnthonyCalandra/modern-cpp-features) &amp;#x200B; &amp;#x200B;
This is what things like Swagger code generation are for.
A collection, like list or array, can be accessed by numeric index, you need to know the index of the setting you want to access. You can create extension methods for base settings.
No more BindingFlags üòÅüòÅüòÅ
I open the code. I see the word repository. I come here to write a comment about how much this sample sucks.
The [eShopOnWeb sample](https://github.com/dotnet-architecture/eShopOnWeb) has become quite decent in my opinion although for 90% of the projects I'd drop the repository altogether but if not this sample is the only one I know which provides proper implementation with specification pattern.
If you want to teach people about specific patterns, focus on creating a reasonably-sized example that showcases how a pattern or technique helps you solve a specific problem. Shoving as many buzzwords as you can into a single project will only show you that you want to do right things for the wrong reasons. It's not about knowing all the techniques - it's about knowing why are you using them. This is not clearly visible in your work.
Thanks. I will try this when I return to work on Tuesday.
I didn't know MS released .NET Core 2.2.2 already. Last I checked it was 2.2.104
I think that if you went into some detail about what the application does and what the functional and non-functional requirements were then we would be in a better position to judge the architecture.
Dot net allows you to create enterprise applications that scale well. If your main driver is saving at hosting level, for yourself and your clients, maybe you have better options, like PHP. 
Explain to me why you're claiming to follow all these practices... It seems like you're just listing every design principle / buzzword for a job... 
&gt;What domain do you work in where "UserService" is something business people say? Oh man, I'm working with a company right now and that is exactly the kind of terms thier software uses. The structure and organization of there code is horrible.
I recently used EF for the first time in a project, and I've found it to be a hassle still.
Angular is a big ball of mess? How so?
You got my upvote for the last sentence.
A remark that nobody has mentioned: this will give you values from 1 to 19. Is this what you want?
Thanks (I'm your first star). I'll be back to look at that some more.
Don't do this. Some legacy code I'm maintaining is full of this nonsense.
I did not know doing that was so bad, why is it?
Ahah thanks! It's kinda sad that this is often the first thing to be forgotten thing when coding. :/
No problem :) When you are starting don't worry too much about that. You WILL make mistakes. We all do! You will find out that most of the good practises will appear naturaly when coding. Dependency injection is a great example because once you start testing your code, you'll try to decouple your dependencies in order to mock them. Even if you never heard of DI, you'll probably come up with a solution that is very similar (IoC in particular).
Take a look at Linode and DigitalOcean if you just need a cheap Linux VM. At home server is OK for personal toy projects, but as soon as clients or money is involved I would go to the cloud for managed hosting.
I see red flags. Why can't your DB guy use existing tools to access the mongo database? Why do you have to build a new driver?
It‚Äôs not that bad. But it definitely looks like a project made by someone who has never really worked on or created a project with multiple design patterns. This looks like what a person who makes small projects THINKS a properly architectured sln looks like. 
I have 25 years of C# 9.9 experience but that's too much even for me.
Thanks for those recommendations. At home, which would be for personal projects only, I guess my main concern is some bad actor who uses up all my bandwidth or otherwise causes me financial pain.
It's fine. I don't know who that guy is it or why what he says matters, but there are many ways to design and this is one of those ways. One test class per class file is acceptable. Not one unit test per class, no, but each class with it's respectable injected interfaces need to have a test associated with it. 
I want to learn this technology in particular because it's leading edge, that's my main driver. I'm trying to apply it in a simple as possible manner since I'm still learning it.
Node/npm Nuff said
Good one. The ui looks clean. How many total hours did it take to make it?
As annoying as npn can be I can‚Äôt imagine working on any larger application with jQuery. I think your issues with npm are a little exaggerated. 
Personally, I opted for just making my own TCP server, so I could completely customize the protocol. It's more work, but depending on your actual requirements it can open a few doors where simple strings don't suffice and speed/data size is critical.
Not really exaggerated. I thought the same thing at first until I just took time out to finally learn it all, assuming my issues were lack of knowledge/experience. But I can confidently say after that endeavor, that npm and anything that uses it is very bloated and over-complicated. It's very unnecessary for something that should be very basic.
Where is your mother?
 TemplateObject TempObj = GetTemplateReportSheet(ReportName, SheetName); var Columns = (from fi in TempObj.Format select new DataColumn(fi)).ToArray(); dt.Columns.AddRange(Columns); var Rows = (from ri in Enumerable.Range(0, TempObj.NumberOfRowsToAdd.Value) let ro = dt.NewRow() from ci in Enumerable.Range(0, TempObj.FormatLength.Value) let setRo = ro.ItemArray[ci] = TempObj.Content[ri, ci] select ro); 
üòÇ
Character.Stop()
Well what‚Äôs complicated about npm? It‚Äôs a package manager. Most libraries and frameworks also have some form of dead code elimination via tree shaking. Lazy loaing makes initial bundles smaller. What is really complicated about npm? Kinda seems like you aren‚Äôt all that experienced and have run back to what your comfortable with. There‚Äôs a reason jQuery is dead. If the only applications you work on are small little blogs I get why you can make do with it. I say this all as someone who hates JavaScript and is a .NET developer. 
You have have asked like 20 questions in 2 sentences. And even there it's not clear what you're asking... All I can really say is break down the individual parts you need to figure out and Google them individually. I.E. (How to use .net core web api with another app) (How to use an SSO in Kotlin) (How to use an SSO in ASP.NET) It will take you time to learn everything and no one can do your term paper for you. Hope that helps.
To be honest, I've never used the IDependencyResolver myself directly - I'll use it through one of the IOC packages available: Unity, Autofac, Ninject, StructureMap, etc. I would use one of those and in the container, you'll map your dbcontext to the appropriate context all-preconfigured. Try this (guide from Microsoft)[https://docs.microsoft.com/en-us/aspnet/web-api/overview/advanced/dependency-injection]
Thanks! I had seen a couple references to Unity which were really confusing since I just think about the gaming engine when I see that. But I just watched a YouTube video showing start to finish how to do dependency injection with Unity and it looks super easy.
That is the one I've always used (before Core) and it worked fine. Good luck in your adventures!
I think you're just looking for an abstract method.
Do you have a basic example by chance? Or something I can read?
Let me put it this way: I was on my way out. I was making arrangements to abandon .NET for all future projects. I love C# as a language, but it just had too much of a Windows emphasis. Having to install .NET on a target system is obnoxious. The endless backwards compatibility is certainly nice but restricts certain innovation. Suddenly, .NET Core shows up... and it is everything I dreamed it could be. It's open source, detached from Visual Studio, lightning fast, properly cross-platform (sorry, Mono), and lovingly redesigned. Now, I'm headed the opposite direction: I want all my projects to be in C#. I've fallen back in love with server-side development with ASP.NET Core. Was .NET Core worth it? My goodness. It came at just the right time! It also brought with it godly features (such as `Span&lt;T&gt;`). It has reignited my interest in building a game engine in C#. (I only ever entertained the idea in C++.)
This is the MSFT suggested pattern for microservices
https://dotnetfiddle.net/ZbR0BP
Holy crap, thank you man.
Or traits. I could seriously us some traits here.
I wrote one decades ago using C++. Anything OLE/COM is harder than it looks. Like much harder. Having to comply with COM threading and memory models (remember single threaded aprtments?), marshalling data in/out of safe memory, converting between lpstrs/plwstrs/tcharcs/bstrs, etc etc. I‚Äôve also written sql parsers - again, much harder than it looks (the first 80% is easy, the last 20% takes 90% of coding + testing edge cases). Why not just create a nice simple wrapper (using mongodbs c# lib) that fetches the needed data without wedging it into a sql query?
If you have ruled out reflection, I don't think that there is a way to do what you want. What you are essentially looking for is a way to detect all subclasses of a given class, at runtime. I would probably go with adding an annotation to all the subclasses, and scanning for those. 
Thank you.
You should be converting between the types directly. Passing through string adds unnecessary complexity. So, something like this: decimal amount = 50.0M; int amountInt = (int)amount;
I don't think you can do that without Reflection to grab types of that abstract class, or creating register a list of those instances of the classes.
I‚Äôm starting to come to that realization. Thank you!
Vultr offers a $2.5 VPS, Google (GDP) had a similar micro VPS for free. Azure free plan hybernates the site after some time. You can also chain a free Cloudflare cache between the domain and the VPS to improve the response time and to save traffic.
The reason you've got so many negative replies, is because (aside from the screenshot) is that your code is so badly formatted and all over the place that it isn't clear what the objective is. You're trying to assign a price value (something in dollars, I presume) to the row and column indexes. That doesn't make any sense. Before asking how to convert from decimal to int, you should evaluate what you actually want to do.
Ditto.
Any particular reason you're using framework instead of core? DI through Unity or something is fine, but it's even simpler if you use .net core instead. Then you can just go into your Startup.cs, in the ConfigureServices() method and write services.AddScoped&lt;IMyService, MyService&gt;(), and you're wired up for free DI already.
Yeah core makes this super easy from the looks of it but it looks like it's not much different with Unity or other similar extensions. I'm making use of existing .net libraries to make a web api proxy/Integration into a separate application so I'm hamstrung by that requirement. I could write my own lower-level interface to that application from core but it'd be way more trouble than it's worth.
Or you could just split that stuff apart into like classes and inheritance and stuff like you should.
Solid info...thanks a ton!
You could use the Decorator pattern instead of subclassing? If it's new code ofc..
Will research it. Right now I used reflection to search for the RedPill function in each subclass, then I take it and convert the invoke into a Boolean to capture its return value, then I add it to a list.
Maybe you can solve this with reflection, but as far as I know, you probably have to put all your known classes in a collection that you loop through. If you use inheritance and make an abstract method in your base class, then you can loop through all your types, make an instance, run the RedPill function, then save the result and ditch the instance. That would be a pretty easy way of solving it. Perhaps you could go a little more advanced once this is working and collect the types automatically using reflection.
Reflection is the only way to accomplish this.
Bear in mind that good enough is perfect, so don't let a utopian dream be the enemy of good. You can always come back and refactor later when you've learned more. You probably already have something you can be quite proud of.
Where are the tests??
Why not handle this at runtime? And if you need it at compile time, why not use T4 templates?
Thank you for the kind words. And yes, I am quite proud of my current setup. Most of the programming I seem to do these days uses reflection. It works, but just feels dirty.
&gt;Clean Code There are very few (if any, didn't bother to count them) private methods. There should be, because there's code that has a lot of different abstraction levels, like the SignInAsync method on the UserService. One of the reasons of splitting a method up into several smaller private methods is to keep everything on one abstraction level. &gt;DDD Why? Because you have a 'domain'? Because you use 'repositories'? The only 'DDD'-like feature of your code is that it looks to be persistence-ignorant. The way the code uses domain models is very un-DDD-like. To update a user, you don't create a user from the input model, load a user entity from the database, and then update the domain model with things you want to keep. You *hydrate* a user domain object from the database, and then call one or more methods on it to change it, then save that object back to the database. &gt;Ubiquitous Language You can't have 'ubiquitous language' in a vacuum. It only makes sense when you actually have domain experts with which you can discuss problems to solve in a domain. 'User' and 'sign in' aren't really domain-specific concepts. &gt;Architecture Your 'application code' is coupled to the fact that it is a web application using JWT. That's pretty bad. What if the customer wants a desktop application? The 'models' are used everywhere, including in the web app. Now you can't change your models without changing the contract of the web app, and vice versa. &gt;The **Domain** class is responsible for business rules and domain logic. It does not depend on any framework or other layers. Uh, yes, it does. It depends on the 'models' project, which in turn depends on the 'cross-cutting' project. Everything should depend on the 'domain' project, including the database project. Your 'application project' should be merged with your 'domain' project.
not everything is about abstractions... there are other places where code duplications can exist
I‚Äôve seen this referenced a couple of times before when I‚Äôve been looking at https://github.com/ardalis/CleanArchitecture I‚Äôll take a look at it. I would need to re-think my caching strategy if I went down this route as I‚Äôve always mixed my dB calls in with my caching which I need to get out of the habit of doing
Why do you need all of the separate classes? Wouldn't a better approach be to have a computer type enum, run the all of the redpill functions to figure out which enum it is at construction, and then have isVirtual/the enum understand which enumerations are vms?
No. The way I do it is it all starts out with a systeminfo print out. Everything from motherboard, NIC, CPU, RAM, GPU, storage, other vendor information, and DirectX capabilities are added to a big string, kind of like how CMD does it, it just dumps all or most of the systems information. After that, I use each classes red pill function to run a check against the gathered information. Each virtualization software all has different vendor information and IDs, especially in the registry which are in different locations, and each virtualization software also contains its own tools and services running on the guest OS. So each class is different. Once a red flag is found, the function will return true and there it is. I don‚Äôt need to know WHICH or WHAT type of virtualization software is used, I don‚Äôt need to know anything about it either. I just need to know that the operating system is running within a virtual environment. Using Reflection, Inheritance, Collections, and WMI, has been more than enough for me and works great.
oh I needed to do something slightly similar but with calls to apis and then had to aggregate all the results into a single object. It was difficult and I ended up just solving it with an enum, which is clearly not the solution you're looking for 
I'm just going to leave this here. ODBC driver for Mongo https://github.com/NYUITP/sp13_10g OLE DB provider for ODBC. https://docs.microsoft.com/en-us/sql/ado/guide/appendixes/microsoft-ole-db-provider-for-odbc?view=sql-server-2017
Each one of those #IF statements represents a different library that happens to need a nearly identical API. T4 might be the way to go, but that offers a pretty bad developer experience when you need to frequently edit the templates.
In such a trivial things - totally agree. But if you want to test complicated business logic with many possible behaviours/paths it is much more cleaner and easier to maintain when you just isolate the code that you want test from all of its dependencies and test just the thing you want. But of course, integration tests are also very important
I used to agree with what you're saying (as an 18 year dotnet dev) but then I actually learnt npm/node/angular properly. I took on a tech lead role and was forced to really get involved in what the front end guys are doing. I'd say since angular 6 they've really fixed things up. But you have to remember that angular is for building single page apps, not making an ajax request for a couple of forms. For that I use pure es6 with typescript/webpack using pollyfills. That makes jquery look bloated. For me JQuery has no place anymore. No frameworks at all for simple stuff and angular for large. 
Why not move all these methods to an abstract class and then pass the required types in the derivated class?
Hard to tell exactly, but should be somewhere between 40-60 hours.
I am not able to get the keyup\_to\_button to trigger. 
I have done that in other places, but to do any more would require a major refactoring effort in a shared library. Consider this: public abstract partial class PostgreSqlDataSourceBase : DataSource&lt;NpgsqlConnection, NpgsqlTransaction, NpgsqlCommand, NpgsqlParameter&gt; I would have to add a type parameter for `PostgreSqlLimitOption` and `PostgreSqlObjectName` as well. Six type parameters is a bit much for a generic type. Another problem is that not all databases support all operations. For example, Access doesn't allow Upsert and MySQL doesn't have a table-valued function. I would rather use an `#if` than expose a method that just throws a NotSupported exception. *** The final problem is C# specific. If you have partially overlapping overloads in both a base class and its subclass, the compiler will pick a subclass method when possible. I found this out the hard way when porting some VB code to C#. See, in VB it merges all of the base class and subclass methods into one list before picking the best match. So you don't have stuff like `Foo(object value)` hiding `Foo(int value)`. While I generally respect C#, I think they got this one wrong.
If you don‚Äôt want to use reflection then you need to use an enum or a registry object with an abstract method. I personally would use an enum because the pattern is established. A registry is a singleton that each subclass must call statically with either an instance of itself or a reference to a function. The registry then maintains a collection of RedPills internally and can provide that list back to your client code upon request. Enum is a better solution if you are always defining the set of options, registry is better if you want to allow clients to provide their own implementations.
&gt; The only problem is that I have to create new instances To call a method you need to have an instance, unless it's a static method.
I already know this, and mine are static. Thanks.
Then it's mostly trivial: Iterate loaded assemblies, iterate types, filter out types that don't have your method, call the methods. Most annoying issue could just be to make sure the relevant assemblies are loaded already.
My dude macros died because professional programmers realized how generally not fun it was to maintain macros. What you're doing could probably be done in normal, boring, not-at-all-eyebrow-raising C# if you tried really embracing the language and left C++ behind. All of us in here have worked at least a couple times with another person who wanted to make other language concepts work out in C# but it won't work out. 
You just made in issue that has already been solved more complicated than it needed to be.
Hi mate, this is fantastic. I'm looking to bring my workplace forward into ASP.NET Core at the moment so this is great timing! Is there an article, blog or readme that would give some overview or explanation for the project? Thanks! 
I looked at the repo for 5 seconds and I would say the answer is clone it, open source folder, double click on the solution file, look at what he has done. But yes a more descriptive read me would be sweet.
Dapper on the query stack. Entity framework on the command stack.
So if you shouldn‚Äôt have only a single implementation of an interface. i thought it was something to do with interface segregation principle.
Because you now have two approaches to maintain 
But are you free to refactor? You ought to be able to refactor the middle of your code - the bit in between the hard contracts (your HTTP contract and a third party API, for example) and have your tests stay green. Forget unit, integration etc. These terms are loaded and open to interpretation per each development. I think of tests as tests. Some are fast, some are slow. I try to have as many fast as possible, while trying to make my slow ones faster and as reliable as possible. 
Yes, I agree. It's not a hard and fast rule -- there are always trade offs, and for sure something particularly complicated should be tackled closer to the metal. 
Please correct me if I‚Äôm wrong, are you asking for the ‚Äúvirtual‚Äù keyword so that you can have virtual methods? If so, check the C# ‚Äúvirtual‚Äù keyword. 
An interface is an abstraction, right? If it only has one implementation, then it's not abstracting anything. 
I‚Äôll check it out but I do have this system up and running. I ended up getting frustrated and used reflection.
You either have to use reflection to harvest your ‚Äúplugins‚Äù or your plugins have to have the chance to hook into an event handler and register themselves within the application startup/initialization phase, you then can call your virtual method by emitting an event to the event handler. 
By the way, reflection is there for a reason. It is very powerful and useful when used correctly. I have almost never seen an application that doesn‚Äôt use reflection here and there. Just be careful with what you are doing, mostly performance and security wise and reflection rocks. 
I love Reflection, but it doesn‚Äôt help me learn OOP.
It is a part of OOP, at least in dotnet world. 
Why are you making the "VirtualComputer" classes sub-classes of Computer? From what I understand you never actually instantiate any of the sub-classes. And if you do instantiate them you don't know which one to use until you already have run your RedPill detector method. So is the sole reason you make them sub-classes to give them access to the Computer class's private properties? And if you're not instantiating them then there no point in making them sub-classes since static methods don't have access to instance members. &amp;#x200B; The only way I can see this being done under those constraint is an unholy mix of static delegate invokations: [https://dotnetfiddle.net/ClwBnk](https://dotnetfiddle.net/ClwBnk) The thing is, since we're working with static members, there's still no need to make the detector classes derive from Computer, it works exactly the same without it. &amp;#x200B; OR, you could just use a helper class instead. And if you do this detection in order to decide which sub-class to instantiate then your much better off using a factory pattern. &amp;#x200B; Simple helper class: [https://dotnetfiddle.net/vmRROy](https://dotnetfiddle.net/vmRROy) &amp;#x200B; Factory pattern: [https://dotnetfiddle.net/WkF0rP](https://dotnetfiddle.net/WkF0rP) &amp;#x200B; &amp;#x200B;
No it isn‚Äôt. Reflection exposes metadata and allows programmers to decide what to do with such data.
Because I‚Äôm retarded. And thanks, I‚Äôll definitely check those out.
Steve Smith is great. First time I heard about the specification pattern was in one of his talks. That sample however seems nowhere near complete. It literally has 1 model.
I don't think this is good advice. Ages ago when DotNet needed to have the runtime installed on a Windows box, and pushing stuff to it was a palava this was possibly true. These days it runs natively on Linux and Windows and doesn't need anything installed, it can all be installed with the application. Any business today that thinks they'll save actual money by scrimping on hosting is going to have a bad time. So I'm guessing OP's only cost concern is for hosting his project as a demo to prospective clients.
You can use [ASP.NET](https://ASP.NET) Core targeting .NET Framework, Then you can use existing the existing libraries but get the benefits of [ASP.NET](https://ASP.NET) Core such as the built in DI. The naming of [ASP.NET](https://ASP.NET) Core/.NET Core is really confusing! 
You are describing me an API, I‚Äôm describing you how it works in practice. Anyway what works for you works the best. Good luck. 
&gt; Not to mention that `Thread.Abort` is not available in .NET Core. [Added in 2.0.](https://docs.microsoft.com/en-us/dotnet/api/system.threading.thread.abort?view=netcore-2.0)
I hadn‚Äôt really heard of him until this so I was very sceptical to follow other architecture recommendations without knowing the person‚Äôs credentials. I think blindly following what people suggest is ultimately a bad idea and it‚Äôs clear to see that when people have suggestions on architecture to follow that people always have opinions of their own. There is no hard and fast rules I don‚Äôt think but coming up with clean code is where I want to be now as I think it‚Äôs holding me back
&gt;T4 might be the way to go, but that offers a pretty bad developer experience when you need to frequently edit the templates. Agreed... I'd probably roll my own purpose-built templating before trying T4 again. Maybe write a syntactically valid generic class and use a Roslyn analyzer to transform it or something. I don't know. What you have is pretty obnoxious though... I wonder how much you're truly saving vs. total copy/paste? After all, this appears to be what you're doing elsewhere in this repository to flesh out the separate implementations. - If it actually was like that, and you've factored it out because you couldn't keep them consistent the old way, **perhaps** an alternative would have been to write an internal interface and then write a Roslyn analyzer that ensures that all implementations of all that interface's members are syntactically identical? - Just a thought... it's got its own weirdness to it. Hard to say which is better, especially from an outsider's perspective. You've clearly got a solution that works for you, though, and it's all internal, so you can change it without taking a breaking change. That's not a bad place to be in, all things considered.
I know this is marked as solved, and maybe I don‚Äôt quite understand what the OP wants to do, but I think dependency injection is the answer. The base class needs to know the subclasses exist, right? This is easy with DI and lets you get rid of all those static classes and avoid the related unit test issues.
OVH is good, dual core, 2gb RAM for ¬£4 a month. They also scale up. Vpsdime is also a decent one but a little more costly.
Create an interface that has bool IsVirtual() on it. Have your redpill detector thingies implement that interface. Have a class that takes an ienumerable of that interface (or params) and has a single function called isvirtual that iterates over that list of implementations of your interface, invokes IsVirtual and returns true if any of them return true. Then instantiate this class at the beginning of you application, you can even make it a Singleton. No reflection needed unless you want to automatically pick up new implementations.
Consider the deployment story as well. VM options will require you to ‚Äúroll your own‚Äù to some extent. Look into containers if you go down that route. Also check out Azure web apps, they have a free option I believe. 
Azure's free tier will be perfect if it's not massively used.
Oh thank you!
Seems like a gotcha that `arr[^i]` is not equivalent to `arr.reverse()[i]`. When the indexing type is strictly an int, it makes sense to disallow -0. But now that there's a dedicated Index type, and the operator isn't `-`, I think the argument against using ^0 is much weaker.
Why not just use negative numbers to represent from-end indices?
Aws
azure, DO, OVH, all cheap options. are you looking to host both the webapp and the database on the same box, or are you looking to have a managed service?
Oooh, thanks - I'll check this out :)
Is there a specific reason you need a static method? Because you could use a singleton and recieve the same functionality without using reflection. Or even better a single instance dependency injection for `IEnumerable&lt;Computer&gt;`
Looking good. Are you planning on expanding it / looking for contributions at all?
Maybe because this would cause weird bugs when the coder pays does poorly at calculating an elements index and gets negative results by accidents. A explicit way of saying that you want the item from the end of the array seems more reliable
Yeah I was a bit put off by the mismatch between `arr[^i]` and `arr.reverse()[i]` for a while too; but actually it's the same as the mismatch between `arr[0]` and `arr[arr.Length - 0]`; and having the hat operator point by default to just-past the array makes a lot of other algorithms/use-cases much simpler.
I agree with you
Thank you for documenting my thoughts :) 
This encodes intent explicitly. Explicit is ‚Äòalways‚Äô better then implicit. 
What's one of those use cases/algorithms?
I think negative indices would be more explicit. Its obvious what negative array index does, but hat operator could mean anything.
Having it act like `target.Length - n` makes a lot of typical usages a lot simpler. For example, if you want to create a range (using the new range syntax) that skips the first 20 and last 20 elements of a collection, you can simply write `myCollection[20..^20]` because the range operator is inclusive-start to exclusive-end and the hat operator works as '`myCollection.Count() - 20`'. There's more, mostly to do with how the hat operator works with the related ranges feature; but I'm fairly convinced that they've got it right. 
This sounds like a project for which C#/ASP.NET Core would be *perfect* for throwing it together quickly and beautifully. Obviously it will go a bit more slowly because you‚Äôre picking up new technologies, but with some experience, this could be thrown together in a day or two, easily. I think it would be a great excuse to begin picking up some new skills!
I've had good luck with AWS lightsail. I used to run two virtual servers that hosted about 30 sites out of LiquidWeb. Used to be good company. Not anymore. We exited the hosting part of the business and got completly out of LiquidWeb. Feels so good. In the process I moved a small site to AWS Lightsail. Super easy. Fast. Couldn't be happier. Starting at $3.50/month.
Since a lot of the time the index is calculated from some other value, saying "I'm ok with a from-the-end index" explicitly is important, otherwise weird runtime errors may creep up.
Does it work on lists? Ilists?
Never used DI before.
Okay, first of all, good job on actually releasing something! Most people fail at that. I went through the source code and found some issues though. The biggest problem is that you are not exposing async methods, you are trying to wait them out but how you do it can cause a deadlock in some cases: [https://medium.com/bynder-tech/c-why-you-should-use-configureawait-false-in-your-library-code-d7837dce3d7f](https://medium.com/bynder-tech/c-why-you-should-use-configureawait-false-in-your-library-code-d7837dce3d7f). It's lots of text that is hard to understand but if you just await-async everything then you shouldn't run into problems. Imo, you should expose those methods as \`async Task&lt;bool&gt; sendMessageAsync(string strMessage) { ... }\`. Then the calling application has a lot more flexibility with how the threads are managed and it's not your code that is responsible for deadlocks. The second thing I came across was that you return only \`false\` when there is a http error. I tried to run it and forgot to add "bot" in front of my apikey, the method just returned \`false\` and I couldn't figure out what was wrong. If you get an unsuccessful http response, you should return something more precise. Easiest would be to call \`result.EnsureSuccessStatusCode()\` that will throw an exception if there is any. Third, why are you try-catching the \_http and then just throwing it back up? First of all, if you want to rethrow the same exception upwards, don't call \`throw ex\`, just call \`throw;\`, this will preserve the call stack and is much easier to debug later on. Also, if you don't know, what to do with the error, it's better to not catch it at all. If you remove try-catch block, it will just throw up, back to the calling application, which is totally fine. Last thing is about how HttpClient works in .NET. It is recommended to minimize the instances of HttpClient in your application. It is because each time you do a request, you are probably also creating a small thread that is waiting for the response. If you do lots of requests in small amount of time, you might get something called "thread pool starvation" which means that the application can't keep up with creating and closing new threads for you. I've killed a website like this, it wasn't pretty. If you keep a single HttpClient instance, it is able to manage its threads much more efficiently and hopefully won't create any trouble. I would recommend you to have the calling application pass its own HttpClient instance together with strBot and strGroup values. &amp;#x200B; Overall, the code actually works, great job! &amp;#x200B;
Reflection is fine for limited use but there is a performance penalty. Reflection also forces your classes to have knowledge of the inner workings of other classes, which is a source for bugs and makes maintenance hard. With DI your classes need to know far less about each other - just that they implement a particular interface. You have to do a bit of work to set things up (though you should be able to extract interfaces from existing classes quickly and easily), but it will pay dividends down the road. The problem with static classes (or singletons, which are basically static classes) in unit testing is that tests will run concurrently, so if I am testing an Static and set some property, then test stuff based on that property being set, my tests may fail if a different test happens to unset it. To reliably pass or fail, each test needs its own instance which is impossible with static. Throw interfaces into the mix and you can mock a class with ease and write tests that are only testing one thing, not a big chain of things that get called as a result of the the thing you really want to test. You find bugs quickly that way and end up building up your app on a much stronger foundation.
Why not use linq `.Last` or `.LastOrDefault`
Yes, it is a replacement for Enumerable.Range()
&gt; What you have is pretty obnoxious though... I wonder how much you're truly saving vs. total copy/paste? Copy and paste was what I was using until I needed F# compatibility. F# doesn't honor implicit casts, so I had to double the size of my API to offer them both overloads. Then we found out that F# doesn't resolve overloads like C# when there are both generics and optional parameters involved. So I had to make a bunch of overloads without the optional parameters too. So I have 3x as many public methods. But by sharing these ridiculous files across 6 projects I've still reduced my method count to 1/2 of what I started with. 
Last is good for getting the last item, but what about the item that‚Äôs 38 from the end? ^38 is simpler than whatever way LINQ would do it. 
This is explicit indexing, LastOrDefault() is a linq extension method that does not guarantee how it gets that last item for non indexable collections, it literally iterates through all of them 
Thank you for the feedback. To be honest it is still a bit of a work in progress, started using it for something while still tweaking and thought I would share it straight away. I will change it so that it exposes async methods, makes sense to do that :)
C# actually has to support arrays with indexes that are arbitrarily ordered. See [Array.CreateInstance(int, int[], int[])](https://docs.microsoft.com/en-us/dotnet/api/system.array.createinstance?view=netframework-4.7.2#System_Array_CreateInstance_System_Type_System_Int32___System_Int32___). I *think* this may be an interop thing with VB, but wouldn't swear on it.
If you can find a source I'd be interested. I remember hitting an issue about 15 years ago trying to move VB6 code into VB.net, where all the arrays were created with a lower bound of "1", and the code was scattered with "lbound' statements.
For some reason, while reading this, I realized why there is no short circuit variant of the XOR operator (so a ^^ b instead of a ^ b). (you can't evaluate XOR without evaluating all arguments. Duh.) 
What am I missing? Why are these useful and special enough to add a new operator into the language? What's the driver behind the adding this?
The new syntax seems completely unnecessary. New syntax should be reserved for things that you couldn't do without it.
You want to create a keyboard shortcut?
I am practicing coding by trying to make a calculator. I have successfully made the buttons and such work, but now I want to be able to use the numpad as well. I don't want to simply type in the text box though. 
It‚Äôs just not possible to retroactively change the behavior of negative indices. Almost zero indexers use an unsigned int; therefore, you can not rely on negative ints currently being unused.
Yes and no. If your collection implements IList, LINQ will simply use the indexer (unless you pass a predicate, in which case that‚Äôs not really feasible any more).
Absolutely, but just in terms of clarity and knowing exactly what's going on the indexer is clear. Linq does do the optimisations you mentioned but you know that because you've looked at source code or done some research, not everyone will be in this situation of knowing those details or the edge cases like passing the Func etc. With using this indexer thing you very clear communicate what your code is doing. Relying on interface implementation details feels a bit of leaky abstraction to me 
when was the last time you needed n-th item from the end??
Thanks, this is really handy! Worked a treat
[VSCode](https://code.visualstudio.com/) (albeit not an IDE) is pretty neat, it covers my needs at least. [Rider](https://www.jetbrains.com/rider/) is not free but probably your best bet if you **NEED** a full fledged IDE.
I strongly agree when it comes to ElementAt(). You should use an indexer over that whenever possible, for clarity. With First() and Last(), I think it‚Äôs a bit muddier. (And once you add a predicate to say ‚Äògive me the first element that matches the following criteria‚Äô, indexers aren‚Äôt even an option.) Yeah, I did check the source code just to go doubly sure. My point was mainly that LINQ isn‚Äôt as dumb/slow as some people think it is.
So, you don't use the `using` block?
Yesterday.
Looks like the perfect illustration of the new feature that is designed to keep accidental bugs to a minimum when converting the old code. Personally I do not like the lack of symmetry. When the first element is `arr[0]` and the last element is `arr[^1]` then all index calculations from the end are different than ones from the start. 
She passed when I was a kid unfortunately. Where‚Äôs yours?
I'm talking about new features. Additional syntax carriers a heavy burden. It brings complexity. It increases the learning curve. It decreases readability for people who aren't well versed in the language. This introduces a brand new operator for the construction of a specific type. Should we add brand new operators for the construction of DateTime, TimeSpan, Uri, Guid, Exception, Type, et al? 
I think that it has something to do with python. Python is a very popular language nowadays for some reason and it has this negative indexing for arrays. Have to make the old good C# more like python for all those young mustangs ;)
Well, we already implicitly understand that `arr[0]` is the first element in an array, and `arr[arr.Length - 1]` is the last (not `arr[arr.Length - 0]`); it's basically the same thing. It makes a lot of sense when you look at it from the broader picture IMO. It's just that *in this specific case* (where you want something akin to `arr.Reverse()[0]`) it seems odd.
Heroku if it‚Äôs .NET Core
As others have said: Aws or azure if free tier if you‚Äôre not wanting lighting fast response times and low amount of users I can‚Äôt sing digital oceans praises highly enough but I‚Äôve never hosted sql Linux on there so not sure how well it works or even how to set it up 
Converting a `char` to an integer gives you the numerical value of the UTF16 code unit, it doesn't translate digit characters into their equivalent numbers. You want either `byte.Parse` + NumberStyles.HexNumber, or something a little hacky like `char - '0'`
Visual Studio Code, for sure. You can write code, it has markup and completion, and you can build/debug. In many ways, I find the experience superior to full Visual Studio.
48 is the ASCII value for the char "0".the actual value stored in the packet is 48, so you need to convert the values from ASCII encoding. There are a couple of ways to do this. Probably the easiest is use strings instead. Calling System.Convert.ToByte() and passing the char '0' will give you 48, while passing it the string "0" will give you 0. But that might be inefficient. You can do some simple math to convert, use the information from asciitable.com to write a method to convert a char c to a byte b.
VSCode along with the official C# extension (from Microsoft) has been working pretty great for me. Are you developing for the Mono or .NET Core runtime?
I think it happens more that I need the last *n* items actually. 
Wish I could say the same. She is an abusive manipulative narcissistic schizophrenic compulsive liar. She was the cause for my parents divorce, our trauma, and my shitty up bringing. Today she pretends to be innocent, like a delicate flower that could never do anything but deep down I know she‚Äôll always be the raging alcoholic we all knew her as. I have not spoken to my mother in years and refuse to have any communication with her. I will not be there for the funeral.
Yes a good point. It gets a bad rap at times but when you look at the source you see how much effort they put it in to make sure it's as efficient as it can be 
Which learning curve? ‚ÄúOh, you count form the start using `x` and from the end using `^x`.‚Äù It‚Äôs not a totally new and hard concept like async/await, Span or ref structs.
I never said it was a hard concept to learn, I said it was unnecessary. This is essentially creating a brand new operator for the construction of a specific type. You could flood the language specification with hundreds of these and turn the language into a confusing mess that's difficult to learn.
However, `-something` isn‚Äôt a different type that indicates the end, it is a normal `int`, and it is already invalid to index an array with negative value. There *is* code that relies on that behavior, such as catching the `IndexOutOfBoundsException` and doing something different. Changing that behavior would break those programs.
So ugly. So unintuitive. 
They have already done this before. `T?` is shorthand for `Nullable&lt;T&gt;`. And I think the expression `array[new Index(1, true)]` is long enough to warrant a syntactic sugar.
There are two kinds of arrays: * **ELEMENT_TYPE_SZARRAY:** A one-dimensional zero based array int[] a = new int[0]; int[] b = new int[1]; int[][] c = new int[2][] { new int[1], new int[2] }; // array of arrays (jagged array) * **ELEMENT_TYPE_ARRAY:** A N-dimensional array with arbitrary lower bounds. N may be 1. int[,] d = new int[2,2]; // [0..2, 0..2] (0..2 means 0 to 2, inclusive of 0, exclusive of 2) int[,,] e = new int[2,2,2]; // [0..2, 0..2, 0..2] Array f = Array.CreateInstance(typeof(int), new[] { 2, 2 }, new[] { 0, 0 }); // [0..2, 0..2] Array g = Array.CreateInstance(typeof(int), new[] { 2, 2 }, new[] { 1, 1 }); // [1..3, 1..3] int[,] h = (int[,])f; // [0..2, 0..2] int[,] i = (int[,])g; // [1..3, 1..3] Debug.Assert(d.GetType().ToString() == "System.Int32[,]"); Debug.Assert(f.GetType().ToString() == "System.Int32[,]"); Debug.Assert(g.GetType().ToString() == "System.Int32[,]"); Array j = Array.CreateInstance(typeof(int), new[] { 2 }, new[] { 1 }); // [1..3] // int[] k = (int[])j; // Not allowed Debug.Assert(j.GetType().ToString() == "System.Int32[*]") // It is possible for a T[*] to have a lower bound of 0, but it's not easy to create in C# as // Array.CreateInstance will make an SZ array if you pass 0 as the lower bound for a 1D array. // But such an array could come in through interop (fuck you LabVIEW). T[] always has lower bound 0 so you never need to worry about it. For T[,] (and higher ranks) and System.Array, you should be mindful of the possibility of non-zero lower bounds.
Indeed they have. Nullable was a unique case since it deals with handling null. I can think of many common constructions, many of which occur as often as array.Length - 1, that could be greatly shortened by a new operator.
Just because they've done something before, doesn't mean they should do it again. This feels like such a limited use case for such an addition, especially when that character already means something in the language. array[new Index(1, true)] also seems quite inefficient, why new up a struct when you just want to access the last item of an array?
From what I can understand - it is a feature of Indexer. As IList has indexer in its interface definition, it should work on them as well.
Thanks! 
So it has to have an indexer that accepts an Index, yes? Then IList probably supports it because it seems trivial enough to do.
I don‚Äôt know but this is not what I had expected. Or maybe I am missing something. ‚ÄúLock-free‚Äù but everywhere spinwaits? ‚ÄúAtomic‚Äù but everything is non-atomic? A lot of wrappers around Interlocked that you hope are free because of aggressive inline attributes? I somehow expected some SIMD magic or something similar. You made a thread-safe generic wrapper and tried to optimize performance. That‚Äôs nice and hard work and could be utterly useful but I don‚Äôt get why that‚Äôs not the name and agenda?
The project may not be perfect, but it has many cool things. The user warned that it is a sample project, not the definitive solution. The user at least wanted to help and share. You just talked about things that could be better, and did not say anything about what is really done right. You have analyzed only one part, not the whole, and that is the worst mistake. Their intention is not to help people, but rather to criticize. The correct thing is to criticize the things that can be better and to encourage what was done right. And if you're so good, you should show it with code, with examples. Speaking even a parrot speaks.
What about future implementations? I‚Äôm not being argumentative, just trying to learn. I have noticed that you never see anyone extracting an interface from a data context for instance.
Agreed, I think it's good to experiment with putting design patterns into practice but there is smell of a misunderstanding of the reasons for those patterns which will ultimately undermine maintainability and lead to tech debt. Calling the implementation SOLID or clean is detrimental to devs looking to implement these patterns. As for DDD, the only domain this serves is "web application development", not the domain the web app is supposed to be solving a problem for. This is for developers not the product they are building. Developer does not equal engineer if you don't apply principals learned from "real" engineery. Clean, well architected interfaces for integration and abstraction/isolation for hiding/limiting complexity is what allows massively large or complex products (software or physical) to be developed. If a mechanic had to alter engine operations to put new tires on a car, they would be fewer cars, more expensive to operate, and ultimately lead to a "rebuild from scratch". Replace "mechanic" with "dev", and "engine/tires" with domain/application code, and it's eeriely similar to this project
Of course, you will use net core
BUT jetbrains gives you the opportunity to get rider for free. if you are a contributer to OSS or a student 
&gt; I use Code more than VS2017, on Windows, in a MS-centric shop. If you're targeting .NET Framework, you're only hurting yourself by not using VS.
Nit: .NET naming guidelines recommend using framework type names in method and class names instead of language keywords. In other words, rename `AtomicLong` to `AtomicInt64` etc. Thanks for the lib!
&gt; ‚ÄúLock-free‚Äù but everywhere spinwaits? `SpinWait` is not the same as a `SpinLock` and provides a mechanism for ensuring "busy waits" are properly implemented in .NET libraries. It doesn't provide any 'blocking'; the only thing it can do is yield the thread after enough cycles around the loop or if we've detected a single-thread CPU (as well as other things). Unless you're talking specifically about the [difference between "lock free" and "wait free"](https://rethinkdb.com/blog/lock-free-vs-wait-free-concurrency/) or whether the algorithms inside are techincally [https://en.wikipedia.org/wiki/Non-blocking_algorithm](non-blocking)... In which case I have to confess the exact difference between all three terms isn't 100% obvious to me either and I couldn't guarantee a specific answer here. &gt; ‚ÄúAtomic‚Äù but everything is non-atomic? There shouldn't be any non-atomic operation in the library (if there is, it's a bug). There are even almost 400 tests all attempting to ensure this. So I'm not really sure what you mean; can you expand? &gt; A lot of wrappers around Interlocked that you hope are free because of aggressive inline attributes? The majority of methods do a lot more than wrap `Interlocked`- even the 'simpler' ones provide a use IMO in returning both the `PreviousValue` and `CurrentValue` after an operation. A common mistake I make when working with `Interlocked` is forgetting for example that `CompareExchange`/`Exchange` return the value *before* the swap, but things like `Increment` and `Add` return the value *after* the swap. Also the methods that only wrap `Interlocked` are few and far between- but they *are* free because of the inlining. There should be no difference in performance there. Also I've put a lot of work in to performance across the board; the library should hopefully out-scale most other alternatives out there. &gt; why is your spinwait not stored in a static threadlocal instead of constructing it on every operation? Is the ctor that free and faster than the threadlocal approach? I haven't tested it but I would expect so. The `SpinWait` ctor is just the default ctor for a struct of its size (i.e. zeroing memory) whereas thread 'slot' access is not free. And if we did have a threadlocal `SpinWait` we'd have to [Reset](https://source.dot.net/#System.Private.CoreLib/shared/System/Threading/SpinWait.cs,a5ab64f2ded4c92d,references) it before use every time anyway.
Good point, I think I'm gonna add that as an issue for `alpha2` :)
We should go back to coding in machine language, obviously.
Try using previewkeydown and previewkeyup events. I think keydown and keyup are bubbling events and the preview ones are tunneling events. See if that works. That's the first thing that comes to mind. It has bitten me before. &amp;#x200B; [https://stackoverflow.com/questions/1460170/what-are-wpf-preview-events](https://stackoverflow.com/questions/1460170/what-are-wpf-preview-events)
Can you use this new index struct for non indexable collections? If so what is the magic that makes it not iterate over the collection?
Definitely a good point but it is a rare situation when you need to do that or at least it has been for me.
I don't think so. Sorry I probably missed a few commas in my last comment which didn't make it very clear. 
You can check my repository which I develop to present some topics described on my blog. It is fresh, but some of concepts are implemented already. [https://github.com/kgrzybek/sample-dotnet-core-cqrs-api](https://github.com/kgrzybek/sample-dotnet-core-cqrs-api)
Have you seen the terms for that scheme? It's marketing, not a serious way of getting a license. &gt;Your OS project may not offer paid sponsorship, **or receive funding from commercial companies or organizations (NGO, education, research, or governmental)**. You may not provide any paid support, consulting or training services for your OS project, and you may not distribute paid versions of your OS software. Contributors who are paid to work on the project are not eligible. So, no donations allowed. &gt;Your OS project's community is active. So, doesn't matter if you have lots of users, need a "community" &gt;Licenses can be used for non-commercial OS development only. Please consider purchasing separate licenses to work on commercial projects. Can't use on personal projects &gt;You release updated builds on a regular basis. ? &amp;#x200B;
Do people use vscode for .NET Framework? Dotnet core is more likely what they are using it for, and if you prefer the CLI then vscode's integrated terminal is better than VS2017
they are pretty loose with those terms. i got a license without having a "official" document from my school, but a document with my name on it, a date, the stamp from my school and a signing. plus, nowhere does it say "no donations", just that you have to be independent. nowhere says it that a user isn't allowed to donate a few bucks to the project if he likes it, you just aren't allowed to say "you only get this if you pay me a buck" or get funding (now that i read over it, it's not even against the terms to get a donation from a company, just sponsorship and funding isn't allowed) an active community is a pretty loose term, probably as strict as the "official school-document"-stuff from the student-license well, who stops you from using it on personal projects? this will only become a problem if you really do commercial developement. other than that, even if you do it for anything other than the oss you got it for, jetbrains ain't doing anything. that would be bad marketing. in fact, they are happy that you use it, because that means you're probably gonna recommend it, maybe even to a boss or a co-worker, and you end up getting new customers or even a whole company to purchase a license. cause let's be honest, once you used a jetbrains ide, you're never wanna need to program on ide's like eclipse or code::blocks ever again.
I had to work with another group at work last year and the dev assigned to the project INSISTED on using vscode for everything when we were targeting Framework so he kept breaking csproj and the sln wasn't being updated since the rest of us were using VS. Needless to say, we eventually forced him to be on VS.
I thought about this a bit more. The expression array.Length - 1 is common, but how often do you really use that expression as an array index? Usually it's used for bounds checks. It's an absurd addition to the language. It's special syntax for an edge case.
I don't use Linq in Unity3D because of heap allocation overhead. Also if you're dealing with an array of mutable structs you can modify the instance via the indexer or grab a ref to the struct, neither of which is possible with `.Last()`.
I have 18 years working with Visual Studio. There was a window where it was amazing. There was also a window where ReSharper made it unmatched. That window closed on the huge monolithic project I am maintaining now. Opening it in Visual Studio 2017 takes 15 minutes, individual files are an additional 30 seconds. Opening and editing a file/folder in Code takes seconds. Mind you, performance is much better with smaller projects, but this company is only just starting to break down their app(s) (plural) into more than one mega-solution.
I see. I'll look into something more for parsing. Maybe with filestream i can get this to work. Thank you.
Thank you. I will give reading into a string a try and hopefully have some better results.
&gt; is breaking the code What does "is breaking the code mean? Do you get a compilation error? Which error? A runtime exception? Which exception?
&gt; I think this may be an interop thing with VB, but wouldn't swear on it. Close, but actually it is a COM thing where the lower bound is often one and can be other random numbers. Though to be fair, .NET can access VB6 libraries via COM. 
Oh, interesting. I didn't realize that non-zero based arrays were a different type.
Yep. People often forget that C# needs to consume those VB6 and C++ based COM libraries with non-zero lower bounds.
What's with the down-votes? It was a fair question.
It's one of those things where you're probably going to use it all of the time or never. Personally I see myself using it a lot when dealing with string parsing. Or rather, I would if I still worked at a financial company dealing with weird ass flat files. These days I'm doing mostly greenfield so I can get away with XML or JSON for most things.
&gt; Should we add brand new operators for the construction of DateTime, TimeSpan, Uri, Guid, Exception, Type, et al? Yes. A thousand times yes. There are many times when I want those to be a constant, and in some cases such as attributes I need them to be constants. Having a way to define an object at compile time (other than string, obviously) would be really useful to me.
&gt; &gt; &gt; array[new Index(1, true)] also seems quite inefficient, why new up a struct when you just want to access the last item of an array? Structs are cheap. You're just bumping a stack pointer; there's no GC overhead. And they can be inlined, so by the time it becomes machine code it may disappear entirely. 
I dont know
Well, this isn't for that, this is simply replacing "new Index(1, true)" with "^1". I mean, replacing "new Guid(string)" with "#string" or whatever just seems like unnecessary complexity.
Programs that would need to be modified to make use of the Index struct anyway? 
Yeah, but unmodified programs wouldn‚Äôt stop working overnight, since they would retain the (then) expected behavior.
Spinning serves a purpose for lock implementations, but is inappropriate for lock-free.
I use a tool called expresso for all my regex needs. Not sure if your looking for something like that or something else as question quite clear if you are looking for a way to quickly write new regexs or a way to code your own implementation rather than using the. Net built in implementation. 
Indeed.. The way I see it is that even if you work with lengthy ass weird string parsing (which I do *cries*), the feature would be Meh to have and us since it solves very little of an issue generally caused by not paying attention, while adding a relatively cumbersome to use new type with its own small gotcha from the start. What I would have loved would have been something along the lines of syntactic sugar for Reverse(). To be clear, use case would be pretty much the same arr[^i] but it would not involve an additional type.
Err what. Negative numbers code it explicitly as well. There is literally no difference, except C# decided to use a different symbol than what current languages (eg Python) use to represent backwards indices (negatives).
&gt; or a way to code your own implementation rather than using the. Net built in implementation. This. 
I'm a web developer so GC overhead tends to be only be a concern when it actually becomes an issue. It's good to get the perspecitve of devs who deal with different issues.
I see. I was under the impression that that was "wait free". Can you explain the differences?
Cool!!
I see. I'm following general patterns for what I *thought* were lock-free atomic compound operations. Is that not the case? Thank you.
An int could be anything, including an index. An Index struct is an Index. Once you are using a struct it makes sense to add members to make different use cases explicit. 
Thank you. Soon I‚Äôll be releasing WinSATNet, a WinSAT wrapper for obtaining scores like in Windows Experience Index (WEI) as well for running new assessments. This way app and game developers can have their apps or game set their settings automatically based on a computers current hardware configurations performance.
Waiting is used for locking because you don't know how long a lock will be held. Spinning is done because you expect the lock to be held for less time than your thread's time slice. For lock-free, which is made purely of atomic instructions, you don't have any lock being held -- there is nothing to wait for, you have new state and can try to make progress immediately.
Yeah, it's a bit different. I realize in describing some patterns that are perhaps not considered idiomatic or best practise. Another time this would be useful is when assigning to a collection element via index (either a list or array).
Thank you. I've always found the terminology around this quite confusing as an autodidact.
Error is: System.NullReferenceException: 'Object reference not set to an instance of an object.'
&gt; Kinda seems like you aren‚Äôt all that experienced and have run back to what your comfortable with. I'm experienced. Been skiing this for over 20 years. I'm not at all afraid of change or learning, but I am pretty good at spotting when things are unnecessarily complicated. Which they are, as I explained above.
Sounds like a situation where he was trying to use a hammer on a screw. VS2017 is the best .NET Framework ide, so you should use VS2017. It sucks for front end development though, in my opinion, so I use vscode for front end. Seems either can work well for dotnet core, but it comes down to preference at that point. The integrated terminal is what draws me to vscode for most projects though
NullReferenceException is exactly what it means. I didn't look through your code, but somehow, input is being assigned a null value, or is never assigned. Try using the debugger to step through your code with a breakpoint to debug
In your code behind you reference FirsSetTextBox. Not FirstSetTextBox. Hence the error. FirsSetTextBox doesn‚Äôt exist 
Yea, the lack of symmetry bothers me too. But then again, if I had it my way we'd be using 1 based arrays instead of pretending that .NET indexes are a pointer+offset like C. -- Did way too much VB6+COM programming in my youth
I know, but I miss being able to write `#date#` like I could in other languages.
Only because by convention we determine the length of an array by storing its length instead of the position of its last element. But those two approaches are equivalent, and the one we chose is mostly just a coincidence of history.
Well, [Dijkstra considered it something more fundamental](http://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html).
Azure app service free teir is great for mockups only.. It sleeps and https is a hassle if you try get let's encrypt going.. I have 2 apps running on digital ocean just $5/mth rock solid.. For over a year. Better cpu's / infrastructure / dashboard than vpsdime/ovh.. If you use this [Digital ocean link](https://m.do.co/c/818b4782eae8) you get $10.. 2 months free.
Not sure why you've been downvoted, as I'm in a very similar position and have had the same experience with VS. At my shop we recommend Rider as a much more sanity-preserving tool (compared to VS) to work with our code base.
How so? I've had great experiences with Rider. The only time I've seen VS come out ahead is when publishing to Azure is required, but we use TeamCity and Octopus for CI/CD, so I have no need to publish directly. Where else does VS win out?
So array elements are 0,1,2,3 and \^4,\^3,\^2,\^1. It is C# from the beginning and VB from the end. Uncool inconsistency.
VSCode is better and it is free.
AWS Elastic Beanstalk. AWS Elastic Beanstalk allows you to deploy your code/application. You only need to maintain your code. Elastic Beanstalk automatically handles the deployment details of capacity provisioning, load balancing, auto-scaling, and application health monitoring. https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_NET.html
Check out Linode or Digital Ocean, both have 5$ (1 GB) and 10$ (2 GB) plan.
The hat operator? Or the index struct? For me they seem pretty intuitive. How would you prefer it?
A lot of people access byte arrays, flat files, strings etc all the time. On the other hand, some people never do. 
Hehe, indirect learning :)
C-style arrays have a terminating value that would exist at foo[^0], right?
It's syntactic sugar that plays nicely with the new range notations.
I got a raspberry pie for that :)
1. Find out which string encoding PHP uses 2. Use the appropriate System.Text.Encoding to convert a string to it's byte format 3. Use the appropriate symmetric algorithm that is used by openssl (AES/Rjindal?) to convert to byte array to it's encrypted form All of this can be googled easily