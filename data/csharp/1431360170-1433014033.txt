I doubted I would be able to make it all generic (thus the type of). The reason I am needing the type of. My model: public partial class tbl_BackupChecks_WindowsServerBackup { public DateTime? LastBackupTime { get; set; } public String? MessageReturn { get; set; } } public partial class tbl_BackupChecks_BackupExec { public DateTime? TheLastBackupDate { get; set; } } Now in reality the classes are much more complex, but the "generic" method I want to generate would need a typeof so I can access the different property names. I'm completely for adapting this if there is a better way to do it (changing the model is not an option as I am tied in using EF to a DB I can't change it), but in some cases one of my models may have a property I need to process that another doesn't so I need to separate that code. I understand that it is not then truly generic but it would also reduce areas of code that are virtually identical across all five, if that makes sense?
Agreed with all points but paradoxically still think I am actually the ONLY person that doesn't get it. 
It's probably more useful to more experienced programmers, but even for beginners it's still really useful. I can't use Visual Studio without it anymore.
1. Your classes/types should by convention all start with an Upper Case letter, e. g. Tbl_Backup_Monitoring vs. tbl_Backup_Monitoring, etc. 2. You probably don't really want Generics in this case, but rather a common Interface for Tbl_BackupChecks_WindowsServerBackup and the other 'Listitems'. For example public interface IBackupItem { string ItemName {get;set;} // other properties or methods that are common between the different ListItems } public class Tbl_BackupChecks_WindowsServerBackup : IBackupItem { public string ItemName {get; set;} // other properties or methods that are common between the different ListItems // Rest of implementation that is specific to this type. } public class BackupHelpers { public static tbl_Backup_Monitoring SubGenerator(List&lt;DateTime&gt; listOfDates, tbl_Backup_Monitoring resultModel, List&lt;IBackupItem&gt; listToProcess) { foreach (IBackupItem item in listToProcess) { // do something with item.ItemName or the other common properties here } } // rest of class } 
are you trying to set the same properties on all these objects or is there a completely different code path based on the object? Can you not achieve the same result by using an interface? maybe you can re-factor polymorphic code and leave the non generic code in a different layer? But having a bunch of (a is className) or typeof(className) in your code doesn't smell right. 
Not with apps
&gt; changing the model is not an option as I am tied in using EF to a DB I can't change it Actually EF often makes it easier to change your model, at least if you're using code-first models. How is the model bound to the Db schema?
Completely understandable and perhaps it'll make more sense if we tell our story. We've been working on C# tools for about a year now. We announced http://codeconnect.io last year and released a free alpha in September. Unfortunately we're tied to Visual Studio 2015 and haven't found a way to monetize this tool yet. We built an open source tool for browsing source code at: http://sourcebrowser.io At this point we're really trying to get strong validation that we're building a tool people *want*. The best way to for us to do this is by asking if you'd be willing to pay for it. We think Alive is a really interesting tool that has the potential to change the way we program in the day-to-day. But we're not blind to the fact that we're seeing our own creation through rose colored glasses. Our goal here is to figure out whether or not this is a tool you would pay for. We've tried to make things easier by offering a 30% discount. 
I disagree with your disagreement! Fields are implementation details, whereas properties are part of the contract your class exposes (note, for instance, that interfaces can't expose fields). Properties are also extensible if you want to turn a simple value into a computed value (or vice versa) in the future, or if you want to shim in some logging, or what have you. Probably less of a concern in a simple DTO/record scenario, but on a conceptual level it's nice to keep things consistent. In short, there are several reasons to use properties, but not really any to use fields.
I have found Eduardo Rosa's course "[WPF: Learn User Controls, Data Binding, Animations and MVVM](https://www.udemy.com/wpf_apps)" pretty helpful. The course is normally $99, but Udemy has so many sales that you can usually get it super cheap if you just wait a week or two (I was able to pick it up for $15 recently). *Disclaimer: I am not the author of this course nor do I get anything of value for recommending the course or getting people to sign up.*
&gt;told me to forget everything I had learned in classes about databases. You learned about cursors and loops in your databases courses? We barely touched procedures. We went from relational algebra, to relational calculus, to data structures and join algorithms, all the way up to transforming that base into SQL, hand parsing our SQL to generate query plans, and then calculating based on disk speed (taking into account rotational differences on HDDs), memory retrieval times, sizes of sets, and network speeds/latencies how long each part our queries/plans would take. EVERYTHING was based in sets and the relational calc/algebra foundations. You definitely missed out on a lot if your teachers did you the disservice of not basing it in the relational foundations.
Looks pretty, but I'm not sure it's worth paying for. Some of my thoughts: * How good is the support for inline object display? Just showing the ToString values isn't always useful, while showing property values could get too verbose. Collections would also be difficult to visual like this. I'd say this is the biggest challenge - arithmetic and boolean expressions aren't generally the source of my problems, it's the more complicated stuff where I'm creating objects and calling methods. * I'm a little concerned that this plugin would replace the need for unit tests, at least in the mind of junior developer. What might be more useful is if it displayed *test* runs inline. That encourages the dev to write the tests, and improves the test development process as well. * I'm not sure the need for visualizing this stuff at development time is terribly useful. If there's a set of problematic parameters, and you can predict that combination ahead of time, then you've probably already solved the issue. If you're not even thinking about it, the plugin is unlikely to identify that issue, since it's only running certain values (which I assume are defaulted to things like 0, false, null, etc). These issues are usually found at debug time, when you have all the normal tools to look at application state anyway. 
Well, given the ridiculous profits they've been getting for shit games, you can't really blame other companies for following the pattern. 
Are you using Open XML SDK? It was created for manipulating Office documents using LINQ. https://msdn.microsoft.com/en-us/library/office/bb463579.aspx
Also the video shows really a bite size tidbit and takes you from no knowledge of this product to asking for money in 2.5 minutes. Now if I have to be honest, all I see is a way to bind a unit test into the designer to have unit test results while coding. I mean the idea sounds interesting, only that there is no way that in certain scenarios alive will give me a realistic look at the data while I'm coding away, and seems to be a slightly improved version of debugging a unit test. 
With WPF, you want to bind to viewmodels or view-model like objects. You'll probably want to take your JSON data and deserialize it into a POCO class that implements INotifyPropertyChanged on its properties. Put these objects into an ObservableCollection. Then you'll construct your datagridview as follows: &lt;DataGrid IsReadOnly="True" ItemsSource="{Binding CollectionOfObjects}" AutoGenerateColumns="False"&gt; &lt;DataGrid.Columns&gt; &lt;DataGridTextColumn Header="Property 1" Binding="{Binding ObjectProperty1}" /&gt; &lt;DataGridTextColumn Header="Property 2" Binding="{Binding ObjectProperty2}" /&gt; ... &lt;/DataGrid.Columns&gt; &lt;/DataGrid&gt; Now, if you want to do conditional formatting on that you can do it with style setters and datatriggers. If you can get the bindings working I can show you how to do the formatting as well.
POCO as in "Plain Old CLR Object". Let's say you have a json encoded string that looks like this: {"name":"something", "status": 1, "status_details": "", "reason": ""} You want to deserialize this to an object (a POCO) that looks like this: public class MyData : INotifyPropertyChanged { private string _name; private int _status; private string _statusDetails; private string _reason; # region Properties public string Name { get { return this._name; } set { this._name = value; this.RaisePropertyChanged(); } } public int Status { get { return this._status; } set { this._status = value; this.RaisePropertyChanged(); } } public string StatusDetails { get { return this._statusDetails; } set { this._statusDetails = value; this.RaisePropertyChanged(); } } public string Reason { get { return this._reason; } set { this._reason = value; this.RaisePropertyChanged(); } } # endregion # region INotifyPropertyChanged public event PropertyChangedEventHandler PropertyChanged; private void RaisePropertyChanged([CallerMemberName] string caller = "") { if (this.PropertyChanged != null) this.PropertyChanged(this, new PropertyChangedEventArgs(caller)); } # endregion } Then, your Get method is going to change to look something like this: public void Get() { WebClient client = new WebClient(); var uri = ("https://api.tfl.gov.uk/line/mode/tube,overground,dlr,tram,national-rail,cable-car,river-bus,river-tour/status"); var content = client.DownloadString(uri); // This is going to be an ObservableCollection now var data = new ObservableCollection&lt;MyData&gt;(JsonConvert.DeserializeObject&lt;IEnumerable&lt;MyData&gt;&gt;(content)); Grid1.ItemsSource = data; } And your XAML will look something like this: &lt;DataGrid x:Name="Grid1" IsReadOnly="True" AutoGenerateColumns="False"&gt; &lt;DataGrid.Columns&gt; &lt;DataGridTextColumn Header="Service Name" Binding="{Binding Name}" /&gt; &lt;DataGridTextColumn Header="Status Details" Binding="{Binding StatusDetails}" /&gt; &lt;DataGridTextColumn Header="Reason" Binding="{Binding Reason}" /&gt; &lt;/DataGrid.Columns&gt; &lt;/DataGrid&gt; 
@tevert, we are constantly looking for ways to improve the UI. We want to keep it as simple and as uncluttered as possible. The closest thing in Visual Studio to what Alive displays is the Immediate Window: if at a time you want to see values in certain properties, just type this expression and Alive will evaluate it. Good point about unit tests. We see unit tests as crucial elements of Alive. We hope that more people will use and like TDD as they use Alive. When a unit test fails, the relevant assertion is displayed in real time. For the sake of simplicity, the video shows a simple example.
We're trying our best to validate whether this is a good idea and simultaneously get it in the hands of users. Would you be comfortable paying for v1.0? Or after you'd used a free trial? I'd love to get your feedback on this.
Yep, just like Google Chrome doesn't release "new versions" anymore (it's all auto-update), MS might stop releasing "new versions" of Windows. Plus, with MS' investment into open source and cross platform, if for some absurd reason Windows disappeared in the next few years, C# and .Net will live on on Linux and OSX.
Thank you mtj23 for the explaination, So once the data has been called under a certain condition how do we change the styles? for example if the status was Good Service the color of the background grid would be green. Not sure how I would go about a modern version of this. Currently im using the drawing method to change the style once the condtion is met. Thanks again, this has been really ensightful!
I like resharper. It is great. But to me it really isn't something I can't live without. I forgot to install it after I reinstalled my PC. The first day was a little weird. Then I forgot all about it. IDK maybe it is just me, that is not used to using all of the features.
Even if MS shuts Windows tomorrow it wouldn't mean that C# will disappear. It has strong community behind it, lots of tools other than Windows depends on it. With mono project and recent move of Microsoft to open source sphere guarantees C# long lifespan. Most importantly, it's recognized as far better language than Java. I would guess it will gradually replace it.
Nope, I was mostly experimenting with Office.Interop and trying to get something from that, but I'm pretty new to C# so I'm not really familiar with the tools available. ´
Many thanks for the explaintion mtj23: I'm going to go down the class route it makes more sense overall to have a single data type. The main reason for using a Enumeral was to combine two different classes/json nodes together. public class Line { public string name { get; set; } public string modeName { get; set; } public IEnumerable&lt;LineStatus&gt; lineStatuses { get; set; } } public class LineStatus { public string id { get; set; } public int statusSeverity { get; set; } public string statusSeverityDescription { get; set; } public DateTime created { get; set; } public IEnumerable&lt;ValidityPeriod&gt; validityPeriods { get; set; } public Disruption disruption { get; set; } // May be null public string reason { get; set; } //May be null. } this meant I could grab the name from one class, and the statusSeverityDescription and reason (both on the second class if that makes sense.) these could then be used together (with the others being in a different nested json object) I hope this made some sort of sense :) I'll contiune to research to see if this is possible in DataGrids, something is telling me it isn't but I may have to do more than one call to get all the data into the same grid in the end. Many thanks for your time, Oliver
You can't name the class and enum the same name. The compiler is telling you that when you reference Race it is ambiguous which one you are talking about. You could move the enum out of the class and in to a different namespace then append the namespace in front of the enum when using in the Race class to tell the compiler which one you are talking about. But don't do this. Namespaces are there to resolve naming conflicts with 3rd party libraries and not really intended to allow you create confusion within your own library by allowing duplicate class/enum names. You should either rename the class or the enum. Edit: my personal preference would be to rename the class Character and each Character would be assigned a race.
This also goes for the property.
It works by running any of your unit tests; if you mock your database to test some functionality, you will see interactions with the mocked objects. If your test operates directly on the database, web service or file system, so will Alive.
Ok fair enough. I am afk and didn't test my theory.
I can't even type my pseudo-code right. :) I had a different class name and enum, and still hit the ambiguity error, but now I know a bit more. I linked the singular naming but guess that makes sense it won't let you reuse the same value. Thanks. 
I guess the question is if there is a problem with doing that?
IsDouble takes isDouble from the class and then when called and returns as true does something else. here is the full class: https://gist.github.com/anonymous/465d81776b91c6b81c41 
&gt; Paid Alpha Holy crap what? Just because gamers have proven themselves ~~dumb~~ impatient enough to pay to test other people's incomplete software for them doesn't mean most businesses or programmers will act the same way.
That's not even an English sentence. This code is too much for me to want to dig through. You need someone to sit down with you to interactively rewrite this.
Can you post RandomCard too? You just want to instantiate a "hand" of 21 cards? You know the first one is not set to a random card too, right? And then after you get the 21 cards, you want to do what with it? Draw off the deck and then check for what? I don't even know what a "double" means here. If you just step through Main in your head, I don't see how you could ever expect any of this code to work right... If you explain fully what you're trying to do I will help
...or called at all, really.
Into C:\, yeah that's a good idea ;)... (read: it's not a good idea.) The best solution really is shipping it in the same directory. This is what I like about Mac OS, where an application is a folder that looks like a file. Packages dependencies neatly away.
 class RaceClass { public RaceClass RaceProperty { get; set; } public enum RaceEnum { Human, Elf, Orc } bool IsHuman(RaceEnum r) { switch (r) { case RaceEnum.Human: return true; default: return false; } } } Separate the class from the enum not the best naming convention but shows problem
I had this problem a while back and found a Nuget package that made my day - [Costura Fody](https://github.com/Fody/Costura) Just download it from the package manager and all referenced .DLL files are embedded in the exe file.
TBF I don't think OP knows what an entry point is, I think the name "Main" is coincidental. The main method in the code doesn't have the signature "static void Main(string[] args)" so it couldn't be used as an entry point anyway.
Would love to try this out before buying a license.
You should reread your notes on arrays. Look at the examples your given for class and really look hard at the main method definition and watch where your program starts. Don't worry we all started somewhere. Just make sure you keep up in class. Looks like you could be a bit behind but not too far by any means. 
https://gist.github.com/anonymous/e33ec0a3b937937722aa Double would be when a player chooses to "DoubleDown" The PlayerChoice class creates a player hand then another DealerHand class creates a player hand, then the two will be compared with each other. The first card isn't random here incase it needs to be set from a "split" hand. 
Thanks! After sleeping on it and then coming back to the thread this makes sense now. (Thanks everyone). namespace Resources { class Character { public enum Races { Human, Elf, Orc } public Races Race { get; set; } //'Race': member names cannot be the same as their enclosing type when class name was also "Race". private bool IsHuman(Races r) { switch (r) { case Races.Human: return true; default: return false; } } } } 
`yield return` does not really prevent the exception. What it does is preventing the execution of the method body until `MoveNext()` is called on the resulting iterator. 
Exactly. The exception will still be thrown when iterated over.
Neat. I appreciate the Nancy stuff. So, what's wrong with it? What can people help with? No issues on github right now.
The program is running in the background and it updates as you write it. Unit tests serve as a convenient mean to run the program.
That's one way to do it, but it's much more accurate to just do the math :) Took me about 5 minutes in excel, only minimal knowledge of probability math is required. http://imgur.com/RT2WQ3H http://imgur.com/Z4QL6nK expected average value of 2d8 (rerolling if you get an 8 the first time) is 8+1/8. Obviously, you could implement the algorithm in C# if you want any combination of N,D, but this would let you get an accurate result for 10000000d10000000 with good performance (especially if you notice the patterns and multiply things instead of actually filling out the array as shown - goes from O(n\^2) to O(n))
Unfortunately RNGCryptoServiceProvider isn't available in all contexts (PCL libraries for developing cross-platform or mobile apps, for instance). I'm not sure if there's a universal choice for cryptographically secure random number generation, but the [Math.NET](http://numerics.mathdotnet.com/Random.html) package has some pseudorandom generators that are a lot better than the default implementation of Random (although Random is probably fine for your typical pen-and-paper RPG applications). All that said, for the particular problem OP is describing, I think it would be better to try to solve it analytically rather than stochastically.
edit: Alright, sorry. I misread/understood your question. Still, google should be your best bet.
I never intended to extend beyond the scope of the console, so cross-platform compatibility isn't an issue; this was just for me to check my math. The Math.NET suggestion you made though looks to be very close to what I was looking for though.
In case you're interested, here's the source code for the function I use with the RNGCryptoServiceProvider: https://gist.github.com/ScottLilly/e05a5f971c1fce7ea5fe
Well.. I'm not simulating at this point any number of decks, I'm simulating an "infinity" deck. So technically I could get seven aces in a row. (Or 21 if I expanded the code) But the odds are less than 1/1000 to get like 5 in a row so I don't have to make my program account for something like that if say the hand can just be thrown out. The reason I gave myself so many cards is because I knew that I would need somewhere between 5-10 cards potentially but wasn't sure. I am only sure it's less than 21 if they were all Aces you still wouldn't be bust.
Simple solution - run your generator several times and check the difference between results - if it's small you are doing it right.
I understand loops and return types. I do not know function parameters. I have taken two college courses on computer science/programming. Java and then C#. This is not for a course. This is just for practice/sanity for when I complete it. I agree that they shouldn't be hard coded. The idea is that once I get the code functioning in this state I would know what I need and re-code with more methods and be a lot cleaner. 
actually still confused. static void Main(string[] args) Can you explain what the "string[]args' means?
Here is the GRAND idea. A user gets to make a choice for how they would play each or their hand values against a dealer up card. For example if my hand value is 11 I will always want to "Double Down" but if I have a 14 I may or may not always want to "Hit" when the dealer has a 7 showing. PlayerHand is the hard class, its the one where all the playerchoices have to be sorted of which there are hundreds and applied to a hand value and a dealer "up card" But each time a card it added the choices begin again, so at the beginning there are only three choices if the hand takes 7 cards (unlikely) its something like 4 X 2^6(bc you can only hit or stay after the first card) possible outcomes. I am positive I don't have the best code yet for the entire problem but I am more curious about the beginning which is where I am sure my problem is so for. But, pretend I could understand and I'll try to do it. How would you set about doing it? I'll see if I could make it work. 
Very nice. One thing I always like to see in projects like this are the strengths over the alternatives. I.e. show scenarios where it makes the dev's life easier. It's good that you're of a similar mindset!
It's early access!
I'm old school, what can I say. I sometimes even use a rock to pound a nail.... Besides, if I let a website do the work for me, how would I learn?
You wanna eat the bananas off that fucker's chin?
Thanks for the submission. 
I'm more than happy to pay for a useful tool. However, you are asking us to pay to beta test your tool. Visual Studio add-ins are a toss up as to whether they are going to get in the way or be helpful. Your demo looks awesome, but demos are notoriously deceptive. What you have says nothing to me about how well the tool actually performs. I would *love* to try Alive. However, I'm not going to pay $69 for the privilege of trying a beta. If you want me to pay, let me try it first and see how well it actually performs and helps in my work. You should give trial periods. 
And this right here is why their sales are going to be absolutely abysmal under the existing model.
Well, tests often involve using a bunch of mocks for things that typically represent input/output pairs - that is, given this fixed input, this behaviour would return this fixed output. That's not really dynamic or particularly useful, as you have to define every input/output mapping. Honestly if this is the case it doesn't really give you anything over just running unit tests in debug so you can inspect things.
Thank you very much, I will check try this :)
I don't have time this morning to flesh out a solid answer, but someone posted an answer to a very similar question on the Unity3D community answers section: http://answers.unity3d.com/questions/13247/how-does-c-in-unity-compare-with-using-regular-c-n.html If you're looking to add C# to your list of known languages, Unity-only knowledge could be very limiting, so why not learn both? C# is for general desktop application or web-based development, Unity is very specifically for games development due to the lack of native built in DirectX support in C# (until Win2D in Windows 10 anyway).
As someone who has worked with Unity C#, and with 'full' C# basically unity is missing a lot of libraries you commonly use in non-unity C#. Unity uses mono which is an open source implementation of .Net, and last I used it was roughly equivalent to .Net 2.0, but it's probably more advanced now. You could probably work as a junior programmer in a full C# environment, but you'll probably have to do some learning.
The biggest difference would be how much Unity stuff is MonoBehaviour specific. The fundamentals are identical - a List&lt;T&gt; is a List&lt;T&gt;; a for loop is a for loop. But my Unity code is usually so MonoBehaviour-centric it's almost like using another language. I don't write C# applications using an Update() loop, for example (though I suppose for games you would). Another big difference would be the use of scripts rather than classes. It just has a different feel. The drag-and-drop way you add components to GameObjects and build scenes is quite different to how you'd program a regular application in Visual Studio. If you're pretty good at Unity C# you should grab a good C# book and dig deeper, look into .NET. It will probably improve your Unity coding.
That's awesome.
&gt;Monobehaviors are just classes Yes, but it's a class very specifically created for a limited set of scenarios, and for the most part everything in a Unity game inherits MonoBehaviour. A quick browse through the Unity forums shows that many people making games don't understand classes/objects very well at all but they don't really need to in Unity. &gt;That's because List&lt;T&gt; is a .Net thing not a C# thing. Not the best example, but you somehow entirely missed the point of that sentence. Of course programming in the same language is the same thing. But Unity is a tool with its own quirks and conventions. You could be very competent in making C# games in Unity without gaining a particularly solid understanding of C#, especially the stuff that isn't emphasised or required in Unity. OP is asking if being able to code C# I'm Unity is a solid preparation for other C# coding. It is in some ways and it isn't in others.
Just that Unity is using Mono 2.6.5 and there are no plans for an update.
Unity encourages shitty coding. EG: Can't use properties and forces you to use PUBLIC FUCKING FIELDS. Like what the fuck, breaking all sorts of OOP ideas. I get downvoted by butthurt gamedevs whenever I point this out.
this is from 2014: http://gamedev.stackexchange.com/questions/80295/is-c-different-in-unity
C# is still C# what you're looking for OP is: how different is programming with C# in unity to programming C# with .net?
Well, to be honest i've never seen what unity code looks like (i'm more of a back-end guy then front-end and all those graphical stuff), and from my understanding it's mostly about classes and methods (just like any other framework out there). So my guess not that much different. What differs is framework specific stuff. Like .net linq (a very widely used set of features for querying collections) or entity framework (which is a OO-mapper for databases) and these are just examples. So my suggestion is: 1. Learn how to write a simple webapp (as a start) 2. Just try to write your own notepad (all of it's features, even if it's not that many) as start 3. Try to do some simple database interactions first w/o entity framework and then with it 4. Just make something a little more complex all the time or even extend earlier projects
Your fields still don't have to be public though.
The lack of namespac(es|ing) by default is odd to me in Unity. Is this a monodevelop thing or a Unity thing though? note: hobbyist C# developer: I learned C# first, and now (occasionally) trying to pick up Unity.
&gt; It's just an abstraction for a piece of work that needs to be run. It could potentially return a result in the future and it when it runs it may use a separate thread to do so. While this is true, Tasks are normally compute-bound units of work that execute on thread pool threads, and common constructs such as Task.Run ensure that this is what will happen.
Nothing wrong with a public readonly field.
I don't have it, I just copied the link from one of the top posts of all time from csharp
http://www.reddit.com/r/csharp/comments/1tpalf/girlfriend_did_good_this_year/ 
Only when the value in that field is immutable too.
MonoBehaviour classes inside namespaces cause all kinds of strange problems that are very hard to find. Using them for regular classes should be fine, though.
The skillset is basically the same but the way state is maintained in windows apps vs web apps is different due to the client server nature of most web applications. I think you'll find that *modern* windows and web applications are very similar, particularly if you're talking about a thin client app that is accessing the network to load data, and modern patterns like MVC lend themselves well to both win and web dev. But you'll never get away from the fact that with web dev the state of the app on the client, and the state of the app on the server have to be kept in sync somehow, whether it's through an asynchronous call back to the server or a full reload of the page. Finally, I don't think there's really a great answer to your question, but for a better understanding of software development overall you should try to learn as much as you can about both.
They're switching to [IL2CPP](http://blogs.unity3d.com/2014/05/20/the-future-of-scripting-in-unity/), so away from Mono in the future
Didn't you ask this already? http://www.reddit.com/r/csharp/comments/35iypc/using_the_instance_of_the_object_in_multiple/ The advice given here and in the old thread looks correct to me, but if it isn't working for you, can you explain the problem you're hitting? Or maybe provide a more complete example of your code so we can better understand your scenario and provide better feedback? Here's a more complete code example of what people are suggesting if it helps: Define Foo like this: public class Foo { public Lamp MyLamp { get; private set; } public Foo(Lamp lamp) { this.MyLamp = lamp; } public void DoStuff() { // Do stuff with the MyLamp property } } Then in your Main method, do this: Lamp redLamp = new Lamp(); redLamp.brightness = 20; Foo foo = new Foo(redLamp); foo.DoStuff(); 
you know the grammar but don't know much vocabulary.
For you: http://farm5.staticflickr.com/4018/4707656816_0a5ec48321.jpg Thanks!!!!!! 
[Encapsulation](http://www.techopedia.com/definition/3787/encapsulation-c)
Superinaginativename is talking about monobehaviours here off course. I choose to approach these as scripts, or templates, that interface with the 'real' code, which has a good structure. Much like you might have JSON or some DSL in some other environment. Unity does not 'force' me to use any particular style there. Nothing would stop me to use pure OO there, if I wanted to.
You have a few options like reflection, but ultimately, it will just waste your time. Use Json.net to parse Json but in the end you can't avoid hardcoding it. Check out these threads: http://stackoverflow.com/questions/3672742/cast-class-into-another-class-or-convert-class-to-another http://stackoverflow.com/questions/18784274/converting-object-of-a-class-to-of-another-one
So when a job offer states "ASP.NET developer", what skills do they look for? 
I think you're confusing an [auto-implemented property](https://msdn.microsoft.com/en-us/library/bb384054.aspx) and a property. If it has an explicit get and set it is still a property, just not an auto-implemented property.
[Fields vs. Properties](http://stackoverflow.com/questions/295104/what-is-the-difference-between-a-field-and-a-property-in-c)
Hardly doing genetics or whatever if you are selecting things randomly, more like algorithms so far, which is good because I probably know less genetics than you, I'm learning the same stuff though!: when you use int, it records indexed values, starting with 0. You need to convert to an array of indexes for your values and then refer to those. 3-9 looks like this as it is indexed: 0, 1, 2, 3, 4, 5, 6 You want to take those objective positions and read, from them, the meaningful value in that spot that you mean to combine. So you'll need two arrays and you need to combine them into one. And you shouldn't be doing this, I wouldn't think: &gt; List&lt;int&gt; temp = new List&lt;int&gt;(); because you could just use the += operator? or nested operators, which are common in algorithms but can melt your head a little. If that makes sense. You are doing Gaussian/normal distribution and whenever I have done algorithms, I have needed to refer to the index in order to get the value. My answer may not be the one you need but that's my understanding of what happened. My suspicion is you have a loop to add. Check this out, it has nested operations like I mentioned though: http://stackoverflow.com/questions/218060/random-gaussian-variables 
Well, auto-implemented properties are just syntactic sugar over properties, and I assure you that if you read past the first 5 lines of my post, you'll see an honest to God, non-auto property. I initially typed out an autoprop because I typed all that on my phone, and typing code on a phone is not much fun. I had to type out a full, traditional property after 'refactoring' because it was necessary to illustrate my point, though, so I bit the bullet and did. I'm not exactly sure what you mean about "if it has an explicit get and set", though, as the autoproperty needs an explicit get and set as well, they just don't need explicit bodies for their get and set (also note that in C# versions &lt; C#6, you needed both a get and a set in autoproperties, as there was no way to assign to an autoproperty without a setter, and no way to actually use it without a getter; c#6 allows you to use expression bodied methods to define the setter, though, meaning you can have a true get-only autoproperty). By contrast, for a traditional property, you only need to define one of the two.
See my [answer](http://www.reddit.com/r/learnprogramming/comments/35vhy9/c_getter_setter_question/) I just posted on this.
I'd avoid spending too much time Web Forms unless you have a good reason to. It's pretty much a dead end at this point, and I doubt any employers would hold it against you, as a recent grad, if you didn't know the details of what's rapidly becoming a legacy technology.
Yeah I agree web forms is dying. I only mentioned it because some jobs have legacy stuff that they want you to handle. 
I would say it's good enough to get the basics, then you can look deeper if you need to, depending on the jobs requirements. 
please go on. I'd love to hear more about why mocking is not needed
So Python could perform the insert for 100s of records? 
It might never happen, but be careful that if somebody (either unintentionally or maliciously) enters a ':' or a '*' in the address your parsing logic will fail. Rule #1 is to never, ever trust user input.
If you can't tell the difference between a mock and a mocking framework, I can't help you.
If you don't use a mocking framework for creating mocks, then you are most probably lost. You are most likely thinking about stubs, which are completely different.
If you're designing from scratch, you can use dependency injection and interfaces to avoid having to use a mocking framework for mocks... ...*of your own code*. You still need something like Moq in your toolchest for mocking things you have no control over, like the .NET core libraries.
My guess would be that the FilterList method modifies the temp list. If you post the code, we can have a look.
if you use AutoMoq, it uses Unity for DI and a container to do all the dirty work for you when resolving. No need to create special classes when you can do it on the fly with mocking. I try to always create an interface for classes I have no control over. Basically the adapter pattern. Mocking is powerful for testing. Avoiding it is dumb.
Needless distinctions for people who care more about taxonomy than getting work done.
Coming from the guy who just wanted to point out distinctions between mocks and mocking frameworks.... I use mocking frameworks because they help me get work done faster than creating everything from scratch. Maybe you should just try one of the dozen available frameworks out there and not be such a downer? Regardless, good talk.
You can use Properties and you don't need to use public fields. You can use [SerializeField] to show a private field in the inspector. You can use FullInspector if you want to show Properties and Dictionaries and other things in the inspector without building your own system.
He already told you: List&lt;T&gt; is a reference type so you are modifying the original list when you pass it to the method, not a copy. Have a look at [Value vs Reference types in C#](http://www.albahari.com/valuevsreftypes.aspx) to get a better idea if you are unfamiliar with it.
Cheers mate.
Oh thanks! Wow I never realized lists were pass by reference but this makes sense. Thank again guys! EDIT: Even after creating a duplicate of the list. So that once it gets through the first part the second part has a fresh start, it does the same thing. I guess this means that its getting to 0 to quickly? But the first filter it works great, always messes up on the second filter. At least I can finally view this correctly. 
This is the confusing line: &gt; ...using properties over traditional getters and setters beyond properties being... My point is that they are *both* properties. It should read &gt; ...using auto-properties over traditional properties beyond auto-properties being...
Again, a bit hard without looking at the code but if I had to guess you are creating the copy before passing it to the FilterList method? If that is the case remember that you have to create another copy for the other call. In any case having a method that modifies the input parameters is not a good practice: you should create the copy as first thing in the FilterList method as a local variable to the method itself.
OMG i get to repay my debt. :) I have a paid for series on asp.net MVC in a dropbox waiting for you
Ah that is a good idea to create a copy inside the method filter. However, I have created a copy outside and I still have the same issue. numPool.Count for some reason goes to 0 before anywork can even be done on it during some runs, other runs it works as expected. But if its going to fail it fails because its 0 and it fails right as soon as it enters FilterList (again before any work can be done it). So I'm still confused as to why its 0 even after I make a copy for it. But I'm going to edit it now to make the copy inside FilterLList Even with the copy inside FilterList making sure I have an entire new list with same values to work on, the list is seen as 0. 
The lack of synchronization primitive support makes Unity incredibly difficult to work with under some circumstances. I learned this first hand while trying to make a game with dynamically-loading, randomized levels based on tile templates. It was nearly impossible to get resources to load / behave in the proper order.
No, that's not what I meant, although I now understand where you're coming from. I meant that the syntax for accessing properties is cleaner than that of getter and setter methods. int x = someObject.Value; someObject.Value = x; vs int y = someObject.GetValue(); someObject.SetValue(y);
Yeah if you do list2 = list1 you are simply creating another reference to the same object (list1). Try the following: var copy = new List&lt;int&gt;(original); This will create a new list (different object) initialized with the same values as the original list.
How I'd do it (pseudocode): 1. Deserialize your json object's records into a List of Dictionary. 2. Foreach element in list: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a. create a new EF model object that corresponds to your table &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b. copy each key/value pair to its corresponding property on the model object using reflection &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c. insert the new model object. Alternatively, you could do something similar to above, but instead of mapping to individual EF model objects, you map everything to a data table, and then do a ADO.NET bulk insert. Not an EF solution, but it's an alternative. 
Here's a quick sample of the absolute simplest case, which assumes all values are strings and every json key value maps to a table column of the same name. That might seem oversimplified, but notice that it's only 7 lines of code to transform a JSON encoded string into a series of INSERT statements. Note that this will correctly generate the INSERT statements for as long as those assumptions are correct: if the JSON data is expanded to include more keys you simply need to add more columns to your table and everything will continue to work without changing the following code. import json elements = json.loads(sample) # Deserialize to a list for element in elements: # Unzip the key/value pairs into a list of column names and a list of values raw_columns, raw_values = zip(*element.items()) columns = ", ".join(raw_columns) # Join the column names into a comma delimited string values = ", ".join(['"{}"'.format(x) for x in raw_values]) # Wrap the values in quotes and join them as well # Assemble the insert statement insert_statement = "INSERT INTO table_name ({}) VALUES ({});".format(columns, values) print insert_statement So, if you were to give it the string as follows: sample = '[{"name": "Alice", "email": "alice@sample.net", "city": "London"}, {"name": "Bob", "email": "robert@paulson.com", "city": "Wilmington"}]' It would produce the output: INSERT INTO table_name (city, name, email) VALUES ("London", "Alice", "alice@sample.net"); INSERT INTO table_name (city, name, email) VALUES ("Wilmington", "Bob", "robert@paulson.com"); Now, chances are (1) your data is a bit more complex as far as types go, (2) you don't care about every key in the JSON dictionaries, and (3) your column names aren't exactly the same as the json keys. Dealing with each of those problems is fairly trivial in Python; I have a similar script at work that runs every 15 minutes pulling down XML from a web API, parsing it, and putting it into a MySQL database. It's maybe about 200 lines of code total, including comments, and it has continued to work without modification as both the XML format and the database table has changed. It does this by addressing the above three issues in the following ways: 1. Before it runs a set of inserts it executes a "SHOW COLUMNS FROM table_name;" and gathers the types of each column. It has a dictionary which maps string type names to converter functions, whose job is mostly to decide what value types need to get wrapped in quotes, but also to do some weird date and datetime conversions because the XML we get uses a stupid format for datetimes. Thus it can appropriately decide how to format the data in the insert based on what the database has. 2. (and 3) I have a file which contains a dictionary that maps XML (or JSON) keys I care about to column names in my database. It adds only the following complexity: This line: columns = ", ".join(raw_columns) becomes this: columns = ", ".join([key_map[x] for x in raw_columns]) Personally I mostly code in C# and then Python, but for this kind of thing I feel Python is the right tool for the job: JSON maps well to native Python types and Python dictionaries make mapping extremely simple and adaptive. If you want more information and can explain what sort of types you're getting in your JSON I can provide more detailed examples.
Why does that even matter? WebAPI has always been a part of ASP.NET anyways. They are just merging the base ApiController into the MVC package.
A factory doesn't seem appropriate here. Regardless, I doubt the OP is familiar with what a factory is anyway. To the OP; I found that this tutorial helps explain how basic inheritance and design patterns work: http://www.codeproject.com/Articles/738043/Design-Patterns-in-ASP-NET
If you can't change the JSON, and you need to deserialize the More object to a string; you must use a custom converter. They're easy to implement. http://www.newtonsoft.com/json/help/html/CustomJsonConverter.htm
For JS testing I use QUnit (https://qunitjs.com). This is the same library that is used to test all the jQuery libraries, and was originally written by John Resig (author of jQuery). It's an easy-to-use general purpose JS unit testing framework. In one project, we ran the QUnit tests as part of the nightly build and included those results with the results of the C# unit tests in a build report. This was a rather large custom JS framework that I had 100% coverage on with well over 2,500 tests, and QUnit ran through them all pretty quickly. The trick with writing unit tests is defining a "unit". That seems to be where a lot of folks fall down (in comparison, the much larger C# framework had only about 200 unit tests, because the coders were actually focusing on larger code blocks, and essentially at that point were writing integration tests). You will find that wanting to have unit tests ultimately may change the way you code. You will start breaking down functions to the smallest "unit" possible - each method a function that takes some arguments, and returns a value. This function will always return the same value for the same arguments, and have no side effects. But when you do this, and you strive for 100% coverage of your code with unit tests, you get a lot of peace of mind. Now you can start refactoring and be sure that the changes you made haven't broken anything, because the unit tests still pass. When done correctly, it's really quite elegant. 
You should have responded in the other thread and I could have provided a more robust example to help explain it ;)
And what compiler will they use to generate the IL?
For game development? Heck no. .NET Core has no GUI framework whatsoever.
Sorry, meant to say game server development this time.
Where can I be up to date with this info? Where are you getting this from? Ty
Look at the GitHub repository. It's all still pre-RC. A first RC is expected with the official release of VS2015, which is in RC itself yet but has no release date announced.
Thanks for the clarification. I come across Task because it is the main way that WPF handles stuffs in the background in the sake of keeping the UI responsive. I learned in class about using backgroundworker with BeginInvoke() ( to jump between background code and the UI code) , but just really briefly. The syntax of using that is also really funky, so i wish i didn't have to use it if i don't have to. And thanks for the link, look like a nice guide with some visual guide for the ease of learning, I will start digging that. I heard that Task is designed to ease away the problem of writing app with different codes being executed in the background rather than having the main thread waiting for it, but i would also like to get a hold of understanding how it works in the background (generally).
The downsides have [already been provided here](http://www.reddit.com/r/csharp/comments/34svg2/c_extension_methods_are_empowering_openclose/cqyg0b4) if you care to read them. Basically that `DeserializeToObject` is callable on *any* string, not just those that contain the xml/json/whatever that you expect to deserialise to `SomeObject`. You want to make it an extension method on all strings just so you can use it like that in one place? That's IMHO a very local benefit at the expense of downsides everywhere else. Conciseness is good, but not at the complete expense of clarity - and you're hiding a lot of moving parts in extension methods like that. You don't expect methods on a string to know about XMl serialisers, a particular dto etc. An extension method makes it look like they do. These are the trade-offs that in my and others opinion goes the wrong way in this case. I'm not saying that this is always better, but you seem to be suggesting that the opposite is true - that extension methods always add value. Nope. Also IMHO, big old method method chains that do *all the different things* in one fell swoop aren't all that great either. Try splitting that last statement `WhateverHelper.SomeOtherExtension(...` into two (the compiler will have to do that anyway), so that it is in chronological order and you get a *meaningful variable name* for the deserialised value, which helps readability. 
This was my issue! I discovered it just before reading your post. I had to painfully step through the debug to notice it though. Where I eventually saw what was wrong with my logic and I'm now trying to fix. I need there to be 9 digits at all times 1-9. so 23, 456, would be 5 digits. My code is careless and will sometimes remove a digit it shouldn't. So I'm adding a check to see if it does remove a digit it shouldn't have, to add the digit back. So lets say it randomly picks 89 but also has 78 in the list. My code will look for all digits that have 8 or 9 and remove them. 78 has 8 so it gets removed to prevent the 8 from being used again since we have 89. But! If that number was my only source of a 7 then I just lost 7 so my list goes from 9 digits 1-9 to 8 digits (1,2,3,4,5,6,_,8,9). Just need to add a check to add that 7 back and my list should be the way it needs to be and not error out. 
Thanks for the detailed response! :-), i am still a little bit confused around this part &gt;Last but not least, there are a lot of functions that return tasks now (e.g. OpenReadAsync()) so that your thread can do something else while waiting for the OS to do whatever it needs to do before the result is available. because when i learned about basic thread (with the Thread() class), i know that a thread can block others to access the data that it is holding onto (like how the main UI Thread will block others thread of changing UI variables). But with Task, await, and async keyword, i can write something like this: private async void Download_Button_Click(object sender, EventArgs e) { //Start the download. await my_downloader.startAsync(); progressBar1.Value = 100; } Which will execute the startAsync() method in the downloader (which could take awhile) , and then comeback (somehow) to the UI thread to do the progressBar update without any kind of redirecting, (the UI was totally responsive). The keyword await just seem like magic that i don't understand how it actually works. I once did an example with Task and using TaskScheduler to get back to the UI thread, and that also confused me quite a bit. I would really appreciate if you can clarify this too, sorry for being a noob ,lol. 
This is where is gets a _bit_ complex. The compiler will attempt to execute as much of an `async` function's body as possible within the thread that originally called the function (the async operations themselves may be executed elsewhere, of course). This requires cooperation from the thread, of course, because it needs to (at some point in the future) be idle, detect that the result is available and pick it up to execute the rest of the function. UI threads (as well as ASP.NET threads) will do this for you automatically, unless you somehow block them yourself by mistake. A common deadlock is accessing `Result` or calling `Wait()` on the return value of an `async` function, because: 1. the `Result` or `Wait()` will block the thread until the body of the function finishes executing, and 2. the blocked thread is not available for executing that code. In practice, if you're not sure the calling thread will be available to execute the rest of the function's body (maybe you _know_ it's not available, e.g. because it's a long-running thread you created yourself, or maybe you're writing a library that could be called from any thread) it is a good idea to disable this "come back to same execution context" by calling the (somewhat misnamed) `Task.ConfigureAwait` function: private async Task Frobnicate() { // Executed in calling thread: await my_downloader.startAsync().ConfigureAwait(false); // Executed in unspecified thread: progressBar1.Value = 100; } This is configured per-`await`, so it is possible to have an `await` in an inner function send you to a worker thread, then an `await` in the outer function sending you back to the original thread. This is usually what happens when you call library `FooAsync()` functions from UI or ASP.NET MVC code.
&gt; Basically that DeserializeToObject is callable on any string, not just those that contain the xml/json/whatever that you expect to deserialise to SomeObject. Likewise, StringHelper.DeserializeToObject(string s) can be called with any string. I think all your arguments apply to static methods as well as extension methods, it's just a different syntax. The only difference that I can see (right now) is that extension methods show up in IntelliSense whereas static helper methods do not. That may be an issue if you populate your string with 50 different extensions which are all used only once (but then you're probably doing something wrong anyways).
Are those 2 comments in the wrong place though? But if they are in correct place, then how can an unspecified thread access the progressBar1.Value then?
The **development server** named Kestrel has rudimentary support for hosting a webserver. They're using **libuv** under the hood, instead of a .NET Core socket library. But this functionality is not exposed. So yeah, you're wrong. :-)
Which line lauches the file? 
I don't think it's an aversion, more like he didn't know about it. EDIT: I could do with reading more carefully. You're right, he did say he didn't want to use mono. 
[Ahem](http://www.monogame.net/). 
Look into static classes - they could be considered "modules" in other programming languages. Also a lot of OOP could be omitted. For example do you really need to seal your class? Do you really have to have the internal access modifier? But one cannot be a C# developer and hate OOP. OOP itself isn't very complex or bad. For starters just focus on classes and access modifiers, then look at more interesting topics like abstract classes and interfaces. Don't let it overwhelm you though. 
Everything is passed by value, technically; it's just that most values are references to objects. 
What are you talking about? This *is* inversion of control. Class A gets its dependencies passed to it. To test A you do need to pass some kind of objects satisfying those dependencies. Either manual implementations, or automatic via a mocking system. 
&gt;but IMHO you're doing yourself a disservice if you think this is all a task is, so I think it's important to understand the general pattern. I am a type of guy who usually will get the best out of something if i get to know how it works in the background. In this case, i just want to understand generally the steps that Task will do for me and how it all works together with others part of the program **generally** , reading the entire implementation would be too much , haha. That is why i mentioned "Threading" in the question. Because i am figuring out Task for the purpose of doing work in the background , while keeping the UI responsive - Which is the part where you have to execute the logic code somewhere while preventing the UI from stopping to wait for the logic to be done. If Task can do this for me that easily with async/await, i want to know, *at least in theory*, how it is done. &gt;Check out the gist below for a very simple example of an alternative example of how a task can be used Will definitely take a look at that, thanks. 
You're right, I completely missed his point about not wanting to use Mono. My bad! Still, if he wants cross-platform game development with C#, Monogame is an excellent choice.
No, that's an anti-pattern called a God object, which you should avoid.
Damn :(
give this a try FileDownloader.cs - http://pastebin.com/Pp8itq4x Form1.cs - http://pastebin.com/79XTAcjz
&gt; I would rather you techniques such as Inversion of Control to make it so that class a is independently unit testable without the need for mocks. As /u/cryo said using a mock *is* inversion of control. class Foo { private readonly IBar _bar; public Foo(IBar bar) { _bar = bar; } public async Task&lt;bool&gt; IsBarBarable() { var res = await bar.DoBar("http://123.com"); return res.BarResult == 100; } } Her using NSubstitute allows a unit test written like this: var bar = Substitute.For&lt;IBar&gt;(); bar.DoBar(Arg.Any&lt;string&gt;()).Returns(Task.FromResult(100)); var foo = new Foo(bar); Assert.IsTrue(await foo.IsBarBarable()); There are some huge advantages here: unit-test will be a _lot_ more debuggable than integration tests when using async code (since every await will swallow the stack trace at the exception site). NSubstitute means you don't have to implement mocks yourself and you can easily tailor each mock for every test case, and *what* the mock does is easy to understand, since it's right there in the test. You can also assert that mocks got called with specific arguments. bar.Recieved().DoBar("http://123.com"); Which would fail if the address passed was anything else than `http://123.com` which is cumbersome to do if you write your own mocks. Integration tests are not a substitute for unit tests; they should complement them. This is because integration tests are a lot less specific and when they fail it's not as easy to figure out why and depending on your integration tests they may produce false negatives.
but it is coming: https://github.com/dotnet/corefx-progress/blob/master/src-diff/README.md
Indeed and don't forget about dynamic objects and how useful they can be
No doubt that it is coming. But I'm talking about the presence.
I started looking at Moq, mostly because I know people who are using it so I have access to any questions if I have them. I watched some pluralsight videos to get an idea of its capabilities and the syntax you use - I think it's worked, because I've read some existing unit tests that use Moq and I now understand what the tester was trying to do! Thanks for all the info, it was really interesting to read :)
It does have support for sockets, it's just not open source yet so it's probably Windows only. The binaries are available on [NuGet](https://www.nuget.org/packages/System.Net.Sockets/4.0.0-beta-22231) though. It's also worth pointing out that Linux/OSX support for .NET Core is still incomplete.
&gt; I get downvoted by butthurt gamedevs whenever I point this out. Likely because you're wrong. You've learned a portion and assume you know it all.
I don't think it is useful to get hung up on what design tools you are using. You need to break down your problem into parts. They need to be easy to understand and easy to combine to solve your problem. If those parts are functions and structures that is fine. If they are objects fine. Design is hard. But there are rewarding insights and you can create really solid and simple solutions to complicated problems. 
I hate when people tell you something you find hard is not so hard. When i was a kid (30+ years ago) I was in the same boat. I had been doing basic and pascal for a few years and OOP pops up and people say DO IT! I didn't get it for a while. No one was around to explain it to me and there was no internet. Now that I am older I appreciate the ability to compartmentalize my data as well as the functions to manipulate that data. That being said, you don't "have to" but it's definitely something I would put the extra time into learning it. Most everyone else's code is going to be OOP. If you ever want to look at other libraries, use other libraries, or work in a team your going to have to learn it.
If object orientation is making it *more* difficult to reason about your code, you're probably doing something wrong: either you're trying to reason about the interior of the entire system at once (as though it were procedural), or you're not doing a good job with encapsulating information in your classes. One of the big advantages of OO code is preserving brainspace, but this takes practice to figure out and do well (and I wouldn't claim to be great at this, though I think I'm probably OK)). If you're just starting out, though, it's going to be a useful exercise to make everything an object for a while--it helps you familiarize yourself with the concepts of classes, instances, interfaces, inheritance and polymorphism and so forth, and it should help you figure out when you need a proper class and when you need a static class (module), instead. All this stuff takes practice, and is usually overkill for small projects.
I don't think steering OP towards static is good advice. OP is looking for a way to side-step the standard practices of the system and could very well make everything static after reading this thread. You're going to wind up with a lot of threading issues, and it's going to allow the OP to easily side-step many best practices such as proper disposal. The internal access modifier absolutely has uses. In fact, I would say yes, I do have to have it. Sealing a class has uses as well. OP: No, you are not required to instance everything. However I would caution you that instancing is not a useless concept, and there are definite reasons as to why it exists.
All classes are designed for a limited set of scenarios...
&gt; I hate OOP, because it is just overwhelming about how complex I am finding it. I rather have well structure OOP code, than your procedural spaghetti crap that only you can read and work on. OOP just makes sense most of the time. Try to think about your object in concrete terms at first, like for example think of cat. A cat it also a mammal and an animal, it could inherit from both. A cat probably has to implement means of locomotion and feeding preferences, etc. See how it all makes sense? How easy it would be to compose other types of animals and how a particular instance of cat can have any type of fur or color? If you stick to simple principle like one object does only one thing, coding to interfaces and worry about the relationships and collaboration between your objects, you can't go wrong. Also, start writings tests now! Seeing how hard it is to test something is an indicator of how bad and poorly modular your code is. TL;DR : OOP just makes sense. 
I get what it does, but I don't where to call the stuff, where to instance stuff, etc. (If that makes sense) :(
I've still gotta disagree with your point about internal. The project I'm currently working will only ever be used by a small team and we still use internal all the time. internal helps us to maintain separation of layers and de-coupling. Our layers have well-defined concise points of interaction. Not using the internal modifier would muddy the waters.
You create object instances when they need to "come alive", otherwise you can think of classes as templates, or recipes to fabricate your objects. I recommend knowing the difference between heap and stack and how to manually manage your memory (C++ would be a great teacher for this), where and when to instantiate and let go of your objects will become extra clear when you know about this stuff.
Try with MVA http://www.microsoftvirtualacademy.com/ , they have tons of videotutorials and material to learn, hope it works for you
Except that the OP explicitly said he needed the same object instance. I would agree that a factory would be appropriate if it was supposed to generate new objects from a given input.
You should set the DownloadProgressChanged and DownloadFileCompleted even handlers before you call DownloadFileAsync. Process.Start is called immediately because DownloadFile is creating a new thread then returning control. If you want to call Process.Start after the file is downloaded, move the call to Process.Start into client_DownloadFileCompleted.
any chance you could share the link?
Unity is being used for a *lot* more than just games. Everything from simulations and training to e-learning. It's not fair to call it a "game engine" it's more a "3D/2D engine"... but even that doesn't really do it justice, considering it's VR capabilities now. I'm not saying it does all these things well, but it does them. And that makes it more than just a game engine imo.
there's no link i bought and downloaded them and the link is a smart link so it won't let any other ip addresses download. PM me
In the link above: "IL2CPP consists of two pieces: an Ahead of Time (AOT) compiler and a Virtual Machine (VM)." There's some additional info there as well; as the announcement was a year ago, there may be more details elsewhere on the internet, but that's the link I had handy.
Well I'd say at a minimum, you should know the basics: C#/CSS/HTML/Javascript/jQuery and a solid understanding of http/REST. Depending on the shop, MVC or WebForms, and possibly a JS framework such as Angular.
If you could provide an example of a something you're working on, it might help show what areas are causing frustration. Also, can you explain what you mean by "instanced?" You're using the word in a way that seems a little different from the usual OOP meaning of the word, so I want to make sure I understand.
If you find yourself using `dynamic` a lot, then C# is probably a bad fit for what you're trying to do. The DLR was introduced to allow Microsoft to bring dynamically-typed languages like Python and Ruby into the .NET fold, and for a handful of use cases in statically-typed languages. There are very few instances where it's a good choice in C#.
I have been using Mono commercially for a high availability service used by 24hr emergency services for 5+ years. It's been great. Mono 4.0 already pulls in as lot of Microsoft code. It just gets better and better.
"Undo Delete" is not a filesystem-level operation, it's Windows Explorer / Recycle bin behavior. So no, there's not a filesystem event for it. You may have to watch for operations that look like "move to/from recycle bin location" to achieve that. 
&gt; As /u/cryo said using a mock is inversion of control. No, that's just injecting a fake dependency. You still have badly designed code that mixes business logic with calls to external services.
No, I'm just saying that when I mark something as private that it shouldn't be accessed outside of that class. But since I'm the only c# developer on my team, I'm 'meh' about it because I'm 100% familiar with my code. I still USE it because it's proper. I dont want to get into lazy habits for when someone DOES have to look at my code or when I'm on a team. Then I'll be less meh about it. But it's not really useful in my case. As a modifier, it's useful. My ambivalence is due to my usage. 
I'm reading lots of opinions in this thread that are really frightening me. 
I do remember that used to be an issue, but I've been using namespaces for all my projects these days and the latest Unity 4 and Unity 5 versions seem to handle it ok now. Perhaps I've just been lucky and missed some problem cases.
&gt; lovely simple step by step procedural ways of doing stuff Those procedural ways stop being so lovely and simple when you have half a million lines of code. :) Do you have any code you can show, or at least a description of what kind of application you're trying to work on? It's hard to be much help without a concrete example.
Yeh, I'm using them extensively on a large-scale project and we have been fine so far. I think they *might* have fixed some of the issues... Don't take my word for it tho :D
I think the advice that should be given to those new to OOP, is to start small and apply it to areas of frustration. i.e. Notice how you keep passing those same variables to several methods? Wrap those in an object. Etc. It should be used to improve the code, not because someone said so.
Also //CHANGE THIS refers to what I need to change when I copy and pasted the methods for teh monsters.
 four preceding spaces per line for code
Thanks, I signed up.
You already opened a code block with the first @{} with the foreach, it won't accept another one inside it unless html tags break it like inside the if block's h2 tag.
Keep in mind that Unity (major game engine used by Rovio, Blizzard, etc.) uses C# and Mono under the covers to create amazingly performant cross-platform 3D rendered games. Mono is very good and stable, but it is platform agnostic, so things do get more complicated the closer you get to the UI layer or platform specific implementations. I can develop for any platform from native UI to custom game rendering on pretty much any device all with C#/VS/Xamarin/Unity - all with C#, which I'm obviously a big fan of. My belief is that this story will only get better as Microsoft opens up the language and shares more with open source projects.
thank you
&gt; in 5 years [...] the code base [will be] replaced Code lives *forever*. Treating your code as disposable is not a good practice to be in, unless you are 100% certain it's going to be tossed at a certain, near-term time and date. Make internal anything you don't need to expose outside your assembly. Make sealed anything you don't need to derive from. Object-orientation is about more than reuse; information hiding and encapsulation are at least as important to the long-term maintainability of a code base.
What I really mean by the question is, the parent commenter said that C# isn't used much in web development. So I wonder if a job posting states that they need an ASP.NET developer, to what degree C# is gonna be used?
Each *type* of monster should have a separate class, which might be derived from a common base class (and/or implementing a common interface). Something like this, maybe: public interface IMonster { /* common, public monster properties and behavior defined */ } public abstract class AbstractMonsterBase : IMonster { /* common monster properties and behavior implemented */ } public class Werewolf : AbstractMonsterBase { /* Werewolf-specific properties and behavior implemented, possibly overriding stuff defined in AbstractMonsterBase */ } public class Vampire : AbstractMonsterBase { /* Vampire-specific properties and behavior implemented, also possibly overriding stuff defined in AbstractMonsterBase */ } then, elsewhere, you could have an encounter with multiple monsters: var monsters = new IMonster[] { new Werewolf(), new Vampire() }; foreach (var monster in monsters) { /* do stuff defined in IMonster, get results based on details in specific classes */ } Defined in this way, you can separate out bits of behavior between different classes, so that the same class doesn't need to know that werewolves transform when the moon is full, or that vampires burn to a crisp in sunlight (or sparkle; whatever you prefer). You could have another interface, IUndead, that derives from IMonster and implemented by Vampire and, say, Zombie. But, by defining common behavior in the IMonster interface. So on and so forth. (There are some oddities that come up when you start dealing virtual methods, new methods and type-casting, but that's best saved for a separate discussion.) The individual monster types are simpler than the one big type, because they don't need to know about each other. This makes life much easier when it comes time to figure out why the code doesn't behave as expected (which inevitably happens: we all make mistakes). Adding new types of monster is easier--all the new code is limited to the new class and whatever needs to know about the new monster, and you may be able to leverage existing types to make new ones. If you already had a Goblin, you might be able to create a Zombie Goblin like so public class ZombieGoblin : Goblin, IUndead { /* only new code here! */ } without duplicating any of the code in Goblin. Because common behaviors are defined in the IMonster interface, they can be accessed and used without reference to the specific types that implement the interface, even when the implementation details differ. Classes wind up being very useful whenever you have *categories* of things that need broadly similar behavior, but differ in the particulars. There are also *lots* of additional language features, patterns, and techniques to leverage this sort of capability, but: start simple. It can be a lot to take in, all at once. If you need to have two different objects, A and B, interact with a third object, C, you'd need to pass C to A and B *or* have A and B passed to C--it really depends on how you define the interaction. var c = new C(); var a = new A(c); var b = new B(c); // or possibly a.Attack(c); b.Attack(c); // or even c.Defend(a); c.Defend(b); .... Does *any* of that help?
What advice could I offer to someone who is enamored with mocking libraries and thinks it inconvincible to separate business logic from service calls? It's like trying to teach someone how to write a stored procedure when they don't understand that pulling 40 MB of data into the web server just to get a list of keys is a bad idea. 
I remember watching a video from a team member at Microsoft's ASP.NET team that designed Razor. I don't remember the name of it, nor can I find it... But, you gave a pretty good **tl;dw** of it. Basically, Razor is smart enough to know when you're using C#/VB vs. using HTML. 
&gt; Make sealed anything you don't need to derive from I've generally used as a rule of thumb that you make sealed anything you know you actively don't want others to derive from, but to use it judiciously. Your comment got me wondering, though, so I did a quick search that turned up [this SO post](http://stackoverflow.com/questions/2023378/design-advice-when-to-use-virtual-and-sealed-effectively), that provides arguments both ways. In particular, the MSDN guide argues to only seal a class if you have a good reason to do so, but Eric Lippert agrees with you, so there are influential voices on both sides of the spectrum. Going forward, I'm going to be a bit more willing to seal classes, I think.
You're asking for advice on how to have basic social interactions? Try inverting the control of the conversation. Less about how smart you are, and more about helping them understand. [It's not like this is a fairly new idea](https://en.wikipedia.org/wiki/Socratic_method). But first of all: &gt; Hi guys, For someone who is new to mocking frameworks, which is a good one to start learning with? Some work colleagues use Moq but I hear nSubstitute is also good. How similar are they? If you learn one, is it fairly easy to switch to another later on? Doesn't sound to me like someone who is enamored with mocking libraries. It sounds like someone that doesn't know anything about it, and is looking for general advice. I'm leaning towards you have bad communications skills. &gt; thinks it inconvincible to separate business logic from service calls It's not that it's inconceivable, but some people genuinely just _do not know any better_. I didn't understand concepts like this when I first started, and **neither did you**. &gt; It's like trying to teach someone how to write a stored procedure when they don't understand that pulling 40 MB of data into the web server just to get a list of keys is a bad idea There's a lot of things that beginners don't know and don't understand. It really sounds like maybe you're just bad at communicating if you can't explain something like this. I have no problems convincing even non-technical people why that'd be a bad idea. I don't know how little you've achieved that you're able to get off on being so arrogant towards beginners. It also sounds like you've not done much real world development, where you're limited by time and budget constraints, legacy code, imperfect API's, and the myriad other reasons why some perfect adherence to a pattern doesn't work. 
It's useful when you have to revisit code and figure out what the hell you were thinking a year or two after the fact. It's also useful to enforce (even if you're just enforcing it on yourself) proper encapsulation and maintainability. Mark things public and you'll take a shortcut here or there and, before you know it, you're working on the codebase I've got at work where everything is public, one class owns all the subsystems, and you have code like Type x = this.godClass.typeManager.GetActiveThingFromTable(); this.godClass.someOtherCompletelyUnrelatedSubsystem.DoStuff(x); Not to mention if you ever aren't the only dev (say your company hires another C# dev, or you are working on a private project that you open source), you have to live with all your decisions. So, even for a project that's just a one man show, I think that ambivalence towards encapsulation isn't the right attitude.
Why would I want private fields in the inspector?
&gt; godClass *shiver* I'm the first to admit, my old code was shit (when I first picked up C#, a lot of my code sat in the form1 class) but the idea of a godclass pains me. And yeah, going back to code later was a big reason I enforced it on myself. Where I work, I do a lot of front end-display stuff. I have a lot of media-rich items on the screen and at first my classes for those widgets were all "X, Y, W, H, fn, V" for variables. Now I've learned more and have Position.X, Position.Y, Size.Width, Size.Height, Filename, Volume.... and that's not even delving into things like private vs public. 
I'd say depends on the app and interface your going with. I think we're moving more towards fluid interfaces where everything is a single page and there is no posting back (think gmail). Hard to do that cleanly without an MVVM.
First just want to say I'm a huge fan of both C# and Unity. And I love having the ability to even write iOS apps using C#. But I was under the impression that C# was the scripting language for Unity (similar to how a lot of engines out there use Lua), but that the main engine was C/C++ under the covers. If I'm wrong, then Unity is even more amazing than I realized. However even as the scripting language, it lets us use our knowledge of C# to code beautiful cross-platform performant games, and that's a huge win for us no matter how you slice it. 
Razor is voodoo
No, it doesn't assume that at all. I was pretty much a noob when I read it. I think all the examples are in Java but its easy enough to follow along, especially if you're already familiar with the C# syntax.
Wow, you obviously spent a fair amount of time writing all this, but not without me wondering a one thing.. 1) Why interfaces, from what I understand you are only showing method titles in these, and not bodies, then showing the title and body in the object class. Why? I did some further research and see how to interact object instances between classes. I have been pointed to [this](http://www.amazon.co.uk/kindle/dp/B00BP83RMO/ref=rdr_kindle_ext_eos_detail) book by a redditor, which looks pretty decent, I will probably get it :D Hopefully the book will answer such questions as "how do I join my program all together", which is probably my main confusion with OOP. Thanks for the answer above :) Much appreciated :)
Awesome, I did a little java before I moved onto C# because Visual Studio is awesome, and they are very similar anyway. Thanks man :)
Thanks!
Sure...on a *nix system it's just a simple cron job but on Windows you can schedule it with the task scheduler.
You can use the LINQ OfType method for this. private void HideAllPanels() { var allControls = FlattenHierachy(Page); foreach (var panel in allControls.OfType&lt;Panel&gt;()) { panel.Visible = false; } } You can also easily add a type parameter to the method if you want by doing private void HideAllControls&lt;T&gt;() where T : Control { var allControls = FlattenHierachy(Page); foreach (var control in allControls.OfType&lt;T&gt;()) { control.Visible = false; } } 
Had to delete this from the build events from the code off of github: cd "$(ProjectDir)" del *.nupkg ..\.nuget\nuget pack -prop Configuration=Release copy *.nupkg \\192.168.1.102\nuget\ You might want to remove that in the next commit.
Awesome, thanks. Have some gold.
Forgot about that, if you forked and did a pull request I'd accept it :)
I'm running an ASP.NET 5 web-app on Ubuntu atm, so I would say yes. 
I just downloaded the zip directly, so I didn't fork or anything.
Default parameters are only a problem for me under Windows. I use OSX mainly for development and every project I work on has default parameters in a few functions here and there with no problems whatsoever. Also yes, namespaces are no longer problematic since Unity 4.
Is there an online tutorial on how I can watch for operations?
Thank you! I'll check this out.
wow i did not know that method existed! Love learning something new, thanks for sharing.
Please enlighten us in how you would design the code in the situation where `ClassA` requires multiple dependencies in order to do its job. If you're doing OOP correctly, this happens A LOT because you have a lot of small, tightly focused classes which get composed together, aka dependencies and dependency injection.
How about an integration test? If it truly does need all of those dependencies, then you need to test it with those dependencies. A mock isn't going to be able to accurately represent the real behavior of the component under test.
Surprised that there's no love in here for fakeiteasy. It abstracts the ideas of mocks and stubs so you don't really have to worry about the semantic differences between them. Everything is a 'fake'. Super easy to use and helps keep your tests more concise.
If the class does nothing except delegate calls to dependencies with no other logic, then sure an integration test is just fine. But if one or more of those dependencies is a database *and* there's logic internal to the class then you need to mock out the dependency and do some unit testing.
I don't want to be "that guy", but why not use ncurses?
Yes.. so the IL2CPP compiles IL to CPP. What compiles the C# to IL?
Code that is mostly tested bu integration tests are poorly designed. It means that the objects are poorly decoupled. Integration tests are harder to debug, harder to write without giving false negatives, covers more code and takes more time to run. If your code only uses integration tests I think it is very poorly designed since you have a big issue with proper decoupling. Also if your code uses async the stack trace is swallowed anywhere inside the integration.
Woo! Not sure I'd consider my comment particularly worthy of gold, but thanks! Much appreciated.
It's a pretty useful one. .OfType behaves like as, in that if something doesn't match the type it simply ignores it. There's also .Cast too, which behaves like a direct cast and will throw an exception if the thing you're iterating over doesn't match your chosen type. Either of them will reduce the boilerplate when trying to get items as a particular type when iterating over a list though, hence why I did it that way, rather than safe casting/checking for null in my example.
And then how do you get test coverage of that higher level class without actually connecting to the database? You can't just assume that all the code that calls the database is correct. You mock the database! And how do you do that if the DB provider didn't provide a mock for it? With a mocking framework. Unit tests must be able to run in any environment (workstation OS, server OS, build server not running as domain user, etc.) with no network access. Otherwise, you get random build failures. Random build failures leads to people disabling tests and generally not trusting build failures to be actual problems that need fixing.
Did a little more digging and it looks like currently they're using Mono, but "may" switch to Roslyn as that project matures.
I don't know how common it is, but it doesn't sound like a very good interview. Compiler trivia is nearly useless even when it's correct.
&gt; What does this suppose to mean in a job interview when people who asked me those questions, actually got the wrong answers? That you may not want to work there. That's a win for you.
Just think, the people you interviewed (likely) knew less than you. There's a lot of incompetent people out there that get paid a lot, just be confident in yourself.
Thank you for this advice and I will have to consider finding different job to apply for now that my recent job interview was apparently not a good interview.
Take it as a red flag to avoid that employer. It is a bit of a silly question to start with. I've interviewed quite a few places and never had a silly question like that, so from my experience I'd say it isn't normal.
.Cast is useful for value-types. var froo = arrayOfInt.Where(x =&gt; x % 2 == 0).Cast&lt;int?&gt;().FirstOrDefault();
Additionally to what has been said already, there's another simple thing: You answer what would the expected behavior assuming that expression would result in a boolean, but state that it does not in C#.
Game engine is an accurate term, and I think everyone understand that the term doesn't restrict what can be done with the tool.
Relevant post on the /r/csharp a week ago: http://ericlippert.com/2015/05/04/wizards-and-warriors-part-three/ https://www.reddit.com/r/csharp/comments/34x1tb/wizards_and_warriors_part_three/ I figured you'd find it interesting after seeing your below posts =).
If you are scaring the person you are giving the technical interview to, then you are not going to be seeing them how they normally work. Unless you normally make them work feeling scared! However, there are sometimes good reasons to ask such compiler theory, normally around things that could be considered a bug. For instance, in an older version of the C# compiler, there was an issue around [Access to Modified Closure](http://stackoverflow.com/questions/235455/access-to-modified-closure) so it was very useful question to ask someone who was coming in at an experianced level. But if you are a graduate coming in, then it's really quite a pointless thing, as you can't really expect someone to have come across such things.
Bad question aside, does this maybe depend on your compiler settings? In some other languages (c) , the expression would be evaluated to true due to the INT being non-zero. 
Not sure exactly what you mean, but maybe the stuff I've posted previously about this will be of use? http://www.reddit.com/r/csharp/comments/2vacht/my_implementation_of_mvvm_feels_awkward_wpf/cofv6t7 That describes how to change views in an MVVM way using DataTemplates.
I wanted something that was pure CLR with no other runtime dependencies. 
I was away from a machine at that point, so if they wanted it fixed straight away then yes (and what developer doesn't have a github account anyways?). You can also edit files online inside github without a local clone which is what I did in the end :) Edit. The project file needed editing, no file needed deleting. 
Disclaimer, I'm brand new to C# so some of my statements below might be inaccurate. I'm working on building a mud in C# as well as a learning project and I thought I'd share some of the stuff Ive learned in the process. First, I don't know how far along you've gotten or what your experience is like, but I quickly realized that handling all the network programming was going to be harder than I thought. There also aren't a lot of resources out there for this type of application in C#. The other conceptual thing that required a lot of research was single vs multithreading. Nowadays, if you google anything related to a C# telnet server they will assume you are going to use multi-threading, which from what I can tell is a bad idea for a mud. Evidently it makes things much more complicated and can cause issues with actions in the mud not happening in the order they should. While I'm new to C# I do have a year or two of experience with Python, and I found a pretty good looking project called miniboa that is essentially a barebones, single threaded telnet server, designed to be the starting point for a mud. Its basically everything I needed, but unfortunately it was written in Python and I'm trying to learn C#. I decided to use my python knowledge and try and port miniboa over to C#. I'm about halfway done and I have no idea if it'll work or not, but I think it would be helpful for people like us who want to make a mud or other type of telnet application from the ground up and keep it single threaded. If you're interested I'm happy to share the bitbucket repo, just let me know.
Is it possible that they were testing to see how you would you handle being right? Did you roll your eyes and act condescending?
Here's the dilemma. Nobody wants to ask these kinds of questions in an interview, because it's a waste of time for both the employer and the interviewee. The problem is that there are a decent number of candidates who literally cannot code at all. When you interview for entry level candidates, you get a *lot* of people who have no business claiming that they can create software. This interview question *might* have been cribbed from an older source online. This was a classic error in C and C++. In those languages, if (X = Y) assigns the value of Y to X, and then executes the conditional if Y is nonzero. This was a very common error in the days when most Windows programmers were doing C/C++, which is why Microsoft treats it as an error now. So it may just be that the company was a little sloppy in its interview questions. If you write a brief, polite note about it, the employer will appreciate the feedback. The software world is not big, and maybe the interviewer will see you again in a few years at another company.
This kind of question is on a lot of the typical online programming knowledge tests. It's been normal to me for my last few interviews.
I would have suggested they made a mistake of not having (X==Y), it's possible they were looking for a suggestion or guidance versus just a yes or no answer. I've had companies pull this shit in interviews before.
Sure for a repo, but I don't agree that the name on NuGet is unimportant at all. For one, you exhaust names from other projects where the name makes much more sense.
That's wild. I didn't really know how it was making use of the C# as a scripting language under the covers. I still wonder though if the heavy lifting of the engine is straight C++. Still, great use case for a great language that's a little different than we see day-to-day in the realm of business apps. :) Although there have been plenty of times I have wanted to expose C# as a scripting language in a project...
Can you give a good example that you have in mind? I'm not intrinsically opposed to the idea that one could exist, I just can't think of one.
How does the view hardware change the definition? Your phone is a VR device if you choose to have it run with two outputs on the same screen and sellotape it to your head.
&gt; and forces you to use PUBLIC FUCKING FIELDS No it doesn't. That's the default implementation but you can happily use private fields and serialize them to the editor if use the attributes. There is also nothing stopping you from simply not inheriting MonoBehaviour and coding everything apart from editor integration and unity api commands exactly how you like. **Clearly there's a significant lack of knowledge on your part.** Your lower reply also suggests an inability to accept that certain software is designed in a certain way which may not be ideal for you but may be for someone else. And given it's success, clearly there's benefit to the way it goes about things, when you consider that software build limitations include time.
Did a work around take longer than writing your own game engine? Not everything will be able to do everything you want it to, particularly when the object of a framework is ease of use and quick development.
So an artist can change the colour of something without worrying about what the code looks like or messing it up. So a designer can change the patrol path nature with a click. In short, for all those things useful to game design you haven't thought about with your extraordinary closed mindedness, spouting rubbish as if you know even half of how Unity works and tricking others into thinking you know what you're talking about.
Unity cleans up a lot of the necessary framework and you don't see much of it. When the programme is set to work, there's not much difference other than the libraries you're using. One significant difference is simply that Unity's approach is very component based (ie your object *has* a pathing component as well as a number of other things) whereas in most software it's more inheritance based (ie your object *is* a pathed unit as well as a number of other things). It's more the approach that's different, and even then you can still quite happily write component-based code.
And it also shows a health interest in the problem domain, and the company.
How often do you get false negatives? How long does it take to run all tests in your application? What is your test coverage and how many tests do you have? What is the size of the code base? My experience with integration tests that target a database is this: They are slow which mean they increase the time from a fix is made ubtil it reqches production. They are unreliable which means they take longer to debug and investigations may turn fruitless. They are much more complicated to write because they produce side effects which may break other tests (which is what makes them unreliable). Integration tests are a necessary evil, it shouldn't be your entire test suite because they will seriously reduce time to production and time to complete a feature.
What you have described is what PROPERTIES are used for you massive troll. You are the one talking shit you don't know about.
I'm obviously not talking about the hardware... The integration with VR software is what I'm talking about.
1. Show your work 2. Inform them of their error 3. Thank them for their time and inform them that you will continue your job search elsewhere 
The last place I worked at, when they brought me in, one of my tasks was to examine the interview tests and processes and make changes. Many of the questions were assembled by hotshot kids who wanted to show off, so they asked about esoterica of the languages. I promptly threw out all of these questions, and replaced them with topics important to the position. And guess what? We started hiring better developers. When your job is to work on a team developing and maintaining a piece of software, getting a long trivia test correct is going to tell me exactly nothing about how well you can work on a team developing and maintaining a piece of software. Esoterics of a language or platform are fun to learn about, and you may even encounter them in the wild. But unless your job is to author a book on it, it's hardly a valid concern for job placement. 
The probably wrote it in VB and used a poor conversion tool.
this is a really constructive answer... And if the decision hasn't been made and OP still wants to work at this company* then OP is showing great initiative by going home and seeking to improve his knowledge. If i was conducting a technical interview and had made an error like this then i'd want to know about it and i'd be impressed if a candidate emailed me back politely to further query my error. * maybe this was the only problem with the interview.
Silly me , I usually wait for the candidate to make ridiculous claims. Never thought about offering one myself.
Well knowing the difference between = and == is a good start.
&gt; Can someone help me identify what's wrong here? In 'Submit_Clicked' it seems that you are literally "only pushing the value in the 'title' field". Your code doesn't seem to even attempt doing something different. Don't ask us to do your work for you, ask for help when you are stuck after you have tried to do it yourself.
Be careful though, I would seriously reconsider working somewhere that confidently made a statement the likes of "we removed all our whitespace and comments and got 23% performance improvement" Now on the other hand if you're talking about doing it for the purposes of minification of javascript and CSS, and see 23% page load speed increase due to less bytes being transferred, I can get on board with that. Good job to the guy who called you out on it. Edit: upvote for "crush it", lol
I'm no expert, but is the problem that they wrote if(X = Y) rather than if(X == Y)? If so, couldn't you have just told them to fix the issue, then explained what response the program would give? I'm guessing that there are plenty of typos like that in code that *does* execute, but fails to behave properly, and they need people who can ferret out and fix those kinds of sneaky errors more than they need people to build new products. That's just a thought, though. A castle always needs more servants.
Seriously, if someone asked ME that in an interview id be halfway out the door. Seriously? Removing comments improving performance?
If I were interviewing someone and made the same mistake this interviewer did, assuming the candidate wasn't a weirdo, having them call me out on it (in a tactful way) would probably make them an insta-hire. Definitely can't hurt to shoot the guy a quick email and explain it, and if it does for some reason - fuck that guy you don't want to work for him anyway. Source: I hire developers.
It's better to admit to "if you really think you got a performance boost, I have no idea how. By what your describing there is no reason for one, so there must be some other reason" than play along. No one wants someone who just says yes and agrees with everything they say. I have the luxury of telling my boss "hey I don't think this is right. It can lead to bugs or doesn't do what it's supposed to". After which we can both take a look at it and maybe have a debate and decide if it needs to be fixed. In your case it was an interesting thing to ask considering statements like that should set of red lights and bells in a programmer's brain. If someone goes "oh yes that makes sense" they probably haven't coded very much I'm glad you do this. 
Some people like to get cute to throw you off. I have found that trying to outright trick your interviewee (to often prove how smart YOU are) is not how you get good people. I try to put some hard questions in there but there is no benefit to doing it on purpose. I know that some do. Consider yourself better for it. Doesn't sound like where I would want to be.
Why? If you hit build and it doesn't build it tells you where and why. There is no point in asking "will it compile" because in the real world you don't study the code to see if it builds you hit build. If it works, awesome. If not you fix it. Unless you are interviewing for something directly related to compiler design... then it would be important.
You should have said "I'll bet you this job that doesn't compile"
Could they have been sneaky and somehow defined an implicit conversion from int to bool? https://msdn.microsoft.com/en-us/library/z5z9kes2(v=vs.71).aspx PS I don't know if its possible to add conversions to types you don't create, but its the only way I could conceive that it would compile.
It improves developer performance in that they don't rely on comments (which may lie) and rely on the holy truth of the code. For maintenance purposes. 
yeah but nobody wants to work with an eye-rolling douche bag.
In all fairness the average person doesn't want to work with the average programmer. Even reading the majority of comments on this subreddit working with someone with so little personal skills on a daily basis would be incredibly difficult.
I'm of the opinion that tight coupling isn't something to be avoided unless you anticipate interfacing a given class to multiple types of classes. If your ReactorComponent will always requests fuel from a class that inherits from FuelTank, then there's no need to make things more complex that what you already have. This is particularly true when the project you're working on is a hobby project worked on by a small team. If, on the other hand, you anticipate hooking your Reactor objects up to different kinds of fuel providers (perhaps a more complicated ship has a FuelSubsystem, which provides a central access point for multiple fuel tanks?), then interfaces (and a static ComponentProvider.GetComponent&lt;IComponentType&gt;() function) would be an easy way to decouple things without needing a messaging system. In this paradigm, both FuelTank and FuelSubsystem implement IFuelProvider. On initialization, Reactor queries the ComponentProvider for an IFuelProvider; if only a FuelTank exists, Reactor will get a reference to FuelTank : IFuelProvider. If, on the other hand, the ship is complex enough to have a FuelSubsystem, then the Reactor will get a reference to FuelSubsystem : IFuelProvider. The only question left is what to do if there are multiple IFuelProviders on a single ship. Perhaps you can implement a priority system. Or perhaps when FuelSystem is added this gets references to all FuelTanks before removing them from the ComponentProvider and then adding itself.
Awesome I really like this as it is quite extensible/flexible. Would you implement the GetComponent method using reflection or is there a speedier way to do it? The other issue I'm working on right now is how to do the compute-state, then update state in two steps in a more elegant way. At the moment I have an internal "state" object that holds all of the data(e.g. reactor temp, fuel input, power output, etc.) and I have two copies of this object that get swapped when the state is updated. Unfortunately this means creating all of the extra objects to hold state (e.g. making Reactor also means I have to make an internal class called ReactorState). Also, key values are stored in a central datastore object (used so that clients can subscribe to updates on those values), and are referenced in the Reactor object, so they can't be simply swapped in the state objects... Thoughts? Thanks!!
You can build on the service provider class from my project. It does not use reflection: https://github.com/ZaneDubya/UltimaXNA/blob/master/dev/UltimaServices.cs Note that the linked class only allows adding and getting a single object of each type. If you need to add multiple objects of each type (as in the multiple fuel tank example), you would need to change the m_Services collection to something else (Dictionary&lt;Type, List&lt;object&gt;&gt;), and change the logic of the class so that it can return the List of objects instead of the single object. You might also want to change what happens when you call GetService&lt;T&gt; when no objects of &lt;T&gt; exist. Would it be better to have a TryGetService pattern instead? Your call. &gt; how to do the compute-state, then update state in two steps in a more elegant way. I don't understand exactly how or why you've separated Update() and Commit() - is this the reason you need Reactor and ReactorState classes? It seems that if you could handle your update logic in Update(), then you wouldn't need the extra Commit() step or the XState classes.
Yeah I figured that wouldn't be terribly clear... Let me try again (using your nomenclature of X and XState). The issue is that I want the setup to be "pseudo-simultaneous", so that updates to component X1 don't affect X2 just because X1 got updated first. Instead, the idea is that each component computes its next state using the current state of all of the other objects, and then after all the new states are computed, the next state is applied to each object. That way it isn't dependent on the order that things happen in. See http://gameprogrammingpatterns.com/update-method.html, paragraph titled "*Objects all simulate each frame but are not truly concurrent*" I very much like your implementation! Thanks for sharing it!
I agree, that would be a sign. But feedback is safer to offer when it is solicited, and not when power-dynamics are skewed. A candidate interviewing for a position can be easily dismissed. A co-worker or subordinate has more wiggle-room when it comes to feedback, discussion and feedback have their place in a work environment. In general, your interviewee is going to assume you don't want feedback or to be called out on BS, because the interview is not that sort of environment. If the interviewer is going out of his or her way to trick the interviewee by intentionally coming off as a buffoon, with the expectation of correction, that's not a really good approach thanks to power-dynamics. If the goal is to figure out competence, the trick above isn't very reliable. There are other methods available.
There are a lot of moving parts here, obviously. It might be worth saving the JSON that comes back, and putting together a JSFiddle. Then we can take a look and help track down the issue, if it's in the JavaScript. If you need any assistance getting that set up, let me know. 
How can I view the json? I tried setting up SOAP ui and I get access denied when viewing the API URL. I'm logged in on the TFS through visual studio so maybe I can view it from inside the IDE perhaps? Edit: I have access to the API solution. Let me peruse it.
Usually Begin/End are async processes. If your disposing of the object before handling the End then it's reasonable to question if your getting the results you actually expect that your getting. It's also possible that the dispose does nothing if/when there's a reference to the object and won't be disposed until the reference is released. 
I'm only a little insulted.
It probably is, I just want to be extra sure that it really wouldn't compile without any pre-build check preventing the source code from being compiled given that I have 10+ plugins and addons for Visual Studios. It is a lot like "Trust, but verify" when it come to compiler and IDE.
http://reedcopsey.com/2009/11/17/synchronizing-net-4-tasks-with-the-ui-thread/
&gt; Integration tests severely hamper time to get a fix ready for deployment and are a general nuissance after they are written. That's the attitude that has made my career. I spend most of my time fixing systems that "work" but are ridiculously slow and buggy. Often the first thing I do is fix the various integration tests that they turned off in a vain attempt to "speed up development". I also spend a lot of time ripping out DI frameworks. I can't remember the last time I saw an IoC or DI framework implementation that didn't introduce more bugs than the half-assed "mock unit tests" caught. Hence my unwavering belief that internal mocks are an indication of poor code quality. 
You can read the specs if you can't find a C# implementation: www.adobe.com/content/dam/Adobe/en/devnet/amf/pdf/amf-file-format-spec.pdf
&gt; How can I view the json? Chrome developer tools? Or even simply pasting the API URL in your browser's address.
Can you elaborate?
&gt; They told me that it DOES compile and ask me what the output is going to be. Did they *say* it compiled, or was that posed as a hypothetical?
I thought I read that there was a follow up question about what the output would be.
Debug step by step the method AddRecord_Changed and you will see where the error occours. 
Do you know if dispose makes use of the cancellation token?
Use fiddler.
When debugging, there is a call stack window which allows you to step backwards through the method call chain. The information that you're at your own rethrow doesn't help anyone. Go back in the call stack.
usually you should not call anything after you dispose the object since you do not know what it disposes. cancellation are often used in async operations and get disposed as well so I don't think it will work. 
All application design is generally "opinion based". However, often times there is more opinion one way than another. Regarding Unit of Work and Generic Repositories, even Microsoft no longer recommends implementing generic ones on top of EF. The only reason to do so would be if you needed to aggregate multiple data sources into a UnitOfWork. As you've already figured out, EF is already an implementation of UoW and Generic Repository. Please note that I say "Generic Repository" and not simply "Repository". A concrete repository may still have value, which is a repository for a specific type, although more often than not a Service Façade would be a better choice. Or, even better, Command and Query objects. Regarding unit testing, as of EF6, EF now supports unit testing in the framework. There are a number of tutorials on this. You don't want to be littering your business domain with Linq queries though, which is why you should really defer these to some kind of Service Façade or Command/Query object that encapsulates your linq queries. 
I do use the async-await API. But for pre-async classes (like `UdpClient`, `TcpClient`, etc.) it is just a wrapper over calling `BeginXXX` \ `EndXXX` so I just cut the middle man and asked directly about `EndXXX`.
I'm in the call stack window and I was given this: &gt; ADCFridayAfternoon.DLL!ADCFridayAfternoon.FormCode.AddRecord_Changed(object sender = {Element, Name="my:AddRecord"}, Microsoft.Office.InfoPath.XmlEventArgs e = {Microsoft.Office.InfoPath.Internal.XmlEventArgsHost}) Line 65 + 0x5 bytes C# 
Sure. Here's an example... public List &lt;string&gt; List1; public IEnumerable&lt;string&gt; List2; public void AddToLists() { var items = new[] { "Dog", "Cat", "Fox" }; foreach (var item in items) { List1.Add(item); List2.Add(item); } } There are a few things happening here, and yes, the IDE will tell you what's wrong and the compiler will throw errors. But I want to know why, from you, the interviewee, the compiler and IDE are squawking.
Well, based on their reaction, it wasn't a test, it seems. But I really find it hard to believe they could be that bad at C#, that's one of the most basic operations and without knowing how that works, I can't imagine that get very much done.
`CancellationToken` came with the TPL in .net 4.0. Everything that came before it (which is most, if not all of the APM classes) has no idea about it.
Ok
Programmers do like to work alone.
Yes, it's just a wrapping. But the same goes for several other APIs that have a task-async version in the framework. Easier and more uniform to use tasks throughout, I think.
Yes. I would not rely on it after dispose was called. To be safe I just looked in the source code of the UdpClient you are using. It won't work. The UdpClient uses a SocketClient which gets Disposed when you call Dispose. The SocketClient is needed to receive information in Endxxx. In UdpClients case Endxx will throw an ObjectDisposed Exception anyway. 
http://stackoverflow.com/questions/19910172/how-to-make-picturebox-transparent
Aside from it actually having to work; You're correct in your assumption that this is indeed a very inefficient way of doing this. You're running through the entire dataset every tick. There's plenty of other ways to do this, depending on whether space or time complexity is the biggest issue for you. If space doesn't matter, you can simply load the entire DialogueList and sort it according to timestamp beforehand. This operation would only need to be run once, and makes looking for the next line to be displayed rather trivial. More space-efficient, but significantly more time-consuming would be to search for the next line to display every time you display a line. This way you would at the very least not be running such a query every single tick.
Interesting, on my mobile it stripped out the &lt;string&gt;, so it was just public List List1;
I see the confusion was worked out with A already, but there is more to this. Look at the generic names of the fields, methods and variables. Those suck. Add what to what list, for example? Also, why fields and not properties? The code above is a good conversation piece in an interview. Stuff is wrong everywhere, some is just not so subtle.
Oh sure I thought you were just looking for errors not bad practices :)
Tried that first. No dice. I have IE11 installed. 
He says people won't fall for it, but what is there to fall for? Responding? 
To add on to this point. At a high level you can think of an interface as a remote control to your tv. You are providing a set of buttons that do things to control you tv. You can do things like change volume, change channel, bring up menu, and input numbers. If you go to the store and buy a new tv controller, chances are it can talk to/ control your tv. The remote is an interface to the TV and the physical controller you buy is the concrete implementation of that interface. How the remote control is implemented really doesn't matter as long as it conforms to the interface. In code, remote control company A could use a forloop and do a bunch of other things in their implementation that are different from Company B's implementation. If you were to only write code using the interface, you can guarntee that all remote controls should perform the same functions. 
That is a Cloudflare protection. If you perform a Get request to that website, you will see that it first displays a 503 error. Look at the response header and you will see a header that looks like this: Refresh: 8;URL=/cdn-cgi/l/chk_jschl?pass=1441833035.306-TbicA7pKBR This just redirects the page to this URL: http://anilinkz.tv/cdn-cgi/l/chk_jschl?pass=1441833035.306-TbicA7pKBR Look at the response of this URL: Set-Cookie: cf_clearance=254ecbc2f0197e282a75d1c8ecb6742f65c78a10-1431843039-604800; expires=Sun, 24-May-15 04:23:59 GMT; path=/; domain=.anilinkz.tv; HttpOnly There is what you need. If you visit the website again with this cookie in your cookie container, Cloudflare won't appear. You may wonder how to perform all of this via web requests. **STEPS:** 1. Get request to http://anilinkz.tv/anime-list 2. Check the response. It contains something like this: &lt;form id="challenge-form" action="/cdn-cgi/l/chk_jschl" method="get"&gt; &lt;input type="hidden" name="jschl_vc" value="cb924914a1442ba28c78c0924fd8feb8"/&gt; &lt;input type="hidden" name="pass" value="1431835025.306-TbicL7pKTR"/&gt; &lt;input type="hidden" id="jschl-answer" name="jschl_answer"/&gt; &lt;/form&gt; 3. Use this information to build a request to http://anilinkz.tv/cdn-cgi/l/chk_jschl?pass=... 4. Don't forget to store the cookies or Cloudflare will appear again. 5. It is possible to simplify this process even more but I will leave that to you.
Oh, look! /u/ILvFrenchToastCrunch wants to censor the internet!
I suppose you could define a factory which is responsible for creating `MyClass` instances. The factory would also contain a list which gets updated every time you create an instance of `MyClass`. https://dotnetfiddle.net/hqSFp4 Without more details it's hard to say what you're trying to do/accomplish.
not really trying to accomplish anything specific just thought about it and would like to learn how i might do such a thing.
Genuinely curious as to why this post is bad. If it's because it's something OP considers "too simple", then as someone who hasn't worked in C# for a couple of years, it was something I didn't know about. if it was because it was wrong, then I'd like to know so I don't do the same thing if I go back to writing C# code.
Plenty of things are wrong with this. - The first and most blatant: It's using the non-generic version `IList`. Since .NET 2.0 and C#2 we have generics which **should** be used over the non-generic versions. Extension methods were introduced with C#3 in .NET 3.5. - Secondly, the name `ListToString` is a very bad name for an extension method. You'd call it `names.ListToString()` - sounds bad? Cuz it is. Something like `ToCommaSeparatedString()` would be better. - Third, passing an empty string to the `StringBuilder` constructor is pointless. Just leave it away, it adds no information to the code. - Fourth, it's using the basic `ToString()` method to create a string representation of whatever object. This is a very poor choice in 98 % (number made up) of the times. Since we're using .NET 3.5 and C#3 (because we have extension methods) we have Lambdas, so it's better to pass a `Func&lt;T, string&gt;` parameter to the method that is responsible for creating the string representation. - While slightly slower, `string.Join()` would be more expressive in what the method does. - "you need to involve NamespaceName" - What's that meaning? To *involve* a namespace? An improved version: public static string ToCommaSeparatedString&lt;T&gt;( this IEnumerable&lt;T&gt; src, Func&lt;T, string&gt; toString) { if (src == null) throw new ArgumentNullException("src"); if (toString == null) throw new ArgumentNullException("toString"); return string.Join(", ", src.Select(toString)); }
You can use [.NET Fiddle]( https://dotnetfiddle.net/Mobile?id=CsCons#code-editor) to write and test code in.
It's not that bad, and it explains roughly extension methods. Sure it might not be the best blog post on the internet, but claiming "have no right to be blogging" is condescending and downright unnecessary. Worst case scenario is someone reads the blog and decides they want a 2nd opinion. 
Thanks. Any good app for learning some? 
There is no way besides forcing (using private constructors) that everyone create instances via a factory. 
ToString is used in a lot of places (the entire XML Linq library, for instance) like that. That 98% figure is very exaggerated. Also, String.Join is definitely not slower, and is what should be used. 
Looking at all the comments, it seems nobody really understands why it's bad. There are many reasons, including lack of exception handling and the fact they're using IList rather than IEnumerable. (Which would add more flexibility and lazy loading, instead of needing to use ToList() and creating an object in memory.) However, the worst thing by far is the fact that it's already built into the framework... String.Join(", ", myList); Even if all his method did was call this it'd be bad. Extension methods aren't meant to replace static methods. Also, doing stuff like this can confuse others or be unknown to them and lead to half a project doing it one way and the other half the other way. Edit: Typo
You could have a static List&lt;MyClass&gt; and add your new instance in the constructor.
Well, it's not meant to be an example of a useful method. It is meant to show how extension methods work. So the code itself needs to not distract from the point, while demonstrating the power of extension methods. This particular example satisfies that goal. 
A factory pattern with a private constructor is probably a better approach.
Yeah, I think the author is probably just trying to introduce extension methods to his readers. I think the author accomplishes this goal. I don't expect every example on every blog to be a perfect, robust, and performant piece of code that I can throw into a library and forget about. Also, every solution to a given problem is given to work within a framework of predicated assumptions. The solution presented by OP, for example, assumes that I want an exception raised when the arguments are NULL. But a given workflow may be just as happy returning NULL, or returning an empty string, or using the built-in ToString() if the Func is NULL. It just depends on the workflow. And String.Join does provide an overload for IEnumerable&amp;lt;T&gt; - and *it calls T.ToString() to get the string representation of the objects in the collection*. The framework is expecting that you will follow the common pattern of overriding ToString() in your class should you need custom formatting. I'm glad your solution works for you, in your own defined workflows. It is a nice solution that works in the confines of your own assumption framework. It does not necessarily follow that your solution is "better", or that the author should have his blogging privileges revoked. 
Why do you want to write code on your phone? Just imagining how long it will take to type, let alone try to debug, is making me cringe!
Yes. Search C# in the app store
Im serving now so i dont have a computer near me most of the weak.. Trying to make some of the time useful...
TIL you can draw images
Man, so many comments are making assumptions and putting words in my mouth...
Wait, serving as in jail? If so, they let you have phones?
Consider using a temporary signed s3 upload URL instead of having the upload go through your app server
Usually how these scams work is that they filter for stupid as much as possible. That's why the nigerian scam letters are written so horribly, to make sure someone that is at least a bit smart sees that it's a scam and doesn't waste the scammers time. So they really want the most gullible for that. So this could actually work for them
I won't be using a browser, the client is a .NET library.
So this looks like a good idea if I choose to stick with AWS. Currently I have a few different storage types, S3 is just what I'm using for a proof of concept. But still looking for information on how to do this in my API.
Ah, that makes a lot of sense. To be honest I hadn't really looked at the content of the method, or really thought about it's usefulness, but yeah, String.join would make a lot more sense. Cheers for the reply. 
The only two books that really caught my interest have been *Effective C#* and *More Effective C#*. I know a lot of people are a fan of *CLR via C#*.
I checked it for some classes (`UdpClient`, `TcpClient`, `Stream`, etc.). It was always the case. The question really is if that's enough to say that all correct `IDisposable` implementations should behave the same. I believe so, so I added an answer there. That idea doesn't seem really popular though...
Well, I'm not saying you shouldn't read other stuff - I'm just saying you shouldn't sit down and read a programming book like you'd sit down and read a history book. You should be working through it in a compiler as you learn about it.
I'm having this exact issue at the moment. I'm just over 100 pages into the Head First C# book but it's not quite what I hoped it to be, however I have found it to be a good way to familiarise myself with VS. I've recently learnt SQL using the O'Reilly text book [Learning SQL] (http://shop.oreilly.com/product/9780596007270.do) and I found that extremely useful. It had great examples and a nice clean teaching style. Because of this, I've had my eye on [C# 5.0 in a Nutshell] (http://shop.oreilly.com/product/0636920023951.do) as it seems to follow the same format. You can view the whole book through Google books [here] (https://books.google.co.uk/books?id=EvXX03I5iLYC&amp;printsec=frontcover&amp;dq=c%23+5.0+in+a+nutshell&amp;hl=en&amp;sa=X&amp;ei=L-9YVb7rN8yyUfD1gYgC&amp;ved=0CCAQ6AEwAA#v=onepage&amp;q=c%23%205.0%20in%20a%20nutshell&amp;f=false). The reviews all seem to be great and I'm definitely buying a copy soon, so maybe it's something to consider if you too are finding the Head First book a bit tedious. 
Check out docs on chunked transfer encoding.
I looked at head first and put it down didn't like it
And don't forget that it might happen that half of the ship is suddenly missing when under fire. :)
I'm still very new to programming so i need as much study as I can get, i don't go to school for it i learn on my own so supplimental learning is necessary for me
Research sounds like studying to me.
New series entitled "groking" is coming soon from Manning Press, with the C# one written by Jon Skeet working with one of the guys behind Head First. I'm eagerly awaiting a MEAP edition.
Oh, haha. What level would you say you're at? Have you ever written code before, or are you just looking to add another language? How much time a week do you think you'd have on a real computer?
Hey OP, I'm like you in that I tried head first but I didn't find it to be my cup of tea. I tried the yellow book for c# and I found it a lot better!
yeah i haven't even looked at any sql but its on the agenda for certain. I'll have to take a look at what you've suggested for sure. best of luck to you
awesome I'll have a look at it thanks for the suggestion. :)
Haha, that's an excellent point! What kind of interaction/interface would be appropriate for components that can be destroyed? Perhaps the Ship is expected to check the status of the component (IsActive? IsDisposed?) before calling any of its methods? Or perhaps the Ship continues asking the components for resources ( int fuelAmount = fuelTank.RequestFuel() ), and the fuel tank returns zero if its inoperative - whether because its empty or because it's missing?
C# in depth has been my favorite intermediate/advanced c# book
What?! How far can you take this? Where does functionality differ? Say I tried to use a webcam API or something, would it look for the webcam of that server or my computer in order to work?
Going completely away from how some people are approaching this. You're using a client so we can use some different options. I'd go for something designed for file transfer because you've got a similar case to me. What I did was have a server running as a dedicated SFTP unit as it was cheap. Then I use WinSCP .Net assemblies with certificate based authentication. If I need to replace certificates etc. I can do that when the client launches and checks for updates (which is all done through ClickOnce)
[The Career Programmer: Guerilla Tactics for an Imperfect World](http://www.amazon.com/The-Career-Programmer-Guerilla-Imperfect/dp/1590596242) AKA Survivor, office edition. Not a how-to of programming, per se, but rather a how to make a career of programming.
Go for it. *C# 5.0 in a Nutshell* looks like the most recent version. It's also a great reference book, and will be useful for you for a long time if you decide to stick w/ C#.
For C# I've recently picked up Apresses Pro C#5 &amp; .Net 4.5 framework and Microsoft Visual C# 2013. I start placement next month working with C# on Visual Studio, so got the Microsoft one to get familiar and the Apress one for reference. Both are pretty solid for delivering information whether your new to C# or migrating. 
Yeah I think I'll get this book, I just bought the yellow book tonight and have read 30 percent already, not really liking the style of it as it just seems way too slow paced thus far. I'm not really sure if books are my style for this sort of thing they all seem extremely redundant but perhaps thats good for someone with a bit less of an understanding than myself. 
I want to second the Game Programming Patterns book. Really worth the read.
Check the other tabs besides unread.
There are a few ways we have implemented this using Web API endpoints, depending on what you want to actually set up on the server. One way is to do it purely through Web API. In this implementation, we created some API methods that StartUpload(), UploadChunk(), and FinishUpload(). The StartUpload() method takes some metadata about the file you are going to upload, and goes about initializing the temporary storage for your chunks (we variously saved chunks on the file system, say under ~/App_Data, or in the database). Then you start uploading. Chunk the file into blocks (byte arrays of size N) and send them to the UploadChunk() method. This method will save chunk X to the initialized storage system. Call for each chunk, and when you are done you will have a bunch of file chunks saved as bytes. Depending on your chunk size, you may need to change your request limit settings. Depending on your versions of ASP.NET and IIS, there are a few different properties to set (maxRequestLength and maxAllowedContentLength). If you limit your chunks to 4MB or below, I don't think you will need to make any changes (unless the server already has these limits throttled down). Finally, call FinishUpload() to merge all of the blocks together into the completed file, name appropriately, and save to the storage system final location. Then clean up all the temp chunks. We also implemented one system that made use of a product called CompleteFTP. This is a commercial FTP server solution that supports both SFTP and FTPS. It also has rich support for programmable .NET events. Using this server (along with a client library such as their edtFTPnet library), you can do multiple async uploads to the server, complete with progress monitoring and retries. You can also trigger .NET code from certain events raised by the server. Using this, we hooked into the UploadComplete event (I forget the exact name of the event) and called our Web API endpoint to perform finalization such as moving the file to the appropriate location and making any necessary database updates. Since this entire upload process was out-of-band in this application, we then pushed an UploadComplete down to the web client using SignalR. You can also write extensions in C# for this server software to integrate with your application's authentication subsystem, so that you don't need to manage a separate set of credentials for the FTP server. I have also seen posts describing a way to do async chunked uploads using unbuffered request streams, but I have never tried that so I am not sure how that is implemented. I hope this gives you a few ideas to consider. Edit: added blurb about FTP server authentication. Edit 2: added blurb about request limits. 
Yeah Ops is using ints, I corrected and used bools
Clean Code is another one that complements the others on this list.
I already found the BigDecimal class written by nberardi but I thought there could be a more professional solution like a library or a framework. Something that has more than 1 contributor and not a work in progress. But if this was the only solution, I would use it. Thanks though.
Thanks for the info, really helpful. Here is the link for the Nuget C# wrapper for the 2 libraries [Mpir.NET](http://www.nuget.org/packages/Mpir.NET/), [libgmp_vc120](http://www.nuget.org/packages/libgmp_vc120/) if anybody needs them. I read in the description of MIPR.NET that MIPR is a port of GMP for windows so I think I will use that one. Again, thanks for the info.
Tried that. Still not there.
&gt; The reviews all seem to be great and I'm definitely buying a copy soon FYI a C#6 version is due later this year. I nearly went and bought the C#5 In a Nutshell, but it's ridiculously expensive where I live (over $100). When looking online I saw that it will soon be obsolete (well, it will be a bit behind the times).
I hate to be that guy, but does something this incredibly simple really need a whole blog post dedicated to it?
Generally you shouldn't be doing stuff with the views directly at all if you have everything bound via DataTemplates. You should be able to do everything from within your viewmodels though. If you need to trigger something from a child view model then you can often do something as simple as passing it a reference to its parent and then triggering something that way. It's hard to say for sure without seeing the context in which you're trying to do things. Maybe ask another question if you have a specific issue you want to resolve.
Hmm, I'd say the ship keeps references to all the different parts and then to the special systems like the fuelsubsystem, or shields, etc. Those would then be asked for fuel for example and delegate that to all possible tanks, which would then take an argument for how much fuel is wanted and then return how much they can give. Definitely a global service locator wouldn't work :)
If you don't have an accessible constructor, you can't construct an object. The "workaround" is to have an accessible constructor. I'm really not sure what your issue is here. Object initializers don't do anything special that would eliminate the need for constructors. It's just syntax shorthand for using the default constructor and setting the properties. They also don't *need* a default constructor, you can use any constructor: var obj = new Foo("a", "b") { Bar = "c" }; which is the same as var obj = new Foo("a, "b"); obj.Bar = "c";
CLRS is subjectively the worst book I've ever read- I'm not a mathematician, and it felt like 1000 pages of mathematical jerking off on a page instead of what I really wanted, which is pragmatic and easy-to-follow examples of algorithms, with a discussion of their benefits and drawbacks. The book should never have left academia.
"Modern" web dev aka MVC is stateless. Your talk about state reminds me of Web forms and its view state, If your forcing a view state onto MVC your doing it wrong.
&gt; I know a lot of people are a fan of CLR via C#. I understand it's very good, although I haven't read too much of it. But it's probably not what a guy who was reading Head First C# needs.
Also, if you disassemble generated string interpolation code, you just get String.Format, but with the benefit of not having to count the indices.
[They added new stuff](http://blogs.msdn.com/b/dotnet/archive/2012/08/28/evolving-the-reflection-api.aspx), most importantly [TypeInfo](https://msdn.microsoft.com/library/system.reflection.typeinfo%28v=VS.110%29.aspx).
I didn't say that the information was useless. I said that this is too basic a topic to devote an entire blog post to. It feels like it beats around the bush just to have enough content to cover an extremely simple concept that can be explained in a couple of sentences, even for beginners. If the post had more substance, and offered more than one could learn faster from a thousand different reference guides, then it wouldn't concern me.
I'm on mobile, I can't really show links. You could just use Windows Forms and have a textbox with text, and a Button. If the button is pressed, you create a new instance of a mail class(It's very easy to send mail with c#, try to google it!) and then send the mail!
Okay. I'll try that. First I need to build the interface.
Im going to pat myself on the back for knowing most of that and just not caring enough about the rest. Then I'm going to go back to rejecting PRs with code in the finalizer outside of the dispose pattern because that shit is complex and we aren't fancy enough to do anything more.
That's not difficult. you can use the windows forms designer. Do you have any c# coding experience?
1. Relax. 2. If you don't know an answer, try to reason it out a little. 3. If you still can't figure it out, say "I don't know." 4. Most problems can be broken down into smaller pieces, focus on one bit. 5. Show your work, if you demonstrate that you are on the right track, many recruiters are more willing to accept a wrong answer. 6. Relax.
This looks nice and I see how it would be immensly helpful. However the syntax looks somewhat clunky I'm not excited to write out essentially a bunch of boolean assertions before every method.
I know it's not difficult, haha. I have built quite a few C# apps in the past, but none that use mail. Thanks for the help.
&gt; If you don't know an answer, try to reason it out a little. I can't agree with this one more. When I'm conducting entry-level interviews and I ask a question, here's pretty much how I grade: A - Gives the correct answer and can explain why. B - Admits he/she doesn't know, but tries to figure it out and explains his or her thought process along the way. C - Gives the correct answer but can't explain why. D - Admits he/she doesn't know but doesn't make any attempt to figure it out. F - Gives the wrong answer and is convinced it's right.
All you need is a button click even that that runs the following code: using(MailMessage message = new MailMessage(new MailAddress("&lt;from address&gt;"), new MailAddress("&lt;to address&gt;"))) { using(SmtpClient smtp = new SmtpClient("&lt;mail server address&gt;", &lt;port#&gt;)) { message.Subject = "Subject"; message.Body = "This is an email!"; // Set SSL based on your mail server, most are true smtp.EnableSsl = &lt;true/false&gt;; smtp.Credentials = new NetworkCredential("&lt;account name&gt;", "&lt;password&gt;"); smtp.Send(message); } } You will have to have an SMTP mail server to send mail and credentials that allow you to send mail via that server.
My main thing when interviewing candidates is the lying side of it. For a trainee (pre-junior role I assume), I wouldn't expect much except basic understanding of SOME coding language. I would also expect them to understand basic input/output concepts, basic logic, etc. Nothing far fetched. Just don't lie. Say you don't know with what you don't know (even if it's everything) and explain the best of what you do know.
I have heard most of these items before, and Eric has now added new levels of paranoia to my understanding. Okay, finalizers are non-deterministic and not even guaranteed to be called at all. So what are they good for?
C# is getting to resemble dynamic languages and we should be worried because of the performance implications is what I guessed it was trying to say. Not a very convincing case made for that argument though. 
Amen to that.
Definitely reiterating what others have said, but just to drive the point home: **General Interview Stuff:** 1. Breathe and relax. They are not trying to trick you or make you fail. They are genuinely interested in you and your skills. 2. One of the best attributes of a great team-member is their willingness to say, "I don't know". This leads to discussion and learning. Pretending to know something only leads to continued ignorance of the thing. 3. Don't try to learn new things beforehand to impress them during the interview. Review the stuff you know well and be confident in that. 4. It sounds dumb, but wear something fun/special to you that won't be visible to them. If you're wearing a suit, wear a cool t-shirt underneath. I often wear my superman shirt under suits for presentations and such. It's a confidence thing. 5. If given the opportunity, talk about personal projects you've worked on or are interested in. It shows initiative and sets you apart as GanjaCrab rather than just another interviewee. **Skills Examination** 1. Know your logic flows, (if-then, switch, etc). 2. Remember to break whatever they give you down into pieces. Solve one thing at a time. 3. Don't be afraid to ask questions of your interviewers if need be. 4. Depending on the amount of time given, I often like to see interviewees go over their solutions a couple of times to refine their answers. If you're not satisfied with your first approach, change it. Good luck! 
BS. Yeah, comments can be wrong, but that's not a good reason not to leave them if they clarify what you're trying to do.
It's still not dynamic. Just syntax sugar. 
Well what about System.Dynamic, for instance? It does have dynamic features you can use if you want. Arguing over whether something is "dynamic" is ultimately frustrating and fruitless though, much like arguing about whether it's "strongly typed."
Just remember that "I don't know" is a perfectly acceptable answer.
Hrm. I suppose you could use ssdt and store versioned prebuilt dacpac files. These could even be auto deployed using sqldeploy via powershell. 
Eh, httpclient and then html agility pack combo to download the right (latest) db and then pass along the connection string to your dB context? All of it a pain in Powershell but it is possible
Specifically, unmanaged resources. You should not, without good reason, add a finalizer to a class that only contains managed objects. 
I loved this series, it was very insightful up until: &gt;Inform7 is amazing Eric pls. :(
It looks like you're using winforms? Am I correct?
Can you elaborate? What is happening? Exception? Are you stepping through the code to see if it's all being executed as you expect?
You can at least try. It's better than nothing. 
If you need comments to clarify what your code does then you need to write your code better.
I click the "send" button in the form, and it doesn't send anything or display a message box. It's supposed to do both of those things. It doesn't come up as an exception either. It was working just a while before that.
Really? I used to find it very valuable to collect OpenGL display lists using finalisers in OCaml. 
&gt; But how do they help you with unmanaged resources if you can't guarantee they'll ever run? I have found them useful for unmanaged resources that are equivalent to memory. 
&gt; You should not, without good reason, add a finalizer to a class that only contains managed objects. Why not? 
OpenGL's state machine is thread-specific and .NET's finalizer runs in a seperate thread where the OpenGL context is not available. Any attempts to free OpenGL handles in the finalizer will fail, but being OpenGL you would have to test with glGetLastError.
Because finalizer's purpose is to free unmanaged resources like file and DB handles for example.
&gt; But how do they help you with unmanaged resources if you can't guarantee they'll ever run? Because they pretty much always will run at some point. Several of the points in the article were to do with the process already exiting, where you don't care about resource leaks.
No, this is not possible. You could store the amount in a variable right before the initialization.
Or weak references...
Sure. You would need to handle threading to do the same thing on .NET but it wouldn't be hard to enqueue it and reclaim on the OGL thread. 
`Dispose` is used to free file and DB handles because they are scarce resources. 
So basically v5 is a mirror of node/npm...
&gt; &gt; the process already exiting, where you don't care about resource leaks. &gt; Because there won't be any, since the kernel cleans it up. Yes, that's what I was saying. You don't care about resource leaks, because you're exiting and everything gets cleaned up.
&gt; Managing yourself when all references are gone, then calling Dispose Manual memory management is the opposite of "transparent", of course. That is highly invasive. &gt; If the structure knows about references to it, it simply can check if it's referenced on every add / remove. My structure uses finalisers to know about references to it. 
Exactly the use case I was thinking! 
Of course, but the finalizer's goal is to be the last hope to call *Dispose* if the developer never cared to call it, either directly or indirectly via *using*. The problem in any GC implementation that offers such feature it that there is no guarantee that it will ever be called. Patterns like *using* or higher order functions are better approaches to deal with resource management.
I agree. The event handler doesnt seem to be connected. Go to the properties of the button and make sure the click event is button1_Click
Just set the background color to transparent. You can do this through the winforms designer, or programatically. 
Yeah, that jumped out at me, too. I think that statement warrants a deeper discussion of starvation and what the CLR does/does not guarantee.
I like the idea of code contracts, but I have never written any. How big is the overhead in terms of developer time? Is it worth it? How large should the application be to do this?
For some versions of this proposal, this is just a short hand for parameter validation. And parameter validation should be used in all projects beyond throw away.
doesn't work, visual studio controls render the background based on what can be seen on the parent-control. anything that is not the parent-control is being overshadowed.
Thanks, it worked! I'm getting about 20-25 bucks for this, so thank you very much!
Along with censoring your user credentials you may want to store them encrypted in a setting. Just makes it a bit harder to extract.
Is it the message box that's not opening? Have you stepped thought to see what's going on? You may want to install fiddler so you can watch network traffic too.
Four questions to get a relatively good windows developer, assuming you use the typical your existing knowledge would weed out those who don't understand standard OOP stuff 1) Describe a pattern you've recently used to call a slow running external service when a button is clicked to run it on a background thread and update the UI of its progress. 2) How would you go about starting a new project that's a Windows Service. If they include TopShelf in the answer you are in pretty good shape, or if they can at get through an answer while worrying they'll have to maintain one that's also a good sign 3) What are some non-Visual Studio tools that you'd use to debug and troubleshoot an app (e.g. fiddler, fuslogvw, wpf snoop, system monitor, etc) 4) Describe a time the FileSystemWatcher totally fucked you If they can do all four with relative confidence and they pass your smell test for good software engineering you probably have a good windows developer. 
Those are standard software engineering stuff which the op said he knows
I was looking for a way to avoid verbosity but loss like it's not possible.
Call me and we'll talk
The article's from 2010, so...
I like your question #4. An ftp server folder will fuck you up. There are also bugs in the operating system reporting file change events. I derived my own class from the watcher that takes away all the uncertainties of the watcher. I'm afraid for question #3 I could only point to Fiddler. Still, the last candidates I interviewed could not name the 4 access modifiers private, public, protected and internal. The last guy had a hard time with protected and didn't know what internal was. Wow, such weak candidates out there. I hope my luck changes.
As a guy who interviews developers as part of his job, these are absolutely terrible questions. *Describe a pattern you've recently used to call a slow running external service when a button is clicked* WTF kind of question is that? Talk to them about their programming practices, what tools they like to use, and what they look for in good code. Have them explain to you what they think might be some challenges with your project. Above all don't try to trick people with some bullshit code puzzle or question. I start all my interviews with, "don't bullshit me, I'll know if your bullshitting me", it tends to get me a more honest answer. 
I work in the real world as well, and we hit F5 and test our work. We don't write code for 4 hours and then see if it compiles. If you do that, your doing it wrong. Small chunks is easier to read and easier to debug. Also much easier to write unit tests against to ensure your doing what your supposed to. Anyone who thinks it's important to be able to eyeball modern code in notepad to tell if it will compile is not working in the real world. 
OP said he already knows how to interview and identify standard programming stuff. I was trying to give examples of specific windows dev things that your average winform or wpf person should be able to do with ease.
Given that the OP said he knows how to interview a developer already and doesn't know C# or Windows dev , I was simply stating some things to get a conversation going. I'm honestly curious what part of those four questions would be a crock of shit or standard HR bullshit about them? Building a windows service is hard and there are a lot of things to worry about. Creating a background thread and updating the UI isn't exactly hard, but you can learn a lot about someone from listening to them describe that process. Having them talk about debugging tools is a stepping off point into tricky problems they've encountered and how they solved them. Maybe I'm giving OP more credit about him knowing how to interview and should have clarified not to just ask those questions and write the answer down. But I figured that was a given
Recursively listing directories probably isn't what is slowing down your build script. Property functions get compiled into assemblies at runtime, which (currently) indirectly requires the execution of csc.exe. That may be what is causing the slowdown. MSBuild supports profiling, so start looking into that functionality. Now, to build each individual project file, you'll want to use the [MSBuild Task](https://msdn.microsoft.com/en-us/library/z7f65y0d.aspx). Read the documentation, it's pretty simple. Also, when you're extending your existing build system, don't rely on the solution file (.sln), because you will have very little control over the build process. Behind the scenes at runtime, MSBuild creates a temporary master build script from the solution file, and populates it with a bunch of default values that you basically can't override. It will take more upfront work, but writing your own build system from scratch will give you *much* more control.
I've been through many iterations of how to test that a developer can actually code, or at least isn't telling lies on their CV. The most effective way I've found is the take home assignment (which should not need them to commit more than 30-60 minutes over 2 days), and then interview those with good responses and talk over the assignment solution with them. What I'm hoping to find out is if there are specific things to look out for in a C#/Windows dev. What would they do differently than someone like me who's done Java and can write working C# code because they're similar? What information could I prompt for that might show they know the platform quite well? Much more than a dev like me who hits search engines or Stack Overflow to try to muddle through improving the app?
&gt; what tools they like to use What kind of responses would you expect to this from an experienced dev?
I would disagree depending on the type of code someone is being required to write. If writing service/server code which needs to scale, knowing the nuances of how IDisposable and Finalize interact can be vital. Simple example, each finalizer queue (one for each heap) is worked through serially one object at a time, whereas you can have many threads call IDisposable.Dispose() simultaneously. If your finalizer takes a long time to run, you can get into a situation when the gc can't keep up with the rate of objects being dereferenced and will eventually cause an OOM exception. Understanding the difference between a reference and value type can make a massive difference on how much time is spent garbage collecting. Also autoboxing can cause you some difficult to track down bugs as well as cause performance issues. If handling data coming from multiple remote data sources, knowing that a DateTime object doesn't contain a timezone offset but can represent datetime values in either the local timezone or UTC might be vital information. Knowing how these interact with a DB data source is very useful to know. I feel all three questions are reasonable for a mid-level developer to be able to at least reason about the issues enough to know when to double check the behavior when using any of the features.
FileSystemWatcher is super chatty. I can't recall a single time where it gave me reliable results without a lot of conditions.
The questions feel random, oddly specific to someone's personal experiences, and disjointed from one another. I wouldn't automatically disqualify someone for not having experience with the nuisances of storing time or not being familiar with a destructor (when most of .net is managed code). The ref/val question seems like a programming 101 question, explaining an OO concept. It all depends on what you are hiring for, but acing those questions is not an indicator of someone being a better programmer than someone that stumbled explaining unmanaged resource cleanup. 
&gt; I am an experienced Ruby/Java/Perl/C on Linux software engineer Java and C# are close enough. Code something up (something small) in either language, making it broken in several ways. Then either ask candidates to determine what's bad practice and discuss verbally, or have them spend 10-20 minutes making fixes and refactoring. 
Off topic, but I just wanted to thank you for being one of the people who gives take home assignments as interview material. As someone who just finished interviewing with a few companies, having a take home was so much nicer. Like you said, it didn't take me long, but I was able to pause and think about how I wanted to do it, and follow through. I would much rather have you see something reflective of my ability that I could take a few minutes to think about, rather than a piece of code I wrote on the white board in front of you in 2 minutes while panicking that you're judging my every decision. Thanks!
I wish I could apologise to all the candidates in the past that I made write a solution, however small, on the whiteboard. It's among the worst interview methods for verifying coding ability. I'm with you. You've got to find a way to give a candidate the best chance to show their ability, balanced with the limited time you have to evaluate what could be dozens of applicants. The assignment is easily the best of both worlds for me. It still excludes some candidates (some flat out refuse to waste their time on it, which is understandable), but it's generally been very positive for both sides in my experience.
&gt; I think it's more important to have questions which a dev needs to think to figure out vs questions which have "I know this or I don't know this" answers I wholeheartedly agree. "Trivia" questions don't often bear fruit. I've done that style of test in the past, hired a candidate that aced this test, and then ended up with a software engineer that couldn't build anything on their own without a great deal of guidance.
That's what pisses me off. Newbies have no problems with this, but "senior" or "manager" level candidates can't figure it out.
Now here's a bot that likely wasn't written with a bunch of spaghetti code cobbled together with bubble gum and duct tape.
I've had to deal with so many different systems, apis, etc. I know when to look it up and i know what I don't know. Most of all I've learned not to make assumptions about how something works based on how something similar works. I've done a ton a c# development and my peers consider me one of the more knowledgeable people in my greater org on c#/clr but you know what until about 6 months ago I've never had to deal with the nuances of DateTime and time zones and round tripable ToString. So I wouldn't have known that bit of trivia. Does that make me any more or less of a senior developer? I don't think so, but I guess I wouldn't have been qualified by your metrics. I guess it boils down to what type of engineer your trying to hire. 
I didn't ask for the nuances of DateTime's weird ass, pseudo time zone support. I asked if you know the difference between DateTime and TimeSpan.
That's what I did in my previous company. It worked much better than the ad hoc interviews I give now.
How big are the files? If performance doesn't matter and they're not huge then it's mostly just File Open,ReadLine loop, Split strings, clean delimiters, Write Line etc. There's fancy ways to do it, but not worth the effort if you don't need them.
Oh so wrong.... there are so many edge cases in csv's that get you in trouble... they seem simple at first, and then you end up in a quagmire of escaped fields, embedded separators, and a whole lot more that will slowly drive you off the cliff of insanity. Just don't roll your own csv parser, you will regret it.
Most C# devs swear by Resharper. If they don't use it that's fine, but ask why? Do they use any other productivity tools in VS? People stuck on VS2010 or below are possibly stuck in their careers. Discuss their CI tools (e.g. TFS Build, Teamcity, Jenkins, or whatever) Discuss their preferred test library (nunit, xunit, or even mstest) Discuss how they debug problems (VS built in debugger, WinDBG, Perfview, fiddler, wireshark, SQL profiler) How have they done logging? Nlog? Log4net? Something external like Splunk/Papertrail?) 
I usually use [Kent Boogart's KBCsv library](https://github.com/kentcb/KBCsv) for general CSV tasks. If you're talking 'big data' (and a lot of effort), something like Kibana, Elastic Search and Hadoop might do the trick, or you could bulk import the data into tables on a database and query based on that.
Having been in the .NET game for quite a while, I'd go as far as to suggest that you up-skill some of your engineers first. Pluralsight has some decent courses relating to C#, software design and framework specific things. I wouldn't bet on appointing someone whom initially would lack domain and (business) operational knowledge to rewrite your code base. Ideally you want someone who does what you do and has already solved the problems that you face. e.g. If the software is Windows Forms, look for someone who has a recent (long, 6 months+) history in building Windows Forms applications. The tools and libraries developers use/prefer are also a good indicator of experience and drive (such as Resharper, NCrunch, TeamCity, Mecurial/Git, * testing). I second that it's important that you're upfront about the work that needs to be done and the applicable timelines. Can you describe the framework/libraries and the type of project (Windows Forms, WPF, Web Forms, MVC, Web API, other)? It's possible that we may be able to give you some hints concerning best practices of what to use, which in turn could guide you to the right candidates.
It's a standalone app. It uses GalaSoft MVVM and WPF with XAML for the UI. Otherwise it's pretty much standard .NET libraries. It provides and also uses web APIs for communication with a web application. It's a few years old and has been through a few iterations. A portion of it started life as a VB.NET application targeted for Windows CE(!). It was ported to C# using some tool apparently (I didn't get the full details). There's still some vestigial VB library use in a few parts. I've replaced VB use with equivalent C# as I've come across it. Does this information help? I feel like a total noob trying to describe its technology stack, it's just so foreign to me. Really like the C# language and LINQ in particular though.
Using the debugger in Visual Studio Community Edition is free and will give you about 80% of the functionality. It's not "live" while you type, but you can step through the code line by line and add "watches" to see the values of your variables change as your are stepping through it.
if you use edit and continue than the workflow comes really close
I'm much more happy with OzCode and NCrunch.
Then you may have missed out on some good candidates.
What do you think of Java.. Ha? Why don't you give them a couple of classes to refractor and ask them to get back to you in couple of days?
Creating an object *always* requires a constructor. When you do not define any constructors for a non-static class, the compiler will automatically create a default constructor with no arguments for you, but there is *always* a constructor for a non-static type.
Yehh.. I know there is no magic... but the title just happened, and I found it interesting, so used it. Actually nothing is magic in the word of computers/programming but sometimes abstractions gives a feeling of MAGIC. Or you can say all the real world magics are actually abstractions showcased by magicians. :)
No offense, but if you find "magic" in the difference between constructor-based initialization and property-based initialization, I would hate to see what happens to your face when someone jingles their keys nearby.
This article does not appear to contain any information other than a really long winded way of saying "You need a constructor to create an instance", which you apparently learned two days ago in this sub. I don't mean to sound like a dick here, but you seem to barely grasp the basics of C#. Yet you're writing and sharing "tutorials" which are not only useless to any somewhat experienced C# dev but also potentially confusing or even misleading to beginners.
In option 1, should it be something like: this IDbSet&lt;User&gt; set, otherwise I don't see how this would compile: set.AnyAsync(user =&gt; user.Username == username &amp;&amp; user.Id != userId, cancellationToken)
Microsoft is going ham with their opensourcing and it feels like there is more to be unveiled. I mean, sure, there were OSed projects before, but now it's taking a totally different turn. The only thing about this that keeps escaping me is their corporate goal. 
&gt; for the most part everything in a Unity game inherits MonoBehaviour. When making a poorly-designed game, that's absolutely true.
Wpf source coming soon 
Even though they now support third party platforms, it will probably have positive net effect of people tying in to Microsoft's technologies. Also, a good chunk of those people will probably be leaving behind Oracle's Java.
Some brave folk are having a go: https://github.com/grokys/Perspex
I'm not sure to tell you the truth. Without seeing your code it's hard to tell but that seems like it should have worked. You might have to end up doing some databinding or something. At the very least try it with the window dispatcher first and see if it works.
Most libraries are easier than File Open,ReadLine loop, Split strings, clean delimiters, Write Line.
When you interview, you don't just test one area. Those questions are insufficient on their own to decide how good a developer is, but they do help to answer the question. If someone claimed to be developing in C# for 5+ years and were unaware of the potential problems with auto-boxing value types (and this is a lot bigger issue in C# than java as C# can have composite value types) I would be concerned.
&gt; anyone have a good tutorial I don't disagree with you, but his stated purpose is to learn something about importing CSVs and he mentions his newness to this type of problem. This is a good opportunity to learn something, if nothing else, what you're handing off to someone else's code to solve. If you just throw a library at every problem then 1) you are just black boxing your problems away and you learn little about coding 2) you are adding sometimes unnecessary dependencies to your solution 3) you're investing time in hunting down libraries, vetting them, reading docs, etc. implementing with a library can be fast, the process around that often isn't 
Scott has specifically said that's not being open sourced. It seems like someone high up as MSFT doesn't want to OSS WPF and silverlight. Rember moonlight is licensed so you can't run it on Windows because of patent reasons.
I don't think it'll take a couple of years, I think by the end of 2015 it'll be stable enough for production use in most cases. The whole idea that even the development platform you're using works on an agile basis is a daunting but fantastic one. No more of this build an app using tech from today and getting stuck with it for the next 10 years, your app and your tech constantly iterate and move forward. It could be a disaster, but it could be amazing.
You are correct. I'll update the post soon.
What is the future of WCF? There was basically nothing released with .Net4.6 and the future direction appears to be WebApi and not the old WCF based stack.
This is a Visual Studio extension.
If you choose PHP and have no clue how to use it, you should use a framework (like laravel or symfony). Many people don't understand how to use PHP and just say that they don't like PHP
If price and time are non-factors, then go C#. You're most likely going to get higher quality work from better developers. There are good PHP developers, don't get me wrong - Facebook is built on it, but the community tends towards the lowest common denominator, and you're just as like to get an idiot spamming WordPress plugins at a problem as not. EDIT: Then again, you might get an idiot spamming NuGet packages at a problem in the C# world too.
I was recently at their Azure bootcamp. Basically Microsoft's strategy is to become the most appealing cloud provider. They are doing this by open sourcing everything, such that it gets ported to other platforms like OSX and Linux. Provided that their tools, languages, etc. work best with Azure, it is very strategic to get it all open sourced. It will encourage people to move their stuff into Azure. Azure supports Linux VMs, node.js, Python, etc. in order to attract those developers to the platform. If Microsofts products get adapted by the open source community , it's a massive win. So for WCF, someone who picked it up while developing on Linux has a natural progression into Azure to host the web service. I'm sure there is far more to this, but this is what I managed to pick up.
You need a more structured mind to use PHP because the language lack structure, but I love that freedom.
Perhaps excuse my ignorance, but what is **auto**boxing in the context of C#? I know it exists for _Java_, and I know the concepts of [_"boxing"_ and _"unboxing"_ in C#](https://msdn.microsoft.com/en-us/library/yz2be5wk.aspx), but I'm not aware of the concept of (or at the very least, the term, if misapplied) _"autoboxing"_ in C#. EDIT: Doing some research, if this is simply applying Java terminology to C#'s concept of boxing (e.g., `object myBoxedInteger = 1;`), then I can definitely forgive a C# developer for not knowing what _"autoboxing"_ is since it's not called that in C#. If it's something else entirely, I'd like to understand it.
Well trying the dispatcher didn't work. My code is pretty simple. I have a bunch of Canvas objects to layout how the screen will look (absolute positioning via x/y and size via w/h, all values coming to me in JSON). The ticker that comes in just reads from a local file and displays text, using a doubleanimation for movement. The other area is a 'playlist' object. Basically it's a canvas that has a timer and reads it's own JSON to see what goes in that spot. The code for loading images can be found at http://pastebin.com/AZ0q7077 So while the whole thing is running, the playlist timer might be set for 10-15 seconds. After that, it removes the current content. I have an event subscribed, upon removal of children controls it goes to get more JSON, then parses it for the next content to fill. It only skips on images. I dunno, the whole image loading asyc thing seemed more intuitive in other graphical frameworks like WinForms. Using dispatch.begininvoke seems like the clear answer but it tries to display a null Image control which causes the whole thing to reset (I have it that if the parent canvas is closed, it launches a new copy). 
Yeah a lot have suggested that book I'll have to get a copy of it
Your statistics and reasons of WCF usage are very made up, sir.
I haven't had to deal with low-level sound editing in .NET. Perhaps there's an existing helper library you can use. I found [NAudio](https://github.com/naudio/NAudio) ([documentation and samples](https://naudio.codeplex.com/documentation)) which looks like it provides APIs to read and modify the waveform data.
No, but Valve OSed their DX -&gt; OpenGL translation layer, and there's nothing stopping others from doing that as well. It may not be as performant, but could be a decent stopgap measure. As long as they OSed the DX *spec* (which is really what OpenGL is too), others could reimplement it. Either way, I don't believe DirectX will stay closed forever. I don't think it plays into their long-term plans anymore to keep it closed, and it doesn't really even afford any extra protection to platforms that rely on it (like Xbox One). XB1 and PS4 both use AMD APUs that are very similar (GPUs based on AMD Radeons) so even that product line isn't locked strictly to using Microsoft's APIs anymore. I'd like to see them OS WPF and see how long it takes someone to stick an OpenGL translation layer in the middle add get it working. :)
Ending was a bit abrupt. I have to say, when part 1 was linked on reddit, I started to type a comment saying something along the lines, "I'd probably over engineer it and build my own rules engine and store them in a database". But I deleted it, figuring I was going to be shown some neat way to have 'type checking' and business rules integrated. Or atleast the ability to compile the business rules when you compile the program and know if changes to one breaks the other, or fails to conform. Anyhow, end of the day, and I'm brain fried, so this isn't exactly coherent. I'd love to see the Rules Engiene idea explored. Including ways to integrate it into Visual Studio, with Intelisense and real time 'type' checking like behaviour. Last time I made a 'rules enginer' it was stored VBScript in SQL Tables that got called based on business objects doing their thing. Changes to one side of that wall ( the business obejcts ) would break the scripts, and changes to the scritps were shots in the dark that required full test to determine if they worked right. Each side seemed to be throwing code over a chinnese wall and hoping it worked. 
If you're a beginner working through an edit-compile-debug system as you would normally is indispensable for learning to think through your code and recognize problems by looking at the code rather than the output. These are skills that will make you much better, quicker, and more efficient in the long run. Not that shortcuts like this (or things like Resharper) are bad, but they will slow your development as a programmer. They're great once you are proficient at doing things manually by cutting steps out, but abstracting critical coding tasks away without knowing what they are and how they work can and will make you look stupid when they're gone. Also keep in mind Alive is not even released as an alpha version yet. Forking over a recurring $70 for a mature development platform on an individual license is a serious decision- for a plugin that literally no one outside of production of the pre-alpha has used, it's an outrageous proposition. It remains to be seen whether it's a worthwhile tool or just a mildly useful toy with a large price tag, so even if you're incredibly keen on playing with it I would suggest you wait until it has been through enough iterations to ensure its viability. At this stage you'll likely end up using it less for learn to code and more for how to create and submit bug reports.
You thinking of Visual Studio? :D That has some benchmarking functionality :)
Have you tried something else that is resource intensive? It might be something with the hardware.
I have animations on them to transition (fading from the current one to the next) so really it's add &gt; transition &gt; onComplete (remove all except new). Also, there's no promise I'll be showing an image next. Sometimes it's a video, sometimes it's web content so I can't just change the source.
Can someone ELI5 what this means for the development community? I realize that I probably shouldn't even be trying to understand this when I barely have an understanding of how to build a website, but I want to start learning, and now is a good a time as any.
If you're sure CPU or RAM aren't the issue, could it be IO? E.g. a network share that's slower to access from your machine? As mentioned in another comment, Visual Studio's performance analysis can tell you how much time is spent on individual methods, which might give you a better idea (although it might not be that helpful if too much stuff is happening in individual Ghostscript native methods).
For the love of god, don't do PHP. You will hate yourself for it later.
Seconded. Anytime I need to work with CSV, this is the first (only) package I grab. Works great with all kinds of delimited files, and has built-in mapper support. 
I think it also applies to autoboxing of value types, i.e. passing an int as an IComparable etc 
Are you serious? It's a pretty useful learning tool. 
Check your resource monitor in task manager. Under the Performance tab there is a button labeled Resource Monitor and click that. In the new window for CPU what is your Maximum Frequency. If you are running this on a laptop the maximum frequency could be downclocking. It will look like the CPU is using 100% but its really downclocked to like 30% of its capability. This happens to me all the time when running applications on a laptop when plugged in I have 100% of maximum frequency but when I am not plugged in it maxes out at 30% maximum frequency for powersaving reasons.
Have you tried rebooting? Is it getting caught by the virus scanner? What does disk io look like in performance monitor?
From a .NET interoperability perspective, it must be the Mex endpoint and proxy generation that I found most useful. I rarely use WCF, but when I do it's typically to integrate separate applications over a MSMQ endpoint for notifications (either application can be down and the message still be delivered). For a traditional windows client - server scenario, the endpoint configuration for full duplex designs are nice to have. E.g. switching between named pipes (for same server deployment), TCP and possibly even Web Sockets (unconfirmed).
I am using the standard methods that Microsoft is providing. If I am using them wrong, feel free to give me more details and I will be happy to update my code. Thanks for your feedback so far.
Bad sectors when the disk has run out replacement sectors will behave like this. The only solution in that case is to replace the disk.
thanks for your feedback. I tried to use a longer byte array than 32, which lead to an ArgumentOutofRangeException. I understand that using only the part of the PSK bytes is throwing away security, but a randomly generated Guid, saved in an encrypted space of the OS where only my app has access to seems quite secure to me. I will have a look into the key derivation you mentioned, and also into updating my code to make it more secure if this has a true benefit for my use case. 
Because the de facto standard is the worst excuse for a parser you can find. It doesn't create an AST, it doesn't support unicode (and the effort to implement it in PHP 6 failed) and it cannot parse completely sane expressions such as `(foo)[0]` and until recently `foo()[0]`. It allows conpletely ridiculous things, it cannot disambiguate between a string that is a hex number and a base64 string staring with 0x. It thinks null is false, "0" is true and "0" is null. The documentation claims that a segmentation fault is a valid result from clone() and the program should keep going no matter the severity of the error. It's slow, it's ugly, it's verbose. Anyone opting into PHP at this point is making a big mistake in my opinion. The only reason why PHP got popular is because it allowed code of abysmal quality to run, and it also had a big library of tools ready for use immediately. This appealed to the uninformed user as a fasttrack to being a web developer.
I think going open source is going to be huge for WCF. This removes a significant barrier to third parties implementing their own channels. For example, there's no reason why we have to deal with a totally different API for each message queue server.
WCF Client is coming soon FTFY
yeah....there is only one true way: write code.
No, no experience, I've just been keeping my eye on the Gitter forum to see how they are getting on. It supports depProps/binding, so yes, it supports MVVM.
Personally I've never used Azure (all the sites that I run doesn't need more than HostHatchs $15/year tiny VPS), but I see why it's lucrative. &gt;Open sourcing their development platforms reduces some of the past mistrust with Microsoft which should lead to more Azure customers. Not to mention the fact that it lets everyone running any OS other than Windows also develop for it. It not only decreases the feeling of lock-in, it increases their market.
Isn't Universal still WPF and XAML?
How do you use WebAPI for UDP communication? 
What do you mean? Microsoft is going to include WCF in their cross platform software?
They both give the same result, and in case for SQL they produce the same query. But the first is minimally faster, as there's one method call and one enumerator less. But that improvement is negligible. Pick whatever style you can read best and feels best to you and stick to it.
You normally wouldn't use a byte array. Audio files comes in samples usually 16-bit unsigned shorts. If you load the data in this format it is just a matter for doing normal arithmetic on each sample. // Add two streams into a new stream with the length of the shortest one. ushort[] src1 = GetSource1(); ushort[] src2 = GetSource2(); ushort[] dst = new ushort[Math.Min(src1.Length, src2.Length)]; for(int i = 0; i &lt; dst.Length; i++) { dst[i] = src1[i] + src2[i]; } return dst; It can be a little easier to process if you convert them to float, but it will take 3 times more memory and will go a little slower.
I prefer the first one. One method to write against two. By the way, why not using `Single()`for an ID?
&gt;I tried to use a longer byte array than 32, which lead to an ArgumentOutofRangeException. Yes, the key size is fixed. The way to turn variable length passphrases into fixed length keys (and IVs if required) is using key derivation function such as PBKDF2 which can take an arbitrary number of bytes as a seed for a cryptographically secure PRNG and then use that to produce the desired amount of pseudo-random bytes for a key. &gt;a randomly generated Guid [...] seems quite secure to me There are a few problems with GUIDs. For one, you don't know how they're generated. I suspect that Windows is just using a crypto RNG as well, but there's no guarantee for that and it may change between platforms and versions. There are other GUID schemes that are mostly deterministic based on the machine's semi-public MAC address, for example, and low-power platforms might use less safe RNGs. GUIDs are meant to avoid *accidental collisions*, they are not designed to be unpredictable or safe from brute forcing. Secondly, GUIDs are 128 bit long, but some of that is reserved for version information (6 bit I believe?). Moreover, the way you're turning the GUID into a string and then into a byte array means that certain bytes of the key are always the same. A GUID in hexadecimal dashed format is 36 characters/UTF8 bytes long, minus the version information, 4 dashes and the last 4 bytes which you throw away, you're only left with 27 random bytes in a 32 byte key. And even then the remaining bytes aren't completely random because they're all hexadecimal characters between 0 and F, so you really only have 4 bit of entropy per byte, i.e. ~108bit of entropy instead of the supposed 256 bit in a 32 byte key, which is [a *huge* difference](http://www.wolframalpha.com/input/?i=2^256+-+2^108) of possible keys. &gt;I will have a look into the key derivation you mentioned As I said, this step is unnecessary if you just use a crypto RNG to generated 32 random bytes from the start instead of the GUID string stuff. Store that key as base64 like you do for the asymmetric key. This is probably a better and simpler solution because you don't actually need arbitrary passphrase strings in your use case. &gt;updating my code to make it more secure if this has a true benefit for my use case. Perhaps you don't *really* need a secure solution for your current use, but doing it right isn't actually any more complicated than doing it wrong in this case, and you never know where your code is going to turn up 5 years down the line. I personally think that, despite your disclaimer, you have a certain responsibility to give good advice, *especially* when you're writing crypto tutorials. There *will* be a bunch of people who repurpose this code without really understanding let alone checking it, and these kinds of mistakes can spread like a disease when they get copied around the web and reused as easy drop in solutions.
Congratulations on being the 1%. Most people just use WCF to host SOAP-based web-services which they create SOAP-based clients for. At which point WebAPI would probably have worked just as well, without the need to create a secondary API for Javascript-based clients.
Have you tried with the older PS files that used to run fine? Maybe something changed in the PS files' format.
Use either or a combination of [Process Monitor](https://technet.microsoft.com/en-us/library/bb896645.aspx) and [Process Explorer](https://technet.microsoft.com/en-gb/sysinternals/bb896653.aspx) to find out what your application is doing at the moment of the slow-down. *Process Explorer* can show you all the threads of your application and which Win32 or other calls each thread is making or waiting on. *Process Monitor* will show which files, registry keys or other system resources your application is querying/reading/writing.
Single() is slower as it iterates over the whole enumeration to ensure only 1 thing matches the predicate. So really it depends on where you are choosing to enforce the unique id constraint. Normally I wouldn't enforce that constraint in each linq query I make, but really it's horses for courses - I'm sure there are some situations where this would be exactly the correct behaviour. Edit: spleleling.
Thanks for this. I'll play around with Find().
Asp.Net MVC/C# will most likely be a cleaner more extendable solutions. However, it will be more expensive. The problem with PHP is that any solution will most likely be "hacked" together and it will be harder to find good developers because anyone who has worked on wordpress says they are a "php developer".
I can use forms or wpf. thanks though
&gt;I can use forms or wpf. So it might work then? There are core versions which don't rely on GDI+ so you're not tied to winforms or other graphics libs -- meaning it allows for many more usage scenarios other than winforms. There's also a wpf version. Check their package manifest. http://www.pdfsharp.net/NuGetPackages.ashx
updated the sample project, blog post is temporarily taken down.
Upload your "source"? It's probably something with your setup and not the project itself.
ok. can you make a video of that so i can see how fast it is? i had clean install Windows 8 and just installed VS 2013
Yeah ITextSharp did the trick. Thanks
&gt; ITextSharp Great. The comments on the lack of documentation... Ouch.
Why is more important than what. Why does your code convert only uppercase x's and o's and return ' ' for everything else? You may want to check out the char.ToUpper() and char.ToUpperInvariant() methods that might simplify this, too.
 static char OX(char c) { var upper = char.ToUpperInvariant(c); return (upper == 'X' || upper == 'O') ? upper : ' '; } //Edit* static method, not instance...
Yeah. Oh well back to testing I guess. I think I need a better grasp of layouts, but I know I can't reuse the objects I'm creating so obviously I have to use the Invoke methods more intuitively.
Are you doing work on the UI thread, like reading status from the network ? Do you have a lot of data and poor data structure usage? Do you save data to disk and read it into the UI on the UI thread? Are you constantly updating UI elements thousands of times a second? 
"No overload for Method 'ToUpperInvariant' takes 0 arguments" not sure what this means
see edit
I am on 4, so I'll have to look at that as well.
&gt; I did not made any codes yet. i just drag and drop to make this design. i compiled my program without any codes and run it on other computer and it stil very slow. He hasn't written any code yet.
WRT the pay differences, the next time you're looking for a job, do you want C# or PHP on your resume? 
post and code updated.
My own windows forms slowness usually relates to [DataGridView](http://stackoverflow.com/questions/118528/horrible-redraw-performance-of-the-datagridview-on-one-of-my-two-screens), but it appears [TableLayoutPanel](http://stackoverflow.com/questions/8900099/tablelayoutpanel-responds-very-slowly-to-events) is affected by similar problems, if you're using that at all. Forcibly enabling double buffering works for some. Otherwise they draw directly to the screen, one operation at a time, and anything that introduces a per-call delay causes a huge slowdown. I only seem to run into the problem when I have two or more .NET apps running at once (or one app and the sql server management studio). [Nvidia](https://social.msdn.microsoft.com/Forums/windows/en-US/879ab314-07b2-484e-989c-5661e5bc234a/datagridview-painting-extremely-slow-on-new-pc?forum=winforms) users seem to be more affected.
I ran another program I wrote that: 1. Computes the hash for all files (3000+) in a given directory. 2. Replicates the folder structure for all sub-folders in the source directory in another location. 3. Copies all files to the new directory. 4. Computes the hash for all of the files in the new directory. 5. Compares the new hash values against the old hash values to ensure that all file copies were successful. The size of all the files copied totals to about 70MB. This ran quickly without any issue. Would this be considered resource intensive, or should I use a directory with larger files? I will be posting a shortened version of my source code to give some more context shortly.
I'd consider renaming your function: "OX" doesn't really suggest what the function is for. If you can come up with a good name, chances are you won't need to add a comment.
I have rebooted countless times since this issue occurred. I don't think it's a virus scanner issue, because I had some co-workers on site run it on their computers (managed with the same security settings as my PC) and it runs without issue. I can't really see the details on the disk IO, as IT doesn't give me permission to view the "Resource Manager." As far as I can tell, the only things I can monitor are the CPU Usage and Memory.
I don't think that this is the issue, but I will try with both the old PS files I was using, as well as a fresh batch of PS files, and update with my results.
Completely agree with the why rather than the what. To that end you should call your method something more meaningful than OX. And you can use a case insensitive StringComparer rather than converting to uppercase.
I will update here in a little bit with relevant portions of code, as well as the exception that is being given. I will also put in some timers, but I am updating the UI frequently with the task that is currently being executed, so I'm confident that I have pinpointed where the issue is occurring. I am using an HP EliteBook 8770w. I am plugged in all the time, and not using a docking station at the moment. The issue didn't necessarily work one day, and stop working the next time I booted my computer. I was actively debugging in VS when the issue came up. I ran it a few times, with no issue. Then, I ran the program, but the section in question started working slowly (about half as fast as it did the previous run). The next time I ran it, it ran even slower, and continued like this for a few more runs until it wouldn't run successfully anymore.
In regards to your IO question, see my reply to /u/badcookies comment in this thread. I will put in some performance analysis and update with my result, but the slow down is occurring in the Ghostscript native methods like you mentioned. While my program is running, it is constantly updating the UI, so I can see exactly which portion of the code it is trying to execute when the issue occurs.
The problem is, I would need more context; are you writing a tic-tac-toe game and these are the only valid symbols.. are you drawing a graph using Xs and Os...? Ideally, a user of your class wouldn't need to look at any code to get an idea of what the function's purpose is.
Neither tool requires installing, and they can be downloaded directly from http://live.sysinternals.com/ You're a software engineer, and your IT will not give you local admin rights to your own computer? I have never worked anywhere that I couldn't at least get local admin privs, light a fire under IT's ass if you need to, take the issue to your manager or director or whoever, the requirements of a software engineer over their own system are not the same as any other computer user Edit: I'm angry for you at such a ridiculous limitation
That seems more like an IO bound task, try doing something that is CPU bound :)
Use WPF. Problem solved :) 
First things first: execute long-running operations as `Task` or `Task&lt;T&gt;`. By default, *all* of your application code is run on the UI thread. For very quick operations, this is fine. However, the more work you do on the UI thread, the more likely it is that your application will appear to slow down or be hung (since the UI thread isn't being dedicated to UI updates and rendering). Make sure you use the appropriate UI dispatching method (usually `Control.BeginInvoke`) when updating your UI from a non-UI thread/context.
If that's the case why are you checking if the String is "X" or "O" if those two symbols are the ones used? Are you letting the user type in a String? As a coder you need to think why do I need this function and what is it used for?. If you can't explain these questions to use then it will be hard for us to help you....
Right on. That's what I figured. My guess is they are probably the same system or at one point were and then the Universal is just next version wpf. My guess is there are contractual reasons or potentially Intellectual Property that they are still making a financial bet on. My guess is contractual reasons with hardware manufacturers or some other legal reasons. 
So I'm wondering how many of you will call my crazy or think this is too complicated. Here are the constraints to this project: REST API (Server) will only be used by the Software Development Kit (Client) Backend storage will be abstracted from the Client, it will not know of nor care how the data is stored and the only interface it has is the Server. No single use URLs can be used. Only supported protocol will be HTTP. Issue: IIS only supports requests &lt; ~4GB, there is no way around this a single request cannot be larger than 4GB. Solution: Websocket streaming of the data. Because the websocket is an async channel that an individual request is not handled in the same way.
I only have an HTTP channel, won't work for me, but thanks!
I know WCF *can* do a lot more than WebAPI. That's its entire reason for existing. But that means it has to accommodate a lot of things you wont need for a typical web-solution. What I'm saying is that most uses I've seen of WCF could be handled by WebAPI alone, and better.
Something home-grown. Don't use it. Use one of the ones from System.cryptography as they have been extensively tested. 
You were right about the temp files. I put an explanation in the original post as to what the issue was, and how I plan to remedy it. Thanks for the suggestions!
Does the same problem exist with a self hosted wcf service? Katana and owin are your search keywords for more information.
Probably because you have around 200 controls on a tab, i have no doubt there are another 200 on the other one.
Designer struggled with it a little, but actually launching the app didn't have any problems. My only recommendation is to pull all of the groupboxes (and their child controls) out, and make a custom control. (It'll also make it easier to maintain since you won't be having to make the same change in 15 different spots. Also, for what it's worth, don't include your assemblies (aka the junk under the bin folder) when sharing source. 
Well it wasn't running out of space on the drive, just space on their temp algorithm. Interesting. Well either way, I'm glad I could help point you at something to look at, and it worked out! Great. I have had this issue with various libraries. Sometimes we have missed a configuration option that controls the cleanup. Sometimes we have missed that the class in question implements IDisposable, and that is what triggers the cleanup. Sometimes (especially if you are reusing) cleanup doesn't happen. And sometimes there are just bugs, as you said. :) If it's none of those other things (I'm not familiar with the library), then as you said, writing your own cleanup is a good way to solve it. I have my share of sites and apps that have a CleanupTempFolder() method. Anyway, like I said, happy that you found the issue!
Ok, where would that be? I thought it gave the myPlayer.Attack a value of 500? edit: and wow. Thanks for going so far to help me haha! double edit: WHOA. Ok, so I see where you're talking about. So how can I give the player a .Attack value while still giving it the class (mage, I mean) and name that the user inputs?
I think I was mixing up nomenclature from different programming environments. In c# terms, it's implicit boxing that I was referring, but I had in mind a specific type. A normal implicit boxing looks like this: object myint = 5; In this case it's obvious that the integer value type with a value of 5 will be boxed. But what if you have the following scenarios: public interface IMyInterface { void DoWork(); void DoMoreWork(); } public struct Simple : IMyInterface { public int Foo; public double Bar; public void DoWork() { Foo++; } void IMyInterface.DoMoreWork() { Foo++; } } class Program { static void Main(string[] args) { Simple mySimple = new Simple(); Console.WriteLine("Simple.Foo = {0}", mySimple.Foo); mySimple.DoWork(); Console.WriteLine("Simple.Foo = {0}", mySimple.Foo); DoSomething(mySimple); Console.WriteLine("Simple.Foo = {0}", mySimple.Foo); ((IMyInterface)mySimple).DoMoreWork(); Console.WriteLine("Simple.Foo = {0}", mySimple.Foo); } static void DoSomething(IMyInterface someobject) { someobject.DoWork(); } } The output from this code will be: Simple.Foo = 0 Simple.Foo = 1 Simple.Foo = 1 Simple.Foo = 1 The first line is simple, Foo is an int and it is initialized to 0. Then DoWork() is called which increments Foo so the second line is obvious as 0+1==1. The next item might be something you are already aware of. The method DoSomething is expecting an IMyInterface. As the compiler is creating a single method which is unaware of the actual type being passed, it needs to generate code which works against the interface. This involves a virtual method call so presumes a class is passed. Even though it's the same interface as the call to DoWork() in the Main method, the compiler has context in the Main method to know it's always going to be a struct of type Simple. This means it can emit the instructions necessary to call the correct method on the struct which is done a different way than if it were a class. But in the DoSomething method, it can only emit instructions treating someobject as a class. So the compiler must box the Simple struct into a heap object which involves copying it. When DoWork() is called inside the DoSomething method, it's acting on a different instance of the Simple struct than exists in the Main method. So when Foo is incremented, it's incremented in the copy. When DoSomething returns, the original Simple struct is completely unmodified so Foo still has a value of 1. Then I call DoMoreWork() on mySimple, but this method has been explicitly implemented which means the method isn't visible on the type Simple. So the Simple struct must be cast to the interface first. As the DoMoreWork() call is now being made against an interface and the original type information has been hidden at that code point, the compiler must make a virtual method call in the same way that the DoSomething method did which means a copy is going to be made again. Basically the extra difficulty with value types in .Net compared with java is that they can be mutable. In java, an integer value 5 is always going to have the same value, and it can't be changed so you can box it, pass it around and unbox it as much as you like and it doesn't matter that you have copies of it as you can't change the value. In .Net, if you box it, then modify it, those modifications will be lost. These can be very hard to track down bugs which is why you need to be aware of when they are boxed and when they aren't, and how to avoid boxing (e.g. using ref modifier on method parameters). 
if you want different stats for different characters you could do something like if input is mage new Player("Name", 300, 200); else if input is warrior new Player("Name", 600, 120); so in the method where you get the input for mage/warrior etc, you could try returning the new character object instead of returning a string
ok, i see what you're saying. So something like static void setUpCharacters() { if (classChoice == 1) //get name from user Mage myMage = new Mage(name, 500, 100) } I'm just not sure how to get the method to return an object
Eh yeah, that's why it's important to use value types wisely. I wouldn't consider using value types "difficult" in C#, but I do agree that they're easy to be misused by novices. Probably another reason why designing data-holding types to be immutable is a good practice. Personally, I haven't been bitten by boxing issues, but maybe I got lucky in that I learned about boxing and its implications early on. In my day-to-day usage of value types, I mostly them only for raw (usually immutable) data. I'm not even entirely sure if I have _any_ boxing in my code at my job; I can't recall off the top of my head any points in which I treat them as an `object` or as interfaces. (I don't think any of them implement any interfaces) I do notice that value types seem to be taught early on in C# learning materials, which I personally don't quite agree with. Or at the very least, most teaching materials don't cover best practices and pitfalls with them very well. I would agree that a C# developer of five years probably ought to know the basic concepts of value types and boxing. But I might be lenient depending on the kind of development work they were doing; I could imagine boxing (and its finer implications) not having come up for some development work.
Asp.net With C#
TIL what goto is (thought it could be useful) and then u found out it's bad practice.. D:
Yes that is certanly the way to do it, but the problem that i have here is that im using 2 classes for each class that i have because i need class derivied from MonoBehaviour so that unity will be able to see it and i need a controller - native c# class so i can test the logic. The reason i went with generics is that it allows me to be lazy and initialize the Controller in BaseUnitModifier so that i wont have to get it set up in every attack class from scratch. **So i suppose better question to ask is:** Why do i have to specify the generic class like here BaseAttackAlteration&lt;BaseAttackAlterationController&gt; If all the derieved classes from it have the generic specified and The BaseAttackAlteration itself is abstract? Is there some kind of constraint for that? 
&gt; this.HumanPlayer = new Player( **name:** name, **choosenPath:** choice ); Oh, those are just "named parameters". Mostly just for us humans' benefit to read the code, although they do allow you to pass in parameters in any order you prefer.
How could that work? Like that? public T property { get; set; } But for that property i need a field somewhere protected T propertyField; And for that i also need a class generic for it :|
Take a look at any assembly or il, it's all goto under the covers, the trick is not let us meat machines to code any :)
Yeah, useful advice, but the thing is that he sais he has wrote zero code yet. Nothing outside UI editor done.
Give each base class an interface. Store a property of the interface instead of T.
Thanks for your kind words. I reckon the extension method pattern is the safest going forward for EF7+. It's rather odd, but satisfying, that they are dropping the EDMX file. I can only imagine the frustration it will cause because most beginners use model or database first (because of tutorials) and some tools such as Entity Developer generates EF models via .edmx. The code-first approach allows you to create a disconnect between the database model and entities which allow for some interesting options.
Thank you so much for this. I published it so quick. Apart from one minor issue with font files it all works great. Thank you for the quick response.
The routes are evaluated in the order they are registered. It looks like the Default/Terms/Privacy routes are using the same url, hence only the first registered "Default" route takes effect. As per /u/noobzilla's suggestion, you should be able to access the PrivacyController's Index via /Privacy/Index or possible even via /Privacy/ considering Index is the default route action for the Default route. The correct ordering would be: // access TermsControler/Index via /terms routes.MapRoute( name: "Terms", url: "terms", defaults: new { controller = "Terms", action = "Index" } ); // access PrivacyControler/Index via /privacy routes.MapRoute( name: "Privacy", url: "privacy", defaults: new { controller = "Privacy", action = "Index" } ); // access ServicesControler/Index via /services routes.MapRoute( name: "Services", url: "services", defaults: new { controller = "Services", action = "Index" } ); // access ErrorControler/NotFound via /404 routes.MapRoute( name: "NotFound", url: "404", defaults: new { controller = "Error", action = "NotFound" } ); // default route (last) routes.MapRoute( name: "Default", url: "{controller}/{action}/{id}", defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional } ); You could also do the following to group the pages under one controller: // e.g. /Terms on PageControler/Terms, /Privacy on PageControler/Privacy etc. routes.MapRoute( name: "Page", url: "{action}", defaults: new { controller = "Page", action = "Index"} ); // .. not found route // .. default route (last) For the 404 not found error page, you should modify your web.config in addition to creating the route: &lt;system.web&gt; &lt;customErrors mode="RemoteOnly" defaultRedirect="~/404" /&gt; &lt;/system.web&gt; This will redirect 404 errors to your custom page - no need to use a splat match ({*url}). The HandleErrorAttribute Global filter by default uses the shared view ~/Views/Shared/Error.cshtml. You can specify your own view name if you wish, e.g. ~/Views/Error/InternalServerError.cshtml. Note that in the case of a page not found (404), you want a redirect, while generally for an internal server error (500) you want a page rewrite. The custom error pages setup can make for a nice blog post :) Note on the ErrorController that you can't use { action = "404" }, because C# won't allow you to start a method name with a number. I personally prefer the [AttributeRouting NuGet package](https://www.nuget.org/packages/AttributeRouting/) over the new attribute routing in MVC 5 due to route ordering and other options available in the AttributeRouting NuGet package. Unfortunately it seems the [documentation website](http://attributerouting.net) seems to be down. You then just annotate the controller actions appropriately, e.g. [GET("services", RouteName = "Services")] public ActionResult Services() { ... } In the RouteConfig add just after routes.IgnoreRoute(): routes.MapAttributeRoutes(); // scans this assembly and creates routes as per attribute routes // .. default route (last) - if necessary
I have no experience with Unity, but I would look for a solution as to how use nested Generics there. If that really doesn't work (I doubt it) you might want to look at the [Strategy Pattern](http://www.dreamincode.net/forums/topic/185426-design-patterns-strategy/) as an alternative
You click the run button... It's got a green play symbol on it. Alternatively just press F5. Or right click on the project in the solution explorer and in the bottom part of the context menu there will be an entry for starting it.
The op doesn't know how to publish a web site or how to find the answer to his own relatively simple problems. It sounds like a perfect fit, actually.
Refactor your factory. It's doing too damn much. Or, do some kind of code generation, either T4 templates, Razor templates, or what-have-you. Also, take a look at: http://codeblog.jonskeet.uk/2012/01/30/currying-vs-partial-function-application/
Not answering your question, but your code reminded me of the following article which was on /r/csharp a few days ago. http://ericlippert.com/2015/04/27/wizards-and-warriors-part-one/ Thought it might be useful to you.
If what you wrote is representative, your factory doesn't seem to do anything that the commands' constructors don't do. It just does the same things without static checking. If the ellipses are standing in for significant code, then you could replace the factory class with static factory methods (with real parameters, not `params object[] args`) on each command class.
&gt; currying effectively decomposes the function into functions taking a single parameter. Then I should probably subclass the factories then. I was trying to avoid this since I'm sure, later on, I will need to refactor multiple times, trying to get it right. I guess that is a common problem with factories?
noting wrong with my OS or .NET. my OS was clean installed 1 month ago. it is also happen on other PC without anti-virus
so... i don't really know what to do. i simply drag and drop thing in Windows Form the guy said on stackoverflow "On second thought, there's almost 200 controls on there, and on winforms that's 200 window handles receiving WM_PAINT messages to ask them to render themselves. I'd switch to WPF if you want to improve on that, IMO it handles large numbers of small controls better"
That documentation section is not intended for starting to learn C# - it is more of a reference guide and not a tutorial. Here is a better MSDN C# getting started page (especially the first two learning links): https://msdn.microsoft.com/en-us/vstudio/hh341490 
You should look at using the abstract factory pattern. Put the factories in a map (a member of your CommandFactory) and look up the type you want built. If the factory isn't in the map, create it using reflection and put it in your map for the next request. When you retrieve the factory you need, use it to build the type you want. Another problem with your design above is that it's useless. If you know 'T" then just call new. Otherwise, you should be asking for a base type and let your command factory figure out which derived type you need to build. 
That's what documentation and open source code are for. Read and learn.
I don't think you actually want help. Nearly all the advice people have given you have bucked back or asked for a proof. Why are you asking for assistance if you are not interested in it? Clearly there is something wrong with your setups. WPF will not magically fix you though I do like it over WinForms.
Visual Studio Community Edition (essentially VS Pro 2013) is free. They could just download it if they need to open your project.
This is I think the best place to start. Bob Tabor explains things very well and paces the course (free) to suit anyone even if you have zero knowledge. 
Neato. Looking forward to using them. 
That code has major code smell. You are checking for certain types if parameters? Eh, gross. I would look into an IoC container to help create a factory. Ninject with the factory extensions works awesome and supports injected parameters on create methods right along side regular parameters.
There's a less verbose syntax if you make it a dictionary instead of an array of key/value pairs, but I'm not sure if that's appropriate to your application: var weights = new Dictionary&lt;PlanemoObject.MainType, float&gt; { { PlanemoObject.MainType.Dwarf, 1f }, { PlanemoObject.MainType.Earth, 3f }, { PlanemoObject.MainType.SuperEarth, 2f }, { PlanemoObject.MainType.GasGiant, 3f }, { PlanemoObject.MainType.SuperGiant, 1f }, }; All that said, if you have *that* many arrays to initialize, you might think about moving it to some external source (a file that's loaded when the application starts, or some kind of database if you need something fancier). Edit: I originally also suggested creating a helper class derived from `KeyValuePair&lt;,&gt;`, but that wouldn't work, since it's a struct and not a class. You could still create a custom key/value pair type, but it wouldn't be a drop-in replacement for the existing code.
Agreed. This way allows a processor to handle more than one `typeof(T)`. A couple different ways to slice that part, each has there benefits and downsides.
MS released the source code for WordPad. You might look into that. I feel like you don't have a grasp on the level of complexity for such a product. If you do, then you will have a complete list, prioritized, with all the abilities you want to have. There is a great article I saw a few weeks ago about the complexity of the Word file format. 
Why IoC instead of an abstract factory? Is that similar?
What about courses online? https://www.coursera.org/ or https://www.edx.org/ have lots of algorithms and data structures courses
Site looks awesome, just the kinda thing i'm looking for. Thanks!
There was also mentioned on NPR a few players, Rummy is good.
Yeah, the system I inherited treats them as aggregate roots too. When done right and consistent it isn’t bad. A DDD purist would certainly frown upon using the data model as our domain model especially once they see some of the concessions we’ve made. That being said and purests be damned, I think if our database design was cleaner i’d be relatively happy with working with a design like that. 
Interesting. Why would a DDD purist object? Is this because you'd expect the model to have different functionality across domains and you'd want that functionality only exposed to the correct domains? Sorry if that doesn't make sense, my jargon isn't great!
Thanks for the explanation, that makes a lot of sense really!
Julie Lerman has a good series on DDD for Entity Framework devs on MSDN. Searching google for her and DDD should produce some good articles on the topic - https://msdn.microsoft.com/en-us/magazine/dn342868.aspx When it comes right down to it, really I think if you are still in the design phase of your app and total control of the db schema plus you can make all your PK guids that you set from the application layer you are in so much better shape than if you are stuck with auto increment identity columns like I am. Trying to pigeon hole an existing system to use EF and be your domain model can get, well, weird.
Syntactically your code is fine. Place a breakpoint in the code and step through it so you can see where it's going wrong. If the else block isn't being reached, that **must** mean that `isNewPlayer` is still true.
He probably binged it and thus is here.
 if (p == player) { Unless you happen to have overloaded the `==` operator, this is a check for reference equality. It's only true if the compared objects are the *same instance*, and because `player` is always a new instance created earlier in the method that's never the case, so `isNewPlayer ` is always false. You have to manually implement a comparison that does what you want (compare the name and possibly birth day). It would make sense to override the `Equals()` method of the Player class to do so and change the comparison from `p == player` to `p.Equals(player)`. ---- As an aside, since you're using LINQ anyway, you can simplify the `ForEach()` to something like isNewPlayer = team.Players.All(p =&gt; p.Name != player.Name); or, if you've overriden `Player.Equals()` isNewPlayer = team.Players.Contains(player); There really isn't any reason to use `List&lt;T&gt;.ForEach()` instead of a normal `foreach (var x in y)` loop anyway.
build an installer with WiX http://wixtoolset.org/ https://www.firegiant.com/wix/tutorial/ WiX integrates nicely in Visual Studio, you can set your C# DLL and EXE projects as dependencies on your installer project, and everything will build nicely inside visual studio or with MSBuild. As an alternative to WiX, there is the Squirrel installer (built as a better ClickOnce installer) https://github.com/Squirrel/Squirrel.Windows Another third choice option is to build an installer with NSIS, bypassing the Windows Installer system entirely http://nsis.sourceforge.net/Main_Page
This has annoyed me as well a few times. I have a helper class in my library along the same line of what Tuple does, which saves typing out the generic type parameters thanks to type inference. public static class KeyValuePair { public static KeyValuePair&lt;TKey, TValue&gt; Create&lt;TKey, TValue&gt;(TKey key, TValue value) { return new KeyValuePair&lt;TKey, TValue&gt;(key, value); } } which could turn this into var weights = new [] { KeyValuePair.Create(PlanemoObject.MainType.Dwarf, 1f), KeyValuePair.Create(PlanemoObject.MainType.Earth, 3f), // ... }; 
https://msdn.microsoft.com/en-us/library/ms247121.aspx The other option would of course be custom code snippets in Visual Studio. These are of course not "post-processors" like your solution that add the comment blocks after the file has been created/edited, but would add the comments at file creation or during editing.
ah crap my trollotron only searched for 'stylecop' and not 'style cop'. My bad.
I'd love to use the VS editor as a standalone text editor without pulling in the whole of visual studio... any tips how?! :-)
Touche'.
Thanks! This is perfect for what I need.
Find something you want to program and learn how to do it. If you find yourself knowing how to do what you're doing, find something else to program that you don't know how to do. Program your own classes for otherwise native .NET classes. Make your own BackgroundWorker class, make your own parser, make your own console, make your own Socket manager... The best thing I could recommend is not following step by step instructions for tutorials but instead finding a goal of something you want to program and then researching how to achieve that goal.
Only downside I can see is the possibly the IDE won't catch some cases it should for refactoring logic. Hopefully it'll be smart enough. 
Well I want to make a top down resource management game in Unity - I just don't know how because I don't feel I have enough understanding of the depth or breadth of functions C# can do, and I'd like to learn these via smaller programs
&gt; what syntax is being used by placing the class name in parentheses? This is called explicit casting. You are telling the compiler to treat `obj` as `Point` instead of `Object` so you gain gain access to `Point`'s methods and type information (the fields `x` and `y` are not defined in `Object`: they are defined in `Point`). https://msdn.microsoft.com/en-us/library/ms173105.aspx ------- `System.Object` has the following methods (also note that `object` is the base class for every reference type in .NET and thus you have access to all of its method for every reference type (i.e. you can call these methods when using a `Point` instance): string ToString() bool Equals(object obj) int GetHashCode() 
* Microsoft Virtual Academy * Buy a book on C# for beginners * Build a few sample apps/games from online tutorials * Search Youtube for tutorials on things you get stuck on You can follow my blog to build a simple Pong clone in Unity (with just a tiny bit of C# code): http://unity.grogansoft.com/ There are so many resources online. You just need to figure out what suits your learning style. 
Since it happens at compile time, the strings need to be static and can't be localized via resource files etc.
I would suggest downloading Visual Studio if you don't already have it (VS Express is free) and spending some time outside of Unity programming non-Unity related things. I tried to start C# in Unity and eventually started doing work in C# out of Unity and Unity became a hell of a lot clearer to me after getting really used to C# for standard windows development. 80-90% of the code I'd use for Unity I'd write in Visual Studio using standard .NET 2.0 and C# and the only coding I'd do in Unity would basically be "wrapper" classes attached to gameobjects for the purposes of creating an interface between the stand alone code and Unity environment.
You might also try exercism.io. That's great for running through stupid little problems in an hour or so. 
Hmmmm... well, you've got a ways to go if you don't know what a class is. I would recommend you start working on basic Win32 console applications in Visual Studio and leave off Unity for a while. If you're fuzzy about "class" you'll be fuzzy about wrapper class as well. Suffice to say that everything in C# is a class object. Even a Win32 Console program is a "class object." A class is a set of (in basic terms) variables and methods that can have as many copies as you want created (there are also special classes that can only have one copy, but that's advance). For example, even if you have a basic Win32 program that does nothing but say "Hello World" - that program will likely consist of one class object that contains the instruction to print "hello world" to the console. Say you open multiple copies of the program, they're all the same class definition following the same instructions, but they're all different copies of the class definition, or, in technical terms, an *instance* of the class. Everything in C# centers around the idea of creating different definitions of classes and then creating copies of these classes to assemble a larger program. I could have one class that generates a random number, another that stores the random number and a name, and another class that will take the stored random number and the name and save it to a file, for example. I would have to create an instance of each of these classes before I could utilize their underlying variables and "functions" (in C#, a "function" is called a "method" - in Java they're functions). Since you're fuzzy on class, that's where you need to start - tutorials on what classes are and how they're created and used, no ifs ands or buts. A good way to think about it: Say I own an egg factory and I want to make some egg cartons to hold the eggs. First I have to have a design - this design is equivalent to what a description of a class is. The design does nothing for me until I actually make an egg carton. So the *class definition* is the design for an *object* that I will instantiate a copy of. The actual object is something I can do something with - the definition only exists to describe to the computer how to allocate memory for storing different variables and also the allowed operations (methods) that can do things with those variables. 
It uses String.Format, which is slow. If you're code is performance sensitive and you are just doing basic concatenation, this adds an unnecessary parsing step when compared to StringBuilder.Append. But honestly, if this is your bottleneck then you are doing some amazingly good work everywhere else.
Thanks! I've gathered a large number of bookmarks for this, so I'll add this and move it up my list :-) 
Here's what I get when I open an empty console application template in Visual Studio Express 2013: using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace ConsoleApplication1 { class Program { static void Main(string[] args) { //Main Program goes here } } } As you can see, there's already a class definition inherent in starting a new program. When the operating system is told to start the program, it creates an *instance* of the *class definition* "Program" and runs the *method* "Main(string[] args)" Say my program will work with people's names. I can create a new *class definition* to store names in. public class Name { public string FirstName = ""; public string LastName = ""; } Now I have a *definition* from which I can create an *object* which will allow me to store names in the *object*, like this: namespace ConsoleApplication1 { class Program { static void Main(string[] args) { Name Name1 = new Name(); // here's where the class definition is turned into a class object Name1.FirstName = "Bob"; Name1.LastName = "Jones"; } } public class Name { public string FirstName = ""; public string LastName = ""; } } I can then add another copy of the class and store a completely different set of names for it: namespace ConsoleApplication1 { class Program { static void Main(string[] args) { Name Name1 = new Name(); // here's where the class definition is turned into a class object Name1.FirstName = "Bob"; Name1.LastName = "Jones"; Name Name2 = new Name(); //I've created a second object from the original defintion Name2.FirstName = "Jenny"; Name2.LastName = "Smith"; } } public class Name { public string FirstName = ""; public string LastName = ""; } } Anyway, it just gets more fun and complex from there on... but you absolutely must grasp the concept of classes before you can write "healthy" C# code.
Perfect, this makes much more sense. Thank you so much!
You know, I tried to learn c# through writing console applications, and I hated it. Of course you can do everything through console applciations that you could do through a GUI, but doing winforms apps really made me enjoy and appreciate what I was doing a lot more, since the result looked/felt "better". I didn't really learn how to program (not that I know now...) until I started making stupid windows apps to make stuff at work faster. It also got me a new job and a raise since everyone else thought I was doing magic and appreciated not having to use console programs to do things. tl;dr, I recommend skipping console apps and making winforms apps instead
Yeah, I agree, but I've found that with both myself, and my friends, the prettiness/instant feedback(not the right term, but whatever) that I/they get from building winforms apps helped keep the motivation up. I also agree about WPF, so that's an option too.
In your opinion, did you became an expert or good enough to apply for a job after learnvisualstudio with bob tabor?
I... huh? I'm not sure what point you're trying to make?
By parsing it out and studying it, poking it with a stick, making it work in a different 'dialect'.
Making mistake and learn from it , that is how most of the programmers learn. You will make mistake, and then learn how to fix from it at this early stage. A "revert-to-good-stage" button won't do much learning for you. (although we do have that button for all the programmers, just in a different name: "Version Control". you should use that in a later date) Having said all of that, there are quite a few sources you can try to learn more about C#: - Microsoft Virtual Academy, search up "C# Fundamental" or "C# for absolute beginner" , you should be able to see 2 courses from Bob Taylor. They are really good. - Introduction to C# Video series from a channel name "TheNewBoston" on YouTube. He describes everything in a really good manner and "straight to the point" - [This book](http://www.amazon.com/gp/product/073568183X/ref=oh_aui_detailpage_o03_s00?ie=UTF8&amp;psc=1) . It is a much better book for beginner than "C# in the nutshell" , but "C# in the nutshell" is actually a better "reference" book when you have a decent knowledge over C#. After crunching all of those, like everyone else said, find something you love to make, preferably something that you would use personally, something useful, and make it. Probably an alarm clock, personal calculator... or even something really big ( i will leave that "really big" to you (: ) 
&gt;But honestly, if this is your bottleneck then you are doing some amazingly good work everywhere else. You're not wrong, but its never that, though, is it? Its death by a thousand cuts. 
Your conversion is widening. If you were going from point to obj you wouldn't need to cast but you could only access object's methods and properties. The compiler has no idea that the object parameter is a point as it doesn't look at usage inside the method for that. 
Personnaly, i've starter with xna projets. It's pretty cool to make games and there are a lot of tutorials on the net with code samples.
By the Yellow Book, do you mean the Rob Miles one? If so, whereabouts is this written? EDIT: Nevermind, found it
Check out /r/DailyProgrammer 
Yes, I do have enough disk space. 
http://stackoverflow.com/questions/8004256/resize-window-size-c-sharp
It is working. Here is a working code with a bit of modification. http://pastebin.com/WFLiNmMZ Call the function like this: ResizeWindow("cmd", 100,100); 
You are doing something wrong. http://i.imgur.com/ZSj3kxv.png Open Task Manager, find Process ID and try to resize it this way.
no go, strang thing is it doesnt move it around the parent either. But i can mov it around by its titlebar when it appears randomly.
okay so, i can resize it but not when it is a child of my main app... 
Sorry but I have no idea what you are trying to do and will not be able to provide you further help.
oh its fine, think I am on the right track now. I was trying to put a game into a smaller window on a form I am using. So I called SetParent() on it. When I do this it looks like I am losing the handle so I just need to get it again. TYVM!! tho, you got me on the right track.
Getting the file names.
Pseudo: List(string) folders; For each file in selected folder: Folder = file.removenumbers createfolder(Folder); copy file to folder http://stackoverflow.com/questions/1657282/how-to-remove-numbers-from-string-in-regex-replace http://stackoverflow.com/questions/3710617/list-recursively-all-files-and-folders-under-the-giving-path
Have you tried googling ["c# list files in directory"](https://www.google.com/search?q=c%23+list+files+in+directory&amp;oq=c%23+list+files+in+directory)?
I have always found it's easier for me to learn a new language/library/platform... by taking an existing project that someone has written and making it do something new/different. Adding a feature, or modifying it to output something different than what it was originally meant for. That way you have a working project to get started with, so you can avoid getting mired in boilerplate stuff that may be necessary on new projects. You also have examples of how things are already done in the project, so you can use it as notes while you're doing your thing. 
I realize this is a bit of a contrived example, but if you do a {DateTime.Now:fff} (to display milliseconds) and have that a few places in a large string, will the compiler actually use the same value, or different values? Let's say we have a property in the middle that takes a few seconds to extrapolate, because it has to do some heavy calculations to generate that property. Using String.Format, if I wanted the same time output in both places, I would use the same ordinal in both places in the format (e.g. {0}). Judging from what is happening behind the scenes, I am guessing you will get a different value, and you'd just have to fall back on using String.Format if you wanted this behavior.
TL;DR: We can't make money so we will stop that project
One thing that might be really useful is to process each file for anything that you are using that requires certain copyright documentation in the header (a lot of "public domain" libraries carry this tiny restriction) and add the appropriate comment automatically. I know this would save me a lot of time on some larger projects, as well as satisfy legal that we are including all the appropriate citing in our source code files. If you are already doing this, feel free to ignore. I'm on mobile right now so couldn't take a look at what you've done. :)
I want that in Java...
[You might be saying that a lot in the future ;)](http://www.reddit.com/r/fsharp/comments/33n0u7/c7_worklist_includes_tuples_pattern_matching/)
You can simply extract the variables from the GetLoanTerms function and declare them globally. Here is your code rewritten: http://pastebin.com/sFc61k2k
In your case you would use [out](https://msdn.microsoft.com/en-GB/library/t3c3bfhx.aspx) parameters, not ref. Out parameters are used when you only want to retrieve information from a function, hence it is not initialised when it is declared. Ref parameters are declared and initialised with some relevant value that the function will need **and** will change. See http://stackoverflow.com/a/1516890 See comments in the code below to understand what I've changed: /* these variables do not need to be initialised because they are going to be used as out parameters */ double loanAmt; double interest; double periods; /* Note: using out instead of ref parameters */ GetLoanTerms(out loanAmt, out interest , out periods); /* these variables now have values set and can be used as normal */ var result = CalculatePayment(loanAmt, interest, periods); /* notice the parsing of data from one function to the other along the way */ DisplayResults(result); } /* note: this function does not return anything (void). all values are set in the out parameters to the function */ public void GetLoanTerms (out double loanAmt, out double interest, out double periods) { Console.WriteLine("Please enter your loan amount."); loanAmt = double.Parse(Console.ReadLine ()); Console.WriteLine("Now enter your interest rate."); interest = double.Parse(Console.ReadLine()); Console.WriteLine("How many months will you pay the loan over?"); periods = double.Parse(Console.ReadLine()); /* note: using string formating to display your inputs in a cleaner manner */ Console.WriteLine("Your inputs are {0}, {1}, {2} ", loanAmt, interest, periods); }
This screams of a school assignment. We shouldn't do someone's school assignment. Teach a man to fish.... Some of these are just straight up writing the code. 
Honest question, when is this a better solution than making the variables class parameters or making a data structure?
Hey this is really neat and something I will look in to and maybe contribute to. How has your help experience working with Roslyn been? 
Should be empty string instead of string.empty
I appreciate the help and have gotten the program working by declaring the variable outside the methods in the class. I will also look more into the out parameter for future use. 
Thanks :) I have never used it with multiple variables and was unaware. 
No problem. Trying is part of learning! As you can see from the MSDN documentation link that I posted, the *return* keyword will return from your method immediately, and can only return a single value. If you need to get more than one value back to the caller, then you would usually do one of these things: 1. Use the *ref* modifier for your arguments - this is for if you need to pass values in that the method needs change. In this case your arguments must be defined and initialized (e.g. *double total = 0f;*). In this manner, your method can either return nothing (*void*) or perhaps return something like a *bool* to indicate success or failure of the method. 2. Use the *out* modifier for your arguments - this is for if you don't need to pass values in, but need to get values out. In this case your arguments only need to be defined (e.g. *double total;*). See #1 for what your method can *return* in this case. 3. Create an object that your method will return to the caller (e.g. *class MyValues {}*). Then in your method, you will define and instantiate one of these objects (e.g. *MyValues myValuesToReturn = new MyValues();*), set the appropriate values, and *return* it. 4. Create your variables as "global". I can't see all of your code, but I'm assuming your main application class is *Program*, so create your variables at that level, inside that class, and all of your methods will be able to access them. There are a lot of reasons why you generally don't want to use "global" variables, but in this case it will get you started anyway. There are a few other possibilities, but to start off with, I suggest getting a handle on these, as these will be your basic patterns most of the time. Good luck!
Yes. It has to be like that, since expressions could have side effects in general, and people would expect them to execute when they type them. 
All the = 0 are superfluous, by the way. 
Also, GetHashCode should be overridden as well.
Yes OP, don't do the above please. 
Yes this is possible. Heres a small programm using reflection to get this done. If something is unclear you can copy the entire thing, debug it and play around with it a little or ask here. using System; using System.Reflection; namespace ConsoleApplication1 { public static class EventMethods { public static void Event1() { Console.WriteLine("Called Event1."); } public static void Event2() { Console.WriteLine("Called Event2."); } public static void Event3() { Console.WriteLine("Called Event3."); } } class Program { static void Main(string[] args) { ChooseEvent(1); ChooseEvent(2); ChooseEvent(3); Console.ReadLine(); } static void ChooseEvent(int number) { MethodInfo method = typeof(EventMethods).GetMethod("Event" + number); method.Invoke(null, null); } } } 
Then there is something else wrong in your code. `Form.Invalidate()` will cause the form to repaint. Are you perhaps drawing on the form outside of the Paint-event?
You're also using 2013 because it's the latest version so far. 2015 is not released yet.
Just modified them all to be static methods! Actually trimmed down quite a few lines of code. Thanks again for the suggestion!
Definitely, I agree with that. The developer can turn off the diagnostics on project level if he wants to so it should only bother them once.
It's been very positive, actually. On Stack Overflow you have Kevin Pilch-Bisson (part of the Roslyn team) actively answering questions and on the Roslyn repository I've also had a good experience so far. 
I'm not criticizing your answer at all, but you should make it clear that reflection is significantly less efficient than a direct call to a "routing method" or whatever like some other commenters said.
It's not. My example is keeping close to OP's original post instead of rewriting it
Its not a form per-say. Its a game that I have called SetParent on. Process firstGame = Process.GetProcessesByName("gameprocessname").ElementAt(0); if (firstGame != null) { try { IntPtr firstGameHandle = firstGame.MainWindowHandle; //get handle of game win IntPtr mainFormHandle = this.Handle; // store handle of my app SetWindowLong(firstGameHandle, GWL_STYLE, WS_BORDER); // get rid of borders // move the window where we want SetWindowPos( firstGameHandle, (IntPtr)0, gb.Location.X, gb.Location.Y, gb.Width, gb.Height, SHOWWINDOW); // make my application parent of the game SetParent(firstGameHandle, mainFormHandle); // child handle was lost on SetParent(); get Game handle again IntPtr childHandle = FindWindowEx( this.Handle, IntPtr.Zero, "gamewndclass", "titlecaption"); SetWindowText(childHandle, gameTitle); //Rename gamewindow SetForegroundWindow(childHandle); //set game window as active boxhandle = childHandle; //store the game windows handle // last thing I tried to get window to redraw and reset RedrawWindow( this.Handle, IntPtr.Zero, IntPtr.Zero, RedrawWindowFlags.Frame | RedrawWindowFlags.UpdateNow | RedrawWindowFlags.Invalidate); } catch (Exception er) { MessageBox.Show("Error: " + er.ToString()); } 
The iOS and Android versions are not open source. Mono is dual licensed.
If its a game, it might be likely that the drawing loop is running through DX/OGL or similar and not Win32.
Yeah I figured as I was writing this it would be too vague. I was thinking there was an issue with streams and threads in general, but turns out it had nothing to do with that. I'm streaming a raspberry pi camera and wanted clients to be able to connect and watch it real time. Video streams are funky as it turns out. As I was writing this question I had a wild idea of just shutting down the camera inbound stream when a new client connects and reconnecting it. That did the trick. I can read from that stream and write to many streams exactly the way I originally tried to do it, just have to restart the video stream when a new client connects. Probably a more elegant way to do it, but I can't figure it out.
So would it be possible to access that? Game does use DirectX. Never done what I am trying so this is all new to me.
Its not final, but you have been able to use it for almost a year now.
Read about delegates and reflection. 
D'uh, really? But guess what, schools don't use **preview** versions.
Not really, 2015 is better in many ways. Unless it breaks a plugin you have there isn't any reason not to use it, especially with the better licensing.
C++ habit :)
Mine does... :(
I believe Resharper, Unity VS and Visual Assist X work for it so that would allow me to change no problem :)
You can do this pretty easily with a few set-based operations like minus, intersect, and union. I'm on my phone now but can type up a solution in a little but. I encourage you to try it using set operations in the mean time though.
I see! Thank you for your answer, this made it a lot easier for me to understand.
&gt; Even if its more stable? Yes, even if it's more stable. Since to determine this it requires testing, and that requires time they don't have. Also, in my experience VS2015 is slower and less stable.
Interfaces with extension methods are great. They allow you to use any type as the base object while providing shared methods.
because it's 2 chars vs 12?
I'm sorry I can't understand this at all. Would a dictionary be a better approach? Dictionary&lt;fileName, fileInfo&gt; or something?
or you can use an if statement..
pretty cool. I wonder how obfuscators will deal with this.
thanks for the indepth answer :)
Assuming the obfuscator runs against the compiled IL, it won't be a problem as the `nameof()` operator compiles the input into a string literal in the IL. EDIT: For example: public void Test(string input) { Console.WriteLine(nameof(input)); } Compiles to: .method public hidebysig instance void Test ( string input ) cil managed { // Method begins at RVA 0x205f // Code size 13 (0xd) .maxstack 8 IL_0000: nop IL_0001: ldstr "input" IL_0006: call void [mscorlib]System.Console::WriteLine(string) IL_000b: nop IL_000c: ret } // end of method C::Test Note the line `IL_0001: ldstr "input"`; that's the string literal directly inserted. The `nameof` operator doesn't exist in the IL for the obfuscator to change. Unless you're thinking that if the obfuscator changes the method signature from `string input` to `string __A` that the resultant string from `nameof` should also be "__A"?
Depends on the structure of the engine; for D3D8/9 [IDirect3DDevice8/9::Present](https://msdn.microsoft.com/en-us/library/windows/desktop/bb174423%28v=vs.85%29.aspx) is used to flip the buffers (thus updating the screen).
Who let Dr. Steven Brule onto the development team?
Using a generic wrapper for your types works too, and probably more consistently if you involve any sealed types.
The problem is how does the obfuscator know if the nameof should maintain the correct name (for tracing etc.) or if it needs to use the obfuscated name (for property change notification etc.).
My first thought was that this was using reflection at runtime, and would be too slow to use for normal logging, but useful for errors. I am very happy it's compile time.
Agreed, but the common current workarounds (lambda + reflection) don't have this problem, meaning the nameof is perhaps not the silver bullet.
I agree, but I was previously aware of [this](http://stackoverflow.com/questions/2566101/how-to-get-variable-name-using-reflection) StackOverflow question, and [Eric Lippert's discussion here](https://cuttingedge.it/blogs/steven/pivot/entry.php?id=37), basically saying they wouldn't do something like this. That was 7 years ago, though. &gt; This is a good idea, and an interesting one. Were we to do this, we would make it much, much more general than "nameof". 
Hey there. I'm doing a web series on C# Design Patterns. I'm going into week 8 and it's designed for folks like you. Each week we go through a design pattern kata and then commit each step to a github repo. So if you want to follow along with the code in the recordings you totally could. Then we apply what we've learned up to that point to a console game. After 6 design patterns we had a small proof of concept game we can play. I'm about to take a 2 week break before I start over with the factory pattern and a new example project. If you're interested you should join the stream this week or just see what we did last week. If it seems advanced that's a good thing! In week one we really just started off with "What is a class?" Here is my twitch channel -&gt; http://www.twitch.tv/ariugwu Here are the videos archived on YouTube -&gt; https://www.youtube.com/user/DRYByDesign/videos I'll be adding a page that organizes all this soon. In the meantime know that it starts with the factory pattern. Week 1: Factory Pattern -&gt; https://www.youtube.com/watch?v=IlWQk2WRS3g Week 2: Strategy Pattern -&gt; https://www.youtube.com/watch?v=obRmu-qJVRE Curious to here your thoughts and questions of all kinds are welcome in the stream! When I start over in a few weeks that first session is a great place to ask questions like "What is a class?".
One of the few features of C# 6.0 that isn't unnecessary garbage.
trueeee I dunno why I never thought of a switch statement haha. Thanks!
people on this sub are so helpful! I wasn't really planning on building anything, I was just curious haha since I tried something and it didn't work. Thanks for the response! I have a lot of c# to learn.
Here is another way you can approach this problem. In this example, you pay the price of reflection up front rather than on every function call. It uses a dictionary in order to route the function calls (which is really fast since dictionaries are hash maps) http://pastebin.com/10cX3SYx You can further reduce the cost by eliminating the GetFunctionName. The reason I did it this way is the eliminate the number of places that there are hard coded strings.
Opposite here, been doing C# for a few months now. I miss Intellij IDEA every day and ReSharper is the only thing that makes C# palatable in VS. Except ReSharper is a retarded Clippy that wants to convert everything into a LINQ expression for no valid reason except because LINQ! C# as a language can be pretty nifty but the platform just plain sucks, I'm coding a web api project, the self-host benchmarks are disappointing and I'm probably gonna end up using it anyway since IIS is such an unintuitive worthless piece of crap while vNext + OWIN + Linux would be nice but is too early to gamble on a production environment. VS keeps crashing when merging with git and capitulates from loading our main desktop application, entering a simple base64 encoded string into one one of my unit tests makes IntelliSense give up everywhere in the same file from that point on. It's surprising that I manage to get anything done and I wouldn't be surprised if Intellij put out a C# IDE in the near future (I hope).
Hi, glad to hear that there are so many people making good video resources for this language! I'm currently finding a lot of success with the Microsoft tutorials, but I may be a flirtatious soul and flirt with the series you linked! I'm glad that the streams are saved to YouTube, because I've recently learnt that that isn't a thing done by everybody I'd be happy to ask questions and give opinions in order to help, it just depends on when the streams are, as I'm in the UK there's no guarantee that I can be there for them.
Alright, be blind to readability in single "if, then function" cases just to keep to an absolute rule without question. Your loss. Really rather quite sad.
I'm thinking these should be methods of something like a loan class, and the variables should be defined as private members of the class, not within the scope of the methods themselves. That way, from some other part of your program, you can instantiate as many loan objects as you need, without confusing the information stored in those variables.
I'm guessing you misrepresented the result. Did you want a third array of { A, B, C } ? If I'm understanding correctly, you should look into set operations, and the intersection of two sets.
Yeah, I think you are right. I'm playing now and seeing what I can accomplish. I have now re-read the question I posed back, and I have made it less than straight forward to understand it seems :) I'm going to have a think about how to verbalise this better.
Like all other reflection, obfuscators don't know how to deal with it in general. This is the same situation now.
nameof schnameof... what we want is methodof, propertyof, fieldof and eventof to complement typeof. There is no efficient *and* type safe way to do it now in C# (although there is in IL).
Thanks. Json.net is now my best friend
To format code on reddit properly, you need to: - Have an empty line before and after the code. - Have 4 spaces before each code line.
Well, you could create a Document class, Chapter class, Subchapter class. Document class should contain a list of Chapter while Chapter should contain a list of Subchapter. It would be a lot easier to manipulate and populate data this way. You could use RegEx or GetBetween to extract the data. First extract the big chunks such as chapters and add them to your object of type Document (myDocument.Chapters.Add(Chapter)) and then look through each chapter for subchapters and add them (myDocument.Chapters[X].Subchapters.Add(Subchapter)).
thanks!
ok thanks, Im using the step now in VS and can see how this will help. What is confusing me now having stepped through it, is that the row variable does not increment to 1 on the first run through. 
&gt;Start at line 1, Row becomes 1 The iterator of a `for` loop (the `row++` part) executes *after* the body of the loop. During the first iteration, `row` remains at its initial value of 0. I think this misunderstanding is the source of your confusion.
This for example: https://www.youtube.com/watch?v=06H_6oI4EK4&amp;feature=youtu.be
It still is issuing the redraw command. Everything animates fine in the game it just looks stretched and the control input is off. UI elements highlight over like an inch above where the in game mouse cursor is shown. It does pay attention to if its own window is resized, and if I do resize it manually everything fixes itself. Just if I resize with SetWindowPos() or MoveWindow() all this happens. Guess I look into maybe trying to get it to redo the swap chain. If its possible. Thanks tho, half the time trying to figure out the right question to ask is half the problem and this might be pushing me into another direction. More ya know.
&gt; They allow you to use any type as the base object while providing shared methods. ..as long as those methods don't need access to anything except the public interface, that is.
Well, if-else if would work just the same, although slightly more verbose (not much, though, since C# switch is horribly verbose in itself).
Yeah, OP please don't do the above :)
In terms of user experience, Android Studio is much more polished than Xamarin Studio. Visual Studio trumps both unless you also need to do iPhone development. Sort of like a fucked up game of rock paper scissors.
In my experience, xamarin is buggy and will always be chasing after the latest changes to Android and ios. Then, every time they release an update it costs a day trying to figure out why it doesn't work anymore. 
Hi bill, Sorry about that, I've gone ahead and updated the bindings, I'm still having problems with the value converter and the INotify not firing on command, I will make the explaination more readable. **Update** Figured out the problem was the default uri wasn't set therefore the data being returned was invaild so I had to put a placeholder image in place to get the event handler to work correctly. 
I want the direct link that I can then pass to MediaElement's Source property, and not direct link like the one I send above won't work. I need direct .mp4, or something.
The [Serilog](https://github.com/serilog/serilog) postgres sink does that.
The idea is to avoid another layer of indirection (ala, embrace EF). Thanks for the link.
I'm happy with Xamarin. I don't like java much. I have years and years of c# code to draw upon. Makes sense for me to use it, rather than start again with a language I have no previous investment in.
Or the C pre-processor :D. I kid ofcourse :P
I would argue that taking advantage of quality software while in college is a non-issue. My college/department gives everyone MS Office, Visual Studio, Windows, etc as a part of a required low-price freshmen software bundle. As long as you graduate, you get to keep everything (with exceptions like MatLab and Mathematica). I've used NetBeans (free), Eclipse (free), and Visual Studio while in college. I wouldn't say I'm tied to any particular toolset. Tied to certain languages, definitely, but I think any software dev has the capacity to objectively compare the tools available to them and only buy the expensive ones if they deem them worth it. Visual Studio definitely has some great features, and you're doing yourself a favor if you install and try it out now.
Maybe try this library instead of reinventing the wheel? https://github.com/flagbug/YoutubeExtractor
Is "just the engine" usable, or do I still need to buy their GUI or something?
My last month or two at work has been trying to track down memory leaks in our iOS Xamarin app. We know our view controllers aren't properly being disposed and have made many sweeps through our code base making sure we were properly releasing resources, etc. Eventually we just decided to make our view controllers "reusable" similar to how iOS deals with prototype cells/reusable cells. So now at least we know we're hanging on to the references. Event subscriptions is another area we had to comb through the weirdness of with Xamarin. Sometimes I wonder if it wouldn't just be easier to do this in objective-c, but I hate working in obj-c. Just wanted to say you're not alone in the memory issues with Xamarin.
JustDecompile is freeware. The internal decompilation engine (and command-line interface) are the pieces that were open-sourced.
Our applications would crash intermittently with seemingly no correlation between them, and all we had to go on was that it was a memory issue. We eventually found that it had everything to do with images, since we had a collection of items we were displaying in a list, and each element in the list with represented with an image. I can't remember the specifics, but I believe our solution was to begin including smaller resolution images solely for the purpose of displaying these types of items in the list. Looking back on it, I'm not sure why we ever thought it was a good idea to use the full-resolution images for thumbnails.
Well there are 9 people here right now. 
Considering [Primary Constructors aren't part of C# 6](https://roslyn.codeplex.com/discussions/568820), maybe you should read up on what actually *are* the features before commenting on how much they suck.
Actually, I recall now that they were vector images. I believe we only had 12-16 visible on the screen at any one time (16 was the worst-case scenario, if you were viewing the bottom half of the top-most row and the top-half of the bottom-most row). These vector images weren't very complex (it's primarily line-art containing measurements and such for the engineering department), but evidently rendering them used more memory than just displaying a raster image for each item.
If you're doing XML logging purely for readability, fair enough. But be aware that you probably won't be able to process your logs by means of an XML parser. Producing well-formed XML in a log file in difficult. A series of records like this &lt;LogRecord&gt;...&lt;/LogRecord&gt; &lt;LogRecord&gt;...&lt;/LogRecord&gt; isn't well-formed. Producing well-formed XML leads to a bunch of issues regarding knowing when a files starts and, more importantly, ends, and appending to files and such. Forgive me if that's nothing new to you. Not trying to talk down. 
Considering the cost of a license , it's not acceptable. 
Thank you for your input, that is interesting. I did a bit of reading, I assume this is what is refered to as a "Deferred query execution"? ( https://msdn.microsoft.com/en-us/library/vstudio/bb738633%28v=vs.100%29.aspx )
Thanks for the reply! 1. Email attachments, pdfs 2. We didn't consider the max email attachment size because it's negligible (&lt;5mb total, avg. 20 emails sent per day). The emails are personalized with the customer name, account number, and a contact phone for their region. I used the razor view engine and a data dip to a compiled sproc to get the info and build the html. 3. ~20 emails per day is average. 4. Stuck using smtp. The goal was to automate a ho-hum process that a small number of people do and allow a lot of people to do it easily. Nobody wanted to spend money. 5. The client makes the request via ajax post to a WebAPI 2.2 server on a different domain. SQL Server is used only for gathering personal information for personalizing the email message and logging. And now that I think about it, the data dip for the personal info can be eliminated. I'm not a fan of [database as a queue](http://mikehadlow.blogspot.com/2012/04/database-as-queue-anti-pattern.html). My only concern about not using a messaging service is that the process can only scale poorly in its current design. The caveat is that it's not intended to scale. Should the need arise to send 40mb attachments every couple of seconds, we'd need to redesign. What do you think? Build this to scale by slightly overengineering it or leave it as is: a webapi that lets its business and data access layers do the lifting?
Thanks for the tip, I suspected as much. Will do.
No worries I appreciate your efforts! I feel like I've been pointed in the right direction now so know what to look into. Thanks! 
Thanks a bunch, this is a great start for me. Much appreciated! 
Delegate is very simple: First you declare the delegate with the return type and parameters you want: public delegate int AddDelegate(int a, int b); Then in your class or a method you create a method that matches the return type and parameter: public class MyClass { public int Add(int a, int b) { return a + b; } } Then you create an instance of the delegate, for example, in the constructor: public delegate int AddDelegate(int a, int b); public class MyClass { private AddDelegate AddDelegateInstance; // type = "AddDelegate" variable name = "AddDelegateInstance" public MyClass() { AddDelegateInstance = new AddDelegate(Add); } public int Add(int a, int b) { return a + b; } } And there's your delegate! Then you can simply call the delegate like so: int finalvalue = AddDelegateInstance(4, 5); //finalvalue will equal 9
yes the concept behind delegate is very simple, now give me an example of actually using it rather than wasting time and energy on making a hard way of adding two numbers. The problem I'm having is finding real world application for a delegate.
Wow, I just realized it's been a long time since I've used a delegate. Func&lt;T&gt; and Action&lt;T&gt; made life so much easier. 
There's tons of uses for delegates. One use I have for them is in my Perlin Noise generator where I use them to swap out different methods for getting random numbers and accessing different sets of gradient vectors for getting different results from the Perlin noise. Anywhere where you might always have the same input parameters and return type, but you might want the method to vary during runtime a delegate is useful. They're also used to subscribe to "Events" which will execute the subscribed delegate on any number of subscribers. I wouldn't expect someone to use delegates in every class at all, but I use them quite frequently.
You have to create a delegate to subscribe to an event, so yes, you need to understand how to create a delegate first. A delegate is just like a value type (int, double, DateTime, etc.) except it holds a *pointer* to a method instead of a value. I.E. A delegate is a variable that holds a function.
Thank you for the resource, I'll have a look at it. I'm leaving no stone unturned here trying to figure this out.
Playing around with/reading about other languages helps you understand certain features. I didn't really understand the usefulness of delegates until I dabbled with F#. It's good to be aware of all the concepts, but a complete understanding might not come until you run into a case where its use would be perfect.
OOP concepts like interfaces and overriding methods, that arguably cover (most) of the use cases of delegates, don't exist in C. And since C# is a primarily OOP language, delegates don't seem immediately useful.
I picked up delegates pretty quickly, but only because I was already well acquainted with C++ and function pointers. Honestly, to answer your question, it really depends. As for programming in general I think it took me several years, with a college-level education and lots of practice with various languages before I really started to feel self-assured, but still, throw me into an unfamiliar subject and I can be just as much of a newbie as anyone else. This is why knowing how to teach yourself is such a critical skill in programming. There is almost no end to the documentation you'll have to sort through to find the solutions you're looking for. It's normal, don't be discouraged.
C#? A couple months maybe before I felt I had some level of proficiency, but that's with existing programming experience and a really sharp guy in the office I could ask questions when I was stuck. As for delegates, I like to think of it as a function [method] variable rather than everything else where some object is typically a variable. Variable being the key point - it's a placeholder that can change during runtime. I'll give you a real world scenario. Suppose you're writing a simulation of an airplane. When you get to the method that calculates lift on the wings, it needs to know something about the air it's in, right? Depending on the type of simulation you're doing and how fast you want it to run, maybe you want the following options: uniform air properties, air properties that vary with altitude, air properties that have altitude, humidity, and temperature. So you could make a delegate for calculating local air density, that your lift equation uses. You can then use those three air property models interchangeably without changing your lift equation code or having switches or if statements all over the place. You can even add more air density equation types later without having to change your lift code.
Unicode can already represent Chinese characters, what do you mean by translating Unicode into Chinese? Are you trying to convert a Unicode encoding into a Chinese-specific encoding like Big5? Or just trying to display Chinese characters already encoded as Unicode? Your application "converting Chinese into Unicode" simply takes UTF16 bytes and displays it as a hexadecimal string. The reverse of that would be to convert the hexadecimal string back into a byte array and use `Encoding.BigEndianUnicode.GetString()` to decode it. I'm not sure if I'm just not understanding what you're trying to do, or if you're not understanding what Unicode is. ---- Edit: Assuming that the code visible in the `button1_Click` method in your screenshot is your attempt at reversing what you're doing in `buttonDecode_Click`, the issue is that you're not correctly converting the hex string back into bytes. What you're doing is getting the ASCII values of each letter (e.g. "0" = 48) when you should be converting two hex half-bytes to one byte (e.g. "00" = 0, "FF" = 255).
Have you done performance profiling to determine the bottleneck? It sounds like the delay is due to using SMTP in direct mode (the delay being due to network latency/server responsiveness, instead of SMTP message generation). You could try setting up a [SMTP relay in IIS](http://www.iis.net/learn/application-frameworks/install-and-configure-php-on-iis/configure-smtp-e-mail-in-iis-7-and-above). Instead of delivering the e-mails directly, the SMTP relay will queue and send out the incoming e-mails - hence no need for MSMQ/Rabbit MQ/database queuing. I'm mostly in agreement with the database as a queue anti-pattern. Scheduling queues would be the exception (i.e. process at) with queue data that needs to be updated sporadically. Another benefit of a database queue is batch processing (e.g. to build up a single call to send multiple SMSes), notifications with a polling back off when there's nothing to process is pretty efficient. The previously linked article points out proper database queue design necessary for performance/cleanup, although you could use a largish ring buffer type table as well when appropriate to avoid inserts/deletes. All types of messaging queues have their own inherit limitations (e.g. RabbitMQ is 2 Mb/message).
It's not really teaching yourself, it's more about researching/finding solutions (usually via a search engine).
No.
/u/HonorableJudgeHolden is a racist
You should be able to have `public &lt;object type here&gt; MyObject;` in program.cs and use `var program = new Program` and then `program.MyObject` in the form. EDIT: It works now. A link is [here](http://rextester.com/SDHF33999).
Thanks. Where can I see a code example of that online? EDIT: That doesn't seem to work.
I doubt people want advice from someone that frequents /r/gasthekikes and /r/coontown, among other deplorable subs.
Like I said, programming is an objective science and your ad hominem doesn't influence the correctness of my description of delegates as it's not a subject which "just relative." 
You sure can! And if you make it static, then you just access it through Program (e.g. Program.MyObject). Keep in mind that if you do any kind of multithreading you may need to employ some kind of synchronization pattern around your object access. 
That's your opinion, this sub is not for discussions regarding politics but is about C#. You are welcome to come to subs about ideologies you find distasteful and discuss them there.
Thanks. I'll try that.
The question makes no sense. Chinese is a language, Unicode is a character set, it makes no sense to "convert" between them.
I have no interest in hearing anything you have to say. Your value as a person to me is zero.
And, yet you keep responding to me. I didn't see any political requirements to participate in discussions regarding C# on this sub. If you have a problem with something I said about delegates, I suggest you correct it as that is what this sub concerns.
I am a little bit out of the loop, when is c# 6.0 going to release?
Yes but they're just more pleasant to work with. 
That was a helpful reply thank you very much for your insights.
You can also imagine delegates to be like interfaces that just have one method. If you have an ICommandDoer interface, [you *might* be just as well served with a DoCommand delegate](https://msdn.microsoft.com/en-us/library/vstudio/ms173173%28v=vs.100%29.aspx).
Dude, every person has value. It just so happens that his or her *opinions* are disgusting.
Read this over on delegates: http://stackoverflow.com/questions/12476316/evolution-of-delegates
I know, but I see this as an addition of choices. Let's face it, no one does IRC anymore - but this "new shiny toy" could be the replacement :) (replacement for IRC, not reddit/twitter etc)
Read [C# in Depth, Third Edition](http://www.manning.com/skeet3/). Explains a lot of the complicated stuff in a great way.
This person has made a conscious choice to be a despicable person, which has lowered my estimation of that person's value as a person. That's a consequence of expressing your views, you open yourself to be judged on those views. To me, this person's negative qualities completely negate the innate positive qualities that all people have by virtue of being a person. I've come to this conclusion based on choices this person has made, rather than attributes of that person which he/she has no control over. People like this person are a drag on society and we as a society need to take responsibility to repudiate the impediment to our collective humanity that this person's views directly cause. TL;DR: Fuck that guy.
I don't think they've announced an official release date, but it will be included with Visual Studio 2015, which obviously they plan on releasing sometime this year. My money's on September.
Oh Jesus, I almost had a heart attack, once I saw the "credits" I was expecting "died..." right after that.
Unless there's a reason you need to keep your code exactly the way it is, I think you could simplify things by changing your last line to: var aggregate = planServices.GroupBy(ps =&gt; ps.SmartFlowPlanId, ps =&gt; ps.ServiceId); There's no need for every element in each list to include the PlanId -- that's already present in the `Key` property of your groupings. So then you could do: var matchingPlanId = aggregate.Where(a =&gt; a.SequenceEqual(checkedServices)) .Select(a =&gt; (short?)a.Key) .FirstOrDefault(); Hopefully I've understood what you're trying to do! If so, this should be okay if the number of elements is small, but if not you might think about doing some kind of hashing to avoid cycling through the lists repeatedly. This also assumes that your lists are in the same order. If they're not, you'll have to account for that somehow.
That usually only works for the easy questions, or in cases when you already know what you're looking for.
Note that you can't use `await` in exception filters.
It is possible, you can extract the desired information into another string within ElementData and then call said function with the information as a parameter.
Sure, just add a string argument in NewElement &gt; static void NewElement(string input){ // insert method body here } then you say &gt; NewElement(EleName); and viola, variable passed
Alright, sorry to bug you, but I must be dumb cause I'm still slightly confused. I now have this. public static void ElementData(string EleName, string EleSymbol, string EleNumber, string EleWeight) { Console.WriteLine("Element: " + EleName); Console.WriteLine("Symbol: " + EleSymbol); Console.WriteLine("Atomic Number: " + EleNumber); Console.WriteLine("Atomic Weight: " + EleWeight); NewElement(); AvoNum(EleWeight); } static void AvoNum(string avonum) { } how do I actually *use* EleWeight in AvoNum. If that makes sense &gt;&lt;
EleWeight is now named avonum within the method body of AvoNum, so whatever you want to do, do it to avonum. What specifically do you want to do?
Convert it into an int then multiply it by 6.022*10^23, which I think I know how to do, and thanks a lot for helping
*Error 1 'Chat2015.Chat' does not contain a definition for 'Dispatcher' and no extension method 'Dispatcher' accepting a first argument of type 'Chat2015.Chat' could be found (are you missing a using directive or an assembly reference?) H:\Chat2015\Chat2015\Chat.cs 224 18 Chat2015* I am using WinForms (should have stated that before). Is there any alternative to Dispatcher? Thanks. 
I believe that if you use Select you will get falsefalsefalsefalsetruefalse etc. I think you want Where.
http://stackoverflow.com/questions/303116/system-windows-threading-dispatcher-and-winforms
Also, since I'm assuming this is related to chemistry (more specifically, moles) maybe not bother about multiplying and just saying how many moles there are. That is, instead of saying "1,204,400,000,000,000,000,000,000" output "2 mol". Unless the intent is to have the program output the exact number of particles there are?
No bother! `double mol = 6.022e23;`
What's the _exact_ text of `avonum`? Most likely there are non-numeric characters or a slightly different numeric formatting. (for example "6.022e23" will work, but not "6.022x10\^23")
Statistically speaking, dying will be the last thing you do. So that's a comforting thought, haha
Is there a side by side comparison between WinForms and WPF, I tried to port a project to WPF but there is a shitton of stuff I have to google for, for example this: http://i.imgur.com/opWpI22.png
Nevermind, it was a dumb mistake, I fixed it. Thanks for your help.
It won't be hard I think since I am pretty much a beginner and my code isn't very complex yet. But there already is one thing where I have no idea how I rewrite it... foreach (var control in Controls) { if (control is CheckBox &amp;&amp; ((CheckBox)control).Checked) {
I would personally read the stream out into a buffer, then forward the buffer piece by piece into each of your client streams, otherwise your stream is going to be read by multiple clients at once, which is no bueno.
Don't do this. Direct porting over like that is the wrong way to go. Learn about XAML, bindings, MVVM, ect. and do it right.
WPF is a complex framework, you can't simply decide from one day to another to port a project from WinForms to it without first spending some time learning it. WPF has a steep learning curve and IMHO it's far more complex do design UIs with it than with HTML/CSS/JavaScript, but on the other side, you will be using a technology that was indeed designed to build UIs.
Any half-decent framework defines their own Exceptions classes. Methods should document methods they throw and you should handle only the ones you care about. Take this from the MSDN page on Exceptions to heart: &gt; Do not catch an exception unless you can handle it and leave the application in a known state. Instead of memorizing lists of exceptions, you should memorize Exception behavior. Things like the difference between a first-chance and a second-chance exception, how the ordering of your catch blocks matters, what the behavior of the app-domain you are running is when an exception is unhandled, how to listen for unhandled exceptions, what exceptions can never be caught, and the difference between catch (Exception e) { Log(e); throw; } and catch (Exception e) { Log(e); throw e; }
The relevant stackoverflow question: [What benefit does the new “Exception filter” feature provide?](http://stackoverflow.com/q/27082069/885318)
Yeah, thanks :)
Well, if I'm stuck, I look up what I want to do, and I find an answer within a few hours (or the answer 'there is no answer').
Yes I know; but he said he was sick of it, which doesn't make sense when we're talking about the new feature. That's why I asked what he meant.
It's beautiful. It's far more flexible. Once you've got your head in the right space it's actually faster and easier, particularly for building large applications.
There are so many text editor features on Sublime Text that I wish Visual Studio also. Multi-line editing is one of them, but not in the way it's currently implemented in Visual Studio in the way it works on Sublime Text.
All that should already be in the exception stack trace...
So it is you are right.
About a year ago I went through the process of replacing a winforms application with a WPF application. Honestly, using WPF and following the MVVM pattern feels much cleaner and simpler than Winforms ever did. Initially, WPF feels very unfamiliar, especially if you've spent years developing winforms applications. Used properly, WPF creates a very clear divide between your presentation logic and business logic. Winforms almost forced you to mash all of them together and you have to jump through hoops to avoid tons of code in your forms, controls, etc. There are occasional pitfalls(DataGrids in particular have been really annoying to use), but so far the benefits far outweigh the detriments. Also, as stated elsewhere, learn about XAML and the MVVM design pattern before you start to develop anything real. WPF is a major upgrade over winforms, but you lose most, if not all, of the advantages if you just design it like a winforms app. 
Yeah UltraEdit also has this (called multi-caret editing in UltraEdit). I think Resharper adds this into VS.
That library is a godsend. I swear it contains black magic in the way it is able to resolve the result of a JSON parse attempt into an anonymous class that supports intellisense.
I'd strongly recommend that you use one of the many Google APIs instead of trying to screen scrape. You shouldn't be dealing with any HTML in responding to the task you describe.
It just does fuzzy matching ("some_name" &lt;--&gt; "SomeName") and reflection, no black magic involved.
http://lmgtfy.com/?q=google+map+api+c%23 +1 for newtonsoft.json for manipulating json data
winforms is retarded and useless and useless and deprecated and has been replaced by proper XAML based technologies. And WPF is not about fancy graphics, it's all about DataBinding and being able to actually create a data-centric UI without getting a brain cancer. For typical business applications, WPF is infinitely better than retarded useless dinosaur winforms because you get a proper DataBinding framework that doesn't force you to all sorts of retarded boilerplate a la `this.txtLastName.Text = person.LastName;` and retarded useless shit like that. Plus you get the automatic benefit of resolution independence, customizability, and far greater performance when dealing with large sets of data due to WPF's built in UI virtualization. There is absolutely no reason to use a legacy retarded completely useless technology like winforms unless you're a clueless monkey who doesn't know shit and refuses to learn modern, properly designed stuff. If that is the case you might as well want to use Cobol, or java.
Winforms is useless? I guess that's why tons of C# developers still regularly use it. I suppose I should have mentioned DataBinding - but that seemed "frilly" to me. I guess I've never used WPF for extensive data work in which case I guess I would regard it as a life-saver.
You certainly sound like a professional, so I'll defer to your infinite wisdom that there is no use for Winforms and XAML isn't a pain in the ass to use if you don't care about a fancy UI.
Thanks for the article. There's also AppDomain.CurrentDomain.UnhandledException which is pretty useful to hookup as every unhandled exception should be logged for investigation. Rendering to the current HttpContext is only possible during a request, so will probably need to check HttpContext.Current != null in the Application_OnError method. I've recently used Elmah to log to Serilog, which in turn logs to a database table (unhandled exceptions only) and Glimpse while in dev - works pretty well.
&gt; XAML isn't a pain in the ass Of course it's not. You don't see that because you're too used to winforms' methods. Let's do a simple exercise: &gt; *Create a TextBox that shows the "LastName" property of a certain data object* **winforms:** 1 - Find the Toolbox (which is shitty and takes a lot of time to load) 2 - Find the TextBox, possibly having to scroll to find it inside the Toolbox. 3 - Drag the TextBox to the designer surface. 4 - Pray to your favorite deity that you will be able to put the TextBox in the desired location in the designer by using the extremely imprecise method of mouse dragging and that you will get the desired layout. 5 - Find the property grid. 6 - Find the Text property in the property grid. 7 - Use the visual designer to define a DataBinding to the "LastName" property, which in itself involves more steps that I don't remember. 8 - Pray to your favorite deity that winforms' retarded DataBinding engine will not get choked because of reasons and will hopefully show the data in the TextBox. **WPF (or any XAML based stack):** 1 - `&lt;TextBox Text="{Binding LastName}"/&gt;` ---------- So please tell me again what's a fucking pain in the ass??????
servicestack does awesome json (and a ton more as well) and its faster than json.net (2x to 4x faster). check it out too. https://github.com/ServiceStack/ServiceStack/wiki/Real-world-performance
Because digit1 is only a character, not the entire string. If you printed out the string returned from Substring, you'd have better luck.
Wait that doesn't make sense, if I typed in say 1234567 it should store 1 into digit1 then output 1
What exactly are you trying to achieve? Your code at the moment takes the contents of whatever is added in to string PhoneNo, overwrites it by using SubString to rip out the first 8 characters, sets each digit1,2,3,4 etc equivalent to the position of that character in the string then writes out the first digit of the phone number.
Actually your program would throw an ArgumentOutOfRangeException if you did that as you need a minimum of 8 characters in your string to perform the Substring operation, and you are not checking the string is at least 8 characters.
sometimes I just dive on to a bed of nails for the stupid crap I do.
The code you have written there is not as efficient as it could be and is likely at some point going to crash. namespace ConsoleApplication1 { class Week4 { static void Main(string[] args) { string phoneNo = Console.ReadLine(); while (phoneNo.Length == 0) { Console.WriteLine("You have not entered any characters, please enter at least one character"); phoneNo = Console.ReadLine(); } char[] stringArray = phoneNo.ToCharArray(); Console.WriteLine(stringArray[0]); Console.ReadKey(); } } } This will output the first character (position 0) of any string entered into it. Notice the use of ToCharArray which is a method which takes a string and spits out an array of characters. You can then reference any character based on its position. It also means your program won't error if someone inputs less than 8 characters, or no characters. The while is important for when people are entering the string initially, this prevents them from entering any string that has a length of 0 (as in empty). When this condition is false it will break out the while loop and continue the program. Good luck!
The MVC controller has an overridable method, `OnException`. Pretty useful... protected override void OnException(ExceptionContext filterContext) { log.LogException(filterContext.Exception); base.OnException(filterContext); } 
what if you wanted to do multiple variables of different types...and every time i type public by Main() it gives me the little red line.
so something like this http://rextester.com/HXPE77617
Couple things. First, most things in C# are case sensitive so your call to "string.format" in the method you wrote is going to be a problem with the F being lower case. You can write "string" or "String", but that's a special case (String is the actual name for the type, string is an alias that points to that type that they put in to make C# easier for people who've used other languages. You can see this behavior with other things, eg char = Character, into = Int32, etc.). Next, your method has two parameters, a string and a character, but when you call it in Main() you're only passing a string and that doesn't satisfy the method. You need to pass some kind of character there as well, or remove that from the method (and therefore the call to format it as well). Lastly, you declare a character in Main() but don't set it to a character (eg 'a', note the single quotes or apostrophes around it) but instead a string ("123", note the double quotes and multiple characters), and so that's gonna be a problem as well. I mucked up the order but on that page you linked it tells you at the bottom what the problems are. One of the most important skills you're gonna need is reading those error outputs and determining the problems. Pay attention to any errors or warnings your editor spits out and learn to read the notation (for example, on rextester, the characters in parenthesis before the error message are the exact line and column where there error occurs).
Also in this case you dont really need the character array at all. You have already verified phoneNo.Length &gt; 0 you can simply do phoneNo[0] and/or use phoneNo as the char indexer.
I think that's a terrible way to learn. I would recommend the following: * do some reading...learn techniques you don't currently use (e.g. it took me a while to appreciate abstract classes and interfaces, but now I see how I could have used them in many places where I had a poorer solution). * write as much code as you can, then return to it when you have learned more. * install ReSharper or a similar plugin (assuming you use Visual Studio). I've been using a 30-day trial of ReSharper, and it is quite good at reinforcing good habits and highlighting poor ones. * always keep 'rules of thumb' in mind. Things like keeping your code modular, keeping methods short (e.g. if a method is longer than a dozen lines I assume it's possible to break it up - a method should do ONE THING), name things so that anyone reading the code will understand what it is (e.g. don't call a variable 'x' when it represents someone's age). I think getting better mostly comes from practice. I am an intermediate programmer, and I learn a lot from going back to my older projects and refactoring my code to be simpler and more robust. I can see where I was doing something incorrectly and change it based on things I've learned in the meantime.
Does it work with all classes that have an indexer?
I've just installed VS2015 RC yesterday and started using it. A few questions. What happened to inline out params? Hello(out string world); // this wont work Debug.WriteLine(world); Did they cancelled this feature? edit: [It's going to be in C# 7](https://youtu.be/-UMvYWiQJyA?t=27m14s)
Your call to processInput is missing its parameters. You have two arguments In the signature.
The only potential exceptions I see are the potential divide by zero if all of the weights are zero or some are negative. Or if the two lists are unequal in length. I suppose theoretically you could pass a zero length argument which would result in .Sum() failing as well as it would have no values to sum. My assumption is that the question is trying to get you to identify absolutely every point in the code where the code could fail and that's what "all values and combinations" means.
Do native arrays inherit from IList? I'm not particularly familiar with the interface.
Make an app. Something simple like an RSS reader or something. If you are on Windows 8 or higher (or have a Windows Phone) it's super easy to build simple apps using WinRT. I'd start with something very basic and then add to it.
Not sure myself I haven't worked too much with the IList interface either.
Yeah, [looks like it does.](https://msdn.microsoft.com/en-us/library/system.array%28v=vs.110%29.aspx)
I don't know where to start. I've only tiny 20 line programs. Should I start by checking out someone else's RSS reader? What is RSS? Where do I find the specification for that? Edit: I can probably google the specification, but I just wanted you to know that I don't know where to begin.
My first app was an RSS reader based on the Microsoft sample (Windows Phone, but they also have samples for Windows Store apps, and I'm sure there are similar samples for other plaftorms). Windows Dev centre is where the Microsoft samples are kept. You can download a sample, then open it up and fiddle around. Change the colours. I'd just think of something you'd like to make and start with a really basic form of that. I wanted to make an app for my favourite soccer team, so I downloaded Microsoft's RSS example app and changed the feed address and colour scheme. Then I started fiddling around. You probably need to decide what platform(s) you want to build for, then visit the appropriate web portal for that platform, where they will probably have a lot of info for beginners (I know the Windows Dev centre has a ton of resources).
Something cool i first worked on was an ATM interface. It had a menu system, took user input for a sign on, accessed data preloaded in a txt file or an excel file, or if your really feeling frisky, a sql database. All is basically did was retrieve information and you could deposit or withdraw money. Or do the standard, make a game of tic tac toe. Theres millions of examples online but dont look at them, create your own algorithm on paper and work off that.
i recommend using awaitable syntax and avoiding the tpl for tasks that are not cpu bound http://pastebin.com/LvSCFjzM in this example, i send 3 ping requests to each of 10 urls, and return the first to respond for each url. Each request is wrapped in a task with an additional 500ms delay, and the total runtime is anywhere from 560-600ms. 
You're confusing asynchronous with Parallel execution. They are two different things, although Asynchronous methods make parallel execution easier to manage. Async methods do one thing, and one thing only. They provide the ability to give up the current worker thread, and allow it to service other incoming requests to improve scalability. That's their only purpose. So, when you perform some task like a database access or web request and your thread is blocked waiting for a response, that thread can go and service other requests rather than blocking and doing nothing. Now, you can get parallel execution in some cases from using Tasks and async if you do things right. However, this is something of a side-effect rather than the intended purpose. Because you're essentially creating multiple async methods which all return right away, you can then wait for all of them to finish in one step. See the article here: http://www.asp.net/mvc/overview/performance/using-asynchronous-methods-in-aspnet-mvc-4 
There's good stuff for beginners on Microsoft Virtual Academy
I agree, the int sum, needs be changed to match the method return type. I could attempt to catch any overflow exceptions, however the sample question only specifies ArgumentExceptions, so in real life I would account for overflow, but still not sure if that's what the test case requires. This is one of my recent interview questions and I am just trying to rationalize as I will have to discuss this more in the coming steps. Thanks for the feedback!
The phrase "open one of the controllers" makes no logical sense... what exactly do you mean? You seem to be confusing "Pages" with "Controllers". "Page" typically means when you view the site in the browser, in which case you are viewing the rendered application (ie it's running). "Viewing the controller" typically means you're looking at the source code of the controller. Not to be confused with the View which is the source code (or template) to be rendered.
Yeah. No. Don't ever do this. edit: You're not being downvoted for a straight answer, you're being downvoted for a **bad** answer by providing code that should **never** end up in a production setting.
Don't do this, it's slow, especially so while you're debugging. It's also just bad form if you have other options, which you do in this case. ** Edit**: As a side note, we have a project that does this kind of shit and even worse, we can't change it because we no longer have the source code, however, because of all of this exception throwing catching it takes ten seconds to move between pages while debugging.
You may respected the question, but that doesn't make this a good answer. He's a beginner, he doesn't know what he should be asking. You provided him with a **shitty** solution. It's simply hiding symptoms, not preventing the cause. If I'd ever see code like that in a production setting I would consider the developer as incompetent.
__A__synchronous __J__avaScript __A__nd __X__ML in C#? Ajax is a JavaScript-thing, in any other language it's just called "making a http call" since there's no indirection or paperwork involved
And the relevant Stack Overflow post: [C# 6.0 New Feature Dictionary Initializers](http://stackoverflow.com/q/27244132/885318)
Microsoft Code. Bootcamp and VS &lt;--- the way to go. 
Another important process is breaking up a problem into smaller problems. For the RSS example, you can break it up like so: 1. Get data. 2. Parse data. 3. Display data. So now, instead of one big problem, you have 3 smaller ones that are easier to solve.
Honestly, google C# MSDN Walkthroughs + Web/Console/WCF/WPF etc until you find a project you like then follow the steps, it will give you an idea of what you can do.
http://www.monodevelop.com
And if the, currently useless, Substring line were skipped, it would fail anyway due to array access out of bounds.
Whatever you're trying to do, it can probably be done in 1-2 lines and much better than this code... but I'm not entirely sure what you're trying to do.
Yes, it got cancelled.
I've been debating a mac for solely windows use for a while, you'd recommend it?
It does in my head! My point was that if you make actual translations you can see that there is no way to make that readable by just changing the character encoding.
Xamarin Studio is pretty good.
I've been using Windows running in VMWare on my MacBook for years. This is the only real way to do it if you're developing for windows. If you have an MSDN sub through work or school then this can potentially be free of charge if you use VirtualBox instead (use MSDN for windows license &amp; Visual Studio). Or use an existing Windows license and Visual Studio Code. Otherwise you have Monodevelop (which is now Xamarin Studio) or Visual Studio Code, both of which are free. Never used either of these, but I think these are mostly for developing webapps and phone apps.
Thanks, I think this will teach me what professional code looks like.
Jesus christ dude, your post history... you've got some issues to work out man.
Whoa. Like others said, you've got some stuff to work out. Also im not the entire set of people that upvoted so i cannot give you an answer. Sorry. 
Newtonsoft is the simplest library to get involved with. It has LINQ support, dynamic object parsing and a nice NuGet package to add it anywhere you want it.
Ah, I see. Then try checking out this link too for Coding Conventions. https://msdn.microsoft.com/en-us/library/ff926074.aspx
&gt;`foreach` is always slower than `for`, so switch to `for`. Unless you're writing performance-critical code with tight loops, this kind of microoptimization doesn't do anything substantial and can really hurt readability if you take it too far.
A year, on the job at that.
&gt; As you can see, instead of calling Add method, indexer (internally implemented as an Item property) was used to set values. &gt; In this case, there is no difference between this two implementations, because internally indexer and Add method will call private Insert methods to add the value into the dictionary. Not entirely true. There is a subtle, but potentially significant difference. When a duplicate key is used, the indexer will simply overwrite the old value, but the `Add` method will throw exception at runtime. Consider the following: int key = 1; var ok = new Dictionary&lt;int, string&gt; { [key] = "test", [key] = "test2" }; var bad = new Dictionary&lt;int, string&gt; { {key, "test"}, {key, "test2"} }; The `ok` dictionary will run fine, overwriting the same key. The `bad` dictionary will throw an `ArgumentException: An item with the same key has already been added` error. Now in practice, I imagine most cases of dictionary initialization are using compile-time constants/literals for the keys so it's unlikely that you'll accidentally have duplicate keys. Even if the keys are determined at runtime, it's probably unlikely you'll have duplicates. But still, the distinction is there and possibly should be considered when writing your dictionary initialization syntax.
&gt; I wanted to some real projects to see what happens in them. While it's definitely a good idea to review others' code for inspiration on keeping your own code clean and maintainable, if you dive in to a big project without any goals I can *guarantee* you will be overwhelmed. Even experienced developers need time to get accustomed to a codebase when it's tens of thousands of lines of code+. I don't know how you learn, but I like to "deconstruct" code to learn how it works, so maybe you could take an open-source project you like and attempt to add some silly feature to it. Even if it's just a button that plays the Batman theme song when clicked. You'll have to search through the code for UI text or something that will help you find the right place to modify, then modify it.
I think the recognition on the overflow boundary condition with arguments on why the overflow exception should be thrown vs. their exception in that case would be what I would want to hear personally. Simply, the overflow exception gives more accurate information. Good luck. 
&gt; Any half-decent framework defines their own Exceptions classes. FxCop also yells at you when you're not using your own. 
I come from a sysadmin background, so they capitalized on that. I have a good history of learning quickly. There is so much to do here that I was of some value right away but yeah, pretty much very little c# experience. Every day is like cramming for a final.
Sure, except it really sucks....comparatively speaking. 
When something like this happens, it's a good idea to ask why the error is occurring, and how to stop it from happening in the first place. In this case, where are your `indexX` and `indexY` values coming from, and why are they sometimes bigger than the size of the array? For that matter, how is the array generated?
We are mainly a C#/.NET house. The build scripts use Ant/nAnt. We have a couple of iOS and Android products as well. My position puts me in charge of builds and infrastructure so I don't touch the client facing product very much. I've done a fair amount of PHP, ASP Classic, a little Perl, a touch of JavaScript, SQL, T-SQL, batch scripting, PowerShell, Windows scripting, VBscript. An admin has to touch a lot of things or else nothing gets automated. There are tons of online resources for those that are smart enough to learn independently (I am). But I've always wanted to be a programmer and I have to say it really tweaks me in the right way, by brain likes it.
The C# flashcards (second link) says a constructor is the same as a class. This is incorrect on a basic level. I can't trust the rest of it based on that.
Yeah i get pretty pumped up just thinking about it. im thinking that sql will be the next thing I pour time into after i finish learning a fair enough amount of c# half way through a 22 hour videos series on c# right now. then will focus on asp.net with the rest of it. Luckily I love learning and I hate the idea of school so im able to make a hobby and lifestyle of it. I'm also able to focus a lot of time on this because I own my own business that doesn't take much of my time.
I'm pretty happy with my SSPI library I wrote a few months ago (and I wouldn't mind some other folks taking a critical look at it). I just moved it to github too after no longer giving a damn about sourceforge. https://github.com/antiduh/nsspi
Holy shit man you've got some anger issues. /u/koherence's comment got upvoted, because he was helpful and went into detail. Your comment made no damn sense and wasn't helpful at all.
Thank you for clearing that up.
if you like math (or even if you don't), https://projecteuler.net/ is pretty great. gives you a defined problem, and how to solve it is entirely up to you. I learned an incredible amount just going through the first ten problems.
And you can still use it.
Not a single person here yet has mentioned... The new ASP.NET stack (And thus C#) runs in Linux/Mac under CoreCLR and Mono. No need for a VM anymore!
Maybe just maybe then I am not over analyzing by asking all these questions. The test case being just that only goes so far and doesn't cover all possible case scenarios.
I agree, but you could have formulated your request for additional info in a much nicer way. We all started somewhere.
Oh I thought about one feature and wrote about another. I correct feature name would be multiple cursors, you have that on Sublime Text. It's accessed by holding down Ctrl and clicking with the left/middle mouse button on the places you want to add a cursor.
If you are a student see if you can get into the dreamspark program, anything you would need to write anything under Microsoft's sun is in there, use that and just jump in. Thats how I got into it. https://www.dreamspark.com/Student/Software-Catalog.aspx
I'm not sure there is a word for that - typically that's the goal of encapsulation.
You might want to give this thread a browse: https://www.reddit.com/r/csharp/comments/2wd5fc/how_is_the_demand_for_telecommute_c_and_net_jobs/ My experience has been that as long as you can prove you're effective from a remote location then most companies don't really care where you are unless there are other factors like the cost of a proxy company or increased costs for things like taxes or tax preparation. Also a word of warning if you haven't worked remotely before: ensure you do research on if working remote would really be good for you given your personality. A lot of people like the idea but then either can't cut it remotely or hate it (the lack of social networking at work seems like a biggie to people). It's much more difficult to stay in the loop remotely as you miss the small things like bumping into people in the hallway. Additionally, your visibility to other employees (and managers) is by definition lower so progressing through the ranks becomes much harder as well if that is something you find important.
Looks like he decided to deleted all his posts/comments from his account.
Thanks for the advise and the link. 
I'm the author of the data structures project. Yes, it's incomplete. And I don't have time for completing or maintaining it anymore in the future. I'm looking for a maintainer of the project. If you're interested, please drop me an email.
the reason for making a class is because this is a school assignment with class quantity requirements. I shall give those a look, thank you for the response!
When did method definitions become "old style"?
I use Parallels and run Visual Studio in coherence mode.
I like it because I have many methods that are only a line long. Such as methods designed solely to make a readable if. if(UserIsGay(sex, preferredSex)) // ... private bool UserIsGay (Sex s, Sex ps) =&gt; s == ps; 
These are great, keep them coming!
Wait what?! That's possible!??!?! If so you've just made my day (night). Can you tell more how this is possible? From [this Unity forum discussion](http://forum.unity3d.com/threads/unity3d-in-net-framework-4-0.230746/), include posts from a Unity person, it doesn't seem possible. ~~(I have a bad feeling -- for my sake -- that you are talking about Microsoft Unity, not Unity3D...)~~
His suggestion was to just wrap it in a try-catch block. The code was this: try { arr[x, y]++; } catch { } While this technically answers the question ("how to ignore errors"), it is really bad code. Exceptions should be exceptional - not expected. Exceptions are expensive to throw. And in this case it is really easy to prevent them in the first place.
Hmm... that really works for you? I mean I think that only changes it in MonoDevelop, but when you go back to the Unity editor, does it compile without errors? You know, never mind, I think I understand what's going on. Unity DOES support default parameters (I used them all the time). Based on your instructions, sounds like you are using the standard MonoDevelop, not the MonoDevelop-Unity that ships with Unity -- is that so? Anyhow that setting only affects static analysis/warnings in MonoDevelop, not what Unity actually uses. Anyhow, sadly this doesn't help with Contract. :-( But thanks for the idea.
My first instinct was going to be HashSet but IEnumerable has the advantage of being potentially infinite.
When I first discovered it, I was using the MonoDevelop that's bundled with Unity. I think it was Unity 3. I'd never touch MD otherwise - I really don't care for it. I can't remember for sure... I thought I got the errors in Unity's UI - but maybe it was indeed only in MD. Default Parameters is a .NET 3.5/4.0 feature, though... it definitely wasn't in 2.0, so if you can use them, you aren't compiling against 2.0. I use Visual Studio now that's it's a viable option. 
IIRC default parameters are a compiler feature rather than runtime, so you can use them and compile for 2.0, you just need a compiler &gt;=3.5
Oh - that actually makes a lot of sense. 
&gt; Default Parameters is a .NET 3.5/4.0 feature It's a C#4 feature. It's unrelated to .NET.
Never. It's the "old style" for people who write shitty code and will adapt this alternative way of writing bodies for everywhere. For everyone else it's just an alternative style.
No. You can like as many different flavors as you want, but you can't pick "all of them" as your favorite.
ArgumentException should never (or very rarely) be caught; its intended use is to indicate an error in the program, not in data or similar. 
I don't think your friend is right. Gmail directions only say that you need to connect with secure method (SSL or TLS) and then use your account/password to authenticate: https://support.google.com/a/answer/176600?hl=en (the middle column is what's applicable to you). Here is pretty much complete example for using gmail smtp with SmtpClient: http://stackoverflow.com/a/9801414/20195 
Some people are into that!
What, you can't like Phish Food and Chunky Monkey equally?
You probably don't want to instantiate *every* form in your program in Program.cs. Some of them might have short life-cycles and you don't want them kicking around in memory the whole time... First thing to do is create an event handler from the menu item you want to use to show the form. Click on the menu item in the designer, go to the Properties tab, switch to Events, and double-click the event hander for Click. This will create an event handler with a signature like this: protected void MenuItem_Click(object sender, EventArgs e) { } Inside that, you can put the code to instantiate and show your form. So if the form type was called "SettingsForm": protected void MenuItem_Click(object sender, EventArgs e) { // Instantiate var settingsForm = new SettingsForm(); // It's a good idea to set the owner settingsForm.Owner = this; // Finally, show it. settingsForm.Show(); }
You'd create them as member variables of your Program: static class Program { public MyForm MyForm; Instantiate within Main(): static void Main() { MyForm = new MyForm(); and then show from within the event handler, referencing Program.MyForm: protected void MenuItem_Click(object sender, EventArgs e) { Program.MyForm.Show(); But that's *really* messy and hideously bad practice, in terms of the Single Responsibility principle. If you want forms that do span the life of the program, I'd create something like a FormManager that would be a singleton and would manage all the references to the forms.
OK. I'll do a google on singleton.
Is aspnet on OS X (dnxcore50) as feature complete as mono?
Thanks for the virus domain link.
I like the other suggestions on here Beyer than this, but another option would be unity 3d.
thanks man! that was great overview.
Not complete.
&gt; time spent distributing the app and pushing out successive versions will easily eclipse the extra time writing it in a short period of time. Wrong. There's tons of automatic installers / updaters for .Net applications. See Squirrel.
&gt; Javascript is used to manipulate UI Because HTML is retarded and pathetic and has no concept of data, because of course it was created for the purpose of doing static documents and never real application UIs.
TurboTax Online comes pretty close to the desktop version. Mint too. Those are the only web-based apps I can think of that I would use over similar desktop apps. To your point, Gmail has probably had a ton of really smart developers focused on it and it still doesn't come close to the responsiveness and usability of Thunderbird. Gmail is still better than Outlook though, but that's not saying much. :)
*C# in depth* and then practice practice practice.
Yep, I've been working on a project at work recently where we have a grid of data that can pretty much be customised entirely by the user. They can change the columns, add custom filters, define how the data is aggregated etc. This is financial data, which is constantly changing, so we have to deal with multiple updates each second. Because the aggregation levels are defined on the client, the cells in the grid aren't exactly what the raw data is, so if you wanted a very thin client the server would need to maintain state of what each client's view settings are to provide them with the appropriate updates. All perfectly possible, but given the volume of updates and the number of users it's a non trivial amount of effort to get that working. What we went for in the end was a thicker client that caches an initial set of the raw data so that as the user changes their view we can just regenerate quickly against that cache and when updates come through we update the cache and apply to each of the views they have open. Then you get requirements like Excel integration and a fat client application (WPF in this case) makes far more sense than something web based.
Like it's my fault. Besides, you haven't answered my question. 
WinForms has data binding.