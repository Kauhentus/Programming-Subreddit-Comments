Don't see the dot before whack whack (.//stuff), check above link. Exampled like this node.SelectSingleNode(".//span[@itemprop='name']").InnerText
Nope! exactly my reaction - is this a joke? Are you people not capable of reading {get; set;} notation? If it's missing a {set;} then its fucking not settable.
A web server. In order to use Microsoft's Excel library in a web app, you had to have Excel installed on the server. EPPlus - and other similar libraries - acted as interfaces to Excel files to eliminate that need. But now you can add a reference to the Excel library and compile it into your solution. I've never used EPPlus, so I don't have an opinion on it. If it provides all you need then the only concerns would be its licensing (LPGL) and any concerns about long term support. From your other post: &gt; Do you have an article as to how to use the Microsoft Excel library instead? That's a big subject. I would recommend looking at the Microsoft documentation.
Oh yes Thanks it worked!
The way I usually explain async/await is "this is just a syntactic sugar for callback chain". If person already wrote any kind of async code - it's usually a pretty good foundation. 
If you need to do a lot of rest calls in parallel - definitely look into Tasks (C#/.net equivalent of Promises) and async/await. Some example: Task&lt;IEnumerable&lt;Article&gt;&gt; articlesTask = restClient.GetArticles(123); // you can do other stuff here, GetArticles is being executed in the background //await does non-blocking wait for the task of GetArticles IEnumerable&lt;Article&gt; articles = await articlesTask; //foreach article we lauch an async background get, collect the tasks of these gets into list List&lt;Task&lt;Category&gt; categoryTasks = articles.Select(a=&gt;restClient.GetCategory(a.CategoryId)).ToList(); List&lt;Category&gt; categories = new List&lt;Category&gt;(); //then we just iterate over the list of tasks, awaiting each of them to get result. //No blocking here, it's like a long chain of callbacks //All requests are parallel and asynchronous, no thread blocking here foreach(Task&lt;Category&gt; categoryTask in categoryTasks) { categories.Add(await categoryTask); } 
Agreed. If you're using modern C#, you should not be touching raw threads unless you have an extremely good reason.
Whatcha looking for probably is membership. A route can be decorated with [Authorized] regardless how they logged in.
I get the Authorized decorator but am not too familiar with membership do you know of any articles or code I can look for a better idea.
IIRC you don't want to use `new Thread()` since then you have to worry about killing spawned threads you aren't using. 
I have been debating about just using roles, it seems the easiest way to go at this.
`ExceptionDispatchInfo` is new, and useful for rethrowing an error that you couldn't re-`throw` directly from the scope in which it was caught. Explaining that might be more productive than tossing it in without context, and then complaining about etiquette.
https://docs.microsoft.com/en-us/aspnet/core/security/authorization/ 
A `Thread` will exit once the method passed into its constructor returns.
Looks to me you're trying to convert the `ListViewItem` to your `CalendarEvent` which wouldn't work. How do you populate the ListViewItems in the first place? Do you set their `DataContext` to be the `CalendarEvent`? If so, you could probably do this instead: var id = ((CalendarEvent) item.DataContext).CalendarEventId;
"I want there to be a login for the company" Sounds like you are looking for a multi-tenant approach. If you view the "basic overview" information for the company, without being logged in as a user, is that information public? I.e. what are the security requirements for viewing a company before logging in. **Can anyone see the company's "basic overview", or do you want to ensure only the employees of the company can see it?** If it is public, then in MVC I would add a route parameter that is a URL friendly name of the company or a companyid. That id would be passed down through layers and any queries would include it as criteria to limit results to only information relevant to that company. Here is an example of what I'm talking about: https://stackoverflow.com/a/24386203/84206 You can also route on subdomains, if you wanted each company to have their own subdomain, but this is more complicated to setup and cookie scope must be handled properly. However, if you want to hide company overview information and only allow actual employees to see, then you probably should just require the employee login, and add a property to their identity identifying their owning company. Again, you would use this companyId from the current login to constrain all queries. If it is rare that employees may need to access to companies, then it is probably easier to just require the employee have a login for each company. If you allow a login to belong to multiple companies, then everywhere you constrain a query on company ID, you'll have to make sure the criteria includes all company ID's. Possibly but makes things more complicated across the board.
Then I did not in fact recall correctly! My bad. 
I've looked into this, but unless I'm missing something, it only seems to offer request length tracking. Do you know if there's more to it?
Seems like it will be IAsyncEnumerable, but with language support. So something like: foreach await (string s in asyncStream) https://www.infoq.com/news/2017/05/async-streams
As a business programmer when ever I see any threading in virtually any C# application I brace myself for a cluster fuck. It's either someone too stupid to understand threading or someone too smart to understand people.
You've said that exact same thing to 3 different people. Maybe one of them isn't even "bothered" by the syntax and just wants to understand your point of view. 
Yes, you've described async streams. But we're talking about a decision made by an existing API.
So is it that the task being awaited just runs in the background and when it's done, the runtime triggers an interrupt on the calling thread? This is easy to understand in the case of network calls, the way AJAX calls are made in JavaScript. But what if the background activity has to run on the same computer? Some number crunching, maybe. How does that run on the calling thread without blocking it?
You want to look into using identity and roles with ASP.NET MVC Core. https://code.msdn.microsoft.com/ASPNET-Core-MVC-Authenticat-ef5942f5 You can then isolate specific functionality by role. You take this a step further by implementing further roles like canAdministrate, canRunReports, canView etc
Regarding Random, read this: https://blogs.msdn.microsoft.com/pfxteam/2009/02/19/getting-random-numbers-in-a-thread-safe-way/ And here is why: &gt; While it won’t happen every time you run the app, on a multi-core machine it’s likely that once the Parallel.For in this example exits, rand.Next() will always return 0. Not very random, is it? This is due to an implementation detail of Random that does not tolerate multithreaded access (it wasn’t designed for it, and the docs explicitly call out that Random should not be used from multiple threads, as they do for most types in the .NET Framework). That article goes further into how you can use Random appropriately. General notes: * Do not use Thread() like that. Creating a thread is expensive, and creating one every time the user presses the button is wasteful. Read this: https://blog.stephencleary.com/2013/11/taskrun-etiquette-examples-dont-use.html It would be better to call the method using Task.Run and use async/await, however, read the article and do it correctly! * Create the dataGridView and attach a binding to it. Here is an introduction to it: https://docs.microsoft.com/en-us/dotnet/framework/wpf/data/data-binding-overview That way, you won't have to redraw the control every time (and avoid flickering). If you NEED WinForms: https://docs.microsoft.com/en-us/dotnet/framework/winforms/windows-forms-data-binding * What is the point of Thread.Sleep? Either way, try to avoid it. Here's why: https://stackoverflow.com/questions/8815895/why-is-thread-sleep-so-harmful Use a wait handle or event (just don't forget to Dispose() it). In short, it is not thread-safe, but there are other considerations that are just as important... hopefully this helps you.
I used Perl for something like 20 years, off and on, but have hardly touched it for a few years now. Going from Perl to C#, make sure that you use generic types like Dictionary&lt;&gt;, instead of thinking *"Hm, I used hashes in Perl, so I'll uses hashes here too..."*. So far, I've found that pretty much anything I could do in Perl, can just as easily be done in C#. Also, just as Perl has CPAN, be lazy and see if what you need is available as a "module" on https://www.nuget.org/. 
Thanks for the response! Will look into all of these!
Can confirm, unused return values of any type are just ignored.
I'm having a play with some of the ms bot stuff at the moment my understanding of the async/await concepts is blurred by method calls such as context.PostAsync() ???
You're welcome!
They're still doing the community standups? Why is there never a blog post anymore?
The Community Standups are fairly new. We like the interaction and dialogue we can have with the community through the standup. We still do blog posts, but only for major version changes.
Oh, I confused it with the ASP.NET Community Standup, which was introduced like a year ago. For some time they posted a recap as a blog post. This is great for people who want to get updated, but really can't deal with long Youtube videos.
Ahhh, yes, they have been doing those for a while. I will pass this feedback along to Hanselman!
If you declared it _in_ a method, it's a local variable and can't be accessed from any other method - it will be lost after the method returns. If you want it to be accessible from other methods, you'll have to declare it as an instance variable on the class. For example, "private Dictionary&lt;int,string&gt; myDictionary;" somewhere within the class scope, but outside any method.
Search for OCR (optical character recognition) instead. You get a lot of hits on that. 
I guess the best option would be DialogBox. Implement it before you are doing that thing. It can have a yes and no button. You can use "Dialogbox.Result" to get what the user clicked and use an "if" with that
But doesn't there pop up a Dialog window then? I don't want it to display anything...
Oh, you don't? How else do you want to do the confirmation thing?
Yeah but why can't we use string to manipulate a string of one character ?
I want it to ask me yes or no, following by me giving a verbal response (yes or no) and the program acting on that response. I wasn't 100% clear on that i guess.
https://www.nuget.org/packages?q=ocr
Well I would just use the same thing you used already. Have the voice ask "Yes or no?", wait for response. Then use 'if(text=="yes")' and then execute the command
Yes I've thought of that and tried to get it to work but I couldn't figure out how to get it to work in the code. Would you have any idea how to implement it in, for example, this bit of code? case "hey computer, close program": synthesizer.SelectVoiceByHints(VoiceGender.Female); synthesizer.SpeakAsync("Closing program"); SendKeys.Send("%{F4}"); break; 
My question was more why would you use char specifically instead of a string. I can see the use of enum, for readability or preventing errors, but fail to see the use of char instead of string.
thanks 
In case you missed it https://www.reddit.com/r/csharp/comments/6w0s9l/things_i_didnt_know_about_c_part_1_events_vs/dm53p98/?utm_content=permalink&amp;utm_medium=front&amp;utm_source=reddit&amp;utm_name=csharp
How about this approach? It will only use async to wait for data and while there is data, read all bytes in the stream. Please know that this is only an acceptable approach, if you REALLY need to read the site byte per byte (you probably don't), you expect a lot of wait times and you can't create a thread per client. private async Task ProcessStreamAsync(NetworkStream stream, CancellationToken token) { byte[] singleByteBuffer = new byte[1]; bool bytesRead = false; int intBuffer = 0; while(!token.IsCancellationRequested) { if(!stream.DataAvailable) { // Use ReadAsync to wait asynchronously for the incoming data. bytesRead = await stream.ReadAsync(singleByteBuffer, stream.Position, 1, token) != 0; } else { // While there is data, we read byte per byte. intBuffer = stream.ReadByte(); bytesRead = intBuffer != -1; if(bytesRead) { singleByteBuffer[0] = (byte)intBuffer; } } if(!bytesRead) { // stream ended return; } await ProcessByteAsync(singleByteBuffer[0]); } } private Task ProcessByteAsync(byte data) { // process data }
It's no secret that a lot of the new Windows 10 apps are written using UWP.
We can but we can't indicate in C# at compile time that we require one character and also char being a value type and all is much faster than string[1]. Algorithms that walk over a string char by char (i.e. every string algorithm) will do a lot of allocations and put a lot of pressure on the GC.
ServiceStack orm?
Give me a few minutes
Thank you!
Thanks
**Almost** any time you see Async() at the end of a method, it's an asynchronous marked method which can be awaited. There is a couple of exceptions like Socket.ReceiveAsync, but in general you're good to assume it will run asynchronously. Generally your code will either be running synchronously, or asynchronously; and the two don't mix well. People often say that async code is like a virus; once you introduce a small amount (often to a low-level operation like I/O or a remote call) you end up having to convert all the code above it, all the way to the entry point - which might be an event handler (WinForms) or a controller action (MVC), or whatever else. If you write an async method you should name it so - for example public async string DownloadMyWebsiteAsync(); That way anyone who uses this code (including you) knows straight away it's an async method. In general think of async/await as a really nice way to tell the framework that code can **pause** at certain times while background stuff happens. Think of TPL as nice ways to tell the framework you'd like to run certain bits of code **at the same time** as other bits of code. This is a pretty shit explanation (async/await is awesome for running stuff in parallel) but it's a good way to think about it as you are starting out.
Win10 as a whole was written in at least 10 languages: x86(-32/-64) assembly, C, C++, C#, VB.NET, F#, Powershell, JScript, VBScript, Batch.
The beauty of Task abstraction is that the caller doesn't need to know how exactly operation is performed. In case of .net framework - the thread has a SynchronizationContext associated with it. When awaited task is signaled, the callback is posted to that context. And in case of UI thread, the context will put it into the event loop queue, otherwise it will submit it to the threadpool. So for example if you need to do a lot of computations triggered from UI thread, you can do it like var result = await Task.Run(()=&gt;ComputeSomething()). And it will not block the UI thread, but continuation will be scheduled to it. | UI Thread | ThreadPool thread | | ---------- | ------- | | Event handler | | | Trigger the background operation via Task.Run | Operation started | | await - return to event processing | processing operation | | processing other events in the loop | processing operation | | processing other events in the loop | signal the task, schedule continuation to UI thread (because of await context) | | process continuation | |
It did work out fairly well - thank you. I am running now into other problems regarding the memory / run time etc. of the computer itself.
Hey, to make it easier and more reusable how about making a method which accepts an Action? Something like this: private void ConfirmAction(Action act){ synthesizer.SelectVoiceByHints(VoiceGender.Female); synthesizer.SpeakAsync("Are you sure you want to do this?"); //Put a confirmation dialog here... if(confirmed){ //Now the user confirmed, execute the code. act(); } } Here's an example of it's use: Case "hey computer, pause Netflix": ConfirmAction(() =&gt; { SendKeys.Send(" "); }); break; I wrote this on my phone, forgive me for any errors. Code should work but hasn't been tested.
So first we need it to say what you want: ` synthesizer.SelectVoiceByHints(VoiceGender.Female); synthesizer.SpeakAsync("Are you sure?"); ` Easy. Next we need it to recognize your speech. This part is really tricky as I have no idea how the rest of the code is built. You need to run the voice detection again. No way around it. And you most likely need some sort of way to wait for that. You have a few options, maybe use a second thread? Now, let's say you managed to get it to listen and it recorded your voice again. You now have a "yes" in string form. What you could do is either trying to run a different function with only case yes and no, or have it call the same function but add this: `bool somename = false; switch (e.Result.Text) {...(here you have all the other cases)... case "yes": somename = true; break; ` ` case "no": somename = false; break; } ` Now you call this function right here: `case "hey computer, close program": ` ` /call voice-rec again, you somehow need to have it wait here until you speak/ ` ` /Say "Yes" or "No"/` ` /depending on the case the bool somename will be true or false and the program should continue executing right here/ ` ` if(somename==true){ synthesizer.SelectVoiceByHints(VoiceGender.Female); synthesizer.SpeakAsync("Closing program"); ` ` SendKeys.Send("%{F4}"); }else{ synthesizer.SelectVoiceByHints(VoiceGender.Female); synthesizer.SpeakAsync("Program will not be closed"); } ` ` break; ` I have no idea if this is going to work like that, it's hard since I can't try. But if you mess around with it a bit you should find something. Most important part is getting the thing to wait for your voice input again. I hope you can find a way.
I'd separate these into commands, and have a separate confirmation command. Each of the commands has an activation text, and has the confirmation command and action injected into it. e.g. public class ConfirmationCommand:ICommandBool{ public bool Execute(){ // Confirmation (true/false) // or // Timeout false } } And for you standard commands public class TurnOnNetflixCommand:ICommand{ public TurnOnNetflixCommand(ICommandBool confirmationCommand, IAction turnOnNetflixAction){ _confirmCommand=confirmationCommand; _actionToRun=turnOnNetflixAction; } public bool Execute(string textToMatch){ if(textToMatch!=_textExpected)return false;//don't run this command fully //otherwise Run your action _actionToRun.Run(); return true; } } And in your action public class TurnOnNetflixAction:IAction{ public void Run(){ synthesizer.SelectVoiceByHints(VoiceGender.Female); synthesizer.SpeakAsync("Starting Netflix"); System.Diagnostics.Process.Start("https://www.netflix.com/browse"); } } Then you'll end up creating all these commands and actions, run by a simple loop, or even through a linq command.. public class MainApp{ private ICommand[] AutomationCommands; public MainApp(){ synthesizer.SelectVoiceByHints(VoiceGender.Female); synthesizer.SpeakAsync("What is my purpose?"); } private void recEngine_SpeechRecognized(object sender, SpeechRecognizedEventArgs e) { RunCommand(e.Result.text); } private void RunCommand(string commandAsText ){ foreach(ICommand cmd in AutomationCommands){ if(cmd.Execute(commandAsText)) break; } synthesizer.SelectVoiceByHints(VoiceGender.Female); synthesizer.SpeakAsync("What is my purpose?"); } } If you're a beginner, this may be a little complex at first, but if you dig deep into the command architecture, you'll see its worth it. You may even be able to **abstract** out common behaviour in the commands, and remove the dependency on the speech synthesis altogether, meaning you could use alternative ways of your PC receiving commands, such as **Alexa** or **IFTTT** and all you would need to do is swap out the injected functionality. Happy programming. 
Sorry to break it to you but that is way beyond your current skill level.
Read [this](http://www.albahari.com/threading/) It's much better.
Also, check out the microsoft bot framework and cognitive services if you really want to get chatty with your pc.. https://docs.microsoft.com/en-us/bot-framework/cognitive-services-bot-intelligence-overview
wtf does that mean? 
Use a variable in the app to store the last commandText and a confirmation flag, then have a new switch which has the confirmation. In the original command case, have a check for the _confirmation flag and if it is set, run the action and clear the commandText and the confirmationFlag, otherwise save the command text and exit out of the switch. Back in your confirmation case, have a check for the commandText, and if it is not empty, set your confirmationFlag and call the same method again, but with the commandText. You may need to refactor your switch into another method..
I like the course [C# Fundamentals]( https://app.pluralsight.com/courses/c-sharp-fundamentals-with-visual-studio-2015) by Scott Allen. You can get a 3 month trial period on Pluralsight for free from Visual Studio Dev Essentials. There are many more C# courses on Pluralsight as well.
The sender parameter (object type) is the control that is calling the event, that's why casting it to "DependencyObject" is throwing an exception. 
No it's called let the PhDs do all the hard work for you and import it as a library. 
https://blogs.windows.com/buildingapps/2016/02/08/optical-character-recognition-ocr-for-windows-10/ It is for Windows 10 apps, I don't know if win32 applications can use the Windows 10 api.
Whoa, that was more than I expected. 
Very good project. Readable, understandable and well organized. ✔
OP again, this is how/where I populate the listview: protected override async void OnNavigatedTo(NavigationEventArgs e) { base.OnNavigatedTo(e); // system.net import!! HttpClient client = new HttpClient(); var jsonstring = await client.GetStringAsync(new Uri("http://localhost:64288/api/calendarevents")); //json nuget package!! var lst = JsonConvert.DeserializeObject&lt;ObservableCollection&lt;CalendarEvent&gt;&gt;(jsonstring); lvagenda.ItemsSource = lst; } EDIT: i've solved it, added the solution above.
As a programmer you should expect the [unexpected](https://www.youtube.com/watch?v=QqreRufrkxM). Thanks, btw :D.
Thanks, appreciate it.
Dealing with programmer output expectations is a constant battle. 
Video linked by /u/n4csgo: Title|Channel|Published|Duration|Likes|Total Views :----------:|:----------:|:----------:|:----------:|:----------:|:----------: [The Spanish Inquisition](https://youtube.com/watch?v=sAn7baRbhx4)|Naz Nomad|2007-06-25|0:00:08|2,983+ (98%)|429,506 &gt; Nobody expects The Spanish Inquisition --- [^Info](https://np.reddit.com/r/youtubot/wiki/index) ^| [^/u/n4csgo ^can ^delete](https://np.reddit.com/message/compose/?to=_youtubot_&amp;subject=delete\%20comment&amp;message=dm8ew0f\%0A\%0AReason\%3A\%20\%2A\%2Aplease+help+us+improve\%2A\%2A) ^| ^v2.0.0
As others have mentioned, you can't update UI control from a background thread. You need to change your final line to something like this dataGridView1.BeginInvoked(new Action(() =&gt; dataGridView1.Rows[i].Cells["Column2"].Value = number)); the BeginInvoke(...) will execute the Action on the UI thread. For a WinForms app, this is a standard way of marshalling data updates back onto the UI thread. 
And what would I have to do in order to fix my problem? (I've also added a response to another user on how I populate my listview with data, basically a get jsonstring &amp; deserializeObject) EDIT: solved it, added solution above.
https://docs.microsoft.com/en-us/windows-server/administration/performance-tuning/role/active-directory-server/ldap-considerations 
You can try using a [Tesseract Wrapper](https://github.com/charlesw/tesseract).
Get that gatekeeping crap out of here. 
If you haven't already, you should really create a NuGet package for this. I'm going to be taking a look at this for automatically creating/updating packages upon Git commits: https://weblogs.asp.net/bsimser/automatically-publishing-nuget-packages-from-github
Thanks for the response! But, when you say you cant update UI control from a background thread, do you mean it wont work, or it's not recommended? The reason I'm asking is, my datagrid seems to be updating fine. I really want to understand what you mean.
Thanks. Would look into it. Didn't know it's that easy to add something to NuGet.
Usually when something goes wrong when updating a control from a background thread, the control is replaced with a white box with a red X in it. But like most errors when using classes that aren't thread safe, the errors will be intermittent. It might work fine 99% of the time. 
This is really impressive! Thorough and well-organized. I think you should be able to implement A* fairly easily from what you have, since A* is a generalization of Dijkstra. If I have time tonight I can check out how easy it would be to insert heuristic-handling code into `DijkstraShortestPathsFinder`. I don't want to overstep my bounds, though, since you say this is a personal project.
I just recreated a sample application in WPF (Yours is in UWP?) and did some tomfoolery to do the same thing: click a button, crawl up to get the `ListViewItem`. In my sample, I can then access the `DataContext` just fine and it's a reference back to the original item that was assigned to the `ItemsSource`. Did you try the code I suggested? If you did, and it didn't work, what error did you get? What was `DataContext` at that point? var id = ((CalendarEvent) item.DataContext).CalendarEventId; EDIT: Just realized this probably won't work as-is. Try this instead: ListViewItem listViewItem = (ListViewItem)item; var id = ((CalendarEvent) listViewItem.DataContext).CalendarEventId;
Thanks and I would gladly see what you have in mind :)
Thanks. Yeah I had decided to go by this approach with the buffer moved into a field. Basically an extension of BufferedStream. I "can" create a thread per client but then my server wouldn't be scalable. So that's not an option. The main reason I want to read byte by byte async is because my application layer packets are prefixed with a *varint* length. Varints are of variable length by design and *need* to read byte by byte. You proposed a solution but don't really recommend it. So let's forget about ReadByte and all and tell me how would you read a varint from a network stream without blocking (With Task based asynchronous pattern)? 
Thanks for trying it out! I've come to a solution :). Now I have another problem lol, maybe a lot simpeler for you to answer: I need to get the text value from a textbox in this listview (code here:) : http://imgur.com/a/6xlvb . For example I need to get the text of tbevent textbox here. Something like calevent.Name = this.tbevent.Text; or calevent.Name = lvagenda.tbevent.Text;
Another interesting fact about events is that events have add and remove accessors. for example void Main() { var bar = new Bar(); bar.EvBar += (s, e) =&gt; "Yey".Dump(); bar.Start(); } public class Foo { protected event EventHandler EvFoo; public void Start() { EvFoo?.Invoke(this, EventArgs.Empty); } } public class Bar : Foo { public event EventHandler EvBar { add { base.EvFoo += value; } remove { base.EvFoo -= value; } } } 
My understanding that if you have the `tbevent` bound to the `Name` property of the `CalendarEvent` object, that it should automagically assign the text written in TextBox.Text back to the bound `CalendarEvent` object automatically. Maybe the default binding mode is different for you. Try updating your binding to this: Text="{Binding Name, Mode=TwoWay}" EDIT: That is, if the binding is setup, then you should have this working automatically: ListViewItem listViewItem = (ListViewItem)item; CalendarEvent calevent = ((CalendarEvent) listViewItem.DataContext); string newName = calevent.Name; //the "Name" is already updated to the TextBox input
Good stuff. 
Dotnetperls is an excellent and clear resource for anyone. 
~~I've tried your code, but get an error on "item", where did you get the name from? Above I have following: var item = sender as Button; So the error is as follows: Cannot implicitly convert type Button to ListViewItem. ~~ EDIT: I've made it work by commenting out the line: ListViewItem lvitem = item; I can update now! :)
The code/casting there was based on the assumption you still were using this code to crawl up to the wrapping `ListViewItem`: var item = sender as DependencyObject; while(!(item is ListViewItem)) { item = VisualTreeHelper.GetParent(item); }
I've actually somehow made it work (delete/update events) without using this lol. Sorry should have been clearer. The code I have now &amp; working is: private async void tbupdate_Tapped(object sender, TappedRoutedEventArgs e) { var item = sender as Button; var data = item.DataContext; var id = ((CalendarEvent)data).CalendarEventId; var weburiupdate = "http://localhost:64288/api/calendarevents/" + id; HttpClient client = new HttpClient(); var jsonstring = await client.GetStringAsync(new Uri(weburiupdate)); CalendarEvent caleventjson = JsonConvert.DeserializeObject&lt;CalendarEvent&gt;(jsonstring); CalendarEvent calevent = ((CalendarEvent)data); caleventjson.Name = calevent.Name; caleventjson.Adres = calevent.Adres; caleventjson.ForWhom = calevent.ForWhom; caleventjson.DayOfEvent = calevent.DayOfEvent; caleventjson.Time = calevent.Time; string caleventupdated = JsonConvert.SerializeObject(caleventjson); var res = await client.PutAsync(weburiupdate, new StringContent(caleventupdated, System.Text.Encoding.UTF8, "application/json")); this.Frame.Navigate(typeof(AdminAgenda), null); } private async void tbdelete_Tapped(object sender, TappedRoutedEventArgs e) { var item = sender as Button; var data = item.DataContext; var id = ((CalendarEvent)data).CalendarEventId; var weburidelete = "http://localhost:64288/api/calendarevents/" + id; HttpClient client = new HttpClient(); var res = await client.DeleteAsync(weburidelete); this.Frame.Navigate(typeof(AdminAgenda), null); }
Yeah, that's fine. As I said, with the binding, is `caleventjson.Name = calevent.Name;` not already using the newly entered name?
Depends highly on the company. Some use TFS, some Git, just as long as you know some type of source control. Some do Agile, such as SCRUM, some don't. If you do, be prepared to report every day on what you've done and are doing. And if you already have the job, I highly doubt they will give you some "test project", they will start you off simple to learn their process, then move you up as you gain more knowledge on how they do things. To be honest, as a junior dev, they probably won't expect much. Your job is to learn and to move up, not to prove yourself. That's a senior position (and even then, most companies just assume you know what you're doing)
Can you tell me more about you scenario? My assumptions: * More than a couple hundred clients * Packets (data/command?) are send in non fixed length * The packet stream is not continuous but the connection will be held * The packets are processed in a different thread 
Could be, I'll look into cleaning up the code a bit at a later date &amp; seeing was is reduntant or I use multiple times as well. Do you have any idea why caleventjson.DayOfEvent = calevent.DayOfEvent; Doesn't update the record? A CalendarEvent is built like this var calevent = new CalendarEvent() { Name = "", Adres = "", ForWhom = "", DayOfEvent = new DateTime(2016, 12, 31, 0, 0, 0), Time = "" }; for example. When I press the update button, all other records like name, time etc. are updated in the database, but the DayOfEvent record isn't. Is it because it's a DateTime or something? This is how it's in my xaml page: &lt;TextBox x:Name="tbdatum" TextWrapping="Wrap" Text="{Binding DayOfEvent, Converter={StaticResource StringFormatConverter}, ConverterParameter=\{0:dd/MM/yyyy\}}" Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" &gt;&lt;/TextBox&gt; Also when Mode=TwoWay is on, it says I should include a convertback function like so : public class StringFormatConverter : IValueConverter { public object Convert(object value, Type targetType, object parameter, string language) { if (value == null) return null; if (parameter == null) return value; return string.Format((string)parameter, value); } public object ConvertBack(object value, Type targetType, object parameter, string language) { throw new NotImplementedException(); } } I've no idea what to do next.
Very nice and clean. I like the binary tree balancing impl.
- Right - Yes length of packets can vary. First length is sent as a varint, then the packet data is sent. - Yes, I will send keepalive packets every 5 seconds. If the client does not respond for keepalive for 20 seconds, it's kicked. - I've done this in Go with goroutines and the closes thing in .NET is tasks. So, for each client, I spawn a task, have an infinite loop in it which reads packets (Reading should't block as I'm using Tasks and async-await) and then adds it to a concurrent queue, which the main loop of the game (In a different thread) reads from. This is a console app, so tasks will use thread pool. Specifically, I'm writing a minecraft server and here's the packet format: http://wiki.vg/Protocol#Packet_format
I'm not positive either. Honestly, I don't have too much experience dealing with XAML bindings. I assume the issue is that the runtime doesn't know how to do the conversion automatically to/from DateTime and your component. If you implement `ConvertBack` to parse the string text back to date, maybe it'll work: public object ConvertBack(object value, Type targetType, object parameter, string language) { var dateString = (string) value; return DateTime.Parse(dateString); } (Just a caveat, no idea if you'll have timezone issues doing this, but hopefully it would be irrelevant for you.)
take a listen to Scott Allen's course like /u/BrutalSwede said. Personally i did not like it very much and preferred the beginner course on Pluralsight. Best is if you know someone you can bounce questions off - i got a course through work. 3 days and i hammered that poor teacher with questions on all the things that didn't make sense after having watched the video courses beforehand (there was a lot, maybe i'm dense, i dunno, but it all sorta' clicked when the teacher explained). hell for beginner stuff, feel free to bounce questions off'a me and i'll try to answer what i can even though i'm still new, too.
[stupid comment removed]
Thanks, this is highly motivating because I kinda feel like I am ready for what's to come but I also fear the unknown. I find that its easy to be overwhelmed in this line of work.
Thanks for replying. I feel I have a good understand of Task, await etc., it's more the overall architecture I'm worried about. In Perl, you can break a lot of "programming laws" and get things done. With C# this feels like a "lesser good idea", in short of a better term, because you have to write more to get the same stuff done, but writing more also makes your code safer, more maintainable etc. In particular, where in the "food chain" do I start treating everything (...) as a task? For example, in the current Perl application, chaining methods to produce a result includes adding parameters to a global (yes, global) http client, so: my $articles = $model-&gt;article_factory # creates Article.Factory which has access to Article.Client -&gt;by_category_id( 12 ) # adds 'categoryId=12' to Article.Client's list of parameters -&gt;order_by( 'modified desc' ) # adds 'order_by=modified desc' to the Article.Client's list of parameters -&gt;as_collection; # realises the operation, i.e. tells Article.Client to do the GET and create an Article.Collection and return that. Given that the above returns a collection, I can do this: foreach my $article ( $articles-&gt;each ) { say $article-&gt;category-&gt;name; } This part is the _really bad part_, because each `$article-&gt;category` triggers a GET request to the REST service, i.e.: my $category = $model-&gt;category_factory-&gt;by_id( $article-&gt;category_id ); This works perfectly well, but it's super-blocking all the way. :) Also, this is where my brain stops working. One approach I've thinking about, is to create an ArticleRequest - or maybe a more general HttpRequest - object out of the chaining, somehow store those objects "somewhere", and do the requests in parallel when the realisation of the whole expression is done/wanted. But I have no idea where to even start implementing this in C#. :(
teressapanic, this is not an IoC container.
OMG so sorry I confused it with something else.
Ninject, I confused it with Ninject
That's cool. I agree with you that Ninject really shouldn't be used anymore with the other IoC options out there. :)
NDepend looks really awesome. That said, it's rather expensive and hard to justify the first year (the 40% off for recurring subscriptions is much more palatable). Does anyone know if they run specials at any time?
Hi, this is really fantastic! If you don't mind, I would like to share your project with my old DSA professor! I think he would be impressed, especially since our university moved to teaching C# as our fundamental programming course.
It worked :)! I didn't have any issues regarding the time as the system just adds 0 00 00 at the end (getting something like this: 9/09/2017 0:00:00). Thank you for all your help &amp; time!
Interesting! Great you implemented the Fibonacci heap, I did that years ago too in my datastructure/algorithm library Algorithmia (https://github.com/FransBouma/Algorithmia), which to my knowledge was the only C# one till yours was released. Looking at your implementation it's different from mine, which I find interesting as I assume you too followed the Tarjan paper? For the rest nice set of stuff!
np, glad everything is working for you! :)
In my cynical experience, nothing productive happens on the first day of work. You'll be needing your senior devs or project management to help get you access to the code repository, help you get all necessary software licenses etc. (that is, providing a development computer (virtual or otherwise) has already been assigned to you). You'll be handed some documentation on the existing code base and maybe a high level explanation of what kind of project you're going to get assigned. None of this stuff gets done ahead of your first day (though it probably should) and the senior dev or PM won't be able to commit their whole day to getting you set up on your first day. What you can realistically achieve won't have anything to do with coding C#. On day one you'll be getting settled into the business structure itself. Learn your teammates' names and roles, get an understanding of what decisions are made by your immediate supervisor and what he/she has to escalate. Learn how their software development cycle works (if Agile, what tools?) Learn how the error reporting process works and what part of it you'll be using and/or supporting. The rest of the first week you'll get a code walkthrough and I would bet the first thing you get to work on is an existing error where you'll be expected to debug the problem.
Of course, no problem.
But if you do not require special services (such as functions or blob storage) and don't require scaling.. it's too expensive. A VPS hoster is usually much cheaper in that case. Takes a bit more effort in setting up your stuff, but saves bucks in the long term.
I don't require that. What other services should I use?
A little feedback after a quick glance at the code is that some line comments say the *how* and not the *why*. The how is already apparent from the code itself because you used proper var names so right now I think they clutter the code more than it adds. These comments are imo of a lower standard: https://github.com/abdonkov/DSA/blob/master/DSA/DSA/Algorithms/Graphs/KruskalMSTFinder.cs These comments look nice: https://github.com/abdonkov/DSA/blob/master/DSA/DSA/Algorithms/Searching/BinarySearcher.cs 
YMMV. The last time I looked at Azure for something little, I realized it was probably going to cost my boss more for me to figure out the cost on Azure than it was going to cost for a year on the super-cheap host he had in mind.
Bad bot. You ruined it.
Hot damn. That's awesome. If only it weren't so expensive... :(
After a fast look the logic look pretty much the same. The heap is build of trees, with you having a list of tree roots. And trees of same order are merged until one max of certain order is left... You are puting your root nodes in a list and mine are linked to each other, so pretty much the same.
 I agree with it being an awesome service, and especially its application insights and their new debug snippets (which work absolutely amazingly in production), however I don't believe it's that great for personal small projects, as others said, it's way more expensive than just getting a cheap digital ocean server.
 Do you have resharper or anything installed? My intellisense is MUCH faster than in 2015, but I do get hangs from time to time now which can be annoying.
Nope, no plugins.
Yes. I have overcommented in some places just for the sake of it. I think, for me personally, it depends on the mood and sometimes I feel like commenting everything, but at times the code explains itself pretty good and comments are not needed. After all, I do have to work a little bit on my commenting practices :). Thanks for the advice.
I'd hire you. Twice.
Dude, this is amazing and perfect timing for me! I'm literally in my Data Structures class in college right now. It's completely in Java and I've been wanting examples in C#. :)
It's normal to feel overwhelmed at a new job, even as a senior developer. It passes once you get into it. My main tip would be don't bullshit. If you don't understand something, say so - even if it seems like something you'd be expected to know. Just be prepared to put in the work yourself to help it sink in if you're not getting it when explained. You're guided how/what to learn, but real understanding comes from practice and feedback/followup questions.
Another option would be throwing a certain class of exception (define your own subclass of Exception for this condition), and the caller could catch that if they want to.
Good to hear. Mine course in uni was also in Java so I made my own. Ha, Java, fucking casuals.
Ok so you don't know the length but you do know the maximum length of the varint wich is 5 bytes. So create a buffer of 5 bytes, read the varint (via Stream.ReadAsync) into the buffer and when you know the complete length of the packet, read the rest minus what is already in you 5 byte buffer. Once the packet is complete, add it to the queue and and back to start. BTW: don't forget to add Task.ConfigureAwait(false) to your tasks, so the thread scheduler can assign them freely to available threads. (Provided your code is threadsafe enough) 
I just took a quick look and it looks great! Maybe try to some encryption algorithm implementations? DES or RSA are easy to implement but will take some time to research and understand.
Thank you, that is exactly what i needed to hear. I think the whole idea of being a junior is to learn, its easy to forget this when you're in a room full of experienced seniors who know a lot more than you do. Thanks for reminding me that its normal to not know things and that its okay to ask.
Totally viable. Though if you find you're doing it often enough, consider rolling your own class so it's clear to callers and your API what's going on. (Plus you avoid continually redefining the "Message" name/type) For example: public class ValidatableResult&lt;T&gt; { public T Result { get; } public bool Passed { get; } public string FailureReason { get; } internal ValidatableResult(T result, bool passed, string failureReason) { this.Result = result; this.Passed = passed; this.FailureReason = failureReason; } public static implicit operator ValidatableResult&lt;T&gt;(T passedValue) { return new ValidatableResult&lt;T&gt;(passedValue, true, null); } public static ValidatableResult&lt;T&gt; Failed(string failureReason) { return new ValidatableResult&lt;T&gt;(default(T), false, failureReason); } public void ThrowIfFailed() { if (!Passed) throw new InvalidOperationException(FailureReason); } } Usage: void Main() { for (int i = 0; i &lt; 10; i++) { var result = Test(); if (result.Passed) Console.WriteLine(result.Result); else Console.WriteLine(result.FailureReason); } } Random r = new Random(); public ValidatableResult&lt;int&gt; Test() { int randomInt = r.Next(10); if (randomInt &lt; 5) return ValidatableResult&lt;int&gt;.Failed("Number too small!"); return randomInt; } Now, I tossed in the `ThrowIfFailed` in there, which is a pretty terrible way of doing it. (EDIT: Plus you may lose valuable stacktrace information) You could bake it into the `Result` getter to operate not unlike `Nullable&lt;T&gt;.Value` You can also choose to ditch the implicit conversion. I just figured I'd give you an idea of some of the flexibility you might get by defining a full blown class rather than using Tuples and having the caller "know" what to do with it by convention rather than communicated by the API design.
Rule number one of encryption: **Never write your own encryption.** :) Hashing on the other hand wiil be considered.
Any luck?
Octree?
Which one? :) I guess the AVL Tree - nice and simple. The Red-Black tree, on the other hand, is a [nightmare](https://www.youtube.com/watch?v=eYlJH81dSiw).
Never heard of it... It looks interesting btw. I was thinking about space partitioning before and implementing a K-D tree and maybe something else. Would definitely look into it.
Thanks at least now I will be able to be more calm on my first day. There is nothing more scary than walking into a room full of experienced developers and trying to make a mark. I guess my real problem is overthinking what might possibly go wrong on the first day. If debugging is the first thing I will be doing then that doesn't sound too bad since it will also help me learn to work with other developers repos, which is something I am not too familiar with. I guess the only thing I should try and focus on before I start is my debugging and problem solving skills. 
:)
Thanks. That looks like a sensible approach. I'll do that. P.S do you know why BinaryReader and BinaryWriter doesn't have any async methods for its stuff? It's like it can only be used reliably (without blocking) with in-memory streams
Look up "ORM"
Probably just too old, its been in since .net 1.1 but i could be wrong. There could be a technical reason or it's just not worth the effort. Also: If you really want to know if you application scales and performes, you have benchmark it.
Thanks
There's a pretty big difference between implementing a well known and understood algorithm and inventing your own. Seriously think it's a mistake to not explore those algorithms based on that reasoning. Trust me, there's little difference between the engineer writing crypto libraries and the one writing a node web service. RSA is super cool and approachable, it's a fun way to see an algorithm that's fundamental to modern computing.
Meant to be more like a joke, but it was poorly delivered... On a serious note, I have looked into RSA and it looks interesting nonetheless. I would consider implementing it.
I kinda figured. Just figured I'd say so just in case. Keep up the good work.
That's pretty cool. Thanks! :D
The idiomatic C# thing to do is to have two methods: ResultType Opertation(Parameters) bool TryOperation(Parameters, out ResultType) The first throws exceptions on errors and the second doesn't. As for passing messages for logging... It all depends. I try to log at the point I have the relevant info. If I need to pass status codes around, I usually use a request/response model where the status code and result are embedded in an a new datatype. As long as you don't use exceptions for flow control, you should be fine.
Mine is much slower too, I'm using it with Unity 2017. Instead of pressing tab, press Enter. I've found this auto-completes before the Intellisense window pops up.
Thats interesting. I haven't got any problems with VS2017 even when people were reporting some problems. Must be lucky I guess. Make sure you use the latest version - 15.3 if I remember correctly. It is said that it has some performance improvements. Also try deleting the .vs folder and see if that helps. Also you could try a repair of the installation. Something could be corrupted. You said it is clean install without plugins, but you could try unchecking "show completion item filters" in the intellisence tab in settings and see if it helps.
I've noticed it can be slow to update, red squiggly lines stay longer than I expect, often just enough to make me wonder if there is stilll something wrong.
That only occurs when there is an unhandled exception while painting the control. 
If I were going to make a test for a guy already hired as a junior dev, it'd be a case wherein I want to see how long it takes him to ask for help and admit he doesn't know things. You're corporate, HR means they have to do paperwork to fire you, so just relax. Even if they do some kind of skills assessment, just take it and let them have an honest idea of where you stand. Be honest, be humble, and be eager. 
Its probably only needed for the self contained deployments.
I gave up on trying to figure it out. Not that I spent a lot of time with it though, but I found it very off-putting that it was so complex.
15.3 feels way faster to me and it even makes more suggestions like method naming based on class/return types
Which can happen if you access a control from a non-UI thread. For example, you modify a collection while its being iterated over during the painting of the control.
I'm looking into using Vultr at the moment. They have VPSes starting at $2.5/month
Ask questions. Take in the answers. If you don't understand tell them. Don't be that guy who says they understand but asks the same question a day later.
There are a number of mechanisms that may be at work. Shared memory, pipes, tcp, etc. Most likely it will be tcp, unless your database is running on the same machine. Afaik, MVC does not know how to connect to anything, really. It relies on the operating system and device drivers to handle these things. If you want to know more about how network connectivity works, look up network layers.
I am surprised no one suggested it yet. Basically, when an action that needs confirmation is asked to run, you basically set a confirmation needed flag to true (confirmNeeded = true) and store the specific action in another variable outside the function (e.g. requestedAction), and when the speech is triggered again, if the confirmNeeded == true then check if the speech text is yes or no, if yes execute the action in requestedAction, and in the end sent confirmNeeded to false again.
I am surprised no one suggested it yet. Basically, when an action that needs confirmation is asked to run, you basically set a confirmation needed flag to true (confirmNeeded = true) and store the specific action in another variable outside the function (e.g. requestedAction), and when the speech is triggered again, if the confirmNeeded == true then check if the speech text is yes or no, if yes execute the action in requestedAction, and in the end sent confirmNeeded to false again.
I am surprised no one suggested it yet. Basically, when an action that needs confirmation is asked to run, you basically set a confirmation needed flag to true (confirmNeeded = true) and store the specific action in another variable outside the function (e.g. requestedAction), and when the speech is triggered again, if the confirmNeeded == true then check if the speech text is yes or no, if yes execute the action in requestedAction, and in the end sent confirmNeeded to false again.
I can't hit Enter to autocomplete any more. That's what I used to do. Now, it won't actually select the closest thing to what I'm typing any more - it just [does this](http://i.imgur.com/EpEFNLG.png) and inserts a newline when I hit enter. I've tried resetting my environment config but no dice. How has VS made such a big regression? I feel like I'm using pre-VS2010 intellisense again. EDIT: Fixed it by deleting the .vs folder. Now it feels much snappier. Seems like it was just limited to the solution I was in, probably doesn't help that there 101 projects in it.
Depending on the bureaucracy in the company they may expect you to sign enough documents and get your computer running, step two is getting accounts from all the places you will need accounts for, and finally you will be expected to actually setup your environment so that you can build the project and run it locally. Depending on how the company functions this whole process can take a day or a week.
Intellisense works fine for me but lightbulb suggestions and reformat whole document sometimes bring it down hard (not responding level)
Too slow to be usable. I have an i7 ultrabook with a very fast ssd and it's just unuseable. I am happy that I could try it out for free. Because shelling out even a dollar is too much.
The trick here is to put the switch into a method, but that's all the method does: performs the switch and calls other methods. At most, perhaps minor operations to parameters switch (something) { Case 1: DoSomething(); Break; Case 2: DoSomething(param); Case 3: DifferentFunction(); Break; Default: DefaultAction(); } That way the function can be long but simple: it doesn't take much effort to understand, and you can quickly scan it to find the relevant case and follow that to the action function Especially effective if you end up calling the same function with different parameters.
Last time I ran a price calculation for a web app + SQL Server, the cost was @ about $60/mo unless I was doing something wrong. That's a lot more expensive than other hosting options. What is it costing you for this basic set up? 
The problem is each case sets / gets a value and potentially modifies (clears / sets some bits) it. ;-; Edit: make logical sense.
While i dont know this much details in c# i likeit. If i may ask can you direct me on a book or a way to star t learning data structures and algorithms. Also, how important is it to know this in details or what is the exact use of it? Im a self taught programmer and i really want to be more advanced in c# and always look for new challenges.
This is not apples v apples however. You're on the hook to patch and maintain that VPS yourself.
I'd be surprised if you couldn't at least moderately clean it up: I'm sure there are cases where a big switch is unavoidable, but there aren't many 
Aren't exceptions supposed to be, you know, exceptional?
I highly doubt that anybody will "test" you or try to gauge your skill level in any way. I've never heard of that in the 21 yrs. I've been coding. The fact that you are concerned about it and prepping for the scenario though speaks well towards your attitude and I can see why they hired you. So relax kiddo, they've already hired you because you were the best qualified; just show up ready to work and enjoy the ride. Good luck!
Nougat package manager
maybe use the nameof operator instead of strings of params] like instead of this: if (node == null) throw new ArgumentNullException("node"); do this if (node == null) throw new ArgumentNullException(nameof(node)); file for reference https://github.com/abdonkov/DSA/blob/master/DSA/DSA/DataStructures/Lists/SinglyLinkedList.cs
How is Java for fucking casuals? The only huge open source cross platform language for school in the past decade has been Java. Its Java for "real world job like" programming, maybe some python on the side, then C++ for the "guts of" programming C# just got recently opensourced..
It's obvious from your posts you want to do a good job. Here's what I have liked from junior devs I've helped mentor: Have a good work ethic and attitude. It'll take a while for them to think you're ready for meatier work. It'll happen in time. Pay your dues. Don't be afraid to ask questions. It's better for everyone to spend a little time to teach you the right way up front than to spend a ton of time rewriting everything you did. Try your best to learn what they're teaching you the first time where you can, so they don't have to repeat themselves. The faster you can become self sufficient, the happier they'll be with you. That said, it won't be every time. Accept that you won't be able to get the most complex stuff on the first pass. Nobody can. They know you're junior, they know they'll have to help you get going. You'll be fine.
Do you have a Deque in your data structures, or something that could be used as one?
I'd say focus your first few weeks learning about the business process of the software you're working on. Create some dummy test data in the applications you will be maintaining/enhancing. Like if the software is some accounting stuff - create some test data and have some people walk you through the app works. Dont look at the code first. Also have fun learning build processes of old/big/huge apps /s
What kind of app do you have? Was thinking of mainly hosting a purely-static simple HTML ASP.NET Core 2.0 app on Azure - mainly for just the ease of the Azure build process, probably would get minor traffic (100-200 hits a month or less probably. way more robots than real people too) How much does it cost per mo?
Most likely there is a JavaScript event that sends the text you type to a REST endpoint. If you can find the endpoint url, you can use the HttpClient to send a request yourself and parse the response. It may be json or html. If it's html, you will need the agility pack. If it's json, use Newtonsoft.Json
You can try a clean and rebuild and see if that helps. If you have had the solution open the whole time you were coding it (meaning this was all done in a single session), you can use Ctrl+Z to undo recent changes to the areas affecting that code. Aside from that, you will either have to debug the issue, or you have learned a valuable lesson on using version control, and will have to rewrite your project.
The calculations don't seem to work. The charge is calculated by many things, including usage. I have a plan estimated to be 67 dollars, and I've used 3 dollars over the last 4 days because I barely use the one instance I have.
Removed: Rule 4. You were already receiving help in an earlier thread of yours and you reported it was starting to work. HTMLAgilityPack is probably the go-to library to use for this task.
ADO.NET provides the tools needed. It takes the connection string and can open the connection as well as send commands and receive responses back. You can use it directly, or use any number of abstractions in the forms of ORMs and micro-ORMs like Entity Framework or Dapper. 
I've tried, clean, rebuild, reinstalling epub.net. Nah i've sadly restarted VS multiple times. I have been debugging it for hours, it is not a code issue. The same code works 100% in any application not in my solution, but fails even in a completely fresh empty console application IN my solution.
That looks more confusing, because there's no operation on the customer.IsActive, making it appear at first glance to be a method call without a return value. The conditional is best used for simple, short instructions. If you have enough code that you need to start putting it over several lines, you should be using an if Although I'll allow that the following two-line version can be more readable than a single line (lining up the ? And :) (Condition == true) ? "Active" : "Inactive"
Do you mean in terms of time, or fees for testing in Azure? If you have a MSDN subscription, you usually get quite a bit of free credits each month which is usually more than enough for a wide range of testing, as long as you don't leave a bunch of VMs running.
I giggled when I first installed the xamarin nougat nuget pkg
I looked at a couple of trees. They seem to be implemented with the simple pointer approach. This is the fastest when doing an O analysis on paper, but in real life, processor caches prefer arrays, as there are fewer cache misses. Just to keep in mind, many times a substitute for the tree using a dictionary is way faster than a binary tree like you implemented. Even if on paper it will have 100s more operations.
Awesome work. A little specialised, but possibly interesting contenders: MaxFlow and MinCostFlow implementations from Ravindra K. Ahuja, Thomas L. Magnanti, and James B. Orlin. Network Flows: Theory, Algorithms, and Applications.
ah okay, so if we looked at it a high level and someone asked how does mvc connect to a database the answer would be something like connection string and entity framework?
No. Entity framework is an ORM and is dependent on lower-level components for connectivity. The answer is that it is not an easy answer. You can look up Windows' Api methods which can be imported into a program and used for all of the mechanisms I listed earlier, but this is all dependent on a lot of factors such as what database and OS you are using. If SQL Server, you can configure what mechanism you're using for connections, and the answers vary for each. I want to say that odbc is intended to simplify this so that all database connections are handled through it, but even then I've played around with in-memory databases without the typical connection strings, so that may not be a constant. Edit: here are a couple of relevant sources: [data providers](https://en.wikipedia.org/wiki/ADO.NET_data_provider) are defined by wikipedia as being a diverse set of software components for a variety of data sources. MSDN has some more interesting [info](https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/data-providers) on the subject, but if you're interested on how a connection is made, a driver/provider is not a complete answer.
I was someone who was skeptical of Azure for awhile. The nebulous descriptions and marketing made it worse. Trying to delve into how it actually worked, wow you can't remote into the VM of an App Service, you don't have full control of this and that? Sounds like another product to let the dumbest of developers publish web apps. However, I learned more about it over time, and finally with my MSDN subscription credits I dove in and poked around. I began to recall all the nightmarish things I've encountered over the years that would be no more, in the absence of OS or hardware administration. Now I really got it. And the concept is a lot simpler than made out to be. So I want to tell you three things: the basic concept, how easy it is to learn it, and why it is better. **Concept** You don't really need access to anything other than the little IIS app directory you deploy your app in. A well made ASP.NET app doesn't care about anything outside of IIS, and the configuration within IIS should be minimal. By the same token, when it comes to an SQL Server, you don't care about the hardware(as long as it is up to par for the task at hand), the OS, not even the SQL Server instance. All you should really care about is the database instance. Now of course we really HAVE to care about all those other things to get the job done, but what if we had the choice to only care about the database itself. That's what an Azure SQL DB is essentially. ("the configuration within IIS should be minimal": When I see alot of crazy stuff happening in IIS app/pool configuration, it is usually something that could have been handled within the app. I always make reproducible deployments a goal. I don't want 20 steps to setting up a new app instance in a web farm. I've worked with multitenant apps that handled routing for a hundred custom domains all through one app, and nothing special was needed except for DNS and SSL configuration. No fancy rewrite rules in IIS, the application handled all the routing. This makes the app easy to cluster, and it makes it easy to move to the cloud.) **Learning** It's hard to learn without just getting in and doing it, because the abstraction is difficult to conceptualize just from reading articles or watching videos. I always feel like I can read up on something and reach a point where I can then conceptualize whether it is something beneficial and how it will fit into my architecture. I found this alot more difficult with Azure, and I partially blame some of the buzzwordyness of alot of articles. Once you actually follow a couple tutorials, then you realize it's dead easy. So get in and **do it**. Remember if you have a MSDN subscription, you get quite a bit of free credits each month which is usually more than enough for a wide range of testing, as long as you don't leave a bunch of VMs running. It also gives devs a nice isolated environment should they need it. In the simple case, you just FTP and copy your deployables to the app directory similar to how you would copy them into a wwwroot on a traditional server. The only difference is now you can't really see OS level things like drives. You don't need to right? All you really need to care about is your app directory. The confusing things are caused by the fact that you are accessing sensitive resources over the internet instead of in a cozy local network. So by default everything is really locked down. Make sure you have strong admin passwords, which you should already, right? Most everything get's a really long domain name for you to access it with, but as needed you can setup DNS to point real domain names to whatever you want. You'll learn to keep that one admin widget up in the admin portal where you can copy it. You just get used to pasting these long names. Some things have special configuration to open up inbound ports. The first couple times you encounter, it is a pain, from then on it becomes second nature. Hmmm, can't access the new VM, oh yeh, I need to poke a hole. You also need to whitelist your client IP/ranges you adminster from, or setup IPSec. Whitelisting is easy. When you forget where it is, you'll click around in the Azure admin panel and usually find it quickly. You'll forget a couple times when you try to access from a new IP, get frustrated troubleshooting until you remember, then gradually it'll be something that becomes second nature. Googling the name of a particular administration widget usual nets good results. I would often just browse the images in google to see some different configurations to get a better understanding of use cases. I think the most confusing thing is the varied products with similar names, plus the horrible injustice of calling the same thing by different names. Service Fabric, Cloud Service(Web Role), App Service(Web App), VM... The names are similar enough they all sound like the same thing. Just use App Service (web apps) until you find a need for something else, which at that point you'll have a better understanding to base your decision on. Azure SQL DB is the PaaS offering you should start with. You can also get the traditional SQL DB editions in a VM, but you either pay for the license or bring your own license, and you are basically not much better off than you were on-premise because now you ahve to manage the OS, although not having to think about hardware is still nice. Start with the Azure SQL DB "Single Database" option if you have only one database. If you have multiple then Azure SQL DB "Elastic pool" option will overall end up being similar price or cheaper. The docs have been getting better. Most everything written under docs.microsoft.com seems to be getting written by actual developers with alot less buzzwordyness and more practicality: https://docs.microsoft.com/en-us/azure/ I've started learning more about features I've ignored like Service Fabric and containers. Before I wouldn't have bothered because the documentation was kind of awful. For example, DB Shards docs don't just cover how to set them up from an SQL administration point of view, as seems the SQL server documentation tradition. Instead they cover how applications would access the shards in an intelligent way, and takes into consideration that an application will have a mix of queries that must run on a single shard and across all shards. **It's Better** Ok, so the reality is that no one's needs are the same, so my perspective may not apply to you. Maybe that $2.50/mo VM is what is best for you. Also, most of my experiences has been with shops using onpremise servers, or a local datacenter(in the case of government agencies, managed by another agency, but still giving us a high exposure to all the "fun" that comes with owning a server) Azure is more expensive, but there are alot of cost savings that dwarf the monthly fees. Think about everything it takes just to keep a test and staging environment running, much less production. Ever lived through a major upgrade of an OS, SQL Server, or hardware, and had to live through it 3 times in a row to get all environments up to speed, and even then you've only caught up to being one version behind on SQL server instead of 3? It seems like everywhere I work, there's always one of these major projects occurring or just around the corner, and it's a major undertaking that ends up involving everyone at some point. Or there is some nuanced little problem on the server suddenly, and you don't even have access enough to troubleshoot, but the server admin doesn't know what they are looking at, so you are hunched over their shoulder asking them to look at this and that to troubleshoot. Server patches are way behind cause somebody decide its super scary to install patches in production, and somehow that's better than having a secure server. You need some patch installed because your app doesn't work right without it, or god you'd love to just be on a version of .NET that isn't 2 years old, but there's a huge testing process that has to go on before it'll get approved and no one has the time for it. Start thinking about all that. Azure geo-replicated SQL Database backups: Nice. No more driving tapes out to the vault or shipping them off. No more arguing with DBA's about how truncating logs is losing point-in-time recovery capability. You could get a couple remote VMs and do this yourself, but it'll be more work to setup than it is in Azure. A disaster recovery simulation? People struggling to get restores to work from tape backups? Trying to get the RAID array drivers AND the tape drivers setup so you can get through a OS restore? I don't want to sit around twice a year on a weekend helping the DB team limp through a disaster recovery simulation while we troubleshoot recovering from tapes. Recovery tests in Azure are simpler. You don't need to get extra hardware, or install SQL server, etc. Creating the Azure DB and your test App Service is alot easier than setting up an extra couple servers for a recovery test environment. I want to focus on other things. I lie, I love getting in and setting up server software, I have two rack units with 4 nodes each at home with a variety of stuff on them, but when I want to get things done, I know screwing around with that kind of stuff is unproductive. The reality is you run into little hurdles here and there, and every couple weeks something comes up and you have to troubleshoot. No screwing with hardware. No screwing with OS administration. You have options that give you OS access, but I wouldn't recommend them. In larger setups there will be things you need that level of control for, so you have mostly the simple services, and then maybe a couple special things in the VM. For example, Dimensional Model SSAS is not supported yet in Azure, but you can just setup an Azure VM and install it to it.
[Asphostportal](http://asphostportal.com/Windows-Cloud-Hosting-Plans) is great for low cost cloud services. They are really fast to update too. The day .NET Core 2.0 was out their cloud servers were ready.
I resort to [udemy](https://www.udemy.com), but read the reviews about the tutor before taking any classes.
In both your ExecuteMergeSort and MergeSortArr methods, you have the second elements of your arrays explicitly referenced, as in "numbers[1]" rather than using the i variable, as in "numbers[i]." The result appears to be that you're performing a sort for only one element, which is being placed back into the same position where it came from in the original array. That should explain why your output is the same as your input.
If you're speaking to someone familiar with ASP.NET, then the answer would be generally the same way. ASP.NET traditionally used ADO.NET for DB access, and in some cases transitioned to EF(which is really a layer over ADO.NET). MVC can use either ADO.NET or EF, but most commonly uses EF or a similar ORM framework. It really depends on who is asking the question. It sounds like someone who is technical, and it's someone already familiar with previous approaches prior to MVC, so they want to equate their existing knowledge to MVC. Essentially MVC is the front end just as ASP.NET was the front end, and how you write your DB access is pretty open ended, just as it was open ended with ASP.NET. You respond to a user request, but now instead of events like Load or someButton_Click, you have controller actions. In both cases they are essentially just functions. So once your controller action is running, how you do DB access is up to you, just as it was up to you in ASP.NET. There are no constraints really. Connection strings at the lowest levels are leveraged the same way. (Except if you use the older EF database first that has EDMX files, then you have a connection string wrapped in a EDMX connection string, but at the lowest levels it still operates the same. EDMX is just used to initialize mapping, and from there the actual querying of the DB uses the ensted traditional connection string) EF takes your LINQ queries or other actions on DbContext, and generates actual SQL queries, then uses ADO.NET to execute those queries. It retrieves the results, and then based on conventions or model mapping, populates your entity object properties with the result. Prior to EF, users of ADO.NET had often adopted the approach of using data transfer objects(DTOs) and manually populated them by iterating through rows and selected values from columns and into the object properties, to populate what are now entities in EF. So EF is just a more elegant way of accomplishing this, and saving us from some of the more tedious aspects of database programming.
Your algorithmia library is the first thing I thought of when I saw this. I use your priority queue I'm several projects! 
The TryOperation method should feel familiar to most C# devs, but I get the feeling most also dislike out parameters. I would pretty much always favor a OperationResult style object for passing back results.
I've spent lots of time with Azure. It's where I first started hosting, with the Azure App Service. It's the easiest way to get going, but it's also the most restrictive, and it's actually quite expensive for what you get. If you want proper control, you need to host with IIS on your own virtual machine. You can do this with Azure, but I find AWS to be more economical. AWS is cheaper than Azure in most areas - not only this, but the cheap AWS VMs are even SSD-backed, making them far more responsive than "equivalent" Azure machines that are HDD-backed. Amazon even gives you an entire year of free services across many categories, which is pretty generous. When I started out on Azure I got £150 credit for the first month, which I couldn't really spread out. The free trial for AWS has given me time to test things, and I'll certainly be staying with them. I still use Application Insights though. Amazon doesn't have a proper competitor for that.
I prefer Chocolatey Nougat.
Check out the Optional lib, https://github.com/nlkl/Optional. It borrows the concept from functional languages and makes easy to return a value or an error.
Yes, they could catch it if they don't want an unhandled exception to crash their program, which is all the time. 
Yes, this is very cool, but use it with caution. I had something very similar in my code that I had to refactor because it was slow and used a lot of memory. I recommend having a null result be a "success" condition so you don't have to always instantiate an object if a message isn't required.
Sorry life got busy. The only thing I'm thinking of right now is taking it one character at a time. Look for a letter, run a corresponding method for that letter, search for a space, skip, capture all numbers until another space, skip, look for a letter and repeat. 
Ansyc are not threads, may not actually resolve to another thread and may not be non blocking. https://blogs.msdn.microsoft.com/benwilli/2015/09/10/tasks-are-still-not-threads-and-async-is-not-parallel/ (Side note: The parallel behavior above is a side effect of the async/await thread context affinity in the WPF task scheduler. It is not guaranteed and the behavior may vary depending with different task schedulers. It should not be relied upon as a method to create other threads. If you require something to run in parallel, use Task.Run())
nice work man, this has motivated to do something similar for myself :) cheers
Thank you this is really helpful to me. The last thing I want to happen is for them to think that they might have made a mistake in hiring me. I guess I've spent too much time overthinking the worst possibilities that could happen and haven't taken the time to just appreciate the fact that I am where I want to be now and its going to be so much fun just to do what I love doing most.
Thanks, I really appreciate the kind words. I am always afraid to ask questions when it comes to software development, mostly because it feels as though I am expected to know things already and it can get really embarrassing when I have to tell someone that I don't understand what they are talking about. That will have to change now though since I am going to have to learn a lot in order to grow and become competent enough to take on much bigger projects. Thanks for the great advice.
If you're looking for more techniques, you can also call `.ToString(format)` on the **DateTime** instance and pass in a string of the format specifier. dt.ToString("y yy yyy yyyy")
Can't you take a joke? And Java is the biggest competitor of C# currently in some places and this is also the C# subreddit, so what do you expect?
Good catch. Thanks.
I have not implemented Dequeue specifically (thanks for the reminder, completely forgot about it). Will do in the future. That aside, mine DoublyLinkedList or even the .NET own LinkedList can be easily used as Dequeue.
Most of the new uwp apps are written in C++/CX for efficiency reasons
This can be true, but there is one huge BUT. Arrays can only represent complete binary trees. Like the binary heap, which is indeed implemented with an array. I mean, arrays can represent other binary trees, but there will be huge portions of the array without elements, so for the most trees that whould be good waste of memory. Maybe I don't really undurstand what you mean, but as I image it, I don't really think the performance - memory tradeoff whould be worth it. Maybe only for the AVL Tree which is balanced very good, it could be a plus, but again the rotations would require much copying so I don't really know. I guess the only way is for it to be tested... Good thing to do I guess :)
Yup, was thinking about network theory, could implement something more generic of it.
Good to here. It is actually really good way to learn things, so I can recommend this approach to anyone. For the most part, best way to learn something is to do it yourself.
what was your search term?
Cool! :) Glad it's useful for others :)
I don't really like to read books about programming. It feels off for me I don't know, but here is a good [site with many materials on data structures](http://www.geeksforgeeks.org/). Also for the most part Wikipedia and Google are your friends. Here is a[list of data structures](https://en.wikipedia.org/wiki/List_of_data_structures) and a [list of algorithms](https://en.wikipedia.org/wiki/List_of_algorithms). Choose something, read about it on Wikipedia, search on google for more info if you need... And that is the way to learn things nowadays... Now, How important is it to know this? That is a complex question and you can hear different answers for it. There are certain fields that you can program without knowing anything of this, but whould you be a good programmer - debatable, but pretty much no. Even if you don't dive deep into data structures and algorithms, you should(or even you must) at least know the basics. What are the different data structures, why are they used, advanteges and disadvanteges, and so on. Even if you don't try implementing it for yourself, which is a very good to learn about them btw, you should really know when to use one over the other. This will immensely help you as a programmer, to write better code and to understand more complex systems. Now on the C# topic. Again on the internet you ca find everything. Microsoft have one of the best documentations out there so you can always search for what you need. Aside from that, the [Microsoft Virtual Academy](https://mva.microsoft.com/) have many resources on C# and other .NET technologies so it is a very good place to learn about them. A course for [starting with C#](https://mva.microsoft.com/en-us/training-courses/programming-in-c-jump-start-14254?l=j0iuozSfB_6900115888) and one for [absolute beginners](https://mva.microsoft.com/en-US/training-courses/c-fundamentals-for-absolute-beginners-16169?l=Lvld4EQIC_2706218949). Even if you have some knowledge about C# already, both a very good to see what you really know and what you still have to learn.
You can ping the team at sales@ndepend.com
yes indeed you can do this DateTime.Now.ToString("yyyyMMddHHmmss"); // case sensitive * MM = two digit month * mm = two digit minutes * HH = two digit hour, 24 hour clock * hh = two digit hour, 12 hour clock
All well and good, except I did explain it.
And yet fuckos are complaining about "having to make it one line" in this very thread. Hmmm.. 
No worries life has a tendency to do that. I'm running something similar right now, only issue is when the burst sends a letter and not the following numbers then the program tells the text box that the F value is blank.
Thank you for repeating the documentation.
I though NuGet was like nugget, not nougat.
I also had the similar experience about a year ago. My advice is: do not expect to understand the codebase fully. While it is important to know what is happening in the base classes, you should also be able to abstract from them. Otherwise you will experience a lot of self-pressure. Everything will come with time. To be honest, I still do not know quite huge chunks of our code. Books. Books are important. Read at least these ones: "Clean Code" R. Martin "Effective C#" B. Wagner "More effective C#" B. Wagner 
Don't worry, ask questions, try not to be pompous. You should be fine. If you're joining a back end team, they will be coming at work from a different direction to you, so don't get too stressed about explaining things. Also, use "their" instead of "his/her", makes you sound like you have an issue with gender equality. In terms of testing your mad skills, run through the some hackerrank code challenges.
Thank you for copying and pasting [material from another website](https://stackoverflow.com/questions/1119799/method-chaining-in-c-sharp).
A single solution file is appropriate if all the projects are related and the solution represents a single deliverable. If you have multiple deliverables, you may need multiple solutions. If you have multiple deliverables that share projects, you should build the shared projects into separate solutions and look into nuget packages or something similar. You *can* have a single solution that produces multiple things, but it can be a bit messy if there's more than one runnable application. If this is something you're doing for an employer, check in with your manager/supervisor/mentor/tech lead/etc to find out how they handle it there.
I fear you're getting a bit muddled here. &gt; How does MVC connect to a database MVC doesn't provide a standard way to connect to a database. What it does is encourages the developer to build a Model - a class that looks after the business, including the data. The Model can connect to the database any way it likes. However, the most common way for the Model to connect to the database is probably with Entity Framework. So perhaps we should re-word the question: &gt; How does Entity Framework connect to a database This is nothing to do with MVC - you can use this from MVC, WPF, WinForms, Console app, it really doesn't matter. But the answer is that MVC uses ADO.NET. And how does ADO.NET connect to the database? ADO.NET uses the concept of a Managed Provider. A Managed Provider is made up of a number of classes that implement a set of interfaces. The Managed Provider is supplied by your database provider - Microsoft in the case of SQL Server, but perhaps Oracle if you're using an Oracle database or MySQL. And it's up to the Managed Provider how it connects to the database. I suspect most Managed Providers use TCP/IP, but I don't know that. The config file that Entity Framework uses to find the connection details will tell it which ADO.NET Managed Provider to use for the specific connection.
&gt; because there's no operation on the customer.IsActive Property. But .. I did leave off the left-hand part of the assignment, so confusion is warranted. :/
Yes, the time it would take me to look into it and try to figure out how much it would cost on Azure. It was a simple static site, I think the hosting is around $60 a year, don't have to worry about leaving anything running :P 
Thank you! 
The problem is... the management here has ZERO clue how to properly code/organize and application. I just know how to develop really well, but my organization sucks ass. Here, management seems to think using methods is "nonsense" as it is not linear code like a batch script (I am not joking) I am trying to move them from ASP classic to .NET. but their past terrible practices have lead them to believe that using Classes, methods and properties is nonsense. Some of the existing code I am converting is (get this) 1200 line WHILE LOOPS with 500 line IF blocks, with 400 line nested FOR LOOPS, with nested large Case statements....CF CITY... I am the lead. I am just looking for better advice. I am going to use multiple solution files in a root folder under the namespace. 
That sounds about right to me. I haven't done any .NET dev on Linux, but I've used VSCode before and combined with the Core CLI you should be able to code, test, and do some simple debugging with no problem. If you are doing ASP.NET Core then you might need to look into yeoman and the aspnet project generators...I'm not sure how much value you will get out of wiring up an ASP.NET Core project by yourself...its tedious and they change the setup drastically from version to version and normally .NET Devs would rely on the project templates from VS as a starting point to hack up.
Makes sense, it's just that handling the `LinkedListNode`s can be a hassle if you don't care about them. I'm also asking because there are a few Deque implementations in GitHub, but all of them are either incomplete of have bugs.
Please report directly to HR when you get in a do not go to your desk. Thank you. :)
I was referring to an operation, eg the lack of ? immediately afterward. As such, at first glance it would be easy to mis-read as `customer.IsActive()`, for example
Hopefully the tbone comment isn't serious, but even if not it sounds like management at your company has no idea what they are doing. Rewriting some of their code to be be vastly simplified would demonstrate the benefits of .NET &amp; OOP. 
&gt; Please report directly to HR when you get in a do not go to your desk. Thank you. :) Err... 
Totally joking. But in all seriousness it typically isn't good practice to disparage your company publicly as it can come back and bite you in the butt. I have worked for my share of backward organizations and I also try never to burn any bridges. Just good career advice. 
Okay, well, I think I've seen that kind of arrangement (multiple solutions in the same directory), and it runs into a bunch of problems with coupling and project organization. It's probably fine as long as it's just you, but it will make delegating things to other devs tricky. I'd really strongly recommend keeping solutions in separate directories from each other. If you need to share, say, libraries, build the share libs out as solutions of their own and either put together nuget packages or (at minimum) throw in a build step to copy the results to a shared location with version control or something.
This project has given us good results: https://github.com/aspnet-contrib/AspNet.Security.OpenIdConnect.Server I tried IdentityServer but it felt too 'heavy'.
Thanks for picking up on that. I hope /u/abbasmhd is enjoying his 30 day timeout.
Removed: Rule 7, plagiarism. EDIT: [Many sources.](https://www.google.ca/search?source=hp&amp;q=String.Format%28%22%7B0%3Ay+yy+yyy+yyyy%7D%22%2C++++++dt%29%3B++%2F%2F+%228+08+008+2008%22+++year&amp;oq=String.Format%28%22%7B0%3Ay+yy+yyy+yyyy%7D%22%2C++++++dt%29%3B++%2F%2F+%228+08+008+2008%22+++year&amp;gs_l=psy-ab.3...339.339.0.576.2.1.0.0.0.0.70.70.1.1.0.foo%2Cnso-ehuqi%3D1%2Cnso-ehuui%3D1%2Cewh%3D0%2Cnso-mplt%3D2%2Cnso-enksa%3D0%2Cnso-enfk%3D1%2Cnso-usnt%3D1%2Cnso-qnt-npqp%3D0-1701%2Cnso-qnt-npdq%3D0-54%2Cnso-qnt-npt%3D0-1%2Cnso-qnt-ndc%3D300%2Ccspa-dspm-nm-mnp%3D0-05%2Ccspa-dspm-nm-mxp%3D0-125%2Cnso-unt-npqp%3D0-17%2Cnso-unt-npdq%3D0-54%2Cnso-unt-npt%3D0-0602%2Cnso-unt-ndc%3D300%2Ccspa-uipm-nm-mnp%3D0-007525%2Ccspa-uipm-nm-mxp%3D0-052675%2Ccfro%3D1...0...1.1.64.psy-ab..1.0.0.0._32yGHh4jdc)
Removed: Rule 7, plagiarism. EDIT: [Source.](https://stackoverflow.com/questions/1119799/method-chaining-in-c-sharp)
The move from classic asp to .net can be a hard one for the old dogs. The company I am at now had a similar issue when I pushed the change. You have to have management support to the point of letting people go who refuse the changes. Make sure to not over engineer the first few projects they see / touch as this will be intimidating. Hold training sessions and assign a different person to do a training session for the team on things you think they need to know and be there to fill in the gaps If you are in this sort of aging environment most likely you don't have any automated build system etc so tie them in as a benefit. 
&gt; I am trying to move them from ASP classic to .NET If you haven't, point out that the last stable release of ASP Classic was **seventeen years ago** in November **2000**. Also that Microsoft is ending support of it on Windows 7 and Server 2008 in 2020, and Windows 8 in 2023. And I have a suspicion that it's relevant in your scenario to also consider that support for Windows Server 2003 has already ended in 2015.
hey thanks for the response! ok so when you make your database and generate the models based on the database, to do that that is using entity framework right?
ah I see yeah I think that's what I was trying to get at. Okay well I am definitely using entity framework but as someone else explained, I guess you could also say ADO.NET since EF is a layer on top of it? But for sure, EF is used when you want to generate models from your database right?
Typically, that’s right, yes. It’s just that there’s nothing to stop you using another method if you prefer.
Thank you so much, I will have a look for those this evening. 
I suspect they are incorrectly attempting to refer to one expression. 
I used Udemy to help me get comfortable with C#. Mainly I needed to get comfortable with Visual Studio as it was intimidating to me. I didn't know what a solution or a project was, what a reference was, or the basic namespaces I would use regularly. With confidence from watching Udemy courses (mainly Mosh Hamedani's three levels of C# courses), I started doing my thing making tools for my job. Over the years, the tools grew in complexity from console apps to Windows Forms, to multithreaded Windows forms, to Windows services with tray applications, to WPF applications and so on. Each time I get stuck I look up the documentation on MSDN (actually I Google it, and usually land on MSDN), or see how they did it on Stack Overflow. For books, I really liked The Clean Coder and C# in Depth. But if you're new to programming in general, there might be better books to get you started. Though I do highly recommend reading and internalizing clean coder, as the principal's of clean coding will serve you well and it's easier to learn to do things right the first time than to have to unlearn habits later on.
When they started the company... it was 2002... I already pointed this out. They want to make a move to .NET this year but starting to re-code out smaller projects by years end.
Will do. to turn in my badge and stuff.
Yeah, I'm not fond the out parameter, especially when I'm trying to be functional.
You'll have less to remember (fewer special cases) if the namespace matches the path in source control, and the source control path matches the path on the file system, and the name of the executable mostly matches the last directory in the path. 
I already did that and it highly impressed them. that is why we are switching at the end of the year. I refused to code anything further in a dead language. So the things I have been working on, back end processing, Imaging, etc, I have created basic namespaced website that out Classic system talked to through POST/JSON/XML data, and developed connectors to so that my code and be used to streamline processes. This skeleton (growing into a full body) site will eventually be the new thing for us. Just some things I develop I make EXE's, did not know if having them in the main solution would be best. the more I think about it.. NO. but I want to share my namespace/classes and if I re-compile after making change to a class, I want it to be accross the board without having to have multiple copies of a class file. I guess I could compile them as libraries. hmm. food for thought. 
Seems like NDepend started their marketing train. edit: Yep, it's very clear that /u/PatrickSmacchia is from the NDepend team, and they're reaching out with free copies to bloggers for advertisement.
http://haacked.com/archive/2010/10/29/nupack-is-now-nuget.aspx/ &gt; pronounced “New Get” and not “Nugget” and not “Noojay” for you hoity-toity
Removed: Rule 6.
So, is this like a GIF situation?
What is NDepend? I just read the first paragraph and felt like I already wasted 5 seconds of my time. 
Try changing your Sql query slightly to: command = new SqlCommand($"SELECT TOP (@numRecords) @fieldListStr FROM @tableName", conn); *Note the '(' and ')' surrounding the @numRecords parameter* 
You are not allowed to use a parameter as argument to ``TOP``. I haven't found a definition, where within a SQL-Query a parameter is allowed, but you can simply try it within a SQL-Shell: DECLARE @Times int = 5; SELECT TOP @Times * FROM SomeTable -- won't work This will end in an syntax error! So obviously this is a limitation of parameterized queries!
I would want to stop your trace right before the query command is executed and look at the SqlCommand that got built. My only guess is that populating the @numRecords with an Int32 of 10 didn't work out the way you expected.
I am also learning C# at the moment. However, I started with .NET CORE because I like the idea of not being tied to windows and run cross-platform. I've also heard from Microsoft Devs in videos that if you are starting a new project, start in .net core because thats where all the focus is going, not to mention its open source. Therefore the stack I am learning consists of asp.net core with sql-server. aka web app. Doesn't answer your question but we are in the same boat and wanted to give you my approach. Cheers!
Yes, absolutely start with web technologies. JS can wait until you know you need it. Go with ASP.NET Core unless your company uses an older iteration of ASP.NET. There's a good book on it called Pro ASP.NET Core MVC, Adam freeman is author IIRC.
WPF is a fine technology for desktop but Microsoft is pushing more for UWP apps, you might want to look something about that so you can start publish them to the store. About web apps, if you don't want to go (yet) with the full ASP.NET MVC stack, you can try Angular to consume your web services, but learning MVC is definitely something recommended for a C# dev career.
If it's as bad as OP describes, chances are, benefits would be lost on them.
.NET Core has its own issues, such as not supporting GUI frameworks or WCF.
I recommend learning how vscode tasks, builds, and debugging works. After a little initial config it all works really seamlessly.
I was under the impression that the `dotnet` command-line tool can already generate ASP.NET Core web applications. I mean, dotnet new has these targets when I run it with the .NET Core 2.0 version of the tool: Templates Short Name Language Tags -------------------------------------------------------------------------------------------------------- Console Application console [C#], F#, VB Common/Console Class library classlib [C#], F#, VB Common/Library Unit Test Project mstest [C#], F#, VB Test/MSTest xUnit Test Project xunit [C#], F#, VB Test/xUnit ASP.NET Core Empty web [C#], F# Web/Empty ASP.NET Core Web App (Model-View-Controller) mvc [C#], F# Web/MVC ASP.NET Core Web App razor [C#] Web/MVC/Razor Pages ASP.NET Core with Angular angular [C#] Web/MVC/SPA ASP.NET Core with React.js react [C#] Web/MVC/SPA ASP.NET Core with React.js and Redux reactredux [C#] Web/MVC/SPA ASP.NET Core Web API webapi [C#], F# Web/WebAPI global.json file globaljson Config Nuget Config nugetconfig Config Web Config webconfig Config Solution File sln Solution Razor Page page Web/ASP.NET MVC ViewImports viewimports Web/ASP.NET MVC ViewStart viewstart Web/ASP.NET Examples: dotnet new mvc --auth Individual dotnet new console dotnet new --help 
I would have guessed this was the answer as soon as I saw the code. I’m not near a PC to check it on, so I’m glad someone else was able to confirm! What does /r/csharp think about using an interpolated string here? command = new SqlCommand($”SELECT TOP {numRows}...”); The normal argument against this pattern would be SQL injection. But interpolating an integer won’t allow this, and it seems a reasonable workaround to me. I’d imagine the same is also true for the column list? Again, I’m not in a position to check this. I’m not sure of a solution here, because SQL injection would mean using interpolated strings is far less suitable.
That's why you build a gui in Visual Basic to track his ip. Duh. ;)
You and u/LondonPilot should really check out u/kryzchek's [answer](https://www.reddit.com/r/csharp/comments/6ws341/problem_with_parametersadd_in_sqlcommand/dmabauk/).
Why should he care about the store? The biggest benefit of UWP is native compilation of apps. But the UI framework for UWP less functionality than MFC 1.0 for desktop develooment. It's not usable unless you're ripping people off with those "almost phone apps." Why do you think the only apps Microsoft ported on er were utilities like Alarm and Calculator? This is a big deal. Win64 obsoleted all of the older venerable utilities and apps from MS-DOS and Win16, and even some Win32 apps fail to run properly on it. Microsoft needs to make sure that comparable solutions can be delivered on the new frameworks, but this isn't really possible with UWP. No one will be writing a Brief editor with that UWP API, for example. So, either you stay with 32-Bit, or you start moving to macos like me, where development is actually more active than for Windows in the ISV/Shrink wrap software business. I still feel like Windows 10 should have XP Mode. The software library doesn't feel so vast anymore, and the over investment on UWP isn't really having many useful apps replaced. They're just being obsoleted. Its sad,but I now have considerably more commercial apps installed on my Mac, and almost none on my Windows notebook. Developers are I creasing lying Mac First, and then porting to Windows. Having a Windows desktop OS in the consumer market is being pushed more and more to the status of Android in the mobile market, unless you're a gamer. Microsoft's desktop development strategy is awful. They're basically ignoring everything to push their touch UI, which makes their desktop OS increasingly painful to use. These apps often have no menu or tool bars. They often have pretty limited set of keyboard shortcuts. They are inefficient to use with both keyboard and mouse. The logic escapes me, but I'm sure they have a plan. Apple didn't need to turn macOS I to iOS for an App Store, so the store is a non factor.
You don't have to deal with LinkedListNode objects for the most part. For add AddFirst and AddLast you supply values and if you want to peek on an object you just access linkedList.First.Value and you will get the value of the first node. About implementation - If the backend will be a linked list, it is pretty much the same as the LinkedList except, for the first and last object you won't return the node, but the value. And all the methods that use nodes won't be present, because that's not the point of the Dequeue. And if the backend will be an array, it is the same as the ArrayQueue except you will have 3 more methods for working with the start of the queue.
Does that work??? If that works, it's far better than my suggestion.
It is entirely different
different in what? 
It worked when I tried it, anyway. I dunno what version of SQL Server we're using, here, or if it's a new(ish) feature. Worth a shot, though.
C++ is not the same as C#. Syntactically, though, they're pretty similar.
thanks this helps a bit
I am currently a C# junior backend developer. I absolutely hate frontend work. I know how to do minor things in the frontend, so I can read and modify existing frontend stuff, and to some extend add new stuff. My advice is find out what you like, and go for that. Try everything enough so that you are not helpless outside of your domain. This will give you an understanding of the challenges that your counter part (frontend/backend).
For the last year and a half I've been moving all of my WPF apps to ASP.NET MVC. I really miss the power of WPF but fact is that OS agnostic apps are where it's at (unless you belong to an organization that can afford to develop multiple versions of the same app). My advice, learn to build the UI with ASP.NET (or Core) and JavaScript. However there is no disadvantage to learning WPF if you have the time. A lot of the knowledge is transferable. 
A given project file can be referenced by multiple solution files. When I have a back end library that will be used by multiple applications I create a solution (preferably with a test solution as well) for the libray. Then I create a seperate solution for the application and reference the .proj file. This enables me to have the source of the library accessible in the same solution as the source of the application, but doesn't require that all the applications be in the same solution file. It also ensures that when I build any of the solutions it will have the latest version of the library. You have to be careful when doing this though because if you write a solution... then it collects dust for awhile you may inadvertently break the build when working on a different solution. To solve this issue you can use automated builds and automated testing to ensure that even the stuff you don't think about very often isn't getting too fubared. 
This sounds like a nightmare... c# is inherently object oriented... even if pretend like it is some top down script from the 70s it's still an object that is an instantiation of a class that has a method. Avoiding all organizational structure is a recipe for inconsistent behaviour and bugs. I mean, if you have two different ftp servers you have to download something from you have to write two seperate "Scripts"? And if there is any change to where you are downloading it to you have to rewrite all the scripts? That is a waste of man hours. If they are steadfast in this decision I would recommend looking for a new job. There is no point to learning horrific Anti-patterns that will get you ridiculed at other software shops. For example, you say you are "Converting" some project... you are almost definitely not converting it... you are doing a complete rewrite... there is almost no way that you can nr finding meaningfully useful resuable code within a structure like that. 
I doubt this is thread safe. Your initial thread starts a thread for xsdf. xsdf enumerates the rows in a datagridview. There is no safeguards in place preventing code on the initial thread from modifying the rows in the datagridview while xsdf is processing them. 
Similarities: * Both languages use `{` and `}` to define blocks, `;` to terminate statements, and an object model that supports`public` and `private` members. * Both languages use `if`, `switch`, `while`, `do`, and `do-while` for control flow. Differences: * C# runs in a VM (the CLR), C++ runs natively. * C# is compiled to an intermediate bytecode (CIL) and JIT-compiled to native code at runtime, C++ is compiled to native code with no intermediate bytecode. * C# is garbage collected and generally does not require users to explicitly clean up memory, C++ is not garbage collected and requires manual memory management. * C# has single-inheritance + multiple-interface OO model, C++ permits multiple-inheritance. * C# generics and C++ templates appear syntactically similar and functionally, but have drastically different implementations. * C# pointers are implicit, C++ pointers are explicit. * C#'s base class library is totally separate and independent of C++'s base class library. In short: C# is totally different from C++. That said, it's implicit pointers and garbage collection make it a little easier for beginners to use without shooting themselves in the foot.
Assuming that the Problem is Not in the Application- but in the Network Layer, how looks the call? Are you referring the Source with an url ( normal DNS Name ) or an Ip ? Are both Source and destination in the same Network? It can take some time to do the ,First call‘
Not bad. Granted, Azure comes with a lot of benefits that would make it worthwhile when they're needed.
Different network and by DNS. I'm calling the facebook graph API.
Can you try to Exchange the DNS Name by the ip? Maybe a flush of the DNS Cache could Show a difference?
C# is a managed language, meaning that the code that makes up a C# application isn't turned into lower-level code until the application runs (this is called just-in-time compiling). A [CLR](https://en.wikipedia.org/wiki/Common_Language_Runtime) handles this, and it eases portability to different machines &amp; operating systems. As long as there is a port of a [.NET framework](https://en.wikipedia.org/wiki/.NET_Framework) flavor or [Mono](https://en.wikipedia.org/wiki/Mono_(software), your application can easily be built to run in different environments (i.e. Windows, iOS, Android, etc.). Compared to C++, C# is very easy to program in. It has a wealth of additional [keywords](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/) and "syntactic sugar", vastly reducing boilerplate and generally making a developer's life easier. For a simple example of how things are different in C# and C++, here's a property in C++: private: int someProperty; public: int getSomeProperty() { return someProperty; } void setSomeProperty(int value) { someProperty = value; } And in C#: public int SomeProperty { get; set; } And it doesn't end there. C# allows cool features like [reflection](https://www.tutorialspoint.com/csharp/csharp_reflection.htm), where you can examine your code as it's running and do some cool code kung fu. [Linq](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/introduction-to-linq-queries) makes it very easy to search collections of objects. C# is also used as a scripting language, notably in [Unity](https://unity3d.com/learn/tutorials/topics/scripting/coding-unity-absolute-beginner). You can also use [managed C++](https://en.wikipedia.org/wiki/C++/CLI) or [COM](https://en.wikipedia.org/wiki/Component_Object_Model) to "talk to" C# code. So you can have an application that benefits from both languages. One downside to the language though is that it generally runs slower than C++. If you're creating a program that has, say, advanced graphics, you'd probably want to write that in C++. But for most tasks the slower speed isn't noticeable. Stick with C# for code that is cleaner, more compact, easier to read, and easier to maintain. p.s. Y'all, please correct me if I'm not entirely correct here. p.p.s. C# also shies away from pointers, and though you can use them you almost never will. This leads to programs A LOT less bugs than most C++ programs. 
&gt; The biggest benefit of UWP is native compilation of apps. But the UI framework for UWP less functionality than MFC 1.0 for desktop develooment. It's not usable unless you're ripping people off with those "almost phone apps." UWP has pretty much everything you need to make a good UI. That's a bullshit reason. &gt; Why do you think the only apps Microsoft ported on er were utilities like Alarm and Calculator? How about Skype, Groove, Mail and Calendar, Xbox app, Photos, Maps, Weather, and probably some others I might be forgetting. I'm sorry, but you don't really seem to know what you are talking about.
I'd try to become proficient in the following: Javascript, Angular, JQuery, WebAPI, Entity Framework, and SQL Server. It's a lot but right now the vast majority of C# jobs are full-stack web developer and you're expected to know at least some of each stack layer. I left out MVC because the industry is moving away from it and more towards SPA style apps.
While you can see a list of native libraries' exported function names and addresses with various tools, information about their exact parameters often simply doesn't exist in the metadata. Check out Dependency Walker.
To be fair, there's an option to run C# natively. It's not as ingrained as C++, but it's there.
C# is awesome. C++ is straight out of nightmares. I worked many many years with C++. Here is my hate list: * Compilers are slow. * Syntax for anything more complicated sucks. If you miss the order of declaration then you are SOL. You may have to change data structures just so that shitty compiler would understand that class A may contain class B but B also can call something from class A. Templates can raise suck to yet another level. * Having to keep track of all your memory sometimes seriously sucks. If you write code that is easy to understand then it is quite possible to have it run slower than anything in C# due to frequent memory allocations/de-allocations. * Includes in includes in includes everywhere. Compiler cannot figure out anything automatically. * Magic errors after linking. Trying to figure out when something goes wrong is "fun". Could spend days sometimes. * People developing libraries apparently think that anything intuitive is a deadly sin and the number of colons and underscores must be as high as possible. As example see simple JSON serialization/deserialization in C#. It is one nuget and one call to serialize and one to deserialize. In C++ ... you know, F it. I am getting out of C++ as soon as I can :) 
If you are interested in web applications, I would suggest checking out [DotVVM](https://www.dotvvm.com/) ([github](https://github.com/riganti/dotvvm)). It is an interesting alternative to ASP.NET MVC and WebForms that allows you to write web applications pretty much without Javascript. It's a bit different, but isn't too complicated. I would recommend trying out both ASP.NET MVC and DotVVM and perhaps other framework and seeing for yourself :) *Disclaimer: I am one of the developers of DotVVM.*
Microsoft's strategy has basically been "Panic and copy what company X just used to make analysts spoo in their pants". For the last decade anyway. It's telling that the best thing they've knocked out with a UI recently is Visual Studio Code which is Electron. I'll give them some credit for investing in Xamarin. That was good. Windows 10 drives me nuts. It's actually a good OS under the covers, but the UI is so fragile. I still have a couple of machines (new machines) which refuse to render the start menu properly all the time), and others that can't scale stuff properly. Multi monitor support is weird. Control panel is now hidden even though settings doesn't have all the settings in it yet. "Apps and features"!! Who the fuck signed off on that piece of shit? Resizable columns? Nah, who would want that. Cocks. I should answer the question, but it's nice to see someone hate MS strategy madness as much as me. If you make it here OP, yes, do some UI stuff, it's a useful skill set and a different mindset. WPF, Xamarin and MVC on the MS side, although you might consider using MVC for web services perhaps and Node with a decent web framework for UI stuff. Up to you :) 
Removed: Rule 4. Others have already provided good responses, but this is a question that can be answered with even a minimal amount of effort researching it on google.
That's good advice. I love front end stuff, everyone should know how to throw together a UI just for demo stuff and proof of concept, but it doesn't suit everyone. I spend a ridiculous amount of time re-engineering back ends because 75pc of all front end problems are basically back end problems (That's a long conversation), so even though I enjoy classy UI stuff, I still do more back end stuff.
I see now, you are absolutely right! I seem to remember a time that you couldn't easily initialize a project from the command line except a simple blank one. Thanks for the update.
&gt; UWP has pretty much everything you need to make a good UI. That's a bullshit reason. That depends on how you define a "Good UI." I'm talking about a UI that people expect from a desktop app, which lines up with the UI of other desktop apps on the system... i.e. A UI consistent with other desktop apps on the system. Which uses CUA Menu and Toolbars, and Keyboard Shortcuts. A UI which is very efficient for keyboard and mouse navigation, because that's how desktop users use their PCs... How does UWP enable that, and why should a developer fight against the core design of the "platform" (they don't call it a framework, BTW) to force such a thing into it... When they can use Windows Forms, WPF, MFC, Qt, wxWidgets, GTK+, etc. and just package the "Desktop App" for the store with the converter... Plus end up with infinitely more portable code (if using C++ [or something else] with Qt/wx/GTK)? &gt; How about Skype, Groove, Mail and Calendar, Xbox app, Photos, Maps, Weather, and probably some others I might be forgetting. Skype is a buggy piece of shit, and still hasn't gotten to feature parity with the Windows/macOS desktop version, after **YEARS** of them porting it over from framework to framework (it was initially developed in Delphi, IIRC, which is kind of ironic - all things considered). The performance is awful, the reliability/stability is awful... You can't even depend on it to excel at its own core function, messaging... Groove is a shit media player, and still hasn't reached feature parity with Windows Media Player. I still can't do variable speed playback in Groove or the Movies &amp; TV Player. It took a year for it to get "Repeat this Song." Does it even have an Equalizer? Library Management is absolutely atrocious. It doesn't even know what an AudioBook is, and it takes forever to refresh the library when you add many tracks (at least twice as long as WMP) ... and I have an SSD. The Movies &amp; TV Player skips and stutters playing High Frame Rate video that WMP laughs at. Some videos display upside down, while displaying properly in WMP. Mail and Calendar are basically the equivalent of running the iOS Mail/Calendar or Google Android Gmail/Google Calendar Apps on a desktop. Outlook Express on Windows XP (never mind Windows Live Mail) was more capable, and infinitely more usable with KB and Mouse. Those are mobile apps running on a desktop OS, which is sort of my point, right? Xbox App? Photos? Which is worse than using an low end Android phone for managing your photos? But, it's got a weather app! Soooo useful... Some other things you might be forgetting: Sway, OneNote, Office "Mobile," Sticky Notes. These are all practically mobile apps. The OneNote App is a port of the Web App to Mobile, which was then ported to desktop. This is why the macOS version is absolutely atrocious and basically mirrors the UWP app, which mirrors the Web App. Sway is not much different from a wrapped web app. The Office Mobile apps are definitely not "desktop" apps in any *intellectually honest* definition of the word (not the "but it runs on a desktop OS" cop-out... so do Android apps, on ChromeOS), which is probably why they branded them "Mobile." Somehow, those other apps are different, though! Please elaborate?! UWP is a Mobile App development Platform. They call it platform for a reason. It wasn't just because the letter combination was more attractive. It's a mobile "platform" that they ported to Windows, and are now using to bolster their tablet hardware by getting developers to develop for it: a platform heavily biased, and designed for, mobile (tablet, smartphone) devices. That is the whole point for its existence. UWP is a reboot of Metro. Instead of making them **obviously** (since it isn't obvious enough for people like you, and I'm not sure how that is the case) mobile apps, they put them in Windows to placebo you into thinking it's a desktop app, when it isn't. Windows 10 running UWP apps feels like an iMac running iPhone and iPad Apps. Or, more apt... basically like running Android Apps on ChromeOS.
with WinForms you can do it [like this](https://stackoverflow.com/a/5762806). with WPF you can subscribe to the [Dispatcher.UnhandledException](https://msdn.microsoft.com/en-us/library/system.windows.threading.dispatcher.unhandledexception\(v=vs.110\).aspx) event (set e.Handled to true if you don't want the program to crash).
&gt; That depends on how you define a "Good UI." I'm talking about a UI that people expect from a desktop app, which lines up with the UI of other desktop apps on the system... i.e. A UI consistent with other desktop apps on the system. Which uses CUA Menu and Toolbars, and Keyboard Shortcuts. A UI which is very efficient for keyboard and mouse navigation, because that's how desktop users use their PCs... This is all easily possible with UWP. Not sure what you are on about. And yes, you can shit on the apps (mostly based on your opinion), but they are UWP apps and work fine for most people. &gt; UWP is a Mobile App development Platform. They call it platform for a reason. It wasn't just because the letter combination was more attractive. It's a mobile "platform" that they ported to Windows, and are now using to bolster their tablet hardware by getting developers to develop for it: a platform heavily biased, and designed for, mobile (tablet, smartphone) devices. That is the whole point for its existence. No, it's not a mobile platform. &gt; UWP is a reboot of Metro. Instead of making them obviously (since it isn't obvious enough for people like you, and I'm not sure how that is the case) mobile apps, they put them in Windows to placebo you into thinking it's a desktop app, when it isn't. You don't know anything about either Metro or UWP if you think that. &gt; Windows 10 running UWP apps feels like an iMac running iPhone and iPad Apps. Or, more apt... basically like running Android Apps on ChromeOS. No, but keep thinking that :) Seriously, before you write garbage like this, read into the tech and why things are the way they are.
That's exactly what I was looking for. 
Sounds like you are stuck in guess and check debugging hell. I'd use DotTrace or another profiler to confirm the slowdown in the app layer, then something like fiddler or even Wireshark to see the transport layer if you can confirm it isn't the code
UWP wont work on Windows 7 though.. some of us have to live with it because some customers will not move to newer OSes
Also take a look at Xamarin. They are more cross-platform than WPF. You could also potentially write Android apps in C# - which is a big win for me. WPF &amp; Forms is needed when you ship client apps / offline apps / heavy apps etc. They can do more heavy lifting than something like electronjs. If your goal is to not write desktop apps, then don't bother with it - simple as that If you wanna do webdev, then I also suggest learning a bit of .NET Core 2. They run on linux, and most new companies would wanna run ASP sites on &lt; 5$ Linux VPSs, so you may get lucky
If you're referring to my suggestion, it would require Sql Server 2005 or newer.
Removed: Rule 2. If you're worried about getting an IP-ban, then you're doing something that you shouldn't be doing. Attempting to circumvent this would be considered a violation of Rule 2. If you need the ability to do this, contact the API/webserver/site provider to make alternative arrangements with them.
Well, he already knows WPF and web apps work on pretty much anything.
Why not both? It's not that one tech is better than the other; it's that they serve different project types. 
I dont think any of these people have used UWP. It has so many shortcomings and is incredibly limiting and unfriendly to non-MDL2 cookiecutter bullshit oriented designers
You are so wrong. And so angry.
Try to learn the most you can, desktop (WPF or even Winforms), Mobile apps with Xamarin (iOS, Android, UWP), Web, etc. I'm using ReactiveUI (it is great), for MVVM, and it works on several platforms. 
Not angry at all, I just don't feel like addressing the same nonsense over and over from people who hardly seem to understand tech, Windows or Microsoft in general.
Then why are you here in this thread? I understand tech fairly well. You just seem like you've never designed and developed anything but a phone app.
Oh, It's totally the other direction in my company. Because we have many good C# developers with little experience in web as of now, we have most bugs in the .JS/.TS code, and almost no notable bugs in C#/backend code.
Hopefully so other people don't just swallow the bullshit. I've made phone apps, desktop apps, websites, backend services. I have plenty of development experience.
How valuable is that book now when Core 2.0 is out though? Wouldn't there be a lot of changes? Or does it work the same? I'm new to this as wel so I don't really know.
That's quite rare, especially after a few years of extension :) Sounds quite pleasant :)
Looks like a really cool project. I'll upvote it on Github even though I may never find time to use it. :) Edit: Does it do server or client side rendering?
These are the same templating bits that full VS on Windows uses too.
Probably because: 1. Very small company ~25 pps 2. Experienced Developers, but also younger ones (18 (myself) up to over 60) 3. No public applications, only for businesses, and they're all unique applications for their use case. 4. I'd say 3/4 of my company has a Computer Science Degree and everyone else has either done courses or an apprenticeship (as software dev). 5. Many are Desktop (old VB6 up to WPF) developers with 10+ Years experience. So just a great company with very competent people :) Edit: Oh, and we have professional testers, that touch the application and check if all requirements are met. If there are any bugs, it goes back to the developer before going to the customer, and it only get's delivered when all bugs are fixed.
Added to Nuget. You can test it if you want now :)
He is not wrong at all, you have a misconception of UWP platform.
What would be a good example of a use of an Azure Function?
Change "x.Tag == "blockies" to "x.Tag.ToString() == "blockies" The Tag property is of type object, and you are comparing to a string. You need to "cast" the .Tag to string with the .ToString() method for comparisons.
x.Tag is type object so the == operator is comparing to see if the two items (x.Tag and "blockies") are the same object. They probably won't be. There are a couple of different approaches. I prefer string.Equals(x.Tag, "blockies") because it handles null values and cases where x.Tag isn't a string. It also lets me do a case-insensitive comparison when I want to. 
[removed]
Nope.
Core 2.0 is mostly performance enhancements. You'll see some differences between 1.1 and 2.0 with some framework libraries but not many, and no major changes to the libraries most leveraged by ASP.Net Core MVC. I'm not sure if the book uses project.json files or csproj files, which is the single biggest change that occurred in the .net core world to date. Bigger than anything that changed between 1.1 and 2.0. source: already using 2.0 in production 
Try to use: await AsyncFunctionHere().ConfigureAwait(false); Instead of just calling await for the async function.
You also cannot parameterize the table name.
Groan.... best not rock the leaky boat.
Welcome!
The changes would be mostly syntactical as far as I understand - the core ideas are the same, and the compiler will give you an easy to research error if something changed from the way it was presented in the book.
Thanks for the advice, this is already the case as it was deadlocking without ConfigureAwait but that would be a different unrelated issue.
Tried dependency walker and bindump... just function names and addresses... so i'm SOL without source it seems... Thanks for the dependency walker tip though
How so? I haven't looked at UWP much (currently working on a Xamarin Forms-based mobile app, though) and it doesn't seem much more limiting than WPF, unless you *really* need a Win32 API.
Wouldn't it be better to target *.NET Standard*?
This is reaching the knowledge of my debugging abilities. I have two things to test: DNS problem as /u/Twiebie- suggested and I'll rewrite the library as static code and compile in a dll.
With Xamarin Forms you can target Android, iOS and Windows (and soon Linux and macOS as well). What other platforms would you need to consider?
DotTrace download - https://www.jetbrains.com/profiler/ Fiddler download - https://www.telerik.com/download/fiddler DotTrace is free for 7 days, fiddler is just free. Fiddler is a tool you absolutely must know if you are doing web development, and it is pretty easy to use. Now's the time to expand that knowledge of debugging :-)
You should definitely know at least one interface programming paradigm so people don't say "oh, they only know how to program back end, we need someone more versatile." You should decide if, for your first job, you want to try to get a job programming desktop apps or web apps. If I were you I'd look at job postings in your area and maybe call some recruiters to get their opinions on what jobs they're seeing more of. I'm a web programmer, so I know *that* stack. In the web world, you need to know C#, ASP.NET, MVC, HTML, CSS, Javascript, SQL, and either JQuery or Angular, preferably both. (I don't know Angular but I've survived okay.) And no, I'm not kidding, you are really expected to know all of those things and keep up to date on *all* of them or you will be considered a fossil and pushed out quickly. And yes, I really did have to use *all* of those things every day. If you can learn to build a back end with a database connection and web services, and a separate front end, maybe web, that works off of ("consumes") those web services, you can sell yourself as an expert in "Service Oriented Architecture" (SOA), which is (stupidly) considered *very* valuable in today's market. (I've had several employers abruptly *demand* I change *everything* to a SOA, for no apparent reason, and they didn't even understand what it is, but it became faddish in the business world so they had to have one, the million dollar costs of changing literally everything to achieve nothing be damned.)
Maybe you have too many HttpClients? I know you said singleton but idk if you mean the library is a singleton or your instance of a HttpClient is a singleton - see below Read this for more info. I ran into a problem kinda like yours, and it solved my speed issues instantly https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/
The reason I had to move to Web technologies was due to the inclusion of macs in our computing environment about a year and a half ago. Xamarin Forms are great but they didn't and currently don't meet our needs. 
&gt;Xamarin Forms are great but they didn't and currently don't meet our needs. Yeah, that makes sense. The current roadmap lists macOS support as coming Q3 2017 and Linux/GTK# in Q4 2017, so I would advise someone looking at cross-platform development to consider looking at Xamarin forms for new projects.
Everything I've used takes a known header file. You said you don't have the source, but do you at least have that being used in another project that consumes the DLL?
Both :D (but I'll double verify tomorrow) but thanks. It's really on the first call though. Every other calls are returned super fast.
You can create timer triggers to process repetitive tasks. They also have triggers that plug into service bus and azure storage queues to process queued data. There are http triggers for scalable endpoints, but last I checked the http triggers don't scale past 30 requests a second and Microsoft had no time frame on when this would be fixed. Azure functions are great for small processing tasks you need to scale on the fly. I've used them to process queues and when I'm in a slow processing period it will do 20/sec then during peek hours it will auto scale to handle 500 requests a seconds. Also you can run these on consumption servers meaning you only get charged for when your code is running. It's nice for variable processing on the cheap. An example: Every hour run a query on the DB to get all new data in the past hour. 
If you don't know or can't decide what type of software you'd like to develop, choosing to learn HTML and JavaScript is a smart move. Those technologies are going to be long lived and used on many platforms. If you know that you're going to make desktop or mobile software instead, think about the UI's you'll find there. WPF is broadly supported across Windows versions, but UWP is the one that is getting all investment for future versions. HTML and JS are another option for desktop and mobile even outside the browser (https://electron.atom.io/ and https://phonegap.com/). And C# can be used for Android and iOS as well with "native" UIs (https://www.xamarin.com/platform). So you've got a lot to choose from. I would focus on what keeps you passionate. Making things in your spare time will teach you more and probably be more valuable in finding a job than choosing the right stack. A little HTML and JS still probably won't hurt. You've got to show off your portfolio of desktop or mobile projects somehow.
I'd like to C# professionally, but all I can find locally are senior level positions.
&gt; use "their" instead of "his/her", makes you sound like you have an issue with gender equality. the fuck? his/her means his or hers. its a shit ton better than default "his" even though thats fine in english... as gender neutral..,
I was a senior front end developer who has transitioned into a full stack role (although I have a pretty good background in backend through a computer science degree and freelance work) and I cannot hardly stand doing front end work anymore. While JavaScript is getting better with ES6 and frameworks like Vue, react and angular, the over complications of the front end stack piss me off. Our backend devs transitioning to full stack are having a much harder time getting it all than our FE devs since our front end stack is so complicated. Myself and some architects are in the works to rebuild it using only webpack and ES6 with import dependencies (and promises instead of event pub/sub) and possibly Vue, but I miss the simplicity of backend development. Especially building API's. 
Is it a problem to add the using statement at the top of the cs file where you reference it? using myotherprojectnamespace; I do this all the time in solutions where I share projects between them. Making one big solution for everything would be horrible, especially if I was rebuilding everything regularly.
WPF is dope. You'll enjoy it. Yeah, a lot of the future is in web apps but that doesn't necessarily mean that's what you should be doing now. Hell, if you really enjoy developing for the desktop, there will *always* be jobs there. You could stay there your whole career and do just fine. Or pick up asp.net web api and be a thoroughly equipped backend engineer in no time. Those jobs are everywhere, too. Front-end is trendy right now, but every front-end engineer wants an equally committed back-end guru to implement all their api needs. You'll be a hero. There's no wrong answer here, sir or madam. There's an unending amount of things you can learn and build and do regardless of which way you go, and all of them can be very fulfilling. C# and html/js/css aren't going anywhere, so you won't go wrong pouring yourself entirely into one side or the other and seeing what the deep end feels like a bit.
While our front end stack is overly complicated, our backend is ridiculous. We are a fortune 50 company though with over a million users a month of which are all based on a huge list of business rules, so something as simple as adding a navigation item can take a couple days if we need to hit a couple of services so our API can create a rule among 30 other rules to be consumed in our web layer for a simple link. So our backend logic can get mucky, but it generally has to do with bad explanation from business to begin with. 
&gt;If you haven't, point out that the last stable release of ASP Classic was seventeen years ago in November 2000. Heheheheh. My previous job, one year ago, the IT department was stuck using FoxPro and the IT director refused to go with anything beyond Windows 7.
&gt;. I am just looking for better advice. I am going to use multiple solution files in a root folder under the namespace. Git repository that only people you permit can access. (or maybe visual studio portal. either one. I'm not an expert on that.) Then you can just keep your local repository on your local box while the other team members keep theirs on theirs. Or maybe I misunderstood you.
By the time these guys are to a level where they are actually productive (because learning this stuff takes time), core will most likely be perfectly suitable.
For targeting desktop, I personally think angular 2 and electron is a better solution than xamarin forms.
FWIW, I'm an engineer at Microsoft and WPF is my bread and butter. Sure, there are technologies that are more relevant right now, but if WPF is what interests you, you should absolutely go for it. You'll learn a lot of great, still-relevant concepts either way.
What? No! They will sit you down and make you do a written test on everything they use. If you miss any questions, you'll be relegated down to janitor and the guy who gets the coffee for the real developers. ;) Kidding. You'd done the hard part. You got the job. Now you'll be fine as long as you get along with people. Weirdly, it's not so much what you do as much as what you don't. Don't make enemies. Don't steal lunches. (really. People hate that.) Most importantly, don't try to show off. If someone tries to teach you something, don't get mad even if you already fully understand it. If you get an assignment, don't try to whip it out in 10 minutes to prove how smart you are. Check three times to make sure you fully understand the requirements and you've matched them. Also, never ever interrupt other people's explanations of what they need. People hate that. They may lose their train of thought and you'll just piss them off. Pretty much when a new person is added to the group, especially a relatively new developer, the boss is expecting to teach them everything. Questions are never a problem (unless you've asked the same question a hundred times).
Or you can use something like http://www.nirsoft.net/utils/dll_export_viewer.html to explore the dll points
Then it's something in your solution. If you can't remember what the last change you made was before it started, then start adding the projects one by one to a new solution until it starts happening again. If it never does, then it's the solution file itself that got corrupted somehow. Or the references.
&gt; MFC What is this 1998?
It's reality. If it works, it works. Borland's VCL was developed in 1994-5. That doesn't mean it shouldn't be used. Qt comes from 1991, or so, IIRC. That doesn't mean it shouldn't be used. How old is wxWidgets? Developed in 1992? And it uses a similar system to MFC... That doesn't stop people from recommending it. GTK+ is from 1998. Maybe you should find a new cliché? MFC tends to outperform Qt (as does wxWidgets), and honestly the only reason to use C++ over a managed language on Windows is for the performance (in desktop apps) and systems development. If the app is going to be cross-platform, then MFC won't be a factor *at all*, anyways, since it is nothing more than a light OO wrapper for the Windows API. It's basically what the API would be like if it was C++ from the start. It was never intended to be the most theoretically faithful rendition of an OO library... Borland's OWL actually was that, back then, but developers didn't seem to care about that... ;-) MFC also still has a decent ecosystem of extension libraries out there - both commercial, free, and open source. The licensing is very transparent, and it incurs no additional cost once you buy Visual Studio (if necessary). I see no problem with developers using MFC still. All tools have their appropriate usage, the tooling for it is still pretty decent, and Qt is beyond expensive to license if you aren't raking in a fare bit of cash with your apps (and don't want to open source or distribute object files, which can leak IP, to your customers). UWP will lock you out of Windows 7 and 8.x, which are still very relevant markets. If one can afford a Qt license, then it's completely feasible skip Qt entirely and buy C++Builder - frankly. That's a superior choice for Windows development than Qt, and the fact that it isn't Linux compatible isn't a factor since we're talking about MFC, which would never be a consideration if Linux was on the table. If that was the case, then the Library we'd be looking at would be wxWidgets, which is actually quite similar to MFC in "feel." But hey, making sound business decisions in this subreddit is a definite no no! It's all about feelings, clichés, and repeating bad jokes in one liners for up votes! Would I use C++ (with any application framework) for a large GUI application on Windows? Probably not, unless performance was a huge concern... In that case, I'd seriously consider C++Builder, or simply use something like FPC/Lazarus. More naturally, I'd just do it in C# and use C++/CLI for the performance-sensitive parts of the application. Qt is widely used chiefly due to Linux/UNIX development. Most people are not developing applications that are compute intensive enough to elicit a debate on "whether C++ should be used." I listed MFC because it's basically the C++ equivalent of the Windows API. That's the whole purpose of the Library. Not to reimplement or wrap the world, like Qt, but only to make it easier to develop Windows applications with C++. If developed cared about having a "better MFC," they'd have used Borland C++ and it's ObjectWindows Library, which was a lot more "pure O-O" and certainly a bit more elegant (used the STL, etc.)... But we know how that has gone...
I know MFC. That's what I'm using at my job right now. That's why I know it sucks.
Yea that's what I ended up doing. I added everything to a new solution, and it ran fine. So somehow the original solution got corrupted and I have no idea how.
All C++ Application frameworks suck. Better than bad does not equal good. It has always been this way. It's always been about either: 1. Using MFC because it is the best documented "classic Afx" out there (Books, Tutorials, etc.). 2. Using whatever is considered to be better than MFC (like OWL) and hoping it doesn't disappear (it did ;-) ). But a lot of people use MFC because the tooling is decent and in the IDE, it doesn't add any additional complexity to your build system, and it tends to yield better performance than Qt. Plus, once you learn how to use MFC, it isn't really that sucky. Though it is certainly cliché to call it every bad name in the book :-) Most beginners are learning from books that have them develop Windows Forms application in a style reminiscent of Visual Basic 6 (80% of books for *Beginners* are doing this). They're going to balk at anything that doesn't look like C++Builder, Qt Designer, or Interface Builder anyways. So, I don't think you have much to worry about... with MFC increasing in usage...
Ah, that is a good idea. I doubt there is a tool for that but I could get the parameters that way... at least the ones that are used. 
&gt;It seems like most companies are moving towards web apps Really depends on the business. Internal desktop apps, especially using WinForms can be built significantly faster, and when project managers are in a rush, they don't care and they will have no problem making it in WinForms rather than WPF, and even that over a web app. Web apps are much more popular for companies whose business is their website.
If you're in SQA why not start with QA Automation? I'm a QA Analyst and my team is letting devote some of my time to automation and I freaking love it. I get to code a couple hours a day, which means getting paid to learn and get to break up the monotony of 8 hours of straight testing. It seems like there is decent demand for SDETs and if nothing else you become well versed in unit testing which is valuable not matter what you end up doing.
how did you start learning programming am noob and want to be c# developer too
.ToString() is a method call, not a cast. If Tag happens to be actually a string, it will work more or less as a cast.
No. - `public` is not needed. The main method can be in internal classes. - Too much white space. It's often not needed. - The class name can be shortened. It doesn't has to be `Program`. - By removing one namespace include and instead using the fully-qualified type name you can save some characters too. - By wrapping everything in the Microsoft namespaces you can shorten the namespace includes. Thanks to /u/Tinister. So I got right now: namespace Microsoft.AspNetCore{using Hosting;using Http;class P{static void Main()=&gt;WebHost.Start(c=&gt;c.Response.WriteAsync("Hello World!")).WaitForShutdown();}} Which is 160 characters. And the csproj: &lt;Project Sdk="Microsoft.NET.Sdk.Web"&gt;&lt;PropertyGroup&gt;&lt;TargetFramework&gt;netcoreapp2.0&lt;/TargetFramework&gt;&lt;/PropertyGroup&gt;&lt;ItemGroup&gt;&lt;PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.0"/&gt;&lt;/ItemGroup&gt;&lt;/Project&gt;
ctx can also just be a single character.
It helps a lot if you have a concrete problem that you want to solve, learn your programming language of choice, and solve that problem at the same time. Like with OP's example. Simply following tutorials, with no goal in mind, means that you possibly learn the theory, but not necessarily the application of that theory. By all means follow them, but in parallel, think about how you can use what you are learning to solve your problem. For C#, you can grab one off the free IDEs, and get cracking. 
Might as well optimize the whitespace-filled XML csproj too ;)
Hahaha. Thank you I will keep that in mind. My people skills aren't my strength so I guess I will have a lot of work to do on improving that. Other than that though it seems as though I was just overthinking and stressing myself for nothing. Its great that I can come on here and discuss these kind of things with such helpful people. Thanks again for your help.
Don't worry too much about your first days. Not much is expected out of a junior developer and people will help you. I do have some advice as you start down this career path though. As others have said: don't be afraid to ask questions. When someone more senior than you throws out a term or acronym you don't know, ask. It's better to ask and learn than to pretend you know and look incompetent. Try to realize that your knowledge level is low. If you want to get better, you need to constantly make the effort to learn more. New techniques, new patterns, new theory, new frameworks, new architectures. Realize that no matter how much you think you know, there is always much more to learn. If you want to set yourself up to improve your skills quickly, there are things that you can learn early-on that will give you a big advantage. As others suggested, read Robert Martin's Clean Code. Learn about OO design patterns. Learn and understand the SOLID principles (they can be difficult but when you actually understand them, it really empowers you to write clean, reusable, maintainable code). Learn about good architectures like onion/hexagonal so you can understand why the structure of your code matters as much as or even more than what the code actually does. And learn to write unit tests. I'm not going to preach to you about doing TDD or not but writing tests WILL make you a better developer more quickly than anything else. Writing good tests enables writing good code. Writing good code enables writing good tests. They both drive each other. Writing them will help you understand OO design patterns. It will help you understand SOLID. It will help you understand why writing Clean Code is important. It will make you better and faster at debugging. Starting to learn these types of foundational skills early in your career will set you up to being a good coder in any language, not just the language you're currently spending your time in.
Large switch controls are a code smell. Consider using dependency injection as an alternative way to control behavior. 
(emulator context btw) That doesn't sound like it would work for setting/getting variables (read: hardware registers). Someone else suggested a delegate array (or something like that) since, some variables have different bits that can / can't be set / gotten. And that seems slow and not really any more readable... Thank you for the concern and suggestion though.
Good general suggestion, thank you, (this is me trying to not come off as arrogant or something because of my other comment) 
WPF is still the best practice for desktop apps - albeit only on Windows. HTML and JS have their uses, but should not be used to categorically replace all UI - if you've ever used an app that *does* use them for desktop, you'll understand why.
Ok, I checked out /u/kryzchek [answer](https://www.reddit.com/r/csharp/comments/6ws341/problem_with_parametersadd_in_sqlcommand/dmabauk/) and it just works DECLARE @Times int = 5; SELECT TOP (@Times) * FROM SomeTable -- ^ ^ -- Watch the braces! Crazy! Some kind of parsing / AST weakness in the implementation of the SQL-Server's engine?
Why do you need csproj? Make it in csx as one line lol. 0/10
And 'Hello World!' is also too much, "Hi World!" will be enough :)
It’s not called Win64.
While I agree that a lot have been ported, they also tend to have almost no functionality, and I keep having to go back to the old versions which are still confusingly (for people in general, I imagine) included. They also look like crap, but that’s more subjective :p
Uhm, honestly totally looks like Metro. 
Doesn’t make much difference. The assemblies in netstd are essentially the ones in netcore. 
Adjusted. :-)
But then it's not a hello world anymore.
That's not a UWP fault, it just takes time to rebuild apps and functionality regardless of software platform. Also, its barely true. Photos, calculator, alarm, paint 3d already have more functionality than the old versions, Mail and Calendar are getting there. Things like Office will always have less, but they're not supposed to be on par anyway.
Metro is a design language, UWP is a software platform.
&gt; Also you can run these on consumption servers meaning you only get charged for when your code is running. It's nice for variable processing on the cheap. Yes, this is exactly why I use them. When I don't need to use ASP.NET for an API endpoint, I use functions because ASP.NET is actually weirdly expensive relatively on Azure.
Ah. The additional context definitely changes the answer. I've never attempted to emulate hardware registers in C#. Can you provide a little more info on the switching you are doing? what are you switching on? Speed really is not an issue. You are essentially moving your switch farther up towards the configuration level. "Getting and setting properties" sounds a bit like you are doing one of two things: 1. State initialization 2. I/O (something along the lines of switching on which register to read from/write to? this pattern would be nasty) Do tell!
I did make the change u/kryzchek sugested, and it did work for my numrecords, but now i get an error on tableName. And this is the CommandText i get "SELECT TOP (@numRecords) @fieldListStr FROM @tableName" I do not see how this helps?
Yes this works for numRecords, but then i get an error on tablename Additional information: Must declare the table variable "@tableName".
What are the two using statements even for? Extension methods? What about `namespace Microsoft.AspNetCore{using Hosting;using Http;class P{...}}`? Can't doublecheck at the moment if that works. 
The binding of values to the viewmodel is handled by knockout.js, which is client-side. Most DotVVM controls have a [server rendering mode](https://www.dotvvm.com/docs/tutorials/basics-server-side-html-generation/latest) which renders values on the server, but knockout.js is always required.
`WaitForShutdown` and `WriteAsync` are both extension methods. Using the fully qualified type name would make the code longer. The idea to wrap it in the MS namespaces is neat. Shortened it by another 10 characters.
Should also be able to remove the namespace qualification from `WebHost`.
Absolutely, I am at work and did not pay attention. Down to 160.
Sounds like a nice place to work :) 
+1 for OpenIdConnect, also check out openiddict ( https://github.com/openiddict/openiddict-core ). With the latter I quickly threw together a /connect endpoint that generates access tokens for my API. 
Same here. I work as a full stack jr. JS/C# dev and I'd much rather work with the backend, even though I had been 100% focused on the frontend for over a year before I got this job. The front end feels so messy to me with all frameworks and dependencies.
I highly recommend you to learn the MVVM pattern it allows you to creat extremely clean WPFs. You can also make multiple UI Designes and use them easily with the same back end. 
WPF is great indeed, it is still an awesome UI framework. I have made a Popcorn Time port in WPF recently, you can have a look : https://github.com/bbougot/Popcorn
Pull request?
Keep doing what you are doing. Write good clean code and post it to github so you can show it off in an interview.
I usually return an optional out enum containing something like Success/FileIsLocked/AccessDenied/NotAnImage (everything that can go wrong). This makes debugging extremely simple. I never throw exceptions and never use classes that can throw exceptions without a wrapper class that handles them.
Do it?
Literally any scheduled repetitive task. Updating dashboards (either via a timer or a listener). Emails, reporting, dashboard updates. They are great for anything you want to just set and forget.
Yes. I'm not sure if they still require "developer mode" to be turned on for each tablet, but you can side-load the appx bundle created when the application is built. 
Yes [but there's a setting you have to turn on](https://i.imgur.com/LPET12U.png) to enable this - but you can do this via group policy so long as the workstations are running Enterprise/Pro edition.
Unfortunately the 2nd pattern. I'm switching on a memory address, which accesses a different part of memory (memory is mapped, both on in range and mapped rom / external ram banks), from FF00-FF7F are subsystem registers (lcd, apu, timer, etc) each of those have their own registers and their own functions for reading and writing to their registers.
If I were able to obtain a known header file which tools would you recommend?
I got around to testing this and had some issues. I opted for a good old console app for my test project and couldn't pull in the NuGet package because I got an error stating that the package does not contain any assembly references or content files that are compatible with .net 4.5.2. I hadn't made the move to .NET Core yet so I ended having to update Visual Studio 2017, install the .NET Core 2.0 SDK from here: https://www.microsoft.com/net/download/core and then creating a .NET Core Console app got me going. Perhaps consider some other .NET targets if you are interested in getting exposure? Regardless, the library is great and has a ton of useful stuff. I find the Min/Max priority queue very easy to use as some of the other options available require a comparator to be provided to the queue which is more flexible but less intuitive.
Maybe abit of a skewed response but I recently used AWS lambda (so along similar lines) to do something that didn't happen often but could need to happen a lot at once (ideally in parallel). As scale with all serverless offerings is event based in some manner, it suit these situations.
Hate stops in C# 7. if (int.TryParse(str, out var i)) ... 
Don't want to steal the credit, that was some good feedback.
There are two "schools" on that. One assumes that exceptions are truly exceptional and 100% indicate developer screwups. Another allows for exception use for quite complex program flow. For example if you go 20 levels deep then it is easier and less error prone to throw exception at the end than to ensure that all functions return correct ok/fail value and handle it properly everywhere. 
Yup, the first .NET Framework version compatible with .NET Standard 2.0 is 4.6.1 so that was the problem, so yes I could add an older .NET Framework version class library. Yes I wanted to make it more flexibable that's why I used the compararer, which is indeed less intuitive, but I think the trade-off was needed because the main function of the priority queue is the items priority(hence the name), and comparer provides wider useability. And if using normal types, most of which inherit IComparable the default comparer is used, so everything works :)
It's short hand for 64 bit windows. You get the point. 
[PInvoke Interop Assistant](http://clrinterop.codeplex.com/releases/view/14120) should work. If you want to produce a DLL you could actually feed the C++ compiler the header in an include and use /clr to produce an assembly. You could even decompile that assembly to pull out the pinvoke statements if that CLR Interop tool doesn't work - been years since I last used it.
And UWP has a "look and feel" of metro. That's one of the reasons it's called a platform. Normal Windows has its own, as does Mac and each flavor of Linux. He's not wrong saying its native look and feel feels like Metro. Because it is.
What is the stack trace of the error? 
I think you don't get why I'm saying the other user is wrong. UWP is a software platform and makes some assumptions as to the design you want (MDL-2), but it doesn't restrict you to it. You can choose to follow it, or create your own style, which is supported just fine. The Fluent Design language is the equivalent of what Metro was. UWP cannot be a reboot of Metro because the things don't share anything common. UWP allows you to build apps with Material Design if you want, and you can build MDL-2 apps in Xamarin if you want.
Please explain the last part in more detail, thank you 
Google -&gt; Windows 10 group policy sideload -&gt; first result -&gt; https://blogs.technet.microsoft.com/askds/2015/09/22/manage-developer-mode-on-windows-10-using-group-policy/
I tried a console app targeting 4.6.1 and couldn't get the DSA NuGet package added to it.
He's talking about the operating system itself. Windows OS comes in different editions: Home, Professional, and Enterprise. Home apparently does not support side loaded apps, but professional and enterprise do. Typically a work computer will have professional on it. I would look into some sort of group policy that turns this feature on otherwise you will have to ask each employee to turn it on manually... which would suck.
Why is the tax 21%? Just curious really. Looks really cool - gonna install this and give it a shot!
Interesting. Just tested it and it worked. Pretty strange to say the least.
Hi check out my begginer tutorials there is like 3 videos that you need to watch to make you're first app with input and output :D https://youtu.be/q7HpoFwSjOU (this is link to one of videos but go to my xamaron playlist to check out the videos for you) i made them somple and easy to understand cuz i spent so much time figuring some things out .. hope it helps and yeah it's in c#
Video linked by /u/StraleXY: Title|Channel|Published|Duration|Likes|Total Views :----------:|:----------:|:----------:|:----------:|:----------:|:----------: [VSX Ep.5 PopUp Menu](https://youtu.be/q7HpoFwSjOU)|S&amp;S Channel|2017-07-25|0:09:17|1+ (100%)|122 &gt; Feel free to ask if you have any questions :D Enjoy and... --- [^Info](https://np.reddit.com/r/youtubot/wiki/index) ^| [^/u/StraleXY ^can ^delete](https://np.reddit.com/message/compose/?to=_youtubot_&amp;subject=delete\%20comment&amp;message=dmc8nko\%0A\%0AReason\%3A\%20\%2A\%2Aplease+help+us+improve\%2A\%2A) ^| ^v2.0.0
I managed to download 2013 Community from the Microsoft site. I did have to log in to access the download link but once logged in I was able to select the 2013 with Update 5 download link. https://www.visualstudio.com/vs/older-downloads/
 Core 2.0 is not mostly performance enhancements. It was mostly functionality, and matching up to .net standard 2.0. A lot of functionality got added and things streamlined down, a lot of things you had to do in 1.0 and 1.1 don't have to be done anymore, but it was mostly matching to .net standard, and for instance things such as referencing Microsoft.AspNetCore.All, instead of only adding what you needed.
A lot of things you had to do to start up a web app aren't needed anymore, and it references .net core 2.0, which is .net standard 2.0 compliant, so even more "work arounds" might not need to be done.
On top of the other answers I like them for simple REST APIs. If you just have a few methods to implement it's a nice, simple way of doing it. I have one I've just finished for a student portal at a university. Simple timetable API to let people find their own personal timetable, but also for rooms and courses and so on. Same basic query in three slightly different flavours. Perfect. A particularly nice feature though is I can chop and change languages. Most of it is C#, but if say I want to do something in Python or Powershell or, more likely for me, R then I can. Not just languages either. If you have something that runs on a command line and is largely self contained, i.e doesn't need much in the way of external libraries, then you can run it inside an Azure function. Worst case scenario is you call it from a Powershell Azure function and then just capture the output. You have a *lot* of flexibility.
http://www.jondjones.com/learn-umbraco-cms/umbraco-developers-guide Any questions feel free to ask :)
Isolate your container to your application's composition root, and use it to manage object lifetimes. Your other two solutions are, essentially, the Service Locator pattern. This has its place, but it's usually not ideal and can make it more, rather than less, difficult to maintain your system. (As an example of where it *is* useful, MVC makes pretty heavy use of Service Locator in its use of a DI container.) If this produces a solution where the container is totally superfluous: congratulations! you may not really need a container. If you *must* do this, though, you can manage unit testing as long as the container is accessible to the unit test project. Unless you're running tests in parallel, a static singleton shouldn't have any real advantages over a singleton that you new up and pass in.
Lol, this is pretty funny.
Aren't exceptions more expensive?
This. Generally passing the container around (self-DI), or wrapping the container or having a static instance of the container (Ambient Context), are both considered anti-patterns. However very very rarely it's ok. Unit testing is one of the only cases where it might be ok. Generally most of our projects initialize a container in the composition root, and then use Ctor DI everywhere. This allows the unit tests to initialize a container with real objects or mocks depending on how deep we want to test.
I recommend xamarin too
Yup. "I don't want to bother them" is a really easy trap to fall into. Believe me, they would rather help you learn than have to clean up after you.
Yes, if it's just a static site, honestly unless you plan to expand into a web application, Azure is not worth it. There is a simple guide for setting it up with a low cost plan if curious: https://www.microsoft.com/middleeast/azureboxes/cloud-hosting-for-a-static-website.aspx For static content I'd probably look at a "hosted CMS" like $12/mo for SquareSpace if it meets your requirements, which is same price you are paying, just as an example. Obviously it's a different can of worms because you are using a page designer instead of HTML/Javascript, but makes it easier for someone else to inherit and less to go wrong since you don't deal with any kind of OS administration.
Yes, that is database first. The other approach is code first, where you generate database using EF Migrations. If you look through the outline on the left you can find some of the different approaches here: https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/database-first-development/setting-up-database
Since we're golfing and not worrying about performance, `WriteAsync` should be `Write`. Can `WaitForShutdown()`be removed? The [code ](https://github.com/aspnet/Hosting/pull/1114/commits/15008b0b7fcb54235a9de3ab844c066aaf42ea44#diff-5f83d8643fe1028b91afb54bcbd0b8a8R40) looks like it's just attaching a cancellation token to `SIGTERM`.
Can you do [binding redirects](https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/redirect-assembly-versions) in csx scripts? That's usually how I fix this type of error in my apps.
Just pass what the function needs to it and stop making it complicated.
&gt; use Ctor DI everywhere Quoted for truth. Much love for Ctor DI.
Followup question, then: are you talking about traditional Ctor DI (just pass interfaces to the constructor when you construct) or auto-insert Ctor DI like what you get with Unity's `Resolve&lt;&gt;`? Because the latter one seems a little... magical to me, even though I can see its usefulness.
If the new instance is sql server enterprise then you might need to remove the instance name or replace it with a dot 
I absolutely would not pass it as a parameter and would advocate strongly against it. For one, you can make most or all of your objects completely unaware of the DI Container, giving you the flexibility to leverage those classes somewhere that setting up a DI Container is not possible or desirable. At one place I worked, we had business service classes with lots of logic in them, but because of certain dependencies, I could not call them from my batch job and found myself duplicating logic. It requires you to pass it down thru all layers even when intermediate layers may not need it. If you don't pass it as a matter of habit, and later see it is needed somewhere, you must find all callers and add it to be passed in, and so on and so forth. One of the things DI solves is having to pass through all the layers things like connection objects. It seems like a step backwards to now require the container be passed away in the same manner in which you are trying to avoid for other cases. It clutters method/controller signatures up. Parameters should only be those things that really tell a method or class what it needs to do, and anything else like a DI container or DB connection are plumbing to help you accomplish that. A bad method: SheepSheeringService { ... public void Sheer(IContainer container, AnimalRestrainer restrainer, Sheers sheers, int sheepId, double percentageToSheer) { ... } } When a developer needs to use this service, odds are he really cares only about the last two parameters. The container is plumbing, restrainer and sheers are essentially other business services that are leveraged to carry out the action, and are arguable plumbing. You might want to be able to pass in different sheers, perhaps some decorative sheers, but the most common case is you only have one production implementation of a restrainer and sheers. Better: SheepSheeringService { ... public void Sheer(int sheepId, double percentageToSheer) { ... } } You shouldn't containerize "data holders" for the opposite reason, because then that takes away from the descriptiveness of function signatures. You could make a SheerRequest object with .SheepId and .PercentageToSheer properties, but don't register it in a container on a per request basis just so you can avoid passing it as a parameter. Bad: public void Sheer() { var sheerRequest = Container.Resolve&lt;SheerRequest&gt;(); } I personally always use a method that allows me to retrieve the container as needed, but this should only be needed on the outer layers of the application. Instead of a static singleton, we may have a container accessible through the framework, but conceptually it is the same. For example in MVC SetResolver in app start and DependencyResolver.Current as needed. If it were a web app, then the UI layer can retrieve the Container, then create the required Business layer which should then automatically create all dependencies based the constructor's signature and registered classes. So deeper layers do not need references to the container, as the construction of dependencies cascades down through the layers. In MVC though, you wire up the container to be used for Controller construction in the framework. This means you would simply identify the business services needed in the constructor or properties of the controller, and when MVC constructs the controller it will inject them, which in turn creates dependencies for the next layer, so forth. So you shouldn't need a reference to the DI container at all if "done right". **Only First Layer References Container (My Preference)** My approach is to only have container references in the Controllers or "outer layer" of the application. All other services/classes take dependencies via constructor, and do not have any references to the DI container or have any knowledge of how their constructor parameters are passed. In MVC I do not have dependencies injected into controllers. I often find that some actions don't have the same dependencies as other actions because a particular action may require a specific business service. Additionally, some DI frameworks are easier to integrate than others, and it's alot easier to simply retrieve the container in each action and resolve the business service needed to handle the action. My controllers are lightweight and only one or two resolves are needed per action. This doesn't damage testability, since I can still register whatever business service mock I want, and call IContainer.Resolve&lt;T&gt;. I don't consider that tight coupling to the container, because if there's a container that doesn't support something that I can implement a IContainer.Resolve&lt;T&gt;() for, then I'm not interested in that container. Also, MVC doesn't like controllers without parameterless constructors, and I gate dependencies injected via properties because I think if something is a dependency, it is required, and accepting it through a property doesn't describe/convey that requirement very well. However it has the negative that now if I need to leverage a particular controller like SheerController, I can't construct it without the code expecting to access DependencyResolver.Current. I don't view this as an issue, because controllers and most other UI oriented entry points are already tightly coupled to the framework that manages them. They are difficult to test and either you go an extra layer up to test them by sending HTTP request through the framework, or a layer down and test the business service being called. If you are following a lightweight controller approach, your actions are incredibly short and contain no logic anyhow, just gluing request parameters to business objects to pass down and up. All of the business services, since they define dependencies via constructor, and never call the Container itself, could be constructed without a DI container. They look very "traditional" with no knowledge of DI. So if I'm writing something in a context where either I do not want to or cannot create a container and perform the necessary registration of types, then I have that option to go the old fashioned route of 'new'ing all the dependencies. It is useful when testing to troubleshoot bad lifetime configuration dependencies in the container, to isolate problems.
/r/learnprogramming 
Traditional Ctor DI simply means have the constructor of your object dictate the interface instances for the aggregate objects it uses. It certainly doesn't mean you have to use a container to construct it, although I usually do to make testing simpler. Consider the following - this will allow you to use a mock object in your tests simply by registering a mock interface, and then having the container construct the consumer as normal. You only have to call Unity.Resolve&lt;T&gt; for the top object. public interface IAdder { int Add(int x, int y); } public class Adder : IAdder { public int Add(int x, int y) { return x + y; } } public class Consumer { private IAdder adder; public Consumer(IAdder adder) { if (adder == null) { throw new ArgumentNullException(nameof(adder)); } this.adder = adder; } public int Add(int x, int y) { return this.adder.Add(x, y); } } [TestFixture] public class AdderTests { [Test] public void TestFakeAdd() { var container = new UnityContainer(); container.RegisterType&lt;Consumer&gt;(); // Very punny var mockAdder = new Mock&lt;IAdder&gt;(); mockAdder.Setup(o =&gt; o.Add(12, 6)).Returns(18); container.RegisterInstance&lt;IAdder&gt;(mockAdder.Object); var consumer = container.Resolve&lt;Consumer&gt;(); Assert.IsTrue(consumer.Add(12, 6) == 18); } } public static class TestConsole { public static void Main(object[] args) { var container = new UnityContainer(); container.RegisterType&lt;Consumer&gt;(); container.RegisterType&lt;IAdder, Adder&gt;(); var consumer = container.Resolve&lt;Consumer&gt;(); Console.WriteLine(consumer.Add(38, 4)); } } Sometimes I even use a static factory class to register the objects such as this: public static class ConsumerRegistration { public static IUnityContainer Register(this IUnityContainer container) { if (container == null) { container = new UnityContainer(); } container.RegisterType&lt;Consumer&gt;(); if (!container.IsRegistered&lt;IAdder&gt;()) { container.RegisterType&lt;IAdder, Adder&gt;(); } return container; } } This allows for maximum flexibility. It changes the TestConsole class to: public static class TestConsole { public static void Main(object[] args) { var consumer = ConsumerRegistration.Register(null).Resolve&lt;Consumer&gt;(); Console.WriteLine(consumer.Add(38, 4)); } } And it changes the AdderTests to: [TestFixture] public class AdderTests { [Test] public void TestFakeAdd() { var container = new UnityContainer(); container.RegisterType&lt;Consumer&gt;(); // Very punny var mockAdder = new Mock&lt;IAdder&gt;(); mockAdder.Setup(o =&gt; o.Add(12, 6)).Returns(18); container.RegisterInstance&lt;IAdder&gt;(mockAdder.Object); var consumer = ConsumerRegistration.Register(container).Resolve&lt;Consumer&gt;(); Assert.IsTrue(consumer.Add(12, 6) == 18); } }
yeah you need to learn the basics and this isn't csharp code. /r/learnprogramming
Why are you launching a new form?
It's just something Visual Studio 2017 does automatically without asking, actually thinking about it, I'm sure 2015 did this also
Put a try catch in From1_Load and debug to find out what's really getting set to null.
Keeps going back to &gt; Application.Run(new Form1()); Doesn't specifically say whats getting set to null **Solution Found, Check OP**
&gt; pass interfaces to the constructor when you construct) Doesn't have to be an abstract interface. In fact, many times that's not appropriate. 
Oh, yes, "cast" wasn't the right word.
Nice work!
Answering this kind of question would take way too much time. Instead, I ask you what else would YOU use and why?
Yes they are. Must be used in moderation when getting out of really deep places. 
It sounds like you have a lot to learn, and I don't mean about C#. You sound like you have some hatred of various languages and are eager to praise whichever language it is you like, instead of asking a serious question. 
If you don't see a reason then don't use it, simple.
C# is just a tool like every other language, it is not better or worse than other, it has it's own pros and cons (I will not go into that, there are tons of resources explaining just this), so stop criticizing other languages and use whatever suits best for your needs.
Just go through their submitted history. OP got some things they need to work out in all aspects of life
The examples look a bit weird. The tests would be far more readable and maintainable *without* the ioc container! In a unit test you want to test *implementations* so simply generate the *sut* and set up all the dependent objects as some fake and pass them directly as ctor injection. Much simpler than using a container there! If this should be an example for *integration* tests, then the usage of a ioc container (or simply using some code of the composition root infrastructure if you do DI without a container lib) is clearly fine. But then you wouldn't register only fakes, but more often the real production objects.
Removed: Rule 4, Rule 5, Trolling.
Seriously? I came here to ask about programming stuffs and YOU have to make it a problem about my life? I have no words for you. Think.
I'm asking for a reason why people use C#, out of pure curiosity. I don't know what makes you think I am "trolling" but I assure you it's not. I also did not display any hostility towards anybody. You might think my use of language is a bit strong, however there's a good reason for that. If you are looking for users displaying hostility just scroll down, there are people who think the problem is apparently my life.
I'm wondering why PEOPLE use it, read the post again. I know it might be challenging for you.
Eh I am just expressing my opinion, I don't sugarcoat bullshits sorry (not sorry). I also think language as tools, if my job uses Java, I'll use Java, no matter how shitty it is. I am just wondering why people seem to praise C# so much (especially on reddit prog).
Good job on making a baseless assumption of my skill, that sure not count as being a know-it-all. Hatred is a strong word, I consider language as tools. I would use language I "hate" if it is required. I am a professional, feelings have no place in my world. I am just asking why people seem to praise C#. If you are sure that I have a lot to learn, would you dare to compare your wage to mine? I am sure you will be surprised.
Pretty much everything is covered by other languages. C++ is not controlled by Microsoft as a Bot.Net (pun intended). Python is more readable. If you don't want to explain why you use C#, ok. I don't get why you even bother to type up that response with that attitude.
Well, on that note, I think it's because nowadays it's use cases are growing faster than ever with the introduction of .Net Core and .Net Standard, Xamarin is also growing and ASP.Net / ASP.Net Core is one of the most reliable Web Framework out there, if you look into game development people are using Unity more nowadays which again is one of the area where C# shines, and if you look into desktop apps C# has numerous frameworks for UI development and most of the desktop world relies on Windows which is again home to .Net. I guess that's the reason why there's so much hype and that seems fair.
How is ASP.Net reliable? It's like the opposite of it. I get it if you are developing apps for Windows for money you can use C#, but why not C++ with Qt? It's faster, cross-platform, and... yeah. Only thing I would use C# is for Unity. I don't use Unreal cause my employer insists.
http://i.imgur.com/seh6p.gif
Oh, I just meant general constructor DI. I used it recently in Python. Indeed, DI Frameworks seem magical. But they're not. I think I was using Ninject the last time I programmed C#. It was awhile ago. I don't know what the latest DI framework du jour is...
Ask in /r/webdev. Regardless, the problem is that you've supplied no ID to `GetElementById`, which returns nothing. You need to either give the button an ID, or find it in the DOM some other way. `document.querySelector('input[type="submit"]')` would work. You should also reconsider the use of an `input` for this. Use a button: `&lt;button type="button" /&gt;`
++Wireshark If this is a network issue, you'll find it very quickly this way (/u/Kraigius).
So a good idea for them would be to send text messages every Friday with details on a certain event?
Don't write any code that will block a thread on async code. That means don't use `.Result`, `.GetAwaiter().GetResult()`, etc unless you know with certainty what you're doing.
What have you tried? You can't give us an example of something kinda like the conn string you're using, a generic 500 error and ask us to fix it. Look at the stack trace, it will tell you EXACTLY what the error is. Could be permissions, could be invalid schema, could be incorrect server or instance name, could be almost anything. The syntax you're using seems about right 
I know this is old. but it is the one of the first Google Result if you look for Rider vs VS 2017 So, ill post here anyway :D I use Both atm. and i have to say, for Prototyping and such stuff, Visual Studio is needed all the Time, because Rider hasnt got: My Item Templates (such as for nancy) http://sidewaffle.com/ The Designer. (Which can be very usefull But For Writing Stuff i use Rider, because it looks better, and The auto Complition works better, and over non Importet Namespaces. Also, The Code Generation is awesome from for loops, to full Class Operators, all are 1 click. What is sometime good, sometimes bad, is the Naming and LINQ "Tips", you can disable them but, they sometimes are realy Usefull. At all, if im able to get my Visual Studio Templates into Rider, and they Support The Designer i woud only use this.
Judging by the URL, it's a 1.5 year-old article. On top of that, the website doesn't even load.
Holy fuck, this page.. On the first look you get his face **six** times: http://i.imgur.com/v0iDeeM.png And after a second another face pops up hugely: http://i.imgur.com/E5AumeC.png Seriously?
Why are you posting an article that is over a year old? Especially since that `Tuple` class should really **not** be used. If you really need tuples, use the new C# 7.0 tuple feature.
Yeah its easy, just turn on side load on the machine. Or company wide via GP.
You could try using GetElementByClass if it exists, or find an element that has an ID and work from there (if the button is always the only button in its descendants for example, or always the 1st child of the 2nd child or whatever).
Further details added to OP.
Further details added to OP.
Further details added to OP.
(SOLVED "ish") So it seems i have to use this method to do this, since you apparently can't user parameters for the table name. int numRecords = 10; string fieldList = "TaskId,Name"; string table = "DevTaskTable"; command = new SqlCommand($"SELECT TOP ({numRecords}) {fieldList} FROM {table}", conn); But still if you have a better way please let me know.
The website loads fine for me, but yeah, it's still an old article describing a largely outdated way of dealing with tuples in C#.
What is a valid use for a Tuple? Any time I've tried to use it, I just get annoyed and make a class instead. I haven't used the new ones yet, but having properties called "Item1" and "Item2" seemed really dumb to me. From what I've read, the new ones allow you to name the properties, but why wouldn't you just use a class?
Can you check your user permissions ? you may have not added your user as database admin
Why would you need a container in a unit test?
You either need to create a SQL username and password it and pass it into your connection string and make sure that user has access to the database. (Like you had) Or if you use integrated security, make sure that the user account that your application runs under has access. I think it's IIS_IUSRS? Or it might be your "domain\oshrio" account. Or, if your users login using their windows creds it could be those. I don't have a computer in front of me so I cannot verify that.
There are situations when you need to pass more than one thing at the same time internally. That doesn't always warrant making a new class or struct, especially if it happens once in the project. The new tuples allow you to give the items some arbitrary names (so long as they are valid identifiers), and sometimes the name is inferred. Examples: 1. A function that returns a `ValueTuple`. internal (string sometext, int number) GetSomething() =&gt; ("Hello, world!", 42); // Later var tuple = GetSomething(); In this case you could access the tuple items as `tuple.sometext` and `tuple.number`. 2. A manually constructed `ValueTuple` with explicit item names. var tuple = (sometext: "Hello, world!", number: 42); Items can be access in the same manner as in the example above. 3. Implicitly named tuple items. var sometext = "Hello, world!"; var number = 42; var tuple = (sometext, number); In this case, the tuple items will be automatically named `sometext` and `number`. Automatic naming works with instance members as well.
I'm not sure how that can work? If I add myself as database admin, what about all the other users who will be using the website, will I have to add them to the database too?
I'm guessing (after doing further research) that I need to use something like the IIS system account, or possibly the ASPNET system account. I am trying to not use a user account like before because we now have a firmwide password policy which means that all users must change their passwords every month. So I think I need to use a system account or integrated security. Just not sure how to do that.
That is because the VAT rate in Czech Republic, where we are based, is 21% :)
Removed: Rule 7.
&gt; ou are doing a complete rewrite... there is almost no way that you can nr finding meaningfully useful resuable code w Complete Re-Write is what I am doing. Their monolithic coding styles have been a nightmare tracking bugs. I was merly asking for a best practice of code orginization. I have done some other reading and I think I know what I need to do.
That is what I have done. Thanks!
make 1 method: 2 generics required, 1 for the Context(T) getting it and one for the VM (TVM). Then use automapper to map it from the T to the TVM. Good luck
Honestly, I'm not sure it would be worth it. Let's look at each of the differences, and how we'd deal with them: - Context.EmailTemplates vs Context.Campaigns - no problem, you could pass in the correct set with a parameter of type IEnumerable&lt;object&gt; - But then you're using Where() - and having a parameter of type IEnumerable&lt;object&gt; means that you'd be using Where&lt;object&gt;(), so x.Deleted won't be allowed - You could get around that, though, so long as you're able to make sure that EmailTemplate and Campaign both implement an interface, say IDeletable, which has a Deleted property. If you were able to do that, your parameter could be IEnumerable&lt;IDeletable&gt;. Hey presto, we can now use x.Deleted. - But now you're got to deal with creating a new object. SingleEmailTemplateViewModel and SingleCampaignViewModel both need their Id and Name to be set, so again there's a chance to deal with that by having them both implement an interface, let's say an INamedObject. Then your re-factored method would have to be passed as a parameter a factory method that generated the correct type of INamedObject. - However... SingleEmailTemplateViewModel also needs its Markup property set, and that's sufficiently different what you're doing with SingleCampaignViewModel that the only way I can see to do it is to pass as a parameter to your refactored method some kind of Action that set the appropriate properties on the INamedObject. (In fact, once you've got this Action, the concept of INamedObject perhaps isn't needed any more.) - Finally, the List that you're filling in would need to be passed as a parameter. So your parameters would be: - IEnumerable&lt;IDeletable&gt; source - Func&lt;INamedObject&gt; factory - Action&lt;INamedObject, IDeletable&gt; fillAction - List&lt;INamedObject&gt; listToPopulate You'd need to create the two interfaces, and ensure the relevant classes implement them. You'd also need to write some fillAction methods, which would need to do type checking and casting on their parameters before filling the INamedObject with the relevant data from the IDeletable. Maybe someone will come along with a better solution, but that's the best I can come up with.
Sorry for being daft but I don't understand anything you just said O_o It sounds very exciting though
I won't solve it for you, but I wrote a little snippet that should help you solve it, without any polymorphism or additional interfaces public void Generalize(List&lt;string&gt; items, Func&lt;string, string&gt; selector) { items.Where(x =&gt; x == "string").Select(selector); } Then call it as such: Generalize(new List&lt;string&gt;(), (string arg) =&gt; ""); This method does, however, require selectors to be parameters. You can completely bypass that with the aforementioned common parent class or interfaces, read /u/LondonPilot's comment
The solution is not to create a separated method, but to separate the concerns. From the constructor, I see that you are in a ViewModel but then, you directly access the database. That is not correct! According to SOLID, your code break the S rule (single responsibility principle). That means, your view model should only take care of updating it's properties (in your case, the lists) but should not access the database. That responsability belongs to another class! Look for the repository pattern, it should help you. Once you fix that, you'll see that the repeated code doesn't look so repeated anymore. Then, maybe you could call the dispatcher in a single method that receive the list to update in parameters
SOLVED: See https://github.com/filipw/dotnet-script/issues/114#issuecomment-326280083
Thanks everyone for the info... still new to windows development so I appreciate the info
Fair enough, I was trying to talk more about mechanics of DI and containers, not necessarily about testing, but the example got a bit verbose.
I'm not sure it's a good idea to break of the LINQ queries that much, since they're almost certainly some LINQ to SQL entities. Could probably refactor to a function that takes an ApplicationDbContext and returns IEnumerable&lt;TEntity&gt;, one that takes TEntity and returns TModel, and pass in a List&lt;TModel&gt; to clear and update. Generics, possibly with constraints, and a couple Func parameters seems like the way to go.
IMHO trying to combine these is a case of excessive attempt at eliminating similar code. (been there, done that) Separation of concerns is more important than strictly adhering to DRY. Don't try to merge code if it involves mixing concerns. Since the fields/properties being set are different for each VM, I suspect making this generic would just result in an unnecessarily contrived generic method requiring you to pass in type parameters for the context and VM type as well as a delegate or expression tree for selecting the correct properties, making the code harder to read for someone who isn't familiar with the system, and eliminating only a very marginal amount of duplicate code. (basically just the DB context creation)
sorry I mean the sql user you are trying to login with (user in your connection string)
Very good point, thanks for adding it.
Yep I agree. I'd do a few other little refactorings too. Move the Dispatcher.Invoke block out of the using block, maybe make it a generic method because it does the same thing (clear and add entities to a collection). Move the actual data access methods into a separate API class, probably make them async? Up to you on that, it would negate the need for the invoke later on. Then the actual methods become two lines each. One to call the relevant API method and one to populate the observable collection. I guess the Invoke might have been in the using block because linq wouldn't execute the db call until you tried to iterate over the result, I can't tell just by looking. Either way I'd nip that behaviour in the bud anyway and ensure the API returned (asynchronously) the actual result. These changes would also make it easier to test as the db logic is isolated in its own api. 
Removed: Rule 7? But mostly because it's a duplicate submission that was posted a month ago.
I'm sitting on the porcelin throne so my abbreviated response is to maybe use two placeholders for the last two records. Before committing a new record to the list, make sure the last two records do not both match the potential new record. This doesn't work though when you get to the end of your list and have no option to get a different random record. If the last two were the same and you only have one record left, you're out of options. Not sure how to predict that and strategically avoid the situation. And I'm assuming it's not an option to just shake it up and start over if you find yourself in a corner like that.
Trying to translate: You are mapping your models to view models using LINQ's `Select` method and providing mapping by hand, it is possible to use AutoMapper (library) for it instead, generalizing this part. And instead of using `IQueryable` from `Context` directly you can make it argument of some method. But if you would like to filter by `x =&gt; !x.Deleted`, you will have to make `EmailTemplate` and `Campaign` to implement some sort of interface `IDeletable`, which will hold your `Deleted` property. 
If I wanted to implement something to check the list for three duplicates in a row and then shuffle again, how would I code this? How do I build the iteration for this? Thank you very much! 
I agree with the concerns of /u/forbjok and /u/JohnyFive128 . Just so you can see how it might be done, here's a way to do it. It is only a couple lines shorter than what you have right now. **Don't actually use this**; this was an abstract exercise in manipulating code. private SingleEmailViewModel() { ListThings ( Templates, ctx =&gt; ctx.EmailTemplates.Where(x =&gt; !x.Deleted), x =&gt; new SingleEmailTemplateViewModel { Id = x.Id, Markup = x.Markup, Name = x.Name } ); ListThings ( Campaigns, ctx =&gt; ctx.Campaigns.Where(x =&gt; !x.Deleted), x =&gt; new SingleCampaignViewModel { Id = x.Id, Name = x.Name } ); } private void ListThings&lt;TListable, TSingleViewModel&gt; ( List&lt;TSingleViewModel&gt; viewModelList, Func&lt;ApplicationDbContext, IQueryable&lt;TListable&gt;&gt; getNotDeleted, Func&lt;IQueryable&lt;TListable&gt;, TSingleViewModel&gt; getSingleViewModel, ) { using (var context = new ApplicationDbContext()) { var collectionOfSingleModels = getNotDeleted(context).Select(getSingleModel); System.Windows.Application.Current.Dispatcher.Invoke(() =&gt; { viewModelList.Clear(); // notice you haven't materialized this enumerable yet with ToList()... // hope the dispatcher gets to this before context gets disposed viewModelList.AddRange(collectionOfSingleModels); }); } } This could have been slightly DRYer if both TListables implemented a common interface IDeletable, so the Where clause could go in ListThings instead of in the caller.
A friend of mine suggested abstraction: public class Something&lt;T&gt; where T : BaseClass { List&lt;T&gt; MyData; protected abstract IQueryable GetQuery(); public void GetData() { MyData = new List&lt;T&gt;(); foreach (T item in GetQuery()) { MyData.Add(item); } } } } This is code he gave me verbatim. Here's how he says it could be implemented (also copied verbatim): public class SomethingOne : Something&lt;ConcreteClassOne&gt; { protected override IQueryable GetData() { return // Your LINQ query; } } These he said would be my view models but I'm not sure how they would allow me to populate lists of my data 
Removed: Rule 1.
Happy cake day by the way.
&gt; .Where(x =&gt; !x.Deleted) Some ORMs allow you to apply this filter globally. * EF Core 2: https://www.infoq.com/news/2017/08/EF-Core-2.0-2 * NHibernate: https://ayende.com/blog/3993/nhibernate-filters * Tortuga Chain: https://docevaad.github.io/Chain/AuditRules.htm#soft-delete-support
Can't you remove the item you find from the list, then there is no way you can get the same item again?
I've been wanting to go async on the whole ViewModel, but I don't know what to do when I get to the constructor. If I'm creating the class with properties that are pre-populated with data (as in this case), I need to execute those methods in the constructor (as far as I know) but you can't make the constructor async even though the whole call stack needs to be async from top to bottom...
How about you shuffle the list, then get all the elements out, in order. Shuffle, get all out, Shuffle get all out. done
**Don't do this, informational only:** You can invoke an async void method from within a constructor. It won't block the constructor from returning, thus giving you an incomplete object that will be filled out later. Basically it works the same way as if you triggered an event. (As most events can be rewritten as async void methods.)
If I had to guess, it'd be the Label control. A quick google search found this. https://docs.microsoft.com/en-us/dotnet/framework/winforms/controls/controls-to-use-on-windows-forms
"Pass the IoC container into the function." This sounds like the ServiceLocation anti-pattern. http://blog.ploeh.dk/2010/02/03/ServiceLocatorisanAnti-Pattern/ 
So general comments on your code. Having void void signatures sucks. You are giving people zero context on what you are operating on. So first thing I would do is lift the using(new ApplicationDbContext()) into the top level method assuming there isn't some hidden contract that you only make one set of changes per context or some nonsense like that. private SingleEmailViewModel() { using(var dbContext = new ApplicationDbContext()) { ListEmailTemplates(); ListCampaigns(); } } So now you don't need to be creating ApplicationDbContexts in the lower methods, but now you have to pass stuff in somehow. private SingleEmailViewModel() { using(var dbContext = new ApplicationDbContext()) { ListEmailTemplates(dbContext.EmailTemplates); ListCampaigns(dbContext.Campaigns); } } So now what do the child methods look like? private void ListEmailTemplates(EmailTemplates currentTemplates) { var newTemplates = currentTemplates.Where(x =&gt; !x.Deleted) .Select(x =&gt; new SingleEmailTemplateViewModel { Id = x.Id, Markup = x.Markup, Name = x.Name }); System.Windows.Application.Current.Dispatcher.Invoke(() =&gt; { Templates.Clear(); Templates.AddRange(newTemplates); }); } private void ListCampaigns(Campaigns currentCampaigns) { var newCampaigns = currentCampaigns.Where(x =&gt; !x.Deleted) .Select(x =&gt; new SingleCampaignViewModel { Id = x.Id, Name = x.Name }); System.Windows.Application.Current.Dispatcher.Invoke(() =&gt; { Campaigns.Clear(); Campaigns.AddRange(newCampaigns); }); } Better but we can pull more up into the signature. internal static void ListEmailTemplates(EmailTemplates currentTemplates, Action&lt;Action&gt; invoker) { var newTemplates = currentTemplates.Where(x =&gt; !x.Deleted) .Select(x =&gt; new SingleEmailTemplateViewModel { Id = x.Id, Markup = x.Markup, Name = x.Name }); invoker(() =&gt; { Templates.Clear(); Templates.AddRange(newTemplates); }); } internal static void ListCampaigns(Campaigns currentCampaigns, Action&lt;Action&gt; invoker) { var newCampaigns = currentCampaigns.Where(x =&gt; !x.Deleted) .Select(x =&gt; new SingleCampaignViewModel { Id = x.Id, Name = x.Name }); invoker(() =&gt; { Campaigns.Clear(); Campaigns.AddRange(newCampaigns); }); } Ok, so that's enough faffing about. Lets makes these two become one. To do that we need to make Campaigns and EmailTemplates (and their templates) work the same as far as this method is concerned. The hard part is SingleEmailTemplateViewModel and SingleCampaignViewModel so what we will do is define an interface that looks like this: interface IDeleatableViewModel { bool Deleted { get; } IDeleatableViewModel CopyViewModel(); } After implementing this interface on both SingleCampaignViewModel and SingleEmailViewModel when can then implement IList&lt;IDeleatableViewModel&gt; on Templates and Campaigns. Doing that lets us collapse the two methods down to internal static void RemoveDeleatedItems(IList&lt;IDeleatableViewModel&gt; items, Action&lt;Action&gt; invoker) { var nonDeleatedItems = items.Where(x =&gt; !x.Deleted) .Select(x =&gt; x.CopyViewModel()); invoker(() =&gt; { items.Clear(); items.AddRange(nonDeleatedItems); }); } And your calling method becomes private SingleEmailViewModel() { using(var dbContext = new ApplicationDbContext()) { var dispatcher = System.Windows.Application.Current.Dispatcher; RemoveDeleatedItems(dbContext.EmailTemplates, dispatcher.Invoke); RemoveDeleatedItems(dbContext.Campaigns, dispatcher.Invoke); } } So there you go. You now have a unit testable method do to the same thing to collections of different implementation types. Certain types of developers will also want your head on a pike for writing code like this. 
Usually, I avoid at all cost to execute logic in the constructor. Constructors should only assign variables, either by using a default value or by using provided arguments. And this is how you solve your async issue! You create a factory that is responsible to fetch the data (async) then instantiate the view model and pass the data as argument once the async method returns. Most of the time, the funky things you may want to do while programming can be solved by separating concerns in different classes and by using the right pattern (factory for creating complex objects, repository for access to database and so on).
Overkill (tm)
Label Controls are unsuitable for this task as they cannot be edited by the user. I wish to use objects that can sometimes be edited. I think the best thing to do is create a grid of buttons and set some as disabled. Is there a way to set buttons as disabled without altering their appearance?
what occurred here that was in violation?
Rule 1: No job postings (For Hire and Hiring) Rules are in the side-bar and built-in for this subreddit.
thanks!
Honestly, for the type of control you are looking for WPF is more suitable.
Well, I imagine the use of that pattern is causing a significant amount of code to be duplicated across your switch control. If you're actually looking for clean design, then take a step back and ask yourself, "Why does XYZ thing responsible for both determining *which* area to read from and *how to go about* reading said memory?" This strikes me as a clear violation of the Single Responsibility Principle. Without even seeing your code, I am able to visualize how I would refactor it. It sounds like no matter how different the nitty gritty internals of reading from various areas, they all share a common interface. They expect an address to tell them where to read from, and they are expected to return some byte/word/xyz data. Start there! Reuse!
Text box. Definitely go over that document I sent you. You'll save yourself a lot of trouble and time.
Hmm while it doesn't sound quite like the thing you were trying to have me discover, I could either create a class that takes 2 values (read, write) in its constructor and has a public property for the value (the read / write values it took in its constructor being private readonly) and make an array of these. or make 3 arrays to - wait that would do the same thing but still be repeating a lot of code so never mind about the 2nd one. 
Would buttons be suitable for this task? I want to be able to use mouse clicks on the tiles and for them to store information.
Just one record would be enough. The requirement is to not have three equal items in a row. So AAA is out, but ABA isn't. As for the case where you end with three equal items, you can look in the shuffled list for an item so that you don't get a new triplet if you put the final one in that place and that one at the end. This means you'll have to check up to 5 items: n-2, n-1, n, n+1 and n+2.
Did you pass the exam?
Textboxes can respond to click events. You can also Disable the textbox to remove the user being able to edit it free form.
Perhaps a variation of a [fisher-yates shuffle](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)? I used the inside-out variation in a project and it was orders of magnitude more efficient than my initial attempt. It might not be an exact match for your problem, but if nothing else could be used for ideas on how to tackle the problem.
There are two types of repetitive code. 1. Repetitive code that **is** the same 2. Repetitive code that **looks** the same Be very cautious when considering a refactor of the second type. Repetitive code that **looks** the same will usually change independently over the lifetime of the application. If you refactor that code prematurely, you will end up with a mess of flags, parameters, and control flow logic. 
Finish your feature development before focusing on maintainability/extensibility. If you'd like to send me a PM when you are done, I'd be happy to review the code and point you towards some resources on idiomatic C#
I almost always end up using unity because as soon as another dependency is required you need to change the constructor parameters, and with multiple it gets messy. If you had a set of classes that only required 1 interface or something you can probably pass it directly. But usually a few need multiple which is better with Unity, then you might as well use that on everything to be consistent. It may also depend on the layer your working in, a higher layer like the UI might have a lot of dependencies so Unity makes sense, a lower one like repository might only need 1 (like an interface for the database its using). If the app is simple enough you can probably get away without it.
Are there any patterns for injecting a set of related dependencies? Aside from a Unity container with a bunch of classes. For example if you had a lot of System.IO wrappers you could add a single object to the unity container that knew how to access all wrappers in that set, rather than a unity container with 50 RegisterTypes
That would be great, thank you. Although I have abosoluely no idea what counts as feature complete for a emulator... I have all the cpu instructions working to a pretty good degree, but it doesn't emulate some quirks correctly (or at all) the lcd is missing large sprites, and sound is... completely missing, but I don't know where to draw the line.
I know that's not csharp, i got it from inspect element but i need the ID for this button to put in my csharp.
Thanks.
Looks like you have 8 distinct items total in your example. So that is 8 bins. You could do this with weights, until you pull 2 items from the same bin in a row, the chance of pulling from each bin is 1/8. Once you pull twice from the same bin in a row, the chance of pulling from the same bin should drop to zero. The chance of pulling from the remaining bins is 1/7. Once the selection is done, everything resets. You only need to store the past two bin numbers to keep track of when you should modify the weights. The "shuffle" can just be a random number between 1 and 8. When you select twice from the same bin, it goes to 1 and 7. Once a bin is empty, adjust the weights and bin count down by one. Unless I'm mistaken, because most of your numbers are duplicates, it doesn't matter if you select them randomly from bins of the same number or from one big randomized list. **Edit**: thought about it, the act of selecting from a bin changes the chances of selecting the same number at random so need to make some adjustments: * Keep track of a distinct list for each unique number. Call each list a "bin". Bins are sorted based on the number. So the 0'th bin contains the smallest number. the n'th bin contains the largest number. * Pick a random number between 0 and total items -1. Total items is the sum of each bin count * If the number falls in the range of the bin, remove an item from that bin. The range is calculated by counting the items in each bin in order. So if bin 0 contains 3 items, bin 1 contains 2 items and bin 2 contains 5 items, the first bin range would be 0-2, the second bin range would be 3-4, the third bin range would be 5-9. * If the same bin has been pulled from 2 times in a row, it is removed from the range calculations for the next round and added back after the next round is complete. * If you want to reshuffle, just restart the process instead of continuing if an item is selected three times in a row
Sent you a PM.
What you have there is fine. This looks like DRY but it isn't. You are just reusing existing tools (DBcontext, Linq etc) to obtain different results. And they are of different concerns so making this generic will overly complicate what is quite a clean and easy to read method. It's fine.
 Yes? It's only going to go over new features, I'm assuming things such as C#6 and 7, which you can always learn after you get an understanding of C#
There are a few ways of doing the whole v-vm-m construction thing. Usually there's some sort of service locator or DI component to help. The problem goes away if you introduce a factory method that creates and returns a viewmodel. There are a lot of solutions which emphasise how automagically they do all the wiring, but I find they get tricky in cases where there are sub-views which must communicate only with their one parent view for example. So I leverage bits of the automagical but will happily manually assemble complex hierarchies of views and their vms. Async should be end to end but when you think about a view and its relation to the UI thread you don't have to worry so much about instantiation. That's not my most coherent bit of writing on the subject, it's a big topic. 
Thanks. im gonna buy one!
Very true - good point!
From the forward in the early access 4th edition: &gt; Previous editions of C# in Depth have started with C# 2, then worked up through the new versions. For the fourth edition, I’ve removed the parts on C# 2, 3 and 4. It’s not that later developments rendered those parts obsolete, but most C# developers are now fairly familiar with generics, LINQ and even dynamic typing. Removing those chapters has allowed me to keep the book reasonably short, while covering the latest versions of C# - this edition will teach you everything you need to know about C# 6 (which has been around for a while now) and C# 7 (which is still pretty new, at the time of this writing). If you need to check anything about the earlier versions of C#, you can use the electronic version of the 3rd edition, which is included with every purchase of the 4th edition. So, basically you can feel free to grab the third edition to shore up your understanding of C# features from version 2 through 4, and then just do some self-learning on the latest C# 6/7 features. You certainly don't need to leverage C# 6/7 features to make your app (though you're certainly welcome to). That all said, I don't believe the book will "guide" you to make your apps. C# In Depth tends to focus on C# _as a language_, independent of particular usage in building applications for various platforms. If you need a book to help you in the creation of those applications and how to develop for their particular platforms (e.g., WPF, UWP), then you'll need to look for something else a little bit more focused in those areas. EDIT: Put in another way, C# In Depth teaches you when/how/why to use the various tools in the toolbox (nails, hammers, screwdrivers, power drills), but it doesn't teach you how to build a house.
Do you have any wpf resources? Im doing a school project. Gotta make a video player with a playlist,..
This would also disallow 2 of the same items in a row as well as 3 which is not part of what is described and may or may not be acceptable behavior. Also, I think he means row as in a data row, not consecutively.
No, nothing in particular. But there are plenty of resources on google.
 As others said, you want a header, really. Do you have machine code that calls the functions you want to p/invoke? (E.g. another executable?) If yes, then some native disassembler might give you a C declaration. Not necessarily 100 accurate, but very likely to work. Google hexrays, boomerang decompilers. Just entry points, e.g. from dumpbin or dependency walker, no that's useles.
Dunno why the method doesn't return, but the timeout are specified in milliseconds, and 10-14 ms is a really short amount of time for HTTP requests. I'd be surprised if this ran at all.
You reader.ReadBytes will wait until it has read 10MB of data. If the server doesn't send that much data, it will wait indefinitely.
Oh yah, I original had it at 1000 and 1400, but I am getting desperate here. Thanks for taking the time to comment though!
Nah, `BinaryReader.ReadBytes` will return early if no more bytes can be read.
maybe instead of using HttpWebRequest use HttpClient (as a singleton) https://aspnetmonsters.com/2016/08/2016-08-27-httpclientwrong/
Are you sure it really isn't returning? Have you verified the end of the `PullHTTP` method isn't reached with breakpoints or additional logging?
Duhhhhh, silly me! Thank you very much. I added a bunch of logic; static public void PullHTTP(string ForgeAddress) { Console.WriteLine("Start: PullHTTP: " + ForgeAddress); //var request = (HttpWebRequest)WebRequest.Create(ServerAddress); HttpWebRequest lxRequest = (HttpWebRequest)WebRequest.Create(ServerAddress); lxRequest.Timeout = 1000; lxRequest.ReadWriteTimeout = 1400; String lsResponse = string.Empty; using (HttpWebResponse lxResponse = (HttpWebResponse)lxRequest.GetResponse()) { if (lxResponse.StatusCode == HttpStatusCode.OK) { //lxResponse Console.WriteLine("Content Length is: " + lxResponse.ContentLength.ToString()); using (BinaryReader reader = new BinaryReader(lxResponse.GetResponseStream())) { Console.WriteLine("Content Length is: " + lxResponse.ContentLength.ToString()); Byte[] lnByte = reader.ReadBytes(Convert.ToInt32(lxResponse.ContentLength)); if (lnByte.Length &gt; 0) { lnByte.CopyTo(lnByteFile, 0); } } } } Doesn't quite do it yet, seems like if any single server is unavailable the whole thing goes to poop...
It returns early if the server closes the connection. Servers no longer close the connection when all of the data is sent (performance improvement with HTTP/2) so ReadBytes doesn't know when there is no more data.
[It returns as soon as a read returns 0 bytes.](http://referencesource.microsoft.com/#mscorlib/system/io/binaryreader.cs,521)
Pretty sure, here is the output (will wait forever it seems) Task 1 Status: Running Task 2 Status: Running Task 3 Status: Running Task 4 Status: Running Start: PullHTTP: http://10.60.32.41/media/jpeg/IMG_1084.JPG Start: PullHTTP: http://10.60.32.42/media/jpeg/IMG_1084.JPG Start: PullHTTP: http://10.60.32.40/media/jpeg/IMG_1084.JPG Start: PullHTTP: http://192.168.1.43/media/jpeg/IMG_1084.JPG 
You suggesting httpclient in a loop? That is exactly what I am trying to improve out of, as we have 15 systems now. it was ok with 5 but now it takes to long often to get to the end of the list. 
That all happens before you perform the actual HTTP requests, the question is if anything happens afterwards. How about adding logging at the end of `PullHTTP`, and after `GetResponse` and `GetResponseStream`.
Nothing...
I did a very much similar version. It's generic and reusable but I'm not sure if simplifies things. And as you also mentioned, some IDeletable interface is desired. Note. This code is not tested. Not even sure it compiles. private SingleEmailViewModel() { ListThings&lt;EmailTemplate, SingleEmailTemplateViewModel&gt;( x =&gt; !x.Deleted, x =&gt; new SingleEmailTemplateViewModel { Id = x.Id, Markup = x.Markup, Name = x.Name }, () =&gt; { Templates.Clear(); Templates.AddRange(templates); } ); ListThings&lt;EmailTemplate, SingleEmailTemplateViewModel&gt;( x =&gt; !x.Deleted, x =&gt; new SingleCampaignViewModel { Id = x.Id, Name = x.Name }, () =&gt; { Campaigns.Clear(); Campaigns.AddRange(templates); } ); } private void ListThings&lt;T, TViewModel&gt;(Func&lt;T, bool&gt; predicate, Func&lt;T, TViewModel&gt; projection, Action invocation) where TViewModel : new() { using (ApplicationDbContext Context = new ApplicationDbContext()) { var collection = Context .Set&lt;T&gt;() .Where(predicate) .Select(projection); System.Windows.Application.Current.Dispatcher.Invoke(invocation); } }
no, create one instance of httpClient as either a member variable of your class or as a static member, then use that single instance I really dont want to come off as rude - but are you new to C#? Have you read the HttpClient doc? https://msdn.microsoft.com/en-us/library/system.net.http.httpclient(v=vs.118).aspx edit also https://docs.microsoft.com/en-us/aspnet/web-api/overview/advanced/calling-a-web-api-from-a-net-client
Hehe, not new, just don't write a lot of code. Thanks for the links.
your code would probably change from like this &gt; Task t = Task.Run(() =&gt; PullHTTP(LocalURL)); to this or something close to it, without your timeout stuff really so you'll have to handle that differently than your pullHTTP() method &gt; Task t = Task.Run(() =&gt; httpClient.GetStringAsync(LocalURL).Result);
Np, mainly was asking since your C# style conventions were off by a bit, and thats a clue-in to newbies Hope it works out!
Removed: Rule 3, 5, 7, uhhh shitposting? Also, lol.
Did you try this? &gt; The Task class represents a single operation that does not return a value and that usually executes asynchronously. &gt; For operations that return values, you use the Task&lt;TResult&gt; class. Let me know. edit: Don't forget to do Task.Result to get the result. And you have to do Task.WaitAll before you get the result. (Task is non-blocking, whereas Task.WaitAll is blocking). 
Firstly it depends on what level of job you would apply for, could you provide us with that to start?
Ah, my fault. I'll update the OP, but I'd be applying for mid-level.
Thanks, I like the look of this snippet alot. I'm a tad bit confused how to work with the Result, and it gets a bit more confusing for me as I plan to run it in a loop. But thanks so much, some more googling ahead of me, but that really points me on a good path.
Why would you synchronously await an async operation just to stick it into another async thread?
Hopefully someone from HR will pass by, but top of my hat, here are some of the questions they asked (mid level position as well, 4 years experience in general C#) **What project are you most proud of** On that one, explains in details the project and look excited while doing it. They want to see if you are passionate **What are some difficulties you encountered** They want to know how you react to problems, and how you solve them. Focus on how you solved it instead of going long length about the issue **If someone contact you to report a bug, what steps do you take** They want to understand your thought process **(This one's my favorite) your boss ask you to download Wikipedia, how do you do it?** They want to know if you can challenge ideas, even tho they come from your boss. The answer to this is "no why would I do that?" These are the most interesting one. All other questions were basically technicalities. If I can give you some piece of advise: ask them questions too! Not about paid leaves, vacation or things like that (they will be negotiated later) but ask the guy how he likes working for that company. You'll know the answer in his eyes. If they illuminate and dude goes "omg it's amazing", it's the truth, you can proceed. If the guy is caught off guard and makes some generic answer, get the fuck out of there!
My tech lead has been doing a lot of interviewing recently so I'll try and go a little off what he has said. Things you should probably be able to explain or are at least aware of: - SOLID, DRY, KISS etc. - Good understanding of TDD and automated testing approaches - Dependency injection and Inversion of Control (IoC) - How to create well-maintained and modular code through factories and interfaces - If there's any web development involved, a good enough understanding of JavaScript can't hurt - Being aware of good non-software practises such as Git, code reviews, continuous integration, server technology, Databases - Good understanding of agile methodologies - Most importantly, being able to prove you can produce code and approach challenging problems 
fuck if i know, i wrote it lazily i havent used tasks in years
It depends on the interviewer. I ask questions in sets, each set covering a particular topic and each question more tricky than the previous one. I generally move to the next set when they get stuck and everyone will get stuck at some point in each set. It's quite brutal but I've refined the process over years and it delivers. It really does depend on the interviewer though. Some have you write some code, others will pair with you and write some code, others won't write any code at all. Some general advice: Don't get flustered. Do try and enjoy it. Recognise that the interviewer may be an arsehole and not getting the job will save you from every dealing with them again. Remember the interviewer may not actually work for the recruiting team, so even if they are an arsehole don't stab them in the eyes. Do follow instructions. Remain polite even if the interviewer has something technical completely wrong. Expect to be quizzed on ANY items on your CV and for the love of god spell check and proof read that thing a dozen times. Do ask questions if something isn't clear. If you don't know the answer, don't panic and don't try and answer with something clever about a different subject. You can always ask for some clarification, ask for a hint if you're a little unsure, or just flat out admit you don't know, but don't start rambling about the time you did the kessel run in yaddayadda. Don't get drawn into a holy war. Your light theme might be way better than their dark theme, but at the end of the day it doesn't matter. edit: formatting.
What would be the purpose of this? What information are you trying to get back?
&gt; but ask the guy how he likes working for that company. I learned this from an interviewee and it wow'ed the whole interview team. Also ask about like products you all provide and maybe like how many users/stakeholders, maybe how many different projects they have going on (like having 5 programmers but all they do is maintain 15 large legacy systems... that job sucked)
&gt; **(This one's my favorite) your boss ask you to download Wikipedia, how do you do it?** I'd download the exported database provided by wikipedia. https://en.wikipedia.org/wiki/Wikipedia:Database_download https://dumps.wikimedia.org/backup-index.html
Here's a summary of C# 7. https://www.infoq.com/articles/Patterns-Practices-CSharp-7 
I love this question too.. my approach would be slightly different though, I would "google that shit bossman there's a thousand people who can immediately answer this question for me" 
I bought the early access version of the 4th edition and I got the 3rd edition for free, so you may as well order the 4th edition. Manning has a deal today for 50% off their early access books. Code: wm083117lt
well, you could reverse engineer it, use a working example of the native binary in action. Break point on function addresses that your gathered using other tools, find what calls the functions and there you should better understand what is being passed. Also binaries may export functions you can call directly just like a dll and they may not, you may need to check the headers of the binary for the EXPORT_DIRECTORY_TABLE, and if it's not there, you must insert one, only then are you SOL. :) http://fumalwareanalysis.blogspot.com/2011/12/malware-analysis-tutorial-8-pe-header.html 
buttons don't need to have ids
Something like: void Main() { var list = new int[] { 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8 }; bool shuffled; do { Shuffle(list); shuffled = true; for (int i = 2; i &lt; list.Length; i++) if (list[i] == list[i - 1] &amp;&amp; list[i] == list[i - 2]) // 3 of the same in a row { shuffled = false; break; } } while (!shuffled); list.Dump(); // LinqPad's .Dump()... } static Random _random = new Random(); void Shuffle&lt;T&gt;(T[] array) { int n = array.Length; for (int i = 0; i &lt; n; i++) { int r = i + _random.Next(n - i); T t = array[r]; array[r] = array[i]; array[i] = t; } }
This is not a book you pick up to learn how to program C#. It is a book you read because you're curious about some things that are going on "under the hood" of C#. I've read it cover-to-cover. It's a great book, but it's deep in a way that won't necessarily make you a better programmer/developer. You'll just have a more nuanced view of C# than the average dev. So to answer your question: &gt; will this book guide me even in VS 2017? No, it will not. It will be difficult to cut your way thru and then you'll think it's a shitty book because it was too detailed in ways that aren't relevant to making a remote desktop app or an accounting app.
If it helps, doing a [sonarqube](https://www.sonarqube.org/) scan of your codebase provides an actual dollar amount to represent technical debt. Sure it's not 100% accurate, but it does provide measurable validation that their current practices are wrong and are costing the company money. 
I could of swore he said in one of his blog posts he was writing a book for beginners at one point. Agreed 100% though, not the book for beginners, although it is really nice how he walks through iterations in the language and how they got to where they were. 
 private SingleEmailViewModel() { ListTemplates(Context.EmailTemplates, x =&gt; new SingleEmailTemplateViewModel { Id = x.Id, Markup = x.Markup, Name = x.Name }); ListTemplates(Context.Campaigns,x =&gt; new SingleCampaignViewModel { Id = x.Id, Name = x.Name } ); } private void ListCampaigns(dynamic campaigns, Funct&lt;dynamic, dynamic&gt; transform) { using (ApplicationDbContext Context = new ApplicationDbContext()) { var campaigns = campaigns.Where(x =&gt; !x.Deleted) .Select(transform); System.Windows.Application.Current.Dispatcher.Invoke(() =&gt; { Campaigns.Clear(); Campaigns.AddRange(campaigns); }); } }
You cannot access instance members of the object still being constructed in the call to the base constructor. Even if you could, the constructor is the first thing that runs, before you set `NumberOfSides`, so there'd be no point. What even is a 3 sided square anyway?
^^^ OP, pay attention to /u/RangerPretzel Get a book like C# In a Nutshell or Microsoft C# Step-by-Step if you want to learn C#. C# In Depth is not going to teach you how to use C#. I bought it a few years ago assuming it would help me learn, but it did not (luckily I bought Microsoft C# Step-by-Step at the same time). C# In Depth is a fantastic book, and it's helped me understand a few things about how C# works and how it evolved, and why certain choices were made. Very interesting, but most of that will go over your head when learning.
Of course, a 3 sided square isn't possible but I was trying to see how to change the NumberOfSides like that.
You could make `NumberOfSides` a `const` instead of an instance property. It's not like it's going to change. Or make the `Sides` property of the base class `abstract` and override it in `Square` to return the correct value.
There is a twitch style site for coding (live coding.tv) but that's as close as I can think of other than some sort of most likely paid online tutoring 
C#specific, probably some questions about MVC, maybe MVVM. Be ready to talk about experience with entity framework or nHibernate. Unit test frameworks. SOLID. IoC / dependency injection.
This site keeps popping up a pop up saying I am using ad-blocker even though I disabled it for this site asking me to sign up for the paid version.
The purpose is basically that I'm trying to write a program capable of "what provides" functionality (similar to yum on CentOS) for those situations where you're reading StackOverflow and people don't mention what assembly/namespace they're using. Also, I have plans to combine this with ApiPort (https://github.com/Microsoft/dotnet-apiport/releases) to help provide info about missing dependencies etc given platform target(s), and also adjudicate which .dll file in a given NuGet package will work "out-of-the-box" on your machine (usually in PowerShell).
Would it be valid for someone who has had prior Java experience but limited C# experience? I've got great respect for Jon Skeet due to his Stack Overflow 'Career'
In depth books were how I learned to program. The so-called novice or easy to learn books are useless to me. 
Yes it would.
That'd provoke the "what're we paying you for then" response
Looks like you have it working (according to another comment)- and you can replace the first 7 lines with this; ``` var tasks = ServerList.Select(server =&gt; Task.Run(() =&gt; PullHttp("http://" +server + req.RawUrlWithQuery))) ``` 
I couldn't say really (I know very little about Java). But *C# In Depth* is not a book that teaches programming in C#. It doesn't show how to program or anything like that. It might help explain why C# does things in certain ways (perhaps differently from Java), but it won't explain how to program in C# directly. It is a great read, and it helped me understand a few things more deeply, but you wouldn't be able to learn to program in C# from it. It's kind of a biography of C# over the years - how it adapted and changed, and why. It's written for C# programmers who want to get under the hood and understand the motives behind how the language evolved over the years. Ironically, I think the *C# in a Nutshell* book is a more in-depth look at how to use C#. 
Here are a few I was asked several times recently, about two months ago: * What is the difference between an interface and an abstract class * What is the difference between public, private and protected * What are the different collections you can use in the .NET framework * What's the difference between a queue and a stack There were some JavaScript questions in there as well which I don't recall. Only a couple on MVVM and MVC. Some positions had questions about coding style, such as how would I organize a complex method that can't be split into smaller methods. If I rely on a different part of the code that someone else is working on and they don't get it done on time, how do I handle it. It will vary by position, I had some random questions I didn't know, such as what is a jagged array (I still don't know...). Don't be afraid to admit that you don't know the answer and would have to research it.
Great tip, thanks! I will buy it in support of his excellent stackoverflow.com answers, which have helped me many times throughout the years. 
That would be my dream interview, but in the few I've went to over the years they often drill down on some specifics of OO and language features that have felt like tricky exam questions on the spot, i.e. "I would never do it like this in the real world"-code. I much prefer the approach of getting an advance assignment and discussing/dissecting it in the interview.
-&gt; apply for senior dev position -&gt; "write a program that finds the next palindrome, given an int" -&gt; why? Will I be working on a palindrome app?
Why not throw an await inside there since you're already wrapping it in a Task.Run?
Then I'd say "why are my managers delegating tasks that can be solved by a random person googling the answer?" and also "why wouldn't you have me solve this problem in the fastest most productive manner?".
The reason you need a zero-argument constructor is that you are providing a single-argument constructor and you are using a member-initializer to initialize your Square. Member initializers invoke the zero-argument constructor before calling the setters specified in the list. On a design note: in general, this is a classical problem that violates LSP (the 3rd of the 5 SOLID principles of class design). Even though we say it in math and the like, it is rare that a specific kind of polygon meets the requirements for good design for using inheritance. There are likely going to be several operations that would be conceptually fine on a Polygon object that you would not allow on a Square object. In OO design, a Square wouldn't likely inherit from Rectangle either.
SOLID, DRY, KISS I like where this is going
Strings are a bit of a pain that way... either you should use a StringBuilder or a char array for this kind of scenario. Example (using a char array): string s = "hello world"; char[] array = s.ToCharArray(); array[0] = Char.ToUpper(array[0]); for (int i = 0; i &lt; (array.Length - 1); i++) { char c = array[i]; if (char.IsWhiteSpace(c)) array[i + 1] = Char.ToUpper(array[i + 1]); } string output = new string(array); Console.WriteLine(output);
First thing, if you want to be appending strings as output, you should use StringBuilder with Append. Next, I would change the algorithm. Instead of skipping ahead if you find space, you should iterate over the input like normal, but keep a flag if previous character was a whitespace. This will solve multiple problems: * Skipping the index ahead is confusing. Getting rid of it makes things clear. * By setting "previous character is whitespace" to true at the start gets rid of special condition of i==0, unifying the two branches. * Make it easier to modify just the current character and then have single append operation. Another thing that I noticed is that you check for all white-spaces, but only append a space to output. You should output s[i] character. And I don't think you need Substring(0, 1) as the string you call it on is already a single character string.
Maybe try one of the freelancing sites? 
Hint: Look at the string.Split() and string.Join() methods.
Just pushed a new release of my side project [Fluent Actions for ASP.Net Core MVC](https://github.com/ExplicitlyImplicit/AspNetCore.Mvc.FluentActions). If anyone have any feedback (or questions) it would be greatly appreciated.
Just pointing out, if you need to support all/most languages, then something like `s[i]` is **not** safe, as a single character can be made of more than one `char`. Strings in C# are UTF-16.
Could try your hand at CodeMentor.io
Thanks for the reply, Currently the sort of things that trip me up, is the lack of being able to reference methods from field initializers, even if it's getting passed as a parameter or delegate. Yes I realize it's to prevent methods being called before the constructor, but it seems needlessly constraining, and prevents you from splitting initialization code into methods for better code organization. e.g. https://stackoverflow.com/questions/45994280/why-cant-you-reference-method-definitions-from-a-static-context I feel like something that goes into depth on why this isn't allowed, and the guarantee's it brings might help to sooth some of the teething pain I'm currently experiencing.
&gt; &lt;add key="new_connection_string" value="Data Source=server2\instance2;Initial Catalog=database2;Integrated Security=True;Connect Timeout=15" /&gt; I have no user in the connection string, I was trying to use the integrated security parameter.
&gt;I feel like something that goes into depth on why this isn't allowed, and the guarantee's it brings might help to sooth some of the teething pain I'm currently experiencing. In that case, I think you'll find the book very helpful. It goes into detail about *why* certain features were added, and discusses pros and cons in quite a bit of detail. The structure is broken up into C#1, C#2, C#3...and so on, and details what features were added, what problems those features were implemented to solve, and so on. As a self-taught C# programmer it taught me a lot of background. I actually bought the book by accident thinking it was just a really in-depth 'learn C#' book, so I was annoyed at first! But I'm glad I have it now, and I haven't yet read the whole thing (well, I haven't *absorbed* it all yet). But for learning the nuts and bolts of C#, get another book as well, something like *Microsoft C# 2013 Step-by-Step* (I don't know if there is a more recent version of this one). There's also the famous 'Yellow Book', which you can get online for free, but that's probably more focused on the stuff you already know. 
You should use a protected virtual method (which you can override) and call it from your explicitly implemented method. Explicit interface implementations are not overridable. 
[removed]
Just he same as in python, it depends on which libraries you are using to manipulate both PDF files and images. Can you provide some context on these?
well in python the library PyPDF2 is very straight forward. i've looked at iTextSharp for C# and I can't seem to find anything that will overlay a PDF page onto all pages in a different PDF. I guess I'm just going to have find a library that can manage this
HtmlAgilityPack is what i use for that
I text sharp has a stamper for this functionality https://stackoverflow.com/a/2385881 
Send a fixed size header that contains the payload size first. Then you can await on reading that many bytes from the stream. Awaiting each byte is BAD, it might look ok in the editor but it will perform very poorly. Read the whole packet, then parse. It's better that way.
Not until the C# 8 spec comes around (if all goes as planned). https://github.com/dotnet/csharplang/blob/master/proposals/default-interface-methods.md
Pretty sure some of this has come out of the Xamarin acquisition. I know Xamarin has had a linker pretty much from the beginning because minimizing the size of mobile apps was a big thing during the early days of app dev.
You need to genericise a little more. Consider an abstract class called FamilyMember interface IFoo { bool GetSomething(); } public abstract class FamilyMember : IFoo { public virtual bool GetSomething() { //base implementation; } } public class Parent : FamilyMember { public virtual void DoSomething() { } public override bool GetSomething() { return true; } } public class Child : Parent { public override void DoSomething() { Console.Write("Done something"); } public override bool GetSomething() { return false; } } All inherit from family member, but you can add additional overridable members to parent if you wish.
Exactly
A bit late but depending on your use case this can be a viable and very short solution System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(s.ToLower())
The scan would probably choke and die...
The first sentence of the official announcement: &gt; The .NET Core team has been working on a linker in collaboration with the Mono team. It is based on the Mono Linker project, and by extension, on the Cecil project. So, yes, it's the same linked that's used by Mono/Xamarin.
i think im still a bit new to c# to understand this. thanks anyway!
My app is just a console app. Is HtmlAgilityPack compatible with that? I'm looking for something to replace a HTTP get request. While I'm asking, the website I'm talking about is Bittrex. Looking through the HTML, I see this part containing the last price. &lt;div class="col-md-12 col-xs-6 stat-left"&gt; &lt;div class="wrapper" &gt; &lt;div class="title" data-bind="css: { 'title-up': summary.last.absoluteChange() &gt; 0, 'title-down': summary.last.absoluteChange() &lt; 0, 'title-none': summary.last.absoluteChange() == 0 }"&gt;&lt;strong&gt;Last&lt;/strong&gt;&lt;/div&gt; &lt;div class="base-market-subtitle" data-bind="visible: summary.isBtc"&gt;&lt;i class="fa fa-usd"&gt;&lt;/i&gt;&lt;span data-bind="text: summary.lastUsd()"&gt;&lt;/span&gt;&lt;/div&gt; &lt;div class="base-market" data-bind="css: { 'fiat': summary.isUsd() || summary.isCny() }"&gt; &lt;i class="fa " data-bind="css: { 'fa-btc': summary.isBtc, 'fa-usd': summary.isUsd, 'fa-cny' : summary.isCny }"&gt;&lt;/i&gt; &lt;span data-bind="text: summary.displayLast()"&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class="direction"&gt; &lt;span data-bind="css: { 'dyn-stat-up': summary.last.absoluteChange() &gt; 0, 'dyn-stat-down': summary.last.absoluteChange() &lt; 0, 'dyn-stat-none': summary.last.absoluteChange() == 0 }"&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; [Link to site](https://bittrex.com/Market/Index?MarketName=BTC-SAFEX) Is this where I can pull the data from, or do I need to hook into some other data stream? Sorry if my questions are dumb, I'm pretty far removed from web development. 
So I think in the proposed answer by /u/nimbomob, you will actually modify the PDF file itself (in your case make a copy of the original). From what I gather from your response to my post, you would overlay pages or merge them with your python library. So, maybe it's just a different way of achieving the same result?
not a beginner book at all for what its worth
So this is basically ProGuard’s optimization pass, but for the CLR?
TIL dev is actually softcore porn
"Sir, our clients have very specific needs."
It is compatible, you just need to reference the required libraries. The html agility pack is for parsing HTML. You can use WebClient to download the page's HTML. 
How else do I code it to click something in my webbrowser?
Interesting, ServerList.Select eh gonna experiment with that, as that looks like the best piece of code yet! Thanks
Easiest way would be using an API. If you enable the remote WebUI feature in uTorrent you can add, remove, stop and start torrents. You can then use something like: https://github.com/latop2604/UTorrentClientApi Plenty of other APIs around for uTorrent which can save you a lot of work.
Making requests to the HTML website gives a lot of traffic and unnecessary data. I recommend using their JSON api to get the prices: https://bittrex.com/home/api To parse/read json in C# you'd want something like: https://www.newtonsoft.com/json
Adapted from [here](https://stackoverflow.com/questions/3235403/how-to-replace-upper-case-with-lower-case-using-regex), which turned up with a little googling: string f(string s) =&gt; System.Text.RegularExpressions.Regex.Replace(s, @"(?&lt;=^|\s)[a-z]", x =&gt; x.ToString().ToUpper()); `f("hello world")` = `"Hello World"` To do it with a loop, you could just copy the string to a character array, update the character array as you go, and build a new string from the array at the end: var characters = s.ToCharArray(); for (var i = 0; i &lt; characters.Length; i++) { var shouldBeUpperCased = i == 0 || char.IsWhiteSpace(characters[i - 1]); if (shouldBeUpperCased) { characters[i] = char.ToUpper(characters[i]); } } s = new string(characters); Or you could do something similar with some LINQ s = new string(s.Select((c, i) =&gt; i == 0 || char.IsWhiteSpace(s[i - 1]) ? char.ToUpper(c) : c).ToArray()); All the other suggestions and advice are good, too, though, so choose whatever seems the most sensible and roll with it. You *should* be mindful of the internationalization issues and details like what u/AngularBeginner is pointing out, though.
I really don't think anyone should be promoting the use of goto. Someone who doesn't know its exists probably wouldn't use it well. 
Thanks. What if I want to make it in a hard way, you have an idea?
r/vscode --------------------------------------------- *_Upvote to allow me to help others. Downvote to remove. PM for your subreddit to be ignored._*
I think in my head I imagined the way I would do it more than explain. I would create a copy with the watermark at the time of upload and just serve up whichever one is needed at the time 
You'll probably need to use pinvoke.net and send messages directly to the other application. I'm not sure (outside maybe looking at UI Automation) that there is an API for this directly in C#. Take a look at something like [THIS](https://social.msdn.microsoft.com/Forums/windows/en-US/345d85e8-cc5f-4508-b3f2-74ee43521169/how-to-click-a-button-in-another-application-programmatically-in-c?forum=winforms) thread.
Don't provide a default implementation that throws a NotImplementedException. If you want it to be overridden by a child class, make the method abstract, too: public abstract class FamilyMember: IFoo { public abstract bool GetSomething(); }
Yeah. I was lazy.
Sorry I don't follow? I searched to see what the correct etiquette is for cross posting and the advice I found said it's fine but make it clear in the title it's a cross post which I have. If you have an issue can you please explain what it is?
As the DI container (or custom code without a container) constructs in the end only *one* object within the composition root, of course it will create objects on the UI thread, if you build a GUI application (in fact, the composition root will be located within the UI-Thread). So I really don't see any difference to other forms of programs! *Reading files* or something similar should never happen during initilization (that means constructor)! There should rarely to never be something like *long initialization* code... If you have long running code within a GUI application you should run this code within a different thread, so the GUI stays responsive. Of course you cannot initialize every object that will ever existing during the life cycle of your application at the start! Objects, that have to be created **dynamically** based upon runtime values cannot be created by the DI container. They have to be created by some object at runtime. But this object can be a factory for example that has been created by the DI container with all the stuff on baord, that was available at composition time. The dynamic runtime parameter must be passed via method / property injection then.
This bot makes a clickable link to any external subreddit mentioned in the title. Helpful for mobile users or for when a subreddit is mentioned but no link is provided. *Beep boop*
Ah silly me :-)
* Anything quick is OK on UI thread. * Anything slow should be task, thread or async. * Sometimes small quick things in one place can become slow. 
Go with .NET Core 2. 
Is .NET Core 2 sufficient for web programming? Perhaps a better question would be -- what is .NET Core 2 missing that .NET has (and vice versa)?
I don't really know that people should be using `goto` in C# on a regular basis, but it's relatively difficult to screw yourself over with one in this language. You can't use a `goto` to jump to a different method, or to a lower scope in the same method. Probably the only thing really nasty thing you could do with a `goto` is jumping backwards in the current scope from an arbitrary point nested inside it, which could create a really ugly loop. This would be exactly the reason for having code reviews, though. In the meantime, there are a couple things we can do with `goto` that we can't do otherwise without either a bunch of additional ceremony or repetition: * break out of a deeply nested loop or block: we *could* use a *bunch* of `break` or `continue` statements and maybe some conditionals, but a `goto` could be a lot more concise. * `case` fallthrough in `switch` statements: alternatively, we could break each case into separate methods, and cases that need to continue to the next case could call the method the implements it, but this introduces a bunch of indirection. I think a `goto` is clearer, as long as the `case`s are simple. Either of those ought to be commented--`goto` is unusual in C#, and its use *should* be explained or justified--but I don't think we should act like we're allergic to `goto`, either.
Removed: Rule 7. `goto` is a fairly rudimentary and (arguably) outdated concept and typically available in any introductory learning materials, and the video content doesn't have much to expand on beyond the basic use of the keyword. Also, you should familiarize yourself with Reddit's [Guidelines for self-promotion](https://www.reddit.com/wiki/selfpromotion). You're welcome to continue producing videos and posting them, but really only if you follow these guidelines and participate with content other than your own. You should not view Reddit as a exclusively as platform to promote your content.
Totally, this whole video series is about the lesser known/weird/funny parts of C# :)
* HTML, CSS, &amp; JavaScript make up the 'core' web stack * The most popular additions to the core are PHP &amp; ASP.Net * Typical Stack for dotnet (HTML, CSS, TypeScript, ASP.Net MVC, SQL Server) * There are many popular libraries such as jQuery, Angular &amp; React that add to JavaScript. This is where a lot of confusion comes in. * Good resource for HTML and other core web technologies would be [Mozilla.org](https://developer.mozilla.org/en-US/docs/Web/Guide) * [Difference between soap and rest](https://stackoverflow.com/questions/19884295/soap-vs-rest-differences) * In order to deal with the organization of web technologies it is important to recognize that many technologies build off of each other. When you realize this and can identify the core/root technologies it becomes much easier. There are only a handful of popular (More standard) stacks to focus on. Yet you can, of course, build a completely unique stack depending on your needs. * I find dotnet core to be extremely useful and have already published several projects with dotnet core and visual studio code. * Other stacks: PHP has a large variety of frameworks to choose from such as Laravel or CodeIgniter. Python and django. The MEAN stack: Mongo, Express.js, Angular.js, NodeJS.
Been playing with this example, can you possibly clarify how one uses the .Select command like this? Google doesn't seem to be helping me much. Thanks alot!
Checkout my little tool, [felistar](http://www.moonstarsky.com), for downloading images and videos from reddit posts. Quite useful for /r/wallpapers, /r/fullmoviesongoogle, /r/gonewild etc. It also can spider and download from opendirectories. See /r/opendirectories or use the built-in opendirectory finder.
Cool. Not really a side project, but I'm currently developing [Clipboard Everywhere](https://www.clipboardeverywhere.com), which syncs your clipboard across Windows and Android devices in real-time. It's literally copy on one device, paste on another. One clipboard, with clipboard history, shared between your devices. Currently in closed beta. If anyone wants to test it out, let me know :-) 
In general, people shouldn't be using goto in C#, but it does exist for a reason. 
Based on error message you are getting I would guess that XML serialization you are trying to use is ancient. Serialize to Json. Use Newtonsoft.Json for example. No problem with generic lists. Not sure about object references though.
Visual Studio Code does support this feature already, using the "ctrl + ." key. This shortcut is used for a lot of things, you should remember it well and try it often. Here's a screenshot from dummy code I had laying around: http://imgur.com/a/1jeHR
&gt; 2) bothers me a bit, do I read that correct, that the HAP-library tries to access this path? This is not on my computer, seems like a falsely set path in their code, more like a path on the dev's workstation. It does not tries to access that path. It tells you in which line of the source code the exception was thrown. This information is part of the PDB file (the debug information file) that often comes with libraries. 
There is an old fashioned way in Visual Studio: view-&gt;object browser. However there is nothing to search in the opposite direction like finding library of some class or certain method. 
Thanks! This has been bugging me for days. I think I saw this but misread it as Ctrl and the plus key!
Select is part of LINQ which are a bunch of methods for performing transformations over anything that implements IEnumerable (e.g. list, array) or IQueryable (SQL etc) There are a bunch of materials online although most of them use the 'comprehension syntax' of var task = from ServerList t select t.RunTask... but they compile down to the same thing. (The version I showed you is called Lambda syntax)
Hmm I thought SOAP-XML was still a thing :) 
All threads will be stopped from access until the lock is released Other threads will just wait until the lock is released and then continue running when they try to access it 
Yes, a `lock` only prevents other threads from also entering locks on the same object. It does not influence usage of the object itself in anyway. The object in the `lock` statement is really just a key to identify the lock, you don't even necessarily have to lock the same object you're trying to control access to.
You misunderstand what lock does. Lock **does not** lock an object. It uses the reference of the object as a key. Only one thread will be able to enter sections locked with that key at the same time. This is often misunderstood to mean you are locking the object in question, but that only works if you use the object you are mutating as the object used as a key. In your example both could run at the same time. You can't lock all usage of obj in your example unless every access to obj is locked using the same object reference (you aren't locking the second section). You also are not supposed to use public or static instances for locking. You might want to rethink using lock at all. Most simple usages of locking and manual threading can be replaced with built in concurrent collection classes or usage of async / await depending on your type of project and concurrency needs.
SOAP Stopped being cool like 15 years ago. XML is still alive but there is not much love for it. JSON is now very much mainstream. After XML nightmare it is quite refreshing. It is even surprising that this simple format has become so popular. After XML I always assumed that future technologies must be ugly, bloated and hard to use. JSON ruined it for me. 
All threads trying to acquire a lock on the same object with be stopped. His "obj.property" doesn't lock at all, so will run fine.
Thanks for your reply. This got me on the right track..sort of.. Looked into the source code of the HAP library Exception gets thrown when this var system_windows_forms = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(x =&gt; x.GetName().Name == "System.Windows.Forms"); returns null, which for whatever reason happens although the dll clearly is in the buildfolder
Try to explicitly load the assembly by referencing a type from the forms assembly before the html agility pack code.
Yes, the unlocked statement will run. &gt; The lock keyword marks a statement block as a critical section by obtaining the mutual-exclusion lock for a given object, executing a statement, and then releasing the lock. You seem to think that lock "locks" the object. *There is no such thing*. `lock` does **one thing only**: it prevents more than one thread being between the curly braces. **Nothing else**
exactly what I found through searching https://social.msdn.microsoft.com/Forums/en-US/dc9a3791-831c-4135-bb24-1ee4af506ca8/problem-with-appdomaincurrentdomaingetassemblies-in-test-mode?forum=csharplanguage and https://stackoverflow.com/questions/9997508/referenced-assembly-not-found-how-to-get-all-dlls-included-in-solution I wasnt aware of this tbh...oh well :) added a dummy object from the assembly to force-load it and now its working. Thanks for pushing me to the right direction! :D
&gt;`lock` does **one thing only** Well, technically it does more, it also creates full fences/memory barriers before and after the locked section.
Others I can think of off the top of my head from recent interviews: * What's a finally block? The usual followup questions are when does it run, and will it still run even if the method has returned control before the finally block. * What is a finalizer? They'll usually want to know where it's used/how it's implemented, and the difference between it and a finally block are. * I've also been asked about LINQ, what it is/used for, and to provide a basic understanding of some of its methods. Usually also tied to asking about LINQ-to-SQL. * Explain async and await. * Some will even ask about design patterns. They may ask about specific ones, or ask which one(s) you're familiar with and then have you talk about it. You should also be prepared to either whiteboard some examples, or look at sample code to tell them what the output should be, or at the very least run through it and explain what's happening along the way. There will usually be some bugs/improvements that can be made in whatever sample code they're giving you, so unless you note those as you run through them, they'll also follow up with questions related to debugging and improving code you just saw. Some places may have had you do this for junior/entry level gigs, but from my experiences they're looking to make sure you don't need as much hand holding, and can get through reviewing the sample in a fairly timely manner and with good understanding of what you just read, and that you can identify most mistakes with proper fixes. And yeah, if you don't know something, *say you don't know it*. They're still not expecting you to have top level knowledge, but at this point you should have more than just the basics. They're looking for more of a conversation about code. Can you talk about the concepts beyond just pat answers you may have received from an interview prep site? Can you dig a little deeper on some of the core concepts? Deep dives will become increasingly more common.
True, that! I stand corrected.
I never heard of the solid principle.
You should probably mention that people tend to use WebAPI for REST services instead of WCF too. To the point where WCF isn't even shipped with .NET Core.
I am still a novice, so thanks for the tip! I have created some mockup code and seems to work so far, without the hassle of marking classes as serializable or marking fields as Notserialize. 
May want to check the sites terms of service and check if data mining their site is an issue 
Will this eventually be able to create a static, stand-alone executable?
I'm confused... You're talking about json, but your error has to do with xml... That being said, you can't have a bare number as a key in json. It must be a valid javascript identifier.
The closest you currently can do is to re-implement the interface: class Child : Parent, IFoo { bool IFoo.GetSomething() { return false; } }
[DynamicJson uses XElement](https://github.com/neuecc/DynamicJson/blob/master/DynamicJson.cs#L180) internally to store the json data. i guess for simplicity so he doesnt have to create his own types but that backfires here. you can have numbers as keys as long as they are a string of a number and thats the case here
Is this really something you expect a person with 3 years of experience to be asked? I would consider the bullets junior level questions.
One more question: If I serialize an object and later deserialize it with something like: Elem tmp2 = (Elem)serializer.Deserialize(file, typeof(Element2)); How can I delay the decision of what class of the serialized object belongs to runtime instead of compile time??? In the code above typeof(Element2) explicitly declares, that the stream will send on object belonging to Element2 class. I would like to serialize a bunch of different objects belonging to separate classes sharing the same base class.
Its been a while, so maybe things changed, but it was considered a good practice to always lock an lockObject rather than the object itself. It might have been in the case where one is tempted to lock(this) but I don't think there is a downside. public object randLockObject = new Object(); then lock(randLockObject) 
You might want to take a look at WPF if you want something really pretty. 
&gt;That being said, you can't have a bare number as a key in json. That's not really true, JS(ON) objects can have arbitrary strings (including ones consisting solely of digits) as keys. Even when they're not valid JS identifiers, valid JSON requires all keys to be wrapped in quotes anyway.
I tried doing string.split() and string.join() but i couldn't get them to join back again. I'll look into it again. Thanks!
They were in my area at least. I was asked these same questions in about 4 phone interviews and 2 in person interviews. The positions were posted at 4+ years of experience, all of which were c# .NET, ASP.NET positions. I figured there must be enough people out there with "experience" that don't know these basic things it's worth asking. Even the web aspect was brushed over pretty quickly with just basic Angular questions. The most complex it got was talking about permutations and the astronomical chance a deck of cards could shuffle itself perfectly sorted (because I didn't include it as a unit test). Who knows, maybe I just got lucky and they expected me not to know some basic stuff. 
Just store the current time when you send your email. When you check for the humidity value, check also to be sure that the last alarm was triggered more than a minute ago, it should do the trick.
The Windows Event Log records when and how the shutdown was initiated. It's event instance ID 2147484722 in the System Event Log. Here's an example pulling out the most latest shutdown event: EventLog log = new EventLog("System"); EventLogEntry lastShutdownLog = null; for (int i = log.Entries.Count - 1; i &gt;= 0; i--) { var entry = log.Entries[i]; if (entry.InstanceId == 2147484722) { lastShutdownLog = entry; break; } } if (lastShutdownLog != null) { Console.WriteLine("Shutdown at: " + lastShutdownLog.TimeGenerated); Console.WriteLine("Shutdown message: " + lastShutdownLog.Message); } Hopefully the message in the log is sufficient for your purposes.
If you're used to JavaScript joins, then the syntax in C# isn't immediately obvious. Instead of array.Join(), in C# Join() is a method of the String class: var output = string.Join(" ", array); 
its possible to "port" winform to WPF?
You know, I was probably thinking of YAML.
I'll give that a go! Thanks! I'm already storing a timestamp so it should be a piece of cake. I was overcomplicating things with threads and timers.
This is already possible with .NET Native or Mono AOT.
i've had a look at IronPython and using python. I mean, if it works, what's the issue with using 2 languages? it does the job!
You'd essentially have to redo your UI. As for Windows Forms, there are a few customisation options in the properties of each control but it's limited. For custom styling you might have to look into user drawn controls (Google that term) or third party control libraries. I'd look into WPF because it's much more customisable and the knowledge carries over to the Universal Windows Platform if you ever want to go that way.
Alright! Thank you for sharing this!
1) In the real world, managers frequently delegate tasks that can be solved by a random person googling the answer; 2) The fastest, most productive way to solve the problem is by pointing out that it's not a problem at all and that there's no need to download anything in order to access the information housed by Wikipedia.
so basically you create a char array with the contents of a string or in this case string s? So if I'm understanding it correctly you iterate through the char array and only change the array if you come across a white space and in that case you capitalize it? Thanks again for your help! 
Use JSON.Net and ILMerge it. Still a single file, but you now have to hand a top-grade parser 
Then I'd ask why they are upset that I'm doing the job they assigned me lol. See where I'm going with this? 
Ok so I'm doing something following the lines of this: var start = DateTime.Now; var oldDate = DateTime.Parse("08/10/2011 23:50:31"); if(start.Subtract(oldDate) &gt;= TimeSpan.FromMinutes(20)) { //20 minutes were passed from start } I think this will solve my problem and is pretty versatile for similar functions. 
According to someone on Hacker News, it started off as the Mono Linker project in the 2nd Google Summer of Code: https://news.ycombinator.com/item?id=15135501
Cheers. I forgot to add though that, in my experience, Windows Forms does make it easier to do easy things. That is to say, WPF has a little higher barrier for entry.
SQLServer &gt; Entity Framework &gt; MVC &gt; HTML+CSS+(some js framework)
Thanks! that works too I just don't understand how! LOL ill look into whats happening behind the scenes.
[Not really, but there are plans for that too:](https://github.com/dotnet/core/issues/915#issuecomment-326081897) &gt; The primary goal is smaller deployments that only have the code you need in them (better pay-for-play). The self contained executable scenario will definitely benefit from this but I don't think they are necessarily tied.
That comment was written by Jb Evain, who created Cecil (the library the Linker is based on) and now works for MS. I wouldn't call that just "someone".
I totally agree about it being outdated. But the series is about the weird/funny/lesser used parts of the language.. I urge you to reconsider this desicion. The last post was very appreciated on reddit.
It’s a pretty bad design, actually, that’s easy to misunderstand. It’s also a design that Microsoft regrets. 
Another good practice would be to have that object be private, not public. 
The real answer...
Very good point, WebAPI is the future. 
That makes absolutely no sense and sounds like a horrible idea on the face of it. Dump this library, it's bad karma. 
Bad bot. 
Thank you MellerTime for voting on ClickableLinkBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
Seriously, this is the shittiest bot ever. 
It is 5 principles first defined by "Uncle Bob", Robert C Martin. SRP, OCP, LSP, ISP, &amp; DIP. Spend some time learning them. Your designs will be much better as you do. When refactoring, they should be a guiding star.
I would like to add to this that WMI can be a very useful tool here too. 
Sorry. Clearly I meant to write "someone named JB Evain of the House Microsoft, First of His Name, the Compiled, King of the Linkers and the First Commit, Khal of the Great Google Sea, Breaker of Block Chains, and Father of *Thar be Dragons*".
Think about it this way. The object's got a "name" that's unique to it. No one else knows this secret name. The names, however, are not unique. Each secret name somehow represents an object's destiny in life. There is a bouncer standing at the door to a club. What happens inside the club is a mystery to all, but it always has something to do with destiny and funky rhythms. There are also parallel universes, and people across all of them with the same name. But there is only one club, and one bouncer, existing simultaneously within them all. It has been written that if two people from different universes who have the same name enter the club, all universes will become unhinged and life as we know it will be destroyed. Two people from the SAME universe may use the same name, as that means their destinies are so coupled they need to meet. So the bouncer's job is to stop everyone at the door and ask for their secret name and their universe of origin. If he notes that there are none within the club who have used that name, the soul is allowed to enter. If he notes that there are some with the same name, but they come from the same universe, they, too are allowed to enter. But if he notes someone's doppelgänger from another universe is within the club, they are stopped at the door until it is safe to enter. The soul still functions while their name is recorded. After all, it's but a name. In .NET: The 'secret name' is probably just some internal object ID. The "parallel universes" are threads. The "bouncer" is most likely the Monitor class. When you lock, you "enter" the Monitor. It notes the object ID and the thread you came from. If you happen to try to lock on that object again from the same thread, that's OK, you move on. But if you try to lock on it from a different thread, that thread is "blocked" from "entering" the Monitor until the first thread "Exits". If you directly use the Monitor class, you can do neat things like allow more than one thread inside up to a certain number, or allow some threads to have higher priority and cut in line. It turns out "doing neat things" is almost never a good idea and the "one at a time" approach is worth syntax sugar. Nothing is done to an object when it "enters" the Monitor. It's just being referenced in some table somewhere. 
Yes. Good practice is to use a dedicated object for `lock` and never use it for anything else other than *that specific lock*. private object fooAccessLock = new object(); private object barAccessLock = new object(); lock(fooAccessLock) { /* do something that might access foo from multiple threads */ } lock(barAccessLock) { /* do something else that might access bar */ } * Plain old `object`, nothing fancy. * Separate locks for separate purposes. Also, in the `async/await` modern world, you should read up on `SemaphoreSlim` and understand it.
Oh, what's a member initializer? I'm still a newbie.
Your last post went a bit more in depth and discussed/contrasted the differences between the two options. `goto` is a very simple keyword and it doesn't take much to demonstrate its behaviour. In particular, it does fail the part of Rule 7 that states: &gt; content should be relatively current (that is, not terribly obsolete or outdated) The `event` discussion is bordering on this as well, but it wasn't enough for us to warrant removing it on that basis alone. `goto` violates this part of the rule even more so. In addition, this is now your third post promoting your own content and thus is showing a pattern of self-promotion. The first two posts are given extra leniency/benefit-of-the-doubt. But a third one starts to show a very real trend. Self-promotion posts are given more scrutiny in terms of rule violation. If you were an account that actively participates in discussions, helping people, posting other other content, then more leniency is afforded to such self-promotion submissions. Especially now that the guidelines have been explicitly pointed out to you, you should be aware that further self-promotion posts that you make, assuming you don't take an active role on Reddit outside of your own submissions, will have rules applied more readily without much leniency.
&gt; That is to say, WPF has a little higher barrier for entry. For me it was mostly because of paradigm shift from "Imperative UI" to MVVM, not so much because of the framework itself.
Adding to what's already been said, once you get the hang of WPF it's pretty fantastic. Just gotta stick with it! Also, in general, try to keep you business logic and view logic separated out as best you can. It typically makes things a lot easier (maintainable, extensible) in the long run
Yes I have been promoting my videos but I could never imagine they would be considered spam in a forum about C#. Well, thanks for looking Into my case. If upcoming videos discuss more current topics, would that be OK?
https://www.youtube.com/playlist?list=PLrW43fNmjaQVYF4zgsD0oL9Iv6u23PI6M If you want to get into WPF
It's not like we have to use MVVM anyway, would be an easier start.
agree and i just did by finding another way to do it instead of using a webrequest that returns a json response. in fact i found a way to get all the info i need offline so goodbye json library
found a way to do it totally without the json response but this is the best solution right after. thanks for that. will come in handy for later
Basically arrays are good if you want to manipulate something by index. By using the array I can cheat and ToUpper the character at i+1 when I find a white space. For this particular scenario this method is inefficient as you have to copy the string into the char array. In practice I would use this kind of approach only if I was applying a complex rule that required checking multiple indexes to make a decision. The biggest technical problem with your original code is that every time you use + to append strings there is a performance hit as new memory is allocated. This is easily solved by using a StringBuilder (which is designed to solve that issue). Also to solve your problem of duplicating the characters you need to use a state variable to hold onto the previous character. Obviously in the real world you should use ToTitleCase as pointed out by /u/Staeff. If that method didn't exist I would probably write something like the following: string s = "hello world"; var sb = new StringBuilder(); char previous = ' '; for (int i = 0; i &lt; s.Length; i++) { sb.Append(char.IsWhiteSpace(previous) ? Char.ToUpper(s[i]) : s[i]); previous = s[i]; } Console.WriteLine(sb.ToString());
Ran into the same problem here. Coverage % doesn't seem to be a priority for .NET Core.
Possibly. I would strongly recommend though that you read over those self-promotion guidelines I linked and take them to heart. Treat reddit as a community, not an advertisement/distribution platform. EDIT: Let me clarify. The videos themselves are not considered spam. They're half decent too. But the method in which they're distributed is not ideal or desirable.
Yes they are, as you can simply reimplement the interface method using again explicit implementation. You can’t call the base method, though. 
I'm probably confusing this with something else, but doesn't this actually increase the size of your assemblies by including parts of Framework libraries that would usually already be part of the .NET Framework? I thought the point of statically linking was not to decrease assembly size, but to eliminate the dependency on the .NET Framework so you could deploy without needing it to be present?
Ya it's very annoying. Also running into issues talking to external services on OSX via https also. Ie talking to a soap service
I don't think the issue is the generic collection itself, but the type/types the collection is holding. I use generic lists all the time. The issue is most likely the inherited class. See [Xml Serialization with inherited classes](https://stackoverflow.com/questions/12237268/how-to-implement-xml-serialization-with-inherited-classes-in-c-sharp)
I used Aspose.Pdf to do this. It requires a license but there may be a free trial version you can try out. 
Thank you for all of your responses. I will not redo my UI, but next time I something like this, I will definitely use WPF. 
Just make an enum with 40 values in it /s I really don't know..
This falls into the realm of dependent types. The best you're going to get is having a separate type that validates this as an invariant. Push the check as far up as possible.
I think this would be better: public void Size(int x, int y) where x &lt; 40, y &lt; 80 { }
I'm not sure how you would check a variable at compile time since it's y'know ... variable and not constant. Are you just attempting to reduce the amount of error handling that you need to do?
nCrunch works really well for me on my .NET Standard and .NET Core libs. It's not free, but I tend to find it worth the money.
If this works, this is the best answer, but I've never seen anything like this, and don't have a way to test it currently. Does it work like that?
Apart from the different data types with different ranges (`byte`, `short`, etc.) there is no feature like that in the language. You could look into Code Contracts.
No. I think they were just proposing a different syntax than what OP proposed.
Is this C#? 
That does not prevent invalid values. enum Foo { A, B }; Foo a = (Foo)99; This is valid code, and a is neither `A` nor `B`.
Is there a difference between using lock, and using a semaphore with an allowed count of 1?
WCF now lives happily on the farm with Silverlight and MSMQ. If I remember correctly it was moved to the zombie product maintenance team at Microsoft maybe couple of years ago. 
Yes, code contracts is probably the only real solution. I have used it not that long ago but it seems that the project is kind of dying and it does not really work that well with more complex things but it should handle this easily. 
Why? I'm on mobile right now and this makes it a lot easier to click my way to the vscode sub. Seems to fill a niche to me
Code contracts are about as close as you can get right now. https://docs.microsoft.com/en-us/dotnet/framework/debug-trace-profile/code-contracts
The idea is that you're forced to handle both cases, like in [Idris](https://en.wikipedia.org/wiki/Idris_(programming_language\)#Dependent_types).
NCrunch is not cross-platform.
When you start a new web project in VS you are given the change to select the authentication method for your new project. Otherwise, there's a fairly massive amount of documentation on the msdn site for adding oath, identity, and other authentication schemes. 
One approach would be to leverage the type system to do that. So instead of `CursorPosition(int x, int y)` you would have `CursorsPosition(WindowCoords c)`. Then just guard the WindowCoords creation, so no `WindowCoords (int x, int y)` but `WindowCoords .Create(int x, int y)` that will return a valid object only if xy are correct. The problem with this is what if you have two screens with different width/height. Probably `WindowCoords.Create(window, x, y)` would work ok. The next issue is what do you do in the situations where you actually do need to go past the limits. For example in Windows it's completely possible to have a window in coordinate that is outside screen area. Also child windows can be created outside parent window areas etc.
Thanks for the tip as well. Bought! Been wanting to read the current and new book!
Thank you for your advices!
Have you tried the built in one from Enterprise?
It doesn't, but the where keyword is there, and has a similar form as generic constraints.
I think you may want to look into Aspect Oriented Programming. There are a couple of quite popular C# packages for this, though I've never used them, so they might or might not meet your needs.
On the technical side, `lock` is using the `Monitor` class under the hood. One difference between `Monitor` and `Semaphore` is that `Monitor` is re-entrant, i.e. the thread current holding the lock can enter the same lock multiple times recursively. 
Wow. Awesome project
The Code Contracts tooling has been categorized as "research" for **years** already, and it's not actively maintained. There is not even an extension for Visual Studio 2017.
When you use braces to provide values for your public properties. What the compiler generates is a call to the zero-argument constructor, followed by individual calls to the property setters you list in the braces. Not nearly as efficient as calling the particular constructor overload by using parens. So, instead of: Square { NumberOfSides = 3 } just use: Square(3)
Unfortunately .net core 2.0 templates that uses angular or react, doesn't include any user management code
They are all API driven with webapi controllers on the backend. You can use oauth and social login's for these, or use Identity Server if you want to go with your own login system. You need to use token Auth with those front end templates. There is a bunch of Core middleware to handle all that too
Maybe I'm wrong but the parameters, in a query, works only with "values", the table name and fields aren't values. Talking about stored procedures, you cannot "declare @tablemane varchar(50)" and then in the query do "SELECT blah blah blah FROM @tablename".
Not possible in C#, but [Spec#](https://www.microsoft.com/en-us/research/project/spec/) does it, which is an extension of C#. Unfortunately it's no longer maintained so you don't get any newer C# features. I had really hoped at one point that this would make it into C# proper. Wonder why it never caught on.
yes. there's one called "asp.net boilerplate"... strangely enough https://aspnetboilerplate.com/
Those are, in my very humble opinion, the best WPF tutorials out there. The guy knows his stuff and he's great at getting the concepts across to the viewer. 
I'm currently working on a library, which allows for code sharing in linq 2 entity. You can basically insert any type of expression into the query. The expression will then be merged into the expression tree if the query before being compiled to the SQL (it has some similarities to LinqKit, if you guys know it, but takes it a step further). Want to add support for linq2sql, too, and also gave some ideas for it in the future. Check it out: https://github.com/crazycrank/LinqOnSteroids (name is still work in progress, specially because there's some Scala library with the same name) 
I think it would be nice if they added the user management to the templates though, there's almost no project where you don't want it.
The templates should honestly never be used as-is, and instead should be taken as a starting point to learn about different features.
Hey well you can make some code randomiser out of imei and then promt user to send you imei via email and than you make an app that generate code on youre phone and than send back the code.. that's how i secured my app so when i sell it (it's not on g.play) i'm sure that nobody expect that person won't be able to enter tha app.. (i was using sql lite to store the coode and bool (false not atutenticated/ true it is) so each time you open the app i check the bool and base on that open main page or promt you to enter code :D is that what you wanted or?
Assuming you have a basic class structure like this: (`ID` added just to demonstrate the proper order) public class Node { public List&lt;Node&gt; Children; public int ID; public Node(int id, params Node[] children) { this.ID = id; Children = children.ToList(); } } Just roll your own method to do the depth first traversal. You said you wanted to avoid recursion so I just threw together a simple loop with a stack: public IEnumerable&lt;Node&gt; DepthFirstTraversal(Node node) { Stack&lt;Node&gt; nodes = new Stack&lt;Node&gt;(); nodes.Push(node); while (nodes.Count &gt; 0) { var n = nodes.Pop(); yield return n; for (int i = n.Children.Count - 1; i &gt;= 0; i--) nodes.Push(n.Children[i]); } } Then you just call the method and iterate on it, it does the work for you: var tree = new Node(1, new Node(2), new Node(3, new Node(4), new Node(5, new Node(6) ) ), new Node(7, new Node(8) ) ); foreach(var node in DepthFirstTraversal(tree)) Console.WriteLine(node.ID); Outputs: 1 2 3 4 5 6 7 8 The key thing is really just the method signature. Now you can swap _any_ traversal implementation, recursive or otherwise, or with LINQ or whatever.
Also a really nice bit of tech, and feels very sensible when used alongside MVC, you just work in the same way but return your model rather than passing the model to a view and returning that.
While you could use a .Where() lambda within a recursive method, that's going to be a bit slow. Because for every node the .Where() will have to enumerate the whole list to get all the children. You should start with taking the collection and adding the items to a Dictionary&lt;int?, List&lt;Node&gt;&gt; where the Key is the Parent Id, and the children are added to the list in the Value. In these scenarios, imagine you have a million items in the tree. If you use a .Where() on each node to get the child nodes, you'll have to enumerate the million items (to find the children) a million times (for each parent). Once you create the dictionary, you can get only the descendants of a parent id really fast. On really small trees this isn't that important, but it's good practice just in case. You could probably use a .Join() I'm not sure how performant that would be. If you've got a lot of data, you should sometimes run benchmarks with .Join() as it's not always best in every scenario. I take it you're practicing how to use lambda's so here's an example for how to make something that could do all kinds of universal work: (I've assumed you've already got the dictionary created) void DoWorkOnFlattenedTree(Action&lt;Node&gt; workForEachNode) { // assuming you already have the above dictionary object created Action&lt;int&gt; processChildren = null; //must declare this on a separate line if you want to have it recursively call itself. processChildren = parentId =&gt; { foreach (var child in dict[parentId]) { workForEachNode(child); processChildren(child.Id); } } var parents = dict.Keys.Where(x=&gt; !x.HasValue); foreach (var parent in parents) { workForEachNode(parent); processChildren(parent.Id); } } //then somewhere else in your code you can use the flatten tree DoWorkOnFlattenedTree(node =&gt; Console.WriteLine(node.Id)); I haven't checked for typos.
For my old winform stuff I've started moving to a more in mvvm style. That has allowed me to transition them to WPF much easier without having to do it all at one time. So, when working in your winform app, you can start using view models that implement inotifypropertychanged, and let button clicks just call methods on your view model. Aim for only presentation related code in your form, everything else goes to the viewmodel. That will make your code easier to maintain and also make transitioning to wpf much easier.
Why do they update it? They do so to keep it up-to-date and relevant. Is it worth buying if you have the version for 6.0? I don't think there are enough features in C# 7.0 to warrant it. I bought C# 4.0 in a Nutshell and I've just been keeping up with changes in the language since. I will probably buy C# 7.0 in a nutshell though since there are a lot of upgrades since 4.0. You'll also note that Microsoft is doing minor updates to the language now too so C# 7.1 was recently released. 
&gt;Why reissue such a huge book to reflect such minor updates? To still seem relevant. I mean, you came to question whether or not you should after already owning 6. A newbie would likely be more inclined to buy something else if they knew 6 was no longer the latest version. I wouldn't buy it unless you just wanted a book to have nearby for a rainy day. If you've already been through the C# 6 book, I take it you at least have a grasp of the fundamentals, so there's no reason why the book would explain the changes in 7 better than Microsoft or some other blog. 
Still making slow progress on Borealis, since I have to actually deploy every server to make it configurable, but it's going along.
Yup, still the closest you can get to what the op wants. Thanks for chiming in!
In this case a recursive method is likely to be the most elegant approach. Recursion is great at handling arbitrarily long, and predictably branching, logic. First up construct it into that hierarchy of objects, with the following properties, I'm assuming this is already a part of your software. class Node { public List&lt;Node&gt; Children; // other data ... } Once you have this you can write a recursive IEnumerable method like this EDIT: there's a much more nicely refactored version of this [here](https://www.reddit.com/r/csharp/comments/6xmhxo/simplest_way_to_flatten_a_tree_structure/dmh8iuj/) IEnumerable&lt;Node&gt; Flatten(Node node) { yield return node; if (node.Children == null) { // or it's got .Count==0, your call yield break; } foreach (var child in node.Children) { foreach (var flattenedNode in Flatten(child)) { yield return flattenedNode; } } } then you just have to call `Flatten(rootNode).ToList()` to get your ordered and flattened list. You can turn that into a Linq style extension method pretty easily too, just make the signature `static IEnumerable&lt;Node&gt; Flatten(this Node node)`
Apart from it being a relatively small update to the language, I can't imagine why anyone would want to buy paper programming books anymore.
`Fontys ICT` is no valid identifier. This is your fourth argument to the `Console.WriteLine` method call. Did you perhaps want a string that says "Fontys ICT"? In that case you need to use quotes:`"Fontys ICT"`.
It is formatted poorly and doesn't actually explain what it's doing or give you a link to further information, who t complain to, etc. I personally don't find it useful at all, but I was speaking specifically about its implementation rather than its purpose. 
The stack method of FizixMan above is more elegant and predictable in terms of memory usage. 
The implicit String.Format you're using in the console.write requires that the additional parameters after the initial string to be formatted are strings themselves, or that they have a built in conversion to string. So in this case, each parameter needs to be in quotes unless they're declared string variables. Console.Writeline("...","Welcome","to",...)
Wpf has the exact same barrier for entry. You can use it just like you would with Winforms. For some reason people are under the assumption you HAVE to use MVVM for WPF. You don't, it's just preferred because it seperates the concerns nicely.
No. Microsoft's documentation is plenty good if you already understand 6.0 well enough. &gt;Why reissue such a huge book to reflect such minor updates? Money.
Ah, I thought there was one for monodevelop. My bad.
I find them to be very valuable. I can lay in bed and read through the more theory or ideology based materials (Like game design patterns, Clean Code, The Pragmatic Programmer....Etc) I can't do this with a PDF. There is a difference in learning and concentration when holding a physical book vs reading on a phone or a tablet, at least for me. 
So.. looking at the answers, the best I can think of is to create another class of like Coordinates, and define it like: class Coordinates { public int x { get { return _x; } set { if(value &gt;= 40) { throw new exception("you didn't do it right"); } } } }
Thank you!
Same here. Having a PDF is invaluable when you want to quickly find something, but for some strange reason, I also concentrate much better with a tangible resource in hands. 
By the way, what is usually implied when referring to Microsoft's Documentation? Is it C# Programming Guide? Or the specs? 
I'm working on a small ORM library called [SqlBuilder](https://github.com/rakijah/SqlBuilder). Purely for personal use, definitely **not** production ready. I know there are already way better libraries for this out there (like Dapper and EntityFramework), but I'm learning a lot. It lets you put custom attributes on classes and properties to specify their state in the database, i.e. table name, column name and column type. Then you can use the `EntityFetcher` class to build instances through queries to your database. It also provides a command-chaining API to build SQL statements, but it could be a lot more intuitive. Just pushed commits to enable foreign keys and force the use of DbParameters in queries, but there is still a lot to be done. I know the code has become a big mess, but feel free to post critique :)
Just done some initial investigating on this. Broadly speaking you're on the right lines. The recursive version is increasingly slower to run, as the tree grows in size, but actually has a very similar memory footprint. **Speed** is about the same initially (5 depth, 2 children per node), but quickly diverges as the tree grows, recursion is 3x slower (900ms vs 2400ms) at 5depth/10children (~111000 nodes) (similar when those values are reversed). The **memory** being similar makes sense, because both are ultimately returning data in the same way, and the allocated Stack is always small; the bulk of the memory footprint is likely taken up by the resulting data structure. The way in which I still say recursion wins, which is the one I usually argue for in software, is in **readability** and elegance. My original example here was the worst version of that method. I've refactored it below. // Nice and clean static IEnumerable&lt;Node&gt; FlattenRecursive(Node node) { yield return node; foreach (var child in node.Children) { foreach (var flattenedNode in FlattenRecursive(child)) { yield return flattenedNode; } } } // For those who like Linq, though limitations of how you can use yield return make this less nice static IEnumerable&lt;Node&gt; FlattenRecursiveLinq(Node node) { yield return node; var flattened = node.Children .SelectMany(child =&gt; FlattenRecursiveLinq(child)); foreach (var flattenedNode in flattened) { yield return flattenedNode; } } // Not so clean, though any better refactorings are welcome static IEnumerable&lt;Node&gt; FlattenWhile(Node node) { var nodes = new Stack&lt;Node&gt;(); nodes.Push(node); while(nodes.Count &gt; 0) { var n = nodes.Pop(); yield return n; for (int i = n.Children.Count - 1; i &gt;= 0; i--) nodes.Push(n.Children[i]); } }
The memory becomes an issue depending on tree depth. You hit a stack overflow at some point which is so serious they named a whole web site after it ;) Children will implement IEnumerable at some level, so you can just foreach the nodes.Push, or use a linq statement in the method you mention refactorings. Saves on the explicit old school for(;;) Tis good work though :)
They reissue it because people who don't have one and are looking for a book on C# 7.0 won't touch a copy of "C# 6.0 in a Nutshell". No, don't bother. The one you have is probably fine for most circumstances, and the rest you'll probably want to look at online reference anyway.
I guess I like to learn by example more, which translates to tutorials and labs - which I hate doing on paper because i can't intellisense or copy anything
This is, in fact, the exact reason Oreilly has been moving increasingly to online, subscription-based books anyway.
Google what you want, Microsoft actually has really good documentation, examples, and tutorials about C# online. My whole programming team taught ourselves C# exclusively using their online materials.
&gt; I can lay in bed and read through the more theory or ideology based materials I'm not reading books heavy with code samples. I'm past that with these books, I'm reading about project management, codebase maintainability, code smells, common patterns...etc I don't need to be in front of a computer for these. I still read about and write code every day, but I do that infront of a computer.
Well, I bought some to brush up for an upcoming job when I was travelling internationally, so I could read them on 6-12 hour flights. That was 6 or so months ago and I still refer back to one (coincidentally C# 6.0 in a nutshell) when I need a reference, because I know he has the topics laid out accurately and I don't have to trawl through stack overflow to find my answer.
.NET Core has less API's compared to .NET Framework. You can compare them here: https://docs.microsoft.com/en-us/dotnet/api/ Most notable changes are the missing Winforms/WPF parts because these aren't cross platform.
The words you want to display must be surrounded by "", because that's how the compiler recognize strings. Console.WriteLine("{0}\t{1}\t{2}\t{3}\t", "Welcome", "to", "Fontsys ICT", "Eindhoven"); But, if the Welcome, To, etc are variables, then the third has an invalid name, spaces aren't allowed 
You don't need to change to WPF if you don't want to. Just use third party controls. For example, Krypton component has a good looking good controls (including form skins, app ribbon and docking) and it is free. https://github.com/ComponentFactory/Krypton https://github.com/ComponentFactory/Krypton/blob/master/README.md But if you want to try WPF, just do it. But the default WPF look is practically the same than a winforms app, UWP give you more design options.
If you just want to know whats new in c# 7 then there's a page https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7
T4 is designed for text generation, if text generation is the route you choose
Well, I bought a book because I was going away to a place with bad/no internet for a week. I also find it much more relaxing on the eyes to read on paper than on a monitor. But ye, if I had a Kindle or similar I wouldn't have bought it as a paper book.
[IdentityServer4 has a template generator](https://github.com/IdentityServer/IdentityServer4.Templates). You'll only get the basic IdentityServer4 setup, but honestly I'd rather have that all squared away and tweak the rest by hand than trying to set up user authentication stuff myself.
Some people (like myself) can focus better with them, and find them easier to quickly reference. 
Found the person that never needed to find a list of available Triggers!
I got fed up with the music players available on Windows, so I wrote my own: [Sounds](http://cmpct.info/~calvin/Sounds/). It looks like a normal Windows application, or what one *should* be, if they weren't too busy trying to assert an "identity." (Thanks based WinForms for using native controls.) The other principles were simple UI, simple implementation, and file system as the library with Windows Explorer as your library browser.
I learned C# from scratch in 2 weeks (caveat: I had 12 years of programming experience under my belt), between Pluralsight and reading C# 6.0 Pocket Reference over a few lunches. That little book helped me build a comprehensive semantic mental map of the language that no website has managed to do. As for why paper books... I find if I read books on my phone, I'm tempted to switch to Twitter or Slack every couple of minutes. With a paper book (and no electronic devices nearby), I can concentrate longer on a single piece of text. 
Maybe this could assist with testing some C# syntax options: https://deck.net/4df869a397847b2b14c095d101b37fc9/third Here's another option using C# Interpolated String: https://deck.net/9c6930822e561192a9e2d535cfde30d2/third Best of luck with your course. Hope this helps.
A sample of the **DepthFirstTraveral** method proposed by /r/FizixMan above. https://deck.net/ff86218493ca37f88070c69d57f4733e/third
I use regions, it helps to hide code that you dont need to see all the time.
Your first and last statement are contradicting.
Of the 3 you mention, only T4 is a code generation tool.
I haven't tried this but since Console doesn't have any keypress events you can use like in WPF/WinForms, you can call Console.ReadKey() in a while loop, and as long as you don't pass true in ReadKey, it will not take the key from the buffer so you can still receive user input in other threads (supposedly). ReadKey will just block until a key is pressed, so you can put it in a while (true) or better yet, a while (!token.IsCancellationRequested). 
Thanks, tried that already. It remains the same - a race condition between the parent and child thread as to which gets the readkey event.
Hmm, well it seems messy to me while thinking about it, but I bet you could wrap a lock or ManualResetEventSlim around the readkey such that the auth thread ALWAYS gets first dibs, then others can get the chars from the buffer after auth had a chance to update the last keypress timestamp. Better yet, wrap all Console.Read methods in your own class, and expose a keypress event which your auth class can subscribe to. Edit: Using your own class to control/extend access to Console keypress info seems like the way to go. The only thing I don't like about it is that if you or anyone else touching your code ever directly uses Console.Read methods, it would interfere and I don't know how you could go about preventing that other than personally avoiding it.
Sure, and I found it online...
You can bind on winforms too.
Use a DataBinding.
&gt; Why reissue such a huge book to reflect such minor updates? It's extremely common in the industry. A new developer comes along and wants to start from scratch, they're going to look for C# 7 books. This publisher won't have anything to offer them if they kept the C# 6 version around.
RemindMe!
**Defaulted to one day.** I will be messaging you on [**2017-09-04 03:38:12 UTC**](http://www.wolframalpha.com/input/?i=2017-09-04 03:38:12 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/csharp/comments/6wbtbi/new_to_multithreading_is_this_code_threadsafe/dmhu931) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/csharp/comments/6wbtbi/new_to_multithreading_is_this_code_threadsafe/dmhu931]%0A%0ARemindMe! ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! dmhu9ks) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
"The difference between ref and out parameter in C# is Out parameters is not required to assign the value before calling the function where as ref parameter should assign the value like normal parameters." There's something vaguely *wrongish* about that statement.
Unfortunately no, c# doesn't have a great way to do something like this. If it's a range you use a lot, like for example [0-360) for angles, you could define a struct that maintained that invariant, but mostly you should probably just try to find a way to set up your classes such that this sort of requirement is avoided as much as possible. This kind of fiddlyness is mostly only really needed when carefully managing memory, which you generally should be leaving to the compiler in c#. It is a cool feature though, if you need a lot if this sort of thing in your project, you could try out cpp or d, or even someting like Haskell or ada if you're feeling brave.
Running another executable is by definition creating another process. What you want is to create the process with a `ProcessStartInfo` object, and tell it not to create a window. https://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.createnowindow(v=vs.110).aspx
TextBox can be readonly.
I've worked with EF (not a millions of record db) and the speed was OK, nothing slow to note something wrong. Also, changing poco's will break code, I think it could happen on most orms. 
I haven't used nhibernate, but it looks like it is not perfect at all, and EF has some cons that Nhibernate hasnt (and viceverse). I've working with EF (code first) and IMO it works great.
Here's explained how CMD works: https://www.quora.com/How-does-CMD-work TL;DR: CMD commands themselves launch other programs and returns their output to the CMD window. If you use Process.Start() with capture output stream you can write your own CMD.
We used Roslyn and a Microsoft codegen tool. Check out [IOG](https://github.com/AArnott/ImmutableObjectGraph) which we use to generate immutable classes. Since then, Ive switched back to using $@"" and string interpolation piped into CSharpSyntaxTree.ParseText which makes generation a breeze. 
Create, at least, 1 class to hold all those properties. Then you only pass a reference to an instance on the class. I said at least because you might want to keep some data, ie. address details, on its own class as well. Also instead of age you might want birth date so it can be kept up to date, but I'm just guessing on that one.
Good idea - that is one way.
This is the typical way to handle this situation. Some people refer to them as POCOs or plain old clr objects. Just a simple class, call it PersonProperties or similar, with a bunch of public properties. The first example that comes to mind is how you can instantiate a Process on it's own and then set it up, or you can instantiate a ProcessStartInfo first, then create your process object using the startinfo object. Another way to reduce constructor params is to just remove them. Have default values. And implement some logic such that you can't use a Person object if it's in an invalid state. Lastly, if you're sure this class isn't doing too much, that's fine. But often if there are so many required properties for a single object, it's because it's concerned with too many things. You mentioned you don't want to refactor, but I assume you mean you don't want to refactor a LOT. Because this is how you refactor :)
If you don't gain much from extracting some of the parameters into classes (i.e. you won't use them anywhere except for this method), you might keep the parameter count and use named parameters at call site, which makes functions with many parameters much more readable: `Person(name: "Hugo", age: 33, ...)`
Can you elaborate?
Try using `Console.In.Peek()` instead of `ReadKey()` in the timer thread.
Yeah they’ve also released some videos for what’s coming in C# 8. Books are useful but to me language is moving so fast unless they do digital books with free updates then it makes books less useful, there are so many sites for learning and video resources now too.
Use a builder pattern.
With good, old, hard practice. Pick something you nearly know how to make and than make it. First lets say landing page for personal web. Than a very basic blog landing page reading data from database. And so on. I think the easiest way would be to ask this company, what you should be able to build to qualify as junior developer. Than work yourself up to that.
I used nhibernate for a year, and we never once had a problem with multiple people checking it out, making changes, checking in again, and things breaking. Things broke with EF several times a week from that, and we were using Microsoft version control at that. And it didn't matter what changes were made, *any* changes resulted in complete failure of the EF and we'd have to do a rollback in the version control. It was really a disaster and we spent inordinate amounts of time dealing with these problems. My issue with speed with EF wasn't so much a lot of records in the DB - I don't think any of our tables went beyond a couple hundred thousand records - but the number of tables in the framework. Once the number of tables got too high, it became unusably slow. We had to have at least three frameworks for dealing with just one database because we couldn't put the tables into one EF or it'd slow to a crawl. Also, EF didn't deal well with views, while nhibernate dealt with them better. This was a real problem because the place where I was using EF used views quite extensively.
Create a Person class that has all those properties. Your method is now a parameterless member on the class.
Do you know about XPath? `SelectSingleNode("//title")` might be what you want. edit: Link to XPath tutorial: https://www.w3schools.com/xml/xpath_intro.asp
Hmm, not something I’ve used before. I’ll have a look through the tutorial. Thanks.
Get(string) can return null so doing `content.Length` on a possible null without a null-check begs for a NullReferenceException.
I have fowler screaming in my ear Anemic Domain Model right now. good point on the refactor.
There's no great trick. And as you're a junior I'd just read as many books cover to cover and do online code challenges. In terms of efficient ways of learning, that just sounds a little like procrastination after overloading yourself. There are plenty MVC code tutorials out there, but, not to worry you or anything, if you haven't got Javascript in your learning deck, and you want to be a C# web dev (irregardless of netCore MVC or MVC5), you're going to be struggling. Finally, make sure you save all your experiments with C# in Github or a public dropbox. And I mean every last one.
Linq to XML XElement xelement = XElement.Load("..\\..\\tv-generator.xml"); IEnumerable&lt;XElement&gt; TelevisionElements= xelement.Elements(); foreach(var tv in TelevisionElements) { //Do stuff } also var xmlString="&lt;tv&gt;&lt;programme&gt;&lt;/programme&gt;&lt;/tv&gt;"; var xDoc = new XDocument(new XElement("tv", XElement.Parse(xmlString)));
Your welcome strings need to be in quotes. your IDE should flag this up tbh..
Use Visual studio on Mac for Net Core
Run coverage on a build server
cmd is just another command interpreter that runs other programs. instead of creating a program which runs a program which was created to run programs, do it directly.
That is of true course, and I found the error: the last URL was an https:// which did a 302 redirect to http://. :( Why aren't redirects followed? I also discovered that as long as I do `foreach` over the URLs, that's not really parallel. Ah, well, learning on the way... :)
Also, you should use `RunAsync().GetAwaiter().GetResult();` - not call `Wait`. That way you also get the actual exception, instead of an `AggregateException`.
I usually don't recommend paid resources because there are good free ones, but for this use case, considering where you're starting, I highly recommend a Plural Sight subscription. Do a few video tutorials from front to back and at the end you'll have some working apps. Also, head to the Microsoft Virtual Academy and consider taking some certification exams. They aren't worth it for a lot of people, but if you're going the completely self-taught route, you should probably have something to show your proficiency with the APIs.
You could use LINQ to indicate that you are expecting only one result: private void ProcessProgramme(XmlElement el) =&gt; var title = el.GetElementsByTagName("title").Single().InnerText; It may also be worth your time to check out the difference between XmlElement and XElement. XElement is a newer API, and may make some of your XML manipulation easier.
Ah. So is that a norm, i.e. should I always avoid `Await()` and use this instead? **EDIT:** I meant `Wait()`.
&gt; Console.In.Peek Thanks for the idea, however it seems that fires over and over after firing once. Going to experiment a bit more as the description seems to fit. Thanks again
Maybe something like the Visitor pattern would make more sense, then. If this is all inside a single assembly and there will never be implementations outside that assembly, though, you can probably get by with some comments and whatever arrangement is most convenient. Maybe make the classes or methods sealed and/or internal, if you're worried about somebody deriving child types.
&gt; Some people refer to them as POCOs or plain old clr objects This but using a fluid interface. 
You should **always** `await`, unless you can't. No idea what `Await()` is.
Well done my friend if you want some help with that let me know. Probably I'll test this on my project next week. Till then good luck with development!
Agree there is no real shortcut. I have been at it 15 years and the truth is I still continue to learn every day. I imagine godlike programmer skills to be like a horizon you keep moving towards it but are never any closer. That may sound daunting but it is actually a great and exciting thing, you will never be bored if you love it. 
I'm afraid you are right. I tend to procrastinate when the field I wish to learn is huge, and so is the number of available learning resources. Instead of sticking with one good book and reading it cover to cover, I'm prone to overplan. As for Javascript, I'm not a JS ninja but I have quite a decent command over vanilla JS and even built several pet projects using React. Hopefully, this is not going to be a problem. Thank you! 
Are you talking about Pluralsight's ASP NET MVC tutorials? Or Scott Allen's course on C#? 
Last time I asked one of their developers I didn't get a lot of feedback. Just the "You should know C#, ASP NET MVC, and SQL". Pretty vague indeed. 
I'm by no means looking for shortcuts. I understand that programming (as any other field) is an endless process of constant learning and improvement. I'm well aware of that and ready to work hard. I do need, however, some advice on how to avoid common pitfalls, make the learning process more efficient and effective. 
Xamarin
If you don't want to make an entire class out of it, look at expando object for a temporary object based solution.
But that doesn't seem to have any linux support, does it?
It's cross platform for 99% devices. No one will waste time for numerous platforms in other 1%.
usually a sign of disconnect is a packet with content of 0 bytes
Sorry. I meant `Wait()`, ref. my edit.
I really like the Linq solution. And I’ll look into XElement too, thanks.
So when a client disconnects a 0 byte message is still sent to the waiting client.reader.readline() on the server side? Or how is that to be understood? It doesn't seem to do this when the client exits the WPF window. It at least throws the exception when that happens.
I think that he meant to develop with C# in a Linux environment. So actually he is asking about the 1%. 
I would assume that the redirects return a URL they point to, so you would have to trap that and use the given value. As for the null, have you tried just dropping the = null ? Then you will get an empty string out if there's nothing to return instead of something that will cause a failure. As for your foreach not being parallel, if you really want that to be in parallel, you should take a look at https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/how-to-write-a-simple-parallel-foreach-loop Just to set your expectations though, small quantities of parallel tasks can be slower than you would expect due to the setup of threads. You tend to see best results in pooled threads, when threads are reused many times.
yes
You should expect both - IOException for unexpected disconnects and a 0-byte buffer for graceful disconnects. 
Do like /u/Eleenrood says. Build a small application where you already know the problem space. Do you have a lot of CDs or albums? Write a music tracker. If you like genealogy, write a relationship tracker. Whatever it is, you want an application that has at least one parent-child relationship. For albums, it's album-song (an album has one or more songs). For genealogy, it's literally parent-child. And both have interesting special-cases - the same song can be on different albums (maybe live vs. studio). For parent-child, you'd have to handle divorces and multiple marriages. So when you write this application, ask yourself "How do I store this data on disk?" A database is a natural way to do this. "How do I present this information to users?" A website is a natural way to do this. 
Sorry to sound pedantic but please give 'Code Complete' by Steve McConnell a read. He has an entire chapter on how to think about these problems - there is nothing specific to C# here.
The author of the book usually has some free tutorials for the mew language feature available in his freely available software, LinqPad. 
Just to confirm, the 0-byte buffer is still sent to the client.reader.readline that is waiting for input? Even when there hasn't actually been written to it from the client?
Iv'e been doing a bit of research on this topic and there is [this](https://github.com/tjanczuk/edge) that lets you call c# from JavaScript so you can build an electron app 
If you can stand videos, sign up for Pluralsight and follow the C# and MVC. Make sure you get to at least the intermediate level if you can't finish with the expert level. Also, another very good resource is Mosh Hamedani on Udemy. He is a very good teacher and can get you up and running. For books, can't recommend one from the top of my head but I think if you try google, you will have a lot of recommendations. All the best :-)
If I understand your problem correctly, you want to bypass the normal behavior of the Selectable class `.Select()` method by casting it as an interface first, and using the Explicit Interface implementation to get the alternate behavior? That's a dirty hack, and should not be used any more than "busting out to asm blocks in native code" has its exceedingly rare use cases. &gt; In this example, calling a Selectable's Select method outside SelectManager would break SelectManager. Then you have your class design wrong, namely your classes are badly coupled. The only time that would be halfway acceptable is if Selectable was a private class of SelectManager. Maybe your message passing is inverted? **Why** would this break SelectManager? Is there some private implementation detail of SelectManager that breaks when .Select() is called? A slightly less-dirty hack would be for Select() to accept a delegate. This delegate, implemented in SelectManager (as a private method or as a lambda), does the private custom logic that handles the breaking implementation details of SelectManager. Any time you have `class A` depend on implementation details in `class B` while `class B` also depends on implementation details back in `class A`, you've got an improper OO design.
u/loseitloser is correct that this isn't a language specific problem. I don't recall anything in *Code Complete* that would be relevant, really, but I read the book almost 15 years ago, so it's not exactly fresh in my mind. A run through some riff on *Design Patterns* would also be a good use of time, whether it's the Gang of Four book, or Fowler's *Catalog* or whatever Robert Martin's written, or even *Head First Design Patterns*. Just something to get a feel for how certain broad classes of problem have been solved by other people, even if it's just so you have somewhere to refer back to from there. u/RiPont also makes excellent points.
I actually find questions like this really interesting. I don't think you're going about it the right way, but I can't recommend an alternative without knowing more. Do you want to give some details about what you're trying to accomplish?
&gt; Because SelectManager has to know what is selected. If a Selectable's select method is called by itself, there will be something selected without the SelectManager knowing. ... Then have Selected() return what is selected? &gt; How does Selectable depend on SelectManager? Per your clarification, it doesn't. However, if Selectable breaks SelectManager when Select() is called and you add custom code to work around that, then it depends on the implementation details of SelectManager. If Selectable has a custom code path to not break SelectManager, then its implementation is coupled with SelectManager. &gt; I want to hide my Selectable's Select method to anyone but my SelectManager as it's the only class that should call it. There are multiple ways to skin this cat. * Internal methods. Requires Selectable and SelectManager to be in the same assembly, but any class in that assembly can see it. (not recommended for this) * Classes on classes. If Selectable/SelectManager are defined as classes *underneath* one or the other, they can access each other's private fields. * Delegates / Action&lt;T&gt; / Func&lt;Targ, Treturn&gt;. Select(func). This lets SelectManager pass in a method/lambda to be called that can do custom SelectManager-private things.
Lol yea. The last sentence was an attempt at saying "but it is helpful to use them that way." First sentence - If that's the only reason you're doing it, you're not using them to their full potential (and imo, wrong). Last sentence - That's not why you should use them, but it is nifty if you spend a lot of time in the file.
Really depends on what is requested of you at this job. If they want you to jump in and start maintaining existing projects with little guidance then you just need a high level understanding to copy and paste code and modify to fit the request. If you are developing new projects from the ground up you need more fundamental understanding to avoid the many pitfalls. Edit: I'd say familiarize yourself with common programming terms as this will bring a lot of value in being able to search for answers on the web C# terminology https://msdn.microsoft.com/da-dk/library/ms173231(v=vs.90).aspx A big verbose list of .net terms too much to really study but maybe a helpful tool to dissect an answer you don't fully understand http://mobile.developer.com/net/asp/article.php/1756291/Microsoft-NET-Glossary.htm 